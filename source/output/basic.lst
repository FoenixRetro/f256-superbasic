
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 20:31:36 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.800a	20 c2 88	jsr $88c2			jsr 	NewCommand 					; erase current program
.800d	20 e4 98	jsr $98e4			jsr 	BackloadProgram
.8010	4c 0e 8a	jmp $8a0e			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 151."
>805b	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>806b	30 32 32 2e 20 42 75 69 6c 64 20 31 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>807a	0d 0d 00					.byte 	13,13,0
>807d							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807e					VectorSetPunc:
>807e	7b 8e					.word	ShiftLeft                        ; $00 <<
>8080	75 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8082	6b 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8084	6e a5					.word	SyntaxError                      ; $03 !!3
>8086	6e a5					.word	SyntaxError                      ; $04 ><
>8088	7f 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>808a	7e 8e					.word	ShiftRight                       ; $06 >>
>808c	6e a5					.word	SyntaxError                      ; $07 !!7
>808e	6e a5					.word	SyntaxError                      ; $08 !!8
>8090	6e a5					.word	SyntaxError                      ; $09 !!9
>8092	6e a5					.word	SyntaxError                      ; $0a !!10
>8094	6e a5					.word	SyntaxError                      ; $0b !!11
>8096	6e a5					.word	SyntaxError                      ; $0c !!12
>8098	6e a5					.word	SyntaxError                      ; $0d !!13
>809a	6e a5					.word	SyntaxError                      ; $0e !!14
>809c	6e a5					.word	SyntaxError                      ; $0f !!15
>809e	6e a5					.word	SyntaxError                      ; $10 @
>80a0	6e a5					.word	SyntaxError                      ; $11 !!17
>80a2	6e a5					.word	SyntaxError                      ; $12 !!18
>80a4	6e a5					.word	SyntaxError                      ; $13 [
>80a6	a5 9f					.word	IntegerDivide                    ; $14 \
>80a8	6e a5					.word	SyntaxError                      ; $15 ]
>80aa	04 90					.word	EorInteger                       ; $16 ^
>80ac	6e a5					.word	SyntaxError                      ; $17 _
>80ae	6e a5					.word	SyntaxError                      ; $18 `
>80b0	6e a5					.word	SyntaxError                      ; $19 !!25
>80b2	6e a5					.word	SyntaxError                      ; $1a !!26
>80b4	6e a5					.word	SyntaxError                      ; $1b {
>80b6	be 8f					.word	OraInteger                       ; $1c |
>80b8	6e a5					.word	SyntaxError                      ; $1d }
>80ba	6e a5					.word	SyntaxError                      ; $1e ~
>80bc	6e a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80be	6e a5					.word	SyntaxError                      ; $20
>80c0	4a 90					.word	WordIndirect                     ; $21 !
>80c2	6e a5					.word	SyntaxError                      ; $22 "
>80c4	6e a5					.word	SyntaxError                      ; $23 #
>80c6	6e a5					.word	SyntaxError                      ; $24 $
>80c8	f2 9f					.word	IntegerModulus                   ; $25 %
>80ca	78 8f					.word	AndInteger                       ; $26 &
>80cc	6e a5					.word	SyntaxError                      ; $27 '
>80ce	6e a5					.word	SyntaxError                      ; $28 (
>80d0	6e a5					.word	SyntaxError                      ; $29 )
>80d2	67 a0					.word	MulInteger                       ; $2a *
>80d4	12 8f					.word	AddInteger                       ; $2b +
>80d6	6e a5					.word	SyntaxError                      ; $2c ,
>80d8	4d 8f					.word	SubInteger                       ; $2d -
>80da	6e a5					.word	SyntaxError                      ; $2e .
>80dc	fe a1					.word	FDivideCommand                   ; $2f /
>80de	6e a5					.word	SyntaxError                      ; $30 0
>80e0	6e a5					.word	SyntaxError                      ; $31 1
>80e2	6e a5					.word	SyntaxError                      ; $32 2
>80e4	6e a5					.word	SyntaxError                      ; $33 3
>80e6	6e a5					.word	SyntaxError                      ; $34 4
>80e8	6e a5					.word	SyntaxError                      ; $35 5
>80ea	6e a5					.word	SyntaxError                      ; $36 6
>80ec	6e a5					.word	SyntaxError                      ; $37 7
>80ee	6e a5					.word	SyntaxError                      ; $38 8
>80f0	6e a5					.word	SyntaxError                      ; $39 9
>80f2	6e a5					.word	SyntaxError                      ; $3a :
>80f4	6e a5					.word	SyntaxError                      ; $3b ;
>80f6	57 8d					.word	BinaryCompareLess                ; $3c <
>80f8	4d 8d					.word	BinaryCompareEqual               ; $3d =
>80fa	61 8d					.word	BinaryCompareGreater             ; $3e >
>80fc	71 90					.word	ByteIndirect                     ; $3f ?
.80fe					VectorSet0:
>80fe	7a 8a					.word	EOLCommand                       ; $80 !0:EOF
>8100	87 8a					.word	Shift1Command                    ; $81 !1:SH1
>8102	8f 8a					.word	Shift2Command                    ; $82 !2:SH2
>8104	44 a3					.word	AbsUnary                         ; $83 ABS(
>8106	3b 95					.word	AllocUnary                       ; $84 ALLOC(
>8108	54 a3					.word	AscUnary                         ; $85 ASC(
>810a	f6 95					.word	ChrUnary                         ; $86 CHR$(
>810c	49 8d					.word	UnaryFalse                       ; $87 FALSE
>810e	61 a3					.word	FracUnary                        ; $88 FRAC(
>8110	77 a3					.word	IntUnary                         ; $89 INT(
>8112	cd a3					.word	IsValUnary                       ; $8a ISVAL(
>8114	d0 96					.word	Unary_Left                       ; $8b LEFT$(
>8116	89 a3					.word	LenUnary                         ; $8c LEN(
>8118	fa 96					.word	Unary_Mid                        ; $8d MID$(
>811a	93 95					.word	Unary_Not                        ; $8e NOT(
>811c	e0 96					.word	Unary_Right                      ; $8f RIGHT$(
>811e	a9 95					.word	Unary_Rnd                        ; $90 RND(
>8120	a3 a3					.word	SgnUnary                         ; $91 SGN(
>8122	08 96					.word	SpcUnary                         ; $92 SPC(
>8124	23 96					.word	Unary_Str                        ; $93 STR$(
>8126	3d 8d					.word	UnaryTrue                        ; $94 TRUE
>8128	c3 a3					.word	ValUnary                         ; $95 VAL(
>812a	f3 85					.word	ForCommand                       ; $96 FOR
>812c	40 87					.word	IfCommand                        ; $97 IF
>812e	97 8a					.word	Unused1                          ; $98 PROC
>8130	ba 89					.word	Command_REPEAT                   ; $99 REPEAT
>8132	a2 8c					.word	Command_WHILE                    ; $9a WHILE
>8134	69 87					.word	EndIf                            ; $9b ENDIF
>8136	7e 9f					.word	Command_ENDPROC                  ; $9c ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9d NEXT
>813a	97 8a					.word	Unused4                          ; $9e THEN
>813c	c3 89					.word	Command_UNTIL                    ; $9f UNTIL
>813e	c3 8c					.word	Command_WEND                     ; $a0 WEND
>8140	c8 84					.word	CallCommand                      ; $a1 CALL
>8142	6e a5					.word	SyntaxError                      ; $a2 CLS
>8144	2b 85					.word	Command_Data                     ; $a3 DATA
>8146	33 85					.word	DimCommand                       ; $a4 DIM
>8148	97 8a					.word	Unused3                          ; $a5 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a6 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a8 GOTO
>8150	6a 87					.word	LetCommand                       ; $a9 LET
>8152	3e 88					.word	Command_LOCAL                    ; $aa LOCAL
>8154	cc 88					.word	Command_Print                    ; $ab PRINT
>8156	54 89					.word	Command_Read                     ; $ac READ
>8158	ad 89					.word	RemCommand                       ; $ad REM
>815a	16 87					.word	Command_RETURN                   ; $ae RETURN
>815c	97 8a					.word	Unused2                          ; $af TO
.815e					VectorSet1:
>815e	6e a5					.word	SyntaxError                      ; $80 !0:EOF
>8160	6e a5					.word	SyntaxError                      ; $81 !1:SH1
>8162	6e a5					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	a3 87					.word	Command_List                     ; $87 LIST
>816e	c2 88					.word	NewCommand                       ; $88 NEW
>8170	dc 89					.word	Command_Restore                  ; $89 RESTORE
>8172	0e 8a					.word	CommandRUN                       ; $8a RUN
>8174	9a 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	6e a5					.word	SyntaxError                      ; $80 !0:EOF
>8178	6e a5					.word	SyntaxError                      ; $81 !1:SH1
>817a	6e a5					.word	SyntaxError                      ; $82 !2:SH2
>817c	31 a4					.word	Assemble_adc                     ; $83 ADC
>817e	29 a4					.word	Assemble_and                     ; $84 AND
>8180	45 a4					.word	Assemble_asl                     ; $85 ASL
>8182	af a4					.word	Assemble_bcc                     ; $86 BCC
>8184	b3 a4					.word	Assemble_bcs                     ; $87 BCS
>8186	bb a4					.word	Assemble_beq                     ; $88 BEQ
>8188	72 a4					.word	Assemble_bit                     ; $89 BIT
>818a	a3 a4					.word	Assemble_bmi                     ; $8a BMI
>818c	b7 a4					.word	Assemble_bne                     ; $8b BNE
>818e	9f a4					.word	Assemble_bpl                     ; $8c BPL
>8190	bf a4					.word	Assemble_bra                     ; $8d BRA
>8192	c3 a4					.word	Assemble_brk                     ; $8e BRK
>8194	a7 a4					.word	Assemble_bvc                     ; $8f BVC
>8196	ab a4					.word	Assemble_bvs                     ; $90 BVS
>8198	cb a4					.word	Assemble_clc                     ; $91 CLC
>819a	1f a5					.word	Assemble_cld                     ; $92 CLD
>819c	df a4					.word	Assemble_cli                     ; $93 CLI
>819e	0f a5					.word	Assemble_clv                     ; $94 CLV
>81a0	3d a4					.word	Assemble_cmp                     ; $95 CMP
>81a2	86 a4					.word	Assemble_cpx                     ; $96 CPX
>81a4	81 a4					.word	Assemble_cpy                     ; $97 CPY
>81a6	63 a4					.word	Assemble_dec                     ; $98 DEC
>81a8	1b a5					.word	Assemble_dex                     ; $99 DEX
>81aa	f7 a4					.word	Assemble_dey                     ; $9a DEY
>81ac	2d a4					.word	Assemble_eor                     ; $9b EOR
>81ae	68 a4					.word	Assemble_inc                     ; $9c INC
>81b0	27 a5					.word	Assemble_inx                     ; $9d INX
>81b2	17 a5					.word	Assemble_iny                     ; $9e INY
>81b4	9a a4					.word	Assemble_jmp                     ; $9f JMP
>81b6	95 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b8	39 a4					.word	Assemble_lda                     ; $a1 LDA
>81ba	5e a4					.word	Assemble_ldx                     ; $a2 LDX
>81bc	7c a4					.word	Assemble_ldy                     ; $a3 LDY
>81be	4f a4					.word	Assemble_lsr                     ; $a4 LSR
>81c0	2b a5					.word	Assemble_nop                     ; $a5 NOP
>81c2	25 a4					.word	Assemble_ora                     ; $a6 ORA
>81c4	db a4					.word	Assemble_pha                     ; $a7 PHA
>81c6	c7 a4					.word	Assemble_php                     ; $a8 PHP
>81c8	23 a5					.word	Assemble_phx                     ; $a9 PHX
>81ca	e3 a4					.word	Assemble_phy                     ; $aa PHY
>81cc	eb a4					.word	Assemble_pla                     ; $ab PLA
>81ce	cf a4					.word	Assemble_plp                     ; $ac PLP
>81d0	33 a5					.word	Assemble_plx                     ; $ad PLX
>81d2	f3 a4					.word	Assemble_ply                     ; $ae PLY
>81d4	4a a4					.word	Assemble_rol                     ; $af ROL
>81d6	54 a4					.word	Assemble_ror                     ; $b0 ROR
>81d8	d7 a4					.word	Assemble_rti                     ; $b1 RTI
>81da	e7 a4					.word	Assemble_rts                     ; $b2 RTS
>81dc	41 a4					.word	Assemble_sbc                     ; $b3 SBC
>81de	d3 a4					.word	Assemble_sec                     ; $b4 SEC
>81e0	2f a5					.word	Assemble_sed                     ; $b5 SED
>81e2	ef a4					.word	Assemble_sei                     ; $b6 SEI
>81e4	35 a4					.word	Assemble_sta                     ; $b7 STA
>81e6	59 a4					.word	Assemble_stx                     ; $b8 STX
>81e8	77 a4					.word	Assemble_sty                     ; $b9 STY
>81ea	6d a4					.word	Assemble_stz                     ; $ba STZ
>81ec	0b a5					.word	Assemble_tax                     ; $bb TAX
>81ee	07 a5					.word	Assemble_tay                     ; $bc TAY
>81f0	90 a4					.word	Assemble_trb                     ; $bd TRB
>81f2	8b a4					.word	Assemble_tsb                     ; $be TSB
>81f4	13 a5					.word	Assemble_tsx                     ; $bf TSX
>81f6	fb a4					.word	Assemble_txa                     ; $c0 TXA
>81f8	03 a5					.word	Assemble_txs                     ; $c1 TXS
>81fa	ff a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 23 07	sta $0723			sta 	BaseOpcode
.8210	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 24 07	sta $0724			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c 6e a5	jmp $a56e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c 73 a5	jmp $a573			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 20 07	sta $0720			sta 	ParamStart
.8296	8e 21 07	stx $0721			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 20 07	lda $0720			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 21 07	lda $0721			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1d 07	lda $071d		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 dc a7	jsr $a7dc		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 dc a7	jsr $a7dc		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c 73 a5	jmp $a573		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c dc a7	jmp $a7dc			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 22 07	lda $0722			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 23 07	adc $0723			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 ab 93	jsr $93ab			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c 78 a5	jmp $a578			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 03 9f	jsr $9f03			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 03 9f	jsr $9f03			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 03 9f	jsr $9f03			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9f03					TACOCheckXY:
.9f03	b1 30		lda ($30),y			lda 	(codePtr),y
.9f05	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9f07	c9 40		cmp #$40			cmp 	#$40
.9f09	d0 21		bne $9f2c			bne 	_TCXYFail
.9f0b	b1 30		lda ($30),y			lda 	(codePtr),y
.9f0d	18		clc				clc
.9f0e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9f10	85 37		sta $37				sta 	zTemp0+1
.9f12	c8		iny				iny
.9f13	b1 30		lda ($30),y			lda 	(codePtr),y
.9f15	c8		iny				iny
.9f16	85 36		sta $36				sta 	zTemp0
.9f18	5a		phy				phy 								; save position
.9f19	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f1d	d0 0c		bne $9f2b			bne 	_TCXYPopFail
.9f1f	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9f21	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f23	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9f25	f0 08		beq $9f2f			beq 	_TCXYFound
.9f27	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9f29	f0 04		beq $9f2f			beq 	_TCXYFound
.9f2b					_TCXYPopFail:
.9f2b	7a		ply				ply
.9f2c					_TCXYFail:
.9f2c	a9 00		lda #$00			lda 	#0
.9f2e	60		rts				rts
.9f2f					_TCXYFound:
.9f2f	7a		ply				ply 								; restore position
.9f30	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9f32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8447	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.844a	20 d0 9e	jsr $9ed0			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 26 a8	jsr $a826			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 d0 9e	jsr $9ed0			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 5d a8	jsr $a85d			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 f2 a7	jsr $a7f2			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 2f 9c	jsr $9c2f			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8475	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 20 8a	jsr $8a20			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84aa	20 94 9f	jsr $9f94			jsr 	CheckComma
.84ad	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 9b 97	jsr $979b			jsr 	EvaluateInteger 			; the assert test
.84bd	20 54 98	jsr $9854			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 d7 98	jsr $98d7			jsr 	StackReset
.8518	20 6e a7	jsr $a76e			jsr 	StringSystemInitialise
.851b	20 f1 8b	jsr $8bf1			jsr 	ProcedureScan
.851e	20 dc 89	jsr $89dc			jsr 	Command_Restore
.8521	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8524	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8527	9c 1f 07	stz $071f			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 43 8c	jsr $8c43			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 0e a4	jsr $a40e			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 5a 95	jsr $955a			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c 78 a5	jmp $a578			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 77 98	jsr $9877			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 ab 93	jsr $93ab			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 9c 9f	jsr $9f9c			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 9b 97	jsr $979b			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 af		cmp #$af			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 9b 97	jsr $979b			jsr 	EvaluateInteger
.861d	20 b6 98	jsr $98b6			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c 78 a5	jmp $a578			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 d9 97	jsr $97d9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 9e 98	jsr $989e			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 90 98	jsr $9890			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 c7 98	jsr $98c7			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 77 98	jsr $9877			jsr 	StackOpen 					; create frame
.8710	20 b6 98	jsr $98b6			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 9e 98	jsr $989e			jsr 	StackCheckFrame
.871d	20 c7 98	jsr $98c7			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 90 98	jsr $9890			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 d0 9e	jsr $9ed0			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c 19 8a	jmp $8a19			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c d1 8c	jmp $8cd1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 78 97	jsr $9778			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 54 98	jsr $9854			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c 7a 8a	jmp $8a7a			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 54 98	jsr $9854			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875e	20 43 8c	jsr $8c43			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 43 8c	jsr $8c43			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	ad c2 90	lda $90c2			lda 	PrecedenceLevel+"*"			; precedence > this
.876f	20 dc 90	jsr $90dc			jsr 	EvaluateExpressionAtPrecedence
.8772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8775	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8777	f0 0e		beq $8787			beq 	_LetGoProc 					; it's a procedure call.
.8779	a9 3d		lda #$3d			lda 	#"=" 						; check =
.877b	20 9c 9f	jsr $9f9c			jsr 	CheckNextA
.877e	e8		inx				inx 								; RHS
.877f	20 6f 97	jsr $976f			jsr 	EvaluateValue
.8782	ca		dex				dex
.8783	20 8a 87	jsr $878a			jsr 	AssignVariable
.8786	60		rts				rts
.8787					_LetGoProc:
.8787	4c 23 89	jmp $8923			jmp 	CallProcedure
.878a					AssignVariable:
.878a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878d	48		pha				pha 								; save a copy
.878e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8791	29 10		and #$10			and 	#NSBIsString
.8793	d0 0b		bne $87a0			bne 	_ASError
.8795	68		pla				pla 								; get back
.8796	29 10		and #$10			and 	#NSBIsString 				; check type
.8798	d0 03		bne $879d			bne 	_ASString
.879a	4c 17 91	jmp $9117			jmp 	AssignNumber
.879d					_ASString:
.879d	4c 85 91	jmp $9185			jmp 	AssignString
.87a0					_ASError:
.87a0	4c 78 a5	jmp $a578			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a3					Command_List:
.87a3	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a6	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a9	a9 ff		lda #$ff			lda 	#$FF
.87ab	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ae	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b5	f0 1e		beq $87d5			beq 	_CLSecond
.87b7	20 33 88	jsr $8833			jsr 	CLIsDigit 					; if not digit, list all
.87ba	b0 24		bcs $87e0			bcs 	_CLStart
.87bc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87be	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger
.87c1	b1 30		lda ($30),y			lda 	(codePtr),y
.87c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c5	f0 0e		beq $87d5			beq 	_CLSecond 					; if so go get it
.87c7	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87ca	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cd	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87d0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d3	80 0b		bra $87e0			bra 	_CLStart
.87d5					_CLSecond:
.87d5	c8		iny				iny 								; consume comma
.87d6	20 33 88	jsr $8833			jsr 	CLIsDigit 					; digit found
.87d9	b0 05		bcs $87e0			bcs 	_CLStart 					; if not, continue listing
.87db	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87dd	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger
.87e0					_CLStart
.87e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e2	85 30		sta $30				sta 	codePtr
.87e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e6	85 31		sta $31				sta 	codePtr+1
.87e8					_CLLoop:
.87e8	20 1d a8	jsr $a81d			jsr 	EXTBreakCheck 				; break check
.87eb	f0 30		beq $881d			beq 	_CLExit
.87ed	b2 30		lda ($30)			lda 	(codePtr)
.87ef	f0 2c		beq $881d			beq 	_CLExit
.87f1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f3	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87f6	90 18		bcc $8810			bcc 	_CLNext
.87f8	a2 07		ldx #$07			ldx 	#7
.87fa	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87fd	f0 02		beq $8801			beq 	_CLDoThisOne
.87ff	b0 0f		bcs $8810			bcs 	_CLNext
.8801					_CLDoThisOne:
.8801	20 9f 8a	jsr $8a9f			jsr 	ListConvertLine 			; convert line into token Buffer
.8804	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8806	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8808	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.880b	a9 0d		lda #$0d			lda 	#13 						; new line
.880d	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.8810					_CLNext:
.8810	18		clc				clc
.8811	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8813	65 30		adc $30				adc 	codePtr
.8815	85 30		sta $30				sta 	codePtr
.8817	90 02		bcc $881b			bcc 	_CREExit
.8819	e6 31		inc $31				inc 	codePtr+1
.881b					_CREExit:
.881b	80 cb		bra $87e8			bra 	_CLLoop
.881d					_CLExit:
.881d	4c 69 84	jmp $8469			jmp 	WarmStart
.8820					CLCompareLineNo:
.8820	38		sec				sec
.8821	a0 01		ldy #$01			ldy 	#1
.8823	b1 30		lda ($30),y			lda 	(codePtr),y
.8825	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8828	85 36		sta $36				sta 	zTemp0
.882a	c8		iny				iny
.882b	b1 30		lda ($30),y			lda 	(codePtr),y
.882d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8830	05 36		ora $36				ora 	zTemp0
.8832	60		rts				rts
.8833					CLIsDigit:
.8833	b1 30		lda ($30),y			lda 	(codePtr),y
.8835	c9 30		cmp #$30			cmp 	#"0"
.8837	90 03		bcc $883c			bcc	 	_CLIDExitFalse
.8839	c9 3a		cmp #$3a			cmp 	#"9"+1
.883b	60		rts				rts
.883c					_CLIDExitFalse:
.883c	38		sec				sec
.883d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883e					Command_LOCAL:
.883e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8840	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c8		iny				iny
.8846	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8848	f0 f4		beq $883e			beq 	Command_LOCAL
.884a	88		dey				dey 								; unpick pre-get
.884b	60		rts				rts
.884c					LocaliseNextTerm:
.884c	20 ab 93	jsr $93ab			jsr 	EvaluateTerm 				; evaluate the term
.884f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8852	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8854	f0 69		beq $88bf			beq		_LNTError
.8856	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8859	85 36		sta $36				sta 	zTemp0
.885b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885e	85 37		sta $37				sta  	zTemp0+1
.8860	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8863	29 10		and #$10			and 	#NSBIsString
.8865	d0 22		bne $8889			bne 	_LNTPushString
.8867	5a		phy				phy
.8868	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.886a					_LNTPushNumLoop:
.886a	b1 36		lda ($36),y			lda		(zTemp0),y
.886c	20 61 98	jsr $9861			jsr 	StackPushByte
.886f	a9 00		lda #$00			lda 	#0
.8871	91 36		sta ($36),y			sta 	(zTemp0),y
.8873	c8		iny				iny
.8874	c0 05		cpy #$05			cpy 	#5
.8876	d0 f2		bne $886a			bne 	_LNTPushNumLoop
.8878	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.887a	20 61 98	jsr $9861			jsr 	StackPushByte
.887d	a5 37		lda $37				lda 	zTemp0+1
.887f	20 61 98	jsr $9861			jsr 	StackPushByte
.8882	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8884	20 61 98	jsr $9861			jsr 	StackPushByte
.8887	7a		ply				ply
.8888	60		rts				rts
.8889					_LNTPushString:
.8889	5a		phy				phy
.888a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.888c	85 38		sta $38				sta 	zTemp1
.888e	a0 01		ldy #$01			ldy 	#1
.8890	b1 36		lda ($36),y			lda 	(zTemp0),y
.8892	85 39		sta $39				sta 	zTemp1+1
.8894	a0 00		ldy #$00			ldy 	#0 							; output string
.8896	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8898	f0 0a		beq $88a4			beq 	_LNTStringOut
.889a					_LNTPushStrLoop:
.889a	b1 38		lda ($38),y			lda 	(zTemp1),y
.889c	f0 06		beq $88a4			beq 	_LNTStringOut
.889e	20 61 98	jsr $9861			jsr 	StackPushByte
.88a1	c8		iny				iny
.88a2	80 f6		bra $889a			bra 	_LNTPushStrLoop
.88a4					_LNTStringOut:
.88a4	98		tya				tya									; output length
.88a5	20 61 98	jsr $9861			jsr 	StackPushByte
.88a8	a9 00		lda #$00			lda 	#0 							; clear original string.
.88aa	92 38		sta ($38)			sta 	(zTemp1)
.88ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88af	20 61 98	jsr $9861			jsr 	StackPushByte
.88b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b5	20 61 98	jsr $9861			jsr 	StackPushByte
.88b8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.88ba	20 61 98	jsr $9861			jsr 	StackPushByte
.88bd	7a		ply				ply
.88be	60		rts				rts
.88bf					_LNTError:
.88bf	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.9f33					LocalPopValue:
.9f33	20 6e 98	jsr $986e			jsr 	StackPopByte
.9f36	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f38	d0 17		bne $9f51			bne 	_LPVString
.9f3a	20 6e 98	jsr $986e			jsr 	StackPopByte 				; address
.9f3d	85 37		sta $37				sta 	zTemp0+1
.9f3f	20 6e 98	jsr $986e			jsr 	StackPopByte
.9f42	85 36		sta $36				sta 	zTemp0
.9f44	5a		phy				phy
.9f45	a0 04		ldy #$04			ldy 	#4 							; copy back
.9f47					_LPVNumberCopy:
.9f47	20 6e 98	jsr $986e			jsr 	StackPopByte
.9f4a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f4c	88		dey				dey
.9f4d	10 f8		bpl $9f47			bpl 	_LPVNumberCopy
.9f4f	7a		ply				ply 								; and complete
.9f50	60		rts				rts
.9f51					_LPVString:
.9f51	20 6e 98	jsr $986e			jsr 	StackPopByte 				; address of record => zTemp0
.9f54	85 37		sta $37				sta 	zTemp0+1
.9f56	20 6e 98	jsr $986e			jsr 	StackPopByte
.9f59	85 36		sta $36				sta 	zTemp0
.9f5b	5a		phy				phy
.9f5c	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9f5e	85 38		sta $38				sta 	zTemp1
.9f60	a0 01		ldy #$01			ldy 	#1
.9f62	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f64	85 39		sta $39				sta 	zTemp1+1
.9f66	20 6e 98	jsr $986e			jsr 	StackPopByte 				; # to get => y
.9f69	a8		tay				tay
.9f6a	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9f6c	f0 0e		beq $9f7c			beq 	_LPVStringCopied
.9f6e	a9 00		lda #$00			lda 	#0 							; NULL on end
.9f70	91 38		sta ($38),y			sta 	(zTemp1),y
.9f72					_LPVStringCopy:
.9f72	88		dey				dey
.9f73	30 07		bmi $9f7c			bmi 	_LPVStringCopied
.9f75	20 6e 98	jsr $986e			jsr 	StackPopByte
.9f78	91 38		sta ($38),y			sta 	(zTemp1),y
.9f7a	80 f6		bra $9f72			bra 	_LPVStringCopy
.9f7c					_LPVStringCopied:
.9f7c	fa		plx				plx
.9f7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88c2					NewCommand:
.88c2	20 ae 9e	jsr $9eae			jsr 	MemoryNew
.88c5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88c8	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.88cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88cc					Command_Print:
.88cc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88cd					_CPLoop:
.88cd	08		php				php 								; save last action flag
.88ce	b1 30		lda ($30),y			lda 	(codePtr),y
.88d0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88d2	f0 46		beq $891a			beq 	_CPExit
.88d4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88d6	f0 42		beq $891a			beq 	_CPExit
.88d8	68		pla				pla 								; throw last action flag
.88d9	b1 30		lda ($30),y			lda 	(codePtr),y
.88db	c8		iny				iny
.88dc	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88de	f0 37		beq $8917			beq 	_CPContinueWithSameLine
.88e0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88e2	f0 2e		beq $8912			beq 	_CPTab
.88e4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88e6	f0 26		beq $890e			beq 	_CPNewLine
.88e8	88		dey				dey 								; undo the get.
.88e9	a2 00		ldx #$00			ldx 	#0
.88eb	20 6f 97	jsr $976f			jsr 	EvaluateValue 				; get a value into slot 0
.88ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88f1	29 10		and #$10			and 	#NSBIsString
.88f3	f0 0b		beq $8900			beq 	_CPNumber
.88f5	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88f8	ad 08 06	lda $0608			lda 	NSMantissa0
.88fb	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.88fe	80 cc		bra $88cc			bra 	Command_Print 				; loop round clearing carry so NL if end
.8900					_CPNumber:
.8900	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8902	20 45 96	jsr $9645			jsr 	ConvertNumberToString 		; convert to string
.8905	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8907	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.8909	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.890c	80 be		bra $88cc			bra 	Command_Print 				; loop round clearing carry so NL if end
.890e					_CPNewLine:
.890e	a9 0d		lda #$0d			lda 	#13
.8910	80 02		bra $8914			bra 	_CPPrintChar
.8912					_CPTab:
.8912	a9 09		lda #$09			lda 	#9 							; print TAB
.8914					_CPPrintChar:
.8914	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.8917					_CPContinueWithSameLine:
.8917	38		sec				sec 								; loop round with carry set, which
.8918	80 b3		bra $88cd			bra 	_CPLoop 					; will inhibit final CR
.891a					_CPExit:
.891a	28		plp				plp 								; get last action flag
.891b	b0 05		bcs $8922			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.891d	a9 0d		lda #$0d			lda 	#13 						; print new line
.891f	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.8922					_CPExit2:
.8922	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8923					CallProcedure:
.8923	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.8926	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8928	20 77 98	jsr $9877			jsr 	StackOpen
.892b	20 b6 98	jsr $98b6			jsr 	STKSaveCodePosition 		; save loop position
.892e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8931	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8933	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8936	85 37		sta $37				sta 	zTemp0+1
.8938	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.893a	b2 36		lda ($36)			lda 	(zTemp0)
.893c	85 30		sta $30				sta 	safePtr
.893e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8940	85 31		sta $31				sta 	safePtr+1
.8942	c8		iny				iny
.8943	b1 36		lda ($36),y			lda 	(zTemp0),y
.8945	85 32		sta $32				sta 	safePtr+2
.8947	c8		iny				iny
.8948	b1 36		lda ($36),y			lda 	(zTemp0),y
.894a	85 33		sta $33				sta 	safePtr+3
.894c	c8		iny				iny 								; get Y offset -> Y
.894d	b1 36		lda ($36),y			lda 	(zTemp0),y
.894f	a8		tay				tay
.8950	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; check )
.8953	60		rts				rts 								; and continue from here
.9f7e					Command_ENDPROC:
.9f7e	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9f80	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9f82	20 9e 98	jsr $989e			jsr 	StackCheckFrame
.9f85	20 c7 98	jsr $98c7			jsr 	STKLoadCodePosition 		; restore code position
.9f88	20 90 98	jsr $9890			jsr 	StackClose
.9f8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8954					Command_Read:
.8954	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8956	20 ab 93	jsr $93ab			jsr 	EvaluateTerm
.8959	bd 00 06	lda $0600,x			lda 	NSStatus,x
.895c	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.895e	f0 4a		beq $89aa			beq 	_CRSyntax 					; check reference (bit 0)
.8960	20 f3 89	jsr $89f3			jsr 	SwapDataCodePtrs 			; swap code and data
.8963	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8966	d0 20		bne $8988			bne 	_CRContinueData
.8968					_CRKeepSearching:
.8968	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.896a	aa		tax				tax
.896b	20 43 8c	jsr $8c43			jsr 	ScanForward
.896e	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8970	f0 16		beq $8988			beq 	_CRHaveData 				; found it
.8972	18		clc				clc
.8973	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8975	65 30		adc $30				adc 	codePtr
.8977	85 30		sta $30				sta 	codePtr
.8979	90 02		bcc $897d			bcc 	_CREExit
.897b	e6 31		inc $31				inc 	codePtr+1
.897d					_CREExit:
.897d	a0 03		ldy #$03			ldy 	#3 							; start of line.
.897f	b2 30		lda ($30)			lda 	(codePtr)
.8981	d0 e5		bne $8968			bne 	_CRKeepSearching
.8983	a9 0b		lda #$0b		lda	#11
.8985	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.8988					_CRHaveData:
.8988					_CRContinueData:
.8988	a2 01		ldx #$01			ldx 	#1
.898a	20 6f 97	jsr $976f			jsr 	EvaluateValue 				; evaluate value into slot # 1
.898d	ca		dex				dex
.898e	20 8a 87	jsr $878a			jsr		AssignVariable 				; do the assignment
.8991	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.8994	b1 30		lda ($30),y			lda 	(codePtr),y
.8996	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8998	d0 04		bne $899e			bne 	_CRSwapBack
.899a	c8		iny				iny 								; consume comma
.899b	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.899e					_CRSwapBack:
.899e	20 f3 89	jsr $89f3			jsr 	SwapDataCodePtrs			; swap them back.
.89a1	b1 30		lda ($30),y			lda 	(codePtr),y
.89a3	c8		iny				iny
.89a4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89a6	f0 ac		beq $8954			beq 	Command_Read 				; if so go round again.
.89a8	88		dey				dey 								; unpick get.
.89a9	60		rts				rts
.89aa					_CRSyntax:
.89aa	4c 6e a5	jmp $a56e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.89ad					RemCommand:
.89ad	b1 30		lda ($30),y			lda 	(codePtr),y
.89af	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.89b1	d0 06		bne $89b9			bne 	_RMExit
.89b3	c8		iny				iny
.89b4	98		tya				tya
.89b5	38		sec				sec
.89b6	71 30		adc ($30),y			adc 	(codePtr),y
.89b8	a8		tay				tay
.89b9					_RMExit:
.89b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89ba					Command_REPEAT:
.89ba	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89bc	20 77 98	jsr $9877			jsr 	StackOpen
.89bf	20 b6 98	jsr $98b6			jsr 	STKSaveCodePosition 		; save loop position
.89c2	60		rts				rts
.89c3					Command_UNTIL:
.89c3	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89c5	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89c7	20 9e 98	jsr $989e			jsr 	StackCheckFrame
.89ca	a2 00		ldx #$00			ldx 	#0
.89cc	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; work out the number
.89cf	20 54 98	jsr $9854			jsr 	NSMIsZero 					; check if zero
.89d2	f0 04		beq $89d8			beq 	_CULoopBack 				; if so keep looping
.89d4	20 90 98	jsr $9890			jsr 	StackClose		 			; return
.89d7	60		rts				rts
.89d8					_CULoopBack:
.89d8	20 c7 98	jsr $98c7			jsr 	STKLoadCodePosition 		; loop back
.89db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89dc					Command_Restore:
.89dc	20 f3 89	jsr $89f3			jsr 	SwapDataCodePtrs 			; swap code and data
.89df	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89e1	85 30		sta $30				sta 	codePtr
.89e3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e5	85 31		sta $31				sta 	codePtr+1
.89e7	20 f3 89	jsr $89f3			jsr 	SwapDataCodePtrs 			; put them back
.89ea	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89ec	8d 1a 07	sta $071a			sta 	dataPointer+4
.89ef	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.89f2	60		rts				rts
.89f3					SwapDataCodePtrs:
.89f3	da		phx				phx
.89f4	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89f6					_SDCPLoop:
.89f6	b5 30		lda $30,x			lda 	safePtr,x
.89f8	48		pha				pha
.89f9	bd 16 07	lda $0716,x			lda 	dataPointer,x
.89fc	95 30		sta $30,x			sta 	safePtr,x
.89fe	68		pla				pla
.89ff	9d 16 07	sta $0716,x			sta 	dataPointer,x
.8a02	ca		dex				dex
.8a03	10 f1		bpl $89f6			bpl 	_SDCPLoop
.8a05	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.8a08	8c 1a 07	sty $071a			sty 	dataPointer+4
.8a0b	a8		tay				tay
.8a0c	fa		plx				plx
.8a0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a0e					CommandRUN:
.8a0e	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a11	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a13	85 30		sta $30				sta 	codePtr
.8a15	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a17	85 31		sta $31				sta 	codePtr+1
.8a19					RUNNewLine:
.8a19	b2 30		lda ($30)			lda 	(codePtr)
.8a1b	f0 5a		beq $8a77			beq 	CRNoProgram         		; no then END.
.8a1d	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a1f	9a		txs				txs
.8a20					RUNCodePointerLine:
.8a20	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a22					_CRIncMainLoop:
.8a22	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a25	d0 05		bne $8a2c			bne 	_CRNoBreakCheck
.8a27	20 1d a8	jsr $a81d			jsr 	EXTBreakCheck 				; break check
.8a2a	f0 46		beq $8a72			beq 	_CRBreak
.8a2c					_CRNoBreakCheck:
.8a2c	c8		iny				iny
.8a2d					_CRMainLoop:
.8a2d	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a30	b1 30		lda ($30),y			lda 	(codePtr),y
.8a32	10 10		bpl $8a44			bpl 	_CRNotKeyword
.8a34	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a36	b0 04		bcs $8a3c			bcs 	_CRIsKeyword
.8a38	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a3a	b0 30		bcs $8a6c			bcs		_CRSyntaxError
.8a3c					_CRIsKeyword:
.8a3c	c8		iny				iny 								; consume command
.8a3d	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a3e	aa		tax				tax 								; put in X for vector jump
.8a3f	20 6f 8a	jsr $8a6f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a42	80 e9		bra $8a2d			bra 	_CRMainLoop 				; and loop round
.8a44					_CRNotKeyword:
.8a44	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a46	f0 da		beq $8a22			beq 	_CRIncMainLoop
.8a48	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a4a	90 05		bcc $8a51			bcc 	_CRNotVariable
.8a4c					_CRGoLet:
.8a4c	20 6a 87	jsr $876a			jsr 	LetCommand
.8a4f	80 dc		bra $8a2d			bra 	_CRMainLoop
.8a51					_CRNotVariable:
.8a51	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a53	f0 f7		beq $8a4c			beq 	_CRGoLet
.8a55	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a57	f0 f3		beq $8a4c			beq 	_CRGoLet
.8a59	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a5b	f0 09		beq $8a66			beq 	_CRGoRem
.8a5d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a5f	d0 0b		bne $8a6c			bne 	_CRSyntaxError
.8a61	20 a2 83	jsr $83a2			jsr 	LabelHere
.8a64	80 c7		bra $8a2d			bra 	_CRMainLoop
.8a66					_CRGoRem:
.8a66	c8		iny				iny
.8a67	20 ad 89	jsr $89ad			jsr 	RemCommand
.8a6a	80 c1		bra $8a2d			bra 	_CRMainLoop
.8a6c					_CRSyntaxError:
.8a6c	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.8a6f					_CRCallVector0:
.8a6f	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x)
.8a72					_CRBreak:
.8a72	a9 01		lda #$01		lda	#1
.8a74	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.8a77					CRNoProgram:
.8a77	4c f0 85	jmp $85f0			jmp 	EndCommand
.8a7a					EOLCommand:
.8a7a	18		clc				clc
.8a7b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a7d	65 30		adc $30				adc 	codePtr
.8a7f	85 30		sta $30				sta 	codePtr
.8a81	90 02		bcc $8a85			bcc 	_CREExit
.8a83	e6 31		inc $31				inc 	codePtr+1
.8a85					_CREExit:
.8a85	80 92		bra $8a19			bra 	RunNewLine
.8a87					Shift1Command:
.8a87	b1 30		lda ($30),y			lda 	(codePtr),y
.8a89	c8		iny				iny
.8a8a	0a		asl a				asl 	a
.8a8b	aa		tax				tax
.8a8c	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8a8f					Shift2Command:
.8a8f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a91	c8		iny				iny
.8a92	0a		asl a				asl 	a
.8a93	aa		tax				tax
.8a94	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8a97					Unused1:
.8a97					Unused2:
.8a97					Unused3:
.8a97					Unused4:
.8a97	4c 6e a5	jmp $a56e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a9a					StopCommand:
.8a9a	a9 08		lda #$08		lda	#8
.8a9c	4c d1 8c	jmp $8cd1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a9f					ListConvertLine:
.8a9f	9c 1c 07	stz $071c			stz 	tbOffset
.8aa2	9c 28 07	stz $0728			stz 	tokenBuffer
.8aa5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8aa7	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa9	aa		tax				tax
.8aaa	88		dey				dey
.8aab	b1 30		lda ($30),y			lda 	(codePtr),y
.8aad	20 e8 a0	jsr $a0e8			jsr 	ConvertInt16
.8ab0	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8ab2	86 37		stx $37				stx 	zTemp0+1
.8ab4	a0 00		ldy #$00			ldy 	#0
.8ab6					_LCCopyNumber:
.8ab6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab8	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8abb	c8		iny				iny
.8abc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8abe	d0 f6		bne $8ab6			bne 	_LCCopyNumber
.8ac0					_LCPadOut:
.8ac0	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8ac2	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8ac5	ad 1c 07	lda $071c			lda 	tbOffset
.8ac8	c9 06		cmp #$06			cmp 	#6
.8aca	d0 f4		bne $8ac0			bne 	_LCPadOut
.8acc	a0 03		ldy #$03			ldy 	#3 							; start position.
.8ace					_LCMainLoop:
.8ace	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8ad2	f0 17		beq $8aeb			beq 	_LCExit
.8ad4	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8ad6	90 14		bcc $8aec			bcc 	_LCDoubles
.8ad8	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8ada	90 20		bcc $8afc			bcc 	_LCShiftPunc
.8adc	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8ade	90 2b		bcc $8b0b			bcc 	_LCPunctuation
.8ae0	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8ae2	90 2d		bcc $8b11			bcc 	_LCIdentifiers
.8ae4	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8ae6	90 49		bcc $8b31			bcc 	_LCTokens
.8ae8	4c 8c 8b	jmp $8b8c			jmp 	_LCData 					; 254-5 are data objects
.8aeb					_LCExit:
.8aeb	60		rts				rts
.8aec					_LCDoubles:
.8aec	48		pha				pha
.8aed	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8aee	29 02		and #$02			and 	#2
.8af0	09 3c		ora #$3c			ora 	#60 						; make < >
.8af2	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8af5	68		pla				pla 								; restore, do lower bit
.8af6	29 03		and #$03			and 	#3
.8af8	09 3c		ora #$3c			ora 	#60
.8afa	80 0f		bra $8b0b			bra		_LCPunctuation 				; print, increment, loop
.8afc					_LCShiftPunc:
.8afc	aa		tax				tax 								; save in X
.8afd	29 07		and #$07			and 	#7 							; lower 3 bits
.8aff	f0 02		beq $8b03			beq 	_LCNoAdd
.8b01	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b03					_LCNoAdd:
.8b03	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b05	90 02		bcc $8b09			bcc 	_LCNoAdd2
.8b07	09 20		ora #$20			ora 	#32 						; adds $20
.8b09					_LCNoAdd2:
.8b09	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b0b					_LCPunctuation:
.8b0b	c8		iny				iny 								; consume character
.8b0c	20 b8 8b	jsr $8bb8			jsr 	LCLWrite 					; write it out.
.8b0f	80 bd		bra $8ace			bra 	_LCMainLoop 				; go round again.
.8b11					_LCIdentifiers:
.8b11	18		clc				clc 								; convert to physical address
.8b12	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b14	85 37		sta $37				sta 	zTemp0+1
.8b16	c8		iny				iny
.8b17	b1 30		lda ($30),y			lda 	(codePtr),y
.8b19	85 36		sta $36				sta 	zTemp0
.8b1b	c8		iny				iny
.8b1c	5a		phy				phy 								; save position
.8b1d	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b1f					_LCOutIdentifier:
.8b1f	c8		iny				iny
.8b20	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b22	29 7f		and #$7f			and 	#$7F
.8b24	20 e6 8b	jsr $8be6			jsr 	LCLLowerCase
.8b27	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8b2a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b2c	10 f1		bpl $8b1f			bpl 	_LCOutIdentifier
.8b2e	7a		ply				ply 								; restore position
.8b2f	80 9d		bra $8ace			bra 	_LCMainLoop
.8b31					_LCTokens:
.8b31	aa		tax				tax 								; token in X
.8b32	a9 e8		lda #$e8			lda 	#((KeywordSet2) & $FF)
.8b34	85 36		sta $36				sta 	0+zTemp0
.8b36	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8b38	85 37		sta $37				sta 	1+zTemp0
.8b3a	e0 82		cpx #$82			cpx 	#$82
.8b3c	f0 16		beq $8b54			beq 	_LCUseShift
.8b3e	a9 a4		lda #$a4			lda 	#((KeywordSet1) & $FF)
.8b40	85 36		sta $36				sta 	0+zTemp0
.8b42	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8b44	85 37		sta $37				sta 	1+zTemp0
.8b46	e0 81		cpx #$81			cpx 	#$81
.8b48	f0 0a		beq $8b54			beq 	_LCUseShift
.8b4a	a9 7b		lda #$7b			lda 	#((KeywordSet0) & $FF)
.8b4c	85 36		sta $36				sta 	0+zTemp0
.8b4e	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b50	85 37		sta $37				sta 	1+zTemp0
.8b52	80 01		bra $8b55			bra 	_LCNoShift
.8b54					_LCUseShift:
.8b54	c8		iny				iny
.8b55					_LCNoShift:
.8b55	20 c7 8b	jsr $8bc7			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b58	b1 30		lda ($30),y			lda 	(codePtr),y
.8b5a	aa		tax				tax 								; into X
.8b5b					_LCFindText:
.8b5b	ca		dex				dex
.8b5c	10 0e		bpl $8b6c			bpl 	_LCFoundText 				; found text.
.8b5e	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b60	1a		inc a				inc 	a 							; one extra for size
.8b61	38		sec				sec 								; one extra for checksum
.8b62	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b64	85 36		sta $36				sta 	zTemp0
.8b66	90 f3		bcc $8b5b			bcc 	_LCFindText
.8b68	e6 37		inc $37				inc 	zTemp0+1
.8b6a	80 ef		bra $8b5b			bra 	_LCFindText
.8b6c					_LCFoundText:
.8b6c	5a		phy				phy 								; save List position
.8b6d	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b6f	aa		tax				tax
.8b70	a0 02		ldy #$02			ldy 	#2
.8b72					_LCCopyToken:
.8b72	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b74	20 e6 8b	jsr $8be6			jsr 	LCLLowerCase
.8b77	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8b7a	c8		iny				iny
.8b7b	ca		dex				dex
.8b7c	d0 f4		bne $8b72			bne 	_LCCopyToken
.8b7e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8b80	f0 05		beq $8b87			beq 	_LCNoSpace
.8b82	a9 20		lda #$20			lda 	#' '
.8b84	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8b87					_LCNoSpace:
.8b87	7a		ply				ply 								; restore position.
.8b88	c8		iny				iny 								; consume token
.8b89	4c ce 8a	jmp $8ace			jmp 	_LCMainLoop 				; and go around again.
.8b8c					_LCData:
.8b8c	48		pha				pha 								; save type $FE/$FF
.8b8d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b8f	c9 fe		cmp #$fe			cmp 	#$FE
.8b91	f0 02		beq $8b95			beq 	_LCHaveOpener
.8b93	a2 22		ldx #$22			ldx 	#'"'
.8b95					_LCHaveOpener:
.8b95	8a		txa				txa 								; output prefix (# or ")
.8b96	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8b99	c8		iny				iny 								; get count
.8b9a	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9c	aa		tax				tax
.8b9d	c8		iny				iny 								; point at first character
.8b9e					_LCOutData:
.8b9e	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba0	c9 00		cmp #$00			cmp 	#0
.8ba2	f0 03		beq $8ba7			beq 	_LCNoPrint
.8ba4	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8ba7					_LCNoPrint:
.8ba7	c8		iny				iny
.8ba8	ca		dex				dex
.8ba9	d0 f3		bne $8b9e			bne 	_LCOutData
.8bab	68		pla				pla 								; closing " required ?
.8bac	c9 ff		cmp #$ff			cmp 	#$FF
.8bae	d0 05		bne $8bb5			bne 	_LCNoQuote
.8bb0	a9 22		lda #$22			lda 	#'"'
.8bb2	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8bb5					_LCNoQuote:
.8bb5	4c ce 8a	jmp $8ace			jmp 	_LCMainLoop
.8bb8					LCLWrite:
.8bb8	da		phx				phx
.8bb9	ae 1c 07	ldx $071c			ldx 	tbOffset
.8bbc	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8bbf	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8bc2	ee 1c 07	inc $071c			inc 	tbOffset
.8bc5	fa		plx				plx
.8bc6	60		rts				rts
.8bc7					LCCheckSpaceRequired:
.8bc7	ae 1c 07	ldx $071c			ldx 	tbOffset
.8bca	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8bcd	20 e6 8b	jsr $8be6			jsr 	LCLLowerCase 				; saves a little effort
.8bd0	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8bd2	90 11		bcc $8be5			bcc 	_LCCSRExit
.8bd4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bd6	90 08		bcc $8be0			bcc 	_LCCSRSpace
.8bd8	c9 61		cmp #$61			cmp 	#"a"
.8bda	90 09		bcc $8be5			bcc 	_LCCSRExit
.8bdc	c9 7b		cmp #$7b			cmp 	#"z"+1
.8bde	b0 05		bcs $8be5			bcs 	_LCCSRExit
.8be0					_LCCSRSpace:
.8be0	a9 20		lda #$20			lda 	#' '
.8be2	20 b8 8b	jsr $8bb8			jsr 	LCLWrite
.8be5					_LCCSRExit:
.8be5	60		rts				rts
.8be6					LCLLowerCase:
.8be6	c9 41		cmp #$41			cmp 	#"A"
.8be8	90 06		bcc $8bf0			bcc 	_LCLLCOut
.8bea	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bec	b0 02		bcs $8bf0			bcs 	_LCLLCOut
.8bee	69 20		adc #$20			adc 	#$20
.8bf0					_LCLLCOut:
.8bf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8bf1					ProcedureScan:
.8bf1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bf3	85 30		sta $30				sta 	codePtr
.8bf5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bf7	85 31		sta $31				sta 	codePtr+1
.8bf9					_PSLoop:
.8bf9	b2 30		lda ($30)			lda 	(codePtr)
.8bfb	f0 42		beq $8c3f			beq 	_PSExit
.8bfd	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8bff	b1 30		lda ($30),y			lda 	(codePtr),y
.8c01	c9 98		cmp #$98			cmp 	#KWD_PROC
.8c03	d0 2d		bne $8c32			bne 	_PSNext
.8c05	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c06	b1 30		lda ($30),y			lda 	(codePtr),y
.8c08	29 c0		and #$c0			and 	#$C0
.8c0a	c9 40		cmp #$40			cmp 	#$40
.8c0c	d0 32		bne $8c40			bne 	_PSSyntax
.8c0e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c10	18		clc				clc
.8c11	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c13	85 37		sta $37				sta 	zTemp0+1
.8c15	c8		iny				iny 								; LSB
.8c16	b1 30		lda ($30),y			lda 	(codePtr),y
.8c18	85 36		sta $36				sta 	zTemp0
.8c1a	c8		iny				iny 								; character after variable call.
.8c1b	98		tya				tya 								; save Y offset at +7
.8c1c	a0 07		ldy #$07			ldy 	#7
.8c1e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c20	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c22	a0 02		ldy #$02			ldy 	#2
.8c24	91 36		sta ($36),y			sta 	(zTemp0),y
.8c26	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c28					_PSCopy:
.8c28	b5 30		lda $30,x			lda 	safePtr,x
.8c2a	c8		iny				iny
.8c2b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c2d	e8		inx				inx
.8c2e	e0 04		cpx #$04			cpx 	#4
.8c30	d0 f6		bne $8c28			bne 	_PSCopy
.8c32					_PSNext:
.8c32	18		clc				clc
.8c33	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c35	65 30		adc $30				adc 	codePtr
.8c37	85 30		sta $30				sta 	codePtr
.8c39	90 02		bcc $8c3d			bcc 	_CREExit
.8c3b	e6 31		inc $31				inc 	codePtr+1
.8c3d					_CREExit:
.8c3d	80 ba		bra $8bf9			bra 	_PSLoop
.8c3f					_PSExit:
.8c3f	60		rts				rts
.8c40					_PSSyntax:
.8c40	4c 6e a5	jmp $a56e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c43					ScanForward:
.8c43	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c45	86 37		stx $37				stx 	zTemp0+1
.8c47	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c49					_ScanLoop:
.8c49	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4b	c8		iny				iny
.8c4c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c4e	d0 0e		bne $8c5e			bne 	_ScanGoNext
.8c50	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c52	f0 04		beq $8c58			beq 	_ScanMatch
.8c54	c5 37		cmp $37				cmp 	zTemp0+1
.8c56	d0 06		bne $8c5e			bne 	_ScanGoNext
.8c58					_ScanMatch:
.8c58	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c5a	d0 01		bne $8c5d			bne 	_ScanNotEndEOL
.8c5c	88		dey				dey
.8c5d					_ScanNotEndEOL:
.8c5d	60		rts				rts
.8c5e					_ScanGoNext:
.8c5e	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c60	90 e7		bcc $8c49			bcc 	_ScanLoop
.8c62	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c64	90 18		bcc $8c7e			bcc 	_ScanSkipOne
.8c66	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c68	b0 2f		bcs $8c99			bcs 	_ScanSkipData
.8c6a	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c6c	90 db		bcc $8c49			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c6e	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c70	b0 d7		bcs $8c49			bcs 	_ScanLoop
.8c72	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8c74	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8c76	b0 d1		bcs $8c49			bcs 	_ScanLoop
.8c78	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8c7a	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8c7c	80 cb		bra $8c49			bra 	_ScanLoop
.8c7e					_ScanSkipOne:
.8c7e	c8		iny				iny 								; consume the extra one.
.8c7f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8c81	d0 c6		bne $8c49			bne 	_ScanLoop
.8c83	18		clc				clc
.8c84	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c86	65 30		adc $30				adc 	codePtr
.8c88	85 30		sta $30				sta 	codePtr
.8c8a	90 02		bcc $8c8e			bcc 	_CREExit
.8c8c	e6 31		inc $31				inc 	codePtr+1
.8c8e					_CREExit:
.8c8e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c90	b2 30		lda ($30)			lda 	(codePtr)
.8c92	d0 b5		bne $8c49			bne 	_ScanLoop 					; if not zero, more to scan
.8c94	a9 13		lda #$13		lda	#19
.8c96	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.8c99					_ScanSkipData:
.8c99	88		dey				dey 								; point at data token
.8c9a	c8		iny				iny
.8c9b	98		tya				tya
.8c9c	38		sec				sec
.8c9d	71 30		adc ($30),y			adc 	(codePtr),y
.8c9f	a8		tay				tay
.8ca0	80 a7		bra $8c49			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ca2					Command_WHILE:
.8ca2	5a		phy				phy 								; save position of the test
.8ca3	a2 00		ldx #$00			ldx 	#0
.8ca5	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; work out the number
.8ca8	20 54 98	jsr $9854			jsr 	NSMIsZero 					; check if zero
.8cab	f0 0e		beq $8cbb			beq 	_WHExitLoop 				; if so exit the loop
.8cad	98		tya				tya 								; position *after* test.
.8cae	7a		ply				ply 								; restore position before test, at WHILE
.8caf	88		dey				dey
.8cb0	48		pha				pha 								; push after test on the stack
.8cb1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8cb3	20 77 98	jsr $9877			jsr 	StackOpen
.8cb6	20 b6 98	jsr $98b6			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8cb9	7a		ply				ply 								; restore the position *after* the test
.8cba	60		rts				rts
.8cbb					_WHExitLoop:
.8cbb	68		pla				pla 								; throw post loop position
.8cbc	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8cbe	aa		tax				tax
.8cbf	20 43 8c	jsr $8c43			jsr 	ScanForward
.8cc2	60		rts				rts
.8cc3					Command_WEND:
.8cc3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8cc5	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8cc7	20 9e 98	jsr $989e			jsr 	StackCheckFrame
.8cca	20 c7 98	jsr $98c7			jsr 	STKLoadCodePosition 		; loop back
.8ccd	20 90 98	jsr $9890			jsr 	StackClose		 			; erase the frame
.8cd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9f8c					CheckRightBracket:
.9f8c	b1 30		lda ($30),y			lda 	(codePtr),y
.9f8e	c8		iny				iny
.9f8f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9f91	d0 0f		bne $9fa2			bne 	CNAFail
.9f93	60		rts				rts
.9f94					CheckComma:
.9f94	b1 30		lda ($30),y			lda 	(codePtr),y
.9f96	c8		iny				iny
.9f97	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9f99	d0 07		bne $9fa2			bne 	CNAFail
.9f9b	60		rts				rts
.9f9c					CheckNextA:
.9f9c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9f9e	d0 02		bne $9fa2			bne 	CNAFail
.9fa0	c8		iny				iny 								; skip character
.9fa1	60		rts				rts 								; and exit
.9fa2					CNAFail:
.9fa2	4c 6e a5	jmp $a56e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8cd1					ErrorHandler:
.8cd1	a8		tay				tay 								; find the error text
.8cd2	f0 49		beq $8d1d			beq 	_EHEnd
.8cd4	a2 00		ldx #$00			ldx 	#0
.8cd6	a9 87		lda #$87			lda 	#((ErrorText) & $FF)
.8cd8	85 36		sta $36				sta 	0+zTemp0
.8cda	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8cdc	85 37		sta $37				sta 	1+zTemp0
.8cde					_EHFind:
.8cde	88		dey				dey 								; found the error text ?
.8cdf	f0 0e		beq $8cef			beq 	_EHFound
.8ce1					_EHFindZero:
.8ce1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8ce3	e6 36		inc $36				inc 	zTemp0
.8ce5	d0 02		bne $8ce9			bne 	_EHFNoCarry
.8ce7	e6 37		inc $37				inc 	zTemp0+1
.8ce9					_EHFNoCarry:
.8ce9	c9 00		cmp #$00			cmp 	#0
.8ceb	d0 f4		bne $8ce1			bne 	_EHFindZero
.8ced	80 ef		bra $8cde			bra 	_EHFind
.8cef					_EHFound:
.8cef	a5 36		lda $36				lda 	zTemp0 						; print message
.8cf1	a6 37		ldx $37				ldx 	zTemp0+1
.8cf3	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.8cf6	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8cf8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfa	d0 05		bne $8d01			bne 	_EHAtMsg
.8cfc	c8		iny				iny
.8cfd	b1 30		lda ($30),y			lda 	(codePtr),y
.8cff	f0 17		beq $8d18			beq 	_EHCREnd
.8d01					_EHAtMsg:
.8d01	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d03	a9 20		lda #$20			lda 	#_AtMsg & $FF
.8d05	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA
.8d08	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0c	48		pha				pha
.8d0d	c8		iny				iny
.8d0e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d10	aa		tax				tax
.8d11	68		pla				pla
.8d12	20 e8 a0	jsr $a0e8			jsr 	ConvertInt16 				; convert XA to string
.8d15	20 2a 8d	jsr $8d2a			jsr 	PrintStringXA 				; and print it.
.8d18					_EHCREnd:
.8d18	a9 0d		lda #$0d			lda 	#13 						; new line
.8d1a	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.8d1d					_EHEnd:
.8d1d	4c 69 84	jmp $8469			jmp 	WarmStart
>8d20	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d28	20 00
.8d2a					PrintStringXA:
.8d2a	5a		phy				phy
.8d2b	86 37		stx $37				stx 	zTemp0+1
.8d2d	85 36		sta $36				sta 	zTemp0
.8d2f	a0 00		ldy #$00			ldy 	#0
.8d31					_PSXALoop:
.8d31	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d33	f0 06		beq $8d3b			beq 	_PSXAExit
.8d35	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.8d38	c8		iny				iny
.8d39	80 f6		bra $8d31			bra 	_PSXALoop
.8d3b					_PSXAExit:
.8d3b	7a		ply				ply
.8d3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d3d					UnaryTrue:
.8d3d	fa		plx				plx
.8d3e					ReturnTrue:
.8d3e	a9 01		lda #$01			lda 	#1  						; set to 1
.8d40	20 26 98	jsr $9826			jsr 	NSMSetByte
.8d43	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d45	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d48	60		rts				rts
.8d49					UnaryFalse:
.8d49	fa		plx				plx
.8d4a					ReturnFalse:
.8d4a	4c 24 98	jmp $9824			jmp 	NSMSetZero 					; set it all to zero
.8d4d					BinaryCompareEqual:
.8d4d	fa		plx				plx
.8d4e	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d51	c9 00		cmp #$00			cmp 	#0
.8d53	f0 e9		beq $8d3e			beq 	ReturnTrue
.8d55	80 f3		bra $8d4a			bra 	ReturnFalse
.8d57					BinaryCompareLess:
.8d57	fa		plx				plx
.8d58	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d5b	c9 ff		cmp #$ff			cmp 	#$FF
.8d5d	f0 df		beq $8d3e			beq 	ReturnTrue
.8d5f	80 e9		bra $8d4a			bra 	ReturnFalse
.8d61					BinaryCompareGreater:
.8d61	fa		plx				plx
.8d62	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d65	c9 01		cmp #$01			cmp 	#1
.8d67	f0 d5		beq $8d3e			beq 	ReturnTrue
.8d69	80 df		bra $8d4a			bra 	ReturnFalse
.8d6b					BinaryCompareNotEqual:
.8d6b	fa		plx				plx
.8d6c	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d6f	c9 00		cmp #$00			cmp 	#0
.8d71	d0 cb		bne $8d3e			bne 	ReturnTrue
.8d73	80 d5		bra $8d4a			bra 	ReturnFalse
.8d75					BinaryCompareLessEqual:
.8d75	fa		plx				plx
.8d76	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d79	c9 01		cmp #$01			cmp 	#1
.8d7b	d0 c1		bne $8d3e			bne 	ReturnTrue
.8d7d	80 cb		bra $8d4a			bra 	ReturnFalse
.8d7f					BinaryCompareGreaterEqual:
.8d7f	fa		plx				plx
.8d80	20 89 8d	jsr $8d89			jsr 	CompareBaseCode
.8d83	c9 ff		cmp #$ff			cmp 	#$FF
.8d85	d0 b7		bne $8d3e			bne 	ReturnTrue
.8d87	80 c1		bra $8d4a			bra 	ReturnFalse
.8d89					CompareBaseCode:
.8d89	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; make both values if references.
.8d8c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d8f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d92	29 10		and #$10			and 	#NSTString
.8d94	d0 40		bne $8dd6			bne 	_CBCString
.8d96	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d99	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d9c	d0 3b		bne $8dd9			bne 	_CBCFloat
.8d9e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8da1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8da4	29 08		and #$08			and 	#NSTFloat
.8da6	d0 31		bne $8dd9			bne 	_CBCFloat
.8da8	20 dc 8d	jsr $8ddc			jsr 	CompareFixMinusZero
.8dab	e8		inx				inx
.8dac	20 dc 8d	jsr $8ddc			jsr 	CompareFixMinusZero
.8daf	ca		dex				dex
.8db0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8db3	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8db6	10 0b		bpl $8dc3			bpl 	_CDCSameSign
.8db8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8dbb	30 16		bmi $8dd3			bmi 	_CBCLess 					; return $FF
.8dbd					_CBCGreater:
.8dbd	a9 01		lda #$01			lda 	#1
.8dbf	60		rts				rts
.8dc0					_CBCEqual:
.8dc0	a9 00		lda #$00			lda 	#0
.8dc2	60		rts				rts
.8dc3					_CDCSameSign:
.8dc3	20 ec 8e	jsr $8eec			jsr 	SubTopTwoStack 				; unsigned subtract
.8dc6	20 54 98	jsr $9854			jsr 	NSMIsZero 					; or the mantissa together
.8dc9	f0 f5		beq $8dc0			beq 	_CBCEqual 					; -0 == 0
.8dcb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8dce	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dd1	10 ea		bpl $8dbd			bpl 	_CBCGreater
.8dd3					_CBCLess:
.8dd3	a9 ff		lda #$ff			lda 	#$FF
.8dd5	60		rts				rts
.8dd6					_CBCString:
.8dd6	4c 42 8e	jmp $8e42			jmp 	CompareStrings
.8dd9					_CBCFloat:
.8dd9	4c e4 a1	jmp $a1e4			jmp 	CompareFloat
.8ddc					CompareFixMinusZero:
.8ddc	20 54 98	jsr $9854			jsr 	NSMIsZero
.8ddf	d0 03		bne $8de4			bne 	_CFXMZNotZero
.8de1	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8de4					_CFXMZNotZero:
.8de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8de5					StringConcat:
.8de5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8de8	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8deb	29 18		and #$18			and 	#NSBTypeMask
.8ded	c9 10		cmp #$10			cmp 	#NSTString
.8def	d0 4e		bne $8e3f			bne		_SCType
.8df1	64 38		stz $38				stz 	zTemp1 						; counting total length
.8df3	e8		inx				inx
.8df4	20 12 8e	jsr $8e12			jsr 	_SCSetupZ0 					; setup for second
.8df7	20 1d 8e	jsr $8e1d			jsr 	_SCLengthZ0 				; length for second
.8dfa	ca		dex				dex
.8dfb	20 12 8e	jsr $8e12			jsr 	_SCSetupZ0 					; setup for first
.8dfe	20 1d 8e	jsr $8e1d			jsr 	_SCLengthZ0 				; length for first
.8e01	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e03	20 8f a7	jsr $a78f			jsr 	StringTempAllocate
.8e06	20 30 8e	jsr $8e30			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e09	e8		inx				inx
.8e0a	20 12 8e	jsr $8e12			jsr 	_SCSetupZ0 					; copy second out
.8e0d	20 30 8e	jsr $8e30			jsr 	_SCCopy
.8e10	ca		dex				dex
.8e11	60		rts				rts
.8e12					_SCSetupZ0:
.8e12	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e15	85 36		sta $36				sta 	zTemp0
.8e17	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e1a	85 37		sta $37				sta 	zTemp0+1
.8e1c	60		rts				rts
.8e1d					_SCLengthZ0:
.8e1d	5a		phy				phy
.8e1e	a0 00		ldy #$00			ldy 	#0
.8e20					_SCLenLoop:
.8e20	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e22	f0 0a		beq $8e2e			beq 	_SCLExit
.8e24	c8		iny				iny
.8e25	e6 38		inc $38				inc 	zTemp1
.8e27	10 f7		bpl $8e20			bpl		_SCLenLoop
.8e29	a9 09		lda #$09		lda	#9
.8e2b	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.8e2e					_SCLExit:
.8e2e	7a		ply				ply
.8e2f	60		rts				rts
.8e30					_SCCopy:
.8e30	5a		phy				phy
.8e31	a0 00		ldy #$00			ldy 	#0
.8e33					_SCCopyLoop:
.8e33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e35	f0 06		beq $8e3d			beq 	_SCCExit
.8e37	20 cd a7	jsr $a7cd			jsr 	StringTempWrite
.8e3a	c8		iny				iny
.8e3b	80 f6		bra $8e33			bra 	_SCCopyLoop
.8e3d					_SCCExit:
.8e3d	7a		ply				ply
.8e3e	60		rts				rts
.8e3f					_SCType:
.8e3f	4c 78 a5	jmp $a578			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9fa5					IntegerDivide:
.9fa5	fa		plx				plx
.9fa6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9fa9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9fac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9fad	0a		asl a				asl 	a
.9fae	10 05		bpl $9fb5			bpl 	_NotRef
.9fb0	48		pha				pha
.9fb1	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fb4	68		pla				pla
.9fb5					_NotRef:
.9fb5	0a		asl a				asl 	a
.9fb6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9fb8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fbb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9fbe	f0 03		beq $9fc3			beq 	_IntegerCode 				; if clear, then we have two integers
.9fc0	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.9fc3					_IntegerCode:
.9fc3	20 e5 9f	jsr $9fe5			jsr 	CheckDivideZero 			; do div zero check
.9fc6	20 1d a0	jsr $a01d			jsr 	Int32Divide 				; do the division
.9fc9	20 da a0	jsr $a0da			jsr 	CalculateSign 				; calculate result sign
.9fcc					NSMCopyPlusTwoToZero:
.9fcc	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9fcf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9fd2	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9fd5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fd8	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9fdb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9fde	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9fe1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9fe4	60		rts				rts
.9fe5					CheckDivideZero:
.9fe5	e8		inx				inx
.9fe6	20 54 98	jsr $9854			jsr 	NSMIsZero
.9fe9	f0 02		beq $9fed			beq 	_CDVError
.9feb	ca		dex				dex
.9fec	60		rts				rts
.9fed					_CDVError:
.9fed	a9 03		lda #$03		lda	#3
.9fef	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.9ff2					IntegerModulus:
.9ff2	fa		plx				plx
.9ff3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ff6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ff9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ffa	0a		asl a				asl 	a
.9ffb	10 05		bpl $a002			bpl 	_NotRef
.9ffd	48		pha				pha
.9ffe	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a001	68		pla				pla
.a002					_NotRef:
.a002	0a		asl a				asl 	a
.a003	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a005	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a008	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a00b	f0 03		beq $a010			beq 	_IntegerCode 				; if clear, then we have two integers
.a00d	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.a010					_IntegerCode:
.a010	20 e5 9f	jsr $9fe5			jsr 	CheckDivideZero 			; do div zero check
.a013	20 1d a0	jsr $a01d			jsr 	Int32Divide 				; do the division
.a016	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a019	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a01c	60		rts				rts
.a01d					Int32Divide:
.a01d	48		pha				pha 								; save AXY
.a01e	5a		phy				phy
.a01f	20 fb 97	jsr $97fb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a022	20 20 98	jsr $9820			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a025	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a027					_I32DivideLoop:
.a027	e8		inx				inx
.a028	e8		inx				inx
.a029	20 39 98	jsr $9839			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a02c	ca		dex				dex
.a02d	ca		dex				dex
.a02e	20 3a 98	jsr $983a			jsr 	NSMRotateLeft
.a031	20 5d a0	jsr $a05d			jsr 	DivideCheckSubtract 		; check if subtract possible
.a034	90 03		bcc $a039			bcc 	_I32DivideNoCarryIn
.a036	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a039					_I32DivideNoCarryIn:
.a039	88		dey				dey 								; loop round till division completed.
.a03a	d0 eb		bne $a027			bne 	_I32DivideLoop
.a03c	7a		ply				ply 								; restore AXY and exit
.a03d	68		pla				pla
.a03e	60		rts				rts
.a03f					Int32ShiftDivide:
.a03f	48		pha				pha 								; save AY
.a040	5a		phy				phy
.a041	e8		inx				inx 								; clear S[X+2]
.a042	e8		inx				inx
.a043	20 24 98	jsr $9824			jsr 	NSMSetZero
.a046	ca		dex				dex
.a047	ca		dex				dex
.a048	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a04a					_I32SDLoop:
.a04a	20 5d a0	jsr $a05d			jsr 	DivideCheckSubtract 		; check if subtract possible
.a04d	e8		inx				inx
.a04e	e8		inx				inx
.a04f	20 3a 98	jsr $983a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a052	ca		dex				dex
.a053	ca		dex				dex
.a054	20 3a 98	jsr $983a			jsr 	NSMRotateLeft
.a057	88		dey				dey 	 							; do 31 times
.a058	d0 f0		bne $a04a			bne 	_I32SDLoop
.a05a	7a		ply				ply 								; restore AY and exit
.a05b	68		pla				pla
.a05c	60		rts				rts
.a05d					DivideCheckSubtract:
.a05d	20 ec 8e	jsr $8eec			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a060	b0 04		bcs $a066			bcs 	_DCSExit 					; if carry set, then could do, exit
.a062	20 c6 8e	jsr $8ec6			jsr 	AddTopTwoStack 				; add it back in
.a065	18		clc				clc 								; and return False
.a066					_DCSExit:
.a066	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a067					MulInteger:
.a067	fa		plx				plx
.a068	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a06b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a06e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a06f	0a		asl a				asl 	a
.a070	10 05		bpl $a077			bpl 	_NotRef
.a072	48		pha				pha
.a073	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a076	68		pla				pla
.a077					_NotRef:
.a077	0a		asl a				asl 	a 							; put MSB of type into A:7
.a078	30 0b		bmi $a085			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a07a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a07d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a080	f0 06		beq $a088			beq 	_IntegerCode 				; if clear, then we have two integers
.a082	4c bb a2	jmp $a2bb			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a085					_StringData:
.a085	4c 82 a5	jmp $a582			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a088					_IntegerCode:
.a088	20 95 a0	jsr $a095			jsr 	MultiplyShort
.a08b	c9 00		cmp #$00			cmp 	#0
.a08d	f0 05		beq $a094			beq 	_MIExit
.a08f	a9 04		lda #$04		lda	#4
.a091	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a094					_MIExit:
.a094	60		rts				rts
.a095					MultiplyShort:
.a095	5a		phy				phy 								; save Y
.a096	20 fb 97	jsr $97fb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a099	20 20 98	jsr $9820			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a09c	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a09e					_I32MLoop:
.a09e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a0a1	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a0a4	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a0a7	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a0aa	f0 28		beq $a0d4			beq 	_I32MExit 					; exit if zero
.a0ac	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a0af	29 01		and #$01			and 	#1
.a0b1	f0 0e		beq $a0c1			beq 	_I32MNoAdd
.a0b3	20 c6 8e	jsr $8ec6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a0b6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a0b9	10 06		bpl $a0c1			bpl 	_I32MNoAdd
.a0bb					_I32ShiftRight:
.a0bb	20 47 98	jsr $9847			jsr 	NSMShiftRight 				; shift S[X] right
.a0be	c8		iny				iny 								; increment shift count
.a0bf	80 0a		bra $a0cb			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a0c1					_I32MNoAdd:
.a0c1	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a0c4	70 f5		bvs $a0bb			bvs 	_I32ShiftRight 				; instead.
.a0c6	e8		inx				inx
.a0c7	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a0ca	ca		dex				dex
.a0cb					_I32MShiftUpper:
.a0cb	e8		inx				inx 								; shift S[X+2] right
.a0cc	e8		inx				inx
.a0cd	20 47 98	jsr $9847			jsr 	NSMShiftRight
.a0d0	ca		dex				dex
.a0d1	ca		dex				dex
.a0d2	80 ca		bra $a09e			bra 	_I32MLoop 					; try again.
.a0d4					_I32MExit:
.a0d4	20 da a0	jsr $a0da			jsr 	CalculateSign
.a0d7	98		tya				tya 								; shift in A
.a0d8	7a		ply				ply 								; restore Y and exit
.a0d9	60		rts				rts
.a0da					CalculateSign:
.a0da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a0dd	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a0e0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a0e3	0a		asl a				asl 	a 							; shift bit 7 into carry
.a0e4	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a0e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e42					CompareStrings:
.8e42	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e45	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e48	29 10		and #$10			and 	#NSBIsString
.8e4a	f0 2c		beq $8e78			beq 	_CSTypeError
.8e4c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e4f	85 36		sta $36				sta 	zTemp0
.8e51	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e54	85 37		sta $37				sta 	zTemp0+1
.8e56	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e59	85 38		sta $38				sta 	zTemp1
.8e5b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e5e	85 39		sta $39				sta 	zTemp1+1
.8e60	5a		phy				phy 								; save Y so we can access strings
.8e61	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e63					_CSLoop:
.8e63	c8		iny				iny
.8e64	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e66	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e68	d0 06		bne $8e70			bne 	_CSDifferent
.8e6a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e6c	d0 f5		bne $8e63			bne 	_CSLoop 					; still comparing
.8e6e					_CSExit:
.8e6e	7a		ply				ply 								; reached end, return zero in A from EOS
.8e6f	60		rts				rts
.8e70					_CSDifferent:
.8e70	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e72	90 fa		bcc $8e6e			bcc		_CSExit
.8e74	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8e76	80 f6		bra $8e6e			bra 	_CSExit
.8e78					_CSTypeError:
.8e78	4c 78 a5	jmp $a578			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8e7b					ShiftLeft:
.8e7b	38		sec				sec
.8e7c	80 01		bra $8e7f			bra 	ShiftMain
.8e7e					ShiftRight:
.8e7e	18		clc				clc
.8e7f					ShiftMain:
.8e7f	fa		plx				plx 								; restore X
.8e80	08		php				php 								; save direction
.8e81	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e84	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e87	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e88	0a		asl a				asl 	a
.8e89	10 05		bpl $8e90			bpl 	_NotRef
.8e8b	48		pha				pha
.8e8c	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e8f	68		pla				pla
.8e90					_NotRef:
.8e90	0a		asl a				asl 	a
.8e91	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e93	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e96	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e99	f0 03		beq $8e9e			beq 	_IntegerCode 				; if clear, then we have two integers
.8e9b	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.8e9e					_IntegerCode:
.8e9e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8ea1	29 e0		and #$e0			and 	#$E0
.8ea3	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8ea6	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ea9	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8eac	d0 13		bne $8ec1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8eae					_SMLoop:
.8eae	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8eb1	30 11		bmi $8ec4			bmi 	_SMExit 					; exit if done.
.8eb3	28		plp				plp 								; restore direcition setting
.8eb4	08		php				php
.8eb5	90 05		bcc $8ebc			bcc 	_SMRight
.8eb7	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; shift left if CS
.8eba	80 f2		bra $8eae			bra 	_SMLoop
.8ebc					_SMRight:
.8ebc	20 47 98	jsr $9847			jsr 	NSMShiftRight 				; shift right if CC
.8ebf	80 ed		bra $8eae			bra 	_SMLoop
.8ec1					_SMExit0:
.8ec1	20 24 98	jsr $9824			jsr 	NSMSetZero 					; return zero.
.8ec4					_SMExit:
.8ec4	28		plp				plp 								; throw direction
.8ec5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8ec6					AddTopTwoStack:
.8ec6	18		clc				clc
.8ec7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8eca	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8ecd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ed0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ed3	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8ed6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ed9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8edc	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8edf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ee2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ee5	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8ee8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eeb	60		rts				rts
.8eec					SubTopTwoStack:
.8eec	38		sec				sec
.8eed	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ef0	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8ef3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef6	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ef9	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8efc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8eff	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f02	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f05	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f08	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f0b	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f0e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f11	60		rts				rts
.8f12					AddInteger:
.8f12	fa		plx				plx
.8f13	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f16	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f19	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f1a	0a		asl a				asl 	a
.8f1b	10 05		bpl $8f22			bpl 	_NotRef
.8f1d	48		pha				pha
.8f1e	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f21	68		pla				pla
.8f22					_NotRef:
.8f22	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f23	30 0b		bmi $8f30			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f25	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f28	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f2b	f0 06		beq $8f33			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2d	4c 43 a1	jmp $a143			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f30					_StringData:
.8f30	4c e5 8d	jmp $8de5			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f33					_IntegerCode:
.8f33					AddCode:
.8f33	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f36	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f39	10 8b		bpl $8ec6			bpl 	AddTopTwoStack
.8f3b	20 ec 8e	jsr $8eec			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f3e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f41	10 09		bpl $8f4c			bpl 	_AddExit
.8f43	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f46	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f49	20 d9 97	jsr $97d9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f4c					_AddExit:
.8f4c	60		rts				rts
.8f4d					SubInteger:
.8f4d	fa		plx				plx
.8f4e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f51	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f54	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f55	0a		asl a				asl 	a
.8f56	10 05		bpl $8f5d			bpl 	_NotRef
.8f58	48		pha				pha
.8f59	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f5c	68		pla				pla
.8f5d					_NotRef:
.8f5d	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f5e	30 0b		bmi $8f6b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f60	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f63	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f66	f0 06		beq $8f6e			beq 	_IntegerCode 				; if clear, then we have two integers
.8f68	4c 48 a1	jmp $a148			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f6b					_StringData:
.8f6b	4c 82 a5	jmp $a582			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f6e					_IntegerCode:
.8f6e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f71	49 80		eor #$80			eor 	#$80
.8f73	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f76	80 bb		bra $8f33			bra 	AddCode 					; and do the same code as add.
.8f78					AndInteger:
.8f78	fa		plx				plx
.8f79	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f7c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f7f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f80	0a		asl a				asl 	a
.8f81	10 05		bpl $8f88			bpl 	_NotRef
.8f83	48		pha				pha
.8f84	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f87	68		pla				pla
.8f88					_NotRef:
.8f88	0a		asl a				asl 	a
.8f89	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f8b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f8e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f91	f0 03		beq $8f96			beq 	_IntegerCode 				; if clear, then we have two integers
.8f93	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.8f96					_IntegerCode:
.8f96	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f99	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f9c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f9f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fa2	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8fa5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fa8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fab	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8fae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fb1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fb4	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8fb7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fba	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fbd	60		rts				rts
.8fbe					OraInteger:
.8fbe	fa		plx				plx
.8fbf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fc2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fc5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fc6	0a		asl a				asl 	a
.8fc7	10 05		bpl $8fce			bpl 	_NotRef
.8fc9	48		pha				pha
.8fca	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fcd	68		pla				pla
.8fce					_NotRef:
.8fce	0a		asl a				asl 	a
.8fcf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fd1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fd4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fd7	f0 03		beq $8fdc			beq 	_IntegerCode 				; if clear, then we have two integers
.8fd9	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.8fdc					_IntegerCode:
.8fdc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fdf	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8fe2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fe5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fe8	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8feb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fee	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ff1	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8ff4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ff7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ffa	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8ffd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9000	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9003	60		rts				rts
.9004					EorInteger:
.9004	fa		plx				plx
.9005	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9008	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.900b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.900c	0a		asl a				asl 	a
.900d	10 05		bpl $9014			bpl 	_NotRef
.900f	48		pha				pha
.9010	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9013	68		pla				pla
.9014					_NotRef:
.9014	0a		asl a				asl 	a
.9015	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9017	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.901a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.901d	f0 03		beq $9022			beq 	_IntegerCode 				; if clear, then we have two integers
.901f	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.9022					_IntegerCode:
.9022	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9025	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9028	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.902b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.902e	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.9031	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9034	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9037	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.903a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.903d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9040	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9043	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9046	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9049	60		rts				rts
.904a					WordIndirect:
.904a	fa		plx				plx
.904b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.904e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9051	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9052	0a		asl a				asl 	a
.9053	10 05		bpl $905a			bpl 	_NotRef
.9055	48		pha				pha
.9056	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9059	68		pla				pla
.905a					_NotRef:
.905a	0a		asl a				asl 	a
.905b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.905d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9060	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9063	f0 03		beq $9068			beq 	_IntegerCode 				; if clear, then we have two integers
.9065	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.9068					_IntegerCode:
.9068	20 33 8f	jsr $8f33			jsr 	AddCode 					; add the two values
.906b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.906d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9070	60		rts				rts
.9071					ByteIndirect:
.9071	fa		plx				plx
.9072	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9075	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9078	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9079	0a		asl a				asl 	a
.907a	10 05		bpl $9081			bpl 	_NotRef
.907c	48		pha				pha
.907d	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9080	68		pla				pla
.9081					_NotRef:
.9081	0a		asl a				asl 	a
.9082	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9084	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9087	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.908a	f0 03		beq $908f			beq 	_IntegerCode 				; if clear, then we have two integers
.908c	4c 78 a5	jmp $a578			jmp 	TypeError 					; anything else, type mismatch.
.908f					_IntegerCode:
.908f	20 33 8f	jsr $8f33			jsr 	AddCode 					; add the two values
.9092	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9094	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9097	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a0e8					ConvertInt16:
.a0e8	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a0eb	8e 10 06	stx $0610			stx 	NSMantissa1
.a0ee	9c 18 06	stz $0618			stz 	NSMantissa2
.a0f1	9c 20 06	stz $0620			stz 	NSMantissa3
.a0f4	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a0f7	a2 00		ldx #$00			ldx 	#0 							; stack level
.a0f9	a9 0a		lda #$0a			lda 	#10 						; base
.a0fb	80 00		bra $a0fd			bra 	ConvertInt32
.a0fd					ConvertInt32:
.a0fd	5a		phy				phy
.a0fe	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a100	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a103	10 08		bpl $a10d			bpl 	_CI32NotNeg
.a105	48		pha				pha
.a106	a9 2d		lda #$2d			lda 	#'-'
.a108	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a10b	c8		iny				iny
.a10c	68		pla				pla
.a10d					_CI32NotNeg:
.a10d	20 1b a1	jsr $a11b			jsr 	_CI32DivideConvert 			; recursive conversion
.a110	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a112	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a115	7a		ply				ply
.a116	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a118	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a11a	60		rts				rts
.a11b					_CI32DivideConvert:
.a11b	e8		inx				inx 								; write to next slot up
.a11c	20 26 98	jsr $9826			jsr 	NSMSetByte
.a11f	ca		dex				dex
.a120	20 1d a0	jsr $a01d			jsr 	Int32Divide 				; divide
.a123	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a126	48		pha				pha
.a127	20 cc 9f	jsr $9fcc			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a12a	20 54 98	jsr $9854			jsr 	NSMIsZero 					; is it zero ?
.a12d	f0 06		beq $a135			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a12f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a132	20 1b a1	jsr $a11b			jsr 	_CI32DivideConvert 			; and recusrively call.
.a135					_CI32NoRecurse:
.a135	68		pla				pla 								; remainder
.a136	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a138	90 02		bcc $a13c			bcc 	_CI32NotHex
.a13a	69 26		adc #$26			adc 	#6+32
.a13c					_CI32NotHex:
.a13c	69 30		adc #$30			adc 	#48
.a13e	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a141	c8		iny				iny
.a142	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9098					PrecedenceLevel:
>9098	04					.byte	 4	; $00 <<
>9099	02					.byte	 2	; $01 <=
>909a	02					.byte	 2	; $02 <>
>909b	00					.byte	 0	; $03 !!3
>909c	00					.byte	 0	; $04 ><
>909d	02					.byte	 2	; $05 >=
>909e	04					.byte	 4	; $06 >>
>909f	00					.byte	 0	; $07 !!7
>90a0	00					.byte	 0	; $08 !!8
>90a1	00					.byte	 0	; $09 !!9
>90a2	00					.byte	 0	; $0a !!10
>90a3	00					.byte	 0	; $0b !!11
>90a4	00					.byte	 0	; $0c !!12
>90a5	00					.byte	 0	; $0d !!13
>90a6	00					.byte	 0	; $0e !!14
>90a7	00					.byte	 0	; $0f !!15
>90a8	00					.byte	 0	; $10 @
>90a9	00					.byte	 0	; $11 !!17
>90aa	00					.byte	 0	; $12 !!18
>90ab	00					.byte	 0	; $13 [
>90ac	04					.byte	 4	; $14 \
>90ad	00					.byte	 0	; $15 ]
>90ae	01					.byte	 1	; $16 ^
>90af	00					.byte	 0	; $17 _
>90b0	00					.byte	 0	; $18 `
>90b1	00					.byte	 0	; $19 !!25
>90b2	00					.byte	 0	; $1a !!26
>90b3	00					.byte	 0	; $1b {
>90b4	01					.byte	 1	; $1c |
>90b5	00					.byte	 0	; $1d }
>90b6	00					.byte	 0	; $1e ~
>90b7	00					.byte	 0	; $1f [7m<7F>[m
>90b8	00					.byte	 0	; $20
>90b9	05					.byte	 5	; $21 !
>90ba	00					.byte	 0	; $22 "
>90bb	00					.byte	 0	; $23 #
>90bc	05					.byte	 5	; $24 $
>90bd	04					.byte	 4	; $25 %
>90be	01					.byte	 1	; $26 &
>90bf	00					.byte	 0	; $27 '
>90c0	00					.byte	 0	; $28 (
>90c1	00					.byte	 0	; $29 )
>90c2	04					.byte	 4	; $2a *
>90c3	03					.byte	 3	; $2b +
>90c4	00					.byte	 0	; $2c ,
>90c5	03					.byte	 3	; $2d -
>90c6	00					.byte	 0	; $2e .
>90c7	04					.byte	 4	; $2f /
>90c8	00					.byte	 0	; $30 0
>90c9	00					.byte	 0	; $31 1
>90ca	00					.byte	 0	; $32 2
>90cb	00					.byte	 0	; $33 3
>90cc	00					.byte	 0	; $34 4
>90cd	00					.byte	 0	; $35 5
>90ce	00					.byte	 0	; $36 6
>90cf	00					.byte	 0	; $37 7
>90d0	00					.byte	 0	; $38 8
>90d1	00					.byte	 0	; $39 9
>90d2	00					.byte	 0	; $3a :
>90d3	00					.byte	 0	; $3b ;
>90d4	02					.byte	 2	; $3c <
>90d5	02					.byte	 2	; $3d =
>90d6	02					.byte	 2	; $3e >
>90d7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.90d8					EvaluateExpressionAt0:
.90d8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.90da					EvaluateExpression:
.90da	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.90dc					EvaluateExpressionAtPrecedence:
.90dc	48		pha				pha 								; save precedence level
.90dd	20 ab 93	jsr $93ab			jsr 	EvaluateTerm 				; evaluate term into level X.
.90e0	68		pla				pla 								; restore precedence level.
.90e1					_EXPRLoop:
.90e1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.90e3	b1 30		lda ($30),y			lda 	(codePtr),y
.90e5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.90e7	b0 25		bcs $910e			bcs 	_EXPRExit
.90e9	da		phx				phx 								; read the operator precedence
.90ea	aa		tax				tax
.90eb	bd 98 90	lda $9098,x			lda 	PrecedenceLevel,x
.90ee	fa		plx				plx
.90ef	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.90f1	f0 1b		beq $910e			beq 	_EXPRExit
.90f3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.90f5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.90f7	c5 37		cmp $37				cmp 	zTemp0+1
.90f9	b0 13		bcs $910e			bcs		_EXPRExit 					; if current >= operator exit
.90fb	48		pha				pha 								; save current precedence.
.90fc	b1 30		lda ($30),y			lda 	(codePtr),y
.90fe	c8		iny				iny
.90ff	48		pha				pha
.9100	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9102	e8		inx				inx 								; work out the right hand side.
.9103	20 dc 90	jsr $90dc			jsr 	EvaluateExpressionAtPrecedence
.9106	ca		dex				dex
.9107	68		pla				pla 								; get operator, call the code.
.9108	20 11 91	jsr $9111			jsr 	_EXPRCaller
.910b	68		pla				pla 								; restore precedence level
.910c	80 d3		bra $90e1			bra 	_EXPRLoop 					; and go round.
.910e					_EXPRExit:
.910e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9110	60		rts				rts
.9111					_EXPRCaller:
.9111	da		phx				phx 								; save on stack, first thing is to restore it
.9112	0a		asl a				asl 	a 							; double so can use vectors into X
.9113	aa		tax				tax
.9114	7c 7e 80	jmp ($807e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a143					FloatingPointAdd:
.a143	20 e4 a2	jsr $a2e4			jsr 	FloatPrepare 				; prepare for floats
.a146	80 0b		bra $a153			bra 	FloatAdd
.a148					FloatingPointSub:
.a148	20 e4 a2	jsr $a2e4			jsr 	FloatPrepare 				; prepare for floats
.a14b					FloatSubtract:
.a14b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a14e	49 80		eor #$80			eor 	#$80
.a150	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a153					FloatAdd:
.a153	48		pha				pha
.a154	5a		phy				phy
.a155	20 f5 a2	jsr $a2f5			jsr 	NSNormalise 				; normalise S[X]
.a158	f0 54		beq $a1ae			beq 	_FAReturn1
.a15a	e8		inx				inx 								; normalise S[X+1]
.a15b	20 f5 a2	jsr $a2f5			jsr 	NSNormalise
.a15e	ca		dex				dex
.a15f	c9 00		cmp #$00			cmp 	#0
.a161	f0 6f		beq $a1d2			beq 	_FAExit 					; if so, just return A
.a163	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a166	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a169	f0 1b		beq $a186			beq 	_FAExponentsEqual
.a16b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a16e	a8		tay				tay
.a16f	38		sec				sec 								; do a signed comparison of the exponents.
.a170	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a173	50 02		bvc $a177			bvc 	_FANoSignedChange
.a175	49 80		eor #$80			eor 	#$80
.a177					_FANoSignedChange:
.a177	29 80		and #$80			and 	#$80
.a179	10 03		bpl $a17e			bpl 	_FAHaveMax
.a17b	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a17e					_FAHaveMax:
.a17e	20 d5 a1	jsr $a1d5			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a181	e8		inx				inx
.a182	20 d5 a1	jsr $a1d5			jsr 	_FAShiftToExponent
.a185	ca		dex				dex
.a186					_FAExponentsEqual:
.a186	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a189	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a18c	30 10		bmi $a19e			bmi 	_FADifferentSigns
.a18e	20 c6 8e	jsr $8ec6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a191	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a194	10 3c		bpl $a1d2			bpl 	_FAExit 					; if no, we are done.
.a196	20 47 98	jsr $9847			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a199	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a19c	80 34		bra $a1d2			bra 	_FAExit
.a19e					_FADifferentSigns:
.a19e	20 ec 8e	jsr $8eec			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a1a1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a1a4	10 2c		bpl $a1d2			bpl 	_FAExit 					; if no, we are done.
.a1a6	20 d0 97	jsr $97d0			jsr 	NSMNegate 					; netate result
.a1a9	20 d9 97	jsr $97d9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a1ac	80 24		bra $a1d2			bra 	_FAExit
.a1ae					_FAReturn1:
.a1ae	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a1b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a1b4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a1b7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1ba	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a1bd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1c0	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a1c3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1c6	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a1c9	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1cc	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a1cf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1d2					_FAExit:
.a1d2	7a		ply				ply
.a1d3	68		pla				pla
.a1d4	60		rts				rts
.a1d5					_FAShiftToExponent:
.a1d5					_FAShiftToExponent2:
.a1d5	98		tya				tya 								; compare Y to exponent
.a1d6	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a1d9	f0 08		beq $a1e3			beq 	_FASEExit 					; exit if so.
.a1db	20 47 98	jsr $9847			jsr 	NSMShiftRight	 			; shift the mantissa right
.a1de	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a1e1	80 f2		bra $a1d5			bra 	_FAShiftToExponent2
.a1e3					_FASEExit:
.a1e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a1e4					CompareFloat:
.a1e4	20 4b a1	jsr $a14b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a1e7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a1ea	29 f8		and #$f8			and 	#$F8
.a1ec	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a1ef	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a1f2	f0 09		beq $a1fd			beq 	_FCExit 					; zero, so approximately identical
.a1f4	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a1f6	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a1f9	10 02		bpl $a1fd			bpl 	_FCExit
.a1fb					_FCNegative:
.a1fb	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a1fd					_FCExit:
.a1fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a1fe					FDivideCommand:
.a1fe	fa		plx				plx	 								; restore stack position
.a1ff	20 e4 a2	jsr $a2e4			jsr 	FloatPrepare 				; prepare for floats
.a202					FloatDivide:
.a202	48		pha				pha
.a203	e8		inx				inx
.a204	20 f5 a2	jsr $a2f5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a207	ca		dex				dex
.a208	c9 00		cmp #$00			cmp 	#0
.a20a	f0 20		beq $a22c			beq 	_FDZero
.a20c	20 f5 a2	jsr $a2f5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a20f	f0 19		beq $a22a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a211	20 3f a0	jsr $a03f			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a214	20 cc 9f	jsr $9fcc			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a217	20 f5 a2	jsr $a2f5			jsr		NSNormalise 				; renormalise
.a21a	20 da a0	jsr $a0da			jsr 	CalculateSign 				; calculate result sign
.a21d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a220	38		sec				sec
.a221	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a224	38		sec				sec
.a225	e9 1e		sbc #$1e			sbc 	#30
.a227	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a22a					_FDExit:
.a22a	68		pla				pla
.a22b	60		rts				rts
.a22c					_FDZero:
.a22c	a9 03		lda #$03		lda	#3
.a22e	4c d1 8c	jmp $8cd1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a231					FloatFractionalPart:
.a231	5a		phy				phy
.a232	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a235	29 7f		and #$7f			and 	#$7F
.a237	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a23a	20 f5 a2	jsr $a2f5			jsr 	NSNormalise
.a23d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a240	38		sec				sec
.a241	e9 e0		sbc #$e0			sbc 	#$E0
.a243	90 31		bcc $a276			bcc 	_FFPExit 					; already fractional
.a245	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a247	b0 2a		bcs $a273			bcs 	_FFPZero
.a249	a8		tay				tay 								; put count to do in Y
.a24a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a24d	20 78 a2	jsr $a278			jsr 	_FFPPartial
.a250	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a253	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a256	20 78 a2	jsr $a278			jsr 	_FFPPartial
.a259	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a25c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a25f	20 78 a2	jsr $a278			jsr 	_FFPPartial
.a262	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a265	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a268	20 78 a2	jsr $a278			jsr 	_FFPPartial
.a26b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a26e	20 54 98	jsr $9854			jsr 	NSMIsZero 					; zeroed check.
.a271	d0 03		bne $a276			bne 	_FFPExit
.a273					_FFPZero:
.a273	20 24 98	jsr $9824			jsr 	NSMSetZero
.a276					_FFPExit:
.a276	7a		ply				ply
.a277	60		rts				rts
.a278					_FFPPartial:
.a278	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a27a	f0 17		beq $a293			beq 	_FFFPPExit
.a27c	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a27e	b0 0c		bcs $a28c			bcs 	_FFFPPWholeByte
.a280	5a		phy				phy
.a281					_FFFPPLeft:
.a281	0a		asl a				asl 	a
.a282	88		dey				dey
.a283	d0 fc		bne $a281			bne 	_FFFPPLeft
.a285	7a		ply				ply
.a286					_FFFPPRight:
.a286	4a		lsr a				lsr 	a
.a287	88		dey				dey
.a288	d0 fc		bne $a286			bne 	_FFFPPRight
.a28a	80 07		bra $a293			bra 	_FFFPPExit
.a28c					_FFFPPWholeByte:
.a28c	98		tya				tya 								; subtract 8 from count
.a28d	38		sec				sec
.a28e	e9 08		sbc #$08			sbc 	#8
.a290	a8		tay				tay
.a291	a9 00		lda #$00			lda 	#0 							; and clear all
.a293					_FFFPPExit:
.a293	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a294					FloatIntegerPart:
.a294	48		pha				pha
.a295	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a298	f0 1f		beq $a2b9			beq 	_FIPExit 					; if so do nothing
.a29a	20 54 98	jsr $9854			jsr 	NSMIsZero 					; is it zero ?
.a29d	f0 17		beq $a2b6			beq 	_FIPZero 					; if so return zero.
.a29f	20 f5 a2	jsr $a2f5			jsr 	NSNormalise 				; normalise
.a2a2	f0 12		beq $a2b6			beq 	_FIPZero 					; normalised to zero, exit zero
.a2a4					_FIPShift:
.a2a4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a2a7	10 08		bpl $a2b1			bpl 	_FIPCheckZero
.a2a9	20 47 98	jsr $9847			jsr 	NSMShiftRight 				; shift mantissa right
.a2ac	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a2af	80 f3		bra $a2a4			bra 	_FIPShift
.a2b1					_FIPCheckZero:
.a2b1	20 54 98	jsr $9854			jsr 	NSMIsZero 					; avoid -0 problem
.a2b4	d0 03		bne $a2b9			bne 	_FIPExit 					; set to zero if mantissa zero.
.a2b6					_FIPZero:
.a2b6	20 24 98	jsr $9824			jsr 	NSMSetZero
.a2b9					_FIPExit:
.a2b9	68		pla				pla
.a2ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a2bb					FloatingPointMultiply:
.a2bb	20 e4 a2	jsr $a2e4			jsr 	FloatPrepare 				; prepare for floats
.a2be					FloatMultiply:
.a2be	48		pha				pha
.a2bf	20 f5 a2	jsr $a2f5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a2c2	f0 1b		beq $a2df			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a2c4	e8		inx				inx
.a2c5	20 f5 a2	jsr $a2f5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a2c8	ca		dex				dex
.a2c9	c9 00		cmp #$00			cmp 	#0
.a2cb	f0 0f		beq $a2dc			beq 	_FDSetZero
.a2cd	20 95 a0	jsr $a095			jsr 	MultiplyShort 				; calculate the result.
.a2d0	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a2d3	18		clc				clc
.a2d4	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a2d7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2da	80 03		bra $a2df			bra 	_FDExit
.a2dc					_FDSetZero:
.a2dc	20 24 98	jsr $9824			jsr 	NSMSetZero 					; return 0
.a2df					_FDExit:
.a2df	20 f5 a2	jsr $a2f5			jsr 	NSNormalise 				; normalise the result
.a2e2	68		pla				pla
.a2e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a2e4					FloatPrepare:
.a2e4	20 ea 91	jsr $91ea			jsr 	DereferenceTopTwo 			; dereference the top two values
.a2e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a2ea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a2ed	29 10		and #$10			and 	#NSBIsString
.a2ef	d0 01		bne $a2f2			bne 	_FDType
.a2f1	60		rts				rts
.a2f2					_FDType:
.a2f2	4c 78 a5	jmp $a578			jmp 	TypeError
.a2f5					NSNormalise:
.a2f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a2f8	29 80		and #$80			and 	#$80
.a2fa	09 08		ora #$08			ora 	#NSTFloat
.a2fc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2ff	20 54 98	jsr $9854			jsr 	NSMIsZero 					; if zero exit
.a302	d0 09		bne $a30d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a304	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a307	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a30a	a9 00		lda #$00			lda 	#0 							; set Z flag
.a30c	60		rts				rts
.a30d					_NSNormaliseOptimise:
.a30d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a310	d0 22		bne $a334			bne 	_NSNormaliseLoop
.a312	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a315	30 1d		bmi $a334			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a317	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a31a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a31d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a320	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a323	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a326	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a329	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a32c	38		sec				sec
.a32d	e9 08		sbc #$08			sbc 	#8
.a32f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a332	80 d9		bra $a30d			bra 	_NSNormaliseOptimise
.a334					_NSNormaliseLoop:
.a334	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a337	70 08		bvs $a341			bvs 	_NSNExit 					; exit if so with Z flag clear
.a339	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; shift mantissa left
.a33c	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a33f	80 f3		bra $a334			bra 	_NSNormaliseLoop
.a341					_NSNExit:
.a341	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a343	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9117					AssignNumber:
.9117	5a		phy				phy
.9118	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.911b	85 36		sta $36				sta 	zTemp0
.911d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9120	85 37		sta $37				sta 	zTemp0+1
.9122	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9125	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9127	9d 00 06	sta $0600,x			sta 	NSStatus,x
.912a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.912c	c9 08		cmp #$08			cmp 	#NSTFloat
.912e	f0 2a		beq $915a			beq 	_ANFloat
.9130	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9133	f0 05		beq $913a			beq		_ANNotFloat
.9135	e8		inx				inx
.9136	20 94 a2	jsr $a294			jsr 	FloatIntegerPart 			; make it an integer
.9139	ca		dex				dex
.913a					_ANNotFloat:
.913a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.913d	29 03		and #$03			and 	#3
.913f	d0 05		bne $9146			bne 	_ANByteWord
.9141	20 66 91	jsr $9166			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9144	80 1e		bra $9164			bra 	_ANExit
.9146					_ANByteWord:
.9146	48		pha				pha 								; save count
.9147	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.914a	92 36		sta ($36)			sta 	(zTemp0)
.914c	68		pla				pla
.914d	c9 01		cmp #$01			cmp	 	#1
.914f	f0 13		beq $9164			beq 	_ANExit
.9151	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9154	a0 01		ldy #$01			ldy 	#1
.9156	91 36		sta ($36),y			sta 	(zTemp0),y
.9158	80 0a		bra $9164			bra 	_ANExit
.915a					_ANFloat:
.915a	20 66 91	jsr $9166			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.915d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9160	a0 04		ldy #$04			ldy 	#4
.9162	91 36		sta ($36),y			sta 	(zTemp0),y
.9164					_ANExit:
.9164	7a		ply				ply
.9165	60		rts				rts
.9166					_ANCopy4PackSign:
.9166	a0 03		ldy #$03			ldy 	#3
.9168	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.916b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.916d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.9170	91 36		sta ($36),y			sta 	(zTemp0),y
.9172	88		dey				dey
.9173	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9176	91 36		sta ($36),y			sta 	(zTemp0),y
.9178	88		dey				dey
.9179	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.917c	91 36		sta ($36),y			sta 	(zTemp0),y
.917e	88		dey				dey
.917f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9182	91 36		sta ($36),y			sta 	(zTemp0),y
.9184	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9185					AssignString:
.9185	5a		phy				phy
.9186	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9189	85 38		sta $38				sta 	zTemp1
.918b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.918e	85 39		sta $39				sta 	zTemp1+1
.9190	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9193	85 36		sta $36				sta 	zTemp0
.9195	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9198	85 37		sta $37				sta 	zTemp0+1
.919a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.919c	b1 36		lda ($36),y			lda 	(zTemp0),y
.919e	f0 23		beq $91c3			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.91a0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.91a1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.91a3	e9 02		sbc #$02			sbc 	#2
.91a5	85 3c		sta $3c				sta 	zsTemp
.91a7	a0 01		ldy #$01			ldy 	#1
.91a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.91ab	e9 00		sbc #$00			sbc 	#0
.91ad	85 3d		sta $3d				sta 	zsTemp+1
.91af	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.91b1					_ASGetLength:
.91b1	c8		iny				iny
.91b2	b1 38		lda ($38),y			lda 	(zTemp1),y
.91b4	d0 fb		bne $91b1			bne 	_ASGetLength
.91b6	98		tya				tya 								; is this length <= current length
.91b7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.91b9	90 20		bcc $91db			bcc 	_ASCopyString
.91bb	f0 1e		beq $91db			beq 	_ASCopyString
.91bd	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.91bf	a0 01		ldy #$01			ldy 	#1
.91c1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91c3					_ASNewStringRequired:
.91c3	e8		inx				inx 								; concrete the new string.
.91c4	20 14 a7	jsr $a714			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.91c7	ca		dex				dex
.91c8	18		clc				clc
.91c9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.91cc	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.91ce	92 36		sta ($36)			sta 	(zTemp0)
.91d0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91d3	69 00		adc #$00			adc 	#0
.91d5	a0 01		ldy #$01			ldy 	#1
.91d7	91 36		sta ($36),y			sta 	(zTemp0),y
.91d9	80 0d		bra $91e8			bra 	_ASExit
.91db					_ASCopyString:
.91db	a0 00		ldy #$00			ldy 	#0
.91dd					_ASCopyLoop:
.91dd	b1 38		lda ($38),y			lda 	(zTemp1),y
.91df	c8		iny				iny
.91e0	c8		iny				iny
.91e1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91e3	88		dey				dey
.91e4	c9 00		cmp #$00			cmp 	#0
.91e6	d0 f5		bne $91dd			bne 	_ASCopyLoop
.91e8					_ASExit:
.91e8	7a		ply				ply
.91e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.91ea					DereferenceTopTwo:
.91ea	e8		inx				inx
.91eb	20 ef 91	jsr $91ef			jsr 	Dereference 				; deref x+1
.91ee	ca		dex				dex  								; falls through to deref x
.91ef					Dereference:
.91ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.91f2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.91f4	f0 57		beq $924d			beq 	_DRFExit 					; not a reference
.91f6	5a		phy				phy
.91f7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.91fa	85 36		sta $36				sta 	zTemp0
.91fc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91ff	85 37		sta $37				sta 	zTemp0+1
.9201	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9204	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9206	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9209	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.920c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.920e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9210	f0 0f		beq $9221			beq 	_DRFDereferenceTwo
.9212	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9214	f0 39		beq $924f			beq 	_DRFFull
.9216	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9219	29 03		and #$03			and 	#3
.921b	f0 32		beq $924f			beq 	_DRFFull 					; the whole word
.921d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.921f	f0 07		beq $9228			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9221					_DRFDereferenceTwo:
.9221	a0 01		ldy #$01			ldy 	#1
.9223	b1 36		lda ($36),y			lda 	(zTemp0),y
.9225	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9228					_DRFClear23:
.9228	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.922b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.922e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9231	29 18		and #$18			and 	#NSBTypeMask
.9233	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9236	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9238	d0 12		bne $924c			bne 	_DRFNotString
.923a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.923d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9240	d0 0a		bne $924c			bne 	_DRFNotString
.9242	a9 4e		lda #$4e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9244	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9247	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9249	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.924c					_DRFNotString
.924c	7a		ply				ply 								; restore Y and exit
.924d					_DRFExit:
.924d	60		rts				rts
.924e					_DRFNullString:
>924e	00						.byte 	0
.924f					_DRFFull:
.924f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9251	b1 36		lda ($36),y			lda 	(zTemp0),y
.9253	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9256	c8		iny				iny
.9257	b1 36		lda ($36),y			lda 	(zTemp0),y
.9259	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.925c	c8		iny				iny
.925d	b1 36		lda ($36),y			lda 	(zTemp0),y
.925f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9262	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9265	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9268	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.926a	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.926d	f0 06		beq $9275			beq 	_DRFNoExponent
.926f	c8		iny				iny 								; if not, read the exponent as well.
.9270	b1 36		lda ($36),y			lda 	(zTemp0),y
.9272	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9275					_DRFNoExponent:
.9275	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9278	10 0d		bpl $9287			bpl 	_DRFExit2 					; if not, then exit.
.927a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.927c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.927f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9282	09 80		ora #$80			ora 	#NSBIsNegative
.9284	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9287					_DRFExit2:
.9287	7a		ply				ply
.9288	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9289					EncodeNumberStart:
.9289	38		sec				sec
.928a	80 01		bra $928d			bra 	EncodeNumberContinue+1
.928c					EncodeNumberContinue:
.928c	18		clc				clc
.928d					EncodeNumber:
.928d	08		php				php 								; save reset.
.928e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9290	f0 12		beq $92a4			beq 	_ENIsOkay
.9292	c9 30		cmp #$30			cmp 	#"0"
.9294	90 04		bcc $929a			bcc 	_ENBadNumber
.9296	c9 3a		cmp #$3a			cmp 	#"9"+1
.9298	90 0a		bcc $92a4			bcc 	_ENIsOkay
.929a					_ENBadNumber:
.929a	28		plp				plp 								; throw saved reset
.929b	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.929e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92a0	f0 7e		beq $9320			beq 	_ENConstructFinal
.92a2					_ENFail:
.92a2	18		clc				clc 								; not allowed
.92a3	60		rts				rts
.92a4					_ENIsOkay:
.92a4	28		plp				plp 								; are we restarting
.92a5	90 15		bcc $92bc			bcc 	_ENNoRestart
.92a7					_ENStartEncode:
.92a7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.92a9	f0 0c		beq $92b7			beq 	_ENFirstDP
.92ab	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.92ad	20 26 98	jsr $9826			jsr 	NSMSetByte
.92b0	a9 01		lda #$01			lda 	#ESTA_Low
.92b2					_ENExitChange:
.92b2	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.92b5	38		sec				sec
.92b6	60		rts				rts
.92b7					_ENFirstDP:
.92b7	20 24 98	jsr $9824			jsr 	NSMSetZero 					; clear integer part
.92ba	80 3f		bra $92fb			bra 	_ESTASwitchFloat			; go straight to float and exi
.92bc					_ENNoRestart:
.92bc	48		pha				pha 								; save on stack.
.92bd	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.92c0	c9 01		cmp #$01			cmp 	#ESTA_Low
.92c2	f0 09		beq $92cd			beq  	_ESTALowState
.92c4	c9 02		cmp #$02			cmp 	#ESTA_High
.92c6	f0 29		beq $92f1			beq 	_ESTAHighState
.92c8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92ca	f0 3b		beq $9307			beq 	_ESTADecimalState
>92cc	db						.byte 	$DB 						; causes a break in the emulator
.92cd					_ESTALowState:
.92cd	68		pla				pla 								; get value back
.92ce	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.92d0	f0 29		beq $92fb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.92d2	29 0f		and #$0f			and 	#15 						; make digit
.92d4	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.92d7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.92da	0a		asl a				asl 	a
.92db	0a		asl a				asl 	a
.92dc	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92df	0a		asl a				asl 	a
.92e0	6d 06 07	adc $0706			adc 	DigitTemp
.92e3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92e6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.92e8	90 05		bcc $92ef			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.92ea	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.92ec	8d 05 07	sta $0705			sta 	EncodeState
.92ef					_ESTANoSwitch:
.92ef	38		sec				sec
.92f0	60		rts				rts
.92f1					_ESTAHighState:
.92f1	68		pla				pla 								; get value back
.92f2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.92f4	f0 05		beq $92fb			beq 	_ESTASwitchFloat
.92f6	20 5a 93	jsr $935a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.92f9	38		sec				sec
.92fa	60		rts				rts
.92fb					_ESTASwitchFloat:
.92fb	9c 07 07	stz $0707			stz 	DecimalCount
.92fe	e8		inx				inx 								; zero the decimal additive.
.92ff	20 24 98	jsr $9824			jsr 	NSMSetZero
.9302	ca		dex				dex
.9303	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9305	80 ab		bra $92b2			bra 	_ENExitChange
.9307					_ESTADecimalState:
.9307	68		pla				pla 								; digit.
.9308	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.930a	f0 96		beq $92a2			beq 	_ENFail
.930c	e8		inx				inx 								; put digit into fractional part of X+1
.930d	20 5a 93	jsr $935a			jsr 	ESTAShiftDigitIntoMantissa
.9310	ca		dex				dex
.9311	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9314	ad 07 07	lda $0707			lda 	DecimalCount
.9317	c9 0b		cmp #$0b			cmp 	#11
.9319	f0 02		beq $931d			beq 	_ESTADSFail
.931b	38		sec				sec
.931c	60		rts				rts
.931d					_ESTADSFail:
.931d	4c 73 a5	jmp $a573			jmp 	RangeError
.9320					_ENConstructFinal:
.9320	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9323	f0 33		beq $9358			beq 	_ENCFExit 					; no decimals
.9325	5a		phy				phy
.9326	0a		asl a				asl 	a 							; x 4 and CLC
.9327	0a		asl a				asl 	a
.9328	6d 07 07	adc $0707			adc 	DecimalCount
.932b	a8		tay				tay
.932c	b9 32 a5	lda $a532,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.932f	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9332	b9 33 a5	lda $a533,y			lda 	DecimalScalarTable-5+1,y
.9335	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9338	b9 34 a5	lda $a534,y			lda 	DecimalScalarTable-5+2,y
.933b	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.933e	b9 35 a5	lda $a535,y			lda 	DecimalScalarTable-5+3,y
.9341	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9344	b9 36 a5	lda $a536,y			lda 	DecimalScalarTable-5+4,y
.9347	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.934a	a9 08		lda #$08			lda 	#NSTFloat
.934c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.934f	7a		ply				ply
.9350	e8		inx				inx 								; multiply decimal const by decimal scalar
.9351	20 be a2	jsr $a2be			jsr 	FloatMultiply
.9354	ca		dex				dex
.9355	20 53 a1	jsr $a153			jsr 	FloatAdd 					; add to integer part.
.9358					_ENCFExit:
.9358	18		clc				clc 								; reject the digit.
.9359	60		rts				rts
.935a					ESTAShiftDigitIntoMantissa:
.935a	29 0f		and #$0f			and 	#15 						; save digit
.935c	48		pha				pha
.935d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9360	48		pha				pha
.9361	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9364	48		pha				pha
.9365	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9368	48		pha				pha
.9369	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.936c	48		pha				pha
.936d	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 2
.9370	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 4
.9373	18		clc				clc 								; pop mantissa and add
.9374	68		pla				pla
.9375	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9378	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.937b	68		pla				pla
.937c	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.937f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9382	68		pla				pla
.9383	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9386	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9389	68		pla				pla
.938a	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.938d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9390	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 10
.9393	68		pla				pla 								; add digit
.9394	18		clc				clc
.9395	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9398	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.939b	90 0d		bcc $93aa			bcc 	_ESTASDExit
.939d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.93a0	d0 08		bne $93aa			bne 	_ESTASDExit
.93a2	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.93a5	d0 03		bne $93aa			bne 	_ESTASDExit
.93a7	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.93aa					_ESTASDExit:
.93aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.93ab					EvaluateTerm:
.93ab	b1 30		lda ($30),y			lda 	(codePtr),y
.93ad	30 18		bmi $93c7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.93af	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.93b1	b0 6f		bcs $9422			bcs 	_ETVariable
.93b3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.93b5	90 6e		bcc $9425			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.93b7	c9 3a		cmp #$3a			cmp 	#'9'+1
.93b9	b0 6a		bcs $9425			bcs 	_ETPuncUnary
.93bb	20 89 92	jsr $9289			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.93be					_ETNumber:
.93be	c8		iny				iny 								; keep encoding until we have the numbers
.93bf	b1 30		lda ($30),y			lda 	(codePtr),y
.93c1	20 8c 92	jsr $928c			jsr 	EncodeNumberContinue
.93c4	b0 f8		bcs $93be			bcs 	_ETNumber 					; go back if accepted.
.93c6	60		rts				rts
.93c7					_ETCheckUnary:
.93c7	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.93c9	f0 41		beq $940c			beq 	_ETString
.93cb	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.93cd	f0 12		beq $93e1			beq 	_ETHexConstant
.93cf	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.93d1	90 0b		bcc $93de			bcc 	_ETSyntaxError
.93d3	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.93d5	b0 07		bcs $93de			bcs 	_ETSyntaxError
.93d7	da		phx				phx 								; push X on the stack
.93d8	0a		asl a				asl 	a 							; put vector x 2 into X
.93d9	aa		tax				tax
.93da	c8		iny				iny 								; consume unary function token
.93db	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x) 				; and do it.
.93de					_ETSyntaxError:
.93de	4c 6e a5	jmp $a56e			jmp 	SyntaxError
.93e1					_ETHexConstant:
.93e1	c8		iny				iny 								; skip #
.93e2	c8		iny				iny 								; skip count
.93e3	20 24 98	jsr $9824			jsr 	NSMSetZero 					; clear result
.93e6					_ETHLoop:
.93e6	b1 30		lda ($30),y			lda 	(codePtr),y
.93e8	c8		iny				iny 								; and consume
.93e9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.93eb	f0 1e		beq $940b			beq 	_ETHExit
.93ed	48		pha				pha 								; save on stack.
.93ee	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 2
.93f1	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 4
.93f4	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 8
.93f7	20 39 98	jsr $9839			jsr 	NSMShiftLeft 				; x 16
.93fa	68		pla				pla 								; ASCII
.93fb	c9 41		cmp #$41			cmp 	#'A'
.93fd	90 02		bcc $9401			bcc 	_ETHNotChar
.93ff	e9 07		sbc #$07			sbc 	#7
.9401					_ETHNotChar:
.9401	29 0f		and #$0f			and 	#15 						; digit now
.9403	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9406	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9409	80 db		bra $93e6			bra 	_ETHLoop 					; go round.
.940b					_ETHExit:
.940b	60		rts				rts
.940c					_ETString:
.940c	c8		iny				iny 								; look at length
.940d	b1 30		lda ($30),y			lda 	(codePtr),y
.940f	48		pha				pha
.9410	c8		iny				iny 								; first character
.9411	20 bb 9e	jsr $9ebb			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9414	68		pla				pla 								; restore count and save
.9415	85 36		sta $36				sta 	zTemp0
.9417	98		tya				tya 								; add length to Y to skip it.
.9418	18		clc				clc
.9419	65 36		adc $36				adc 	zTemp0
.941b	a8		tay				tay
.941c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.941e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9421	60		rts				rts
.9422					_ETVariable:
.9422	4c 7c 94	jmp $947c			jmp 	VariableHandler
.9425					_ETPuncUnary:
.9425	c8		iny				iny 								; consume the unary character
.9426	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9428	f0 2d		beq $9457			beq 	_ETUnaryNegate
.942a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.942c	f0 39		beq $9467			beq 	_ETDereference
.942e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9430	f0 43		beq $9475			beq 	_ETParenthesis
.9432	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9434	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9436	f0 06		beq $943e			beq 	_ETIndirection
.9438	e6 36		inc $36				inc 	zTemp0
.943a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.943c	d0 a0		bne $93de			bne 	_ETSyntaxError
.943e					_ETIndirection:
.943e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9440	1a		inc a				inc 	a
.9441	48		pha				pha
.9442	20 ab 93	jsr $93ab			jsr 	EvaluateTerm				; evaluate the term
.9445	20 ef 91	jsr $91ef			jsr 	Dereference 				; dereference it.
.9448	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.944b	d0 07		bne $9454			bne 	_ETTypeMismatch
.944d	68		pla				pla 								; indirection 1-2
.944e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9450	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9453	60		rts				rts
.9454					_ETTypeMismatch:
.9454	4c 78 a5	jmp $a578			jmp 	TypeError
.9457					_ETUnaryNegate:
.9457	20 ab 93	jsr $93ab			jsr 	EvaluateTerm				; evaluate the term
.945a	20 ef 91	jsr $91ef			jsr 	Dereference 				; dereference it.
.945d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9460	29 10		and #$10			and 	#NSTString
.9462	d0 f0		bne $9454			bne 	_ETTypeMismatch
.9464	4c d0 97	jmp $97d0			jmp 	NSMNegate  					; just toggles the sign bit.
.9467					_ETDereference:
.9467	20 ab 93	jsr $93ab			jsr 	EvaluateTerm				; evaluate the term
.946a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.946d	29 20		and #$20			and 	#NSBIsReference
.946f	f0 e3		beq $9454			beq 	_ETTypeMismatch
.9471	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9474	60		rts				rts
.9475					_ETParenthesis:
.9475	20 da 90	jsr $90da			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9478	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; check for )
.947b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.947c					VariableHandler:
.947c	b1 30		lda ($30),y			lda 	(codePtr),y
.947e	18		clc				clc
.947f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9481	85 37		sta $37				sta 	zTemp0+1
.9483	c8		iny				iny
.9484	b1 30		lda ($30),y			lda 	(codePtr),y
.9486	85 36		sta $36				sta 	zTemp0
.9488	c8		iny				iny
.9489	18		clc				clc									; copy variable address+3 to mantissa
.948a	69 03		adc #$03			adc 	#3
.948c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.948f	a5 37		lda $37				lda 	zTemp0+1
.9491	69 00		adc #$00			adc 	#0
.9493	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9496	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9499	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.949c	9e 28 06	stz $0628,x			stz 	NSExponent,x
.949f	5a		phy				phy
.94a0	a0 02		ldy #$02			ldy 	#2 							; read type
.94a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.94a4	7a		ply				ply
.94a5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.94a7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.94a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94ac	29 04		and #$04			and 	#NSBIsArray
.94ae	d0 01		bne $94b1			bne 	_VHArray
.94b0	60		rts				rts
.94b1					_VHArray:
.94b1	e8		inx				inx
.94b2	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 		; get the 1st index.
.94b5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.94b7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94ba	b1 30		lda ($30),y			lda 	(codePtr),y
.94bc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94be	d0 06		bne $94c6			bne 	_VHNoSecondIndex
.94c0	c8		iny				iny 								; skip the comma
.94c1	e8		inx				inx
.94c2	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.94c5	ca		dex				dex
.94c6					_VHNoSecondIndex:
.94c6	ca		dex				dex 								; set X back.
.94c7	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; and check the right bracket.
.94ca	5a		phy				phy 								; save position
.94cb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.94ce	85 3e		sta $3e				sta 	zaTemp
.94d0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94d3	85 3f		sta $3f				sta 	zaTemp+1
.94d5	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.94d7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94d9	f0 02		beq $94dd			beq 	_VHHas2Mask
.94db	a9 ff		lda #$ff			lda 	#$FF
.94dd					_VHHas2Mask:
.94dd	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.94e0	f0 54		beq $9536			beq 	_VHBadIndex
.94e2	0a		asl a				asl 	a 							; carry will be set if a second index
.94e3	90 09		bcc $94ee			bcc 	_VHCheckFirstIndex
.94e5	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.94e7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94e9	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.94ec	90 48		bcc $9536			bcc 	_VHBadIndex
.94ee					_VHCheckFirstIndex:
.94ee	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.94f0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94f2	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.94f5	90 3f		bcc $9536			bcc 	_VHBadIndex
.94f7	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.94f9	64 37		stz $37				stz 	zTemp0+1
.94fb	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.94fe	30 0f		bmi $950f			bmi 	_VHNoMultiply
.9500	da		phx				phx
.9501	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9504	48		pha				pha
.9505	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9507	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9509	1a		inc a				inc 	a 							; add 1 for zero base
.950a	fa		plx				plx
.950b	20 0e a4	jsr $a40e			jsr 	Multiply8x8 				; calculate -> Z0
.950e	fa		plx				plx
.950f					_VHNoMultiply:
.950f	18		clc				clc
.9510	a5 36		lda $36				lda 	zTemp0
.9512	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9515	85 36		sta $36				sta 	zTemp0
.9517	a5 37		lda $37				lda 	zTemp0+1
.9519	69 00		adc #$00			adc 	#0
.951b	85 37		sta $37				sta 	zTemp0+1
.951d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9520	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.9523	18		clc				clc
.9524	b2 3e		lda ($3e)			lda 	(zaTemp)
.9526	65 36		adc $36				adc 	zTemp0
.9528	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.952b	a0 01		ldy #$01			ldy 	#1
.952d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.952f	65 37		adc $37				adc 	zTemp0+1
.9531	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9534	7a		ply				ply 								; restore position
.9535	60		rts				rts
.9536					_VHBadIndex:
.9536	a9 17		lda #$17		lda	#23
.9538	4c d1 8c	jmp $8cd1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a344					AbsUnary:
.a344	fa		plx				plx 								; restore stack pos
.a345	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; get a float or int
.a348	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a34b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a34e	29 7f		and #$7f			and 	#$7F
.a350	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a353	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.953b					AllocUnary:
.953b	fa		plx				plx 								; restore stack pos
.953c	20 b0 97	jsr $97b0			jsr 	Evaluate16BitInteger		; get bytes required.
.953f	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.9542	da		phx				phx 								; save X/Y
.9543	5a		phy				phy
.9544	8a		txa				txa 								; copy X into Y
.9545	a8		tay				tay
.9546	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9549	aa		tax				tax
.954a	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.954d	20 5a 95	jsr $955a			jsr 	AllocateXABytes 			; allocate memory
.9550	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9553	8a		txa				txa
.9554	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9557	7a		ply				ply
.9558	fa		plx				plx
.9559	60		rts				rts
.955a					AllocateXABytes:
.955a	5a		phy				phy
.955b	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.955e	84 36		sty $36				sty 	zTemp0
.9560	5a		phy				phy
.9561	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9564	84 37		sty $37				sty 	zTemp0+1
.9566	5a		phy				phy
.9567	18		clc				clc 								; add to low memory pointer
.9568	6d 0c 07	adc $070c			adc 	lowMemPtr
.956b	8d 0c 07	sta $070c			sta 	lowMemPtr
.956e	8a		txa				txa
.956f	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9572	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9575					_ClearMemory:
.9575	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9578	c5 36		cmp $36				cmp 	zTemp0
.957a	d0 07		bne $9583			bne 	_CMClearNext
.957c	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.957f	c5 37		cmp $37				cmp 	zTemp0+1
.9581	f0 0c		beq $958f			beq 	_CMExit
.9583					_CMClearNext:
.9583	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9585	92 36		sta ($36)			sta 	(zTemp0)
.9587	e6 36		inc $36				inc 	zTemp0
.9589	d0 ea		bne $9575			bne 	_ClearMemory
.958b	e6 37		inc $37				inc		zTemp0+1
.958d	80 e6		bra $9575			bra 	_ClearMemory
.958f					_CMExit:
.958f	fa		plx				plx
.9590	68		pla				pla
.9591	7a		ply				ply
.9592	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a354					AscUnary:
.a354	fa		plx				plx 								; restore stack pos
.a355	20 83 97	jsr $9783			jsr 	EvaluateString 				; get a string
.a358	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a35a	20 26 98	jsr $9826			jsr 	NSMSetByte
.a35d	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a360	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a361					FracUnary:
.a361	fa		plx				plx 								; restore stack pos
.a362	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; get a float or int
.a365	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a368	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a36b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a36d	f0 04		beq $a373			beq 	_IUZero
.a36f	20 31 a2	jsr $a231			jsr 	FloatFractionalPart
.a372	60		rts				rts
.a373					_IUZero:
.a373	20 24 98	jsr $9824			jsr 	NSMSetZero
.a376	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a377					IntUnary:
.a377	fa		plx				plx 								; restore stack pos
.a378	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; get a float or int
.a37b	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a37e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a381	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a383	f0 03		beq $a388			beq 	_IUExit
.a385	20 94 a2	jsr $a294			jsr 	FloatIntegerPart
.a388					_IUExit:
.a388	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a389					LenUnary:
.a389	fa		plx				plx 								; restore stack pos
.a38a	20 83 97	jsr $9783			jsr 	EvaluateString 				; get a string
.a38d	5a		phy				phy
.a38e	a0 00		ldy #$00			ldy 	#0 							; find length
.a390					_LenFind:
.a390	b1 36		lda ($36),y			lda 	(zTemp0),y
.a392	f0 06		beq $a39a			beq 	_LenExit
.a394	c8		iny				iny
.a395	d0 f9		bne $a390			bne 	_LenFind
.a397	4c 73 a5	jmp $a573			jmp 	RangeError 					; string > 255
.a39a					_LenExit:
.a39a	98		tya				tya
.a39b	20 26 98	jsr $9826			jsr 	NSMSetByte
.a39e	7a		ply				ply
.a39f	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a3a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9593					Unary_Not:
.9593	fa		plx				plx
.9594	20 9b 97	jsr $979b			jsr 	EvaluateInteger 			; get integer
.9597	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.959a	20 54 98	jsr $9854			jsr 	NSMIsZero 					; zero mantissa ?
.959d	f0 04		beq $95a3			beq 	_NotZero
.959f	20 24 98	jsr $9824			jsr 	NSMSetZero
.95a2	60		rts				rts
.95a3					_NotZero:
.95a3	4c 3e 8d	jmp $8d3e			jmp 	ReturnTrue
.95a6					_UNBad:
.95a6	4c 7d a5	jmp $a57d			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.95a9					Unary_Rnd:
.95a9	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; number to use.
.95ac	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; closing bracket
.95af	20 d8 95	jsr $95d8			jsr 	Random32Bit 				; generate a number.
.95b2	ad 08 07	lda $0708			lda 	RandomSeed+0
.95b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95b8	ad 09 07	lda $0709			lda 	RandomSeed+1
.95bb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95be	ad 0a 07	lda $070a			lda 	RandomSeed+2
.95c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95c4	ad 0b 07	lda $070b			lda 	RandomSeed+3
.95c7	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.95c9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95cc	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.95ce	8d 28 06	sta $0628			sta 	NSExponent
.95d1	a9 08		lda #$08			lda 	#NSTFloat
.95d3	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>95d6	db						.byte 	$DB 						; causes a break in the emulator
.95d7	60		rts				rts
.95d8					Random32Bit:
.95d8	5a		phy				phy
.95d9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.95db	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.95de	d0 03		bne $95e3			bne 	_Random1
.95e0	a8		tay				tay 								; if so do it 256 times
.95e1	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.95e3					_Random1:
.95e3	0a		asl a				asl 	a 							; LSFR RNG
.95e4	2e 09 07	rol $0709			rol 	RandomSeed+1
.95e7	2e 0a 07	rol $070a			rol 	RandomSeed+2
.95ea	2e 0b 07	rol $070b			rol 	RandomSeed+3
.95ed	90 02		bcc $95f1			bcc 	_Random2
.95ef	49 c5		eor #$c5			eor 	#$C5
.95f1					_Random2:
.95f1	88		dey				dey
.95f2	d0 ef		bne $95e3			bne 	_Random1
.95f4	7a		ply				ply
.95f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3a3					SgnUnary:
.a3a3	fa		plx				plx 								; restore stack pos
.a3a4	20 78 97	jsr $9778			jsr 	EvaluateNumber 				; get a float or int
.a3a7	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.a3aa	20 54 98	jsr $9854			jsr 	NSMIsZero 					; if zero
.a3ad	f0 10		beq $a3bf			beq 	_SGZero  					; return Int Zero
.a3af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a3b2	48		pha				pha
.a3b3	a9 01		lda #$01			lda 	#1 							; set to 1
.a3b5	20 26 98	jsr $9826			jsr 	NSMSetByte
.a3b8	68		pla				pla
.a3b9	29 80		and #$80			and		#$80 						; copy the sign byte out
.a3bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3be	60		rts				rts
.a3bf	20 24 98	jsr $9824	_SGZero:jsr 	NSMSetZero
.a3c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a3c3					ValUnary:
.a3c3	fa		plx				plx 								; restore stack pos
.a3c4	20 d9 a3	jsr $a3d9			jsr 	ValMainCode 				; do the main val() code
.a3c7	b0 01		bcs $a3ca			bcs 	_VUError 					; couldn't convert
.a3c9	60		rts				rts
.a3ca					_VUError:
.a3ca	4c 78 a5	jmp $a578			jmp 	TypeError
.a3cd					IsValUnary:
.a3cd	fa		plx				plx 								; restore stack pos
.a3ce	20 d9 a3	jsr $a3d9			jsr 	ValMainCode 				; do the main val() code
.a3d1	b0 03		bcs $a3d6			bcs 	_VUBad
.a3d3	4c 3e 8d	jmp $8d3e			jmp 	ReturnTrue
.a3d6					_VUBad:
.a3d6	4c 4a 8d	jmp $8d4a			jmp 	ReturnFalse
.a3d9					ValMainCode:
.a3d9	20 83 97	jsr $9783			jsr 	EvaluateString 				; get a string
.a3dc	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; check right bracket present
.a3df	5a		phy				phy
.a3e0	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a3e2	f0 17		beq $a3fb			beq 	_VMCFail2
.a3e4	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a3e6	48		pha				pha 								; save first character
.a3e7	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a3e9	d0 01		bne $a3ec			bne 	_VMCStart
.a3eb	c8		iny				iny 								; skip over -
.a3ec					_VMCStart:
.a3ec	38		sec				sec 								; initialise first time round.
.a3ed					_VMCNext:
.a3ed	c8		iny				iny 								; pre-increment
.a3ee	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a3f0	f0 0c		beq $a3fe			beq 	_VMCSuccess 				; successful.
.a3f2	20 8d 92	jsr $928d			jsr 	EncodeNumber 				; send it to the number-builder
.a3f5	90 03		bcc $a3fa			bcc 	_VMCFail 					; if failed, give up.
.a3f7	18		clc				clc 								; next time round, countinue
.a3f8	80 f3		bra $a3ed			bra 	_VMCNext
.a3fa					_VMCFail:
.a3fa	68		pla				pla
.a3fb					_VMCFail2:
.a3fb	7a		ply				ply
.a3fc	38		sec				sec
.a3fd	60		rts				rts
.a3fe					_VMCSuccess:
.a3fe	a9 00		lda #$00			lda 	#0 							; construct final
.a400	20 8d 92	jsr $928d			jsr 	EncodeNumber
.a403	68		pla				pla
.a404	c9 2d		cmp #$2d			cmp 	#"-"
.a406	d0 03		bne $a40b			bne 	_VMCNotNegative
.a408	20 d0 97	jsr $97d0			jsr		NSMNegate
.a40b					_VMCNotNegative:
.a40b	7a		ply				ply
.a40c	18		clc				clc
.a40d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.95f6					ChrUnary:
.95f6	fa		plx				plx 								; restore stack pos
.95f7	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger			; get value
.95fa	48		pha				pha
.95fb	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.95fe	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9600	20 8f a7	jsr $a78f			jsr 	StringTempAllocate
.9603	68		pla				pla 								; write number to it
.9604	20 cd a7	jsr $a7cd			jsr 	StringTempWrite
.9607	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9608					SpcUnary:
.9608	fa		plx				plx 								; restore stack pos
.9609	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger			; get value
.960c	5a		phy				phy
.960d	48		pha				pha 								; save count
.960e	20 8f a7	jsr $a78f			jsr 	StringTempAllocate
.9611	7a		ply				ply 								; to do count in Y
.9612					_SpcLoop:
.9612	c0 00		cpy #$00			cpy 	#0
.9614	f0 08		beq $961e			beq 	_SpcExit
.9616	a9 20		lda #$20			lda 	#32
.9618	20 cd a7	jsr $a7cd			jsr 	StringTempWrite
.961b	88		dey				dey
.961c	80 f4		bra $9612			bra 	_SPCLoop
.961e					_SpcExit:
.961e	7a		ply				ply
.961f	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket
.9622	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9623					Unary_Str:
.9623	fa		plx				plx
.9624	20 78 97	jsr $9778			jsr 	EvaluateNumber  			; get number
.9627	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; closing bracket
.962a	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.962c	20 45 96	jsr $9645			jsr 	ConvertNumberToString 		; do the conversion.
.962f	a9 21		lda #$21			lda		#33 						; create buffer
.9631	20 8f a7	jsr $a78f			jsr 	StringTempAllocate 			; allocate memory
.9634	da		phx				phx
.9635	a2 00		ldx #$00			ldx 	#0
.9637					_USCopy:
.9637	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.963a	20 cd a7	jsr $a7cd			jsr 	StringTempWrite
.963d	e8		inx				inx
.963e	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.9641	d0 f4		bne $9637			bne 	_USCopy
.9643	fa		plx				plx
.9644	60		rts				rts
.9645					ConvertNumberToString:
.9645	5a		phy				phy 								; save code position
.9646	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9649	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.964c	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.964f	10 0a		bpl $965b			bpl 	_CNTSNotNegative
.9651	29 7f		and #$7f			and 	#$7F 						; make +ve
.9653	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9656	a9 2d		lda #$2d			lda 	#"-"
.9658	20 c1 96	jsr $96c1			jsr 	WriteDecimalBuffer
.965b					_CNTSNotNegative:
.965b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.965e	f0 15		beq $9675			beq 	_CNTSNotFloat
.9660	e8		inx				inx 								; round up
.9661	a9 01		lda #$01			lda 	#1
.9663	20 26 98	jsr $9826			jsr 	NSMSetByte
.9666	ca		dex				dex
.9667	bd 28 06	lda $0628,x			lda		NSExponent,x
.966a	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.966d	a9 08		lda #$08			lda 	#NSTFloat
.966f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9672	20 53 a1	jsr $a153			jsr 	FloatAdd
.9675					_CNTSNotFloat:
.9675	20 a3 96	jsr $96a3			jsr 	MakePlusTwoString
.9678	20 31 a2	jsr $a231			jsr 	FloatFractionalPart 		; get the fractional part
.967b	20 f5 a2	jsr $a2f5			jsr 	NSNormalise					; normalise , exit if zero
.967e	f0 21		beq $96a1			beq 	_CNTSExit
.9680	a9 2e		lda #$2e			lda 	#"."
.9682	20 c1 96	jsr $96c1			jsr 	WriteDecimalBuffer 			; write decimal place
.9685					_CNTSDecimal:
.9685	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9688	30 17		bmi $96a1			bmi 	_CNTSExit
.968a	e8		inx				inx 								; x 10.0
.968b	a9 0a		lda #$0a			lda 	#10
.968d	20 26 98	jsr $9826			jsr 	NSMSetByte
.9690	a9 08		lda #$08			lda 	#NSTFloat
.9692	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9695	ca		dex				dex
.9696	20 be a2	jsr $a2be			jsr 	FloatMultiply
.9699	20 a3 96	jsr $96a3			jsr 	MakePlusTwoString
.969c	20 31 a2	jsr $a231			jsr 	FloatFractionalPart 		; get the fractional part
.969f	80 e4		bra $9685			bra 	_CNTSDecimal 				; keep going.
.96a1					_CNTSExit:
.96a1	7a		ply				ply
.96a2	60		rts				rts
.96a3					MakePlusTwoString:
.96a3	da		phx				phx
.96a4	20 fb 97	jsr $97fb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.96a7	e8		inx				inx 								; access it
.96a8	e8		inx				inx
.96a9	20 94 a2	jsr $a294			jsr 	FloatIntegerPart 			; make it an integer
.96ac	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.96ae	20 fd a0	jsr $a0fd			jsr 	ConvertInt32
.96b1	a2 00		ldx #$00			ldx	 	#0
.96b3					_MPTSCopy:
.96b3	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96b6	20 c1 96	jsr $96c1			jsr 	WriteDecimalBuffer
.96b9	e8		inx				inx
.96ba	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96bd	d0 f4		bne $96b3			bne 	_MPTSCopy
.96bf	fa		plx				plx
.96c0	60		rts				rts
.96c1					WriteDecimalBuffer:
.96c1	da		phx				phx
.96c2	ae 15 07	ldx $0715			ldx 	dbOffset
.96c5	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.96c8	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.96cb	ee 15 07	inc $0715			inc 	dbOffset
.96ce	fa		plx				plx
.96cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.96d0					Unary_Left:
.96d0	fa		plx				plx
.96d1	18		clc				clc 								; only one parameter
.96d2	20 47 97	jsr $9747			jsr 	SubstringInitial 			; set up.
.96d5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.96d8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96db	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.96de	80 2c		bra $970c			bra 	SubstringMain
.96e0					Unary_Right:
.96e0	fa		plx				plx
.96e1	18		clc				clc 								; only one parameter
.96e2	20 47 97	jsr $9747			jsr 	SubstringInitial 			; set up.
.96e5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.96e8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96eb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.96ee	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.96f1	b0 02		bcs $96f5			bcs 	_URNotUnderflow
.96f3	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.96f5					_URNotUnderFlow:
.96f5	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.96f8	80 12		bra $970c			bra 	SubStringMain
.96fa					Unary_Mid:
.96fa	fa		plx				plx
.96fb	38		sec				sec 								; two parameters
.96fc	20 47 97	jsr $9747			jsr 	SubstringInitial 			; set up.
.96ff	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9702	f0 05		beq $9709			beq 	_UMError
.9704	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9707	80 03		bra $970c			bra 	SubStringMain
.9709					_UMError:
.9709	4c 7d a5	jmp $a57d			jmp 	ArgumentError
.970c					SubStringMain:
.970c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.970f	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9712	b0 2d		bcs $9741			bcs 	_SSMNull 					; if so, return an empty string.
.9714	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9717	f0 28		beq $9741			beq 	_SSMNull 					; return empty string.
.9719	18		clc				clc 								; add the offset +1 to the address and
.971a	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.971d	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9720	85 36		sta $36				sta 	zTemp0
.9722	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9725	69 00		adc #$00			adc 	#0
.9727	85 37		sta $37				sta 	zTemp0+1
.9729					_SSMNoCarry:
.9729	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.972c	20 8f a7	jsr $a78f			jsr 	StringTempAllocate 			; allocate that many characters
.972f	5a		phy				phy 								; save Y
.9730	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9732					_SSMCopy:
.9732	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9734	f0 09		beq $973f			beq 	_SSMEString 				; no more to copy
.9736	20 cd a7	jsr $a7cd			jsr 	StringTempWrite 			; and write it out.
.9739	c8		iny				iny
.973a	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.973d	d0 f3		bne $9732			bne 	_SSMCopy
.973f					_SSMEString:
.973f	7a		ply				ply
.9740					_SSMExit:
.9740	60		rts				rts
.9741					_SSMNull:
.9741	a9 00		lda #$00			lda 	#0
.9743	20 8f a7	jsr $a78f			jsr 	StringTempAllocate
.9746	60		rts				rts
.9747					SubstringInitial:
.9747	da		phx				phx 								; save initial stack position
.9748	08		php				php 								; save carry on stack indicating 2 parameters
.9749	20 83 97	jsr $9783			jsr 	EvaluateString 				; get a string
.974c	5a		phy				phy 								; calculate length to exponent.
.974d	a0 ff		ldy #$ff			ldy 	#$FF
.974f					_SIFindLength:
.974f	c8		iny				iny
.9750	b1 36		lda ($36),y			lda 	(zTemp0),y
.9752	d0 fb		bne $974f			bne 	_SIFindLength
.9754	98		tya				tya
.9755	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9758	7a		ply				ply
.9759	e8		inx				inx
.975a	20 94 9f	jsr $9f94			jsr 	CheckComma 					; comma next
.975d	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 		; get next parameter
.9760	28		plp				plp 								; is it the last parameter ?
.9761	90 07		bcc $976a			bcc 	_SSIExit 					; if so, exit.
.9763	e8		inx				inx
.9764	20 94 9f	jsr $9f94			jsr 	CheckComma 					; comma next
.9767	20 bc 97	jsr $97bc			jsr 	Evaluate8BitInteger 		; get last parameter
.976a					_SSIExit:
.976a	fa		plx				plx
.976b	20 8c 9f	jsr $9f8c			jsr 	CheckRightBracket 			; check closing bracket
.976e	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.976f					EvaluateValue:
.976f	48		pha				pha
.9770	20 da 90	jsr $90da			jsr		EvaluateExpression 			; expression
.9773	20 ef 91	jsr $91ef			jsr 	Dereference					; derefernce it
.9776	68		pla				pla
.9777	60		rts				rts
.9778					EvaluateNumber:
.9778	20 6f 97	jsr $976f			jsr 	EvaluateValue 				; get a value
.977b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.977e	29 10		and #$10			and 	#NSBIsString
.9780	d0 16		bne $9798			bne 	HelperTypeError
.9782	60		rts				rts
.9783					EvaluateString:
.9783	20 6f 97	jsr $976f			jsr 	EvaluateValue 				; get a value
.9786	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9789	29 10		and #$10			and 	#NSBIsString
.978b	f0 0b		beq $9798			beq 	HelperTypeError
.978d					CopyAddressToTemp0:
.978d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9790	85 36		sta $36				sta 	zTemp0
.9792	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9795	85 37		sta $37				sta 	zTemp0+1
.9797	60		rts				rts
.9798					HelperTypeError:
.9798	4c 78 a5	jmp $a578			jmp 	TypeError
.979b					EvaluateInteger:
.979b	20 78 97	jsr $9778			jsr 	EvaluateNumber
.979e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.97a1	d0 0a		bne $97ad			bne 	HelperValueError 			; if not, it's a float.
.97a3	60		rts				rts
.97a4					EvaluateUnsignedInteger:
.97a4	20 9b 97	jsr $979b			jsr 	EvaluateInteger 			; check integer is +ve
.97a7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97aa	30 01		bmi $97ad			bmi 	HelperValueError
.97ac	60		rts				rts
.97ad					HelperValueError:
.97ad	4c 7d a5	jmp $a57d			jmp 	ArgumentError
.97b0					Evaluate16BitInteger:
.97b0	20 a4 97	jsr $97a4			jsr	 	EvaluateUnsignedInteger		; get integer
.97b3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.97b6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97b9	d0 f2		bne $97ad			bne 	HelperValueError
.97bb	60		rts				rts
.97bc					Evaluate8BitInteger:
.97bc	20 a4 97	jsr $97a4			jsr	 	EvaluateUnsignedInteger 	; get an integer
.97bf	d0 ec		bne $97ad			bne 	HelperValueError
.97c1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.97c4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97c7	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.97ca	d0 e1		bne $97ad			bne 	HelperValueError
.97cc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a40e					Multiply8x8:
.a40e	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a40f	85 36		sta $36			  	sta 	zTemp0
.a411	86 37		stx $37				stx 	zTemp0+1
.a413	a9 00		lda #$00			lda 	#0
.a415	a2 08		ldx #$08			ldx 	#8
.a417					_M88Loop:
.a417	90 03		bcc $a41c			bcc 	_M88NoAdd
.a419	18		clc				clc
.a41a	65 37		adc $37				adc 	zTemp0+1
.a41c					_M88NoAdd:
.a41c	6a		ror a				ror 	a
.a41d	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a41f	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a420	d0 f5		bne $a417			bne 	_M88Loop
.a422	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a424	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.97d0					NSMNegate:
.97d0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97d3	49 80		eor #$80			eor 	#NSBIsNegative
.97d5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97d8	60		rts				rts
.97d9					NSMNegateMantissa:
.97d9	38		sec				sec
.97da	a9 00		lda #$00			lda 	#0
.97dc	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.97df	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97e2	a9 00		lda #$00			lda 	#0
.97e4	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.97e7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97ea	a9 00		lda #$00			lda 	#0
.97ec	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.97ef	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97f2	a9 00		lda #$00			lda 	#0
.97f4	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.97f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97fa	60		rts				rts
.97fb					NSMShiftUpTwo:
.97fb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97fe	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9801	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9804	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9807	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.980a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.980d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9810	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9813	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9816	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9819	bd 00 06	lda $0600,x			lda 	NSStatus,x
.981c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.981f	60		rts				rts
.9820					NSMSetZeroMantissaOnly:
.9820	a9 00		lda #$00			lda 	#0
.9822	80 08		bra $982c			bra 	NSMSetMantissa
.9824					NSMSetZero:
.9824	a9 00		lda #$00			lda 	#0
.9826					NSMSetByte:
.9826	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9829	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.982c					NSMSetMantissa:
.982c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.982f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9832	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9835	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9838	60		rts				rts
.9839					NSMShiftLeft:
.9839	18		clc				clc
.983a					NSMRotateLeft:
.983a	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.983d	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9840	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9843	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9846	60		rts				rts
.9847					NSMShiftRight:
.9847	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.984a	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.984d	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9850	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9853	60		rts				rts
.9854					NSMIsZero:
.9854	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9857	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.985a	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.985d	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9860	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a425					Assemble_ora:
.a425	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a428	01					.byte $01
.a429					Assemble_and:
.a429	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a42c	21					.byte $21
.a42d					Assemble_eor:
.a42d	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a430	41					.byte $41
.a431					Assemble_adc:
.a431	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a434	61					.byte $61
.a435					Assemble_sta:
.a435	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a438	81					.byte $81
.a439					Assemble_lda:
.a439	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a43c	a1					.byte $a1
.a43d					Assemble_cmp:
.a43d	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a440	c1					.byte $c1
.a441					Assemble_sbc:
.a441	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a444	e1					.byte $e1
.a445					Assemble_asl:
.a445	20 03 82	jsr $8203		jsr	AssembleGroup2
>a448	02					.byte $02
>a449	75					.byte $75
.a44a					Assemble_rol:
.a44a	20 03 82	jsr $8203		jsr	AssembleGroup2
>a44d	22					.byte $22
>a44e	75					.byte $75
.a44f					Assemble_lsr:
.a44f	20 03 82	jsr $8203		jsr	AssembleGroup2
>a452	42					.byte $42
>a453	75					.byte $75
.a454					Assemble_ror:
.a454	20 03 82	jsr $8203		jsr	AssembleGroup2
>a457	62					.byte $62
>a458	75					.byte $75
.a459					Assemble_stx:
.a459	20 03 82	jsr $8203		jsr	AssembleGroup2
>a45c	82					.byte $82
>a45d	50					.byte $50
.a45e					Assemble_ldx:
.a45e	20 03 82	jsr $8203		jsr	AssembleGroup2
>a461	a2					.byte $a2
>a462	d0					.byte $d0
.a463					Assemble_dec:
.a463	20 03 82	jsr $8203		jsr	AssembleGroup2
>a466	c2					.byte $c2
>a467	55					.byte $55
.a468					Assemble_inc:
.a468	20 03 82	jsr $8203		jsr	AssembleGroup2
>a46b	e2					.byte $e2
>a46c	55					.byte $55
.a46d					Assemble_stz:
.a46d	20 03 82	jsr $8203		jsr	AssembleGroup2
>a470	60					.byte $60
>a471	44					.byte $44
.a472					Assemble_bit:
.a472	20 03 82	jsr $8203		jsr	AssembleGroup2
>a475	20					.byte $20
>a476	55					.byte $55
.a477					Assemble_sty:
.a477	20 03 82	jsr $8203		jsr	AssembleGroup2
>a47a	80					.byte $80
>a47b	54					.byte $54
.a47c					Assemble_ldy:
.a47c	20 03 82	jsr $8203		jsr	AssembleGroup2
>a47f	a0					.byte $a0
>a480	d5					.byte $d5
.a481					Assemble_cpy:
.a481	20 03 82	jsr $8203		jsr	AssembleGroup2
>a484	c0					.byte $c0
>a485	d4					.byte $d4
.a486					Assemble_cpx:
.a486	20 03 82	jsr $8203		jsr	AssembleGroup2
>a489	e0					.byte $e0
>a48a	d0					.byte $d0
.a48b					Assemble_tsb:
.a48b	20 03 82	jsr $8203		jsr	AssembleGroup2
>a48e	00					.byte $00
>a48f	50					.byte $50
.a490					Assemble_trb:
.a490	20 03 82	jsr $8203		jsr	AssembleGroup2
>a493	10					.byte $10
>a494	50					.byte $50
.a495					Assemble_jsr:
.a495	20 03 82	jsr $8203		jsr	AssembleGroup2
>a498	14					.byte $14
>a499	10					.byte $10
.a49a					Assemble_jmp:
.a49a	20 03 82	jsr $8203		jsr	AssembleGroup2
>a49d	40					.byte $40
>a49e	10					.byte $10
.a49f					Assemble_bpl:
.a49f	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4a2	10					.byte $10
.a4a3					Assemble_bmi:
.a4a3	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4a6	30					.byte $30
.a4a7					Assemble_bvc:
.a4a7	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4aa	50					.byte $50
.a4ab					Assemble_bvs:
.a4ab	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4ae	70					.byte $70
.a4af					Assemble_bcc:
.a4af	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4b2	90					.byte $90
.a4b3					Assemble_bcs:
.a4b3	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4b6	b0					.byte $b0
.a4b7					Assemble_bne:
.a4b7	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4ba	d0					.byte $d0
.a4bb					Assemble_beq:
.a4bb	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4be	f0					.byte $f0
.a4bf					Assemble_bra:
.a4bf	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4c2	80					.byte $80
.a4c3					Assemble_brk:
.a4c3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c6	00					.byte $00
.a4c7					Assemble_php:
.a4c7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ca	08					.byte $08
.a4cb					Assemble_clc:
.a4cb	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ce	18					.byte $18
.a4cf					Assemble_plp:
.a4cf	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d2	28					.byte $28
.a4d3					Assemble_sec:
.a4d3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d6	38					.byte $38
.a4d7					Assemble_rti:
.a4d7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4da	40					.byte $40
.a4db					Assemble_pha:
.a4db	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4de	48					.byte $48
.a4df					Assemble_cli:
.a4df	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4e2	58					.byte $58
.a4e3					Assemble_phy:
.a4e3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4e6	5a					.byte $5a
.a4e7					Assemble_rts:
.a4e7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ea	60					.byte $60
.a4eb					Assemble_pla:
.a4eb	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ee	68					.byte $68
.a4ef					Assemble_sei:
.a4ef	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4f2	78					.byte $78
.a4f3					Assemble_ply:
.a4f3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4f6	7a					.byte $7a
.a4f7					Assemble_dey:
.a4f7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4fa	88					.byte $88
.a4fb					Assemble_txa:
.a4fb	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4fe	8a					.byte $8a
.a4ff					Assemble_tya:
.a4ff	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a502	98					.byte $98
.a503					Assemble_txs:
.a503	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a506	9a					.byte $9a
.a507					Assemble_tay:
.a507	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a50a	a8					.byte $a8
.a50b					Assemble_tax:
.a50b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a50e	aa					.byte $aa
.a50f					Assemble_clv:
.a50f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a512	b8					.byte $b8
.a513					Assemble_tsx:
.a513	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a516	ba					.byte $ba
.a517					Assemble_iny:
.a517	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a51a	c8					.byte $c8
.a51b					Assemble_dex:
.a51b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a51e	ca					.byte $ca
.a51f					Assemble_cld:
.a51f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a522	d8					.byte $d8
.a523					Assemble_phx:
.a523	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a526	da					.byte $da
.a527					Assemble_inx:
.a527	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a52a	e8					.byte $e8
.a52b					Assemble_nop:
.a52b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a52e	ea					.byte $ea
.a52f					Assemble_sed:
.a52f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a532	f8					.byte $f8
.a533					Assemble_plx:
.a533	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a536	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a537					DecimalScalarTable:
>a537	66 66 66 66				.dword $66666666 ; 0.1
>a53b	de					.byte $de
>a53c	1f 85 eb 51				.dword $51eb851f ; 0.01
>a540	db					.byte $db
>a541	4c 37 89 41				.dword $4189374c ; 0.001
>a545	d8					.byte $d8
>a546	ac 8b db 68				.dword $68db8bac ; 0.0001
>a54a	d4					.byte $d4
>a54b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a54f	d1					.byte $d1
>a550	83 de 1b 43				.dword $431bde83 ; 1e-06
>a554	ce					.byte $ce
>a555	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a559	ca					.byte $ca
>a55a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a55e	c7					.byte $c7
>a55f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a563	c4					.byte $c4
>a564	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a568	c0					.byte $c0
>a569	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a56d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a56e					SyntaxError:
.a56e	a9 02		lda #$02		lda	#2
.a570	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a573					RangeError:
.a573	a9 04		lda #$04		lda	#4
.a575	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a578					TypeError:
.a578	a9 05		lda #$05		lda	#5
.a57a	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a57d					ArgumentError:
.a57d	a9 07		lda #$07		lda	#7
.a57f	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a582					NotDoneError:
.a582	a9 0c		lda #$0c		lda	#12
.a584	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a587					ErrorText:
>a587	42 72 65 61 6b 00			.text	"Break",0
>a58d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a595	72 72 6f 72 00
>a59a	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a5a2	20 62 79 20 7a 65 72 6f 00
>a5ab	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a5b3	61 6e 67 65 00
>a5b8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a5c0	6d 61 74 63 68 00
>a5c6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a5ce	65 6d 6f 72 79 00
>a5d4	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a5dc	61 72 67 75 6d 65 6e 74 00
>a5e5	53 74 6f 70 00				.text	"Stop",0
>a5ea	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a5f2	6f 6f 20 6c 6f 6e 67 00
>a5fa	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a602	6e 20 66 61 69 6c 65 64 00
>a60b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a613	61 74 61 00
>a617	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a61f	65 6e 74 65 64 00
>a625	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a62d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a639	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a641	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a64e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a656	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a663	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a66b	68 6f 75 74 20 57 68 69 6c 65 00
>a676	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a67e	68 6f 75 74 20 46 6f 72 00
>a687	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a68f	61 63 6b 20 66 75 6c 6c 00
>a698	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a6a0	75 63 74 75 72 65 00
>a6a7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a6af	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a6bc	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a6c4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a6d2	41 72 72 61 79 20 73 69			.text	"Array size",0
>a6da	7a 65 00
>a6dd	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a6e5	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a6ed	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 151."
>a6f5	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>a705	30 32 32 2e 20 42 75 69 6c 64 20 31 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9861					StackPushByte:
.9861	48		pha				pha 								; save byte
.9862	a5 34		lda $34				lda 	BasicStack
.9864	d0 02		bne $9868			bne 	_SPBNoBorrow
.9866	c6 35		dec $35				dec 	BasicStack+1
.9868					_SPBNoBorrow:
.9868	c6 34		dec $34				dec 	BasicStack
.986a	68		pla				pla 								; get back and write
.986b	92 34		sta ($34)			sta 	(BasicStack)
.986d	60		rts				rts
.986e					StackPopByte:
.986e	b2 34		lda ($34)			lda 	(BasicStack)
.9870	e6 34		inc $34				inc 	BasicStack
.9872	d0 02		bne $9876			bne 	_SPBNoCarry
.9874	e6 35		inc $35				inc 	BasicStack+1
.9876					_SPBNoCarry:
.9876	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9877					StackOpen:
.9877	48		pha				pha 								; save frame byte
.9878	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.987a	0a		asl a				asl 	a 							; claim twice this for storage
.987b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.987d	38		sec				sec 								; so basically subtracting from
.987e	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9880	85 34		sta $34				sta 	basicStack
.9882	b0 08		bcs $988c			bcs 	_SONoBorrow
.9884	c6 35		dec $35				dec 	basicStack+1
.9886	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9888	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.988a	90 04		bcc $9890			bcc 	_SOMemory
.988c					_SONoBorrow:
.988c	68		pla				pla 								; get marker back and write at TOS
.988d	92 34		sta ($34)			sta 	(basicStack)
.988f	60		rts				rts
.9890					_SOMemory:
.9890							ERR_STACK
.9890					StackClose:
.9890	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9892	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9894	0a		asl a				asl 	a 							; claim twice this.
.9895	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9897	85 34		sta $34				sta 	basicStack
.9899	90 02		bcc $989d			bcc 	_SCExit
.989b	e6 35		inc $35				inc 	basicStack+1
.989d					_SCExit:
.989d	60		rts				rts
.989e					StackCheckFrame:
.989e	48		pha				pha
.989f					_StackRemoveLocals:
.989f	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.98a1	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.98a3	b0 05		bcs $98aa			bcs 	_SCNoLocal
.98a5	20 33 9f	jsr $9f33			jsr 	LocalPopValue
.98a8	80 f5		bra $989f			bra 	_StackRemoveLocals
.98aa					_SCNoLocal:
.98aa	68		pla				pla
.98ab	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.98ad	29 f0		and #$f0			and 	#$F0 						; check type bits
.98af	d0 01		bne $98b2			bne 	_SCFError 					; different, we have structures mixed up
.98b1	60		rts				rts
.98b2					_SCFError:
.98b2	8a		txa				txa 								; report error X
.98b3	4c d1 8c	jmp $8cd1			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.98b6					STKSaveCodePosition:
.98b6	5a		phy				phy
.98b7	98		tya				tya 								; save Y
.98b8	a0 05		ldy #$05			ldy 	#5
.98ba	91 34		sta ($34),y			sta 	(basicStack),y
.98bc	88		dey				dey 								; save Code Pointer
.98bd					_STKSaveLoop:
.98bd	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.98c0	91 34		sta ($34),y			sta 	(basicStack),y
.98c2	88		dey				dey
.98c3	d0 f8		bne $98bd			bne 	_STKSaveLoop
.98c5	7a		ply				ply
.98c6	60		rts				rts
.98c7					STKLoadCodePosition:
.98c7	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.98c9					_STKLoadLoop:
.98c9	b1 34		lda ($34),y			lda 	(basicStack),y
.98cb	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.98ce	c8		iny				iny
.98cf	c0 05		cpy #$05			cpy 	#5
.98d1	d0 f6		bne $98c9			bne 	_STKLoadLoop
.98d3	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.98d5	a8		tay				tay
.98d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.98d7					StackReset:
.98d7	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.98d9	85 34		sta $34				sta 	0+basicStack
.98db	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.98dd	85 35		sta $35				sta 	1+basicStack
.98df	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.98e1	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.98e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a714					StringConcrete:
.a714	5a		phy				phy 								; save position on stack
.a715	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a718	85 38		sta $38				sta 	zTemp1
.a71a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a71d	85 39		sta $39				sta 	zTemp1+1
.a71f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a721					_SALength:
.a721	c8		iny				iny
.a722	b1 38		lda ($38),y			lda 	(zTemp1),y
.a724	d0 fb		bne $a721			bne 	_SALength
.a726	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a728	b0 3f		bcs $a769			bcs 	_SALengthError
.a72a	98		tya				tya 				 				; length of the new string
.a72b	18		clc				clc
.a72c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a72e	90 02		bcc $a732			bcc 	_SAHaveLength
.a730	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a732					_SAHaveLength:
.a732	48		pha				pha 								; save length.
.a733	38		sec				sec
.a734	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a736	6d 0e 07	adc $070e			adc 	StringMemory
.a739	8d 0e 07	sta $070e			sta 	StringMemory
.a73c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a73e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a741	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a743	6d 0f 07	adc $070f			adc 	StringMemory+1
.a746	8d 0f 07	sta $070f			sta 	StringMemory+1
.a749	85 3b		sta $3b				sta 	zTemp2+1
.a74b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a74e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a74f	38		sec				sec
.a750	e9 03		sbc #$03			sbc 	#3
.a752	92 3a		sta ($3a)			sta 	(zTemp2)
.a754	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a756	a0 01		ldy #$01			ldy 	#1
.a758	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a75a					_SACopyNewString:
.a75a	a0 00		ldy #$00			ldy 	#0
.a75c					_SACopyNSLoop:
.a75c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a75e	c8		iny				iny 								; write two on in string storage
.a75f	c8		iny				iny
.a760	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a762	88		dey				dey 								; this makes it one one.
.a763	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a765	d0 f5		bne $a75c			bne 	_SACopyNSLoop
.a767	7a		ply				ply
.a768	60		rts				rts
.a769					_SALengthError:
.a769	a9 09		lda #$09		lda	#9
.a76b	4c d1 8c	jmp $8cd1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a76e					StringSystemInitialise:
.a76e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a770	8d 0e 07	sta $070e			sta 	0+StringMemory
.a773	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a775	8d 0f 07	sta $070f			sta 	1+StringMemory
.a778	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a77b	60		rts				rts
.a77c					StringSpaceInitialise:
.a77c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a77e	8d 10 07	sta $0710			sta 	StringInitialised
.a781	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a784	8d 11 07	sta $0711			sta 	StringTempPointer
.a787	ad 0f 07	lda $070f			lda 	StringMemory+1
.a78a	3a		dec a				dec 	a
.a78b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a78e	60		rts				rts
.a78f					StringTempAllocate:
.a78f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a791	b0 35		bcs $a7c8			bcs 	_STALength
.a793	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a796	30 05		bmi $a79d			bmi 	_STAAllocate
.a798	48		pha				pha 								; save value to subtract.
.a799	20 7c a7	jsr $a77c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a79c	68		pla				pla 								; restore it
.a79d					_STAAllocate:
.a79d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a79f	18		clc				clc  								; deliberate allows one more
.a7a0	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a7a3	8d 11 07	sta $0711			sta 	StringTempPointer
.a7a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a7a9	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a7ab	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a7ae	69 ff		adc #$ff			adc 	#$FF
.a7b0	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7b3	85 3d		sta $3d				sta 	zsTemp+1
.a7b5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7b8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a7bb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a7be	a9 10		lda #$10			lda 	#NSTString
.a7c0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a7c3	a9 00		lda #$00			lda 	#0 							; clear the target string
.a7c5	92 3c		sta ($3c)			sta 	(zsTemp)
.a7c7	60		rts				rts
.a7c8					_STALength:
.a7c8	a9 09		lda #$09		lda	#9
.a7ca	4c d1 8c	jmp $8cd1		jmp	ErrorHandler
.a7cd					StringTempWrite:
.a7cd	48		pha				pha
.a7ce	92 3c		sta ($3c)			sta 	(zsTemp)
.a7d0	e6 3c		inc $3c				inc 	zsTemp
.a7d2	d0 02		bne $a7d6			bne 	_STWNoCarry
.a7d4	e6 3d		inc $3d				inc 	zsTemp+1
.a7d6					_STWNoCarry:
.a7d6	a9 00		lda #$00			lda 	#0
.a7d8	92 3c		sta ($3c)			sta 	(zsTemp)
.a7da	68		pla				pla
.a7db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.98e4					BackloadProgram:
.98e4	a2 ff		ldx #$ff			ldx 	#$FF
.98e6	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.98e9	20 14 99	jsr $9914			jsr 	BLReadByte
.98ec	30 1f		bmi $990d			bmi 	_BPExit
.98ee					_BPCopy:
.98ee	e8		inx				inx  								; copy byte in
.98ef	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.98f2	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.98f5	20 14 99	jsr $9914			jsr 	BLReadByte 					; read next byte
.98f8	30 0a		bmi $9904			bmi 	_BPEndLine 					; -ve = EOL
.98fa	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.98fc	d0 02		bne $9900			bne 	_BPNotTab
.98fe	a9 20		lda #$20			lda 	#' '
.9900					_BPNotTab:
.9900	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9902	b0 ea		bcs $98ee			bcs 	_BPCopy
.9904					_BPEndLine:
.9904	20 2f 9c	jsr $9c2f			jsr 	TokeniseLine 				; tokenise the line.
.9907	38		sec				sec 								; append not insert
.9908	20 5d a8	jsr $a85d			jsr 	MemoryInsertLine 			; append to current program
.990b	80 d7		bra $98e4			bra 	BackloadProgram
.990d					_BPExit:
.990d	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9910	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.9913	60		rts				rts
.9914					BLReadByte:
.9914					_BLLoad:
.9914	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9917	ee 15 99	inc $9915			inc 	_BLLoad+1
.991a	d0 03		bne $991f			bne 	_BLNoCarry
.991c	ee 16 99	inc $9916			inc 	_BLLoad+2
.991f					_BLNoCarry:
.991f	c9 00		cmp #$00			cmp 	#0
.9921	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9922					TokeniseSearchTable:
.9922	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9924	85 36		sta $36				sta 	zTemp0
.9926	a0 00		ldy #$00			ldy 	#0
.9928	a9 80		lda #$80			lda 	#$80 						; token #
.992a	85 38		sta $38				sta 	zTemp1
.992c					_TSTLoop:
.992c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.992e	30 49		bmi $9979			bmi 	_TSTFail 					; -ve = end of table
.9930	f0 2e		beq $9960			beq 	_TSTNext 					; zero, check next it's a dummy
.9932	c8		iny				iny 								; get the hash
.9933	b1 36		lda ($36),y			lda 	(zTemp0),y
.9935	88		dey				dey
.9936	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9939	d0 25		bne $9960			bne 	_TSTNext
.993b	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.993e	38		sec				sec
.993f	ed 00 07	sbc $0700			sbc 	identStart
.9942	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9944	d0 1a		bne $9960			bne 	_TSTNext
.9946	5a		phy				phy 								; save Y , we might fail
.9947	c8		iny				iny 								; point to text
.9948	c8		iny				iny
.9949	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.994c					_TSTCompareName:
.994c	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.994f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9951	d0 0c		bne $995f			bne 	_TSTNextPullY 				; fail, pullY and do next
.9953	e8		inx				inx
.9954	c8		iny				iny
.9955	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9958	d0 f2		bne $994c			bne 	_TSTCompareName
.995a	7a		ply				ply 								; throw Y
.995b	a5 38		lda $38				lda 	zTemp1 						; get token #
.995d	38		sec				sec 								; return with CS = passed.
.995e	60		rts				rts
.995f					_TSTNextPullY:
.995f	7a		ply				ply 								; restore current, fall through.
.9960					_TSTNext:
.9960	e6 38		inc $38				inc 	zTemp1 						; token counter
.9962	98		tya				tya
.9963	18		clc				clc
.9964	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9966	1a		inc a				inc 	a 							; +1
.9967	1a		inc a				inc 	a 							; +2
.9968	a8		tay				tay
.9969	10 c1		bpl $992c			bpl 	_TSTLoop 					; if Y < $80 loop back
.996b	98		tya				tya 								; add Y to zTemp0 and reset Y
.996c	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.996e	18		clc				clc  								; but have tables > 255 bytes
.996f	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9971	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9973	90 b7		bcc $992c			bcc 	_TSTLoop
.9975	e6 37		inc $37				inc 	zTemp0+1
.9977	80 b3		bra $992c			bra 	_TSTLoop
.9979					_TSTFail:
.9979	18		clc				clc
.997a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.997b					KeywordSet0:
>997b	00 65					.text	0,$65,""               ; $80 !0:EOF
>997d	00 58					.text	0,$58,""               ; $81 !1:SH1
>997f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9981	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9987	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>998f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9995	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>999c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>99a3	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>99aa	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>99b0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>99b8	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>99c0	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>99c6	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>99cd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>99d3	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>99db	28
>99dc	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>99e2	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>99e8	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>99ee	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>99f5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>99fb	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9a01	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9a06	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9a0a	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9a10	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9a18	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9a1f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9a26	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9a2e	43
>9a2f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9a35	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9a3b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9a42	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9a48	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9a4e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9a53	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9a59	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9a5e	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9a66	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9a6c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9a73	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9a79	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9a7e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>9a85	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9a8c	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9a92	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9a97	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9a9f	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9aa3	ff					.text	$FF
.9aa4					KeywordSet1:
>9aa4	00 65					.text	0,$65,""               ; $80 !0:EOF
>9aa6	00 58					.text	0,$58,""               ; $81 !1:SH1
>9aa8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9aaa	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9ab2	4c 45
>9ab4	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9abc	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9ac3	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9ac8	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9ace	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9ad3	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9adb	45
>9adc	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9ae1	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9ae7	ff					.text	$FF
.9ae8					KeywordSet2:
>9ae8	00 65					.text	0,$65,""               ; $80 !0:EOF
>9aea	00 58					.text	0,$58,""               ; $81 !1:SH1
>9aec	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9aee	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9af3	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9af8	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9afd	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9b02	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9b07	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9b0c	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9b11	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b16	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b1b	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9b20	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9b25	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9b2a	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9b2f	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9b34	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b39	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b3e	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9b43	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9b48	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9b4d	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9b52	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9b57	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9b5c	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9b61	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9b66	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9b6b	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9b70	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9b75	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9b7a	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9b7f	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9b84	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9b89	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9b8e	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9b93	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9b98	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9b9d	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9ba2	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9ba7	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9bac	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9bb1	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9bb6	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9bbb	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9bc0	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9bc5	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9bca	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9bcf	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9bd4	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9bd9	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9bde	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9be3	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9be8	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9bed	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9bf2	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9bf7	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9bfc	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9c01	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9c06	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9c0b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9c10	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c15	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c1a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9c1f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9c24	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9c29	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9c2e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9c2f					TokeniseLine:
.9c2f	20 b7 9d	jsr $9db7			jsr 	FixLineBufferCase 			; fix line case
.9c32	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9c34	8d 25 07	sta $0725			sta 	tokenOffset
.9c37	9c 26 07	stz $0726			stz 	tokenLineNumber
.9c3a	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9c3d	a2 ff		ldx #$ff			ldx 	#$FF
.9c3f					_TKFindFirst:
.9c3f	e8		inx				inx
.9c40	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c43	f0 79		beq $9cbe			beq 	_TKExit
.9c45	c9 20		cmp #$20			cmp 	#' '
.9c47	90 f6		bcc $9c3f			bcc 	_TKFindFirst
.9c49	c9 30		cmp #$30			cmp 	#'0'
.9c4b	90 07		bcc $9c54			bcc 	_TKNoLineNumber
.9c4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c4f	b0 03		bcs $9c54			bcs 	_TKNoLineNumber
.9c51	20 e1 9d	jsr $9de1			jsr 	TokeniseExtractLineNumber
.9c54					_TKNoLineNumber:
.9c54					_TKTokeniseLoop:
.9c54	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9c57	f0 65		beq $9cbe			beq 	_TKExit
.9c59	e8		inx				inx
.9c5a	c9 20		cmp #$20			cmp 	#' '
.9c5c	f0 f6		beq $9c54			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9c5e	ca		dex				dex 								; undo last get, A contains character, X is position.
.9c5f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9c61	f0 61		beq $9cc4			beq 	_TKTokeniseIdentifier
.9c63	c9 41		cmp #$41			cmp 	#'A'
.9c65	90 04		bcc $9c6b			bcc 	_TKTokenisePunctuation
.9c67	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9c69	90 59		bcc $9cc4			bcc 	_TKTokeniseIdentifier
.9c6b					_TKTokenisePunctuation:
.9c6b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9c6d	f0 27		beq $9c96			beq 	_TKString
.9c6f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9c71	f0 28		beq $9c9b			beq 	_TKHexConstant
.9c73	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9c75	f0 29		beq $9ca0			beq 	_TKCheckDouble
.9c77	c9 3e		cmp #$3e			cmp 	#'>'
.9c79	f0 25		beq $9ca0			beq 	_TKCheckDouble
.9c7b					_TKStandardPunctuation:
.9c7b	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9c7e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9c80	90 0e		bcc $9c90			bcc 	_TKNoShift
.9c82	48		pha				pha 								; save
.9c83	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9c85	85 36		sta $36				sta 	zTemp0
.9c87	68		pla				pla
.9c88	29 20		and #$20			and 	#32 						; bit 5
.9c8a	4a		lsr a				lsr 	a 							; shift into bit 3
.9c8b	4a		lsr a				lsr 	a
.9c8c	05 36		ora $36				ora 	zTemp0
.9c8e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9c90					_TKNoShift:
.9c90	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte 			; write the punctuation character
.9c93	e8		inx				inx 								; consume the character
.9c94	80 be		bra $9c54			bra 	_TKTokeniseLoop 			; and loop round again.
.9c96					_TKString:
.9c96	20 46 9d	jsr $9d46			jsr 	TokeniseString
.9c99	80 b9		bra $9c54			bra 	_TKTokeniseLoop
.9c9b					_TKHexConstant:
.9c9b	20 81 9d	jsr $9d81			jsr 	TokeniseHexConstant
.9c9e	80 b4		bra $9c54			bra 	_TKTokeniseLoop
.9ca0					_TKCheckDouble:
.9ca0	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9ca3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9ca5	90 d4		bcc $9c7b			bcc 	_TKStandardPunctuation
.9ca7	c9 3f		cmp #$3f			cmp 	#'>'+1
.9ca9	b0 d0		bcs $9c7b			bcs 	_TKStandardPunctuation
.9cab	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9cae	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9cb0	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9cb1	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9cb4	38		sec				sec
.9cb5	e9 3c		sbc #$3c			sbc 	#'<'
.9cb7	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9cba	e8		inx				inx 								; consume both
.9cbb	e8		inx				inx
.9cbc	80 96		bra $9c54			bra 	_TKTokeniseLoop
.9cbe	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9cc0	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9cc3	60		rts				rts
.9cc4					_TKTokeniseIdentifier:
.9cc4	8e 00 07	stx $0700			stx 	identStart 					; save start
.9cc7	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9cca					_TKCheckLoop:
.9cca	e8		inx				inx 								; look at next, we know first is identifier.
.9ccb	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9cce	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9cd0	f0 f8		beq $9cca			beq 	_TKCheckLoop
.9cd2	c9 30		cmp #$30			cmp	 	#"0"
.9cd4	90 0c		bcc $9ce2			bcc 	_TKEndIdentifier
.9cd6	c9 3a		cmp #$3a			cmp 	#"9"+1
.9cd8	90 f0		bcc $9cca			bcc 	_TKCheckLoop
.9cda	c9 41		cmp #$41			cmp	 	#"A"
.9cdc	90 04		bcc $9ce2			bcc 	_TKEndIdentifier
.9cde	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9ce0	90 e8		bcc $9cca			bcc 	_TKCheckLoop
.9ce2					_TKEndIdentifier:
.9ce2	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9ce5	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9ce7	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9ce9	f0 06		beq $9cf1			beq 	_TKHasTypeCharacter
.9ceb	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9ced	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9cef	d0 07		bne $9cf8			bne 	_TKNoTypeCharacter
.9cf1					_TKHasTypeCharacter:
.9cf1	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9cf4	e8		inx				inx 								; read next
.9cf5	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9cf8					_TKNoTypeCharacter:
.9cf8	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9cfa	d0 09		bne $9d05			bne 	_TKNoArray
.9cfc	e8		inx				inx 								; skip the (
.9cfd	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9d00	09 04		ora #$04			ora 	#$04
.9d02	8d 04 07	sta $0704			sta 	identTypeByte
.9d05					_TKNoArray:
.9d05	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9d08	20 a2 9d	jsr $9da2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9d0b	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9d0d	a9 7b		lda #$7b			lda 	#(KeywordSet0) & $FF
.9d0f	20 22 99	jsr $9922			jsr 	TokeniseSearchTable
.9d12	a2 00		ldx #$00			ldx 	#0
.9d14	b0 1f		bcs $9d35			bcs 	_TKFoundToken
.9d16	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9d18	a9 a4		lda #$a4			lda 	#(KeywordSet1) & $FF
.9d1a	20 22 99	jsr $9922			jsr 	TokeniseSearchTable
.9d1d	a2 81		ldx #$81			ldx 	#$81
.9d1f	b0 14		bcs $9d35			bcs 	_TKFoundToken
.9d21	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9d23	a9 e8		lda #$e8			lda 	#(KeywordSet2) & $FF
.9d25	20 22 99	jsr $9922			jsr 	TokeniseSearchTable
.9d28	a2 82		ldx #$82			ldx 	#$82
.9d2a	b0 09		bcs $9d35			bcs 	_TKFoundToken
.9d2c	20 32 9e	jsr $9e32			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9d2f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d32	4c 54 9c	jmp $9c54			jmp 	_TKTokeniseLoop 			; and go round again.
.9d35					_TKFoundToken:
.9d35	48		pha				pha 								; save token
.9d36	8a		txa				txa 								; shift in X, is there one ?
.9d37	f0 03		beq $9d3c			beq 	_TKNoTShift
.9d39	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte 			; if so, write it out
.9d3c					_TKNoTShift:
.9d3c	68		pla				pla 								; restore and write token
.9d3d	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d40	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d43	4c 54 9c	jmp $9c54			jmp 	_TKTokeniseLoop 			; and go round again.
.9d46					TokeniseString:
.9d46	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9d48	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d4b	e8		inx				inx									; start of quoted string.
.9d4c	da		phx				phx 								; push start of string on top
.9d4d	ca		dex				dex
.9d4e					_TSFindEnd:
.9d4e	e8		inx				inx
.9d4f	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9d52	f0 04		beq $9d58			beq 	_TSEndOfString
.9d54	c9 22		cmp #$22			cmp 	#'"'
.9d56	d0 f6		bne $9d4e			bne 	_TSFindEnd
.9d58					_TSEndOfString:
.9d58	7a		ply				ply  								; so now Y is first character, X is character after end.
.9d59	48		pha				pha 								; save terminating character
.9d5a	20 62 9d	jsr $9d62			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9d5d	68		pla				pla 								; terminating character
.9d5e	f0 01		beq $9d61			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9d60	e8		inx				inx
.9d61					_TSNotQuote:
.9d61	60		rts				rts
.9d62					TOWriteBlockXY:
.9d62	86 36		stx $36				stx 	zTemp0 						; write end character
.9d64	98		tya				tya
.9d65	49 ff		eor #$ff			eor 	#$FF
.9d67	38		sec				sec
.9d68	65 36		adc $36				adc 	zTemp0
.9d6a	1a		inc a				inc 	a 							; one extra for NULL
.9d6b	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d6e					_TOBlockLoop:
.9d6e	c4 36		cpy $36				cpy 	zTemp0
.9d70	f0 09		beq $9d7b			beq 	_TOBlockExit
.9d72	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9d75	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d78	c8		iny				iny
.9d79	80 f3		bra $9d6e			bra 	_TOBlockLoop
.9d7b					_TOBlockExit:
.9d7b	a9 00		lda #$00			lda 	#0
.9d7d	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d80	60		rts				rts
.9d81					TokeniseHexConstant:
.9d81	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9d83	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9d86	e8		inx				inx									; start of quoted string.
.9d87	da		phx				phx 								; push start of constant on top
.9d88	ca		dex				dex
.9d89					_THFindLoop:
.9d89	e8		inx				inx
.9d8a	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d8d	c9 30		cmp #$30			cmp 	#"0"
.9d8f	90 0c		bcc $9d9d			bcc 	_THFoundEnd
.9d91	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d93	90 f4		bcc $9d89			bcc 	_THFindLoop
.9d95	c9 41		cmp #$41			cmp 	#"A"
.9d97	90 04		bcc $9d9d			bcc 	_THFoundEnd
.9d99	c9 47		cmp #$47			cmp 	#"F"+1
.9d9b	90 ec		bcc $9d89			bcc 	_THFindLoop
.9d9d					_THFoundEnd:
.9d9d	7a		ply				ply 								; restore start
.9d9e	20 62 9d	jsr $9d62			jsr 	TOWriteBlockXY 				; output the block
.9da1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9da2					TokeniseCalculateHash:
.9da2	da		phx				phx
.9da3	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9da6	a9 00		lda #$00			lda 	#0
.9da8					_TCHLoop:
.9da8	18		clc				clc
.9da9	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9dac	e8		inx				inx
.9dad	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9db0	d0 f6		bne $9da8			bne 	_TCHLoop
.9db2	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9db5	fa		plx				plx
.9db6	60		rts				rts
.9db7					FixLineBufferCase:
.9db7	a2 00		ldx #$00			ldx 	#0
.9db9					_FLBCLoop:
.9db9	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9dbc	f0 22		beq $9de0			beq 	_FLBCExit 					; end of string.
.9dbe	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9dc0	f0 11		beq $9dd3			beq 	_FLBCInQuotes
.9dc2	e8		inx				inx
.9dc3	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9dc5	90 f2		bcc $9db9			bcc 	_FLBCLoop
.9dc7	c9 7b		cmp #$7b			cmp 	#'z'+1
.9dc9	b0 ee		bcs $9db9			bcs 	_FLBCLoop
.9dcb	38		sec				sec 								; make U/C
.9dcc	e9 20		sbc #$20			sbc 	#32
.9dce	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9dd1	80 e6		bra $9db9			bra 	_FLBCLoop
.9dd3					_FLBCInQuotes:
.9dd3	e8		inx				inx 								; advance
.9dd4	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9dd7	f0 07		beq $9de0			beq 	_FLBCExit 					; exit on EOS
.9dd9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9ddb	d0 f6		bne $9dd3			bne 	_FLBCInQuotes
.9ddd	e8		inx				inx 								; skip over it
.9dde	80 d9		bra $9db9			bra 	_FLBCLoop
.9de0					_FLBCExit:
.9de0	60		rts				rts
.9de1					TokeniseExtractLineNumber:
.9de1	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9de4	48		pha				pha
.9de5	ad 26 07	lda $0726			lda 	tokenLineNumber
.9de8	48		pha				pha
.9de9	20 1f 9e	jsr $9e1f			jsr 	_TELNTimes2 				; line # x 4
.9dec	20 1f 9e	jsr $9e1f			jsr 	_TELNTimes2 				; line # x 2
.9def	18		clc				clc 								; add stacked value
.9df0	68		pla				pla
.9df1	6d 26 07	adc $0726			adc 	tokenLineNumber
.9df4	8d 26 07	sta $0726			sta 	tokenLineNumber
.9df7	68		pla				pla
.9df8	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9dfb	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9dfe	20 1f 9e	jsr $9e1f			jsr 	_TELNTimes2 				; line # x 10
.9e01	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9e04	e8		inx				inx
.9e05	29 0f		and #$0f			and 	#15 						; add to line #
.9e07	18		clc				clc
.9e08	6d 26 07	adc $0726			adc 	tokenLineNumber
.9e0b	8d 26 07	sta $0726			sta 	tokenLineNumber
.9e0e	90 03		bcc $9e13			bcc 	_TLENNoCarry
.9e10	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9e13					_TLENNoCarry:
.9e13	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9e16	c9 30		cmp #$30			cmp 	#'0'
.9e18	90 04		bcc $9e1e			bcc 	_TLENExit
.9e1a	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e1c	90 c3		bcc $9de1			bcc 	TokeniseExtractLineNumber
.9e1e					_TLENExit:
.9e1e	60		rts				rts
.9e1f					_TELNTimes2:
.9e1f	0e 26 07	asl $0726			asl 	tokenLineNumber
.9e22	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9e25	60		rts				rts
.9e26					TokeniseWriteByte:
.9e26	da		phx				phx
.9e27	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9e2a	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9e2d	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9e30	fa		plx				plx
.9e31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9e32					CheckCreateVariableRecord:
.9e32	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9e34	85 36		sta $36				sta 	0+zTemp0
.9e36	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e38	85 37		sta $37				sta 	1+zTemp0
.9e3a					_CCVSearch:
.9e3a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e3c	f0 2c		beq $9e6a			beq 	_CCVFail
.9e3e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e40	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9e42	cd 03 07	cmp $0703			cmp 	identHash
.9e45	d0 16		bne $9e5d			bne 	_CCVNext
.9e47	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9e49	ae 00 07	ldx $0700			ldx 	identStart
.9e4c					_CCVCompare:
.9e4c	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9e4f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9e51	e8		inx				inx 								; advance pointers
.9e52	c8		iny				iny
.9e53	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9e54	d0 07		bne $9e5d			bne 	_CCVNext  					; didn't match go to next.
.9e56	90 f4		bcc $9e4c			bcc 	_CCVCompare 				; not finished yet.
.9e58	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9e5b	f0 41		beq $9e9e			beq 	_CCVFound 					; yes, we were successful
.9e5d					_CCVNext:
.9e5d	18		clc				clc
.9e5e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9e60	65 36		adc $36				adc 	zTemp0
.9e62	85 36		sta $36				sta 	zTemp0
.9e64	90 d4		bcc $9e3a			bcc 	_CCVSearch
.9e66	e6 37		inc $37				inc 	zTemp0+1
.9e68	80 d0		bra $9e3a			bra 	_CCVSearch
.9e6a					_CCVFail:
.9e6a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9e6c	ad 03 07	lda $0703			lda 	identHash
.9e6f	91 36		sta ($36),y			sta 	(zTemp0),y
.9e71	c8		iny				iny 								; offset 2 is the type byte
.9e72	ad 04 07	lda $0704			lda 	identTypeByte
.9e75	91 36		sta ($36),y			sta 	(zTemp0),y
.9e77	c8		iny				iny
.9e78					_CCVData:
.9e78	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9e7a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e7c	c8		iny				iny
.9e7d	c0 08		cpy #$08			cpy 	#8
.9e7f	90 f7		bcc $9e78			bcc 	_CCVData
.9e81	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9e84					_CCVCopyName:
.9e84	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9e87	91 36		sta ($36),y			sta 	(zTemp0),y
.9e89	e8		inx				inx
.9e8a	c8		iny				iny
.9e8b	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9e8e	d0 f4		bne $9e84			bne 	_CCVCopyName
.9e90	98		tya				tya 								; patch offset
.9e91	92 36		sta ($36)			sta 	(zTemp0)
.9e93	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9e95	91 36		sta ($36),y			sta 	(zTemp0),y
.9e97	88		dey				dey
.9e98	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9e9a	09 80		ora #$80			ora 	#$80
.9e9c	91 36		sta ($36),y			sta 	(zTemp0),y
.9e9e					_CCVFound:
.9e9e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9ea0	38		sec				sec
.9ea1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9ea3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9ea5	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9ea8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9eaa	20 26 9e	jsr $9e26			jsr 	TokeniseWriteByte
.9ead	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a7dc					EXTPrintCharacter:
.a7dc	48		pha				pha
.a7dd	da		phx				phx
.a7de	5a		phy				phy
.a7df	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a7e2	7a		ply				ply
.a7e3	fa		plx				plx
.a7e4	68		pla				pla
.a7e5	60		rts				rts
.a7e6					EXTInputSingleCharacter:
.a7e6	da		phx				phx
.a7e7	5a		phy				phy
.a7e8					_EISCWait:
.a7e8	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a7eb	c9 00		cmp #$00			cmp 	#0
.a7ed	f0 f9		beq $a7e8			beq 	_EISCWait
.a7ef	7a		ply				ply
.a7f0	fa		plx				plx
.a7f1	60		rts				rts
.a7f2					EXTInputLine:
.a7f2	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a7f4					_ILLoop:
.a7f4	da		phx				phx 								; read character in
.a7f5	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a7f8	fa		plx				plx
.a7f9	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a7fb	f0 12		beq $a80f			beq 	_ILBackspace
.a7fd	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a7ff	f0 15		beq $a816			beq 	_ILExit
.a801	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a803	90 ef		bcc $a7f4			bcc 	_ILLoop
.a805	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a807	f0 eb		beq $a7f4			beq 	_ILLoop
.a809	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a80c	e8		inx				inx
.a80d	80 e5		bra $a7f4			bra 	_ILLoop
.a80f					_ILBackspace:
.a80f	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a811	f0 e1		beq $a7f4			beq 	_ILLoop
.a813	ca		dex				dex 								; back one.
.a814	80 de		bra $a7f4			bra 	_ILLoop
.a816					_ILExit:
.a816	20 dc a7	jsr $a7dc			jsr 	EXTPrintCharacter
.a819	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a81c	60		rts				rts
.a81d					EXTBreakCheck:
.a81d	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a820					MemoryPeek:
.a820	b2 36		lda ($36)			lda 	(zTemp0)
.a822	60		rts				rts
.a823					MemoryPoke:
.a823	92 36		sta ($36)			sta 	(zTemp0)
.a825	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a826					MemoryDeleteLine:
.a826	20 45 a8	jsr $a845			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a829	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a82b	a8		tay				tay
.a82c					_MDDLLoop:
.a82c	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a82e	92 30		sta ($30)			sta 	(codePtr)
.a830	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a832	c5 3a		cmp $3a				cmp 	zTemp2
.a834	d0 07		bne $a83d			bne 	_MDLDLNext
.a836	a5 31		lda $31				lda 	codePtr+1
.a838	c5 3b		cmp $3b				cmp 	zTemp2+1
.a83a	d0 01		bne $a83d			bne 	_MDLDLNext
.a83c					_MDDLExit:
.a83c	60		rts				rts
.a83d					_MDLDLNext:
.a83d	e6 30		inc $30				inc 	codePtr						; next byte
.a83f	d0 eb		bne $a82c			bne 	_MDDLLoop
.a841	e6 31		inc $31				inc 	codePtr+1
.a843	80 e7		bra $a82c			bra 	_MDDLLoop
.a845					IMemoryFindEnd:
.a845	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a847	85 3a		sta $3a				sta 	0+zTemp2
.a849	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a84b	85 3b		sta $3b				sta 	1+zTemp2
.a84d					_MDLFELoop:
.a84d	b2 3a		lda ($3a)			lda 	(zTemp2)
.a84f	f0 0b		beq $a85c			beq 	_MDLFEExit
.a851	18		clc				clc
.a852	65 3a		adc $3a				adc 	zTemp2
.a854	85 3a		sta $3a				sta 	zTemp2
.a856	90 f5		bcc $a84d			bcc 	_MDLFELoop
.a858	e6 3b		inc $3b				inc 	zTemp2+1
.a85a	80 f1		bra $a84d			bra 	_MDLFELoop
.a85c					_MDLFEExit:
.a85c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a85d					MemoryInsertLine:
.a85d	08		php				php
.a85e	20 45 a8	jsr $a845			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a861	28		plp				plp
.a862	90 08		bcc $a86c			bcc 	_MDLIFound
.a864	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a866	85 30		sta $30				sta 	codePtr
.a868	a5 3b		lda $3b				lda 	zTemp2+1
.a86a	85 31		sta $31				sta 	codePtr+1
.a86c					_MDLIFound:
.a86c	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a86f	a8		tay				tay
.a870					_MDLIInsert:
.a870	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a872	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a874	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a876	c5 3a		cmp $3a				cmp 	zTemp2
.a878	d0 06		bne $a880			bne 	_MDLINext
.a87a	a5 31		lda $31				lda 	codePtr+1
.a87c	c5 3b		cmp $3b				cmp 	zTemp2+1
.a87e	f0 0a		beq $a88a			beq 	_MDLIHaveSpace
.a880					_MDLINext:
.a880	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a882	d0 02		bne $a886			bne 	_MDLINoBorrow
.a884	c6 3b		dec $3b				dec 	zTemp2+1
.a886					_MDLINoBorrow:
.a886	c6 3a		dec $3a				dec 	zTemp2
.a888	80 e6		bra $a870			bra 	_MDLIInsert
.a88a					_MDLIHaveSpace:
.a88a	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a88d	88		dey				dey 								; from offset-1 to 0
.a88e					_MDLICopy:
.a88e	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a891	91 30		sta ($30),y			sta 	(codePtr),y
.a893	88		dey				dey
.a894	10 f8		bpl $a88e			bpl 	_MDLICopy
.a896	60		rts				rts
.a897					MDLAppendLine:
.a897	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a899	85 36		sta $36				sta 	zTemp0
.a89b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a89d	85 38		sta $38				sta 	0+zTemp1
.a89f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8a1	85 39		sta $39				sta 	1+zTemp1
.a8a3	b2 38		lda ($38)			lda 	(zTemp1)
.a8a5	d0 0a		bne $a8b1			bne 	_MDLANoInitialise
.a8a7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8a9	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a8ac	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8ae	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a8b1					_MDLANoInitialise:
.a8b1	18		clc				clc
.a8b2	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a8b5	85 38		sta $38				sta 	zTemp1
.a8b7	72 36		adc ($36)			adc 	(zTemp0)
.a8b9	8d a8 08	sta $08a8			sta 	AppendPointer
.a8bc	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a8bf	85 39		sta $39				sta 	zTemp1+1
.a8c1	69 00		adc #$00			adc 	#0
.a8c3	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a8c6	a0 00		ldy #$00			ldy 	#0
.a8c8					_MDLACopy:
.a8c8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a8ca	91 38		sta ($38),y			sta 	(zTemp1),y
.a8cc	c8		iny				iny
.a8cd	98		tya				tya
.a8ce	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a8d0	d0 f6		bne $a8c8			bne 	_MDLACopy
.a8d2	a9 00		lda #$00			lda 	#0 							; end of program.
.a8d4	91 38		sta ($38),y			sta 	(zTemp1),y
.a8d6	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9eae					MemoryNew:
.9eae	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9eb0	85 30		sta $30				sta 	codePtr
.9eb2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9eb4	85 31		sta $31				sta 	codePtr+1
.9eb6	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9eb8	92 30		sta ($30)			sta 	(codePtr)
.9eba	60		rts				rts
.9ebb					MemoryInline:
.9ebb	98		tya				tya 								; put address into stack,x
.9ebc	18		clc				clc
.9ebd	65 30		adc $30				adc 	codePtr
.9ebf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ec2	a5 31		lda $31				lda 	codePtr+1
.9ec4	69 00		adc #$00			adc 	#0
.9ec6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ec9	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9ecc	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9ecf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9ed0					MemorySearch:
.9ed0	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9ed2	86 37		stx $37				stx 	zTemp0+1
.9ed4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ed6	85 30		sta $30				sta 	codePtr
.9ed8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9eda	85 31		sta $31				sta 	codePtr+1
.9edc					_MTAXLoop:
.9edc	b2 30		lda ($30)			lda 	(codePtr)
.9ede	18		clc				clc
.9edf	f0 21		beq $9f02			beq 	_MTAXExit 					; reached end, exit with CC.
.9ee1	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ee3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee5	38		sec				sec
.9ee6	e5 36		sbc $36				sbc 	zTemp0
.9ee8	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9eea	c8		iny				iny 								; do the MSB
.9eeb	b1 30		lda ($30),y			lda 	(codePtr),y
.9eed	e5 37		sbc $37				sbc 	zTemp0+1
.9eef	05 38		ora $38				ora 	zTemp1
.9ef1	f0 0f		beq $9f02			beq 	_MTAXExit	 				; found
.9ef3	b0 0d		bcs $9f02			bcs 	_MTAXExit 					; current < required exit
.9ef5	18		clc				clc
.9ef6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ef8	65 30		adc $30				adc 	codePtr
.9efa	85 30		sta $30				sta 	codePtr
.9efc	90 02		bcc $9f00			bcc 	_CREExit
.9efe	e6 31		inc $31				inc 	codePtr+1
.9f00					_CREExit:
.9f00	80 da		bra $9edc			bra 	_MTAXLoop
.9f02					_MTAXExit:
.9f02	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
