
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Dec 30 15:57:49 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						AUTORUN=1
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVE = 26

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 8f 80	jmp $808f	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 19 bc	jsr $bc19		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 1c bc	jsr $bc1c		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 d8 bb	jsr $bbd8		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 28 bc	jsr $bc28		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLReadByte:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 5e bc	jsr $bc5e		jsr	Export_KNLReadByte
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLCloseFile:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 41 bc	jsr $bc41		jsr	Export_KNLCloseFile
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						GXGraphicDraw:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						SNDCommand:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 4b bb	jsr $bb4b		jsr	Export_SNDCommand
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						SNDUpdate:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 7e bb	jsr $bb7e		jsr	Export_SNDUpdate
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						TKListConvertLine:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 fd b4	jsr $b4fd		jsr	Export_TKListConvertLine
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						TKTokeniseLine:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 91 b7	jsr $b791		jsr	Export_TKTokeniseLine
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.808f		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8091		9a		txs				txs
.8092		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8094		09 80		ora #$80			ora 	#$80
.8096		85 00		sta $00				sta 	0
.8098		20 8c a6	jsr $a68c			jsr		UpdateFont 					; update font if between FPGA updates.
.809b		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.809e		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80a0		aa		tax				tax
.80a1		a8		tay				tay
.80a2		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.80a5		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80a7		20 67 80	jsr $8067			jsr 	SNDCommand
.80aa		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80ac		a9 ba		lda #$ba			lda 	#Prompt & $FF
.80ae		20 ce 8f	jsr $8fce			jsr 	PrintStringXA
.80b1		20 56 8a	jsr $8a56			jsr 	NewProgram 					; erase current program
.80b4		20 46 83	jsr $8346			jsr 	BackloadProgram
.80b7		4c d4 8b	jmp $8bd4			jmp 	CommandRUN
.80ba						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80ba		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 30-Dec-22. "
>80c2		20 62 75 69 6c 74 20 33 30 2d 44 65 63 2d 32 32
>80d2		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80d4		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80d7						AssembleGroup1:
.80d7		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80d9		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80dc		80 02		bra $80e0			bra 	AsmGroup12
.80de						AssembleGroup2:
.80de		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80e0						AsmGroup12:
.80e0		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80e3		68		pla				pla 								; pop the return address to access the information following.
.80e4		fa		plx				plx
.80e5		20 6c 81	jsr $816c			jsr 	AccessParameters 			; get opcode and save as base
.80e8		8d 24 04	sta $0424			sta 	BaseOpcode
.80eb		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80ee		d0 08		bne $80f8			bne 	_AG12HaveMask
.80f0		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80f2		20 74 81	jsr $8174			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80f5		8d 25 04	sta $0425			sta 	ModeMask
.80f8						_AG12HaveMask:
.80f8		20 a8 82	jsr $82a8			jsr 	TypeAndCalculateOperand 	; get zero page type
.80fb		da		phx				phx 								; save found address mode
.80fc		20 d8 81	jsr $81d8			jsr 	AssembleModeX
.80ff		fa		plx				plx  								; restore address mode
.8100		b0 0b		bcs $810d			bcs 	_AG12Exit
.8102		20 0e 81	jsr $810e			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8105		20 d8 81	jsr $81d8			jsr 	AssembleModeX
.8108		b0 03		bcs $810d			bcs 	_AG12Exit
.810a		4c 3e a0	jmp $a03e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.810d						_AG12Exit:
.810d		60		rts				rts
.810e						PromoteToAbsolute:
.810e		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8110		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8112		f0 19		beq $812d			beq 	_PTADo
.8114		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8116		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8118		f0 13		beq $812d			beq 	_PTADo
.811a		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.811c		e0 80		cpx #$80			cpx 	#AM_ZEROY
.811e		f0 0d		beq $812d			beq 	_PTADo
.8120		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8122		e0 d1		cpx #$d1			cpx 	#AM_IND
.8124		f0 07		beq $812d			beq 	_PTADo
.8126		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8128		e0 c0		cpx #$c0			cpx 	#AM_INDX
.812a		f0 01		beq $812d			beq 	_PTADo
.812c		60		rts				rts
.812d						_PTADo:
.812d		aa		tax				tax
.812e		60		rts				rts
.812f						AssembleGroup3:
.812f		68		pla				pla 								; get parameters, which is just the opcode.
.8130		fa		plx				plx
.8131		20 6c 81	jsr $816c			jsr 	AccessParameters 			; get and output opcode
.8134		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8137		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get a 16 bit operand
.813a		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.813c		38		sec				sec
.813d		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8140		48		pha				pha 								; LSB in A
.8141		a5 60		lda $60				lda 	NSMantissa1
.8143		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8146		aa		tax				tax 								; MSB in X
.8147		68		pla				pla
.8148		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8149		69 7f		adc #$7f			adc 	#$7F
.814b		90 01		bcc $814e			bcc 	_AG3NoCarry
.814d		e8		inx				inx
.814e						_AG3NoCarry:
.814e		38		sec				sec 								; fix back and write out anyways.
.814f		e9 80		sbc #$80			sbc 	#$80
.8151		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8154		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8156		f0 0a		beq $8162			beq 	_AG3Exit
.8158		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.815b		29 01		and #$01			and 	#1
.815d		f0 03		beq $8162			beq 	_AG3Exit
.815f		4c 43 a0	jmp $a043			jmp 	RangeError 					; no, branch is out of range
.8162						_AG3Exit:
.8162		60		rts				rts
.8163						AssembleGroup4:
.8163		68		pla				pla 								; pop address
.8164		fa		plx				plx
.8165		20 6c 81	jsr $816c			jsr 	AccessParameters 			; access and get first
.8168		20 84 81	jsr $8184			jsr 	AssemblerWriteByte 			; output it.
.816b		60		rts				rts
.816c						AccessParameters:
.816c		8d 21 04	sta $0421			sta 	ParamStart
.816f		8e 22 04	stx $0422			stx 	ParamStart+1
.8172		a9 01		lda #$01			lda 	#1
.8174						GetParameter:
.8174		5a		phy				phy
.8175		a8		tay				tay
.8176		ad 21 04	lda $0421			lda 	ParamStart
.8179		85 36		sta $36				sta 	zTemp0
.817b		ad 22 04	lda $0422			lda 	ParamStart+1
.817e		85 37		sta $37				sta 	zTemp0+1
.8180		b1 36		lda ($36),y			lda 	(zTemp0),y
.8182		7a		ply				ply
.8183		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8184						AssemblerWriteByte:
.8184		48		pha			pha
.8185		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8188		29 02		and #$02		and 	#2
.818a		f0 1b		beq $81a7		beq 	_AWBNoPrint
.818c		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.818f		20 c2 81	jsr $81c2		jsr 	PrintHex
.8192		ad 1e 04	lda $041e		lda		AssemblerAddress
.8195		20 c2 81	jsr $81c2		jsr 	PrintHex
.8198		a9 20		lda #$20		lda 	#' '
.819a		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.819d		68		pla			pla 									; print byte
.819e		48		pha			pha
.819f		20 c2 81	jsr $81c2		jsr 	PrintHex
.81a2		a9 0d		lda #$0d		lda 	#13
.81a4		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81a7						_AWBNoPrint:
.81a7		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81aa		85 36		sta $36			sta 	zTemp0
.81ac		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81af		f0 0e		beq $81bf		beq 	_AWBRange
.81b1		85 37		sta $37			sta 	zTemp0+1
.81b3		68		pla			pla 									; write byte out
.81b4		92 36		sta ($36)		sta 	(zTemp0)
.81b6		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81b9		d0 03		bne $81be		bne 	_AWBNoCarry
.81bb		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81be						_AWBNoCarry:
.81be		60		rts			rts
.81bf						_AWBRange:
.81bf		4c 43 a0	jmp $a043		jmp 	RangeError
.81c2						PrintHex:
.81c2		48		pha				pha
.81c3		4a		lsr a				lsr 	a
.81c4		4a		lsr a				lsr 	a
.81c5		4a		lsr a				lsr 	a
.81c6		4a		lsr a				lsr 	a
.81c7		20 cb 81	jsr $81cb			jsr 	_PrintNibble
.81ca		68		pla				pla
.81cb						_PrintNibble:
.81cb		29 0f		and #$0f			and 	#15
.81cd		c9 0a		cmp #$0a			cmp 	#10
.81cf		90 02		bcc $81d3			bcc 	_NoShift
.81d1		69 06		adc #$06			adc 	#6
.81d3						_NoShift:
.81d3		69 30		adc #$30			adc 	#48
.81d5		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81d8						AssembleModeX:
.81d8		5a		phy				phy
.81d9		ad 23 04	lda $0423			lda 	IsGroup1
.81dc		f0 17		beq $81f5			beq 	_AMXGroup2
.81de		8a		txa				txa 							; is it in group # 1
.81df		29 40		and #$40			and 	#AM_ISG1
.81e1		f0 4d		beq $8230			beq 	_AMXFail 				; no, give up.
.81e3		8a		txa				txa 							; get back.
.81e4		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81e6		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81e8		d0 22		bne $820c			bne 	_AMXHaveInfo
.81ea		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81ed		c9 81		cmp #$81			cmp 	#$81
.81ef		f0 3f		beq $8230			beq 	_AMXFail
.81f1		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81f3		80 17		bra $820c			bra 	_AMXHaveInfo 			; odd design decision there.
.81f5						_AMXGroup2:
.81f5		8a		txa				txa 							; is it in group 2 ?
.81f6		29 20		and #$20			and 	#AM_ISG2
.81f8		f0 36		beq $8230			beq 	_AMXFail 				; no, give up.
.81fa		8a		txa				txa 							; get the offset into Y
.81fb		29 1f		and #$1f			and 	#$1F
.81fd		4a		lsr a				lsr 	a 						; make it 0-7.
.81fe		4a		lsr a				lsr  	a
.81ff		a8		tay				tay
.8200		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8203						_AMXCheckOkay:
.8203		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8204		88		dey				dey
.8205		10 fc		bpl $8203			bpl 	_AMXCheckOkay
.8207		90 27		bcc $8230			bcc 	_AMXFail 				; not allowed.
.8209		8a		txa				txa  							; get mask back
.820a		29 1f		and #$1f			and 	#$1F
.820c						_AMXHaveInfo:
.820c		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.820e		10 04		bpl $8214			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8210		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8212		d0 1c		bne $8230			bne 	_AMXFail
.8214						_AMXAnySize:
.8214		18		clc				clc 							; add offset to the base opcode
.8215		6d 24 04	adc $0424			adc 	BaseOpcode
.8218						_AMXOutputCode:
.8218		20 84 81	jsr $8184			jsr 	AssemblerWriteByte 		; write the opcode out.
.821b		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.821d		f0 0e		beq $822d			beq 	_AMXExit
.821f		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8221		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8224		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8226		30 05		bmi $822d			bmi 	_AMXExit
.8228		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.822a		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.822d						_AMXExit:
.822d		7a		ply				ply
.822e		38		sec				sec
.822f		60		rts				rts
.8230						_AMXFail:
.8230		a0 00		ldy #$00			ldy 	#0
.8232						_AMXCheckOddities:
.8232		8a		txa				txa
.8233		d9 5a 82	cmp $825a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8236		d0 15		bne $824d			bne 	_AMXCONext
.8238		b9 58 82	lda $8258,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.823b		cd 24 04	cmp $0424			cmp 	BaseOpcode
.823e		d0 0d		bne $824d			bne 	_AMXCONext
.8240		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8242		10 04		bpl $8248			bpl 	_AMXCONotZero
.8244		a5 60		lda $60				lda 	NSMantissa1
.8246		d0 05		bne $824d			bne 	_AMXCONext
.8248						_AMXCONotZero:
.8248		b9 59 82	lda $8259,y			lda 	ExtraOpcode+1,y 		; get new opcode
.824b		80 cb		bra $8218			bra 	_AMXOutputCode 			; and assemble it
.824d						_AMXCONext:
.824d		c8		iny				iny
.824e		c8		iny				iny
.824f		c8		iny				iny
.8250		b9 58 82	lda $8258,y			lda 	ExtraOpcode+0,y 		; end of table
.8253		d0 dd		bne $8232			bne 	_AMXCheckOddities
.8255						_AMXCOFail:
.8255		7a		ply				ply
.8256		18		clc				clc
.8257		60		rts				rts
.8258						ExtraOpcode:
>8258		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>825b		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>825e		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8261		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8264		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8267		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>826a		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>826d		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8270		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8273		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8276		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8277						LabelHere:
.8277		c8		iny				iny 								; skip .
.8278		a2 00		ldx #$00			ldx 	#0 							; get a term
.827a		20 c3 98	jsr $98c3			jsr 	EvaluateTerm
.827d		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.827f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8281		d0 22		bne $82a5			bne 	_ALType 					; otherwise typing error
.8283		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8285		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8287		b5 60		lda $60,x			lda 	NSMantissa1,x
.8289		85 37		sta $37				sta 	zTemp0+1
.828b		5a		phy				phy 								; copy address in (64k)
.828c		a0 01		ldy #$01			ldy 	#1
.828e		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8291		92 36		sta ($36)			sta 	(zTemp0)
.8293		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8296		91 36		sta ($36),y			sta 	(zTemp0),y
.8298		c8		iny				iny
.8299		a9 00		lda #$00			lda 	#0 							; zero the rest.
.829b		91 36		sta ($36),y			sta 	(zTemp0),y
.829d		c8		iny				iny
.829e		91 36		sta ($36),y			sta 	(zTemp0),y
.82a0		c8		iny				iny
.82a1		91 36		sta ($36),y			sta 	(zTemp0),y
.82a3		7a		ply				ply
.82a4		60		rts				rts
.82a5						_ALType:
.82a5		4c 48 a0	jmp $a048			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82a8						TypeAndCalculateOperand:
.82a8		b1 30		lda ($30),y			lda 	(codePtr),y
.82aa		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82ac		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82ae		f0 5b		beq $830b			beq 	_TACOExit
.82b0		c9 80		cmp #$80			cmp 	#KWC_EOL
.82b2		f0 57		beq $830b			beq 	_TACOExit
.82b4		c8		iny				iny
.82b5		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82b7		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82b9		f0 51		beq $830c			beq 	CalculateOperand
.82bb		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82bd		f0 1f		beq $82de			beq 	_TACOIndirect
.82bf		88		dey				dey 								; undo get of first character
.82c0		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get operand
.82c3		b1 30		lda ($30),y			lda 	(codePtr),y
.82c5		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82c7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82c9		d0 40		bne $830b			bne 	_TACOExit
.82cb		c8		iny				iny
.82cc		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82cf		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82d1		c9 58		cmp #$58			cmp 	#'X'
.82d3		f0 36		beq $830b			beq 	_TACOExit
.82d5		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82d7		c9 59		cmp #$59			cmp 	#'Y'
.82d9		f0 30		beq $830b			beq 	_TACOExit
.82db						_TACOSyntax:
.82db		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.82de						_TACOIndirect:
.82de		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get the operand
.82e1		b1 30		lda ($30),y			lda 	(codePtr),y
.82e3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82e5		f0 17		beq $82fe			beq 	_TACOIndX
.82e7		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82ea		b1 30		lda ($30),y			lda 	(codePtr),y
.82ec		a2 d1		ldx #$d1			ldx 	#AM_IND
.82ee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82f0		d0 19		bne $830b			bne 	_TACOExit
.82f2		c8		iny				iny
.82f3		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82f6		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82f8		d0 e1		bne $82db			bne 	_TACOSyntax
.82fa		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82fc		80 0d		bra $830b			bra 	_TACOExit
.82fe						_TACOIndX:
.82fe		c8		iny				iny
.82ff		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8302		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8304		d0 d5		bne $82db			bne 	_TACOSyntax
.8306		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket			; check )
.8309		a2 c0		ldx #$c0			ldx 	#AM_INDX
.830b						_TACOExit:
.830b		60		rts				rts
.830c						CalculateOperand:
.830c		48		pha				pha
.830d		da		phx				phx
.830e		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8310		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.8313		fa		plx				plx
.8314		68		pla				pla
.8315		60		rts				rts
.8316						TACOCheckXY:
.8316		b1 30		lda ($30),y			lda 	(codePtr),y
.8318		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.831a		c9 40		cmp #$40			cmp 	#$40
.831c		d0 21		bne $833f			bne 	_TCXYFail
.831e		b1 30		lda ($30),y			lda 	(codePtr),y
.8320		18		clc				clc
.8321		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8323		85 37		sta $37				sta 	zTemp0+1
.8325		c8		iny				iny
.8326		b1 30		lda ($30),y			lda 	(codePtr),y
.8328		c8		iny				iny
.8329		85 36		sta $36				sta 	zTemp0
.832b		5a		phy				phy 								; save position
.832c		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.832e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8330		d0 0c		bne $833e			bne 	_TCXYPopFail
.8332		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8334		b1 36		lda ($36),y			lda 	(zTemp0),y
.8336		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8338		f0 08		beq $8342			beq 	_TCXYFound
.833a		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.833c		f0 04		beq $8342			beq 	_TCXYFound
.833e						_TCXYPopFail:
.833e		7a		ply				ply
.833f						_TCXYFail:
.833f		a9 00		lda #$00			lda 	#0
.8341		60		rts				rts
.8342						_TCXYFound:
.8342		7a		ply				ply 								; restore position
.8343		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8345		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8346						BackloadProgram:
.8346		20 56 8a	jsr $8a56			jsr 	NewProgram 					; does the actual NEW.
.8349		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.834b		a9 9d		lda #$9d			lda 	#_BLLoad & $FF
.834d		20 ce 8f	jsr $8fce			jsr 	PrintStringXA
.8350		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8352		8d 59 06	sta $0659			sta 	BackLoadPage
.8355		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8357		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.835a		a9 60		lda #$60			lda 	#(($6000) >> 8)
.835c		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.835f		a9 ff		lda #$ff			lda 	#$FF
.8361		8d fa ff	sta $fffa			sta 	$FFFA
.8364						_BPLoop:
.8364		a2 ff		ldx #$ff			ldx 	#$FF
.8366		20 b2 83	jsr $83b2			jsr 	BLReadByte 					; read a byte
.8369		c9 00		cmp #$00			cmp 	#0
.836b		f0 29		beq $8396			beq 	_BPExit 					; if 0 exit
.836d		30 27		bmi $8396			bmi 	_BPExit 					; if -ve exit
.836f						_BPCopy:
.836f		e8		inx				inx  								; copy byte into the lineBuffer
.8370		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8373		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8376		20 b2 83	jsr $83b2			jsr 	BLReadByte 					; read next byte
.8379		30 0a		bmi $8385			bmi 	_BPEndLine 					; -ve = EOL
.837b		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.837d		d0 02		bne $8381			bne 	_BPNotTab
.837f		a9 20		lda #$20			lda 	#' '
.8381						_BPNotTab:
.8381		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8383		b0 ea		bcs $836f			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8385						_BPEndLine:
.8385		20 85 80	jsr $8085			jsr 	TKTokeniseLine 				; tokenise the line.
.8388		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.838b		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.838e		f0 d4		beq $8364			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8390		ea		nop				nop
.8391		20 e0 83	jsr $83e0			jsr 	EditProgramCode
.8394		80 ce		bra $8364			bra 	_BPLoop
.8396						_BPExit:
.8396		9c fa ff	stz $fffa			stz 	$FFFA
.8399		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear variables etc.
.839c		60		rts				rts
.839d						_BLLoad:
>839d		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83a5		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83b2						BLReadByte:
.83b2		da		phx				phx
.83b3		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83b5		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83b8		85 0b		sta $0b				sta 	8+3
.83ba		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83bd		85 36		sta $36				sta 	zTemp0
.83bf		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83c2		85 37		sta $37				sta 	zTemp0+1
.83c4		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83c6		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83c9		d0 0f		bne $83da			bne 	_BLNoCarry
.83cb		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ce		10 0a		bpl $83da			bpl 	_BLNoCarry 					; need a new page
.83d0		48		pha				pha
.83d1		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83d3		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83d6		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83d9		68		pla				pla
.83da						_BLNoCarry:
.83da		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83dc		fa		plx				plx
.83dd		c9 00		cmp #$00			cmp 	#0
.83df		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83e0						EditProgramCode:
.83e0		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.83e3		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.83e6		20 59 a6	jsr $a659			jsr 	MemorySearch
.83e9		90 05		bcc $83f0			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83eb		d0 03		bne $83f0			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83ed		20 7e a5	jsr $a57e			jsr 	MemoryDeleteLine 			; delete the line
.83f0						_EPCNoDelete:
.83f0		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.83f3		c9 80		cmp #$80			cmp 	#KWC_EOL
.83f5		f0 0d		beq $8404			beq 	_EPCNoInsert
.83f7		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83fa		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83fd		20 59 a6	jsr $a659			jsr 	MemorySearch
.8400		18		clc				clc 								; insert at this point.
.8401		20 b5 a5	jsr $a5b5			jsr 	MemoryInsertLine 			; insert the line
.8404						_EPCNoInsert:
.8404		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8405						WarmStart:
.8405		a2 ff		ldx #$ff			ldx 	#$FF
.8407		9a		txs				txs
.8408		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.840a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.840d		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8410		20 85 80	jsr $8085			jsr 	TKTokeniseLine 				; tokenise the line
.8413		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8416		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8419		d0 17		bne $8432			bne 	_WSEditCode 				; if so,edit code.
.841b		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.841e		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8420		85 30		sta $30				sta 	codePtr
.8422		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8424		85 31		sta $31				sta 	codePtr+1
.8426		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.8429		c9 80		cmp #$80			cmp 	#KWC_EOL
.842b		f0 d8		beq $8405			beq 	WarmStart
.842d		20 e6 8b	jsr $8be6			jsr 	RUNCodePointerLine 			; execute that line.
.8430		80 d3		bra $8405			bra 	WarmStart
.8432						_WSEditCode:
.8432		20 e0 83	jsr $83e0			jsr 	EditProgramCode 			; edit the program code
.8435		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear all variables etc.
.8438		80 cb		bra $8405			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.843a						AssembleCommand:
.843a		a2 00		ldx #$00			ldx 	#0
.843c		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; start address
.843f		a5 58		lda $58				lda 	NSMantissa0
.8441		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8444		a5 60		lda $60				lda 	NSMantissa1
.8446		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8449		20 64 8f	jsr $8f64			jsr 	CheckComma
.844c		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; options 0-3
.844f		a5 58		lda $58				lda 	NSMantissa0
.8451		8d 20 04	sta $0420			sta 	AssemblerControl
.8454		60		rts				rts
.8455		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8456						AssertCommand:
.8456		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8458		20 2d 9e	jsr $9e2d			jsr 	EvaluateInteger 			; the assert test
.845b		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; exit if result is non zero.
.845e		d0 05		bne $8465			bne 	_ACExit
.8460		a9 0a		lda #$0a		lda	#10
.8462		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.8465						_ACExit:
.8465		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8466						CallCommand:
.8466		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8468		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.846b						_CCClear
.846b		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.846c		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; these are optional sequentially.
.846f		e0 04		cpx #$04			cpx 	#4
.8471		d0 f8		bne $846b			bne 	_CCClear
.8473		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8475						_CCCParam:
.8475		b1 30		lda ($30),y			lda 	(codePtr),y
.8477		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8479		d0 09		bne $8484			bne 	_CCCRun6502
.847b		c8		iny				iny 								; skip comma
.847c		e8		inx				inx	 								; next level
.847d		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8480		e0 03		cpx #$03			cpx 	#3
.8482		90 f1		bcc $8475			bcc 	_CCCParam 					; done all 3 ?
.8484						_CCCRun6502:
.8484		5a		phy				phy 								; save position
.8485		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8487		85 37		sta $37				sta 	zTemp0+1
.8489		a5 58		lda $58				lda 	NSMantissa0
.848b		85 36		sta $36				sta 	zTemp0
.848d		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.848f		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8491		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8493		20 98 84	jsr $8498			jsr 	_CCCZTemp0 					; call zTemp0
.8496		7a		ply				ply 								; restore position and exit
.8497		60		rts				rts
.8498						_CCCZTemp0:
.8498		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.849b						ClearCommand:
.849b		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.849d		85 36		sta $36				sta 	0+zTemp0
.849f		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84a1		85 37		sta $37				sta 	1+zTemp0
.84a3						_ClearZeroLoop:
.84a3		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84a5		f0 24		beq $84cb			beq 	_ClearZeroEnd
.84a7		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84a9		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84ab						_ClearOneVariable:
.84ab		91 36		sta ($36),y			sta 	(zTemp0),y
.84ad		c8		iny				iny
.84ae		c0 08		cpy #$08			cpy 	#8
.84b0		d0 f9		bne $84ab			bne 	_ClearOneVariable
.84b2		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84b4		b1 36		lda ($36),y			lda 	(zTemp0),y
.84b6		c9 18		cmp #$18			cmp 	#NSTProcedure
.84b8		d0 04		bne $84be			bne 	_ClearNotProcedure
.84ba		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84bc		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84be						_ClearNotProcedure:
.84be		18		clc				clc 								; go to the next variable
.84bf		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84c1		65 36		adc $36				adc 	zTemp0
.84c3		85 36		sta $36				sta 	zTemp0
.84c5		90 dc		bcc $84a3			bcc 	_ClearZeroLoop
.84c7		e6 37		inc $37				inc 	zTemp0+1
.84c9		80 d8		bra $84a3			bra 	_ClearZeroLoop
.84cb						_ClearZeroEnd:
.84cb		18		clc				clc
.84cc		a5 36		lda $36				lda 	zTemp0
.84ce		69 01		adc #$01			adc 	#1
.84d0		8d 0c 04	sta $040c			sta 	lowMemPtr
.84d3		a5 37		lda $37				lda 	zTemp0+1
.84d5		69 00		adc #$00			adc 	#0
.84d7		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84da		20 13 b0	jsr $b013			jsr 	StackReset
.84dd		20 79 b0	jsr $b079			jsr 	StringSystemInitialise
.84e0		20 65 8e	jsr $8e65			jsr 	ProcedureScan
.84e3		20 95 8b	jsr $8b95			jsr 	Command_Restore
.84e6		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84e9		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84ec		9c 20 04	stz $0420			stz 	AssemblerControl
.84ef		20 af 9a	jsr $9aaf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84f3						ClearScreen:
.84f3		5a		phy				phy
.84f4		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84f6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84f9		7a		ply				ply
.84fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84fb						Command_Data:
.84fb		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84fd		a2 80		ldx #$80			ldx 	#KWC_EOL
.84ff		20 b7 8e	jsr $8eb7			jsr 	ScanForward
.8502		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8503						DimCommand:
.8503		b1 30		lda ($30),y			lda 	(codePtr),y
.8505		29 c0		and #$c0			and 	#$C0
.8507		c9 40		cmp #$40			cmp 	#$40
.8509		d0 7a		bne $8585			bne 	_DCSyntax 				; n o, error.
.850b		b1 30		lda ($30),y			lda 	(codePtr),y
.850d		18		clc				clc
.850e		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8510		85 3f		sta $3f				sta 	zaTemp+1
.8512		c8		iny				iny
.8513		b1 30		lda ($30),y			lda 	(codePtr),y
.8515		c8		iny				iny
.8516		85 3e		sta $3e				sta 	zaTemp
.8518		5a		phy				phy
.8519		a0 02		ldy #$02			ldy 	#2 						; read type byte
.851b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.851d		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.851f		c9 18		cmp #$18			cmp 	#NSTProcedure
.8521		f0 62		beq $8585			beq 	_DCSyntax
.8523		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8525		29 04		and #$04			and 	#NSBIsArray
.8527		f0 64		beq $858d			beq 	_DCType
.8529		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.852b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.852d		d0 59		bne $8588			bne 	_DCRedefine
.852f		7a		ply				ply
.8530		20 90 85	jsr $8590			jsr 	_DCGetSize 				; get array size, check it.
.8533		5a		phy				phy
.8534		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8536		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8538		7a		ply				ply 							; is there a second (e.g. ,x)
.8539		b1 30		lda ($30),y			lda 	(codePtr),y
.853b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.853d		d0 0a		bne $8549			bne 	_DCOneDimension
.853f		c8		iny				iny 							; skip comma
.8540		20 90 85	jsr $8590			jsr 	_DCGetSize 				; get 2nd array size
.8543		5a		phy				phy
.8544		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8546		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8548		7a		ply				ply
.8549						_DCOneDimension:
.8549		5a		phy				phy 							; save position
.854a		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.854c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854e		aa		tax				tax
.854f		c8		iny				iny
.8550		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8552		e8		inx				inx 							; bump them.
.8553		1a		inc a				inc 	a
.8554		20 6b 9e	jsr $9e6b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8557		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8559		29 e0		and #$e0			and 	#$E0
.855b		d0 23		bne $8580			bne 	_DCSize
.855d		a0 02		ldy #$02			ldy 	#2 						; get base type
.855f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8561		20 9e 85	jsr $859e			jsr 	ScaleByBaseType 		; scale by base type
.8564		a5 36		lda $36				lda 	zTemp0
.8566		a6 37		ldx $37				ldx 	zTemp0+1
.8568		20 71 9a	jsr $9a71			jsr 	AllocateXABytes 		; allocate memory
.856b		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.856d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.856f		c8		iny				iny
.8570		8a		txa				txa
.8571		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8573		7a		ply				ply 							; get position back
.8574		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 		; check )
.8577		b1 30		lda ($30),y			lda 	(codePtr),y
.8579		c8		iny				iny 							; consume in case
.857a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.857c		f0 85		beq $8503			beq 	DimCommand
.857e		88		dey				dey 							; undo consume
.857f		60		rts				rts
.8580						_DCSize:
.8580		a9 16		lda #$16		lda	#22
.8582		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.8585						_DCSyntax:
.8585		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.8588						_DCRedefine:
.8588		a9 15		lda #$15		lda	#21
.858a		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.858d						_DCType:
.858d		4c 48 a0	jmp $a048			jmp 	TypeError
.8590						_DCGetSize:
.8590		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8592		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 	; get array dimension
.8595		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8597		f0 e7		beq $8580			beq 	_DCSize
.8599		c9 fe		cmp #$fe			cmp 	#254
.859b		f0 e3		beq $8580			beq 	_DCSize
.859d		60		rts				rts
.859e						ScaleByBaseType:
.859e		29 10		and #$10			and 	#NSBIsString 			; is it string
.85a0		d0 19		bne $85bb			bne 	_SBBTString
.85a2		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85a4		48		pha				pha
.85a5		a5 36		lda $36				lda 	zTemp0
.85a7		48		pha				pha
.85a8		06 36		asl $36				asl 	zTemp0 					; x 2
.85aa		26 37		rol $37				rol 	zTemp0+1
.85ac		06 36		asl $36				asl 	zTemp0 					; x 4
.85ae		26 37		rol $37				rol 	zTemp0+1
.85b0		68		pla				pla 							; add stacked value = x 5
.85b1		65 36		adc $36				adc 	zTemp0
.85b3		85 36		sta $36				sta 	zTemp0
.85b5		68		pla				pla
.85b6		65 37		adc $37				adc 	zTemp0+1
.85b8		85 37		sta $37				sta 	zTemp0+1
.85ba		60		rts				rts
.85bb						_SBBTString:
.85bb		06 36		asl $36				asl 	zTemp0
.85bd		26 37		rol $37				rol 	zTemp0+1
.85bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85c0						EndCommand:
.85c0		4c 05 84	jmp $8405			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85c3						ForCommand:
.85c3		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85c5		20 ad af	jsr $afad			jsr 	StackOpen
.85c8		a2 00		ldx #$00			ldx 	#0
.85ca		20 c3 98	jsr $98c3			jsr 	EvaluateTerm
.85cd		b5 50		lda $50,x			lda 	NSStatus,x
.85cf		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85d1		d0 47		bne $861a			bne		_FCError
.85d3		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85d5		20 6c 8f	jsr $8f6c			jsr 	CheckNextA
.85d8		e8		inx				inx
.85d9		20 2d 9e	jsr $9e2d			jsr 	EvaluateInteger 			; <from> in +1
.85dc		b1 30		lda ($30),y			lda 	(codePtr),y
.85de		c8		iny				iny 								; consume it
.85df		48		pha				pha 								; save on stack for later
.85e0		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.85e2		f0 04		beq $85e8			beq 	_FCNoSyntax
.85e4		c9 d8		cmp #$d8			cmp 	#KWD_TO
.85e6		d0 35		bne $861d			bne 	_FCSyntaxError
.85e8						_FCNoSyntax:
.85e8		e8		inx				inx
.85e9		20 2d 9e	jsr $9e2d			jsr 	EvaluateInteger
.85ec		20 f2 af	jsr $aff2			jsr 	STKSaveCodePosition 		; save loop back position
.85ef		68		pla				pla 								; restore DOWNTO or TO
.85f0		5a		phy				phy 								; save Y on the stack
.85f1		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85f3		f0 02		beq $85f7			beq 	_FCNotDownTo
.85f5		a9 02		lda #$02			lda 	#2
.85f7						_FCNotDownTo:
.85f7		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85f8		a0 10		ldy #$10			ldy 	#16
.85fa		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85fc		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.85fe		a5 58		lda $58				lda 	NSMantissa0
.8600		91 34		sta ($34),y			sta 	(basicStack),y
.8602		a5 60		lda $60				lda 	NSMantissa1
.8604		c8		iny				iny
.8605		91 34		sta ($34),y			sta 	(basicStack),y
.8607		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8609		a2 01		ldx #$01			ldx 	#1
.860b		20 20 86	jsr $8620			jsr 	FCIntegerToStack
.860e		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8610		a2 02		ldx #$02			ldx 	#2
.8612		20 20 86	jsr $8620			jsr 	FCIntegerToStack
.8615		20 3b 86	jsr $863b			jsr 	CopyIndexToReference
.8618		7a		ply				ply 								; restore position
.8619		60		rts				rts
.861a						_FCError:
.861a		4c 48 a0	jmp $a048			jmp 	TypeError
.861d						_FCSyntaxError:
.861d		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.8620						FCIntegerToStack:
.8620		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8622		10 03		bpl $8627			bpl	 	_FCNotNegative
.8624		20 89 9e	jsr $9e89			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8627						_FCNotNegative:
.8627		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8629		91 34		sta ($34),y			sta 	(basicStack),y
.862b		c8		iny				iny
.862c		b5 60		lda $60,x			lda 	NSMantissa1,x
.862e		91 34		sta ($34),y			sta 	(basicStack),y
.8630		c8		iny				iny
.8631		b5 68		lda $68,x			lda 	NSMantissa2,x
.8633		91 34		sta ($34),y			sta 	(basicStack),y
.8635		c8		iny				iny
.8636		b5 70		lda $70,x			lda 	NSMantissa3,x
.8638		91 34		sta ($34),y			sta 	(basicStack),y
.863a		60		rts				rts
.863b						CopyIndexToReference:
.863b		5a		phy				phy
.863c		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.863e		38		sec				sec 								; (because we copy from offset 8)
.863f		b1 34		lda ($34),y			lda 	(basicStack),y
.8641		e9 08		sbc #$08			sbc 	#8
.8643		85 36		sta $36				sta 	zTemp0
.8645		c8		iny				iny
.8646		b1 34		lda ($34),y			lda 	(basicStack),y
.8648		e9 00		sbc #$00			sbc 	#0
.864a		85 37		sta $37				sta 	zTemp0+1
.864c		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.864e		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8650		b1 34		lda ($34),y			lda 	(basicStack),y
.8652		0a		asl a				asl 	a 							; into carry
.8653		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8655		90 14		bcc $866b			bcc 	_CITRNormal
.8657		38		sec				sec
.8658						_CITRNegative:
.8658		a9 00		lda #$00			lda 	#0
.865a		f1 34		sbc ($34),y			sbc 	(basicStack),y
.865c		91 36		sta ($36),y			sta 	(zTemp0),y
.865e		c8		iny				iny
.865f		ca		dex				dex
.8660		d0 f6		bne $8658			bne 	_CITRNegative
.8662		88		dey				dey 								; look at MSB of mantissa
.8663		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8665		09 80		ora #$80			ora 	#$80
.8667		91 36		sta ($36),y			sta 	(zTemp0),y
.8669		7a		ply				ply
.866a		60		rts				rts
.866b						_CITRNormal:
.866b		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.866d		91 36		sta ($36),y			sta 	(zTemp0),y
.866f		c8		iny				iny
.8670		ca		dex				dex
.8671		d0 f8		bne $866b			bne 	_CITRNormal
.8673		7a		ply				ply 								; and exit.
.8674		60		rts				rts
.8675						NextCommand:
.8675		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8677		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8679		20 da af	jsr $afda			jsr 	StackCheckFrame
.867c		5a		phy				phy
.867d		a0 10		ldy #$10			ldy 	#16 						; get the step count
.867f		b1 34		lda ($34),y			lda 	(basicStack),y
.8681		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8683		30 02		bmi $8687			bmi 	_NCStepNeg
.8685		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8687						_NCStepNeg:
.8687		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8689		a2 04		ldx #$04			ldx 	#4 							; count to bump
.868b		18		clc				clc
.868c						_NCBump:
.868c		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.868e		91 34		sta ($34),y			sta 	(basicStack),y
.8690		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8692		c8		iny				iny 								; next byte
.8693		ca		dex				dex 								; do four times
.8694		d0 f6		bne $868c			bne 	_NCBump
.8696		20 3b 86	jsr $863b			jsr		CopyIndexToReference		; copy it to the reference variable.
.8699		a0 10		ldy #$10			ldy 	#16 						; get step count again
.869b		b1 34		lda ($34),y			lda 	(basicStack),y
.869d		0a		asl a				asl 	a 							; sign bit to carry
.869e		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86a0		85 38		sta $38				sta 	zTemp1
.86a2		90 02		bcc $86a6			bcc 	_NCCompRev 					; use if step is +ve
.86a4		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86a6						_NCCompRev:
.86a6		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86a8		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86aa		85 39		sta $39				sta 	zTemp1+1
.86ac		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86ae		38		sec				sec
.86af						_NCCompare:
.86af		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86b1		b1 34		lda ($34),y			lda 	(basicStack),y
.86b3		a4 39		ldy $39				ldy 	zTemp1+1
.86b5		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86b7		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86b9		e6 39		inc $39				inc 	zTemp1+1
.86bb		ca		dex				dex 								; do it 4 times.
.86bc		d0 f1		bne $86af			bne 	_NCCompare
.86be		50 02		bvc $86c2			bvc 	_NCNoOverflow 				; convert to signed comparison
.86c0		49 80		eor #$80			eor 	#$80
.86c2						_NCNoOverflow:
.86c2		7a		ply				ply 								; restore Y position
.86c3		0a		asl a				asl 	a 							; is bit 7 set.
.86c4		90 04		bcc $86ca			bcc 	_NCLoopBack 				; if no , >= so loop back
.86c6		20 cc af	jsr $afcc			jsr 	StackClose 					; exit the loop
.86c9		60		rts				rts
.86ca						_NCLoopBack:
.86ca		20 03 b0	jsr $b003			jsr 	STKLoadCodePosition 		; loop back
.86cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86ce						Command_GOSUB:
.86ce		a2 00		ldx #$00			ldx 	#0
.86d0		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86d3		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86d5		20 ad af	jsr $afad			jsr 	StackOpen 					; create frame
.86d8		20 f2 af	jsr $aff2			jsr 	STKSaveCodePosition 		; save current position
.86db		4c f1 86	jmp $86f1			jmp 	GotoStackX
.86de						Command_RETURN:
.86de		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86e0		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86e2		20 da af	jsr $afda			jsr 	StackCheckFrame
.86e5		20 03 b0	jsr $b003			jsr 	STKLoadCodePosition 		; restore code position
.86e8		20 cc af	jsr $afcc			jsr 	StackClose
.86eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86ec						GotoCommand:
.86ec		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86ee		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.86f1						GotoStackX:
.86f1		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86f3		48		pha				pha 								; it is slightly inefficient, just in cases.
.86f4		b5 58		lda $58,x			lda 	NSMantissa0,x
.86f6		fa		plx				plx
.86f7		20 59 a6	jsr $a659			jsr 	MemorySearch 				; transfer to line number AX.
.86fa		90 05		bcc $8701			bcc 	_GotoError 					; not found, off end.
.86fc		d0 03		bne $8701			bne 	_GotoError 					; not found exactly
.86fe		4c df 8b	jmp $8bdf			jmp 	RunNewLine 					; and go straight to new line code.
.8701						_GotoError:
.8701		a9 0d		lda #$0d		lda	#13
.8703		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8706						IfCommand:
.8706		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8708		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber
.870b		b1 30		lda ($30),y			lda 	(codePtr),y
.870d		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.870f		d0 0a		bne $871b			bne 	_IfStructured 				; we still support it.
.8711		c8		iny				iny 								; consume THEN
.8712		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; is it zero
.8715		f0 01		beq $8718			beq 	_IfFail 					; if fail, go to next line
.8717		60		rts				rts 								; if THEN just continue
.8718						_IfFail:
.8718		4c c7 8b	jmp $8bc7			jmp 	EOLCommand
.871b						_IfStructured:
.871b		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; is it zero
.871e		d0 07		bne $8727			bne 	_IfExit 					; if not, then continue normally.
.8720		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.8722		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8724		20 b7 8e	jsr $8eb7			jsr 	ScanForward 				; and run from there
.8727						_IfExit:
.8727		60		rts				rts
.8728						ElseCode:
.8728		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.872a		aa		tax				tax 								; so just go to the structure exit
.872b		20 b7 8e	jsr $8eb7			jsr 	ScanForward
.872e		60		rts				rts
.872f						EndIf:
.872f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8730						Command_Input:
.8730		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8732		8d 28 04	sta $0428			sta 	isInputFlag
.8735		80 03		bra $873a			bra 	Command_IP_Main
.8737						Command_Print:
.8737		9c 28 04	stz $0428			stz 	isInputFlag 				; clear input flag
.873a						Command_IP_Main:
.873a		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.873b						_CPLoop:
.873b		08		php				php 								; save last action flag
.873c		b1 30		lda ($30),y			lda 	(codePtr),y
.873e		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8740		f0 54		beq $8796			beq 	_CPExit
.8742		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8744		f0 50		beq $8796			beq 	_CPExit
.8746		68		pla				pla 								; throw last action flag
.8747		b1 30		lda ($30),y			lda 	(codePtr),y
.8749		c8		iny				iny
.874a		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.874c		f0 45		beq $8793			beq 	_CPContinueWithSameLine
.874e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8750		f0 3c		beq $878e			beq 	_CPTab
.8752		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8754		f0 34		beq $878a			beq 	_CPNewLine
.8756		88		dey				dey 								; undo the get.
.8757		20 77 94	jsr $9477			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.875a		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.875c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.875e		f0 0d		beq $876d			beq 	_CPIsValue 					; no, display it.
.8760		ad 28 04	lda $0428			lda 	isInputFlag 				; if print, dereference and print.
.8763		f0 05		beq $876a			beq 	_CPIsPrint 					; otherwise display.
.8765		20 9f 87	jsr $879f			jsr 	CIInputValue 				; input a value to the reference
.8768		80 20		bra $878a			bra 	_CPNewLine
.876a						_CPIsPrint:
.876a		20 3c 97	jsr $973c			jsr 	Dereference 				; dereference if required.
.876d						_CPIsValue:
.876d		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.876f		29 10		and #$10			and 	#NSBIsString
.8771		f0 09		beq $877c			beq 	_CPNumber
.8773		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8775		a5 58		lda $58				lda 	NSMantissa0
.8777		20 02 88	jsr $8802			jsr 	CPPrintStringXA
.877a		80 be		bra $873a			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.877c						_CPNumber:
.877c		a9 05		lda #$05			lda 	#5 							; maximum decimals
.877e		20 f5 9c	jsr $9cf5			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8781		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8783		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8785		20 02 88	jsr $8802			jsr 	CPPrintStringXA 			; print it.
.8788		80 b0		bra $873a			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.878a						_CPNewLine:
.878a		a9 0d		lda #$0d			lda 	#13
.878c		80 02		bra $8790			bra 	_CPPrintChar
.878e						_CPTab:
.878e		a9 09		lda #$09			lda 	#9 							; print TAB
.8790						_CPPrintChar:
.8790		20 15 88	jsr $8815			jsr 	CPPrintVector
.8793						_CPContinueWithSameLine:
.8793		38		sec				sec 								; loop round with carry set, which
.8794		80 a5		bra $873b			bra 	_CPLoop 					; will inhibit final CR
.8796						_CPExit:
.8796		28		plp				plp 								; get last action flag
.8797		b0 05		bcs $879e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8799		a9 0d		lda #$0d			lda 	#13 						; print new line
.879b		20 15 88	jsr $8815			jsr 	CPPrintVector
.879e						_CPExit2:
.879e		60		rts				rts
.879f						CIInputValue:
.879f		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87a1						_CIInputLine:
.87a1		20 18 88	jsr $8818			jsr 	CPInputVector 				; get key
.87a4		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87a6		f0 1f		beq $87c7			beq 	_CIHaveValue
.87a8		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87aa		f0 11		beq $87bd			beq 	_CIBackspace
.87ac		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87ae		90 f1		bcc $87a1			bcc 	_CIInputLine
.87b0		e0 50		cpx #$50			cpx 	#80 						; max length
.87b2		b0 ed		bcs $87a1			bcs 	_CIInputLine
.87b4		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87b7		e8		inx				inx
.87b8		20 15 88	jsr $8815			jsr 	CPPrintVector 				; echo it.
.87bb		80 e4		bra $87a1			bra 	_CIInputLine
.87bd						_CIBackspace:
.87bd		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87bf		f0 e0		beq $87a1			beq 	_CIInputLine
.87c1		20 15 88	jsr $8815			jsr 	CPPrintVector 				; echo it.
.87c4		ca		dex				dex
.87c5		80 da		bra $87a1			bra 	_CIInputLine
.87c7						_CIHaveValue:
.87c7		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.87ca		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87cc		29 10		and #$10			and 	#NSBIsString
.87ce		f0 17		beq $87e7			beq 	_CIAssignNumber 			; assign a number
.87d0		a2 01		ldx #$01			ldx 	#1
.87d2		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87d4		95 58		sta $58,x			sta 	NSMantissa0,x
.87d6		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87d8		95 60		sta $60,x			sta 	NSMantissa1,x
.87da		74 68		stz $68,x			stz 	NSMantissa2,x
.87dc		74 70		stz $70,x			stz 	NSMantissa3,x
.87de		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87e0		95 50		sta $50,x			sta  	NSStatus,x
.87e2		ca		dex				dex 								; X = 0
.87e3		20 54 88	jsr $8854			jsr 	AssignVariable
.87e6		60		rts				rts
.87e7						_CIAssignNumber:
.87e7		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87e9		85 36		sta $36				sta 	zTemp0
.87eb		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87ed		85 37		sta $37				sta 	zTemp0+1
.87ef		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87f1		20 77 9c	jsr $9c77			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87f4		90 07		bcc $87fd			bcc 	_CIIsOkay
.87f6		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.87f8		20 15 88	jsr $8815			jsr 	CPPrintVector
.87fb		80 a2		bra $879f			bra 	CIInputValue
.87fd						_CIIsOkay:
.87fd		ca		dex				dex 								; X = 0
.87fe		20 54 88	jsr $8854			jsr 	AssignVariable
.8801		60		rts				rts
.8802						CPPrintStringXA:
.8802		5a		phy				phy
.8803		86 37		stx $37				stx 	zTemp0+1
.8805		85 36		sta $36				sta 	zTemp0
.8807		a0 00		ldy #$00			ldy 	#0
.8809						_PSXALoop:
.8809		b1 36		lda ($36),y			lda 	(zTemp0),y
.880b		f0 06		beq $8813			beq 	_PSXAExit
.880d		20 15 88	jsr $8815			jsr 	CPPrintVector
.8810		c8		iny				iny
.8811		80 f6		bra $8809			bra 	_PSXALoop
.8813						_PSXAExit:
.8813		7a		ply				ply
.8814		60		rts				rts
.8815						CPPrintVector:
.8815		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8818						CPInputVector:
.8818		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.881b						LetCommand:
.881b		a2 00		ldx #$00			ldx 	#0
.881d		b1 30		lda ($30),y			lda 	(codePtr),y
.881f		c9 10		cmp #$10			cmp 	#KWD_AT
.8821		d0 14		bne $8837			bne 	_LCStandard
.8823		c8		iny				iny 								; skip equal
.8824		20 c3 98	jsr $98c3			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8827		20 3c 97	jsr $973c			jsr 	Dereference 				; dereference it to a value
.882a		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.882c		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.882e		95 50		sta $50,x			sta 	NSStatus,x
.8830		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8832		d0 0f		bne $8843			bne 	_LCMain
.8834		4c 48 a0	jmp $a048			jmp 	TypeError 					; was a reference before.
.8837						_LCStandard:
.8837		ad 61 94	lda $9461			lda 	PrecedenceLevel+"*"			; precedence > this
.883a		20 7b 94	jsr $947b			jsr 	EvaluateExpressionAtPrecedence
.883d		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.883f		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8841		f0 0e		beq $8851			beq 	_LetGoProc 					; it's a procedure call.
.8843						_LCMain:
.8843		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8845		20 6c 8f	jsr $8f6c			jsr 	CheckNextA
.8848		e8		inx				inx 								; RHS
.8849		20 05 9e	jsr $9e05			jsr 	EvaluateValue
.884c		ca		dex				dex
.884d		20 54 88	jsr $8854			jsr 	AssignVariable
.8850		60		rts				rts
.8851						_LetGoProc:
.8851		4c 9d 8a	jmp $8a9d			jmp 	CallProcedure
.8854						AssignVariable:
.8854		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8856		48		pha				pha 								; save a copy
.8857		55 51		eor $51,x			eor 	NSStatus+1,x
.8859		29 10		and #$10			and 	#NSBIsString
.885b		d0 0b		bne $8868			bne 	_ASError
.885d		68		pla				pla 								; get back
.885e		29 10		and #$10			and 	#NSBIsString 				; check type
.8860		d0 03		bne $8865			bne 	_ASString
.8862		4c 7a 96	jmp $967a			jmp 	AssignNumber
.8865						_ASString:
.8865		4c d8 96	jmp $96d8			jmp 	AssignString
.8868						_ASError:
.8868		4c 48 a0	jmp $a048			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.886b						Command_List:
.886b		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.886e		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8870		20 67 80	jsr $8067			jsr 	SNDCommand
.8873		b1 30		lda ($30),y			lda 	(codePtr),y
.8875		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8877		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8879		f0 6e		beq $88e9			beq 	_CLListProcedure
.887b		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.887d		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.887f		a9 ff		lda #$ff			lda 	#$FF
.8881		85 5f		sta $5f				sta 	NSMantissa0+7
.8883		85 67		sta $67				sta 	NSMantissa1+7
.8885		b1 30		lda ($30),y			lda 	(codePtr),y
.8887		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8889		f0 1a		beq $88a5			beq 	_CLSecond
.888b		20 66 89	jsr $8966			jsr 	CLIsDigit 					; if not digit, list all
.888e		b0 20		bcs $88b0			bcs 	_CLStart
.8890		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8892		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.8895		b1 30		lda ($30),y			lda 	(codePtr),y
.8897		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8899		f0 0a		beq $88a5			beq 	_CLSecond 					; if so go get it
.889b		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.889d		85 5f		sta $5f				sta 	NSMantissa0+7
.889f		a5 64		lda $64				lda 	NSMantissa1+4
.88a1		85 67		sta $67				sta 	NSMantissa1+7
.88a3		80 0b		bra $88b0			bra 	_CLStart
.88a5						_CLSecond:
.88a5		c8		iny				iny 								; consume comma
.88a6		20 66 89	jsr $8966			jsr 	CLIsDigit 					; digit found
.88a9		b0 05		bcs $88b0			bcs 	_CLStart 					; if not, continue listing
.88ab		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88ad		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.88b0						_CLStart
.88b0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88b2		85 30		sta $30				sta 	codePtr
.88b4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88b6		85 31		sta $31				sta 	codePtr+1
.88b8						_CLLoop:
.88b8		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88bb		f0 27		beq $88e4			beq 	_CLBreak
.88bd		b2 30		lda ($30)			lda 	(codePtr)
.88bf		f0 20		beq $88e1			beq 	_CLExit
.88c1		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88c3		20 55 89	jsr $8955			jsr 	CLCompareLineNo
.88c6		90 0c		bcc $88d4			bcc 	_CLNext
.88c8		a2 07		ldx #$07			ldx 	#7
.88ca		20 55 89	jsr $8955			jsr 	CLCompareLineNo
.88cd		f0 02		beq $88d1			beq 	_CLDoThisOne
.88cf		b0 03		bcs $88d4			bcs 	_CLNext
.88d1						_CLDoThisOne:
.88d1		20 42 89	jsr $8942			jsr 	CLListOneLine 				; routine to list the current line.
.88d4						_CLNext:
.88d4		18		clc				clc
.88d5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88d7		65 30		adc $30				adc 	codePtr
.88d9		85 30		sta $30				sta 	codePtr
.88db		90 02		bcc $88df			bcc 	_CREExit
.88dd		e6 31		inc $31				inc 	codePtr+1 					; carry
.88df						_CREExit:
.88df		80 d7		bra $88b8			bra 	_CLLoop
.88e1						_CLExit:
.88e1		4c 05 84	jmp $8405			jmp 	WarmStart
.88e4						_CLBreak:
.88e4		a9 01		lda #$01		lda	#1
.88e6		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.88e9						_CLListProcedure:
.88e9		b1 30		lda ($30),y			lda 	(codePtr),y
.88eb		85 38		sta $38				sta 	zTemp1
.88ed		c8		iny				iny
.88ee		b1 30		lda ($30),y			lda 	(codePtr),y
.88f0		85 39		sta $39				sta 	zTemp1+1
.88f2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88f4		85 30		sta $30				sta 	codePtr
.88f6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88f8		85 31		sta $31				sta 	codePtr+1
.88fa						_CLLPSearch:
.88fa		b2 30		lda ($30)			lda 	(codePtr)
.88fc		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.88fe		f0 e1		beq $88e1			beq 	_CLExit
.8900		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8902		b1 30		lda ($30),y			lda 	(codePtr),y
.8904		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8906		d0 0e		bne $8916			bne 	_CLLPNext
.8908		c8		iny				iny 								; check if PROC this.
.8909		b1 30		lda ($30),y			lda 	(codePtr),y
.890b		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.890d		d0 07		bne $8916			bne 	_CLLPNext
.890f		c8		iny				iny
.8910		b1 30		lda ($30),y			lda 	(codePtr),y
.8912		c5 39		cmp $39				cmp 	zTemp1+1
.8914		f0 0d		beq $8923			beq 	_CLLPFound
.8916						_CLLPNext:
.8916		18		clc				clc
.8917		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8919		65 30		adc $30				adc 	codePtr
.891b		85 30		sta $30				sta 	codePtr
.891d		90 02		bcc $8921			bcc 	_CREExit
.891f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8921						_CREExit:
.8921		80 d7		bra $88fa			bra 	_CLLPSearch
.8923						_CLLPFound:
.8923		b2 30		lda ($30)			lda 	(codePtr)
.8925		f0 ba		beq $88e1			beq 	_CLExit
.8927		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8929		b1 30		lda ($30),y			lda 	(codePtr),y
.892b		48		pha				pha
.892c		20 42 89	jsr $8942			jsr 	CLListOneLine 				; list line and go forward
.892f		18		clc				clc
.8930		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8932		65 30		adc $30				adc 	codePtr
.8934		85 30		sta $30				sta 	codePtr
.8936		90 02		bcc $893a			bcc 	_CREExit
.8938		e6 31		inc $31				inc 	codePtr+1 					; carry
.893a						_CREExit:
.893a		68		pla				pla 								; reached ENDPROC ?
.893b		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.893d		d0 e4		bne $8923			bne 	_CLLPFound
.893f		4c 05 84	jmp $8405			jmp 	WarmStart
.8942						CLListOneLine:
.8942		20 1a 8f	jsr $8f1a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8945		20 7b 80	jsr $807b			jsr 	TKListConvertLine 			; convert line into token Buffer
.8948		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.894a		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.894c		20 ce 8f	jsr $8fce			jsr 	PrintStringXA
.894f		a9 0d		lda #$0d			lda 	#13 						; new line
.8951		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8954		60		rts				rts
.8955						CLCompareLineNo:
.8955		38		sec				sec
.8956		a0 01		ldy #$01			ldy 	#1
.8958		b1 30		lda ($30),y			lda 	(codePtr),y
.895a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.895c		85 36		sta $36				sta 	zTemp0
.895e		c8		iny				iny
.895f		b1 30		lda ($30),y			lda 	(codePtr),y
.8961		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8963		05 36		ora $36				ora 	zTemp0
.8965		60		rts				rts
.8966						CLIsDigit:
.8966		b1 30		lda ($30),y			lda 	(codePtr),y
.8968		c9 30		cmp #$30			cmp 	#"0"
.896a		90 03		bcc $896f			bcc	 	_CLIDExitFalse
.896c		c9 3a		cmp #$3a			cmp 	#"9"+1
.896e		60		rts				rts
.896f						_CLIDExitFalse:
.896f		38		sec				sec
.8970		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8971						Command_Load:
.8971		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; file name to load
.8974		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8976		a5 36		lda $36				lda 	zTemp0
.8978		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.897b		b0 0d		bcs $898a			bcs 	_CLDriveNotFound 			; drive not found (apparently)
.897d						_CLLoop:
.897d		20 49 80	jsr $8049			jsr 	KNLReadByte
.8980		b0 05		bcs $8987			bcs 	_CLExit
.8982		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8985		80 f6		bra $897d			bra 	_CLLoop
.8987						_CLExit:
.8987		4c 05 84	jmp $8405			jmp 	WarmStart
.898a						_CLDriveNotFound:
.898a		a9 1a		lda #$1a		lda	#26
.898c		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.898f						Command_LOCAL:
.898f		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8991		20 9d 89	jsr $899d			jsr 	LocaliseNextTerm 			; convert term to a local.
.8994		b1 30		lda ($30),y			lda 	(codePtr),y
.8996		c8		iny				iny
.8997		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8999		f0 f4		beq $898f			beq 	Command_LOCAL 				; if so, localise another variable.
.899b		88		dey				dey 								; unpick pre-get
.899c		60		rts				rts
.899d						LocaliseNextTerm:
.899d		20 c3 98	jsr $98c3			jsr 	EvaluateTerm 				; evaluate the term
.89a0		b5 50		lda $50,x			lda 	NSStatus,x
.89a2		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.89a4		f0 5c		beq $8a02			beq		_LNTError
.89a6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.89a8		85 36		sta $36				sta 	zTemp0
.89aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.89ac		85 37		sta $37				sta  	zTemp0+1
.89ae		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.89b0		29 10		and #$10			and 	#NSBIsString
.89b2		d0 1e		bne $89d2			bne 	_LNTPushString
.89b4		5a		phy				phy
.89b5		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.89b7						_LNTPushNumLoop:
.89b7		b1 36		lda ($36),y			lda		(zTemp0),y
.89b9		20 8c af	jsr $af8c			jsr 	StackPushByte
.89bc		c8		iny				iny
.89bd		c0 05		cpy #$05			cpy 	#5
.89bf		d0 f6		bne $89b7			bne 	_LNTPushNumLoop
.89c1		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.89c3		20 8c af	jsr $af8c			jsr 	StackPushByte
.89c6		a5 37		lda $37				lda 	zTemp0+1
.89c8		20 8c af	jsr $af8c			jsr 	StackPushByte
.89cb		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.89cd		20 8c af	jsr $af8c			jsr 	StackPushByte
.89d0		7a		ply				ply
.89d1		60		rts				rts
.89d2						_LNTPushString:
.89d2		5a		phy				phy
.89d3		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.89d5		85 38		sta $38				sta 	zTemp1
.89d7		a0 01		ldy #$01			ldy 	#1
.89d9		b1 36		lda ($36),y			lda 	(zTemp0),y
.89db		85 39		sta $39				sta 	zTemp1+1
.89dd		a0 00		ldy #$00			ldy 	#0 							; output string
.89df		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89e1		f0 0a		beq $89ed			beq 	_LNTStringOut
.89e3						_LNTPushStrLoop:
.89e3		b1 38		lda ($38),y			lda 	(zTemp1),y
.89e5		f0 06		beq $89ed			beq 	_LNTStringOut
.89e7		20 8c af	jsr $af8c			jsr 	StackPushByte
.89ea		c8		iny				iny
.89eb		80 f6		bra $89e3			bra 	_LNTPushStrLoop
.89ed						_LNTStringOut:
.89ed		98		tya				tya									; output length (chars written).
.89ee		20 8c af	jsr $af8c			jsr 	StackPushByte
.89f1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89f3		20 8c af	jsr $af8c			jsr 	StackPushByte
.89f6		b5 60		lda $60,x			lda 	NSMantissa1,x
.89f8		20 8c af	jsr $af8c			jsr 	StackPushByte
.89fb		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89fd		20 8c af	jsr $af8c			jsr 	StackPushByte
.8a00		7a		ply				ply
.8a01		60		rts				rts
.8a02						_LNTError:
.8a02		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.8a05						LocalPopValue:
.8a05		20 a4 af	jsr $afa4			jsr 	StackPopByte
.8a08		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8a0a		d0 17		bne $8a23			bne 	_LPVString
.8a0c		20 a4 af	jsr $afa4			jsr 	StackPopByte 				; address
.8a0f		85 37		sta $37				sta 	zTemp0+1
.8a11		20 a4 af	jsr $afa4			jsr 	StackPopByte
.8a14		85 36		sta $36				sta 	zTemp0
.8a16		5a		phy				phy
.8a17		a0 04		ldy #$04			ldy 	#4 							; copy back
.8a19						_LPVNumberCopy:
.8a19		20 a4 af	jsr $afa4			jsr 	StackPopByte
.8a1c		91 36		sta ($36),y			sta 	(zTemp0),y
.8a1e		88		dey				dey
.8a1f		10 f8		bpl $8a19			bpl 	_LPVNumberCopy
.8a21		7a		ply				ply 								; and complete
.8a22		60		rts				rts
.8a23						_LPVString:
.8a23		20 a4 af	jsr $afa4			jsr 	StackPopByte 				; address of record copied to zTemp0
.8a26		85 37		sta $37				sta 	zTemp0+1
.8a28		20 a4 af	jsr $afa4			jsr 	StackPopByte
.8a2b		85 36		sta $36				sta 	zTemp0
.8a2d		5a		phy				phy
.8a2e		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8a30		85 38		sta $38				sta 	zTemp1
.8a32		a0 01		ldy #$01			ldy 	#1
.8a34		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a36		85 39		sta $39				sta 	zTemp1+1
.8a38		20 a4 af	jsr $afa4			jsr 	StackPopByte 				; # chars to get => y
.8a3b		a8		tay				tay
.8a3c		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a3e		f0 0e		beq $8a4e			beq 	_LPVStringCopied
.8a40		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a42		91 38		sta ($38),y			sta 	(zTemp1),y
.8a44						_LPVStringCopy:
.8a44		88		dey				dey
.8a45		30 07		bmi $8a4e			bmi 	_LPVStringCopied
.8a47		20 a4 af	jsr $afa4			jsr 	StackPopByte
.8a4a		91 38		sta ($38),y			sta 	(zTemp1),y
.8a4c		80 f6		bra $8a44			bra 	_LPVStringCopy
.8a4e						_LPVStringCopied:
.8a4e		fa		plx				plx
.8a4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a50						NewCommand:
.8a50		20 56 8a	jsr $8a56			jsr 	NewProgram 					; does the actual NEW.
.8a53		4c 05 84	jmp $8405			jmp 	WarmStart 					; and warm starts straight away.
.8a56						NewProgram:
.8a56		20 3b a6	jsr $a63b			jsr 	MemoryNew
.8a59		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a5c		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear everything.
.8a5f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8a60						PokeBCommand:
.8a60		a9 01		lda #$01			lda 	#1
.8a62		80 0c		bra $8a70			bra 	PokeCommand
.8a64						PokeWCommand:
.8a64		a9 02		lda #$02			lda 	#2
.8a66		80 08		bra $8a70			bra 	PokeCommand
.8a68						PokeLCommand:
.8a68		a9 03		lda #$03			lda 	#3
.8a6a		80 04		bra $8a70			bra 	PokeCommand
.8a6c						PokeDCommand:
.8a6c		a9 04		lda #$04			lda 	#4
.8a6e		80 00		bra $8a70			bra 	PokeCommand
.8a70						PokeCommand:
.8a70		48		pha				pha 								; save count on stack
.8a71		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8a73		20 40 9e	jsr $9e40			jsr		Evaluate16BitInteger 		; address
.8a76		20 64 8f	jsr $8f64			jsr 	CheckComma
.8a79		e8		inx				inx
.8a7a		20 2d 9e	jsr $9e2d			jsr		EvaluateInteger 			; data
.8a7d		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8a7f		85 36		sta $36				sta 	zTemp0
.8a81		a5 60		lda $60				lda 	NSMantissa1
.8a83		85 37		sta $37				sta 	zTemp0+1
.8a85		68		pla				pla 								; count -> zTemp1
.8a86		85 38		sta $38				sta 	zTemp1
.8a88		5a		phy				phy 								; save Y position.
.8a89		a0 00		ldy #$00			ldy 	#0 							; index to write
.8a8b		a2 00		ldx #$00			ldx 	#0 							; index to read
.8a8d						_PCLoop:
.8a8d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8a8f		91 36		sta ($36),y			sta 	(zTemp0),y
.8a91		c8		iny				iny 								; next byte to write
.8a92		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8a93		18		clc				clc
.8a94		69 08		adc #$08			adc 	#MathStackSize
.8a96		aa		tax				tax
.8a97		c6 38		dec $38				dec 	zTemp1 						; done them all
.8a99		d0 f2		bne $8a8d			bne 	_PCLoop
.8a9b		7a		ply				ply 								; restore position.
.8a9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a9d						CallProcedure:
.8a9d		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa1		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8aa3		f0 0c		beq $8ab1			beq 	_CPEndParam
.8aa5						_CPParamLoop:
.8aa5		20 05 9e	jsr $9e05			jsr 	EvaluateValue 				; get parameter onto stack
.8aa8		e8		inx				inx 								; bump next stack
.8aa9		b1 30		lda ($30),y			lda 	(codePtr),y
.8aab		c8		iny				iny
.8aac		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8aae		f0 f5		beq $8aa5			beq 	_CPParamLoop
.8ab0		88		dey				dey 								; unpick.
.8ab1						_CPEndParam:
.8ab1		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8ab4		c8		iny				iny									; skip right bracket
.8ab5		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ab7		20 ad af	jsr $afad			jsr 	StackOpen
.8aba		20 f2 af	jsr $aff2			jsr 	STKSaveCodePosition 		; save loop position
.8abd		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8abf		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ac1		a5 60		lda $60				lda 	NSMantissa1
.8ac3		85 37		sta $37				sta 	zTemp0+1
.8ac5		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8ac7		b2 36		lda ($36)			lda 	(zTemp0)
.8ac9		85 30		sta $30				sta 	safePtr
.8acb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8acd		85 31		sta $31				sta 	safePtr+1
.8acf		c8		iny				iny
.8ad0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ad2		85 32		sta $32				sta 	safePtr+2
.8ad4		c8		iny				iny
.8ad5		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ad7		85 33		sta $33				sta 	safePtr+3
.8ad9		c8		iny				iny 								; get Y offset -> Y
.8ada		b1 36		lda ($36),y			lda 	(zTemp0),y
.8adc		a8		tay				tay
.8add		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8adf		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8ae2		f0 13		beq $8af7			beq 	_ParamExit 					; if so, exit.
.8ae4						_ParamExtract:
.8ae4		ca		dex				dex 								; put a local term on the level before
.8ae5		20 9d 89	jsr $899d			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8ae8		20 54 88	jsr $8854			jsr 	AssignVariable 				; assign stacked value to the variable.
.8aeb		e8		inx				inx 								; advance to next parameter to do.
.8aec		e8		inx				inx
.8aed		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8af0		f0 05		beq $8af7			beq 	_ParamExit
.8af2		20 64 8f	jsr $8f64			jsr 	CheckComma 					; comma seperating parameters
.8af5		80 ed		bra $8ae4			bra 	_ParamExtract
.8af7						_ParamExit:
.8af7		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; check )
.8afa		60		rts				rts 								; and continue from here
.8afb						Command_ENDPROC:
.8afb		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8afd		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8aff		20 da af	jsr $afda			jsr 	StackCheckFrame
.8b02		20 03 b0	jsr $b003			jsr 	STKLoadCodePosition 		; restore code position
.8b05		20 cc af	jsr $afcc			jsr 	StackClose
.8b08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8b09						Command_Read:
.8b09		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8b0b		20 c3 98	jsr $98c3			jsr 	EvaluateTerm
.8b0e		b5 50		lda $50,x			lda 	NSStatus,x
.8b10		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8b12		f0 4f		beq $8b63			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8b14		20 ac 8b	jsr $8bac			jsr 	SwapDataCodePtrs 			; swap code and data
.8b17		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8b1a		d0 25		bne $8b41			bne 	_CRContinueData  			; forward for the next one.
.8b1c		b2 30		lda ($30)			lda 	(codePtr)
.8b1e		f0 1c		beq $8b3c			beq 	_CRNoData
.8b20						_CRKeepSearching:
.8b20		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8b22		a2 80		ldx #$80			ldx 	#KWC_EOL
.8b24		20 b7 8e	jsr $8eb7			jsr 	ScanForward
.8b27		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8b29		f0 16		beq $8b41			beq 	_CRHaveData 				; found it
.8b2b		18		clc				clc
.8b2c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b2e		65 30		adc $30				adc 	codePtr
.8b30		85 30		sta $30				sta 	codePtr
.8b32		90 02		bcc $8b36			bcc 	_CREExit
.8b34		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b36						_CREExit:
.8b36		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8b38		b2 30		lda ($30)			lda 	(codePtr)
.8b3a		d0 e4		bne $8b20			bne 	_CRKeepSearching
.8b3c						_CRNoData:
.8b3c		a9 0b		lda #$0b		lda	#11
.8b3e		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.8b41						_CRHaveData:
.8b41						_CRContinueData:
.8b41		a2 01		ldx #$01			ldx 	#1
.8b43		20 05 9e	jsr $9e05			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8b46		ca		dex				dex
.8b47		20 54 88	jsr $8854			jsr		AssignVariable 				; do the assignment
.8b4a		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8b4d		b1 30		lda ($30),y			lda 	(codePtr),y
.8b4f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8b51		d0 04		bne $8b57			bne 	_CRSwapBack
.8b53		c8		iny				iny 								; consume comma
.8b54		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8b57						_CRSwapBack:
.8b57		20 ac 8b	jsr $8bac			jsr 	SwapDataCodePtrs			; swap them back.
.8b5a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b5c		c8		iny				iny
.8b5d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b5f		f0 a8		beq $8b09			beq 	Command_Read 				; if so go round again.
.8b61		88		dey				dey 								; unpick get.
.8b62		60		rts				rts
.8b63						_CRSyntax:
.8b63		4c 3e a0	jmp $a03e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b66						RemCommand:
.8b66		b1 30		lda ($30),y			lda 	(codePtr),y
.8b68		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b6a		d0 06		bne $8b72			bne 	_RMExit
.8b6c		c8		iny				iny 								; point to offset
.8b6d		98		tya				tya 								; A = offset position
.8b6e		38		sec				sec 								; add size +1 hence SEC
.8b6f		71 30		adc ($30),y			adc 	(codePtr),y
.8b71		a8		tay				tay 								; make current position.
.8b72						_RMExit:
.8b72		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b73						Command_REPEAT:
.8b73		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b75		20 ad af	jsr $afad			jsr 	StackOpen
.8b78		20 f2 af	jsr $aff2			jsr 	STKSaveCodePosition 		; save loop position
.8b7b		60		rts				rts
.8b7c						Command_UNTIL:
.8b7c		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b7e		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b80		20 da af	jsr $afda			jsr 	StackCheckFrame
.8b83		a2 00		ldx #$00			ldx 	#0
.8b85		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; work out the number
.8b88		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; check if zero
.8b8b		f0 04		beq $8b91			beq 	_CULoopBack 				; if so keep looping
.8b8d		20 cc af	jsr $afcc			jsr 	StackClose		 			; return
.8b90		60		rts				rts
.8b91						_CULoopBack:
.8b91		20 03 b0	jsr $b003			jsr 	STKLoadCodePosition 		; loop back
.8b94		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b95						Command_Restore:
.8b95		20 ac 8b	jsr $8bac			jsr 	SwapDataCodePtrs 			; swap code and data
.8b98		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b9a		85 30		sta $30				sta 	codePtr
.8b9c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b9e		85 31		sta $31				sta 	codePtr+1
.8ba0		20 ac 8b	jsr $8bac			jsr 	SwapDataCodePtrs 			; put them back
.8ba3		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ba5		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8ba8		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8bab		60		rts				rts
.8bac						SwapDataCodePtrs:
.8bac		da		phx				phx
.8bad		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8baf						_SDCPLoop:
.8baf		b5 30		lda $30,x			lda 	safePtr,x
.8bb1		48		pha				pha
.8bb2		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8bb5		95 30		sta $30,x			sta 	safePtr,x
.8bb7		68		pla				pla
.8bb8		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8bbb		ca		dex				dex
.8bbc		10 f1		bpl $8baf			bpl 	_SDCPLoop
.8bbe		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8bc1		8c 1b 04	sty $041b			sty 	dataPointer+4
.8bc4		a8		tay				tay
.8bc5		fa		plx				plx
.8bc6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8bc7						EOLCommand:
.8bc7		18		clc				clc
.8bc8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bca		65 30		adc $30				adc 	codePtr
.8bcc		85 30		sta $30				sta 	codePtr
.8bce		90 02		bcc $8bd2			bcc 	_CREExit
.8bd0		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bd2						_CREExit:
.8bd2		80 0b		bra $8bdf			bra 	RunNewLine
.8bd4						CommandRUN:
.8bd4		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8bd7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bd9		85 30		sta $30				sta 	codePtr
.8bdb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bdd		85 31		sta $31				sta 	codePtr+1
.8bdf						RunNewLine:
.8bdf		b2 30		lda ($30)			lda 	(codePtr)
.8be1		f0 7b		beq $8c5e			beq 	CRNoProgram         		; no then END.
.8be3		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8be5		9a		txs				txs
.8be6						RUNCodePointerLine:
.8be6		a0 02		ldy #$02			ldy 	#2 							; start of program
.8be8						_CRIncMainLoop:
.8be8		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8beb		d0 22		bne $8c0f			bne 	_CRNoBreakCheck
.8bed		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8bf0		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8bf3		f0 64		beq $8c59			beq 	_CRBreak
.8bf5		a5 01		lda $01				lda 	1 							; save I/O 0
.8bf7		48		pha				pha
.8bf8		64 01		stz $01				stz 	1 							; access I/O Page 0
.8bfa		38		sec				sec 								; calculate timer - LastTick
.8bfb		ad 59 d6	lda $d659			lda 	$D659
.8bfe		aa		tax				tax 								; saving timer in X
.8bff		ed 5c 06	sbc $065c			sbc 	LastTick
.8c02		c9 03		cmp #$03			cmp 	#3
.8c04		90 06		bcc $8c0c			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8c06		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8c09		20 eb 9e	jsr $9eeb			jsr 	TickHandler 							; go do the code.
.8c0c						_NoFireTick:
.8c0c		68		pla				pla 								; restore I/O 0
.8c0d		85 01		sta $01				sta 	1
.8c0f						_CRNoBreakCheck:
.8c0f		c8		iny				iny									; next token
.8c10						_CRMainLoop:
.8c10		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8c13		b1 30		lda ($30),y			lda 	(codePtr),y
.8c15		10 10		bpl $8c27			bpl 	_CRNotKeyword				; not a token.
.8c17		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8c19		b0 04		bcs $8c1f			bcs 	_CRIsKeyword
.8c1b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8c1d		b0 34		bcs $8c53			bcs		_CRSyntaxError
.8c1f						_CRIsKeyword:
.8c1f		c8		iny				iny 								; consume command
.8c20		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8c21		aa		tax				tax 								; put in X for vector jump
.8c22		20 56 8c	jsr $8c56			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8c25		80 e9		bra $8c10			bra 	_CRMainLoop 				; and loop round
.8c27						_CRNotKeyword:
.8c27		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8c29		f0 bd		beq $8be8			beq 	_CRIncMainLoop
.8c2b		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8c2d		90 05		bcc $8c34			bcc 	_CRNotVariable
.8c2f						_CRGoLet:
.8c2f		20 1b 88	jsr $881b			jsr 	LetCommand
.8c32		80 dc		bra $8c10			bra 	_CRMainLoop
.8c34						_CRNotVariable:
.8c34		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8c36		f0 f7		beq $8c2f			beq 	_CRGoLet
.8c38		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8c3a		f0 f3		beq $8c2f			beq 	_CRGoLet
.8c3c		c9 21		cmp #$21			cmp 	#KWD_PLING
.8c3e		f0 ef		beq $8c2f			beq 	_CRGoLet
.8c40		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8c42		f0 09		beq $8c4d			beq 	_CRGoRem
.8c44		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8c46		d0 0b		bne $8c53			bne 	_CRSyntaxError
.8c48		20 77 82	jsr $8277			jsr 	LabelHere
.8c4b		80 c3		bra $8c10			bra 	_CRMainLoop
.8c4d						_CRGoRem:
.8c4d		c8		iny				iny
.8c4e		20 66 8b	jsr $8b66			jsr 	RemCommand
.8c51		80 bd		bra $8c10			bra 	_CRMainLoop
.8c53						_CRSyntaxError:
.8c53		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.8c56						_CRCallVector0:
.8c56		7c f4 8c	jmp ($8cf4,x)			jmp 	(VectorSet0,x)
.8c59						_CRBreak:
.8c59		a9 01		lda #$01		lda	#1
.8c5b		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.8c5e						CRNoProgram:
.8c5e		4c c0 85	jmp $85c0			jmp 	EndCommand
.8c61						Shift1Command:
.8c61		b1 30		lda ($30),y			lda 	(codePtr),y
.8c63		c8		iny				iny
.8c64		0a		asl a				asl 	a
.8c65		aa		tax				tax
.8c66		7c a6 8d	jmp ($8da6,x)			jmp 	(VectorSet1,x)
.8c69						Shift2Command:
.8c69		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6b		c8		iny				iny
.8c6c		0a		asl a				asl 	a
.8c6d		aa		tax				tax
.8c6e		7c d8 8d	jmp ($8dd8,x)			jmp 	(VectorSet2,x)
.8c71						Unused1:
.8c71						Unused2:
.8c71						Unused3:
.8c71						Unused4:
.8c71		4c 3e a0	jmp $a03e			jmp 	SyntaxError
>8c74								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c74						VectorSetPunc:
>8c74		2d 92					.word	ShiftLeft                        ; $00 <<
>8c76		18 90					.word	BinaryCompareLessEqual           ; $01 <=
>8c78		0e 90					.word	BinaryCompareNotEqual            ; $02 <>
>8c7a		3e a0					.word	SyntaxError                      ; $03 !!3
>8c7c		3e a0					.word	SyntaxError                      ; $04 ><
>8c7e		22 90					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c80		30 92					.word	ShiftRight                       ; $06 >>
>8c82		3e a0					.word	SyntaxError                      ; $07 !!7
>8c84		3e a0					.word	SyntaxError                      ; $08 !!8
>8c86		3e a0					.word	SyntaxError                      ; $09 !!9
>8c88		3e a0					.word	SyntaxError                      ; $0a !!10
>8c8a		3e a0					.word	SyntaxError                      ; $0b !!11
>8c8c		3e a0					.word	SyntaxError                      ; $0c !!12
>8c8e		3e a0					.word	SyntaxError                      ; $0d !!13
>8c90		3e a0					.word	SyntaxError                      ; $0e !!14
>8c92		3e a0					.word	SyntaxError                      ; $0f !!15
>8c94		3e a0					.word	SyntaxError                      ; $10 @
>8c96		3e a0					.word	SyntaxError                      ; $11 !!17
>8c98		3e a0					.word	SyntaxError                      ; $12 !!18
>8c9a		3e a0					.word	SyntaxError                      ; $13 [
>8c9c		d9 90					.word	IntegerDivide                    ; $14 \
>8c9e		3e a0					.word	SyntaxError                      ; $15 ]
>8ca0		6b 93					.word	EorInteger                       ; $16 ^
>8ca2		3e a0					.word	SyntaxError                      ; $17 _
>8ca4		3e a0					.word	SyntaxError                      ; $18 `
>8ca6		3e a0					.word	SyntaxError                      ; $19 !!25
>8ca8		3e a0					.word	SyntaxError                      ; $1a !!26
>8caa		3e a0					.word	SyntaxError                      ; $1b {
>8cac		36 93					.word	OraInteger                       ; $1c |
>8cae		3e a0					.word	SyntaxError                      ; $1d }
>8cb0		3e a0					.word	SyntaxError                      ; $1e ~
>8cb2		3e a0					.word	SyntaxError                      ; $1f [7m<7F>[m
>8cb4		3e a0					.word	SyntaxError                      ; $20
>8cb6		a0 93					.word	WordIndirect                     ; $21 !
>8cb8		3e a0					.word	SyntaxError                      ; $22 "
>8cba		3e a0					.word	SyntaxError                      ; $23 #
>8cbc		3e a0					.word	SyntaxError                      ; $24 $
>8cbe		1a 91					.word	IntegerModulus                   ; $25 %
>8cc0		01 93					.word	AndInteger                       ; $26 &
>8cc2		3e a0					.word	SyntaxError                      ; $27 '
>8cc4		3e a0					.word	SyntaxError                      ; $28 (
>8cc6		3e a0					.word	SyntaxError                      ; $29 )
>8cc8		88 91					.word	MulInteger                       ; $2a *
>8cca		a3 92					.word	AddInteger                       ; $2b +
>8ccc		3e a0					.word	SyntaxError                      ; $2c ,
>8cce		dc 92					.word	SubInteger                       ; $2d -
>8cd0		3e a0					.word	SyntaxError                      ; $2e .
>8cd2		5a 95					.word	FDivideCommand                   ; $2f /
>8cd4		3e a0					.word	SyntaxError                      ; $30 0
>8cd6		3e a0					.word	SyntaxError                      ; $31 1
>8cd8		3e a0					.word	SyntaxError                      ; $32 2
>8cda		3e a0					.word	SyntaxError                      ; $33 3
>8cdc		3e a0					.word	SyntaxError                      ; $34 4
>8cde		3e a0					.word	SyntaxError                      ; $35 5
>8ce0		3e a0					.word	SyntaxError                      ; $36 6
>8ce2		3e a0					.word	SyntaxError                      ; $37 7
>8ce4		3e a0					.word	SyntaxError                      ; $38 8
>8ce6		3e a0					.word	SyntaxError                      ; $39 9
>8ce8		3e a0					.word	SyntaxError                      ; $3a :
>8cea		3e a0					.word	SyntaxError                      ; $3b ;
>8cec		fa 8f					.word	BinaryCompareLess                ; $3c <
>8cee		f0 8f					.word	BinaryCompareEqual               ; $3d =
>8cf0		04 90					.word	BinaryCompareGreater             ; $3e >
>8cf2		c2 93					.word	ByteIndirect                     ; $3f ?
.8cf4						VectorSet0:
>8cf4		c7 8b					.word	EOLCommand                       ; $80 !0:EOF
>8cf6		61 8c					.word	Shift1Command                    ; $81 !1:SH1
>8cf8		69 8c					.word	Shift2Command                    ; $82 !2:SH2
>8cfa		44 9a					.word	AbsUnary                         ; $83 ABS(
>8cfc		52 9a					.word	AllocUnary                       ; $84 ALLOC(
>8cfe		c2 9a					.word	AscUnary                         ; $85 ASC(
>8d00		a6 9c					.word	ChrUnary                         ; $86 CHR$(
>8d02		cf a4					.word	UnaryEvent                       ; $87 EVENT(
>8d04		ec 8f					.word	UnaryFalse                       ; $88 FALSE
>8d06		cf 9a					.word	FracUnary                        ; $89 FRAC(
>8d08		3e a0					.word	SyntaxError                      ; $8a GETDATE$(
>8d0a		3e a0					.word	SyntaxError                      ; $8b GETTIME$(
>8d0c		59 a4					.word	UnaryHit                         ; $8c HIT(
>8d0e		e4 9a					.word	IntUnary                         ; $8d INT(
>8d10		65 9c					.word	IsValUnary                       ; $8e ISVAL(
>8d12		53 a5					.word	UnaryJoyB                        ; $8f JOYB(
>8d14		2c a5					.word	UnaryJoyX                        ; $90 JOYX(
>8d16		2f a5					.word	UnaryJoyY                        ; $91 JOYY(
>8d18		79 9d					.word	Unary_Left                       ; $92 LEFT$(
>8d1a		f5 9a					.word	LenUnary                         ; $93 LEN(
>8d1c		13 9b					.word	Unary_Max                        ; $94 MAX(
>8d1e		9b 9d					.word	Unary_Mid                        ; $95 MID$(
>8d20		0f 9b					.word	Unary_Min                        ; $96 MIN(
>8d22		5e 9b					.word	Unary_Not                        ; $97 NOT(
>8d24		71 9b					.word	PeekByteUnary                    ; $98 PEEK(
>8d26		7d 9b					.word	PeekDUnary                       ; $99 PEEKD(
>8d28		79 9b					.word	PeekLUnary                       ; $9a PEEKL(
>8d2a		75 9b					.word	PeekWUnary                       ; $9b PEEKW(
>8d2c		0a af					.word	UnaryPlaying                     ; $9c PLAYING(
>8d2e		aa 9b					.word	Unary_Random                     ; $9d RANDOM(
>8d30		86 9d					.word	Unary_Right                      ; $9e RIGHT$(
>8d32		c7 9b					.word	Unary_Rnd                        ; $9f RND(
>8d34		3d 9c					.word	SgnUnary                         ; $a0 SGN(
>8d36		b8 9c					.word	SpcUnary                         ; $a1 SPC(
>8d38		d3 9c					.word	Unary_Str                        ; $a2 STR$(
>8d3a		65 a5					.word	UnaryTimer                       ; $a3 TIMER(
>8d3c		e1 8f					.word	UnaryTrue                        ; $a4 TRUE
>8d3e		5b 9c					.word	ValUnary                         ; $a5 VAL(
>8d40		c3 85					.word	ForCommand                       ; $a6 FOR
>8d42		06 87					.word	IfCommand                        ; $a7 IF
>8d44		71 8c					.word	Unused1                          ; $a8 PROC
>8d46		73 8b					.word	Command_REPEAT                   ; $a9 REPEAT
>8d48		2d 8f					.word	Command_WHILE                    ; $aa WHILE
>8d4a		2f 87					.word	EndIf                            ; $ab ENDIF
>8d4c		fb 8a					.word	Command_ENDPROC                  ; $ac ENDPROC
>8d4e		75 86					.word	NextCommand                      ; $ad NEXT
>8d50		71 8c					.word	Unused4                          ; $ae THEN
>8d52		7c 8b					.word	Command_UNTIL                    ; $af UNTIL
>8d54		4e 8f					.word	Command_WEND                     ; $b0 WEND
>8d56		3e a0					.word	SyntaxError                      ; $b1 BY
>8d58		66 84					.word	CallCommand                      ; $b2 CALL
>8d5a		0d a2					.word	CircleCommand                    ; $b3 CIRCLE
>8d5c		9b 84					.word	ClearCommand                     ; $b4 CLEAR
>8d5e		f3 84					.word	ClearScreen                      ; $b5 CLS
>8d60		3e a0					.word	SyntaxError                      ; $b6 COLOR
>8d62		3e a0					.word	SyntaxError                      ; $b7 COLOUR
>8d64		fb 84					.word	Command_Data                     ; $b8 DATA
>8d66		03 85					.word	DimCommand                       ; $b9 DIM
>8d68		71 8c					.word	Unused3                          ; $ba DOWNTO
>8d6a		28 87					.word	ElseCode                         ; $bb ELSE
>8d6c		3e a0					.word	SyntaxError                      ; $bc FROM
>8d6e		2c a4					.word	GfxCommand                       ; $bd GFX
>8d70		ce 86					.word	Command_GOSUB                    ; $be GOSUB
>8d72		ec 86					.word	GotoCommand                      ; $bf GOTO
>8d74		3e a0					.word	SyntaxError                      ; $c0 HERE
>8d76		36 a2					.word	ImageCommand                     ; $c1 IMAGE
>8d78		30 87					.word	Command_Input                    ; $c2 INPUT
>8d7a		1b 88					.word	LetCommand                       ; $c3 LET
>8d7c		88 a2					.word	LineCommand                      ; $c4 LINE
>8d7e		8f 89					.word	Command_LOCAL                    ; $c5 LOCAL
>8d80		3e a0					.word	SyntaxError                      ; $c6 OFF
>8d82		3e a0					.word	SyntaxError                      ; $c7 ON
>8d84		3e a0					.word	SyntaxError                      ; $c8 OUTLINE
>8d86		7d a4					.word	PaletteCommand                   ; $c9 PALETTE
>8d88		81 a2					.word	PlotCommand                      ; $ca PLOT
>8d8a		60 8a					.word	PokeBCommand                     ; $cb POKE
>8d8c		6c 8a					.word	PokeDCommand                     ; $cc POKED
>8d8e		68 8a					.word	PokeLCommand                     ; $cd POKEL
>8d90		64 8a					.word	PokeWCommand                     ; $ce POKEW
>8d92		37 87					.word	Command_Print                    ; $cf PRINT
>8d94		09 8b					.word	Command_Read                     ; $d0 READ
>8d96		09 a2					.word	RectangleCommand                 ; $d1 RECT
>8d98		66 8b					.word	RemCommand                       ; $d2 REM
>8d9a		de 86					.word	Command_RETURN                   ; $d3 RETURN
>8d9c		3e a0					.word	SyntaxError                      ; $d4 SOLID
>8d9e		26 af					.word	SoundCommand                     ; $d5 SOUND
>8da0		18 a2					.word	SpriteCommand                    ; $d6 SPRITE
>8da2		52 a2					.word	TextCommand                      ; $d7 TEXT
>8da4		71 8c					.word	Unused2                          ; $d8 TO
.8da6						VectorSet1:
>8da6		3e a0					.word	SyntaxError                      ; $80 !0:EOF
>8da8		3e a0					.word	SyntaxError                      ; $81 !1:SH1
>8daa		3e a0					.word	SyntaxError                      ; $82 !2:SH2
>8dac		3a 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8dae		56 84					.word	AssertCommand                    ; $84 ASSERT
>8db0		cc a3					.word	BitmapCtrl                       ; $85 BITMAP
>8db2		c0 85					.word	EndCommand                       ; $86 END
>8db4		de ae					.word	Explode                          ; $87 EXPLODE
>8db6		3e a0					.word	SyntaxError                      ; $88 GO
>8db8		6b 88					.word	Command_List                     ; $89 LIST
>8dba		71 89					.word	Command_Load                     ; $8a LOAD
>8dbc		50 8a					.word	NewCommand                       ; $8b NEW
>8dbe		ba ae					.word	PingCommand                      ; $8c PING
>8dc0		95 8b					.word	Command_Restore                  ; $8d RESTORE
>8dc2		d4 8b					.word	CommandRUN                       ; $8e RUN
>8dc4		3e a0					.word	SyntaxError                      ; $8f SAVE
>8dc6		3e a0					.word	SyntaxError                      ; $90 SETDATE
>8dc8		3e a0					.word	SyntaxError                      ; $91 SETTIME
>8dca		d2 ae					.word	ShootCommand                     ; $92 SHOOT
>8dcc		11 a4					.word	SpritesCtrl                      ; $93 SPRITES
>8dce		60 8e					.word	StopCommand                      ; $94 STOP
>8dd0		3e a0					.word	SyntaxError                      ; $95 VERIFY
>8dd2		c6 a4					.word	XGoCommand                       ; $96 XGO
>8dd4		bd a4					.word	XLoadCommand                     ; $97 XLOAD
>8dd6		c6 ae					.word	ZapCommand                       ; $98 ZAP
.8dd8						VectorSet2:
>8dd8		3e a0					.word	SyntaxError                      ; $80 !0:EOF
>8dda		3e a0					.word	SyntaxError                      ; $81 !1:SH1
>8ddc		3e a0					.word	SyntaxError                      ; $82 !2:SH2
>8dde		fd 9e					.word	Assemble_adc                     ; $83 ADC
>8de0		f5 9e					.word	Assemble_and                     ; $84 AND
>8de2		11 9f					.word	Assemble_asl                     ; $85 ASL
>8de4		7b 9f					.word	Assemble_bcc                     ; $86 BCC
>8de6		7f 9f					.word	Assemble_bcs                     ; $87 BCS
>8de8		87 9f					.word	Assemble_beq                     ; $88 BEQ
>8dea		3e 9f					.word	Assemble_bit                     ; $89 BIT
>8dec		6f 9f					.word	Assemble_bmi                     ; $8a BMI
>8dee		83 9f					.word	Assemble_bne                     ; $8b BNE
>8df0		6b 9f					.word	Assemble_bpl                     ; $8c BPL
>8df2		8b 9f					.word	Assemble_bra                     ; $8d BRA
>8df4		8f 9f					.word	Assemble_brk                     ; $8e BRK
>8df6		73 9f					.word	Assemble_bvc                     ; $8f BVC
>8df8		77 9f					.word	Assemble_bvs                     ; $90 BVS
>8dfa		97 9f					.word	Assemble_clc                     ; $91 CLC
>8dfc		eb 9f					.word	Assemble_cld                     ; $92 CLD
>8dfe		ab 9f					.word	Assemble_cli                     ; $93 CLI
>8e00		db 9f					.word	Assemble_clv                     ; $94 CLV
>8e02		09 9f					.word	Assemble_cmp                     ; $95 CMP
>8e04		52 9f					.word	Assemble_cpx                     ; $96 CPX
>8e06		4d 9f					.word	Assemble_cpy                     ; $97 CPY
>8e08		2f 9f					.word	Assemble_dec                     ; $98 DEC
>8e0a		e7 9f					.word	Assemble_dex                     ; $99 DEX
>8e0c		c3 9f					.word	Assemble_dey                     ; $9a DEY
>8e0e		f9 9e					.word	Assemble_eor                     ; $9b EOR
>8e10		34 9f					.word	Assemble_inc                     ; $9c INC
>8e12		f7 9f					.word	Assemble_inx                     ; $9d INX
>8e14		e3 9f					.word	Assemble_iny                     ; $9e INY
>8e16		66 9f					.word	Assemble_jmp                     ; $9f JMP
>8e18		61 9f					.word	Assemble_jsr                     ; $a0 JSR
>8e1a		05 9f					.word	Assemble_lda                     ; $a1 LDA
>8e1c		2a 9f					.word	Assemble_ldx                     ; $a2 LDX
>8e1e		48 9f					.word	Assemble_ldy                     ; $a3 LDY
>8e20		1b 9f					.word	Assemble_lsr                     ; $a4 LSR
>8e22		fb 9f					.word	Assemble_nop                     ; $a5 NOP
>8e24		f1 9e					.word	Assemble_ora                     ; $a6 ORA
>8e26		a7 9f					.word	Assemble_pha                     ; $a7 PHA
>8e28		93 9f					.word	Assemble_php                     ; $a8 PHP
>8e2a		ef 9f					.word	Assemble_phx                     ; $a9 PHX
>8e2c		af 9f					.word	Assemble_phy                     ; $aa PHY
>8e2e		b7 9f					.word	Assemble_pla                     ; $ab PLA
>8e30		9b 9f					.word	Assemble_plp                     ; $ac PLP
>8e32		03 a0					.word	Assemble_plx                     ; $ad PLX
>8e34		bf 9f					.word	Assemble_ply                     ; $ae PLY
>8e36		16 9f					.word	Assemble_rol                     ; $af ROL
>8e38		20 9f					.word	Assemble_ror                     ; $b0 ROR
>8e3a		a3 9f					.word	Assemble_rti                     ; $b1 RTI
>8e3c		b3 9f					.word	Assemble_rts                     ; $b2 RTS
>8e3e		0d 9f					.word	Assemble_sbc                     ; $b3 SBC
>8e40		9f 9f					.word	Assemble_sec                     ; $b4 SEC
>8e42		ff 9f					.word	Assemble_sed                     ; $b5 SED
>8e44		bb 9f					.word	Assemble_sei                     ; $b6 SEI
>8e46		01 9f					.word	Assemble_sta                     ; $b7 STA
>8e48		f3 9f					.word	Assemble_stp                     ; $b8 STP
>8e4a		25 9f					.word	Assemble_stx                     ; $b9 STX
>8e4c		43 9f					.word	Assemble_sty                     ; $ba STY
>8e4e		39 9f					.word	Assemble_stz                     ; $bb STZ
>8e50		d7 9f					.word	Assemble_tax                     ; $bc TAX
>8e52		d3 9f					.word	Assemble_tay                     ; $bd TAY
>8e54		5c 9f					.word	Assemble_trb                     ; $be TRB
>8e56		57 9f					.word	Assemble_tsb                     ; $bf TSB
>8e58		df 9f					.word	Assemble_tsx                     ; $c0 TSX
>8e5a		c7 9f					.word	Assemble_txa                     ; $c1 TXA
>8e5c		cf 9f					.word	Assemble_txs                     ; $c2 TXS
>8e5e		cb 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8e60						StopCommand:
.8e60		a9 08		lda #$08		lda	#8
.8e62		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e65						ProcedureScan:
.8e65		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e67		85 30		sta $30				sta 	codePtr
.8e69		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e6b		85 31		sta $31				sta 	codePtr+1
.8e6d						_PSLoop:
.8e6d		b2 30		lda ($30)			lda 	(codePtr)
.8e6f		f0 42		beq $8eb3			beq 	_PSExit
.8e71		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e73		b1 30		lda ($30),y			lda 	(codePtr),y
.8e75		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8e77		d0 2d		bne $8ea6			bne 	_PSNext
.8e79		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e7a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e7c		29 c0		and #$c0			and 	#$C0
.8e7e		c9 40		cmp #$40			cmp 	#$40
.8e80		d0 32		bne $8eb4			bne 	_PSSyntax
.8e82		b1 30		lda ($30),y			lda 	(codePtr),y
.8e84		18		clc				clc
.8e85		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e87		85 37		sta $37				sta 	zTemp0+1
.8e89		c8		iny				iny 								; LSB
.8e8a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e8c		85 36		sta $36				sta 	zTemp0
.8e8e		c8		iny				iny 								; character after variable call.
.8e8f		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e90		a0 07		ldy #$07			ldy 	#7
.8e92		91 36		sta ($36),y			sta 	(zTemp0),y
.8e94		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e96		a0 02		ldy #$02			ldy 	#2
.8e98		91 36		sta ($36),y			sta 	(zTemp0),y
.8e9a		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e9c						_PSCopy:
.8e9c		b5 30		lda $30,x			lda 	safePtr,x
.8e9e		c8		iny				iny
.8e9f		91 36		sta ($36),y			sta 	(zTemp0),y
.8ea1		e8		inx				inx
.8ea2		e0 04		cpx #$04			cpx 	#4
.8ea4		d0 f6		bne $8e9c			bne 	_PSCopy
.8ea6						_PSNext:
.8ea6		18		clc				clc
.8ea7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ea9		65 30		adc $30				adc 	codePtr
.8eab		85 30		sta $30				sta 	codePtr
.8ead		90 02		bcc $8eb1			bcc 	_CREExit
.8eaf		e6 31		inc $31				inc 	codePtr+1 					; carry
.8eb1						_CREExit:
.8eb1		80 ba		bra $8e6d			bra 	_PSLoop
.8eb3						_PSExit:
.8eb3		60		rts				rts
.8eb4						_PSSyntax:
.8eb4		4c 3e a0	jmp $a03e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8eb7						ScanForward:
.8eb7		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8eb9		86 37		stx $37				stx 	zTemp0+1
.8ebb		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8ebd						_ScanLoop:
.8ebd		b1 30		lda ($30),y			lda 	(codePtr),y
.8ebf		c8		iny				iny
.8ec0		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8ec2		d0 0e		bne $8ed2			bne 	_ScanGoNext
.8ec4		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ec6		f0 04		beq $8ecc			beq 	_ScanMatch
.8ec8		c5 37		cmp $37				cmp 	zTemp0+1
.8eca		d0 06		bne $8ed2			bne 	_ScanGoNext
.8ecc						_ScanMatch:
.8ecc		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8ece		d0 01		bne $8ed1			bne 	_ScanNotEndEOL
.8ed0		88		dey				dey
.8ed1						_ScanNotEndEOL:
.8ed1		60		rts				rts
.8ed2						_ScanGoNext:
.8ed2		20 d7 8e	jsr $8ed7			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8ed5		80 e6		bra $8ebd			bra 	_ScanLoop
.8ed7						ScanForwardOne:
.8ed7		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8ed9		90 3e		bcc $8f19			bcc 	_SFWExit
.8edb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8edd		90 18		bcc $8ef7			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8edf		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8ee1		b0 2f		bcs $8f12			bcs 	_ScanSkipData
.8ee3		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ee5		90 32		bcc $8f19			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ee7		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.8ee9		b0 2e		bcs $8f19			bcs 	_SFWExit
.8eeb		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8eed		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8eef		b0 28		bcs $8f19			bcs 	_SFWExit
.8ef1		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ef3		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8ef5		80 22		bra $8f19			bra 	_SFWExit
.8ef7						_ScanSkipOne:
.8ef7		c8		iny				iny 								; consume the extra one.
.8ef8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8efa		d0 1d		bne $8f19			bne 	_SFWExit
.8efc		18		clc				clc
.8efd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8eff		65 30		adc $30				adc 	codePtr
.8f01		85 30		sta $30				sta 	codePtr
.8f03		90 02		bcc $8f07			bcc 	_CREExit
.8f05		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f07						_CREExit:
.8f07		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8f09		b2 30		lda ($30)			lda 	(codePtr)
.8f0b		d0 0c		bne $8f19			bne 	_SFWExit 					; if not zero, more to scan
.8f0d		a9 13		lda #$13		lda	#19
.8f0f		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.8f12						_ScanSkipData:
.8f12		88		dey				dey 								; point at data token
.8f13		c8		iny				iny 								; point to offset
.8f14		98		tya				tya 								; A = offset position
.8f15		38		sec				sec 								; add size +1 hence SEC
.8f16		71 30		adc ($30),y			adc 	(codePtr),y
.8f18		a8		tay				tay 								; make current position.
.8f19						_SFWExit:
.8f19		60		rts				rts
.8f1a						ScanGetCurrentLineStep:
.8f1a		64 38		stz $38				stz 	zTemp1
.8f1c		a0 03		ldy #$03			ldy 	#3
.8f1e						_SGCLSLoop:
.8f1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f20		c8		iny				iny
.8f21		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8f23		f0 05		beq $8f2a			beq 	_SGCLSExit
.8f25		20 d7 8e	jsr $8ed7			jsr 	ScanForwardOne
.8f28		80 f4		bra $8f1e			bra 	_SGCLSLoop
.8f2a						_SGCLSExit:
.8f2a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8f2c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8f2d						Command_WHILE:
.8f2d		5a		phy				phy 								; save position of the test
.8f2e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8f30		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber
.8f33		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; check if zero
.8f36		f0 0e		beq $8f46			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8f38		98		tya				tya 								; position *after* test.
.8f39		7a		ply				ply 								; restore position before test, at WHILE
.8f3a		88		dey				dey 								; so we execute the WHILE command again.
.8f3b		48		pha				pha 								; push after test on the stack
.8f3c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8f3e		20 ad af	jsr $afad			jsr 	StackOpen
.8f41		20 f2 af	jsr $aff2			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8f44		7a		ply				ply 								; restore the position *after* the test
.8f45		60		rts				rts
.8f46						_WHExitLoop:
.8f46		68		pla				pla 								; throw post loop position
.8f47		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.8f49		aa		tax				tax
.8f4a		20 b7 8e	jsr $8eb7			jsr 	ScanForward
.8f4d		60		rts				rts
.8f4e						Command_WEND:
.8f4e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8f50		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8f52		20 da af	jsr $afda			jsr 	StackCheckFrame
.8f55		20 03 b0	jsr $b003			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8f58		20 cc af	jsr $afcc			jsr 	StackClose		 			; erase the frame
.8f5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8f5c						CheckRightBracket:
.8f5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f5e		c8		iny				iny
.8f5f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8f61		d0 0f		bne $8f72			bne 	CNAFail
.8f63		60		rts				rts
.8f64						CheckComma:
.8f64		b1 30		lda ($30),y			lda 	(codePtr),y
.8f66		c8		iny				iny
.8f67		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f69		d0 07		bne $8f72			bne 	CNAFail
.8f6b		60		rts				rts
.8f6c						CheckNextA:
.8f6c		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f6e		d0 02		bne $8f72			bne 	CNAFail
.8f70		c8		iny				iny 								; skip character
.8f71		60		rts				rts 								; and exit
.8f72						CNAFail:
.8f72		4c 3e a0	jmp $a03e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f75						ErrorHandler:
.8f75		a8		tay				tay 								; find the error text
.8f76		f0 49		beq $8fc1			beq 	_EHEnd
.8f78		a2 00		ldx #$00			ldx 	#0
.8f7a		a9 57		lda #$57			lda 	#((ErrorText) & $FF)
.8f7c		85 36		sta $36				sta 	0+zTemp0
.8f7e		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.8f80		85 37		sta $37				sta 	1+zTemp0
.8f82						_EHFind:
.8f82		88		dey				dey 								; keep looking through text
.8f83		f0 0e		beq $8f93			beq 	_EHFound
.8f85						_EHFindZero:
.8f85		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f87		e6 36		inc $36				inc 	zTemp0
.8f89		d0 02		bne $8f8d			bne 	_EHFNoCarry
.8f8b		e6 37		inc $37				inc 	zTemp0+1
.8f8d						_EHFNoCarry:
.8f8d		c9 00		cmp #$00			cmp 	#0
.8f8f		d0 f4		bne $8f85			bne 	_EHFindZero
.8f91		80 ef		bra $8f82			bra 	_EHFind
.8f93						_EHFound:
.8f93		a5 36		lda $36				lda 	zTemp0 						; print message
.8f95		a6 37		ldx $37				ldx 	zTemp0+1
.8f97		20 ce 8f	jsr $8fce			jsr 	PrintStringXA
.8f9a		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f9c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f9e		d0 05		bne $8fa5			bne 	_EHAtMsg
.8fa0		c8		iny				iny
.8fa1		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa3		f0 17		beq $8fbc			beq 	_EHCREnd
.8fa5						_EHAtMsg:
.8fa5		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8fa7		a9 c4		lda #$c4			lda 	#_AtMsg & $FF
.8fa9		20 ce 8f	jsr $8fce			jsr 	PrintStringXA
.8fac		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8fae		b1 30		lda ($30),y			lda 	(codePtr),y
.8fb0		48		pha				pha
.8fb1		c8		iny				iny
.8fb2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fb4		aa		tax				tax
.8fb5		68		pla				pla
.8fb6		20 e4 93	jsr $93e4			jsr 	ConvertInt16 				; convert XA to string
.8fb9		20 ce 8f	jsr $8fce			jsr 	PrintStringXA 				; and print it.
.8fbc						_EHCREnd:
.8fbc		a9 0d		lda #$0d			lda 	#13 						; new line
.8fbe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8fc1						_EHEnd:
.8fc1		4c 05 84	jmp $8405			jmp 	WarmStart
>8fc4		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8fcc		20 00
.8fce						PrintStringXA:
.8fce		5a		phy				phy
.8fcf		86 37		stx $37				stx 	zTemp0+1
.8fd1		85 36		sta $36				sta 	zTemp0
.8fd3		a0 00		ldy #$00			ldy 	#0
.8fd5						_PSXALoop:
.8fd5		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fd7		f0 06		beq $8fdf			beq 	_PSXAExit
.8fd9		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8fdc		c8		iny				iny
.8fdd		80 f6		bra $8fd5			bra 	_PSXALoop
.8fdf						_PSXAExit:
.8fdf		7a		ply				ply
.8fe0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8fe1						UnaryTrue:
.8fe1		fa		plx				plx
.8fe2						ReturnTrue:
.8fe2		a9 01		lda #$01			lda 	#1  						; set to 1
.8fe4		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.8fe7		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8fe9		95 50		sta $50,x			sta 	NSStatus,x
.8feb		60		rts				rts
.8fec						UnaryFalse:
.8fec		fa		plx				plx
.8fed						ReturnFalse:
.8fed		4c c0 9e	jmp $9ec0			jmp 	NSMSetZero 					; set it all to zero
.8ff0						BinaryCompareEqual:
.8ff0		fa		plx				plx
.8ff1		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.8ff4		c9 00		cmp #$00			cmp 	#0
.8ff6		f0 ea		beq $8fe2			beq 	ReturnTrue
.8ff8		80 f3		bra $8fed			bra 	ReturnFalse
.8ffa						BinaryCompareLess:
.8ffa		fa		plx				plx
.8ffb		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.8ffe		c9 ff		cmp #$ff			cmp 	#$FF
.9000		f0 e0		beq $8fe2			beq 	ReturnTrue
.9002		80 e9		bra $8fed			bra 	ReturnFalse
.9004						BinaryCompareGreater:
.9004		fa		plx				plx
.9005		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.9008		c9 01		cmp #$01			cmp 	#1
.900a		f0 d6		beq $8fe2			beq 	ReturnTrue
.900c		80 df		bra $8fed			bra 	ReturnFalse
.900e						BinaryCompareNotEqual:
.900e		fa		plx				plx
.900f		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.9012		c9 00		cmp #$00			cmp 	#0
.9014		d0 cc		bne $8fe2			bne 	ReturnTrue
.9016		80 d5		bra $8fed			bra 	ReturnFalse
.9018						BinaryCompareLessEqual:
.9018		fa		plx				plx
.9019		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.901c		c9 01		cmp #$01			cmp 	#1
.901e		d0 c2		bne $8fe2			bne 	ReturnTrue
.9020		80 cb		bra $8fed			bra 	ReturnFalse
.9022						BinaryCompareGreaterEqual:
.9022		fa		plx				plx
.9023		20 2c 90	jsr $902c			jsr 	CompareBaseCode
.9026		c9 ff		cmp #$ff			cmp 	#$FF
.9028		d0 b8		bne $8fe2			bne 	ReturnTrue
.902a		80 c1		bra $8fed			bra 	ReturnFalse
.902c						CompareBaseCode:
.902c		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; make both values if references.
.902f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9031		15 51		ora $51,x			ora 	NSStatus+1,x
.9033		29 10		and #$10			and 	#NSTString
.9035		d0 37		bne $906e			bne 	_CBCString 					; if so do string code, which will check if both.
.9037		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9039		15 79		ora $79,x			ora 	NSExponent+1,x
.903b		d0 34		bne $9071			bne 	_CBCFloat
.903d		b5 50		lda $50,x			lda 	NSStatus,x
.903f		15 51		ora $51,x			ora 	NSStatus+1,x
.9041		29 08		and #$08			and 	#NSTFloat
.9043		d0 2c		bne $9071			bne 	_CBCFloat
.9045		20 74 90	jsr $9074			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9048		e8		inx				inx
.9049		20 74 90	jsr $9074			jsr 	CompareFixMinusZero
.904c		ca		dex				dex
.904d		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.904f		55 51		eor $51,x			eor 	NSStatus+1,x
.9051		10 0a		bpl $905d			bpl 	_CDCSameSign
.9053		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9055		30 14		bmi $906b			bmi 	_CBCLess 					; return $FF
.9057						_CBCGreater:
.9057		a9 01		lda #$01			lda 	#1
.9059		60		rts				rts
.905a						_CBCEqual:
.905a		a9 00		lda #$00			lda 	#0
.905c		60		rts				rts
.905d						_CDCSameSign:
.905d		20 89 92	jsr $9289			jsr 	SubTopTwoStack 				; unsigned subtract
.9060		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; or the mantissa together
.9063		f0 f5		beq $905a			beq 	_CBCEqual 					; -0 == 0
.9065		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9067		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9069		10 ec		bpl $9057			bpl 	_CBCGreater
.906b						_CBCLess:
.906b		a9 ff		lda #$ff			lda 	#$FF
.906d		60		rts				rts
.906e						_CBCString:
.906e		4c fa 91	jmp $91fa			jmp 	CompareStrings
.9071						_CBCFloat:
.9071		4c 44 95	jmp $9544			jmp 	CompareFloat
.9074						CompareFixMinusZero:
.9074		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero
.9077		d0 02		bne $907b			bne 	_CFXMZNotZero
.9079		74 50		stz $50,x			stz 	NSStatus,x
.907b						_CFXMZNotZero:
.907b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.907c						StringConcat:
.907c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.907e		35 51		and $51,x			and 	NSStatus+1,x
.9080		29 18		and #$18			and 	#NSBTypeMask
.9082		c9 10		cmp #$10			cmp 	#NSTString
.9084		d0 50		bne $90d6			bne		_SCType
.9086		64 38		stz $38				stz 	zTemp1 						; counting total length
.9088		e8		inx				inx
.9089		20 a7 90	jsr $90a7			jsr 	_SCSetupZ0 					; setup for second
.908c		20 b0 90	jsr $90b0			jsr 	_SCLengthZ0 				; length for second
.908f		ca		dex				dex
.9090		20 a7 90	jsr $90a7			jsr 	_SCSetupZ0 					; setup for first
.9093		20 b0 90	jsr $90b0			jsr 	_SCLengthZ0 				; length for first
.9096		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9098		20 9d b0	jsr $b09d			jsr 	StringTempAllocate
.909b		20 c7 90	jsr $90c7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.909e		e8		inx				inx
.909f		20 a7 90	jsr $90a7			jsr 	_SCSetupZ0 					; copy second out
.90a2		20 c7 90	jsr $90c7			jsr 	_SCCopy
.90a5		ca		dex				dex
.90a6		60		rts				rts
.90a7						_SCSetupZ0:
.90a7		b5 58		lda $58,x			lda 	NSMantissa0,x
.90a9		85 36		sta $36				sta 	zTemp0
.90ab		b5 60		lda $60,x			lda 	NSMantissa1,x
.90ad		85 37		sta $37				sta 	zTemp0+1
.90af		60		rts				rts
.90b0						_SCLengthZ0:
.90b0		5a		phy				phy
.90b1		a0 00		ldy #$00			ldy 	#0
.90b3						_SCLenLoop:
.90b3		b1 36		lda ($36),y			lda 	(zTemp0),y
.90b5		f0 0e		beq $90c5			beq 	_SCLExit
.90b7		c8		iny				iny
.90b8		e6 38		inc $38				inc 	zTemp1
.90ba		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.90bc		c9 fd		cmp #$fd			cmp 	#253
.90be		d0 f3		bne $90b3			bne		_SCLenLoop
.90c0		a9 09		lda #$09		lda	#9
.90c2		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.90c5						_SCLExit:
.90c5		7a		ply				ply
.90c6		60		rts				rts
.90c7						_SCCopy:
.90c7		5a		phy				phy
.90c8		a0 00		ldy #$00			ldy 	#0
.90ca						_SCCopyLoop:
.90ca		b1 36		lda ($36),y			lda 	(zTemp0),y
.90cc		f0 06		beq $90d4			beq 	_SCCExit
.90ce		20 d6 b0	jsr $b0d6			jsr 	StringTempWrite
.90d1		c8		iny				iny
.90d2		80 f6		bra $90ca			bra 	_SCCopyLoop
.90d4						_SCCExit:
.90d4		7a		ply				ply
.90d5		60		rts				rts
.90d6						_SCType:
.90d6		4c 48 a0	jmp $a048			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.90d9						IntegerDivide:
.90d9		fa		plx				plx
.90da		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90dc		15 51		ora $51,x			ora 	NSStatus+1,x
.90de		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90df		0a		asl a				asl 	a
.90e0		10 05		bpl $90e7			bpl 	_NotRef
.90e2		48		pha				pha
.90e3		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e6		68		pla				pla
.90e7						_NotRef:
.90e7		0a		asl a				asl 	a
.90e8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90ea		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ec		15 79		ora $79,x			ora 	NSExponent+1,x
.90ee		f0 03		beq $90f3			beq 	_IntegerCode 				; if clear, then we have two integers
.90f0		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.90f3						_IntegerCode:
.90f3		20 0d 91	jsr $910d			jsr 	CheckDivideZero 			; do div zero check
.90f6		20 3f 91	jsr $913f			jsr 	Int32Divide 				; do the division
.90f9		20 f0 91	jsr $91f0			jsr 	CalculateSign 				; calculate result sign
.90fc						NSMCopyPlusTwoToZero:
.90fc		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90fe		95 58		sta $58,x			sta 	NSMantissa0,x
.9100		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9102		95 60		sta $60,x			sta 	NSMantissa1,x
.9104		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9106		95 68		sta $68,x			sta 	NSMantissa2,x
.9108		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.910a		95 70		sta $70,x			sta 	NSMantissa3,x
.910c		60		rts				rts
.910d						CheckDivideZero:
.910d		e8		inx				inx
.910e		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero
.9111		f0 02		beq $9115			beq 	_CDVError
.9113		ca		dex				dex
.9114		60		rts				rts
.9115						_CDVError:
.9115		a9 03		lda #$03		lda	#3
.9117		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.911a						IntegerModulus:
.911a		fa		plx				plx
.911b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.911d		15 51		ora $51,x			ora 	NSStatus+1,x
.911f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9120		0a		asl a				asl 	a
.9121		10 05		bpl $9128			bpl 	_NotRef
.9123		48		pha				pha
.9124		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9127		68		pla				pla
.9128						_NotRef:
.9128		0a		asl a				asl 	a
.9129		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.912b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.912d		15 79		ora $79,x			ora 	NSExponent+1,x
.912f		f0 03		beq $9134			beq 	_IntegerCode 				; if clear, then we have two integers
.9131		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.9134						_IntegerCode:
.9134						IntegerModulusNoCheck:
.9134		20 0d 91	jsr $910d			jsr 	CheckDivideZero 			; do div zero check
.9137		20 3f 91	jsr $913f			jsr 	Int32Divide 				; do the division
.913a		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.913c		56 50		lsr $50,x			lsr 	NSStatus,x
.913e		60		rts				rts
.913f						Int32Divide:
.913f		48		pha				pha 								; save AXY
.9140		5a		phy				phy
.9141		20 a3 9e	jsr $9ea3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9144		20 bc 9e	jsr $9ebc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9147		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9149						_I32DivideLoop:
.9149		e8		inx				inx
.914a		e8		inx				inx
.914b		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.914e		ca		dex				dex
.914f		ca		dex				dex
.9150		20 d0 9e	jsr $9ed0			jsr 	NSMRotateLeft
.9153		20 7e 91	jsr $917e			jsr 	DivideCheckSubtract 		; check if subtract possible
.9156		90 02		bcc $915a			bcc 	_I32DivideNoCarryIn
.9158		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.915a						_I32DivideNoCarryIn:
.915a		88		dey				dey 								; loop round till division completed.
.915b		d0 ec		bne $9149			bne 	_I32DivideLoop
.915d		7a		ply				ply 								; restore AXY and exit
.915e		68		pla				pla
.915f		60		rts				rts
.9160						Int32ShiftDivide:
.9160		48		pha				pha 								; save AY
.9161		5a		phy				phy
.9162		e8		inx				inx 								; clear S[X+2]
.9163		e8		inx				inx
.9164		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.9167		ca		dex				dex
.9168		ca		dex				dex
.9169		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.916b						_I32SDLoop:
.916b		20 7e 91	jsr $917e			jsr 	DivideCheckSubtract 		; check if subtract possible
.916e		e8		inx				inx
.916f		e8		inx				inx
.9170		20 d0 9e	jsr $9ed0			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9173		ca		dex				dex
.9174		ca		dex				dex
.9175		20 d0 9e	jsr $9ed0			jsr 	NSMRotateLeft
.9178		88		dey				dey 	 							; do 31 times
.9179		d0 f0		bne $916b			bne 	_I32SDLoop
.917b		7a		ply				ply 								; restore AY and exit
.917c		68		pla				pla
.917d		60		rts				rts
.917e						DivideCheckSubtract:
.917e		20 89 92	jsr $9289			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9181		b0 04		bcs $9187			bcs 	_DCSExit 					; if carry set, then could do, exit
.9183		20 6f 92	jsr $926f			jsr 	AddTopTwoStack 				; add it back in
.9186		18		clc				clc 								; and return False
.9187						_DCSExit:
.9187		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9188						MulInteger:
.9188		fa		plx				plx
.9189		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.918b		15 51		ora $51,x			ora 	NSStatus+1,x
.918d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.918e		0a		asl a				asl 	a
.918f		10 05		bpl $9196			bpl 	_NotRef
.9191		48		pha				pha
.9192		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9195		68		pla				pla
.9196						_NotRef:
.9196		0a		asl a				asl 	a 							; put MSB of type into A:7
.9197		30 09		bmi $91a2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9199		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.919b		15 79		ora $79,x			ora 	NSExponent+1,x
.919d		f0 06		beq $91a5			beq 	_IntegerCode 				; if clear, then we have two integers
.919f		4c 06 96	jmp $9606			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.91a2						_StringData:
.91a2		4c 52 a0	jmp $a052			jmp 	NotDoneError							; at least one string - don't know both are strings.
.91a5						_IntegerCode:
.91a5		20 b2 91	jsr $91b2			jsr 	MultiplyShort
.91a8		c9 00		cmp #$00			cmp 	#0
.91aa		f0 05		beq $91b1			beq 	_MIExit
.91ac		a9 04		lda #$04		lda	#4
.91ae		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.91b1						_MIExit:
.91b1		60		rts				rts
.91b2						MultiplyShort:
.91b2		5a		phy				phy 								; save Y
.91b3		20 a3 9e	jsr $9ea3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91b6		20 bc 9e	jsr $9ebc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.91b9		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.91bb						_I32MLoop:
.91bb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.91bd		15 62		ora $62,x			ora 	NSMantissa1+2,x
.91bf		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.91c1		15 72		ora $72,x			ora 	NSMantissa3+2,x
.91c3		f0 25		beq $91ea			beq 	_I32MExit 					; exit if zero
.91c5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.91c7		29 01		and #$01			and 	#1
.91c9		f0 0d		beq $91d8			beq 	_I32MNoAdd
.91cb		20 6f 92	jsr $926f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.91ce		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.91d0		10 06		bpl $91d8			bpl 	_I32MNoAdd
.91d2						_I32ShiftRight:
.91d2		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight 				; shift S[X] right
.91d5		c8		iny				iny 								; increment shift count
.91d6		80 09		bra $91e1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.91d8						_I32MNoAdd:
.91d8		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.91da		70 f6		bvs $91d2			bvs 	_I32ShiftRight 				; instead.
.91dc		e8		inx				inx
.91dd		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91e0		ca		dex				dex
.91e1						_I32MShiftUpper:
.91e1		e8		inx				inx 								; shift S[X+2] right
.91e2		e8		inx				inx
.91e3		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight
.91e6		ca		dex				dex
.91e7		ca		dex				dex
.91e8		80 d1		bra $91bb			bra 	_I32MLoop 					; try again.
.91ea						_I32MExit:
.91ea		20 f0 91	jsr $91f0			jsr 	CalculateSign
.91ed		98		tya				tya 								; shift in A
.91ee		7a		ply				ply 								; restore Y and exit
.91ef		60		rts				rts
.91f0						CalculateSign:
.91f0		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91f2		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.91f4		55 51		eor $51,x			eor 	NSStatus+1,x
.91f6		0a		asl a				asl 	a 							; shift bit 7 into carry
.91f7		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.91f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.91fa						CompareStrings:
.91fa		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.91fc		35 51		and $51,x			and 	NSStatus+1,x
.91fe		29 10		and #$10			and 	#NSBIsString
.9200		f0 28		beq $922a			beq 	_CSTypeError
.9202		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9204		85 36		sta $36				sta 	zTemp0
.9206		b5 60		lda $60,x			lda 	NSMantissa1,x
.9208		85 37		sta $37				sta 	zTemp0+1
.920a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.920c		85 38		sta $38				sta 	zTemp1
.920e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9210		85 39		sta $39				sta 	zTemp1+1
.9212		5a		phy				phy 								; save Y so we can access strings
.9213		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9215						_CSLoop:
.9215		c8		iny				iny
.9216		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9218		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.921a		d0 06		bne $9222			bne 	_CSDifferent
.921c		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.921e		d0 f5		bne $9215			bne 	_CSLoop 					; still comparing
.9220						_CSExit:
.9220		7a		ply				ply 								; reached end, return zero in A from EOS
.9221		60		rts				rts
.9222						_CSDifferent:
.9222		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9224		90 fa		bcc $9220			bcc		_CSExit
.9226		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9228		80 f6		bra $9220			bra 	_CSExit
.922a						_CSTypeError:
.922a		4c 48 a0	jmp $a048			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.922d						ShiftLeft:
.922d		38		sec				sec 								; common code, carry determines which way.
.922e		80 01		bra $9231			bra 	ShiftMain
.9230						ShiftRight:
.9230		18		clc				clc
.9231						ShiftMain:
.9231		fa		plx				plx 								; restore X
.9232		08		php				php 								; save direction
.9233		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9235		15 51		ora $51,x			ora 	NSStatus+1,x
.9237		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9238		0a		asl a				asl 	a
.9239		10 05		bpl $9240			bpl 	_NotRef
.923b		48		pha				pha
.923c		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.923f		68		pla				pla
.9240						_NotRef:
.9240		0a		asl a				asl 	a
.9241		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9243		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9245		15 79		ora $79,x			ora 	NSExponent+1,x
.9247		f0 03		beq $924c			beq 	_IntegerCode 				; if clear, then we have two integers
.9249		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.924c						_IntegerCode:
.924c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.924e		29 e0		and #$e0			and 	#$E0
.9250		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9252		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9254		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9256		d0 12		bne $926a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9258						_SMLoop:
.9258		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.925a		30 11		bmi $926d			bmi 	_SMExit 					; exit if done.
.925c		28		plp				plp 								; restore direction setting
.925d		08		php				php
.925e		90 05		bcc $9265			bcc 	_SMRight
.9260		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; shift left if CS
.9263		80 f3		bra $9258			bra 	_SMLoop
.9265						_SMRight:
.9265		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight 				; shift right if CC
.9268		80 ee		bra $9258			bra 	_SMLoop
.926a						_SMExit0:
.926a		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; return zero.
.926d						_SMExit:
.926d		28		plp				plp 								; throw direction
.926e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.926f						AddTopTwoStack:
.926f		18		clc				clc
.9270		b5 58		lda $58,x			lda		NSMantissa0,x
.9272		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9274		95 58		sta $58,x			sta 	NSMantissa0,x
.9276		b5 60		lda $60,x			lda		NSMantissa1,x
.9278		75 61		adc $61,x			adc 		NSMantissa1+1,x
.927a		95 60		sta $60,x			sta 	NSMantissa1,x
.927c		b5 68		lda $68,x			lda		NSMantissa2,x
.927e		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9280		95 68		sta $68,x			sta 	NSMantissa2,x
.9282		b5 70		lda $70,x			lda		NSMantissa3,x
.9284		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9286		95 70		sta $70,x			sta 	NSMantissa3,x
.9288		60		rts				rts
.9289						SubTopTwoStack:
.9289		38		sec				sec
.928a		b5 58		lda $58,x			lda		NSMantissa0,x
.928c		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.928e		95 58		sta $58,x			sta 	NSMantissa0,x
.9290		b5 60		lda $60,x			lda		NSMantissa1,x
.9292		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9294		95 60		sta $60,x			sta 	NSMantissa1,x
.9296		b5 68		lda $68,x			lda		NSMantissa2,x
.9298		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.929a		95 68		sta $68,x			sta 	NSMantissa2,x
.929c		b5 70		lda $70,x			lda		NSMantissa3,x
.929e		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.92a0		95 70		sta $70,x			sta 	NSMantissa3,x
.92a2		60		rts				rts
.92a3						AddInteger:
.92a3		fa		plx				plx
.92a4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92a6		15 51		ora $51,x			ora 	NSStatus+1,x
.92a8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92a9		0a		asl a				asl 	a
.92aa		10 05		bpl $92b1			bpl 	_NotRef
.92ac		48		pha				pha
.92ad		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b0		68		pla				pla
.92b1						_NotRef:
.92b1		0a		asl a				asl 	a 							; put MSB of type into A:7
.92b2		30 09		bmi $92bd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92b4		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92b6		15 79		ora $79,x			ora 	NSExponent+1,x
.92b8		f0 06		beq $92c0			beq 	_IntegerCode 				; if clear, then we have two integers
.92ba		4c b6 94	jmp $94b6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.92bd						_StringData:
.92bd		4c 7c 90	jmp $907c			jmp 	StringConcat							; at least one string - don't know both are strings.
.92c0						_IntegerCode:
.92c0						AddCode:
.92c0		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.92c2		55 51		eor $51,x			eor 	NSStatus+1,x
.92c4		10 a9		bpl $926f			bpl 	AddTopTwoStack
.92c6		20 89 92	jsr $9289			jsr 	SubTopTwoStack 				; do a physical subtraction
.92c9		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.92cb		10 07		bpl $92d4			bpl 	_AddExit
.92cd		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.92cf		95 50		sta $50,x			sta 	NSStatus,x
.92d1		20 89 9e	jsr $9e89			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.92d4						_AddExit:
.92d4		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; check for -0
.92d7		d0 02		bne $92db			bne 	_AddNonZero
.92d9		74 50		stz $50,x			stz 	NSStatus,x
.92db						_AddNonZero:
.92db		60		rts				rts
.92dc						SubInteger:
.92dc		fa		plx				plx
.92dd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92df		15 51		ora $51,x			ora 	NSStatus+1,x
.92e1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92e2		0a		asl a				asl 	a
.92e3		10 05		bpl $92ea			bpl 	_NotRef
.92e5		48		pha				pha
.92e6		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92e9		68		pla				pla
.92ea						_NotRef:
.92ea		0a		asl a				asl 	a 							; put MSB of type into A:7
.92eb		30 09		bmi $92f6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92ed		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92ef		15 79		ora $79,x			ora 	NSExponent+1,x
.92f1		f0 06		beq $92f9			beq 	_IntegerCode 				; if clear, then we have two integers
.92f3		4c bb 94	jmp $94bb			jmp 	FloatingPointSub 							; otherwise at least one float.
.92f6						_StringData:
.92f6		4c 52 a0	jmp $a052			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92f9						_IntegerCode:
.92f9		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.92fb		49 80		eor #$80			eor 	#$80
.92fd		95 51		sta $51,x			sta 	NSStatus+1,x
.92ff		80 bf		bra $92c0			bra 	AddCode 					; and do the same code as add.
.9301						AndInteger:
.9301		fa		plx				plx
.9302		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9304		15 51		ora $51,x			ora 	NSStatus+1,x
.9306		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9307		0a		asl a				asl 	a
.9308		10 05		bpl $930f			bpl 	_NotRef
.930a		48		pha				pha
.930b		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.930e		68		pla				pla
.930f						_NotRef:
.930f		0a		asl a				asl 	a
.9310		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9312		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9314		15 79		ora $79,x			ora 	NSExponent+1,x
.9316		f0 03		beq $931b			beq 	_IntegerCode 				; if clear, then we have two integers
.9318		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.931b						_IntegerCode:
.931b		b5 58		lda $58,x			lda		NSMantissa0,x
.931d		35 59		and $59,x			and 		NSMantissa0+1,x
.931f		95 58		sta $58,x			sta 	NSMantissa0,x
.9321		b5 60		lda $60,x			lda		NSMantissa1,x
.9323		35 61		and $61,x			and 		NSMantissa1+1,x
.9325		95 60		sta $60,x			sta 	NSMantissa1,x
.9327		b5 68		lda $68,x			lda		NSMantissa2,x
.9329		35 69		and $69,x			and 		NSMantissa2+1,x
.932b		95 68		sta $68,x			sta 	NSMantissa2,x
.932d		b5 70		lda $70,x			lda		NSMantissa3,x
.932f		35 71		and $71,x			and 		NSMantissa3+1,x
.9331		95 70		sta $70,x			sta 	NSMantissa3,x
.9333		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9335		60		rts				rts
.9336						OraInteger:
.9336		fa		plx				plx
.9337		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9339		15 51		ora $51,x			ora 	NSStatus+1,x
.933b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.933c		0a		asl a				asl 	a
.933d		10 05		bpl $9344			bpl 	_NotRef
.933f		48		pha				pha
.9340		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9343		68		pla				pla
.9344						_NotRef:
.9344		0a		asl a				asl 	a
.9345		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9347		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9349		15 79		ora $79,x			ora 	NSExponent+1,x
.934b		f0 03		beq $9350			beq 	_IntegerCode 				; if clear, then we have two integers
.934d		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.9350						_IntegerCode:
.9350		b5 58		lda $58,x			lda		NSMantissa0,x
.9352		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9354		95 58		sta $58,x			sta 	NSMantissa0,x
.9356		b5 60		lda $60,x			lda		NSMantissa1,x
.9358		15 61		ora $61,x			ora 		NSMantissa1+1,x
.935a		95 60		sta $60,x			sta 	NSMantissa1,x
.935c		b5 68		lda $68,x			lda		NSMantissa2,x
.935e		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9360		95 68		sta $68,x			sta 	NSMantissa2,x
.9362		b5 70		lda $70,x			lda		NSMantissa3,x
.9364		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9366		95 70		sta $70,x			sta 	NSMantissa3,x
.9368		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.936a		60		rts				rts
.936b						EorInteger:
.936b		fa		plx				plx
.936c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.936e		15 51		ora $51,x			ora 	NSStatus+1,x
.9370		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9371		0a		asl a				asl 	a
.9372		10 05		bpl $9379			bpl 	_NotRef
.9374		48		pha				pha
.9375		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9378		68		pla				pla
.9379						_NotRef:
.9379		0a		asl a				asl 	a
.937a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.937c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.937e		15 79		ora $79,x			ora 	NSExponent+1,x
.9380		f0 03		beq $9385			beq 	_IntegerCode 				; if clear, then we have two integers
.9382		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.9385						_IntegerCode:
.9385		b5 58		lda $58,x			lda		NSMantissa0,x
.9387		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9389		95 58		sta $58,x			sta 	NSMantissa0,x
.938b		b5 60		lda $60,x			lda		NSMantissa1,x
.938d		55 61		eor $61,x			eor 		NSMantissa1+1,x
.938f		95 60		sta $60,x			sta 	NSMantissa1,x
.9391		b5 68		lda $68,x			lda		NSMantissa2,x
.9393		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9395		95 68		sta $68,x			sta 	NSMantissa2,x
.9397		b5 70		lda $70,x			lda		NSMantissa3,x
.9399		55 71		eor $71,x			eor 		NSMantissa3+1,x
.939b		95 70		sta $70,x			sta 	NSMantissa3,x
.939d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.939f		60		rts				rts
.93a0						WordIndirect:
.93a0		fa		plx				plx
.93a1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93a3		15 51		ora $51,x			ora 	NSStatus+1,x
.93a5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93a6		0a		asl a				asl 	a
.93a7		10 05		bpl $93ae			bpl 	_NotRef
.93a9		48		pha				pha
.93aa		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93ad		68		pla				pla
.93ae						_NotRef:
.93ae		0a		asl a				asl 	a
.93af		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93b1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93b3		15 79		ora $79,x			ora 	NSExponent+1,x
.93b5		f0 03		beq $93ba			beq 	_IntegerCode 				; if clear, then we have two integers
.93b7		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.93ba						_IntegerCode:
.93ba		20 c0 92	jsr $92c0			jsr 	AddCode 					; add the two values
.93bd		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.93bf		95 50		sta $50,x			sta 	NSStatus,x
.93c1		60		rts				rts
.93c2						ByteIndirect:
.93c2		fa		plx				plx
.93c3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93c5		15 51		ora $51,x			ora 	NSStatus+1,x
.93c7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93c8		0a		asl a				asl 	a
.93c9		10 05		bpl $93d0			bpl 	_NotRef
.93cb		48		pha				pha
.93cc		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93cf		68		pla				pla
.93d0						_NotRef:
.93d0		0a		asl a				asl 	a
.93d1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93d3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93d5		15 79		ora $79,x			ora 	NSExponent+1,x
.93d7		f0 03		beq $93dc			beq 	_IntegerCode 				; if clear, then we have two integers
.93d9		4c 48 a0	jmp $a048			jmp 	TypeError 					; anything else, type mismatch.
.93dc						_IntegerCode:
.93dc		20 c0 92	jsr $92c0			jsr 	AddCode 					; add the two values
.93df		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.93e1		95 50		sta $50,x			sta 	NSStatus,x
.93e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.93e4						ConvertInt16:
.93e4		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.93e6		86 60		stx $60				stx 	NSMantissa1
.93e8		64 68		stz $68				stz 	NSMantissa2
.93ea		64 70		stz $70				stz 	NSMantissa3
.93ec		64 50		stz $50				stz 	NSStatus 					; positive integer
.93ee		a2 00		ldx #$00			ldx 	#0 							; stack level
.93f0		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.93f2		80 00		bra $93f4			bra 	ConvertInt32
.93f4						ConvertInt32:
.93f4		5a		phy				phy
.93f5		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93f7		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.93f9		10 08		bpl $9403			bpl 	_CI32NotNeg
.93fb		48		pha				pha
.93fc		a9 2d		lda #$2d			lda 	#'-'
.93fe		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9401		c8		iny				iny
.9402		68		pla				pla
.9403						_CI32NotNeg:
.9403		20 11 94	jsr $9411			jsr 	_CI32DivideConvert 			; recursive conversion
.9406		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9408		99 27 06	sta $0627,y			sta 	numberBuffer,y
.940b		7a		ply				ply
.940c		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.940e		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9410		60		rts				rts
.9411						_CI32DivideConvert:
.9411		e8		inx				inx 								; write to next slot up
.9412		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte 		 			; write the base out.
.9415		ca		dex				dex
.9416		20 3f 91	jsr $913f			jsr 	Int32Divide 				; divide
.9419		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.941b		48		pha				pha
.941c		20 fc 90	jsr $90fc			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.941f		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; is it zero ?
.9422		f0 05		beq $9429			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9424		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9426		20 11 94	jsr $9411			jsr 	_CI32DivideConvert 			; and recusrively call.
.9429						_CI32NoRecurse:
.9429		68		pla				pla 								; remainder
.942a		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.942c		90 02		bcc $9430			bcc 	_CI32NotHex
.942e		69 26		adc #$26			adc 	#6+32
.9430						_CI32NotHex:
.9430		69 30		adc #$30			adc 	#48
.9432		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9435		c8		iny				iny
.9436		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9437						PrecedenceLevel:
>9437		04					.byte	 4	; $00 <<
>9438		02					.byte	 2	; $01 <=
>9439		02					.byte	 2	; $02 <>
>943a		00					.byte	 0	; $03 !!3
>943b		00					.byte	 0	; $04 ><
>943c		02					.byte	 2	; $05 >=
>943d		04					.byte	 4	; $06 >>
>943e		00					.byte	 0	; $07 !!7
>943f		00					.byte	 0	; $08 !!8
>9440		00					.byte	 0	; $09 !!9
>9441		00					.byte	 0	; $0a !!10
>9442		00					.byte	 0	; $0b !!11
>9443		00					.byte	 0	; $0c !!12
>9444		00					.byte	 0	; $0d !!13
>9445		00					.byte	 0	; $0e !!14
>9446		00					.byte	 0	; $0f !!15
>9447		00					.byte	 0	; $10 @
>9448		00					.byte	 0	; $11 !!17
>9449		00					.byte	 0	; $12 !!18
>944a		00					.byte	 0	; $13 [
>944b		04					.byte	 4	; $14 \
>944c		00					.byte	 0	; $15 ]
>944d		01					.byte	 1	; $16 ^
>944e		00					.byte	 0	; $17 _
>944f		00					.byte	 0	; $18 `
>9450		00					.byte	 0	; $19 !!25
>9451		00					.byte	 0	; $1a !!26
>9452		00					.byte	 0	; $1b {
>9453		01					.byte	 1	; $1c |
>9454		00					.byte	 0	; $1d }
>9455		00					.byte	 0	; $1e ~
>9456		00					.byte	 0	; $1f [7m<7F>[m
>9457		00					.byte	 0	; $20
>9458		05					.byte	 5	; $21 !
>9459		00					.byte	 0	; $22 "
>945a		00					.byte	 0	; $23 #
>945b		05					.byte	 5	; $24 $
>945c		04					.byte	 4	; $25 %
>945d		01					.byte	 1	; $26 &
>945e		00					.byte	 0	; $27 '
>945f		00					.byte	 0	; $28 (
>9460		00					.byte	 0	; $29 )
>9461		04					.byte	 4	; $2a *
>9462		03					.byte	 3	; $2b +
>9463		00					.byte	 0	; $2c ,
>9464		03					.byte	 3	; $2d -
>9465		00					.byte	 0	; $2e .
>9466		04					.byte	 4	; $2f /
>9467		00					.byte	 0	; $30 0
>9468		00					.byte	 0	; $31 1
>9469		00					.byte	 0	; $32 2
>946a		00					.byte	 0	; $33 3
>946b		00					.byte	 0	; $34 4
>946c		00					.byte	 0	; $35 5
>946d		00					.byte	 0	; $36 6
>946e		00					.byte	 0	; $37 7
>946f		00					.byte	 0	; $38 8
>9470		00					.byte	 0	; $39 9
>9471		00					.byte	 0	; $3a :
>9472		00					.byte	 0	; $3b ;
>9473		02					.byte	 2	; $3c <
>9474		02					.byte	 2	; $3d =
>9475		02					.byte	 2	; $3e >
>9476		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9477						EvaluateExpressionAt0:
.9477		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9479						EvaluateExpression:
.9479		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.947b						EvaluateExpressionAtPrecedence:
.947b		48		pha				pha 								; save precedence level
.947c		20 c3 98	jsr $98c3			jsr 	EvaluateTerm 				; evaluate term into level X.
.947f		68		pla				pla 								; restore precedence level.
.9480						_EXPRLoop:
.9480		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9482		b1 30		lda ($30),y			lda 	(codePtr),y
.9484		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9486		b0 25		bcs $94ad			bcs 	_EXPRExit
.9488		da		phx				phx 								; read the operator precedence
.9489		aa		tax				tax
.948a		bd 37 94	lda $9437,x			lda 	PrecedenceLevel,x
.948d		fa		plx				plx
.948e		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9490		f0 1b		beq $94ad			beq 	_EXPRExit
.9492		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9494		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9496		c5 37		cmp $37				cmp 	zTemp0+1
.9498		b0 13		bcs $94ad			bcs		_EXPRExit 					; if current >= operator exit
.949a		48		pha				pha 								; save current precedence.
.949b		b1 30		lda ($30),y			lda 	(codePtr),y
.949d		c8		iny				iny
.949e		48		pha				pha
.949f		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.94a1		e8		inx				inx 								; work out the right hand side.
.94a2		20 7b 94	jsr $947b			jsr 	EvaluateExpressionAtPrecedence
.94a5		ca		dex				dex
.94a6		68		pla				pla 								; get operator, call the code.
.94a7		20 b0 94	jsr $94b0			jsr 	_EXPRCaller
.94aa		68		pla				pla 								; restore precedence level
.94ab		80 d3		bra $9480			bra 	_EXPRLoop 					; and go round.
.94ad						_EXPRExit:
.94ad		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.94af		60		rts				rts
.94b0						_EXPRCaller:
.94b0		da		phx				phx 								; save on stack, first thing is to restore it
.94b1		0a		asl a				asl 	a 							; double so can use vectors into X
.94b2		aa		tax				tax
.94b3		7c 74 8c	jmp ($8c74,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.94b6						FloatingPointAdd:
.94b6		20 2c 96	jsr $962c			jsr 	FloatPrepare 				; prepare for floats
.94b9		80 09		bra $94c4			bra 	FloatAdd
.94bb						FloatingPointSub:
.94bb		20 2c 96	jsr $962c			jsr 	FloatPrepare 				; prepare for floats
.94be						FloatSubtract:
.94be		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.94c0		49 80		eor #$80			eor 	#$80
.94c2		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.94c4						FloatAdd:
.94c4		48		pha				pha
.94c5		5a		phy				phy
.94c6		20 3b 96	jsr $963b			jsr 	NSNormalise 				; normalise S[X]
.94c9		f0 51		beq $951c			beq 	_FAReturn1
.94cb		e8		inx				inx 								; normalise S[X+1]
.94cc		20 3b 96	jsr $963b			jsr 	NSNormalise
.94cf		ca		dex				dex
.94d0		c9 00		cmp #$00			cmp 	#0
.94d2		f0 60		beq $9534			beq 	_FAExit 					; if so, just return A
.94d4		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.94d6		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.94d8		f0 18		beq $94f2			beq 	_FAExponentsEqual
.94da		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.94dc		a8		tay				tay
.94dd		38		sec				sec 								; do a signed comparison of the exponents.
.94de		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.94e0		50 02		bvc $94e4			bvc 	_FANoSignedChange
.94e2		49 80		eor #$80			eor 	#$80
.94e4						_FANoSignedChange:
.94e4		29 80		and #$80			and 	#$80
.94e6		10 02		bpl $94ea			bpl 	_FAHaveMax
.94e8		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.94ea						_FAHaveMax:
.94ea		20 37 95	jsr $9537			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.94ed		e8		inx				inx
.94ee		20 37 95	jsr $9537			jsr 	_FAShiftToExponent
.94f1		ca		dex				dex
.94f2						_FAExponentsEqual:
.94f2		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.94f4		55 51		eor $51,x			eor 	NSStatus+1,x
.94f6		30 0e		bmi $9506			bmi 	_FADifferentSigns
.94f8		20 6f 92	jsr $926f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.94fb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.94fd		10 35		bpl $9534			bpl 	_FAExit 					; if no, we are done.
.94ff		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9502		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9504		80 2e		bra $9534			bra 	_FAExit
.9506						_FADifferentSigns:
.9506		20 89 92	jsr $9289			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9509		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.950b		10 06		bpl $9513			bpl 	_FACheckZero 				; if no, check for -0
.950d		20 82 9e	jsr $9e82			jsr 	NSMNegate 					; netate result
.9510		20 89 9e	jsr $9e89			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9513						_FACheckZero:
.9513		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero	 				; check for -0
.9516		d0 1c		bne $9534			bne 	_FAExit
.9518		74 50		stz $50,x			stz 	NSStatus,x
.951a		80 18		bra $9534			bra 	_FAExit
.951c						_FAReturn1:
.951c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.951e		95 58		sta $58,x			sta 	NSMantissa0,x
.9520		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9522		95 60		sta $60,x			sta 	NSMantissa1,x
.9524		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9526		95 68		sta $68,x			sta 	NSMantissa2,x
.9528		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.952a		95 70		sta $70,x			sta 	NSMantissa3,x
.952c		b5 79		lda $79,x			lda 	NSExponent+1,x
.952e		95 78		sta $78,x			sta 	NSExponent,x
.9530		b5 51		lda $51,x			lda 	NSStatus+1,x
.9532		95 50		sta $50,x			sta 	NSStatus,x
.9534						_FAExit:
.9534		7a		ply				ply
.9535		68		pla				pla
.9536		60		rts				rts
.9537						_FAShiftToExponent:
.9537						_FAShiftToExponent2:
.9537		98		tya				tya 								; compare Y to exponent
.9538		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.953a		f0 07		beq $9543			beq 	_FASEExit 					; exit if so.
.953c		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight	 			; shift the mantissa right
.953f		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9541		80 f4		bra $9537			bra 	_FAShiftToExponent2
.9543						_FASEExit:
.9543		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9544						CompareFloat:
.9544		20 be 94	jsr $94be			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9547		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9549		29 f8		and #$f8			and 	#$F8
.954b		15 68		ora $68,x			ora 	NSMantissa2,x
.954d		15 70		ora $70,x			ora 	NSMantissa3,x
.954f		f0 08		beq $9559			beq 	_FCExit 					; zero, so approximately identical
.9551		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9553		34 50		bit $50,x			bit 	NSStatus,x
.9555		10 02		bpl $9559			bpl 	_FCExit
.9557						_FCNegative:
.9557		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9559						_FCExit:
.9559		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.955a						FDivideCommand:
.955a		fa		plx				plx	 								; restore stack position
.955b		20 2c 96	jsr $962c			jsr 	FloatPrepare 				; prepare for floats
.955e						FloatDivide:
.955e		48		pha				pha
.955f		e8		inx				inx
.9560		20 3b 96	jsr $963b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9563		ca		dex				dex
.9564		c9 00		cmp #$00			cmp 	#0
.9566		f0 1d		beq $9585			beq 	_FDZero
.9568		20 3b 96	jsr $963b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.956b		f0 16		beq $9583			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.956d		20 60 91	jsr $9160			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9570		20 fc 90	jsr $90fc			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9573		20 3b 96	jsr $963b			jsr		NSNormalise 				; renormalise
.9576		20 f0 91	jsr $91f0			jsr 	CalculateSign 				; calculate result sign
.9579		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.957b		38		sec				sec
.957c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.957e		38		sec				sec
.957f		e9 1e		sbc #$1e			sbc 	#30
.9581		95 78		sta $78,x			sta 	NSExponent,x
.9583						_FDExit:
.9583		68		pla				pla
.9584		60		rts				rts
.9585						_FDZero:
.9585		a9 03		lda #$03		lda	#3
.9587		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.958a						FloatFractionalPart:
.958a		5a		phy				phy
.958b		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.958d		29 7f		and #$7f			and 	#$7F
.958f		95 50		sta $50,x			sta 	NSStatus,x
.9591		20 3b 96	jsr $963b			jsr 	NSNormalise
.9594		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9596		38		sec				sec
.9597		e9 e0		sbc #$e0			sbc 	#$E0
.9599		90 29		bcc $95c4			bcc 	_FFPExit 					; already fractional
.959b		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.959d		b0 22		bcs $95c1			bcs 	_FFPZero
.959f		a8		tay				tay 								; put count to do in Y
.95a0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.95a2		20 c6 95	jsr $95c6			jsr 	_FFPPartial
.95a5		95 70		sta $70,x			sta 	NSMantissa3,x
.95a7		b5 68		lda $68,x			lda 	NSMantissa2,x
.95a9		20 c6 95	jsr $95c6			jsr 	_FFPPartial
.95ac		95 68		sta $68,x			sta 	NSMantissa2,x
.95ae		b5 60		lda $60,x			lda 	NSMantissa1,x
.95b0		20 c6 95	jsr $95c6			jsr 	_FFPPartial
.95b3		95 60		sta $60,x			sta 	NSMantissa1,x
.95b5		b5 58		lda $58,x			lda 	NSMantissa0,x
.95b7		20 c6 95	jsr $95c6			jsr 	_FFPPartial
.95ba		95 58		sta $58,x			sta 	NSMantissa0,x
.95bc		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; zeroed check.
.95bf		d0 03		bne $95c4			bne 	_FFPExit
.95c1						_FFPZero:
.95c1		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.95c4						_FFPExit:
.95c4		7a		ply				ply
.95c5		60		rts				rts
.95c6						_FFPPartial:
.95c6		c0 00		cpy #$00			cpy 	#0 							; no more to do
.95c8		f0 17		beq $95e1			beq 	_FFFPPExit
.95ca		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.95cc		b0 0c		bcs $95da			bcs 	_FFFPPWholeByte
.95ce		5a		phy				phy
.95cf						_FFFPPLeft:
.95cf		0a		asl a				asl 	a
.95d0		88		dey				dey
.95d1		d0 fc		bne $95cf			bne 	_FFFPPLeft
.95d3		7a		ply				ply
.95d4						_FFFPPRight:
.95d4		4a		lsr a				lsr 	a
.95d5		88		dey				dey
.95d6		d0 fc		bne $95d4			bne 	_FFFPPRight
.95d8		80 07		bra $95e1			bra 	_FFFPPExit
.95da						_FFFPPWholeByte:
.95da		98		tya				tya 								; subtract 8 from count
.95db		38		sec				sec
.95dc		e9 08		sbc #$08			sbc 	#8
.95de		a8		tay				tay
.95df		a9 00		lda #$00			lda 	#0 							; and clear all
.95e1						_FFFPPExit:
.95e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.95e2						FloatIntegerPart:
.95e2		48		pha				pha
.95e3		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.95e5		f0 1d		beq $9604			beq 	_FIPExit 					; if so do nothing
.95e7		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; is it zero ?
.95ea		f0 15		beq $9601			beq 	_FIPZero 					; if so return zero.
.95ec		20 3b 96	jsr $963b			jsr 	NSNormalise 				; normalise
.95ef		f0 10		beq $9601			beq 	_FIPZero 					; normalised to zero, exit zero
.95f1						_FIPShift:
.95f1		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.95f3		10 07		bpl $95fc			bpl 	_FIPCheckZero
.95f5		20 d9 9e	jsr $9ed9			jsr 	NSMShiftRight 				; shift mantissa right
.95f8		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.95fa		80 f5		bra $95f1			bra 	_FIPShift
.95fc						_FIPCheckZero:
.95fc		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; avoid -0 problem
.95ff		d0 03		bne $9604			bne 	_FIPExit 					; set to zero if mantissa zero.
.9601						_FIPZero:
.9601		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.9604						_FIPExit:
.9604		68		pla				pla
.9605		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9606						FloatingPointMultiply:
.9606		20 2c 96	jsr $962c			jsr 	FloatPrepare 				; prepare for floats
.9609						FloatMultiply:
.9609		48		pha				pha
.960a		20 3b 96	jsr $963b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.960d		f0 18		beq $9627			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.960f		e8		inx				inx
.9610		20 3b 96	jsr $963b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9613		ca		dex				dex
.9614		c9 00		cmp #$00			cmp 	#0
.9616		f0 0c		beq $9624			beq 	_FDSetZero
.9618		20 b2 91	jsr $91b2			jsr 	MultiplyShort 				; calculate the result.
.961b		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.961d		18		clc				clc
.961e		75 79		adc $79,x			adc 	NSExponent+1,x
.9620		95 78		sta $78,x			sta 	NSExponent,x
.9622		80 03		bra $9627			bra 	_FDExit
.9624						_FDSetZero:
.9624		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; return 0
.9627						_FDExit:
.9627		20 3b 96	jsr $963b			jsr 	NSNormalise 				; normalise the result
.962a		68		pla				pla
.962b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.962c						FloatPrepare:
.962c		20 37 97	jsr $9737			jsr 	DereferenceTopTwo 			; dereference the top two values
.962f		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9631		15 51		ora $51,x			ora 	NSStatus+1,x
.9633		29 10		and #$10			and 	#NSBIsString
.9635		d0 01		bne $9638			bne 	_FDType
.9637		60		rts				rts
.9638						_FDType:
.9638		4c 48 a0	jmp $a048			jmp 	TypeError
.963b						NSNormalise:
.963b		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.963d		29 80		and #$80			and 	#$80
.963f		09 08		ora #$08			ora 	#NSTFloat
.9641		95 50		sta $50,x			sta 	NSStatus,x
.9643		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; if zero exit
.9646		d0 07		bne $964f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9648		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.964a		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.964c		a9 00		lda #$00			lda 	#0 							; set Z flag
.964e		60		rts				rts
.964f						_NSNormaliseOptimise:
.964f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9651		d0 19		bne $966c			bne 	_NSNormaliseLoop
.9653		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9655		30 15		bmi $966c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9657		95 70		sta $70,x			sta 	NSMantissa3,x
.9659		b5 60		lda $60,x			lda 	NSMantissa1,x
.965b		95 68		sta $68,x			sta 	NSMantissa2,x
.965d		b5 58		lda $58,x			lda 	NSMantissa0,x
.965f		95 60		sta $60,x			sta 	NSMantissa1,x
.9661		74 58		stz $58,x			stz 	NSMantissa0,x
.9663		b5 78		lda $78,x			lda 	NSExponent,x
.9665		38		sec				sec
.9666		e9 08		sbc #$08			sbc 	#8
.9668		95 78		sta $78,x			sta 	NSExponent,x
.966a		80 e3		bra $964f			bra 	_NSNormaliseOptimise
.966c						_NSNormaliseLoop:
.966c		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.966e		70 07		bvs $9677			bvs 	_NSNExit 					; exit if so with Z flag clear
.9670		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; shift mantissa left
.9673		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9675		80 f5		bra $966c			bra 	_NSNormaliseLoop
.9677						_NSNExit:
.9677		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9679		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.967a						AssignNumber:
.967a		5a		phy				phy
.967b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.967d		85 36		sta $36				sta 	zTemp0
.967f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9681		85 37		sta $37				sta 	zTemp0+1
.9683		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9685		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9687		95 50		sta $50,x			sta 	NSStatus,x
.9689		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.968b		c9 08		cmp #$08			cmp 	#NSTFloat
.968d		f0 24		beq $96b3			beq 	_ANFloat
.968f		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9691		f0 03		beq $9696			beq		_ANNotFloat
.9693		4c 43 a0	jmp $a043			jmp 	RangeError					; if it is, report an error.
.9696						_ANNotFloat:
.9696		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9698		29 03		and #$03			and 	#3
.969a		d0 05		bne $96a1			bne 	_ANByteWord
.969c		20 be 96	jsr $96be			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.969f		80 1b		bra $96bc			bra 	_ANExit
.96a1						_ANByteWord:
.96a1		48		pha				pha 								; save count
.96a2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.96a4		92 36		sta ($36)			sta 	(zTemp0)
.96a6		68		pla				pla
.96a7		c9 01		cmp #$01			cmp	 	#1
.96a9		f0 11		beq $96bc			beq 	_ANExit
.96ab		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.96ad		a0 01		ldy #$01			ldy 	#1
.96af		91 36		sta ($36),y			sta 	(zTemp0),y
.96b1		80 09		bra $96bc			bra 	_ANExit
.96b3						_ANFloat:
.96b3		20 be 96	jsr $96be			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.96b6		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.96b8		a0 04		ldy #$04			ldy 	#4
.96ba		91 36		sta ($36),y			sta 	(zTemp0),y
.96bc						_ANExit:
.96bc		7a		ply				ply
.96bd		60		rts				rts
.96be						_ANCopy4PackSign:
.96be		a0 03		ldy #$03			ldy 	#3
.96c0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.96c2		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.96c4		15 71		ora $71,x			ora 	NSMantissa3+1,x
.96c6		91 36		sta ($36),y			sta 	(zTemp0),y
.96c8		88		dey				dey
.96c9		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.96cb		91 36		sta ($36),y			sta 	(zTemp0),y
.96cd		88		dey				dey
.96ce		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96d0		91 36		sta ($36),y			sta 	(zTemp0),y
.96d2		88		dey				dey
.96d3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.96d5		91 36		sta ($36),y			sta 	(zTemp0),y
.96d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.96d8						AssignString:
.96d8		5a		phy				phy
.96d9		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.96db		85 38		sta $38				sta 	zTemp1
.96dd		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96df		85 39		sta $39				sta 	zTemp1+1
.96e1		b5 58		lda $58,x			lda 	NSMantissa0,x
.96e3		85 36		sta $36				sta 	zTemp0
.96e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.96e7		85 37		sta $37				sta 	zTemp0+1
.96e9		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.96eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.96ed		f0 23		beq $9712			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.96ef		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.96f0		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.96f2		e9 02		sbc #$02			sbc 	#2
.96f4		85 3c		sta $3c				sta 	zsTemp
.96f6		a0 01		ldy #$01			ldy 	#1
.96f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.96fa		e9 00		sbc #$00			sbc 	#0
.96fc		85 3d		sta $3d				sta 	zsTemp+1
.96fe		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9700						_ASGetLength:
.9700		c8		iny				iny
.9701		b1 38		lda ($38),y			lda 	(zTemp1),y
.9703		d0 fb		bne $9700			bne 	_ASGetLength
.9705		98		tya				tya 								; is this length <= current length
.9706		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9708		90 1e		bcc $9728			bcc 	_ASCopyString
.970a		f0 1c		beq $9728			beq 	_ASCopyString
.970c		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.970e		a0 01		ldy #$01			ldy 	#1
.9710		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9712						_ASNewStringRequired:
.9712		e8		inx				inx 								; concrete the new string.
.9713		20 20 b0	jsr $b020			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9716		ca		dex				dex
.9717		18		clc				clc
.9718		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.971a		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.971c		92 36		sta ($36)			sta 	(zTemp0)
.971e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9720		69 00		adc #$00			adc 	#0
.9722		a0 01		ldy #$01			ldy 	#1
.9724		91 36		sta ($36),y			sta 	(zTemp0),y
.9726		80 0d		bra $9735			bra 	_ASExit
.9728						_ASCopyString:
.9728		a0 00		ldy #$00			ldy 	#0
.972a						_ASCopyLoop:
.972a		b1 38		lda ($38),y			lda 	(zTemp1),y
.972c		c8		iny				iny
.972d		c8		iny				iny
.972e		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9730		88		dey				dey
.9731		c9 00		cmp #$00			cmp 	#0
.9733		d0 f5		bne $972a			bne 	_ASCopyLoop
.9735						_ASExit:
.9735		7a		ply				ply
.9736		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9737						DereferenceTopTwo:
.9737		e8		inx				inx
.9738		20 3c 97	jsr $973c			jsr 	Dereference 				; deref x+1
.973b		ca		dex				dex  								; falls through to deref x
.973c						Dereference:
.973c		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.973e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9740		f0 48		beq $978a			beq 	_DRFExit 					; not a reference, so exit.
.9742		5a		phy				phy
.9743		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9745		85 36		sta $36				sta 	zTemp0
.9747		b5 60		lda $60,x			lda 	NSMantissa1,x
.9749		85 37		sta $37				sta 	zTemp0+1
.974b		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.974d		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.974f		95 58		sta $58,x			sta 	NSMantissa0,x
.9751		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9753		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9755		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9757		f0 0e		beq $9767			beq 	_DRFDereferenceTwo
.9759		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.975b		f0 2f		beq $978c			beq 	_DRFFull
.975d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.975f		29 03		and #$03			and 	#3
.9761		f0 29		beq $978c			beq 	_DRFFull 					; the whole word
.9763		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9765		f0 06		beq $976d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9767						_DRFDereferenceTwo:
.9767		a0 01		ldy #$01			ldy 	#1
.9769		b1 36		lda ($36),y			lda 	(zTemp0),y
.976b		95 60		sta $60,x			sta 	NSMantissa1,x
.976d						_DRFClear23:
.976d		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.976f		74 70		stz $70,x			stz 	NSMantissa3,x
.9771		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9773		29 18		and #$18			and 	#NSBTypeMask
.9775		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9777		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9779		d0 0e		bne $9789			bne 	_DRFNotString
.977b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.977d		15 60		ora $60,x			ora 	NSMantissa1,x
.977f		d0 08		bne $9789			bne 	_DRFNotString
.9781		a9 8b		lda #$8b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9783		95 58		sta $58,x			sta 	NSMantissa0,x
.9785		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.9787		95 60		sta $60,x			sta 	NSMantissa1,x
.9789						_DRFNotString
.9789		7a		ply				ply 								; restore Y and exit
.978a						_DRFExit:
.978a		60		rts				rts
.978b						_DRFNullString:
>978b		00						.byte 	0
.978c						_DRFFull:
.978c		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.978e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9790		95 60		sta $60,x			sta 	NSMantissa1,x
.9792		c8		iny				iny
.9793		b1 36		lda ($36),y			lda 	(zTemp0),y
.9795		95 68		sta $68,x			sta 	NSMantissa2,x
.9797		c8		iny				iny
.9798		b1 36		lda ($36),y			lda 	(zTemp0),y
.979a		95 70		sta $70,x			sta 	NSMantissa3,x
.979c		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.979e		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.97a0		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.97a2		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.97a4		f0 05		beq $97ab			beq 	_DRFNoExponent
.97a6		c8		iny				iny 								; if not, read the exponent as well.
.97a7		b1 36		lda ($36),y			lda 	(zTemp0),y
.97a9		95 78		sta $78,x			sta 	NSExponent,x
.97ab						_DRFNoExponent:
.97ab		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.97ad		10 0a		bpl $97b9			bpl 	_DRFExit2 					; if not, then exit.
.97af		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.97b1		95 70		sta $70,x			sta 	NSMantissa3,x
.97b3		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.97b5		09 80		ora #$80			ora 	#NSBIsNegative
.97b7		95 50		sta $50,x			sta 	NSStatus,x
.97b9						_DRFExit2:
.97b9		7a		ply				ply
.97ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.97bb						EncodeNumberStart:
.97bb		38		sec				sec
.97bc		80 01		bra $97bf			bra 	EncodeNumberContinue+1
.97be						EncodeNumberContinue:
.97be		18		clc				clc
.97bf						EncodeNumber:
.97bf		08		php				php 								; save reset flag.
.97c0		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.97c2		f0 12		beq $97d6			beq 	_ENIsOkay
.97c4		c9 30		cmp #$30			cmp 	#"0"
.97c6		90 04		bcc $97cc			bcc 	_ENBadNumber
.97c8		c9 3a		cmp #$3a			cmp 	#"9"+1
.97ca		90 0a		bcc $97d6			bcc 	_ENIsOkay
.97cc						_ENBadNumber:
.97cc		28		plp				plp 								; throw saved reset
.97cd		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.97d0		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97d2		f0 7b		beq $984f			beq 	_ENConstructFinal
.97d4						_ENFail:
.97d4		18		clc				clc 								; not allowed
.97d5		60		rts				rts
.97d6						_ENIsOkay:
.97d6		28		plp				plp 								; are we restarting
.97d7		90 15		bcc $97ee			bcc 	_ENNoRestart
.97d9						_ENStartEncode:
.97d9		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.97db		f0 0c		beq $97e9			beq 	_ENFirstDP
.97dd		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.97df		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte 					; in single byte mode.
.97e2		a9 01		lda #$01			lda 	#ESTA_Low
.97e4						_ENExitChange:
.97e4		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.97e7		38		sec				sec
.97e8		60		rts				rts
.97e9						_ENFirstDP:
.97e9		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; clear integer part
.97ec		80 3c		bra $982a			bra 	_ESTASwitchFloat			; go straight to float and exi
.97ee						_ENNoRestart:
.97ee		48		pha				pha 								; save digit or DP on stack.
.97ef		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.97f2		c9 01		cmp #$01			cmp 	#ESTA_Low
.97f4		f0 09		beq $97ff			beq  	_ESTALowState
.97f6		c9 02		cmp #$02			cmp 	#ESTA_High
.97f8		f0 26		beq $9820			beq 	_ESTAHighState
.97fa		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97fc		f0 38		beq $9836			beq 	_ESTADecimalState
>97fe		db						.byte 	$DB 						; causes a break in the emulator
.97ff						_ESTALowState:
.97ff		68		pla				pla 								; get value back
.9800		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9802		f0 26		beq $982a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9804		29 0f		and #$0f			and 	#15 						; make digit
.9806		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9809		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.980b		0a		asl a				asl 	a
.980c		0a		asl a				asl 	a
.980d		75 58		adc $58,x			adc 	NSMantissa0,x
.980f		0a		asl a				asl 	a
.9810		6d 06 04	adc $0406			adc 	digitTemp
.9813		95 58		sta $58,x			sta 	NSMantissa0,x
.9815		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9817		90 05		bcc $981e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9819		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.981b		8d 05 04	sta $0405			sta 	encodeState
.981e						_ESTANoSwitch:
.981e		38		sec				sec
.981f		60		rts				rts
.9820						_ESTAHighState:
.9820		68		pla				pla 								; get value back
.9821		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9823		f0 05		beq $982a			beq 	_ESTASwitchFloat
.9825		20 83 98	jsr $9883			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9828		38		sec				sec
.9829		60		rts				rts
.982a						_ESTASwitchFloat:
.982a		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.982d		e8		inx				inx 								; zero the decimal additive.
.982e		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.9831		ca		dex				dex
.9832		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9834		80 ae		bra $97e4			bra 	_ENExitChange
.9836						_ESTADecimalState:
.9836		68		pla				pla 								; digit.
.9837		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9839		f0 99		beq $97d4			beq 	_ENFail
.983b		e8		inx				inx 								; put digit into fractional part of X+1
.983c		20 83 98	jsr $9883			jsr 	ESTAShiftDigitIntoMantissa
.983f		ca		dex				dex
.9840		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9843		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9846		c9 0b		cmp #$0b			cmp 	#11
.9848		f0 02		beq $984c			beq 	_ESTADSFail
.984a		38		sec				sec
.984b		60		rts				rts
.984c						_ESTADSFail:
.984c		4c 43 a0	jmp $a043			jmp 	RangeError
.984f						_ENConstructFinal:
.984f		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9852		f0 2d		beq $9881			beq 	_ENCFExit 					; no decimals
.9854		5a		phy				phy
.9855		0a		asl a				asl 	a 							; x 4 and CLC
.9856		0a		asl a				asl 	a
.9857		6d 07 04	adc $0407			adc 	decimalCount
.985a		a8		tay				tay
.985b		b9 02 a0	lda $a002,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.985e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9860		b9 03 a0	lda $a003,y			lda 	DecimalScalarTable-5+1,y
.9863		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9865		b9 04 a0	lda $a004,y			lda 	DecimalScalarTable-5+2,y
.9868		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.986a		b9 05 a0	lda $a005,y			lda 	DecimalScalarTable-5+3,y
.986d		95 72		sta $72,x			sta 	NSMantissa3+2,x
.986f		b9 06 a0	lda $a006,y			lda 	DecimalScalarTable-5+4,y
.9872		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9874		a9 08		lda #$08			lda 	#NSTFloat
.9876		95 52		sta $52,x			sta 	NSStatus+2,x
.9878		7a		ply				ply
.9879		e8		inx				inx 								; multiply decimal const by decimal scalar
.987a		20 09 96	jsr $9609			jsr 	FloatMultiply
.987d		ca		dex				dex
.987e		20 c4 94	jsr $94c4			jsr 	FloatAdd 					; add to integer part.
.9881						_ENCFExit:
.9881		18		clc				clc 								; reject the digit.
.9882		60		rts				rts
.9883						ESTAShiftDigitIntoMantissa:
.9883		29 0f		and #$0f			and 	#15 						; save digit
.9885		48		pha				pha
.9886		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9888		48		pha				pha
.9889		b5 68		lda $68,x			lda 	NSMantissa2,x
.988b		48		pha				pha
.988c		b5 60		lda $60,x			lda 	NSMantissa1,x
.988e		48		pha				pha
.988f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9891		48		pha				pha
.9892		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 2
.9895		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 4
.9898		18		clc				clc 								; pop mantissa and add
.9899		68		pla				pla
.989a		75 58		adc $58,x			adc 	NSMantissa0,x
.989c		95 58		sta $58,x			sta 	NSMantissa0,x
.989e		68		pla				pla
.989f		75 60		adc $60,x			adc 	NSMantissa1,x
.98a1		95 60		sta $60,x			sta 	NSMantissa1,x
.98a3		68		pla				pla
.98a4		75 68		adc $68,x			adc 	NSMantissa2,x
.98a6		95 68		sta $68,x			sta 	NSMantissa2,x
.98a8		68		pla				pla
.98a9		75 70		adc $70,x			adc 	NSMantissa3,x
.98ab		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.98ad		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 10
.98b0		68		pla				pla 								; add digit
.98b1		18		clc				clc
.98b2		75 58		adc $58,x			adc 	NSMantissa0,x
.98b4		95 58		sta $58,x			sta 	NSMantissa0,x
.98b6		90 0a		bcc $98c2			bcc 	_ESTASDExit
.98b8		f6 60		inc $60,x			inc 	NSMantissa1,x
.98ba		d0 06		bne $98c2			bne 	_ESTASDExit
.98bc		f6 68		inc $68,x			inc 	NSMantissa2,x
.98be		d0 02		bne $98c2			bne 	_ESTASDExit
.98c0		f6 70		inc $70,x			inc 	NSMantissa3,x
.98c2						_ESTASDExit:
.98c2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.98c3						EvaluateTerm:
.98c3		b1 30		lda ($30),y			lda 	(codePtr),y
.98c5		30 18		bmi $98df			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.98c7		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.98c9		b0 6c		bcs $9937			bcs 	_ETVariable
.98cb		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.98cd		90 6b		bcc $993a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.98cf		c9 3a		cmp #$3a			cmp 	#'9'+1
.98d1		b0 67		bcs $993a			bcs 	_ETPuncUnary
.98d3		20 bb 97	jsr $97bb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.98d6						_ETNumber:
.98d6		c8		iny				iny 								; keep encoding until we have the numbers
.98d7		b1 30		lda ($30),y			lda 	(codePtr),y
.98d9		20 be 97	jsr $97be			jsr 	EncodeNumberContinue
.98dc		b0 f8		bcs $98d6			bcs 	_ETNumber 					; go back if accepted.
.98de		60		rts				rts
.98df						_ETCheckUnary:
.98df		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.98e1		f0 3f		beq $9922			beq 	_ETString
.98e3		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.98e5		f0 12		beq $98f9			beq 	_ETHexConstant
.98e7		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.98e9		90 0b		bcc $98f6			bcc 	_ETSyntaxError
.98eb		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.98ed		b0 07		bcs $98f6			bcs 	_ETSyntaxError
.98ef		da		phx				phx 								; push X on the stack
.98f0		0a		asl a				asl 	a 							; put vector x 2 into X
.98f1		aa		tax				tax
.98f2		c8		iny				iny 								; consume unary function token
.98f3		7c f4 8c	jmp ($8cf4,x)			jmp 	(VectorSet0,x) 				; and do it.
.98f6						_ETSyntaxError:
.98f6		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.98f9						_ETHexConstant:
.98f9		c8		iny				iny 								; skip #
.98fa		c8		iny				iny 								; skip count
.98fb		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; clear result
.98fe						_ETHLoop:
.98fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9900		c8		iny				iny 								; and consume
.9901		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9903		f0 1c		beq $9921			beq 	_ETHExit
.9905		48		pha				pha 								; save on stack.
.9906		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 2
.9909		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 4
.990c		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 8
.990f		20 cf 9e	jsr $9ecf			jsr 	NSMShiftLeft 				; x 16
.9912		68		pla				pla 								; ASCII
.9913		c9 41		cmp #$41			cmp 	#'A'
.9915		90 02		bcc $9919			bcc 	_ETHNotChar
.9917		e9 07		sbc #$07			sbc 	#7
.9919						_ETHNotChar:
.9919		29 0f		and #$0f			and 	#15 						; digit now
.991b		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.991d		95 58		sta $58,x			sta 	NSMantissa0,x
.991f		80 dd		bra $98fe			bra 	_ETHLoop 					; go round.
.9921						_ETHExit:
.9921		60		rts				rts
.9922						_ETString:
.9922		c8		iny				iny 								; look at length
.9923		b1 30		lda ($30),y			lda 	(codePtr),y
.9925		48		pha				pha
.9926		c8		iny				iny 								; first character
.9927		20 48 a6	jsr $a648			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.992a		68		pla				pla 								; restore count and save
.992b		85 36		sta $36				sta 	zTemp0
.992d		98		tya				tya 								; add length to Y to skip it.
.992e		18		clc				clc
.992f		65 36		adc $36				adc 	zTemp0
.9931		a8		tay				tay
.9932		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9934		95 50		sta $50,x			sta 	NSStatus,x
.9936		60		rts				rts
.9937						_ETVariable:
.9937		4c 8c 99	jmp $998c			jmp 	VariableHandler
.993a						_ETPuncUnary:
.993a		c8		iny				iny 								; consume the unary character
.993b		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.993d		f0 2b		beq $996a			beq 	_ETUnaryNegate
.993f		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9941		f0 36		beq $9979			beq 	_ETDereference
.9943		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9945		f0 3e		beq $9985			beq 	_ETParenthesis
.9947		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9949		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.994b		f0 06		beq $9953			beq 	_ETIndirection
.994d		e6 36		inc $36				inc 	zTemp0
.994f		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9951		d0 a3		bne $98f6			bne 	_ETSyntaxError
.9953						_ETIndirection:
.9953		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9955		1a		inc a				inc 	a
.9956		48		pha				pha
.9957		20 c3 98	jsr $98c3			jsr 	EvaluateTerm				; evaluate the term
.995a		20 3c 97	jsr $973c			jsr 	Dereference 				; dereference it.
.995d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.995f		d0 06		bne $9967			bne 	_ETTypeMismatch
.9961		68		pla				pla 								; indirection 1-2
.9962		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9964		95 50		sta $50,x			sta 	NSStatus,x
.9966		60		rts				rts
.9967						_ETTypeMismatch:
.9967		4c 48 a0	jmp $a048			jmp 	TypeError
.996a						_ETUnaryNegate:
.996a		20 c3 98	jsr $98c3			jsr 	EvaluateTerm				; evaluate the term
.996d		20 3c 97	jsr $973c			jsr 	Dereference 				; dereference it.
.9970		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9972		29 10		and #$10			and 	#NSTString
.9974		d0 f1		bne $9967			bne 	_ETTypeMismatch
.9976		4c 82 9e	jmp $9e82			jmp 	NSMNegate  					; just toggles the sign bit.
.9979						_ETDereference:
.9979		20 c3 98	jsr $98c3			jsr 	EvaluateTerm				; evaluate the term
.997c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.997e		29 20		and #$20			and 	#NSBIsReference
.9980		f0 e5		beq $9967			beq 	_ETTypeMismatch
.9982		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9984		60		rts				rts
.9985						_ETParenthesis:
.9985		20 79 94	jsr $9479			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9988		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; check for )
.998b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.998c						VariableHandler:
.998c		b1 30		lda ($30),y			lda 	(codePtr),y
.998e		18		clc				clc
.998f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9991		85 37		sta $37				sta 	zTemp0+1
.9993		c8		iny				iny
.9994		b1 30		lda ($30),y			lda 	(codePtr),y
.9996		85 36		sta $36				sta 	zTemp0
.9998		c8		iny				iny
.9999		18		clc				clc									; copy variable address+3 to mantissa
.999a		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.999c		95 58		sta $58,x			sta 	NSMantissa0,x
.999e		a5 37		lda $37				lda 	zTemp0+1
.99a0		69 00		adc #$00			adc 	#0
.99a2		95 60		sta $60,x			sta 	NSMantissa1,x
.99a4		74 68		stz $68,x			stz 	NSMantissa2,x
.99a6		74 70		stz $70,x			stz 	NSMantissa3,x
.99a8		74 78		stz $78,x			stz 	NSExponent,x
.99aa		5a		phy				phy
.99ab		a0 02		ldy #$02			ldy 	#2 							; read type
.99ad		b1 36		lda ($36),y			lda 	(zTemp0),y
.99af		7a		ply				ply
.99b0		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.99b2		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.99b4		95 50		sta $50,x			sta 	NSStatus,x
.99b6		29 04		and #$04			and 	#NSBIsArray
.99b8		d0 01		bne $99bb			bne 	_VHArray
.99ba		60		rts				rts
.99bb						_VHArray:
.99bb		e8		inx				inx
.99bc		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.99bf		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.99c1		95 51		sta $51,x			sta 	NSStatus+1,x
.99c3		b1 30		lda ($30),y			lda 	(codePtr),y
.99c5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.99c7		d0 06		bne $99cf			bne 	_VHNoSecondIndex
.99c9		c8		iny				iny 								; skip the comma
.99ca		e8		inx				inx
.99cb		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.99ce		ca		dex				dex
.99cf						_VHNoSecondIndex:
.99cf		ca		dex				dex 								; set X back.
.99d0		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; and check the right bracket.
.99d3		5a		phy				phy 								; save position
.99d4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.99d6		85 3e		sta $3e				sta 	zaTemp
.99d8		b5 60		lda $60,x			lda 	NSMantissa1,x
.99da		85 3f		sta $3f				sta 	zaTemp+1
.99dc		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.99de		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99e0		f0 5d		beq $9a3f			beq 	_VHBadArray
.99e2		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.99e4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99e6		f0 02		beq $99ea			beq 	_VHHas2Mask
.99e8		a9 ff		lda #$ff			lda 	#$FF
.99ea						_VHHas2Mask:
.99ea		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.99ec		f0 4c		beq $9a3a			beq 	_VHBadIndex
.99ee		0a		asl a				asl 	a 							; carry will be set if a second index
.99ef		90 08		bcc $99f9			bcc 	_VHCheckFirstIndex
.99f1		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.99f3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99f5		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.99f7		90 41		bcc $9a3a			bcc 	_VHBadIndex
.99f9						_VHCheckFirstIndex:
.99f9		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.99fb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99fd		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.99ff		90 39		bcc $9a3a			bcc 	_VHBadIndex
.9a01		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a03		64 37		stz $37				stz 	zTemp0+1
.9a05		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a07		30 0e		bmi $9a17			bmi 	_VHNoMultiply
.9a09		da		phx				phx
.9a0a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9a0c		48		pha				pha
.9a0d		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9a0f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a11		1a		inc a				inc 	a 							; add 1 for zero base
.9a12		fa		plx				plx
.9a13		20 6b 9e	jsr $9e6b			jsr 	Multiply8x8 				; calculate -> Z0
.9a16		fa		plx				plx
.9a17						_VHNoMultiply:
.9a17		18		clc				clc
.9a18		a5 36		lda $36				lda 	zTemp0
.9a1a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9a1c		85 36		sta $36				sta 	zTemp0
.9a1e		a5 37		lda $37				lda 	zTemp0+1
.9a20		69 00		adc #$00			adc 	#0
.9a22		85 37		sta $37				sta 	zTemp0+1
.9a24		b5 50		lda $50,x			lda 	NSStatus,x
.9a26		20 9e 85	jsr $859e			jsr 	ScaleByBaseType
.9a29		18		clc				clc
.9a2a		b2 3e		lda ($3e)			lda 	(zaTemp)
.9a2c		65 36		adc $36				adc 	zTemp0
.9a2e		95 58		sta $58,x			sta 	NSMantissa0,x
.9a30		a0 01		ldy #$01			ldy 	#1
.9a32		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a34		65 37		adc $37				adc 	zTemp0+1
.9a36		95 60		sta $60,x			sta 	NSMantissa1,x
.9a38		7a		ply				ply 								; restore position
.9a39		60		rts				rts
.9a3a						_VHBadIndex:
.9a3a		a9 17		lda #$17		lda	#23
.9a3c		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.9a3f						_VHBadArray:
.9a3f		a9 18		lda #$18		lda	#24
.9a41		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9a44						AbsUnary:
.9a44		fa		plx				plx 								; restore stack pos
.9a45		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; get a float or int
.9a48		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9a4b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9a4d		29 7f		and #$7f			and 	#$7F
.9a4f		95 50		sta $50,x			sta 	NSStatus,x
.9a51		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9a52						AllocUnary:
.9a52		fa		plx				plx 								; restore stack pos
.9a53		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger		; get bytes required.
.9a56		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9a59		da		phx				phx 								; save X/Y
.9a5a		5a		phy				phy
.9a5b		8a		txa				txa 								; copy X into Y
.9a5c		a8		tay				tay
.9a5d		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9a60		aa		tax				tax
.9a61		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9a64		20 71 9a	jsr $9a71			jsr 	AllocateXABytes 			; allocate memory
.9a67		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9a6a		8a		txa				txa 	 							; typing is 16 bit integer.
.9a6b		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9a6e		7a		ply				ply
.9a6f		fa		plx				plx
.9a70		60		rts				rts
.9a71						AllocateXABytes:
.9a71		5a		phy				phy
.9a72		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a75		84 36		sty $36				sty 	zTemp0
.9a77		5a		phy				phy
.9a78		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a7b		84 37		sty $37				sty 	zTemp0+1
.9a7d		5a		phy				phy
.9a7e		18		clc				clc 								; add to low memory pointer
.9a7f		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a82		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a85		8a		txa				txa
.9a86		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a89		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a8c		b0 2f		bcs $9abd			bcs 	CISSMemory
.9a8e		20 af 9a	jsr $9aaf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a91						_ClearMemory:
.9a91		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a94		c5 36		cmp $36				cmp 	zTemp0
.9a96		d0 07		bne $9a9f			bne 	_CMClearNext
.9a98		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a9b		c5 37		cmp $37				cmp 	zTemp0+1
.9a9d		f0 0c		beq $9aab			beq 	_CMExit
.9a9f						_CMClearNext:
.9a9f		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9aa1		92 36		sta ($36)			sta 	(zTemp0)
.9aa3		e6 36		inc $36				inc 	zTemp0
.9aa5		d0 ea		bne $9a91			bne 	_ClearMemory
.9aa7		e6 37		inc $37				inc		zTemp0+1
.9aa9		80 e6		bra $9a91			bra 	_ClearMemory
.9aab						_CMExit:
.9aab		fa		plx				plx
.9aac		68		pla				pla
.9aad		7a		ply				ply
.9aae		60		rts				rts
.9aaf						CheckIdentifierStringSpace:
.9aaf		48		pha				pha
.9ab0		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9ab3		18		clc				clc
.9ab4		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ab6		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9ab9		b0 02		bcs $9abd			bcs 	CISSMemory
.9abb		68		pla				pla
.9abc		60		rts				rts
.9abd						CISSMemory:
.9abd		a9 06		lda #$06		lda	#6
.9abf		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ac2						AscUnary:
.9ac2		fa		plx				plx 								; restore stack pos
.9ac3		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; get a string
.9ac6		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9ac8		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte 					; ASC("") will return zero.
.9acb		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9ace		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9acf						FracUnary:
.9acf		fa		plx				plx 								; restore stack pos
.9ad0		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; get a float or int
.9ad3		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9ad6		b5 50		lda $50,x			lda 	NSStatus,x
.9ad8		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ada		f0 04		beq $9ae0			beq 	_IUZero
.9adc		20 8a 95	jsr $958a			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9adf		60		rts				rts
.9ae0						_IUZero:
.9ae0		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.9ae3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ae4						IntUnary:
.9ae4		fa		plx				plx 								; restore stack pos
.9ae5		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; get a float or int
.9ae8		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9aeb		b5 50		lda $50,x			lda 	NSStatus,x
.9aed		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9aef		f0 03		beq $9af4			beq 	_IUExit
.9af1		20 e2 95	jsr $95e2			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9af4						_IUExit:
.9af4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9af5						LenUnary:
.9af5		fa		plx				plx 								; restore stack pos
.9af6		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; get a string
.9af9		5a		phy				phy
.9afa		a0 00		ldy #$00			ldy 	#0 							; find length
.9afc						_LenFind:
.9afc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9afe		f0 06		beq $9b06			beq 	_LenExit
.9b00		c8		iny				iny
.9b01		d0 f9		bne $9afc			bne 	_LenFind
.9b03		4c 43 a0	jmp $a043			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9b06						_LenExit:
.9b06		98		tya				tya		 							; return length
.9b07		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.9b0a		7a		ply				ply
.9b0b		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9b0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9b0f						Unary_Min:
.9b0f		a9 01		lda #$01			lda 	#1
.9b11		80 02		bra $9b15			bra 	UnaryMinMaxMain
.9b13						Unary_Max:
.9b13		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9b15						UnaryMinMaxMain:
.9b15		fa		plx				plx 								; get index on number stack
.9b16		48		pha				pha 								; save comparator
.9b17		20 05 9e	jsr $9e05			jsr 	EvaluateValue 				; get the first value.
.9b1a						_UMMMLoop:
.9b1a		b1 30		lda ($30),y			lda 	(codePtr),y
.9b1c		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9b1e		f0 22		beq $9b42			beq 	_UMMMDone
.9b20		20 64 8f	jsr $8f64			jsr 	CheckComma 					; must be a comma
.9b23		e8		inx				inx
.9b24		20 05 9e	jsr $9e05			jsr 	EvaluateValue
.9b27		ca		dex				dex
.9b28		20 a3 9e	jsr $9ea3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9b2b		e8		inx				inx
.9b2c		20 a3 9e	jsr $9ea3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9b2f		e8		inx				inx
.9b30		20 2c 90	jsr $902c			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9b33		ca		dex				dex
.9b34		ca		dex				dex
.9b35		85 36		sta $36				sta 	zTemp0 						; save required result
.9b37		68		pla				pla 								; get and save comparator
.9b38		48		pha				pha
.9b39		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9b3b		d0 dd		bne $9b1a			bne 	_UMMMLoop
.9b3d		20 45 9b	jsr $9b45			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9b40		80 d8		bra $9b1a			bra 	_UMMMLoop
.9b42						_UMMMDone:
.9b42		68		pla				pla 								; throw the comparator
.9b43		c8		iny				iny 								; skip )
.9b44		60		rts				rts
.9b45						ExpCopyAboveDown:
.9b45		b5 51		lda $51,x			lda 	NSStatus+1,x
.9b47		95 50		sta $50,x			sta 	NSStatus,x
.9b49		b5 79		lda $79,x			lda 	NSExponent+1,x
.9b4b		95 78		sta $78,x			sta 	NSExponent,x
.9b4d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b4f		95 58		sta $58,x			sta 	NSMantissa0,x
.9b51		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b53		95 60		sta $60,x			sta 	NSMantissa1,x
.9b55		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b57		95 68		sta $68,x			sta 	NSMantissa2,x
.9b59		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b5b		95 70		sta $70,x			sta 	NSMantissa3,x
.9b5d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b5e						Unary_Not:
.9b5e		fa		plx				plx
.9b5f		20 2d 9e	jsr $9e2d			jsr 	EvaluateInteger 			; get integer
.9b62		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9b65		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; zero mantissa ?
.9b68		f0 04		beq $9b6e			beq 	_NotZero
.9b6a		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.9b6d		60		rts				rts
.9b6e						_NotZero:
.9b6e		4c e2 8f	jmp $8fe2			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9b71						PeekByteUnary:
.9b71		a9 01		lda #$01			lda 	#1
.9b73		80 0a		bra $9b7f			bra 	PeekUnary
.9b75						PeekWUnary:
.9b75		a9 02		lda #$02			lda 	#2
.9b77		80 06		bra $9b7f			bra 	PeekUnary
.9b79						PeekLUnary:
.9b79		a9 03		lda #$03			lda 	#3
.9b7b		80 02		bra $9b7f			bra 	PeekUnary
.9b7d						PeekDUnary:
.9b7d		a9 04		lda #$04			lda 	#4
.9b7f						PeekUnary:
.9b7f		fa		plx				plx 								; restore position.
.9b80		48		pha				pha 								; save count to copy on stack
.9b81		20 40 9e	jsr $9e40			jsr		Evaluate16BitInteger 		; address as constant.
.9b84		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9b87		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9b89		85 36		sta $36				sta 	zTemp0
.9b8b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b8d		85 37		sta $37				sta 	zTemp0+1
.9b8f		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; clear the result to zero.
.9b92		68		pla				pla 								; count in zTemp2
.9b93		85 3a		sta $3a				sta 	zTemp2
.9b95		da		phx				phx 								; save stack position and offset of read
.9b96		5a		phy				phy
.9b97		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9b99						_PULoop:
.9b99		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9b9b		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9b9d		c8		iny				iny 								; next byte to write
.9b9e		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9b9f		18		clc				clc
.9ba0		69 08		adc #$08			adc 	#MathStackSize
.9ba2		aa		tax				tax
.9ba3		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9ba5		d0 f2		bne $9b99			bne 	_PULoop
.9ba7		7a		ply				ply 								; restore stack/code pos and exit.
.9ba8		fa		plx				plx
.9ba9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9baa						Unary_Random:
.9baa		fa		plx				plx
.9bab		20 1c 9c	jsr $9c1c			jsr 	Random32Bit 				; get a random number
.9bae		20 05 9c	jsr $9c05			jsr 	URCopyToMantissa  			; put in mantissa
.9bb1		b1 30		lda ($30),y			lda 	(codePtr),y
.9bb3		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9bb5		f0 08		beq $9bbf			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9bb7		e8		inx				inx
.9bb8		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9bbb		ca		dex				dex
.9bbc		20 34 91	jsr $9134			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9bbf						_URNoModulus:
.9bbf		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9bc1		74 78		stz $78,x			stz 	NSExponent,x
.9bc3		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9bc6		60		rts				rts
.9bc7						Unary_Rnd:
.9bc7		fa		plx				plx
.9bc8		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; number to use.
.9bcb		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; closing bracket
.9bce		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9bd1		f0 26		beq $9bf9			beq 	_URCopySeed
.9bd3		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9bd5		10 1f		bpl $9bf6			bpl 	_URDontSeed
.9bd7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9bd9		49 17		eor #$17			eor 	#$17
.9bdb		8d 08 04	sta $0408			sta 	randomSeed+0
.9bde		b5 60		lda $60,x			lda 	NSMantissa1,x
.9be0		49 a5		eor #$a5			eor 	#$A5
.9be2		8d 09 04	sta $0409			sta 	randomSeed+1
.9be5		b5 68		lda $68,x			lda 	NSMantissa2,x
.9be7		49 c2		eor #$c2			eor 	#$C2
.9be9		8d 0a 04	sta $040a			sta 	randomSeed+2
.9bec		b5 70		lda $70,x			lda 	NSMantissa3,x
.9bee		49 9d		eor #$9d			eor 	#$9D
.9bf0		8d 0b 04	sta $040b			sta 	randomSeed+3
.9bf3		20 1c 9c	jsr $9c1c			jsr 	Random32Bit
.9bf6						_URDontSeed:
.9bf6		20 1c 9c	jsr $9c1c			jsr 	Random32Bit 				; generate a number
.9bf9						_URCopySeed:
.9bf9		20 05 9c	jsr $9c05			jsr 	URCopyToMantissa 			; copy into mantissa
.9bfc		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9bfe		95 78		sta $78,x			sta 	NSExponent,x
.9c00		a9 08		lda #$08			lda 	#NSTFloat
.9c02		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9c04		60		rts				rts
.9c05						URCopyToMantissa:
.9c05		ad 08 04	lda $0408			lda 	randomSeed+0
.9c08		95 58		sta $58,x			sta 	NSMantissa0,x
.9c0a		ad 09 04	lda $0409			lda 	randomSeed+1
.9c0d		95 60		sta $60,x			sta 	NSMantissa1,x
.9c0f		ad 0a 04	lda $040a			lda 	randomSeed+2
.9c12		95 68		sta $68,x			sta 	NSMantissa2,x
.9c14		ad 0b 04	lda $040b			lda 	randomSeed+3
.9c17		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9c19		95 70		sta $70,x			sta 	NSMantissa3,x
.9c1b		60		rts				rts
.9c1c						Random32Bit:
.9c1c		5a		phy				phy
.9c1d		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9c1f		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9c22		d0 03		bne $9c27			bne 	_Random1
.9c24		a8		tay				tay 								; if so do it 256 times
.9c25		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9c27						_Random1:
.9c27		0a		asl a				asl 	a 							; LSFR RNG
.9c28		2e 09 04	rol $0409			rol 	randomSeed+1
.9c2b		2e 0a 04	rol $040a			rol 	randomSeed+2
.9c2e		2e 0b 04	rol $040b			rol 	randomSeed+3
.9c31		90 02		bcc $9c35			bcc 	_Random2
.9c33		49 c5		eor #$c5			eor 	#$C5
.9c35						_Random2:
.9c35		88		dey				dey
.9c36		d0 ef		bne $9c27			bne 	_Random1
.9c38		8d 08 04	sta $0408			sta 	randomSeed+0
.9c3b		7a		ply				ply
.9c3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9c3d						SgnUnary:
.9c3d		fa		plx				plx 								; restore stack pos
.9c3e		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber 				; get a float or int
.9c41		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9c44		20 e2 9e	jsr $9ee2			jsr 	NSMIsZero 					; if zero
.9c47		f0 0e		beq $9c57			beq 	_SGZero  					; return Int Zero
.9c49		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9c4b		48		pha				pha
.9c4c		a9 01		lda #$01			lda 	#1 							; set to 1
.9c4e		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.9c51		68		pla				pla
.9c52		29 80		and #$80			and		#$80 						; copy the sign byte out
.9c54		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9c56		60		rts				rts
.9c57		20 c0 9e	jsr $9ec0	_SGZero:jsr 	NSMSetZero
.9c5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9c5b						ValUnary:
.9c5b		fa		plx				plx 								; restore stack pos
.9c5c		20 71 9c	jsr $9c71			jsr 	ValMainCode 				; do the main val() code
.9c5f		b0 01		bcs $9c62			bcs 	_VUError 					; couldn't convert
.9c61		60		rts				rts
.9c62						_VUError:
.9c62		4c 48 a0	jmp $a048			jmp 	TypeError
.9c65						IsValUnary:
.9c65		fa		plx				plx 								; restore stack pos
.9c66		20 71 9c	jsr $9c71			jsr 	ValMainCode 				; do the main val() code
.9c69		b0 03		bcs $9c6e			bcs 	_VUBad
.9c6b		4c e2 8f	jmp $8fe2			jmp 	ReturnTrue
.9c6e						_VUBad:
.9c6e		4c ed 8f	jmp $8fed			jmp 	ReturnFalse
.9c71						ValMainCode:
.9c71		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; get a string
.9c74		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; check right bracket present
.9c77						ValEvaluateZTemp0:
.9c77		5a		phy				phy
.9c78		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9c7a		f0 17		beq $9c93			beq 	_VMCFail2
.9c7c		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9c7e		48		pha				pha 								; save first character
.9c7f		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9c81		d0 01		bne $9c84			bne 	_VMCStart
.9c83		c8		iny				iny 								; skip over -
.9c84						_VMCStart:
.9c84		38		sec				sec 								; initialise first time round.
.9c85						_VMCNext:
.9c85		c8		iny				iny 								; pre-increment
.9c86		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9c88		f0 0c		beq $9c96			beq 	_VMCSuccess 				; successful.
.9c8a		20 bf 97	jsr $97bf			jsr 	EncodeNumber 				; send it to the number-builder
.9c8d		90 03		bcc $9c92			bcc 	_VMCFail 					; if failed, give up.
.9c8f		18		clc				clc 								; next time round, countinue
.9c90		80 f3		bra $9c85			bra 	_VMCNext
.9c92						_VMCFail:
.9c92		68		pla				pla
.9c93						_VMCFail2:
.9c93		7a		ply				ply
.9c94		38		sec				sec
.9c95		60		rts				rts
.9c96						_VMCSuccess:
.9c96		a9 00		lda #$00			lda 	#0 							; construct final
.9c98		20 bf 97	jsr $97bf			jsr 	EncodeNumber 				; by sending a duff value.
.9c9b		68		pla				pla 								; if it was -ve
.9c9c		c9 2d		cmp #$2d			cmp 	#"-"
.9c9e		d0 03		bne $9ca3			bne 	_VMCNotNegative
.9ca0		20 82 9e	jsr $9e82			jsr		NSMNegate 					; negate it.
.9ca3						_VMCNotNegative:
.9ca3		7a		ply				ply
.9ca4		18		clc				clc
.9ca5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ca6						ChrUnary:
.9ca6		fa		plx				plx 								; restore stack pos
.9ca7		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9caa		48		pha				pha
.9cab		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9cae		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9cb0		20 9d b0	jsr $b09d			jsr 	StringTempAllocate
.9cb3		68		pla				pla 								; write number to it
.9cb4		20 d6 b0	jsr $b0d6			jsr 	StringTempWrite
.9cb7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9cb8						SpcUnary:
.9cb8		fa		plx				plx 								; restore stack pos
.9cb9		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger			; get value
.9cbc		5a		phy				phy
.9cbd		48		pha				pha 								; save count
.9cbe		20 9d b0	jsr $b09d			jsr 	StringTempAllocate
.9cc1		7a		ply				ply 								; to do count in Y
.9cc2						_SpcLoop:
.9cc2		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9cc4		f0 08		beq $9cce			beq 	_SpcExit
.9cc6		a9 20		lda #$20			lda 	#32
.9cc8		20 d6 b0	jsr $b0d6			jsr 	StringTempWrite
.9ccb		88		dey				dey
.9ccc		80 f4		bra $9cc2			bra 	_SpcLoop
.9cce						_SpcExit:
.9cce		7a		ply				ply
.9ccf		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.9cd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9cd3						Unary_Str:
.9cd3		fa		plx				plx
.9cd4		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber  			; get number
.9cd7		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; closing bracket
.9cda		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9cdc		20 f5 9c	jsr $9cf5			jsr 	ConvertNumberToString 		; do the conversion.
.9cdf		a9 21		lda #$21			lda		#33 						; create buffer
.9ce1		20 9d b0	jsr $b09d			jsr 	StringTempAllocate 			; allocate memory
.9ce4		da		phx				phx  								; copy the converted string into the buffer.
.9ce5		a2 00		ldx #$00			ldx 	#0
.9ce7						_USCopy:
.9ce7		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9cea		20 d6 b0	jsr $b0d6			jsr 	StringTempWrite
.9ced		e8		inx				inx
.9cee		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9cf1		d0 f4		bne $9ce7			bne 	_USCopy
.9cf3		fa		plx				plx
.9cf4		60		rts				rts
.9cf5						ConvertNumberToString:
.9cf5		5a		phy				phy 								; save code position
.9cf6		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9cf9		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9cfc		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9cfe		10 09		bpl $9d09			bpl 	_CNTSNotNegative
.9d00		29 7f		and #$7f			and 	#$7F 						; make +ve
.9d02		95 50		sta $50,x			sta 	NSStatus,x
.9d04		a9 2d		lda #$2d			lda 	#"-"
.9d06		20 6a 9d	jsr $9d6a			jsr 	WriteDecimalBuffer
.9d09						_CNTSNotNegative:
.9d09		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9d0b		f0 12		beq $9d1f			beq 	_CNTSNotFloat
.9d0d		e8		inx				inx 								; round up so we don't get too many 6.999999
.9d0e		a9 01		lda #$01			lda 	#1
.9d10		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.9d13		ca		dex				dex
.9d14		b5 78		lda $78,x			lda		NSExponent,x
.9d16		95 79		sta $79,x			sta 	NSExponent+1,x
.9d18		a9 08		lda #$08			lda 	#NSTFloat
.9d1a		95 51		sta $51,x			sta 	NSStatus+1,x
.9d1c		20 c4 94	jsr $94c4			jsr 	FloatAdd
.9d1f						_CNTSNotFloat:
.9d1f		20 4c 9d	jsr $9d4c			jsr 	MakePlusTwoString 			; do the integer part.
.9d22		20 8a 95	jsr $958a			jsr 	FloatFractionalPart 		; get the fractional part
.9d25		20 3b 96	jsr $963b			jsr 	NSNormalise					; normalise , exit if zero
.9d28		f0 20		beq $9d4a			beq 	_CNTSExit
.9d2a		a9 2e		lda #$2e			lda 	#"."
.9d2c		20 6a 9d	jsr $9d6a			jsr 	WriteDecimalBuffer 			; write decimal place
.9d2f						_CNTSDecimal:
.9d2f		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9d32		30 16		bmi $9d4a			bmi 	_CNTSExit
.9d34		e8		inx				inx 								; x 10.0
.9d35		a9 0a		lda #$0a			lda 	#10
.9d37		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.9d3a		a9 08		lda #$08			lda 	#NSTFloat
.9d3c		95 50		sta $50,x			sta 	NSStatus,x
.9d3e		ca		dex				dex
.9d3f		20 09 96	jsr $9609			jsr 	FloatMultiply
.9d42		20 4c 9d	jsr $9d4c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9d45		20 8a 95	jsr $958a			jsr 	FloatFractionalPart 		; get the fractional part
.9d48		80 e5		bra $9d2f			bra 	_CNTSDecimal 				; keep going.
.9d4a						_CNTSExit:
.9d4a		7a		ply				ply
.9d4b		60		rts				rts
.9d4c						MakePlusTwoString:
.9d4c		da		phx				phx
.9d4d		20 a3 9e	jsr $9ea3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9d50		e8		inx				inx 								; access it
.9d51		e8		inx				inx
.9d52		20 e2 95	jsr $95e2			jsr 	FloatIntegerPart 			; make it an integer
.9d55		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9d57		20 f4 93	jsr $93f4			jsr 	ConvertInt32
.9d5a		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9d5c						_MPTSCopy:
.9d5c		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9d5f		20 6a 9d	jsr $9d6a			jsr 	WriteDecimalBuffer
.9d62		e8		inx				inx
.9d63		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9d66		d0 f4		bne $9d5c			bne 	_MPTSCopy
.9d68		fa		plx				plx
.9d69		60		rts				rts
.9d6a						WriteDecimalBuffer:
.9d6a		da		phx				phx
.9d6b		ae 15 04	ldx $0415			ldx 	dbOffset
.9d6e		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9d71		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9d74		ee 15 04	inc $0415			inc 	dbOffset
.9d77		fa		plx				plx
.9d78		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d79						Unary_Left:
.9d79		fa		plx				plx
.9d7a		18		clc				clc 								; only one parameter
.9d7b		20 de 9d	jsr $9dde			jsr 	SubstringInitial 			; set up.
.9d7e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d80		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d82		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d84		80 25		bra $9dab			bra 	SubstringMain
.9d86						Unary_Right:
.9d86		fa		plx				plx
.9d87		18		clc				clc 								; only one parameter
.9d88		20 de 9d	jsr $9dde			jsr 	SubstringInitial 			; set up.
.9d8b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d8d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d8f		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9d91		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d93		b0 02		bcs $9d97			bcs 	_URNotUnderflow
.9d95		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d97						_URNotUnderflow:
.9d97		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d99		80 10		bra $9dab			bra 	SubstringMain
.9d9b						Unary_Mid:
.9d9b		fa		plx				plx
.9d9c		38		sec				sec 								; two parameters
.9d9d		20 de 9d	jsr $9dde			jsr 	SubstringInitial 			; set up.
.9da0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9da2		f0 04		beq $9da8			beq 	_UMError
.9da4		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9da6		80 03		bra $9dab			bra 	SubstringMain
.9da8						_UMError:
.9da8		4c 4d a0	jmp $a04d			jmp 	ArgumentError
.9dab						SubstringMain:
.9dab		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9dad		d5 78		cmp $78,x			cmp 	NSExponent,x
.9daf		b0 27		bcs $9dd8			bcs 	_SSMNull 					; if so, return an empty string.
.9db1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9db3		f0 23		beq $9dd8			beq 	_SSMNull 					; return empty string.
.9db5		18		clc				clc 								; add the offset +1 to the address and
.9db6		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9db8		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9dba		85 36		sta $36				sta 	zTemp0
.9dbc		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9dbe		69 00		adc #$00			adc 	#0
.9dc0		85 37		sta $37				sta 	zTemp0+1
.9dc2						_SSMNoCarry:
.9dc2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9dc4		20 9d b0	jsr $b09d			jsr 	StringTempAllocate 			; allocate that many characters
.9dc7		5a		phy				phy 								; save Y
.9dc8		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9dca						_SSMCopy:
.9dca		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9dcc		f0 08		beq $9dd6			beq 	_SSMEString 				; no more to copy
.9dce		20 d6 b0	jsr $b0d6			jsr 	StringTempWrite 			; and write it out.
.9dd1		c8		iny				iny
.9dd2		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9dd4		d0 f4		bne $9dca			bne 	_SSMCopy
.9dd6						_SSMEString:
.9dd6		7a		ply				ply
.9dd7						_SSMExit:
.9dd7		60		rts				rts
.9dd8						_SSMNull:
.9dd8		a9 00		lda #$00			lda 	#0
.9dda		20 9d b0	jsr $b09d			jsr 	StringTempAllocate
.9ddd		60		rts				rts
.9dde						SubstringInitial:
.9dde		da		phx				phx 								; save initial stack position
.9ddf		08		php				php 								; save carry on stack indicating 2 parameters
.9de0		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; get a string
.9de3		5a		phy				phy 								; calculate length to exponent.
.9de4		a0 ff		ldy #$ff			ldy 	#$FF
.9de6						_SIFindLength:
.9de6		c8		iny				iny
.9de7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9de9		d0 fb		bne $9de6			bne 	_SIFindLength
.9deb		98		tya				tya
.9dec		95 78		sta $78,x			sta 	NSExponent,x
.9dee		7a		ply				ply
.9def		e8		inx				inx
.9df0		20 64 8f	jsr $8f64			jsr 	CheckComma 					; comma next
.9df3		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get next parameter
.9df6		28		plp				plp 								; is it the last parameter ?
.9df7		90 07		bcc $9e00			bcc 	_SSIExit 					; if so, exit.
.9df9		e8		inx				inx
.9dfa		20 64 8f	jsr $8f64			jsr 	CheckComma 					; comma next
.9dfd		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get last parameter
.9e00						_SSIExit:
.9e00		fa		plx				plx
.9e01		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket 			; check closing bracket
.9e04		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e05						EvaluateValue:
.9e05		48		pha				pha
.9e06		20 79 94	jsr $9479			jsr		EvaluateExpression 			; expression
.9e09		20 3c 97	jsr $973c			jsr 	Dereference					; derefernce it
.9e0c		68		pla				pla
.9e0d		60		rts				rts
.9e0e						EvaluateNumber:
.9e0e		20 05 9e	jsr $9e05			jsr 	EvaluateValue 				; get a value
.9e11		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9e13		29 10		and #$10			and 	#NSBIsString
.9e15		d0 13		bne $9e2a			bne 	HelperTypeError
.9e17		60		rts				rts
.9e18						EvaluateString:
.9e18		20 05 9e	jsr $9e05			jsr 	EvaluateValue 				; get a value
.9e1b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9e1d		29 10		and #$10			and 	#NSBIsString
.9e1f		f0 09		beq $9e2a			beq 	HelperTypeError
.9e21						CopyAddressToTemp0:
.9e21		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9e23		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9e25		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e27		85 37		sta $37				sta 	zTemp0+1
.9e29		60		rts				rts
.9e2a						HelperTypeError:
.9e2a		4c 48 a0	jmp $a048			jmp 	TypeError
.9e2d						EvaluateInteger:
.9e2d		20 0e 9e	jsr $9e0e			jsr 	EvaluateNumber
.9e30		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9e32		d0 09		bne $9e3d			bne 	HelperValueError 			; if not, it's a float.
.9e34		60		rts				rts
.9e35						EvaluateUnsignedInteger:
.9e35		20 2d 9e	jsr $9e2d			jsr 	EvaluateInteger 			; check integer is +ve
.9e38		b5 50		lda $50,x			lda 	NSStatus,x
.9e3a		30 01		bmi $9e3d			bmi 	HelperValueError
.9e3c		60		rts				rts
.9e3d						HelperValueError:
.9e3d		4c 4d a0	jmp $a04d			jmp 	ArgumentError
.9e40						Evaluate16BitInteger:
.9e40		20 35 9e	jsr $9e35			jsr	 	EvaluateUnsignedInteger		; get integer
.9e43		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e45		15 68		ora $68,x			ora 	NSMantissa2,x
.9e47		d0 f4		bne $9e3d			bne 	HelperValueError
.9e49		60		rts				rts
.9e4a						Evaluate16BitIntegerSigned:
.9e4a		20 2d 9e	jsr $9e2d			jsr	 	EvaluateInteger				; get integer
.9e4d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e4f		15 68		ora $68,x			ora 	NSMantissa2,x
.9e51		d0 ea		bne $9e3d			bne 	HelperValueError
.9e53		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9e55		10 03		bpl $9e5a			bpl 	_EISNotSigned
.9e57		20 89 9e	jsr $9e89			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9e5a						_EISNotSigned:
.9e5a		60		rts				rts
.9e5b						Evaluate8BitInteger:
.9e5b		20 35 9e	jsr $9e35			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9e5e		d0 dd		bne $9e3d			bne 	HelperValueError
.9e60		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9e62		15 68		ora $68,x			ora 	NSMantissa2,x
.9e64		15 60		ora $60,x			ora 	NSMantissa1,x
.9e66		d0 d5		bne $9e3d			bne 	HelperValueError
.9e68		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9e6b						Multiply8x8:
.9e6b		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9e6c		85 36		sta $36			  	sta 	zTemp0
.9e6e		86 37		stx $37				stx 	zTemp0+1
.9e70		a9 00		lda #$00			lda 	#0
.9e72		a2 08		ldx #$08			ldx 	#8
.9e74						_M88Loop:
.9e74		90 03		bcc $9e79			bcc 	_M88NoAdd
.9e76		18		clc				clc
.9e77		65 37		adc $37				adc 	zTemp0+1
.9e79						_M88NoAdd:
.9e79		6a		ror a				ror 	a
.9e7a		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9e7c		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9e7d		d0 f5		bne $9e74			bne 	_M88Loop
.9e7f		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9e81		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e82						NSMNegate:
.9e82		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9e84		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9e86		95 50		sta $50,x			sta 	NSStatus,x
.9e88		60		rts				rts
.9e89						NSMNegateMantissa:
.9e89		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9e8a		a9 00		lda #$00			lda 	#0
.9e8c		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9e8e		95 58		sta $58,x			sta 	NSMantissa0,x
.9e90		a9 00		lda #$00			lda 	#0
.9e92		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e94		95 60		sta $60,x			sta 	NSMantissa1,x
.9e96		a9 00		lda #$00			lda 	#0
.9e98		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e9a		95 68		sta $68,x			sta 	NSMantissa2,x
.9e9c		a9 00		lda #$00			lda 	#0
.9e9e		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9ea0		95 70		sta $70,x			sta 	NSMantissa3,x
.9ea2		60		rts				rts
.9ea3						NSMShiftUpTwo:
.9ea3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ea5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9ea7		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ea9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9eab		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ead		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9eaf		b5 70		lda $70,x			lda 	NSMantissa3,x
.9eb1		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9eb3		b5 78		lda $78,x			lda 	NSExponent,x
.9eb5		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9eb7		b5 50		lda $50,x			lda 	NSStatus,x
.9eb9		95 52		sta $52,x			sta 	NSStatus+2,x
.9ebb		60		rts				rts
.9ebc						NSMSetZeroMantissaOnly:
.9ebc		a9 00		lda #$00			lda 	#0
.9ebe		80 06		bra $9ec6			bra 	NSMSetMantissa
.9ec0						NSMSetZero:
.9ec0		a9 00		lda #$00			lda 	#0
.9ec2						NSMSetByte:
.9ec2		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9ec4		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9ec6						NSMSetMantissa:
.9ec6		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9ec8		74 60		stz $60,x			stz 	NSMantissa1,x
.9eca		74 68		stz $68,x			stz 	NSMantissa2,x
.9ecc		74 70		stz $70,x			stz 	NSMantissa3,x
.9ece		60		rts				rts
.9ecf						NSMShiftLeft:
.9ecf		18		clc				clc
.9ed0						NSMRotateLeft:
.9ed0		36 58		rol $58,x			rol 	NSMantissa0,x
.9ed2		36 60		rol $60,x			rol		NSMantissa1,x
.9ed4		36 68		rol $68,x			rol		NSMantissa2,x
.9ed6		36 70		rol $70,x			rol		NSMantissa3,x
.9ed8		60		rts				rts
.9ed9						NSMShiftRight:
.9ed9		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9edb		76 68		ror $68,x			ror		NSMantissa2,x
.9edd		76 60		ror $60,x			ror		NSMantissa1,x
.9edf		76 58		ror $58,x			ror		NSMantissa0,x
.9ee1		60		rts				rts
.9ee2						NSMIsZero:
.9ee2		b5 70		lda $70,x			lda 	NSMantissa3,x
.9ee4		15 68		ora $68,x			ora		NSMantissa2,x
.9ee6		15 60		ora $60,x			ora		NSMantissa1,x
.9ee8		15 58		ora $58,x			ora		NSMantissa0,x
.9eea		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9eeb						TickHandler:
.9eeb		5a		phy				phy 								; need to preserve Y
.9eec		20 71 80	jsr $8071			jsr 	SNDUpdate 					; update sound
.9eef		7a		ply				ply
.9ef0		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9ef1						Assemble_ora:
.9ef1		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9ef4		01					.byte $01
.9ef5						Assemble_and:
.9ef5		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9ef8		21					.byte $21
.9ef9						Assemble_eor:
.9ef9		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9efc		41					.byte $41
.9efd						Assemble_adc:
.9efd		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f00		61					.byte $61
.9f01						Assemble_sta:
.9f01		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f04		81					.byte $81
.9f05						Assemble_lda:
.9f05		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f08		a1					.byte $a1
.9f09						Assemble_cmp:
.9f09		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f0c		c1					.byte $c1
.9f0d						Assemble_sbc:
.9f0d		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f10		e1					.byte $e1
.9f11						Assemble_asl:
.9f11		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f14		02					.byte $02
>9f15		75					.byte $75
.9f16						Assemble_rol:
.9f16		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f19		22					.byte $22
>9f1a		75					.byte $75
.9f1b						Assemble_lsr:
.9f1b		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f1e		42					.byte $42
>9f1f		75					.byte $75
.9f20						Assemble_ror:
.9f20		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f23		62					.byte $62
>9f24		75					.byte $75
.9f25						Assemble_stx:
.9f25		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f28		82					.byte $82
>9f29		50					.byte $50
.9f2a						Assemble_ldx:
.9f2a		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f2d		a2					.byte $a2
>9f2e		d0					.byte $d0
.9f2f						Assemble_dec:
.9f2f		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f32		c2					.byte $c2
>9f33		55					.byte $55
.9f34						Assemble_inc:
.9f34		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f37		e2					.byte $e2
>9f38		55					.byte $55
.9f39						Assemble_stz:
.9f39		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f3c		60					.byte $60
>9f3d		44					.byte $44
.9f3e						Assemble_bit:
.9f3e		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f41		20					.byte $20
>9f42		55					.byte $55
.9f43						Assemble_sty:
.9f43		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f46		80					.byte $80
>9f47		54					.byte $54
.9f48						Assemble_ldy:
.9f48		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f4b		a0					.byte $a0
>9f4c		d5					.byte $d5
.9f4d						Assemble_cpy:
.9f4d		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f50		c0					.byte $c0
>9f51		d4					.byte $d4
.9f52						Assemble_cpx:
.9f52		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f55		e0					.byte $e0
>9f56		d0					.byte $d0
.9f57						Assemble_tsb:
.9f57		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f5a		00					.byte $00
>9f5b		50					.byte $50
.9f5c						Assemble_trb:
.9f5c		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f5f		10					.byte $10
>9f60		50					.byte $50
.9f61						Assemble_jsr:
.9f61		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f64		14					.byte $14
>9f65		10					.byte $10
.9f66						Assemble_jmp:
.9f66		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f69		40					.byte $40
>9f6a		10					.byte $10
.9f6b						Assemble_bpl:
.9f6b		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f6e		10					.byte $10
.9f6f						Assemble_bmi:
.9f6f		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f72		30					.byte $30
.9f73						Assemble_bvc:
.9f73		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f76		50					.byte $50
.9f77						Assemble_bvs:
.9f77		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f7a		70					.byte $70
.9f7b						Assemble_bcc:
.9f7b		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f7e		90					.byte $90
.9f7f						Assemble_bcs:
.9f7f		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f82		b0					.byte $b0
.9f83						Assemble_bne:
.9f83		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f86		d0					.byte $d0
.9f87						Assemble_beq:
.9f87		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f8a		f0					.byte $f0
.9f8b						Assemble_bra:
.9f8b		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9f8e		80					.byte $80
.9f8f						Assemble_brk:
.9f8f		20 63 81	jsr $8163		jsr	AssembleGroup4
>9f92		00					.byte $00
.9f93						Assemble_php:
.9f93		20 63 81	jsr $8163		jsr	AssembleGroup4
>9f96		08					.byte $08
.9f97						Assemble_clc:
.9f97		20 63 81	jsr $8163		jsr	AssembleGroup4
>9f9a		18					.byte $18
.9f9b						Assemble_plp:
.9f9b		20 63 81	jsr $8163		jsr	AssembleGroup4
>9f9e		28					.byte $28
.9f9f						Assemble_sec:
.9f9f		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fa2		38					.byte $38
.9fa3						Assemble_rti:
.9fa3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fa6		40					.byte $40
.9fa7						Assemble_pha:
.9fa7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9faa		48					.byte $48
.9fab						Assemble_cli:
.9fab		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fae		58					.byte $58
.9faf						Assemble_phy:
.9faf		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fb2		5a					.byte $5a
.9fb3						Assemble_rts:
.9fb3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fb6		60					.byte $60
.9fb7						Assemble_pla:
.9fb7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fba		68					.byte $68
.9fbb						Assemble_sei:
.9fbb		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fbe		78					.byte $78
.9fbf						Assemble_ply:
.9fbf		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fc2		7a					.byte $7a
.9fc3						Assemble_dey:
.9fc3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fc6		88					.byte $88
.9fc7						Assemble_txa:
.9fc7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fca		8a					.byte $8a
.9fcb						Assemble_tya:
.9fcb		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fce		98					.byte $98
.9fcf						Assemble_txs:
.9fcf		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fd2		9a					.byte $9a
.9fd3						Assemble_tay:
.9fd3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fd6		a8					.byte $a8
.9fd7						Assemble_tax:
.9fd7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fda		aa					.byte $aa
.9fdb						Assemble_clv:
.9fdb		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fde		b8					.byte $b8
.9fdf						Assemble_tsx:
.9fdf		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fe2		ba					.byte $ba
.9fe3						Assemble_iny:
.9fe3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fe6		c8					.byte $c8
.9fe7						Assemble_dex:
.9fe7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fea		ca					.byte $ca
.9feb						Assemble_cld:
.9feb		20 63 81	jsr $8163		jsr	AssembleGroup4
>9fee		d8					.byte $d8
.9fef						Assemble_phx:
.9fef		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ff2		da					.byte $da
.9ff3						Assemble_stp:
.9ff3		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ff6		db					.byte $db
.9ff7						Assemble_inx:
.9ff7		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ffa		e8					.byte $e8
.9ffb						Assemble_nop:
.9ffb		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ffe		ea					.byte $ea
.9fff						Assemble_sed:
.9fff		20 63 81	jsr $8163		jsr	AssembleGroup4
>a002		f8					.byte $f8
.a003						Assemble_plx:
.a003		20 63 81	jsr $8163		jsr	AssembleGroup4
>a006		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a007						DecimalScalarTable:
>a007		66 66 66 66				.dword $66666666 ; 0.1
>a00b		de					.byte $de
>a00c		1f 85 eb 51				.dword $51eb851f ; 0.01
>a010		db					.byte $db
>a011		4c 37 89 41				.dword $4189374c ; 0.001
>a015		d8					.byte $d8
>a016		ac 8b db 68				.dword $68db8bac ; 0.0001
>a01a		d4					.byte $d4
>a01b		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a01f		d1					.byte $d1
>a020		83 de 1b 43				.dword $431bde83 ; 1e-06
>a024		ce					.byte $ce
>a025		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a029		ca					.byte $ca
>a02a		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a02e		c7					.byte $c7
>a02f		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a033		c4					.byte $c4
>a034		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a038		c0					.byte $c0
>a039		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a03d		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a03e						SyntaxError:
.a03e		a9 02		lda #$02		lda	#2
.a040		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a043						RangeError:
.a043		a9 04		lda #$04		lda	#4
.a045		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a048						TypeError:
.a048		a9 05		lda #$05		lda	#5
.a04a		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a04d						ArgumentError:
.a04d		a9 07		lda #$07		lda	#7
.a04f		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a052						NotDoneError:
.a052		a9 0c		lda #$0c		lda	#12
.a054		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a057						ErrorText:
>a057		42 72 65 61 6b 00			.text	"Break",0
>a05d		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a065		72 72 6f 72 00
>a06a		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a072		20 62 79 20 7a 65 72 6f 00
>a07b		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a083		61 6e 67 65 00
>a088		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a090		6d 61 74 63 68 00
>a096		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a09e		65 6d 6f 72 79 00
>a0a4		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a0ac		61 72 67 75 6d 65 6e 74 00
>a0b5		53 74 6f 70 00				.text	"Stop",0
>a0ba		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a0c2		6f 6f 20 6c 6f 6e 67 00
>a0ca		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a0d2		6e 20 66 61 69 6c 65 64 00
>a0db		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a0e3		61 74 61 00
>a0e7		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a0ef		65 6e 74 65 64 00
>a0f5		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a0fd		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a109		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a111		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a11e		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a126		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a133		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a13b		68 6f 75 74 20 57 68 69 6c 65 00
>a146		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a14e		68 6f 75 74 20 46 6f 72 00
>a157		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a15f		61 63 6b 20 66 75 6c 6c 00
>a168		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a170		75 63 74 75 72 65 00
>a177		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a17f		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a18c		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a194		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a1a2		41 72 72 61 79 20 73 69			.text	"Array size",0
>a1aa		7a 65 00
>a1ad		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a1b5		79 20 69 6e 64 65 78 00
>a1bd		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a1c5		74 20 64 65 63 6c 61 72 65 64 00
>a1d0		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a1d8		20 66 6f 75 6e 64 00
>a1df		44 72 69 76 65 20 6e 6f			.text	"Drive not found",0
>a1e7		74 20 66 6f 75 6e 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a1ef		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 30-Dec-22. "
>a1f7		20 62 75 69 6c 74 20 33 30 2d 44 65 63 2d 32 32
>a207		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a209						RectangleCommand:
.a209		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a20b		80 02		bra $a20f			bra 	ShapeDrawCmd
.a20d						CircleCommand:
.a20d		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a20f						ShapeDrawCmd:
.a20f		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a212						ShapeDraw:
.a212		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a215		4c 8d a2	jmp $a28d			jmp 	ExecuteGraphicCommand	 	; and complete
.a218						SpriteCommand:
.a218		a2 00		ldx #$00			ldx 	#0
.a21a		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get image number.
.a21d		5a		phy				phy
.a21e		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a220		a6 58		ldx $58				ldx 	NSMantissa0
.a222		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a224		b0 0d		bcs $a233			bcs 	_SCRange
.a226		a0 ff		ldy #$ff			ldy 	#255
.a228		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a22b		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a22d		7a		ply				ply
.a22e		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a231		80 5a		bra $a28d			bra 	ExecuteGraphicCommand
.a233						_SCRange:
.a233		4c 43 a0	jmp $a043			jmp 	RangeError
.a236						ImageCommand:
.a236		a2 00		ldx #$00			ldx 	#0
.a238		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get image number.
.a23b		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a23e						ImageRunDraw:
.a23e		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a240		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a243		ad 64 06	lda $0664			lda 	gxDrawScale
.a246		0a		asl a				asl 	a
.a247		0a		asl a				asl 	a
.a248		0a		asl a				asl 	a
.a249		a8		tay				tay
.a24a		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a24c		a6 58		ldx $58				ldx 	NSMantissa0
.a24e		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a251		60		rts				rts
.a252						TextCommand:
.a252		a2 00		ldx #$00			ldx 	#0
.a254		20 18 9e	jsr $9e18			jsr 	EvaluateString 				; get text
.a257		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a25a						TextRunDraw:
.a25a		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a25c		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a25f		a0 00		ldy #$00			ldy 	#0
.a261						_IRDLoop:
.a261		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a263		85 37		sta $37				sta 	zTemp0+1
.a265		a5 58		lda $58				lda 	NSMantissa0
.a267		85 36		sta $36				sta 	zTemp0
.a269		b1 36		lda ($36),y			lda 	(zTemp0),y
.a26b		f0 13		beq $a280			beq 	_IRDExit
.a26d		5a		phy				phy									; save string pos
.a26e		48		pha				pha 								; save char
.a26f		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a272		0a		asl a				asl 	a
.a273		0a		asl a				asl 	a
.a274		0a		asl a				asl 	a
.a275		a8		tay				tay
.a276		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a278		fa		plx				plx 								; char to draw
.a279		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a27c		7a		ply				ply 								; restore string pos
.a27d		c8		iny				iny
.a27e		90 e1		bcc $a261			bcc 	_IRDLoop 					; go back if no error.
.a280						_IRDExit:
.a280		60		rts				rts
.a281						PlotCommand:
.a281		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a283		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a286		80 05		bra $a28d			bra 	ExecuteGraphicCommand
.a288						LineCommand:
.a288		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a28a		20 99 a2	jsr $a299			jsr 	RunGraphicsCommand
.a28d						ExecuteGraphicCommand:
.a28d		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a290		20 5d 80	jsr $805d			jsr 	GXGraphicDraw 				; draw it and exit
.a293		b0 01		bcs $a296			bcs 	_EGCError
.a295		60		rts				rts
.a296						_EGCError:
.a296		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.a299						RunGraphicsCommand:
.a299		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a29c		68		pla				pla 								; pop handler address
.a29d		fa		plx				plx
.a29e		1a		inc a				inc 	a
.a29f		d0 01		bne $a2a2			bne 	_RGINoCarry
.a2a1		e8		inx				inx
.a2a2						_RGINoCarry:
.a2a2		8d 62 06	sta $0662			sta 	gxHandler
.a2a5		8e 63 06	stx $0663			stx 	gxHandler+1
.a2a8						_RGICommandLoop:
.a2a8		b1 30		lda ($30),y			lda 	(codePtr),y
.a2aa		c8		iny				iny
.a2ab		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a2ad		f0 53		beq $a302			beq 	_RGI_To
.a2af		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a2b1		f0 55		beq $a308			beq 	_RGI_Here
.a2b3		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a2b5		f0 3d		beq $a2f4			beq 	_RGI_Exit
.a2b7		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a2b9		f0 39		beq $a2f4			beq 	_RGI_Exit
.a2bb		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a2bd		f0 3e		beq $a2fd			beq 	_RGI_Frame
.a2bf		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a2c1		f0 33		beq $a2f6			beq 	_RGI_Solid
.a2c3		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a2c5		f0 4b		beq $a312			beq 	_RGI_By
.a2c7		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a2c9		f0 17		beq $a2e2			beq 	_RGI_Move2
.a2cb		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a2cd		f0 62		beq $a331			beq 	_RGI_Dim
.a2cf		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a2d1		f0 74		beq $a347			beq 	_RGI_Colour
.a2d3		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a2d5		f0 70		beq $a347			beq 	_RGI_Colour
.a2d7		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a2da		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a2dc		d0 03		bne $a2e1			bne 	_RGI_Move 					; move
.a2de		4c 6f a3	jmp $a36f			jmp		_RGI_SpriteInstructions
.a2e1						_RGI_Move:
.a2e1		88		dey				dey 								; unpick get.
.a2e2						_RGI_Move2:
.a2e2		20 95 a3	jsr $a395			jsr 	GCGetCoordinatePair 		; move to here
.a2e5		20 bc a3	jsr $a3bc			jsr 	GCCopyPairToStore 			; save
.a2e8		5a		phy				phy
.a2e9		20 b2 a3	jsr $a3b2			jsr 	GCLoadAXY 					; load in
.a2ec		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a2ee		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a2f1		7a		ply				ply
.a2f2		80 b4		bra $a2a8			bra 	_RGICommandLoop 			; and go round
.a2f4						_RGI_Exit:
.a2f4		88		dey				dey 								; unpick : / EOL
.a2f5		60		rts				rts
.a2f6						_RGI_Solid:
.a2f6		a9 02		lda #$02			lda 	#2
.a2f8		8d 5e 06	sta $065e			sta 	gxFillSolid
.a2fb		80 ab		bra $a2a8			bra 	_RGICommandLoop
.a2fd						_RGI_Frame:
.a2fd		9c 5e 06	stz $065e			stz 	gxFillSolid
.a300		80 a6		bra $a2a8			bra 	_RGICommandLoop
.a302						_RGI_To:
.a302		20 95 a3	jsr $a395			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a305		20 bc a3	jsr $a3bc			jsr 	GCCopyPairToStore
.a308						_RGI_Here:
.a308		5a		phy				phy
.a309		20 b2 a3	jsr $a3b2			jsr 	GCLoadAXY 					; load it into AXY
.a30c		20 6c a3	jsr $a36c			jsr 	_RGICallHandler 			; go do whatever it is.
.a30f		7a		ply				ply
.a310		80 96		bra $a2a8			bra 	_RGICommandLoop 			; and go round
.a312						_RGI_By:
.a312		20 a2 a3	jsr $a3a2			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a315		18		clc				clc
.a316		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a318		6d 5f 06	adc $065f			adc 	gxXPos
.a31b		8d 5f 06	sta $065f			sta 	gxXPos
.a31e		a5 61		lda $61				lda 	NSMantissa1+1
.a320		6d 60 06	adc $0660			adc 	gxXPos+1
.a323		8d 60 06	sta $0660			sta 	gxXPos+1
.a326		a5 5a		lda $5a				lda 	NSMantissa0+2
.a328		18		clc				clc
.a329		6d 61 06	adc $0661			adc 	gxYPos
.a32c		8d 61 06	sta $0661			sta 	gxYPos
.a32f		80 d7		bra $a308			bra 	_RGI_Here
.a331						_RGI_Dim:
.a331		a2 01		ldx #$01			ldx	 	#1
.a333		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger
.a336		a5 59		lda $59				lda 	NSMantissa0+1
.a338		c9 00		cmp #$00			cmp 	#0
.a33a		f0 2d		beq $a369			beq 	_RGIRange
.a33c		c9 09		cmp #$09			cmp 	#8+1
.a33e		b0 29		bcs $a369			bcs		_RGIRange
.a340		3a		dec a				dec 	a
.a341		8d 64 06	sta $0664			sta 	gxDrawScale
.a344		4c a8 a2	jmp $a2a8			jmp 	_RGICommandLoop
.a347						_RGI_Colour:
.a347		a2 01		ldx #$01			ldx 	#1 							; colour
.a349		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger
.a34c		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a34e		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.a351		b1 30		lda ($30),y			lda 	(codePtr),y
.a353		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a355		d0 04		bne $a35b			bne 	_RGICDefaultMode
.a357		c8		iny				iny
.a358		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger
.a35b						_RGICDefaultMode:
.a35b		5a		phy				phy
.a35c		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a35e		a6 59		ldx $59				ldx 	NSMantissa0+1
.a360		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a362		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a365		7a		ply				ply
.a366		4c a8 a2	jmp $a2a8			jmp 	_RGICommandLoop 			; and go round
.a369						_RGIRange:
.a369		4c 43 a0	jmp $a043			jmp 	RangeError
.a36c						_RGICallHandler:
.a36c		6c 62 06	jmp ($0662)			jmp 	(gxHandler)
.a36f						_RGI_SpriteInstructions:
.a36f		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a371		f0 07		beq $a37a			beq 	_RGISpriteOff
.a373		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a375		f0 13		beq $a38a			beq 	_RGISetImage
.a377		4c e1 a2	jmp $a2e1			jmp 	_RGI_Move
.a37a						_RGISpriteOff:
.a37a		5a		phy				phy
.a37b		a0 01		ldy #$01			ldy 	#1
.a37d		a2 00		ldx #$00			ldx 	#0
.a37f						_RGIDoCommandLoop:
.a37f		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a381		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a384		7a		ply				ply
.a385		b0 e2		bcs $a369			bcs 	_RGIRange
.a387		4c a8 a2	jmp $a2a8			jmp 	_RGICommandLoop
.a38a						_RGISetImage:
.a38a		a2 01		ldx #$01			ldx 	#1
.a38c		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger
.a38f		5a		phy				phy
.a390		aa		tax				tax
.a391		a0 00		ldy #$00			ldy 	#0
.a393		80 ea		bra $a37f			bra 	_RGIDoCommandLoop
.a395						GCGetCoordinatePair:
.a395		a2 01		ldx #$01			ldx 	#1
.a397		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.a39a		20 64 8f	jsr $8f64			jsr 	CheckComma
.a39d		e8		inx				inx
.a39e		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.a3a1		60		rts				rts
.a3a2						GCSignedCoordinatePair:
.a3a2		a2 01		ldx #$01			ldx 	#1
.a3a4		20 4a 9e	jsr $9e4a			jsr 	Evaluate16BitIntegerSigned
.a3a7		20 64 8f	jsr $8f64			jsr 	CheckComma
.a3aa		e8		inx				inx
.a3ab		20 4a 9e	jsr $9e4a			jsr 	Evaluate16BitIntegerSigned
.a3ae		60		rts				rts
.a3af						_GCCPRange:
.a3af		4c 43 a0	jmp $a043			jmp 	RangeError
.a3b2						GCLoadAXY:
.a3b2		ad 60 06	lda $0660			lda 	gxXPos+1
.a3b5		ae 5f 06	ldx $065f			ldx 	gxXPos
.a3b8		ac 61 06	ldy $0661			ldy 	gxYPos
.a3bb		60		rts				rts
.a3bc						GCCopyPairToStore:
.a3bc		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a3be		8d 5f 06	sta $065f			sta 	gxXPos
.a3c1		a5 61		lda $61				lda 	NSMantissa1+1
.a3c3		8d 60 06	sta $0660			sta 	gxXPos+1
.a3c6		a5 5a		lda $5a				lda 	NSMantissa0+2
.a3c8		8d 61 06	sta $0661			sta 	gxYPos
.a3cb		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a3cc						BitmapCtrl:
.a3cc		b1 30		lda ($30),y			lda 	(codePtr),y
.a3ce		c8		iny				iny
.a3cf		a2 01		ldx #$01			ldx 	#1
.a3d1		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a3d3		f0 11		beq $a3e6			beq 	BitmapSwitch
.a3d5		ca		dex				dex
.a3d6		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a3d8		f0 0c		beq $a3e6			beq 	BitmapSwitch
.a3da		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get the colour
.a3dd		5a		phy				phy
.a3de		aa		tax				tax
.a3df		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a3e1		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a3e4		7a		ply				ply
.a3e5		60		rts				rts
.a3e6						BitmapSwitch:
.a3e6		5a		phy				phy
.a3e7		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a3e9		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a3eb		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a3ee		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a3f0		a0 00		ldy #$00			ldy 	#0
.a3f2		a2 ff		ldx #$ff			ldx 	#$FF
.a3f4		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a3f7		9c 5e 06	stz $065e			stz 	gxFillSolid
.a3fa		9c 5f 06	stz $065f			stz 	gxXPos
.a3fd		9c 60 06	stz $0660			stz 	gxXPos+1
.a400		9c 61 06	stz $0661			stz 	gxYPos
.a403		9c 64 06	stz $0664			stz 	gxDrawScale
.a406		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a408		a2 00		ldx #$00			ldx 	#0
.a40a		a0 00		ldy #$00			ldy 	#0
.a40c		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a40f		7a		ply				ply
.a410		60		rts				rts
.a411						SpritesCtrl:
.a411		b1 30		lda ($30),y			lda 	(codePtr),y
.a413		c8		iny				iny
.a414		a2 01		ldx #$01			ldx 	#1
.a416		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a418		f0 08		beq $a422			beq 	SpriteSwitch
.a41a		ca		dex				dex
.a41b		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a41d		f0 03		beq $a422			beq 	SpriteSwitch
.a41f		4c 3e a0	jmp $a03e			jmp 	SyntaxError
.a422						SpriteSwitch:
.a422		5a		phy				phy
.a423		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a425		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a427		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a42a		7a		ply				ply
.a42b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a42c						GfxCommand:
.a42c		a2 00		ldx #$00			ldx 	#0
.a42e		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; command
.a431		20 64 8f	jsr $8f64			jsr 	CheckComma
.a434		e8		inx				inx
.a435		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; X
.a438		20 64 8f	jsr $8f64			jsr 	CheckComma
.a43b		e8		inx				inx
.a43c		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; Y
.a43f		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a441		4a		lsr a				lsr 	a
.a442		d0 12		bne $a456			bne 	_GfxError
.a444		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a446		b0 0e		bcs $a456			bcs 	_GfxError 					; bit 7 should have been zero
.a448		5a		phy				phy 								; save pos
.a449		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a44b		a6 59		ldx $59				ldx 	NSMantissa0+1
.a44d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a44f		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a452		b0 02		bcs $a456			bcs 	_GfxError
.a454		7a		ply				ply 								; restore pos and exit.
.a455		60		rts				rts
.a456						_GfxError:
.a456		4c 43 a0	jmp $a043			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a459						UnaryHit:
.a459		fa		plx				plx
.a45a		a9 36		lda #$36			lda 	#zTemp0
.a45c		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a45f		20 64 8f	jsr $8f64			jsr 	CheckComma
.a462		e8		inx				inx
.a463		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a466		20 5c 8f	jsr $8f5c			jsr		CheckRightBracket
.a469		ca		dex				dex 								; fix back up again.
.a46a		da		phx				phx 								; save X/Y
.a46b		5a		phy				phy
.a46c		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a46e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a470		aa		tax				tax
.a471		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a473		20 5d 80	jsr $805d			jsr 	GXGraphicDraw 				; calculate result
.a476		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a477		7a		ply				ply 								; restore XY
.a478		fa		plx				plx
.a479		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte 					; return the hit result
.a47c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a47d						PaletteCommand:
.a47d		a2 00		ldx #$00			ldx 	#0
.a47f		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; colour
.a482		20 64 8f	jsr $8f64			jsr 	CheckComma
.a485		e8		inx				inx
.a486		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; r
.a489		20 64 8f	jsr $8f64			jsr 	CheckComma
.a48c		e8		inx				inx
.a48d		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; g
.a490		20 64 8f	jsr $8f64			jsr 	CheckComma
.a493		e8		inx				inx
.a494		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; b
.a497		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a499		85 36		sta $36				sta 	zTemp0
.a49b		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a49d		85 37		sta $37				sta 	zTemp0+1
.a49f		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a4a1		26 37		rol $37				rol	 	zTemp0+1
.a4a3		06 36		asl $36				asl 	zTemp0
.a4a5		26 37		rol $37				rol	 	zTemp0+1
.a4a7		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a4a9		85 01		sta $01				sta 	1
.a4ab		5a		phy				phy
.a4ac		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a4ae		92 36		sta ($36)			sta 	(zTemp0)
.a4b0		a0 01		ldy #$01			ldy 	#1
.a4b2		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4b4		91 36		sta ($36),y			sta 	(zTemp0),y
.a4b6		a5 59		lda $59				lda 	NSMantissa0+1
.a4b8		c8		iny				iny
.a4b9		91 36		sta ($36),y			sta 	(zTemp0),y
.a4bb		7a		ply				ply
.a4bc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a4bd						XLoadCommand:
.a4bd		20 56 8a	jsr $8a56			jsr 	NewProgram
.a4c0		20 46 83	jsr $8346			jsr 	BackloadProgram
.a4c3		4c 05 84	jmp $8405			jmp 	WarmStart
.a4c6						XGoCommand:
.a4c6		20 56 8a	jsr $8a56			jsr 	NewProgram
.a4c9		20 46 83	jsr $8346			jsr 	BackloadProgram
.a4cc		4c d4 8b	jmp $8bd4			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a4cf						UnaryEvent:
.a4cf		fa		plx				plx
.a4d0		20 69 a5	jsr $a569			jsr 	TimerToStackX 				; timer in +0
.a4d3		e8		inx				inx  								; put reference into +1
.a4d4		20 c3 98	jsr $98c3			jsr 	EvaluateTerm
.a4d7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a4d9		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a4db		d0 4c		bne $a529			bne 	_UEType
.a4dd		e8		inx				inx 								; put the step in +2
.a4de		20 64 8f	jsr $8f64			jsr 	CheckComma
.a4e1		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger
.a4e4		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.a4e7		ca		dex				dex
.a4e8		ca		dex				dex
.a4e9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a4eb		85 36		sta $36				sta 	zTemp0
.a4ed		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a4ef		85 37		sta $37				sta 	zTemp0+1
.a4f1		5a		phy				phy
.a4f2		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a4f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4f6		30 2d		bmi $a525			bmi 	_UEFalse 					; exit if signed.
.a4f8		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a4fa		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4fc		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a4fe		c8		iny				iny
.a4ff		b5 60		lda $60,x			lda 	NSMantissa1,x
.a501		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a503		c8		iny				iny
.a504		b5 68		lda $68,x			lda 	NSMantissa2,x
.a506		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a508		90 1b		bcc $a525			bcc 	_UEFalse 					; no, return FALSE.
.a50a		18		clc				clc
.a50b		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a50d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a50f		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a511		91 36		sta ($36),y			sta 	(zTemp0),y
.a513		c8		iny				iny
.a514		b5 60		lda $60,x			lda 	NSMantissa1,x
.a516		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a518		91 36		sta ($36),y			sta 	(zTemp0),y
.a51a		c8		iny				iny
.a51b		b5 68		lda $68,x			lda 	NSMantissa2,x
.a51d		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a51f		91 36		sta ($36),y			sta 	(zTemp0),y
.a521		7a		ply				ply
.a522		4c e2 8f	jmp $8fe2			jmp 	ReturnTrue
.a525						_UEFalse:
.a525		7a		ply				ply 								; restore Y
.a526		4c ed 8f	jmp $8fed			jmp 	ReturnFalse 				; and return False
.a529						_UEType:
.a529		4c 48 a0	jmp $a048			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a52c						UnaryJoyX:
.a52c		18		clc				clc
.a52d		80 01		bra $a530			bra 	JoyMain
.a52f						UnaryJoyY:
.a52f		38		sec				sec
.a530						JoyMain:
.a530		fa		plx				plx 								; get pos
.a531		08		php				php 								; save carry (set for Y)
.a532		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a535		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.a538		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a53b		28		plp				plp
.a53c		b0 02		bcs $a540			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a53e		4a		lsr a				lsr 	a
.a53f		4a		lsr a				lsr 	a
.a540						_JMNoShift:
.a540		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a541		b0 07		bcs $a54a			bcs 	JMIsLeft
.a543		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a544		b0 07		bcs $a54d			bcs 	JMIsRight
.a546		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; zero result
.a549		60		rts				rts
.a54a						JMIsLeft:
.a54a		4c e2 8f	jmp $8fe2			jmp 	ReturnTrue
.a54d						JMIsRight:
.a54d		a9 01		lda #$01			lda 	#1
.a54f		20 c2 9e	jsr $9ec2			jsr 	NSMSetByte
.a552		60		rts				rts
.a553						UnaryJoyB:
.a553		fa		plx				plx 								; get pos
.a554		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a557		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.a55a		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a55d		29 10		and #$10			and 	#$10
.a55f		d0 e9		bne $a54a			bne 	JMIsLeft
.a561		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero
.a564		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a565						UnaryTimer:
.a565		fa		plx				plx
.a566		20 5c 8f	jsr $8f5c			jsr 	CheckRightBracket
.a569						TimerToStackX:
.a569		20 c0 9e	jsr $9ec0			jsr 	NSMSetZero 					; zero result
.a56c		64 01		stz $01				stz 	1 							; access I/O
.a56e		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a571		95 58		sta $58,x			sta 	NSMantissa0,x
.a573		ad 5a d6	lda $d65a			lda 	$D65A
.a576		95 60		sta $60,x			sta 	NSMantissa1,x
.a578		ad 5b d6	lda $d65b			lda 	$D65B
.a57b		95 68		sta $68,x			sta 	NSMantissa2,x
.a57d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a57e						MemoryDeleteLine:
.a57e		20 9d a5	jsr $a59d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a581		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a583		a8		tay				tay
.a584						_MDDLLoop:
.a584		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a586		92 30		sta ($30)			sta 	(codePtr)
.a588		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a58a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a58c		d0 07		bne $a595			bne 	_MDLDLNext
.a58e		a5 31		lda $31				lda 	codePtr+1
.a590		c5 3b		cmp $3b				cmp 	zTemp2+1
.a592		d0 01		bne $a595			bne 	_MDLDLNext
.a594						_MDDLExit:
.a594		60		rts				rts
.a595						_MDLDLNext:
.a595		e6 30		inc $30				inc 	codePtr						; next byte
.a597		d0 eb		bne $a584			bne 	_MDDLLoop
.a599		e6 31		inc $31				inc 	codePtr+1
.a59b		80 e7		bra $a584			bra 	_MDDLLoop
.a59d						IMemoryFindEnd:
.a59d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a59f		85 3a		sta $3a				sta 	0+zTemp2
.a5a1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5a3		85 3b		sta $3b				sta 	1+zTemp2
.a5a5						_MDLFELoop:
.a5a5		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a5a7		f0 0b		beq $a5b4			beq 	_MDLFEExit
.a5a9		18		clc				clc
.a5aa		65 3a		adc $3a				adc 	zTemp2
.a5ac		85 3a		sta $3a				sta 	zTemp2
.a5ae		90 f5		bcc $a5a5			bcc 	_MDLFELoop
.a5b0		e6 3b		inc $3b				inc 	zTemp2+1
.a5b2		80 f1		bra $a5a5			bra 	_MDLFELoop
.a5b4						_MDLFEExit:
.a5b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a5b5						MemoryInsertLine:
.a5b5		08		php				php
.a5b6		20 9d a5	jsr $a59d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a5b9		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a5bb		1a		inc a				inc 	a
.a5bc		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a5be		b0 36		bcs $a5f6			bcs 	_MDLIError 					; no, fail.
.a5c0		28		plp				plp 								; do at a specific point or the end ?
.a5c1		90 08		bcc $a5cb			bcc 	_MDLIFound 					; if specific point already set.
.a5c3		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a5c5		85 30		sta $30				sta 	codePtr 					; end.
.a5c7		a5 3b		lda $3b				lda 	zTemp2+1
.a5c9		85 31		sta $31				sta 	codePtr+1
.a5cb						_MDLIFound:
.a5cb		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a5ce		a8		tay				tay
.a5cf						_MDLIInsert:
.a5cf		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a5d1		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a5d3		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a5d5		c5 3a		cmp $3a				cmp 	zTemp2
.a5d7		d0 06		bne $a5df			bne 	_MDLINext
.a5d9		a5 31		lda $31				lda 	codePtr+1
.a5db		c5 3b		cmp $3b				cmp 	zTemp2+1
.a5dd		f0 0a		beq $a5e9			beq 	_MDLIHaveSpace
.a5df						_MDLINext:
.a5df		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a5e1		d0 02		bne $a5e5			bne 	_MDLINoBorrow
.a5e3		c6 3b		dec $3b				dec 	zTemp2+1
.a5e5						_MDLINoBorrow:
.a5e5		c6 3a		dec $3a				dec 	zTemp2
.a5e7		80 e6		bra $a5cf			bra 	_MDLIInsert
.a5e9						_MDLIHaveSpace:
.a5e9		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a5ec		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a5ed						_MDLICopy:
.a5ed		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a5f0		91 30		sta ($30),y			sta 	(codePtr),y
.a5f2		88		dey				dey
.a5f3		10 f8		bpl $a5ed			bpl 	_MDLICopy
.a5f5		60		rts				rts
.a5f6						_MDLIError:
.a5f6		a9 06		lda #$06		lda	#6
.a5f8		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.a5fb						MDLAppendLine:
.a5fb		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a5fd		85 36		sta $36				sta 	zTemp0
.a5ff		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a601		85 38		sta $38				sta 	0+zTemp1
.a603		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a605		85 39		sta $39				sta 	1+zTemp1
.a607		b2 38		lda ($38)			lda 	(zTemp1)
.a609		d0 0a		bne $a615			bne 	_MDLANoInitialise
.a60b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a60d		8d 65 06	sta $0665			sta 	0+AppendPointer
.a610		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a612		8d 66 06	sta $0666			sta 	1+AppendPointer
.a615						_MDLANoInitialise:
.a615		18		clc				clc
.a616		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a619		85 38		sta $38				sta 	zTemp1
.a61b		72 36		adc ($36)			adc 	(zTemp0)
.a61d		8d 65 06	sta $0665			sta 	AppendPointer
.a620		ad 66 06	lda $0666			lda 	AppendPointer+1
.a623		85 39		sta $39				sta 	zTemp1+1
.a625		69 00		adc #$00			adc 	#0
.a627		8d 66 06	sta $0666			sta 	AppendPointer+1
.a62a		a0 00		ldy #$00			ldy 	#0
.a62c						_MDLACopy:
.a62c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a62e		91 38		sta ($38),y			sta 	(zTemp1),y
.a630		c8		iny				iny
.a631		98		tya				tya
.a632		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a634		d0 f6		bne $a62c			bne 	_MDLACopy
.a636		a9 00		lda #$00			lda 	#0 							; end of program.
.a638		91 38		sta ($38),y			sta 	(zTemp1),y
.a63a		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a63b						MemoryNew:
.a63b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a63d		85 30		sta $30				sta 	codePtr
.a63f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a641		85 31		sta $31				sta 	codePtr+1
.a643		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a645		92 30		sta ($30)			sta 	(codePtr)
.a647		60		rts				rts
.a648						MemoryInline:
.a648		98		tya				tya 								; put address into stack,x
.a649		18		clc				clc  								; get the offset, add codePtr
.a64a		65 30		adc $30				adc 	codePtr
.a64c		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a64e		a5 31		lda $31				lda 	codePtr+1
.a650		69 00		adc #$00			adc 	#0
.a652		95 60		sta $60,x			sta 	NSMantissa1,x
.a654		74 68		stz $68,x			stz 	NSMantissa2,x
.a656		74 70		stz $70,x			stz 	NSMantissa3,x
.a658		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a659						MemorySearch:
.a659		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a65b		86 37		stx $37				stx 	zTemp0+1
.a65d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a65f		85 30		sta $30				sta 	codePtr
.a661		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a663		85 31		sta $31				sta 	codePtr+1
.a665						_MTAXLoop:
.a665		b2 30		lda ($30)			lda 	(codePtr)
.a667		18		clc				clc
.a668		f0 21		beq $a68b			beq 	_MTAXExit 					; reached end, exit with CC.
.a66a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a66c		b1 30		lda ($30),y			lda 	(codePtr),y
.a66e		38		sec				sec
.a66f		e5 36		sbc $36				sbc 	zTemp0
.a671		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a673		c8		iny				iny 								; do the MSB
.a674		b1 30		lda ($30),y			lda 	(codePtr),y
.a676		e5 37		sbc $37				sbc 	zTemp0+1
.a678		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a67a		f0 0f		beq $a68b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a67c		b0 0d		bcs $a68b			bcs 	_MTAXExit 					; current < required exit
.a67e		18		clc				clc
.a67f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a681		65 30		adc $30				adc 	codePtr
.a683		85 30		sta $30				sta 	codePtr
.a685		90 02		bcc $a689			bcc 	_CREExit
.a687		e6 31		inc $31				inc 	codePtr+1 					; carry
.a689						_CREExit:
.a689		80 da		bra $a665			bra 	_MTAXLoop
.a68b						_MTAXExit:
.a68b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a68c						UpdateFont:
.a68c		a5 01		lda $01				lda 	1 							; save position
.a68e		48		pha				pha
.a68f		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a691		85 01		sta $01				sta 	1
.a693		a9 ba		lda #$ba			lda 	#((FontBinary) & $FF)
.a695		85 36		sta $36				sta 	0+zTemp0
.a697		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a699		85 37		sta $37				sta 	1+zTemp0
.a69b		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a69d		85 38		sta $38				sta 	0+zTemp1
.a69f		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a6a1		85 39		sta $39				sta 	1+zTemp1
.a6a3						_UFCopy1:
.a6a3		a0 00		ldy #$00			ldy 	#0
.a6a5						_UFCopy2:
.a6a5		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6a7		91 38		sta ($38),y			sta 	(zTemp1),y
.a6a9		c8		iny				iny
.a6aa		d0 f9		bne $a6a5			bne 	_UFCopy2
.a6ac		e6 37		inc $37				inc 	zTemp0+1
.a6ae		e6 39		inc $39				inc 	zTemp1+1
.a6b0		a5 39		lda $39				lda 	zTemp1+1
.a6b2		c9 c8		cmp #$c8			cmp 	#$C8
.a6b4		d0 ed		bne $a6a3			bne 	_UFCopy1
.a6b6		68		pla				pla 								; restore.
.a6b7		85 01		sta $01				sta 	1
.a6b9		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a6ba						FontBinary:
>a6ba		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a6c2		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a6d2		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a6e2		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a6f2		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a702		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a712		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a722		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a732		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a742		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a752		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a762		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a772		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a782		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a792		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a7a2		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a7b2		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a7c2		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a7d2		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a7e2		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a7f2		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a802		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a812		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a822		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a832		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a842		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a852		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a862		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a872		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a882		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a892		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a8a2		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a8b2		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a8c2		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a8d2		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a8e2		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a8f2		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a902		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a912		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a922		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a932		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a942		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a952		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a962		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a972		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a982		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a992		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a9a2		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a9b2		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a9c2		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>a9d2		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>a9e2		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>a9f2		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa02		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aa12		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aa22		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aa32		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aa42		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aa52		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aa62		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aa72		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aa82		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aa92		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aaa2		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aab2		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aac2		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aad2		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aae2		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aaf2		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab02		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ab12		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ab22		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ab32		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ab42		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ab52		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ab62		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ab72		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ab82		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ab92		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>aba2		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>abb2		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>abc2		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>abd2		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>abe2		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>abf2		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac02		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ac12		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ac22		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ac32		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ac42		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ac52		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ac62		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ac72		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ac82		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ac92		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>aca2		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>acb2		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>acc2		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>acd2		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ace2		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>acf2		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad02		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ad12		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ad22		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ad32		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ad42		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ad52		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ad62		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ad72		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>ad82		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ad92		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ada2		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>adb2		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>adc2		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>add2		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ade2		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>adf2		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae02		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>ae12		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>ae22		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>ae32		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>ae42		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>ae52		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>ae62		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>ae72		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>ae82		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>ae92		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>aea2		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>aeb2		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.aeba						PingCommand:
.aeba		5a		phy				phy 								; save pos
.aebb		a9 01		lda #$01			lda 	#1 						; push channel.
.aebd		48		pha				pha
.aebe		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.aec0		a2 03		ldx #$03			ldx 	#3 						; length
.aec2		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.aec4		80 24		bra $aeea			bra 	SoundEffectCommand
.aec6						ZapCommand:
.aec6		5a		phy				phy 								; save pos
.aec7		a9 01		lda #$01			lda 	#1 						; push channel.
.aec9		48		pha				pha
.aeca		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.aecc		a2 05		ldx #$05			ldx 	#5 						; length
.aece		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.aed0		80 18		bra $aeea			bra 	SoundEffectCommand
.aed2						ShootCommand:
.aed2		5a		phy				phy 								; save pos
.aed3		a9 03		lda #$03			lda 	#3 						; push channel.
.aed5		48		pha				pha
.aed6		a9 20		lda #$20			lda 	#32 						; pitch LSB
.aed8		a2 02		ldx #$02			ldx 	#2 						; length
.aeda		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.aedc		80 0c		bra $aeea			bra 	SoundEffectCommand
.aede						Explode:
.aede		5a		phy				phy 								; save pos
.aedf		a9 03		lda #$03			lda 	#3 						; push channel.
.aee1		48		pha				pha
.aee2		a9 50		lda #$50			lda 	#80 						; pitch LSB
.aee4		a2 05		ldx #$05			ldx 	#5 						; length
.aee6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.aee8		80 00		bra $aeea			bra 	SoundEffectCommand
.aeea						SoundEffectCommand:
.aeea		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.aeed		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.aef0		a9 0f		lda #$0f			lda 	#15
.aef2		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.aef5		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.aef8		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.aefb		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.aefe		68		pla				pla
.aeff		09 10		ora #$10			ora 	#$10  						; execute command $11
.af01		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af03		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af05		20 67 80	jsr $8067			jsr 	SNDCommand
.af08		7a		ply				ply
.af09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.af0a						UnaryPlaying:
.af0a		fa		plx				plx
.af0b		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; get channel #
.af0e		48		pha				pha
.af0f		20 5c 8f	jsr $8f5c			jsr		CheckRightBracket
.af12		68		pla				pla
.af13		c9 04		cmp #$04			cmp 	#4
.af15		b0 0c		bcs $af23			bcs 	_UPNotPlaying
.af17		09 20		ora #$20			ora 	#$20 						; query playing ?
.af19		20 67 80	jsr $8067			jsr 	SNDCommand
.af1c		c9 00		cmp #$00			cmp 	#0
.af1e		f0 03		beq $af23			beq 	_UPNotPlaying
.af20		4c e2 8f	jmp $8fe2			jmp 	ReturnTrue
.af23						_UPNotPlaying:
.af23		4c ed 8f	jmp $8fed			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.af26						SoundCommand:
.af26		b1 30		lda ($30),y			lda 	(codePtr),y
.af28		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.af2a		d0 09		bne $af35			bne 	_SNDMain
.af2c		c8		iny				iny 								; skip OFF
.af2d		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.af2f		5a		phy				phy
.af30		20 67 80	jsr $8067			jsr 	SNDCommand
.af33		7a		ply				ply
.af34		60		rts				rts
.af35						_SNDMain:
.af35		a2 00		ldx #$00			ldx 	#0
.af37		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; channel
.af3a		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.af3c		b0 4b		bcs $af89			bcs 	_SndError
.af3e		e8		inx				inx 								; do the rest in slot 1.
.af3f		20 64 8f	jsr $8f64			jsr 	CheckComma
.af42		20 40 9e	jsr $9e40			jsr 	Evaluate16BitInteger 		; Pitch
.af45		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.af47		c9 10		cmp #$10			cmp 	#16
.af49		b0 3e		bcs $af89			bcs 	_SndError
.af4b		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.af4e		b5 58		lda $58,x			lda 	NSMantissa0,x
.af50		8d 67 06	sta $0667			sta 	SoundCommandBlock
.af53		20 64 8f	jsr $8f64			jsr 	CheckComma
.af56		20 5b 9e	jsr $9e5b			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.af59		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.af5c		a9 0f		lda #$0f			lda 	#15
.af5e		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.af61		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.af64		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.af67		b1 30		lda ($30),y			lda 	(codePtr),y
.af69		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.af6b		d0 0e		bne $af7b			bne 	_SNDPlay
.af6d		c8		iny				iny
.af6e		20 4a 9e	jsr $9e4a			jsr 	Evaluate16BitIntegerSigned 	; Slide
.af71		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.af73		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.af76		b5 60		lda $60,x			lda 	NSMantissa1,x
.af78		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.af7b						_SNDPlay:
.af7b		5a		phy				phy
.af7c		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.af7e		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.af80		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af82		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af84		20 67 80	jsr $8067			jsr 	SNDCommand
.af87		7a		ply				ply
.af88		60		rts				rts
.af89						_SndError:
.af89		4c 43 a0	jmp $a043			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.af8c						StackPushByte:
.af8c		48		pha				pha 								; save byte on stack
.af8d		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.af8f		d0 08		bne $af99			bne 	_SPBNoBorrow
.af91		c6 35		dec $35				dec 	basicStack+1 				; borrow
.af93		a5 35		lda $35				lda 	basicStack+1 				; check range.
.af95		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af97		90 06		bcc $af9f			bcc 	_SPBMemory
.af99						_SPBNoBorrow:
.af99		c6 34		dec $34				dec 	basicStack
.af9b		68		pla				pla 								; get back and write
.af9c		92 34		sta ($34)			sta 	(basicStack)
.af9e		60		rts				rts
.af9f						_SPBMemory:
.af9f		a9 12		lda #$12		lda	#18
.afa1		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.afa4						StackPopByte:
.afa4		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.afa6		e6 34		inc $34				inc 	basicStack
.afa8		d0 02		bne $afac			bne 	_SPBNoCarry
.afaa		e6 35		inc $35				inc 	basicStack+1
.afac						_SPBNoCarry:
.afac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.afad						StackOpen:
.afad		48		pha				pha 								; save frame byte
.afae		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.afb0		0a		asl a				asl 	a 							; claim twice this for storage
.afb1		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.afb3		38		sec				sec 								; so basically subtracting from
.afb4		65 34		adc $34				adc 	basicStack 	 				; basicStack
.afb6		85 34		sta $34				sta 	basicStack
.afb8		b0 09		bcs $afc3			bcs 	_SONoBorrow
>afba		db						.byte 	$DB 						; causes a break in the emulator
.afbb		c6 35		dec $35				dec 	basicStack+1
.afbd		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.afbf		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.afc1		90 04		bcc $afc7			bcc 	_SOMemory
.afc3						_SONoBorrow:
.afc3		68		pla				pla 								; get marker back and write at TOS
.afc4		92 34		sta ($34)			sta 	(basicStack)
.afc6		60		rts				rts
.afc7						_SOMemory:
.afc7		a9 12		lda #$12		lda	#18
.afc9		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.afcc						StackClose:
.afcc		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.afce		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.afd0		0a		asl a				asl 	a 							; claim twice this.
.afd1		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.afd3		85 34		sta $34				sta 	basicStack
.afd5		90 02		bcc $afd9			bcc 	_SCExit
.afd7		e6 35		inc $35				inc 	basicStack+1
.afd9						_SCExit:
.afd9		60		rts				rts
.afda						StackCheckFrame:
.afda		48		pha				pha
.afdb						_StackRemoveLocals:
.afdb		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.afdd		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.afdf		b0 05		bcs $afe6			bcs 	_SCNoLocal
.afe1		20 05 8a	jsr $8a05			jsr 	LocalPopValue 				; restore the local value
.afe4		80 f5		bra $afdb			bra 	_StackRemoveLocals 			; gr round again
.afe6						_SCNoLocal:
.afe6		68		pla				pla 								; get the frame check.
.afe7		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.afe9		29 f0		and #$f0			and 	#$F0 						; check type bits
.afeb		d0 01		bne $afee			bne 	_SCFError 					; different, we have structures mixed up
.afed		60		rts				rts
.afee						_SCFError:
.afee		8a		txa				txa 								; report error X
.afef		4c 75 8f	jmp $8f75			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.aff2						STKSaveCodePosition:
.aff2		5a		phy				phy
.aff3		98		tya				tya 								; save Y
.aff4		a0 05		ldy #$05			ldy 	#5
.aff6		91 34		sta ($34),y			sta 	(basicStack),y
.aff8		88		dey				dey 								; save Code Pointer
.aff9						_STKSaveLoop:
.aff9		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.affc		91 34		sta ($34),y			sta 	(basicStack),y
.affe		88		dey				dey
.afff		d0 f8		bne $aff9			bne 	_STKSaveLoop
.b001		7a		ply				ply
.b002		60		rts				rts
.b003						STKLoadCodePosition:
.b003		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b005						_STKLoadLoop:
.b005		b1 34		lda ($34),y			lda 	(basicStack),y
.b007		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b00a		c8		iny				iny
.b00b		c0 05		cpy #$05			cpy 	#5
.b00d		d0 f6		bne $b005			bne 	_STKLoadLoop
.b00f		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b011		a8		tay				tay
.b012		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b013						StackReset:
.b013		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b015		85 34		sta $34				sta 	0+basicStack
.b017		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b019		85 35		sta $35				sta 	1+basicStack
.b01b		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b01d		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b01f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b020						StringConcrete:
.b020		5a		phy				phy 								; save position on stack
.b021		20 af 9a	jsr $9aaf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b024		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b026		85 38		sta $38				sta 	zTemp1
.b028		b5 60		lda $60,x			lda 	NSMantissa1,x
.b02a		85 39		sta $39				sta 	zTemp1+1
.b02c		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b02e						_SALength:
.b02e		c8		iny				iny
.b02f		b1 38		lda ($38),y			lda 	(zTemp1),y
.b031		d0 fb		bne $b02e			bne 	_SALength
.b033		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b035		b0 3d		bcs $b074			bcs 	_SALengthError
.b037		98		tya				tya 				 				; length of the new string
.b038		18		clc				clc
.b039		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b03b		90 02		bcc $b03f			bcc 	_SAHaveLength
.b03d		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b03f						_SAHaveLength:
.b03f		48		pha				pha 								; save length.
.b040		38		sec				sec
.b041		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b043		6d 0e 04	adc $040e			adc 	stringMemory
.b046		8d 0e 04	sta $040e			sta 	stringMemory
.b049		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b04b		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b04d		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b04f		6d 0f 04	adc $040f			adc 	stringMemory+1
.b052		8d 0f 04	sta $040f			sta 	stringMemory+1
.b055		85 3b		sta $3b				sta 	zTemp2+1
.b057		95 60		sta $60,x			sta 	NSMantissa1,x
.b059		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b05a		38		sec				sec
.b05b		e9 03		sbc #$03			sbc 	#3
.b05d		92 3a		sta ($3a)			sta 	(zTemp2)
.b05f		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b061		a0 01		ldy #$01			ldy 	#1
.b063		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b065						_SACopyNewString:
.b065		a0 00		ldy #$00			ldy 	#0
.b067						_SACopyNSLoop:
.b067		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b069		c8		iny				iny 								; write two on in string storage
.b06a		c8		iny				iny
.b06b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b06d		88		dey				dey 								; this makes it one one.
.b06e		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b070		d0 f5		bne $b067			bne 	_SACopyNSLoop
.b072		7a		ply				ply
.b073		60		rts				rts
.b074						_SALengthError:
.b074		a9 09		lda #$09		lda	#9
.b076		4c 75 8f	jmp $8f75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b079						StringSystemInitialise:
.b079		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b07b		8d 0e 04	sta $040e			sta 	0+stringMemory
.b07e		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b080		8d 0f 04	sta $040f			sta 	1+stringMemory
.b083		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b086		60		rts				rts
.b087						StringSpaceInitialise:
.b087		20 af 9a	jsr $9aaf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b08a		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b08c		8d 10 04	sta $0410			sta 	stringInitialised
.b08f		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b092		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b095		ad 0f 04	lda $040f			lda 	stringMemory+1
.b098		3a		dec a				dec 	a
.b099		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b09c		60		rts				rts
.b09d						StringTempAllocate:
.b09d		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b09f		b0 30		bcs $b0d1			bcs 	_STALength
.b0a1		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b0a4		30 05		bmi $b0ab			bmi 	_STAAllocate
.b0a6		48		pha				pha 								; save value to subtract.
.b0a7		20 87 b0	jsr $b087			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b0aa		68		pla				pla 								; restore it
.b0ab						_STAAllocate:
.b0ab		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b0ad		18		clc				clc  								; deliberate allows one more
.b0ae		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b0b1		8d 11 04	sta $0411			sta 	stringTempPointer
.b0b4		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b0b6		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b0b8		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b0bb		69 ff		adc #$ff			adc 	#$FF
.b0bd		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b0c0		85 3d		sta $3d				sta 	zsTemp+1
.b0c2		95 60		sta $60,x			sta 	NSMantissa1,x
.b0c4		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b0c6		74 70		stz $70,x			stz 	NSMantissa3,x
.b0c8		a9 10		lda #$10			lda 	#NSTString
.b0ca		95 50		sta $50,x			sta 	NSStatus,x
.b0cc		a9 00		lda #$00			lda 	#0 							; clear the target string
.b0ce		92 3c		sta ($3c)			sta 	(zsTemp)
.b0d0		60		rts				rts
.b0d1						_STALength:
.b0d1		a9 09		lda #$09		lda	#9
.b0d3		4c 75 8f	jmp $8f75		jmp	ErrorHandler
.b0d6						StringTempWrite:
.b0d6		48		pha				pha
.b0d7		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b0d9		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b0db		d0 02		bne $b0df			bne 	_STWNoCarry
.b0dd		e6 3d		inc $3d				inc 	zsTemp+1
.b0df						_STWNoCarry:
.b0df		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0e1		92 3c		sta ($3c)			sta 	(zsTemp)
.b0e3		68		pla				pla
.b0e4		60		rts				rts

;******  Return to file: _basic.asm

.b0e5						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 6f 06	lda $066f			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 6e 06	stz $066e			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 6e 06	lda $066e			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6d 06	lda $066d			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 d8 bb	jsr $bbd8			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6d 06	lda $066d			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gxOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						gxSpriteOffsetBase:
>0690								.fill 	2
.0692						gxSpriteLow:
>0692								.fill 	64
.06d2						gxSpriteHigh:
>06d2								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 74 06	sta $0674			sta 	gxCurrentY
.c7dc	a7dc	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 72 06	sta $0672			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 86 06	cmp $0686			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 16 07	stz $0716			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 13 07	lda $0713			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 14 07	cmp $0714			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 14 07	lda $0714			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 13 07	lda $0713			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 14 07	ldx $0714			ldx	 	gxYCentre
.c86a	a86a	8d 14 07	sta $0714			sta 	gxYCentre
.c86d	a86d	8e 13 07	stx $0713			stx 	gxxCentre
.c870	a870	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 16 07	sta $0716			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 14 07	lda $0714			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 13 07	lda $0713			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8b1	a8b1	8d 14 07	sta $0714			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c8c8	a8c8	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7b 06	sta $067b,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 13 07	inc $0713			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 13 07	lda $0713			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 13 07	inc $0713			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 14 07	dec $0714			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 13 07	lda $0713			lda 	gxxCentre
.c8f1	a8f1	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 16 07	dec $0716			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 80 06	lda $0680			lda 	gxY1
.c92a	a92a	ed 7c 06	sbc $067c			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 12 07	sta $0712			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 13 07	stz $0713			stz 	gxxCentre
.c93e	a93e	ad 12 07	lda $0712			lda 	gxRadius
.c941	a941	8d 14 07	sta $0714			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c959	a959	7d 7a 06	adc $067a,x			adc 	gxX0,x
.c95c	a95c	9d 7e 06	sta $067e,x			sta 	gxX1,x
.c95f	a95f	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c962	a962	7d 7b 06	adc $067b,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 7f 06	sta $067f,x			sta 	gxX1+1,x
.c969	a969	7e 7e 06	ror $067e,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gxxCentre:
>0713								.fill 	1
.0714						gxYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 86 06	lda $0686			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 84 06	adc $0684			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 82 06	stz $0682			stz 	gxSpritesOn
.c9c6	a9c6	9c 83 06	stz $0683			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 83 06	sta $0683			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 84 06	sta $0684			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 86 06	stx $0686			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 85 06	sta $0685			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 90 06	sta $0690			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 91 06	sta $0691			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d2 06	stz $06d2,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 83 06	lda $0683			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8c 06	ldy $068c			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8a 06	and $068a			and 	gxANDValue
.ca93	aa93	4d 89 06	eor $0689			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 19 07	lda $0719			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7a 06	lda $067a			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 7e 06	eor $067e			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7b 06	lda $067b			lda 	gxX0+1
.cab9	aab9	4d 7f 06	eor $067f			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 80 06	lda $0680			lda 	gxY1
.cac0	aac0	4d 7c 06	eor $067c			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1b 07	lda $071b			lda 	gxPosition
.cac8	aac8	6d 1c 07	adc $071c			adc 	gxAdjust
.cacb	aacb	8d 1b 07	sta $071b			sta 	gxPosition
.cace	aace	9c 1e 07	stz $071e			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1d 07	cmp $071d			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 1e 07	dec $071e			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1d 07	sbc $071d			sbc 	gxTotal
.cadf	aadf	8d 1b 07	sta $071b			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 19 07	lda $0719			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 1e 07	lda $071e			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 1e 07	lda $071e			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1a 07	lda $071a			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7a 06	lda $067a			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7b 06	dec $067b			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7a 06	dec $067a			dec 	gxX0
.cb10	ab10	ce 8c 06	dec $068c			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8c 06	lda $068c			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7a 06	inc $067a			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7b 06	inc $067b			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8c 06	inc $068c			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7c 06	inc $067c			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 80 06	lda $0680			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7c 06	sbc $067c			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 18 07	sta $0718			sta 	gxDiffY
.cb58	ab58	9c 1a 07	stz $071a			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 7e 06	lda $067e			lda 	gxX1
.cb5f	ab5f	ed 7a 06	sbc $067a			sbc 	gxX0
.cb62	ab62	8d 17 07	sta $0717			sta 	gxDiffX
.cb65	ab65	ad 7f 06	lda $067f			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 17 07	ror $0717			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 17 07	sbc $0717			sbc 	gxDiffX
.cb78	ab78	8d 17 07	sta $0717			sta 	gxDiffX
.cb7b	ab7b	ce 1a 07	dec $071a			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 19 07	stz $0719			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 18 07	lda $0718			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1c 07	sta $071c			sta 	gxAdjust
.cb87	ab87	ad 17 07	lda $0717			lda 	gxDiffX
.cb8a	ab8a	8d 1d 07	sta $071d			sta 	gxTotal
.cb8d	ab8d	ad 18 07	lda $0718			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 17 07	cmp $0717			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 19 07	dec $0719			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 17 07	lda $0717			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1c 07	sta $071c			sta 	gxAdjust
.cb9e	ab9e	ad 18 07	lda $0718			lda 	gxDiffY
.cba1	aba1	8d 1d 07	sta $071d			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1d 07	lda $071d			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1b 07	sta $071b			sta 	gxPosition
.cbab	abab	60		rts				rts
.0717						gxDiffX:
>0717								.fill 	1
.0718						gxDiffY:
>0718								.fill 	1
.0719						gxIsDiffYLarger:
>0719								.fill 	1
.071a						gxDXNegative:
>071a								.fill 	1
.071b						gxPosition:
>071b								.fill 	1
.071c						gxAdjust:
>071c								.fill 	1
.071d						gxTotal:
>071d								.fill 	1
.071e						gxAddSelect:
>071e								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 88 06	ldx $0688			ldx 	gxColour
.cbbe	abbe	8e 89 06	stx $0689			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8a 06	stx $068a			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 89 06	stz $0689			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8a 06	lda $068a			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8a 06	sta $068a			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8c 06	ldy $068c			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8a 06	and $068a			and 	gxANDValue
.cbe8	abe8	4d 89 06	eor $0689			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 80 06	cmp $0680			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 80 06	cmp $0680			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 7e 06	lda $067e			lda		gxX1
.cc37	ac37	ed 7a 06	sbc $067a			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 7f 06	lda $067f			lda 	gxX1+1
.cc3f	ac3f	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8c 06	lda $068c			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8a 06	and $068a			and 	gxANDValue
.cc5c	ac5c	4d 89 06	eor $0689			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8a 06	and $068a			and 	gxANDValue
.cc7a	ac7a	4d 89 06	eor $0689			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8a 06	and $068a			and 	gxANDValue
.cc92	ac92	4d 89 06	eor $0689			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8c 06	sta $068c			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.ccb9	acb9	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 21 07	stx $0721			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 23 07	sta $0723			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 20 07	lda $0720			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.ccf2	acf2	cd 86 06	cmp $0686			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 1f 07	cmp $071f			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7c 06	sta $067c			sta 	gxY0
.cd0b	ad0b	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 1f 07	lda $071f			lda 	gxSize
.cd12	ad12	6d 7a 06	adc $067a			adc 	gxX0
.cd15	ad15	8d 7a 06	sta $067a			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7b 06	inc $067b			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 20 07	lda $0720			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8a 06	and $068a			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 1f 07	cmp $071f			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7c 06	inc $067c			inc 	gxY0
.cd73	ad73	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 87 06	eor $0687			eor 	gxMode
.cd79	ad79	8d 24 07	sta $0724			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 88 06	lda $0688			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 87 06	eor $0687			eor 	gxMode
.cdc6	adc6	8d 24 07	sta $0724			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 25 07	lda $0725			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 85 06	lda $0685			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 26 07	ldx $0726			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 28 07	adc $0728			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 29 07	adc $0729			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 25 07	cpy $0725			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 28 07	lda $0728			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 29 07	lda $0729			lda 	gxSpriteOffset+1
.ce87	ae87	6d 90 06	adc $0690			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 91 06	lda $0691			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 26 07	lda $0726			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 27 07	ora $0727			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 26 07	lda $0726			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d2 06	ora $06d2,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 82 06	lda $0682			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7b 06	lda $067b			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7c 06	adc $067c			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7a 06	ror $067a			ror 	gxX0
.cf32	af32	4e 7a 06	lsr $067a			lsr 	gxX0
.cf35	af35	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7c 06	lsr $067c			lsr 	gxY0
.cf3b	af3b	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7a 06	ora $067a			ora 	gxX0
.cf46	af46	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.cf49	af49	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7c 06	ora $067c			ora 	gxY0
.cf51	af51	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7c 06	lda $067c			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7a 06	lda $067a			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8c 06	sta $068c			sta 	gxOffset
.cfa3	afa3	ad 7b 06	lda $067b			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8c 06	lda $068c			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8c 06	sta $068c			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 92 06	ora $0692,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d2 06	adc $06d2,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y
.d023	b023	fd 92 06	sbc $0692,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 85 06	lda $0685			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 29 07	sta $0729			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 26 07	sta $0726			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 25 07	sta $0725			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 27 07	sta $0727			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 28 07	sta $0728			sta 	gxSpriteOffset
.d070	b070	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d073	b073	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d076	b076	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d079	b079	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0725						gxSizePixels:
>0725								.fill 	1
.0726						gxSizeBits:
>0726								.fill 	1
.0727						gxSpriteLUT:
>0727								.fill 	1
.0728						gxSpriteOffset:
>0728								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 7e 06	cmp $067e			cmp 	gxX1
.d08d	b08d	ad 7b 06	lda $067b			lda 	gxX0+1
.d090	b090	ed 7f 06	sbc $067f			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 80 06	cmp $0680			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d0bd	b0bd	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7a 06	sta $067a,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $8f SAVE
>d36f	b36f	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $90 SETDATE
>d377	b377	45
>d378	b378	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $91 SETTIME
>d380	b380	45
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $92 SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $93 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $94 STOP
>d397	b397	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $95 VERIFY
>d39f	b39f	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $96 XGO
>d3a4	b3a4	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $97 XLOAD
>d3ab	b3ab	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $98 ZAP
>d3b0	b3b0	ff					.text	$FF
.d3b1	b3b1					KeywordSet2:
>d3b1	b3b1	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3b3	b3b3	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3b5	b3b5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3b7	b3b7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3bc	b3bc	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3c1	b3c1	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3c6	b3c6	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3cb	b3cb	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3d0	b3d0	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3d5	b3d5	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3da	b3da	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3df	b3df	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3e4	b3e4	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3e9	b3e9	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3ee	b3ee	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3f3	b3f3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3f8	b3f8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3fd	b3fd	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d402	b402	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d407	b407	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d40c	b40c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d411	b411	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d416	b416	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d41b	b41b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d420	b420	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d425	b425	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d42a	b42a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d42f	b42f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d434	b434	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d439	b439	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d43e	b43e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d443	b443	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d448	b448	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d44d	b44d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d452	b452	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d457	b457	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d45c	b45c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d461	b461	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d466	b466	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d46b	b46b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d470	b470	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d475	b475	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d47a	b47a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d47f	b47f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d484	b484	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d489	b489	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d48e	b48e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d493	b493	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d498	b498	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d49d	b49d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4a2	b4a2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4a7	b4a7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4ac	b4ac	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4b1	b4b1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4b6	b4b6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4bb	b4bb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4c0	b4c0	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4c5	b4c5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4ca	b4ca	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4cf	b4cf	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4d4	b4d4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4d9	b4d9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4de	b4de	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4e3	b4e3	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4e8	b4e8	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4ed	b4ed	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4f2	b4f2	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4f7	b4f7	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4fc	b4fc	ff					.text	$FF
.d4fd	b4fd					Export_TKListConvertLine:
.d4fd	b4fd	48		pha				pha 								; save indent on the stack
.d4fe	b4fe	9c 1d 04	stz $041d			stz 	tbOffset
.d501	b501	9c 2d 04	stz $042d			stz 	tokenBuffer
.d504	b504	9c 29 04	stz $0429			stz 	currentListColour
.d507	b507	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d509	b509	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d50c	b50c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d50e	b50e	b1 30		lda ($30),y			lda 	(codePtr),y
.d510	b510	aa		tax				tax
.d511	b511	88		dey				dey
.d512	b512	b1 30		lda ($30),y			lda 	(codePtr),y
.d514	b514	20 f7 b6	jsr $b6f7			jsr 	LCLWriteNumberXA
.d517	b517	68		pla				pla 								; adjustment to indent
.d518	b518	48		pha				pha 								; save on stack
.d519	b519	10 0c		bpl $b527			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d51b	b51b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d51c	b51c	6d 26 04	adc $0426			adc 	listIndent
.d51f	b51f	8d 26 04	sta $0426			sta 	listIndent
.d522	b522	10 03		bpl $b527			bpl 	_LCNoAdjust
.d524	b524	9c 26 04	stz $0426			stz 	listIndent
.d527	b527					_LCNoAdjust:
.d527	b527	18		clc				clc		 							; work out actual indent.
.d528	b528	ad 26 04	lda $0426			lda 	listIndent
.d52b	b52b	0a		asl a				asl 	a
.d52c	b52c	69 07		adc #$07			adc 	#7
.d52e	b52e	85 36		sta $36				sta 	zTemp0
.d530	b530					_LCPadOut:
.d530	b530	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d532	b532	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d535	b535	ad 1d 04	lda $041d			lda 	tbOffset
.d538	b538	c5 36		cmp $36				cmp 	zTemp0
.d53a	b53a	d0 f4		bne $b530			bne 	_LCPadOut
.d53c	b53c	a0 03		ldy #$03			ldy 	#3 							; start position.
.d53e	b53e					_LCMainLoop:
.d53e	b53e	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d540	b540	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d543	b543	b1 30		lda ($30),y			lda 	(codePtr),y
.d545	b545	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d547	b547	f0 17		beq $b560			beq 	_LCExit
.d549	b549	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d54b	b54b	90 1e		bcc $b56b			bcc 	_LCDoubles
.d54d	b54d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d54f	b54f	90 2a		bcc $b57b			bcc 	_LCShiftPunc
.d551	b551	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d553	b553	90 35		bcc $b58a			bcc 	_LCPunctuation
.d555	b555	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d557	b557	90 51		bcc $b5aa			bcc 	_LCIdentifiers
.d559	b559	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d55b	b55b	90 73		bcc $b5d0			bcc 	_LCTokens
.d55d	b55d	4c 30 b6	jmp $b630			jmp 	_LCData 					; 254-5 are data objects
.d560	b560					_LCExit:
.d560	b560	68		pla				pla 								; get old indent adjust
.d561	b561	30 07		bmi $b56a			bmi 	_LCExit2
.d563	b563	18		clc				clc 								; add to indent if +ve
.d564	b564	6d 26 04	adc $0426			adc 	listIndent
.d567	b567	8d 26 04	sta $0426			sta 	listIndent
.d56a	b56a					_LCExit2:
.d56a	b56a	60		rts				rts
.d56b	b56b					_LCDoubles:
.d56b	b56b	48		pha				pha
.d56c	b56c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d56d	b56d	29 02		and #$02			and 	#2
.d56f	b56f	09 3c		ora #$3c			ora 	#60 						; make < >
.d571	b571	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d574	b574	68		pla				pla 								; restore, do lower bit
.d575	b575	29 03		and #$03			and 	#3
.d577	b577	09 3c		ora #$3c			ora 	#60
.d579	b579	80 0f		bra $b58a			bra		_LCPunctuation 				; print, increment, loop
.d57b	b57b					_LCShiftPunc:
.d57b	b57b	aa		tax				tax 								; save in X
.d57c	b57c	29 07		and #$07			and 	#7 							; lower 3 bits
.d57e	b57e	f0 02		beq $b582			beq 	_LCNoAdd
.d580	b580	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d582	b582					_LCNoAdd:
.d582	b582	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d584	b584	90 02		bcc $b588			bcc 	_LCNoAdd2
.d586	b586	09 20		ora #$20			ora 	#32 						; adds $20
.d588	b588					_LCNoAdd2:
.d588	b588	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d58a	b58a					_LCPunctuation:
.d58a	b58a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d58c	b58c	d0 03		bne $b591			bne 	_LCPContinue
.d58e	b58e	20 a5 b6	jsr $b6a5			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d591	b591					_LCPContinue:
.d591	b591	c9 2e		cmp #$2e			cmp 	#'.'
.d593	b593	f0 08		beq $b59d			beq 	_LCPIsConstant
.d595	b595	c9 30		cmp #$30			cmp 	#'0'
.d597	b597	90 0b		bcc $b5a4			bcc 	_LCPNotConstant
.d599	b599	c9 3a		cmp #$3a			cmp 	#'9'+1
.d59b	b59b	b0 07		bcs $b5a4			bcs 	_LCPNotConstant
.d59d	b59d					_LCPIsConstant:
.d59d	b59d	48		pha				pha
.d59e	b59e	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5a0	b5a0	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5a3	b5a3	68		pla				pla
.d5a4	b5a4					_LCPNotConstant:
.d5a4	b5a4	c8		iny				iny 								; consume character
.d5a5	b5a5	20 8f b6	jsr $b68f			jsr 	LCLWrite 					; write it out.
.d5a8	b5a8	80 94		bra $b53e			bra 	_LCMainLoop 				; go round again.
.d5aa	b5aa					_LCIdentifiers:
.d5aa	b5aa	18		clc				clc 								; convert to physical address
.d5ab	b5ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5ad	b5ad	85 37		sta $37				sta 	zTemp0+1
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	85 36		sta $36				sta 	zTemp0
.d5b4	b5b4	c8		iny				iny
.d5b5	b5b5	5a		phy				phy 								; save position
.d5b6	b5b6	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5b8	b5b8	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5bb	b5bb	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5bd	b5bd					_LCOutIdentifier:
.d5bd	b5bd	c8		iny				iny
.d5be	b5be	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5c0	b5c0	29 7f		and #$7f			and 	#$7F
.d5c2	b5c2	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d5c5	b5c5	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d5c8	b5c8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5ca	b5ca	10 f1		bpl $b5bd			bpl 	_LCOutIdentifier
.d5cc	b5cc	7a		ply				ply 								; restore position
.d5cd	b5cd	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d5d0	b5d0					_LCTokens:
.d5d0	b5d0	aa		tax				tax 								; token in X
.d5d1	b5d1	a9 b1		lda #$b1			lda 	#((KeywordSet2) & $FF)
.d5d3	b5d3	85 36		sta $36				sta 	0+zTemp0
.d5d5	b5d5	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5d7	b5d7	85 37		sta $37				sta 	1+zTemp0
.d5d9	b5d9	e0 82		cpx #$82			cpx 	#$82
.d5db	b5db	f0 16		beq $b5f3			beq 	_LCUseShift
.d5dd	b5dd	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5df	b5df	85 36		sta $36				sta 	0+zTemp0
.d5e1	b5e1	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5e3	b5e3	85 37		sta $37				sta 	1+zTemp0
.d5e5	b5e5	e0 81		cpx #$81			cpx 	#$81
.d5e7	b5e7	f0 0a		beq $b5f3			beq 	_LCUseShift
.d5e9	b5e9	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	80 01		bra $b5f4			bra 	_LCNoShift
.d5f3	b5f3					_LCUseShift:
.d5f3	b5f3	c8		iny				iny
.d5f4	b5f4					_LCNoShift:
.d5f4	b5f4	20 b9 b6	jsr $b6b9			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5f7	b5f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5f9	b5f9	aa		tax				tax 								; into X
.d5fa	b5fa					_LCFindText:
.d5fa	b5fa	ca		dex				dex
.d5fb	b5fb	10 0e		bpl $b60b			bpl 	_LCFoundText 				; found text.
.d5fd	b5fd	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5ff	b5ff	1a		inc a				inc 	a 							; one extra for size
.d600	b600	38		sec				sec 								; one extra for checksum
.d601	b601	65 36		adc $36				adc 	zTemp0 						; go to next token
.d603	b603	85 36		sta $36				sta 	zTemp0
.d605	b605	90 f3		bcc $b5fa			bcc 	_LCFindText
.d607	b607	e6 37		inc $37				inc 	zTemp0+1
.d609	b609	80 ef		bra $b5fa			bra 	_LCFindText
.d60b	b60b					_LCFoundText:
.d60b	b60b	5a		phy				phy 								; save List position
.d60c	b60c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d60e	b60e	aa		tax				tax
.d60f	b60f	a9 86		lda #$86			lda 	#CLIToken+$80
.d611	b611	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d614	b614	a0 02		ldy #$02			ldy 	#2
.d616	b616					_LCCopyToken:
.d616	b616	b1 36		lda ($36),y			lda 	(zTemp0),y
.d618	b618	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d61b	b61b	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d61e	b61e	c8		iny				iny
.d61f	b61f	ca		dex				dex
.d620	b620	d0 f4		bne $b616			bne 	_LCCopyToken
.d622	b622	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d624	b624	f0 05		beq $b62b			beq 	_LCNoSpace
.d626	b626	a9 20		lda #$20			lda 	#' '
.d628	b628	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d62b	b62b					_LCNoSpace:
.d62b	b62b	7a		ply				ply 								; restore position.
.d62c	b62c	c8		iny				iny 								; consume token
.d62d	b62d	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop 				; and go around again.
.d630	b630					_LCData:
.d630	b630	48		pha				pha 								; save type $FE/$FF
.d631	b631	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d633	b633	c9 fe		cmp #$fe			cmp 	#$FE
.d635	b635	f0 22		beq $b659			beq 	_LCHaveOpener
.d637	b637	a2 22		ldx #$22			ldx 	#'"'
.d639	b639	a9 8f		lda #$8f			lda 	#CLIData+$80
.d63b	b63b	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d63e	b63e	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d640	b640	d0 17		bne $b659			bne 	_LCHaveOpener
.d642	b642	88		dey				dey 								; what precedes it ?
.d643	b643	b1 30		lda ($30),y			lda 	(codePtr),y
.d645	b645	c8		iny				iny
.d646	b646	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d648	b648	d0 0f		bne $b659			bne 	_LCHaveOpener
.d64a	b64a	a9 09		lda #$09			lda 	#9 							; tab
.d64c	b64c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d64f	b64f	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d651	b651	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d654	b654	a9 85		lda #$85			lda 	#CLIFComment+$80
.d656	b656	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d659	b659					_LCHaveOpener:
.d659	b659	8a		txa				txa 								; output prefix (# or ")
.d65a	b65a	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d65d	b65d	c8		iny				iny 								; get count
.d65e	b65e	b1 30		lda ($30),y			lda 	(codePtr),y
.d660	b660	aa		tax				tax
.d661	b661	c8		iny				iny 								; point at first character
.d662	b662					_LCOutData:
.d662	b662	b1 30		lda ($30),y			lda 	(codePtr),y
.d664	b664	c9 00		cmp #$00			cmp 	#0
.d666	b666	f0 03		beq $b66b			beq 	_LCNoPrint
.d668	b668	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d66b	b66b					_LCNoPrint:
.d66b	b66b	c8		iny				iny
.d66c	b66c	ca		dex				dex
.d66d	b66d	d0 f3		bne $b662			bne 	_LCOutData
.d66f	b66f	68		pla				pla 								; closing " required ?
.d670	b670	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d672	b672	d0 0f		bne $b683			bne 	_LCNoQuote
.d674	b674	a9 22		lda #$22			lda 	#'"'
.d676	b676	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d679	b679	ad 6f 06	lda $066f			lda 	EXTTextColour
.d67c	b67c	29 0f		and #$0f			and 	#$0F
.d67e	b67e	09 90		ora #$90			ora 	#$90
.d680	b680	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d683	b683					_LCNoQuote:
.d683	b683	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d686	b686					LCLWriteColour:
.d686	b686	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d689	b689	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d68c	b68c	d0 01		bne $b68f			bne 	LCLWrite 					; if different, output it
.d68e	b68e	60		rts				rts
.d68f	b68f					LCLWrite:
.d68f	b68f	da		phx				phx
.d690	b690	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d693	b693	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d696	b696	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d699	b699	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d69c	b69c	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d69e	b69e	30 03		bmi $b6a3			bmi 	_LCLNoColour
.d6a0	b6a0	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6a3	b6a3					_LCLNoColour:
.d6a3	b6a3	fa		plx				plx
.d6a4	b6a4	60		rts				rts
.d6a5	b6a5					LCLDeleteLastSpace:
.d6a5	b6a5	48		pha				pha
.d6a6	b6a6	da		phx				phx
.d6a7	b6a7	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6aa	b6aa	f0 0a		beq $b6b6			beq 	_LCDLSExit
.d6ac	b6ac	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6af	b6af	c9 20		cmp #$20			cmp 	#' '
.d6b1	b6b1	d0 03		bne $b6b6			bne 	_LCDLSExit
.d6b3	b6b3	ce 1d 04	dec $041d			dec 	tbOffset
.d6b6	b6b6					_LCDLSExit:
.d6b6	b6b6	fa		plx				plx
.d6b7	b6b7	68		pla				pla
.d6b8	b6b8	60		rts				rts
.d6b9	b6b9					LCLCheckSpaceRequired:
.d6b9	b6b9	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6bc	b6bc	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6be	b6be	f0 1b		beq $b6db			beq 	_LCCSRSpace
.d6c0	b6c0	c9 29		cmp #$29			cmp 	#')'
.d6c2	b6c2	f0 17		beq $b6db			beq 	_LCCSRSpace
.d6c4	b6c4	c9 23		cmp #$23			cmp 	#'#'
.d6c6	b6c6	f0 13		beq $b6db			beq 	_LCCSRSpace
.d6c8	b6c8	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase 				; saves a little effort
.d6cb	b6cb	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6cd	b6cd	90 11		bcc $b6e0			bcc 	_LCCSRExit
.d6cf	b6cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6d1	b6d1	90 08		bcc $b6db			bcc 	_LCCSRSpace
.d6d3	b6d3	c9 61		cmp #$61			cmp 	#"a"
.d6d5	b6d5	90 09		bcc $b6e0			bcc 	_LCCSRExit
.d6d7	b6d7	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6d9	b6d9	b0 05		bcs $b6e0			bcs 	_LCCSRExit
.d6db	b6db					_LCCSRSpace:
.d6db	b6db	a9 20		lda #$20			lda 	#' '
.d6dd	b6dd	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d6e0	b6e0					_LCCSRExit:
.d6e0	b6e0	60		rts				rts
.d6e1	b6e1					LCLLowerCase:
.d6e1	b6e1	c9 41		cmp #$41			cmp 	#"A"
.d6e3	b6e3	90 06		bcc $b6eb			bcc 	_LCLLCOut
.d6e5	b6e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6e7	b6e7	b0 02		bcs $b6eb			bcs 	_LCLLCOut
.d6e9	b6e9	69 20		adc #$20			adc 	#$20
.d6eb	b6eb					_LCLLCOut:
.d6eb	b6eb	60		rts				rts
.d6ec	b6ec					LCLUpperCase:
.d6ec	b6ec	c9 61		cmp #$61			cmp 	#"a"
.d6ee	b6ee	90 06		bcc $b6f6			bcc 	_LCLUCOut
.d6f0	b6f0	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6f2	b6f2	b0 02		bcs $b6f6			bcs 	_LCLUCOut
.d6f4	b6f4	e9 1f		sbc #$1f			sbc 	#$1F
.d6f6	b6f6					_LCLUCOut:
.d6f6	b6f6	60		rts				rts
.d6f7	b6f7					LCLWriteNumberXA:
.d6f7	b6f7	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6f9	b6f9					_LCLWNLoop1:
.d6f9	b6f9	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6fb	b6fb					_LCLWNLoop2:
.d6fb	b6fb	48		pha				pha 								; save initial LSB
.d6fc	b6fc	38		sec				sec
.d6fd	b6fd	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6ff	b6ff	f9 30 b7	sbc $b730,y			sbc 	_LCLWNTable,y
.d702	b702	48		pha				pha
.d703	b703	8a		txa				txa
.d704	b704	f9 31 b7	sbc $b731,y			sbc 	_LCLWNTable+1,y
.d707	b707	90 07		bcc $b710			bcc 	_LCLWNUnderflow
.d709	b709	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d70b	b70b	aa		tax				tax 								; update X
.d70c	b70c	68		pla				pla 								; restore A
.d70d	b70d	7a		ply				ply 								; throw original
.d70e	b70e	80 eb		bra $b6fb			bra 	_LCLWNLoop2 				; try again.
.d710	b710					_LCLWNUnderflow:
.d710	b710	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d712	b712	d0 06		bne $b71a			bne 	_LCLWNOut
.d714	b714	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d717	b717	3a		dec a				dec 	a
.d718	b718	f0 04		beq $b71e			beq 	_LCLWNNext
.d71a	b71a					_LCLWNOut:
.d71a	b71a	98		tya				tya
.d71b	b71b	20 2a b7	jsr $b72a			jsr 	_LCLWNOutDigit
.d71e	b71e					_LCLWNNext:
.d71e	b71e	7a		ply				ply 							 	; restore original value.
.d71f	b71f	68		pla				pla
.d720	b720	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d722	b722	c8		iny				iny
.d723	b723	c8		iny				iny
.d724	b724	84 37		sty $37				sty 	zTemp0+1
.d726	b726	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d728	b728	d0 cf		bne $b6f9			bne 	_LCLWNLoop1
.d72a	b72a					_LCLWNOutDigit:
.d72a	b72a	09 30		ora #$30			ora 	#'0'
.d72c	b72c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d72f	b72f	60		rts				rts
.d730	b730					_LCLWNTable:
>d730	b730	10 27						.word 	10000
>d732	b732	e8 03						.word 	1000
>d734	b734	64 00						.word 	100
>d736	b736	0a 00						.word 	10
.d738	b738					TOKSearchTable:
.d738	b738	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d73a	b73a	85 36		sta $36				sta 	zTemp0
.d73c	b73c	a0 00		ldy #$00			ldy 	#0
.d73e	b73e	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d740	b740	85 38		sta $38				sta 	zTemp1
.d742	b742					_TSTLoop:
.d742	b742	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d744	b744	30 49		bmi $b78f			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d746	b746	f0 2e		beq $b776			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d748	b748	c8		iny				iny 								; get the hash
.d749	b749	b1 36		lda ($36),y			lda 	(zTemp0),y
.d74b	b74b	88		dey				dey
.d74c	b74c	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d74f	b74f	d0 25		bne $b776			bne 	_TSTNext
.d751	b751	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d754	b754	38		sec				sec
.d755	b755	ed 00 04	sbc $0400			sbc 	identStart
.d758	b758	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d75a	b75a	d0 1a		bne $b776			bne 	_TSTNext
.d75c	b75c	5a		phy				phy 								; save Y , we might fail to match.
.d75d	b75d	c8		iny				iny 								; point to text
.d75e	b75e	c8		iny				iny
.d75f	b75f	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d762	b762					_TSTCompareName:
.d762	b762	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d765	b765	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d767	b767	d0 0c		bne $b775			bne 	_TSTNextPullY 				; fail, pullY and do next
.d769	b769	e8		inx				inx
.d76a	b76a	c8		iny				iny
.d76b	b76b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d76e	b76e	d0 f2		bne $b762			bne 	_TSTCompareName
.d770	b770	7a		ply				ply 								; throw Y
.d771	b771	a5 38		lda $38				lda 	zTemp1 						; get token #
.d773	b773	38		sec				sec 								; return with CS = passed.
.d774	b774	60		rts				rts
.d775	b775					_TSTNextPullY:
.d775	b775	7a		ply				ply 								; restore current, fall through.
.d776	b776					_TSTNext:
.d776	b776	e6 38		inc $38				inc 	zTemp1 						; token counter
.d778	b778	98		tya				tya
.d779	b779	18		clc				clc
.d77a	b77a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d77c	b77c	1a		inc a				inc 	a 							; +1
.d77d	b77d	1a		inc a				inc 	a 							; +2
.d77e	b77e	a8		tay				tay
.d77f	b77f	10 c1		bpl $b742			bpl 	_TSTLoop 					; if Y < $80 loop back
.d781	b781	98		tya				tya 								; add Y to zTemp0 and reset Y
.d782	b782	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d784	b784	18		clc				clc  								; but have tables > 255 bytes
.d785	b785	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d787	b787	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d789	b789	90 b7		bcc $b742			bcc 	_TSTLoop
.d78b	b78b	e6 37		inc $37				inc 	zTemp0+1
.d78d	b78d	80 b3		bra $b742			bra 	_TSTLoop
.d78f	b78f					_TSTFail:
.d78f	b78f	18		clc				clc
.d790	b790	60		rts				rts
.d791	b791					Export_TKTokeniseLine:
.d791	b791	20 5d b9	jsr $b95d			jsr 	LCLFixLineBufferCase 		; fix line case
.d794	b794	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d796	b796	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d799	b799	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d79c	b79c	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d79f	b79f	a2 ff		ldx #$ff			ldx 	#$FF
.d7a1	b7a1					_TKFindFirst:
.d7a1	b7a1	e8		inx				inx
.d7a2	b7a2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7a5	b7a5	f0 62		beq $b809			beq 	_TKExit
.d7a7	b7a7	c9 20		cmp #$20			cmp 	#' '
.d7a9	b7a9	90 f6		bcc $b7a1			bcc 	_TKFindFirst
.d7ab	b7ab	c9 30		cmp #$30			cmp 	#'0'
.d7ad	b7ad	90 07		bcc $b7b6			bcc 	_TKNoLineNumber
.d7af	b7af	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7b1	b7b1	b0 03		bcs $b7b6			bcs 	_TKNoLineNumber
.d7b3	b7b3	20 87 b9	jsr $b987			jsr 	TOKExtractLineNumber
.d7b6	b7b6					_TKNoLineNumber:
.d7b6	b7b6					_TKTokeniseLoop:
.d7b6	b7b6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7b9	b7b9	f0 4e		beq $b809			beq 	_TKExit
.d7bb	b7bb	e8		inx				inx
.d7bc	b7bc	c9 20		cmp #$20			cmp 	#' '
.d7be	b7be	f0 f6		beq $b7b6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7c0	b7c0	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7c1	b7c1	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7c3	b7c3	f0 68		beq $b82d			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7c5	b7c5	c9 41		cmp #$41			cmp 	#'A'
.d7c7	b7c7	90 04		bcc $b7cd			bcc 	_TKTokenisePunctuation
.d7c9	b7c9	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7cb	b7cb	90 60		bcc $b82d			bcc 	_TKTokeniseIdentifier
.d7cd	b7cd					_TKTokenisePunctuation:
.d7cd	b7cd	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7cf	b7cf	f0 2e		beq $b7ff			beq 	_TKString
.d7d1	b7d1	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7d3	b7d3	f0 2f		beq $b804			beq 	_TKHexConstant
.d7d5	b7d5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7d7	b7d7	f0 36		beq $b80f			beq 	_TKCheckDouble
.d7d9	b7d9	c9 3e		cmp #$3e			cmp 	#'>'
.d7db	b7db	f0 32		beq $b80f			beq 	_TKCheckDouble
.d7dd	b7dd					_TKStandardPunctuation:
.d7dd	b7dd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7e0	b7e0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7e2	b7e2	90 0e		bcc $b7f2			bcc 	_TKNoShift
.d7e4	b7e4	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7e5	b7e5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7e7	b7e7	85 36		sta $36				sta 	zTemp0
.d7e9	b7e9	68		pla				pla
.d7ea	b7ea	29 20		and #$20			and 	#32 						; bit 5
.d7ec	b7ec	4a		lsr a				lsr 	a 							; shift into bit 3
.d7ed	b7ed	4a		lsr a				lsr 	a
.d7ee	b7ee	05 36		ora $36				ora 	zTemp0
.d7f0	b7f0	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7f2	b7f2					_TKNoShift:
.d7f2	b7f2	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte 				; write the punctuation character
.d7f5	b7f5	e8		inx				inx 								; consume the character
.d7f6	b7f6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7f8	b7f8	d0 bc		bne $b7b6			bne 	_TKTokeniseLoop 			; and loop round again.
.d7fa	b7fa	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment 			; comment checl
.d7fd	b7fd	80 b7		bra $b7b6			bra 	_TKTokeniseLoop
.d7ff	b7ff					_TKString:
.d7ff	b7ff	20 ec b8	jsr $b8ec			jsr 	TOKTokenString
.d802	b802	80 b2		bra $b7b6			bra 	_TKTokeniseLoop
.d804	b804					_TKHexConstant:
.d804	b804	20 27 b9	jsr $b927			jsr 	TOKHexConstant
.d807	b807	80 ad		bra $b7b6			bra 	_TKTokeniseLoop
.d809	b809	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d80b	b80b	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d80e	b80e	60		rts				rts
.d80f	b80f					_TKCheckDouble:
.d80f	b80f	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d812	b812	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d814	b814	90 c7		bcc $b7dd			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d816	b816	c9 3f		cmp #$3f			cmp 	#'>'+1
.d818	b818	b0 c3		bcs $b7dd			bcs 	_TKStandardPunctuation
.d81a	b81a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d81d	b81d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d81f	b81f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d820	b820	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d823	b823	38		sec				sec
.d824	b824	e9 3c		sbc #$3c			sbc 	#'<'
.d826	b826	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte 				; this is in the range 0-7
.d829	b829	e8		inx				inx 								; consume both
.d82a	b82a	e8		inx				inx
.d82b	b82b	80 89		bra $b7b6			bra 	_TKTokeniseLoop
.d82d	b82d					_TKTokeniseIdentifier:
.d82d	b82d	8e 00 04	stx $0400			stx 	identStart 					; save start
.d830	b830	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d833	b833					_TKCheckLoop:
.d833	b833	e8		inx				inx 								; look at next, we know first is identifier already.
.d834	b834	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d837	b837	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d839	b839	f0 f8		beq $b833			beq 	_TKCheckLoop
.d83b	b83b	c9 30		cmp #$30			cmp	 	#"0"
.d83d	b83d	90 0c		bcc $b84b			bcc 	_TKEndIdentifier
.d83f	b83f	c9 3a		cmp #$3a			cmp 	#"9"+1
.d841	b841	90 f0		bcc $b833			bcc 	_TKCheckLoop
.d843	b843	c9 41		cmp #$41			cmp	 	#"A"
.d845	b845	90 04		bcc $b84b			bcc 	_TKEndIdentifier
.d847	b847	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d849	b849	90 e8		bcc $b833			bcc 	_TKCheckLoop
.d84b	b84b					_TKEndIdentifier:
.d84b	b84b	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d84e	b84e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d850	b850	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d852	b852	f0 06		beq $b85a			beq 	_TKHasTypeCharacter
.d854	b854	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d856	b856	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d858	b858	d0 07		bne $b861			bne 	_TKNoTypeCharacter
.d85a	b85a					_TKHasTypeCharacter:
.d85a	b85a	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d85d	b85d	e8		inx				inx 								; consume the type character
.d85e	b85e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d861	b861					_TKNoTypeCharacter:
.d861	b861	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d863	b863	d0 09		bne $b86e			bne 	_TKNoArray
.d865	b865	e8		inx				inx 								; skip the (
.d866	b866	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d869	b869	09 04		ora #$04			ora 	#$04
.d86b	b86b	8d 04 04	sta $0404			sta 	identTypeByte
.d86e	b86e					_TKNoArray:
.d86e	b86e	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d871	b871	20 48 b9	jsr $b948			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d874	b874	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d876	b876	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d878	b878	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d87b	b87b	a2 00		ldx #$00			ldx 	#0
.d87d	b87d	b0 1f		bcs $b89e			bcs 	_TKFoundToken
.d87f	b87f	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d881	b881	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d883	b883	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d886	b886	a2 81		ldx #$81			ldx 	#$81
.d888	b888	b0 14		bcs $b89e			bcs 	_TKFoundToken
.d88a	b88a	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d88c	b88c	a9 b1		lda #$b1			lda 	#(KeywordSet2) & $FF
.d88e	b88e	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d891	b891	a2 82		ldx #$82			ldx 	#$82
.d893	b893	b0 09		bcs $b89e			bcs 	_TKFoundToken
.d895	b895	20 d8 b9	jsr $b9d8			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d898	b898	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d89b	b89b	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d89e	b89e					_TKFoundToken:
.d89e	b89e	48		pha				pha 								; save token
.d89f	b89f	8a		txa				txa 								; shift in X, is there one ?
.d8a0	b8a0	f0 03		beq $b8a5			beq 	_TKNoTShift
.d8a2	b8a2	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte 				; if so, write it out
.d8a5	b8a5					_TKNoTShift:
.d8a5	b8a5	68		pla				pla 								; restore and write token
.d8a6	b8a6	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d8a9	b8a9	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8ab	b8ab	d0 0d		bne $b8ba			bne 	_TKNotRem 			 		; not shifted ?
.d8ad	b8ad	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8af	b8af	d0 09		bne $b8ba			bne 	_TKNotRem
.d8b1	b8b1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8b4	b8b4	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment
.d8b7	b8b7	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop
.d8ba	b8ba					_TKNotRem:
.d8ba	b8ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8bd	b8bd	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c0	b8c0					TOKCheckComment:
.d8c0	b8c0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	c9 20		cmp #$20			cmp 	#' '
.d8c6	b8c6	f0 f8		beq $b8c0			beq 	TOKCheckComment
.d8c8	b8c8	ca		dex				dex 								; first non space character
.d8c9	b8c9	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8cb	b8cb	f0 1e		beq $b8eb			beq 	_TOKCCExit 					; then we are okay
.d8cd	b8cd	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8cf	b8cf	f0 1a		beq $b8eb			beq 	_TOKCCExit 					; then we are okay
.d8d1	b8d1	da		phx				phx
.d8d2	b8d2					_TOKCCLowerCase:
.d8d2	b8d2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8d5	b8d5	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8d7	b8d7	90 09		bcc $b8e2			bcc 	_TOKKCNotUC
.d8d9	b8d9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8db	b8db	b0 05		bcs $b8e2			bcs 	_TOKKCNotUC
.d8dd	b8dd	49 20		eor #$20			eor 	#$20
.d8df	b8df	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8e2	b8e2					_TOKKCNotUC:
.d8e2	b8e2	e8		inx				inx
.d8e3	b8e3	c9 00		cmp #$00			cmp 	#0
.d8e5	b8e5	d0 eb		bne $b8d2			bne 	_TOKCCLowerCase
.d8e7	b8e7	fa		plx				plx
.d8e8	b8e8	20 ec b8	jsr $b8ec			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8eb	b8eb					_TOKCCExit:
.d8eb	b8eb	60		rts				rts
.d8ec	b8ec					TOKTokenString:
.d8ec	b8ec	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8ee	b8ee	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d8f1	b8f1	e8		inx				inx									; start of quoted string.
.d8f2	b8f2	da		phx				phx 								; push start of string on top
.d8f3	b8f3	ca		dex				dex 								; because we pre-increment
.d8f4	b8f4					_TSFindEnd:
.d8f4	b8f4	e8		inx				inx
.d8f5	b8f5	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8f8	b8f8	f0 04		beq $b8fe			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8fa	b8fa	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8fc	b8fc	d0 f6		bne $b8f4			bne 	_TSFindEnd
.d8fe	b8fe					_TSEndOfString:
.d8fe	b8fe	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8ff	b8ff	48		pha				pha 								; save terminating character
.d900	b900	20 08 b9	jsr $b908			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d903	b903	68		pla				pla 								; terminating character
.d904	b904	f0 01		beq $b907			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d906	b906	e8		inx				inx
.d907	b907					_TSNotQuote:
.d907	b907	60		rts				rts
.d908	b908					TOKWriteBlockXY:
.d908	b908	86 36		stx $36				stx 	zTemp0 						; save end character
.d90a	b90a	98		tya				tya 								; use 2's complement to work out the byte size
.d90b	b90b	49 ff		eor #$ff			eor 	#$FF
.d90d	b90d	38		sec				sec
.d90e	b90e	65 36		adc $36				adc 	zTemp0
.d910	b910	1a		inc a				inc 	a 							; one extra for NULL
.d911	b911	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d914	b914					_TOBlockLoop:
.d914	b914	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d916	b916	f0 09		beq $b921			beq 	_TOBlockExit
.d918	b918	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d91b	b91b	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d91e	b91e	c8		iny				iny
.d91f	b91f	80 f3		bra $b914			bra 	_TOBlockLoop
.d921	b921					_TOBlockExit:
.d921	b921	a9 00		lda #$00			lda 	#0 							; add NULL.
.d923	b923	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d926	b926	60		rts				rts
.d927	b927					TOKHexConstant:
.d927	b927	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d929	b929	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.d92c	b92c	e8		inx				inx									; start of quoted string.
.d92d	b92d	da		phx				phx 								; push start of constant on top
.d92e	b92e	ca		dex				dex
.d92f	b92f					_THFindLoop:
.d92f	b92f	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d930	b930	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d933	b933	c9 30		cmp #$30			cmp 	#"0"
.d935	b935	90 0c		bcc $b943			bcc 	_THFoundEnd
.d937	b937	c9 3a		cmp #$3a			cmp 	#"9"+1
.d939	b939	90 f4		bcc $b92f			bcc 	_THFindLoop
.d93b	b93b	c9 41		cmp #$41			cmp 	#"A"
.d93d	b93d	90 04		bcc $b943			bcc 	_THFoundEnd
.d93f	b93f	c9 47		cmp #$47			cmp 	#"F"+1
.d941	b941	90 ec		bcc $b92f			bcc 	_THFindLoop
.d943	b943					_THFoundEnd:
.d943	b943	7a		ply				ply 								; restore start
.d944	b944	20 08 b9	jsr $b908			jsr 	TOKWriteBlockXY 			; output the block
.d947	b947	60		rts				rts
.d948	b948					TOKCalculateHash:
.d948	b948	da		phx				phx
.d949	b949	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d94c	b94c	a9 00		lda #$00			lda 	#0
.d94e	b94e					_TCHLoop:
.d94e	b94e	18		clc				clc
.d94f	b94f	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d952	b952	e8		inx				inx
.d953	b953	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d956	b956	d0 f6		bne $b94e			bne 	_TCHLoop
.d958	b958	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d95b	b95b	fa		plx				plx
.d95c	b95c	60		rts				rts
.d95d	b95d					LCLFixLineBufferCase:
.d95d	b95d	a2 00		ldx #$00			ldx 	#0
.d95f	b95f					_FLBCLoop:
.d95f	b95f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d962	b962	f0 22		beq $b986			beq 	_FLBCExit 					; end of string.
.d964	b964	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d966	b966	f0 11		beq $b979			beq 	_FLBCInQuotes
.d968	b968	e8		inx				inx
.d969	b969	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d96b	b96b	90 f2		bcc $b95f			bcc 	_FLBCLoop
.d96d	b96d	c9 7b		cmp #$7b			cmp 	#'z'+1
.d96f	b96f	b0 ee		bcs $b95f			bcs 	_FLBCLoop
.d971	b971	38		sec				sec 								; make U/C
.d972	b972	e9 20		sbc #$20			sbc 	#32
.d974	b974	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d977	b977	80 e6		bra $b95f			bra 	_FLBCLoop
.d979	b979					_FLBCInQuotes:
.d979	b979	e8		inx				inx 								; advance
.d97a	b97a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d97d	b97d	f0 07		beq $b986			beq 	_FLBCExit 					; exit on EOS
.d97f	b97f	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d981	b981	d0 f6		bne $b979			bne 	_FLBCInQuotes
.d983	b983	e8		inx				inx 								; skip over it
.d984	b984	80 d9		bra $b95f			bra 	_FLBCLoop
.d986	b986					_FLBCExit:
.d986	b986	60		rts				rts
.d987	b987					TOKExtractLineNumber:
.d987	b987	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d98a	b98a	48		pha				pha
.d98b	b98b	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d98e	b98e	48		pha				pha
.d98f	b98f	20 c5 b9	jsr $b9c5			jsr 	_LCLNTimes2 				; line # x 2
.d992	b992	20 c5 b9	jsr $b9c5			jsr 	_LCLNTimes2 				; line # x 4
.d995	b995	18		clc				clc 								; add stacked value
.d996	b996	68		pla				pla
.d997	b997	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d99a	b99a	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d99d	b99d	68		pla				pla
.d99e	b99e	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9a1	b9a1	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9a4	b9a4	20 c5 b9	jsr $b9c5			jsr 	_LCLNTimes2 				; line # x 10
.d9a7	b9a7	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9aa	b9aa	e8		inx				inx
.d9ab	b9ab	29 0f		and #$0f			and 	#15 						; add to line #
.d9ad	b9ad	18		clc				clc
.d9ae	b9ae	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9b1	b9b1	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9b4	b9b4	90 03		bcc $b9b9			bcc 	_TLENNoCarry
.d9b6	b9b6	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9b9	b9b9					_TLENNoCarry:
.d9b9	b9b9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9bc	b9bc	c9 30		cmp #$30			cmp 	#'0'
.d9be	b9be	90 04		bcc $b9c4			bcc 	_TLENExit
.d9c0	b9c0	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9c2	b9c2	90 c3		bcc $b987			bcc 	TOKExtractLineNumber
.d9c4	b9c4					_TLENExit:
.d9c4	b9c4	60		rts				rts
.d9c5	b9c5					_LCLNTimes2:
.d9c5	b9c5	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9c8	b9c8	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9cb	b9cb	60		rts				rts
.d9cc	b9cc					TOKWriteByte:
.d9cc	b9cc	da		phx				phx
.d9cd	b9cd	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9d0	b9d0	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9d3	b9d3	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9d6	b9d6	fa		plx				plx
.d9d7	b9d7	60		rts				rts
.d9d8	b9d8					TOKCheckCreateVariableRecord:
.d9d8	b9d8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9da	b9da	85 36		sta $36				sta 	0+zTemp0
.d9dc	b9dc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9de	b9de	85 37		sta $37				sta 	1+zTemp0
.d9e0	b9e0					_CCVSearch:
.d9e0	b9e0	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9e2	b9e2	f0 2c		beq $ba10			beq 	_CCVFail
.d9e4	b9e4	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9e6	b9e6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9e8	b9e8	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9eb	b9eb	d0 16		bne $ba03			bne 	_CCVNext
.d9ed	b9ed	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9ef	b9ef	ae 00 04	ldx $0400			ldx 	identStart
.d9f2	b9f2					_CCVCompare:
.d9f2	b9f2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9f5	b9f5	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9f7	b9f7	e8		inx				inx 								; advance pointers
.d9f8	b9f8	c8		iny				iny
.d9f9	b9f9	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9fa	b9fa	d0 07		bne $ba03			bne 	_CCVNext  					; didn't match go to next.
.d9fc	b9fc	90 f4		bcc $b9f2			bcc 	_CCVCompare 				; not finished yet.
.d9fe	b9fe	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da01	ba01	f0 41		beq $ba44			beq 	_CCVFound 					; yes, we were successful
.da03	ba03					_CCVNext:
.da03	ba03	18		clc				clc 								; go to next record.
.da04	ba04	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da06	ba06	65 36		adc $36				adc 	zTemp0
.da08	ba08	85 36		sta $36				sta 	zTemp0
.da0a	ba0a	90 d4		bcc $b9e0			bcc 	_CCVSearch
.da0c	ba0c	e6 37		inc $37				inc 	zTemp0+1
.da0e	ba0e	80 d0		bra $b9e0			bra 	_CCVSearch
.da10	ba10					_CCVFail:
.da10	ba10	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da12	ba12	ad 03 04	lda $0403			lda 	identHash
.da15	ba15	91 36		sta ($36),y			sta 	(zTemp0),y
.da17	ba17	c8		iny				iny 								; offset 2 is the type byte
.da18	ba18	ad 04 04	lda $0404			lda 	identTypeByte
.da1b	ba1b	91 36		sta ($36),y			sta 	(zTemp0),y
.da1d	ba1d	c8		iny				iny
.da1e	ba1e					_CCVData:
.da1e	ba1e	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da20	ba20	91 36		sta ($36),y			sta 	(zTemp0),y
.da22	ba22	c8		iny				iny
.da23	ba23	c0 08		cpy #$08			cpy 	#8
.da25	ba25	90 f7		bcc $ba1e			bcc 	_CCVData
.da27	ba27	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da2a	ba2a					_CCVCopyName:
.da2a	ba2a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da2d	ba2d	91 36		sta ($36),y			sta 	(zTemp0),y
.da2f	ba2f	e8		inx				inx
.da30	ba30	c8		iny				iny
.da31	ba31	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da34	ba34	d0 f4		bne $ba2a			bne 	_CCVCopyName
.da36	ba36	98		tya				tya 								; patch offset
.da37	ba37	92 36		sta ($36)			sta 	(zTemp0)
.da39	ba39	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da3b	ba3b	91 36		sta ($36),y			sta 	(zTemp0),y
.da3d	ba3d	88		dey				dey
.da3e	ba3e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da40	ba40	09 80		ora #$80			ora 	#$80
.da42	ba42	91 36		sta ($36),y			sta 	(zTemp0),y
.da44	ba44					_CCVFound:
.da44	ba44	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da46	ba46	38		sec				sec
.da47	ba47	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da49	ba49	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da4b	ba4b	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.da4e	ba4e	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da50	ba50	20 cc b9	jsr $b9cc			jsr 	TOKWriteByte
.da53	ba53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da54	ba54					SNDCheckChannel:
.da54	ba54	aa		tax				tax
.da55	ba55	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da58	ba58	d0 38		bne $ba92			bne 	_SNDCCExit
.da5a	ba5a	da		phx				phx 								; save current channel
.da5b	ba5b	8a		txa				txa 								; put in A
.da5c	ba5c	20 d8 ba	jsr $bad8			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da5f	ba5f	68		pla				pla 								; channel # in A
.da60	ba60	90 30		bcc $ba92			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da62	ba62	a8		tay				tay 								; Y is the channel #
.da63	ba63	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da66	ba66	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da69	ba69	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da6c	ba6c	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da6f	ba6f	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da72	ba72	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da75	ba75	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da78	ba78	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da7b	ba7b	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da7e	ba7e	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da81	ba81	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da84	ba84	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da87	ba87	5a		phy				phy 								; save channel #
.da88	ba88	20 f2 ba	jsr $baf2			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da8b	ba8b	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da8e	ba8e	68		pla				pla
.da8f	ba8f	20 93 ba	jsr $ba93			jsr 	SNDUpdateNote 				; update channel A
.da92	ba92					_SNDCCExit:
.da92	ba92	60		rts				rts
.da93	ba93					SNDUpdateNote:
.da93	ba93	aa		tax				tax 								; so we can access records
.da94	ba94	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da95	ba95	0a		asl a				asl 	a
.da96	ba96	0a		asl a				asl 	a
.da97	ba97	0a		asl a				asl 	a
.da98	ba98	0a		asl a				asl 	a
.da99	ba99	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da9c	ba9c	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da9f	ba9f	f0 2e		beq $bacf			beq 	_SNDUNIsSilent
.daa1	baa1	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.daa4	baa4	48		pha				pha
.daa5	baa5	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.daa8	baa8	29 0f		and #$0f			and 	#$0F
.daaa	baaa	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.daad	baad	09 80		ora #$80			ora 	#$80 						; write to pitch register
.daaf	baaf	20 3c bb	jsr $bb3c			jsr 	SNDWritePorts
.dab2	bab2	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dab5	bab5	8d 2a 07	sta $072a			sta 	SNDChannelBits
.dab8	bab8	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dabb	babb	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dabe	babe	6a		ror a				ror 	a
.dabf	babf	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.dac2	bac2	6a		ror a				ror 	a
.dac3	bac3	4a		lsr a				lsr 	a 							; put in bits 0-5
.dac4	bac4	4a		lsr a				lsr 	a
.dac5	bac5	20 3c bb	jsr $bb3c			jsr 	SNDWritePorts 				; write as rest of pitch register
.dac8	bac8	68		pla				pla
.dac9	bac9	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dacb	bacb	20 3c bb	jsr $bb3c			jsr 	SNDWritePorts
.dace	bace	60		rts				rts
.dacf	bacf					_SNDUNIsSilent:
.dacf	bacf	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.dad2	bad2	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dad4	bad4	20 3c bb	jsr $bb3c			jsr 	SNDWritePorts 				; write to the ports
.dad7	bad7	60		rts				rts
.dad8	bad8					SNDFindNextNoteForA:
.dad8	bad8	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.dadb	badb	f0 13		beq $baf0			beq 	_SNDFNNFail 				; queue empty.
.dadd	badd	a2 00		ldx #$00			ldx 	#0
.dadf	badf					_SNDFNNSearch:
.dadf	badf	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.dae2	bae2	38		sec				sec
.dae3	bae3	f0 0c		beq $baf1			beq 	_SNDFNNExit 				; if so exit with CS.
.dae5	bae5	e8		inx				inx 								; next queue slot.
.dae6	bae6	e8		inx				inx
.dae7	bae7	e8		inx				inx
.dae8	bae8	e8		inx				inx
.dae9	bae9	e8		inx				inx
.daea	baea	e8		inx				inx
.daeb	baeb	e8		inx				inx
.daec	baec	e8		inx				inx
.daed	baed	88		dey				dey 								; done the whole queue
.daee	baee	d0 ef		bne $badf			bne 	_SNDFNNSearch 				; no, go back.
.daf0	baf0					_SNDFNNFail:
.daf0	baf0	18		clc				clc
.daf1	baf1					_SNDFNNExit:
.daf1	baf1	60		rts				rts
.daf2	baf2					SNDDeleteXFromQueue:
.daf2	baf2	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.daf4	baf4	f0 09		beq $baff			beq 	_SNDDXExit
.daf6	baf6	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.daf9	baf9	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dafc	bafc	e8		inx				inx
.dafd	bafd	80 f3		bra $baf2			bra 	SNDDeleteXFromQueue
.daff	baff					_SNDDXExit:
.daff	baff	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.db00	bb00					SNDQueueRequest:
.db00	bb00	86 36		stx $36				stx 	zTemp0						; save queue address
.db02	bb02	84 37		sty $37				sty 	zTemp0+1
.db04	bb04	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.db07	bb07	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db09	bb09	f0 21		beq $bb2c			beq 	_SNDQRExit
.db0b	bb0b	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db0d	bb0d	48		pha				pha
.db0e	bb0e	8a		txa				txa  								; get offset in queue buffer/
.db0f	bb0f	0a		asl a				asl 	a
.db10	bb10	0a		asl a				asl 	a
.db11	bb11	0a		asl a				asl 	a
.db12	bb12	aa		tax				tax
.db13	bb13	68		pla				pla 								; get back and push again
.db14	bb14	48		pha				pha
.db15	bb15	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.db18	bb18	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db1a	bb1a					_SNDQCopy:
.db1a	bb1a	b1 36		lda ($36),y			lda 	(zTemp0),y
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	c8		iny				iny
.db1e	bb1e	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.db21	bb21	c0 06		cpy #$06			cpy 	#6
.db23	bb23	d0 f5		bne $bb1a			bne 	_SNDQCopy
.db25	bb25	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.db28	bb28	68		pla				pla 								; get channel # back
.db29	bb29	20 54 ba	jsr $ba54			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db2c	bb2c					_SNDQRExit:
.db2c	bb2c	60		rts				rts
.db2d	bb2d					SNDSilenceChannel:
.db2d	bb2d	aa		tax				tax 								; zero time left.
.db2e	bb2e	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.db31	bb31	0a		asl a				asl 	a 							; shift into position
.db32	bb32	0a		asl a				asl 	a
.db33	bb33	0a		asl a				asl 	a
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db38	bb38	20 3c bb	jsr $bb3c			jsr 	SNDWritePorts
.db3b	bb3b	60		rts				rts
.db3c	bb3c					SNDWritePorts:
.db3c	bb3c	da		phx				phx 								; save X
.db3d	bb3d	a6 01		ldx $01				ldx 	1 							; save I/O status
.db3f	bb3f	64 01		stz $01				stz 	1 							; access I/O page 0
.db41	bb41	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db44	bb44	8d 10 d6	sta $d610			sta 	$D610
.db47	bb47	86 01		stx $01				stx 	1 							; restore I/O
.db49	bb49	fa		plx				plx 								; restore X
.db4a	bb4a	60		rts				rts
.db4b	bb4b					Export_SNDCommand:
.db4b	bb4b	da		phx				phx 								; save XY
.db4c	bb4c	5a		phy				phy
.db4d	bb4d	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db4f	bb4f	f0 1d		beq $bb6e			beq 	_SNDInitialise
.db51	bb51	90 28		bcc $bb7b			bcc 	_SNDExit
.db53	bb53	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db55	bb55	f0 17		beq $bb6e			beq 	_SNDSilence
.db57	bb57	b0 22		bcs $bb7b			bcs 	_SNDExit
.db59	bb59	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db5b	bb5b	b0 09		bcs $bb66			bcs 	_SNDQueryPlay
.db5d	bb5d	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db5f	bb5f	b0 1a		bcs $bb7b			bcs 	_SNDExit
.db61	bb61	20 00 bb	jsr $bb00			jsr 	SNDQueueRequest
.db64	bb64	80 15		bra $bb7b			bra 	_SNDExit
.db66	bb66					_SNDQueryPlay:
.db66	bb66	29 03		and #$03			and 	#3 							; get channel #
.db68	bb68	aa		tax				tax
.db69	bb69	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db6c	bb6c	80 0d		bra $bb7b			bra 	_SNDExit
.db6e	bb6e					_SNDInitialise:
.db6e	bb6e					_SNDSilence:
.db6e	bb6e	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db71	bb71	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db73	bb73					_SNDSilenceLoop:
.db73	bb73	48		pha				pha
.db74	bb74	20 2d bb	jsr $bb2d			jsr 	SNDSilenceChannel
.db77	bb77	68		pla				pla
.db78	bb78	3a		dec a				dec 	a
.db79	bb79	10 f8		bpl $bb73			bpl 	_SNDSilenceLoop
.db7b	bb7b					_SNDExit:
.db7b	bb7b	7a		ply				ply
.db7c	bb7c	fa		plx				plx
.db7d	bb7d	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db7e	bb7e					Export_SNDUpdate:
.db7e	bb7e					PagedSNDUpdate:
.db7e	bb7e	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db81	bb81	f0 05		beq $bb88			beq 	_SNDUNot0 					; not playing
.db83	bb83	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db85	bb85	20 a7 bb	jsr $bba7			jsr 	SNDUpdateChannel 			; update it.
.db88	bb88					_SNDUNot0:
.db88	bb88	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db8b	bb8b	f0 05		beq $bb92			beq 	_SNDUNot1
.db8d	bb8d	a2 01		ldx #$01			ldx 	#1
.db8f	bb8f	20 a7 bb	jsr $bba7			jsr 	SNDUpdateChannel
.db92	bb92					_SNDUNot1:
.db92	bb92	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db95	bb95	f0 05		beq $bb9c			beq 	_SNDUNot2
.db97	bb97	a2 02		ldx #$02			ldx 	#2
.db99	bb99	20 a7 bb	jsr $bba7			jsr 	SNDUpdateChannel
.db9c	bb9c					_SNDUNot2:
.db9c	bb9c	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db9f	bb9f	f0 05		beq $bba6			beq 	_SNDUNot3
.dba1	bba1	a2 03		ldx #$03			ldx 	#3
.dba3	bba3	20 a7 bb	jsr $bba7			jsr 	SNDUpdateChannel
.dba6	bba6					_SNDUNot3:
.dba6	bba6	60		rts				rts
.dba7	bba7					SNDUpdateChannel:
.dba7	bba7	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dba9	bba9	f0 2c		beq $bbd7			beq 	_SNDUCExit
.dbab	bbab	3a		dec a				dec 	a 							; decrement and update timer
.dbac	bbac	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.dbaf	bbaf	f0 1d		beq $bbce			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbb1	bbb1	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbb4	bbb4	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.dbb7	bbb7	f0 1e		beq $bbd7			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbb9	bbb9	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbba	bbba	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dbbd	bbbd	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.dbc0	bbc0	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.dbc3	bbc3	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.dbc6	bbc6	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.dbc9	bbc9	29 03		and #$03			and 	#3
.dbcb	bbcb	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.dbce	bbce					_SNDUCUpdate:
.dbce	bbce	8a		txa				txa 								; which channel.
.dbcf	bbcf	48		pha				pha
.dbd0	bbd0	20 93 ba	jsr $ba93			jsr 	SNDUpdateNote 				; update the current note
.dbd3	bbd3	68		pla				pla
.dbd4	bbd4	20 54 ba	jsr $ba54			jsr 	SNDCheckChannel 			; more to do ?
.dbd7	bbd7					_SNDUCExit:
.dbd7	bbd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbd8	bbd8					Export_KNLInputSingleCharacter:
.dbd8	bbd8					PagedInputSingleCharacter:
.dbd8	bbd8	da		phx				phx
.dbd9	bbd9	5a		phy				phy
.dbda	bbda					_EISCWait:
.dbda	bbda	a5 01		lda $01				lda 	1 							; save I/O 0
.dbdc	bbdc	48		pha				pha
.dbdd	bbdd	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbdf	bbdf	38		sec				sec 								; calculate timer - LastTick
.dbe0	bbe0	ad 59 d6	lda $d659			lda 	$D659
.dbe3	bbe3	aa		tax				tax 								; saving timer in X
.dbe4	bbe4	ed 5c 06	sbc $065c			sbc 	LastTick
.dbe7	bbe7	c9 03		cmp #$03			cmp 	#3
.dbe9	bbe9	90 06		bcc $bbf1			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbeb	bbeb	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.dbee	bbee	20 7e bb	jsr $bb7e			jsr 	PagedSNDUpdate 							; go do the code.
.dbf1	bbf1					_NoFireTick:
.dbf1	bbf1	68		pla				pla 								; restore I/O 0
.dbf2	bbf2	85 01		sta $01				sta 	1
.dbf4	bbf4	20 fe bb	jsr $bbfe			jsr 	CheckKeyPressed
.dbf7	bbf7	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbf9	bbf9	f0 df		beq $bbda			beq 	_EISCWait
.dbfb	bbfb	7a		ply				ply
.dbfc	bbfc	fa		plx				plx
.dbfd	bbfd	60		rts				rts
.dbfe	bbfe					Export_KNLInkey:
.dbfe	bbfe					CheckKeyPressed:
.dbfe	bbfe	a9 44		lda #$44			lda     #<event 					; tell kernel where events go.
.dc00	bc00	85 f0		sta $f0				sta     kernel.args.events+0
.dc02	bc02	a9 08		lda #$08			lda     #>event
.dc04	bc04	85 f1		sta $f1				sta     kernel.args.events+1
.dc06	bc06	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc09	bc09	b0 0b		bcs $bc16			bcs 	_CKPNoEvent 				; no event
.dc0b	bc0b	ad 44 08	lda $0844			lda     event.type
.dc0e	bc0e	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc10	bc10	d0 04		bne $bc16			bne 	_CKPNoEvent
.dc12	bc12	ad 49 08	lda $0849			lda     event.key.ascii
.dc15	bc15	60		rts				rts
.dc16	bc16					_CKPNoEvent:
.dc16	bc16	a9 00		lda #$00			lda 	#0
.dc18	bc18	60		rts				rts
.dc19	bc19					Export_EXTBreakCheck:
.dc19	bc19	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc1c	bc1c					Export_EXTReadController:
.dc1c	bc1c	da		phx				phx
.dc1d	bc1d	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc1f	bc1f	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc21	bc21	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc24	bc24	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc26	bc26	fa		plx				plx
.dc27	bc27	60		rts				rts
.0844						event
>0844						type        .byte   ?   ; Enum above
>0845						buf         .byte   ?   ; page id or zero
>0846						ext         .byte   ?   ; page id or zero
.0847						key
>0847						keyboard    .byte   ?   ; Keyboard ID
>0848						raw         .byte   ?   ; Raw key ID
>0849						ascii       .byte   ?   ; ASCII value
>084a						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0847						mouse
.0847						delta
>0847						x           .byte   ?
>0848						y           .byte   ?
>0849						z           .byte   ?
>084a						buttons     .byte   ?
.0847						clicks
>0847						inner       .byte   ?
>0848						middle      .byte   ?
>0849						outer       .byte   ?
.0847						udp
>0847						token       .byte   ?   ; TODO: break out into fields
.0847						file
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						data
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						read        .byte   ?   ; Number of bytes actually read
.0849						wrote
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						wrote       .byte   ?   ; Number of bytes actually read
.0847						directory
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						volume
>0849						len         .byte   ?   ; Length of volname (in buf)
>084a						flags       .byte   ?   ; block size, text encoding
.0849						file
>0849						len         .byte   ?
>084a						flags       .byte   ?   ; block scale, text encoding, approx size
.0849						free
>0849						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc28	bc28					Export_KNLOpenFileRead:
.dc28	bc28	48		pha				pha
.dc29	bc29	a9 00		lda #$00	        lda     #kernel.args.file.open.READ ; set READ mode.
.dc2b	bc2b	85 f5		sta $f5		        sta     kernel.args.file.open.mode
.dc2d	bc2d	68		pla		        pla
.dc2e	bc2e	20 4a bc	jsr $bc4a			jsr 	KNLSetupFileName
.dc31	bc31	a9 44		lda #$44	        lda     #event & $FF 				; tell kernel where to store event data
.dc33	bc33	85 f0		sta $f0		        sta     kernel.args.events+0
.dc35	bc35	a9 08		lda #$08	        lda     #event >> 8
.dc37	bc37	85 f1		sta $f1		        sta     kernel.args.events+1
.dc39	bc39	a9 00		lda #$00			lda 	#0 							; currently drive zero only.
.dc3b	bc3b	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc3d	bc3d	20 5c ff	jsr $ff5c	        jsr     kernel.File.Open 			; open the file and exit.
.dc40	bc40	60		rts		        rts
.dc41	bc41					Export_KNLCloseFile:
.dc41	bc41	ad 47 08	lda $0847			lda     event.file.stream 			; close the stream
.dc44	bc44	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc46	bc46	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc49	bc49	60		rts				rts
.dc4a	bc4a					KNLSetupFileName:
.dc4a	bc4a	5a		phy				phy 								; save Y on stack
.dc4b	bc4b	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc4d	bc4d	86 37		stx $37				stx 	zTemp0+1
.dc4f	bc4f	85 fb		sta $fb		        sta     kernel.args.file.open.fname+0
.dc51	bc51	86 fc		stx $fc		        stx     kernel.args.file.open.fname+1
.dc53	bc53	a0 ff		ldy #$ff	        ldy 	#$FF 						; get the filename length => Kernel slot
.dc55	bc55					_KNLGetLength:
.dc55	bc55	c8		iny				iny
.dc56	bc56	b1 36		lda ($36),y			lda 	(zTemp0),y
.dc58	bc58	d0 fb		bne $bc55			bne 	_KNLGetLength
.dc5a	bc5a	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dc5c	bc5c	7a		ply				ply
.dc5d	bc5d	60		rts				rts
.dc5e	bc5e					Export_KNLReadByte:
.dc5e	bc5e					EventLoop:
.dc5e	bc5e	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc61	bc61	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc64	bc64	b0 f8		bcs $bc5e			bcs     EventLoop
.dc66	bc66	ad 44 08	lda $0844			lda 	event.type 					; get event
.dc69	bc69	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc6b	bc6b	f0 33		beq $bca0			beq 	_KNLRBFail
.dc6d	bc6d	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dc6f	bc6f	f0 2f		beq $bca0			beq     _KNLRBFail
.dc71	bc71	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc73	bc73	f0 2b		beq $bca0			beq 	_KNLRBFail
.dc75	bc75	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dc77	bc77	f0 27		beq $bca0			beq 	_KNLRBFail
.dc79	bc79	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED 	; opened, do first read
.dc7b	bc7b	f0 06		beq $bc83			beq     _KNLRBRequestData
.dc7d	bc7d	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dc7f	bc7f	f0 07		beq $bc88			beq     _KNLRBAcquireData
.dc81	bc81	80 db		bra $bc5e			bra 	EventLoop
.dc83	bc83					_KNLRBRequestData:
.dc83	bc83	20 a2 bc	jsr $bca2			jsr 	KNLRequestNextByte
.dc86	bc86	80 d6		bra $bc5e			bra 	EventLoop
.dc88	bc88					_KNLRBAcquireData:
.dc88	bc88	a9 01		lda #$01			lda 	#1 							; want a single character
.dc8a	bc8a	85 fd		sta $fd		        sta     kernel.args.recv.buflen
.dc8c	bc8c	a9 36		lda #$36	        lda     #zTemp0 & $FF 				; read it to zTemp0
.dc8e	bc8e	85 fb		sta $fb		        sta     kernel.args.recv.buf+0
.dc90	bc90	a9 00		lda #$00	        lda     #zTemp0 >> 8
.dc92	bc92	85 fc		sta $fc		        sta     kernel.args.recv.buf+1
.dc94	bc94	20 04 ff	jsr $ff04	        jsr     kernel.ReadData				; read the data into the buffer.
.dc97	bc97	a5 36		lda $36		        lda 	zTemp0						; get it
.dc99	bc99	48		pha		        pha 								; save it
.dc9a	bc9a	20 a2 bc	jsr $bca2	        jsr 	KNLRequestNextByte 			; request next byte.
.dc9d	bc9d	68		pla		        pla
.dc9e	bc9e	18		clc		        clc 								; return CC
.dc9f	bc9f	60		rts		        rts
.dca0	bca0					_KNLRBFail:
.dca0	bca0	38		sec				sec
.dca1	bca1	60		rts				rts
.dca2	bca2					KNLRequestNextByte:
.dca2	bca2	ad 47 08	lda $0847	        lda     event.file.stream 			; read which stream ?
.dca5	bca5	85 f3		sta $f3		        sta     kernel.args.file.read.stream
.dca7	bca7	a9 01		lda #$01	        lda     #1 							; so one byte at a time.
.dca9	bca9	85 f4		sta $f4		        sta     kernel.args.file.read.buflen
.dcab	bcab	20 60 ff	jsr $ff60	        jsr     kernel.File.Read 			; read request
.dcae	bcae	60		rts		        rts

;******  Return to file: _basic.asm


;******  End of listing
