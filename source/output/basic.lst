
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D TILEMAP_ADDRESS=\$24000" "-D TILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Feb 25 14:16:09 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 TILEMAP_ADDRESS=$24000
=$26000						 TILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DRIVE                            = $8b; $8b DRIVE
=$8c						KWD1_END                              = $8c; $8c END
=$8d						KWD1_EXPLODE                          = $8d; $8d EXPLODE
=$8e						KWD1_GO                               = $8e; $8e GO
=$8f						KWD1_GOSUB                            = $8f; $8f GOSUB
=$90						KWD1_GOTO                             = $90; $90 GOTO
=$91						KWD1_HIMEM                            = $91; $91 HIMEM
=$92						KWD1_INPUT                            = $92; $92 INPUT
=$93						KWD1_LIST                             = $93; $93 LIST
=$94						KWD1_LOAD                             = $94; $94 LOAD
=$95						KWD1_MDELTA                           = $95; $95 MDELTA
=$96						KWD1_MOUSE                            = $96; $96 MOUSE
=$97						KWD1_NEW                              = $97; $97 NEW
=$98						KWD1_PING                             = $98; $98 PING
=$99						KWD1_PRINT                            = $99; $99 PRINT
=$9a						KWD1_RESTORE                          = $9a; $9a RESTORE
=$9b						KWD1_RETURN                           = $9b; $9b RETURN
=$9c						KWD1_RUN                              = $9c; $9c RUN
=$9d						KWD1_SAVE                             = $9d; $9d SAVE
=$9e						KWD1_SETDATE                          = $9e; $9e SETDATE
=$9f						KWD1_SETTIME                          = $9f; $9f SETTIME
=$a0						KWD1_SHOOT                            = $a0; $a0 SHOOT
=$a1						KWD1_SPRITES                          = $a1; $a1 SPRITES
=$a2						KWD1_STOP                             = $a2; $a2 STOP
=$a3						KWD1_TILE                             = $a3; $a3 TILE
=$a4						KWD1_TILES                            = $a4; $a4 TILES
=$a5						KWD1_TRY                              = $a5; $a5 TRY
=$a6						KWD1_VERIFY                           = $a6; $a6 VERIFY
=$a7						KWD1_XGO                              = $a7; $a7 XGO
=$a8						KWD1_XLOAD                            = $a8; $a8 XLOAD
=$a9						KWD1_ZAP                              = $a9; $a9 ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 0b b9	jsr $b90b		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 3e b9	jsr $b93e		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 bc b2	jsr $b2bc		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 50 b5	jsr $b550		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 c0 83	jsr $83c0			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 95 85	jsr $8595			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 95 85	jsr $8595			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 95 85	jsr $8595			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 95 85	jsr $8595			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a9 0d		lda #$0d			lda 	#13 						; display Kernel information
.8109		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810c		a9 09		lda #$09			lda 	#9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a9 08		lda #$08			lda 	#$08
.8116		a2 e0		ldx #$e0			ldx 	#$E0
.8118		20 08 94	jsr $9408			jsr 	PrintStringXA
.811b		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.811d		a9 2e		lda #$2e			lda 	#Prompt & $FF
.811f		20 08 94	jsr $9408			jsr 	PrintStringXA
.8122		20 77 82	jsr $8277			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8125		20 f5 8d	jsr $8df5			jsr 	NewProgram 					; erase current program
.8128		4c 01 88	jmp $8801			jmp 	WarmStart					; make same size.
.812b		4c 01 88	jmp $8801			jmp 	WarmStart
>812e		0d				Prompt:	.text 	13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>812f		09 09 32 35 2f 30 32 2f			.text 9,9,"25/02/23 39"
>8137		32 33 20 33 39

;******  Return to file: ./common/aa.system/00start.asm

>813c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8140						ProcessEvents:
.8140		20 ff 83	jsr $83ff			jsr 	KNLSetEventPointer
.8143		20 80 82	jsr $8280			jsr     GetNextEvent 				; get next event
.8146		b0 36		bcs $817e			bcs 	_PEExitZ 					; nothing left to process.
.8148		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814b		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814d		d0 f1		bne $8140			bne 	ProcessEvents
.814f		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8152		30 0b		bmi $815f			bmi 	_PEIsRaw
.8154		d0 ea		bne $8140			bne 	ProcessEvents
.8156		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8159		c9 03		cmp #$03			cmp 	#3
.815b		f0 1e		beq $817b			beq 	_PEReturnBreak  			; no, keep going.
.815d		80 0b		bra $816a			bra 	_PEQueueA
.815f						_PEIsRaw:
.815f		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.8162		c9 81		cmp #$81			cmp 	#129
.8164		90 da		bcc $8140			bcc		ProcessEvents
.8166		c9 8d		cmp #$8d			cmp 	#140+1
.8168		b0 d6		bcs $8140			bcs 	ProcessEvents
.816a						_PEQueueA:
.816a		da		phx				phx
.816b		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.816e		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8170		f0 06		beq $8178			beq 	_PENoQueue
.8172		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8175		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8178						_PENoQueue:
.8178		fa		plx				plx
.8179		80 c5		bra $8140			bra 	ProcessEvents
.817b						_PEReturnBreak:
.817b		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.817d		60		rts				rts
.817e						_PEExitZ:
.817e		a9 00		lda #$00			lda 	#0
.8180		60		rts				rts
.8181						PopKeyboardQueue:
.8181		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8184		f0 17		beq $819d			beq 	_PKQExit 					; zero, then exit.
.8186		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8189		48		pha				pha
.818a		da		phx				phx 								; drop head of queue
.818b		a2 00		ldx #$00			ldx 	#0
.818d						_PKQLoop:
.818d		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8190		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8193		e8		inx				inx
.8194		e0 07		cpx #$07			cpx 	#7
.8196		d0 f5		bne $818d			bne 	_PKQLoop
.8198		fa		plx				plx
.8199		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.819c		68		pla				pla 								; restore head of queue.
.819d						_PKQExit:
.819d		60		rts				rts
.819e						KNLGetKeyPressed:
.819e		a5 01		lda $01				lda 	1 							; save I/O 0
.81a0		48		pha				pha
.81a1		64 01		stz $01				stz 	1 							; access I/O Page 0
.81a3		38		sec				sec 								; calculate timer - LastTick
.81a4		ad 59 d6	lda $d659			lda 	$D659
.81a7		cd 5e 06	cmp $065e			cmp 	LastTick
.81aa		f0 06		beq $81b2			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.81ac		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.81af		20 6f 82	jsr $826f			jsr 	TickHandler 							; go do the code.
.81b2						_NoFireTick:
.81b2		68		pla				pla 								; restore I/O 0
.81b3		85 01		sta $01				sta 	1
.81b5		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.81b8		d0 c7		bne $8181			bne 	PopKeyboardQueue 			; if so, pop and return it
.81ba		20 40 81	jsr $8140			jsr 	ProcessEvents 				; process any outstanding events
.81bd		a9 00		lda #$00			lda 	#0
.81bf		60		rts				rts
.81c0						KNLGetSingleCharacter:
.81c0		20 9e 81	jsr $819e			jsr 	KNLGetKeyPressed
.81c3		c9 00		cmp #$00			cmp 	#0
.81c5		f0 f9		beq $81c0			beq 	KNLGetSingleCharacter
.81c7		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81c8						EXTInputLine:
.81c8		48		pha				pha
.81c9		da		phx				phx
.81ca		5a		phy				phy
.81cb		a5 01		lda $01				lda 	1 							; save I/O page
.81cd		48		pha				pha
.81ce						_EILLoop:
.81ce		20 c0 81	jsr $81c0			jsr 	KNLGetSingleCharacter 		; get one single character
.81d1		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81d3		f0 44		beq $8219			beq 	_EILExit
.81d5		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81d7		f0 2a		beq $8203			beq 	_EILDelete
.81d9		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81db		f0 1c		beq $81f9			beq 	_EILBackspace
.81dd		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81df		90 12		bcc $81f3			bcc 	_EILPrintLoop
.81e1		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81e3		b0 0e		bcs $81f3			bcs 	_EILPrintLoop
.81e5		48		pha				pha 								; save character
.81e6		a9 02		lda #$02			lda 	#2  						; insert a space
.81e8		85 01		sta $01				sta 	1
.81ea		20 5d 82	jsr $825d			jsr 	EXTILInsert 				; insert in text screen
.81ed		e6 01		inc $01				inc 	1
.81ef		20 5d 82	jsr $825d			jsr 	EXTILInsert 				; insert in colour screen
.81f2		68		pla				pla 								; get character back.
.81f3						_EILPrintLoop:
.81f3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81f6		80 d6		bra $81ce			bra 	_EILLoop
.81f8		60		rts				rts
.81f9						_EILBackspace:
.81f9		ad c8 07	lda $07c8			lda 	EXTColumn					; can we backspace ?
.81fc		f0 d0		beq $81ce			beq 	_EILLoop
.81fe		a9 02		lda #$02			lda 	#2 							; move cursor left
.8200		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8203						_EILDelete
.8203		a9 02		lda #$02			lda 	#2 							; text block
.8205		85 01		sta $01				sta 	1
.8207		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.8209		20 48 82	jsr $8248			jsr 	EXTILDelete
.820c		e6 01		inc $01				inc 	1 							; colour block
.820e		ac c8 07	ldy $07c8			ldy 	EXTColumn 					; get attribute of last character
.8211		88		dey				dey
.8212		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8214		20 48 82	jsr $8248			jsr 	EXTILDelete 				; backspace attribute
.8217		80 b5		bra $81ce			bra 	_EILLoop 					; and go round.
.8219						_EILExit:
.8219		a9 02		lda #$02			lda 	#2 							; switch to page 2
.821b		85 01		sta $01				sta 	1
.821d		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.821f						_EILScrapeLine:
.821f		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8221		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8224		c8		iny				iny
.8225		cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.8228		d0 f5		bne $821f			bne 	_EILScrapeLine
.822a						_EILTrimSpaces:
.822a		88		dey				dey
.822b		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.822d		f0 07		beq $8236			beq 	_EILEndTrim		 			; zero the input line.
.822f		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.8232		c9 20		cmp #$20			cmp 	#' '
.8234		f0 f4		beq $822a			beq 	_EILTrimSpaces 				; if fail this found non space character
.8236						_EILEndTrim:
.8236		c8		iny				iny 								; trim after non space character.
.8237		a9 00		lda #$00			lda 	#0 							; trim here.
.8239		99 26 05	sta $0526,y			sta 	lineBuffer,y
.823c		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.823e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8241		68		pla				pla 								; reset I/O page
.8242		85 01		sta $01				sta 	1
.8244		7a		ply				ply
.8245		fa		plx				plx
.8246		68		pla				pla
.8247		60		rts				rts
.8248						EXTILDelete:
.8248		48		pha				pha 								; save the new character
.8249		ac c8 07	ldy $07c8			ldy 	EXTColumn 					; start copying from here.
.824c						_EXTDLoop:
.824c		c8		iny				iny 								; copy one byte down.
.824d		b1 40		lda ($40),y			lda 	(EXTAddress),y
.824f		88		dey				dey
.8250		91 40		sta ($40),y			sta 	(EXTAddress),y
.8252		c8		iny				iny 								; do till end of line.
.8253		cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.8256		90 f4		bcc $824c			bcc 	_EXTDLoop
.8258		88		dey				dey 	 							; write in last slot.
.8259		68		pla				pla
.825a		91 40		sta ($40),y			sta 	(EXTAddress),y
.825c		60		rts				rts
.825d						EXTILInsert:
.825d		ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; end position
.8260						_EXTILoop:
.8260		88		dey				dey 								; back one
.8261		cc c8 07	cpy $07c8			cpy 	EXTColumn 					; exit if reached insert point.
.8264		f0 08		beq $826e			beq 	_EXTIExit
.8266		88		dey				dey 								; copy one byte up.
.8267		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8269		c8		iny				iny
.826a		91 40		sta ($40),y			sta 	(EXTAddress),y
.826c		80 f2		bra $8260			bra 	_EXTILoop
.826e						_EXTIExit:
.826e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.826f						TickHandler:
.826f		da		phx				phx
.8270		5a		phy				phy 								; need to preserve Y
.8271		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8274		7a		ply				ply
.8275		fa		plx				plx
.8276		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8277						ResetIOTracking:
.8277		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8279						_RIOLoop:
.8279		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.827c		ca		dex				dex
.827d		10 fa		bpl $8279			bpl 	_RIOLoop
.827f		60		rts				rts
.8280						GetNextEvent:
.8280		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8283		08		php				php									; save yes/no flag.
.8284		b0 29		bcs $82af			bcs 	_GNEExit
.8286		48		pha				pha 								; save registers
.8287		da		phx				phx
.8288		5a		phy				phy
.8289		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.828c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.828e		f0 04		beq $8294			beq 	_GNEKeyEvent
.8290		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.8292		d0 08		bne $829c			bne 	_GNECheckMouseEvent
.8294						_GNEKeyEvent:
.8294		20 6e 83	jsr $836e			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8297		20 8b 83	jsr $838b			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.829a		80 10		bra $82ac			bra 	_GNEEventExit
.829c						_GNECheckMouseEvent:
.829c		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.829e		d0 05		bne $82a5			bne 	_GNENotDelta
.82a0		20 b1 82	jsr $82b1			jsr 	ProcessMouseDeltaEvent 		; process them.
.82a3		80 07		bra $82ac			bra 	_GNEEventExit
.82a5						_GNENotDelta:
.82a5		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.82a7		d0 03		bne $82ac			bne 	_GNEEventExit
.82a9		20 e0 82	jsr $82e0			jsr 	ProcessMouseClickEvent 		; process them.
.82ac						_GNEEventExit:
.82ac		7a		ply				ply 								; restore registers
.82ad		fa		plx				plx
.82ae		68		pla				pla
.82af						_GNEExit:
.82af		28		plp				plp
.82b0		60		rts				rts
.82b1						ProcessMouseDeltaEvent:
.82b1		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82b3		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.82b6		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82b9		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82bc		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.82bf		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82c2		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82c5		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82c8		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82cb		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82ce		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82d1		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82d3		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82d6		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82d9		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82dc		20 16 83	jsr $8316			jsr 	PMKClipMouseCoord
.82df		60		rts				rts
.82e0						ProcessMouseClickEvent:
.82e0		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82e2		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82e5		20 4e 83	jsr $834e			jsr 	PMKAdd
.82e8		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82eb		20 4e 83	jsr $834e			jsr 	PMKAdd
.82ee		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82f1		20 4e 83	jsr $834e			jsr 	PMKAdd
.82f4		60		rts				rts
.82f5						PMKOutputButton:
.82f5		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82f8		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82fb		6a		ror a				ror 	a 							; shift LSB into carry
.82fc		90 06		bcc $8304			bcc 	_PMKOBExit
.82fe		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.8301		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.8304						_PMKOBExit:
.8304		e8		inx				inx  								; next button
.8305		e8		inx				inx
.8306		60		rts				rts
.8307						PMKAdjustTotal:
.8307		48		pha				pha 								; save offset A index X
.8308		da		phx				phx
.8309		48		pha				pha 								; point X to the position
.830a		8a		txa				txa
.830b		18		clc				clc
.830c		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.830e		aa		tax				tax
.830f		68		pla				pla
.8310		20 4a 83	jsr $834a			jsr 	PMKAddSubtract 				; reuse the addition code.
.8313		fa		plx				plx 								; restore XA
.8314		68		pla				pla
.8315		60		rts				rts
.8316						PMKClipMouseCoord:
.8316		a2 00		ldx #$00			ldx 	#0
.8318						_PCMCLoop:
.8318		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.831b		10 06		bpl $8323			bpl 	_PCMCNotNeg
.831d		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.8320		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8323						_PCMCNotNeg:
.8323		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8326		dd 44 83	cmp $8344,x			cmp 	_PCMCExtent,x
.8329		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.832c		fd 45 83	sbc $8345,x			sbc 	_PCMCExtent+1,x
.832f		90 0c		bcc $833d			bcc 	_PCMCNotOver 				; in range ?
.8331		bd 44 83	lda $8344,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8334		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8337		bd 45 83	lda $8345,x			lda 	_PCMCExtent+1,x
.833a		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.833d						_PCMCNotOver:
.833d		e8		inx				inx
.833e		e8		inx				inx
.833f		e0 06		cpx #$06			cpx 	#3*2
.8341		d0 d5		bne $8318			bne 	_PCMCLoop
.8343		60		rts				rts
.8344						_PCMCExtent:
>8344		3f 01 ef 00 ff 00				.word 	319,239,255
.834a						PMKAddSubtract:
.834a		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.834c		30 0e		bmi $835c			bmi 	PMKSubtract
.834e						PMKAdd:
.834e		18		clc				clc
.834f		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8352		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8355		90 14		bcc $836b			bcc 	PMKExit
.8357		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.835a		80 0f		bra $836b			bra 	PMKExit
.835c						PMKSubtract:
.835c		18		clc				clc
.835d		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8360		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8363		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8366		69 ff		adc #$ff			adc 	#$FF
.8368		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.836b						PMKExit:
.836b		e8		inx				inx 								; next slot ?
.836c		e8		inx				inx
.836d		60		rts				rts
.836e						ProcessKeyboardEvent:
.836e		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.8371		20 ac 83	jsr $83ac			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8374		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8377		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8379		f0 07		beq $8382			beq 	_PKERelease
.837b		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.837e		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8381		60		rts				rts
.8382						_PKERelease:
.8382		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8384		3d 60 06	and $0660,x			and 	KeyStatus,x
.8387		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.838a		60		rts				rts
.838b						UpdateKeyboardJoystick:
.838b		9c 81 06	stz $0681			stz 	KeyJoystick
.838e		a2 00		ldx #$00			ldx 	#0
.8390						_UKJLoop:
.8390		bd a7 83	lda $83a7,x			lda 	_UKJKeys,x 					; which key
.8393		29 1f		and #$1f			and 	#$1F
.8395		a8		tay				tay
.8396		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8399		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.839b		18		clc				clc  								; set C if bit set
.839c		69 ff		adc #$ff			adc 	#$FF
.839e		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.83a1		e8		inx				inx
.83a2		e0 05		cpx #$05			cpx 	#5 							; do all 5
.83a4		d0 ea		bne $8390			bne 	_UKJLoop
.83a6		60		rts				rts
.83a7						_UKJKeys:
>83a7		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.83ac						KeyboardConvertXA:
.83ac		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.83ae		8e 80 06	stx $0680			stx 	KeyMaskTemp
.83b1						_KCCALoop:
.83b1		18		clc				clc
.83b2		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83b4		b0 05		bcs $83bb			bcs 	_KCCADone
.83b6		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.83b9		80 f6		bra $83b1			bra 	_KCCALoop
.83bb						_KCCADone:
.83bb		aa		tax				tax 								; table entry in X
.83bc		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.83bf		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83c0						KNLSetDrive:
.83c0		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83c3		60		rts				rts
.83c4						KNLOpenFileWrite:
.83c4		48		pha				pha
.83c5		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83c7		80 03		bra $83cc			bra 	KNLOpenStart
.83c9						KNLOpenFileRead:
.83c9		48		pha				pha
.83ca		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83cc						KNLOpenStart:
.83cc		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83ce		68		pla				pla
.83cf		20 0a 84	jsr $840a			jsr 	KNLSetupFileName
.83d2		20 ff 83	jsr $83ff			jsr 	KNLSetEventPointer
.83d5		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83d8		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83da		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83dd		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83df		b0 1d		bcs $83fe			bcs     _out
.83e1						_loop
.83e1		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83e4		20 80 82	jsr $8280			jsr     GetNextEvent
.83e7		b0 f8		bcs $83e1			bcs     _loop
.83e9		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83ec		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83ee		f0 0a		beq $83fa			beq 	_success
.83f0		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83f2		f0 0a		beq $83fe			beq 	_out
.83f4		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83f6		f0 06		beq $83fe			beq 	_out
.83f8		80 e7		bra $83e1			bra     _loop
.83fa						_success
.83fa		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83fd		18		clc				clc
.83fe						_out
.83fe		60		rts				rts
.83ff						KNLSetEventPointer:
.83ff		48		pha				pha
.8400		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8402		85 f0		sta $f0				sta     kernel.args.events+0
.8404		a9 07		lda #$07			lda     #KNLEvent >> 8
.8406		85 f1		sta $f1				sta     kernel.args.events+1
.8408		68		pla				pla
.8409		60		rts				rts
.840a						KNLSetupFileName:
.840a		5a		phy				phy 								; save Y on stack
.840b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.840d		86 37		stx $37				stx 	zTemp0+1
.840f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8411		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8413		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8415						_KNLGetLength:
.8415		c8		iny				iny
.8416		b1 36		lda ($36),y			lda 	(zTemp0),y
.8418		d0 fb		bne $8415			bne 	_KNLGetLength
.841a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.841c		7a		ply				ply
.841d		60		rts				rts
.841e						KNLReadBlock:
.841e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8420		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8422		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8425		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8427		b0 2e		bcs $8457			bcs     _KGNBExitFail               ; report as general error
.8429						_KGRBEventLoop:
.8429		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.842c		20 80 82	jsr $8280			jsr     GetNextEvent
.842f		b0 f8		bcs $8429			bcs     _KGRBEventLoop
.8431		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8434		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8436		f0 0a		beq $8442			beq     _KNLRBGetNextByte
.8438		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.843a		f0 1b		beq $8457			beq 	_KGNBExitFail
.843c		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.843e		f0 17		beq $8457			beq 	_KGNBExitFail
.8440		80 e7		bra $8429			bra 	_KGRBEventLoop
.8442						_KNLRBGetNextByte:
.8442		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8444		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8446		a9 06		lda #$06			lda     #>KNLReadBuffer
.8448		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.844a		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.844d		85 fd		sta $fd				sta     kernel.args.recv.buflen
.844f		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8452		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8455		18		clc				clc
.8456		60		rts				rts
.8457						_KGNBExitFail:
.8457		38		sec				sec
.8458		60		rts				rts
.8459						KNLWriteBlock:
.8459		da		phx				phx
.845a		5a		phy				phy
.845b		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.845d		a5 36		lda $36				lda     zTemp0 						; save the data location.
.845f		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8461		a5 37		lda $37				lda     zTemp0+1
.8463		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8465		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8467		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.846a		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.846c		b0 21		bcs $848f			bcs 	_KWBFailed
.846e						_KNLWLoop:
.846e		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8471		20 80 82	jsr $8280			jsr     GetNextEvent
.8474		b0 f8		bcs $846e			bcs     _KNLWLoop
.8476		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8479		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.847b		f0 12		beq $848f			beq 	_KWBFailed
.847d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.847f		f0 0e		beq $848f			beq 	_KWBFailed
.8481		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8483		f0 0a		beq $848f			beq 	_KWBFailed
.8485		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8487		d0 e5		bne $846e			bne 	_KNLWLoop
.8489		18		clc				clc
.848a		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.848d		80 01		bra $8490			bra 	_KWBExit
.848f						_KWBFailed:
.848f		38		sec				sec
.8490						_KWBExit:
.8490		7a		ply				ply
.8491		fa		plx				plx
.8492		60		rts				rts
.8493						KNLCloseFile:
.8493		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8495		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8498		60		rts				rts
.8499						KNLReadController:
.8499		da		phx				phx
.849a		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.849c		64 01		stz $01				stz 	1 							; switch to I/O 0
.849e		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.84a1		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.84a3		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.84a6		86 01		stx $01				stx 	1 							; repair old I/O and exit
.84a8		fa		plx				plx
.84a9		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4   ; Create a directory
>ff84						RmDir       .fill   4   ; Delete a directory
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						CREATED     .word   ?   ; The directory has been created.
>004a						DELETED     .word   ?   ; The directory has been deleted.
>004c						TCP         .word   ?
>004e						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84aa						AssembleGroup1:
.84aa		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.84ac		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.84af		80 02		bra $84b3			bra 	AsmGroup12
.84b1						AssembleGroup2:
.84b1		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84b3						AsmGroup12:
.84b3		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.84b6		68		pla				pla 								; pop the return address to access the information following.
.84b7		fa		plx				plx
.84b8		20 3f 85	jsr $853f			jsr 	AccessParameters 			; get opcode and save as base
.84bb		8d 20 04	sta $0420			sta 	BaseOpcode
.84be		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84c1		d0 08		bne $84cb			bne 	_AG12HaveMask
.84c3		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84c5		20 47 85	jsr $8547			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84c8		8d 21 04	sta $0421			sta 	ModeMask
.84cb						_AG12HaveMask:
.84cb		20 7b 86	jsr $867b			jsr 	TypeAndCalculateOperand 	; get zero page type
.84ce		da		phx				phx 								; save found address mode
.84cf		20 ab 85	jsr $85ab			jsr 	AssembleModeX
.84d2		fa		plx				plx  								; restore address mode
.84d3		b0 0b		bcs $84e0			bcs 	_AG12Exit
.84d5		20 e1 84	jsr $84e1			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84d8		20 ab 85	jsr $85ab			jsr 	AssembleModeX
.84db		b0 03		bcs $84e0			bcs 	_AG12Exit
.84dd		4c 81 a4	jmp $a481			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84e0						_AG12Exit:
.84e0		60		rts				rts
.84e1						PromoteToAbsolute:
.84e1		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84e3		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84e5		f0 19		beq $8500			beq 	_PTADo
.84e7		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84e9		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84eb		f0 13		beq $8500			beq 	_PTADo
.84ed		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84ef		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84f1		f0 0d		beq $8500			beq 	_PTADo
.84f3		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84f5		e0 d1		cpx #$d1			cpx 	#AM_IND
.84f7		f0 07		beq $8500			beq 	_PTADo
.84f9		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84fb		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84fd		f0 01		beq $8500			beq 	_PTADo
.84ff		60		rts				rts
.8500						_PTADo:
.8500		aa		tax				tax
.8501		60		rts				rts
.8502						AssembleGroup3:
.8502		68		pla				pla 								; get parameters, which is just the opcode.
.8503		fa		plx				plx
.8504		20 3f 85	jsr $853f			jsr 	AccessParameters 			; get and output opcode
.8507		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.850a		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get a 16 bit operand
.850d		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.850f		38		sec				sec
.8510		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8513		48		pha				pha 								; LSB in A
.8514		a5 60		lda $60				lda 	NSMantissa1
.8516		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8519		aa		tax				tax 								; MSB in X
.851a		68		pla				pla
.851b		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.851c		69 7f		adc #$7f			adc 	#$7F
.851e		90 01		bcc $8521			bcc 	_AG3NoCarry
.8520		e8		inx				inx
.8521						_AG3NoCarry:
.8521		38		sec				sec 								; fix back and write out anyways.
.8522		e9 80		sbc #$80			sbc 	#$80
.8524		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.8527		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8529		f0 0a		beq $8535			beq 	_AG3Exit
.852b		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.852e		29 01		and #$01			and 	#1
.8530		f0 03		beq $8535			beq 	_AG3Exit
.8532		4c 86 a4	jmp $a486			jmp 	RangeError 					; no, branch is out of range
.8535						_AG3Exit:
.8535		60		rts				rts
.8536						AssembleGroup4:
.8536		68		pla				pla 								; pop address
.8537		fa		plx				plx
.8538		20 3f 85	jsr $853f			jsr 	AccessParameters 			; access and get first
.853b		20 57 85	jsr $8557			jsr 	AssemblerWriteByte 			; output it.
.853e		60		rts				rts
.853f						AccessParameters:
.853f		8d 1d 04	sta $041d			sta 	ParamStart
.8542		8e 1e 04	stx $041e			stx 	ParamStart+1
.8545		a9 01		lda #$01			lda 	#1
.8547						GetParameter:
.8547		5a		phy				phy
.8548		a8		tay				tay
.8549		ad 1d 04	lda $041d			lda 	ParamStart
.854c		85 36		sta $36				sta 	zTemp0
.854e		ad 1e 04	lda $041e			lda 	ParamStart+1
.8551		85 37		sta $37				sta 	zTemp0+1
.8553		b1 36		lda ($36),y			lda 	(zTemp0),y
.8555		7a		ply				ply
.8556		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8557						AssemblerWriteByte:
.8557		48		pha			pha
.8558		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.855b		29 02		and #$02		and 	#2
.855d		f0 1b		beq $857a		beq 	_AWBNoPrint
.855f		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8562		20 95 85	jsr $8595		jsr 	PrintHex
.8565		ad 1a 04	lda $041a		lda		AssemblerAddress
.8568		20 95 85	jsr $8595		jsr 	PrintHex
.856b		a9 20		lda #$20		lda 	#' '
.856d		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8570		68		pla			pla 									; print byte
.8571		48		pha			pha
.8572		20 95 85	jsr $8595		jsr 	PrintHex
.8575		a9 0d		lda #$0d		lda 	#13
.8577		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.857a						_AWBNoPrint:
.857a		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.857d		85 36		sta $36			sta 	zTemp0
.857f		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8582		f0 0e		beq $8592		beq 	_AWBRange
.8584		85 37		sta $37			sta 	zTemp0+1
.8586		68		pla			pla 									; write byte out
.8587		92 36		sta ($36)		sta 	(zTemp0)
.8589		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.858c		d0 03		bne $8591		bne 	_AWBNoCarry
.858e		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8591						_AWBNoCarry:
.8591		60		rts			rts
.8592						_AWBRange:
.8592		4c 86 a4	jmp $a486		jmp 	RangeError
.8595						PrintHex:
.8595		48		pha				pha
.8596		4a		lsr a				lsr 	a
.8597		4a		lsr a				lsr 	a
.8598		4a		lsr a				lsr 	a
.8599		4a		lsr a				lsr 	a
.859a		20 9e 85	jsr $859e			jsr 	_PrintNibble
.859d		68		pla				pla
.859e						_PrintNibble:
.859e		29 0f		and #$0f			and 	#15
.85a0		c9 0a		cmp #$0a			cmp 	#10
.85a2		90 02		bcc $85a6			bcc 	_NoShift
.85a4		69 06		adc #$06			adc 	#6
.85a6						_NoShift:
.85a6		69 30		adc #$30			adc 	#48
.85a8		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85ab						AssembleModeX:
.85ab		5a		phy				phy
.85ac		ad 1f 04	lda $041f			lda 	IsGroup1
.85af		f0 17		beq $85c8			beq 	_AMXGroup2
.85b1		8a		txa				txa 							; is it in group # 1
.85b2		29 40		and #$40			and 	#AM_ISG1
.85b4		f0 4d		beq $8603			beq 	_AMXFail 				; no, give up.
.85b6		8a		txa				txa 							; get back.
.85b7		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85b9		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85bb		d0 22		bne $85df			bne 	_AMXHaveInfo
.85bd		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.85c0		c9 81		cmp #$81			cmp 	#$81
.85c2		f0 3f		beq $8603			beq 	_AMXFail
.85c4		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85c6		80 17		bra $85df			bra 	_AMXHaveInfo 			; odd design decision there.
.85c8						_AMXGroup2:
.85c8		8a		txa				txa 							; is it in group 2 ?
.85c9		29 20		and #$20			and 	#AM_ISG2
.85cb		f0 36		beq $8603			beq 	_AMXFail 				; no, give up.
.85cd		8a		txa				txa 							; get the offset into Y
.85ce		29 1f		and #$1f			and 	#$1F
.85d0		4a		lsr a				lsr 	a 						; make it 0-7.
.85d1		4a		lsr a				lsr  	a
.85d2		a8		tay				tay
.85d3		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85d6						_AMXCheckOkay:
.85d6		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85d7		88		dey				dey
.85d8		10 fc		bpl $85d6			bpl 	_AMXCheckOkay
.85da		90 27		bcc $8603			bcc 	_AMXFail 				; not allowed.
.85dc		8a		txa				txa  							; get mask back
.85dd		29 1f		and #$1f			and 	#$1F
.85df						_AMXHaveInfo:
.85df		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85e1		10 04		bpl $85e7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85e3		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85e5		d0 1c		bne $8603			bne 	_AMXFail
.85e7						_AMXAnySize:
.85e7		18		clc				clc 							; add offset to the base opcode
.85e8		6d 20 04	adc $0420			adc 	BaseOpcode
.85eb						_AMXOutputCode:
.85eb		20 57 85	jsr $8557			jsr 	AssemblerWriteByte 		; write the opcode out.
.85ee		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85f0		f0 0e		beq $8600			beq 	_AMXExit
.85f2		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85f4		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.85f7		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85f9		30 05		bmi $8600			bmi 	_AMXExit
.85fb		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85fd		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.8600						_AMXExit:
.8600		7a		ply				ply
.8601		38		sec				sec
.8602		60		rts				rts
.8603						_AMXFail:
.8603		a0 00		ldy #$00			ldy 	#0
.8605						_AMXCheckOddities:
.8605		8a		txa				txa
.8606		d9 2d 86	cmp $862d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8609		d0 15		bne $8620			bne 	_AMXCONext
.860b		b9 2b 86	lda $862b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.860e		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8611		d0 0d		bne $8620			bne 	_AMXCONext
.8613		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8615		10 04		bpl $861b			bpl 	_AMXCONotZero
.8617		a5 60		lda $60				lda 	NSMantissa1
.8619		d0 05		bne $8620			bne 	_AMXCONext
.861b						_AMXCONotZero:
.861b		b9 2c 86	lda $862c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.861e		80 cb		bra $85eb			bra 	_AMXOutputCode 			; and assemble it
.8620						_AMXCONext:
.8620		c8		iny				iny
.8621		c8		iny				iny
.8622		c8		iny				iny
.8623		b9 2b 86	lda $862b,y			lda 	ExtraOpcode+0,y 		; end of table
.8626		d0 dd		bne $8605			bne 	_AMXCheckOddities
.8628						_AMXCOFail:
.8628		7a		ply				ply
.8629		18		clc				clc
.862a		60		rts				rts
.862b						ExtraOpcode:
>862b		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>862e		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8631		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8634		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8637		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>863a		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>863d		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8640		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8643		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8646		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8649		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.864a						LabelHere:
.864a		c8		iny				iny 								; skip .
.864b		a2 00		ldx #$00			ldx 	#0 							; get a term
.864d		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm
.8650		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8652		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8654		d0 22		bne $8678			bne 	_ALType 					; otherwise typing error
.8656		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8658		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.865a		b5 60		lda $60,x			lda 	NSMantissa1,x
.865c		85 37		sta $37				sta 	zTemp0+1
.865e		5a		phy				phy 								; copy address in (64k)
.865f		a0 01		ldy #$01			ldy 	#1
.8661		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8664		92 36		sta ($36)			sta 	(zTemp0)
.8666		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8669		91 36		sta ($36),y			sta 	(zTemp0),y
.866b		c8		iny				iny
.866c		a9 00		lda #$00			lda 	#0 							; zero the rest.
.866e		91 36		sta ($36),y			sta 	(zTemp0),y
.8670		c8		iny				iny
.8671		91 36		sta ($36),y			sta 	(zTemp0),y
.8673		c8		iny				iny
.8674		91 36		sta ($36),y			sta 	(zTemp0),y
.8676		7a		ply				ply
.8677		60		rts				rts
.8678						_ALType:
.8678		4c 8b a4	jmp $a48b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.867b						TypeAndCalculateOperand:
.867b		b1 30		lda ($30),y			lda 	(codePtr),y
.867d		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.867f		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8681		f0 5b		beq $86de			beq 	_TACOExit
.8683		c9 80		cmp #$80			cmp 	#KWC_EOL
.8685		f0 57		beq $86de			beq 	_TACOExit
.8687		c8		iny				iny
.8688		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.868a		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.868c		f0 51		beq $86df			beq 	CalculateOperand
.868e		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8690		f0 1f		beq $86b1			beq 	_TACOIndirect
.8692		88		dey				dey 								; undo get of first character
.8693		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get operand
.8696		b1 30		lda ($30),y			lda 	(codePtr),y
.8698		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.869a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.869c		d0 40		bne $86de			bne 	_TACOExit
.869e		c8		iny				iny
.869f		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86a2		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86a4		c9 58		cmp #$58			cmp 	#'X'
.86a6		f0 36		beq $86de			beq 	_TACOExit
.86a8		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86aa		c9 59		cmp #$59			cmp 	#'Y'
.86ac		f0 30		beq $86de			beq 	_TACOExit
.86ae						_TACOSyntax:
.86ae		4c 81 a4	jmp $a481			jmp 	SyntaxError
.86b1						_TACOIndirect:
.86b1		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get the operand
.86b4		b1 30		lda ($30),y			lda 	(codePtr),y
.86b6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86b8		f0 17		beq $86d1			beq 	_TACOIndX
.86ba		20 90 93	jsr $9390			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86bd		b1 30		lda ($30),y			lda 	(codePtr),y
.86bf		a2 d1		ldx #$d1			ldx 	#AM_IND
.86c1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86c3		d0 19		bne $86de			bne 	_TACOExit
.86c5		c8		iny				iny
.86c6		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86c9		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86cb		d0 e1		bne $86ae			bne 	_TACOSyntax
.86cd		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86cf		80 0d		bra $86de			bra 	_TACOExit
.86d1						_TACOIndX:
.86d1		c8		iny				iny
.86d2		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86d5		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86d7		d0 d5		bne $86ae			bne 	_TACOSyntax
.86d9		20 90 93	jsr $9390			jsr 	CheckRightBracket			; check )
.86dc		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86de						_TACOExit:
.86de		60		rts				rts
.86df						CalculateOperand:
.86df		48		pha				pha
.86e0		da		phx				phx
.86e1		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86e3		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.86e6		fa		plx				plx
.86e7		68		pla				pla
.86e8		60		rts				rts
.86e9						TACOCheckXY:
.86e9		b1 30		lda ($30),y			lda 	(codePtr),y
.86eb		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86ed		c9 40		cmp #$40			cmp 	#$40
.86ef		d0 21		bne $8712			bne 	_TCXYFail
.86f1		b1 30		lda ($30),y			lda 	(codePtr),y
.86f3		18		clc				clc
.86f4		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86f6		85 37		sta $37				sta 	zTemp0+1
.86f8		c8		iny				iny
.86f9		b1 30		lda ($30),y			lda 	(codePtr),y
.86fb		c8		iny				iny
.86fc		85 36		sta $36				sta 	zTemp0
.86fe		5a		phy				phy 								; save position
.86ff		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8701		b1 36		lda ($36),y			lda 	(zTemp0),y
.8703		d0 0c		bne $8711			bne 	_TCXYPopFail
.8705		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8707		b1 36		lda ($36),y			lda 	(zTemp0),y
.8709		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.870b		f0 08		beq $8715			beq 	_TCXYFound
.870d		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.870f		f0 04		beq $8715			beq 	_TCXYFound
.8711						_TCXYPopFail:
.8711		7a		ply				ply
.8712						_TCXYFail:
.8712		a9 00		lda #$00			lda 	#0
.8714		60		rts				rts
.8715						_TCXYFound:
.8715		7a		ply				ply 								; restore position
.8716		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8718		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8719						BackloadProgram:
.8719		20 f5 8d	jsr $8df5			jsr 	NewProgram 					; does the actual NEW.
.871c		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.871e		a9 79		lda #$79			lda 	#_BLLoad & $FF
.8720		20 08 94	jsr $9408			jsr 	PrintStringXA
.8723		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8725		8d a2 07	sta $07a2			sta 	BackLoadPage
.8728		a9 00		lda #$00			lda 	#(($6000) & $FF)
.872a		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.872d		a9 60		lda #$60			lda 	#(($6000) >> 8)
.872f		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.8732		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8735		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8738		a9 ff		lda #$ff			lda 	#$FF
.873a		8d fa ff	sta $fffa			sta 	$FFFA
.873d						_BPLoop:
.873d		a2 ff		ldx #$ff			ldx 	#$FF
.873f		20 ae 87	jsr $87ae			jsr 	BLReadByte 					; read a byte
.8742		c9 00		cmp #$00			cmp 	#0
.8744		f0 2c		beq $8772			beq 	_BPExit 					; if 0 exit
.8746		30 2a		bmi $8772			bmi 	_BPExit 					; if -ve exit
.8748						_BPCopy:
.8748		e8		inx				inx  								; copy byte into the lineBuffer
.8749		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.874c		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.874f		20 ae 87	jsr $87ae			jsr 	BLReadByte 					; read next byte
.8752		30 0a		bmi $875e			bmi 	_BPEndLine 					; -ve = EOL
.8754		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8756		d0 02		bne $875a			bne 	_BPNotTab
.8758		a9 20		lda #$20			lda 	#' '
.875a						_BPNotTab:
.875a		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.875c		b0 ea		bcs $8748			bcs 	_BPCopy 					; until a control character, should be 13 received.
.875e						_BPEndLine:
.875e		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.8761		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8764		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8767		f0 d4		beq $873d			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8769		20 8e 87	jsr $878e			jsr 	BLCheckLast 				; check last backload okay.
.876c		38		sec				sec 								; append not insert
.876d		20 75 a6	jsr $a675			jsr 	MemoryInsertLine 			; append to current program
.8770		80 cb		bra $873d			bra 	_BPLoop
.8772						_BPExit:
.8772		9c fa ff	stz $fffa			stz 	$FFFA
.8775		20 35 92	jsr $9235			jsr 	ClearSystem 				; clear variables etc.
.8778		60		rts				rts
.8779						_BLLoad:
>8779		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8781		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.878e						BLCheckLast:
.878e		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.8791		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8794		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8797		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.879a		b0 0d		bcs $87a9			bcs 	_BLCheckFail
.879c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.879f		8d a5 07	sta $07a5			sta 	BackLoadLast
.87a2		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.87a5		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.87a8		60		rts				rts
.87a9						_BLCheckFail:
.87a9		a9 02		lda #$02		lda	#2
.87ab		4c a9 93	jmp $93a9		jmp	ErrorHandler
.87ae						BLReadByte:
.87ae		da		phx				phx
.87af		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.87b1		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.87b4		85 0b		sta $0b				sta 	8+3
.87b6		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87b9		85 36		sta $36				sta 	zTemp0
.87bb		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.87be		85 37		sta $37				sta 	zTemp0+1
.87c0		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87c2		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87c5		d0 0f		bne $87d6			bne 	_BLNoCarry
.87c7		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87ca		10 0a		bpl $87d6			bpl 	_BLNoCarry 					; need a new page
.87cc		48		pha				pha
.87cd		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87cf		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87d2		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87d5		68		pla				pla
.87d6						_BLNoCarry:
.87d6		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87d8		fa		plx				plx
.87d9		c9 00		cmp #$00			cmp 	#0
.87db		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87dc						EditProgramCode:
.87dc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87df		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87e2		20 19 a7	jsr $a719			jsr 	MemorySearch
.87e5		90 05		bcc $87ec			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87e7		d0 03		bne $87ec			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87e9		20 3e a6	jsr $a63e			jsr 	MemoryDeleteLine 			; delete the line
.87ec						_EPCNoDelete:
.87ec		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87ef		c9 80		cmp #$80			cmp 	#KWC_EOL
.87f1		f0 0d		beq $8800			beq 	_EPCNoInsert
.87f3		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87f6		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87f9		20 19 a7	jsr $a719			jsr 	MemorySearch
.87fc		18		clc				clc 								; insert at this point.
.87fd		20 75 a6	jsr $a675			jsr 	MemoryInsertLine 			; insert the line
.8800						_EPCNoInsert:
.8800		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8801						WarmStart:
.8801		a2 ff		ldx #$ff			ldx 	#$FF
.8803		9a		txs				txs
.8804		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8806		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8809		20 c8 81	jsr $81c8			jsr 	EXTInputLine 				; get line to lineBuffer
.880c		ad 26 05	lda $0526			lda 	lineBuffer 					; first character is slash
.880f		c9 2f		cmp #$2f			cmp 	#"/"
.8811		d0 07		bne $881a			bne 	_WSNotSlash
.8813		a2 05		ldx #$05			ldx 	#(lineBuffer+1) >> 8 		; boot rest of line.
.8815		a9 27		lda #$27			lda 	#(lineBuffer+1) & $FF
.8817		4c 76 ab	jmp $ab76			jmp 	BootXA
.881a						_WSNotSlash:
.881a		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.881d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8820		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8823		d0 17		bne $883c			bne 	_WSEditCode 				; if so,edit code.
.8825		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8828		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.882a		85 30		sta $30				sta 	codePtr
.882c		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.882e		85 31		sta $31				sta 	codePtr+1
.8830		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8833		c9 80		cmp #$80			cmp 	#KWC_EOL
.8835		f0 ca		beq $8801			beq 	WarmStart
.8837		20 92 8f	jsr $8f92			jsr 	RUNCodePointerLine 			; execute that line.
.883a		80 c5		bra $8801			bra 	WarmStart
.883c						_WSEditCode:
.883c		20 dc 87	jsr $87dc			jsr 	EditProgramCode 			; edit the program code
.883f		20 35 92	jsr $9235			jsr 	ClearSystem 				; clear all variables etc.
.8842		80 bd		bra $8801			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8844						AssembleCommand:
.8844		a2 00		ldx #$00			ldx 	#0
.8846		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; start address
.8849		a5 58		lda $58				lda 	NSMantissa0
.884b		8d 1a 04	sta $041a			sta 	AssemblerAddress
.884e		a5 60		lda $60				lda 	NSMantissa1
.8850		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8853		20 98 93	jsr $9398			jsr 	CheckComma
.8856		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; options 0-3
.8859		a5 58		lda $58				lda 	NSMantissa0
.885b		8d 1c 04	sta $041c			sta 	AssemblerControl
.885e		60		rts				rts
.885f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8860						AssertCommand:
.8860		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8862		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; the assert test
.8865		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; exit if result is non zero.
.8868		d0 05		bne $886f			bne 	_ACExit
.886a		a9 0a		lda #$0a		lda	#10
.886c		4c a9 93	jmp $93a9		jmp	ErrorHandler
.886f						_ACExit:
.886f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8870						CallCommand:
.8870		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8872		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.8875						_CCClear
.8875		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8876		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; these are optional sequentially.
.8879		e0 04		cpx #$04			cpx 	#4
.887b		d0 f8		bne $8875			bne 	_CCClear
.887d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.887f						_CCCParam:
.887f		b1 30		lda ($30),y			lda 	(codePtr),y
.8881		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8883		d0 09		bne $888e			bne 	_CCCRun6502
.8885		c8		iny				iny 								; skip comma
.8886		e8		inx				inx	 								; next level
.8887		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get A/X/Y
.888a		e0 03		cpx #$03			cpx 	#3
.888c		90 f1		bcc $887f			bcc 	_CCCParam 					; done all 3 ?
.888e						_CCCRun6502:
.888e		5a		phy				phy 								; save position
.888f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8891		85 37		sta $37				sta 	zTemp0+1
.8893		a5 58		lda $58				lda 	NSMantissa0
.8895		85 36		sta $36				sta 	zTemp0
.8897		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8899		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.889b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.889d		20 a2 88	jsr $88a2			jsr 	_CCCZTemp0 					; call zTemp0
.88a0		7a		ply				ply 								; restore position and exit
.88a1		60		rts				rts
.88a2						_CCCZTemp0:
.88a2		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88a5						Command_Data:
.88a5		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.88a7		a2 80		ldx #$80			ldx 	#KWC_EOL
.88a9		20 eb 92	jsr $92eb			jsr 	ScanForward
.88ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88ad						DimCommand:
.88ad		b1 30		lda ($30),y			lda 	(codePtr),y
.88af		29 c0		and #$c0			and 	#$C0
.88b1		c9 40		cmp #$40			cmp 	#$40
.88b3		d0 7a		bne $892f			bne 	_DCSyntax 				; n o, error.
.88b5		b1 30		lda ($30),y			lda 	(codePtr),y
.88b7		18		clc				clc
.88b8		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88ba		85 3f		sta $3f				sta 	zaTemp+1
.88bc		c8		iny				iny
.88bd		b1 30		lda ($30),y			lda 	(codePtr),y
.88bf		c8		iny				iny
.88c0		85 3e		sta $3e				sta 	zaTemp
.88c2		5a		phy				phy
.88c3		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88c5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88c7		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88c9		c9 18		cmp #$18			cmp 	#NSTProcedure
.88cb		f0 62		beq $892f			beq 	_DCSyntax
.88cd		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88cf		29 04		and #$04			and 	#NSBIsArray
.88d1		f0 64		beq $8937			beq 	_DCType
.88d3		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88d5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88d7		d0 59		bne $8932			bne 	_DCRedefine
.88d9		7a		ply				ply
.88da		20 3a 89	jsr $893a			jsr 	_DCGetSize 				; get array size, check it.
.88dd		5a		phy				phy
.88de		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88e0		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88e2		7a		ply				ply 							; is there a second (e.g. ,x)
.88e3		b1 30		lda ($30),y			lda 	(codePtr),y
.88e5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88e7		d0 0a		bne $88f3			bne 	_DCOneDimension
.88e9		c8		iny				iny 							; skip comma
.88ea		20 3a 89	jsr $893a			jsr 	_DCGetSize 				; get 2nd array size
.88ed		5a		phy				phy
.88ee		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88f0		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88f2		7a		ply				ply
.88f3						_DCOneDimension:
.88f3		5a		phy				phy 							; save position
.88f4		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88f6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88f8		aa		tax				tax
.88f9		c8		iny				iny
.88fa		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88fc		e8		inx				inx 							; bump them.
.88fd		1a		inc a				inc 	a
.88fe		20 b4 a2	jsr $a2b4			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8901		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8903		29 e0		and #$e0			and 	#$E0
.8905		d0 23		bne $892a			bne 	_DCSize
.8907		a0 02		ldy #$02			ldy 	#2 						; get base type
.8909		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.890b		20 48 89	jsr $8948			jsr 	ScaleByBaseType 		; scale by base type
.890e		a5 36		lda $36				lda 	zTemp0
.8910		a6 37		ldx $37				ldx 	zTemp0+1
.8912		20 ab 9e	jsr $9eab			jsr 	AllocateXABytes 		; allocate memory
.8915		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8917		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8919		c8		iny				iny
.891a		8a		txa				txa
.891b		91 3e		sta ($3e),y			sta 	(zaTemp),y
.891d		7a		ply				ply 							; get position back
.891e		20 90 93	jsr $9390			jsr 	CheckRightBracket 		; check )
.8921		b1 30		lda ($30),y			lda 	(codePtr),y
.8923		c8		iny				iny 							; consume in case
.8924		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8926		f0 85		beq $88ad			beq 	DimCommand
.8928		88		dey				dey 							; undo consume
.8929		60		rts				rts
.892a						_DCSize:
.892a		a9 16		lda #$16		lda	#22
.892c		4c a9 93	jmp $93a9		jmp	ErrorHandler
.892f						_DCSyntax:
.892f		4c 81 a4	jmp $a481			jmp 	SyntaxError
.8932						_DCRedefine:
.8932		a9 15		lda #$15		lda	#21
.8934		4c a9 93	jmp $93a9		jmp	ErrorHandler
.8937						_DCType:
.8937		4c 8b a4	jmp $a48b			jmp 	TypeError
.893a						_DCGetSize:
.893a		a2 00		ldx #$00			ldx 	#0 						; get first index.
.893c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 	; get array dimension
.893f		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8941		f0 e7		beq $892a			beq 	_DCSize
.8943		c9 fe		cmp #$fe			cmp 	#254
.8945		f0 e3		beq $892a			beq 	_DCSize
.8947		60		rts				rts
.8948						ScaleByBaseType:
.8948		29 10		and #$10			and 	#NSBIsString 			; is it string
.894a		d0 19		bne $8965			bne 	_SBBTString
.894c		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.894e		48		pha				pha
.894f		a5 36		lda $36				lda 	zTemp0
.8951		48		pha				pha
.8952		06 36		asl $36				asl 	zTemp0 					; x 2
.8954		26 37		rol $37				rol 	zTemp0+1
.8956		06 36		asl $36				asl 	zTemp0 					; x 4
.8958		26 37		rol $37				rol 	zTemp0+1
.895a		68		pla				pla 							; add stacked value = x 5
.895b		65 36		adc $36				adc 	zTemp0
.895d		85 36		sta $36				sta 	zTemp0
.895f		68		pla				pla
.8960		65 37		adc $37				adc 	zTemp0+1
.8962		85 37		sta $37				sta 	zTemp0+1
.8964		60		rts				rts
.8965						_SBBTString:
.8965		06 36		asl $36				asl 	zTemp0
.8967		26 37		rol $37				rol 	zTemp0+1
.8969		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.896a						EndCommand:
.896a		4c 01 88	jmp $8801			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.896d						ForCommand:
.896d		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.896f		20 3e b4	jsr $b43e			jsr 	StackOpen
.8972		a2 00		ldx #$00			ldx 	#0
.8974		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm
.8977		b5 50		lda $50,x			lda 	NSStatus,x
.8979		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.897b		d0 47		bne $89c4			bne		_FCError
.897d		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.897f		20 a0 93	jsr $93a0			jsr 	CheckNextA
.8982		e8		inx				inx
.8983		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; <from> in +1
.8986		b1 30		lda ($30),y			lda 	(codePtr),y
.8988		c8		iny				iny 								; consume it
.8989		48		pha				pha 								; save on stack for later
.898a		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.898c		f0 04		beq $8992			beq 	_FCNoSyntax
.898e		c9 dc		cmp #$dc			cmp 	#KWD_TO
.8990		d0 35		bne $89c7			bne 	_FCSyntaxError
.8992						_FCNoSyntax:
.8992		e8		inx				inx
.8993		20 76 a2	jsr $a276			jsr 	EvaluateInteger
.8996		20 83 b4	jsr $b483			jsr 	STKSaveCodePosition 		; save loop back position
.8999		68		pla				pla 								; restore DOWNTO or TO
.899a		5a		phy				phy 								; save Y on the stack
.899b		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.899d		f0 02		beq $89a1			beq 	_FCNotDownTo
.899f		a9 02		lda #$02			lda 	#2
.89a1						_FCNotDownTo:
.89a1		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89a2		a0 10		ldy #$10			ldy 	#16
.89a4		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89a6		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89a8		a5 58		lda $58				lda 	NSMantissa0
.89aa		91 34		sta ($34),y			sta 	(basicStack),y
.89ac		a5 60		lda $60				lda 	NSMantissa1
.89ae		c8		iny				iny
.89af		91 34		sta ($34),y			sta 	(basicStack),y
.89b1		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89b3		a2 01		ldx #$01			ldx 	#1
.89b5		20 ca 89	jsr $89ca			jsr 	FCIntegerToStack
.89b8		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89ba		a2 02		ldx #$02			ldx 	#2
.89bc		20 ca 89	jsr $89ca			jsr 	FCIntegerToStack
.89bf		20 e5 89	jsr $89e5			jsr 	CopyIndexToReference
.89c2		7a		ply				ply 								; restore position
.89c3		60		rts				rts
.89c4						_FCError:
.89c4		4c 8b a4	jmp $a48b			jmp 	TypeError
.89c7						_FCSyntaxError:
.89c7		4c 81 a4	jmp $a481			jmp 	SyntaxError
.89ca						FCIntegerToStack:
.89ca		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89cc		10 03		bpl $89d1			bpl	 	_FCNotNegative
.89ce		20 d2 a2	jsr $a2d2			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89d1						_FCNotNegative:
.89d1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89d3		91 34		sta ($34),y			sta 	(basicStack),y
.89d5		c8		iny				iny
.89d6		b5 60		lda $60,x			lda 	NSMantissa1,x
.89d8		91 34		sta ($34),y			sta 	(basicStack),y
.89da		c8		iny				iny
.89db		b5 68		lda $68,x			lda 	NSMantissa2,x
.89dd		91 34		sta ($34),y			sta 	(basicStack),y
.89df		c8		iny				iny
.89e0		b5 70		lda $70,x			lda 	NSMantissa3,x
.89e2		91 34		sta ($34),y			sta 	(basicStack),y
.89e4		60		rts				rts
.89e5						CopyIndexToReference:
.89e5		5a		phy				phy
.89e6		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89e8		38		sec				sec 								; (because we copy from offset 8)
.89e9		b1 34		lda ($34),y			lda 	(basicStack),y
.89eb		e9 08		sbc #$08			sbc 	#8
.89ed		85 36		sta $36				sta 	zTemp0
.89ef		c8		iny				iny
.89f0		b1 34		lda ($34),y			lda 	(basicStack),y
.89f2		e9 00		sbc #$00			sbc 	#0
.89f4		85 37		sta $37				sta 	zTemp0+1
.89f6		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89f8		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89fa		b1 34		lda ($34),y			lda 	(basicStack),y
.89fc		0a		asl a				asl 	a 							; into carry
.89fd		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89ff		90 14		bcc $8a15			bcc 	_CITRNormal
.8a01		38		sec				sec
.8a02						_CITRNegative:
.8a02		a9 00		lda #$00			lda 	#0
.8a04		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a06		91 36		sta ($36),y			sta 	(zTemp0),y
.8a08		c8		iny				iny
.8a09		ca		dex				dex
.8a0a		d0 f6		bne $8a02			bne 	_CITRNegative
.8a0c		88		dey				dey 								; look at MSB of mantissa
.8a0d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a0f		09 80		ora #$80			ora 	#$80
.8a11		91 36		sta ($36),y			sta 	(zTemp0),y
.8a13		7a		ply				ply
.8a14		60		rts				rts
.8a15						_CITRNormal:
.8a15		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a17		91 36		sta ($36),y			sta 	(zTemp0),y
.8a19		c8		iny				iny
.8a1a		ca		dex				dex
.8a1b		d0 f8		bne $8a15			bne 	_CITRNormal
.8a1d		7a		ply				ply 								; and exit.
.8a1e		60		rts				rts
.8a1f						NextCommand:
.8a1f		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a21		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a23		20 6b b4	jsr $b46b			jsr 	StackCheckFrame
.8a26		5a		phy				phy
.8a27		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a29		b1 34		lda ($34),y			lda 	(basicStack),y
.8a2b		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a2d		30 02		bmi $8a31			bmi 	_NCStepNeg
.8a2f		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a31						_NCStepNeg:
.8a31		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a33		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a35		18		clc				clc
.8a36						_NCBump:
.8a36		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a38		91 34		sta ($34),y			sta 	(basicStack),y
.8a3a		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a3c		c8		iny				iny 								; next byte
.8a3d		ca		dex				dex 								; do four times
.8a3e		d0 f6		bne $8a36			bne 	_NCBump
.8a40		20 e5 89	jsr $89e5			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a43		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a45		b1 34		lda ($34),y			lda 	(basicStack),y
.8a47		0a		asl a				asl 	a 							; sign bit to carry
.8a48		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a4a		85 38		sta $38				sta 	zTemp1
.8a4c		90 02		bcc $8a50			bcc 	_NCCompRev 					; use if step is +ve
.8a4e		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a50						_NCCompRev:
.8a50		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a52		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a54		85 39		sta $39				sta 	zTemp1+1
.8a56		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a58		38		sec				sec
.8a59						_NCCompare:
.8a59		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a5b		b1 34		lda ($34),y			lda 	(basicStack),y
.8a5d		a4 39		ldy $39				ldy 	zTemp1+1
.8a5f		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a61		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a63		e6 39		inc $39				inc 	zTemp1+1
.8a65		ca		dex				dex 								; do it 4 times.
.8a66		d0 f1		bne $8a59			bne 	_NCCompare
.8a68		50 02		bvc $8a6c			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a6a		49 80		eor #$80			eor 	#$80
.8a6c						_NCNoOverflow:
.8a6c		7a		ply				ply 								; restore Y position
.8a6d		0a		asl a				asl 	a 							; is bit 7 set.
.8a6e		90 04		bcc $8a74			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a70		20 5d b4	jsr $b45d			jsr 	StackClose 					; exit the loop
.8a73		60		rts				rts
.8a74						_NCLoopBack:
.8a74		20 94 b4	jsr $b494			jsr 	STKLoadCodePosition 		; loop back
.8a77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a78						Command_GOSUB:
.8a78		a2 00		ldx #$00			ldx 	#0
.8a7a		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a7d		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a7f		20 3e b4	jsr $b43e			jsr 	StackOpen 					; create frame
.8a82		20 83 b4	jsr $b483			jsr 	STKSaveCodePosition 		; save current position
.8a85		4c 9b 8a	jmp $8a9b			jmp 	GotoStackX
.8a88						Command_RETURN:
.8a88		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a8a		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a8c		20 6b b4	jsr $b46b			jsr 	StackCheckFrame
.8a8f		20 94 b4	jsr $b494			jsr 	STKLoadCodePosition 		; restore code position
.8a92		20 5d b4	jsr $b45d			jsr 	StackClose
.8a95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a96						GotoCommand:
.8a96		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a98		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.8a9b						GotoStackX:
.8a9b		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a9d		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a9e		b5 58		lda $58,x			lda 	NSMantissa0,x
.8aa0		fa		plx				plx
.8aa1		20 19 a7	jsr $a719			jsr 	MemorySearch 				; transfer to line number AX.
.8aa4		90 05		bcc $8aab			bcc 	_GotoError 					; not found, off end.
.8aa6		d0 03		bne $8aab			bne 	_GotoError 					; not found exactly
.8aa8		4c 8b 8f	jmp $8f8b			jmp 	RunNewLine 					; and go straight to new line code.
.8aab						_GotoError:
.8aab		a9 0d		lda #$0d		lda	#13
.8aad		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ab0						IfCommand:
.8ab0		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8ab2		20 57 a2	jsr $a257			jsr 	EvaluateNumber
.8ab5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab7		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ab9		d0 0a		bne $8ac5			bne 	_IfStructured 				; we still support it.
.8abb		c8		iny				iny 								; consume THEN
.8abc		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; is it zero
.8abf		f0 01		beq $8ac2			beq 	_IfFail 					; if fail, go to next line
.8ac1		60		rts				rts 								; if THEN just continue
.8ac2						_IfFail:
.8ac2		4c 66 8f	jmp $8f66			jmp 	EOLCommand
.8ac5						_IfStructured:
.8ac5		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; is it zero
.8ac8		d0 07		bne $8ad1			bne 	_IfExit 					; if not, then continue normally.
.8aca		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8acc		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8ace		20 eb 92	jsr $92eb			jsr 	ScanForward 				; and run from there
.8ad1						_IfExit:
.8ad1		60		rts				rts
.8ad2						ElseCode:
.8ad2		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ad4		aa		tax				tax 								; so just go to the structure exit
.8ad5		20 eb 92	jsr $92eb			jsr 	ScanForward
.8ad8		60		rts				rts
.8ad9						EndIf:
.8ad9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ada						Command_Input:
.8ada		9c 24 04	stz $0424			stz 	isPrintFlag
.8add		80 0c		bra $8aeb			bra 	Command_IP_Main
.8adf						Command_CPrint:
.8adf		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ae1		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ae4		80 05		bra $8aeb			bra 	Command_IP_Main
.8ae6						Command_Print:
.8ae6		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ae8		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aeb						Command_IP_Main:
.8aeb		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8aec						_CPLoop:
.8aec		08		php				php 								; save last action flag
.8aed		b1 30		lda ($30),y			lda 	(codePtr),y
.8aef		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8af1		f0 54		beq $8b47			beq 	_CPExit
.8af3		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8af5		f0 50		beq $8b47			beq 	_CPExit
.8af7		68		pla				pla 								; throw last action flag
.8af8		b1 30		lda ($30),y			lda 	(codePtr),y
.8afa		c8		iny				iny
.8afb		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8afd		f0 45		beq $8b44			beq 	_CPContinueWithSameLine
.8aff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b01		f0 3c		beq $8b3f			beq 	_CPTab
.8b03		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b05		f0 34		beq $8b3b			beq 	_CPNewLine
.8b07		88		dey				dey 								; undo the get.
.8b08		20 b1 98	jsr $98b1			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b0b		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b0d		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b0f		f0 0d		beq $8b1e			beq 	_CPIsValue 					; no, display it.
.8b11		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b14		d0 05		bne $8b1b			bne 	_CPIsPrint 					; otherwise display.
.8b16		20 50 8b	jsr $8b50			jsr 	CIInputValue 				; input a value to the reference
.8b19		80 20		bra $8b3b			bra 	_CPNewLine
.8b1b						_CPIsPrint:
.8b1b		20 76 9b	jsr $9b76			jsr 	Dereference 				; dereference if required.
.8b1e						_CPIsValue:
.8b1e		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b20		29 10		and #$10			and 	#NSBIsString
.8b22		f0 09		beq $8b2d			beq 	_CPNumber
.8b24		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b26		a5 58		lda $58				lda 	NSMantissa0
.8b28		20 b3 8b	jsr $8bb3			jsr 	CPPrintStringXA
.8b2b		80 be		bra $8aeb			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b2d						_CPNumber:
.8b2d		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b2f		20 3e a1	jsr $a13e			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b32		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b34		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b36		20 b3 8b	jsr $8bb3			jsr 	CPPrintStringXA 			; print it.
.8b39		80 b0		bra $8aeb			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b3b						_CPNewLine:
.8b3b		a9 0d		lda #$0d			lda 	#13
.8b3d		80 02		bra $8b41			bra 	_CPPrintCharDirect
.8b3f						_CPTab:
.8b3f		a9 09		lda #$09			lda 	#9 							; print TAB
.8b41						_CPPrintCharDirect:
.8b41		20 ce 8b	jsr $8bce			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b44						_CPContinueWithSameLine:
.8b44		38		sec				sec 								; loop round with carry set, which
.8b45		80 a5		bra $8aec			bra 	_CPLoop 					; will inhibit final CR
.8b47						_CPExit:
.8b47		28		plp				plp 								; get last action flag
.8b48		b0 05		bcs $8b4f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b4a		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b4c		20 ce 8b	jsr $8bce			jsr 	CPPVControl
.8b4f						_CPExit2:
.8b4f		60		rts				rts
.8b50						CIInputValue:
.8b50		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b52						_CIInputLine:
.8b52		20 d1 8b	jsr $8bd1			jsr 	CPInputVector 				; get key
.8b55		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b57		f0 1f		beq $8b78			beq 	_CIHaveValue
.8b59		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b5b		f0 11		beq $8b6e			beq 	_CIBackspace
.8b5d		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b5f		90 f1		bcc $8b52			bcc 	_CIInputLine
.8b61		e0 50		cpx #$50			cpx 	#80 						; max length
.8b63		b0 ed		bcs $8b52			bcs 	_CIInputLine
.8b65		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b68		e8		inx				inx
.8b69		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b6c		80 e4		bra $8b52			bra 	_CIInputLine
.8b6e						_CIBackspace:
.8b6e		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b70		f0 e0		beq $8b52			beq 	_CIInputLine
.8b72		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b75		ca		dex				dex
.8b76		80 da		bra $8b52			bra 	_CIInputLine
.8b78						_CIHaveValue:
.8b78		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b7b		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b7d		29 10		and #$10			and 	#NSBIsString
.8b7f		f0 17		beq $8b98			beq 	_CIAssignNumber 			; assign a number
.8b81		a2 01		ldx #$01			ldx 	#1
.8b83		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b85		95 58		sta $58,x			sta 	NSMantissa0,x
.8b87		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b89		95 60		sta $60,x			sta 	NSMantissa1,x
.8b8b		74 68		stz $68,x			stz 	NSMantissa2,x
.8b8d		74 70		stz $70,x			stz 	NSMantissa3,x
.8b8f		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b91		95 50		sta $50,x			sta  	NSStatus,x
.8b93		ca		dex				dex 								; X = 0
.8b94		20 0d 8c	jsr $8c0d			jsr 	AssignVariable
.8b97		60		rts				rts
.8b98						_CIAssignNumber:
.8b98		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b9a		85 36		sta $36				sta 	zTemp0
.8b9c		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b9e		85 37		sta $37				sta 	zTemp0+1
.8ba0		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8ba2		20 1e a0	jsr $a01e			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8ba5		90 07		bcc $8bae			bcc 	_CIIsOkay
.8ba7		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8ba9		20 c6 8b	jsr $8bc6			jsr 	CPPrintVector
.8bac		80 a2		bra $8b50			bra 	CIInputValue
.8bae						_CIIsOkay:
.8bae		ca		dex				dex 								; X = 0
.8baf		20 0d 8c	jsr $8c0d			jsr 	AssignVariable
.8bb2		60		rts				rts
.8bb3						CPPrintStringXA:
.8bb3		5a		phy				phy
.8bb4		86 37		stx $37				stx 	zTemp0+1
.8bb6		85 36		sta $36				sta 	zTemp0
.8bb8		a0 00		ldy #$00			ldy 	#0
.8bba						_PSXALoop:
.8bba		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bbc		f0 06		beq $8bc4			beq 	_PSXAExit
.8bbe		20 c6 8b	jsr $8bc6			jsr 	CPPrintVector
.8bc1		c8		iny				iny
.8bc2		80 f6		bra $8bba			bra 	_PSXALoop
.8bc4						_PSXAExit:
.8bc4		7a		ply				ply
.8bc5		60		rts				rts
.8bc6						CPPrintVector:
.8bc6		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bc9		30 03		bmi $8bce			bmi 	CPPVControl
.8bcb		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bce						CPPVControl:
.8bce		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bd1						CPInputVector:
.8bd1		4c c0 81	jmp $81c0			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bd4						LetCommand:
.8bd4		a2 00		ldx #$00			ldx 	#0
.8bd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8bda		d0 14		bne $8bf0			bne 	_LCStandard
.8bdc		c8		iny				iny 								; skip equal
.8bdd		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8be0		20 76 9b	jsr $9b76			jsr 	Dereference 				; dereference it to a value
.8be3		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8be5		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8be7		95 50		sta $50,x			sta 	NSStatus,x
.8be9		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8beb		d0 0f		bne $8bfc			bne 	_LCMain
.8bed		4c 8b a4	jmp $a48b			jmp 	TypeError 					; was a reference before.
.8bf0						_LCStandard:
.8bf0		ad 9b 98	lda $989b			lda 	PrecedenceLevel+"*"			; precedence > this
.8bf3		20 b5 98	jsr $98b5			jsr 	EvaluateExpressionAtPrecedence
.8bf6		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bf8		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bfa		f0 0e		beq $8c0a			beq 	_LetGoProc 					; it's a procedure call.
.8bfc						_LCMain:
.8bfc		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bfe		20 a0 93	jsr $93a0			jsr 	CheckNextA
.8c01		e8		inx				inx 								; RHS
.8c02		20 4e a2	jsr $a24e			jsr 	EvaluateValue
.8c05		ca		dex				dex
.8c06		20 0d 8c	jsr $8c0d			jsr 	AssignVariable
.8c09		60		rts				rts
.8c0a						_LetGoProc:
.8c0a		4c 3c 8e	jmp $8e3c			jmp 	CallProcedure
.8c0d						AssignVariable:
.8c0d		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c0f		48		pha				pha 								; save a copy
.8c10		55 51		eor $51,x			eor 	NSStatus+1,x
.8c12		29 10		and #$10			and 	#NSBIsString
.8c14		d0 0b		bne $8c21			bne 	_ASError
.8c16		68		pla				pla 								; get back
.8c17		29 10		and #$10			and 	#NSBIsString 				; check type
.8c19		d0 03		bne $8c1e			bne 	_ASString
.8c1b		4c b4 9a	jmp $9ab4			jmp 	AssignNumber
.8c1e						_ASString:
.8c1e		4c 12 9b	jmp $9b12			jmp 	AssignString
.8c21						_ASError:
.8c21		4c 8b a4	jmp $a48b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c24						Command_List:
.8c24		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c27		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c29		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c2c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2e		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c30		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c32		f0 72		beq $8ca6			beq 	_CLListProcedure
.8c34		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c36		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c38		a9 ff		lda #$ff			lda 	#$FF
.8c3a		85 5f		sta $5f				sta 	NSMantissa0+7
.8c3c		85 67		sta $67				sta 	NSMantissa1+7
.8c3e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c40		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c42		f0 1a		beq $8c5e			beq 	_CLSecond
.8c44		20 23 8d	jsr $8d23			jsr 	CLIsDigit 					; if not digit, list all
.8c47		b0 20		bcs $8c69			bcs 	_CLStart
.8c49		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c4b		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.8c4e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c50		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c52		f0 0a		beq $8c5e			beq 	_CLSecond 					; if so go get it
.8c54		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c56		85 5f		sta $5f				sta 	NSMantissa0+7
.8c58		a5 64		lda $64				lda 	NSMantissa1+4
.8c5a		85 67		sta $67				sta 	NSMantissa1+7
.8c5c		80 0b		bra $8c69			bra 	_CLStart
.8c5e						_CLSecond:
.8c5e		c8		iny				iny 								; consume comma
.8c5f		20 23 8d	jsr $8d23			jsr 	CLIsDigit 					; digit found
.8c62		b0 05		bcs $8c69			bcs 	_CLStart 					; if not, continue listing
.8c64		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c66		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.8c69						_CLStart
.8c69		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c6b		85 30		sta $30				sta 	codePtr
.8c6d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c6f		85 31		sta $31				sta 	codePtr+1
.8c71						_CLLoop:
.8c71		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c73		f0 03		beq $8c78			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c75		20 40 81	jsr $8140			jsr 	ProcessEvents
.8c78						_NoEvents:
.8c78		d0 27		bne $8ca1			bne 	_CLBreak
.8c7a		b2 30		lda ($30)			lda 	(codePtr)
.8c7c		f0 20		beq $8c9e			beq 	_CLExit
.8c7e		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c80		20 12 8d	jsr $8d12			jsr 	CLCompareLineNo
.8c83		90 0c		bcc $8c91			bcc 	_CLNext
.8c85		a2 07		ldx #$07			ldx 	#7
.8c87		20 12 8d	jsr $8d12			jsr 	CLCompareLineNo
.8c8a		f0 02		beq $8c8e			beq 	_CLDoThisOne
.8c8c		b0 03		bcs $8c91			bcs 	_CLNext
.8c8e						_CLDoThisOne:
.8c8e		20 ff 8c	jsr $8cff			jsr 	CLListOneLine 				; routine to list the current line.
.8c91						_CLNext:
.8c91		18		clc				clc
.8c92		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c94		65 30		adc $30				adc 	codePtr
.8c96		85 30		sta $30				sta 	codePtr
.8c98		90 02		bcc $8c9c			bcc 	_CREExit
.8c9a		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c9c						_CREExit:
.8c9c		80 d3		bra $8c71			bra 	_CLLoop
.8c9e						_CLExit:
.8c9e		4c 01 88	jmp $8801			jmp 	WarmStart
.8ca1						_CLBreak:
.8ca1		a9 01		lda #$01		lda	#1
.8ca3		4c a9 93	jmp $93a9		jmp	ErrorHandler
.8ca6						_CLListProcedure:
.8ca6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca8		85 38		sta $38				sta 	zTemp1
.8caa		c8		iny				iny
.8cab		b1 30		lda ($30),y			lda 	(codePtr),y
.8cad		85 39		sta $39				sta 	zTemp1+1
.8caf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cb1		85 30		sta $30				sta 	codePtr
.8cb3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cb5		85 31		sta $31				sta 	codePtr+1
.8cb7						_CLLPSearch:
.8cb7		b2 30		lda ($30)			lda 	(codePtr)
.8cb9		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cbb		f0 e1		beq $8c9e			beq 	_CLExit
.8cbd		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cbf		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc1		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8cc3		d0 0e		bne $8cd3			bne 	_CLLPNext
.8cc5		c8		iny				iny 								; check if PROC this.
.8cc6		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc8		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8cca		d0 07		bne $8cd3			bne 	_CLLPNext
.8ccc		c8		iny				iny
.8ccd		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccf		c5 39		cmp $39				cmp 	zTemp1+1
.8cd1		f0 0d		beq $8ce0			beq 	_CLLPFound
.8cd3						_CLLPNext:
.8cd3		18		clc				clc
.8cd4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cd6		65 30		adc $30				adc 	codePtr
.8cd8		85 30		sta $30				sta 	codePtr
.8cda		90 02		bcc $8cde			bcc 	_CREExit
.8cdc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cde						_CREExit:
.8cde		80 d7		bra $8cb7			bra 	_CLLPSearch
.8ce0						_CLLPFound:
.8ce0		b2 30		lda ($30)			lda 	(codePtr)
.8ce2		f0 ba		beq $8c9e			beq 	_CLExit
.8ce4		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8ce6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce8		48		pha				pha
.8ce9		20 ff 8c	jsr $8cff			jsr 	CLListOneLine 				; list line and go forward
.8cec		18		clc				clc
.8ced		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cef		65 30		adc $30				adc 	codePtr
.8cf1		85 30		sta $30				sta 	codePtr
.8cf3		90 02		bcc $8cf7			bcc 	_CREExit
.8cf5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cf7						_CREExit:
.8cf7		68		pla				pla 								; reached ENDPROC ?
.8cf8		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8cfa		d0 e4		bne $8ce0			bne 	_CLLPFound
.8cfc		4c 01 88	jmp $8801			jmp 	WarmStart
.8cff						CLListOneLine:
.8cff		20 4e 93	jsr $934e			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d02		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d05		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d07		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8d09		20 08 94	jsr $9408			jsr 	PrintStringXA
.8d0c		a9 0d		lda #$0d			lda 	#13 						; new line
.8d0e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d11		60		rts				rts
.8d12						CLCompareLineNo:
.8d12		38		sec				sec
.8d13		a0 01		ldy #$01			ldy 	#1
.8d15		b1 30		lda ($30),y			lda 	(codePtr),y
.8d17		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d19		85 36		sta $36				sta 	zTemp0
.8d1b		c8		iny				iny
.8d1c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1e		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d20		05 36		ora $36				ora 	zTemp0
.8d22		60		rts				rts
.8d23						CLIsDigit:
.8d23		b1 30		lda ($30),y			lda 	(codePtr),y
.8d25		c9 30		cmp #$30			cmp 	#"0"
.8d27		90 03		bcc $8d2c			bcc	 	_CLIDExitFalse
.8d29		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d2b		60		rts				rts
.8d2c						_CLIDExitFalse:
.8d2c		38		sec				sec
.8d2d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d2e						Command_LOCAL:
.8d2e		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d30		20 3c 8d	jsr $8d3c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d33		b1 30		lda ($30),y			lda 	(codePtr),y
.8d35		c8		iny				iny
.8d36		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d38		f0 f4		beq $8d2e			beq 	Command_LOCAL 				; if so, localise another variable.
.8d3a		88		dey				dey 								; unpick pre-get
.8d3b		60		rts				rts
.8d3c						LocaliseNextTerm:
.8d3c		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm 				; evaluate the term
.8d3f		b5 50		lda $50,x			lda 	NSStatus,x
.8d41		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d43		f0 5c		beq $8da1			beq		_LNTError
.8d45		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d47		85 36		sta $36				sta 	zTemp0
.8d49		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d4b		85 37		sta $37				sta  	zTemp0+1
.8d4d		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d4f		29 10		and #$10			and 	#NSBIsString
.8d51		d0 1e		bne $8d71			bne 	_LNTPushString
.8d53		5a		phy				phy
.8d54		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d56						_LNTPushNumLoop:
.8d56		b1 36		lda ($36),y			lda		(zTemp0),y
.8d58		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d5b		c8		iny				iny
.8d5c		c0 05		cpy #$05			cpy 	#5
.8d5e		d0 f6		bne $8d56			bne 	_LNTPushNumLoop
.8d60		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d62		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d65		a5 37		lda $37				lda 	zTemp0+1
.8d67		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d6a		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d6c		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d6f		7a		ply				ply
.8d70		60		rts				rts
.8d71						_LNTPushString:
.8d71		5a		phy				phy
.8d72		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d74		85 38		sta $38				sta 	zTemp1
.8d76		a0 01		ldy #$01			ldy 	#1
.8d78		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d7a		85 39		sta $39				sta 	zTemp1+1
.8d7c		a0 00		ldy #$00			ldy 	#0 							; output string
.8d7e		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d80		f0 0a		beq $8d8c			beq 	_LNTStringOut
.8d82						_LNTPushStrLoop:
.8d82		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d84		f0 06		beq $8d8c			beq 	_LNTStringOut
.8d86		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d89		c8		iny				iny
.8d8a		80 f6		bra $8d82			bra 	_LNTPushStrLoop
.8d8c						_LNTStringOut:
.8d8c		98		tya				tya									; output length (chars written).
.8d8d		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d90		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d92		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d95		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d97		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d9a		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d9c		20 1d b4	jsr $b41d			jsr 	StackPushByte
.8d9f		7a		ply				ply
.8da0		60		rts				rts
.8da1						_LNTError:
.8da1		4c 81 a4	jmp $a481			jmp 	SyntaxError
.8da4						LocalPopValue:
.8da4		20 35 b4	jsr $b435			jsr 	StackPopByte
.8da7		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8da9		d0 17		bne $8dc2			bne 	_LPVString
.8dab		20 35 b4	jsr $b435			jsr 	StackPopByte 				; address
.8dae		85 37		sta $37				sta 	zTemp0+1
.8db0		20 35 b4	jsr $b435			jsr 	StackPopByte
.8db3		85 36		sta $36				sta 	zTemp0
.8db5		5a		phy				phy
.8db6		a0 04		ldy #$04			ldy 	#4 							; copy back
.8db8						_LPVNumberCopy:
.8db8		20 35 b4	jsr $b435			jsr 	StackPopByte
.8dbb		91 36		sta ($36),y			sta 	(zTemp0),y
.8dbd		88		dey				dey
.8dbe		10 f8		bpl $8db8			bpl 	_LPVNumberCopy
.8dc0		7a		ply				ply 								; and complete
.8dc1		60		rts				rts
.8dc2						_LPVString:
.8dc2		20 35 b4	jsr $b435			jsr 	StackPopByte 				; address of record copied to zTemp0
.8dc5		85 37		sta $37				sta 	zTemp0+1
.8dc7		20 35 b4	jsr $b435			jsr 	StackPopByte
.8dca		85 36		sta $36				sta 	zTemp0
.8dcc		5a		phy				phy
.8dcd		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8dcf		85 38		sta $38				sta 	zTemp1
.8dd1		a0 01		ldy #$01			ldy 	#1
.8dd3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dd5		85 39		sta $39				sta 	zTemp1+1
.8dd7		20 35 b4	jsr $b435			jsr 	StackPopByte 				; # chars to get => y
.8dda		a8		tay				tay
.8ddb		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ddd		f0 0e		beq $8ded			beq 	_LPVStringCopied
.8ddf		a9 00		lda #$00			lda 	#0 							; NULL on end
.8de1		91 38		sta ($38),y			sta 	(zTemp1),y
.8de3						_LPVStringCopy:
.8de3		88		dey				dey
.8de4		30 07		bmi $8ded			bmi 	_LPVStringCopied
.8de6		20 35 b4	jsr $b435			jsr 	StackPopByte
.8de9		91 38		sta ($38),y			sta 	(zTemp1),y
.8deb		80 f6		bra $8de3			bra 	_LPVStringCopy
.8ded						_LPVStringCopied:
.8ded		fa		plx				plx
.8dee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8def						NewCommand:
.8def		20 f5 8d	jsr $8df5			jsr 	NewProgram 					; does the actual NEW.
.8df2		4c 01 88	jmp $8801			jmp 	WarmStart 					; and warm starts straight away.
.8df5						NewProgram:
.8df5		20 fb a6	jsr $a6fb			jsr 	MemoryNew
.8df8		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dfb		20 35 92	jsr $9235			jsr 	ClearSystem					; clear everything.
.8dfe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8dff						PokeBCommand:
.8dff		a9 01		lda #$01			lda 	#1
.8e01		80 0c		bra $8e0f			bra 	PokeCommand
.8e03						PokeWCommand:
.8e03		a9 02		lda #$02			lda 	#2
.8e05		80 08		bra $8e0f			bra 	PokeCommand
.8e07						PokeLCommand:
.8e07		a9 03		lda #$03			lda 	#3
.8e09		80 04		bra $8e0f			bra 	PokeCommand
.8e0b						PokeDCommand:
.8e0b		a9 04		lda #$04			lda 	#4
.8e0d		80 00		bra $8e0f			bra 	PokeCommand
.8e0f						PokeCommand:
.8e0f		48		pha				pha 								; save count on stack
.8e10		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e12		20 89 a2	jsr $a289			jsr		Evaluate16BitInteger 		; address
.8e15		20 98 93	jsr $9398			jsr 	CheckComma
.8e18		e8		inx				inx
.8e19		20 76 a2	jsr $a276			jsr		EvaluateInteger 			; data
.8e1c		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e1e		85 36		sta $36				sta 	zTemp0
.8e20		a5 60		lda $60				lda 	NSMantissa1
.8e22		85 37		sta $37				sta 	zTemp0+1
.8e24		68		pla				pla 								; count -> zTemp1
.8e25		85 38		sta $38				sta 	zTemp1
.8e27		5a		phy				phy 								; save Y position.
.8e28		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e2a		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e2c						_PCLoop:
.8e2c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e2e		91 36		sta ($36),y			sta 	(zTemp0),y
.8e30		c8		iny				iny 								; next byte to write
.8e31		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e32		18		clc				clc
.8e33		69 08		adc #$08			adc 	#MathStackSize
.8e35		aa		tax				tax
.8e36		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e38		d0 f2		bne $8e2c			bne 	_PCLoop
.8e3a		7a		ply				ply 								; restore position.
.8e3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e3c						CallProcedure:
.8e3c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e3e		b1 30		lda ($30),y			lda 	(codePtr),y
.8e40		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e42		f0 0c		beq $8e50			beq 	_CPEndParam
.8e44						_CPParamLoop:
.8e44		20 4e a2	jsr $a24e			jsr 	EvaluateValue 				; get parameter onto stack
.8e47		e8		inx				inx 								; bump next stack
.8e48		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4a		c8		iny				iny
.8e4b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e4d		f0 f5		beq $8e44			beq 	_CPParamLoop
.8e4f		88		dey				dey 								; unpick.
.8e50						_CPEndParam:
.8e50		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e53		c8		iny				iny									; skip right bracket
.8e54		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e56		20 3e b4	jsr $b43e			jsr 	StackOpen
.8e59		20 83 b4	jsr $b483			jsr 	STKSaveCodePosition 		; save loop position
.8e5c		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e5e		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e60		a5 60		lda $60				lda 	NSMantissa1
.8e62		85 37		sta $37				sta 	zTemp0+1
.8e64		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e66		b2 36		lda ($36)			lda 	(zTemp0)
.8e68		85 30		sta $30				sta 	safePtr
.8e6a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6c		85 31		sta $31				sta 	safePtr+1
.8e6e		c8		iny				iny
.8e6f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e71		85 32		sta $32				sta 	safePtr+2
.8e73		c8		iny				iny
.8e74		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e76		85 33		sta $33				sta 	safePtr+3
.8e78		c8		iny				iny 								; get Y offset -> Y
.8e79		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e7b		a8		tay				tay
.8e7c		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e7e		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e81		f0 13		beq $8e96			beq 	_ParamExit 					; if so, exit.
.8e83						_ParamExtract:
.8e83		ca		dex				dex 								; put a local term on the level before
.8e84		20 3c 8d	jsr $8d3c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e87		20 0d 8c	jsr $8c0d			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e8a		e8		inx				inx 								; advance to next parameter to do.
.8e8b		e8		inx				inx
.8e8c		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e8f		f0 05		beq $8e96			beq 	_ParamExit
.8e91		20 98 93	jsr $9398			jsr 	CheckComma 					; comma seperating parameters
.8e94		80 ed		bra $8e83			bra 	_ParamExtract
.8e96						_ParamExit:
.8e96		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check )
.8e99		60		rts				rts 								; and continue from here
.8e9a						Command_ENDPROC:
.8e9a		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e9c		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e9e		20 6b b4	jsr $b46b			jsr 	StackCheckFrame
.8ea1		20 94 b4	jsr $b494			jsr 	STKLoadCodePosition 		; restore code position
.8ea4		20 5d b4	jsr $b45d			jsr 	StackClose
.8ea7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ea8						Command_Read:
.8ea8		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8eaa		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm
.8ead		b5 50		lda $50,x			lda 	NSStatus,x
.8eaf		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8eb1		f0 4f		beq $8f02			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8eb3		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs 			; swap code and data
.8eb6		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8eb9		d0 25		bne $8ee0			bne 	_CRContinueData  			; forward for the next one.
.8ebb		b2 30		lda ($30)			lda 	(codePtr)
.8ebd		f0 1c		beq $8edb			beq 	_CRNoData
.8ebf						_CRKeepSearching:
.8ebf		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8ec1		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ec3		20 eb 92	jsr $92eb			jsr 	ScanForward
.8ec6		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8ec8		f0 16		beq $8ee0			beq 	_CRHaveData 				; found it
.8eca		18		clc				clc
.8ecb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ecd		65 30		adc $30				adc 	codePtr
.8ecf		85 30		sta $30				sta 	codePtr
.8ed1		90 02		bcc $8ed5			bcc 	_CREExit
.8ed3		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ed5						_CREExit:
.8ed5		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ed7		b2 30		lda ($30)			lda 	(codePtr)
.8ed9		d0 e4		bne $8ebf			bne 	_CRKeepSearching
.8edb						_CRNoData:
.8edb		a9 0b		lda #$0b		lda	#11
.8edd		4c a9 93	jmp $93a9		jmp	ErrorHandler
.8ee0						_CRHaveData:
.8ee0						_CRContinueData:
.8ee0		a2 01		ldx #$01			ldx 	#1
.8ee2		20 4e a2	jsr $a24e			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ee5		ca		dex				dex
.8ee6		20 0d 8c	jsr $8c0d			jsr		AssignVariable 				; do the assignment
.8ee9		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8eec		b1 30		lda ($30),y			lda 	(codePtr),y
.8eee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8ef0		d0 04		bne $8ef6			bne 	_CRSwapBack
.8ef2		c8		iny				iny 								; consume comma
.8ef3		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8ef6						_CRSwapBack:
.8ef6		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs			; swap them back.
.8ef9		b1 30		lda ($30),y			lda 	(codePtr),y
.8efb		c8		iny				iny
.8efc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8efe		f0 a8		beq $8ea8			beq 	Command_Read 				; if so go round again.
.8f00		88		dey				dey 								; unpick get.
.8f01		60		rts				rts
.8f02						_CRSyntax:
.8f02		4c 81 a4	jmp $a481			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f05						RemCommand:
.8f05		b1 30		lda ($30),y			lda 	(codePtr),y
.8f07		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f09		d0 06		bne $8f11			bne 	_RMExit
.8f0b		c8		iny				iny 								; point to offset
.8f0c		98		tya				tya 								; A = offset position
.8f0d		38		sec				sec 								; add size +1 hence SEC
.8f0e		71 30		adc ($30),y			adc 	(codePtr),y
.8f10		a8		tay				tay 								; make current position.
.8f11						_RMExit:
.8f11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f12						Command_REPEAT:
.8f12		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f14		20 3e b4	jsr $b43e			jsr 	StackOpen
.8f17		20 83 b4	jsr $b483			jsr 	STKSaveCodePosition 		; save loop position
.8f1a		60		rts				rts
.8f1b						Command_UNTIL:
.8f1b		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f1d		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f1f		20 6b b4	jsr $b46b			jsr 	StackCheckFrame
.8f22		a2 00		ldx #$00			ldx 	#0
.8f24		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; work out the number
.8f27		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; check if zero
.8f2a		f0 04		beq $8f30			beq 	_CULoopBack 				; if so keep looping
.8f2c		20 5d b4	jsr $b45d			jsr 	StackClose		 			; return
.8f2f		60		rts				rts
.8f30						_CULoopBack:
.8f30		20 94 b4	jsr $b494			jsr 	STKLoadCodePosition 		; loop back
.8f33		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f34						Command_Restore:
.8f34		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs 			; swap code and data
.8f37		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f39		85 30		sta $30				sta 	codePtr
.8f3b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f3d		85 31		sta $31				sta 	codePtr+1
.8f3f		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs 			; put them back
.8f42		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f44		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f47		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f4a		60		rts				rts
.8f4b						SwapDataCodePtrs:
.8f4b		da		phx				phx
.8f4c		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f4e						_SDCPLoop:
.8f4e		b5 30		lda $30,x			lda 	safePtr,x
.8f50		48		pha				pha
.8f51		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f54		95 30		sta $30,x			sta 	safePtr,x
.8f56		68		pla				pla
.8f57		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f5a		ca		dex				dex
.8f5b		10 f1		bpl $8f4e			bpl 	_SDCPLoop
.8f5d		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f60		8c 17 04	sty $0417			sty 	dataPointer+4
.8f63		a8		tay				tay
.8f64		fa		plx				plx
.8f65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f66						EOLCommand:
.8f66		18		clc				clc
.8f67		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f69		65 30		adc $30				adc 	codePtr
.8f6b		85 30		sta $30				sta 	codePtr
.8f6d		90 02		bcc $8f71			bcc 	_CREExit
.8f6f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f71						_CREExit:
.8f71		80 18		bra $8f8b			bra 	RunNewLine
.8f73						CommandRUNOptLoad:
.8f73		b1 30		lda ($30),y			lda 	(codePtr),y
.8f75		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f77		f0 07		beq $8f80			beq 	RunCurrentProgram
.8f79		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f7b		f0 03		beq $8f80			beq 	RunCurrentProgram
.8f7d		20 ed ad	jsr $aded			jsr 	LoadFile 					; load expected name file.
.8f80						RunCurrentProgram:
.8f80		20 35 92	jsr $9235			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f83		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f85		85 30		sta $30				sta 	codePtr
.8f87		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f89		85 31		sta $31				sta 	codePtr+1
.8f8b						RunNewLine:
.8f8b		b2 30		lda ($30)			lda 	(codePtr)
.8f8d		f0 74		beq $9003			beq 	CRNoProgram         		; no then END.
.8f8f		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f91		9a		txs				txs
.8f92						RUNCodePointerLine:
.8f92		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f94						_CRIncMainLoop:
.8f94		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f96		f0 03		beq $8f9b			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f98		20 40 81	jsr $8140			jsr 	ProcessEvents
.8f9b						_NoEvents:
.8f9b		d0 61		bne $8ffe			bne 	_CRBreak
.8f9d		a5 01		lda $01				lda 	1 							; save I/O 0
.8f9f		48		pha				pha
.8fa0		64 01		stz $01				stz 	1 							; access I/O Page 0
.8fa2		38		sec				sec 								; calculate timer - LastTick
.8fa3		ad 59 d6	lda $d659			lda 	$D659
.8fa6		cd 5e 06	cmp $065e			cmp 	LastTick
.8fa9		f0 06		beq $8fb1			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8fab		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8fae		20 6f 82	jsr $826f			jsr 	TickHandler 							; go do the code.
.8fb1						_NoFireTick:
.8fb1		68		pla				pla 								; restore I/O 0
.8fb2		85 01		sta $01				sta 	1
.8fb4						_CRNoBreakCheck:
.8fb4		c8		iny				iny									; next token
.8fb5						_CRMainLoop:
.8fb5		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8fb8		b1 30		lda ($30),y			lda 	(codePtr),y
.8fba		10 10		bpl $8fcc			bpl 	_CRNotKeyword				; not a token.
.8fbc		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8fbe		b0 04		bcs $8fc4			bcs 	_CRIsKeyword
.8fc0		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fc2		b0 34		bcs $8ff8			bcs		_CRSyntaxError
.8fc4						_CRIsKeyword:
.8fc4		c8		iny				iny 								; consume command
.8fc5		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fc6		aa		tax				tax 								; put in X for vector jump
.8fc7		20 fb 8f	jsr $8ffb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fca		80 e9		bra $8fb5			bra 	_CRMainLoop 				; and loop round
.8fcc						_CRNotKeyword:
.8fcc		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fce		f0 c4		beq $8f94			beq 	_CRIncMainLoop
.8fd0		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fd2		90 05		bcc $8fd9			bcc 	_CRNotVariable
.8fd4						_CRGoLet:
.8fd4		20 d4 8b	jsr $8bd4			jsr 	LetCommand
.8fd7		80 dc		bra $8fb5			bra 	_CRMainLoop
.8fd9						_CRNotVariable:
.8fd9		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.8fdb		f0 f7		beq $8fd4			beq 	_CRGoLet
.8fdd		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fdf		f0 f3		beq $8fd4			beq 	_CRGoLet
.8fe1		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fe3		f0 ef		beq $8fd4			beq 	_CRGoLet
.8fe5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fe7		f0 09		beq $8ff2			beq 	_CRGoRem
.8fe9		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8feb		d0 0b		bne $8ff8			bne 	_CRSyntaxError
.8fed		20 4a 86	jsr $864a			jsr 	LabelHere
.8ff0		80 c3		bra $8fb5			bra 	_CRMainLoop
.8ff2						_CRGoRem:
.8ff2		c8		iny				iny
.8ff3		20 05 8f	jsr $8f05			jsr 	RemCommand
.8ff6		80 bd		bra $8fb5			bra 	_CRMainLoop
.8ff8						_CRSyntaxError:
.8ff8		4c 81 a4	jmp $a481			jmp 	SyntaxError
.8ffb						_CRCallVector0:
.8ffb		7c 9a 90	jmp ($909a,x)			jmp 	(VectorSet0,x)
.8ffe						_CRBreak:
.8ffe		a9 01		lda #$01		lda	#1
.9000		4c a9 93	jmp $93a9		jmp	ErrorHandler
.9003						CRNoProgram:
.9003		4c 6a 89	jmp $896a			jmp 	EndCommand
.9006						Shift1Command:
.9006		b1 30		lda ($30),y			lda 	(codePtr),y
.9008		c8		iny				iny
.9009		0a		asl a				asl 	a
.900a		aa		tax				tax
.900b		7c 54 91	jmp ($9154,x)			jmp 	(VectorSet1,x)
.900e						Shift2Command:
.900e		b1 30		lda ($30),y			lda 	(codePtr),y
.9010		c8		iny				iny
.9011		0a		asl a				asl 	a
.9012		aa		tax				tax
.9013		7c a8 91	jmp ($91a8,x)			jmp 	(VectorSet2,x)
.9016						Unused1:
.9016						Unused2:
.9016						Unused3:
.9016						Unused4:
.9016		4c 81 a4	jmp $a481			jmp 	SyntaxError
>9019								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.901a						VectorSetPunc:
>901a		67 96					.word	ShiftLeft                        ; $00 <<
>901c		52 94					.word	BinaryCompareLessEqual           ; $01 <=
>901e		48 94					.word	BinaryCompareNotEqual            ; $02 <>
>9020		81 a4					.word	SyntaxError                      ; $03 !!3
>9022		81 a4					.word	SyntaxError                      ; $04 ><
>9024		5c 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9026		6a 96					.word	ShiftRight                       ; $06 >>
>9028		81 a4					.word	SyntaxError                      ; $07 !!7
>902a		81 a4					.word	SyntaxError                      ; $08 !!8
>902c		81 a4					.word	SyntaxError                      ; $09 !!9
>902e		81 a4					.word	SyntaxError                      ; $0a !!10
>9030		81 a4					.word	SyntaxError                      ; $0b !!11
>9032		81 a4					.word	SyntaxError                      ; $0c !!12
>9034		81 a4					.word	SyntaxError                      ; $0d !!13
>9036		81 a4					.word	SyntaxError                      ; $0e !!14
>9038		81 a4					.word	SyntaxError                      ; $0f !!15
>903a		81 a4					.word	SyntaxError                      ; $10 @
>903c		81 a4					.word	SyntaxError                      ; $11 !!17
>903e		81 a4					.word	SyntaxError                      ; $12 !!18
>9040		81 a4					.word	SyntaxError                      ; $13 [
>9042		13 95					.word	IntegerDivide                    ; $14 \
>9044		81 a4					.word	SyntaxError                      ; $15 ]
>9046		a5 97					.word	EorInteger                       ; $16 ^
>9048		81 a4					.word	SyntaxError                      ; $17 _
>904a		81 a4					.word	SyntaxError                      ; $18 `
>904c		81 a4					.word	SyntaxError                      ; $19 !!25
>904e		81 a4					.word	SyntaxError                      ; $1a !!26
>9050		81 a4					.word	SyntaxError                      ; $1b {
>9052		70 97					.word	OraInteger                       ; $1c |
>9054		81 a4					.word	SyntaxError                      ; $1d }
>9056		81 a4					.word	SyntaxError                      ; $1e ~
>9058		81 a4					.word	SyntaxError                      ; $1f <7F>
>905a		81 a4					.word	SyntaxError                      ; $20
>905c		da 97					.word	WordIndirect                     ; $21 !
>905e		81 a4					.word	SyntaxError                      ; $22 "
>9060		81 a4					.word	SyntaxError                      ; $23 #
>9062		81 a4					.word	SyntaxError                      ; $24 $
>9064		54 95					.word	IntegerModulus                   ; $25 %
>9066		3b 97					.word	AndInteger                       ; $26 &
>9068		81 a4					.word	SyntaxError                      ; $27 '
>906a		81 a4					.word	SyntaxError                      ; $28 (
>906c		81 a4					.word	SyntaxError                      ; $29 )
>906e		c2 95					.word	MulInteger                       ; $2a *
>9070		dd 96					.word	AddInteger                       ; $2b +
>9072		81 a4					.word	SyntaxError                      ; $2c ,
>9074		16 97					.word	SubInteger                       ; $2d -
>9076		81 a4					.word	SyntaxError                      ; $2e .
>9078		94 99					.word	FDivideCommand                   ; $2f /
>907a		81 a4					.word	SyntaxError                      ; $30 0
>907c		81 a4					.word	SyntaxError                      ; $31 1
>907e		81 a4					.word	SyntaxError                      ; $32 2
>9080		81 a4					.word	SyntaxError                      ; $33 3
>9082		81 a4					.word	SyntaxError                      ; $34 4
>9084		81 a4					.word	SyntaxError                      ; $35 5
>9086		81 a4					.word	SyntaxError                      ; $36 6
>9088		81 a4					.word	SyntaxError                      ; $37 7
>908a		81 a4					.word	SyntaxError                      ; $38 8
>908c		81 a4					.word	SyntaxError                      ; $39 9
>908e		81 a4					.word	SyntaxError                      ; $3a :
>9090		81 a4					.word	SyntaxError                      ; $3b ;
>9092		34 94					.word	BinaryCompareLess                ; $3c <
>9094		2a 94					.word	BinaryCompareEqual               ; $3d =
>9096		3e 94					.word	BinaryCompareGreater             ; $3e >
>9098		fc 97					.word	ByteIndirect                     ; $3f ?
.909a						VectorSet0:
>909a		66 8f					.word	EOLCommand                       ; $80 !0:EOF
>909c		06 90					.word	Shift1Command                    ; $81 !1:SH1
>909e		0e 90					.word	Shift2Command                    ; $82 !2:SH2
>90a0		7e 9e					.word	AbsUnary                         ; $83 ABS(
>90a2		8c 9e					.word	AllocUnary                       ; $84 ALLOC(
>90a4		fc 9e					.word	AscUnary                         ; $85 ASC(
>90a6		4d a0					.word	ChrUnary                         ; $86 CHR$(
>90a8		84 ab					.word	UnaryEvent                       ; $87 EVENT(
>90aa		26 94					.word	UnaryFalse                       ; $88 FALSE
>90ac		09 9f					.word	FracUnary                        ; $89 FRAC(
>90ae		9c b2					.word	ChrGet                           ; $8a GET$(
>90b0		81 b2					.word	AscGet                           ; $8b GET(
>90b2		2b b2					.word	UnaryGetDate                     ; $8c GETDATE$(
>90b4		27 b2					.word	UnaryGetTime                     ; $8d GETTIME$(
>90b6		62 aa					.word	UnaryHit                         ; $8e HIT(
>90b8		a3 b2					.word	ChrInkey                         ; $8f INKEY$(
>90ba		91 b2					.word	AscInkey                         ; $90 INKEY(
>90bc		1e 9f					.word	IntUnary                         ; $91 INT(
>90be		0c a0					.word	IsValUnary                       ; $92 ISVAL(
>90c0		5f a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90c2		83 a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90c4		fe af					.word	UnaryJoyB                        ; $95 JOYB(
>90c6		d7 af					.word	UnaryJoyX                        ; $96 JOYX(
>90c8		da af					.word	UnaryJoyY                        ; $97 JOYY(
>90ca		bc b2					.word	KeyDown                          ; $98 KEYDOWN(
>90cc		c2 a1					.word	Unary_Left                       ; $99 LEFT$(
>90ce		2f 9f					.word	LenUnary                         ; $9a LEN(
>90d0		4d 9f					.word	Unary_Max                        ; $9b MAX(
>90d2		e4 a1					.word	Unary_Mid                        ; $9c MID$(
>90d4		49 9f					.word	Unary_Min                        ; $9d MIN(
>90d6		98 9f					.word	Unary_Not                        ; $9e NOT(
>90d8		ab 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90da		b7 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90dc		b3 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90de		af 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90e0		9b b3					.word	UnaryPlaying                     ; $a3 PLAYING(
>90e2		d6 b2					.word	Unary_Random                     ; $a4 RANDOM(
>90e4		cf a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90e6		f0 b2					.word	Unary_Rnd                        ; $a6 RND(
>90e8		e4 9f					.word	SgnUnary                         ; $a7 SGN(
>90ea		01 a1					.word	SpcUnary                         ; $a8 SPC(
>90ec		1c a1					.word	Unary_Str                        ; $a9 STR$(
>90ee		41 ab					.word	TileRead                         ; $aa TILE(
>90f0		0e b2					.word	UnaryTimer                       ; $ab TIMER(
>90f2		1b 94					.word	UnaryTrue                        ; $ac TRUE
>90f4		02 a0					.word	ValUnary                         ; $ad VAL(
>90f6		6d 89					.word	ForCommand                       ; $ae FOR
>90f8		b0 8a					.word	IfCommand                        ; $af IF
>90fa		16 90					.word	Unused1                          ; $b0 PROC
>90fc		12 8f					.word	Command_REPEAT                   ; $b1 REPEAT
>90fe		61 93					.word	Command_WHILE                    ; $b2 WHILE
>9100		d9 8a					.word	EndIf                            ; $b3 ENDIF
>9102		9a 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>9104		1f 8a					.word	NextCommand                      ; $b5 NEXT
>9106		16 90					.word	Unused4                          ; $b6 THEN
>9108		1b 8f					.word	Command_UNTIL                    ; $b7 UNTIL
>910a		82 93					.word	Command_WEND                     ; $b8 WEND
>910c		81 a4					.word	SyntaxError                      ; $b9 AT
>910e		81 a4					.word	SyntaxError                      ; $ba BY
>9110		70 88					.word	CallCommand                      ; $bb CALL
>9112		50 a7					.word	CircleCommand                    ; $bc CIRCLE
>9114		81 a4					.word	SyntaxError                      ; $bd CLEAR
>9116		81 a4					.word	SyntaxError                      ; $be COLOR
>9118		81 a4					.word	SyntaxError                      ; $bf COLOUR
>911a		a5 88					.word	Command_Data                     ; $c0 DATA
>911c		ad 88					.word	DimCommand                       ; $c1 DIM
>911e		16 90					.word	Unused3                          ; $c2 DOWNTO
>9120		d2 8a					.word	ElseCode                         ; $c3 ELSE
>9122		81 a4					.word	SyntaxError                      ; $c4 FROM
>9124		35 aa					.word	GfxCommand                       ; $c5 GFX
>9126		81 a4					.word	SyntaxError                      ; $c6 HERE
>9128		79 a7					.word	ImageCommand                     ; $c7 IMAGE
>912a		d4 8b					.word	LetCommand                       ; $c8 LET
>912c		cb a7					.word	LineCommand                      ; $c9 LINE
>912e		2e 8d					.word	Command_LOCAL                    ; $ca LOCAL
>9130		10 b0					.word	MCCommand                        ; $cb MEMCOPY
>9132		81 a4					.word	SyntaxError                      ; $cc OFF
>9134		81 a4					.word	SyntaxError                      ; $cd ON
>9136		81 a4					.word	SyntaxError                      ; $ce OUTLINE
>9138		86 aa					.word	PaletteCommand                   ; $cf PALETTE
>913a		c4 a7					.word	PlotCommand                      ; $d0 PLOT
>913c		ff 8d					.word	PokeBCommand                     ; $d1 POKE
>913e		0b 8e					.word	PokeDCommand                     ; $d2 POKED
>9140		07 8e					.word	PokeLCommand                     ; $d3 POKEL
>9142		03 8e					.word	PokeWCommand                     ; $d4 POKEW
>9144		a8 8e					.word	Command_Read                     ; $d5 READ
>9146		4c a7					.word	RectangleCommand                 ; $d6 RECT
>9148		05 8f					.word	RemCommand                       ; $d7 REM
>914a		81 a4					.word	SyntaxError                      ; $d8 SOLID
>914c		b7 b3					.word	SoundCommand                     ; $d9 SOUND
>914e		5b a7					.word	SpriteCommand                    ; $da SPRITE
>9150		95 a7					.word	TextCommand                      ; $db TEXT
>9152		16 90					.word	Unused2                          ; $dc TO
.9154						VectorSet1:
>9154		81 a4					.word	SyntaxError                      ; $80 !0:EOF
>9156		81 a4					.word	SyntaxError                      ; $81 !1:SH1
>9158		81 a4					.word	SyntaxError                      ; $82 !2:SH2
>915a		44 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>915c		60 88					.word	AssertCommand                    ; $84 ASSERT
>915e		26 a9					.word	BitmapCtrl                       ; $85 BITMAP
>9160		e1 ab					.word	Command_BLoad                    ; $86 BLOAD
>9162		8d ac					.word	Command_BSave                    ; $87 BSAVE
>9164		5c ab					.word	ClearScreen                      ; $88 CLS
>9166		df 8a					.word	Command_CPrint                   ; $89 CPRINT
>9168		10 ad					.word	Command_Dir                      ; $8a DIR
>916a		e0 ad					.word	Command_Drive                    ; $8b DRIVE
>916c		6a 89					.word	EndCommand                       ; $8c END
>916e		6f b3					.word	Explode                          ; $8d EXPLODE
>9170		81 a4					.word	SyntaxError                      ; $8e GO
>9172		78 8a					.word	Command_GOSUB                    ; $8f GOSUB
>9174		96 8a					.word	GotoCommand                      ; $90 GOTO
>9176		81 a4					.word	SyntaxError                      ; $91 HIMEM
>9178		da 8a					.word	Command_Input                    ; $92 INPUT
>917a		24 8c					.word	Command_List                     ; $93 LIST
>917c		e7 ad					.word	Command_Load                     ; $94 LOAD
>917e		24 b1					.word	MouseDeltaStatus                 ; $95 MDELTA
>9180		20 b1					.word	MouseStatus                      ; $96 MOUSE
>9182		ef 8d					.word	NewCommand                       ; $97 NEW
>9184		4b b3					.word	PingCommand                      ; $98 PING
>9186		e6 8a					.word	Command_Print                    ; $99 PRINT
>9188		34 8f					.word	Command_Restore                  ; $9a RESTORE
>918a		88 8a					.word	Command_RETURN                   ; $9b RETURN
>918c		73 8f					.word	CommandRUNOptLoad                ; $9c RUN
>918e		b9 ae					.word	Command_Save                     ; $9d SAVE
>9190		9a b1					.word	CommandSetDate                   ; $9e SETDATE
>9192		9e b1					.word	CommandSetTime                   ; $9f SETTIME
>9194		63 b3					.word	ShootCommand                     ; $a0 SHOOT
>9196		80 a9					.word	SpritesCtrl                      ; $a1 SPRITES
>9198		30 92					.word	StopCommand                      ; $a2 STOP
>919a		c6 aa					.word	TileCommand                      ; $a3 TILE
>919c		a8 a9					.word	TilesCtrl                        ; $a4 TILES
>919e		40 af					.word	Command_Try                      ; $a5 TRY
>91a0		7d af					.word	Command_VERIFY                   ; $a6 VERIFY
>91a2		6d ab					.word	XGoCommand                       ; $a7 XGO
>91a4		64 ab					.word	XLoadCommand                     ; $a8 XLOAD
>91a6		57 b3					.word	ZapCommand                       ; $a9 ZAP
.91a8						VectorSet2:
>91a8		81 a4					.word	SyntaxError                      ; $80 !0:EOF
>91aa		81 a4					.word	SyntaxError                      ; $81 !1:SH1
>91ac		81 a4					.word	SyntaxError                      ; $82 !2:SH2
>91ae		40 a3					.word	Assemble_adc                     ; $83 ADC
>91b0		38 a3					.word	Assemble_and                     ; $84 AND
>91b2		54 a3					.word	Assemble_asl                     ; $85 ASL
>91b4		be a3					.word	Assemble_bcc                     ; $86 BCC
>91b6		c2 a3					.word	Assemble_bcs                     ; $87 BCS
>91b8		ca a3					.word	Assemble_beq                     ; $88 BEQ
>91ba		81 a3					.word	Assemble_bit                     ; $89 BIT
>91bc		b2 a3					.word	Assemble_bmi                     ; $8a BMI
>91be		c6 a3					.word	Assemble_bne                     ; $8b BNE
>91c0		ae a3					.word	Assemble_bpl                     ; $8c BPL
>91c2		ce a3					.word	Assemble_bra                     ; $8d BRA
>91c4		d2 a3					.word	Assemble_brk                     ; $8e BRK
>91c6		b6 a3					.word	Assemble_bvc                     ; $8f BVC
>91c8		ba a3					.word	Assemble_bvs                     ; $90 BVS
>91ca		da a3					.word	Assemble_clc                     ; $91 CLC
>91cc		2e a4					.word	Assemble_cld                     ; $92 CLD
>91ce		ee a3					.word	Assemble_cli                     ; $93 CLI
>91d0		1e a4					.word	Assemble_clv                     ; $94 CLV
>91d2		4c a3					.word	Assemble_cmp                     ; $95 CMP
>91d4		95 a3					.word	Assemble_cpx                     ; $96 CPX
>91d6		90 a3					.word	Assemble_cpy                     ; $97 CPY
>91d8		72 a3					.word	Assemble_dec                     ; $98 DEC
>91da		2a a4					.word	Assemble_dex                     ; $99 DEX
>91dc		06 a4					.word	Assemble_dey                     ; $9a DEY
>91de		3c a3					.word	Assemble_eor                     ; $9b EOR
>91e0		77 a3					.word	Assemble_inc                     ; $9c INC
>91e2		3a a4					.word	Assemble_inx                     ; $9d INX
>91e4		26 a4					.word	Assemble_iny                     ; $9e INY
>91e6		a9 a3					.word	Assemble_jmp                     ; $9f JMP
>91e8		a4 a3					.word	Assemble_jsr                     ; $a0 JSR
>91ea		48 a3					.word	Assemble_lda                     ; $a1 LDA
>91ec		6d a3					.word	Assemble_ldx                     ; $a2 LDX
>91ee		8b a3					.word	Assemble_ldy                     ; $a3 LDY
>91f0		5e a3					.word	Assemble_lsr                     ; $a4 LSR
>91f2		3e a4					.word	Assemble_nop                     ; $a5 NOP
>91f4		34 a3					.word	Assemble_ora                     ; $a6 ORA
>91f6		ea a3					.word	Assemble_pha                     ; $a7 PHA
>91f8		d6 a3					.word	Assemble_php                     ; $a8 PHP
>91fa		32 a4					.word	Assemble_phx                     ; $a9 PHX
>91fc		f2 a3					.word	Assemble_phy                     ; $aa PHY
>91fe		fa a3					.word	Assemble_pla                     ; $ab PLA
>9200		de a3					.word	Assemble_plp                     ; $ac PLP
>9202		46 a4					.word	Assemble_plx                     ; $ad PLX
>9204		02 a4					.word	Assemble_ply                     ; $ae PLY
>9206		59 a3					.word	Assemble_rol                     ; $af ROL
>9208		63 a3					.word	Assemble_ror                     ; $b0 ROR
>920a		e6 a3					.word	Assemble_rti                     ; $b1 RTI
>920c		f6 a3					.word	Assemble_rts                     ; $b2 RTS
>920e		50 a3					.word	Assemble_sbc                     ; $b3 SBC
>9210		e2 a3					.word	Assemble_sec                     ; $b4 SEC
>9212		42 a4					.word	Assemble_sed                     ; $b5 SED
>9214		fe a3					.word	Assemble_sei                     ; $b6 SEI
>9216		44 a3					.word	Assemble_sta                     ; $b7 STA
>9218		36 a4					.word	Assemble_stp                     ; $b8 STP
>921a		68 a3					.word	Assemble_stx                     ; $b9 STX
>921c		86 a3					.word	Assemble_sty                     ; $ba STY
>921e		7c a3					.word	Assemble_stz                     ; $bb STZ
>9220		1a a4					.word	Assemble_tax                     ; $bc TAX
>9222		16 a4					.word	Assemble_tay                     ; $bd TAY
>9224		9f a3					.word	Assemble_trb                     ; $be TRB
>9226		9a a3					.word	Assemble_tsb                     ; $bf TSB
>9228		22 a4					.word	Assemble_tsx                     ; $c0 TSX
>922a		0a a4					.word	Assemble_txa                     ; $c1 TXA
>922c		12 a4					.word	Assemble_txs                     ; $c2 TXS
>922e		0e a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9230						StopCommand:
.9230		a9 08		lda #$08		lda	#8
.9232		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9235						ClearSystem:
.9235		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9237		85 36		sta $36				sta 	0+zTemp0
.9239		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.923b		85 37		sta $37				sta 	1+zTemp0
.923d						_ClearZeroLoop:
.923d		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.923f		f0 24		beq $9265			beq 	_ClearZeroEnd
.9241		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.9243		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9245						_ClearOneVariable:
.9245		91 36		sta ($36),y			sta 	(zTemp0),y
.9247		c8		iny				iny
.9248		c0 08		cpy #$08			cpy 	#8
.924a		d0 f9		bne $9245			bne 	_ClearOneVariable
.924c		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.924e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9250		c9 18		cmp #$18			cmp 	#NSTProcedure
.9252		d0 04		bne $9258			bne 	_ClearNotProcedure
.9254		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9256		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9258						_ClearNotProcedure:
.9258		18		clc				clc 								; go to the next variable
.9259		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.925b		65 36		adc $36				adc 	zTemp0
.925d		85 36		sta $36				sta 	zTemp0
.925f		90 dc		bcc $923d			bcc 	_ClearZeroLoop
.9261		e6 37		inc $37				inc 	zTemp0+1
.9263		80 d8		bra $923d			bra 	_ClearZeroLoop
.9265						_ClearZeroEnd:
.9265		18		clc				clc
.9266		a5 36		lda $36				lda 	zTemp0
.9268		69 01		adc #$01			adc 	#1
.926a		8d 08 04	sta $0408			sta 	lowMemPtr
.926d		a5 37		lda $37				lda 	zTemp0+1
.926f		69 00		adc #$00			adc 	#0
.9271		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9274		20 a4 b4	jsr $b4a4			jsr 	StackReset
.9277		20 0a b5	jsr $b50a			jsr 	StringSystemInitialise
.927a		20 93 92	jsr $9293			jsr 	ProcedureScan
.927d		20 34 8f	jsr $8f34			jsr 	Command_Restore
.9280		9c 1a 04	stz $041a			stz 	AssemblerAddress
.9283		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9286		9c 1c 04	stz $041c			stz 	AssemblerControl
.9289		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.928c		20 e9 9e	jsr $9ee9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.928f		20 0f a9	jsr $a90f			jsr 	ResetBitmapSpritesTiles
.9292		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9293						ProcedureScan:
.9293		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs 			; swap code and data
.9296		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9298		85 30		sta $30				sta 	codePtr
.929a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.929c		85 31		sta $31				sta 	codePtr+1
.929e						_PSLoop:
.929e		b2 30		lda ($30)			lda 	(codePtr)
.92a0		f0 42		beq $92e4			beq 	_PSExit
.92a2		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.92a4		b1 30		lda ($30),y			lda 	(codePtr),y
.92a6		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.92a8		d0 2d		bne $92d7			bne 	_PSNext
.92aa		c8		iny				iny 								; get the address of the record to zTemp0 and
.92ab		b1 30		lda ($30),y			lda 	(codePtr),y
.92ad		29 c0		and #$c0			and 	#$C0
.92af		c9 40		cmp #$40			cmp 	#$40
.92b1		d0 35		bne $92e8			bne 	_PSSyntax
.92b3		b1 30		lda ($30),y			lda 	(codePtr),y
.92b5		18		clc				clc
.92b6		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92b8		85 37		sta $37				sta 	zTemp0+1
.92ba		c8		iny				iny 								; LSB
.92bb		b1 30		lda ($30),y			lda 	(codePtr),y
.92bd		85 36		sta $36				sta 	zTemp0
.92bf		c8		iny				iny 								; character after variable call.
.92c0		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92c1		a0 07		ldy #$07			ldy 	#7
.92c3		91 36		sta ($36),y			sta 	(zTemp0),y
.92c5		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92c7		a0 02		ldy #$02			ldy 	#2
.92c9		91 36		sta ($36),y			sta 	(zTemp0),y
.92cb		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92cd						_PSCopy:
.92cd		b5 30		lda $30,x			lda 	safePtr,x
.92cf		c8		iny				iny
.92d0		91 36		sta ($36),y			sta 	(zTemp0),y
.92d2		e8		inx				inx
.92d3		e0 04		cpx #$04			cpx 	#4
.92d5		d0 f6		bne $92cd			bne 	_PSCopy
.92d7						_PSNext:
.92d7		18		clc				clc
.92d8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92da		65 30		adc $30				adc 	codePtr
.92dc		85 30		sta $30				sta 	codePtr
.92de		90 02		bcc $92e2			bcc 	_CREExit
.92e0		e6 31		inc $31				inc 	codePtr+1 					; carry
.92e2						_CREExit:
.92e2		80 ba		bra $929e			bra 	_PSLoop
.92e4						_PSExit:
.92e4		20 4b 8f	jsr $8f4b			jsr 	SwapDataCodePtrs 			; swap code and data
.92e7		60		rts				rts
.92e8						_PSSyntax:
.92e8		4c 81 a4	jmp $a481			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92eb						ScanForward:
.92eb		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92ed		86 37		stx $37				stx 	zTemp0+1
.92ef		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92f1						_ScanLoop:
.92f1		b1 30		lda ($30),y			lda 	(codePtr),y
.92f3		c8		iny				iny
.92f4		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92f6		d0 0e		bne $9306			bne 	_ScanGoNext
.92f8		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92fa		f0 04		beq $9300			beq 	_ScanMatch
.92fc		c5 37		cmp $37				cmp 	zTemp0+1
.92fe		d0 06		bne $9306			bne 	_ScanGoNext
.9300						_ScanMatch:
.9300		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9302		d0 01		bne $9305			bne 	_ScanNotEndEOL
.9304		88		dey				dey
.9305						_ScanNotEndEOL:
.9305		60		rts				rts
.9306						_ScanGoNext:
.9306		20 0b 93	jsr $930b			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9309		80 e6		bra $92f1			bra 	_ScanLoop
.930b						ScanForwardOne:
.930b		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.930d		90 3e		bcc $934d			bcc 	_SFWExit
.930f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9311		90 18		bcc $932b			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9313		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9315		b0 2f		bcs $9346			bcs 	_ScanSkipData
.9317		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9319		90 32		bcc $934d			bcc 	_SFWExit 					; if not, ordinary keywords.
.931b		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.931d		b0 2e		bcs $934d			bcs 	_SFWExit
.931f		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9321		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9323		b0 28		bcs $934d			bcs 	_SFWExit
.9325		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9327		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9329		80 22		bra $934d			bra 	_SFWExit
.932b						_ScanSkipOne:
.932b		c8		iny				iny 								; consume the extra one.
.932c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.932e		d0 1d		bne $934d			bne 	_SFWExit
.9330		18		clc				clc
.9331		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9333		65 30		adc $30				adc 	codePtr
.9335		85 30		sta $30				sta 	codePtr
.9337		90 02		bcc $933b			bcc 	_CREExit
.9339		e6 31		inc $31				inc 	codePtr+1 					; carry
.933b						_CREExit:
.933b		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.933d		b2 30		lda ($30)			lda 	(codePtr)
.933f		d0 0c		bne $934d			bne 	_SFWExit 					; if not zero, more to scan
.9341		a9 13		lda #$13		lda	#19
.9343		4c a9 93	jmp $93a9		jmp	ErrorHandler
.9346						_ScanSkipData:
.9346		88		dey				dey 								; point at data token
.9347		c8		iny				iny 								; point to offset
.9348		98		tya				tya 								; A = offset position
.9349		38		sec				sec 								; add size +1 hence SEC
.934a		71 30		adc ($30),y			adc 	(codePtr),y
.934c		a8		tay				tay 								; make current position.
.934d						_SFWExit:
.934d		60		rts				rts
.934e						ScanGetCurrentLineStep:
.934e		64 38		stz $38				stz 	zTemp1
.9350		a0 03		ldy #$03			ldy 	#3
.9352						_SGCLSLoop:
.9352		b1 30		lda ($30),y			lda 	(codePtr),y
.9354		c8		iny				iny
.9355		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9357		f0 05		beq $935e			beq 	_SGCLSExit
.9359		20 0b 93	jsr $930b			jsr 	ScanForwardOne
.935c		80 f4		bra $9352			bra 	_SGCLSLoop
.935e						_SGCLSExit:
.935e		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9360		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9361						Command_WHILE:
.9361		5a		phy				phy 								; save position of the test
.9362		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9364		20 57 a2	jsr $a257			jsr 	EvaluateNumber
.9367		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; check if zero
.936a		f0 0e		beq $937a			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.936c		98		tya				tya 								; position *after* test.
.936d		7a		ply				ply 								; restore position before test, at WHILE
.936e		88		dey				dey 								; so we execute the WHILE command again.
.936f		48		pha				pha 								; push after test on the stack
.9370		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9372		20 3e b4	jsr $b43e			jsr 	StackOpen
.9375		20 83 b4	jsr $b483			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9378		7a		ply				ply 								; restore the position *after* the test
.9379		60		rts				rts
.937a						_WHExitLoop:
.937a		68		pla				pla 								; throw post loop position
.937b		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.937d		aa		tax				tax
.937e		20 eb 92	jsr $92eb			jsr 	ScanForward
.9381		60		rts				rts
.9382						Command_WEND:
.9382		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9384		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9386		20 6b b4	jsr $b46b			jsr 	StackCheckFrame
.9389		20 94 b4	jsr $b494			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.938c		20 5d b4	jsr $b45d			jsr 	StackClose		 			; erase the frame
.938f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9390						CheckRightBracket:
.9390		b1 30		lda ($30),y			lda 	(codePtr),y
.9392		c8		iny				iny
.9393		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9395		d0 0f		bne $93a6			bne 	CNAFail
.9397		60		rts				rts
.9398						CheckComma:
.9398		b1 30		lda ($30),y			lda 	(codePtr),y
.939a		c8		iny				iny
.939b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.939d		d0 07		bne $93a6			bne 	CNAFail
.939f		60		rts				rts
.93a0						CheckNextA:
.93a0		d1 30		cmp ($30),y			cmp 	(codePtr),y
.93a2		d0 02		bne $93a6			bne 	CNAFail
.93a4		c8		iny				iny 								; skip character
.93a5		60		rts				rts 								; and exit
.93a6						CNAFail:
.93a6		4c 81 a4	jmp $a481			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.93a9						ErrorHandler:
.93a9		48		pha				pha 								; save error #
.93aa		a8		tay				tay 								; find the error text
.93ab		f0 4e		beq $93fb			beq 	_EHEnd
.93ad		a2 00		ldx #$00			ldx 	#0
.93af		a9 9a		lda #$9a			lda 	#((ErrorText) & $FF)
.93b1		85 36		sta $36				sta 	0+zTemp0
.93b3		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.93b5		85 37		sta $37				sta 	1+zTemp0
.93b7						_EHFind:
.93b7		88		dey				dey 								; keep looking through text
.93b8		f0 0e		beq $93c8			beq 	_EHFound
.93ba						_EHFindZero:
.93ba		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93bc		e6 36		inc $36				inc 	zTemp0
.93be		d0 02		bne $93c2			bne 	_EHFNoCarry
.93c0		e6 37		inc $37				inc 	zTemp0+1
.93c2						_EHFNoCarry:
.93c2		c9 00		cmp #$00			cmp 	#0
.93c4		d0 f4		bne $93ba			bne 	_EHFindZero
.93c6		80 ef		bra $93b7			bra 	_EHFind
.93c8						_EHFound:
.93c8		a5 36		lda $36				lda 	zTemp0 						; print message
.93ca		a6 37		ldx $37				ldx 	zTemp0+1
.93cc		20 08 94	jsr $9408			jsr 	PrintStringXA
.93cf		68		pla				pla  								; check if error is 'open structure'
.93d0		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93d2		f0 22		beq $93f6			beq 	_EHCREnd
.93d4		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93d6		b1 30		lda ($30),y			lda 	(codePtr),y
.93d8		d0 05		bne $93df			bne 	_EHAtMsg
.93da		c8		iny				iny
.93db		b1 30		lda ($30),y			lda 	(codePtr),y
.93dd		f0 17		beq $93f6			beq 	_EHCREnd
.93df						_EHAtMsg:
.93df		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93e1		a9 fe		lda #$fe			lda 	#_AtMsg & $FF
.93e3		20 08 94	jsr $9408			jsr 	PrintStringXA
.93e6		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93e8		b1 30		lda ($30),y			lda 	(codePtr),y
.93ea		48		pha				pha
.93eb		c8		iny				iny
.93ec		b1 30		lda ($30),y			lda 	(codePtr),y
.93ee		aa		tax				tax
.93ef		68		pla				pla
.93f0		20 1e 98	jsr $981e			jsr 	ConvertInt16 				; convert XA to string
.93f3		20 08 94	jsr $9408			jsr 	PrintStringXA 				; and print it.
.93f6						_EHCREnd:
.93f6		a9 0d		lda #$0d			lda 	#13 						; new line
.93f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93fb						_EHEnd:
.93fb		4c 01 88	jmp $8801			jmp 	WarmStart
>93fe		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9406		20 00
.9408						PrintStringXA:
.9408		5a		phy				phy
.9409		86 37		stx $37				stx 	zTemp0+1
.940b		85 36		sta $36				sta 	zTemp0
.940d		a0 00		ldy #$00			ldy 	#0
.940f						_PSXALoop:
.940f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9411		f0 06		beq $9419			beq 	_PSXAExit
.9413		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9416		c8		iny				iny
.9417		80 f6		bra $940f			bra 	_PSXALoop
.9419						_PSXAExit:
.9419		7a		ply				ply
.941a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.941b						UnaryTrue:
.941b		fa		plx				plx
.941c						ReturnTrue:
.941c		a9 01		lda #$01			lda 	#1  						; set to 1
.941e		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.9421		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9423		95 50		sta $50,x			sta 	NSStatus,x
.9425		60		rts				rts
.9426						UnaryFalse:
.9426		fa		plx				plx
.9427						ReturnFalse:
.9427		4c 09 a3	jmp $a309			jmp 	NSMSetZero 					; set it all to zero
.942a						BinaryCompareEqual:
.942a		fa		plx				plx
.942b		20 66 94	jsr $9466			jsr 	CompareBaseCode
.942e		c9 00		cmp #$00			cmp 	#0
.9430		f0 ea		beq $941c			beq 	ReturnTrue
.9432		80 f3		bra $9427			bra 	ReturnFalse
.9434						BinaryCompareLess:
.9434		fa		plx				plx
.9435		20 66 94	jsr $9466			jsr 	CompareBaseCode
.9438		c9 ff		cmp #$ff			cmp 	#$FF
.943a		f0 e0		beq $941c			beq 	ReturnTrue
.943c		80 e9		bra $9427			bra 	ReturnFalse
.943e						BinaryCompareGreater:
.943e		fa		plx				plx
.943f		20 66 94	jsr $9466			jsr 	CompareBaseCode
.9442		c9 01		cmp #$01			cmp 	#1
.9444		f0 d6		beq $941c			beq 	ReturnTrue
.9446		80 df		bra $9427			bra 	ReturnFalse
.9448						BinaryCompareNotEqual:
.9448		fa		plx				plx
.9449		20 66 94	jsr $9466			jsr 	CompareBaseCode
.944c		c9 00		cmp #$00			cmp 	#0
.944e		d0 cc		bne $941c			bne 	ReturnTrue
.9450		80 d5		bra $9427			bra 	ReturnFalse
.9452						BinaryCompareLessEqual:
.9452		fa		plx				plx
.9453		20 66 94	jsr $9466			jsr 	CompareBaseCode
.9456		c9 01		cmp #$01			cmp 	#1
.9458		d0 c2		bne $941c			bne 	ReturnTrue
.945a		80 cb		bra $9427			bra 	ReturnFalse
.945c						BinaryCompareGreaterEqual:
.945c		fa		plx				plx
.945d		20 66 94	jsr $9466			jsr 	CompareBaseCode
.9460		c9 ff		cmp #$ff			cmp 	#$FF
.9462		d0 b8		bne $941c			bne 	ReturnTrue
.9464		80 c1		bra $9427			bra 	ReturnFalse
.9466						CompareBaseCode:
.9466		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; make both values if references.
.9469		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.946b		15 51		ora $51,x			ora 	NSStatus+1,x
.946d		29 10		and #$10			and 	#NSTString
.946f		d0 37		bne $94a8			bne 	_CBCString 					; if so do string code, which will check if both.
.9471		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9473		15 79		ora $79,x			ora 	NSExponent+1,x
.9475		d0 34		bne $94ab			bne 	_CBCFloat
.9477		b5 50		lda $50,x			lda 	NSStatus,x
.9479		15 51		ora $51,x			ora 	NSStatus+1,x
.947b		29 08		and #$08			and 	#NSTFloat
.947d		d0 2c		bne $94ab			bne 	_CBCFloat
.947f		20 ae 94	jsr $94ae			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9482		e8		inx				inx
.9483		20 ae 94	jsr $94ae			jsr 	CompareFixMinusZero
.9486		ca		dex				dex
.9487		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9489		55 51		eor $51,x			eor 	NSStatus+1,x
.948b		10 0a		bpl $9497			bpl 	_CDCSameSign
.948d		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.948f		30 14		bmi $94a5			bmi 	_CBCLess 					; return $FF
.9491						_CBCGreater:
.9491		a9 01		lda #$01			lda 	#1
.9493		60		rts				rts
.9494						_CBCEqual:
.9494		a9 00		lda #$00			lda 	#0
.9496		60		rts				rts
.9497						_CDCSameSign:
.9497		20 c3 96	jsr $96c3			jsr 	SubTopTwoStack 				; unsigned subtract
.949a		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; or the mantissa together
.949d		f0 f5		beq $9494			beq 	_CBCEqual 					; -0 == 0
.949f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.94a1		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.94a3		10 ec		bpl $9491			bpl 	_CBCGreater
.94a5						_CBCLess:
.94a5		a9 ff		lda #$ff			lda 	#$FF
.94a7		60		rts				rts
.94a8						_CBCString:
.94a8		4c 34 96	jmp $9634			jmp 	CompareStrings
.94ab						_CBCFloat:
.94ab		4c 7e 99	jmp $997e			jmp 	CompareFloat
.94ae						CompareFixMinusZero:
.94ae		20 2b a3	jsr $a32b			jsr 	NSMIsZero
.94b1		d0 02		bne $94b5			bne 	_CFXMZNotZero
.94b3		74 50		stz $50,x			stz 	NSStatus,x
.94b5						_CFXMZNotZero:
.94b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94b6						StringConcat:
.94b6		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.94b8		35 51		and $51,x			and 	NSStatus+1,x
.94ba		29 18		and #$18			and 	#NSBTypeMask
.94bc		c9 10		cmp #$10			cmp 	#NSTString
.94be		d0 50		bne $9510			bne		_SCType
.94c0		64 38		stz $38				stz 	zTemp1 						; counting total length
.94c2		e8		inx				inx
.94c3		20 e1 94	jsr $94e1			jsr 	_SCSetupZ0 					; setup for second
.94c6		20 ea 94	jsr $94ea			jsr 	_SCLengthZ0 				; length for second
.94c9		ca		dex				dex
.94ca		20 e1 94	jsr $94e1			jsr 	_SCSetupZ0 					; setup for first
.94cd		20 ea 94	jsr $94ea			jsr 	_SCLengthZ0 				; length for first
.94d0		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94d2		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.94d5		20 01 95	jsr $9501			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94d8		e8		inx				inx
.94d9		20 e1 94	jsr $94e1			jsr 	_SCSetupZ0 					; copy second out
.94dc		20 01 95	jsr $9501			jsr 	_SCCopy
.94df		ca		dex				dex
.94e0		60		rts				rts
.94e1						_SCSetupZ0:
.94e1		b5 58		lda $58,x			lda 	NSMantissa0,x
.94e3		85 36		sta $36				sta 	zTemp0
.94e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.94e7		85 37		sta $37				sta 	zTemp0+1
.94e9		60		rts				rts
.94ea						_SCLengthZ0:
.94ea		5a		phy				phy
.94eb		a0 00		ldy #$00			ldy 	#0
.94ed						_SCLenLoop:
.94ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.94ef		f0 0e		beq $94ff			beq 	_SCLExit
.94f1		c8		iny				iny
.94f2		e6 38		inc $38				inc 	zTemp1
.94f4		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94f6		c9 fd		cmp #$fd			cmp 	#253
.94f8		d0 f3		bne $94ed			bne		_SCLenLoop
.94fa		a9 09		lda #$09		lda	#9
.94fc		4c a9 93	jmp $93a9		jmp	ErrorHandler
.94ff						_SCLExit:
.94ff		7a		ply				ply
.9500		60		rts				rts
.9501						_SCCopy:
.9501		5a		phy				phy
.9502		a0 00		ldy #$00			ldy 	#0
.9504						_SCCopyLoop:
.9504		b1 36		lda ($36),y			lda 	(zTemp0),y
.9506		f0 06		beq $950e			beq 	_SCCExit
.9508		20 67 b5	jsr $b567			jsr 	StringTempWrite
.950b		c8		iny				iny
.950c		80 f6		bra $9504			bra 	_SCCopyLoop
.950e						_SCCExit:
.950e		7a		ply				ply
.950f		60		rts				rts
.9510						_SCType:
.9510		4c 8b a4	jmp $a48b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9513						IntegerDivide:
.9513		fa		plx				plx
.9514		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9516		15 51		ora $51,x			ora 	NSStatus+1,x
.9518		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9519		0a		asl a				asl 	a
.951a		10 05		bpl $9521			bpl 	_NotRef
.951c		48		pha				pha
.951d		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9520		68		pla				pla
.9521						_NotRef:
.9521		0a		asl a				asl 	a
.9522		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9524		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9526		15 79		ora $79,x			ora 	NSExponent+1,x
.9528		f0 03		beq $952d			beq 	_IntegerCode 				; if clear, then we have two integers
.952a		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.952d						_IntegerCode:
.952d		20 47 95	jsr $9547			jsr 	CheckDivideZero 			; do div zero check
.9530		20 79 95	jsr $9579			jsr 	Int32Divide 				; do the division
.9533		20 2a 96	jsr $962a			jsr 	CalculateSign 				; calculate result sign
.9536						NSMCopyPlusTwoToZero:
.9536		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9538		95 58		sta $58,x			sta 	NSMantissa0,x
.953a		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.953c		95 60		sta $60,x			sta 	NSMantissa1,x
.953e		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9540		95 68		sta $68,x			sta 	NSMantissa2,x
.9542		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9544		95 70		sta $70,x			sta 	NSMantissa3,x
.9546		60		rts				rts
.9547						CheckDivideZero:
.9547		e8		inx				inx
.9548		20 2b a3	jsr $a32b			jsr 	NSMIsZero
.954b		f0 02		beq $954f			beq 	_CDVError
.954d		ca		dex				dex
.954e		60		rts				rts
.954f						_CDVError:
.954f		a9 03		lda #$03		lda	#3
.9551		4c a9 93	jmp $93a9		jmp	ErrorHandler
.9554						IntegerModulus:
.9554		fa		plx				plx
.9555		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9557		15 51		ora $51,x			ora 	NSStatus+1,x
.9559		0a		asl a				asl 	a 							; shift reference bit into sign bit
.955a		0a		asl a				asl 	a
.955b		10 05		bpl $9562			bpl 	_NotRef
.955d		48		pha				pha
.955e		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9561		68		pla				pla
.9562						_NotRef:
.9562		0a		asl a				asl 	a
.9563		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9565		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9567		15 79		ora $79,x			ora 	NSExponent+1,x
.9569		f0 03		beq $956e			beq 	_IntegerCode 				; if clear, then we have two integers
.956b		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.956e						_IntegerCode:
.956e						IntegerModulusNoCheck:
.956e		20 47 95	jsr $9547			jsr 	CheckDivideZero 			; do div zero check
.9571		20 79 95	jsr $9579			jsr 	Int32Divide 				; do the division
.9574		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9576		56 50		lsr $50,x			lsr 	NSStatus,x
.9578		60		rts				rts
.9579						Int32Divide:
.9579		48		pha				pha 								; save AXY
.957a		5a		phy				phy
.957b		20 ec a2	jsr $a2ec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.957e		20 05 a3	jsr $a305			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9581		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9583						_I32DivideLoop:
.9583		e8		inx				inx
.9584		e8		inx				inx
.9585		20 18 a3	jsr $a318			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9588		ca		dex				dex
.9589		ca		dex				dex
.958a		20 19 a3	jsr $a319			jsr 	NSMRotateLeft
.958d		20 b8 95	jsr $95b8			jsr 	DivideCheckSubtract 		; check if subtract possible
.9590		90 02		bcc $9594			bcc 	_I32DivideNoCarryIn
.9592		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9594						_I32DivideNoCarryIn:
.9594		88		dey				dey 								; loop round till division completed.
.9595		d0 ec		bne $9583			bne 	_I32DivideLoop
.9597		7a		ply				ply 								; restore AXY and exit
.9598		68		pla				pla
.9599		60		rts				rts
.959a						Int32ShiftDivide:
.959a		48		pha				pha 								; save AY
.959b		5a		phy				phy
.959c		e8		inx				inx 								; clear S[X+2]
.959d		e8		inx				inx
.959e		20 09 a3	jsr $a309			jsr 	NSMSetZero
.95a1		ca		dex				dex
.95a2		ca		dex				dex
.95a3		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.95a5						_I32SDLoop:
.95a5		20 b8 95	jsr $95b8			jsr 	DivideCheckSubtract 		; check if subtract possible
.95a8		e8		inx				inx
.95a9		e8		inx				inx
.95aa		20 19 a3	jsr $a319			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95ad		ca		dex				dex
.95ae		ca		dex				dex
.95af		20 19 a3	jsr $a319			jsr 	NSMRotateLeft
.95b2		88		dey				dey 	 							; do 31 times
.95b3		d0 f0		bne $95a5			bne 	_I32SDLoop
.95b5		7a		ply				ply 								; restore AY and exit
.95b6		68		pla				pla
.95b7		60		rts				rts
.95b8						DivideCheckSubtract:
.95b8		20 c3 96	jsr $96c3			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95bb		b0 04		bcs $95c1			bcs 	_DCSExit 					; if carry set, then could do, exit
.95bd		20 a9 96	jsr $96a9			jsr 	AddTopTwoStack 				; add it back in
.95c0		18		clc				clc 								; and return False
.95c1						_DCSExit:
.95c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95c2						MulInteger:
.95c2		fa		plx				plx
.95c3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95c5		15 51		ora $51,x			ora 	NSStatus+1,x
.95c7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95c8		0a		asl a				asl 	a
.95c9		10 05		bpl $95d0			bpl 	_NotRef
.95cb		48		pha				pha
.95cc		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95cf		68		pla				pla
.95d0						_NotRef:
.95d0		0a		asl a				asl 	a 							; put MSB of type into A:7
.95d1		30 09		bmi $95dc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95d3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95d5		15 79		ora $79,x			ora 	NSExponent+1,x
.95d7		f0 06		beq $95df			beq 	_IntegerCode 				; if clear, then we have two integers
.95d9		4c 40 9a	jmp $9a40			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95dc						_StringData:
.95dc		4c 95 a4	jmp $a495			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95df						_IntegerCode:
.95df		20 ec 95	jsr $95ec			jsr 	MultiplyShort
.95e2		c9 00		cmp #$00			cmp 	#0
.95e4		f0 05		beq $95eb			beq 	_MIExit
.95e6		a9 04		lda #$04		lda	#4
.95e8		4c a9 93	jmp $93a9		jmp	ErrorHandler
.95eb						_MIExit:
.95eb		60		rts				rts
.95ec						MultiplyShort:
.95ec		5a		phy				phy 								; save Y
.95ed		20 ec a2	jsr $a2ec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95f0		20 05 a3	jsr $a305			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95f3		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95f5						_I32MLoop:
.95f5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95f7		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95f9		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95fb		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95fd		f0 25		beq $9624			beq 	_I32MExit 					; exit if zero
.95ff		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9601		29 01		and #$01			and 	#1
.9603		f0 0d		beq $9612			beq 	_I32MNoAdd
.9605		20 a9 96	jsr $96a9			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9608		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.960a		10 06		bpl $9612			bpl 	_I32MNoAdd
.960c						_I32ShiftRight:
.960c		20 22 a3	jsr $a322			jsr 	NSMShiftRight 				; shift S[X] right
.960f		c8		iny				iny 								; increment shift count
.9610		80 09		bra $961b			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9612						_I32MNoAdd:
.9612		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9614		70 f6		bvs $960c			bvs 	_I32ShiftRight 				; instead.
.9616		e8		inx				inx
.9617		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.961a		ca		dex				dex
.961b						_I32MShiftUpper:
.961b		e8		inx				inx 								; shift S[X+2] right
.961c		e8		inx				inx
.961d		20 22 a3	jsr $a322			jsr 	NSMShiftRight
.9620		ca		dex				dex
.9621		ca		dex				dex
.9622		80 d1		bra $95f5			bra 	_I32MLoop 					; try again.
.9624						_I32MExit:
.9624		20 2a 96	jsr $962a			jsr 	CalculateSign
.9627		98		tya				tya 								; shift in A
.9628		7a		ply				ply 								; restore Y and exit
.9629		60		rts				rts
.962a						CalculateSign:
.962a		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.962c		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.962e		55 51		eor $51,x			eor 	NSStatus+1,x
.9630		0a		asl a				asl 	a 							; shift bit 7 into carry
.9631		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9633		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9634						CompareStrings:
.9634		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9636		35 51		and $51,x			and 	NSStatus+1,x
.9638		29 10		and #$10			and 	#NSBIsString
.963a		f0 28		beq $9664			beq 	_CSTypeError
.963c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.963e		85 36		sta $36				sta 	zTemp0
.9640		b5 60		lda $60,x			lda 	NSMantissa1,x
.9642		85 37		sta $37				sta 	zTemp0+1
.9644		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9646		85 38		sta $38				sta 	zTemp1
.9648		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.964a		85 39		sta $39				sta 	zTemp1+1
.964c		5a		phy				phy 								; save Y so we can access strings
.964d		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.964f						_CSLoop:
.964f		c8		iny				iny
.9650		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9652		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9654		d0 06		bne $965c			bne 	_CSDifferent
.9656		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9658		d0 f5		bne $964f			bne 	_CSLoop 					; still comparing
.965a						_CSExit:
.965a		7a		ply				ply 								; reached end, return zero in A from EOS
.965b		60		rts				rts
.965c						_CSDifferent:
.965c		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.965e		90 fa		bcc $965a			bcc		_CSExit
.9660		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9662		80 f6		bra $965a			bra 	_CSExit
.9664						_CSTypeError:
.9664		4c 8b a4	jmp $a48b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9667						ShiftLeft:
.9667		38		sec				sec 								; common code, carry determines which way.
.9668		80 01		bra $966b			bra 	ShiftMain
.966a						ShiftRight:
.966a		18		clc				clc
.966b						ShiftMain:
.966b		fa		plx				plx 								; restore X
.966c		08		php				php 								; save direction
.966d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.966f		15 51		ora $51,x			ora 	NSStatus+1,x
.9671		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9672		0a		asl a				asl 	a
.9673		10 05		bpl $967a			bpl 	_NotRef
.9675		48		pha				pha
.9676		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9679		68		pla				pla
.967a						_NotRef:
.967a		0a		asl a				asl 	a
.967b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.967d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.967f		15 79		ora $79,x			ora 	NSExponent+1,x
.9681		f0 03		beq $9686			beq 	_IntegerCode 				; if clear, then we have two integers
.9683		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.9686						_IntegerCode:
.9686		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9688		29 e0		and #$e0			and 	#$E0
.968a		15 61		ora $61,x			ora 	NSMantissa1+1,x
.968c		15 69		ora $69,x			ora 	NSMantissa2+1,x
.968e		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9690		d0 12		bne $96a4			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9692						_SMLoop:
.9692		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9694		30 11		bmi $96a7			bmi 	_SMExit 					; exit if done.
.9696		28		plp				plp 								; restore direction setting
.9697		08		php				php
.9698		90 05		bcc $969f			bcc 	_SMRight
.969a		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; shift left if CS
.969d		80 f3		bra $9692			bra 	_SMLoop
.969f						_SMRight:
.969f		20 22 a3	jsr $a322			jsr 	NSMShiftRight 				; shift right if CC
.96a2		80 ee		bra $9692			bra 	_SMLoop
.96a4						_SMExit0:
.96a4		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; return zero.
.96a7						_SMExit:
.96a7		28		plp				plp 								; throw direction
.96a8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.96a9						AddTopTwoStack:
.96a9		18		clc				clc
.96aa		b5 58		lda $58,x			lda		NSMantissa0,x
.96ac		75 59		adc $59,x			adc 		NSMantissa0+1,x
.96ae		95 58		sta $58,x			sta 	NSMantissa0,x
.96b0		b5 60		lda $60,x			lda		NSMantissa1,x
.96b2		75 61		adc $61,x			adc 		NSMantissa1+1,x
.96b4		95 60		sta $60,x			sta 	NSMantissa1,x
.96b6		b5 68		lda $68,x			lda		NSMantissa2,x
.96b8		75 69		adc $69,x			adc 		NSMantissa2+1,x
.96ba		95 68		sta $68,x			sta 	NSMantissa2,x
.96bc		b5 70		lda $70,x			lda		NSMantissa3,x
.96be		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96c0		95 70		sta $70,x			sta 	NSMantissa3,x
.96c2		60		rts				rts
.96c3						SubTopTwoStack:
.96c3		38		sec				sec
.96c4		b5 58		lda $58,x			lda		NSMantissa0,x
.96c6		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96c8		95 58		sta $58,x			sta 	NSMantissa0,x
.96ca		b5 60		lda $60,x			lda		NSMantissa1,x
.96cc		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96ce		95 60		sta $60,x			sta 	NSMantissa1,x
.96d0		b5 68		lda $68,x			lda		NSMantissa2,x
.96d2		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96d4		95 68		sta $68,x			sta 	NSMantissa2,x
.96d6		b5 70		lda $70,x			lda		NSMantissa3,x
.96d8		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96da		95 70		sta $70,x			sta 	NSMantissa3,x
.96dc		60		rts				rts
.96dd						AddInteger:
.96dd		fa		plx				plx
.96de		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96e0		15 51		ora $51,x			ora 	NSStatus+1,x
.96e2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96e3		0a		asl a				asl 	a
.96e4		10 05		bpl $96eb			bpl 	_NotRef
.96e6		48		pha				pha
.96e7		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ea		68		pla				pla
.96eb						_NotRef:
.96eb		0a		asl a				asl 	a 							; put MSB of type into A:7
.96ec		30 09		bmi $96f7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96ee		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96f0		15 79		ora $79,x			ora 	NSExponent+1,x
.96f2		f0 06		beq $96fa			beq 	_IntegerCode 				; if clear, then we have two integers
.96f4		4c f0 98	jmp $98f0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96f7						_StringData:
.96f7		4c b6 94	jmp $94b6			jmp 	StringConcat							; at least one string - don't know both are strings.
.96fa						_IntegerCode:
.96fa						AddCode:
.96fa		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96fc		55 51		eor $51,x			eor 	NSStatus+1,x
.96fe		10 a9		bpl $96a9			bpl 	AddTopTwoStack
.9700		20 c3 96	jsr $96c3			jsr 	SubTopTwoStack 				; do a physical subtraction
.9703		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9705		10 07		bpl $970e			bpl 	_AddExit
.9707		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9709		95 50		sta $50,x			sta 	NSStatus,x
.970b		20 d2 a2	jsr $a2d2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.970e						_AddExit:
.970e		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; check for -0
.9711		d0 02		bne $9715			bne 	_AddNonZero
.9713		74 50		stz $50,x			stz 	NSStatus,x
.9715						_AddNonZero:
.9715		60		rts				rts
.9716						SubInteger:
.9716		fa		plx				plx
.9717		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9719		15 51		ora $51,x			ora 	NSStatus+1,x
.971b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.971c		0a		asl a				asl 	a
.971d		10 05		bpl $9724			bpl 	_NotRef
.971f		48		pha				pha
.9720		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9723		68		pla				pla
.9724						_NotRef:
.9724		0a		asl a				asl 	a 							; put MSB of type into A:7
.9725		30 09		bmi $9730			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9727		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9729		15 79		ora $79,x			ora 	NSExponent+1,x
.972b		f0 06		beq $9733			beq 	_IntegerCode 				; if clear, then we have two integers
.972d		4c f5 98	jmp $98f5			jmp 	FloatingPointSub 							; otherwise at least one float.
.9730						_StringData:
.9730		4c 95 a4	jmp $a495			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9733						_IntegerCode:
.9733		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9735		49 80		eor #$80			eor 	#$80
.9737		95 51		sta $51,x			sta 	NSStatus+1,x
.9739		80 bf		bra $96fa			bra 	AddCode 					; and do the same code as add.
.973b						AndInteger:
.973b		fa		plx				plx
.973c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.973e		15 51		ora $51,x			ora 	NSStatus+1,x
.9740		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9741		0a		asl a				asl 	a
.9742		10 05		bpl $9749			bpl 	_NotRef
.9744		48		pha				pha
.9745		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9748		68		pla				pla
.9749						_NotRef:
.9749		0a		asl a				asl 	a
.974a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.974c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.974e		15 79		ora $79,x			ora 	NSExponent+1,x
.9750		f0 03		beq $9755			beq 	_IntegerCode 				; if clear, then we have two integers
.9752		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.9755						_IntegerCode:
.9755		b5 58		lda $58,x			lda		NSMantissa0,x
.9757		35 59		and $59,x			and 		NSMantissa0+1,x
.9759		95 58		sta $58,x			sta 	NSMantissa0,x
.975b		b5 60		lda $60,x			lda		NSMantissa1,x
.975d		35 61		and $61,x			and 		NSMantissa1+1,x
.975f		95 60		sta $60,x			sta 	NSMantissa1,x
.9761		b5 68		lda $68,x			lda		NSMantissa2,x
.9763		35 69		and $69,x			and 		NSMantissa2+1,x
.9765		95 68		sta $68,x			sta 	NSMantissa2,x
.9767		b5 70		lda $70,x			lda		NSMantissa3,x
.9769		35 71		and $71,x			and 		NSMantissa3+1,x
.976b		95 70		sta $70,x			sta 	NSMantissa3,x
.976d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.976f		60		rts				rts
.9770						OraInteger:
.9770		fa		plx				plx
.9771		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9773		15 51		ora $51,x			ora 	NSStatus+1,x
.9775		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9776		0a		asl a				asl 	a
.9777		10 05		bpl $977e			bpl 	_NotRef
.9779		48		pha				pha
.977a		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.977d		68		pla				pla
.977e						_NotRef:
.977e		0a		asl a				asl 	a
.977f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9781		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9783		15 79		ora $79,x			ora 	NSExponent+1,x
.9785		f0 03		beq $978a			beq 	_IntegerCode 				; if clear, then we have two integers
.9787		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.978a						_IntegerCode:
.978a		b5 58		lda $58,x			lda		NSMantissa0,x
.978c		15 59		ora $59,x			ora 		NSMantissa0+1,x
.978e		95 58		sta $58,x			sta 	NSMantissa0,x
.9790		b5 60		lda $60,x			lda		NSMantissa1,x
.9792		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9794		95 60		sta $60,x			sta 	NSMantissa1,x
.9796		b5 68		lda $68,x			lda		NSMantissa2,x
.9798		15 69		ora $69,x			ora 		NSMantissa2+1,x
.979a		95 68		sta $68,x			sta 	NSMantissa2,x
.979c		b5 70		lda $70,x			lda		NSMantissa3,x
.979e		15 71		ora $71,x			ora 		NSMantissa3+1,x
.97a0		95 70		sta $70,x			sta 	NSMantissa3,x
.97a2		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97a4		60		rts				rts
.97a5						EorInteger:
.97a5		fa		plx				plx
.97a6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97a8		15 51		ora $51,x			ora 	NSStatus+1,x
.97aa		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ab		0a		asl a				asl 	a
.97ac		10 05		bpl $97b3			bpl 	_NotRef
.97ae		48		pha				pha
.97af		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b2		68		pla				pla
.97b3						_NotRef:
.97b3		0a		asl a				asl 	a
.97b4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97b6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b8		15 79		ora $79,x			ora 	NSExponent+1,x
.97ba		f0 03		beq $97bf			beq 	_IntegerCode 				; if clear, then we have two integers
.97bc		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.97bf						_IntegerCode:
.97bf		b5 58		lda $58,x			lda		NSMantissa0,x
.97c1		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97c3		95 58		sta $58,x			sta 	NSMantissa0,x
.97c5		b5 60		lda $60,x			lda		NSMantissa1,x
.97c7		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97c9		95 60		sta $60,x			sta 	NSMantissa1,x
.97cb		b5 68		lda $68,x			lda		NSMantissa2,x
.97cd		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97cf		95 68		sta $68,x			sta 	NSMantissa2,x
.97d1		b5 70		lda $70,x			lda		NSMantissa3,x
.97d3		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97d5		95 70		sta $70,x			sta 	NSMantissa3,x
.97d7		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97d9		60		rts				rts
.97da						WordIndirect:
.97da		fa		plx				plx
.97db		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97dd		15 51		ora $51,x			ora 	NSStatus+1,x
.97df		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e0		0a		asl a				asl 	a
.97e1		10 05		bpl $97e8			bpl 	_NotRef
.97e3		48		pha				pha
.97e4		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e7		68		pla				pla
.97e8						_NotRef:
.97e8		0a		asl a				asl 	a
.97e9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97eb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ed		15 79		ora $79,x			ora 	NSExponent+1,x
.97ef		f0 03		beq $97f4			beq 	_IntegerCode 				; if clear, then we have two integers
.97f1		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.97f4						_IntegerCode:
.97f4		20 fa 96	jsr $96fa			jsr 	AddCode 					; add the two values
.97f7		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97f9		95 50		sta $50,x			sta 	NSStatus,x
.97fb		60		rts				rts
.97fc						ByteIndirect:
.97fc		fa		plx				plx
.97fd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97ff		15 51		ora $51,x			ora 	NSStatus+1,x
.9801		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9802		0a		asl a				asl 	a
.9803		10 05		bpl $980a			bpl 	_NotRef
.9805		48		pha				pha
.9806		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9809		68		pla				pla
.980a						_NotRef:
.980a		0a		asl a				asl 	a
.980b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.980d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.980f		15 79		ora $79,x			ora 	NSExponent+1,x
.9811		f0 03		beq $9816			beq 	_IntegerCode 				; if clear, then we have two integers
.9813		4c 8b a4	jmp $a48b			jmp 	TypeError 					; anything else, type mismatch.
.9816						_IntegerCode:
.9816		20 fa 96	jsr $96fa			jsr 	AddCode 					; add the two values
.9819		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.981b		95 50		sta $50,x			sta 	NSStatus,x
.981d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.981e						ConvertInt16:
.981e		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9820		86 60		stx $60				stx 	NSMantissa1
.9822		64 68		stz $68				stz 	NSMantissa2
.9824		64 70		stz $70				stz 	NSMantissa3
.9826		64 50		stz $50				stz 	NSStatus 					; positive integer
.9828		a2 00		ldx #$00			ldx 	#0 							; stack level
.982a		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.982c		80 00		bra $982e			bra 	ConvertInt32
.982e						ConvertInt32:
.982e		5a		phy				phy
.982f		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9831		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9833		10 08		bpl $983d			bpl 	_CI32NotNeg
.9835		48		pha				pha
.9836		a9 2d		lda #$2d			lda 	#'-'
.9838		99 23 06	sta $0623,y			sta 	numberBuffer,y
.983b		c8		iny				iny
.983c		68		pla				pla
.983d						_CI32NotNeg:
.983d		20 4b 98	jsr $984b			jsr 	_CI32DivideConvert 			; recursive conversion
.9840		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9842		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9845		7a		ply				ply
.9846		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9848		a9 23		lda #$23			lda 	#numberBuffer & $FF
.984a		60		rts				rts
.984b						_CI32DivideConvert:
.984b		e8		inx				inx 								; write to next slot up
.984c		20 0b a3	jsr $a30b			jsr 	NSMSetByte 		 			; write the base out.
.984f		ca		dex				dex
.9850		20 79 95	jsr $9579			jsr 	Int32Divide 				; divide
.9853		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9855		48		pha				pha
.9856		20 36 95	jsr $9536			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9859		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; is it zero ?
.985c		f0 05		beq $9863			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.985e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9860		20 4b 98	jsr $984b			jsr 	_CI32DivideConvert 			; and recusrively call.
.9863						_CI32NoRecurse:
.9863		68		pla				pla 								; remainder
.9864		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9866		90 02		bcc $986a			bcc 	_CI32NotHex
.9868		69 26		adc #$26			adc 	#6+32
.986a						_CI32NotHex:
.986a		69 30		adc #$30			adc 	#48
.986c		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.986f		c8		iny				iny
.9870		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9871						PrecedenceLevel:
>9871		04					.byte	 4	; $00 <<
>9872		02					.byte	 2	; $01 <=
>9873		02					.byte	 2	; $02 <>
>9874		00					.byte	 0	; $03 !!3
>9875		00					.byte	 0	; $04 ><
>9876		02					.byte	 2	; $05 >=
>9877		04					.byte	 4	; $06 >>
>9878		00					.byte	 0	; $07 !!7
>9879		00					.byte	 0	; $08 !!8
>987a		00					.byte	 0	; $09 !!9
>987b		00					.byte	 0	; $0a !!10
>987c		00					.byte	 0	; $0b !!11
>987d		00					.byte	 0	; $0c !!12
>987e		00					.byte	 0	; $0d !!13
>987f		00					.byte	 0	; $0e !!14
>9880		00					.byte	 0	; $0f !!15
>9881		00					.byte	 0	; $10 @
>9882		00					.byte	 0	; $11 !!17
>9883		00					.byte	 0	; $12 !!18
>9884		00					.byte	 0	; $13 [
>9885		04					.byte	 4	; $14 \
>9886		00					.byte	 0	; $15 ]
>9887		01					.byte	 1	; $16 ^
>9888		00					.byte	 0	; $17 _
>9889		00					.byte	 0	; $18 `
>988a		00					.byte	 0	; $19 !!25
>988b		00					.byte	 0	; $1a !!26
>988c		00					.byte	 0	; $1b {
>988d		01					.byte	 1	; $1c |
>988e		00					.byte	 0	; $1d }
>988f		00					.byte	 0	; $1e ~
>9890		00					.byte	 0	; $1f <7F>
>9891		00					.byte	 0	; $20
>9892		05					.byte	 5	; $21 !
>9893		00					.byte	 0	; $22 "
>9894		00					.byte	 0	; $23 #
>9895		05					.byte	 5	; $24 $
>9896		04					.byte	 4	; $25 %
>9897		01					.byte	 1	; $26 &
>9898		00					.byte	 0	; $27 '
>9899		00					.byte	 0	; $28 (
>989a		00					.byte	 0	; $29 )
>989b		04					.byte	 4	; $2a *
>989c		03					.byte	 3	; $2b +
>989d		00					.byte	 0	; $2c ,
>989e		03					.byte	 3	; $2d -
>989f		00					.byte	 0	; $2e .
>98a0		04					.byte	 4	; $2f /
>98a1		00					.byte	 0	; $30 0
>98a2		00					.byte	 0	; $31 1
>98a3		00					.byte	 0	; $32 2
>98a4		00					.byte	 0	; $33 3
>98a5		00					.byte	 0	; $34 4
>98a6		00					.byte	 0	; $35 5
>98a7		00					.byte	 0	; $36 6
>98a8		00					.byte	 0	; $37 7
>98a9		00					.byte	 0	; $38 8
>98aa		00					.byte	 0	; $39 9
>98ab		00					.byte	 0	; $3a :
>98ac		00					.byte	 0	; $3b ;
>98ad		02					.byte	 2	; $3c <
>98ae		02					.byte	 2	; $3d =
>98af		02					.byte	 2	; $3e >
>98b0		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98b1						EvaluateExpressionAt0:
.98b1		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98b3						EvaluateExpression:
.98b3		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98b5						EvaluateExpressionAtPrecedence:
.98b5		48		pha				pha 								; save precedence level
.98b6		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm 				; evaluate term into level X.
.98b9		68		pla				pla 								; restore precedence level.
.98ba						_EXPRLoop:
.98ba		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98bc		b1 30		lda ($30),y			lda 	(codePtr),y
.98be		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98c0		b0 25		bcs $98e7			bcs 	_EXPRExit
.98c2		da		phx				phx 								; read the operator precedence
.98c3		aa		tax				tax
.98c4		bd 71 98	lda $9871,x			lda 	PrecedenceLevel,x
.98c7		fa		plx				plx
.98c8		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98ca		f0 1b		beq $98e7			beq 	_EXPRExit
.98cc		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98ce		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98d0		c5 37		cmp $37				cmp 	zTemp0+1
.98d2		b0 13		bcs $98e7			bcs		_EXPRExit 					; if current >= operator exit
.98d4		48		pha				pha 								; save current precedence.
.98d5		b1 30		lda ($30),y			lda 	(codePtr),y
.98d7		c8		iny				iny
.98d8		48		pha				pha
.98d9		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98db		e8		inx				inx 								; work out the right hand side.
.98dc		20 b5 98	jsr $98b5			jsr 	EvaluateExpressionAtPrecedence
.98df		ca		dex				dex
.98e0		68		pla				pla 								; get operator, call the code.
.98e1		20 ea 98	jsr $98ea			jsr 	_EXPRCaller
.98e4		68		pla				pla 								; restore precedence level
.98e5		80 d3		bra $98ba			bra 	_EXPRLoop 					; and go round.
.98e7						_EXPRExit:
.98e7		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98e9		60		rts				rts
.98ea						_EXPRCaller:
.98ea		da		phx				phx 								; save on stack, first thing is to restore it
.98eb		0a		asl a				asl 	a 							; double so can use vectors into X
.98ec		aa		tax				tax
.98ed		7c 1a 90	jmp ($901a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98f0						FloatingPointAdd:
.98f0		20 66 9a	jsr $9a66			jsr 	FloatPrepare 				; prepare for floats
.98f3		80 09		bra $98fe			bra 	FloatAdd
.98f5						FloatingPointSub:
.98f5		20 66 9a	jsr $9a66			jsr 	FloatPrepare 				; prepare for floats
.98f8						FloatSubtract:
.98f8		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98fa		49 80		eor #$80			eor 	#$80
.98fc		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98fe						FloatAdd:
.98fe		48		pha				pha
.98ff		5a		phy				phy
.9900		20 75 9a	jsr $9a75			jsr 	NSNormalise 				; normalise S[X]
.9903		f0 51		beq $9956			beq 	_FAReturn1
.9905		e8		inx				inx 								; normalise S[X+1]
.9906		20 75 9a	jsr $9a75			jsr 	NSNormalise
.9909		ca		dex				dex
.990a		c9 00		cmp #$00			cmp 	#0
.990c		f0 60		beq $996e			beq 	_FAExit 					; if so, just return A
.990e		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9910		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9912		f0 18		beq $992c			beq 	_FAExponentsEqual
.9914		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9916		a8		tay				tay
.9917		38		sec				sec 								; do a signed comparison of the exponents.
.9918		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.991a		50 02		bvc $991e			bvc 	_FANoSignedChange
.991c		49 80		eor #$80			eor 	#$80
.991e						_FANoSignedChange:
.991e		29 80		and #$80			and 	#$80
.9920		10 02		bpl $9924			bpl 	_FAHaveMax
.9922		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9924						_FAHaveMax:
.9924		20 71 99	jsr $9971			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9927		e8		inx				inx
.9928		20 71 99	jsr $9971			jsr 	_FAShiftToExponent
.992b		ca		dex				dex
.992c						_FAExponentsEqual:
.992c		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.992e		55 51		eor $51,x			eor 	NSStatus+1,x
.9930		30 0e		bmi $9940			bmi 	_FADifferentSigns
.9932		20 a9 96	jsr $96a9			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9935		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9937		10 35		bpl $996e			bpl 	_FAExit 					; if no, we are done.
.9939		20 22 a3	jsr $a322			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.993c		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.993e		80 2e		bra $996e			bra 	_FAExit
.9940						_FADifferentSigns:
.9940		20 c3 96	jsr $96c3			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9943		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9945		10 06		bpl $994d			bpl 	_FACheckZero 				; if no, check for -0
.9947		20 cb a2	jsr $a2cb			jsr 	NSMNegate 					; netate result
.994a		20 d2 a2	jsr $a2d2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.994d						_FACheckZero:
.994d		20 2b a3	jsr $a32b			jsr 	NSMIsZero	 				; check for -0
.9950		d0 1c		bne $996e			bne 	_FAExit
.9952		74 50		stz $50,x			stz 	NSStatus,x
.9954		80 18		bra $996e			bra 	_FAExit
.9956						_FAReturn1:
.9956		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9958		95 58		sta $58,x			sta 	NSMantissa0,x
.995a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.995c		95 60		sta $60,x			sta 	NSMantissa1,x
.995e		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9960		95 68		sta $68,x			sta 	NSMantissa2,x
.9962		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9964		95 70		sta $70,x			sta 	NSMantissa3,x
.9966		b5 79		lda $79,x			lda 	NSExponent+1,x
.9968		95 78		sta $78,x			sta 	NSExponent,x
.996a		b5 51		lda $51,x			lda 	NSStatus+1,x
.996c		95 50		sta $50,x			sta 	NSStatus,x
.996e						_FAExit:
.996e		7a		ply				ply
.996f		68		pla				pla
.9970		60		rts				rts
.9971						_FAShiftToExponent:
.9971						_FAShiftToExponent2:
.9971		98		tya				tya 								; compare Y to exponent
.9972		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9974		f0 07		beq $997d			beq 	_FASEExit 					; exit if so.
.9976		20 22 a3	jsr $a322			jsr 	NSMShiftRight	 			; shift the mantissa right
.9979		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.997b		80 f4		bra $9971			bra 	_FAShiftToExponent2
.997d						_FASEExit:
.997d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.997e						CompareFloat:
.997e		20 f8 98	jsr $98f8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9981		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9983		29 f8		and #$f8			and 	#$F8
.9985		15 68		ora $68,x			ora 	NSMantissa2,x
.9987		15 70		ora $70,x			ora 	NSMantissa3,x
.9989		f0 08		beq $9993			beq 	_FCExit 					; zero, so approximately identical
.998b		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.998d		34 50		bit $50,x			bit 	NSStatus,x
.998f		10 02		bpl $9993			bpl 	_FCExit
.9991						_FCNegative:
.9991		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9993						_FCExit:
.9993		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9994						FDivideCommand:
.9994		fa		plx				plx	 								; restore stack position
.9995		20 66 9a	jsr $9a66			jsr 	FloatPrepare 				; prepare for floats
.9998						FloatDivide:
.9998		48		pha				pha
.9999		e8		inx				inx
.999a		20 75 9a	jsr $9a75			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.999d		ca		dex				dex
.999e		c9 00		cmp #$00			cmp 	#0
.99a0		f0 1d		beq $99bf			beq 	_FDZero
.99a2		20 75 9a	jsr $9a75			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.99a5		f0 16		beq $99bd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.99a7		20 9a 95	jsr $959a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.99aa		20 36 95	jsr $9536			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.99ad		20 75 9a	jsr $9a75			jsr		NSNormalise 				; renormalise
.99b0		20 2a 96	jsr $962a			jsr 	CalculateSign 				; calculate result sign
.99b3		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.99b5		38		sec				sec
.99b6		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99b8		38		sec				sec
.99b9		e9 1e		sbc #$1e			sbc 	#30
.99bb		95 78		sta $78,x			sta 	NSExponent,x
.99bd						_FDExit:
.99bd		68		pla				pla
.99be		60		rts				rts
.99bf						_FDZero:
.99bf		a9 03		lda #$03		lda	#3
.99c1		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99c4						FloatFractionalPart:
.99c4		5a		phy				phy
.99c5		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99c7		29 7f		and #$7f			and 	#$7F
.99c9		95 50		sta $50,x			sta 	NSStatus,x
.99cb		20 75 9a	jsr $9a75			jsr 	NSNormalise
.99ce		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99d0		38		sec				sec
.99d1		e9 e0		sbc #$e0			sbc 	#$E0
.99d3		90 29		bcc $99fe			bcc 	_FFPExit 					; already fractional
.99d5		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99d7		b0 22		bcs $99fb			bcs 	_FFPZero
.99d9		a8		tay				tay 								; put count to do in Y
.99da		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99dc		20 00 9a	jsr $9a00			jsr 	_FFPPartial
.99df		95 70		sta $70,x			sta 	NSMantissa3,x
.99e1		b5 68		lda $68,x			lda 	NSMantissa2,x
.99e3		20 00 9a	jsr $9a00			jsr 	_FFPPartial
.99e6		95 68		sta $68,x			sta 	NSMantissa2,x
.99e8		b5 60		lda $60,x			lda 	NSMantissa1,x
.99ea		20 00 9a	jsr $9a00			jsr 	_FFPPartial
.99ed		95 60		sta $60,x			sta 	NSMantissa1,x
.99ef		b5 58		lda $58,x			lda 	NSMantissa0,x
.99f1		20 00 9a	jsr $9a00			jsr 	_FFPPartial
.99f4		95 58		sta $58,x			sta 	NSMantissa0,x
.99f6		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; zeroed check.
.99f9		d0 03		bne $99fe			bne 	_FFPExit
.99fb						_FFPZero:
.99fb		20 09 a3	jsr $a309			jsr 	NSMSetZero
.99fe						_FFPExit:
.99fe		7a		ply				ply
.99ff		60		rts				rts
.9a00						_FFPPartial:
.9a00		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9a02		f0 17		beq $9a1b			beq 	_FFFPPExit
.9a04		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9a06		b0 0c		bcs $9a14			bcs 	_FFFPPWholeByte
.9a08		5a		phy				phy
.9a09						_FFFPPLeft:
.9a09		0a		asl a				asl 	a
.9a0a		88		dey				dey
.9a0b		d0 fc		bne $9a09			bne 	_FFFPPLeft
.9a0d		7a		ply				ply
.9a0e						_FFFPPRight:
.9a0e		4a		lsr a				lsr 	a
.9a0f		88		dey				dey
.9a10		d0 fc		bne $9a0e			bne 	_FFFPPRight
.9a12		80 07		bra $9a1b			bra 	_FFFPPExit
.9a14						_FFFPPWholeByte:
.9a14		98		tya				tya 								; subtract 8 from count
.9a15		38		sec				sec
.9a16		e9 08		sbc #$08			sbc 	#8
.9a18		a8		tay				tay
.9a19		a9 00		lda #$00			lda 	#0 							; and clear all
.9a1b						_FFFPPExit:
.9a1b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a1c						FloatIntegerPart:
.9a1c		48		pha				pha
.9a1d		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9a1f		f0 1d		beq $9a3e			beq 	_FIPExit 					; if so do nothing
.9a21		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; is it zero ?
.9a24		f0 15		beq $9a3b			beq 	_FIPZero 					; if so return zero.
.9a26		20 75 9a	jsr $9a75			jsr 	NSNormalise 				; normalise
.9a29		f0 10		beq $9a3b			beq 	_FIPZero 					; normalised to zero, exit zero
.9a2b						_FIPShift:
.9a2b		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a2d		10 07		bpl $9a36			bpl 	_FIPCheckZero
.9a2f		20 22 a3	jsr $a322			jsr 	NSMShiftRight 				; shift mantissa right
.9a32		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a34		80 f5		bra $9a2b			bra 	_FIPShift
.9a36						_FIPCheckZero:
.9a36		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; avoid -0 problem
.9a39		d0 03		bne $9a3e			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a3b						_FIPZero:
.9a3b		20 09 a3	jsr $a309			jsr 	NSMSetZero
.9a3e						_FIPExit:
.9a3e		68		pla				pla
.9a3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a40						FloatingPointMultiply:
.9a40		20 66 9a	jsr $9a66			jsr 	FloatPrepare 				; prepare for floats
.9a43						FloatMultiply:
.9a43		48		pha				pha
.9a44		20 75 9a	jsr $9a75			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a47		f0 18		beq $9a61			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a49		e8		inx				inx
.9a4a		20 75 9a	jsr $9a75			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a4d		ca		dex				dex
.9a4e		c9 00		cmp #$00			cmp 	#0
.9a50		f0 0c		beq $9a5e			beq 	_FDSetZero
.9a52		20 ec 95	jsr $95ec			jsr 	MultiplyShort 				; calculate the result.
.9a55		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a57		18		clc				clc
.9a58		75 79		adc $79,x			adc 	NSExponent+1,x
.9a5a		95 78		sta $78,x			sta 	NSExponent,x
.9a5c		80 03		bra $9a61			bra 	_FDExit
.9a5e						_FDSetZero:
.9a5e		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; return 0
.9a61						_FDExit:
.9a61		20 75 9a	jsr $9a75			jsr 	NSNormalise 				; normalise the result
.9a64		68		pla				pla
.9a65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a66						FloatPrepare:
.9a66		20 71 9b	jsr $9b71			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a69		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a6b		15 51		ora $51,x			ora 	NSStatus+1,x
.9a6d		29 10		and #$10			and 	#NSBIsString
.9a6f		d0 01		bne $9a72			bne 	_FDType
.9a71		60		rts				rts
.9a72						_FDType:
.9a72		4c 8b a4	jmp $a48b			jmp 	TypeError
.9a75						NSNormalise:
.9a75		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a77		29 80		and #$80			and 	#$80
.9a79		09 08		ora #$08			ora 	#NSTFloat
.9a7b		95 50		sta $50,x			sta 	NSStatus,x
.9a7d		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; if zero exit
.9a80		d0 07		bne $9a89			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a82		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a84		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a86		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a88		60		rts				rts
.9a89						_NSNormaliseOptimise:
.9a89		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a8b		d0 19		bne $9aa6			bne 	_NSNormaliseLoop
.9a8d		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a8f		30 15		bmi $9aa6			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a91		95 70		sta $70,x			sta 	NSMantissa3,x
.9a93		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a95		95 68		sta $68,x			sta 	NSMantissa2,x
.9a97		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a99		95 60		sta $60,x			sta 	NSMantissa1,x
.9a9b		74 58		stz $58,x			stz 	NSMantissa0,x
.9a9d		b5 78		lda $78,x			lda 	NSExponent,x
.9a9f		38		sec				sec
.9aa0		e9 08		sbc #$08			sbc 	#8
.9aa2		95 78		sta $78,x			sta 	NSExponent,x
.9aa4		80 e3		bra $9a89			bra 	_NSNormaliseOptimise
.9aa6						_NSNormaliseLoop:
.9aa6		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9aa8		70 07		bvs $9ab1			bvs 	_NSNExit 					; exit if so with Z flag clear
.9aaa		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; shift mantissa left
.9aad		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9aaf		80 f5		bra $9aa6			bra 	_NSNormaliseLoop
.9ab1						_NSNExit:
.9ab1		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9ab3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ab4						AssignNumber:
.9ab4		5a		phy				phy
.9ab5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ab7		85 36		sta $36				sta 	zTemp0
.9ab9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9abb		85 37		sta $37				sta 	zTemp0+1
.9abd		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9abf		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ac1		95 50		sta $50,x			sta 	NSStatus,x
.9ac3		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ac5		c9 08		cmp #$08			cmp 	#NSTFloat
.9ac7		f0 24		beq $9aed			beq 	_ANFloat
.9ac9		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9acb		f0 03		beq $9ad0			beq		_ANNotFloat
.9acd		4c 86 a4	jmp $a486			jmp 	RangeError					; if it is, report an error.
.9ad0						_ANNotFloat:
.9ad0		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ad2		29 03		and #$03			and 	#3
.9ad4		d0 05		bne $9adb			bne 	_ANByteWord
.9ad6		20 f8 9a	jsr $9af8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ad9		80 1b		bra $9af6			bra 	_ANExit
.9adb						_ANByteWord:
.9adb		48		pha				pha 								; save count
.9adc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ade		92 36		sta ($36)			sta 	(zTemp0)
.9ae0		68		pla				pla
.9ae1		c9 01		cmp #$01			cmp	 	#1
.9ae3		f0 11		beq $9af6			beq 	_ANExit
.9ae5		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ae7		a0 01		ldy #$01			ldy 	#1
.9ae9		91 36		sta ($36),y			sta 	(zTemp0),y
.9aeb		80 09		bra $9af6			bra 	_ANExit
.9aed						_ANFloat:
.9aed		20 f8 9a	jsr $9af8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9af0		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9af2		a0 04		ldy #$04			ldy 	#4
.9af4		91 36		sta ($36),y			sta 	(zTemp0),y
.9af6						_ANExit:
.9af6		7a		ply				ply
.9af7		60		rts				rts
.9af8						_ANCopy4PackSign:
.9af8		a0 03		ldy #$03			ldy 	#3
.9afa		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9afc		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9afe		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9b00		91 36		sta ($36),y			sta 	(zTemp0),y
.9b02		88		dey				dey
.9b03		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b05		91 36		sta ($36),y			sta 	(zTemp0),y
.9b07		88		dey				dey
.9b08		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b0a		91 36		sta ($36),y			sta 	(zTemp0),y
.9b0c		88		dey				dey
.9b0d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b0f		91 36		sta ($36),y			sta 	(zTemp0),y
.9b11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b12						AssignString:
.9b12		5a		phy				phy
.9b13		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b15		85 38		sta $38				sta 	zTemp1
.9b17		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b19		85 39		sta $39				sta 	zTemp1+1
.9b1b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b1d		85 36		sta $36				sta 	zTemp0
.9b1f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b21		85 37		sta $37				sta 	zTemp0+1
.9b23		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b25		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b27		f0 23		beq $9b4c			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b29		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b2a		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b2c		e9 02		sbc #$02			sbc 	#2
.9b2e		85 3c		sta $3c				sta 	zsTemp
.9b30		a0 01		ldy #$01			ldy 	#1
.9b32		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b34		e9 00		sbc #$00			sbc 	#0
.9b36		85 3d		sta $3d				sta 	zsTemp+1
.9b38		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b3a						_ASGetLength:
.9b3a		c8		iny				iny
.9b3b		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b3d		d0 fb		bne $9b3a			bne 	_ASGetLength
.9b3f		98		tya				tya 								; is this length <= current length
.9b40		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b42		90 1e		bcc $9b62			bcc 	_ASCopyString
.9b44		f0 1c		beq $9b62			beq 	_ASCopyString
.9b46		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b48		a0 01		ldy #$01			ldy 	#1
.9b4a		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b4c						_ASNewStringRequired:
.9b4c		e8		inx				inx 								; concrete the new string.
.9b4d		20 b1 b4	jsr $b4b1			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b50		ca		dex				dex
.9b51		18		clc				clc
.9b52		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b54		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b56		92 36		sta ($36)			sta 	(zTemp0)
.9b58		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b5a		69 00		adc #$00			adc 	#0
.9b5c		a0 01		ldy #$01			ldy 	#1
.9b5e		91 36		sta ($36),y			sta 	(zTemp0),y
.9b60		80 0d		bra $9b6f			bra 	_ASExit
.9b62						_ASCopyString:
.9b62		a0 00		ldy #$00			ldy 	#0
.9b64						_ASCopyLoop:
.9b64		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b66		c8		iny				iny
.9b67		c8		iny				iny
.9b68		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b6a		88		dey				dey
.9b6b		c9 00		cmp #$00			cmp 	#0
.9b6d		d0 f5		bne $9b64			bne 	_ASCopyLoop
.9b6f						_ASExit:
.9b6f		7a		ply				ply
.9b70		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b71						DereferenceTopTwo:
.9b71		e8		inx				inx
.9b72		20 76 9b	jsr $9b76			jsr 	Dereference 				; deref x+1
.9b75		ca		dex				dex  								; falls through to deref x
.9b76						Dereference:
.9b76		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b78		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b7a		f0 48		beq $9bc4			beq 	_DRFExit 					; not a reference, so exit.
.9b7c		5a		phy				phy
.9b7d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b7f		85 36		sta $36				sta 	zTemp0
.9b81		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b83		85 37		sta $37				sta 	zTemp0+1
.9b85		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b87		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b89		95 58		sta $58,x			sta 	NSMantissa0,x
.9b8b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b8d		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b8f		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b91		f0 0e		beq $9ba1			beq 	_DRFDereferenceTwo
.9b93		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b95		f0 2f		beq $9bc6			beq 	_DRFFull
.9b97		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b99		29 03		and #$03			and 	#3
.9b9b		f0 29		beq $9bc6			beq 	_DRFFull 					; the whole word
.9b9d		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b9f		f0 06		beq $9ba7			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9ba1						_DRFDereferenceTwo:
.9ba1		a0 01		ldy #$01			ldy 	#1
.9ba3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ba5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba7						_DRFClear23:
.9ba7		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ba9		74 70		stz $70,x			stz 	NSMantissa3,x
.9bab		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9bad		29 18		and #$18			and 	#NSBTypeMask
.9baf		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9bb1		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9bb3		d0 0e		bne $9bc3			bne 	_DRFNotString
.9bb5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9bb7		15 60		ora $60,x			ora 	NSMantissa1,x
.9bb9		d0 08		bne $9bc3			bne 	_DRFNotString
.9bbb		a9 c5		lda #$c5			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bbd		95 58		sta $58,x			sta 	NSMantissa0,x
.9bbf		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bc1		95 60		sta $60,x			sta 	NSMantissa1,x
.9bc3						_DRFNotString
.9bc3		7a		ply				ply 								; restore Y and exit
.9bc4						_DRFExit:
.9bc4		60		rts				rts
.9bc5						_DRFNullString:
>9bc5		00						.byte 	0
.9bc6						_DRFFull:
.9bc6		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9bc8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bca		95 60		sta $60,x			sta 	NSMantissa1,x
.9bcc		c8		iny				iny
.9bcd		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bcf		95 68		sta $68,x			sta 	NSMantissa2,x
.9bd1		c8		iny				iny
.9bd2		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd4		95 70		sta $70,x			sta 	NSMantissa3,x
.9bd6		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9bd8		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9bda		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9bdc		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bde		f0 05		beq $9be5			beq 	_DRFNoExponent
.9be0		c8		iny				iny 								; if not, read the exponent as well.
.9be1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9be3		95 78		sta $78,x			sta 	NSExponent,x
.9be5						_DRFNoExponent:
.9be5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9be7		10 0a		bpl $9bf3			bpl 	_DRFExit2 					; if not, then exit.
.9be9		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9beb		95 70		sta $70,x			sta 	NSMantissa3,x
.9bed		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bef		09 80		ora #$80			ora 	#NSBIsNegative
.9bf1		95 50		sta $50,x			sta 	NSStatus,x
.9bf3						_DRFExit2:
.9bf3		7a		ply				ply
.9bf4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9bf5						EncodeNumberStart:
.9bf5		38		sec				sec
.9bf6		80 01		bra $9bf9			bra 	EncodeNumberContinue+1
.9bf8						EncodeNumberContinue:
.9bf8		18		clc				clc
.9bf9						EncodeNumber:
.9bf9		08		php				php 								; save reset flag.
.9bfa		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bfc		f0 12		beq $9c10			beq 	_ENIsOkay
.9bfe		c9 30		cmp #$30			cmp 	#"0"
.9c00		90 04		bcc $9c06			bcc 	_ENBadNumber
.9c02		c9 3a		cmp #$3a			cmp 	#"9"+1
.9c04		90 0a		bcc $9c10			bcc 	_ENIsOkay
.9c06						_ENBadNumber:
.9c06		28		plp				plp 								; throw saved reset
.9c07		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9c0a		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c0c		f0 7b		beq $9c89			beq 	_ENConstructFinal
.9c0e						_ENFail:
.9c0e		18		clc				clc 								; not allowed
.9c0f		60		rts				rts
.9c10						_ENIsOkay:
.9c10		28		plp				plp 								; are we restarting
.9c11		90 15		bcc $9c28			bcc 	_ENNoRestart
.9c13						_ENStartEncode:
.9c13		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9c15		f0 0c		beq $9c23			beq 	_ENFirstDP
.9c17		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9c19		20 0b a3	jsr $a30b			jsr 	NSMSetByte 					; in single byte mode.
.9c1c		a9 01		lda #$01			lda 	#ESTA_Low
.9c1e						_ENExitChange:
.9c1e		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9c21		38		sec				sec
.9c22		60		rts				rts
.9c23						_ENFirstDP:
.9c23		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; clear integer part
.9c26		80 3c		bra $9c64			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c28						_ENNoRestart:
.9c28		48		pha				pha 								; save digit or DP on stack.
.9c29		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c2c		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c2e		f0 09		beq $9c39			beq  	_ESTALowState
.9c30		c9 02		cmp #$02			cmp 	#ESTA_High
.9c32		f0 26		beq $9c5a			beq 	_ESTAHighState
.9c34		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c36		f0 38		beq $9c70			beq 	_ESTADecimalState
>9c38		db						.byte 	$DB 						; causes a break in the emulator
.9c39						_ESTALowState:
.9c39		68		pla				pla 								; get value back
.9c3a		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c3c		f0 26		beq $9c64			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c3e		29 0f		and #$0f			and 	#15 						; make digit
.9c40		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c43		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c45		0a		asl a				asl 	a
.9c46		0a		asl a				asl 	a
.9c47		75 58		adc $58,x			adc 	NSMantissa0,x
.9c49		0a		asl a				asl 	a
.9c4a		6d 06 04	adc $0406			adc 	digitTemp
.9c4d		95 58		sta $58,x			sta 	NSMantissa0,x
.9c4f		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c51		90 05		bcc $9c58			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c53		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c55		8d 05 04	sta $0405			sta 	encodeState
.9c58						_ESTANoSwitch:
.9c58		38		sec				sec
.9c59		60		rts				rts
.9c5a						_ESTAHighState:
.9c5a		68		pla				pla 								; get value back
.9c5b		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c5d		f0 05		beq $9c64			beq 	_ESTASwitchFloat
.9c5f		20 bd 9c	jsr $9cbd			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c62		38		sec				sec
.9c63		60		rts				rts
.9c64						_ESTASwitchFloat:
.9c64		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c67		e8		inx				inx 								; zero the decimal additive.
.9c68		20 09 a3	jsr $a309			jsr 	NSMSetZero
.9c6b		ca		dex				dex
.9c6c		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c6e		80 ae		bra $9c1e			bra 	_ENExitChange
.9c70						_ESTADecimalState:
.9c70		68		pla				pla 								; digit.
.9c71		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c73		f0 99		beq $9c0e			beq 	_ENFail
.9c75		e8		inx				inx 								; put digit into fractional part of X+1
.9c76		20 bd 9c	jsr $9cbd			jsr 	ESTAShiftDigitIntoMantissa
.9c79		ca		dex				dex
.9c7a		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c7d		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c80		c9 0b		cmp #$0b			cmp 	#11
.9c82		f0 02		beq $9c86			beq 	_ESTADSFail
.9c84		38		sec				sec
.9c85		60		rts				rts
.9c86						_ESTADSFail:
.9c86		4c 86 a4	jmp $a486			jmp 	RangeError
.9c89						_ENConstructFinal:
.9c89		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c8c		f0 2d		beq $9cbb			beq 	_ENCFExit 					; no decimals
.9c8e		5a		phy				phy
.9c8f		0a		asl a				asl 	a 							; x 4 and CLC
.9c90		0a		asl a				asl 	a
.9c91		6d 07 04	adc $0407			adc 	decimalCount
.9c94		a8		tay				tay
.9c95		b9 45 a4	lda $a445,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c98		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c9a		b9 46 a4	lda $a446,y			lda 	DecimalScalarTable-5+1,y
.9c9d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c9f		b9 47 a4	lda $a447,y			lda 	DecimalScalarTable-5+2,y
.9ca2		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9ca4		b9 48 a4	lda $a448,y			lda 	DecimalScalarTable-5+3,y
.9ca7		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9ca9		b9 49 a4	lda $a449,y			lda 	DecimalScalarTable-5+4,y
.9cac		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9cae		a9 08		lda #$08			lda 	#NSTFloat
.9cb0		95 52		sta $52,x			sta 	NSStatus+2,x
.9cb2		7a		ply				ply
.9cb3		e8		inx				inx 								; multiply decimal const by decimal scalar
.9cb4		20 43 9a	jsr $9a43			jsr 	FloatMultiply
.9cb7		ca		dex				dex
.9cb8		20 fe 98	jsr $98fe			jsr 	FloatAdd 					; add to integer part.
.9cbb						_ENCFExit:
.9cbb		18		clc				clc 								; reject the digit.
.9cbc		60		rts				rts
.9cbd						ESTAShiftDigitIntoMantissa:
.9cbd		29 0f		and #$0f			and 	#15 						; save digit
.9cbf		48		pha				pha
.9cc0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cc2		48		pha				pha
.9cc3		b5 68		lda $68,x			lda 	NSMantissa2,x
.9cc5		48		pha				pha
.9cc6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cc8		48		pha				pha
.9cc9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ccb		48		pha				pha
.9ccc		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 2
.9ccf		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 4
.9cd2		18		clc				clc 								; pop mantissa and add
.9cd3		68		pla				pla
.9cd4		75 58		adc $58,x			adc 	NSMantissa0,x
.9cd6		95 58		sta $58,x			sta 	NSMantissa0,x
.9cd8		68		pla				pla
.9cd9		75 60		adc $60,x			adc 	NSMantissa1,x
.9cdb		95 60		sta $60,x			sta 	NSMantissa1,x
.9cdd		68		pla				pla
.9cde		75 68		adc $68,x			adc 	NSMantissa2,x
.9ce0		95 68		sta $68,x			sta 	NSMantissa2,x
.9ce2		68		pla				pla
.9ce3		75 70		adc $70,x			adc 	NSMantissa3,x
.9ce5		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9ce7		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 10
.9cea		68		pla				pla 								; add digit
.9ceb		18		clc				clc
.9cec		75 58		adc $58,x			adc 	NSMantissa0,x
.9cee		95 58		sta $58,x			sta 	NSMantissa0,x
.9cf0		90 0a		bcc $9cfc			bcc 	_ESTASDExit
.9cf2		f6 60		inc $60,x			inc 	NSMantissa1,x
.9cf4		d0 06		bne $9cfc			bne 	_ESTASDExit
.9cf6		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cf8		d0 02		bne $9cfc			bne 	_ESTASDExit
.9cfa		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cfc						_ESTASDExit:
.9cfc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cfd						EvaluateTerm:
.9cfd		b1 30		lda ($30),y			lda 	(codePtr),y
.9cff		30 18		bmi $9d19			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d01		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d03		b0 6c		bcs $9d71			bcs 	_ETVariable
.9d05		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d07		90 6b		bcc $9d74			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d09		c9 3a		cmp #$3a			cmp 	#'9'+1
.9d0b		b0 67		bcs $9d74			bcs 	_ETPuncUnary
.9d0d		20 f5 9b	jsr $9bf5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d10						_ETNumber:
.9d10		c8		iny				iny 								; keep encoding until we have the numbers
.9d11		b1 30		lda ($30),y			lda 	(codePtr),y
.9d13		20 f8 9b	jsr $9bf8			jsr 	EncodeNumberContinue
.9d16		b0 f8		bcs $9d10			bcs 	_ETNumber 					; go back if accepted.
.9d18		60		rts				rts
.9d19						_ETCheckUnary:
.9d19		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d1b		f0 3f		beq $9d5c			beq 	_ETString
.9d1d		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d1f		f0 12		beq $9d33			beq 	_ETHexConstant
.9d21		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d23		90 0b		bcc $9d30			bcc 	_ETSyntaxError
.9d25		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d27		b0 07		bcs $9d30			bcs 	_ETSyntaxError
.9d29		da		phx				phx 								; push X on the stack
.9d2a		0a		asl a				asl 	a 							; put vector x 2 into X
.9d2b		aa		tax				tax
.9d2c		c8		iny				iny 								; consume unary function token
.9d2d		7c 9a 90	jmp ($909a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d30						_ETSyntaxError:
.9d30		4c 81 a4	jmp $a481			jmp 	SyntaxError
.9d33						_ETHexConstant:
.9d33		c8		iny				iny 								; skip #
.9d34		c8		iny				iny 								; skip count
.9d35		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; clear result
.9d38						_ETHLoop:
.9d38		b1 30		lda ($30),y			lda 	(codePtr),y
.9d3a		c8		iny				iny 								; and consume
.9d3b		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d3d		f0 1c		beq $9d5b			beq 	_ETHExit
.9d3f		48		pha				pha 								; save on stack.
.9d40		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 2
.9d43		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 4
.9d46		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 8
.9d49		20 18 a3	jsr $a318			jsr 	NSMShiftLeft 				; x 16
.9d4c		68		pla				pla 								; ASCII
.9d4d		c9 41		cmp #$41			cmp 	#'A'
.9d4f		90 02		bcc $9d53			bcc 	_ETHNotChar
.9d51		e9 07		sbc #$07			sbc 	#7
.9d53						_ETHNotChar:
.9d53		29 0f		and #$0f			and 	#15 						; digit now
.9d55		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d57		95 58		sta $58,x			sta 	NSMantissa0,x
.9d59		80 dd		bra $9d38			bra 	_ETHLoop 					; go round.
.9d5b						_ETHExit:
.9d5b		60		rts				rts
.9d5c						_ETString:
.9d5c		c8		iny				iny 								; look at length
.9d5d		b1 30		lda ($30),y			lda 	(codePtr),y
.9d5f		48		pha				pha
.9d60		c8		iny				iny 								; first character
.9d61		20 08 a7	jsr $a708			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d64		68		pla				pla 								; restore count and save
.9d65		85 36		sta $36				sta 	zTemp0
.9d67		98		tya				tya 								; add length to Y to skip it.
.9d68		18		clc				clc
.9d69		65 36		adc $36				adc 	zTemp0
.9d6b		a8		tay				tay
.9d6c		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d6e		95 50		sta $50,x			sta 	NSStatus,x
.9d70		60		rts				rts
.9d71						_ETVariable:
.9d71		4c c6 9d	jmp $9dc6			jmp 	VariableHandler
.9d74						_ETPuncUnary:
.9d74		c8		iny				iny 								; consume the unary character
.9d75		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d77		f0 2b		beq $9da4			beq 	_ETUnaryNegate
.9d79		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9d7b		f0 36		beq $9db3			beq 	_ETDereference
.9d7d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d7f		f0 3e		beq $9dbf			beq 	_ETParenthesis
.9d81		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d83		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d85		f0 06		beq $9d8d			beq 	_ETIndirection
.9d87		e6 36		inc $36				inc 	zTemp0
.9d89		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d8b		d0 a3		bne $9d30			bne 	_ETSyntaxError
.9d8d						_ETIndirection:
.9d8d		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d8f		1a		inc a				inc 	a
.9d90		48		pha				pha
.9d91		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm				; evaluate the term
.9d94		20 76 9b	jsr $9b76			jsr 	Dereference 				; dereference it.
.9d97		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d99		d0 06		bne $9da1			bne 	_ETTypeMismatch
.9d9b		68		pla				pla 								; indirection 1-2
.9d9c		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d9e		95 50		sta $50,x			sta 	NSStatus,x
.9da0		60		rts				rts
.9da1						_ETTypeMismatch:
.9da1		4c 8b a4	jmp $a48b			jmp 	TypeError
.9da4						_ETUnaryNegate:
.9da4		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm				; evaluate the term
.9da7		20 76 9b	jsr $9b76			jsr 	Dereference 				; dereference it.
.9daa		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9dac		29 10		and #$10			and 	#NSTString
.9dae		d0 f1		bne $9da1			bne 	_ETTypeMismatch
.9db0		4c cb a2	jmp $a2cb			jmp 	NSMNegate  					; just toggles the sign bit.
.9db3						_ETDereference:
.9db3		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm				; evaluate the term
.9db6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9db8		29 20		and #$20			and 	#NSBIsReference
.9dba		f0 e5		beq $9da1			beq 	_ETTypeMismatch
.9dbc		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9dbe		60		rts				rts
.9dbf						_ETParenthesis:
.9dbf		20 b3 98	jsr $98b3			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9dc2		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check for )
.9dc5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9dc6						VariableHandler:
.9dc6		b1 30		lda ($30),y			lda 	(codePtr),y
.9dc8		18		clc				clc
.9dc9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9dcb		85 37		sta $37				sta 	zTemp0+1
.9dcd		c8		iny				iny
.9dce		b1 30		lda ($30),y			lda 	(codePtr),y
.9dd0		85 36		sta $36				sta 	zTemp0
.9dd2		c8		iny				iny
.9dd3		18		clc				clc									; copy variable address+3 to mantissa
.9dd4		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9dd6		95 58		sta $58,x			sta 	NSMantissa0,x
.9dd8		a5 37		lda $37				lda 	zTemp0+1
.9dda		69 00		adc #$00			adc 	#0
.9ddc		95 60		sta $60,x			sta 	NSMantissa1,x
.9dde		74 68		stz $68,x			stz 	NSMantissa2,x
.9de0		74 70		stz $70,x			stz 	NSMantissa3,x
.9de2		74 78		stz $78,x			stz 	NSExponent,x
.9de4		5a		phy				phy
.9de5		a0 02		ldy #$02			ldy 	#2 							; read type
.9de7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9de9		7a		ply				ply
.9dea		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9dec		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dee		95 50		sta $50,x			sta 	NSStatus,x
.9df0		29 04		and #$04			and 	#NSBIsArray
.9df2		d0 01		bne $9df5			bne 	_VHArray
.9df4		60		rts				rts
.9df5						_VHArray:
.9df5		e8		inx				inx
.9df6		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9df9		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9dfb		95 51		sta $51,x			sta 	NSStatus+1,x
.9dfd		b1 30		lda ($30),y			lda 	(codePtr),y
.9dff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e01		d0 06		bne $9e09			bne 	_VHNoSecondIndex
.9e03		c8		iny				iny 								; skip the comma
.9e04		e8		inx				inx
.9e05		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e08		ca		dex				dex
.9e09						_VHNoSecondIndex:
.9e09		ca		dex				dex 								; set X back.
.9e0a		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; and check the right bracket.
.9e0d		5a		phy				phy 								; save position
.9e0e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9e10		85 3e		sta $3e				sta 	zaTemp
.9e12		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e14		85 3f		sta $3f				sta 	zaTemp+1
.9e16		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9e18		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e1a		f0 5d		beq $9e79			beq 	_VHBadArray
.9e1c		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e1e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e20		f0 02		beq $9e24			beq 	_VHHas2Mask
.9e22		a9 ff		lda #$ff			lda 	#$FF
.9e24						_VHHas2Mask:
.9e24		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e26		f0 4c		beq $9e74			beq 	_VHBadIndex
.9e28		0a		asl a				asl 	a 							; carry will be set if a second index
.9e29		90 08		bcc $9e33			bcc 	_VHCheckFirstIndex
.9e2b		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e2d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e2f		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e31		90 41		bcc $9e74			bcc 	_VHBadIndex
.9e33						_VHCheckFirstIndex:
.9e33		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e35		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e37		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e39		90 39		bcc $9e74			bcc 	_VHBadIndex
.9e3b		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e3d		64 37		stz $37				stz 	zTemp0+1
.9e3f		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e41		30 0e		bmi $9e51			bmi 	_VHNoMultiply
.9e43		da		phx				phx
.9e44		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e46		48		pha				pha
.9e47		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e49		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e4b		1a		inc a				inc 	a 							; add 1 for zero base
.9e4c		fa		plx				plx
.9e4d		20 b4 a2	jsr $a2b4			jsr 	Multiply8x8 				; calculate -> Z0
.9e50		fa		plx				plx
.9e51						_VHNoMultiply:
.9e51		18		clc				clc
.9e52		a5 36		lda $36				lda 	zTemp0
.9e54		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e56		85 36		sta $36				sta 	zTemp0
.9e58		a5 37		lda $37				lda 	zTemp0+1
.9e5a		69 00		adc #$00			adc 	#0
.9e5c		85 37		sta $37				sta 	zTemp0+1
.9e5e		b5 50		lda $50,x			lda 	NSStatus,x
.9e60		20 48 89	jsr $8948			jsr 	ScaleByBaseType
.9e63		18		clc				clc
.9e64		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e66		65 36		adc $36				adc 	zTemp0
.9e68		95 58		sta $58,x			sta 	NSMantissa0,x
.9e6a		a0 01		ldy #$01			ldy 	#1
.9e6c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e6e		65 37		adc $37				adc 	zTemp0+1
.9e70		95 60		sta $60,x			sta 	NSMantissa1,x
.9e72		7a		ply				ply 								; restore position
.9e73		60		rts				rts
.9e74						_VHBadIndex:
.9e74		a9 17		lda #$17		lda	#23
.9e76		4c a9 93	jmp $93a9		jmp	ErrorHandler
.9e79						_VHBadArray:
.9e79		a9 18		lda #$18		lda	#24
.9e7b		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e7e						AbsUnary:
.9e7e		fa		plx				plx 								; restore stack pos
.9e7f		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; get a float or int
.9e82		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9e85		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e87		29 7f		and #$7f			and 	#$7F
.9e89		95 50		sta $50,x			sta 	NSStatus,x
.9e8b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e8c						AllocUnary:
.9e8c		fa		plx				plx 								; restore stack pos
.9e8d		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger		; get bytes required.
.9e90		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9e93		da		phx				phx 								; save X/Y
.9e94		5a		phy				phy
.9e95		8a		txa				txa 								; copy X into Y
.9e96		a8		tay				tay
.9e97		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e9a		aa		tax				tax
.9e9b		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e9e		20 ab 9e	jsr $9eab			jsr 	AllocateXABytes 			; allocate memory
.9ea1		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9ea4		8a		txa				txa 	 							; typing is 16 bit integer.
.9ea5		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9ea8		7a		ply				ply
.9ea9		fa		plx				plx
.9eaa		60		rts				rts
.9eab						AllocateXABytes:
.9eab		5a		phy				phy
.9eac		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9eaf		84 36		sty $36				sty 	zTemp0
.9eb1		5a		phy				phy
.9eb2		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9eb5		84 37		sty $37				sty 	zTemp0+1
.9eb7		5a		phy				phy
.9eb8		18		clc				clc 								; add to low memory pointer
.9eb9		6d 08 04	adc $0408			adc 	lowMemPtr
.9ebc		8d 08 04	sta $0408			sta 	lowMemPtr
.9ebf		8a		txa				txa
.9ec0		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9ec3		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9ec6		b0 2f		bcs $9ef7			bcs 	CISSMemory
.9ec8		20 e9 9e	jsr $9ee9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ecb						_ClearMemory:
.9ecb		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9ece		c5 36		cmp $36				cmp 	zTemp0
.9ed0		d0 07		bne $9ed9			bne 	_CMClearNext
.9ed2		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9ed5		c5 37		cmp $37				cmp 	zTemp0+1
.9ed7		f0 0c		beq $9ee5			beq 	_CMExit
.9ed9						_CMClearNext:
.9ed9		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9edb		92 36		sta ($36)			sta 	(zTemp0)
.9edd		e6 36		inc $36				inc 	zTemp0
.9edf		d0 ea		bne $9ecb			bne 	_ClearMemory
.9ee1		e6 37		inc $37				inc		zTemp0+1
.9ee3		80 e6		bra $9ecb			bra 	_ClearMemory
.9ee5						_CMExit:
.9ee5		fa		plx				plx
.9ee6		68		pla				pla
.9ee7		7a		ply				ply
.9ee8		60		rts				rts
.9ee9						CheckIdentifierStringSpace:
.9ee9		48		pha				pha
.9eea		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9eed		18		clc				clc
.9eee		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ef0		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9ef3		b0 02		bcs $9ef7			bcs 	CISSMemory
.9ef5		68		pla				pla
.9ef6		60		rts				rts
.9ef7						CISSMemory:
.9ef7		a9 06		lda #$06		lda	#6
.9ef9		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9efc						AscUnary:
.9efc		fa		plx				plx 								; restore stack pos
.9efd		20 61 a2	jsr $a261			jsr 	EvaluateString 				; get a string
.9f00		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9f02		20 0b a3	jsr $a30b			jsr 	NSMSetByte 					; ASC("") will return zero.
.9f05		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9f08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9f09						FracUnary:
.9f09		fa		plx				plx 								; restore stack pos
.9f0a		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; get a float or int
.9f0d		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9f10		b5 50		lda $50,x			lda 	NSStatus,x
.9f12		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f14		f0 04		beq $9f1a			beq 	_IUZero
.9f16		20 c4 99	jsr $99c4			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9f19		60		rts				rts
.9f1a						_IUZero:
.9f1a		20 09 a3	jsr $a309			jsr 	NSMSetZero
.9f1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f1e						IntUnary:
.9f1e		fa		plx				plx 								; restore stack pos
.9f1f		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; get a float or int
.9f22		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9f25		b5 50		lda $50,x			lda 	NSStatus,x
.9f27		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f29		f0 03		beq $9f2e			beq 	_IUExit
.9f2b		20 1c 9a	jsr $9a1c			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f2e						_IUExit:
.9f2e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f2f						LenUnary:
.9f2f		fa		plx				plx 								; restore stack pos
.9f30		20 61 a2	jsr $a261			jsr 	EvaluateString 				; get a string
.9f33		5a		phy				phy
.9f34		a0 00		ldy #$00			ldy 	#0 							; find length
.9f36						_LenFind:
.9f36		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f38		f0 06		beq $9f40			beq 	_LenExit
.9f3a		c8		iny				iny
.9f3b		d0 f9		bne $9f36			bne 	_LenFind
.9f3d		4c 86 a4	jmp $a486			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f40						_LenExit:
.9f40		98		tya				tya		 							; return length
.9f41		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.9f44		7a		ply				ply
.9f45		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9f48		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f49						Unary_Min:
.9f49		a9 01		lda #$01			lda 	#1
.9f4b		80 02		bra $9f4f			bra 	UnaryMinMaxMain
.9f4d						Unary_Max:
.9f4d		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f4f						UnaryMinMaxMain:
.9f4f		fa		plx				plx 								; get index on number stack
.9f50		48		pha				pha 								; save comparator
.9f51		20 4e a2	jsr $a24e			jsr 	EvaluateValue 				; get the first value.
.9f54						_UMMMLoop:
.9f54		b1 30		lda ($30),y			lda 	(codePtr),y
.9f56		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f58		f0 22		beq $9f7c			beq 	_UMMMDone
.9f5a		20 98 93	jsr $9398			jsr 	CheckComma 					; must be a comma
.9f5d		e8		inx				inx
.9f5e		20 4e a2	jsr $a24e			jsr 	EvaluateValue
.9f61		ca		dex				dex
.9f62		20 ec a2	jsr $a2ec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f65		e8		inx				inx
.9f66		20 ec a2	jsr $a2ec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f69		e8		inx				inx
.9f6a		20 66 94	jsr $9466			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f6d		ca		dex				dex
.9f6e		ca		dex				dex
.9f6f		85 36		sta $36				sta 	zTemp0 						; save required result
.9f71		68		pla				pla 								; get and save comparator
.9f72		48		pha				pha
.9f73		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f75		d0 dd		bne $9f54			bne 	_UMMMLoop
.9f77		20 7f 9f	jsr $9f7f			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f7a		80 d8		bra $9f54			bra 	_UMMMLoop
.9f7c						_UMMMDone:
.9f7c		68		pla				pla 								; throw the comparator
.9f7d		c8		iny				iny 								; skip )
.9f7e		60		rts				rts
.9f7f						ExpCopyAboveDown:
.9f7f		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f81		95 50		sta $50,x			sta 	NSStatus,x
.9f83		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f85		95 78		sta $78,x			sta 	NSExponent,x
.9f87		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f89		95 58		sta $58,x			sta 	NSMantissa0,x
.9f8b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f8d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f8f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f91		95 68		sta $68,x			sta 	NSMantissa2,x
.9f93		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f95		95 70		sta $70,x			sta 	NSMantissa3,x
.9f97		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f98						Unary_Not:
.9f98		fa		plx				plx
.9f99		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; get integer
.9f9c		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9f9f		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; zero mantissa ?
.9fa2		f0 04		beq $9fa8			beq 	_NotZero
.9fa4		20 09 a3	jsr $a309			jsr 	NSMSetZero
.9fa7		60		rts				rts
.9fa8						_NotZero:
.9fa8		4c 1c 94	jmp $941c			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9fab						PeekByteUnary:
.9fab		a9 01		lda #$01			lda 	#1
.9fad		80 0a		bra $9fb9			bra 	PeekUnary
.9faf						PeekWUnary:
.9faf		a9 02		lda #$02			lda 	#2
.9fb1		80 06		bra $9fb9			bra 	PeekUnary
.9fb3						PeekLUnary:
.9fb3		a9 03		lda #$03			lda 	#3
.9fb5		80 02		bra $9fb9			bra 	PeekUnary
.9fb7						PeekDUnary:
.9fb7		a9 04		lda #$04			lda 	#4
.9fb9						PeekUnary:
.9fb9		fa		plx				plx 								; restore position.
.9fba		48		pha				pha 								; save count to copy on stack
.9fbb		20 89 a2	jsr $a289			jsr		Evaluate16BitInteger 		; address as constant.
.9fbe		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9fc1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fc3		85 36		sta $36				sta 	zTemp0
.9fc5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fc7		85 37		sta $37				sta 	zTemp0+1
.9fc9		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; clear the result to zero.
.9fcc		68		pla				pla 								; count in zTemp2
.9fcd		85 3a		sta $3a				sta 	zTemp2
.9fcf		da		phx				phx 								; save stack position and offset of read
.9fd0		5a		phy				phy
.9fd1		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fd3						_PULoop:
.9fd3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fd5		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fd7		c8		iny				iny 								; next byte to write
.9fd8		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fd9		18		clc				clc
.9fda		69 08		adc #$08			adc 	#MathStackSize
.9fdc		aa		tax				tax
.9fdd		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fdf		d0 f2		bne $9fd3			bne 	_PULoop
.9fe1		7a		ply				ply 								; restore stack/code pos and exit.
.9fe2		fa		plx				plx
.9fe3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9fe4						SgnUnary:
.9fe4		fa		plx				plx 								; restore stack pos
.9fe5		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; get a float or int
.9fe8		20 90 93	jsr $9390			jsr 	CheckRightBracket
.9feb		20 2b a3	jsr $a32b			jsr 	NSMIsZero 					; if zero
.9fee		f0 0e		beq $9ffe			beq 	_SGZero  					; return Int Zero
.9ff0		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9ff2		48		pha				pha
.9ff3		a9 01		lda #$01			lda 	#1 							; set to 1
.9ff5		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.9ff8		68		pla				pla
.9ff9		29 80		and #$80			and		#$80 						; copy the sign byte out
.9ffb		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9ffd		60		rts				rts
.9ffe		20 09 a3	jsr $a309	_SGZero:jsr 	NSMSetZero
.a001		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a002						ValUnary:
.a002		fa		plx				plx 								; restore stack pos
.a003		20 18 a0	jsr $a018			jsr 	ValMainCode 				; do the main val() code
.a006		b0 01		bcs $a009			bcs 	_VUError 					; couldn't convert
.a008		60		rts				rts
.a009						_VUError:
.a009		4c 8b a4	jmp $a48b			jmp 	TypeError
.a00c						IsValUnary:
.a00c		fa		plx				plx 								; restore stack pos
.a00d		20 18 a0	jsr $a018			jsr 	ValMainCode 				; do the main val() code
.a010		b0 03		bcs $a015			bcs 	_VUBad
.a012		4c 1c 94	jmp $941c			jmp 	ReturnTrue
.a015						_VUBad:
.a015		4c 27 94	jmp $9427			jmp 	ReturnFalse
.a018						ValMainCode:
.a018		20 61 a2	jsr $a261			jsr 	EvaluateString 				; get a string
.a01b		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check right bracket present
.a01e						ValEvaluateZTemp0:
.a01e		5a		phy				phy
.a01f		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a021		f0 17		beq $a03a			beq 	_VMCFail2
.a023		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a025		48		pha				pha 								; save first character
.a026		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a028		d0 01		bne $a02b			bne 	_VMCStart
.a02a		c8		iny				iny 								; skip over -
.a02b						_VMCStart:
.a02b		38		sec				sec 								; initialise first time round.
.a02c						_VMCNext:
.a02c		c8		iny				iny 								; pre-increment
.a02d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a02f		f0 0c		beq $a03d			beq 	_VMCSuccess 				; successful.
.a031		20 f9 9b	jsr $9bf9			jsr 	EncodeNumber 				; send it to the number-builder
.a034		90 03		bcc $a039			bcc 	_VMCFail 					; if failed, give up.
.a036		18		clc				clc 								; next time round, countinue
.a037		80 f3		bra $a02c			bra 	_VMCNext
.a039						_VMCFail:
.a039		68		pla				pla
.a03a						_VMCFail2:
.a03a		7a		ply				ply
.a03b		38		sec				sec
.a03c		60		rts				rts
.a03d						_VMCSuccess:
.a03d		a9 00		lda #$00			lda 	#0 							; construct final
.a03f		20 f9 9b	jsr $9bf9			jsr 	EncodeNumber 				; by sending a duff value.
.a042		68		pla				pla 								; if it was -ve
.a043		c9 2d		cmp #$2d			cmp 	#"-"
.a045		d0 03		bne $a04a			bne 	_VMCNotNegative
.a047		20 cb a2	jsr $a2cb			jsr		NSMNegate 					; negate it.
.a04a						_VMCNotNegative:
.a04a		7a		ply				ply
.a04b		18		clc				clc
.a04c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a04d						ChrUnary:
.a04d		fa		plx				plx 								; restore stack pos
.a04e		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a051		48		pha				pha
.a052		20 90 93	jsr $9390			jsr 	CheckRightBracket
.a055		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a057		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.a05a		68		pla				pla 								; write number to it
.a05b		20 67 b5	jsr $b567			jsr 	StringTempWrite
.a05e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a05f						ItemCountUnary:
.a05f		fa		plx				plx
.a060		20 61 a2	jsr $a261			jsr 	EvaluateString
.a063		e8		inx				inx
.a064		20 d7 a0	jsr $a0d7			jsr 	ICGetSeperator
.a067		ca		dex				dex
.a068		20 f8 a0	jsr $a0f8			jsr 	ICSetPointer 				; zTemp0 = (string)
.a06b		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; zero the result.
.a06e		5a		phy				phy
.a06f		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a071						_ICULoop:
.a071		c8		iny				iny
.a072		b1 36		lda ($36),y			lda 	(zTemp0),y
.a074		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a077		d0 02		bne $a07b			bne 	_ICUNoMatch
.a079		f6 58		inc $58,x			inc 	NSMantissa0,x
.a07b						_ICUNoMatch:
.a07b		c9 00		cmp #$00			cmp 	#0
.a07d		d0 f2		bne $a071			bne 	_ICULoop
.a07f		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a081		7a		ply				ply
.a082		60		rts				rts
.a083						ItemGetUnary:
.a083		fa		plx				plx
.a084		20 61 a2	jsr $a261			jsr 	EvaluateString 				; search string
.a087		20 98 93	jsr $9398			jsr 	CheckComma
.a08a		e8		inx				inx 								; get count
.a08b		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a08e		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a090		f0 61		beq $a0f3			beq 	ICGSRange
.a092		e8		inx				inx 								; get seperator.
.a093		20 d7 a0	jsr $a0d7			jsr 	ICGetSeperator
.a096		ca		dex				dex
.a097		ca		dex				dex
.a098		5a		phy				phy
.a099		20 f8 a0	jsr $a0f8			jsr 	ICSetPointer 				; zTemp0 points to string.
.a09c		a0 00		ldy #$00			ldy 	#0
.a09e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a0a0		f0 0e		beq $a0b0			beq 	_IGUFoundStart
.a0a2						_IGUFindNext:
.a0a2		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a0a4		f0 4d		beq $a0f3			beq 	ICGSRange 					; eol, not found.
.a0a6		c8		iny				iny
.a0a7		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a0aa		d0 f6		bne $a0a2			bne 	_IGUFindNext
.a0ac		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a0ae		d0 f2		bne $a0a2			bne 	_IGUFindNext
.a0b0						_IGUFoundStart:
.a0b0		84 38		sty $38				sty 	zTemp1 						; save start
.a0b2		88		dey				dey
.a0b3						_IGUFindLength:
.a0b3		c8		iny				iny 								; forward till seperator/EOS
.a0b4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b6		f0 05		beq $a0bd			beq 	_IGUFoundLength
.a0b8		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a0bb		d0 f6		bne $a0b3			bne 	_IGUFindLength
.a0bd						_IGUFoundLength:
.a0bd		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a0bf		98		tya				tya 								; calculate length of new string.
.a0c0		38		sec				sec
.a0c1		e5 38		sbc $38				sbc 	zTemp1
.a0c3		20 2e b5	jsr $b52e			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0c6		a4 38		ldy $38				ldy 	zTemp1
.a0c8						_IGUCopySub:
.a0c8		c4 39		cpy $39				cpy 	zTemp1+1
.a0ca		f0 08		beq $a0d4			beq 	_IGUCopyOver
.a0cc		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ce		20 67 b5	jsr $b567			jsr 	StringTempWrite
.a0d1		c8		iny				iny
.a0d2		80 f4		bra $a0c8			bra 	_IGUCopySub
.a0d4						_IGUCopyOver:
.a0d4		7a		ply				ply
.a0d5		60		rts				rts
>a0d6		db						.byte 	$DB 						; causes a break in the emulator
.a0d7						ICGetSeperator:
.a0d7		20 98 93	jsr $9398			jsr 	CheckComma 					; preceding comma
.a0da		20 61 a2	jsr $a261			jsr 	EvaluateString 				; seperator string
.a0dd		20 f8 a0	jsr $a0f8			jsr 	ICSetPointer 				; access it
.a0e0		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0e2		8d a7 07	sta $07a7			sta 	ICSeperator
.a0e5		f0 0c		beq $a0f3			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0e7		5a		phy				phy
.a0e8		a0 01		ldy #$01			ldy 	#1
.a0ea		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ec		d0 05		bne $a0f3			bne 	ICGSRange
.a0ee		7a		ply				ply
.a0ef		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check following )
.a0f2		60		rts				rts
.a0f3						ICGSRange:
.a0f3		a9 04		lda #$04		lda	#4
.a0f5		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a0f8						ICSetPointer:
.a0f8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a0fa		85 36		sta $36				sta 	zTemp0
.a0fc		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0fe		85 37		sta $37				sta 	zTemp0+1
.a100		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a101						SpcUnary:
.a101		fa		plx				plx 								; restore stack pos
.a102		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger			; get value
.a105		5a		phy				phy
.a106		48		pha				pha 								; save count
.a107		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.a10a		7a		ply				ply 								; to do count in Y
.a10b						_SpcLoop:
.a10b		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a10d		f0 08		beq $a117			beq 	_SpcExit
.a10f		a9 20		lda #$20			lda 	#32
.a111		20 67 b5	jsr $b567			jsr 	StringTempWrite
.a114		88		dey				dey
.a115		80 f4		bra $a10b			bra 	_SpcLoop
.a117						_SpcExit:
.a117		7a		ply				ply
.a118		20 90 93	jsr $9390			jsr 	CheckRightBracket
.a11b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a11c						Unary_Str:
.a11c		fa		plx				plx
.a11d		20 57 a2	jsr $a257			jsr 	EvaluateNumber  			; get number
.a120		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; closing bracket
.a123		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a125		20 3e a1	jsr $a13e			jsr 	ConvertNumberToString 		; do the conversion.
.a128		a9 21		lda #$21			lda		#33 						; create buffer
.a12a		20 2e b5	jsr $b52e			jsr 	StringTempAllocate 			; allocate memory
.a12d		da		phx				phx  								; copy the converted string into the buffer.
.a12e		a2 00		ldx #$00			ldx 	#0
.a130						_USCopy:
.a130		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a133		20 67 b5	jsr $b567			jsr 	StringTempWrite
.a136		e8		inx				inx
.a137		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a13a		d0 f4		bne $a130			bne 	_USCopy
.a13c		fa		plx				plx
.a13d		60		rts				rts
.a13e						ConvertNumberToString:
.a13e		5a		phy				phy 								; save code position
.a13f		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a142		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a145		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a147		10 09		bpl $a152			bpl 	_CNTSNotNegative
.a149		29 7f		and #$7f			and 	#$7F 						; make +ve
.a14b		95 50		sta $50,x			sta 	NSStatus,x
.a14d		a9 2d		lda #$2d			lda 	#"-"
.a14f		20 b3 a1	jsr $a1b3			jsr 	WriteDecimalBuffer
.a152						_CNTSNotNegative:
.a152		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a154		f0 12		beq $a168			beq 	_CNTSNotFloat
.a156		e8		inx				inx 								; round up so we don't get too many 6.999999
.a157		a9 01		lda #$01			lda 	#1
.a159		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.a15c		ca		dex				dex
.a15d		b5 78		lda $78,x			lda		NSExponent,x
.a15f		95 79		sta $79,x			sta 	NSExponent+1,x
.a161		a9 08		lda #$08			lda 	#NSTFloat
.a163		95 51		sta $51,x			sta 	NSStatus+1,x
.a165		20 fe 98	jsr $98fe			jsr 	FloatAdd
.a168						_CNTSNotFloat:
.a168		20 95 a1	jsr $a195			jsr 	MakePlusTwoString 			; do the integer part.
.a16b		20 c4 99	jsr $99c4			jsr 	FloatFractionalPart 		; get the fractional part
.a16e		20 75 9a	jsr $9a75			jsr 	NSNormalise					; normalise , exit if zero
.a171		f0 20		beq $a193			beq 	_CNTSExit
.a173		a9 2e		lda #$2e			lda 	#"."
.a175		20 b3 a1	jsr $a1b3			jsr 	WriteDecimalBuffer 			; write decimal place
.a178						_CNTSDecimal:
.a178		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a17b		30 16		bmi $a193			bmi 	_CNTSExit
.a17d		e8		inx				inx 								; x 10.0
.a17e		a9 0a		lda #$0a			lda 	#10
.a180		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.a183		a9 08		lda #$08			lda 	#NSTFloat
.a185		95 50		sta $50,x			sta 	NSStatus,x
.a187		ca		dex				dex
.a188		20 43 9a	jsr $9a43			jsr 	FloatMultiply
.a18b		20 95 a1	jsr $a195			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a18e		20 c4 99	jsr $99c4			jsr 	FloatFractionalPart 		; get the fractional part
.a191		80 e5		bra $a178			bra 	_CNTSDecimal 				; keep going.
.a193						_CNTSExit:
.a193		7a		ply				ply
.a194		60		rts				rts
.a195						MakePlusTwoString:
.a195		da		phx				phx
.a196		20 ec a2	jsr $a2ec			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a199		e8		inx				inx 								; access it
.a19a		e8		inx				inx
.a19b		20 1c 9a	jsr $9a1c			jsr 	FloatIntegerPart 			; make it an integer
.a19e		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a1a0		20 2e 98	jsr $982e			jsr 	ConvertInt32
.a1a3		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a1a5						_MPTSCopy:
.a1a5		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a1a8		20 b3 a1	jsr $a1b3			jsr 	WriteDecimalBuffer
.a1ab		e8		inx				inx
.a1ac		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a1af		d0 f4		bne $a1a5			bne 	_MPTSCopy
.a1b1		fa		plx				plx
.a1b2		60		rts				rts
.a1b3						WriteDecimalBuffer:
.a1b3		da		phx				phx
.a1b4		ae 11 04	ldx $0411			ldx 	dbOffset
.a1b7		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a1ba		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a1bd		ee 11 04	inc $0411			inc 	dbOffset
.a1c0		fa		plx				plx
.a1c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1c2						Unary_Left:
.a1c2		fa		plx				plx
.a1c3		18		clc				clc 								; only one parameter
.a1c4		20 27 a2	jsr $a227			jsr 	SubstringInitial 			; set up.
.a1c7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1c9		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1cb		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1cd		80 25		bra $a1f4			bra 	SubstringMain
.a1cf						Unary_Right:
.a1cf		fa		plx				plx
.a1d0		18		clc				clc 								; only one parameter
.a1d1		20 27 a2	jsr $a227			jsr 	SubstringInitial 			; set up.
.a1d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1d6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1d8		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1da		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1dc		b0 02		bcs $a1e0			bcs 	_URNotUnderflow
.a1de		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1e0						_URNotUnderflow:
.a1e0		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1e2		80 10		bra $a1f4			bra 	SubstringMain
.a1e4						Unary_Mid:
.a1e4		fa		plx				plx
.a1e5		38		sec				sec 								; two parameters
.a1e6		20 27 a2	jsr $a227			jsr 	SubstringInitial 			; set up.
.a1e9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1eb		f0 04		beq $a1f1			beq 	_UMError
.a1ed		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1ef		80 03		bra $a1f4			bra 	SubstringMain
.a1f1						_UMError:
.a1f1		4c 90 a4	jmp $a490			jmp 	ArgumentError
.a1f4						SubstringMain:
.a1f4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1f6		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1f8		b0 27		bcs $a221			bcs 	_SSMNull 					; if so, return an empty string.
.a1fa		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1fc		f0 23		beq $a221			beq 	_SSMNull 					; return empty string.
.a1fe		18		clc				clc 								; add the offset +1 to the address and
.a1ff		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a201		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a203		85 36		sta $36				sta 	zTemp0
.a205		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a207		69 00		adc #$00			adc 	#0
.a209		85 37		sta $37				sta 	zTemp0+1
.a20b						_SSMNoCarry:
.a20b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a20d		20 2e b5	jsr $b52e			jsr 	StringTempAllocate 			; allocate that many characters
.a210		5a		phy				phy 								; save Y
.a211		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a213						_SSMCopy:
.a213		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a215		f0 08		beq $a21f			beq 	_SSMEString 				; no more to copy
.a217		20 67 b5	jsr $b567			jsr 	StringTempWrite 			; and write it out.
.a21a		c8		iny				iny
.a21b		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a21d		d0 f4		bne $a213			bne 	_SSMCopy
.a21f						_SSMEString:
.a21f		7a		ply				ply
.a220						_SSMExit:
.a220		60		rts				rts
.a221						_SSMNull:
.a221		a9 00		lda #$00			lda 	#0
.a223		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.a226		60		rts				rts
.a227						SubstringInitial:
.a227		da		phx				phx 								; save initial stack position
.a228		08		php				php 								; save carry on stack indicating 2 parameters
.a229		20 61 a2	jsr $a261			jsr 	EvaluateString 				; get a string
.a22c		5a		phy				phy 								; calculate length to exponent.
.a22d		a0 ff		ldy #$ff			ldy 	#$FF
.a22f						_SIFindLength:
.a22f		c8		iny				iny
.a230		b1 36		lda ($36),y			lda 	(zTemp0),y
.a232		d0 fb		bne $a22f			bne 	_SIFindLength
.a234		98		tya				tya
.a235		95 78		sta $78,x			sta 	NSExponent,x
.a237		7a		ply				ply
.a238		e8		inx				inx
.a239		20 98 93	jsr $9398			jsr 	CheckComma 					; comma next
.a23c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get next parameter
.a23f		28		plp				plp 								; is it the last parameter ?
.a240		90 07		bcc $a249			bcc 	_SSIExit 					; if so, exit.
.a242		e8		inx				inx
.a243		20 98 93	jsr $9398			jsr 	CheckComma 					; comma next
.a246		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get last parameter
.a249						_SSIExit:
.a249		fa		plx				plx
.a24a		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check closing bracket
.a24d		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a24e						EvaluateValue:
.a24e		48		pha				pha
.a24f		20 b3 98	jsr $98b3			jsr		EvaluateExpression 			; expression
.a252		20 76 9b	jsr $9b76			jsr 	Dereference					; derefernce it
.a255		68		pla				pla
.a256		60		rts				rts
.a257						EvaluateNumber:
.a257		20 4e a2	jsr $a24e			jsr 	EvaluateValue 				; get a value
.a25a		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a25c		29 10		and #$10			and 	#NSBIsString
.a25e		d0 13		bne $a273			bne 	HelperTypeError
.a260		60		rts				rts
.a261						EvaluateString:
.a261		20 4e a2	jsr $a24e			jsr 	EvaluateValue 				; get a value
.a264		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a266		29 10		and #$10			and 	#NSBIsString
.a268		f0 09		beq $a273			beq 	HelperTypeError
.a26a						CopyAddressToTemp0:
.a26a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a26c		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a26e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a270		85 37		sta $37				sta 	zTemp0+1
.a272		60		rts				rts
.a273						HelperTypeError:
.a273		4c 8b a4	jmp $a48b			jmp 	TypeError
.a276						EvaluateInteger:
.a276		20 57 a2	jsr $a257			jsr 	EvaluateNumber
.a279		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a27b		d0 09		bne $a286			bne 	HelperValueError 			; if not, it's a float.
.a27d		60		rts				rts
.a27e						EvaluateUnsignedInteger:
.a27e		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; check integer is +ve
.a281		b5 50		lda $50,x			lda 	NSStatus,x
.a283		30 01		bmi $a286			bmi 	HelperValueError
.a285		60		rts				rts
.a286						HelperValueError:
.a286		4c 90 a4	jmp $a490			jmp 	ArgumentError
.a289						Evaluate16BitInteger:
.a289		20 7e a2	jsr $a27e			jsr	 	EvaluateUnsignedInteger		; get integer
.a28c		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a28e		15 68		ora $68,x			ora 	NSMantissa2,x
.a290		d0 f4		bne $a286			bne 	HelperValueError
.a292		60		rts				rts
.a293						Evaluate16BitIntegerSigned:
.a293		20 76 a2	jsr $a276			jsr	 	EvaluateInteger				; get integer
.a296		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a298		15 68		ora $68,x			ora 	NSMantissa2,x
.a29a		d0 ea		bne $a286			bne 	HelperValueError
.a29c		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a29e		10 03		bpl $a2a3			bpl 	_EISNotSigned
.a2a0		20 d2 a2	jsr $a2d2			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a2a3						_EISNotSigned:
.a2a3		60		rts				rts
.a2a4						Evaluate8BitInteger:
.a2a4		20 7e a2	jsr $a27e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a2a7		d0 dd		bne $a286			bne 	HelperValueError
.a2a9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a2ab		15 68		ora $68,x			ora 	NSMantissa2,x
.a2ad		15 60		ora $60,x			ora 	NSMantissa1,x
.a2af		d0 d5		bne $a286			bne 	HelperValueError
.a2b1		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2b4						Multiply8x8:
.a2b4		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2b5		85 36		sta $36			  	sta 	zTemp0
.a2b7		86 37		stx $37				stx 	zTemp0+1
.a2b9		a9 00		lda #$00			lda 	#0
.a2bb		a2 08		ldx #$08			ldx 	#8
.a2bd						_M88Loop:
.a2bd		90 03		bcc $a2c2			bcc 	_M88NoAdd
.a2bf		18		clc				clc
.a2c0		65 37		adc $37				adc 	zTemp0+1
.a2c2						_M88NoAdd:
.a2c2		6a		ror a				ror 	a
.a2c3		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2c5		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2c6		d0 f5		bne $a2bd			bne 	_M88Loop
.a2c8		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2cb						NSMNegate:
.a2cb		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2cd		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2cf		95 50		sta $50,x			sta 	NSStatus,x
.a2d1		60		rts				rts
.a2d2						NSMNegateMantissa:
.a2d2		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2d3		a9 00		lda #$00			lda 	#0
.a2d5		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2d7		95 58		sta $58,x			sta 	NSMantissa0,x
.a2d9		a9 00		lda #$00			lda 	#0
.a2db		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2dd		95 60		sta $60,x			sta 	NSMantissa1,x
.a2df		a9 00		lda #$00			lda 	#0
.a2e1		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2e3		95 68		sta $68,x			sta 	NSMantissa2,x
.a2e5		a9 00		lda #$00			lda 	#0
.a2e7		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2e9		95 70		sta $70,x			sta 	NSMantissa3,x
.a2eb		60		rts				rts
.a2ec						NSMShiftUpTwo:
.a2ec		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2ee		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2f2		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2f4		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2f6		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2f8		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2fa		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2fc		b5 78		lda $78,x			lda 	NSExponent,x
.a2fe		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a300		b5 50		lda $50,x			lda 	NSStatus,x
.a302		95 52		sta $52,x			sta 	NSStatus+2,x
.a304		60		rts				rts
.a305						NSMSetZeroMantissaOnly:
.a305		a9 00		lda #$00			lda 	#0
.a307		80 06		bra $a30f			bra 	NSMSetMantissa
.a309						NSMSetZero:
.a309		a9 00		lda #$00			lda 	#0
.a30b						NSMSetByte:
.a30b		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a30d		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a30f						NSMSetMantissa:
.a30f		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a311		74 60		stz $60,x			stz 	NSMantissa1,x
.a313		74 68		stz $68,x			stz 	NSMantissa2,x
.a315		74 70		stz $70,x			stz 	NSMantissa3,x
.a317		60		rts				rts
.a318						NSMShiftLeft:
.a318		18		clc				clc
.a319						NSMRotateLeft:
.a319		36 58		rol $58,x			rol 	NSMantissa0,x
.a31b		36 60		rol $60,x			rol		NSMantissa1,x
.a31d		36 68		rol $68,x			rol		NSMantissa2,x
.a31f		36 70		rol $70,x			rol		NSMantissa3,x
.a321		60		rts				rts
.a322						NSMShiftRight:
.a322		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a324		76 68		ror $68,x			ror		NSMantissa2,x
.a326		76 60		ror $60,x			ror		NSMantissa1,x
.a328		76 58		ror $58,x			ror		NSMantissa0,x
.a32a		60		rts				rts
.a32b						NSMIsZero:
.a32b		b5 70		lda $70,x			lda 	NSMantissa3,x
.a32d		15 68		ora $68,x			ora		NSMantissa2,x
.a32f		15 60		ora $60,x			ora		NSMantissa1,x
.a331		15 58		ora $58,x			ora		NSMantissa0,x
.a333		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a334						Assemble_ora:
.a334		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a337		01					.byte $01
.a338						Assemble_and:
.a338		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a33b		21					.byte $21
.a33c						Assemble_eor:
.a33c		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a33f		41					.byte $41
.a340						Assemble_adc:
.a340		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a343		61					.byte $61
.a344						Assemble_sta:
.a344		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a347		81					.byte $81
.a348						Assemble_lda:
.a348		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a34b		a1					.byte $a1
.a34c						Assemble_cmp:
.a34c		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a34f		c1					.byte $c1
.a350						Assemble_sbc:
.a350		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a353		e1					.byte $e1
.a354						Assemble_asl:
.a354		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a357		02					.byte $02
>a358		75					.byte $75
.a359						Assemble_rol:
.a359		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a35c		22					.byte $22
>a35d		75					.byte $75
.a35e						Assemble_lsr:
.a35e		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a361		42					.byte $42
>a362		75					.byte $75
.a363						Assemble_ror:
.a363		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a366		62					.byte $62
>a367		75					.byte $75
.a368						Assemble_stx:
.a368		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a36b		82					.byte $82
>a36c		50					.byte $50
.a36d						Assemble_ldx:
.a36d		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a370		a2					.byte $a2
>a371		d0					.byte $d0
.a372						Assemble_dec:
.a372		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a375		c2					.byte $c2
>a376		55					.byte $55
.a377						Assemble_inc:
.a377		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a37a		e2					.byte $e2
>a37b		55					.byte $55
.a37c						Assemble_stz:
.a37c		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a37f		60					.byte $60
>a380		44					.byte $44
.a381						Assemble_bit:
.a381		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a384		20					.byte $20
>a385		55					.byte $55
.a386						Assemble_sty:
.a386		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a389		80					.byte $80
>a38a		54					.byte $54
.a38b						Assemble_ldy:
.a38b		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a38e		a0					.byte $a0
>a38f		d5					.byte $d5
.a390						Assemble_cpy:
.a390		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a393		c0					.byte $c0
>a394		d4					.byte $d4
.a395						Assemble_cpx:
.a395		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a398		e0					.byte $e0
>a399		d0					.byte $d0
.a39a						Assemble_tsb:
.a39a		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a39d		00					.byte $00
>a39e		50					.byte $50
.a39f						Assemble_trb:
.a39f		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a3a2		10					.byte $10
>a3a3		50					.byte $50
.a3a4						Assemble_jsr:
.a3a4		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a3a7		14					.byte $14
>a3a8		10					.byte $10
.a3a9						Assemble_jmp:
.a3a9		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a3ac		40					.byte $40
>a3ad		10					.byte $10
.a3ae						Assemble_bpl:
.a3ae		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b1		10					.byte $10
.a3b2						Assemble_bmi:
.a3b2		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b5		30					.byte $30
.a3b6						Assemble_bvc:
.a3b6		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b9		50					.byte $50
.a3ba						Assemble_bvs:
.a3ba		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3bd		70					.byte $70
.a3be						Assemble_bcc:
.a3be		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3c1		90					.byte $90
.a3c2						Assemble_bcs:
.a3c2		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3c5		b0					.byte $b0
.a3c6						Assemble_bne:
.a3c6		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3c9		d0					.byte $d0
.a3ca						Assemble_beq:
.a3ca		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3cd		f0					.byte $f0
.a3ce						Assemble_bra:
.a3ce		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3d1		80					.byte $80
.a3d2						Assemble_brk:
.a3d2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3d5		00					.byte $00
.a3d6						Assemble_php:
.a3d6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3d9		08					.byte $08
.a3da						Assemble_clc:
.a3da		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3dd		18					.byte $18
.a3de						Assemble_plp:
.a3de		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e1		28					.byte $28
.a3e2						Assemble_sec:
.a3e2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e5		38					.byte $38
.a3e6						Assemble_rti:
.a3e6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e9		40					.byte $40
.a3ea						Assemble_pha:
.a3ea		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3ed		48					.byte $48
.a3ee						Assemble_cli:
.a3ee		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f1		58					.byte $58
.a3f2						Assemble_phy:
.a3f2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f5		5a					.byte $5a
.a3f6						Assemble_rts:
.a3f6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f9		60					.byte $60
.a3fa						Assemble_pla:
.a3fa		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3fd		68					.byte $68
.a3fe						Assemble_sei:
.a3fe		20 36 85	jsr $8536		jsr	AssembleGroup4
>a401		78					.byte $78
.a402						Assemble_ply:
.a402		20 36 85	jsr $8536		jsr	AssembleGroup4
>a405		7a					.byte $7a
.a406						Assemble_dey:
.a406		20 36 85	jsr $8536		jsr	AssembleGroup4
>a409		88					.byte $88
.a40a						Assemble_txa:
.a40a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a40d		8a					.byte $8a
.a40e						Assemble_tya:
.a40e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a411		98					.byte $98
.a412						Assemble_txs:
.a412		20 36 85	jsr $8536		jsr	AssembleGroup4
>a415		9a					.byte $9a
.a416						Assemble_tay:
.a416		20 36 85	jsr $8536		jsr	AssembleGroup4
>a419		a8					.byte $a8
.a41a						Assemble_tax:
.a41a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a41d		aa					.byte $aa
.a41e						Assemble_clv:
.a41e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a421		b8					.byte $b8
.a422						Assemble_tsx:
.a422		20 36 85	jsr $8536		jsr	AssembleGroup4
>a425		ba					.byte $ba
.a426						Assemble_iny:
.a426		20 36 85	jsr $8536		jsr	AssembleGroup4
>a429		c8					.byte $c8
.a42a						Assemble_dex:
.a42a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a42d		ca					.byte $ca
.a42e						Assemble_cld:
.a42e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a431		d8					.byte $d8
.a432						Assemble_phx:
.a432		20 36 85	jsr $8536		jsr	AssembleGroup4
>a435		da					.byte $da
.a436						Assemble_stp:
.a436		20 36 85	jsr $8536		jsr	AssembleGroup4
>a439		db					.byte $db
.a43a						Assemble_inx:
.a43a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a43d		e8					.byte $e8
.a43e						Assemble_nop:
.a43e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a441		ea					.byte $ea
.a442						Assemble_sed:
.a442		20 36 85	jsr $8536		jsr	AssembleGroup4
>a445		f8					.byte $f8
.a446						Assemble_plx:
.a446		20 36 85	jsr $8536		jsr	AssembleGroup4
>a449		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a44a						DecimalScalarTable:
>a44a		66 66 66 66				.dword $66666666 ; 0.1
>a44e		de					.byte $de
>a44f		1f 85 eb 51				.dword $51eb851f ; 0.01
>a453		db					.byte $db
>a454		4c 37 89 41				.dword $4189374c ; 0.001
>a458		d8					.byte $d8
>a459		ac 8b db 68				.dword $68db8bac ; 0.0001
>a45d		d4					.byte $d4
>a45e		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a462		d1					.byte $d1
>a463		83 de 1b 43				.dword $431bde83 ; 1e-06
>a467		ce					.byte $ce
>a468		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a46c		ca					.byte $ca
>a46d		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a471		c7					.byte $c7
>a472		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a476		c4					.byte $c4
>a477		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a47b		c0					.byte $c0
>a47c		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a480		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a481						SyntaxError:
.a481		a9 02		lda #$02		lda	#2
.a483		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a486						RangeError:
.a486		a9 04		lda #$04		lda	#4
.a488		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a48b						TypeError:
.a48b		a9 05		lda #$05		lda	#5
.a48d		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a490						ArgumentError:
.a490		a9 07		lda #$07		lda	#7
.a492		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a495						NotDoneError:
.a495		a9 0c		lda #$0c		lda	#12
.a497		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a49a						ErrorText:
>a49a		42 72 65 61 6b 00			.text	"Break",0
>a4a0		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a4a8		72 72 6f 72 00
>a4ad		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4b5		20 62 79 20 7a 65 72 6f 00
>a4be		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4c6		61 6e 67 65 00
>a4cb		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4d3		6d 61 74 63 68 00
>a4d9		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4e1		65 6d 6f 72 79 00
>a4e7		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4ef		61 72 67 75 6d 65 6e 74 00
>a4f8		53 74 6f 70 00				.text	"Stop",0
>a4fd		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a505		6f 6f 20 6c 6f 6e 67 00
>a50d		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a515		6e 20 66 61 69 6c 65 64 00
>a51e		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a526		61 74 61 00
>a52a		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a532		65 6e 74 65 64 00
>a538		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a540		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a54c		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a554		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a561		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a569		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a576		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a57e		68 6f 75 74 20 57 68 69 6c 65 00
>a589		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a591		68 6f 75 74 20 46 6f 72 00
>a59a		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a5a2		61 63 6b 20 66 75 6c 6c 00
>a5ab		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5b3		75 63 74 75 72 65 00
>a5ba		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5c2		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5cf		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5d7		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5e5		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5ed		7a 65 00
>a5f0		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5f8		79 20 69 6e 64 65 78 00
>a600		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a608		74 20 64 65 63 6c 61 72 65 64 00
>a613		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a61b		20 66 6f 75 6e 64 00
>a622		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a62a		65 72 72 6f 72 00
>a630		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a638		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 32 35 2f 30 32 2f			.text 9,9,"25/02/23 39"
>e773		32 33 20 33 39

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a63e						MemoryDeleteLine:
.a63e		20 5d a6	jsr $a65d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a641		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a643		a8		tay				tay
.a644						_MDDLLoop:
.a644		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a646		92 30		sta ($30)			sta 	(codePtr)
.a648		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a64a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a64c		d0 07		bne $a655			bne 	_MDLDLNext
.a64e		a5 31		lda $31				lda 	codePtr+1
.a650		c5 3b		cmp $3b				cmp 	zTemp2+1
.a652		d0 01		bne $a655			bne 	_MDLDLNext
.a654						_MDDLExit:
.a654		60		rts				rts
.a655						_MDLDLNext:
.a655		e6 30		inc $30				inc 	codePtr						; next byte
.a657		d0 eb		bne $a644			bne 	_MDDLLoop
.a659		e6 31		inc $31				inc 	codePtr+1
.a65b		80 e7		bra $a644			bra 	_MDDLLoop
.a65d						IMemoryFindEnd:
.a65d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a65f		85 3a		sta $3a				sta 	0+zTemp2
.a661		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a663		85 3b		sta $3b				sta 	1+zTemp2
.a665						_MDLFELoop:
.a665		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a667		f0 0b		beq $a674			beq 	_MDLFEExit
.a669		18		clc				clc
.a66a		65 3a		adc $3a				adc 	zTemp2
.a66c		85 3a		sta $3a				sta 	zTemp2
.a66e		90 f5		bcc $a665			bcc 	_MDLFELoop
.a670		e6 3b		inc $3b				inc 	zTemp2+1
.a672		80 f1		bra $a665			bra 	_MDLFELoop
.a674						_MDLFEExit:
.a674		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a675						MemoryInsertLine:
.a675		08		php				php
.a676		20 5d a6	jsr $a65d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a679		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a67b		1a		inc a				inc 	a
.a67c		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a67e		b0 36		bcs $a6b6			bcs 	_MDLIError 					; no, fail.
.a680		28		plp				plp 								; do at a specific point or the end ?
.a681		90 08		bcc $a68b			bcc 	_MDLIFound 					; if specific point already set.
.a683		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a685		85 30		sta $30				sta 	codePtr 					; end.
.a687		a5 3b		lda $3b				lda 	zTemp2+1
.a689		85 31		sta $31				sta 	codePtr+1
.a68b						_MDLIFound:
.a68b		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a68e		a8		tay				tay
.a68f						_MDLIInsert:
.a68f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a691		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a693		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a695		c5 3a		cmp $3a				cmp 	zTemp2
.a697		d0 06		bne $a69f			bne 	_MDLINext
.a699		a5 31		lda $31				lda 	codePtr+1
.a69b		c5 3b		cmp $3b				cmp 	zTemp2+1
.a69d		f0 0a		beq $a6a9			beq 	_MDLIHaveSpace
.a69f						_MDLINext:
.a69f		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a6a1		d0 02		bne $a6a5			bne 	_MDLINoBorrow
.a6a3		c6 3b		dec $3b				dec 	zTemp2+1
.a6a5						_MDLINoBorrow:
.a6a5		c6 3a		dec $3a				dec 	zTemp2
.a6a7		80 e6		bra $a68f			bra 	_MDLIInsert
.a6a9						_MDLIHaveSpace:
.a6a9		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a6ac		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a6ad						_MDLICopy:
.a6ad		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a6b0		91 30		sta ($30),y			sta 	(codePtr),y
.a6b2		88		dey				dey
.a6b3		10 f8		bpl $a6ad			bpl 	_MDLICopy
.a6b5		60		rts				rts
.a6b6						_MDLIError:
.a6b6		a9 06		lda #$06		lda	#6
.a6b8		4c a9 93	jmp $93a9		jmp	ErrorHandler
.a6bb						MDLAppendLine:
.a6bb		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a6bd		85 36		sta $36				sta 	zTemp0
.a6bf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6c1		85 38		sta $38				sta 	0+zTemp1
.a6c3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6c5		85 39		sta $39				sta 	1+zTemp1
.a6c7		b2 38		lda ($38)			lda 	(zTemp1)
.a6c9		d0 0a		bne $a6d5			bne 	_MDLANoInitialise
.a6cb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6cd		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a6d0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6d2		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6d5						_MDLANoInitialise:
.a6d5		18		clc				clc
.a6d6		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6d9		85 38		sta $38				sta 	zTemp1
.a6db		72 36		adc ($36)			adc 	(zTemp0)
.a6dd		8d a8 07	sta $07a8			sta 	AppendPointer
.a6e0		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6e3		85 39		sta $39				sta 	zTemp1+1
.a6e5		69 00		adc #$00			adc 	#0
.a6e7		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6ea		a0 00		ldy #$00			ldy 	#0
.a6ec						_MDLACopy:
.a6ec		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6ee		91 38		sta ($38),y			sta 	(zTemp1),y
.a6f0		c8		iny				iny
.a6f1		98		tya				tya
.a6f2		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6f4		d0 f6		bne $a6ec			bne 	_MDLACopy
.a6f6		a9 00		lda #$00			lda 	#0 							; end of program.
.a6f8		91 38		sta ($38),y			sta 	(zTemp1),y
.a6fa		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a6fb						MemoryNew:
.a6fb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6fd		85 30		sta $30				sta 	codePtr
.a6ff		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a701		85 31		sta $31				sta 	codePtr+1
.a703		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a705		92 30		sta ($30)			sta 	(codePtr)
.a707		60		rts				rts
.a708						MemoryInline:
.a708		98		tya				tya 								; put address into stack,x
.a709		18		clc				clc  								; get the offset, add codePtr
.a70a		65 30		adc $30				adc 	codePtr
.a70c		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a70e		a5 31		lda $31				lda 	codePtr+1
.a710		69 00		adc #$00			adc 	#0
.a712		95 60		sta $60,x			sta 	NSMantissa1,x
.a714		74 68		stz $68,x			stz 	NSMantissa2,x
.a716		74 70		stz $70,x			stz 	NSMantissa3,x
.a718		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a719						MemorySearch:
.a719		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a71b		86 37		stx $37				stx 	zTemp0+1
.a71d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a71f		85 30		sta $30				sta 	codePtr
.a721		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a723		85 31		sta $31				sta 	codePtr+1
.a725						_MTAXLoop:
.a725		b2 30		lda ($30)			lda 	(codePtr)
.a727		18		clc				clc
.a728		f0 21		beq $a74b			beq 	_MTAXExit 					; reached end, exit with CC.
.a72a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a72c		b1 30		lda ($30),y			lda 	(codePtr),y
.a72e		38		sec				sec
.a72f		e5 36		sbc $36				sbc 	zTemp0
.a731		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a733		c8		iny				iny 								; do the MSB
.a734		b1 30		lda ($30),y			lda 	(codePtr),y
.a736		e5 37		sbc $37				sbc 	zTemp0+1
.a738		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a73a		f0 0f		beq $a74b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a73c		b0 0d		bcs $a74b			bcs 	_MTAXExit 					; current < required exit
.a73e		18		clc				clc
.a73f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a741		65 30		adc $30				adc 	codePtr
.a743		85 30		sta $30				sta 	codePtr
.a745		90 02		bcc $a749			bcc 	_CREExit
.a747		e6 31		inc $31				inc 	codePtr+1 					; carry
.a749						_CREExit:
.a749		80 da		bra $a725			bra 	_MTAXLoop
.a74b						_MTAXExit:
.a74b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a74c						RectangleCommand:
.a74c		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a74e		80 02		bra $a752			bra 	ShapeDrawCmd
.a750						CircleCommand:
.a750		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a752						ShapeDrawCmd:
.a752		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a755						ShapeDraw:
.a755		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a758		4c d0 a7	jmp $a7d0			jmp 	ExecuteGraphicCommand	 	; and complete
.a75b						SpriteCommand:
.a75b		a2 00		ldx #$00			ldx 	#0
.a75d		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get image number.
.a760		5a		phy				phy
.a761		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a763		a6 58		ldx $58				ldx 	NSMantissa0
.a765		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a767		b0 0d		bcs $a776			bcs 	_SCRange
.a769		a0 ff		ldy #$ff			ldy 	#255
.a76b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a76e		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a770		7a		ply				ply
.a771		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a774		80 5a		bra $a7d0			bra 	ExecuteGraphicCommand
.a776						_SCRange:
.a776		4c 86 a4	jmp $a486			jmp 	RangeError
.a779						ImageCommand:
.a779		a2 00		ldx #$00			ldx 	#0
.a77b		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get image number.
.a77e		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a781						ImageRunDraw:
.a781		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a783		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a786		ad b1 07	lda $07b1			lda 	gxDrawScale
.a789		0a		asl a				asl 	a
.a78a		0a		asl a				asl 	a
.a78b		0a		asl a				asl 	a
.a78c		a8		tay				tay
.a78d		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a78f		a6 58		ldx $58				ldx 	NSMantissa0
.a791		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a794		60		rts				rts
.a795						TextCommand:
.a795		a2 00		ldx #$00			ldx 	#0
.a797		20 61 a2	jsr $a261			jsr 	EvaluateString 				; get text
.a79a		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a79d						TextRunDraw:
.a79d		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a79f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7a2		a0 00		ldy #$00			ldy 	#0
.a7a4						_IRDLoop:
.a7a4		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a7a6		85 37		sta $37				sta 	zTemp0+1
.a7a8		a5 58		lda $58				lda 	NSMantissa0
.a7aa		85 36		sta $36				sta 	zTemp0
.a7ac		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7ae		f0 13		beq $a7c3			beq 	_IRDExit
.a7b0		5a		phy				phy									; save string pos
.a7b1		48		pha				pha 								; save char
.a7b2		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a7b5		0a		asl a				asl 	a
.a7b6		0a		asl a				asl 	a
.a7b7		0a		asl a				asl 	a
.a7b8		a8		tay				tay
.a7b9		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a7bb		fa		plx				plx 								; char to draw
.a7bc		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7bf		7a		ply				ply 								; restore string pos
.a7c0		c8		iny				iny
.a7c1		90 e1		bcc $a7a4			bcc 	_IRDLoop 					; go back if no error.
.a7c3						_IRDExit:
.a7c3		60		rts				rts
.a7c4						PlotCommand:
.a7c4		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7c6		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a7c9		80 05		bra $a7d0			bra 	ExecuteGraphicCommand
.a7cb						LineCommand:
.a7cb		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7cd		20 dc a7	jsr $a7dc			jsr 	RunGraphicsCommand
.a7d0						ExecuteGraphicCommand:
.a7d0		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a7d3		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7d6		b0 01		bcs $a7d9			bcs 	_EGCError
.a7d8		60		rts				rts
.a7d9						_EGCError:
.a7d9		4c 81 a4	jmp $a481			jmp 	SyntaxError
.a7dc						RunGraphicsCommand:
.a7dc		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7df		68		pla				pla 								; pop handler address
.a7e0		fa		plx				plx
.a7e1		1a		inc a				inc 	a
.a7e2		d0 01		bne $a7e5			bne 	_RGINoCarry
.a7e4		e8		inx				inx
.a7e5						_RGINoCarry:
.a7e5		8d af 07	sta $07af			sta 	gxHandler
.a7e8		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7eb						_RGICommandLoop:
.a7eb		b1 30		lda ($30),y			lda 	(codePtr),y
.a7ed		c8		iny				iny
.a7ee		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a7f0		f0 53		beq $a845			beq 	_RGI_To
.a7f2		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a7f4		f0 55		beq $a84b			beq 	_RGI_Here
.a7f6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7f8		f0 3d		beq $a837			beq 	_RGI_Exit
.a7fa		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7fc		f0 39		beq $a837			beq 	_RGI_Exit
.a7fe		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a800		f0 3e		beq $a840			beq 	_RGI_Frame
.a802		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a804		f0 33		beq $a839			beq 	_RGI_Solid
.a806		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a808		f0 4b		beq $a855			beq 	_RGI_By
.a80a		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a80c		f0 17		beq $a825			beq 	_RGI_Move2
.a80e		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a810		f0 62		beq $a874			beq 	_RGI_Dim
.a812		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a814		f0 74		beq $a88a			beq 	_RGI_Colour
.a816		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a818		f0 70		beq $a88a			beq 	_RGI_Colour
.a81a		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a81d		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a81f		d0 03		bne $a824			bne 	_RGI_Move 					; move
.a821		4c b2 a8	jmp $a8b2			jmp		_RGI_SpriteInstructions
.a824						_RGI_Move:
.a824		88		dey				dey 								; unpick get.
.a825						_RGI_Move2:
.a825		20 d8 a8	jsr $a8d8			jsr 	GCGetCoordinatePair 		; move to here
.a828		20 ff a8	jsr $a8ff			jsr 	GCCopyPairToStore 			; save
.a82b		5a		phy				phy
.a82c		20 f5 a8	jsr $a8f5			jsr 	GCLoadAXY 					; load in
.a82f		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a831		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a834		7a		ply				ply
.a835		80 b4		bra $a7eb			bra 	_RGICommandLoop 			; and go round
.a837						_RGI_Exit:
.a837		88		dey				dey 								; unpick : / EOL
.a838		60		rts				rts
.a839						_RGI_Solid:
.a839		a9 02		lda #$02			lda 	#2
.a83b		8d ab 07	sta $07ab			sta 	gxFillSolid
.a83e		80 ab		bra $a7eb			bra 	_RGICommandLoop
.a840						_RGI_Frame:
.a840		9c ab 07	stz $07ab			stz 	gxFillSolid
.a843		80 a6		bra $a7eb			bra 	_RGICommandLoop
.a845						_RGI_To:
.a845		20 d8 a8	jsr $a8d8			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a848		20 ff a8	jsr $a8ff			jsr 	GCCopyPairToStore
.a84b						_RGI_Here:
.a84b		5a		phy				phy
.a84c		20 f5 a8	jsr $a8f5			jsr 	GCLoadAXY 					; load it into AXY
.a84f		20 af a8	jsr $a8af			jsr 	_RGICallHandler 			; go do whatever it is.
.a852		7a		ply				ply
.a853		80 96		bra $a7eb			bra 	_RGICommandLoop 			; and go round
.a855						_RGI_By:
.a855		20 e5 a8	jsr $a8e5			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a858		18		clc				clc
.a859		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a85b		6d ac 07	adc $07ac			adc 	gxXPos
.a85e		8d ac 07	sta $07ac			sta 	gxXPos
.a861		a5 61		lda $61				lda 	NSMantissa1+1
.a863		6d ad 07	adc $07ad			adc 	gxXPos+1
.a866		8d ad 07	sta $07ad			sta 	gxXPos+1
.a869		a5 5a		lda $5a				lda 	NSMantissa0+2
.a86b		18		clc				clc
.a86c		6d ae 07	adc $07ae			adc 	gxYPos
.a86f		8d ae 07	sta $07ae			sta 	gxYPos
.a872		80 d7		bra $a84b			bra 	_RGI_Here
.a874						_RGI_Dim:
.a874		a2 01		ldx #$01			ldx	 	#1
.a876		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a879		a5 59		lda $59				lda 	NSMantissa0+1
.a87b		c9 00		cmp #$00			cmp 	#0
.a87d		f0 2d		beq $a8ac			beq 	_RGIRange
.a87f		c9 09		cmp #$09			cmp 	#8+1
.a881		b0 29		bcs $a8ac			bcs		_RGIRange
.a883		3a		dec a				dec 	a
.a884		8d b1 07	sta $07b1			sta 	gxDrawScale
.a887		4c eb a7	jmp $a7eb			jmp 	_RGICommandLoop
.a88a						_RGI_Colour:
.a88a		a2 01		ldx #$01			ldx 	#1 							; colour
.a88c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a88f		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a891		20 09 a3	jsr $a309			jsr 	NSMSetZero
.a894		b1 30		lda ($30),y			lda 	(codePtr),y
.a896		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a898		d0 04		bne $a89e			bne 	_RGICDefaultMode
.a89a		c8		iny				iny
.a89b		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a89e						_RGICDefaultMode:
.a89e		5a		phy				phy
.a89f		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a8a1		a6 59		ldx $59				ldx 	NSMantissa0+1
.a8a3		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a8a5		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8a8		7a		ply				ply
.a8a9		4c eb a7	jmp $a7eb			jmp 	_RGICommandLoop 			; and go round
.a8ac						_RGIRange:
.a8ac		4c 86 a4	jmp $a486			jmp 	RangeError
.a8af						_RGICallHandler:
.a8af		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a8b2						_RGI_SpriteInstructions:
.a8b2		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a8b4		f0 07		beq $a8bd			beq 	_RGISpriteOff
.a8b6		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a8b8		f0 13		beq $a8cd			beq 	_RGISetImage
.a8ba		4c 24 a8	jmp $a824			jmp 	_RGI_Move
.a8bd						_RGISpriteOff:
.a8bd		5a		phy				phy
.a8be		a0 01		ldy #$01			ldy 	#1
.a8c0		a2 00		ldx #$00			ldx 	#0
.a8c2						_RGIDoCommandLoop:
.a8c2		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a8c4		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8c7		7a		ply				ply
.a8c8		b0 e2		bcs $a8ac			bcs 	_RGIRange
.a8ca		4c eb a7	jmp $a7eb			jmp 	_RGICommandLoop
.a8cd						_RGISetImage:
.a8cd		a2 01		ldx #$01			ldx 	#1
.a8cf		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a8d2		5a		phy				phy
.a8d3		aa		tax				tax
.a8d4		a0 00		ldy #$00			ldy 	#0
.a8d6		80 ea		bra $a8c2			bra 	_RGIDoCommandLoop
.a8d8						GCGetCoordinatePair:
.a8d8		a2 01		ldx #$01			ldx 	#1
.a8da		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.a8dd		20 98 93	jsr $9398			jsr 	CheckComma
.a8e0		e8		inx				inx
.a8e1		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.a8e4		60		rts				rts
.a8e5						GCSignedCoordinatePair:
.a8e5		a2 01		ldx #$01			ldx 	#1
.a8e7		20 93 a2	jsr $a293			jsr 	Evaluate16BitIntegerSigned
.a8ea		20 98 93	jsr $9398			jsr 	CheckComma
.a8ed		e8		inx				inx
.a8ee		20 93 a2	jsr $a293			jsr 	Evaluate16BitIntegerSigned
.a8f1		60		rts				rts
.a8f2						_GCCPRange:
.a8f2		4c 86 a4	jmp $a486			jmp 	RangeError
.a8f5						GCLoadAXY:
.a8f5		ad ad 07	lda $07ad			lda 	gxXPos+1
.a8f8		ae ac 07	ldx $07ac			ldx 	gxXPos
.a8fb		ac ae 07	ldy $07ae			ldy 	gxYPos
.a8fe		60		rts				rts
.a8ff						GCCopyPairToStore:
.a8ff		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a901		8d ac 07	sta $07ac			sta 	gxXPos
.a904		a5 61		lda $61				lda 	NSMantissa1+1
.a906		8d ad 07	sta $07ad			sta 	gxXPos+1
.a909		a5 5a		lda $5a				lda 	NSMantissa0+2
.a90b		8d ae 07	sta $07ae			sta 	gxYPos
.a90e		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a90f						ResetBitmapSpritesTiles:
.a90f		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a912		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a915		9c b4 07	stz $07b4			stz 	TileMapPageNumber
.a918		9c b5 07	stz $07b5			stz 	TileImagePageNumber
.a91b		a9 40		lda #$40			lda 	#64
.a91d		8d b6 07	sta $07b6			sta 	TileMapWidth
.a920		a9 20		lda #$20			lda 	#32
.a922		8d b7 07	sta $07b7			sta 	TileMapHeight
.a925		60		rts				rts
.a926						BitmapCtrl:
.a926						BitmapCtrlLoop:
.a926		b1 30		lda ($30),y			lda 	(codePtr),y
.a928		c8		iny				iny
.a929		a2 01		ldx #$01			ldx 	#1
.a92b		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a92d		f0 24		beq $a953			beq 	BitmapSwitch
.a92f		ca		dex				dex
.a930		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a932		f0 1f		beq $a953			beq 	BitmapSwitch
.a934		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a936		f0 13		beq $a94b			beq 	BitmapAddress
.a938		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a93a		f0 02		beq $a93e			beq 	BitmapClear
.a93c		88		dey				dey
.a93d		60		rts				rts
.a93e						BitmapClear:
.a93e		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get the colour
.a941		5a		phy				phy
.a942		aa		tax				tax
.a943		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a945		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a948		7a		ply				ply
.a949		80 db		bra $a926			bra 	BitmapCtrlLoop
.a94b						BitmapAddress:
.a94b		20 17 aa	jsr $aa17			jsr 	GetPageNumber
.a94e		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a951		80 d3		bra $a926			bra 	BitmapCtrlLoop
.a953						BitmapSwitch:
.a953		5a		phy				phy
.a954		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a957		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a959		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a95c		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a95e		a0 00		ldy #$00			ldy 	#0
.a960		a2 ff		ldx #$ff			ldx 	#$FF
.a962		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a965		9c ab 07	stz $07ab			stz 	gxFillSolid
.a968		9c ac 07	stz $07ac			stz 	gxXPos
.a96b		9c ad 07	stz $07ad			stz 	gxXPos+1
.a96e		9c ae 07	stz $07ae			stz 	gxYPos
.a971		9c b1 07	stz $07b1			stz 	gxDrawScale
.a974		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a976		a2 00		ldx #$00			ldx 	#0
.a978		a0 00		ldy #$00			ldy 	#0
.a97a		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a97d		7a		ply				ply
.a97e		80 a6		bra $a926			bra 	BitmapCtrlLoop
.a980						SpritesCtrl:
.a980						SpritesCtrlLoop:
.a980		b1 30		lda ($30),y			lda 	(codePtr),y
.a982		c8		iny				iny
.a983		a2 01		ldx #$01			ldx 	#1
.a985		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a987		f0 13		beq $a99c			beq 	SpriteSwitch
.a989		ca		dex				dex
.a98a		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a98c		f0 0e		beq $a99c			beq 	SpriteSwitch
.a98e		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a990		f0 02		beq $a994			beq 	SpriteSetAddress
.a992		88		dey				dey
.a993		60		rts				rts
.a994						SpriteSetAddress:
.a994		20 17 aa	jsr $aa17			jsr 	GetPageNumber
.a997		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a99a		80 e4		bra $a980			bra 	SpritesCtrlLoop
.a99c						SpriteSwitch:
.a99c		5a		phy				phy
.a99d		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a9a0		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a9a2		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9a5		7a		ply				ply
.a9a6		80 d8		bra $a980			bra 	SpritesCtrlLoop
.a9a8						TilesCtrl:
.a9a8						TilesCtrlLoop:
.a9a8		b1 30		lda ($30),y			lda 	(codePtr),y
.a9aa		c8		iny				iny
.a9ab		a2 80		ldx #$80			ldx 	#$80
.a9ad		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9af		f0 34		beq $a9e5			beq 	TileSwitch
.a9b1		a2 00		ldx #$00			ldx 	#$00
.a9b3		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9b5		f0 2e		beq $a9e5			beq 	TileSwitch
.a9b7		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9b9		f0 19		beq $a9d4			beq 	TileSetAddress
.a9bb		c9 c1		cmp #$c1			cmp 	#KWD_DIM
.a9bd		f0 02		beq $a9c1			beq 	TileSetSize
.a9bf		88		dey				dey
.a9c0		60		rts				rts
.a9c1						TileSetSize:
.a9c1		a2 00		ldx #$00			ldx 	#0
.a9c3		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a9c6		8d b6 07	sta $07b6			sta 	TileMapWidth
.a9c9		20 98 93	jsr $9398			jsr 	CheckComma
.a9cc		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.a9cf		8d b7 07	sta $07b7			sta 	TileMapHeight
.a9d2		80 d4		bra $a9a8			bra 	TilesCtrlLoop
.a9d4						TileSetAddress:
.a9d4		20 17 aa	jsr $aa17			jsr 	GetPageNumber 				; map page
.a9d7		8d b4 07	sta $07b4			sta 	TileMapPageNumber
.a9da		20 98 93	jsr $9398			jsr 	CheckComma
.a9dd		20 17 aa	jsr $aa17			jsr 	GetPageNumber 				; image page
.a9e0		8d b5 07	sta $07b5			sta 	TileImagePageNumber
.a9e3		80 c3		bra $a9a8			bra 	TilesCtrlLoop
.a9e5						TileSwitch:
.a9e5		5a		phy				phy
.a9e6		da		phx				phx 								; set the on/off state and the pages.
.a9e7		8a		txa				txa
.a9e8		0d b4 07	ora $07b4			ora 	TileMapPageNumber
.a9eb		aa		tax				tax
.a9ec		ac b5 07	ldy $07b5			ldy 	TileImagePageNumber
.a9ef		a9 14		lda #$14			lda 	#GCMD_TileCtl
.a9f1		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9f4		fa		plx				plx
.a9f5		10 b1		bpl $a9a8			bpl 	TilesCtrlLoop 				; nothing else.
.a9f7		a9 16		lda #$16			lda 	#GCMD_TileSize 				; set size of tile map.
.a9f9		ae b6 07	ldx $07b6			ldx 	TileMapWidth
.a9fc		ac b7 07	ldy $07b7			ldy 	TileMapHeight
.a9ff		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa02		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; reset scroll
.aa04		20 10 aa	jsr $aa10			jsr 	_TileResetScroll
.aa07		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY
.aa09		20 10 aa	jsr $aa10			jsr 	_TileResetScroll
.aa0c		7a		ply				ply
.aa0d		4c a8 a9	jmp $a9a8			jmp 	TilesCtrlLoop
.aa10						_TileResetScroll:
.aa10		a2 00		ldx #$00			ldx 	#0
.aa12		a0 00		ldy #$00			ldy 	#0
.aa14		4c 61 80	jmp $8061			jmp 	GXGraphicDraw
.aa17						GetPageNumber:
.aa17		a2 00		ldx #$00			ldx 	#0
.aa19		20 7e a2	jsr $a27e			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.aa1c		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.aa1e		29 1f		and #$1f			and 	#$1F
.aa20		05 58		ora $58				ora 	NSMantissa0
.aa22		d0 0c		bne $aa30			bne 	_GPNError
.aa24		a5 68		lda $68				lda 	NSMantissa2
.aa26		06 60		asl $60				asl 	NSMantissa1					; get page number
.aa28		2a		rol a				rol 	a
.aa29		06 60		asl $60				asl 	NSMantissa1
.aa2b		2a		rol a				rol 	a
.aa2c		06 60		asl $60				asl 	NSMantissa1
.aa2e		2a		rol a				rol 	a
.aa2f		60		rts				rts
.aa30						_GPNError:
.aa30		a9 07		lda #$07		lda	#7
.aa32		4c a9 93	jmp $93a9		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1
.07b4						TileMapPageNumber:
>07b4								.fill 	1
.07b5						TileImagePageNumber:
>07b5								.fill 	1
.07b6						TileMapWidth:
>07b6								.fill 	1
.07b7						TileMapHeight:
>07b7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aa35						GfxCommand:
.aa35		a2 00		ldx #$00			ldx 	#0
.aa37		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; command
.aa3a		20 98 93	jsr $9398			jsr 	CheckComma
.aa3d		e8		inx				inx
.aa3e		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; X
.aa41		20 98 93	jsr $9398			jsr 	CheckComma
.aa44		e8		inx				inx
.aa45		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; Y
.aa48		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aa4a		4a		lsr a				lsr 	a
.aa4b		d0 12		bne $aa5f			bne 	_GfxError
.aa4d		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aa4f		b0 0e		bcs $aa5f			bcs 	_GfxError 					; bit 7 should have been zero
.aa51		5a		phy				phy 								; save pos
.aa52		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aa54		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa56		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa58		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa5b		b0 02		bcs $aa5f			bcs 	_GfxError
.aa5d		7a		ply				ply 								; restore pos and exit.
.aa5e		60		rts				rts
.aa5f						_GfxError:
.aa5f		4c 86 a4	jmp $a486			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aa62						UnaryHit:
.aa62		fa		plx				plx
.aa63		a9 36		lda #$36			lda 	#zTemp0
.aa65		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aa68		20 98 93	jsr $9398			jsr 	CheckComma
.aa6b		e8		inx				inx
.aa6c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aa6f		20 90 93	jsr $9390			jsr		CheckRightBracket
.aa72		ca		dex				dex 								; fix back up again.
.aa73		da		phx				phx 								; save X/Y
.aa74		5a		phy				phy
.aa75		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aa77		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa79		aa		tax				tax
.aa7a		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aa7c		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.aa7f		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aa80		7a		ply				ply 								; restore XY
.aa81		fa		plx				plx
.aa82		20 0b a3	jsr $a30b			jsr 	NSMSetByte 					; return the hit result
.aa85		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aa86						PaletteCommand:
.aa86		a2 00		ldx #$00			ldx 	#0
.aa88		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; colour
.aa8b		20 98 93	jsr $9398			jsr 	CheckComma
.aa8e		e8		inx				inx
.aa8f		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; r
.aa92		20 98 93	jsr $9398			jsr 	CheckComma
.aa95		e8		inx				inx
.aa96		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; g
.aa99		20 98 93	jsr $9398			jsr 	CheckComma
.aa9c		e8		inx				inx
.aa9d		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; b
.aaa0		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aaa2		85 36		sta $36				sta 	zTemp0
.aaa4		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aaa6		85 37		sta $37				sta 	zTemp0+1
.aaa8		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aaaa		26 37		rol $37				rol	 	zTemp0+1
.aaac		06 36		asl $36				asl 	zTemp0
.aaae		26 37		rol $37				rol	 	zTemp0+1
.aab0		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aab2		85 01		sta $01				sta 	1
.aab4		5a		phy				phy
.aab5		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aab7		92 36		sta ($36)			sta 	(zTemp0)
.aab9		a0 01		ldy #$01			ldy 	#1
.aabb		a5 5a		lda $5a				lda 	NSMantissa0+2
.aabd		91 36		sta ($36),y			sta 	(zTemp0),y
.aabf		a5 59		lda $59				lda 	NSMantissa0+1
.aac1		c8		iny				iny
.aac2		91 36		sta ($36),y			sta 	(zTemp0),y
.aac4		7a		ply				ply
.aac5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/tile.asm

.aac6						TileCommand:
.aac6		b1 30		lda ($30),y			lda 	(codePtr),y
.aac8		c8		iny				iny
.aac9		c9 b9		cmp #$b9			cmp 	#KWD_AT
.aacb		f0 0a		beq $aad7			beq 	_TileSetPos
.aacd		c9 d0		cmp #$d0			cmp 	#KWD_PLOT
.aacf		f0 15		beq $aae6			beq 	_TilePlot
.aad1		c9 dc		cmp #$dc			cmp 	#KWD_TO
.aad3		f0 40		beq $ab15			beq 	_TileScroll
.aad5		88		dey				dey
.aad6		60		rts				rts
.aad7						_TileSetPos:
.aad7		a2 00		ldx #$00			ldx 	#0 							; location to XA
.aad9		20 35 ab	jsr $ab35			jsr 	TileGetPair
.aadc		5a		phy				phy 								; call routine
.aadd		a8		tay				tay
.aade		a9 1c		lda #$1c			lda 	#GCMD_TilePos
.aae0		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aae3		7a		ply				ply
.aae4		80 e0		bra $aac6			bra 	TileCommand 				; loop round
.aae6						_TilePlot:
.aae6		a2 00		ldx #$00			ldx 	#0
.aae8		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; tile to print
.aaeb		a9 01		lda #$01			lda 	#1
.aaed		85 59		sta $59				sta 	NSMantissa0+1 				; default repeat count.
.aaef		a2 01		ldx #$01			ldx 	#1
.aaf1		b1 30		lda ($30),y			lda 	(codePtr),y
.aaf3		c9 ae		cmp #$ae			cmp 	#KWD_FOR
.aaf5		d0 04		bne $aafb			bne 	_TileNoRepeat
.aaf7		c8		iny				iny 								; skip FOR
.aaf8		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; evaluate count
.aafb						_TileNoRepeat:
.aafb						_TileOutLoop:
.aafb		a5 59		lda $59				lda 	NSMantissa0+1 				; complete ?
.aafd		f0 0d		beq $ab0c			beq 	_TileCheckAgain 			; check , <repeats>
.aaff		c6 59		dec $59				dec 	NSMantissa0+1 				; dec count
.ab01		a9 1e		lda #$1e			lda 	#GCMD_TileWrite				; set up to write tile.
.ab03		a6 58		ldx $58				ldx 	NSMantissa0
.ab05		5a		phy				phy 								; call preserving Y
.ab06		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab09		7a		ply				ply
.ab0a		80 ef		bra $aafb			bra 	_TileOutLoop
.ab0c						_TileCheckAgain:
.ab0c		b1 30		lda ($30),y			lda 	(codePtr),y
.ab0e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.ab10		d0 b4		bne $aac6			bne 	TileCommand 				; no, do again
.ab12		c8		iny				iny 								; consume comma
.ab13		80 d1		bra $aae6			bra 	_TilePlot 					; and loop round.
.ab15						_TileScroll:
.ab15		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; do X
.ab17		20 24 ab	jsr $ab24			jsr 	_TileSetScroll
.ab1a		20 98 93	jsr $9398			jsr 	CheckComma
.ab1d		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY 			; do Y
.ab1f		20 24 ab	jsr $ab24			jsr 	_TileSetScroll
.ab22		80 a2		bra $aac6			bra 	TileCommand
.ab24						_TileSetScroll:
.ab24		48		pha				pha 								; save command on stack
.ab25		a2 00		ldx #$00			ldx 	#0 							; get value to scroll to
.ab27		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.ab2a		68		pla				pla 								; restore command
.ab2b		5a		phy				phy 								; save Y code pos
.ab2c		a6 58		ldx $58				ldx 	NSMantissa0 				; YX = scroll value
.ab2e		a4 60		ldy $60				ldy 	NSMantissa1
.ab30		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; do command
.ab33		7a		ply				ply 								; restore code pos
.ab34		60		rts				rts
.ab35						TileGetPair:
.ab35		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.ab38		48		pha				pha
.ab39		20 98 93	jsr $9398			jsr 	CheckComma
.ab3c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.ab3f		fa		plx				plx
.ab40		60		rts				rts
.ab41						TileRead:
.ab41		fa		plx				plx 								; current stack pos (where the result goes)
.ab42		da		phx				phx 								; save it back again
.ab43		e8		inx				inx   								; space to evaluate coordinates
.ab44		20 35 ab	jsr $ab35			jsr 	TileGetPair 				; X A are the coordinates
.ab47		5a		phy				phy 								; save code position
.ab48		a8		tay				tay 								; X Y are the coordinates.
.ab49		a9 1c		lda #$1c			lda 	#GCMD_TilePos 				; set the read position.
.ab4b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab4e		a9 20		lda #$20			lda 	#GCMD_TileRead 				; read the tile there
.ab50		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab53		7a		ply				ply 								; restore code and stack positions
.ab54		fa		plx				plx
.ab55		20 0b a3	jsr $a30b			jsr 	NSMSetByte 					; set the result.
.ab58		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; check for )
.ab5b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.ab5c						ClearScreen:
.ab5c		5a		phy				phy
.ab5d		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.ab5f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ab62		7a		ply				ply
.ab63		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.ab64						XLoadCommand:
.ab64		20 f5 8d	jsr $8df5			jsr 	NewProgram
.ab67		20 19 87	jsr $8719			jsr 	BackloadProgram
.ab6a		4c 01 88	jmp $8801			jmp 	WarmStart
.ab6d						XGoCommand:
.ab6d		20 f5 8d	jsr $8df5			jsr 	NewProgram
.ab70		20 19 87	jsr $8719			jsr 	BackloadProgram
.ab73		4c 80 8f	jmp $8f80			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.ab76						BootXA:
.ab76		85 fb		sta $fb		            sta     kernel.args.buf+0
.ab78		86 fc		stx $fc		            stx     kernel.args.buf+1
.ab7a		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.ab7d		4c 01 88	jmp $8801	            jmp 	WarmStart
>ab80		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.ab84						UnaryEvent:
.ab84		fa		plx				plx
.ab85		20 12 b2	jsr $b212			jsr 	TimerToStackX 				; timer in +0
.ab88		e8		inx				inx  								; put reference into +1
.ab89		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm
.ab8c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.ab8e		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.ab90		d0 4c		bne $abde			bne 	_UEType
.ab92		e8		inx				inx 								; put the step in +2
.ab93		20 98 93	jsr $9398			jsr 	CheckComma
.ab96		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.ab99		20 90 93	jsr $9390			jsr 	CheckRightBracket
.ab9c		ca		dex				dex
.ab9d		ca		dex				dex
.ab9e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.aba0		85 36		sta $36				sta 	zTemp0
.aba2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.aba4		85 37		sta $37				sta 	zTemp0+1
.aba6		5a		phy				phy
.aba7		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.aba9		b1 36		lda ($36),y			lda 	(zTemp0),y
.abab		30 2d		bmi $abda			bmi 	_UEFalse 					; exit if signed.
.abad		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.abaf		b5 58		lda $58,x			lda 	NSMantissa0,x
.abb1		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.abb3		c8		iny				iny
.abb4		b5 60		lda $60,x			lda 	NSMantissa1,x
.abb6		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abb8		c8		iny				iny
.abb9		b5 68		lda $68,x			lda 	NSMantissa2,x
.abbb		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abbd		90 1b		bcc $abda			bcc 	_UEFalse 					; no, return FALSE.
.abbf		18		clc				clc
.abc0		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.abc2		b5 58		lda $58,x			lda 	NSMantissa0,x
.abc4		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.abc6		91 36		sta ($36),y			sta 	(zTemp0),y
.abc8		c8		iny				iny
.abc9		b5 60		lda $60,x			lda 	NSMantissa1,x
.abcb		75 62		adc $62,x			adc 	NSMantissa1+2,x
.abcd		91 36		sta ($36),y			sta 	(zTemp0),y
.abcf		c8		iny				iny
.abd0		b5 68		lda $68,x			lda 	NSMantissa2,x
.abd2		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.abd4		91 36		sta ($36),y			sta 	(zTemp0),y
.abd6		7a		ply				ply
.abd7		4c 1c 94	jmp $941c			jmp 	ReturnTrue
.abda						_UEFalse:
.abda		7a		ply				ply 								; restore Y
.abdb		4c 27 94	jmp $9427			jmp 	ReturnFalse 				; and return False
.abde						_UEType:
.abde		4c 8b a4	jmp $a48b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.abe1						Command_BLoad:
.abe1		20 ec ab	jsr $abec			jsr 	BLOADHandler
.abe4		c9 00		cmp #$00			cmp 	#0
.abe6		d0 01		bne $abe9			bne 	_BLError
.abe8		60		rts				rts
.abe9						_BLError:
.abe9		4c 3b ae	jmp $ae3b			jmp 	CLErrorHandler
.abec						BLOADHandler:
.abec		a2 00		ldx #$00			ldx 	#0
.abee		20 61 a2	jsr $a261			jsr 	EvaluateString 				; file name to load
.abf1		20 98 93	jsr $9398			jsr 	CheckComma 					; consume comma
.abf4		e8		inx				inx
.abf5		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; load address (full physical address)
.abf8		5a		phy				phy
.abf9		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.abfb		a6 60		ldx $60				ldx 	NSMantissa1
.abfd		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.ac00		b0 50		bcs $ac52			bcs 	_BLErrorExit 				; error, so fail.
.ac02		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.ac05		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ac07		20 54 ac	jsr $ac54			jsr 	BLOpenPhysicalMemory 		; open for access.
.ac0a						_BLReadFile:
.ac0a		ad bc 07	lda $07bc			lda 	BasicFileStream
.ac0d		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ac0f		20 1e 84	jsr $841e			jsr 	KNLReadBlock 				; read next block
.ac12		b0 22		bcs $ac36			bcs 	_BLFileError 				; file error, which might be EOF.
.ac14		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.ac16		f0 f2		beq $ac0a			beq 	_BLReadFile
.ac18		8d ba 07	sta $07ba			sta 	BLCopyCounter 				; counter.
.ac1b		ac b9 07	ldy $07b9			ldy 	BLYOffset 					; copy the buffer out here
.ac1e		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.ac20						_BLCopyLoop:
.ac20		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.ac23		91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac25		c8		iny				iny
.ac26		d0 03		bne $ac2b			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.ac28		20 7c ac	jsr $ac7c			jsr 	BLAdvancePhysicalMemory
.ac2b						_BLNoAdjust:
.ac2b		e8		inx				inx
.ac2c		ce ba 07	dec $07ba			dec 	BLCopyCounter
.ac2f		d0 ef		bne $ac20			bne 	_BLCopyLoop
.ac31		8c b9 07	sty $07b9			sty 	BLYOffset 					; update Y offset
.ac34		80 d4		bra $ac0a			bra 	_BLReadFile 				; go ask for more.
.ac36						_BLFileError:
.ac36		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ac38		d0 0d		bne $ac47			bne 	_BLErrorHandler				; no, it's an actual error
.ac3a		20 76 ac	jsr $ac76			jsr 	BLClosePhysicalMemory 		; close the access.
.ac3d		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the file
.ac40		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ac43		a9 00		lda #$00			lda 	#0 							; and return zero.
.ac45		7a		ply				ply
.ac46		60		rts				rts
.ac47						_BLErrorHandler:
.ac47		48		pha				pha 								; save code
.ac48		20 76 ac	jsr $ac76			jsr 	BLClosePhysicalMemory 		; close access
.ac4b		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the open file
.ac4e		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ac51		68		pla				pla 								; get error code
.ac52						_BLErrorExit:
.ac52		7a		ply				ply 								; restore position and exit.
.ac53		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ac54						BLOpenPhysicalMemory:
.ac54		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ac56		8d b8 07	sta $07b8			sta 	BLNormalMapping
.ac59		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ac5b		8d b9 07	sta $07b9			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ac5e		64 3a		stz $3a				stz 	zTemp2
.ac60		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac62		29 1f		and #$1f			and 	#$1F
.ac64		09 60		ora #$60			ora 	#BLAccessPage << 5
.ac66		85 3b		sta $3b				sta 	zTemp2+1
.ac68		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ac6a		16 60		asl $60,x			asl 	NSMantissa1,x
.ac6c		2a		rol a				rol 	a
.ac6d		16 60		asl $60,x			asl 	NSMantissa1,x
.ac6f		2a		rol a				rol 	a
.ac70		16 60		asl $60,x			asl 	NSMantissa1,x
.ac72		2a		rol a				rol 	a
.ac73		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.ac75		60		rts				rts
.ac76						BLClosePhysicalMemory:
.ac76		ad b8 07	lda $07b8			lda 	BLNormalMapping
.ac79		85 0b		sta $0b				sta 	BLAccessPage+8
.ac7b		60		rts				rts
.ac7c						BLAdvancePhysicalMemory:
.ac7c		48		pha				pha
.ac7d		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ac7f		a5 3b		lda $3b				lda 	zTemp2+1
.ac81		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ac83		d0 06		bne $ac8b			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ac85		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ac87		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.ac89		85 3b		sta $3b				sta 	zTemp2+1
.ac8b						_BLAPMExit:
.ac8b		68		pla				pla
.ac8c		60		rts				rts
.07b8						BLNormalMapping:
>07b8								.fill 	1
.07b9						BLYOffset:
>07b9								.fill 	1
.07ba						BLCopyCounter:
>07ba								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.ac8d						Command_BSave:
.ac8d		20 98 ac	jsr $ac98			jsr 	BSaveHandler
.ac90		c9 00		cmp #$00			cmp 	#0
.ac92		d0 01		bne $ac95			bne 	_BSError
.ac94		60		rts				rts
.ac95						_BSError:
.ac95		4c 3b ae	jmp $ae3b			jmp 	CLErrorHandler
.ac98						BSaveHandler:
.ac98		a2 00		ldx #$00			ldx 	#0
.ac9a		20 61 a2	jsr $a261			jsr 	EvaluateString 				; file name to load
.ac9d		20 98 93	jsr $9398			jsr 	CheckComma 					; consume comma
.aca0		e8		inx				inx
.aca1		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; load address (full physical address)
.aca4		20 98 93	jsr $9398			jsr 	CheckComma 					; consume comma
.aca7		e8		inx				inx
.aca8		20 76 a2	jsr $a276			jsr 	EvaluateInteger 			; data length (3 bytes only)
.acab		5a		phy				phy
.acac		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.acae		a6 60		ldx $60				ldx 	NSMantissa1
.acb0		20 c4 83	jsr $83c4			jsr 	KNLOpenFileWrite 			; open file for reading
.acb3		b0 47		bcs $acfc			bcs 	_BSErrorExit 				; error, so fail.
.acb5		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.acb8		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.acba		20 54 ac	jsr $ac54			jsr 	BLOpenPhysicalMemory 		; open for access.
.acbd		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.acbf		ac b9 07	ldy $07b9			ldy 	BLYOffset 					; used for data offset.
.acc2						_BSWriteToFileLoop:
.acc2		38		sec				sec 								; pre decrement count.
.acc3		a5 5a		lda $5a				lda 	NSMantissa0+2
.acc5		e9 01		sbc #$01			sbc 	#1
.acc7		85 5a		sta $5a				sta 	NSMantissa0+2
.acc9		a5 62		lda $62				lda 	NSMantissa1+2
.accb		e9 00		sbc #$00			sbc 	#0
.accd		85 62		sta $62				sta 	NSMantissa1+2
.accf		a5 6a		lda $6a				lda 	NSMantissa2+2
.acd1		e9 00		sbc #$00			sbc 	#0
.acd3		85 6a		sta $6a				sta 	NSMantissa2+2
.acd5		30 15		bmi $acec			bmi 	_BSFileComplete 			; undercounted, so exit.
.acd7		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.acd9		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.acdc		e8		inx				inx
.acdd		c8		iny				iny 								; next byte
.acde		d0 03		bne $ace3			bne 	_BSNoCheck
.ace0		20 7c ac	jsr $ac7c			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.ace3						_BSNoCheck:
.ace3		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.ace5		d0 db		bne $acc2			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.ace7		20 fe ac	jsr $acfe			jsr 	BSFlushBuffer 				; yes, flush the buffer
.acea		80 d6		bra $acc2			bra 	_BSWriteToFileLoop 			; and keep on going
.acec						_BSFileComplete:
.acec		20 fe ac	jsr $acfe			jsr 	BSFlushBuffer 				; write the buffer remainder.
.acef		20 76 ac	jsr $ac76			jsr 	BLClosePhysicalMemory 		; close the access.
.acf2		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the file
.acf5		20 93 84	jsr $8493			jsr 	KNLCloseFile
.acf8		a9 00		lda #$00			lda 	#0
.acfa		7a		ply				ply
.acfb		60		rts				rts
.acfc						_BSErrorExit:
.acfc		7a		ply				ply
.acfd		60		rts				rts
.acfe						BSFlushBuffer:
.acfe		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.ad00		f0 0d		beq $ad0f			beq 	_BSFBExit 					; if so, exit.
.ad02		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.ad04		85 36		sta $36				sta 	zTemp0
.ad06		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.ad08		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.ad0a		20 fa ae	jsr $aefa			jsr 	CLWriteByteBlock 			; write it.
.ad0d		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.ad0f						_BSFBExit:
.ad0f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.ad10						Command_Dir:
.ad10		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.ad13		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.ad15		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.ad17		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.ad1a		b0 4f		bcs $ad6b			bcs     _CDExit
.ad1c						_CDEventLoop:
.ad1c		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.ad1f		20 80 82	jsr $8280			jsr     GetNextEvent
.ad22		b0 f8		bcs $ad1c			bcs     _CDEventLoop
.ad24		ad 9b 07	lda $079b			lda     KNLEvent.type
.ad27		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.ad29		f0 40		beq $ad6b			beq    	_CDExit
.ad2b		20 30 ad	jsr $ad30			jsr     _CDMessages 				; handle various messages
.ad2e		80 ec		bra $ad1c			bra     _CDEventLoop
.ad30						_CDMessages:
.ad30		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.ad32		f0 15		beq $ad49			beq     _CDEVRead
.ad34		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.ad36		f0 19		beq $ad51			beq     _CDEVVolume
.ad38		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.ad3a		f0 32		beq $ad6e			beq     _CDEVFile
.ad3c		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.ad3e		f0 70		beq $adb0			beq     _CDEVFree
.ad40		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.ad42		f0 6e		beq $adb2			beq     _CDEVEOF
.ad44		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.ad46		f0 6a		beq $adb2			beq     _CDEVEOF
.ad48		60		rts				rts
.ad49						_CDEVRead:
.ad49		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ad4c		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ad4e		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.ad51						_CDEVVolume:
.ad51		a9 5b		lda #$5b			lda 	#"["
.ad53		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad56		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ad59		20 ba ad	jsr $adba			jsr     _CDReadData
.ad5c		20 08 94	jsr $9408			jsr 	PrintStringXA
.ad5f		a9 5d		lda #$5d			lda 	#"]"
.ad61		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad64		a9 0d		lda #$0d			lda 	#13
.ad66		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad69		80 de		bra $ad49			bra     _CDEVRead
.ad6b						_CDExit:
.ad6b		4c 01 88	jmp $8801			jmp 	WarmStart
.ad6e						_CDEVFile:
.ad6e		a9 20		lda #$20			lda 	#32
.ad70		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad73		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ad76		48		pha				pha
.ad77		20 ba ad	jsr $adba			jsr     _CDReadData
.ad7a		20 08 94	jsr $9408			jsr 	PrintStringXA
.ad7d		68		pla				pla
.ad7e		49 ff		eor #$ff			eor 	#$FF
.ad80		38		sec				sec
.ad81		69 10		adc #$10			adc 	#16
.ad83		aa		tax				tax
.ad84						_CDEVTab:
.ad84		a9 20		lda #$20			lda 	#32
.ad86		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad89		ca		dex				dex
.ad8a		10 f8		bpl $ad84			bpl 	_CDEVTab
.ad8c		20 d1 ad	jsr $add1			jsr 	_CDReadExtended
.ad8f		ad 26 05	lda $0526			lda 	lineBuffer
.ad92		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.ad95		20 1e 98	jsr $981e			jsr 	ConvertInt16
.ad98		20 08 94	jsr $9408			jsr 	PrintStringXA
.ad9b		a2 ad		ldx #$ad			ldx 	#_CDEVFMessage >> 8
.ad9d		a9 a4		lda #$a4			lda 	#_CDEVFMessage & $FF
.ad9f		20 08 94	jsr $9408			jsr 	PrintStringXA
.ada2		80 a5		bra $ad49			bra     _CDEVRead
.ada4						_CDEVFMessage:
>ada4		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>adac		29 2e 0d 00
.adb0						_CDEVFree:
.adb0		80 00		bra $adb2			bra     _CDEVEOF
.adb2						_CDEVEOF:
.adb2		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.adb5		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.adb7		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.adba						_CDReadData:
.adba		85 fd		sta $fd				sta     kernel.args.recv.buflen
.adbc		a9 26		lda #$26			lda     #lineBuffer & $FF
.adbe		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.adc0		a9 05		lda #$05			lda     #lineBuffer >> 8
.adc2		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.adc4		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.adc7		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.adc9		9e 26 05	stz $0526,x			stz     lineBuffer,x
.adcc		a9 26		lda #$26			lda 	#lineBuffer & $FF
.adce		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.add0		60		rts				rts
.add1						_CDReadExtended:
.add1		a9 02		lda #$02			lda     #2
.add3		85 fd		sta $fd				sta     kernel.args.recv.buflen
.add5		a9 26		lda #$26			lda     #lineBuffer & $FF
.add7		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.add9		a9 05		lda #$05			lda     #lineBuffer >> 8
.addb		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.addd		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.ade0						Command_Drive:
.ade0		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.ade3		20 c0 83	jsr $83c0			jsr 	KNLSetDrive
.ade6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.ade7						Command_Load:
.ade7		20 ed ad	jsr $aded			jsr 	LoadFile
.adea		4c 01 88	jmp $8801			jmp 	WarmStart
.aded						LoadFile:
.aded		20 61 a2	jsr $a261			jsr 	EvaluateString 				; file name to load
.adf0		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.adf2		a5 36		lda $36				lda 	zTemp0
.adf4		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.adf7		b0 42		bcs $ae3b			bcs 	CLErrorHandler 				; error, so fail.
.adf9		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.adfc		20 8b ae	jsr $ae8b			jsr     LoadReadByteInit            ; Init reader with the stream
.adff		20 f5 8d	jsr $8df5			jsr 	NewProgram 					; does the actual NEW.
.ae02		9c bb 07	stz $07bb			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae05						_CLLoop:
.ae05		20 49 ae	jsr $ae49			jsr 	LoadReadLine 				; get next line.
.ae08		f0 10		beq $ae1a			beq 	_CLExit 					; end, exit.
.ae0a		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae0d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae10		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae13		f0 f0		beq $ae05			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.ae15		20 dc 87	jsr $87dc			jsr 	EditProgramCode 			; do the editing etc.
.ae18		80 eb		bra $ae05			bra 	_CLLoop
.ae1a						_CLExit:
.ae1a		ad bc 07	lda $07bc			lda 	BasicFileStream
.ae1d		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ae20						CLComplete:
.ae20		a9 28		lda #$28			lda 	#_CLCMsg & $FF
.ae22		a2 ae		ldx #$ae			ldx 	#_CLCMsg >> 8
.ae24		20 08 94	jsr $9408			jsr 	PrintStringXA
.ae27		60		rts				rts
.ae28						_CLCMsg:
>ae28		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>ae30		2e 0d 00
.ae33						CLCloseError:
.ae33		48		pha				pha
.ae34		ad bc 07	lda $07bc			lda 	BasicFileStream
.ae37		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ae3a		68		pla				pla
.ae3b						CLErrorHandler:
.ae3b		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ae3d		f0 05		beq $ae44			beq 	_CLEHNotFound
.ae3f		a9 1a		lda #$1a		lda	#26
.ae41		4c a9 93	jmp $93a9		jmp	ErrorHandler
.ae44						_CLEHNotFound:
.ae44		a9 19		lda #$19		lda	#25
.ae46		4c a9 93	jmp $93a9		jmp	ErrorHandler
.ae49						LoadReadLine:
.ae49		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ae4b		20 65 ae	jsr $ae65			jsr 	LoadReadCharacter
.ae4e		f0 14		beq $ae64			beq 	_LRLExit 					; eof ?
.ae50		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ae52		90 f5		bcc $ae49			bcc 	LoadReadLine
.ae54						_LRLLoop:
.ae54		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ae57		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ae5a		e8		inx				inx
.ae5b		20 65 ae	jsr $ae65			jsr 	LoadReadCharacter 			; next line
.ae5e		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ae60		b0 f2		bcs $ae54			bcs 	_LRLLoop
.ae62		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ae64						_LRLExit:
.ae64		60		rts				rts
.ae65						LoadReadCharacter:
.ae65		da		phx				phx
.ae66		5a		phy				phy
.ae67		ad bb 07	lda $07bb			lda 	LoadEOFFlag 				; already done EOF.
.ae6a		d0 0c		bne $ae78			bne 	_LRCIsEOF
.ae6c		20 95 ae	jsr $ae95			jsr 	LoadReadByte 				; read a byte
.ae6f		90 09		bcc $ae7a			bcc		_LRCExit 					; read okay.
.ae71		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.ae73		d0 be		bne $ae33			bne 	CLCloseError
.ae75		ce bb 07	dec $07bb			dec 	LoadEOFFlag
.ae78						_LRCIsEOF:
.ae78		a9 00		lda #$00			lda 	#0
.ae7a						_LRCExit:
.ae7a		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.ae7c		d0 02		bne $ae80			bne 	_LRCNotTab
.ae7e		a9 20		lda #$20			lda 	#' '
.ae80						_LRCNotTab:
.ae80		c9 0a		cmp #$0a			cmp 	#$0A
.ae82		d0 02		bne $ae86			bne 	_LRCNotLF
.ae84		a9 0d		lda #$0d			lda 	#$0D
.ae86						_LRCNotLF:
.ae86		7a		ply				ply
.ae87		fa		plx				plx
.ae88		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.ae8a		60		rts				rts
.ae8b						LoadReadByteInit:
.ae8b		8d bd 07	sta $07bd			sta     LoadFileStream 				; save stream
.ae8e		9c be 07	stz $07be			stz     LoadNextCharacter 			; reset buffer
.ae91		9c bf 07	stz $07bf			stz     LoadEndCharacter
.ae94		60		rts				rts
.ae95						LoadReadByte:
.ae95		da		phx				phx
.ae96		ae be 07	ldx $07be			ldx     LoadNextCharacter 					; all data consumed ?
.ae99		ec bf 07	cpx $07bf			cpx     LoadEndCharacter
.ae9c		d0 12		bne $aeb0			bne     _KNLRBGetNextByte
.ae9e		ad bd 07	lda $07bd			lda     LoadFileStream
.aea1		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aea3		20 1e 84	jsr $841e			jsr     KNLReadBlock 				; read next chunk from the stream
.aea6		b0 0f		bcs $aeb7			bcs     _KNLRBError 				; error has occurred on read.
.aea8		8d bf 07	sta $07bf			sta     LoadEndCharacter 						; # read is the number available
.aeab		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.aead		8e be 07	stx $07be			stx     LoadNextCharacter
.aeb0						_KNLRBGetNextByte:
.aeb0		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.aeb3		ee be 07	inc $07be			inc     LoadNextCharacter 					; and advance the index
.aeb6		18		clc				clc 								; succeeded
.aeb7						_KNLRBError:
.aeb7		fa		plx				plx
.aeb8		60		rts				rts
.07bb						LoadEOFFlag:
>07bb								.fill 	1
.07bc						BasicFileStream:
>07bc								.fill 	1
.07bd						LoadFileStream:
>07bd								.byte   ?
.07be						LoadNextCharacter:
>07be								.byte   ?
.07bf						LoadEndCharacter:
>07bf								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.aeb9						Command_Save:
.aeb9		20 61 a2	jsr $a261			jsr 	EvaluateString 				; file name to load
.aebc		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.aebe		a5 36		lda $36				lda 	zTemp0
.aec0		20 c4 83	jsr $83c4			jsr 	KNLOpenFileWrite 			; open file for writing
.aec3		b0 32		bcs $aef7			bcs 	CSErrorHandler 				; error, so fail.
.aec5		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.aec8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aeca		85 30		sta $30				sta 	codePtr
.aecc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aece		85 31		sta $31				sta 	codePtr+1
.aed0						_CSLoop:
.aed0		b2 30		lda ($30)			lda 	(codePtr)
.aed2		f0 17		beq $aeeb			beq 	_CSExit
.aed4		20 1b af	jsr $af1b			jsr 	CSGetCleanLine
.aed7		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.aed9		85 36		sta $36				sta 	zTemp0
.aedb		20 fa ae	jsr $aefa			jsr 	CLWriteByteBlock 			; write the block out.
.aede		18		clc				clc
.aedf		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.aee1		65 30		adc $30				adc 	codePtr
.aee3		85 30		sta $30				sta 	codePtr
.aee5		90 02		bcc $aee9			bcc 	_CREExit
.aee7		e6 31		inc $31				inc 	codePtr+1 					; carry
.aee9						_CREExit:
.aee9		80 e5		bra $aed0			bra 	_CSLoop
.aeeb						_CSExit:
.aeeb		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close file
.aeee		20 93 84	jsr $8493			jsr 	KNLCloseFile
.aef1		20 20 ae	jsr $ae20			jsr 	CLComplete 					; display complete message.
.aef4		4c 01 88	jmp $8801			jmp 	WarmStart 					; and warm start
.aef7						CSErrorHandler:
.aef7		4c 3b ae	jmp $ae3b			jmp 	CLErrorHandler
.aefa						CLWriteByteBlock:
.aefa		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.aefc		f0 1c		beq $af1a			beq 	_CLWBBExit					; if so, exit
.aefe		ad bc 07	lda $07bc			lda 	BasicFileStream 			; stream to write, count in X
.af01		20 59 84	jsr $8459			jsr 	KNLWriteBlock 				; call one write attempt
.af04		b0 f1		bcs $aef7			bcs 	CSErrorHandler 				; error occurred
.af06		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.af08		8a		txa				txa 								; subtract bytes written from X, total count.
.af09		38		sec				sec
.af0a		e5 38		sbc $38				sbc 	zTemp1
.af0c		aa		tax				tax
.af0d		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.af0e		a5 36		lda $36				lda 	zTemp0
.af10		65 38		adc $38				adc 	zTemp1
.af12		85 36		sta $36				sta 	zTemp0
.af14		90 e4		bcc $aefa			bcc 	CLWriteByteBlock
.af16		e6 37		inc $37				inc 	zTemp0+1
.af18		80 e0		bra $aefa			bra 	CLWriteByteBlock 			; and retry write out.
.af1a						_CLWBBExit:
.af1a		60		rts				rts
.af1b						CSGetCleanLine:
.af1b		a9 00		lda #$00			lda 	#0 							; no indent.
.af1d		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.af20		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.af22		a0 00		ldy #$00			ldy 	#0
.af24						_CSClean:
.af24		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.af27		f0 09		beq $af32			beq 	_CSDoneClean
.af29		30 04		bmi $af2f			bmi 	_CSIgnoreCharacter
.af2b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.af2e		e8		inx				inx
.af2f						_CSIgnoreCharacter:
.af2f		c8		iny				iny
.af30		80 f2		bra $af24			bra 	_CSClean
.af32						_CSDoneClean:
.af32		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.af34		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.af37		e8		inx				inx
.af38		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.af3b		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.af3d		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.af3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.af40						Command_Try:
.af40		b1 30		lda ($30),y			lda 	(codePtr),y
.af42		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.af44		d0 0c		bne $af52			bne 	_TrySyntax
.af46		c8		iny				iny 								; get second
.af47		b1 30		lda ($30),y			lda 	(codePtr),y
.af49		c8		iny				iny 								; and consume it.
.af4a		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.af4c		f0 09		beq $af57			beq 	_TryBLoad
.af4e		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.af50		f0 0a		beq $af5c			beq 	_TryBSave
.af52						_TrySyntax:
.af52		a9 02		lda #$02		lda	#2
.af54		4c a9 93	jmp $93a9		jmp	ErrorHandler
.af57						_TryBLoad:
.af57		20 ec ab	jsr $abec			jsr 	BLOADHandler
.af5a		80 03		bra $af5f			bra 	_TryExit
.af5c						_TryBSave:
.af5c		20 98 ac	jsr $ac98			jsr 	BSaveHandler
.af5f						_TryExit:
.af5f		48		pha				pha 								; save result
.af60		b1 30		lda ($30),y			lda 	(codePtr),y
.af62		c8		iny				iny
.af63		c9 dc		cmp #$dc			cmp 	#KWD_TO
.af65		d0 eb		bne $af52			bne 	_TrySyntax
.af67		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.af69		20 fd 9c	jsr $9cfd			jsr 	EvaluateTerm
.af6c		b5 50		lda $50,x			lda 	NSStatus,x
.af6e		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.af70		d0 e0		bne $af52			bne		_TrySyntax
.af72		68		pla				pla 								; error code.
.af73		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.af75		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.af78		ca		dex				dex
.af79		20 0d 8c	jsr $8c0d			jsr 	AssignVariable 				; do the assign and exit
.af7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e778						m
.af7d						Command_VERIFY:
.af7d		20 61 a2	jsr $a261			jsr 	EvaluateString 				; file name to verify
.af80		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.af82		a5 36		lda $36				lda 	zTemp0
.af84		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.af87		b0 4b		bcs $afd4			bcs 	_CVErrorHandler 			; error, so fail.
.af89		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.af8c		20 8b ae	jsr $ae8b			jsr     LoadReadByteInit            ; Init reader with the stream
.af8f		9c bb 07	stz $07bb			stz 	LoadEOFFlag 				; clear EOF Flag.
.af92		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af94		85 30		sta $30				sta 	codePtr
.af96		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af98		85 31		sta $31				sta 	codePtr+1
.af9a						_CVLoop:
.af9a		20 49 ae	jsr $ae49			jsr 	LoadReadLine 				; get next line.
.af9d		f0 27		beq $afc6			beq 	_CVExit 					; end, exit.
.af9f		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.afa2		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.afa5		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.afa8		f0 f0		beq $af9a			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.afaa		a0 00		ldy #$00			ldy 	#0 							; start compare
.afac						_CVCompareLoop:
.afac		b1 30		lda ($30),y			lda 	(codePtr),y
.afae		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.afb1		d0 1c		bne $afcf			bne 	_CVCompareError
.afb3		c8		iny				iny
.afb4		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.afb7		d0 f3		bne $afac			bne 	_CVCompareLoop
.afb9		18		clc				clc
.afba		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.afbc		65 30		adc $30				adc 	codePtr
.afbe		85 30		sta $30				sta 	codePtr
.afc0		90 02		bcc $afc4			bcc 	_CREExit
.afc2		e6 31		inc $31				inc 	codePtr+1 					; carry
.afc4						_CREExit:
.afc4		80 d4		bra $af9a			bra 	_CVLoop
.afc6						_CVExit:
.afc6		ad bc 07	lda $07bc			lda 	BasicFileStream
.afc9		20 93 84	jsr $8493			jsr 	KNLCloseFile
.afcc		4c 20 ae	jmp $ae20			jmp 	CLComplete
.afcf						_CVCompareError:
.afcf		a9 1b		lda #$1b		lda	#27
.afd1		4c a9 93	jmp $93a9		jmp	ErrorHandler
.afd4						_CVErrorHandler:
.afd4		4c 3b ae	jmp $ae3b			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.afd7						UnaryJoyX:
.afd7		18		clc				clc
.afd8		80 01		bra $afdb			bra 	JoyMain
.afda						UnaryJoyY:
.afda		38		sec				sec
.afdb						JoyMain:
.afdb		fa		plx				plx 								; get pos
.afdc		08		php				php 								; save carry (set for Y)
.afdd		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.afe0		20 90 93	jsr $9390			jsr 	CheckRightBracket
.afe3		20 99 84	jsr $8499			jsr 	KNLReadController 			; read the controller.
.afe6		28		plp				plp
.afe7		b0 02		bcs $afeb			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.afe9		4a		lsr a				lsr 	a
.afea		4a		lsr a				lsr 	a
.afeb						_JMNoShift:
.afeb		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.afec		b0 07		bcs $aff5			bcs 	JMIsLeft
.afee		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.afef		b0 07		bcs $aff8			bcs 	JMIsRight
.aff1		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; zero result
.aff4		60		rts				rts
.aff5						JMIsLeft:
.aff5		4c 1c 94	jmp $941c			jmp 	ReturnTrue
.aff8						JMIsRight:
.aff8		a9 01		lda #$01			lda 	#1
.affa		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.affd		60		rts				rts
.affe						UnaryJoyB:
.affe		fa		plx				plx 								; get pos
.afff		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b002		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b005		20 99 84	jsr $8499			jsr 	KNLReadController 			; read the controller.
.b008		29 10		and #$10			and 	#$10
.b00a		d0 e9		bne $aff5			bne 	JMIsLeft
.b00c		20 09 a3	jsr $a309			jsr 	NSMSetZero
.b00f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.b010						MCCommand:
.b010		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.b012		48		pha				pha
.b013		64 01		stz $01				stz 	1
.b015		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.b018		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.b01a		8d c0 07	sta $07c0			sta 	DMAControlByte
.b01d		20 cb b0	jsr $b0cb			jsr 	MCPosition 					; start position
.b020		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.b022		20 9c b0	jsr $b09c			jsr 	MCCopyAddress
.b025		a2 08		ldx #$08			ldx 	#8
.b027		20 9c b0	jsr $b09c			jsr 	MCCopyAddress
.b02a		b1 30		lda ($30),y			lda 	(codePtr),y
.b02c		c8		iny				iny
.b02d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.b02f		f0 09		beq $b03a			beq 	_MCSize1D
.b031		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.b033		f0 11		beq $b046			beq 	_MCRect2D
.b035						_MCSyntax:
.b035		a9 02		lda #$02		lda	#2
.b037		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b03a						_MCSize1D:
.b03a		a2 00		ldx #$00			ldx 	#0 							; get size
.b03c		20 76 a2	jsr $a276			jsr 	EvaluateInteger
.b03f		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.b041		20 9c b0	jsr $b09c			jsr 	MCCopyAddress
.b044		80 24		bra $b06a			bra 	_MCDestination
.b046						_MCRect2D:
.b046		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.b048		20 b9 b0	jsr $b0b9			jsr 	MCEvalCopyData16
.b04b		20 98 93	jsr $9398			jsr 	CheckComma
.b04e		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.b050		20 b9 b0	jsr $b0b9			jsr 	MCEvalCopyData16
.b053		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.b055		20 a0 93	jsr $93a0			jsr 	CheckNextA
.b058		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.b05a		20 b9 b0	jsr $b0b9			jsr 	MCEvalCopyData16
.b05d		a2 12		ldx #$12			ldx 	#$12
.b05f		20 c0 b0	jsr $b0c0			jsr 	MCCopyData16
.b062		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.b065		09 02		ora #$02			ora 	#$02
.b067		8d c0 07	sta $07c0			sta 	DMAControlByte
.b06a						_MCDestination:
.b06a		b1 30		lda ($30),y			lda 	(codePtr),y
.b06c		c8		iny				iny
.b06d		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.b06f		f0 0e		beq $b07f			beq 	_MCDestPoke
.b071		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.b073		d0 c0		bne $b035			bne 	_MCSyntax
.b075		20 cb b0	jsr $b0cb			jsr 	MCPosition 					; get target address
.b078		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.b07a		20 9c b0	jsr $b09c			jsr 	MCCopyAddress
.b07d		80 0e		bra $b08d			bra 	_MCDoDMA 					; and we can go.
.b07f						_MCDestPoke:
.b07f		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; POKE what
.b082		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.b085		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.b088		09 04		ora #$04			ora 	#$04
.b08a		8d c0 07	sta $07c0			sta 	DMAControlByte
.b08d						_MCDoDMA:
.b08d		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set the DMA Control byte to go !
.b090		8d 00 df	sta $df00			sta 	$DF00
.b093						_MCWaitBUSD:
.b093		ad 01 df	lda $df01			lda 	$DF01
.b096		30 fb		bmi $b093			bmi 	_MCWaitBUSD
.b098		68		pla				pla 								; restore I/O.
.b099		85 01		sta $01				sta 	1
.b09b		60		rts				rts
.b09c						MCCopyAddress:
.b09c		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.b09e		29 fc		and #$fc			and 	#$FC
.b0a0		05 70		ora $70				ora 	NSMantissa3
.b0a2		d0 10		bne $b0b4			bne 	_MCRange
.b0a4		a5 58		lda $58				lda 	NSMantissa0
.b0a6		9d 00 df	sta $df00,x			sta 	$DF00,x
.b0a9		a5 60		lda $60				lda 	NSMantissa1
.b0ab		9d 01 df	sta $df01,x			sta 	$DF01,x
.b0ae		a5 68		lda $68				lda 	NSMantissa2
.b0b0		9d 02 df	sta $df02,x			sta 	$DF02,x
.b0b3		60		rts				rts
.b0b4						_MCRange:
.b0b4		a9 04		lda #$04		lda	#4
.b0b6		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b0b9						MCEvalCopyData16:
.b0b9		da		phx				phx
.b0ba		a2 00		ldx #$00			ldx 	#0
.b0bc		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger
.b0bf		fa		plx				plx
.b0c0						MCCopyData16:
.b0c0		a5 58		lda $58				lda 	NSMantissa0
.b0c2		9d 00 df	sta $df00,x			sta 	$DF00,x
.b0c5		a5 60		lda $60				lda 	NSMantissa1
.b0c7		9d 01 df	sta $df01,x			sta 	$DF01,x
.b0ca		60		rts				rts
.b0cb						MCPosition:
.b0cb		a2 00		ldx #$00			ldx 	#0 							; get start address.
.b0cd		b1 30		lda ($30),y			lda 	(codePtr),y
.b0cf		c9 b9		cmp #$b9			cmp 	#KWD_AT
.b0d1		f0 04		beq $b0d7			beq 	_MCPAt
.b0d3		20 76 a2	jsr $a276			jsr 	EvaluateInteger
.b0d6		60		rts				rts
.b0d7						_MCPAt:
.b0d7		c8		iny				iny
.b0d8		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; X position
.b0db		48		pha				pha
.b0dc		20 98 93	jsr $9398			jsr 	CheckComma
.b0df		e8		inx				inx
.b0e0		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; Y position
.b0e3		ca		dex				dex
.b0e4		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.b0e6		64 58		stz $58				stz 	NSMantissa0
.b0e8		64 68		stz $68				stz 	NSMantissa2
.b0ea		64 70		stz $70				stz 	NSMantissa3
.b0ec		46 60		lsr $60				lsr 	NSMantissa1
.b0ee		66 58		ror $58				ror 	NSMantissa0
.b0f0		46 60		lsr $60				lsr 	NSMantissa1
.b0f2		66 58		ror $58				ror 	NSMantissa0
.b0f4		68		pla				pla
.b0f5		18		clc				clc
.b0f6		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.b0f8		85 58		sta $58				sta 	NSMantissa0
.b0fa		a5 60		lda $60				lda 	NSMantissa1
.b0fc		65 59		adc $59				adc 	NSMantissa0+1
.b0fe		85 60		sta $60				sta 	NSMantissa1
.b100		90 02		bcc $b104			bcc 	_MCPNoCarry
.b102		e6 68		inc $68				inc 	NSMantissa2
.b104						_MCPNoCarry:
.b104		ad df 07	lda $07df			lda 	gxBasePage
.b107		85 69		sta $69				sta 	NSMantissa2+1
.b109		64 59		stz $59				stz 	NSMantissa0+1
.b10b		64 61		stz $61				stz 	NSMantissa1+1
.b10d		64 71		stz $71				stz 	NSMantissa3+1
.b10f		a2 01		ldx #$01			ldx 	#1
.b111		20 22 a3	jsr $a322			jsr 	NSMShiftRight
.b114		20 22 a3	jsr $a322			jsr 	NSMShiftRight
.b117		20 22 a3	jsr $a322			jsr 	NSMShiftRight
.b11a		a2 00		ldx #$00			ldx 	#0
.b11c		20 a9 96	jsr $96a9			jsr 	AddTopTwoStack
.b11f		60		rts				rts
.07c0						DMAControlByte:
>07c0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.b120						MouseStatus:
.b120		a9 ff		lda #$ff	        lda     #255
.b122		80 02		bra $b126	        bra     MouseCommand
.b124						MouseDeltaStatus:
.b124		a9 00		lda #$00	        lda     #0
.b126						MouseCommand:
.b126		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.b129		a2 00		ldx #$00	        ldx     #0
.b12b						_MouseCommandLoop:
.b12b		da		phx		        phx                                 ; save slot.
.b12c		20 b1 98	jsr $98b1	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.b12f		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b131		c9 20		cmp #$20	        cmp     #NSBIsReference
.b133		d0 60		bne $b195	        bne     _MouseNotRef
.b135		b1 30		lda ($30),y			lda 	(codePtr),y
.b137		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b139		d0 01		bne $b13c	        bne     _MouseNoSkipComma
.b13b		c8		iny		        iny
.b13c						_MouseNoSkipComma:
.b13c		fa		plx		        plx                                 ; restore X
.b13d		5a		phy		        phy                                 ; save Y
.b13e		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b140		85 36		sta $36		        sta     zTemp0
.b142		a5 60		lda $60		        lda     NSMantissa1
.b144		85 37		sta $37		        sta     zTemp0+1
.b146		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b148		a9 00		lda #$00	        lda     #0
.b14a		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b14c		88		dey		        dey
.b14d		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b14f		88		dey		        dey
.b150		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b152		88		dey		        dey
.b153		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b156		30 12		bmi $b16a	        bmi     _MouseMouseCommand
.b158						_MouseMDeltaCommand:
.b158		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b15b		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b15d		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b160		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b162		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b165		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b168		80 0a		bra $b174	        bra     _MouseProcessData
.b16a						_MouseMouseCommand:
.b16a		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b16d		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b16f		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b172		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b174						_MouseProcessData:
.b174		b1 36		lda ($36),y	        lda     (zTemp0),y
.b176		10 15		bpl $b18d	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b178		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b179		a9 00		lda #$00	        lda     #0
.b17b		f2 36		sbc ($36)	        sbc     (zTemp0)
.b17d		92 36		sta ($36)	        sta     (zTemp0)
.b17f		a9 00		lda #$00	        lda     #0
.b181		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b183		91 36		sta ($36),y	        sta     (zTemp0),y
.b185		a0 03		ldy #$03	        ldy     #3
.b187		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b189		09 80		ora #$80	        ora     #$80
.b18b		91 36		sta ($36),y	        sta     (zTemp0),y
.b18d						_MouseDataPos:
.b18d		7a		ply		        ply                                 ; restore Y.
.b18e		e8		inx		        inx                                 ; next entry
.b18f		e8		inx		        inx
.b190		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b192		d0 97		bne $b12b	        bne     _MouseCommandLoop
.b194		60		rts		        rts
.b195						_MouseNotRef:
.b195		a9 07		lda #$07		lda	#7
.b197		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b19a						CommandSetDate:
.b19a		a9 03		lda #$03			lda 	#3
.b19c		80 02		bra $b1a0			bra 	CSDTMain
.b19e						CommandSetTime:
.b19e		a9 00		lda #$00			lda 	#0
.b1a0						CSDTMain:
.b1a0		48		pha				pha 								; save table offsets 0 or 3
.b1a1		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b1a3		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.b1a6		20 98 93	jsr $9398			jsr 	CheckComma
.b1a9		e8		inx				inx
.b1aa		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.b1ad		20 98 93	jsr $9398			jsr 	CheckComma
.b1b0		e8		inx				inx
.b1b1		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger
.b1b4		68		pla				pla 								; table offset in Y, saving Y
.b1b5		5a		phy				phy
.b1b6		a8		tay				tay
.b1b7		a2 00		ldx #$00			ldx 	#0 							; first number
.b1b9		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b1bb		48		pha				pha
.b1bc		64 01		stz $01				stz 	1
.b1be						_CSDTCopy:
.b1be		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b1c0		d9 02 b2	cmp $b202,y			cmp 	RTCWMinValues,y 			; check range
.b1c3		90 1b		bcc $b1e0			bcc 	_CSDTRange
.b1c5		d9 08 b2	cmp $b208,y			cmp 	RTCWMaxValues,y
.b1c8		b0 16		bcs $b1e0			bcs 	_CSDTRange
.b1ca		20 e5 b1	jsr $b1e5			jsr 	CSDTDecimalToBCD
.b1cd		da		phx				phx 								; save X
.b1ce		be fc b1	ldx $b1fc,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b1d1		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b1d4		fa		plx				plx 								; restore X
.b1d5		e8		inx				inx 								; next number
.b1d6		c8		iny				iny 								; next table entries
.b1d7		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b1d9		d0 e3		bne $b1be			bne 	_CSDTCopy
.b1db		68		pla				pla 								; restore I/O space
.b1dc		85 01		sta $01				sta 	1
.b1de		7a		ply				ply 								; restore code pos and exit.
.b1df		60		rts				rts
.b1e0						_CSDTRange:
.b1e0		a9 04		lda #$04		lda	#4
.b1e2		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b1e5						CSDTDecimalToBCD:
.b1e5		da		phx				phx 								; 10 count in X
.b1e6		a2 00		ldx #$00			ldx 	#0
.b1e8						_CSDTDBLoop:
.b1e8		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b1ea		90 05		bcc $b1f1			bcc 	_CSDTDBExit
.b1ec		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b1ee		e8		inx				inx 								; one more 10s.
.b1ef		80 f7		bra $b1e8			bra 	_CSDTDBLoop
.b1f1						_CSDTDBExit:
.b1f1		85 36		sta $36				sta 	zTemp0 						; units
.b1f3		8a		txa				txa 								; 10s x 16
.b1f4		0a		asl a				asl 	a
.b1f5		0a		asl a				asl 	a
.b1f6		0a		asl a				asl 	a
.b1f7		0a		asl a				asl 	a
.b1f8		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b1fa		fa		plx				plx
.b1fb		60		rts				rts
.b1fc						RTCWOffset:
>b1fc		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b202						RTCWMinValues:
>b202		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b208						RTCWMaxValues:
>b208		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b20e						UnaryTimer:
.b20e		fa		plx				plx
.b20f		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b212						TimerToStackX:
.b212		20 09 a3	jsr $a309			jsr 	NSMSetZero 					; zero result
.b215		64 01		stz $01				stz 	1 							; access I/O
.b217		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b21a		95 58		sta $58,x			sta 	NSMantissa0,x
.b21c		ad 5a d6	lda $d65a			lda 	$D65A
.b21f		95 60		sta $60,x			sta 	NSMantissa1,x
.b221		ad 5b d6	lda $d65b			lda 	$D65B
.b224		95 68		sta $68,x			sta 	NSMantissa2,x
.b226		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b227						UnaryGetTime:
.b227		a9 00		lda #$00			lda 	#0
.b229		80 02		bra $b22d			bra 	UGDTMain
.b22b						UnaryGetDate:
.b22b		a9 03		lda #$03			lda 	#3
.b22d						UGDTMain:
.b22d		fa		plx				plx 								; get stack position back
.b22e		48		pha				pha 								; save table offset
.b22f		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger			; ignored parameter
.b232		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; closing )
.b235		68		pla				pla 								; table offset in A
.b236		5a		phy				phy 								; saving Y
.b237		a8		tay				tay 								; table offset in Y
.b238		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b23a		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.b23d		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b23f		48		pha				pha
.b240		64 01		stz $01				stz 	1
.b242		20 55 b2	jsr $b255			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b245		20 50 b2	jsr $b250			jsr 	UGDTColonDigit
.b248		20 50 b2	jsr $b250			jsr 	UGDTColonDigit
.b24b		68		pla				pla 								; restore I/O select
.b24c		85 01		sta $01				sta 	1
.b24e		7a		ply				ply  								; restore code position
.b24f		60		rts				rts
.b250						UGDTColonDigit:
.b250		a9 3a		lda #$3a			lda 	#':'
.b252		20 67 b5	jsr $b567			jsr 	StringTempWrite
.b255						UGDTDigit:
.b255		da		phx				phx 								; save X
.b256		b9 75 b2	lda $b275,y			lda 	RTCROffset,y 				; get offset in RTC register
.b259		aa		tax				tax
.b25a		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b25d		39 7b b2	and $b27b,y			and 	RTCRMask,y 					; and with Mask.
.b260		fa		plx				plx
.b261		48		pha				pha 								; output in BCD
.b262		4a		lsr a				lsr 	a
.b263		4a		lsr a				lsr 	a
.b264		4a		lsr a				lsr 	a
.b265		4a		lsr a				lsr 	a
.b266		09 30		ora #$30			ora 	#48
.b268		20 67 b5	jsr $b567			jsr 	StringTempWrite
.b26b		68		pla				pla
.b26c		29 0f		and #$0f			and 	#15
.b26e		09 30		ora #$30			ora 	#48
.b270		20 67 b5	jsr $b567			jsr 	StringTempWrite
.b273		c8		iny				iny
.b274		60		rts				rts
.b275						RTCROffset:
>b275		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b27b						RTCRMask:
>b27b		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b281						AscGet:
.b281		fa		plx				plx 								; restore stack pos
.b282						AscGet2:
.b282		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b285		20 c0 81	jsr $81c0			jsr 	KNLGetSingleCharacter
.b288		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.b28b		60		rts				rts
.b28c						_AGBreak:
.b28c		a9 01		lda #$01		lda	#1
.b28e		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b291						AscInkey:
.b291		fa		plx				plx 								; restore stack pos
.b292						AscInkey2:
.b292		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b295		20 9e 81	jsr $819e			jsr 	KNLGetKeyPressed
.b298		20 0b a3	jsr $a30b			jsr 	NSMSetByte
.b29b		60		rts				rts
.b29c						ChrGet:
.b29c		fa		plx				plx
.b29d		20 82 b2	jsr $b282			jsr 	AscGet2
.b2a0		4c a7 b2	jmp $b2a7			jmp 	GetInkeyToString
.b2a3						ChrInkey:
.b2a3		fa		plx				plx
.b2a4		20 92 b2	jsr $b292			jsr 	AscInkey2
.b2a7						GetInkeyToString:
.b2a7		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b2a9		f0 0b		beq $b2b6			beq 	_GKISNull
.b2ab		48		pha				pha
.b2ac		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b2ae		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.b2b1		68		pla				pla 								; write number to it
.b2b2		20 67 b5	jsr $b567			jsr 	StringTempWrite
.b2b5		60		rts				rts
.b2b6						_GKISNull:
.b2b6		a9 00		lda #$00			lda 	#0
.b2b8		20 2e b5	jsr $b52e			jsr 	StringTempAllocate
.b2bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b2bc						KeyDown:
.b2bc		20 40 81	jsr $8140			jsr 	ProcessEvents 				; process outstanding events.
.b2bf		fa		plx				plx 								; restore stack pos
.b2c0		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; key to check.
.b2c3		48		pha				pha 								; check right bracket.
.b2c4		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b2c7		68		pla				pla
.b2c8		20 ac 83	jsr $83ac			jsr 	KeyboardConvertXA 			; get offset and mask.
.b2cb		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b2ce		f0 03		beq $b2d3			beq 	_KeyUp
.b2d0		4c 1c 94	jmp $941c			jmp 	ReturnTrue
.b2d3		4c 27 94	jmp $9427	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b2d6						Unary_Random:
.b2d6		fa		plx				plx
.b2d7		20 27 b3	jsr $b327			jsr 	URCopyToMantissa  			; put random # in mantissa
.b2da		b1 30		lda ($30),y			lda 	(codePtr),y
.b2dc		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b2de		f0 08		beq $b2e8			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b2e0		e8		inx				inx
.b2e1		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b2e4		ca		dex				dex
.b2e5		20 6e 95	jsr $956e			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b2e8						_URNoModulus:
.b2e8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b2ea		74 78		stz $78,x			stz 	NSExponent,x
.b2ec		20 90 93	jsr $9390			jsr 	CheckRightBracket
.b2ef		60		rts				rts
.b2f0						Unary_Rnd:
.b2f0		fa		plx				plx
.b2f1		20 57 a2	jsr $a257			jsr 	EvaluateNumber 				; number to use.
.b2f4		20 90 93	jsr $9390			jsr 	CheckRightBracket 			; closing bracket
.b2f7		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b2f9		10 20		bpl $b31b			bpl 	_URDontSeed
.b2fb		a5 01		lda $01				lda 	1 							; switch to page 0
.b2fd		48		pha				pha
.b2fe		64 01		stz $01				stz 	1
.b300		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b302		49 17		eor #$17			eor 	#$17
.b304		8d a4 d6	sta $d6a4			sta 	$D6A4
.b307		b5 60		lda $60,x			lda 	NSMantissa1,x
.b309		49 a5		eor #$a5			eor 	#$A5
.b30b		8d a5 d6	sta $d6a5			sta 	$D6A5
.b30e		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b310		8d a6 d6	sta $d6a6			sta 	$D6A6
.b313		a9 01		lda #$01			lda 	#1
.b315		8d a6 d6	sta $d6a6			sta 	$D6A6
.b318		68		pla				pla
.b319		85 01		sta $01				sta 	1
.b31b						_URDontSeed:
.b31b		20 27 b3	jsr $b327			jsr 	URCopyToMantissa 			; copy into mantissa
.b31e		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b320		95 78		sta $78,x			sta 	NSExponent,x
.b322		a9 08		lda #$08			lda 	#NSTFloat
.b324		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b326		60		rts				rts
.b327						URCopyToMantissa:
.b327		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b329		48		pha				pha
.b32a		64 01		stz $01				stz 	1
.b32c		a9 01		lda #$01			lda 	#1
.b32e		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b331		ad a4 d6	lda $d6a4			lda 	$D6A4
.b334		95 58		sta $58,x			sta 	NSMantissa0,x
.b336		ad a5 d6	lda $d6a5			lda 	$D6A5
.b339		95 60		sta $60,x			sta 	NSMantissa1,x
.b33b		ad a4 d6	lda $d6a4			lda 	$D6A4
.b33e		95 68		sta $68,x			sta 	NSMantissa2,x
.b340		ad a5 d6	lda $d6a5			lda 	$D6A5
.b343		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b345		95 70		sta $70,x			sta 	NSMantissa3,x
.b347		68		pla				pla
.b348		85 01		sta $01				sta 	1
.b34a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b34b						PingCommand:
.b34b		5a		phy				phy 								; save pos
.b34c		a9 01		lda #$01			lda 	#1 						; push channel.
.b34e		48		pha				pha
.b34f		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b351		a2 06		ldx #$06			ldx 	#6 						; length
.b353		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b355		80 24		bra $b37b			bra 	SoundEffectCommand
.b357						ZapCommand:
.b357		5a		phy				phy 								; save pos
.b358		a9 01		lda #$01			lda 	#1 						; push channel.
.b35a		48		pha				pha
.b35b		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b35d		a2 0a		ldx #$0a			ldx 	#10 						; length
.b35f		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b361		80 18		bra $b37b			bra 	SoundEffectCommand
.b363						ShootCommand:
.b363		5a		phy				phy 								; save pos
.b364		a9 03		lda #$03			lda 	#3 						; push channel.
.b366		48		pha				pha
.b367		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b369		a2 04		ldx #$04			ldx 	#4 						; length
.b36b		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b36d		80 0c		bra $b37b			bra 	SoundEffectCommand
.b36f						Explode:
.b36f		5a		phy				phy 								; save pos
.b370		a9 03		lda #$03			lda 	#3 						; push channel.
.b372		48		pha				pha
.b373		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b375		a2 0a		ldx #$0a			ldx 	#10 						; length
.b377		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b379		80 00		bra $b37b			bra 	SoundEffectCommand
.b37b						SoundEffectCommand:
.b37b		8d c1 07	sta $07c1			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b37e		9c c2 07	stz $07c2			stz 	SoundCommandBlock+1
.b381		a9 0f		lda #$0f			lda 	#15
.b383		8d c3 07	sta $07c3			sta 	SoundCommandBlock+2
.b386		8e c4 07	stx $07c4			stx 	SoundCommandBlock+3
.b389		8c c5 07	sty $07c5			sty 	SoundCommandBlock+4
.b38c		9c c6 07	stz $07c6			stz 	SoundCommandBlock+5
.b38f		68		pla				pla
.b390		09 10		ora #$10			ora 	#$10  						; execute command $11
.b392		a2 c1		ldx #$c1			ldx 	#(SoundCommandBlock & $FF)
.b394		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b396		20 6b 80	jsr $806b			jsr 	SNDCommand
.b399		7a		ply				ply
.b39a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b39b						UnaryPlaying:
.b39b		fa		plx				plx
.b39c		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; get channel #
.b39f		48		pha				pha
.b3a0		20 90 93	jsr $9390			jsr		CheckRightBracket
.b3a3		68		pla				pla
.b3a4		c9 04		cmp #$04			cmp 	#4
.b3a6		b0 0c		bcs $b3b4			bcs 	_UPNotPlaying
.b3a8		09 20		ora #$20			ora 	#$20 						; query playing ?
.b3aa		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3ad		c9 00		cmp #$00			cmp 	#0
.b3af		f0 03		beq $b3b4			beq 	_UPNotPlaying
.b3b1		4c 1c 94	jmp $941c			jmp 	ReturnTrue
.b3b4						_UPNotPlaying:
.b3b4		4c 27 94	jmp $9427			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b3b7						SoundCommand:
.b3b7		b1 30		lda ($30),y			lda 	(codePtr),y
.b3b9		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b3bb		d0 09		bne $b3c6			bne 	_SNDMain
.b3bd		c8		iny				iny 								; skip OFF
.b3be		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b3c0		5a		phy				phy
.b3c1		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3c4		7a		ply				ply
.b3c5		60		rts				rts
.b3c6						_SNDMain:
.b3c6		a2 00		ldx #$00			ldx 	#0
.b3c8		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; channel
.b3cb		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b3cd		b0 4b		bcs $b41a			bcs 	_SndError
.b3cf		e8		inx				inx 								; do the rest in slot 1.
.b3d0		20 98 93	jsr $9398			jsr 	CheckComma
.b3d3		20 89 a2	jsr $a289			jsr 	Evaluate16BitInteger 		; Pitch
.b3d6		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b3d8		c9 10		cmp #$10			cmp 	#16
.b3da		b0 3e		bcs $b41a			bcs 	_SndError
.b3dc		8d c2 07	sta $07c2			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b3df		b5 58		lda $58,x			lda 	NSMantissa0,x
.b3e1		8d c1 07	sta $07c1			sta 	SoundCommandBlock
.b3e4		20 98 93	jsr $9398			jsr 	CheckComma
.b3e7		20 a4 a2	jsr $a2a4			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b3ea		8d c4 07	sta $07c4			sta 	SoundCommandBlock+3
.b3ed		a9 0f		lda #$0f			lda 	#15
.b3ef		8d c3 07	sta $07c3			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b3f2		9c c5 07	stz $07c5			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b3f5		9c c6 07	stz $07c6			stz 	SoundCommandBlock+5
.b3f8		b1 30		lda ($30),y			lda 	(codePtr),y
.b3fa		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b3fc		d0 0e		bne $b40c			bne 	_SNDPlay
.b3fe		c8		iny				iny
.b3ff		20 93 a2	jsr $a293			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b402		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b404		8d c5 07	sta $07c5			sta 	SoundCommandBlock+4
.b407		b5 60		lda $60,x			lda 	NSMantissa1,x
.b409		8d c6 07	sta $07c6			sta 	SoundCommandBlock+5
.b40c						_SNDPlay:
.b40c		5a		phy				phy
.b40d		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b40f		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b411		a2 c1		ldx #$c1			ldx 	#(SoundCommandBlock & $FF)
.b413		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b415		20 6b 80	jsr $806b			jsr 	SNDCommand
.b418		7a		ply				ply
.b419		60		rts				rts
.b41a						_SndError:
.b41a		4c 86 a4	jmp $a486			jmp 	RangeError
.07c1						SoundCommandBlock:
>07c1								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b41d						StackPushByte:
.b41d		48		pha				pha 								; save byte on stack
.b41e		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b420		d0 08		bne $b42a			bne 	_SPBNoBorrow
.b422		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b424		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b426		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b428		90 06		bcc $b430			bcc 	_SPBMemory
.b42a						_SPBNoBorrow:
.b42a		c6 34		dec $34				dec 	basicStack
.b42c		68		pla				pla 								; get back and write
.b42d		92 34		sta ($34)			sta 	(basicStack)
.b42f		60		rts				rts
.b430						_SPBMemory:
.b430		a9 12		lda #$12		lda	#18
.b432		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b435						StackPopByte:
.b435		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b437		e6 34		inc $34				inc 	basicStack
.b439		d0 02		bne $b43d			bne 	_SPBNoCarry
.b43b		e6 35		inc $35				inc 	basicStack+1
.b43d						_SPBNoCarry:
.b43d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b43e						StackOpen:
.b43e		48		pha				pha 								; save frame byte
.b43f		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b441		0a		asl a				asl 	a 							; claim twice this for storage
.b442		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b444		38		sec				sec 								; so basically subtracting from
.b445		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b447		85 34		sta $34				sta 	basicStack
.b449		b0 09		bcs $b454			bcs 	_SONoBorrow
>b44b		db						.byte 	$DB 						; causes a break in the emulator
.b44c		c6 35		dec $35				dec 	basicStack+1
.b44e		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b450		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b452		90 04		bcc $b458			bcc 	_SOMemory
.b454						_SONoBorrow:
.b454		68		pla				pla 								; get marker back and write at TOS
.b455		92 34		sta ($34)			sta 	(basicStack)
.b457		60		rts				rts
.b458						_SOMemory:
.b458		a9 12		lda #$12		lda	#18
.b45a		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b45d						StackClose:
.b45d		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b45f		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b461		0a		asl a				asl 	a 							; claim twice this.
.b462		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b464		85 34		sta $34				sta 	basicStack
.b466		90 02		bcc $b46a			bcc 	_SCExit
.b468		e6 35		inc $35				inc 	basicStack+1
.b46a						_SCExit:
.b46a		60		rts				rts
.b46b						StackCheckFrame:
.b46b		48		pha				pha
.b46c						_StackRemoveLocals:
.b46c		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b46e		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b470		b0 05		bcs $b477			bcs 	_SCNoLocal
.b472		20 a4 8d	jsr $8da4			jsr 	LocalPopValue 				; restore the local value
.b475		80 f5		bra $b46c			bra 	_StackRemoveLocals 			; gr round again
.b477						_SCNoLocal:
.b477		68		pla				pla 								; get the frame check.
.b478		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b47a		29 f0		and #$f0			and 	#$F0 						; check type bits
.b47c		d0 01		bne $b47f			bne 	_SCFError 					; different, we have structures mixed up
.b47e		60		rts				rts
.b47f						_SCFError:
.b47f		8a		txa				txa 								; report error X
.b480		4c a9 93	jmp $93a9			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b483						STKSaveCodePosition:
.b483		5a		phy				phy
.b484		98		tya				tya 								; save Y
.b485		a0 05		ldy #$05			ldy 	#5
.b487		91 34		sta ($34),y			sta 	(basicStack),y
.b489		88		dey				dey 								; save Code Pointer
.b48a						_STKSaveLoop:
.b48a		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b48d		91 34		sta ($34),y			sta 	(basicStack),y
.b48f		88		dey				dey
.b490		d0 f8		bne $b48a			bne 	_STKSaveLoop
.b492		7a		ply				ply
.b493		60		rts				rts
.b494						STKLoadCodePosition:
.b494		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b496						_STKLoadLoop:
.b496		b1 34		lda ($34),y			lda 	(basicStack),y
.b498		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b49b		c8		iny				iny
.b49c		c0 05		cpy #$05			cpy 	#5
.b49e		d0 f6		bne $b496			bne 	_STKLoadLoop
.b4a0		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b4a2		a8		tay				tay
.b4a3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b4a4						StackReset:
.b4a4		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b4a6		85 34		sta $34				sta 	0+basicStack
.b4a8		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b4aa		85 35		sta $35				sta 	1+basicStack
.b4ac		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b4ae		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b4b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b4b1						StringConcrete:
.b4b1		5a		phy				phy 								; save position on stack
.b4b2		20 e9 9e	jsr $9ee9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b4b5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b4b7		85 38		sta $38				sta 	zTemp1
.b4b9		b5 60		lda $60,x			lda 	NSMantissa1,x
.b4bb		85 39		sta $39				sta 	zTemp1+1
.b4bd		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b4bf						_SALength:
.b4bf		c8		iny				iny
.b4c0		b1 38		lda ($38),y			lda 	(zTemp1),y
.b4c2		d0 fb		bne $b4bf			bne 	_SALength
.b4c4		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b4c6		b0 3d		bcs $b505			bcs 	_SALengthError
.b4c8		98		tya				tya 				 				; length of the new string
.b4c9		18		clc				clc
.b4ca		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b4cc		90 02		bcc $b4d0			bcc 	_SAHaveLength
.b4ce		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b4d0						_SAHaveLength:
.b4d0		48		pha				pha 								; save length.
.b4d1		38		sec				sec
.b4d2		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b4d4		6d 0a 04	adc $040a			adc 	stringMemory
.b4d7		8d 0a 04	sta $040a			sta 	stringMemory
.b4da		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b4dc		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b4de		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b4e0		6d 0b 04	adc $040b			adc 	stringMemory+1
.b4e3		8d 0b 04	sta $040b			sta 	stringMemory+1
.b4e6		85 3b		sta $3b				sta 	zTemp2+1
.b4e8		95 60		sta $60,x			sta 	NSMantissa1,x
.b4ea		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b4eb		38		sec				sec
.b4ec		e9 03		sbc #$03			sbc 	#3
.b4ee		92 3a		sta ($3a)			sta 	(zTemp2)
.b4f0		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b4f2		a0 01		ldy #$01			ldy 	#1
.b4f4		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4f6						_SACopyNewString:
.b4f6		a0 00		ldy #$00			ldy 	#0
.b4f8						_SACopyNSLoop:
.b4f8		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b4fa		c8		iny				iny 								; write two on in string storage
.b4fb		c8		iny				iny
.b4fc		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4fe		88		dey				dey 								; this makes it one one.
.b4ff		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b501		d0 f5		bne $b4f8			bne 	_SACopyNSLoop
.b503		7a		ply				ply
.b504		60		rts				rts
.b505						_SALengthError:
.b505		a9 09		lda #$09		lda	#9
.b507		4c a9 93	jmp $93a9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b50a						StringSystemInitialise:
.b50a		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b50c		8d 0a 04	sta $040a			sta 	0+stringMemory
.b50f		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b511		8d 0b 04	sta $040b			sta 	1+stringMemory
.b514		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b517		60		rts				rts
.b518						StringSpaceInitialise:
.b518		20 e9 9e	jsr $9ee9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b51b		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b51d		8d 0c 04	sta $040c			sta 	stringInitialised
.b520		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b523		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b526		ad 0b 04	lda $040b			lda 	stringMemory+1
.b529		3a		dec a				dec 	a
.b52a		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b52d		60		rts				rts
.b52e						StringTempAllocate:
.b52e		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b530		b0 30		bcs $b562			bcs 	_STALength
.b532		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b535		30 05		bmi $b53c			bmi 	_STAAllocate
.b537		48		pha				pha 								; save value to subtract.
.b538		20 18 b5	jsr $b518			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b53b		68		pla				pla 								; restore it
.b53c						_STAAllocate:
.b53c		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b53e		18		clc				clc  								; deliberate allows one more
.b53f		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b542		8d 0d 04	sta $040d			sta 	stringTempPointer
.b545		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b547		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b549		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b54c		69 ff		adc #$ff			adc 	#$FF
.b54e		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b551		85 3d		sta $3d				sta 	zsTemp+1
.b553		95 60		sta $60,x			sta 	NSMantissa1,x
.b555		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b557		74 70		stz $70,x			stz 	NSMantissa3,x
.b559		a9 10		lda #$10			lda 	#NSTString
.b55b		95 50		sta $50,x			sta 	NSStatus,x
.b55d		a9 00		lda #$00			lda 	#0 							; clear the target string
.b55f		92 3c		sta ($3c)			sta 	(zsTemp)
.b561		60		rts				rts
.b562						_STALength:
.b562		a9 09		lda #$09		lda	#9
.b564		4c a9 93	jmp $93a9		jmp	ErrorHandler
.b567						StringTempWrite:
.b567		48		pha				pha
.b568		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b56a		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b56c		d0 02		bne $b570			bne 	_STWNoCarry
.b56e		e6 3d		inc $3d				inc 	zsTemp+1
.b570						_STWNoCarry:
.b570		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b572		92 3c		sta ($3c)			sta 	(zsTemp)
.b574		68		pla				pla
.b575		60		rts				rts

;******  Return to file: _basic.asm

.b576						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c8 07	ldy $07c8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c8 07	ldy $07c8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c9 07	lda $07c9			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c8 07	sty $07c8			sty 	EXTColumn
.c02d	a02d	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c7 07	inc $07c7			inc 	EXTRow  					; bump row
.c035	a035	9c c8 07	stz $07c8			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c7 07	lda $07c7			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd cb 07	cmp $07cb			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d ca 07	adc $07ca			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c8 07	dec $07c8			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c8 07	stz $07c8			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c7 07	dec $07c7			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c7 07	lda $07c7			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c7 07	dec $07c7			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed ca 07	sbc $07ca			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c8 07	sty $07c8			sty 	EXTColumn
.c08c	a08c	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c8 07	sty $07c8			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad cb 07	lda $07cb			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c7 07	cmp $07c7			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c7 07	inc $07c7			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d ca 07	adc $07ca			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c8 07	lda $07c8			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c8 07	sta $07c8			sta 	EXTColumn
.c0c9	a0c9	cd ca 07	cmp $07ca			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c8 07	dec $07c8			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c9 07	and $07c9			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c9 07	sta $07c9			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c9 07	ora $07c9			ora 	EXTTextColour
.c13c	a13c	8d c9 07	sta $07c9			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c9 07	lda $07c9			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c9 07	lda $07c9			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c7 07	stz $07c7			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c8 07	stz $07c8			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c8 07	lda $07c8			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c7 07	lda $07c7			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c7						EXTRow:
>07c7								.fill 	1
.07c8						EXTColumn:
>07c8								.fill 	1
.07c9						EXTTextColour:
>07c9								.fill 	1
.07ca						EXTScreenWidth:
>07ca								.fill 	1
.07cb						EXTScreenHeight:
>07cb								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c9 07	sta $07c9			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d ca 07	sta $07ca			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d cb 07	sta $07cb			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c7 07	lda $07c7			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad ca 07	lda $07ca			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TileSize = 11*2
=24						GCMD_TileScrollX = 12*2
=26						GCMD_TileScrollY = 13*2
=28						GCMD_TilePos = 14*2
=30						GCMD_TileWrite = 15*2
=32						GCMD_TileRead = 16*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d9 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f8 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	40 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	b1 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	da aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	ff ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	71 a6					.word	GXControlTileSize        ; $0b TileSize
>c2ff	a2ff	a1 a9					.word	GXControlTileScrollX     ; $0c TileScrollX
>c301	a301	b2 a9					.word	GXControlTileScrollY     ; $0d TileScrollY
>c303	a303	e0 ab					.word	GXSelectTile             ; $0e TilePos
>c305	a305	42 ac					.word	GXSTWriteTile            ; $0f TileWrite
>c307	a307	45 ac					.word	GXSTReadTile             ; $10 TileRead
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	a7 a6					.word	GXLine                   ; $21 Line
>c32b	a32b	22 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	1f a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	07 a8					.word	GXPlotPoint              ; $28 Plot
>c339	a339	70 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07cc						gxCurrentX:
>07cc								.fill 	2
.07ce						gxCurrentY:
>07ce								.fill 	2
.07d0						gxLastX:
>07d0								.fill 	2
.07d2						gxLastY:
>07d2								.fill 	2
.07d4						gxX0:
>07d4								.fill 	2
.07d6						gxY0:
>07d6								.fill 	2
.07d8						gxX1:
>07d8								.fill 	2
.07da						gxY1:
>07da								.fill 	2
.07dc						gxSpritesOn:
>07dc								.fill 	1
.07dd						gxBitmapsOn:
>07dd								.fill 	1
.07de						gxTilesOn:
>07de								.fill 	1
.07df						gxBasePage:
>07df								.fill 	1
.07e0						gxSpritePage:
>07e0								.fill 	1
.07e1						gxTileImagePage:
>07e1								.fill 	1
.07e2						gxTileMapPage:
>07e2								.fill 	1
.07e3						gxTileMapWidth:
>07e3								.fill 	1
.07e4						gxTileMapHeight:
>07e4								.fill 	1
.07e5						gxHeight:
>07e5								.fill 	1
.07e6						gxMode:
>07e6								.fill 	1
.07e7						gxColour:
>07e7								.fill 	1
.07e8						gxEORValue:
>07e8								.fill 	1
.07e9						gxANDValue:
>07e9								.fill 	1
.07ea						gxOriginalLUTValue:
>07ea								.fill 	1
.07eb						gxOffset:
>07eb								.fill 	1
.07ec						GSCurrentSpriteID:
>07ec								.fill 	1
.07ed						GSCurrentSpriteAddr:
>07ed								.fill 	2
.07ef						gxSpriteOffsetBase:
>07ef								.fill 	2
.07f1						gxSpriteLow:
>07f1								.fill 	64
.0831						gxSpriteHigh:
>0831								.fill 	64
.0871						gxTileAccessPage:
>0871								.fill 	1
.0872						gxTileAccessAddress:
>0872								.fill 	2
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd cc 07	lda $07cc,x			lda 	gxCurrentX,x
.c34d	a34d	9d d0 07	sta $07d0,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ce 07	sta $07ce			sta 	gxCurrentY
.c357	a357	9c cf 07	stz $07cf			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d cc 07	sta $07cc			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d cd 07	sta $07cd			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad cd 07	lda $07cd			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad cc 07	lda $07cc			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ce 07	lda $07ce			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd e5 07	cmp $07e5			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd cc 07	lda $07cc,x			lda 	gxCurrentX,x
.c389	a389	9d d4 07	sta $07d4,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 77 08	sta $0877			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad dd 07	lda $07dd			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 a6 ad	jsr $ada6			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 78 08	stz $0878			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 75 08	lda $0875			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 76 08	cmp $0876			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 76 08	lda $0876			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 75 08	lda $0875			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 76 08	ldx $0876			ldx	 	gxYCentre
.c3e6	a3e6	8d 76 08	sta $0876			sta 	gxYCentre
.c3e9	a3e9	8e 75 08	stx $0875			stx 	gxxCentre
.c3ec	a3ec	ad 78 08	lda $0878			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 78 08	sta $0878			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 77 08	lda $0877	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 78 08	lda $0878			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 76 08	lda $0876			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 75 08	lda $0875			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 77 08	lda $0877			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 72 a8	jsr $a872			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 76 08	sbc $0876			sbc 	gxYCentre
.c42d	a42d	8d 76 08	sta $0876			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd d8 07	lda $07d8,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d d4 07	sta $07d4,x			sta 	gxX0,x
.c444	a444	bd d9 07	lda $07d9,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d d5 07	sta $07d5,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 78 08	stz $0878			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 75 08	inc $0875			inc 	gxxCentre 					; X++
.c459	a459	ad 75 08	lda $0875			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 75 08	inc $0875			inc 	gxxCentre					; X++
.c466	a466	ce 76 08	dec $0876			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 75 08	lda $0875			lda 	gxxCentre
.c46d	a46d	ed 76 08	sbc $0876			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 78 08	dec $0878			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad da 07	lda $07da			lda 	gxY1
.c4a6	a4a6	ed d6 07	sbc $07d6			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 74 08	sta $0874			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 75 08	stz $0875			stz 	gxxCentre
.c4ba	a4ba	ad 74 08	lda $0874			lda 	gxRadius
.c4bd	a4bd	8d 76 08	sta $0876			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd d8 07	lda $07d8,x			lda 	gxX1,x
.c4d5	a4d5	7d d4 07	adc $07d4,x			adc 	gxX0,x
.c4d8	a4d8	9d d8 07	sta $07d8,x			sta 	gxX1,x
.c4db	a4db	bd d9 07	lda $07d9,x			lda 	gxX1+1,x
.c4de	a4de	7d d5 07	adc $07d5,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d d9 07	sta $07d9,x			sta 	gxX1+1,x
.c4e5	a4e5	7e d8 07	ror $07d8,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.0874						gxRadius:
>0874								.fill 	1
.0875						gxxCentre:
>0875								.fill 	1
.0876						gxYCentre:
>0876								.fill 	1
.0877						gxIsFillMode:
>0877								.fill 	1
.0878						gxYChanged:
>0878								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad e5 07	lda $07e5			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d df 07	adc $07df			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd df 07	cmp $07df			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c dc 07	stz $07dc			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c dd 07	stz $07dd			stz 	gxBitmapsOn
.c547	a547	9c de 07	stz $07de			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e cc 07	stz $07cc,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d dd 07	sta $07dd			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d df 07	sta $07df			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e e5 07	stx $07e5			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d dc 07	sta $07dc			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d e0 07	sta $07e0			sta 	gxSpritePage
.c5c9	a5c9	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d ef 07	sta $07ef			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d f0 07	sta $07f0			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c ee 07	stz $07ee			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c de 07	stz $07de			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d de 07	sta $07de			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d e3 07	sta $07e3			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d e4 07	sta $07e4			sta 	gxTileMapHeight
.c617	a617	ad de 07	lda $07de			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	d0 02		bne $a620			bne	 	_GXCTNotMapDefault 			; check for default
.c61e	a61e	a9 12		lda #$12			lda 	#TILEMAP_ADDRESS >> 13
.c620	a620					_GXCTNotMapDefault:
.c620	a620	8d e2 07	sta $07e2			sta 	gxTileMapPage
.c623	a623	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c625	a625	d0 02		bne $a629			bne 	_GXCTNotImgDefault 			; check for default
.c627	a627	a9 13		lda #$13			lda 	#TILEIMAGES_ADDRESS >> 13
.c629	a629					_GXCTNotImgDefault:
.c629	a629	8d e1 07	sta $07e1			sta 	gxTileImagePage
.c62c	a62c	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c62e	a62e	8d 00 d2	sta $d200			sta 	$D200
.c631	a631	ad e2 07	lda $07e2			lda 	gxTileMapPage 				; put tile map address in.
.c634	a634	20 8b a6	jsr $a68b			jsr		GXCalculateBaseAddress
.c637	a637	9c 01 d2	stz $d201			stz 	$D201
.c63a	a63a	a5 36		lda $36				lda 	gxzTemp0
.c63c	a63c	8d 02 d2	sta $d202			sta 	$D202
.c63f	a63f	a5 37		lda $37				lda 	gxzTemp0+1
.c641	a641	8d 03 d2	sta $d203			sta 	$D203
.c644	a644	ad e3 07	lda $07e3			lda 	gxTileMapWidth	 			; set tilemap size.
.c647	a647	8d 04 d2	sta $d204			sta 	$D204
.c64a	a64a	ad e4 07	lda $07e4			lda 	gxTileMapHeight
.c64d	a64d	8d 06 d2	sta $d206			sta 	$D206
.c650	a650	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c653	a653	9c 09 d2	stz $d209			stz 	$D209
.c656	a656	9c 0a d2	stz $d20a			stz 	$D20A
.c659	a659	9c 0b d2	stz $d20b			stz 	$D20B
.c65c	a65c	ad e1 07	lda $07e1			lda 	gxTileImagePage 			; set the tile image address
.c65f	a65f	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress
.c662	a662	9c 80 d2	stz $d280			stz 	$D280
.c665	a665	a5 36		lda $36				lda 	gxzTemp0
.c667	a667	8d 81 d2	sta $d281			sta 	$D281
.c66a	a66a	a5 37		lda $37				lda 	gxzTemp0+1
.c66c	a66c	8d 82 d2	sta $d282			sta 	$D282
.c66f	a66f	18		clc				clc
.c670	a670	60		rts				rts
.c671	a671					GXControlTileSize:
.c671	a671	ad de 07	lda $07de			lda 	gxTilesOn 					; check on
.c674	a674	38		sec				sec
.c675	a675	f0 13		beq $a68a			beq 	_GXCTSExit
.c677	a677	64 01		stz $01				stz 	1 							; access I/O 0
.c679	a679	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c67b	a67b	8d e3 07	sta $07e3			sta 	gxTileMapWidth
.c67e	a67e	8d 04 d2	sta $d204			sta 	$D204
.c681	a681	a5 37		lda $37				lda 	gxzTemp0+1
.c683	a683	8d e4 07	sta $07e4			sta 	gxTileMapHeight
.c686	a686	8d 06 d2	sta $d206			sta 	$D206
.c689	a689	18		clc				clc
.c68a	a68a					_GXCTSExit:
.c68a	a68a	60		rts				rts
.c68b	a68b					GXCalculateBaseAddress:
.c68b	a68b	85 36		sta $36				sta 	gxzTemp0
.c68d	a68d	64 37		stz $37				stz 	gxzTemp0+1
.c68f	a68f	a9 05		lda #$05			lda 	#5
.c691	a691					_GXShift:
.c691	a691	06 36		asl $36				asl 	gxzTemp0
.c693	a693	26 37		rol $37				rol 	gxzTemp0+1
.c695	a695	3a		dec a				dec		a
.c696	a696	d0 f9		bne $a691			bne 	_GXShift
.c698	a698	60		rts				rts
.c699	a699					GXClearSpriteStore:
.c699	a699	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c69b	a69b					_GXCSSLoop:
.c69b	a69b	9e 31 08	stz $0831,x			stz 	gxSpriteHigh,x
.c69e	a69e	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c6a0	a6a0	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.c6a3	a6a3	ca		dex				dex
.c6a4	a6a4	10 f5		bpl $a69b			bpl 	_GXCSSLoop
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					GXLine:
.c6a7	a6a7	ad dd 07	lda $07dd			lda 	gxBitmapsOn					; check bitmap on.
.c6aa	a6aa	f0 28		beq $a6d4			beq 	_GXLFail
.c6ac	a6ac	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; access it.
.c6af	a6af	20 c4 ad	jsr $adc4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6b2	a6b2	20 7a a7	jsr $a77a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6b5	a6b5	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b8	a6b8					_GXDrawLoop:
.c6b8	a6b8	ac eb 07	ldy $07eb			ldy 	gxOffset 					; draw the pixel
.c6bb	a6bb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6bd	a6bd	2d e9 07	and $07e9			and 	gxANDValue
.c6c0	a6c0	4d e8 07	eor $07e8			eor 	gxEORValue
.c6c3	a6c3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6c5	a6c5	20 d6 a6	jsr $a6d6			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c8	a6c8	f0 05		beq $a6cf			beq 	_GXLExit
.c6ca	a6ca	20 f1 a6	jsr $a6f1			jsr 	GXLineAdvance 				; code as per advance method
.c6cd	a6cd	80 e9		bra $a6b8			bra 	_GXDrawLoop
.c6cf	a6cf					_GXLExit:
.c6cf	a6cf	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; restore and return success.
.c6d2	a6d2	18		clc				clc
.c6d3	a6d3	60		rts				rts
.c6d4	a6d4					_GXLFail:
.c6d4	a6d4	38		sec				sec
.c6d5	a6d5	60		rts				rts
.c6d6	a6d6					GXLineIsComplete:
.c6d6	a6d6	ad 7b 08	lda $087b			lda 	gxIsDiffYLarger 			; is dy larger
.c6d9	a6d9	d0 0f		bne $a6ea			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6db	a6db	ad d4 07	lda $07d4			lda 	gxX0 						; compare X, LSB and MSB
.c6de	a6de	4d d8 07	eor $07d8			eor 	gxX1
.c6e1	a6e1	d0 06		bne $a6e9			bne 	_GXLICExit
.c6e3	a6e3	ad d5 07	lda $07d5			lda 	gxX0+1
.c6e6	a6e6	4d d9 07	eor $07d9			eor 	gxX1+1
.c6e9	a6e9					_GXLICExit:
.c6e9	a6e9	60		rts				rts
.c6ea	a6ea					_GXLICCompareY:
.c6ea	a6ea	ad da 07	lda $07da			lda 	gxY1
.c6ed	a6ed	4d d6 07	eor $07d6			eor 	gxY0
.c6f0	a6f0	60		rts				rts
.c6f1	a6f1					GXLineAdvance:
.c6f1	a6f1	18		clc				clc 								; add adjust to position
.c6f2	a6f2	ad 7d 08	lda $087d			lda 	gxPosition
.c6f5	a6f5	6d 7e 08	adc $087e			adc 	gxAdjust
.c6f8	a6f8	8d 7d 08	sta $087d			sta 	gxPosition
.c6fb	a6fb	9c 80 08	stz $0880			stz 	gxAddSelect 				; clear add select flag
.c6fe	a6fe	b0 05		bcs $a705			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c700	a700	cd 7f 08	cmp $087f			cmp 	gxTotal 					; if exceeded total
.c703	a703	90 0a		bcc $a70f			bcc 	_GXLANoExtra
.c705	a705					_GXLAOverflow:
.c705	a705	ce 80 08	dec $0880			dec 	gxAddSelect 				; set addselect to $FF
.c708	a708	38		sec				sec 								; subtract total and write back
.c709	a709	ed 7f 08	sbc $087f			sbc 	gxTotal
.c70c	a70c	8d 7d 08	sta $087d			sta 	gxPosition
.c70f	a70f					_GXLANoExtra:
.c70f	a70f	ad 7b 08	lda $087b			lda 	gxIsDiffYLarger
.c712	a712	f0 0d		beq $a721			beq 	_GXDXLarger
.c714	a714	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c717	a717	ad 80 08	lda $0880			lda 	gxAddSelect
.c71a	a71a	f0 10		beq $a72c			beq 	_GXLAExit
.c71c	a71c	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c71f	a71f	80 0b		bra $a72c			bra 	_GXLAExit
.c721	a721					_GXDXLarger:
.c721	a721	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c724	a724	ad 80 08	lda $0880			lda 	gxAddSelect
.c727	a727	f0 03		beq $a72c			beq 	_GXLAExit
.c729	a729	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c72c	a72c					_GXLAExit:
.c72c	a72c	60		rts				rts
.c72d	a72d					gxAdjustX:
.c72d	a72d	ad 7c 08	lda $087c			lda 	gxDXNegative
.c730	a730	10 25		bpl $a757			bpl 	_GXAXRight
.c732	a732	ad d4 07	lda $07d4			lda 	gxX0
.c735	a735	d0 03		bne $a73a			bne 	_GXAXNoBorrow
.c737	a737	ce d5 07	dec $07d5			dec 	gxX0+1
.c73a	a73a					_GXAXNoBorrow:
.c73a	a73a	ce d4 07	dec $07d4			dec 	gxX0
.c73d	a73d	ce eb 07	dec $07eb			dec 	gxOffset 					; pixel left
.c740	a740	ad eb 07	lda $07eb			lda 	gxOffset
.c743	a743	c9 ff		cmp #$ff			cmp 	#$FF
.c745	a745	d0 0f		bne $a756			bne 	_GXAYExit 					; underflow
.c747	a747	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c749	a749	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c74b	a74b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c74d	a74d	b0 07		bcs $a756			bcs 	_GXAYExit
.c74f	a74f	18		clc				clc
.c750	a750	69 20		adc #$20			adc 	#$20 						; fix up
.c752	a752	85 3d		sta $3d				sta 	gxzScreen+1
.c754	a754	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c756	a756					_GXAYExit:
.c756	a756	60		rts				rts
.c757	a757					_GXAXRight:
.c757	a757	ee d4 07	inc $07d4			inc 	gxX0
.c75a	a75a	d0 03		bne $a75f			bne 	_GXAXNoCarry
.c75c	a75c	ee d5 07	inc $07d5			inc 	gxX0+1
.c75f	a75f					_GXAXNoCarry:
.c75f	a75f	ee eb 07	inc $07eb			inc 	gxOffset 					; pixel right
.c762	a762	d0 0e		bne $a772			bne 	_GXAXExit 					; if not overflowed, exit.
.c764	a764	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c766	a766	a5 3d		lda $3d				lda 	gxzScreen+1
.c768	a768	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c76a	a76a	90 06		bcc $a772			bcc 	_GXAXExit
.c76c	a76c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c76e	a76e	85 3d		sta $3d				sta 	gxzScreen+1
.c770	a770	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c772	a772					_GXAXExit:
.c772	a772	60		rts				rts
.c773	a773					GXIncrementY:
.c773	a773	ee d6 07	inc $07d6			inc 	gxY0
.c776	a776	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown
.c779	a779	60		rts				rts
.c77a	a77a					GXLineSetup:
.c77a	a77a	ad da 07	lda $07da			lda 	gxY1
.c77d	a77d	38		sec				sec
.c77e	a77e	ed d6 07	sbc $07d6			sbc 	gxY0
.c781	a781	4a		lsr a				lsr 	a
.c782	a782	8d 7a 08	sta $087a			sta 	gxDiffY
.c785	a785	9c 7c 08	stz $087c			stz 	gxDXNegative 				; clear -ve flag
.c788	a788	38		sec				sec
.c789	a789	ad d8 07	lda $07d8			lda 	gxX1
.c78c	a78c	ed d4 07	sbc $07d4			sbc 	gxX0
.c78f	a78f	8d 79 08	sta $0879			sta 	gxDiffX
.c792	a792	ad d9 07	lda $07d9			lda 	gxX1+1 						; calculate MSB
.c795	a795	ed d5 07	sbc $07d5			sbc 	gxX0+1
.c798	a798	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c799	a799	6e 79 08	ror $0879			ror 	gxDiffX
.c79c	a79c	0a		asl a				asl 	a
.c79d	a79d	10 0c		bpl $a7ab			bpl 	_GDXNotNegative
.c79f	a79f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	ed 79 08	sbc $0879			sbc 	gxDiffX
.c7a5	a7a5	8d 79 08	sta $0879			sta 	gxDiffX
.c7a8	a7a8	ce 7c 08	dec $087c			dec 	gxDXNegative 				; -ve flag = $FF.
.c7ab	a7ab					_GDXNotNegative:
.c7ab	a7ab	9c 7b 08	stz $087b			stz 	gxIsDiffYLarger 			; clear larger flag
.c7ae	a7ae	ad 7a 08	lda $087a			lda 	gxDiffY 					; set adjust and total.
.c7b1	a7b1	8d 7e 08	sta $087e			sta 	gxAdjust
.c7b4	a7b4	ad 79 08	lda $0879			lda 	gxDiffX
.c7b7	a7b7	8d 7f 08	sta $087f			sta 	gxTotal
.c7ba	a7ba	ad 7a 08	lda $087a			lda 	gxDiffY 					; if dy > dx
.c7bd	a7bd	cd 79 08	cmp $0879			cmp 	gxDiffX
.c7c0	a7c0	90 0f		bcc $a7d1			bcc 	_GDXNotLarger
.c7c2	a7c2	ce 7b 08	dec $087b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7c5	a7c5	ad 79 08	lda $0879			lda 	gxDiffX 					; set adjust and total other way round
.c7c8	a7c8	8d 7e 08	sta $087e			sta 	gxAdjust
.c7cb	a7cb	ad 7a 08	lda $087a			lda 	gxDiffY
.c7ce	a7ce	8d 7f 08	sta $087f			sta 	gxTotal
.c7d1	a7d1					_GDXNotLarger:
.c7d1	a7d1	ad 7f 08	lda $087f			lda 	gxTotal
.c7d4	a7d4	4a		lsr a				lsr 	a
.c7d5	a7d5	8d 7d 08	sta $087d			sta 	gxPosition
.c7d8	a7d8	60		rts				rts
.0879						gxDiffX:
>0879								.fill 	1
.087a						gxDiffY:
>087a								.fill 	1
.087b						gxIsDiffYLarger:
>087b								.fill 	1
.087c						gxDXNegative:
>087c								.fill 	1
.087d						gxPosition:
>087d								.fill 	1
.087e						gxAdjust:
>087e								.fill 	1
.087f						gxTotal:
>087f								.fill 	1
.0880						gxAddSelect:
>0880								.fill 	1
.c7d9	a7d9					GXSetColourMode:
.c7d9	a7d9	a6 36		ldx $36				ldx 	gxzTemp0
.c7db	a7db	8e e7 07	stx $07e7			stx 	gxColour 								; set colour
.c7de	a7de	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7e0	a7e0	8d e6 07	sta $07e6			sta 	gxMode 									; set mode
.c7e3	a7e3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7e5	a7e5	9c e9 07	stz $07e9			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e8	a7e8	ae e7 07	ldx $07e7			ldx 	gxColour
.c7eb	a7eb	8e e8 07	stx $07e8			stx 	gxEORValue
.c7ee	a7ee	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7f0	a7f0	90 03		bcc $a7f5			bcc 	_GXSDCNotAndColour
.c7f2	a7f2	8e e9 07	stx $07e9			stx 	gxANDValue
.c7f5	a7f5					_GXSDCNotAndColour:
.c7f5	a7f5	d0 03		bne $a7fa			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7f7	a7f7	9c e8 07	stz $07e8			stz 	gxEORValue
.c7fa	a7fa					_GXSDCNotAnd:
.c7fa	a7fa	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7fb	a7fb	90 08		bcc $a805			bcc 	_GXSDCNoFlip
.c7fd	a7fd	ad e9 07	lda $07e9			lda	 	gxANDValue
.c800	a800	49 ff		eor #$ff			eor 	#$FF
.c802	a802	8d e9 07	sta $07e9			sta 	gxANDValue
.c805	a805					_GXSDCNoFlip:
.c805	a805	18		clc				clc
.c806	a806	60		rts				rts
.c807	a807					GXPlotPoint:
.c807	a807	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c80a	a80a	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c80d	a80d	ac eb 07	ldy $07eb			ldy 	gxOffset
.c810	a810	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c812	a812	2d e9 07	and $07e9			and 	gxANDValue
.c815	a815	4d e8 07	eor $07e8			eor 	gxEORValue
.c818	a818	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c81a	a81a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GXFillRectangle:
.c81f	a81f	38		sec				sec 								; pass carry in for fill/frame
.c820	a820	80 01		bra $a823			bra 	GXRectangle
.c822	a822					GXFrameRectangle:
.c822	a822	18		clc				clc
.c823	a823					GXRectangle:
.c823	a823	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; exit if off.
.c826	a826	f0 35		beq $a85d			beq 	_GXRFail
.c828	a828	08		php				php 								; save Fill flag (CS)
.c829	a829	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c82c	a82c	20 a6 ad	jsr $ada6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c82f	a82f	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c832	a832	38		sec				sec 								; sec = Draw line
.c833	a833	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c836	a836	ad d6 07	lda $07d6			lda 	gxY0 						; reached end of rectangle ?
.c839	a839	cd da 07	cmp $07da			cmp 	gxY1 						; e.g. 1 pixel high.
.c83c	a83c	f0 19		beq $a857			beq 	_GXRectangleExit
.c83e	a83e					_GXRectLoop:
.c83e	a83e	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown 			; down one.
.c841	a841	ee d6 07	inc $07d6			inc 	gxY0 						; change Y pos
.c844	a844	ad d6 07	lda $07d6			lda 	gxY0 						; reached last line
.c847	a847	cd da 07	cmp $07da			cmp 	gxY1
.c84a	a84a	f0 07		beq $a853			beq 	_GXLastLine
.c84c	a84c	28		plp				plp 								; get flag back for solid/edged
.c84d	a84d	08		php				php
.c84e	a84e	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c851	a851	80 eb		bra $a83e			bra 	_GXRectLoop
.c853	a853					_GXLastLine:
.c853	a853	38		sec				sec
.c854	a854	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0
.c857	a857					_GXRectangleExit:
.c857	a857	68		pla				pla 								; throw fill flag.
.c858	a858	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c85b	a85b	18		clc				clc
.c85c	a85c	60		rts				rts
.c85d	a85d					_GXRFail:
.c85d	a85d	38		sec				sec
.c85e	a85e	60		rts				rts
.c85f	a85f					GXDrawLineX1X0:
.c85f	a85f	08		php				php 								; save solid/either-end
.c860	a860	38		sec				sec 								; calculate x1-x0
.c861	a861	ad d8 07	lda $07d8			lda		gxX1
.c864	a864	ed d4 07	sbc $07d4			sbc 	gxX0
.c867	a867	85 36		sta $36				sta 	gxzTemp0
.c869	a869	ad d9 07	lda $07d9			lda 	gxX1+1
.c86c	a86c	ed d5 07	sbc $07d5			sbc 	gxX0+1
.c86f	a86f	85 37		sta $37				sta 	gxzTemp0+1
.c871	a871	28		plp				plp
.c872	a872					GXDrawLineTemp0:
.c872	a872	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c874	a874	48		pha				pha
.c875	a875	a5 3d		lda $3d				lda 	gxzScreen+1
.c877	a877	48		pha				pha
.c878	a878	ad eb 07	lda $07eb			lda 	gxOffset
.c87b	a87b	48		pha				pha
.c87c	a87c	a5 0b		lda $0b				lda 	GXEditSlot
.c87e	a87e	48		pha				pha
.c87f	a87f	ac eb 07	ldy $07eb			ldy 	gxOffset 					; Y offset
.c882	a882	90 1e		bcc $a8a2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c884	a884					_GXDLTLine:
.c884	a884	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c886	a886	2d e9 07	and $07e9			and 	gxANDValue
.c889	a889	4d e8 07	eor $07e8			eor 	gxEORValue
.c88c	a88c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c88e	a88e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c890	a890	d0 04		bne $a896			bne 	_GXDLTNoBorrow
.c892	a892	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c894	a894	30 2e		bmi $a8c4			bmi 	_GXDLTExit
.c896	a896					_GXDLTNoBorrow:
.c896	a896	c6 36		dec $36				dec 	gxzTemp0
.c898	a898	c8		iny				iny 								; next slot.
.c899	a899	d0 e9		bne $a884			bne 	_GXDLTLine
.c89b	a89b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c89d	a89d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c8a0	a8a0	80 e2		bra $a884			bra 	_GXDLTLine
.c8a2	a8a2					_GXDLTEndPoints:
.c8a2	a8a2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c8a4	a8a4	2d e9 07	and $07e9			and 	gxANDValue
.c8a7	a8a7	4d e8 07	eor $07e8			eor 	gxEORValue
.c8aa	a8aa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8ac	a8ac	98		tya				tya 								; advance to right side
.c8ad	a8ad	18		clc				clc
.c8ae	a8ae	65 36		adc $36				adc 	gxzTemp0
.c8b0	a8b0	a8		tay				tay
.c8b1	a8b1	a5 3d		lda $3d				lda 	gxzScreen+1
.c8b3	a8b3	65 37		adc $37				adc 	gxzTemp0+1
.c8b5	a8b5	85 3d		sta $3d				sta 	gxzScreen+1
.c8b7	a8b7	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap 				; fix up.
.c8ba	a8ba	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8bc	a8bc	2d e9 07	and $07e9			and 	gxANDValue
.c8bf	a8bf	4d e8 07	eor $07e8			eor 	gxEORValue
.c8c2	a8c2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8c4	a8c4					_GXDLTExit:
.c8c4	a8c4	68		pla				pla
.c8c5	a8c5	85 0b		sta $0b				sta 	GXEditSlot
.c8c7	a8c7	68		pla				pla
.c8c8	a8c8	8d eb 07	sta $07eb			sta 	gxOffset
.c8cb	a8cb	68		pla				pla
.c8cc	a8cc	85 3d		sta $3d				sta 	gxzScreen+1
.c8ce	a8ce	68		pla				pla
.c8cf	a8cf	85 3c		sta $3c				sta 	gxzScreen
.c8d1	a8d1	60		rts				rts
.c8d2	a8d2					GXDLTCheckWrap:
.c8d2	a8d2	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8d4	a8d4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8d6	a8d6	90 06		bcc $a8de			bcc 	_GXDLTCWExit
.c8d8	a8d8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8da	a8da	85 3d		sta $3d				sta 	gxzScreen+1
.c8dc	a8dc	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8de	a8de					_GXDLTCWExit:
.c8de	a8de	60		rts				rts
.c8df	a8df					GXDrawGraphicElement:
.c8df	a8df	8d 81 08	sta $0881			sta 	gxSize 						; save size
.c8e2	a8e2	3a		dec a				dec 	a
.c8e3	a8e3	8d 82 08	sta $0882			sta 	gxMask 						; and mask
.c8e6	a8e6	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; check BMP on
.c8e9	a8e9	f0 67		beq $a952			beq 	_GXSLFail
.c8eb	a8eb	ad d6 07	lda $07d6			lda 	gxY0 						; push Y on stack
.c8ee	a8ee	48		pha				pha
.c8ef	a8ef	8c 84 08	sty $0884			sty 	gxAcquireVector+1 			; and acquisition vector
.c8f2	a8f2	8e 83 08	stx $0883			stx 	gxAcquireVector
.c8f5	a8f5	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f8	a8f8	ad 86 08	lda $0886			lda 	gxUseMode 					; scale bits
.c8fb	a8fb	4a		lsr a				lsr 	a
.c8fc	a8fc	4a		lsr a				lsr 	a
.c8fd	a8fd	4a		lsr a				lsr 	a
.c8fe	a8fe	29 07		and #$07			and		#7
.c900	a900	1a		inc a				inc 	a
.c901	a901	8d 85 08	sta $0885			sta 	gxScale
.c904	a904	64 38		stz $38				stz 	gxzTemp1					; start first line
.c906	a906					_GXGELoop:
.c906	a906	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c908	a908	2c 86 08	bit $0886			bit 	gxUseMode 					; check for flip.
.c90b	a90b	10 06		bpl $a913			bpl		_GXNoVFlip
.c90d	a90d	ad 82 08	lda $0882			lda 	gxMask
.c910	a910	38		sec				sec
.c911	a911	e5 38		sbc $38				sbc 	gxzTemp1
.c913	a913					_GXNoVFlip:
.c913	a913	aa		tax				tax 								; get the Xth line.
.c914	a914	20 54 a9	jsr $a954			jsr 	_GXCallAcquire 				; get that data.
.c917	a917	ad 85 08	lda $0885			lda 	gxScale 					; do scale identical copies of that line.
.c91a	a91a	85 39		sta $39				sta 	gxzTemp1+1
.c91c	a91c					_GXGELoop2:
.c91c	a91c	ad d6 07	lda $07d6			lda 	gxY0 						; off screen
.c91f	a91f	cd e5 07	cmp $07e5			cmp 	gxHeight
.c922	a922	b0 10		bcs $a934			bcs 	_GXDGEExit
.c924	a924	20 57 a9	jsr $a957			jsr 	GXRenderOneLine 			; render line
.c927	a927	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c929	a929	d0 f1		bne $a91c			bne 	_GXGELoop2
.c92b	a92b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c92d	a92d	a5 38		lda $38				lda 	gxzTemp1
.c92f	a92f	cd 81 08	cmp $0881			cmp 	gxSize
.c932	a932	d0 d2		bne $a906			bne 	_GXGELoop
.c934	a934					_GXDGEExit:
.c934	a934	68		pla				pla 								; restore Y for next time
.c935	a935	8d d6 07	sta $07d6			sta 	gxY0
.c938	a938	ae 85 08	ldx $0885			ldx 	gxScale 					; get scale (1-8)
.c93b	a93b					_GXShiftLeft:
.c93b	a93b	18		clc				clc
.c93c	a93c	ad 81 08	lda $0881			lda 	gxSize
.c93f	a93f	6d d4 07	adc $07d4			adc 	gxX0
.c942	a942	8d d4 07	sta $07d4			sta 	gxX0
.c945	a945	90 03		bcc $a94a			bcc 	_GXSLNoCarry
.c947	a947	ee d5 07	inc $07d5			inc 	gxX0+1
.c94a	a94a					_GXSLNoCarry:
.c94a	a94a	ca		dex				dex
.c94b	a94b	d0 ee		bne $a93b			bne 	_GXShiftLeft
.c94d	a94d	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.c950	a950	18		clc				clc
.c951	a951	60		rts				rts
.c952	a952					_GXSLFail:
.c952	a952	38		sec				sec
.c953	a953	60		rts				rts
.c954	a954					_GXCallAcquire:
.c954	a954	6c 83 08	jmp ($0883)			jmp 	(gxAcquireVector)
.c957	a957					GXRenderOneLine:
.c957	a957	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c95a	a95a	ac eb 07	ldy $07eb			ldy 	gxOffset 					; Y contains position.
.c95d	a95d	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c95f	a95f					_GXROLLoop1:
.c95f	a95f	ad 85 08	lda $0885			lda 	gxScale 					; set to do 'scale' times
.c962	a962	85 3b		sta $3b				sta 	gxzTemp2+1
.c964	a964					_GXROLLoop2:
.c964	a964	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c966	a966	2c e6 07	bit $07e6			bit 	gxMode 						; check H Flip
.c969	a969	50 06		bvc $a971			bvc 	_GXNoHFlip
.c96b	a96b	ad 82 08	lda $0882			lda 	gxMask
.c96e	a96e	38		sec				sec
.c96f	a96f	e5 3a		sbc $3a				sbc 	gxzTemp2
.c971	a971					_GXNoHFlip:
.c971	a971	aa		tax				tax 								; read from the pixel buffer
.c972	a972	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c975	a975	d0 07		bne $a97e			bne 	_GXDraw 					; draw if non zero
.c977	a977	ad 86 08	lda $0886			lda 	gxUseMode 					; check to see if solid background
.c97a	a97a	29 04		and #$04			and 	#4
.c97c	a97c	f0 0a		beq $a988			beq 	_GXZeroPixel
.c97e	a97e					_GXDraw:
.c97e	a97e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c980	a980	2d e9 07	and $07e9			and 	gxANDValue
.c983	a983	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c986	a986	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c988	a988					_GXZeroPixel:
.c988	a988	c8		iny				iny 								; advance pointer
.c989	a989	d0 05		bne $a990			bne 	_GXNoShift
.c98b	a98b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c98d	a98d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c990	a990					_GXNoShift:
.c990	a990	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c992	a992	d0 d0		bne $a964			bne 	_GXROLLoop2
.c994	a994	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c996	a996	a5 3a		lda $3a				lda 	gxzTemp2
.c998	a998	cd 81 08	cmp $0881			cmp 	gxSize
.c99b	a99b	d0 c2		bne $a95f			bne 	_GXROLLoop1
.c99d	a99d	ee d6 07	inc $07d6			inc 	gxY0
.c9a0	a9a0	60		rts				rts
.0881						gxSize:
>0881								.fill 	1
.0882						gxMask:
>0882								.fill 	1
.0883						gxAcquireVector:
>0883								.fill 	2
.0885						gxScale:
>0885								.fill 	1
.0886						gxUseMode:
>0886								.fill 	1
.c9a1	a9a1					GXControlTileScrollX:
.c9a1	a9a1	ad e3 07	lda $07e3			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c9a4	a9a4	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9a7	a9a7	b0 08		bcs $a9b1			bcs 	_GXCTSExit
.c9a9	a9a9	64 01		stz $01				stz 	1 							; write it out.
.c9ab	a9ab	8e 08 d2	stx $d208			stx 	$D208
.c9ae	a9ae	8c 09 d2	sty $d209			sty 	$D209
.c9b1	a9b1					_GXCTSExit:
.c9b1	a9b1	60		rts				rts
.c9b2	a9b2					GXControlTileScrollY:
.c9b2	a9b2	ad e4 07	lda $07e4			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9b5	a9b5	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9b8	a9b8	b0 08		bcs $a9c2			bcs 	_GXCTSExit
.c9ba	a9ba	64 01		stz $01				stz 	1 							; write it out.
.c9bc	a9bc	8e 0a d2	stx $d20a			stx 	$D20A
.c9bf	a9bf	8c 0b d2	sty $d20b			sty 	$D20B
.c9c2	a9c2					_GXCTSExit:
.c9c2	a9c2	60		rts				rts
.c9c3	a9c3					GXScrollProcessor:
.c9c3	a9c3	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9c5	a9c5	ad de 07	lda $07de			lda 	gxTilesOn 					; check tile map is on.
.c9c8	a9c8	38		sec				sec
.c9c9	a9c9	f0 2c		beq $a9f7			beq 	_GXSPExit
.c9cb	a9cb	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9cd	a9cd	a2 03		ldx #$03			ldx 	#3
.c9cf	a9cf					_GXCalcMaxPixelScroll:
.c9cf	a9cf	06 38		asl $38				asl 	gxzTemp1
.c9d1	a9d1	26 39		rol $39				rol 	gxzTemp1+1
.c9d3	a9d3	ca		dex				dex
.c9d4	a9d4	d0 f9		bne $a9cf			bne 	_GXCalcMaxPixelScroll
.c9d6	a9d6	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d8	a9d8	c5 38		cmp $38				cmp 	gxzTemp1
.c9da	a9da	a5 37		lda $37				lda 	gxzTemp0+1
.c9dc	a9dc	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9de	a9de	b0 17		bcs $a9f7			bcs		_GXSPExit
.c9e0	a9e0	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9e2	a9e2	29 07		and #$07			and		#7
.c9e4	a9e4	85 38		sta $38				sta 	gxzTemp1
.c9e6	a9e6	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e8	a9e8	26 37		rol $37				rol 	gxzTemp0+1
.c9ea	a9ea	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9ec	a9ec	29 0f		and #$0f			and 	#$0F
.c9ee	a9ee	a8		tay				tay
.c9ef	a9ef	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9f1	a9f1	29 f0		and #$f0			and 	#$F0
.c9f3	a9f3	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9f5	a9f5	aa		tax				tax 								; return in X
.c9f6	a9f6	18		clc				clc
.c9f7	a9f7					_GXSPExit:
.c9f7	a9f7	60		rts				rts
.c9f8	a9f8					GXFontHandler:
.c9f8	a9f8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9fa	a9fa	4d e6 07	eor $07e6			eor 	gxMode
.c9fd	a9fd	8d 86 08	sta $0886			sta 	gxUseMode
.ca00	aa00	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca08	aa08	26 37		rol $37				rol	 	gxzTemp0+1
.ca0a	aa0a	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca0c	aa0c	26 37		rol $37				rol	 	gxzTemp0+1
.ca0e	aa0e	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca10	aa10	09 c0		ora #$c0			ora 	#$C0
.ca12	aa12	85 37		sta $37				sta 	gxzTemp0+1
.ca14	aa14	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca16	aa16	a2 1e		ldx #$1e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca18	aa18	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca1a	aa1a	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca1d	aa1d	60		rts				rts
.ca1e	aa1e					GXGetGraphicDataFont:
.ca1e	aa1e	8a		txa				txa 								; X->Y
.ca1f	aa1f	a8		tay				tay
.ca20	aa20	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca22	aa22	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca24	aa24	85 01		sta $01				sta 	1
.ca26	aa26	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca28	aa28	86 01		stx $01				stx 	1 							; put old value back.
.ca2a	aa2a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca2c	aa2c					_GXExpand:
.ca2c	aa2c	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca2f	aa2f	0a		asl a				asl 	a 							; shift bit 7 into C
.ca30	aa30	90 08		bcc $aa3a			bcc 	_GXNoPixel
.ca32	aa32	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca33	aa33	ad e7 07	lda $07e7			lda 	gxColour
.ca36	aa36	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.ca39	aa39	68		pla				pla
.ca3a	aa3a					_GXNoPixel:
.ca3a	aa3a	e8		inx				inx 								; do the whole byte.
.ca3b	aa3b	e0 08		cpx #$08			cpx 	#8
.ca3d	aa3d	d0 ed		bne $aa2c			bne 	_GXExpand
.ca3f	aa3f	60		rts				rts
.ca40	aa40					GXSpriteHandler:
.ca40	aa40	ad dc 07	lda $07dc			lda 	gxSpritesOn 				; sprites on ?
.ca43	aa43	f0 23		beq $aa68			beq 	_GXSHExit
.ca45	aa45	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca47	aa47	4d e6 07	eor $07e6			eor 	gxMode
.ca4a	aa4a	8d 86 08	sta $0886			sta 	gxUseMode
.ca4d	aa4d	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca4f	aa4f	da		phx				phx
.ca50	aa50	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; can access sprite information
.ca53	aa53	68		pla				pla
.ca54	aa54	20 5f ad	jsr $ad5f			jsr 	GXFindSprite 				; get the sprite address
.ca57	aa57	08		php				php
.ca58	aa58	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.ca5b	aa5b	28		plp				plp
.ca5c	aa5c	b0 0a		bcs $aa68			bcs		_GXSHExit 					; exit if find failed.
.ca5e	aa5e	ad 87 08	lda $0887			lda 	gxSizePixels 				; return size
.ca61	aa61	a2 69		ldx #$69			ldx 	#GXSpriteAcquire & $FF
.ca63	aa63	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca65	aa65	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca68	aa68					_GXSHExit:
.ca68	aa68	60		rts				rts
.ca69	aa69					GXSpriteAcquire:
.ca69	aa69	ad e0 07	lda $07e0			lda 	gxSpritePage				; point to base page
.ca6c	aa6c	85 0b		sta $0b				sta 	GXEditSlot
.ca6e	aa6e	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca70	aa70	a9 00		lda #$00			lda 	#0
.ca72	aa72	ae 88 08	ldx $0888			ldx 	gxSizeBits
.ca75	aa75					_GXTimesRowNumber:
.ca75	aa75	18		clc				clc
.ca76	aa76	65 36		adc $36				adc 	gxzTemp0
.ca78	aa78	ca		dex				dex
.ca79	aa79	10 fa		bpl $aa75			bpl 	_GXTimesRowNumber
.ca7b	aa7b	64 37		stz $37				stz 	gxzTemp0+1
.ca7d	aa7d	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca7e	aa7e	26 37		rol $37				rol 	gxzTemp0+1
.ca80	aa80	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca81	aa81	26 37		rol $37				rol 	gxzTemp0+1
.ca83	aa83	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca84	aa84	26 37		rol $37				rol 	gxzTemp0+1
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	18		clc				clc 								; add base address.
.ca89	aa89	a5 36		lda $36				lda 	gxzTemp0
.ca8b	aa8b	6d 8a 08	adc $088a			adc 	gxSpriteOffset
.ca8e	aa8e	85 36		sta $36				sta 	gxzTemp0
.ca90	aa90	a5 37		lda $37				lda 	gxzTemp0+1
.ca92	aa92	6d 8b 08	adc $088b			adc 	gxSpriteOffset+1
.ca95	aa95					_GXSAFindPage:
.ca95	aa95	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca97	aa97	90 06		bcc $aa9f			bcc 	_GXSAFoundPage
.ca99	aa99	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca9b	aa9b	e6 0b		inc $0b				inc 	GXEditSlot
.ca9d	aa9d	80 f6		bra $aa95			bra 	_GXSAFindPage
.ca9f	aa9f					_GXSAFoundPage:
.ca9f	aa9f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.caa1	aaa1	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.caa3	aaa3	a0 00		ldy #$00			ldy 	#0
.caa5	aaa5					_GXSACopyLoop:
.caa5	aaa5	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.caa7	aaa7	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.caaa	aaaa	c8		iny				iny
.caab	aaab	cc 87 08	cpy $0887			cpy 	gxSizePixels
.caae	aaae	d0 f5		bne $aaa5			bne 	_GXSACopyLoop
.cab0	aab0	60		rts				rts
.cab1	aab1					GXSelect:
.cab1	aab1	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cab4	aab4	f0 22		beq $aad8			beq 	_GXSFail
.cab6	aab6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab8	aab8	c9 40		cmp #$40			cmp 	#64
.caba	aaba	b0 1c		bcs $aad8			bcs 	_GXSFail
.cabc	aabc	8d ec 07	sta $07ec			sta 	GSCurrentSpriteID
.cabf	aabf	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cac1	aac1	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cac3	aac3	06 36		asl $36				asl 	gxzTemp0
.cac5	aac5	06 36		asl $36				asl 	gxzTemp0
.cac7	aac7	06 36		asl $36				asl 	gxzTemp0
.cac9	aac9	2a		rol a				rol 	a
.caca	aaca	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cacc	aacc	8d ee 07	sta $07ee			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cacf	aacf	85 37		sta $37				sta 	gxzTemp0+1
.cad1	aad1	a5 36		lda $36				lda 	gxzTemp0
.cad3	aad3	8d ed 07	sta $07ed			sta 	GSCurrentSpriteAddr
.cad6	aad6	18		clc				clc
.cad7	aad7	60		rts				rts
.cad8	aad8					_GXSFail:
.cad8	aad8	38		sec				sec
.cad9	aad9	60		rts				rts
.cada	aada					GXSelectImage:
.cada	aada	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cadd	aadd	f0 74		beq $ab53			beq 	_GXSIFail
.cadf	aadf	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cae2	aae2	f0 6f		beq $ab53			beq 	_GXSIFail 					; (checking the MSB)
.cae4	aae4	64 01		stz $01				stz 	1
.cae6	aae6	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae8	aae8	d0 6b		bne $ab55			bne 	_GXSIHide
.caea	aaea	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.caec	aaec	48		pha				pha
.caed	aaed	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap
.caf0	aaf0	68		pla				pla
.caf1	aaf1	20 5f ad	jsr $ad5f			jsr 	GXFindSprite
.caf4	aaf4	b0 5a		bcs $ab50			bcs 	_GXSICloseFail 				; no image
.caf6	aaf6	a0 01		ldy #$01			ldy 	#1
.caf8	aaf8	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr
.cafb	aafb	85 36		sta $36				sta 	gxzTemp0
.cafd	aafd	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1
.cb00	ab00	85 37		sta $37				sta 	gxzTemp0+1
.cb02	ab02	ad 8a 08	lda $088a			lda 	gxSpriteOffset
.cb05	ab05	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb07	ab07	18		clc				clc
.cb08	ab08	ad 8b 08	lda $088b			lda 	gxSpriteOffset+1
.cb0b	ab0b	6d ef 07	adc $07ef			adc 	gxSpriteOffsetBase
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad f0 07	lda $07f0			lda 	gxSpriteOffsetBase+1
.cb14	ab14	69 00		adc #$00			adc 	#0
.cb16	ab16	c8		iny				iny
.cb17	ab17	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb19	ab19	ad 88 08	lda $0888			lda 	gxSizeBits 					; get raw size
.cb1c	ab1c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb1e	ab1e	2a		rol a				rol 	a 							; x 2
.cb1f	ab1f	0a		asl a				asl 	a 							; x 4
.cb20	ab20	0a		asl a				asl 	a 							; x 8
.cb21	ab21	0a		asl a				asl 	a 							; x 16
.cb22	ab22	0d 89 08	ora $0889			ora 	gxSpriteLUT 				; Or with LUT
.cb25	ab25	0a		asl a				asl 	a 							; 1 shift
.cb26	ab26	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb28	ab28	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb2a	ab2a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb2d	ab2d	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb30	ab30	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb33	ab33	29 3f		and #$3f			and 	#$3F
.cb35	ab35	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cb38	ab38	ad 88 08	lda $0888			lda 	gxSizeBits 					; get bit size
.cb3b	ab3b	6a		ror a				ror 	a 							; shift into bits 6/7
.cb3c	ab3c	6a		ror a				ror 	a
.cb3d	ab3d	6a		ror a				ror 	a
.cb3e	ab3e	29 c0		and #$c0			and 	#$C0
.cb40	ab40	1d 31 08	ora $0831,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb43	ab43	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cb46	ab46	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb49	ab49	29 7f		and #$7f			and 	#$7F
.cb4b	ab4b	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cb4e	ab4e	18		clc				clc
.cb4f	ab4f	60		rts				rts
.cb50	ab50					_GXSICloseFail:
.cb50	ab50	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb53	ab53					_GXSIFail:
.cb53	ab53	38		sec				sec
.cb54	ab54	60		rts				rts
.cb55	ab55					_GXSIHide:
.cb55	ab55	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb58	ab58	85 36		sta $36				sta 	gxzTemp0
.cb5a	ab5a	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1
.cb5d	ab5d	85 37		sta $37				sta 	gxzTemp0+1
.cb5f	ab5f	a9 00		lda #$00			lda 	#0
.cb61	ab61	92 36		sta ($36)			sta 	(gxzTemp0)
.cb63	ab63	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb66	ab66	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb69	ab69	09 80		ora #$80			ora 	#$80
.cb6b	ab6b	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cb6e	ab6e	18		clc				clc
.cb6f	ab6f	60		rts				rts
.cb70	ab70					GXMoveSprite:
.cb70	ab70	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cb73	ab73	f0 65		beq $abda			beq 	_GXSIFail
.cb75	ab75	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb78	ab78	f0 60		beq $abda			beq 	_GXSIFail
.cb7a	ab7a	85 37		sta $37				sta 	gxzTemp0+1
.cb7c	ab7c	a0 04		ldy #$04			ldy 	#4
.cb7e	ab7e	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr
.cb81	ab81	85 36		sta $36				sta 	gxzTemp0
.cb83	ab83	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb86	ab86	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cb89	ab89	2a		rol a				rol 	a	 						; into bits 0,1.
.cb8a	ab8a	2a		rol a				rol 	a
.cb8b	ab8b	2a		rol a				rol 	a
.cb8c	ab8c	29 03		and #$03			and 	#3
.cb8e	ab8e	aa		tax				tax
.cb8f	ab8f	bd dc ab	lda $abdc,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb92	ab92	48		pha				pha
.cb93	ab93	18		clc				clc
.cb94	ab94	6d d4 07	adc $07d4			adc 	gxX0						; copy position.
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	ad d5 07	lda $07d5			lda 	gxX0+1
.cb9d	ab9d	69 00		adc #$00			adc 	#0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	c8		iny				iny
.cba2	aba2	68		pla				pla
.cba3	aba3	18		clc				clc
.cba4	aba4	6d d6 07	adc $07d6			adc 	gxY0
.cba7	aba7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba9	aba9	a9 00		lda #$00			lda 	#0
.cbab	abab	69 00		adc #$00			adc 	#0
.cbad	abad	c8		iny				iny
.cbae	abae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cbb0	abb0	4e d5 07	lsr $07d5			lsr 	gxX0+1 						; divide X by 4
.cbb3	abb3	6e d4 07	ror $07d4			ror 	gxX0
.cbb6	abb6	4e d4 07	lsr $07d4			lsr 	gxX0
.cbb9	abb9	4e d6 07	lsr $07d6			lsr 	gxY0 						; divide Y by 4
.cbbc	abbc	4e d6 07	lsr $07d6			lsr 	gxY0
.cbbf	abbf	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbc2	abc2	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x
.cbc5	abc5	29 80		and #$80			and 	#$80
.cbc7	abc7	0d d4 07	ora $07d4			ora 	gxX0
.cbca	abca	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cbcd	abcd	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cbd0	abd0	29 c0		and #$c0			and 	#$C0
.cbd2	abd2	0d d6 07	ora $07d6			ora 	gxY0
.cbd5	abd5	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					_GXSIFail:
.cbda	abda	38		sec				sec
.cbdb	abdb	60		rts				rts
.cbdc	abdc					_GXMSOffset:
>cbdc	abdc	1c						.byte 	32-8/2
>cbdd	abdd	18						.byte 	32-16/2
>cbde	abde	14						.byte 	32-24/2
>cbdf	abdf	10						.byte 	32-32/2
.cbe0	abe0					GXSelectTile:
.cbe0	abe0	ad de 07	lda $07de			lda 	gxTilesOn 					; check tilemap in use
.cbe3	abe3	f0 4b		beq $ac30			beq 	_GXSFail
.cbe5	abe5	a5 36		lda $36				lda 	gxzTemp0 					; check X and Y in range
.cbe7	abe7	cd e3 07	cmp $07e3			cmp 	gxTileMapWidth
.cbea	abea	b0 44		bcs $ac30			bcs 	_GXSFail
.cbec	abec	a5 37		lda $37				lda 	gxzTemp0+1
.cbee	abee	cd e4 07	cmp $07e4			cmp 	gxTileMapHeight
.cbf1	abf1	b0 3d		bcs $ac30			bcs 	_GXSFail
.cbf3	abf3	ad e2 07	lda $07e2			lda 	gxTileMapPage 				; page to access = tile access page.
.cbf6	abf6	8d 71 08	sta $0871			sta 	gxTileAccessPage
.cbf9	abf9	ae e3 07	ldx $07e3			ldx 	gxTileMapWidth 				; YX is the additive, e.g. shifted left. gxzTemp0+1 is shifted right.
.cbfc	abfc	a0 00		ldy #$00			ldy 	#0
.cbfe	abfe	a5 36		lda $36				lda 	gxzTemp0 					; initial result is X
.cc00	ac00	8d 72 08	sta $0872			sta 	gxTileAccessAddress
.cc03	ac03	9c 73 08	stz $0873			stz  	gxTileAccessAddress+1
.cc06	ac06					_GXSTMultiply:
.cc06	ac06	46 37		lsr $37				lsr 	gxzTemp0+1 					; shift Y right
.cc08	ac08	90 0f		bcc $ac19			bcc 	_GXSTNoAdd 					; add if CS
.cc0a	ac0a	18		clc				clc 								; add YX to result
.cc0b	ac0b	8a		txa				txa
.cc0c	ac0c	6d 72 08	adc $0872			adc 	gxTileAccessAddress
.cc0f	ac0f	8d 72 08	sta $0872			sta 	gxTileAccessAddress
.cc12	ac12	98		tya				tya
.cc13	ac13	6d 73 08	adc $0873			adc 	gxTileAccessAddress+1
.cc16	ac16	8d 73 08	sta $0873			sta 	gxTileAccessAddress+1
.cc19	ac19					_GXSTNoAdd:
.cc19	ac19	8a		txa				txa 								; shift YX left
.cc1a	ac1a	0a		asl a				asl 	a
.cc1b	ac1b	aa		tax				tax
.cc1c	ac1c	98		tya				tya
.cc1d	ac1d	2a		rol a				rol 	a
.cc1e	ac1e	a8		tay				tay
.cc1f	ac1f	a5 37		lda $37				lda 	gxzTemp0+1 					; multiply complete
.cc21	ac21	d0 e3		bne $ac06			bne 	_GXSTMultiply
.cc23	ac23	0e 72 08	asl $0872			asl 	gxTileAccessAddress 		; double it, as it is a word array.
.cc26	ac26	2e 73 08	rol $0873			rol 	gxTileAccessAddress+1
.cc29	ac29					_GXSTFixAddressLoop:
.cc29	ac29	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress
.cc2c	ac2c	b0 fb		bcs $ac29			bcs 	_GXSTFixAddressLoop
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXSFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXSTFixAddress:
.cc32	ac32	48		pha				pha
.cc33	ac33	ad 73 08	lda $0873			lda 	gxTileAccessAddress+1 		; in legal page range e.g. $0000-$1FFF
.cc36	ac36	c9 20		cmp #$20			cmp 	#$20
.cc38	ac38	90 06		bcc $ac40			bcc 	_GXSTFAExit
.cc3a	ac3a	e9 20		sbc #$20			sbc 	#$20 						; adjust address
.cc3c	ac3c	ee 71 08	inc $0871			inc 	gxTileAccessPage 			; adjust page up.
.cc3f	ac3f	38		sec				sec
.cc40	ac40					_GXSTFAExit:
.cc40	ac40	68		pla				pla
.cc41	ac41	60		rts				rts
.cc42	ac42					GXSTWriteTile:
.cc42	ac42	38		sec				sec 								; CS = update flag
.cc43	ac43	80 01		bra $ac46			bra 	GXSTTileAccess
.cc45	ac45					GXSTReadTile:
.cc45	ac45	18		clc				clc
.cc46	ac46					GXSTTileAccess:
.cc46	ac46	a5 0b		lda $0b				lda 	GXEditSlot 					; save oroginal page
.cc48	ac48	48		pha				pha
.cc49	ac49	08		php				php 								; save update flag
.cc4a	ac4a	ad 71 08	lda $0871			lda 	gxTileAccessPage 			; access the tile page.
.cc4d	ac4d	85 0b		sta $0b				sta 	GXEditSlot
.cc4f	ac4f	a6 36		ldx $36				ldx 	gxzTemp0 					; X = New value
.cc51	ac51	ad 72 08	lda $0872			lda 	gxTileAccessAddress 		; set gxzTemp0 to point there
.cc54	ac54	85 36		sta $36				sta 	gxzTemp0
.cc56	ac56	ad 73 08	lda $0873			lda 	gxTileAccessAddress+1
.cc59	ac59	09 60		ora #$60			ora 	#(GXMappingAddress >> 8)
.cc5b	ac5b	85 37		sta $37				sta 	gxzTemp0+1
.cc5d	ac5d	28		plp				plp 								; get flag
.cc5e	ac5e	90 09		bcc $ac69			bcc 	_GXSNoUpdate 				; updating the tile map ?
.cc60	ac60	8a		txa				txa 								; new value
.cc61	ac61	92 36		sta ($36)			sta 	(gxzTemp0) 					; write it out, as a word.
.cc63	ac63	a0 01		ldy #$01			ldy 	#1
.cc65	ac65	a9 00		lda #$00			lda 	#0
.cc67	ac67	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cc69	ac69					_GXSNoUpdate:
.cc69	ac69	b2 36		lda ($36)			lda 	(gxzTemp0) 					; read the value
.cc6b	ac6b	fa		plx				plx 								; restore old page
.cc6c	ac6c	86 0b		stx $0b				stx 	GXEditSlot
.cc6e	ac6e	ee 72 08	inc $0872			inc 	gxTileAccessAddress 		; advance tile ptr by 2 - will always be even.
.cc71	ac71	ee 72 08	inc $0872			inc 	gxTileAccessAddress
.cc74	ac74	d0 03		bne $ac79			bne 	_GXSNoCarry
.cc76	ac76	ee 73 08	inc $0873			inc 	gxTileAccessAddress+1
.cc79	ac79					_GXSNoCarry:
.cc79	ac79	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress 				; fix address if required.
.cc7c	ac7c	18		clc				clc 								; return with ok flag.
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					GXOpenBitmap:
.cc7e	ac7e	78		sei				sei 								; no interrupts here
.cc7f	ac7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cc81	ac81	8d ea 07	sta $07ea			sta 	gxOriginalLUTValue
.cc84	ac84	58		cli				cli
.cc85	ac85	60		rts				rts
.cc86	ac86					GXCloseBitmap:
.cc86	ac86	78		sei				sei
.cc87	ac87	ad ea 07	lda $07ea			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cc8a	ac8a	85 0b		sta $0b				sta 	GXEditSlot
.cc8c	ac8c	58		cli				cli
.cc8d	ac8d	60		rts				rts
.cc8e	ac8e					gxPositionCalc:
.cc8e	ac8e	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cc90	ac90	48		pha				pha
.cc91	ac91	ad d6 07	lda $07d6			lda 	gxY0 							; gxzScreen = Y0
.cc94	ac94	85 3c		sta $3c				sta 	gxzScreen
.cc96	ac96	64 3d		stz $3d				stz 	gxzScreen+1
.cc98	ac98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cc9a	ac9a	26 3d		rol $3d				rol 	gxzScreen+1
.cc9c	ac9c	06 3c		asl $3c				asl 	gxzScreen
.cc9e	ac9e	26 3d		rol $3d				rol 	gxzScreen+1
.cca0	aca0	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cca1	aca1	65 3c		adc $3c				adc 	gxzScreen
.cca3	aca3	85 3c		sta $3c				sta 	gxzScreen
.cca5	aca5	90 02		bcc $aca9			bcc 	_GXPCNoCarry
.cca7	aca7	e6 3d		inc $3d				inc 	gxzScreen+1
.cca9	aca9					_GXPCNoCarry:
.cca9	aca9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.ccab	acab	26 3d		rol $3d				rol 	gxzScreen+1
.ccad	acad	a5 3d		lda $3d				lda	 	gxzScreen+1
.ccaf	acaf	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.ccb1	acb1	64 3d		stz $3d				stz 	gxzScreen+1
.ccb3	acb3	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.ccb5	acb5					_GXPCMultiply32:
.ccb5	acb5	06 3c		asl $3c				asl 	gxzScreen
.ccb7	acb7	26 3d		rol $3d				rol 	gxzScreen+1
.ccb9	acb9	3a		dec a				dec 	a
.ccba	acba	d0 f9		bne $acb5			bne 	_GXPCMultiply32
.ccbc	acbc	18		clc				clc
.ccbd	acbd	ad d4 07	lda $07d4			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.ccc0	acc0	65 3c		adc $3c				adc 	gxzScreen
.ccc2	acc2	8d eb 07	sta $07eb			sta 	gxOffset
.ccc5	acc5	ad d5 07	lda $07d5			lda 	gxX0+1
.ccc8	acc8	65 3d		adc $3d				adc 	gxzScreen+1
.ccca	acca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cccc	accc	90 04		bcc $acd2			bcc 	_GXPCNoOverflow
.ccce	acce	29 1f		and #$1f			and 	#$1F 						; fix it up
.ccd0	acd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.ccd2	acd2					_GXPCNoOverflow:
.ccd2	acd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.ccd4	acd4	85 3d		sta $3d				sta 	gxzScreen+1
.ccd6	acd6	64 3c		stz $3c				stz 	gxzScreen
.ccd8	acd8	18		clc				clc
.ccd9	acd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.ccdb	acdb	6d df 07	adc $07df			adc 	gxBasePage 					; by adding the base page
.ccde	acde	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cce0	ace0	68		pla				pla
.cce1	ace1	85 36		sta $36				sta 	gxzTemp0
.cce3	ace3	60		rts				rts
.cce4	ace4					GXMovePositionDown:
.cce4	ace4	18		clc				clc 								; add 320 to offset/temp+1
.cce5	ace5	ad eb 07	lda $07eb			lda 	gxOffset
.cce8	ace8	69 40		adc #$40			adc 	#64
.ccea	acea	8d eb 07	sta $07eb			sta 	gxOffset
.cced	aced	a5 3d		lda $3d				lda 	gxzScreen+1
.ccef	acef	69 01		adc #$01			adc 	#1
.ccf1	acf1	85 3d		sta $3d				sta 	gxzScreen+1
.ccf3	acf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ccf5	acf5	90 07		bcc $acfe			bcc 	_GXMPDExit
.ccf7	acf7	38		sec				sec  								; next page, adjust address
.ccf8	acf8	e9 20		sbc #$20			sbc 	#$20
.ccfa	acfa	85 3d		sta $3d				sta 	gxzScreen+1
.ccfc	acfc	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.ccfe	acfe					_GXMPDExit:
.ccfe	acfe	60		rts				rts
.ccff	acff					GXCollide:
.ccff	acff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cd01	ad01	aa		tax				tax
.cd02	ad02	05 37		ora $37				ora 	gxzTemp0+1
.cd04	ad04	29 c0		and #$c0			and 	#$C0
.cd06	ad06	38		sec				sec
.cd07	ad07	d0 53		bne $ad5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cd09	ad09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cd0b	ad0b	b9 f1 07	lda $07f1,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cd0e	ad0e	1d f1 07	ora $07f1,x			ora 	gxSpriteLow,x
.cd11	ad11	30 48		bmi $ad5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cd13	ad13	18		clc				clc 								; need to calculate sum of sizes.
.cd14	ad14	b9 31 08	lda $0831,y			lda 	gxSpriteHigh,y
.cd17	ad17	7d 31 08	adc $0831,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cd1a	ad1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cd1c	ad1c	6a		ror a				ror 	a 							; 5/6/7
.cd1d	ad1d	4a		lsr a				lsr 	a 							; 4/5/6
.cd1e	ad1e	4a		lsr a				lsr 	a 							; 3/4/5
.cd1f	ad1f	4a		lsr a				lsr 	a 							; 2/3/4
.cd20	ad20	18		clc				clc
.cd21	ad21	69 08		adc #$08			adc 	#$08
.cd23	ad23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cd24	ad24	4a		lsr a				lsr 	a
.cd25	ad25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cd27	ad27	b9 31 08	lda $0831,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cd2a	ad2a	29 3f		and #$3f			and 	#$3F
.cd2c	ad2c	85 39		sta $39				sta 	gxzTemp1+1
.cd2e	ad2e	38		sec				sec
.cd2f	ad2f	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cd32	ad32	29 3f		and #$3f			and 	#$3F
.cd34	ad34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cd36	ad36	b0 03		bcs $ad3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cd38	ad38	49 ff		eor #$ff			eor 	#$FF
.cd3a	ad3a	1a		inc a				inc 	a
.cd3b	ad3b					_GXCAbs1:
.cd3b	ad3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd3d	ad3d	b0 1c		bcs $ad5b			bcs 	_GXOkayFail
.cd3f	ad3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cd41	ad41	38		sec				sec 								; calculate |x1-x0|
.cd42	ad42	b9 f1 07	lda $07f1,y			lda 	gxSpriteLow,y
.cd45	ad45	fd f1 07	sbc $07f1,x			sbc 	gxSpriteLow,x
.cd48	ad48	b0 03		bcs $ad4d			bcs 	_GXCAbs2
.cd4a	ad4a	49 ff		eor #$ff			eor 	#$FF
.cd4c	ad4c	1a		inc a				inc 	a
.cd4d	ad4d					_GXCAbs2:
.cd4d	ad4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd4f	ad4f	b0 0a		bcs $ad5b			bcs 	_GXOkayFail
.cd51	ad51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cd53	ad53	90 02		bcc $ad57			bcc 	_GXCHaveLowest
.cd55	ad55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cd57	ad57					_GXCHaveLowest:
.cd57	ad57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cd58	ad58	0a		asl a				asl 	a
.cd59	ad59	18		clc				clc
.cd5a	ad5a	60		rts				rts
.cd5b	ad5b					_GXOkayFail:
.cd5b	ad5b	18		clc				clc
.cd5c	ad5c					_GXCollideFail:
.cd5c	ad5c	a9 ff		lda #$ff			lda 	#$FF
.cd5e	ad5e	60		rts				rts
.cd5f	ad5f					GXFindSprite:
.cd5f	ad5f	aa		tax				tax
.cd60	ad60	ad e0 07	lda $07e0			lda 	gxSpritePage 				; access the base page of the sprite
.cd63	ad63	85 0b		sta $0b				sta 	GXEditSlot
.cd65	ad65	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cd68	ad68	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cd6b	ad6b	f0 33		beq $ada0			beq 	_GXFSFail
.cd6d	ad6d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cd70	ad70	8d 8b 08	sta $088b			sta 	gxSpriteOffset+1
.cd73	ad73	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cd76	ad76	48		pha				pha 								; save twice
.cd77	ad77	48		pha				pha
.cd78	ad78	29 03		and #$03			and 	#3 							; get sprite size
.cd7a	ad7a	8d 88 08	sta $0888			sta 	gxSizeBits 					; save raw (0-3)
.cd7d	ad7d	aa		tax				tax
.cd7e	ad7e	bd a2 ad	lda $ada2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cd81	ad81	8d 87 08	sta $0887			sta 	gxSizePixels 				; save (8/16/24/32)
.cd84	ad84	68		pla				pla 								; get LUT
.cd85	ad85	4a		lsr a				lsr		a
.cd86	ad86	4a		lsr a				lsr		a
.cd87	ad87	29 03		and #$03			and 	#3
.cd89	ad89	8d 89 08	sta $0889			sta 	gxSpriteLUT
.cd8c	ad8c	68		pla				pla 								; address, neeeds to be x 4
.cd8d	ad8d	29 f0		and #$f0			and 	#$F0
.cd8f	ad8f	8d 8a 08	sta $088a			sta 	gxSpriteOffset
.cd92	ad92	0e 8a 08	asl $088a			asl 	gxSpriteOffset
.cd95	ad95	2e 8b 08	rol $088b			rol 	gxSpriteOffset+1
.cd98	ad98	0e 8a 08	asl $088a			asl 	gxSpriteOffset
.cd9b	ad9b	2e 8b 08	rol $088b			rol 	gxSpriteOffset+1
.cd9e	ad9e	18		clc				clc
.cd9f	ad9f	60		rts				rts
.cda0	ada0					_GXFSFail:
.cda0	ada0	38		sec				sec
.cda1	ada1	60		rts				rts
.cda2	ada2					_GXFXSSTTable:
>cda2	ada2	08 10 18 20					.byte 	8,16,24,32
.0887						gxSizePixels:
>0887								.fill 	1
.0888						gxSizeBits:
>0888								.fill 	1
.0889						gxSpriteLUT:
>0889								.fill 	1
.088a						gxSpriteOffset:
>088a								.fill 	2
.cda6	ada6					GXSortXY:
.cda6	ada6	20 c4 ad	jsr $adc4			jsr 	GXSortY 					; will be sorted on Y now
.cda9	ada9	ad d4 07	lda $07d4			lda 	gxX0 						; compare X0 v X1
.cdac	adac	cd d8 07	cmp $07d8			cmp 	gxX1
.cdaf	adaf	ad d5 07	lda $07d5			lda 	gxX0+1
.cdb2	adb2	ed d9 07	sbc $07d9			sbc 	gxX1+1
.cdb5	adb5	90 0c		bcc $adc3			bcc 	_GXSXYExit 					; X0 < X1 exit
.cdb7	adb7	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cdb9	adb9	a0 04		ldy #$04			ldy 	#4
.cdbb	adbb	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdbe	adbe	e8		inx				inx
.cdbf	adbf	c8		iny				iny
.cdc0	adc0	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdc3	adc3					_GXSXYExit:
.cdc3	adc3	60		rts				rts
.cdc4	adc4					GXSortY:
.cdc4	adc4	ad d6 07	lda $07d6			lda 	gxY0 						; if Y0 >= Y1
.cdc7	adc7	cd da 07	cmp $07da			cmp 	gxY1
.cdca	adca	90 0b		bcc $add7			bcc 	_GXSYSorted
.cdcc	adcc	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cdce	adce	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cdd0	add0					_GXSwap1:
.cdd0	add0	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdd3	add3	88		dey				dey
.cdd4	add4	ca		dex				dex
.cdd5	add5	10 f9		bpl $add0			bpl 	_GXSwap1
.cdd7	add7					_GXSYSorted:
.cdd7	add7	60		rts				rts
.cdd8	add8					GXSwapXY:
.cdd8	add8	bd d4 07	lda $07d4,x			lda 	gxX0,x
.cddb	addb	48		pha				pha
.cddc	addc	b9 d4 07	lda $07d4,y			lda 	gxX0,y
.cddf	addf	9d d4 07	sta $07d4,x			sta 	gxX0,x
.cde2	ade2	68		pla				pla
.cde3	ade3	99 d4 07	sta $07d4,y			sta 	gxX0,y
.cde6	ade6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cde7	ade7					KeywordSet0:
>cde7	ade7	00 65					.text	0,$65,""               ; $80 !0:EOF
>cde9	ade9	00 58					.text	0,$58,""               ; $81 !1:SH1
>cdeb	adeb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cded	aded	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cdf3	adf3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cdfb	adfb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>ce01	ae01	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>ce08	ae08	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>ce10	ae10	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>ce17	ae17	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>ce1e	ae1e	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>ce25	ae25	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>ce2b	ae2b	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>ce33	ae33	45 24 28
>ce36	ae36	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>ce3e	ae3e	45 24 28
>ce41	ae41	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>ce47	ae47	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ce4f	ae4f	28
>ce50	ae50	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ce58	ae58	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>ce5e	ae5e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>ce66	ae66	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ce6e	ae6e	55 4e 54 28
>ce72	ae72	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>ce7a	ae7a	54 24 28
>ce7d	ae7d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>ce84	ae84	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>ce8b	ae8b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>ce92	ae92	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>ce9a	ae9a	4e 28
>ce9c	ae9c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>cea4	aea4	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>ceaa	aeaa	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>ceb0	aeb0	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>ceb7	aeb7	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cebd	aebd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cec3	aec3	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>ceca	aeca	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>ced2	aed2	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>ceda	aeda	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cee2	aee2	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>ceea	aeea	47 28
>ceec	aeec	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cef4	aef4	28
>cef5	aef5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cefd	aefd	28
>cefe	aefe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cf04	af04	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cf0a	af0a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cf10	af10	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cf17	af17	05 56 54 49 4c 45 28			.text	5,$56,"TILE("          ; $aa TILE(
>cf1e	af1e	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $ab TIMER(
>cf26	af26	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ac TRUE
>cf2c	af2c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ad VAL(
>cf32	af32	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ae FOR
>cf37	af37	02 8f 49 46				.text	2,$8f,"IF"             ; $af IF
>cf3b	af3b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $b0 PROC
>cf41	af41	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b1 REPEAT
>cf49	af49	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b2 WHILE
>cf50	af50	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b3 ENDIF
>cf57	af57	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b4 ENDPROC
>cf5f	af5f	43
>cf60	af60	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b5 NEXT
>cf66	af66	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b6 THEN
>cf6c	af6c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b7 UNTIL
>cf73	af73	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b8 WEND
>cf79	af79	02 95 41 54				.text	2,$95,"AT"             ; $b9 AT
>cf7d	af7d	02 9b 42 59				.text	2,$9b,"BY"             ; $ba BY
>cf81	af81	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $bb CALL
>cf87	af87	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bc CIRCLE
>cf8f	af8f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bd CLEAR
>cf96	af96	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $be COLOR
>cf9d	af9d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bf COLOUR
>cfa5	afa5	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $c0 DATA
>cfab	afab	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c1 DIM
>cfb0	afb0	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c2 DOWNTO
>cfb8	afb8	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c3 ELSE
>cfbe	afbe	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c4 FROM
>cfc4	afc4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c5 GFX
>cfc9	afc9	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c6 HERE
>cfcf	afcf	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c7 IMAGE
>cfd6	afd6	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c8 LET
>cfdb	afdb	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c9 LINE
>cfe1	afe1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ca LOCAL
>cfe8	afe8	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $cb MEMCOPY
>cff0	aff0	59
>cff1	aff1	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cc OFF
>cff6	aff6	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cd ON
>cffa	affa	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ce OUTLINE
>d002	b002	45
>d003	b003	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cf PALETTE
>d00b	b00b	45
>d00c	b00c	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $d0 PLOT
>d012	b012	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d1 POKE
>d018	b018	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d2 POKED
>d01f	b01f	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d3 POKEL
>d026	b026	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d4 POKEW
>d02d	b02d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d5 READ
>d033	b033	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d6 RECT
>d039	b039	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d7 REM
>d03e	b03e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d8 SOLID
>d045	b045	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d9 SOUND
>d04c	b04c	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $da SPRITE
>d054	b054	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $db TEXT
>d05a	b05a	02 a3 54 4f				.text	2,$a3,"TO"             ; $dc TO
>d05e	b05e	ff					.text	$FF
.d05f	b05f					KeywordSet1:
>d05f	b05f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d061	b061	00 58					.text	0,$58,""               ; $81 !1:SH1
>d063	b063	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d065	b065	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d06d	b06d	4c 45
>d06f	b06f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d077	b077	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d07f	b07f	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d086	b086	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d08d	b08d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d092	b092	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d09a	b09a	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d09f	b09f	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d0a6	b0a6	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d0ab	b0ab	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d0b3	b0b3	45
>d0b4	b0b4	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d0b8	b0b8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d0bf	b0bf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d0c5	b0c5	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d0cc	b0cc	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d0d3	b0d3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d0d9	b0d9	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d0df	b0df	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $95 MDELTA
>d0e7	b0e7	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d0ee	b0ee	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d0f3	b0f3	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d0f9	b0f9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d100	b100	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d108	b108	45
>d109	b109	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d111	b111	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d116	b116	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d11c	b11c	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d124	b124	45
>d125	b125	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d12d	b12d	45
>d12e	b12e	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d135	b135	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d13d	b13d	53
>d13e	b13e	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d144	b144	04 2e 54 49 4c 45			.text	4,$2e,"TILE"           ; $a3 TILE
>d14a	b14a	05 81 54 49 4c 45 53			.text	5,$81,"TILES"          ; $a4 TILES
>d151	b151	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a5 TRY
>d156	b156	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a6 VERIFY
>d15e	b15e	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a7 XGO
>d163	b163	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a8 XLOAD
>d16a	b16a	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a9 ZAP
>d16f	b16f	ff					.text	$FF
.d170	b170					KeywordSet2:
>d170	b170	00 65					.text	0,$65,""               ; $80 !0:EOF
>d172	b172	00 58					.text	0,$58,""               ; $81 !1:SH1
>d174	b174	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d176	b176	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d17b	b17b	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d180	b180	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d185	b185	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d18a	b18a	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d18f	b18f	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d194	b194	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d199	b199	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d19e	b19e	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d1a3	b1a3	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d1a8	b1a8	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d1ad	b1ad	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d1b2	b1b2	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d1b7	b1b7	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d1bc	b1bc	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d1c1	b1c1	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d1c6	b1c6	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d1cb	b1cb	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d1d0	b1d0	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d1d5	b1d5	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d1da	b1da	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d1df	b1df	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d1e4	b1e4	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d1e9	b1e9	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d1ee	b1ee	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d1f3	b1f3	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d1f8	b1f8	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d1fd	b1fd	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d202	b202	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d207	b207	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d20c	b20c	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d211	b211	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d216	b216	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d21b	b21b	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d220	b220	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d225	b225	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d22a	b22a	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d22f	b22f	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d234	b234	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d239	b239	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d23e	b23e	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d243	b243	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d248	b248	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d24d	b24d	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d252	b252	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d257	b257	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d25c	b25c	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d261	b261	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d266	b266	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d26b	b26b	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d270	b270	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d275	b275	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d27a	b27a	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d27f	b27f	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d284	b284	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d289	b289	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d28e	b28e	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d293	b293	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d298	b298	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d29d	b29d	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d2a2	b2a2	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d2a7	b2a7	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d2ac	b2ac	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d2b1	b2b1	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d2b6	b2b6	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d2bb	b2bb	ff					.text	$FF
.d2bc	b2bc					Export_TKListConvertLine:
.d2bc	b2bc	48		pha				pha 								; save indent on the stack
.d2bd	b2bd	9c 19 04	stz $0419			stz 	tbOffset
.d2c0	b2c0	9c 29 04	stz $0429			stz 	tokenBuffer
.d2c3	b2c3	9c 25 04	stz $0425			stz 	currentListColour
.d2c6	b2c6	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d2c8	b2c8	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d2cb	b2cb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d2cd	b2cd	b1 30		lda ($30),y			lda 	(codePtr),y
.d2cf	b2cf	aa		tax				tax
.d2d0	b2d0	88		dey				dey
.d2d1	b2d1	b1 30		lda ($30),y			lda 	(codePtr),y
.d2d3	b2d3	20 b6 b4	jsr $b4b6			jsr 	LCLWriteNumberXA
.d2d6	b2d6	68		pla				pla 								; adjustment to indent
.d2d7	b2d7	48		pha				pha 								; save on stack
.d2d8	b2d8	10 0c		bpl $b2e6			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d2da	b2da	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d2db	b2db	6d 22 04	adc $0422			adc 	listIndent
.d2de	b2de	8d 22 04	sta $0422			sta 	listIndent
.d2e1	b2e1	10 03		bpl $b2e6			bpl 	_LCNoAdjust
.d2e3	b2e3	9c 22 04	stz $0422			stz 	listIndent
.d2e6	b2e6					_LCNoAdjust:
.d2e6	b2e6	18		clc				clc		 							; work out actual indent.
.d2e7	b2e7	ad 22 04	lda $0422			lda 	listIndent
.d2ea	b2ea	0a		asl a				asl 	a
.d2eb	b2eb	69 07		adc #$07			adc 	#7
.d2ed	b2ed	85 36		sta $36				sta 	zTemp0
.d2ef	b2ef					_LCPadOut:
.d2ef	b2ef	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d2f1	b2f1	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d2f4	b2f4	ad 19 04	lda $0419			lda 	tbOffset
.d2f7	b2f7	c5 36		cmp $36				cmp 	zTemp0
.d2f9	b2f9	d0 f4		bne $b2ef			bne 	_LCPadOut
.d2fb	b2fb	a0 03		ldy #$03			ldy 	#3 							; start position.
.d2fd	b2fd					_LCMainLoop:
.d2fd	b2fd	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d2ff	b2ff	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d302	b302	b1 30		lda ($30),y			lda 	(codePtr),y
.d304	b304	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d306	b306	f0 17		beq $b31f			beq 	_LCExit
.d308	b308	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d30a	b30a	90 1e		bcc $b32a			bcc 	_LCDoubles
.d30c	b30c	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d30e	b30e	90 2a		bcc $b33a			bcc 	_LCShiftPunc
.d310	b310	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d312	b312	90 35		bcc $b349			bcc 	_LCPunctuation
.d314	b314	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d316	b316	90 51		bcc $b369			bcc 	_LCIdentifiers
.d318	b318	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d31a	b31a	90 73		bcc $b38f			bcc 	_LCTokens
.d31c	b31c	4c ef b3	jmp $b3ef			jmp 	_LCData 					; 254-5 are data objects
.d31f	b31f					_LCExit:
.d31f	b31f	68		pla				pla 								; get old indent adjust
.d320	b320	30 07		bmi $b329			bmi 	_LCExit2
.d322	b322	18		clc				clc 								; add to indent if +ve
.d323	b323	6d 22 04	adc $0422			adc 	listIndent
.d326	b326	8d 22 04	sta $0422			sta 	listIndent
.d329	b329					_LCExit2:
.d329	b329	60		rts				rts
.d32a	b32a					_LCDoubles:
.d32a	b32a	48		pha				pha
.d32b	b32b	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d32c	b32c	29 02		and #$02			and 	#2
.d32e	b32e	09 3c		ora #$3c			ora 	#60 						; make < >
.d330	b330	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d333	b333	68		pla				pla 								; restore, do lower bit
.d334	b334	29 03		and #$03			and 	#3
.d336	b336	09 3c		ora #$3c			ora 	#60
.d338	b338	80 0f		bra $b349			bra		_LCPunctuation 				; print, increment, loop
.d33a	b33a					_LCShiftPunc:
.d33a	b33a	aa		tax				tax 								; save in X
.d33b	b33b	29 07		and #$07			and 	#7 							; lower 3 bits
.d33d	b33d	f0 02		beq $b341			beq 	_LCNoAdd
.d33f	b33f	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d341	b341					_LCNoAdd:
.d341	b341	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d343	b343	90 02		bcc $b347			bcc 	_LCNoAdd2
.d345	b345	09 20		ora #$20			ora 	#32 						; adds $20
.d347	b347					_LCNoAdd2:
.d347	b347	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d349	b349					_LCPunctuation:
.d349	b349	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d34b	b34b	d0 03		bne $b350			bne 	_LCPContinue
.d34d	b34d	20 64 b4	jsr $b464			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d350	b350					_LCPContinue:
.d350	b350	c9 2e		cmp #$2e			cmp 	#'.'
.d352	b352	f0 08		beq $b35c			beq 	_LCPIsConstant
.d354	b354	c9 30		cmp #$30			cmp 	#'0'
.d356	b356	90 0b		bcc $b363			bcc 	_LCPNotConstant
.d358	b358	c9 3a		cmp #$3a			cmp 	#'9'+1
.d35a	b35a	b0 07		bcs $b363			bcs 	_LCPNotConstant
.d35c	b35c					_LCPIsConstant:
.d35c	b35c	48		pha				pha
.d35d	b35d	a9 87		lda #$87			lda 	#CLIConstant+$80
.d35f	b35f	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d362	b362	68		pla				pla
.d363	b363					_LCPNotConstant:
.d363	b363	c8		iny				iny 								; consume character
.d364	b364	20 4e b4	jsr $b44e			jsr 	LCLWrite 					; write it out.
.d367	b367	80 94		bra $b2fd			bra 	_LCMainLoop 				; go round again.
.d369	b369					_LCIdentifiers:
.d369	b369	18		clc				clc 								; convert to physical address
.d36a	b36a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d36c	b36c	85 37		sta $37				sta 	zTemp0+1
.d36e	b36e	c8		iny				iny
.d36f	b36f	b1 30		lda ($30),y			lda 	(codePtr),y
.d371	b371	85 36		sta $36				sta 	zTemp0
.d373	b373	c8		iny				iny
.d374	b374	5a		phy				phy 								; save position
.d375	b375	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d377	b377	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d37a	b37a	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d37c	b37c					_LCOutIdentifier:
.d37c	b37c	c8		iny				iny
.d37d	b37d	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d37f	b37f	29 7f		and #$7f			and 	#$7F
.d381	b381	20 a0 b4	jsr $b4a0			jsr 	LCLLowerCase
.d384	b384	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d387	b387	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d389	b389	10 f1		bpl $b37c			bpl 	_LCOutIdentifier
.d38b	b38b	7a		ply				ply 								; restore position
.d38c	b38c	4c fd b2	jmp $b2fd			jmp 	_LCMainLoop
.d38f	b38f					_LCTokens:
.d38f	b38f	aa		tax				tax 								; token in X
.d390	b390	a9 70		lda #$70			lda 	#((KeywordSet2) & $FF)
.d392	b392	85 36		sta $36				sta 	0+zTemp0
.d394	b394	a9 b1		lda #$b1			lda 	#((KeywordSet2) >> 8)
.d396	b396	85 37		sta $37				sta 	1+zTemp0
.d398	b398	e0 82		cpx #$82			cpx 	#$82
.d39a	b39a	f0 16		beq $b3b2			beq 	_LCUseShift
.d39c	b39c	a9 5f		lda #$5f			lda 	#((KeywordSet1) & $FF)
.d39e	b39e	85 36		sta $36				sta 	0+zTemp0
.d3a0	b3a0	a9 b0		lda #$b0			lda 	#((KeywordSet1) >> 8)
.d3a2	b3a2	85 37		sta $37				sta 	1+zTemp0
.d3a4	b3a4	e0 81		cpx #$81			cpx 	#$81
.d3a6	b3a6	f0 0a		beq $b3b2			beq 	_LCUseShift
.d3a8	b3a8	a9 e7		lda #$e7			lda 	#((KeywordSet0) & $FF)
.d3aa	b3aa	85 36		sta $36				sta 	0+zTemp0
.d3ac	b3ac	a9 ad		lda #$ad			lda 	#((KeywordSet0) >> 8)
.d3ae	b3ae	85 37		sta $37				sta 	1+zTemp0
.d3b0	b3b0	80 01		bra $b3b3			bra 	_LCNoShift
.d3b2	b3b2					_LCUseShift:
.d3b2	b3b2	c8		iny				iny
.d3b3	b3b3					_LCNoShift:
.d3b3	b3b3	20 78 b4	jsr $b478			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d3b6	b3b6	b1 30		lda ($30),y			lda 	(codePtr),y
.d3b8	b3b8	aa		tax				tax 								; into X
.d3b9	b3b9					_LCFindText:
.d3b9	b3b9	ca		dex				dex
.d3ba	b3ba	10 0e		bpl $b3ca			bpl 	_LCFoundText 				; found text.
.d3bc	b3bc	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d3be	b3be	1a		inc a				inc 	a 							; one extra for size
.d3bf	b3bf	38		sec				sec 								; one extra for checksum
.d3c0	b3c0	65 36		adc $36				adc 	zTemp0 						; go to next token
.d3c2	b3c2	85 36		sta $36				sta 	zTemp0
.d3c4	b3c4	90 f3		bcc $b3b9			bcc 	_LCFindText
.d3c6	b3c6	e6 37		inc $37				inc 	zTemp0+1
.d3c8	b3c8	80 ef		bra $b3b9			bra 	_LCFindText
.d3ca	b3ca					_LCFoundText:
.d3ca	b3ca	5a		phy				phy 								; save List position
.d3cb	b3cb	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d3cd	b3cd	aa		tax				tax
.d3ce	b3ce	a9 86		lda #$86			lda 	#CLIToken+$80
.d3d0	b3d0	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d3d3	b3d3	a0 02		ldy #$02			ldy 	#2
.d3d5	b3d5					_LCCopyToken:
.d3d5	b3d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d3d7	b3d7	20 a0 b4	jsr $b4a0			jsr 	LCLLowerCase
.d3da	b3da	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d3dd	b3dd	c8		iny				iny
.d3de	b3de	ca		dex				dex
.d3df	b3df	d0 f4		bne $b3d5			bne 	_LCCopyToken
.d3e1	b3e1	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d3e3	b3e3	f0 05		beq $b3ea			beq 	_LCNoSpace
.d3e5	b3e5	a9 20		lda #$20			lda 	#' '
.d3e7	b3e7	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d3ea	b3ea					_LCNoSpace:
.d3ea	b3ea	7a		ply				ply 								; restore position.
.d3eb	b3eb	c8		iny				iny 								; consume token
.d3ec	b3ec	4c fd b2	jmp $b2fd			jmp 	_LCMainLoop 				; and go around again.
.d3ef	b3ef					_LCData:
.d3ef	b3ef	48		pha				pha 								; save type $FE/$FF
.d3f0	b3f0	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d3f2	b3f2	c9 fe		cmp #$fe			cmp 	#$FE
.d3f4	b3f4	f0 22		beq $b418			beq 	_LCHaveOpener
.d3f6	b3f6	a2 22		ldx #$22			ldx 	#'"'
.d3f8	b3f8	a9 8f		lda #$8f			lda 	#CLIData+$80
.d3fa	b3fa	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d3fd	b3fd	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d3ff	b3ff	d0 17		bne $b418			bne 	_LCHaveOpener
.d401	b401	88		dey				dey 								; what precedes it ?
.d402	b402	b1 30		lda ($30),y			lda 	(codePtr),y
.d404	b404	c8		iny				iny
.d405	b405	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d407	b407	d0 0f		bne $b418			bne 	_LCHaveOpener
.d409	b409	a9 09		lda #$09			lda 	#9 							; tab
.d40b	b40b	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d40e	b40e	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d410	b410	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d413	b413	a9 85		lda #$85			lda 	#CLIFComment+$80
.d415	b415	20 45 b4	jsr $b445			jsr 	LCLWriteColour
.d418	b418					_LCHaveOpener:
.d418	b418	8a		txa				txa 								; output prefix (# or ")
.d419	b419	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d41c	b41c	c8		iny				iny 								; get count
.d41d	b41d	b1 30		lda ($30),y			lda 	(codePtr),y
.d41f	b41f	aa		tax				tax
.d420	b420	c8		iny				iny 								; point at first character
.d421	b421					_LCOutData:
.d421	b421	b1 30		lda ($30),y			lda 	(codePtr),y
.d423	b423	c9 00		cmp #$00			cmp 	#0
.d425	b425	f0 03		beq $b42a			beq 	_LCNoPrint
.d427	b427	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d42a	b42a					_LCNoPrint:
.d42a	b42a	c8		iny				iny
.d42b	b42b	ca		dex				dex
.d42c	b42c	d0 f3		bne $b421			bne 	_LCOutData
.d42e	b42e	68		pla				pla 								; closing " required ?
.d42f	b42f	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d431	b431	d0 0f		bne $b442			bne 	_LCNoQuote
.d433	b433	a9 22		lda #$22			lda 	#'"'
.d435	b435	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d438	b438	ad c9 07	lda $07c9			lda 	EXTTextColour
.d43b	b43b	29 0f		and #$0f			and 	#$0F
.d43d	b43d	09 90		ora #$90			ora 	#$90
.d43f	b43f	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d442	b442					_LCNoQuote:
.d442	b442	4c fd b2	jmp $b2fd			jmp 	_LCMainLoop
.d445	b445					LCLWriteColour:
.d445	b445	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d448	b448	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d44b	b44b	d0 01		bne $b44e			bne 	LCLWrite 					; if different, output it
.d44d	b44d	60		rts				rts
.d44e	b44e					LCLWrite:
.d44e	b44e	da		phx				phx
.d44f	b44f	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d452	b452	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d455	b455	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d458	b458	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d45b	b45b	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d45d	b45d	30 03		bmi $b462			bmi 	_LCLNoColour
.d45f	b45f	8d 23 04	sta $0423			sta 	lcLastCharacter
.d462	b462					_LCLNoColour:
.d462	b462	fa		plx				plx
.d463	b463	60		rts				rts
.d464	b464					LCLDeleteLastSpace:
.d464	b464	48		pha				pha
.d465	b465	da		phx				phx
.d466	b466	ae 19 04	ldx $0419			ldx 	tbOffset
.d469	b469	f0 0a		beq $b475			beq 	_LCDLSExit
.d46b	b46b	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d46e	b46e	c9 20		cmp #$20			cmp 	#' '
.d470	b470	d0 03		bne $b475			bne 	_LCDLSExit
.d472	b472	ce 19 04	dec $0419			dec 	tbOffset
.d475	b475					_LCDLSExit:
.d475	b475	fa		plx				plx
.d476	b476	68		pla				pla
.d477	b477	60		rts				rts
.d478	b478					LCLCheckSpaceRequired:
.d478	b478	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d47b	b47b	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d47d	b47d	f0 1b		beq $b49a			beq 	_LCCSRSpace
.d47f	b47f	c9 29		cmp #$29			cmp 	#')'
.d481	b481	f0 17		beq $b49a			beq 	_LCCSRSpace
.d483	b483	c9 23		cmp #$23			cmp 	#'#'
.d485	b485	f0 13		beq $b49a			beq 	_LCCSRSpace
.d487	b487	20 a0 b4	jsr $b4a0			jsr 	LCLLowerCase 				; saves a little effort
.d48a	b48a	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d48c	b48c	90 11		bcc $b49f			bcc 	_LCCSRExit
.d48e	b48e	c9 3a		cmp #$3a			cmp 	#"9"+1
.d490	b490	90 08		bcc $b49a			bcc 	_LCCSRSpace
.d492	b492	c9 61		cmp #$61			cmp 	#"a"
.d494	b494	90 09		bcc $b49f			bcc 	_LCCSRExit
.d496	b496	c9 7b		cmp #$7b			cmp 	#"z"+1
.d498	b498	b0 05		bcs $b49f			bcs 	_LCCSRExit
.d49a	b49a					_LCCSRSpace:
.d49a	b49a	a9 20		lda #$20			lda 	#' '
.d49c	b49c	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d49f	b49f					_LCCSRExit:
.d49f	b49f	60		rts				rts
.d4a0	b4a0					LCLLowerCase:
.d4a0	b4a0	c9 41		cmp #$41			cmp 	#"A"
.d4a2	b4a2	90 06		bcc $b4aa			bcc 	_LCLLCOut
.d4a4	b4a4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4a6	b4a6	b0 02		bcs $b4aa			bcs 	_LCLLCOut
.d4a8	b4a8	69 20		adc #$20			adc 	#$20
.d4aa	b4aa					_LCLLCOut:
.d4aa	b4aa	60		rts				rts
.d4ab	b4ab					LCLUpperCase:
.d4ab	b4ab	c9 61		cmp #$61			cmp 	#"a"
.d4ad	b4ad	90 06		bcc $b4b5			bcc 	_LCLUCOut
.d4af	b4af	c9 7b		cmp #$7b			cmp 	#"z"+1
.d4b1	b4b1	b0 02		bcs $b4b5			bcs 	_LCLUCOut
.d4b3	b4b3	e9 1f		sbc #$1f			sbc 	#$1F
.d4b5	b4b5					_LCLUCOut:
.d4b5	b4b5	60		rts				rts
.d4b6	b4b6					LCLWriteNumberXA:
.d4b6	b4b6	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d4b8	b4b8					_LCLWNLoop1:
.d4b8	b4b8	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d4ba	b4ba					_LCLWNLoop2:
.d4ba	b4ba	48		pha				pha 								; save initial LSB
.d4bb	b4bb	38		sec				sec
.d4bc	b4bc	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d4be	b4be	f9 ef b4	sbc $b4ef,y			sbc 	_LCLWNTable,y
.d4c1	b4c1	48		pha				pha
.d4c2	b4c2	8a		txa				txa
.d4c3	b4c3	f9 f0 b4	sbc $b4f0,y			sbc 	_LCLWNTable+1,y
.d4c6	b4c6	90 07		bcc $b4cf			bcc 	_LCLWNUnderflow
.d4c8	b4c8	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d4ca	b4ca	aa		tax				tax 								; update X
.d4cb	b4cb	68		pla				pla 								; restore A
.d4cc	b4cc	7a		ply				ply 								; throw original
.d4cd	b4cd	80 eb		bra $b4ba			bra 	_LCLWNLoop2 				; try again.
.d4cf	b4cf					_LCLWNUnderflow:
.d4cf	b4cf	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d4d1	b4d1	d0 06		bne $b4d9			bne 	_LCLWNOut
.d4d3	b4d3	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d4d6	b4d6	3a		dec a				dec 	a
.d4d7	b4d7	f0 04		beq $b4dd			beq 	_LCLWNNext
.d4d9	b4d9					_LCLWNOut:
.d4d9	b4d9	98		tya				tya
.d4da	b4da	20 e9 b4	jsr $b4e9			jsr 	_LCLWNOutDigit
.d4dd	b4dd					_LCLWNNext:
.d4dd	b4dd	7a		ply				ply 							 	; restore original value.
.d4de	b4de	68		pla				pla
.d4df	b4df	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d4e1	b4e1	c8		iny				iny
.d4e2	b4e2	c8		iny				iny
.d4e3	b4e3	84 37		sty $37				sty 	zTemp0+1
.d4e5	b4e5	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d4e7	b4e7	d0 cf		bne $b4b8			bne 	_LCLWNLoop1
.d4e9	b4e9					_LCLWNOutDigit:
.d4e9	b4e9	09 30		ora #$30			ora 	#'0'
.d4eb	b4eb	20 4e b4	jsr $b44e			jsr 	LCLWrite
.d4ee	b4ee	60		rts				rts
.d4ef	b4ef					_LCLWNTable:
>d4ef	b4ef	10 27						.word 	10000
>d4f1	b4f1	e8 03						.word 	1000
>d4f3	b4f3	64 00						.word 	100
>d4f5	b4f5	0a 00						.word 	10
.d4f7	b4f7					TOKSearchTable:
.d4f7	b4f7	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d4f9	b4f9	85 36		sta $36				sta 	zTemp0
.d4fb	b4fb	a0 00		ldy #$00			ldy 	#0
.d4fd	b4fd	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d4ff	b4ff	85 38		sta $38				sta 	zTemp1
.d501	b501					_TSTLoop:
.d501	b501	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d503	b503	30 49		bmi $b54e			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d505	b505	f0 2e		beq $b535			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d507	b507	c8		iny				iny 								; get the hash
.d508	b508	b1 36		lda ($36),y			lda 	(zTemp0),y
.d50a	b50a	88		dey				dey
.d50b	b50b	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d50e	b50e	d0 25		bne $b535			bne 	_TSTNext
.d510	b510	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d513	b513	38		sec				sec
.d514	b514	ed 00 04	sbc $0400			sbc 	identStart
.d517	b517	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d519	b519	d0 1a		bne $b535			bne 	_TSTNext
.d51b	b51b	5a		phy				phy 								; save Y , we might fail to match.
.d51c	b51c	c8		iny				iny 								; point to text
.d51d	b51d	c8		iny				iny
.d51e	b51e	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d521	b521					_TSTCompareName:
.d521	b521	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d524	b524	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d526	b526	d0 0c		bne $b534			bne 	_TSTNextPullY 				; fail, pullY and do next
.d528	b528	e8		inx				inx
.d529	b529	c8		iny				iny
.d52a	b52a	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d52d	b52d	d0 f2		bne $b521			bne 	_TSTCompareName
.d52f	b52f	7a		ply				ply 								; throw Y
.d530	b530	a5 38		lda $38				lda 	zTemp1 						; get token #
.d532	b532	38		sec				sec 								; return with CS = passed.
.d533	b533	60		rts				rts
.d534	b534					_TSTNextPullY:
.d534	b534	7a		ply				ply 								; restore current, fall through.
.d535	b535					_TSTNext:
.d535	b535	e6 38		inc $38				inc 	zTemp1 						; token counter
.d537	b537	98		tya				tya
.d538	b538	18		clc				clc
.d539	b539	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d53b	b53b	1a		inc a				inc 	a 							; +1
.d53c	b53c	1a		inc a				inc 	a 							; +2
.d53d	b53d	a8		tay				tay
.d53e	b53e	10 c1		bpl $b501			bpl 	_TSTLoop 					; if Y < $80 loop back
.d540	b540	98		tya				tya 								; add Y to zTemp0 and reset Y
.d541	b541	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d543	b543	18		clc				clc  								; but have tables > 255 bytes
.d544	b544	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d546	b546	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d548	b548	90 b7		bcc $b501			bcc 	_TSTLoop
.d54a	b54a	e6 37		inc $37				inc 	zTemp0+1
.d54c	b54c	80 b3		bra $b501			bra 	_TSTLoop
.d54e	b54e					_TSTFail:
.d54e	b54e	18		clc				clc
.d54f	b54f	60		rts				rts
.d550	b550					Export_TKTokeniseLine:
.d550	b550	20 1d b7	jsr $b71d			jsr 	LCLFixLineBufferCase 		; fix line case
.d553	b553	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d555	b555	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d558	b558	9c 27 04	stz $0427			stz 	tokenLineNumber
.d55b	b55b	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d55e	b55e	a2 ff		ldx #$ff			ldx 	#$FF
.d560	b560					_TKFindFirst:
.d560	b560	e8		inx				inx
.d561	b561	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d564	b564	f0 62		beq $b5c8			beq 	_TKExit
.d566	b566	c9 20		cmp #$20			cmp 	#' '
.d568	b568	90 f6		bcc $b560			bcc 	_TKFindFirst
.d56a	b56a	c9 30		cmp #$30			cmp 	#'0'
.d56c	b56c	90 07		bcc $b575			bcc 	_TKNoLineNumber
.d56e	b56e	c9 3a		cmp #$3a			cmp 	#'9'+1
.d570	b570	b0 03		bcs $b575			bcs 	_TKNoLineNumber
.d572	b572	20 47 b7	jsr $b747			jsr 	TOKExtractLineNumber
.d575	b575					_TKNoLineNumber:
.d575	b575					_TKTokeniseLoop:
.d575	b575	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d578	b578	f0 4e		beq $b5c8			beq 	_TKExit
.d57a	b57a	e8		inx				inx
.d57b	b57b	c9 20		cmp #$20			cmp 	#' '
.d57d	b57d	f0 f6		beq $b575			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d57f	b57f	ca		dex				dex 								; undo last get, A contains character, X is position.
.d580	b580	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d582	b582	f0 68		beq $b5ec			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d584	b584	c9 41		cmp #$41			cmp 	#'A'
.d586	b586	90 04		bcc $b58c			bcc 	_TKTokenisePunctuation
.d588	b588	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d58a	b58a	90 60		bcc $b5ec			bcc 	_TKTokeniseIdentifier
.d58c	b58c					_TKTokenisePunctuation:
.d58c	b58c	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d58e	b58e	f0 2e		beq $b5be			beq 	_TKString
.d590	b590	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d592	b592	f0 2f		beq $b5c3			beq 	_TKHexConstant
.d594	b594	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d596	b596	f0 36		beq $b5ce			beq 	_TKCheckDouble
.d598	b598	c9 3e		cmp #$3e			cmp 	#'>'
.d59a	b59a	f0 32		beq $b5ce			beq 	_TKCheckDouble
.d59c	b59c					_TKStandardPunctuation:
.d59c	b59c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d59f	b59f	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d5a1	b5a1	90 0e		bcc $b5b1			bcc 	_TKNoShift
.d5a3	b5a3	48		pha				pha 								; save. we are about to convert this punctuation token from
.d5a4	b5a4	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d5a6	b5a6	85 36		sta $36				sta 	zTemp0
.d5a8	b5a8	68		pla				pla
.d5a9	b5a9	29 20		and #$20			and 	#32 						; bit 5
.d5ab	b5ab	4a		lsr a				lsr 	a 							; shift into bit 3
.d5ac	b5ac	4a		lsr a				lsr 	a
.d5ad	b5ad	05 36		ora $36				ora 	zTemp0
.d5af	b5af	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d5b1	b5b1					_TKNoShift:
.d5b1	b5b1	20 8c b7	jsr $b78c			jsr 	TOKWriteByte 				; write the punctuation character
.d5b4	b5b4	e8		inx				inx 								; consume the character
.d5b5	b5b5	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d5b7	b5b7	d0 bc		bne $b575			bne 	_TKTokeniseLoop 			; and loop round again.
.d5b9	b5b9	20 7f b6	jsr $b67f			jsr 	TOKCheckComment 			; comment checl
.d5bc	b5bc	80 b7		bra $b575			bra 	_TKTokeniseLoop
.d5be	b5be					_TKString:
.d5be	b5be	20 ac b6	jsr $b6ac			jsr 	TOKTokenString
.d5c1	b5c1	80 b2		bra $b575			bra 	_TKTokeniseLoop
.d5c3	b5c3					_TKHexConstant:
.d5c3	b5c3	20 e7 b6	jsr $b6e7			jsr 	TOKHexConstant
.d5c6	b5c6	80 ad		bra $b575			bra 	_TKTokeniseLoop
.d5c8	b5c8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d5ca	b5ca	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d5cd	b5cd	60		rts				rts
.d5ce	b5ce					_TKCheckDouble:
.d5ce	b5ce	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d5d1	b5d1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d5d3	b5d3	90 c7		bcc $b59c			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d5d5	b5d5	c9 3f		cmp #$3f			cmp 	#'>'+1
.d5d7	b5d7	b0 c3		bcs $b59c			bcs 	_TKStandardPunctuation
.d5d9	b5d9	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d5dc	b5dc	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d5de	b5de	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d5df	b5df	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d5e2	b5e2	38		sec				sec
.d5e3	b5e3	e9 3c		sbc #$3c			sbc 	#'<'
.d5e5	b5e5	20 8c b7	jsr $b78c			jsr 	TOKWriteByte 				; this is in the range 0-7
.d5e8	b5e8	e8		inx				inx 								; consume both
.d5e9	b5e9	e8		inx				inx
.d5ea	b5ea	80 89		bra $b575			bra 	_TKTokeniseLoop
.d5ec	b5ec					_TKTokeniseIdentifier:
.d5ec	b5ec	8e 00 04	stx $0400			stx 	identStart 					; save start
.d5ef	b5ef	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d5f2	b5f2					_TKCheckLoop:
.d5f2	b5f2	e8		inx				inx 								; look at next, we know first is identifier already.
.d5f3	b5f3	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d5f6	b5f6	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d5f8	b5f8	f0 f8		beq $b5f2			beq 	_TKCheckLoop
.d5fa	b5fa	c9 30		cmp #$30			cmp	 	#"0"
.d5fc	b5fc	90 0c		bcc $b60a			bcc 	_TKEndIdentifier
.d5fe	b5fe	c9 3a		cmp #$3a			cmp 	#"9"+1
.d600	b600	90 f0		bcc $b5f2			bcc 	_TKCheckLoop
.d602	b602	c9 41		cmp #$41			cmp	 	#"A"
.d604	b604	90 04		bcc $b60a			bcc 	_TKEndIdentifier
.d606	b606	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d608	b608	90 e8		bcc $b5f2			bcc 	_TKCheckLoop
.d60a	b60a					_TKEndIdentifier:
.d60a	b60a	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d60d	b60d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d60f	b60f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d611	b611	f0 06		beq $b619			beq 	_TKHasTypeCharacter
.d613	b613	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d615	b615	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d617	b617	d0 07		bne $b620			bne 	_TKNoTypeCharacter
.d619	b619					_TKHasTypeCharacter:
.d619	b619	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d61c	b61c	e8		inx				inx 								; consume the type character
.d61d	b61d	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d620	b620					_TKNoTypeCharacter:
.d620	b620	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d622	b622	d0 09		bne $b62d			bne 	_TKNoArray
.d624	b624	e8		inx				inx 								; skip the (
.d625	b625	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d628	b628	09 04		ora #$04			ora 	#$04
.d62a	b62a	8d 04 04	sta $0404			sta 	identTypeByte
.d62d	b62d					_TKNoArray:
.d62d	b62d	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d630	b630	20 08 b7	jsr $b708			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d633	b633	a0 ad		ldy #$ad			ldy 	#(KeywordSet0) >> 8
.d635	b635	a9 e7		lda #$e7			lda 	#(KeywordSet0) & $FF
.d637	b637	20 f7 b4	jsr $b4f7			jsr 	TOKSearchTable
.d63a	b63a	a2 00		ldx #$00			ldx 	#0
.d63c	b63c	b0 1f		bcs $b65d			bcs 	_TKFoundToken
.d63e	b63e	a0 b0		ldy #$b0			ldy 	#(KeywordSet1) >> 8
.d640	b640	a9 5f		lda #$5f			lda 	#(KeywordSet1) & $FF
.d642	b642	20 f7 b4	jsr $b4f7			jsr 	TOKSearchTable
.d645	b645	a2 81		ldx #$81			ldx 	#$81
.d647	b647	b0 14		bcs $b65d			bcs 	_TKFoundToken
.d649	b649	a0 b1		ldy #$b1			ldy 	#(KeywordSet2) >> 8
.d64b	b64b	a9 70		lda #$70			lda 	#(KeywordSet2) & $FF
.d64d	b64d	20 f7 b4	jsr $b4f7			jsr 	TOKSearchTable
.d650	b650	a2 82		ldx #$82			ldx 	#$82
.d652	b652	b0 09		bcs $b65d			bcs 	_TKFoundToken
.d654	b654	20 98 b7	jsr $b798			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d657	b657	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d65a	b65a	4c 75 b5	jmp $b575			jmp 	_TKTokeniseLoop 			; and go round again.
.d65d	b65d					_TKFoundToken:
.d65d	b65d	48		pha				pha 								; save token
.d65e	b65e	8a		txa				txa 								; shift in X, is there one ?
.d65f	b65f	f0 03		beq $b664			beq 	_TKNoTShift
.d661	b661	20 8c b7	jsr $b78c			jsr 	TOKWriteByte 				; if so, write it out
.d664	b664					_TKNoTShift:
.d664	b664	68		pla				pla 								; restore and write token
.d665	b665	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d668	b668	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d66a	b66a	d0 0d		bne $b679			bne 	_TKNotRem 			 		; not shifted ?
.d66c	b66c	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d66e	b66e	d0 09		bne $b679			bne 	_TKNotRem
.d670	b670	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d673	b673	20 7f b6	jsr $b67f			jsr 	TOKCheckComment
.d676	b676	4c 75 b5	jmp $b575			jmp 	_TKTokeniseLoop
.d679	b679					_TKNotRem:
.d679	b679	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d67c	b67c	4c 75 b5	jmp $b575			jmp 	_TKTokeniseLoop 			; and go round again.
.d67f	b67f					TOKCheckComment:
.d67f	b67f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d682	b682	e8		inx				inx
.d683	b683	c9 20		cmp #$20			cmp 	#' '
.d685	b685	f0 f8		beq $b67f			beq 	TOKCheckComment
.d687	b687	ca		dex				dex 								; first non space character
.d688	b688	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d68a	b68a	f0 1f		beq $b6ab			beq 	_TOKCCExit 					; then we are okay
.d68c	b68c	c9 00		cmp #$00			cmp 	#0 							; EOL
.d68e	b68e	f0 1b		beq $b6ab			beq 	_TOKCCExit 					; then we are okay
.d690	b690	da		phx				phx
.d691	b691					_TOKCCLowerCase:
.d691	b691	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d694	b694	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d696	b696	90 09		bcc $b6a1			bcc 	_TOKKCNotUC
.d698	b698	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d69a	b69a	b0 05		bcs $b6a1			bcs 	_TOKKCNotUC
.d69c	b69c	49 20		eor #$20			eor 	#$20
.d69e	b69e	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d6a1	b6a1					_TOKKCNotUC:
.d6a1	b6a1	e8		inx				inx
.d6a2	b6a2	c9 00		cmp #$00			cmp 	#0
.d6a4	b6a4	d0 eb		bne $b691			bne 	_TOKCCLowerCase
.d6a6	b6a6	fa		plx				plx
.d6a7	b6a7	ca		dex				dex 								; tokenise string expects initial skip.
.d6a8	b6a8	20 ac b6	jsr $b6ac			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d6ab	b6ab					_TOKCCExit:
.d6ab	b6ab	60		rts				rts
.d6ac	b6ac					TOKTokenString:
.d6ac	b6ac	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d6ae	b6ae	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d6b1	b6b1	e8		inx				inx									; start of quoted string.
.d6b2	b6b2	da		phx				phx 								; push start of string on top
.d6b3	b6b3	ca		dex				dex 								; because we pre-increment
.d6b4	b6b4					_TSFindEnd:
.d6b4	b6b4	e8		inx				inx
.d6b5	b6b5	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d6b8	b6b8	f0 04		beq $b6be			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d6ba	b6ba	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d6bc	b6bc	d0 f6		bne $b6b4			bne 	_TSFindEnd
.d6be	b6be					_TSEndOfString:
.d6be	b6be	7a		ply				ply  								; so now Y is first character, X is character after end.
.d6bf	b6bf	48		pha				pha 								; save terminating character
.d6c0	b6c0	20 c8 b6	jsr $b6c8			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d6c3	b6c3	68		pla				pla 								; terminating character
.d6c4	b6c4	f0 01		beq $b6c7			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d6c6	b6c6	e8		inx				inx
.d6c7	b6c7					_TSNotQuote:
.d6c7	b6c7	60		rts				rts
.d6c8	b6c8					TOKWriteBlockXY:
.d6c8	b6c8	86 36		stx $36				stx 	zTemp0 						; save end character
.d6ca	b6ca	98		tya				tya 								; use 2's complement to work out the byte size
.d6cb	b6cb	49 ff		eor #$ff			eor 	#$FF
.d6cd	b6cd	38		sec				sec
.d6ce	b6ce	65 36		adc $36				adc 	zTemp0
.d6d0	b6d0	1a		inc a				inc 	a 							; one extra for NULL
.d6d1	b6d1	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d6d4	b6d4					_TOBlockLoop:
.d6d4	b6d4	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d6d6	b6d6	f0 09		beq $b6e1			beq 	_TOBlockExit
.d6d8	b6d8	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d6db	b6db	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d6de	b6de	c8		iny				iny
.d6df	b6df	80 f3		bra $b6d4			bra 	_TOBlockLoop
.d6e1	b6e1					_TOBlockExit:
.d6e1	b6e1	a9 00		lda #$00			lda 	#0 							; add NULL.
.d6e3	b6e3	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d6e6	b6e6	60		rts				rts
.d6e7	b6e7					TOKHexConstant:
.d6e7	b6e7	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d6e9	b6e9	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d6ec	b6ec	e8		inx				inx									; start of quoted string.
.d6ed	b6ed	da		phx				phx 								; push start of constant on top
.d6ee	b6ee	ca		dex				dex
.d6ef	b6ef					_THFindLoop:
.d6ef	b6ef	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d6f0	b6f0	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d6f3	b6f3	c9 30		cmp #$30			cmp 	#"0"
.d6f5	b6f5	90 0c		bcc $b703			bcc 	_THFoundEnd
.d6f7	b6f7	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6f9	b6f9	90 f4		bcc $b6ef			bcc 	_THFindLoop
.d6fb	b6fb	c9 41		cmp #$41			cmp 	#"A"
.d6fd	b6fd	90 04		bcc $b703			bcc 	_THFoundEnd
.d6ff	b6ff	c9 47		cmp #$47			cmp 	#"F"+1
.d701	b701	90 ec		bcc $b6ef			bcc 	_THFindLoop
.d703	b703					_THFoundEnd:
.d703	b703	7a		ply				ply 								; restore start
.d704	b704	20 c8 b6	jsr $b6c8			jsr 	TOKWriteBlockXY 			; output the block
.d707	b707	60		rts				rts
.d708	b708					TOKCalculateHash:
.d708	b708	da		phx				phx
.d709	b709	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d70c	b70c	a9 00		lda #$00			lda 	#0
.d70e	b70e					_TCHLoop:
.d70e	b70e	18		clc				clc
.d70f	b70f	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d712	b712	e8		inx				inx
.d713	b713	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d716	b716	d0 f6		bne $b70e			bne 	_TCHLoop
.d718	b718	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d71b	b71b	fa		plx				plx
.d71c	b71c	60		rts				rts
.d71d	b71d					LCLFixLineBufferCase:
.d71d	b71d	a2 00		ldx #$00			ldx 	#0
.d71f	b71f					_FLBCLoop:
.d71f	b71f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d722	b722	f0 22		beq $b746			beq 	_FLBCExit 					; end of string.
.d724	b724	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d726	b726	f0 11		beq $b739			beq 	_FLBCInQuotes
.d728	b728	e8		inx				inx
.d729	b729	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d72b	b72b	90 f2		bcc $b71f			bcc 	_FLBCLoop
.d72d	b72d	c9 7b		cmp #$7b			cmp 	#'z'+1
.d72f	b72f	b0 ee		bcs $b71f			bcs 	_FLBCLoop
.d731	b731	38		sec				sec 								; make U/C
.d732	b732	e9 20		sbc #$20			sbc 	#32
.d734	b734	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d737	b737	80 e6		bra $b71f			bra 	_FLBCLoop
.d739	b739					_FLBCInQuotes:
.d739	b739	e8		inx				inx 								; advance
.d73a	b73a	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d73d	b73d	f0 07		beq $b746			beq 	_FLBCExit 					; exit on EOS
.d73f	b73f	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d741	b741	d0 f6		bne $b739			bne 	_FLBCInQuotes
.d743	b743	e8		inx				inx 								; skip over it
.d744	b744	80 d9		bra $b71f			bra 	_FLBCLoop
.d746	b746					_FLBCExit:
.d746	b746	60		rts				rts
.d747	b747					TOKExtractLineNumber:
.d747	b747	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d74a	b74a	48		pha				pha
.d74b	b74b	ad 27 04	lda $0427			lda 	tokenLineNumber
.d74e	b74e	48		pha				pha
.d74f	b74f	20 85 b7	jsr $b785			jsr 	_LCLNTimes2 				; line # x 2
.d752	b752	20 85 b7	jsr $b785			jsr 	_LCLNTimes2 				; line # x 4
.d755	b755	18		clc				clc 								; add stacked value
.d756	b756	68		pla				pla
.d757	b757	6d 27 04	adc $0427			adc 	tokenLineNumber
.d75a	b75a	8d 27 04	sta $0427			sta 	tokenLineNumber
.d75d	b75d	68		pla				pla
.d75e	b75e	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d761	b761	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d764	b764	20 85 b7	jsr $b785			jsr 	_LCLNTimes2 				; line # x 10
.d767	b767	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d76a	b76a	e8		inx				inx
.d76b	b76b	29 0f		and #$0f			and 	#15 						; add to line #
.d76d	b76d	18		clc				clc
.d76e	b76e	6d 27 04	adc $0427			adc 	tokenLineNumber
.d771	b771	8d 27 04	sta $0427			sta 	tokenLineNumber
.d774	b774	90 03		bcc $b779			bcc 	_TLENNoCarry
.d776	b776	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d779	b779					_TLENNoCarry:
.d779	b779	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d77c	b77c	c9 30		cmp #$30			cmp 	#'0'
.d77e	b77e	90 04		bcc $b784			bcc 	_TLENExit
.d780	b780	c9 3a		cmp #$3a			cmp 	#'9'+1
.d782	b782	90 c3		bcc $b747			bcc 	TOKExtractLineNumber
.d784	b784					_TLENExit:
.d784	b784	60		rts				rts
.d785	b785					_LCLNTimes2:
.d785	b785	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d788	b788	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d78b	b78b	60		rts				rts
.d78c	b78c					TOKWriteByte:
.d78c	b78c	da		phx				phx
.d78d	b78d	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d790	b790	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d793	b793	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d796	b796	fa		plx				plx
.d797	b797	60		rts				rts
.d798	b798					TOKCheckCreateVariableRecord:
.d798	b798	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d79a	b79a	85 36		sta $36				sta 	0+zTemp0
.d79c	b79c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d79e	b79e	85 37		sta $37				sta 	1+zTemp0
.d7a0	b7a0					_CCVSearch:
.d7a0	b7a0	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d7a2	b7a2	f0 2c		beq $b7d0			beq 	_CCVFail
.d7a4	b7a4	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d7a6	b7a6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d7a8	b7a8	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d7ab	b7ab	d0 16		bne $b7c3			bne 	_CCVNext
.d7ad	b7ad	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d7af	b7af	ae 00 04	ldx $0400			ldx 	identStart
.d7b2	b7b2					_CCVCompare:
.d7b2	b7b2	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d7b5	b7b5	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d7b7	b7b7	e8		inx				inx 								; advance pointers
.d7b8	b7b8	c8		iny				iny
.d7b9	b7b9	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d7ba	b7ba	d0 07		bne $b7c3			bne 	_CCVNext  					; didn't match go to next.
.d7bc	b7bc	90 f4		bcc $b7b2			bcc 	_CCVCompare 				; not finished yet.
.d7be	b7be	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d7c1	b7c1	f0 41		beq $b804			beq 	_CCVFound 					; yes, we were successful
.d7c3	b7c3					_CCVNext:
.d7c3	b7c3	18		clc				clc 								; go to next record.
.d7c4	b7c4	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d7c6	b7c6	65 36		adc $36				adc 	zTemp0
.d7c8	b7c8	85 36		sta $36				sta 	zTemp0
.d7ca	b7ca	90 d4		bcc $b7a0			bcc 	_CCVSearch
.d7cc	b7cc	e6 37		inc $37				inc 	zTemp0+1
.d7ce	b7ce	80 d0		bra $b7a0			bra 	_CCVSearch
.d7d0	b7d0					_CCVFail:
.d7d0	b7d0	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d7d2	b7d2	ad 03 04	lda $0403			lda 	identHash
.d7d5	b7d5	91 36		sta ($36),y			sta 	(zTemp0),y
.d7d7	b7d7	c8		iny				iny 								; offset 2 is the type byte
.d7d8	b7d8	ad 04 04	lda $0404			lda 	identTypeByte
.d7db	b7db	91 36		sta ($36),y			sta 	(zTemp0),y
.d7dd	b7dd	c8		iny				iny
.d7de	b7de					_CCVData:
.d7de	b7de	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d7e0	b7e0	91 36		sta ($36),y			sta 	(zTemp0),y
.d7e2	b7e2	c8		iny				iny
.d7e3	b7e3	c0 08		cpy #$08			cpy 	#8
.d7e5	b7e5	90 f7		bcc $b7de			bcc 	_CCVData
.d7e7	b7e7	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d7ea	b7ea					_CCVCopyName:
.d7ea	b7ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d7ed	b7ed	91 36		sta ($36),y			sta 	(zTemp0),y
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c8		iny				iny
.d7f1	b7f1	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d7f4	b7f4	d0 f4		bne $b7ea			bne 	_CCVCopyName
.d7f6	b7f6	98		tya				tya 								; patch offset
.d7f7	b7f7	92 36		sta ($36)			sta 	(zTemp0)
.d7f9	b7f9	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d7fb	b7fb	91 36		sta ($36),y			sta 	(zTemp0),y
.d7fd	b7fd	88		dey				dey
.d7fe	b7fe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d800	b800	09 80		ora #$80			ora 	#$80
.d802	b802	91 36		sta ($36),y			sta 	(zTemp0),y
.d804	b804					_CCVFound:
.d804	b804	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d806	b806	38		sec				sec
.d807	b807	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d809	b809	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d80b	b80b	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d80e	b80e	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d810	b810	20 8c b7	jsr $b78c			jsr 	TOKWriteByte
.d813	b813	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d814	b814					SNDCheckChannel:
.d814	b814	aa		tax				tax
.d815	b815	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d818	b818	d0 38		bne $b852			bne 	_SNDCCExit
.d81a	b81a	da		phx				phx 								; save current channel
.d81b	b81b	8a		txa				txa 								; put in A
.d81c	b81c	20 98 b8	jsr $b898			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d81f	b81f	68		pla				pla 								; channel # in A
.d820	b820	90 30		bcc $b852			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d822	b822	a8		tay				tay 								; Y is the channel #
.d823	b823	bd 8f 08	lda $088f,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d826	b826	99 8e 09	sta $098e,y			sta 	SNDPitchLow,y
.d829	b829	bd 90 08	lda $0890,x			lda 	SNDQueue+2,x
.d82c	b82c	99 92 09	sta $0992,y			sta 	SNDPitchHigh,y
.d82f	b82f	bd 91 08	lda $0891,x			lda 	SNDQueue+3,x
.d832	b832	99 96 09	sta $0996,y			sta 	SNDVolume,y
.d835	b835	bd 92 08	lda $0892,x			lda 	SNDQueue+4,x
.d838	b838	99 9a 09	sta $099a,y			sta 	SNDTimeLeft,y
.d83b	b83b	bd 93 08	lda $0893,x			lda 	SNDQueue+5,x
.d83e	b83e	99 9e 09	sta $099e,y			sta 	SNDAdjustLow,y
.d841	b841	bd 94 08	lda $0894,x			lda 	SNDQueue+6,x
.d844	b844	99 a2 09	sta $09a2,y			sta 	SNDAdjustHigh,y
.d847	b847	5a		phy				phy 								; save channel #
.d848	b848	20 b2 b8	jsr $b8b2			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d84b	b84b	ce 8d 08	dec $088d			dec 	SNDLength 					; reduce the queue length.
.d84e	b84e	68		pla				pla
.d84f	b84f	20 53 b8	jsr $b853			jsr 	SNDUpdateNote 				; update channel A
.d852	b852					_SNDCCExit:
.d852	b852	60		rts				rts
.d853	b853					SNDUpdateNote:
.d853	b853	aa		tax				tax 								; so we can access records
.d854	b854	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d855	b855	0a		asl a				asl 	a
.d856	b856	0a		asl a				asl 	a
.d857	b857	0a		asl a				asl 	a
.d858	b858	0a		asl a				asl 	a
.d859	b859	8d 8c 08	sta $088c			sta 	SNDChannelBits
.d85c	b85c	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; are we silent
.d85f	b85f	f0 2e		beq $b88f			beq 	_SNDUNIsSilent
.d861	b861	ad 8c 08	lda $088c			lda 	SNDChannelBits 				; push channel bits on stack
.d864	b864	48		pha				pha
.d865	b865	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d868	b868	29 0f		and #$0f			and 	#$0F
.d86a	b86a	0d 8c 08	ora $088c			ora 	SNDChannelBits 				; set channel bits
.d86d	b86d	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d86f	b86f	20 fc b8	jsr $b8fc			jsr 	SNDWritePorts
.d872	b872	bd 92 09	lda $0992,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d875	b875	8d 8c 08	sta $088c			sta 	SNDChannelBits
.d878	b878	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x
.d87b	b87b	4e 8c 08	lsr $088c			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d87e	b87e	6a		ror a				ror 	a
.d87f	b87f	4e 8c 08	lsr $088c			lsr 	SNDChannelBits
.d882	b882	6a		ror a				ror 	a
.d883	b883	4a		lsr a				lsr 	a 							; put in bits 0-5
.d884	b884	4a		lsr a				lsr 	a
.d885	b885	20 fc b8	jsr $b8fc			jsr 	SNDWritePorts 				; write as rest of pitch register
.d888	b888	68		pla				pla
.d889	b889	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d88b	b88b	20 fc b8	jsr $b8fc			jsr 	SNDWritePorts
.d88e	b88e	60		rts				rts
.d88f	b88f					_SNDUNIsSilent:
.d88f	b88f	ad 8c 08	lda $088c			lda 	SNDChannelBits 				; channel bits
.d892	b892	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d894	b894	20 fc b8	jsr $b8fc			jsr 	SNDWritePorts 				; write to the ports
.d897	b897	60		rts				rts
.d898	b898					SNDFindNextNoteForA:
.d898	b898	ac 8d 08	ldy $088d			ldy 	SNDLength 					; queue size into Y
.d89b	b89b	f0 13		beq $b8b0			beq 	_SNDFNNFail 				; queue empty.
.d89d	b89d	a2 00		ldx #$00			ldx 	#0
.d89f	b89f					_SNDFNNSearch:
.d89f	b89f	dd 8e 08	cmp $088e,x			cmp 	SNDQueue,x 					; does it match the channel
.d8a2	b8a2	38		sec				sec
.d8a3	b8a3	f0 0c		beq $b8b1			beq 	_SNDFNNExit 				; if so exit with CS.
.d8a5	b8a5	e8		inx				inx 								; next queue slot.
.d8a6	b8a6	e8		inx				inx
.d8a7	b8a7	e8		inx				inx
.d8a8	b8a8	e8		inx				inx
.d8a9	b8a9	e8		inx				inx
.d8aa	b8aa	e8		inx				inx
.d8ab	b8ab	e8		inx				inx
.d8ac	b8ac	e8		inx				inx
.d8ad	b8ad	88		dey				dey 								; done the whole queue
.d8ae	b8ae	d0 ef		bne $b89f			bne 	_SNDFNNSearch 				; no, go back.
.d8b0	b8b0					_SNDFNNFail:
.d8b0	b8b0	18		clc				clc
.d8b1	b8b1					_SNDFNNExit:
.d8b1	b8b1	60		rts				rts
.d8b2	b8b2					SNDDeleteXFromQueue:
.d8b2	b8b2	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d8b4	b8b4	f0 09		beq $b8bf			beq 	_SNDDXExit
.d8b6	b8b6	bd 96 08	lda $0896,x			lda 	SNDQueue+8,x
.d8b9	b8b9	9d 8e 08	sta $088e,x			sta 	SNDQueue,x
.d8bc	b8bc	e8		inx				inx
.d8bd	b8bd	80 f3		bra $b8b2			bra 	SNDDeleteXFromQueue
.d8bf	b8bf					_SNDDXExit:
.d8bf	b8bf	60		rts				rts
.088c						SNDChannelBits:
>088c								.fill 	1
.d8c0	b8c0					SNDQueueRequest:
.d8c0	b8c0	86 36		stx $36				stx 	zTemp0						; save queue address
.d8c2	b8c2	84 37		sty $37				sty 	zTemp0+1
.d8c4	b8c4	ae 8d 08	ldx $088d			ldx 	SNDLength 					; queue is full, can't take any more.
.d8c7	b8c7	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d8c9	b8c9	f0 21		beq $b8ec			beq 	_SNDQRExit
.d8cb	b8cb	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d8cd	b8cd	48		pha				pha
.d8ce	b8ce	8a		txa				txa  								; get offset in queue buffer/
.d8cf	b8cf	0a		asl a				asl 	a
.d8d0	b8d0	0a		asl a				asl 	a
.d8d1	b8d1	0a		asl a				asl 	a
.d8d2	b8d2	aa		tax				tax
.d8d3	b8d3	68		pla				pla 								; get back and push again
.d8d4	b8d4	48		pha				pha
.d8d5	b8d5	9d 8e 08	sta $088e,x			sta 	SNDQueue+0,x 				; save the channel #
.d8d8	b8d8	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d8da	b8da					_SNDQCopy:
.d8da	b8da	b1 36		lda ($36),y			lda 	(zTemp0),y
.d8dc	b8dc	e8		inx				inx
.d8dd	b8dd	c8		iny				iny
.d8de	b8de	9d 8e 08	sta $088e,x			sta 	SNDQueue,x
.d8e1	b8e1	c0 06		cpy #$06			cpy 	#6
.d8e3	b8e3	d0 f5		bne $b8da			bne 	_SNDQCopy
.d8e5	b8e5	ee 8d 08	inc $088d			inc 	SNDLength 					; bump queue length.
.d8e8	b8e8	68		pla				pla 								; get channel # back
.d8e9	b8e9	20 14 b8	jsr $b814			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d8ec	b8ec					_SNDQRExit:
.d8ec	b8ec	60		rts				rts
.d8ed	b8ed					SNDSilenceChannel:
.d8ed	b8ed	aa		tax				tax 								; zero time left.
.d8ee	b8ee	9e 9a 09	stz $099a,x			stz 	SNDTimeLeft,x
.d8f1	b8f1	0a		asl a				asl 	a 							; shift into position
.d8f2	b8f2	0a		asl a				asl 	a
.d8f3	b8f3	0a		asl a				asl 	a
.d8f4	b8f4	0a		asl a				asl 	a
.d8f5	b8f5	0a		asl a				asl 	a
.d8f6	b8f6	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d8f8	b8f8	20 fc b8	jsr $b8fc			jsr 	SNDWritePorts
.d8fb	b8fb	60		rts				rts
.d8fc	b8fc					SNDWritePorts:
.d8fc	b8fc	da		phx				phx 								; save X
.d8fd	b8fd	a6 01		ldx $01				ldx 	1 							; save I/O status
.d8ff	b8ff	64 01		stz $01				stz 	1 							; access I/O page 0
.d901	b901	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d904	b904	8d 10 d6	sta $d610			sta 	$D610
.d907	b907	86 01		stx $01				stx 	1 							; restore I/O
.d909	b909	fa		plx				plx 								; restore X
.d90a	b90a	60		rts				rts
.d90b	b90b					Export_SNDCommand:
.d90b	b90b	da		phx				phx 								; save XY
.d90c	b90c	5a		phy				phy
.d90d	b90d	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d90f	b90f	f0 1d		beq $b92e			beq 	_SNDInitialise
.d911	b911	90 28		bcc $b93b			bcc 	_SNDExit
.d913	b913	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d915	b915	f0 17		beq $b92e			beq 	_SNDSilence
.d917	b917	b0 22		bcs $b93b			bcs 	_SNDExit
.d919	b919	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d91b	b91b	b0 09		bcs $b926			bcs 	_SNDQueryPlay
.d91d	b91d	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d91f	b91f	b0 1a		bcs $b93b			bcs 	_SNDExit
.d921	b921	20 c0 b8	jsr $b8c0			jsr 	SNDQueueRequest
.d924	b924	80 15		bra $b93b			bra 	_SNDExit
.d926	b926					_SNDQueryPlay:
.d926	b926	29 03		and #$03			and 	#3 							; get channel #
.d928	b928	aa		tax				tax
.d929	b929	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d92c	b92c	80 0d		bra $b93b			bra 	_SNDExit
.d92e	b92e					_SNDInitialise:
.d92e	b92e					_SNDSilence:
.d92e	b92e	9c 8d 08	stz $088d			stz 	SNDLength 					; empty the queue.
.d931	b931	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d933	b933					_SNDSilenceLoop:
.d933	b933	48		pha				pha
.d934	b934	20 ed b8	jsr $b8ed			jsr 	SNDSilenceChannel
.d937	b937	68		pla				pla
.d938	b938	3a		dec a				dec 	a
.d939	b939	10 f8		bpl $b933			bpl 	_SNDSilenceLoop
.d93b	b93b					_SNDExit:
.d93b	b93b	7a		ply				ply
.d93c	b93c	fa		plx				plx
.d93d	b93d	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.088d						SNDLength:
>088d								.fill 	1
.088e						SNDQueue:
>088e								.fill 	SNDQueueSize * 8
.098e						SNDPitchLow:
>098e								.fill 	4
.0992						SNDPitchHigh:
>0992								.fill 	4
.0996						SNDVolume:
>0996								.fill 	4
.099a						SNDTimeLeft:
>099a								.fill 	4
.099e						SNDAdjustLow:
>099e								.fill 	4
.09a2						SNDAdjustHigh:
>09a2								.fill 	4
.d93e	b93e					Export_SNDUpdate:
.d93e	b93e					PagedSNDUpdate:
.d93e	b93e	ad 9a 09	lda $099a			lda 	SNDTimeLeft+0 				; look at time remaining
.d941	b941	f0 05		beq $b948			beq 	_SNDUNot0 					; not playing
.d943	b943	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d945	b945	20 67 b9	jsr $b967			jsr 	SNDUpdateChannel 			; update it.
.d948	b948					_SNDUNot0:
.d948	b948	ad 9b 09	lda $099b			lda 	SNDTimeLeft+1
.d94b	b94b	f0 05		beq $b952			beq 	_SNDUNot1
.d94d	b94d	a2 01		ldx #$01			ldx 	#1
.d94f	b94f	20 67 b9	jsr $b967			jsr 	SNDUpdateChannel
.d952	b952					_SNDUNot1:
.d952	b952	ad 9c 09	lda $099c			lda 	SNDTimeLeft+2
.d955	b955	f0 05		beq $b95c			beq 	_SNDUNot2
.d957	b957	a2 02		ldx #$02			ldx 	#2
.d959	b959	20 67 b9	jsr $b967			jsr 	SNDUpdateChannel
.d95c	b95c					_SNDUNot2:
.d95c	b95c	ad 9d 09	lda $099d			lda 	SNDTimeLeft+3
.d95f	b95f	f0 05		beq $b966			beq 	_SNDUNot3
.d961	b961	a2 03		ldx #$03			ldx 	#3
.d963	b963	20 67 b9	jsr $b967			jsr 	SNDUpdateChannel
.d966	b966					_SNDUNot3:
.d966	b966	60		rts				rts
.d967	b967					SNDUpdateChannel:
.d967	b967	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d969	b969	f0 2c		beq $b997			beq 	_SNDUCExit
.d96b	b96b	3a		dec a				dec 	a 							; decrement and update timer
.d96c	b96c	9d 9a 09	sta $099a,x			sta 	SNDTimeLeft,x
.d96f	b96f	f0 1d		beq $b98e			beq 	_SNDUCUpdate 				; if zero, silence channel
.d971	b971	bd 9e 09	lda $099e,x			lda 	SNDAdjustLow,x 				; adjust ?
.d974	b974	1d a2 09	ora $09a2,x			ora 	SNDAdjustHigh,x
.d977	b977	f0 1e		beq $b997			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d979	b979	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d97a	b97a	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x
.d97d	b97d	7d 9e 09	adc $099e,x			adc 	SNDAdjustLow,x
.d980	b980	9d 8e 09	sta $098e,x			sta 	SNDPitchLow,x
.d983	b983	bd 92 09	lda $0992,x			lda 	SNDPitchHigh,x
.d986	b986	7d a2 09	adc $09a2,x			adc 	SNDAdjustHigh,x
.d989	b989	29 03		and #$03			and 	#3
.d98b	b98b	9d 92 09	sta $0992,x			sta 	SNDPitchHigh,x
.d98e	b98e					_SNDUCUpdate:
.d98e	b98e	8a		txa				txa 								; which channel.
.d98f	b98f	48		pha				pha
.d990	b990	20 53 b8	jsr $b853			jsr 	SNDUpdateNote 				; update the current note
.d993	b993	68		pla				pla
.d994	b994	20 14 b8	jsr $b814			jsr 	SNDCheckChannel 			; more to do ?
.d997	b997					_SNDUCExit:
.d997	b997	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
