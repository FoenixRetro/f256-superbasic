
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Nov 11 12:00:54 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 f1 b6	jsr $b6f1			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.8014	20 17 94	jsr $9417			jsr 	NewCommand 					; erase current program
.8017	20 42 a8	jsr $a842			jsr 	BackloadProgram
.801a	4c d6 95	jmp $95d6			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>8065	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.8085					GRVectorTable:
>8085	d4 82					.word	GXInitialise             ; $00 Initialise
>8087	ee 82					.word	GXControlBitmap          ; $01 BitmapCtl
>8089	36 83					.word	GXControlSprite          ; $02 SpriteCtl
>808b	86 82					.word	GXClearBitmap            ; $03 Clear
>808d	c5 84					.word	GXSetColourMode          ; $04 Colour
>808f	8d 86					.word	GXFontHandler            ; $05 DrawFont
>8091	d5 86					.word	GXSpriteHandler          ; $06 DrawSprite
>8093	41 87					.word	GXSelect                 ; $07 SpriteUse
>8095	6a 87					.word	GXSelectImage            ; $08 SpriteImage
>8097	f1 88					.word	GXCollide                ; $09 SpriteCollide
>8099	38 81					.word	GRUndefined              ; $0a
>809b	38 81					.word	GRUndefined              ; $0b
>809d	38 81					.word	GRUndefined              ; $0c
>809f	38 81					.word	GRUndefined              ; $0d
>80a1	38 81					.word	GRUndefined              ; $0e
>80a3	38 81					.word	GRUndefined              ; $0f
>80a5	38 81					.word	GRUndefined              ; $10
>80a7	38 81					.word	GRUndefined              ; $11
>80a9	38 81					.word	GRUndefined              ; $12
>80ab	38 81					.word	GRUndefined              ; $13
>80ad	38 81					.word	GRUndefined              ; $14
>80af	38 81					.word	GRUndefined              ; $15
>80b1	38 81					.word	GRUndefined              ; $16
>80b3	38 81					.word	GRUndefined              ; $17
>80b5	38 81					.word	GRUndefined              ; $18
>80b7	38 81					.word	GRUndefined              ; $19
>80b9	38 81					.word	GRUndefined              ; $1a
>80bb	38 81					.word	GRUndefined              ; $1b
>80bd	38 81					.word	GRUndefined              ; $1c
>80bf	38 81					.word	GRUndefined              ; $1d
>80c1	38 81					.word	GRUndefined              ; $1e
>80c3	38 81					.word	GRUndefined              ; $1f
>80c5	36 81					.word	GXMove                   ; $20 Move
>80c7	93 83					.word	GXLine                   ; $21 Line
>80c9	0e 85					.word	GXFrameRectangle         ; $22 FrameRect
>80cb	0b 85					.word	GXFillRectangle          ; $23 FillRect
>80cd	3d 81					.word	GXFrameCircle            ; $24 FrameCircle
>80cf	39 81					.word	GXFillCircle             ; $25 FillCircle
>80d1	38 81					.word	GRUndefined              ; $26
>80d3	38 81					.word	GRUndefined              ; $27
>80d5	f3 84					.word	GXPlotPoint              ; $28 Plot
>80d7	00 88					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSpriteID:
>0645							.fill 	1
.0646					GSCurrentSpriteAddr:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2
.064a					GXSpriteLow:
>064a							.fill 	64
.068a					GXSpriteHigh:
>068a							.fill 	64
.80d9					GXGraphicDraw:
.80d9	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.80db	b0 06		bcs $80e3			bcs 	_GDCoordinate
.80dd	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.80df	84 37		sty $37				sty 	gxzTemp0+1
.80e1	80 4b		bra $812e			bra 	_GDExecuteA 				; and execute
.80e3					_GDCoordinate:
.80e3	48		pha				pha 								; save AXY
.80e4	da		phx				phx
.80e5	5a		phy				phy
.80e6	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.80e8					_GDCopy1:
.80e8	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80eb	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.80ee	ca		dex				dex
.80ef	10 f7		bpl $80e8			bpl 	_GDCopy1
.80f1	68		pla				pla 								; update Y
.80f2	8d 2c 06	sta $062c			sta 	gxCurrentY
.80f5	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80f8	68		pla				pla
.80f9	8d 2a 06	sta $062a			sta 	gxCurrentX
.80fc	68		pla				pla 								; get A (command+X.1) back
.80fd	48		pha				pha
.80fe	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8100	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.8103	68		pla				pla 								; get command back
.8104	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.8106	48		pha				pha 								; push back.
.8107	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.8109	f0 17		beq $8122			beq 	_GDCopyToWorkArea
.810b	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.810e	f0 07		beq $8117			beq 	_GDCheckY
.8110	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.8113	c9 40		cmp #$40			cmp 	#64
.8115	b0 08		bcs $811f			bcs 	_GDError1
.8117					_GDCheckY:
.8117	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.811a	cd 3e 06	cmp $063e			cmp 	gxHeight
.811d	90 03		bcc $8122			bcc 	_GDCopyToWorkArea
.811f					_GDError1:
.811f	68		pla				pla
.8120					_GDError2:
.8120	38		sec				sec
.8121	60		rts				rts
.8122					_GDCopyToWorkArea:
.8122	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.8124					_GDCopy2:
.8124	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8127	9d 32 06	sta $0632,x			sta 	gxX0,x
.812a	ca		dex				dex
.812b	10 f7		bpl $8124			bpl 	_GDCopy2
.812d	68		pla				pla 								; get command
.812e					_GDExecuteA:
.812e	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.8130	b0 ee		bcs $8120			bcs 	_GDError2
.8132	aa		tax				tax
.8133	7c 85 80	jmp ($8085,x)			jmp 	(GRVectorTable,x)
.8136					GXMove:
.8136	18		clc				clc
.8137	60		rts				rts
.8138					GRUndefined:
>8138	db						.byte 	$DB 						; causes a break in the emulator
.8139					GXFillCircle:
.8139	a9 ff		lda #$ff			lda 	#255
.813b	80 02		bra $813f			bra 	GXCircle
.813d					GXFrameCircle:
.813d	a9 00		lda #$00			lda 	#0
.813f					GXCircle:
.813f	8d cd 06	sta $06cd			sta 	gxIsFillMode					; save Fill flag
.8142	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8145	f0 26		beq $816d			beq 	_GXCFail
.8147	20 98 89	jsr $8998			jsr 	GXSortXY 					; topleft/bottomright
.814a	20 70 88	jsr $8870			jsr 	GXOpenBitmap 				; start drawing
.814d	20 3f 82	jsr $823f			jsr 	GXCircleSetup 				; set up for drawing
.8150	9c ce 06	stz $06ce			stz 	gxYChanged
.8153					_GXCircleDraw:
.8153	ad cb 06	lda $06cb			lda 	gXCentre					; while x <= y
.8156	cd cc 06	cmp $06cc			cmp 	gYCentre
.8159	90 0a		bcc $8165			bcc 	_GXCircleContinue
.815b	d0 03		bne $8160			bne 	_GXNoLast
.815d	20 72 81	jsr $8172			jsr 	GXPlot1
.8160					_GXNoLast:
.8160	20 78 88	jsr $8878			jsr 	GXCloseBitmap 				; close the bitmap
.8163	18		clc				clc
.8164	60		rts				rts
.8165					_GXCircleContinue:
.8165	20 6f 81	jsr $816f			jsr 	GXPlot2 					; draw it
.8168	20 ec 81	jsr $81ec			jsr 	GXCircleMove 				; adjust the coordinates
.816b	80 e6		bra $8153			bra 	_GXCircleDraw
.816d					_GXCFail:
.816d	38		sec				sec
.816e	60		rts				rts
.816f					GXPlot2:
.816f	20 72 81	jsr $8172			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8172					GXPlot1:
.8172	ad cc 06	lda $06cc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8175	f0 03		beq $817a			beq 	_GXPlot1Only
.8177	20 96 81	jsr $8196			jsr 	GXPlot0 						; plot and negate
.817a					_GXPlot1Only:
.817a	20 96 81	jsr $8196			jsr 	GXPlot0 						; twice, undoing negation
.817d	ad cb 06	lda $06cb			lda 	gXCentre 						; swap X and Y
.8180	ae cc 06	ldx $06cc			ldx	 	gYCentre
.8183	8d cc 06	sta $06cc			sta 	gYCentre
.8186	8e cb 06	stx $06cb			stx 	gXCentre
.8189	ad ce 06	lda $06ce			lda 	gxYChanged 						; toggle Y Changed flag
.818c	a9 ff		lda #$ff			lda 	#$FF
.818e	8d ce 06	sta $06ce			sta 	gxYChanged
.8191	60		rts				rts
.8192	20 96 81	jsr $8196			jsr 	GXPlot0 						; do once
.8195	60		rts				rts
.8196	ad cd 06	lda $06cd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8199	f0 05		beq $81a0			beq 	_GXPlot0Always
.819b	ad ce 06	lda $06ce			lda 	gxYChanged						; fill mode, only draw if changed.
.819e	f0 2d		beq $81cd			beq 	GXPlot0Exit
.81a0					_GXPlot0Always:
.81a0	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.81a2	ad cc 06	lda $06cc			lda 	gYCentre
.81a5	20 ce 81	jsr $81ce			jsr 	GXSubCopy
.81a8	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.81aa	ad cb 06	lda $06cb			lda 	gXCentre
.81ad	20 ce 81	jsr $81ce			jsr 	GXSubCopy
.81b0	48		pha				pha 									; save last offset X
.81b1	20 80 88	jsr $8880			jsr 	GXPositionCalc 					; calculate position/offset.
.81b4	68		pla				pla
.81b5	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.81b6	85 36		sta $36				sta 	gxzTemp0
.81b8	64 37		stz $37				stz 	gxzTemp0+1
.81ba	26 37		rol $37				rol 	gxzTemp0+1
.81bc	ad cd 06	lda $06cd			lda 	gxIsFillMode
.81bf	69 80		adc #$80			adc 	#128
.81c1	20 5e 85	jsr $855e			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81c4	38		sec				sec 									; GY = -GY
.81c5	a9 00		lda #$00			lda 	#0
.81c7	ed cc 06	sbc $06cc			sbc 	gYCentre
.81ca	8d cc 06	sta $06cc			sta 	gYCentre
.81cd					GXPlot0Exit:
.81cd	60		rts				rts
.81ce					GXSubCopy:
.81ce	85 36		sta $36				sta 	gxzTemp0
.81d0	64 37		stz $37				stz 	gxzTemp0+1
.81d2	29 80		and #$80			and 	#$80
.81d4	f0 02		beq $81d8			beq 	_GXNoSx
.81d6	c6 37		dec $37				dec 	gxzTemp0+1
.81d8					_GXNoSx:
.81d8	38		sec				sec
.81d9	bd 36 06	lda $0636,x			lda 	gXX1,x
.81dc	e5 36		sbc $36				sbc 	gxzTemp0
.81de	9d 32 06	sta $0632,x			sta 	gXX0,x
.81e1	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81e4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81e6	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81e9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81eb	60		rts				rts
.81ec					GXCircleMove:
.81ec	9c ce 06	stz $06ce			stz 	gxYChanged 					; clear Y changed flag
.81ef	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81f1	10 0d		bpl $8200			bpl 	_GXEMPositive
.81f3	ee cb 06	inc $06cb			inc 	gXCentre 					; X++
.81f6	ad cb 06	lda $06cb			lda 	gXCentre
.81f9	20 1f 82	jsr $821f			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81fc	a9 06		lda #$06			lda 	#6  						; and add 6
.81fe	80 15		bra $8215			bra 	_GXEMAddD
.8200					_GXEMPositive:
.8200	ee cb 06	inc $06cb			inc 	gXCentre					; X++
.8203	ce cc 06	dec $06cc			dec 	gyCentre 					; Y--
.8206	38		sec				sec 								; calculate X-Y
.8207	ad cb 06	lda $06cb			lda 	gXCentre
.820a	ed cc 06	sbc $06cc			sbc 	gYCentre
.820d	20 1f 82	jsr $821f			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8210	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8212	ce ce 06	dec $06ce			dec 	gxYChanged
.8215					_GXEMAddD:
.8215	18		clc				clc
.8216	65 38		adc $38				adc 	gxzTemp1
.8218	85 38		sta $38				sta 	gxzTemp1
.821a	90 02		bcc $821e			bcc 	_GXEMNoCarry
.821c	e6 39		inc $39				inc 	gxzTemp1+1
.821e					_GXEMNoCarry:
.821e	60		rts				rts
.821f					_GXAdd4TimesToD:
.821f	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8221	29 80		and #$80			and 	#$80
.8223	f0 02		beq $8227			beq 	_GXA4Unsigned
.8225	a9 ff		lda #$ff			lda 	#$FF
.8227					_GXA4Unsigned:
.8227	85 37		sta $37				sta 	gxzTemp0+1
.8229	06 36		asl $36				asl 	gxzTemp0  					; x 4
.822b	26 37		rol $37				rol 	gxzTemp0+1
.822d	06 36		asl $36				asl 	gxzTemp0
.822f	26 37		rol $37				rol 	gxzTemp0+1
.8231	18		clc				clc 								; add
.8232	a5 36		lda $36				lda		gxzTemp0
.8234	65 38		adc $38				adc 	gxzTemp1
.8236	85 38		sta $38				sta 	gxzTemp1
.8238	a5 37		lda $37				lda		gxzTemp0+1
.823a	65 39		adc $39				adc 	gxzTemp1+1
.823c	85 39		sta $39				sta 	gxzTemp1+1
.823e	60		rts				rts
.823f					GXCircleSetup:
.823f	38		sec				sec
.8240	ad 38 06	lda $0638			lda 	gxY1
.8243	ed 34 06	sbc $0634			sbc 	gxY0
.8246	4a		lsr a				lsr 	a
.8247	8d ca 06	sta $06ca			sta 	gxRadius
.824a	a2 00		ldx #$00			ldx 	#0
.824c	20 6e 82	jsr $826e			jsr 	_GXCalculateCentre
.824f	a2 02		ldx #$02			ldx 	#2
.8251	20 6e 82	jsr $826e			jsr 	_GXCalculateCentre
.8254	9c cb 06	stz $06cb			stz 	gXCentre
.8257	ad ca 06	lda $06ca			lda 	gxRadius
.825a	8d cc 06	sta $06cc			sta 	gYCentre
.825d	0a		asl a				asl 	a 							; R x 2
.825e	85 36		sta $36				sta 	gxzTemp0
.8260	38		sec				sec
.8261	a9 03		lda #$03			lda 	#3
.8263	e5 36		sbc $36				sbc 	gxzTemp0
.8265	85 38		sta $38				sta 	gxzTemp1
.8267	a9 00		lda #$00			lda 	#0
.8269	e9 00		sbc #$00			sbc 	#0
.826b	85 39		sta $39				sta 	gxzTemp1+1
.826d	60		rts				rts
.826e					_GXCalculateCentre:
.826e	38		sec				sec
.826f	bd 36 06	lda $0636,x			lda 	gxX1,x
.8272	7d 32 06	adc $0632,x			adc 	gXX0,x
.8275	9d 36 06	sta $0636,x			sta 	gXX1,x
.8278	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.827b	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.827e	4a		lsr a				lsr 	a
.827f	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8282	7e 36 06	ror $0636,x			ror 	gXX1,x
.8285	60		rts				rts
.06ca					gxRadius:
>06ca							.fill 	1
.06cb					gXCentre:
>06cb							.fill 	1
.06cc					gYCentre:
>06cc							.fill 	1
.06cd					gxIsFillMode:
>06cd							.fill 	1
.06ce					gxYChanged:
>06ce							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8286					GXClearBitmap:
.8286	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.8289	f0 24		beq $82af			beq 	_GXCBFail
.828b	20 70 88	jsr $8870			jsr 	GXOpenBitmap 				; start access
.828e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8290	ad 3e 06	lda $063e			lda 	gxHeight
.8293	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8295	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8297					_GXCalcLastPage:
.8297	98		tya				tya 								; add to base page
.8298	18		clc				clc
.8299	6d 3c 06	adc $063c			adc 	gxBasePage
.829c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.829e					_GXClearAll:
.829e	20 b1 82	jsr $82b1			jsr 	_GXClearBlock 				; clear 8k block
.82a1	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.82a3	a5 0b		lda $0b				lda 	GXEditSlot
.82a5	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.82a8	b0 f4		bcs $829e			bcs 	_GXClearAll
.82aa	20 78 88	jsr $8878			jsr 	GXCloseBitmap	 			; stop access
.82ad	18		clc				clc
.82ae	60		rts				rts
.82af					_GXCBFail:
.82af	38		sec				sec
.82b0	60		rts				rts
.82b1					_GXClearBlock:
.82b1	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.82b3	85 38		sta $38				sta 	0+gxzTemp1
.82b5	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.82b7	85 39		sta $39				sta 	1+gxzTemp1
.82b9					_GXCB0:
.82b9	a5 36		lda $36				lda 	gxzTemp0
.82bb	a0 00		ldy #$00			ldy 	#0
.82bd					_GXCB1:
.82bd	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82bf	c8		iny				iny
.82c0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82c2	c8		iny				iny
.82c3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82c5	c8		iny				iny
.82c6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82c8	c8		iny				iny
.82c9	d0 f2		bne $82bd			bne 	_GXCB1
.82cb	e6 39		inc $39				inc 	gxzTemp1+1
.82cd	a5 39		lda $39				lda 	gxzTemp1+1
.82cf	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82d1	d0 e6		bne $82b9			bne 	_GXCB0
.82d3	60		rts				rts
.82d4					GXInitialise:
.82d4	64 01		stz $01				stz 	1
.82d6	a9 01		lda #$01			lda 	#1
.82d8	8d 00 d0	sta $d000			sta 	$D000
.82db	18		clc				clc
.82dc	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82df	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82e2	a2 0f		ldx #$0f			ldx 	#15
.82e4					_GXIClear:
.82e4	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82e7	ca		dex				dex
.82e8	10 fa		bpl $82e4			bpl 	_GXIClear
.82ea	20 85 83	jsr $8385			jsr 	GXClearSpriteStore
.82ed	60		rts				rts
.82ee					GXControlBitmap:
.82ee	64 01		stz $01				stz 	1
.82f0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82f2	29 01		and #$01			and 	#1 							; set bitmap flag
.82f4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82f7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82f8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82fb	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82fd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82ff	90 02		bcc $8303			bcc 	_CBNotOn
.8301	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.8303					_CBNotOn:
.8303	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8306	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.8308	29 07		and #$07			and 	#7
.830a	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.830d	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.830f	d0 02		bne $8313			bne 	_CBNotDefault
.8311	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.8313					_CBNotDefault:
.8313	8d 3c 06	sta $063c			sta 	gxBasePage
.8316	20 77 83	jsr $8377			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8319	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.831b	8d 03 d1	sta $d103			sta 	$D103
.831e	a5 36		lda $36				lda 	gxzTemp0
.8320	8d 02 d1	sta $d102			sta 	$D102
.8323	9c 01 d1	stz $d101			stz 	$D101
.8326	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8328	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.832b	29 01		and #$01			and 	#1
.832d	f0 02		beq $8331			beq 	_CBHaveHeight
.832f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8331					_CBHaveHeight
.8331	8e 3e 06	stx $063e			stx 	gxHeight
.8334	18		clc				clc
.8335	60		rts				rts
.8336					GXControlSprite:
.8336	64 01		stz $01				stz 	1
.8338	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.833a	29 01		and #$01			and 	#1 							; set sprites flag
.833c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.833f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8340	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8343	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8345	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8347	90 02		bcc $834b			bcc 	_CSNotOn
.8349	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.834b					_CSNotOn:
.834b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.834e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8350	d0 02		bne $8354			bne 	_CSNotDefault
.8352	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8354					_CSNotDefault:
.8354	8d 3d 06	sta $063d			sta 	gxSpritePage
.8357	20 77 83	jsr $8377			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.835a	a5 36		lda $36				lda 	zTemp0
.835c	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.835f	a5 37		lda $37				lda 	zTemp0+1
.8361	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8364	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8366					_CSClear:
.8366	9e 00 d9	stz $d900,x			stz 	$D900,x
.8369	9e 00 da	stz $da00,x			stz 	$DA00,x
.836c	ca		dex				dex
.836d	d0 f7		bne $8366			bne 	_CSClear
.836f	9c 47 06	stz $0647			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8372	20 85 83	jsr $8385			jsr 	GXClearSpriteStore
.8375	18		clc				clc
.8376	60		rts				rts
.8377					GXCalculateBaseAddress:
.8377	85 36		sta $36				sta 	gxzTemp0
.8379	64 37		stz $37				stz 	gxzTemp0+1
.837b	a9 05		lda #$05			lda 	#5
.837d					_GXShift:
.837d	06 36		asl $36				asl 	gxzTemp0
.837f	26 37		rol $37				rol 	gxzTemp0+1
.8381	3a		dec a				dec		a
.8382	d0 f9		bne $837d			bne 	_GXShift
.8384	60		rts				rts
.8385					GXClearSpriteStore:
.8385	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8387					_GXCSSLoop:
.8387	9e 8a 06	stz $068a,x			stz 	GXSpriteHigh,x
.838a	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.838c	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.838f	ca		dex				dex
.8390	10 f5		bpl $8387			bpl 	_GXCSSLoop
.8392	60		rts				rts
.8393					GXLine:
.8393	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8396	f0 28		beq $83c0			beq 	_GXLFail
.8398	20 70 88	jsr $8870			jsr 	GXOpenBitmap
.839b	20 b6 89	jsr $89b6			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.839e	20 66 84	jsr $8466			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.83a1	20 80 88	jsr $8880			jsr 	GXPositionCalc 				; calculate position/offset.
.83a4					_GXDrawLoop:
.83a4	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.83a7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.83a9	2d 42 06	and $0642			and 	gxANDValue
.83ac	4d 41 06	eor $0641			eor 	gxEORValue
.83af	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.83b1	20 c2 83	jsr $83c2			jsr 	GXLineIsComplete 			; is the line complete ?
.83b4	f0 05		beq $83bb			beq 	_GXLExit
.83b6	20 dd 83	jsr $83dd			jsr 	GXLineAdvance 				; code as per advance method
.83b9	80 e9		bra $83a4			bra 	_GXDrawLoop
.83bb					_GXLExit:
.83bb	20 78 88	jsr $8878			jsr 	GXCloseBitmap
.83be	18		clc				clc
.83bf	60		rts				rts
.83c0					_GXLFail:
.83c0	38		sec				sec
.83c1	60		rts				rts
.83c2					GXLineIsComplete:
.83c2	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger 			; is dy larger
.83c5	d0 0f		bne $83d6			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83c7	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ca	4d 36 06	eor $0636			eor 	GXX1
.83cd	d0 06		bne $83d5			bne 	_GXLICExit
.83cf	ad 33 06	lda $0633			lda 	GXX0+1
.83d2	4d 37 06	eor $0637			eor 	GXX1+1
.83d5					_GXLICExit:
.83d5	60		rts				rts
.83d6					_GXLICCompareY:
.83d6	ad 38 06	lda $0638			lda 	GXY1
.83d9	4d 34 06	eor $0634			eor 	GXY0
.83dc	60		rts				rts
.83dd					GXLineAdvance:
.83dd	18		clc				clc 								; add adjust to position
.83de	ad d3 06	lda $06d3			lda 	GXPosition
.83e1	6d d4 06	adc $06d4			adc 	GXAdjust
.83e4	8d d3 06	sta $06d3			sta 	GXPosition
.83e7	9c d6 06	stz $06d6			stz 	GXAddSelect 				; clear add select flag
.83ea	b0 05		bcs $83f1			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83ec	cd d5 06	cmp $06d5			cmp 	GXTotal 					; if exceeded total
.83ef	90 0a		bcc $83fb			bcc 	_GXLANoExtra
.83f1					_GXLAOverflow:
.83f1	ce d6 06	dec $06d6			dec 	GXAddSelect 				; set addselect to $FF
.83f4	38		sec				sec 								; subtract total and write back
.83f5	ed d5 06	sbc $06d5			sbc 	GXTotal
.83f8	8d d3 06	sta $06d3			sta 	GXPosition
.83fb					_GXLANoExtra:
.83fb	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger
.83fe	f0 0d		beq $840d			beq 	_GXDXLarger
.8400	20 5f 84	jsr $845f			jsr 	GXIncrementY
.8403	ad d6 06	lda $06d6			lda 	GXAddSelect
.8406	f0 10		beq $8418			beq 	_GXLAExit
.8408	20 19 84	jsr $8419			jsr 	GXAdjustX
.840b	80 0b		bra $8418			bra 	_GXLAExit
.840d					_GXDXLarger:
.840d	20 19 84	jsr $8419			jsr 	GXAdjustX
.8410	ad d6 06	lda $06d6			lda 	GXAddSelect
.8413	f0 03		beq $8418			beq 	_GXLAExit
.8415	20 5f 84	jsr $845f			jsr 	GXIncrementY
.8418					_GXLAExit:
.8418	60		rts				rts
.8419					GXAdjustX:
.8419	ad d2 06	lda $06d2			lda 	GXDXNegative
.841c	10 25		bpl $8443			bpl 	_GXAXRight
.841e	ad 32 06	lda $0632			lda 	GXX0
.8421	d0 03		bne $8426			bne 	_GXAXNoBorrow
.8423	ce 33 06	dec $0633			dec 	GXX0+1
.8426					_GXAXNoBorrow:
.8426	ce 32 06	dec $0632			dec 	GXX0
.8429	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.842c	ad 44 06	lda $0644			lda 	gsOffset
.842f	c9 ff		cmp #$ff			cmp 	#$FF
.8431	d0 0f		bne $8442			bne 	_GXAYExit 					; underflow
.8433	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8435	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8437	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8439	b0 07		bcs $8442			bcs 	_GXAYExit
.843b	18		clc				clc
.843c	69 20		adc #$20			adc 	#$20 						; fix up
.843e	85 3d		sta $3d				sta 	gxzScreen+1
.8440	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8442					_GXAYExit:
.8442	60		rts				rts
.8443					_GXAXRight:
.8443	ee 32 06	inc $0632			inc 	GXX0
.8446	d0 03		bne $844b			bne 	_GXAXNoCarry
.8448	ee 33 06	inc $0633			inc 	GXX0+1
.844b					_GXAXNoCarry:
.844b	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.844e	d0 0e		bne $845e			bne 	_GXAXExit 					; if not overflowed, exit.
.8450	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8452	a5 3d		lda $3d				lda 	gxzScreen+1
.8454	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8456	90 06		bcc $845e			bcc 	_GXAXExit
.8458	e9 20		sbc #$20			sbc 	#$20 						; fix up
.845a	85 3d		sta $3d				sta 	gxzScreen+1
.845c	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.845e					_GXAXExit:
.845e	60		rts				rts
.845f					GXIncrementY:
.845f	ee 34 06	inc $0634			inc 	GXY0
.8462	20 d6 88	jsr $88d6			jsr 	GXMovePositionDown
.8465	60		rts				rts
.8466					GXLineSetup:
.8466	ad 38 06	lda $0638			lda 	GXY1
.8469	38		sec				sec
.846a	ed 34 06	sbc $0634			sbc 	GXY0
.846d	4a		lsr a				lsr 	a
.846e	8d d0 06	sta $06d0			sta 	GXDiffY
.8471	9c d2 06	stz $06d2			stz 	GXDXNegative 				; clear -ve flag
.8474	38		sec				sec
.8475	ad 36 06	lda $0636			lda 	GXX1
.8478	ed 32 06	sbc $0632			sbc 	GXX0
.847b	8d cf 06	sta $06cf			sta 	GXDiffX
.847e	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8481	ed 33 06	sbc $0633			sbc 	GXX0+1
.8484	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8485	6e cf 06	ror $06cf			ror 	GXDiffX
.8488	0a		asl a				asl 	a
.8489	10 0c		bpl $8497			bpl 	_GDXNotNegative
.848b	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.848d	38		sec				sec
.848e	ed cf 06	sbc $06cf			sbc 	GXDiffX
.8491	8d cf 06	sta $06cf			sta 	GXDiffX
.8494	ce d2 06	dec $06d2			dec 	GXDXNegative 				; -ve flag = $FF.
.8497					_GDXNotNegative:
.8497	9c d1 06	stz $06d1			stz 	GXIsDiffYLarger 			; clear larger flag
.849a	ad d0 06	lda $06d0			lda 	GXDiffY 					; set adjust and total.
.849d	8d d4 06	sta $06d4			sta 	GXAdjust
.84a0	ad cf 06	lda $06cf			lda 	GXDiffX
.84a3	8d d5 06	sta $06d5			sta 	GXTotal
.84a6	ad d0 06	lda $06d0			lda 	GXDiffY 					; if dy > dx
.84a9	cd cf 06	cmp $06cf			cmp 	GXDiffX
.84ac	90 0f		bcc $84bd			bcc 	_GDXNotLarger
.84ae	ce d1 06	dec $06d1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.84b1	ad cf 06	lda $06cf			lda 	GXDiffX 					; set adjust and total other way round
.84b4	8d d4 06	sta $06d4			sta 	GXAdjust
.84b7	ad d0 06	lda $06d0			lda 	GXDiffY
.84ba	8d d5 06	sta $06d5			sta 	GXTotal
.84bd					_GDXNotLarger:
.84bd	ad d5 06	lda $06d5			lda 	GXTotal
.84c0	4a		lsr a				lsr 	a
.84c1	8d d3 06	sta $06d3			sta 	GXPosition
.84c4	60		rts				rts
.06cf					GXDiffX:
>06cf							.fill 	1
.06d0					GXDiffY:
>06d0							.fill 	1
.06d1					GXIsDiffYLarger:
>06d1							.fill 	1
.06d2					GXDXNegative:
>06d2							.fill 	1
.06d3					GXPosition:
>06d3							.fill 	1
.06d4					GXAdjust:
>06d4							.fill 	1
.06d5					GXTotal:
>06d5							.fill 	1
.06d6					GXAddSelect:
>06d6							.fill 	1
.84c5					GXSetColourMode:
.84c5	a6 36		ldx $36				ldx 	gxzTemp0
.84c7	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ca	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84cc	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84cf	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84d1	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84d4	ae 40 06	ldx $0640			ldx 	gxColour
.84d7	8e 41 06	stx $0641			stx 	gxEORValue
.84da	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84dc	90 03		bcc $84e1			bcc 	_GXSDCNotAndColour
.84de	8e 42 06	stx $0642			stx 	gxANDValue
.84e1					_GXSDCNotAndColour:
.84e1	d0 03		bne $84e6			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84e3	9c 41 06	stz $0641			stz 	gxEORValue
.84e6					_GXSDCNotAnd:
.84e6	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84e7	90 08		bcc $84f1			bcc 	_GXSDCNoFlip
.84e9	ad 42 06	lda $0642			lda	 	gxANDValue
.84ec	49 ff		eor #$ff			eor 	#$FF
.84ee	8d 42 06	sta $0642			sta 	gxANDValue
.84f1					_GXSDCNoFlip:
.84f1	18		clc				clc
.84f2	60		rts				rts
.84f3					GXPlotPoint:
.84f3	20 70 88	jsr $8870			jsr 	GXOpenBitmap 				; start drawing
.84f6	20 80 88	jsr $8880			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84f9	ac 44 06	ldy $0644			ldy 	gsOffset
.84fc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84fe	2d 42 06	and $0642			and 	gxANDValue
.8501	4d 41 06	eor $0641			eor 	gxEORValue
.8504	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8506	20 78 88	jsr $8878			jsr 	GXCloseBitmap 				; stop drawing and exit
.8509	18		clc				clc
.850a	60		rts				rts
.850b					GXFillRectangle:
.850b	38		sec				sec
.850c	80 01		bra $850f			bra 	GXRectangle
.850e					GXFrameRectangle:
.850e	18		clc				clc
.850f					GXRectangle:
.850f	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8512	f0 35		beq $8549			beq 	_GXRFail
.8514	08		php				php 								; save Fill flag (CS)
.8515	20 70 88	jsr $8870			jsr 	GXOpenBitmap 				; start drawing
.8518	20 98 89	jsr $8998			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.851b	20 80 88	jsr $8880			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.851e	38		sec				sec 								; sec = Draw line
.851f	20 4b 85	jsr $854b			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8522	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8525	cd 38 06	cmp $0638			cmp 	gxY1
.8528	f0 19		beq $8543			beq 	_GXRectangleExit
.852a					_GXRectLoop:
.852a	20 d6 88	jsr $88d6			jsr 	GXMovePositionDown 			; down one.
.852d	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8530	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8533	cd 38 06	cmp $0638			cmp 	gXY1
.8536	f0 07		beq $853f			beq 	_GXLastLine
.8538	28		plp				plp 								; get flag back
.8539	08		php				php
.853a	20 4b 85	jsr $854b			jsr 	GXDrawLineX1X0 				; draw horizontal line
.853d	80 eb		bra $852a			bra 	_GXRectLoop
.853f					_GXLastLine:
.853f	38		sec				sec
.8540	20 4b 85	jsr $854b			jsr 	GXDrawLineX1X0
.8543					_GXRectangleExit:
.8543	68		pla				pla 								; throw fill flag.
.8544	20 78 88	jsr $8878			jsr 	GXCloseBitmap 				; stop drawing and exit
.8547	18		clc				clc
.8548	60		rts				rts
.8549					_GXRFail:
.8549	38		sec				sec
.854a	60		rts				rts
.854b					GXDrawLineX1X0:
.854b	08		php				php 								; save solid/either-end
.854c	38		sec				sec
.854d	ad 36 06	lda $0636			lda		gXX1
.8550	ed 32 06	sbc $0632			sbc 	gXX0
.8553	85 36		sta $36				sta 	gxzTemp0
.8555	ad 37 06	lda $0637			lda 	gXX1+1
.8558	ed 33 06	sbc $0633			sbc 	gXX0+1
.855b	85 37		sta $37				sta 	gxzTemp0+1
.855d	28		plp				plp
.855e					GXDrawLineTemp0:
.855e	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8560	48		pha				pha
.8561	a5 3d		lda $3d				lda 	gxzScreen+1
.8563	48		pha				pha
.8564	ad 44 06	lda $0644			lda 	gsOffset
.8567	48		pha				pha
.8568	a5 0b		lda $0b				lda 	GXEditSlot
.856a	48		pha				pha
.856b	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.856e	90 1e		bcc $858e			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8570					_GXDLTLine:
.8570	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8572	2d 42 06	and $0642			and 	gxANDValue
.8575	4d 41 06	eor $0641			eor 	gxEORValue
.8578	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857a	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.857c	d0 04		bne $8582			bne 	_GXDLTNoBorrow
.857e	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8580	30 2e		bmi $85b0			bmi 	_GXDLTExit
.8582					_GXDLTNoBorrow:
.8582	c6 36		dec $36				dec 	gxzTemp0
.8584	c8		iny				iny 								; next slot.
.8585	d0 e9		bne $8570			bne 	_GXDLTLine
.8587	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8589	20 be 85	jsr $85be			jsr 	GXDLTCheckWrap				; check for new page.
.858c	80 e2		bra $8570			bra 	_GXDLTLine
.858e					_GXDLTEndPoints:
.858e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8590	2d 42 06	and $0642			and 	gxANDValue
.8593	4d 41 06	eor $0641			eor 	gxEORValue
.8596	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8598	98		tya				tya 								; advance to right side
.8599	18		clc				clc
.859a	65 36		adc $36				adc 	gxzTemp0
.859c	a8		tay				tay
.859d	a5 3d		lda $3d				lda 	gxzScreen+1
.859f	65 37		adc $37				adc 	gxzTemp0+1
.85a1	85 3d		sta $3d				sta 	gxzScreen+1
.85a3	20 be 85	jsr $85be			jsr 	GXDLTCheckWrap 			; fix up.
.85a6	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.85a8	2d 42 06	and $0642			and 	gxANDValue
.85ab	4d 41 06	eor $0641			eor 	gxEORValue
.85ae	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.85b0					_GXDLTExit:
.85b0	68		pla				pla
.85b1	85 0b		sta $0b				sta 	GXEditSlot
.85b3	68		pla				pla
.85b4	8d 44 06	sta $0644			sta 	gsOffset
.85b7	68		pla				pla
.85b8	85 3d		sta $3d				sta 	gxzScreen+1
.85ba	68		pla				pla
.85bb	85 3c		sta $3c				sta 	gxzScreen
.85bd	60		rts				rts
.85be					GXDLTCheckWrap:
.85be	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85c0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85c2	90 06		bcc $85ca			bcc 	_GXDLTCWExit
.85c4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85c6	85 3d		sta $3d				sta 	gxzScreen+1
.85c8	e6 0b		inc $0b				inc 	GXEditSlot
.85ca					_GXDLTCWExit:
.85ca	60		rts				rts
.85cb					GXDrawGraphicElement:
.85cb	8d d7 06	sta $06d7			sta 	gxSize 						; save size
.85ce	3a		dec a				dec 	a
.85cf	8d d8 06	sta $06d8			sta 	gxMask 						; and mask
.85d2	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85d5	f0 67		beq $863e			beq 	_GXSLFail
.85d7	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85da	48		pha				pha
.85db	8c da 06	sty $06da			sty 	gxAcquireVector+1 			; and acquisition vector
.85de	8e d9 06	stx $06d9			stx 	gxAcquireVector
.85e1	20 70 88	jsr $8870			jsr 	gxOpenBitmap 				; open the bitmap.
.85e4	ad dc 06	lda $06dc			lda 	gxUseMode 					; scale bits
.85e7	4a		lsr a				lsr 	a
.85e8	4a		lsr a				lsr 	a
.85e9	4a		lsr a				lsr 	a
.85ea	29 07		and #$07			and		#7
.85ec	1a		inc a				inc 	a
.85ed	8d db 06	sta $06db			sta 	gxScale
.85f0	64 38		stz $38				stz 	gxzTemp1					; start first line
.85f2					_GXGELoop:
.85f2	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85f4	2c dc 06	bit $06dc			bit 	gxUseMode 					; check for flip.
.85f7	10 06		bpl $85ff			bpl		_GXNoVFlip
.85f9	ad d8 06	lda $06d8			lda 	gxMask
.85fc	38		sec				sec
.85fd	e5 38		sbc $38				sbc 	gxzTemp1
.85ff					_GXNoVFlip:
.85ff	aa		tax				tax 								; get the Xth line.
.8600	20 40 86	jsr $8640			jsr 	_GXCallAcquire 				; get that data.
.8603	ad db 06	lda $06db			lda 	gxScale 					; do scale identical copies of that line.
.8606	85 39		sta $39				sta 	gxzTemp1+1
.8608					_GXGELoop2:
.8608	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.860b	cd 3e 06	cmp $063e			cmp 	gxHeight
.860e	b0 10		bcs $8620			bcs 	_GXDGEExit
.8610	20 43 86	jsr $8643			jsr 	GXRenderOneLine 			; render line
.8613	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.8615	d0 f1		bne $8608			bne 	_GXGELoop2
.8617	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.8619	a5 38		lda $38				lda 	gxzTemp1
.861b	cd d7 06	cmp $06d7			cmp 	gxSize
.861e	d0 d2		bne $85f2			bne 	_GXGELoop
.8620					_GXDGEExit:
.8620	68		pla				pla 								; restore Y for next time
.8621	8d 34 06	sta $0634			sta 	gxY0
.8624	ae db 06	ldx $06db			ldx 	gxScale 					; get scale (1-8)
.8627					_GXShiftLeft:
.8627	18		clc				clc
.8628	ad d7 06	lda $06d7			lda 	gxSize
.862b	6d 32 06	adc $0632			adc 	gxX0
.862e	8d 32 06	sta $0632			sta 	gxX0
.8631	90 03		bcc $8636			bcc 	_GXSLNoCarry
.8633	ee 33 06	inc $0633			inc 	gxX0+1
.8636					_GXSLNoCarry:
.8636	ca		dex				dex
.8637	d0 ee		bne $8627			bne 	_GXShiftLeft
.8639	20 78 88	jsr $8878			jsr 	GXCloseBitmap
.863c	18		clc				clc
.863d	60		rts				rts
.863e					_GXSLFail:
.863e	38		sec				sec
.863f	60		rts				rts
.8640					_GXCallAcquire:
.8640	6c d9 06	jmp ($06d9)			jmp 	(gxAcquireVector)
.8643					GXRenderOneLine:
.8643	20 80 88	jsr $8880			jsr 	GXPositionCalc 				; calculate position/offset.
.8646	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8649	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.864b					_GXROLLoop1:
.864b	ad db 06	lda $06db			lda 	gxScale 					; set to do 'scale' times
.864e	85 3b		sta $3b				sta 	gxzTemp2+1
.8650					_GXROLLoop2:
.8650	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8652	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8655	50 06		bvc $865d			bvc 	_GXNoHFlip
.8657	ad d8 06	lda $06d8			lda 	gxMask
.865a	38		sec				sec
.865b	e5 3a		sbc $3a				sbc 	gxzTemp2
.865d					_GXNoHFlip:
.865d	aa		tax				tax 								; read from the pixel buffer
.865e	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8661	d0 07		bne $866a			bne 	_GXDraw 					; draw if non zero
.8663	ad dc 06	lda $06dc			lda 	gxUseMode 					; check to see if solid background
.8666	29 04		and #$04			and 	#4
.8668	f0 0a		beq $8674			beq 	_GXZeroPixel
.866a					_GXDraw:
.866a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.866c	2d 42 06	and $0642			and 	gxANDValue
.866f	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8672	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8674					_GXZeroPixel:
.8674	c8		iny				iny 								; advance pointer
.8675	d0 05		bne $867c			bne 	_GXNoShift
.8677	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8679	20 be 85	jsr $85be			jsr 	GXDLTCheckWrap				; check for new page.
.867c					_GXNoShift:
.867c	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.867e	d0 d0		bne $8650			bne 	_GXROLLoop2
.8680	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8682	a5 3a		lda $3a				lda 	gxzTemp2
.8684	cd d7 06	cmp $06d7			cmp 	gxSize
.8687	d0 c2		bne $864b			bne 	_GXROLLoop1
.8689	ee 34 06	inc $0634			inc 	gxY0
.868c	60		rts				rts
.06d7					gxSize:
>06d7							.fill 	1
.06d8					gxMask:
>06d8							.fill 	1
.06d9					gxAcquireVector:
>06d9							.fill 	2
.06db					gxScale:
>06db							.fill 	1
.06dc					gxUseMode:
>06dc							.fill 	1
.868d					GXFontHandler:
.868d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.868f	4d 3f 06	eor $063f			eor 	gxMode
.8692	8d dc 06	sta $06dc			sta 	gxUseMode
.8695	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8697	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8699	26 37		rol $37				rol	 	gxzTemp0+1
.869b	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.869d	26 37		rol $37				rol	 	gxzTemp0+1
.869f	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.86a1	26 37		rol $37				rol	 	gxzTemp0+1
.86a3	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.86a5	09 c0		ora #$c0			ora 	#$C0
.86a7	85 37		sta $37				sta 	gxzTemp0+1
.86a9	a9 08		lda #$08			lda 	#8 							; size 8x8
.86ab	a2 b3		ldx #$b3			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.86ad	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.86af	20 cb 85	jsr $85cb			jsr 	GXDrawGraphicElement
.86b2	60		rts				rts
.86b3					GXGetGraphicDataFont:
.86b3	8a		txa				txa 								; X->Y
.86b4	a8		tay				tay
.86b5	a6 01		ldx $01				ldx 	1 							; preserve old value
.86b7	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.86b9	85 01		sta $01				sta 	1
.86bb	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.86bd	86 01		stx $01				stx 	1 							; put old value back.
.86bf	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86c1					_GXExpand:
.86c1	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86c4	0a		asl a				asl 	a 							; shift bit 7 into C
.86c5	90 08		bcc $86cf			bcc 	_GXNoPixel
.86c7	48		pha				pha 								; if set, set pixel buffer to current colour.
.86c8	ad 40 06	lda $0640			lda 	gxColour
.86cb	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86ce	68		pla				pla
.86cf					_GXNoPixel:
.86cf	e8		inx				inx 								; do the whole byte.
.86d0	e0 08		cpx #$08			cpx 	#8
.86d2	d0 ed		bne $86c1			bne 	_GXExpand
.86d4	60		rts				rts
.86d5					GXSpriteHandler:
.86d5	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86d7	4d 3f 06	eor $063f			eor 	gxMode
.86da	8d dc 06	sta $06dc			sta 	gxUseMode
.86dd	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86df	da		phx				phx
.86e0	20 70 88	jsr $8870			jsr 	GXOpenBitmap 				; can access sprite information
.86e3	68		pla				pla
.86e4	20 51 89	jsr $8951			jsr 	GXFindSprite 				; get the sprite address
.86e7	08		php				php
.86e8	20 78 88	jsr $8878			jsr 	GXCloseBitmap
.86eb	28		plp				plp
.86ec	b0 0a		bcs $86f8			bcs		_GXSHExit 					; exit if find failed.
.86ee	ad dd 06	lda $06dd			lda 	GXSizePixels 				; return size
.86f1	a2 f9		ldx #$f9			ldx 	#GXSpriteAcquire & $FF
.86f3	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86f5	20 cb 85	jsr $85cb			jsr 	GXDrawGraphicElement
.86f8					_GXSHExit:
.86f8	60		rts				rts
.86f9					GXSpriteAcquire:
.86f9	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86fc	85 0b		sta $0b				sta 	GXEditSlot
.86fe	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.8700	a9 00		lda #$00			lda 	#0
.8702	ae de 06	ldx $06de			ldx 	GXSizeBits
.8705					_GXTimesRowNumber:
.8705	18		clc				clc
.8706	65 36		adc $36				adc 	zTemp0
.8708	ca		dex				dex
.8709	10 fa		bpl $8705			bpl 	_GXTimesRowNumber
.870b	64 37		stz $37				stz 	gxzTemp0+1
.870d	0a		asl a				asl 	a 							; row x 2,4,6,8
.870e	26 37		rol $37				rol 	gxzTemp0+1
.8710	0a		asl a				asl 	a 							; row x 4,8,12,16
.8711	26 37		rol $37				rol 	gxzTemp0+1
.8713	0a		asl a				asl 	a 							; row x 8,16,24,32
.8714	26 37		rol $37				rol 	gxzTemp0+1
.8716	85 36		sta $36				sta 	gxzTemp0
.8718	18		clc				clc 								; add base address.
.8719	a5 36		lda $36				lda 	gxzTemp0
.871b	6d e0 06	adc $06e0			adc 	GXSpriteOffset
.871e	85 36		sta $36				sta 	gxzTemp0
.8720	a5 37		lda $37				lda 	gxzTemp0+1
.8722	6d e1 06	adc $06e1			adc 	GXSpriteOffset+1
.8725					_GXSAFindPage:
.8725	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8727	90 06		bcc $872f			bcc 	_GXSAFoundPage
.8729	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.872b	e6 0b		inc $0b				inc 	GXEditSlot
.872d	80 f6		bra $8725			bra 	_GXSAFindPage
.872f					_GXSAFoundPage:
.872f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8731	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8733	a0 00		ldy #$00			ldy 	#0
.8735					_GXSACopyLoop:
.8735	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8737	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.873a	c8		iny				iny
.873b	cc dd 06	cpy $06dd			cpy 	GXSizePixels
.873e	d0 f5		bne $8735			bne 	_GXSACopyLoop
.8740	60		rts				rts
.8741					GXSelect:
.8741	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8744	f0 22		beq $8768			beq 	_GXSFail
.8746	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8748	c9 40		cmp #$40			cmp 	#64
.874a	b0 1c		bcs $8768			bcs 	_GXSFail
.874c	8d 45 06	sta $0645			sta 	GSCurrentSpriteID
.874f	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8751	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8753	06 36		asl $36				asl 	gxzTemp0
.8755	06 36		asl $36				asl 	gxzTemp0
.8757	06 36		asl $36				asl 	gxzTemp0
.8759	2a		rol a				rol 	a
.875a	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.875c	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.875f	85 37		sta $37				sta 	gxzTemp0+1
.8761	a5 36		lda $36				lda 	gxzTemp0
.8763	8d 46 06	sta $0646			sta 	GSCurrentSpriteAddr
.8766	18		clc				clc
.8767	60		rts				rts
.8768					_GXSFail:
.8768	38		sec				sec
.8769	60		rts				rts
.876a					GXSelectImage:
.876a	ad 3a 06	lda $063a			lda 	gxSpritesOn
.876d	f0 74		beq $87e3			beq 	_GXSIFail
.876f	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8772	f0 6f		beq $87e3			beq 	_GXSIFail 					; (checking the MSB)
.8774	64 01		stz $01				stz 	1
.8776	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8778	d0 6b		bne $87e5			bne 	_GXSIHide
.877a	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.877c	48		pha				pha
.877d	20 70 88	jsr $8870			jsr 	GXOpenBitmap
.8780	68		pla				pla
.8781	20 51 89	jsr $8951			jsr 	GXFindSprite
.8784	b0 5a		bcs $87e0			bcs 	_GXSICloseFail 				; no image
.8786	a0 01		ldy #$01			ldy 	#1
.8788	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.878b	85 36		sta $36				sta 	gxzTemp0
.878d	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.8790	85 37		sta $37				sta 	gxzTemp0+1
.8792	ad e0 06	lda $06e0			lda 	GXSpriteOffset
.8795	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8797	18		clc				clc
.8798	ad e1 06	lda $06e1			lda 	GXSpriteOffset+1
.879b	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.879e	c8		iny				iny
.879f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.87a1	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.87a4	69 00		adc #$00			adc 	#0
.87a6	c8		iny				iny
.87a7	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.87a9	ad de 06	lda $06de			lda 	GXSizeBits 					; get raw size
.87ac	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.87ae	2a		rol a				rol 	a 							; x 2
.87af	0a		asl a				asl 	a 							; x 4
.87b0	0a		asl a				asl 	a 							; x 8
.87b1	0a		asl a				asl 	a 							; x 16
.87b2	0d df 06	ora $06df			ora 	GXSpriteLUT 				; Or with LUT
.87b5	0a		asl a				asl 	a 							; 1 shift
.87b6	09 01		ora #$01			ora 	#1 							; enable sprite.
.87b8	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.87ba	20 78 88	jsr $8878			jsr 	GXCloseBitmap
.87bd	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87c0	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87c3	29 3f		and #$3f			and 	#$3F
.87c5	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87c8	ad de 06	lda $06de			lda 	GXSizeBits 					; get bit size
.87cb	6a		ror a				ror 	a 							; shift into bits 6/7
.87cc	6a		ror a				ror 	a
.87cd	6a		ror a				ror 	a
.87ce	29 c0		and #$c0			and 	#$C0
.87d0	1d 8a 06	ora $068a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87d3	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87d6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87d9	29 7f		and #$7f			and 	#$7F
.87db	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87de	18		clc				clc
.87df	60		rts				rts
.87e0					_GXSICloseFail:
.87e0	20 78 88	jsr $8878			jsr 	GXCloseBitmap
.87e3					_GXSIFail:
.87e3	38		sec				sec
.87e4	60		rts				rts
.87e5					_GXSIHide:
.87e5	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87e8	85 36		sta $36				sta 	gxzTemp0
.87ea	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.87ed	85 37		sta $37				sta 	gxzTemp0+1
.87ef	a9 00		lda #$00			lda 	#0
.87f1	92 36		sta ($36)			sta 	(gxzTemp0)
.87f3	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get sprite ID
.87f6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87f9	09 80		ora #$80			ora 	#$80
.87fb	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87fe	18		clc				clc
.87ff	60		rts				rts
.8800					GXMoveSprite:
.8800	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8803	f0 65		beq $886a			beq 	_GXSIFail
.8805	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8808	f0 60		beq $886a			beq 	_GXSIFail
.880a	85 37		sta $37				sta 	gxzTemp0+1
.880c	a0 04		ldy #$04			ldy 	#4
.880e	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.8811	85 36		sta $36				sta 	gxzTemp0
.8813	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.8816	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8819	2a		rol a				rol 	a	 						; into bits 0,1.
.881a	2a		rol a				rol 	a
.881b	2a		rol a				rol 	a
.881c	29 03		and #$03			and 	#3
.881e	aa		tax				tax
.881f	bd 6c 88	lda $886c,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.8822	48		pha				pha
.8823	18		clc				clc
.8824	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8827	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8829	c8		iny				iny
.882a	ad 33 06	lda $0633			lda 	gxX0+1
.882d	69 00		adc #$00			adc 	#0
.882f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8831	c8		iny				iny
.8832	68		pla				pla
.8833	18		clc				clc
.8834	6d 34 06	adc $0634			adc 	gxY0
.8837	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8839	a9 00		lda #$00			lda 	#0
.883b	69 00		adc #$00			adc 	#0
.883d	c8		iny				iny
.883e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8840	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.8843	6e 32 06	ror $0632			ror 	gxX0
.8846	4e 32 06	lsr $0632			lsr 	gxX0
.8849	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.884c	4e 34 06	lsr $0634			lsr 	gxY0
.884f	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.8852	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x
.8855	29 80		and #$80			and 	#$80
.8857	0d 32 06	ora $0632			ora 	gxX0
.885a	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.885d	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8860	29 c0		and #$c0			and 	#$C0
.8862	0d 34 06	ora $0634			ora 	gxY0
.8865	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.8868	18		clc				clc
.8869	60		rts				rts
.886a					_GXSIFail:
.886a	38		sec				sec
.886b	60		rts				rts
.886c					_GXMSOffset:
>886c	1c						.byte 	32-8/2
>886d	18						.byte 	32-16/2
>886e	14						.byte 	32-24/2
>886f	10						.byte 	32-32/2
.8870					GXOpenBitmap:
.8870	78		sei				sei 								; no interrupts here
.8871	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8873	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8876	58		cli				cli
.8877	60		rts				rts
.8878					GXCloseBitmap:
.8878	78		sei				sei
.8879	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.887c	85 0b		sta $0b				sta 	GXEditSlot
.887e	58		cli				cli
.887f	60		rts				rts
.8880					GXPositionCalc:
.8880	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8882	48		pha				pha
.8883	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8886	85 3c		sta $3c				sta 	gxzScreen
.8888	64 3d		stz $3d				stz 	gxzScreen+1
.888a	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.888c	26 3d		rol $3d				rol 	gxzScreen+1
.888e	06 3c		asl $3c				asl 	gxzScreen
.8890	26 3d		rol $3d				rol 	gxzScreen+1
.8892	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8893	65 3c		adc $3c				adc 	gxzScreen
.8895	85 3c		sta $3c				sta 	gxzScreen
.8897	90 02		bcc $889b			bcc 	_GXPCNoCarry
.8899	e6 3d		inc $3d				inc 	gxzScreen+1
.889b					_GXPCNoCarry:
.889b	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.889d	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.889f	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.88a1	85 36		sta $36				sta 	gxzTemp0
.88a3	64 3d		stz $3d				stz 	gxzScreen+1
.88a5	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.88a7					_GXPCMultiply32:
.88a7	06 3c		asl $3c				asl 	gxzScreen
.88a9	26 3d		rol $3d				rol 	gxzScreen+1
.88ab	3a		dec a				dec 	a
.88ac	d0 f9		bne $88a7			bne 	_GXPCMultiply32
.88ae	18		clc				clc
.88af	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.88b2	65 3c		adc $3c				adc 	gxzScreen
.88b4	8d 44 06	sta $0644			sta 	gsOffset
.88b7	ad 33 06	lda $0633			lda 	GXX0+1
.88ba	65 3d		adc $3d				adc 	gxzScreen+1
.88bc	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88be	90 04		bcc $88c4			bcc 	_GXPCNoOverflow
.88c0	29 1f		and #$1f			and 	#$1F 						; fix it up
.88c2	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88c4					_GXPCNoOverflow:
.88c4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88c6	85 3d		sta $3d				sta 	gxzScreen+1
.88c8	64 3c		stz $3c				stz 	gxzScreen
.88ca	18		clc				clc
.88cb	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88cd	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88d0	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88d2	68		pla				pla
.88d3	85 36		sta $36				sta 	gxzTemp0
.88d5	60		rts				rts
.88d6					GXMovePositionDown:
.88d6	18		clc				clc 								; add 320 to offset/temp+1
.88d7	ad 44 06	lda $0644			lda 	gsOffset
.88da	69 40		adc #$40			adc 	#64
.88dc	8d 44 06	sta $0644			sta 	gsOffset
.88df	a5 3d		lda $3d				lda 	gxzScreen+1
.88e1	69 01		adc #$01			adc 	#1
.88e3	85 3d		sta $3d				sta 	gxzScreen+1
.88e5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88e7	90 07		bcc $88f0			bcc 	_GXMPDExit
.88e9	38		sec				sec  								; next page
.88ea	e9 20		sbc #$20			sbc 	#$20
.88ec	85 3d		sta $3d				sta 	gxzScreen+1
.88ee	e6 0b		inc $0b				inc 	GXEditSlot
.88f0					_GXMPDExit:
.88f0	60		rts				rts
.88f1					GXCollide:
.88f1	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88f3	aa		tax				tax
.88f4	05 37		ora $37				ora 	gxzTemp0+1
.88f6	29 c0		and #$c0			and 	#$C0
.88f8	38		sec				sec
.88f9	d0 53		bne $894e			bne 	_GXCollideFail 				; if either >= 64, fail.
.88fb	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88fd	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.8900	1d 4a 06	ora $064a,x			ora 	GXSpriteLow,x
.8903	30 48		bmi $894d			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.8905	18		clc				clc 								; need to calculate sum of sizes.
.8906	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y
.8909	7d 8a 06	adc $068a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.890c	29 c0		and #$c0			and 	#$C0 					 	; mask off
.890e	6a		ror a				ror 	a 							; 5/6/7
.890f	4a		lsr a				lsr 	a 							; 4/5/6
.8910	4a		lsr a				lsr 	a 							; 3/4/5
.8911	4a		lsr a				lsr 	a 							; 2/3/4
.8912	18		clc				clc
.8913	69 08		adc #$08			adc 	#$08
.8915	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.8916	4a		lsr a				lsr 	a
.8917	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.8919	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.891c	29 3f		and #$3f			and 	#$3F
.891e	85 39		sta $39				sta 	gxzTemp1+1
.8920	38		sec				sec
.8921	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8924	29 3f		and #$3f			and 	#$3F
.8926	e5 39		sbc $39				sbc 	gxzTemp1+1
.8928	b0 03		bcs $892d			bcs 	_GXCAbs1 					; calculate |y1-y0|
.892a	49 ff		eor #$ff			eor 	#$FF
.892c	1a		inc a				inc 	a
.892d					_GXCAbs1:
.892d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.892f	b0 1c		bcs $894d			bcs 	_GXOkayFail
.8931	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8933	38		sec				sec 								; calculate |x1-x0|
.8934	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y
.8937	fd 4a 06	sbc $064a,x			sbc 	GXSpriteLow,x
.893a	b0 03		bcs $893f			bcs 	_GXCAbs2
.893c	49 ff		eor #$ff			eor 	#$FF
.893e	1a		inc a				inc 	a
.893f					_GXCAbs2:
.893f	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8941	b0 0a		bcs $894d			bcs 	_GXOkayFail
.8943	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8945	90 02		bcc $8949			bcc 	_GXCHaveLowest
.8947	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.8949					_GXCHaveLowest:
.8949	0a		asl a				asl 	a 							; scale to allow for >> 2
.894a	0a		asl a				asl 	a
.894b	18		clc				clc
.894c	60		rts				rts
.894d					_GXOkayFail:
.894d	18		clc				clc
.894e					_GXCollideFail:
.894e	a9 ff		lda #$ff			lda 	#$FF
.8950	60		rts				rts
.8951					GXFindSprite:
.8951	aa		tax				tax
.8952	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8955	85 0b		sta $0b				sta 	GXEditSlot
.8957	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.895a	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.895d	f0 33		beq $8992			beq 	_GXFSFail
.895f	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8962	8d e1 06	sta $06e1			sta 	GXSpriteOffset+1
.8965	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8968	48		pha				pha 								; save twice
.8969	48		pha				pha
.896a	29 03		and #$03			and 	#3 							; get sprite size
.896c	8d de 06	sta $06de			sta 	GXSizeBits 					; save raw (0-3)
.896f	aa		tax				tax
.8970	bd 94 89	lda $8994,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8973	8d dd 06	sta $06dd			sta 	GXSizePixels 					; save (8/16/24/32)
.8976	68		pla				pla 								; get LUT
.8977	4a		lsr a				lsr		a
.8978	4a		lsr a				lsr		a
.8979	29 03		and #$03			and 	#3
.897b	8d df 06	sta $06df			sta 	GXSpriteLUT
.897e	68		pla				pla 								; address, neeeds to be x 4
.897f	29 f0		and #$f0			and 	#$F0
.8981	8d e0 06	sta $06e0			sta 	GXSpriteOffset
.8984	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.8987	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.898a	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.898d	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.8990	18		clc				clc
.8991	60		rts				rts
.8992					_GXFSFail:
.8992	38		sec				sec
.8993	60		rts				rts
.8994					_GXFXSSTTable:
>8994	08 10 18 20					.byte 	8,16,24,32
.06dd					GXSizePixels:
>06dd							.fill 	1
.06de					GXSizeBits:
>06de							.fill 	1
.06df					GXSpriteLUT:
>06df							.fill 	1
.06e0					GXSpriteOffset:
>06e0							.fill 	2
.8998					GXSortXY:
.8998	20 b6 89	jsr $89b6			jsr 	GXSortY 					; will be sorted on Y now
.899b	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.899e	cd 36 06	cmp $0636			cmp 	gxX1
.89a1	ad 33 06	lda $0633			lda 	gXX0+1
.89a4	ed 37 06	sbc $0637			sbc 	gXX1+1
.89a7	90 0c		bcc $89b5			bcc 	_GXSXYExit 					; X0 < X1 exit
.89a9	a2 00		ldx #$00			ldx 	#0 							; swap them over
.89ab	a0 04		ldy #$04			ldy 	#4
.89ad	20 ca 89	jsr $89ca			jsr 	GXSwapXY
.89b0	e8		inx				inx
.89b1	c8		iny				iny
.89b2	20 ca 89	jsr $89ca			jsr 	GXSwapXY
.89b5					_GXSXYExit:
.89b5	60		rts				rts
.89b6					GXSortY:
.89b6	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.89b9	cd 38 06	cmp $0638			cmp 	gxY1
.89bc	90 0b		bcc $89c9			bcc 	_GXSYSorted
.89be	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89c0	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89c2					_GXSwap1:
.89c2	20 ca 89	jsr $89ca			jsr 	GXSwapXY
.89c5	88		dey				dey
.89c6	ca		dex				dex
.89c7	10 f9		bpl $89c2			bpl 	_GXSwap1
.89c9					_GXSYSorted:
.89c9	60		rts				rts
.89ca					GXSwapXY:
.89ca	bd 32 06	lda $0632,x			lda 	gxX0,x
.89cd	48		pha				pha
.89ce	b9 32 06	lda $0632,y			lda 	gxX0,y
.89d1	9d 32 06	sta $0632,x			sta 	gxX0,x
.89d4	68		pla				pla
.89d5	99 32 06	sta $0632,y			sta 	gxX0,y
.89d8	60		rts				rts

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89d9					AssembleGroup1:
.89d9	a9 ff		lda #$ff			lda 	#$FF
.89db	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89de	80 02		bra $89e2			bra 	AsmGroup12
.89e0					AssembleGroup2:
.89e0	a5 00		lda $00				lda 	$00
.89e2					AsmGroup12:
.89e2	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89e5	68		pla				pla 								; pop the return address to access the information following.
.89e6	fa		plx				plx
.89e7	20 70 8a	jsr $8a70			jsr 	AccessParameters 			; get opcode and save as base
.89ea	8d a4 04	sta $04a4			sta 	BaseOpcode
.89ed	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89f0	d0 08		bne $89fa			bne 	_AG12HaveMask
.89f2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89f4	20 78 8a	jsr $8a78			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89f7	8d a5 04	sta $04a5			sta 	ModeMask
.89fa					_AG12HaveMask:
.89fa	20 b3 8b	jsr $8bb3			jsr 	TypeAndCalculateOperand 	; get zero page type
.89fd	da		phx				phx 								; save found address mode
.89fe	20 dc 8a	jsr $8adc			jsr 	AssembleModeX
.8a01	fa		plx				plx  								; restore address mode
.8a02	b0 0b		bcs $8a0f			bcs 	_AG12Exit
.8a04	20 10 8a	jsr $8a10			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8a07	20 dc 8a	jsr $8adc			jsr 	AssembleModeX
.8a0a	b0 03		bcs $8a0f			bcs 	_AG12Exit
.8a0c	4c 4d b5	jmp $b54d			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8a0f					_AG12Exit:
.8a0f	60		rts				rts
.8a10					PromoteToAbsolute:
.8a10	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8a12	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8a14	f0 19		beq $8a2f			beq 	_PTADo
.8a16	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8a18	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8a1a	f0 13		beq $8a2f			beq 	_PTADo
.8a1c	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8a1e	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a20	f0 0d		beq $8a2f			beq 	_PTADo
.8a22	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a24	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a26	f0 07		beq $8a2f			beq 	_PTADo
.8a28	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a2a	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a2c	f0 01		beq $8a2f			beq 	_PTADo
.8a2e	60		rts				rts
.8a2f					_PTADo:
.8a2f	aa		tax				tax
.8a30	60		rts				rts
.8a31					AssembleGroup3:
.8a31	68		pla				pla 								; get parameters, which is just the opcode.
.8a32	fa		plx				plx
.8a33	20 70 8a	jsr $8a70			jsr 	AccessParameters 			; get and output opcode
.8a36	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte
.8a39	20 17 8c	jsr $8c17			jsr 	CalculateOperand 			; get a 16 bit operand
.8a3c	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a3f	38		sec				sec
.8a40	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a43	48		pha				pha 								; LSB in A
.8a44	ad 10 04	lda $0410			lda 	NSMantissa1
.8a47	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a4a	aa		tax				tax 								; MSB in X
.8a4b	68		pla				pla
.8a4c	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a4d	69 7f		adc #$7f			adc 	#$7F
.8a4f	90 01		bcc $8a52			bcc 	_AG3NoCarry
.8a51	e8		inx				inx
.8a52					_AG3NoCarry:
.8a52	38		sec				sec 								; fix back and write out anyways.
.8a53	e9 80		sbc #$80			sbc 	#$80
.8a55	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte
.8a58	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a5a	f0 0a		beq $8a66			beq 	_AG3Exit
.8a5c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a5f	29 01		and #$01			and 	#1
.8a61	f0 03		beq $8a66			beq 	_AG3Exit
.8a63	4c 52 b5	jmp $b552			jmp 	RangeError 					; no, branch is out of range
.8a66					_AG3Exit:
.8a66	60		rts				rts
.8a67					AssembleGroup4:
.8a67	68		pla				pla 								; pop address
.8a68	fa		plx				plx
.8a69	20 70 8a	jsr $8a70			jsr 	AccessParameters 			; access and get first
.8a6c	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte 			; output it.
.8a6f	60		rts				rts
.8a70					AccessParameters:
.8a70	8d a1 04	sta $04a1			sta 	ParamStart
.8a73	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a76	a9 01		lda #$01			lda 	#1
.8a78					GetParameter:
.8a78	5a		phy				phy
.8a79	a8		tay				tay
.8a7a	ad a1 04	lda $04a1			lda 	ParamStart
.8a7d	85 36		sta $36				sta 	zTemp0
.8a7f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a82	85 37		sta $37				sta 	zTemp0+1
.8a84	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a86	7a		ply				ply
.8a87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a88					AssemblerWriteByte:
.8a88	48		pha			pha
.8a89	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a8c	29 02		and #$02		and 	#2
.8a8e	f0 1b		beq $8aab		beq 	_AWBNoPrint
.8a90	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a93	20 c6 8a	jsr $8ac6		jsr 	PrintHex
.8a96	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a99	20 c6 8a	jsr $8ac6		jsr 	PrintHex
.8a9c	a9 20		lda #$20		lda 	#' '
.8a9e	20 05 b7	jsr $b705		jsr 	EXTPrintCharacter
.8aa1	68		pla			pla 									; print byte
.8aa2	48		pha			pha
.8aa3	20 c6 8a	jsr $8ac6		jsr 	PrintHex
.8aa6	a9 0d		lda #$0d		lda 	#13
.8aa8	20 05 b7	jsr $b705		jsr 	EXTPrintCharacter
.8aab					_AWBNoPrint:
.8aab	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8aae	85 36		sta $36			sta 	zTemp0
.8ab0	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8ab3	f0 0e		beq $8ac3		beq 	_AWBRange
.8ab5	85 37		sta $37			sta 	zTemp0+1
.8ab7	68		pla			pla 									; write byte out
.8ab8	92 36		sta ($36)		sta 	(zTemp0)
.8aba	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8abd	d0 03		bne $8ac2		bne 	_AWBNoCarry
.8abf	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8ac2					_AWBNoCarry:
.8ac2	60		rts			rts
.8ac3					_AWBRange:
.8ac3	4c 52 b5	jmp $b552		jmp 	RangeError
.8ac6					PrintHex:
.8ac6	48		pha				pha
.8ac7	4a		lsr a				lsr 	a
.8ac8	4a		lsr a				lsr 	a
.8ac9	4a		lsr a				lsr 	a
.8aca	4a		lsr a				lsr 	a
.8acb	20 cf 8a	jsr $8acf			jsr 	_PrintNibble
.8ace	68		pla				pla
.8acf					_PrintNibble:
.8acf	29 0f		and #$0f			and 	#15
.8ad1	c9 0a		cmp #$0a			cmp 	#10
.8ad3	90 02		bcc $8ad7			bcc 	_NoShift
.8ad5	69 06		adc #$06			adc 	#6
.8ad7					_NoShift:
.8ad7	69 30		adc #$30			adc 	#48
.8ad9	4c 05 b7	jmp $b705			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8adc					AssembleModeX:
.8adc	5a		phy				phy
.8add	ad a3 04	lda $04a3			lda 	IsGroup1
.8ae0	f0 17		beq $8af9			beq 	_AMXGroup2
.8ae2	8a		txa				txa 							; is it in group # 1
.8ae3	29 40		and #$40			and 	#AM_ISG1
.8ae5	f0 50		beq $8b37			beq 	_AMXFail 				; no, give up.
.8ae7	8a		txa				txa 							; get back.
.8ae8	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aea	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8aec	d0 22		bne $8b10			bne 	_AMXHaveInfo
.8aee	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8af1	c9 81		cmp #$81			cmp 	#$81
.8af3	f0 42		beq $8b37			beq 	_AMXFail
.8af5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8af7	80 17		bra $8b10			bra 	_AMXHaveInfo 			; odd design decision there.
.8af9					_AMXGroup2:
.8af9	8a		txa				txa 							; is it in group 2 ?
.8afa	29 20		and #$20			and 	#AM_ISG2
.8afc	f0 39		beq $8b37			beq 	_AMXFail 				; no, give up.
.8afe	8a		txa				txa 							; get the offset into Y
.8aff	29 1f		and #$1f			and 	#$1F
.8b01	4a		lsr a				lsr 	a 						; make it 0-7.
.8b02	4a		lsr a				lsr  	a
.8b03	a8		tay				tay
.8b04	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8b07					_AMXCheckOkay:
.8b07	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8b08	88		dey				dey
.8b09	10 fc		bpl $8b07			bpl 	_AMXCheckOkay
.8b0b	90 2a		bcc $8b37			bcc 	_AMXFail 				; not allowed.
.8b0d	8a		txa				txa  							; get mask back
.8b0e	29 1f		and #$1f			and 	#$1F
.8b10					_AMXHaveInfo:
.8b10	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8b12	10 05		bpl $8b19			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8b14	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8b17	d0 1e		bne $8b37			bne 	_AMXFail
.8b19					_AMXAnySize:
.8b19	18		clc				clc 							; add offset to the base opcode
.8b1a	6d a4 04	adc $04a4			adc 	BaseOpcode
.8b1d					_AMXOutputCode:
.8b1d	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b20	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b22	f0 10		beq $8b34			beq 	_AMXExit
.8b24	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b27	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte
.8b2a	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b2c	30 06		bmi $8b34			bmi 	_AMXExit
.8b2e	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b31	20 88 8a	jsr $8a88			jsr 	AssemblerWriteByte
.8b34					_AMXExit:
.8b34	7a		ply				ply
.8b35	38		sec				sec
.8b36	60		rts				rts
.8b37					_AMXFail:
.8b37	a0 00		ldy #$00			ldy 	#0
.8b39					_AMXCheckOddities:
.8b39	8a		txa				txa
.8b3a	d9 62 8b	cmp $8b62,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b3d	d0 16		bne $8b55			bne 	_AMXCONext
.8b3f	b9 60 8b	lda $8b60,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b42	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b45	d0 0e		bne $8b55			bne 	_AMXCONext
.8b47	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b49	10 05		bpl $8b50			bpl 	_AMXCONotZero
.8b4b	ad 10 04	lda $0410			lda 	NSMantissa1
.8b4e	d0 05		bne $8b55			bne 	_AMXCONext
.8b50					_AMXCONotZero:
.8b50	b9 61 8b	lda $8b61,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b53	80 c8		bra $8b1d			bra 	_AMXOutputCode 			; and assemble it
.8b55					_AMXCONext:
.8b55	c8		iny				iny
.8b56	c8		iny				iny
.8b57	c8		iny				iny
.8b58	b9 60 8b	lda $8b60,y			lda 	ExtraOpcode+0,y 		; end of table
.8b5b	d0 dc		bne $8b39			bne 	_AMXCheckOddities
.8b5d					_AMXCOFail:
.8b5d	7a		ply				ply
.8b5e	18		clc				clc
.8b5f	60		rts				rts
.8b60					ExtraOpcode:
>8b60	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b63	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b66	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b69	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b6c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b6f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b72	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b75	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b78	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b7b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b7e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b7f					LabelHere:
.8b7f	c8		iny				iny 								; skip .
.8b80	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b82	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm 				; get a term
.8b85	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b88	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b8a	d0 24		bne $8bb0			bne 	_ALType
.8b8c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b8f	85 36		sta $36				sta 	zTemp0
.8b91	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b94	85 37		sta $37				sta 	zTemp0+1
.8b96	5a		phy				phy 								; copy address in.
.8b97	a0 01		ldy #$01			ldy 	#1
.8b99	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b9c	92 36		sta ($36)			sta 	(zTemp0)
.8b9e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8ba1	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba3	c8		iny				iny
.8ba4	a9 00		lda #$00			lda 	#0
.8ba6	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba8	c8		iny				iny
.8ba9	91 36		sta ($36),y			sta 	(zTemp0),y
.8bab	c8		iny				iny
.8bac	91 36		sta ($36),y			sta 	(zTemp0),y
.8bae	7a		ply				ply
.8baf	60		rts				rts
.8bb0					_ALType:
.8bb0	4c 57 b5	jmp $b557			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8bb3					TypeAndCalculateOperand:
.8bb3	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb5	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8bb7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8bb9	f0 5b		beq $8c16			beq 	_TACOExit
.8bbb	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bbd	f0 57		beq $8c16			beq 	_TACOExit
.8bbf	c8		iny				iny
.8bc0	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8bc2	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8bc4	f0 51		beq $8c17			beq 	CalculateOperand
.8bc6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8bc8	f0 1f		beq $8be9			beq 	_TACOIndirect
.8bca	88		dey				dey 								; undo get of first character
.8bcb	20 17 8c	jsr $8c17			jsr 	CalculateOperand 			; get operand
.8bce	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd0	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bd2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bd4	d0 40		bne $8c16			bne 	_TACOExit
.8bd6	c8		iny				iny
.8bd7	20 d6 ae	jsr $aed6			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bda	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bdc	c9 58		cmp #$58			cmp 	#'X'
.8bde	f0 36		beq $8c16			beq 	_TACOExit
.8be0	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8be2	c9 59		cmp #$59			cmp 	#'Y'
.8be4	f0 30		beq $8c16			beq 	_TACOExit
.8be6					_TACOSyntax:
.8be6	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.8be9					_TACOIndirect:
.8be9	20 17 8c	jsr $8c17			jsr 	CalculateOperand 			; get the operand
.8bec	b1 30		lda ($30),y			lda 	(codePtr),y
.8bee	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bf0	f0 17		beq $8c09			beq 	_TACOIndX
.8bf2	20 5f af	jsr $af5f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bf5	b1 30		lda ($30),y			lda 	(codePtr),y
.8bf7	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bf9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bfb	d0 19		bne $8c16			bne 	_TACOExit
.8bfd	c8		iny				iny
.8bfe	20 d6 ae	jsr $aed6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8c01	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8c03	d0 e1		bne $8be6			bne 	_TACOSyntax
.8c05	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8c07	80 0d		bra $8c16			bra 	_TACOExit
.8c09					_TACOIndX:
.8c09	c8		iny				iny
.8c0a	20 d6 ae	jsr $aed6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8c0d	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8c0f	d0 d5		bne $8be6			bne 	_TACOSyntax
.8c11	20 5f af	jsr $af5f			jsr 	CheckRightBracket			; check )
.8c14	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8c16					_TACOExit:
.8c16	60		rts				rts
.8c17					CalculateOperand:
.8c17	48		pha				pha
.8c18	da		phx				phx
.8c19	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8c1b	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8c1e	fa		plx				plx
.8c1f	68		pla				pla
.8c20	60		rts				rts
.aed6					TACOCheckXY:
.aed6	b1 30		lda ($30),y			lda 	(codePtr),y
.aed8	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aeda	c9 40		cmp #$40			cmp 	#$40
.aedc	d0 21		bne $aeff			bne 	_TCXYFail
.aede	b1 30		lda ($30),y			lda 	(codePtr),y
.aee0	18		clc				clc
.aee1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aee3	85 37		sta $37				sta 	zTemp0+1
.aee5	c8		iny				iny
.aee6	b1 30		lda ($30),y			lda 	(codePtr),y
.aee8	c8		iny				iny
.aee9	85 36		sta $36				sta 	zTemp0
.aeeb	5a		phy				phy 								; save position
.aeec	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aeee	b1 36		lda ($36),y			lda 	(zTemp0),y
.aef0	d0 0c		bne $aefe			bne 	_TCXYPopFail
.aef2	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aef4	b1 36		lda ($36),y			lda 	(zTemp0),y
.aef6	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aef8	f0 08		beq $af02			beq 	_TCXYFound
.aefa	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aefc	f0 04		beq $af02			beq 	_TCXYFound
.aefe					_TCXYPopFail:
.aefe	7a		ply				ply
.aeff					_TCXYFail:
.aeff	a9 00		lda #$00			lda 	#0
.af01	60		rts				rts
.af02					_TCXYFound:
.af02	7a		ply				ply 								; restore position
.af03	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.af05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c21					EditProgramCode:
.8c21	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c24	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c27	20 7b a7	jsr $a77b			jsr 	MemorySearch
.8c2a	90 05		bcc $8c31			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c2c	d0 03		bne $8c31			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c2e	20 90 b7	jsr $b790			jsr 	MemoryDeleteLine 			; delete the line
.8c31					_EPCNoDelete:
.8c31	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c34	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c36	f0 0d		beq $8c45			beq 	_EPCNoInsert
.8c38	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c3b	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c3e	20 7b a7	jsr $a77b			jsr 	MemorySearch
.8c41	18		clc				clc 								; insert at this point.
.8c42	20 c7 b7	jsr $b7c7			jsr 	MemoryInsertLine 			; insert the line
.8c45					_EPCNoInsert:
.8c45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c46					WarmStart:
.8c46	a2 ff		ldx #$ff			ldx 	#$FF
.8c48	9a		txs				txs
.8c49	20 1b b7	jsr $b71b			jsr 	EXTInputLine 				; get line to lineBuffer
.8c4c	20 57 ac	jsr $ac57			jsr 	TokeniseLine 				; tokenise the line
.8c4f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c52	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c55	d0 17		bne $8c6e			bne 	_WSEditCode 				; if so,edit code.
.8c57	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c5a	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c5c	85 30		sta $30				sta 	codePtr
.8c5e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c60	85 31		sta $31				sta 	codePtr+1
.8c62	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c65	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c67	f0 dd		beq $8c46			beq 	WarmStart
.8c69	20 e8 95	jsr $95e8			jsr 	RUNCodePointerLine 			; execute that line.
.8c6c	80 d8		bra $8c46			bra 	WarmStart
.8c6e					_WSEditCode:
.8c6e	20 21 8c	jsr $8c21			jsr 	EditProgramCode
.8c71	20 df 8c	jsr $8cdf			jsr 	ClearCommand
.8c74	80 d0		bra $8c46			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c76					AssembleCommand:
.8c76	a2 00		ldx #$00			ldx 	#0
.8c78	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; start address
.8c7b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c7e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c81	ad 10 04	lda $0410			lda 	NSMantissa1
.8c84	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c87	20 67 af	jsr $af67			jsr 	CheckComma
.8c8a	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; options
.8c8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c90	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c93	60		rts				rts
.8c94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c95					AssertCommand:
.8c95	a2 00		ldx #$00			ldx 	#0
.8c97	20 7f a6	jsr $a67f			jsr 	EvaluateInteger 			; the assert test
.8c9a	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; exit if result is non zero.
.8c9d	d0 05		bne $8ca4			bne 	_ACExit
.8c9f	a9 0a		lda #$0a		lda	#10
.8ca1	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.8ca4					_ACExit:
.8ca4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8ca5					CallCommand:
.8ca5	a2 00		ldx #$00			ldx 	#0
.8ca7	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8caa					_CCClear
.8caa	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8cab	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.8cae	e0 04		cpx #$04			cpx 	#4
.8cb0	d0 f8		bne $8caa			bne 	_CCClear
.8cb2	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8cb4					_CCCParam:
.8cb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cb8	d0 09		bne $8cc3			bne 	_CCCRun6502
.8cba	c8		iny				iny 								; skip comma
.8cbb	e8		inx				inx	 								; next level
.8cbc	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8cbf	e0 03		cpx #$03			cpx 	#3
.8cc1	90 f1		bcc $8cb4			bcc 	_CCCParam 					; done all 3 ?
.8cc3					_CCCRun6502:
.8cc3	5a		phy				phy 								; save position
.8cc4	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8cc7	85 37		sta $37				sta 	zTemp0+1
.8cc9	ad 08 04	lda $0408			lda 	NSMantissa0
.8ccc	85 36		sta $36				sta 	zTemp0
.8cce	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cd1	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cd4	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cd7	20 dc 8c	jsr $8cdc			jsr 	_CCCZTemp0 					; call zTemp0
.8cda	7a		ply				ply 								; restore position and exit
.8cdb	60		rts				rts
.8cdc					_CCCZTemp0:
.8cdc	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8cdf					ClearCommand:
.8cdf	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ce1	85 36		sta $36				sta 	0+zTemp0
.8ce3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ce5	85 37		sta $37				sta 	1+zTemp0
.8ce7					_ClearZeroLoop:
.8ce7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8ce9	f0 24		beq $8d0f			beq 	_ClearZeroEnd
.8ceb	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8ced	a9 00		lda #$00			lda 	#0
.8cef					_ClearOneVariable:
.8cef	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf1	c8		iny				iny
.8cf2	c0 08		cpy #$08			cpy 	#8
.8cf4	d0 f9		bne $8cef			bne 	_ClearOneVariable
.8cf6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cf8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cfa	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cfc	d0 04		bne $8d02			bne 	_ClearNotProcedure
.8cfe	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8d00	91 36		sta ($36),y			sta 	(zTemp0),y
.8d02					_ClearNotProcedure:
.8d02	18		clc				clc 								; go to the next variable
.8d03	b2 36		lda ($36)			lda 	(zTemp0)
.8d05	65 36		adc $36				adc 	zTemp0
.8d07	85 36		sta $36				sta 	zTemp0
.8d09	90 dc		bcc $8ce7			bcc 	_ClearZeroLoop
.8d0b	e6 37		inc $37				inc 	zTemp0+1
.8d0d	80 d8		bra $8ce7			bra 	_ClearZeroLoop
.8d0f					_ClearZeroEnd:
.8d0f	18		clc				clc
.8d10	a5 36		lda $36				lda 	zTemp0
.8d12	69 01		adc #$01			adc 	#1
.8d14	8d 8c 04	sta $048c			sta 	lowMemPtr
.8d17	a5 37		lda $37				lda 	zTemp0+1
.8d19	69 00		adc #$00			adc 	#0
.8d1b	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8d1e	20 35 a8	jsr $a835			jsr 	StackReset
.8d21	20 aa b8	jsr $b8aa			jsr 	StringSystemInitialise
.8d24	20 ea 99	jsr $99ea			jsr 	ProcedureScan
.8d27	20 a4 95	jsr $95a4			jsr 	Command_Restore
.8d2a	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d2d	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d30	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d33	20 b6 a3	jsr $a3b6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d37					ClearScreen:
.8d37	5a		phy				phy
.8d38	20 02 b7	jsr $b702			jsr 	EXTClearScreen
.8d3b	7a		ply				ply
.8d3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d3d					Command_Data:
.8d3d	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d3f	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d41	20 3c 9a	jsr $9a3c			jsr 	ScanForward
.8d44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d45					DimCommand:
.8d45	b1 30		lda ($30),y			lda 	(codePtr),y
.8d47	29 c0		and #$c0			and 	#$C0
.8d49	c9 40		cmp #$40			cmp 	#$40
.8d4b	d0 7a		bne $8dc7			bne 	_DCSyntax
.8d4d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4f	18		clc				clc
.8d50	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d52	85 3f		sta $3f				sta 	zaTemp+1
.8d54	c8		iny				iny
.8d55	b1 30		lda ($30),y			lda 	(codePtr),y
.8d57	c8		iny				iny
.8d58	85 3e		sta $3e				sta 	zaTemp
.8d5a	5a		phy				phy
.8d5b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d5d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d5f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d61	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d63	f0 62		beq $8dc7			beq 	_DCSyntax
.8d65	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d67	29 04		and #$04			and 	#NSBIsArray
.8d69	f0 64		beq $8dcf			beq 	_DCType
.8d6b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d6d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d6f	d0 59		bne $8dca			bne 	_DCRedefine
.8d71	7a		ply				ply
.8d72	20 d2 8d	jsr $8dd2			jsr 	_DCGetSize 				; get array size, check it.
.8d75	5a		phy				phy
.8d76	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d78	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d7a	7a		ply				ply 							; is there a second (e.g. ,x)
.8d7b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d7f	d0 0a		bne $8d8b			bne 	_DCOneDimension
.8d81	c8		iny				iny 							; skip comma
.8d82	20 d2 8d	jsr $8dd2			jsr 	_DCGetSize 				; get 2nd array size
.8d85	5a		phy				phy
.8d86	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d88	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d8a	7a		ply				ply
.8d8b					_DCOneDimension:
.8d8b	5a		phy				phy 							; save position
.8d8c	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d8e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d90	aa		tax				tax
.8d91	c8		iny				iny
.8d92	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d94	e8		inx				inx 							; bump them.
.8d95	1a		inc a				inc 	a
.8d96	20 e9 b3	jsr $b3e9			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d99	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d9b	29 e0		and #$e0			and 	#$E0
.8d9d	d0 23		bne $8dc2			bne 	_DCSize
.8d9f	a0 02		ldy #$02			ldy 	#2 						; get base type
.8da1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8da3	20 e0 8d	jsr $8de0			jsr 	ScaleByBaseType 		; scale by base type
.8da6	a5 36		lda $36				lda 	zTemp0
.8da8	a6 37		ldx $37				ldx 	zTemp0+1
.8daa	20 78 a3	jsr $a378			jsr 	AllocateXABytes 		; allocate memory
.8dad	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8daf	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8db1	c8		iny				iny
.8db2	8a		txa				txa
.8db3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8db5	7a		ply				ply 							; get position back
.8db6	20 5f af	jsr $af5f			jsr 	CheckRightBracket 		; check )
.8db9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dbb	c8		iny				iny 							; consume in case
.8dbc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8dbe	f0 85		beq $8d45			beq 	DimCommand
.8dc0	88		dey				dey 							; undo consume
.8dc1	60		rts				rts
.8dc2					_DCSize:
.8dc2	a9 16		lda #$16		lda	#22
.8dc4	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.8dc7					_DCSyntax:
.8dc7	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.8dca					_DCRedefine:
.8dca	a9 15		lda #$15		lda	#21
.8dcc	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.8dcf					_DCType:
.8dcf	4c 57 b5	jmp $b557			jmp 	TypeError
.8dd2					_DCGetSize:
.8dd2	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8dd4	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 	; get array dimension
.8dd7	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8dd9	f0 e7		beq $8dc2			beq 	_DCSize
.8ddb	c9 fe		cmp #$fe			cmp 	#254
.8ddd	f0 e3		beq $8dc2			beq 	_DCSize
.8ddf	60		rts				rts
.8de0					ScaleByBaseType:
.8de0	29 10		and #$10			and 	#NSBIsString 			; is it string
.8de2	d0 19		bne $8dfd			bne 	_SBBTString
.8de4	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8de6	48		pha				pha
.8de7	a5 36		lda $36				lda 	zTemp0
.8de9	48		pha				pha
.8dea	06 36		asl $36				asl 	zTemp0 					; x 2
.8dec	26 37		rol $37				rol 	zTemp0+1
.8dee	06 36		asl $36				asl 	zTemp0 					; x 4
.8df0	26 37		rol $37				rol 	zTemp0+1
.8df2	68		pla				pla 							; add stacked value = x 5
.8df3	65 36		adc $36				adc 	zTemp0
.8df5	85 36		sta $36				sta 	zTemp0
.8df7	68		pla				pla
.8df8	65 37		adc $37				adc 	zTemp0+1
.8dfa	85 37		sta $37				sta 	zTemp0+1
.8dfc	60		rts				rts
.8dfd					_SBBTString:
.8dfd	06 36		asl $36				asl 	zTemp0
.8dff	26 37		rol $37				rol 	zTemp0+1
.8e01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8e02					EndCommand:
.8e02	4c 46 8c	jmp $8c46			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8e05					UnaryEvent:
.8e05	fa		plx				plx
.8e06	20 29 98	jsr $9829			jsr 	TimerToStackX 				; timer in +0
.8e09	e8		inx				inx  								; put reference into +1
.8e0a	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm
.8e0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8e10	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8e12	d0 57		bne $8e6b			bne 	_UEType
.8e14	e8		inx				inx 								; put the step in +2
.8e15	20 67 af	jsr $af67			jsr 	CheckComma
.8e18	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.8e1b	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.8e1e	ca		dex				dex
.8e1f	ca		dex				dex
.8e20	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e23	85 36		sta $36				sta 	zTemp0
.8e25	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e28	85 37		sta $37				sta 	zTemp0+1
.8e2a	5a		phy				phy
.8e2b	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e2d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e2f	30 36		bmi $8e67			bmi 	_UEFalse 					; exit if signed.
.8e31	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e33	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e36	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e38	c8		iny				iny
.8e39	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e3c	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e3e	c8		iny				iny
.8e3f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e42	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e44	90 21		bcc $8e67			bcc 	_UEFalse 					; no, return FALSE.
.8e46	18		clc				clc
.8e47	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e49	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e4c	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e4f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e51	c8		iny				iny
.8e52	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e55	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e58	91 36		sta ($36),y			sta 	(zTemp0),y
.8e5a	c8		iny				iny
.8e5b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e5e	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e61	91 36		sta ($36),y			sta 	(zTemp0),y
.8e63	7a		ply				ply
.8e64	4c 4e 9b	jmp $9b4e			jmp 	ReturnTrue
.8e67					_UEFalse:
.8e67	7a		ply				ply 								; restore Y
.8e68	4c 5a 9b	jmp $9b5a			jmp 	ReturnFalse 				; and return False
.8e6b					_UEType:
.8e6b	4c 57 b5	jmp $b557			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e6e					ForCommand:
.8e6e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e70	20 d0 a7	jsr $a7d0			jsr 	StackOpen
.8e73	a2 00		ldx #$00			ldx 	#0
.8e75	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm
.8e78	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e7b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e7d	d0 49		bne $8ec8			bne		_FCError
.8e7f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e81	20 6f af	jsr $af6f			jsr 	CheckNextA
.8e84	e8		inx				inx
.8e85	20 7f a6	jsr $a67f			jsr 	EvaluateInteger 			; <from> in +1
.8e88	b1 30		lda ($30),y			lda 	(codePtr),y
.8e8a	c8		iny				iny 								; consume it
.8e8b	48		pha				pha 								; save on stack for later
.8e8c	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e8e	f0 04		beq $8e94			beq 	_FCNoSyntax
.8e90	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e92	d0 37		bne $8ecb			bne 	_FCSyntaxError
.8e94					_FCNoSyntax:
.8e94	e8		inx				inx
.8e95	20 7f a6	jsr $a67f			jsr 	EvaluateInteger
.8e98	20 14 a8	jsr $a814			jsr 	STKSaveCodePosition 		; save loop back position
.8e9b	68		pla				pla 								; restore DOWNTO or TO
.8e9c	5a		phy				phy 								; save Y on the stack
.8e9d	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e9f	f0 02		beq $8ea3			beq 	_FCNotDownTo
.8ea1	a9 02		lda #$02			lda 	#2
.8ea3					_FCNotDownTo:
.8ea3	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8ea4	a0 10		ldy #$10			ldy 	#16
.8ea6	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8ea8	a0 06		ldy #$06			ldy 	#6
.8eaa	ad 08 04	lda $0408			lda 	NSMantissa0
.8ead	91 34		sta ($34),y			sta 	(basicStack),y
.8eaf	ad 10 04	lda $0410			lda 	NSMantissa1
.8eb2	c8		iny				iny
.8eb3	91 34		sta ($34),y			sta 	(basicStack),y
.8eb5	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8eb7	a2 01		ldx #$01			ldx 	#1
.8eb9	20 ce 8e	jsr $8ece			jsr 	FCIntegerToStack
.8ebc	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ebe	a2 02		ldx #$02			ldx 	#2
.8ec0	20 ce 8e	jsr $8ece			jsr 	FCIntegerToStack
.8ec3	20 ee 8e	jsr $8eee			jsr 	CopyIndexToReference
.8ec6	7a		ply				ply 								; restore position
.8ec7	60		rts				rts
.8ec8					_FCError:
.8ec8	4c 57 b5	jmp $b557			jmp 	TypeError
.8ecb					_FCSyntaxError:
.8ecb	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.8ece					FCIntegerToStack:
.8ece	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8ed1	10 03		bpl $8ed6			bpl	 	_FCNotNegative
.8ed3	20 d1 a6	jsr $a6d1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ed6					_FCNotNegative:
.8ed6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ed9	91 34		sta ($34),y			sta 	(basicStack),y
.8edb	c8		iny				iny
.8edc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8edf	91 34		sta ($34),y			sta 	(basicStack),y
.8ee1	c8		iny				iny
.8ee2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ee5	91 34		sta ($34),y			sta 	(basicStack),y
.8ee7	c8		iny				iny
.8ee8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8eeb	91 34		sta ($34),y			sta 	(basicStack),y
.8eed	60		rts				rts
.8eee					CopyIndexToReference:
.8eee	5a		phy				phy
.8eef	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ef1	38		sec				sec 								; (because we copy from offset 8)
.8ef2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ef4	e9 08		sbc #$08			sbc 	#8
.8ef6	85 36		sta $36				sta 	zTemp0
.8ef8	c8		iny				iny
.8ef9	b1 34		lda ($34),y			lda 	(basicStack),y
.8efb	e9 00		sbc #$00			sbc 	#0
.8efd	85 37		sta $37				sta 	zTemp0+1
.8eff	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8f01	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8f03	b1 34		lda ($34),y			lda 	(basicStack),y
.8f05	0a		asl a				asl 	a 							; into carry
.8f06	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8f08	90 14		bcc $8f1e			bcc 	_CITRNormal
.8f0a	38		sec				sec
.8f0b					_CITRNegative:
.8f0b	a9 00		lda #$00			lda 	#0
.8f0d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f0f	91 36		sta ($36),y			sta 	(zTemp0),y
.8f11	c8		iny				iny
.8f12	ca		dex				dex
.8f13	d0 f6		bne $8f0b			bne 	_CITRNegative
.8f15	88		dey				dey 								; look at MSB of mantissa
.8f16	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8f18	09 80		ora #$80			ora 	#$80
.8f1a	91 36		sta ($36),y			sta 	(zTemp0),y
.8f1c	7a		ply				ply
.8f1d	60		rts				rts
.8f1e					_CITRNormal:
.8f1e	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f20	91 36		sta ($36),y			sta 	(zTemp0),y
.8f22	c8		iny				iny
.8f23	ca		dex				dex
.8f24	d0 f8		bne $8f1e			bne 	_CITRNormal
.8f26	7a		ply				ply 								; and exit.
.8f27	60		rts				rts
.8f28					NextCommand:
.8f28	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f2a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f2c	20 fc a7	jsr $a7fc			jsr 	StackCheckFrame
.8f2f	5a		phy				phy
.8f30	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f32	b1 34		lda ($34),y			lda 	(basicStack),y
.8f34	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f36	30 02		bmi $8f3a			bmi 	_NCStepNeg
.8f38	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f3a					_NCStepNeg:
.8f3a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f3c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f3e	18		clc				clc
.8f3f					_NCBump:
.8f3f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f41	91 34		sta ($34),y			sta 	(basicStack),y
.8f43	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f45	c8		iny				iny 								; next byte
.8f46	ca		dex				dex 								; do four times
.8f47	d0 f6		bne $8f3f			bne 	_NCBump
.8f49	20 ee 8e	jsr $8eee			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f4c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f4e	b1 34		lda ($34),y			lda 	(basicStack),y
.8f50	0a		asl a				asl 	a 							; sign bit to carry
.8f51	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f53	85 38		sta $38				sta 	zTemp1
.8f55	90 02		bcc $8f59			bcc 	_NCCompRev 					; use if step is +ve
.8f57	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f59					_NCCompRev:
.8f59	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f5b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f5d	85 39		sta $39				sta 	zTemp1+1
.8f5f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f61	38		sec				sec
.8f62					_NCCompare:
.8f62	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f64	b1 34		lda ($34),y			lda 	(basicStack),y
.8f66	a4 39		ldy $39				ldy 	zTemp1+1
.8f68	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f6a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f6c	e6 39		inc $39				inc 	zTemp1+1
.8f6e	ca		dex				dex 								; do it 4 times.
.8f6f	d0 f1		bne $8f62			bne 	_NCCompare
.8f71	50 02		bvc $8f75			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f73	49 80		eor #$80			eor 	#$80
.8f75					_NCNoOverflow:
.8f75	7a		ply				ply 								; restore Y position
.8f76	0a		asl a				asl 	a 							; is bit 7 set.
.8f77	90 04		bcc $8f7d			bcc 	_NCLoopback 				; if no , >= so loop back
.8f79	20 ee a7	jsr $a7ee			jsr 	StackClose 					; exit the loop
.8f7c	60		rts				rts
.8f7d					_NCLoopBack:
.8f7d	20 25 a8	jsr $a825			jsr 	STKLoadCodePosition 		; loop back
.8f80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f81					RectangleCommand:
.8f81	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.8f83	80 02		bra $8f87			bra 	ShapeDrawCmd
.8f85					CircleCommand:
.8f85	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.8f87					ShapeDrawCmd:
.8f87	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.8f8a					ShapeDraw:
.8f8a	0d e3 06	ora $06e3			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f8d	4c 09 90	jmp $9009			jmp 	ExecuteGraphicCommand	 	; and complete
.8f90					SpriteCommand:
.8f90	a2 00		ldx #$00			ldx 	#0
.8f92	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get image number.
.8f95	5a		phy				phy
.8f96	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.8f98	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f9b	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f9d	b0 0d		bcs $8fac			bcs 	_SCRange
.8f9f	a0 ff		ldy #$ff			ldy 	#255
.8fa1	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.8fa4	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.8fa6	7a		ply				ply
.8fa7	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.8faa	80 5d		bra $9009			bra 	ExecuteGraphicCommand
.8fac					_SCRange:
.8fac	4c 52 b5	jmp $b552			jmp 	RangeError
.8faf					ImageCommand:
.8faf	a2 00		ldx #$00			ldx 	#0
.8fb1	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get image number.
.8fb4	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.8fb7					ImageRunDraw:
.8fb7	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.8fb9	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.8fbc	ad e9 06	lda $06e9			lda 	gxDrawScale
.8fbf	0a		asl a				asl 	a
.8fc0	0a		asl a				asl 	a
.8fc1	0a		asl a				asl 	a
.8fc2	a8		tay				tay
.8fc3	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.8fc5	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fc8	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.8fcb	60		rts				rts
.8fcc					TextCommand:
.8fcc	a2 00		ldx #$00			ldx 	#0
.8fce	20 67 a6	jsr $a667			jsr 	EvaluateString 				; get text
.8fd1	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.8fd4					TextRunDraw:
.8fd4	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.8fd6	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.8fd9	a0 00		ldy #$00			ldy 	#0
.8fdb					_IRDLoop:
.8fdb	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fde	85 37		sta $37				sta 	zTemp0+1
.8fe0	ad 08 04	lda $0408			lda 	NSMantissa0
.8fe3	85 36		sta $36				sta 	zTemp0
.8fe5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fe7	f0 13		beq $8ffc			beq 	_IRDExit
.8fe9	5a		phy				phy									; save string pos
.8fea	48		pha				pha 								; save char
.8feb	ad e9 06	lda $06e9			lda 	gxDrawScale 				; get scale
.8fee	0a		asl a				asl 	a
.8fef	0a		asl a				asl 	a
.8ff0	0a		asl a				asl 	a
.8ff1	a8		tay				tay
.8ff2	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.8ff4	fa		plx				plx 								; char to draw
.8ff5	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.8ff8	7a		ply				ply 								; restore string pos
.8ff9	c8		iny				iny
.8ffa	90 df		bcc $8fdb			bcc 	_IRDLoop 					; go back if no error.
.8ffc					_IRDExit:
.8ffc	60		rts				rts
.8ffd					PlotCommand:
.8ffd	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.8fff	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.9002	80 05		bra $9009			bra 	ExecuteGraphicCommand
.9004					LineCommand:
.9004	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.9006	20 15 90	jsr $9015			jsr 	RunGraphicsCommand
.9009					ExecuteGraphicCommand:
.9009	0d e2 06	ora $06e2			ora 	gxCommandID 				; make a full command
.900c	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw 				; draw it and exit
.900f	b0 01		bcs $9012			bcs 	_EGCError
.9011	60		rts				rts
.9012					_EGCError:
.9012	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.9015					RunGraphicsCommand:
.9015	8d e2 06	sta $06e2			sta 	gxCommandID					; save TODO graphics command.
.9018	68		pla				pla 								; pop handler address
.9019	fa		plx				plx
.901a	1a		inc a				inc 	a
.901b	d0 01		bne $901e			bne 	_RGINoCarry
.901d	e8		inx				inx
.901e					_RGINoCarry:
.901e	8d e7 06	sta $06e7			sta 	GXHandler
.9021	8e e8 06	stx $06e8			stx 	GXHandler+1
.9024					_RGICommandLoop:
.9024	b1 30		lda ($30),y			lda 	(codePtr),y
.9026	c8		iny				iny
.9027	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.9029	f0 53		beq $907e			beq 	_RGI_To
.902b	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.902d	f0 55		beq $9084			beq 	_RGI_Here
.902f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9031	f0 3d		beq $9070			beq 	_RGI_Exit
.9033	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9035	f0 39		beq $9070			beq 	_RGI_Exit
.9037	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.9039	f0 3e		beq $9079			beq 	_RGI_Frame
.903b	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.903d	f0 33		beq $9072			beq 	_RGI_Solid
.903f	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9041	f0 4b		beq $908e			beq 	_RGI_By
.9043	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9045	f0 17		beq $905e			beq 	_RGI_Move2
.9047	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.9049	f0 65		beq $90b0			beq 	_RGI_Dim
.904b	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.904d	f0 78		beq $90c7			beq 	_RGI_Colour
.904f	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9051	f0 74		beq $90c7			beq 	_RGI_Colour
.9053	ae e2 06	ldx $06e2			ldx 	gxCommandID
.9056	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.9058	d0 03		bne $905d			bne 	_RGI_Move 					; move
.905a	4c f1 90	jmp $90f1			jmp		_RGI_SpriteInstructions
.905d					_RGI_Move:
.905d	88		dey				dey 								; unpick get.
.905e					_RGI_Move2:
.905e	20 17 91	jsr $9117			jsr 	GCGetCoordinatePair 		; move to here
.9061	20 3e 91	jsr $913e			jsr 	GCCopyPairToStore 			; save
.9064	5a		phy				phy
.9065	20 34 91	jsr $9134			jsr 	GCLoadAXY 					; load in
.9068	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.906a	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.906d	7a		ply				ply
.906e	80 b4		bra $9024			bra 	_RGICommandLoop 			; and go round
.9070					_RGI_Exit:
.9070	88		dey				dey 								; unpick : / EOL
.9071	60		rts				rts
.9072					_RGI_Solid:
.9072	a9 02		lda #$02			lda 	#2
.9074	8d e3 06	sta $06e3			sta 	gxFillSolid
.9077	80 ab		bra $9024			bra 	_RGICommandLoop
.9079					_RGI_Frame:
.9079	9c e3 06	stz $06e3			stz 	gxFillSolid
.907c	80 a6		bra $9024			bra 	_RGICommandLoop
.907e					_RGI_To:
.907e	20 17 91	jsr $9117			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9081	20 3e 91	jsr $913e			jsr 	GCCopyPairToStore
.9084					_RGI_Here:
.9084	5a		phy				phy
.9085	20 34 91	jsr $9134			jsr 	GCLoadAXY 					; load it into AXY
.9088	20 ee 90	jsr $90ee			jsr 	_RGICallHandler 			; go do whatever it is.
.908b	7a		ply				ply
.908c	80 96		bra $9024			bra 	_RGICommandLoop 			; and go round
.908e					_RGI_By:
.908e	20 24 91	jsr $9124			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9091	18		clc				clc
.9092	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9095	6d e4 06	adc $06e4			adc 	gxxPos
.9098	8d e4 06	sta $06e4			sta 	gxXPos
.909b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.909e	6d e5 06	adc $06e5			adc 	gxxPos+1
.90a1	8d e5 06	sta $06e5			sta 	gxXPos+1
.90a4	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.90a7	18		clc				clc
.90a8	6d e6 06	adc $06e6			adc 	gxYPos
.90ab	8d e6 06	sta $06e6			sta 	gxYPos
.90ae	80 d4		bra $9084			bra 	_RGI_Here
.90b0					_RGI_Dim:
.90b0	a2 01		ldx #$01			ldx	 	#1
.90b2	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger
.90b5	ad 09 04	lda $0409			lda 	NSMantissa0+1
.90b8	c9 00		cmp #$00			cmp 	#0
.90ba	f0 2f		beq $90eb			beq 	_RGIRange
.90bc	c9 09		cmp #$09			cmp 	#8+1
.90be	b0 2b		bcs $90eb			bcs		_RGIRange
.90c0	3a		dec a				dec 	a
.90c1	8d e9 06	sta $06e9			sta 	gxDrawScale
.90c4	4c 24 90	jmp $9024			jmp 	_RGICommandLoop
.90c7					_RGI_Colour:
.90c7	a2 01		ldx #$01			ldx 	#1 							; colour
.90c9	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger
.90cc	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90ce	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.90d1	b1 30		lda ($30),y			lda 	(codePtr),y
.90d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90d5	d0 04		bne $90db			bne 	_RGICDefaultMode
.90d7	c8		iny				iny
.90d8	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger
.90db					_RGICDefaultMode:
.90db	5a		phy				phy
.90dc	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.90de	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90e1	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90e4	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.90e7	7a		ply				ply
.90e8	4c 24 90	jmp $9024			jmp 	_RGICommandLoop 			; and go round
.90eb					_RGIRange:
.90eb	4c 52 b5	jmp $b552			jmp 	RangeError
.90ee					_RGICallHandler:
.90ee	6c e7 06	jmp ($06e7)			jmp 	(GXHandler)
.90f1					_RGI_SpriteInstructions:
.90f1	c9 be		cmp #$be			cmp 	#KWD_OFF
.90f3	f0 07		beq $90fc			beq 	_RGISpriteOff
.90f5	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90f7	f0 13		beq $910c			beq 	_RGISetImage
.90f9	4c 5d 90	jmp $905d			jmp 	_RGI_Move
.90fc					_RGISpriteOff:
.90fc	5a		phy				phy
.90fd	a0 01		ldy #$01			ldy 	#1
.90ff	a2 00		ldx #$00			ldx 	#0
.9101					_RGIDoCommandLoop:
.9101	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.9103	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.9106	7a		ply				ply
.9107	b0 e2		bcs $90eb			bcs 	_RGIRange
.9109	4c 24 90	jmp $9024			jmp 	_RGICommandLoop
.910c					_RGISetImage:
.910c	a2 01		ldx #$01			ldx 	#1
.910e	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger
.9111	5a		phy				phy
.9112	aa		tax				tax
.9113	a0 00		ldy #$00			ldy 	#0
.9115	80 ea		bra $9101			bra 	_RGIDoCommandLoop
.9117					GCGetCoordinatePair:
.9117	a2 01		ldx #$01			ldx 	#1
.9119	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.911c	20 67 af	jsr $af67			jsr 	CheckComma
.911f	e8		inx				inx
.9120	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.9123	60		rts				rts
.9124					GCSignedCoordinatePair:
.9124	a2 01		ldx #$01			ldx 	#1
.9126	20 a0 a6	jsr $a6a0			jsr 	Evaluate16BitIntegerSigned
.9129	20 67 af	jsr $af67			jsr 	CheckComma
.912c	e8		inx				inx
.912d	20 a0 a6	jsr $a6a0			jsr 	Evaluate16BitIntegerSigned
.9130	60		rts				rts
.9131					_GCCPRange:
.9131	4c 52 b5	jmp $b552			jmp 	RangeError
.9134					GCLoadAXY:
.9134	ad e5 06	lda $06e5			lda 	gxXPos+1
.9137	ae e4 06	ldx $06e4			ldx 	gxXPos
.913a	ac e6 06	ldy $06e6			ldy 	gxYPos
.913d	60		rts				rts
.913e					GCCopyPairToStore:
.913e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9141	8d e4 06	sta $06e4			sta 	gxXPos
.9144	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9147	8d e5 06	sta $06e5			sta 	gxXPos+1
.914a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.914d	8d e6 06	sta $06e6			sta 	gxYPos
.9150	60		rts				rts
.06e2					gxCommandID:
>06e2							.fill 	1
.06e3					gxFillSolid:
>06e3							.fill 	1
.06e4					gxXPos:
>06e4							.fill 	2
.06e6					gxYPos:
>06e6							.fill 	1
.06e7					gxHandler:
>06e7							.fill 	2
.06e9					gxDrawScale:
>06e9							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9151					BitmapCtrl:
.9151	b1 30		lda ($30),y			lda 	(codePtr),y
.9153	c8		iny				iny
.9154	a2 01		ldx #$01			ldx 	#1
.9156	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9158	f0 11		beq $916b			beq 	BitmapSwitch
.915a	ca		dex				dex
.915b	c9 be		cmp #$be			cmp 	#KWD_OFF
.915d	f0 0c		beq $916b			beq 	BitmapSwitch
.915f	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get the colour
.9162	5a		phy				phy
.9163	aa		tax				tax
.9164	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.9166	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.9169	7a		ply				ply
.916a	60		rts				rts
.916b					BitmapSwitch:
.916b	5a		phy				phy
.916c	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.916e	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.9170	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.9173	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.9175	a0 00		ldy #$00			ldy 	#0
.9177	a2 ff		ldx #$ff			ldx 	#$FF
.9179	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.917c	9c e3 06	stz $06e3			stz 	gxFillSolid
.917f	9c e4 06	stz $06e4			stz 	gxXPos
.9182	9c e5 06	stz $06e5			stz 	gxXPos+1
.9185	9c e6 06	stz $06e6			stz 	gxYPos
.9188	9c e9 06	stz $06e9			stz 	gxDrawScale
.918b	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.918d	a2 00		ldx #$00			ldx 	#0
.918f	a0 00		ldy #$00			ldy 	#0
.9191	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.9194	7a		ply				ply
.9195	60		rts				rts
.9196					SpritesCtrl:
.9196	b1 30		lda ($30),y			lda 	(codePtr),y
.9198	c8		iny				iny
.9199	a2 01		ldx #$01			ldx 	#1
.919b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.919d	f0 08		beq $91a7			beq 	SpriteSwitch
.919f	ca		dex				dex
.91a0	c9 be		cmp #$be			cmp 	#KWD_OFF
.91a2	f0 03		beq $91a7			beq 	SpriteSwitch
.91a4	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.91a7					SpriteSwitch:
.91a7	5a		phy				phy
.91a8	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.91aa	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.91ac	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.91af	7a		ply				ply
.91b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.91b1					GfxCommand:
.91b1	a2 00		ldx #$00			ldx 	#0
.91b3	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; command
.91b6	20 67 af	jsr $af67			jsr 	CheckComma
.91b9	e8		inx				inx
.91ba	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; X
.91bd	20 67 af	jsr $af67			jsr 	CheckComma
.91c0	e8		inx				inx
.91c1	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; Y
.91c4	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91c7	4a		lsr a				lsr 	a
.91c8	d0 16		bne $91e0			bne 	_GfxError
.91ca	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91cd	b0 11		bcs $91e0			bcs 	_GfxError 					; bit 7 should have been zero
.91cf	5a		phy				phy 								; save pos
.91d0	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91d3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91d6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91d9	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw
.91dc	b0 02		bcs $91e0			bcs 	_GfxError
.91de	7a		ply				ply 								; restore pos and exit.
.91df	60		rts				rts
.91e0					_GfxError:
.91e0	4c 52 b5	jmp $b552			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91e3					Command_GOSUB:
.91e3	a2 00		ldx #$00			ldx 	#0
.91e5	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91e8	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91ea	20 d0 a7	jsr $a7d0			jsr 	StackOpen 					; create frame
.91ed	20 14 a8	jsr $a814			jsr 	STKSaveCodePosition 		; save current position
.91f0	4c 06 92	jmp $9206			jmp 	GotoStackX
.91f3					Command_RETURN:
.91f3	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91f5	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91f7	20 fc a7	jsr $a7fc			jsr 	StackCheckFrame
.91fa	20 25 a8	jsr $a825			jsr 	STKLoadCodePosition 		; restore code position
.91fd	20 ee a7	jsr $a7ee			jsr 	StackClose
.9200	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9201					GotoCommand:
.9201	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9203	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.9206					GotoStackX:
.9206	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9209	48		pha				pha 								; it is slightly inefficient, just in cases.
.920a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.920d	fa		plx				plx
.920e	20 7b a7	jsr $a77b			jsr 	MemorySearch 				; transfer to line number AX.
.9211	90 05		bcc $9218			bcc 	_GotoError 					; not found, off end.
.9213	d0 03		bne $9218			bne 	_GotoError 					; not found exactly
.9215	4c e1 95	jmp $95e1			jmp 	RunNewLine 					; and go straight to new line code.
.9218					_GotoError:
.9218	a9 0d		lda #$0d		lda	#13
.921a	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.921d					UnaryHit:
.921d	fa		plx				plx
.921e	a9 36		lda #$36			lda 	#zTemp0
.9220	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9223	20 67 af	jsr $af67			jsr 	CheckComma
.9226	e8		inx				inx
.9227	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get sprite number 1
.922a	20 5f af	jsr $af5f			jsr		CheckRightBracket
.922d	ca		dex				dex 								; fix back up again.
.922e	da		phx				phx 								; save X/Y
.922f	5a		phy				phy
.9230	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9233	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9236	aa		tax				tax
.9237	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.9239	20 d9 80	jsr $80d9			jsr 	GXGraphicDraw 				; calculate result
.923c	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.923d	7a		ply				ply 								; restore XY
.923e	fa		plx				plx
.923f	20 1e a7	jsr $a71e			jsr 	NSMSetByte 					; return the hit result
.9242	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9243					IfCommand:
.9243	a2 00		ldx #$00			ldx 	#0 							; If what.
.9245	20 5c a6	jsr $a65c			jsr 	EvaluateNumber
.9248	b1 30		lda ($30),y			lda 	(codePtr),y
.924a	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.924c	d0 0a		bne $9258			bne 	_IFStructured
.924e	c8		iny				iny 								; consume THEN
.924f	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; is it zero
.9252	f0 01		beq $9255			beq 	_IfFail 					; if fail, go to next line
.9254	60		rts				rts 								; if THEN just continue
.9255					_IfFail:
.9255	4c 46 96	jmp $9646			jmp 	EOLCommand
.9258					_IfStructured:
.9258	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; is it zero
.925b	d0 07		bne $9264			bne 	_IfExit 					; if not, then continue normally.
.925d	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.925f	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9261	20 3c 9a	jsr $9a3c			jsr 	ScanForward 				; and run from there/
.9264					_IfExit:
.9264	60		rts				rts
.9265					ElseCode:
.9265	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9267	aa		tax				tax 								; so just go to the structure exit
.9268	20 3c 9a	jsr $9a3c			jsr 	ScanForward
.926b	60		rts				rts
.926c					EndIf:
.926c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.926d					UnaryJoyX:
.926d	18		clc				clc
.926e	80 01		bra $9271			bra 	JoyMain
.9270					UnaryJoyY:
.9270	38		sec				sec
.9271					JoyMain:
.9271	fa		plx				plx 								; get pos
.9272	08		php				php 								; save carry (set for Y)
.9273	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9276	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.9279	20 49 b7	jsr $b749			jsr 	EXTReadController 			; read the controller.
.927c	28		plp				plp
.927d	90 02		bcc $9281			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.927f	4a		lsr a				lsr 	a
.9280	4a		lsr a				lsr 	a
.9281					_JMNoShift:
.9281	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9282	b0 0a		bcs $928e			bcs 	_JMIsRight
.9284	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9285	b0 04		bcs $928b			bcs 	_JMIsLeft
.9287	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; zero result
.928a	60		rts				rts
.928b					_JMIsLeft:
.928b	4c 4e 9b	jmp $9b4e			jmp 	ReturnTrue
.928e					_JMIsRight:
.928e	a9 01		lda #$01			lda 	#1
.9290	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.9293	60		rts				rts
.9294					UnaryJoyB:
.9294	fa		plx				plx 								; get pos
.9295	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9298	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.929b	20 49 b7	jsr $b749			jsr 	EXTReadController 			; read the controller.
.929e	4a		lsr a				lsr 	a
.929f	4a		lsr a				lsr 	a
.92a0	4a		lsr a				lsr 	a
.92a1	4a		lsr a				lsr 	a
.92a2	29 01		and #$01			and 	#1
.92a4	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.92a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.92a8					LetCommand:
.92a8	a2 00		ldx #$00			ldx 	#0
.92aa	b1 30		lda ($30),y			lda 	(codePtr),y
.92ac	c9 10		cmp #$10			cmp 	#KWD_AT
.92ae	d0 16		bne $92c6			bne 	_LCStandard
.92b0	c8		iny				iny 								; skip equal
.92b1	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm 				; get a number
.92b4	20 07 a0	jsr $a007			jsr 	Dereference 				; dereference it
.92b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.92ba	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.92bc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92bf	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92c1	d0 10		bne $92d3			bne 	_LCMain
.92c3	4c 57 b5	jmp $b557			jmp 	TypeError 					; was a reference before.
.92c6					_LCStandard:
.92c6	ad da 9e	lda $9eda			lda 	PrecedenceLevel+"*"			; precedence > this
.92c9	20 f4 9e	jsr $9ef4			jsr 	EvaluateExpressionAtPrecedence
.92cc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92cf	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92d1	f0 0e		beq $92e1			beq 	_LetGoProc 					; it's a procedure call.
.92d3					_LCMain:
.92d3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92d5	20 6f af	jsr $af6f			jsr 	CheckNextA
.92d8	e8		inx				inx 								; RHS
.92d9	20 53 a6	jsr $a653			jsr 	EvaluateValue
.92dc	ca		dex				dex
.92dd	20 e4 92	jsr $92e4			jsr 	AssignVariable
.92e0	60		rts				rts
.92e1					_LetGoProc:
.92e1	4c bc 94	jmp $94bc			jmp 	CallProcedure
.92e4					AssignVariable:
.92e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92e7	48		pha				pha 								; save a copy
.92e8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92eb	29 10		and #$10			and 	#NSBIsString
.92ed	d0 0b		bne $92fa			bne 	_ASError
.92ef	68		pla				pla 								; get back
.92f0	29 10		and #$10			and 	#NSBIsString 				; check type
.92f2	d0 03		bne $92f7			bne 	_ASString
.92f4	4c 2f 9f	jmp $9f2f			jmp 	AssignNumber
.92f7					_ASString:
.92f7	4c 9d 9f	jmp $9f9d			jmp 	AssignString
.92fa					_ASError:
.92fa	4c 57 b5	jmp $b557			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92fd					Command_List:
.92fd	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.9300	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.9303	9c 14 04	stz $0414			stz 	NSMantissa1+4
.9306	a9 ff		lda #$ff			lda 	#$FF
.9308	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.930b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.930e	b1 30		lda ($30),y			lda 	(codePtr),y
.9310	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9312	f0 1e		beq $9332			beq 	_CLSecond
.9314	20 90 93	jsr $9390			jsr 	CLIsDigit 					; if not digit, list all
.9317	b0 24		bcs $933d			bcs 	_CLStart
.9319	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.931b	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.931e	b1 30		lda ($30),y			lda 	(codePtr),y
.9320	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9322	f0 0e		beq $9332			beq 	_CLSecond 					; if so go get it
.9324	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9327	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.932a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.932d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9330	80 0b		bra $933d			bra 	_CLStart
.9332					_CLSecond:
.9332	c8		iny				iny 								; consume comma
.9333	20 90 93	jsr $9390			jsr 	CLIsDigit 					; digit found
.9336	b0 05		bcs $933d			bcs 	_CLStart 					; if not, continue listing
.9338	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.933a	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger
.933d					_CLStart
.933d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.933f	85 30		sta $30				sta 	codePtr
.9341	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9343	85 31		sta $31				sta 	codePtr+1
.9345					_CLLoop:
.9345	20 46 b7	jsr $b746			jsr 	EXTBreakCheck 				; break check
.9348	f0 30		beq $937a			beq 	_CLExit
.934a	b2 30		lda ($30)			lda 	(codePtr)
.934c	f0 2c		beq $937a			beq 	_CLExit
.934e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9350	20 7d 93	jsr $937d			jsr 	CLCompareLineNo
.9353	90 18		bcc $936d			bcc 	_CLNext
.9355	a2 07		ldx #$07			ldx 	#7
.9357	20 7d 93	jsr $937d			jsr 	CLCompareLineNo
.935a	f0 02		beq $935e			beq 	_CLDoThisOne
.935c	b0 0f		bcs $936d			bcs 	_CLNext
.935e					_CLDoThisOne:
.935e	20 41 98	jsr $9841			jsr 	ListConvertLine 			; convert line into token Buffer
.9361	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9363	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9365	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.9368	a9 0d		lda #$0d			lda 	#13 						; new line
.936a	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.936d					_CLNext:
.936d	18		clc				clc
.936e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9370	65 30		adc $30				adc 	codePtr
.9372	85 30		sta $30				sta 	codePtr
.9374	90 02		bcc $9378			bcc 	_CREExit
.9376	e6 31		inc $31				inc 	codePtr+1
.9378					_CREExit:
.9378	80 cb		bra $9345			bra 	_CLLoop
.937a					_CLExit:
.937a	4c 46 8c	jmp $8c46			jmp 	WarmStart
.937d					CLCompareLineNo:
.937d	38		sec				sec
.937e	a0 01		ldy #$01			ldy 	#1
.9380	b1 30		lda ($30),y			lda 	(codePtr),y
.9382	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9385	85 36		sta $36				sta 	zTemp0
.9387	c8		iny				iny
.9388	b1 30		lda ($30),y			lda 	(codePtr),y
.938a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.938d	05 36		ora $36				ora 	zTemp0
.938f	60		rts				rts
.9390					CLIsDigit:
.9390	b1 30		lda ($30),y			lda 	(codePtr),y
.9392	c9 30		cmp #$30			cmp 	#"0"
.9394	90 03		bcc $9399			bcc	 	_CLIDExitFalse
.9396	c9 3a		cmp #$3a			cmp 	#"9"+1
.9398	60		rts				rts
.9399					_CLIDExitFalse:
.9399	38		sec				sec
.939a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.939b					Command_LOCAL:
.939b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.939d	20 a9 93	jsr $93a9			jsr 	LocaliseNextTerm 			; convert term to a local.
.93a0	b1 30		lda ($30),y			lda 	(codePtr),y
.93a2	c8		iny				iny
.93a3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93a5	f0 f4		beq $939b			beq 	Command_LOCAL
.93a7	88		dey				dey 								; unpick pre-get
.93a8	60		rts				rts
.93a9					LocaliseNextTerm:
.93a9	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm 				; evaluate the term
.93ac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93af	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.93b1	f0 61		beq $9414			beq		_LNTError
.93b3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.93b6	85 36		sta $36				sta 	zTemp0
.93b8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93bb	85 37		sta $37				sta  	zTemp0+1
.93bd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93c0	29 10		and #$10			and 	#NSBIsString
.93c2	d0 1e		bne $93e2			bne 	_LNTPushString
.93c4	5a		phy				phy
.93c5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93c7					_LNTPushNumLoop:
.93c7	b1 36		lda ($36),y			lda		(zTemp0),y
.93c9	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.93cc	c8		iny				iny
.93cd	c0 05		cpy #$05			cpy 	#5
.93cf	d0 f6		bne $93c7			bne 	_LNTPushNumLoop
.93d1	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93d3	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.93d6	a5 37		lda $37				lda 	zTemp0+1
.93d8	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.93db	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93dd	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.93e0	7a		ply				ply
.93e1	60		rts				rts
.93e2					_LNTPushString:
.93e2	5a		phy				phy
.93e3	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93e5	85 38		sta $38				sta 	zTemp1
.93e7	a0 01		ldy #$01			ldy 	#1
.93e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.93eb	85 39		sta $39				sta 	zTemp1+1
.93ed	a0 00		ldy #$00			ldy 	#0 							; output string
.93ef	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93f1	f0 0a		beq $93fd			beq 	_LNTStringOut
.93f3					_LNTPushStrLoop:
.93f3	b1 38		lda ($38),y			lda 	(zTemp1),y
.93f5	f0 06		beq $93fd			beq 	_LNTStringOut
.93f7	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.93fa	c8		iny				iny
.93fb	80 f6		bra $93f3			bra 	_LNTPushStrLoop
.93fd					_LNTStringOut:
.93fd	98		tya				tya									; output length
.93fe	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.9401	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9404	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.9407	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.940a	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.940d	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.940f	20 ae a7	jsr $a7ae			jsr 	StackPushByte
.9412	7a		ply				ply
.9413	60		rts				rts
.9414					_LNTError:
.9414	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.af06					LocalPopValue:
.af06	20 c7 a7	jsr $a7c7			jsr 	StackPopByte
.af09	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.af0b	d0 17		bne $af24			bne 	_LPVString
.af0d	20 c7 a7	jsr $a7c7			jsr 	StackPopByte 				; address
.af10	85 37		sta $37				sta 	zTemp0+1
.af12	20 c7 a7	jsr $a7c7			jsr 	StackPopByte
.af15	85 36		sta $36				sta 	zTemp0
.af17	5a		phy				phy
.af18	a0 04		ldy #$04			ldy 	#4 							; copy back
.af1a					_LPVNumberCopy:
.af1a	20 c7 a7	jsr $a7c7			jsr 	StackPopByte
.af1d	91 36		sta ($36),y			sta 	(zTemp0),y
.af1f	88		dey				dey
.af20	10 f8		bpl $af1a			bpl 	_LPVNumberCopy
.af22	7a		ply				ply 								; and complete
.af23	60		rts				rts
.af24					_LPVString:
.af24	20 c7 a7	jsr $a7c7			jsr 	StackPopByte 				; address of record => zTemp0
.af27	85 37		sta $37				sta 	zTemp0+1
.af29	20 c7 a7	jsr $a7c7			jsr 	StackPopByte
.af2c	85 36		sta $36				sta 	zTemp0
.af2e	5a		phy				phy
.af2f	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af31	85 38		sta $38				sta 	zTemp1
.af33	a0 01		ldy #$01			ldy 	#1
.af35	b1 36		lda ($36),y			lda 	(zTemp0),y
.af37	85 39		sta $39				sta 	zTemp1+1
.af39	20 c7 a7	jsr $a7c7			jsr 	StackPopByte 				; # to get => y
.af3c	a8		tay				tay
.af3d	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af3f	f0 0e		beq $af4f			beq 	_LPVStringCopied
.af41	a9 00		lda #$00			lda 	#0 							; NULL on end
.af43	91 38		sta ($38),y			sta 	(zTemp1),y
.af45					_LPVStringCopy:
.af45	88		dey				dey
.af46	30 07		bmi $af4f			bmi 	_LPVStringCopied
.af48	20 c7 a7	jsr $a7c7			jsr 	StackPopByte
.af4b	91 38		sta ($38),y			sta 	(zTemp1),y
.af4d	80 f6		bra $af45			bra 	_LPVStringCopy
.af4f					_LPVStringCopied:
.af4f	fa		plx				plx
.af50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9417					NewCommand:
.9417	20 59 a7	jsr $a759			jsr 	MemoryNew
.941a	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.941d	20 df 8c	jsr $8cdf			jsr 	ClearCommand 				; clear everything.
.9420	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.9421					PaletteCommand:
.9421	a2 00		ldx #$00			ldx 	#0
.9423	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; colour
.9426	20 67 af	jsr $af67			jsr 	CheckComma
.9429	e8		inx				inx
.942a	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; r
.942d	20 67 af	jsr $af67			jsr 	CheckComma
.9430	e8		inx				inx
.9431	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; g
.9434	20 67 af	jsr $af67			jsr 	CheckComma
.9437	e8		inx				inx
.9438	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; b
.943b	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.943e	85 36		sta $36				sta 	zTemp0
.9440	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.9442	85 37		sta $37				sta 	zTemp0+1
.9444	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.9446	26 37		rol $37				rol	 	zTemp0+1
.9448	06 36		asl $36				asl 	zTemp0
.944a	26 37		rol $37				rol	 	zTemp0+1
.944c	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.944e	85 01		sta $01				sta 	1
.9450	5a		phy				phy
.9451	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.9454	92 36		sta ($36)			sta 	(zTemp0)
.9456	a0 01		ldy #$01			ldy 	#1
.9458	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.945b	91 36		sta ($36),y			sta 	(zTemp0),y
.945d	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9460	c8		iny				iny
.9461	91 36		sta ($36),y			sta 	(zTemp0),y
.9463	7a		ply				ply
.9464	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9465					Command_Print:
.9465	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9466					_CPLoop:
.9466	08		php				php 								; save last action flag
.9467	b1 30		lda ($30),y			lda 	(codePtr),y
.9469	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.946b	f0 46		beq $94b3			beq 	_CPExit
.946d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.946f	f0 42		beq $94b3			beq 	_CPExit
.9471	68		pla				pla 								; throw last action flag
.9472	b1 30		lda ($30),y			lda 	(codePtr),y
.9474	c8		iny				iny
.9475	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9477	f0 37		beq $94b0			beq 	_CPContinueWithSameLine
.9479	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.947b	f0 2e		beq $94ab			beq 	_CPTab
.947d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.947f	f0 26		beq $94a7			beq 	_CPNewLine
.9481	88		dey				dey 								; undo the get.
.9482	a2 00		ldx #$00			ldx 	#0
.9484	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; get a value into slot 0
.9487	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.948a	29 10		and #$10			and 	#NSBIsString
.948c	f0 0b		beq $9499			beq 	_CPNumber
.948e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9491	ad 08 04	lda $0408			lda 	NSMantissa0
.9494	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.9497	80 cc		bra $9465			bra 	Command_Print 				; loop round clearing carry so NL if end
.9499					_CPNumber:
.9499	a9 05		lda #$05			lda 	#5 							; maximum decimals
.949b	20 29 a5	jsr $a529			jsr 	ConvertNumberToString 		; convert to string
.949e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.94a0	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.94a2	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.94a5	80 be		bra $9465			bra 	Command_Print 				; loop round clearing carry so NL if end
.94a7					_CPNewLine:
.94a7	a9 0d		lda #$0d			lda 	#13
.94a9	80 02		bra $94ad			bra 	_CPPrintChar
.94ab					_CPTab:
.94ab	a9 09		lda #$09			lda 	#9 							; print TAB
.94ad					_CPPrintChar:
.94ad	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.94b0					_CPContinueWithSameLine:
.94b0	38		sec				sec 								; loop round with carry set, which
.94b1	80 b3		bra $9466			bra 	_CPLoop 					; will inhibit final CR
.94b3					_CPExit:
.94b3	28		plp				plp 								; get last action flag
.94b4	b0 05		bcs $94bb			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.94b6	a9 0d		lda #$0d			lda 	#13 						; print new line
.94b8	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.94bb					_CPExit2:
.94bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94bc					CallProcedure:
.94bc	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94be	b1 30		lda ($30),y			lda 	(codePtr),y
.94c0	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94c2	f0 0c		beq $94d0			beq 	_CPEndParam
.94c4					_CPParamLoop:
.94c4	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; get parameter onto stack
.94c7	e8		inx				inx 								; bump next stack
.94c8	b1 30		lda ($30),y			lda 	(codePtr),y
.94ca	c8		iny				iny
.94cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94cd	f0 f5		beq $94c4			beq 	_CPParamLoop
.94cf	88		dey				dey 								; unpick.
.94d0					_CPEndParam:
.94d0	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94d3	c8		iny				iny									; skip right bracket
.94d4	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94d6	20 d0 a7	jsr $a7d0			jsr 	StackOpen
.94d9	20 14 a8	jsr $a814			jsr 	STKSaveCodePosition 		; save loop position
.94dc	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94df	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94e1	ad 10 04	lda $0410			lda 	NSMantissa1
.94e4	85 37		sta $37				sta 	zTemp0+1
.94e6	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94e8	b2 36		lda ($36)			lda 	(zTemp0)
.94ea	85 30		sta $30				sta 	safePtr
.94ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.94ee	85 31		sta $31				sta 	safePtr+1
.94f0	c8		iny				iny
.94f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f3	85 32		sta $32				sta 	safePtr+2
.94f5	c8		iny				iny
.94f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f8	85 33		sta $33				sta 	safePtr+3
.94fa	c8		iny				iny 								; get Y offset -> Y
.94fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.94fd	a8		tay				tay
.94fe	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9500	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9503	f0 13		beq $9518			beq 	_ParamExit 					; if so, exit.
.9505					_ParamExtract:
.9505	ca		dex				dex 								; put a local term on the level before
.9506	20 a9 93	jsr $93a9			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9509	20 e4 92	jsr $92e4			jsr 	AssignVariable 				; assign stacked value to the variable.
.950c	e8		inx				inx 								; advance to next parameter to do.
.950d	e8		inx				inx
.950e	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9511	f0 05		beq $9518			beq 	_ParamExit
.9513	20 67 af	jsr $af67			jsr 	CheckComma 					; comma seperating parameters
.9516	80 ed		bra $9505			bra 	_ParamExtract
.9518					_ParamExit:
.9518	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; check )
.951b	60		rts				rts 								; and continue from here
.af51					Command_ENDPROC:
.af51	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af53	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af55	20 fc a7	jsr $a7fc			jsr 	StackCheckFrame
.af58	20 25 a8	jsr $a825			jsr 	STKLoadCodePosition 		; restore code position
.af5b	20 ee a7	jsr $a7ee			jsr 	StackClose
.af5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.951c					Command_Read:
.951c	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.951e	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm
.9521	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9524	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9526	f0 4a		beq $9572			beq 	_CRSyntax 					; check reference (bit 0)
.9528	20 bb 95	jsr $95bb			jsr 	SwapDataCodePtrs 			; swap code and data
.952b	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.952e	d0 20		bne $9550			bne 	_CRContinueData
.9530					_CRKeepSearching:
.9530	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.9532	aa		tax				tax
.9533	20 3c 9a	jsr $9a3c			jsr 	ScanForward
.9536	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9538	f0 16		beq $9550			beq 	_CRHaveData 				; found it
.953a	18		clc				clc
.953b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.953d	65 30		adc $30				adc 	codePtr
.953f	85 30		sta $30				sta 	codePtr
.9541	90 02		bcc $9545			bcc 	_CREExit
.9543	e6 31		inc $31				inc 	codePtr+1
.9545					_CREExit:
.9545	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9547	b2 30		lda ($30)			lda 	(codePtr)
.9549	d0 e5		bne $9530			bne 	_CRKeepSearching
.954b	a9 0b		lda #$0b		lda	#11
.954d	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.9550					_CRHaveData:
.9550					_CRContinueData:
.9550	a2 01		ldx #$01			ldx 	#1
.9552	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9555	ca		dex				dex
.9556	20 e4 92	jsr $92e4			jsr		AssignVariable 				; do the assignment
.9559	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.955c	b1 30		lda ($30),y			lda 	(codePtr),y
.955e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9560	d0 04		bne $9566			bne 	_CRSwapBack
.9562	c8		iny				iny 								; consume comma
.9563	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9566					_CRSwapBack:
.9566	20 bb 95	jsr $95bb			jsr 	SwapDataCodePtrs			; swap them back.
.9569	b1 30		lda ($30),y			lda 	(codePtr),y
.956b	c8		iny				iny
.956c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.956e	f0 ac		beq $951c			beq 	Command_Read 				; if so go round again.
.9570	88		dey				dey 								; unpick get.
.9571	60		rts				rts
.9572					_CRSyntax:
.9572	4c 4d b5	jmp $b54d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9575					RemCommand:
.9575	b1 30		lda ($30),y			lda 	(codePtr),y
.9577	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9579	d0 06		bne $9581			bne 	_RMExit
.957b	c8		iny				iny
.957c	98		tya				tya
.957d	38		sec				sec
.957e	71 30		adc ($30),y			adc 	(codePtr),y
.9580	a8		tay				tay
.9581					_RMExit:
.9581	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9582					Command_REPEAT:
.9582	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9584	20 d0 a7	jsr $a7d0			jsr 	StackOpen
.9587	20 14 a8	jsr $a814			jsr 	STKSaveCodePosition 		; save loop position
.958a	60		rts				rts
.958b					Command_UNTIL:
.958b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.958d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.958f	20 fc a7	jsr $a7fc			jsr 	StackCheckFrame
.9592	a2 00		ldx #$00			ldx 	#0
.9594	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; work out the number
.9597	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; check if zero
.959a	f0 04		beq $95a0			beq 	_CULoopBack 				; if so keep looping
.959c	20 ee a7	jsr $a7ee			jsr 	StackClose		 			; return
.959f	60		rts				rts
.95a0					_CULoopBack:
.95a0	20 25 a8	jsr $a825			jsr 	STKLoadCodePosition 		; loop back
.95a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.95a4					Command_Restore:
.95a4	20 bb 95	jsr $95bb			jsr 	SwapDataCodePtrs 			; swap code and data
.95a7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95a9	85 30		sta $30				sta 	codePtr
.95ab	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95ad	85 31		sta $31				sta 	codePtr+1
.95af	20 bb 95	jsr $95bb			jsr 	SwapDataCodePtrs 			; put them back
.95b2	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.95b4	8d 9b 04	sta $049b			sta 	dataPointer+4
.95b7	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.95ba	60		rts				rts
.95bb					SwapDataCodePtrs:
.95bb	da		phx				phx
.95bc	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95be					_SDCPLoop:
.95be	b5 30		lda $30,x			lda 	safePtr,x
.95c0	48		pha				pha
.95c1	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95c4	95 30		sta $30,x			sta 	safePtr,x
.95c6	68		pla				pla
.95c7	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95ca	ca		dex				dex
.95cb	10 f1		bpl $95be			bpl 	_SDCPLoop
.95cd	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95d0	8c 9b 04	sty $049b			sty 	dataPointer+4
.95d3	a8		tay				tay
.95d4	fa		plx				plx
.95d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95d6					CommandRUN:
.95d6	20 df 8c	jsr $8cdf			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95d9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95db	85 30		sta $30				sta 	codePtr
.95dd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95df	85 31		sta $31				sta 	codePtr+1
.95e1					RUNNewLine:
.95e1	b2 30		lda ($30)			lda 	(codePtr)
.95e3	f0 5e		beq $9643			beq 	CRNoProgram         		; no then END.
.95e5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95e7	9a		txs				txs
.95e8					RUNCodePointerLine:
.95e8	a0 02		ldy #$02			ldy 	#2 							; start of program
.95ea					_CRIncMainLoop:
.95ea	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95ed	d0 05		bne $95f4			bne 	_CRNoBreakCheck
.95ef	20 46 b7	jsr $b746			jsr 	EXTBreakCheck 				; break check
.95f2	f0 4a		beq $963e			beq 	_CRBreak
.95f4					_CRNoBreakCheck:
.95f4	c8		iny				iny
.95f5					_CRMainLoop:
.95f5	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95f8	b1 30		lda ($30),y			lda 	(codePtr),y
.95fa	10 10		bpl $960c			bpl 	_CRNotKeyword
.95fc	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95fe	b0 04		bcs $9604			bcs 	_CRIsKeyword
.9600	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9602	b0 34		bcs $9638			bcs		_CRSyntaxError
.9604					_CRIsKeyword:
.9604	c8		iny				iny 								; consume command
.9605	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9606	aa		tax				tax 								; put in X for vector jump
.9607	20 3b 96	jsr $963b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.960a	80 e9		bra $95f5			bra 	_CRMainLoop 				; and loop round
.960c					_CRNotKeyword:
.960c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.960e	f0 da		beq $95ea			beq 	_CRIncMainLoop
.9610	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9612	90 05		bcc $9619			bcc 	_CRNotVariable
.9614					_CRGoLet:
.9614	20 a8 92	jsr $92a8			jsr 	LetCommand
.9617	80 dc		bra $95f5			bra 	_CRMainLoop
.9619					_CRNotVariable:
.9619	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.961b	f0 f7		beq $9614			beq 	_CRGoLet
.961d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.961f	f0 f3		beq $9614			beq 	_CRGoLet
.9621	c9 21		cmp #$21			cmp 	#KWD_PLING
.9623	f0 ef		beq $9614			beq 	_CRGoLet
.9625	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9627	f0 09		beq $9632			beq 	_CRGoRem
.9629	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.962b	d0 0b		bne $9638			bne 	_CRSyntaxError
.962d	20 7f 8b	jsr $8b7f			jsr 	LabelHere
.9630	80 c3		bra $95f5			bra 	_CRMainLoop
.9632					_CRGoRem:
.9632	c8		iny				iny
.9633	20 75 95	jsr $9575			jsr 	RemCommand
.9636	80 bd		bra $95f5			bra 	_CRMainLoop
.9638					_CRSyntaxError:
.9638	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.963b					_CRCallVector0:
.963b	7c e6 96	jmp ($96e6,x)			jmp 	(VectorSet0,x)
.963e					_CRBreak:
.963e	a9 01		lda #$01		lda	#1
.9640	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.9643					CRNoProgram:
.9643	4c 02 8e	jmp $8e02			jmp 	EndCommand
.9646					EOLCommand:
.9646	18		clc				clc
.9647	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9649	65 30		adc $30				adc 	codePtr
.964b	85 30		sta $30				sta 	codePtr
.964d	90 02		bcc $9651			bcc 	_CREExit
.964f	e6 31		inc $31				inc 	codePtr+1
.9651					_CREExit:
.9651	80 8e		bra $95e1			bra 	RunNewLine
.9653					Shift1Command:
.9653	b1 30		lda ($30),y			lda 	(codePtr),y
.9655	c8		iny				iny
.9656	0a		asl a				asl 	a
.9657	aa		tax				tax
.9658	7c 7e 97	jmp ($977e,x)			jmp 	(VectorSet1,x)
.965b					Shift2Command:
.965b	b1 30		lda ($30),y			lda 	(codePtr),y
.965d	c8		iny				iny
.965e	0a		asl a				asl 	a
.965f	aa		tax				tax
.9660	7c 98 97	jmp ($9798,x)			jmp 	(VectorSet2,x)
.9663					Unused1:
.9663					Unused2:
.9663					Unused3:
.9663					Unused4:
.9663	4c 4d b5	jmp $b54d			jmp 	SyntaxError
>9666							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9666					VectorSetPunc:
>9666	8b 9c					.word	ShiftLeft                        ; $00 <<
>9668	85 9b					.word	BinaryCompareLessEqual           ; $01 <=
>966a	7b 9b					.word	BinaryCompareNotEqual            ; $02 <>
>966c	4d b5					.word	SyntaxError                      ; $03 !!3
>966e	4d b5					.word	SyntaxError                      ; $04 ><
>9670	8f 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>9672	8e 9c					.word	ShiftRight                       ; $06 >>
>9674	4d b5					.word	SyntaxError                      ; $07 !!7
>9676	4d b5					.word	SyntaxError                      ; $08 !!8
>9678	4d b5					.word	SyntaxError                      ; $09 !!9
>967a	4d b5					.word	SyntaxError                      ; $0a !!10
>967c	4d b5					.word	SyntaxError                      ; $0b !!11
>967e	4d b5					.word	SyntaxError                      ; $0c !!12
>9680	4d b5					.word	SyntaxError                      ; $0d !!13
>9682	4d b5					.word	SyntaxError                      ; $0e !!14
>9684	4d b5					.word	SyntaxError                      ; $0f !!15
>9686	4d b5					.word	SyntaxError                      ; $10 @
>9688	4d b5					.word	SyntaxError                      ; $11 !!17
>968a	4d b5					.word	SyntaxError                      ; $12 !!18
>968c	4d b5					.word	SyntaxError                      ; $13 [
>968e	78 af					.word	IntegerDivide                    ; $14 \
>9690	4d b5					.word	SyntaxError                      ; $15 ]
>9692	1c 9e					.word	EorInteger                       ; $16 ^
>9694	4d b5					.word	SyntaxError                      ; $17 _
>9696	4d b5					.word	SyntaxError                      ; $18 `
>9698	4d b5					.word	SyntaxError                      ; $19 !!25
>969a	4d b5					.word	SyntaxError                      ; $1a !!26
>969c	4d b5					.word	SyntaxError                      ; $1b {
>969e	d6 9d					.word	OraInteger                       ; $1c |
>96a0	4d b5					.word	SyntaxError                      ; $1d }
>96a2	4d b5					.word	SyntaxError                      ; $1e ~
>96a4	4d b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>96a6	4d b5					.word	SyntaxError                      ; $20
>96a8	62 9e					.word	WordIndirect                     ; $21 !
>96aa	4d b5					.word	SyntaxError                      ; $22 "
>96ac	4d b5					.word	SyntaxError                      ; $23 #
>96ae	4d b5					.word	SyntaxError                      ; $24 $
>96b0	c5 af					.word	IntegerModulus                   ; $25 %
>96b2	90 9d					.word	AndInteger                       ; $26 &
>96b4	4d b5					.word	SyntaxError                      ; $27 '
>96b6	4d b5					.word	SyntaxError                      ; $28 (
>96b8	4d b5					.word	SyntaxError                      ; $29 )
>96ba	3a b0					.word	MulInteger                       ; $2a *
>96bc	22 9d					.word	AddInteger                       ; $2b +
>96be	4d b5					.word	SyntaxError                      ; $2c ,
>96c0	65 9d					.word	SubInteger                       ; $2d -
>96c2	4d b5					.word	SyntaxError                      ; $2e .
>96c4	d9 b1					.word	FDivideCommand                   ; $2f /
>96c6	4d b5					.word	SyntaxError                      ; $30 0
>96c8	4d b5					.word	SyntaxError                      ; $31 1
>96ca	4d b5					.word	SyntaxError                      ; $32 2
>96cc	4d b5					.word	SyntaxError                      ; $33 3
>96ce	4d b5					.word	SyntaxError                      ; $34 4
>96d0	4d b5					.word	SyntaxError                      ; $35 5
>96d2	4d b5					.word	SyntaxError                      ; $36 6
>96d4	4d b5					.word	SyntaxError                      ; $37 7
>96d6	4d b5					.word	SyntaxError                      ; $38 8
>96d8	4d b5					.word	SyntaxError                      ; $39 9
>96da	4d b5					.word	SyntaxError                      ; $3a :
>96dc	4d b5					.word	SyntaxError                      ; $3b ;
>96de	67 9b					.word	BinaryCompareLess                ; $3c <
>96e0	5d 9b					.word	BinaryCompareEqual               ; $3d =
>96e2	71 9b					.word	BinaryCompareGreater             ; $3e >
>96e4	89 9e					.word	ByteIndirect                     ; $3f ?
.96e6					VectorSet0:
>96e6	46 96					.word	EOLCommand                       ; $80 !0:EOF
>96e8	53 96					.word	Shift1Command                    ; $81 !1:SH1
>96ea	5b 96					.word	Shift2Command                    ; $82 !2:SH2
>96ec	1f b3					.word	AbsUnary                         ; $83 ABS(
>96ee	59 a3					.word	AllocUnary                       ; $84 ALLOC(
>96f0	2f b3					.word	AscUnary                         ; $85 ASC(
>96f2	da a4					.word	ChrUnary                         ; $86 CHR$(
>96f4	05 8e					.word	UnaryEvent                       ; $87 EVENT(
>96f6	59 9b					.word	UnaryFalse                       ; $88 FALSE
>96f8	3c b3					.word	FracUnary                        ; $89 FRAC(
>96fa	1d 92					.word	UnaryHit                         ; $8a HIT(
>96fc	52 b3					.word	IntUnary                         ; $8b INT(
>96fe	a8 b3					.word	IsValUnary                       ; $8c ISVAL(
>9700	94 92					.word	UnaryJoyB                        ; $8d JOYB(
>9702	6d 92					.word	UnaryJoyX                        ; $8e JOYX(
>9704	70 92					.word	UnaryJoyY                        ; $8f JOYY(
>9706	b4 a5					.word	Unary_Left                       ; $90 LEFT$(
>9708	64 b3					.word	LenUnary                         ; $91 LEN(
>970a	cd a3					.word	Unary_Max                        ; $92 MAX(
>970c	de a5					.word	Unary_Mid                        ; $93 MID$(
>970e	c9 a3					.word	Unary_Min                        ; $94 MIN(
>9710	24 a4					.word	Unary_Not                        ; $95 NOT(
>9712	3a a4					.word	Unary_Random                     ; $96 RANDOM(
>9714	c4 a5					.word	Unary_Right                      ; $97 RIGHT$(
>9716	59 a4					.word	Unary_Rnd                        ; $98 RND(
>9718	7e b3					.word	SgnUnary                         ; $99 SGN(
>971a	ec a4					.word	SpcUnary                         ; $9a SPC(
>971c	07 a5					.word	Unary_Str                        ; $9b STR$(
>971e	25 98					.word	UnaryTimer                       ; $9c TIMER(
>9720	4d 9b					.word	UnaryTrue                        ; $9d TRUE
>9722	9e b3					.word	ValUnary                         ; $9e VAL(
>9724	6e 8e					.word	ForCommand                       ; $9f FOR
>9726	43 92					.word	IfCommand                        ; $a0 IF
>9728	63 96					.word	Unused1                          ; $a1 PROC
>972a	82 95					.word	Command_REPEAT                   ; $a2 REPEAT
>972c	b2 9a					.word	Command_WHILE                    ; $a3 WHILE
>972e	6c 92					.word	EndIf                            ; $a4 ENDIF
>9730	51 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>9732	28 8f					.word	NextCommand                      ; $a6 NEXT
>9734	63 96					.word	Unused4                          ; $a7 THEN
>9736	8b 95					.word	Command_UNTIL                    ; $a8 UNTIL
>9738	d3 9a					.word	Command_WEND                     ; $a9 WEND
>973a	4d b5					.word	SyntaxError                      ; $aa BY
>973c	a5 8c					.word	CallCommand                      ; $ab CALL
>973e	85 8f					.word	CircleCommand                    ; $ac CIRCLE
>9740	df 8c					.word	ClearCommand                     ; $ad CLEAR
>9742	37 8d					.word	ClearScreen                      ; $ae CLS
>9744	4d b5					.word	SyntaxError                      ; $af COLOR
>9746	4d b5					.word	SyntaxError                      ; $b0 COLOUR
>9748	3d 8d					.word	Command_Data                     ; $b1 DATA
>974a	45 8d					.word	DimCommand                       ; $b2 DIM
>974c	63 96					.word	Unused3                          ; $b3 DOWNTO
>974e	65 92					.word	ElseCode                         ; $b4 ELSE
>9750	4d b5					.word	SyntaxError                      ; $b5 FROM
>9752	b1 91					.word	GfxCommand                       ; $b6 GFX
>9754	e3 91					.word	Command_GOSUB                    ; $b7 GOSUB
>9756	01 92					.word	GotoCommand                      ; $b8 GOTO
>9758	4d b5					.word	SyntaxError                      ; $b9 HERE
>975a	af 8f					.word	ImageCommand                     ; $ba IMAGE
>975c	a8 92					.word	LetCommand                       ; $bb LET
>975e	04 90					.word	LineCommand                      ; $bc LINE
>9760	9b 93					.word	Command_LOCAL                    ; $bd LOCAL
>9762	4d b5					.word	SyntaxError                      ; $be OFF
>9764	4d b5					.word	SyntaxError                      ; $bf ON
>9766	4d b5					.word	SyntaxError                      ; $c0 OUTLINE
>9768	21 94					.word	PaletteCommand                   ; $c1 PALETTE
>976a	fd 8f					.word	PlotCommand                      ; $c2 PLOT
>976c	65 94					.word	Command_Print                    ; $c3 PRINT
>976e	1c 95					.word	Command_Read                     ; $c4 READ
>9770	81 8f					.word	RectangleCommand                 ; $c5 RECT
>9772	75 95					.word	RemCommand                       ; $c6 REM
>9774	f3 91					.word	Command_RETURN                   ; $c7 RETURN
>9776	4d b5					.word	SyntaxError                      ; $c8 SOLID
>9778	90 8f					.word	SpriteCommand                    ; $c9 SPRITE
>977a	cc 8f					.word	TextCommand                      ; $ca TEXT
>977c	63 96					.word	Unused2                          ; $cb TO
.977e					VectorSet1:
>977e	4d b5					.word	SyntaxError                      ; $80 !0:EOF
>9780	4d b5					.word	SyntaxError                      ; $81 !1:SH1
>9782	4d b5					.word	SyntaxError                      ; $82 !2:SH2
>9784	76 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>9786	95 8c					.word	AssertCommand                    ; $84 ASSERT
>9788	51 91					.word	BitmapCtrl                       ; $85 BITMAP
>978a	02 8e					.word	EndCommand                       ; $86 END
>978c	fd 92					.word	Command_List                     ; $87 LIST
>978e	17 94					.word	NewCommand                       ; $88 NEW
>9790	a4 95					.word	Command_Restore                  ; $89 RESTORE
>9792	d6 95					.word	CommandRUN                       ; $8a RUN
>9794	96 91					.word	SpritesCtrl                      ; $8b SPRITES
>9796	20 98					.word	StopCommand                      ; $8c STOP
.9798					VectorSet2:
>9798	4d b5					.word	SyntaxError                      ; $80 !0:EOF
>979a	4d b5					.word	SyntaxError                      ; $81 !1:SH1
>979c	4d b5					.word	SyntaxError                      ; $82 !2:SH2
>979e	0c b4					.word	Assemble_adc                     ; $83 ADC
>97a0	04 b4					.word	Assemble_and                     ; $84 AND
>97a2	20 b4					.word	Assemble_asl                     ; $85 ASL
>97a4	8a b4					.word	Assemble_bcc                     ; $86 BCC
>97a6	8e b4					.word	Assemble_bcs                     ; $87 BCS
>97a8	96 b4					.word	Assemble_beq                     ; $88 BEQ
>97aa	4d b4					.word	Assemble_bit                     ; $89 BIT
>97ac	7e b4					.word	Assemble_bmi                     ; $8a BMI
>97ae	92 b4					.word	Assemble_bne                     ; $8b BNE
>97b0	7a b4					.word	Assemble_bpl                     ; $8c BPL
>97b2	9a b4					.word	Assemble_bra                     ; $8d BRA
>97b4	9e b4					.word	Assemble_brk                     ; $8e BRK
>97b6	82 b4					.word	Assemble_bvc                     ; $8f BVC
>97b8	86 b4					.word	Assemble_bvs                     ; $90 BVS
>97ba	a6 b4					.word	Assemble_clc                     ; $91 CLC
>97bc	fa b4					.word	Assemble_cld                     ; $92 CLD
>97be	ba b4					.word	Assemble_cli                     ; $93 CLI
>97c0	ea b4					.word	Assemble_clv                     ; $94 CLV
>97c2	18 b4					.word	Assemble_cmp                     ; $95 CMP
>97c4	61 b4					.word	Assemble_cpx                     ; $96 CPX
>97c6	5c b4					.word	Assemble_cpy                     ; $97 CPY
>97c8	3e b4					.word	Assemble_dec                     ; $98 DEC
>97ca	f6 b4					.word	Assemble_dex                     ; $99 DEX
>97cc	d2 b4					.word	Assemble_dey                     ; $9a DEY
>97ce	08 b4					.word	Assemble_eor                     ; $9b EOR
>97d0	43 b4					.word	Assemble_inc                     ; $9c INC
>97d2	06 b5					.word	Assemble_inx                     ; $9d INX
>97d4	f2 b4					.word	Assemble_iny                     ; $9e INY
>97d6	75 b4					.word	Assemble_jmp                     ; $9f JMP
>97d8	70 b4					.word	Assemble_jsr                     ; $a0 JSR
>97da	14 b4					.word	Assemble_lda                     ; $a1 LDA
>97dc	39 b4					.word	Assemble_ldx                     ; $a2 LDX
>97de	57 b4					.word	Assemble_ldy                     ; $a3 LDY
>97e0	2a b4					.word	Assemble_lsr                     ; $a4 LSR
>97e2	0a b5					.word	Assemble_nop                     ; $a5 NOP
>97e4	00 b4					.word	Assemble_ora                     ; $a6 ORA
>97e6	b6 b4					.word	Assemble_pha                     ; $a7 PHA
>97e8	a2 b4					.word	Assemble_php                     ; $a8 PHP
>97ea	fe b4					.word	Assemble_phx                     ; $a9 PHX
>97ec	be b4					.word	Assemble_phy                     ; $aa PHY
>97ee	c6 b4					.word	Assemble_pla                     ; $ab PLA
>97f0	aa b4					.word	Assemble_plp                     ; $ac PLP
>97f2	12 b5					.word	Assemble_plx                     ; $ad PLX
>97f4	ce b4					.word	Assemble_ply                     ; $ae PLY
>97f6	25 b4					.word	Assemble_rol                     ; $af ROL
>97f8	2f b4					.word	Assemble_ror                     ; $b0 ROR
>97fa	b2 b4					.word	Assemble_rti                     ; $b1 RTI
>97fc	c2 b4					.word	Assemble_rts                     ; $b2 RTS
>97fe	1c b4					.word	Assemble_sbc                     ; $b3 SBC
>9800	ae b4					.word	Assemble_sec                     ; $b4 SEC
>9802	0e b5					.word	Assemble_sed                     ; $b5 SED
>9804	ca b4					.word	Assemble_sei                     ; $b6 SEI
>9806	10 b4					.word	Assemble_sta                     ; $b7 STA
>9808	02 b5					.word	Assemble_stp                     ; $b8 STP
>980a	34 b4					.word	Assemble_stx                     ; $b9 STX
>980c	52 b4					.word	Assemble_sty                     ; $ba STY
>980e	48 b4					.word	Assemble_stz                     ; $bb STZ
>9810	e6 b4					.word	Assemble_tax                     ; $bc TAX
>9812	e2 b4					.word	Assemble_tay                     ; $bd TAY
>9814	6b b4					.word	Assemble_trb                     ; $be TRB
>9816	66 b4					.word	Assemble_tsb                     ; $bf TSB
>9818	ee b4					.word	Assemble_tsx                     ; $c0 TSX
>981a	d6 b4					.word	Assemble_txa                     ; $c1 TXA
>981c	de b4					.word	Assemble_txs                     ; $c2 TXS
>981e	da b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9820					StopCommand:
.9820	a9 08		lda #$08		lda	#8
.9822	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.9825					UnaryTimer:
.9825	fa		plx				plx
.9826	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.9829					TimerToStackX:
.9829	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; zero result
.982c	64 01		stz $01				stz 	1 							; access I/O
.982e	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9831	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9834	ad 5a d6	lda $d65a			lda 	$D65A
.9837	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.983a	ad 5b d6	lda $d65b			lda 	$D65B
.983d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9840	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9841					ListConvertLine:
.9841	9c 9d 04	stz $049d			stz 	tbOffset
.9844	9c aa 04	stz $04aa			stz 	tokenBuffer
.9847	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9849	b1 30		lda ($30),y			lda 	(codePtr),y
.984b	aa		tax				tax
.984c	88		dey				dey
.984d	b1 30		lda ($30),y			lda 	(codePtr),y
.984f	20 bb b0	jsr $b0bb			jsr 	ConvertInt16
.9852	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9854	86 37		stx $37				stx 	zTemp0+1
.9856	a0 00		ldy #$00			ldy 	#0
.9858					_LCCopyNumber:
.9858	b1 36		lda ($36),y			lda 	(zTemp0),y
.985a	20 86 99	jsr $9986			jsr 	LCLWrite
.985d	c8		iny				iny
.985e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9860	d0 f6		bne $9858			bne 	_LCCopyNumber
.9862	20 9f 9a	jsr $9a9f			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9865	48		pha				pha 								; save on stack
.9866	10 0c		bpl $9874			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9868	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9869	6d a6 04	adc $04a6			adc 	listIndent
.986c	8d a6 04	sta $04a6			sta 	listIndent
.986f	10 03		bpl $9874			bpl 	_LCNoAdjust
.9871	9c a6 04	stz $04a6			stz 	listIndent
.9874					_LCNoAdjust:
.9874	18		clc				clc		 							; work out actual indent.
.9875	ad a6 04	lda $04a6			lda 	listIndent
.9878	0a		asl a				asl 	a
.9879	69 06		adc #$06			adc 	#6
.987b	85 36		sta $36				sta 	zTemp0
.987d					_LCPadOut:
.987d	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.987f	20 86 99	jsr $9986			jsr 	LCLWrite
.9882	ad 9d 04	lda $049d			lda 	tbOffset
.9885	c5 36		cmp $36				cmp 	zTemp0
.9887	d0 f4		bne $987d			bne 	_LCPadOut
.9889	a0 03		ldy #$03			ldy 	#3 							; start position.
.988b					_LCMainLoop:
.988b	b1 30		lda ($30),y			lda 	(codePtr),y
.988d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.988f	f0 17		beq $98a8			beq 	_LCExit
.9891	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9893	90 1e		bcc $98b3			bcc 	_LCDoubles
.9895	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9897	90 2a		bcc $98c3			bcc 	_LCShiftPunc
.9899	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.989b	90 35		bcc $98d2			bcc 	_LCPunctuation
.989d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.989f	90 3e		bcc $98df			bcc 	_LCIdentifiers
.98a1	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.98a3	90 5a		bcc $98ff			bcc 	_LCTokens
.98a5	4c 5a 99	jmp $995a			jmp 	_LCData 					; 254-5 are data objects
.98a8					_LCExit:
.98a8	68		pla				pla 								; get old indent adjust
.98a9	30 07		bmi $98b2			bmi 	_LCExit2
.98ab	18		clc				clc 								; add to indent if +ve
.98ac	6d a6 04	adc $04a6			adc 	listIndent
.98af	8d a6 04	sta $04a6			sta 	listIndent
.98b2					_LCExit2:
.98b2	60		rts				rts
.98b3					_LCDoubles:
.98b3	48		pha				pha
.98b4	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.98b5	29 02		and #$02			and 	#2
.98b7	09 3c		ora #$3c			ora 	#60 						; make < >
.98b9	20 86 99	jsr $9986			jsr 	LCLWrite
.98bc	68		pla				pla 								; restore, do lower bit
.98bd	29 03		and #$03			and 	#3
.98bf	09 3c		ora #$3c			ora 	#60
.98c1	80 0f		bra $98d2			bra		_LCPunctuation 				; print, increment, loop
.98c3					_LCShiftPunc:
.98c3	aa		tax				tax 								; save in X
.98c4	29 07		and #$07			and 	#7 							; lower 3 bits
.98c6	f0 02		beq $98ca			beq 	_LCNoAdd
.98c8	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98ca					_LCNoAdd:
.98ca	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98cc	90 02		bcc $98d0			bcc 	_LCNoAdd2
.98ce	09 20		ora #$20			ora 	#32 						; adds $20
.98d0					_LCNoAdd2:
.98d0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98d2					_LCPunctuation:
.98d2	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98d4	d0 03		bne $98d9			bne 	_LCPContinue
.98d6	20 95 99	jsr $9995			jsr 	LCDeleteLastSpace
.98d9					_LCPContinue:
.98d9	c8		iny				iny 								; consume character
.98da	20 86 99	jsr $9986			jsr 	LCLWrite 					; write it out.
.98dd	80 ac		bra $988b			bra 	_LCMainLoop 				; go round again.
.98df					_LCIdentifiers:
.98df	18		clc				clc 								; convert to physical address
.98e0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98e2	85 37		sta $37				sta 	zTemp0+1
.98e4	c8		iny				iny
.98e5	b1 30		lda ($30),y			lda 	(codePtr),y
.98e7	85 36		sta $36				sta 	zTemp0
.98e9	c8		iny				iny
.98ea	5a		phy				phy 								; save position
.98eb	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98ed					_LCOutIdentifier:
.98ed	c8		iny				iny
.98ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.98f0	29 7f		and #$7f			and 	#$7F
.98f2	20 d4 99	jsr $99d4			jsr 	LCLLowerCase
.98f5	20 86 99	jsr $9986			jsr 	LCLWrite
.98f8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98fa	10 f1		bpl $98ed			bpl 	_LCOutIdentifier
.98fc	7a		ply				ply 								; restore position
.98fd	80 8c		bra $988b			bra 	_LCMainLoop
.98ff					_LCTokens:
.98ff	aa		tax				tax 								; token in X
.9900	a9 0b		lda #$0b			lda 	#((KeywordSet2) & $FF)
.9902	85 36		sta $36				sta 	0+zTemp0
.9904	a9 ab		lda #$ab			lda 	#((KeywordSet2) >> 8)
.9906	85 37		sta $37				sta 	1+zTemp0
.9908	e0 82		cpx #$82			cpx 	#$82
.990a	f0 16		beq $9922			beq 	_LCUseShift
.990c	a9 bd		lda #$bd			lda 	#((KeywordSet1) & $FF)
.990e	85 36		sta $36				sta 	0+zTemp0
.9910	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.9912	85 37		sta $37				sta 	1+zTemp0
.9914	e0 81		cpx #$81			cpx 	#$81
.9916	f0 0a		beq $9922			beq 	_LCUseShift
.9918	a9 d8		lda #$d8			lda 	#((KeywordSet0) & $FF)
.991a	85 36		sta $36				sta 	0+zTemp0
.991c	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.991e	85 37		sta $37				sta 	1+zTemp0
.9920	80 01		bra $9923			bra 	_LCNoShift
.9922					_LCUseShift:
.9922	c8		iny				iny
.9923					_LCNoShift:
.9923	20 a9 99	jsr $99a9			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9926	b1 30		lda ($30),y			lda 	(codePtr),y
.9928	aa		tax				tax 								; into X
.9929					_LCFindText:
.9929	ca		dex				dex
.992a	10 0e		bpl $993a			bpl 	_LCFoundText 				; found text.
.992c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.992e	1a		inc a				inc 	a 							; one extra for size
.992f	38		sec				sec 								; one extra for checksum
.9930	65 36		adc $36				adc 	zTemp0 						; go to next token
.9932	85 36		sta $36				sta 	zTemp0
.9934	90 f3		bcc $9929			bcc 	_LCFindText
.9936	e6 37		inc $37				inc 	zTemp0+1
.9938	80 ef		bra $9929			bra 	_LCFindText
.993a					_LCFoundText:
.993a	5a		phy				phy 								; save List position
.993b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.993d	aa		tax				tax
.993e	a0 02		ldy #$02			ldy 	#2
.9940					_LCCopyToken:
.9940	b1 36		lda ($36),y			lda 	(zTemp0),y
.9942	20 d4 99	jsr $99d4			jsr 	LCLLowerCase
.9945	20 86 99	jsr $9986			jsr 	LCLWrite
.9948	c8		iny				iny
.9949	ca		dex				dex
.994a	d0 f4		bne $9940			bne 	_LCCopyToken
.994c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.994e	f0 05		beq $9955			beq 	_LCNoSpace
.9950	a9 20		lda #$20			lda 	#' '
.9952	20 86 99	jsr $9986			jsr 	LCLWrite
.9955					_LCNoSpace:
.9955	7a		ply				ply 								; restore position.
.9956	c8		iny				iny 								; consume token
.9957	4c 8b 98	jmp $988b			jmp 	_LCMainLoop 				; and go around again.
.995a					_LCData:
.995a	48		pha				pha 								; save type $FE/$FF
.995b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.995d	c9 fe		cmp #$fe			cmp 	#$FE
.995f	f0 02		beq $9963			beq 	_LCHaveOpener
.9961	a2 22		ldx #$22			ldx 	#'"'
.9963					_LCHaveOpener:
.9963	8a		txa				txa 								; output prefix (# or ")
.9964	20 86 99	jsr $9986			jsr 	LCLWrite
.9967	c8		iny				iny 								; get count
.9968	b1 30		lda ($30),y			lda 	(codePtr),y
.996a	aa		tax				tax
.996b	c8		iny				iny 								; point at first character
.996c					_LCOutData:
.996c	b1 30		lda ($30),y			lda 	(codePtr),y
.996e	c9 00		cmp #$00			cmp 	#0
.9970	f0 03		beq $9975			beq 	_LCNoPrint
.9972	20 86 99	jsr $9986			jsr 	LCLWrite
.9975					_LCNoPrint:
.9975	c8		iny				iny
.9976	ca		dex				dex
.9977	d0 f3		bne $996c			bne 	_LCOutData
.9979	68		pla				pla 								; closing " required ?
.997a	c9 ff		cmp #$ff			cmp 	#$FF
.997c	d0 05		bne $9983			bne 	_LCNoQuote
.997e	a9 22		lda #$22			lda 	#'"'
.9980	20 86 99	jsr $9986			jsr 	LCLWrite
.9983					_LCNoQuote:
.9983	4c 8b 98	jmp $988b			jmp 	_LCMainLoop
.9986					LCLWrite:
.9986	da		phx				phx
.9987	ae 9d 04	ldx $049d			ldx 	tbOffset
.998a	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.998d	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9990	ee 9d 04	inc $049d			inc 	tbOffset
.9993	fa		plx				plx
.9994	60		rts				rts
.9995					LCDeleteLastSpace:
.9995	48		pha				pha
.9996	da		phx				phx
.9997	ae 9d 04	ldx $049d			ldx 	tbOffset
.999a	f0 0a		beq $99a6			beq 	_LCDLSExit
.999c	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.999f	c9 20		cmp #$20			cmp 	#' '
.99a1	d0 03		bne $99a6			bne 	_LCDLSExit
.99a3	ce 9d 04	dec $049d			dec 	tbOffset
.99a6					_LCDLSExit:
.99a6	fa		plx				plx
.99a7	68		pla				pla
.99a8	60		rts				rts
.99a9					LCCheckSpaceRequired:
.99a9	ae 9d 04	ldx $049d			ldx 	tbOffset
.99ac	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.99af	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.99b1	f0 1b		beq $99ce			beq 	_LCCSRSpace
.99b3	c9 29		cmp #$29			cmp 	#')'
.99b5	f0 17		beq $99ce			beq 	_LCCSRSpace
.99b7	c9 23		cmp #$23			cmp 	#'#'
.99b9	f0 13		beq $99ce			beq 	_LCCSRSpace
.99bb	20 d4 99	jsr $99d4			jsr 	LCLLowerCase 				; saves a little effort
.99be	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99c0	90 11		bcc $99d3			bcc 	_LCCSRExit
.99c2	c9 3a		cmp #$3a			cmp 	#"9"+1
.99c4	90 08		bcc $99ce			bcc 	_LCCSRSpace
.99c6	c9 61		cmp #$61			cmp 	#"a"
.99c8	90 09		bcc $99d3			bcc 	_LCCSRExit
.99ca	c9 7b		cmp #$7b			cmp 	#"z"+1
.99cc	b0 05		bcs $99d3			bcs 	_LCCSRExit
.99ce					_LCCSRSpace:
.99ce	a9 20		lda #$20			lda 	#' '
.99d0	20 86 99	jsr $9986			jsr 	LCLWrite
.99d3					_LCCSRExit:
.99d3	60		rts				rts
.99d4					LCLLowerCase:
.99d4	c9 41		cmp #$41			cmp 	#"A"
.99d6	90 06		bcc $99de			bcc 	_LCLLCOut
.99d8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99da	b0 02		bcs $99de			bcs 	_LCLLCOut
.99dc	69 20		adc #$20			adc 	#$20
.99de					_LCLLCOut:
.99de	60		rts				rts
.99df					LCLUpperCase:
.99df	c9 61		cmp #$61			cmp 	#"a"
.99e1	90 06		bcc $99e9			bcc 	_LCLUCOut
.99e3	c9 7b		cmp #$7b			cmp 	#"z"+1
.99e5	b0 02		bcs $99e9			bcs 	_LCLUCOut
.99e7	e9 1f		sbc #$1f			sbc 	#$1F
.99e9					_LCLUCOut:
.99e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99ea					ProcedureScan:
.99ea	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99ec	85 30		sta $30				sta 	codePtr
.99ee	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99f0	85 31		sta $31				sta 	codePtr+1
.99f2					_PSLoop:
.99f2	b2 30		lda ($30)			lda 	(codePtr)
.99f4	f0 42		beq $9a38			beq 	_PSExit
.99f6	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99f8	b1 30		lda ($30),y			lda 	(codePtr),y
.99fa	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99fc	d0 2d		bne $9a2b			bne 	_PSNext
.99fe	c8		iny				iny 								; get the address of the record to zTemp0 and
.99ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9a01	29 c0		and #$c0			and 	#$C0
.9a03	c9 40		cmp #$40			cmp 	#$40
.9a05	d0 32		bne $9a39			bne 	_PSSyntax
.9a07	b1 30		lda ($30),y			lda 	(codePtr),y
.9a09	18		clc				clc
.9a0a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a0c	85 37		sta $37				sta 	zTemp0+1
.9a0e	c8		iny				iny 								; LSB
.9a0f	b1 30		lda ($30),y			lda 	(codePtr),y
.9a11	85 36		sta $36				sta 	zTemp0
.9a13	c8		iny				iny 								; character after variable call.
.9a14	98		tya				tya 								; save Y offset at +7
.9a15	a0 07		ldy #$07			ldy 	#7
.9a17	91 36		sta ($36),y			sta 	(zTemp0),y
.9a19	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9a1b	a0 02		ldy #$02			ldy 	#2
.9a1d	91 36		sta ($36),y			sta 	(zTemp0),y
.9a1f	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a21					_PSCopy:
.9a21	b5 30		lda $30,x			lda 	safePtr,x
.9a23	c8		iny				iny
.9a24	91 36		sta ($36),y			sta 	(zTemp0),y
.9a26	e8		inx				inx
.9a27	e0 04		cpx #$04			cpx 	#4
.9a29	d0 f6		bne $9a21			bne 	_PSCopy
.9a2b					_PSNext:
.9a2b	18		clc				clc
.9a2c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a2e	65 30		adc $30				adc 	codePtr
.9a30	85 30		sta $30				sta 	codePtr
.9a32	90 02		bcc $9a36			bcc 	_CREExit
.9a34	e6 31		inc $31				inc 	codePtr+1
.9a36					_CREExit:
.9a36	80 ba		bra $99f2			bra 	_PSLoop
.9a38					_PSExit:
.9a38	60		rts				rts
.9a39					_PSSyntax:
.9a39	4c 4d b5	jmp $b54d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a3c					ScanForward:
.9a3c	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a3e	86 37		stx $37				stx 	zTemp0+1
.9a40	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a42					_ScanLoop:
.9a42	b1 30		lda ($30),y			lda 	(codePtr),y
.9a44	c8		iny				iny
.9a45	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a47	d0 0e		bne $9a57			bne 	_ScanGoNext
.9a49	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a4b	f0 04		beq $9a51			beq 	_ScanMatch
.9a4d	c5 37		cmp $37				cmp 	zTemp0+1
.9a4f	d0 06		bne $9a57			bne 	_ScanGoNext
.9a51					_ScanMatch:
.9a51	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a53	d0 01		bne $9a56			bne 	_ScanNotEndEOL
.9a55	88		dey				dey
.9a56					_ScanNotEndEOL:
.9a56	60		rts				rts
.9a57					_ScanGoNext:
.9a57	20 5c 9a	jsr $9a5c			jsr  	ScanForwardOne
.9a5a	80 e6		bra $9a42			bra 	_ScanLoop
.9a5c					ScanForwardOne:
.9a5c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a5e	90 3e		bcc $9a9e			bcc 	_SFWExit
.9a60	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a62	90 18		bcc $9a7c			bcc 	_ScanSkipOne
.9a64	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a66	b0 2f		bcs $9a97			bcs 	_ScanSkipData
.9a68	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a6a	90 32		bcc $9a9e			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a6c	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a6e	b0 2e		bcs $9a9e			bcs 	_SFWExit
.9a70	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a72	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a74	b0 28		bcs $9a9e			bcs 	_SFWExit
.9a76	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a78	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a7a	80 22		bra $9a9e			bra 	_SFWExit
.9a7c					_ScanSkipOne:
.9a7c	c8		iny				iny 								; consume the extra one.
.9a7d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a7f	d0 1d		bne $9a9e			bne 	_SFWExit
.9a81	18		clc				clc
.9a82	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a84	65 30		adc $30				adc 	codePtr
.9a86	85 30		sta $30				sta 	codePtr
.9a88	90 02		bcc $9a8c			bcc 	_CREExit
.9a8a	e6 31		inc $31				inc 	codePtr+1
.9a8c					_CREExit:
.9a8c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a8e	b2 30		lda ($30)			lda 	(codePtr)
.9a90	d0 0c		bne $9a9e			bne 	_SFWExit 					; if not zero, more to scan
.9a92	a9 13		lda #$13		lda	#19
.9a94	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.9a97					_ScanSkipData:
.9a97	88		dey				dey 								; point at data token
.9a98	c8		iny				iny
.9a99	98		tya				tya
.9a9a	38		sec				sec
.9a9b	71 30		adc ($30),y			adc 	(codePtr),y
.9a9d	a8		tay				tay
.9a9e					_SFWExit:
.9a9e	60		rts				rts
.9a9f					ScanGetCurrentLineStep:
.9a9f	64 38		stz $38				stz 	zTemp1
.9aa1	a0 03		ldy #$03			ldy 	#3
.9aa3					_SGCLSLoop:
.9aa3	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa5	c8		iny				iny
.9aa6	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9aa8	f0 05		beq $9aaf			beq 	_SGCLSExit
.9aaa	20 5c 9a	jsr $9a5c			jsr 	ScanForwardOne
.9aad	80 f4		bra $9aa3			bra 	_SGCLSLoop
.9aaf					_SGCLSExit:
.9aaf	a5 38		lda $38				lda 	zTemp1
.9ab1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9ab2					Command_WHILE:
.9ab2	5a		phy				phy 								; save position of the test
.9ab3	a2 00		ldx #$00			ldx 	#0
.9ab5	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; work out the number
.9ab8	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; check if zero
.9abb	f0 0e		beq $9acb			beq 	_WHExitLoop 				; if so exit the loop
.9abd	98		tya				tya 								; position *after* test.
.9abe	7a		ply				ply 								; restore position before test, at WHILE
.9abf	88		dey				dey
.9ac0	48		pha				pha 								; push after test on the stack
.9ac1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9ac3	20 d0 a7	jsr $a7d0			jsr 	StackOpen
.9ac6	20 14 a8	jsr $a814			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9ac9	7a		ply				ply 								; restore the position *after* the test
.9aca	60		rts				rts
.9acb					_WHExitLoop:
.9acb	68		pla				pla 								; throw post loop position
.9acc	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9ace	aa		tax				tax
.9acf	20 3c 9a	jsr $9a3c			jsr 	ScanForward
.9ad2	60		rts				rts
.9ad3					Command_WEND:
.9ad3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9ad5	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9ad7	20 fc a7	jsr $a7fc			jsr 	StackCheckFrame
.9ada	20 25 a8	jsr $a825			jsr 	STKLoadCodePosition 		; loop back
.9add	20 ee a7	jsr $a7ee			jsr 	StackClose		 			; erase the frame
.9ae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af5f					CheckRightBracket:
.af5f	b1 30		lda ($30),y			lda 	(codePtr),y
.af61	c8		iny				iny
.af62	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af64	d0 0f		bne $af75			bne 	CNAFail
.af66	60		rts				rts
.af67					CheckComma:
.af67	b1 30		lda ($30),y			lda 	(codePtr),y
.af69	c8		iny				iny
.af6a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af6c	d0 07		bne $af75			bne 	CNAFail
.af6e	60		rts				rts
.af6f					CheckNextA:
.af6f	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af71	d0 02		bne $af75			bne 	CNAFail
.af73	c8		iny				iny 								; skip character
.af74	60		rts				rts 								; and exit
.af75					CNAFail:
.af75	4c 4d b5	jmp $b54d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9ae1					ErrorHandler:
.9ae1	a8		tay				tay 								; find the error text
.9ae2	f0 49		beq $9b2d			beq 	_EHEnd
.9ae4	a2 00		ldx #$00			ldx 	#0
.9ae6	a9 66		lda #$66			lda 	#((ErrorText) & $FF)
.9ae8	85 36		sta $36				sta 	0+zTemp0
.9aea	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9aec	85 37		sta $37				sta 	1+zTemp0
.9aee					_EHFind:
.9aee	88		dey				dey 								; found the error text ?
.9aef	f0 0e		beq $9aff			beq 	_EHFound
.9af1					_EHFindZero:
.9af1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9af3	e6 36		inc $36				inc 	zTemp0
.9af5	d0 02		bne $9af9			bne 	_EHFNoCarry
.9af7	e6 37		inc $37				inc 	zTemp0+1
.9af9					_EHFNoCarry:
.9af9	c9 00		cmp #$00			cmp 	#0
.9afb	d0 f4		bne $9af1			bne 	_EHFindZero
.9afd	80 ef		bra $9aee			bra 	_EHFind
.9aff					_EHFound:
.9aff	a5 36		lda $36				lda 	zTemp0 						; print message
.9b01	a6 37		ldx $37				ldx 	zTemp0+1
.9b03	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.9b06	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9b08	b1 30		lda ($30),y			lda 	(codePtr),y
.9b0a	d0 05		bne $9b11			bne 	_EHAtMsg
.9b0c	c8		iny				iny
.9b0d	b1 30		lda ($30),y			lda 	(codePtr),y
.9b0f	f0 17		beq $9b28			beq 	_EHCREnd
.9b11					_EHAtMsg:
.9b11	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9b13	a9 30		lda #$30			lda 	#_AtMsg & $FF
.9b15	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA
.9b18	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9b1a	b1 30		lda ($30),y			lda 	(codePtr),y
.9b1c	48		pha				pha
.9b1d	c8		iny				iny
.9b1e	b1 30		lda ($30),y			lda 	(codePtr),y
.9b20	aa		tax				tax
.9b21	68		pla				pla
.9b22	20 bb b0	jsr $b0bb			jsr 	ConvertInt16 				; convert XA to string
.9b25	20 3a 9b	jsr $9b3a			jsr 	PrintStringXA 				; and print it.
.9b28					_EHCREnd:
.9b28	a9 0d		lda #$0d			lda 	#13 						; new line
.9b2a	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.9b2d					_EHEnd:
.9b2d	4c 46 8c	jmp $8c46			jmp 	WarmStart
>9b30	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b38	20 00
.9b3a					PrintStringXA:
.9b3a	5a		phy				phy
.9b3b	86 37		stx $37				stx 	zTemp0+1
.9b3d	85 36		sta $36				sta 	zTemp0
.9b3f	a0 00		ldy #$00			ldy 	#0
.9b41					_PSXALoop:
.9b41	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b43	f0 06		beq $9b4b			beq 	_PSXAExit
.9b45	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.9b48	c8		iny				iny
.9b49	80 f6		bra $9b41			bra 	_PSXALoop
.9b4b					_PSXAExit:
.9b4b	7a		ply				ply
.9b4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b4d					UnaryTrue:
.9b4d	fa		plx				plx
.9b4e					ReturnTrue:
.9b4e	a9 01		lda #$01			lda 	#1  						; set to 1
.9b50	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.9b53	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b55	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b58	60		rts				rts
.9b59					UnaryFalse:
.9b59	fa		plx				plx
.9b5a					ReturnFalse:
.9b5a	4c 1c a7	jmp $a71c			jmp 	NSMSetZero 					; set it all to zero
.9b5d					BinaryCompareEqual:
.9b5d	fa		plx				plx
.9b5e	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b61	c9 00		cmp #$00			cmp 	#0
.9b63	f0 e9		beq $9b4e			beq 	ReturnTrue
.9b65	80 f3		bra $9b5a			bra 	ReturnFalse
.9b67					BinaryCompareLess:
.9b67	fa		plx				plx
.9b68	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b6b	c9 ff		cmp #$ff			cmp 	#$FF
.9b6d	f0 df		beq $9b4e			beq 	ReturnTrue
.9b6f	80 e9		bra $9b5a			bra 	ReturnFalse
.9b71					BinaryCompareGreater:
.9b71	fa		plx				plx
.9b72	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b75	c9 01		cmp #$01			cmp 	#1
.9b77	f0 d5		beq $9b4e			beq 	ReturnTrue
.9b79	80 df		bra $9b5a			bra 	ReturnFalse
.9b7b					BinaryCompareNotEqual:
.9b7b	fa		plx				plx
.9b7c	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b7f	c9 00		cmp #$00			cmp 	#0
.9b81	d0 cb		bne $9b4e			bne 	ReturnTrue
.9b83	80 d5		bra $9b5a			bra 	ReturnFalse
.9b85					BinaryCompareLessEqual:
.9b85	fa		plx				plx
.9b86	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b89	c9 01		cmp #$01			cmp 	#1
.9b8b	d0 c1		bne $9b4e			bne 	ReturnTrue
.9b8d	80 cb		bra $9b5a			bra 	ReturnFalse
.9b8f					BinaryCompareGreaterEqual:
.9b8f	fa		plx				plx
.9b90	20 99 9b	jsr $9b99			jsr 	CompareBaseCode
.9b93	c9 ff		cmp #$ff			cmp 	#$FF
.9b95	d0 b7		bne $9b4e			bne 	ReturnTrue
.9b97	80 c1		bra $9b5a			bra 	ReturnFalse
.9b99					CompareBaseCode:
.9b99	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; make both values if references.
.9b9c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b9f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba2	29 10		and #$10			and 	#NSTString
.9ba4	d0 40		bne $9be6			bne 	_CBCString
.9ba6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9ba9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bac	d0 3b		bne $9be9			bne 	_CBCFloat
.9bae	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9bb1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bb4	29 08		and #$08			and 	#NSTFloat
.9bb6	d0 31		bne $9be9			bne 	_CBCFloat
.9bb8	20 ec 9b	jsr $9bec			jsr 	CompareFixMinusZero
.9bbb	e8		inx				inx
.9bbc	20 ec 9b	jsr $9bec			jsr 	CompareFixMinusZero
.9bbf	ca		dex				dex
.9bc0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9bc3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bc6	10 0b		bpl $9bd3			bpl 	_CDCSameSign
.9bc8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9bcb	30 16		bmi $9be3			bmi 	_CBCLess 					; return $FF
.9bcd					_CBCGreater:
.9bcd	a9 01		lda #$01			lda 	#1
.9bcf	60		rts				rts
.9bd0					_CBCEqual:
.9bd0	a9 00		lda #$00			lda 	#0
.9bd2	60		rts				rts
.9bd3					_CDCSameSign:
.9bd3	20 fc 9c	jsr $9cfc			jsr 	SubTopTwoStack 				; unsigned subtract
.9bd6	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; or the mantissa together
.9bd9	f0 f5		beq $9bd0			beq 	_CBCEqual 					; -0 == 0
.9bdb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bde	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9be1	10 ea		bpl $9bcd			bpl 	_CBCGreater
.9be3					_CBCLess:
.9be3	a9 ff		lda #$ff			lda 	#$FF
.9be5	60		rts				rts
.9be6					_CBCString:
.9be6	4c 52 9c	jmp $9c52			jmp 	CompareStrings
.9be9					_CBCFloat:
.9be9	4c bf b1	jmp $b1bf			jmp 	CompareFloat
.9bec					CompareFixMinusZero:
.9bec	20 4c a7	jsr $a74c			jsr 	NSMIsZero
.9bef	d0 03		bne $9bf4			bne 	_CFXMZNotZero
.9bf1	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9bf4					_CFXMZNotZero:
.9bf4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9bf5					StringConcat:
.9bf5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9bf8	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9bfb	29 18		and #$18			and 	#NSBTypeMask
.9bfd	c9 10		cmp #$10			cmp 	#NSTString
.9bff	d0 4e		bne $9c4f			bne		_SCType
.9c01	64 38		stz $38				stz 	zTemp1 						; counting total length
.9c03	e8		inx				inx
.9c04	20 22 9c	jsr $9c22			jsr 	_SCSetupZ0 					; setup for second
.9c07	20 2d 9c	jsr $9c2d			jsr 	_SCLengthZ0 				; length for second
.9c0a	ca		dex				dex
.9c0b	20 22 9c	jsr $9c22			jsr 	_SCSetupZ0 					; setup for first
.9c0e	20 2d 9c	jsr $9c2d			jsr 	_SCLengthZ0 				; length for first
.9c11	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9c13	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate
.9c16	20 40 9c	jsr $9c40			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9c19	e8		inx				inx
.9c1a	20 22 9c	jsr $9c22			jsr 	_SCSetupZ0 					; copy second out
.9c1d	20 40 9c	jsr $9c40			jsr 	_SCCopy
.9c20	ca		dex				dex
.9c21	60		rts				rts
.9c22					_SCSetupZ0:
.9c22	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c25	85 36		sta $36				sta 	zTemp0
.9c27	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c2a	85 37		sta $37				sta 	zTemp0+1
.9c2c	60		rts				rts
.9c2d					_SCLengthZ0:
.9c2d	5a		phy				phy
.9c2e	a0 00		ldy #$00			ldy 	#0
.9c30					_SCLenLoop:
.9c30	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c32	f0 0a		beq $9c3e			beq 	_SCLExit
.9c34	c8		iny				iny
.9c35	e6 38		inc $38				inc 	zTemp1
.9c37	10 f7		bpl $9c30			bpl		_SCLenLoop
.9c39	a9 09		lda #$09		lda	#9
.9c3b	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.9c3e					_SCLExit:
.9c3e	7a		ply				ply
.9c3f	60		rts				rts
.9c40					_SCCopy:
.9c40	5a		phy				phy
.9c41	a0 00		ldy #$00			ldy 	#0
.9c43					_SCCopyLoop:
.9c43	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c45	f0 06		beq $9c4d			beq 	_SCCExit
.9c47	20 0c b9	jsr $b90c			jsr 	StringTempWrite
.9c4a	c8		iny				iny
.9c4b	80 f6		bra $9c43			bra 	_SCCopyLoop
.9c4d					_SCCExit:
.9c4d	7a		ply				ply
.9c4e	60		rts				rts
.9c4f					_SCType:
.9c4f	4c 57 b5	jmp $b557			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af78					IntegerDivide:
.af78	fa		plx				plx
.af79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af7c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af7f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af80	0a		asl a				asl 	a
.af81	10 05		bpl $af88			bpl 	_NotRef
.af83	48		pha				pha
.af84	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af87	68		pla				pla
.af88					_NotRef:
.af88	0a		asl a				asl 	a
.af89	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af8b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af8e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af91	f0 03		beq $af96			beq 	_IntegerCode 				; if clear, then we have two integers
.af93	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.af96					_IntegerCode:
.af96	20 b8 af	jsr $afb8			jsr 	CheckDivideZero 			; do div zero check
.af99	20 f0 af	jsr $aff0			jsr 	Int32Divide 				; do the division
.af9c	20 ad b0	jsr $b0ad			jsr 	CalculateSign 				; calculate result sign
.af9f					NSMCopyPlusTwoToZero:
.af9f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.afa2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afa5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.afa8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afab	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.afae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afb1	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.afb4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afb7	60		rts				rts
.afb8					CheckDivideZero:
.afb8	e8		inx				inx
.afb9	20 4c a7	jsr $a74c			jsr 	NSMIsZero
.afbc	f0 02		beq $afc0			beq 	_CDVError
.afbe	ca		dex				dex
.afbf	60		rts				rts
.afc0					_CDVError:
.afc0	a9 03		lda #$03		lda	#3
.afc2	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.afc5					IntegerModulus:
.afc5	fa		plx				plx
.afc6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afc9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afcc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afcd	0a		asl a				asl 	a
.afce	10 05		bpl $afd5			bpl 	_NotRef
.afd0	48		pha				pha
.afd1	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afd4	68		pla				pla
.afd5					_NotRef:
.afd5	0a		asl a				asl 	a
.afd6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afd8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afdb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afde	f0 03		beq $afe3			beq 	_IntegerCode 				; if clear, then we have two integers
.afe0	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.afe3					_IntegerCode:
.afe3					IntegerModulusNoCheck:
.afe3	20 b8 af	jsr $afb8			jsr 	CheckDivideZero 			; do div zero check
.afe6	20 f0 af	jsr $aff0			jsr 	Int32Divide 				; do the division
.afe9	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afec	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afef	60		rts				rts
.aff0					Int32Divide:
.aff0	48		pha				pha 								; save AXY
.aff1	5a		phy				phy
.aff2	20 f3 a6	jsr $a6f3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aff5	20 18 a7	jsr $a718			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aff8	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.affa					_I32DivideLoop:
.affa	e8		inx				inx
.affb	e8		inx				inx
.affc	20 31 a7	jsr $a731			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.afff	ca		dex				dex
.b000	ca		dex				dex
.b001	20 32 a7	jsr $a732			jsr 	NSMRotateLeft
.b004	20 30 b0	jsr $b030			jsr 	DivideCheckSubtract 		; check if subtract possible
.b007	90 03		bcc $b00c			bcc 	_I32DivideNoCarryIn
.b009	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.b00c					_I32DivideNoCarryIn:
.b00c	88		dey				dey 								; loop round till division completed.
.b00d	d0 eb		bne $affa			bne 	_I32DivideLoop
.b00f	7a		ply				ply 								; restore AXY and exit
.b010	68		pla				pla
.b011	60		rts				rts
.b012					Int32ShiftDivide:
.b012	48		pha				pha 								; save AY
.b013	5a		phy				phy
.b014	e8		inx				inx 								; clear S[X+2]
.b015	e8		inx				inx
.b016	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.b019	ca		dex				dex
.b01a	ca		dex				dex
.b01b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b01d					_I32SDLoop:
.b01d	20 30 b0	jsr $b030			jsr 	DivideCheckSubtract 		; check if subtract possible
.b020	e8		inx				inx
.b021	e8		inx				inx
.b022	20 32 a7	jsr $a732			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b025	ca		dex				dex
.b026	ca		dex				dex
.b027	20 32 a7	jsr $a732			jsr 	NSMRotateLeft
.b02a	88		dey				dey 	 							; do 31 times
.b02b	d0 f0		bne $b01d			bne 	_I32SDLoop
.b02d	7a		ply				ply 								; restore AY and exit
.b02e	68		pla				pla
.b02f	60		rts				rts
.b030					DivideCheckSubtract:
.b030	20 fc 9c	jsr $9cfc			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b033	b0 04		bcs $b039			bcs 	_DCSExit 					; if carry set, then could do, exit
.b035	20 d6 9c	jsr $9cd6			jsr 	AddTopTwoStack 				; add it back in
.b038	18		clc				clc 								; and return False
.b039					_DCSExit:
.b039	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b03a					MulInteger:
.b03a	fa		plx				plx
.b03b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b03e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b041	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b042	0a		asl a				asl 	a
.b043	10 05		bpl $b04a			bpl 	_NotRef
.b045	48		pha				pha
.b046	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b049	68		pla				pla
.b04a					_NotRef:
.b04a	0a		asl a				asl 	a 							; put MSB of type into A:7
.b04b	30 0b		bmi $b058			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b04d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b050	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b053	f0 06		beq $b05b			beq 	_IntegerCode 				; if clear, then we have two integers
.b055	4c 96 b2	jmp $b296			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b058					_StringData:
.b058	4c 61 b5	jmp $b561			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b05b					_IntegerCode:
.b05b	20 68 b0	jsr $b068			jsr 	MultiplyShort
.b05e	c9 00		cmp #$00			cmp 	#0
.b060	f0 05		beq $b067			beq 	_MIExit
.b062	a9 04		lda #$04		lda	#4
.b064	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b067					_MIExit:
.b067	60		rts				rts
.b068					MultiplyShort:
.b068	5a		phy				phy 								; save Y
.b069	20 f3 a6	jsr $a6f3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b06c	20 18 a7	jsr $a718			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b06f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b071					_I32MLoop:
.b071	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b074	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b077	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b07a	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b07d	f0 28		beq $b0a7			beq 	_I32MExit 					; exit if zero
.b07f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b082	29 01		and #$01			and 	#1
.b084	f0 0e		beq $b094			beq 	_I32MNoAdd
.b086	20 d6 9c	jsr $9cd6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b089	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b08c	10 06		bpl $b094			bpl 	_I32MNoAdd
.b08e					_I32ShiftRight:
.b08e	20 3f a7	jsr $a73f			jsr 	NSMShiftRight 				; shift S[X] right
.b091	c8		iny				iny 								; increment shift count
.b092	80 0a		bra $b09e			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b094					_I32MNoAdd:
.b094	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b097	70 f5		bvs $b08e			bvs 	_I32ShiftRight 				; instead.
.b099	e8		inx				inx
.b09a	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b09d	ca		dex				dex
.b09e					_I32MShiftUpper:
.b09e	e8		inx				inx 								; shift S[X+2] right
.b09f	e8		inx				inx
.b0a0	20 3f a7	jsr $a73f			jsr 	NSMShiftRight
.b0a3	ca		dex				dex
.b0a4	ca		dex				dex
.b0a5	80 ca		bra $b071			bra 	_I32MLoop 					; try again.
.b0a7					_I32MExit:
.b0a7	20 ad b0	jsr $b0ad			jsr 	CalculateSign
.b0aa	98		tya				tya 								; shift in A
.b0ab	7a		ply				ply 								; restore Y and exit
.b0ac	60		rts				rts
.b0ad					CalculateSign:
.b0ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b0b0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b0b3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b0b6	0a		asl a				asl 	a 							; shift bit 7 into carry
.b0b7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b0ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c52					CompareStrings:
.9c52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c55	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c58	29 10		and #$10			and 	#NSBIsString
.9c5a	f0 2c		beq $9c88			beq 	_CSTypeError
.9c5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c5f	85 36		sta $36				sta 	zTemp0
.9c61	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c64	85 37		sta $37				sta 	zTemp0+1
.9c66	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c69	85 38		sta $38				sta 	zTemp1
.9c6b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c6e	85 39		sta $39				sta 	zTemp1+1
.9c70	5a		phy				phy 								; save Y so we can access strings
.9c71	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c73					_CSLoop:
.9c73	c8		iny				iny
.9c74	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c76	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c78	d0 06		bne $9c80			bne 	_CSDifferent
.9c7a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c7c	d0 f5		bne $9c73			bne 	_CSLoop 					; still comparing
.9c7e					_CSExit:
.9c7e	7a		ply				ply 								; reached end, return zero in A from EOS
.9c7f	60		rts				rts
.9c80					_CSDifferent:
.9c80	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c82	90 fa		bcc $9c7e			bcc		_CSExit
.9c84	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c86	80 f6		bra $9c7e			bra 	_CSExit
.9c88					_CSTypeError:
.9c88	4c 57 b5	jmp $b557			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c8b					ShiftLeft:
.9c8b	38		sec				sec
.9c8c	80 01		bra $9c8f			bra 	ShiftMain
.9c8e					ShiftRight:
.9c8e	18		clc				clc
.9c8f					ShiftMain:
.9c8f	fa		plx				plx 								; restore X
.9c90	08		php				php 								; save direction
.9c91	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c94	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c97	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c98	0a		asl a				asl 	a
.9c99	10 05		bpl $9ca0			bpl 	_NotRef
.9c9b	48		pha				pha
.9c9c	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c9f	68		pla				pla
.9ca0					_NotRef:
.9ca0	0a		asl a				asl 	a
.9ca1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ca3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca9	f0 03		beq $9cae			beq 	_IntegerCode 				; if clear, then we have two integers
.9cab	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9cae					_IntegerCode:
.9cae	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9cb1	29 e0		and #$e0			and 	#$E0
.9cb3	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9cb6	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9cb9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9cbc	d0 13		bne $9cd1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9cbe					_SMLoop:
.9cbe	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9cc1	30 11		bmi $9cd4			bmi 	_SMExit 					; exit if done.
.9cc3	28		plp				plp 								; restore direcition setting
.9cc4	08		php				php
.9cc5	90 05		bcc $9ccc			bcc 	_SMRight
.9cc7	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; shift left if CS
.9cca	80 f2		bra $9cbe			bra 	_SMLoop
.9ccc					_SMRight:
.9ccc	20 3f a7	jsr $a73f			jsr 	NSMShiftRight 				; shift right if CC
.9ccf	80 ed		bra $9cbe			bra 	_SMLoop
.9cd1					_SMExit0:
.9cd1	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; return zero.
.9cd4					_SMExit:
.9cd4	28		plp				plp 								; throw direction
.9cd5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9cd6					AddTopTwoStack:
.9cd6	18		clc				clc
.9cd7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cda	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cdd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ce0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ce3	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9ce6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ce9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cec	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9cef	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cf2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cf5	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9cf8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cfb	60		rts				rts
.9cfc					SubTopTwoStack:
.9cfc	38		sec				sec
.9cfd	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d00	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9d03	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d06	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d09	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9d0c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d0f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d12	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9d15	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d18	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d1b	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d1e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d21	60		rts				rts
.9d22					AddInteger:
.9d22	fa		plx				plx
.9d23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d26	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d29	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d2a	0a		asl a				asl 	a
.9d2b	10 05		bpl $9d32			bpl 	_NotRef
.9d2d	48		pha				pha
.9d2e	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d31	68		pla				pla
.9d32					_NotRef:
.9d32	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d33	30 0b		bmi $9d40			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d35	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d38	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d3b	f0 06		beq $9d43			beq 	_IntegerCode 				; if clear, then we have two integers
.9d3d	4c 16 b1	jmp $b116			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d40					_StringData:
.9d40	4c f5 9b	jmp $9bf5			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d43					_IntegerCode:
.9d43					AddCode:
.9d43	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d46	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d49	10 8b		bpl $9cd6			bpl 	AddTopTwoStack
.9d4b	20 fc 9c	jsr $9cfc			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d4e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d51	10 09		bpl $9d5c			bpl 	_AddExit
.9d53	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d56	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d59	20 d1 a6	jsr $a6d1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d5c					_AddExit:
.9d5c	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; check for -0
.9d5f	d0 03		bne $9d64			bne 	_AddNonZero
.9d61	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d64					_AddNonZero:
.9d64	60		rts				rts
.9d65					SubInteger:
.9d65	fa		plx				plx
.9d66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d69	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d6c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d6d	0a		asl a				asl 	a
.9d6e	10 05		bpl $9d75			bpl 	_NotRef
.9d70	48		pha				pha
.9d71	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d74	68		pla				pla
.9d75					_NotRef:
.9d75	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d76	30 0b		bmi $9d83			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d78	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d7b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d7e	f0 06		beq $9d86			beq 	_IntegerCode 				; if clear, then we have two integers
.9d80	4c 1b b1	jmp $b11b			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d83					_StringData:
.9d83	4c 61 b5	jmp $b561			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d86					_IntegerCode:
.9d86	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d89	49 80		eor #$80			eor 	#$80
.9d8b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d8e	80 b3		bra $9d43			bra 	AddCode 					; and do the same code as add.
.9d90					AndInteger:
.9d90	fa		plx				plx
.9d91	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d94	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d97	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d98	0a		asl a				asl 	a
.9d99	10 05		bpl $9da0			bpl 	_NotRef
.9d9b	48		pha				pha
.9d9c	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d9f	68		pla				pla
.9da0					_NotRef:
.9da0	0a		asl a				asl 	a
.9da1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9da3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9da6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9da9	f0 03		beq $9dae			beq 	_IntegerCode 				; if clear, then we have two integers
.9dab	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9dae					_IntegerCode:
.9dae	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9db1	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9db4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9dba	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9dbd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9dc3	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9dc6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dcc	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9dcf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dd5	60		rts				rts
.9dd6					OraInteger:
.9dd6	fa		plx				plx
.9dd7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dda	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ddd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dde	0a		asl a				asl 	a
.9ddf	10 05		bpl $9de6			bpl 	_NotRef
.9de1	48		pha				pha
.9de2	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9de5	68		pla				pla
.9de6					_NotRef:
.9de6	0a		asl a				asl 	a
.9de7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9de9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dec	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9def	f0 03		beq $9df4			beq 	_IntegerCode 				; if clear, then we have two integers
.9df1	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9df4					_IntegerCode:
.9df4	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9df7	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9dfa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dfd	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e00	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9e03	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e06	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e09	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9e0c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e0f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e12	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9e15	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e18	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e1b	60		rts				rts
.9e1c					EorInteger:
.9e1c	fa		plx				plx
.9e1d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e20	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e23	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e24	0a		asl a				asl 	a
.9e25	10 05		bpl $9e2c			bpl 	_NotRef
.9e27	48		pha				pha
.9e28	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e2b	68		pla				pla
.9e2c					_NotRef:
.9e2c	0a		asl a				asl 	a
.9e2d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e2f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e32	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e35	f0 03		beq $9e3a			beq 	_IntegerCode 				; if clear, then we have two integers
.9e37	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9e3a					_IntegerCode:
.9e3a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e3d	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e40	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e43	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e46	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e49	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e4c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e4f	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e52	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e55	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e58	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e5b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e5e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e61	60		rts				rts
.9e62					WordIndirect:
.9e62	fa		plx				plx
.9e63	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e66	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e69	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e6a	0a		asl a				asl 	a
.9e6b	10 05		bpl $9e72			bpl 	_NotRef
.9e6d	48		pha				pha
.9e6e	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e71	68		pla				pla
.9e72					_NotRef:
.9e72	0a		asl a				asl 	a
.9e73	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e75	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e78	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e7b	f0 03		beq $9e80			beq 	_IntegerCode 				; if clear, then we have two integers
.9e7d	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9e80					_IntegerCode:
.9e80	20 43 9d	jsr $9d43			jsr 	AddCode 					; add the two values
.9e83	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e85	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e88	60		rts				rts
.9e89					ByteIndirect:
.9e89	fa		plx				plx
.9e8a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e8d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e90	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e91	0a		asl a				asl 	a
.9e92	10 05		bpl $9e99			bpl 	_NotRef
.9e94	48		pha				pha
.9e95	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e98	68		pla				pla
.9e99					_NotRef:
.9e99	0a		asl a				asl 	a
.9e9a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e9c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e9f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ea2	f0 03		beq $9ea7			beq 	_IntegerCode 				; if clear, then we have two integers
.9ea4	4c 57 b5	jmp $b557			jmp 	TypeError 					; anything else, type mismatch.
.9ea7					_IntegerCode:
.9ea7	20 43 9d	jsr $9d43			jsr 	AddCode 					; add the two values
.9eaa	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9eac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eaf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b0bb					ConvertInt16:
.b0bb	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0be	8e 10 04	stx $0410			stx 	NSMantissa1
.b0c1	9c 18 04	stz $0418			stz 	NSMantissa2
.b0c4	9c 20 04	stz $0420			stz 	NSMantissa3
.b0c7	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0ca	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0cc	a9 0a		lda #$0a			lda 	#10 						; base
.b0ce	80 00		bra $b0d0			bra 	ConvertInt32
.b0d0					ConvertInt32:
.b0d0	5a		phy				phy
.b0d1	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0d3	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0d6	10 08		bpl $b0e0			bpl 	_CI32NotNeg
.b0d8	48		pha				pha
.b0d9	a9 2d		lda #$2d			lda 	#'-'
.b0db	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0de	c8		iny				iny
.b0df	68		pla				pla
.b0e0					_CI32NotNeg:
.b0e0	20 ee b0	jsr $b0ee			jsr 	_CI32DivideConvert 			; recursive conversion
.b0e3	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0e5	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0e8	7a		ply				ply
.b0e9	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0eb	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0ed	60		rts				rts
.b0ee					_CI32DivideConvert:
.b0ee	e8		inx				inx 								; write to next slot up
.b0ef	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.b0f2	ca		dex				dex
.b0f3	20 f0 af	jsr $aff0			jsr 	Int32Divide 				; divide
.b0f6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0f9	48		pha				pha
.b0fa	20 9f af	jsr $af9f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0fd	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; is it zero ?
.b100	f0 06		beq $b108			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b102	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b105	20 ee b0	jsr $b0ee			jsr 	_CI32DivideConvert 			; and recusrively call.
.b108					_CI32NoRecurse:
.b108	68		pla				pla 								; remainder
.b109	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b10b	90 02		bcc $b10f			bcc 	_CI32NotHex
.b10d	69 26		adc #$26			adc 	#6+32
.b10f					_CI32NotHex:
.b10f	69 30		adc #$30			adc 	#48
.b111	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b114	c8		iny				iny
.b115	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9eb0					PrecedenceLevel:
>9eb0	04					.byte	 4	; $00 <<
>9eb1	02					.byte	 2	; $01 <=
>9eb2	02					.byte	 2	; $02 <>
>9eb3	00					.byte	 0	; $03 !!3
>9eb4	00					.byte	 0	; $04 ><
>9eb5	02					.byte	 2	; $05 >=
>9eb6	04					.byte	 4	; $06 >>
>9eb7	00					.byte	 0	; $07 !!7
>9eb8	00					.byte	 0	; $08 !!8
>9eb9	00					.byte	 0	; $09 !!9
>9eba	00					.byte	 0	; $0a !!10
>9ebb	00					.byte	 0	; $0b !!11
>9ebc	00					.byte	 0	; $0c !!12
>9ebd	00					.byte	 0	; $0d !!13
>9ebe	00					.byte	 0	; $0e !!14
>9ebf	00					.byte	 0	; $0f !!15
>9ec0	00					.byte	 0	; $10 @
>9ec1	00					.byte	 0	; $11 !!17
>9ec2	00					.byte	 0	; $12 !!18
>9ec3	00					.byte	 0	; $13 [
>9ec4	04					.byte	 4	; $14 \
>9ec5	00					.byte	 0	; $15 ]
>9ec6	01					.byte	 1	; $16 ^
>9ec7	00					.byte	 0	; $17 _
>9ec8	00					.byte	 0	; $18 `
>9ec9	00					.byte	 0	; $19 !!25
>9eca	00					.byte	 0	; $1a !!26
>9ecb	00					.byte	 0	; $1b {
>9ecc	01					.byte	 1	; $1c |
>9ecd	00					.byte	 0	; $1d }
>9ece	00					.byte	 0	; $1e ~
>9ecf	00					.byte	 0	; $1f [7m<7F>[m
>9ed0	00					.byte	 0	; $20
>9ed1	05					.byte	 5	; $21 !
>9ed2	00					.byte	 0	; $22 "
>9ed3	00					.byte	 0	; $23 #
>9ed4	05					.byte	 5	; $24 $
>9ed5	04					.byte	 4	; $25 %
>9ed6	01					.byte	 1	; $26 &
>9ed7	00					.byte	 0	; $27 '
>9ed8	00					.byte	 0	; $28 (
>9ed9	00					.byte	 0	; $29 )
>9eda	04					.byte	 4	; $2a *
>9edb	03					.byte	 3	; $2b +
>9edc	00					.byte	 0	; $2c ,
>9edd	03					.byte	 3	; $2d -
>9ede	00					.byte	 0	; $2e .
>9edf	04					.byte	 4	; $2f /
>9ee0	00					.byte	 0	; $30 0
>9ee1	00					.byte	 0	; $31 1
>9ee2	00					.byte	 0	; $32 2
>9ee3	00					.byte	 0	; $33 3
>9ee4	00					.byte	 0	; $34 4
>9ee5	00					.byte	 0	; $35 5
>9ee6	00					.byte	 0	; $36 6
>9ee7	00					.byte	 0	; $37 7
>9ee8	00					.byte	 0	; $38 8
>9ee9	00					.byte	 0	; $39 9
>9eea	00					.byte	 0	; $3a :
>9eeb	00					.byte	 0	; $3b ;
>9eec	02					.byte	 2	; $3c <
>9eed	02					.byte	 2	; $3d =
>9eee	02					.byte	 2	; $3e >
>9eef	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ef0					EvaluateExpressionAt0:
.9ef0	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9ef2					EvaluateExpression:
.9ef2	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9ef4					EvaluateExpressionAtPrecedence:
.9ef4	48		pha				pha 								; save precedence level
.9ef5	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ef8	68		pla				pla 								; restore precedence level.
.9ef9					_EXPRLoop:
.9ef9	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9efb	b1 30		lda ($30),y			lda 	(codePtr),y
.9efd	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9eff	b0 25		bcs $9f26			bcs 	_EXPRExit
.9f01	da		phx				phx 								; read the operator precedence
.9f02	aa		tax				tax
.9f03	bd b0 9e	lda $9eb0,x			lda 	PrecedenceLevel,x
.9f06	fa		plx				plx
.9f07	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9f09	f0 1b		beq $9f26			beq 	_EXPRExit
.9f0b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9f0d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9f0f	c5 37		cmp $37				cmp 	zTemp0+1
.9f11	b0 13		bcs $9f26			bcs		_EXPRExit 					; if current >= operator exit
.9f13	48		pha				pha 								; save current precedence.
.9f14	b1 30		lda ($30),y			lda 	(codePtr),y
.9f16	c8		iny				iny
.9f17	48		pha				pha
.9f18	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f1a	e8		inx				inx 								; work out the right hand side.
.9f1b	20 f4 9e	jsr $9ef4			jsr 	EvaluateExpressionAtPrecedence
.9f1e	ca		dex				dex
.9f1f	68		pla				pla 								; get operator, call the code.
.9f20	20 29 9f	jsr $9f29			jsr 	_EXPRCaller
.9f23	68		pla				pla 								; restore precedence level
.9f24	80 d3		bra $9ef9			bra 	_EXPRLoop 					; and go round.
.9f26					_EXPRExit:
.9f26	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f28	60		rts				rts
.9f29					_EXPRCaller:
.9f29	da		phx				phx 								; save on stack, first thing is to restore it
.9f2a	0a		asl a				asl 	a 							; double so can use vectors into X
.9f2b	aa		tax				tax
.9f2c	7c 66 96	jmp ($9666,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b116					FloatingPointAdd:
.b116	20 bf b2	jsr $b2bf			jsr 	FloatPrepare 				; prepare for floats
.b119	80 0b		bra $b126			bra 	FloatAdd
.b11b					FloatingPointSub:
.b11b	20 bf b2	jsr $b2bf			jsr 	FloatPrepare 				; prepare for floats
.b11e					FloatSubtract:
.b11e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b121	49 80		eor #$80			eor 	#$80
.b123	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b126					FloatAdd:
.b126	48		pha				pha
.b127	5a		phy				phy
.b128	20 d0 b2	jsr $b2d0			jsr 	NSNormalise 				; normalise S[X]
.b12b	f0 5c		beq $b189			beq 	_FAReturn1
.b12d	e8		inx				inx 								; normalise S[X+1]
.b12e	20 d0 b2	jsr $b2d0			jsr 	NSNormalise
.b131	ca		dex				dex
.b132	c9 00		cmp #$00			cmp 	#0
.b134	f0 77		beq $b1ad			beq 	_FAExit 					; if so, just return A
.b136	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b139	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b13c	f0 1b		beq $b159			beq 	_FAExponentsEqual
.b13e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b141	a8		tay				tay
.b142	38		sec				sec 								; do a signed comparison of the exponents.
.b143	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b146	50 02		bvc $b14a			bvc 	_FANoSignedChange
.b148	49 80		eor #$80			eor 	#$80
.b14a					_FANoSignedChange:
.b14a	29 80		and #$80			and 	#$80
.b14c	10 03		bpl $b151			bpl 	_FAHaveMax
.b14e	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b151					_FAHaveMax:
.b151	20 b0 b1	jsr $b1b0			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b154	e8		inx				inx
.b155	20 b0 b1	jsr $b1b0			jsr 	_FAShiftToExponent
.b158	ca		dex				dex
.b159					_FAExponentsEqual:
.b159	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b15c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b15f	30 10		bmi $b171			bmi 	_FADifferentSigns
.b161	20 d6 9c	jsr $9cd6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b164	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b167	10 44		bpl $b1ad			bpl 	_FAExit 					; if no, we are done.
.b169	20 3f a7	jsr $a73f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b16c	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b16f	80 3c		bra $b1ad			bra 	_FAExit
.b171					_FADifferentSigns:
.b171	20 fc 9c	jsr $9cfc			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b174	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b177	10 06		bpl $b17f			bpl 	_FACheckZero 				; if no, check for -0
.b179	20 c8 a6	jsr $a6c8			jsr 	NSMNegate 					; netate result
.b17c	20 d1 a6	jsr $a6d1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b17f					_FACheckZero:
.b17f	20 4c a7	jsr $a74c			jsr 	NSMIsZero	 				; check for -0
.b182	d0 29		bne $b1ad			bne 	_FAExit
.b184	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b187	80 24		bra $b1ad			bra 	_FAExit
.b189					_FAReturn1:
.b189	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b18c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b18f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b192	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b195	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b198	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b19b	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b19e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b1a1	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b1a4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1a7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b1aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1ad					_FAExit:
.b1ad	7a		ply				ply
.b1ae	68		pla				pla
.b1af	60		rts				rts
.b1b0					_FAShiftToExponent:
.b1b0					_FAShiftToExponent2:
.b1b0	98		tya				tya 								; compare Y to exponent
.b1b1	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b1b4	f0 08		beq $b1be			beq 	_FASEExit 					; exit if so.
.b1b6	20 3f a7	jsr $a73f			jsr 	NSMShiftRight	 			; shift the mantissa right
.b1b9	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1bc	80 f2		bra $b1b0			bra 	_FAShiftToExponent2
.b1be					_FASEExit:
.b1be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1bf					CompareFloat:
.b1bf	20 1e b1	jsr $b11e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1c2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1c5	29 f8		and #$f8			and 	#$F8
.b1c7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1ca	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1cd	f0 09		beq $b1d8			beq 	_FCExit 					; zero, so approximately identical
.b1cf	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1d1	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1d4	10 02		bpl $b1d8			bpl 	_FCExit
.b1d6					_FCNegative:
.b1d6	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1d8					_FCExit:
.b1d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1d9					FDivideCommand:
.b1d9	fa		plx				plx	 								; restore stack position
.b1da	20 bf b2	jsr $b2bf			jsr 	FloatPrepare 				; prepare for floats
.b1dd					FloatDivide:
.b1dd	48		pha				pha
.b1de	e8		inx				inx
.b1df	20 d0 b2	jsr $b2d0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1e2	ca		dex				dex
.b1e3	c9 00		cmp #$00			cmp 	#0
.b1e5	f0 20		beq $b207			beq 	_FDZero
.b1e7	20 d0 b2	jsr $b2d0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1ea	f0 19		beq $b205			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1ec	20 12 b0	jsr $b012			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1ef	20 9f af	jsr $af9f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1f2	20 d0 b2	jsr $b2d0			jsr		NSNormalise 				; renormalise
.b1f5	20 ad b0	jsr $b0ad			jsr 	CalculateSign 				; calculate result sign
.b1f8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1fb	38		sec				sec
.b1fc	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1ff	38		sec				sec
.b200	e9 1e		sbc #$1e			sbc 	#30
.b202	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b205					_FDExit:
.b205	68		pla				pla
.b206	60		rts				rts
.b207					_FDZero:
.b207	a9 03		lda #$03		lda	#3
.b209	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b20c					FloatFractionalPart:
.b20c	5a		phy				phy
.b20d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b210	29 7f		and #$7f			and 	#$7F
.b212	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b215	20 d0 b2	jsr $b2d0			jsr 	NSNormalise
.b218	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b21b	38		sec				sec
.b21c	e9 e0		sbc #$e0			sbc 	#$E0
.b21e	90 31		bcc $b251			bcc 	_FFPExit 					; already fractional
.b220	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b222	b0 2a		bcs $b24e			bcs 	_FFPZero
.b224	a8		tay				tay 								; put count to do in Y
.b225	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b228	20 53 b2	jsr $b253			jsr 	_FFPPartial
.b22b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b22e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b231	20 53 b2	jsr $b253			jsr 	_FFPPartial
.b234	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b237	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b23a	20 53 b2	jsr $b253			jsr 	_FFPPartial
.b23d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b240	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b243	20 53 b2	jsr $b253			jsr 	_FFPPartial
.b246	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b249	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; zeroed check.
.b24c	d0 03		bne $b251			bne 	_FFPExit
.b24e					_FFPZero:
.b24e	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.b251					_FFPExit:
.b251	7a		ply				ply
.b252	60		rts				rts
.b253					_FFPPartial:
.b253	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b255	f0 17		beq $b26e			beq 	_FFFPPExit
.b257	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b259	b0 0c		bcs $b267			bcs 	_FFFPPWholeByte
.b25b	5a		phy				phy
.b25c					_FFFPPLeft:
.b25c	0a		asl a				asl 	a
.b25d	88		dey				dey
.b25e	d0 fc		bne $b25c			bne 	_FFFPPLeft
.b260	7a		ply				ply
.b261					_FFFPPRight:
.b261	4a		lsr a				lsr 	a
.b262	88		dey				dey
.b263	d0 fc		bne $b261			bne 	_FFFPPRight
.b265	80 07		bra $b26e			bra 	_FFFPPExit
.b267					_FFFPPWholeByte:
.b267	98		tya				tya 								; subtract 8 from count
.b268	38		sec				sec
.b269	e9 08		sbc #$08			sbc 	#8
.b26b	a8		tay				tay
.b26c	a9 00		lda #$00			lda 	#0 							; and clear all
.b26e					_FFFPPExit:
.b26e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b26f					FloatIntegerPart:
.b26f	48		pha				pha
.b270	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b273	f0 1f		beq $b294			beq 	_FIPExit 					; if so do nothing
.b275	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; is it zero ?
.b278	f0 17		beq $b291			beq 	_FIPZero 					; if so return zero.
.b27a	20 d0 b2	jsr $b2d0			jsr 	NSNormalise 				; normalise
.b27d	f0 12		beq $b291			beq 	_FIPZero 					; normalised to zero, exit zero
.b27f					_FIPShift:
.b27f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b282	10 08		bpl $b28c			bpl 	_FIPCheckZero
.b284	20 3f a7	jsr $a73f			jsr 	NSMShiftRight 				; shift mantissa right
.b287	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b28a	80 f3		bra $b27f			bra 	_FIPShift
.b28c					_FIPCheckZero:
.b28c	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; avoid -0 problem
.b28f	d0 03		bne $b294			bne 	_FIPExit 					; set to zero if mantissa zero.
.b291					_FIPZero:
.b291	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.b294					_FIPExit:
.b294	68		pla				pla
.b295	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b296					FloatingPointMultiply:
.b296	20 bf b2	jsr $b2bf			jsr 	FloatPrepare 				; prepare for floats
.b299					FloatMultiply:
.b299	48		pha				pha
.b29a	20 d0 b2	jsr $b2d0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b29d	f0 1b		beq $b2ba			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b29f	e8		inx				inx
.b2a0	20 d0 b2	jsr $b2d0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b2a3	ca		dex				dex
.b2a4	c9 00		cmp #$00			cmp 	#0
.b2a6	f0 0f		beq $b2b7			beq 	_FDSetZero
.b2a8	20 68 b0	jsr $b068			jsr 	MultiplyShort 				; calculate the result.
.b2ab	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b2ae	18		clc				clc
.b2af	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b2b2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2b5	80 03		bra $b2ba			bra 	_FDExit
.b2b7					_FDSetZero:
.b2b7	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; return 0
.b2ba					_FDExit:
.b2ba	20 d0 b2	jsr $b2d0			jsr 	NSNormalise 				; normalise the result
.b2bd	68		pla				pla
.b2be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2bf					FloatPrepare:
.b2bf	20 02 a0	jsr $a002			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2c8	29 10		and #$10			and 	#NSBIsString
.b2ca	d0 01		bne $b2cd			bne 	_FDType
.b2cc	60		rts				rts
.b2cd					_FDType:
.b2cd	4c 57 b5	jmp $b557			jmp 	TypeError
.b2d0					NSNormalise:
.b2d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2d3	29 80		and #$80			and 	#$80
.b2d5	09 08		ora #$08			ora 	#NSTFloat
.b2d7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2da	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; if zero exit
.b2dd	d0 09		bne $b2e8			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2df	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2e2	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2e5	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2e7	60		rts				rts
.b2e8					_NSNormaliseOptimise:
.b2e8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2eb	d0 22		bne $b30f			bne 	_NSNormaliseLoop
.b2ed	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2f0	30 1d		bmi $b30f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2f2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2f8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2fb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2fe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b301	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b304	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b307	38		sec				sec
.b308	e9 08		sbc #$08			sbc 	#8
.b30a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b30d	80 d9		bra $b2e8			bra 	_NSNormaliseOptimise
.b30f					_NSNormaliseLoop:
.b30f	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b312	70 08		bvs $b31c			bvs 	_NSNExit 					; exit if so with Z flag clear
.b314	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; shift mantissa left
.b317	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b31a	80 f3		bra $b30f			bra 	_NSNormaliseLoop
.b31c					_NSNExit:
.b31c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b31e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f2f					AssignNumber:
.9f2f	5a		phy				phy
.9f30	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f33	85 36		sta $36				sta 	zTemp0
.9f35	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f38	85 37		sta $37				sta 	zTemp0+1
.9f3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f3d	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f3f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f42	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f44	c9 08		cmp #$08			cmp 	#NSTFloat
.9f46	f0 2a		beq $9f72			beq 	_ANFloat
.9f48	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f4b	f0 05		beq $9f52			beq		_ANNotFloat
.9f4d	e8		inx				inx
.9f4e	20 6f b2	jsr $b26f			jsr 	FloatIntegerPart 			; make it an integer
.9f51	ca		dex				dex
.9f52					_ANNotFloat:
.9f52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f55	29 03		and #$03			and 	#3
.9f57	d0 05		bne $9f5e			bne 	_ANByteWord
.9f59	20 7e 9f	jsr $9f7e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f5c	80 1e		bra $9f7c			bra 	_ANExit
.9f5e					_ANByteWord:
.9f5e	48		pha				pha 								; save count
.9f5f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f62	92 36		sta ($36)			sta 	(zTemp0)
.9f64	68		pla				pla
.9f65	c9 01		cmp #$01			cmp	 	#1
.9f67	f0 13		beq $9f7c			beq 	_ANExit
.9f69	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f6c	a0 01		ldy #$01			ldy 	#1
.9f6e	91 36		sta ($36),y			sta 	(zTemp0),y
.9f70	80 0a		bra $9f7c			bra 	_ANExit
.9f72					_ANFloat:
.9f72	20 7e 9f	jsr $9f7e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f75	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f78	a0 04		ldy #$04			ldy 	#4
.9f7a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f7c					_ANExit:
.9f7c	7a		ply				ply
.9f7d	60		rts				rts
.9f7e					_ANCopy4PackSign:
.9f7e	a0 03		ldy #$03			ldy 	#3
.9f80	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f83	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f85	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f88	91 36		sta ($36),y			sta 	(zTemp0),y
.9f8a	88		dey				dey
.9f8b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f8e	91 36		sta ($36),y			sta 	(zTemp0),y
.9f90	88		dey				dey
.9f91	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f94	91 36		sta ($36),y			sta 	(zTemp0),y
.9f96	88		dey				dey
.9f97	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f9a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f9d					AssignString:
.9f9d	5a		phy				phy
.9f9e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9fa1	85 38		sta $38				sta 	zTemp1
.9fa3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fa6	85 39		sta $39				sta 	zTemp1+1
.9fa8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fab	85 36		sta $36				sta 	zTemp0
.9fad	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fb0	85 37		sta $37				sta 	zTemp0+1
.9fb2	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9fb4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb6	f0 23		beq $9fdb			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9fb8	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9fb9	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9fbb	e9 02		sbc #$02			sbc 	#2
.9fbd	85 3c		sta $3c				sta 	zsTemp
.9fbf	a0 01		ldy #$01			ldy 	#1
.9fc1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fc3	e9 00		sbc #$00			sbc 	#0
.9fc5	85 3d		sta $3d				sta 	zsTemp+1
.9fc7	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fc9					_ASGetLength:
.9fc9	c8		iny				iny
.9fca	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fcc	d0 fb		bne $9fc9			bne 	_ASGetLength
.9fce	98		tya				tya 								; is this length <= current length
.9fcf	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fd1	90 20		bcc $9ff3			bcc 	_ASCopyString
.9fd3	f0 1e		beq $9ff3			beq 	_ASCopyString
.9fd5	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fd7	a0 01		ldy #$01			ldy 	#1
.9fd9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fdb					_ASNewStringRequired:
.9fdb	e8		inx				inx 								; concrete the new string.
.9fdc	20 4d b8	jsr $b84d			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fdf	ca		dex				dex
.9fe0	18		clc				clc
.9fe1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fe4	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fe6	92 36		sta ($36)			sta 	(zTemp0)
.9fe8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9feb	69 00		adc #$00			adc 	#0
.9fed	a0 01		ldy #$01			ldy 	#1
.9fef	91 36		sta ($36),y			sta 	(zTemp0),y
.9ff1	80 0d		bra $a000			bra 	_ASExit
.9ff3					_ASCopyString:
.9ff3	a0 00		ldy #$00			ldy 	#0
.9ff5					_ASCopyLoop:
.9ff5	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ff7	c8		iny				iny
.9ff8	c8		iny				iny
.9ff9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ffb	88		dey				dey
.9ffc	c9 00		cmp #$00			cmp 	#0
.9ffe	d0 f5		bne $9ff5			bne 	_ASCopyLoop
.a000					_ASExit:
.a000	7a		ply				ply
.a001	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.a002					DereferenceTopTwo:
.a002	e8		inx				inx
.a003	20 07 a0	jsr $a007			jsr 	Dereference 				; deref x+1
.a006	ca		dex				dex  								; falls through to deref x
.a007					Dereference:
.a007	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.a00a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.a00c	f0 57		beq $a065			beq 	_DRFExit 					; not a reference
.a00e	5a		phy				phy
.a00f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.a012	85 36		sta $36				sta 	zTemp0
.a014	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a017	85 37		sta $37				sta 	zTemp0+1
.a019	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a01c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a01e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a021	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a024	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a026	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a028	f0 0f		beq $a039			beq 	_DRFDereferenceTwo
.a02a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a02c	f0 39		beq $a067			beq 	_DRFFull
.a02e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a031	29 03		and #$03			and 	#3
.a033	f0 32		beq $a067			beq 	_DRFFull 					; the whole word
.a035	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a037	f0 07		beq $a040			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a039					_DRFDereferenceTwo:
.a039	a0 01		ldy #$01			ldy 	#1
.a03b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a03d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a040					_DRFClear23:
.a040	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a043	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a046	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a049	29 18		and #$18			and 	#NSBTypeMask
.a04b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a04e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a050	d0 12		bne $a064			bne 	_DRFNotString
.a052	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a055	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a058	d0 0a		bne $a064			bne 	_DRFNotString
.a05a	a9 66		lda #$66			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a05c	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a05f	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a061	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a064					_DRFNotString
.a064	7a		ply				ply 								; restore Y and exit
.a065					_DRFExit:
.a065	60		rts				rts
.a066					_DRFNullString:
>a066	00						.byte 	0
.a067					_DRFFull:
.a067	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a069	b1 36		lda ($36),y			lda 	(zTemp0),y
.a06b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a06e	c8		iny				iny
.a06f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a071	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a074	c8		iny				iny
.a075	b1 36		lda ($36),y			lda 	(zTemp0),y
.a077	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a07a	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a07d	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a080	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a082	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a085	f0 06		beq $a08d			beq 	_DRFNoExponent
.a087	c8		iny				iny 								; if not, read the exponent as well.
.a088	b1 36		lda ($36),y			lda 	(zTemp0),y
.a08a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a08d					_DRFNoExponent:
.a08d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a090	10 0d		bpl $a09f			bpl 	_DRFExit2 					; if not, then exit.
.a092	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a094	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a097	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a09a	09 80		ora #$80			ora 	#NSBIsNegative
.a09c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a09f					_DRFExit2:
.a09f	7a		ply				ply
.a0a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a0a1					EncodeNumberStart:
.a0a1	38		sec				sec
.a0a2	80 01		bra $a0a5			bra 	EncodeNumberContinue+1
.a0a4					EncodeNumberContinue:
.a0a4	18		clc				clc
.a0a5					EncodeNumber:
.a0a5	08		php				php 								; save reset.
.a0a6	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a0a8	f0 12		beq $a0bc			beq 	_ENIsOkay
.a0aa	c9 30		cmp #$30			cmp 	#"0"
.a0ac	90 04		bcc $a0b2			bcc 	_ENBadNumber
.a0ae	c9 3a		cmp #$3a			cmp 	#"9"+1
.a0b0	90 0a		bcc $a0bc			bcc 	_ENIsOkay
.a0b2					_ENBadNumber:
.a0b2	28		plp				plp 								; throw saved reset
.a0b3	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a0b6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0b8	f0 7e		beq $a138			beq 	_ENConstructFinal
.a0ba					_ENFail:
.a0ba	18		clc				clc 								; not allowed
.a0bb	60		rts				rts
.a0bc					_ENIsOkay:
.a0bc	28		plp				plp 								; are we restarting
.a0bd	90 15		bcc $a0d4			bcc 	_ENNoRestart
.a0bf					_ENStartEncode:
.a0bf	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0c1	f0 0c		beq $a0cf			beq 	_ENFirstDP
.a0c3	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0c5	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.a0c8	a9 01		lda #$01			lda 	#ESTA_Low
.a0ca					_ENExitChange:
.a0ca	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0cd	38		sec				sec
.a0ce	60		rts				rts
.a0cf					_ENFirstDP:
.a0cf	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; clear integer part
.a0d2	80 3f		bra $a113			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0d4					_ENNoRestart:
.a0d4	48		pha				pha 								; save on stack.
.a0d5	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0d8	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0da	f0 09		beq $a0e5			beq  	_ESTALowState
.a0dc	c9 02		cmp #$02			cmp 	#ESTA_High
.a0de	f0 29		beq $a109			beq 	_ESTAHighState
.a0e0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0e2	f0 3b		beq $a11f			beq 	_ESTADecimalState
>a0e4	db						.byte 	$DB 						; causes a break in the emulator
.a0e5					_ESTALowState:
.a0e5	68		pla				pla 								; get value back
.a0e6	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0e8	f0 29		beq $a113			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0ea	29 0f		and #$0f			and 	#15 						; make digit
.a0ec	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0ef	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0f2	0a		asl a				asl 	a
.a0f3	0a		asl a				asl 	a
.a0f4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0f7	0a		asl a				asl 	a
.a0f8	6d 86 04	adc $0486			adc 	DigitTemp
.a0fb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0fe	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a100	90 05		bcc $a107			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a102	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a104	8d 85 04	sta $0485			sta 	EncodeState
.a107					_ESTANoSwitch:
.a107	38		sec				sec
.a108	60		rts				rts
.a109					_ESTAHighState:
.a109	68		pla				pla 								; get value back
.a10a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a10c	f0 05		beq $a113			beq 	_ESTASwitchFloat
.a10e	20 72 a1	jsr $a172			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a111	38		sec				sec
.a112	60		rts				rts
.a113					_ESTASwitchFloat:
.a113	9c 87 04	stz $0487			stz 	DecimalCount
.a116	e8		inx				inx 								; zero the decimal additive.
.a117	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.a11a	ca		dex				dex
.a11b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a11d	80 ab		bra $a0ca			bra 	_ENExitChange
.a11f					_ESTADecimalState:
.a11f	68		pla				pla 								; digit.
.a120	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a122	f0 96		beq $a0ba			beq 	_ENFail
.a124	e8		inx				inx 								; put digit into fractional part of X+1
.a125	20 72 a1	jsr $a172			jsr 	ESTAShiftDigitIntoMantissa
.a128	ca		dex				dex
.a129	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a12c	ad 87 04	lda $0487			lda 	DecimalCount
.a12f	c9 0b		cmp #$0b			cmp 	#11
.a131	f0 02		beq $a135			beq 	_ESTADSFail
.a133	38		sec				sec
.a134	60		rts				rts
.a135					_ESTADSFail:
.a135	4c 52 b5	jmp $b552			jmp 	RangeError
.a138					_ENConstructFinal:
.a138	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a13b	f0 33		beq $a170			beq 	_ENCFExit 					; no decimals
.a13d	5a		phy				phy
.a13e	0a		asl a				asl 	a 							; x 4 and CLC
.a13f	0a		asl a				asl 	a
.a140	6d 87 04	adc $0487			adc 	DecimalCount
.a143	a8		tay				tay
.a144	b9 11 b5	lda $b511,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a147	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a14a	b9 12 b5	lda $b512,y			lda 	DecimalScalarTable-5+1,y
.a14d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a150	b9 13 b5	lda $b513,y			lda 	DecimalScalarTable-5+2,y
.a153	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a156	b9 14 b5	lda $b514,y			lda 	DecimalScalarTable-5+3,y
.a159	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a15c	b9 15 b5	lda $b515,y			lda 	DecimalScalarTable-5+4,y
.a15f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a162	a9 08		lda #$08			lda 	#NSTFloat
.a164	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a167	7a		ply				ply
.a168	e8		inx				inx 								; multiply decimal const by decimal scalar
.a169	20 99 b2	jsr $b299			jsr 	FloatMultiply
.a16c	ca		dex				dex
.a16d	20 26 b1	jsr $b126			jsr 	FloatAdd 					; add to integer part.
.a170					_ENCFExit:
.a170	18		clc				clc 								; reject the digit.
.a171	60		rts				rts
.a172					ESTAShiftDigitIntoMantissa:
.a172	29 0f		and #$0f			and 	#15 						; save digit
.a174	48		pha				pha
.a175	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a178	48		pha				pha
.a179	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a17c	48		pha				pha
.a17d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a180	48		pha				pha
.a181	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a184	48		pha				pha
.a185	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 2
.a188	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 4
.a18b	18		clc				clc 								; pop mantissa and add
.a18c	68		pla				pla
.a18d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a190	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a193	68		pla				pla
.a194	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a197	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a19a	68		pla				pla
.a19b	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a19e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a1a1	68		pla				pla
.a1a2	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a1a5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a1a8	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 10
.a1ab	68		pla				pla 								; add digit
.a1ac	18		clc				clc
.a1ad	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a1b0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1b3	90 0d		bcc $a1c2			bcc 	_ESTASDExit
.a1b5	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a1b8	d0 08		bne $a1c2			bne 	_ESTASDExit
.a1ba	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1bd	d0 03		bne $a1c2			bne 	_ESTASDExit
.a1bf	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1c2					_ESTASDExit:
.a1c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1c3					EvaluateTerm:
.a1c3	b1 30		lda ($30),y			lda 	(codePtr),y
.a1c5	30 18		bmi $a1df			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1c7	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1c9	b0 6f		bcs $a23a			bcs 	_ETVariable
.a1cb	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1cd	90 6e		bcc $a23d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1cf	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1d1	b0 6a		bcs $a23d			bcs 	_ETPuncUnary
.a1d3	20 a1 a0	jsr $a0a1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1d6					_ETNumber:
.a1d6	c8		iny				iny 								; keep encoding until we have the numbers
.a1d7	b1 30		lda ($30),y			lda 	(codePtr),y
.a1d9	20 a4 a0	jsr $a0a4			jsr 	EncodeNumberContinue
.a1dc	b0 f8		bcs $a1d6			bcs 	_ETNumber 					; go back if accepted.
.a1de	60		rts				rts
.a1df					_ETCheckUnary:
.a1df	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1e1	f0 41		beq $a224			beq 	_ETString
.a1e3	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1e5	f0 12		beq $a1f9			beq 	_ETHexConstant
.a1e7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1e9	90 0b		bcc $a1f6			bcc 	_ETSyntaxError
.a1eb	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1ed	b0 07		bcs $a1f6			bcs 	_ETSyntaxError
.a1ef	da		phx				phx 								; push X on the stack
.a1f0	0a		asl a				asl 	a 							; put vector x 2 into X
.a1f1	aa		tax				tax
.a1f2	c8		iny				iny 								; consume unary function token
.a1f3	7c e6 96	jmp ($96e6,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1f6					_ETSyntaxError:
.a1f6	4c 4d b5	jmp $b54d			jmp 	SyntaxError
.a1f9					_ETHexConstant:
.a1f9	c8		iny				iny 								; skip #
.a1fa	c8		iny				iny 								; skip count
.a1fb	20 1c a7	jsr $a71c			jsr 	NSMSetZero 					; clear result
.a1fe					_ETHLoop:
.a1fe	b1 30		lda ($30),y			lda 	(codePtr),y
.a200	c8		iny				iny 								; and consume
.a201	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a203	f0 1e		beq $a223			beq 	_ETHExit
.a205	48		pha				pha 								; save on stack.
.a206	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 2
.a209	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 4
.a20c	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 8
.a20f	20 31 a7	jsr $a731			jsr 	NSMShiftLeft 				; x 16
.a212	68		pla				pla 								; ASCII
.a213	c9 41		cmp #$41			cmp 	#'A'
.a215	90 02		bcc $a219			bcc 	_ETHNotChar
.a217	e9 07		sbc #$07			sbc 	#7
.a219					_ETHNotChar:
.a219	29 0f		and #$0f			and 	#15 						; digit now
.a21b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a21e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a221	80 db		bra $a1fe			bra 	_ETHLoop 					; go round.
.a223					_ETHExit:
.a223	60		rts				rts
.a224					_ETString:
.a224	c8		iny				iny 								; look at length
.a225	b1 30		lda ($30),y			lda 	(codePtr),y
.a227	48		pha				pha
.a228	c8		iny				iny 								; first character
.a229	20 66 a7	jsr $a766			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a22c	68		pla				pla 								; restore count and save
.a22d	85 36		sta $36				sta 	zTemp0
.a22f	98		tya				tya 								; add length to Y to skip it.
.a230	18		clc				clc
.a231	65 36		adc $36				adc 	zTemp0
.a233	a8		tay				tay
.a234	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a236	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a239	60		rts				rts
.a23a					_ETVariable:
.a23a	4c 94 a2	jmp $a294			jmp 	VariableHandler
.a23d					_ETPuncUnary:
.a23d	c8		iny				iny 								; consume the unary character
.a23e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a240	f0 2d		beq $a26f			beq 	_ETUnaryNegate
.a242	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a244	f0 39		beq $a27f			beq 	_ETDereference
.a246	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a248	f0 43		beq $a28d			beq 	_ETParenthesis
.a24a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a24c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a24e	f0 06		beq $a256			beq 	_ETIndirection
.a250	e6 36		inc $36				inc 	zTemp0
.a252	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a254	d0 a0		bne $a1f6			bne 	_ETSyntaxError
.a256					_ETIndirection:
.a256	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a258	1a		inc a				inc 	a
.a259	48		pha				pha
.a25a	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm				; evaluate the term
.a25d	20 07 a0	jsr $a007			jsr 	Dereference 				; dereference it.
.a260	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a263	d0 07		bne $a26c			bne 	_ETTypeMismatch
.a265	68		pla				pla 								; indirection 1-2
.a266	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a268	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a26b	60		rts				rts
.a26c					_ETTypeMismatch:
.a26c	4c 57 b5	jmp $b557			jmp 	TypeError
.a26f					_ETUnaryNegate:
.a26f	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm				; evaluate the term
.a272	20 07 a0	jsr $a007			jsr 	Dereference 				; dereference it.
.a275	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a278	29 10		and #$10			and 	#NSTString
.a27a	d0 f0		bne $a26c			bne 	_ETTypeMismatch
.a27c	4c c8 a6	jmp $a6c8			jmp 	NSMNegate  					; just toggles the sign bit.
.a27f					_ETDereference:
.a27f	20 c3 a1	jsr $a1c3			jsr 	EvaluateTerm				; evaluate the term
.a282	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a285	29 20		and #$20			and 	#NSBIsReference
.a287	f0 e3		beq $a26c			beq 	_ETTypeMismatch
.a289	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a28c	60		rts				rts
.a28d					_ETParenthesis:
.a28d	20 f2 9e	jsr $9ef2			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a290	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; check for )
.a293	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a294					VariableHandler:
.a294	b1 30		lda ($30),y			lda 	(codePtr),y
.a296	18		clc				clc
.a297	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a299	85 37		sta $37				sta 	zTemp0+1
.a29b	c8		iny				iny
.a29c	b1 30		lda ($30),y			lda 	(codePtr),y
.a29e	85 36		sta $36				sta 	zTemp0
.a2a0	c8		iny				iny
.a2a1	18		clc				clc									; copy variable address+3 to mantissa
.a2a2	69 03		adc #$03			adc 	#3
.a2a4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2a7	a5 37		lda $37				lda 	zTemp0+1
.a2a9	69 00		adc #$00			adc 	#0
.a2ab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2ae	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a2b1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a2b4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a2b7	5a		phy				phy
.a2b8	a0 02		ldy #$02			ldy 	#2 							; read type
.a2ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2bc	7a		ply				ply
.a2bd	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2bf	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2c1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2c4	29 04		and #$04			and 	#NSBIsArray
.a2c6	d0 01		bne $a2c9			bne 	_VHArray
.a2c8	60		rts				rts
.a2c9					_VHArray:
.a2c9	e8		inx				inx
.a2ca	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2cd	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2cf	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2d2	b1 30		lda ($30),y			lda 	(codePtr),y
.a2d4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2d6	d0 06		bne $a2de			bne 	_VHNoSecondIndex
.a2d8	c8		iny				iny 								; skip the comma
.a2d9	e8		inx				inx
.a2da	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2dd	ca		dex				dex
.a2de					_VHNoSecondIndex:
.a2de	ca		dex				dex 								; set X back.
.a2df	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; and check the right bracket.
.a2e2	5a		phy				phy 								; save position
.a2e3	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2e7	f0 6b		beq $a354			beq 	_VHBadIndex
.a2e9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2ec	85 3e		sta $3e				sta 	zaTemp
.a2ee	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2f1	85 3f		sta $3f				sta 	zaTemp+1
.a2f3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2f5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2f7	f0 02		beq $a2fb			beq 	_VHHas2Mask
.a2f9	a9 ff		lda #$ff			lda 	#$FF
.a2fb					_VHHas2Mask:
.a2fb	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2fe	f0 54		beq $a354			beq 	_VHBadIndex
.a300	0a		asl a				asl 	a 							; carry will be set if a second index
.a301	90 09		bcc $a30c			bcc 	_VHCheckFirstIndex
.a303	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a305	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a307	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a30a	90 48		bcc $a354			bcc 	_VHBadIndex
.a30c					_VHCheckFirstIndex:
.a30c	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a30e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a310	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a313	90 3f		bcc $a354			bcc 	_VHBadIndex
.a315	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a317	64 37		stz $37				stz 	zTemp0+1
.a319	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a31c	30 0f		bmi $a32d			bmi 	_VHNoMultiply
.a31e	da		phx				phx
.a31f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a322	48		pha				pha
.a323	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a325	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a327	1a		inc a				inc 	a 							; add 1 for zero base
.a328	fa		plx				plx
.a329	20 e9 b3	jsr $b3e9			jsr 	Multiply8x8 				; calculate -> Z0
.a32c	fa		plx				plx
.a32d					_VHNoMultiply:
.a32d	18		clc				clc
.a32e	a5 36		lda $36				lda 	zTemp0
.a330	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a333	85 36		sta $36				sta 	zTemp0
.a335	a5 37		lda $37				lda 	zTemp0+1
.a337	69 00		adc #$00			adc 	#0
.a339	85 37		sta $37				sta 	zTemp0+1
.a33b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a33e	20 e0 8d	jsr $8de0			jsr 	ScaleByBaseType
.a341	18		clc				clc
.a342	b2 3e		lda ($3e)			lda 	(zaTemp)
.a344	65 36		adc $36				adc 	zTemp0
.a346	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a349	a0 01		ldy #$01			ldy 	#1
.a34b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a34d	65 37		adc $37				adc 	zTemp0+1
.a34f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a352	7a		ply				ply 								; restore position
.a353	60		rts				rts
.a354					_VHBadIndex:
.a354	a9 17		lda #$17		lda	#23
.a356	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b31f					AbsUnary:
.b31f	fa		plx				plx 								; restore stack pos
.b320	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; get a float or int
.b323	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b326	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b329	29 7f		and #$7f			and 	#$7F
.b32b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b32e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a359					AllocUnary:
.a359	fa		plx				plx 								; restore stack pos
.a35a	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger		; get bytes required.
.a35d	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.a360	da		phx				phx 								; save X/Y
.a361	5a		phy				phy
.a362	8a		txa				txa 								; copy X into Y
.a363	a8		tay				tay
.a364	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a367	aa		tax				tax
.a368	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a36b	20 78 a3	jsr $a378			jsr 	AllocateXABytes 			; allocate memory
.a36e	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a371	8a		txa				txa
.a372	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a375	7a		ply				ply
.a376	fa		plx				plx
.a377	60		rts				rts
.a378					AllocateXABytes:
.a378	5a		phy				phy
.a379	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a37c	84 36		sty $36				sty 	zTemp0
.a37e	5a		phy				phy
.a37f	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a382	84 37		sty $37				sty 	zTemp0+1
.a384	5a		phy				phy
.a385	18		clc				clc 								; add to low memory pointer
.a386	6d 8c 04	adc $048c			adc 	lowMemPtr
.a389	8d 8c 04	sta $048c			sta 	lowMemPtr
.a38c	8a		txa				txa
.a38d	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a390	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a393	b0 2f		bcs $a3c4			bcs 	CISSMemory
.a395	20 b6 a3	jsr $a3b6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a398					_ClearMemory:
.a398	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a39b	c5 36		cmp $36				cmp 	zTemp0
.a39d	d0 07		bne $a3a6			bne 	_CMClearNext
.a39f	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a3a2	c5 37		cmp $37				cmp 	zTemp0+1
.a3a4	f0 0c		beq $a3b2			beq 	_CMExit
.a3a6					_CMClearNext:
.a3a6	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a3a8	92 36		sta ($36)			sta 	(zTemp0)
.a3aa	e6 36		inc $36				inc 	zTemp0
.a3ac	d0 ea		bne $a398			bne 	_ClearMemory
.a3ae	e6 37		inc $37				inc		zTemp0+1
.a3b0	80 e6		bra $a398			bra 	_ClearMemory
.a3b2					_CMExit:
.a3b2	fa		plx				plx
.a3b3	68		pla				pla
.a3b4	7a		ply				ply
.a3b5	60		rts				rts
.a3b6					CheckIdentifierStringSpace:
.a3b6	48		pha				pha
.a3b7	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a3ba	18		clc				clc
.a3bb	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3bd	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3c0	b0 02		bcs $a3c4			bcs 	CISSMemory
.a3c2	68		pla				pla
.a3c3	60		rts				rts
.a3c4					CISSMemory:
.a3c4	a9 06		lda #$06		lda	#6
.a3c6	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b32f					AscUnary:
.b32f	fa		plx				plx 								; restore stack pos
.b330	20 67 a6	jsr $a667			jsr 	EvaluateString 				; get a string
.b333	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b335	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.b338	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b33b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b33c					FracUnary:
.b33c	fa		plx				plx 								; restore stack pos
.b33d	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; get a float or int
.b340	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b343	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b346	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b348	f0 04		beq $b34e			beq 	_IUZero
.b34a	20 0c b2	jsr $b20c			jsr 	FloatFractionalPart
.b34d	60		rts				rts
.b34e					_IUZero:
.b34e	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.b351	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b352					IntUnary:
.b352	fa		plx				plx 								; restore stack pos
.b353	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; get a float or int
.b356	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b359	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b35c	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b35e	f0 03		beq $b363			beq 	_IUExit
.b360	20 6f b2	jsr $b26f			jsr 	FloatIntegerPart
.b363					_IUExit:
.b363	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b364					LenUnary:
.b364	fa		plx				plx 								; restore stack pos
.b365	20 67 a6	jsr $a667			jsr 	EvaluateString 				; get a string
.b368	5a		phy				phy
.b369	a0 00		ldy #$00			ldy 	#0 							; find length
.b36b					_LenFind:
.b36b	b1 36		lda ($36),y			lda 	(zTemp0),y
.b36d	f0 06		beq $b375			beq 	_LenExit
.b36f	c8		iny				iny
.b370	d0 f9		bne $b36b			bne 	_LenFind
.b372	4c 52 b5	jmp $b552			jmp 	RangeError 					; string > 255
.b375					_LenExit:
.b375	98		tya				tya
.b376	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.b379	7a		ply				ply
.b37a	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b37d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3c9					Unary_Min:
.a3c9	a9 01		lda #$01			lda 	#1
.a3cb	80 02		bra $a3cf			bra 	UnaryMinMaxMain
.a3cd					Unary_Max:
.a3cd	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3cf					UnaryMinMaxMain:
.a3cf	fa		plx				plx 								; get index on number stack
.a3d0	48		pha				pha 								; save comparator
.a3d1	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; get the first value.
.a3d4					_UMMMLoop:
.a3d4	b1 30		lda ($30),y			lda 	(codePtr),y
.a3d6	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3d8	f0 22		beq $a3fc			beq 	_UMMMDone
.a3da	20 67 af	jsr $af67			jsr 	CheckComma 					; must be a comma
.a3dd	e8		inx				inx
.a3de	20 53 a6	jsr $a653			jsr 	EvaluateValue
.a3e1	ca		dex				dex
.a3e2	20 f3 a6	jsr $a6f3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3e5	e8		inx				inx
.a3e6	20 f3 a6	jsr $a6f3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3e9	e8		inx				inx
.a3ea	20 99 9b	jsr $9b99			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3ed	ca		dex				dex
.a3ee	ca		dex				dex
.a3ef	85 36		sta $36				sta 	zTemp0 						; save required result
.a3f1	68		pla				pla 								; get and save comparator
.a3f2	48		pha				pha
.a3f3	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3f5	d0 dd		bne $a3d4			bne 	_UMMMLoop
.a3f7	20 ff a3	jsr $a3ff			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3fa	80 d8		bra $a3d4			bra 	_UMMMLoop
.a3fc					_UMMMDone:
.a3fc	68		pla				pla 								; throw the comparator
.a3fd	c8		iny				iny 								; skip )
.a3fe	60		rts				rts
.a3ff					ExpCopyAboveDown:
.a3ff	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a402	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a405	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a408	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a40b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a40e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a411	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a414	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a417	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a41a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a41d	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a420	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a423	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a424					Unary_Not:
.a424	fa		plx				plx
.a425	20 7f a6	jsr $a67f			jsr 	EvaluateInteger 			; get integer
.a428	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.a42b	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; zero mantissa ?
.a42e	f0 04		beq $a434			beq 	_NotZero
.a430	20 1c a7	jsr $a71c			jsr 	NSMSetZero
.a433	60		rts				rts
.a434					_NotZero:
.a434	4c 4e 9b	jmp $9b4e			jmp 	ReturnTrue
.a437					_UNBad:
.a437	4c 5c b5	jmp $b55c			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a43a					Unary_Random:
.a43a	fa		plx				plx
.a43b	20 b9 a4	jsr $a4b9			jsr 	Random32Bit 				; get a random number
.a43e	20 9e a4	jsr $a49e			jsr 	URCopyToMantissa  			; put in mantissa
.a441	b1 30		lda ($30),y			lda 	(codePtr),y
.a443	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a445	f0 08		beq $a44f			beq 	_URNoModulus
.a447	e8		inx				inx
.a448	20 94 a6	jsr $a694			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a44b	ca		dex				dex
.a44c	20 e3 af	jsr $afe3			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a44f					_URNoModulus:
.a44f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a452	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a455	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.a458	60		rts				rts
.a459					Unary_Rnd:
.a459	fa		plx				plx
.a45a	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; number to use.
.a45d	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; closing bracket
.a460	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a463	f0 2b		beq $a490			beq 	_URCopySeed
.a465	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a468	10 23		bpl $a48d			bpl 	_URDontSeed
.a46a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a46d	49 17		eor #$17			eor 	#$17
.a46f	8d 88 04	sta $0488			sta 	RandomSeed+0
.a472	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a475	49 a5		eor #$a5			eor 	#$A5
.a477	8d 89 04	sta $0489			sta 	RandomSeed+1
.a47a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a47d	49 c2		eor #$c2			eor 	#$C2
.a47f	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a482	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a485	49 9d		eor #$9d			eor 	#$9D
.a487	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a48a	20 b9 a4	jsr $a4b9			jsr 	Random32Bit
.a48d					_URDontSeed:
.a48d	20 b9 a4	jsr $a4b9			jsr 	Random32Bit 				; generate a number.
.a490					_URCopySeed:
.a490	20 9e a4	jsr $a49e			jsr 	URCopyToMantissa 			; copy into mantissa
.a493	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a495	8d 28 04	sta $0428			sta 	NSExponent
.a498	a9 08		lda #$08			lda 	#NSTFloat
.a49a	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a49d	60		rts				rts
.a49e					URCopyToMantissa:
.a49e	ad 88 04	lda $0488			lda 	RandomSeed+0
.a4a1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a4a4	ad 89 04	lda $0489			lda 	RandomSeed+1
.a4a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4aa	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a4ad	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4b0	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a4b3	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a4b5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4b8	60		rts				rts
.a4b9					Random32Bit:
.a4b9	5a		phy				phy
.a4ba	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4bc	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4bf	d0 03		bne $a4c4			bne 	_Random1
.a4c1	a8		tay				tay 								; if so do it 256 times
.a4c2	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4c4					_Random1:
.a4c4	0a		asl a				asl 	a 							; LSFR RNG
.a4c5	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4c8	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4cb	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4ce	90 02		bcc $a4d2			bcc 	_Random2
.a4d0	49 c5		eor #$c5			eor 	#$C5
.a4d2					_Random2:
.a4d2	88		dey				dey
.a4d3	d0 ef		bne $a4c4			bne 	_Random1
.a4d5	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4d8	7a		ply				ply
.a4d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b37e					SgnUnary:
.b37e	fa		plx				plx 								; restore stack pos
.b37f	20 5c a6	jsr $a65c			jsr 	EvaluateNumber 				; get a float or int
.b382	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.b385	20 4c a7	jsr $a74c			jsr 	NSMIsZero 					; if zero
.b388	f0 10		beq $b39a			beq 	_SGZero  					; return Int Zero
.b38a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b38d	48		pha				pha
.b38e	a9 01		lda #$01			lda 	#1 							; set to 1
.b390	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.b393	68		pla				pla
.b394	29 80		and #$80			and		#$80 						; copy the sign byte out
.b396	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b399	60		rts				rts
.b39a	20 1c a7	jsr $a71c	_SGZero:jsr 	NSMSetZero
.b39d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b39e					ValUnary:
.b39e	fa		plx				plx 								; restore stack pos
.b39f	20 b4 b3	jsr $b3b4			jsr 	ValMainCode 				; do the main val() code
.b3a2	b0 01		bcs $b3a5			bcs 	_VUError 					; couldn't convert
.b3a4	60		rts				rts
.b3a5					_VUError:
.b3a5	4c 57 b5	jmp $b557			jmp 	TypeError
.b3a8					IsValUnary:
.b3a8	fa		plx				plx 								; restore stack pos
.b3a9	20 b4 b3	jsr $b3b4			jsr 	ValMainCode 				; do the main val() code
.b3ac	b0 03		bcs $b3b1			bcs 	_VUBad
.b3ae	4c 4e 9b	jmp $9b4e			jmp 	ReturnTrue
.b3b1					_VUBad:
.b3b1	4c 5a 9b	jmp $9b5a			jmp 	ReturnFalse
.b3b4					ValMainCode:
.b3b4	20 67 a6	jsr $a667			jsr 	EvaluateString 				; get a string
.b3b7	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; check right bracket present
.b3ba	5a		phy				phy
.b3bb	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3bd	f0 17		beq $b3d6			beq 	_VMCFail2
.b3bf	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3c1	48		pha				pha 								; save first character
.b3c2	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3c4	d0 01		bne $b3c7			bne 	_VMCStart
.b3c6	c8		iny				iny 								; skip over -
.b3c7					_VMCStart:
.b3c7	38		sec				sec 								; initialise first time round.
.b3c8					_VMCNext:
.b3c8	c8		iny				iny 								; pre-increment
.b3c9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3cb	f0 0c		beq $b3d9			beq 	_VMCSuccess 				; successful.
.b3cd	20 a5 a0	jsr $a0a5			jsr 	EncodeNumber 				; send it to the number-builder
.b3d0	90 03		bcc $b3d5			bcc 	_VMCFail 					; if failed, give up.
.b3d2	18		clc				clc 								; next time round, countinue
.b3d3	80 f3		bra $b3c8			bra 	_VMCNext
.b3d5					_VMCFail:
.b3d5	68		pla				pla
.b3d6					_VMCFail2:
.b3d6	7a		ply				ply
.b3d7	38		sec				sec
.b3d8	60		rts				rts
.b3d9					_VMCSuccess:
.b3d9	a9 00		lda #$00			lda 	#0 							; construct final
.b3db	20 a5 a0	jsr $a0a5			jsr 	EncodeNumber
.b3de	68		pla				pla
.b3df	c9 2d		cmp #$2d			cmp 	#"-"
.b3e1	d0 03		bne $b3e6			bne 	_VMCNotNegative
.b3e3	20 c8 a6	jsr $a6c8			jsr		NSMNegate
.b3e6					_VMCNotNegative:
.b3e6	7a		ply				ply
.b3e7	18		clc				clc
.b3e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4da					ChrUnary:
.a4da	fa		plx				plx 								; restore stack pos
.a4db	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger			; get value
.a4de	48		pha				pha
.a4df	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.a4e2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4e4	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate
.a4e7	68		pla				pla 								; write number to it
.a4e8	20 0c b9	jsr $b90c			jsr 	StringTempWrite
.a4eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4ec					SpcUnary:
.a4ec	fa		plx				plx 								; restore stack pos
.a4ed	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger			; get value
.a4f0	5a		phy				phy
.a4f1	48		pha				pha 								; save count
.a4f2	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate
.a4f5	7a		ply				ply 								; to do count in Y
.a4f6					_SpcLoop:
.a4f6	c0 00		cpy #$00			cpy 	#0
.a4f8	f0 08		beq $a502			beq 	_SpcExit
.a4fa	a9 20		lda #$20			lda 	#32
.a4fc	20 0c b9	jsr $b90c			jsr 	StringTempWrite
.a4ff	88		dey				dey
.a500	80 f4		bra $a4f6			bra 	_SPCLoop
.a502					_SpcExit:
.a502	7a		ply				ply
.a503	20 5f af	jsr $af5f			jsr 	CheckRightBracket
.a506	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a507					Unary_Str:
.a507	fa		plx				plx
.a508	20 5c a6	jsr $a65c			jsr 	EvaluateNumber  			; get number
.a50b	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; closing bracket
.a50e	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a510	20 29 a5	jsr $a529			jsr 	ConvertNumberToString 		; do the conversion.
.a513	a9 21		lda #$21			lda		#33 						; create buffer
.a515	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate 			; allocate memory
.a518	da		phx				phx
.a519	a2 00		ldx #$00			ldx 	#0
.a51b					_USCopy:
.a51b	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a51e	20 0c b9	jsr $b90c			jsr 	StringTempWrite
.a521	e8		inx				inx
.a522	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a525	d0 f4		bne $a51b			bne 	_USCopy
.a527	fa		plx				plx
.a528	60		rts				rts
.a529					ConvertNumberToString:
.a529	5a		phy				phy 								; save code position
.a52a	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a52d	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a530	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a533	10 0a		bpl $a53f			bpl 	_CNTSNotNegative
.a535	29 7f		and #$7f			and 	#$7F 						; make +ve
.a537	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a53a	a9 2d		lda #$2d			lda 	#"-"
.a53c	20 a5 a5	jsr $a5a5			jsr 	WriteDecimalBuffer
.a53f					_CNTSNotNegative:
.a53f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a542	f0 15		beq $a559			beq 	_CNTSNotFloat
.a544	e8		inx				inx 								; round up
.a545	a9 01		lda #$01			lda 	#1
.a547	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.a54a	ca		dex				dex
.a54b	bd 28 04	lda $0428,x			lda		NSExponent,x
.a54e	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a551	a9 08		lda #$08			lda 	#NSTFloat
.a553	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a556	20 26 b1	jsr $b126			jsr 	FloatAdd
.a559					_CNTSNotFloat:
.a559	20 87 a5	jsr $a587			jsr 	MakePlusTwoString
.a55c	20 0c b2	jsr $b20c			jsr 	FloatFractionalPart 		; get the fractional part
.a55f	20 d0 b2	jsr $b2d0			jsr 	NSNormalise					; normalise , exit if zero
.a562	f0 21		beq $a585			beq 	_CNTSExit
.a564	a9 2e		lda #$2e			lda 	#"."
.a566	20 a5 a5	jsr $a5a5			jsr 	WriteDecimalBuffer 			; write decimal place
.a569					_CNTSDecimal:
.a569	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a56c	30 17		bmi $a585			bmi 	_CNTSExit
.a56e	e8		inx				inx 								; x 10.0
.a56f	a9 0a		lda #$0a			lda 	#10
.a571	20 1e a7	jsr $a71e			jsr 	NSMSetByte
.a574	a9 08		lda #$08			lda 	#NSTFloat
.a576	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a579	ca		dex				dex
.a57a	20 99 b2	jsr $b299			jsr 	FloatMultiply
.a57d	20 87 a5	jsr $a587			jsr 	MakePlusTwoString
.a580	20 0c b2	jsr $b20c			jsr 	FloatFractionalPart 		; get the fractional part
.a583	80 e4		bra $a569			bra 	_CNTSDecimal 				; keep going.
.a585					_CNTSExit:
.a585	7a		ply				ply
.a586	60		rts				rts
.a587					MakePlusTwoString:
.a587	da		phx				phx
.a588	20 f3 a6	jsr $a6f3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a58b	e8		inx				inx 								; access it
.a58c	e8		inx				inx
.a58d	20 6f b2	jsr $b26f			jsr 	FloatIntegerPart 			; make it an integer
.a590	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a592	20 d0 b0	jsr $b0d0			jsr 	ConvertInt32
.a595	a2 00		ldx #$00			ldx	 	#0
.a597					_MPTSCopy:
.a597	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a59a	20 a5 a5	jsr $a5a5			jsr 	WriteDecimalBuffer
.a59d	e8		inx				inx
.a59e	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a5a1	d0 f4		bne $a597			bne 	_MPTSCopy
.a5a3	fa		plx				plx
.a5a4	60		rts				rts
.a5a5					WriteDecimalBuffer:
.a5a5	da		phx				phx
.a5a6	ae 95 04	ldx $0495			ldx 	dbOffset
.a5a9	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a5ac	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a5af	ee 95 04	inc $0495			inc 	dbOffset
.a5b2	fa		plx				plx
.a5b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5b4					Unary_Left:
.a5b4	fa		plx				plx
.a5b5	18		clc				clc 								; only one parameter
.a5b6	20 2b a6	jsr $a62b			jsr 	SubstringInitial 			; set up.
.a5b9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5bc	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5bf	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5c2	80 2c		bra $a5f0			bra 	SubstringMain
.a5c4					Unary_Right:
.a5c4	fa		plx				plx
.a5c5	18		clc				clc 								; only one parameter
.a5c6	20 2b a6	jsr $a62b			jsr 	SubstringInitial 			; set up.
.a5c9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5cc	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5cf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5d2	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5d5	b0 02		bcs $a5d9			bcs 	_URNotUnderflow
.a5d7	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5d9					_URNotUnderFlow:
.a5d9	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5dc	80 12		bra $a5f0			bra 	SubStringMain
.a5de					Unary_Mid:
.a5de	fa		plx				plx
.a5df	38		sec				sec 								; two parameters
.a5e0	20 2b a6	jsr $a62b			jsr 	SubstringInitial 			; set up.
.a5e3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5e6	f0 05		beq $a5ed			beq 	_UMError
.a5e8	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5eb	80 03		bra $a5f0			bra 	SubStringMain
.a5ed					_UMError:
.a5ed	4c 5c b5	jmp $b55c			jmp 	ArgumentError
.a5f0					SubStringMain:
.a5f0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5f3	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5f6	b0 2d		bcs $a625			bcs 	_SSMNull 					; if so, return an empty string.
.a5f8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5fb	f0 28		beq $a625			beq 	_SSMNull 					; return empty string.
.a5fd	18		clc				clc 								; add the offset +1 to the address and
.a5fe	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a601	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a604	85 36		sta $36				sta 	zTemp0
.a606	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a609	69 00		adc #$00			adc 	#0
.a60b	85 37		sta $37				sta 	zTemp0+1
.a60d					_SSMNoCarry:
.a60d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a610	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate 			; allocate that many characters
.a613	5a		phy				phy 								; save Y
.a614	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a616					_SSMCopy:
.a616	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a618	f0 09		beq $a623			beq 	_SSMEString 				; no more to copy
.a61a	20 0c b9	jsr $b90c			jsr 	StringTempWrite 			; and write it out.
.a61d	c8		iny				iny
.a61e	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a621	d0 f3		bne $a616			bne 	_SSMCopy
.a623					_SSMEString:
.a623	7a		ply				ply
.a624					_SSMExit:
.a624	60		rts				rts
.a625					_SSMNull:
.a625	a9 00		lda #$00			lda 	#0
.a627	20 ce b8	jsr $b8ce			jsr 	StringTempAllocate
.a62a	60		rts				rts
.a62b					SubstringInitial:
.a62b	da		phx				phx 								; save initial stack position
.a62c	08		php				php 								; save carry on stack indicating 2 parameters
.a62d	20 67 a6	jsr $a667			jsr 	EvaluateString 				; get a string
.a630	5a		phy				phy 								; calculate length to exponent.
.a631	a0 ff		ldy #$ff			ldy 	#$FF
.a633					_SIFindLength:
.a633	c8		iny				iny
.a634	b1 36		lda ($36),y			lda 	(zTemp0),y
.a636	d0 fb		bne $a633			bne 	_SIFindLength
.a638	98		tya				tya
.a639	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a63c	7a		ply				ply
.a63d	e8		inx				inx
.a63e	20 67 af	jsr $af67			jsr 	CheckComma 					; comma next
.a641	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get next parameter
.a644	28		plp				plp 								; is it the last parameter ?
.a645	90 07		bcc $a64e			bcc 	_SSIExit 					; if so, exit.
.a647	e8		inx				inx
.a648	20 67 af	jsr $af67			jsr 	CheckComma 					; comma next
.a64b	20 b4 a6	jsr $a6b4			jsr 	Evaluate8BitInteger 		; get last parameter
.a64e					_SSIExit:
.a64e	fa		plx				plx
.a64f	20 5f af	jsr $af5f			jsr 	CheckRightBracket 			; check closing bracket
.a652	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a653					EvaluateValue:
.a653	48		pha				pha
.a654	20 f2 9e	jsr $9ef2			jsr		EvaluateExpression 			; expression
.a657	20 07 a0	jsr $a007			jsr 	Dereference					; derefernce it
.a65a	68		pla				pla
.a65b	60		rts				rts
.a65c					EvaluateNumber:
.a65c	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; get a value
.a65f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a662	29 10		and #$10			and 	#NSBIsString
.a664	d0 16		bne $a67c			bne 	HelperTypeError
.a666	60		rts				rts
.a667					EvaluateString:
.a667	20 53 a6	jsr $a653			jsr 	EvaluateValue 				; get a value
.a66a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a66d	29 10		and #$10			and 	#NSBIsString
.a66f	f0 0b		beq $a67c			beq 	HelperTypeError
.a671					CopyAddressToTemp0:
.a671	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a674	85 36		sta $36				sta 	zTemp0
.a676	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a679	85 37		sta $37				sta 	zTemp0+1
.a67b	60		rts				rts
.a67c					HelperTypeError:
.a67c	4c 57 b5	jmp $b557			jmp 	TypeError
.a67f					EvaluateInteger:
.a67f	20 5c a6	jsr $a65c			jsr 	EvaluateNumber
.a682	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a685	d0 0a		bne $a691			bne 	HelperValueError 			; if not, it's a float.
.a687	60		rts				rts
.a688					EvaluateUnsignedInteger:
.a688	20 7f a6	jsr $a67f			jsr 	EvaluateInteger 			; check integer is +ve
.a68b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a68e	30 01		bmi $a691			bmi 	HelperValueError
.a690	60		rts				rts
.a691					HelperValueError:
.a691	4c 5c b5	jmp $b55c			jmp 	ArgumentError
.a694					Evaluate16BitInteger:
.a694	20 88 a6	jsr $a688			jsr	 	EvaluateUnsignedInteger		; get integer
.a697	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a69a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a69d	d0 f2		bne $a691			bne 	HelperValueError
.a69f	60		rts				rts
.a6a0					Evaluate16BitIntegerSigned:
.a6a0	20 7f a6	jsr $a67f			jsr	 	EvaluateInteger				; get integer
.a6a3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6a6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6a9	d0 e6		bne $a691			bne 	HelperValueError
.a6ab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a6ae	10 03		bpl $a6b3			bpl 	_EISNotSigned
.a6b0	20 d1 a6	jsr $a6d1			jsr 	NSMNegateMantissa
.a6b3					_EISNotSigned:
.a6b3	60		rts				rts
.a6b4					Evaluate8BitInteger:
.a6b4	20 88 a6	jsr $a688			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6b7	d0 d8		bne $a691			bne 	HelperValueError
.a6b9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6bc	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6bf	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6c2	d0 cd		bne $a691			bne 	HelperValueError
.a6c4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3e9					Multiply8x8:
.b3e9	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3ea	85 36		sta $36			  	sta 	zTemp0
.b3ec	86 37		stx $37				stx 	zTemp0+1
.b3ee	a9 00		lda #$00			lda 	#0
.b3f0	a2 08		ldx #$08			ldx 	#8
.b3f2					_M88Loop:
.b3f2	90 03		bcc $b3f7			bcc 	_M88NoAdd
.b3f4	18		clc				clc
.b3f5	65 37		adc $37				adc 	zTemp0+1
.b3f7					_M88NoAdd:
.b3f7	6a		ror a				ror 	a
.b3f8	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3fa	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3fb	d0 f5		bne $b3f2			bne 	_M88Loop
.b3fd	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6c8					NSMNegate:
.a6c8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6cb	49 80		eor #$80			eor 	#NSBIsNegative
.a6cd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6d0	60		rts				rts
.a6d1					NSMNegateMantissa:
.a6d1	38		sec				sec
.a6d2	a9 00		lda #$00			lda 	#0
.a6d4	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6d7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6da	a9 00		lda #$00			lda 	#0
.a6dc	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6e2	a9 00		lda #$00			lda 	#0
.a6e4	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6e7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6ea	a9 00		lda #$00			lda 	#0
.a6ec	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6ef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6f2	60		rts				rts
.a6f3					NSMShiftUpTwo:
.a6f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6f6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6f9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6fc	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6ff	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a702	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a705	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a708	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a70b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a70e	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a711	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a714	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a717	60		rts				rts
.a718					NSMSetZeroMantissaOnly:
.a718	a9 00		lda #$00			lda 	#0
.a71a	80 08		bra $a724			bra 	NSMSetMantissa
.a71c					NSMSetZero:
.a71c	a9 00		lda #$00			lda 	#0
.a71e					NSMSetByte:
.a71e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a721	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a724					NSMSetMantissa:
.a724	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a727	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a72a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a72d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a730	60		rts				rts
.a731					NSMShiftLeft:
.a731	18		clc				clc
.a732					NSMRotateLeft:
.a732	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a735	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a738	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a73b	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a73e	60		rts				rts
.a73f					NSMShiftRight:
.a73f	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a742	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a745	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a748	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a74b	60		rts				rts
.a74c					NSMIsZero:
.a74c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a74f	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a752	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a755	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a758	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b400					Assemble_ora:
.b400	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b403	01					.byte $01
.b404					Assemble_and:
.b404	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b407	21					.byte $21
.b408					Assemble_eor:
.b408	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b40b	41					.byte $41
.b40c					Assemble_adc:
.b40c	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b40f	61					.byte $61
.b410					Assemble_sta:
.b410	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b413	81					.byte $81
.b414					Assemble_lda:
.b414	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b417	a1					.byte $a1
.b418					Assemble_cmp:
.b418	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b41b	c1					.byte $c1
.b41c					Assemble_sbc:
.b41c	20 d9 89	jsr $89d9		jsr	AssembleGroup1
>b41f	e1					.byte $e1
.b420					Assemble_asl:
.b420	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b423	02					.byte $02
>b424	75					.byte $75
.b425					Assemble_rol:
.b425	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b428	22					.byte $22
>b429	75					.byte $75
.b42a					Assemble_lsr:
.b42a	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b42d	42					.byte $42
>b42e	75					.byte $75
.b42f					Assemble_ror:
.b42f	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b432	62					.byte $62
>b433	75					.byte $75
.b434					Assemble_stx:
.b434	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b437	82					.byte $82
>b438	50					.byte $50
.b439					Assemble_ldx:
.b439	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b43c	a2					.byte $a2
>b43d	d0					.byte $d0
.b43e					Assemble_dec:
.b43e	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b441	c2					.byte $c2
>b442	55					.byte $55
.b443					Assemble_inc:
.b443	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b446	e2					.byte $e2
>b447	55					.byte $55
.b448					Assemble_stz:
.b448	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b44b	60					.byte $60
>b44c	44					.byte $44
.b44d					Assemble_bit:
.b44d	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b450	20					.byte $20
>b451	55					.byte $55
.b452					Assemble_sty:
.b452	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b455	80					.byte $80
>b456	54					.byte $54
.b457					Assemble_ldy:
.b457	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b45a	a0					.byte $a0
>b45b	d5					.byte $d5
.b45c					Assemble_cpy:
.b45c	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b45f	c0					.byte $c0
>b460	d4					.byte $d4
.b461					Assemble_cpx:
.b461	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b464	e0					.byte $e0
>b465	d0					.byte $d0
.b466					Assemble_tsb:
.b466	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b469	00					.byte $00
>b46a	50					.byte $50
.b46b					Assemble_trb:
.b46b	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b46e	10					.byte $10
>b46f	50					.byte $50
.b470					Assemble_jsr:
.b470	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b473	14					.byte $14
>b474	10					.byte $10
.b475					Assemble_jmp:
.b475	20 e0 89	jsr $89e0		jsr	AssembleGroup2
>b478	40					.byte $40
>b479	10					.byte $10
.b47a					Assemble_bpl:
.b47a	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b47d	10					.byte $10
.b47e					Assemble_bmi:
.b47e	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b481	30					.byte $30
.b482					Assemble_bvc:
.b482	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b485	50					.byte $50
.b486					Assemble_bvs:
.b486	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b489	70					.byte $70
.b48a					Assemble_bcc:
.b48a	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b48d	90					.byte $90
.b48e					Assemble_bcs:
.b48e	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b491	b0					.byte $b0
.b492					Assemble_bne:
.b492	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b495	d0					.byte $d0
.b496					Assemble_beq:
.b496	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b499	f0					.byte $f0
.b49a					Assemble_bra:
.b49a	20 31 8a	jsr $8a31		jsr	AssembleGroup3
>b49d	80					.byte $80
.b49e					Assemble_brk:
.b49e	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4a1	00					.byte $00
.b4a2					Assemble_php:
.b4a2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4a5	08					.byte $08
.b4a6					Assemble_clc:
.b4a6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4a9	18					.byte $18
.b4aa					Assemble_plp:
.b4aa	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4ad	28					.byte $28
.b4ae					Assemble_sec:
.b4ae	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4b1	38					.byte $38
.b4b2					Assemble_rti:
.b4b2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4b5	40					.byte $40
.b4b6					Assemble_pha:
.b4b6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4b9	48					.byte $48
.b4ba					Assemble_cli:
.b4ba	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4bd	58					.byte $58
.b4be					Assemble_phy:
.b4be	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4c1	5a					.byte $5a
.b4c2					Assemble_rts:
.b4c2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4c5	60					.byte $60
.b4c6					Assemble_pla:
.b4c6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4c9	68					.byte $68
.b4ca					Assemble_sei:
.b4ca	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4cd	78					.byte $78
.b4ce					Assemble_ply:
.b4ce	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4d1	7a					.byte $7a
.b4d2					Assemble_dey:
.b4d2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4d5	88					.byte $88
.b4d6					Assemble_txa:
.b4d6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4d9	8a					.byte $8a
.b4da					Assemble_tya:
.b4da	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4dd	98					.byte $98
.b4de					Assemble_txs:
.b4de	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4e1	9a					.byte $9a
.b4e2					Assemble_tay:
.b4e2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4e5	a8					.byte $a8
.b4e6					Assemble_tax:
.b4e6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4e9	aa					.byte $aa
.b4ea					Assemble_clv:
.b4ea	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4ed	b8					.byte $b8
.b4ee					Assemble_tsx:
.b4ee	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4f1	ba					.byte $ba
.b4f2					Assemble_iny:
.b4f2	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4f5	c8					.byte $c8
.b4f6					Assemble_dex:
.b4f6	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4f9	ca					.byte $ca
.b4fa					Assemble_cld:
.b4fa	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b4fd	d8					.byte $d8
.b4fe					Assemble_phx:
.b4fe	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b501	da					.byte $da
.b502					Assemble_stp:
.b502	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b505	db					.byte $db
.b506					Assemble_inx:
.b506	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b509	e8					.byte $e8
.b50a					Assemble_nop:
.b50a	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b50d	ea					.byte $ea
.b50e					Assemble_sed:
.b50e	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b511	f8					.byte $f8
.b512					Assemble_plx:
.b512	20 67 8a	jsr $8a67		jsr	AssembleGroup4
>b515	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b516					DecimalScalarTable:
>b516	66 66 66 66				.dword $66666666 ; 0.1
>b51a	de					.byte $de
>b51b	1f 85 eb 51				.dword $51eb851f ; 0.01
>b51f	db					.byte $db
>b520	4c 37 89 41				.dword $4189374c ; 0.001
>b524	d8					.byte $d8
>b525	ac 8b db 68				.dword $68db8bac ; 0.0001
>b529	d4					.byte $d4
>b52a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b52e	d1					.byte $d1
>b52f	83 de 1b 43				.dword $431bde83 ; 1e-06
>b533	ce					.byte $ce
>b534	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b538	ca					.byte $ca
>b539	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b53d	c7					.byte $c7
>b53e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b542	c4					.byte $c4
>b543	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b547	c0					.byte $c0
>b548	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b54c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b54d					SyntaxError:
.b54d	a9 02		lda #$02		lda	#2
.b54f	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b552					RangeError:
.b552	a9 04		lda #$04		lda	#4
.b554	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b557					TypeError:
.b557	a9 05		lda #$05		lda	#5
.b559	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b55c					ArgumentError:
.b55c	a9 07		lda #$07		lda	#7
.b55e	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b561					NotDoneError:
.b561	a9 0c		lda #$0c		lda	#12
.b563	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b566					ErrorText:
>b566	42 72 65 61 6b 00			.text	"Break",0
>b56c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b574	72 72 6f 72 00
>b579	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b581	20 62 79 20 7a 65 72 6f 00
>b58a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b592	61 6e 67 65 00
>b597	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b59f	6d 61 74 63 68 00
>b5a5	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b5ad	65 6d 6f 72 79 00
>b5b3	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b5bb	61 72 67 75 6d 65 6e 74 00
>b5c4	53 74 6f 70 00				.text	"Stop",0
>b5c9	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5d1	6f 6f 20 6c 6f 6e 67 00
>b5d9	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5e1	6e 20 66 61 69 6c 65 64 00
>b5ea	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5f2	61 74 61 00
>b5f6	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5fe	65 6e 74 65 64 00
>b604	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b60c	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b618	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b620	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b62d	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b635	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b642	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b64a	68 6f 75 74 20 57 68 69 6c 65 00
>b655	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b65d	68 6f 75 74 20 46 6f 72 00
>b666	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b66e	61 63 6b 20 66 75 6c 6c 00
>b677	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b67f	75 63 74 75 72 65 00
>b686	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b68e	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b69b	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b6a3	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b6b1	41 72 72 61 79 20 73 69			.text	"Array size",0
>b6b9	7a 65 00
>b6bc	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6c4	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6cc	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>b6d4	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>b6e4	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6f1					EXTInitialise:
.b6f1	64 01		stz $01				stz 	1 							; Access I/O
.b6f3	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6f6	9c 08 d0	stz $d008			stz 	$D008
.b6f9	9c 09 d0	stz $d009			stz 	$D009
.b6fc	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6fe	8d 58 d6	sta $d658			sta 	$D658
.b701	60		rts				rts
.b702					EXTClearScreen:
.b702	4c ea ff	jmp $ffea			jmp 	$FFEA
.b705					EXTPrintCharacter:
.b705	48		pha				pha
.b706	da		phx				phx
.b707	5a		phy				phy
.b708	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b70b	7a		ply				ply
.b70c	fa		plx				plx
.b70d	68		pla				pla
.b70e	60		rts				rts
.b70f					EXTInputSingleCharacter:
.b70f	da		phx				phx
.b710	5a		phy				phy
.b711					_EISCWait:
.b711	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b714	c9 00		cmp #$00			cmp 	#0
.b716	f0 f9		beq $b711			beq 	_EISCWait
.b718	7a		ply				ply
.b719	fa		plx				plx
.b71a	60		rts				rts
.b71b					EXTInputLine:
.b71b	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b71d					_ILLoop:
.b71d	da		phx				phx 								; read character in
.b71e	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b721	fa		plx				plx
.b722	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b724	f0 12		beq $b738			beq 	_ILBackspace
.b726	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b728	f0 15		beq $b73f			beq 	_ILExit
.b72a	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b72c	90 ef		bcc $b71d			bcc 	_ILLoop
.b72e	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b730	f0 eb		beq $b71d			beq 	_ILLoop
.b732	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b735	e8		inx				inx
.b736	80 e5		bra $b71d			bra 	_ILLoop
.b738					_ILBackspace:
.b738	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b73a	f0 e1		beq $b71d			beq 	_ILLoop
.b73c	ca		dex				dex 								; back one.
.b73d	80 de		bra $b71d			bra 	_ILLoop
.b73f					_ILExit:
.b73f	20 05 b7	jsr $b705			jsr 	EXTPrintCharacter
.b742	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b745	60		rts				rts
.b746					EXTBreakCheck:
.b746	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b749					EXTReadController:
.b749	da		phx				phx
.b74a	a2 00		ldx #$00			ldx 	#0
.b74c	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b74e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b751	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b753	f0 04		beq $b759			beq 	_NoSet1
.b755	8a		txa				txa
.b756	09 01		ora #$01			ora 	#1
.b758	aa		tax				tax
.b759					_NoSet1:
.b759	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b75b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b75e	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b760	f0 04		beq $b766			beq 	_NoSet1
.b762	8a		txa				txa
.b763	09 02		ora #$02			ora 	#2
.b765	aa		tax				tax
.b766					_NoSet1:
.b766	a9 06		lda #$06			lda 	#(($32) >> 3)
.b768	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b76b	29 04		and #$04			and 	#($01 << (($32) & 7))
.b76d	f0 04		beq $b773			beq 	_NoSet1
.b76f	8a		txa				txa
.b770	09 04		ora #$04			ora 	#4
.b772	aa		tax				tax
.b773					_NoSet1:
.b773	a9 04		lda #$04			lda 	#(($25) >> 3)
.b775	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b778	29 20		and #$20			and 	#($01 << (($25) & 7))
.b77a	f0 04		beq $b780			beq 	_NoSet1
.b77c	8a		txa				txa
.b77d	09 08		ora #$08			ora 	#8
.b77f	aa		tax				tax
.b780					_NoSet1:
.b780	a9 04		lda #$04			lda 	#(($26) >> 3)
.b782	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b785	29 40		and #$40			and 	#($01 << (($26) & 7))
.b787	f0 04		beq $b78d			beq 	_NoSet1
.b789	8a		txa				txa
.b78a	09 10		ora #$10			ora 	#16
.b78c	aa		tax				tax
.b78d					_NoSet1:
.b78d	8a		txa				txa
.b78e	fa		plx				plx
.b78f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b790					MemoryDeleteLine:
.b790	20 af b7	jsr $b7af			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b793	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b795	a8		tay				tay
.b796					_MDDLLoop:
.b796	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b798	92 30		sta ($30)			sta 	(codePtr)
.b79a	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b79c	c5 3a		cmp $3a				cmp 	zTemp2
.b79e	d0 07		bne $b7a7			bne 	_MDLDLNext
.b7a0	a5 31		lda $31				lda 	codePtr+1
.b7a2	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7a4	d0 01		bne $b7a7			bne 	_MDLDLNext
.b7a6					_MDDLExit:
.b7a6	60		rts				rts
.b7a7					_MDLDLNext:
.b7a7	e6 30		inc $30				inc 	codePtr						; next byte
.b7a9	d0 eb		bne $b796			bne 	_MDDLLoop
.b7ab	e6 31		inc $31				inc 	codePtr+1
.b7ad	80 e7		bra $b796			bra 	_MDDLLoop
.b7af					IMemoryFindEnd:
.b7af	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7b1	85 3a		sta $3a				sta 	0+zTemp2
.b7b3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7b5	85 3b		sta $3b				sta 	1+zTemp2
.b7b7					_MDLFELoop:
.b7b7	b2 3a		lda ($3a)			lda 	(zTemp2)
.b7b9	f0 0b		beq $b7c6			beq 	_MDLFEExit
.b7bb	18		clc				clc
.b7bc	65 3a		adc $3a				adc 	zTemp2
.b7be	85 3a		sta $3a				sta 	zTemp2
.b7c0	90 f5		bcc $b7b7			bcc 	_MDLFELoop
.b7c2	e6 3b		inc $3b				inc 	zTemp2+1
.b7c4	80 f1		bra $b7b7			bra 	_MDLFELoop
.b7c6					_MDLFEExit:
.b7c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7c7					MemoryInsertLine:
.b7c7	08		php				php
.b7c8	20 af b7	jsr $b7af			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7cb	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7cd	1a		inc a				inc 	a
.b7ce	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7d0	b0 36		bcs $b808			bcs 	_MDLIError
.b7d2	28		plp				plp
.b7d3	90 08		bcc $b7dd			bcc 	_MDLIFound
.b7d5	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7d7	85 30		sta $30				sta 	codePtr
.b7d9	a5 3b		lda $3b				lda 	zTemp2+1
.b7db	85 31		sta $31				sta 	codePtr+1
.b7dd					_MDLIFound:
.b7dd	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7e0	a8		tay				tay
.b7e1					_MDLIInsert:
.b7e1	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7e3	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7e5	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7e7	c5 3a		cmp $3a				cmp 	zTemp2
.b7e9	d0 06		bne $b7f1			bne 	_MDLINext
.b7eb	a5 31		lda $31				lda 	codePtr+1
.b7ed	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7ef	f0 0a		beq $b7fb			beq 	_MDLIHaveSpace
.b7f1					_MDLINext:
.b7f1	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7f3	d0 02		bne $b7f7			bne 	_MDLINoBorrow
.b7f5	c6 3b		dec $3b				dec 	zTemp2+1
.b7f7					_MDLINoBorrow:
.b7f7	c6 3a		dec $3a				dec 	zTemp2
.b7f9	80 e6		bra $b7e1			bra 	_MDLIInsert
.b7fb					_MDLIHaveSpace:
.b7fb	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7fe	88		dey				dey 								; from offset-1 to 0
.b7ff					_MDLICopy:
.b7ff	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b802	91 30		sta ($30),y			sta 	(codePtr),y
.b804	88		dey				dey
.b805	10 f8		bpl $b7ff			bpl 	_MDLICopy
.b807	60		rts				rts
.b808					_MDLIError:
.b808	a9 06		lda #$06		lda	#6
.b80a	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b80d					MDLAppendLine:
.b80d	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b80f	85 36		sta $36				sta 	zTemp0
.b811	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b813	85 38		sta $38				sta 	0+zTemp1
.b815	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b817	85 39		sta $39				sta 	1+zTemp1
.b819	b2 38		lda ($38)			lda 	(zTemp1)
.b81b	d0 0a		bne $b827			bne 	_MDLANoInitialise
.b81d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b81f	8d ea 06	sta $06ea			sta 	0+AppendPointer
.b822	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b824	8d eb 06	sta $06eb			sta 	1+AppendPointer
.b827					_MDLANoInitialise:
.b827	18		clc				clc
.b828	ad ea 06	lda $06ea			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b82b	85 38		sta $38				sta 	zTemp1
.b82d	72 36		adc ($36)			adc 	(zTemp0)
.b82f	8d ea 06	sta $06ea			sta 	AppendPointer
.b832	ad eb 06	lda $06eb			lda 	AppendPointer+1
.b835	85 39		sta $39				sta 	zTemp1+1
.b837	69 00		adc #$00			adc 	#0
.b839	8d eb 06	sta $06eb			sta 	AppendPointer+1
.b83c	a0 00		ldy #$00			ldy 	#0
.b83e					_MDLACopy:
.b83e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b840	91 38		sta ($38),y			sta 	(zTemp1),y
.b842	c8		iny				iny
.b843	98		tya				tya
.b844	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b846	d0 f6		bne $b83e			bne 	_MDLACopy
.b848	a9 00		lda #$00			lda 	#0 							; end of program.
.b84a	91 38		sta ($38),y			sta 	(zTemp1),y
.b84c	60		rts				rts
.06ea					AppendPointer:
>06ea							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a759					MemoryNew:
.a759	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a75b	85 30		sta $30				sta 	codePtr
.a75d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a75f	85 31		sta $31				sta 	codePtr+1
.a761	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a763	92 30		sta ($30)			sta 	(codePtr)
.a765	60		rts				rts
.a766					MemoryInline:
.a766	98		tya				tya 								; put address into stack,x
.a767	18		clc				clc
.a768	65 30		adc $30				adc 	codePtr
.a76a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a76d	a5 31		lda $31				lda 	codePtr+1
.a76f	69 00		adc #$00			adc 	#0
.a771	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a774	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a777	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a77a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a77b					MemorySearch:
.a77b	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a77d	86 37		stx $37				stx 	zTemp0+1
.a77f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a781	85 30		sta $30				sta 	codePtr
.a783	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a785	85 31		sta $31				sta 	codePtr+1
.a787					_MTAXLoop:
.a787	b2 30		lda ($30)			lda 	(codePtr)
.a789	18		clc				clc
.a78a	f0 21		beq $a7ad			beq 	_MTAXExit 					; reached end, exit with CC.
.a78c	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a78e	b1 30		lda ($30),y			lda 	(codePtr),y
.a790	38		sec				sec
.a791	e5 36		sbc $36				sbc 	zTemp0
.a793	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a795	c8		iny				iny 								; do the MSB
.a796	b1 30		lda ($30),y			lda 	(codePtr),y
.a798	e5 37		sbc $37				sbc 	zTemp0+1
.a79a	05 38		ora $38				ora 	zTemp1
.a79c	f0 0f		beq $a7ad			beq 	_MTAXExit	 				; found
.a79e	b0 0d		bcs $a7ad			bcs 	_MTAXExit 					; current < required exit
.a7a0	18		clc				clc
.a7a1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a7a3	65 30		adc $30				adc 	codePtr
.a7a5	85 30		sta $30				sta 	codePtr
.a7a7	90 02		bcc $a7ab			bcc 	_CREExit
.a7a9	e6 31		inc $31				inc 	codePtr+1
.a7ab					_CREExit:
.a7ab	80 da		bra $a787			bra 	_MTAXLoop
.a7ad					_MTAXExit:
.a7ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a7ae					StackPushByte:
.a7ae	48		pha				pha 								; save byte
.a7af	a5 34		lda $34				lda 	BasicStack
.a7b1	d0 09		bne $a7bc			bne 	_SPBNoBorrow
.a7b3	c6 35		dec $35				dec 	BasicStack+1
.a7b5	48		pha				pha
.a7b6	a5 35		lda $35				lda 	BasicStack+1
.a7b8	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7ba	90 06		bcc $a7c2			bcc 	_SPBMemory
.a7bc					_SPBNoBorrow:
.a7bc	c6 34		dec $34				dec 	BasicStack
.a7be	68		pla				pla 								; get back and write
.a7bf	92 34		sta ($34)			sta 	(BasicStack)
.a7c1	60		rts				rts
.a7c2					_SPBMemory:
.a7c2	a9 12		lda #$12		lda	#18
.a7c4	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.a7c7					StackPopByte:
.a7c7	b2 34		lda ($34)			lda 	(BasicStack)
.a7c9	e6 34		inc $34				inc 	BasicStack
.a7cb	d0 02		bne $a7cf			bne 	_SPBNoCarry
.a7cd	e6 35		inc $35				inc 	BasicStack+1
.a7cf					_SPBNoCarry:
.a7cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7d0					StackOpen:
.a7d0	48		pha				pha 								; save frame byte
.a7d1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7d3	0a		asl a				asl 	a 							; claim twice this for storage
.a7d4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7d6	38		sec				sec 								; so basically subtracting from
.a7d7	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7d9	85 34		sta $34				sta 	basicStack
.a7db	b0 08		bcs $a7e5			bcs 	_SONoBorrow
.a7dd	c6 35		dec $35				dec 	basicStack+1
.a7df	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7e1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7e3	90 04		bcc $a7e9			bcc 	_SOMemory
.a7e5					_SONoBorrow:
.a7e5	68		pla				pla 								; get marker back and write at TOS
.a7e6	92 34		sta ($34)			sta 	(basicStack)
.a7e8	60		rts				rts
.a7e9					_SOMemory:
.a7e9	a9 12		lda #$12		lda	#18
.a7eb	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.a7ee					StackClose:
.a7ee	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7f0	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7f2	0a		asl a				asl 	a 							; claim twice this.
.a7f3	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7f5	85 34		sta $34				sta 	basicStack
.a7f7	90 02		bcc $a7fb			bcc 	_SCExit
.a7f9	e6 35		inc $35				inc 	basicStack+1
.a7fb					_SCExit:
.a7fb	60		rts				rts
.a7fc					StackCheckFrame:
.a7fc	48		pha				pha
.a7fd					_StackRemoveLocals:
.a7fd	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7ff	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a801	b0 05		bcs $a808			bcs 	_SCNoLocal
.a803	20 06 af	jsr $af06			jsr 	LocalPopValue
.a806	80 f5		bra $a7fd			bra 	_StackRemoveLocals
.a808					_SCNoLocal:
.a808	68		pla				pla
.a809	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a80b	29 f0		and #$f0			and 	#$F0 						; check type bits
.a80d	d0 01		bne $a810			bne 	_SCFError 					; different, we have structures mixed up
.a80f	60		rts				rts
.a810					_SCFError:
.a810	8a		txa				txa 								; report error X
.a811	4c e1 9a	jmp $9ae1			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a814					STKSaveCodePosition:
.a814	5a		phy				phy
.a815	98		tya				tya 								; save Y
.a816	a0 05		ldy #$05			ldy 	#5
.a818	91 34		sta ($34),y			sta 	(basicStack),y
.a81a	88		dey				dey 								; save Code Pointer
.a81b					_STKSaveLoop:
.a81b	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a81e	91 34		sta ($34),y			sta 	(basicStack),y
.a820	88		dey				dey
.a821	d0 f8		bne $a81b			bne 	_STKSaveLoop
.a823	7a		ply				ply
.a824	60		rts				rts
.a825					STKLoadCodePosition:
.a825	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a827					_STKLoadLoop:
.a827	b1 34		lda ($34),y			lda 	(basicStack),y
.a829	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a82c	c8		iny				iny
.a82d	c0 05		cpy #$05			cpy 	#5
.a82f	d0 f6		bne $a827			bne 	_STKLoadLoop
.a831	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a833	a8		tay				tay
.a834	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a835					StackReset:
.a835	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a837	85 34		sta $34				sta 	0+basicStack
.a839	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a83b	85 35		sta $35				sta 	1+basicStack
.a83d	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a83f	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a841	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b84d					StringConcrete:
.b84d	5a		phy				phy 								; save position on stack
.b84e	20 b6 a3	jsr $a3b6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b851	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b854	85 38		sta $38				sta 	zTemp1
.b856	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b859	85 39		sta $39				sta 	zTemp1+1
.b85b	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b85d					_SALength:
.b85d	c8		iny				iny
.b85e	b1 38		lda ($38),y			lda 	(zTemp1),y
.b860	d0 fb		bne $b85d			bne 	_SALength
.b862	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b864	b0 3f		bcs $b8a5			bcs 	_SALengthError
.b866	98		tya				tya 				 				; length of the new string
.b867	18		clc				clc
.b868	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b86a	90 02		bcc $b86e			bcc 	_SAHaveLength
.b86c	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b86e					_SAHaveLength:
.b86e	48		pha				pha 								; save length.
.b86f	38		sec				sec
.b870	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b872	6d 8e 04	adc $048e			adc 	StringMemory
.b875	8d 8e 04	sta $048e			sta 	StringMemory
.b878	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b87a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b87d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b87f	6d 8f 04	adc $048f			adc 	StringMemory+1
.b882	8d 8f 04	sta $048f			sta 	StringMemory+1
.b885	85 3b		sta $3b				sta 	zTemp2+1
.b887	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b88a	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b88b	38		sec				sec
.b88c	e9 03		sbc #$03			sbc 	#3
.b88e	92 3a		sta ($3a)			sta 	(zTemp2)
.b890	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b892	a0 01		ldy #$01			ldy 	#1
.b894	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b896					_SACopyNewString:
.b896	a0 00		ldy #$00			ldy 	#0
.b898					_SACopyNSLoop:
.b898	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b89a	c8		iny				iny 								; write two on in string storage
.b89b	c8		iny				iny
.b89c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b89e	88		dey				dey 								; this makes it one one.
.b89f	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b8a1	d0 f5		bne $b898			bne 	_SACopyNSLoop
.b8a3	7a		ply				ply
.b8a4	60		rts				rts
.b8a5					_SALengthError:
.b8a5	a9 09		lda #$09		lda	#9
.b8a7	4c e1 9a	jmp $9ae1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b8aa					StringSystemInitialise:
.b8aa	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b8ac	8d 8e 04	sta $048e			sta 	0+StringMemory
.b8af	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b8b1	8d 8f 04	sta $048f			sta 	1+StringMemory
.b8b4	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8b7	60		rts				rts
.b8b8					StringSpaceInitialise:
.b8b8	20 b6 a3	jsr $a3b6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8bb	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8bd	8d 90 04	sta $0490			sta 	StringInitialised
.b8c0	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8c3	8d 91 04	sta $0491			sta 	StringTempPointer
.b8c6	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8c9	3a		dec a				dec 	a
.b8ca	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8cd	60		rts				rts
.b8ce					StringTempAllocate:
.b8ce	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8d0	b0 35		bcs $b907			bcs 	_STALength
.b8d2	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8d5	30 05		bmi $b8dc			bmi 	_STAAllocate
.b8d7	48		pha				pha 								; save value to subtract.
.b8d8	20 b8 b8	jsr $b8b8			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8db	68		pla				pla 								; restore it
.b8dc					_STAAllocate:
.b8dc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8de	18		clc				clc  								; deliberate allows one more
.b8df	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8e2	8d 91 04	sta $0491			sta 	StringTempPointer
.b8e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8e8	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8ea	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8ed	69 ff		adc #$ff			adc 	#$FF
.b8ef	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8f2	85 3d		sta $3d				sta 	zsTemp+1
.b8f4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8f7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8fa	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8fd	a9 10		lda #$10			lda 	#NSTString
.b8ff	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b902	a9 00		lda #$00			lda 	#0 							; clear the target string
.b904	92 3c		sta ($3c)			sta 	(zsTemp)
.b906	60		rts				rts
.b907					_STALength:
.b907	a9 09		lda #$09		lda	#9
.b909	4c e1 9a	jmp $9ae1		jmp	ErrorHandler
.b90c					StringTempWrite:
.b90c	48		pha				pha
.b90d	92 3c		sta ($3c)			sta 	(zsTemp)
.b90f	e6 3c		inc $3c				inc 	zsTemp
.b911	d0 02		bne $b915			bne 	_STWNoCarry
.b913	e6 3d		inc $3d				inc 	zsTemp+1
.b915					_STWNoCarry:
.b915	a9 00		lda #$00			lda 	#0
.b917	92 3c		sta ($3c)			sta 	(zsTemp)
.b919	68		pla				pla
.b91a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a842					BackloadProgram:
.a842	a2 ff		ldx #$ff			ldx 	#$FF
.a844	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a847	20 71 a8	jsr $a871			jsr 	BLReadByte
.a84a	30 1e		bmi $a86a			bmi 	_BPExit
.a84c					_BPCopy:
.a84c	e8		inx				inx  								; copy byte in
.a84d	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a850	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a853	20 71 a8	jsr $a871			jsr 	BLReadByte 					; read next byte
.a856	30 0a		bmi $a862			bmi 	_BPEndLine 					; -ve = EOL
.a858	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a85a	d0 02		bne $a85e			bne 	_BPNotTab
.a85c	a9 20		lda #$20			lda 	#' '
.a85e					_BPNotTab:
.a85e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a860	b0 ea		bcs $a84c			bcs 	_BPCopy
.a862					_BPEndLine:
.a862	20 57 ac	jsr $ac57			jsr 	TokeniseLine 				; tokenise the line.
.a865	20 21 8c	jsr $8c21			jsr 	EditProgramCode
.a868	80 d8		bra $a842			bra 	BackloadProgram
.a86a					_BPExit:
.a86a	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a86d	20 df 8c	jsr $8cdf			jsr 	ClearCommand 				; clear variables etc.
.a870	60		rts				rts
.a871					BLReadByte:
.a871					_BLLoad:
.a871	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a874	ee 72 a8	inc $a872			inc 	_BLLoad+1
.a877	d0 03		bne $a87c			bne 	_BLNoCarry
.a879	ee 73 a8	inc $a873			inc 	_BLLoad+2
.a87c					_BLNoCarry:
.a87c	c9 00		cmp #$00			cmp 	#0
.a87e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a87f					TokeniseSearchTable:
.a87f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a881	85 36		sta $36				sta 	zTemp0
.a883	a0 00		ldy #$00			ldy 	#0
.a885	a9 80		lda #$80			lda 	#$80 						; token #
.a887	85 38		sta $38				sta 	zTemp1
.a889					_TSTLoop:
.a889	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a88b	30 49		bmi $a8d6			bmi 	_TSTFail 					; -ve = end of table
.a88d	f0 2e		beq $a8bd			beq 	_TSTNext 					; zero, check next it's a dummy
.a88f	c8		iny				iny 								; get the hash
.a890	b1 36		lda ($36),y			lda 	(zTemp0),y
.a892	88		dey				dey
.a893	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a896	d0 25		bne $a8bd			bne 	_TSTNext
.a898	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a89b	38		sec				sec
.a89c	ed 80 04	sbc $0480			sbc 	identStart
.a89f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a8a1	d0 1a		bne $a8bd			bne 	_TSTNext
.a8a3	5a		phy				phy 								; save Y , we might fail
.a8a4	c8		iny				iny 								; point to text
.a8a5	c8		iny				iny
.a8a6	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a8a9					_TSTCompareName:
.a8a9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a8ac	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a8ae	d0 0c		bne $a8bc			bne 	_TSTNextPullY 				; fail, pullY and do next
.a8b0	e8		inx				inx
.a8b1	c8		iny				iny
.a8b2	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a8b5	d0 f2		bne $a8a9			bne 	_TSTCompareName
.a8b7	7a		ply				ply 								; throw Y
.a8b8	a5 38		lda $38				lda 	zTemp1 						; get token #
.a8ba	38		sec				sec 								; return with CS = passed.
.a8bb	60		rts				rts
.a8bc					_TSTNextPullY:
.a8bc	7a		ply				ply 								; restore current, fall through.
.a8bd					_TSTNext:
.a8bd	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8bf	98		tya				tya
.a8c0	18		clc				clc
.a8c1	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8c3	1a		inc a				inc 	a 							; +1
.a8c4	1a		inc a				inc 	a 							; +2
.a8c5	a8		tay				tay
.a8c6	10 c1		bpl $a889			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8c8	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8c9	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8cb	18		clc				clc  								; but have tables > 255 bytes
.a8cc	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8ce	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8d0	90 b7		bcc $a889			bcc 	_TSTLoop
.a8d2	e6 37		inc $37				inc 	zTemp0+1
.a8d4	80 b3		bra $a889			bra 	_TSTLoop
.a8d6					_TSTFail:
.a8d6	18		clc				clc
.a8d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8d8					KeywordSet0:
>a8d8	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8da	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8dc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8de	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8e4	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8ec	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8f2	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8f9	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a901	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a908	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a90f	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a915	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a91b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a923	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a92a	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a931	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a938	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a940	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a946	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a94c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a953	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a959	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a95f	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a967	28
>a968	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a970	28
>a971	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a977	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a97d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a983	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a98a	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a992	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a998	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a99e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a9a3	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a9a7	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a9ad	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a9b5	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9bc	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9c3	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9cb	43
>a9cc	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9d2	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9d8	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9df	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9e5	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9e9	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9ef	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9f7	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9fe	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>aa03	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>aa0a	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>aa12	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>aa18	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa1d	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa25	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa2b	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa31	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa36	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa3d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa43	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa49	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa50	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa55	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa5b	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa62	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa67	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa6b	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa73	45
>aa74	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa7c	45
>aa7d	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa83	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa8a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa90	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa96	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa9b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aaa3	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aaaa	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aab2	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aab8	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aabc	ff					.text	$FF
.aabd					KeywordSet1:
>aabd	00 65					.text	0,$65,""               ; $80 !0:EOF
>aabf	00 58					.text	0,$58,""               ; $81 !1:SH1
>aac1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aac3	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aacb	4c 45
>aacd	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aad5	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aadd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aae2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aae8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aaed	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aaf5	45
>aaf6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aafb	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ab03	53
>ab04	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ab0a	ff					.text	$FF
.ab0b					KeywordSet2:
>ab0b	00 65					.text	0,$65,""               ; $80 !0:EOF
>ab0d	00 58					.text	0,$58,""               ; $81 !1:SH1
>ab0f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ab11	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ab16	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ab1b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab20	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab25	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab2a	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab2f	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab34	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab39	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab3e	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab43	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab48	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab4d	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab52	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab57	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab5c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab61	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab66	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab6b	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab70	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab75	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab7a	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab7f	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab84	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab89	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab8e	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab93	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab98	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab9d	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aba2	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aba7	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>abac	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>abb1	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>abb6	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>abbb	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>abc0	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>abc5	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abca	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abcf	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abd4	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abd9	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abde	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abe3	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abe8	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abed	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abf2	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abf7	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abfc	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>ac01	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>ac06	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ac0b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ac10	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ac15	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ac1a	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac1f	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac24	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac29	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac2e	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac33	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac38	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac3d	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac42	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac47	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac4c	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac51	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac56	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac57					TokeniseLine:
.ac57	20 df ad	jsr $addf			jsr 	FixLineBufferCase 			; fix line case
.ac5a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac5c	8d a7 04	sta $04a7			sta 	tokenOffset
.ac5f	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac62	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac65	a2 ff		ldx #$ff			ldx 	#$FF
.ac67					_TKFindFirst:
.ac67	e8		inx				inx
.ac68	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac6b	f0 79		beq $ace6			beq 	_TKExit
.ac6d	c9 20		cmp #$20			cmp 	#' '
.ac6f	90 f6		bcc $ac67			bcc 	_TKFindFirst
.ac71	c9 30		cmp #$30			cmp 	#'0'
.ac73	90 07		bcc $ac7c			bcc 	_TKNoLineNumber
.ac75	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac77	b0 03		bcs $ac7c			bcs 	_TKNoLineNumber
.ac79	20 09 ae	jsr $ae09			jsr 	TokeniseExtractLineNumber
.ac7c					_TKNoLineNumber:
.ac7c					_TKTokeniseLoop:
.ac7c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac7f	f0 65		beq $ace6			beq 	_TKExit
.ac81	e8		inx				inx
.ac82	c9 20		cmp #$20			cmp 	#' '
.ac84	f0 f6		beq $ac7c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac86	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac87	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac89	f0 61		beq $acec			beq 	_TKTokeniseIdentifier
.ac8b	c9 41		cmp #$41			cmp 	#'A'
.ac8d	90 04		bcc $ac93			bcc 	_TKTokenisePunctuation
.ac8f	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac91	90 59		bcc $acec			bcc 	_TKTokeniseIdentifier
.ac93					_TKTokenisePunctuation:
.ac93	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac95	f0 27		beq $acbe			beq 	_TKString
.ac97	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac99	f0 28		beq $acc3			beq 	_TKHexConstant
.ac9b	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac9d	f0 29		beq $acc8			beq 	_TKCheckDouble
.ac9f	c9 3e		cmp #$3e			cmp 	#'>'
.aca1	f0 25		beq $acc8			beq 	_TKCheckDouble
.aca3					_TKStandardPunctuation:
.aca3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.aca6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aca8	90 0e		bcc $acb8			bcc 	_TKNoShift
.acaa	48		pha				pha 								; save
.acab	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.acad	85 36		sta $36				sta 	zTemp0
.acaf	68		pla				pla
.acb0	29 20		and #$20			and 	#32 						; bit 5
.acb2	4a		lsr a				lsr 	a 							; shift into bit 3
.acb3	4a		lsr a				lsr 	a
.acb4	05 36		ora $36				ora 	zTemp0
.acb6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.acb8					_TKNoShift:
.acb8	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte 			; write the punctuation character
.acbb	e8		inx				inx 								; consume the character
.acbc	80 be		bra $ac7c			bra 	_TKTokeniseLoop 			; and loop round again.
.acbe					_TKString:
.acbe	20 6e ad	jsr $ad6e			jsr 	TokeniseString
.acc1	80 b9		bra $ac7c			bra 	_TKTokeniseLoop
.acc3					_TKHexConstant:
.acc3	20 a9 ad	jsr $ada9			jsr 	TokeniseHexConstant
.acc6	80 b4		bra $ac7c			bra 	_TKTokeniseLoop
.acc8					_TKCheckDouble:
.acc8	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.accb	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.accd	90 d4		bcc $aca3			bcc 	_TKStandardPunctuation
.accf	c9 3f		cmp #$3f			cmp 	#'>'+1
.acd1	b0 d0		bcs $aca3			bcs 	_TKStandardPunctuation
.acd3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.acd6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acd8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.acd9	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acdc	38		sec				sec
.acdd	e9 3c		sbc #$3c			sbc 	#'<'
.acdf	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ace2	e8		inx				inx 								; consume both
.ace3	e8		inx				inx
.ace4	80 96		bra $ac7c			bra 	_TKTokeniseLoop
.ace6	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ace8	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.aceb	60		rts				rts
.acec					_TKTokeniseIdentifier:
.acec	8e 80 04	stx $0480			stx 	identStart 					; save start
.acef	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.acf2					_TKCheckLoop:
.acf2	e8		inx				inx 								; look at next, we know first is identifier.
.acf3	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acf6	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.acf8	f0 f8		beq $acf2			beq 	_TKCheckLoop
.acfa	c9 30		cmp #$30			cmp	 	#"0"
.acfc	90 0c		bcc $ad0a			bcc 	_TKEndIdentifier
.acfe	c9 3a		cmp #$3a			cmp 	#"9"+1
.ad00	90 f0		bcc $acf2			bcc 	_TKCheckLoop
.ad02	c9 41		cmp #$41			cmp	 	#"A"
.ad04	90 04		bcc $ad0a			bcc 	_TKEndIdentifier
.ad06	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ad08	90 e8		bcc $acf2			bcc 	_TKCheckLoop
.ad0a					_TKEndIdentifier:
.ad0a	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ad0d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ad0f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ad11	f0 06		beq $ad19			beq 	_TKHasTypeCharacter
.ad13	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ad15	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ad17	d0 07		bne $ad20			bne 	_TKNoTypeCharacter
.ad19					_TKHasTypeCharacter:
.ad19	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad1c	e8		inx				inx 								; read next
.ad1d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad20					_TKNoTypeCharacter:
.ad20	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad22	d0 09		bne $ad2d			bne 	_TKNoArray
.ad24	e8		inx				inx 								; skip the (
.ad25	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad28	09 04		ora #$04			ora 	#$04
.ad2a	8d 84 04	sta $0484			sta 	identTypeByte
.ad2d					_TKNoArray:
.ad2d	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad30	20 ca ad	jsr $adca			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad33	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad35	a9 d8		lda #$d8			lda 	#(KeywordSet0) & $FF
.ad37	20 7f a8	jsr $a87f			jsr 	TokeniseSearchTable
.ad3a	a2 00		ldx #$00			ldx 	#0
.ad3c	b0 1f		bcs $ad5d			bcs 	_TKFoundToken
.ad3e	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad40	a9 bd		lda #$bd			lda 	#(KeywordSet1) & $FF
.ad42	20 7f a8	jsr $a87f			jsr 	TokeniseSearchTable
.ad45	a2 81		ldx #$81			ldx 	#$81
.ad47	b0 14		bcs $ad5d			bcs 	_TKFoundToken
.ad49	a0 ab		ldy #$ab			ldy 	#(KeywordSet2) >> 8
.ad4b	a9 0b		lda #$0b			lda 	#(KeywordSet2) & $FF
.ad4d	20 7f a8	jsr $a87f			jsr 	TokeniseSearchTable
.ad50	a2 82		ldx #$82			ldx 	#$82
.ad52	b0 09		bcs $ad5d			bcs 	_TKFoundToken
.ad54	20 5a ae	jsr $ae5a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad57	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad5a	4c 7c ac	jmp $ac7c			jmp 	_TKTokeniseLoop 			; and go round again.
.ad5d					_TKFoundToken:
.ad5d	48		pha				pha 								; save token
.ad5e	8a		txa				txa 								; shift in X, is there one ?
.ad5f	f0 03		beq $ad64			beq 	_TKNoTShift
.ad61	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte 			; if so, write it out
.ad64					_TKNoTShift:
.ad64	68		pla				pla 								; restore and write token
.ad65	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.ad68	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad6b	4c 7c ac	jmp $ac7c			jmp 	_TKTokeniseLoop 			; and go round again.
.ad6e					TokeniseString:
.ad6e	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad70	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.ad73	e8		inx				inx									; start of quoted string.
.ad74	da		phx				phx 								; push start of string on top
.ad75	ca		dex				dex
.ad76					_TSFindEnd:
.ad76	e8		inx				inx
.ad77	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad7a	f0 04		beq $ad80			beq 	_TSEndOfString
.ad7c	c9 22		cmp #$22			cmp 	#'"'
.ad7e	d0 f6		bne $ad76			bne 	_TSFindEnd
.ad80					_TSEndOfString:
.ad80	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad81	48		pha				pha 								; save terminating character
.ad82	20 8a ad	jsr $ad8a			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad85	68		pla				pla 								; terminating character
.ad86	f0 01		beq $ad89			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad88	e8		inx				inx
.ad89					_TSNotQuote:
.ad89	60		rts				rts
.ad8a					TOWriteBlockXY:
.ad8a	86 36		stx $36				stx 	zTemp0 						; write end character
.ad8c	98		tya				tya
.ad8d	49 ff		eor #$ff			eor 	#$FF
.ad8f	38		sec				sec
.ad90	65 36		adc $36				adc 	zTemp0
.ad92	1a		inc a				inc 	a 							; one extra for NULL
.ad93	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.ad96					_TOBlockLoop:
.ad96	c4 36		cpy $36				cpy 	zTemp0
.ad98	f0 09		beq $ada3			beq 	_TOBlockExit
.ad9a	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad9d	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.ada0	c8		iny				iny
.ada1	80 f3		bra $ad96			bra 	_TOBlockLoop
.ada3					_TOBlockExit:
.ada3	a9 00		lda #$00			lda 	#0
.ada5	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.ada8	60		rts				rts
.ada9					TokeniseHexConstant:
.ada9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.adab	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.adae	e8		inx				inx									; start of quoted string.
.adaf	da		phx				phx 								; push start of constant on top
.adb0	ca		dex				dex
.adb1					_THFindLoop:
.adb1	e8		inx				inx
.adb2	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.adb5	c9 30		cmp #$30			cmp 	#"0"
.adb7	90 0c		bcc $adc5			bcc 	_THFoundEnd
.adb9	c9 3a		cmp #$3a			cmp 	#"9"+1
.adbb	90 f4		bcc $adb1			bcc 	_THFindLoop
.adbd	c9 41		cmp #$41			cmp 	#"A"
.adbf	90 04		bcc $adc5			bcc 	_THFoundEnd
.adc1	c9 47		cmp #$47			cmp 	#"F"+1
.adc3	90 ec		bcc $adb1			bcc 	_THFindLoop
.adc5					_THFoundEnd:
.adc5	7a		ply				ply 								; restore start
.adc6	20 8a ad	jsr $ad8a			jsr 	TOWriteBlockXY 				; output the block
.adc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adca					TokeniseCalculateHash:
.adca	da		phx				phx
.adcb	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adce	a9 00		lda #$00			lda 	#0
.add0					_TCHLoop:
.add0	18		clc				clc
.add1	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.add4	e8		inx				inx
.add5	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.add8	d0 f6		bne $add0			bne 	_TCHLoop
.adda	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.addd	fa		plx				plx
.adde	60		rts				rts
.addf					FixLineBufferCase:
.addf	a2 00		ldx #$00			ldx 	#0
.ade1					_FLBCLoop:
.ade1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ade4	f0 22		beq $ae08			beq 	_FLBCExit 					; end of string.
.ade6	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ade8	f0 11		beq $adfb			beq 	_FLBCInQuotes
.adea	e8		inx				inx
.adeb	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.aded	90 f2		bcc $ade1			bcc 	_FLBCLoop
.adef	c9 7b		cmp #$7b			cmp 	#'z'+1
.adf1	b0 ee		bcs $ade1			bcs 	_FLBCLoop
.adf3	38		sec				sec 								; make U/C
.adf4	e9 20		sbc #$20			sbc 	#32
.adf6	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.adf9	80 e6		bra $ade1			bra 	_FLBCLoop
.adfb					_FLBCInQuotes:
.adfb	e8		inx				inx 								; advance
.adfc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.adff	f0 07		beq $ae08			beq 	_FLBCExit 					; exit on EOS
.ae01	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ae03	d0 f6		bne $adfb			bne 	_FLBCInQuotes
.ae05	e8		inx				inx 								; skip over it
.ae06	80 d9		bra $ade1			bra 	_FLBCLoop
.ae08					_FLBCExit:
.ae08	60		rts				rts
.ae09					TokeniseExtractLineNumber:
.ae09	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ae0c	48		pha				pha
.ae0d	ad a8 04	lda $04a8			lda 	tokenLineNumber
.ae10	48		pha				pha
.ae11	20 47 ae	jsr $ae47			jsr 	_TELNTimes2 				; line # x 4
.ae14	20 47 ae	jsr $ae47			jsr 	_TELNTimes2 				; line # x 2
.ae17	18		clc				clc 								; add stacked value
.ae18	68		pla				pla
.ae19	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae1c	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae1f	68		pla				pla
.ae20	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae23	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae26	20 47 ae	jsr $ae47			jsr 	_TELNTimes2 				; line # x 10
.ae29	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae2c	e8		inx				inx
.ae2d	29 0f		and #$0f			and 	#15 						; add to line #
.ae2f	18		clc				clc
.ae30	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae33	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae36	90 03		bcc $ae3b			bcc 	_TLENNoCarry
.ae38	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae3b					_TLENNoCarry:
.ae3b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae3e	c9 30		cmp #$30			cmp 	#'0'
.ae40	90 04		bcc $ae46			bcc 	_TLENExit
.ae42	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae44	90 c3		bcc $ae09			bcc 	TokeniseExtractLineNumber
.ae46					_TLENExit:
.ae46	60		rts				rts
.ae47					_TELNTimes2:
.ae47	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae4a	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae4d	60		rts				rts
.ae4e					TokeniseWriteByte:
.ae4e	da		phx				phx
.ae4f	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae52	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae55	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae58	fa		plx				plx
.ae59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae5a					CheckCreateVariableRecord:
.ae5a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae5c	85 36		sta $36				sta 	0+zTemp0
.ae5e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae60	85 37		sta $37				sta 	1+zTemp0
.ae62					_CCVSearch:
.ae62	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae64	f0 2c		beq $ae92			beq 	_CCVFail
.ae66	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae68	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae6a	cd 83 04	cmp $0483			cmp 	identHash
.ae6d	d0 16		bne $ae85			bne 	_CCVNext
.ae6f	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae71	ae 80 04	ldx $0480			ldx 	identStart
.ae74					_CCVCompare:
.ae74	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae77	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae79	e8		inx				inx 								; advance pointers
.ae7a	c8		iny				iny
.ae7b	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae7c	d0 07		bne $ae85			bne 	_CCVNext  					; didn't match go to next.
.ae7e	90 f4		bcc $ae74			bcc 	_CCVCompare 				; not finished yet.
.ae80	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae83	f0 41		beq $aec6			beq 	_CCVFound 					; yes, we were successful
.ae85					_CCVNext:
.ae85	18		clc				clc
.ae86	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae88	65 36		adc $36				adc 	zTemp0
.ae8a	85 36		sta $36				sta 	zTemp0
.ae8c	90 d4		bcc $ae62			bcc 	_CCVSearch
.ae8e	e6 37		inc $37				inc 	zTemp0+1
.ae90	80 d0		bra $ae62			bra 	_CCVSearch
.ae92					_CCVFail:
.ae92	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae94	ad 83 04	lda $0483			lda 	identHash
.ae97	91 36		sta ($36),y			sta 	(zTemp0),y
.ae99	c8		iny				iny 								; offset 2 is the type byte
.ae9a	ad 84 04	lda $0484			lda 	identTypeByte
.ae9d	91 36		sta ($36),y			sta 	(zTemp0),y
.ae9f	c8		iny				iny
.aea0					_CCVData:
.aea0	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.aea2	91 36		sta ($36),y			sta 	(zTemp0),y
.aea4	c8		iny				iny
.aea5	c0 08		cpy #$08			cpy 	#8
.aea7	90 f7		bcc $aea0			bcc 	_CCVData
.aea9	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.aeac					_CCVCopyName:
.aeac	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.aeaf	91 36		sta ($36),y			sta 	(zTemp0),y
.aeb1	e8		inx				inx
.aeb2	c8		iny				iny
.aeb3	ec 82 04	cpx $0482			cpx 	identTypeEnd
.aeb6	d0 f4		bne $aeac			bne 	_CCVCopyName
.aeb8	98		tya				tya 								; patch offset
.aeb9	92 36		sta ($36)			sta 	(zTemp0)
.aebb	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aebd	91 36		sta ($36),y			sta 	(zTemp0),y
.aebf	88		dey				dey
.aec0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aec2	09 80		ora #$80			ora 	#$80
.aec4	91 36		sta ($36),y			sta 	(zTemp0),y
.aec6					_CCVFound:
.aec6	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aec8	38		sec				sec
.aec9	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aecb	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aecd	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.aed0	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aed2	20 4e ae	jsr $ae4e			jsr 	TokeniseWriteByte
.aed5	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
