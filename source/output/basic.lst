
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D LTILEMAP_ADDRESS=\$24000" "-D LTILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Tue Feb 21 11:24:43 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 LTILEMAP_ADDRESS=$24000
=$26000						 LTILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DOS                              = $8b; $8b DOS
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TILE                             = $a4; $a4 TILE
=$a5						KWD1_TILES                            = $a5; $a5 TILES
=$a6						KWD1_TRY                              = $a6; $a6 TRY
=$a7						KWD1_VERIFY                           = $a7; $a7 VERIFY
=$a8						KWD1_XGO                              = $a8; $a8 XGO
=$a9						KWD1_XLOAD                            = $a9; $a9 XLOAD
=$aa						KWD1_ZAP                              = $aa; $aa ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 56 b8	jsr $b856		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 89 b8	jsr $b889		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 07 b2	jsr $b207		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 9b b4	jsr $b49b		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 ad 83	jsr $83ad			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 82 85	jsr $8582			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 82 85	jsr $8582			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 82 85	jsr $8582			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 82 85	jsr $8582			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8109		a9 1a		lda #$1a			lda 	#Prompt & $FF
.810b		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.810e		20 64 82	jsr $8264			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8111		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; erase current program
.8114		4c ee 87	jmp $87ee			jmp 	WarmStart					; make same size.
.8117		4c ee 87	jmp $87ee			jmp 	WarmStart
>811a		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811c		09 09 32 31 2f 30 32 2f			.text 9,9,"21/02/23 37"
>8124		32 33 20 33 37

;******  Return to file: ./common/aa.system/00start.asm

>8129		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.812d						ProcessEvents:
.812d		20 ec 83	jsr $83ec			jsr 	KNLSetEventPointer
.8130		20 6d 82	jsr $826d			jsr     GetNextEvent 				; get next event
.8133		b0 36		bcs $816b			bcs 	_PEExitZ 					; nothing left to process.
.8135		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8138		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.813a		d0 f1		bne $812d			bne 	ProcessEvents
.813c		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.813f		30 0b		bmi $814c			bmi 	_PEIsRaw
.8141		d0 ea		bne $812d			bne 	ProcessEvents
.8143		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8146		c9 03		cmp #$03			cmp 	#3
.8148		f0 1e		beq $8168			beq 	_PEReturnBreak  			; no, keep going.
.814a		80 0b		bra $8157			bra 	_PEQueueA
.814c						_PEIsRaw:
.814c		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.814f		c9 81		cmp #$81			cmp 	#129
.8151		90 da		bcc $812d			bcc		ProcessEvents
.8153		c9 8d		cmp #$8d			cmp 	#140+1
.8155		b0 d6		bcs $812d			bcs 	ProcessEvents
.8157						_PEQueueA:
.8157		da		phx				phx
.8158		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.815b		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.815d		f0 06		beq $8165			beq 	_PENoQueue
.815f		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8162		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8165						_PENoQueue:
.8165		fa		plx				plx
.8166		80 c5		bra $812d			bra 	ProcessEvents
.8168						_PEReturnBreak:
.8168		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.816a		60		rts				rts
.816b						_PEExitZ:
.816b		a9 00		lda #$00			lda 	#0
.816d		60		rts				rts
.816e						PopKeyboardQueue:
.816e		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8171		f0 17		beq $818a			beq 	_PKQExit 					; zero, then exit.
.8173		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8176		48		pha				pha
.8177		da		phx				phx 								; drop head of queue
.8178		a2 00		ldx #$00			ldx 	#0
.817a						_PKQLoop:
.817a		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.817d		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8180		e8		inx				inx
.8181		e0 07		cpx #$07			cpx 	#7
.8183		d0 f5		bne $817a			bne 	_PKQLoop
.8185		fa		plx				plx
.8186		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8189		68		pla				pla 								; restore head of queue.
.818a						_PKQExit:
.818a		60		rts				rts
.818b						KNLGetKeyPressed:
.818b		a5 01		lda $01				lda 	1 							; save I/O 0
.818d		48		pha				pha
.818e		64 01		stz $01				stz 	1 							; access I/O Page 0
.8190		38		sec				sec 								; calculate timer - LastTick
.8191		ad 59 d6	lda $d659			lda 	$D659
.8194		cd 5e 06	cmp $065e			cmp 	LastTick
.8197		f0 06		beq $819f			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8199		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.819c		20 5c 82	jsr $825c			jsr 	TickHandler 							; go do the code.
.819f						_NoFireTick:
.819f		68		pla				pla 								; restore I/O 0
.81a0		85 01		sta $01				sta 	1
.81a2		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.81a5		d0 c7		bne $816e			bne 	PopKeyboardQueue 			; if so, pop and return it
.81a7		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process any outstanding events
.81aa		a9 00		lda #$00			lda 	#0
.81ac		60		rts				rts
.81ad						KNLGetSingleCharacter:
.81ad		20 8b 81	jsr $818b			jsr 	KNLGetKeyPressed
.81b0		c9 00		cmp #$00			cmp 	#0
.81b2		f0 f9		beq $81ad			beq 	KNLGetSingleCharacter
.81b4		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81b5						EXTInputLine:
.81b5		48		pha				pha
.81b6		da		phx				phx
.81b7		5a		phy				phy
.81b8		a5 01		lda $01				lda 	1 							; save I/O page
.81ba		48		pha				pha
.81bb						_EILLoop:
.81bb		20 ad 81	jsr $81ad			jsr 	KNLGetSingleCharacter 		; get one single character
.81be		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81c0		f0 44		beq $8206			beq 	_EILExit
.81c2		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81c4		f0 2a		beq $81f0			beq 	_EILDelete
.81c6		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81c8		f0 1c		beq $81e6			beq 	_EILBackspace
.81ca		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81cc		90 12		bcc $81e0			bcc 	_EILPrintLoop
.81ce		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81d0		b0 0e		bcs $81e0			bcs 	_EILPrintLoop
.81d2		48		pha				pha 								; save character
.81d3		a9 02		lda #$02			lda 	#2  						; insert a space
.81d5		85 01		sta $01				sta 	1
.81d7		20 4a 82	jsr $824a			jsr 	EXTILInsert 				; insert in text screen
.81da		e6 01		inc $01				inc 	1
.81dc		20 4a 82	jsr $824a			jsr 	EXTILInsert 				; insert in colour screen
.81df		68		pla				pla 								; get character back.
.81e0						_EILPrintLoop:
.81e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81e3		80 d6		bra $81bb			bra 	_EILLoop
.81e5		60		rts				rts
.81e6						_EILBackspace:
.81e6		ad c4 07	lda $07c4			lda 	EXTColumn					; can we backspace ?
.81e9		f0 d0		beq $81bb			beq 	_EILLoop
.81eb		a9 02		lda #$02			lda 	#2 							; move cursor left
.81ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81f0						_EILDelete
.81f0		a9 02		lda #$02			lda 	#2 							; text block
.81f2		85 01		sta $01				sta 	1
.81f4		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.81f6		20 35 82	jsr $8235			jsr 	EXTILDelete
.81f9		e6 01		inc $01				inc 	1 							; colour block
.81fb		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; get attribute of last character
.81fe		88		dey				dey
.81ff		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8201		20 35 82	jsr $8235			jsr 	EXTILDelete 				; backspace attribute
.8204		80 b5		bra $81bb			bra 	_EILLoop 					; and go round.
.8206						_EILExit:
.8206		a9 02		lda #$02			lda 	#2 							; switch to page 2
.8208		85 01		sta $01				sta 	1
.820a		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.820c						_EILScrapeLine:
.820c		b1 40		lda ($40),y			lda 	(EXTAddress),y
.820e		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8211		c8		iny				iny
.8212		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8215		d0 f5		bne $820c			bne 	_EILScrapeLine
.8217						_EILTrimSpaces:
.8217		88		dey				dey
.8218		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.821a		f0 07		beq $8223			beq 	_EILEndTrim		 			; zero the input line.
.821c		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.821f		c9 20		cmp #$20			cmp 	#' '
.8221		f0 f4		beq $8217			beq 	_EILTrimSpaces 				; if fail this found non space character
.8223						_EILEndTrim:
.8223		c8		iny				iny 								; trim after non space character.
.8224		a9 00		lda #$00			lda 	#0 							; trim here.
.8226		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8229		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.822b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.822e		68		pla				pla 								; reset I/O page
.822f		85 01		sta $01				sta 	1
.8231		7a		ply				ply
.8232		fa		plx				plx
.8233		68		pla				pla
.8234		60		rts				rts
.8235						EXTILDelete:
.8235		48		pha				pha 								; save the new character
.8236		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; start copying from here.
.8239						_EXTDLoop:
.8239		c8		iny				iny 								; copy one byte down.
.823a		b1 40		lda ($40),y			lda 	(EXTAddress),y
.823c		88		dey				dey
.823d		91 40		sta ($40),y			sta 	(EXTAddress),y
.823f		c8		iny				iny 								; do till end of line.
.8240		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8243		90 f4		bcc $8239			bcc 	_EXTDLoop
.8245		88		dey				dey 	 							; write in last slot.
.8246		68		pla				pla
.8247		91 40		sta ($40),y			sta 	(EXTAddress),y
.8249		60		rts				rts
.824a						EXTILInsert:
.824a		ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; end position
.824d						_EXTILoop:
.824d		88		dey				dey 								; back one
.824e		cc c4 07	cpy $07c4			cpy 	EXTColumn 					; exit if reached insert point.
.8251		f0 08		beq $825b			beq 	_EXTIExit
.8253		88		dey				dey 								; copy one byte up.
.8254		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8256		c8		iny				iny
.8257		91 40		sta ($40),y			sta 	(EXTAddress),y
.8259		80 f2		bra $824d			bra 	_EXTILoop
.825b						_EXTIExit:
.825b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.825c						TickHandler:
.825c		da		phx				phx
.825d		5a		phy				phy 								; need to preserve Y
.825e		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8261		7a		ply				ply
.8262		fa		plx				plx
.8263		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8264						ResetIOTracking:
.8264		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8266						_RIOLoop:
.8266		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.8269		ca		dex				dex
.826a		10 fa		bpl $8266			bpl 	_RIOLoop
.826c		60		rts				rts
.826d						GetNextEvent:
.826d		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8270		08		php				php									; save yes/no flag.
.8271		b0 29		bcs $829c			bcs 	_GNEExit
.8273		48		pha				pha 								; save registers
.8274		da		phx				phx
.8275		5a		phy				phy
.8276		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.8279		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.827b		f0 04		beq $8281			beq 	_GNEKeyEvent
.827d		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.827f		d0 08		bne $8289			bne 	_GNECheckMouseEvent
.8281						_GNEKeyEvent:
.8281		20 5b 83	jsr $835b			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8284		20 78 83	jsr $8378			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.8287		80 10		bra $8299			bra 	_GNEEventExit
.8289						_GNECheckMouseEvent:
.8289		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.828b		d0 05		bne $8292			bne 	_GNENotDelta
.828d		20 9e 82	jsr $829e			jsr 	ProcessMouseDeltaEvent 		; process them.
.8290		80 07		bra $8299			bra 	_GNEEventExit
.8292						_GNENotDelta:
.8292		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.8294		d0 03		bne $8299			bne 	_GNEEventExit
.8296		20 cd 82	jsr $82cd			jsr 	ProcessMouseClickEvent 		; process them.
.8299						_GNEEventExit:
.8299		7a		ply				ply 								; restore registers
.829a		fa		plx				plx
.829b		68		pla				pla
.829c						_GNEExit:
.829c		28		plp				plp
.829d		60		rts				rts
.829e						ProcessMouseDeltaEvent:
.829e		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82a0		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.82a3		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82a6		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82a9		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.82ac		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82af		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82b2		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82b5		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82b8		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82bb		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82be		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82c0		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c3		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c6		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c9		20 03 83	jsr $8303			jsr 	PMKClipMouseCoord
.82cc		60		rts				rts
.82cd						ProcessMouseClickEvent:
.82cd		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82cf		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82d2		20 3b 83	jsr $833b			jsr 	PMKAdd
.82d5		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82d8		20 3b 83	jsr $833b			jsr 	PMKAdd
.82db		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82de		20 3b 83	jsr $833b			jsr 	PMKAdd
.82e1		60		rts				rts
.82e2						PMKOutputButton:
.82e2		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82e5		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82e8		6a		ror a				ror 	a 							; shift LSB into carry
.82e9		90 06		bcc $82f1			bcc 	_PMKOBExit
.82eb		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.82ee		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.82f1						_PMKOBExit:
.82f1		e8		inx				inx  								; next button
.82f2		e8		inx				inx
.82f3		60		rts				rts
.82f4						PMKAdjustTotal:
.82f4		48		pha				pha 								; save offset A index X
.82f5		da		phx				phx
.82f6		48		pha				pha 								; point X to the position
.82f7		8a		txa				txa
.82f8		18		clc				clc
.82f9		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.82fb		aa		tax				tax
.82fc		68		pla				pla
.82fd		20 37 83	jsr $8337			jsr 	PMKAddSubtract 				; reuse the addition code.
.8300		fa		plx				plx 								; restore XA
.8301		68		pla				pla
.8302		60		rts				rts
.8303						PMKClipMouseCoord:
.8303		a2 00		ldx #$00			ldx 	#0
.8305						_PCMCLoop:
.8305		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.8308		10 06		bpl $8310			bpl 	_PCMCNotNeg
.830a		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.830d		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8310						_PCMCNotNeg:
.8310		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8313		dd 31 83	cmp $8331,x			cmp 	_PCMCExtent,x
.8316		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.8319		fd 32 83	sbc $8332,x			sbc 	_PCMCExtent+1,x
.831c		90 0c		bcc $832a			bcc 	_PCMCNotOver 				; in range ?
.831e		bd 31 83	lda $8331,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8321		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8324		bd 32 83	lda $8332,x			lda 	_PCMCExtent+1,x
.8327		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.832a						_PCMCNotOver:
.832a		e8		inx				inx
.832b		e8		inx				inx
.832c		e0 06		cpx #$06			cpx 	#3*2
.832e		d0 d5		bne $8305			bne 	_PCMCLoop
.8330		60		rts				rts
.8331						_PCMCExtent:
>8331		3f 01 ef 00 ff 00				.word 	319,239,255
.8337						PMKAddSubtract:
.8337		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.8339		30 0e		bmi $8349			bmi 	PMKSubtract
.833b						PMKAdd:
.833b		18		clc				clc
.833c		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.833f		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8342		90 14		bcc $8358			bcc 	PMKExit
.8344		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8347		80 0f		bra $8358			bra 	PMKExit
.8349						PMKSubtract:
.8349		18		clc				clc
.834a		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.834d		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8350		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8353		69 ff		adc #$ff			adc 	#$FF
.8355		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.8358						PMKExit:
.8358		e8		inx				inx 								; next slot ?
.8359		e8		inx				inx
.835a		60		rts				rts
.835b						ProcessKeyboardEvent:
.835b		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.835e		20 99 83	jsr $8399			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8361		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8364		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8366		f0 07		beq $836f			beq 	_PKERelease
.8368		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.836b		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.836e		60		rts				rts
.836f						_PKERelease:
.836f		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8371		3d 60 06	and $0660,x			and 	KeyStatus,x
.8374		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8377		60		rts				rts
.8378						UpdateKeyboardJoystick:
.8378		9c 81 06	stz $0681			stz 	KeyJoystick
.837b		a2 00		ldx #$00			ldx 	#0
.837d						_UKJLoop:
.837d		bd 94 83	lda $8394,x			lda 	_UKJKeys,x 					; which key
.8380		29 1f		and #$1f			and 	#$1F
.8382		a8		tay				tay
.8383		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8386		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8388		18		clc				clc  								; set C if bit set
.8389		69 ff		adc #$ff			adc 	#$FF
.838b		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.838e		e8		inx				inx
.838f		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8391		d0 ea		bne $837d			bne 	_UKJLoop
.8393		60		rts				rts
.8394						_UKJKeys:
>8394		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8399						KeyboardConvertXA:
.8399		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.839b		8e 80 06	stx $0680			stx 	KeyMaskTemp
.839e						_KCCALoop:
.839e		18		clc				clc
.839f		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83a1		b0 05		bcs $83a8			bcs 	_KCCADone
.83a3		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.83a6		80 f6		bra $839e			bra 	_KCCALoop
.83a8						_KCCADone:
.83a8		aa		tax				tax 								; table entry in X
.83a9		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.83ac		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83ad						KNLSetDrive:
.83ad		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83b0		60		rts				rts
.83b1						KNLOpenFileWrite:
.83b1		48		pha				pha
.83b2		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83b4		80 03		bra $83b9			bra 	KNLOpenStart
.83b6						KNLOpenFileRead:
.83b6		48		pha				pha
.83b7		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83b9						KNLOpenStart:
.83b9		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83bb		68		pla				pla
.83bc		20 f7 83	jsr $83f7			jsr 	KNLSetupFileName
.83bf		20 ec 83	jsr $83ec			jsr 	KNLSetEventPointer
.83c2		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83c5		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83c7		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83ca		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83cc		b0 1d		bcs $83eb			bcs     _out
.83ce						_loop
.83ce		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83d1		20 6d 82	jsr $826d			jsr     GetNextEvent
.83d4		b0 f8		bcs $83ce			bcs     _loop
.83d6		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83d9		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83db		f0 0a		beq $83e7			beq 	_success
.83dd		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83df		f0 0a		beq $83eb			beq 	_out
.83e1		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83e3		f0 06		beq $83eb			beq 	_out
.83e5		80 e7		bra $83ce			bra     _loop
.83e7						_success
.83e7		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83ea		18		clc				clc
.83eb						_out
.83eb		60		rts				rts
.83ec						KNLSetEventPointer:
.83ec		48		pha				pha
.83ed		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.83ef		85 f0		sta $f0				sta     kernel.args.events+0
.83f1		a9 07		lda #$07			lda     #KNLEvent >> 8
.83f3		85 f1		sta $f1				sta     kernel.args.events+1
.83f5		68		pla				pla
.83f6		60		rts				rts
.83f7						KNLSetupFileName:
.83f7		5a		phy				phy 								; save Y on stack
.83f8		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.83fa		86 37		stx $37				stx 	zTemp0+1
.83fc		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.83fe		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8400		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8402						_KNLGetLength:
.8402		c8		iny				iny
.8403		b1 36		lda ($36),y			lda 	(zTemp0),y
.8405		d0 fb		bne $8402			bne 	_KNLGetLength
.8407		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8409		7a		ply				ply
.840a		60		rts				rts
.840b						KNLReadBlock:
.840b		85 f3		sta $f3				sta     kernel.args.file.read.stream
.840d		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.840f		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8412		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8414		b0 2e		bcs $8444			bcs     _KGNBExitFail               ; report as general error
.8416						_KGRBEventLoop:
.8416		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8419		20 6d 82	jsr $826d			jsr     GetNextEvent
.841c		b0 f8		bcs $8416			bcs     _KGRBEventLoop
.841e		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8421		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8423		f0 0a		beq $842f			beq     _KNLRBGetNextByte
.8425		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8427		f0 1b		beq $8444			beq 	_KGNBExitFail
.8429		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.842b		f0 17		beq $8444			beq 	_KGNBExitFail
.842d		80 e7		bra $8416			bra 	_KGRBEventLoop
.842f						_KNLRBGetNextByte:
.842f		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8431		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8433		a9 06		lda #$06			lda     #>KNLReadBuffer
.8435		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8437		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.843a		85 fd		sta $fd				sta     kernel.args.recv.buflen
.843c		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.843f		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8442		18		clc				clc
.8443		60		rts				rts
.8444						_KGNBExitFail:
.8444		38		sec				sec
.8445		60		rts				rts
.8446						KNLWriteBlock:
.8446		da		phx				phx
.8447		5a		phy				phy
.8448		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.844a		a5 36		lda $36				lda     zTemp0 						; save the data location.
.844c		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.844e		a5 37		lda $37				lda     zTemp0+1
.8450		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8452		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8454		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8457		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8459		b0 21		bcs $847c			bcs 	_KWBFailed
.845b						_KNLWLoop:
.845b		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.845e		20 6d 82	jsr $826d			jsr     GetNextEvent
.8461		b0 f8		bcs $845b			bcs     _KNLWLoop
.8463		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8466		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8468		f0 12		beq $847c			beq 	_KWBFailed
.846a		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.846c		f0 0e		beq $847c			beq 	_KWBFailed
.846e		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8470		f0 0a		beq $847c			beq 	_KWBFailed
.8472		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8474		d0 e5		bne $845b			bne 	_KNLWLoop
.8476		18		clc				clc
.8477		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.847a		80 01		bra $847d			bra 	_KWBExit
.847c						_KWBFailed:
.847c		38		sec				sec
.847d						_KWBExit:
.847d		7a		ply				ply
.847e		fa		plx				plx
.847f		60		rts				rts
.8480						KNLCloseFile:
.8480		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8482		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8485		60		rts				rts
.8486						KNLReadController:
.8486		da		phx				phx
.8487		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8489		64 01		stz $01				stz 	1 							; switch to I/O 0
.848b		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.848e		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8490		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.8493		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8495		fa		plx				plx
.8496		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4
>ff84						RmDir       .fill   4
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8497						AssembleGroup1:
.8497		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8499		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.849c		80 02		bra $84a0			bra 	AsmGroup12
.849e						AssembleGroup2:
.849e		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84a0						AsmGroup12:
.84a0		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.84a3		68		pla				pla 								; pop the return address to access the information following.
.84a4		fa		plx				plx
.84a5		20 2c 85	jsr $852c			jsr 	AccessParameters 			; get opcode and save as base
.84a8		8d 20 04	sta $0420			sta 	BaseOpcode
.84ab		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84ae		d0 08		bne $84b8			bne 	_AG12HaveMask
.84b0		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84b2		20 34 85	jsr $8534			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84b5		8d 21 04	sta $0421			sta 	ModeMask
.84b8						_AG12HaveMask:
.84b8		20 68 86	jsr $8668			jsr 	TypeAndCalculateOperand 	; get zero page type
.84bb		da		phx				phx 								; save found address mode
.84bc		20 98 85	jsr $8598			jsr 	AssembleModeX
.84bf		fa		plx				plx  								; restore address mode
.84c0		b0 0b		bcs $84cd			bcs 	_AG12Exit
.84c2		20 ce 84	jsr $84ce			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84c5		20 98 85	jsr $8598			jsr 	AssembleModeX
.84c8		b0 03		bcs $84cd			bcs 	_AG12Exit
.84ca		4c 61 a4	jmp $a461			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84cd						_AG12Exit:
.84cd		60		rts				rts
.84ce						PromoteToAbsolute:
.84ce		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84d0		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84d2		f0 19		beq $84ed			beq 	_PTADo
.84d4		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84d6		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84d8		f0 13		beq $84ed			beq 	_PTADo
.84da		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84dc		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84de		f0 0d		beq $84ed			beq 	_PTADo
.84e0		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84e2		e0 d1		cpx #$d1			cpx 	#AM_IND
.84e4		f0 07		beq $84ed			beq 	_PTADo
.84e6		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84e8		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84ea		f0 01		beq $84ed			beq 	_PTADo
.84ec		60		rts				rts
.84ed						_PTADo:
.84ed		aa		tax				tax
.84ee		60		rts				rts
.84ef						AssembleGroup3:
.84ef		68		pla				pla 								; get parameters, which is just the opcode.
.84f0		fa		plx				plx
.84f1		20 2c 85	jsr $852c			jsr 	AccessParameters 			; get and output opcode
.84f4		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.84f7		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get a 16 bit operand
.84fa		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.84fc		38		sec				sec
.84fd		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8500		48		pha				pha 								; LSB in A
.8501		a5 60		lda $60				lda 	NSMantissa1
.8503		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8506		aa		tax				tax 								; MSB in X
.8507		68		pla				pla
.8508		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8509		69 7f		adc #$7f			adc 	#$7F
.850b		90 01		bcc $850e			bcc 	_AG3NoCarry
.850d		e8		inx				inx
.850e						_AG3NoCarry:
.850e		38		sec				sec 								; fix back and write out anyways.
.850f		e9 80		sbc #$80			sbc 	#$80
.8511		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.8514		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8516		f0 0a		beq $8522			beq 	_AG3Exit
.8518		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.851b		29 01		and #$01			and 	#1
.851d		f0 03		beq $8522			beq 	_AG3Exit
.851f		4c 66 a4	jmp $a466			jmp 	RangeError 					; no, branch is out of range
.8522						_AG3Exit:
.8522		60		rts				rts
.8523						AssembleGroup4:
.8523		68		pla				pla 								; pop address
.8524		fa		plx				plx
.8525		20 2c 85	jsr $852c			jsr 	AccessParameters 			; access and get first
.8528		20 44 85	jsr $8544			jsr 	AssemblerWriteByte 			; output it.
.852b		60		rts				rts
.852c						AccessParameters:
.852c		8d 1d 04	sta $041d			sta 	ParamStart
.852f		8e 1e 04	stx $041e			stx 	ParamStart+1
.8532		a9 01		lda #$01			lda 	#1
.8534						GetParameter:
.8534		5a		phy				phy
.8535		a8		tay				tay
.8536		ad 1d 04	lda $041d			lda 	ParamStart
.8539		85 36		sta $36				sta 	zTemp0
.853b		ad 1e 04	lda $041e			lda 	ParamStart+1
.853e		85 37		sta $37				sta 	zTemp0+1
.8540		b1 36		lda ($36),y			lda 	(zTemp0),y
.8542		7a		ply				ply
.8543		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8544						AssemblerWriteByte:
.8544		48		pha			pha
.8545		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8548		29 02		and #$02		and 	#2
.854a		f0 1b		beq $8567		beq 	_AWBNoPrint
.854c		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.854f		20 82 85	jsr $8582		jsr 	PrintHex
.8552		ad 1a 04	lda $041a		lda		AssemblerAddress
.8555		20 82 85	jsr $8582		jsr 	PrintHex
.8558		a9 20		lda #$20		lda 	#' '
.855a		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.855d		68		pla			pla 									; print byte
.855e		48		pha			pha
.855f		20 82 85	jsr $8582		jsr 	PrintHex
.8562		a9 0d		lda #$0d		lda 	#13
.8564		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8567						_AWBNoPrint:
.8567		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.856a		85 36		sta $36			sta 	zTemp0
.856c		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.856f		f0 0e		beq $857f		beq 	_AWBRange
.8571		85 37		sta $37			sta 	zTemp0+1
.8573		68		pla			pla 									; write byte out
.8574		92 36		sta ($36)		sta 	(zTemp0)
.8576		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8579		d0 03		bne $857e		bne 	_AWBNoCarry
.857b		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.857e						_AWBNoCarry:
.857e		60		rts			rts
.857f						_AWBRange:
.857f		4c 66 a4	jmp $a466		jmp 	RangeError
.8582						PrintHex:
.8582		48		pha				pha
.8583		4a		lsr a				lsr 	a
.8584		4a		lsr a				lsr 	a
.8585		4a		lsr a				lsr 	a
.8586		4a		lsr a				lsr 	a
.8587		20 8b 85	jsr $858b			jsr 	_PrintNibble
.858a		68		pla				pla
.858b						_PrintNibble:
.858b		29 0f		and #$0f			and 	#15
.858d		c9 0a		cmp #$0a			cmp 	#10
.858f		90 02		bcc $8593			bcc 	_NoShift
.8591		69 06		adc #$06			adc 	#6
.8593						_NoShift:
.8593		69 30		adc #$30			adc 	#48
.8595		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8598						AssembleModeX:
.8598		5a		phy				phy
.8599		ad 1f 04	lda $041f			lda 	IsGroup1
.859c		f0 17		beq $85b5			beq 	_AMXGroup2
.859e		8a		txa				txa 							; is it in group # 1
.859f		29 40		and #$40			and 	#AM_ISG1
.85a1		f0 4d		beq $85f0			beq 	_AMXFail 				; no, give up.
.85a3		8a		txa				txa 							; get back.
.85a4		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85a6		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85a8		d0 22		bne $85cc			bne 	_AMXHaveInfo
.85aa		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.85ad		c9 81		cmp #$81			cmp 	#$81
.85af		f0 3f		beq $85f0			beq 	_AMXFail
.85b1		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85b3		80 17		bra $85cc			bra 	_AMXHaveInfo 			; odd design decision there.
.85b5						_AMXGroup2:
.85b5		8a		txa				txa 							; is it in group 2 ?
.85b6		29 20		and #$20			and 	#AM_ISG2
.85b8		f0 36		beq $85f0			beq 	_AMXFail 				; no, give up.
.85ba		8a		txa				txa 							; get the offset into Y
.85bb		29 1f		and #$1f			and 	#$1F
.85bd		4a		lsr a				lsr 	a 						; make it 0-7.
.85be		4a		lsr a				lsr  	a
.85bf		a8		tay				tay
.85c0		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85c3						_AMXCheckOkay:
.85c3		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85c4		88		dey				dey
.85c5		10 fc		bpl $85c3			bpl 	_AMXCheckOkay
.85c7		90 27		bcc $85f0			bcc 	_AMXFail 				; not allowed.
.85c9		8a		txa				txa  							; get mask back
.85ca		29 1f		and #$1f			and 	#$1F
.85cc						_AMXHaveInfo:
.85cc		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85ce		10 04		bpl $85d4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85d0		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85d2		d0 1c		bne $85f0			bne 	_AMXFail
.85d4						_AMXAnySize:
.85d4		18		clc				clc 							; add offset to the base opcode
.85d5		6d 20 04	adc $0420			adc 	BaseOpcode
.85d8						_AMXOutputCode:
.85d8		20 44 85	jsr $8544			jsr 	AssemblerWriteByte 		; write the opcode out.
.85db		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85dd		f0 0e		beq $85ed			beq 	_AMXExit
.85df		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85e1		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.85e4		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85e6		30 05		bmi $85ed			bmi 	_AMXExit
.85e8		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85ea		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.85ed						_AMXExit:
.85ed		7a		ply				ply
.85ee		38		sec				sec
.85ef		60		rts				rts
.85f0						_AMXFail:
.85f0		a0 00		ldy #$00			ldy 	#0
.85f2						_AMXCheckOddities:
.85f2		8a		txa				txa
.85f3		d9 1a 86	cmp $861a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.85f6		d0 15		bne $860d			bne 	_AMXCONext
.85f8		b9 18 86	lda $8618,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.85fb		cd 20 04	cmp $0420			cmp 	BaseOpcode
.85fe		d0 0d		bne $860d			bne 	_AMXCONext
.8600		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8602		10 04		bpl $8608			bpl 	_AMXCONotZero
.8604		a5 60		lda $60				lda 	NSMantissa1
.8606		d0 05		bne $860d			bne 	_AMXCONext
.8608						_AMXCONotZero:
.8608		b9 19 86	lda $8619,y			lda 	ExtraOpcode+1,y 		; get new opcode
.860b		80 cb		bra $85d8			bra 	_AMXOutputCode 			; and assemble it
.860d						_AMXCONext:
.860d		c8		iny				iny
.860e		c8		iny				iny
.860f		c8		iny				iny
.8610		b9 18 86	lda $8618,y			lda 	ExtraOpcode+0,y 		; end of table
.8613		d0 dd		bne $85f2			bne 	_AMXCheckOddities
.8615						_AMXCOFail:
.8615		7a		ply				ply
.8616		18		clc				clc
.8617		60		rts				rts
.8618						ExtraOpcode:
>8618		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>861b		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>861e		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8621		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8624		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8627		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>862a		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>862d		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8630		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8633		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8636		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8637						LabelHere:
.8637		c8		iny				iny 								; skip .
.8638		a2 00		ldx #$00			ldx 	#0 							; get a term
.863a		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm
.863d		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.863f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8641		d0 22		bne $8665			bne 	_ALType 					; otherwise typing error
.8643		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8645		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8647		b5 60		lda $60,x			lda 	NSMantissa1,x
.8649		85 37		sta $37				sta 	zTemp0+1
.864b		5a		phy				phy 								; copy address in (64k)
.864c		a0 01		ldy #$01			ldy 	#1
.864e		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8651		92 36		sta ($36)			sta 	(zTemp0)
.8653		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8656		91 36		sta ($36),y			sta 	(zTemp0),y
.8658		c8		iny				iny
.8659		a9 00		lda #$00			lda 	#0 							; zero the rest.
.865b		91 36		sta ($36),y			sta 	(zTemp0),y
.865d		c8		iny				iny
.865e		91 36		sta ($36),y			sta 	(zTemp0),y
.8660		c8		iny				iny
.8661		91 36		sta ($36),y			sta 	(zTemp0),y
.8663		7a		ply				ply
.8664		60		rts				rts
.8665						_ALType:
.8665		4c 6b a4	jmp $a46b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8668						TypeAndCalculateOperand:
.8668		b1 30		lda ($30),y			lda 	(codePtr),y
.866a		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.866c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.866e		f0 5b		beq $86cb			beq 	_TACOExit
.8670		c9 80		cmp #$80			cmp 	#KWC_EOL
.8672		f0 57		beq $86cb			beq 	_TACOExit
.8674		c8		iny				iny
.8675		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8677		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8679		f0 51		beq $86cc			beq 	CalculateOperand
.867b		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.867d		f0 1f		beq $869e			beq 	_TACOIndirect
.867f		88		dey				dey 								; undo get of first character
.8680		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get operand
.8683		b1 30		lda ($30),y			lda 	(codePtr),y
.8685		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8687		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8689		d0 40		bne $86cb			bne 	_TACOExit
.868b		c8		iny				iny
.868c		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.868f		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8691		c9 58		cmp #$58			cmp 	#'X'
.8693		f0 36		beq $86cb			beq 	_TACOExit
.8695		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8697		c9 59		cmp #$59			cmp 	#'Y'
.8699		f0 30		beq $86cb			beq 	_TACOExit
.869b						_TACOSyntax:
.869b		4c 61 a4	jmp $a461			jmp 	SyntaxError
.869e						_TACOIndirect:
.869e		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get the operand
.86a1		b1 30		lda ($30),y			lda 	(codePtr),y
.86a3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86a5		f0 17		beq $86be			beq 	_TACOIndX
.86a7		20 70 93	jsr $9370			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86aa		b1 30		lda ($30),y			lda 	(codePtr),y
.86ac		a2 d1		ldx #$d1			ldx 	#AM_IND
.86ae		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86b0		d0 19		bne $86cb			bne 	_TACOExit
.86b2		c8		iny				iny
.86b3		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86b6		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86b8		d0 e1		bne $869b			bne 	_TACOSyntax
.86ba		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86bc		80 0d		bra $86cb			bra 	_TACOExit
.86be						_TACOIndX:
.86be		c8		iny				iny
.86bf		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86c2		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86c4		d0 d5		bne $869b			bne 	_TACOSyntax
.86c6		20 70 93	jsr $9370			jsr 	CheckRightBracket			; check )
.86c9		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86cb						_TACOExit:
.86cb		60		rts				rts
.86cc						CalculateOperand:
.86cc		48		pha				pha
.86cd		da		phx				phx
.86ce		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86d0		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.86d3		fa		plx				plx
.86d4		68		pla				pla
.86d5		60		rts				rts
.86d6						TACOCheckXY:
.86d6		b1 30		lda ($30),y			lda 	(codePtr),y
.86d8		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86da		c9 40		cmp #$40			cmp 	#$40
.86dc		d0 21		bne $86ff			bne 	_TCXYFail
.86de		b1 30		lda ($30),y			lda 	(codePtr),y
.86e0		18		clc				clc
.86e1		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86e3		85 37		sta $37				sta 	zTemp0+1
.86e5		c8		iny				iny
.86e6		b1 30		lda ($30),y			lda 	(codePtr),y
.86e8		c8		iny				iny
.86e9		85 36		sta $36				sta 	zTemp0
.86eb		5a		phy				phy 								; save position
.86ec		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.86ee		b1 36		lda ($36),y			lda 	(zTemp0),y
.86f0		d0 0c		bne $86fe			bne 	_TCXYPopFail
.86f2		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.86f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.86f6		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.86f8		f0 08		beq $8702			beq 	_TCXYFound
.86fa		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.86fc		f0 04		beq $8702			beq 	_TCXYFound
.86fe						_TCXYPopFail:
.86fe		7a		ply				ply
.86ff						_TCXYFail:
.86ff		a9 00		lda #$00			lda 	#0
.8701		60		rts				rts
.8702						_TCXYFound:
.8702		7a		ply				ply 								; restore position
.8703		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8705		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8706						BackloadProgram:
.8706		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.8709		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.870b		a9 66		lda #$66			lda 	#_BLLoad & $FF
.870d		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.8710		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8712		8d a2 07	sta $07a2			sta 	BackLoadPage
.8715		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8717		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.871a		a9 60		lda #$60			lda 	#(($6000) >> 8)
.871c		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.871f		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8722		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8725		a9 ff		lda #$ff			lda 	#$FF
.8727		8d fa ff	sta $fffa			sta 	$FFFA
.872a						_BPLoop:
.872a		a2 ff		ldx #$ff			ldx 	#$FF
.872c		20 9b 87	jsr $879b			jsr 	BLReadByte 					; read a byte
.872f		c9 00		cmp #$00			cmp 	#0
.8731		f0 2c		beq $875f			beq 	_BPExit 					; if 0 exit
.8733		30 2a		bmi $875f			bmi 	_BPExit 					; if -ve exit
.8735						_BPCopy:
.8735		e8		inx				inx  								; copy byte into the lineBuffer
.8736		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8739		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.873c		20 9b 87	jsr $879b			jsr 	BLReadByte 					; read next byte
.873f		30 0a		bmi $874b			bmi 	_BPEndLine 					; -ve = EOL
.8741		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8743		d0 02		bne $8747			bne 	_BPNotTab
.8745		a9 20		lda #$20			lda 	#' '
.8747						_BPNotTab:
.8747		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8749		b0 ea		bcs $8735			bcs 	_BPCopy 					; until a control character, should be 13 received.
.874b						_BPEndLine:
.874b		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.874e		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8751		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8754		f0 d4		beq $872a			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8756		20 7b 87	jsr $877b			jsr 	BLCheckLast 				; check last backload okay.
.8759		38		sec				sec 								; append not insert
.875a		20 55 a6	jsr $a655			jsr 	MemoryInsertLine 			; append to current program
.875d		80 cb		bra $872a			bra 	_BPLoop
.875f						_BPExit:
.875f		9c fa ff	stz $fffa			stz 	$FFFA
.8762		20 15 92	jsr $9215			jsr 	ClearSystem 				; clear variables etc.
.8765		60		rts				rts
.8766						_BLLoad:
>8766		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>876e		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.877b						BLCheckLast:
.877b		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.877e		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8781		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8784		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.8787		b0 0d		bcs $8796			bcs 	_BLCheckFail
.8789		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.878c		8d a5 07	sta $07a5			sta 	BackLoadLast
.878f		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.8792		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.8795		60		rts				rts
.8796						_BLCheckFail:
.8796		a9 02		lda #$02		lda	#2
.8798		4c 89 93	jmp $9389		jmp	ErrorHandler
.879b						BLReadByte:
.879b		da		phx				phx
.879c		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.879e		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.87a1		85 0b		sta $0b				sta 	8+3
.87a3		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87a6		85 36		sta $36				sta 	zTemp0
.87a8		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.87ab		85 37		sta $37				sta 	zTemp0+1
.87ad		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87af		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87b2		d0 0f		bne $87c3			bne 	_BLNoCarry
.87b4		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87b7		10 0a		bpl $87c3			bpl 	_BLNoCarry 					; need a new page
.87b9		48		pha				pha
.87ba		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87bc		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87bf		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87c2		68		pla				pla
.87c3						_BLNoCarry:
.87c3		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87c5		fa		plx				plx
.87c6		c9 00		cmp #$00			cmp 	#0
.87c8		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87c9						EditProgramCode:
.87c9		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87cc		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87cf		20 f9 a6	jsr $a6f9			jsr 	MemorySearch
.87d2		90 05		bcc $87d9			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87d4		d0 03		bne $87d9			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87d6		20 1e a6	jsr $a61e			jsr 	MemoryDeleteLine 			; delete the line
.87d9						_EPCNoDelete:
.87d9		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87dc		c9 80		cmp #$80			cmp 	#KWC_EOL
.87de		f0 0d		beq $87ed			beq 	_EPCNoInsert
.87e0		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87e3		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87e6		20 f9 a6	jsr $a6f9			jsr 	MemorySearch
.87e9		18		clc				clc 								; insert at this point.
.87ea		20 55 a6	jsr $a655			jsr 	MemoryInsertLine 			; insert the line
.87ed						_EPCNoInsert:
.87ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87ee						WarmStart:
.87ee		a2 ff		ldx #$ff			ldx 	#$FF
.87f0		9a		txs				txs
.87f1		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.87f3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87f6		20 b5 81	jsr $81b5			jsr 	EXTInputLine 				; get line to lineBuffer
.87f9		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.87fc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.87ff		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8802		d0 17		bne $881b			bne 	_WSEditCode 				; if so,edit code.
.8804		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8807		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8809		85 30		sta $30				sta 	codePtr
.880b		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.880d		85 31		sta $31				sta 	codePtr+1
.880f		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8812		c9 80		cmp #$80			cmp 	#KWC_EOL
.8814		f0 d8		beq $87ee			beq 	WarmStart
.8816		20 71 8f	jsr $8f71			jsr 	RUNCodePointerLine 			; execute that line.
.8819		80 d3		bra $87ee			bra 	WarmStart
.881b						_WSEditCode:
.881b		20 c9 87	jsr $87c9			jsr 	EditProgramCode 			; edit the program code
.881e		20 15 92	jsr $9215			jsr 	ClearSystem 				; clear all variables etc.
.8821		80 cb		bra $87ee			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8823						AssembleCommand:
.8823		a2 00		ldx #$00			ldx 	#0
.8825		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; start address
.8828		a5 58		lda $58				lda 	NSMantissa0
.882a		8d 1a 04	sta $041a			sta 	AssemblerAddress
.882d		a5 60		lda $60				lda 	NSMantissa1
.882f		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8832		20 78 93	jsr $9378			jsr 	CheckComma
.8835		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; options 0-3
.8838		a5 58		lda $58				lda 	NSMantissa0
.883a		8d 1c 04	sta $041c			sta 	AssemblerControl
.883d		60		rts				rts
.883e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.883f						AssertCommand:
.883f		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8841		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; the assert test
.8844		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; exit if result is non zero.
.8847		d0 05		bne $884e			bne 	_ACExit
.8849		a9 0a		lda #$0a		lda	#10
.884b		4c 89 93	jmp $9389		jmp	ErrorHandler
.884e						_ACExit:
.884e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.884f						CallCommand:
.884f		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8851		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.8854						_CCClear
.8854		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8855		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; these are optional sequentially.
.8858		e0 04		cpx #$04			cpx 	#4
.885a		d0 f8		bne $8854			bne 	_CCClear
.885c		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.885e						_CCCParam:
.885e		b1 30		lda ($30),y			lda 	(codePtr),y
.8860		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8862		d0 09		bne $886d			bne 	_CCCRun6502
.8864		c8		iny				iny 								; skip comma
.8865		e8		inx				inx	 								; next level
.8866		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8869		e0 03		cpx #$03			cpx 	#3
.886b		90 f1		bcc $885e			bcc 	_CCCParam 					; done all 3 ?
.886d						_CCCRun6502:
.886d		5a		phy				phy 								; save position
.886e		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8870		85 37		sta $37				sta 	zTemp0+1
.8872		a5 58		lda $58				lda 	NSMantissa0
.8874		85 36		sta $36				sta 	zTemp0
.8876		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8878		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.887a		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.887c		20 81 88	jsr $8881			jsr 	_CCCZTemp0 					; call zTemp0
.887f		7a		ply				ply 								; restore position and exit
.8880		60		rts				rts
.8881						_CCCZTemp0:
.8881		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8884						Command_Data:
.8884		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8886		a2 80		ldx #$80			ldx 	#KWC_EOL
.8888		20 cb 92	jsr $92cb			jsr 	ScanForward
.888b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.888c						DimCommand:
.888c		b1 30		lda ($30),y			lda 	(codePtr),y
.888e		29 c0		and #$c0			and 	#$C0
.8890		c9 40		cmp #$40			cmp 	#$40
.8892		d0 7a		bne $890e			bne 	_DCSyntax 				; n o, error.
.8894		b1 30		lda ($30),y			lda 	(codePtr),y
.8896		18		clc				clc
.8897		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8899		85 3f		sta $3f				sta 	zaTemp+1
.889b		c8		iny				iny
.889c		b1 30		lda ($30),y			lda 	(codePtr),y
.889e		c8		iny				iny
.889f		85 3e		sta $3e				sta 	zaTemp
.88a1		5a		phy				phy
.88a2		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88a4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88a6		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88a8		c9 18		cmp #$18			cmp 	#NSTProcedure
.88aa		f0 62		beq $890e			beq 	_DCSyntax
.88ac		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88ae		29 04		and #$04			and 	#NSBIsArray
.88b0		f0 64		beq $8916			beq 	_DCType
.88b2		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88b4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88b6		d0 59		bne $8911			bne 	_DCRedefine
.88b8		7a		ply				ply
.88b9		20 19 89	jsr $8919			jsr 	_DCGetSize 				; get array size, check it.
.88bc		5a		phy				phy
.88bd		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88bf		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88c1		7a		ply				ply 							; is there a second (e.g. ,x)
.88c2		b1 30		lda ($30),y			lda 	(codePtr),y
.88c4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88c6		d0 0a		bne $88d2			bne 	_DCOneDimension
.88c8		c8		iny				iny 							; skip comma
.88c9		20 19 89	jsr $8919			jsr 	_DCGetSize 				; get 2nd array size
.88cc		5a		phy				phy
.88cd		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88cf		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88d1		7a		ply				ply
.88d2						_DCOneDimension:
.88d2		5a		phy				phy 							; save position
.88d3		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88d5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88d7		aa		tax				tax
.88d8		c8		iny				iny
.88d9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88db		e8		inx				inx 							; bump them.
.88dc		1a		inc a				inc 	a
.88dd		20 94 a2	jsr $a294			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.88e0		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.88e2		29 e0		and #$e0			and 	#$E0
.88e4		d0 23		bne $8909			bne 	_DCSize
.88e6		a0 02		ldy #$02			ldy 	#2 						; get base type
.88e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ea		20 27 89	jsr $8927			jsr 	ScaleByBaseType 		; scale by base type
.88ed		a5 36		lda $36				lda 	zTemp0
.88ef		a6 37		ldx $37				ldx 	zTemp0+1
.88f1		20 8b 9e	jsr $9e8b			jsr 	AllocateXABytes 		; allocate memory
.88f4		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.88f6		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88f8		c8		iny				iny
.88f9		8a		txa				txa
.88fa		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88fc		7a		ply				ply 							; get position back
.88fd		20 70 93	jsr $9370			jsr 	CheckRightBracket 		; check )
.8900		b1 30		lda ($30),y			lda 	(codePtr),y
.8902		c8		iny				iny 							; consume in case
.8903		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8905		f0 85		beq $888c			beq 	DimCommand
.8907		88		dey				dey 							; undo consume
.8908		60		rts				rts
.8909						_DCSize:
.8909		a9 16		lda #$16		lda	#22
.890b		4c 89 93	jmp $9389		jmp	ErrorHandler
.890e						_DCSyntax:
.890e		4c 61 a4	jmp $a461			jmp 	SyntaxError
.8911						_DCRedefine:
.8911		a9 15		lda #$15		lda	#21
.8913		4c 89 93	jmp $9389		jmp	ErrorHandler
.8916						_DCType:
.8916		4c 6b a4	jmp $a46b			jmp 	TypeError
.8919						_DCGetSize:
.8919		a2 00		ldx #$00			ldx 	#0 						; get first index.
.891b		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 	; get array dimension
.891e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8920		f0 e7		beq $8909			beq 	_DCSize
.8922		c9 fe		cmp #$fe			cmp 	#254
.8924		f0 e3		beq $8909			beq 	_DCSize
.8926		60		rts				rts
.8927						ScaleByBaseType:
.8927		29 10		and #$10			and 	#NSBIsString 			; is it string
.8929		d0 19		bne $8944			bne 	_SBBTString
.892b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.892d		48		pha				pha
.892e		a5 36		lda $36				lda 	zTemp0
.8930		48		pha				pha
.8931		06 36		asl $36				asl 	zTemp0 					; x 2
.8933		26 37		rol $37				rol 	zTemp0+1
.8935		06 36		asl $36				asl 	zTemp0 					; x 4
.8937		26 37		rol $37				rol 	zTemp0+1
.8939		68		pla				pla 							; add stacked value = x 5
.893a		65 36		adc $36				adc 	zTemp0
.893c		85 36		sta $36				sta 	zTemp0
.893e		68		pla				pla
.893f		65 37		adc $37				adc 	zTemp0+1
.8941		85 37		sta $37				sta 	zTemp0+1
.8943		60		rts				rts
.8944						_SBBTString:
.8944		06 36		asl $36				asl 	zTemp0
.8946		26 37		rol $37				rol 	zTemp0+1
.8948		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8949						EndCommand:
.8949		4c ee 87	jmp $87ee			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.894c						ForCommand:
.894c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.894e		20 0d b3	jsr $b30d			jsr 	StackOpen
.8951		a2 00		ldx #$00			ldx 	#0
.8953		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm
.8956		b5 50		lda $50,x			lda 	NSStatus,x
.8958		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.895a		d0 47		bne $89a3			bne		_FCError
.895c		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.895e		20 80 93	jsr $9380			jsr 	CheckNextA
.8961		e8		inx				inx
.8962		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; <from> in +1
.8965		b1 30		lda ($30),y			lda 	(codePtr),y
.8967		c8		iny				iny 								; consume it
.8968		48		pha				pha 								; save on stack for later
.8969		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.896b		f0 04		beq $8971			beq 	_FCNoSyntax
.896d		c9 dc		cmp #$dc			cmp 	#KWD_TO
.896f		d0 35		bne $89a6			bne 	_FCSyntaxError
.8971						_FCNoSyntax:
.8971		e8		inx				inx
.8972		20 56 a2	jsr $a256			jsr 	EvaluateInteger
.8975		20 52 b3	jsr $b352			jsr 	STKSaveCodePosition 		; save loop back position
.8978		68		pla				pla 								; restore DOWNTO or TO
.8979		5a		phy				phy 								; save Y on the stack
.897a		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.897c		f0 02		beq $8980			beq 	_FCNotDownTo
.897e		a9 02		lda #$02			lda 	#2
.8980						_FCNotDownTo:
.8980		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8981		a0 10		ldy #$10			ldy 	#16
.8983		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8985		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8987		a5 58		lda $58				lda 	NSMantissa0
.8989		91 34		sta ($34),y			sta 	(basicStack),y
.898b		a5 60		lda $60				lda 	NSMantissa1
.898d		c8		iny				iny
.898e		91 34		sta ($34),y			sta 	(basicStack),y
.8990		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8992		a2 01		ldx #$01			ldx 	#1
.8994		20 a9 89	jsr $89a9			jsr 	FCIntegerToStack
.8997		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8999		a2 02		ldx #$02			ldx 	#2
.899b		20 a9 89	jsr $89a9			jsr 	FCIntegerToStack
.899e		20 c4 89	jsr $89c4			jsr 	CopyIndexToReference
.89a1		7a		ply				ply 								; restore position
.89a2		60		rts				rts
.89a3						_FCError:
.89a3		4c 6b a4	jmp $a46b			jmp 	TypeError
.89a6						_FCSyntaxError:
.89a6		4c 61 a4	jmp $a461			jmp 	SyntaxError
.89a9						FCIntegerToStack:
.89a9		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89ab		10 03		bpl $89b0			bpl	 	_FCNotNegative
.89ad		20 b2 a2	jsr $a2b2			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89b0						_FCNotNegative:
.89b0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89b2		91 34		sta ($34),y			sta 	(basicStack),y
.89b4		c8		iny				iny
.89b5		b5 60		lda $60,x			lda 	NSMantissa1,x
.89b7		91 34		sta ($34),y			sta 	(basicStack),y
.89b9		c8		iny				iny
.89ba		b5 68		lda $68,x			lda 	NSMantissa2,x
.89bc		91 34		sta ($34),y			sta 	(basicStack),y
.89be		c8		iny				iny
.89bf		b5 70		lda $70,x			lda 	NSMantissa3,x
.89c1		91 34		sta ($34),y			sta 	(basicStack),y
.89c3		60		rts				rts
.89c4						CopyIndexToReference:
.89c4		5a		phy				phy
.89c5		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89c7		38		sec				sec 								; (because we copy from offset 8)
.89c8		b1 34		lda ($34),y			lda 	(basicStack),y
.89ca		e9 08		sbc #$08			sbc 	#8
.89cc		85 36		sta $36				sta 	zTemp0
.89ce		c8		iny				iny
.89cf		b1 34		lda ($34),y			lda 	(basicStack),y
.89d1		e9 00		sbc #$00			sbc 	#0
.89d3		85 37		sta $37				sta 	zTemp0+1
.89d5		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89d7		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89d9		b1 34		lda ($34),y			lda 	(basicStack),y
.89db		0a		asl a				asl 	a 							; into carry
.89dc		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89de		90 14		bcc $89f4			bcc 	_CITRNormal
.89e0		38		sec				sec
.89e1						_CITRNegative:
.89e1		a9 00		lda #$00			lda 	#0
.89e3		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89e5		91 36		sta ($36),y			sta 	(zTemp0),y
.89e7		c8		iny				iny
.89e8		ca		dex				dex
.89e9		d0 f6		bne $89e1			bne 	_CITRNegative
.89eb		88		dey				dey 								; look at MSB of mantissa
.89ec		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89ee		09 80		ora #$80			ora 	#$80
.89f0		91 36		sta ($36),y			sta 	(zTemp0),y
.89f2		7a		ply				ply
.89f3		60		rts				rts
.89f4						_CITRNormal:
.89f4		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89f6		91 36		sta ($36),y			sta 	(zTemp0),y
.89f8		c8		iny				iny
.89f9		ca		dex				dex
.89fa		d0 f8		bne $89f4			bne 	_CITRNormal
.89fc		7a		ply				ply 								; and exit.
.89fd		60		rts				rts
.89fe						NextCommand:
.89fe		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a00		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a02		20 3a b3	jsr $b33a			jsr 	StackCheckFrame
.8a05		5a		phy				phy
.8a06		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a08		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0a		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a0c		30 02		bmi $8a10			bmi 	_NCStepNeg
.8a0e		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a10						_NCStepNeg:
.8a10		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a12		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a14		18		clc				clc
.8a15						_NCBump:
.8a15		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a17		91 34		sta ($34),y			sta 	(basicStack),y
.8a19		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a1b		c8		iny				iny 								; next byte
.8a1c		ca		dex				dex 								; do four times
.8a1d		d0 f6		bne $8a15			bne 	_NCBump
.8a1f		20 c4 89	jsr $89c4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a22		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a24		b1 34		lda ($34),y			lda 	(basicStack),y
.8a26		0a		asl a				asl 	a 							; sign bit to carry
.8a27		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a29		85 38		sta $38				sta 	zTemp1
.8a2b		90 02		bcc $8a2f			bcc 	_NCCompRev 					; use if step is +ve
.8a2d		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a2f						_NCCompRev:
.8a2f		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a31		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a33		85 39		sta $39				sta 	zTemp1+1
.8a35		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a37		38		sec				sec
.8a38						_NCCompare:
.8a38		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a3a		b1 34		lda ($34),y			lda 	(basicStack),y
.8a3c		a4 39		ldy $39				ldy 	zTemp1+1
.8a3e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a40		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a42		e6 39		inc $39				inc 	zTemp1+1
.8a44		ca		dex				dex 								; do it 4 times.
.8a45		d0 f1		bne $8a38			bne 	_NCCompare
.8a47		50 02		bvc $8a4b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a49		49 80		eor #$80			eor 	#$80
.8a4b						_NCNoOverflow:
.8a4b		7a		ply				ply 								; restore Y position
.8a4c		0a		asl a				asl 	a 							; is bit 7 set.
.8a4d		90 04		bcc $8a53			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a4f		20 2c b3	jsr $b32c			jsr 	StackClose 					; exit the loop
.8a52		60		rts				rts
.8a53						_NCLoopBack:
.8a53		20 63 b3	jsr $b363			jsr 	STKLoadCodePosition 		; loop back
.8a56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a57						Command_GOSUB:
.8a57		a2 00		ldx #$00			ldx 	#0
.8a59		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a5c		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a5e		20 0d b3	jsr $b30d			jsr 	StackOpen 					; create frame
.8a61		20 52 b3	jsr $b352			jsr 	STKSaveCodePosition 		; save current position
.8a64		4c 7a 8a	jmp $8a7a			jmp 	GotoStackX
.8a67						Command_RETURN:
.8a67		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a69		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a6b		20 3a b3	jsr $b33a			jsr 	StackCheckFrame
.8a6e		20 63 b3	jsr $b363			jsr 	STKLoadCodePosition 		; restore code position
.8a71		20 2c b3	jsr $b32c			jsr 	StackClose
.8a74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a75						GotoCommand:
.8a75		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a77		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.8a7a						GotoStackX:
.8a7a		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a7c		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a7d		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a7f		fa		plx				plx
.8a80		20 f9 a6	jsr $a6f9			jsr 	MemorySearch 				; transfer to line number AX.
.8a83		90 05		bcc $8a8a			bcc 	_GotoError 					; not found, off end.
.8a85		d0 03		bne $8a8a			bne 	_GotoError 					; not found exactly
.8a87		4c 6a 8f	jmp $8f6a			jmp 	RunNewLine 					; and go straight to new line code.
.8a8a						_GotoError:
.8a8a		a9 0d		lda #$0d		lda	#13
.8a8c		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a8f						IfCommand:
.8a8f		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a91		20 37 a2	jsr $a237			jsr 	EvaluateNumber
.8a94		b1 30		lda ($30),y			lda 	(codePtr),y
.8a96		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a98		d0 0a		bne $8aa4			bne 	_IfStructured 				; we still support it.
.8a9a		c8		iny				iny 								; consume THEN
.8a9b		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; is it zero
.8a9e		f0 01		beq $8aa1			beq 	_IfFail 					; if fail, go to next line
.8aa0		60		rts				rts 								; if THEN just continue
.8aa1						_IfFail:
.8aa1		4c 45 8f	jmp $8f45			jmp 	EOLCommand
.8aa4						_IfStructured:
.8aa4		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; is it zero
.8aa7		d0 07		bne $8ab0			bne 	_IfExit 					; if not, then continue normally.
.8aa9		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8aab		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8aad		20 cb 92	jsr $92cb			jsr 	ScanForward 				; and run from there
.8ab0						_IfExit:
.8ab0		60		rts				rts
.8ab1						ElseCode:
.8ab1		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ab3		aa		tax				tax 								; so just go to the structure exit
.8ab4		20 cb 92	jsr $92cb			jsr 	ScanForward
.8ab7		60		rts				rts
.8ab8						EndIf:
.8ab8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ab9						Command_Input:
.8ab9		9c 24 04	stz $0424			stz 	isPrintFlag
.8abc		80 0c		bra $8aca			bra 	Command_IP_Main
.8abe						Command_CPrint:
.8abe		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ac0		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ac3		80 05		bra $8aca			bra 	Command_IP_Main
.8ac5						Command_Print:
.8ac5		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ac7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aca						Command_IP_Main:
.8aca		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8acb						_CPLoop:
.8acb		08		php				php 								; save last action flag
.8acc		b1 30		lda ($30),y			lda 	(codePtr),y
.8ace		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ad0		f0 54		beq $8b26			beq 	_CPExit
.8ad2		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ad4		f0 50		beq $8b26			beq 	_CPExit
.8ad6		68		pla				pla 								; throw last action flag
.8ad7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ad9		c8		iny				iny
.8ada		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8adc		f0 45		beq $8b23			beq 	_CPContinueWithSameLine
.8ade		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ae0		f0 3c		beq $8b1e			beq 	_CPTab
.8ae2		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ae4		f0 34		beq $8b1a			beq 	_CPNewLine
.8ae6		88		dey				dey 								; undo the get.
.8ae7		20 91 98	jsr $9891			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8aea		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8aec		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8aee		f0 0d		beq $8afd			beq 	_CPIsValue 					; no, display it.
.8af0		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8af3		d0 05		bne $8afa			bne 	_CPIsPrint 					; otherwise display.
.8af5		20 2f 8b	jsr $8b2f			jsr 	CIInputValue 				; input a value to the reference
.8af8		80 20		bra $8b1a			bra 	_CPNewLine
.8afa						_CPIsPrint:
.8afa		20 56 9b	jsr $9b56			jsr 	Dereference 				; dereference if required.
.8afd						_CPIsValue:
.8afd		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8aff		29 10		and #$10			and 	#NSBIsString
.8b01		f0 09		beq $8b0c			beq 	_CPNumber
.8b03		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b05		a5 58		lda $58				lda 	NSMantissa0
.8b07		20 92 8b	jsr $8b92			jsr 	CPPrintStringXA
.8b0a		80 be		bra $8aca			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b0c						_CPNumber:
.8b0c		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b0e		20 1e a1	jsr $a11e			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b11		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b13		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b15		20 92 8b	jsr $8b92			jsr 	CPPrintStringXA 			; print it.
.8b18		80 b0		bra $8aca			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b1a						_CPNewLine:
.8b1a		a9 0d		lda #$0d			lda 	#13
.8b1c		80 02		bra $8b20			bra 	_CPPrintCharDirect
.8b1e						_CPTab:
.8b1e		a9 09		lda #$09			lda 	#9 							; print TAB
.8b20						_CPPrintCharDirect:
.8b20		20 ad 8b	jsr $8bad			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b23						_CPContinueWithSameLine:
.8b23		38		sec				sec 								; loop round with carry set, which
.8b24		80 a5		bra $8acb			bra 	_CPLoop 					; will inhibit final CR
.8b26						_CPExit:
.8b26		28		plp				plp 								; get last action flag
.8b27		b0 05		bcs $8b2e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b29		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b2b		20 ad 8b	jsr $8bad			jsr 	CPPVControl
.8b2e						_CPExit2:
.8b2e		60		rts				rts
.8b2f						CIInputValue:
.8b2f		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b31						_CIInputLine:
.8b31		20 b0 8b	jsr $8bb0			jsr 	CPInputVector 				; get key
.8b34		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b36		f0 1f		beq $8b57			beq 	_CIHaveValue
.8b38		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b3a		f0 11		beq $8b4d			beq 	_CIBackspace
.8b3c		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b3e		90 f1		bcc $8b31			bcc 	_CIInputLine
.8b40		e0 50		cpx #$50			cpx 	#80 						; max length
.8b42		b0 ed		bcs $8b31			bcs 	_CIInputLine
.8b44		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b47		e8		inx				inx
.8b48		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b4b		80 e4		bra $8b31			bra 	_CIInputLine
.8b4d						_CIBackspace:
.8b4d		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b4f		f0 e0		beq $8b31			beq 	_CIInputLine
.8b51		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b54		ca		dex				dex
.8b55		80 da		bra $8b31			bra 	_CIInputLine
.8b57						_CIHaveValue:
.8b57		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b5a		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b5c		29 10		and #$10			and 	#NSBIsString
.8b5e		f0 17		beq $8b77			beq 	_CIAssignNumber 			; assign a number
.8b60		a2 01		ldx #$01			ldx 	#1
.8b62		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b64		95 58		sta $58,x			sta 	NSMantissa0,x
.8b66		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b68		95 60		sta $60,x			sta 	NSMantissa1,x
.8b6a		74 68		stz $68,x			stz 	NSMantissa2,x
.8b6c		74 70		stz $70,x			stz 	NSMantissa3,x
.8b6e		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b70		95 50		sta $50,x			sta  	NSStatus,x
.8b72		ca		dex				dex 								; X = 0
.8b73		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8b76		60		rts				rts
.8b77						_CIAssignNumber:
.8b77		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b79		85 36		sta $36				sta 	zTemp0
.8b7b		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b7d		85 37		sta $37				sta 	zTemp0+1
.8b7f		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b81		20 fe 9f	jsr $9ffe			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b84		90 07		bcc $8b8d			bcc 	_CIIsOkay
.8b86		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b88		20 a5 8b	jsr $8ba5			jsr 	CPPrintVector
.8b8b		80 a2		bra $8b2f			bra 	CIInputValue
.8b8d						_CIIsOkay:
.8b8d		ca		dex				dex 								; X = 0
.8b8e		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8b91		60		rts				rts
.8b92						CPPrintStringXA:
.8b92		5a		phy				phy
.8b93		86 37		stx $37				stx 	zTemp0+1
.8b95		85 36		sta $36				sta 	zTemp0
.8b97		a0 00		ldy #$00			ldy 	#0
.8b99						_PSXALoop:
.8b99		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b9b		f0 06		beq $8ba3			beq 	_PSXAExit
.8b9d		20 a5 8b	jsr $8ba5			jsr 	CPPrintVector
.8ba0		c8		iny				iny
.8ba1		80 f6		bra $8b99			bra 	_PSXALoop
.8ba3						_PSXAExit:
.8ba3		7a		ply				ply
.8ba4		60		rts				rts
.8ba5						CPPrintVector:
.8ba5		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8ba8		30 03		bmi $8bad			bmi 	CPPVControl
.8baa		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bad						CPPVControl:
.8bad		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bb0						CPInputVector:
.8bb0		4c ad 81	jmp $81ad			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bb3						LetCommand:
.8bb3		a2 00		ldx #$00			ldx 	#0
.8bb5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bb7		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8bb9		d0 14		bne $8bcf			bne 	_LCStandard
.8bbb		c8		iny				iny 								; skip equal
.8bbc		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bbf		20 56 9b	jsr $9b56			jsr 	Dereference 				; dereference it to a value
.8bc2		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bc4		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bc6		95 50		sta $50,x			sta 	NSStatus,x
.8bc8		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bca		d0 0f		bne $8bdb			bne 	_LCMain
.8bcc		4c 6b a4	jmp $a46b			jmp 	TypeError 					; was a reference before.
.8bcf						_LCStandard:
.8bcf		ad 7b 98	lda $987b			lda 	PrecedenceLevel+"*"			; precedence > this
.8bd2		20 95 98	jsr $9895			jsr 	EvaluateExpressionAtPrecedence
.8bd5		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bd7		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bd9		f0 0e		beq $8be9			beq 	_LetGoProc 					; it's a procedure call.
.8bdb						_LCMain:
.8bdb		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bdd		20 80 93	jsr $9380			jsr 	CheckNextA
.8be0		e8		inx				inx 								; RHS
.8be1		20 2e a2	jsr $a22e			jsr 	EvaluateValue
.8be4		ca		dex				dex
.8be5		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8be8		60		rts				rts
.8be9						_LetGoProc:
.8be9		4c 1b 8e	jmp $8e1b			jmp 	CallProcedure
.8bec						AssignVariable:
.8bec		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bee		48		pha				pha 								; save a copy
.8bef		55 51		eor $51,x			eor 	NSStatus+1,x
.8bf1		29 10		and #$10			and 	#NSBIsString
.8bf3		d0 0b		bne $8c00			bne 	_ASError
.8bf5		68		pla				pla 								; get back
.8bf6		29 10		and #$10			and 	#NSBIsString 				; check type
.8bf8		d0 03		bne $8bfd			bne 	_ASString
.8bfa		4c 94 9a	jmp $9a94			jmp 	AssignNumber
.8bfd						_ASString:
.8bfd		4c f2 9a	jmp $9af2			jmp 	AssignString
.8c00						_ASError:
.8c00		4c 6b a4	jmp $a46b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c03						Command_List:
.8c03		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c06		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c08		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c0b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c0d		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c0f		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c11		f0 72		beq $8c85			beq 	_CLListProcedure
.8c13		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c15		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c17		a9 ff		lda #$ff			lda 	#$FF
.8c19		85 5f		sta $5f				sta 	NSMantissa0+7
.8c1b		85 67		sta $67				sta 	NSMantissa1+7
.8c1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c1f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c21		f0 1a		beq $8c3d			beq 	_CLSecond
.8c23		20 02 8d	jsr $8d02			jsr 	CLIsDigit 					; if not digit, list all
.8c26		b0 20		bcs $8c48			bcs 	_CLStart
.8c28		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c2a		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c31		f0 0a		beq $8c3d			beq 	_CLSecond 					; if so go get it
.8c33		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c35		85 5f		sta $5f				sta 	NSMantissa0+7
.8c37		a5 64		lda $64				lda 	NSMantissa1+4
.8c39		85 67		sta $67				sta 	NSMantissa1+7
.8c3b		80 0b		bra $8c48			bra 	_CLStart
.8c3d						_CLSecond:
.8c3d		c8		iny				iny 								; consume comma
.8c3e		20 02 8d	jsr $8d02			jsr 	CLIsDigit 					; digit found
.8c41		b0 05		bcs $8c48			bcs 	_CLStart 					; if not, continue listing
.8c43		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c45		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.8c48						_CLStart
.8c48		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c4a		85 30		sta $30				sta 	codePtr
.8c4c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c4e		85 31		sta $31				sta 	codePtr+1
.8c50						_CLLoop:
.8c50		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c52		f0 03		beq $8c57			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c54		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8c57						_NoEvents:
.8c57		d0 27		bne $8c80			bne 	_CLBreak
.8c59		b2 30		lda ($30)			lda 	(codePtr)
.8c5b		f0 20		beq $8c7d			beq 	_CLExit
.8c5d		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c5f		20 f1 8c	jsr $8cf1			jsr 	CLCompareLineNo
.8c62		90 0c		bcc $8c70			bcc 	_CLNext
.8c64		a2 07		ldx #$07			ldx 	#7
.8c66		20 f1 8c	jsr $8cf1			jsr 	CLCompareLineNo
.8c69		f0 02		beq $8c6d			beq 	_CLDoThisOne
.8c6b		b0 03		bcs $8c70			bcs 	_CLNext
.8c6d						_CLDoThisOne:
.8c6d		20 de 8c	jsr $8cde			jsr 	CLListOneLine 				; routine to list the current line.
.8c70						_CLNext:
.8c70		18		clc				clc
.8c71		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c73		65 30		adc $30				adc 	codePtr
.8c75		85 30		sta $30				sta 	codePtr
.8c77		90 02		bcc $8c7b			bcc 	_CREExit
.8c79		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c7b						_CREExit:
.8c7b		80 d3		bra $8c50			bra 	_CLLoop
.8c7d						_CLExit:
.8c7d		4c ee 87	jmp $87ee			jmp 	WarmStart
.8c80						_CLBreak:
.8c80		a9 01		lda #$01		lda	#1
.8c82		4c 89 93	jmp $9389		jmp	ErrorHandler
.8c85						_CLListProcedure:
.8c85		b1 30		lda ($30),y			lda 	(codePtr),y
.8c87		85 38		sta $38				sta 	zTemp1
.8c89		c8		iny				iny
.8c8a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8c		85 39		sta $39				sta 	zTemp1+1
.8c8e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c90		85 30		sta $30				sta 	codePtr
.8c92		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c94		85 31		sta $31				sta 	codePtr+1
.8c96						_CLLPSearch:
.8c96		b2 30		lda ($30)			lda 	(codePtr)
.8c98		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c9a		f0 e1		beq $8c7d			beq 	_CLExit
.8c9c		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca0		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8ca2		d0 0e		bne $8cb2			bne 	_CLLPNext
.8ca4		c8		iny				iny 								; check if PROC this.
.8ca5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca7		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8ca9		d0 07		bne $8cb2			bne 	_CLLPNext
.8cab		c8		iny				iny
.8cac		b1 30		lda ($30),y			lda 	(codePtr),y
.8cae		c5 39		cmp $39				cmp 	zTemp1+1
.8cb0		f0 0d		beq $8cbf			beq 	_CLLPFound
.8cb2						_CLLPNext:
.8cb2		18		clc				clc
.8cb3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cb5		65 30		adc $30				adc 	codePtr
.8cb7		85 30		sta $30				sta 	codePtr
.8cb9		90 02		bcc $8cbd			bcc 	_CREExit
.8cbb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cbd						_CREExit:
.8cbd		80 d7		bra $8c96			bra 	_CLLPSearch
.8cbf						_CLLPFound:
.8cbf		b2 30		lda ($30)			lda 	(codePtr)
.8cc1		f0 ba		beq $8c7d			beq 	_CLExit
.8cc3		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc7		48		pha				pha
.8cc8		20 de 8c	jsr $8cde			jsr 	CLListOneLine 				; list line and go forward
.8ccb		18		clc				clc
.8ccc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cce		65 30		adc $30				adc 	codePtr
.8cd0		85 30		sta $30				sta 	codePtr
.8cd2		90 02		bcc $8cd6			bcc 	_CREExit
.8cd4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cd6						_CREExit:
.8cd6		68		pla				pla 								; reached ENDPROC ?
.8cd7		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8cd9		d0 e4		bne $8cbf			bne 	_CLLPFound
.8cdb		4c ee 87	jmp $87ee			jmp 	WarmStart
.8cde						CLListOneLine:
.8cde		20 2e 93	jsr $932e			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ce1		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ce4		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ce6		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8ce8		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.8ceb		a9 0d		lda #$0d			lda 	#13 						; new line
.8ced		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8cf0		60		rts				rts
.8cf1						CLCompareLineNo:
.8cf1		38		sec				sec
.8cf2		a0 01		ldy #$01			ldy 	#1
.8cf4		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf6		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cf8		85 36		sta $36				sta 	zTemp0
.8cfa		c8		iny				iny
.8cfb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cfd		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cff		05 36		ora $36				ora 	zTemp0
.8d01		60		rts				rts
.8d02						CLIsDigit:
.8d02		b1 30		lda ($30),y			lda 	(codePtr),y
.8d04		c9 30		cmp #$30			cmp 	#"0"
.8d06		90 03		bcc $8d0b			bcc	 	_CLIDExitFalse
.8d08		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d0a		60		rts				rts
.8d0b						_CLIDExitFalse:
.8d0b		38		sec				sec
.8d0c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d0d						Command_LOCAL:
.8d0d		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d0f		20 1b 8d	jsr $8d1b			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d12		b1 30		lda ($30),y			lda 	(codePtr),y
.8d14		c8		iny				iny
.8d15		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d17		f0 f4		beq $8d0d			beq 	Command_LOCAL 				; if so, localise another variable.
.8d19		88		dey				dey 								; unpick pre-get
.8d1a		60		rts				rts
.8d1b						LocaliseNextTerm:
.8d1b		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm 				; evaluate the term
.8d1e		b5 50		lda $50,x			lda 	NSStatus,x
.8d20		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d22		f0 5c		beq $8d80			beq		_LNTError
.8d24		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d26		85 36		sta $36				sta 	zTemp0
.8d28		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d2a		85 37		sta $37				sta  	zTemp0+1
.8d2c		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d2e		29 10		and #$10			and 	#NSBIsString
.8d30		d0 1e		bne $8d50			bne 	_LNTPushString
.8d32		5a		phy				phy
.8d33		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d35						_LNTPushNumLoop:
.8d35		b1 36		lda ($36),y			lda		(zTemp0),y
.8d37		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d3a		c8		iny				iny
.8d3b		c0 05		cpy #$05			cpy 	#5
.8d3d		d0 f6		bne $8d35			bne 	_LNTPushNumLoop
.8d3f		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d41		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d44		a5 37		lda $37				lda 	zTemp0+1
.8d46		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d49		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d4b		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d4e		7a		ply				ply
.8d4f		60		rts				rts
.8d50						_LNTPushString:
.8d50		5a		phy				phy
.8d51		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d53		85 38		sta $38				sta 	zTemp1
.8d55		a0 01		ldy #$01			ldy 	#1
.8d57		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d59		85 39		sta $39				sta 	zTemp1+1
.8d5b		a0 00		ldy #$00			ldy 	#0 							; output string
.8d5d		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d5f		f0 0a		beq $8d6b			beq 	_LNTStringOut
.8d61						_LNTPushStrLoop:
.8d61		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d63		f0 06		beq $8d6b			beq 	_LNTStringOut
.8d65		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d68		c8		iny				iny
.8d69		80 f6		bra $8d61			bra 	_LNTPushStrLoop
.8d6b						_LNTStringOut:
.8d6b		98		tya				tya									; output length (chars written).
.8d6c		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d71		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d74		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d76		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d79		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d7b		20 ec b2	jsr $b2ec			jsr 	StackPushByte
.8d7e		7a		ply				ply
.8d7f		60		rts				rts
.8d80						_LNTError:
.8d80		4c 61 a4	jmp $a461			jmp 	SyntaxError
.8d83						LocalPopValue:
.8d83		20 04 b3	jsr $b304			jsr 	StackPopByte
.8d86		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8d88		d0 17		bne $8da1			bne 	_LPVString
.8d8a		20 04 b3	jsr $b304			jsr 	StackPopByte 				; address
.8d8d		85 37		sta $37				sta 	zTemp0+1
.8d8f		20 04 b3	jsr $b304			jsr 	StackPopByte
.8d92		85 36		sta $36				sta 	zTemp0
.8d94		5a		phy				phy
.8d95		a0 04		ldy #$04			ldy 	#4 							; copy back
.8d97						_LPVNumberCopy:
.8d97		20 04 b3	jsr $b304			jsr 	StackPopByte
.8d9a		91 36		sta ($36),y			sta 	(zTemp0),y
.8d9c		88		dey				dey
.8d9d		10 f8		bpl $8d97			bpl 	_LPVNumberCopy
.8d9f		7a		ply				ply 								; and complete
.8da0		60		rts				rts
.8da1						_LPVString:
.8da1		20 04 b3	jsr $b304			jsr 	StackPopByte 				; address of record copied to zTemp0
.8da4		85 37		sta $37				sta 	zTemp0+1
.8da6		20 04 b3	jsr $b304			jsr 	StackPopByte
.8da9		85 36		sta $36				sta 	zTemp0
.8dab		5a		phy				phy
.8dac		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8dae		85 38		sta $38				sta 	zTemp1
.8db0		a0 01		ldy #$01			ldy 	#1
.8db2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8db4		85 39		sta $39				sta 	zTemp1+1
.8db6		20 04 b3	jsr $b304			jsr 	StackPopByte 				; # chars to get => y
.8db9		a8		tay				tay
.8dba		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8dbc		f0 0e		beq $8dcc			beq 	_LPVStringCopied
.8dbe		a9 00		lda #$00			lda 	#0 							; NULL on end
.8dc0		91 38		sta ($38),y			sta 	(zTemp1),y
.8dc2						_LPVStringCopy:
.8dc2		88		dey				dey
.8dc3		30 07		bmi $8dcc			bmi 	_LPVStringCopied
.8dc5		20 04 b3	jsr $b304			jsr 	StackPopByte
.8dc8		91 38		sta ($38),y			sta 	(zTemp1),y
.8dca		80 f6		bra $8dc2			bra 	_LPVStringCopy
.8dcc						_LPVStringCopied:
.8dcc		fa		plx				plx
.8dcd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8dce						NewCommand:
.8dce		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.8dd1		4c ee 87	jmp $87ee			jmp 	WarmStart 					; and warm starts straight away.
.8dd4						NewProgram:
.8dd4		20 db a6	jsr $a6db			jsr 	MemoryNew
.8dd7		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dda		20 15 92	jsr $9215			jsr 	ClearSystem					; clear everything.
.8ddd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8dde						PokeBCommand:
.8dde		a9 01		lda #$01			lda 	#1
.8de0		80 0c		bra $8dee			bra 	PokeCommand
.8de2						PokeWCommand:
.8de2		a9 02		lda #$02			lda 	#2
.8de4		80 08		bra $8dee			bra 	PokeCommand
.8de6						PokeLCommand:
.8de6		a9 03		lda #$03			lda 	#3
.8de8		80 04		bra $8dee			bra 	PokeCommand
.8dea						PokeDCommand:
.8dea		a9 04		lda #$04			lda 	#4
.8dec		80 00		bra $8dee			bra 	PokeCommand
.8dee						PokeCommand:
.8dee		48		pha				pha 								; save count on stack
.8def		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8df1		20 69 a2	jsr $a269			jsr		Evaluate16BitInteger 		; address
.8df4		20 78 93	jsr $9378			jsr 	CheckComma
.8df7		e8		inx				inx
.8df8		20 56 a2	jsr $a256			jsr		EvaluateInteger 			; data
.8dfb		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8dfd		85 36		sta $36				sta 	zTemp0
.8dff		a5 60		lda $60				lda 	NSMantissa1
.8e01		85 37		sta $37				sta 	zTemp0+1
.8e03		68		pla				pla 								; count -> zTemp1
.8e04		85 38		sta $38				sta 	zTemp1
.8e06		5a		phy				phy 								; save Y position.
.8e07		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e09		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e0b						_PCLoop:
.8e0b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e0d		91 36		sta ($36),y			sta 	(zTemp0),y
.8e0f		c8		iny				iny 								; next byte to write
.8e10		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e11		18		clc				clc
.8e12		69 08		adc #$08			adc 	#MathStackSize
.8e14		aa		tax				tax
.8e15		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e17		d0 f2		bne $8e0b			bne 	_PCLoop
.8e19		7a		ply				ply 								; restore position.
.8e1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e1b						CallProcedure:
.8e1b		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e21		f0 0c		beq $8e2f			beq 	_CPEndParam
.8e23						_CPParamLoop:
.8e23		20 2e a2	jsr $a22e			jsr 	EvaluateValue 				; get parameter onto stack
.8e26		e8		inx				inx 								; bump next stack
.8e27		b1 30		lda ($30),y			lda 	(codePtr),y
.8e29		c8		iny				iny
.8e2a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e2c		f0 f5		beq $8e23			beq 	_CPParamLoop
.8e2e		88		dey				dey 								; unpick.
.8e2f						_CPEndParam:
.8e2f		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e32		c8		iny				iny									; skip right bracket
.8e33		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e35		20 0d b3	jsr $b30d			jsr 	StackOpen
.8e38		20 52 b3	jsr $b352			jsr 	STKSaveCodePosition 		; save loop position
.8e3b		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e3d		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e3f		a5 60		lda $60				lda 	NSMantissa1
.8e41		85 37		sta $37				sta 	zTemp0+1
.8e43		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e45		b2 36		lda ($36)			lda 	(zTemp0)
.8e47		85 30		sta $30				sta 	safePtr
.8e49		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4b		85 31		sta $31				sta 	safePtr+1
.8e4d		c8		iny				iny
.8e4e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e50		85 32		sta $32				sta 	safePtr+2
.8e52		c8		iny				iny
.8e53		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e55		85 33		sta $33				sta 	safePtr+3
.8e57		c8		iny				iny 								; get Y offset -> Y
.8e58		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e5a		a8		tay				tay
.8e5b		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e5d		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e60		f0 13		beq $8e75			beq 	_ParamExit 					; if so, exit.
.8e62						_ParamExtract:
.8e62		ca		dex				dex 								; put a local term on the level before
.8e63		20 1b 8d	jsr $8d1b			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e66		20 ec 8b	jsr $8bec			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e69		e8		inx				inx 								; advance to next parameter to do.
.8e6a		e8		inx				inx
.8e6b		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e6e		f0 05		beq $8e75			beq 	_ParamExit
.8e70		20 78 93	jsr $9378			jsr 	CheckComma 					; comma seperating parameters
.8e73		80 ed		bra $8e62			bra 	_ParamExtract
.8e75						_ParamExit:
.8e75		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; check )
.8e78		60		rts				rts 								; and continue from here
.8e79						Command_ENDPROC:
.8e79		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e7b		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e7d		20 3a b3	jsr $b33a			jsr 	StackCheckFrame
.8e80		20 63 b3	jsr $b363			jsr 	STKLoadCodePosition 		; restore code position
.8e83		20 2c b3	jsr $b32c			jsr 	StackClose
.8e86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e87						Command_Read:
.8e87		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e89		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm
.8e8c		b5 50		lda $50,x			lda 	NSStatus,x
.8e8e		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e90		f0 4f		beq $8ee1			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8e92		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.8e95		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e98		d0 25		bne $8ebf			bne 	_CRContinueData  			; forward for the next one.
.8e9a		b2 30		lda ($30)			lda 	(codePtr)
.8e9c		f0 1c		beq $8eba			beq 	_CRNoData
.8e9e						_CRKeepSearching:
.8e9e		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8ea0		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ea2		20 cb 92	jsr $92cb			jsr 	ScanForward
.8ea5		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8ea7		f0 16		beq $8ebf			beq 	_CRHaveData 				; found it
.8ea9		18		clc				clc
.8eaa		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8eac		65 30		adc $30				adc 	codePtr
.8eae		85 30		sta $30				sta 	codePtr
.8eb0		90 02		bcc $8eb4			bcc 	_CREExit
.8eb2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8eb4						_CREExit:
.8eb4		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8eb6		b2 30		lda ($30)			lda 	(codePtr)
.8eb8		d0 e4		bne $8e9e			bne 	_CRKeepSearching
.8eba						_CRNoData:
.8eba		a9 0b		lda #$0b		lda	#11
.8ebc		4c 89 93	jmp $9389		jmp	ErrorHandler
.8ebf						_CRHaveData:
.8ebf						_CRContinueData:
.8ebf		a2 01		ldx #$01			ldx 	#1
.8ec1		20 2e a2	jsr $a22e			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ec4		ca		dex				dex
.8ec5		20 ec 8b	jsr $8bec			jsr		AssignVariable 				; do the assignment
.8ec8		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8ecb		b1 30		lda ($30),y			lda 	(codePtr),y
.8ecd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8ecf		d0 04		bne $8ed5			bne 	_CRSwapBack
.8ed1		c8		iny				iny 								; consume comma
.8ed2		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8ed5						_CRSwapBack:
.8ed5		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs			; swap them back.
.8ed8		b1 30		lda ($30),y			lda 	(codePtr),y
.8eda		c8		iny				iny
.8edb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8edd		f0 a8		beq $8e87			beq 	Command_Read 				; if so go round again.
.8edf		88		dey				dey 								; unpick get.
.8ee0		60		rts				rts
.8ee1						_CRSyntax:
.8ee1		4c 61 a4	jmp $a461			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ee4						RemCommand:
.8ee4		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee6		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ee8		d0 06		bne $8ef0			bne 	_RMExit
.8eea		c8		iny				iny 								; point to offset
.8eeb		98		tya				tya 								; A = offset position
.8eec		38		sec				sec 								; add size +1 hence SEC
.8eed		71 30		adc ($30),y			adc 	(codePtr),y
.8eef		a8		tay				tay 								; make current position.
.8ef0						_RMExit:
.8ef0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ef1						Command_REPEAT:
.8ef1		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ef3		20 0d b3	jsr $b30d			jsr 	StackOpen
.8ef6		20 52 b3	jsr $b352			jsr 	STKSaveCodePosition 		; save loop position
.8ef9		60		rts				rts
.8efa						Command_UNTIL:
.8efa		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8efc		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8efe		20 3a b3	jsr $b33a			jsr 	StackCheckFrame
.8f01		a2 00		ldx #$00			ldx 	#0
.8f03		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; work out the number
.8f06		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; check if zero
.8f09		f0 04		beq $8f0f			beq 	_CULoopBack 				; if so keep looping
.8f0b		20 2c b3	jsr $b32c			jsr 	StackClose		 			; return
.8f0e		60		rts				rts
.8f0f						_CULoopBack:
.8f0f		20 63 b3	jsr $b363			jsr 	STKLoadCodePosition 		; loop back
.8f12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f13						Command_Restore:
.8f13		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.8f16		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f18		85 30		sta $30				sta 	codePtr
.8f1a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f1c		85 31		sta $31				sta 	codePtr+1
.8f1e		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; put them back
.8f21		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f23		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f26		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f29		60		rts				rts
.8f2a						SwapDataCodePtrs:
.8f2a		da		phx				phx
.8f2b		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f2d						_SDCPLoop:
.8f2d		b5 30		lda $30,x			lda 	safePtr,x
.8f2f		48		pha				pha
.8f30		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f33		95 30		sta $30,x			sta 	safePtr,x
.8f35		68		pla				pla
.8f36		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f39		ca		dex				dex
.8f3a		10 f1		bpl $8f2d			bpl 	_SDCPLoop
.8f3c		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f3f		8c 17 04	sty $0417			sty 	dataPointer+4
.8f42		a8		tay				tay
.8f43		fa		plx				plx
.8f44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f45						EOLCommand:
.8f45		18		clc				clc
.8f46		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f48		65 30		adc $30				adc 	codePtr
.8f4a		85 30		sta $30				sta 	codePtr
.8f4c		90 02		bcc $8f50			bcc 	_CREExit
.8f4e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f50						_CREExit:
.8f50		80 18		bra $8f6a			bra 	RunNewLine
.8f52						CommandRUNOptLoad:
.8f52		b1 30		lda ($30),y			lda 	(codePtr),y
.8f54		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f56		f0 07		beq $8f5f			beq 	RunCurrentProgram
.8f58		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f5a		f0 03		beq $8f5f			beq 	RunCurrentProgram
.8f5c		20 bc ac	jsr $acbc			jsr 	LoadFile 					; load expected name file.
.8f5f						RunCurrentProgram:
.8f5f		20 15 92	jsr $9215			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f62		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f64		85 30		sta $30				sta 	codePtr
.8f66		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f68		85 31		sta $31				sta 	codePtr+1
.8f6a						RunNewLine:
.8f6a		b2 30		lda ($30)			lda 	(codePtr)
.8f6c		f0 74		beq $8fe2			beq 	CRNoProgram         		; no then END.
.8f6e		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f70		9a		txs				txs
.8f71						RUNCodePointerLine:
.8f71		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f73						_CRIncMainLoop:
.8f73		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f75		f0 03		beq $8f7a			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f77		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8f7a						_NoEvents:
.8f7a		d0 61		bne $8fdd			bne 	_CRBreak
.8f7c		a5 01		lda $01				lda 	1 							; save I/O 0
.8f7e		48		pha				pha
.8f7f		64 01		stz $01				stz 	1 							; access I/O Page 0
.8f81		38		sec				sec 								; calculate timer - LastTick
.8f82		ad 59 d6	lda $d659			lda 	$D659
.8f85		cd 5e 06	cmp $065e			cmp 	LastTick
.8f88		f0 06		beq $8f90			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8f8a		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8f8d		20 5c 82	jsr $825c			jsr 	TickHandler 							; go do the code.
.8f90						_NoFireTick:
.8f90		68		pla				pla 								; restore I/O 0
.8f91		85 01		sta $01				sta 	1
.8f93						_CRNoBreakCheck:
.8f93		c8		iny				iny									; next token
.8f94						_CRMainLoop:
.8f94		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f97		b1 30		lda ($30),y			lda 	(codePtr),y
.8f99		10 10		bpl $8fab			bpl 	_CRNotKeyword				; not a token.
.8f9b		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f9d		b0 04		bcs $8fa3			bcs 	_CRIsKeyword
.8f9f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fa1		b0 34		bcs $8fd7			bcs		_CRSyntaxError
.8fa3						_CRIsKeyword:
.8fa3		c8		iny				iny 								; consume command
.8fa4		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fa5		aa		tax				tax 								; put in X for vector jump
.8fa6		20 da 8f	jsr $8fda			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fa9		80 e9		bra $8f94			bra 	_CRMainLoop 				; and loop round
.8fab						_CRNotKeyword:
.8fab		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fad		f0 c4		beq $8f73			beq 	_CRIncMainLoop
.8faf		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fb1		90 05		bcc $8fb8			bcc 	_CRNotVariable
.8fb3						_CRGoLet:
.8fb3		20 b3 8b	jsr $8bb3			jsr 	LetCommand
.8fb6		80 dc		bra $8f94			bra 	_CRMainLoop
.8fb8						_CRNotVariable:
.8fb8		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.8fba		f0 f7		beq $8fb3			beq 	_CRGoLet
.8fbc		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fbe		f0 f3		beq $8fb3			beq 	_CRGoLet
.8fc0		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fc2		f0 ef		beq $8fb3			beq 	_CRGoLet
.8fc4		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fc6		f0 09		beq $8fd1			beq 	_CRGoRem
.8fc8		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fca		d0 0b		bne $8fd7			bne 	_CRSyntaxError
.8fcc		20 37 86	jsr $8637			jsr 	LabelHere
.8fcf		80 c3		bra $8f94			bra 	_CRMainLoop
.8fd1						_CRGoRem:
.8fd1		c8		iny				iny
.8fd2		20 e4 8e	jsr $8ee4			jsr 	RemCommand
.8fd5		80 bd		bra $8f94			bra 	_CRMainLoop
.8fd7						_CRSyntaxError:
.8fd7		4c 61 a4	jmp $a461			jmp 	SyntaxError
.8fda						_CRCallVector0:
.8fda		7c 78 90	jmp ($9078,x)			jmp 	(VectorSet0,x)
.8fdd						_CRBreak:
.8fdd		a9 01		lda #$01		lda	#1
.8fdf		4c 89 93	jmp $9389		jmp	ErrorHandler
.8fe2						CRNoProgram:
.8fe2		4c 49 89	jmp $8949			jmp 	EndCommand
.8fe5						Shift1Command:
.8fe5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe7		c8		iny				iny
.8fe8		0a		asl a				asl 	a
.8fe9		aa		tax				tax
.8fea		7c 32 91	jmp ($9132,x)			jmp 	(VectorSet1,x)
.8fed						Shift2Command:
.8fed		b1 30		lda ($30),y			lda 	(codePtr),y
.8fef		c8		iny				iny
.8ff0		0a		asl a				asl 	a
.8ff1		aa		tax				tax
.8ff2		7c 88 91	jmp ($9188,x)			jmp 	(VectorSet2,x)
.8ff5						Unused1:
.8ff5						Unused2:
.8ff5						Unused3:
.8ff5						Unused4:
.8ff5		4c 61 a4	jmp $a461			jmp 	SyntaxError
>8ff8								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8ff8						VectorSetPunc:
>8ff8		47 96					.word	ShiftLeft                        ; $00 <<
>8ffa		32 94					.word	BinaryCompareLessEqual           ; $01 <=
>8ffc		28 94					.word	BinaryCompareNotEqual            ; $02 <>
>8ffe		61 a4					.word	SyntaxError                      ; $03 !!3
>9000		61 a4					.word	SyntaxError                      ; $04 ><
>9002		3c 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9004		4a 96					.word	ShiftRight                       ; $06 >>
>9006		61 a4					.word	SyntaxError                      ; $07 !!7
>9008		61 a4					.word	SyntaxError                      ; $08 !!8
>900a		61 a4					.word	SyntaxError                      ; $09 !!9
>900c		61 a4					.word	SyntaxError                      ; $0a !!10
>900e		61 a4					.word	SyntaxError                      ; $0b !!11
>9010		61 a4					.word	SyntaxError                      ; $0c !!12
>9012		61 a4					.word	SyntaxError                      ; $0d !!13
>9014		61 a4					.word	SyntaxError                      ; $0e !!14
>9016		61 a4					.word	SyntaxError                      ; $0f !!15
>9018		61 a4					.word	SyntaxError                      ; $10 @
>901a		61 a4					.word	SyntaxError                      ; $11 !!17
>901c		61 a4					.word	SyntaxError                      ; $12 !!18
>901e		61 a4					.word	SyntaxError                      ; $13 [
>9020		f3 94					.word	IntegerDivide                    ; $14 \
>9022		61 a4					.word	SyntaxError                      ; $15 ]
>9024		85 97					.word	EorInteger                       ; $16 ^
>9026		61 a4					.word	SyntaxError                      ; $17 _
>9028		61 a4					.word	SyntaxError                      ; $18 `
>902a		61 a4					.word	SyntaxError                      ; $19 !!25
>902c		61 a4					.word	SyntaxError                      ; $1a !!26
>902e		61 a4					.word	SyntaxError                      ; $1b {
>9030		50 97					.word	OraInteger                       ; $1c |
>9032		61 a4					.word	SyntaxError                      ; $1d }
>9034		61 a4					.word	SyntaxError                      ; $1e ~
>9036		61 a4					.word	SyntaxError                      ; $1f <7F>
>9038		61 a4					.word	SyntaxError                      ; $20
>903a		ba 97					.word	WordIndirect                     ; $21 !
>903c		61 a4					.word	SyntaxError                      ; $22 "
>903e		61 a4					.word	SyntaxError                      ; $23 #
>9040		61 a4					.word	SyntaxError                      ; $24 $
>9042		34 95					.word	IntegerModulus                   ; $25 %
>9044		1b 97					.word	AndInteger                       ; $26 &
>9046		61 a4					.word	SyntaxError                      ; $27 '
>9048		61 a4					.word	SyntaxError                      ; $28 (
>904a		61 a4					.word	SyntaxError                      ; $29 )
>904c		a2 95					.word	MulInteger                       ; $2a *
>904e		bd 96					.word	AddInteger                       ; $2b +
>9050		61 a4					.word	SyntaxError                      ; $2c ,
>9052		f6 96					.word	SubInteger                       ; $2d -
>9054		61 a4					.word	SyntaxError                      ; $2e .
>9056		74 99					.word	FDivideCommand                   ; $2f /
>9058		61 a4					.word	SyntaxError                      ; $30 0
>905a		61 a4					.word	SyntaxError                      ; $31 1
>905c		61 a4					.word	SyntaxError                      ; $32 2
>905e		61 a4					.word	SyntaxError                      ; $33 3
>9060		61 a4					.word	SyntaxError                      ; $34 4
>9062		61 a4					.word	SyntaxError                      ; $35 5
>9064		61 a4					.word	SyntaxError                      ; $36 6
>9066		61 a4					.word	SyntaxError                      ; $37 7
>9068		61 a4					.word	SyntaxError                      ; $38 8
>906a		61 a4					.word	SyntaxError                      ; $39 9
>906c		61 a4					.word	SyntaxError                      ; $3a :
>906e		61 a4					.word	SyntaxError                      ; $3b ;
>9070		14 94					.word	BinaryCompareLess                ; $3c <
>9072		0a 94					.word	BinaryCompareEqual               ; $3d =
>9074		1e 94					.word	BinaryCompareGreater             ; $3e >
>9076		dc 97					.word	ByteIndirect                     ; $3f ?
.9078						VectorSet0:
>9078		45 8f					.word	EOLCommand                       ; $80 !0:EOF
>907a		e5 8f					.word	Shift1Command                    ; $81 !1:SH1
>907c		ed 8f					.word	Shift2Command                    ; $82 !2:SH2
>907e		5e 9e					.word	AbsUnary                         ; $83 ABS(
>9080		6c 9e					.word	AllocUnary                       ; $84 ALLOC(
>9082		dc 9e					.word	AscUnary                         ; $85 ASC(
>9084		2d a0					.word	ChrUnary                         ; $86 CHR$(
>9086		53 aa					.word	UnaryEvent                       ; $87 EVENT(
>9088		06 94					.word	UnaryFalse                       ; $88 FALSE
>908a		e9 9e					.word	FracUnary                        ; $89 FRAC(
>908c		6b b1					.word	ChrGet                           ; $8a GET$(
>908e		50 b1					.word	AscGet                           ; $8b GET(
>9090		fa b0					.word	UnaryGetDate                     ; $8c GETDATE$(
>9092		f6 b0					.word	UnaryGetTime                     ; $8d GETTIME$(
>9094		c3 a9					.word	UnaryHit                         ; $8e HIT(
>9096		72 b1					.word	ChrInkey                         ; $8f INKEY$(
>9098		60 b1					.word	AscInkey                         ; $90 INKEY(
>909a		fe 9e					.word	IntUnary                         ; $91 INT(
>909c		ec 9f					.word	IsValUnary                       ; $92 ISVAL(
>909e		3f a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90a0		63 a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90a2		cd ae					.word	UnaryJoyB                        ; $95 JOYB(
>90a4		a6 ae					.word	UnaryJoyX                        ; $96 JOYX(
>90a6		a9 ae					.word	UnaryJoyY                        ; $97 JOYY(
>90a8		8b b1					.word	KeyDown                          ; $98 KEYDOWN(
>90aa		a2 a1					.word	Unary_Left                       ; $99 LEFT$(
>90ac		0f 9f					.word	LenUnary                         ; $9a LEN(
>90ae		2d 9f					.word	Unary_Max                        ; $9b MAX(
>90b0		c4 a1					.word	Unary_Mid                        ; $9c MID$(
>90b2		29 9f					.word	Unary_Min                        ; $9d MIN(
>90b4		78 9f					.word	Unary_Not                        ; $9e NOT(
>90b6		8b 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90b8		97 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90ba		93 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90bc		8f 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90be		6a b2					.word	UnaryPlaying                     ; $a3 PLAYING(
>90c0		a5 b1					.word	Unary_Random                     ; $a4 RANDOM(
>90c2		af a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90c4		bf b1					.word	Unary_Rnd                        ; $a6 RND(
>90c6		c4 9f					.word	SgnUnary                         ; $a7 SGN(
>90c8		e1 a0					.word	SpcUnary                         ; $a8 SPC(
>90ca		fc a0					.word	Unary_Str                        ; $a9 STR$(
>90cc		61 a4					.word	SyntaxError                      ; $aa TILE(
>90ce		dd b0					.word	UnaryTimer                       ; $ab TIMER(
>90d0		fb 93					.word	UnaryTrue                        ; $ac TRUE
>90d2		e2 9f					.word	ValUnary                         ; $ad VAL(
>90d4		4c 89					.word	ForCommand                       ; $ae FOR
>90d6		8f 8a					.word	IfCommand                        ; $af IF
>90d8		f5 8f					.word	Unused1                          ; $b0 PROC
>90da		f1 8e					.word	Command_REPEAT                   ; $b1 REPEAT
>90dc		41 93					.word	Command_WHILE                    ; $b2 WHILE
>90de		b8 8a					.word	EndIf                            ; $b3 ENDIF
>90e0		79 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>90e2		fe 89					.word	NextCommand                      ; $b5 NEXT
>90e4		f5 8f					.word	Unused4                          ; $b6 THEN
>90e6		fa 8e					.word	Command_UNTIL                    ; $b7 UNTIL
>90e8		62 93					.word	Command_WEND                     ; $b8 WEND
>90ea		61 a4					.word	SyntaxError                      ; $b9 AT
>90ec		61 a4					.word	SyntaxError                      ; $ba BY
>90ee		4f 88					.word	CallCommand                      ; $bb CALL
>90f0		30 a7					.word	CircleCommand                    ; $bc CIRCLE
>90f2		61 a4					.word	SyntaxError                      ; $bd CLEAR
>90f4		61 a4					.word	SyntaxError                      ; $be COLOR
>90f6		61 a4					.word	SyntaxError                      ; $bf COLOUR
>90f8		84 88					.word	Command_Data                     ; $c0 DATA
>90fa		8c 88					.word	DimCommand                       ; $c1 DIM
>90fc		f5 8f					.word	Unused3                          ; $c2 DOWNTO
>90fe		b1 8a					.word	ElseCode                         ; $c3 ELSE
>9100		61 a4					.word	SyntaxError                      ; $c4 FROM
>9102		96 a9					.word	GfxCommand                       ; $c5 GFX
>9104		61 a4					.word	SyntaxError                      ; $c6 HERE
>9106		59 a7					.word	ImageCommand                     ; $c7 IMAGE
>9108		b3 8b					.word	LetCommand                       ; $c8 LET
>910a		ab a7					.word	LineCommand                      ; $c9 LINE
>910c		0d 8d					.word	Command_LOCAL                    ; $ca LOCAL
>910e		df ae					.word	MCCommand                        ; $cb MEMCOPY
>9110		61 a4					.word	SyntaxError                      ; $cc OFF
>9112		61 a4					.word	SyntaxError                      ; $cd ON
>9114		61 a4					.word	SyntaxError                      ; $ce OUTLINE
>9116		e7 a9					.word	PaletteCommand                   ; $cf PALETTE
>9118		a4 a7					.word	PlotCommand                      ; $d0 PLOT
>911a		de 8d					.word	PokeBCommand                     ; $d1 POKE
>911c		ea 8d					.word	PokeDCommand                     ; $d2 POKED
>911e		e6 8d					.word	PokeLCommand                     ; $d3 POKEL
>9120		e2 8d					.word	PokeWCommand                     ; $d4 POKEW
>9122		87 8e					.word	Command_Read                     ; $d5 READ
>9124		2c a7					.word	RectangleCommand                 ; $d6 RECT
>9126		e4 8e					.word	RemCommand                       ; $d7 REM
>9128		61 a4					.word	SyntaxError                      ; $d8 SOLID
>912a		86 b2					.word	SoundCommand                     ; $d9 SOUND
>912c		3b a7					.word	SpriteCommand                    ; $da SPRITE
>912e		75 a7					.word	TextCommand                      ; $db TEXT
>9130		f5 8f					.word	Unused2                          ; $dc TO
.9132						VectorSet1:
>9132		61 a4					.word	SyntaxError                      ; $80 !0:EOF
>9134		61 a4					.word	SyntaxError                      ; $81 !1:SH1
>9136		61 a4					.word	SyntaxError                      ; $82 !2:SH2
>9138		23 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>913a		3f 88					.word	AssertCommand                    ; $84 ASSERT
>913c		f6 a8					.word	BitmapCtrl                       ; $85 BITMAP
>913e		b0 aa					.word	Command_BLoad                    ; $86 BLOAD
>9140		5c ab					.word	Command_BSave                    ; $87 BSAVE
>9142		27 aa					.word	ClearScreen                      ; $88 CLS
>9144		be 8a					.word	Command_CPrint                   ; $89 CPRINT
>9146		df ab					.word	Command_Dir                      ; $8a DIR
>9148		41 aa					.word	BootDOS                          ; $8b DOS
>914a		af ac					.word	Command_Drive                    ; $8c DRIVE
>914c		49 89					.word	EndCommand                       ; $8d END
>914e		3e b2					.word	Explode                          ; $8e EXPLODE
>9150		61 a4					.word	SyntaxError                      ; $8f GO
>9152		57 8a					.word	Command_GOSUB                    ; $90 GOSUB
>9154		75 8a					.word	GotoCommand                      ; $91 GOTO
>9156		61 a4					.word	SyntaxError                      ; $92 HIMEM
>9158		b9 8a					.word	Command_Input                    ; $93 INPUT
>915a		03 8c					.word	Command_List                     ; $94 LIST
>915c		b6 ac					.word	Command_Load                     ; $95 LOAD
>915e		f3 af					.word	MouseDeltaStatus                 ; $96 MDELTA
>9160		ef af					.word	MouseStatus                      ; $97 MOUSE
>9162		ce 8d					.word	NewCommand                       ; $98 NEW
>9164		1a b2					.word	PingCommand                      ; $99 PING
>9166		c5 8a					.word	Command_Print                    ; $9a PRINT
>9168		13 8f					.word	Command_Restore                  ; $9b RESTORE
>916a		67 8a					.word	Command_RETURN                   ; $9c RETURN
>916c		52 8f					.word	CommandRUNOptLoad                ; $9d RUN
>916e		88 ad					.word	Command_Save                     ; $9e SAVE
>9170		69 b0					.word	CommandSetDate                   ; $9f SETDATE
>9172		6d b0					.word	CommandSetTime                   ; $a0 SETTIME
>9174		32 b2					.word	ShootCommand                     ; $a1 SHOOT
>9176		50 a9					.word	SpritesCtrl                      ; $a2 SPRITES
>9178		10 92					.word	StopCommand                      ; $a3 STOP
>917a		61 a4					.word	SyntaxError                      ; $a4 TILE
>917c		61 a4					.word	SyntaxError                      ; $a5 TILES
>917e		0f ae					.word	Command_Try                      ; $a6 TRY
>9180		4c ae					.word	Command_VERIFY                   ; $a7 VERIFY
>9182		38 aa					.word	XGoCommand                       ; $a8 XGO
>9184		2f aa					.word	XLoadCommand                     ; $a9 XLOAD
>9186		26 b2					.word	ZapCommand                       ; $aa ZAP
.9188						VectorSet2:
>9188		61 a4					.word	SyntaxError                      ; $80 !0:EOF
>918a		61 a4					.word	SyntaxError                      ; $81 !1:SH1
>918c		61 a4					.word	SyntaxError                      ; $82 !2:SH2
>918e		20 a3					.word	Assemble_adc                     ; $83 ADC
>9190		18 a3					.word	Assemble_and                     ; $84 AND
>9192		34 a3					.word	Assemble_asl                     ; $85 ASL
>9194		9e a3					.word	Assemble_bcc                     ; $86 BCC
>9196		a2 a3					.word	Assemble_bcs                     ; $87 BCS
>9198		aa a3					.word	Assemble_beq                     ; $88 BEQ
>919a		61 a3					.word	Assemble_bit                     ; $89 BIT
>919c		92 a3					.word	Assemble_bmi                     ; $8a BMI
>919e		a6 a3					.word	Assemble_bne                     ; $8b BNE
>91a0		8e a3					.word	Assemble_bpl                     ; $8c BPL
>91a2		ae a3					.word	Assemble_bra                     ; $8d BRA
>91a4		b2 a3					.word	Assemble_brk                     ; $8e BRK
>91a6		96 a3					.word	Assemble_bvc                     ; $8f BVC
>91a8		9a a3					.word	Assemble_bvs                     ; $90 BVS
>91aa		ba a3					.word	Assemble_clc                     ; $91 CLC
>91ac		0e a4					.word	Assemble_cld                     ; $92 CLD
>91ae		ce a3					.word	Assemble_cli                     ; $93 CLI
>91b0		fe a3					.word	Assemble_clv                     ; $94 CLV
>91b2		2c a3					.word	Assemble_cmp                     ; $95 CMP
>91b4		75 a3					.word	Assemble_cpx                     ; $96 CPX
>91b6		70 a3					.word	Assemble_cpy                     ; $97 CPY
>91b8		52 a3					.word	Assemble_dec                     ; $98 DEC
>91ba		0a a4					.word	Assemble_dex                     ; $99 DEX
>91bc		e6 a3					.word	Assemble_dey                     ; $9a DEY
>91be		1c a3					.word	Assemble_eor                     ; $9b EOR
>91c0		57 a3					.word	Assemble_inc                     ; $9c INC
>91c2		1a a4					.word	Assemble_inx                     ; $9d INX
>91c4		06 a4					.word	Assemble_iny                     ; $9e INY
>91c6		89 a3					.word	Assemble_jmp                     ; $9f JMP
>91c8		84 a3					.word	Assemble_jsr                     ; $a0 JSR
>91ca		28 a3					.word	Assemble_lda                     ; $a1 LDA
>91cc		4d a3					.word	Assemble_ldx                     ; $a2 LDX
>91ce		6b a3					.word	Assemble_ldy                     ; $a3 LDY
>91d0		3e a3					.word	Assemble_lsr                     ; $a4 LSR
>91d2		1e a4					.word	Assemble_nop                     ; $a5 NOP
>91d4		14 a3					.word	Assemble_ora                     ; $a6 ORA
>91d6		ca a3					.word	Assemble_pha                     ; $a7 PHA
>91d8		b6 a3					.word	Assemble_php                     ; $a8 PHP
>91da		12 a4					.word	Assemble_phx                     ; $a9 PHX
>91dc		d2 a3					.word	Assemble_phy                     ; $aa PHY
>91de		da a3					.word	Assemble_pla                     ; $ab PLA
>91e0		be a3					.word	Assemble_plp                     ; $ac PLP
>91e2		26 a4					.word	Assemble_plx                     ; $ad PLX
>91e4		e2 a3					.word	Assemble_ply                     ; $ae PLY
>91e6		39 a3					.word	Assemble_rol                     ; $af ROL
>91e8		43 a3					.word	Assemble_ror                     ; $b0 ROR
>91ea		c6 a3					.word	Assemble_rti                     ; $b1 RTI
>91ec		d6 a3					.word	Assemble_rts                     ; $b2 RTS
>91ee		30 a3					.word	Assemble_sbc                     ; $b3 SBC
>91f0		c2 a3					.word	Assemble_sec                     ; $b4 SEC
>91f2		22 a4					.word	Assemble_sed                     ; $b5 SED
>91f4		de a3					.word	Assemble_sei                     ; $b6 SEI
>91f6		24 a3					.word	Assemble_sta                     ; $b7 STA
>91f8		16 a4					.word	Assemble_stp                     ; $b8 STP
>91fa		48 a3					.word	Assemble_stx                     ; $b9 STX
>91fc		66 a3					.word	Assemble_sty                     ; $ba STY
>91fe		5c a3					.word	Assemble_stz                     ; $bb STZ
>9200		fa a3					.word	Assemble_tax                     ; $bc TAX
>9202		f6 a3					.word	Assemble_tay                     ; $bd TAY
>9204		7f a3					.word	Assemble_trb                     ; $be TRB
>9206		7a a3					.word	Assemble_tsb                     ; $bf TSB
>9208		02 a4					.word	Assemble_tsx                     ; $c0 TSX
>920a		ea a3					.word	Assemble_txa                     ; $c1 TXA
>920c		f2 a3					.word	Assemble_txs                     ; $c2 TXS
>920e		ee a3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9210						StopCommand:
.9210		a9 08		lda #$08		lda	#8
.9212		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9215						ClearSystem:
.9215		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9217		85 36		sta $36				sta 	0+zTemp0
.9219		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.921b		85 37		sta $37				sta 	1+zTemp0
.921d						_ClearZeroLoop:
.921d		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.921f		f0 24		beq $9245			beq 	_ClearZeroEnd
.9221		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.9223		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9225						_ClearOneVariable:
.9225		91 36		sta ($36),y			sta 	(zTemp0),y
.9227		c8		iny				iny
.9228		c0 08		cpy #$08			cpy 	#8
.922a		d0 f9		bne $9225			bne 	_ClearOneVariable
.922c		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.922e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9230		c9 18		cmp #$18			cmp 	#NSTProcedure
.9232		d0 04		bne $9238			bne 	_ClearNotProcedure
.9234		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9236		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9238						_ClearNotProcedure:
.9238		18		clc				clc 								; go to the next variable
.9239		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.923b		65 36		adc $36				adc 	zTemp0
.923d		85 36		sta $36				sta 	zTemp0
.923f		90 dc		bcc $921d			bcc 	_ClearZeroLoop
.9241		e6 37		inc $37				inc 	zTemp0+1
.9243		80 d8		bra $921d			bra 	_ClearZeroLoop
.9245						_ClearZeroEnd:
.9245		18		clc				clc
.9246		a5 36		lda $36				lda 	zTemp0
.9248		69 01		adc #$01			adc 	#1
.924a		8d 08 04	sta $0408			sta 	lowMemPtr
.924d		a5 37		lda $37				lda 	zTemp0+1
.924f		69 00		adc #$00			adc 	#0
.9251		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9254		20 73 b3	jsr $b373			jsr 	StackReset
.9257		20 d9 b3	jsr $b3d9			jsr 	StringSystemInitialise
.925a		20 73 92	jsr $9273			jsr 	ProcedureScan
.925d		20 13 8f	jsr $8f13			jsr 	Command_Restore
.9260		9c 1a 04	stz $041a			stz 	AssemblerAddress
.9263		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9266		9c 1c 04	stz $041c			stz 	AssemblerControl
.9269		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.926c		20 c9 9e	jsr $9ec9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.926f		20 ef a8	jsr $a8ef			jsr 	ResetBitmapSprites
.9272		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9273						ProcedureScan:
.9273		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.9276		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9278		85 30		sta $30				sta 	codePtr
.927a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.927c		85 31		sta $31				sta 	codePtr+1
.927e						_PSLoop:
.927e		b2 30		lda ($30)			lda 	(codePtr)
.9280		f0 42		beq $92c4			beq 	_PSExit
.9282		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9284		b1 30		lda ($30),y			lda 	(codePtr),y
.9286		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.9288		d0 2d		bne $92b7			bne 	_PSNext
.928a		c8		iny				iny 								; get the address of the record to zTemp0 and
.928b		b1 30		lda ($30),y			lda 	(codePtr),y
.928d		29 c0		and #$c0			and 	#$C0
.928f		c9 40		cmp #$40			cmp 	#$40
.9291		d0 35		bne $92c8			bne 	_PSSyntax
.9293		b1 30		lda ($30),y			lda 	(codePtr),y
.9295		18		clc				clc
.9296		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9298		85 37		sta $37				sta 	zTemp0+1
.929a		c8		iny				iny 								; LSB
.929b		b1 30		lda ($30),y			lda 	(codePtr),y
.929d		85 36		sta $36				sta 	zTemp0
.929f		c8		iny				iny 								; character after variable call.
.92a0		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92a1		a0 07		ldy #$07			ldy 	#7
.92a3		91 36		sta ($36),y			sta 	(zTemp0),y
.92a5		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92a7		a0 02		ldy #$02			ldy 	#2
.92a9		91 36		sta ($36),y			sta 	(zTemp0),y
.92ab		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92ad						_PSCopy:
.92ad		b5 30		lda $30,x			lda 	safePtr,x
.92af		c8		iny				iny
.92b0		91 36		sta ($36),y			sta 	(zTemp0),y
.92b2		e8		inx				inx
.92b3		e0 04		cpx #$04			cpx 	#4
.92b5		d0 f6		bne $92ad			bne 	_PSCopy
.92b7						_PSNext:
.92b7		18		clc				clc
.92b8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ba		65 30		adc $30				adc 	codePtr
.92bc		85 30		sta $30				sta 	codePtr
.92be		90 02		bcc $92c2			bcc 	_CREExit
.92c0		e6 31		inc $31				inc 	codePtr+1 					; carry
.92c2						_CREExit:
.92c2		80 ba		bra $927e			bra 	_PSLoop
.92c4						_PSExit:
.92c4		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.92c7		60		rts				rts
.92c8						_PSSyntax:
.92c8		4c 61 a4	jmp $a461			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92cb						ScanForward:
.92cb		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92cd		86 37		stx $37				stx 	zTemp0+1
.92cf		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92d1						_ScanLoop:
.92d1		b1 30		lda ($30),y			lda 	(codePtr),y
.92d3		c8		iny				iny
.92d4		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92d6		d0 0e		bne $92e6			bne 	_ScanGoNext
.92d8		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92da		f0 04		beq $92e0			beq 	_ScanMatch
.92dc		c5 37		cmp $37				cmp 	zTemp0+1
.92de		d0 06		bne $92e6			bne 	_ScanGoNext
.92e0						_ScanMatch:
.92e0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.92e2		d0 01		bne $92e5			bne 	_ScanNotEndEOL
.92e4		88		dey				dey
.92e5						_ScanNotEndEOL:
.92e5		60		rts				rts
.92e6						_ScanGoNext:
.92e6		20 eb 92	jsr $92eb			jsr  	ScanForwardOne 				; allows for shifts and so on.
.92e9		80 e6		bra $92d1			bra 	_ScanLoop
.92eb						ScanForwardOne:
.92eb		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.92ed		90 3e		bcc $932d			bcc 	_SFWExit
.92ef		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.92f1		90 18		bcc $930b			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.92f3		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.92f5		b0 2f		bcs $9326			bcs 	_ScanSkipData
.92f7		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.92f9		90 32		bcc $932d			bcc 	_SFWExit 					; if not, ordinary keywords.
.92fb		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.92fd		b0 2e		bcs $932d			bcs 	_SFWExit
.92ff		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9301		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9303		b0 28		bcs $932d			bcs 	_SFWExit
.9305		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9307		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9309		80 22		bra $932d			bra 	_SFWExit
.930b						_ScanSkipOne:
.930b		c8		iny				iny 								; consume the extra one.
.930c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.930e		d0 1d		bne $932d			bne 	_SFWExit
.9310		18		clc				clc
.9311		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9313		65 30		adc $30				adc 	codePtr
.9315		85 30		sta $30				sta 	codePtr
.9317		90 02		bcc $931b			bcc 	_CREExit
.9319		e6 31		inc $31				inc 	codePtr+1 					; carry
.931b						_CREExit:
.931b		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.931d		b2 30		lda ($30)			lda 	(codePtr)
.931f		d0 0c		bne $932d			bne 	_SFWExit 					; if not zero, more to scan
.9321		a9 13		lda #$13		lda	#19
.9323		4c 89 93	jmp $9389		jmp	ErrorHandler
.9326						_ScanSkipData:
.9326		88		dey				dey 								; point at data token
.9327		c8		iny				iny 								; point to offset
.9328		98		tya				tya 								; A = offset position
.9329		38		sec				sec 								; add size +1 hence SEC
.932a		71 30		adc ($30),y			adc 	(codePtr),y
.932c		a8		tay				tay 								; make current position.
.932d						_SFWExit:
.932d		60		rts				rts
.932e						ScanGetCurrentLineStep:
.932e		64 38		stz $38				stz 	zTemp1
.9330		a0 03		ldy #$03			ldy 	#3
.9332						_SGCLSLoop:
.9332		b1 30		lda ($30),y			lda 	(codePtr),y
.9334		c8		iny				iny
.9335		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9337		f0 05		beq $933e			beq 	_SGCLSExit
.9339		20 eb 92	jsr $92eb			jsr 	ScanForwardOne
.933c		80 f4		bra $9332			bra 	_SGCLSLoop
.933e						_SGCLSExit:
.933e		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9340		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9341						Command_WHILE:
.9341		5a		phy				phy 								; save position of the test
.9342		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9344		20 37 a2	jsr $a237			jsr 	EvaluateNumber
.9347		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; check if zero
.934a		f0 0e		beq $935a			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.934c		98		tya				tya 								; position *after* test.
.934d		7a		ply				ply 								; restore position before test, at WHILE
.934e		88		dey				dey 								; so we execute the WHILE command again.
.934f		48		pha				pha 								; push after test on the stack
.9350		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9352		20 0d b3	jsr $b30d			jsr 	StackOpen
.9355		20 52 b3	jsr $b352			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9358		7a		ply				ply 								; restore the position *after* the test
.9359		60		rts				rts
.935a						_WHExitLoop:
.935a		68		pla				pla 								; throw post loop position
.935b		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.935d		aa		tax				tax
.935e		20 cb 92	jsr $92cb			jsr 	ScanForward
.9361		60		rts				rts
.9362						Command_WEND:
.9362		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9364		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9366		20 3a b3	jsr $b33a			jsr 	StackCheckFrame
.9369		20 63 b3	jsr $b363			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.936c		20 2c b3	jsr $b32c			jsr 	StackClose		 			; erase the frame
.936f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9370						CheckRightBracket:
.9370		b1 30		lda ($30),y			lda 	(codePtr),y
.9372		c8		iny				iny
.9373		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9375		d0 0f		bne $9386			bne 	CNAFail
.9377		60		rts				rts
.9378						CheckComma:
.9378		b1 30		lda ($30),y			lda 	(codePtr),y
.937a		c8		iny				iny
.937b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.937d		d0 07		bne $9386			bne 	CNAFail
.937f		60		rts				rts
.9380						CheckNextA:
.9380		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9382		d0 02		bne $9386			bne 	CNAFail
.9384		c8		iny				iny 								; skip character
.9385		60		rts				rts 								; and exit
.9386						CNAFail:
.9386		4c 61 a4	jmp $a461			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9389						ErrorHandler:
.9389		48		pha				pha 								; save error #
.938a		a8		tay				tay 								; find the error text
.938b		f0 4e		beq $93db			beq 	_EHEnd
.938d		a2 00		ldx #$00			ldx 	#0
.938f		a9 7a		lda #$7a			lda 	#((ErrorText) & $FF)
.9391		85 36		sta $36				sta 	0+zTemp0
.9393		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.9395		85 37		sta $37				sta 	1+zTemp0
.9397						_EHFind:
.9397		88		dey				dey 								; keep looking through text
.9398		f0 0e		beq $93a8			beq 	_EHFound
.939a						_EHFindZero:
.939a		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.939c		e6 36		inc $36				inc 	zTemp0
.939e		d0 02		bne $93a2			bne 	_EHFNoCarry
.93a0		e6 37		inc $37				inc 	zTemp0+1
.93a2						_EHFNoCarry:
.93a2		c9 00		cmp #$00			cmp 	#0
.93a4		d0 f4		bne $939a			bne 	_EHFindZero
.93a6		80 ef		bra $9397			bra 	_EHFind
.93a8						_EHFound:
.93a8		a5 36		lda $36				lda 	zTemp0 						; print message
.93aa		a6 37		ldx $37				ldx 	zTemp0+1
.93ac		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.93af		68		pla				pla  								; check if error is 'open structure'
.93b0		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93b2		f0 22		beq $93d6			beq 	_EHCREnd
.93b4		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93b6		b1 30		lda ($30),y			lda 	(codePtr),y
.93b8		d0 05		bne $93bf			bne 	_EHAtMsg
.93ba		c8		iny				iny
.93bb		b1 30		lda ($30),y			lda 	(codePtr),y
.93bd		f0 17		beq $93d6			beq 	_EHCREnd
.93bf						_EHAtMsg:
.93bf		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93c1		a9 de		lda #$de			lda 	#_AtMsg & $FF
.93c3		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.93c6		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93c8		b1 30		lda ($30),y			lda 	(codePtr),y
.93ca		48		pha				pha
.93cb		c8		iny				iny
.93cc		b1 30		lda ($30),y			lda 	(codePtr),y
.93ce		aa		tax				tax
.93cf		68		pla				pla
.93d0		20 fe 97	jsr $97fe			jsr 	ConvertInt16 				; convert XA to string
.93d3		20 e8 93	jsr $93e8			jsr 	PrintStringXA 				; and print it.
.93d6						_EHCREnd:
.93d6		a9 0d		lda #$0d			lda 	#13 						; new line
.93d8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93db						_EHEnd:
.93db		4c ee 87	jmp $87ee			jmp 	WarmStart
>93de		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93e6		20 00
.93e8						PrintStringXA:
.93e8		5a		phy				phy
.93e9		86 37		stx $37				stx 	zTemp0+1
.93eb		85 36		sta $36				sta 	zTemp0
.93ed		a0 00		ldy #$00			ldy 	#0
.93ef						_PSXALoop:
.93ef		b1 36		lda ($36),y			lda 	(zTemp0),y
.93f1		f0 06		beq $93f9			beq 	_PSXAExit
.93f3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93f6		c8		iny				iny
.93f7		80 f6		bra $93ef			bra 	_PSXALoop
.93f9						_PSXAExit:
.93f9		7a		ply				ply
.93fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93fb						UnaryTrue:
.93fb		fa		plx				plx
.93fc						ReturnTrue:
.93fc		a9 01		lda #$01			lda 	#1  						; set to 1
.93fe		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.9401		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9403		95 50		sta $50,x			sta 	NSStatus,x
.9405		60		rts				rts
.9406						UnaryFalse:
.9406		fa		plx				plx
.9407						ReturnFalse:
.9407		4c e9 a2	jmp $a2e9			jmp 	NSMSetZero 					; set it all to zero
.940a						BinaryCompareEqual:
.940a		fa		plx				plx
.940b		20 46 94	jsr $9446			jsr 	CompareBaseCode
.940e		c9 00		cmp #$00			cmp 	#0
.9410		f0 ea		beq $93fc			beq 	ReturnTrue
.9412		80 f3		bra $9407			bra 	ReturnFalse
.9414						BinaryCompareLess:
.9414		fa		plx				plx
.9415		20 46 94	jsr $9446			jsr 	CompareBaseCode
.9418		c9 ff		cmp #$ff			cmp 	#$FF
.941a		f0 e0		beq $93fc			beq 	ReturnTrue
.941c		80 e9		bra $9407			bra 	ReturnFalse
.941e						BinaryCompareGreater:
.941e		fa		plx				plx
.941f		20 46 94	jsr $9446			jsr 	CompareBaseCode
.9422		c9 01		cmp #$01			cmp 	#1
.9424		f0 d6		beq $93fc			beq 	ReturnTrue
.9426		80 df		bra $9407			bra 	ReturnFalse
.9428						BinaryCompareNotEqual:
.9428		fa		plx				plx
.9429		20 46 94	jsr $9446			jsr 	CompareBaseCode
.942c		c9 00		cmp #$00			cmp 	#0
.942e		d0 cc		bne $93fc			bne 	ReturnTrue
.9430		80 d5		bra $9407			bra 	ReturnFalse
.9432						BinaryCompareLessEqual:
.9432		fa		plx				plx
.9433		20 46 94	jsr $9446			jsr 	CompareBaseCode
.9436		c9 01		cmp #$01			cmp 	#1
.9438		d0 c2		bne $93fc			bne 	ReturnTrue
.943a		80 cb		bra $9407			bra 	ReturnFalse
.943c						BinaryCompareGreaterEqual:
.943c		fa		plx				plx
.943d		20 46 94	jsr $9446			jsr 	CompareBaseCode
.9440		c9 ff		cmp #$ff			cmp 	#$FF
.9442		d0 b8		bne $93fc			bne 	ReturnTrue
.9444		80 c1		bra $9407			bra 	ReturnFalse
.9446						CompareBaseCode:
.9446		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; make both values if references.
.9449		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.944b		15 51		ora $51,x			ora 	NSStatus+1,x
.944d		29 10		and #$10			and 	#NSTString
.944f		d0 37		bne $9488			bne 	_CBCString 					; if so do string code, which will check if both.
.9451		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9453		15 79		ora $79,x			ora 	NSExponent+1,x
.9455		d0 34		bne $948b			bne 	_CBCFloat
.9457		b5 50		lda $50,x			lda 	NSStatus,x
.9459		15 51		ora $51,x			ora 	NSStatus+1,x
.945b		29 08		and #$08			and 	#NSTFloat
.945d		d0 2c		bne $948b			bne 	_CBCFloat
.945f		20 8e 94	jsr $948e			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9462		e8		inx				inx
.9463		20 8e 94	jsr $948e			jsr 	CompareFixMinusZero
.9466		ca		dex				dex
.9467		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9469		55 51		eor $51,x			eor 	NSStatus+1,x
.946b		10 0a		bpl $9477			bpl 	_CDCSameSign
.946d		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.946f		30 14		bmi $9485			bmi 	_CBCLess 					; return $FF
.9471						_CBCGreater:
.9471		a9 01		lda #$01			lda 	#1
.9473		60		rts				rts
.9474						_CBCEqual:
.9474		a9 00		lda #$00			lda 	#0
.9476		60		rts				rts
.9477						_CDCSameSign:
.9477		20 a3 96	jsr $96a3			jsr 	SubTopTwoStack 				; unsigned subtract
.947a		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; or the mantissa together
.947d		f0 f5		beq $9474			beq 	_CBCEqual 					; -0 == 0
.947f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9481		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9483		10 ec		bpl $9471			bpl 	_CBCGreater
.9485						_CBCLess:
.9485		a9 ff		lda #$ff			lda 	#$FF
.9487		60		rts				rts
.9488						_CBCString:
.9488		4c 14 96	jmp $9614			jmp 	CompareStrings
.948b						_CBCFloat:
.948b		4c 5e 99	jmp $995e			jmp 	CompareFloat
.948e						CompareFixMinusZero:
.948e		20 0b a3	jsr $a30b			jsr 	NSMIsZero
.9491		d0 02		bne $9495			bne 	_CFXMZNotZero
.9493		74 50		stz $50,x			stz 	NSStatus,x
.9495						_CFXMZNotZero:
.9495		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9496						StringConcat:
.9496		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9498		35 51		and $51,x			and 	NSStatus+1,x
.949a		29 18		and #$18			and 	#NSBTypeMask
.949c		c9 10		cmp #$10			cmp 	#NSTString
.949e		d0 50		bne $94f0			bne		_SCType
.94a0		64 38		stz $38				stz 	zTemp1 						; counting total length
.94a2		e8		inx				inx
.94a3		20 c1 94	jsr $94c1			jsr 	_SCSetupZ0 					; setup for second
.94a6		20 ca 94	jsr $94ca			jsr 	_SCLengthZ0 				; length for second
.94a9		ca		dex				dex
.94aa		20 c1 94	jsr $94c1			jsr 	_SCSetupZ0 					; setup for first
.94ad		20 ca 94	jsr $94ca			jsr 	_SCLengthZ0 				; length for first
.94b0		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94b2		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.94b5		20 e1 94	jsr $94e1			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94b8		e8		inx				inx
.94b9		20 c1 94	jsr $94c1			jsr 	_SCSetupZ0 					; copy second out
.94bc		20 e1 94	jsr $94e1			jsr 	_SCCopy
.94bf		ca		dex				dex
.94c0		60		rts				rts
.94c1						_SCSetupZ0:
.94c1		b5 58		lda $58,x			lda 	NSMantissa0,x
.94c3		85 36		sta $36				sta 	zTemp0
.94c5		b5 60		lda $60,x			lda 	NSMantissa1,x
.94c7		85 37		sta $37				sta 	zTemp0+1
.94c9		60		rts				rts
.94ca						_SCLengthZ0:
.94ca		5a		phy				phy
.94cb		a0 00		ldy #$00			ldy 	#0
.94cd						_SCLenLoop:
.94cd		b1 36		lda ($36),y			lda 	(zTemp0),y
.94cf		f0 0e		beq $94df			beq 	_SCLExit
.94d1		c8		iny				iny
.94d2		e6 38		inc $38				inc 	zTemp1
.94d4		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94d6		c9 fd		cmp #$fd			cmp 	#253
.94d8		d0 f3		bne $94cd			bne		_SCLenLoop
.94da		a9 09		lda #$09		lda	#9
.94dc		4c 89 93	jmp $9389		jmp	ErrorHandler
.94df						_SCLExit:
.94df		7a		ply				ply
.94e0		60		rts				rts
.94e1						_SCCopy:
.94e1		5a		phy				phy
.94e2		a0 00		ldy #$00			ldy 	#0
.94e4						_SCCopyLoop:
.94e4		b1 36		lda ($36),y			lda 	(zTemp0),y
.94e6		f0 06		beq $94ee			beq 	_SCCExit
.94e8		20 36 b4	jsr $b436			jsr 	StringTempWrite
.94eb		c8		iny				iny
.94ec		80 f6		bra $94e4			bra 	_SCCopyLoop
.94ee						_SCCExit:
.94ee		7a		ply				ply
.94ef		60		rts				rts
.94f0						_SCType:
.94f0		4c 6b a4	jmp $a46b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94f3						IntegerDivide:
.94f3		fa		plx				plx
.94f4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94f6		15 51		ora $51,x			ora 	NSStatus+1,x
.94f8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f9		0a		asl a				asl 	a
.94fa		10 05		bpl $9501			bpl 	_NotRef
.94fc		48		pha				pha
.94fd		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9500		68		pla				pla
.9501						_NotRef:
.9501		0a		asl a				asl 	a
.9502		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9504		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9506		15 79		ora $79,x			ora 	NSExponent+1,x
.9508		f0 03		beq $950d			beq 	_IntegerCode 				; if clear, then we have two integers
.950a		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.950d						_IntegerCode:
.950d		20 27 95	jsr $9527			jsr 	CheckDivideZero 			; do div zero check
.9510		20 59 95	jsr $9559			jsr 	Int32Divide 				; do the division
.9513		20 0a 96	jsr $960a			jsr 	CalculateSign 				; calculate result sign
.9516						NSMCopyPlusTwoToZero:
.9516		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9518		95 58		sta $58,x			sta 	NSMantissa0,x
.951a		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.951c		95 60		sta $60,x			sta 	NSMantissa1,x
.951e		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9520		95 68		sta $68,x			sta 	NSMantissa2,x
.9522		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9524		95 70		sta $70,x			sta 	NSMantissa3,x
.9526		60		rts				rts
.9527						CheckDivideZero:
.9527		e8		inx				inx
.9528		20 0b a3	jsr $a30b			jsr 	NSMIsZero
.952b		f0 02		beq $952f			beq 	_CDVError
.952d		ca		dex				dex
.952e		60		rts				rts
.952f						_CDVError:
.952f		a9 03		lda #$03		lda	#3
.9531		4c 89 93	jmp $9389		jmp	ErrorHandler
.9534						IntegerModulus:
.9534		fa		plx				plx
.9535		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9537		15 51		ora $51,x			ora 	NSStatus+1,x
.9539		0a		asl a				asl 	a 							; shift reference bit into sign bit
.953a		0a		asl a				asl 	a
.953b		10 05		bpl $9542			bpl 	_NotRef
.953d		48		pha				pha
.953e		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9541		68		pla				pla
.9542						_NotRef:
.9542		0a		asl a				asl 	a
.9543		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9545		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9547		15 79		ora $79,x			ora 	NSExponent+1,x
.9549		f0 03		beq $954e			beq 	_IntegerCode 				; if clear, then we have two integers
.954b		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.954e						_IntegerCode:
.954e						IntegerModulusNoCheck:
.954e		20 27 95	jsr $9527			jsr 	CheckDivideZero 			; do div zero check
.9551		20 59 95	jsr $9559			jsr 	Int32Divide 				; do the division
.9554		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9556		56 50		lsr $50,x			lsr 	NSStatus,x
.9558		60		rts				rts
.9559						Int32Divide:
.9559		48		pha				pha 								; save AXY
.955a		5a		phy				phy
.955b		20 cc a2	jsr $a2cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.955e		20 e5 a2	jsr $a2e5			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9561		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9563						_I32DivideLoop:
.9563		e8		inx				inx
.9564		e8		inx				inx
.9565		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9568		ca		dex				dex
.9569		ca		dex				dex
.956a		20 f9 a2	jsr $a2f9			jsr 	NSMRotateLeft
.956d		20 98 95	jsr $9598			jsr 	DivideCheckSubtract 		; check if subtract possible
.9570		90 02		bcc $9574			bcc 	_I32DivideNoCarryIn
.9572		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9574						_I32DivideNoCarryIn:
.9574		88		dey				dey 								; loop round till division completed.
.9575		d0 ec		bne $9563			bne 	_I32DivideLoop
.9577		7a		ply				ply 								; restore AXY and exit
.9578		68		pla				pla
.9579		60		rts				rts
.957a						Int32ShiftDivide:
.957a		48		pha				pha 								; save AY
.957b		5a		phy				phy
.957c		e8		inx				inx 								; clear S[X+2]
.957d		e8		inx				inx
.957e		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.9581		ca		dex				dex
.9582		ca		dex				dex
.9583		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9585						_I32SDLoop:
.9585		20 98 95	jsr $9598			jsr 	DivideCheckSubtract 		; check if subtract possible
.9588		e8		inx				inx
.9589		e8		inx				inx
.958a		20 f9 a2	jsr $a2f9			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.958d		ca		dex				dex
.958e		ca		dex				dex
.958f		20 f9 a2	jsr $a2f9			jsr 	NSMRotateLeft
.9592		88		dey				dey 	 							; do 31 times
.9593		d0 f0		bne $9585			bne 	_I32SDLoop
.9595		7a		ply				ply 								; restore AY and exit
.9596		68		pla				pla
.9597		60		rts				rts
.9598						DivideCheckSubtract:
.9598		20 a3 96	jsr $96a3			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.959b		b0 04		bcs $95a1			bcs 	_DCSExit 					; if carry set, then could do, exit
.959d		20 89 96	jsr $9689			jsr 	AddTopTwoStack 				; add it back in
.95a0		18		clc				clc 								; and return False
.95a1						_DCSExit:
.95a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95a2						MulInteger:
.95a2		fa		plx				plx
.95a3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95a5		15 51		ora $51,x			ora 	NSStatus+1,x
.95a7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95a8		0a		asl a				asl 	a
.95a9		10 05		bpl $95b0			bpl 	_NotRef
.95ab		48		pha				pha
.95ac		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95af		68		pla				pla
.95b0						_NotRef:
.95b0		0a		asl a				asl 	a 							; put MSB of type into A:7
.95b1		30 09		bmi $95bc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95b3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95b5		15 79		ora $79,x			ora 	NSExponent+1,x
.95b7		f0 06		beq $95bf			beq 	_IntegerCode 				; if clear, then we have two integers
.95b9		4c 20 9a	jmp $9a20			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95bc						_StringData:
.95bc		4c 75 a4	jmp $a475			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95bf						_IntegerCode:
.95bf		20 cc 95	jsr $95cc			jsr 	MultiplyShort
.95c2		c9 00		cmp #$00			cmp 	#0
.95c4		f0 05		beq $95cb			beq 	_MIExit
.95c6		a9 04		lda #$04		lda	#4
.95c8		4c 89 93	jmp $9389		jmp	ErrorHandler
.95cb						_MIExit:
.95cb		60		rts				rts
.95cc						MultiplyShort:
.95cc		5a		phy				phy 								; save Y
.95cd		20 cc a2	jsr $a2cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95d0		20 e5 a2	jsr $a2e5			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95d3		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95d5						_I32MLoop:
.95d5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95d7		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95d9		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95db		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95dd		f0 25		beq $9604			beq 	_I32MExit 					; exit if zero
.95df		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95e1		29 01		and #$01			and 	#1
.95e3		f0 0d		beq $95f2			beq 	_I32MNoAdd
.95e5		20 89 96	jsr $9689			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95e8		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95ea		10 06		bpl $95f2			bpl 	_I32MNoAdd
.95ec						_I32ShiftRight:
.95ec		20 02 a3	jsr $a302			jsr 	NSMShiftRight 				; shift S[X] right
.95ef		c8		iny				iny 								; increment shift count
.95f0		80 09		bra $95fb			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.95f2						_I32MNoAdd:
.95f2		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95f4		70 f6		bvs $95ec			bvs 	_I32ShiftRight 				; instead.
.95f6		e8		inx				inx
.95f7		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95fa		ca		dex				dex
.95fb						_I32MShiftUpper:
.95fb		e8		inx				inx 								; shift S[X+2] right
.95fc		e8		inx				inx
.95fd		20 02 a3	jsr $a302			jsr 	NSMShiftRight
.9600		ca		dex				dex
.9601		ca		dex				dex
.9602		80 d1		bra $95d5			bra 	_I32MLoop 					; try again.
.9604						_I32MExit:
.9604		20 0a 96	jsr $960a			jsr 	CalculateSign
.9607		98		tya				tya 								; shift in A
.9608		7a		ply				ply 								; restore Y and exit
.9609		60		rts				rts
.960a						CalculateSign:
.960a		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.960c		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.960e		55 51		eor $51,x			eor 	NSStatus+1,x
.9610		0a		asl a				asl 	a 							; shift bit 7 into carry
.9611		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9613		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9614						CompareStrings:
.9614		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9616		35 51		and $51,x			and 	NSStatus+1,x
.9618		29 10		and #$10			and 	#NSBIsString
.961a		f0 28		beq $9644			beq 	_CSTypeError
.961c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.961e		85 36		sta $36				sta 	zTemp0
.9620		b5 60		lda $60,x			lda 	NSMantissa1,x
.9622		85 37		sta $37				sta 	zTemp0+1
.9624		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9626		85 38		sta $38				sta 	zTemp1
.9628		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.962a		85 39		sta $39				sta 	zTemp1+1
.962c		5a		phy				phy 								; save Y so we can access strings
.962d		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.962f						_CSLoop:
.962f		c8		iny				iny
.9630		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9632		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9634		d0 06		bne $963c			bne 	_CSDifferent
.9636		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9638		d0 f5		bne $962f			bne 	_CSLoop 					; still comparing
.963a						_CSExit:
.963a		7a		ply				ply 								; reached end, return zero in A from EOS
.963b		60		rts				rts
.963c						_CSDifferent:
.963c		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.963e		90 fa		bcc $963a			bcc		_CSExit
.9640		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9642		80 f6		bra $963a			bra 	_CSExit
.9644						_CSTypeError:
.9644		4c 6b a4	jmp $a46b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9647						ShiftLeft:
.9647		38		sec				sec 								; common code, carry determines which way.
.9648		80 01		bra $964b			bra 	ShiftMain
.964a						ShiftRight:
.964a		18		clc				clc
.964b						ShiftMain:
.964b		fa		plx				plx 								; restore X
.964c		08		php				php 								; save direction
.964d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.964f		15 51		ora $51,x			ora 	NSStatus+1,x
.9651		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9652		0a		asl a				asl 	a
.9653		10 05		bpl $965a			bpl 	_NotRef
.9655		48		pha				pha
.9656		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9659		68		pla				pla
.965a						_NotRef:
.965a		0a		asl a				asl 	a
.965b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.965d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.965f		15 79		ora $79,x			ora 	NSExponent+1,x
.9661		f0 03		beq $9666			beq 	_IntegerCode 				; if clear, then we have two integers
.9663		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.9666						_IntegerCode:
.9666		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9668		29 e0		and #$e0			and 	#$E0
.966a		15 61		ora $61,x			ora 	NSMantissa1+1,x
.966c		15 69		ora $69,x			ora 	NSMantissa2+1,x
.966e		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9670		d0 12		bne $9684			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9672						_SMLoop:
.9672		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9674		30 11		bmi $9687			bmi 	_SMExit 					; exit if done.
.9676		28		plp				plp 								; restore direction setting
.9677		08		php				php
.9678		90 05		bcc $967f			bcc 	_SMRight
.967a		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; shift left if CS
.967d		80 f3		bra $9672			bra 	_SMLoop
.967f						_SMRight:
.967f		20 02 a3	jsr $a302			jsr 	NSMShiftRight 				; shift right if CC
.9682		80 ee		bra $9672			bra 	_SMLoop
.9684						_SMExit0:
.9684		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; return zero.
.9687						_SMExit:
.9687		28		plp				plp 								; throw direction
.9688		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9689						AddTopTwoStack:
.9689		18		clc				clc
.968a		b5 58		lda $58,x			lda		NSMantissa0,x
.968c		75 59		adc $59,x			adc 		NSMantissa0+1,x
.968e		95 58		sta $58,x			sta 	NSMantissa0,x
.9690		b5 60		lda $60,x			lda		NSMantissa1,x
.9692		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9694		95 60		sta $60,x			sta 	NSMantissa1,x
.9696		b5 68		lda $68,x			lda		NSMantissa2,x
.9698		75 69		adc $69,x			adc 		NSMantissa2+1,x
.969a		95 68		sta $68,x			sta 	NSMantissa2,x
.969c		b5 70		lda $70,x			lda		NSMantissa3,x
.969e		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96a0		95 70		sta $70,x			sta 	NSMantissa3,x
.96a2		60		rts				rts
.96a3						SubTopTwoStack:
.96a3		38		sec				sec
.96a4		b5 58		lda $58,x			lda		NSMantissa0,x
.96a6		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96a8		95 58		sta $58,x			sta 	NSMantissa0,x
.96aa		b5 60		lda $60,x			lda		NSMantissa1,x
.96ac		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96ae		95 60		sta $60,x			sta 	NSMantissa1,x
.96b0		b5 68		lda $68,x			lda		NSMantissa2,x
.96b2		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96b4		95 68		sta $68,x			sta 	NSMantissa2,x
.96b6		b5 70		lda $70,x			lda		NSMantissa3,x
.96b8		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96ba		95 70		sta $70,x			sta 	NSMantissa3,x
.96bc		60		rts				rts
.96bd						AddInteger:
.96bd		fa		plx				plx
.96be		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96c0		15 51		ora $51,x			ora 	NSStatus+1,x
.96c2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96c3		0a		asl a				asl 	a
.96c4		10 05		bpl $96cb			bpl 	_NotRef
.96c6		48		pha				pha
.96c7		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ca		68		pla				pla
.96cb						_NotRef:
.96cb		0a		asl a				asl 	a 							; put MSB of type into A:7
.96cc		30 09		bmi $96d7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96ce		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96d0		15 79		ora $79,x			ora 	NSExponent+1,x
.96d2		f0 06		beq $96da			beq 	_IntegerCode 				; if clear, then we have two integers
.96d4		4c d0 98	jmp $98d0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96d7						_StringData:
.96d7		4c 96 94	jmp $9496			jmp 	StringConcat							; at least one string - don't know both are strings.
.96da						_IntegerCode:
.96da						AddCode:
.96da		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96dc		55 51		eor $51,x			eor 	NSStatus+1,x
.96de		10 a9		bpl $9689			bpl 	AddTopTwoStack
.96e0		20 a3 96	jsr $96a3			jsr 	SubTopTwoStack 				; do a physical subtraction
.96e3		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96e5		10 07		bpl $96ee			bpl 	_AddExit
.96e7		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96e9		95 50		sta $50,x			sta 	NSStatus,x
.96eb		20 b2 a2	jsr $a2b2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96ee						_AddExit:
.96ee		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; check for -0
.96f1		d0 02		bne $96f5			bne 	_AddNonZero
.96f3		74 50		stz $50,x			stz 	NSStatus,x
.96f5						_AddNonZero:
.96f5		60		rts				rts
.96f6						SubInteger:
.96f6		fa		plx				plx
.96f7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96f9		15 51		ora $51,x			ora 	NSStatus+1,x
.96fb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96fc		0a		asl a				asl 	a
.96fd		10 05		bpl $9704			bpl 	_NotRef
.96ff		48		pha				pha
.9700		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9703		68		pla				pla
.9704						_NotRef:
.9704		0a		asl a				asl 	a 							; put MSB of type into A:7
.9705		30 09		bmi $9710			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9707		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9709		15 79		ora $79,x			ora 	NSExponent+1,x
.970b		f0 06		beq $9713			beq 	_IntegerCode 				; if clear, then we have two integers
.970d		4c d5 98	jmp $98d5			jmp 	FloatingPointSub 							; otherwise at least one float.
.9710						_StringData:
.9710		4c 75 a4	jmp $a475			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9713						_IntegerCode:
.9713		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9715		49 80		eor #$80			eor 	#$80
.9717		95 51		sta $51,x			sta 	NSStatus+1,x
.9719		80 bf		bra $96da			bra 	AddCode 					; and do the same code as add.
.971b						AndInteger:
.971b		fa		plx				plx
.971c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.971e		15 51		ora $51,x			ora 	NSStatus+1,x
.9720		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9721		0a		asl a				asl 	a
.9722		10 05		bpl $9729			bpl 	_NotRef
.9724		48		pha				pha
.9725		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9728		68		pla				pla
.9729						_NotRef:
.9729		0a		asl a				asl 	a
.972a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.972c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.972e		15 79		ora $79,x			ora 	NSExponent+1,x
.9730		f0 03		beq $9735			beq 	_IntegerCode 				; if clear, then we have two integers
.9732		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.9735						_IntegerCode:
.9735		b5 58		lda $58,x			lda		NSMantissa0,x
.9737		35 59		and $59,x			and 		NSMantissa0+1,x
.9739		95 58		sta $58,x			sta 	NSMantissa0,x
.973b		b5 60		lda $60,x			lda		NSMantissa1,x
.973d		35 61		and $61,x			and 		NSMantissa1+1,x
.973f		95 60		sta $60,x			sta 	NSMantissa1,x
.9741		b5 68		lda $68,x			lda		NSMantissa2,x
.9743		35 69		and $69,x			and 		NSMantissa2+1,x
.9745		95 68		sta $68,x			sta 	NSMantissa2,x
.9747		b5 70		lda $70,x			lda		NSMantissa3,x
.9749		35 71		and $71,x			and 		NSMantissa3+1,x
.974b		95 70		sta $70,x			sta 	NSMantissa3,x
.974d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.974f		60		rts				rts
.9750						OraInteger:
.9750		fa		plx				plx
.9751		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9753		15 51		ora $51,x			ora 	NSStatus+1,x
.9755		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9756		0a		asl a				asl 	a
.9757		10 05		bpl $975e			bpl 	_NotRef
.9759		48		pha				pha
.975a		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.975d		68		pla				pla
.975e						_NotRef:
.975e		0a		asl a				asl 	a
.975f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9761		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9763		15 79		ora $79,x			ora 	NSExponent+1,x
.9765		f0 03		beq $976a			beq 	_IntegerCode 				; if clear, then we have two integers
.9767		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.976a						_IntegerCode:
.976a		b5 58		lda $58,x			lda		NSMantissa0,x
.976c		15 59		ora $59,x			ora 		NSMantissa0+1,x
.976e		95 58		sta $58,x			sta 	NSMantissa0,x
.9770		b5 60		lda $60,x			lda		NSMantissa1,x
.9772		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9774		95 60		sta $60,x			sta 	NSMantissa1,x
.9776		b5 68		lda $68,x			lda		NSMantissa2,x
.9778		15 69		ora $69,x			ora 		NSMantissa2+1,x
.977a		95 68		sta $68,x			sta 	NSMantissa2,x
.977c		b5 70		lda $70,x			lda		NSMantissa3,x
.977e		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9780		95 70		sta $70,x			sta 	NSMantissa3,x
.9782		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9784		60		rts				rts
.9785						EorInteger:
.9785		fa		plx				plx
.9786		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9788		15 51		ora $51,x			ora 	NSStatus+1,x
.978a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.978b		0a		asl a				asl 	a
.978c		10 05		bpl $9793			bpl 	_NotRef
.978e		48		pha				pha
.978f		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9792		68		pla				pla
.9793						_NotRef:
.9793		0a		asl a				asl 	a
.9794		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9796		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9798		15 79		ora $79,x			ora 	NSExponent+1,x
.979a		f0 03		beq $979f			beq 	_IntegerCode 				; if clear, then we have two integers
.979c		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.979f						_IntegerCode:
.979f		b5 58		lda $58,x			lda		NSMantissa0,x
.97a1		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97a3		95 58		sta $58,x			sta 	NSMantissa0,x
.97a5		b5 60		lda $60,x			lda		NSMantissa1,x
.97a7		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97a9		95 60		sta $60,x			sta 	NSMantissa1,x
.97ab		b5 68		lda $68,x			lda		NSMantissa2,x
.97ad		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97af		95 68		sta $68,x			sta 	NSMantissa2,x
.97b1		b5 70		lda $70,x			lda		NSMantissa3,x
.97b3		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97b5		95 70		sta $70,x			sta 	NSMantissa3,x
.97b7		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97b9		60		rts				rts
.97ba						WordIndirect:
.97ba		fa		plx				plx
.97bb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97bd		15 51		ora $51,x			ora 	NSStatus+1,x
.97bf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97c0		0a		asl a				asl 	a
.97c1		10 05		bpl $97c8			bpl 	_NotRef
.97c3		48		pha				pha
.97c4		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97c7		68		pla				pla
.97c8						_NotRef:
.97c8		0a		asl a				asl 	a
.97c9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97cb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97cd		15 79		ora $79,x			ora 	NSExponent+1,x
.97cf		f0 03		beq $97d4			beq 	_IntegerCode 				; if clear, then we have two integers
.97d1		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.97d4						_IntegerCode:
.97d4		20 da 96	jsr $96da			jsr 	AddCode 					; add the two values
.97d7		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97d9		95 50		sta $50,x			sta 	NSStatus,x
.97db		60		rts				rts
.97dc						ByteIndirect:
.97dc		fa		plx				plx
.97dd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97df		15 51		ora $51,x			ora 	NSStatus+1,x
.97e1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97e2		0a		asl a				asl 	a
.97e3		10 05		bpl $97ea			bpl 	_NotRef
.97e5		48		pha				pha
.97e6		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e9		68		pla				pla
.97ea						_NotRef:
.97ea		0a		asl a				asl 	a
.97eb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97ed		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ef		15 79		ora $79,x			ora 	NSExponent+1,x
.97f1		f0 03		beq $97f6			beq 	_IntegerCode 				; if clear, then we have two integers
.97f3		4c 6b a4	jmp $a46b			jmp 	TypeError 					; anything else, type mismatch.
.97f6						_IntegerCode:
.97f6		20 da 96	jsr $96da			jsr 	AddCode 					; add the two values
.97f9		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.97fb		95 50		sta $50,x			sta 	NSStatus,x
.97fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.97fe						ConvertInt16:
.97fe		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9800		86 60		stx $60				stx 	NSMantissa1
.9802		64 68		stz $68				stz 	NSMantissa2
.9804		64 70		stz $70				stz 	NSMantissa3
.9806		64 50		stz $50				stz 	NSStatus 					; positive integer
.9808		a2 00		ldx #$00			ldx 	#0 							; stack level
.980a		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.980c		80 00		bra $980e			bra 	ConvertInt32
.980e						ConvertInt32:
.980e		5a		phy				phy
.980f		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9811		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9813		10 08		bpl $981d			bpl 	_CI32NotNeg
.9815		48		pha				pha
.9816		a9 2d		lda #$2d			lda 	#'-'
.9818		99 23 06	sta $0623,y			sta 	numberBuffer,y
.981b		c8		iny				iny
.981c		68		pla				pla
.981d						_CI32NotNeg:
.981d		20 2b 98	jsr $982b			jsr 	_CI32DivideConvert 			; recursive conversion
.9820		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9822		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9825		7a		ply				ply
.9826		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9828		a9 23		lda #$23			lda 	#numberBuffer & $FF
.982a		60		rts				rts
.982b						_CI32DivideConvert:
.982b		e8		inx				inx 								; write to next slot up
.982c		20 eb a2	jsr $a2eb			jsr 	NSMSetByte 		 			; write the base out.
.982f		ca		dex				dex
.9830		20 59 95	jsr $9559			jsr 	Int32Divide 				; divide
.9833		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9835		48		pha				pha
.9836		20 16 95	jsr $9516			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9839		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; is it zero ?
.983c		f0 05		beq $9843			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.983e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9840		20 2b 98	jsr $982b			jsr 	_CI32DivideConvert 			; and recusrively call.
.9843						_CI32NoRecurse:
.9843		68		pla				pla 								; remainder
.9844		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9846		90 02		bcc $984a			bcc 	_CI32NotHex
.9848		69 26		adc #$26			adc 	#6+32
.984a						_CI32NotHex:
.984a		69 30		adc #$30			adc 	#48
.984c		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.984f		c8		iny				iny
.9850		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9851						PrecedenceLevel:
>9851		04					.byte	 4	; $00 <<
>9852		02					.byte	 2	; $01 <=
>9853		02					.byte	 2	; $02 <>
>9854		00					.byte	 0	; $03 !!3
>9855		00					.byte	 0	; $04 ><
>9856		02					.byte	 2	; $05 >=
>9857		04					.byte	 4	; $06 >>
>9858		00					.byte	 0	; $07 !!7
>9859		00					.byte	 0	; $08 !!8
>985a		00					.byte	 0	; $09 !!9
>985b		00					.byte	 0	; $0a !!10
>985c		00					.byte	 0	; $0b !!11
>985d		00					.byte	 0	; $0c !!12
>985e		00					.byte	 0	; $0d !!13
>985f		00					.byte	 0	; $0e !!14
>9860		00					.byte	 0	; $0f !!15
>9861		00					.byte	 0	; $10 @
>9862		00					.byte	 0	; $11 !!17
>9863		00					.byte	 0	; $12 !!18
>9864		00					.byte	 0	; $13 [
>9865		04					.byte	 4	; $14 \
>9866		00					.byte	 0	; $15 ]
>9867		01					.byte	 1	; $16 ^
>9868		00					.byte	 0	; $17 _
>9869		00					.byte	 0	; $18 `
>986a		00					.byte	 0	; $19 !!25
>986b		00					.byte	 0	; $1a !!26
>986c		00					.byte	 0	; $1b {
>986d		01					.byte	 1	; $1c |
>986e		00					.byte	 0	; $1d }
>986f		00					.byte	 0	; $1e ~
>9870		00					.byte	 0	; $1f <7F>
>9871		00					.byte	 0	; $20
>9872		05					.byte	 5	; $21 !
>9873		00					.byte	 0	; $22 "
>9874		00					.byte	 0	; $23 #
>9875		05					.byte	 5	; $24 $
>9876		04					.byte	 4	; $25 %
>9877		01					.byte	 1	; $26 &
>9878		00					.byte	 0	; $27 '
>9879		00					.byte	 0	; $28 (
>987a		00					.byte	 0	; $29 )
>987b		04					.byte	 4	; $2a *
>987c		03					.byte	 3	; $2b +
>987d		00					.byte	 0	; $2c ,
>987e		03					.byte	 3	; $2d -
>987f		00					.byte	 0	; $2e .
>9880		04					.byte	 4	; $2f /
>9881		00					.byte	 0	; $30 0
>9882		00					.byte	 0	; $31 1
>9883		00					.byte	 0	; $32 2
>9884		00					.byte	 0	; $33 3
>9885		00					.byte	 0	; $34 4
>9886		00					.byte	 0	; $35 5
>9887		00					.byte	 0	; $36 6
>9888		00					.byte	 0	; $37 7
>9889		00					.byte	 0	; $38 8
>988a		00					.byte	 0	; $39 9
>988b		00					.byte	 0	; $3a :
>988c		00					.byte	 0	; $3b ;
>988d		02					.byte	 2	; $3c <
>988e		02					.byte	 2	; $3d =
>988f		02					.byte	 2	; $3e >
>9890		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9891						EvaluateExpressionAt0:
.9891		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9893						EvaluateExpression:
.9893		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9895						EvaluateExpressionAtPrecedence:
.9895		48		pha				pha 								; save precedence level
.9896		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm 				; evaluate term into level X.
.9899		68		pla				pla 								; restore precedence level.
.989a						_EXPRLoop:
.989a		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.989c		b1 30		lda ($30),y			lda 	(codePtr),y
.989e		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98a0		b0 25		bcs $98c7			bcs 	_EXPRExit
.98a2		da		phx				phx 								; read the operator precedence
.98a3		aa		tax				tax
.98a4		bd 51 98	lda $9851,x			lda 	PrecedenceLevel,x
.98a7		fa		plx				plx
.98a8		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98aa		f0 1b		beq $98c7			beq 	_EXPRExit
.98ac		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98ae		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98b0		c5 37		cmp $37				cmp 	zTemp0+1
.98b2		b0 13		bcs $98c7			bcs		_EXPRExit 					; if current >= operator exit
.98b4		48		pha				pha 								; save current precedence.
.98b5		b1 30		lda ($30),y			lda 	(codePtr),y
.98b7		c8		iny				iny
.98b8		48		pha				pha
.98b9		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98bb		e8		inx				inx 								; work out the right hand side.
.98bc		20 95 98	jsr $9895			jsr 	EvaluateExpressionAtPrecedence
.98bf		ca		dex				dex
.98c0		68		pla				pla 								; get operator, call the code.
.98c1		20 ca 98	jsr $98ca			jsr 	_EXPRCaller
.98c4		68		pla				pla 								; restore precedence level
.98c5		80 d3		bra $989a			bra 	_EXPRLoop 					; and go round.
.98c7						_EXPRExit:
.98c7		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98c9		60		rts				rts
.98ca						_EXPRCaller:
.98ca		da		phx				phx 								; save on stack, first thing is to restore it
.98cb		0a		asl a				asl 	a 							; double so can use vectors into X
.98cc		aa		tax				tax
.98cd		7c f8 8f	jmp ($8ff8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98d0						FloatingPointAdd:
.98d0		20 46 9a	jsr $9a46			jsr 	FloatPrepare 				; prepare for floats
.98d3		80 09		bra $98de			bra 	FloatAdd
.98d5						FloatingPointSub:
.98d5		20 46 9a	jsr $9a46			jsr 	FloatPrepare 				; prepare for floats
.98d8						FloatSubtract:
.98d8		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98da		49 80		eor #$80			eor 	#$80
.98dc		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98de						FloatAdd:
.98de		48		pha				pha
.98df		5a		phy				phy
.98e0		20 55 9a	jsr $9a55			jsr 	NSNormalise 				; normalise S[X]
.98e3		f0 51		beq $9936			beq 	_FAReturn1
.98e5		e8		inx				inx 								; normalise S[X+1]
.98e6		20 55 9a	jsr $9a55			jsr 	NSNormalise
.98e9		ca		dex				dex
.98ea		c9 00		cmp #$00			cmp 	#0
.98ec		f0 60		beq $994e			beq 	_FAExit 					; if so, just return A
.98ee		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.98f0		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.98f2		f0 18		beq $990c			beq 	_FAExponentsEqual
.98f4		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.98f6		a8		tay				tay
.98f7		38		sec				sec 								; do a signed comparison of the exponents.
.98f8		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.98fa		50 02		bvc $98fe			bvc 	_FANoSignedChange
.98fc		49 80		eor #$80			eor 	#$80
.98fe						_FANoSignedChange:
.98fe		29 80		and #$80			and 	#$80
.9900		10 02		bpl $9904			bpl 	_FAHaveMax
.9902		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9904						_FAHaveMax:
.9904		20 51 99	jsr $9951			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9907		e8		inx				inx
.9908		20 51 99	jsr $9951			jsr 	_FAShiftToExponent
.990b		ca		dex				dex
.990c						_FAExponentsEqual:
.990c		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.990e		55 51		eor $51,x			eor 	NSStatus+1,x
.9910		30 0e		bmi $9920			bmi 	_FADifferentSigns
.9912		20 89 96	jsr $9689			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9915		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9917		10 35		bpl $994e			bpl 	_FAExit 					; if no, we are done.
.9919		20 02 a3	jsr $a302			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.991c		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.991e		80 2e		bra $994e			bra 	_FAExit
.9920						_FADifferentSigns:
.9920		20 a3 96	jsr $96a3			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9923		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9925		10 06		bpl $992d			bpl 	_FACheckZero 				; if no, check for -0
.9927		20 ab a2	jsr $a2ab			jsr 	NSMNegate 					; netate result
.992a		20 b2 a2	jsr $a2b2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.992d						_FACheckZero:
.992d		20 0b a3	jsr $a30b			jsr 	NSMIsZero	 				; check for -0
.9930		d0 1c		bne $994e			bne 	_FAExit
.9932		74 50		stz $50,x			stz 	NSStatus,x
.9934		80 18		bra $994e			bra 	_FAExit
.9936						_FAReturn1:
.9936		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9938		95 58		sta $58,x			sta 	NSMantissa0,x
.993a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.993c		95 60		sta $60,x			sta 	NSMantissa1,x
.993e		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9940		95 68		sta $68,x			sta 	NSMantissa2,x
.9942		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9944		95 70		sta $70,x			sta 	NSMantissa3,x
.9946		b5 79		lda $79,x			lda 	NSExponent+1,x
.9948		95 78		sta $78,x			sta 	NSExponent,x
.994a		b5 51		lda $51,x			lda 	NSStatus+1,x
.994c		95 50		sta $50,x			sta 	NSStatus,x
.994e						_FAExit:
.994e		7a		ply				ply
.994f		68		pla				pla
.9950		60		rts				rts
.9951						_FAShiftToExponent:
.9951						_FAShiftToExponent2:
.9951		98		tya				tya 								; compare Y to exponent
.9952		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9954		f0 07		beq $995d			beq 	_FASEExit 					; exit if so.
.9956		20 02 a3	jsr $a302			jsr 	NSMShiftRight	 			; shift the mantissa right
.9959		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.995b		80 f4		bra $9951			bra 	_FAShiftToExponent2
.995d						_FASEExit:
.995d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.995e						CompareFloat:
.995e		20 d8 98	jsr $98d8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9961		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9963		29 f8		and #$f8			and 	#$F8
.9965		15 68		ora $68,x			ora 	NSMantissa2,x
.9967		15 70		ora $70,x			ora 	NSMantissa3,x
.9969		f0 08		beq $9973			beq 	_FCExit 					; zero, so approximately identical
.996b		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.996d		34 50		bit $50,x			bit 	NSStatus,x
.996f		10 02		bpl $9973			bpl 	_FCExit
.9971						_FCNegative:
.9971		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9973						_FCExit:
.9973		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9974						FDivideCommand:
.9974		fa		plx				plx	 								; restore stack position
.9975		20 46 9a	jsr $9a46			jsr 	FloatPrepare 				; prepare for floats
.9978						FloatDivide:
.9978		48		pha				pha
.9979		e8		inx				inx
.997a		20 55 9a	jsr $9a55			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.997d		ca		dex				dex
.997e		c9 00		cmp #$00			cmp 	#0
.9980		f0 1d		beq $999f			beq 	_FDZero
.9982		20 55 9a	jsr $9a55			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9985		f0 16		beq $999d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9987		20 7a 95	jsr $957a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.998a		20 16 95	jsr $9516			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.998d		20 55 9a	jsr $9a55			jsr		NSNormalise 				; renormalise
.9990		20 0a 96	jsr $960a			jsr 	CalculateSign 				; calculate result sign
.9993		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9995		38		sec				sec
.9996		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9998		38		sec				sec
.9999		e9 1e		sbc #$1e			sbc 	#30
.999b		95 78		sta $78,x			sta 	NSExponent,x
.999d						_FDExit:
.999d		68		pla				pla
.999e		60		rts				rts
.999f						_FDZero:
.999f		a9 03		lda #$03		lda	#3
.99a1		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99a4						FloatFractionalPart:
.99a4		5a		phy				phy
.99a5		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99a7		29 7f		and #$7f			and 	#$7F
.99a9		95 50		sta $50,x			sta 	NSStatus,x
.99ab		20 55 9a	jsr $9a55			jsr 	NSNormalise
.99ae		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99b0		38		sec				sec
.99b1		e9 e0		sbc #$e0			sbc 	#$E0
.99b3		90 29		bcc $99de			bcc 	_FFPExit 					; already fractional
.99b5		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99b7		b0 22		bcs $99db			bcs 	_FFPZero
.99b9		a8		tay				tay 								; put count to do in Y
.99ba		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99bc		20 e0 99	jsr $99e0			jsr 	_FFPPartial
.99bf		95 70		sta $70,x			sta 	NSMantissa3,x
.99c1		b5 68		lda $68,x			lda 	NSMantissa2,x
.99c3		20 e0 99	jsr $99e0			jsr 	_FFPPartial
.99c6		95 68		sta $68,x			sta 	NSMantissa2,x
.99c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.99ca		20 e0 99	jsr $99e0			jsr 	_FFPPartial
.99cd		95 60		sta $60,x			sta 	NSMantissa1,x
.99cf		b5 58		lda $58,x			lda 	NSMantissa0,x
.99d1		20 e0 99	jsr $99e0			jsr 	_FFPPartial
.99d4		95 58		sta $58,x			sta 	NSMantissa0,x
.99d6		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; zeroed check.
.99d9		d0 03		bne $99de			bne 	_FFPExit
.99db						_FFPZero:
.99db		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.99de						_FFPExit:
.99de		7a		ply				ply
.99df		60		rts				rts
.99e0						_FFPPartial:
.99e0		c0 00		cpy #$00			cpy 	#0 							; no more to do
.99e2		f0 17		beq $99fb			beq 	_FFFPPExit
.99e4		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99e6		b0 0c		bcs $99f4			bcs 	_FFFPPWholeByte
.99e8		5a		phy				phy
.99e9						_FFFPPLeft:
.99e9		0a		asl a				asl 	a
.99ea		88		dey				dey
.99eb		d0 fc		bne $99e9			bne 	_FFFPPLeft
.99ed		7a		ply				ply
.99ee						_FFFPPRight:
.99ee		4a		lsr a				lsr 	a
.99ef		88		dey				dey
.99f0		d0 fc		bne $99ee			bne 	_FFFPPRight
.99f2		80 07		bra $99fb			bra 	_FFFPPExit
.99f4						_FFFPPWholeByte:
.99f4		98		tya				tya 								; subtract 8 from count
.99f5		38		sec				sec
.99f6		e9 08		sbc #$08			sbc 	#8
.99f8		a8		tay				tay
.99f9		a9 00		lda #$00			lda 	#0 							; and clear all
.99fb						_FFFPPExit:
.99fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.99fc						FloatIntegerPart:
.99fc		48		pha				pha
.99fd		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.99ff		f0 1d		beq $9a1e			beq 	_FIPExit 					; if so do nothing
.9a01		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; is it zero ?
.9a04		f0 15		beq $9a1b			beq 	_FIPZero 					; if so return zero.
.9a06		20 55 9a	jsr $9a55			jsr 	NSNormalise 				; normalise
.9a09		f0 10		beq $9a1b			beq 	_FIPZero 					; normalised to zero, exit zero
.9a0b						_FIPShift:
.9a0b		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a0d		10 07		bpl $9a16			bpl 	_FIPCheckZero
.9a0f		20 02 a3	jsr $a302			jsr 	NSMShiftRight 				; shift mantissa right
.9a12		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a14		80 f5		bra $9a0b			bra 	_FIPShift
.9a16						_FIPCheckZero:
.9a16		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; avoid -0 problem
.9a19		d0 03		bne $9a1e			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a1b						_FIPZero:
.9a1b		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.9a1e						_FIPExit:
.9a1e		68		pla				pla
.9a1f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a20						FloatingPointMultiply:
.9a20		20 46 9a	jsr $9a46			jsr 	FloatPrepare 				; prepare for floats
.9a23						FloatMultiply:
.9a23		48		pha				pha
.9a24		20 55 9a	jsr $9a55			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a27		f0 18		beq $9a41			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a29		e8		inx				inx
.9a2a		20 55 9a	jsr $9a55			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a2d		ca		dex				dex
.9a2e		c9 00		cmp #$00			cmp 	#0
.9a30		f0 0c		beq $9a3e			beq 	_FDSetZero
.9a32		20 cc 95	jsr $95cc			jsr 	MultiplyShort 				; calculate the result.
.9a35		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a37		18		clc				clc
.9a38		75 79		adc $79,x			adc 	NSExponent+1,x
.9a3a		95 78		sta $78,x			sta 	NSExponent,x
.9a3c		80 03		bra $9a41			bra 	_FDExit
.9a3e						_FDSetZero:
.9a3e		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; return 0
.9a41						_FDExit:
.9a41		20 55 9a	jsr $9a55			jsr 	NSNormalise 				; normalise the result
.9a44		68		pla				pla
.9a45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a46						FloatPrepare:
.9a46		20 51 9b	jsr $9b51			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a49		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a4b		15 51		ora $51,x			ora 	NSStatus+1,x
.9a4d		29 10		and #$10			and 	#NSBIsString
.9a4f		d0 01		bne $9a52			bne 	_FDType
.9a51		60		rts				rts
.9a52						_FDType:
.9a52		4c 6b a4	jmp $a46b			jmp 	TypeError
.9a55						NSNormalise:
.9a55		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a57		29 80		and #$80			and 	#$80
.9a59		09 08		ora #$08			ora 	#NSTFloat
.9a5b		95 50		sta $50,x			sta 	NSStatus,x
.9a5d		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; if zero exit
.9a60		d0 07		bne $9a69			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a62		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a64		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a66		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a68		60		rts				rts
.9a69						_NSNormaliseOptimise:
.9a69		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a6b		d0 19		bne $9a86			bne 	_NSNormaliseLoop
.9a6d		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a6f		30 15		bmi $9a86			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a71		95 70		sta $70,x			sta 	NSMantissa3,x
.9a73		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a75		95 68		sta $68,x			sta 	NSMantissa2,x
.9a77		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a79		95 60		sta $60,x			sta 	NSMantissa1,x
.9a7b		74 58		stz $58,x			stz 	NSMantissa0,x
.9a7d		b5 78		lda $78,x			lda 	NSExponent,x
.9a7f		38		sec				sec
.9a80		e9 08		sbc #$08			sbc 	#8
.9a82		95 78		sta $78,x			sta 	NSExponent,x
.9a84		80 e3		bra $9a69			bra 	_NSNormaliseOptimise
.9a86						_NSNormaliseLoop:
.9a86		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a88		70 07		bvs $9a91			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a8a		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; shift mantissa left
.9a8d		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9a8f		80 f5		bra $9a86			bra 	_NSNormaliseLoop
.9a91						_NSNExit:
.9a91		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9a94						AssignNumber:
.9a94		5a		phy				phy
.9a95		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9a97		85 36		sta $36				sta 	zTemp0
.9a99		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a9b		85 37		sta $37				sta 	zTemp0+1
.9a9d		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9a9f		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9aa1		95 50		sta $50,x			sta 	NSStatus,x
.9aa3		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9aa5		c9 08		cmp #$08			cmp 	#NSTFloat
.9aa7		f0 24		beq $9acd			beq 	_ANFloat
.9aa9		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9aab		f0 03		beq $9ab0			beq		_ANNotFloat
.9aad		4c 66 a4	jmp $a466			jmp 	RangeError					; if it is, report an error.
.9ab0						_ANNotFloat:
.9ab0		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ab2		29 03		and #$03			and 	#3
.9ab4		d0 05		bne $9abb			bne 	_ANByteWord
.9ab6		20 d8 9a	jsr $9ad8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ab9		80 1b		bra $9ad6			bra 	_ANExit
.9abb						_ANByteWord:
.9abb		48		pha				pha 								; save count
.9abc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9abe		92 36		sta ($36)			sta 	(zTemp0)
.9ac0		68		pla				pla
.9ac1		c9 01		cmp #$01			cmp	 	#1
.9ac3		f0 11		beq $9ad6			beq 	_ANExit
.9ac5		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ac7		a0 01		ldy #$01			ldy 	#1
.9ac9		91 36		sta ($36),y			sta 	(zTemp0),y
.9acb		80 09		bra $9ad6			bra 	_ANExit
.9acd						_ANFloat:
.9acd		20 d8 9a	jsr $9ad8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ad0		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ad2		a0 04		ldy #$04			ldy 	#4
.9ad4		91 36		sta ($36),y			sta 	(zTemp0),y
.9ad6						_ANExit:
.9ad6		7a		ply				ply
.9ad7		60		rts				rts
.9ad8						_ANCopy4PackSign:
.9ad8		a0 03		ldy #$03			ldy 	#3
.9ada		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9adc		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ade		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9ae0		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae2		88		dey				dey
.9ae3		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9ae5		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae7		88		dey				dey
.9ae8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9aea		91 36		sta ($36),y			sta 	(zTemp0),y
.9aec		88		dey				dey
.9aed		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9aef		91 36		sta ($36),y			sta 	(zTemp0),y
.9af1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9af2						AssignString:
.9af2		5a		phy				phy
.9af3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9af5		85 38		sta $38				sta 	zTemp1
.9af7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9af9		85 39		sta $39				sta 	zTemp1+1
.9afb		b5 58		lda $58,x			lda 	NSMantissa0,x
.9afd		85 36		sta $36				sta 	zTemp0
.9aff		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b01		85 37		sta $37				sta 	zTemp0+1
.9b03		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b05		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b07		f0 23		beq $9b2c			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b09		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b0a		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b0c		e9 02		sbc #$02			sbc 	#2
.9b0e		85 3c		sta $3c				sta 	zsTemp
.9b10		a0 01		ldy #$01			ldy 	#1
.9b12		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b14		e9 00		sbc #$00			sbc 	#0
.9b16		85 3d		sta $3d				sta 	zsTemp+1
.9b18		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b1a						_ASGetLength:
.9b1a		c8		iny				iny
.9b1b		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b1d		d0 fb		bne $9b1a			bne 	_ASGetLength
.9b1f		98		tya				tya 								; is this length <= current length
.9b20		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b22		90 1e		bcc $9b42			bcc 	_ASCopyString
.9b24		f0 1c		beq $9b42			beq 	_ASCopyString
.9b26		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b28		a0 01		ldy #$01			ldy 	#1
.9b2a		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b2c						_ASNewStringRequired:
.9b2c		e8		inx				inx 								; concrete the new string.
.9b2d		20 80 b3	jsr $b380			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b30		ca		dex				dex
.9b31		18		clc				clc
.9b32		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b34		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b36		92 36		sta ($36)			sta 	(zTemp0)
.9b38		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b3a		69 00		adc #$00			adc 	#0
.9b3c		a0 01		ldy #$01			ldy 	#1
.9b3e		91 36		sta ($36),y			sta 	(zTemp0),y
.9b40		80 0d		bra $9b4f			bra 	_ASExit
.9b42						_ASCopyString:
.9b42		a0 00		ldy #$00			ldy 	#0
.9b44						_ASCopyLoop:
.9b44		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b46		c8		iny				iny
.9b47		c8		iny				iny
.9b48		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b4a		88		dey				dey
.9b4b		c9 00		cmp #$00			cmp 	#0
.9b4d		d0 f5		bne $9b44			bne 	_ASCopyLoop
.9b4f						_ASExit:
.9b4f		7a		ply				ply
.9b50		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b51						DereferenceTopTwo:
.9b51		e8		inx				inx
.9b52		20 56 9b	jsr $9b56			jsr 	Dereference 				; deref x+1
.9b55		ca		dex				dex  								; falls through to deref x
.9b56						Dereference:
.9b56		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b58		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b5a		f0 48		beq $9ba4			beq 	_DRFExit 					; not a reference, so exit.
.9b5c		5a		phy				phy
.9b5d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b5f		85 36		sta $36				sta 	zTemp0
.9b61		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b63		85 37		sta $37				sta 	zTemp0+1
.9b65		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b67		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b69		95 58		sta $58,x			sta 	NSMantissa0,x
.9b6b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b6d		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b6f		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b71		f0 0e		beq $9b81			beq 	_DRFDereferenceTwo
.9b73		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b75		f0 2f		beq $9ba6			beq 	_DRFFull
.9b77		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b79		29 03		and #$03			and 	#3
.9b7b		f0 29		beq $9ba6			beq 	_DRFFull 					; the whole word
.9b7d		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b7f		f0 06		beq $9b87			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b81						_DRFDereferenceTwo:
.9b81		a0 01		ldy #$01			ldy 	#1
.9b83		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b85		95 60		sta $60,x			sta 	NSMantissa1,x
.9b87						_DRFClear23:
.9b87		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b89		74 70		stz $70,x			stz 	NSMantissa3,x
.9b8b		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9b8d		29 18		and #$18			and 	#NSBTypeMask
.9b8f		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9b91		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9b93		d0 0e		bne $9ba3			bne 	_DRFNotString
.9b95		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9b97		15 60		ora $60,x			ora 	NSMantissa1,x
.9b99		d0 08		bne $9ba3			bne 	_DRFNotString
.9b9b		a9 a5		lda #$a5			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9b9d		95 58		sta $58,x			sta 	NSMantissa0,x
.9b9f		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9ba1		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba3						_DRFNotString
.9ba3		7a		ply				ply 								; restore Y and exit
.9ba4						_DRFExit:
.9ba4		60		rts				rts
.9ba5						_DRFNullString:
>9ba5		00						.byte 	0
.9ba6						_DRFFull:
.9ba6		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9ba8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9baa		95 60		sta $60,x			sta 	NSMantissa1,x
.9bac		c8		iny				iny
.9bad		b1 36		lda ($36),y			lda 	(zTemp0),y
.9baf		95 68		sta $68,x			sta 	NSMantissa2,x
.9bb1		c8		iny				iny
.9bb2		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bb4		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb6		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9bb8		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9bba		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9bbc		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bbe		f0 05		beq $9bc5			beq 	_DRFNoExponent
.9bc0		c8		iny				iny 								; if not, read the exponent as well.
.9bc1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bc3		95 78		sta $78,x			sta 	NSExponent,x
.9bc5						_DRFNoExponent:
.9bc5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bc7		10 0a		bpl $9bd3			bpl 	_DRFExit2 					; if not, then exit.
.9bc9		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bcb		95 70		sta $70,x			sta 	NSMantissa3,x
.9bcd		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bcf		09 80		ora #$80			ora 	#NSBIsNegative
.9bd1		95 50		sta $50,x			sta 	NSStatus,x
.9bd3						_DRFExit2:
.9bd3		7a		ply				ply
.9bd4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9bd5						EncodeNumberStart:
.9bd5		38		sec				sec
.9bd6		80 01		bra $9bd9			bra 	EncodeNumberContinue+1
.9bd8						EncodeNumberContinue:
.9bd8		18		clc				clc
.9bd9						EncodeNumber:
.9bd9		08		php				php 								; save reset flag.
.9bda		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bdc		f0 12		beq $9bf0			beq 	_ENIsOkay
.9bde		c9 30		cmp #$30			cmp 	#"0"
.9be0		90 04		bcc $9be6			bcc 	_ENBadNumber
.9be2		c9 3a		cmp #$3a			cmp 	#"9"+1
.9be4		90 0a		bcc $9bf0			bcc 	_ENIsOkay
.9be6						_ENBadNumber:
.9be6		28		plp				plp 								; throw saved reset
.9be7		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9bea		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9bec		f0 7b		beq $9c69			beq 	_ENConstructFinal
.9bee						_ENFail:
.9bee		18		clc				clc 								; not allowed
.9bef		60		rts				rts
.9bf0						_ENIsOkay:
.9bf0		28		plp				plp 								; are we restarting
.9bf1		90 15		bcc $9c08			bcc 	_ENNoRestart
.9bf3						_ENStartEncode:
.9bf3		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9bf5		f0 0c		beq $9c03			beq 	_ENFirstDP
.9bf7		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9bf9		20 eb a2	jsr $a2eb			jsr 	NSMSetByte 					; in single byte mode.
.9bfc		a9 01		lda #$01			lda 	#ESTA_Low
.9bfe						_ENExitChange:
.9bfe		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9c01		38		sec				sec
.9c02		60		rts				rts
.9c03						_ENFirstDP:
.9c03		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; clear integer part
.9c06		80 3c		bra $9c44			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c08						_ENNoRestart:
.9c08		48		pha				pha 								; save digit or DP on stack.
.9c09		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c0c		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c0e		f0 09		beq $9c19			beq  	_ESTALowState
.9c10		c9 02		cmp #$02			cmp 	#ESTA_High
.9c12		f0 26		beq $9c3a			beq 	_ESTAHighState
.9c14		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c16		f0 38		beq $9c50			beq 	_ESTADecimalState
>9c18		db						.byte 	$DB 						; causes a break in the emulator
.9c19						_ESTALowState:
.9c19		68		pla				pla 								; get value back
.9c1a		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c1c		f0 26		beq $9c44			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c1e		29 0f		and #$0f			and 	#15 						; make digit
.9c20		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c23		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c25		0a		asl a				asl 	a
.9c26		0a		asl a				asl 	a
.9c27		75 58		adc $58,x			adc 	NSMantissa0,x
.9c29		0a		asl a				asl 	a
.9c2a		6d 06 04	adc $0406			adc 	digitTemp
.9c2d		95 58		sta $58,x			sta 	NSMantissa0,x
.9c2f		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c31		90 05		bcc $9c38			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c33		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c35		8d 05 04	sta $0405			sta 	encodeState
.9c38						_ESTANoSwitch:
.9c38		38		sec				sec
.9c39		60		rts				rts
.9c3a						_ESTAHighState:
.9c3a		68		pla				pla 								; get value back
.9c3b		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c3d		f0 05		beq $9c44			beq 	_ESTASwitchFloat
.9c3f		20 9d 9c	jsr $9c9d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c42		38		sec				sec
.9c43		60		rts				rts
.9c44						_ESTASwitchFloat:
.9c44		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c47		e8		inx				inx 								; zero the decimal additive.
.9c48		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.9c4b		ca		dex				dex
.9c4c		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c4e		80 ae		bra $9bfe			bra 	_ENExitChange
.9c50						_ESTADecimalState:
.9c50		68		pla				pla 								; digit.
.9c51		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c53		f0 99		beq $9bee			beq 	_ENFail
.9c55		e8		inx				inx 								; put digit into fractional part of X+1
.9c56		20 9d 9c	jsr $9c9d			jsr 	ESTAShiftDigitIntoMantissa
.9c59		ca		dex				dex
.9c5a		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c5d		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c60		c9 0b		cmp #$0b			cmp 	#11
.9c62		f0 02		beq $9c66			beq 	_ESTADSFail
.9c64		38		sec				sec
.9c65		60		rts				rts
.9c66						_ESTADSFail:
.9c66		4c 66 a4	jmp $a466			jmp 	RangeError
.9c69						_ENConstructFinal:
.9c69		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c6c		f0 2d		beq $9c9b			beq 	_ENCFExit 					; no decimals
.9c6e		5a		phy				phy
.9c6f		0a		asl a				asl 	a 							; x 4 and CLC
.9c70		0a		asl a				asl 	a
.9c71		6d 07 04	adc $0407			adc 	decimalCount
.9c74		a8		tay				tay
.9c75		b9 25 a4	lda $a425,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c78		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c7a		b9 26 a4	lda $a426,y			lda 	DecimalScalarTable-5+1,y
.9c7d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c7f		b9 27 a4	lda $a427,y			lda 	DecimalScalarTable-5+2,y
.9c82		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9c84		b9 28 a4	lda $a428,y			lda 	DecimalScalarTable-5+3,y
.9c87		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9c89		b9 29 a4	lda $a429,y			lda 	DecimalScalarTable-5+4,y
.9c8c		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9c8e		a9 08		lda #$08			lda 	#NSTFloat
.9c90		95 52		sta $52,x			sta 	NSStatus+2,x
.9c92		7a		ply				ply
.9c93		e8		inx				inx 								; multiply decimal const by decimal scalar
.9c94		20 23 9a	jsr $9a23			jsr 	FloatMultiply
.9c97		ca		dex				dex
.9c98		20 de 98	jsr $98de			jsr 	FloatAdd 					; add to integer part.
.9c9b						_ENCFExit:
.9c9b		18		clc				clc 								; reject the digit.
.9c9c		60		rts				rts
.9c9d						ESTAShiftDigitIntoMantissa:
.9c9d		29 0f		and #$0f			and 	#15 						; save digit
.9c9f		48		pha				pha
.9ca0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9ca2		48		pha				pha
.9ca3		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ca5		48		pha				pha
.9ca6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ca8		48		pha				pha
.9ca9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cab		48		pha				pha
.9cac		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 2
.9caf		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 4
.9cb2		18		clc				clc 								; pop mantissa and add
.9cb3		68		pla				pla
.9cb4		75 58		adc $58,x			adc 	NSMantissa0,x
.9cb6		95 58		sta $58,x			sta 	NSMantissa0,x
.9cb8		68		pla				pla
.9cb9		75 60		adc $60,x			adc 	NSMantissa1,x
.9cbb		95 60		sta $60,x			sta 	NSMantissa1,x
.9cbd		68		pla				pla
.9cbe		75 68		adc $68,x			adc 	NSMantissa2,x
.9cc0		95 68		sta $68,x			sta 	NSMantissa2,x
.9cc2		68		pla				pla
.9cc3		75 70		adc $70,x			adc 	NSMantissa3,x
.9cc5		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cc7		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 10
.9cca		68		pla				pla 								; add digit
.9ccb		18		clc				clc
.9ccc		75 58		adc $58,x			adc 	NSMantissa0,x
.9cce		95 58		sta $58,x			sta 	NSMantissa0,x
.9cd0		90 0a		bcc $9cdc			bcc 	_ESTASDExit
.9cd2		f6 60		inc $60,x			inc 	NSMantissa1,x
.9cd4		d0 06		bne $9cdc			bne 	_ESTASDExit
.9cd6		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cd8		d0 02		bne $9cdc			bne 	_ESTASDExit
.9cda		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cdc						_ESTASDExit:
.9cdc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cdd						EvaluateTerm:
.9cdd		b1 30		lda ($30),y			lda 	(codePtr),y
.9cdf		30 18		bmi $9cf9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9ce1		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ce3		b0 6c		bcs $9d51			bcs 	_ETVariable
.9ce5		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ce7		90 6b		bcc $9d54			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ce9		c9 3a		cmp #$3a			cmp 	#'9'+1
.9ceb		b0 67		bcs $9d54			bcs 	_ETPuncUnary
.9ced		20 d5 9b	jsr $9bd5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9cf0						_ETNumber:
.9cf0		c8		iny				iny 								; keep encoding until we have the numbers
.9cf1		b1 30		lda ($30),y			lda 	(codePtr),y
.9cf3		20 d8 9b	jsr $9bd8			jsr 	EncodeNumberContinue
.9cf6		b0 f8		bcs $9cf0			bcs 	_ETNumber 					; go back if accepted.
.9cf8		60		rts				rts
.9cf9						_ETCheckUnary:
.9cf9		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9cfb		f0 3f		beq $9d3c			beq 	_ETString
.9cfd		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9cff		f0 12		beq $9d13			beq 	_ETHexConstant
.9d01		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d03		90 0b		bcc $9d10			bcc 	_ETSyntaxError
.9d05		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d07		b0 07		bcs $9d10			bcs 	_ETSyntaxError
.9d09		da		phx				phx 								; push X on the stack
.9d0a		0a		asl a				asl 	a 							; put vector x 2 into X
.9d0b		aa		tax				tax
.9d0c		c8		iny				iny 								; consume unary function token
.9d0d		7c 78 90	jmp ($9078,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d10						_ETSyntaxError:
.9d10		4c 61 a4	jmp $a461			jmp 	SyntaxError
.9d13						_ETHexConstant:
.9d13		c8		iny				iny 								; skip #
.9d14		c8		iny				iny 								; skip count
.9d15		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; clear result
.9d18						_ETHLoop:
.9d18		b1 30		lda ($30),y			lda 	(codePtr),y
.9d1a		c8		iny				iny 								; and consume
.9d1b		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d1d		f0 1c		beq $9d3b			beq 	_ETHExit
.9d1f		48		pha				pha 								; save on stack.
.9d20		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 2
.9d23		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 4
.9d26		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 8
.9d29		20 f8 a2	jsr $a2f8			jsr 	NSMShiftLeft 				; x 16
.9d2c		68		pla				pla 								; ASCII
.9d2d		c9 41		cmp #$41			cmp 	#'A'
.9d2f		90 02		bcc $9d33			bcc 	_ETHNotChar
.9d31		e9 07		sbc #$07			sbc 	#7
.9d33						_ETHNotChar:
.9d33		29 0f		and #$0f			and 	#15 						; digit now
.9d35		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d37		95 58		sta $58,x			sta 	NSMantissa0,x
.9d39		80 dd		bra $9d18			bra 	_ETHLoop 					; go round.
.9d3b						_ETHExit:
.9d3b		60		rts				rts
.9d3c						_ETString:
.9d3c		c8		iny				iny 								; look at length
.9d3d		b1 30		lda ($30),y			lda 	(codePtr),y
.9d3f		48		pha				pha
.9d40		c8		iny				iny 								; first character
.9d41		20 e8 a6	jsr $a6e8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d44		68		pla				pla 								; restore count and save
.9d45		85 36		sta $36				sta 	zTemp0
.9d47		98		tya				tya 								; add length to Y to skip it.
.9d48		18		clc				clc
.9d49		65 36		adc $36				adc 	zTemp0
.9d4b		a8		tay				tay
.9d4c		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d4e		95 50		sta $50,x			sta 	NSStatus,x
.9d50		60		rts				rts
.9d51						_ETVariable:
.9d51		4c a6 9d	jmp $9da6			jmp 	VariableHandler
.9d54						_ETPuncUnary:
.9d54		c8		iny				iny 								; consume the unary character
.9d55		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d57		f0 2b		beq $9d84			beq 	_ETUnaryNegate
.9d59		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9d5b		f0 36		beq $9d93			beq 	_ETDereference
.9d5d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d5f		f0 3e		beq $9d9f			beq 	_ETParenthesis
.9d61		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d63		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d65		f0 06		beq $9d6d			beq 	_ETIndirection
.9d67		e6 36		inc $36				inc 	zTemp0
.9d69		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d6b		d0 a3		bne $9d10			bne 	_ETSyntaxError
.9d6d						_ETIndirection:
.9d6d		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d6f		1a		inc a				inc 	a
.9d70		48		pha				pha
.9d71		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm				; evaluate the term
.9d74		20 56 9b	jsr $9b56			jsr 	Dereference 				; dereference it.
.9d77		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d79		d0 06		bne $9d81			bne 	_ETTypeMismatch
.9d7b		68		pla				pla 								; indirection 1-2
.9d7c		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d7e		95 50		sta $50,x			sta 	NSStatus,x
.9d80		60		rts				rts
.9d81						_ETTypeMismatch:
.9d81		4c 6b a4	jmp $a46b			jmp 	TypeError
.9d84						_ETUnaryNegate:
.9d84		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm				; evaluate the term
.9d87		20 56 9b	jsr $9b56			jsr 	Dereference 				; dereference it.
.9d8a		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9d8c		29 10		and #$10			and 	#NSTString
.9d8e		d0 f1		bne $9d81			bne 	_ETTypeMismatch
.9d90		4c ab a2	jmp $a2ab			jmp 	NSMNegate  					; just toggles the sign bit.
.9d93						_ETDereference:
.9d93		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm				; evaluate the term
.9d96		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9d98		29 20		and #$20			and 	#NSBIsReference
.9d9a		f0 e5		beq $9d81			beq 	_ETTypeMismatch
.9d9c		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9d9e		60		rts				rts
.9d9f						_ETParenthesis:
.9d9f		20 93 98	jsr $9893			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9da2		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; check for )
.9da5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9da6						VariableHandler:
.9da6		b1 30		lda ($30),y			lda 	(codePtr),y
.9da8		18		clc				clc
.9da9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9dab		85 37		sta $37				sta 	zTemp0+1
.9dad		c8		iny				iny
.9dae		b1 30		lda ($30),y			lda 	(codePtr),y
.9db0		85 36		sta $36				sta 	zTemp0
.9db2		c8		iny				iny
.9db3		18		clc				clc									; copy variable address+3 to mantissa
.9db4		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9db6		95 58		sta $58,x			sta 	NSMantissa0,x
.9db8		a5 37		lda $37				lda 	zTemp0+1
.9dba		69 00		adc #$00			adc 	#0
.9dbc		95 60		sta $60,x			sta 	NSMantissa1,x
.9dbe		74 68		stz $68,x			stz 	NSMantissa2,x
.9dc0		74 70		stz $70,x			stz 	NSMantissa3,x
.9dc2		74 78		stz $78,x			stz 	NSExponent,x
.9dc4		5a		phy				phy
.9dc5		a0 02		ldy #$02			ldy 	#2 							; read type
.9dc7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc9		7a		ply				ply
.9dca		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9dcc		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dce		95 50		sta $50,x			sta 	NSStatus,x
.9dd0		29 04		and #$04			and 	#NSBIsArray
.9dd2		d0 01		bne $9dd5			bne 	_VHArray
.9dd4		60		rts				rts
.9dd5						_VHArray:
.9dd5		e8		inx				inx
.9dd6		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9dd9		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9ddb		95 51		sta $51,x			sta 	NSStatus+1,x
.9ddd		b1 30		lda ($30),y			lda 	(codePtr),y
.9ddf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9de1		d0 06		bne $9de9			bne 	_VHNoSecondIndex
.9de3		c8		iny				iny 								; skip the comma
.9de4		e8		inx				inx
.9de5		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9de8		ca		dex				dex
.9de9						_VHNoSecondIndex:
.9de9		ca		dex				dex 								; set X back.
.9dea		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; and check the right bracket.
.9ded		5a		phy				phy 								; save position
.9dee		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9df0		85 3e		sta $3e				sta 	zaTemp
.9df2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df4		85 3f		sta $3f				sta 	zaTemp+1
.9df6		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9df8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dfa		f0 5d		beq $9e59			beq 	_VHBadArray
.9dfc		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9dfe		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e00		f0 02		beq $9e04			beq 	_VHHas2Mask
.9e02		a9 ff		lda #$ff			lda 	#$FF
.9e04						_VHHas2Mask:
.9e04		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e06		f0 4c		beq $9e54			beq 	_VHBadIndex
.9e08		0a		asl a				asl 	a 							; carry will be set if a second index
.9e09		90 08		bcc $9e13			bcc 	_VHCheckFirstIndex
.9e0b		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e0d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e0f		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e11		90 41		bcc $9e54			bcc 	_VHBadIndex
.9e13						_VHCheckFirstIndex:
.9e13		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e15		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e17		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e19		90 39		bcc $9e54			bcc 	_VHBadIndex
.9e1b		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e1d		64 37		stz $37				stz 	zTemp0+1
.9e1f		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e21		30 0e		bmi $9e31			bmi 	_VHNoMultiply
.9e23		da		phx				phx
.9e24		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e26		48		pha				pha
.9e27		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e29		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e2b		1a		inc a				inc 	a 							; add 1 for zero base
.9e2c		fa		plx				plx
.9e2d		20 94 a2	jsr $a294			jsr 	Multiply8x8 				; calculate -> Z0
.9e30		fa		plx				plx
.9e31						_VHNoMultiply:
.9e31		18		clc				clc
.9e32		a5 36		lda $36				lda 	zTemp0
.9e34		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e36		85 36		sta $36				sta 	zTemp0
.9e38		a5 37		lda $37				lda 	zTemp0+1
.9e3a		69 00		adc #$00			adc 	#0
.9e3c		85 37		sta $37				sta 	zTemp0+1
.9e3e		b5 50		lda $50,x			lda 	NSStatus,x
.9e40		20 27 89	jsr $8927			jsr 	ScaleByBaseType
.9e43		18		clc				clc
.9e44		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e46		65 36		adc $36				adc 	zTemp0
.9e48		95 58		sta $58,x			sta 	NSMantissa0,x
.9e4a		a0 01		ldy #$01			ldy 	#1
.9e4c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e4e		65 37		adc $37				adc 	zTemp0+1
.9e50		95 60		sta $60,x			sta 	NSMantissa1,x
.9e52		7a		ply				ply 								; restore position
.9e53		60		rts				rts
.9e54						_VHBadIndex:
.9e54		a9 17		lda #$17		lda	#23
.9e56		4c 89 93	jmp $9389		jmp	ErrorHandler
.9e59						_VHBadArray:
.9e59		a9 18		lda #$18		lda	#24
.9e5b		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e5e						AbsUnary:
.9e5e		fa		plx				plx 								; restore stack pos
.9e5f		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; get a float or int
.9e62		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9e65		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e67		29 7f		and #$7f			and 	#$7F
.9e69		95 50		sta $50,x			sta 	NSStatus,x
.9e6b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e6c						AllocUnary:
.9e6c		fa		plx				plx 								; restore stack pos
.9e6d		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger		; get bytes required.
.9e70		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9e73		da		phx				phx 								; save X/Y
.9e74		5a		phy				phy
.9e75		8a		txa				txa 								; copy X into Y
.9e76		a8		tay				tay
.9e77		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e7a		aa		tax				tax
.9e7b		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e7e		20 8b 9e	jsr $9e8b			jsr 	AllocateXABytes 			; allocate memory
.9e81		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9e84		8a		txa				txa 	 							; typing is 16 bit integer.
.9e85		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9e88		7a		ply				ply
.9e89		fa		plx				plx
.9e8a		60		rts				rts
.9e8b						AllocateXABytes:
.9e8b		5a		phy				phy
.9e8c		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9e8f		84 36		sty $36				sty 	zTemp0
.9e91		5a		phy				phy
.9e92		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9e95		84 37		sty $37				sty 	zTemp0+1
.9e97		5a		phy				phy
.9e98		18		clc				clc 								; add to low memory pointer
.9e99		6d 08 04	adc $0408			adc 	lowMemPtr
.9e9c		8d 08 04	sta $0408			sta 	lowMemPtr
.9e9f		8a		txa				txa
.9ea0		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9ea3		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9ea6		b0 2f		bcs $9ed7			bcs 	CISSMemory
.9ea8		20 c9 9e	jsr $9ec9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9eab						_ClearMemory:
.9eab		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9eae		c5 36		cmp $36				cmp 	zTemp0
.9eb0		d0 07		bne $9eb9			bne 	_CMClearNext
.9eb2		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9eb5		c5 37		cmp $37				cmp 	zTemp0+1
.9eb7		f0 0c		beq $9ec5			beq 	_CMExit
.9eb9						_CMClearNext:
.9eb9		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9ebb		92 36		sta ($36)			sta 	(zTemp0)
.9ebd		e6 36		inc $36				inc 	zTemp0
.9ebf		d0 ea		bne $9eab			bne 	_ClearMemory
.9ec1		e6 37		inc $37				inc		zTemp0+1
.9ec3		80 e6		bra $9eab			bra 	_ClearMemory
.9ec5						_CMExit:
.9ec5		fa		plx				plx
.9ec6		68		pla				pla
.9ec7		7a		ply				ply
.9ec8		60		rts				rts
.9ec9						CheckIdentifierStringSpace:
.9ec9		48		pha				pha
.9eca		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9ecd		18		clc				clc
.9ece		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ed0		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9ed3		b0 02		bcs $9ed7			bcs 	CISSMemory
.9ed5		68		pla				pla
.9ed6		60		rts				rts
.9ed7						CISSMemory:
.9ed7		a9 06		lda #$06		lda	#6
.9ed9		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9edc						AscUnary:
.9edc		fa		plx				plx 								; restore stack pos
.9edd		20 41 a2	jsr $a241			jsr 	EvaluateString 				; get a string
.9ee0		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9ee2		20 eb a2	jsr $a2eb			jsr 	NSMSetByte 					; ASC("") will return zero.
.9ee5		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9ee8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ee9						FracUnary:
.9ee9		fa		plx				plx 								; restore stack pos
.9eea		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; get a float or int
.9eed		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9ef0		b5 50		lda $50,x			lda 	NSStatus,x
.9ef2		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ef4		f0 04		beq $9efa			beq 	_IUZero
.9ef6		20 a4 99	jsr $99a4			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ef9		60		rts				rts
.9efa						_IUZero:
.9efa		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.9efd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9efe						IntUnary:
.9efe		fa		plx				plx 								; restore stack pos
.9eff		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; get a float or int
.9f02		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9f05		b5 50		lda $50,x			lda 	NSStatus,x
.9f07		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f09		f0 03		beq $9f0e			beq 	_IUExit
.9f0b		20 fc 99	jsr $99fc			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f0e						_IUExit:
.9f0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f0f						LenUnary:
.9f0f		fa		plx				plx 								; restore stack pos
.9f10		20 41 a2	jsr $a241			jsr 	EvaluateString 				; get a string
.9f13		5a		phy				phy
.9f14		a0 00		ldy #$00			ldy 	#0 							; find length
.9f16						_LenFind:
.9f16		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f18		f0 06		beq $9f20			beq 	_LenExit
.9f1a		c8		iny				iny
.9f1b		d0 f9		bne $9f16			bne 	_LenFind
.9f1d		4c 66 a4	jmp $a466			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f20						_LenExit:
.9f20		98		tya				tya		 							; return length
.9f21		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.9f24		7a		ply				ply
.9f25		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9f28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f29						Unary_Min:
.9f29		a9 01		lda #$01			lda 	#1
.9f2b		80 02		bra $9f2f			bra 	UnaryMinMaxMain
.9f2d						Unary_Max:
.9f2d		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f2f						UnaryMinMaxMain:
.9f2f		fa		plx				plx 								; get index on number stack
.9f30		48		pha				pha 								; save comparator
.9f31		20 2e a2	jsr $a22e			jsr 	EvaluateValue 				; get the first value.
.9f34						_UMMMLoop:
.9f34		b1 30		lda ($30),y			lda 	(codePtr),y
.9f36		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f38		f0 22		beq $9f5c			beq 	_UMMMDone
.9f3a		20 78 93	jsr $9378			jsr 	CheckComma 					; must be a comma
.9f3d		e8		inx				inx
.9f3e		20 2e a2	jsr $a22e			jsr 	EvaluateValue
.9f41		ca		dex				dex
.9f42		20 cc a2	jsr $a2cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f45		e8		inx				inx
.9f46		20 cc a2	jsr $a2cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f49		e8		inx				inx
.9f4a		20 46 94	jsr $9446			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f4d		ca		dex				dex
.9f4e		ca		dex				dex
.9f4f		85 36		sta $36				sta 	zTemp0 						; save required result
.9f51		68		pla				pla 								; get and save comparator
.9f52		48		pha				pha
.9f53		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f55		d0 dd		bne $9f34			bne 	_UMMMLoop
.9f57		20 5f 9f	jsr $9f5f			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f5a		80 d8		bra $9f34			bra 	_UMMMLoop
.9f5c						_UMMMDone:
.9f5c		68		pla				pla 								; throw the comparator
.9f5d		c8		iny				iny 								; skip )
.9f5e		60		rts				rts
.9f5f						ExpCopyAboveDown:
.9f5f		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f61		95 50		sta $50,x			sta 	NSStatus,x
.9f63		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f65		95 78		sta $78,x			sta 	NSExponent,x
.9f67		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f69		95 58		sta $58,x			sta 	NSMantissa0,x
.9f6b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f6d		95 60		sta $60,x			sta 	NSMantissa1,x
.9f6f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f71		95 68		sta $68,x			sta 	NSMantissa2,x
.9f73		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f75		95 70		sta $70,x			sta 	NSMantissa3,x
.9f77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f78						Unary_Not:
.9f78		fa		plx				plx
.9f79		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; get integer
.9f7c		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9f7f		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; zero mantissa ?
.9f82		f0 04		beq $9f88			beq 	_NotZero
.9f84		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.9f87		60		rts				rts
.9f88						_NotZero:
.9f88		4c fc 93	jmp $93fc			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9f8b						PeekByteUnary:
.9f8b		a9 01		lda #$01			lda 	#1
.9f8d		80 0a		bra $9f99			bra 	PeekUnary
.9f8f						PeekWUnary:
.9f8f		a9 02		lda #$02			lda 	#2
.9f91		80 06		bra $9f99			bra 	PeekUnary
.9f93						PeekLUnary:
.9f93		a9 03		lda #$03			lda 	#3
.9f95		80 02		bra $9f99			bra 	PeekUnary
.9f97						PeekDUnary:
.9f97		a9 04		lda #$04			lda 	#4
.9f99						PeekUnary:
.9f99		fa		plx				plx 								; restore position.
.9f9a		48		pha				pha 								; save count to copy on stack
.9f9b		20 69 a2	jsr $a269			jsr		Evaluate16BitInteger 		; address as constant.
.9f9e		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9fa1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fa3		85 36		sta $36				sta 	zTemp0
.9fa5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fa7		85 37		sta $37				sta 	zTemp0+1
.9fa9		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; clear the result to zero.
.9fac		68		pla				pla 								; count in zTemp2
.9fad		85 3a		sta $3a				sta 	zTemp2
.9faf		da		phx				phx 								; save stack position and offset of read
.9fb0		5a		phy				phy
.9fb1		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fb3						_PULoop:
.9fb3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fb5		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fb7		c8		iny				iny 								; next byte to write
.9fb8		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fb9		18		clc				clc
.9fba		69 08		adc #$08			adc 	#MathStackSize
.9fbc		aa		tax				tax
.9fbd		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fbf		d0 f2		bne $9fb3			bne 	_PULoop
.9fc1		7a		ply				ply 								; restore stack/code pos and exit.
.9fc2		fa		plx				plx
.9fc3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9fc4						SgnUnary:
.9fc4		fa		plx				plx 								; restore stack pos
.9fc5		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; get a float or int
.9fc8		20 70 93	jsr $9370			jsr 	CheckRightBracket
.9fcb		20 0b a3	jsr $a30b			jsr 	NSMIsZero 					; if zero
.9fce		f0 0e		beq $9fde			beq 	_SGZero  					; return Int Zero
.9fd0		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9fd2		48		pha				pha
.9fd3		a9 01		lda #$01			lda 	#1 							; set to 1
.9fd5		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.9fd8		68		pla				pla
.9fd9		29 80		and #$80			and		#$80 						; copy the sign byte out
.9fdb		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9fdd		60		rts				rts
.9fde		20 e9 a2	jsr $a2e9	_SGZero:jsr 	NSMSetZero
.9fe1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9fe2						ValUnary:
.9fe2		fa		plx				plx 								; restore stack pos
.9fe3		20 f8 9f	jsr $9ff8			jsr 	ValMainCode 				; do the main val() code
.9fe6		b0 01		bcs $9fe9			bcs 	_VUError 					; couldn't convert
.9fe8		60		rts				rts
.9fe9						_VUError:
.9fe9		4c 6b a4	jmp $a46b			jmp 	TypeError
.9fec						IsValUnary:
.9fec		fa		plx				plx 								; restore stack pos
.9fed		20 f8 9f	jsr $9ff8			jsr 	ValMainCode 				; do the main val() code
.9ff0		b0 03		bcs $9ff5			bcs 	_VUBad
.9ff2		4c fc 93	jmp $93fc			jmp 	ReturnTrue
.9ff5						_VUBad:
.9ff5		4c 07 94	jmp $9407			jmp 	ReturnFalse
.9ff8						ValMainCode:
.9ff8		20 41 a2	jsr $a241			jsr 	EvaluateString 				; get a string
.9ffb		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; check right bracket present
.9ffe						ValEvaluateZTemp0:
.9ffe		5a		phy				phy
.9fff		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a001		f0 17		beq $a01a			beq 	_VMCFail2
.a003		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a005		48		pha				pha 								; save first character
.a006		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a008		d0 01		bne $a00b			bne 	_VMCStart
.a00a		c8		iny				iny 								; skip over -
.a00b						_VMCStart:
.a00b		38		sec				sec 								; initialise first time round.
.a00c						_VMCNext:
.a00c		c8		iny				iny 								; pre-increment
.a00d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a00f		f0 0c		beq $a01d			beq 	_VMCSuccess 				; successful.
.a011		20 d9 9b	jsr $9bd9			jsr 	EncodeNumber 				; send it to the number-builder
.a014		90 03		bcc $a019			bcc 	_VMCFail 					; if failed, give up.
.a016		18		clc				clc 								; next time round, countinue
.a017		80 f3		bra $a00c			bra 	_VMCNext
.a019						_VMCFail:
.a019		68		pla				pla
.a01a						_VMCFail2:
.a01a		7a		ply				ply
.a01b		38		sec				sec
.a01c		60		rts				rts
.a01d						_VMCSuccess:
.a01d		a9 00		lda #$00			lda 	#0 							; construct final
.a01f		20 d9 9b	jsr $9bd9			jsr 	EncodeNumber 				; by sending a duff value.
.a022		68		pla				pla 								; if it was -ve
.a023		c9 2d		cmp #$2d			cmp 	#"-"
.a025		d0 03		bne $a02a			bne 	_VMCNotNegative
.a027		20 ab a2	jsr $a2ab			jsr		NSMNegate 					; negate it.
.a02a						_VMCNotNegative:
.a02a		7a		ply				ply
.a02b		18		clc				clc
.a02c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a02d						ChrUnary:
.a02d		fa		plx				plx 								; restore stack pos
.a02e		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a031		48		pha				pha
.a032		20 70 93	jsr $9370			jsr 	CheckRightBracket
.a035		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a037		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.a03a		68		pla				pla 								; write number to it
.a03b		20 36 b4	jsr $b436			jsr 	StringTempWrite
.a03e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a03f						ItemCountUnary:
.a03f		fa		plx				plx
.a040		20 41 a2	jsr $a241			jsr 	EvaluateString
.a043		e8		inx				inx
.a044		20 b7 a0	jsr $a0b7			jsr 	ICGetSeperator
.a047		ca		dex				dex
.a048		20 d8 a0	jsr $a0d8			jsr 	ICSetPointer 				; zTemp0 = (string)
.a04b		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; zero the result.
.a04e		5a		phy				phy
.a04f		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a051						_ICULoop:
.a051		c8		iny				iny
.a052		b1 36		lda ($36),y			lda 	(zTemp0),y
.a054		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a057		d0 02		bne $a05b			bne 	_ICUNoMatch
.a059		f6 58		inc $58,x			inc 	NSMantissa0,x
.a05b						_ICUNoMatch:
.a05b		c9 00		cmp #$00			cmp 	#0
.a05d		d0 f2		bne $a051			bne 	_ICULoop
.a05f		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a061		7a		ply				ply
.a062		60		rts				rts
.a063						ItemGetUnary:
.a063		fa		plx				plx
.a064		20 41 a2	jsr $a241			jsr 	EvaluateString 				; search string
.a067		20 78 93	jsr $9378			jsr 	CheckComma
.a06a		e8		inx				inx 								; get count
.a06b		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.a06e		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a070		f0 61		beq $a0d3			beq 	ICGSRange
.a072		e8		inx				inx 								; get seperator.
.a073		20 b7 a0	jsr $a0b7			jsr 	ICGetSeperator
.a076		ca		dex				dex
.a077		ca		dex				dex
.a078		5a		phy				phy
.a079		20 d8 a0	jsr $a0d8			jsr 	ICSetPointer 				; zTemp0 points to string.
.a07c		a0 00		ldy #$00			ldy 	#0
.a07e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a080		f0 0e		beq $a090			beq 	_IGUFoundStart
.a082						_IGUFindNext:
.a082		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a084		f0 4d		beq $a0d3			beq 	ICGSRange 					; eol, not found.
.a086		c8		iny				iny
.a087		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a08a		d0 f6		bne $a082			bne 	_IGUFindNext
.a08c		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a08e		d0 f2		bne $a082			bne 	_IGUFindNext
.a090						_IGUFoundStart:
.a090		84 38		sty $38				sty 	zTemp1 						; save start
.a092		88		dey				dey
.a093						_IGUFindLength:
.a093		c8		iny				iny 								; forward till seperator/EOS
.a094		b1 36		lda ($36),y			lda 	(zTemp0),y
.a096		f0 05		beq $a09d			beq 	_IGUFoundLength
.a098		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a09b		d0 f6		bne $a093			bne 	_IGUFindLength
.a09d						_IGUFoundLength:
.a09d		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a09f		98		tya				tya 								; calculate length of new string.
.a0a0		38		sec				sec
.a0a1		e5 38		sbc $38				sbc 	zTemp1
.a0a3		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0a6		a4 38		ldy $38				ldy 	zTemp1
.a0a8						_IGUCopySub:
.a0a8		c4 39		cpy $39				cpy 	zTemp1+1
.a0aa		f0 08		beq $a0b4			beq 	_IGUCopyOver
.a0ac		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ae		20 36 b4	jsr $b436			jsr 	StringTempWrite
.a0b1		c8		iny				iny
.a0b2		80 f4		bra $a0a8			bra 	_IGUCopySub
.a0b4						_IGUCopyOver:
.a0b4		7a		ply				ply
.a0b5		60		rts				rts
>a0b6		db						.byte 	$DB 						; causes a break in the emulator
.a0b7						ICGetSeperator:
.a0b7		20 78 93	jsr $9378			jsr 	CheckComma 					; preceding comma
.a0ba		20 41 a2	jsr $a241			jsr 	EvaluateString 				; seperator string
.a0bd		20 d8 a0	jsr $a0d8			jsr 	ICSetPointer 				; access it
.a0c0		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0c2		8d a7 07	sta $07a7			sta 	ICSeperator
.a0c5		f0 0c		beq $a0d3			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0c7		5a		phy				phy
.a0c8		a0 01		ldy #$01			ldy 	#1
.a0ca		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0cc		d0 05		bne $a0d3			bne 	ICGSRange
.a0ce		7a		ply				ply
.a0cf		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; check following )
.a0d2		60		rts				rts
.a0d3						ICGSRange:
.a0d3		a9 04		lda #$04		lda	#4
.a0d5		4c 89 93	jmp $9389		jmp	ErrorHandler
.a0d8						ICSetPointer:
.a0d8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a0da		85 36		sta $36				sta 	zTemp0
.a0dc		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0de		85 37		sta $37				sta 	zTemp0+1
.a0e0		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0e1						SpcUnary:
.a0e1		fa		plx				plx 								; restore stack pos
.a0e2		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger			; get value
.a0e5		5a		phy				phy
.a0e6		48		pha				pha 								; save count
.a0e7		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.a0ea		7a		ply				ply 								; to do count in Y
.a0eb						_SpcLoop:
.a0eb		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a0ed		f0 08		beq $a0f7			beq 	_SpcExit
.a0ef		a9 20		lda #$20			lda 	#32
.a0f1		20 36 b4	jsr $b436			jsr 	StringTempWrite
.a0f4		88		dey				dey
.a0f5		80 f4		bra $a0eb			bra 	_SpcLoop
.a0f7						_SpcExit:
.a0f7		7a		ply				ply
.a0f8		20 70 93	jsr $9370			jsr 	CheckRightBracket
.a0fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a0fc						Unary_Str:
.a0fc		fa		plx				plx
.a0fd		20 37 a2	jsr $a237			jsr 	EvaluateNumber  			; get number
.a100		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; closing bracket
.a103		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a105		20 1e a1	jsr $a11e			jsr 	ConvertNumberToString 		; do the conversion.
.a108		a9 21		lda #$21			lda		#33 						; create buffer
.a10a		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate 			; allocate memory
.a10d		da		phx				phx  								; copy the converted string into the buffer.
.a10e		a2 00		ldx #$00			ldx 	#0
.a110						_USCopy:
.a110		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a113		20 36 b4	jsr $b436			jsr 	StringTempWrite
.a116		e8		inx				inx
.a117		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a11a		d0 f4		bne $a110			bne 	_USCopy
.a11c		fa		plx				plx
.a11d		60		rts				rts
.a11e						ConvertNumberToString:
.a11e		5a		phy				phy 								; save code position
.a11f		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a122		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a125		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a127		10 09		bpl $a132			bpl 	_CNTSNotNegative
.a129		29 7f		and #$7f			and 	#$7F 						; make +ve
.a12b		95 50		sta $50,x			sta 	NSStatus,x
.a12d		a9 2d		lda #$2d			lda 	#"-"
.a12f		20 93 a1	jsr $a193			jsr 	WriteDecimalBuffer
.a132						_CNTSNotNegative:
.a132		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a134		f0 12		beq $a148			beq 	_CNTSNotFloat
.a136		e8		inx				inx 								; round up so we don't get too many 6.999999
.a137		a9 01		lda #$01			lda 	#1
.a139		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.a13c		ca		dex				dex
.a13d		b5 78		lda $78,x			lda		NSExponent,x
.a13f		95 79		sta $79,x			sta 	NSExponent+1,x
.a141		a9 08		lda #$08			lda 	#NSTFloat
.a143		95 51		sta $51,x			sta 	NSStatus+1,x
.a145		20 de 98	jsr $98de			jsr 	FloatAdd
.a148						_CNTSNotFloat:
.a148		20 75 a1	jsr $a175			jsr 	MakePlusTwoString 			; do the integer part.
.a14b		20 a4 99	jsr $99a4			jsr 	FloatFractionalPart 		; get the fractional part
.a14e		20 55 9a	jsr $9a55			jsr 	NSNormalise					; normalise , exit if zero
.a151		f0 20		beq $a173			beq 	_CNTSExit
.a153		a9 2e		lda #$2e			lda 	#"."
.a155		20 93 a1	jsr $a193			jsr 	WriteDecimalBuffer 			; write decimal place
.a158						_CNTSDecimal:
.a158		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a15b		30 16		bmi $a173			bmi 	_CNTSExit
.a15d		e8		inx				inx 								; x 10.0
.a15e		a9 0a		lda #$0a			lda 	#10
.a160		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.a163		a9 08		lda #$08			lda 	#NSTFloat
.a165		95 50		sta $50,x			sta 	NSStatus,x
.a167		ca		dex				dex
.a168		20 23 9a	jsr $9a23			jsr 	FloatMultiply
.a16b		20 75 a1	jsr $a175			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a16e		20 a4 99	jsr $99a4			jsr 	FloatFractionalPart 		; get the fractional part
.a171		80 e5		bra $a158			bra 	_CNTSDecimal 				; keep going.
.a173						_CNTSExit:
.a173		7a		ply				ply
.a174		60		rts				rts
.a175						MakePlusTwoString:
.a175		da		phx				phx
.a176		20 cc a2	jsr $a2cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a179		e8		inx				inx 								; access it
.a17a		e8		inx				inx
.a17b		20 fc 99	jsr $99fc			jsr 	FloatIntegerPart 			; make it an integer
.a17e		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a180		20 0e 98	jsr $980e			jsr 	ConvertInt32
.a183		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a185						_MPTSCopy:
.a185		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a188		20 93 a1	jsr $a193			jsr 	WriteDecimalBuffer
.a18b		e8		inx				inx
.a18c		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a18f		d0 f4		bne $a185			bne 	_MPTSCopy
.a191		fa		plx				plx
.a192		60		rts				rts
.a193						WriteDecimalBuffer:
.a193		da		phx				phx
.a194		ae 11 04	ldx $0411			ldx 	dbOffset
.a197		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a19a		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a19d		ee 11 04	inc $0411			inc 	dbOffset
.a1a0		fa		plx				plx
.a1a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1a2						Unary_Left:
.a1a2		fa		plx				plx
.a1a3		18		clc				clc 								; only one parameter
.a1a4		20 07 a2	jsr $a207			jsr 	SubstringInitial 			; set up.
.a1a7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1a9		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1ab		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1ad		80 25		bra $a1d4			bra 	SubstringMain
.a1af						Unary_Right:
.a1af		fa		plx				plx
.a1b0		18		clc				clc 								; only one parameter
.a1b1		20 07 a2	jsr $a207			jsr 	SubstringInitial 			; set up.
.a1b4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1b6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1b8		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1ba		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1bc		b0 02		bcs $a1c0			bcs 	_URNotUnderflow
.a1be		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1c0						_URNotUnderflow:
.a1c0		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1c2		80 10		bra $a1d4			bra 	SubstringMain
.a1c4						Unary_Mid:
.a1c4		fa		plx				plx
.a1c5		38		sec				sec 								; two parameters
.a1c6		20 07 a2	jsr $a207			jsr 	SubstringInitial 			; set up.
.a1c9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1cb		f0 04		beq $a1d1			beq 	_UMError
.a1cd		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1cf		80 03		bra $a1d4			bra 	SubstringMain
.a1d1						_UMError:
.a1d1		4c 70 a4	jmp $a470			jmp 	ArgumentError
.a1d4						SubstringMain:
.a1d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1d6		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1d8		b0 27		bcs $a201			bcs 	_SSMNull 					; if so, return an empty string.
.a1da		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1dc		f0 23		beq $a201			beq 	_SSMNull 					; return empty string.
.a1de		18		clc				clc 								; add the offset +1 to the address and
.a1df		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a1e1		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1e3		85 36		sta $36				sta 	zTemp0
.a1e5		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a1e7		69 00		adc #$00			adc 	#0
.a1e9		85 37		sta $37				sta 	zTemp0+1
.a1eb						_SSMNoCarry:
.a1eb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a1ed		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate 			; allocate that many characters
.a1f0		5a		phy				phy 								; save Y
.a1f1		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a1f3						_SSMCopy:
.a1f3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a1f5		f0 08		beq $a1ff			beq 	_SSMEString 				; no more to copy
.a1f7		20 36 b4	jsr $b436			jsr 	StringTempWrite 			; and write it out.
.a1fa		c8		iny				iny
.a1fb		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a1fd		d0 f4		bne $a1f3			bne 	_SSMCopy
.a1ff						_SSMEString:
.a1ff		7a		ply				ply
.a200						_SSMExit:
.a200		60		rts				rts
.a201						_SSMNull:
.a201		a9 00		lda #$00			lda 	#0
.a203		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.a206		60		rts				rts
.a207						SubstringInitial:
.a207		da		phx				phx 								; save initial stack position
.a208		08		php				php 								; save carry on stack indicating 2 parameters
.a209		20 41 a2	jsr $a241			jsr 	EvaluateString 				; get a string
.a20c		5a		phy				phy 								; calculate length to exponent.
.a20d		a0 ff		ldy #$ff			ldy 	#$FF
.a20f						_SIFindLength:
.a20f		c8		iny				iny
.a210		b1 36		lda ($36),y			lda 	(zTemp0),y
.a212		d0 fb		bne $a20f			bne 	_SIFindLength
.a214		98		tya				tya
.a215		95 78		sta $78,x			sta 	NSExponent,x
.a217		7a		ply				ply
.a218		e8		inx				inx
.a219		20 78 93	jsr $9378			jsr 	CheckComma 					; comma next
.a21c		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get next parameter
.a21f		28		plp				plp 								; is it the last parameter ?
.a220		90 07		bcc $a229			bcc 	_SSIExit 					; if so, exit.
.a222		e8		inx				inx
.a223		20 78 93	jsr $9378			jsr 	CheckComma 					; comma next
.a226		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get last parameter
.a229						_SSIExit:
.a229		fa		plx				plx
.a22a		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; check closing bracket
.a22d		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a22e						EvaluateValue:
.a22e		48		pha				pha
.a22f		20 93 98	jsr $9893			jsr		EvaluateExpression 			; expression
.a232		20 56 9b	jsr $9b56			jsr 	Dereference					; derefernce it
.a235		68		pla				pla
.a236		60		rts				rts
.a237						EvaluateNumber:
.a237		20 2e a2	jsr $a22e			jsr 	EvaluateValue 				; get a value
.a23a		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a23c		29 10		and #$10			and 	#NSBIsString
.a23e		d0 13		bne $a253			bne 	HelperTypeError
.a240		60		rts				rts
.a241						EvaluateString:
.a241		20 2e a2	jsr $a22e			jsr 	EvaluateValue 				; get a value
.a244		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a246		29 10		and #$10			and 	#NSBIsString
.a248		f0 09		beq $a253			beq 	HelperTypeError
.a24a						CopyAddressToTemp0:
.a24a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a24c		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a24e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a250		85 37		sta $37				sta 	zTemp0+1
.a252		60		rts				rts
.a253						HelperTypeError:
.a253		4c 6b a4	jmp $a46b			jmp 	TypeError
.a256						EvaluateInteger:
.a256		20 37 a2	jsr $a237			jsr 	EvaluateNumber
.a259		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a25b		d0 09		bne $a266			bne 	HelperValueError 			; if not, it's a float.
.a25d		60		rts				rts
.a25e						EvaluateUnsignedInteger:
.a25e		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; check integer is +ve
.a261		b5 50		lda $50,x			lda 	NSStatus,x
.a263		30 01		bmi $a266			bmi 	HelperValueError
.a265		60		rts				rts
.a266						HelperValueError:
.a266		4c 70 a4	jmp $a470			jmp 	ArgumentError
.a269						Evaluate16BitInteger:
.a269		20 5e a2	jsr $a25e			jsr	 	EvaluateUnsignedInteger		; get integer
.a26c		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a26e		15 68		ora $68,x			ora 	NSMantissa2,x
.a270		d0 f4		bne $a266			bne 	HelperValueError
.a272		60		rts				rts
.a273						Evaluate16BitIntegerSigned:
.a273		20 56 a2	jsr $a256			jsr	 	EvaluateInteger				; get integer
.a276		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a278		15 68		ora $68,x			ora 	NSMantissa2,x
.a27a		d0 ea		bne $a266			bne 	HelperValueError
.a27c		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a27e		10 03		bpl $a283			bpl 	_EISNotSigned
.a280		20 b2 a2	jsr $a2b2			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a283						_EISNotSigned:
.a283		60		rts				rts
.a284						Evaluate8BitInteger:
.a284		20 5e a2	jsr $a25e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a287		d0 dd		bne $a266			bne 	HelperValueError
.a289		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a28b		15 68		ora $68,x			ora 	NSMantissa2,x
.a28d		15 60		ora $60,x			ora 	NSMantissa1,x
.a28f		d0 d5		bne $a266			bne 	HelperValueError
.a291		b5 58		lda $58,x			lda 	NSMantissa0,x
.a293		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a294						Multiply8x8:
.a294		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a295		85 36		sta $36			  	sta 	zTemp0
.a297		86 37		stx $37				stx 	zTemp0+1
.a299		a9 00		lda #$00			lda 	#0
.a29b		a2 08		ldx #$08			ldx 	#8
.a29d						_M88Loop:
.a29d		90 03		bcc $a2a2			bcc 	_M88NoAdd
.a29f		18		clc				clc
.a2a0		65 37		adc $37				adc 	zTemp0+1
.a2a2						_M88NoAdd:
.a2a2		6a		ror a				ror 	a
.a2a3		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2a5		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2a6		d0 f5		bne $a29d			bne 	_M88Loop
.a2a8		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2ab						NSMNegate:
.a2ab		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2ad		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2af		95 50		sta $50,x			sta 	NSStatus,x
.a2b1		60		rts				rts
.a2b2						NSMNegateMantissa:
.a2b2		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2b3		a9 00		lda #$00			lda 	#0
.a2b5		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2b7		95 58		sta $58,x			sta 	NSMantissa0,x
.a2b9		a9 00		lda #$00			lda 	#0
.a2bb		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2bd		95 60		sta $60,x			sta 	NSMantissa1,x
.a2bf		a9 00		lda #$00			lda 	#0
.a2c1		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2c3		95 68		sta $68,x			sta 	NSMantissa2,x
.a2c5		a9 00		lda #$00			lda 	#0
.a2c7		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2c9		95 70		sta $70,x			sta 	NSMantissa3,x
.a2cb		60		rts				rts
.a2cc						NSMShiftUpTwo:
.a2cc		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2ce		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2d2		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2d4		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2d6		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2d8		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2da		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2dc		b5 78		lda $78,x			lda 	NSExponent,x
.a2de		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a2e0		b5 50		lda $50,x			lda 	NSStatus,x
.a2e2		95 52		sta $52,x			sta 	NSStatus+2,x
.a2e4		60		rts				rts
.a2e5						NSMSetZeroMantissaOnly:
.a2e5		a9 00		lda #$00			lda 	#0
.a2e7		80 06		bra $a2ef			bra 	NSMSetMantissa
.a2e9						NSMSetZero:
.a2e9		a9 00		lda #$00			lda 	#0
.a2eb						NSMSetByte:
.a2eb		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a2ed		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a2ef						NSMSetMantissa:
.a2ef		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a2f1		74 60		stz $60,x			stz 	NSMantissa1,x
.a2f3		74 68		stz $68,x			stz 	NSMantissa2,x
.a2f5		74 70		stz $70,x			stz 	NSMantissa3,x
.a2f7		60		rts				rts
.a2f8						NSMShiftLeft:
.a2f8		18		clc				clc
.a2f9						NSMRotateLeft:
.a2f9		36 58		rol $58,x			rol 	NSMantissa0,x
.a2fb		36 60		rol $60,x			rol		NSMantissa1,x
.a2fd		36 68		rol $68,x			rol		NSMantissa2,x
.a2ff		36 70		rol $70,x			rol		NSMantissa3,x
.a301		60		rts				rts
.a302						NSMShiftRight:
.a302		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a304		76 68		ror $68,x			ror		NSMantissa2,x
.a306		76 60		ror $60,x			ror		NSMantissa1,x
.a308		76 58		ror $58,x			ror		NSMantissa0,x
.a30a		60		rts				rts
.a30b						NSMIsZero:
.a30b		b5 70		lda $70,x			lda 	NSMantissa3,x
.a30d		15 68		ora $68,x			ora		NSMantissa2,x
.a30f		15 60		ora $60,x			ora		NSMantissa1,x
.a311		15 58		ora $58,x			ora		NSMantissa0,x
.a313		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a314						Assemble_ora:
.a314		20 97 84	jsr $8497		jsr	AssembleGroup1
>a317		01					.byte $01
.a318						Assemble_and:
.a318		20 97 84	jsr $8497		jsr	AssembleGroup1
>a31b		21					.byte $21
.a31c						Assemble_eor:
.a31c		20 97 84	jsr $8497		jsr	AssembleGroup1
>a31f		41					.byte $41
.a320						Assemble_adc:
.a320		20 97 84	jsr $8497		jsr	AssembleGroup1
>a323		61					.byte $61
.a324						Assemble_sta:
.a324		20 97 84	jsr $8497		jsr	AssembleGroup1
>a327		81					.byte $81
.a328						Assemble_lda:
.a328		20 97 84	jsr $8497		jsr	AssembleGroup1
>a32b		a1					.byte $a1
.a32c						Assemble_cmp:
.a32c		20 97 84	jsr $8497		jsr	AssembleGroup1
>a32f		c1					.byte $c1
.a330						Assemble_sbc:
.a330		20 97 84	jsr $8497		jsr	AssembleGroup1
>a333		e1					.byte $e1
.a334						Assemble_asl:
.a334		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a337		02					.byte $02
>a338		75					.byte $75
.a339						Assemble_rol:
.a339		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a33c		22					.byte $22
>a33d		75					.byte $75
.a33e						Assemble_lsr:
.a33e		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a341		42					.byte $42
>a342		75					.byte $75
.a343						Assemble_ror:
.a343		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a346		62					.byte $62
>a347		75					.byte $75
.a348						Assemble_stx:
.a348		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a34b		82					.byte $82
>a34c		50					.byte $50
.a34d						Assemble_ldx:
.a34d		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a350		a2					.byte $a2
>a351		d0					.byte $d0
.a352						Assemble_dec:
.a352		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a355		c2					.byte $c2
>a356		55					.byte $55
.a357						Assemble_inc:
.a357		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a35a		e2					.byte $e2
>a35b		55					.byte $55
.a35c						Assemble_stz:
.a35c		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a35f		60					.byte $60
>a360		44					.byte $44
.a361						Assemble_bit:
.a361		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a364		20					.byte $20
>a365		55					.byte $55
.a366						Assemble_sty:
.a366		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a369		80					.byte $80
>a36a		54					.byte $54
.a36b						Assemble_ldy:
.a36b		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a36e		a0					.byte $a0
>a36f		d5					.byte $d5
.a370						Assemble_cpy:
.a370		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a373		c0					.byte $c0
>a374		d4					.byte $d4
.a375						Assemble_cpx:
.a375		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a378		e0					.byte $e0
>a379		d0					.byte $d0
.a37a						Assemble_tsb:
.a37a		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a37d		00					.byte $00
>a37e		50					.byte $50
.a37f						Assemble_trb:
.a37f		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a382		10					.byte $10
>a383		50					.byte $50
.a384						Assemble_jsr:
.a384		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a387		14					.byte $14
>a388		10					.byte $10
.a389						Assemble_jmp:
.a389		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a38c		40					.byte $40
>a38d		10					.byte $10
.a38e						Assemble_bpl:
.a38e		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a391		10					.byte $10
.a392						Assemble_bmi:
.a392		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a395		30					.byte $30
.a396						Assemble_bvc:
.a396		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a399		50					.byte $50
.a39a						Assemble_bvs:
.a39a		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a39d		70					.byte $70
.a39e						Assemble_bcc:
.a39e		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3a1		90					.byte $90
.a3a2						Assemble_bcs:
.a3a2		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3a5		b0					.byte $b0
.a3a6						Assemble_bne:
.a3a6		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3a9		d0					.byte $d0
.a3aa						Assemble_beq:
.a3aa		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3ad		f0					.byte $f0
.a3ae						Assemble_bra:
.a3ae		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3b1		80					.byte $80
.a3b2						Assemble_brk:
.a3b2		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3b5		00					.byte $00
.a3b6						Assemble_php:
.a3b6		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3b9		08					.byte $08
.a3ba						Assemble_clc:
.a3ba		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3bd		18					.byte $18
.a3be						Assemble_plp:
.a3be		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3c1		28					.byte $28
.a3c2						Assemble_sec:
.a3c2		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3c5		38					.byte $38
.a3c6						Assemble_rti:
.a3c6		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3c9		40					.byte $40
.a3ca						Assemble_pha:
.a3ca		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3cd		48					.byte $48
.a3ce						Assemble_cli:
.a3ce		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3d1		58					.byte $58
.a3d2						Assemble_phy:
.a3d2		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3d5		5a					.byte $5a
.a3d6						Assemble_rts:
.a3d6		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3d9		60					.byte $60
.a3da						Assemble_pla:
.a3da		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3dd		68					.byte $68
.a3de						Assemble_sei:
.a3de		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3e1		78					.byte $78
.a3e2						Assemble_ply:
.a3e2		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3e5		7a					.byte $7a
.a3e6						Assemble_dey:
.a3e6		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3e9		88					.byte $88
.a3ea						Assemble_txa:
.a3ea		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3ed		8a					.byte $8a
.a3ee						Assemble_tya:
.a3ee		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3f1		98					.byte $98
.a3f2						Assemble_txs:
.a3f2		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3f5		9a					.byte $9a
.a3f6						Assemble_tay:
.a3f6		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3f9		a8					.byte $a8
.a3fa						Assemble_tax:
.a3fa		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3fd		aa					.byte $aa
.a3fe						Assemble_clv:
.a3fe		20 23 85	jsr $8523		jsr	AssembleGroup4
>a401		b8					.byte $b8
.a402						Assemble_tsx:
.a402		20 23 85	jsr $8523		jsr	AssembleGroup4
>a405		ba					.byte $ba
.a406						Assemble_iny:
.a406		20 23 85	jsr $8523		jsr	AssembleGroup4
>a409		c8					.byte $c8
.a40a						Assemble_dex:
.a40a		20 23 85	jsr $8523		jsr	AssembleGroup4
>a40d		ca					.byte $ca
.a40e						Assemble_cld:
.a40e		20 23 85	jsr $8523		jsr	AssembleGroup4
>a411		d8					.byte $d8
.a412						Assemble_phx:
.a412		20 23 85	jsr $8523		jsr	AssembleGroup4
>a415		da					.byte $da
.a416						Assemble_stp:
.a416		20 23 85	jsr $8523		jsr	AssembleGroup4
>a419		db					.byte $db
.a41a						Assemble_inx:
.a41a		20 23 85	jsr $8523		jsr	AssembleGroup4
>a41d		e8					.byte $e8
.a41e						Assemble_nop:
.a41e		20 23 85	jsr $8523		jsr	AssembleGroup4
>a421		ea					.byte $ea
.a422						Assemble_sed:
.a422		20 23 85	jsr $8523		jsr	AssembleGroup4
>a425		f8					.byte $f8
.a426						Assemble_plx:
.a426		20 23 85	jsr $8523		jsr	AssembleGroup4
>a429		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a42a						DecimalScalarTable:
>a42a		66 66 66 66				.dword $66666666 ; 0.1
>a42e		de					.byte $de
>a42f		1f 85 eb 51				.dword $51eb851f ; 0.01
>a433		db					.byte $db
>a434		4c 37 89 41				.dword $4189374c ; 0.001
>a438		d8					.byte $d8
>a439		ac 8b db 68				.dword $68db8bac ; 0.0001
>a43d		d4					.byte $d4
>a43e		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a442		d1					.byte $d1
>a443		83 de 1b 43				.dword $431bde83 ; 1e-06
>a447		ce					.byte $ce
>a448		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a44c		ca					.byte $ca
>a44d		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a451		c7					.byte $c7
>a452		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a456		c4					.byte $c4
>a457		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a45b		c0					.byte $c0
>a45c		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a460		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a461						SyntaxError:
.a461		a9 02		lda #$02		lda	#2
.a463		4c 89 93	jmp $9389		jmp	ErrorHandler
.a466						RangeError:
.a466		a9 04		lda #$04		lda	#4
.a468		4c 89 93	jmp $9389		jmp	ErrorHandler
.a46b						TypeError:
.a46b		a9 05		lda #$05		lda	#5
.a46d		4c 89 93	jmp $9389		jmp	ErrorHandler
.a470						ArgumentError:
.a470		a9 07		lda #$07		lda	#7
.a472		4c 89 93	jmp $9389		jmp	ErrorHandler
.a475						NotDoneError:
.a475		a9 0c		lda #$0c		lda	#12
.a477		4c 89 93	jmp $9389		jmp	ErrorHandler
.a47a						ErrorText:
>a47a		42 72 65 61 6b 00			.text	"Break",0
>a480		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a488		72 72 6f 72 00
>a48d		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a495		20 62 79 20 7a 65 72 6f 00
>a49e		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4a6		61 6e 67 65 00
>a4ab		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4b3		6d 61 74 63 68 00
>a4b9		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4c1		65 6d 6f 72 79 00
>a4c7		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4cf		61 72 67 75 6d 65 6e 74 00
>a4d8		53 74 6f 70 00				.text	"Stop",0
>a4dd		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4e5		6f 6f 20 6c 6f 6e 67 00
>a4ed		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4f5		6e 20 66 61 69 6c 65 64 00
>a4fe		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a506		61 74 61 00
>a50a		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a512		65 6e 74 65 64 00
>a518		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a520		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a52c		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a534		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a541		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a549		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a556		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a55e		68 6f 75 74 20 57 68 69 6c 65 00
>a569		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a571		68 6f 75 74 20 46 6f 72 00
>a57a		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a582		61 63 6b 20 66 75 6c 6c 00
>a58b		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a593		75 63 74 75 72 65 00
>a59a		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5a2		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5af		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5b7		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5c5		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5cd		7a 65 00
>a5d0		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5d8		79 20 69 6e 64 65 78 00
>a5e0		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a5e8		74 20 64 65 63 6c 61 72 65 64 00
>a5f3		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a5fb		20 66 6f 75 6e 64 00
>a602		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a60a		65 72 72 6f 72 00
>a610		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a618		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 32 31 2f 30 32 2f			.text 9,9,"21/02/23 37"
>e773		32 33 20 33 37

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a61e						MemoryDeleteLine:
.a61e		20 3d a6	jsr $a63d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a621		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a623		a8		tay				tay
.a624						_MDDLLoop:
.a624		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a626		92 30		sta ($30)			sta 	(codePtr)
.a628		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a62a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a62c		d0 07		bne $a635			bne 	_MDLDLNext
.a62e		a5 31		lda $31				lda 	codePtr+1
.a630		c5 3b		cmp $3b				cmp 	zTemp2+1
.a632		d0 01		bne $a635			bne 	_MDLDLNext
.a634						_MDDLExit:
.a634		60		rts				rts
.a635						_MDLDLNext:
.a635		e6 30		inc $30				inc 	codePtr						; next byte
.a637		d0 eb		bne $a624			bne 	_MDDLLoop
.a639		e6 31		inc $31				inc 	codePtr+1
.a63b		80 e7		bra $a624			bra 	_MDDLLoop
.a63d						IMemoryFindEnd:
.a63d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a63f		85 3a		sta $3a				sta 	0+zTemp2
.a641		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a643		85 3b		sta $3b				sta 	1+zTemp2
.a645						_MDLFELoop:
.a645		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a647		f0 0b		beq $a654			beq 	_MDLFEExit
.a649		18		clc				clc
.a64a		65 3a		adc $3a				adc 	zTemp2
.a64c		85 3a		sta $3a				sta 	zTemp2
.a64e		90 f5		bcc $a645			bcc 	_MDLFELoop
.a650		e6 3b		inc $3b				inc 	zTemp2+1
.a652		80 f1		bra $a645			bra 	_MDLFELoop
.a654						_MDLFEExit:
.a654		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a655						MemoryInsertLine:
.a655		08		php				php
.a656		20 3d a6	jsr $a63d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a659		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a65b		1a		inc a				inc 	a
.a65c		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a65e		b0 36		bcs $a696			bcs 	_MDLIError 					; no, fail.
.a660		28		plp				plp 								; do at a specific point or the end ?
.a661		90 08		bcc $a66b			bcc 	_MDLIFound 					; if specific point already set.
.a663		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a665		85 30		sta $30				sta 	codePtr 					; end.
.a667		a5 3b		lda $3b				lda 	zTemp2+1
.a669		85 31		sta $31				sta 	codePtr+1
.a66b						_MDLIFound:
.a66b		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a66e		a8		tay				tay
.a66f						_MDLIInsert:
.a66f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a671		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a673		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a675		c5 3a		cmp $3a				cmp 	zTemp2
.a677		d0 06		bne $a67f			bne 	_MDLINext
.a679		a5 31		lda $31				lda 	codePtr+1
.a67b		c5 3b		cmp $3b				cmp 	zTemp2+1
.a67d		f0 0a		beq $a689			beq 	_MDLIHaveSpace
.a67f						_MDLINext:
.a67f		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a681		d0 02		bne $a685			bne 	_MDLINoBorrow
.a683		c6 3b		dec $3b				dec 	zTemp2+1
.a685						_MDLINoBorrow:
.a685		c6 3a		dec $3a				dec 	zTemp2
.a687		80 e6		bra $a66f			bra 	_MDLIInsert
.a689						_MDLIHaveSpace:
.a689		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a68c		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a68d						_MDLICopy:
.a68d		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a690		91 30		sta ($30),y			sta 	(codePtr),y
.a692		88		dey				dey
.a693		10 f8		bpl $a68d			bpl 	_MDLICopy
.a695		60		rts				rts
.a696						_MDLIError:
.a696		a9 06		lda #$06		lda	#6
.a698		4c 89 93	jmp $9389		jmp	ErrorHandler
.a69b						MDLAppendLine:
.a69b		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a69d		85 36		sta $36				sta 	zTemp0
.a69f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6a1		85 38		sta $38				sta 	0+zTemp1
.a6a3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6a5		85 39		sta $39				sta 	1+zTemp1
.a6a7		b2 38		lda ($38)			lda 	(zTemp1)
.a6a9		d0 0a		bne $a6b5			bne 	_MDLANoInitialise
.a6ab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6ad		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a6b0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6b2		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6b5						_MDLANoInitialise:
.a6b5		18		clc				clc
.a6b6		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6b9		85 38		sta $38				sta 	zTemp1
.a6bb		72 36		adc ($36)			adc 	(zTemp0)
.a6bd		8d a8 07	sta $07a8			sta 	AppendPointer
.a6c0		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6c3		85 39		sta $39				sta 	zTemp1+1
.a6c5		69 00		adc #$00			adc 	#0
.a6c7		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6ca		a0 00		ldy #$00			ldy 	#0
.a6cc						_MDLACopy:
.a6cc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6ce		91 38		sta ($38),y			sta 	(zTemp1),y
.a6d0		c8		iny				iny
.a6d1		98		tya				tya
.a6d2		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6d4		d0 f6		bne $a6cc			bne 	_MDLACopy
.a6d6		a9 00		lda #$00			lda 	#0 							; end of program.
.a6d8		91 38		sta ($38),y			sta 	(zTemp1),y
.a6da		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a6db						MemoryNew:
.a6db		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6dd		85 30		sta $30				sta 	codePtr
.a6df		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6e1		85 31		sta $31				sta 	codePtr+1
.a6e3		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6e5		92 30		sta ($30)			sta 	(codePtr)
.a6e7		60		rts				rts
.a6e8						MemoryInline:
.a6e8		98		tya				tya 								; put address into stack,x
.a6e9		18		clc				clc  								; get the offset, add codePtr
.a6ea		65 30		adc $30				adc 	codePtr
.a6ec		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a6ee		a5 31		lda $31				lda 	codePtr+1
.a6f0		69 00		adc #$00			adc 	#0
.a6f2		95 60		sta $60,x			sta 	NSMantissa1,x
.a6f4		74 68		stz $68,x			stz 	NSMantissa2,x
.a6f6		74 70		stz $70,x			stz 	NSMantissa3,x
.a6f8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a6f9						MemorySearch:
.a6f9		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a6fb		86 37		stx $37				stx 	zTemp0+1
.a6fd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6ff		85 30		sta $30				sta 	codePtr
.a701		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a703		85 31		sta $31				sta 	codePtr+1
.a705						_MTAXLoop:
.a705		b2 30		lda ($30)			lda 	(codePtr)
.a707		18		clc				clc
.a708		f0 21		beq $a72b			beq 	_MTAXExit 					; reached end, exit with CC.
.a70a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a70c		b1 30		lda ($30),y			lda 	(codePtr),y
.a70e		38		sec				sec
.a70f		e5 36		sbc $36				sbc 	zTemp0
.a711		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a713		c8		iny				iny 								; do the MSB
.a714		b1 30		lda ($30),y			lda 	(codePtr),y
.a716		e5 37		sbc $37				sbc 	zTemp0+1
.a718		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a71a		f0 0f		beq $a72b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a71c		b0 0d		bcs $a72b			bcs 	_MTAXExit 					; current < required exit
.a71e		18		clc				clc
.a71f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a721		65 30		adc $30				adc 	codePtr
.a723		85 30		sta $30				sta 	codePtr
.a725		90 02		bcc $a729			bcc 	_CREExit
.a727		e6 31		inc $31				inc 	codePtr+1 					; carry
.a729						_CREExit:
.a729		80 da		bra $a705			bra 	_MTAXLoop
.a72b						_MTAXExit:
.a72b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a72c						RectangleCommand:
.a72c		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a72e		80 02		bra $a732			bra 	ShapeDrawCmd
.a730						CircleCommand:
.a730		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a732						ShapeDrawCmd:
.a732		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a735						ShapeDraw:
.a735		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a738		4c b0 a7	jmp $a7b0			jmp 	ExecuteGraphicCommand	 	; and complete
.a73b						SpriteCommand:
.a73b		a2 00		ldx #$00			ldx 	#0
.a73d		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get image number.
.a740		5a		phy				phy
.a741		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a743		a6 58		ldx $58				ldx 	NSMantissa0
.a745		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a747		b0 0d		bcs $a756			bcs 	_SCRange
.a749		a0 ff		ldy #$ff			ldy 	#255
.a74b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a74e		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a750		7a		ply				ply
.a751		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a754		80 5a		bra $a7b0			bra 	ExecuteGraphicCommand
.a756						_SCRange:
.a756		4c 66 a4	jmp $a466			jmp 	RangeError
.a759						ImageCommand:
.a759		a2 00		ldx #$00			ldx 	#0
.a75b		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get image number.
.a75e		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a761						ImageRunDraw:
.a761		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a763		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a766		ad b1 07	lda $07b1			lda 	gxDrawScale
.a769		0a		asl a				asl 	a
.a76a		0a		asl a				asl 	a
.a76b		0a		asl a				asl 	a
.a76c		a8		tay				tay
.a76d		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a76f		a6 58		ldx $58				ldx 	NSMantissa0
.a771		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a774		60		rts				rts
.a775						TextCommand:
.a775		a2 00		ldx #$00			ldx 	#0
.a777		20 41 a2	jsr $a241			jsr 	EvaluateString 				; get text
.a77a		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a77d						TextRunDraw:
.a77d		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a77f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a782		a0 00		ldy #$00			ldy 	#0
.a784						_IRDLoop:
.a784		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a786		85 37		sta $37				sta 	zTemp0+1
.a788		a5 58		lda $58				lda 	NSMantissa0
.a78a		85 36		sta $36				sta 	zTemp0
.a78c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a78e		f0 13		beq $a7a3			beq 	_IRDExit
.a790		5a		phy				phy									; save string pos
.a791		48		pha				pha 								; save char
.a792		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a795		0a		asl a				asl 	a
.a796		0a		asl a				asl 	a
.a797		0a		asl a				asl 	a
.a798		a8		tay				tay
.a799		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a79b		fa		plx				plx 								; char to draw
.a79c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a79f		7a		ply				ply 								; restore string pos
.a7a0		c8		iny				iny
.a7a1		90 e1		bcc $a784			bcc 	_IRDLoop 					; go back if no error.
.a7a3						_IRDExit:
.a7a3		60		rts				rts
.a7a4						PlotCommand:
.a7a4		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7a6		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a7a9		80 05		bra $a7b0			bra 	ExecuteGraphicCommand
.a7ab						LineCommand:
.a7ab		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7ad		20 bc a7	jsr $a7bc			jsr 	RunGraphicsCommand
.a7b0						ExecuteGraphicCommand:
.a7b0		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a7b3		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7b6		b0 01		bcs $a7b9			bcs 	_EGCError
.a7b8		60		rts				rts
.a7b9						_EGCError:
.a7b9		4c 61 a4	jmp $a461			jmp 	SyntaxError
.a7bc						RunGraphicsCommand:
.a7bc		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7bf		68		pla				pla 								; pop handler address
.a7c0		fa		plx				plx
.a7c1		1a		inc a				inc 	a
.a7c2		d0 01		bne $a7c5			bne 	_RGINoCarry
.a7c4		e8		inx				inx
.a7c5						_RGINoCarry:
.a7c5		8d af 07	sta $07af			sta 	gxHandler
.a7c8		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7cb						_RGICommandLoop:
.a7cb		b1 30		lda ($30),y			lda 	(codePtr),y
.a7cd		c8		iny				iny
.a7ce		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a7d0		f0 53		beq $a825			beq 	_RGI_To
.a7d2		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a7d4		f0 55		beq $a82b			beq 	_RGI_Here
.a7d6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7d8		f0 3d		beq $a817			beq 	_RGI_Exit
.a7da		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7dc		f0 39		beq $a817			beq 	_RGI_Exit
.a7de		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a7e0		f0 3e		beq $a820			beq 	_RGI_Frame
.a7e2		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a7e4		f0 33		beq $a819			beq 	_RGI_Solid
.a7e6		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a7e8		f0 4b		beq $a835			beq 	_RGI_By
.a7ea		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a7ec		f0 17		beq $a805			beq 	_RGI_Move2
.a7ee		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a7f0		f0 62		beq $a854			beq 	_RGI_Dim
.a7f2		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a7f4		f0 74		beq $a86a			beq 	_RGI_Colour
.a7f6		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a7f8		f0 70		beq $a86a			beq 	_RGI_Colour
.a7fa		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a7fd		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a7ff		d0 03		bne $a804			bne 	_RGI_Move 					; move
.a801		4c 92 a8	jmp $a892			jmp		_RGI_SpriteInstructions
.a804						_RGI_Move:
.a804		88		dey				dey 								; unpick get.
.a805						_RGI_Move2:
.a805		20 b8 a8	jsr $a8b8			jsr 	GCGetCoordinatePair 		; move to here
.a808		20 df a8	jsr $a8df			jsr 	GCCopyPairToStore 			; save
.a80b		5a		phy				phy
.a80c		20 d5 a8	jsr $a8d5			jsr 	GCLoadAXY 					; load in
.a80f		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a811		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a814		7a		ply				ply
.a815		80 b4		bra $a7cb			bra 	_RGICommandLoop 			; and go round
.a817						_RGI_Exit:
.a817		88		dey				dey 								; unpick : / EOL
.a818		60		rts				rts
.a819						_RGI_Solid:
.a819		a9 02		lda #$02			lda 	#2
.a81b		8d ab 07	sta $07ab			sta 	gxFillSolid
.a81e		80 ab		bra $a7cb			bra 	_RGICommandLoop
.a820						_RGI_Frame:
.a820		9c ab 07	stz $07ab			stz 	gxFillSolid
.a823		80 a6		bra $a7cb			bra 	_RGICommandLoop
.a825						_RGI_To:
.a825		20 b8 a8	jsr $a8b8			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a828		20 df a8	jsr $a8df			jsr 	GCCopyPairToStore
.a82b						_RGI_Here:
.a82b		5a		phy				phy
.a82c		20 d5 a8	jsr $a8d5			jsr 	GCLoadAXY 					; load it into AXY
.a82f		20 8f a8	jsr $a88f			jsr 	_RGICallHandler 			; go do whatever it is.
.a832		7a		ply				ply
.a833		80 96		bra $a7cb			bra 	_RGICommandLoop 			; and go round
.a835						_RGI_By:
.a835		20 c5 a8	jsr $a8c5			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a838		18		clc				clc
.a839		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a83b		6d ac 07	adc $07ac			adc 	gxXPos
.a83e		8d ac 07	sta $07ac			sta 	gxXPos
.a841		a5 61		lda $61				lda 	NSMantissa1+1
.a843		6d ad 07	adc $07ad			adc 	gxXPos+1
.a846		8d ad 07	sta $07ad			sta 	gxXPos+1
.a849		a5 5a		lda $5a				lda 	NSMantissa0+2
.a84b		18		clc				clc
.a84c		6d ae 07	adc $07ae			adc 	gxYPos
.a84f		8d ae 07	sta $07ae			sta 	gxYPos
.a852		80 d7		bra $a82b			bra 	_RGI_Here
.a854						_RGI_Dim:
.a854		a2 01		ldx #$01			ldx	 	#1
.a856		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.a859		a5 59		lda $59				lda 	NSMantissa0+1
.a85b		c9 00		cmp #$00			cmp 	#0
.a85d		f0 2d		beq $a88c			beq 	_RGIRange
.a85f		c9 09		cmp #$09			cmp 	#8+1
.a861		b0 29		bcs $a88c			bcs		_RGIRange
.a863		3a		dec a				dec 	a
.a864		8d b1 07	sta $07b1			sta 	gxDrawScale
.a867		4c cb a7	jmp $a7cb			jmp 	_RGICommandLoop
.a86a						_RGI_Colour:
.a86a		a2 01		ldx #$01			ldx 	#1 							; colour
.a86c		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.a86f		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a871		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.a874		b1 30		lda ($30),y			lda 	(codePtr),y
.a876		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a878		d0 04		bne $a87e			bne 	_RGICDefaultMode
.a87a		c8		iny				iny
.a87b		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.a87e						_RGICDefaultMode:
.a87e		5a		phy				phy
.a87f		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a881		a6 59		ldx $59				ldx 	NSMantissa0+1
.a883		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a885		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a888		7a		ply				ply
.a889		4c cb a7	jmp $a7cb			jmp 	_RGICommandLoop 			; and go round
.a88c						_RGIRange:
.a88c		4c 66 a4	jmp $a466			jmp 	RangeError
.a88f						_RGICallHandler:
.a88f		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a892						_RGI_SpriteInstructions:
.a892		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a894		f0 07		beq $a89d			beq 	_RGISpriteOff
.a896		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a898		f0 13		beq $a8ad			beq 	_RGISetImage
.a89a		4c 04 a8	jmp $a804			jmp 	_RGI_Move
.a89d						_RGISpriteOff:
.a89d		5a		phy				phy
.a89e		a0 01		ldy #$01			ldy 	#1
.a8a0		a2 00		ldx #$00			ldx 	#0
.a8a2						_RGIDoCommandLoop:
.a8a2		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a8a4		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8a7		7a		ply				ply
.a8a8		b0 e2		bcs $a88c			bcs 	_RGIRange
.a8aa		4c cb a7	jmp $a7cb			jmp 	_RGICommandLoop
.a8ad						_RGISetImage:
.a8ad		a2 01		ldx #$01			ldx 	#1
.a8af		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.a8b2		5a		phy				phy
.a8b3		aa		tax				tax
.a8b4		a0 00		ldy #$00			ldy 	#0
.a8b6		80 ea		bra $a8a2			bra 	_RGIDoCommandLoop
.a8b8						GCGetCoordinatePair:
.a8b8		a2 01		ldx #$01			ldx 	#1
.a8ba		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.a8bd		20 78 93	jsr $9378			jsr 	CheckComma
.a8c0		e8		inx				inx
.a8c1		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.a8c4		60		rts				rts
.a8c5						GCSignedCoordinatePair:
.a8c5		a2 01		ldx #$01			ldx 	#1
.a8c7		20 73 a2	jsr $a273			jsr 	Evaluate16BitIntegerSigned
.a8ca		20 78 93	jsr $9378			jsr 	CheckComma
.a8cd		e8		inx				inx
.a8ce		20 73 a2	jsr $a273			jsr 	Evaluate16BitIntegerSigned
.a8d1		60		rts				rts
.a8d2						_GCCPRange:
.a8d2		4c 66 a4	jmp $a466			jmp 	RangeError
.a8d5						GCLoadAXY:
.a8d5		ad ad 07	lda $07ad			lda 	gxXPos+1
.a8d8		ae ac 07	ldx $07ac			ldx 	gxXPos
.a8db		ac ae 07	ldy $07ae			ldy 	gxYPos
.a8de		60		rts				rts
.a8df						GCCopyPairToStore:
.a8df		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8e1		8d ac 07	sta $07ac			sta 	gxXPos
.a8e4		a5 61		lda $61				lda 	NSMantissa1+1
.a8e6		8d ad 07	sta $07ad			sta 	gxXPos+1
.a8e9		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8eb		8d ae 07	sta $07ae			sta 	gxYPos
.a8ee		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a8ef						ResetBitmapSprites:
.a8ef		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a8f2		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a8f5		60		rts				rts
.a8f6						BitmapCtrl:
.a8f6						BitmapCtrlLoop:
.a8f6		b1 30		lda ($30),y			lda 	(codePtr),y
.a8f8		c8		iny				iny
.a8f9		a2 01		ldx #$01			ldx 	#1
.a8fb		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a8fd		f0 24		beq $a923			beq 	BitmapSwitch
.a8ff		ca		dex				dex
.a900		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a902		f0 1f		beq $a923			beq 	BitmapSwitch
.a904		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a906		f0 13		beq $a91b			beq 	BitmapAddress
.a908		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a90a		f0 02		beq $a90e			beq 	BitmapClear
.a90c		88		dey				dey
.a90d		60		rts				rts
.a90e						BitmapClear:
.a90e		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get the colour
.a911		5a		phy				phy
.a912		aa		tax				tax
.a913		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a915		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a918		7a		ply				ply
.a919		80 db		bra $a8f6			bra 	BitmapCtrlLoop
.a91b						BitmapAddress:
.a91b		20 78 a9	jsr $a978			jsr 	GetPageNumber
.a91e		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a921		80 d3		bra $a8f6			bra 	BitmapCtrlLoop
.a923						BitmapSwitch:
.a923		5a		phy				phy
.a924		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a927		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a929		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a92c		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a92e		a0 00		ldy #$00			ldy 	#0
.a930		a2 ff		ldx #$ff			ldx 	#$FF
.a932		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a935		9c ab 07	stz $07ab			stz 	gxFillSolid
.a938		9c ac 07	stz $07ac			stz 	gxXPos
.a93b		9c ad 07	stz $07ad			stz 	gxXPos+1
.a93e		9c ae 07	stz $07ae			stz 	gxYPos
.a941		9c b1 07	stz $07b1			stz 	gxDrawScale
.a944		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a946		a2 00		ldx #$00			ldx 	#0
.a948		a0 00		ldy #$00			ldy 	#0
.a94a		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a94d		7a		ply				ply
.a94e		80 a6		bra $a8f6			bra 	BitmapCtrlLoop
.a950						SpritesCtrl:
.a950						SpritesCtrlLoop:
.a950		b1 30		lda ($30),y			lda 	(codePtr),y
.a952		c8		iny				iny
.a953		a2 01		ldx #$01			ldx 	#1
.a955		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a957		f0 13		beq $a96c			beq 	SpriteSwitch
.a959		ca		dex				dex
.a95a		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a95c		f0 0e		beq $a96c			beq 	SpriteSwitch
.a95e		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a960		f0 02		beq $a964			beq 	SpriteSetAddress
.a962		88		dey				dey
.a963		60		rts				rts
.a964						SpriteSetAddress:
.a964		20 78 a9	jsr $a978			jsr 	GetPageNumber
.a967		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a96a		80 e4		bra $a950			bra 	SpritesCtrlLoop
.a96c						SpriteSwitch:
.a96c		5a		phy				phy
.a96d		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a970		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a972		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a975		7a		ply				ply
.a976		80 d8		bra $a950			bra 	SpritesCtrlLoop
.a978						GetPageNumber:
.a978		a2 00		ldx #$00			ldx 	#0
.a97a		20 5e a2	jsr $a25e			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.a97d		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.a97f		29 1f		and #$1f			and 	#$1F
.a981		05 58		ora $58				ora 	NSMantissa0
.a983		d0 0c		bne $a991			bne 	_GPNError
.a985		a5 68		lda $68				lda 	NSMantissa2
.a987		06 60		asl $60				asl 	NSMantissa1					; get page number
.a989		2a		rol a				rol 	a
.a98a		06 60		asl $60				asl 	NSMantissa1
.a98c		2a		rol a				rol 	a
.a98d		06 60		asl $60				asl 	NSMantissa1
.a98f		2a		rol a				rol 	a
.a990		60		rts				rts
.a991						_GPNError:
.a991		a9 07		lda #$07		lda	#7
.a993		4c 89 93	jmp $9389		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.a996						GfxCommand:
.a996		a2 00		ldx #$00			ldx 	#0
.a998		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; command
.a99b		20 78 93	jsr $9378			jsr 	CheckComma
.a99e		e8		inx				inx
.a99f		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; X
.a9a2		20 78 93	jsr $9378			jsr 	CheckComma
.a9a5		e8		inx				inx
.a9a6		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; Y
.a9a9		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a9ab		4a		lsr a				lsr 	a
.a9ac		d0 12		bne $a9c0			bne 	_GfxError
.a9ae		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a9b0		b0 0e		bcs $a9c0			bcs 	_GfxError 					; bit 7 should have been zero
.a9b2		5a		phy				phy 								; save pos
.a9b3		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a9b5		a6 59		ldx $59				ldx 	NSMantissa0+1
.a9b7		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a9b9		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9bc		b0 02		bcs $a9c0			bcs 	_GfxError
.a9be		7a		ply				ply 								; restore pos and exit.
.a9bf		60		rts				rts
.a9c0						_GfxError:
.a9c0		4c 66 a4	jmp $a466			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.a9c3						UnaryHit:
.a9c3		fa		plx				plx
.a9c4		a9 36		lda #$36			lda 	#zTemp0
.a9c6		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a9c9		20 78 93	jsr $9378			jsr 	CheckComma
.a9cc		e8		inx				inx
.a9cd		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a9d0		20 70 93	jsr $9370			jsr		CheckRightBracket
.a9d3		ca		dex				dex 								; fix back up again.
.a9d4		da		phx				phx 								; save X/Y
.a9d5		5a		phy				phy
.a9d6		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a9d8		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9da		aa		tax				tax
.a9db		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a9dd		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.a9e0		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a9e1		7a		ply				ply 								; restore XY
.a9e2		fa		plx				plx
.a9e3		20 eb a2	jsr $a2eb			jsr 	NSMSetByte 					; return the hit result
.a9e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.a9e7						PaletteCommand:
.a9e7		a2 00		ldx #$00			ldx 	#0
.a9e9		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; colour
.a9ec		20 78 93	jsr $9378			jsr 	CheckComma
.a9ef		e8		inx				inx
.a9f0		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; r
.a9f3		20 78 93	jsr $9378			jsr 	CheckComma
.a9f6		e8		inx				inx
.a9f7		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; g
.a9fa		20 78 93	jsr $9378			jsr 	CheckComma
.a9fd		e8		inx				inx
.a9fe		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; b
.aa01		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aa03		85 36		sta $36				sta 	zTemp0
.aa05		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aa07		85 37		sta $37				sta 	zTemp0+1
.aa09		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aa0b		26 37		rol $37				rol	 	zTemp0+1
.aa0d		06 36		asl $36				asl 	zTemp0
.aa0f		26 37		rol $37				rol	 	zTemp0+1
.aa11		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aa13		85 01		sta $01				sta 	1
.aa15		5a		phy				phy
.aa16		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aa18		92 36		sta ($36)			sta 	(zTemp0)
.aa1a		a0 01		ldy #$01			ldy 	#1
.aa1c		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa1e		91 36		sta ($36),y			sta 	(zTemp0),y
.aa20		a5 59		lda $59				lda 	NSMantissa0+1
.aa22		c8		iny				iny
.aa23		91 36		sta ($36),y			sta 	(zTemp0),y
.aa25		7a		ply				ply
.aa26		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.aa27						ClearScreen:
.aa27		5a		phy				phy
.aa28		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.aa2a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.aa2d		7a		ply				ply
.aa2e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.aa2f						XLoadCommand:
.aa2f		20 d4 8d	jsr $8dd4			jsr 	NewProgram
.aa32		20 06 87	jsr $8706			jsr 	BackloadProgram
.aa35		4c ee 87	jmp $87ee			jmp 	WarmStart
.aa38						XGoCommand:
.aa38		20 d4 8d	jsr $8dd4			jsr 	NewProgram
.aa3b		20 06 87	jsr $8706			jsr 	BackloadProgram
.aa3e		4c 5f 8f	jmp $8f5f			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.aa41						BootDOS:
.aa41		a9 4f		lda #$4f	            lda     #dosName & $FF
.aa43		85 fb		sta $fb		            sta     kernel.args.buf+0
.aa45		a9 aa		lda #$aa	            lda     #dosName >> 8
.aa47		85 fc		sta $fc		            sta     kernel.args.buf+1
.aa49		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.aa4c		4c ee 87	jmp $87ee	            jmp 	WarmStart
>aa4f		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.aa53						UnaryEvent:
.aa53		fa		plx				plx
.aa54		20 e1 b0	jsr $b0e1			jsr 	TimerToStackX 				; timer in +0
.aa57		e8		inx				inx  								; put reference into +1
.aa58		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm
.aa5b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.aa5d		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.aa5f		d0 4c		bne $aaad			bne 	_UEType
.aa61		e8		inx				inx 								; put the step in +2
.aa62		20 78 93	jsr $9378			jsr 	CheckComma
.aa65		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.aa68		20 70 93	jsr $9370			jsr 	CheckRightBracket
.aa6b		ca		dex				dex
.aa6c		ca		dex				dex
.aa6d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.aa6f		85 36		sta $36				sta 	zTemp0
.aa71		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.aa73		85 37		sta $37				sta 	zTemp0+1
.aa75		5a		phy				phy
.aa76		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.aa78		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa7a		30 2d		bmi $aaa9			bmi 	_UEFalse 					; exit if signed.
.aa7c		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.aa7e		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa80		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.aa82		c8		iny				iny
.aa83		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa85		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa87		c8		iny				iny
.aa88		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa8a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa8c		90 1b		bcc $aaa9			bcc 	_UEFalse 					; no, return FALSE.
.aa8e		18		clc				clc
.aa8f		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.aa91		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa93		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.aa95		91 36		sta ($36),y			sta 	(zTemp0),y
.aa97		c8		iny				iny
.aa98		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa9a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.aa9c		91 36		sta ($36),y			sta 	(zTemp0),y
.aa9e		c8		iny				iny
.aa9f		b5 68		lda $68,x			lda 	NSMantissa2,x
.aaa1		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aaa3		91 36		sta ($36),y			sta 	(zTemp0),y
.aaa5		7a		ply				ply
.aaa6		4c fc 93	jmp $93fc			jmp 	ReturnTrue
.aaa9						_UEFalse:
.aaa9		7a		ply				ply 								; restore Y
.aaaa		4c 07 94	jmp $9407			jmp 	ReturnFalse 				; and return False
.aaad						_UEType:
.aaad		4c 6b a4	jmp $a46b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.aab0						Command_BLoad:
.aab0		20 bb aa	jsr $aabb			jsr 	BLOADHandler
.aab3		c9 00		cmp #$00			cmp 	#0
.aab5		d0 01		bne $aab8			bne 	_BLError
.aab7		60		rts				rts
.aab8						_BLError:
.aab8		4c 0a ad	jmp $ad0a			jmp 	CLErrorHandler
.aabb						BLOADHandler:
.aabb		a2 00		ldx #$00			ldx 	#0
.aabd		20 41 a2	jsr $a241			jsr 	EvaluateString 				; file name to load
.aac0		20 78 93	jsr $9378			jsr 	CheckComma 					; consume comma
.aac3		e8		inx				inx
.aac4		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; load address (full physical address)
.aac7		5a		phy				phy
.aac8		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.aaca		a6 60		ldx $60				ldx 	NSMantissa1
.aacc		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.aacf		b0 50		bcs $ab21			bcs 	_BLErrorExit 				; error, so fail.
.aad1		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.aad4		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.aad6		20 23 ab	jsr $ab23			jsr 	BLOpenPhysicalMemory 		; open for access.
.aad9						_BLReadFile:
.aad9		ad b8 07	lda $07b8			lda 	BasicFileStream
.aadc		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aade		20 0b 84	jsr $840b			jsr 	KNLReadBlock 				; read next block
.aae1		b0 22		bcs $ab05			bcs 	_BLFileError 				; file error, which might be EOF.
.aae3		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.aae5		f0 f2		beq $aad9			beq 	_BLReadFile
.aae7		8d b6 07	sta $07b6			sta 	BLCopyCounter 				; counter.
.aaea		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; copy the buffer out here
.aaed		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.aaef						_BLCopyLoop:
.aaef		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.aaf2		91 3a		sta ($3a),y			sta 	(zTemp2),y
.aaf4		c8		iny				iny
.aaf5		d0 03		bne $aafa			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.aaf7		20 4b ab	jsr $ab4b			jsr 	BLAdvancePhysicalMemory
.aafa						_BLNoAdjust:
.aafa		e8		inx				inx
.aafb		ce b6 07	dec $07b6			dec 	BLCopyCounter
.aafe		d0 ef		bne $aaef			bne 	_BLCopyLoop
.ab00		8c b5 07	sty $07b5			sty 	BLYOffset 					; update Y offset
.ab03		80 d4		bra $aad9			bra 	_BLReadFile 				; go ask for more.
.ab05						_BLFileError:
.ab05		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ab07		d0 0d		bne $ab16			bne 	_BLErrorHandler				; no, it's an actual error
.ab09		20 45 ab	jsr $ab45			jsr 	BLClosePhysicalMemory 		; close the access.
.ab0c		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.ab0f		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ab12		a9 00		lda #$00			lda 	#0 							; and return zero.
.ab14		7a		ply				ply
.ab15		60		rts				rts
.ab16						_BLErrorHandler:
.ab16		48		pha				pha 								; save code
.ab17		20 45 ab	jsr $ab45			jsr 	BLClosePhysicalMemory 		; close access
.ab1a		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the open file
.ab1d		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ab20		68		pla				pla 								; get error code
.ab21						_BLErrorExit:
.ab21		7a		ply				ply 								; restore position and exit.
.ab22		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ab23						BLOpenPhysicalMemory:
.ab23		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ab25		8d b4 07	sta $07b4			sta 	BLNormalMapping
.ab28		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ab2a		8d b5 07	sta $07b5			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ab2d		64 3a		stz $3a				stz 	zTemp2
.ab2f		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab31		29 1f		and #$1f			and 	#$1F
.ab33		09 60		ora #$60			ora 	#BLAccessPage << 5
.ab35		85 3b		sta $3b				sta 	zTemp2+1
.ab37		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ab39		16 60		asl $60,x			asl 	NSMantissa1,x
.ab3b		2a		rol a				rol 	a
.ab3c		16 60		asl $60,x			asl 	NSMantissa1,x
.ab3e		2a		rol a				rol 	a
.ab3f		16 60		asl $60,x			asl 	NSMantissa1,x
.ab41		2a		rol a				rol 	a
.ab42		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.ab44		60		rts				rts
.ab45						BLClosePhysicalMemory:
.ab45		ad b4 07	lda $07b4			lda 	BLNormalMapping
.ab48		85 0b		sta $0b				sta 	BLAccessPage+8
.ab4a		60		rts				rts
.ab4b						BLAdvancePhysicalMemory:
.ab4b		48		pha				pha
.ab4c		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ab4e		a5 3b		lda $3b				lda 	zTemp2+1
.ab50		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ab52		d0 06		bne $ab5a			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ab54		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ab56		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.ab58		85 3b		sta $3b				sta 	zTemp2+1
.ab5a						_BLAPMExit:
.ab5a		68		pla				pla
.ab5b		60		rts				rts
.07b4						BLNormalMapping:
>07b4								.fill 	1
.07b5						BLYOffset:
>07b5								.fill 	1
.07b6						BLCopyCounter:
>07b6								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.ab5c						Command_BSave:
.ab5c		20 67 ab	jsr $ab67			jsr 	BSaveHandler
.ab5f		c9 00		cmp #$00			cmp 	#0
.ab61		d0 01		bne $ab64			bne 	_BSError
.ab63		60		rts				rts
.ab64						_BSError:
.ab64		4c 0a ad	jmp $ad0a			jmp 	CLErrorHandler
.ab67						BSaveHandler:
.ab67		a2 00		ldx #$00			ldx 	#0
.ab69		20 41 a2	jsr $a241			jsr 	EvaluateString 				; file name to load
.ab6c		20 78 93	jsr $9378			jsr 	CheckComma 					; consume comma
.ab6f		e8		inx				inx
.ab70		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; load address (full physical address)
.ab73		20 78 93	jsr $9378			jsr 	CheckComma 					; consume comma
.ab76		e8		inx				inx
.ab77		20 56 a2	jsr $a256			jsr 	EvaluateInteger 			; data length (3 bytes only)
.ab7a		5a		phy				phy
.ab7b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ab7d		a6 60		ldx $60				ldx 	NSMantissa1
.ab7f		20 b1 83	jsr $83b1			jsr 	KNLOpenFileWrite 			; open file for reading
.ab82		b0 47		bcs $abcb			bcs 	_BSErrorExit 				; error, so fail.
.ab84		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ab87		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ab89		20 23 ab	jsr $ab23			jsr 	BLOpenPhysicalMemory 		; open for access.
.ab8c		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.ab8e		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; used for data offset.
.ab91						_BSWriteToFileLoop:
.ab91		38		sec				sec 								; pre decrement count.
.ab92		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab94		e9 01		sbc #$01			sbc 	#1
.ab96		85 5a		sta $5a				sta 	NSMantissa0+2
.ab98		a5 62		lda $62				lda 	NSMantissa1+2
.ab9a		e9 00		sbc #$00			sbc 	#0
.ab9c		85 62		sta $62				sta 	NSMantissa1+2
.ab9e		a5 6a		lda $6a				lda 	NSMantissa2+2
.aba0		e9 00		sbc #$00			sbc 	#0
.aba2		85 6a		sta $6a				sta 	NSMantissa2+2
.aba4		30 15		bmi $abbb			bmi 	_BSFileComplete 			; undercounted, so exit.
.aba6		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.aba8		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.abab		e8		inx				inx
.abac		c8		iny				iny 								; next byte
.abad		d0 03		bne $abb2			bne 	_BSNoCheck
.abaf		20 4b ab	jsr $ab4b			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.abb2						_BSNoCheck:
.abb2		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.abb4		d0 db		bne $ab91			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.abb6		20 cd ab	jsr $abcd			jsr 	BSFlushBuffer 				; yes, flush the buffer
.abb9		80 d6		bra $ab91			bra 	_BSWriteToFileLoop 			; and keep on going
.abbb						_BSFileComplete:
.abbb		20 cd ab	jsr $abcd			jsr 	BSFlushBuffer 				; write the buffer remainder.
.abbe		20 45 ab	jsr $ab45			jsr 	BLClosePhysicalMemory 		; close the access.
.abc1		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.abc4		20 80 84	jsr $8480			jsr 	KNLCloseFile
.abc7		a9 00		lda #$00			lda 	#0
.abc9		7a		ply				ply
.abca		60		rts				rts
.abcb						_BSErrorExit:
.abcb		7a		ply				ply
.abcc		60		rts				rts
.abcd						BSFlushBuffer:
.abcd		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.abcf		f0 0d		beq $abde			beq 	_BSFBExit 					; if so, exit.
.abd1		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.abd3		85 36		sta $36				sta 	zTemp0
.abd5		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.abd7		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.abd9		20 c9 ad	jsr $adc9			jsr 	CLWriteByteBlock 			; write it.
.abdc		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.abde						_BSFBExit:
.abde		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.abdf						Command_Dir:
.abdf		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.abe2		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.abe4		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.abe6		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.abe9		b0 4f		bcs $ac3a			bcs     _CDExit
.abeb						_CDEventLoop:
.abeb		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.abee		20 6d 82	jsr $826d			jsr     GetNextEvent
.abf1		b0 f8		bcs $abeb			bcs     _CDEventLoop
.abf3		ad 9b 07	lda $079b			lda     KNLEvent.type
.abf6		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.abf8		f0 40		beq $ac3a			beq    	_CDExit
.abfa		20 ff ab	jsr $abff			jsr     _CDMessages 				; handle various messages
.abfd		80 ec		bra $abeb			bra     _CDEventLoop
.abff						_CDMessages:
.abff		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.ac01		f0 15		beq $ac18			beq     _CDEVRead
.ac03		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.ac05		f0 19		beq $ac20			beq     _CDEVVolume
.ac07		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.ac09		f0 32		beq $ac3d			beq     _CDEVFile
.ac0b		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.ac0d		f0 70		beq $ac7f			beq     _CDEVFree
.ac0f		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.ac11		f0 6e		beq $ac81			beq     _CDEVEOF
.ac13		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.ac15		f0 6a		beq $ac81			beq     _CDEVEOF
.ac17		60		rts				rts
.ac18						_CDEVRead:
.ac18		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac1b		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ac1d		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.ac20						_CDEVVolume:
.ac20		a9 5b		lda #$5b			lda 	#"["
.ac22		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac25		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ac28		20 89 ac	jsr $ac89			jsr     _CDReadData
.ac2b		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.ac2e		a9 5d		lda #$5d			lda 	#"]"
.ac30		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac33		a9 0d		lda #$0d			lda 	#13
.ac35		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac38		80 de		bra $ac18			bra     _CDEVRead
.ac3a						_CDExit:
.ac3a		4c ee 87	jmp $87ee			jmp 	WarmStart
.ac3d						_CDEVFile:
.ac3d		a9 20		lda #$20			lda 	#32
.ac3f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac42		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ac45		48		pha				pha
.ac46		20 89 ac	jsr $ac89			jsr     _CDReadData
.ac49		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.ac4c		68		pla				pla
.ac4d		49 ff		eor #$ff			eor 	#$FF
.ac4f		38		sec				sec
.ac50		69 10		adc #$10			adc 	#16
.ac52		aa		tax				tax
.ac53						_CDEVTab:
.ac53		a9 20		lda #$20			lda 	#32
.ac55		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac58		ca		dex				dex
.ac59		10 f8		bpl $ac53			bpl 	_CDEVTab
.ac5b		20 a0 ac	jsr $aca0			jsr 	_CDReadExtended
.ac5e		ad 26 05	lda $0526			lda 	lineBuffer
.ac61		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.ac64		20 fe 97	jsr $97fe			jsr 	ConvertInt16
.ac67		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.ac6a		a2 ac		ldx #$ac			ldx 	#_CDEVFMessage >> 8
.ac6c		a9 73		lda #$73			lda 	#_CDEVFMessage & $FF
.ac6e		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.ac71		80 a5		bra $ac18			bra     _CDEVRead
.ac73						_CDEVFMessage:
>ac73		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>ac7b		29 2e 0d 00
.ac7f						_CDEVFree:
.ac7f		80 00		bra $ac81			bra     _CDEVEOF
.ac81						_CDEVEOF:
.ac81		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac84		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ac86		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.ac89						_CDReadData:
.ac89		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac8b		a9 26		lda #$26			lda     #lineBuffer & $FF
.ac8d		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ac8f		a9 05		lda #$05			lda     #lineBuffer >> 8
.ac91		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ac93		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.ac96		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.ac98		9e 26 05	stz $0526,x			stz     lineBuffer,x
.ac9b		a9 26		lda #$26			lda 	#lineBuffer & $FF
.ac9d		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ac9f		60		rts				rts
.aca0						_CDReadExtended:
.aca0		a9 02		lda #$02			lda     #2
.aca2		85 fd		sta $fd				sta     kernel.args.recv.buflen
.aca4		a9 26		lda #$26			lda     #lineBuffer & $FF
.aca6		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.aca8		a9 05		lda #$05			lda     #lineBuffer >> 8
.acaa		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.acac		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.acaf						Command_Drive:
.acaf		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.acb2		20 ad 83	jsr $83ad			jsr 	KNLSetDrive
.acb5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.acb6						Command_Load:
.acb6		20 bc ac	jsr $acbc			jsr 	LoadFile
.acb9		4c ee 87	jmp $87ee			jmp 	WarmStart
.acbc						LoadFile:
.acbc		20 41 a2	jsr $a241			jsr 	EvaluateString 				; file name to load
.acbf		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.acc1		a5 36		lda $36				lda 	zTemp0
.acc3		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.acc6		b0 42		bcs $ad0a			bcs 	CLErrorHandler 				; error, so fail.
.acc8		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.accb		20 5a ad	jsr $ad5a			jsr     LoadReadByteInit            ; Init reader with the stream
.acce		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.acd1		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.acd4						_CLLoop:
.acd4		20 18 ad	jsr $ad18			jsr 	LoadReadLine 				; get next line.
.acd7		f0 10		beq $ace9			beq 	_CLExit 					; end, exit.
.acd9		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.acdc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.acdf		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ace2		f0 f0		beq $acd4			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.ace4		20 c9 87	jsr $87c9			jsr 	EditProgramCode 			; do the editing etc.
.ace7		80 eb		bra $acd4			bra 	_CLLoop
.ace9						_CLExit:
.ace9		ad b8 07	lda $07b8			lda 	BasicFileStream
.acec		20 80 84	jsr $8480			jsr 	KNLCloseFile
.acef						CLComplete:
.acef		a9 f7		lda #$f7			lda 	#_CLCMsg & $FF
.acf1		a2 ac		ldx #$ac			ldx 	#_CLCMsg >> 8
.acf3		20 e8 93	jsr $93e8			jsr 	PrintStringXA
.acf6		60		rts				rts
.acf7						_CLCMsg:
>acf7		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>acff		2e 0d 00
.ad02						CLCloseError:
.ad02		48		pha				pha
.ad03		ad b8 07	lda $07b8			lda 	BasicFileStream
.ad06		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ad09		68		pla				pla
.ad0a						CLErrorHandler:
.ad0a		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ad0c		f0 05		beq $ad13			beq 	_CLEHNotFound
.ad0e		a9 1a		lda #$1a		lda	#26
.ad10		4c 89 93	jmp $9389		jmp	ErrorHandler
.ad13						_CLEHNotFound:
.ad13		a9 19		lda #$19		lda	#25
.ad15		4c 89 93	jmp $9389		jmp	ErrorHandler
.ad18						LoadReadLine:
.ad18		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ad1a		20 34 ad	jsr $ad34			jsr 	LoadReadCharacter
.ad1d		f0 14		beq $ad33			beq 	_LRLExit 					; eof ?
.ad1f		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ad21		90 f5		bcc $ad18			bcc 	LoadReadLine
.ad23						_LRLLoop:
.ad23		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ad26		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ad29		e8		inx				inx
.ad2a		20 34 ad	jsr $ad34			jsr 	LoadReadCharacter 			; next line
.ad2d		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ad2f		b0 f2		bcs $ad23			bcs 	_LRLLoop
.ad31		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ad33						_LRLExit:
.ad33		60		rts				rts
.ad34						LoadReadCharacter:
.ad34		da		phx				phx
.ad35		5a		phy				phy
.ad36		ad b7 07	lda $07b7			lda 	LoadEOFFlag 				; already done EOF.
.ad39		d0 0c		bne $ad47			bne 	_LRCIsEOF
.ad3b		20 64 ad	jsr $ad64			jsr 	LoadReadByte 				; read a byte
.ad3e		90 09		bcc $ad49			bcc		_LRCExit 					; read okay.
.ad40		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.ad42		d0 be		bne $ad02			bne 	CLCloseError
.ad44		ce b7 07	dec $07b7			dec 	LoadEOFFlag
.ad47						_LRCIsEOF:
.ad47		a9 00		lda #$00			lda 	#0
.ad49						_LRCExit:
.ad49		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.ad4b		d0 02		bne $ad4f			bne 	_LRCNotTab
.ad4d		a9 20		lda #$20			lda 	#' '
.ad4f						_LRCNotTab:
.ad4f		c9 0a		cmp #$0a			cmp 	#$0A
.ad51		d0 02		bne $ad55			bne 	_LRCNotLF
.ad53		a9 0d		lda #$0d			lda 	#$0D
.ad55						_LRCNotLF:
.ad55		7a		ply				ply
.ad56		fa		plx				plx
.ad57		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.ad59		60		rts				rts
.ad5a						LoadReadByteInit:
.ad5a		8d b9 07	sta $07b9			sta     LoadFileStream 				; save stream
.ad5d		9c ba 07	stz $07ba			stz     LoadNextCharacter 			; reset buffer
.ad60		9c bb 07	stz $07bb			stz     LoadEndCharacter
.ad63		60		rts				rts
.ad64						LoadReadByte:
.ad64		da		phx				phx
.ad65		ae ba 07	ldx $07ba			ldx     LoadNextCharacter 					; all data consumed ?
.ad68		ec bb 07	cpx $07bb			cpx     LoadEndCharacter
.ad6b		d0 12		bne $ad7f			bne     _KNLRBGetNextByte
.ad6d		ad b9 07	lda $07b9			lda     LoadFileStream
.ad70		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ad72		20 0b 84	jsr $840b			jsr     KNLReadBlock 				; read next chunk from the stream
.ad75		b0 0f		bcs $ad86			bcs     _KNLRBError 				; error has occurred on read.
.ad77		8d bb 07	sta $07bb			sta     LoadEndCharacter 						; # read is the number available
.ad7a		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.ad7c		8e ba 07	stx $07ba			stx     LoadNextCharacter
.ad7f						_KNLRBGetNextByte:
.ad7f		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.ad82		ee ba 07	inc $07ba			inc     LoadNextCharacter 					; and advance the index
.ad85		18		clc				clc 								; succeeded
.ad86						_KNLRBError:
.ad86		fa		plx				plx
.ad87		60		rts				rts
.07b7						LoadEOFFlag:
>07b7								.fill 	1
.07b8						BasicFileStream:
>07b8								.fill 	1
.07b9						LoadFileStream:
>07b9								.byte   ?
.07ba						LoadNextCharacter:
>07ba								.byte   ?
.07bb						LoadEndCharacter:
>07bb								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.ad88						Command_Save:
.ad88		20 41 a2	jsr $a241			jsr 	EvaluateString 				; file name to load
.ad8b		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ad8d		a5 36		lda $36				lda 	zTemp0
.ad8f		20 b1 83	jsr $83b1			jsr 	KNLOpenFileWrite 			; open file for writing
.ad92		b0 32		bcs $adc6			bcs 	CSErrorHandler 				; error, so fail.
.ad94		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ad97		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad99		85 30		sta $30				sta 	codePtr
.ad9b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad9d		85 31		sta $31				sta 	codePtr+1
.ad9f						_CSLoop:
.ad9f		b2 30		lda ($30)			lda 	(codePtr)
.ada1		f0 17		beq $adba			beq 	_CSExit
.ada3		20 ea ad	jsr $adea			jsr 	CSGetCleanLine
.ada6		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.ada8		85 36		sta $36				sta 	zTemp0
.adaa		20 c9 ad	jsr $adc9			jsr 	CLWriteByteBlock 			; write the block out.
.adad		18		clc				clc
.adae		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.adb0		65 30		adc $30				adc 	codePtr
.adb2		85 30		sta $30				sta 	codePtr
.adb4		90 02		bcc $adb8			bcc 	_CREExit
.adb6		e6 31		inc $31				inc 	codePtr+1 					; carry
.adb8						_CREExit:
.adb8		80 e5		bra $ad9f			bra 	_CSLoop
.adba						_CSExit:
.adba		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close file
.adbd		20 80 84	jsr $8480			jsr 	KNLCloseFile
.adc0		20 ef ac	jsr $acef			jsr 	CLComplete 					; display complete message.
.adc3		4c ee 87	jmp $87ee			jmp 	WarmStart 					; and warm start
.adc6						CSErrorHandler:
.adc6		4c 0a ad	jmp $ad0a			jmp 	CLErrorHandler
.adc9						CLWriteByteBlock:
.adc9		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.adcb		f0 1c		beq $ade9			beq 	_CLWBBExit					; if so, exit
.adcd		ad b8 07	lda $07b8			lda 	BasicFileStream 			; stream to write, count in X
.add0		20 46 84	jsr $8446			jsr 	KNLWriteBlock 				; call one write attempt
.add3		b0 f1		bcs $adc6			bcs 	CSErrorHandler 				; error occurred
.add5		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.add7		8a		txa				txa 								; subtract bytes written from X, total count.
.add8		38		sec				sec
.add9		e5 38		sbc $38				sbc 	zTemp1
.addb		aa		tax				tax
.addc		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.addd		a5 36		lda $36				lda 	zTemp0
.addf		65 38		adc $38				adc 	zTemp1
.ade1		85 36		sta $36				sta 	zTemp0
.ade3		90 e4		bcc $adc9			bcc 	CLWriteByteBlock
.ade5		e6 37		inc $37				inc 	zTemp0+1
.ade7		80 e0		bra $adc9			bra 	CLWriteByteBlock 			; and retry write out.
.ade9						_CLWBBExit:
.ade9		60		rts				rts
.adea						CSGetCleanLine:
.adea		a9 00		lda #$00			lda 	#0 							; no indent.
.adec		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.adef		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.adf1		a0 00		ldy #$00			ldy 	#0
.adf3						_CSClean:
.adf3		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.adf6		f0 09		beq $ae01			beq 	_CSDoneClean
.adf8		30 04		bmi $adfe			bmi 	_CSIgnoreCharacter
.adfa		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.adfd		e8		inx				inx
.adfe						_CSIgnoreCharacter:
.adfe		c8		iny				iny
.adff		80 f2		bra $adf3			bra 	_CSClean
.ae01						_CSDoneClean:
.ae01		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.ae03		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.ae06		e8		inx				inx
.ae07		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.ae0a		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.ae0c		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.ae0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.ae0f						Command_Try:
.ae0f		b1 30		lda ($30),y			lda 	(codePtr),y
.ae11		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.ae13		d0 0c		bne $ae21			bne 	_TrySyntax
.ae15		c8		iny				iny 								; get second
.ae16		b1 30		lda ($30),y			lda 	(codePtr),y
.ae18		c8		iny				iny 								; and consume it.
.ae19		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.ae1b		f0 09		beq $ae26			beq 	_TryBLoad
.ae1d		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.ae1f		f0 0a		beq $ae2b			beq 	_TryBSave
.ae21						_TrySyntax:
.ae21		a9 02		lda #$02		lda	#2
.ae23		4c 89 93	jmp $9389		jmp	ErrorHandler
.ae26						_TryBLoad:
.ae26		20 bb aa	jsr $aabb			jsr 	BLOADHandler
.ae29		80 03		bra $ae2e			bra 	_TryExit
.ae2b						_TryBSave:
.ae2b		20 67 ab	jsr $ab67			jsr 	BSaveHandler
.ae2e						_TryExit:
.ae2e		48		pha				pha 								; save result
.ae2f		b1 30		lda ($30),y			lda 	(codePtr),y
.ae31		c8		iny				iny
.ae32		c9 dc		cmp #$dc			cmp 	#KWD_TO
.ae34		d0 eb		bne $ae21			bne 	_TrySyntax
.ae36		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.ae38		20 dd 9c	jsr $9cdd			jsr 	EvaluateTerm
.ae3b		b5 50		lda $50,x			lda 	NSStatus,x
.ae3d		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.ae3f		d0 e0		bne $ae21			bne		_TrySyntax
.ae41		68		pla				pla 								; error code.
.ae42		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.ae44		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.ae47		ca		dex				dex
.ae48		20 ec 8b	jsr $8bec			jsr 	AssignVariable 				; do the assign and exit
.ae4b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e778						m
.ae4c						Command_VERIFY:
.ae4c		20 41 a2	jsr $a241			jsr 	EvaluateString 				; file name to verify
.ae4f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae51		a5 36		lda $36				lda 	zTemp0
.ae53		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.ae56		b0 4b		bcs $aea3			bcs 	_CVErrorHandler 			; error, so fail.
.ae58		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ae5b		20 5a ad	jsr $ad5a			jsr     LoadReadByteInit            ; Init reader with the stream
.ae5e		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae61		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae63		85 30		sta $30				sta 	codePtr
.ae65		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae67		85 31		sta $31				sta 	codePtr+1
.ae69						_CVLoop:
.ae69		20 18 ad	jsr $ad18			jsr 	LoadReadLine 				; get next line.
.ae6c		f0 27		beq $ae95			beq 	_CVExit 					; end, exit.
.ae6e		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae71		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae74		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae77		f0 f0		beq $ae69			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.ae79		a0 00		ldy #$00			ldy 	#0 							; start compare
.ae7b						_CVCompareLoop:
.ae7b		b1 30		lda ($30),y			lda 	(codePtr),y
.ae7d		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.ae80		d0 1c		bne $ae9e			bne 	_CVCompareError
.ae82		c8		iny				iny
.ae83		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.ae86		d0 f3		bne $ae7b			bne 	_CVCompareLoop
.ae88		18		clc				clc
.ae89		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae8b		65 30		adc $30				adc 	codePtr
.ae8d		85 30		sta $30				sta 	codePtr
.ae8f		90 02		bcc $ae93			bcc 	_CREExit
.ae91		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae93						_CREExit:
.ae93		80 d4		bra $ae69			bra 	_CVLoop
.ae95						_CVExit:
.ae95		ad b8 07	lda $07b8			lda 	BasicFileStream
.ae98		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ae9b		4c ef ac	jmp $acef			jmp 	CLComplete
.ae9e						_CVCompareError:
.ae9e		a9 1b		lda #$1b		lda	#27
.aea0		4c 89 93	jmp $9389		jmp	ErrorHandler
.aea3						_CVErrorHandler:
.aea3		4c 0a ad	jmp $ad0a			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.aea6						UnaryJoyX:
.aea6		18		clc				clc
.aea7		80 01		bra $aeaa			bra 	JoyMain
.aea9						UnaryJoyY:
.aea9		38		sec				sec
.aeaa						JoyMain:
.aeaa		fa		plx				plx 								; get pos
.aeab		08		php				php 								; save carry (set for Y)
.aeac		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aeaf		20 70 93	jsr $9370			jsr 	CheckRightBracket
.aeb2		20 86 84	jsr $8486			jsr 	KNLReadController 			; read the controller.
.aeb5		28		plp				plp
.aeb6		b0 02		bcs $aeba			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aeb8		4a		lsr a				lsr 	a
.aeb9		4a		lsr a				lsr 	a
.aeba						_JMNoShift:
.aeba		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aebb		b0 07		bcs $aec4			bcs 	JMIsLeft
.aebd		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aebe		b0 07		bcs $aec7			bcs 	JMIsRight
.aec0		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; zero result
.aec3		60		rts				rts
.aec4						JMIsLeft:
.aec4		4c fc 93	jmp $93fc			jmp 	ReturnTrue
.aec7						JMIsRight:
.aec7		a9 01		lda #$01			lda 	#1
.aec9		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.aecc		60		rts				rts
.aecd						UnaryJoyB:
.aecd		fa		plx				plx 								; get pos
.aece		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aed1		20 70 93	jsr $9370			jsr 	CheckRightBracket
.aed4		20 86 84	jsr $8486			jsr 	KNLReadController 			; read the controller.
.aed7		29 10		and #$10			and 	#$10
.aed9		d0 e9		bne $aec4			bne 	JMIsLeft
.aedb		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero
.aede		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.aedf						MCCommand:
.aedf		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.aee1		48		pha				pha
.aee2		64 01		stz $01				stz 	1
.aee4		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.aee7		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.aee9		8d bc 07	sta $07bc			sta 	DMAControlByte
.aeec		20 9a af	jsr $af9a			jsr 	MCPosition 					; start position
.aeef		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.aef1		20 6b af	jsr $af6b			jsr 	MCCopyAddress
.aef4		a2 08		ldx #$08			ldx 	#8
.aef6		20 6b af	jsr $af6b			jsr 	MCCopyAddress
.aef9		b1 30		lda ($30),y			lda 	(codePtr),y
.aefb		c8		iny				iny
.aefc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.aefe		f0 09		beq $af09			beq 	_MCSize1D
.af00		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.af02		f0 11		beq $af15			beq 	_MCRect2D
.af04						_MCSyntax:
.af04		a9 02		lda #$02		lda	#2
.af06		4c 89 93	jmp $9389		jmp	ErrorHandler
.af09						_MCSize1D:
.af09		a2 00		ldx #$00			ldx 	#0 							; get size
.af0b		20 56 a2	jsr $a256			jsr 	EvaluateInteger
.af0e		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.af10		20 6b af	jsr $af6b			jsr 	MCCopyAddress
.af13		80 24		bra $af39			bra 	_MCDestination
.af15						_MCRect2D:
.af15		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.af17		20 88 af	jsr $af88			jsr 	MCEvalCopyData16
.af1a		20 78 93	jsr $9378			jsr 	CheckComma
.af1d		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.af1f		20 88 af	jsr $af88			jsr 	MCEvalCopyData16
.af22		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.af24		20 80 93	jsr $9380			jsr 	CheckNextA
.af27		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.af29		20 88 af	jsr $af88			jsr 	MCEvalCopyData16
.af2c		a2 12		ldx #$12			ldx 	#$12
.af2e		20 8f af	jsr $af8f			jsr 	MCCopyData16
.af31		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.af34		09 02		ora #$02			ora 	#$02
.af36		8d bc 07	sta $07bc			sta 	DMAControlByte
.af39						_MCDestination:
.af39		b1 30		lda ($30),y			lda 	(codePtr),y
.af3b		c8		iny				iny
.af3c		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.af3e		f0 0e		beq $af4e			beq 	_MCDestPoke
.af40		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.af42		d0 c0		bne $af04			bne 	_MCSyntax
.af44		20 9a af	jsr $af9a			jsr 	MCPosition 					; get target address
.af47		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.af49		20 6b af	jsr $af6b			jsr 	MCCopyAddress
.af4c		80 0e		bra $af5c			bra 	_MCDoDMA 					; and we can go.
.af4e						_MCDestPoke:
.af4e		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; POKE what
.af51		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.af54		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.af57		09 04		ora #$04			ora 	#$04
.af59		8d bc 07	sta $07bc			sta 	DMAControlByte
.af5c						_MCDoDMA:
.af5c		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set the DMA Control byte to go !
.af5f		8d 00 df	sta $df00			sta 	$DF00
.af62						_MCWaitBUSD:
.af62		ad 01 df	lda $df01			lda 	$DF01
.af65		30 fb		bmi $af62			bmi 	_MCWaitBUSD
.af67		68		pla				pla 								; restore I/O.
.af68		85 01		sta $01				sta 	1
.af6a		60		rts				rts
.af6b						MCCopyAddress:
.af6b		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.af6d		29 fc		and #$fc			and 	#$FC
.af6f		05 70		ora $70				ora 	NSMantissa3
.af71		d0 10		bne $af83			bne 	_MCRange
.af73		a5 58		lda $58				lda 	NSMantissa0
.af75		9d 00 df	sta $df00,x			sta 	$DF00,x
.af78		a5 60		lda $60				lda 	NSMantissa1
.af7a		9d 01 df	sta $df01,x			sta 	$DF01,x
.af7d		a5 68		lda $68				lda 	NSMantissa2
.af7f		9d 02 df	sta $df02,x			sta 	$DF02,x
.af82		60		rts				rts
.af83						_MCRange:
.af83		a9 04		lda #$04		lda	#4
.af85		4c 89 93	jmp $9389		jmp	ErrorHandler
.af88						MCEvalCopyData16:
.af88		da		phx				phx
.af89		a2 00		ldx #$00			ldx 	#0
.af8b		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger
.af8e		fa		plx				plx
.af8f						MCCopyData16:
.af8f		a5 58		lda $58				lda 	NSMantissa0
.af91		9d 00 df	sta $df00,x			sta 	$DF00,x
.af94		a5 60		lda $60				lda 	NSMantissa1
.af96		9d 01 df	sta $df01,x			sta 	$DF01,x
.af99		60		rts				rts
.af9a						MCPosition:
.af9a		a2 00		ldx #$00			ldx 	#0 							; get start address.
.af9c		b1 30		lda ($30),y			lda 	(codePtr),y
.af9e		c9 b9		cmp #$b9			cmp 	#KWD_AT
.afa0		f0 04		beq $afa6			beq 	_MCPAt
.afa2		20 56 a2	jsr $a256			jsr 	EvaluateInteger
.afa5		60		rts				rts
.afa6						_MCPAt:
.afa6		c8		iny				iny
.afa7		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; X position
.afaa		48		pha				pha
.afab		20 78 93	jsr $9378			jsr 	CheckComma
.afae		e8		inx				inx
.afaf		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; Y position
.afb2		ca		dex				dex
.afb3		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.afb5		64 58		stz $58				stz 	NSMantissa0
.afb7		64 68		stz $68				stz 	NSMantissa2
.afb9		64 70		stz $70				stz 	NSMantissa3
.afbb		46 60		lsr $60				lsr 	NSMantissa1
.afbd		66 58		ror $58				ror 	NSMantissa0
.afbf		46 60		lsr $60				lsr 	NSMantissa1
.afc1		66 58		ror $58				ror 	NSMantissa0
.afc3		68		pla				pla
.afc4		18		clc				clc
.afc5		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.afc7		85 58		sta $58				sta 	NSMantissa0
.afc9		a5 60		lda $60				lda 	NSMantissa1
.afcb		65 59		adc $59				adc 	NSMantissa0+1
.afcd		85 60		sta $60				sta 	NSMantissa1
.afcf		90 02		bcc $afd3			bcc 	_MCPNoCarry
.afd1		e6 68		inc $68				inc 	NSMantissa2
.afd3						_MCPNoCarry:
.afd3		ad db 07	lda $07db			lda 	gxBasePage
.afd6		85 69		sta $69				sta 	NSMantissa2+1
.afd8		64 59		stz $59				stz 	NSMantissa0+1
.afda		64 61		stz $61				stz 	NSMantissa1+1
.afdc		64 71		stz $71				stz 	NSMantissa3+1
.afde		a2 01		ldx #$01			ldx 	#1
.afe0		20 02 a3	jsr $a302			jsr 	NSMShiftRight
.afe3		20 02 a3	jsr $a302			jsr 	NSMShiftRight
.afe6		20 02 a3	jsr $a302			jsr 	NSMShiftRight
.afe9		a2 00		ldx #$00			ldx 	#0
.afeb		20 89 96	jsr $9689			jsr 	AddTopTwoStack
.afee		60		rts				rts
.07bc						DMAControlByte:
>07bc								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.afef						MouseStatus:
.afef		a9 ff		lda #$ff	        lda     #255
.aff1		80 02		bra $aff5	        bra     MouseCommand
.aff3						MouseDeltaStatus:
.aff3		a9 00		lda #$00	        lda     #0
.aff5						MouseCommand:
.aff5		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.aff8		a2 00		ldx #$00	        ldx     #0
.affa						_MouseCommandLoop:
.affa		da		phx		        phx                                 ; save slot.
.affb		20 91 98	jsr $9891	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.affe		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b000		c9 20		cmp #$20	        cmp     #NSBIsReference
.b002		d0 60		bne $b064	        bne     _MouseNotRef
.b004		b1 30		lda ($30),y			lda 	(codePtr),y
.b006		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b008		d0 01		bne $b00b	        bne     _MouseNoSkipComma
.b00a		c8		iny		        iny
.b00b						_MouseNoSkipComma:
.b00b		fa		plx		        plx                                 ; restore X
.b00c		5a		phy		        phy                                 ; save Y
.b00d		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b00f		85 36		sta $36		        sta     zTemp0
.b011		a5 60		lda $60		        lda     NSMantissa1
.b013		85 37		sta $37		        sta     zTemp0+1
.b015		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b017		a9 00		lda #$00	        lda     #0
.b019		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b01b		88		dey		        dey
.b01c		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b01e		88		dey		        dey
.b01f		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b021		88		dey		        dey
.b022		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b025		30 12		bmi $b039	        bmi     _MouseMouseCommand
.b027						_MouseMDeltaCommand:
.b027		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b02a		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b02c		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b02f		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b031		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b034		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b037		80 0a		bra $b043	        bra     _MouseProcessData
.b039						_MouseMouseCommand:
.b039		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b03c		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b03e		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b041		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b043						_MouseProcessData:
.b043		b1 36		lda ($36),y	        lda     (zTemp0),y
.b045		10 15		bpl $b05c	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b047		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b048		a9 00		lda #$00	        lda     #0
.b04a		f2 36		sbc ($36)	        sbc     (zTemp0)
.b04c		92 36		sta ($36)	        sta     (zTemp0)
.b04e		a9 00		lda #$00	        lda     #0
.b050		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b052		91 36		sta ($36),y	        sta     (zTemp0),y
.b054		a0 03		ldy #$03	        ldy     #3
.b056		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b058		09 80		ora #$80	        ora     #$80
.b05a		91 36		sta ($36),y	        sta     (zTemp0),y
.b05c						_MouseDataPos:
.b05c		7a		ply		        ply                                 ; restore Y.
.b05d		e8		inx		        inx                                 ; next entry
.b05e		e8		inx		        inx
.b05f		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b061		d0 97		bne $affa	        bne     _MouseCommandLoop
.b063		60		rts		        rts
.b064						_MouseNotRef:
.b064		a9 07		lda #$07		lda	#7
.b066		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b069						CommandSetDate:
.b069		a9 03		lda #$03			lda 	#3
.b06b		80 02		bra $b06f			bra 	CSDTMain
.b06d						CommandSetTime:
.b06d		a9 00		lda #$00			lda 	#0
.b06f						CSDTMain:
.b06f		48		pha				pha 								; save table offsets 0 or 3
.b070		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b072		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.b075		20 78 93	jsr $9378			jsr 	CheckComma
.b078		e8		inx				inx
.b079		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.b07c		20 78 93	jsr $9378			jsr 	CheckComma
.b07f		e8		inx				inx
.b080		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger
.b083		68		pla				pla 								; table offset in Y, saving Y
.b084		5a		phy				phy
.b085		a8		tay				tay
.b086		a2 00		ldx #$00			ldx 	#0 							; first number
.b088		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b08a		48		pha				pha
.b08b		64 01		stz $01				stz 	1
.b08d						_CSDTCopy:
.b08d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b08f		d9 d1 b0	cmp $b0d1,y			cmp 	RTCWMinValues,y 			; check range
.b092		90 1b		bcc $b0af			bcc 	_CSDTRange
.b094		d9 d7 b0	cmp $b0d7,y			cmp 	RTCWMaxValues,y
.b097		b0 16		bcs $b0af			bcs 	_CSDTRange
.b099		20 b4 b0	jsr $b0b4			jsr 	CSDTDecimalToBCD
.b09c		da		phx				phx 								; save X
.b09d		be cb b0	ldx $b0cb,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b0a0		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b0a3		fa		plx				plx 								; restore X
.b0a4		e8		inx				inx 								; next number
.b0a5		c8		iny				iny 								; next table entries
.b0a6		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b0a8		d0 e3		bne $b08d			bne 	_CSDTCopy
.b0aa		68		pla				pla 								; restore I/O space
.b0ab		85 01		sta $01				sta 	1
.b0ad		7a		ply				ply 								; restore code pos and exit.
.b0ae		60		rts				rts
.b0af						_CSDTRange:
.b0af		a9 04		lda #$04		lda	#4
.b0b1		4c 89 93	jmp $9389		jmp	ErrorHandler
.b0b4						CSDTDecimalToBCD:
.b0b4		da		phx				phx 								; 10 count in X
.b0b5		a2 00		ldx #$00			ldx 	#0
.b0b7						_CSDTDBLoop:
.b0b7		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b0b9		90 05		bcc $b0c0			bcc 	_CSDTDBExit
.b0bb		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b0bd		e8		inx				inx 								; one more 10s.
.b0be		80 f7		bra $b0b7			bra 	_CSDTDBLoop
.b0c0						_CSDTDBExit:
.b0c0		85 36		sta $36				sta 	zTemp0 						; units
.b0c2		8a		txa				txa 								; 10s x 16
.b0c3		0a		asl a				asl 	a
.b0c4		0a		asl a				asl 	a
.b0c5		0a		asl a				asl 	a
.b0c6		0a		asl a				asl 	a
.b0c7		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b0c9		fa		plx				plx
.b0ca		60		rts				rts
.b0cb						RTCWOffset:
>b0cb		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b0d1						RTCWMinValues:
>b0d1		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b0d7						RTCWMaxValues:
>b0d7		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b0dd						UnaryTimer:
.b0dd		fa		plx				plx
.b0de		20 70 93	jsr $9370			jsr 	CheckRightBracket
.b0e1						TimerToStackX:
.b0e1		20 e9 a2	jsr $a2e9			jsr 	NSMSetZero 					; zero result
.b0e4		64 01		stz $01				stz 	1 							; access I/O
.b0e6		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b0e9		95 58		sta $58,x			sta 	NSMantissa0,x
.b0eb		ad 5a d6	lda $d65a			lda 	$D65A
.b0ee		95 60		sta $60,x			sta 	NSMantissa1,x
.b0f0		ad 5b d6	lda $d65b			lda 	$D65B
.b0f3		95 68		sta $68,x			sta 	NSMantissa2,x
.b0f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b0f6						UnaryGetTime:
.b0f6		a9 00		lda #$00			lda 	#0
.b0f8		80 02		bra $b0fc			bra 	UGDTMain
.b0fa						UnaryGetDate:
.b0fa		a9 03		lda #$03			lda 	#3
.b0fc						UGDTMain:
.b0fc		fa		plx				plx 								; get stack position back
.b0fd		48		pha				pha 								; save table offset
.b0fe		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger			; ignored parameter
.b101		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; closing )
.b104		68		pla				pla 								; table offset in A
.b105		5a		phy				phy 								; saving Y
.b106		a8		tay				tay 								; table offset in Y
.b107		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b109		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.b10c		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b10e		48		pha				pha
.b10f		64 01		stz $01				stz 	1
.b111		20 24 b1	jsr $b124			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b114		20 1f b1	jsr $b11f			jsr 	UGDTColonDigit
.b117		20 1f b1	jsr $b11f			jsr 	UGDTColonDigit
.b11a		68		pla				pla 								; restore I/O select
.b11b		85 01		sta $01				sta 	1
.b11d		7a		ply				ply  								; restore code position
.b11e		60		rts				rts
.b11f						UGDTColonDigit:
.b11f		a9 3a		lda #$3a			lda 	#':'
.b121		20 36 b4	jsr $b436			jsr 	StringTempWrite
.b124						UGDTDigit:
.b124		da		phx				phx 								; save X
.b125		b9 44 b1	lda $b144,y			lda 	RTCROffset,y 				; get offset in RTC register
.b128		aa		tax				tax
.b129		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b12c		39 4a b1	and $b14a,y			and 	RTCRMask,y 					; and with Mask.
.b12f		fa		plx				plx
.b130		48		pha				pha 								; output in BCD
.b131		4a		lsr a				lsr 	a
.b132		4a		lsr a				lsr 	a
.b133		4a		lsr a				lsr 	a
.b134		4a		lsr a				lsr 	a
.b135		09 30		ora #$30			ora 	#48
.b137		20 36 b4	jsr $b436			jsr 	StringTempWrite
.b13a		68		pla				pla
.b13b		29 0f		and #$0f			and 	#15
.b13d		09 30		ora #$30			ora 	#48
.b13f		20 36 b4	jsr $b436			jsr 	StringTempWrite
.b142		c8		iny				iny
.b143		60		rts				rts
.b144						RTCROffset:
>b144		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b14a						RTCRMask:
>b14a		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b150						AscGet:
.b150		fa		plx				plx 								; restore stack pos
.b151						AscGet2:
.b151		20 70 93	jsr $9370			jsr 	CheckRightBracket
.b154		20 ad 81	jsr $81ad			jsr 	KNLGetSingleCharacter
.b157		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.b15a		60		rts				rts
.b15b						_AGBreak:
.b15b		a9 01		lda #$01		lda	#1
.b15d		4c 89 93	jmp $9389		jmp	ErrorHandler
.b160						AscInkey:
.b160		fa		plx				plx 								; restore stack pos
.b161						AscInkey2:
.b161		20 70 93	jsr $9370			jsr 	CheckRightBracket
.b164		20 8b 81	jsr $818b			jsr 	KNLGetKeyPressed
.b167		20 eb a2	jsr $a2eb			jsr 	NSMSetByte
.b16a		60		rts				rts
.b16b						ChrGet:
.b16b		fa		plx				plx
.b16c		20 51 b1	jsr $b151			jsr 	AscGet2
.b16f		4c 76 b1	jmp $b176			jmp 	GetInkeyToString
.b172						ChrInkey:
.b172		fa		plx				plx
.b173		20 61 b1	jsr $b161			jsr 	AscInkey2
.b176						GetInkeyToString:
.b176		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b178		f0 0b		beq $b185			beq 	_GKISNull
.b17a		48		pha				pha
.b17b		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b17d		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.b180		68		pla				pla 								; write number to it
.b181		20 36 b4	jsr $b436			jsr 	StringTempWrite
.b184		60		rts				rts
.b185						_GKISNull:
.b185		a9 00		lda #$00			lda 	#0
.b187		20 fd b3	jsr $b3fd			jsr 	StringTempAllocate
.b18a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b18b						KeyDown:
.b18b		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process outstanding events.
.b18e		fa		plx				plx 								; restore stack pos
.b18f		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; key to check.
.b192		48		pha				pha 								; check right bracket.
.b193		20 70 93	jsr $9370			jsr 	CheckRightBracket
.b196		68		pla				pla
.b197		20 99 83	jsr $8399			jsr 	KeyboardConvertXA 			; get offset and mask.
.b19a		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b19d		f0 03		beq $b1a2			beq 	_KeyUp
.b19f		4c fc 93	jmp $93fc			jmp 	ReturnTrue
.b1a2		4c 07 94	jmp $9407	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b1a5						Unary_Random:
.b1a5		fa		plx				plx
.b1a6		20 f6 b1	jsr $b1f6			jsr 	URCopyToMantissa  			; put random # in mantissa
.b1a9		b1 30		lda ($30),y			lda 	(codePtr),y
.b1ab		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b1ad		f0 08		beq $b1b7			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b1af		e8		inx				inx
.b1b0		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b1b3		ca		dex				dex
.b1b4		20 4e 95	jsr $954e			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b1b7						_URNoModulus:
.b1b7		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b1b9		74 78		stz $78,x			stz 	NSExponent,x
.b1bb		20 70 93	jsr $9370			jsr 	CheckRightBracket
.b1be		60		rts				rts
.b1bf						Unary_Rnd:
.b1bf		fa		plx				plx
.b1c0		20 37 a2	jsr $a237			jsr 	EvaluateNumber 				; number to use.
.b1c3		20 70 93	jsr $9370			jsr 	CheckRightBracket 			; closing bracket
.b1c6		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b1c8		10 20		bpl $b1ea			bpl 	_URDontSeed
.b1ca		a5 01		lda $01				lda 	1 							; switch to page 0
.b1cc		48		pha				pha
.b1cd		64 01		stz $01				stz 	1
.b1cf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b1d1		49 17		eor #$17			eor 	#$17
.b1d3		8d a4 d6	sta $d6a4			sta 	$D6A4
.b1d6		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1d8		49 a5		eor #$a5			eor 	#$A5
.b1da		8d a5 d6	sta $d6a5			sta 	$D6A5
.b1dd		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b1df		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1e2		a9 01		lda #$01			lda 	#1
.b1e4		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1e7		68		pla				pla
.b1e8		85 01		sta $01				sta 	1
.b1ea						_URDontSeed:
.b1ea		20 f6 b1	jsr $b1f6			jsr 	URCopyToMantissa 			; copy into mantissa
.b1ed		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b1ef		95 78		sta $78,x			sta 	NSExponent,x
.b1f1		a9 08		lda #$08			lda 	#NSTFloat
.b1f3		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b1f5		60		rts				rts
.b1f6						URCopyToMantissa:
.b1f6		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b1f8		48		pha				pha
.b1f9		64 01		stz $01				stz 	1
.b1fb		a9 01		lda #$01			lda 	#1
.b1fd		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b200		ad a4 d6	lda $d6a4			lda 	$D6A4
.b203		95 58		sta $58,x			sta 	NSMantissa0,x
.b205		ad a5 d6	lda $d6a5			lda 	$D6A5
.b208		95 60		sta $60,x			sta 	NSMantissa1,x
.b20a		ad a4 d6	lda $d6a4			lda 	$D6A4
.b20d		95 68		sta $68,x			sta 	NSMantissa2,x
.b20f		ad a5 d6	lda $d6a5			lda 	$D6A5
.b212		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b214		95 70		sta $70,x			sta 	NSMantissa3,x
.b216		68		pla				pla
.b217		85 01		sta $01				sta 	1
.b219		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b21a						PingCommand:
.b21a		5a		phy				phy 								; save pos
.b21b		a9 01		lda #$01			lda 	#1 						; push channel.
.b21d		48		pha				pha
.b21e		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b220		a2 06		ldx #$06			ldx 	#6 						; length
.b222		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b224		80 24		bra $b24a			bra 	SoundEffectCommand
.b226						ZapCommand:
.b226		5a		phy				phy 								; save pos
.b227		a9 01		lda #$01			lda 	#1 						; push channel.
.b229		48		pha				pha
.b22a		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b22c		a2 0a		ldx #$0a			ldx 	#10 						; length
.b22e		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b230		80 18		bra $b24a			bra 	SoundEffectCommand
.b232						ShootCommand:
.b232		5a		phy				phy 								; save pos
.b233		a9 03		lda #$03			lda 	#3 						; push channel.
.b235		48		pha				pha
.b236		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b238		a2 04		ldx #$04			ldx 	#4 						; length
.b23a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b23c		80 0c		bra $b24a			bra 	SoundEffectCommand
.b23e						Explode:
.b23e		5a		phy				phy 								; save pos
.b23f		a9 03		lda #$03			lda 	#3 						; push channel.
.b241		48		pha				pha
.b242		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b244		a2 0a		ldx #$0a			ldx 	#10 						; length
.b246		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b248		80 00		bra $b24a			bra 	SoundEffectCommand
.b24a						SoundEffectCommand:
.b24a		8d bd 07	sta $07bd			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b24d		9c be 07	stz $07be			stz 	SoundCommandBlock+1
.b250		a9 0f		lda #$0f			lda 	#15
.b252		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2
.b255		8e c0 07	stx $07c0			stx 	SoundCommandBlock+3
.b258		8c c1 07	sty $07c1			sty 	SoundCommandBlock+4
.b25b		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b25e		68		pla				pla
.b25f		09 10		ora #$10			ora 	#$10  						; execute command $11
.b261		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b263		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b265		20 6b 80	jsr $806b			jsr 	SNDCommand
.b268		7a		ply				ply
.b269		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b26a						UnaryPlaying:
.b26a		fa		plx				plx
.b26b		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; get channel #
.b26e		48		pha				pha
.b26f		20 70 93	jsr $9370			jsr		CheckRightBracket
.b272		68		pla				pla
.b273		c9 04		cmp #$04			cmp 	#4
.b275		b0 0c		bcs $b283			bcs 	_UPNotPlaying
.b277		09 20		ora #$20			ora 	#$20 						; query playing ?
.b279		20 6b 80	jsr $806b			jsr 	SNDCommand
.b27c		c9 00		cmp #$00			cmp 	#0
.b27e		f0 03		beq $b283			beq 	_UPNotPlaying
.b280		4c fc 93	jmp $93fc			jmp 	ReturnTrue
.b283						_UPNotPlaying:
.b283		4c 07 94	jmp $9407			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b286						SoundCommand:
.b286		b1 30		lda ($30),y			lda 	(codePtr),y
.b288		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b28a		d0 09		bne $b295			bne 	_SNDMain
.b28c		c8		iny				iny 								; skip OFF
.b28d		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b28f		5a		phy				phy
.b290		20 6b 80	jsr $806b			jsr 	SNDCommand
.b293		7a		ply				ply
.b294		60		rts				rts
.b295						_SNDMain:
.b295		a2 00		ldx #$00			ldx 	#0
.b297		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; channel
.b29a		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b29c		b0 4b		bcs $b2e9			bcs 	_SndError
.b29e		e8		inx				inx 								; do the rest in slot 1.
.b29f		20 78 93	jsr $9378			jsr 	CheckComma
.b2a2		20 69 a2	jsr $a269			jsr 	Evaluate16BitInteger 		; Pitch
.b2a5		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b2a7		c9 10		cmp #$10			cmp 	#16
.b2a9		b0 3e		bcs $b2e9			bcs 	_SndError
.b2ab		8d be 07	sta $07be			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b2ae		b5 58		lda $58,x			lda 	NSMantissa0,x
.b2b0		8d bd 07	sta $07bd			sta 	SoundCommandBlock
.b2b3		20 78 93	jsr $9378			jsr 	CheckComma
.b2b6		20 84 a2	jsr $a284			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b2b9		8d c0 07	sta $07c0			sta 	SoundCommandBlock+3
.b2bc		a9 0f		lda #$0f			lda 	#15
.b2be		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b2c1		9c c1 07	stz $07c1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b2c4		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b2c7		b1 30		lda ($30),y			lda 	(codePtr),y
.b2c9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b2cb		d0 0e		bne $b2db			bne 	_SNDPlay
.b2cd		c8		iny				iny
.b2ce		20 73 a2	jsr $a273			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b2d1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b2d3		8d c1 07	sta $07c1			sta 	SoundCommandBlock+4
.b2d6		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2d8		8d c2 07	sta $07c2			sta 	SoundCommandBlock+5
.b2db						_SNDPlay:
.b2db		5a		phy				phy
.b2dc		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b2de		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b2e0		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b2e2		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b2e4		20 6b 80	jsr $806b			jsr 	SNDCommand
.b2e7		7a		ply				ply
.b2e8		60		rts				rts
.b2e9						_SndError:
.b2e9		4c 66 a4	jmp $a466			jmp 	RangeError
.07bd						SoundCommandBlock:
>07bd								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b2ec						StackPushByte:
.b2ec		48		pha				pha 								; save byte on stack
.b2ed		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b2ef		d0 08		bne $b2f9			bne 	_SPBNoBorrow
.b2f1		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b2f3		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b2f5		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2f7		90 06		bcc $b2ff			bcc 	_SPBMemory
.b2f9						_SPBNoBorrow:
.b2f9		c6 34		dec $34				dec 	basicStack
.b2fb		68		pla				pla 								; get back and write
.b2fc		92 34		sta ($34)			sta 	(basicStack)
.b2fe		60		rts				rts
.b2ff						_SPBMemory:
.b2ff		a9 12		lda #$12		lda	#18
.b301		4c 89 93	jmp $9389		jmp	ErrorHandler
.b304						StackPopByte:
.b304		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b306		e6 34		inc $34				inc 	basicStack
.b308		d0 02		bne $b30c			bne 	_SPBNoCarry
.b30a		e6 35		inc $35				inc 	basicStack+1
.b30c						_SPBNoCarry:
.b30c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b30d						StackOpen:
.b30d		48		pha				pha 								; save frame byte
.b30e		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b310		0a		asl a				asl 	a 							; claim twice this for storage
.b311		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b313		38		sec				sec 								; so basically subtracting from
.b314		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b316		85 34		sta $34				sta 	basicStack
.b318		b0 09		bcs $b323			bcs 	_SONoBorrow
>b31a		db						.byte 	$DB 						; causes a break in the emulator
.b31b		c6 35		dec $35				dec 	basicStack+1
.b31d		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b31f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b321		90 04		bcc $b327			bcc 	_SOMemory
.b323						_SONoBorrow:
.b323		68		pla				pla 								; get marker back and write at TOS
.b324		92 34		sta ($34)			sta 	(basicStack)
.b326		60		rts				rts
.b327						_SOMemory:
.b327		a9 12		lda #$12		lda	#18
.b329		4c 89 93	jmp $9389		jmp	ErrorHandler
.b32c						StackClose:
.b32c		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b32e		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b330		0a		asl a				asl 	a 							; claim twice this.
.b331		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b333		85 34		sta $34				sta 	basicStack
.b335		90 02		bcc $b339			bcc 	_SCExit
.b337		e6 35		inc $35				inc 	basicStack+1
.b339						_SCExit:
.b339		60		rts				rts
.b33a						StackCheckFrame:
.b33a		48		pha				pha
.b33b						_StackRemoveLocals:
.b33b		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b33d		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b33f		b0 05		bcs $b346			bcs 	_SCNoLocal
.b341		20 83 8d	jsr $8d83			jsr 	LocalPopValue 				; restore the local value
.b344		80 f5		bra $b33b			bra 	_StackRemoveLocals 			; gr round again
.b346						_SCNoLocal:
.b346		68		pla				pla 								; get the frame check.
.b347		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b349		29 f0		and #$f0			and 	#$F0 						; check type bits
.b34b		d0 01		bne $b34e			bne 	_SCFError 					; different, we have structures mixed up
.b34d		60		rts				rts
.b34e						_SCFError:
.b34e		8a		txa				txa 								; report error X
.b34f		4c 89 93	jmp $9389			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b352						STKSaveCodePosition:
.b352		5a		phy				phy
.b353		98		tya				tya 								; save Y
.b354		a0 05		ldy #$05			ldy 	#5
.b356		91 34		sta ($34),y			sta 	(basicStack),y
.b358		88		dey				dey 								; save Code Pointer
.b359						_STKSaveLoop:
.b359		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b35c		91 34		sta ($34),y			sta 	(basicStack),y
.b35e		88		dey				dey
.b35f		d0 f8		bne $b359			bne 	_STKSaveLoop
.b361		7a		ply				ply
.b362		60		rts				rts
.b363						STKLoadCodePosition:
.b363		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b365						_STKLoadLoop:
.b365		b1 34		lda ($34),y			lda 	(basicStack),y
.b367		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b36a		c8		iny				iny
.b36b		c0 05		cpy #$05			cpy 	#5
.b36d		d0 f6		bne $b365			bne 	_STKLoadLoop
.b36f		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b371		a8		tay				tay
.b372		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b373						StackReset:
.b373		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b375		85 34		sta $34				sta 	0+basicStack
.b377		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b379		85 35		sta $35				sta 	1+basicStack
.b37b		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b37d		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b37f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b380						StringConcrete:
.b380		5a		phy				phy 								; save position on stack
.b381		20 c9 9e	jsr $9ec9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b384		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b386		85 38		sta $38				sta 	zTemp1
.b388		b5 60		lda $60,x			lda 	NSMantissa1,x
.b38a		85 39		sta $39				sta 	zTemp1+1
.b38c		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b38e						_SALength:
.b38e		c8		iny				iny
.b38f		b1 38		lda ($38),y			lda 	(zTemp1),y
.b391		d0 fb		bne $b38e			bne 	_SALength
.b393		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b395		b0 3d		bcs $b3d4			bcs 	_SALengthError
.b397		98		tya				tya 				 				; length of the new string
.b398		18		clc				clc
.b399		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b39b		90 02		bcc $b39f			bcc 	_SAHaveLength
.b39d		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b39f						_SAHaveLength:
.b39f		48		pha				pha 								; save length.
.b3a0		38		sec				sec
.b3a1		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b3a3		6d 0a 04	adc $040a			adc 	stringMemory
.b3a6		8d 0a 04	sta $040a			sta 	stringMemory
.b3a9		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b3ab		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b3ad		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b3af		6d 0b 04	adc $040b			adc 	stringMemory+1
.b3b2		8d 0b 04	sta $040b			sta 	stringMemory+1
.b3b5		85 3b		sta $3b				sta 	zTemp2+1
.b3b7		95 60		sta $60,x			sta 	NSMantissa1,x
.b3b9		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b3ba		38		sec				sec
.b3bb		e9 03		sbc #$03			sbc 	#3
.b3bd		92 3a		sta ($3a)			sta 	(zTemp2)
.b3bf		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b3c1		a0 01		ldy #$01			ldy 	#1
.b3c3		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3c5						_SACopyNewString:
.b3c5		a0 00		ldy #$00			ldy 	#0
.b3c7						_SACopyNSLoop:
.b3c7		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b3c9		c8		iny				iny 								; write two on in string storage
.b3ca		c8		iny				iny
.b3cb		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3cd		88		dey				dey 								; this makes it one one.
.b3ce		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3d0		d0 f5		bne $b3c7			bne 	_SACopyNSLoop
.b3d2		7a		ply				ply
.b3d3		60		rts				rts
.b3d4						_SALengthError:
.b3d4		a9 09		lda #$09		lda	#9
.b3d6		4c 89 93	jmp $9389		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3d9						StringSystemInitialise:
.b3d9		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3db		8d 0a 04	sta $040a			sta 	0+stringMemory
.b3de		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3e0		8d 0b 04	sta $040b			sta 	1+stringMemory
.b3e3		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3e6		60		rts				rts
.b3e7						StringSpaceInitialise:
.b3e7		20 c9 9e	jsr $9ec9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3ea		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b3ec		8d 0c 04	sta $040c			sta 	stringInitialised
.b3ef		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b3f2		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b3f5		ad 0b 04	lda $040b			lda 	stringMemory+1
.b3f8		3a		dec a				dec 	a
.b3f9		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b3fc		60		rts				rts
.b3fd						StringTempAllocate:
.b3fd		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3ff		b0 30		bcs $b431			bcs 	_STALength
.b401		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b404		30 05		bmi $b40b			bmi 	_STAAllocate
.b406		48		pha				pha 								; save value to subtract.
.b407		20 e7 b3	jsr $b3e7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b40a		68		pla				pla 								; restore it
.b40b						_STAAllocate:
.b40b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b40d		18		clc				clc  								; deliberate allows one more
.b40e		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b411		8d 0d 04	sta $040d			sta 	stringTempPointer
.b414		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b416		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b418		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b41b		69 ff		adc #$ff			adc 	#$FF
.b41d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b420		85 3d		sta $3d				sta 	zsTemp+1
.b422		95 60		sta $60,x			sta 	NSMantissa1,x
.b424		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b426		74 70		stz $70,x			stz 	NSMantissa3,x
.b428		a9 10		lda #$10			lda 	#NSTString
.b42a		95 50		sta $50,x			sta 	NSStatus,x
.b42c		a9 00		lda #$00			lda 	#0 							; clear the target string
.b42e		92 3c		sta ($3c)			sta 	(zsTemp)
.b430		60		rts				rts
.b431						_STALength:
.b431		a9 09		lda #$09		lda	#9
.b433		4c 89 93	jmp $9389		jmp	ErrorHandler
.b436						StringTempWrite:
.b436		48		pha				pha
.b437		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b439		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b43b		d0 02		bne $b43f			bne 	_STWNoCarry
.b43d		e6 3d		inc $3d				inc 	zsTemp+1
.b43f						_STWNoCarry:
.b43f		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b441		92 3c		sta ($3c)			sta 	(zsTemp)
.b443		68		pla				pla
.b444		60		rts				rts

;******  Return to file: _basic.asm

.b445						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c5 07	lda $07c5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c4 07	sty $07c4			sty 	EXTColumn
.c02d	a02d	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c3 07	inc $07c3			inc 	EXTRow  					; bump row
.c035	a035	9c c4 07	stz $07c4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c3 07	lda $07c3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd c7 07	cmp $07c7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c4 07	dec $07c4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c4 07	stz $07c4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c3 07	dec $07c3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c3 07	lda $07c3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c3 07	dec $07c3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed c6 07	sbc $07c6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c4 07	sty $07c4			sty 	EXTColumn
.c08c	a08c	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c4 07	sty $07c4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad c7 07	lda $07c7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c3 07	cmp $07c3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c3 07	inc $07c3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c4 07	lda $07c4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c4 07	sta $07c4			sta 	EXTColumn
.c0c9	a0c9	cd c6 07	cmp $07c6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c4 07	dec $07c4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c5 07	and $07c5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c5 07	sta $07c5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c5 07	ora $07c5			ora 	EXTTextColour
.c13c	a13c	8d c5 07	sta $07c5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c5 07	lda $07c5			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c5 07	lda $07c5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c3 07	stz $07c3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c4 07	stz $07c4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c4 07	lda $07c4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c3 07	lda $07c3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c3						EXTRow:
>07c3								.fill 	1
.07c4						EXTColumn:
>07c4								.fill 	1
.07c5						EXTTextColour:
>07c5								.fill 	1
.07c6						EXTScreenWidth:
>07c6								.fill 	1
.07c7						EXTScreenHeight:
>07c7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c5 07	sta $07c5			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d c6 07	sta $07c6			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d c7 07	sta $07c7			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c3 07	lda $07c3			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad c6 07	lda $07c6			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TILESZ = 11*2
=24						GCMD_TILESCLX = 12*2
=26						GCMD_TILESCLY = 13*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d1 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f0 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	38 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	a9 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	d2 aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	59 ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	69 a6					.word	GXControlTileSize        ; $0b TILESZ
>c2ff	a2ff	99 a9					.word	GXControlTileScrollX     ; $0c TILESCLX
>c301	a301	aa a9					.word	GXControlTileScrollY     ; $0d TILESCLY
>c303	a303	9a a3					.word	GRUndefined              ; $0e
>c305	a305	9a a3					.word	GRUndefined              ; $0f
>c307	a307	9a a3					.word	GRUndefined              ; $10
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	9f a6					.word	GXLine                   ; $21 Line
>c32b	a32b	1a a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	17 a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	ff a7					.word	GXPlotPoint              ; $28 Plot
>c339	a339	68 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07c8						gxCurrentX:
>07c8								.fill 	2
.07ca						gxCurrentY:
>07ca								.fill 	2
.07cc						gxLastX:
>07cc								.fill 	2
.07ce						gxLastY:
>07ce								.fill 	2
.07d0						gxX0:
>07d0								.fill 	2
.07d2						gxY0:
>07d2								.fill 	2
.07d4						gxX1:
>07d4								.fill 	2
.07d6						gxY1:
>07d6								.fill 	2
.07d8						gxSpritesOn:
>07d8								.fill 	1
.07d9						gxBitmapsOn:
>07d9								.fill 	1
.07da						gxTilesOn:
>07da								.fill 	1
.07db						gxBasePage:
>07db								.fill 	1
.07dc						gxSpritePage:
>07dc								.fill 	1
.07dd						gxTileImagePage:
>07dd								.fill 	1
.07de						gxTileMapPage:
>07de								.fill 	1
.07df						gxTileMapWidth:
>07df								.fill 	1
.07e0						gxTileMapHeight:
>07e0								.fill 	1
.07e1						gxHeight:
>07e1								.fill 	1
.07e2						gxMode:
>07e2								.fill 	1
.07e3						gxColour:
>07e3								.fill 	1
.07e4						gxEORValue:
>07e4								.fill 	1
.07e5						gxANDValue:
>07e5								.fill 	1
.07e6						gxOriginalLUTValue:
>07e6								.fill 	1
.07e7						gxOffset:
>07e7								.fill 	1
.07e8						GSCurrentSpriteID:
>07e8								.fill 	1
.07e9						GSCurrentSpriteAddr:
>07e9								.fill 	2
.07eb						gxSpriteOffsetBase:
>07eb								.fill 	2
.07ed						gxSpriteLow:
>07ed								.fill 	64
.082d						gxSpriteHigh:
>082d								.fill 	64
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c34d	a34d	9d cc 07	sta $07cc,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ca 07	sta $07ca			sta 	gxCurrentY
.c357	a357	9c cb 07	stz $07cb			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d c8 07	sta $07c8			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d c9 07	sta $07c9			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad c9 07	lda $07c9			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad c8 07	lda $07c8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ca 07	lda $07ca			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd e1 07	cmp $07e1			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c389	a389	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 70 08	sta $0870			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 00 ad	jsr $ad00			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 71 08	stz $0871			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 6e 08	lda $086e			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 6f 08	cmp $086f			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 6f 08	lda $086f			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 6e 08	lda $086e			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 6f 08	ldx $086f			ldx	 	gxYCentre
.c3e6	a3e6	8d 6f 08	sta $086f			sta 	gxYCentre
.c3e9	a3e9	8e 6e 08	stx $086e			stx 	gxxCentre
.c3ec	a3ec	ad 71 08	lda $0871			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 71 08	sta $0871			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 70 08	lda $0870	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 71 08	lda $0871			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 6f 08	lda $086f			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 6e 08	lda $086e			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 e8 ab	jsr $abe8			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 70 08	lda $0870			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 6a a8	jsr $a86a			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 6f 08	sbc $086f			sbc 	gxYCentre
.c42d	a42d	8d 6f 08	sta $086f			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c444	a444	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d d1 07	sta $07d1,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 71 08	stz $0871			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 6e 08	inc $086e			inc 	gxxCentre 					; X++
.c459	a459	ad 6e 08	lda $086e			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 6e 08	inc $086e			inc 	gxxCentre					; X++
.c466	a466	ce 6f 08	dec $086f			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 6e 08	lda $086e			lda 	gxxCentre
.c46d	a46d	ed 6f 08	sbc $086f			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 71 08	dec $0871			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad d6 07	lda $07d6			lda 	gxY1
.c4a6	a4a6	ed d2 07	sbc $07d2			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 6d 08	sta $086d			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 6e 08	stz $086e			stz 	gxxCentre
.c4ba	a4ba	ad 6d 08	lda $086d			lda 	gxRadius
.c4bd	a4bd	8d 6f 08	sta $086f			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c4d5	a4d5	7d d0 07	adc $07d0,x			adc 	gxX0,x
.c4d8	a4d8	9d d4 07	sta $07d4,x			sta 	gxX1,x
.c4db	a4db	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c4de	a4de	7d d1 07	adc $07d1,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d d5 07	sta $07d5,x			sta 	gxX1+1,x
.c4e5	a4e5	7e d4 07	ror $07d4,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.086d						gxRadius:
>086d								.fill 	1
.086e						gxxCentre:
>086e								.fill 	1
.086f						gxYCentre:
>086f								.fill 	1
.0870						gxIsFillMode:
>0870								.fill 	1
.0871						gxYChanged:
>0871								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad e1 07	lda $07e1			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d db 07	adc $07db			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd db 07	cmp $07db			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c d8 07	stz $07d8			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c d9 07	stz $07d9			stz 	gxBitmapsOn
.c547	a547	9c da 07	stz $07da			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e c8 07	stz $07c8,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 91 a6	jsr $a691			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d d9 07	sta $07d9			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d db 07	sta $07db			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 83 a6	jsr $a683			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e e1 07	stx $07e1			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d d8 07	sta $07d8			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d dc 07	sta $07dc			sta 	gxSpritePage
.c5c9	a5c9	20 83 a6	jsr $a683			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d eb 07	sta $07eb			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d ec 07	sta $07ec			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c ea 07	stz $07ea			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 91 a6	jsr $a691			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c da 07	stz $07da			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d da 07	sta $07da			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d df 07	sta $07df			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d e0 07	sta $07e0			sta 	gxTileMapHeight
.c617	a617	ad da 07	lda $07da			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	8d de 07	sta $07de			sta 	gxTileMapPage
.c61f	a61f	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c621	a621	8d dd 07	sta $07dd			sta 	gxTileImagePage
.c624	a624	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c626	a626	8d 00 d2	sta $d200			sta 	$D200
.c629	a629	ad de 07	lda $07de			lda 	gxTileMapPage 				; put tile map address in.
.c62c	a62c	20 83 a6	jsr $a683			jsr		GXCalculateBaseAddress
.c62f	a62f	9c 01 d2	stz $d201			stz 	$D201
.c632	a632	a5 36		lda $36				lda 	gxzTemp0
.c634	a634	8d 02 d2	sta $d202			sta 	$D202
.c637	a637	a5 37		lda $37				lda 	gxzTemp0+1
.c639	a639	8d 03 d2	sta $d203			sta 	$D203
.c63c	a63c	ad df 07	lda $07df			lda 	gxTileMapWidth	 			; set tilemap size.
.c63f	a63f	8d 04 d2	sta $d204			sta 	$D204
.c642	a642	ad e0 07	lda $07e0			lda 	gxTileMapHeight
.c645	a645	8d 06 d2	sta $d206			sta 	$D206
.c648	a648	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c64b	a64b	9c 09 d2	stz $d209			stz 	$D209
.c64e	a64e	9c 0a d2	stz $d20a			stz 	$D20A
.c651	a651	9c 0b d2	stz $d20b			stz 	$D20B
.c654	a654	ad dd 07	lda $07dd			lda 	gxTileImagePage 			; set the tile image address
.c657	a657	20 83 a6	jsr $a683			jsr 	GXCalculateBaseAddress
.c65a	a65a	9c 80 d2	stz $d280			stz 	$D280
.c65d	a65d	a5 36		lda $36				lda 	gxzTemp0
.c65f	a65f	8d 81 d2	sta $d281			sta 	$D281
.c662	a662	a5 37		lda $37				lda 	gxzTemp0+1
.c664	a664	8d 82 d2	sta $d282			sta 	$D282
.c667	a667	18		clc				clc
.c668	a668	60		rts				rts
.c669	a669					GXControlTileSize:
.c669	a669	ad da 07	lda $07da			lda 	gxTilesOn 					; check on
.c66c	a66c	38		sec				sec
.c66d	a66d	f0 13		beq $a682			beq 	_GXCTSExit
.c66f	a66f	64 01		stz $01				stz 	1 							; access I/O 0
.c671	a671	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c673	a673	8d df 07	sta $07df			sta 	gxTileMapWidth
.c676	a676	8d 04 d2	sta $d204			sta 	$D204
.c679	a679	a5 37		lda $37				lda 	gxzTemp0+1
.c67b	a67b	8d e0 07	sta $07e0			sta 	gxTileMapHeight
.c67e	a67e	8d 06 d2	sta $d206			sta 	$D206
.c681	a681	18		clc				clc
.c682	a682					_GXCTSExit:
.c682	a682	60		rts				rts
.c683	a683					GXCalculateBaseAddress:
.c683	a683	85 36		sta $36				sta 	gxzTemp0
.c685	a685	64 37		stz $37				stz 	gxzTemp0+1
.c687	a687	a9 05		lda #$05			lda 	#5
.c689	a689					_GXShift:
.c689	a689	06 36		asl $36				asl 	gxzTemp0
.c68b	a68b	26 37		rol $37				rol 	gxzTemp0+1
.c68d	a68d	3a		dec a				dec		a
.c68e	a68e	d0 f9		bne $a689			bne 	_GXShift
.c690	a690	60		rts				rts
.c691	a691					GXClearSpriteStore:
.c691	a691	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c693	a693					_GXCSSLoop:
.c693	a693	9e 2d 08	stz $082d,x			stz 	gxSpriteHigh,x
.c696	a696	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c698	a698	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.c69b	a69b	ca		dex				dex
.c69c	a69c	10 f5		bpl $a693			bpl 	_GXCSSLoop
.c69e	a69e	60		rts				rts
.c69f	a69f					GXLine:
.c69f	a69f	ad d9 07	lda $07d9			lda 	gxBitmapsOn					; check bitmap on.
.c6a2	a6a2	f0 28		beq $a6cc			beq 	_GXLFail
.c6a4	a6a4	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; access it.
.c6a7	a6a7	20 1e ad	jsr $ad1e			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6aa	a6aa	20 72 a7	jsr $a772			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6ad	a6ad	20 e8 ab	jsr $abe8			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b0	a6b0					_GXDrawLoop:
.c6b0	a6b0	ac e7 07	ldy $07e7			ldy 	gxOffset 					; draw the pixel
.c6b3	a6b3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6b5	a6b5	2d e5 07	and $07e5			and 	gxANDValue
.c6b8	a6b8	4d e4 07	eor $07e4			eor 	gxEORValue
.c6bb	a6bb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6bd	a6bd	20 ce a6	jsr $a6ce			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c0	a6c0	f0 05		beq $a6c7			beq 	_GXLExit
.c6c2	a6c2	20 e9 a6	jsr $a6e9			jsr 	GXLineAdvance 				; code as per advance method
.c6c5	a6c5	80 e9		bra $a6b0			bra 	_GXDrawLoop
.c6c7	a6c7					_GXLExit:
.c6c7	a6c7	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap 				; restore and return success.
.c6ca	a6ca	18		clc				clc
.c6cb	a6cb	60		rts				rts
.c6cc	a6cc					_GXLFail:
.c6cc	a6cc	38		sec				sec
.c6cd	a6cd	60		rts				rts
.c6ce	a6ce					GXLineIsComplete:
.c6ce	a6ce	ad 74 08	lda $0874			lda 	gxIsDiffYLarger 			; is dy larger
.c6d1	a6d1	d0 0f		bne $a6e2			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6d3	a6d3	ad d0 07	lda $07d0			lda 	gxX0 						; compare X, LSB and MSB
.c6d6	a6d6	4d d4 07	eor $07d4			eor 	gxX1
.c6d9	a6d9	d0 06		bne $a6e1			bne 	_GXLICExit
.c6db	a6db	ad d1 07	lda $07d1			lda 	gxX0+1
.c6de	a6de	4d d5 07	eor $07d5			eor 	gxX1+1
.c6e1	a6e1					_GXLICExit:
.c6e1	a6e1	60		rts				rts
.c6e2	a6e2					_GXLICCompareY:
.c6e2	a6e2	ad d6 07	lda $07d6			lda 	gxY1
.c6e5	a6e5	4d d2 07	eor $07d2			eor 	gxY0
.c6e8	a6e8	60		rts				rts
.c6e9	a6e9					GXLineAdvance:
.c6e9	a6e9	18		clc				clc 								; add adjust to position
.c6ea	a6ea	ad 76 08	lda $0876			lda 	gxPosition
.c6ed	a6ed	6d 77 08	adc $0877			adc 	gxAdjust
.c6f0	a6f0	8d 76 08	sta $0876			sta 	gxPosition
.c6f3	a6f3	9c 79 08	stz $0879			stz 	gxAddSelect 				; clear add select flag
.c6f6	a6f6	b0 05		bcs $a6fd			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c6f8	a6f8	cd 78 08	cmp $0878			cmp 	gxTotal 					; if exceeded total
.c6fb	a6fb	90 0a		bcc $a707			bcc 	_GXLANoExtra
.c6fd	a6fd					_GXLAOverflow:
.c6fd	a6fd	ce 79 08	dec $0879			dec 	gxAddSelect 				; set addselect to $FF
.c700	a700	38		sec				sec 								; subtract total and write back
.c701	a701	ed 78 08	sbc $0878			sbc 	gxTotal
.c704	a704	8d 76 08	sta $0876			sta 	gxPosition
.c707	a707					_GXLANoExtra:
.c707	a707	ad 74 08	lda $0874			lda 	gxIsDiffYLarger
.c70a	a70a	f0 0d		beq $a719			beq 	_GXDXLarger
.c70c	a70c	20 6b a7	jsr $a76b			jsr 	GXIncrementY
.c70f	a70f	ad 79 08	lda $0879			lda 	gxAddSelect
.c712	a712	f0 10		beq $a724			beq 	_GXLAExit
.c714	a714	20 25 a7	jsr $a725			jsr 	gxAdjustX
.c717	a717	80 0b		bra $a724			bra 	_GXLAExit
.c719	a719					_GXDXLarger:
.c719	a719	20 25 a7	jsr $a725			jsr 	gxAdjustX
.c71c	a71c	ad 79 08	lda $0879			lda 	gxAddSelect
.c71f	a71f	f0 03		beq $a724			beq 	_GXLAExit
.c721	a721	20 6b a7	jsr $a76b			jsr 	GXIncrementY
.c724	a724					_GXLAExit:
.c724	a724	60		rts				rts
.c725	a725					gxAdjustX:
.c725	a725	ad 75 08	lda $0875			lda 	gxDXNegative
.c728	a728	10 25		bpl $a74f			bpl 	_GXAXRight
.c72a	a72a	ad d0 07	lda $07d0			lda 	gxX0
.c72d	a72d	d0 03		bne $a732			bne 	_GXAXNoBorrow
.c72f	a72f	ce d1 07	dec $07d1			dec 	gxX0+1
.c732	a732					_GXAXNoBorrow:
.c732	a732	ce d0 07	dec $07d0			dec 	gxX0
.c735	a735	ce e7 07	dec $07e7			dec 	gxOffset 					; pixel left
.c738	a738	ad e7 07	lda $07e7			lda 	gxOffset
.c73b	a73b	c9 ff		cmp #$ff			cmp 	#$FF
.c73d	a73d	d0 0f		bne $a74e			bne 	_GXAYExit 					; underflow
.c73f	a73f	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c741	a741	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c743	a743	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c745	a745	b0 07		bcs $a74e			bcs 	_GXAYExit
.c747	a747	18		clc				clc
.c748	a748	69 20		adc #$20			adc 	#$20 						; fix up
.c74a	a74a	85 3d		sta $3d				sta 	gxzScreen+1
.c74c	a74c	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c74e	a74e					_GXAYExit:
.c74e	a74e	60		rts				rts
.c74f	a74f					_GXAXRight:
.c74f	a74f	ee d0 07	inc $07d0			inc 	gxX0
.c752	a752	d0 03		bne $a757			bne 	_GXAXNoCarry
.c754	a754	ee d1 07	inc $07d1			inc 	gxX0+1
.c757	a757					_GXAXNoCarry:
.c757	a757	ee e7 07	inc $07e7			inc 	gxOffset 					; pixel right
.c75a	a75a	d0 0e		bne $a76a			bne 	_GXAXExit 					; if not overflowed, exit.
.c75c	a75c	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c75e	a75e	a5 3d		lda $3d				lda 	gxzScreen+1
.c760	a760	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c762	a762	90 06		bcc $a76a			bcc 	_GXAXExit
.c764	a764	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c766	a766	85 3d		sta $3d				sta 	gxzScreen+1
.c768	a768	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c76a	a76a					_GXAXExit:
.c76a	a76a	60		rts				rts
.c76b	a76b					GXIncrementY:
.c76b	a76b	ee d2 07	inc $07d2			inc 	gxY0
.c76e	a76e	20 3e ac	jsr $ac3e			jsr 	GXMovePositionDown
.c771	a771	60		rts				rts
.c772	a772					GXLineSetup:
.c772	a772	ad d6 07	lda $07d6			lda 	gxY1
.c775	a775	38		sec				sec
.c776	a776	ed d2 07	sbc $07d2			sbc 	gxY0
.c779	a779	4a		lsr a				lsr 	a
.c77a	a77a	8d 73 08	sta $0873			sta 	gxDiffY
.c77d	a77d	9c 75 08	stz $0875			stz 	gxDXNegative 				; clear -ve flag
.c780	a780	38		sec				sec
.c781	a781	ad d4 07	lda $07d4			lda 	gxX1
.c784	a784	ed d0 07	sbc $07d0			sbc 	gxX0
.c787	a787	8d 72 08	sta $0872			sta 	gxDiffX
.c78a	a78a	ad d5 07	lda $07d5			lda 	gxX1+1 						; calculate MSB
.c78d	a78d	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c790	a790	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c791	a791	6e 72 08	ror $0872			ror 	gxDiffX
.c794	a794	0a		asl a				asl 	a
.c795	a795	10 0c		bpl $a7a3			bpl 	_GDXNotNegative
.c797	a797	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c799	a799	38		sec				sec
.c79a	a79a	ed 72 08	sbc $0872			sbc 	gxDiffX
.c79d	a79d	8d 72 08	sta $0872			sta 	gxDiffX
.c7a0	a7a0	ce 75 08	dec $0875			dec 	gxDXNegative 				; -ve flag = $FF.
.c7a3	a7a3					_GDXNotNegative:
.c7a3	a7a3	9c 74 08	stz $0874			stz 	gxIsDiffYLarger 			; clear larger flag
.c7a6	a7a6	ad 73 08	lda $0873			lda 	gxDiffY 					; set adjust and total.
.c7a9	a7a9	8d 77 08	sta $0877			sta 	gxAdjust
.c7ac	a7ac	ad 72 08	lda $0872			lda 	gxDiffX
.c7af	a7af	8d 78 08	sta $0878			sta 	gxTotal
.c7b2	a7b2	ad 73 08	lda $0873			lda 	gxDiffY 					; if dy > dx
.c7b5	a7b5	cd 72 08	cmp $0872			cmp 	gxDiffX
.c7b8	a7b8	90 0f		bcc $a7c9			bcc 	_GDXNotLarger
.c7ba	a7ba	ce 74 08	dec $0874			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7bd	a7bd	ad 72 08	lda $0872			lda 	gxDiffX 					; set adjust and total other way round
.c7c0	a7c0	8d 77 08	sta $0877			sta 	gxAdjust
.c7c3	a7c3	ad 73 08	lda $0873			lda 	gxDiffY
.c7c6	a7c6	8d 78 08	sta $0878			sta 	gxTotal
.c7c9	a7c9					_GDXNotLarger:
.c7c9	a7c9	ad 78 08	lda $0878			lda 	gxTotal
.c7cc	a7cc	4a		lsr a				lsr 	a
.c7cd	a7cd	8d 76 08	sta $0876			sta 	gxPosition
.c7d0	a7d0	60		rts				rts
.0872						gxDiffX:
>0872								.fill 	1
.0873						gxDiffY:
>0873								.fill 	1
.0874						gxIsDiffYLarger:
>0874								.fill 	1
.0875						gxDXNegative:
>0875								.fill 	1
.0876						gxPosition:
>0876								.fill 	1
.0877						gxAdjust:
>0877								.fill 	1
.0878						gxTotal:
>0878								.fill 	1
.0879						gxAddSelect:
>0879								.fill 	1
.c7d1	a7d1					GXSetColourMode:
.c7d1	a7d1	a6 36		ldx $36				ldx 	gxzTemp0
.c7d3	a7d3	8e e3 07	stx $07e3			stx 	gxColour 								; set colour
.c7d6	a7d6	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7d8	a7d8	8d e2 07	sta $07e2			sta 	gxMode 									; set mode
.c7db	a7db	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7dd	a7dd	9c e5 07	stz $07e5			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e0	a7e0	ae e3 07	ldx $07e3			ldx 	gxColour
.c7e3	a7e3	8e e4 07	stx $07e4			stx 	gxEORValue
.c7e6	a7e6	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7e8	a7e8	90 03		bcc $a7ed			bcc 	_GXSDCNotAndColour
.c7ea	a7ea	8e e5 07	stx $07e5			stx 	gxANDValue
.c7ed	a7ed					_GXSDCNotAndColour:
.c7ed	a7ed	d0 03		bne $a7f2			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7ef	a7ef	9c e4 07	stz $07e4			stz 	gxEORValue
.c7f2	a7f2					_GXSDCNotAnd:
.c7f2	a7f2	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7f3	a7f3	90 08		bcc $a7fd			bcc 	_GXSDCNoFlip
.c7f5	a7f5	ad e5 07	lda $07e5			lda	 	gxANDValue
.c7f8	a7f8	49 ff		eor #$ff			eor 	#$FF
.c7fa	a7fa	8d e5 07	sta $07e5			sta 	gxANDValue
.c7fd	a7fd					_GXSDCNoFlip:
.c7fd	a7fd	18		clc				clc
.c7fe	a7fe	60		rts				rts
.c7ff	a7ff					GXPlotPoint:
.c7ff	a7ff	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; start drawing
.c802	a802	20 e8 ab	jsr $abe8			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c805	a805	ac e7 07	ldy $07e7			ldy 	gxOffset
.c808	a808	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c80a	a80a	2d e5 07	and $07e5			and 	gxANDValue
.c80d	a80d	4d e4 07	eor $07e4			eor 	gxEORValue
.c810	a810	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c812	a812	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap 				; stop drawing and exit
.c815	a815	18		clc				clc
.c816	a816	60		rts				rts
.c817	a817					GXFillRectangle:
.c817	a817	38		sec				sec 								; pass carry in for fill/frame
.c818	a818	80 01		bra $a81b			bra 	GXRectangle
.c81a	a81a					GXFrameRectangle:
.c81a	a81a	18		clc				clc
.c81b	a81b					GXRectangle:
.c81b	a81b	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; exit if off.
.c81e	a81e	f0 35		beq $a855			beq 	_GXRFail
.c820	a820	08		php				php 								; save Fill flag (CS)
.c821	a821	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; start drawing
.c824	a824	20 00 ad	jsr $ad00			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c827	a827	20 e8 ab	jsr $abe8			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c82a	a82a	38		sec				sec 								; sec = Draw line
.c82b	a82b	20 57 a8	jsr $a857			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c82e	a82e	ad d2 07	lda $07d2			lda 	gxY0 						; reached end of rectangle ?
.c831	a831	cd d6 07	cmp $07d6			cmp 	gxY1 						; e.g. 1 pixel high.
.c834	a834	f0 19		beq $a84f			beq 	_GXRectangleExit
.c836	a836					_GXRectLoop:
.c836	a836	20 3e ac	jsr $ac3e			jsr 	GXMovePositionDown 			; down one.
.c839	a839	ee d2 07	inc $07d2			inc 	gxY0 						; change Y pos
.c83c	a83c	ad d2 07	lda $07d2			lda 	gxY0 						; reached last line
.c83f	a83f	cd d6 07	cmp $07d6			cmp 	gxY1
.c842	a842	f0 07		beq $a84b			beq 	_GXLastLine
.c844	a844	28		plp				plp 								; get flag back for solid/edged
.c845	a845	08		php				php
.c846	a846	20 57 a8	jsr $a857			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c849	a849	80 eb		bra $a836			bra 	_GXRectLoop
.c84b	a84b					_GXLastLine:
.c84b	a84b	38		sec				sec
.c84c	a84c	20 57 a8	jsr $a857			jsr 	GXDrawLineX1X0
.c84f	a84f					_GXRectangleExit:
.c84f	a84f	68		pla				pla 								; throw fill flag.
.c850	a850	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap 				; stop drawing and exit
.c853	a853	18		clc				clc
.c854	a854	60		rts				rts
.c855	a855					_GXRFail:
.c855	a855	38		sec				sec
.c856	a856	60		rts				rts
.c857	a857					GXDrawLineX1X0:
.c857	a857	08		php				php 								; save solid/either-end
.c858	a858	38		sec				sec 								; calculate x1-x0
.c859	a859	ad d4 07	lda $07d4			lda		gxX1
.c85c	a85c	ed d0 07	sbc $07d0			sbc 	gxX0
.c85f	a85f	85 36		sta $36				sta 	gxzTemp0
.c861	a861	ad d5 07	lda $07d5			lda 	gxX1+1
.c864	a864	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c867	a867	85 37		sta $37				sta 	gxzTemp0+1
.c869	a869	28		plp				plp
.c86a	a86a					GXDrawLineTemp0:
.c86a	a86a	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c86c	a86c	48		pha				pha
.c86d	a86d	a5 3d		lda $3d				lda 	gxzScreen+1
.c86f	a86f	48		pha				pha
.c870	a870	ad e7 07	lda $07e7			lda 	gxOffset
.c873	a873	48		pha				pha
.c874	a874	a5 0b		lda $0b				lda 	GXEditSlot
.c876	a876	48		pha				pha
.c877	a877	ac e7 07	ldy $07e7			ldy 	gxOffset 					; Y offset
.c87a	a87a	90 1e		bcc $a89a			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c87c	a87c					_GXDLTLine:
.c87c	a87c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c87e	a87e	2d e5 07	and $07e5			and 	gxANDValue
.c881	a881	4d e4 07	eor $07e4			eor 	gxEORValue
.c884	a884	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c886	a886	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c888	a888	d0 04		bne $a88e			bne 	_GXDLTNoBorrow
.c88a	a88a	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c88c	a88c	30 2e		bmi $a8bc			bmi 	_GXDLTExit
.c88e	a88e					_GXDLTNoBorrow:
.c88e	a88e	c6 36		dec $36				dec 	gxzTemp0
.c890	a890	c8		iny				iny 								; next slot.
.c891	a891	d0 e9		bne $a87c			bne 	_GXDLTLine
.c893	a893	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c895	a895	20 ca a8	jsr $a8ca			jsr 	GXDLTCheckWrap				; check for new page.
.c898	a898	80 e2		bra $a87c			bra 	_GXDLTLine
.c89a	a89a					_GXDLTEndPoints:
.c89a	a89a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c89c	a89c	2d e5 07	and $07e5			and 	gxANDValue
.c89f	a89f	4d e4 07	eor $07e4			eor 	gxEORValue
.c8a2	a8a2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8a4	a8a4	98		tya				tya 								; advance to right side
.c8a5	a8a5	18		clc				clc
.c8a6	a8a6	65 36		adc $36				adc 	gxzTemp0
.c8a8	a8a8	a8		tay				tay
.c8a9	a8a9	a5 3d		lda $3d				lda 	gxzScreen+1
.c8ab	a8ab	65 37		adc $37				adc 	gxzTemp0+1
.c8ad	a8ad	85 3d		sta $3d				sta 	gxzScreen+1
.c8af	a8af	20 ca a8	jsr $a8ca			jsr 	GXDLTCheckWrap 				; fix up.
.c8b2	a8b2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8b4	a8b4	2d e5 07	and $07e5			and 	gxANDValue
.c8b7	a8b7	4d e4 07	eor $07e4			eor 	gxEORValue
.c8ba	a8ba	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8bc	a8bc					_GXDLTExit:
.c8bc	a8bc	68		pla				pla
.c8bd	a8bd	85 0b		sta $0b				sta 	GXEditSlot
.c8bf	a8bf	68		pla				pla
.c8c0	a8c0	8d e7 07	sta $07e7			sta 	gxOffset
.c8c3	a8c3	68		pla				pla
.c8c4	a8c4	85 3d		sta $3d				sta 	gxzScreen+1
.c8c6	a8c6	68		pla				pla
.c8c7	a8c7	85 3c		sta $3c				sta 	gxzScreen
.c8c9	a8c9	60		rts				rts
.c8ca	a8ca					GXDLTCheckWrap:
.c8ca	a8ca	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8cc	a8cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8ce	a8ce	90 06		bcc $a8d6			bcc 	_GXDLTCWExit
.c8d0	a8d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8d2	a8d2	85 3d		sta $3d				sta 	gxzScreen+1
.c8d4	a8d4	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8d6	a8d6					_GXDLTCWExit:
.c8d6	a8d6	60		rts				rts
.c8d7	a8d7					GXDrawGraphicElement:
.c8d7	a8d7	8d 7a 08	sta $087a			sta 	gxSize 						; save size
.c8da	a8da	3a		dec a				dec 	a
.c8db	a8db	8d 7b 08	sta $087b			sta 	gxMask 						; and mask
.c8de	a8de	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP on
.c8e1	a8e1	f0 67		beq $a94a			beq 	_GXSLFail
.c8e3	a8e3	ad d2 07	lda $07d2			lda 	gxY0 						; push Y on stack
.c8e6	a8e6	48		pha				pha
.c8e7	a8e7	8c 7d 08	sty $087d			sty 	gxAcquireVector+1 			; and acquisition vector
.c8ea	a8ea	8e 7c 08	stx $087c			stx 	gxAcquireVector
.c8ed	a8ed	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f0	a8f0	ad 7f 08	lda $087f			lda 	gxUseMode 					; scale bits
.c8f3	a8f3	4a		lsr a				lsr 	a
.c8f4	a8f4	4a		lsr a				lsr 	a
.c8f5	a8f5	4a		lsr a				lsr 	a
.c8f6	a8f6	29 07		and #$07			and		#7
.c8f8	a8f8	1a		inc a				inc 	a
.c8f9	a8f9	8d 7e 08	sta $087e			sta 	gxScale
.c8fc	a8fc	64 38		stz $38				stz 	gxzTemp1					; start first line
.c8fe	a8fe					_GXGELoop:
.c8fe	a8fe	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c900	a900	2c 7f 08	bit $087f			bit 	gxUseMode 					; check for flip.
.c903	a903	10 06		bpl $a90b			bpl		_GXNoVFlip
.c905	a905	ad 7b 08	lda $087b			lda 	gxMask
.c908	a908	38		sec				sec
.c909	a909	e5 38		sbc $38				sbc 	gxzTemp1
.c90b	a90b					_GXNoVFlip:
.c90b	a90b	aa		tax				tax 								; get the Xth line.
.c90c	a90c	20 4c a9	jsr $a94c			jsr 	_GXCallAcquire 				; get that data.
.c90f	a90f	ad 7e 08	lda $087e			lda 	gxScale 					; do scale identical copies of that line.
.c912	a912	85 39		sta $39				sta 	gxzTemp1+1
.c914	a914					_GXGELoop2:
.c914	a914	ad d2 07	lda $07d2			lda 	gxY0 						; off screen
.c917	a917	cd e1 07	cmp $07e1			cmp 	gxHeight
.c91a	a91a	b0 10		bcs $a92c			bcs 	_GXDGEExit
.c91c	a91c	20 4f a9	jsr $a94f			jsr 	GXRenderOneLine 			; render line
.c91f	a91f	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c921	a921	d0 f1		bne $a914			bne 	_GXGELoop2
.c923	a923	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c925	a925	a5 38		lda $38				lda 	gxzTemp1
.c927	a927	cd 7a 08	cmp $087a			cmp 	gxSize
.c92a	a92a	d0 d2		bne $a8fe			bne 	_GXGELoop
.c92c	a92c					_GXDGEExit:
.c92c	a92c	68		pla				pla 								; restore Y for next time
.c92d	a92d	8d d2 07	sta $07d2			sta 	gxY0
.c930	a930	ae 7e 08	ldx $087e			ldx 	gxScale 					; get scale (1-8)
.c933	a933					_GXShiftLeft:
.c933	a933	18		clc				clc
.c934	a934	ad 7a 08	lda $087a			lda 	gxSize
.c937	a937	6d d0 07	adc $07d0			adc 	gxX0
.c93a	a93a	8d d0 07	sta $07d0			sta 	gxX0
.c93d	a93d	90 03		bcc $a942			bcc 	_GXSLNoCarry
.c93f	a93f	ee d1 07	inc $07d1			inc 	gxX0+1
.c942	a942					_GXSLNoCarry:
.c942	a942	ca		dex				dex
.c943	a943	d0 ee		bne $a933			bne 	_GXShiftLeft
.c945	a945	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap
.c948	a948	18		clc				clc
.c949	a949	60		rts				rts
.c94a	a94a					_GXSLFail:
.c94a	a94a	38		sec				sec
.c94b	a94b	60		rts				rts
.c94c	a94c					_GXCallAcquire:
.c94c	a94c	6c 7c 08	jmp ($087c)			jmp 	(gxAcquireVector)
.c94f	a94f					GXRenderOneLine:
.c94f	a94f	20 e8 ab	jsr $abe8			jsr 	gxPositionCalc 				; calculate position/offset.
.c952	a952	ac e7 07	ldy $07e7			ldy 	gxOffset 					; Y contains position.
.c955	a955	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c957	a957					_GXROLLoop1:
.c957	a957	ad 7e 08	lda $087e			lda 	gxScale 					; set to do 'scale' times
.c95a	a95a	85 3b		sta $3b				sta 	gxzTemp2+1
.c95c	a95c					_GXROLLoop2:
.c95c	a95c	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c95e	a95e	2c e2 07	bit $07e2			bit 	gxMode 						; check H Flip
.c961	a961	50 06		bvc $a969			bvc 	_GXNoHFlip
.c963	a963	ad 7b 08	lda $087b			lda 	gxMask
.c966	a966	38		sec				sec
.c967	a967	e5 3a		sbc $3a				sbc 	gxzTemp2
.c969	a969					_GXNoHFlip:
.c969	a969	aa		tax				tax 								; read from the pixel buffer
.c96a	a96a	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c96d	a96d	d0 07		bne $a976			bne 	_GXDraw 					; draw if non zero
.c96f	a96f	ad 7f 08	lda $087f			lda 	gxUseMode 					; check to see if solid background
.c972	a972	29 04		and #$04			and 	#4
.c974	a974	f0 0a		beq $a980			beq 	_GXZeroPixel
.c976	a976					_GXDraw:
.c976	a976	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c978	a978	2d e5 07	and $07e5			and 	gxANDValue
.c97b	a97b	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c97e	a97e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c980	a980					_GXZeroPixel:
.c980	a980	c8		iny				iny 								; advance pointer
.c981	a981	d0 05		bne $a988			bne 	_GXNoShift
.c983	a983	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c985	a985	20 ca a8	jsr $a8ca			jsr 	GXDLTCheckWrap				; check for new page.
.c988	a988					_GXNoShift:
.c988	a988	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c98a	a98a	d0 d0		bne $a95c			bne 	_GXROLLoop2
.c98c	a98c	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c98e	a98e	a5 3a		lda $3a				lda 	gxzTemp2
.c990	a990	cd 7a 08	cmp $087a			cmp 	gxSize
.c993	a993	d0 c2		bne $a957			bne 	_GXROLLoop1
.c995	a995	ee d2 07	inc $07d2			inc 	gxY0
.c998	a998	60		rts				rts
.087a						gxSize:
>087a								.fill 	1
.087b						gxMask:
>087b								.fill 	1
.087c						gxAcquireVector:
>087c								.fill 	2
.087e						gxScale:
>087e								.fill 	1
.087f						gxUseMode:
>087f								.fill 	1
.c999	a999					GXControlTileScrollX:
.c999	a999	ad df 07	lda $07df			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c99c	a99c	20 bb a9	jsr $a9bb			jsr 	GXScrollProcessor 			; scroll processing.
.c99f	a99f	b0 08		bcs $a9a9			bcs 	_GXCTSExit
.c9a1	a9a1	64 01		stz $01				stz 	1 							; write it out.
.c9a3	a9a3	8e 08 d2	stx $d208			stx 	$D208
.c9a6	a9a6	8c 09 d2	sty $d209			sty 	$D209
.c9a9	a9a9					_GXCTSExit:
.c9a9	a9a9	60		rts				rts
.c9aa	a9aa					GXControlTileScrollY:
.c9aa	a9aa	ad e0 07	lda $07e0			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9ad	a9ad	20 bb a9	jsr $a9bb			jsr 	GXScrollProcessor 			; scroll processing.
.c9b0	a9b0	b0 08		bcs $a9ba			bcs 	_GXCTSExit
.c9b2	a9b2	64 01		stz $01				stz 	1 							; write it out.
.c9b4	a9b4	8e 0a d2	stx $d20a			stx 	$D20A
.c9b7	a9b7	8c 0b d2	sty $d20b			sty 	$D20B
.c9ba	a9ba					_GXCTSExit:
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXScrollProcessor:
.c9bb	a9bb	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9bd	a9bd	ad da 07	lda $07da			lda 	gxTilesOn 					; check tile map is on.
.c9c0	a9c0	38		sec				sec
.c9c1	a9c1	f0 2c		beq $a9ef			beq 	_GXSPExit
.c9c3	a9c3	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9c5	a9c5	a2 03		ldx #$03			ldx 	#3
.c9c7	a9c7					_GXCalcMaxPixelScroll:
.c9c7	a9c7	06 38		asl $38				asl 	gxzTemp1
.c9c9	a9c9	26 39		rol $39				rol 	gxzTemp1+1
.c9cb	a9cb	ca		dex				dex
.c9cc	a9cc	d0 f9		bne $a9c7			bne 	_GXCalcMaxPixelScroll
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d0	a9d0	c5 38		cmp $38				cmp 	gxzTemp1
.c9d2	a9d2	a5 37		lda $37				lda 	gxzTemp0+1
.c9d4	a9d4	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9d6	a9d6	b0 17		bcs $a9ef			bcs		_GXSPExit
.c9d8	a9d8	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9da	a9da	29 07		and #$07			and		#7
.c9dc	a9dc	85 38		sta $38				sta 	gxzTemp1
.c9de	a9de	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e0	a9e0	26 37		rol $37				rol 	gxzTemp0+1
.c9e2	a9e2	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9e4	a9e4	29 0f		and #$0f			and 	#$0F
.c9e6	a9e6	a8		tay				tay
.c9e7	a9e7	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9e9	a9e9	29 f0		and #$f0			and 	#$F0
.c9eb	a9eb	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9ed	a9ed	aa		tax				tax 								; return in X
.c9ee	a9ee	18		clc				clc
.c9ef	a9ef					_GXSPExit:
.c9ef	a9ef	60		rts				rts
.c9f0	a9f0					GXFontHandler:
.c9f0	a9f0	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9f2	a9f2	4d e2 07	eor $07e2			eor 	gxMode
.c9f5	a9f5	8d 7f 08	sta $087f			sta 	gxUseMode
.c9f8	a9f8	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c9fa	a9fa	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c9fc	a9fc	26 37		rol $37				rol	 	gxzTemp0+1
.c9fe	a9fe	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca00	aa00	26 37		rol $37				rol	 	gxzTemp0+1
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca08	aa08	09 c0		ora #$c0			ora 	#$C0
.ca0a	aa0a	85 37		sta $37				sta 	gxzTemp0+1
.ca0c	aa0c	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca0e	aa0e	a2 16		ldx #$16			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca10	aa10	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca12	aa12	20 d7 a8	jsr $a8d7			jsr 	GXDrawGraphicElement
.ca15	aa15	60		rts				rts
.ca16	aa16					GXGetGraphicDataFont:
.ca16	aa16	8a		txa				txa 								; X->Y
.ca17	aa17	a8		tay				tay
.ca18	aa18	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca1a	aa1a	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca1c	aa1c	85 01		sta $01				sta 	1
.ca1e	aa1e	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca20	aa20	86 01		stx $01				stx 	1 							; put old value back.
.ca22	aa22	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca24	aa24					_GXExpand:
.ca24	aa24	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca27	aa27	0a		asl a				asl 	a 							; shift bit 7 into C
.ca28	aa28	90 08		bcc $aa32			bcc 	_GXNoPixel
.ca2a	aa2a	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca2b	aa2b	ad e3 07	lda $07e3			lda 	gxColour
.ca2e	aa2e	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.ca31	aa31	68		pla				pla
.ca32	aa32					_GXNoPixel:
.ca32	aa32	e8		inx				inx 								; do the whole byte.
.ca33	aa33	e0 08		cpx #$08			cpx 	#8
.ca35	aa35	d0 ed		bne $aa24			bne 	_GXExpand
.ca37	aa37	60		rts				rts
.ca38	aa38					GXSpriteHandler:
.ca38	aa38	ad d8 07	lda $07d8			lda 	gxSpritesOn 				; sprites on ?
.ca3b	aa3b	f0 23		beq $aa60			beq 	_GXSHExit
.ca3d	aa3d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca3f	aa3f	4d e2 07	eor $07e2			eor 	gxMode
.ca42	aa42	8d 7f 08	sta $087f			sta 	gxUseMode
.ca45	aa45	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca47	aa47	da		phx				phx
.ca48	aa48	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap 				; can access sprite information
.ca4b	aa4b	68		pla				pla
.ca4c	aa4c	20 b9 ac	jsr $acb9			jsr 	GXFindSprite 				; get the sprite address
.ca4f	aa4f	08		php				php
.ca50	aa50	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap
.ca53	aa53	28		plp				plp
.ca54	aa54	b0 0a		bcs $aa60			bcs		_GXSHExit 					; exit if find failed.
.ca56	aa56	ad 80 08	lda $0880			lda 	gxSizePixels 				; return size
.ca59	aa59	a2 61		ldx #$61			ldx 	#GXSpriteAcquire & $FF
.ca5b	aa5b	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca5d	aa5d	20 d7 a8	jsr $a8d7			jsr 	GXDrawGraphicElement
.ca60	aa60					_GXSHExit:
.ca60	aa60	60		rts				rts
.ca61	aa61					GXSpriteAcquire:
.ca61	aa61	ad dc 07	lda $07dc			lda 	gxSpritePage				; point to base page
.ca64	aa64	85 0b		sta $0b				sta 	GXEditSlot
.ca66	aa66	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca68	aa68	a9 00		lda #$00			lda 	#0
.ca6a	aa6a	ae 81 08	ldx $0881			ldx 	gxSizeBits
.ca6d	aa6d					_GXTimesRowNumber:
.ca6d	aa6d	18		clc				clc
.ca6e	aa6e	65 36		adc $36				adc 	gxzTemp0
.ca70	aa70	ca		dex				dex
.ca71	aa71	10 fa		bpl $aa6d			bpl 	_GXTimesRowNumber
.ca73	aa73	64 37		stz $37				stz 	gxzTemp0+1
.ca75	aa75	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca76	aa76	26 37		rol $37				rol 	gxzTemp0+1
.ca78	aa78	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca79	aa79	26 37		rol $37				rol 	gxzTemp0+1
.ca7b	aa7b	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca7c	aa7c	26 37		rol $37				rol 	gxzTemp0+1
.ca7e	aa7e	85 36		sta $36				sta 	gxzTemp0
.ca80	aa80	18		clc				clc 								; add base address.
.ca81	aa81	a5 36		lda $36				lda 	gxzTemp0
.ca83	aa83	6d 83 08	adc $0883			adc 	gxSpriteOffset
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	a5 37		lda $37				lda 	gxzTemp0+1
.ca8a	aa8a	6d 84 08	adc $0884			adc 	gxSpriteOffset+1
.ca8d	aa8d					_GXSAFindPage:
.ca8d	aa8d	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca8f	aa8f	90 06		bcc $aa97			bcc 	_GXSAFoundPage
.ca91	aa91	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca93	aa93	e6 0b		inc $0b				inc 	GXEditSlot
.ca95	aa95	80 f6		bra $aa8d			bra 	_GXSAFindPage
.ca97	aa97					_GXSAFoundPage:
.ca97	aa97	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ca99	aa99	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ca9b	aa9b	a0 00		ldy #$00			ldy 	#0
.ca9d	aa9d					_GXSACopyLoop:
.ca9d	aa9d	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ca9f	aa9f	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.caa2	aaa2	c8		iny				iny
.caa3	aaa3	cc 80 08	cpy $0880			cpy 	gxSizePixels
.caa6	aaa6	d0 f5		bne $aa9d			bne 	_GXSACopyLoop
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXSelect:
.caa9	aaa9	ad d8 07	lda $07d8			lda 	gxSpritesOn
.caac	aaac	f0 22		beq $aad0			beq 	_GXSFail
.caae	aaae	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab0	aab0	c9 40		cmp #$40			cmp 	#64
.cab2	aab2	b0 1c		bcs $aad0			bcs 	_GXSFail
.cab4	aab4	8d e8 07	sta $07e8			sta 	GSCurrentSpriteID
.cab7	aab7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cab9	aab9	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cabb	aabb	06 36		asl $36				asl 	gxzTemp0
.cabd	aabd	06 36		asl $36				asl 	gxzTemp0
.cabf	aabf	06 36		asl $36				asl 	gxzTemp0
.cac1	aac1	2a		rol a				rol 	a
.cac2	aac2	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cac4	aac4	8d ea 07	sta $07ea			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cac7	aac7	85 37		sta $37				sta 	gxzTemp0+1
.cac9	aac9	a5 36		lda $36				lda 	gxzTemp0
.cacb	aacb	8d e9 07	sta $07e9			sta 	GSCurrentSpriteAddr
.cace	aace	18		clc				clc
.cacf	aacf	60		rts				rts
.cad0	aad0					_GXSFail:
.cad0	aad0	38		sec				sec
.cad1	aad1	60		rts				rts
.cad2	aad2					GXSelectImage:
.cad2	aad2	ad d8 07	lda $07d8			lda 	gxSpritesOn
.cad5	aad5	f0 74		beq $ab4b			beq 	_GXSIFail
.cad7	aad7	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cada	aada	f0 6f		beq $ab4b			beq 	_GXSIFail 					; (checking the MSB)
.cadc	aadc	64 01		stz $01				stz 	1
.cade	aade	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae0	aae0	d0 6b		bne $ab4d			bne 	_GXSIHide
.cae2	aae2	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.cae4	aae4	48		pha				pha
.cae5	aae5	20 d8 ab	jsr $abd8			jsr 	GXOpenBitmap
.cae8	aae8	68		pla				pla
.cae9	aae9	20 b9 ac	jsr $acb9			jsr 	GXFindSprite
.caec	aaec	b0 5a		bcs $ab48			bcs 	_GXSICloseFail 				; no image
.caee	aaee	a0 01		ldy #$01			ldy 	#1
.caf0	aaf0	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr
.caf3	aaf3	85 36		sta $36				sta 	gxzTemp0
.caf5	aaf5	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1
.caf8	aaf8	85 37		sta $37				sta 	gxzTemp0+1
.cafa	aafa	ad 83 08	lda $0883			lda 	gxSpriteOffset
.cafd	aafd	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.caff	aaff	18		clc				clc
.cb00	ab00	ad 84 08	lda $0884			lda 	gxSpriteOffset+1
.cb03	ab03	6d eb 07	adc $07eb			adc 	gxSpriteOffsetBase
.cb06	ab06	c8		iny				iny
.cb07	ab07	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb09	ab09	ad ec 07	lda $07ec			lda 	gxSpriteOffsetBase+1
.cb0c	ab0c	69 00		adc #$00			adc 	#0
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad 81 08	lda $0881			lda 	gxSizeBits 					; get raw size
.cb14	ab14	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb16	ab16	2a		rol a				rol 	a 							; x 2
.cb17	ab17	0a		asl a				asl 	a 							; x 4
.cb18	ab18	0a		asl a				asl 	a 							; x 8
.cb19	ab19	0a		asl a				asl 	a 							; x 16
.cb1a	ab1a	0d 82 08	ora $0882			ora 	gxSpriteLUT 				; Or with LUT
.cb1d	ab1d	0a		asl a				asl 	a 							; 1 shift
.cb1e	ab1e	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb20	ab20	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb22	ab22	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap
.cb25	ab25	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb28	ab28	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb2b	ab2b	29 3f		and #$3f			and 	#$3F
.cb2d	ab2d	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cb30	ab30	ad 81 08	lda $0881			lda 	gxSizeBits 					; get bit size
.cb33	ab33	6a		ror a				ror 	a 							; shift into bits 6/7
.cb34	ab34	6a		ror a				ror 	a
.cb35	ab35	6a		ror a				ror 	a
.cb36	ab36	29 c0		and #$c0			and 	#$C0
.cb38	ab38	1d 2d 08	ora $082d,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb3b	ab3b	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cb3e	ab3e	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb41	ab41	29 7f		and #$7f			and 	#$7F
.cb43	ab43	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cb46	ab46	18		clc				clc
.cb47	ab47	60		rts				rts
.cb48	ab48					_GXSICloseFail:
.cb48	ab48	20 e0 ab	jsr $abe0			jsr 	GXCloseBitmap
.cb4b	ab4b					_GXSIFail:
.cb4b	ab4b	38		sec				sec
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					_GXSIHide:
.cb4d	ab4d	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb50	ab50	85 36		sta $36				sta 	gxzTemp0
.cb52	ab52	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1
.cb55	ab55	85 37		sta $37				sta 	gxzTemp0+1
.cb57	ab57	a9 00		lda #$00			lda 	#0
.cb59	ab59	92 36		sta ($36)			sta 	(gxzTemp0)
.cb5b	ab5b	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb5e	ab5e	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb61	ab61	09 80		ora #$80			ora 	#$80
.cb63	ab63	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cb66	ab66	18		clc				clc
.cb67	ab67	60		rts				rts
.cb68	ab68					GXMoveSprite:
.cb68	ab68	ad d8 07	lda $07d8			lda 	gxSpritesOn
.cb6b	ab6b	f0 65		beq $abd2			beq 	_GXSIFail
.cb6d	ab6d	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb70	ab70	f0 60		beq $abd2			beq 	_GXSIFail
.cb72	ab72	85 37		sta $37				sta 	gxzTemp0+1
.cb74	ab74	a0 04		ldy #$04			ldy 	#4
.cb76	ab76	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr
.cb79	ab79	85 36		sta $36				sta 	gxzTemp0
.cb7b	ab7b	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb7e	ab7e	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cb81	ab81	2a		rol a				rol 	a	 						; into bits 0,1.
.cb82	ab82	2a		rol a				rol 	a
.cb83	ab83	2a		rol a				rol 	a
.cb84	ab84	29 03		and #$03			and 	#3
.cb86	ab86	aa		tax				tax
.cb87	ab87	bd d4 ab	lda $abd4,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb8a	ab8a	48		pha				pha
.cb8b	ab8b	18		clc				clc
.cb8c	ab8c	6d d0 07	adc $07d0			adc 	gxX0						; copy position.
.cb8f	ab8f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb91	ab91	c8		iny				iny
.cb92	ab92	ad d1 07	lda $07d1			lda 	gxX0+1
.cb95	ab95	69 00		adc #$00			adc 	#0
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	68		pla				pla
.cb9b	ab9b	18		clc				clc
.cb9c	ab9c	6d d2 07	adc $07d2			adc 	gxY0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	a9 00		lda #$00			lda 	#0
.cba3	aba3	69 00		adc #$00			adc 	#0
.cba5	aba5	c8		iny				iny
.cba6	aba6	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba8	aba8	4e d1 07	lsr $07d1			lsr 	gxX0+1 						; divide X by 4
.cbab	abab	6e d0 07	ror $07d0			ror 	gxX0
.cbae	abae	4e d0 07	lsr $07d0			lsr 	gxX0
.cbb1	abb1	4e d2 07	lsr $07d2			lsr 	gxY0 						; divide Y by 4
.cbb4	abb4	4e d2 07	lsr $07d2			lsr 	gxY0
.cbb7	abb7	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbba	abba	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x
.cbbd	abbd	29 80		and #$80			and 	#$80
.cbbf	abbf	0d d0 07	ora $07d0			ora 	gxX0
.cbc2	abc2	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cbc5	abc5	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cbc8	abc8	29 c0		and #$c0			and 	#$C0
.cbca	abca	0d d2 07	ora $07d2			ora 	gxY0
.cbcd	abcd	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cbd0	abd0	18		clc				clc
.cbd1	abd1	60		rts				rts
.cbd2	abd2					_GXSIFail:
.cbd2	abd2	38		sec				sec
.cbd3	abd3	60		rts				rts
.cbd4	abd4					_GXMSOffset:
>cbd4	abd4	1c						.byte 	32-8/2
>cbd5	abd5	18						.byte 	32-16/2
>cbd6	abd6	14						.byte 	32-24/2
>cbd7	abd7	10						.byte 	32-32/2
.cbd8	abd8					GXOpenBitmap:
.cbd8	abd8	78		sei				sei 								; no interrupts here
.cbd9	abd9	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cbdb	abdb	8d e6 07	sta $07e6			sta 	gxOriginalLUTValue
.cbde	abde	58		cli				cli
.cbdf	abdf	60		rts				rts
.cbe0	abe0					GXCloseBitmap:
.cbe0	abe0	78		sei				sei
.cbe1	abe1	ad e6 07	lda $07e6			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cbe4	abe4	85 0b		sta $0b				sta 	GXEditSlot
.cbe6	abe6	58		cli				cli
.cbe7	abe7	60		rts				rts
.cbe8	abe8					gxPositionCalc:
.cbe8	abe8	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cbea	abea	48		pha				pha
.cbeb	abeb	ad d2 07	lda $07d2			lda 	gxY0 							; gxzScreen = Y0
.cbee	abee	85 3c		sta $3c				sta 	gxzScreen
.cbf0	abf0	64 3d		stz $3d				stz 	gxzScreen+1
.cbf2	abf2	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cbf4	abf4	26 3d		rol $3d				rol 	gxzScreen+1
.cbf6	abf6	06 3c		asl $3c				asl 	gxzScreen
.cbf8	abf8	26 3d		rol $3d				rol 	gxzScreen+1
.cbfa	abfa	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cbfb	abfb	65 3c		adc $3c				adc 	gxzScreen
.cbfd	abfd	85 3c		sta $3c				sta 	gxzScreen
.cbff	abff	90 02		bcc $ac03			bcc 	_GXPCNoCarry
.cc01	ac01	e6 3d		inc $3d				inc 	gxzScreen+1
.cc03	ac03					_GXPCNoCarry:
.cc03	ac03	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.cc05	ac05	26 3d		rol $3d				rol 	gxzScreen+1
.cc07	ac07	a5 3d		lda $3d				lda	 	gxzScreen+1
.cc09	ac09	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.cc0b	ac0b	64 3d		stz $3d				stz 	gxzScreen+1
.cc0d	ac0d	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.cc0f	ac0f					_GXPCMultiply32:
.cc0f	ac0f	06 3c		asl $3c				asl 	gxzScreen
.cc11	ac11	26 3d		rol $3d				rol 	gxzScreen+1
.cc13	ac13	3a		dec a				dec 	a
.cc14	ac14	d0 f9		bne $ac0f			bne 	_GXPCMultiply32
.cc16	ac16	18		clc				clc
.cc17	ac17	ad d0 07	lda $07d0			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cc1a	ac1a	65 3c		adc $3c				adc 	gxzScreen
.cc1c	ac1c	8d e7 07	sta $07e7			sta 	gxOffset
.cc1f	ac1f	ad d1 07	lda $07d1			lda 	gxX0+1
.cc22	ac22	65 3d		adc $3d				adc 	gxzScreen+1
.cc24	ac24	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cc26	ac26	90 04		bcc $ac2c			bcc 	_GXPCNoOverflow
.cc28	ac28	29 1f		and #$1f			and 	#$1F 						; fix it up
.cc2a	ac2a	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cc2c	ac2c					_GXPCNoOverflow:
.cc2c	ac2c	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cc2e	ac2e	85 3d		sta $3d				sta 	gxzScreen+1
.cc30	ac30	64 3c		stz $3c				stz 	gxzScreen
.cc32	ac32	18		clc				clc
.cc33	ac33	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cc35	ac35	6d db 07	adc $07db			adc 	gxBasePage 					; by adding the base page
.cc38	ac38	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cc3a	ac3a	68		pla				pla
.cc3b	ac3b	85 36		sta $36				sta 	gxzTemp0
.cc3d	ac3d	60		rts				rts
.cc3e	ac3e					GXMovePositionDown:
.cc3e	ac3e	18		clc				clc 								; add 320 to offset/temp+1
.cc3f	ac3f	ad e7 07	lda $07e7			lda 	gxOffset
.cc42	ac42	69 40		adc #$40			adc 	#64
.cc44	ac44	8d e7 07	sta $07e7			sta 	gxOffset
.cc47	ac47	a5 3d		lda $3d				lda 	gxzScreen+1
.cc49	ac49	69 01		adc #$01			adc 	#1
.cc4b	ac4b	85 3d		sta $3d				sta 	gxzScreen+1
.cc4d	ac4d	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cc4f	ac4f	90 07		bcc $ac58			bcc 	_GXMPDExit
.cc51	ac51	38		sec				sec  								; next page, adjust address
.cc52	ac52	e9 20		sbc #$20			sbc 	#$20
.cc54	ac54	85 3d		sta $3d				sta 	gxzScreen+1
.cc56	ac56	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.cc58	ac58					_GXMPDExit:
.cc58	ac58	60		rts				rts
.cc59	ac59					GXCollide:
.cc59	ac59	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cc5b	ac5b	aa		tax				tax
.cc5c	ac5c	05 37		ora $37				ora 	gxzTemp0+1
.cc5e	ac5e	29 c0		and #$c0			and 	#$C0
.cc60	ac60	38		sec				sec
.cc61	ac61	d0 53		bne $acb6			bne 	_GXCollideFail 				; if either >= 64, fail.
.cc63	ac63	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cc65	ac65	b9 ed 07	lda $07ed,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cc68	ac68	1d ed 07	ora $07ed,x			ora 	gxSpriteLow,x
.cc6b	ac6b	30 48		bmi $acb5			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cc6d	ac6d	18		clc				clc 								; need to calculate sum of sizes.
.cc6e	ac6e	b9 2d 08	lda $082d,y			lda 	gxSpriteHigh,y
.cc71	ac71	7d 2d 08	adc $082d,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cc74	ac74	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cc76	ac76	6a		ror a				ror 	a 							; 5/6/7
.cc77	ac77	4a		lsr a				lsr 	a 							; 4/5/6
.cc78	ac78	4a		lsr a				lsr 	a 							; 3/4/5
.cc79	ac79	4a		lsr a				lsr 	a 							; 2/3/4
.cc7a	ac7a	18		clc				clc
.cc7b	ac7b	69 08		adc #$08			adc 	#$08
.cc7d	ac7d	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cc7e	ac7e	4a		lsr a				lsr 	a
.cc7f	ac7f	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cc81	ac81	b9 2d 08	lda $082d,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cc84	ac84	29 3f		and #$3f			and 	#$3F
.cc86	ac86	85 39		sta $39				sta 	gxzTemp1+1
.cc88	ac88	38		sec				sec
.cc89	ac89	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cc8c	ac8c	29 3f		and #$3f			and 	#$3F
.cc8e	ac8e	e5 39		sbc $39				sbc 	gxzTemp1+1
.cc90	ac90	b0 03		bcs $ac95			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cc92	ac92	49 ff		eor #$ff			eor 	#$FF
.cc94	ac94	1a		inc a				inc 	a
.cc95	ac95					_GXCAbs1:
.cc95	ac95	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cc97	ac97	b0 1c		bcs $acb5			bcs 	_GXOkayFail
.cc99	ac99	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cc9b	ac9b	38		sec				sec 								; calculate |x1-x0|
.cc9c	ac9c	b9 ed 07	lda $07ed,y			lda 	gxSpriteLow,y
.cc9f	ac9f	fd ed 07	sbc $07ed,x			sbc 	gxSpriteLow,x
.cca2	aca2	b0 03		bcs $aca7			bcs 	_GXCAbs2
.cca4	aca4	49 ff		eor #$ff			eor 	#$FF
.cca6	aca6	1a		inc a				inc 	a
.cca7	aca7					_GXCAbs2:
.cca7	aca7	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cca9	aca9	b0 0a		bcs $acb5			bcs 	_GXOkayFail
.ccab	acab	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.ccad	acad	90 02		bcc $acb1			bcc 	_GXCHaveLowest
.ccaf	acaf	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.ccb1	acb1					_GXCHaveLowest:
.ccb1	acb1	0a		asl a				asl 	a 							; scale to allow for >> 2
.ccb2	acb2	0a		asl a				asl 	a
.ccb3	acb3	18		clc				clc
.ccb4	acb4	60		rts				rts
.ccb5	acb5					_GXOkayFail:
.ccb5	acb5	18		clc				clc
.ccb6	acb6					_GXCollideFail:
.ccb6	acb6	a9 ff		lda #$ff			lda 	#$FF
.ccb8	acb8	60		rts				rts
.ccb9	acb9					GXFindSprite:
.ccb9	acb9	aa		tax				tax
.ccba	acba	ad dc 07	lda $07dc			lda 	gxSpritePage 				; access the base page of the sprite
.ccbd	acbd	85 0b		sta $0b				sta 	GXEditSlot
.ccbf	acbf	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.ccc2	acc2	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.ccc5	acc5	f0 33		beq $acfa			beq 	_GXFSFail
.ccc7	acc7	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.ccca	acca	8d 84 08	sta $0884			sta 	gxSpriteOffset+1
.cccd	accd	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.ccd0	acd0	48		pha				pha 								; save twice
.ccd1	acd1	48		pha				pha
.ccd2	acd2	29 03		and #$03			and 	#3 							; get sprite size
.ccd4	acd4	8d 81 08	sta $0881			sta 	gxSizeBits 					; save raw (0-3)
.ccd7	acd7	aa		tax				tax
.ccd8	acd8	bd fc ac	lda $acfc,x			lda 	_GXFXSSTTable,x 			; read sprite size
.ccdb	acdb	8d 80 08	sta $0880			sta 	gxSizePixels 				; save (8/16/24/32)
.ccde	acde	68		pla				pla 								; get LUT
.ccdf	acdf	4a		lsr a				lsr		a
.cce0	ace0	4a		lsr a				lsr		a
.cce1	ace1	29 03		and #$03			and 	#3
.cce3	ace3	8d 82 08	sta $0882			sta 	gxSpriteLUT
.cce6	ace6	68		pla				pla 								; address, neeeds to be x 4
.cce7	ace7	29 f0		and #$f0			and 	#$F0
.cce9	ace9	8d 83 08	sta $0883			sta 	gxSpriteOffset
.ccec	acec	0e 83 08	asl $0883			asl 	gxSpriteOffset
.ccef	acef	2e 84 08	rol $0884			rol 	gxSpriteOffset+1
.ccf2	acf2	0e 83 08	asl $0883			asl 	gxSpriteOffset
.ccf5	acf5	2e 84 08	rol $0884			rol 	gxSpriteOffset+1
.ccf8	acf8	18		clc				clc
.ccf9	acf9	60		rts				rts
.ccfa	acfa					_GXFSFail:
.ccfa	acfa	38		sec				sec
.ccfb	acfb	60		rts				rts
.ccfc	acfc					_GXFXSSTTable:
>ccfc	acfc	08 10 18 20					.byte 	8,16,24,32
.0880						gxSizePixels:
>0880								.fill 	1
.0881						gxSizeBits:
>0881								.fill 	1
.0882						gxSpriteLUT:
>0882								.fill 	1
.0883						gxSpriteOffset:
>0883								.fill 	2
.cd00	ad00					GXSortXY:
.cd00	ad00	20 1e ad	jsr $ad1e			jsr 	GXSortY 					; will be sorted on Y now
.cd03	ad03	ad d0 07	lda $07d0			lda 	gxX0 						; compare X0 v X1
.cd06	ad06	cd d4 07	cmp $07d4			cmp 	gxX1
.cd09	ad09	ad d1 07	lda $07d1			lda 	gxX0+1
.cd0c	ad0c	ed d5 07	sbc $07d5			sbc 	gxX1+1
.cd0f	ad0f	90 0c		bcc $ad1d			bcc 	_GXSXYExit 					; X0 < X1 exit
.cd11	ad11	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cd13	ad13	a0 04		ldy #$04			ldy 	#4
.cd15	ad15	20 32 ad	jsr $ad32			jsr 	GXSwapXY
.cd18	ad18	e8		inx				inx
.cd19	ad19	c8		iny				iny
.cd1a	ad1a	20 32 ad	jsr $ad32			jsr 	GXSwapXY
.cd1d	ad1d					_GXSXYExit:
.cd1d	ad1d	60		rts				rts
.cd1e	ad1e					GXSortY:
.cd1e	ad1e	ad d2 07	lda $07d2			lda 	gxY0 						; if Y0 >= Y1
.cd21	ad21	cd d6 07	cmp $07d6			cmp 	gxY1
.cd24	ad24	90 0b		bcc $ad31			bcc 	_GXSYSorted
.cd26	ad26	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cd28	ad28	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cd2a	ad2a					_GXSwap1:
.cd2a	ad2a	20 32 ad	jsr $ad32			jsr 	GXSwapXY
.cd2d	ad2d	88		dey				dey
.cd2e	ad2e	ca		dex				dex
.cd2f	ad2f	10 f9		bpl $ad2a			bpl 	_GXSwap1
.cd31	ad31					_GXSYSorted:
.cd31	ad31	60		rts				rts
.cd32	ad32					GXSwapXY:
.cd32	ad32	bd d0 07	lda $07d0,x			lda 	gxX0,x
.cd35	ad35	48		pha				pha
.cd36	ad36	b9 d0 07	lda $07d0,y			lda 	gxX0,y
.cd39	ad39	9d d0 07	sta $07d0,x			sta 	gxX0,x
.cd3c	ad3c	68		pla				pla
.cd3d	ad3d	99 d0 07	sta $07d0,y			sta 	gxX0,y
.cd40	ad40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cd41	ad41					KeywordSet0:
>cd41	ad41	00 65					.text	0,$65,""               ; $80 !0:EOF
>cd43	ad43	00 58					.text	0,$58,""               ; $81 !1:SH1
>cd45	ad45	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cd47	ad47	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cd4d	ad4d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cd55	ad55	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cd5b	ad5b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cd62	ad62	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cd6a	ad6a	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cd71	ad71	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cd78	ad78	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cd7f	ad7f	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cd85	ad85	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cd8d	ad8d	45 24 28
>cd90	ad90	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cd98	ad98	45 24 28
>cd9b	ad9b	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cda1	ada1	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>cda9	ada9	28
>cdaa	adaa	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>cdb2	adb2	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cdb8	adb8	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cdc0	adc0	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>cdc8	adc8	55 4e 54 28
>cdcc	adcc	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cdd4	add4	54 24 28
>cdd7	add7	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cdde	adde	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cde5	ade5	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cdec	adec	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cdf4	adf4	4e 28
>cdf6	adf6	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>cdfe	adfe	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>ce04	ae04	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>ce0a	ae0a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>ce11	ae11	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>ce17	ae17	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>ce1d	ae1d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>ce24	ae24	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>ce2c	ae2c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>ce34	ae34	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>ce3c	ae3c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>ce44	ae44	47 28
>ce46	ae46	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>ce4e	ae4e	28
>ce4f	ae4f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>ce57	ae57	28
>ce58	ae58	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>ce5e	ae5e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>ce64	ae64	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>ce6a	ae6a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>ce71	ae71	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>ce79	ae79	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>ce7f	ae7f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>ce85	ae85	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>ce8a	ae8a	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>ce8e	ae8e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>ce94	ae94	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>ce9c	ae9c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>cea3	aea3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>ceaa	aeaa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>ceb2	aeb2	43
>ceb3	aeb3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>ceb9	aeb9	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>cebf	aebf	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>cec6	aec6	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>cecc	aecc	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>ced0	aed0	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>ced4	aed4	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>ceda	aeda	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>cee2	aee2	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>cee9	aee9	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>cef0	aef0	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>cef8	aef8	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cefe	aefe	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>cf03	af03	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>cf0b	af0b	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>cf11	af11	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>cf17	af17	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>cf1c	af1c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>cf22	af22	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>cf29	af29	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>cf2e	af2e	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>cf34	af34	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>cf3b	af3b	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>cf43	af43	59
>cf44	af44	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>cf49	af49	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>cf4d	af4d	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>cf55	af55	45
>cf56	af56	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>cf5e	af5e	45
>cf5f	af5f	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>cf65	af65	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>cf6b	af6b	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>cf72	af72	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>cf79	af79	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>cf80	af80	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>cf86	af86	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>cf8c	af8c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>cf91	af91	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>cf98	af98	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>cf9f	af9f	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cfa7	afa7	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>cfad	afad	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>cfb1	afb1	ff					.text	$FF
.cfb2	afb2					KeywordSet1:
>cfb2	afb2	00 65					.text	0,$65,""               ; $80 !0:EOF
>cfb4	afb4	00 58					.text	0,$58,""               ; $81 !1:SH1
>cfb6	afb6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cfb8	afb8	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cfc0	afc0	4c 45
>cfc2	afc2	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cfca	afca	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>cfd2	afd2	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>cfd9	afd9	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cfe0	afe0	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cfe5	afe5	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>cfed	afed	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cff2	aff2	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cff7	aff7	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>cffe	affe	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d003	b003	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d00b	b00b	45
>d00c	b00c	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d010	b010	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d017	b017	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d01d	b01d	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d024	b024	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d02b	b02b	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d031	b031	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d037	b037	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>d03f	b03f	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>d046	b046	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>d04b	b04b	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>d051	b051	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>d058	b058	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>d060	b060	45
>d061	b061	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>d069	b069	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>d06e	b06e	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>d074	b074	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>d07c	b07c	45
>d07d	b07d	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>d085	b085	45
>d086	b086	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>d08d	b08d	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>d095	b095	53
>d096	b096	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>d09c	b09c	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a4 TRY
>d0a1	b0a1	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a5 VERIFY
>d0a9	b0a9	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a6 XGO
>d0ae	b0ae	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a7 XLOAD
>d0b5	b0b5	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a8 ZAP
>d0ba	b0ba	ff					.text	$FF
.d0bb	b0bb					KeywordSet2:
>d0bb	b0bb	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0bd	b0bd	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0bf	b0bf	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0c1	b0c1	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d0c6	b0c6	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d0cb	b0cb	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d0d0	b0d0	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d0d5	b0d5	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d0da	b0da	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d0df	b0df	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d0e4	b0e4	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d0e9	b0e9	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d0ee	b0ee	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d0f3	b0f3	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d0f8	b0f8	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d0fd	b0fd	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d102	b102	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d107	b107	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d10c	b10c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d111	b111	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d116	b116	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d11b	b11b	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d120	b120	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d125	b125	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d12a	b12a	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d12f	b12f	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d134	b134	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d139	b139	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d13e	b13e	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d143	b143	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d148	b148	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d14d	b14d	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d152	b152	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d157	b157	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d15c	b15c	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d161	b161	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d166	b166	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d16b	b16b	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d170	b170	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d175	b175	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d17a	b17a	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d17f	b17f	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d184	b184	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d189	b189	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d18e	b18e	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d193	b193	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d198	b198	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d19d	b19d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d1a2	b1a2	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d1a7	b1a7	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d1ac	b1ac	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d1b1	b1b1	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d1b6	b1b6	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d1bb	b1bb	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d1c0	b1c0	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d1c5	b1c5	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d1ca	b1ca	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d1cf	b1cf	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d1d4	b1d4	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d1d9	b1d9	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d1de	b1de	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d1e3	b1e3	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d1e8	b1e8	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d1ed	b1ed	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d1f2	b1f2	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d1f7	b1f7	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d1fc	b1fc	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d201	b201	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d206	b206	ff					.text	$FF
.d207	b207					Export_TKListConvertLine:
.d207	b207	48		pha				pha 								; save indent on the stack
.d208	b208	9c 19 04	stz $0419			stz 	tbOffset
.d20b	b20b	9c 29 04	stz $0429			stz 	tokenBuffer
.d20e	b20e	9c 25 04	stz $0425			stz 	currentListColour
.d211	b211	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d213	b213	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d216	b216	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d218	b218	b1 30		lda ($30),y			lda 	(codePtr),y
.d21a	b21a	aa		tax				tax
.d21b	b21b	88		dey				dey
.d21c	b21c	b1 30		lda ($30),y			lda 	(codePtr),y
.d21e	b21e	20 01 b4	jsr $b401			jsr 	LCLWriteNumberXA
.d221	b221	68		pla				pla 								; adjustment to indent
.d222	b222	48		pha				pha 								; save on stack
.d223	b223	10 0c		bpl $b231			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d225	b225	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d226	b226	6d 22 04	adc $0422			adc 	listIndent
.d229	b229	8d 22 04	sta $0422			sta 	listIndent
.d22c	b22c	10 03		bpl $b231			bpl 	_LCNoAdjust
.d22e	b22e	9c 22 04	stz $0422			stz 	listIndent
.d231	b231					_LCNoAdjust:
.d231	b231	18		clc				clc		 							; work out actual indent.
.d232	b232	ad 22 04	lda $0422			lda 	listIndent
.d235	b235	0a		asl a				asl 	a
.d236	b236	69 07		adc #$07			adc 	#7
.d238	b238	85 36		sta $36				sta 	zTemp0
.d23a	b23a					_LCPadOut:
.d23a	b23a	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d23c	b23c	20 99 b3	jsr $b399			jsr 	LCLWrite
.d23f	b23f	ad 19 04	lda $0419			lda 	tbOffset
.d242	b242	c5 36		cmp $36				cmp 	zTemp0
.d244	b244	d0 f4		bne $b23a			bne 	_LCPadOut
.d246	b246	a0 03		ldy #$03			ldy 	#3 							; start position.
.d248	b248					_LCMainLoop:
.d248	b248	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d24a	b24a	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d24d	b24d	b1 30		lda ($30),y			lda 	(codePtr),y
.d24f	b24f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d251	b251	f0 17		beq $b26a			beq 	_LCExit
.d253	b253	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d255	b255	90 1e		bcc $b275			bcc 	_LCDoubles
.d257	b257	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d259	b259	90 2a		bcc $b285			bcc 	_LCShiftPunc
.d25b	b25b	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d25d	b25d	90 35		bcc $b294			bcc 	_LCPunctuation
.d25f	b25f	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d261	b261	90 51		bcc $b2b4			bcc 	_LCIdentifiers
.d263	b263	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d265	b265	90 73		bcc $b2da			bcc 	_LCTokens
.d267	b267	4c 3a b3	jmp $b33a			jmp 	_LCData 					; 254-5 are data objects
.d26a	b26a					_LCExit:
.d26a	b26a	68		pla				pla 								; get old indent adjust
.d26b	b26b	30 07		bmi $b274			bmi 	_LCExit2
.d26d	b26d	18		clc				clc 								; add to indent if +ve
.d26e	b26e	6d 22 04	adc $0422			adc 	listIndent
.d271	b271	8d 22 04	sta $0422			sta 	listIndent
.d274	b274					_LCExit2:
.d274	b274	60		rts				rts
.d275	b275					_LCDoubles:
.d275	b275	48		pha				pha
.d276	b276	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d277	b277	29 02		and #$02			and 	#2
.d279	b279	09 3c		ora #$3c			ora 	#60 						; make < >
.d27b	b27b	20 99 b3	jsr $b399			jsr 	LCLWrite
.d27e	b27e	68		pla				pla 								; restore, do lower bit
.d27f	b27f	29 03		and #$03			and 	#3
.d281	b281	09 3c		ora #$3c			ora 	#60
.d283	b283	80 0f		bra $b294			bra		_LCPunctuation 				; print, increment, loop
.d285	b285					_LCShiftPunc:
.d285	b285	aa		tax				tax 								; save in X
.d286	b286	29 07		and #$07			and 	#7 							; lower 3 bits
.d288	b288	f0 02		beq $b28c			beq 	_LCNoAdd
.d28a	b28a	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d28c	b28c					_LCNoAdd:
.d28c	b28c	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d28e	b28e	90 02		bcc $b292			bcc 	_LCNoAdd2
.d290	b290	09 20		ora #$20			ora 	#32 						; adds $20
.d292	b292					_LCNoAdd2:
.d292	b292	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d294	b294					_LCPunctuation:
.d294	b294	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d296	b296	d0 03		bne $b29b			bne 	_LCPContinue
.d298	b298	20 af b3	jsr $b3af			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d29b	b29b					_LCPContinue:
.d29b	b29b	c9 2e		cmp #$2e			cmp 	#'.'
.d29d	b29d	f0 08		beq $b2a7			beq 	_LCPIsConstant
.d29f	b29f	c9 30		cmp #$30			cmp 	#'0'
.d2a1	b2a1	90 0b		bcc $b2ae			bcc 	_LCPNotConstant
.d2a3	b2a3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d2a5	b2a5	b0 07		bcs $b2ae			bcs 	_LCPNotConstant
.d2a7	b2a7					_LCPIsConstant:
.d2a7	b2a7	48		pha				pha
.d2a8	b2a8	a9 87		lda #$87			lda 	#CLIConstant+$80
.d2aa	b2aa	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d2ad	b2ad	68		pla				pla
.d2ae	b2ae					_LCPNotConstant:
.d2ae	b2ae	c8		iny				iny 								; consume character
.d2af	b2af	20 99 b3	jsr $b399			jsr 	LCLWrite 					; write it out.
.d2b2	b2b2	80 94		bra $b248			bra 	_LCMainLoop 				; go round again.
.d2b4	b2b4					_LCIdentifiers:
.d2b4	b2b4	18		clc				clc 								; convert to physical address
.d2b5	b2b5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d2b7	b2b7	85 37		sta $37				sta 	zTemp0+1
.d2b9	b2b9	c8		iny				iny
.d2ba	b2ba	b1 30		lda ($30),y			lda 	(codePtr),y
.d2bc	b2bc	85 36		sta $36				sta 	zTemp0
.d2be	b2be	c8		iny				iny
.d2bf	b2bf	5a		phy				phy 								; save position
.d2c0	b2c0	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d2c2	b2c2	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d2c5	b2c5	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d2c7	b2c7					_LCOutIdentifier:
.d2c7	b2c7	c8		iny				iny
.d2c8	b2c8	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d2ca	b2ca	29 7f		and #$7f			and 	#$7F
.d2cc	b2cc	20 eb b3	jsr $b3eb			jsr 	LCLLowerCase
.d2cf	b2cf	20 99 b3	jsr $b399			jsr 	LCLWrite
.d2d2	b2d2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d2d4	b2d4	10 f1		bpl $b2c7			bpl 	_LCOutIdentifier
.d2d6	b2d6	7a		ply				ply 								; restore position
.d2d7	b2d7	4c 48 b2	jmp $b248			jmp 	_LCMainLoop
.d2da	b2da					_LCTokens:
.d2da	b2da	aa		tax				tax 								; token in X
.d2db	b2db	a9 bb		lda #$bb			lda 	#((KeywordSet2) & $FF)
.d2dd	b2dd	85 36		sta $36				sta 	0+zTemp0
.d2df	b2df	a9 b0		lda #$b0			lda 	#((KeywordSet2) >> 8)
.d2e1	b2e1	85 37		sta $37				sta 	1+zTemp0
.d2e3	b2e3	e0 82		cpx #$82			cpx 	#$82
.d2e5	b2e5	f0 16		beq $b2fd			beq 	_LCUseShift
.d2e7	b2e7	a9 b2		lda #$b2			lda 	#((KeywordSet1) & $FF)
.d2e9	b2e9	85 36		sta $36				sta 	0+zTemp0
.d2eb	b2eb	a9 af		lda #$af			lda 	#((KeywordSet1) >> 8)
.d2ed	b2ed	85 37		sta $37				sta 	1+zTemp0
.d2ef	b2ef	e0 81		cpx #$81			cpx 	#$81
.d2f1	b2f1	f0 0a		beq $b2fd			beq 	_LCUseShift
.d2f3	b2f3	a9 41		lda #$41			lda 	#((KeywordSet0) & $FF)
.d2f5	b2f5	85 36		sta $36				sta 	0+zTemp0
.d2f7	b2f7	a9 ad		lda #$ad			lda 	#((KeywordSet0) >> 8)
.d2f9	b2f9	85 37		sta $37				sta 	1+zTemp0
.d2fb	b2fb	80 01		bra $b2fe			bra 	_LCNoShift
.d2fd	b2fd					_LCUseShift:
.d2fd	b2fd	c8		iny				iny
.d2fe	b2fe					_LCNoShift:
.d2fe	b2fe	20 c3 b3	jsr $b3c3			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d301	b301	b1 30		lda ($30),y			lda 	(codePtr),y
.d303	b303	aa		tax				tax 								; into X
.d304	b304					_LCFindText:
.d304	b304	ca		dex				dex
.d305	b305	10 0e		bpl $b315			bpl 	_LCFoundText 				; found text.
.d307	b307	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d309	b309	1a		inc a				inc 	a 							; one extra for size
.d30a	b30a	38		sec				sec 								; one extra for checksum
.d30b	b30b	65 36		adc $36				adc 	zTemp0 						; go to next token
.d30d	b30d	85 36		sta $36				sta 	zTemp0
.d30f	b30f	90 f3		bcc $b304			bcc 	_LCFindText
.d311	b311	e6 37		inc $37				inc 	zTemp0+1
.d313	b313	80 ef		bra $b304			bra 	_LCFindText
.d315	b315					_LCFoundText:
.d315	b315	5a		phy				phy 								; save List position
.d316	b316	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d318	b318	aa		tax				tax
.d319	b319	a9 86		lda #$86			lda 	#CLIToken+$80
.d31b	b31b	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d31e	b31e	a0 02		ldy #$02			ldy 	#2
.d320	b320					_LCCopyToken:
.d320	b320	b1 36		lda ($36),y			lda 	(zTemp0),y
.d322	b322	20 eb b3	jsr $b3eb			jsr 	LCLLowerCase
.d325	b325	20 99 b3	jsr $b399			jsr 	LCLWrite
.d328	b328	c8		iny				iny
.d329	b329	ca		dex				dex
.d32a	b32a	d0 f4		bne $b320			bne 	_LCCopyToken
.d32c	b32c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d32e	b32e	f0 05		beq $b335			beq 	_LCNoSpace
.d330	b330	a9 20		lda #$20			lda 	#' '
.d332	b332	20 99 b3	jsr $b399			jsr 	LCLWrite
.d335	b335					_LCNoSpace:
.d335	b335	7a		ply				ply 								; restore position.
.d336	b336	c8		iny				iny 								; consume token
.d337	b337	4c 48 b2	jmp $b248			jmp 	_LCMainLoop 				; and go around again.
.d33a	b33a					_LCData:
.d33a	b33a	48		pha				pha 								; save type $FE/$FF
.d33b	b33b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d33d	b33d	c9 fe		cmp #$fe			cmp 	#$FE
.d33f	b33f	f0 22		beq $b363			beq 	_LCHaveOpener
.d341	b341	a2 22		ldx #$22			ldx 	#'"'
.d343	b343	a9 8f		lda #$8f			lda 	#CLIData+$80
.d345	b345	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d348	b348	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d34a	b34a	d0 17		bne $b363			bne 	_LCHaveOpener
.d34c	b34c	88		dey				dey 								; what precedes it ?
.d34d	b34d	b1 30		lda ($30),y			lda 	(codePtr),y
.d34f	b34f	c8		iny				iny
.d350	b350	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d352	b352	d0 0f		bne $b363			bne 	_LCHaveOpener
.d354	b354	a9 09		lda #$09			lda 	#9 							; tab
.d356	b356	20 99 b3	jsr $b399			jsr 	LCLWrite
.d359	b359	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d35b	b35b	20 99 b3	jsr $b399			jsr 	LCLWrite
.d35e	b35e	a9 85		lda #$85			lda 	#CLIFComment+$80
.d360	b360	20 90 b3	jsr $b390			jsr 	LCLWriteColour
.d363	b363					_LCHaveOpener:
.d363	b363	8a		txa				txa 								; output prefix (# or ")
.d364	b364	20 99 b3	jsr $b399			jsr 	LCLWrite
.d367	b367	c8		iny				iny 								; get count
.d368	b368	b1 30		lda ($30),y			lda 	(codePtr),y
.d36a	b36a	aa		tax				tax
.d36b	b36b	c8		iny				iny 								; point at first character
.d36c	b36c					_LCOutData:
.d36c	b36c	b1 30		lda ($30),y			lda 	(codePtr),y
.d36e	b36e	c9 00		cmp #$00			cmp 	#0
.d370	b370	f0 03		beq $b375			beq 	_LCNoPrint
.d372	b372	20 99 b3	jsr $b399			jsr 	LCLWrite
.d375	b375					_LCNoPrint:
.d375	b375	c8		iny				iny
.d376	b376	ca		dex				dex
.d377	b377	d0 f3		bne $b36c			bne 	_LCOutData
.d379	b379	68		pla				pla 								; closing " required ?
.d37a	b37a	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d37c	b37c	d0 0f		bne $b38d			bne 	_LCNoQuote
.d37e	b37e	a9 22		lda #$22			lda 	#'"'
.d380	b380	20 99 b3	jsr $b399			jsr 	LCLWrite
.d383	b383	ad c5 07	lda $07c5			lda 	EXTTextColour
.d386	b386	29 0f		and #$0f			and 	#$0F
.d388	b388	09 90		ora #$90			ora 	#$90
.d38a	b38a	20 99 b3	jsr $b399			jsr 	LCLWrite
.d38d	b38d					_LCNoQuote:
.d38d	b38d	4c 48 b2	jmp $b248			jmp 	_LCMainLoop
.d390	b390					LCLWriteColour:
.d390	b390	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d393	b393	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d396	b396	d0 01		bne $b399			bne 	LCLWrite 					; if different, output it
.d398	b398	60		rts				rts
.d399	b399					LCLWrite:
.d399	b399	da		phx				phx
.d39a	b39a	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d39d	b39d	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d3a0	b3a0	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d3a3	b3a3	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d3a6	b3a6	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d3a8	b3a8	30 03		bmi $b3ad			bmi 	_LCLNoColour
.d3aa	b3aa	8d 23 04	sta $0423			sta 	lcLastCharacter
.d3ad	b3ad					_LCLNoColour:
.d3ad	b3ad	fa		plx				plx
.d3ae	b3ae	60		rts				rts
.d3af	b3af					LCLDeleteLastSpace:
.d3af	b3af	48		pha				pha
.d3b0	b3b0	da		phx				phx
.d3b1	b3b1	ae 19 04	ldx $0419			ldx 	tbOffset
.d3b4	b3b4	f0 0a		beq $b3c0			beq 	_LCDLSExit
.d3b6	b3b6	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d3b9	b3b9	c9 20		cmp #$20			cmp 	#' '
.d3bb	b3bb	d0 03		bne $b3c0			bne 	_LCDLSExit
.d3bd	b3bd	ce 19 04	dec $0419			dec 	tbOffset
.d3c0	b3c0					_LCDLSExit:
.d3c0	b3c0	fa		plx				plx
.d3c1	b3c1	68		pla				pla
.d3c2	b3c2	60		rts				rts
.d3c3	b3c3					LCLCheckSpaceRequired:
.d3c3	b3c3	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d3c6	b3c6	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d3c8	b3c8	f0 1b		beq $b3e5			beq 	_LCCSRSpace
.d3ca	b3ca	c9 29		cmp #$29			cmp 	#')'
.d3cc	b3cc	f0 17		beq $b3e5			beq 	_LCCSRSpace
.d3ce	b3ce	c9 23		cmp #$23			cmp 	#'#'
.d3d0	b3d0	f0 13		beq $b3e5			beq 	_LCCSRSpace
.d3d2	b3d2	20 eb b3	jsr $b3eb			jsr 	LCLLowerCase 				; saves a little effort
.d3d5	b3d5	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d3d7	b3d7	90 11		bcc $b3ea			bcc 	_LCCSRExit
.d3d9	b3d9	c9 3a		cmp #$3a			cmp 	#"9"+1
.d3db	b3db	90 08		bcc $b3e5			bcc 	_LCCSRSpace
.d3dd	b3dd	c9 61		cmp #$61			cmp 	#"a"
.d3df	b3df	90 09		bcc $b3ea			bcc 	_LCCSRExit
.d3e1	b3e1	c9 7b		cmp #$7b			cmp 	#"z"+1
.d3e3	b3e3	b0 05		bcs $b3ea			bcs 	_LCCSRExit
.d3e5	b3e5					_LCCSRSpace:
.d3e5	b3e5	a9 20		lda #$20			lda 	#' '
.d3e7	b3e7	20 99 b3	jsr $b399			jsr 	LCLWrite
.d3ea	b3ea					_LCCSRExit:
.d3ea	b3ea	60		rts				rts
.d3eb	b3eb					LCLLowerCase:
.d3eb	b3eb	c9 41		cmp #$41			cmp 	#"A"
.d3ed	b3ed	90 06		bcc $b3f5			bcc 	_LCLLCOut
.d3ef	b3ef	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d3f1	b3f1	b0 02		bcs $b3f5			bcs 	_LCLLCOut
.d3f3	b3f3	69 20		adc #$20			adc 	#$20
.d3f5	b3f5					_LCLLCOut:
.d3f5	b3f5	60		rts				rts
.d3f6	b3f6					LCLUpperCase:
.d3f6	b3f6	c9 61		cmp #$61			cmp 	#"a"
.d3f8	b3f8	90 06		bcc $b400			bcc 	_LCLUCOut
.d3fa	b3fa	c9 7b		cmp #$7b			cmp 	#"z"+1
.d3fc	b3fc	b0 02		bcs $b400			bcs 	_LCLUCOut
.d3fe	b3fe	e9 1f		sbc #$1f			sbc 	#$1F
.d400	b400					_LCLUCOut:
.d400	b400	60		rts				rts
.d401	b401					LCLWriteNumberXA:
.d401	b401	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d403	b403					_LCLWNLoop1:
.d403	b403	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d405	b405					_LCLWNLoop2:
.d405	b405	48		pha				pha 								; save initial LSB
.d406	b406	38		sec				sec
.d407	b407	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d409	b409	f9 3a b4	sbc $b43a,y			sbc 	_LCLWNTable,y
.d40c	b40c	48		pha				pha
.d40d	b40d	8a		txa				txa
.d40e	b40e	f9 3b b4	sbc $b43b,y			sbc 	_LCLWNTable+1,y
.d411	b411	90 07		bcc $b41a			bcc 	_LCLWNUnderflow
.d413	b413	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d415	b415	aa		tax				tax 								; update X
.d416	b416	68		pla				pla 								; restore A
.d417	b417	7a		ply				ply 								; throw original
.d418	b418	80 eb		bra $b405			bra 	_LCLWNLoop2 				; try again.
.d41a	b41a					_LCLWNUnderflow:
.d41a	b41a	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d41c	b41c	d0 06		bne $b424			bne 	_LCLWNOut
.d41e	b41e	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d421	b421	3a		dec a				dec 	a
.d422	b422	f0 04		beq $b428			beq 	_LCLWNNext
.d424	b424					_LCLWNOut:
.d424	b424	98		tya				tya
.d425	b425	20 34 b4	jsr $b434			jsr 	_LCLWNOutDigit
.d428	b428					_LCLWNNext:
.d428	b428	7a		ply				ply 							 	; restore original value.
.d429	b429	68		pla				pla
.d42a	b42a	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d42c	b42c	c8		iny				iny
.d42d	b42d	c8		iny				iny
.d42e	b42e	84 37		sty $37				sty 	zTemp0+1
.d430	b430	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d432	b432	d0 cf		bne $b403			bne 	_LCLWNLoop1
.d434	b434					_LCLWNOutDigit:
.d434	b434	09 30		ora #$30			ora 	#'0'
.d436	b436	20 99 b3	jsr $b399			jsr 	LCLWrite
.d439	b439	60		rts				rts
.d43a	b43a					_LCLWNTable:
>d43a	b43a	10 27						.word 	10000
>d43c	b43c	e8 03						.word 	1000
>d43e	b43e	64 00						.word 	100
>d440	b440	0a 00						.word 	10
.d442	b442					TOKSearchTable:
.d442	b442	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d444	b444	85 36		sta $36				sta 	zTemp0
.d446	b446	a0 00		ldy #$00			ldy 	#0
.d448	b448	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d44a	b44a	85 38		sta $38				sta 	zTemp1
.d44c	b44c					_TSTLoop:
.d44c	b44c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d44e	b44e	30 49		bmi $b499			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d450	b450	f0 2e		beq $b480			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d452	b452	c8		iny				iny 								; get the hash
.d453	b453	b1 36		lda ($36),y			lda 	(zTemp0),y
.d455	b455	88		dey				dey
.d456	b456	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d459	b459	d0 25		bne $b480			bne 	_TSTNext
.d45b	b45b	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d45e	b45e	38		sec				sec
.d45f	b45f	ed 00 04	sbc $0400			sbc 	identStart
.d462	b462	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d464	b464	d0 1a		bne $b480			bne 	_TSTNext
.d466	b466	5a		phy				phy 								; save Y , we might fail to match.
.d467	b467	c8		iny				iny 								; point to text
.d468	b468	c8		iny				iny
.d469	b469	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d46c	b46c					_TSTCompareName:
.d46c	b46c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d46f	b46f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d471	b471	d0 0c		bne $b47f			bne 	_TSTNextPullY 				; fail, pullY and do next
.d473	b473	e8		inx				inx
.d474	b474	c8		iny				iny
.d475	b475	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d478	b478	d0 f2		bne $b46c			bne 	_TSTCompareName
.d47a	b47a	7a		ply				ply 								; throw Y
.d47b	b47b	a5 38		lda $38				lda 	zTemp1 						; get token #
.d47d	b47d	38		sec				sec 								; return with CS = passed.
.d47e	b47e	60		rts				rts
.d47f	b47f					_TSTNextPullY:
.d47f	b47f	7a		ply				ply 								; restore current, fall through.
.d480	b480					_TSTNext:
.d480	b480	e6 38		inc $38				inc 	zTemp1 						; token counter
.d482	b482	98		tya				tya
.d483	b483	18		clc				clc
.d484	b484	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d486	b486	1a		inc a				inc 	a 							; +1
.d487	b487	1a		inc a				inc 	a 							; +2
.d488	b488	a8		tay				tay
.d489	b489	10 c1		bpl $b44c			bpl 	_TSTLoop 					; if Y < $80 loop back
.d48b	b48b	98		tya				tya 								; add Y to zTemp0 and reset Y
.d48c	b48c	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d48e	b48e	18		clc				clc  								; but have tables > 255 bytes
.d48f	b48f	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d491	b491	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d493	b493	90 b7		bcc $b44c			bcc 	_TSTLoop
.d495	b495	e6 37		inc $37				inc 	zTemp0+1
.d497	b497	80 b3		bra $b44c			bra 	_TSTLoop
.d499	b499					_TSTFail:
.d499	b499	18		clc				clc
.d49a	b49a	60		rts				rts
.d49b	b49b					Export_TKTokeniseLine:
.d49b	b49b	20 68 b6	jsr $b668			jsr 	LCLFixLineBufferCase 		; fix line case
.d49e	b49e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d4a0	b4a0	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d4a3	b4a3	9c 27 04	stz $0427			stz 	tokenLineNumber
.d4a6	b4a6	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d4a9	b4a9	a2 ff		ldx #$ff			ldx 	#$FF
.d4ab	b4ab					_TKFindFirst:
.d4ab	b4ab	e8		inx				inx
.d4ac	b4ac	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d4af	b4af	f0 62		beq $b513			beq 	_TKExit
.d4b1	b4b1	c9 20		cmp #$20			cmp 	#' '
.d4b3	b4b3	90 f6		bcc $b4ab			bcc 	_TKFindFirst
.d4b5	b4b5	c9 30		cmp #$30			cmp 	#'0'
.d4b7	b4b7	90 07		bcc $b4c0			bcc 	_TKNoLineNumber
.d4b9	b4b9	c9 3a		cmp #$3a			cmp 	#'9'+1
.d4bb	b4bb	b0 03		bcs $b4c0			bcs 	_TKNoLineNumber
.d4bd	b4bd	20 92 b6	jsr $b692			jsr 	TOKExtractLineNumber
.d4c0	b4c0					_TKNoLineNumber:
.d4c0	b4c0					_TKTokeniseLoop:
.d4c0	b4c0	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d4c3	b4c3	f0 4e		beq $b513			beq 	_TKExit
.d4c5	b4c5	e8		inx				inx
.d4c6	b4c6	c9 20		cmp #$20			cmp 	#' '
.d4c8	b4c8	f0 f6		beq $b4c0			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d4ca	b4ca	ca		dex				dex 								; undo last get, A contains character, X is position.
.d4cb	b4cb	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d4cd	b4cd	f0 68		beq $b537			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d4cf	b4cf	c9 41		cmp #$41			cmp 	#'A'
.d4d1	b4d1	90 04		bcc $b4d7			bcc 	_TKTokenisePunctuation
.d4d3	b4d3	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d4d5	b4d5	90 60		bcc $b537			bcc 	_TKTokeniseIdentifier
.d4d7	b4d7					_TKTokenisePunctuation:
.d4d7	b4d7	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d4d9	b4d9	f0 2e		beq $b509			beq 	_TKString
.d4db	b4db	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d4dd	b4dd	f0 2f		beq $b50e			beq 	_TKHexConstant
.d4df	b4df	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d4e1	b4e1	f0 36		beq $b519			beq 	_TKCheckDouble
.d4e3	b4e3	c9 3e		cmp #$3e			cmp 	#'>'
.d4e5	b4e5	f0 32		beq $b519			beq 	_TKCheckDouble
.d4e7	b4e7					_TKStandardPunctuation:
.d4e7	b4e7	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d4ea	b4ea	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d4ec	b4ec	90 0e		bcc $b4fc			bcc 	_TKNoShift
.d4ee	b4ee	48		pha				pha 								; save. we are about to convert this punctuation token from
.d4ef	b4ef	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d4f1	b4f1	85 36		sta $36				sta 	zTemp0
.d4f3	b4f3	68		pla				pla
.d4f4	b4f4	29 20		and #$20			and 	#32 						; bit 5
.d4f6	b4f6	4a		lsr a				lsr 	a 							; shift into bit 3
.d4f7	b4f7	4a		lsr a				lsr 	a
.d4f8	b4f8	05 36		ora $36				ora 	zTemp0
.d4fa	b4fa	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d4fc	b4fc					_TKNoShift:
.d4fc	b4fc	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte 				; write the punctuation character
.d4ff	b4ff	e8		inx				inx 								; consume the character
.d500	b500	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d502	b502	d0 bc		bne $b4c0			bne 	_TKTokeniseLoop 			; and loop round again.
.d504	b504	20 ca b5	jsr $b5ca			jsr 	TOKCheckComment 			; comment checl
.d507	b507	80 b7		bra $b4c0			bra 	_TKTokeniseLoop
.d509	b509					_TKString:
.d509	b509	20 f7 b5	jsr $b5f7			jsr 	TOKTokenString
.d50c	b50c	80 b2		bra $b4c0			bra 	_TKTokeniseLoop
.d50e	b50e					_TKHexConstant:
.d50e	b50e	20 32 b6	jsr $b632			jsr 	TOKHexConstant
.d511	b511	80 ad		bra $b4c0			bra 	_TKTokeniseLoop
.d513	b513	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d515	b515	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d518	b518	60		rts				rts
.d519	b519					_TKCheckDouble:
.d519	b519	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d51c	b51c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d51e	b51e	90 c7		bcc $b4e7			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d520	b520	c9 3f		cmp #$3f			cmp 	#'>'+1
.d522	b522	b0 c3		bcs $b4e7			bcs 	_TKStandardPunctuation
.d524	b524	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d527	b527	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d529	b529	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d52a	b52a	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d52d	b52d	38		sec				sec
.d52e	b52e	e9 3c		sbc #$3c			sbc 	#'<'
.d530	b530	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte 				; this is in the range 0-7
.d533	b533	e8		inx				inx 								; consume both
.d534	b534	e8		inx				inx
.d535	b535	80 89		bra $b4c0			bra 	_TKTokeniseLoop
.d537	b537					_TKTokeniseIdentifier:
.d537	b537	8e 00 04	stx $0400			stx 	identStart 					; save start
.d53a	b53a	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d53d	b53d					_TKCheckLoop:
.d53d	b53d	e8		inx				inx 								; look at next, we know first is identifier already.
.d53e	b53e	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d541	b541	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d543	b543	f0 f8		beq $b53d			beq 	_TKCheckLoop
.d545	b545	c9 30		cmp #$30			cmp	 	#"0"
.d547	b547	90 0c		bcc $b555			bcc 	_TKEndIdentifier
.d549	b549	c9 3a		cmp #$3a			cmp 	#"9"+1
.d54b	b54b	90 f0		bcc $b53d			bcc 	_TKCheckLoop
.d54d	b54d	c9 41		cmp #$41			cmp	 	#"A"
.d54f	b54f	90 04		bcc $b555			bcc 	_TKEndIdentifier
.d551	b551	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d553	b553	90 e8		bcc $b53d			bcc 	_TKCheckLoop
.d555	b555					_TKEndIdentifier:
.d555	b555	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d558	b558	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d55a	b55a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d55c	b55c	f0 06		beq $b564			beq 	_TKHasTypeCharacter
.d55e	b55e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d560	b560	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d562	b562	d0 07		bne $b56b			bne 	_TKNoTypeCharacter
.d564	b564					_TKHasTypeCharacter:
.d564	b564	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d567	b567	e8		inx				inx 								; consume the type character
.d568	b568	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d56b	b56b					_TKNoTypeCharacter:
.d56b	b56b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d56d	b56d	d0 09		bne $b578			bne 	_TKNoArray
.d56f	b56f	e8		inx				inx 								; skip the (
.d570	b570	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d573	b573	09 04		ora #$04			ora 	#$04
.d575	b575	8d 04 04	sta $0404			sta 	identTypeByte
.d578	b578					_TKNoArray:
.d578	b578	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d57b	b57b	20 53 b6	jsr $b653			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d57e	b57e	a0 ad		ldy #$ad			ldy 	#(KeywordSet0) >> 8
.d580	b580	a9 41		lda #$41			lda 	#(KeywordSet0) & $FF
.d582	b582	20 42 b4	jsr $b442			jsr 	TOKSearchTable
.d585	b585	a2 00		ldx #$00			ldx 	#0
.d587	b587	b0 1f		bcs $b5a8			bcs 	_TKFoundToken
.d589	b589	a0 af		ldy #$af			ldy 	#(KeywordSet1) >> 8
.d58b	b58b	a9 b2		lda #$b2			lda 	#(KeywordSet1) & $FF
.d58d	b58d	20 42 b4	jsr $b442			jsr 	TOKSearchTable
.d590	b590	a2 81		ldx #$81			ldx 	#$81
.d592	b592	b0 14		bcs $b5a8			bcs 	_TKFoundToken
.d594	b594	a0 b0		ldy #$b0			ldy 	#(KeywordSet2) >> 8
.d596	b596	a9 bb		lda #$bb			lda 	#(KeywordSet2) & $FF
.d598	b598	20 42 b4	jsr $b442			jsr 	TOKSearchTable
.d59b	b59b	a2 82		ldx #$82			ldx 	#$82
.d59d	b59d	b0 09		bcs $b5a8			bcs 	_TKFoundToken
.d59f	b59f	20 e3 b6	jsr $b6e3			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d5a2	b5a2	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d5a5	b5a5	4c c0 b4	jmp $b4c0			jmp 	_TKTokeniseLoop 			; and go round again.
.d5a8	b5a8					_TKFoundToken:
.d5a8	b5a8	48		pha				pha 								; save token
.d5a9	b5a9	8a		txa				txa 								; shift in X, is there one ?
.d5aa	b5aa	f0 03		beq $b5af			beq 	_TKNoTShift
.d5ac	b5ac	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte 				; if so, write it out
.d5af	b5af					_TKNoTShift:
.d5af	b5af	68		pla				pla 								; restore and write token
.d5b0	b5b0	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d5b3	b5b3	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d5b5	b5b5	d0 0d		bne $b5c4			bne 	_TKNotRem 			 		; not shifted ?
.d5b7	b5b7	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d5b9	b5b9	d0 09		bne $b5c4			bne 	_TKNotRem
.d5bb	b5bb	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d5be	b5be	20 ca b5	jsr $b5ca			jsr 	TOKCheckComment
.d5c1	b5c1	4c c0 b4	jmp $b4c0			jmp 	_TKTokeniseLoop
.d5c4	b5c4					_TKNotRem:
.d5c4	b5c4	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d5c7	b5c7	4c c0 b4	jmp $b4c0			jmp 	_TKTokeniseLoop 			; and go round again.
.d5ca	b5ca					TOKCheckComment:
.d5ca	b5ca	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d5cd	b5cd	e8		inx				inx
.d5ce	b5ce	c9 20		cmp #$20			cmp 	#' '
.d5d0	b5d0	f0 f8		beq $b5ca			beq 	TOKCheckComment
.d5d2	b5d2	ca		dex				dex 								; first non space character
.d5d3	b5d3	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d5d5	b5d5	f0 1f		beq $b5f6			beq 	_TOKCCExit 					; then we are okay
.d5d7	b5d7	c9 00		cmp #$00			cmp 	#0 							; EOL
.d5d9	b5d9	f0 1b		beq $b5f6			beq 	_TOKCCExit 					; then we are okay
.d5db	b5db	da		phx				phx
.d5dc	b5dc					_TOKCCLowerCase:
.d5dc	b5dc	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d5df	b5df	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d5e1	b5e1	90 09		bcc $b5ec			bcc 	_TOKKCNotUC
.d5e3	b5e3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d5e5	b5e5	b0 05		bcs $b5ec			bcs 	_TOKKCNotUC
.d5e7	b5e7	49 20		eor #$20			eor 	#$20
.d5e9	b5e9	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d5ec	b5ec					_TOKKCNotUC:
.d5ec	b5ec	e8		inx				inx
.d5ed	b5ed	c9 00		cmp #$00			cmp 	#0
.d5ef	b5ef	d0 eb		bne $b5dc			bne 	_TOKCCLowerCase
.d5f1	b5f1	fa		plx				plx
.d5f2	b5f2	ca		dex				dex 								; tokenise string expects initial skip.
.d5f3	b5f3	20 f7 b5	jsr $b5f7			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d5f6	b5f6					_TOKCCExit:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					TOKTokenString:
.d5f7	b5f7	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d5f9	b5f9	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d5fc	b5fc	e8		inx				inx									; start of quoted string.
.d5fd	b5fd	da		phx				phx 								; push start of string on top
.d5fe	b5fe	ca		dex				dex 								; because we pre-increment
.d5ff	b5ff					_TSFindEnd:
.d5ff	b5ff	e8		inx				inx
.d600	b600	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d603	b603	f0 04		beq $b609			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d605	b605	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d607	b607	d0 f6		bne $b5ff			bne 	_TSFindEnd
.d609	b609					_TSEndOfString:
.d609	b609	7a		ply				ply  								; so now Y is first character, X is character after end.
.d60a	b60a	48		pha				pha 								; save terminating character
.d60b	b60b	20 13 b6	jsr $b613			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d60e	b60e	68		pla				pla 								; terminating character
.d60f	b60f	f0 01		beq $b612			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d611	b611	e8		inx				inx
.d612	b612					_TSNotQuote:
.d612	b612	60		rts				rts
.d613	b613					TOKWriteBlockXY:
.d613	b613	86 36		stx $36				stx 	zTemp0 						; save end character
.d615	b615	98		tya				tya 								; use 2's complement to work out the byte size
.d616	b616	49 ff		eor #$ff			eor 	#$FF
.d618	b618	38		sec				sec
.d619	b619	65 36		adc $36				adc 	zTemp0
.d61b	b61b	1a		inc a				inc 	a 							; one extra for NULL
.d61c	b61c	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d61f	b61f					_TOBlockLoop:
.d61f	b61f	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d621	b621	f0 09		beq $b62c			beq 	_TOBlockExit
.d623	b623	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d626	b626	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d629	b629	c8		iny				iny
.d62a	b62a	80 f3		bra $b61f			bra 	_TOBlockLoop
.d62c	b62c					_TOBlockExit:
.d62c	b62c	a9 00		lda #$00			lda 	#0 							; add NULL.
.d62e	b62e	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d631	b631	60		rts				rts
.d632	b632					TOKHexConstant:
.d632	b632	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d634	b634	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d637	b637	e8		inx				inx									; start of quoted string.
.d638	b638	da		phx				phx 								; push start of constant on top
.d639	b639	ca		dex				dex
.d63a	b63a					_THFindLoop:
.d63a	b63a	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d63b	b63b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d63e	b63e	c9 30		cmp #$30			cmp 	#"0"
.d640	b640	90 0c		bcc $b64e			bcc 	_THFoundEnd
.d642	b642	c9 3a		cmp #$3a			cmp 	#"9"+1
.d644	b644	90 f4		bcc $b63a			bcc 	_THFindLoop
.d646	b646	c9 41		cmp #$41			cmp 	#"A"
.d648	b648	90 04		bcc $b64e			bcc 	_THFoundEnd
.d64a	b64a	c9 47		cmp #$47			cmp 	#"F"+1
.d64c	b64c	90 ec		bcc $b63a			bcc 	_THFindLoop
.d64e	b64e					_THFoundEnd:
.d64e	b64e	7a		ply				ply 								; restore start
.d64f	b64f	20 13 b6	jsr $b613			jsr 	TOKWriteBlockXY 			; output the block
.d652	b652	60		rts				rts
.d653	b653					TOKCalculateHash:
.d653	b653	da		phx				phx
.d654	b654	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d657	b657	a9 00		lda #$00			lda 	#0
.d659	b659					_TCHLoop:
.d659	b659	18		clc				clc
.d65a	b65a	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d65d	b65d	e8		inx				inx
.d65e	b65e	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d661	b661	d0 f6		bne $b659			bne 	_TCHLoop
.d663	b663	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d666	b666	fa		plx				plx
.d667	b667	60		rts				rts
.d668	b668					LCLFixLineBufferCase:
.d668	b668	a2 00		ldx #$00			ldx 	#0
.d66a	b66a					_FLBCLoop:
.d66a	b66a	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d66d	b66d	f0 22		beq $b691			beq 	_FLBCExit 					; end of string.
.d66f	b66f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d671	b671	f0 11		beq $b684			beq 	_FLBCInQuotes
.d673	b673	e8		inx				inx
.d674	b674	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d676	b676	90 f2		bcc $b66a			bcc 	_FLBCLoop
.d678	b678	c9 7b		cmp #$7b			cmp 	#'z'+1
.d67a	b67a	b0 ee		bcs $b66a			bcs 	_FLBCLoop
.d67c	b67c	38		sec				sec 								; make U/C
.d67d	b67d	e9 20		sbc #$20			sbc 	#32
.d67f	b67f	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d682	b682	80 e6		bra $b66a			bra 	_FLBCLoop
.d684	b684					_FLBCInQuotes:
.d684	b684	e8		inx				inx 								; advance
.d685	b685	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d688	b688	f0 07		beq $b691			beq 	_FLBCExit 					; exit on EOS
.d68a	b68a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d68c	b68c	d0 f6		bne $b684			bne 	_FLBCInQuotes
.d68e	b68e	e8		inx				inx 								; skip over it
.d68f	b68f	80 d9		bra $b66a			bra 	_FLBCLoop
.d691	b691					_FLBCExit:
.d691	b691	60		rts				rts
.d692	b692					TOKExtractLineNumber:
.d692	b692	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d695	b695	48		pha				pha
.d696	b696	ad 27 04	lda $0427			lda 	tokenLineNumber
.d699	b699	48		pha				pha
.d69a	b69a	20 d0 b6	jsr $b6d0			jsr 	_LCLNTimes2 				; line # x 2
.d69d	b69d	20 d0 b6	jsr $b6d0			jsr 	_LCLNTimes2 				; line # x 4
.d6a0	b6a0	18		clc				clc 								; add stacked value
.d6a1	b6a1	68		pla				pla
.d6a2	b6a2	6d 27 04	adc $0427			adc 	tokenLineNumber
.d6a5	b6a5	8d 27 04	sta $0427			sta 	tokenLineNumber
.d6a8	b6a8	68		pla				pla
.d6a9	b6a9	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d6ac	b6ac	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d6af	b6af	20 d0 b6	jsr $b6d0			jsr 	_LCLNTimes2 				; line # x 10
.d6b2	b6b2	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d6b5	b6b5	e8		inx				inx
.d6b6	b6b6	29 0f		and #$0f			and 	#15 						; add to line #
.d6b8	b6b8	18		clc				clc
.d6b9	b6b9	6d 27 04	adc $0427			adc 	tokenLineNumber
.d6bc	b6bc	8d 27 04	sta $0427			sta 	tokenLineNumber
.d6bf	b6bf	90 03		bcc $b6c4			bcc 	_TLENNoCarry
.d6c1	b6c1	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d6c4	b6c4					_TLENNoCarry:
.d6c4	b6c4	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d6c7	b6c7	c9 30		cmp #$30			cmp 	#'0'
.d6c9	b6c9	90 04		bcc $b6cf			bcc 	_TLENExit
.d6cb	b6cb	c9 3a		cmp #$3a			cmp 	#'9'+1
.d6cd	b6cd	90 c3		bcc $b692			bcc 	TOKExtractLineNumber
.d6cf	b6cf					_TLENExit:
.d6cf	b6cf	60		rts				rts
.d6d0	b6d0					_LCLNTimes2:
.d6d0	b6d0	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d6d3	b6d3	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d6d6	b6d6	60		rts				rts
.d6d7	b6d7					TOKWriteByte:
.d6d7	b6d7	da		phx				phx
.d6d8	b6d8	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d6db	b6db	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d6de	b6de	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d6e1	b6e1	fa		plx				plx
.d6e2	b6e2	60		rts				rts
.d6e3	b6e3					TOKCheckCreateVariableRecord:
.d6e3	b6e3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d6e5	b6e5	85 36		sta $36				sta 	0+zTemp0
.d6e7	b6e7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d6e9	b6e9	85 37		sta $37				sta 	1+zTemp0
.d6eb	b6eb					_CCVSearch:
.d6eb	b6eb	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d6ed	b6ed	f0 2c		beq $b71b			beq 	_CCVFail
.d6ef	b6ef	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d6f1	b6f1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d6f3	b6f3	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d6f6	b6f6	d0 16		bne $b70e			bne 	_CCVNext
.d6f8	b6f8	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d6fa	b6fa	ae 00 04	ldx $0400			ldx 	identStart
.d6fd	b6fd					_CCVCompare:
.d6fd	b6fd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d700	b700	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d702	b702	e8		inx				inx 								; advance pointers
.d703	b703	c8		iny				iny
.d704	b704	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d705	b705	d0 07		bne $b70e			bne 	_CCVNext  					; didn't match go to next.
.d707	b707	90 f4		bcc $b6fd			bcc 	_CCVCompare 				; not finished yet.
.d709	b709	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d70c	b70c	f0 41		beq $b74f			beq 	_CCVFound 					; yes, we were successful
.d70e	b70e					_CCVNext:
.d70e	b70e	18		clc				clc 								; go to next record.
.d70f	b70f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d711	b711	65 36		adc $36				adc 	zTemp0
.d713	b713	85 36		sta $36				sta 	zTemp0
.d715	b715	90 d4		bcc $b6eb			bcc 	_CCVSearch
.d717	b717	e6 37		inc $37				inc 	zTemp0+1
.d719	b719	80 d0		bra $b6eb			bra 	_CCVSearch
.d71b	b71b					_CCVFail:
.d71b	b71b	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d71d	b71d	ad 03 04	lda $0403			lda 	identHash
.d720	b720	91 36		sta ($36),y			sta 	(zTemp0),y
.d722	b722	c8		iny				iny 								; offset 2 is the type byte
.d723	b723	ad 04 04	lda $0404			lda 	identTypeByte
.d726	b726	91 36		sta ($36),y			sta 	(zTemp0),y
.d728	b728	c8		iny				iny
.d729	b729					_CCVData:
.d729	b729	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d72b	b72b	91 36		sta ($36),y			sta 	(zTemp0),y
.d72d	b72d	c8		iny				iny
.d72e	b72e	c0 08		cpy #$08			cpy 	#8
.d730	b730	90 f7		bcc $b729			bcc 	_CCVData
.d732	b732	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d735	b735					_CCVCopyName:
.d735	b735	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d738	b738	91 36		sta ($36),y			sta 	(zTemp0),y
.d73a	b73a	e8		inx				inx
.d73b	b73b	c8		iny				iny
.d73c	b73c	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d73f	b73f	d0 f4		bne $b735			bne 	_CCVCopyName
.d741	b741	98		tya				tya 								; patch offset
.d742	b742	92 36		sta ($36)			sta 	(zTemp0)
.d744	b744	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d746	b746	91 36		sta ($36),y			sta 	(zTemp0),y
.d748	b748	88		dey				dey
.d749	b749	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d74b	b74b	09 80		ora #$80			ora 	#$80
.d74d	b74d	91 36		sta ($36),y			sta 	(zTemp0),y
.d74f	b74f					_CCVFound:
.d74f	b74f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d751	b751	38		sec				sec
.d752	b752	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d754	b754	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d756	b756	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d759	b759	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d75b	b75b	20 d7 b6	jsr $b6d7			jsr 	TOKWriteByte
.d75e	b75e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d75f	b75f					SNDCheckChannel:
.d75f	b75f	aa		tax				tax
.d760	b760	bd 93 09	lda $0993,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d763	b763	d0 38		bne $b79d			bne 	_SNDCCExit
.d765	b765	da		phx				phx 								; save current channel
.d766	b766	8a		txa				txa 								; put in A
.d767	b767	20 e3 b7	jsr $b7e3			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d76a	b76a	68		pla				pla 								; channel # in A
.d76b	b76b	90 30		bcc $b79d			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d76d	b76d	a8		tay				tay 								; Y is the channel #
.d76e	b76e	bd 88 08	lda $0888,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d771	b771	99 87 09	sta $0987,y			sta 	SNDPitchLow,y
.d774	b774	bd 89 08	lda $0889,x			lda 	SNDQueue+2,x
.d777	b777	99 8b 09	sta $098b,y			sta 	SNDPitchHigh,y
.d77a	b77a	bd 8a 08	lda $088a,x			lda 	SNDQueue+3,x
.d77d	b77d	99 8f 09	sta $098f,y			sta 	SNDVolume,y
.d780	b780	bd 8b 08	lda $088b,x			lda 	SNDQueue+4,x
.d783	b783	99 93 09	sta $0993,y			sta 	SNDTimeLeft,y
.d786	b786	bd 8c 08	lda $088c,x			lda 	SNDQueue+5,x
.d789	b789	99 97 09	sta $0997,y			sta 	SNDAdjustLow,y
.d78c	b78c	bd 8d 08	lda $088d,x			lda 	SNDQueue+6,x
.d78f	b78f	99 9b 09	sta $099b,y			sta 	SNDAdjustHigh,y
.d792	b792	5a		phy				phy 								; save channel #
.d793	b793	20 fd b7	jsr $b7fd			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d796	b796	ce 86 08	dec $0886			dec 	SNDLength 					; reduce the queue length.
.d799	b799	68		pla				pla
.d79a	b79a	20 9e b7	jsr $b79e			jsr 	SNDUpdateNote 				; update channel A
.d79d	b79d					_SNDCCExit:
.d79d	b79d	60		rts				rts
.d79e	b79e					SNDUpdateNote:
.d79e	b79e	aa		tax				tax 								; so we can access records
.d79f	b79f	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d7a0	b7a0	0a		asl a				asl 	a
.d7a1	b7a1	0a		asl a				asl 	a
.d7a2	b7a2	0a		asl a				asl 	a
.d7a3	b7a3	0a		asl a				asl 	a
.d7a4	b7a4	8d 85 08	sta $0885			sta 	SNDChannelBits
.d7a7	b7a7	bd 93 09	lda $0993,x			lda 	SNDTimeLeft,x 				; are we silent
.d7aa	b7aa	f0 2e		beq $b7da			beq 	_SNDUNIsSilent
.d7ac	b7ac	ad 85 08	lda $0885			lda 	SNDChannelBits 				; push channel bits on stack
.d7af	b7af	48		pha				pha
.d7b0	b7b0	bd 87 09	lda $0987,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d7b3	b7b3	29 0f		and #$0f			and 	#$0F
.d7b5	b7b5	0d 85 08	ora $0885			ora 	SNDChannelBits 				; set channel bits
.d7b8	b7b8	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d7ba	b7ba	20 47 b8	jsr $b847			jsr 	SNDWritePorts
.d7bd	b7bd	bd 8b 09	lda $098b,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d7c0	b7c0	8d 85 08	sta $0885			sta 	SNDChannelBits
.d7c3	b7c3	bd 87 09	lda $0987,x			lda 	SNDPitchLow,x
.d7c6	b7c6	4e 85 08	lsr $0885			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d7c9	b7c9	6a		ror a				ror 	a
.d7ca	b7ca	4e 85 08	lsr $0885			lsr 	SNDChannelBits
.d7cd	b7cd	6a		ror a				ror 	a
.d7ce	b7ce	4a		lsr a				lsr 	a 							; put in bits 0-5
.d7cf	b7cf	4a		lsr a				lsr 	a
.d7d0	b7d0	20 47 b8	jsr $b847			jsr 	SNDWritePorts 				; write as rest of pitch register
.d7d3	b7d3	68		pla				pla
.d7d4	b7d4	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d7d6	b7d6	20 47 b8	jsr $b847			jsr 	SNDWritePorts
.d7d9	b7d9	60		rts				rts
.d7da	b7da					_SNDUNIsSilent:
.d7da	b7da	ad 85 08	lda $0885			lda 	SNDChannelBits 				; channel bits
.d7dd	b7dd	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d7df	b7df	20 47 b8	jsr $b847			jsr 	SNDWritePorts 				; write to the ports
.d7e2	b7e2	60		rts				rts
.d7e3	b7e3					SNDFindNextNoteForA:
.d7e3	b7e3	ac 86 08	ldy $0886			ldy 	SNDLength 					; queue size into Y
.d7e6	b7e6	f0 13		beq $b7fb			beq 	_SNDFNNFail 				; queue empty.
.d7e8	b7e8	a2 00		ldx #$00			ldx 	#0
.d7ea	b7ea					_SNDFNNSearch:
.d7ea	b7ea	dd 87 08	cmp $0887,x			cmp 	SNDQueue,x 					; does it match the channel
.d7ed	b7ed	38		sec				sec
.d7ee	b7ee	f0 0c		beq $b7fc			beq 	_SNDFNNExit 				; if so exit with CS.
.d7f0	b7f0	e8		inx				inx 								; next queue slot.
.d7f1	b7f1	e8		inx				inx
.d7f2	b7f2	e8		inx				inx
.d7f3	b7f3	e8		inx				inx
.d7f4	b7f4	e8		inx				inx
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	e8		inx				inx
.d7f7	b7f7	e8		inx				inx
.d7f8	b7f8	88		dey				dey 								; done the whole queue
.d7f9	b7f9	d0 ef		bne $b7ea			bne 	_SNDFNNSearch 				; no, go back.
.d7fb	b7fb					_SNDFNNFail:
.d7fb	b7fb	18		clc				clc
.d7fc	b7fc					_SNDFNNExit:
.d7fc	b7fc	60		rts				rts
.d7fd	b7fd					SNDDeleteXFromQueue:
.d7fd	b7fd	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d7ff	b7ff	f0 09		beq $b80a			beq 	_SNDDXExit
.d801	b801	bd 8f 08	lda $088f,x			lda 	SNDQueue+8,x
.d804	b804	9d 87 08	sta $0887,x			sta 	SNDQueue,x
.d807	b807	e8		inx				inx
.d808	b808	80 f3		bra $b7fd			bra 	SNDDeleteXFromQueue
.d80a	b80a					_SNDDXExit:
.d80a	b80a	60		rts				rts
.0885						SNDChannelBits:
>0885								.fill 	1
.d80b	b80b					SNDQueueRequest:
.d80b	b80b	86 36		stx $36				stx 	zTemp0						; save queue address
.d80d	b80d	84 37		sty $37				sty 	zTemp0+1
.d80f	b80f	ae 86 08	ldx $0886			ldx 	SNDLength 					; queue is full, can't take any more.
.d812	b812	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d814	b814	f0 21		beq $b837			beq 	_SNDQRExit
.d816	b816	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d818	b818	48		pha				pha
.d819	b819	8a		txa				txa  								; get offset in queue buffer/
.d81a	b81a	0a		asl a				asl 	a
.d81b	b81b	0a		asl a				asl 	a
.d81c	b81c	0a		asl a				asl 	a
.d81d	b81d	aa		tax				tax
.d81e	b81e	68		pla				pla 								; get back and push again
.d81f	b81f	48		pha				pha
.d820	b820	9d 87 08	sta $0887,x			sta 	SNDQueue+0,x 				; save the channel #
.d823	b823	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d825	b825					_SNDQCopy:
.d825	b825	b1 36		lda ($36),y			lda 	(zTemp0),y
.d827	b827	e8		inx				inx
.d828	b828	c8		iny				iny
.d829	b829	9d 87 08	sta $0887,x			sta 	SNDQueue,x
.d82c	b82c	c0 06		cpy #$06			cpy 	#6
.d82e	b82e	d0 f5		bne $b825			bne 	_SNDQCopy
.d830	b830	ee 86 08	inc $0886			inc 	SNDLength 					; bump queue length.
.d833	b833	68		pla				pla 								; get channel # back
.d834	b834	20 5f b7	jsr $b75f			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d837	b837					_SNDQRExit:
.d837	b837	60		rts				rts
.d838	b838					SNDSilenceChannel:
.d838	b838	aa		tax				tax 								; zero time left.
.d839	b839	9e 93 09	stz $0993,x			stz 	SNDTimeLeft,x
.d83c	b83c	0a		asl a				asl 	a 							; shift into position
.d83d	b83d	0a		asl a				asl 	a
.d83e	b83e	0a		asl a				asl 	a
.d83f	b83f	0a		asl a				asl 	a
.d840	b840	0a		asl a				asl 	a
.d841	b841	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d843	b843	20 47 b8	jsr $b847			jsr 	SNDWritePorts
.d846	b846	60		rts				rts
.d847	b847					SNDWritePorts:
.d847	b847	da		phx				phx 								; save X
.d848	b848	a6 01		ldx $01				ldx 	1 							; save I/O status
.d84a	b84a	64 01		stz $01				stz 	1 							; access I/O page 0
.d84c	b84c	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d84f	b84f	8d 10 d6	sta $d610			sta 	$D610
.d852	b852	86 01		stx $01				stx 	1 							; restore I/O
.d854	b854	fa		plx				plx 								; restore X
.d855	b855	60		rts				rts
.d856	b856					Export_SNDCommand:
.d856	b856	da		phx				phx 								; save XY
.d857	b857	5a		phy				phy
.d858	b858	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d85a	b85a	f0 1d		beq $b879			beq 	_SNDInitialise
.d85c	b85c	90 28		bcc $b886			bcc 	_SNDExit
.d85e	b85e	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d860	b860	f0 17		beq $b879			beq 	_SNDSilence
.d862	b862	b0 22		bcs $b886			bcs 	_SNDExit
.d864	b864	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d866	b866	b0 09		bcs $b871			bcs 	_SNDQueryPlay
.d868	b868	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d86a	b86a	b0 1a		bcs $b886			bcs 	_SNDExit
.d86c	b86c	20 0b b8	jsr $b80b			jsr 	SNDQueueRequest
.d86f	b86f	80 15		bra $b886			bra 	_SNDExit
.d871	b871					_SNDQueryPlay:
.d871	b871	29 03		and #$03			and 	#3 							; get channel #
.d873	b873	aa		tax				tax
.d874	b874	bd 93 09	lda $0993,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d877	b877	80 0d		bra $b886			bra 	_SNDExit
.d879	b879					_SNDInitialise:
.d879	b879					_SNDSilence:
.d879	b879	9c 86 08	stz $0886			stz 	SNDLength 					; empty the queue.
.d87c	b87c	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d87e	b87e					_SNDSilenceLoop:
.d87e	b87e	48		pha				pha
.d87f	b87f	20 38 b8	jsr $b838			jsr 	SNDSilenceChannel
.d882	b882	68		pla				pla
.d883	b883	3a		dec a				dec 	a
.d884	b884	10 f8		bpl $b87e			bpl 	_SNDSilenceLoop
.d886	b886					_SNDExit:
.d886	b886	7a		ply				ply
.d887	b887	fa		plx				plx
.d888	b888	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0886						SNDLength:
>0886								.fill 	1
.0887						SNDQueue:
>0887								.fill 	SNDQueueSize * 8
.0987						SNDPitchLow:
>0987								.fill 	4
.098b						SNDPitchHigh:
>098b								.fill 	4
.098f						SNDVolume:
>098f								.fill 	4
.0993						SNDTimeLeft:
>0993								.fill 	4
.0997						SNDAdjustLow:
>0997								.fill 	4
.099b						SNDAdjustHigh:
>099b								.fill 	4
.d889	b889					Export_SNDUpdate:
.d889	b889					PagedSNDUpdate:
.d889	b889	ad 93 09	lda $0993			lda 	SNDTimeLeft+0 				; look at time remaining
.d88c	b88c	f0 05		beq $b893			beq 	_SNDUNot0 					; not playing
.d88e	b88e	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d890	b890	20 b2 b8	jsr $b8b2			jsr 	SNDUpdateChannel 			; update it.
.d893	b893					_SNDUNot0:
.d893	b893	ad 94 09	lda $0994			lda 	SNDTimeLeft+1
.d896	b896	f0 05		beq $b89d			beq 	_SNDUNot1
.d898	b898	a2 01		ldx #$01			ldx 	#1
.d89a	b89a	20 b2 b8	jsr $b8b2			jsr 	SNDUpdateChannel
.d89d	b89d					_SNDUNot1:
.d89d	b89d	ad 95 09	lda $0995			lda 	SNDTimeLeft+2
.d8a0	b8a0	f0 05		beq $b8a7			beq 	_SNDUNot2
.d8a2	b8a2	a2 02		ldx #$02			ldx 	#2
.d8a4	b8a4	20 b2 b8	jsr $b8b2			jsr 	SNDUpdateChannel
.d8a7	b8a7					_SNDUNot2:
.d8a7	b8a7	ad 96 09	lda $0996			lda 	SNDTimeLeft+3
.d8aa	b8aa	f0 05		beq $b8b1			beq 	_SNDUNot3
.d8ac	b8ac	a2 03		ldx #$03			ldx 	#3
.d8ae	b8ae	20 b2 b8	jsr $b8b2			jsr 	SNDUpdateChannel
.d8b1	b8b1					_SNDUNot3:
.d8b1	b8b1	60		rts				rts
.d8b2	b8b2					SNDUpdateChannel:
.d8b2	b8b2	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d8b4	b8b4	f0 2c		beq $b8e2			beq 	_SNDUCExit
.d8b6	b8b6	3a		dec a				dec 	a 							; decrement and update timer
.d8b7	b8b7	9d 93 09	sta $0993,x			sta 	SNDTimeLeft,x
.d8ba	b8ba	f0 1d		beq $b8d9			beq 	_SNDUCUpdate 				; if zero, silence channel
.d8bc	b8bc	bd 97 09	lda $0997,x			lda 	SNDAdjustLow,x 				; adjust ?
.d8bf	b8bf	1d 9b 09	ora $099b,x			ora 	SNDAdjustHigh,x
.d8c2	b8c2	f0 1e		beq $b8e2			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d8c4	b8c4	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d8c5	b8c5	bd 87 09	lda $0987,x			lda 	SNDPitchLow,x
.d8c8	b8c8	7d 97 09	adc $0997,x			adc 	SNDAdjustLow,x
.d8cb	b8cb	9d 87 09	sta $0987,x			sta 	SNDPitchLow,x
.d8ce	b8ce	bd 8b 09	lda $098b,x			lda 	SNDPitchHigh,x
.d8d1	b8d1	7d 9b 09	adc $099b,x			adc 	SNDAdjustHigh,x
.d8d4	b8d4	29 03		and #$03			and 	#3
.d8d6	b8d6	9d 8b 09	sta $098b,x			sta 	SNDPitchHigh,x
.d8d9	b8d9					_SNDUCUpdate:
.d8d9	b8d9	8a		txa				txa 								; which channel.
.d8da	b8da	48		pha				pha
.d8db	b8db	20 9e b7	jsr $b79e			jsr 	SNDUpdateNote 				; update the current note
.d8de	b8de	68		pla				pla
.d8df	b8df	20 5f b7	jsr $b75f			jsr 	SNDCheckChannel 			; more to do ?
.d8e2	b8e2					_SNDUCExit:
.d8e2	b8e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
