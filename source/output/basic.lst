
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 09:25:52 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 90 92	jsr $9290			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 3c 84	jsr $843c			jsr 	RunDemos
.8013	20 72 8c	jsr $8c72			jsr 	NewCommand 					; erase current program
.8016	20 15 9f	jsr $9f15			jsr 	BackloadProgram
.8019	4c ce 87	jmp $87ce			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 841."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 38 34 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	20 97 84	jsr $8497			jsr 	GXOpenBitmap 				; start access
.8088	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808a	ad 3a 06	lda $063a			lda 	gxHeight
.808d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8091					_GXCalcLastPage:
.8091	98		tya				tya 								; add to base page
.8092	18		clc				clc
.8093	6d 39 06	adc $0639			adc 	gxBasePage
.8096	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8098					_GXClearAll:
.8098	20 aa 80	jsr $80aa			jsr 	_GXClearBlock 				; clear 8k block
.809b	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.809d	a5 0b		lda $0b				lda 	GFXEditSlot
.809f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a2	b0 f4		bcs $8098			bcs 	_GXClearAll
.80a4	20 a8 84	jsr $84a8			jsr 	GXCloseBitmap	 			; stop access
.80a7	7a		ply				ply
.80a8	68		pla				pla
.80a9	60		rts				rts
.80aa					_GXClearBlock:
.80aa	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ac	85 38		sta $38				sta 	0+gzTemp1
.80ae	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.80b0	85 39		sta $39				sta 	1+gzTemp1
.80b2					_GXCB0:
.80b2	a5 36		lda $36				lda 	gzTemp0
.80b4	a0 00		ldy #$00			ldy 	#0
.80b6					_GXCB1:
.80b6	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b8	c8		iny				iny
.80b9	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bb	c8		iny				iny
.80bc	91 38		sta ($38),y			sta 	(gzTemp1),y
.80be	c8		iny				iny
.80bf	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c1	c8		iny				iny
.80c2	d0 f2		bne $80b6			bne 	_GXCB1
.80c4	e6 39		inc $39				inc 	gzTemp1+1
.80c6	a5 39		lda $39				lda 	gzTemp1+1
.80c8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.80ca	d0 e6		bne $80b2			bne 	_GXCB0
.80cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/ellipse.asm

.80cd					GXFillEllipse:
.80cd	a9 ff		lda #$ff			lda 	#255
.80cf	80 02		bra $80d3			bra 	GXEllipse
.80d1					GXFrameEllipse:
.80d1	a9 00		lda #$00			lda 	#0
.80d3					GXEllipse:
.80d3	8d 43 06	sta $0643			sta 	gIsFillMode					; save Fill flag
.80d6	20 20 85	jsr $8520			jsr 	GXSortXY 					; topleft/bottomright
.80d9	20 97 84	jsr $8497			jsr 	GXOpenBitmap 				; start drawing
.80dc	20 aa 81	jsr $81aa			jsr 	GXEllipseSetup 				; set up for drawing
.80df					_GXEllipseDraw:
.80df	ad 41 06	lda $0641			lda 	gX 							; while x <= y
.80e2	cd 42 06	cmp $0642			cmp 	gY
.80e5	f0 06		beq $80ed			beq 	_GXEllipseContinue
.80e7	90 04		bcc $80ed			bcc 	_GXEllipseContinue
.80e9	20 a8 84	jsr $84a8			jsr 	GXCloseBitmap 				; close the bitmap
.80ec	60		rts				rts
.80ed					_GXEllipseContinue:
.80ed	20 f5 80	jsr $80f5			jsr 	GXPlot2 					; draw it
.80f0	20 57 81	jsr $8157			jsr 	GXEllipseMove 				; adjust the coordinates
.80f3	80 ea		bra $80df			bra 	_GXEllipseDraw
.80f5					GXPlot2:
.80f5	20 f8 80	jsr $80f8			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80f8					GXPlot1:
.80f8	20 0b 81	jsr $810b			jsr 	GXPlot0 						; plot and negate
.80fb	20 0b 81	jsr $810b			jsr 	GXPlot0 						; twice, undoing negation
.80fe	ad 41 06	lda $0641			lda 	gX 								; swap X and Y
.8101	ae 42 06	ldx $0642			ldx	 	gY
.8104	8d 42 06	sta $0642			sta 	gY
.8107	8e 41 06	stx $0641			stx 	gX
.810a	60		rts				rts
.810b					GXPlot0:
.810b	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.810d	ad 42 06	lda $0642			lda 	gY
.8110	20 39 81	jsr $8139			jsr 	_GXSubCopy
.8113	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8115	ad 41 06	lda $0641			lda 	gX
.8118	20 39 81	jsr $8139			jsr 	_GXSubCopy
.811b	48		pha				pha 									; save last offset X
.811c	20 b5 84	jsr $84b5			jsr 	GXPositionCalc 					; calculate position/offset.
.811f	68		pla				pla
.8120	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.8121	85 36		sta $36				sta 	gzTemp0
.8123	64 37		stz $37				stz 	gzTemp0+1
.8125	26 37		rol $37				rol 	gzTemp0+1
.8127	ad 43 06	lda $0643			lda 	gIsFillMode
.812a	69 80		adc #$80			adc 	#128
.812c	20 66 83	jsr $8366			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.812f	38		sec				sec 									; GY = -GY
.8130	a9 00		lda #$00			lda 	#0
.8132	ed 42 06	sbc $0642			sbc 	gY
.8135	8d 42 06	sta $0642			sta 	gY
.8138					_GXPlot0Exit:
.8138	60		rts				rts
.8139					_GXSubCopy:
.8139	85 36		sta $36				sta 	gzTemp0
.813b	64 37		stz $37				stz 	gzTemp0+1
.813d	29 80		and #$80			and 	#$80
.813f	f0 02		beq $8143			beq 	_GXNoSx
.8141	c6 37		dec $37				dec 	gzTemp0+1
.8143					_GXNoSx:
.8143	38		sec				sec
.8144	bd 35 06	lda $0635,x			lda 	gXX1,x
.8147	e5 36		sbc $36				sbc 	gzTemp0
.8149	9d 31 06	sta $0631,x			sta 	gXX0,x
.814c	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.814f	e5 37		sbc $37				sbc 	gzTemp0+1
.8151	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.8154	a5 36		lda $36				lda 	gzTemp0 						; return A
.8156	60		rts				rts
.8157					GXEllipseMove:
.8157	9c 44 06	stz $0644			stz 	gYChanged 					; clear Y changed flag
.815a	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.815c	10 0d		bpl $816b			bpl 	_GXEMPositive
.815e	ee 41 06	inc $0641			inc 	gX 							; X++
.8161	ad 41 06	lda $0641			lda 	gX
.8164	20 8a 81	jsr $818a			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8167	a9 06		lda #$06			lda 	#6  						; and add 6
.8169	80 15		bra $8180			bra 	_GXEMAddD
.816b					_GXEMPositive:
.816b	ee 41 06	inc $0641			inc 	gX 							; X++
.816e	ce 42 06	dec $0642			dec 	gy 							; Y--
.8171	38		sec				sec 								; calculate X-Y
.8172	ad 41 06	lda $0641			lda 	gX
.8175	ed 42 06	sbc $0642			sbc 	gY
.8178	20 8a 81	jsr $818a			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.817b	a9 0a		lda #$0a			lda 	#10  						; and add 10
.817d	ce 44 06	dec $0644			dec 	gYChanged
.8180					_GXEMAddD:
.8180	18		clc				clc
.8181	65 38		adc $38				adc 	gzTemp1
.8183	85 38		sta $38				sta 	gzTemp1
.8185	90 02		bcc $8189			bcc 	_GXEMNoCarry
.8187	e6 39		inc $39				inc 	gzTemp1+1
.8189					_GXEMNoCarry:
.8189	60		rts				rts
.818a					_GXAdd4TimesToD:
.818a	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.818c	29 80		and #$80			and 	#$80
.818e	f0 02		beq $8192			beq 	_GXA4Unsigned
.8190	a9 ff		lda #$ff			lda 	#$FF
.8192					_GXA4Unsigned:
.8192	85 37		sta $37				sta 	gzTemp0+1
.8194	06 36		asl $36				asl 	gzTemp0  					; x 4
.8196	26 37		rol $37				rol 	gzTemp0+1
.8198	06 36		asl $36				asl 	gzTemp0
.819a	26 37		rol $37				rol 	gzTemp0+1
.819c	18		clc				clc 								; add
.819d	a5 36		lda $36				lda		gzTemp0
.819f	65 38		adc $38				adc 	gzTemp1
.81a1	85 38		sta $38				sta 	gzTemp1
.81a3	a5 37		lda $37				lda		gzTemp0+1
.81a5	65 39		adc $39				adc 	gzTemp1+1
.81a7	85 39		sta $39				sta 	gzTemp1+1
.81a9	60		rts				rts
.81aa					GXEllipseSetup:
.81aa	38		sec				sec
.81ab	ad 37 06	lda $0637			lda 	gxY1
.81ae	ed 33 06	sbc $0633			sbc 	gxY0
.81b1	4a		lsr a				lsr 	a
.81b2	8d 40 06	sta $0640			sta 	gRadius
.81b5	a2 00		ldx #$00			ldx 	#0
.81b7	20 d9 81	jsr $81d9			jsr 	_GXCalculateCentre
.81ba	a2 02		ldx #$02			ldx 	#2
.81bc	20 d9 81	jsr $81d9			jsr 	_GXCalculateCentre
.81bf	9c 41 06	stz $0641			stz 	gX
.81c2	ad 40 06	lda $0640			lda 	gRadius
.81c5	8d 42 06	sta $0642			sta 	gY
.81c8	0a		asl a				asl 	a 							; R x 2
.81c9	85 36		sta $36				sta 	gzTemp0
.81cb	38		sec				sec
.81cc	a9 03		lda #$03			lda 	#3
.81ce	e5 36		sbc $36				sbc 	gzTemp0
.81d0	85 38		sta $38				sta 	gzTemp1
.81d2	a9 00		lda #$00			lda 	#0
.81d4	e9 00		sbc #$00			sbc 	#0
.81d6	85 39		sta $39				sta 	gzTemp1+1
.81d8	60		rts				rts
.81d9					_GXCalculateCentre:
.81d9	38		sec				sec
.81da	bd 35 06	lda $0635,x			lda 	gxX1,x
.81dd	7d 31 06	adc $0631,x			adc 	gXX0,x
.81e0	9d 35 06	sta $0635,x			sta 	gXX1,x
.81e3	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81e6	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81e9	4a		lsr a				lsr 	a
.81ea	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81ed	7e 35 06	ror $0635,x			ror 	gXX1,x
.81f0	60		rts				rts
.0640					gRadius:
>0640							.fill 	1
.0641					gX:
>0641							.fill 	1
.0642					gY:
>0642							.fill 	1
.0643					gIsFillMode:
>0643							.fill 	1
.0644					gYChanged:
>0644							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.81f1					GXLine:
.81f1	20 97 84	jsr $8497			jsr 	GXOpenBitmap
.81f4	20 3e 85	jsr $853e			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.81f7	20 bc 82	jsr $82bc			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.81fa	20 b5 84	jsr $84b5			jsr 	GXPositionCalc 				; calculate position/offset.
.81fd					_GXDrawLoop:
.81fd	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.8200	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8202	2d 3c 06	and $063c			and 	gxANDValue
.8205	4d 3b 06	eor $063b			eor 	gxEORValue
.8208	91 3a		sta ($3a),y			sta 	(gsTemp),y
.820a	20 18 82	jsr $8218			jsr 	GXLineIsComplete 			; is the line complete ?
.820d	f0 05		beq $8214			beq 	_GXLExit
.820f	20 33 82	jsr $8233			jsr 	GXLineAdvance 				; code as per advance method
.8212	80 e9		bra $81fd			bra 	_GXDrawLoop
.8214					_GXLExit:
.8214	20 a8 84	jsr $84a8			jsr 	GXCloseBitmap
.8217	60		rts				rts
.8218					GXLineIsComplete:
.8218	ad 47 06	lda $0647			lda 	GXIsDiffYLarger 			; is dy larger
.821b	d0 0f		bne $822c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.821d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8220	4d 35 06	eor $0635			eor 	GXX1
.8223	d0 06		bne $822b			bne 	_GXLICExit
.8225	ad 32 06	lda $0632			lda 	GXX0+1
.8228	4d 36 06	eor $0636			eor 	GXX1+1
.822b					_GXLICExit:
.822b	60		rts				rts
.822c					_GXLICCompareY:
.822c	ad 37 06	lda $0637			lda 	GXY1
.822f	4d 33 06	eor $0633			eor 	GXY0
.8232	60		rts				rts
.8233					GXLineAdvance:
.8233	18		clc				clc 								; add adjust to position
.8234	ad 49 06	lda $0649			lda 	GXPosition
.8237	6d 4a 06	adc $064a			adc 	GXAdjust
.823a	8d 49 06	sta $0649			sta 	GXPosition
.823d	9c 4c 06	stz $064c			stz 	GXAddSelect 				; clear add select flag
.8240	b0 05		bcs $8247			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8242	cd 4b 06	cmp $064b			cmp 	GXTotal 					; if exceeded total
.8245	90 0a		bcc $8251			bcc 	_GXLANoExtra
.8247					_GXLAOverflow:
.8247	ce 4c 06	dec $064c			dec 	GXAddSelect 				; set addselect to $FF
.824a	38		sec				sec 								; subtract total and write back
.824b	ed 4b 06	sbc $064b			sbc 	GXTotal
.824e	8d 49 06	sta $0649			sta 	GXPosition
.8251					_GXLANoExtra:
.8251	ad 47 06	lda $0647			lda 	GXIsDiffYLarger
.8254	f0 0d		beq $8263			beq 	_GXDXLarger
.8256	20 b5 82	jsr $82b5			jsr 	GXIncrementY
.8259	ad 4c 06	lda $064c			lda 	GXAddSelect
.825c	f0 10		beq $826e			beq 	_GXLAExit
.825e	20 6f 82	jsr $826f			jsr 	GXAdjustX
.8261	80 0b		bra $826e			bra 	_GXLAExit
.8263					_GXDXLarger:
.8263	20 6f 82	jsr $826f			jsr 	GXAdjustX
.8266	ad 4c 06	lda $064c			lda 	GXAddSelect
.8269	f0 03		beq $826e			beq 	_GXLAExit
.826b	20 b5 82	jsr $82b5			jsr 	GXIncrementY
.826e					_GXLAExit:
.826e	60		rts				rts
.826f					GXAdjustX:
.826f	ad 48 06	lda $0648			lda 	GXDXNegative
.8272	10 25		bpl $8299			bpl 	_GXAXRight
.8274	ad 31 06	lda $0631			lda 	GXX0
.8277	d0 03		bne $827c			bne 	_GXAXNoBorrow
.8279	ce 32 06	dec $0632			dec 	GXX0+1
.827c					_GXAXNoBorrow:
.827c	ce 31 06	dec $0631			dec 	GXX0
.827f	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.8282	ad 3f 06	lda $063f			lda 	gsOffset
.8285	c9 ff		cmp #$ff			cmp 	#$FF
.8287	d0 0f		bne $8298			bne 	_GXAYExit 					; underflow
.8289	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.828b	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.828d	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.828f	b0 07		bcs $8298			bcs 	_GXAYExit
.8291	18		clc				clc
.8292	69 20		adc #$20			adc 	#$20 						; fix up
.8294	85 3b		sta $3b				sta 	gsTemp+1
.8296	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.8298					_GXAYExit:
.8298	60		rts				rts
.8299					_GXAXRight:
.8299	ee 31 06	inc $0631			inc 	GXX0
.829c	d0 03		bne $82a1			bne 	_GXAXNoCarry
.829e	ee 32 06	inc $0632			inc 	GXX0+1
.82a1					_GXAXNoCarry:
.82a1	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.82a4	d0 0e		bne $82b4			bne 	_GXAXExit 					; if not overflowed, exit.
.82a6	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.82a8	a5 3b		lda $3b				lda 	gsTemp+1
.82aa	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ac	90 06		bcc $82b4			bcc 	_GXAXExit
.82ae	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82b0	85 3b		sta $3b				sta 	gsTemp+1
.82b2	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82b4					_GXAXExit:
.82b4	60		rts				rts
.82b5					GXIncrementY:
.82b5	ee 33 06	inc $0633			inc 	GXY0
.82b8	20 05 85	jsr $8505			jsr 	GXMovePositionDown
.82bb	60		rts				rts
.82bc					GXLineSetup:
.82bc	ad 37 06	lda $0637			lda 	GXY1
.82bf	38		sec				sec
.82c0	ed 33 06	sbc $0633			sbc 	GXY0
.82c3	4a		lsr a				lsr 	a
.82c4	8d 46 06	sta $0646			sta 	GXDiffY
.82c7	9c 48 06	stz $0648			stz 	GXDXNegative 				; clear -ve flag
.82ca	38		sec				sec
.82cb	ad 35 06	lda $0635			lda 	GXX1
.82ce	ed 31 06	sbc $0631			sbc 	GXX0
.82d1	8d 45 06	sta $0645			sta 	GXDiffX
.82d4	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82d7	ed 32 06	sbc $0632			sbc 	GXX0+1
.82da	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82db	6e 45 06	ror $0645			ror 	GXDiffX
.82de	0a		asl a				asl 	a
.82df	10 0c		bpl $82ed			bpl 	_GDXNotNegative
.82e1	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.82e3	38		sec				sec
.82e4	ed 45 06	sbc $0645			sbc 	GXDiffX
.82e7	8d 45 06	sta $0645			sta 	GXDiffX
.82ea	ce 48 06	dec $0648			dec 	GXDXNegative 				; -ve flag = $FF.
.82ed					_GDXNotNegative:
.82ed	9c 47 06	stz $0647			stz 	GXIsDiffYLarger 			; clear larger flag
.82f0	ad 46 06	lda $0646			lda 	GXDiffY 					; set adjust and total.
.82f3	8d 4a 06	sta $064a			sta 	GXAdjust
.82f6	ad 45 06	lda $0645			lda 	GXDiffX
.82f9	8d 4b 06	sta $064b			sta 	GXTotal
.82fc	ad 46 06	lda $0646			lda 	GXDiffY 					; if dy > dx
.82ff	cd 45 06	cmp $0645			cmp 	GXDiffX
.8302	90 0f		bcc $8313			bcc 	_GDXNotLarger
.8304	ce 47 06	dec $0647			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8307	ad 45 06	lda $0645			lda 	GXDiffX 					; set adjust and total other way round
.830a	8d 4a 06	sta $064a			sta 	GXAdjust
.830d	ad 46 06	lda $0646			lda 	GXDiffY
.8310	8d 4b 06	sta $064b			sta 	GXTotal
.8313					_GDXNotLarger:
.8313	ad 4b 06	lda $064b			lda 	GXTotal
.8316	4a		lsr a				lsr 	a
.8317	8d 49 06	sta $0649			sta 	GXPosition
.831a	60		rts				rts
.0645					GXDiffX:
>0645							.fill 	1
.0646					GXDiffY:
>0646							.fill 	1
.0647					GXIsDiffYLarger:
>0647							.fill 	1
.0648					GXDXNegative:
>0648							.fill 	1
.0649					GXPosition:
>0649							.fill 	1
.064a					GXAdjust:
>064a							.fill 	1
.064b					GXTotal:
>064b							.fill 	1
.064c					GXAddSelect:
>064c							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.831b					GXFillRectangle:
.831b	38		sec				sec
.831c	80 01		bra $831f			bra 	GXRectangle
.831e					GXFrameRectangle:
.831e	18		clc				clc
.831f					GXRectangle:
.831f	08		php				php 								; save Fill flag (CS)
.8320	20 97 84	jsr $8497			jsr 	GXOpenBitmap 				; start drawing
.8323	20 20 85	jsr $8520			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8326	20 b5 84	jsr $84b5			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8329	38		sec				sec 								; sec = Draw line
.832a	20 53 83	jsr $8353			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.832d	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8330	cd 37 06	cmp $0637			cmp 	gxY1
.8333	f0 19		beq $834e			beq 	_GXRectangleExit
.8335					_GXRectLoop:
.8335	20 05 85	jsr $8505			jsr 	GXMovePositionDown 			; down one.
.8338	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.833b	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.833e	cd 37 06	cmp $0637			cmp 	gXY1
.8341	f0 07		beq $834a			beq 	_GXLastLine
.8343	28		plp				plp 								; get flag back
.8344	08		php				php
.8345	20 53 83	jsr $8353			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8348	80 eb		bra $8335			bra 	_GXRectLoop
.834a					_GXLastLine:
.834a	38		sec				sec
.834b	20 53 83	jsr $8353			jsr 	GXDrawLineX1X0
.834e					_GXRectangleExit:
.834e	68		pla				pla 								; throw fill flag.
.834f	20 a8 84	jsr $84a8			jsr 	GXCloseBitmap 				; stop drawing and exit
.8352	60		rts				rts
.8353					GXDrawLineX1X0:
.8353	08		php				php 								; save solid/either-end
.8354	38		sec				sec
.8355	ad 35 06	lda $0635			lda		gXX1
.8358	ed 31 06	sbc $0631			sbc 	gXX0
.835b	85 36		sta $36				sta 	gzTemp0
.835d	ad 36 06	lda $0636			lda 	gXX1+1
.8360	ed 32 06	sbc $0632			sbc 	gXX0+1
.8363	85 37		sta $37				sta 	gzTemp0+1
.8365	28		plp				plp
.8366					GXDrawLineTemp0:
.8366	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8368	48		pha				pha
.8369	a5 3b		lda $3b				lda 	gsTemp+1
.836b	48		pha				pha
.836c	ad 3f 06	lda $063f			lda 	gsOffset
.836f	48		pha				pha
.8370	a5 0b		lda $0b				lda 	GFXEditSlot
.8372	48		pha				pha
.8373	ac 3f 06	ldy $063f			ldy 	gsOffset 					; Y offset
.8376	90 1e		bcc $8396			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8378					_GXDLTLine:
.8378	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.837a	2d 3c 06	and $063c			and 	gxANDValue
.837d	4d 3b 06	eor $063b			eor 	gxEORValue
.8380	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8382	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8384	d0 04		bne $838a			bne 	_GXDLTNoBorrow
.8386	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8388	30 2e		bmi $83b8			bmi 	_GXDLTExit
.838a					_GXDLTNoBorrow:
.838a	c6 36		dec $36				dec 	gzTemp0
.838c	c8		iny				iny 								; next slot.
.838d	d0 e9		bne $8378			bne 	_GXDLTLine
.838f	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.8391	20 c6 83	jsr $83c6			jsr 	_GXDLTCheckWrap				; check for new page.
.8394	80 e2		bra $8378			bra 	_GXDLTLine
.8396					_GXDLTEndPoints:
.8396	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8398	2d 3c 06	and $063c			and 	gxANDValue
.839b	4d 3b 06	eor $063b			eor 	gxEORValue
.839e	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83a0	98		tya				tya 								; advance to right side
.83a1	18		clc				clc
.83a2	65 36		adc $36				adc 	gzTemp0
.83a4	a8		tay				tay
.83a5	a5 3b		lda $3b				lda 	gsTemp+1
.83a7	65 37		adc $37				adc 	gzTemp0+1
.83a9	85 3b		sta $3b				sta 	gsTemp+1
.83ab	20 c6 83	jsr $83c6			jsr 	_GXDLTCheckWrap 			; fix up.
.83ae	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.83b0	2d 3c 06	and $063c			and 	gxANDValue
.83b3	4d 3b 06	eor $063b			eor 	gxEORValue
.83b6	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83b8					_GXDLTExit:
.83b8	68		pla				pla
.83b9	85 0b		sta $0b				sta 	GFXEditSlot
.83bb	68		pla				pla
.83bc	8d 3f 06	sta $063f			sta 	gsOffset
.83bf	68		pla				pla
.83c0	85 3b		sta $3b				sta 	gsTemp+1
.83c2	68		pla				pla
.83c3	85 3a		sta $3a				sta 	gsTemp
.83c5	60		rts				rts
.83c6					_GXDLTCheckWrap:
.83c6	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.83c8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ca	90 06		bcc $83d2			bcc 	_GXDLTCWExit
.83cc	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83ce	85 3b		sta $3b				sta 	gsTemp+1
.83d0	e6 0b		inc $0b				inc 	GFXEditSlot
.83d2					_GXDLTCWExit:
.83d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.83d3					GraphicDraw:
.83d3	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.83d5	b0 06		bcs $83dd			bcs 	_GDCoordinate
.83d7	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.83d9	84 37		sty $37				sty 	gzTemp0+1
.83db	80 2c		bra $8409			bra 	_GDExecuteA 				; and execute
.83dd					_GDCoordinate:
.83dd	48		pha				pha 								; save AXY
.83de	da		phx				phx
.83df	5a		phy				phy
.83e0	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.83e2					_GDCopy1:
.83e2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.83e5	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.83e8	ca		dex				dex
.83e9	10 f7		bpl $83e2			bpl 	_GDCopy1
.83eb	68		pla				pla 								; update Y
.83ec	8d 2b 06	sta $062b			sta 	gxCurrentY
.83ef	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.83f2	68		pla				pla
.83f3	8d 29 06	sta $0629			sta 	gxCurrentX
.83f6	68		pla				pla 								; get A (command+X.1) back
.83f7	48		pha				pha
.83f8	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.83fa	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.83fd	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.83ff					_GDCopy2:
.83ff	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8402	9d 31 06	sta $0631,x			sta 	gxX0,x
.8405	ca		dex				dex
.8406	10 f7		bpl $83ff			bpl 	_GDCopy2
.8408	68		pla				pla 								; get command back
.8409					_GDExecuteA:
.8409	29 fe		and #$fe			and 	#$FE 						; lose LSB
.840b	aa		tax				tax
.840c	7c 10 84	jmp ($8410,x)			jmp 	(GDVectors,x)
.840f					GXMove:
.840f	60		rts				rts
.8410					GDVectors:
>8410							.fill 	2 							; $00 		; Open/Close Bitmap
>8412	83 80						.word 	GXClearBitmap 				; $01 	  	: Clear Bitmap to X
>8414							.fill 	14*2 						; $02-$0F 	: Reserved
>8430	0f 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8432	f1 81						.word 	GXLine 						; $11 		: Draw line
>8434	1e 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8436	1b 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8438	d1 80						.word 	GXFrameEllipse 				; $14 		; Framed ellipse
>843a	cd 80						.word 	GXFillEllipse 				; $15 		; Filled ellipse

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.843c					RunDemos:
.843c	64 01		stz $01				stz 	1
.843e	a9 0f		lda #$0f			lda 	#$0F
.8440	8d 00 d0	sta $d000			sta 	$D000
.8443	a9 01		lda #$01			lda 	#1
.8445	8d 00 d1	sta $d100			sta 	$D100
.8448	9c 01 d1	stz $d101			stz 	$D101
.844b	9c 02 d1	stz $d102			stz 	$D102
.844e	a9 02		lda #$02			lda 	#2
.8450	8d 03 d1	sta $d103			sta 	$D103
.8453	a9 10		lda #$10			lda 	#16
.8455	8d 39 06	sta $0639			sta 	gxBasePage
.8458	a9 f0		lda #$f0			lda 	#240
.845a	8d 3a 06	sta $063a			sta 	gxHeight
.845d	a9 fc		lda #$fc			lda 	#$FC
.845f	8d 3b 06	sta $063b			sta 	gxEORValue
.8462	a9 ff		lda #$ff			lda 	#$FF
.8464	8d 3c 06	sta $063c			sta 	gxANDValue
.8467					loop:
.8467	a9 02		lda #$02			lda 	#((1)*2)+(((4) >> 8) & 1)
.8469	a2 04		ldx #$04			ldx 	#((4) & $FF)
.846b	a0 00		ldy #$00			ldy 	#(0)
.846d	20 d3 83	jsr $83d3			jsr 	GraphicDraw
.8470	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8472	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8474	a0 0a		ldy #$0a			ldy 	#(10)
.8476	20 d3 83	jsr $83d3			jsr 	GraphicDraw
.8479	a9 2a		lda #$2a			lda 	#((21)*2)+(((100) >> 8) & 1)
.847b	a2 64		ldx #$64			ldx 	#((100) & $FF)
.847d	a0 64		ldy #$64			ldy 	#(100)
.847f	20 d3 83	jsr $83d3			jsr 	GraphicDraw
.8482	60		rts				rts
.8483	20 a0 9b	jsr $9ba0	demo:	jsr 	Random32Bit
.8486	ee 3b 06	inc $063b			inc 	gxEORValue
.8489	a9 24		lda #$24			lda 	#18*2
.848b	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.848e	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8491	20 d3 83	jsr $83d3			jsr 	GraphicDraw
.8494	80 ed		bra $8483			bra 	demo
.8496	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.8497					GXOpenBitmap:
.8497	78		sei				sei 								; no interrupts here
.8498	a5 00		lda $00				lda 	0 							; save original MMU Control register
.849a	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.849d	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.849f	85 00		sta $00				sta 	0
.84a1	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.84a3	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.84a6	58		cli				cli
.84a7	60		rts				rts
.84a8					GXCloseBitmap:
.84a8	78		sei				sei
.84a9	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.84ac	85 0b		sta $0b				sta 	GFXEditSlot
.84ae	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.84b1	85 00		sta $00				sta 	0
.84b3	58		cli				cli
.84b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.84b5					GXPositionCalc:
.84b5	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.84b8	85 3a		sta $3a				sta 	gsTemp
.84ba	64 3b		stz $3b				stz 	gsTemp+1
.84bc	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.84be	26 3b		rol $3b				rol 	gsTemp+1
.84c0	06 3a		asl $3a				asl 	gsTemp
.84c2	26 3b		rol $3b				rol 	gsTemp+1
.84c4	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.84c5	65 3a		adc $3a				adc 	gsTemp
.84c7	85 3a		sta $3a				sta 	gsTemp
.84c9	90 02		bcc $84cd			bcc 	_GXPCNoCarry
.84cb	e6 3b		inc $3b				inc 	gsTemp+1
.84cd					_GXPCNoCarry:
.84cd	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.84cf	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.84d1	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.84d3	85 36		sta $36				sta 	gzTemp0
.84d5	64 3b		stz $3b				stz 	gsTemp+1
.84d7	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.84d9					_GXPCMultiply32:
.84d9	06 3a		asl $3a				asl 	gsTemp
.84db	26 3b		rol $3b				rol 	gsTemp+1
.84dd	3a		dec a				dec 	a
.84de	d0 f9		bne $84d9			bne 	_GXPCMultiply32
.84e0	18		clc				clc
.84e1	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.84e4	65 3a		adc $3a				adc 	gsTemp
.84e6	8d 3f 06	sta $063f			sta 	gsOffset
.84e9	ad 32 06	lda $0632			lda 	GXX0+1
.84ec	65 3b		adc $3b				adc 	gsTemp+1
.84ee	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.84f0	90 04		bcc $84f6			bcc 	_GXPCNoOverflow
.84f2	29 1f		and #$1f			and 	#$1F 						; fix it up
.84f4	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.84f6					_GXPCNoOverflow:
.84f6	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.84f8	85 3b		sta $3b				sta 	gsTemp+1
.84fa	64 3a		stz $3a				stz 	gsTemp
.84fc	18		clc				clc
.84fd	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.84ff	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8502	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8504	60		rts				rts
.8505					GXMovePositionDown:
.8505	18		clc				clc 								; add 320 to offset/temp+1
.8506	ad 3f 06	lda $063f			lda 	gsOffset
.8509	69 40		adc #$40			adc 	#64
.850b	8d 3f 06	sta $063f			sta 	gsOffset
.850e	a5 3b		lda $3b				lda 	gsTemp+1
.8510	69 01		adc #$01			adc 	#1
.8512	85 3b		sta $3b				sta 	gsTemp+1
.8514	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8516	90 07		bcc $851f			bcc 	_GXMPDExit
.8518	38		sec				sec  								; next page
.8519	e9 20		sbc #$20			sbc 	#$20
.851b	85 3b		sta $3b				sta 	gsTemp+1
.851d	e6 0b		inc $0b				inc 	GFXEditSlot
.851f					_GXMPDExit:
.851f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8520					GXSortXY:
.8520	20 3e 85	jsr $853e			jsr 	GXSortY 					; will be sorted on Y now
.8523	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8526	cd 35 06	cmp $0635			cmp 	gxX1
.8529	ad 32 06	lda $0632			lda 	gXX0+1
.852c	ed 36 06	sbc $0636			sbc 	gXX1+1
.852f	90 0c		bcc $853d			bcc 	_GXSXYExit 					; X0 < X1 exit
.8531	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8533	a0 04		ldy #$04			ldy 	#4
.8535	20 52 85	jsr $8552			jsr 	GXSwapXY
.8538	e8		inx				inx
.8539	c8		iny				iny
.853a	20 52 85	jsr $8552			jsr 	GXSwapXY
.853d					_GXSXYExit:
.853d	60		rts				rts
.853e					GXSortY:
.853e	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8541	cd 37 06	cmp $0637			cmp 	gxY1
.8544	90 0b		bcc $8551			bcc 	_GXSYSorted
.8546	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8548	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.854a					_GXSwap1:
.854a	20 52 85	jsr $8552			jsr 	GXSwapXY
.854d	88		dey				dey
.854e	ca		dex				dex
.854f	10 f9		bpl $854a			bpl 	_GXSwap1
.8551					_GXSYSorted:
.8551	60		rts				rts
.8552					GXSwapXY:
.8552	bd 31 06	lda $0631,x			lda 	gxX0,x
.8555	48		pha				pha
.8556	b9 31 06	lda $0631,y			lda 	gxX0,y
.8559	9d 31 06	sta $0631,x			sta 	gxX0,x
.855c	68		pla				pla
.855d	99 31 06	sta $0631,y			sta 	gxX0,y
.8560	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8561					AssembleGroup1:
.8561	a9 ff		lda #$ff			lda 	#$FF
.8563	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8566	80 02		bra $856a			bra 	AsmGroup12
.8568					AssembleGroup2:
.8568	a5 00		lda $00				lda 	$00
.856a					AsmGroup12:
.856a	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.856d	68		pla				pla 								; pop the return address to access the information following.
.856e	fa		plx				plx
.856f	20 f8 85	jsr $85f8			jsr 	AccessParameters 			; get opcode and save as base
.8572	8d a4 04	sta $04a4			sta 	BaseOpcode
.8575	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8578	d0 08		bne $8582			bne 	_AG12HaveMask
.857a	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.857c	20 00 86	jsr $8600			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.857f	8d a5 04	sta $04a5			sta 	ModeMask
.8582					_AG12HaveMask:
.8582	20 3b 87	jsr $873b			jsr 	TypeAndCalculateOperand 	; get zero page type
.8585	da		phx				phx 								; save found address mode
.8586	20 64 86	jsr $8664			jsr 	AssembleModeX
.8589	fa		plx				plx  								; restore address mode
.858a	b0 0b		bcs $8597			bcs 	_AG12Exit
.858c	20 98 85	jsr $8598			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.858f	20 64 86	jsr $8664			jsr 	AssembleModeX
.8592	b0 03		bcs $8597			bcs 	_AG12Exit
.8594	4c 56 ab	jmp $ab56			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8597					_AG12Exit:
.8597	60		rts				rts
.8598					PromoteToAbsolute:
.8598	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.859a	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.859c	f0 19		beq $85b7			beq 	_PTADo
.859e	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.85a0	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.85a2	f0 13		beq $85b7			beq 	_PTADo
.85a4	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.85a6	e0 80		cpx #$80			cpx 	#AM_ZEROY
.85a8	f0 0d		beq $85b7			beq 	_PTADo
.85aa	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.85ac	e0 d1		cpx #$d1			cpx 	#AM_IND
.85ae	f0 07		beq $85b7			beq 	_PTADo
.85b0	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.85b2	e0 c0		cpx #$c0			cpx 	#AM_INDX
.85b4	f0 01		beq $85b7			beq 	_PTADo
.85b6	60		rts				rts
.85b7					_PTADo:
.85b7	aa		tax				tax
.85b8	60		rts				rts
.85b9					AssembleGroup3:
.85b9	68		pla				pla 								; get parameters, which is just the opcode.
.85ba	fa		plx				plx
.85bb	20 f8 85	jsr $85f8			jsr 	AccessParameters 			; get and output opcode
.85be	20 10 86	jsr $8610			jsr 	AssemblerWriteByte
.85c1	20 9f 87	jsr $879f			jsr 	CalculateOperand 			; get a 16 bit operand
.85c4	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.85c7	38		sec				sec
.85c8	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.85cb	48		pha				pha 								; LSB in A
.85cc	ad 10 04	lda $0410			lda 	NSMantissa1
.85cf	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.85d2	aa		tax				tax 								; MSB in X
.85d3	68		pla				pla
.85d4	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.85d5	69 7f		adc #$7f			adc 	#$7F
.85d7	90 01		bcc $85da			bcc 	_AG3NoCarry
.85d9	e8		inx				inx
.85da					_AG3NoCarry:
.85da	38		sec				sec 								; fix back and write out anyways.
.85db	e9 80		sbc #$80			sbc 	#$80
.85dd	20 10 86	jsr $8610			jsr 	AssemblerWriteByte
.85e0	e0 00		cpx #$00			cpx 	#0 							; was it in range
.85e2	f0 0a		beq $85ee			beq 	_AG3Exit
.85e4	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.85e7	29 01		and #$01			and 	#1
.85e9	f0 03		beq $85ee			beq 	_AG3Exit
.85eb	4c 5b ab	jmp $ab5b			jmp 	RangeError 					; no, branch is out of range
.85ee					_AG3Exit:
.85ee	60		rts				rts
.85ef					AssembleGroup4:
.85ef	68		pla				pla 								; pop address
.85f0	fa		plx				plx
.85f1	20 f8 85	jsr $85f8			jsr 	AccessParameters 			; access and get first
.85f4	20 10 86	jsr $8610			jsr 	AssemblerWriteByte 			; output it.
.85f7	60		rts				rts
.85f8					AccessParameters:
.85f8	8d a1 04	sta $04a1			sta 	ParamStart
.85fb	8e a2 04	stx $04a2			stx 	ParamStart+1
.85fe	a9 01		lda #$01			lda 	#1
.8600					GetParameter:
.8600	5a		phy				phy
.8601	a8		tay				tay
.8602	ad a1 04	lda $04a1			lda 	ParamStart
.8605	85 36		sta $36				sta 	zTemp0
.8607	ad a2 04	lda $04a2			lda 	ParamStart+1
.860a	85 37		sta $37				sta 	zTemp0+1
.860c	b1 36		lda ($36),y			lda 	(zTemp0),y
.860e	7a		ply				ply
.860f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8610					AssemblerWriteByte:
.8610	48		pha			pha
.8611	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8614	29 02		and #$02		and 	#2
.8616	f0 1b		beq $8633		beq 	_AWBNoPrint
.8618	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.861b	20 4e 86	jsr $864e		jsr 	PrintHex
.861e	ad 9e 04	lda $049e		lda		AssemblerAddress
.8621	20 4e 86	jsr $864e		jsr 	PrintHex
.8624	a9 20		lda #$20		lda 	#' '
.8626	20 f9 ac	jsr $acf9		jsr 	EXTPrintCharacter
.8629	68		pla			pla 									; print byte
.862a	48		pha			pha
.862b	20 4e 86	jsr $864e		jsr 	PrintHex
.862e	a9 0d		lda #$0d		lda 	#13
.8630	20 f9 ac	jsr $acf9		jsr 	EXTPrintCharacter
.8633					_AWBNoPrint:
.8633	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8636	85 36		sta $36			sta 	zTemp0
.8638	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.863b	f0 0e		beq $864b		beq 	_AWBRange
.863d	85 37		sta $37			sta 	zTemp0+1
.863f	68		pla			pla 									; write byte out
.8640	92 36		sta ($36)		sta 	(zTemp0)
.8642	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8645	d0 03		bne $864a		bne 	_AWBNoCarry
.8647	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.864a					_AWBNoCarry:
.864a	60		rts			rts
.864b					_AWBRange:
.864b	4c 5b ab	jmp $ab5b		jmp 	RangeError
.864e					PrintHex:
.864e	48		pha				pha
.864f	4a		lsr a				lsr 	a
.8650	4a		lsr a				lsr 	a
.8651	4a		lsr a				lsr 	a
.8652	4a		lsr a				lsr 	a
.8653	20 57 86	jsr $8657			jsr 	_PrintNibble
.8656	68		pla				pla
.8657					_PrintNibble:
.8657	29 0f		and #$0f			and 	#15
.8659	c9 0a		cmp #$0a			cmp 	#10
.865b	90 02		bcc $865f			bcc 	_NoShift
.865d	69 06		adc #$06			adc 	#6
.865f					_NoShift:
.865f	69 30		adc #$30			adc 	#48
.8661	4c f9 ac	jmp $acf9			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8664					AssembleModeX:
.8664	5a		phy				phy
.8665	ad a3 04	lda $04a3			lda 	IsGroup1
.8668	f0 17		beq $8681			beq 	_AMXGroup2
.866a	8a		txa				txa 							; is it in group # 1
.866b	29 40		and #$40			and 	#AM_ISG1
.866d	f0 50		beq $86bf			beq 	_AMXFail 				; no, give up.
.866f	8a		txa				txa 							; get back.
.8670	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8672	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8674	d0 22		bne $8698			bne 	_AMXHaveInfo
.8676	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8679	c9 81		cmp #$81			cmp 	#$81
.867b	f0 42		beq $86bf			beq 	_AMXFail
.867d	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.867f	80 17		bra $8698			bra 	_AMXHaveInfo 			; odd design decision there.
.8681					_AMXGroup2:
.8681	8a		txa				txa 							; is it in group 2 ?
.8682	29 20		and #$20			and 	#AM_ISG2
.8684	f0 39		beq $86bf			beq 	_AMXFail 				; no, give up.
.8686	8a		txa				txa 							; get the offset into Y
.8687	29 1f		and #$1f			and 	#$1F
.8689	4a		lsr a				lsr 	a 						; make it 0-7.
.868a	4a		lsr a				lsr  	a
.868b	a8		tay				tay
.868c	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.868f					_AMXCheckOkay:
.868f	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8690	88		dey				dey
.8691	10 fc		bpl $868f			bpl 	_AMXCheckOkay
.8693	90 2a		bcc $86bf			bcc 	_AMXFail 				; not allowed.
.8695	8a		txa				txa  							; get mask back
.8696	29 1f		and #$1f			and 	#$1F
.8698					_AMXHaveInfo:
.8698	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.869a	10 05		bpl $86a1			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.869c	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.869f	d0 1e		bne $86bf			bne 	_AMXFail
.86a1					_AMXAnySize:
.86a1	18		clc				clc 							; add offset to the base opcode
.86a2	6d a4 04	adc $04a4			adc 	BaseOpcode
.86a5					_AMXOutputCode:
.86a5	20 10 86	jsr $8610			jsr 	AssemblerWriteByte 		; write the opcode out.
.86a8	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.86aa	f0 10		beq $86bc			beq 	_AMXExit
.86ac	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.86af	20 10 86	jsr $8610			jsr 	AssemblerWriteByte
.86b2	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.86b4	30 06		bmi $86bc			bmi 	_AMXExit
.86b6	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.86b9	20 10 86	jsr $8610			jsr 	AssemblerWriteByte
.86bc					_AMXExit:
.86bc	7a		ply				ply
.86bd	38		sec				sec
.86be	60		rts				rts
.86bf					_AMXFail:
.86bf	a0 00		ldy #$00			ldy 	#0
.86c1					_AMXCheckOddities:
.86c1	8a		txa				txa
.86c2	d9 ea 86	cmp $86ea,y			cmp 	ExtraOpcode+2,y 		; match address mode
.86c5	d0 16		bne $86dd			bne 	_AMXCONext
.86c7	b9 e8 86	lda $86e8,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.86ca	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.86cd	d0 0e		bne $86dd			bne 	_AMXCONext
.86cf	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.86d1	10 05		bpl $86d8			bpl 	_AMXCONotZero
.86d3	ad 10 04	lda $0410			lda 	NSMantissa1
.86d6	d0 05		bne $86dd			bne 	_AMXCONext
.86d8					_AMXCONotZero:
.86d8	b9 e9 86	lda $86e9,y			lda 	ExtraOpcode+1,y 		; get new opcode
.86db	80 c8		bra $86a5			bra 	_AMXOutputCode 			; and assemble it
.86dd					_AMXCONext:
.86dd	c8		iny				iny
.86de	c8		iny				iny
.86df	c8		iny				iny
.86e0	b9 e8 86	lda $86e8,y			lda 	ExtraOpcode+0,y 		; end of table
.86e3	d0 dc		bne $86c1			bne 	_AMXCheckOddities
.86e5					_AMXCOFail:
.86e5	7a		ply				ply
.86e6	18		clc				clc
.86e7	60		rts				rts
.86e8					ExtraOpcode:
>86e8	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>86eb	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>86ee	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>86f1	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>86f4	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>86f7	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>86fa	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>86fd	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8700	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8703	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8706	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8707					LabelHere:
.8707	c8		iny				iny 								; skip .
.8708	a2 00		ldx #$00			ldx 	#0 							; get a term
.870a	20 11 99	jsr $9911			jsr 	EvaluateTerm 				; get a term
.870d	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8710	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8712	d0 24		bne $8738			bne 	_ALType
.8714	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8717	85 36		sta $36				sta 	zTemp0
.8719	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.871c	85 37		sta $37				sta 	zTemp0+1
.871e	5a		phy				phy 								; copy address in.
.871f	a0 01		ldy #$01			ldy 	#1
.8721	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8724	92 36		sta ($36)			sta 	(zTemp0)
.8726	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8729	91 36		sta ($36),y			sta 	(zTemp0),y
.872b	c8		iny				iny
.872c	a9 00		lda #$00			lda 	#0
.872e	91 36		sta ($36),y			sta 	(zTemp0),y
.8730	c8		iny				iny
.8731	91 36		sta ($36),y			sta 	(zTemp0),y
.8733	c8		iny				iny
.8734	91 36		sta ($36),y			sta 	(zTemp0),y
.8736	7a		ply				ply
.8737	60		rts				rts
.8738					_ALType:
.8738	4c 60 ab	jmp $ab60			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.873b					TypeAndCalculateOperand:
.873b	b1 30		lda ($30),y			lda 	(codePtr),y
.873d	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.873f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8741	f0 5b		beq $879e			beq 	_TACOExit
.8743	c9 80		cmp #$80			cmp 	#KWC_EOL
.8745	f0 57		beq $879e			beq 	_TACOExit
.8747	c8		iny				iny
.8748	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.874a	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.874c	f0 51		beq $879f			beq 	CalculateOperand
.874e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8750	f0 1f		beq $8771			beq 	_TACOIndirect
.8752	88		dey				dey 								; undo get of first character
.8753	20 9f 87	jsr $879f			jsr 	CalculateOperand 			; get operand
.8756	b1 30		lda ($30),y			lda 	(codePtr),y
.8758	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.875a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.875c	d0 40		bne $879e			bne 	_TACOExit
.875e	c8		iny				iny
.875f	20 e7 a4	jsr $a4e7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8762	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8764	c9 58		cmp #$58			cmp 	#'X'
.8766	f0 36		beq $879e			beq 	_TACOExit
.8768	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.876a	c9 59		cmp #$59			cmp 	#'Y'
.876c	f0 30		beq $879e			beq 	_TACOExit
.876e					_TACOSyntax:
.876e	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.8771					_TACOIndirect:
.8771	20 9f 87	jsr $879f			jsr 	CalculateOperand 			; get the operand
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8778	f0 17		beq $8791			beq 	_TACOIndX
.877a	20 70 a5	jsr $a570			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.877d	b1 30		lda ($30),y			lda 	(codePtr),y
.877f	a2 d1		ldx #$d1			ldx 	#AM_IND
.8781	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8783	d0 19		bne $879e			bne 	_TACOExit
.8785	c8		iny				iny
.8786	20 e7 a4	jsr $a4e7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8789	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.878b	d0 e1		bne $876e			bne 	_TACOSyntax
.878d	a2 d0		ldx #$d0			ldx 	#AM_INDY
.878f	80 0d		bra $879e			bra 	_TACOExit
.8791					_TACOIndX:
.8791	c8		iny				iny
.8792	20 e7 a4	jsr $a4e7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8795	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8797	d0 d5		bne $876e			bne 	_TACOSyntax
.8799	20 70 a5	jsr $a570			jsr 	CheckRightBracket			; check )
.879c	a2 c0		ldx #$c0			ldx 	#AM_INDX
.879e					_TACOExit:
.879e	60		rts				rts
.879f					CalculateOperand:
.879f	48		pha				pha
.87a0	da		phx				phx
.87a1	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.87a3	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.87a6	fa		plx				plx
.87a7	68		pla				pla
.87a8	60		rts				rts
.a4e7					TACOCheckXY:
.a4e7	b1 30		lda ($30),y			lda 	(codePtr),y
.a4e9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a4eb	c9 40		cmp #$40			cmp 	#$40
.a4ed	d0 21		bne $a510			bne 	_TCXYFail
.a4ef	b1 30		lda ($30),y			lda 	(codePtr),y
.a4f1	18		clc				clc
.a4f2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a4f4	85 37		sta $37				sta 	zTemp0+1
.a4f6	c8		iny				iny
.a4f7	b1 30		lda ($30),y			lda 	(codePtr),y
.a4f9	c8		iny				iny
.a4fa	85 36		sta $36				sta 	zTemp0
.a4fc	5a		phy				phy 								; save position
.a4fd	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a4ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.a501	d0 0c		bne $a50f			bne 	_TCXYPopFail
.a503	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a505	b1 36		lda ($36),y			lda 	(zTemp0),y
.a507	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a509	f0 08		beq $a513			beq 	_TCXYFound
.a50b	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a50d	f0 04		beq $a513			beq 	_TCXYFound
.a50f					_TCXYPopFail:
.a50f	7a		ply				ply
.a510					_TCXYFail:
.a510	a9 00		lda #$00			lda 	#0
.a512	60		rts				rts
.a513					_TCXYFound:
.a513	7a		ply				ply 								; restore position
.a514	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a516	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87a9					EditProgramCode:
.87a9	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.87ac	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.87af	20 4e 9e	jsr $9e4e			jsr 	MemorySearch
.87b2	90 05		bcc $87b9			bcc 	_EPCNoDelete 				; reached the end don't delete
.87b4	d0 03		bne $87b9			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.87b6	20 3d ad	jsr $ad3d			jsr 	MemoryDeleteLine 			; delete the line
.87b9					_EPCNoDelete:
.87b9	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.87bc	c9 80		cmp #$80			cmp 	#KWC_EOL
.87be	f0 0d		beq $87cd			beq 	_EPCNoInsert
.87c0	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.87c3	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87c6	20 4e 9e	jsr $9e4e			jsr 	MemorySearch
.87c9	18		clc				clc 								; insert at this point.
.87ca	20 74 ad	jsr $ad74			jsr 	MemoryInsertLine 			; insert the line
.87cd					_EPCNoInsert:
.87cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87ce					WarmStart:
.87ce	a2 ff		ldx #$ff			ldx 	#$FF
.87d0	9a		txs				txs
.87d1	20 0f ad	jsr $ad0f			jsr 	EXTInputLine 				; get line to lineBuffer
.87d4	20 68 a2	jsr $a268			jsr 	TokeniseLine 				; tokenise the line
.87d7	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.87da	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.87dd	d0 17		bne $87f6			bne 	_WSEditCode 				; if so,edit code.
.87df	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.87e2	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.87e4	85 30		sta $30				sta 	codePtr
.87e6	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.87e8	85 31		sta $31				sta 	codePtr+1
.87ea	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.87ed	c9 80		cmp #$80			cmp 	#KWC_EOL
.87ef	f0 dd		beq $87ce			beq 	WarmStart
.87f1	20 ff 8d	jsr $8dff			jsr 	RUNCodePointerLine 			; execute that line.
.87f4	80 d8		bra $87ce			bra 	WarmStart
.87f6					_WSEditCode:
.87f6	20 a9 87	jsr $87a9			jsr 	EditProgramCode
.87f9	20 67 88	jsr $8867			jsr 	ClearCommand
.87fc	80 d0		bra $87ce			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.87fe					AssembleCommand:
.87fe	a2 00		ldx #$00			ldx 	#0
.8800	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; start address
.8803	ad 08 04	lda $0408			lda 	NSMantissa0
.8806	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8809	ad 10 04	lda $0410			lda 	NSMantissa1
.880c	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.880f	20 78 a5	jsr $a578			jsr 	CheckComma
.8812	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; options
.8815	ad 08 04	lda $0408			lda 	NSMantissa0
.8818	8d a0 04	sta $04a0			sta 	AssemblerControl
.881b	60		rts				rts
.881c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.881d					AssertCommand:
.881d	a2 00		ldx #$00			ldx 	#0
.881f	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; the assert test
.8822	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; exit if result is non zero.
.8825	d0 05		bne $882c			bne 	_ACExit
.8827	a9 0a		lda #$0a		lda	#10
.8829	4c 37 92	jmp $9237		jmp	ErrorHandler
.882c					_ACExit:
.882c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.882d					CallCommand:
.882d	a2 00		ldx #$00			ldx 	#0
.882f	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.8832					_CCClear
.8832	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8833	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.8836	e0 04		cpx #$04			cpx 	#4
.8838	d0 f8		bne $8832			bne 	_CCClear
.883a	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.883c					_CCCParam:
.883c	b1 30		lda ($30),y			lda 	(codePtr),y
.883e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8840	d0 09		bne $884b			bne 	_CCCRun6502
.8842	c8		iny				iny 								; skip comma
.8843	e8		inx				inx	 								; next level
.8844	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8847	e0 03		cpx #$03			cpx 	#3
.8849	90 f1		bcc $883c			bcc 	_CCCParam 					; done all 3 ?
.884b					_CCCRun6502:
.884b	5a		phy				phy 								; save position
.884c	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.884f	85 37		sta $37				sta 	zTemp0+1
.8851	ad 08 04	lda $0408			lda 	NSMantissa0
.8854	85 36		sta $36				sta 	zTemp0
.8856	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8859	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.885c	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.885f	20 64 88	jsr $8864			jsr 	_CCCZTemp0 					; call zTemp0
.8862	7a		ply				ply 								; restore position and exit
.8863	60		rts				rts
.8864					_CCCZTemp0:
.8864	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8867					ClearCommand:
.8867	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8869	85 36		sta $36				sta 	0+zTemp0
.886b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.886d	85 37		sta $37				sta 	1+zTemp0
.886f					_ClearZeroLoop:
.886f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8871	f0 24		beq $8897			beq 	_ClearZeroEnd
.8873	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8875	a9 00		lda #$00			lda 	#0
.8877					_ClearOneVariable:
.8877	91 36		sta ($36),y			sta 	(zTemp0),y
.8879	c8		iny				iny
.887a	c0 08		cpy #$08			cpy 	#8
.887c	d0 f9		bne $8877			bne 	_ClearOneVariable
.887e	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8880	b1 36		lda ($36),y			lda 	(zTemp0),y
.8882	c9 18		cmp #$18			cmp 	#NSTProcedure
.8884	d0 04		bne $888a			bne 	_ClearNotProcedure
.8886	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8888	91 36		sta ($36),y			sta 	(zTemp0),y
.888a					_ClearNotProcedure:
.888a	18		clc				clc 								; go to the next variable
.888b	b2 36		lda ($36)			lda 	(zTemp0)
.888d	65 36		adc $36				adc 	zTemp0
.888f	85 36		sta $36				sta 	zTemp0
.8891	90 dc		bcc $886f			bcc 	_ClearZeroLoop
.8893	e6 37		inc $37				inc 	zTemp0+1
.8895	80 d8		bra $886f			bra 	_ClearZeroLoop
.8897					_ClearZeroEnd:
.8897	18		clc				clc
.8898	a5 36		lda $36				lda 	zTemp0
.889a	69 01		adc #$01			adc 	#1
.889c	8d 8c 04	sta $048c			sta 	lowMemPtr
.889f	a5 37		lda $37				lda 	zTemp0+1
.88a1	69 00		adc #$00			adc 	#0
.88a3	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.88a6	20 08 9f	jsr $9f08			jsr 	StackReset
.88a9	20 57 ae	jsr $ae57			jsr 	StringSystemInitialise
.88ac	20 57 91	jsr $9157			jsr 	ProcedureScan
.88af	20 bb 8d	jsr $8dbb			jsr 	Command_Restore
.88b2	9c 9e 04	stz $049e			stz 	AssemblerAddress
.88b5	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.88b8	9c a0 04	stz $04a0			stz 	AssemblerControl
.88bb	20 fe 9a	jsr $9afe			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.88be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88bf					Command_Data:
.88bf	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.88c1	a2 80		ldx #$80			ldx 	#KWC_EOL
.88c3	20 a9 91	jsr $91a9			jsr 	ScanForward
.88c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88c7					DimCommand:
.88c7	b1 30		lda ($30),y			lda 	(codePtr),y
.88c9	29 c0		and #$c0			and 	#$C0
.88cb	c9 40		cmp #$40			cmp 	#$40
.88cd	d0 7a		bne $8949			bne 	_DCSyntax
.88cf	b1 30		lda ($30),y			lda 	(codePtr),y
.88d1	18		clc				clc
.88d2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88d4	85 3f		sta $3f				sta 	zaTemp+1
.88d6	c8		iny				iny
.88d7	b1 30		lda ($30),y			lda 	(codePtr),y
.88d9	c8		iny				iny
.88da	85 3e		sta $3e				sta 	zaTemp
.88dc	5a		phy				phy
.88dd	a0 02		ldy #$02			ldy 	#2 						; read type byte
.88df	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88e1	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88e3	c9 18		cmp #$18			cmp 	#NSTProcedure
.88e5	f0 62		beq $8949			beq 	_DCSyntax
.88e7	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88e9	29 04		and #$04			and 	#NSBIsArray
.88eb	f0 64		beq $8951			beq 	_DCType
.88ed	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88ef	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88f1	d0 59		bne $894c			bne 	_DCRedefine
.88f3	7a		ply				ply
.88f4	20 54 89	jsr $8954			jsr 	_DCGetSize 				; get array size, check it.
.88f7	5a		phy				phy
.88f8	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88fa	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88fc	7a		ply				ply 							; is there a second (e.g. ,x)
.88fd	b1 30		lda ($30),y			lda 	(codePtr),y
.88ff	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8901	d0 0a		bne $890d			bne 	_DCOneDimension
.8903	c8		iny				iny 							; skip comma
.8904	20 54 89	jsr $8954			jsr 	_DCGetSize 				; get 2nd array size
.8907	5a		phy				phy
.8908	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.890a	91 3e		sta ($3e),y			sta 	(zaTemp),y
.890c	7a		ply				ply
.890d					_DCOneDimension:
.890d	5a		phy				phy 							; save position
.890e	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8910	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8912	aa		tax				tax
.8913	c8		iny				iny
.8914	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8916	e8		inx				inx 							; bump them.
.8917	1a		inc a				inc 	a
.8918	20 f2 a9	jsr $a9f2			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.891b	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.891d	29 e0		and #$e0			and 	#$E0
.891f	d0 23		bne $8944			bne 	_DCSize
.8921	a0 02		ldy #$02			ldy 	#2 						; get base type
.8923	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8925	20 62 89	jsr $8962			jsr 	ScaleByBaseType 		; scale by base type
.8928	a5 36		lda $36				lda 	zTemp0
.892a	a6 37		ldx $37				ldx 	zTemp0+1
.892c	20 c0 9a	jsr $9ac0			jsr 	AllocateXABytes 		; allocate memory
.892f	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8931	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8933	c8		iny				iny
.8934	8a		txa				txa
.8935	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8937	7a		ply				ply 							; get position back
.8938	20 70 a5	jsr $a570			jsr 	CheckRightBracket 		; check )
.893b	b1 30		lda ($30),y			lda 	(codePtr),y
.893d	c8		iny				iny 							; consume in case
.893e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8940	f0 85		beq $88c7			beq 	DimCommand
.8942	88		dey				dey 							; undo consume
.8943	60		rts				rts
.8944					_DCSize:
.8944	a9 16		lda #$16		lda	#22
.8946	4c 37 92	jmp $9237		jmp	ErrorHandler
.8949					_DCSyntax:
.8949	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.894c					_DCRedefine:
.894c	a9 15		lda #$15		lda	#21
.894e	4c 37 92	jmp $9237		jmp	ErrorHandler
.8951					_DCType:
.8951	4c 60 ab	jmp $ab60			jmp 	TypeError
.8954					_DCGetSize:
.8954	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8956	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 	; get array dimension
.8959	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.895b	f0 e7		beq $8944			beq 	_DCSize
.895d	c9 fe		cmp #$fe			cmp 	#254
.895f	f0 e3		beq $8944			beq 	_DCSize
.8961	60		rts				rts
.8962					ScaleByBaseType:
.8962	29 10		and #$10			and 	#NSBIsString 			; is it string
.8964	d0 19		bne $897f			bne 	_SBBTString
.8966	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8968	48		pha				pha
.8969	a5 36		lda $36				lda 	zTemp0
.896b	48		pha				pha
.896c	06 36		asl $36				asl 	zTemp0 					; x 2
.896e	26 37		rol $37				rol 	zTemp0+1
.8970	06 36		asl $36				asl 	zTemp0 					; x 4
.8972	26 37		rol $37				rol 	zTemp0+1
.8974	68		pla				pla 							; add stacked value = x 5
.8975	65 36		adc $36				adc 	zTemp0
.8977	85 36		sta $36				sta 	zTemp0
.8979	68		pla				pla
.897a	65 37		adc $37				adc 	zTemp0+1
.897c	85 37		sta $37				sta 	zTemp0+1
.897e	60		rts				rts
.897f					_SBBTString:
.897f	06 36		asl $36				asl 	zTemp0
.8981	26 37		rol $37				rol 	zTemp0+1
.8983	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8984					EndCommand:
.8984	4c ce 87	jmp $87ce			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8987					ForCommand:
.8987	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8989	20 a3 9e	jsr $9ea3			jsr 	StackOpen
.898c	a2 00		ldx #$00			ldx 	#0
.898e	20 11 99	jsr $9911			jsr 	EvaluateTerm
.8991	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8994	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8996	d0 49		bne $89e1			bne		_FCError
.8998	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.899a	20 80 a5	jsr $a580			jsr 	CheckNextA
.899d	e8		inx				inx
.899e	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; <from> in +1
.89a1	b1 30		lda ($30),y			lda 	(codePtr),y
.89a3	c8		iny				iny 								; consume it
.89a4	48		pha				pha 								; save on stack for later
.89a5	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.89a7	f0 04		beq $89ad			beq 	_FCNoSyntax
.89a9	c9 b0		cmp #$b0			cmp 	#KWD_TO
.89ab	d0 37		bne $89e4			bne 	_FCSyntaxError
.89ad					_FCNoSyntax:
.89ad	e8		inx				inx
.89ae	20 66 9d	jsr $9d66			jsr 	EvaluateInteger
.89b1	20 e7 9e	jsr $9ee7			jsr 	STKSaveCodePosition 		; save loop back position
.89b4	68		pla				pla 								; restore DOWNTO or TO
.89b5	5a		phy				phy 								; save Y on the stack
.89b6	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89b8	f0 02		beq $89bc			beq 	_FCNotDownTo
.89ba	a9 02		lda #$02			lda 	#2
.89bc					_FCNotDownTo:
.89bc	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89bd	a0 10		ldy #$10			ldy 	#16
.89bf	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89c1	a0 06		ldy #$06			ldy 	#6
.89c3	ad 08 04	lda $0408			lda 	NSMantissa0
.89c6	91 34		sta ($34),y			sta 	(basicStack),y
.89c8	ad 10 04	lda $0410			lda 	NSMantissa1
.89cb	c8		iny				iny
.89cc	91 34		sta ($34),y			sta 	(basicStack),y
.89ce	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89d0	a2 01		ldx #$01			ldx 	#1
.89d2	20 e7 89	jsr $89e7			jsr 	FCIntegerToStack
.89d5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89d7	a2 02		ldx #$02			ldx 	#2
.89d9	20 e7 89	jsr $89e7			jsr 	FCIntegerToStack
.89dc	20 07 8a	jsr $8a07			jsr 	CopyIndexToReference
.89df	7a		ply				ply 								; restore position
.89e0	60		rts				rts
.89e1					_FCError:
.89e1	4c 60 ab	jmp $ab60			jmp 	TypeError
.89e4					_FCSyntaxError:
.89e4	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.89e7					FCIntegerToStack:
.89e7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.89ea	10 03		bpl $89ef			bpl	 	_FCNotNegative
.89ec	20 a4 9d	jsr $9da4			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89ef					_FCNotNegative:
.89ef	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89f2	91 34		sta ($34),y			sta 	(basicStack),y
.89f4	c8		iny				iny
.89f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.89f8	91 34		sta ($34),y			sta 	(basicStack),y
.89fa	c8		iny				iny
.89fb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.89fe	91 34		sta ($34),y			sta 	(basicStack),y
.8a00	c8		iny				iny
.8a01	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a04	91 34		sta ($34),y			sta 	(basicStack),y
.8a06	60		rts				rts
.8a07					CopyIndexToReference:
.8a07	5a		phy				phy
.8a08	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a0a	38		sec				sec 								; (because we copy from offset 8)
.8a0b	b1 34		lda ($34),y			lda 	(basicStack),y
.8a0d	e9 08		sbc #$08			sbc 	#8
.8a0f	85 36		sta $36				sta 	zTemp0
.8a11	c8		iny				iny
.8a12	b1 34		lda ($34),y			lda 	(basicStack),y
.8a14	e9 00		sbc #$00			sbc 	#0
.8a16	85 37		sta $37				sta 	zTemp0+1
.8a18	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a1a	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a1c	b1 34		lda ($34),y			lda 	(basicStack),y
.8a1e	0a		asl a				asl 	a 							; into carry
.8a1f	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a21	90 14		bcc $8a37			bcc 	_CITRNormal
.8a23	38		sec				sec
.8a24					_CITRNegative:
.8a24	a9 00		lda #$00			lda 	#0
.8a26	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a28	91 36		sta ($36),y			sta 	(zTemp0),y
.8a2a	c8		iny				iny
.8a2b	ca		dex				dex
.8a2c	d0 f6		bne $8a24			bne 	_CITRNegative
.8a2e	88		dey				dey 								; look at MSB of mantissa
.8a2f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a31	09 80		ora #$80			ora 	#$80
.8a33	91 36		sta ($36),y			sta 	(zTemp0),y
.8a35	7a		ply				ply
.8a36	60		rts				rts
.8a37					_CITRNormal:
.8a37	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a39	91 36		sta ($36),y			sta 	(zTemp0),y
.8a3b	c8		iny				iny
.8a3c	ca		dex				dex
.8a3d	d0 f8		bne $8a37			bne 	_CITRNormal
.8a3f	7a		ply				ply 								; and exit.
.8a40	60		rts				rts
.8a41					NextCommand:
.8a41	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a43	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a45	20 cf 9e	jsr $9ecf			jsr 	StackCheckFrame
.8a48	5a		phy				phy
.8a49	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a4b	b1 34		lda ($34),y			lda 	(basicStack),y
.8a4d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a4f	30 02		bmi $8a53			bmi 	_NCStepNeg
.8a51	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a53					_NCStepNeg:
.8a53	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a55	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a57	18		clc				clc
.8a58					_NCBump:
.8a58	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a5a	91 34		sta ($34),y			sta 	(basicStack),y
.8a5c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a5e	c8		iny				iny 								; next byte
.8a5f	ca		dex				dex 								; do four times
.8a60	d0 f6		bne $8a58			bne 	_NCBump
.8a62	20 07 8a	jsr $8a07			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a65	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a67	b1 34		lda ($34),y			lda 	(basicStack),y
.8a69	0a		asl a				asl 	a 							; sign bit to carry
.8a6a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a6c	85 38		sta $38				sta 	zTemp1
.8a6e	90 02		bcc $8a72			bcc 	_NCCompRev 					; use if step is +ve
.8a70	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a72					_NCCompRev:
.8a72	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a74	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a76	85 39		sta $39				sta 	zTemp1+1
.8a78	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a7a	38		sec				sec
.8a7b					_NCCompare:
.8a7b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a7d	b1 34		lda ($34),y			lda 	(basicStack),y
.8a7f	a4 39		ldy $39				ldy 	zTemp1+1
.8a81	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a83	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a85	e6 39		inc $39				inc 	zTemp1+1
.8a87	ca		dex				dex 								; do it 4 times.
.8a88	d0 f1		bne $8a7b			bne 	_NCCompare
.8a8a	50 02		bvc $8a8e			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a8c	49 80		eor #$80			eor 	#$80
.8a8e					_NCNoOverflow:
.8a8e	7a		ply				ply 								; restore Y position
.8a8f	0a		asl a				asl 	a 							; is bit 7 set.
.8a90	90 04		bcc $8a96			bcc 	_NCLoopback 				; if no , >= so loop back
.8a92	20 c1 9e	jsr $9ec1			jsr 	StackClose 					; exit the loop
.8a95	60		rts				rts
.8a96					_NCLoopBack:
.8a96	20 f8 9e	jsr $9ef8			jsr 	STKLoadCodePosition 		; loop back
.8a99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a9a					Command_GOSUB:
.8a9a	a2 00		ldx #$00			ldx 	#0
.8a9c	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a9f	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8aa1	20 a3 9e	jsr $9ea3			jsr 	StackOpen 					; create frame
.8aa4	20 e7 9e	jsr $9ee7			jsr 	STKSaveCodePosition 		; save current position
.8aa7	4c bd 8a	jmp $8abd			jmp 	GotoStackX
.8aaa					Command_RETURN:
.8aaa	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8aac	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8aae	20 cf 9e	jsr $9ecf			jsr 	StackCheckFrame
.8ab1	20 f8 9e	jsr $9ef8			jsr 	STKLoadCodePosition 		; restore code position
.8ab4	20 c1 9e	jsr $9ec1			jsr 	StackClose
.8ab7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ab8					GotoCommand:
.8ab8	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8aba	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.8abd					GotoStackX:
.8abd	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ac0	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ac1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8ac4	fa		plx				plx
.8ac5	20 4e 9e	jsr $9e4e			jsr 	MemorySearch 				; transfer to line number AX.
.8ac8	90 05		bcc $8acf			bcc 	_GotoError 					; not found, off end.
.8aca	d0 03		bne $8acf			bne 	_GotoError 					; not found exactly
.8acc	4c f8 8d	jmp $8df8			jmp 	RunNewLine 					; and go straight to new line code.
.8acf					_GotoError:
.8acf	a9 0d		lda #$0d		lda	#13
.8ad1	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ad4					IfCommand:
.8ad4	a2 00		ldx #$00			ldx 	#0 							; If what.
.8ad6	20 43 9d	jsr $9d43			jsr 	EvaluateNumber
.8ad9	b1 30		lda ($30),y			lda 	(codePtr),y
.8adb	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8add	d0 0a		bne $8ae9			bne 	_IFStructured
.8adf	c8		iny				iny 								; consume THEN
.8ae0	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; is it zero
.8ae3	f0 01		beq $8ae6			beq 	_IfFail 					; if fail, go to next line
.8ae5	60		rts				rts 								; if THEN just continue
.8ae6					_IfFail:
.8ae6	4c 5d 8e	jmp $8e5d			jmp 	EOLCommand
.8ae9					_IfStructured:
.8ae9	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; is it zero
.8aec	d0 07		bne $8af5			bne 	_IfExit 					; if not, then continue normally.
.8aee	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8af0	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8af2	20 a9 91	jsr $91a9			jsr 	ScanForward 				; and run from there/
.8af5					_IfExit:
.8af5	60		rts				rts
.8af6					ElseCode:
.8af6	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8af8	aa		tax				tax 								; so just go to the structure exit
.8af9	20 a9 91	jsr $91a9			jsr 	ScanForward
.8afc	60		rts				rts
.8afd					EndIf:
.8afd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8afe					LetCommand:
.8afe	a2 00		ldx #$00			ldx 	#0
.8b00	b1 30		lda ($30),y			lda 	(codePtr),y
.8b02	c9 10		cmp #$10			cmp 	#KWD_AT
.8b04	d0 16		bne $8b1c			bne 	_LCStandard
.8b06	c8		iny				iny 								; skip equal
.8b07	20 11 99	jsr $9911			jsr 	EvaluateTerm 				; get a number
.8b0a	20 55 97	jsr $9755			jsr 	Dereference 				; dereference it
.8b0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8b10	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b12	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8b15	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b17	d0 10		bne $8b29			bne 	_LCMain
.8b19	4c 60 ab	jmp $ab60			jmp 	TypeError 					; was a reference before.
.8b1c					_LCStandard:
.8b1c	ad 28 96	lda $9628			lda 	PrecedenceLevel+"*"			; precedence > this
.8b1f	20 42 96	jsr $9642			jsr 	EvaluateExpressionAtPrecedence
.8b22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8b25	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b27	f0 0e		beq $8b37			beq 	_LetGoProc 					; it's a procedure call.
.8b29					_LCMain:
.8b29	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b2b	20 80 a5	jsr $a580			jsr 	CheckNextA
.8b2e	e8		inx				inx 								; RHS
.8b2f	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue
.8b32	ca		dex				dex
.8b33	20 3a 8b	jsr $8b3a			jsr 	AssignVariable
.8b36	60		rts				rts
.8b37					_LetGoProc:
.8b37	4c d3 8c	jmp $8cd3			jmp 	CallProcedure
.8b3a					AssignVariable:
.8b3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8b3d	48		pha				pha 								; save a copy
.8b3e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8b41	29 10		and #$10			and 	#NSBIsString
.8b43	d0 0b		bne $8b50			bne 	_ASError
.8b45	68		pla				pla 								; get back
.8b46	29 10		and #$10			and 	#NSBIsString 				; check type
.8b48	d0 03		bne $8b4d			bne 	_ASString
.8b4a	4c 7d 96	jmp $967d			jmp 	AssignNumber
.8b4d					_ASString:
.8b4d	4c eb 96	jmp $96eb			jmp 	AssignString
.8b50					_ASError:
.8b50	4c 60 ab	jmp $ab60			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8b53					Command_List:
.8b53	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8b56	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8b59	a9 ff		lda #$ff			lda 	#$FF
.8b5b	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8b5e	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8b61	b1 30		lda ($30),y			lda 	(codePtr),y
.8b63	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b65	f0 1e		beq $8b85			beq 	_CLSecond
.8b67	20 e3 8b	jsr $8be3			jsr 	CLIsDigit 					; if not digit, list all
.8b6a	b0 24		bcs $8b90			bcs 	_CLStart
.8b6c	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8b6e	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.8b71	b1 30		lda ($30),y			lda 	(codePtr),y
.8b73	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b75	f0 0e		beq $8b85			beq 	_CLSecond 					; if so go get it
.8b77	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8b7a	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8b7d	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8b80	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8b83	80 0b		bra $8b90			bra 	_CLStart
.8b85					_CLSecond:
.8b85	c8		iny				iny 								; consume comma
.8b86	20 e3 8b	jsr $8be3			jsr 	CLIsDigit 					; digit found
.8b89	b0 05		bcs $8b90			bcs 	_CLStart 					; if not, continue listing
.8b8b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8b8d	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.8b90					_CLStart
.8b90	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b92	85 30		sta $30				sta 	codePtr
.8b94	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b96	85 31		sta $31				sta 	codePtr+1
.8b98					_CLLoop:
.8b98	20 3a ad	jsr $ad3a			jsr 	EXTBreakCheck 				; break check
.8b9b	f0 30		beq $8bcd			beq 	_CLExit
.8b9d	b2 30		lda ($30)			lda 	(codePtr)
.8b9f	f0 2c		beq $8bcd			beq 	_CLExit
.8ba1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ba3	20 d0 8b	jsr $8bd0			jsr 	CLCompareLineNo
.8ba6	90 18		bcc $8bc0			bcc 	_CLNext
.8ba8	a2 07		ldx #$07			ldx 	#7
.8baa	20 d0 8b	jsr $8bd0			jsr 	CLCompareLineNo
.8bad	f0 02		beq $8bb1			beq 	_CLDoThisOne
.8baf	b0 0f		bcs $8bc0			bcs 	_CLNext
.8bb1					_CLDoThisOne:
.8bb1	20 05 90	jsr $9005			jsr 	ListConvertLine 			; convert line into token Buffer
.8bb4	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8bb6	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8bb8	20 90 92	jsr $9290			jsr 	PrintStringXA
.8bbb	a9 0d		lda #$0d			lda 	#13 						; new line
.8bbd	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.8bc0					_CLNext:
.8bc0	18		clc				clc
.8bc1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8bc3	65 30		adc $30				adc 	codePtr
.8bc5	85 30		sta $30				sta 	codePtr
.8bc7	90 02		bcc $8bcb			bcc 	_CREExit
.8bc9	e6 31		inc $31				inc 	codePtr+1
.8bcb					_CREExit:
.8bcb	80 cb		bra $8b98			bra 	_CLLoop
.8bcd					_CLExit:
.8bcd	4c ce 87	jmp $87ce			jmp 	WarmStart
.8bd0					CLCompareLineNo:
.8bd0	38		sec				sec
.8bd1	a0 01		ldy #$01			ldy 	#1
.8bd3	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd5	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8bd8	85 36		sta $36				sta 	zTemp0
.8bda	c8		iny				iny
.8bdb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bdd	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8be0	05 36		ora $36				ora 	zTemp0
.8be2	60		rts				rts
.8be3					CLIsDigit:
.8be3	b1 30		lda ($30),y			lda 	(codePtr),y
.8be5	c9 30		cmp #$30			cmp 	#"0"
.8be7	90 03		bcc $8bec			bcc	 	_CLIDExitFalse
.8be9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8beb	60		rts				rts
.8bec					_CLIDExitFalse:
.8bec	38		sec				sec
.8bed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8bee					Command_LOCAL:
.8bee	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8bf0	20 fc 8b	jsr $8bfc			jsr 	LocaliseNextTerm 			; convert term to a local.
.8bf3	b1 30		lda ($30),y			lda 	(codePtr),y
.8bf5	c8		iny				iny
.8bf6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bf8	f0 f4		beq $8bee			beq 	Command_LOCAL
.8bfa	88		dey				dey 								; unpick pre-get
.8bfb	60		rts				rts
.8bfc					LocaliseNextTerm:
.8bfc	20 11 99	jsr $9911			jsr 	EvaluateTerm 				; evaluate the term
.8bff	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c02	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c04	f0 69		beq $8c6f			beq		_LNTError
.8c06	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c09	85 36		sta $36				sta 	zTemp0
.8c0b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c0e	85 37		sta $37				sta  	zTemp0+1
.8c10	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c13	29 10		and #$10			and 	#NSBIsString
.8c15	d0 22		bne $8c39			bne 	_LNTPushString
.8c17	5a		phy				phy
.8c18	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c1a					_LNTPushNumLoop:
.8c1a	b1 36		lda ($36),y			lda		(zTemp0),y
.8c1c	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c1f	a9 00		lda #$00			lda 	#0
.8c21	91 36		sta ($36),y			sta 	(zTemp0),y
.8c23	c8		iny				iny
.8c24	c0 05		cpy #$05			cpy 	#5
.8c26	d0 f2		bne $8c1a			bne 	_LNTPushNumLoop
.8c28	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c2a	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c2d	a5 37		lda $37				lda 	zTemp0+1
.8c2f	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c32	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c34	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c37	7a		ply				ply
.8c38	60		rts				rts
.8c39					_LNTPushString:
.8c39	5a		phy				phy
.8c3a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c3c	85 38		sta $38				sta 	zTemp1
.8c3e	a0 01		ldy #$01			ldy 	#1
.8c40	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c42	85 39		sta $39				sta 	zTemp1+1
.8c44	a0 00		ldy #$00			ldy 	#0 							; output string
.8c46	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8c48	f0 0a		beq $8c54			beq 	_LNTStringOut
.8c4a					_LNTPushStrLoop:
.8c4a	b1 38		lda ($38),y			lda 	(zTemp1),y
.8c4c	f0 06		beq $8c54			beq 	_LNTStringOut
.8c4e	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c51	c8		iny				iny
.8c52	80 f6		bra $8c4a			bra 	_LNTPushStrLoop
.8c54					_LNTStringOut:
.8c54	98		tya				tya									; output length
.8c55	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c58	a9 00		lda #$00			lda 	#0 							; clear original string.
.8c5a	92 38		sta ($38)			sta 	(zTemp1)
.8c5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8c5f	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c62	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c65	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c68	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8c6a	20 81 9e	jsr $9e81			jsr 	StackPushByte
.8c6d	7a		ply				ply
.8c6e	60		rts				rts
.8c6f					_LNTError:
.8c6f	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.a517					LocalPopValue:
.a517	20 9a 9e	jsr $9e9a			jsr 	StackPopByte
.a51a	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a51c	d0 17		bne $a535			bne 	_LPVString
.a51e	20 9a 9e	jsr $9e9a			jsr 	StackPopByte 				; address
.a521	85 37		sta $37				sta 	zTemp0+1
.a523	20 9a 9e	jsr $9e9a			jsr 	StackPopByte
.a526	85 36		sta $36				sta 	zTemp0
.a528	5a		phy				phy
.a529	a0 04		ldy #$04			ldy 	#4 							; copy back
.a52b					_LPVNumberCopy:
.a52b	20 9a 9e	jsr $9e9a			jsr 	StackPopByte
.a52e	91 36		sta ($36),y			sta 	(zTemp0),y
.a530	88		dey				dey
.a531	10 f8		bpl $a52b			bpl 	_LPVNumberCopy
.a533	7a		ply				ply 								; and complete
.a534	60		rts				rts
.a535					_LPVString:
.a535	20 9a 9e	jsr $9e9a			jsr 	StackPopByte 				; address of record => zTemp0
.a538	85 37		sta $37				sta 	zTemp0+1
.a53a	20 9a 9e	jsr $9e9a			jsr 	StackPopByte
.a53d	85 36		sta $36				sta 	zTemp0
.a53f	5a		phy				phy
.a540	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a542	85 38		sta $38				sta 	zTemp1
.a544	a0 01		ldy #$01			ldy 	#1
.a546	b1 36		lda ($36),y			lda 	(zTemp0),y
.a548	85 39		sta $39				sta 	zTemp1+1
.a54a	20 9a 9e	jsr $9e9a			jsr 	StackPopByte 				; # to get => y
.a54d	a8		tay				tay
.a54e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a550	f0 0e		beq $a560			beq 	_LPVStringCopied
.a552	a9 00		lda #$00			lda 	#0 							; NULL on end
.a554	91 38		sta ($38),y			sta 	(zTemp1),y
.a556					_LPVStringCopy:
.a556	88		dey				dey
.a557	30 07		bmi $a560			bmi 	_LPVStringCopied
.a559	20 9a 9e	jsr $9e9a			jsr 	StackPopByte
.a55c	91 38		sta ($38),y			sta 	(zTemp1),y
.a55e	80 f6		bra $a556			bra 	_LPVStringCopy
.a560					_LPVStringCopied:
.a560	fa		plx				plx
.a561	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8c72					NewCommand:
.8c72	20 2c 9e	jsr $9e2c			jsr 	MemoryNew
.8c75	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8c78	20 67 88	jsr $8867			jsr 	ClearCommand 				; clear everything.
.8c7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8c7c					Command_Print:
.8c7c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8c7d					_CPLoop:
.8c7d	08		php				php 								; save last action flag
.8c7e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c80	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8c82	f0 46		beq $8cca			beq 	_CPExit
.8c84	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8c86	f0 42		beq $8cca			beq 	_CPExit
.8c88	68		pla				pla 								; throw last action flag
.8c89	b1 30		lda ($30),y			lda 	(codePtr),y
.8c8b	c8		iny				iny
.8c8c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8c8e	f0 37		beq $8cc7			beq 	_CPContinueWithSameLine
.8c90	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8c92	f0 2e		beq $8cc2			beq 	_CPTab
.8c94	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8c96	f0 26		beq $8cbe			beq 	_CPNewLine
.8c98	88		dey				dey 								; undo the get.
.8c99	a2 00		ldx #$00			ldx 	#0
.8c9b	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value into slot 0
.8c9e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8ca1	29 10		and #$10			and 	#NSBIsString
.8ca3	f0 0b		beq $8cb0			beq 	_CPNumber
.8ca5	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ca8	ad 08 04	lda $0408			lda 	NSMantissa0
.8cab	20 90 92	jsr $9290			jsr 	PrintStringXA
.8cae	80 cc		bra $8c7c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8cb0					_CPNumber:
.8cb0	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8cb2	20 10 9c	jsr $9c10			jsr 	ConvertNumberToString 		; convert to string
.8cb5	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8cb7	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8cb9	20 90 92	jsr $9290			jsr 	PrintStringXA
.8cbc	80 be		bra $8c7c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8cbe					_CPNewLine:
.8cbe	a9 0d		lda #$0d			lda 	#13
.8cc0	80 02		bra $8cc4			bra 	_CPPrintChar
.8cc2					_CPTab:
.8cc2	a9 09		lda #$09			lda 	#9 							; print TAB
.8cc4					_CPPrintChar:
.8cc4	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.8cc7					_CPContinueWithSameLine:
.8cc7	38		sec				sec 								; loop round with carry set, which
.8cc8	80 b3		bra $8c7d			bra 	_CPLoop 					; will inhibit final CR
.8cca					_CPExit:
.8cca	28		plp				plp 								; get last action flag
.8ccb	b0 05		bcs $8cd2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ccd	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ccf	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.8cd2					_CPExit2:
.8cd2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8cd3					CallProcedure:
.8cd3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8cd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd7	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8cd9	f0 0c		beq $8ce7			beq 	_CPEndParam
.8cdb					_CPParamLoop:
.8cdb	20 40 96	jsr $9640			jsr 	EvaluateExpression 			; get parameter onto stack
.8cde	e8		inx				inx 								; bump next stack
.8cdf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce1	c8		iny				iny
.8ce2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8ce4	f0 f5		beq $8cdb			beq 	_CPParamLoop
.8ce6	88		dey				dey 								; unpick.
.8ce7					_CPEndParam:
.8ce7	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8cea	c8		iny				iny									; skip right bracket
.8ceb	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ced	20 a3 9e	jsr $9ea3			jsr 	StackOpen
.8cf0	20 e7 9e	jsr $9ee7			jsr 	STKSaveCodePosition 		; save loop position
.8cf3	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8cf6	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8cf8	ad 10 04	lda $0410			lda 	NSMantissa1
.8cfb	85 37		sta $37				sta 	zTemp0+1
.8cfd	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8cff	b2 36		lda ($36)			lda 	(zTemp0)
.8d01	85 30		sta $30				sta 	safePtr
.8d03	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d05	85 31		sta $31				sta 	safePtr+1
.8d07	c8		iny				iny
.8d08	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d0a	85 32		sta $32				sta 	safePtr+2
.8d0c	c8		iny				iny
.8d0d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d0f	85 33		sta $33				sta 	safePtr+3
.8d11	c8		iny				iny 								; get Y offset -> Y
.8d12	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d14	a8		tay				tay
.8d15	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d17	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8d1a	f0 13		beq $8d2f			beq 	_ParamExit 					; if so, exit.
.8d1c					_ParamExtract:
.8d1c	ca		dex				dex 								; put a local term on the level before
.8d1d	20 fc 8b	jsr $8bfc			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d20	20 3a 8b	jsr $8b3a			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d23	e8		inx				inx 								; advance to next parameter to do.
.8d24	e8		inx				inx
.8d25	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8d28	f0 05		beq $8d2f			beq 	_ParamExit
.8d2a	20 78 a5	jsr $a578			jsr 	CheckComma 					; comma seperating parameters
.8d2d	80 ed		bra $8d1c			bra 	_ParamExtract
.8d2f					_ParamExit:
.8d2f	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; check )
.8d32	60		rts				rts 								; and continue from here
.a562					Command_ENDPROC:
.a562	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a564	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a566	20 cf 9e	jsr $9ecf			jsr 	StackCheckFrame
.a569	20 f8 9e	jsr $9ef8			jsr 	STKLoadCodePosition 		; restore code position
.a56c	20 c1 9e	jsr $9ec1			jsr 	StackClose
.a56f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d33					Command_Read:
.8d33	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d35	20 11 99	jsr $9911			jsr 	EvaluateTerm
.8d38	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d3b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d3d	f0 4a		beq $8d89			beq 	_CRSyntax 					; check reference (bit 0)
.8d3f	20 d2 8d	jsr $8dd2			jsr 	SwapDataCodePtrs 			; swap code and data
.8d42	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8d45	d0 20		bne $8d67			bne 	_CRContinueData
.8d47					_CRKeepSearching:
.8d47	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8d49	aa		tax				tax
.8d4a	20 a9 91	jsr $91a9			jsr 	ScanForward
.8d4d	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8d4f	f0 16		beq $8d67			beq 	_CRHaveData 				; found it
.8d51	18		clc				clc
.8d52	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d54	65 30		adc $30				adc 	codePtr
.8d56	85 30		sta $30				sta 	codePtr
.8d58	90 02		bcc $8d5c			bcc 	_CREExit
.8d5a	e6 31		inc $31				inc 	codePtr+1
.8d5c					_CREExit:
.8d5c	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8d5e	b2 30		lda ($30)			lda 	(codePtr)
.8d60	d0 e5		bne $8d47			bne 	_CRKeepSearching
.8d62	a9 0b		lda #$0b		lda	#11
.8d64	4c 37 92	jmp $9237		jmp	ErrorHandler
.8d67					_CRHaveData:
.8d67					_CRContinueData:
.8d67	a2 01		ldx #$01			ldx 	#1
.8d69	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8d6c	ca		dex				dex
.8d6d	20 3a 8b	jsr $8b3a			jsr		AssignVariable 				; do the assignment
.8d70	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8d73	b1 30		lda ($30),y			lda 	(codePtr),y
.8d75	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8d77	d0 04		bne $8d7d			bne 	_CRSwapBack
.8d79	c8		iny				iny 								; consume comma
.8d7a	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8d7d					_CRSwapBack:
.8d7d	20 d2 8d	jsr $8dd2			jsr 	SwapDataCodePtrs			; swap them back.
.8d80	b1 30		lda ($30),y			lda 	(codePtr),y
.8d82	c8		iny				iny
.8d83	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d85	f0 ac		beq $8d33			beq 	Command_Read 				; if so go round again.
.8d87	88		dey				dey 								; unpick get.
.8d88	60		rts				rts
.8d89					_CRSyntax:
.8d89	4c 56 ab	jmp $ab56			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8d8c					RemCommand:
.8d8c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8d90	d0 06		bne $8d98			bne 	_RMExit
.8d92	c8		iny				iny
.8d93	98		tya				tya
.8d94	38		sec				sec
.8d95	71 30		adc ($30),y			adc 	(codePtr),y
.8d97	a8		tay				tay
.8d98					_RMExit:
.8d98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8d99					Command_REPEAT:
.8d99	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8d9b	20 a3 9e	jsr $9ea3			jsr 	StackOpen
.8d9e	20 e7 9e	jsr $9ee7			jsr 	STKSaveCodePosition 		; save loop position
.8da1	60		rts				rts
.8da2					Command_UNTIL:
.8da2	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8da4	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8da6	20 cf 9e	jsr $9ecf			jsr 	StackCheckFrame
.8da9	a2 00		ldx #$00			ldx 	#0
.8dab	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; work out the number
.8dae	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; check if zero
.8db1	f0 04		beq $8db7			beq 	_CULoopBack 				; if so keep looping
.8db3	20 c1 9e	jsr $9ec1			jsr 	StackClose		 			; return
.8db6	60		rts				rts
.8db7					_CULoopBack:
.8db7	20 f8 9e	jsr $9ef8			jsr 	STKLoadCodePosition 		; loop back
.8dba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8dbb					Command_Restore:
.8dbb	20 d2 8d	jsr $8dd2			jsr 	SwapDataCodePtrs 			; swap code and data
.8dbe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dc0	85 30		sta $30				sta 	codePtr
.8dc2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dc4	85 31		sta $31				sta 	codePtr+1
.8dc6	20 d2 8d	jsr $8dd2			jsr 	SwapDataCodePtrs 			; put them back
.8dc9	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8dcb	8d 9b 04	sta $049b			sta 	dataPointer+4
.8dce	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8dd1	60		rts				rts
.8dd2					SwapDataCodePtrs:
.8dd2	da		phx				phx
.8dd3	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8dd5					_SDCPLoop:
.8dd5	b5 30		lda $30,x			lda 	safePtr,x
.8dd7	48		pha				pha
.8dd8	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8ddb	95 30		sta $30,x			sta 	safePtr,x
.8ddd	68		pla				pla
.8dde	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8de1	ca		dex				dex
.8de2	10 f1		bpl $8dd5			bpl 	_SDCPLoop
.8de4	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8de7	8c 9b 04	sty $049b			sty 	dataPointer+4
.8dea	a8		tay				tay
.8deb	fa		plx				plx
.8dec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8ded					CommandRUN:
.8ded	20 67 88	jsr $8867			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8df0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8df2	85 30		sta $30				sta 	codePtr
.8df4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8df6	85 31		sta $31				sta 	codePtr+1
.8df8					RUNNewLine:
.8df8	b2 30		lda ($30)			lda 	(codePtr)
.8dfa	f0 5e		beq $8e5a			beq 	CRNoProgram         		; no then END.
.8dfc	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8dfe	9a		txs				txs
.8dff					RUNCodePointerLine:
.8dff	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e01					_CRIncMainLoop:
.8e01	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e04	d0 05		bne $8e0b			bne 	_CRNoBreakCheck
.8e06	20 3a ad	jsr $ad3a			jsr 	EXTBreakCheck 				; break check
.8e09	f0 4a		beq $8e55			beq 	_CRBreak
.8e0b					_CRNoBreakCheck:
.8e0b	c8		iny				iny
.8e0c					_CRMainLoop:
.8e0c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8e11	10 10		bpl $8e23			bpl 	_CRNotKeyword
.8e13	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e15	b0 04		bcs $8e1b			bcs 	_CRIsKeyword
.8e17	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e19	b0 34		bcs $8e4f			bcs		_CRSyntaxError
.8e1b					_CRIsKeyword:
.8e1b	c8		iny				iny 								; consume command
.8e1c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e1d	aa		tax				tax 								; put in X for vector jump
.8e1e	20 52 8e	jsr $8e52			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e21	80 e9		bra $8e0c			bra 	_CRMainLoop 				; and loop round
.8e23					_CRNotKeyword:
.8e23	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e25	f0 da		beq $8e01			beq 	_CRIncMainLoop
.8e27	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e29	90 05		bcc $8e30			bcc 	_CRNotVariable
.8e2b					_CRGoLet:
.8e2b	20 fe 8a	jsr $8afe			jsr 	LetCommand
.8e2e	80 dc		bra $8e0c			bra 	_CRMainLoop
.8e30					_CRNotVariable:
.8e30	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e32	f0 f7		beq $8e2b			beq 	_CRGoLet
.8e34	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e36	f0 f3		beq $8e2b			beq 	_CRGoLet
.8e38	c9 21		cmp #$21			cmp 	#KWD_PLING
.8e3a	f0 ef		beq $8e2b			beq 	_CRGoLet
.8e3c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e3e	f0 09		beq $8e49			beq 	_CRGoRem
.8e40	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e42	d0 0b		bne $8e4f			bne 	_CRSyntaxError
.8e44	20 07 87	jsr $8707			jsr 	LabelHere
.8e47	80 c3		bra $8e0c			bra 	_CRMainLoop
.8e49					_CRGoRem:
.8e49	c8		iny				iny
.8e4a	20 8c 8d	jsr $8d8c			jsr 	RemCommand
.8e4d	80 bd		bra $8e0c			bra 	_CRMainLoop
.8e4f					_CRSyntaxError:
.8e4f	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.8e52					_CRCallVector0:
.8e52	7c fe 8e	jmp ($8efe,x)			jmp 	(VectorSet0,x)
.8e55					_CRBreak:
.8e55	a9 01		lda #$01		lda	#1
.8e57	4c 37 92	jmp $9237		jmp	ErrorHandler
.8e5a					CRNoProgram:
.8e5a	4c 84 89	jmp $8984			jmp 	EndCommand
.8e5d					EOLCommand:
.8e5d	18		clc				clc
.8e5e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e60	65 30		adc $30				adc 	codePtr
.8e62	85 30		sta $30				sta 	codePtr
.8e64	90 02		bcc $8e68			bcc 	_CREExit
.8e66	e6 31		inc $31				inc 	codePtr+1
.8e68					_CREExit:
.8e68	80 8e		bra $8df8			bra 	RunNewLine
.8e6a					Shift1Command:
.8e6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6c	c8		iny				iny
.8e6d	0a		asl a				asl 	a
.8e6e	aa		tax				tax
.8e6f	7c 60 8f	jmp ($8f60,x)			jmp 	(VectorSet1,x)
.8e72					Shift2Command:
.8e72	b1 30		lda ($30),y			lda 	(codePtr),y
.8e74	c8		iny				iny
.8e75	0a		asl a				asl 	a
.8e76	aa		tax				tax
.8e77	7c 78 8f	jmp ($8f78,x)			jmp 	(VectorSet2,x)
.8e7a					Unused1:
.8e7a					Unused2:
.8e7a					Unused3:
.8e7a					Unused4:
.8e7a	4c 56 ab	jmp $ab56			jmp 	SyntaxError
>8e7d							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8e7e					VectorSetPunc:
>8e7e	e1 93					.word	ShiftLeft                        ; $00 <<
>8e80	db 92					.word	BinaryCompareLessEqual           ; $01 <=
>8e82	d1 92					.word	BinaryCompareNotEqual            ; $02 <>
>8e84	56 ab					.word	SyntaxError                      ; $03 !!3
>8e86	56 ab					.word	SyntaxError                      ; $04 ><
>8e88	e5 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8e8a	e4 93					.word	ShiftRight                       ; $06 >>
>8e8c	56 ab					.word	SyntaxError                      ; $07 !!7
>8e8e	56 ab					.word	SyntaxError                      ; $08 !!8
>8e90	56 ab					.word	SyntaxError                      ; $09 !!9
>8e92	56 ab					.word	SyntaxError                      ; $0a !!10
>8e94	56 ab					.word	SyntaxError                      ; $0b !!11
>8e96	56 ab					.word	SyntaxError                      ; $0c !!12
>8e98	56 ab					.word	SyntaxError                      ; $0d !!13
>8e9a	56 ab					.word	SyntaxError                      ; $0e !!14
>8e9c	56 ab					.word	SyntaxError                      ; $0f !!15
>8e9e	56 ab					.word	SyntaxError                      ; $10 @
>8ea0	56 ab					.word	SyntaxError                      ; $11 !!17
>8ea2	56 ab					.word	SyntaxError                      ; $12 !!18
>8ea4	56 ab					.word	SyntaxError                      ; $13 [
>8ea6	89 a5					.word	IntegerDivide                    ; $14 \
>8ea8	56 ab					.word	SyntaxError                      ; $15 ]
>8eaa	6a 95					.word	EorInteger                       ; $16 ^
>8eac	56 ab					.word	SyntaxError                      ; $17 _
>8eae	56 ab					.word	SyntaxError                      ; $18 `
>8eb0	56 ab					.word	SyntaxError                      ; $19 !!25
>8eb2	56 ab					.word	SyntaxError                      ; $1a !!26
>8eb4	56 ab					.word	SyntaxError                      ; $1b {
>8eb6	24 95					.word	OraInteger                       ; $1c |
>8eb8	56 ab					.word	SyntaxError                      ; $1d }
>8eba	56 ab					.word	SyntaxError                      ; $1e ~
>8ebc	56 ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ebe	56 ab					.word	SyntaxError                      ; $20
>8ec0	b0 95					.word	WordIndirect                     ; $21 !
>8ec2	56 ab					.word	SyntaxError                      ; $22 "
>8ec4	56 ab					.word	SyntaxError                      ; $23 #
>8ec6	56 ab					.word	SyntaxError                      ; $24 $
>8ec8	d6 a5					.word	IntegerModulus                   ; $25 %
>8eca	de 94					.word	AndInteger                       ; $26 &
>8ecc	56 ab					.word	SyntaxError                      ; $27 '
>8ece	56 ab					.word	SyntaxError                      ; $28 (
>8ed0	56 ab					.word	SyntaxError                      ; $29 )
>8ed2	4b a6					.word	MulInteger                       ; $2a *
>8ed4	78 94					.word	AddInteger                       ; $2b +
>8ed6	56 ab					.word	SyntaxError                      ; $2c ,
>8ed8	b3 94					.word	SubInteger                       ; $2d -
>8eda	56 ab					.word	SyntaxError                      ; $2e .
>8edc	e2 a7					.word	FDivideCommand                   ; $2f /
>8ede	56 ab					.word	SyntaxError                      ; $30 0
>8ee0	56 ab					.word	SyntaxError                      ; $31 1
>8ee2	56 ab					.word	SyntaxError                      ; $32 2
>8ee4	56 ab					.word	SyntaxError                      ; $33 3
>8ee6	56 ab					.word	SyntaxError                      ; $34 4
>8ee8	56 ab					.word	SyntaxError                      ; $35 5
>8eea	56 ab					.word	SyntaxError                      ; $36 6
>8eec	56 ab					.word	SyntaxError                      ; $37 7
>8eee	56 ab					.word	SyntaxError                      ; $38 8
>8ef0	56 ab					.word	SyntaxError                      ; $39 9
>8ef2	56 ab					.word	SyntaxError                      ; $3a :
>8ef4	56 ab					.word	SyntaxError                      ; $3b ;
>8ef6	bd 92					.word	BinaryCompareLess                ; $3c <
>8ef8	b3 92					.word	BinaryCompareEqual               ; $3d =
>8efa	c7 92					.word	BinaryCompareGreater             ; $3e >
>8efc	d7 95					.word	ByteIndirect                     ; $3f ?
.8efe					VectorSet0:
>8efe	5d 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f00	6a 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f02	72 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f04	28 a9					.word	AbsUnary                         ; $83 ABS(
>8f06	a1 9a					.word	AllocUnary                       ; $84 ALLOC(
>8f08	38 a9					.word	AscUnary                         ; $85 ASC(
>8f0a	c1 9b					.word	ChrUnary                         ; $86 CHR$(
>8f0c	af 92					.word	UnaryFalse                       ; $87 FALSE
>8f0e	45 a9					.word	FracUnary                        ; $88 FRAC(
>8f10	5b a9					.word	IntUnary                         ; $89 INT(
>8f12	b1 a9					.word	IsValUnary                       ; $8a ISVAL(
>8f14	9b 9c					.word	Unary_Left                       ; $8b LEFT$(
>8f16	6d a9					.word	LenUnary                         ; $8c LEN(
>8f18	c5 9c					.word	Unary_Mid                        ; $8d MID$(
>8f1a	11 9b					.word	Unary_Not                        ; $8e NOT(
>8f1c	27 9b					.word	Unary_Random                     ; $8f RANDOM(
>8f1e	ab 9c					.word	Unary_Right                      ; $90 RIGHT$(
>8f20	40 9b					.word	Unary_Rnd                        ; $91 RND(
>8f22	87 a9					.word	SgnUnary                         ; $92 SGN(
>8f24	d3 9b					.word	SpcUnary                         ; $93 SPC(
>8f26	ee 9b					.word	Unary_Str                        ; $94 STR$(
>8f28	a3 92					.word	UnaryTrue                        ; $95 TRUE
>8f2a	a7 a9					.word	ValUnary                         ; $96 VAL(
>8f2c	87 89					.word	ForCommand                       ; $97 FOR
>8f2e	d4 8a					.word	IfCommand                        ; $98 IF
>8f30	7a 8e					.word	Unused1                          ; $99 PROC
>8f32	99 8d					.word	Command_REPEAT                   ; $9a REPEAT
>8f34	08 92					.word	Command_WHILE                    ; $9b WHILE
>8f36	fd 8a					.word	EndIf                            ; $9c ENDIF
>8f38	62 a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8f3a	41 8a					.word	NextCommand                      ; $9e NEXT
>8f3c	7a 8e					.word	Unused4                          ; $9f THEN
>8f3e	a2 8d					.word	Command_UNTIL                    ; $a0 UNTIL
>8f40	29 92					.word	Command_WEND                     ; $a1 WEND
>8f42	2d 88					.word	CallCommand                      ; $a2 CALL
>8f44	56 ab					.word	SyntaxError                      ; $a3 CLS
>8f46	bf 88					.word	Command_Data                     ; $a4 DATA
>8f48	c7 88					.word	DimCommand                       ; $a5 DIM
>8f4a	7a 8e					.word	Unused3                          ; $a6 DOWNTO
>8f4c	f6 8a					.word	ElseCode                         ; $a7 ELSE
>8f4e	9a 8a					.word	Command_GOSUB                    ; $a8 GOSUB
>8f50	b8 8a					.word	GotoCommand                      ; $a9 GOTO
>8f52	fe 8a					.word	LetCommand                       ; $aa LET
>8f54	ee 8b					.word	Command_LOCAL                    ; $ab LOCAL
>8f56	7c 8c					.word	Command_Print                    ; $ac PRINT
>8f58	33 8d					.word	Command_Read                     ; $ad READ
>8f5a	8c 8d					.word	RemCommand                       ; $ae REM
>8f5c	aa 8a					.word	Command_RETURN                   ; $af RETURN
>8f5e	7a 8e					.word	Unused2                          ; $b0 TO
.8f60					VectorSet1:
>8f60	56 ab					.word	SyntaxError                      ; $80 !0:EOF
>8f62	56 ab					.word	SyntaxError                      ; $81 !1:SH1
>8f64	56 ab					.word	SyntaxError                      ; $82 !2:SH2
>8f66	fe 87					.word	AssembleCommand                  ; $83 ASSEMBLE
>8f68	1d 88					.word	AssertCommand                    ; $84 ASSERT
>8f6a	67 88					.word	ClearCommand                     ; $85 CLEAR
>8f6c	84 89					.word	EndCommand                       ; $86 END
>8f6e	53 8b					.word	Command_List                     ; $87 LIST
>8f70	72 8c					.word	NewCommand                       ; $88 NEW
>8f72	bb 8d					.word	Command_Restore                  ; $89 RESTORE
>8f74	ed 8d					.word	CommandRUN                       ; $8a RUN
>8f76	00 90					.word	StopCommand                      ; $8b STOP
.8f78					VectorSet2:
>8f78	56 ab					.word	SyntaxError                      ; $80 !0:EOF
>8f7a	56 ab					.word	SyntaxError                      ; $81 !1:SH1
>8f7c	56 ab					.word	SyntaxError                      ; $82 !2:SH2
>8f7e	15 aa					.word	Assemble_adc                     ; $83 ADC
>8f80	0d aa					.word	Assemble_and                     ; $84 AND
>8f82	29 aa					.word	Assemble_asl                     ; $85 ASL
>8f84	93 aa					.word	Assemble_bcc                     ; $86 BCC
>8f86	97 aa					.word	Assemble_bcs                     ; $87 BCS
>8f88	9f aa					.word	Assemble_beq                     ; $88 BEQ
>8f8a	56 aa					.word	Assemble_bit                     ; $89 BIT
>8f8c	87 aa					.word	Assemble_bmi                     ; $8a BMI
>8f8e	9b aa					.word	Assemble_bne                     ; $8b BNE
>8f90	83 aa					.word	Assemble_bpl                     ; $8c BPL
>8f92	a3 aa					.word	Assemble_bra                     ; $8d BRA
>8f94	a7 aa					.word	Assemble_brk                     ; $8e BRK
>8f96	8b aa					.word	Assemble_bvc                     ; $8f BVC
>8f98	8f aa					.word	Assemble_bvs                     ; $90 BVS
>8f9a	af aa					.word	Assemble_clc                     ; $91 CLC
>8f9c	03 ab					.word	Assemble_cld                     ; $92 CLD
>8f9e	c3 aa					.word	Assemble_cli                     ; $93 CLI
>8fa0	f3 aa					.word	Assemble_clv                     ; $94 CLV
>8fa2	21 aa					.word	Assemble_cmp                     ; $95 CMP
>8fa4	6a aa					.word	Assemble_cpx                     ; $96 CPX
>8fa6	65 aa					.word	Assemble_cpy                     ; $97 CPY
>8fa8	47 aa					.word	Assemble_dec                     ; $98 DEC
>8faa	ff aa					.word	Assemble_dex                     ; $99 DEX
>8fac	db aa					.word	Assemble_dey                     ; $9a DEY
>8fae	11 aa					.word	Assemble_eor                     ; $9b EOR
>8fb0	4c aa					.word	Assemble_inc                     ; $9c INC
>8fb2	0f ab					.word	Assemble_inx                     ; $9d INX
>8fb4	fb aa					.word	Assemble_iny                     ; $9e INY
>8fb6	7e aa					.word	Assemble_jmp                     ; $9f JMP
>8fb8	79 aa					.word	Assemble_jsr                     ; $a0 JSR
>8fba	1d aa					.word	Assemble_lda                     ; $a1 LDA
>8fbc	42 aa					.word	Assemble_ldx                     ; $a2 LDX
>8fbe	60 aa					.word	Assemble_ldy                     ; $a3 LDY
>8fc0	33 aa					.word	Assemble_lsr                     ; $a4 LSR
>8fc2	13 ab					.word	Assemble_nop                     ; $a5 NOP
>8fc4	09 aa					.word	Assemble_ora                     ; $a6 ORA
>8fc6	bf aa					.word	Assemble_pha                     ; $a7 PHA
>8fc8	ab aa					.word	Assemble_php                     ; $a8 PHP
>8fca	07 ab					.word	Assemble_phx                     ; $a9 PHX
>8fcc	c7 aa					.word	Assemble_phy                     ; $aa PHY
>8fce	cf aa					.word	Assemble_pla                     ; $ab PLA
>8fd0	b3 aa					.word	Assemble_plp                     ; $ac PLP
>8fd2	1b ab					.word	Assemble_plx                     ; $ad PLX
>8fd4	d7 aa					.word	Assemble_ply                     ; $ae PLY
>8fd6	2e aa					.word	Assemble_rol                     ; $af ROL
>8fd8	38 aa					.word	Assemble_ror                     ; $b0 ROR
>8fda	bb aa					.word	Assemble_rti                     ; $b1 RTI
>8fdc	cb aa					.word	Assemble_rts                     ; $b2 RTS
>8fde	25 aa					.word	Assemble_sbc                     ; $b3 SBC
>8fe0	b7 aa					.word	Assemble_sec                     ; $b4 SEC
>8fe2	17 ab					.word	Assemble_sed                     ; $b5 SED
>8fe4	d3 aa					.word	Assemble_sei                     ; $b6 SEI
>8fe6	19 aa					.word	Assemble_sta                     ; $b7 STA
>8fe8	0b ab					.word	Assemble_stp                     ; $b8 STP
>8fea	3d aa					.word	Assemble_stx                     ; $b9 STX
>8fec	5b aa					.word	Assemble_sty                     ; $ba STY
>8fee	51 aa					.word	Assemble_stz                     ; $bb STZ
>8ff0	ef aa					.word	Assemble_tax                     ; $bc TAX
>8ff2	eb aa					.word	Assemble_tay                     ; $bd TAY
>8ff4	74 aa					.word	Assemble_trb                     ; $be TRB
>8ff6	6f aa					.word	Assemble_tsb                     ; $bf TSB
>8ff8	f7 aa					.word	Assemble_tsx                     ; $c0 TSX
>8ffa	df aa					.word	Assemble_txa                     ; $c1 TXA
>8ffc	e7 aa					.word	Assemble_txs                     ; $c2 TXS
>8ffe	e3 aa					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9000					StopCommand:
.9000	a9 08		lda #$08		lda	#8
.9002	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9005					ListConvertLine:
.9005	9c 9d 04	stz $049d			stz 	tbOffset
.9008	9c a9 04	stz $04a9			stz 	tokenBuffer
.900b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.900d	b1 30		lda ($30),y			lda 	(codePtr),y
.900f	aa		tax				tax
.9010	88		dey				dey
.9011	b1 30		lda ($30),y			lda 	(codePtr),y
.9013	20 cc a6	jsr $a6cc			jsr 	ConvertInt16
.9016	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9018	86 37		stx $37				stx 	zTemp0+1
.901a	a0 00		ldy #$00			ldy 	#0
.901c					_LCCopyNumber:
.901c	b1 36		lda ($36),y			lda 	(zTemp0),y
.901e	20 1e 91	jsr $911e			jsr 	LCLWrite
.9021	c8		iny				iny
.9022	b1 36		lda ($36),y			lda 	(zTemp0),y
.9024	d0 f6		bne $901c			bne 	_LCCopyNumber
.9026					_LCPadOut:
.9026	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9028	20 1e 91	jsr $911e			jsr 	LCLWrite
.902b	ad 9d 04	lda $049d			lda 	tbOffset
.902e	c9 06		cmp #$06			cmp 	#6
.9030	d0 f4		bne $9026			bne 	_LCPadOut
.9032	a0 03		ldy #$03			ldy 	#3 							; start position.
.9034					_LCMainLoop:
.9034	b1 30		lda ($30),y			lda 	(codePtr),y
.9036	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9038	f0 17		beq $9051			beq 	_LCExit
.903a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.903c	90 14		bcc $9052			bcc 	_LCDoubles
.903e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9040	90 20		bcc $9062			bcc 	_LCShiftPunc
.9042	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9044	90 2b		bcc $9071			bcc 	_LCPunctuation
.9046	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9048	90 2d		bcc $9077			bcc 	_LCIdentifiers
.904a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.904c	90 49		bcc $9097			bcc 	_LCTokens
.904e	4c f2 90	jmp $90f2			jmp 	_LCData 					; 254-5 are data objects
.9051					_LCExit:
.9051	60		rts				rts
.9052					_LCDoubles:
.9052	48		pha				pha
.9053	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9054	29 02		and #$02			and 	#2
.9056	09 3c		ora #$3c			ora 	#60 						; make < >
.9058	20 1e 91	jsr $911e			jsr 	LCLWrite
.905b	68		pla				pla 								; restore, do lower bit
.905c	29 03		and #$03			and 	#3
.905e	09 3c		ora #$3c			ora 	#60
.9060	80 0f		bra $9071			bra		_LCPunctuation 				; print, increment, loop
.9062					_LCShiftPunc:
.9062	aa		tax				tax 								; save in X
.9063	29 07		and #$07			and 	#7 							; lower 3 bits
.9065	f0 02		beq $9069			beq 	_LCNoAdd
.9067	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9069					_LCNoAdd:
.9069	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.906b	90 02		bcc $906f			bcc 	_LCNoAdd2
.906d	09 20		ora #$20			ora 	#32 						; adds $20
.906f					_LCNoAdd2:
.906f	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9071					_LCPunctuation:
.9071	c8		iny				iny 								; consume character
.9072	20 1e 91	jsr $911e			jsr 	LCLWrite 					; write it out.
.9075	80 bd		bra $9034			bra 	_LCMainLoop 				; go round again.
.9077					_LCIdentifiers:
.9077	18		clc				clc 								; convert to physical address
.9078	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.907a	85 37		sta $37				sta 	zTemp0+1
.907c	c8		iny				iny
.907d	b1 30		lda ($30),y			lda 	(codePtr),y
.907f	85 36		sta $36				sta 	zTemp0
.9081	c8		iny				iny
.9082	5a		phy				phy 								; save position
.9083	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9085					_LCOutIdentifier:
.9085	c8		iny				iny
.9086	b1 36		lda ($36),y			lda 	(zTemp0),y
.9088	29 7f		and #$7f			and 	#$7F
.908a	20 4c 91	jsr $914c			jsr 	LCLLowerCase
.908d	20 1e 91	jsr $911e			jsr 	LCLWrite
.9090	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9092	10 f1		bpl $9085			bpl 	_LCOutIdentifier
.9094	7a		ply				ply 								; restore position
.9095	80 9d		bra $9034			bra 	_LCMainLoop
.9097					_LCTokens:
.9097	aa		tax				tax 								; token in X
.9098	a9 1c		lda #$1c			lda 	#((KeywordSet2) & $FF)
.909a	85 36		sta $36				sta 	0+zTemp0
.909c	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.909e	85 37		sta $37				sta 	1+zTemp0
.90a0	e0 82		cpx #$82			cpx 	#$82
.90a2	f0 16		beq $90ba			beq 	_LCUseShift
.90a4	a9 d8		lda #$d8			lda 	#((KeywordSet1) & $FF)
.90a6	85 36		sta $36				sta 	0+zTemp0
.90a8	a9 a0		lda #$a0			lda 	#((KeywordSet1) >> 8)
.90aa	85 37		sta $37				sta 	1+zTemp0
.90ac	e0 81		cpx #$81			cpx 	#$81
.90ae	f0 0a		beq $90ba			beq 	_LCUseShift
.90b0	a9 a6		lda #$a6			lda 	#((KeywordSet0) & $FF)
.90b2	85 36		sta $36				sta 	0+zTemp0
.90b4	a9 9f		lda #$9f			lda 	#((KeywordSet0) >> 8)
.90b6	85 37		sta $37				sta 	1+zTemp0
.90b8	80 01		bra $90bb			bra 	_LCNoShift
.90ba					_LCUseShift:
.90ba	c8		iny				iny
.90bb					_LCNoShift:
.90bb	20 2d 91	jsr $912d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.90be	b1 30		lda ($30),y			lda 	(codePtr),y
.90c0	aa		tax				tax 								; into X
.90c1					_LCFindText:
.90c1	ca		dex				dex
.90c2	10 0e		bpl $90d2			bpl 	_LCFoundText 				; found text.
.90c4	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.90c6	1a		inc a				inc 	a 							; one extra for size
.90c7	38		sec				sec 								; one extra for checksum
.90c8	65 36		adc $36				adc 	zTemp0 						; go to next token
.90ca	85 36		sta $36				sta 	zTemp0
.90cc	90 f3		bcc $90c1			bcc 	_LCFindText
.90ce	e6 37		inc $37				inc 	zTemp0+1
.90d0	80 ef		bra $90c1			bra 	_LCFindText
.90d2					_LCFoundText:
.90d2	5a		phy				phy 								; save List position
.90d3	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.90d5	aa		tax				tax
.90d6	a0 02		ldy #$02			ldy 	#2
.90d8					_LCCopyToken:
.90d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.90da	20 4c 91	jsr $914c			jsr 	LCLLowerCase
.90dd	20 1e 91	jsr $911e			jsr 	LCLWrite
.90e0	c8		iny				iny
.90e1	ca		dex				dex
.90e2	d0 f4		bne $90d8			bne 	_LCCopyToken
.90e4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.90e6	f0 05		beq $90ed			beq 	_LCNoSpace
.90e8	a9 20		lda #$20			lda 	#' '
.90ea	20 1e 91	jsr $911e			jsr 	LCLWrite
.90ed					_LCNoSpace:
.90ed	7a		ply				ply 								; restore position.
.90ee	c8		iny				iny 								; consume token
.90ef	4c 34 90	jmp $9034			jmp 	_LCMainLoop 				; and go around again.
.90f2					_LCData:
.90f2	48		pha				pha 								; save type $FE/$FF
.90f3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.90f5	c9 fe		cmp #$fe			cmp 	#$FE
.90f7	f0 02		beq $90fb			beq 	_LCHaveOpener
.90f9	a2 22		ldx #$22			ldx 	#'"'
.90fb					_LCHaveOpener:
.90fb	8a		txa				txa 								; output prefix (# or ")
.90fc	20 1e 91	jsr $911e			jsr 	LCLWrite
.90ff	c8		iny				iny 								; get count
.9100	b1 30		lda ($30),y			lda 	(codePtr),y
.9102	aa		tax				tax
.9103	c8		iny				iny 								; point at first character
.9104					_LCOutData:
.9104	b1 30		lda ($30),y			lda 	(codePtr),y
.9106	c9 00		cmp #$00			cmp 	#0
.9108	f0 03		beq $910d			beq 	_LCNoPrint
.910a	20 1e 91	jsr $911e			jsr 	LCLWrite
.910d					_LCNoPrint:
.910d	c8		iny				iny
.910e	ca		dex				dex
.910f	d0 f3		bne $9104			bne 	_LCOutData
.9111	68		pla				pla 								; closing " required ?
.9112	c9 ff		cmp #$ff			cmp 	#$FF
.9114	d0 05		bne $911b			bne 	_LCNoQuote
.9116	a9 22		lda #$22			lda 	#'"'
.9118	20 1e 91	jsr $911e			jsr 	LCLWrite
.911b					_LCNoQuote:
.911b	4c 34 90	jmp $9034			jmp 	_LCMainLoop
.911e					LCLWrite:
.911e	da		phx				phx
.911f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9122	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9125	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9128	ee 9d 04	inc $049d			inc 	tbOffset
.912b	fa		plx				plx
.912c	60		rts				rts
.912d					LCCheckSpaceRequired:
.912d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9130	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9133	20 4c 91	jsr $914c			jsr 	LCLLowerCase 				; saves a little effort
.9136	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9138	90 11		bcc $914b			bcc 	_LCCSRExit
.913a	c9 3a		cmp #$3a			cmp 	#"9"+1
.913c	90 08		bcc $9146			bcc 	_LCCSRSpace
.913e	c9 61		cmp #$61			cmp 	#"a"
.9140	90 09		bcc $914b			bcc 	_LCCSRExit
.9142	c9 7b		cmp #$7b			cmp 	#"z"+1
.9144	b0 05		bcs $914b			bcs 	_LCCSRExit
.9146					_LCCSRSpace:
.9146	a9 20		lda #$20			lda 	#' '
.9148	20 1e 91	jsr $911e			jsr 	LCLWrite
.914b					_LCCSRExit:
.914b	60		rts				rts
.914c					LCLLowerCase:
.914c	c9 41		cmp #$41			cmp 	#"A"
.914e	90 06		bcc $9156			bcc 	_LCLLCOut
.9150	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9152	b0 02		bcs $9156			bcs 	_LCLLCOut
.9154	69 20		adc #$20			adc 	#$20
.9156					_LCLLCOut:
.9156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9157					ProcedureScan:
.9157	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9159	85 30		sta $30				sta 	codePtr
.915b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.915d	85 31		sta $31				sta 	codePtr+1
.915f					_PSLoop:
.915f	b2 30		lda ($30)			lda 	(codePtr)
.9161	f0 42		beq $91a5			beq 	_PSExit
.9163	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9165	b1 30		lda ($30),y			lda 	(codePtr),y
.9167	c9 99		cmp #$99			cmp 	#KWD_PROC
.9169	d0 2d		bne $9198			bne 	_PSNext
.916b	c8		iny				iny 								; get the address of the record to zTemp0 and
.916c	b1 30		lda ($30),y			lda 	(codePtr),y
.916e	29 c0		and #$c0			and 	#$C0
.9170	c9 40		cmp #$40			cmp 	#$40
.9172	d0 32		bne $91a6			bne 	_PSSyntax
.9174	b1 30		lda ($30),y			lda 	(codePtr),y
.9176	18		clc				clc
.9177	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9179	85 37		sta $37				sta 	zTemp0+1
.917b	c8		iny				iny 								; LSB
.917c	b1 30		lda ($30),y			lda 	(codePtr),y
.917e	85 36		sta $36				sta 	zTemp0
.9180	c8		iny				iny 								; character after variable call.
.9181	98		tya				tya 								; save Y offset at +7
.9182	a0 07		ldy #$07			ldy 	#7
.9184	91 36		sta ($36),y			sta 	(zTemp0),y
.9186	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9188	a0 02		ldy #$02			ldy 	#2
.918a	91 36		sta ($36),y			sta 	(zTemp0),y
.918c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.918e					_PSCopy:
.918e	b5 30		lda $30,x			lda 	safePtr,x
.9190	c8		iny				iny
.9191	91 36		sta ($36),y			sta 	(zTemp0),y
.9193	e8		inx				inx
.9194	e0 04		cpx #$04			cpx 	#4
.9196	d0 f6		bne $918e			bne 	_PSCopy
.9198					_PSNext:
.9198	18		clc				clc
.9199	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.919b	65 30		adc $30				adc 	codePtr
.919d	85 30		sta $30				sta 	codePtr
.919f	90 02		bcc $91a3			bcc 	_CREExit
.91a1	e6 31		inc $31				inc 	codePtr+1
.91a3					_CREExit:
.91a3	80 ba		bra $915f			bra 	_PSLoop
.91a5					_PSExit:
.91a5	60		rts				rts
.91a6					_PSSyntax:
.91a6	4c 56 ab	jmp $ab56			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.91a9					ScanForward:
.91a9	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.91ab	86 37		stx $37				stx 	zTemp0+1
.91ad	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.91af					_ScanLoop:
.91af	b1 30		lda ($30),y			lda 	(codePtr),y
.91b1	c8		iny				iny
.91b2	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.91b4	d0 0e		bne $91c4			bne 	_ScanGoNext
.91b6	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.91b8	f0 04		beq $91be			beq 	_ScanMatch
.91ba	c5 37		cmp $37				cmp 	zTemp0+1
.91bc	d0 06		bne $91c4			bne 	_ScanGoNext
.91be					_ScanMatch:
.91be	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.91c0	d0 01		bne $91c3			bne 	_ScanNotEndEOL
.91c2	88		dey				dey
.91c3					_ScanNotEndEOL:
.91c3	60		rts				rts
.91c4					_ScanGoNext:
.91c4	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.91c6	90 e7		bcc $91af			bcc 	_ScanLoop
.91c8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.91ca	90 18		bcc $91e4			bcc 	_ScanSkipOne
.91cc	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.91ce	b0 2f		bcs $91ff			bcs 	_ScanSkipData
.91d0	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.91d2	90 db		bcc $91af			bcc 	_ScanLoop 					; if not, ordinary keywords.
.91d4	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.91d6	b0 d7		bcs $91af			bcs 	_ScanLoop
.91d8	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.91da	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.91dc	b0 d1		bcs $91af			bcs 	_ScanLoop
.91de	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.91e0	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.91e2	80 cb		bra $91af			bra 	_ScanLoop
.91e4					_ScanSkipOne:
.91e4	c8		iny				iny 								; consume the extra one.
.91e5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.91e7	d0 c6		bne $91af			bne 	_ScanLoop
.91e9	18		clc				clc
.91ea	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91ec	65 30		adc $30				adc 	codePtr
.91ee	85 30		sta $30				sta 	codePtr
.91f0	90 02		bcc $91f4			bcc 	_CREExit
.91f2	e6 31		inc $31				inc 	codePtr+1
.91f4					_CREExit:
.91f4	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.91f6	b2 30		lda ($30)			lda 	(codePtr)
.91f8	d0 b5		bne $91af			bne 	_ScanLoop 					; if not zero, more to scan
.91fa	a9 13		lda #$13		lda	#19
.91fc	4c 37 92	jmp $9237		jmp	ErrorHandler
.91ff					_ScanSkipData:
.91ff	88		dey				dey 								; point at data token
.9200	c8		iny				iny
.9201	98		tya				tya
.9202	38		sec				sec
.9203	71 30		adc ($30),y			adc 	(codePtr),y
.9205	a8		tay				tay
.9206	80 a7		bra $91af			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9208					Command_WHILE:
.9208	5a		phy				phy 								; save position of the test
.9209	a2 00		ldx #$00			ldx 	#0
.920b	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; work out the number
.920e	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; check if zero
.9211	f0 0e		beq $9221			beq 	_WHExitLoop 				; if so exit the loop
.9213	98		tya				tya 								; position *after* test.
.9214	7a		ply				ply 								; restore position before test, at WHILE
.9215	88		dey				dey
.9216	48		pha				pha 								; push after test on the stack
.9217	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9219	20 a3 9e	jsr $9ea3			jsr 	StackOpen
.921c	20 e7 9e	jsr $9ee7			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.921f	7a		ply				ply 								; restore the position *after* the test
.9220	60		rts				rts
.9221					_WHExitLoop:
.9221	68		pla				pla 								; throw post loop position
.9222	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9224	aa		tax				tax
.9225	20 a9 91	jsr $91a9			jsr 	ScanForward
.9228	60		rts				rts
.9229					Command_WEND:
.9229	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.922b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.922d	20 cf 9e	jsr $9ecf			jsr 	StackCheckFrame
.9230	20 f8 9e	jsr $9ef8			jsr 	STKLoadCodePosition 		; loop back
.9233	20 c1 9e	jsr $9ec1			jsr 	StackClose		 			; erase the frame
.9236	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a570					CheckRightBracket:
.a570	b1 30		lda ($30),y			lda 	(codePtr),y
.a572	c8		iny				iny
.a573	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a575	d0 0f		bne $a586			bne 	CNAFail
.a577	60		rts				rts
.a578					CheckComma:
.a578	b1 30		lda ($30),y			lda 	(codePtr),y
.a57a	c8		iny				iny
.a57b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a57d	d0 07		bne $a586			bne 	CNAFail
.a57f	60		rts				rts
.a580					CheckNextA:
.a580	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a582	d0 02		bne $a586			bne 	CNAFail
.a584	c8		iny				iny 								; skip character
.a585	60		rts				rts 								; and exit
.a586					CNAFail:
.a586	4c 56 ab	jmp $ab56			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9237					ErrorHandler:
.9237	a8		tay				tay 								; find the error text
.9238	f0 49		beq $9283			beq 	_EHEnd
.923a	a2 00		ldx #$00			ldx 	#0
.923c	a9 6f		lda #$6f			lda 	#((ErrorText) & $FF)
.923e	85 36		sta $36				sta 	0+zTemp0
.9240	a9 ab		lda #$ab			lda 	#((ErrorText) >> 8)
.9242	85 37		sta $37				sta 	1+zTemp0
.9244					_EHFind:
.9244	88		dey				dey 								; found the error text ?
.9245	f0 0e		beq $9255			beq 	_EHFound
.9247					_EHFindZero:
.9247	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9249	e6 36		inc $36				inc 	zTemp0
.924b	d0 02		bne $924f			bne 	_EHFNoCarry
.924d	e6 37		inc $37				inc 	zTemp0+1
.924f					_EHFNoCarry:
.924f	c9 00		cmp #$00			cmp 	#0
.9251	d0 f4		bne $9247			bne 	_EHFindZero
.9253	80 ef		bra $9244			bra 	_EHFind
.9255					_EHFound:
.9255	a5 36		lda $36				lda 	zTemp0 						; print message
.9257	a6 37		ldx $37				ldx 	zTemp0+1
.9259	20 90 92	jsr $9290			jsr 	PrintStringXA
.925c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.925e	b1 30		lda ($30),y			lda 	(codePtr),y
.9260	d0 05		bne $9267			bne 	_EHAtMsg
.9262	c8		iny				iny
.9263	b1 30		lda ($30),y			lda 	(codePtr),y
.9265	f0 17		beq $927e			beq 	_EHCREnd
.9267					_EHAtMsg:
.9267	a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.9269	a9 86		lda #$86			lda 	#_AtMsg & $FF
.926b	20 90 92	jsr $9290			jsr 	PrintStringXA
.926e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9270	b1 30		lda ($30),y			lda 	(codePtr),y
.9272	48		pha				pha
.9273	c8		iny				iny
.9274	b1 30		lda ($30),y			lda 	(codePtr),y
.9276	aa		tax				tax
.9277	68		pla				pla
.9278	20 cc a6	jsr $a6cc			jsr 	ConvertInt16 				; convert XA to string
.927b	20 90 92	jsr $9290			jsr 	PrintStringXA 				; and print it.
.927e					_EHCREnd:
.927e	a9 0d		lda #$0d			lda 	#13 						; new line
.9280	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.9283					_EHEnd:
.9283	4c ce 87	jmp $87ce			jmp 	WarmStart
>9286	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>928e	20 00
.9290					PrintStringXA:
.9290	5a		phy				phy
.9291	86 37		stx $37				stx 	zTemp0+1
.9293	85 36		sta $36				sta 	zTemp0
.9295	a0 00		ldy #$00			ldy 	#0
.9297					_PSXALoop:
.9297	b1 36		lda ($36),y			lda 	(zTemp0),y
.9299	f0 06		beq $92a1			beq 	_PSXAExit
.929b	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.929e	c8		iny				iny
.929f	80 f6		bra $9297			bra 	_PSXALoop
.92a1					_PSXAExit:
.92a1	7a		ply				ply
.92a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.92a3					UnaryTrue:
.92a3	fa		plx				plx
.92a4					ReturnTrue:
.92a4	a9 01		lda #$01			lda 	#1  						; set to 1
.92a6	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.92a9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.92ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92ae	60		rts				rts
.92af					UnaryFalse:
.92af	fa		plx				plx
.92b0					ReturnFalse:
.92b0	4c ef 9d	jmp $9def			jmp 	NSMSetZero 					; set it all to zero
.92b3					BinaryCompareEqual:
.92b3	fa		plx				plx
.92b4	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92b7	c9 00		cmp #$00			cmp 	#0
.92b9	f0 e9		beq $92a4			beq 	ReturnTrue
.92bb	80 f3		bra $92b0			bra 	ReturnFalse
.92bd					BinaryCompareLess:
.92bd	fa		plx				plx
.92be	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92c1	c9 ff		cmp #$ff			cmp 	#$FF
.92c3	f0 df		beq $92a4			beq 	ReturnTrue
.92c5	80 e9		bra $92b0			bra 	ReturnFalse
.92c7					BinaryCompareGreater:
.92c7	fa		plx				plx
.92c8	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92cb	c9 01		cmp #$01			cmp 	#1
.92cd	f0 d5		beq $92a4			beq 	ReturnTrue
.92cf	80 df		bra $92b0			bra 	ReturnFalse
.92d1					BinaryCompareNotEqual:
.92d1	fa		plx				plx
.92d2	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92d5	c9 00		cmp #$00			cmp 	#0
.92d7	d0 cb		bne $92a4			bne 	ReturnTrue
.92d9	80 d5		bra $92b0			bra 	ReturnFalse
.92db					BinaryCompareLessEqual:
.92db	fa		plx				plx
.92dc	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92df	c9 01		cmp #$01			cmp 	#1
.92e1	d0 c1		bne $92a4			bne 	ReturnTrue
.92e3	80 cb		bra $92b0			bra 	ReturnFalse
.92e5					BinaryCompareGreaterEqual:
.92e5	fa		plx				plx
.92e6	20 ef 92	jsr $92ef			jsr 	CompareBaseCode
.92e9	c9 ff		cmp #$ff			cmp 	#$FF
.92eb	d0 b7		bne $92a4			bne 	ReturnTrue
.92ed	80 c1		bra $92b0			bra 	ReturnFalse
.92ef					CompareBaseCode:
.92ef	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; make both values if references.
.92f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.92f5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92f8	29 10		and #$10			and 	#NSTString
.92fa	d0 40		bne $933c			bne 	_CBCString
.92fc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.92ff	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9302	d0 3b		bne $933f			bne 	_CBCFloat
.9304	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9307	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.930a	29 08		and #$08			and 	#NSTFloat
.930c	d0 31		bne $933f			bne 	_CBCFloat
.930e	20 42 93	jsr $9342			jsr 	CompareFixMinusZero
.9311	e8		inx				inx
.9312	20 42 93	jsr $9342			jsr 	CompareFixMinusZero
.9315	ca		dex				dex
.9316	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9319	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.931c	10 0b		bpl $9329			bpl 	_CDCSameSign
.931e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9321	30 16		bmi $9339			bmi 	_CBCLess 					; return $FF
.9323					_CBCGreater:
.9323	a9 01		lda #$01			lda 	#1
.9325	60		rts				rts
.9326					_CBCEqual:
.9326	a9 00		lda #$00			lda 	#0
.9328	60		rts				rts
.9329					_CDCSameSign:
.9329	20 52 94	jsr $9452			jsr 	SubTopTwoStack 				; unsigned subtract
.932c	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; or the mantissa together
.932f	f0 f5		beq $9326			beq 	_CBCEqual 					; -0 == 0
.9331	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9334	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9337	10 ea		bpl $9323			bpl 	_CBCGreater
.9339					_CBCLess:
.9339	a9 ff		lda #$ff			lda 	#$FF
.933b	60		rts				rts
.933c					_CBCString:
.933c	4c a8 93	jmp $93a8			jmp 	CompareStrings
.933f					_CBCFloat:
.933f	4c c8 a7	jmp $a7c8			jmp 	CompareFloat
.9342					CompareFixMinusZero:
.9342	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero
.9345	d0 03		bne $934a			bne 	_CFXMZNotZero
.9347	9e 00 04	stz $0400,x			stz 	NSStatus,x
.934a					_CFXMZNotZero:
.934a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.934b					StringConcat:
.934b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.934e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9351	29 18		and #$18			and 	#NSBTypeMask
.9353	c9 10		cmp #$10			cmp 	#NSTString
.9355	d0 4e		bne $93a5			bne		_SCType
.9357	64 38		stz $38				stz 	zTemp1 						; counting total length
.9359	e8		inx				inx
.935a	20 78 93	jsr $9378			jsr 	_SCSetupZ0 					; setup for second
.935d	20 83 93	jsr $9383			jsr 	_SCLengthZ0 				; length for second
.9360	ca		dex				dex
.9361	20 78 93	jsr $9378			jsr 	_SCSetupZ0 					; setup for first
.9364	20 83 93	jsr $9383			jsr 	_SCLengthZ0 				; length for first
.9367	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9369	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate
.936c	20 96 93	jsr $9396			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.936f	e8		inx				inx
.9370	20 78 93	jsr $9378			jsr 	_SCSetupZ0 					; copy second out
.9373	20 96 93	jsr $9396			jsr 	_SCCopy
.9376	ca		dex				dex
.9377	60		rts				rts
.9378					_SCSetupZ0:
.9378	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.937b	85 36		sta $36				sta 	zTemp0
.937d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9380	85 37		sta $37				sta 	zTemp0+1
.9382	60		rts				rts
.9383					_SCLengthZ0:
.9383	5a		phy				phy
.9384	a0 00		ldy #$00			ldy 	#0
.9386					_SCLenLoop:
.9386	b1 36		lda ($36),y			lda 	(zTemp0),y
.9388	f0 0a		beq $9394			beq 	_SCLExit
.938a	c8		iny				iny
.938b	e6 38		inc $38				inc 	zTemp1
.938d	10 f7		bpl $9386			bpl		_SCLenLoop
.938f	a9 09		lda #$09		lda	#9
.9391	4c 37 92	jmp $9237		jmp	ErrorHandler
.9394					_SCLExit:
.9394	7a		ply				ply
.9395	60		rts				rts
.9396					_SCCopy:
.9396	5a		phy				phy
.9397	a0 00		ldy #$00			ldy 	#0
.9399					_SCCopyLoop:
.9399	b1 36		lda ($36),y			lda 	(zTemp0),y
.939b	f0 06		beq $93a3			beq 	_SCCExit
.939d	20 b9 ae	jsr $aeb9			jsr 	StringTempWrite
.93a0	c8		iny				iny
.93a1	80 f6		bra $9399			bra 	_SCCopyLoop
.93a3					_SCCExit:
.93a3	7a		ply				ply
.93a4	60		rts				rts
.93a5					_SCType:
.93a5	4c 60 ab	jmp $ab60			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a589					IntegerDivide:
.a589	fa		plx				plx
.a58a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a58d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a590	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a591	0a		asl a				asl 	a
.a592	10 05		bpl $a599			bpl 	_NotRef
.a594	48		pha				pha
.a595	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a598	68		pla				pla
.a599					_NotRef:
.a599	0a		asl a				asl 	a
.a59a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a59c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a59f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5a2	f0 03		beq $a5a7			beq 	_IntegerCode 				; if clear, then we have two integers
.a5a4	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.a5a7					_IntegerCode:
.a5a7	20 c9 a5	jsr $a5c9			jsr 	CheckDivideZero 			; do div zero check
.a5aa	20 01 a6	jsr $a601			jsr 	Int32Divide 				; do the division
.a5ad	20 be a6	jsr $a6be			jsr 	CalculateSign 				; calculate result sign
.a5b0					NSMCopyPlusTwoToZero:
.a5b0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a5b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5b6	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a5b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5bc	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a5bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5c2	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a5c5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5c8	60		rts				rts
.a5c9					CheckDivideZero:
.a5c9	e8		inx				inx
.a5ca	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero
.a5cd	f0 02		beq $a5d1			beq 	_CDVError
.a5cf	ca		dex				dex
.a5d0	60		rts				rts
.a5d1					_CDVError:
.a5d1	a9 03		lda #$03		lda	#3
.a5d3	4c 37 92	jmp $9237		jmp	ErrorHandler
.a5d6					IntegerModulus:
.a5d6	fa		plx				plx
.a5d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a5da	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a5dd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a5de	0a		asl a				asl 	a
.a5df	10 05		bpl $a5e6			bpl 	_NotRef
.a5e1	48		pha				pha
.a5e2	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5e5	68		pla				pla
.a5e6					_NotRef:
.a5e6	0a		asl a				asl 	a
.a5e7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a5e9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5ec	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5ef	f0 03		beq $a5f4			beq 	_IntegerCode 				; if clear, then we have two integers
.a5f1	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.a5f4					_IntegerCode:
.a5f4					IntegerModulusNoCheck:
.a5f4	20 c9 a5	jsr $a5c9			jsr 	CheckDivideZero 			; do div zero check
.a5f7	20 01 a6	jsr $a601			jsr 	Int32Divide 				; do the division
.a5fa	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a5fd	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a600	60		rts				rts
.a601					Int32Divide:
.a601	48		pha				pha 								; save AXY
.a602	5a		phy				phy
.a603	20 c6 9d	jsr $9dc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a606	20 eb 9d	jsr $9deb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a609	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a60b					_I32DivideLoop:
.a60b	e8		inx				inx
.a60c	e8		inx				inx
.a60d	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a610	ca		dex				dex
.a611	ca		dex				dex
.a612	20 05 9e	jsr $9e05			jsr 	NSMRotateLeft
.a615	20 41 a6	jsr $a641			jsr 	DivideCheckSubtract 		; check if subtract possible
.a618	90 03		bcc $a61d			bcc 	_I32DivideNoCarryIn
.a61a	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a61d					_I32DivideNoCarryIn:
.a61d	88		dey				dey 								; loop round till division completed.
.a61e	d0 eb		bne $a60b			bne 	_I32DivideLoop
.a620	7a		ply				ply 								; restore AXY and exit
.a621	68		pla				pla
.a622	60		rts				rts
.a623					Int32ShiftDivide:
.a623	48		pha				pha 								; save AY
.a624	5a		phy				phy
.a625	e8		inx				inx 								; clear S[X+2]
.a626	e8		inx				inx
.a627	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.a62a	ca		dex				dex
.a62b	ca		dex				dex
.a62c	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a62e					_I32SDLoop:
.a62e	20 41 a6	jsr $a641			jsr 	DivideCheckSubtract 		; check if subtract possible
.a631	e8		inx				inx
.a632	e8		inx				inx
.a633	20 05 9e	jsr $9e05			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a636	ca		dex				dex
.a637	ca		dex				dex
.a638	20 05 9e	jsr $9e05			jsr 	NSMRotateLeft
.a63b	88		dey				dey 	 							; do 31 times
.a63c	d0 f0		bne $a62e			bne 	_I32SDLoop
.a63e	7a		ply				ply 								; restore AY and exit
.a63f	68		pla				pla
.a640	60		rts				rts
.a641					DivideCheckSubtract:
.a641	20 52 94	jsr $9452			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a644	b0 04		bcs $a64a			bcs 	_DCSExit 					; if carry set, then could do, exit
.a646	20 2c 94	jsr $942c			jsr 	AddTopTwoStack 				; add it back in
.a649	18		clc				clc 								; and return False
.a64a					_DCSExit:
.a64a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a64b					MulInteger:
.a64b	fa		plx				plx
.a64c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a64f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a652	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a653	0a		asl a				asl 	a
.a654	10 05		bpl $a65b			bpl 	_NotRef
.a656	48		pha				pha
.a657	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a65a	68		pla				pla
.a65b					_NotRef:
.a65b	0a		asl a				asl 	a 							; put MSB of type into A:7
.a65c	30 0b		bmi $a669			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a65e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a661	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a664	f0 06		beq $a66c			beq 	_IntegerCode 				; if clear, then we have two integers
.a666	4c 9f a8	jmp $a89f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a669					_StringData:
.a669	4c 6a ab	jmp $ab6a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a66c					_IntegerCode:
.a66c	20 79 a6	jsr $a679			jsr 	MultiplyShort
.a66f	c9 00		cmp #$00			cmp 	#0
.a671	f0 05		beq $a678			beq 	_MIExit
.a673	a9 04		lda #$04		lda	#4
.a675	4c 37 92	jmp $9237		jmp	ErrorHandler
.a678					_MIExit:
.a678	60		rts				rts
.a679					MultiplyShort:
.a679	5a		phy				phy 								; save Y
.a67a	20 c6 9d	jsr $9dc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a67d	20 eb 9d	jsr $9deb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a680	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a682					_I32MLoop:
.a682	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a685	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a688	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a68b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a68e	f0 28		beq $a6b8			beq 	_I32MExit 					; exit if zero
.a690	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a693	29 01		and #$01			and 	#1
.a695	f0 0e		beq $a6a5			beq 	_I32MNoAdd
.a697	20 2c 94	jsr $942c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a69a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a69d	10 06		bpl $a6a5			bpl 	_I32MNoAdd
.a69f					_I32ShiftRight:
.a69f	20 12 9e	jsr $9e12			jsr 	NSMShiftRight 				; shift S[X] right
.a6a2	c8		iny				iny 								; increment shift count
.a6a3	80 0a		bra $a6af			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a6a5					_I32MNoAdd:
.a6a5	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a6a8	70 f5		bvs $a69f			bvs 	_I32ShiftRight 				; instead.
.a6aa	e8		inx				inx
.a6ab	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a6ae	ca		dex				dex
.a6af					_I32MShiftUpper:
.a6af	e8		inx				inx 								; shift S[X+2] right
.a6b0	e8		inx				inx
.a6b1	20 12 9e	jsr $9e12			jsr 	NSMShiftRight
.a6b4	ca		dex				dex
.a6b5	ca		dex				dex
.a6b6	80 ca		bra $a682			bra 	_I32MLoop 					; try again.
.a6b8					_I32MExit:
.a6b8	20 be a6	jsr $a6be			jsr 	CalculateSign
.a6bb	98		tya				tya 								; shift in A
.a6bc	7a		ply				ply 								; restore Y and exit
.a6bd	60		rts				rts
.a6be					CalculateSign:
.a6be	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a6c1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a6c4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a6c7	0a		asl a				asl 	a 							; shift bit 7 into carry
.a6c8	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a6cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93a8					CompareStrings:
.93a8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.93ab	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93ae	29 10		and #$10			and 	#NSBIsString
.93b0	f0 2c		beq $93de			beq 	_CSTypeError
.93b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93b5	85 36		sta $36				sta 	zTemp0
.93b7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93ba	85 37		sta $37				sta 	zTemp0+1
.93bc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93bf	85 38		sta $38				sta 	zTemp1
.93c1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93c4	85 39		sta $39				sta 	zTemp1+1
.93c6	5a		phy				phy 								; save Y so we can access strings
.93c7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93c9					_CSLoop:
.93c9	c8		iny				iny
.93ca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93cc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93ce	d0 06		bne $93d6			bne 	_CSDifferent
.93d0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93d2	d0 f5		bne $93c9			bne 	_CSLoop 					; still comparing
.93d4					_CSExit:
.93d4	7a		ply				ply 								; reached end, return zero in A from EOS
.93d5	60		rts				rts
.93d6					_CSDifferent:
.93d6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93d8	90 fa		bcc $93d4			bcc		_CSExit
.93da	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93dc	80 f6		bra $93d4			bra 	_CSExit
.93de					_CSTypeError:
.93de	4c 60 ab	jmp $ab60			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93e1					ShiftLeft:
.93e1	38		sec				sec
.93e2	80 01		bra $93e5			bra 	ShiftMain
.93e4					ShiftRight:
.93e4	18		clc				clc
.93e5					ShiftMain:
.93e5	fa		plx				plx 								; restore X
.93e6	08		php				php 								; save direction
.93e7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93ea	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93ed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93ee	0a		asl a				asl 	a
.93ef	10 05		bpl $93f6			bpl 	_NotRef
.93f1	48		pha				pha
.93f2	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93f5	68		pla				pla
.93f6					_NotRef:
.93f6	0a		asl a				asl 	a
.93f7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93f9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93fc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93ff	f0 03		beq $9404			beq 	_IntegerCode 				; if clear, then we have two integers
.9401	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.9404					_IntegerCode:
.9404	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9407	29 e0		and #$e0			and 	#$E0
.9409	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.940c	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.940f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9412	d0 13		bne $9427			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9414					_SMLoop:
.9414	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9417	30 11		bmi $942a			bmi 	_SMExit 					; exit if done.
.9419	28		plp				plp 								; restore direcition setting
.941a	08		php				php
.941b	90 05		bcc $9422			bcc 	_SMRight
.941d	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; shift left if CS
.9420	80 f2		bra $9414			bra 	_SMLoop
.9422					_SMRight:
.9422	20 12 9e	jsr $9e12			jsr 	NSMShiftRight 				; shift right if CC
.9425	80 ed		bra $9414			bra 	_SMLoop
.9427					_SMExit0:
.9427	20 ef 9d	jsr $9def			jsr 	NSMSetZero 					; return zero.
.942a					_SMExit:
.942a	28		plp				plp 								; throw direction
.942b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.942c					AddTopTwoStack:
.942c	18		clc				clc
.942d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9430	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9433	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9436	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9439	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.943c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.943f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9442	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9445	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9448	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.944b	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.944e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9451	60		rts				rts
.9452					SubTopTwoStack:
.9452	38		sec				sec
.9453	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9456	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9459	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.945c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.945f	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9462	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9465	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9468	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.946b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.946e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9471	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9474	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9477	60		rts				rts
.9478					AddInteger:
.9478	fa		plx				plx
.9479	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.947c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.947f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9480	0a		asl a				asl 	a
.9481	10 05		bpl $9488			bpl 	_NotRef
.9483	48		pha				pha
.9484	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9487	68		pla				pla
.9488					_NotRef:
.9488	0a		asl a				asl 	a 							; put MSB of type into A:7
.9489	30 0b		bmi $9496			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.948b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.948e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9491	f0 06		beq $9499			beq 	_IntegerCode 				; if clear, then we have two integers
.9493	4c 27 a7	jmp $a727			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9496					_StringData:
.9496	4c 4b 93	jmp $934b			jmp 	StringConcat							; at least one string - don't know both are strings.
.9499					_IntegerCode:
.9499					AddCode:
.9499	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.949c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.949f	10 8b		bpl $942c			bpl 	AddTopTwoStack
.94a1	20 52 94	jsr $9452			jsr 	SubTopTwoStack 				; do a physical subtraction
.94a4	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.94a7	10 09		bpl $94b2			bpl 	_AddExit
.94a9	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.94ac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94af	20 a4 9d	jsr $9da4			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.94b2					_AddExit:
.94b2	60		rts				rts
.94b3					SubInteger:
.94b3	fa		plx				plx
.94b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94b7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94ba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94bb	0a		asl a				asl 	a
.94bc	10 05		bpl $94c3			bpl 	_NotRef
.94be	48		pha				pha
.94bf	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94c2	68		pla				pla
.94c3					_NotRef:
.94c3	0a		asl a				asl 	a 							; put MSB of type into A:7
.94c4	30 0b		bmi $94d1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94c6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94c9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94cc	f0 06		beq $94d4			beq 	_IntegerCode 				; if clear, then we have two integers
.94ce	4c 2c a7	jmp $a72c			jmp 	FloatingPointSub 							; otherwise at least one float.
.94d1					_StringData:
.94d1	4c 6a ab	jmp $ab6a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94d4					_IntegerCode:
.94d4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.94d7	49 80		eor #$80			eor 	#$80
.94d9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.94dc	80 bb		bra $9499			bra 	AddCode 					; and do the same code as add.
.94de					AndInteger:
.94de	fa		plx				plx
.94df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94e2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94e5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94e6	0a		asl a				asl 	a
.94e7	10 05		bpl $94ee			bpl 	_NotRef
.94e9	48		pha				pha
.94ea	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ed	68		pla				pla
.94ee					_NotRef:
.94ee	0a		asl a				asl 	a
.94ef	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94f1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94f4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94f7	f0 03		beq $94fc			beq 	_IntegerCode 				; if clear, then we have two integers
.94f9	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.94fc					_IntegerCode:
.94fc	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94ff	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9502	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9505	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9508	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.950b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.950e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9511	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9514	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9517	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.951a	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.951d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9520	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9523	60		rts				rts
.9524					OraInteger:
.9524	fa		plx				plx
.9525	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9528	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.952b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.952c	0a		asl a				asl 	a
.952d	10 05		bpl $9534			bpl 	_NotRef
.952f	48		pha				pha
.9530	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9533	68		pla				pla
.9534					_NotRef:
.9534	0a		asl a				asl 	a
.9535	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9537	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.953a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.953d	f0 03		beq $9542			beq 	_IntegerCode 				; if clear, then we have two integers
.953f	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.9542					_IntegerCode:
.9542	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9545	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9548	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.954b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.954e	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9551	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9554	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9557	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.955a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.955d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9560	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9563	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9566	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9569	60		rts				rts
.956a					EorInteger:
.956a	fa		plx				plx
.956b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.956e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9571	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9572	0a		asl a				asl 	a
.9573	10 05		bpl $957a			bpl 	_NotRef
.9575	48		pha				pha
.9576	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9579	68		pla				pla
.957a					_NotRef:
.957a	0a		asl a				asl 	a
.957b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.957d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9580	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9583	f0 03		beq $9588			beq 	_IntegerCode 				; if clear, then we have two integers
.9585	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.9588					_IntegerCode:
.9588	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.958b	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.958e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9591	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9594	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9597	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.959a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.959d	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.95a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95a3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95a6	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.95a9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95ac	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95af	60		rts				rts
.95b0					WordIndirect:
.95b0	fa		plx				plx
.95b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95b4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95b7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95b8	0a		asl a				asl 	a
.95b9	10 05		bpl $95c0			bpl 	_NotRef
.95bb	48		pha				pha
.95bc	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95bf	68		pla				pla
.95c0					_NotRef:
.95c0	0a		asl a				asl 	a
.95c1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95c3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95c9	f0 03		beq $95ce			beq 	_IntegerCode 				; if clear, then we have two integers
.95cb	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.95ce					_IntegerCode:
.95ce	20 99 94	jsr $9499			jsr 	AddCode 					; add the two values
.95d1	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.95d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95d6	60		rts				rts
.95d7					ByteIndirect:
.95d7	fa		plx				plx
.95d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95db	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95de	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95df	0a		asl a				asl 	a
.95e0	10 05		bpl $95e7			bpl 	_NotRef
.95e2	48		pha				pha
.95e3	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95e6	68		pla				pla
.95e7					_NotRef:
.95e7	0a		asl a				asl 	a
.95e8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95ea	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ed	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95f0	f0 03		beq $95f5			beq 	_IntegerCode 				; if clear, then we have two integers
.95f2	4c 60 ab	jmp $ab60			jmp 	TypeError 					; anything else, type mismatch.
.95f5					_IntegerCode:
.95f5	20 99 94	jsr $9499			jsr 	AddCode 					; add the two values
.95f8	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.95fa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a6cc					ConvertInt16:
.a6cc	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a6cf	8e 10 04	stx $0410			stx 	NSMantissa1
.a6d2	9c 18 04	stz $0418			stz 	NSMantissa2
.a6d5	9c 20 04	stz $0420			stz 	NSMantissa3
.a6d8	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a6db	a2 00		ldx #$00			ldx 	#0 							; stack level
.a6dd	a9 0a		lda #$0a			lda 	#10 						; base
.a6df	80 00		bra $a6e1			bra 	ConvertInt32
.a6e1					ConvertInt32:
.a6e1	5a		phy				phy
.a6e2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a6e4	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a6e7	10 08		bpl $a6f1			bpl 	_CI32NotNeg
.a6e9	48		pha				pha
.a6ea	a9 2d		lda #$2d			lda 	#'-'
.a6ec	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a6ef	c8		iny				iny
.a6f0	68		pla				pla
.a6f1					_CI32NotNeg:
.a6f1	20 ff a6	jsr $a6ff			jsr 	_CI32DivideConvert 			; recursive conversion
.a6f4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a6f6	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a6f9	7a		ply				ply
.a6fa	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a6fc	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a6fe	60		rts				rts
.a6ff					_CI32DivideConvert:
.a6ff	e8		inx				inx 								; write to next slot up
.a700	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.a703	ca		dex				dex
.a704	20 01 a6	jsr $a601			jsr 	Int32Divide 				; divide
.a707	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a70a	48		pha				pha
.a70b	20 b0 a5	jsr $a5b0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a70e	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; is it zero ?
.a711	f0 06		beq $a719			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a713	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a716	20 ff a6	jsr $a6ff			jsr 	_CI32DivideConvert 			; and recusrively call.
.a719					_CI32NoRecurse:
.a719	68		pla				pla 								; remainder
.a71a	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a71c	90 02		bcc $a720			bcc 	_CI32NotHex
.a71e	69 26		adc #$26			adc 	#6+32
.a720					_CI32NotHex:
.a720	69 30		adc #$30			adc 	#48
.a722	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a725	c8		iny				iny
.a726	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.95fe					PrecedenceLevel:
>95fe	04					.byte	 4	; $00 <<
>95ff	02					.byte	 2	; $01 <=
>9600	02					.byte	 2	; $02 <>
>9601	00					.byte	 0	; $03 !!3
>9602	00					.byte	 0	; $04 ><
>9603	02					.byte	 2	; $05 >=
>9604	04					.byte	 4	; $06 >>
>9605	00					.byte	 0	; $07 !!7
>9606	00					.byte	 0	; $08 !!8
>9607	00					.byte	 0	; $09 !!9
>9608	00					.byte	 0	; $0a !!10
>9609	00					.byte	 0	; $0b !!11
>960a	00					.byte	 0	; $0c !!12
>960b	00					.byte	 0	; $0d !!13
>960c	00					.byte	 0	; $0e !!14
>960d	00					.byte	 0	; $0f !!15
>960e	00					.byte	 0	; $10 @
>960f	00					.byte	 0	; $11 !!17
>9610	00					.byte	 0	; $12 !!18
>9611	00					.byte	 0	; $13 [
>9612	04					.byte	 4	; $14 \
>9613	00					.byte	 0	; $15 ]
>9614	01					.byte	 1	; $16 ^
>9615	00					.byte	 0	; $17 _
>9616	00					.byte	 0	; $18 `
>9617	00					.byte	 0	; $19 !!25
>9618	00					.byte	 0	; $1a !!26
>9619	00					.byte	 0	; $1b {
>961a	01					.byte	 1	; $1c |
>961b	00					.byte	 0	; $1d }
>961c	00					.byte	 0	; $1e ~
>961d	00					.byte	 0	; $1f [7m<7F>[m
>961e	00					.byte	 0	; $20
>961f	05					.byte	 5	; $21 !
>9620	00					.byte	 0	; $22 "
>9621	00					.byte	 0	; $23 #
>9622	05					.byte	 5	; $24 $
>9623	04					.byte	 4	; $25 %
>9624	01					.byte	 1	; $26 &
>9625	00					.byte	 0	; $27 '
>9626	00					.byte	 0	; $28 (
>9627	00					.byte	 0	; $29 )
>9628	04					.byte	 4	; $2a *
>9629	03					.byte	 3	; $2b +
>962a	00					.byte	 0	; $2c ,
>962b	03					.byte	 3	; $2d -
>962c	00					.byte	 0	; $2e .
>962d	04					.byte	 4	; $2f /
>962e	00					.byte	 0	; $30 0
>962f	00					.byte	 0	; $31 1
>9630	00					.byte	 0	; $32 2
>9631	00					.byte	 0	; $33 3
>9632	00					.byte	 0	; $34 4
>9633	00					.byte	 0	; $35 5
>9634	00					.byte	 0	; $36 6
>9635	00					.byte	 0	; $37 7
>9636	00					.byte	 0	; $38 8
>9637	00					.byte	 0	; $39 9
>9638	00					.byte	 0	; $3a :
>9639	00					.byte	 0	; $3b ;
>963a	02					.byte	 2	; $3c <
>963b	02					.byte	 2	; $3d =
>963c	02					.byte	 2	; $3e >
>963d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.963e					EvaluateExpressionAt0:
.963e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9640					EvaluateExpression:
.9640	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9642					EvaluateExpressionAtPrecedence:
.9642	48		pha				pha 								; save precedence level
.9643	20 11 99	jsr $9911			jsr 	EvaluateTerm 				; evaluate term into level X.
.9646	68		pla				pla 								; restore precedence level.
.9647					_EXPRLoop:
.9647	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9649	b1 30		lda ($30),y			lda 	(codePtr),y
.964b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.964d	b0 25		bcs $9674			bcs 	_EXPRExit
.964f	da		phx				phx 								; read the operator precedence
.9650	aa		tax				tax
.9651	bd fe 95	lda $95fe,x			lda 	PrecedenceLevel,x
.9654	fa		plx				plx
.9655	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9657	f0 1b		beq $9674			beq 	_EXPRExit
.9659	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.965b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.965d	c5 37		cmp $37				cmp 	zTemp0+1
.965f	b0 13		bcs $9674			bcs		_EXPRExit 					; if current >= operator exit
.9661	48		pha				pha 								; save current precedence.
.9662	b1 30		lda ($30),y			lda 	(codePtr),y
.9664	c8		iny				iny
.9665	48		pha				pha
.9666	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9668	e8		inx				inx 								; work out the right hand side.
.9669	20 42 96	jsr $9642			jsr 	EvaluateExpressionAtPrecedence
.966c	ca		dex				dex
.966d	68		pla				pla 								; get operator, call the code.
.966e	20 77 96	jsr $9677			jsr 	_EXPRCaller
.9671	68		pla				pla 								; restore precedence level
.9672	80 d3		bra $9647			bra 	_EXPRLoop 					; and go round.
.9674					_EXPRExit:
.9674	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9676	60		rts				rts
.9677					_EXPRCaller:
.9677	da		phx				phx 								; save on stack, first thing is to restore it
.9678	0a		asl a				asl 	a 							; double so can use vectors into X
.9679	aa		tax				tax
.967a	7c 7e 8e	jmp ($8e7e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a727					FloatingPointAdd:
.a727	20 c8 a8	jsr $a8c8			jsr 	FloatPrepare 				; prepare for floats
.a72a	80 0b		bra $a737			bra 	FloatAdd
.a72c					FloatingPointSub:
.a72c	20 c8 a8	jsr $a8c8			jsr 	FloatPrepare 				; prepare for floats
.a72f					FloatSubtract:
.a72f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a732	49 80		eor #$80			eor 	#$80
.a734	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a737					FloatAdd:
.a737	48		pha				pha
.a738	5a		phy				phy
.a739	20 d9 a8	jsr $a8d9			jsr 	NSNormalise 				; normalise S[X]
.a73c	f0 54		beq $a792			beq 	_FAReturn1
.a73e	e8		inx				inx 								; normalise S[X+1]
.a73f	20 d9 a8	jsr $a8d9			jsr 	NSNormalise
.a742	ca		dex				dex
.a743	c9 00		cmp #$00			cmp 	#0
.a745	f0 6f		beq $a7b6			beq 	_FAExit 					; if so, just return A
.a747	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a74a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a74d	f0 1b		beq $a76a			beq 	_FAExponentsEqual
.a74f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a752	a8		tay				tay
.a753	38		sec				sec 								; do a signed comparison of the exponents.
.a754	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a757	50 02		bvc $a75b			bvc 	_FANoSignedChange
.a759	49 80		eor #$80			eor 	#$80
.a75b					_FANoSignedChange:
.a75b	29 80		and #$80			and 	#$80
.a75d	10 03		bpl $a762			bpl 	_FAHaveMax
.a75f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a762					_FAHaveMax:
.a762	20 b9 a7	jsr $a7b9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a765	e8		inx				inx
.a766	20 b9 a7	jsr $a7b9			jsr 	_FAShiftToExponent
.a769	ca		dex				dex
.a76a					_FAExponentsEqual:
.a76a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a76d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a770	30 10		bmi $a782			bmi 	_FADifferentSigns
.a772	20 2c 94	jsr $942c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a775	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a778	10 3c		bpl $a7b6			bpl 	_FAExit 					; if no, we are done.
.a77a	20 12 9e	jsr $9e12			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a77d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a780	80 34		bra $a7b6			bra 	_FAExit
.a782					_FADifferentSigns:
.a782	20 52 94	jsr $9452			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a785	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a788	10 2c		bpl $a7b6			bpl 	_FAExit 					; if no, we are done.
.a78a	20 9b 9d	jsr $9d9b			jsr 	NSMNegate 					; netate result
.a78d	20 a4 9d	jsr $9da4			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a790	80 24		bra $a7b6			bra 	_FAExit
.a792					_FAReturn1:
.a792	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a795	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a798	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a79b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a79e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a7a1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7a4	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a7a7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7aa	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a7ad	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a7b0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a7b3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a7b6					_FAExit:
.a7b6	7a		ply				ply
.a7b7	68		pla				pla
.a7b8	60		rts				rts
.a7b9					_FAShiftToExponent:
.a7b9					_FAShiftToExponent2:
.a7b9	98		tya				tya 								; compare Y to exponent
.a7ba	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a7bd	f0 08		beq $a7c7			beq 	_FASEExit 					; exit if so.
.a7bf	20 12 9e	jsr $9e12			jsr 	NSMShiftRight	 			; shift the mantissa right
.a7c2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a7c5	80 f2		bra $a7b9			bra 	_FAShiftToExponent2
.a7c7					_FASEExit:
.a7c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a7c8					CompareFloat:
.a7c8	20 2f a7	jsr $a72f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a7cb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a7ce	29 f8		and #$f8			and 	#$F8
.a7d0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a7d3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a7d6	f0 09		beq $a7e1			beq 	_FCExit 					; zero, so approximately identical
.a7d8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a7da	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a7dd	10 02		bpl $a7e1			bpl 	_FCExit
.a7df					_FCNegative:
.a7df	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a7e1					_FCExit:
.a7e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a7e2					FDivideCommand:
.a7e2	fa		plx				plx	 								; restore stack position
.a7e3	20 c8 a8	jsr $a8c8			jsr 	FloatPrepare 				; prepare for floats
.a7e6					FloatDivide:
.a7e6	48		pha				pha
.a7e7	e8		inx				inx
.a7e8	20 d9 a8	jsr $a8d9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a7eb	ca		dex				dex
.a7ec	c9 00		cmp #$00			cmp 	#0
.a7ee	f0 20		beq $a810			beq 	_FDZero
.a7f0	20 d9 a8	jsr $a8d9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a7f3	f0 19		beq $a80e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a7f5	20 23 a6	jsr $a623			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a7f8	20 b0 a5	jsr $a5b0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a7fb	20 d9 a8	jsr $a8d9			jsr		NSNormalise 				; renormalise
.a7fe	20 be a6	jsr $a6be			jsr 	CalculateSign 				; calculate result sign
.a801	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a804	38		sec				sec
.a805	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a808	38		sec				sec
.a809	e9 1e		sbc #$1e			sbc 	#30
.a80b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a80e					_FDExit:
.a80e	68		pla				pla
.a80f	60		rts				rts
.a810					_FDZero:
.a810	a9 03		lda #$03		lda	#3
.a812	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a815					FloatFractionalPart:
.a815	5a		phy				phy
.a816	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a819	29 7f		and #$7f			and 	#$7F
.a81b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a81e	20 d9 a8	jsr $a8d9			jsr 	NSNormalise
.a821	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a824	38		sec				sec
.a825	e9 e0		sbc #$e0			sbc 	#$E0
.a827	90 31		bcc $a85a			bcc 	_FFPExit 					; already fractional
.a829	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a82b	b0 2a		bcs $a857			bcs 	_FFPZero
.a82d	a8		tay				tay 								; put count to do in Y
.a82e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a831	20 5c a8	jsr $a85c			jsr 	_FFPPartial
.a834	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a837	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a83a	20 5c a8	jsr $a85c			jsr 	_FFPPartial
.a83d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a840	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a843	20 5c a8	jsr $a85c			jsr 	_FFPPartial
.a846	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a849	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a84c	20 5c a8	jsr $a85c			jsr 	_FFPPartial
.a84f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a852	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; zeroed check.
.a855	d0 03		bne $a85a			bne 	_FFPExit
.a857					_FFPZero:
.a857	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.a85a					_FFPExit:
.a85a	7a		ply				ply
.a85b	60		rts				rts
.a85c					_FFPPartial:
.a85c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a85e	f0 17		beq $a877			beq 	_FFFPPExit
.a860	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a862	b0 0c		bcs $a870			bcs 	_FFFPPWholeByte
.a864	5a		phy				phy
.a865					_FFFPPLeft:
.a865	0a		asl a				asl 	a
.a866	88		dey				dey
.a867	d0 fc		bne $a865			bne 	_FFFPPLeft
.a869	7a		ply				ply
.a86a					_FFFPPRight:
.a86a	4a		lsr a				lsr 	a
.a86b	88		dey				dey
.a86c	d0 fc		bne $a86a			bne 	_FFFPPRight
.a86e	80 07		bra $a877			bra 	_FFFPPExit
.a870					_FFFPPWholeByte:
.a870	98		tya				tya 								; subtract 8 from count
.a871	38		sec				sec
.a872	e9 08		sbc #$08			sbc 	#8
.a874	a8		tay				tay
.a875	a9 00		lda #$00			lda 	#0 							; and clear all
.a877					_FFFPPExit:
.a877	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a878					FloatIntegerPart:
.a878	48		pha				pha
.a879	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a87c	f0 1f		beq $a89d			beq 	_FIPExit 					; if so do nothing
.a87e	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; is it zero ?
.a881	f0 17		beq $a89a			beq 	_FIPZero 					; if so return zero.
.a883	20 d9 a8	jsr $a8d9			jsr 	NSNormalise 				; normalise
.a886	f0 12		beq $a89a			beq 	_FIPZero 					; normalised to zero, exit zero
.a888					_FIPShift:
.a888	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a88b	10 08		bpl $a895			bpl 	_FIPCheckZero
.a88d	20 12 9e	jsr $9e12			jsr 	NSMShiftRight 				; shift mantissa right
.a890	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a893	80 f3		bra $a888			bra 	_FIPShift
.a895					_FIPCheckZero:
.a895	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; avoid -0 problem
.a898	d0 03		bne $a89d			bne 	_FIPExit 					; set to zero if mantissa zero.
.a89a					_FIPZero:
.a89a	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.a89d					_FIPExit:
.a89d	68		pla				pla
.a89e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a89f					FloatingPointMultiply:
.a89f	20 c8 a8	jsr $a8c8			jsr 	FloatPrepare 				; prepare for floats
.a8a2					FloatMultiply:
.a8a2	48		pha				pha
.a8a3	20 d9 a8	jsr $a8d9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a8a6	f0 1b		beq $a8c3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a8a8	e8		inx				inx
.a8a9	20 d9 a8	jsr $a8d9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a8ac	ca		dex				dex
.a8ad	c9 00		cmp #$00			cmp 	#0
.a8af	f0 0f		beq $a8c0			beq 	_FDSetZero
.a8b1	20 79 a6	jsr $a679			jsr 	MultiplyShort 				; calculate the result.
.a8b4	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a8b7	18		clc				clc
.a8b8	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a8bb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a8be	80 03		bra $a8c3			bra 	_FDExit
.a8c0					_FDSetZero:
.a8c0	20 ef 9d	jsr $9def			jsr 	NSMSetZero 					; return 0
.a8c3					_FDExit:
.a8c3	20 d9 a8	jsr $a8d9			jsr 	NSNormalise 				; normalise the result
.a8c6	68		pla				pla
.a8c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a8c8					FloatPrepare:
.a8c8	20 50 97	jsr $9750			jsr 	DereferenceTopTwo 			; dereference the top two values
.a8cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a8ce	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a8d1	29 10		and #$10			and 	#NSBIsString
.a8d3	d0 01		bne $a8d6			bne 	_FDType
.a8d5	60		rts				rts
.a8d6					_FDType:
.a8d6	4c 60 ab	jmp $ab60			jmp 	TypeError
.a8d9					NSNormalise:
.a8d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a8dc	29 80		and #$80			and 	#$80
.a8de	09 08		ora #$08			ora 	#NSTFloat
.a8e0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a8e3	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; if zero exit
.a8e6	d0 09		bne $a8f1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a8e8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a8eb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a8ee	a9 00		lda #$00			lda 	#0 							; set Z flag
.a8f0	60		rts				rts
.a8f1					_NSNormaliseOptimise:
.a8f1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a8f4	d0 22		bne $a918			bne 	_NSNormaliseLoop
.a8f6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a8f9	30 1d		bmi $a918			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a8fb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a8fe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a901	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a904	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a907	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a90a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a90d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a910	38		sec				sec
.a911	e9 08		sbc #$08			sbc 	#8
.a913	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a916	80 d9		bra $a8f1			bra 	_NSNormaliseOptimise
.a918					_NSNormaliseLoop:
.a918	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a91b	70 08		bvs $a925			bvs 	_NSNExit 					; exit if so with Z flag clear
.a91d	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; shift mantissa left
.a920	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a923	80 f3		bra $a918			bra 	_NSNormaliseLoop
.a925					_NSNExit:
.a925	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a927	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.967d					AssignNumber:
.967d	5a		phy				phy
.967e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9681	85 36		sta $36				sta 	zTemp0
.9683	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9686	85 37		sta $37				sta 	zTemp0+1
.9688	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.968b	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.968d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9690	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9692	c9 08		cmp #$08			cmp 	#NSTFloat
.9694	f0 2a		beq $96c0			beq 	_ANFloat
.9696	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9699	f0 05		beq $96a0			beq		_ANNotFloat
.969b	e8		inx				inx
.969c	20 78 a8	jsr $a878			jsr 	FloatIntegerPart 			; make it an integer
.969f	ca		dex				dex
.96a0					_ANNotFloat:
.96a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.96a3	29 03		and #$03			and 	#3
.96a5	d0 05		bne $96ac			bne 	_ANByteWord
.96a7	20 cc 96	jsr $96cc			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.96aa	80 1e		bra $96ca			bra 	_ANExit
.96ac					_ANByteWord:
.96ac	48		pha				pha 								; save count
.96ad	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.96b0	92 36		sta ($36)			sta 	(zTemp0)
.96b2	68		pla				pla
.96b3	c9 01		cmp #$01			cmp	 	#1
.96b5	f0 13		beq $96ca			beq 	_ANExit
.96b7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.96ba	a0 01		ldy #$01			ldy 	#1
.96bc	91 36		sta ($36),y			sta 	(zTemp0),y
.96be	80 0a		bra $96ca			bra 	_ANExit
.96c0					_ANFloat:
.96c0	20 cc 96	jsr $96cc			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.96c3	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.96c6	a0 04		ldy #$04			ldy 	#4
.96c8	91 36		sta ($36),y			sta 	(zTemp0),y
.96ca					_ANExit:
.96ca	7a		ply				ply
.96cb	60		rts				rts
.96cc					_ANCopy4PackSign:
.96cc	a0 03		ldy #$03			ldy 	#3
.96ce	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.96d1	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.96d3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.96d6	91 36		sta ($36),y			sta 	(zTemp0),y
.96d8	88		dey				dey
.96d9	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.96dc	91 36		sta ($36),y			sta 	(zTemp0),y
.96de	88		dey				dey
.96df	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.96e2	91 36		sta ($36),y			sta 	(zTemp0),y
.96e4	88		dey				dey
.96e5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96e8	91 36		sta ($36),y			sta 	(zTemp0),y
.96ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.96eb					AssignString:
.96eb	5a		phy				phy
.96ec	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96ef	85 38		sta $38				sta 	zTemp1
.96f1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.96f4	85 39		sta $39				sta 	zTemp1+1
.96f6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.96f9	85 36		sta $36				sta 	zTemp0
.96fb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96fe	85 37		sta $37				sta 	zTemp0+1
.9700	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9702	b1 36		lda ($36),y			lda 	(zTemp0),y
.9704	f0 23		beq $9729			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9706	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9707	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9709	e9 02		sbc #$02			sbc 	#2
.970b	85 3c		sta $3c				sta 	zsTemp
.970d	a0 01		ldy #$01			ldy 	#1
.970f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9711	e9 00		sbc #$00			sbc 	#0
.9713	85 3d		sta $3d				sta 	zsTemp+1
.9715	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9717					_ASGetLength:
.9717	c8		iny				iny
.9718	b1 38		lda ($38),y			lda 	(zTemp1),y
.971a	d0 fb		bne $9717			bne 	_ASGetLength
.971c	98		tya				tya 								; is this length <= current length
.971d	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.971f	90 20		bcc $9741			bcc 	_ASCopyString
.9721	f0 1e		beq $9741			beq 	_ASCopyString
.9723	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9725	a0 01		ldy #$01			ldy 	#1
.9727	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9729					_ASNewStringRequired:
.9729	e8		inx				inx 								; concrete the new string.
.972a	20 fa ad	jsr $adfa			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.972d	ca		dex				dex
.972e	18		clc				clc
.972f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9732	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9734	92 36		sta ($36)			sta 	(zTemp0)
.9736	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9739	69 00		adc #$00			adc 	#0
.973b	a0 01		ldy #$01			ldy 	#1
.973d	91 36		sta ($36),y			sta 	(zTemp0),y
.973f	80 0d		bra $974e			bra 	_ASExit
.9741					_ASCopyString:
.9741	a0 00		ldy #$00			ldy 	#0
.9743					_ASCopyLoop:
.9743	b1 38		lda ($38),y			lda 	(zTemp1),y
.9745	c8		iny				iny
.9746	c8		iny				iny
.9747	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9749	88		dey				dey
.974a	c9 00		cmp #$00			cmp 	#0
.974c	d0 f5		bne $9743			bne 	_ASCopyLoop
.974e					_ASExit:
.974e	7a		ply				ply
.974f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9750					DereferenceTopTwo:
.9750	e8		inx				inx
.9751	20 55 97	jsr $9755			jsr 	Dereference 				; deref x+1
.9754	ca		dex				dex  								; falls through to deref x
.9755					Dereference:
.9755	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9758	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.975a	f0 57		beq $97b3			beq 	_DRFExit 					; not a reference
.975c	5a		phy				phy
.975d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9760	85 36		sta $36				sta 	zTemp0
.9762	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9765	85 37		sta $37				sta 	zTemp0+1
.9767	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.976a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.976c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.976f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9772	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9774	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9776	f0 0f		beq $9787			beq 	_DRFDereferenceTwo
.9778	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.977a	f0 39		beq $97b5			beq 	_DRFFull
.977c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.977f	29 03		and #$03			and 	#3
.9781	f0 32		beq $97b5			beq 	_DRFFull 					; the whole word
.9783	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9785	f0 07		beq $978e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9787					_DRFDereferenceTwo:
.9787	a0 01		ldy #$01			ldy 	#1
.9789	b1 36		lda ($36),y			lda 	(zTemp0),y
.978b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.978e					_DRFClear23:
.978e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9791	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9794	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9797	29 18		and #$18			and 	#NSBTypeMask
.9799	9d 00 04	sta $0400,x			sta 	NSStatus,x
.979c	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.979e	d0 12		bne $97b2			bne 	_DRFNotString
.97a0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.97a3	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.97a6	d0 0a		bne $97b2			bne 	_DRFNotString
.97a8	a9 b4		lda #$b4			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.97aa	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.97ad	a9 97		lda #$97			lda 	#_DRFNullString >> 8
.97af	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.97b2					_DRFNotString
.97b2	7a		ply				ply 								; restore Y and exit
.97b3					_DRFExit:
.97b3	60		rts				rts
.97b4					_DRFNullString:
>97b4	00						.byte 	0
.97b5					_DRFFull:
.97b5	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.97b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.97b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97bc	c8		iny				iny
.97bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.97bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97c2	c8		iny				iny
.97c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.97c5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97c8	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.97cb	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.97ce	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.97d0	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.97d3	f0 06		beq $97db			beq 	_DRFNoExponent
.97d5	c8		iny				iny 								; if not, read the exponent as well.
.97d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.97d8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.97db					_DRFNoExponent:
.97db	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.97de	10 0d		bpl $97ed			bpl 	_DRFExit2 					; if not, then exit.
.97e0	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.97e2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97e5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.97e8	09 80		ora #$80			ora 	#NSBIsNegative
.97ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97ed					_DRFExit2:
.97ed	7a		ply				ply
.97ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.97ef					EncodeNumberStart:
.97ef	38		sec				sec
.97f0	80 01		bra $97f3			bra 	EncodeNumberContinue+1
.97f2					EncodeNumberContinue:
.97f2	18		clc				clc
.97f3					EncodeNumber:
.97f3	08		php				php 								; save reset.
.97f4	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.97f6	f0 12		beq $980a			beq 	_ENIsOkay
.97f8	c9 30		cmp #$30			cmp 	#"0"
.97fa	90 04		bcc $9800			bcc 	_ENBadNumber
.97fc	c9 3a		cmp #$3a			cmp 	#"9"+1
.97fe	90 0a		bcc $980a			bcc 	_ENIsOkay
.9800					_ENBadNumber:
.9800	28		plp				plp 								; throw saved reset
.9801	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9804	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9806	f0 7e		beq $9886			beq 	_ENConstructFinal
.9808					_ENFail:
.9808	18		clc				clc 								; not allowed
.9809	60		rts				rts
.980a					_ENIsOkay:
.980a	28		plp				plp 								; are we restarting
.980b	90 15		bcc $9822			bcc 	_ENNoRestart
.980d					_ENStartEncode:
.980d	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.980f	f0 0c		beq $981d			beq 	_ENFirstDP
.9811	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9813	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.9816	a9 01		lda #$01			lda 	#ESTA_Low
.9818					_ENExitChange:
.9818	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.981b	38		sec				sec
.981c	60		rts				rts
.981d					_ENFirstDP:
.981d	20 ef 9d	jsr $9def			jsr 	NSMSetZero 					; clear integer part
.9820	80 3f		bra $9861			bra 	_ESTASwitchFloat			; go straight to float and exi
.9822					_ENNoRestart:
.9822	48		pha				pha 								; save on stack.
.9823	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9826	c9 01		cmp #$01			cmp 	#ESTA_Low
.9828	f0 09		beq $9833			beq  	_ESTALowState
.982a	c9 02		cmp #$02			cmp 	#ESTA_High
.982c	f0 29		beq $9857			beq 	_ESTAHighState
.982e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9830	f0 3b		beq $986d			beq 	_ESTADecimalState
>9832	db						.byte 	$DB 						; causes a break in the emulator
.9833					_ESTALowState:
.9833	68		pla				pla 								; get value back
.9834	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9836	f0 29		beq $9861			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9838	29 0f		and #$0f			and 	#15 						; make digit
.983a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.983d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9840	0a		asl a				asl 	a
.9841	0a		asl a				asl 	a
.9842	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9845	0a		asl a				asl 	a
.9846	6d 86 04	adc $0486			adc 	DigitTemp
.9849	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.984c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.984e	90 05		bcc $9855			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9850	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9852	8d 85 04	sta $0485			sta 	EncodeState
.9855					_ESTANoSwitch:
.9855	38		sec				sec
.9856	60		rts				rts
.9857					_ESTAHighState:
.9857	68		pla				pla 								; get value back
.9858	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.985a	f0 05		beq $9861			beq 	_ESTASwitchFloat
.985c	20 c0 98	jsr $98c0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.985f	38		sec				sec
.9860	60		rts				rts
.9861					_ESTASwitchFloat:
.9861	9c 87 04	stz $0487			stz 	DecimalCount
.9864	e8		inx				inx 								; zero the decimal additive.
.9865	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.9868	ca		dex				dex
.9869	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.986b	80 ab		bra $9818			bra 	_ENExitChange
.986d					_ESTADecimalState:
.986d	68		pla				pla 								; digit.
.986e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9870	f0 96		beq $9808			beq 	_ENFail
.9872	e8		inx				inx 								; put digit into fractional part of X+1
.9873	20 c0 98	jsr $98c0			jsr 	ESTAShiftDigitIntoMantissa
.9876	ca		dex				dex
.9877	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.987a	ad 87 04	lda $0487			lda 	DecimalCount
.987d	c9 0b		cmp #$0b			cmp 	#11
.987f	f0 02		beq $9883			beq 	_ESTADSFail
.9881	38		sec				sec
.9882	60		rts				rts
.9883					_ESTADSFail:
.9883	4c 5b ab	jmp $ab5b			jmp 	RangeError
.9886					_ENConstructFinal:
.9886	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9889	f0 33		beq $98be			beq 	_ENCFExit 					; no decimals
.988b	5a		phy				phy
.988c	0a		asl a				asl 	a 							; x 4 and CLC
.988d	0a		asl a				asl 	a
.988e	6d 87 04	adc $0487			adc 	DecimalCount
.9891	a8		tay				tay
.9892	b9 1a ab	lda $ab1a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9895	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9898	b9 1b ab	lda $ab1b,y			lda 	DecimalScalarTable-5+1,y
.989b	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.989e	b9 1c ab	lda $ab1c,y			lda 	DecimalScalarTable-5+2,y
.98a1	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.98a4	b9 1d ab	lda $ab1d,y			lda 	DecimalScalarTable-5+3,y
.98a7	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.98aa	b9 1e ab	lda $ab1e,y			lda 	DecimalScalarTable-5+4,y
.98ad	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.98b0	a9 08		lda #$08			lda 	#NSTFloat
.98b2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.98b5	7a		ply				ply
.98b6	e8		inx				inx 								; multiply decimal const by decimal scalar
.98b7	20 a2 a8	jsr $a8a2			jsr 	FloatMultiply
.98ba	ca		dex				dex
.98bb	20 37 a7	jsr $a737			jsr 	FloatAdd 					; add to integer part.
.98be					_ENCFExit:
.98be	18		clc				clc 								; reject the digit.
.98bf	60		rts				rts
.98c0					ESTAShiftDigitIntoMantissa:
.98c0	29 0f		and #$0f			and 	#15 						; save digit
.98c2	48		pha				pha
.98c3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.98c6	48		pha				pha
.98c7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.98ca	48		pha				pha
.98cb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ce	48		pha				pha
.98cf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.98d2	48		pha				pha
.98d3	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 2
.98d6	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 4
.98d9	18		clc				clc 								; pop mantissa and add
.98da	68		pla				pla
.98db	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.98de	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98e1	68		pla				pla
.98e2	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.98e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98e8	68		pla				pla
.98e9	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.98ec	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98ef	68		pla				pla
.98f0	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.98f3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.98f6	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 10
.98f9	68		pla				pla 								; add digit
.98fa	18		clc				clc
.98fb	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.98fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9901	90 0d		bcc $9910			bcc 	_ESTASDExit
.9903	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9906	d0 08		bne $9910			bne 	_ESTASDExit
.9908	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.990b	d0 03		bne $9910			bne 	_ESTASDExit
.990d	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9910					_ESTASDExit:
.9910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9911					EvaluateTerm:
.9911	b1 30		lda ($30),y			lda 	(codePtr),y
.9913	30 18		bmi $992d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9915	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9917	b0 6f		bcs $9988			bcs 	_ETVariable
.9919	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.991b	90 6e		bcc $998b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.991d	c9 3a		cmp #$3a			cmp 	#'9'+1
.991f	b0 6a		bcs $998b			bcs 	_ETPuncUnary
.9921	20 ef 97	jsr $97ef			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9924					_ETNumber:
.9924	c8		iny				iny 								; keep encoding until we have the numbers
.9925	b1 30		lda ($30),y			lda 	(codePtr),y
.9927	20 f2 97	jsr $97f2			jsr 	EncodeNumberContinue
.992a	b0 f8		bcs $9924			bcs 	_ETNumber 					; go back if accepted.
.992c	60		rts				rts
.992d					_ETCheckUnary:
.992d	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.992f	f0 41		beq $9972			beq 	_ETString
.9931	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9933	f0 12		beq $9947			beq 	_ETHexConstant
.9935	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9937	90 0b		bcc $9944			bcc 	_ETSyntaxError
.9939	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.993b	b0 07		bcs $9944			bcs 	_ETSyntaxError
.993d	da		phx				phx 								; push X on the stack
.993e	0a		asl a				asl 	a 							; put vector x 2 into X
.993f	aa		tax				tax
.9940	c8		iny				iny 								; consume unary function token
.9941	7c fe 8e	jmp ($8efe,x)			jmp 	(VectorSet0,x) 				; and do it.
.9944					_ETSyntaxError:
.9944	4c 56 ab	jmp $ab56			jmp 	SyntaxError
.9947					_ETHexConstant:
.9947	c8		iny				iny 								; skip #
.9948	c8		iny				iny 								; skip count
.9949	20 ef 9d	jsr $9def			jsr 	NSMSetZero 					; clear result
.994c					_ETHLoop:
.994c	b1 30		lda ($30),y			lda 	(codePtr),y
.994e	c8		iny				iny 								; and consume
.994f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9951	f0 1e		beq $9971			beq 	_ETHExit
.9953	48		pha				pha 								; save on stack.
.9954	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 2
.9957	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 4
.995a	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 8
.995d	20 04 9e	jsr $9e04			jsr 	NSMShiftLeft 				; x 16
.9960	68		pla				pla 								; ASCII
.9961	c9 41		cmp #$41			cmp 	#'A'
.9963	90 02		bcc $9967			bcc 	_ETHNotChar
.9965	e9 07		sbc #$07			sbc 	#7
.9967					_ETHNotChar:
.9967	29 0f		and #$0f			and 	#15 						; digit now
.9969	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.996c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.996f	80 db		bra $994c			bra 	_ETHLoop 					; go round.
.9971					_ETHExit:
.9971	60		rts				rts
.9972					_ETString:
.9972	c8		iny				iny 								; look at length
.9973	b1 30		lda ($30),y			lda 	(codePtr),y
.9975	48		pha				pha
.9976	c8		iny				iny 								; first character
.9977	20 39 9e	jsr $9e39			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.997a	68		pla				pla 								; restore count and save
.997b	85 36		sta $36				sta 	zTemp0
.997d	98		tya				tya 								; add length to Y to skip it.
.997e	18		clc				clc
.997f	65 36		adc $36				adc 	zTemp0
.9981	a8		tay				tay
.9982	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9984	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9987	60		rts				rts
.9988					_ETVariable:
.9988	4c e2 99	jmp $99e2			jmp 	VariableHandler
.998b					_ETPuncUnary:
.998b	c8		iny				iny 								; consume the unary character
.998c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.998e	f0 2d		beq $99bd			beq 	_ETUnaryNegate
.9990	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9992	f0 39		beq $99cd			beq 	_ETDereference
.9994	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9996	f0 43		beq $99db			beq 	_ETParenthesis
.9998	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.999a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.999c	f0 06		beq $99a4			beq 	_ETIndirection
.999e	e6 36		inc $36				inc 	zTemp0
.99a0	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99a2	d0 a0		bne $9944			bne 	_ETSyntaxError
.99a4					_ETIndirection:
.99a4	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.99a6	1a		inc a				inc 	a
.99a7	48		pha				pha
.99a8	20 11 99	jsr $9911			jsr 	EvaluateTerm				; evaluate the term
.99ab	20 55 97	jsr $9755			jsr 	Dereference 				; dereference it.
.99ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.99b1	d0 07		bne $99ba			bne 	_ETTypeMismatch
.99b3	68		pla				pla 								; indirection 1-2
.99b4	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.99b6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99b9	60		rts				rts
.99ba					_ETTypeMismatch:
.99ba	4c 60 ab	jmp $ab60			jmp 	TypeError
.99bd					_ETUnaryNegate:
.99bd	20 11 99	jsr $9911			jsr 	EvaluateTerm				; evaluate the term
.99c0	20 55 97	jsr $9755			jsr 	Dereference 				; dereference it.
.99c3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.99c6	29 10		and #$10			and 	#NSTString
.99c8	d0 f0		bne $99ba			bne 	_ETTypeMismatch
.99ca	4c 9b 9d	jmp $9d9b			jmp 	NSMNegate  					; just toggles the sign bit.
.99cd					_ETDereference:
.99cd	20 11 99	jsr $9911			jsr 	EvaluateTerm				; evaluate the term
.99d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.99d3	29 20		and #$20			and 	#NSBIsReference
.99d5	f0 e3		beq $99ba			beq 	_ETTypeMismatch
.99d7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.99da	60		rts				rts
.99db					_ETParenthesis:
.99db	20 40 96	jsr $9640			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.99de	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; check for )
.99e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.99e2					VariableHandler:
.99e2	b1 30		lda ($30),y			lda 	(codePtr),y
.99e4	18		clc				clc
.99e5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99e7	85 37		sta $37				sta 	zTemp0+1
.99e9	c8		iny				iny
.99ea	b1 30		lda ($30),y			lda 	(codePtr),y
.99ec	85 36		sta $36				sta 	zTemp0
.99ee	c8		iny				iny
.99ef	18		clc				clc									; copy variable address+3 to mantissa
.99f0	69 03		adc #$03			adc 	#3
.99f2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99f5	a5 37		lda $37				lda 	zTemp0+1
.99f7	69 00		adc #$00			adc 	#0
.99f9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99fc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.99ff	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a02	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a05	5a		phy				phy
.9a06	a0 02		ldy #$02			ldy 	#2 							; read type
.9a08	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a0a	7a		ply				ply
.9a0b	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a0d	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a0f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a12	29 04		and #$04			and 	#NSBIsArray
.9a14	d0 01		bne $9a17			bne 	_VHArray
.9a16	60		rts				rts
.9a17					_VHArray:
.9a17	e8		inx				inx
.9a18	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a1b	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a1d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a20	b1 30		lda ($30),y			lda 	(codePtr),y
.9a22	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a24	d0 06		bne $9a2c			bne 	_VHNoSecondIndex
.9a26	c8		iny				iny 								; skip the comma
.9a27	e8		inx				inx
.9a28	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a2b	ca		dex				dex
.9a2c					_VHNoSecondIndex:
.9a2c	ca		dex				dex 								; set X back.
.9a2d	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; and check the right bracket.
.9a30	5a		phy				phy 								; save position
.9a31	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9a34	85 3e		sta $3e				sta 	zaTemp
.9a36	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a39	85 3f		sta $3f				sta 	zaTemp+1
.9a3b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a3d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a3f	f0 02		beq $9a43			beq 	_VHHas2Mask
.9a41	a9 ff		lda #$ff			lda 	#$FF
.9a43					_VHHas2Mask:
.9a43	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9a46	f0 54		beq $9a9c			beq 	_VHBadIndex
.9a48	0a		asl a				asl 	a 							; carry will be set if a second index
.9a49	90 09		bcc $9a54			bcc 	_VHCheckFirstIndex
.9a4b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9a4d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a4f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9a52	90 48		bcc $9a9c			bcc 	_VHBadIndex
.9a54					_VHCheckFirstIndex:
.9a54	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9a56	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a58	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9a5b	90 3f		bcc $9a9c			bcc 	_VHBadIndex
.9a5d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a5f	64 37		stz $37				stz 	zTemp0+1
.9a61	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a64	30 0f		bmi $9a75			bmi 	_VHNoMultiply
.9a66	da		phx				phx
.9a67	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9a6a	48		pha				pha
.9a6b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9a6d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a6f	1a		inc a				inc 	a 							; add 1 for zero base
.9a70	fa		plx				plx
.9a71	20 f2 a9	jsr $a9f2			jsr 	Multiply8x8 				; calculate -> Z0
.9a74	fa		plx				plx
.9a75					_VHNoMultiply:
.9a75	18		clc				clc
.9a76	a5 36		lda $36				lda 	zTemp0
.9a78	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9a7b	85 36		sta $36				sta 	zTemp0
.9a7d	a5 37		lda $37				lda 	zTemp0+1
.9a7f	69 00		adc #$00			adc 	#0
.9a81	85 37		sta $37				sta 	zTemp0+1
.9a83	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a86	20 62 89	jsr $8962			jsr 	ScaleByBaseType
.9a89	18		clc				clc
.9a8a	b2 3e		lda ($3e)			lda 	(zaTemp)
.9a8c	65 36		adc $36				adc 	zTemp0
.9a8e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a91	a0 01		ldy #$01			ldy 	#1
.9a93	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a95	65 37		adc $37				adc 	zTemp0+1
.9a97	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a9a	7a		ply				ply 								; restore position
.9a9b	60		rts				rts
.9a9c					_VHBadIndex:
.9a9c	a9 17		lda #$17		lda	#23
.9a9e	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a928					AbsUnary:
.a928	fa		plx				plx 								; restore stack pos
.a929	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.a92c	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a92f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a932	29 7f		and #$7f			and 	#$7F
.a934	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a937	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9aa1					AllocUnary:
.9aa1	fa		plx				plx 								; restore stack pos
.9aa2	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger		; get bytes required.
.9aa5	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.9aa8	da		phx				phx 								; save X/Y
.9aa9	5a		phy				phy
.9aaa	8a		txa				txa 								; copy X into Y
.9aab	a8		tay				tay
.9aac	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9aaf	aa		tax				tax
.9ab0	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9ab3	20 c0 9a	jsr $9ac0			jsr 	AllocateXABytes 			; allocate memory
.9ab6	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ab9	8a		txa				txa
.9aba	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9abd	7a		ply				ply
.9abe	fa		plx				plx
.9abf	60		rts				rts
.9ac0					AllocateXABytes:
.9ac0	5a		phy				phy
.9ac1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9ac4	84 36		sty $36				sty 	zTemp0
.9ac6	5a		phy				phy
.9ac7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9aca	84 37		sty $37				sty 	zTemp0+1
.9acc	5a		phy				phy
.9acd	18		clc				clc 								; add to low memory pointer
.9ace	6d 8c 04	adc $048c			adc 	lowMemPtr
.9ad1	8d 8c 04	sta $048c			sta 	lowMemPtr
.9ad4	8a		txa				txa
.9ad5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9ad8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9adb	b0 2f		bcs $9b0c			bcs 	CISSMemory
.9add	20 fe 9a	jsr $9afe			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ae0					_ClearMemory:
.9ae0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9ae3	c5 36		cmp $36				cmp 	zTemp0
.9ae5	d0 07		bne $9aee			bne 	_CMClearNext
.9ae7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9aea	c5 37		cmp $37				cmp 	zTemp0+1
.9aec	f0 0c		beq $9afa			beq 	_CMExit
.9aee					_CMClearNext:
.9aee	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9af0	92 36		sta ($36)			sta 	(zTemp0)
.9af2	e6 36		inc $36				inc 	zTemp0
.9af4	d0 ea		bne $9ae0			bne 	_ClearMemory
.9af6	e6 37		inc $37				inc		zTemp0+1
.9af8	80 e6		bra $9ae0			bra 	_ClearMemory
.9afa					_CMExit:
.9afa	fa		plx				plx
.9afb	68		pla				pla
.9afc	7a		ply				ply
.9afd	60		rts				rts
.9afe					CheckIdentifierStringSpace:
.9afe	48		pha				pha
.9aff	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b02	18		clc				clc
.9b03	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b05	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b08	b0 02		bcs $9b0c			bcs 	CISSMemory
.9b0a	68		pla				pla
.9b0b	60		rts				rts
.9b0c					CISSMemory:
.9b0c	a9 06		lda #$06		lda	#6
.9b0e	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a938					AscUnary:
.a938	fa		plx				plx 								; restore stack pos
.a939	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.a93c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a93e	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.a941	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a944	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a945					FracUnary:
.a945	fa		plx				plx 								; restore stack pos
.a946	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.a949	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a94c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a94f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a951	f0 04		beq $a957			beq 	_IUZero
.a953	20 15 a8	jsr $a815			jsr 	FloatFractionalPart
.a956	60		rts				rts
.a957					_IUZero:
.a957	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.a95a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a95b					IntUnary:
.a95b	fa		plx				plx 								; restore stack pos
.a95c	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.a95f	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a962	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a965	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a967	f0 03		beq $a96c			beq 	_IUExit
.a969	20 78 a8	jsr $a878			jsr 	FloatIntegerPart
.a96c					_IUExit:
.a96c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a96d					LenUnary:
.a96d	fa		plx				plx 								; restore stack pos
.a96e	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.a971	5a		phy				phy
.a972	a0 00		ldy #$00			ldy 	#0 							; find length
.a974					_LenFind:
.a974	b1 36		lda ($36),y			lda 	(zTemp0),y
.a976	f0 06		beq $a97e			beq 	_LenExit
.a978	c8		iny				iny
.a979	d0 f9		bne $a974			bne 	_LenFind
.a97b	4c 5b ab	jmp $ab5b			jmp 	RangeError 					; string > 255
.a97e					_LenExit:
.a97e	98		tya				tya
.a97f	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.a982	7a		ply				ply
.a983	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a986	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b11					Unary_Not:
.9b11	fa		plx				plx
.9b12	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; get integer
.9b15	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.9b18	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; zero mantissa ?
.9b1b	f0 04		beq $9b21			beq 	_NotZero
.9b1d	20 ef 9d	jsr $9def			jsr 	NSMSetZero
.9b20	60		rts				rts
.9b21					_NotZero:
.9b21	4c a4 92	jmp $92a4			jmp 	ReturnTrue
.9b24					_UNBad:
.9b24	4c 65 ab	jmp $ab65			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b27					Unary_Random:
.9b27	fa		plx				plx
.9b28	20 a0 9b	jsr $9ba0			jsr 	Random32Bit 				; get a random number
.9b2b	20 85 9b	jsr $9b85			jsr 	URCopyToMantissa  			; put in mantissa
.9b2e	e8		inx				inx
.9b2f	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b32	ca		dex				dex
.9b33	20 f4 a5	jsr $a5f4			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9b36	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9b39	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b3c	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.9b3f	60		rts				rts
.9b40					Unary_Rnd:
.9b40	fa		plx				plx
.9b41	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; number to use.
.9b44	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; closing bracket
.9b47	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b4a	f0 2b		beq $9b77			beq 	_URCopySeed
.9b4c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b4f	10 23		bpl $9b74			bpl 	_URDontSeed
.9b51	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b54	49 17		eor #$17			eor 	#$17
.9b56	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b59	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b5c	49 a5		eor #$a5			eor 	#$A5
.9b5e	8d 89 04	sta $0489			sta 	RandomSeed+1
.9b61	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b64	49 c2		eor #$c2			eor 	#$C2
.9b66	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9b69	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b6c	49 9d		eor #$9d			eor 	#$9D
.9b6e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b71	20 a0 9b	jsr $9ba0			jsr 	Random32Bit
.9b74					_URDontSeed:
.9b74	20 a0 9b	jsr $9ba0			jsr 	Random32Bit 				; generate a number.
.9b77					_URCopySeed:
.9b77	20 85 9b	jsr $9b85			jsr 	URCopyToMantissa 			; copy into mantissa
.9b7a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b7c	8d 28 04	sta $0428			sta 	NSExponent
.9b7f	a9 08		lda #$08			lda 	#NSTFloat
.9b81	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b84	60		rts				rts
.9b85					URCopyToMantissa:
.9b85	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b88	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b8b	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b8e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b91	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b94	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b97	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b9a	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9b9c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b9f	60		rts				rts
.9ba0					Random32Bit:
.9ba0	5a		phy				phy
.9ba1	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ba3	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9ba6	d0 03		bne $9bab			bne 	_Random1
.9ba8	a8		tay				tay 								; if so do it 256 times
.9ba9	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9bab					_Random1:
.9bab	0a		asl a				asl 	a 							; LSFR RNG
.9bac	2e 89 04	rol $0489			rol 	RandomSeed+1
.9baf	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9bb2	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9bb5	90 02		bcc $9bb9			bcc 	_Random2
.9bb7	49 c5		eor #$c5			eor 	#$C5
.9bb9					_Random2:
.9bb9	88		dey				dey
.9bba	d0 ef		bne $9bab			bne 	_Random1
.9bbc	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bbf	7a		ply				ply
.9bc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a987					SgnUnary:
.a987	fa		plx				plx 								; restore stack pos
.a988	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.a98b	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.a98e	20 1f 9e	jsr $9e1f			jsr 	NSMIsZero 					; if zero
.a991	f0 10		beq $a9a3			beq 	_SGZero  					; return Int Zero
.a993	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a996	48		pha				pha
.a997	a9 01		lda #$01			lda 	#1 							; set to 1
.a999	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.a99c	68		pla				pla
.a99d	29 80		and #$80			and		#$80 						; copy the sign byte out
.a99f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9a2	60		rts				rts
.a9a3	20 ef 9d	jsr $9def	_SGZero:jsr 	NSMSetZero
.a9a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a9a7					ValUnary:
.a9a7	fa		plx				plx 								; restore stack pos
.a9a8	20 bd a9	jsr $a9bd			jsr 	ValMainCode 				; do the main val() code
.a9ab	b0 01		bcs $a9ae			bcs 	_VUError 					; couldn't convert
.a9ad	60		rts				rts
.a9ae					_VUError:
.a9ae	4c 60 ab	jmp $ab60			jmp 	TypeError
.a9b1					IsValUnary:
.a9b1	fa		plx				plx 								; restore stack pos
.a9b2	20 bd a9	jsr $a9bd			jsr 	ValMainCode 				; do the main val() code
.a9b5	b0 03		bcs $a9ba			bcs 	_VUBad
.a9b7	4c a4 92	jmp $92a4			jmp 	ReturnTrue
.a9ba					_VUBad:
.a9ba	4c b0 92	jmp $92b0			jmp 	ReturnFalse
.a9bd					ValMainCode:
.a9bd	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.a9c0	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; check right bracket present
.a9c3	5a		phy				phy
.a9c4	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a9c6	f0 17		beq $a9df			beq 	_VMCFail2
.a9c8	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a9ca	48		pha				pha 								; save first character
.a9cb	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a9cd	d0 01		bne $a9d0			bne 	_VMCStart
.a9cf	c8		iny				iny 								; skip over -
.a9d0					_VMCStart:
.a9d0	38		sec				sec 								; initialise first time round.
.a9d1					_VMCNext:
.a9d1	c8		iny				iny 								; pre-increment
.a9d2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a9d4	f0 0c		beq $a9e2			beq 	_VMCSuccess 				; successful.
.a9d6	20 f3 97	jsr $97f3			jsr 	EncodeNumber 				; send it to the number-builder
.a9d9	90 03		bcc $a9de			bcc 	_VMCFail 					; if failed, give up.
.a9db	18		clc				clc 								; next time round, countinue
.a9dc	80 f3		bra $a9d1			bra 	_VMCNext
.a9de					_VMCFail:
.a9de	68		pla				pla
.a9df					_VMCFail2:
.a9df	7a		ply				ply
.a9e0	38		sec				sec
.a9e1	60		rts				rts
.a9e2					_VMCSuccess:
.a9e2	a9 00		lda #$00			lda 	#0 							; construct final
.a9e4	20 f3 97	jsr $97f3			jsr 	EncodeNumber
.a9e7	68		pla				pla
.a9e8	c9 2d		cmp #$2d			cmp 	#"-"
.a9ea	d0 03		bne $a9ef			bne 	_VMCNotNegative
.a9ec	20 9b 9d	jsr $9d9b			jsr		NSMNegate
.a9ef					_VMCNotNegative:
.a9ef	7a		ply				ply
.a9f0	18		clc				clc
.a9f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bc1					ChrUnary:
.9bc1	fa		plx				plx 								; restore stack pos
.9bc2	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger			; get value
.9bc5	48		pha				pha
.9bc6	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.9bc9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bcb	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate
.9bce	68		pla				pla 								; write number to it
.9bcf	20 b9 ae	jsr $aeb9			jsr 	StringTempWrite
.9bd2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bd3					SpcUnary:
.9bd3	fa		plx				plx 								; restore stack pos
.9bd4	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger			; get value
.9bd7	5a		phy				phy
.9bd8	48		pha				pha 								; save count
.9bd9	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate
.9bdc	7a		ply				ply 								; to do count in Y
.9bdd					_SpcLoop:
.9bdd	c0 00		cpy #$00			cpy 	#0
.9bdf	f0 08		beq $9be9			beq 	_SpcExit
.9be1	a9 20		lda #$20			lda 	#32
.9be3	20 b9 ae	jsr $aeb9			jsr 	StringTempWrite
.9be6	88		dey				dey
.9be7	80 f4		bra $9bdd			bra 	_SPCLoop
.9be9					_SpcExit:
.9be9	7a		ply				ply
.9bea	20 70 a5	jsr $a570			jsr 	CheckRightBracket
.9bed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bee					Unary_Str:
.9bee	fa		plx				plx
.9bef	20 43 9d	jsr $9d43			jsr 	EvaluateNumber  			; get number
.9bf2	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; closing bracket
.9bf5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf7	20 10 9c	jsr $9c10			jsr 	ConvertNumberToString 		; do the conversion.
.9bfa	a9 21		lda #$21			lda		#33 						; create buffer
.9bfc	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate 			; allocate memory
.9bff	da		phx				phx
.9c00	a2 00		ldx #$00			ldx 	#0
.9c02					_USCopy:
.9c02	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c05	20 b9 ae	jsr $aeb9			jsr 	StringTempWrite
.9c08	e8		inx				inx
.9c09	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c0c	d0 f4		bne $9c02			bne 	_USCopy
.9c0e	fa		plx				plx
.9c0f	60		rts				rts
.9c10					ConvertNumberToString:
.9c10	5a		phy				phy 								; save code position
.9c11	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c14	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c17	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c1a	10 0a		bpl $9c26			bpl 	_CNTSNotNegative
.9c1c	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c1e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c21	a9 2d		lda #$2d			lda 	#"-"
.9c23	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer
.9c26					_CNTSNotNegative:
.9c26	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c29	f0 15		beq $9c40			beq 	_CNTSNotFloat
.9c2b	e8		inx				inx 								; round up
.9c2c	a9 01		lda #$01			lda 	#1
.9c2e	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.9c31	ca		dex				dex
.9c32	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c35	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c38	a9 08		lda #$08			lda 	#NSTFloat
.9c3a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c3d	20 37 a7	jsr $a737			jsr 	FloatAdd
.9c40					_CNTSNotFloat:
.9c40	20 6e 9c	jsr $9c6e			jsr 	MakePlusTwoString
.9c43	20 15 a8	jsr $a815			jsr 	FloatFractionalPart 		; get the fractional part
.9c46	20 d9 a8	jsr $a8d9			jsr 	NSNormalise					; normalise , exit if zero
.9c49	f0 21		beq $9c6c			beq 	_CNTSExit
.9c4b	a9 2e		lda #$2e			lda 	#"."
.9c4d	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer 			; write decimal place
.9c50					_CNTSDecimal:
.9c50	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c53	30 17		bmi $9c6c			bmi 	_CNTSExit
.9c55	e8		inx				inx 								; x 10.0
.9c56	a9 0a		lda #$0a			lda 	#10
.9c58	20 f1 9d	jsr $9df1			jsr 	NSMSetByte
.9c5b	a9 08		lda #$08			lda 	#NSTFloat
.9c5d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c60	ca		dex				dex
.9c61	20 a2 a8	jsr $a8a2			jsr 	FloatMultiply
.9c64	20 6e 9c	jsr $9c6e			jsr 	MakePlusTwoString
.9c67	20 15 a8	jsr $a815			jsr 	FloatFractionalPart 		; get the fractional part
.9c6a	80 e4		bra $9c50			bra 	_CNTSDecimal 				; keep going.
.9c6c					_CNTSExit:
.9c6c	7a		ply				ply
.9c6d	60		rts				rts
.9c6e					MakePlusTwoString:
.9c6e	da		phx				phx
.9c6f	20 c6 9d	jsr $9dc6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c72	e8		inx				inx 								; access it
.9c73	e8		inx				inx
.9c74	20 78 a8	jsr $a878			jsr 	FloatIntegerPart 			; make it an integer
.9c77	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c79	20 e1 a6	jsr $a6e1			jsr 	ConvertInt32
.9c7c	a2 00		ldx #$00			ldx	 	#0
.9c7e					_MPTSCopy:
.9c7e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9c81	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer
.9c84	e8		inx				inx
.9c85	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9c88	d0 f4		bne $9c7e			bne 	_MPTSCopy
.9c8a	fa		plx				plx
.9c8b	60		rts				rts
.9c8c					WriteDecimalBuffer:
.9c8c	da		phx				phx
.9c8d	ae 95 04	ldx $0495			ldx 	dbOffset
.9c90	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9c93	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9c96	ee 95 04	inc $0495			inc 	dbOffset
.9c99	fa		plx				plx
.9c9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c9b					Unary_Left:
.9c9b	fa		plx				plx
.9c9c	18		clc				clc 								; only one parameter
.9c9d	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9ca0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ca3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca6	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ca9	80 2c		bra $9cd7			bra 	SubstringMain
.9cab					Unary_Right:
.9cab	fa		plx				plx
.9cac	18		clc				clc 								; only one parameter
.9cad	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9cb0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cb3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cb9	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cbc	b0 02		bcs $9cc0			bcs 	_URNotUnderflow
.9cbe	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cc0					_URNotUnderFlow:
.9cc0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cc3	80 12		bra $9cd7			bra 	SubStringMain
.9cc5					Unary_Mid:
.9cc5	fa		plx				plx
.9cc6	38		sec				sec 								; two parameters
.9cc7	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9cca	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ccd	f0 05		beq $9cd4			beq 	_UMError
.9ccf	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cd2	80 03		bra $9cd7			bra 	SubStringMain
.9cd4					_UMError:
.9cd4	4c 65 ab	jmp $ab65			jmp 	ArgumentError
.9cd7					SubStringMain:
.9cd7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cda	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cdd	b0 2d		bcs $9d0c			bcs 	_SSMNull 					; if so, return an empty string.
.9cdf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ce2	f0 28		beq $9d0c			beq 	_SSMNull 					; return empty string.
.9ce4	18		clc				clc 								; add the offset +1 to the address and
.9ce5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ce8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ceb	85 36		sta $36				sta 	zTemp0
.9ced	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cf0	69 00		adc #$00			adc 	#0
.9cf2	85 37		sta $37				sta 	zTemp0+1
.9cf4					_SSMNoCarry:
.9cf4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf7	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate 			; allocate that many characters
.9cfa	5a		phy				phy 								; save Y
.9cfb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cfd					_SSMCopy:
.9cfd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cff	f0 09		beq $9d0a			beq 	_SSMEString 				; no more to copy
.9d01	20 b9 ae	jsr $aeb9			jsr 	StringTempWrite 			; and write it out.
.9d04	c8		iny				iny
.9d05	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d08	d0 f3		bne $9cfd			bne 	_SSMCopy
.9d0a					_SSMEString:
.9d0a	7a		ply				ply
.9d0b					_SSMExit:
.9d0b	60		rts				rts
.9d0c					_SSMNull:
.9d0c	a9 00		lda #$00			lda 	#0
.9d0e	20 7b ae	jsr $ae7b			jsr 	StringTempAllocate
.9d11	60		rts				rts
.9d12					SubstringInitial:
.9d12	da		phx				phx 								; save initial stack position
.9d13	08		php				php 								; save carry on stack indicating 2 parameters
.9d14	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.9d17	5a		phy				phy 								; calculate length to exponent.
.9d18	a0 ff		ldy #$ff			ldy 	#$FF
.9d1a					_SIFindLength:
.9d1a	c8		iny				iny
.9d1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d1d	d0 fb		bne $9d1a			bne 	_SIFindLength
.9d1f	98		tya				tya
.9d20	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d23	7a		ply				ply
.9d24	e8		inx				inx
.9d25	20 78 a5	jsr $a578			jsr 	CheckComma 					; comma next
.9d28	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get next parameter
.9d2b	28		plp				plp 								; is it the last parameter ?
.9d2c	90 07		bcc $9d35			bcc 	_SSIExit 					; if so, exit.
.9d2e	e8		inx				inx
.9d2f	20 78 a5	jsr $a578			jsr 	CheckComma 					; comma next
.9d32	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get last parameter
.9d35					_SSIExit:
.9d35	fa		plx				plx
.9d36	20 70 a5	jsr $a570			jsr 	CheckRightBracket 			; check closing bracket
.9d39	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d3a					EvaluateValue:
.9d3a	48		pha				pha
.9d3b	20 40 96	jsr $9640			jsr		EvaluateExpression 			; expression
.9d3e	20 55 97	jsr $9755			jsr 	Dereference					; derefernce it
.9d41	68		pla				pla
.9d42	60		rts				rts
.9d43					EvaluateNumber:
.9d43	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value
.9d46	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d49	29 10		and #$10			and 	#NSBIsString
.9d4b	d0 16		bne $9d63			bne 	HelperTypeError
.9d4d	60		rts				rts
.9d4e					EvaluateString:
.9d4e	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value
.9d51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d54	29 10		and #$10			and 	#NSBIsString
.9d56	f0 0b		beq $9d63			beq 	HelperTypeError
.9d58					CopyAddressToTemp0:
.9d58	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d5b	85 36		sta $36				sta 	zTemp0
.9d5d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d60	85 37		sta $37				sta 	zTemp0+1
.9d62	60		rts				rts
.9d63					HelperTypeError:
.9d63	4c 60 ab	jmp $ab60			jmp 	TypeError
.9d66					EvaluateInteger:
.9d66	20 43 9d	jsr $9d43			jsr 	EvaluateNumber
.9d69	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d6c	d0 0a		bne $9d78			bne 	HelperValueError 			; if not, it's a float.
.9d6e	60		rts				rts
.9d6f					EvaluateUnsignedInteger:
.9d6f	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; check integer is +ve
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d75	30 01		bmi $9d78			bmi 	HelperValueError
.9d77	60		rts				rts
.9d78					HelperValueError:
.9d78	4c 65 ab	jmp $ab65			jmp 	ArgumentError
.9d7b					Evaluate16BitInteger:
.9d7b	20 6f 9d	jsr $9d6f			jsr	 	EvaluateUnsignedInteger		; get integer
.9d7e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d81	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d84	d0 f2		bne $9d78			bne 	HelperValueError
.9d86	60		rts				rts
.9d87					Evaluate8BitInteger:
.9d87	20 6f 9d	jsr $9d6f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d8a	d0 ec		bne $9d78			bne 	HelperValueError
.9d8c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d8f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d92	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d95	d0 e1		bne $9d78			bne 	HelperValueError
.9d97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a9f2					Multiply8x8:
.a9f2	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a9f3	85 36		sta $36			  	sta 	zTemp0
.a9f5	86 37		stx $37				stx 	zTemp0+1
.a9f7	a9 00		lda #$00			lda 	#0
.a9f9	a2 08		ldx #$08			ldx 	#8
.a9fb					_M88Loop:
.a9fb	90 03		bcc $aa00			bcc 	_M88NoAdd
.a9fd	18		clc				clc
.a9fe	65 37		adc $37				adc 	zTemp0+1
.aa00					_M88NoAdd:
.aa00	6a		ror a				ror 	a
.aa01	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa03	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa04	d0 f5		bne $a9fb			bne 	_M88Loop
.aa06	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9d9b					NSMNegate:
.9d9b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d9e	49 80		eor #$80			eor 	#NSBIsNegative
.9da0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9da3	60		rts				rts
.9da4					NSMNegateMantissa:
.9da4	38		sec				sec
.9da5	a9 00		lda #$00			lda 	#0
.9da7	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9daa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dad	a9 00		lda #$00			lda 	#0
.9daf	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9db2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db5	a9 00		lda #$00			lda 	#0
.9db7	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dba	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dbd	a9 00		lda #$00			lda 	#0
.9dbf	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dc2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc5	60		rts				rts
.9dc6					NSMShiftUpTwo:
.9dc6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dc9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dcc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dcf	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9dd2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dd5	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9dd8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ddb	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9dde	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9de1	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9de4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9de7	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9dea	60		rts				rts
.9deb					NSMSetZeroMantissaOnly:
.9deb	a9 00		lda #$00			lda 	#0
.9ded	80 08		bra $9df7			bra 	NSMSetMantissa
.9def					NSMSetZero:
.9def	a9 00		lda #$00			lda 	#0
.9df1					NSMSetByte:
.9df1	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9df4	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9df7					NSMSetMantissa:
.9df7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9dfa	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9dfd	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e00	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e03	60		rts				rts
.9e04					NSMShiftLeft:
.9e04	18		clc				clc
.9e05					NSMRotateLeft:
.9e05	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e08	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e0b	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e0e	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e11	60		rts				rts
.9e12					NSMShiftRight:
.9e12	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e15	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e18	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e1b	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e1e	60		rts				rts
.9e1f					NSMIsZero:
.9e1f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e22	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e25	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e28	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa09					Assemble_ora:
.aa09	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa0c	01					.byte $01
.aa0d					Assemble_and:
.aa0d	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa10	21					.byte $21
.aa11					Assemble_eor:
.aa11	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa14	41					.byte $41
.aa15					Assemble_adc:
.aa15	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa18	61					.byte $61
.aa19					Assemble_sta:
.aa19	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa1c	81					.byte $81
.aa1d					Assemble_lda:
.aa1d	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa20	a1					.byte $a1
.aa21					Assemble_cmp:
.aa21	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa24	c1					.byte $c1
.aa25					Assemble_sbc:
.aa25	20 61 85	jsr $8561		jsr	AssembleGroup1
>aa28	e1					.byte $e1
.aa29					Assemble_asl:
.aa29	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa2c	02					.byte $02
>aa2d	75					.byte $75
.aa2e					Assemble_rol:
.aa2e	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa31	22					.byte $22
>aa32	75					.byte $75
.aa33					Assemble_lsr:
.aa33	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa36	42					.byte $42
>aa37	75					.byte $75
.aa38					Assemble_ror:
.aa38	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa3b	62					.byte $62
>aa3c	75					.byte $75
.aa3d					Assemble_stx:
.aa3d	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa40	82					.byte $82
>aa41	50					.byte $50
.aa42					Assemble_ldx:
.aa42	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa45	a2					.byte $a2
>aa46	d0					.byte $d0
.aa47					Assemble_dec:
.aa47	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa4a	c2					.byte $c2
>aa4b	55					.byte $55
.aa4c					Assemble_inc:
.aa4c	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa4f	e2					.byte $e2
>aa50	55					.byte $55
.aa51					Assemble_stz:
.aa51	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa54	60					.byte $60
>aa55	44					.byte $44
.aa56					Assemble_bit:
.aa56	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa59	20					.byte $20
>aa5a	55					.byte $55
.aa5b					Assemble_sty:
.aa5b	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa5e	80					.byte $80
>aa5f	54					.byte $54
.aa60					Assemble_ldy:
.aa60	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa63	a0					.byte $a0
>aa64	d5					.byte $d5
.aa65					Assemble_cpy:
.aa65	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa68	c0					.byte $c0
>aa69	d4					.byte $d4
.aa6a					Assemble_cpx:
.aa6a	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa6d	e0					.byte $e0
>aa6e	d0					.byte $d0
.aa6f					Assemble_tsb:
.aa6f	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa72	00					.byte $00
>aa73	50					.byte $50
.aa74					Assemble_trb:
.aa74	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa77	10					.byte $10
>aa78	50					.byte $50
.aa79					Assemble_jsr:
.aa79	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa7c	14					.byte $14
>aa7d	10					.byte $10
.aa7e					Assemble_jmp:
.aa7e	20 68 85	jsr $8568		jsr	AssembleGroup2
>aa81	40					.byte $40
>aa82	10					.byte $10
.aa83					Assemble_bpl:
.aa83	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa86	10					.byte $10
.aa87					Assemble_bmi:
.aa87	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa8a	30					.byte $30
.aa8b					Assemble_bvc:
.aa8b	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa8e	50					.byte $50
.aa8f					Assemble_bvs:
.aa8f	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa92	70					.byte $70
.aa93					Assemble_bcc:
.aa93	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa96	90					.byte $90
.aa97					Assemble_bcs:
.aa97	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa9a	b0					.byte $b0
.aa9b					Assemble_bne:
.aa9b	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aa9e	d0					.byte $d0
.aa9f					Assemble_beq:
.aa9f	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aaa2	f0					.byte $f0
.aaa3					Assemble_bra:
.aaa3	20 b9 85	jsr $85b9		jsr	AssembleGroup3
>aaa6	80					.byte $80
.aaa7					Assemble_brk:
.aaa7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaaa	00					.byte $00
.aaab					Assemble_php:
.aaab	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaae	08					.byte $08
.aaaf					Assemble_clc:
.aaaf	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aab2	18					.byte $18
.aab3					Assemble_plp:
.aab3	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aab6	28					.byte $28
.aab7					Assemble_sec:
.aab7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaba	38					.byte $38
.aabb					Assemble_rti:
.aabb	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aabe	40					.byte $40
.aabf					Assemble_pha:
.aabf	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aac2	48					.byte $48
.aac3					Assemble_cli:
.aac3	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aac6	58					.byte $58
.aac7					Assemble_phy:
.aac7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaca	5a					.byte $5a
.aacb					Assemble_rts:
.aacb	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aace	60					.byte $60
.aacf					Assemble_pla:
.aacf	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aad2	68					.byte $68
.aad3					Assemble_sei:
.aad3	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aad6	78					.byte $78
.aad7					Assemble_ply:
.aad7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aada	7a					.byte $7a
.aadb					Assemble_dey:
.aadb	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aade	88					.byte $88
.aadf					Assemble_txa:
.aadf	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aae2	8a					.byte $8a
.aae3					Assemble_tya:
.aae3	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aae6	98					.byte $98
.aae7					Assemble_txs:
.aae7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaea	9a					.byte $9a
.aaeb					Assemble_tay:
.aaeb	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaee	a8					.byte $a8
.aaef					Assemble_tax:
.aaef	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaf2	aa					.byte $aa
.aaf3					Assemble_clv:
.aaf3	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aaf6	b8					.byte $b8
.aaf7					Assemble_tsx:
.aaf7	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aafa	ba					.byte $ba
.aafb					Assemble_iny:
.aafb	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>aafe	c8					.byte $c8
.aaff					Assemble_dex:
.aaff	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab02	ca					.byte $ca
.ab03					Assemble_cld:
.ab03	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab06	d8					.byte $d8
.ab07					Assemble_phx:
.ab07	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab0a	da					.byte $da
.ab0b					Assemble_stp:
.ab0b	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab0e	db					.byte $db
.ab0f					Assemble_inx:
.ab0f	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab12	e8					.byte $e8
.ab13					Assemble_nop:
.ab13	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab16	ea					.byte $ea
.ab17					Assemble_sed:
.ab17	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab1a	f8					.byte $f8
.ab1b					Assemble_plx:
.ab1b	20 ef 85	jsr $85ef		jsr	AssembleGroup4
>ab1e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ab1f					DecimalScalarTable:
>ab1f	66 66 66 66				.dword $66666666 ; 0.1
>ab23	de					.byte $de
>ab24	1f 85 eb 51				.dword $51eb851f ; 0.01
>ab28	db					.byte $db
>ab29	4c 37 89 41				.dword $4189374c ; 0.001
>ab2d	d8					.byte $d8
>ab2e	ac 8b db 68				.dword $68db8bac ; 0.0001
>ab32	d4					.byte $d4
>ab33	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ab37	d1					.byte $d1
>ab38	83 de 1b 43				.dword $431bde83 ; 1e-06
>ab3c	ce					.byte $ce
>ab3d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ab41	ca					.byte $ca
>ab42	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ab46	c7					.byte $c7
>ab47	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ab4b	c4					.byte $c4
>ab4c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ab50	c0					.byte $c0
>ab51	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ab55	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ab56					SyntaxError:
.ab56	a9 02		lda #$02		lda	#2
.ab58	4c 37 92	jmp $9237		jmp	ErrorHandler
.ab5b					RangeError:
.ab5b	a9 04		lda #$04		lda	#4
.ab5d	4c 37 92	jmp $9237		jmp	ErrorHandler
.ab60					TypeError:
.ab60	a9 05		lda #$05		lda	#5
.ab62	4c 37 92	jmp $9237		jmp	ErrorHandler
.ab65					ArgumentError:
.ab65	a9 07		lda #$07		lda	#7
.ab67	4c 37 92	jmp $9237		jmp	ErrorHandler
.ab6a					NotDoneError:
.ab6a	a9 0c		lda #$0c		lda	#12
.ab6c	4c 37 92	jmp $9237		jmp	ErrorHandler
.ab6f					ErrorText:
>ab6f	42 72 65 61 6b 00			.text	"Break",0
>ab75	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ab7d	72 72 6f 72 00
>ab82	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ab8a	20 62 79 20 7a 65 72 6f 00
>ab93	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ab9b	61 6e 67 65 00
>aba0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aba8	6d 61 74 63 68 00
>abae	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>abb6	65 6d 6f 72 79 00
>abbc	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>abc4	61 72 67 75 6d 65 6e 74 00
>abcd	53 74 6f 70 00				.text	"Stop",0
>abd2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>abda	6f 6f 20 6c 6f 6e 67 00
>abe2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>abea	6e 20 66 61 69 6c 65 64 00
>abf3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>abfb	61 74 61 00
>abff	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac07	65 6e 74 65 64 00
>ac0d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ac15	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ac21	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ac29	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ac36	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ac3e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ac4b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ac53	68 6f 75 74 20 57 68 69 6c 65 00
>ac5e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ac66	68 6f 75 74 20 46 6f 72 00
>ac6f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ac77	61 63 6b 20 66 75 6c 6c 00
>ac80	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ac88	75 63 74 75 72 65 00
>ac8f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ac97	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aca4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>acac	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>acba	41 72 72 61 79 20 73 69			.text	"Array size",0
>acc2	7a 65 00
>acc5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>accd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>acd5	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 841."
>acdd	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>aced	2e 20 42 75 69 6c 64 20 38 34 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.acf9					EXTPrintCharacter:
.acf9	48		pha				pha
.acfa	da		phx				phx
.acfb	5a		phy				phy
.acfc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.acff	7a		ply				ply
.ad00	fa		plx				plx
.ad01	68		pla				pla
.ad02	60		rts				rts
.ad03					EXTInputSingleCharacter:
.ad03	da		phx				phx
.ad04	5a		phy				phy
.ad05					_EISCWait:
.ad05	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad08	c9 00		cmp #$00			cmp 	#0
.ad0a	f0 f9		beq $ad05			beq 	_EISCWait
.ad0c	7a		ply				ply
.ad0d	fa		plx				plx
.ad0e	60		rts				rts
.ad0f					EXTInputLine:
.ad0f	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ad11					_ILLoop:
.ad11	da		phx				phx 								; read character in
.ad12	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ad15	fa		plx				plx
.ad16	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ad18	f0 12		beq $ad2c			beq 	_ILBackspace
.ad1a	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ad1c	f0 15		beq $ad33			beq 	_ILExit
.ad1e	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ad20	90 ef		bcc $ad11			bcc 	_ILLoop
.ad22	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ad24	f0 eb		beq $ad11			beq 	_ILLoop
.ad26	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ad29	e8		inx				inx
.ad2a	80 e5		bra $ad11			bra 	_ILLoop
.ad2c					_ILBackspace:
.ad2c	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ad2e	f0 e1		beq $ad11			beq 	_ILLoop
.ad30	ca		dex				dex 								; back one.
.ad31	80 de		bra $ad11			bra 	_ILLoop
.ad33					_ILExit:
.ad33	20 f9 ac	jsr $acf9			jsr 	EXTPrintCharacter
.ad36	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ad39	60		rts				rts
.ad3a					EXTBreakCheck:
.ad3a	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ad3d					MemoryDeleteLine:
.ad3d	20 5c ad	jsr $ad5c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad40	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad42	a8		tay				tay
.ad43					_MDDLLoop:
.ad43	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad45	92 30		sta ($30)			sta 	(codePtr)
.ad47	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad49	c5 3a		cmp $3a				cmp 	zTemp2
.ad4b	d0 07		bne $ad54			bne 	_MDLDLNext
.ad4d	a5 31		lda $31				lda 	codePtr+1
.ad4f	c5 3b		cmp $3b				cmp 	zTemp2+1
.ad51	d0 01		bne $ad54			bne 	_MDLDLNext
.ad53					_MDDLExit:
.ad53	60		rts				rts
.ad54					_MDLDLNext:
.ad54	e6 30		inc $30				inc 	codePtr						; next byte
.ad56	d0 eb		bne $ad43			bne 	_MDDLLoop
.ad58	e6 31		inc $31				inc 	codePtr+1
.ad5a	80 e7		bra $ad43			bra 	_MDDLLoop
.ad5c					IMemoryFindEnd:
.ad5c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad5e	85 3a		sta $3a				sta 	0+zTemp2
.ad60	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad62	85 3b		sta $3b				sta 	1+zTemp2
.ad64					_MDLFELoop:
.ad64	b2 3a		lda ($3a)			lda 	(zTemp2)
.ad66	f0 0b		beq $ad73			beq 	_MDLFEExit
.ad68	18		clc				clc
.ad69	65 3a		adc $3a				adc 	zTemp2
.ad6b	85 3a		sta $3a				sta 	zTemp2
.ad6d	90 f5		bcc $ad64			bcc 	_MDLFELoop
.ad6f	e6 3b		inc $3b				inc 	zTemp2+1
.ad71	80 f1		bra $ad64			bra 	_MDLFELoop
.ad73					_MDLFEExit:
.ad73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.ad74					MemoryInsertLine:
.ad74	08		php				php
.ad75	20 5c ad	jsr $ad5c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad78	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ad7a	1a		inc a				inc 	a
.ad7b	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ad7d	b0 36		bcs $adb5			bcs 	_MDLIError
.ad7f	28		plp				plp
.ad80	90 08		bcc $ad8a			bcc 	_MDLIFound
.ad82	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.ad84	85 30		sta $30				sta 	codePtr
.ad86	a5 3b		lda $3b				lda 	zTemp2+1
.ad88	85 31		sta $31				sta 	codePtr+1
.ad8a					_MDLIFound:
.ad8a	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ad8d	a8		tay				tay
.ad8e					_MDLIInsert:
.ad8e	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.ad90	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ad92	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.ad94	c5 3a		cmp $3a				cmp 	zTemp2
.ad96	d0 06		bne $ad9e			bne 	_MDLINext
.ad98	a5 31		lda $31				lda 	codePtr+1
.ad9a	c5 3b		cmp $3b				cmp 	zTemp2+1
.ad9c	f0 0a		beq $ada8			beq 	_MDLIHaveSpace
.ad9e					_MDLINext:
.ad9e	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ada0	d0 02		bne $ada4			bne 	_MDLINoBorrow
.ada2	c6 3b		dec $3b				dec 	zTemp2+1
.ada4					_MDLINoBorrow:
.ada4	c6 3a		dec $3a				dec 	zTemp2
.ada6	80 e6		bra $ad8e			bra 	_MDLIInsert
.ada8					_MDLIHaveSpace:
.ada8	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.adab	88		dey				dey 								; from offset-1 to 0
.adac					_MDLICopy:
.adac	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.adaf	91 30		sta ($30),y			sta 	(codePtr),y
.adb1	88		dey				dey
.adb2	10 f8		bpl $adac			bpl 	_MDLICopy
.adb4	60		rts				rts
.adb5					_MDLIError:
.adb5	a9 06		lda #$06		lda	#6
.adb7	4c 37 92	jmp $9237		jmp	ErrorHandler
.adba					MDLAppendLine:
.adba	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.adbc	85 36		sta $36				sta 	zTemp0
.adbe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adc0	85 38		sta $38				sta 	0+zTemp1
.adc2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adc4	85 39		sta $39				sta 	1+zTemp1
.adc6	b2 38		lda ($38)			lda 	(zTemp1)
.adc8	d0 0a		bne $add4			bne 	_MDLANoInitialise
.adca	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adcc	8d 4d 06	sta $064d			sta 	0+AppendPointer
.adcf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.add1	8d 4e 06	sta $064e			sta 	1+AppendPointer
.add4					_MDLANoInitialise:
.add4	18		clc				clc
.add5	ad 4d 06	lda $064d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.add8	85 38		sta $38				sta 	zTemp1
.adda	72 36		adc ($36)			adc 	(zTemp0)
.addc	8d 4d 06	sta $064d			sta 	AppendPointer
.addf	ad 4e 06	lda $064e			lda 	AppendPointer+1
.ade2	85 39		sta $39				sta 	zTemp1+1
.ade4	69 00		adc #$00			adc 	#0
.ade6	8d 4e 06	sta $064e			sta 	AppendPointer+1
.ade9	a0 00		ldy #$00			ldy 	#0
.adeb					_MDLACopy:
.adeb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.aded	91 38		sta ($38),y			sta 	(zTemp1),y
.adef	c8		iny				iny
.adf0	98		tya				tya
.adf1	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.adf3	d0 f6		bne $adeb			bne 	_MDLACopy
.adf5	a9 00		lda #$00			lda 	#0 							; end of program.
.adf7	91 38		sta ($38),y			sta 	(zTemp1),y
.adf9	60		rts				rts
.064d					AppendPointer:
>064d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9e2c					MemoryNew:
.9e2c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e2e	85 30		sta $30				sta 	codePtr
.9e30	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e32	85 31		sta $31				sta 	codePtr+1
.9e34	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e36	92 30		sta ($30)			sta 	(codePtr)
.9e38	60		rts				rts
.9e39					MemoryInline:
.9e39	98		tya				tya 								; put address into stack,x
.9e3a	18		clc				clc
.9e3b	65 30		adc $30				adc 	codePtr
.9e3d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e40	a5 31		lda $31				lda 	codePtr+1
.9e42	69 00		adc #$00			adc 	#0
.9e44	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e47	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e4a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9e4e					MemorySearch:
.9e4e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e50	86 37		stx $37				stx 	zTemp0+1
.9e52	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e54	85 30		sta $30				sta 	codePtr
.9e56	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e58	85 31		sta $31				sta 	codePtr+1
.9e5a					_MTAXLoop:
.9e5a	b2 30		lda ($30)			lda 	(codePtr)
.9e5c	18		clc				clc
.9e5d	f0 21		beq $9e80			beq 	_MTAXExit 					; reached end, exit with CC.
.9e5f	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e61	b1 30		lda ($30),y			lda 	(codePtr),y
.9e63	38		sec				sec
.9e64	e5 36		sbc $36				sbc 	zTemp0
.9e66	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e68	c8		iny				iny 								; do the MSB
.9e69	b1 30		lda ($30),y			lda 	(codePtr),y
.9e6b	e5 37		sbc $37				sbc 	zTemp0+1
.9e6d	05 38		ora $38				ora 	zTemp1
.9e6f	f0 0f		beq $9e80			beq 	_MTAXExit	 				; found
.9e71	b0 0d		bcs $9e80			bcs 	_MTAXExit 					; current < required exit
.9e73	18		clc				clc
.9e74	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e76	65 30		adc $30				adc 	codePtr
.9e78	85 30		sta $30				sta 	codePtr
.9e7a	90 02		bcc $9e7e			bcc 	_CREExit
.9e7c	e6 31		inc $31				inc 	codePtr+1
.9e7e					_CREExit:
.9e7e	80 da		bra $9e5a			bra 	_MTAXLoop
.9e80					_MTAXExit:
.9e80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9e81					StackPushByte:
.9e81	48		pha				pha 								; save byte
.9e82	a5 34		lda $34				lda 	BasicStack
.9e84	d0 09		bne $9e8f			bne 	_SPBNoBorrow
.9e86	c6 35		dec $35				dec 	BasicStack+1
.9e88	48		pha				pha
.9e89	a5 35		lda $35				lda 	BasicStack+1
.9e8b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9e8d	90 06		bcc $9e95			bcc 	_SPBMemory
.9e8f					_SPBNoBorrow:
.9e8f	c6 34		dec $34				dec 	BasicStack
.9e91	68		pla				pla 								; get back and write
.9e92	92 34		sta ($34)			sta 	(BasicStack)
.9e94	60		rts				rts
.9e95					_SPBMemory:
.9e95	a9 12		lda #$12		lda	#18
.9e97	4c 37 92	jmp $9237		jmp	ErrorHandler
.9e9a					StackPopByte:
.9e9a	b2 34		lda ($34)			lda 	(BasicStack)
.9e9c	e6 34		inc $34				inc 	BasicStack
.9e9e	d0 02		bne $9ea2			bne 	_SPBNoCarry
.9ea0	e6 35		inc $35				inc 	BasicStack+1
.9ea2					_SPBNoCarry:
.9ea2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9ea3					StackOpen:
.9ea3	48		pha				pha 								; save frame byte
.9ea4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9ea6	0a		asl a				asl 	a 							; claim twice this for storage
.9ea7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9ea9	38		sec				sec 								; so basically subtracting from
.9eaa	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9eac	85 34		sta $34				sta 	basicStack
.9eae	b0 08		bcs $9eb8			bcs 	_SONoBorrow
.9eb0	c6 35		dec $35				dec 	basicStack+1
.9eb2	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9eb4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9eb6	90 04		bcc $9ebc			bcc 	_SOMemory
.9eb8					_SONoBorrow:
.9eb8	68		pla				pla 								; get marker back and write at TOS
.9eb9	92 34		sta ($34)			sta 	(basicStack)
.9ebb	60		rts				rts
.9ebc					_SOMemory:
.9ebc	a9 12		lda #$12		lda	#18
.9ebe	4c 37 92	jmp $9237		jmp	ErrorHandler
.9ec1					StackClose:
.9ec1	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9ec3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9ec5	0a		asl a				asl 	a 							; claim twice this.
.9ec6	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9ec8	85 34		sta $34				sta 	basicStack
.9eca	90 02		bcc $9ece			bcc 	_SCExit
.9ecc	e6 35		inc $35				inc 	basicStack+1
.9ece					_SCExit:
.9ece	60		rts				rts
.9ecf					StackCheckFrame:
.9ecf	48		pha				pha
.9ed0					_StackRemoveLocals:
.9ed0	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9ed2	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9ed4	b0 05		bcs $9edb			bcs 	_SCNoLocal
.9ed6	20 17 a5	jsr $a517			jsr 	LocalPopValue
.9ed9	80 f5		bra $9ed0			bra 	_StackRemoveLocals
.9edb					_SCNoLocal:
.9edb	68		pla				pla
.9edc	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9ede	29 f0		and #$f0			and 	#$F0 						; check type bits
.9ee0	d0 01		bne $9ee3			bne 	_SCFError 					; different, we have structures mixed up
.9ee2	60		rts				rts
.9ee3					_SCFError:
.9ee3	8a		txa				txa 								; report error X
.9ee4	4c 37 92	jmp $9237			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9ee7					STKSaveCodePosition:
.9ee7	5a		phy				phy
.9ee8	98		tya				tya 								; save Y
.9ee9	a0 05		ldy #$05			ldy 	#5
.9eeb	91 34		sta ($34),y			sta 	(basicStack),y
.9eed	88		dey				dey 								; save Code Pointer
.9eee					_STKSaveLoop:
.9eee	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9ef1	91 34		sta ($34),y			sta 	(basicStack),y
.9ef3	88		dey				dey
.9ef4	d0 f8		bne $9eee			bne 	_STKSaveLoop
.9ef6	7a		ply				ply
.9ef7	60		rts				rts
.9ef8					STKLoadCodePosition:
.9ef8	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9efa					_STKLoadLoop:
.9efa	b1 34		lda ($34),y			lda 	(basicStack),y
.9efc	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9eff	c8		iny				iny
.9f00	c0 05		cpy #$05			cpy 	#5
.9f02	d0 f6		bne $9efa			bne 	_STKLoadLoop
.9f04	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f06	a8		tay				tay
.9f07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f08					StackReset:
.9f08	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9f0a	85 34		sta $34				sta 	0+basicStack
.9f0c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9f0e	85 35		sta $35				sta 	1+basicStack
.9f10	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9f12	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9f14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.adfa					StringConcrete:
.adfa	5a		phy				phy 								; save position on stack
.adfb	20 fe 9a	jsr $9afe			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.adfe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae01	85 38		sta $38				sta 	zTemp1
.ae03	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae06	85 39		sta $39				sta 	zTemp1+1
.ae08	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ae0a					_SALength:
.ae0a	c8		iny				iny
.ae0b	b1 38		lda ($38),y			lda 	(zTemp1),y
.ae0d	d0 fb		bne $ae0a			bne 	_SALength
.ae0f	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ae11	b0 3f		bcs $ae52			bcs 	_SALengthError
.ae13	98		tya				tya 				 				; length of the new string
.ae14	18		clc				clc
.ae15	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ae17	90 02		bcc $ae1b			bcc 	_SAHaveLength
.ae19	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ae1b					_SAHaveLength:
.ae1b	48		pha				pha 								; save length.
.ae1c	38		sec				sec
.ae1d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ae1f	6d 8e 04	adc $048e			adc 	StringMemory
.ae22	8d 8e 04	sta $048e			sta 	StringMemory
.ae25	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ae27	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ae2a	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ae2c	6d 8f 04	adc $048f			adc 	StringMemory+1
.ae2f	8d 8f 04	sta $048f			sta 	StringMemory+1
.ae32	85 3b		sta $3b				sta 	zTemp2+1
.ae34	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae37	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ae38	38		sec				sec
.ae39	e9 03		sbc #$03			sbc 	#3
.ae3b	92 3a		sta ($3a)			sta 	(zTemp2)
.ae3d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ae3f	a0 01		ldy #$01			ldy 	#1
.ae41	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae43					_SACopyNewString:
.ae43	a0 00		ldy #$00			ldy 	#0
.ae45					_SACopyNSLoop:
.ae45	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ae47	c8		iny				iny 								; write two on in string storage
.ae48	c8		iny				iny
.ae49	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae4b	88		dey				dey 								; this makes it one one.
.ae4c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ae4e	d0 f5		bne $ae45			bne 	_SACopyNSLoop
.ae50	7a		ply				ply
.ae51	60		rts				rts
.ae52					_SALengthError:
.ae52	a9 09		lda #$09		lda	#9
.ae54	4c 37 92	jmp $9237		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ae57					StringSystemInitialise:
.ae57	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ae59	8d 8e 04	sta $048e			sta 	0+StringMemory
.ae5c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ae5e	8d 8f 04	sta $048f			sta 	1+StringMemory
.ae61	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ae64	60		rts				rts
.ae65					StringSpaceInitialise:
.ae65	20 fe 9a	jsr $9afe			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae68	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.ae6a	8d 90 04	sta $0490			sta 	StringInitialised
.ae6d	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.ae70	8d 91 04	sta $0491			sta 	StringTempPointer
.ae73	ad 8f 04	lda $048f			lda 	StringMemory+1
.ae76	3a		dec a				dec 	a
.ae77	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ae7a	60		rts				rts
.ae7b					StringTempAllocate:
.ae7b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.ae7d	b0 35		bcs $aeb4			bcs 	_STALength
.ae7f	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.ae82	30 05		bmi $ae89			bmi 	_STAAllocate
.ae84	48		pha				pha 								; save value to subtract.
.ae85	20 65 ae	jsr $ae65			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.ae88	68		pla				pla 								; restore it
.ae89					_STAAllocate:
.ae89	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.ae8b	18		clc				clc  								; deliberate allows one more
.ae8c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.ae8f	8d 91 04	sta $0491			sta 	StringTempPointer
.ae92	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.ae95	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.ae97	ad 92 04	lda $0492			lda 	StringTempPointer+1
.ae9a	69 ff		adc #$ff			adc 	#$FF
.ae9c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ae9f	85 3d		sta $3d				sta 	zsTemp+1
.aea1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aea4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aea7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.aeaa	a9 10		lda #$10			lda 	#NSTString
.aeac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aeaf	a9 00		lda #$00			lda 	#0 							; clear the target string
.aeb1	92 3c		sta ($3c)			sta 	(zsTemp)
.aeb3	60		rts				rts
.aeb4					_STALength:
.aeb4	a9 09		lda #$09		lda	#9
.aeb6	4c 37 92	jmp $9237		jmp	ErrorHandler
.aeb9					StringTempWrite:
.aeb9	48		pha				pha
.aeba	92 3c		sta ($3c)			sta 	(zsTemp)
.aebc	e6 3c		inc $3c				inc 	zsTemp
.aebe	d0 02		bne $aec2			bne 	_STWNoCarry
.aec0	e6 3d		inc $3d				inc 	zsTemp+1
.aec2					_STWNoCarry:
.aec2	a9 00		lda #$00			lda 	#0
.aec4	92 3c		sta ($3c)			sta 	(zsTemp)
.aec6	68		pla				pla
.aec7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9f15					BackloadProgram:
.9f15	a2 ff		ldx #$ff			ldx 	#$FF
.9f17	20 3f 9f	jsr $9f3f			jsr 	BLReadByte
.9f1a	30 1f		bmi $9f3b			bmi 	_BPExit
.9f1c					_BPCopy:
.9f1c	e8		inx				inx  								; copy byte in
.9f1d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9f20	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9f23	20 3f 9f	jsr $9f3f			jsr 	BLReadByte 					; read next byte
.9f26	30 0a		bmi $9f32			bmi 	_BPEndLine 					; -ve = EOL
.9f28	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9f2a	d0 02		bne $9f2e			bne 	_BPNotTab
.9f2c	a9 20		lda #$20			lda 	#' '
.9f2e					_BPNotTab:
.9f2e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9f30	b0 ea		bcs $9f1c			bcs 	_BPCopy
.9f32					_BPEndLine:
.9f32	20 68 a2	jsr $a268			jsr 	TokeniseLine 				; tokenise the line.
.9f35	38		sec				sec 								; append not insert
.9f36	20 74 ad	jsr $ad74			jsr 	MemoryInsertLine 			; append to current program
.9f39	80 da		bra $9f15			bra 	BackloadProgram
.9f3b					_BPExit:
.9f3b	20 67 88	jsr $8867			jsr 	ClearCommand 				; clear variables etc.
.9f3e	60		rts				rts
.9f3f					BLReadByte:
.9f3f					_BLLoad:
.9f3f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9f42	ee 40 9f	inc $9f40			inc 	_BLLoad+1
.9f45	d0 03		bne $9f4a			bne 	_BLNoCarry
.9f47	ee 41 9f	inc $9f41			inc 	_BLLoad+2
.9f4a					_BLNoCarry:
.9f4a	c9 00		cmp #$00			cmp 	#0
.9f4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9f4d					TokeniseSearchTable:
.9f4d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9f4f	85 36		sta $36				sta 	zTemp0
.9f51	a0 00		ldy #$00			ldy 	#0
.9f53	a9 80		lda #$80			lda 	#$80 						; token #
.9f55	85 38		sta $38				sta 	zTemp1
.9f57					_TSTLoop:
.9f57	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9f59	30 49		bmi $9fa4			bmi 	_TSTFail 					; -ve = end of table
.9f5b	f0 2e		beq $9f8b			beq 	_TSTNext 					; zero, check next it's a dummy
.9f5d	c8		iny				iny 								; get the hash
.9f5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f60	88		dey				dey
.9f61	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9f64	d0 25		bne $9f8b			bne 	_TSTNext
.9f66	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9f69	38		sec				sec
.9f6a	ed 80 04	sbc $0480			sbc 	identStart
.9f6d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9f6f	d0 1a		bne $9f8b			bne 	_TSTNext
.9f71	5a		phy				phy 								; save Y , we might fail
.9f72	c8		iny				iny 								; point to text
.9f73	c8		iny				iny
.9f74	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9f77					_TSTCompareName:
.9f77	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9f7a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9f7c	d0 0c		bne $9f8a			bne 	_TSTNextPullY 				; fail, pullY and do next
.9f7e	e8		inx				inx
.9f7f	c8		iny				iny
.9f80	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9f83	d0 f2		bne $9f77			bne 	_TSTCompareName
.9f85	7a		ply				ply 								; throw Y
.9f86	a5 38		lda $38				lda 	zTemp1 						; get token #
.9f88	38		sec				sec 								; return with CS = passed.
.9f89	60		rts				rts
.9f8a					_TSTNextPullY:
.9f8a	7a		ply				ply 								; restore current, fall through.
.9f8b					_TSTNext:
.9f8b	e6 38		inc $38				inc 	zTemp1 						; token counter
.9f8d	98		tya				tya
.9f8e	18		clc				clc
.9f8f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9f91	1a		inc a				inc 	a 							; +1
.9f92	1a		inc a				inc 	a 							; +2
.9f93	a8		tay				tay
.9f94	10 c1		bpl $9f57			bpl 	_TSTLoop 					; if Y < $80 loop back
.9f96	98		tya				tya 								; add Y to zTemp0 and reset Y
.9f97	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9f99	18		clc				clc  								; but have tables > 255 bytes
.9f9a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9f9c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9f9e	90 b7		bcc $9f57			bcc 	_TSTLoop
.9fa0	e6 37		inc $37				inc 	zTemp0+1
.9fa2	80 b3		bra $9f57			bra 	_TSTLoop
.9fa4					_TSTFail:
.9fa4	18		clc				clc
.9fa5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9fa6					KeywordSet0:
>9fa6	00 65					.text	0,$65,""               ; $80 !0:EOF
>9fa8	00 58					.text	0,$58,""               ; $81 !1:SH1
>9faa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9fac	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9fb2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9fba	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9fc0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9fc7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9fce	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9fd5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9fdb	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9fe3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9feb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9ff1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9ff8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9ffe	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a006	28
>a007	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a00f	28
>a010	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a016	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a01c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a022	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a029	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a02f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a035	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a03a	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a03e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a044	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a04c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a053	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a05a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a062	43
>a063	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a069	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a06f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a076	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a07c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a082	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a087	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a08d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a092	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a09a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a0a0	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a0a7	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a0ad	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a0b2	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a0b9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a0c0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a0c6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a0cb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a0d3	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a0d7	ff					.text	$FF
.a0d8					KeywordSet1:
>a0d8	00 65					.text	0,$65,""               ; $80 !0:EOF
>a0da	00 58					.text	0,$58,""               ; $81 !1:SH1
>a0dc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a0de	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a0e6	4c 45
>a0e8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a0f0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a0f7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a0fc	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a102	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a107	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a10f	45
>a110	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a115	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a11b	ff					.text	$FF
.a11c					KeywordSet2:
>a11c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a11e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a120	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a122	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a127	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a12c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a131	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a136	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a13b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a140	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a145	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a14a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a14f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a154	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a159	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a15e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a163	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a168	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a16d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a172	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a177	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a17c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a181	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a186	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a18b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a190	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a195	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a19a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a19f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a1a4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a1a9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a1ae	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a1b3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a1b8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a1bd	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a1c2	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a1c7	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a1cc	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a1d1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a1d6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a1db	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a1e0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a1e5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a1ea	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a1ef	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a1f4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a1f9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a1fe	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a203	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a208	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a20d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a212	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a217	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a21c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a221	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a226	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a22b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a230	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a235	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a23a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a23f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a244	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a249	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a24e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a253	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a258	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a25d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a262	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a267	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a268					TokeniseLine:
.a268	20 f0 a3	jsr $a3f0			jsr 	FixLineBufferCase 			; fix line case
.a26b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a26d	8d a6 04	sta $04a6			sta 	tokenOffset
.a270	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a273	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a276	a2 ff		ldx #$ff			ldx 	#$FF
.a278					_TKFindFirst:
.a278	e8		inx				inx
.a279	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a27c	f0 79		beq $a2f7			beq 	_TKExit
.a27e	c9 20		cmp #$20			cmp 	#' '
.a280	90 f6		bcc $a278			bcc 	_TKFindFirst
.a282	c9 30		cmp #$30			cmp 	#'0'
.a284	90 07		bcc $a28d			bcc 	_TKNoLineNumber
.a286	c9 3a		cmp #$3a			cmp 	#'9'+1
.a288	b0 03		bcs $a28d			bcs 	_TKNoLineNumber
.a28a	20 1a a4	jsr $a41a			jsr 	TokeniseExtractLineNumber
.a28d					_TKNoLineNumber:
.a28d					_TKTokeniseLoop:
.a28d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a290	f0 65		beq $a2f7			beq 	_TKExit
.a292	e8		inx				inx
.a293	c9 20		cmp #$20			cmp 	#' '
.a295	f0 f6		beq $a28d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a297	ca		dex				dex 								; undo last get, A contains character, X is position.
.a298	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a29a	f0 61		beq $a2fd			beq 	_TKTokeniseIdentifier
.a29c	c9 41		cmp #$41			cmp 	#'A'
.a29e	90 04		bcc $a2a4			bcc 	_TKTokenisePunctuation
.a2a0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a2a2	90 59		bcc $a2fd			bcc 	_TKTokeniseIdentifier
.a2a4					_TKTokenisePunctuation:
.a2a4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a2a6	f0 27		beq $a2cf			beq 	_TKString
.a2a8	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a2aa	f0 28		beq $a2d4			beq 	_TKHexConstant
.a2ac	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a2ae	f0 29		beq $a2d9			beq 	_TKCheckDouble
.a2b0	c9 3e		cmp #$3e			cmp 	#'>'
.a2b2	f0 25		beq $a2d9			beq 	_TKCheckDouble
.a2b4					_TKStandardPunctuation:
.a2b4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a2b7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a2b9	90 0e		bcc $a2c9			bcc 	_TKNoShift
.a2bb	48		pha				pha 								; save
.a2bc	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a2be	85 36		sta $36				sta 	zTemp0
.a2c0	68		pla				pla
.a2c1	29 20		and #$20			and 	#32 						; bit 5
.a2c3	4a		lsr a				lsr 	a 							; shift into bit 3
.a2c4	4a		lsr a				lsr 	a
.a2c5	05 36		ora $36				ora 	zTemp0
.a2c7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a2c9					_TKNoShift:
.a2c9	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte 			; write the punctuation character
.a2cc	e8		inx				inx 								; consume the character
.a2cd	80 be		bra $a28d			bra 	_TKTokeniseLoop 			; and loop round again.
.a2cf					_TKString:
.a2cf	20 7f a3	jsr $a37f			jsr 	TokeniseString
.a2d2	80 b9		bra $a28d			bra 	_TKTokeniseLoop
.a2d4					_TKHexConstant:
.a2d4	20 ba a3	jsr $a3ba			jsr 	TokeniseHexConstant
.a2d7	80 b4		bra $a28d			bra 	_TKTokeniseLoop
.a2d9					_TKCheckDouble:
.a2d9	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a2dc	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a2de	90 d4		bcc $a2b4			bcc 	_TKStandardPunctuation
.a2e0	c9 3f		cmp #$3f			cmp 	#'>'+1
.a2e2	b0 d0		bcs $a2b4			bcs 	_TKStandardPunctuation
.a2e4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a2e7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a2e9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a2ea	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a2ed	38		sec				sec
.a2ee	e9 3c		sbc #$3c			sbc 	#'<'
.a2f0	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a2f3	e8		inx				inx 								; consume both
.a2f4	e8		inx				inx
.a2f5	80 96		bra $a28d			bra 	_TKTokeniseLoop
.a2f7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a2f9	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a2fc	60		rts				rts
.a2fd					_TKTokeniseIdentifier:
.a2fd	8e 80 04	stx $0480			stx 	identStart 					; save start
.a300	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a303					_TKCheckLoop:
.a303	e8		inx				inx 								; look at next, we know first is identifier.
.a304	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a307	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a309	f0 f8		beq $a303			beq 	_TKCheckLoop
.a30b	c9 30		cmp #$30			cmp	 	#"0"
.a30d	90 0c		bcc $a31b			bcc 	_TKEndIdentifier
.a30f	c9 3a		cmp #$3a			cmp 	#"9"+1
.a311	90 f0		bcc $a303			bcc 	_TKCheckLoop
.a313	c9 41		cmp #$41			cmp	 	#"A"
.a315	90 04		bcc $a31b			bcc 	_TKEndIdentifier
.a317	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a319	90 e8		bcc $a303			bcc 	_TKCheckLoop
.a31b					_TKEndIdentifier:
.a31b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a31e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a320	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a322	f0 06		beq $a32a			beq 	_TKHasTypeCharacter
.a324	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a326	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a328	d0 07		bne $a331			bne 	_TKNoTypeCharacter
.a32a					_TKHasTypeCharacter:
.a32a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a32d	e8		inx				inx 								; read next
.a32e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a331					_TKNoTypeCharacter:
.a331	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a333	d0 09		bne $a33e			bne 	_TKNoArray
.a335	e8		inx				inx 								; skip the (
.a336	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a339	09 04		ora #$04			ora 	#$04
.a33b	8d 84 04	sta $0484			sta 	identTypeByte
.a33e					_TKNoArray:
.a33e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a341	20 db a3	jsr $a3db			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a344	a0 9f		ldy #$9f			ldy 	#(KeywordSet0) >> 8
.a346	a9 a6		lda #$a6			lda 	#(KeywordSet0) & $FF
.a348	20 4d 9f	jsr $9f4d			jsr 	TokeniseSearchTable
.a34b	a2 00		ldx #$00			ldx 	#0
.a34d	b0 1f		bcs $a36e			bcs 	_TKFoundToken
.a34f	a0 a0		ldy #$a0			ldy 	#(KeywordSet1) >> 8
.a351	a9 d8		lda #$d8			lda 	#(KeywordSet1) & $FF
.a353	20 4d 9f	jsr $9f4d			jsr 	TokeniseSearchTable
.a356	a2 81		ldx #$81			ldx 	#$81
.a358	b0 14		bcs $a36e			bcs 	_TKFoundToken
.a35a	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a35c	a9 1c		lda #$1c			lda 	#(KeywordSet2) & $FF
.a35e	20 4d 9f	jsr $9f4d			jsr 	TokeniseSearchTable
.a361	a2 82		ldx #$82			ldx 	#$82
.a363	b0 09		bcs $a36e			bcs 	_TKFoundToken
.a365	20 6b a4	jsr $a46b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a368	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a36b	4c 8d a2	jmp $a28d			jmp 	_TKTokeniseLoop 			; and go round again.
.a36e					_TKFoundToken:
.a36e	48		pha				pha 								; save token
.a36f	8a		txa				txa 								; shift in X, is there one ?
.a370	f0 03		beq $a375			beq 	_TKNoTShift
.a372	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte 			; if so, write it out
.a375					_TKNoTShift:
.a375	68		pla				pla 								; restore and write token
.a376	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a379	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a37c	4c 8d a2	jmp $a28d			jmp 	_TKTokeniseLoop 			; and go round again.
.a37f					TokeniseString:
.a37f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a381	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a384	e8		inx				inx									; start of quoted string.
.a385	da		phx				phx 								; push start of string on top
.a386	ca		dex				dex
.a387					_TSFindEnd:
.a387	e8		inx				inx
.a388	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a38b	f0 04		beq $a391			beq 	_TSEndOfString
.a38d	c9 22		cmp #$22			cmp 	#'"'
.a38f	d0 f6		bne $a387			bne 	_TSFindEnd
.a391					_TSEndOfString:
.a391	7a		ply				ply  								; so now Y is first character, X is character after end.
.a392	48		pha				pha 								; save terminating character
.a393	20 9b a3	jsr $a39b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a396	68		pla				pla 								; terminating character
.a397	f0 01		beq $a39a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a399	e8		inx				inx
.a39a					_TSNotQuote:
.a39a	60		rts				rts
.a39b					TOWriteBlockXY:
.a39b	86 36		stx $36				stx 	zTemp0 						; write end character
.a39d	98		tya				tya
.a39e	49 ff		eor #$ff			eor 	#$FF
.a3a0	38		sec				sec
.a3a1	65 36		adc $36				adc 	zTemp0
.a3a3	1a		inc a				inc 	a 							; one extra for NULL
.a3a4	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a3a7					_TOBlockLoop:
.a3a7	c4 36		cpy $36				cpy 	zTemp0
.a3a9	f0 09		beq $a3b4			beq 	_TOBlockExit
.a3ab	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a3ae	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a3b1	c8		iny				iny
.a3b2	80 f3		bra $a3a7			bra 	_TOBlockLoop
.a3b4					_TOBlockExit:
.a3b4	a9 00		lda #$00			lda 	#0
.a3b6	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a3b9	60		rts				rts
.a3ba					TokeniseHexConstant:
.a3ba	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a3bc	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a3bf	e8		inx				inx									; start of quoted string.
.a3c0	da		phx				phx 								; push start of constant on top
.a3c1	ca		dex				dex
.a3c2					_THFindLoop:
.a3c2	e8		inx				inx
.a3c3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3c6	c9 30		cmp #$30			cmp 	#"0"
.a3c8	90 0c		bcc $a3d6			bcc 	_THFoundEnd
.a3ca	c9 3a		cmp #$3a			cmp 	#"9"+1
.a3cc	90 f4		bcc $a3c2			bcc 	_THFindLoop
.a3ce	c9 41		cmp #$41			cmp 	#"A"
.a3d0	90 04		bcc $a3d6			bcc 	_THFoundEnd
.a3d2	c9 47		cmp #$47			cmp 	#"F"+1
.a3d4	90 ec		bcc $a3c2			bcc 	_THFindLoop
.a3d6					_THFoundEnd:
.a3d6	7a		ply				ply 								; restore start
.a3d7	20 9b a3	jsr $a39b			jsr 	TOWriteBlockXY 				; output the block
.a3da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a3db					TokeniseCalculateHash:
.a3db	da		phx				phx
.a3dc	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a3df	a9 00		lda #$00			lda 	#0
.a3e1					_TCHLoop:
.a3e1	18		clc				clc
.a3e2	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a3e5	e8		inx				inx
.a3e6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a3e9	d0 f6		bne $a3e1			bne 	_TCHLoop
.a3eb	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a3ee	fa		plx				plx
.a3ef	60		rts				rts
.a3f0					FixLineBufferCase:
.a3f0	a2 00		ldx #$00			ldx 	#0
.a3f2					_FLBCLoop:
.a3f2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a3f5	f0 22		beq $a419			beq 	_FLBCExit 					; end of string.
.a3f7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a3f9	f0 11		beq $a40c			beq 	_FLBCInQuotes
.a3fb	e8		inx				inx
.a3fc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a3fe	90 f2		bcc $a3f2			bcc 	_FLBCLoop
.a400	c9 7b		cmp #$7b			cmp 	#'z'+1
.a402	b0 ee		bcs $a3f2			bcs 	_FLBCLoop
.a404	38		sec				sec 								; make U/C
.a405	e9 20		sbc #$20			sbc 	#32
.a407	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a40a	80 e6		bra $a3f2			bra 	_FLBCLoop
.a40c					_FLBCInQuotes:
.a40c	e8		inx				inx 								; advance
.a40d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a410	f0 07		beq $a419			beq 	_FLBCExit 					; exit on EOS
.a412	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a414	d0 f6		bne $a40c			bne 	_FLBCInQuotes
.a416	e8		inx				inx 								; skip over it
.a417	80 d9		bra $a3f2			bra 	_FLBCLoop
.a419					_FLBCExit:
.a419	60		rts				rts
.a41a					TokeniseExtractLineNumber:
.a41a	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a41d	48		pha				pha
.a41e	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a421	48		pha				pha
.a422	20 58 a4	jsr $a458			jsr 	_TELNTimes2 				; line # x 4
.a425	20 58 a4	jsr $a458			jsr 	_TELNTimes2 				; line # x 2
.a428	18		clc				clc 								; add stacked value
.a429	68		pla				pla
.a42a	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a42d	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a430	68		pla				pla
.a431	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a434	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a437	20 58 a4	jsr $a458			jsr 	_TELNTimes2 				; line # x 10
.a43a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a43d	e8		inx				inx
.a43e	29 0f		and #$0f			and 	#15 						; add to line #
.a440	18		clc				clc
.a441	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a444	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a447	90 03		bcc $a44c			bcc 	_TLENNoCarry
.a449	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a44c					_TLENNoCarry:
.a44c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a44f	c9 30		cmp #$30			cmp 	#'0'
.a451	90 04		bcc $a457			bcc 	_TLENExit
.a453	c9 3a		cmp #$3a			cmp 	#'9'+1
.a455	90 c3		bcc $a41a			bcc 	TokeniseExtractLineNumber
.a457					_TLENExit:
.a457	60		rts				rts
.a458					_TELNTimes2:
.a458	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a45b	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a45e	60		rts				rts
.a45f					TokeniseWriteByte:
.a45f	da		phx				phx
.a460	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a463	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a466	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a469	fa		plx				plx
.a46a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a46b					CheckCreateVariableRecord:
.a46b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a46d	85 36		sta $36				sta 	0+zTemp0
.a46f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a471	85 37		sta $37				sta 	1+zTemp0
.a473					_CCVSearch:
.a473	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a475	f0 2c		beq $a4a3			beq 	_CCVFail
.a477	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a479	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a47b	cd 83 04	cmp $0483			cmp 	identHash
.a47e	d0 16		bne $a496			bne 	_CCVNext
.a480	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a482	ae 80 04	ldx $0480			ldx 	identStart
.a485					_CCVCompare:
.a485	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a488	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a48a	e8		inx				inx 								; advance pointers
.a48b	c8		iny				iny
.a48c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a48d	d0 07		bne $a496			bne 	_CCVNext  					; didn't match go to next.
.a48f	90 f4		bcc $a485			bcc 	_CCVCompare 				; not finished yet.
.a491	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a494	f0 41		beq $a4d7			beq 	_CCVFound 					; yes, we were successful
.a496					_CCVNext:
.a496	18		clc				clc
.a497	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a499	65 36		adc $36				adc 	zTemp0
.a49b	85 36		sta $36				sta 	zTemp0
.a49d	90 d4		bcc $a473			bcc 	_CCVSearch
.a49f	e6 37		inc $37				inc 	zTemp0+1
.a4a1	80 d0		bra $a473			bra 	_CCVSearch
.a4a3					_CCVFail:
.a4a3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a4a5	ad 83 04	lda $0483			lda 	identHash
.a4a8	91 36		sta ($36),y			sta 	(zTemp0),y
.a4aa	c8		iny				iny 								; offset 2 is the type byte
.a4ab	ad 84 04	lda $0484			lda 	identTypeByte
.a4ae	91 36		sta ($36),y			sta 	(zTemp0),y
.a4b0	c8		iny				iny
.a4b1					_CCVData:
.a4b1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a4b3	91 36		sta ($36),y			sta 	(zTemp0),y
.a4b5	c8		iny				iny
.a4b6	c0 08		cpy #$08			cpy 	#8
.a4b8	90 f7		bcc $a4b1			bcc 	_CCVData
.a4ba	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a4bd					_CCVCopyName:
.a4bd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4c0	91 36		sta ($36),y			sta 	(zTemp0),y
.a4c2	e8		inx				inx
.a4c3	c8		iny				iny
.a4c4	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a4c7	d0 f4		bne $a4bd			bne 	_CCVCopyName
.a4c9	98		tya				tya 								; patch offset
.a4ca	92 36		sta ($36)			sta 	(zTemp0)
.a4cc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a4ce	91 36		sta ($36),y			sta 	(zTemp0),y
.a4d0	88		dey				dey
.a4d1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a4d3	09 80		ora #$80			ora 	#$80
.a4d5	91 36		sta ($36),y			sta 	(zTemp0),y
.a4d7					_CCVFound:
.a4d7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a4d9	38		sec				sec
.a4da	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a4dc	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a4de	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a4e1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a4e3	20 5f a4	jsr $a45f			jsr 	TokeniseWriteByte
.a4e6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
