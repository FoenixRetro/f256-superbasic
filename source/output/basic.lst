
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 16:08:44 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					lastParameter:
>0716							.fill 	1
.0717					dataPointer:
>0717							.fill 	5
.071c					inDataStatement:
>071c							.fill 	1
.071d					tbOffset:
>071d							.fill 	1
.071e					AssemblerAddress:
>071e							.fill 	2
.0720					AssemblerControl:
>0720							.fill 	1
.0721					ParamStart:
>0721							.fill 	2
.0723					IsGroup1:
>0723							.fill 	1
.0724					BaseOpcode:
>0724							.fill 	1
.0725					ModeMask:
>0725							.fill 	1
.0726					tokenOffset:
>0726							.fill 	1
.0727					tokenLineNumber:
>0727							.fill 	2
.0729					tokenBuffer:
>0729							.fill 	253
.0826					lineBuffer:
>0826							.fill 	MaxLineSize+1
.0877					numberBuffer:
>0877							.fill 	34
.0899					decimalBuffer:
>0899							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.800a	20 0f 89	jsr $890f			jsr 	NewCommand 					; erase current program
.800d	20 da 99	jsr $99da			jsr 	BackloadProgram
.8010	4c 6b 84	jmp $846b			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 272."
>805b	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806b	32 32 2e 20 42 75 69 6c 64 20 32 37 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8079	0d 0d 00					.byte 	13,13,0
>807c							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807c					VectorSetPunc:
>807c	fb 8e					.word	ShiftLeft                        ; $00 <<
>807e	f5 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8080	eb 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8082	70 a6					.word	SyntaxError                      ; $03 !!3
>8084	70 a6					.word	SyntaxError                      ; $04 ><
>8086	ff 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8088	fe 8e					.word	ShiftRight                       ; $06 >>
>808a	70 a6					.word	SyntaxError                      ; $07 !!7
>808c	70 a6					.word	SyntaxError                      ; $08 !!8
>808e	70 a6					.word	SyntaxError                      ; $09 !!9
>8090	70 a6					.word	SyntaxError                      ; $0a !!10
>8092	70 a6					.word	SyntaxError                      ; $0b !!11
>8094	70 a6					.word	SyntaxError                      ; $0c !!12
>8096	70 a6					.word	SyntaxError                      ; $0d !!13
>8098	70 a6					.word	SyntaxError                      ; $0e !!14
>809a	70 a6					.word	SyntaxError                      ; $0f !!15
>809c	70 a6					.word	SyntaxError                      ; $10 @
>809e	70 a6					.word	SyntaxError                      ; $11 !!17
>80a0	70 a6					.word	SyntaxError                      ; $12 !!18
>80a2	70 a6					.word	SyntaxError                      ; $13 [
>80a4	a3 a0					.word	IntegerDivide                    ; $14 \
>80a6	70 a6					.word	SyntaxError                      ; $15 ]
>80a8	84 90					.word	EorInteger                       ; $16 ^
>80aa	70 a6					.word	SyntaxError                      ; $17 _
>80ac	70 a6					.word	SyntaxError                      ; $18 `
>80ae	70 a6					.word	SyntaxError                      ; $19 !!25
>80b0	70 a6					.word	SyntaxError                      ; $1a !!26
>80b2	70 a6					.word	SyntaxError                      ; $1b {
>80b4	3e 90					.word	OraInteger                       ; $1c |
>80b6	70 a6					.word	SyntaxError                      ; $1d }
>80b8	70 a6					.word	SyntaxError                      ; $1e ~
>80ba	70 a6					.word	SyntaxError                      ; $1f [7m<7F>[m
>80bc	70 a6					.word	SyntaxError                      ; $20
>80be	ca 90					.word	WordIndirect                     ; $21 !
>80c0	70 a6					.word	SyntaxError                      ; $22 "
>80c2	70 a6					.word	SyntaxError                      ; $23 #
>80c4	70 a6					.word	SyntaxError                      ; $24 $
>80c6	f0 a0					.word	IntegerModulus                   ; $25 %
>80c8	f8 8f					.word	AndInteger                       ; $26 &
>80ca	70 a6					.word	SyntaxError                      ; $27 '
>80cc	70 a6					.word	SyntaxError                      ; $28 (
>80ce	70 a6					.word	SyntaxError                      ; $29 )
>80d0	65 a1					.word	MulInteger                       ; $2a *
>80d2	92 8f					.word	AddInteger                       ; $2b +
>80d4	70 a6					.word	SyntaxError                      ; $2c ,
>80d6	cd 8f					.word	SubInteger                       ; $2d -
>80d8	70 a6					.word	SyntaxError                      ; $2e .
>80da	fc a2					.word	FDivideCommand                   ; $2f /
>80dc	70 a6					.word	SyntaxError                      ; $30 0
>80de	70 a6					.word	SyntaxError                      ; $31 1
>80e0	70 a6					.word	SyntaxError                      ; $32 2
>80e2	70 a6					.word	SyntaxError                      ; $33 3
>80e4	70 a6					.word	SyntaxError                      ; $34 4
>80e6	70 a6					.word	SyntaxError                      ; $35 5
>80e8	70 a6					.word	SyntaxError                      ; $36 6
>80ea	70 a6					.word	SyntaxError                      ; $37 7
>80ec	70 a6					.word	SyntaxError                      ; $38 8
>80ee	70 a6					.word	SyntaxError                      ; $39 9
>80f0	70 a6					.word	SyntaxError                      ; $3a :
>80f2	70 a6					.word	SyntaxError                      ; $3b ;
>80f4	d7 8d					.word	BinaryCompareLess                ; $3c <
>80f6	cd 8d					.word	BinaryCompareEqual               ; $3d =
>80f8	e1 8d					.word	BinaryCompareGreater             ; $3e >
>80fa	f1 90					.word	ByteIndirect                     ; $3f ?
.80fc					VectorSet0:
>80fc	fa 8a					.word	EOLCommand                       ; $80 !0:EOF
>80fe	07 8b					.word	Shift1Command                    ; $81 !1:SH1
>8100	0f 8b					.word	Shift2Command                    ; $82 !2:SH2
>8102	42 a4					.word	AbsUnary                         ; $83 ABS(
>8104	bb 95					.word	AllocUnary                       ; $84 ALLOC(
>8106	52 a4					.word	AscUnary                         ; $85 ASC(
>8108	db 96					.word	ChrUnary                         ; $86 CHR$(
>810a	c9 8d					.word	UnaryFalse                       ; $87 FALSE
>810c	5f a4					.word	FracUnary                        ; $88 FRAC(
>810e	75 a4					.word	IntUnary                         ; $89 INT(
>8110	cb a4					.word	IsValUnary                       ; $8a ISVAL(
>8112	b5 97					.word	Unary_Left                       ; $8b LEFT$(
>8114	87 a4					.word	LenUnary                         ; $8c LEN(
>8116	df 97					.word	Unary_Mid                        ; $8d MID$(
>8118	2b 96					.word	Unary_Not                        ; $8e NOT(
>811a	41 96					.word	Unary_Random                     ; $8f RANDOM(
>811c	c5 97					.word	Unary_Right                      ; $90 RIGHT$(
>811e	5a 96					.word	Unary_Rnd                        ; $91 RND(
>8120	a1 a4					.word	SgnUnary                         ; $92 SGN(
>8122	ed 96					.word	SpcUnary                         ; $93 SPC(
>8124	08 97					.word	Unary_Str                        ; $94 STR$(
>8126	bd 8d					.word	UnaryTrue                        ; $95 TRUE
>8128	c1 a4					.word	ValUnary                         ; $96 VAL(
>812a	24 86					.word	ForCommand                       ; $97 FOR
>812c	71 87					.word	IfCommand                        ; $98 IF
>812e	17 8b					.word	Unused1                          ; $99 PROC
>8130	36 8a					.word	Command_REPEAT                   ; $9a REPEAT
>8132	22 8d					.word	Command_WHILE                    ; $9b WHILE
>8134	9a 87					.word	EndIf                            ; $9c ENDIF
>8136	7c a0					.word	Command_ENDPROC                  ; $9d ENDPROC
>8138	de 86					.word	NextCommand                      ; $9e NEXT
>813a	17 8b					.word	Unused4                          ; $9f THEN
>813c	3f 8a					.word	Command_UNTIL                    ; $a0 UNTIL
>813e	43 8d					.word	Command_WEND                     ; $a1 WEND
>8140	ca 84					.word	CallCommand                      ; $a2 CALL
>8142	70 a6					.word	SyntaxError                      ; $a3 CLS
>8144	5c 85					.word	Command_Data                     ; $a4 DATA
>8146	64 85					.word	DimCommand                       ; $a5 DIM
>8148	17 8b					.word	Unused3                          ; $a6 DOWNTO
>814a	93 87					.word	ElseCode                         ; $a7 ELSE
>814c	37 87					.word	Command_GOSUB                    ; $a8 GOSUB
>814e	55 87					.word	GotoCommand                      ; $a9 GOTO
>8150	9b 87					.word	LetCommand                       ; $aa LET
>8152	8b 88					.word	Command_LOCAL                    ; $ab LOCAL
>8154	19 89					.word	Command_Print                    ; $ac PRINT
>8156	d0 89					.word	Command_Read                     ; $ad READ
>8158	29 8a					.word	RemCommand                       ; $ae REM
>815a	47 87					.word	Command_RETURN                   ; $af RETURN
>815c	17 8b					.word	Unused2                          ; $b0 TO
.815e					VectorSet1:
>815e	70 a6					.word	SyntaxError                      ; $80 !0:EOF
>8160	70 a6					.word	SyntaxError                      ; $81 !1:SH1
>8162	70 a6					.word	SyntaxError                      ; $82 !2:SH2
>8164	9b 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	ba 84					.word	AssertCommand                    ; $84 ASSERT
>8168	04 85					.word	ClearCommand                     ; $85 CLEAR
>816a	21 86					.word	EndCommand                       ; $86 END
>816c	f0 87					.word	Command_List                     ; $87 LIST
>816e	0f 89					.word	NewCommand                       ; $88 NEW
>8170	58 8a					.word	Command_Restore                  ; $89 RESTORE
>8172	8a 8a					.word	CommandRUN                       ; $8a RUN
>8174	1a 8b					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	70 a6					.word	SyntaxError                      ; $80 !0:EOF
>8178	70 a6					.word	SyntaxError                      ; $81 !1:SH1
>817a	70 a6					.word	SyntaxError                      ; $82 !2:SH2
>817c	2f a5					.word	Assemble_adc                     ; $83 ADC
>817e	27 a5					.word	Assemble_and                     ; $84 AND
>8180	43 a5					.word	Assemble_asl                     ; $85 ASL
>8182	ad a5					.word	Assemble_bcc                     ; $86 BCC
>8184	b1 a5					.word	Assemble_bcs                     ; $87 BCS
>8186	b9 a5					.word	Assemble_beq                     ; $88 BEQ
>8188	70 a5					.word	Assemble_bit                     ; $89 BIT
>818a	a1 a5					.word	Assemble_bmi                     ; $8a BMI
>818c	b5 a5					.word	Assemble_bne                     ; $8b BNE
>818e	9d a5					.word	Assemble_bpl                     ; $8c BPL
>8190	bd a5					.word	Assemble_bra                     ; $8d BRA
>8192	c1 a5					.word	Assemble_brk                     ; $8e BRK
>8194	a5 a5					.word	Assemble_bvc                     ; $8f BVC
>8196	a9 a5					.word	Assemble_bvs                     ; $90 BVS
>8198	c9 a5					.word	Assemble_clc                     ; $91 CLC
>819a	1d a6					.word	Assemble_cld                     ; $92 CLD
>819c	dd a5					.word	Assemble_cli                     ; $93 CLI
>819e	0d a6					.word	Assemble_clv                     ; $94 CLV
>81a0	3b a5					.word	Assemble_cmp                     ; $95 CMP
>81a2	84 a5					.word	Assemble_cpx                     ; $96 CPX
>81a4	7f a5					.word	Assemble_cpy                     ; $97 CPY
>81a6	61 a5					.word	Assemble_dec                     ; $98 DEC
>81a8	19 a6					.word	Assemble_dex                     ; $99 DEX
>81aa	f5 a5					.word	Assemble_dey                     ; $9a DEY
>81ac	2b a5					.word	Assemble_eor                     ; $9b EOR
>81ae	66 a5					.word	Assemble_inc                     ; $9c INC
>81b0	29 a6					.word	Assemble_inx                     ; $9d INX
>81b2	15 a6					.word	Assemble_iny                     ; $9e INY
>81b4	98 a5					.word	Assemble_jmp                     ; $9f JMP
>81b6	93 a5					.word	Assemble_jsr                     ; $a0 JSR
>81b8	37 a5					.word	Assemble_lda                     ; $a1 LDA
>81ba	5c a5					.word	Assemble_ldx                     ; $a2 LDX
>81bc	7a a5					.word	Assemble_ldy                     ; $a3 LDY
>81be	4d a5					.word	Assemble_lsr                     ; $a4 LSR
>81c0	2d a6					.word	Assemble_nop                     ; $a5 NOP
>81c2	23 a5					.word	Assemble_ora                     ; $a6 ORA
>81c4	d9 a5					.word	Assemble_pha                     ; $a7 PHA
>81c6	c5 a5					.word	Assemble_php                     ; $a8 PHP
>81c8	21 a6					.word	Assemble_phx                     ; $a9 PHX
>81ca	e1 a5					.word	Assemble_phy                     ; $aa PHY
>81cc	e9 a5					.word	Assemble_pla                     ; $ab PLA
>81ce	cd a5					.word	Assemble_plp                     ; $ac PLP
>81d0	35 a6					.word	Assemble_plx                     ; $ad PLX
>81d2	f1 a5					.word	Assemble_ply                     ; $ae PLY
>81d4	48 a5					.word	Assemble_rol                     ; $af ROL
>81d6	52 a5					.word	Assemble_ror                     ; $b0 ROR
>81d8	d5 a5					.word	Assemble_rti                     ; $b1 RTI
>81da	e5 a5					.word	Assemble_rts                     ; $b2 RTS
>81dc	3f a5					.word	Assemble_sbc                     ; $b3 SBC
>81de	d1 a5					.word	Assemble_sec                     ; $b4 SEC
>81e0	31 a6					.word	Assemble_sed                     ; $b5 SED
>81e2	ed a5					.word	Assemble_sei                     ; $b6 SEI
>81e4	33 a5					.word	Assemble_sta                     ; $b7 STA
>81e6	25 a6					.word	Assemble_stp                     ; $b8 STP
>81e8	57 a5					.word	Assemble_stx                     ; $b9 STX
>81ea	75 a5					.word	Assemble_sty                     ; $ba STY
>81ec	6b a5					.word	Assemble_stz                     ; $bb STZ
>81ee	09 a6					.word	Assemble_tax                     ; $bc TAX
>81f0	05 a6					.word	Assemble_tay                     ; $bd TAY
>81f2	8e a5					.word	Assemble_trb                     ; $be TRB
>81f4	89 a5					.word	Assemble_tsb                     ; $bf TSB
>81f6	11 a6					.word	Assemble_tsx                     ; $c0 TSX
>81f8	f9 a5					.word	Assemble_txa                     ; $c1 TXA
>81fa	01 a6					.word	Assemble_txs                     ; $c2 TXS
>81fc	fd a5					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fe					AssembleGroup1:
.81fe	a9 ff		lda #$ff			lda 	#$FF
.8200	8d 25 07	sta $0725			sta 	ModeMask 					; initialise the mode mask - all for all
.8203	80 02		bra $8207			bra 	AsmGroup12
.8205					AssembleGroup2:
.8205	a5 00		lda $00				lda 	$00
.8207					AsmGroup12:
.8207	8d 23 07	sta $0723			sta 	IsGroup1 					; save the 'group 1' flag
.820a	68		pla				pla 								; pop the return address to access the information following.
.820b	fa		plx				plx
.820c	20 95 82	jsr $8295			jsr 	AccessParameters 			; get opcode and save as base
.820f	8d 24 07	sta $0724			sta 	BaseOpcode
.8212	ad 23 07	lda $0723			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8215	d0 08		bne $821f			bne 	_AG12HaveMask
.8217	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8219	20 9d 82	jsr $829d			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821c	8d 25 07	sta $0725			sta 	ModeMask
.821f					_AG12HaveMask:
.821f	20 d8 83	jsr $83d8			jsr 	TypeAndCalculateOperand 	; get zero page type
.8222	da		phx				phx 								; save found address mode
.8223	20 01 83	jsr $8301			jsr 	AssembleModeX
.8226	fa		plx				plx  								; restore address mode
.8227	b0 0b		bcs $8234			bcs 	_AG12Exit
.8229	20 35 82	jsr $8235			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822c	20 01 83	jsr $8301			jsr 	AssembleModeX
.822f	b0 03		bcs $8234			bcs 	_AG12Exit
.8231	4c 70 a6	jmp $a670			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8234					_AG12Exit:
.8234	60		rts				rts
.8235					PromoteToAbsolute:
.8235	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8237	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8239	f0 19		beq $8254			beq 	_PTADo
.823b	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823d	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823f	f0 13		beq $8254			beq 	_PTADo
.8241	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8243	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8245	f0 0d		beq $8254			beq 	_PTADo
.8247	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8249	e0 d1		cpx #$d1			cpx 	#AM_IND
.824b	f0 07		beq $8254			beq 	_PTADo
.824d	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824f	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8251	f0 01		beq $8254			beq 	_PTADo
.8253	60		rts				rts
.8254					_PTADo:
.8254	aa		tax				tax
.8255	60		rts				rts
.8256					AssembleGroup3:
.8256	68		pla				pla 								; get parameters, which is just the opcode.
.8257	fa		plx				plx
.8258	20 95 82	jsr $8295			jsr 	AccessParameters 			; get and output opcode
.825b	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte
.825e	20 3c 84	jsr $843c			jsr 	CalculateOperand 			; get a 16 bit operand
.8261	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8264	38		sec				sec
.8265	ed 1e 07	sbc $071e			sbc 	AssemblerAddress
.8268	48		pha				pha 								; LSB in A
.8269	ad 10 06	lda $0610			lda 	NSMantissa1
.826c	ed 1f 07	sbc $071f			sbc 	AssemblerAddress+1
.826f	aa		tax				tax 								; MSB in X
.8270	68		pla				pla
.8271	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8272	69 7f		adc #$7f			adc 	#$7F
.8274	90 01		bcc $8277			bcc 	_AG3NoCarry
.8276	e8		inx				inx
.8277					_AG3NoCarry:
.8277	38		sec				sec 								; fix back and write out anyways.
.8278	e9 80		sbc #$80			sbc 	#$80
.827a	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte
.827d	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827f	f0 0a		beq $828b			beq 	_AG3Exit
.8281	ad 20 07	lda $0720			lda 	AssemblerControl 			; are we allowing bad values ?
.8284	29 01		and #$01			and 	#1
.8286	f0 03		beq $828b			beq 	_AG3Exit
.8288	4c 75 a6	jmp $a675			jmp 	RangeError 					; no, branch is out of range
.828b					_AG3Exit:
.828b	60		rts				rts
.828c					AssembleGroup4:
.828c	68		pla				pla 								; pop address
.828d	fa		plx				plx
.828e	20 95 82	jsr $8295			jsr 	AccessParameters 			; access and get first
.8291	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte 			; output it.
.8294	60		rts				rts
.8295					AccessParameters:
.8295	8d 21 07	sta $0721			sta 	ParamStart
.8298	8e 22 07	stx $0722			stx 	ParamStart+1
.829b	a9 01		lda #$01			lda 	#1
.829d					GetParameter:
.829d	5a		phy				phy
.829e	a8		tay				tay
.829f	ad 21 07	lda $0721			lda 	ParamStart
.82a2	85 36		sta $36				sta 	zTemp0
.82a4	ad 22 07	lda $0722			lda 	ParamStart+1
.82a7	85 37		sta $37				sta 	zTemp0+1
.82a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ab	7a		ply				ply
.82ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ad					AssemblerWriteByte:
.82ad	48		pha			pha
.82ae	ad 20 07	lda $0720		lda 	AssemblerControl 				; check printing bytes ?
.82b1	29 02		and #$02		and 	#2
.82b3	f0 1b		beq $82d0		beq 	_AWBNoPrint
.82b5	ad 1f 07	lda $071f		lda		AssemblerAddress+1 				; print address
.82b8	20 eb 82	jsr $82eb		jsr 	PrintHex
.82bb	ad 1e 07	lda $071e		lda		AssemblerAddress
.82be	20 eb 82	jsr $82eb		jsr 	PrintHex
.82c1	a9 20		lda #$20		lda 	#' '
.82c3	20 e3 a8	jsr $a8e3		jsr 	EXTPrintCharacter
.82c6	68		pla			pla 									; print byte
.82c7	48		pha			pha
.82c8	20 eb 82	jsr $82eb		jsr 	PrintHex
.82cb	a9 0d		lda #$0d		lda 	#13
.82cd	20 e3 a8	jsr $a8e3		jsr 	EXTPrintCharacter
.82d0					_AWBNoPrint:
.82d0	ad 1e 07	lda $071e		lda		AssemblerAddress				; copy address to zTemp0
.82d3	85 36		sta $36			sta 	zTemp0
.82d5	ad 1f 07	lda $071f		lda		AssemblerAddress+1
.82d8	f0 0e		beq $82e8		beq 	_AWBRange
.82da	85 37		sta $37			sta 	zTemp0+1
.82dc	68		pla			pla 									; write byte out
.82dd	92 36		sta ($36)		sta 	(zTemp0)
.82df	ee 1e 07	inc $071e		inc 	AssemblerAddress 				; bump address
.82e2	d0 03		bne $82e7		bne 	_AWBNoCarry
.82e4	ee 1f 07	inc $071f		inc 	AssemblerAddress+1
.82e7					_AWBNoCarry:
.82e7	60		rts			rts
.82e8					_AWBRange:
.82e8	4c 75 a6	jmp $a675		jmp 	RangeError
.82eb					PrintHex:
.82eb	48		pha				pha
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	4a		lsr a				lsr 	a
.82ef	4a		lsr a				lsr 	a
.82f0	20 f4 82	jsr $82f4			jsr 	_PrintNibble
.82f3	68		pla				pla
.82f4					_PrintNibble:
.82f4	29 0f		and #$0f			and 	#15
.82f6	c9 0a		cmp #$0a			cmp 	#10
.82f8	90 02		bcc $82fc			bcc 	_NoShift
.82fa	69 06		adc #$06			adc 	#6
.82fc					_NoShift:
.82fc	69 30		adc #$30			adc 	#48
.82fe	4c e3 a8	jmp $a8e3			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8301					AssembleModeX:
.8301	5a		phy				phy
.8302	ad 23 07	lda $0723			lda 	IsGroup1
.8305	f0 17		beq $831e			beq 	_AMXGroup2
.8307	8a		txa				txa 							; is it in group # 1
.8308	29 40		and #$40			and 	#AM_ISG1
.830a	f0 50		beq $835c			beq 	_AMXFail 				; no, give up.
.830c	8a		txa				txa 							; get back.
.830d	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830f	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8311	d0 22		bne $8335			bne 	_AMXHaveInfo
.8313	ad 24 07	lda $0724			lda 	BaseOpcode 				; cannot store immediate.
.8316	c9 81		cmp #$81			cmp 	#$81
.8318	f0 42		beq $835c			beq 	_AMXFail
.831a	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831c	80 17		bra $8335			bra 	_AMXHaveInfo 			; odd design decision there.
.831e					_AMXGroup2:
.831e	8a		txa				txa 							; is it in group 2 ?
.831f	29 20		and #$20			and 	#AM_ISG2
.8321	f0 39		beq $835c			beq 	_AMXFail 				; no, give up.
.8323	8a		txa				txa 							; get the offset into Y
.8324	29 1f		and #$1f			and 	#$1F
.8326	4a		lsr a				lsr 	a 						; make it 0-7.
.8327	4a		lsr a				lsr  	a
.8328	a8		tay				tay
.8329	ad 25 07	lda $0725			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832c					_AMXCheckOkay:
.832c	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832d	88		dey				dey
.832e	10 fc		bpl $832c			bpl 	_AMXCheckOkay
.8330	90 2a		bcc $835c			bcc 	_AMXFail 				; not allowed.
.8332	8a		txa				txa  							; get mask back
.8333	29 1f		and #$1f			and 	#$1F
.8335					_AMXHaveInfo:
.8335	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8337	10 05		bpl $833e			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8339	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833c	d0 1e		bne $835c			bne 	_AMXFail
.833e					_AMXAnySize:
.833e	18		clc				clc 							; add offset to the base opcode
.833f	6d 24 07	adc $0724			adc 	BaseOpcode
.8342					_AMXOutputCode:
.8342	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte 		; write the opcode out.
.8345	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8347	f0 10		beq $8359			beq 	_AMXExit
.8349	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834c	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte
.834f	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8351	30 06		bmi $8359			bmi 	_AMXExit
.8353	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8356	20 ad 82	jsr $82ad			jsr 	AssemblerWriteByte
.8359					_AMXExit:
.8359	7a		ply				ply
.835a	38		sec				sec
.835b	60		rts				rts
.835c					_AMXFail:
.835c	a0 00		ldy #$00			ldy 	#0
.835e					_AMXCheckOddities:
.835e	8a		txa				txa
.835f	d9 87 83	cmp $8387,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8362	d0 16		bne $837a			bne 	_AMXCONext
.8364	b9 85 83	lda $8385,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8367	cd 24 07	cmp $0724			cmp 	BaseOpcode
.836a	d0 0e		bne $837a			bne 	_AMXCONext
.836c	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836e	10 05		bpl $8375			bpl 	_AMXCONotZero
.8370	ad 10 06	lda $0610			lda 	NSMantissa1
.8373	d0 05		bne $837a			bne 	_AMXCONext
.8375					_AMXCONotZero:
.8375	b9 86 83	lda $8386,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8378	80 c8		bra $8342			bra 	_AMXOutputCode 			; and assemble it
.837a					_AMXCONext:
.837a	c8		iny				iny
.837b	c8		iny				iny
.837c	c8		iny				iny
.837d	b9 85 83	lda $8385,y			lda 	ExtraOpcode+0,y 		; end of table
.8380	d0 dc		bne $835e			bne 	_AMXCheckOddities
.8382					_AMXCOFail:
.8382	7a		ply				ply
.8383	18		clc				clc
.8384	60		rts				rts
.8385					ExtraOpcode:
>8385	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8388	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>838b	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838e	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8391	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8394	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8397	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>839a	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839d	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>83a0	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a3	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a4					LabelHere:
.83a4	c8		iny				iny 								; skip .
.83a5	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a7	20 2b 94	jsr $942b			jsr 	EvaluateTerm 				; get a term
.83aa	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ad	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83af	d0 24		bne $83d5			bne 	_ALType
.83b1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b4	85 36		sta $36				sta 	zTemp0
.83b6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b9	85 37		sta $37				sta 	zTemp0+1
.83bb	5a		phy				phy 								; copy address in.
.83bc	a0 01		ldy #$01			ldy 	#1
.83be	ad 1e 07	lda $071e			lda	 	AssemblerAddress
.83c1	92 36		sta ($36)			sta 	(zTemp0)
.83c3	ad 1f 07	lda $071f			lda	 	AssemblerAddress+1
.83c6	91 36		sta ($36),y			sta 	(zTemp0),y
.83c8	c8		iny				iny
.83c9	a9 00		lda #$00			lda 	#0
.83cb	91 36		sta ($36),y			sta 	(zTemp0),y
.83cd	c8		iny				iny
.83ce	91 36		sta ($36),y			sta 	(zTemp0),y
.83d0	c8		iny				iny
.83d1	91 36		sta ($36),y			sta 	(zTemp0),y
.83d3	7a		ply				ply
.83d4	60		rts				rts
.83d5					_ALType:
.83d5	4c 7a a6	jmp $a67a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d8					TypeAndCalculateOperand:
.83d8	b1 30		lda ($30),y			lda 	(codePtr),y
.83da	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83dc	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83de	f0 5b		beq $843b			beq 	_TACOExit
.83e0	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e2	f0 57		beq $843b			beq 	_TACOExit
.83e4	c8		iny				iny
.83e5	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e7	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e9	f0 51		beq $843c			beq 	CalculateOperand
.83eb	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83ed	f0 1f		beq $840e			beq 	_TACOIndirect
.83ef	88		dey				dey 								; undo get of first character
.83f0	20 3c 84	jsr $843c			jsr 	CalculateOperand 			; get operand
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f9	d0 40		bne $843b			bne 	_TACOExit
.83fb	c8		iny				iny
.83fc	20 01 a0	jsr $a001			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83ff	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8401	c9 58		cmp #$58			cmp 	#'X'
.8403	f0 36		beq $843b			beq 	_TACOExit
.8405	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8407	c9 59		cmp #$59			cmp 	#'Y'
.8409	f0 30		beq $843b			beq 	_TACOExit
.840b					_TACOSyntax:
.840b	4c 70 a6	jmp $a670			jmp 	SyntaxError
.840e					_TACOIndirect:
.840e	20 3c 84	jsr $843c			jsr 	CalculateOperand 			; get the operand
.8411	b1 30		lda ($30),y			lda 	(codePtr),y
.8413	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8415	f0 17		beq $842e			beq 	_TACOIndX
.8417	20 8a a0	jsr $a08a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.841a	b1 30		lda ($30),y			lda 	(codePtr),y
.841c	a2 d1		ldx #$d1			ldx 	#AM_IND
.841e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8420	d0 19		bne $843b			bne 	_TACOExit
.8422	c8		iny				iny
.8423	20 01 a0	jsr $a001			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8426	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8428	d0 e1		bne $840b			bne 	_TACOSyntax
.842a	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842c	80 0d		bra $843b			bra 	_TACOExit
.842e					_TACOIndX:
.842e	c8		iny				iny
.842f	20 01 a0	jsr $a001			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8432	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8434	d0 d5		bne $840b			bne 	_TACOSyntax
.8436	20 8a a0	jsr $a08a			jsr 	CheckRightBracket			; check )
.8439	a2 c0		ldx #$c0			ldx 	#AM_INDX
.843b					_TACOExit:
.843b	60		rts				rts
.843c					CalculateOperand:
.843c	48		pha				pha
.843d	da		phx				phx
.843e	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8440	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger
.8443	fa		plx				plx
.8444	68		pla				pla
.8445	60		rts				rts
.a001					TACOCheckXY:
.a001	b1 30		lda ($30),y			lda 	(codePtr),y
.a003	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a005	c9 40		cmp #$40			cmp 	#$40
.a007	d0 21		bne $a02a			bne 	_TCXYFail
.a009	b1 30		lda ($30),y			lda 	(codePtr),y
.a00b	18		clc				clc
.a00c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a00e	85 37		sta $37				sta 	zTemp0+1
.a010	c8		iny				iny
.a011	b1 30		lda ($30),y			lda 	(codePtr),y
.a013	c8		iny				iny
.a014	85 36		sta $36				sta 	zTemp0
.a016	5a		phy				phy 								; save position
.a017	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a019	b1 36		lda ($36),y			lda 	(zTemp0),y
.a01b	d0 0c		bne $a029			bne 	_TCXYPopFail
.a01d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a01f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a021	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a023	f0 08		beq $a02d			beq 	_TCXYFound
.a025	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a027	f0 04		beq $a02d			beq 	_TCXYFound
.a029					_TCXYPopFail:
.a029	7a		ply				ply
.a02a					_TCXYFail:
.a02a	a9 00		lda #$00			lda 	#0
.a02c	60		rts				rts
.a02d					_TCXYFound:
.a02d	7a		ply				ply 								; restore position
.a02e	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a030	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8446					EditProgramCode:
.8446	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line.
.8449	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1
.844c	20 ce 9f	jsr $9fce			jsr 	MemorySearch
.844f	90 05		bcc $8456			bcc 	_EPCNoDelete 				; reached the end don't delete
.8451	d0 03		bne $8456			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8453	20 27 a9	jsr $a927			jsr 	MemoryDeleteLine 			; delete the line
.8456					_EPCNoDelete:
.8456	ad 29 07	lda $0729			lda 	TokenBuffer 				; buffer empty
.8459	c9 80		cmp #$80			cmp 	#KWC_EOL
.845b	f0 0d		beq $846a			beq 	_EPCNoInsert
.845d	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8460	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8463	20 ce 9f	jsr $9fce			jsr 	MemorySearch
.8466	18		clc				clc 								; insert at this point.
.8467	20 5e a9	jsr $a95e			jsr 	MemoryInsertLine 			; insert the line
.846a					_EPCNoInsert:
.846a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.846b					WarmStart:
.846b	a2 ff		ldx #$ff			ldx 	#$FF
.846d	9a		txs				txs
.846e	20 f9 a8	jsr $a8f9			jsr 	EXTInputLine 				; get line to lineBuffer
.8471	20 2d 9d	jsr $9d2d			jsr 	TokeniseLine 				; tokenise the line
.8474	ad 27 07	lda $0727			lda 	TokenLineNumber 			; line number ?
.8477	0d 28 07	ora $0728			ora 	TokenLineNumber+1
.847a	d0 17		bne $8493			bne 	_WSEditCode 				; if so,edit code.
.847c	9c 26 07	stz $0726			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847f	a9 26		lda #$26			lda 	#((TokenOffset) & $FF)
.8481	85 30		sta $30				sta 	codePtr
.8483	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8485	85 31		sta $31				sta 	codePtr+1
.8487	ad 29 07	lda $0729			lda 	TokenBuffer 				; nothing to run
.848a	c9 80		cmp #$80			cmp 	#KWC_EOL
.848c	f0 dd		beq $846b			beq 	WarmStart
.848e	20 9c 8a	jsr $8a9c			jsr 	RUNCodePointerLine 			; execute that line.
.8491	80 d8		bra $846b			bra 	WarmStart
.8493					_WSEditCode:
.8493	20 46 84	jsr $8446			jsr 	EditProgramCode
.8496	20 04 85	jsr $8504			jsr 	ClearCommand
.8499	80 d0		bra $846b			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.849b					AssembleCommand:
.849b	a2 00		ldx #$00			ldx 	#0
.849d	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger 		; start address
.84a0	ad 08 06	lda $0608			lda 	NSMantissa0
.84a3	8d 1e 07	sta $071e			sta 	AssemblerAddress
.84a6	ad 10 06	lda $0610			lda 	NSMantissa1
.84a9	8d 1f 07	sta $071f			sta 	AssemblerAddress+1
.84ac	20 92 a0	jsr $a092			jsr 	CheckComma
.84af	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; options
.84b2	ad 08 06	lda $0608			lda 	NSMantissa0
.84b5	8d 20 07	sta $0720			sta 	AssemblerControl
.84b8	60		rts				rts
.84b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84ba					AssertCommand:
.84ba	a2 00		ldx #$00			ldx 	#0
.84bc	20 80 98	jsr $9880			jsr 	EvaluateInteger 			; the assert test
.84bf	20 39 99	jsr $9939			jsr 	NSMIsZero 					; exit if result is non zero.
.84c2	d0 05		bne $84c9			bne 	_ACExit
.84c4	a9 0a		lda #$0a		lda	#10
.84c6	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.84c9					_ACExit:
.84c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84ca					CallCommand:
.84ca	a2 00		ldx #$00			ldx 	#0
.84cc	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger
.84cf					_CCClear
.84cf	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.84d0	20 09 99	jsr $9909			jsr 	NSMSetZero
.84d3	e0 04		cpx #$04			cpx 	#4
.84d5	d0 f8		bne $84cf			bne 	_CCClear
.84d7	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.84d9					_CCCParam:
.84d9	b1 30		lda ($30),y			lda 	(codePtr),y
.84db	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84dd	d0 09		bne $84e8			bne 	_CCCRun6502
.84df	c8		iny				iny 								; skip comma
.84e0	e8		inx				inx	 								; next level
.84e1	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.84e4	e0 03		cpx #$03			cpx 	#3
.84e6	90 f1		bcc $84d9			bcc 	_CCCParam 					; done all 3 ?
.84e8					_CCCRun6502:
.84e8	5a		phy				phy 								; save position
.84e9	ad 10 06	lda $0610			lda 	NSMantissa1 				; put address in zTemp0
.84ec	85 37		sta $37				sta 	zTemp0+1
.84ee	ad 08 06	lda $0608			lda 	NSMantissa0
.84f1	85 36		sta $36				sta 	zTemp0
.84f3	ad 09 06	lda $0609			lda 	NSMantissa0+1 				; get registers
.84f6	ae 0a 06	ldx $060a			ldx 	NSMantissa0+2
.84f9	ac 0b 06	ldy $060b			ldy 	NSMantissa0+3
.84fc	20 01 85	jsr $8501			jsr 	_CCCZTemp0 					; call zTemp0
.84ff	7a		ply				ply 								; restore position and exit
.8500	60		rts				rts
.8501					_CCCZTemp0:
.8501	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8504					ClearCommand:
.8504	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8506	85 36		sta $36				sta 	0+zTemp0
.8508	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.850a	85 37		sta $37				sta 	1+zTemp0
.850c					_ClearZeroLoop:
.850c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.850e	f0 24		beq $8534			beq 	_ClearZeroEnd
.8510	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8512	a9 00		lda #$00			lda 	#0
.8514					_ClearOneVariable:
.8514	91 36		sta ($36),y			sta 	(zTemp0),y
.8516	c8		iny				iny
.8517	c0 08		cpy #$08			cpy 	#8
.8519	d0 f9		bne $8514			bne 	_ClearOneVariable
.851b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.851d	b1 36		lda ($36),y			lda 	(zTemp0),y
.851f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8521	d0 04		bne $8527			bne 	_ClearNotProcedure
.8523	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8525	91 36		sta ($36),y			sta 	(zTemp0),y
.8527					_ClearNotProcedure:
.8527	18		clc				clc 								; go to the next variable
.8528	b2 36		lda ($36)			lda 	(zTemp0)
.852a	65 36		adc $36				adc 	zTemp0
.852c	85 36		sta $36				sta 	zTemp0
.852e	90 dc		bcc $850c			bcc 	_ClearZeroLoop
.8530	e6 37		inc $37				inc 	zTemp0+1
.8532	80 d8		bra $850c			bra 	_ClearZeroLoop
.8534					_ClearZeroEnd:
.8534	18		clc				clc
.8535	a5 36		lda $36				lda 	zTemp0
.8537	69 01		adc #$01			adc 	#1
.8539	8d 0c 07	sta $070c			sta 	lowMemPtr
.853c	a5 37		lda $37				lda 	zTemp0+1
.853e	69 00		adc #$00			adc 	#0
.8540	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8543	20 cd 99	jsr $99cd			jsr 	StackReset
.8546	20 72 a8	jsr $a872			jsr 	StringSystemInitialise
.8549	20 71 8c	jsr $8c71			jsr 	ProcedureScan
.854c	20 58 8a	jsr $8a58			jsr 	Command_Restore
.854f	9c 1e 07	stz $071e			stz 	AssemblerAddress
.8552	9c 1f 07	stz $071f			stz 	AssemblerAddress+1
.8555	9c 20 07	stz $0720			stz 	AssemblerControl
.8558	20 18 96	jsr $9618			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.855b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.855c					Command_Data:
.855c	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.855e	a2 80		ldx #$80			ldx 	#KWC_EOL
.8560	20 c3 8c	jsr $8cc3			jsr 	ScanForward
.8563	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8564					DimCommand:
.8564	b1 30		lda ($30),y			lda 	(codePtr),y
.8566	29 c0		and #$c0			and 	#$C0
.8568	c9 40		cmp #$40			cmp 	#$40
.856a	d0 7a		bne $85e6			bne 	_DCSyntax
.856c	b1 30		lda ($30),y			lda 	(codePtr),y
.856e	18		clc				clc
.856f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8571	85 3f		sta $3f				sta 	zaTemp+1
.8573	c8		iny				iny
.8574	b1 30		lda ($30),y			lda 	(codePtr),y
.8576	c8		iny				iny
.8577	85 3e		sta $3e				sta 	zaTemp
.8579	5a		phy				phy
.857a	a0 02		ldy #$02			ldy 	#2 						; read type byte
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8580	c9 18		cmp #$18			cmp 	#NSTProcedure
.8582	f0 62		beq $85e6			beq 	_DCSyntax
.8584	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8586	29 04		and #$04			and 	#NSBIsArray
.8588	f0 64		beq $85ee			beq 	_DCType
.858a	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.858c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.858e	d0 59		bne $85e9			bne 	_DCRedefine
.8590	7a		ply				ply
.8591	20 f1 85	jsr $85f1			jsr 	_DCGetSize 				; get array size, check it.
.8594	5a		phy				phy
.8595	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8597	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8599	7a		ply				ply 							; is there a second (e.g. ,x)
.859a	b1 30		lda ($30),y			lda 	(codePtr),y
.859c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.859e	d0 0a		bne $85aa			bne 	_DCOneDimension
.85a0	c8		iny				iny 							; skip comma
.85a1	20 f1 85	jsr $85f1			jsr 	_DCGetSize 				; get 2nd array size
.85a4	5a		phy				phy
.85a5	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.85a7	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a9	7a		ply				ply
.85aa					_DCOneDimension:
.85aa	5a		phy				phy 							; save position
.85ab	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.85ad	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85af	aa		tax				tax
.85b0	c8		iny				iny
.85b1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85b3	e8		inx				inx 							; bump them.
.85b4	1a		inc a				inc 	a
.85b5	20 0c a5	jsr $a50c			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.85b8	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.85ba	29 e0		and #$e0			and 	#$E0
.85bc	d0 23		bne $85e1			bne 	_DCSize
.85be	a0 02		ldy #$02			ldy 	#2 						; get base type
.85c0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85c2	20 ff 85	jsr $85ff			jsr 	ScaleByBaseType 		; scale by base type
.85c5	a5 36		lda $36				lda 	zTemp0
.85c7	a6 37		ldx $37				ldx 	zTemp0+1
.85c9	20 da 95	jsr $95da			jsr 	AllocateXABytes 		; allocate memory
.85cc	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.85ce	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85d0	c8		iny				iny
.85d1	8a		txa				txa
.85d2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85d4	7a		ply				ply 							; get position back
.85d5	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 		; check )
.85d8	b1 30		lda ($30),y			lda 	(codePtr),y
.85da	c8		iny				iny 							; consume in case
.85db	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85dd	f0 85		beq $8564			beq 	DimCommand
.85df	88		dey				dey 							; undo consume
.85e0	60		rts				rts
.85e1					_DCSize:
.85e1	a9 16		lda #$16		lda	#22
.85e3	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.85e6					_DCSyntax:
.85e6	4c 70 a6	jmp $a670			jmp 	SyntaxError
.85e9					_DCRedefine:
.85e9	a9 15		lda #$15		lda	#21
.85eb	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.85ee					_DCType:
.85ee	4c 7a a6	jmp $a67a			jmp 	TypeError
.85f1					_DCGetSize:
.85f1	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85f3	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 	; get array dimension
.85f6	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85f8	f0 e7		beq $85e1			beq 	_DCSize
.85fa	c9 fe		cmp #$fe			cmp 	#254
.85fc	f0 e3		beq $85e1			beq 	_DCSize
.85fe	60		rts				rts
.85ff					ScaleByBaseType:
.85ff	29 10		and #$10			and 	#NSBIsString 			; is it string
.8601	d0 19		bne $861c			bne 	_SBBTString
.8603	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8605	48		pha				pha
.8606	a5 36		lda $36				lda 	zTemp0
.8608	48		pha				pha
.8609	06 36		asl $36				asl 	zTemp0 					; x 2
.860b	26 37		rol $37				rol 	zTemp0+1
.860d	06 36		asl $36				asl 	zTemp0 					; x 4
.860f	26 37		rol $37				rol 	zTemp0+1
.8611	68		pla				pla 							; add stacked value = x 5
.8612	65 36		adc $36				adc 	zTemp0
.8614	85 36		sta $36				sta 	zTemp0
.8616	68		pla				pla
.8617	65 37		adc $37				adc 	zTemp0+1
.8619	85 37		sta $37				sta 	zTemp0+1
.861b	60		rts				rts
.861c					_SBBTString:
.861c	06 36		asl $36				asl 	zTemp0
.861e	26 37		rol $37				rol 	zTemp0+1
.8620	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8621					EndCommand:
.8621	4c 6b 84	jmp $846b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8624					ForCommand:
.8624	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8626	20 68 99	jsr $9968			jsr 	StackOpen
.8629	a2 00		ldx #$00			ldx 	#0
.862b	20 2b 94	jsr $942b			jsr 	EvaluateTerm
.862e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8631	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8633	d0 49		bne $867e			bne		_FCError
.8635	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8637	20 9a a0	jsr $a09a			jsr 	CheckNextA
.863a	e8		inx				inx
.863b	20 80 98	jsr $9880			jsr 	EvaluateInteger 			; <from> in +1
.863e	b1 30		lda ($30),y			lda 	(codePtr),y
.8640	c8		iny				iny 								; consume it
.8641	48		pha				pha 								; save on stack for later
.8642	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8644	f0 04		beq $864a			beq 	_FCNoSyntax
.8646	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8648	d0 37		bne $8681			bne 	_FCSyntaxError
.864a					_FCNoSyntax:
.864a	e8		inx				inx
.864b	20 80 98	jsr $9880			jsr 	EvaluateInteger
.864e	20 ac 99	jsr $99ac			jsr 	STKSaveCodePosition 		; save loop back position
.8651	68		pla				pla 								; restore DOWNTO or TO
.8652	5a		phy				phy 								; save Y on the stack
.8653	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8655	f0 02		beq $8659			beq 	_FCNotDownTo
.8657	a9 02		lda #$02			lda 	#2
.8659					_FCNotDownTo:
.8659	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.865a	a0 10		ldy #$10			ldy 	#16
.865c	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.865e	a0 06		ldy #$06			ldy 	#6
.8660	ad 08 06	lda $0608			lda 	NSMantissa0
.8663	91 34		sta ($34),y			sta 	(basicStack),y
.8665	ad 10 06	lda $0610			lda 	NSMantissa1
.8668	c8		iny				iny
.8669	91 34		sta ($34),y			sta 	(basicStack),y
.866b	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.866d	a2 01		ldx #$01			ldx 	#1
.866f	20 84 86	jsr $8684			jsr 	FCIntegerToStack
.8672	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8674	a2 02		ldx #$02			ldx 	#2
.8676	20 84 86	jsr $8684			jsr 	FCIntegerToStack
.8679	20 a4 86	jsr $86a4			jsr 	CopyIndexToReference
.867c	7a		ply				ply 								; restore position
.867d	60		rts				rts
.867e					_FCError:
.867e	4c 7a a6	jmp $a67a			jmp 	TypeError
.8681					_FCSyntaxError:
.8681	4c 70 a6	jmp $a670			jmp 	SyntaxError
.8684					FCIntegerToStack:
.8684	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8687	10 03		bpl $868c			bpl	 	_FCNotNegative
.8689	20 be 98	jsr $98be			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.868c					_FCNotNegative:
.868c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.868f	91 34		sta ($34),y			sta 	(basicStack),y
.8691	c8		iny				iny
.8692	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8695	91 34		sta ($34),y			sta 	(basicStack),y
.8697	c8		iny				iny
.8698	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.869b	91 34		sta ($34),y			sta 	(basicStack),y
.869d	c8		iny				iny
.869e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86a1	91 34		sta ($34),y			sta 	(basicStack),y
.86a3	60		rts				rts
.86a4					CopyIndexToReference:
.86a4	5a		phy				phy
.86a5	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.86a7	38		sec				sec 								; (because we copy from offset 8)
.86a8	b1 34		lda ($34),y			lda 	(basicStack),y
.86aa	e9 08		sbc #$08			sbc 	#8
.86ac	85 36		sta $36				sta 	zTemp0
.86ae	c8		iny				iny
.86af	b1 34		lda ($34),y			lda 	(basicStack),y
.86b1	e9 00		sbc #$00			sbc 	#0
.86b3	85 37		sta $37				sta 	zTemp0+1
.86b5	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.86b7	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.86b9	b1 34		lda ($34),y			lda 	(basicStack),y
.86bb	0a		asl a				asl 	a 							; into carry
.86bc	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.86be	90 14		bcc $86d4			bcc 	_CITRNormal
.86c0	38		sec				sec
.86c1					_CITRNegative:
.86c1	a9 00		lda #$00			lda 	#0
.86c3	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86c5	91 36		sta ($36),y			sta 	(zTemp0),y
.86c7	c8		iny				iny
.86c8	ca		dex				dex
.86c9	d0 f6		bne $86c1			bne 	_CITRNegative
.86cb	88		dey				dey 								; look at MSB of mantissa
.86cc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.86ce	09 80		ora #$80			ora 	#$80
.86d0	91 36		sta ($36),y			sta 	(zTemp0),y
.86d2	7a		ply				ply
.86d3	60		rts				rts
.86d4					_CITRNormal:
.86d4	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86d6	91 36		sta ($36),y			sta 	(zTemp0),y
.86d8	c8		iny				iny
.86d9	ca		dex				dex
.86da	d0 f8		bne $86d4			bne 	_CITRNormal
.86dc	7a		ply				ply 								; and exit.
.86dd	60		rts				rts
.86de					NextCommand:
.86de	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86e0	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86e2	20 94 99	jsr $9994			jsr 	StackCheckFrame
.86e5	5a		phy				phy
.86e6	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86e8	b1 34		lda ($34),y			lda 	(basicStack),y
.86ea	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86ec	30 02		bmi $86f0			bmi 	_NCStepNeg
.86ee	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86f0					_NCStepNeg:
.86f0	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86f2	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86f4	18		clc				clc
.86f5					_NCBump:
.86f5	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86f7	91 34		sta ($34),y			sta 	(basicStack),y
.86f9	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86fb	c8		iny				iny 								; next byte
.86fc	ca		dex				dex 								; do four times
.86fd	d0 f6		bne $86f5			bne 	_NCBump
.86ff	20 a4 86	jsr $86a4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8702	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8704	b1 34		lda ($34),y			lda 	(basicStack),y
.8706	0a		asl a				asl 	a 							; sign bit to carry
.8707	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8709	85 38		sta $38				sta 	zTemp1
.870b	90 02		bcc $870f			bcc 	_NCCompRev 					; use if step is +ve
.870d	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.870f					_NCCompRev:
.870f	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8711	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8713	85 39		sta $39				sta 	zTemp1+1
.8715	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8717	38		sec				sec
.8718					_NCCompare:
.8718	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.871a	b1 34		lda ($34),y			lda 	(basicStack),y
.871c	a4 39		ldy $39				ldy 	zTemp1+1
.871e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8720	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8722	e6 39		inc $39				inc 	zTemp1+1
.8724	ca		dex				dex 								; do it 4 times.
.8725	d0 f1		bne $8718			bne 	_NCCompare
.8727	50 02		bvc $872b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8729	49 80		eor #$80			eor 	#$80
.872b					_NCNoOverflow:
.872b	7a		ply				ply 								; restore Y position
.872c	0a		asl a				asl 	a 							; is bit 7 set.
.872d	90 04		bcc $8733			bcc 	_NCLoopback 				; if no , >= so loop back
.872f	20 86 99	jsr $9986			jsr 	StackClose 					; exit the loop
.8732	60		rts				rts
.8733					_NCLoopBack:
.8733	20 bd 99	jsr $99bd			jsr 	STKLoadCodePosition 		; loop back
.8736	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8737					Command_GOSUB:
.8737	a2 00		ldx #$00			ldx 	#0
.8739	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.873c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.873e	20 68 99	jsr $9968			jsr 	StackOpen 					; create frame
.8741	20 ac 99	jsr $99ac			jsr 	STKSaveCodePosition 		; save current position
.8744	4c 5a 87	jmp $875a			jmp 	GotoStackX
.8747					Command_RETURN:
.8747	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8749	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.874b	20 94 99	jsr $9994			jsr 	StackCheckFrame
.874e	20 bd 99	jsr $99bd			jsr 	STKLoadCodePosition 		; restore code position
.8751	20 86 99	jsr $9986			jsr 	StackClose
.8754	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8755					GotoCommand:
.8755	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8757	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger
.875a					GotoStackX:
.875a	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.875d	48		pha				pha 								; it is slightly inefficient, just in cases.
.875e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8761	fa		plx				plx
.8762	20 ce 9f	jsr $9fce			jsr 	MemorySearch 				; transfer to line number AX.
.8765	90 05		bcc $876c			bcc 	_GotoError 					; not found, off end.
.8767	d0 03		bne $876c			bne 	_GotoError 					; not found exactly
.8769	4c 95 8a	jmp $8a95			jmp 	RunNewLine 					; and go straight to new line code.
.876c					_GotoError:
.876c	a9 0d		lda #$0d		lda	#13
.876e	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8771					IfCommand:
.8771	a2 00		ldx #$00			ldx 	#0 							; If what.
.8773	20 5d 98	jsr $985d			jsr 	EvaluateNumber
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.877a	d0 0a		bne $8786			bne 	_IFStructured
.877c	c8		iny				iny 								; consume THEN
.877d	20 39 99	jsr $9939			jsr 	NSMIsZero 					; is it zero
.8780	f0 01		beq $8783			beq 	_IfFail 					; if fail, go to next line
.8782	60		rts				rts 								; if THEN just continue
.8783					_IfFail:
.8783	4c fa 8a	jmp $8afa			jmp 	EOLCommand
.8786					_IfStructured:
.8786	20 39 99	jsr $9939			jsr 	NSMIsZero 					; is it zero
.8789	d0 07		bne $8792			bne 	_IfExit 					; if not, then continue normally.
.878b	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.878d	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.878f	20 c3 8c	jsr $8cc3			jsr 	ScanForward 				; and run from there/
.8792					_IfExit:
.8792	60		rts				rts
.8793					ElseCode:
.8793	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8795	aa		tax				tax 								; so just go to the structure exit
.8796	20 c3 8c	jsr $8cc3			jsr 	ScanForward
.8799	60		rts				rts
.879a					EndIf:
.879a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.879b					LetCommand:
.879b	a2 00		ldx #$00			ldx 	#0
.879d	b1 30		lda ($30),y			lda 	(codePtr),y
.879f	c9 10		cmp #$10			cmp 	#KWD_AT
.87a1	d0 16		bne $87b9			bne 	_LCStandard
.87a3	c8		iny				iny 								; skip equal
.87a4	20 2b 94	jsr $942b			jsr 	EvaluateTerm 				; get a number
.87a7	20 6f 92	jsr $926f			jsr 	Dereference 				; dereference it
.87aa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check integer
.87ad	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.87af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87b2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.87b4	d0 10		bne $87c6			bne 	_LCMain
.87b6	4c 7a a6	jmp $a67a			jmp 	TypeError 					; was a reference before.
.87b9					_LCStandard:
.87b9	ad 42 91	lda $9142			lda 	PrecedenceLevel+"*"			; precedence > this
.87bc	20 5c 91	jsr $915c			jsr 	EvaluateExpressionAtPrecedence
.87bf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.87c2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.87c4	f0 0e		beq $87d4			beq 	_LetGoProc 					; it's a procedure call.
.87c6					_LCMain:
.87c6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.87c8	20 9a a0	jsr $a09a			jsr 	CheckNextA
.87cb	e8		inx				inx 								; RHS
.87cc	20 54 98	jsr $9854			jsr 	EvaluateValue
.87cf	ca		dex				dex
.87d0	20 d7 87	jsr $87d7			jsr 	AssignVariable
.87d3	60		rts				rts
.87d4					_LetGoProc:
.87d4	4c 70 89	jmp $8970			jmp 	CallProcedure
.87d7					AssignVariable:
.87d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.87da	48		pha				pha 								; save a copy
.87db	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.87de	29 10		and #$10			and 	#NSBIsString
.87e0	d0 0b		bne $87ed			bne 	_ASError
.87e2	68		pla				pla 								; get back
.87e3	29 10		and #$10			and 	#NSBIsString 				; check type
.87e5	d0 03		bne $87ea			bne 	_ASString
.87e7	4c 97 91	jmp $9197			jmp 	AssignNumber
.87ea					_ASString:
.87ea	4c 05 92	jmp $9205			jmp 	AssignString
.87ed					_ASError:
.87ed	4c 7a a6	jmp $a67a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87f0					Command_List:
.87f0	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87f3	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87f6	a9 ff		lda #$ff			lda 	#$FF
.87f8	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87fb	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8800	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8802	f0 1e		beq $8822			beq 	_CLSecond
.8804	20 80 88	jsr $8880			jsr 	CLIsDigit 					; if not digit, list all
.8807	b0 24		bcs $882d			bcs 	_CLStart
.8809	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.880b	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger
.880e	b1 30		lda ($30),y			lda 	(codePtr),y
.8810	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8812	f0 0e		beq $8822			beq 	_CLSecond 					; if so go get it
.8814	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8817	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.881a	ad 14 06	lda $0614			lda 	NSMantissa1+4
.881d	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8820	80 0b		bra $882d			bra 	_CLStart
.8822					_CLSecond:
.8822	c8		iny				iny 								; consume comma
.8823	20 80 88	jsr $8880			jsr 	CLIsDigit 					; digit found
.8826	b0 05		bcs $882d			bcs 	_CLStart 					; if not, continue listing
.8828	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.882a	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger
.882d					_CLStart
.882d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.882f	85 30		sta $30				sta 	codePtr
.8831	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8833	85 31		sta $31				sta 	codePtr+1
.8835					_CLLoop:
.8835	20 24 a9	jsr $a924			jsr 	EXTBreakCheck 				; break check
.8838	f0 30		beq $886a			beq 	_CLExit
.883a	b2 30		lda ($30)			lda 	(codePtr)
.883c	f0 2c		beq $886a			beq 	_CLExit
.883e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8840	20 6d 88	jsr $886d			jsr 	CLCompareLineNo
.8843	90 18		bcc $885d			bcc 	_CLNext
.8845	a2 07		ldx #$07			ldx 	#7
.8847	20 6d 88	jsr $886d			jsr 	CLCompareLineNo
.884a	f0 02		beq $884e			beq 	_CLDoThisOne
.884c	b0 0f		bcs $885d			bcs 	_CLNext
.884e					_CLDoThisOne:
.884e	20 1f 8b	jsr $8b1f			jsr 	ListConvertLine 			; convert line into token Buffer
.8851	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8853	a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8855	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8858	a9 0d		lda #$0d			lda 	#13 						; new line
.885a	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.885d					_CLNext:
.885d	18		clc				clc
.885e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8860	65 30		adc $30				adc 	codePtr
.8862	85 30		sta $30				sta 	codePtr
.8864	90 02		bcc $8868			bcc 	_CREExit
.8866	e6 31		inc $31				inc 	codePtr+1
.8868					_CREExit:
.8868	80 cb		bra $8835			bra 	_CLLoop
.886a					_CLExit:
.886a	4c 6b 84	jmp $846b			jmp 	WarmStart
.886d					CLCompareLineNo:
.886d	38		sec				sec
.886e	a0 01		ldy #$01			ldy 	#1
.8870	b1 30		lda ($30),y			lda 	(codePtr),y
.8872	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8875	85 36		sta $36				sta 	zTemp0
.8877	c8		iny				iny
.8878	b1 30		lda ($30),y			lda 	(codePtr),y
.887a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.887d	05 36		ora $36				ora 	zTemp0
.887f	60		rts				rts
.8880					CLIsDigit:
.8880	b1 30		lda ($30),y			lda 	(codePtr),y
.8882	c9 30		cmp #$30			cmp 	#"0"
.8884	90 03		bcc $8889			bcc	 	_CLIDExitFalse
.8886	c9 3a		cmp #$3a			cmp 	#"9"+1
.8888	60		rts				rts
.8889					_CLIDExitFalse:
.8889	38		sec				sec
.888a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.888b					Command_LOCAL:
.888b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.888d	20 99 88	jsr $8899			jsr 	LocaliseNextTerm 			; convert term to a local.
.8890	b1 30		lda ($30),y			lda 	(codePtr),y
.8892	c8		iny				iny
.8893	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8895	f0 f4		beq $888b			beq 	Command_LOCAL
.8897	88		dey				dey 								; unpick pre-get
.8898	60		rts				rts
.8899					LocaliseNextTerm:
.8899	20 2b 94	jsr $942b			jsr 	EvaluateTerm 				; evaluate the term
.889c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.889f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.88a1	f0 69		beq $890c			beq		_LNTError
.88a3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.88a6	85 36		sta $36				sta 	zTemp0
.88a8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88ab	85 37		sta $37				sta  	zTemp0+1
.88ad	bd 00 06	lda $0600,x			lda 	NSStatus,x
.88b0	29 10		and #$10			and 	#NSBIsString
.88b2	d0 22		bne $88d6			bne 	_LNTPushString
.88b4	5a		phy				phy
.88b5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.88b7					_LNTPushNumLoop:
.88b7	b1 36		lda ($36),y			lda		(zTemp0),y
.88b9	20 46 99	jsr $9946			jsr 	StackPushByte
.88bc	a9 00		lda #$00			lda 	#0
.88be	91 36		sta ($36),y			sta 	(zTemp0),y
.88c0	c8		iny				iny
.88c1	c0 05		cpy #$05			cpy 	#5
.88c3	d0 f2		bne $88b7			bne 	_LNTPushNumLoop
.88c5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.88c7	20 46 99	jsr $9946			jsr 	StackPushByte
.88ca	a5 37		lda $37				lda 	zTemp0+1
.88cc	20 46 99	jsr $9946			jsr 	StackPushByte
.88cf	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.88d1	20 46 99	jsr $9946			jsr 	StackPushByte
.88d4	7a		ply				ply
.88d5	60		rts				rts
.88d6					_LNTPushString:
.88d6	5a		phy				phy
.88d7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.88d9	85 38		sta $38				sta 	zTemp1
.88db	a0 01		ldy #$01			ldy 	#1
.88dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.88df	85 39		sta $39				sta 	zTemp1+1
.88e1	a0 00		ldy #$00			ldy 	#0 							; output string
.88e3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.88e5	f0 0a		beq $88f1			beq 	_LNTStringOut
.88e7					_LNTPushStrLoop:
.88e7	b1 38		lda ($38),y			lda 	(zTemp1),y
.88e9	f0 06		beq $88f1			beq 	_LNTStringOut
.88eb	20 46 99	jsr $9946			jsr 	StackPushByte
.88ee	c8		iny				iny
.88ef	80 f6		bra $88e7			bra 	_LNTPushStrLoop
.88f1					_LNTStringOut:
.88f1	98		tya				tya									; output length
.88f2	20 46 99	jsr $9946			jsr 	StackPushByte
.88f5	a9 00		lda #$00			lda 	#0 							; clear original string.
.88f7	92 38		sta ($38)			sta 	(zTemp1)
.88f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88fc	20 46 99	jsr $9946			jsr 	StackPushByte
.88ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8902	20 46 99	jsr $9946			jsr 	StackPushByte
.8905	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8907	20 46 99	jsr $9946			jsr 	StackPushByte
.890a	7a		ply				ply
.890b	60		rts				rts
.890c					_LNTError:
.890c	4c 70 a6	jmp $a670			jmp 	SyntaxError
.a031					LocalPopValue:
.a031	20 5f 99	jsr $995f			jsr 	StackPopByte
.a034	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a036	d0 17		bne $a04f			bne 	_LPVString
.a038	20 5f 99	jsr $995f			jsr 	StackPopByte 				; address
.a03b	85 37		sta $37				sta 	zTemp0+1
.a03d	20 5f 99	jsr $995f			jsr 	StackPopByte
.a040	85 36		sta $36				sta 	zTemp0
.a042	5a		phy				phy
.a043	a0 04		ldy #$04			ldy 	#4 							; copy back
.a045					_LPVNumberCopy:
.a045	20 5f 99	jsr $995f			jsr 	StackPopByte
.a048	91 36		sta ($36),y			sta 	(zTemp0),y
.a04a	88		dey				dey
.a04b	10 f8		bpl $a045			bpl 	_LPVNumberCopy
.a04d	7a		ply				ply 								; and complete
.a04e	60		rts				rts
.a04f					_LPVString:
.a04f	20 5f 99	jsr $995f			jsr 	StackPopByte 				; address of record => zTemp0
.a052	85 37		sta $37				sta 	zTemp0+1
.a054	20 5f 99	jsr $995f			jsr 	StackPopByte
.a057	85 36		sta $36				sta 	zTemp0
.a059	5a		phy				phy
.a05a	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a05c	85 38		sta $38				sta 	zTemp1
.a05e	a0 01		ldy #$01			ldy 	#1
.a060	b1 36		lda ($36),y			lda 	(zTemp0),y
.a062	85 39		sta $39				sta 	zTemp1+1
.a064	20 5f 99	jsr $995f			jsr 	StackPopByte 				; # to get => y
.a067	a8		tay				tay
.a068	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a06a	f0 0e		beq $a07a			beq 	_LPVStringCopied
.a06c	a9 00		lda #$00			lda 	#0 							; NULL on end
.a06e	91 38		sta ($38),y			sta 	(zTemp1),y
.a070					_LPVStringCopy:
.a070	88		dey				dey
.a071	30 07		bmi $a07a			bmi 	_LPVStringCopied
.a073	20 5f 99	jsr $995f			jsr 	StackPopByte
.a076	91 38		sta ($38),y			sta 	(zTemp1),y
.a078	80 f6		bra $a070			bra 	_LPVStringCopy
.a07a					_LPVStringCopied:
.a07a	fa		plx				plx
.a07b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.890f					NewCommand:
.890f	20 ac 9f	jsr $9fac			jsr 	MemoryNew
.8912	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8915	20 04 85	jsr $8504			jsr 	ClearCommand 				; clear everything.
.8918	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8919					Command_Print:
.8919	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.891a					_CPLoop:
.891a	08		php				php 								; save last action flag
.891b	b1 30		lda ($30),y			lda 	(codePtr),y
.891d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.891f	f0 46		beq $8967			beq 	_CPExit
.8921	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8923	f0 42		beq $8967			beq 	_CPExit
.8925	68		pla				pla 								; throw last action flag
.8926	b1 30		lda ($30),y			lda 	(codePtr),y
.8928	c8		iny				iny
.8929	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.892b	f0 37		beq $8964			beq 	_CPContinueWithSameLine
.892d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.892f	f0 2e		beq $895f			beq 	_CPTab
.8931	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8933	f0 26		beq $895b			beq 	_CPNewLine
.8935	88		dey				dey 								; undo the get.
.8936	a2 00		ldx #$00			ldx 	#0
.8938	20 54 98	jsr $9854			jsr 	EvaluateValue 				; get a value into slot 0
.893b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.893e	29 10		and #$10			and 	#NSBIsString
.8940	f0 0b		beq $894d			beq 	_CPNumber
.8942	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8945	ad 08 06	lda $0608			lda 	NSMantissa0
.8948	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.894b	80 cc		bra $8919			bra 	Command_Print 				; loop round clearing carry so NL if end
.894d					_CPNumber:
.894d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.894f	20 2a 97	jsr $972a			jsr 	ConvertNumberToString 		; convert to string
.8952	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8954	a9 99		lda #$99			lda 	#DecimalBuffer & $FF
.8956	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8959	80 be		bra $8919			bra 	Command_Print 				; loop round clearing carry so NL if end
.895b					_CPNewLine:
.895b	a9 0d		lda #$0d			lda 	#13
.895d	80 02		bra $8961			bra 	_CPPrintChar
.895f					_CPTab:
.895f	a9 09		lda #$09			lda 	#9 							; print TAB
.8961					_CPPrintChar:
.8961	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.8964					_CPContinueWithSameLine:
.8964	38		sec				sec 								; loop round with carry set, which
.8965	80 b3		bra $891a			bra 	_CPLoop 					; will inhibit final CR
.8967					_CPExit:
.8967	28		plp				plp 								; get last action flag
.8968	b0 05		bcs $896f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.896a	a9 0d		lda #$0d			lda 	#13 						; print new line
.896c	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.896f					_CPExit2:
.896f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8970					CallProcedure:
.8970	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8972	b1 30		lda ($30),y			lda 	(codePtr),y
.8974	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8976	f0 0c		beq $8984			beq 	_CPEndParam
.8978					_CPParamLoop:
.8978	20 5a 91	jsr $915a			jsr 	EvaluateExpression 			; get parameter onto stack
.897b	e8		inx				inx 								; bump next stack
.897c	b1 30		lda ($30),y			lda 	(codePtr),y
.897e	c8		iny				iny
.897f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8981	f0 f5		beq $8978			beq 	_CPParamLoop
.8983	88		dey				dey 								; unpick.
.8984					_CPEndParam:
.8984	8e 16 07	stx $0716			stx 	LastParameter 				; save the last parameters index.
.8987	c8		iny				iny									; skip right bracket
.8988	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.898a	20 68 99	jsr $9968			jsr 	StackOpen
.898d	20 ac 99	jsr $99ac			jsr 	STKSaveCodePosition 		; save loop position
.8990	ad 08 06	lda $0608			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8993	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8995	ad 10 06	lda $0610			lda 	NSMantissa1
.8998	85 37		sta $37				sta 	zTemp0+1
.899a	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.899c	b2 36		lda ($36)			lda 	(zTemp0)
.899e	85 30		sta $30				sta 	safePtr
.89a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.89a2	85 31		sta $31				sta 	safePtr+1
.89a4	c8		iny				iny
.89a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.89a7	85 32		sta $32				sta 	safePtr+2
.89a9	c8		iny				iny
.89aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ac	85 33		sta $33				sta 	safePtr+3
.89ae	c8		iny				iny 								; get Y offset -> Y
.89af	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b1	a8		tay				tay
.89b2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.89b4	ec 16 07	cpx $0716			cpx	 	LastParameter 				; check no parameters at the start
.89b7	f0 13		beq $89cc			beq 	_ParamExit 					; if so, exit.
.89b9					_ParamExtract:
.89b9	ca		dex				dex 								; put a local term on the level before
.89ba	20 99 88	jsr $8899			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.89bd	20 d7 87	jsr $87d7			jsr 	AssignVariable 				; assign stacked value to the variable.
.89c0	e8		inx				inx 								; advance to next parameter to do.
.89c1	e8		inx				inx
.89c2	ec 16 07	cpx $0716			cpx 	LastParameter 				; are we done ?
.89c5	f0 05		beq $89cc			beq 	_ParamExit
.89c7	20 92 a0	jsr $a092			jsr 	CheckComma 					; comma seperating parameters
.89ca	80 ed		bra $89b9			bra 	_ParamExtract
.89cc					_ParamExit:
.89cc	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; check )
.89cf	60		rts				rts 								; and continue from here
.a07c					Command_ENDPROC:
.a07c	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a07e	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a080	20 94 99	jsr $9994			jsr 	StackCheckFrame
.a083	20 bd 99	jsr $99bd			jsr 	STKLoadCodePosition 		; restore code position
.a086	20 86 99	jsr $9986			jsr 	StackClose
.a089	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.89d0					Command_Read:
.89d0	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.89d2	20 2b 94	jsr $942b			jsr 	EvaluateTerm
.89d5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89d8	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.89da	f0 4a		beq $8a26			beq 	_CRSyntax 					; check reference (bit 0)
.89dc	20 6f 8a	jsr $8a6f			jsr 	SwapDataCodePtrs 			; swap code and data
.89df	ad 1c 07	lda $071c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.89e2	d0 20		bne $8a04			bne 	_CRContinueData
.89e4					_CRKeepSearching:
.89e4	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.89e6	aa		tax				tax
.89e7	20 c3 8c	jsr $8cc3			jsr 	ScanForward
.89ea	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.89ec	f0 16		beq $8a04			beq 	_CRHaveData 				; found it
.89ee	18		clc				clc
.89ef	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89f1	65 30		adc $30				adc 	codePtr
.89f3	85 30		sta $30				sta 	codePtr
.89f5	90 02		bcc $89f9			bcc 	_CREExit
.89f7	e6 31		inc $31				inc 	codePtr+1
.89f9					_CREExit:
.89f9	a0 03		ldy #$03			ldy 	#3 							; start of line.
.89fb	b2 30		lda ($30)			lda 	(codePtr)
.89fd	d0 e5		bne $89e4			bne 	_CRKeepSearching
.89ff	a9 0b		lda #$0b		lda	#11
.8a01	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8a04					_CRHaveData:
.8a04					_CRContinueData:
.8a04	a2 01		ldx #$01			ldx 	#1
.8a06	20 54 98	jsr $9854			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8a09	ca		dex				dex
.8a0a	20 d7 87	jsr $87d7			jsr		AssignVariable 				; do the assignment
.8a0d	9c 1c 07	stz $071c			stz 	inDataStatement 			; clear in data
.8a10	b1 30		lda ($30),y			lda 	(codePtr),y
.8a12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8a14	d0 04		bne $8a1a			bne 	_CRSwapBack
.8a16	c8		iny				iny 								; consume comma
.8a17	ee 1c 07	inc $071c			inc 	inDataStatement 			; set in data statement currently.
.8a1a					_CRSwapBack:
.8a1a	20 6f 8a	jsr $8a6f			jsr 	SwapDataCodePtrs			; swap them back.
.8a1d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a1f	c8		iny				iny
.8a20	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a22	f0 ac		beq $89d0			beq 	Command_Read 				; if so go round again.
.8a24	88		dey				dey 								; unpick get.
.8a25	60		rts				rts
.8a26					_CRSyntax:
.8a26	4c 70 a6	jmp $a670			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8a29					RemCommand:
.8a29	b1 30		lda ($30),y			lda 	(codePtr),y
.8a2b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8a2d	d0 06		bne $8a35			bne 	_RMExit
.8a2f	c8		iny				iny
.8a30	98		tya				tya
.8a31	38		sec				sec
.8a32	71 30		adc ($30),y			adc 	(codePtr),y
.8a34	a8		tay				tay
.8a35					_RMExit:
.8a35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8a36					Command_REPEAT:
.8a36	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8a38	20 68 99	jsr $9968			jsr 	StackOpen
.8a3b	20 ac 99	jsr $99ac			jsr 	STKSaveCodePosition 		; save loop position
.8a3e	60		rts				rts
.8a3f					Command_UNTIL:
.8a3f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8a41	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8a43	20 94 99	jsr $9994			jsr 	StackCheckFrame
.8a46	a2 00		ldx #$00			ldx 	#0
.8a48	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; work out the number
.8a4b	20 39 99	jsr $9939			jsr 	NSMIsZero 					; check if zero
.8a4e	f0 04		beq $8a54			beq 	_CULoopBack 				; if so keep looping
.8a50	20 86 99	jsr $9986			jsr 	StackClose		 			; return
.8a53	60		rts				rts
.8a54					_CULoopBack:
.8a54	20 bd 99	jsr $99bd			jsr 	STKLoadCodePosition 		; loop back
.8a57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8a58					Command_Restore:
.8a58	20 6f 8a	jsr $8a6f			jsr 	SwapDataCodePtrs 			; swap code and data
.8a5b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a5d	85 30		sta $30				sta 	codePtr
.8a5f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a61	85 31		sta $31				sta 	codePtr+1
.8a63	20 6f 8a	jsr $8a6f			jsr 	SwapDataCodePtrs 			; put them back
.8a66	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8a68	8d 1b 07	sta $071b			sta 	dataPointer+4
.8a6b	9c 1c 07	stz $071c			stz 	inDataStatement 			; not in data statement
.8a6e	60		rts				rts
.8a6f					SwapDataCodePtrs:
.8a6f	da		phx				phx
.8a70	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8a72					_SDCPLoop:
.8a72	b5 30		lda $30,x			lda 	safePtr,x
.8a74	48		pha				pha
.8a75	bd 17 07	lda $0717,x			lda 	dataPointer,x
.8a78	95 30		sta $30,x			sta 	safePtr,x
.8a7a	68		pla				pla
.8a7b	9d 17 07	sta $0717,x			sta 	dataPointer,x
.8a7e	ca		dex				dex
.8a7f	10 f1		bpl $8a72			bpl 	_SDCPLoop
.8a81	ad 1b 07	lda $071b			lda 	dataPointer+4 				; swap Y position over.
.8a84	8c 1b 07	sty $071b			sty 	dataPointer+4
.8a87	a8		tay				tay
.8a88	fa		plx				plx
.8a89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a8a					CommandRUN:
.8a8a	20 04 85	jsr $8504			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a8d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a8f	85 30		sta $30				sta 	codePtr
.8a91	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a93	85 31		sta $31				sta 	codePtr+1
.8a95					RUNNewLine:
.8a95	b2 30		lda ($30)			lda 	(codePtr)
.8a97	f0 5e		beq $8af7			beq 	CRNoProgram         		; no then END.
.8a99	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a9b	9a		txs				txs
.8a9c					RUNCodePointerLine:
.8a9c	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a9e					_CRIncMainLoop:
.8a9e	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8aa1	d0 05		bne $8aa8			bne 	_CRNoBreakCheck
.8aa3	20 24 a9	jsr $a924			jsr 	EXTBreakCheck 				; break check
.8aa6	f0 4a		beq $8af2			beq 	_CRBreak
.8aa8					_CRNoBreakCheck:
.8aa8	c8		iny				iny
.8aa9					_CRMainLoop:
.8aa9	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8aac	b1 30		lda ($30),y			lda 	(codePtr),y
.8aae	10 10		bpl $8ac0			bpl 	_CRNotKeyword
.8ab0	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ab2	b0 04		bcs $8ab8			bcs 	_CRIsKeyword
.8ab4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ab6	b0 34		bcs $8aec			bcs		_CRSyntaxError
.8ab8					_CRIsKeyword:
.8ab8	c8		iny				iny 								; consume command
.8ab9	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8aba	aa		tax				tax 								; put in X for vector jump
.8abb	20 ef 8a	jsr $8aef			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8abe	80 e9		bra $8aa9			bra 	_CRMainLoop 				; and loop round
.8ac0					_CRNotKeyword:
.8ac0	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ac2	f0 da		beq $8a9e			beq 	_CRIncMainLoop
.8ac4	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8ac6	90 05		bcc $8acd			bcc 	_CRNotVariable
.8ac8					_CRGoLet:
.8ac8	20 9b 87	jsr $879b			jsr 	LetCommand
.8acb	80 dc		bra $8aa9			bra 	_CRMainLoop
.8acd					_CRNotVariable:
.8acd	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8acf	f0 f7		beq $8ac8			beq 	_CRGoLet
.8ad1	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8ad3	f0 f3		beq $8ac8			beq 	_CRGoLet
.8ad5	c9 21		cmp #$21			cmp 	#KWD_PLING
.8ad7	f0 ef		beq $8ac8			beq 	_CRGoLet
.8ad9	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8adb	f0 09		beq $8ae6			beq 	_CRGoRem
.8add	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8adf	d0 0b		bne $8aec			bne 	_CRSyntaxError
.8ae1	20 a4 83	jsr $83a4			jsr 	LabelHere
.8ae4	80 c3		bra $8aa9			bra 	_CRMainLoop
.8ae6					_CRGoRem:
.8ae6	c8		iny				iny
.8ae7	20 29 8a	jsr $8a29			jsr 	RemCommand
.8aea	80 bd		bra $8aa9			bra 	_CRMainLoop
.8aec					_CRSyntaxError:
.8aec	4c 70 a6	jmp $a670			jmp 	SyntaxError
.8aef					_CRCallVector0:
.8aef	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x)
.8af2					_CRBreak:
.8af2	a9 01		lda #$01		lda	#1
.8af4	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8af7					CRNoProgram:
.8af7	4c 21 86	jmp $8621			jmp 	EndCommand
.8afa					EOLCommand:
.8afa	18		clc				clc
.8afb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8afd	65 30		adc $30				adc 	codePtr
.8aff	85 30		sta $30				sta 	codePtr
.8b01	90 02		bcc $8b05			bcc 	_CREExit
.8b03	e6 31		inc $31				inc 	codePtr+1
.8b05					_CREExit:
.8b05	80 8e		bra $8a95			bra 	RunNewLine
.8b07					Shift1Command:
.8b07	b1 30		lda ($30),y			lda 	(codePtr),y
.8b09	c8		iny				iny
.8b0a	0a		asl a				asl 	a
.8b0b	aa		tax				tax
.8b0c	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8b0f					Shift2Command:
.8b0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b11	c8		iny				iny
.8b12	0a		asl a				asl 	a
.8b13	aa		tax				tax
.8b14	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8b17					Unused1:
.8b17					Unused2:
.8b17					Unused3:
.8b17					Unused4:
.8b17	4c 70 a6	jmp $a670			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8b1a					StopCommand:
.8b1a	a9 08		lda #$08		lda	#8
.8b1c	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8b1f					ListConvertLine:
.8b1f	9c 1d 07	stz $071d			stz 	tbOffset
.8b22	9c 29 07	stz $0729			stz 	tokenBuffer
.8b25	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8b27	b1 30		lda ($30),y			lda 	(codePtr),y
.8b29	aa		tax				tax
.8b2a	88		dey				dey
.8b2b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b2d	20 e6 a1	jsr $a1e6			jsr 	ConvertInt16
.8b30	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8b32	86 37		stx $37				stx 	zTemp0+1
.8b34	a0 00		ldy #$00			ldy 	#0
.8b36					_LCCopyNumber:
.8b36	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b38	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8b3b	c8		iny				iny
.8b3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b3e	d0 f6		bne $8b36			bne 	_LCCopyNumber
.8b40					_LCPadOut:
.8b40	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8b42	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8b45	ad 1d 07	lda $071d			lda 	tbOffset
.8b48	c9 06		cmp #$06			cmp 	#6
.8b4a	d0 f4		bne $8b40			bne 	_LCPadOut
.8b4c	a0 03		ldy #$03			ldy 	#3 							; start position.
.8b4e					_LCMainLoop:
.8b4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b50	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8b52	f0 17		beq $8b6b			beq 	_LCExit
.8b54	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8b56	90 14		bcc $8b6c			bcc 	_LCDoubles
.8b58	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8b5a	90 20		bcc $8b7c			bcc 	_LCShiftPunc
.8b5c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8b5e	90 2b		bcc $8b8b			bcc 	_LCPunctuation
.8b60	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8b62	90 2d		bcc $8b91			bcc 	_LCIdentifiers
.8b64	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8b66	90 49		bcc $8bb1			bcc 	_LCTokens
.8b68	4c 0c 8c	jmp $8c0c			jmp 	_LCData 					; 254-5 are data objects
.8b6b					_LCExit:
.8b6b	60		rts				rts
.8b6c					_LCDoubles:
.8b6c	48		pha				pha
.8b6d	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8b6e	29 02		and #$02			and 	#2
.8b70	09 3c		ora #$3c			ora 	#60 						; make < >
.8b72	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8b75	68		pla				pla 								; restore, do lower bit
.8b76	29 03		and #$03			and 	#3
.8b78	09 3c		ora #$3c			ora 	#60
.8b7a	80 0f		bra $8b8b			bra		_LCPunctuation 				; print, increment, loop
.8b7c					_LCShiftPunc:
.8b7c	aa		tax				tax 								; save in X
.8b7d	29 07		and #$07			and 	#7 							; lower 3 bits
.8b7f	f0 02		beq $8b83			beq 	_LCNoAdd
.8b81	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b83					_LCNoAdd:
.8b83	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b85	90 02		bcc $8b89			bcc 	_LCNoAdd2
.8b87	09 20		ora #$20			ora 	#32 						; adds $20
.8b89					_LCNoAdd2:
.8b89	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b8b					_LCPunctuation:
.8b8b	c8		iny				iny 								; consume character
.8b8c	20 38 8c	jsr $8c38			jsr 	LCLWrite 					; write it out.
.8b8f	80 bd		bra $8b4e			bra 	_LCMainLoop 				; go round again.
.8b91					_LCIdentifiers:
.8b91	18		clc				clc 								; convert to physical address
.8b92	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b94	85 37		sta $37				sta 	zTemp0+1
.8b96	c8		iny				iny
.8b97	b1 30		lda ($30),y			lda 	(codePtr),y
.8b99	85 36		sta $36				sta 	zTemp0
.8b9b	c8		iny				iny
.8b9c	5a		phy				phy 								; save position
.8b9d	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b9f					_LCOutIdentifier:
.8b9f	c8		iny				iny
.8ba0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ba2	29 7f		and #$7f			and 	#$7F
.8ba4	20 66 8c	jsr $8c66			jsr 	LCLLowerCase
.8ba7	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8baa	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8bac	10 f1		bpl $8b9f			bpl 	_LCOutIdentifier
.8bae	7a		ply				ply 								; restore position
.8baf	80 9d		bra $8b4e			bra 	_LCMainLoop
.8bb1					_LCTokens:
.8bb1	aa		tax				tax 								; token in X
.8bb2	a9 e1		lda #$e1			lda 	#((KeywordSet2) & $FF)
.8bb4	85 36		sta $36				sta 	0+zTemp0
.8bb6	a9 9b		lda #$9b			lda 	#((KeywordSet2) >> 8)
.8bb8	85 37		sta $37				sta 	1+zTemp0
.8bba	e0 82		cpx #$82			cpx 	#$82
.8bbc	f0 16		beq $8bd4			beq 	_LCUseShift
.8bbe	a9 9d		lda #$9d			lda 	#((KeywordSet1) & $FF)
.8bc0	85 36		sta $36				sta 	0+zTemp0
.8bc2	a9 9b		lda #$9b			lda 	#((KeywordSet1) >> 8)
.8bc4	85 37		sta $37				sta 	1+zTemp0
.8bc6	e0 81		cpx #$81			cpx 	#$81
.8bc8	f0 0a		beq $8bd4			beq 	_LCUseShift
.8bca	a9 6b		lda #$6b			lda 	#((KeywordSet0) & $FF)
.8bcc	85 36		sta $36				sta 	0+zTemp0
.8bce	a9 9a		lda #$9a			lda 	#((KeywordSet0) >> 8)
.8bd0	85 37		sta $37				sta 	1+zTemp0
.8bd2	80 01		bra $8bd5			bra 	_LCNoShift
.8bd4					_LCUseShift:
.8bd4	c8		iny				iny
.8bd5					_LCNoShift:
.8bd5	20 47 8c	jsr $8c47			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8bd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bda	aa		tax				tax 								; into X
.8bdb					_LCFindText:
.8bdb	ca		dex				dex
.8bdc	10 0e		bpl $8bec			bpl 	_LCFoundText 				; found text.
.8bde	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8be0	1a		inc a				inc 	a 							; one extra for size
.8be1	38		sec				sec 								; one extra for checksum
.8be2	65 36		adc $36				adc 	zTemp0 						; go to next token
.8be4	85 36		sta $36				sta 	zTemp0
.8be6	90 f3		bcc $8bdb			bcc 	_LCFindText
.8be8	e6 37		inc $37				inc 	zTemp0+1
.8bea	80 ef		bra $8bdb			bra 	_LCFindText
.8bec					_LCFoundText:
.8bec	5a		phy				phy 								; save List position
.8bed	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8bef	aa		tax				tax
.8bf0	a0 02		ldy #$02			ldy 	#2
.8bf2					_LCCopyToken:
.8bf2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf4	20 66 8c	jsr $8c66			jsr 	LCLLowerCase
.8bf7	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8bfa	c8		iny				iny
.8bfb	ca		dex				dex
.8bfc	d0 f4		bne $8bf2			bne 	_LCCopyToken
.8bfe	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8c00	f0 05		beq $8c07			beq 	_LCNoSpace
.8c02	a9 20		lda #$20			lda 	#' '
.8c04	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8c07					_LCNoSpace:
.8c07	7a		ply				ply 								; restore position.
.8c08	c8		iny				iny 								; consume token
.8c09	4c 4e 8b	jmp $8b4e			jmp 	_LCMainLoop 				; and go around again.
.8c0c					_LCData:
.8c0c	48		pha				pha 								; save type $FE/$FF
.8c0d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8c0f	c9 fe		cmp #$fe			cmp 	#$FE
.8c11	f0 02		beq $8c15			beq 	_LCHaveOpener
.8c13	a2 22		ldx #$22			ldx 	#'"'
.8c15					_LCHaveOpener:
.8c15	8a		txa				txa 								; output prefix (# or ")
.8c16	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8c19	c8		iny				iny 								; get count
.8c1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c1c	aa		tax				tax
.8c1d	c8		iny				iny 								; point at first character
.8c1e					_LCOutData:
.8c1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c20	c9 00		cmp #$00			cmp 	#0
.8c22	f0 03		beq $8c27			beq 	_LCNoPrint
.8c24	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8c27					_LCNoPrint:
.8c27	c8		iny				iny
.8c28	ca		dex				dex
.8c29	d0 f3		bne $8c1e			bne 	_LCOutData
.8c2b	68		pla				pla 								; closing " required ?
.8c2c	c9 ff		cmp #$ff			cmp 	#$FF
.8c2e	d0 05		bne $8c35			bne 	_LCNoQuote
.8c30	a9 22		lda #$22			lda 	#'"'
.8c32	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8c35					_LCNoQuote:
.8c35	4c 4e 8b	jmp $8b4e			jmp 	_LCMainLoop
.8c38					LCLWrite:
.8c38	da		phx				phx
.8c39	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c3c	9d 29 07	sta $0729,x			sta 	tokenBuffer,x
.8c3f	9e 2a 07	stz $072a,x			stz 	tokenBuffer+1,x
.8c42	ee 1d 07	inc $071d			inc 	tbOffset
.8c45	fa		plx				plx
.8c46	60		rts				rts
.8c47					LCCheckSpaceRequired:
.8c47	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c4a	bd 28 07	lda $0728,x			lda 	tokenBuffer-1,x 			; previous character
.8c4d	20 66 8c	jsr $8c66			jsr 	LCLLowerCase 				; saves a little effort
.8c50	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8c52	90 11		bcc $8c65			bcc 	_LCCSRExit
.8c54	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c56	90 08		bcc $8c60			bcc 	_LCCSRSpace
.8c58	c9 61		cmp #$61			cmp 	#"a"
.8c5a	90 09		bcc $8c65			bcc 	_LCCSRExit
.8c5c	c9 7b		cmp #$7b			cmp 	#"z"+1
.8c5e	b0 05		bcs $8c65			bcs 	_LCCSRExit
.8c60					_LCCSRSpace:
.8c60	a9 20		lda #$20			lda 	#' '
.8c62	20 38 8c	jsr $8c38			jsr 	LCLWrite
.8c65					_LCCSRExit:
.8c65	60		rts				rts
.8c66					LCLLowerCase:
.8c66	c9 41		cmp #$41			cmp 	#"A"
.8c68	90 06		bcc $8c70			bcc 	_LCLLCOut
.8c6a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8c6c	b0 02		bcs $8c70			bcs 	_LCLLCOut
.8c6e	69 20		adc #$20			adc 	#$20
.8c70					_LCLLCOut:
.8c70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c71					ProcedureScan:
.8c71	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c73	85 30		sta $30				sta 	codePtr
.8c75	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c77	85 31		sta $31				sta 	codePtr+1
.8c79					_PSLoop:
.8c79	b2 30		lda ($30)			lda 	(codePtr)
.8c7b	f0 42		beq $8cbf			beq 	_PSExit
.8c7d	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c81	c9 99		cmp #$99			cmp 	#KWD_PROC
.8c83	d0 2d		bne $8cb2			bne 	_PSNext
.8c85	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c86	b1 30		lda ($30),y			lda 	(codePtr),y
.8c88	29 c0		and #$c0			and 	#$C0
.8c8a	c9 40		cmp #$40			cmp 	#$40
.8c8c	d0 32		bne $8cc0			bne 	_PSSyntax
.8c8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c90	18		clc				clc
.8c91	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c93	85 37		sta $37				sta 	zTemp0+1
.8c95	c8		iny				iny 								; LSB
.8c96	b1 30		lda ($30),y			lda 	(codePtr),y
.8c98	85 36		sta $36				sta 	zTemp0
.8c9a	c8		iny				iny 								; character after variable call.
.8c9b	98		tya				tya 								; save Y offset at +7
.8c9c	a0 07		ldy #$07			ldy 	#7
.8c9e	91 36		sta ($36),y			sta 	(zTemp0),y
.8ca0	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8ca2	a0 02		ldy #$02			ldy 	#2
.8ca4	91 36		sta ($36),y			sta 	(zTemp0),y
.8ca6	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8ca8					_PSCopy:
.8ca8	b5 30		lda $30,x			lda 	safePtr,x
.8caa	c8		iny				iny
.8cab	91 36		sta ($36),y			sta 	(zTemp0),y
.8cad	e8		inx				inx
.8cae	e0 04		cpx #$04			cpx 	#4
.8cb0	d0 f6		bne $8ca8			bne 	_PSCopy
.8cb2					_PSNext:
.8cb2	18		clc				clc
.8cb3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cb5	65 30		adc $30				adc 	codePtr
.8cb7	85 30		sta $30				sta 	codePtr
.8cb9	90 02		bcc $8cbd			bcc 	_CREExit
.8cbb	e6 31		inc $31				inc 	codePtr+1
.8cbd					_CREExit:
.8cbd	80 ba		bra $8c79			bra 	_PSLoop
.8cbf					_PSExit:
.8cbf	60		rts				rts
.8cc0					_PSSyntax:
.8cc0	4c 70 a6	jmp $a670			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8cc3					ScanForward:
.8cc3	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8cc5	86 37		stx $37				stx 	zTemp0+1
.8cc7	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8cc9					_ScanLoop:
.8cc9	b1 30		lda ($30),y			lda 	(codePtr),y
.8ccb	c8		iny				iny
.8ccc	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8cce	d0 0e		bne $8cde			bne 	_ScanGoNext
.8cd0	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8cd2	f0 04		beq $8cd8			beq 	_ScanMatch
.8cd4	c5 37		cmp $37				cmp 	zTemp0+1
.8cd6	d0 06		bne $8cde			bne 	_ScanGoNext
.8cd8					_ScanMatch:
.8cd8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8cda	d0 01		bne $8cdd			bne 	_ScanNotEndEOL
.8cdc	88		dey				dey
.8cdd					_ScanNotEndEOL:
.8cdd	60		rts				rts
.8cde					_ScanGoNext:
.8cde	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8ce0	90 e7		bcc $8cc9			bcc 	_ScanLoop
.8ce2	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ce4	90 18		bcc $8cfe			bcc 	_ScanSkipOne
.8ce6	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ce8	b0 2f		bcs $8d19			bcs 	_ScanSkipData
.8cea	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cec	90 db		bcc $8cc9			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8cee	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8cf0	b0 d7		bcs $8cc9			bcs 	_ScanLoop
.8cf2	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cf4	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cf6	b0 d1		bcs $8cc9			bcs 	_ScanLoop
.8cf8	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cfa	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cfc	80 cb		bra $8cc9			bra 	_ScanLoop
.8cfe					_ScanSkipOne:
.8cfe	c8		iny				iny 								; consume the extra one.
.8cff	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8d01	d0 c6		bne $8cc9			bne 	_ScanLoop
.8d03	18		clc				clc
.8d04	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d06	65 30		adc $30				adc 	codePtr
.8d08	85 30		sta $30				sta 	codePtr
.8d0a	90 02		bcc $8d0e			bcc 	_CREExit
.8d0c	e6 31		inc $31				inc 	codePtr+1
.8d0e					_CREExit:
.8d0e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8d10	b2 30		lda ($30)			lda 	(codePtr)
.8d12	d0 b5		bne $8cc9			bne 	_ScanLoop 					; if not zero, more to scan
.8d14	a9 13		lda #$13		lda	#19
.8d16	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8d19					_ScanSkipData:
.8d19	88		dey				dey 								; point at data token
.8d1a	c8		iny				iny
.8d1b	98		tya				tya
.8d1c	38		sec				sec
.8d1d	71 30		adc ($30),y			adc 	(codePtr),y
.8d1f	a8		tay				tay
.8d20	80 a7		bra $8cc9			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d22					Command_WHILE:
.8d22	5a		phy				phy 								; save position of the test
.8d23	a2 00		ldx #$00			ldx 	#0
.8d25	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; work out the number
.8d28	20 39 99	jsr $9939			jsr 	NSMIsZero 					; check if zero
.8d2b	f0 0e		beq $8d3b			beq 	_WHExitLoop 				; if so exit the loop
.8d2d	98		tya				tya 								; position *after* test.
.8d2e	7a		ply				ply 								; restore position before test, at WHILE
.8d2f	88		dey				dey
.8d30	48		pha				pha 								; push after test on the stack
.8d31	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d33	20 68 99	jsr $9968			jsr 	StackOpen
.8d36	20 ac 99	jsr $99ac			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d39	7a		ply				ply 								; restore the position *after* the test
.8d3a	60		rts				rts
.8d3b					_WHExitLoop:
.8d3b	68		pla				pla 								; throw post loop position
.8d3c	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8d3e	aa		tax				tax
.8d3f	20 c3 8c	jsr $8cc3			jsr 	ScanForward
.8d42	60		rts				rts
.8d43					Command_WEND:
.8d43	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d45	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d47	20 94 99	jsr $9994			jsr 	StackCheckFrame
.8d4a	20 bd 99	jsr $99bd			jsr 	STKLoadCodePosition 		; loop back
.8d4d	20 86 99	jsr $9986			jsr 	StackClose		 			; erase the frame
.8d50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a08a					CheckRightBracket:
.a08a	b1 30		lda ($30),y			lda 	(codePtr),y
.a08c	c8		iny				iny
.a08d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a08f	d0 0f		bne $a0a0			bne 	CNAFail
.a091	60		rts				rts
.a092					CheckComma:
.a092	b1 30		lda ($30),y			lda 	(codePtr),y
.a094	c8		iny				iny
.a095	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a097	d0 07		bne $a0a0			bne 	CNAFail
.a099	60		rts				rts
.a09a					CheckNextA:
.a09a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a09c	d0 02		bne $a0a0			bne 	CNAFail
.a09e	c8		iny				iny 								; skip character
.a09f	60		rts				rts 								; and exit
.a0a0					CNAFail:
.a0a0	4c 70 a6	jmp $a670			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d51					ErrorHandler:
.8d51	a8		tay				tay 								; find the error text
.8d52	f0 49		beq $8d9d			beq 	_EHEnd
.8d54	a2 00		ldx #$00			ldx 	#0
.8d56	a9 89		lda #$89			lda 	#((ErrorText) & $FF)
.8d58	85 36		sta $36				sta 	0+zTemp0
.8d5a	a9 a6		lda #$a6			lda 	#((ErrorText) >> 8)
.8d5c	85 37		sta $37				sta 	1+zTemp0
.8d5e					_EHFind:
.8d5e	88		dey				dey 								; found the error text ?
.8d5f	f0 0e		beq $8d6f			beq 	_EHFound
.8d61					_EHFindZero:
.8d61	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d63	e6 36		inc $36				inc 	zTemp0
.8d65	d0 02		bne $8d69			bne 	_EHFNoCarry
.8d67	e6 37		inc $37				inc 	zTemp0+1
.8d69					_EHFNoCarry:
.8d69	c9 00		cmp #$00			cmp 	#0
.8d6b	d0 f4		bne $8d61			bne 	_EHFindZero
.8d6d	80 ef		bra $8d5e			bra 	_EHFind
.8d6f					_EHFound:
.8d6f	a5 36		lda $36				lda 	zTemp0 						; print message
.8d71	a6 37		ldx $37				ldx 	zTemp0+1
.8d73	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d76	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d78	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7a	d0 05		bne $8d81			bne 	_EHAtMsg
.8d7c	c8		iny				iny
.8d7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7f	f0 17		beq $8d98			beq 	_EHCREnd
.8d81					_EHAtMsg:
.8d81	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d83	a9 a0		lda #$a0			lda 	#_AtMsg & $FF
.8d85	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d88	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8c	48		pha				pha
.8d8d	c8		iny				iny
.8d8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d90	aa		tax				tax
.8d91	68		pla				pla
.8d92	20 e6 a1	jsr $a1e6			jsr 	ConvertInt16 				; convert XA to string
.8d95	20 aa 8d	jsr $8daa			jsr 	PrintStringXA 				; and print it.
.8d98					_EHCREnd:
.8d98	a9 0d		lda #$0d			lda 	#13 						; new line
.8d9a	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.8d9d					_EHEnd:
.8d9d	4c 6b 84	jmp $846b			jmp 	WarmStart
>8da0	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8da8	20 00
.8daa					PrintStringXA:
.8daa	5a		phy				phy
.8dab	86 37		stx $37				stx 	zTemp0+1
.8dad	85 36		sta $36				sta 	zTemp0
.8daf	a0 00		ldy #$00			ldy 	#0
.8db1					_PSXALoop:
.8db1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db3	f0 06		beq $8dbb			beq 	_PSXAExit
.8db5	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.8db8	c8		iny				iny
.8db9	80 f6		bra $8db1			bra 	_PSXALoop
.8dbb					_PSXAExit:
.8dbb	7a		ply				ply
.8dbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dbd					UnaryTrue:
.8dbd	fa		plx				plx
.8dbe					ReturnTrue:
.8dbe	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc0	20 0b 99	jsr $990b			jsr 	NSMSetByte
.8dc3	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dc5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dc8	60		rts				rts
.8dc9					UnaryFalse:
.8dc9	fa		plx				plx
.8dca					ReturnFalse:
.8dca	4c 09 99	jmp $9909			jmp 	NSMSetZero 					; set it all to zero
.8dcd					BinaryCompareEqual:
.8dcd	fa		plx				plx
.8dce	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8dd1	c9 00		cmp #$00			cmp 	#0
.8dd3	f0 e9		beq $8dbe			beq 	ReturnTrue
.8dd5	80 f3		bra $8dca			bra 	ReturnFalse
.8dd7					BinaryCompareLess:
.8dd7	fa		plx				plx
.8dd8	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8ddb	c9 ff		cmp #$ff			cmp 	#$FF
.8ddd	f0 df		beq $8dbe			beq 	ReturnTrue
.8ddf	80 e9		bra $8dca			bra 	ReturnFalse
.8de1					BinaryCompareGreater:
.8de1	fa		plx				plx
.8de2	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8de5	c9 01		cmp #$01			cmp 	#1
.8de7	f0 d5		beq $8dbe			beq 	ReturnTrue
.8de9	80 df		bra $8dca			bra 	ReturnFalse
.8deb					BinaryCompareNotEqual:
.8deb	fa		plx				plx
.8dec	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8def	c9 00		cmp #$00			cmp 	#0
.8df1	d0 cb		bne $8dbe			bne 	ReturnTrue
.8df3	80 d5		bra $8dca			bra 	ReturnFalse
.8df5					BinaryCompareLessEqual:
.8df5	fa		plx				plx
.8df6	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8df9	c9 01		cmp #$01			cmp 	#1
.8dfb	d0 c1		bne $8dbe			bne 	ReturnTrue
.8dfd	80 cb		bra $8dca			bra 	ReturnFalse
.8dff					BinaryCompareGreaterEqual:
.8dff	fa		plx				plx
.8e00	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8e03	c9 ff		cmp #$ff			cmp 	#$FF
.8e05	d0 b7		bne $8dbe			bne 	ReturnTrue
.8e07	80 c1		bra $8dca			bra 	ReturnFalse
.8e09					CompareBaseCode:
.8e09	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; make both values if references.
.8e0c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8e0f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e12	29 10		and #$10			and 	#NSTString
.8e14	d0 40		bne $8e56			bne 	_CBCString
.8e16	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8e19	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e1c	d0 3b		bne $8e59			bne 	_CBCFloat
.8e1e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e21	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e24	29 08		and #$08			and 	#NSTFloat
.8e26	d0 31		bne $8e59			bne 	_CBCFloat
.8e28	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2b	e8		inx				inx
.8e2c	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2f	ca		dex				dex
.8e30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8e33	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e36	10 0b		bpl $8e43			bpl 	_CDCSameSign
.8e38	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8e3b	30 16		bmi $8e53			bmi 	_CBCLess 					; return $FF
.8e3d					_CBCGreater:
.8e3d	a9 01		lda #$01			lda 	#1
.8e3f	60		rts				rts
.8e40					_CBCEqual:
.8e40	a9 00		lda #$00			lda 	#0
.8e42	60		rts				rts
.8e43					_CDCSameSign:
.8e43	20 6c 8f	jsr $8f6c			jsr 	SubTopTwoStack 				; unsigned subtract
.8e46	20 39 99	jsr $9939			jsr 	NSMIsZero 					; or the mantissa together
.8e49	f0 f5		beq $8e40			beq 	_CBCEqual 					; -0 == 0
.8e4b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e4e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e51	10 ea		bpl $8e3d			bpl 	_CBCGreater
.8e53					_CBCLess:
.8e53	a9 ff		lda #$ff			lda 	#$FF
.8e55	60		rts				rts
.8e56					_CBCString:
.8e56	4c c2 8e	jmp $8ec2			jmp 	CompareStrings
.8e59					_CBCFloat:
.8e59	4c e2 a2	jmp $a2e2			jmp 	CompareFloat
.8e5c					CompareFixMinusZero:
.8e5c	20 39 99	jsr $9939			jsr 	NSMIsZero
.8e5f	d0 03		bne $8e64			bne 	_CFXMZNotZero
.8e61	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e64					_CFXMZNotZero:
.8e64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e65					StringConcat:
.8e65	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8e68	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e6b	29 18		and #$18			and 	#NSBTypeMask
.8e6d	c9 10		cmp #$10			cmp 	#NSTString
.8e6f	d0 4e		bne $8ebf			bne		_SCType
.8e71	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e73	e8		inx				inx
.8e74	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for second
.8e77	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for second
.8e7a	ca		dex				dex
.8e7b	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for first
.8e7e	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for first
.8e81	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e83	20 96 a8	jsr $a896			jsr 	StringTempAllocate
.8e86	20 b0 8e	jsr $8eb0			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e89	e8		inx				inx
.8e8a	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; copy second out
.8e8d	20 b0 8e	jsr $8eb0			jsr 	_SCCopy
.8e90	ca		dex				dex
.8e91	60		rts				rts
.8e92					_SCSetupZ0:
.8e92	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e95	85 36		sta $36				sta 	zTemp0
.8e97	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e9a	85 37		sta $37				sta 	zTemp0+1
.8e9c	60		rts				rts
.8e9d					_SCLengthZ0:
.8e9d	5a		phy				phy
.8e9e	a0 00		ldy #$00			ldy 	#0
.8ea0					_SCLenLoop:
.8ea0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea2	f0 0a		beq $8eae			beq 	_SCLExit
.8ea4	c8		iny				iny
.8ea5	e6 38		inc $38				inc 	zTemp1
.8ea7	10 f7		bpl $8ea0			bpl		_SCLenLoop
.8ea9	a9 09		lda #$09		lda	#9
.8eab	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8eae					_SCLExit:
.8eae	7a		ply				ply
.8eaf	60		rts				rts
.8eb0					_SCCopy:
.8eb0	5a		phy				phy
.8eb1	a0 00		ldy #$00			ldy 	#0
.8eb3					_SCCopyLoop:
.8eb3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eb5	f0 06		beq $8ebd			beq 	_SCCExit
.8eb7	20 d4 a8	jsr $a8d4			jsr 	StringTempWrite
.8eba	c8		iny				iny
.8ebb	80 f6		bra $8eb3			bra 	_SCCopyLoop
.8ebd					_SCCExit:
.8ebd	7a		ply				ply
.8ebe	60		rts				rts
.8ebf					_SCType:
.8ebf	4c 7a a6	jmp $a67a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a0a3					IntegerDivide:
.a0a3	fa		plx				plx
.a0a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a0a7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0aa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a0ab	0a		asl a				asl 	a
.a0ac	10 05		bpl $a0b3			bpl 	_NotRef
.a0ae	48		pha				pha
.a0af	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0b2	68		pla				pla
.a0b3					_NotRef:
.a0b3	0a		asl a				asl 	a
.a0b4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a0b6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a0b9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a0bc	f0 03		beq $a0c1			beq 	_IntegerCode 				; if clear, then we have two integers
.a0be	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.a0c1					_IntegerCode:
.a0c1	20 e3 a0	jsr $a0e3			jsr 	CheckDivideZero 			; do div zero check
.a0c4	20 1b a1	jsr $a11b			jsr 	Int32Divide 				; do the division
.a0c7	20 d8 a1	jsr $a1d8			jsr 	CalculateSign 				; calculate result sign
.a0ca					NSMCopyPlusTwoToZero:
.a0ca	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a0cd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a0d0	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.a0d3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0d6	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.a0d9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0dc	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.a0df	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0e2	60		rts				rts
.a0e3					CheckDivideZero:
.a0e3	e8		inx				inx
.a0e4	20 39 99	jsr $9939			jsr 	NSMIsZero
.a0e7	f0 02		beq $a0eb			beq 	_CDVError
.a0e9	ca		dex				dex
.a0ea	60		rts				rts
.a0eb					_CDVError:
.a0eb	a9 03		lda #$03		lda	#3
.a0ed	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a0f0					IntegerModulus:
.a0f0	fa		plx				plx
.a0f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a0f4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0f7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a0f8	0a		asl a				asl 	a
.a0f9	10 05		bpl $a100			bpl 	_NotRef
.a0fb	48		pha				pha
.a0fc	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0ff	68		pla				pla
.a100					_NotRef:
.a100	0a		asl a				asl 	a
.a101	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a103	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a106	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a109	f0 03		beq $a10e			beq 	_IntegerCode 				; if clear, then we have two integers
.a10b	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.a10e					_IntegerCode:
.a10e					IntegerModulusNoCheck:
.a10e	20 e3 a0	jsr $a0e3			jsr 	CheckDivideZero 			; do div zero check
.a111	20 1b a1	jsr $a11b			jsr 	Int32Divide 				; do the division
.a114	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a117	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a11a	60		rts				rts
.a11b					Int32Divide:
.a11b	48		pha				pha 								; save AXY
.a11c	5a		phy				phy
.a11d	20 e0 98	jsr $98e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a120	20 05 99	jsr $9905			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a123	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a125					_I32DivideLoop:
.a125	e8		inx				inx
.a126	e8		inx				inx
.a127	20 1e 99	jsr $991e			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a12a	ca		dex				dex
.a12b	ca		dex				dex
.a12c	20 1f 99	jsr $991f			jsr 	NSMRotateLeft
.a12f	20 5b a1	jsr $a15b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a132	90 03		bcc $a137			bcc 	_I32DivideNoCarryIn
.a134	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a137					_I32DivideNoCarryIn:
.a137	88		dey				dey 								; loop round till division completed.
.a138	d0 eb		bne $a125			bne 	_I32DivideLoop
.a13a	7a		ply				ply 								; restore AXY and exit
.a13b	68		pla				pla
.a13c	60		rts				rts
.a13d					Int32ShiftDivide:
.a13d	48		pha				pha 								; save AY
.a13e	5a		phy				phy
.a13f	e8		inx				inx 								; clear S[X+2]
.a140	e8		inx				inx
.a141	20 09 99	jsr $9909			jsr 	NSMSetZero
.a144	ca		dex				dex
.a145	ca		dex				dex
.a146	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a148					_I32SDLoop:
.a148	20 5b a1	jsr $a15b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a14b	e8		inx				inx
.a14c	e8		inx				inx
.a14d	20 1f 99	jsr $991f			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a150	ca		dex				dex
.a151	ca		dex				dex
.a152	20 1f 99	jsr $991f			jsr 	NSMRotateLeft
.a155	88		dey				dey 	 							; do 31 times
.a156	d0 f0		bne $a148			bne 	_I32SDLoop
.a158	7a		ply				ply 								; restore AY and exit
.a159	68		pla				pla
.a15a	60		rts				rts
.a15b					DivideCheckSubtract:
.a15b	20 6c 8f	jsr $8f6c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a15e	b0 04		bcs $a164			bcs 	_DCSExit 					; if carry set, then could do, exit
.a160	20 46 8f	jsr $8f46			jsr 	AddTopTwoStack 				; add it back in
.a163	18		clc				clc 								; and return False
.a164					_DCSExit:
.a164	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a165					MulInteger:
.a165	fa		plx				plx
.a166	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a169	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a16c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a16d	0a		asl a				asl 	a
.a16e	10 05		bpl $a175			bpl 	_NotRef
.a170	48		pha				pha
.a171	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a174	68		pla				pla
.a175					_NotRef:
.a175	0a		asl a				asl 	a 							; put MSB of type into A:7
.a176	30 0b		bmi $a183			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a178	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a17b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a17e	f0 06		beq $a186			beq 	_IntegerCode 				; if clear, then we have two integers
.a180	4c b9 a3	jmp $a3b9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a183					_StringData:
.a183	4c 84 a6	jmp $a684			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a186					_IntegerCode:
.a186	20 93 a1	jsr $a193			jsr 	MultiplyShort
.a189	c9 00		cmp #$00			cmp 	#0
.a18b	f0 05		beq $a192			beq 	_MIExit
.a18d	a9 04		lda #$04		lda	#4
.a18f	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a192					_MIExit:
.a192	60		rts				rts
.a193					MultiplyShort:
.a193	5a		phy				phy 								; save Y
.a194	20 e0 98	jsr $98e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a197	20 05 99	jsr $9905			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a19a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a19c					_I32MLoop:
.a19c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a19f	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a1a2	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a1a5	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a1a8	f0 28		beq $a1d2			beq 	_I32MExit 					; exit if zero
.a1aa	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a1ad	29 01		and #$01			and 	#1
.a1af	f0 0e		beq $a1bf			beq 	_I32MNoAdd
.a1b1	20 46 8f	jsr $8f46			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a1b4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a1b7	10 06		bpl $a1bf			bpl 	_I32MNoAdd
.a1b9					_I32ShiftRight:
.a1b9	20 2c 99	jsr $992c			jsr 	NSMShiftRight 				; shift S[X] right
.a1bc	c8		iny				iny 								; increment shift count
.a1bd	80 0a		bra $a1c9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a1bf					_I32MNoAdd:
.a1bf	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a1c2	70 f5		bvs $a1b9			bvs 	_I32ShiftRight 				; instead.
.a1c4	e8		inx				inx
.a1c5	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a1c8	ca		dex				dex
.a1c9					_I32MShiftUpper:
.a1c9	e8		inx				inx 								; shift S[X+2] right
.a1ca	e8		inx				inx
.a1cb	20 2c 99	jsr $992c			jsr 	NSMShiftRight
.a1ce	ca		dex				dex
.a1cf	ca		dex				dex
.a1d0	80 ca		bra $a19c			bra 	_I32MLoop 					; try again.
.a1d2					_I32MExit:
.a1d2	20 d8 a1	jsr $a1d8			jsr 	CalculateSign
.a1d5	98		tya				tya 								; shift in A
.a1d6	7a		ply				ply 								; restore Y and exit
.a1d7	60		rts				rts
.a1d8					CalculateSign:
.a1d8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a1db	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a1de	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a1e1	0a		asl a				asl 	a 							; shift bit 7 into carry
.a1e2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a1e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8ec2					CompareStrings:
.8ec2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8ec5	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8ec8	29 10		and #$10			and 	#NSBIsString
.8eca	f0 2c		beq $8ef8			beq 	_CSTypeError
.8ecc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ecf	85 36		sta $36				sta 	zTemp0
.8ed1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ed4	85 37		sta $37				sta 	zTemp0+1
.8ed6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8ed9	85 38		sta $38				sta 	zTemp1
.8edb	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ede	85 39		sta $39				sta 	zTemp1+1
.8ee0	5a		phy				phy 								; save Y so we can access strings
.8ee1	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8ee3					_CSLoop:
.8ee3	c8		iny				iny
.8ee4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8ee6	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8ee8	d0 06		bne $8ef0			bne 	_CSDifferent
.8eea	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8eec	d0 f5		bne $8ee3			bne 	_CSLoop 					; still comparing
.8eee					_CSExit:
.8eee	7a		ply				ply 								; reached end, return zero in A from EOS
.8eef	60		rts				rts
.8ef0					_CSDifferent:
.8ef0	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8ef2	90 fa		bcc $8eee			bcc		_CSExit
.8ef4	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8ef6	80 f6		bra $8eee			bra 	_CSExit
.8ef8					_CSTypeError:
.8ef8	4c 7a a6	jmp $a67a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8efb					ShiftLeft:
.8efb	38		sec				sec
.8efc	80 01		bra $8eff			bra 	ShiftMain
.8efe					ShiftRight:
.8efe	18		clc				clc
.8eff					ShiftMain:
.8eff	fa		plx				plx 								; restore X
.8f00	08		php				php 								; save direction
.8f01	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f04	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f07	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f08	0a		asl a				asl 	a
.8f09	10 05		bpl $8f10			bpl 	_NotRef
.8f0b	48		pha				pha
.8f0c	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f0f	68		pla				pla
.8f10					_NotRef:
.8f10	0a		asl a				asl 	a
.8f11	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f13	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f16	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f19	f0 03		beq $8f1e			beq 	_IntegerCode 				; if clear, then we have two integers
.8f1b	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.8f1e					_IntegerCode:
.8f1e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8f21	29 e0		and #$e0			and 	#$E0
.8f23	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8f26	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8f29	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8f2c	d0 13		bne $8f41			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8f2e					_SMLoop:
.8f2e	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8f31	30 11		bmi $8f44			bmi 	_SMExit 					; exit if done.
.8f33	28		plp				plp 								; restore direcition setting
.8f34	08		php				php
.8f35	90 05		bcc $8f3c			bcc 	_SMRight
.8f37	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; shift left if CS
.8f3a	80 f2		bra $8f2e			bra 	_SMLoop
.8f3c					_SMRight:
.8f3c	20 2c 99	jsr $992c			jsr 	NSMShiftRight 				; shift right if CC
.8f3f	80 ed		bra $8f2e			bra 	_SMLoop
.8f41					_SMExit0:
.8f41	20 09 99	jsr $9909			jsr 	NSMSetZero 					; return zero.
.8f44					_SMExit:
.8f44	28		plp				plp 								; throw direction
.8f45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8f46					AddTopTwoStack:
.8f46	18		clc				clc
.8f47	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f4a	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8f4d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f50	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f53	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8f56	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f59	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f5c	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8f5f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f62	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f65	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8f68	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f6b	60		rts				rts
.8f6c					SubTopTwoStack:
.8f6c	38		sec				sec
.8f6d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f70	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8f73	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f76	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f79	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8f7c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f7f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f82	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f85	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f88	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f8b	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f8e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f91	60		rts				rts
.8f92					AddInteger:
.8f92	fa		plx				plx
.8f93	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f96	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f99	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f9a	0a		asl a				asl 	a
.8f9b	10 05		bpl $8fa2			bpl 	_NotRef
.8f9d	48		pha				pha
.8f9e	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fa1	68		pla				pla
.8fa2					_NotRef:
.8fa2	0a		asl a				asl 	a 							; put MSB of type into A:7
.8fa3	30 0b		bmi $8fb0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8fa5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fa8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fab	f0 06		beq $8fb3			beq 	_IntegerCode 				; if clear, then we have two integers
.8fad	4c 41 a2	jmp $a241			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8fb0					_StringData:
.8fb0	4c 65 8e	jmp $8e65			jmp 	StringConcat							; at least one string - don't know both are strings.
.8fb3					_IntegerCode:
.8fb3					AddCode:
.8fb3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8fb6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8fb9	10 8b		bpl $8f46			bpl 	AddTopTwoStack
.8fbb	20 6c 8f	jsr $8f6c			jsr 	SubTopTwoStack 				; do a physical subtraction
.8fbe	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8fc1	10 09		bpl $8fcc			bpl 	_AddExit
.8fc3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8fc6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fc9	20 be 98	jsr $98be			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8fcc					_AddExit:
.8fcc	60		rts				rts
.8fcd					SubInteger:
.8fcd	fa		plx				plx
.8fce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fd1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fd4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fd5	0a		asl a				asl 	a
.8fd6	10 05		bpl $8fdd			bpl 	_NotRef
.8fd8	48		pha				pha
.8fd9	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fdc	68		pla				pla
.8fdd					_NotRef:
.8fdd	0a		asl a				asl 	a 							; put MSB of type into A:7
.8fde	30 0b		bmi $8feb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8fe0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fe3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fe6	f0 06		beq $8fee			beq 	_IntegerCode 				; if clear, then we have two integers
.8fe8	4c 46 a2	jmp $a246			jmp 	FloatingPointSub 							; otherwise at least one float.
.8feb					_StringData:
.8feb	4c 84 a6	jmp $a684			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fee					_IntegerCode:
.8fee	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8ff1	49 80		eor #$80			eor 	#$80
.8ff3	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8ff6	80 bb		bra $8fb3			bra 	AddCode 					; and do the same code as add.
.8ff8					AndInteger:
.8ff8	fa		plx				plx
.8ff9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ffc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9000	0a		asl a				asl 	a
.9001	10 05		bpl $9008			bpl 	_NotRef
.9003	48		pha				pha
.9004	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9007	68		pla				pla
.9008					_NotRef:
.9008	0a		asl a				asl 	a
.9009	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.900b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.900e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9011	f0 03		beq $9016			beq 	_IntegerCode 				; if clear, then we have two integers
.9013	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.9016					_IntegerCode:
.9016	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9019	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.901c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.901f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.9022	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.9025	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9028	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.902b	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.902e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9031	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9034	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.9037	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.903a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.903d	60		rts				rts
.903e					OraInteger:
.903e	fa		plx				plx
.903f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9042	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9045	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9046	0a		asl a				asl 	a
.9047	10 05		bpl $904e			bpl 	_NotRef
.9049	48		pha				pha
.904a	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.904d	68		pla				pla
.904e					_NotRef:
.904e	0a		asl a				asl 	a
.904f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9051	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9054	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9057	f0 03		beq $905c			beq 	_IntegerCode 				; if clear, then we have two integers
.9059	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.905c					_IntegerCode:
.905c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.905f	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.9062	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9065	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.9068	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.906b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.906e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9071	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.9074	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9077	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.907a	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.907d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9080	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9083	60		rts				rts
.9084					EorInteger:
.9084	fa		plx				plx
.9085	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9088	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.908b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.908c	0a		asl a				asl 	a
.908d	10 05		bpl $9094			bpl 	_NotRef
.908f	48		pha				pha
.9090	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9093	68		pla				pla
.9094					_NotRef:
.9094	0a		asl a				asl 	a
.9095	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9097	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.909a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.909d	f0 03		beq $90a2			beq 	_IntegerCode 				; if clear, then we have two integers
.909f	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.90a2					_IntegerCode:
.90a2	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.90a5	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.90a8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90ab	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.90ae	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.90b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90b4	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.90b7	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.90ba	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90bd	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.90c0	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.90c3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90c6	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.90c9	60		rts				rts
.90ca					WordIndirect:
.90ca	fa		plx				plx
.90cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90ce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90d1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90d2	0a		asl a				asl 	a
.90d3	10 05		bpl $90da			bpl 	_NotRef
.90d5	48		pha				pha
.90d6	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90d9	68		pla				pla
.90da					_NotRef:
.90da	0a		asl a				asl 	a
.90db	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90dd	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90e0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90e3	f0 03		beq $90e8			beq 	_IntegerCode 				; if clear, then we have two integers
.90e5	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.90e8					_IntegerCode:
.90e8	20 b3 8f	jsr $8fb3			jsr 	AddCode 					; add the two values
.90eb	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.90ed	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90f0	60		rts				rts
.90f1					ByteIndirect:
.90f1	fa		plx				plx
.90f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90f5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90f8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90f9	0a		asl a				asl 	a
.90fa	10 05		bpl $9101			bpl 	_NotRef
.90fc	48		pha				pha
.90fd	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9100	68		pla				pla
.9101					_NotRef:
.9101	0a		asl a				asl 	a
.9102	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9104	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9107	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.910a	f0 03		beq $910f			beq 	_IntegerCode 				; if clear, then we have two integers
.910c	4c 7a a6	jmp $a67a			jmp 	TypeError 					; anything else, type mismatch.
.910f					_IntegerCode:
.910f	20 b3 8f	jsr $8fb3			jsr 	AddCode 					; add the two values
.9112	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9114	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a1e6					ConvertInt16:
.a1e6	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a1e9	8e 10 06	stx $0610			stx 	NSMantissa1
.a1ec	9c 18 06	stz $0618			stz 	NSMantissa2
.a1ef	9c 20 06	stz $0620			stz 	NSMantissa3
.a1f2	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a1f5	a2 00		ldx #$00			ldx 	#0 							; stack level
.a1f7	a9 0a		lda #$0a			lda 	#10 						; base
.a1f9	80 00		bra $a1fb			bra 	ConvertInt32
.a1fb					ConvertInt32:
.a1fb	5a		phy				phy
.a1fc	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a1fe	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a201	10 08		bpl $a20b			bpl 	_CI32NotNeg
.a203	48		pha				pha
.a204	a9 2d		lda #$2d			lda 	#'-'
.a206	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a209	c8		iny				iny
.a20a	68		pla				pla
.a20b					_CI32NotNeg:
.a20b	20 19 a2	jsr $a219			jsr 	_CI32DivideConvert 			; recursive conversion
.a20e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a210	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a213	7a		ply				ply
.a214	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a216	a9 77		lda #$77			lda 	#NumberBuffer & $FF
.a218	60		rts				rts
.a219					_CI32DivideConvert:
.a219	e8		inx				inx 								; write to next slot up
.a21a	20 0b 99	jsr $990b			jsr 	NSMSetByte
.a21d	ca		dex				dex
.a21e	20 1b a1	jsr $a11b			jsr 	Int32Divide 				; divide
.a221	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a224	48		pha				pha
.a225	20 ca a0	jsr $a0ca			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a228	20 39 99	jsr $9939			jsr 	NSMIsZero 					; is it zero ?
.a22b	f0 06		beq $a233			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a22d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a230	20 19 a2	jsr $a219			jsr 	_CI32DivideConvert 			; and recusrively call.
.a233					_CI32NoRecurse:
.a233	68		pla				pla 								; remainder
.a234	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a236	90 02		bcc $a23a			bcc 	_CI32NotHex
.a238	69 26		adc #$26			adc 	#6+32
.a23a					_CI32NotHex:
.a23a	69 30		adc #$30			adc 	#48
.a23c	99 77 08	sta $0877,y			sta 	NumberBuffer,y 				; write out and exit
.a23f	c8		iny				iny
.a240	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9118					PrecedenceLevel:
>9118	04					.byte	 4	; $00 <<
>9119	02					.byte	 2	; $01 <=
>911a	02					.byte	 2	; $02 <>
>911b	00					.byte	 0	; $03 !!3
>911c	00					.byte	 0	; $04 ><
>911d	02					.byte	 2	; $05 >=
>911e	04					.byte	 4	; $06 >>
>911f	00					.byte	 0	; $07 !!7
>9120	00					.byte	 0	; $08 !!8
>9121	00					.byte	 0	; $09 !!9
>9122	00					.byte	 0	; $0a !!10
>9123	00					.byte	 0	; $0b !!11
>9124	00					.byte	 0	; $0c !!12
>9125	00					.byte	 0	; $0d !!13
>9126	00					.byte	 0	; $0e !!14
>9127	00					.byte	 0	; $0f !!15
>9128	00					.byte	 0	; $10 @
>9129	00					.byte	 0	; $11 !!17
>912a	00					.byte	 0	; $12 !!18
>912b	00					.byte	 0	; $13 [
>912c	04					.byte	 4	; $14 \
>912d	00					.byte	 0	; $15 ]
>912e	01					.byte	 1	; $16 ^
>912f	00					.byte	 0	; $17 _
>9130	00					.byte	 0	; $18 `
>9131	00					.byte	 0	; $19 !!25
>9132	00					.byte	 0	; $1a !!26
>9133	00					.byte	 0	; $1b {
>9134	01					.byte	 1	; $1c |
>9135	00					.byte	 0	; $1d }
>9136	00					.byte	 0	; $1e ~
>9137	00					.byte	 0	; $1f [7m<7F>[m
>9138	00					.byte	 0	; $20
>9139	05					.byte	 5	; $21 !
>913a	00					.byte	 0	; $22 "
>913b	00					.byte	 0	; $23 #
>913c	05					.byte	 5	; $24 $
>913d	04					.byte	 4	; $25 %
>913e	01					.byte	 1	; $26 &
>913f	00					.byte	 0	; $27 '
>9140	00					.byte	 0	; $28 (
>9141	00					.byte	 0	; $29 )
>9142	04					.byte	 4	; $2a *
>9143	03					.byte	 3	; $2b +
>9144	00					.byte	 0	; $2c ,
>9145	03					.byte	 3	; $2d -
>9146	00					.byte	 0	; $2e .
>9147	04					.byte	 4	; $2f /
>9148	00					.byte	 0	; $30 0
>9149	00					.byte	 0	; $31 1
>914a	00					.byte	 0	; $32 2
>914b	00					.byte	 0	; $33 3
>914c	00					.byte	 0	; $34 4
>914d	00					.byte	 0	; $35 5
>914e	00					.byte	 0	; $36 6
>914f	00					.byte	 0	; $37 7
>9150	00					.byte	 0	; $38 8
>9151	00					.byte	 0	; $39 9
>9152	00					.byte	 0	; $3a :
>9153	00					.byte	 0	; $3b ;
>9154	02					.byte	 2	; $3c <
>9155	02					.byte	 2	; $3d =
>9156	02					.byte	 2	; $3e >
>9157	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9158					EvaluateExpressionAt0:
.9158	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.915a					EvaluateExpression:
.915a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.915c					EvaluateExpressionAtPrecedence:
.915c	48		pha				pha 								; save precedence level
.915d	20 2b 94	jsr $942b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9160	68		pla				pla 								; restore precedence level.
.9161					_EXPRLoop:
.9161	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9163	b1 30		lda ($30),y			lda 	(codePtr),y
.9165	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9167	b0 25		bcs $918e			bcs 	_EXPRExit
.9169	da		phx				phx 								; read the operator precedence
.916a	aa		tax				tax
.916b	bd 18 91	lda $9118,x			lda 	PrecedenceLevel,x
.916e	fa		plx				plx
.916f	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9171	f0 1b		beq $918e			beq 	_EXPRExit
.9173	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9175	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9177	c5 37		cmp $37				cmp 	zTemp0+1
.9179	b0 13		bcs $918e			bcs		_EXPRExit 					; if current >= operator exit
.917b	48		pha				pha 								; save current precedence.
.917c	b1 30		lda ($30),y			lda 	(codePtr),y
.917e	c8		iny				iny
.917f	48		pha				pha
.9180	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9182	e8		inx				inx 								; work out the right hand side.
.9183	20 5c 91	jsr $915c			jsr 	EvaluateExpressionAtPrecedence
.9186	ca		dex				dex
.9187	68		pla				pla 								; get operator, call the code.
.9188	20 91 91	jsr $9191			jsr 	_EXPRCaller
.918b	68		pla				pla 								; restore precedence level
.918c	80 d3		bra $9161			bra 	_EXPRLoop 					; and go round.
.918e					_EXPRExit:
.918e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9190	60		rts				rts
.9191					_EXPRCaller:
.9191	da		phx				phx 								; save on stack, first thing is to restore it
.9192	0a		asl a				asl 	a 							; double so can use vectors into X
.9193	aa		tax				tax
.9194	7c 7c 80	jmp ($807c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a241					FloatingPointAdd:
.a241	20 e2 a3	jsr $a3e2			jsr 	FloatPrepare 				; prepare for floats
.a244	80 0b		bra $a251			bra 	FloatAdd
.a246					FloatingPointSub:
.a246	20 e2 a3	jsr $a3e2			jsr 	FloatPrepare 				; prepare for floats
.a249					FloatSubtract:
.a249	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a24c	49 80		eor #$80			eor 	#$80
.a24e	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a251					FloatAdd:
.a251	48		pha				pha
.a252	5a		phy				phy
.a253	20 f3 a3	jsr $a3f3			jsr 	NSNormalise 				; normalise S[X]
.a256	f0 54		beq $a2ac			beq 	_FAReturn1
.a258	e8		inx				inx 								; normalise S[X+1]
.a259	20 f3 a3	jsr $a3f3			jsr 	NSNormalise
.a25c	ca		dex				dex
.a25d	c9 00		cmp #$00			cmp 	#0
.a25f	f0 6f		beq $a2d0			beq 	_FAExit 					; if so, just return A
.a261	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a264	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a267	f0 1b		beq $a284			beq 	_FAExponentsEqual
.a269	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a26c	a8		tay				tay
.a26d	38		sec				sec 								; do a signed comparison of the exponents.
.a26e	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a271	50 02		bvc $a275			bvc 	_FANoSignedChange
.a273	49 80		eor #$80			eor 	#$80
.a275					_FANoSignedChange:
.a275	29 80		and #$80			and 	#$80
.a277	10 03		bpl $a27c			bpl 	_FAHaveMax
.a279	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a27c					_FAHaveMax:
.a27c	20 d3 a2	jsr $a2d3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a27f	e8		inx				inx
.a280	20 d3 a2	jsr $a2d3			jsr 	_FAShiftToExponent
.a283	ca		dex				dex
.a284					_FAExponentsEqual:
.a284	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a287	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a28a	30 10		bmi $a29c			bmi 	_FADifferentSigns
.a28c	20 46 8f	jsr $8f46			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a28f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a292	10 3c		bpl $a2d0			bpl 	_FAExit 					; if no, we are done.
.a294	20 2c 99	jsr $992c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a297	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a29a	80 34		bra $a2d0			bra 	_FAExit
.a29c					_FADifferentSigns:
.a29c	20 6c 8f	jsr $8f6c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a29f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a2a2	10 2c		bpl $a2d0			bpl 	_FAExit 					; if no, we are done.
.a2a4	20 b5 98	jsr $98b5			jsr 	NSMNegate 					; netate result
.a2a7	20 be 98	jsr $98be			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a2aa	80 24		bra $a2d0			bra 	_FAExit
.a2ac					_FAReturn1:
.a2ac	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a2af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a2b2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a2b5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a2b8	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a2bb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a2be	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a2c1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a2c4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a2c7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a2cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2d0					_FAExit:
.a2d0	7a		ply				ply
.a2d1	68		pla				pla
.a2d2	60		rts				rts
.a2d3					_FAShiftToExponent:
.a2d3					_FAShiftToExponent2:
.a2d3	98		tya				tya 								; compare Y to exponent
.a2d4	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a2d7	f0 08		beq $a2e1			beq 	_FASEExit 					; exit if so.
.a2d9	20 2c 99	jsr $992c			jsr 	NSMShiftRight	 			; shift the mantissa right
.a2dc	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a2df	80 f2		bra $a2d3			bra 	_FAShiftToExponent2
.a2e1					_FASEExit:
.a2e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a2e2					CompareFloat:
.a2e2	20 49 a2	jsr $a249			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a2e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a2e8	29 f8		and #$f8			and 	#$F8
.a2ea	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a2ed	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a2f0	f0 09		beq $a2fb			beq 	_FCExit 					; zero, so approximately identical
.a2f2	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a2f4	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a2f7	10 02		bpl $a2fb			bpl 	_FCExit
.a2f9					_FCNegative:
.a2f9	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a2fb					_FCExit:
.a2fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a2fc					FDivideCommand:
.a2fc	fa		plx				plx	 								; restore stack position
.a2fd	20 e2 a3	jsr $a3e2			jsr 	FloatPrepare 				; prepare for floats
.a300					FloatDivide:
.a300	48		pha				pha
.a301	e8		inx				inx
.a302	20 f3 a3	jsr $a3f3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a305	ca		dex				dex
.a306	c9 00		cmp #$00			cmp 	#0
.a308	f0 20		beq $a32a			beq 	_FDZero
.a30a	20 f3 a3	jsr $a3f3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a30d	f0 19		beq $a328			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a30f	20 3d a1	jsr $a13d			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a312	20 ca a0	jsr $a0ca			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a315	20 f3 a3	jsr $a3f3			jsr		NSNormalise 				; renormalise
.a318	20 d8 a1	jsr $a1d8			jsr 	CalculateSign 				; calculate result sign
.a31b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a31e	38		sec				sec
.a31f	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a322	38		sec				sec
.a323	e9 1e		sbc #$1e			sbc 	#30
.a325	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a328					_FDExit:
.a328	68		pla				pla
.a329	60		rts				rts
.a32a					_FDZero:
.a32a	a9 03		lda #$03		lda	#3
.a32c	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a32f					FloatFractionalPart:
.a32f	5a		phy				phy
.a330	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a333	29 7f		and #$7f			and 	#$7F
.a335	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a338	20 f3 a3	jsr $a3f3			jsr 	NSNormalise
.a33b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a33e	38		sec				sec
.a33f	e9 e0		sbc #$e0			sbc 	#$E0
.a341	90 31		bcc $a374			bcc 	_FFPExit 					; already fractional
.a343	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a345	b0 2a		bcs $a371			bcs 	_FFPZero
.a347	a8		tay				tay 								; put count to do in Y
.a348	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a34b	20 76 a3	jsr $a376			jsr 	_FFPPartial
.a34e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a351	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a354	20 76 a3	jsr $a376			jsr 	_FFPPartial
.a357	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a35a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a35d	20 76 a3	jsr $a376			jsr 	_FFPPartial
.a360	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a363	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a366	20 76 a3	jsr $a376			jsr 	_FFPPartial
.a369	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a36c	20 39 99	jsr $9939			jsr 	NSMIsZero 					; zeroed check.
.a36f	d0 03		bne $a374			bne 	_FFPExit
.a371					_FFPZero:
.a371	20 09 99	jsr $9909			jsr 	NSMSetZero
.a374					_FFPExit:
.a374	7a		ply				ply
.a375	60		rts				rts
.a376					_FFPPartial:
.a376	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a378	f0 17		beq $a391			beq 	_FFFPPExit
.a37a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a37c	b0 0c		bcs $a38a			bcs 	_FFFPPWholeByte
.a37e	5a		phy				phy
.a37f					_FFFPPLeft:
.a37f	0a		asl a				asl 	a
.a380	88		dey				dey
.a381	d0 fc		bne $a37f			bne 	_FFFPPLeft
.a383	7a		ply				ply
.a384					_FFFPPRight:
.a384	4a		lsr a				lsr 	a
.a385	88		dey				dey
.a386	d0 fc		bne $a384			bne 	_FFFPPRight
.a388	80 07		bra $a391			bra 	_FFFPPExit
.a38a					_FFFPPWholeByte:
.a38a	98		tya				tya 								; subtract 8 from count
.a38b	38		sec				sec
.a38c	e9 08		sbc #$08			sbc 	#8
.a38e	a8		tay				tay
.a38f	a9 00		lda #$00			lda 	#0 							; and clear all
.a391					_FFFPPExit:
.a391	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a392					FloatIntegerPart:
.a392	48		pha				pha
.a393	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a396	f0 1f		beq $a3b7			beq 	_FIPExit 					; if so do nothing
.a398	20 39 99	jsr $9939			jsr 	NSMIsZero 					; is it zero ?
.a39b	f0 17		beq $a3b4			beq 	_FIPZero 					; if so return zero.
.a39d	20 f3 a3	jsr $a3f3			jsr 	NSNormalise 				; normalise
.a3a0	f0 12		beq $a3b4			beq 	_FIPZero 					; normalised to zero, exit zero
.a3a2					_FIPShift:
.a3a2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a3a5	10 08		bpl $a3af			bpl 	_FIPCheckZero
.a3a7	20 2c 99	jsr $992c			jsr 	NSMShiftRight 				; shift mantissa right
.a3aa	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a3ad	80 f3		bra $a3a2			bra 	_FIPShift
.a3af					_FIPCheckZero:
.a3af	20 39 99	jsr $9939			jsr 	NSMIsZero 					; avoid -0 problem
.a3b2	d0 03		bne $a3b7			bne 	_FIPExit 					; set to zero if mantissa zero.
.a3b4					_FIPZero:
.a3b4	20 09 99	jsr $9909			jsr 	NSMSetZero
.a3b7					_FIPExit:
.a3b7	68		pla				pla
.a3b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a3b9					FloatingPointMultiply:
.a3b9	20 e2 a3	jsr $a3e2			jsr 	FloatPrepare 				; prepare for floats
.a3bc					FloatMultiply:
.a3bc	48		pha				pha
.a3bd	20 f3 a3	jsr $a3f3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a3c0	f0 1b		beq $a3dd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a3c2	e8		inx				inx
.a3c3	20 f3 a3	jsr $a3f3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a3c6	ca		dex				dex
.a3c7	c9 00		cmp #$00			cmp 	#0
.a3c9	f0 0f		beq $a3da			beq 	_FDSetZero
.a3cb	20 93 a1	jsr $a193			jsr 	MultiplyShort 				; calculate the result.
.a3ce	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a3d1	18		clc				clc
.a3d2	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a3d5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a3d8	80 03		bra $a3dd			bra 	_FDExit
.a3da					_FDSetZero:
.a3da	20 09 99	jsr $9909			jsr 	NSMSetZero 					; return 0
.a3dd					_FDExit:
.a3dd	20 f3 a3	jsr $a3f3			jsr 	NSNormalise 				; normalise the result
.a3e0	68		pla				pla
.a3e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a3e2					FloatPrepare:
.a3e2	20 6a 92	jsr $926a			jsr 	DereferenceTopTwo 			; dereference the top two values
.a3e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a3e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a3eb	29 10		and #$10			and 	#NSBIsString
.a3ed	d0 01		bne $a3f0			bne 	_FDType
.a3ef	60		rts				rts
.a3f0					_FDType:
.a3f0	4c 7a a6	jmp $a67a			jmp 	TypeError
.a3f3					NSNormalise:
.a3f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a3f6	29 80		and #$80			and 	#$80
.a3f8	09 08		ora #$08			ora 	#NSTFloat
.a3fa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3fd	20 39 99	jsr $9939			jsr 	NSMIsZero 					; if zero exit
.a400	d0 09		bne $a40b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a402	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a405	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a408	a9 00		lda #$00			lda 	#0 							; set Z flag
.a40a	60		rts				rts
.a40b					_NSNormaliseOptimise:
.a40b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a40e	d0 22		bne $a432			bne 	_NSNormaliseLoop
.a410	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a413	30 1d		bmi $a432			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a415	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a418	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a41b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a41e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a421	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a424	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a427	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a42a	38		sec				sec
.a42b	e9 08		sbc #$08			sbc 	#8
.a42d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a430	80 d9		bra $a40b			bra 	_NSNormaliseOptimise
.a432					_NSNormaliseLoop:
.a432	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a435	70 08		bvs $a43f			bvs 	_NSNExit 					; exit if so with Z flag clear
.a437	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; shift mantissa left
.a43a	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a43d	80 f3		bra $a432			bra 	_NSNormaliseLoop
.a43f					_NSNExit:
.a43f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a441	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9197					AssignNumber:
.9197	5a		phy				phy
.9198	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.919b	85 36		sta $36				sta 	zTemp0
.919d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91a0	85 37		sta $37				sta 	zTemp0+1
.91a2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.91a5	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.91a7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91aa	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.91ac	c9 08		cmp #$08			cmp 	#NSTFloat
.91ae	f0 2a		beq $91da			beq 	_ANFloat
.91b0	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.91b3	f0 05		beq $91ba			beq		_ANNotFloat
.91b5	e8		inx				inx
.91b6	20 92 a3	jsr $a392			jsr 	FloatIntegerPart 			; make it an integer
.91b9	ca		dex				dex
.91ba					_ANNotFloat:
.91ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.91bd	29 03		and #$03			and 	#3
.91bf	d0 05		bne $91c6			bne 	_ANByteWord
.91c1	20 e6 91	jsr $91e6			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.91c4	80 1e		bra $91e4			bra 	_ANExit
.91c6					_ANByteWord:
.91c6	48		pha				pha 								; save count
.91c7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.91ca	92 36		sta ($36)			sta 	(zTemp0)
.91cc	68		pla				pla
.91cd	c9 01		cmp #$01			cmp	 	#1
.91cf	f0 13		beq $91e4			beq 	_ANExit
.91d1	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.91d4	a0 01		ldy #$01			ldy 	#1
.91d6	91 36		sta ($36),y			sta 	(zTemp0),y
.91d8	80 0a		bra $91e4			bra 	_ANExit
.91da					_ANFloat:
.91da	20 e6 91	jsr $91e6			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.91dd	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.91e0	a0 04		ldy #$04			ldy 	#4
.91e2	91 36		sta ($36),y			sta 	(zTemp0),y
.91e4					_ANExit:
.91e4	7a		ply				ply
.91e5	60		rts				rts
.91e6					_ANCopy4PackSign:
.91e6	a0 03		ldy #$03			ldy 	#3
.91e8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.91eb	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.91ed	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.91f0	91 36		sta ($36),y			sta 	(zTemp0),y
.91f2	88		dey				dey
.91f3	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.91f6	91 36		sta ($36),y			sta 	(zTemp0),y
.91f8	88		dey				dey
.91f9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91fc	91 36		sta ($36),y			sta 	(zTemp0),y
.91fe	88		dey				dey
.91ff	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9202	91 36		sta ($36),y			sta 	(zTemp0),y
.9204	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9205					AssignString:
.9205	5a		phy				phy
.9206	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9209	85 38		sta $38				sta 	zTemp1
.920b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.920e	85 39		sta $39				sta 	zTemp1+1
.9210	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9213	85 36		sta $36				sta 	zTemp0
.9215	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9218	85 37		sta $37				sta 	zTemp0+1
.921a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.921c	b1 36		lda ($36),y			lda 	(zTemp0),y
.921e	f0 23		beq $9243			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9220	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9221	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9223	e9 02		sbc #$02			sbc 	#2
.9225	85 3c		sta $3c				sta 	zsTemp
.9227	a0 01		ldy #$01			ldy 	#1
.9229	b1 36		lda ($36),y			lda 	(zTemp0),y
.922b	e9 00		sbc #$00			sbc 	#0
.922d	85 3d		sta $3d				sta 	zsTemp+1
.922f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9231					_ASGetLength:
.9231	c8		iny				iny
.9232	b1 38		lda ($38),y			lda 	(zTemp1),y
.9234	d0 fb		bne $9231			bne 	_ASGetLength
.9236	98		tya				tya 								; is this length <= current length
.9237	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9239	90 20		bcc $925b			bcc 	_ASCopyString
.923b	f0 1e		beq $925b			beq 	_ASCopyString
.923d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.923f	a0 01		ldy #$01			ldy 	#1
.9241	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9243					_ASNewStringRequired:
.9243	e8		inx				inx 								; concrete the new string.
.9244	20 15 a8	jsr $a815			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9247	ca		dex				dex
.9248	18		clc				clc
.9249	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.924c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.924e	92 36		sta ($36)			sta 	(zTemp0)
.9250	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9253	69 00		adc #$00			adc 	#0
.9255	a0 01		ldy #$01			ldy 	#1
.9257	91 36		sta ($36),y			sta 	(zTemp0),y
.9259	80 0d		bra $9268			bra 	_ASExit
.925b					_ASCopyString:
.925b	a0 00		ldy #$00			ldy 	#0
.925d					_ASCopyLoop:
.925d	b1 38		lda ($38),y			lda 	(zTemp1),y
.925f	c8		iny				iny
.9260	c8		iny				iny
.9261	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9263	88		dey				dey
.9264	c9 00		cmp #$00			cmp 	#0
.9266	d0 f5		bne $925d			bne 	_ASCopyLoop
.9268					_ASExit:
.9268	7a		ply				ply
.9269	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.926a					DereferenceTopTwo:
.926a	e8		inx				inx
.926b	20 6f 92	jsr $926f			jsr 	Dereference 				; deref x+1
.926e	ca		dex				dex  								; falls through to deref x
.926f					Dereference:
.926f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9272	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9274	f0 57		beq $92cd			beq 	_DRFExit 					; not a reference
.9276	5a		phy				phy
.9277	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.927a	85 36		sta $36				sta 	zTemp0
.927c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.927f	85 37		sta $37				sta 	zTemp0+1
.9281	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9284	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9286	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9289	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.928c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.928e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9290	f0 0f		beq $92a1			beq 	_DRFDereferenceTwo
.9292	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9294	f0 39		beq $92cf			beq 	_DRFFull
.9296	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9299	29 03		and #$03			and 	#3
.929b	f0 32		beq $92cf			beq 	_DRFFull 					; the whole word
.929d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.929f	f0 07		beq $92a8			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.92a1					_DRFDereferenceTwo:
.92a1	a0 01		ldy #$01			ldy 	#1
.92a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92a8					_DRFClear23:
.92a8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.92ab	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.92ae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.92b1	29 18		and #$18			and 	#NSBTypeMask
.92b3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92b6	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.92b8	d0 12		bne $92cc			bne 	_DRFNotString
.92ba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.92bd	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.92c0	d0 0a		bne $92cc			bne 	_DRFNotString
.92c2	a9 ce		lda #$ce			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.92c4	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.92c7	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.92c9	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.92cc					_DRFNotString
.92cc	7a		ply				ply 								; restore Y and exit
.92cd					_DRFExit:
.92cd	60		rts				rts
.92ce					_DRFNullString:
>92ce	00						.byte 	0
.92cf					_DRFFull:
.92cf	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.92d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.92d3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92d6	c8		iny				iny
.92d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.92d9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92dc	c8		iny				iny
.92dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.92df	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92e2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.92e5	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.92e8	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.92ea	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.92ed	f0 06		beq $92f5			beq 	_DRFNoExponent
.92ef	c8		iny				iny 								; if not, read the exponent as well.
.92f0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92f2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92f5					_DRFNoExponent:
.92f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.92f8	10 0d		bpl $9307			bpl 	_DRFExit2 					; if not, then exit.
.92fa	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.92fc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9302	09 80		ora #$80			ora 	#NSBIsNegative
.9304	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9307					_DRFExit2:
.9307	7a		ply				ply
.9308	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9309					EncodeNumberStart:
.9309	38		sec				sec
.930a	80 01		bra $930d			bra 	EncodeNumberContinue+1
.930c					EncodeNumberContinue:
.930c	18		clc				clc
.930d					EncodeNumber:
.930d	08		php				php 								; save reset.
.930e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9310	f0 12		beq $9324			beq 	_ENIsOkay
.9312	c9 30		cmp #$30			cmp 	#"0"
.9314	90 04		bcc $931a			bcc 	_ENBadNumber
.9316	c9 3a		cmp #$3a			cmp 	#"9"+1
.9318	90 0a		bcc $9324			bcc 	_ENIsOkay
.931a					_ENBadNumber:
.931a	28		plp				plp 								; throw saved reset
.931b	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.931e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9320	f0 7e		beq $93a0			beq 	_ENConstructFinal
.9322					_ENFail:
.9322	18		clc				clc 								; not allowed
.9323	60		rts				rts
.9324					_ENIsOkay:
.9324	28		plp				plp 								; are we restarting
.9325	90 15		bcc $933c			bcc 	_ENNoRestart
.9327					_ENStartEncode:
.9327	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9329	f0 0c		beq $9337			beq 	_ENFirstDP
.932b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.932d	20 0b 99	jsr $990b			jsr 	NSMSetByte
.9330	a9 01		lda #$01			lda 	#ESTA_Low
.9332					_ENExitChange:
.9332	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9335	38		sec				sec
.9336	60		rts				rts
.9337					_ENFirstDP:
.9337	20 09 99	jsr $9909			jsr 	NSMSetZero 					; clear integer part
.933a	80 3f		bra $937b			bra 	_ESTASwitchFloat			; go straight to float and exi
.933c					_ENNoRestart:
.933c	48		pha				pha 								; save on stack.
.933d	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.9340	c9 01		cmp #$01			cmp 	#ESTA_Low
.9342	f0 09		beq $934d			beq  	_ESTALowState
.9344	c9 02		cmp #$02			cmp 	#ESTA_High
.9346	f0 29		beq $9371			beq 	_ESTAHighState
.9348	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.934a	f0 3b		beq $9387			beq 	_ESTADecimalState
>934c	db						.byte 	$DB 						; causes a break in the emulator
.934d					_ESTALowState:
.934d	68		pla				pla 								; get value back
.934e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9350	f0 29		beq $937b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9352	29 0f		and #$0f			and 	#15 						; make digit
.9354	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9357	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.935a	0a		asl a				asl 	a
.935b	0a		asl a				asl 	a
.935c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.935f	0a		asl a				asl 	a
.9360	6d 06 07	adc $0706			adc 	DigitTemp
.9363	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9366	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9368	90 05		bcc $936f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.936a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.936c	8d 05 07	sta $0705			sta 	EncodeState
.936f					_ESTANoSwitch:
.936f	38		sec				sec
.9370	60		rts				rts
.9371					_ESTAHighState:
.9371	68		pla				pla 								; get value back
.9372	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9374	f0 05		beq $937b			beq 	_ESTASwitchFloat
.9376	20 da 93	jsr $93da			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9379	38		sec				sec
.937a	60		rts				rts
.937b					_ESTASwitchFloat:
.937b	9c 07 07	stz $0707			stz 	DecimalCount
.937e	e8		inx				inx 								; zero the decimal additive.
.937f	20 09 99	jsr $9909			jsr 	NSMSetZero
.9382	ca		dex				dex
.9383	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9385	80 ab		bra $9332			bra 	_ENExitChange
.9387					_ESTADecimalState:
.9387	68		pla				pla 								; digit.
.9388	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.938a	f0 96		beq $9322			beq 	_ENFail
.938c	e8		inx				inx 								; put digit into fractional part of X+1
.938d	20 da 93	jsr $93da			jsr 	ESTAShiftDigitIntoMantissa
.9390	ca		dex				dex
.9391	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9394	ad 07 07	lda $0707			lda 	DecimalCount
.9397	c9 0b		cmp #$0b			cmp 	#11
.9399	f0 02		beq $939d			beq 	_ESTADSFail
.939b	38		sec				sec
.939c	60		rts				rts
.939d					_ESTADSFail:
.939d	4c 75 a6	jmp $a675			jmp 	RangeError
.93a0					_ENConstructFinal:
.93a0	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.93a3	f0 33		beq $93d8			beq 	_ENCFExit 					; no decimals
.93a5	5a		phy				phy
.93a6	0a		asl a				asl 	a 							; x 4 and CLC
.93a7	0a		asl a				asl 	a
.93a8	6d 07 07	adc $0707			adc 	DecimalCount
.93ab	a8		tay				tay
.93ac	b9 34 a6	lda $a634,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.93af	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.93b2	b9 35 a6	lda $a635,y			lda 	DecimalScalarTable-5+1,y
.93b5	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.93b8	b9 36 a6	lda $a636,y			lda 	DecimalScalarTable-5+2,y
.93bb	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.93be	b9 37 a6	lda $a637,y			lda 	DecimalScalarTable-5+3,y
.93c1	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.93c4	b9 38 a6	lda $a638,y			lda 	DecimalScalarTable-5+4,y
.93c7	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.93ca	a9 08		lda #$08			lda 	#NSTFloat
.93cc	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.93cf	7a		ply				ply
.93d0	e8		inx				inx 								; multiply decimal const by decimal scalar
.93d1	20 bc a3	jsr $a3bc			jsr 	FloatMultiply
.93d4	ca		dex				dex
.93d5	20 51 a2	jsr $a251			jsr 	FloatAdd 					; add to integer part.
.93d8					_ENCFExit:
.93d8	18		clc				clc 								; reject the digit.
.93d9	60		rts				rts
.93da					ESTAShiftDigitIntoMantissa:
.93da	29 0f		and #$0f			and 	#15 						; save digit
.93dc	48		pha				pha
.93dd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.93e0	48		pha				pha
.93e1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.93e4	48		pha				pha
.93e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93e8	48		pha				pha
.93e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93ec	48		pha				pha
.93ed	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 2
.93f0	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 4
.93f3	18		clc				clc 								; pop mantissa and add
.93f4	68		pla				pla
.93f5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93fb	68		pla				pla
.93fc	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.93ff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9402	68		pla				pla
.9403	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9406	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9409	68		pla				pla
.940a	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.940d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9410	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 10
.9413	68		pla				pla 								; add digit
.9414	18		clc				clc
.9415	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9418	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.941b	90 0d		bcc $942a			bcc 	_ESTASDExit
.941d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9420	d0 08		bne $942a			bne 	_ESTASDExit
.9422	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9425	d0 03		bne $942a			bne 	_ESTASDExit
.9427	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.942a					_ESTASDExit:
.942a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.942b					EvaluateTerm:
.942b	b1 30		lda ($30),y			lda 	(codePtr),y
.942d	30 18		bmi $9447			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.942f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9431	b0 6f		bcs $94a2			bcs 	_ETVariable
.9433	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9435	90 6e		bcc $94a5			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9437	c9 3a		cmp #$3a			cmp 	#'9'+1
.9439	b0 6a		bcs $94a5			bcs 	_ETPuncUnary
.943b	20 09 93	jsr $9309			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.943e					_ETNumber:
.943e	c8		iny				iny 								; keep encoding until we have the numbers
.943f	b1 30		lda ($30),y			lda 	(codePtr),y
.9441	20 0c 93	jsr $930c			jsr 	EncodeNumberContinue
.9444	b0 f8		bcs $943e			bcs 	_ETNumber 					; go back if accepted.
.9446	60		rts				rts
.9447					_ETCheckUnary:
.9447	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9449	f0 41		beq $948c			beq 	_ETString
.944b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.944d	f0 12		beq $9461			beq 	_ETHexConstant
.944f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9451	90 0b		bcc $945e			bcc 	_ETSyntaxError
.9453	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9455	b0 07		bcs $945e			bcs 	_ETSyntaxError
.9457	da		phx				phx 								; push X on the stack
.9458	0a		asl a				asl 	a 							; put vector x 2 into X
.9459	aa		tax				tax
.945a	c8		iny				iny 								; consume unary function token
.945b	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x) 				; and do it.
.945e					_ETSyntaxError:
.945e	4c 70 a6	jmp $a670			jmp 	SyntaxError
.9461					_ETHexConstant:
.9461	c8		iny				iny 								; skip #
.9462	c8		iny				iny 								; skip count
.9463	20 09 99	jsr $9909			jsr 	NSMSetZero 					; clear result
.9466					_ETHLoop:
.9466	b1 30		lda ($30),y			lda 	(codePtr),y
.9468	c8		iny				iny 								; and consume
.9469	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.946b	f0 1e		beq $948b			beq 	_ETHExit
.946d	48		pha				pha 								; save on stack.
.946e	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 2
.9471	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 4
.9474	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 8
.9477	20 1e 99	jsr $991e			jsr 	NSMShiftLeft 				; x 16
.947a	68		pla				pla 								; ASCII
.947b	c9 41		cmp #$41			cmp 	#'A'
.947d	90 02		bcc $9481			bcc 	_ETHNotChar
.947f	e9 07		sbc #$07			sbc 	#7
.9481					_ETHNotChar:
.9481	29 0f		and #$0f			and 	#15 						; digit now
.9483	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9486	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9489	80 db		bra $9466			bra 	_ETHLoop 					; go round.
.948b					_ETHExit:
.948b	60		rts				rts
.948c					_ETString:
.948c	c8		iny				iny 								; look at length
.948d	b1 30		lda ($30),y			lda 	(codePtr),y
.948f	48		pha				pha
.9490	c8		iny				iny 								; first character
.9491	20 b9 9f	jsr $9fb9			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9494	68		pla				pla 								; restore count and save
.9495	85 36		sta $36				sta 	zTemp0
.9497	98		tya				tya 								; add length to Y to skip it.
.9498	18		clc				clc
.9499	65 36		adc $36				adc 	zTemp0
.949b	a8		tay				tay
.949c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.949e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94a1	60		rts				rts
.94a2					_ETVariable:
.94a2	4c fc 94	jmp $94fc			jmp 	VariableHandler
.94a5					_ETPuncUnary:
.94a5	c8		iny				iny 								; consume the unary character
.94a6	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.94a8	f0 2d		beq $94d7			beq 	_ETUnaryNegate
.94aa	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.94ac	f0 39		beq $94e7			beq 	_ETDereference
.94ae	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.94b0	f0 43		beq $94f5			beq 	_ETParenthesis
.94b2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.94b4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.94b6	f0 06		beq $94be			beq 	_ETIndirection
.94b8	e6 36		inc $36				inc 	zTemp0
.94ba	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.94bc	d0 a0		bne $945e			bne 	_ETSyntaxError
.94be					_ETIndirection:
.94be	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.94c0	1a		inc a				inc 	a
.94c1	48		pha				pha
.94c2	20 2b 94	jsr $942b			jsr 	EvaluateTerm				; evaluate the term
.94c5	20 6f 92	jsr $926f			jsr 	Dereference 				; dereference it.
.94c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.94cb	d0 07		bne $94d4			bne 	_ETTypeMismatch
.94cd	68		pla				pla 								; indirection 1-2
.94ce	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.94d0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94d3	60		rts				rts
.94d4					_ETTypeMismatch:
.94d4	4c 7a a6	jmp $a67a			jmp 	TypeError
.94d7					_ETUnaryNegate:
.94d7	20 2b 94	jsr $942b			jsr 	EvaluateTerm				; evaluate the term
.94da	20 6f 92	jsr $926f			jsr 	Dereference 				; dereference it.
.94dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.94e0	29 10		and #$10			and 	#NSTString
.94e2	d0 f0		bne $94d4			bne 	_ETTypeMismatch
.94e4	4c b5 98	jmp $98b5			jmp 	NSMNegate  					; just toggles the sign bit.
.94e7					_ETDereference:
.94e7	20 2b 94	jsr $942b			jsr 	EvaluateTerm				; evaluate the term
.94ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.94ed	29 20		and #$20			and 	#NSBIsReference
.94ef	f0 e3		beq $94d4			beq 	_ETTypeMismatch
.94f1	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.94f4	60		rts				rts
.94f5					_ETParenthesis:
.94f5	20 5a 91	jsr $915a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.94f8	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; check for )
.94fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.94fc					VariableHandler:
.94fc	b1 30		lda ($30),y			lda 	(codePtr),y
.94fe	18		clc				clc
.94ff	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9501	85 37		sta $37				sta 	zTemp0+1
.9503	c8		iny				iny
.9504	b1 30		lda ($30),y			lda 	(codePtr),y
.9506	85 36		sta $36				sta 	zTemp0
.9508	c8		iny				iny
.9509	18		clc				clc									; copy variable address+3 to mantissa
.950a	69 03		adc #$03			adc 	#3
.950c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.950f	a5 37		lda $37				lda 	zTemp0+1
.9511	69 00		adc #$00			adc 	#0
.9513	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9516	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9519	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.951c	9e 28 06	stz $0628,x			stz 	NSExponent,x
.951f	5a		phy				phy
.9520	a0 02		ldy #$02			ldy 	#2 							; read type
.9522	b1 36		lda ($36),y			lda 	(zTemp0),y
.9524	7a		ply				ply
.9525	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9527	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9529	9d 00 06	sta $0600,x			sta 	NSStatus,x
.952c	29 04		and #$04			and 	#NSBIsArray
.952e	d0 01		bne $9531			bne 	_VHArray
.9530	60		rts				rts
.9531					_VHArray:
.9531	e8		inx				inx
.9532	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9535	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9537	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.953a	b1 30		lda ($30),y			lda 	(codePtr),y
.953c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.953e	d0 06		bne $9546			bne 	_VHNoSecondIndex
.9540	c8		iny				iny 								; skip the comma
.9541	e8		inx				inx
.9542	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9545	ca		dex				dex
.9546					_VHNoSecondIndex:
.9546	ca		dex				dex 								; set X back.
.9547	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; and check the right bracket.
.954a	5a		phy				phy 								; save position
.954b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.954e	85 3e		sta $3e				sta 	zaTemp
.9550	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9553	85 3f		sta $3f				sta 	zaTemp+1
.9555	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9557	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9559	f0 02		beq $955d			beq 	_VHHas2Mask
.955b	a9 ff		lda #$ff			lda 	#$FF
.955d					_VHHas2Mask:
.955d	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9560	f0 54		beq $95b6			beq 	_VHBadIndex
.9562	0a		asl a				asl 	a 							; carry will be set if a second index
.9563	90 09		bcc $956e			bcc 	_VHCheckFirstIndex
.9565	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9567	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9569	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.956c	90 48		bcc $95b6			bcc 	_VHBadIndex
.956e					_VHCheckFirstIndex:
.956e	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9570	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9572	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9575	90 3f		bcc $95b6			bcc 	_VHBadIndex
.9577	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9579	64 37		stz $37				stz 	zTemp0+1
.957b	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.957e	30 0f		bmi $958f			bmi 	_VHNoMultiply
.9580	da		phx				phx
.9581	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9584	48		pha				pha
.9585	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9587	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9589	1a		inc a				inc 	a 							; add 1 for zero base
.958a	fa		plx				plx
.958b	20 0c a5	jsr $a50c			jsr 	Multiply8x8 				; calculate -> Z0
.958e	fa		plx				plx
.958f					_VHNoMultiply:
.958f	18		clc				clc
.9590	a5 36		lda $36				lda 	zTemp0
.9592	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9595	85 36		sta $36				sta 	zTemp0
.9597	a5 37		lda $37				lda 	zTemp0+1
.9599	69 00		adc #$00			adc 	#0
.959b	85 37		sta $37				sta 	zTemp0+1
.959d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95a0	20 ff 85	jsr $85ff			jsr 	ScaleByBaseType
.95a3	18		clc				clc
.95a4	b2 3e		lda ($3e)			lda 	(zaTemp)
.95a6	65 36		adc $36				adc 	zTemp0
.95a8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95ab	a0 01		ldy #$01			ldy 	#1
.95ad	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95af	65 37		adc $37				adc 	zTemp0+1
.95b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95b4	7a		ply				ply 								; restore position
.95b5	60		rts				rts
.95b6					_VHBadIndex:
.95b6	a9 17		lda #$17		lda	#23
.95b8	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a442					AbsUnary:
.a442	fa		plx				plx 								; restore stack pos
.a443	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; get a float or int
.a446	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a449	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a44c	29 7f		and #$7f			and 	#$7F
.a44e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a451	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.95bb					AllocUnary:
.95bb	fa		plx				plx 								; restore stack pos
.95bc	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger		; get bytes required.
.95bf	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.95c2	da		phx				phx 								; save X/Y
.95c3	5a		phy				phy
.95c4	8a		txa				txa 								; copy X into Y
.95c5	a8		tay				tay
.95c6	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.95c9	aa		tax				tax
.95ca	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.95cd	20 da 95	jsr $95da			jsr 	AllocateXABytes 			; allocate memory
.95d0	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.95d3	8a		txa				txa
.95d4	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.95d7	7a		ply				ply
.95d8	fa		plx				plx
.95d9	60		rts				rts
.95da					AllocateXABytes:
.95da	5a		phy				phy
.95db	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.95de	84 36		sty $36				sty 	zTemp0
.95e0	5a		phy				phy
.95e1	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.95e4	84 37		sty $37				sty 	zTemp0+1
.95e6	5a		phy				phy
.95e7	18		clc				clc 								; add to low memory pointer
.95e8	6d 0c 07	adc $070c			adc 	lowMemPtr
.95eb	8d 0c 07	sta $070c			sta 	lowMemPtr
.95ee	8a		txa				txa
.95ef	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.95f2	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.95f5	b0 2f		bcs $9626			bcs 	CISSMemory
.95f7	20 18 96	jsr $9618			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.95fa					_ClearMemory:
.95fa	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.95fd	c5 36		cmp $36				cmp 	zTemp0
.95ff	d0 07		bne $9608			bne 	_CMClearNext
.9601	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9604	c5 37		cmp $37				cmp 	zTemp0+1
.9606	f0 0c		beq $9614			beq 	_CMExit
.9608					_CMClearNext:
.9608	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.960a	92 36		sta ($36)			sta 	(zTemp0)
.960c	e6 36		inc $36				inc 	zTemp0
.960e	d0 ea		bne $95fa			bne 	_ClearMemory
.9610	e6 37		inc $37				inc		zTemp0+1
.9612	80 e6		bra $95fa			bra 	_ClearMemory
.9614					_CMExit:
.9614	fa		plx				plx
.9615	68		pla				pla
.9616	7a		ply				ply
.9617	60		rts				rts
.9618					CheckIdentifierStringSpace:
.9618	48		pha				pha
.9619	ad 0d 07	lda $070d			lda 	lowMemPtr+1 				; get low memory pointer
.961c	18		clc				clc
.961d	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.961f	cd 0f 07	cmp $070f			cmp 	StringMemory+1 				; is it >= StringMemory
.9622	b0 02		bcs $9626			bcs 	CISSMemory
.9624	68		pla				pla
.9625	60		rts				rts
.9626					CISSMemory:
.9626	a9 06		lda #$06		lda	#6
.9628	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a452					AscUnary:
.a452	fa		plx				plx 								; restore stack pos
.a453	20 68 98	jsr $9868			jsr 	EvaluateString 				; get a string
.a456	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a458	20 0b 99	jsr $990b			jsr 	NSMSetByte
.a45b	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a45e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a45f					FracUnary:
.a45f	fa		plx				plx 								; restore stack pos
.a460	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; get a float or int
.a463	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a466	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a469	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a46b	f0 04		beq $a471			beq 	_IUZero
.a46d	20 2f a3	jsr $a32f			jsr 	FloatFractionalPart
.a470	60		rts				rts
.a471					_IUZero:
.a471	20 09 99	jsr $9909			jsr 	NSMSetZero
.a474	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a475					IntUnary:
.a475	fa		plx				plx 								; restore stack pos
.a476	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; get a float or int
.a479	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a47c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a47f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a481	f0 03		beq $a486			beq 	_IUExit
.a483	20 92 a3	jsr $a392			jsr 	FloatIntegerPart
.a486					_IUExit:
.a486	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a487					LenUnary:
.a487	fa		plx				plx 								; restore stack pos
.a488	20 68 98	jsr $9868			jsr 	EvaluateString 				; get a string
.a48b	5a		phy				phy
.a48c	a0 00		ldy #$00			ldy 	#0 							; find length
.a48e					_LenFind:
.a48e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a490	f0 06		beq $a498			beq 	_LenExit
.a492	c8		iny				iny
.a493	d0 f9		bne $a48e			bne 	_LenFind
.a495	4c 75 a6	jmp $a675			jmp 	RangeError 					; string > 255
.a498					_LenExit:
.a498	98		tya				tya
.a499	20 0b 99	jsr $990b			jsr 	NSMSetByte
.a49c	7a		ply				ply
.a49d	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a4a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.962b					Unary_Not:
.962b	fa		plx				plx
.962c	20 80 98	jsr $9880			jsr 	EvaluateInteger 			; get integer
.962f	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.9632	20 39 99	jsr $9939			jsr 	NSMIsZero 					; zero mantissa ?
.9635	f0 04		beq $963b			beq 	_NotZero
.9637	20 09 99	jsr $9909			jsr 	NSMSetZero
.963a	60		rts				rts
.963b					_NotZero:
.963b	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.963e					_UNBad:
.963e	4c 7f a6	jmp $a67f			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9641					Unary_Random:
.9641	fa		plx				plx
.9642	20 ba 96	jsr $96ba			jsr 	Random32Bit 				; get a random number
.9645	20 9f 96	jsr $969f			jsr 	URCopyToMantissa  			; put in mantissa
.9648	e8		inx				inx
.9649	20 95 98	jsr $9895			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.964c	ca		dex				dex
.964d	20 0e a1	jsr $a10e			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9650	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer positive
.9653	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9656	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.9659	60		rts				rts
.965a					Unary_Rnd:
.965a	fa		plx				plx
.965b	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; number to use.
.965e	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; closing bracket
.9661	20 39 99	jsr $9939			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9664	f0 2b		beq $9691			beq 	_URCopySeed
.9666	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9669	10 23		bpl $968e			bpl 	_URDontSeed
.966b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.966e	49 17		eor #$17			eor 	#$17
.9670	8d 08 07	sta $0708			sta 	RandomSeed+0
.9673	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9676	49 a5		eor #$a5			eor 	#$A5
.9678	8d 09 07	sta $0709			sta 	RandomSeed+1
.967b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.967e	49 c2		eor #$c2			eor 	#$C2
.9680	8d 0a 07	sta $070a			sta 	RandomSeed+2
.9683	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9686	49 9d		eor #$9d			eor 	#$9D
.9688	8d 0b 07	sta $070b			sta 	RandomSeed+3
.968b	20 ba 96	jsr $96ba			jsr 	Random32Bit
.968e					_URDontSeed:
.968e	20 ba 96	jsr $96ba			jsr 	Random32Bit 				; generate a number.
.9691					_URCopySeed:
.9691	20 9f 96	jsr $969f			jsr 	URCopyToMantissa 			; copy into mantissa
.9694	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9696	8d 28 06	sta $0628			sta 	NSExponent
.9699	a9 08		lda #$08			lda 	#NSTFloat
.969b	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
.969e	60		rts				rts
.969f					URCopyToMantissa:
.969f	ad 08 07	lda $0708			lda 	RandomSeed+0
.96a2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96a5	ad 09 07	lda $0709			lda 	RandomSeed+1
.96a8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96ab	ad 0a 07	lda $070a			lda 	RandomSeed+2
.96ae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96b1	ad 0b 07	lda $070b			lda 	RandomSeed+3
.96b4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.96b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96b9	60		rts				rts
.96ba					Random32Bit:
.96ba	5a		phy				phy
.96bb	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.96bd	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.96c0	d0 03		bne $96c5			bne 	_Random1
.96c2	a8		tay				tay 								; if so do it 256 times
.96c3	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.96c5					_Random1:
.96c5	0a		asl a				asl 	a 							; LSFR RNG
.96c6	2e 09 07	rol $0709			rol 	RandomSeed+1
.96c9	2e 0a 07	rol $070a			rol 	RandomSeed+2
.96cc	2e 0b 07	rol $070b			rol 	RandomSeed+3
.96cf	90 02		bcc $96d3			bcc 	_Random2
.96d1	49 c5		eor #$c5			eor 	#$C5
.96d3					_Random2:
.96d3	88		dey				dey
.96d4	d0 ef		bne $96c5			bne 	_Random1
.96d6	8d 08 07	sta $0708			sta 	RandomSeed+0
.96d9	7a		ply				ply
.96da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a4a1					SgnUnary:
.a4a1	fa		plx				plx 								; restore stack pos
.a4a2	20 5d 98	jsr $985d			jsr 	EvaluateNumber 				; get a float or int
.a4a5	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.a4a8	20 39 99	jsr $9939			jsr 	NSMIsZero 					; if zero
.a4ab	f0 10		beq $a4bd			beq 	_SGZero  					; return Int Zero
.a4ad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a4b0	48		pha				pha
.a4b1	a9 01		lda #$01			lda 	#1 							; set to 1
.a4b3	20 0b 99	jsr $990b			jsr 	NSMSetByte
.a4b6	68		pla				pla
.a4b7	29 80		and #$80			and		#$80 						; copy the sign byte out
.a4b9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a4bc	60		rts				rts
.a4bd	20 09 99	jsr $9909	_SGZero:jsr 	NSMSetZero
.a4c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a4c1					ValUnary:
.a4c1	fa		plx				plx 								; restore stack pos
.a4c2	20 d7 a4	jsr $a4d7			jsr 	ValMainCode 				; do the main val() code
.a4c5	b0 01		bcs $a4c8			bcs 	_VUError 					; couldn't convert
.a4c7	60		rts				rts
.a4c8					_VUError:
.a4c8	4c 7a a6	jmp $a67a			jmp 	TypeError
.a4cb					IsValUnary:
.a4cb	fa		plx				plx 								; restore stack pos
.a4cc	20 d7 a4	jsr $a4d7			jsr 	ValMainCode 				; do the main val() code
.a4cf	b0 03		bcs $a4d4			bcs 	_VUBad
.a4d1	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.a4d4					_VUBad:
.a4d4	4c ca 8d	jmp $8dca			jmp 	ReturnFalse
.a4d7					ValMainCode:
.a4d7	20 68 98	jsr $9868			jsr 	EvaluateString 				; get a string
.a4da	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; check right bracket present
.a4dd	5a		phy				phy
.a4de	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a4e0	f0 17		beq $a4f9			beq 	_VMCFail2
.a4e2	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a4e4	48		pha				pha 								; save first character
.a4e5	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a4e7	d0 01		bne $a4ea			bne 	_VMCStart
.a4e9	c8		iny				iny 								; skip over -
.a4ea					_VMCStart:
.a4ea	38		sec				sec 								; initialise first time round.
.a4eb					_VMCNext:
.a4eb	c8		iny				iny 								; pre-increment
.a4ec	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a4ee	f0 0c		beq $a4fc			beq 	_VMCSuccess 				; successful.
.a4f0	20 0d 93	jsr $930d			jsr 	EncodeNumber 				; send it to the number-builder
.a4f3	90 03		bcc $a4f8			bcc 	_VMCFail 					; if failed, give up.
.a4f5	18		clc				clc 								; next time round, countinue
.a4f6	80 f3		bra $a4eb			bra 	_VMCNext
.a4f8					_VMCFail:
.a4f8	68		pla				pla
.a4f9					_VMCFail2:
.a4f9	7a		ply				ply
.a4fa	38		sec				sec
.a4fb	60		rts				rts
.a4fc					_VMCSuccess:
.a4fc	a9 00		lda #$00			lda 	#0 							; construct final
.a4fe	20 0d 93	jsr $930d			jsr 	EncodeNumber
.a501	68		pla				pla
.a502	c9 2d		cmp #$2d			cmp 	#"-"
.a504	d0 03		bne $a509			bne 	_VMCNotNegative
.a506	20 b5 98	jsr $98b5			jsr		NSMNegate
.a509					_VMCNotNegative:
.a509	7a		ply				ply
.a50a	18		clc				clc
.a50b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.96db					ChrUnary:
.96db	fa		plx				plx 								; restore stack pos
.96dc	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger			; get value
.96df	48		pha				pha
.96e0	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.96e3	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.96e5	20 96 a8	jsr $a896			jsr 	StringTempAllocate
.96e8	68		pla				pla 								; write number to it
.96e9	20 d4 a8	jsr $a8d4			jsr 	StringTempWrite
.96ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.96ed					SpcUnary:
.96ed	fa		plx				plx 								; restore stack pos
.96ee	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger			; get value
.96f1	5a		phy				phy
.96f2	48		pha				pha 								; save count
.96f3	20 96 a8	jsr $a896			jsr 	StringTempAllocate
.96f6	7a		ply				ply 								; to do count in Y
.96f7					_SpcLoop:
.96f7	c0 00		cpy #$00			cpy 	#0
.96f9	f0 08		beq $9703			beq 	_SpcExit
.96fb	a9 20		lda #$20			lda 	#32
.96fd	20 d4 a8	jsr $a8d4			jsr 	StringTempWrite
.9700	88		dey				dey
.9701	80 f4		bra $96f7			bra 	_SPCLoop
.9703					_SpcExit:
.9703	7a		ply				ply
.9704	20 8a a0	jsr $a08a			jsr 	CheckRightBracket
.9707	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9708					Unary_Str:
.9708	fa		plx				plx
.9709	20 5d 98	jsr $985d			jsr 	EvaluateNumber  			; get number
.970c	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; closing bracket
.970f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9711	20 2a 97	jsr $972a			jsr 	ConvertNumberToString 		; do the conversion.
.9714	a9 21		lda #$21			lda		#33 						; create buffer
.9716	20 96 a8	jsr $a896			jsr 	StringTempAllocate 			; allocate memory
.9719	da		phx				phx
.971a	a2 00		ldx #$00			ldx 	#0
.971c					_USCopy:
.971c	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.971f	20 d4 a8	jsr $a8d4			jsr 	StringTempWrite
.9722	e8		inx				inx
.9723	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.9726	d0 f4		bne $971c			bne 	_USCopy
.9728	fa		plx				plx
.9729	60		rts				rts
.972a					ConvertNumberToString:
.972a	5a		phy				phy 								; save code position
.972b	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.972e	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.9731	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9734	10 0a		bpl $9740			bpl 	_CNTSNotNegative
.9736	29 7f		and #$7f			and 	#$7F 						; make +ve
.9738	9d 00 06	sta $0600,x			sta 	NSStatus,x
.973b	a9 2d		lda #$2d			lda 	#"-"
.973d	20 a6 97	jsr $97a6			jsr 	WriteDecimalBuffer
.9740					_CNTSNotNegative:
.9740	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9743	f0 15		beq $975a			beq 	_CNTSNotFloat
.9745	e8		inx				inx 								; round up
.9746	a9 01		lda #$01			lda 	#1
.9748	20 0b 99	jsr $990b			jsr 	NSMSetByte
.974b	ca		dex				dex
.974c	bd 28 06	lda $0628,x			lda		NSExponent,x
.974f	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9752	a9 08		lda #$08			lda 	#NSTFloat
.9754	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9757	20 51 a2	jsr $a251			jsr 	FloatAdd
.975a					_CNTSNotFloat:
.975a	20 88 97	jsr $9788			jsr 	MakePlusTwoString
.975d	20 2f a3	jsr $a32f			jsr 	FloatFractionalPart 		; get the fractional part
.9760	20 f3 a3	jsr $a3f3			jsr 	NSNormalise					; normalise , exit if zero
.9763	f0 21		beq $9786			beq 	_CNTSExit
.9765	a9 2e		lda #$2e			lda 	#"."
.9767	20 a6 97	jsr $97a6			jsr 	WriteDecimalBuffer 			; write decimal place
.976a					_CNTSDecimal:
.976a	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.976d	30 17		bmi $9786			bmi 	_CNTSExit
.976f	e8		inx				inx 								; x 10.0
.9770	a9 0a		lda #$0a			lda 	#10
.9772	20 0b 99	jsr $990b			jsr 	NSMSetByte
.9775	a9 08		lda #$08			lda 	#NSTFloat
.9777	9d 00 06	sta $0600,x			sta 	NSStatus,x
.977a	ca		dex				dex
.977b	20 bc a3	jsr $a3bc			jsr 	FloatMultiply
.977e	20 88 97	jsr $9788			jsr 	MakePlusTwoString
.9781	20 2f a3	jsr $a32f			jsr 	FloatFractionalPart 		; get the fractional part
.9784	80 e4		bra $976a			bra 	_CNTSDecimal 				; keep going.
.9786					_CNTSExit:
.9786	7a		ply				ply
.9787	60		rts				rts
.9788					MakePlusTwoString:
.9788	da		phx				phx
.9789	20 e0 98	jsr $98e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.978c	e8		inx				inx 								; access it
.978d	e8		inx				inx
.978e	20 92 a3	jsr $a392			jsr 	FloatIntegerPart 			; make it an integer
.9791	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9793	20 fb a1	jsr $a1fb			jsr 	ConvertInt32
.9796	a2 00		ldx #$00			ldx	 	#0
.9798					_MPTSCopy:
.9798	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.979b	20 a6 97	jsr $97a6			jsr 	WriteDecimalBuffer
.979e	e8		inx				inx
.979f	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.97a2	d0 f4		bne $9798			bne 	_MPTSCopy
.97a4	fa		plx				plx
.97a5	60		rts				rts
.97a6					WriteDecimalBuffer:
.97a6	da		phx				phx
.97a7	ae 15 07	ldx $0715			ldx 	dbOffset
.97aa	9d 99 08	sta $0899,x			sta 	DecimalBuffer,x
.97ad	9e 9a 08	stz $089a,x			stz 	DecimalBuffer+1,x
.97b0	ee 15 07	inc $0715			inc 	dbOffset
.97b3	fa		plx				plx
.97b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.97b5					Unary_Left:
.97b5	fa		plx				plx
.97b6	18		clc				clc 								; only one parameter
.97b7	20 2c 98	jsr $982c			jsr 	SubstringInitial 			; set up.
.97ba	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.97bd	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97c0	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.97c3	80 2c		bra $97f1			bra 	SubstringMain
.97c5					Unary_Right:
.97c5	fa		plx				plx
.97c6	18		clc				clc 								; only one parameter
.97c7	20 2c 98	jsr $982c			jsr 	SubstringInitial 			; set up.
.97ca	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.97cd	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97d0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.97d3	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.97d6	b0 02		bcs $97da			bcs 	_URNotUnderflow
.97d8	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.97da					_URNotUnderFlow:
.97da	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.97dd	80 12		bra $97f1			bra 	SubStringMain
.97df					Unary_Mid:
.97df	fa		plx				plx
.97e0	38		sec				sec 								; two parameters
.97e1	20 2c 98	jsr $982c			jsr 	SubstringInitial 			; set up.
.97e4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.97e7	f0 05		beq $97ee			beq 	_UMError
.97e9	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.97ec	80 03		bra $97f1			bra 	SubStringMain
.97ee					_UMError:
.97ee	4c 7f a6	jmp $a67f			jmp 	ArgumentError
.97f1					SubStringMain:
.97f1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.97f4	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.97f7	b0 2d		bcs $9826			bcs 	_SSMNull 					; if so, return an empty string.
.97f9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.97fc	f0 28		beq $9826			beq 	_SSMNull 					; return empty string.
.97fe	18		clc				clc 								; add the offset +1 to the address and
.97ff	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9802	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9805	85 36		sta $36				sta 	zTemp0
.9807	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.980a	69 00		adc #$00			adc 	#0
.980c	85 37		sta $37				sta 	zTemp0+1
.980e					_SSMNoCarry:
.980e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9811	20 96 a8	jsr $a896			jsr 	StringTempAllocate 			; allocate that many characters
.9814	5a		phy				phy 								; save Y
.9815	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9817					_SSMCopy:
.9817	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9819	f0 09		beq $9824			beq 	_SSMEString 				; no more to copy
.981b	20 d4 a8	jsr $a8d4			jsr 	StringTempWrite 			; and write it out.
.981e	c8		iny				iny
.981f	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9822	d0 f3		bne $9817			bne 	_SSMCopy
.9824					_SSMEString:
.9824	7a		ply				ply
.9825					_SSMExit:
.9825	60		rts				rts
.9826					_SSMNull:
.9826	a9 00		lda #$00			lda 	#0
.9828	20 96 a8	jsr $a896			jsr 	StringTempAllocate
.982b	60		rts				rts
.982c					SubstringInitial:
.982c	da		phx				phx 								; save initial stack position
.982d	08		php				php 								; save carry on stack indicating 2 parameters
.982e	20 68 98	jsr $9868			jsr 	EvaluateString 				; get a string
.9831	5a		phy				phy 								; calculate length to exponent.
.9832	a0 ff		ldy #$ff			ldy 	#$FF
.9834					_SIFindLength:
.9834	c8		iny				iny
.9835	b1 36		lda ($36),y			lda 	(zTemp0),y
.9837	d0 fb		bne $9834			bne 	_SIFindLength
.9839	98		tya				tya
.983a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.983d	7a		ply				ply
.983e	e8		inx				inx
.983f	20 92 a0	jsr $a092			jsr 	CheckComma 					; comma next
.9842	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; get next parameter
.9845	28		plp				plp 								; is it the last parameter ?
.9846	90 07		bcc $984f			bcc 	_SSIExit 					; if so, exit.
.9848	e8		inx				inx
.9849	20 92 a0	jsr $a092			jsr 	CheckComma 					; comma next
.984c	20 a1 98	jsr $98a1			jsr 	Evaluate8BitInteger 		; get last parameter
.984f					_SSIExit:
.984f	fa		plx				plx
.9850	20 8a a0	jsr $a08a			jsr 	CheckRightBracket 			; check closing bracket
.9853	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9854					EvaluateValue:
.9854	48		pha				pha
.9855	20 5a 91	jsr $915a			jsr		EvaluateExpression 			; expression
.9858	20 6f 92	jsr $926f			jsr 	Dereference					; derefernce it
.985b	68		pla				pla
.985c	60		rts				rts
.985d					EvaluateNumber:
.985d	20 54 98	jsr $9854			jsr 	EvaluateValue 				; get a value
.9860	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9863	29 10		and #$10			and 	#NSBIsString
.9865	d0 16		bne $987d			bne 	HelperTypeError
.9867	60		rts				rts
.9868					EvaluateString:
.9868	20 54 98	jsr $9854			jsr 	EvaluateValue 				; get a value
.986b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.986e	29 10		and #$10			and 	#NSBIsString
.9870	f0 0b		beq $987d			beq 	HelperTypeError
.9872					CopyAddressToTemp0:
.9872	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9875	85 36		sta $36				sta 	zTemp0
.9877	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.987a	85 37		sta $37				sta 	zTemp0+1
.987c	60		rts				rts
.987d					HelperTypeError:
.987d	4c 7a a6	jmp $a67a			jmp 	TypeError
.9880					EvaluateInteger:
.9880	20 5d 98	jsr $985d			jsr 	EvaluateNumber
.9883	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9886	d0 0a		bne $9892			bne 	HelperValueError 			; if not, it's a float.
.9888	60		rts				rts
.9889					EvaluateUnsignedInteger:
.9889	20 80 98	jsr $9880			jsr 	EvaluateInteger 			; check integer is +ve
.988c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.988f	30 01		bmi $9892			bmi 	HelperValueError
.9891	60		rts				rts
.9892					HelperValueError:
.9892	4c 7f a6	jmp $a67f			jmp 	ArgumentError
.9895					Evaluate16BitInteger:
.9895	20 89 98	jsr $9889			jsr	 	EvaluateUnsignedInteger		; get integer
.9898	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.989b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.989e	d0 f2		bne $9892			bne 	HelperValueError
.98a0	60		rts				rts
.98a1					Evaluate8BitInteger:
.98a1	20 89 98	jsr $9889			jsr	 	EvaluateUnsignedInteger 	; get an integer
.98a4	d0 ec		bne $9892			bne 	HelperValueError
.98a6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.98a9	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.98ac	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.98af	d0 e1		bne $9892			bne 	HelperValueError
.98b1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.98b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a50c					Multiply8x8:
.a50c	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a50d	85 36		sta $36			  	sta 	zTemp0
.a50f	86 37		stx $37				stx 	zTemp0+1
.a511	a9 00		lda #$00			lda 	#0
.a513	a2 08		ldx #$08			ldx 	#8
.a515					_M88Loop:
.a515	90 03		bcc $a51a			bcc 	_M88NoAdd
.a517	18		clc				clc
.a518	65 37		adc $37				adc 	zTemp0+1
.a51a					_M88NoAdd:
.a51a	6a		ror a				ror 	a
.a51b	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a51d	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a51e	d0 f5		bne $a515			bne 	_M88Loop
.a520	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a522	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.98b5					NSMNegate:
.98b5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98b8	49 80		eor #$80			eor 	#NSBIsNegative
.98ba	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98bd	60		rts				rts
.98be					NSMNegateMantissa:
.98be	38		sec				sec
.98bf	a9 00		lda #$00			lda 	#0
.98c1	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.98c4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.98c7	a9 00		lda #$00			lda 	#0
.98c9	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.98cc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.98cf	a9 00		lda #$00			lda 	#0
.98d1	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.98d4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.98d7	a9 00		lda #$00			lda 	#0
.98d9	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.98dc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.98df	60		rts				rts
.98e0					NSMShiftUpTwo:
.98e0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.98e3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.98e6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.98e9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.98ec	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.98ef	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.98f2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.98f5	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.98f8	bd 28 06	lda $0628,x			lda 	NSExponent,x
.98fb	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.98fe	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9901	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9904	60		rts				rts
.9905					NSMSetZeroMantissaOnly:
.9905	a9 00		lda #$00			lda 	#0
.9907	80 08		bra $9911			bra 	NSMSetMantissa
.9909					NSMSetZero:
.9909	a9 00		lda #$00			lda 	#0
.990b					NSMSetByte:
.990b	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.990e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9911					NSMSetMantissa:
.9911	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9914	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9917	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.991a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.991d	60		rts				rts
.991e					NSMShiftLeft:
.991e	18		clc				clc
.991f					NSMRotateLeft:
.991f	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9922	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9925	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9928	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.992b	60		rts				rts
.992c					NSMShiftRight:
.992c	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.992f	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9932	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9935	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9938	60		rts				rts
.9939					NSMIsZero:
.9939	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.993c	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.993f	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9942	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9945	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a523					Assemble_ora:
.a523	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a526	01					.byte $01
.a527					Assemble_and:
.a527	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a52a	21					.byte $21
.a52b					Assemble_eor:
.a52b	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a52e	41					.byte $41
.a52f					Assemble_adc:
.a52f	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a532	61					.byte $61
.a533					Assemble_sta:
.a533	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a536	81					.byte $81
.a537					Assemble_lda:
.a537	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a53a	a1					.byte $a1
.a53b					Assemble_cmp:
.a53b	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a53e	c1					.byte $c1
.a53f					Assemble_sbc:
.a53f	20 fe 81	jsr $81fe		jsr	AssembleGroup1
>a542	e1					.byte $e1
.a543					Assemble_asl:
.a543	20 05 82	jsr $8205		jsr	AssembleGroup2
>a546	02					.byte $02
>a547	75					.byte $75
.a548					Assemble_rol:
.a548	20 05 82	jsr $8205		jsr	AssembleGroup2
>a54b	22					.byte $22
>a54c	75					.byte $75
.a54d					Assemble_lsr:
.a54d	20 05 82	jsr $8205		jsr	AssembleGroup2
>a550	42					.byte $42
>a551	75					.byte $75
.a552					Assemble_ror:
.a552	20 05 82	jsr $8205		jsr	AssembleGroup2
>a555	62					.byte $62
>a556	75					.byte $75
.a557					Assemble_stx:
.a557	20 05 82	jsr $8205		jsr	AssembleGroup2
>a55a	82					.byte $82
>a55b	50					.byte $50
.a55c					Assemble_ldx:
.a55c	20 05 82	jsr $8205		jsr	AssembleGroup2
>a55f	a2					.byte $a2
>a560	d0					.byte $d0
.a561					Assemble_dec:
.a561	20 05 82	jsr $8205		jsr	AssembleGroup2
>a564	c2					.byte $c2
>a565	55					.byte $55
.a566					Assemble_inc:
.a566	20 05 82	jsr $8205		jsr	AssembleGroup2
>a569	e2					.byte $e2
>a56a	55					.byte $55
.a56b					Assemble_stz:
.a56b	20 05 82	jsr $8205		jsr	AssembleGroup2
>a56e	60					.byte $60
>a56f	44					.byte $44
.a570					Assemble_bit:
.a570	20 05 82	jsr $8205		jsr	AssembleGroup2
>a573	20					.byte $20
>a574	55					.byte $55
.a575					Assemble_sty:
.a575	20 05 82	jsr $8205		jsr	AssembleGroup2
>a578	80					.byte $80
>a579	54					.byte $54
.a57a					Assemble_ldy:
.a57a	20 05 82	jsr $8205		jsr	AssembleGroup2
>a57d	a0					.byte $a0
>a57e	d5					.byte $d5
.a57f					Assemble_cpy:
.a57f	20 05 82	jsr $8205		jsr	AssembleGroup2
>a582	c0					.byte $c0
>a583	d4					.byte $d4
.a584					Assemble_cpx:
.a584	20 05 82	jsr $8205		jsr	AssembleGroup2
>a587	e0					.byte $e0
>a588	d0					.byte $d0
.a589					Assemble_tsb:
.a589	20 05 82	jsr $8205		jsr	AssembleGroup2
>a58c	00					.byte $00
>a58d	50					.byte $50
.a58e					Assemble_trb:
.a58e	20 05 82	jsr $8205		jsr	AssembleGroup2
>a591	10					.byte $10
>a592	50					.byte $50
.a593					Assemble_jsr:
.a593	20 05 82	jsr $8205		jsr	AssembleGroup2
>a596	14					.byte $14
>a597	10					.byte $10
.a598					Assemble_jmp:
.a598	20 05 82	jsr $8205		jsr	AssembleGroup2
>a59b	40					.byte $40
>a59c	10					.byte $10
.a59d					Assemble_bpl:
.a59d	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5a0	10					.byte $10
.a5a1					Assemble_bmi:
.a5a1	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5a4	30					.byte $30
.a5a5					Assemble_bvc:
.a5a5	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5a8	50					.byte $50
.a5a9					Assemble_bvs:
.a5a9	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5ac	70					.byte $70
.a5ad					Assemble_bcc:
.a5ad	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5b0	90					.byte $90
.a5b1					Assemble_bcs:
.a5b1	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5b4	b0					.byte $b0
.a5b5					Assemble_bne:
.a5b5	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5b8	d0					.byte $d0
.a5b9					Assemble_beq:
.a5b9	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5bc	f0					.byte $f0
.a5bd					Assemble_bra:
.a5bd	20 56 82	jsr $8256		jsr	AssembleGroup3
>a5c0	80					.byte $80
.a5c1					Assemble_brk:
.a5c1	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5c4	00					.byte $00
.a5c5					Assemble_php:
.a5c5	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5c8	08					.byte $08
.a5c9					Assemble_clc:
.a5c9	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5cc	18					.byte $18
.a5cd					Assemble_plp:
.a5cd	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5d0	28					.byte $28
.a5d1					Assemble_sec:
.a5d1	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5d4	38					.byte $38
.a5d5					Assemble_rti:
.a5d5	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5d8	40					.byte $40
.a5d9					Assemble_pha:
.a5d9	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5dc	48					.byte $48
.a5dd					Assemble_cli:
.a5dd	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5e0	58					.byte $58
.a5e1					Assemble_phy:
.a5e1	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5e4	5a					.byte $5a
.a5e5					Assemble_rts:
.a5e5	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5e8	60					.byte $60
.a5e9					Assemble_pla:
.a5e9	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5ec	68					.byte $68
.a5ed					Assemble_sei:
.a5ed	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5f0	78					.byte $78
.a5f1					Assemble_ply:
.a5f1	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5f4	7a					.byte $7a
.a5f5					Assemble_dey:
.a5f5	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5f8	88					.byte $88
.a5f9					Assemble_txa:
.a5f9	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a5fc	8a					.byte $8a
.a5fd					Assemble_tya:
.a5fd	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a600	98					.byte $98
.a601					Assemble_txs:
.a601	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a604	9a					.byte $9a
.a605					Assemble_tay:
.a605	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a608	a8					.byte $a8
.a609					Assemble_tax:
.a609	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a60c	aa					.byte $aa
.a60d					Assemble_clv:
.a60d	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a610	b8					.byte $b8
.a611					Assemble_tsx:
.a611	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a614	ba					.byte $ba
.a615					Assemble_iny:
.a615	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a618	c8					.byte $c8
.a619					Assemble_dex:
.a619	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a61c	ca					.byte $ca
.a61d					Assemble_cld:
.a61d	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a620	d8					.byte $d8
.a621					Assemble_phx:
.a621	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a624	da					.byte $da
.a625					Assemble_stp:
.a625	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a628	db					.byte $db
.a629					Assemble_inx:
.a629	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a62c	e8					.byte $e8
.a62d					Assemble_nop:
.a62d	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a630	ea					.byte $ea
.a631					Assemble_sed:
.a631	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a634	f8					.byte $f8
.a635					Assemble_plx:
.a635	20 8c 82	jsr $828c		jsr	AssembleGroup4
>a638	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a639					DecimalScalarTable:
>a639	66 66 66 66				.dword $66666666 ; 0.1
>a63d	de					.byte $de
>a63e	1f 85 eb 51				.dword $51eb851f ; 0.01
>a642	db					.byte $db
>a643	4c 37 89 41				.dword $4189374c ; 0.001
>a647	d8					.byte $d8
>a648	ac 8b db 68				.dword $68db8bac ; 0.0001
>a64c	d4					.byte $d4
>a64d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a651	d1					.byte $d1
>a652	83 de 1b 43				.dword $431bde83 ; 1e-06
>a656	ce					.byte $ce
>a657	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a65b	ca					.byte $ca
>a65c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a660	c7					.byte $c7
>a661	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a665	c4					.byte $c4
>a666	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a66a	c0					.byte $c0
>a66b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a66f	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a670					SyntaxError:
.a670	a9 02		lda #$02		lda	#2
.a672	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a675					RangeError:
.a675	a9 04		lda #$04		lda	#4
.a677	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a67a					TypeError:
.a67a	a9 05		lda #$05		lda	#5
.a67c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a67f					ArgumentError:
.a67f	a9 07		lda #$07		lda	#7
.a681	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a684					NotDoneError:
.a684	a9 0c		lda #$0c		lda	#12
.a686	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a689					ErrorText:
>a689	42 72 65 61 6b 00			.text	"Break",0
>a68f	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a697	72 72 6f 72 00
>a69c	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a6a4	20 62 79 20 7a 65 72 6f 00
>a6ad	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a6b5	61 6e 67 65 00
>a6ba	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a6c2	6d 61 74 63 68 00
>a6c8	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a6d0	65 6d 6f 72 79 00
>a6d6	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a6de	61 72 67 75 6d 65 6e 74 00
>a6e7	53 74 6f 70 00				.text	"Stop",0
>a6ec	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a6f4	6f 6f 20 6c 6f 6e 67 00
>a6fc	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a704	6e 20 66 61 69 6c 65 64 00
>a70d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a715	61 74 61 00
>a719	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a721	65 6e 74 65 64 00
>a727	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a72f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a73b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a743	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a750	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a758	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a765	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a76d	68 6f 75 74 20 57 68 69 6c 65 00
>a778	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a780	68 6f 75 74 20 46 6f 72 00
>a789	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a791	61 63 6b 20 66 75 6c 6c 00
>a79a	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a7a2	75 63 74 75 72 65 00
>a7a9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a7b1	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a7be	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a7c6	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a7d4	41 72 72 61 79 20 73 69			.text	"Array size",0
>a7dc	7a 65 00
>a7df	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a7e7	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a7ef	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 272."
>a7f7	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a807	32 32 2e 20 42 75 69 6c 64 20 32 37 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9946					StackPushByte:
.9946	48		pha				pha 								; save byte
.9947	a5 34		lda $34				lda 	BasicStack
.9949	d0 09		bne $9954			bne 	_SPBNoBorrow
.994b	c6 35		dec $35				dec 	BasicStack+1
.994d	48		pha				pha
.994e	a5 35		lda $35				lda 	BasicStack+1
.9950	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9952	90 06		bcc $995a			bcc 	_SPBMemory
.9954					_SPBNoBorrow:
.9954	c6 34		dec $34				dec 	BasicStack
.9956	68		pla				pla 								; get back and write
.9957	92 34		sta ($34)			sta 	(BasicStack)
.9959	60		rts				rts
.995a					_SPBMemory:
.995a	a9 12		lda #$12		lda	#18
.995c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.995f					StackPopByte:
.995f	b2 34		lda ($34)			lda 	(BasicStack)
.9961	e6 34		inc $34				inc 	BasicStack
.9963	d0 02		bne $9967			bne 	_SPBNoCarry
.9965	e6 35		inc $35				inc 	BasicStack+1
.9967					_SPBNoCarry:
.9967	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9968					StackOpen:
.9968	48		pha				pha 								; save frame byte
.9969	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.996b	0a		asl a				asl 	a 							; claim twice this for storage
.996c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.996e	38		sec				sec 								; so basically subtracting from
.996f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9971	85 34		sta $34				sta 	basicStack
.9973	b0 08		bcs $997d			bcs 	_SONoBorrow
.9975	c6 35		dec $35				dec 	basicStack+1
.9977	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9979	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.997b	90 04		bcc $9981			bcc 	_SOMemory
.997d					_SONoBorrow:
.997d	68		pla				pla 								; get marker back and write at TOS
.997e	92 34		sta ($34)			sta 	(basicStack)
.9980	60		rts				rts
.9981					_SOMemory:
.9981	a9 12		lda #$12		lda	#18
.9983	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9986					StackClose:
.9986	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9988	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.998a	0a		asl a				asl 	a 							; claim twice this.
.998b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.998d	85 34		sta $34				sta 	basicStack
.998f	90 02		bcc $9993			bcc 	_SCExit
.9991	e6 35		inc $35				inc 	basicStack+1
.9993					_SCExit:
.9993	60		rts				rts
.9994					StackCheckFrame:
.9994	48		pha				pha
.9995					_StackRemoveLocals:
.9995	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9997	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9999	b0 05		bcs $99a0			bcs 	_SCNoLocal
.999b	20 31 a0	jsr $a031			jsr 	LocalPopValue
.999e	80 f5		bra $9995			bra 	_StackRemoveLocals
.99a0					_SCNoLocal:
.99a0	68		pla				pla
.99a1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.99a3	29 f0		and #$f0			and 	#$F0 						; check type bits
.99a5	d0 01		bne $99a8			bne 	_SCFError 					; different, we have structures mixed up
.99a7	60		rts				rts
.99a8					_SCFError:
.99a8	8a		txa				txa 								; report error X
.99a9	4c 51 8d	jmp $8d51			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.99ac					STKSaveCodePosition:
.99ac	5a		phy				phy
.99ad	98		tya				tya 								; save Y
.99ae	a0 05		ldy #$05			ldy 	#5
.99b0	91 34		sta ($34),y			sta 	(basicStack),y
.99b2	88		dey				dey 								; save Code Pointer
.99b3					_STKSaveLoop:
.99b3	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.99b6	91 34		sta ($34),y			sta 	(basicStack),y
.99b8	88		dey				dey
.99b9	d0 f8		bne $99b3			bne 	_STKSaveLoop
.99bb	7a		ply				ply
.99bc	60		rts				rts
.99bd					STKLoadCodePosition:
.99bd	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.99bf					_STKLoadLoop:
.99bf	b1 34		lda ($34),y			lda 	(basicStack),y
.99c1	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.99c4	c8		iny				iny
.99c5	c0 05		cpy #$05			cpy 	#5
.99c7	d0 f6		bne $99bf			bne 	_STKLoadLoop
.99c9	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.99cb	a8		tay				tay
.99cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.99cd					StackReset:
.99cd	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.99cf	85 34		sta $34				sta 	0+basicStack
.99d1	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.99d3	85 35		sta $35				sta 	1+basicStack
.99d5	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.99d7	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.99d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a815					StringConcrete:
.a815	5a		phy				phy 								; save position on stack
.a816	20 18 96	jsr $9618			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a819	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a81c	85 38		sta $38				sta 	zTemp1
.a81e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a821	85 39		sta $39				sta 	zTemp1+1
.a823	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a825					_SALength:
.a825	c8		iny				iny
.a826	b1 38		lda ($38),y			lda 	(zTemp1),y
.a828	d0 fb		bne $a825			bne 	_SALength
.a82a	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a82c	b0 3f		bcs $a86d			bcs 	_SALengthError
.a82e	98		tya				tya 				 				; length of the new string
.a82f	18		clc				clc
.a830	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a832	90 02		bcc $a836			bcc 	_SAHaveLength
.a834	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a836					_SAHaveLength:
.a836	48		pha				pha 								; save length.
.a837	38		sec				sec
.a838	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a83a	6d 0e 07	adc $070e			adc 	StringMemory
.a83d	8d 0e 07	sta $070e			sta 	StringMemory
.a840	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a842	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a845	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a847	6d 0f 07	adc $070f			adc 	StringMemory+1
.a84a	8d 0f 07	sta $070f			sta 	StringMemory+1
.a84d	85 3b		sta $3b				sta 	zTemp2+1
.a84f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a852	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a853	38		sec				sec
.a854	e9 03		sbc #$03			sbc 	#3
.a856	92 3a		sta ($3a)			sta 	(zTemp2)
.a858	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a85a	a0 01		ldy #$01			ldy 	#1
.a85c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a85e					_SACopyNewString:
.a85e	a0 00		ldy #$00			ldy 	#0
.a860					_SACopyNSLoop:
.a860	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a862	c8		iny				iny 								; write two on in string storage
.a863	c8		iny				iny
.a864	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a866	88		dey				dey 								; this makes it one one.
.a867	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a869	d0 f5		bne $a860			bne 	_SACopyNSLoop
.a86b	7a		ply				ply
.a86c	60		rts				rts
.a86d					_SALengthError:
.a86d	a9 09		lda #$09		lda	#9
.a86f	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a872					StringSystemInitialise:
.a872	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a874	8d 0e 07	sta $070e			sta 	0+StringMemory
.a877	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a879	8d 0f 07	sta $070f			sta 	1+StringMemory
.a87c	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a87f	60		rts				rts
.a880					StringSpaceInitialise:
.a880	20 18 96	jsr $9618			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a883	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a885	8d 10 07	sta $0710			sta 	StringInitialised
.a888	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a88b	8d 11 07	sta $0711			sta 	StringTempPointer
.a88e	ad 0f 07	lda $070f			lda 	StringMemory+1
.a891	3a		dec a				dec 	a
.a892	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a895	60		rts				rts
.a896					StringTempAllocate:
.a896	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a898	b0 35		bcs $a8cf			bcs 	_STALength
.a89a	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a89d	30 05		bmi $a8a4			bmi 	_STAAllocate
.a89f	48		pha				pha 								; save value to subtract.
.a8a0	20 80 a8	jsr $a880			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a8a3	68		pla				pla 								; restore it
.a8a4					_STAAllocate:
.a8a4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a8a6	18		clc				clc  								; deliberate allows one more
.a8a7	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a8aa	8d 11 07	sta $0711			sta 	StringTempPointer
.a8ad	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a8b0	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a8b2	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a8b5	69 ff		adc #$ff			adc 	#$FF
.a8b7	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a8ba	85 3d		sta $3d				sta 	zsTemp+1
.a8bc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a8bf	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a8c2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a8c5	a9 10		lda #$10			lda 	#NSTString
.a8c7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a8ca	a9 00		lda #$00			lda 	#0 							; clear the target string
.a8cc	92 3c		sta ($3c)			sta 	(zsTemp)
.a8ce	60		rts				rts
.a8cf					_STALength:
.a8cf	a9 09		lda #$09		lda	#9
.a8d1	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a8d4					StringTempWrite:
.a8d4	48		pha				pha
.a8d5	92 3c		sta ($3c)			sta 	(zsTemp)
.a8d7	e6 3c		inc $3c				inc 	zsTemp
.a8d9	d0 02		bne $a8dd			bne 	_STWNoCarry
.a8db	e6 3d		inc $3d				inc 	zsTemp+1
.a8dd					_STWNoCarry:
.a8dd	a9 00		lda #$00			lda 	#0
.a8df	92 3c		sta ($3c)			sta 	(zsTemp)
.a8e1	68		pla				pla
.a8e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.99da					BackloadProgram:
.99da	a2 ff		ldx #$ff			ldx 	#$FF
.99dc	20 04 9a	jsr $9a04			jsr 	BLReadByte
.99df	30 1f		bmi $9a00			bmi 	_BPExit
.99e1					_BPCopy:
.99e1	e8		inx				inx  								; copy byte in
.99e2	9d 26 08	sta $0826,x			sta 	lineBuffer,x
.99e5	9e 27 08	stz $0827,x			stz 	lineBuffer+1,x
.99e8	20 04 9a	jsr $9a04			jsr 	BLReadByte 					; read next byte
.99eb	30 0a		bmi $99f7			bmi 	_BPEndLine 					; -ve = EOL
.99ed	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.99ef	d0 02		bne $99f3			bne 	_BPNotTab
.99f1	a9 20		lda #$20			lda 	#' '
.99f3					_BPNotTab:
.99f3	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.99f5	b0 ea		bcs $99e1			bcs 	_BPCopy
.99f7					_BPEndLine:
.99f7	20 2d 9d	jsr $9d2d			jsr 	TokeniseLine 				; tokenise the line.
.99fa	38		sec				sec 								; append not insert
.99fb	20 5e a9	jsr $a95e			jsr 	MemoryInsertLine 			; append to current program
.99fe	80 da		bra $99da			bra 	BackloadProgram
.9a00					_BPExit:
.9a00	20 04 85	jsr $8504			jsr 	ClearCommand 				; clear variables etc.
.9a03	60		rts				rts
.9a04					BLReadByte:
.9a04					_BLLoad:
.9a04	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9a07	ee 05 9a	inc $9a05			inc 	_BLLoad+1
.9a0a	d0 03		bne $9a0f			bne 	_BLNoCarry
.9a0c	ee 06 9a	inc $9a06			inc 	_BLLoad+2
.9a0f					_BLNoCarry:
.9a0f	c9 00		cmp #$00			cmp 	#0
.9a11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9a12					TokeniseSearchTable:
.9a12	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9a14	85 36		sta $36				sta 	zTemp0
.9a16	a0 00		ldy #$00			ldy 	#0
.9a18	a9 80		lda #$80			lda 	#$80 						; token #
.9a1a	85 38		sta $38				sta 	zTemp1
.9a1c					_TSTLoop:
.9a1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9a1e	30 49		bmi $9a69			bmi 	_TSTFail 					; -ve = end of table
.9a20	f0 2e		beq $9a50			beq 	_TSTNext 					; zero, check next it's a dummy
.9a22	c8		iny				iny 								; get the hash
.9a23	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a25	88		dey				dey
.9a26	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9a29	d0 25		bne $9a50			bne 	_TSTNext
.9a2b	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9a2e	38		sec				sec
.9a2f	ed 00 07	sbc $0700			sbc 	identStart
.9a32	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9a34	d0 1a		bne $9a50			bne 	_TSTNext
.9a36	5a		phy				phy 								; save Y , we might fail
.9a37	c8		iny				iny 								; point to text
.9a38	c8		iny				iny
.9a39	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9a3c					_TSTCompareName:
.9a3c	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; compare text.
.9a3f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9a41	d0 0c		bne $9a4f			bne 	_TSTNextPullY 				; fail, pullY and do next
.9a43	e8		inx				inx
.9a44	c8		iny				iny
.9a45	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9a48	d0 f2		bne $9a3c			bne 	_TSTCompareName
.9a4a	7a		ply				ply 								; throw Y
.9a4b	a5 38		lda $38				lda 	zTemp1 						; get token #
.9a4d	38		sec				sec 								; return with CS = passed.
.9a4e	60		rts				rts
.9a4f					_TSTNextPullY:
.9a4f	7a		ply				ply 								; restore current, fall through.
.9a50					_TSTNext:
.9a50	e6 38		inc $38				inc 	zTemp1 						; token counter
.9a52	98		tya				tya
.9a53	18		clc				clc
.9a54	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9a56	1a		inc a				inc 	a 							; +1
.9a57	1a		inc a				inc 	a 							; +2
.9a58	a8		tay				tay
.9a59	10 c1		bpl $9a1c			bpl 	_TSTLoop 					; if Y < $80 loop back
.9a5b	98		tya				tya 								; add Y to zTemp0 and reset Y
.9a5c	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9a5e	18		clc				clc  								; but have tables > 255 bytes
.9a5f	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9a61	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9a63	90 b7		bcc $9a1c			bcc 	_TSTLoop
.9a65	e6 37		inc $37				inc 	zTemp0+1
.9a67	80 b3		bra $9a1c			bra 	_TSTLoop
.9a69					_TSTFail:
.9a69	18		clc				clc
.9a6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9a6b					KeywordSet0:
>9a6b	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a6d	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a6f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a71	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9a77	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9a7f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9a85	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9a8c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9a93	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9a9a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9aa0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9aa8	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9ab0	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9ab6	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9abd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9ac3	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9acb	28
>9acc	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9ad4	28
>9ad5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9adb	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9ae1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9ae7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9aee	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9af4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9afa	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9aff	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9b03	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9b09	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9b11	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9b18	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9b1f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9b27	43
>9b28	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9b2e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9b34	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9b3b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9b41	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9b47	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9b4c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9b52	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9b57	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9b5f	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9b65	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9b6c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9b72	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9b77	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9b7e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9b85	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9b8b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9b90	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9b98	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9b9c	ff					.text	$FF
.9b9d					KeywordSet1:
>9b9d	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b9f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ba1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ba3	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9bab	4c 45
>9bad	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9bb5	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9bbc	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9bc1	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9bc7	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9bcc	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9bd4	45
>9bd5	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9bda	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9be0	ff					.text	$FF
.9be1					KeywordSet2:
>9be1	00 65					.text	0,$65,""               ; $80 !0:EOF
>9be3	00 58					.text	0,$58,""               ; $81 !1:SH1
>9be5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9be7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9bec	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9bf1	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9bf6	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9bfb	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9c00	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9c05	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9c0a	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9c0f	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9c14	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9c19	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9c1e	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9c23	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9c28	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9c2d	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9c32	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9c37	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9c3c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9c41	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9c46	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9c4b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9c50	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9c55	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9c5a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9c5f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9c64	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9c69	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9c6e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9c73	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9c78	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9c7d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9c82	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9c87	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9c8c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9c91	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9c96	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9c9b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9ca0	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9ca5	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9caa	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9caf	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9cb4	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9cb9	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9cbe	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9cc3	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9cc8	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9ccd	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9cd2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9cd7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9cdc	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9ce1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9ce6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9ceb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9cf0	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>9cf5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>9cfa	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>9cff	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>9d04	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>9d09	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>9d0e	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>9d13	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>9d18	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>9d1d	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>9d22	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>9d27	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>9d2c	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9d2d					TokeniseLine:
.9d2d	20 b5 9e	jsr $9eb5			jsr 	FixLineBufferCase 			; fix line case
.9d30	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9d32	8d 26 07	sta $0726			sta 	tokenOffset
.9d35	9c 27 07	stz $0727			stz 	tokenLineNumber
.9d38	9c 28 07	stz $0728			stz 	tokenLineNumber+1
.9d3b	a2 ff		ldx #$ff			ldx 	#$FF
.9d3d					_TKFindFirst:
.9d3d	e8		inx				inx
.9d3e	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9d41	f0 79		beq $9dbc			beq 	_TKExit
.9d43	c9 20		cmp #$20			cmp 	#' '
.9d45	90 f6		bcc $9d3d			bcc 	_TKFindFirst
.9d47	c9 30		cmp #$30			cmp 	#'0'
.9d49	90 07		bcc $9d52			bcc 	_TKNoLineNumber
.9d4b	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d4d	b0 03		bcs $9d52			bcs 	_TKNoLineNumber
.9d4f	20 df 9e	jsr $9edf			jsr 	TokeniseExtractLineNumber
.9d52					_TKNoLineNumber:
.9d52					_TKTokeniseLoop:
.9d52	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9d55	f0 65		beq $9dbc			beq 	_TKExit
.9d57	e8		inx				inx
.9d58	c9 20		cmp #$20			cmp 	#' '
.9d5a	f0 f6		beq $9d52			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9d5c	ca		dex				dex 								; undo last get, A contains character, X is position.
.9d5d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9d5f	f0 61		beq $9dc2			beq 	_TKTokeniseIdentifier
.9d61	c9 41		cmp #$41			cmp 	#'A'
.9d63	90 04		bcc $9d69			bcc 	_TKTokenisePunctuation
.9d65	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9d67	90 59		bcc $9dc2			bcc 	_TKTokeniseIdentifier
.9d69					_TKTokenisePunctuation:
.9d69	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9d6b	f0 27		beq $9d94			beq 	_TKString
.9d6d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9d6f	f0 28		beq $9d99			beq 	_TKHexConstant
.9d71	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9d73	f0 29		beq $9d9e			beq 	_TKCheckDouble
.9d75	c9 3e		cmp #$3e			cmp 	#'>'
.9d77	f0 25		beq $9d9e			beq 	_TKCheckDouble
.9d79					_TKStandardPunctuation:
.9d79	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get it back.
.9d7c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9d7e	90 0e		bcc $9d8e			bcc 	_TKNoShift
.9d80	48		pha				pha 								; save
.9d81	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9d83	85 36		sta $36				sta 	zTemp0
.9d85	68		pla				pla
.9d86	29 20		and #$20			and 	#32 						; bit 5
.9d88	4a		lsr a				lsr 	a 							; shift into bit 3
.9d89	4a		lsr a				lsr 	a
.9d8a	05 36		ora $36				ora 	zTemp0
.9d8c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9d8e					_TKNoShift:
.9d8e	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte 			; write the punctuation character
.9d91	e8		inx				inx 								; consume the character
.9d92	80 be		bra $9d52			bra 	_TKTokeniseLoop 			; and loop round again.
.9d94					_TKString:
.9d94	20 44 9e	jsr $9e44			jsr 	TokeniseString
.9d97	80 b9		bra $9d52			bra 	_TKTokeniseLoop
.9d99					_TKHexConstant:
.9d99	20 7f 9e	jsr $9e7f			jsr 	TokeniseHexConstant
.9d9c	80 b4		bra $9d52			bra 	_TKTokeniseLoop
.9d9e					_TKCheckDouble:
.9d9e	bd 27 08	lda $0827,x			lda 	lineBuffer+1,x 				; get next character
.9da1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9da3	90 d4		bcc $9d79			bcc 	_TKStandardPunctuation
.9da5	c9 3f		cmp #$3f			cmp 	#'>'+1
.9da7	b0 d0		bcs $9d79			bcs 	_TKStandardPunctuation
.9da9	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9dac	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9dae	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9daf	7d 27 08	adc $0827,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9db2	38		sec				sec
.9db3	e9 3c		sbc #$3c			sbc 	#'<'
.9db5	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9db8	e8		inx				inx 								; consume both
.9db9	e8		inx				inx
.9dba	80 96		bra $9d52			bra 	_TKTokeniseLoop
.9dbc	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9dbe	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9dc1	60		rts				rts
.9dc2					_TKTokeniseIdentifier:
.9dc2	8e 00 07	stx $0700			stx 	identStart 					; save start
.9dc5	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9dc8					_TKCheckLoop:
.9dc8	e8		inx				inx 								; look at next, we know first is identifier.
.9dc9	bd 26 08	lda $0826,x			lda  	lineBuffer,x
.9dcc	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9dce	f0 f8		beq $9dc8			beq 	_TKCheckLoop
.9dd0	c9 30		cmp #$30			cmp	 	#"0"
.9dd2	90 0c		bcc $9de0			bcc 	_TKEndIdentifier
.9dd4	c9 3a		cmp #$3a			cmp 	#"9"+1
.9dd6	90 f0		bcc $9dc8			bcc 	_TKCheckLoop
.9dd8	c9 41		cmp #$41			cmp	 	#"A"
.9dda	90 04		bcc $9de0			bcc 	_TKEndIdentifier
.9ddc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9dde	90 e8		bcc $9dc8			bcc 	_TKCheckLoop
.9de0					_TKEndIdentifier:
.9de0	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9de3	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9de5	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9de7	f0 06		beq $9def			beq 	_TKHasTypeCharacter
.9de9	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9deb	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9ded	d0 07		bne $9df6			bne 	_TKNoTypeCharacter
.9def					_TKHasTypeCharacter:
.9def	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9df2	e8		inx				inx 								; read next
.9df3	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9df6					_TKNoTypeCharacter:
.9df6	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9df8	d0 09		bne $9e03			bne 	_TKNoArray
.9dfa	e8		inx				inx 								; skip the (
.9dfb	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9dfe	09 04		ora #$04			ora 	#$04
.9e00	8d 04 07	sta $0704			sta 	identTypeByte
.9e03					_TKNoArray:
.9e03	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9e06	20 a0 9e	jsr $9ea0			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9e09	a0 9a		ldy #$9a			ldy 	#(KeywordSet0) >> 8
.9e0b	a9 6b		lda #$6b			lda 	#(KeywordSet0) & $FF
.9e0d	20 12 9a	jsr $9a12			jsr 	TokeniseSearchTable
.9e10	a2 00		ldx #$00			ldx 	#0
.9e12	b0 1f		bcs $9e33			bcs 	_TKFoundToken
.9e14	a0 9b		ldy #$9b			ldy 	#(KeywordSet1) >> 8
.9e16	a9 9d		lda #$9d			lda 	#(KeywordSet1) & $FF
.9e18	20 12 9a	jsr $9a12			jsr 	TokeniseSearchTable
.9e1b	a2 81		ldx #$81			ldx 	#$81
.9e1d	b0 14		bcs $9e33			bcs 	_TKFoundToken
.9e1f	a0 9b		ldy #$9b			ldy 	#(KeywordSet2) >> 8
.9e21	a9 e1		lda #$e1			lda 	#(KeywordSet2) & $FF
.9e23	20 12 9a	jsr $9a12			jsr 	TokeniseSearchTable
.9e26	a2 82		ldx #$82			ldx 	#$82
.9e28	b0 09		bcs $9e33			bcs 	_TKFoundToken
.9e2a	20 30 9f	jsr $9f30			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9e2d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9e30	4c 52 9d	jmp $9d52			jmp 	_TKTokeniseLoop 			; and go round again.
.9e33					_TKFoundToken:
.9e33	48		pha				pha 								; save token
.9e34	8a		txa				txa 								; shift in X, is there one ?
.9e35	f0 03		beq $9e3a			beq 	_TKNoTShift
.9e37	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte 			; if so, write it out
.9e3a					_TKNoTShift:
.9e3a	68		pla				pla 								; restore and write token
.9e3b	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e3e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9e41	4c 52 9d	jmp $9d52			jmp 	_TKTokeniseLoop 			; and go round again.
.9e44					TokeniseString:
.9e44	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9e46	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e49	e8		inx				inx									; start of quoted string.
.9e4a	da		phx				phx 								; push start of string on top
.9e4b	ca		dex				dex
.9e4c					_TSFindEnd:
.9e4c	e8		inx				inx
.9e4d	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character
.9e50	f0 04		beq $9e56			beq 	_TSEndOfString
.9e52	c9 22		cmp #$22			cmp 	#'"'
.9e54	d0 f6		bne $9e4c			bne 	_TSFindEnd
.9e56					_TSEndOfString:
.9e56	7a		ply				ply  								; so now Y is first character, X is character after end.
.9e57	48		pha				pha 								; save terminating character
.9e58	20 60 9e	jsr $9e60			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9e5b	68		pla				pla 								; terminating character
.9e5c	f0 01		beq $9e5f			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9e5e	e8		inx				inx
.9e5f					_TSNotQuote:
.9e5f	60		rts				rts
.9e60					TOWriteBlockXY:
.9e60	86 36		stx $36				stx 	zTemp0 						; write end character
.9e62	98		tya				tya
.9e63	49 ff		eor #$ff			eor 	#$FF
.9e65	38		sec				sec
.9e66	65 36		adc $36				adc 	zTemp0
.9e68	1a		inc a				inc 	a 							; one extra for NULL
.9e69	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e6c					_TOBlockLoop:
.9e6c	c4 36		cpy $36				cpy 	zTemp0
.9e6e	f0 09		beq $9e79			beq 	_TOBlockExit
.9e70	b9 26 08	lda $0826,y			lda 	lineBuffer,y
.9e73	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e76	c8		iny				iny
.9e77	80 f3		bra $9e6c			bra 	_TOBlockLoop
.9e79					_TOBlockExit:
.9e79	a9 00		lda #$00			lda 	#0
.9e7b	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e7e	60		rts				rts
.9e7f					TokeniseHexConstant:
.9e7f	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9e81	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9e84	e8		inx				inx									; start of quoted string.
.9e85	da		phx				phx 								; push start of constant on top
.9e86	ca		dex				dex
.9e87					_THFindLoop:
.9e87	e8		inx				inx
.9e88	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9e8b	c9 30		cmp #$30			cmp 	#"0"
.9e8d	90 0c		bcc $9e9b			bcc 	_THFoundEnd
.9e8f	c9 3a		cmp #$3a			cmp 	#"9"+1
.9e91	90 f4		bcc $9e87			bcc 	_THFindLoop
.9e93	c9 41		cmp #$41			cmp 	#"A"
.9e95	90 04		bcc $9e9b			bcc 	_THFoundEnd
.9e97	c9 47		cmp #$47			cmp 	#"F"+1
.9e99	90 ec		bcc $9e87			bcc 	_THFindLoop
.9e9b					_THFoundEnd:
.9e9b	7a		ply				ply 								; restore start
.9e9c	20 60 9e	jsr $9e60			jsr 	TOWriteBlockXY 				; output the block
.9e9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9ea0					TokeniseCalculateHash:
.9ea0	da		phx				phx
.9ea1	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9ea4	a9 00		lda #$00			lda 	#0
.9ea6					_TCHLoop:
.9ea6	18		clc				clc
.9ea7	7d 26 08	adc $0826,x			adc 	lineBuffer,x
.9eaa	e8		inx				inx
.9eab	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9eae	d0 f6		bne $9ea6			bne 	_TCHLoop
.9eb0	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9eb3	fa		plx				plx
.9eb4	60		rts				rts
.9eb5					FixLineBufferCase:
.9eb5	a2 00		ldx #$00			ldx 	#0
.9eb7					_FLBCLoop:
.9eb7	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next character
.9eba	f0 22		beq $9ede			beq 	_FLBCExit 					; end of string.
.9ebc	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9ebe	f0 11		beq $9ed1			beq 	_FLBCInQuotes
.9ec0	e8		inx				inx
.9ec1	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9ec3	90 f2		bcc $9eb7			bcc 	_FLBCLoop
.9ec5	c9 7b		cmp #$7b			cmp 	#'z'+1
.9ec7	b0 ee		bcs $9eb7			bcs 	_FLBCLoop
.9ec9	38		sec				sec 								; make U/C
.9eca	e9 20		sbc #$20			sbc 	#32
.9ecc	9d 25 08	sta $0825,x			sta	 	lineBuffer-1,x 				; write back
.9ecf	80 e6		bra $9eb7			bra 	_FLBCLoop
.9ed1					_FLBCInQuotes:
.9ed1	e8		inx				inx 								; advance
.9ed2	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next
.9ed5	f0 07		beq $9ede			beq 	_FLBCExit 					; exit on EOS
.9ed7	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9ed9	d0 f6		bne $9ed1			bne 	_FLBCInQuotes
.9edb	e8		inx				inx 								; skip over it
.9edc	80 d9		bra $9eb7			bra 	_FLBCLoop
.9ede					_FLBCExit:
.9ede	60		rts				rts
.9edf					TokeniseExtractLineNumber:
.9edf	ad 28 07	lda $0728			lda 	tokenLineNumber+1 			; push current value on stack
.9ee2	48		pha				pha
.9ee3	ad 27 07	lda $0727			lda 	tokenLineNumber
.9ee6	48		pha				pha
.9ee7	20 1d 9f	jsr $9f1d			jsr 	_TELNTimes2 				; line # x 4
.9eea	20 1d 9f	jsr $9f1d			jsr 	_TELNTimes2 				; line # x 2
.9eed	18		clc				clc 								; add stacked value
.9eee	68		pla				pla
.9eef	6d 27 07	adc $0727			adc 	tokenLineNumber
.9ef2	8d 27 07	sta $0727			sta 	tokenLineNumber
.9ef5	68		pla				pla
.9ef6	6d 28 07	adc $0728			adc 	tokenLineNumber+1
.9ef9	8d 28 07	sta $0728			sta 	tokenLineNumber+1 			; line # x 5
.9efc	20 1d 9f	jsr $9f1d			jsr 	_TELNTimes2 				; line # x 10
.9eff	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get and consume character
.9f02	e8		inx				inx
.9f03	29 0f		and #$0f			and 	#15 						; add to line #
.9f05	18		clc				clc
.9f06	6d 27 07	adc $0727			adc 	tokenLineNumber
.9f09	8d 27 07	sta $0727			sta 	tokenLineNumber
.9f0c	90 03		bcc $9f11			bcc 	_TLENNoCarry
.9f0e	ee 28 07	inc $0728			inc 	tokenLineNumber+1
.9f11					_TLENNoCarry:
.9f11	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; more digits ?
.9f14	c9 30		cmp #$30			cmp 	#'0'
.9f16	90 04		bcc $9f1c			bcc 	_TLENExit
.9f18	c9 3a		cmp #$3a			cmp 	#'9'+1
.9f1a	90 c3		bcc $9edf			bcc 	TokeniseExtractLineNumber
.9f1c					_TLENExit:
.9f1c	60		rts				rts
.9f1d					_TELNTimes2:
.9f1d	0e 27 07	asl $0727			asl 	tokenLineNumber
.9f20	2e 28 07	rol $0728			rol 	tokenLineNumber+1
.9f23	60		rts				rts
.9f24					TokeniseWriteByte:
.9f24	da		phx				phx
.9f25	ae 26 07	ldx $0726			ldx 	tokenOffset 				; next slot to write to
.9f28	9d 26 07	sta $0726,x			sta 	tokenOffset,x 				; write byte out
.9f2b	ee 26 07	inc $0726			inc 	tokenOffset 				; advance slot.
.9f2e	fa		plx				plx
.9f2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9f30					CheckCreateVariableRecord:
.9f30	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9f32	85 36		sta $36				sta 	0+zTemp0
.9f34	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9f36	85 37		sta $37				sta 	1+zTemp0
.9f38					_CCVSearch:
.9f38	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9f3a	f0 2c		beq $9f68			beq 	_CCVFail
.9f3c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9f3e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9f40	cd 03 07	cmp $0703			cmp 	identHash
.9f43	d0 16		bne $9f5b			bne 	_CCVNext
.9f45	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9f47	ae 00 07	ldx $0700			ldx 	identStart
.9f4a					_CCVCompare:
.9f4a	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9f4d	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9f4f	e8		inx				inx 								; advance pointers
.9f50	c8		iny				iny
.9f51	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9f52	d0 07		bne $9f5b			bne 	_CCVNext  					; didn't match go to next.
.9f54	90 f4		bcc $9f4a			bcc 	_CCVCompare 				; not finished yet.
.9f56	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9f59	f0 41		beq $9f9c			beq 	_CCVFound 					; yes, we were successful
.9f5b					_CCVNext:
.9f5b	18		clc				clc
.9f5c	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9f5e	65 36		adc $36				adc 	zTemp0
.9f60	85 36		sta $36				sta 	zTemp0
.9f62	90 d4		bcc $9f38			bcc 	_CCVSearch
.9f64	e6 37		inc $37				inc 	zTemp0+1
.9f66	80 d0		bra $9f38			bra 	_CCVSearch
.9f68					_CCVFail:
.9f68	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9f6a	ad 03 07	lda $0703			lda 	identHash
.9f6d	91 36		sta ($36),y			sta 	(zTemp0),y
.9f6f	c8		iny				iny 								; offset 2 is the type byte
.9f70	ad 04 07	lda $0704			lda 	identTypeByte
.9f73	91 36		sta ($36),y			sta 	(zTemp0),y
.9f75	c8		iny				iny
.9f76					_CCVData:
.9f76	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9f78	91 36		sta ($36),y			sta 	(zTemp0),y
.9f7a	c8		iny				iny
.9f7b	c0 08		cpy #$08			cpy 	#8
.9f7d	90 f7		bcc $9f76			bcc 	_CCVData
.9f7f	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9f82					_CCVCopyName:
.9f82	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9f85	91 36		sta ($36),y			sta 	(zTemp0),y
.9f87	e8		inx				inx
.9f88	c8		iny				iny
.9f89	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9f8c	d0 f4		bne $9f82			bne 	_CCVCopyName
.9f8e	98		tya				tya 								; patch offset
.9f8f	92 36		sta ($36)			sta 	(zTemp0)
.9f91	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9f93	91 36		sta ($36),y			sta 	(zTemp0),y
.9f95	88		dey				dey
.9f96	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9f98	09 80		ora #$80			ora 	#$80
.9f9a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f9c					_CCVFound:
.9f9c	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9f9e	38		sec				sec
.9f9f	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9fa1	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9fa3	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9fa6	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9fa8	20 24 9f	jsr $9f24			jsr 	TokeniseWriteByte
.9fab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a8e3					EXTPrintCharacter:
.a8e3	48		pha				pha
.a8e4	da		phx				phx
.a8e5	5a		phy				phy
.a8e6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a8e9	7a		ply				ply
.a8ea	fa		plx				plx
.a8eb	68		pla				pla
.a8ec	60		rts				rts
.a8ed					EXTInputSingleCharacter:
.a8ed	da		phx				phx
.a8ee	5a		phy				phy
.a8ef					_EISCWait:
.a8ef	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8f2	c9 00		cmp #$00			cmp 	#0
.a8f4	f0 f9		beq $a8ef			beq 	_EISCWait
.a8f6	7a		ply				ply
.a8f7	fa		plx				plx
.a8f8	60		rts				rts
.a8f9					EXTInputLine:
.a8f9	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a8fb					_ILLoop:
.a8fb	da		phx				phx 								; read character in
.a8fc	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a8ff	fa		plx				plx
.a900	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a902	f0 12		beq $a916			beq 	_ILBackspace
.a904	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a906	f0 15		beq $a91d			beq 	_ILExit
.a908	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a90a	90 ef		bcc $a8fb			bcc 	_ILLoop
.a90c	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a90e	f0 eb		beq $a8fb			beq 	_ILLoop
.a910	9d 26 08	sta $0826,x			sta 	lineBuffer,x 				; save it
.a913	e8		inx				inx
.a914	80 e5		bra $a8fb			bra 	_ILLoop
.a916					_ILBackspace:
.a916	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a918	f0 e1		beq $a8fb			beq 	_ILLoop
.a91a	ca		dex				dex 								; back one.
.a91b	80 de		bra $a8fb			bra 	_ILLoop
.a91d					_ILExit:
.a91d	20 e3 a8	jsr $a8e3			jsr 	EXTPrintCharacter
.a920	9e 26 08	stz $0826,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a923	60		rts				rts
.a924					EXTBreakCheck:
.a924	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a927					MemoryDeleteLine:
.a927	20 46 a9	jsr $a946			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a92a	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a92c	a8		tay				tay
.a92d					_MDDLLoop:
.a92d	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a92f	92 30		sta ($30)			sta 	(codePtr)
.a931	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a933	c5 3a		cmp $3a				cmp 	zTemp2
.a935	d0 07		bne $a93e			bne 	_MDLDLNext
.a937	a5 31		lda $31				lda 	codePtr+1
.a939	c5 3b		cmp $3b				cmp 	zTemp2+1
.a93b	d0 01		bne $a93e			bne 	_MDLDLNext
.a93d					_MDDLExit:
.a93d	60		rts				rts
.a93e					_MDLDLNext:
.a93e	e6 30		inc $30				inc 	codePtr						; next byte
.a940	d0 eb		bne $a92d			bne 	_MDDLLoop
.a942	e6 31		inc $31				inc 	codePtr+1
.a944	80 e7		bra $a92d			bra 	_MDDLLoop
.a946					IMemoryFindEnd:
.a946	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a948	85 3a		sta $3a				sta 	0+zTemp2
.a94a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a94c	85 3b		sta $3b				sta 	1+zTemp2
.a94e					_MDLFELoop:
.a94e	b2 3a		lda ($3a)			lda 	(zTemp2)
.a950	f0 0b		beq $a95d			beq 	_MDLFEExit
.a952	18		clc				clc
.a953	65 3a		adc $3a				adc 	zTemp2
.a955	85 3a		sta $3a				sta 	zTemp2
.a957	90 f5		bcc $a94e			bcc 	_MDLFELoop
.a959	e6 3b		inc $3b				inc 	zTemp2+1
.a95b	80 f1		bra $a94e			bra 	_MDLFELoop
.a95d					_MDLFEExit:
.a95d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a95e					MemoryInsertLine:
.a95e	08		php				php
.a95f	20 46 a9	jsr $a946			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a962	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a964	1a		inc a				inc 	a
.a965	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a967	b0 36		bcs $a99f			bcs 	_MDLIError
.a969	28		plp				plp
.a96a	90 08		bcc $a974			bcc 	_MDLIFound
.a96c	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a96e	85 30		sta $30				sta 	codePtr
.a970	a5 3b		lda $3b				lda 	zTemp2+1
.a972	85 31		sta $31				sta 	codePtr+1
.a974					_MDLIFound:
.a974	ad 26 07	lda $0726			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a977	a8		tay				tay
.a978					_MDLIInsert:
.a978	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a97a	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a97c	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a97e	c5 3a		cmp $3a				cmp 	zTemp2
.a980	d0 06		bne $a988			bne 	_MDLINext
.a982	a5 31		lda $31				lda 	codePtr+1
.a984	c5 3b		cmp $3b				cmp 	zTemp2+1
.a986	f0 0a		beq $a992			beq 	_MDLIHaveSpace
.a988					_MDLINext:
.a988	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a98a	d0 02		bne $a98e			bne 	_MDLINoBorrow
.a98c	c6 3b		dec $3b				dec 	zTemp2+1
.a98e					_MDLINoBorrow:
.a98e	c6 3a		dec $3a				dec 	zTemp2
.a990	80 e6		bra $a978			bra 	_MDLIInsert
.a992					_MDLIHaveSpace:
.a992	ac 26 07	ldy $0726			ldy 	tokenOffset 				; bytes to copy
.a995	88		dey				dey 								; from offset-1 to 0
.a996					_MDLICopy:
.a996	b9 26 07	lda $0726,y			lda 	tokenOffset,y
.a999	91 30		sta ($30),y			sta 	(codePtr),y
.a99b	88		dey				dey
.a99c	10 f8		bpl $a996			bpl 	_MDLICopy
.a99e	60		rts				rts
.a99f					_MDLIError:
.a99f	a9 06		lda #$06		lda	#6
.a9a1	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a9a4					MDLAppendLine:
.a9a4	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a9a6	85 36		sta $36				sta 	zTemp0
.a9a8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a9aa	85 38		sta $38				sta 	0+zTemp1
.a9ac	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a9ae	85 39		sta $39				sta 	1+zTemp1
.a9b0	b2 38		lda ($38)			lda 	(zTemp1)
.a9b2	d0 0a		bne $a9be			bne 	_MDLANoInitialise
.a9b4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a9b6	8d a9 08	sta $08a9			sta 	0+AppendPointer
.a9b9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a9bb	8d aa 08	sta $08aa			sta 	1+AppendPointer
.a9be					_MDLANoInitialise:
.a9be	18		clc				clc
.a9bf	ad a9 08	lda $08a9			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a9c2	85 38		sta $38				sta 	zTemp1
.a9c4	72 36		adc ($36)			adc 	(zTemp0)
.a9c6	8d a9 08	sta $08a9			sta 	AppendPointer
.a9c9	ad aa 08	lda $08aa			lda 	AppendPointer+1
.a9cc	85 39		sta $39				sta 	zTemp1+1
.a9ce	69 00		adc #$00			adc 	#0
.a9d0	8d aa 08	sta $08aa			sta 	AppendPointer+1
.a9d3	a0 00		ldy #$00			ldy 	#0
.a9d5					_MDLACopy:
.a9d5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a9d7	91 38		sta ($38),y			sta 	(zTemp1),y
.a9d9	c8		iny				iny
.a9da	98		tya				tya
.a9db	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a9dd	d0 f6		bne $a9d5			bne 	_MDLACopy
.a9df	a9 00		lda #$00			lda 	#0 							; end of program.
.a9e1	91 38		sta ($38),y			sta 	(zTemp1),y
.a9e3	60		rts				rts
.08a9					AppendPointer:
>08a9							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9fac					MemoryNew:
.9fac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9fae	85 30		sta $30				sta 	codePtr
.9fb0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fb2	85 31		sta $31				sta 	codePtr+1
.9fb4	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9fb6	92 30		sta ($30)			sta 	(codePtr)
.9fb8	60		rts				rts
.9fb9					MemoryInline:
.9fb9	98		tya				tya 								; put address into stack,x
.9fba	18		clc				clc
.9fbb	65 30		adc $30				adc 	codePtr
.9fbd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9fc0	a5 31		lda $31				lda 	codePtr+1
.9fc2	69 00		adc #$00			adc 	#0
.9fc4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fc7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9fca	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9fcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9fce					MemorySearch:
.9fce	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9fd0	86 37		stx $37				stx 	zTemp0+1
.9fd2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9fd4	85 30		sta $30				sta 	codePtr
.9fd6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fd8	85 31		sta $31				sta 	codePtr+1
.9fda					_MTAXLoop:
.9fda	b2 30		lda ($30)			lda 	(codePtr)
.9fdc	18		clc				clc
.9fdd	f0 21		beq $a000			beq 	_MTAXExit 					; reached end, exit with CC.
.9fdf	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9fe1	b1 30		lda ($30),y			lda 	(codePtr),y
.9fe3	38		sec				sec
.9fe4	e5 36		sbc $36				sbc 	zTemp0
.9fe6	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9fe8	c8		iny				iny 								; do the MSB
.9fe9	b1 30		lda ($30),y			lda 	(codePtr),y
.9feb	e5 37		sbc $37				sbc 	zTemp0+1
.9fed	05 38		ora $38				ora 	zTemp1
.9fef	f0 0f		beq $a000			beq 	_MTAXExit	 				; found
.9ff1	b0 0d		bcs $a000			bcs 	_MTAXExit 					; current < required exit
.9ff3	18		clc				clc
.9ff4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ff6	65 30		adc $30				adc 	codePtr
.9ff8	85 30		sta $30				sta 	codePtr
.9ffa	90 02		bcc $9ffe			bcc 	_CREExit
.9ffc	e6 31		inc $31				inc 	codePtr+1
.9ffe					_CREExit:
.9ffe	80 da		bra $9fda			bra 	_MTAXLoop
.a000					_MTAXExit:
.a000	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
