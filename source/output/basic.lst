
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan  4 17:30:04 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$280						MemoryStorage = $280
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$0800						VariableSpace = $0800
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0280						identStart:
>0280								.fill 	1
.0281						identTypeStart:
>0281								.fill 	1
.0282						identTypeEnd:
>0282								.fill 	1
.0283						identHash:
>0283								.fill 	1
.0284						identTypeByte:
>0284								.fill 	1	 						; (see tokenising.pdf)
.0285						encodeState:
>0285								.fill 	1
.0286						digitTemp:
>0286								.fill 	1
.0287						decimalCount:
>0287								.fill 	1
.0288						randomSeed:
>0288								.fill 	4
.028c						lowMemPtr:
>028c								.fill 	2
.028e						stringMemory:
>028e								.fill 	2
.0290						stringInitialised:
>0290								.fill 	1
.0291						stringTempPointer:
>0291								.fill 	2
.0293						breakCheck:
>0293								.fill 	1
.0294						decimalPlaces:
>0294								.fill 	1
.0295						dbOffset:
>0295								.fill 	1
.0296						lastParameter:
>0296								.fill 	1
.0297						dataPointer:
>0297								.fill 	5
.029c						inDataStatement:
>029c								.fill 	1
.029d						tbOffset:
>029d								.fill 	1
.029e						AssemblerAddress:
>029e								.fill 	2
.02a0						AssemblerControl:
>02a0								.fill 	1
.02a1						ParamStart:
>02a1								.fill 	2
.02a3						IsGroup1:
>02a3								.fill 	1
.02a4						BaseOpcode:
>02a4								.fill 	1
.02a5						ModeMask:
>02a5								.fill 	1
.02a6						listIndent:
>02a6								.fill 	1
.02a7						lcLastCharacter:
>02a7								.fill 	1
.02a8						isPrintFlag:
>02a8								.fill 	1
.02a9						currentListColour:
>02a9								.fill 	1
.02aa						tokenOffset:
>02aa								.fill 	1
.02ab						tokenLineNumber:
>02ab								.fill 	2
.02ad						tokenBuffer:
>02ad								.fill 	253
.03aa						lineBuffer:
>03aa								.fill 	253
.04a7						numberBuffer:
>04a7								.fill 	34
.04c9						decimalBuffer:
>04c9								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 dd bc	jsr $bcdd		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 16 a9	jsr $a916			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c df 04	stz $04df			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80da		a9 09		lda #$09			lda 	#9
.80dc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80df		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80e2		64 01		stz $01				stz 	1
.80e4		ad ad d6	lda $d6ad			lda 	$D6AD
.80e7		20 1b 82	jsr $821b			jsr 	PrintHex
.80ea		ad ac d6	lda $d6ac			lda 	$D6AC
.80ed		20 1b 82	jsr $821b			jsr 	PrintHex
.80f0		ad ab d6	lda $d6ab			lda 	$D6AB
.80f3		20 1b 82	jsr $821b			jsr 	PrintHex
.80f6		ad aa d6	lda $d6aa			lda 	$D6AA
.80f9		20 1b 82	jsr $821b			jsr 	PrintHex
.80fc		a9 20		lda #$20			lda 	#32
.80fe		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8101		ad a8 d6	lda $d6a8			lda 	$D6A8
.8104		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8107		ad a9 d6	lda $d6a9			lda 	$D6A9
.810a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.810d		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.810f		a9 1d		lda #$1d			lda 	#Prompt & $FF
.8111		20 66 92	jsr $9266			jsr 	PrintStringXA
.8114		20 61 8c	jsr $8c61			jsr 	NewProgram 					; erase current program
.8117		4c 5e 84	jmp $845e			jmp 	WarmStart					; make same size.
.811a		4c 5e 84	jmp $845e			jmp 	WarmStart
>811d		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811f		09 09 30 34 2f 30 31 2f			.text 9,9,"04/01/23 23"
>8127		32 33 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>812c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8130						AssembleGroup1:
.8130		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8132		8d a5 02	sta $02a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8135		80 02		bra $8139			bra 	AsmGroup12
.8137						AssembleGroup2:
.8137		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8139						AsmGroup12:
.8139		8d a3 02	sta $02a3			sta 	IsGroup1 					; save the 'group 1' flag
.813c		68		pla				pla 								; pop the return address to access the information following.
.813d		fa		plx				plx
.813e		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; get opcode and save as base
.8141		8d a4 02	sta $02a4			sta 	BaseOpcode
.8144		ad a3 02	lda $02a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8147		d0 08		bne $8151			bne 	_AG12HaveMask
.8149		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.814b		20 cd 81	jsr $81cd			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.814e		8d a5 02	sta $02a5			sta 	ModeMask
.8151						_AG12HaveMask:
.8151		20 01 83	jsr $8301			jsr 	TypeAndCalculateOperand 	; get zero page type
.8154		da		phx				phx 								; save found address mode
.8155		20 31 82	jsr $8231			jsr 	AssembleModeX
.8158		fa		plx				plx  								; restore address mode
.8159		b0 0b		bcs $8166			bcs 	_AG12Exit
.815b		20 67 81	jsr $8167			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.815e		20 31 82	jsr $8231			jsr 	AssembleModeX
.8161		b0 03		bcs $8166			bcs 	_AG12Exit
.8163		4c d6 a2	jmp $a2d6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8166						_AG12Exit:
.8166		60		rts				rts
.8167						PromoteToAbsolute:
.8167		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8169		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.816b		f0 19		beq $8186			beq 	_PTADo
.816d		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.816f		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8171		f0 13		beq $8186			beq 	_PTADo
.8173		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8175		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8177		f0 0d		beq $8186			beq 	_PTADo
.8179		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.817b		e0 d1		cpx #$d1			cpx 	#AM_IND
.817d		f0 07		beq $8186			beq 	_PTADo
.817f		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8181		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8183		f0 01		beq $8186			beq 	_PTADo
.8185		60		rts				rts
.8186						_PTADo:
.8186		aa		tax				tax
.8187		60		rts				rts
.8188						AssembleGroup3:
.8188		68		pla				pla 								; get parameters, which is just the opcode.
.8189		fa		plx				plx
.818a		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; get and output opcode
.818d		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.8190		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get a 16 bit operand
.8193		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8195		38		sec				sec
.8196		ed 9e 02	sbc $029e			sbc 	AssemblerAddress
.8199		48		pha				pha 								; LSB in A
.819a		a5 60		lda $60				lda 	NSMantissa1
.819c		ed 9f 02	sbc $029f			sbc 	AssemblerAddress+1
.819f		aa		tax				tax 								; MSB in X
.81a0		68		pla				pla
.81a1		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.81a2		69 7f		adc #$7f			adc 	#$7F
.81a4		90 01		bcc $81a7			bcc 	_AG3NoCarry
.81a6		e8		inx				inx
.81a7						_AG3NoCarry:
.81a7		38		sec				sec 								; fix back and write out anyways.
.81a8		e9 80		sbc #$80			sbc 	#$80
.81aa		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.81ad		e0 00		cpx #$00			cpx 	#0 							; was it in range
.81af		f0 0a		beq $81bb			beq 	_AG3Exit
.81b1		ad a0 02	lda $02a0			lda 	AssemblerControl 			; are we allowing bad values ?
.81b4		29 01		and #$01			and 	#1
.81b6		f0 03		beq $81bb			beq 	_AG3Exit
.81b8		4c db a2	jmp $a2db			jmp 	RangeError 					; no, branch is out of range
.81bb						_AG3Exit:
.81bb		60		rts				rts
.81bc						AssembleGroup4:
.81bc		68		pla				pla 								; pop address
.81bd		fa		plx				plx
.81be		20 c5 81	jsr $81c5			jsr 	AccessParameters 			; access and get first
.81c1		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte 			; output it.
.81c4		60		rts				rts
.81c5						AccessParameters:
.81c5		8d a1 02	sta $02a1			sta 	ParamStart
.81c8		8e a2 02	stx $02a2			stx 	ParamStart+1
.81cb		a9 01		lda #$01			lda 	#1
.81cd						GetParameter:
.81cd		5a		phy				phy
.81ce		a8		tay				tay
.81cf		ad a1 02	lda $02a1			lda 	ParamStart
.81d2		85 36		sta $36				sta 	zTemp0
.81d4		ad a2 02	lda $02a2			lda 	ParamStart+1
.81d7		85 37		sta $37				sta 	zTemp0+1
.81d9		b1 36		lda ($36),y			lda 	(zTemp0),y
.81db		7a		ply				ply
.81dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81dd						AssemblerWriteByte:
.81dd		48		pha			pha
.81de		ad a0 02	lda $02a0		lda 	AssemblerControl 				; check printing bytes ?
.81e1		29 02		and #$02		and 	#2
.81e3		f0 1b		beq $8200		beq 	_AWBNoPrint
.81e5		ad 9f 02	lda $029f		lda		AssemblerAddress+1 				; print address
.81e8		20 1b 82	jsr $821b		jsr 	PrintHex
.81eb		ad 9e 02	lda $029e		lda		AssemblerAddress
.81ee		20 1b 82	jsr $821b		jsr 	PrintHex
.81f1		a9 20		lda #$20		lda 	#' '
.81f3		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81f6		68		pla			pla 									; print byte
.81f7		48		pha			pha
.81f8		20 1b 82	jsr $821b		jsr 	PrintHex
.81fb		a9 0d		lda #$0d		lda 	#13
.81fd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8200						_AWBNoPrint:
.8200		ad 9e 02	lda $029e		lda		AssemblerAddress				; copy address to zTemp0
.8203		85 36		sta $36			sta 	zTemp0
.8205		ad 9f 02	lda $029f		lda		AssemblerAddress+1
.8208		f0 0e		beq $8218		beq 	_AWBRange
.820a		85 37		sta $37			sta 	zTemp0+1
.820c		68		pla			pla 									; write byte out
.820d		92 36		sta ($36)		sta 	(zTemp0)
.820f		ee 9e 02	inc $029e		inc 	AssemblerAddress 				; bump address
.8212		d0 03		bne $8217		bne 	_AWBNoCarry
.8214		ee 9f 02	inc $029f		inc 	AssemblerAddress+1
.8217						_AWBNoCarry:
.8217		60		rts			rts
.8218						_AWBRange:
.8218		4c db a2	jmp $a2db		jmp 	RangeError
.821b						PrintHex:
.821b		48		pha				pha
.821c		4a		lsr a				lsr 	a
.821d		4a		lsr a				lsr 	a
.821e		4a		lsr a				lsr 	a
.821f		4a		lsr a				lsr 	a
.8220		20 24 82	jsr $8224			jsr 	_PrintNibble
.8223		68		pla				pla
.8224						_PrintNibble:
.8224		29 0f		and #$0f			and 	#15
.8226		c9 0a		cmp #$0a			cmp 	#10
.8228		90 02		bcc $822c			bcc 	_NoShift
.822a		69 06		adc #$06			adc 	#6
.822c						_NoShift:
.822c		69 30		adc #$30			adc 	#48
.822e		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8231						AssembleModeX:
.8231		5a		phy				phy
.8232		ad a3 02	lda $02a3			lda 	IsGroup1
.8235		f0 17		beq $824e			beq 	_AMXGroup2
.8237		8a		txa				txa 							; is it in group # 1
.8238		29 40		and #$40			and 	#AM_ISG1
.823a		f0 4d		beq $8289			beq 	_AMXFail 				; no, give up.
.823c		8a		txa				txa 							; get back.
.823d		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.823f		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8241		d0 22		bne $8265			bne 	_AMXHaveInfo
.8243		ad a4 02	lda $02a4			lda 	BaseOpcode 				; cannot store immediate.
.8246		c9 81		cmp #$81			cmp 	#$81
.8248		f0 3f		beq $8289			beq 	_AMXFail
.824a		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.824c		80 17		bra $8265			bra 	_AMXHaveInfo 			; odd design decision there.
.824e						_AMXGroup2:
.824e		8a		txa				txa 							; is it in group 2 ?
.824f		29 20		and #$20			and 	#AM_ISG2
.8251		f0 36		beq $8289			beq 	_AMXFail 				; no, give up.
.8253		8a		txa				txa 							; get the offset into Y
.8254		29 1f		and #$1f			and 	#$1F
.8256		4a		lsr a				lsr 	a 						; make it 0-7.
.8257		4a		lsr a				lsr  	a
.8258		a8		tay				tay
.8259		ad a5 02	lda $02a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.825c						_AMXCheckOkay:
.825c		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.825d		88		dey				dey
.825e		10 fc		bpl $825c			bpl 	_AMXCheckOkay
.8260		90 27		bcc $8289			bcc 	_AMXFail 				; not allowed.
.8262		8a		txa				txa  							; get mask back
.8263		29 1f		and #$1f			and 	#$1F
.8265						_AMXHaveInfo:
.8265		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8267		10 04		bpl $826d			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8269		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.826b		d0 1c		bne $8289			bne 	_AMXFail
.826d						_AMXAnySize:
.826d		18		clc				clc 							; add offset to the base opcode
.826e		6d a4 02	adc $02a4			adc 	BaseOpcode
.8271						_AMXOutputCode:
.8271		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte 		; write the opcode out.
.8274		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8276		f0 0e		beq $8286			beq 	_AMXExit
.8278		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.827a		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.827d		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.827f		30 05		bmi $8286			bmi 	_AMXExit
.8281		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8283		20 dd 81	jsr $81dd			jsr 	AssemblerWriteByte
.8286						_AMXExit:
.8286		7a		ply				ply
.8287		38		sec				sec
.8288		60		rts				rts
.8289						_AMXFail:
.8289		a0 00		ldy #$00			ldy 	#0
.828b						_AMXCheckOddities:
.828b		8a		txa				txa
.828c		d9 b3 82	cmp $82b3,y			cmp 	ExtraOpcode+2,y 		; match address mode
.828f		d0 15		bne $82a6			bne 	_AMXCONext
.8291		b9 b1 82	lda $82b1,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8294		cd a4 02	cmp $02a4			cmp 	BaseOpcode
.8297		d0 0d		bne $82a6			bne 	_AMXCONext
.8299		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.829b		10 04		bpl $82a1			bpl 	_AMXCONotZero
.829d		a5 60		lda $60				lda 	NSMantissa1
.829f		d0 05		bne $82a6			bne 	_AMXCONext
.82a1						_AMXCONotZero:
.82a1		b9 b2 82	lda $82b2,y			lda 	ExtraOpcode+1,y 		; get new opcode
.82a4		80 cb		bra $8271			bra 	_AMXOutputCode 			; and assemble it
.82a6						_AMXCONext:
.82a6		c8		iny				iny
.82a7		c8		iny				iny
.82a8		c8		iny				iny
.82a9		b9 b1 82	lda $82b1,y			lda 	ExtraOpcode+0,y 		; end of table
.82ac		d0 dd		bne $828b			bne 	_AMXCheckOddities
.82ae						_AMXCOFail:
.82ae		7a		ply				ply
.82af		18		clc				clc
.82b0		60		rts				rts
.82b1						ExtraOpcode:
>82b1		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>82b4		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>82b7		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>82ba		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>82bd		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>82c0		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>82c3		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>82c6		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>82c9		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>82cc		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>82cf		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.82d0						LabelHere:
.82d0		c8		iny				iny 								; skip .
.82d1		a2 00		ldx #$00			ldx 	#0 							; get a term
.82d3		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm
.82d6		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82d8		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82da		d0 22		bne $82fe			bne 	_ALType 					; otherwise typing error
.82dc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82de		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82e0		b5 60		lda $60,x			lda 	NSMantissa1,x
.82e2		85 37		sta $37				sta 	zTemp0+1
.82e4		5a		phy				phy 								; copy address in (64k)
.82e5		a0 01		ldy #$01			ldy 	#1
.82e7		ad 9e 02	lda $029e			lda	 	AssemblerAddress
.82ea		92 36		sta ($36)			sta 	(zTemp0)
.82ec		ad 9f 02	lda $029f			lda	 	AssemblerAddress+1
.82ef		91 36		sta ($36),y			sta 	(zTemp0),y
.82f1		c8		iny				iny
.82f2		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82f4		91 36		sta ($36),y			sta 	(zTemp0),y
.82f6		c8		iny				iny
.82f7		91 36		sta ($36),y			sta 	(zTemp0),y
.82f9		c8		iny				iny
.82fa		91 36		sta ($36),y			sta 	(zTemp0),y
.82fc		7a		ply				ply
.82fd		60		rts				rts
.82fe						_ALType:
.82fe		4c e0 a2	jmp $a2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8301						TypeAndCalculateOperand:
.8301		b1 30		lda ($30),y			lda 	(codePtr),y
.8303		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8305		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8307		f0 5b		beq $8364			beq 	_TACOExit
.8309		c9 80		cmp #$80			cmp 	#KWC_EOL
.830b		f0 57		beq $8364			beq 	_TACOExit
.830d		c8		iny				iny
.830e		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8310		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8312		f0 51		beq $8365			beq 	CalculateOperand
.8314		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8316		f0 1f		beq $8337			beq 	_TACOIndirect
.8318		88		dey				dey 								; undo get of first character
.8319		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get operand
.831c		b1 30		lda ($30),y			lda 	(codePtr),y
.831e		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8320		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8322		d0 40		bne $8364			bne 	_TACOExit
.8324		c8		iny				iny
.8325		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8328		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.832a		c9 58		cmp #$58			cmp 	#'X'
.832c		f0 36		beq $8364			beq 	_TACOExit
.832e		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8330		c9 59		cmp #$59			cmp 	#'Y'
.8332		f0 30		beq $8364			beq 	_TACOExit
.8334						_TACOSyntax:
.8334		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.8337						_TACOIndirect:
.8337		20 65 83	jsr $8365			jsr 	CalculateOperand 			; get the operand
.833a		b1 30		lda ($30),y			lda 	(codePtr),y
.833c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.833e		f0 17		beq $8357			beq 	_TACOIndX
.8340		20 f4 91	jsr $91f4			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8343		b1 30		lda ($30),y			lda 	(codePtr),y
.8345		a2 d1		ldx #$d1			ldx 	#AM_IND
.8347		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8349		d0 19		bne $8364			bne 	_TACOExit
.834b		c8		iny				iny
.834c		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.834f		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8351		d0 e1		bne $8334			bne 	_TACOSyntax
.8353		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8355		80 0d		bra $8364			bra 	_TACOExit
.8357						_TACOIndX:
.8357		c8		iny				iny
.8358		20 6f 83	jsr $836f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.835b		c9 58		cmp #$58			cmp 	#'X' 						; check X
.835d		d0 d5		bne $8334			bne 	_TACOSyntax
.835f		20 f4 91	jsr $91f4			jsr 	CheckRightBracket			; check )
.8362		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8364						_TACOExit:
.8364		60		rts				rts
.8365						CalculateOperand:
.8365		48		pha				pha
.8366		da		phx				phx
.8367		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8369		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.836c		fa		plx				plx
.836d		68		pla				pla
.836e		60		rts				rts
.836f						TACOCheckXY:
.836f		b1 30		lda ($30),y			lda 	(codePtr),y
.8371		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8373		c9 40		cmp #$40			cmp 	#$40
.8375		d0 21		bne $8398			bne 	_TCXYFail
.8377		b1 30		lda ($30),y			lda 	(codePtr),y
.8379		18		clc				clc
.837a		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.837c		85 37		sta $37				sta 	zTemp0+1
.837e		c8		iny				iny
.837f		b1 30		lda ($30),y			lda 	(codePtr),y
.8381		c8		iny				iny
.8382		85 36		sta $36				sta 	zTemp0
.8384		5a		phy				phy 								; save position
.8385		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8387		b1 36		lda ($36),y			lda 	(zTemp0),y
.8389		d0 0c		bne $8397			bne 	_TCXYPopFail
.838b		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.838d		b1 36		lda ($36),y			lda 	(zTemp0),y
.838f		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8391		f0 08		beq $839b			beq 	_TCXYFound
.8393		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8395		f0 04		beq $839b			beq 	_TCXYFound
.8397						_TCXYPopFail:
.8397		7a		ply				ply
.8398						_TCXYFail:
.8398		a9 00		lda #$00			lda 	#0
.839a		60		rts				rts
.839b						_TCXYFound:
.839b		7a		ply				ply 								; restore position
.839c		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.839e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.839f						BackloadProgram:
.839f		20 61 8c	jsr $8c61			jsr 	NewProgram 					; does the actual NEW.
.83a2		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.83a4		a9 f6		lda #$f6			lda 	#_BLLoad & $FF
.83a6		20 66 92	jsr $9266			jsr 	PrintStringXA
.83a9		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.83ab		8d d9 04	sta $04d9			sta 	BackLoadPage
.83ae		a9 00		lda #$00			lda 	#(($6000) & $FF)
.83b0		8d da 04	sta $04da			sta 	0+BackLoadPointer
.83b3		a9 60		lda #$60			lda 	#(($6000) >> 8)
.83b5		8d db 04	sta $04db			sta 	1+BackLoadPointer
.83b8		a9 ff		lda #$ff			lda 	#$FF
.83ba		8d fa ff	sta $fffa			sta 	$FFFA
.83bd						_BPLoop:
.83bd		a2 ff		ldx #$ff			ldx 	#$FF
.83bf		20 0b 84	jsr $840b			jsr 	BLReadByte 					; read a byte
.83c2		c9 00		cmp #$00			cmp 	#0
.83c4		f0 29		beq $83ef			beq 	_BPExit 					; if 0 exit
.83c6		30 27		bmi $83ef			bmi 	_BPExit 					; if -ve exit
.83c8						_BPCopy:
.83c8		e8		inx				inx  								; copy byte into the lineBuffer
.83c9		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.83cc		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x
.83cf		20 0b 84	jsr $840b			jsr 	BLReadByte 					; read next byte
.83d2		30 0a		bmi $83de			bmi 	_BPEndLine 					; -ve = EOL
.83d4		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83d6		d0 02		bne $83da			bne 	_BPNotTab
.83d8		a9 20		lda #$20			lda 	#' '
.83da						_BPNotTab:
.83da		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83dc		b0 ea		bcs $83c8			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83de						_BPEndLine:
.83de		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.83e1		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.83e4		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.83e7		f0 d4		beq $83bd			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83e9		38		sec				sec 								; append not insert
.83ea		20 3f a8	jsr $a83f			jsr 	MemoryInsertLine 			; append to current program
.83ed		80 ce		bra $83bd			bra 	_BPLoop
.83ef						_BPExit:
.83ef		9c fa ff	stz $fffa			stz 	$FFFA
.83f2		20 92 85	jsr $8592			jsr 	ClearCommand 				; clear variables etc.
.83f5		60		rts				rts
.83f6						_BLLoad:
>83f6		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83fe		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.840b						BLReadByte:
.840b		da		phx				phx
.840c		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.840e		ad d9 04	lda $04d9			lda 	BackLoadPage	 			; set current page
.8411		85 0b		sta $0b				sta 	8+3
.8413		ad da 04	lda $04da			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8416		85 36		sta $36				sta 	zTemp0
.8418		ad db 04	lda $04db			lda 	BackLoadPointer+1
.841b		85 37		sta $37				sta 	zTemp0+1
.841d		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.841f		ee da 04	inc $04da			inc 	BackLoadPointer 			; bump pointer
.8422		d0 0f		bne $8433			bne 	_BLNoCarry
.8424		ee db 04	inc $04db			inc 	BackLoadPointer+1
.8427		10 0a		bpl $8433			bpl 	_BLNoCarry 					; need a new page
.8429		48		pha				pha
.842a		a9 60		lda #$60			lda 	#$60 						; reset pointer
.842c		8d db 04	sta $04db			sta 	BackLoadPointer+1
.842f		ee d9 04	inc $04d9			inc 	BackLoadPage 				; next page from source.
.8432		68		pla				pla
.8433						_BLNoCarry:
.8433		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8435		fa		plx				plx
.8436		c9 00		cmp #$00			cmp 	#0
.8438		60		rts				rts
.04d9						BackLoadPage:
>04d9								.fill  	1
.04da						BackLoadPointer:
>04da								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8439						EditProgramCode:
.8439		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; try to find the line.
.843c		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1
.843f		20 e3 a8	jsr $a8e3			jsr 	MemorySearch
.8442		90 05		bcc $8449			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8444		d0 03		bne $8449			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8446		20 08 a8	jsr $a808			jsr 	MemoryDeleteLine 			; delete the line
.8449						_EPCNoDelete:
.8449		ad ad 02	lda $02ad			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.844c		c9 80		cmp #$80			cmp 	#KWC_EOL
.844e		f0 0d		beq $845d			beq 	_EPCNoInsert
.8450		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8453		ae ac 02	ldx $02ac			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8456		20 e3 a8	jsr $a8e3			jsr 	MemorySearch
.8459		18		clc				clc 								; insert at this point.
.845a		20 3f a8	jsr $a83f			jsr 	MemoryInsertLine 			; insert the line
.845d						_EPCNoInsert:
.845d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.845e						WarmStart:
.845e		a2 ff		ldx #$ff			ldx 	#$FF
.8460		9a		txs				txs
.8461		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8463		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8466		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8469		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.846c		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number <> 0
.846f		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8472		d0 17		bne $848b			bne 	_WSEditCode 				; if so,edit code.
.8474		9c aa 02	stz $02aa			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8477		a9 aa		lda #$aa			lda 	#((tokenOffset) & $FF)
.8479		85 30		sta $30				sta 	codePtr
.847b		a9 02		lda #$02			lda 	#((tokenOffset) >> 8)
.847d		85 31		sta $31				sta 	codePtr+1
.847f		ad ad 02	lda $02ad			lda 	tokenBuffer 				; nothing to run
.8482		c9 80		cmp #$80			cmp 	#KWC_EOL
.8484		f0 d8		beq $845e			beq 	WarmStart
.8486		20 f1 8d	jsr $8df1			jsr 	RUNCodePointerLine 			; execute that line.
.8489		80 d3		bra $845e			bra 	WarmStart
.848b						_WSEditCode:
.848b		20 39 84	jsr $8439			jsr 	EditProgramCode 			; edit the program code
.848e		20 92 85	jsr $8592			jsr 	ClearCommand 				; clear all variables etc.
.8491		80 cb		bra $845e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8493						AssembleCommand:
.8493		a2 00		ldx #$00			ldx 	#0
.8495		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; start address
.8498		a5 58		lda $58				lda 	NSMantissa0
.849a		8d 9e 02	sta $029e			sta 	AssemblerAddress
.849d		a5 60		lda $60				lda 	NSMantissa1
.849f		8d 9f 02	sta $029f			sta 	AssemblerAddress+1
.84a2		20 fc 91	jsr $91fc			jsr 	CheckComma
.84a5		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; options 0-3
.84a8		a5 58		lda $58				lda 	NSMantissa0
.84aa		8d a0 02	sta $02a0			sta 	AssemblerControl
.84ad		60		rts				rts
.84ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84af						AssertCommand:
.84af		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.84b1		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger 			; the assert test
.84b4		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; exit if result is non zero.
.84b7		d0 05		bne $84be			bne 	_ACExit
.84b9		a9 0a		lda #$0a		lda	#10
.84bb		4c 0d 92	jmp $920d		jmp	ErrorHandler
.84be						_ACExit:
.84be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.84bf						Command_BLoad:
.84bf		a2 00		ldx #$00			ldx 	#0
.84c1		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; file name to load
.84c4		20 fc 91	jsr $91fc			jsr 	CheckComma 					; consume comma
.84c7		e8		inx				inx
.84c8		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger 			; load address (full physical address)
.84cb		5a		phy				phy
.84cc		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.84ce		a6 60		ldx $60				ldx 	NSMantissa1
.84d0		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.84d3		b0 4c		bcs $8521			bcs 	CBLErrorHandler 			; error, so fail.
.84d5		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.84d8		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.84da		20 24 85	jsr $8524			jsr 	BLOpenPhysicalMemory 		; open for access.
.84dd						_BLReadFile:
.84dd		ad e1 04	lda $04e1			lda 	CurrentFileStream
.84e0		20 67 80	jsr $8067			jsr 	KNLReadBlock 				; read next block
.84e3		b0 22		bcs $8507			bcs 	_BLFileError 				; file error, which might be EOF.
.84e5		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.84e7		f0 f4		beq $84dd			beq 	_BLReadFile
.84e9		8d de 04	sta $04de			sta 	BLCopyCounter 				; counter.
.84ec		ac dd 04	ldy $04dd			ldy 	BLYOffset 					; copy the buffer out here
.84ef		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.84f1						_BLCopyLoop:
.84f1		bd d2 06	lda $06d2,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.84f4		91 3a		sta ($3a),y			sta 	(zTemp2),y
.84f6		c8		iny				iny
.84f7		d0 03		bne $84fc			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.84f9		20 4c 85	jsr $854c			jsr 	BLAdvancePhysicalMemory
.84fc						_BLNoAdjust:
.84fc		e8		inx				inx
.84fd		ce de 04	dec $04de			dec 	BLCopyCounter
.8500		d0 ef		bne $84f1			bne 	_BLCopyLoop
.8502		8c dd 04	sty $04dd			sty 	BLYOffset 					; update Y offset
.8505		80 d6		bra $84dd			bra 	_BLReadFile 				; go ask for more.
.8507						_BLFileError:
.8507		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8509		d0 16		bne $8521			bne 	CBLErrorHandler				; no, it's an actual error
.850b		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory 		; close the access.
.850e		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close the file
.8511		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8514		7a		ply				ply
.8515		60		rts				rts
.8516						CBLCloseError:
.8516		48		pha				pha
.8517		20 46 85	jsr $8546			jsr 	BLClosePhysicalMemory
.851a		ad e1 04	lda $04e1			lda 	CurrentFileStream
.851d		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8520		68		pla				pla
.8521						CBLErrorHandler:
.8521		4c 4a 8b	jmp $8b4a			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8524						BLOpenPhysicalMemory:
.8524		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8526		8d dc 04	sta $04dc			sta 	BLNormalMapping
.8529		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.852b		8d dd 04	sta $04dd			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.852e		64 3a		stz $3a				stz 	zTemp2
.8530		b5 60		lda $60,x			lda 	NSMantissa1,x
.8532		29 1f		and #$1f			and 	#$1F
.8534		09 60		ora #$60			ora 	#BLAccessPage << 5
.8536		85 3b		sta $3b				sta 	zTemp2+1
.8538		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.853a		16 60		asl $60,x			asl 	NSMantissa1,x
.853c		2a		rol a				rol 	a
.853d		16 60		asl $60,x			asl 	NSMantissa1,x
.853f		2a		rol a				rol 	a
.8540		16 60		asl $60,x			asl 	NSMantissa1,x
.8542		2a		rol a				rol 	a
.8543		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8545		60		rts				rts
.8546						BLClosePhysicalMemory:
.8546		ad dc 04	lda $04dc			lda 	BLNormalMapping
.8549		85 0b		sta $0b				sta 	BLAccessPage+8
.854b		60		rts				rts
.854c						BLAdvancePhysicalMemory:
.854c		48		pha				pha
.854d		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.854f		a5 3b		lda $3b				lda 	zTemp2+1
.8551		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8553		d0 06		bne $855b			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8555		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8557		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8559		85 3b		sta $3b				sta 	zTemp2+1
.855b						_BLAPMExit:
.855b		68		pla				pla
.855c		60		rts				rts
.04dc						BLNormalMapping:
>04dc								.fill 	1
.04dd						BLYOffset:
>04dd								.fill 	1
.04de						BLCopyCounter:
>04de								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.855d						CallCommand:
.855d		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.855f		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.8562						_CCClear
.8562		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8563		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; these are optional sequentially.
.8566		e0 04		cpx #$04			cpx 	#4
.8568		d0 f8		bne $8562			bne 	_CCClear
.856a		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.856c						_CCCParam:
.856c		b1 30		lda ($30),y			lda 	(codePtr),y
.856e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8570		d0 09		bne $857b			bne 	_CCCRun6502
.8572		c8		iny				iny 								; skip comma
.8573		e8		inx				inx	 								; next level
.8574		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8577		e0 03		cpx #$03			cpx 	#3
.8579		90 f1		bcc $856c			bcc 	_CCCParam 					; done all 3 ?
.857b						_CCCRun6502:
.857b		5a		phy				phy 								; save position
.857c		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.857e		85 37		sta $37				sta 	zTemp0+1
.8580		a5 58		lda $58				lda 	NSMantissa0
.8582		85 36		sta $36				sta 	zTemp0
.8584		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8586		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8588		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.858a		20 8f 85	jsr $858f			jsr 	_CCCZTemp0 					; call zTemp0
.858d		7a		ply				ply 								; restore position and exit
.858e		60		rts				rts
.858f						_CCCZTemp0:
.858f		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8592						ClearCommand:
.8592		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8594		85 36		sta $36				sta 	0+zTemp0
.8596		a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.8598		85 37		sta $37				sta 	1+zTemp0
.859a						_ClearZeroLoop:
.859a		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.859c		f0 24		beq $85c2			beq 	_ClearZeroEnd
.859e		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.85a0		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.85a2						_ClearOneVariable:
.85a2		91 36		sta ($36),y			sta 	(zTemp0),y
.85a4		c8		iny				iny
.85a5		c0 08		cpy #$08			cpy 	#8
.85a7		d0 f9		bne $85a2			bne 	_ClearOneVariable
.85a9		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.85ab		b1 36		lda ($36),y			lda 	(zTemp0),y
.85ad		c9 18		cmp #$18			cmp 	#NSTProcedure
.85af		d0 04		bne $85b5			bne 	_ClearNotProcedure
.85b1		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.85b3		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.85b5						_ClearNotProcedure:
.85b5		18		clc				clc 								; go to the next variable
.85b6		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.85b8		65 36		adc $36				adc 	zTemp0
.85ba		85 36		sta $36				sta 	zTemp0
.85bc		90 dc		bcc $859a			bcc 	_ClearZeroLoop
.85be		e6 37		inc $37				inc 	zTemp0+1
.85c0		80 d8		bra $859a			bra 	_ClearZeroLoop
.85c2						_ClearZeroEnd:
.85c2		18		clc				clc
.85c3		a5 36		lda $36				lda 	zTemp0
.85c5		69 01		adc #$01			adc 	#1
.85c7		8d 8c 02	sta $028c			sta 	lowMemPtr
.85ca		a5 37		lda $37				lda 	zTemp0+1
.85cc		69 00		adc #$00			adc 	#0
.85ce		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.85d1		20 9d b2	jsr $b29d			jsr 	StackReset
.85d4		20 03 b3	jsr $b303			jsr 	StringSystemInitialise
.85d7		20 fd 90	jsr $90fd			jsr 	ProcedureScan
.85da		20 a0 8d	jsr $8da0			jsr 	Command_Restore
.85dd		9c 9e 02	stz $029e			stz 	AssemblerAddress
.85e0		9c 9f 02	stz $029f			stz 	AssemblerAddress+1
.85e3		9c a0 02	stz $02a0			stz 	AssemblerControl
.85e6		20 47 9d	jsr $9d47			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.85e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.85ea						ClearScreen:
.85ea		5a		phy				phy
.85eb		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.85ed		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85f0		7a		ply				ply
.85f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.85f2						Command_Data:
.85f2		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.85f4		a2 80		ldx #$80			ldx 	#KWC_EOL
.85f6		20 4f 91	jsr $914f			jsr 	ScanForward
.85f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.85fa						DimCommand:
.85fa		b1 30		lda ($30),y			lda 	(codePtr),y
.85fc		29 c0		and #$c0			and 	#$C0
.85fe		c9 40		cmp #$40			cmp 	#$40
.8600		d0 7a		bne $867c			bne 	_DCSyntax 				; n o, error.
.8602		b1 30		lda ($30),y			lda 	(codePtr),y
.8604		18		clc				clc
.8605		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.8607		85 3f		sta $3f				sta 	zaTemp+1
.8609		c8		iny				iny
.860a		b1 30		lda ($30),y			lda 	(codePtr),y
.860c		c8		iny				iny
.860d		85 3e		sta $3e				sta 	zaTemp
.860f		5a		phy				phy
.8610		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8612		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8614		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8616		c9 18		cmp #$18			cmp 	#NSTProcedure
.8618		f0 62		beq $867c			beq 	_DCSyntax
.861a		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.861c		29 04		and #$04			and 	#NSBIsArray
.861e		f0 64		beq $8684			beq 	_DCType
.8620		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8622		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8624		d0 59		bne $867f			bne 	_DCRedefine
.8626		7a		ply				ply
.8627		20 87 86	jsr $8687			jsr 	_DCGetSize 				; get array size, check it.
.862a		5a		phy				phy
.862b		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.862d		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.862f		7a		ply				ply 							; is there a second (e.g. ,x)
.8630		b1 30		lda ($30),y			lda 	(codePtr),y
.8632		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8634		d0 0a		bne $8640			bne 	_DCOneDimension
.8636		c8		iny				iny 							; skip comma
.8637		20 87 86	jsr $8687			jsr 	_DCGetSize 				; get 2nd array size
.863a		5a		phy				phy
.863b		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.863d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.863f		7a		ply				ply
.8640						_DCOneDimension:
.8640		5a		phy				phy 							; save position
.8641		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8643		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8645		aa		tax				tax
.8646		c8		iny				iny
.8647		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8649		e8		inx				inx 							; bump them.
.864a		1a		inc a				inc 	a
.864b		20 03 a1	jsr $a103			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.864e		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8650		29 e0		and #$e0			and 	#$E0
.8652		d0 23		bne $8677			bne 	_DCSize
.8654		a0 02		ldy #$02			ldy 	#2 						; get base type
.8656		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8658		20 95 86	jsr $8695			jsr 	ScaleByBaseType 		; scale by base type
.865b		a5 36		lda $36				lda 	zTemp0
.865d		a6 37		ldx $37				ldx 	zTemp0+1
.865f		20 09 9d	jsr $9d09			jsr 	AllocateXABytes 		; allocate memory
.8662		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8664		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8666		c8		iny				iny
.8667		8a		txa				txa
.8668		91 3e		sta ($3e),y			sta 	(zaTemp),y
.866a		7a		ply				ply 							; get position back
.866b		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 		; check )
.866e		b1 30		lda ($30),y			lda 	(codePtr),y
.8670		c8		iny				iny 							; consume in case
.8671		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8673		f0 85		beq $85fa			beq 	DimCommand
.8675		88		dey				dey 							; undo consume
.8676		60		rts				rts
.8677						_DCSize:
.8677		a9 16		lda #$16		lda	#22
.8679		4c 0d 92	jmp $920d		jmp	ErrorHandler
.867c						_DCSyntax:
.867c		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.867f						_DCRedefine:
.867f		a9 15		lda #$15		lda	#21
.8681		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8684						_DCType:
.8684		4c e0 a2	jmp $a2e0			jmp 	TypeError
.8687						_DCGetSize:
.8687		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8689		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 	; get array dimension
.868c		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.868e		f0 e7		beq $8677			beq 	_DCSize
.8690		c9 fe		cmp #$fe			cmp 	#254
.8692		f0 e3		beq $8677			beq 	_DCSize
.8694		60		rts				rts
.8695						ScaleByBaseType:
.8695		29 10		and #$10			and 	#NSBIsString 			; is it string
.8697		d0 19		bne $86b2			bne 	_SBBTString
.8699		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.869b		48		pha				pha
.869c		a5 36		lda $36				lda 	zTemp0
.869e		48		pha				pha
.869f		06 36		asl $36				asl 	zTemp0 					; x 2
.86a1		26 37		rol $37				rol 	zTemp0+1
.86a3		06 36		asl $36				asl 	zTemp0 					; x 4
.86a5		26 37		rol $37				rol 	zTemp0+1
.86a7		68		pla				pla 							; add stacked value = x 5
.86a8		65 36		adc $36				adc 	zTemp0
.86aa		85 36		sta $36				sta 	zTemp0
.86ac		68		pla				pla
.86ad		65 37		adc $37				adc 	zTemp0+1
.86af		85 37		sta $37				sta 	zTemp0+1
.86b1		60		rts				rts
.86b2						_SBBTString:
.86b2		06 36		asl $36				asl 	zTemp0
.86b4		26 37		rol $37				rol 	zTemp0+1
.86b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.86b7						Command_Dir:
.86b7		ad df 04	lda $04df			lda     DefaultDrive				; set drive to list.
.86ba		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.86bc		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.86be		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.86c1		b0 56		bcs $8719			bcs     _CDExit
.86c3						_CDEventLoop:
.86c3		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.86c6		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.86c9		b0 f8		bcs $86c3			bcs     _CDEventLoop
.86cb		ad ca 06	lda $06ca			lda     event.type
.86ce		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.86d0		f0 47		beq $8719			beq    	_CDExit
.86d2		20 d7 86	jsr $86d7			jsr     _CDMessages 				; handle various messages
.86d5		80 ec		bra $86c3			bra     _CDEventLoop
.86d7						_CDMessages:
.86d7		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.86d9		f0 15		beq $86f0			beq     _CDEVRead
.86db		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.86dd		f0 19		beq $86f8			beq     _CDEVVolume
.86df		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.86e1		f0 17		beq $86fa			beq     _CDEVFile
.86e3		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.86e5		f0 28		beq $870f			beq     _CDEVFree
.86e7		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.86e9		f0 26		beq $8711			beq     _CDEVEOF
.86eb		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.86ed		f0 22		beq $8711			beq     _CDEVEOF
.86ef		60		rts				rts
.86f0						_CDEVRead:
.86f0		ad cd 06	lda $06cd			lda     event.directory.stream
.86f3		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.86f5		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.86f8						_CDEVVolume:
.86f8		80 f6		bra $86f0			bra     _CDEVRead
.86fa						_CDEVFile:
.86fa		a9 20		lda #$20			lda 	#32
.86fc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.86ff		ad cf 06	lda $06cf			lda     event.directory.file.len
.8702		20 1c 87	jsr $871c			jsr     _CDReadData
.8705		20 66 92	jsr $9266			jsr 	PrintStringXA
.8708		a9 0d		lda #$0d			lda 	#13
.870a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.870d		80 e1		bra $86f0			bra     _CDEVRead
.870f						_CDEVFree:
.870f		80 00		bra $8711			bra     _CDEVEOF
.8711						_CDEVEOF:
.8711		ad cd 06	lda $06cd			lda     event.directory.stream
.8714		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8716		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8719						_CDExit:
.8719		4c 5e 84	jmp $845e			jmp 	WarmStart
.871c						_CDReadData:
.871c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.871e		a9 aa		lda #$aa			lda     #lineBuffer & $FF
.8720		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8722		a9 03		lda #$03			lda     #lineBuffer >> 8
.8724		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8726		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8729		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.872b		9e aa 03	stz $03aa,x			stz     lineBuffer,x
.872e		a9 aa		lda #$aa			lda 	#lineBuffer & $FF
.8730		a2 03		ldx #$03			ldx 	#lineBuffer >> 8
.8732		60		rts				rts
.8733						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8733						Command_Drive:
.8733		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger
.8736		8d df 04	sta $04df			sta 	DefaultDrive
.8739		60		rts				rts
.04df						DefaultDrive:
>04df								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.873a						EndCommand:
.873a		4c 5e 84	jmp $845e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.873d						ForCommand:
.873d		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.873f		20 37 b2	jsr $b237			jsr 	StackOpen
.8742		a2 00		ldx #$00			ldx 	#0
.8744		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm
.8747		b5 50		lda $50,x			lda 	NSStatus,x
.8749		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.874b		d0 47		bne $8794			bne		_FCError
.874d		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.874f		20 04 92	jsr $9204			jsr 	CheckNextA
.8752		e8		inx				inx
.8753		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger 			; <from> in +1
.8756		b1 30		lda ($30),y			lda 	(codePtr),y
.8758		c8		iny				iny 								; consume it
.8759		48		pha				pha 								; save on stack for later
.875a		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.875c		f0 04		beq $8762			beq 	_FCNoSyntax
.875e		c9 d9		cmp #$d9			cmp 	#KWD_TO
.8760		d0 35		bne $8797			bne 	_FCSyntaxError
.8762						_FCNoSyntax:
.8762		e8		inx				inx
.8763		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger
.8766		20 7c b2	jsr $b27c			jsr 	STKSaveCodePosition 		; save loop back position
.8769		68		pla				pla 								; restore DOWNTO or TO
.876a		5a		phy				phy 								; save Y on the stack
.876b		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.876d		f0 02		beq $8771			beq 	_FCNotDownTo
.876f		a9 02		lda #$02			lda 	#2
.8771						_FCNotDownTo:
.8771		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8772		a0 10		ldy #$10			ldy 	#16
.8774		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8776		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8778		a5 58		lda $58				lda 	NSMantissa0
.877a		91 34		sta ($34),y			sta 	(basicStack),y
.877c		a5 60		lda $60				lda 	NSMantissa1
.877e		c8		iny				iny
.877f		91 34		sta ($34),y			sta 	(basicStack),y
.8781		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8783		a2 01		ldx #$01			ldx 	#1
.8785		20 9a 87	jsr $879a			jsr 	FCIntegerToStack
.8788		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.878a		a2 02		ldx #$02			ldx 	#2
.878c		20 9a 87	jsr $879a			jsr 	FCIntegerToStack
.878f		20 b5 87	jsr $87b5			jsr 	CopyIndexToReference
.8792		7a		ply				ply 								; restore position
.8793		60		rts				rts
.8794						_FCError:
.8794		4c e0 a2	jmp $a2e0			jmp 	TypeError
.8797						_FCSyntaxError:
.8797		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.879a						FCIntegerToStack:
.879a		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.879c		10 03		bpl $87a1			bpl	 	_FCNotNegative
.879e		20 21 a1	jsr $a121			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.87a1						_FCNotNegative:
.87a1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.87a3		91 34		sta ($34),y			sta 	(basicStack),y
.87a5		c8		iny				iny
.87a6		b5 60		lda $60,x			lda 	NSMantissa1,x
.87a8		91 34		sta ($34),y			sta 	(basicStack),y
.87aa		c8		iny				iny
.87ab		b5 68		lda $68,x			lda 	NSMantissa2,x
.87ad		91 34		sta ($34),y			sta 	(basicStack),y
.87af		c8		iny				iny
.87b0		b5 70		lda $70,x			lda 	NSMantissa3,x
.87b2		91 34		sta ($34),y			sta 	(basicStack),y
.87b4		60		rts				rts
.87b5						CopyIndexToReference:
.87b5		5a		phy				phy
.87b6		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.87b8		38		sec				sec 								; (because we copy from offset 8)
.87b9		b1 34		lda ($34),y			lda 	(basicStack),y
.87bb		e9 08		sbc #$08			sbc 	#8
.87bd		85 36		sta $36				sta 	zTemp0
.87bf		c8		iny				iny
.87c0		b1 34		lda ($34),y			lda 	(basicStack),y
.87c2		e9 00		sbc #$00			sbc 	#0
.87c4		85 37		sta $37				sta 	zTemp0+1
.87c6		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.87c8		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.87ca		b1 34		lda ($34),y			lda 	(basicStack),y
.87cc		0a		asl a				asl 	a 							; into carry
.87cd		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.87cf		90 14		bcc $87e5			bcc 	_CITRNormal
.87d1		38		sec				sec
.87d2						_CITRNegative:
.87d2		a9 00		lda #$00			lda 	#0
.87d4		f1 34		sbc ($34),y			sbc 	(basicStack),y
.87d6		91 36		sta ($36),y			sta 	(zTemp0),y
.87d8		c8		iny				iny
.87d9		ca		dex				dex
.87da		d0 f6		bne $87d2			bne 	_CITRNegative
.87dc		88		dey				dey 								; look at MSB of mantissa
.87dd		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.87df		09 80		ora #$80			ora 	#$80
.87e1		91 36		sta ($36),y			sta 	(zTemp0),y
.87e3		7a		ply				ply
.87e4		60		rts				rts
.87e5						_CITRNormal:
.87e5		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.87e7		91 36		sta ($36),y			sta 	(zTemp0),y
.87e9		c8		iny				iny
.87ea		ca		dex				dex
.87eb		d0 f8		bne $87e5			bne 	_CITRNormal
.87ed		7a		ply				ply 								; and exit.
.87ee		60		rts				rts
.87ef						NextCommand:
.87ef		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.87f1		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.87f3		20 64 b2	jsr $b264			jsr 	StackCheckFrame
.87f6		5a		phy				phy
.87f7		a0 10		ldy #$10			ldy 	#16 						; get the step count
.87f9		b1 34		lda ($34),y			lda 	(basicStack),y
.87fb		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.87fd		30 02		bmi $8801			bmi 	_NCStepNeg
.87ff		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8801						_NCStepNeg:
.8801		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8803		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8805		18		clc				clc
.8806						_NCBump:
.8806		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8808		91 34		sta ($34),y			sta 	(basicStack),y
.880a		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.880c		c8		iny				iny 								; next byte
.880d		ca		dex				dex 								; do four times
.880e		d0 f6		bne $8806			bne 	_NCBump
.8810		20 b5 87	jsr $87b5			jsr		CopyIndexToReference		; copy it to the reference variable.
.8813		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8815		b1 34		lda ($34),y			lda 	(basicStack),y
.8817		0a		asl a				asl 	a 							; sign bit to carry
.8818		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.881a		85 38		sta $38				sta 	zTemp1
.881c		90 02		bcc $8820			bcc 	_NCCompRev 					; use if step is +ve
.881e		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8820						_NCCompRev:
.8820		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8822		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8824		85 39		sta $39				sta 	zTemp1+1
.8826		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8828		38		sec				sec
.8829						_NCCompare:
.8829		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.882b		b1 34		lda ($34),y			lda 	(basicStack),y
.882d		a4 39		ldy $39				ldy 	zTemp1+1
.882f		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8831		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8833		e6 39		inc $39				inc 	zTemp1+1
.8835		ca		dex				dex 								; do it 4 times.
.8836		d0 f1		bne $8829			bne 	_NCCompare
.8838		50 02		bvc $883c			bvc 	_NCNoOverflow 				; convert to signed comparison
.883a		49 80		eor #$80			eor 	#$80
.883c						_NCNoOverflow:
.883c		7a		ply				ply 								; restore Y position
.883d		0a		asl a				asl 	a 							; is bit 7 set.
.883e		90 04		bcc $8844			bcc 	_NCLoopBack 				; if no , >= so loop back
.8840		20 56 b2	jsr $b256			jsr 	StackClose 					; exit the loop
.8843		60		rts				rts
.8844						_NCLoopBack:
.8844		20 8d b2	jsr $b28d			jsr 	STKLoadCodePosition 		; loop back
.8847		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8848						Command_GOSUB:
.8848		a2 00		ldx #$00			ldx 	#0
.884a		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.884d		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.884f		20 37 b2	jsr $b237			jsr 	StackOpen 					; create frame
.8852		20 7c b2	jsr $b27c			jsr 	STKSaveCodePosition 		; save current position
.8855		4c 6b 88	jmp $886b			jmp 	GotoStackX
.8858						Command_RETURN:
.8858		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.885a		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.885c		20 64 b2	jsr $b264			jsr 	StackCheckFrame
.885f		20 8d b2	jsr $b28d			jsr 	STKLoadCodePosition 		; restore code position
.8862		20 56 b2	jsr $b256			jsr 	StackClose
.8865		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8866						GotoCommand:
.8866		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8868		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.886b						GotoStackX:
.886b		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.886d		48		pha				pha 								; it is slightly inefficient, just in cases.
.886e		b5 58		lda $58,x			lda 	NSMantissa0,x
.8870		fa		plx				plx
.8871		20 e3 a8	jsr $a8e3			jsr 	MemorySearch 				; transfer to line number AX.
.8874		90 05		bcc $887b			bcc 	_GotoError 					; not found, off end.
.8876		d0 03		bne $887b			bne 	_GotoError 					; not found exactly
.8878		4c ea 8d	jmp $8dea			jmp 	RunNewLine 					; and go straight to new line code.
.887b						_GotoError:
.887b		a9 0d		lda #$0d		lda	#13
.887d		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8880						IfCommand:
.8880		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8882		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber
.8885		b1 30		lda ($30),y			lda 	(codePtr),y
.8887		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8889		d0 0a		bne $8895			bne 	_IfStructured 				; we still support it.
.888b		c8		iny				iny 								; consume THEN
.888c		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; is it zero
.888f		f0 01		beq $8892			beq 	_IfFail 					; if fail, go to next line
.8891		60		rts				rts 								; if THEN just continue
.8892						_IfFail:
.8892		4c d2 8d	jmp $8dd2			jmp 	EOLCommand
.8895						_IfStructured:
.8895		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; is it zero
.8898		d0 07		bne $88a1			bne 	_IfExit 					; if not, then continue normally.
.889a		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.889c		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.889e		20 4f 91	jsr $914f			jsr 	ScanForward 				; and run from there
.88a1						_IfExit:
.88a1		60		rts				rts
.88a2						ElseCode:
.88a2		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.88a4		aa		tax				tax 								; so just go to the structure exit
.88a5		20 4f 91	jsr $914f			jsr 	ScanForward
.88a8		60		rts				rts
.88a9						EndIf:
.88a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.88aa						Command_Input:
.88aa		9c a8 02	stz $02a8			stz 	isPrintFlag
.88ad		80 0c		bra $88bb			bra 	Command_IP_Main
.88af						Command_CPrint:
.88af		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.88b1		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.88b4		80 05		bra $88bb			bra 	Command_IP_Main
.88b6						Command_Print:
.88b6		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.88b8		8d a8 02	sta $02a8			sta 	isPrintFlag 				; clear input flag
.88bb						Command_IP_Main:
.88bb		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88bc						_CPLoop:
.88bc		08		php				php 								; save last action flag
.88bd		b1 30		lda ($30),y			lda 	(codePtr),y
.88bf		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88c1		f0 54		beq $8917			beq 	_CPExit
.88c3		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88c5		f0 50		beq $8917			beq 	_CPExit
.88c7		68		pla				pla 								; throw last action flag
.88c8		b1 30		lda ($30),y			lda 	(codePtr),y
.88ca		c8		iny				iny
.88cb		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88cd		f0 45		beq $8914			beq 	_CPContinueWithSameLine
.88cf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88d1		f0 3c		beq $890f			beq 	_CPTab
.88d3		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88d5		f0 34		beq $890b			beq 	_CPNewLine
.88d7		88		dey				dey 								; undo the get.
.88d8		20 0f 97	jsr $970f			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.88db		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.88dd		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.88df		f0 0d		beq $88ee			beq 	_CPIsValue 					; no, display it.
.88e1		ad a8 02	lda $02a8			lda 	isPrintFlag 				; if print, dereference and print.
.88e4		d0 05		bne $88eb			bne 	_CPIsPrint 					; otherwise display.
.88e6		20 20 89	jsr $8920			jsr 	CIInputValue 				; input a value to the reference
.88e9		80 20		bra $890b			bra 	_CPNewLine
.88eb						_CPIsPrint:
.88eb		20 d4 99	jsr $99d4			jsr 	Dereference 				; dereference if required.
.88ee						_CPIsValue:
.88ee		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.88f0		29 10		and #$10			and 	#NSBIsString
.88f2		f0 09		beq $88fd			beq 	_CPNumber
.88f4		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.88f6		a5 58		lda $58				lda 	NSMantissa0
.88f8		20 83 89	jsr $8983			jsr 	CPPrintStringXA
.88fb		80 be		bra $88bb			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.88fd						_CPNumber:
.88fd		a9 05		lda #$05			lda 	#5 							; maximum decimals
.88ff		20 8d 9f	jsr $9f8d			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8902		a2 04		ldx #$04			ldx 	#decimalBuffer >> 8
.8904		a9 c9		lda #$c9			lda 	#decimalBuffer & $FF
.8906		20 83 89	jsr $8983			jsr 	CPPrintStringXA 			; print it.
.8909		80 b0		bra $88bb			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.890b						_CPNewLine:
.890b		a9 0d		lda #$0d			lda 	#13
.890d		80 02		bra $8911			bra 	_CPPrintCharDirect
.890f						_CPTab:
.890f		a9 09		lda #$09			lda 	#9 							; print TAB
.8911						_CPPrintCharDirect:
.8911		20 9e 89	jsr $899e			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8914						_CPContinueWithSameLine:
.8914		38		sec				sec 								; loop round with carry set, which
.8915		80 a5		bra $88bc			bra 	_CPLoop 					; will inhibit final CR
.8917						_CPExit:
.8917		28		plp				plp 								; get last action flag
.8918		b0 05		bcs $891f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.891a		a9 0d		lda #$0d			lda 	#13 						; print new line
.891c		20 9e 89	jsr $899e			jsr 	CPPVControl
.891f						_CPExit2:
.891f		60		rts				rts
.8920						CIInputValue:
.8920		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8922						_CIInputLine:
.8922		20 a1 89	jsr $89a1			jsr 	CPInputVector 				; get key
.8925		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8927		f0 1f		beq $8948			beq 	_CIHaveValue
.8929		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.892b		f0 11		beq $893e			beq 	_CIBackspace
.892d		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.892f		90 f1		bcc $8922			bcc 	_CIInputLine
.8931		e0 50		cpx #$50			cpx 	#80 						; max length
.8933		b0 ed		bcs $8922			bcs 	_CIInputLine
.8935		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.8938		e8		inx				inx
.8939		20 96 89	jsr $8996			jsr 	CPPrintVector 				; echo it.
.893c		80 e4		bra $8922			bra 	_CIInputLine
.893e						_CIBackspace:
.893e		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8940		f0 e0		beq $8922			beq 	_CIInputLine
.8942		20 96 89	jsr $8996			jsr 	CPPrintVector 				; echo it.
.8945		ca		dex				dex
.8946		80 da		bra $8922			bra 	_CIInputLine
.8948						_CIHaveValue:
.8948		9e aa 03	stz $03aa,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.894b		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.894d		29 10		and #$10			and 	#NSBIsString
.894f		f0 17		beq $8968			beq 	_CIAssignNumber 			; assign a number
.8951		a2 01		ldx #$01			ldx 	#1
.8953		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.8955		95 58		sta $58,x			sta 	NSMantissa0,x
.8957		a9 03		lda #$03			lda 	#lineBuffer >> 8
.8959		95 60		sta $60,x			sta 	NSMantissa1,x
.895b		74 68		stz $68,x			stz 	NSMantissa2,x
.895d		74 70		stz $70,x			stz 	NSMantissa3,x
.895f		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8961		95 50		sta $50,x			sta  	NSStatus,x
.8963		ca		dex				dex 								; X = 0
.8964		20 dd 89	jsr $89dd			jsr 	AssignVariable
.8967		60		rts				rts
.8968						_CIAssignNumber:
.8968		a9 aa		lda #$aa			lda 	#lineBuffer & $FF 			; set up to point to new string
.896a		85 36		sta $36				sta 	zTemp0
.896c		a9 03		lda #$03			lda 	#lineBuffer >> 8
.896e		85 37		sta $37				sta 	zTemp0+1
.8970		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8972		20 0f 9f	jsr $9f0f			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8975		90 07		bcc $897e			bcc 	_CIIsOkay
.8977		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8979		20 96 89	jsr $8996			jsr 	CPPrintVector
.897c		80 a2		bra $8920			bra 	CIInputValue
.897e						_CIIsOkay:
.897e		ca		dex				dex 								; X = 0
.897f		20 dd 89	jsr $89dd			jsr 	AssignVariable
.8982		60		rts				rts
.8983						CPPrintStringXA:
.8983		5a		phy				phy
.8984		86 37		stx $37				stx 	zTemp0+1
.8986		85 36		sta $36				sta 	zTemp0
.8988		a0 00		ldy #$00			ldy 	#0
.898a						_PSXALoop:
.898a		b1 36		lda ($36),y			lda 	(zTemp0),y
.898c		f0 06		beq $8994			beq 	_PSXAExit
.898e		20 96 89	jsr $8996			jsr 	CPPrintVector
.8991		c8		iny				iny
.8992		80 f6		bra $898a			bra 	_PSXALoop
.8994						_PSXAExit:
.8994		7a		ply				ply
.8995		60		rts				rts
.8996						CPPrintVector:
.8996		2c a8 02	bit $02a8			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8999		30 03		bmi $899e			bmi 	CPPVControl
.899b		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.899e						CPPVControl:
.899e		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.89a1						CPInputVector:
.89a1		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.89a4						LetCommand:
.89a4		a2 00		ldx #$00			ldx 	#0
.89a6		b1 30		lda ($30),y			lda 	(codePtr),y
.89a8		c9 10		cmp #$10			cmp 	#KWD_AT
.89aa		d0 14		bne $89c0			bne 	_LCStandard
.89ac		c8		iny				iny 								; skip equal
.89ad		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.89b0		20 d4 99	jsr $99d4			jsr 	Dereference 				; dereference it to a value
.89b3		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.89b5		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.89b7		95 50		sta $50,x			sta 	NSStatus,x
.89b9		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.89bb		d0 0f		bne $89cc			bne 	_LCMain
.89bd		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; was a reference before.
.89c0						_LCStandard:
.89c0		ad f9 96	lda $96f9			lda 	PrecedenceLevel+"*"			; precedence > this
.89c3		20 13 97	jsr $9713			jsr 	EvaluateExpressionAtPrecedence
.89c6		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.89c8		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.89ca		f0 0e		beq $89da			beq 	_LetGoProc 					; it's a procedure call.
.89cc						_LCMain:
.89cc		a9 3d		lda #$3d			lda 	#"=" 						; check =
.89ce		20 04 92	jsr $9204			jsr 	CheckNextA
.89d1		e8		inx				inx 								; RHS
.89d2		20 9d a0	jsr $a09d			jsr 	EvaluateValue
.89d5		ca		dex				dex
.89d6		20 dd 89	jsr $89dd			jsr 	AssignVariable
.89d9		60		rts				rts
.89da						_LetGoProc:
.89da		4c a8 8c	jmp $8ca8			jmp 	CallProcedure
.89dd						AssignVariable:
.89dd		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.89df		48		pha				pha 								; save a copy
.89e0		55 51		eor $51,x			eor 	NSStatus+1,x
.89e2		29 10		and #$10			and 	#NSBIsString
.89e4		d0 0b		bne $89f1			bne 	_ASError
.89e6		68		pla				pla 								; get back
.89e7		29 10		and #$10			and 	#NSBIsString 				; check type
.89e9		d0 03		bne $89ee			bne 	_ASString
.89eb		4c 12 99	jmp $9912			jmp 	AssignNumber
.89ee						_ASString:
.89ee		4c 70 99	jmp $9970			jmp 	AssignString
.89f1						_ASError:
.89f1		4c e0 a2	jmp $a2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.89f4						Command_List:
.89f4		9c a6 02	stz $02a6			stz 	listIndent 					; reset indent.
.89f7		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.89f9		20 8f 80	jsr $808f			jsr 	SNDCommand
.89fc		b1 30		lda ($30),y			lda 	(codePtr),y
.89fe		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8a00		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8a02		f0 6e		beq $8a72			beq 	_CLListProcedure
.8a04		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8a06		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8a08		a9 ff		lda #$ff			lda 	#$FF
.8a0a		85 5f		sta $5f				sta 	NSMantissa0+7
.8a0c		85 67		sta $67				sta 	NSMantissa1+7
.8a0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8a10		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a12		f0 1a		beq $8a2e			beq 	_CLSecond
.8a14		20 ef 8a	jsr $8aef			jsr 	CLIsDigit 					; if not digit, list all
.8a17		b0 20		bcs $8a39			bcs 	_CLStart
.8a19		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8a1b		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.8a1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8a20		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a22		f0 0a		beq $8a2e			beq 	_CLSecond 					; if so go get it
.8a24		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8a26		85 5f		sta $5f				sta 	NSMantissa0+7
.8a28		a5 64		lda $64				lda 	NSMantissa1+4
.8a2a		85 67		sta $67				sta 	NSMantissa1+7
.8a2c		80 0b		bra $8a39			bra 	_CLStart
.8a2e						_CLSecond:
.8a2e		c8		iny				iny 								; consume comma
.8a2f		20 ef 8a	jsr $8aef			jsr 	CLIsDigit 					; digit found
.8a32		b0 05		bcs $8a39			bcs 	_CLStart 					; if not, continue listing
.8a34		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8a36		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.8a39						_CLStart
.8a39		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a3b		85 30		sta $30				sta 	codePtr
.8a3d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a3f		85 31		sta $31				sta 	codePtr+1
.8a41						_CLLoop:
.8a41		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8a44		f0 27		beq $8a6d			beq 	_CLBreak
.8a46		b2 30		lda ($30)			lda 	(codePtr)
.8a48		f0 20		beq $8a6a			beq 	_CLExit
.8a4a		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8a4c		20 de 8a	jsr $8ade			jsr 	CLCompareLineNo
.8a4f		90 0c		bcc $8a5d			bcc 	_CLNext
.8a51		a2 07		ldx #$07			ldx 	#7
.8a53		20 de 8a	jsr $8ade			jsr 	CLCompareLineNo
.8a56		f0 02		beq $8a5a			beq 	_CLDoThisOne
.8a58		b0 03		bcs $8a5d			bcs 	_CLNext
.8a5a						_CLDoThisOne:
.8a5a		20 cb 8a	jsr $8acb			jsr 	CLListOneLine 				; routine to list the current line.
.8a5d						_CLNext:
.8a5d		18		clc				clc
.8a5e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a60		65 30		adc $30				adc 	codePtr
.8a62		85 30		sta $30				sta 	codePtr
.8a64		90 02		bcc $8a68			bcc 	_CREExit
.8a66		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a68						_CREExit:
.8a68		80 d7		bra $8a41			bra 	_CLLoop
.8a6a						_CLExit:
.8a6a		4c 5e 84	jmp $845e			jmp 	WarmStart
.8a6d						_CLBreak:
.8a6d		a9 01		lda #$01		lda	#1
.8a6f		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8a72						_CLListProcedure:
.8a72		b1 30		lda ($30),y			lda 	(codePtr),y
.8a74		85 38		sta $38				sta 	zTemp1
.8a76		c8		iny				iny
.8a77		b1 30		lda ($30),y			lda 	(codePtr),y
.8a79		85 39		sta $39				sta 	zTemp1+1
.8a7b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a7d		85 30		sta $30				sta 	codePtr
.8a7f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a81		85 31		sta $31				sta 	codePtr+1
.8a83						_CLLPSearch:
.8a83		b2 30		lda ($30)			lda 	(codePtr)
.8a85		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8a87		f0 e1		beq $8a6a			beq 	_CLExit
.8a89		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8a8b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a8d		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8a8f		d0 0e		bne $8a9f			bne 	_CLLPNext
.8a91		c8		iny				iny 								; check if PROC this.
.8a92		b1 30		lda ($30),y			lda 	(codePtr),y
.8a94		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8a96		d0 07		bne $8a9f			bne 	_CLLPNext
.8a98		c8		iny				iny
.8a99		b1 30		lda ($30),y			lda 	(codePtr),y
.8a9b		c5 39		cmp $39				cmp 	zTemp1+1
.8a9d		f0 0d		beq $8aac			beq 	_CLLPFound
.8a9f						_CLLPNext:
.8a9f		18		clc				clc
.8aa0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8aa2		65 30		adc $30				adc 	codePtr
.8aa4		85 30		sta $30				sta 	codePtr
.8aa6		90 02		bcc $8aaa			bcc 	_CREExit
.8aa8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8aaa						_CREExit:
.8aaa		80 d7		bra $8a83			bra 	_CLLPSearch
.8aac						_CLLPFound:
.8aac		b2 30		lda ($30)			lda 	(codePtr)
.8aae		f0 ba		beq $8a6a			beq 	_CLExit
.8ab0		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8ab2		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab4		48		pha				pha
.8ab5		20 cb 8a	jsr $8acb			jsr 	CLListOneLine 				; list line and go forward
.8ab8		18		clc				clc
.8ab9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8abb		65 30		adc $30				adc 	codePtr
.8abd		85 30		sta $30				sta 	codePtr
.8abf		90 02		bcc $8ac3			bcc 	_CREExit
.8ac1		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ac3						_CREExit:
.8ac3		68		pla				pla 								; reached ENDPROC ?
.8ac4		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8ac6		d0 e4		bne $8aac			bne 	_CLLPFound
.8ac8		4c 5e 84	jmp $845e			jmp 	WarmStart
.8acb						CLListOneLine:
.8acb		20 b2 91	jsr $91b2			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ace		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ad1		a2 02		ldx #$02			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ad3		a9 ad		lda #$ad			lda 	#(tokenBuffer & $FF)
.8ad5		20 66 92	jsr $9266			jsr 	PrintStringXA
.8ad8		a9 0d		lda #$0d			lda 	#13 						; new line
.8ada		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8add		60		rts				rts
.8ade						CLCompareLineNo:
.8ade		38		sec				sec
.8adf		a0 01		ldy #$01			ldy 	#1
.8ae1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ae3		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8ae5		85 36		sta $36				sta 	zTemp0
.8ae7		c8		iny				iny
.8ae8		b1 30		lda ($30),y			lda 	(codePtr),y
.8aea		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8aec		05 36		ora $36				ora 	zTemp0
.8aee		60		rts				rts
.8aef						CLIsDigit:
.8aef		b1 30		lda ($30),y			lda 	(codePtr),y
.8af1		c9 30		cmp #$30			cmp 	#"0"
.8af3		90 03		bcc $8af8			bcc	 	_CLIDExitFalse
.8af5		c9 3a		cmp #$3a			cmp 	#"9"+1
.8af7		60		rts				rts
.8af8						_CLIDExitFalse:
.8af8		38		sec				sec
.8af9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8afa						Command_Load:
.8afa		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; file name to load
.8afd		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8aff		a5 36		lda $36				lda 	zTemp0
.8b01		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8b04		b0 44		bcs $8b4a			bcs 	CLErrorHandler 				; error, so fail.
.8b06		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.8b09		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8b0c		20 61 8c	jsr $8c61			jsr 	NewProgram 					; does the actual NEW.
.8b0f		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.8b12						_CLLoop:
.8b12		20 58 8b	jsr $8b58			jsr 	LoadReadLine 				; get next line.
.8b15		f0 10		beq $8b27			beq 	_CLExit 					; end, exit.
.8b17		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8b1a		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.8b1d		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.8b20		f0 f0		beq $8b12			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8b22		20 39 84	jsr $8439			jsr 	EditProgramCode 			; do the editing etc.
.8b25		80 eb		bra $8b12			bra 	_CLLoop
.8b27						_CLExit:
.8b27		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8b2a		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8b2d						CLComplete:
.8b2d		a9 37		lda #$37			lda 	#_CLCMsg & $FF
.8b2f		a2 8b		ldx #$8b			ldx 	#_CLCMsg >> 8
.8b31		20 66 92	jsr $9266			jsr 	PrintStringXA
.8b34		4c 5e 84	jmp $845e			jmp 	WarmStart
.8b37						_CLCMsg:
>8b37		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8b3f		2e 0d 00
.8b42						CLCloseError:
.8b42		48		pha				pha
.8b43		ad e1 04	lda $04e1			lda 	CurrentFileStream
.8b46		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8b49		68		pla				pla
.8b4a						CLErrorHandler:
.8b4a		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8b4c		f0 05		beq $8b53			beq 	_CLEHNotFound
.8b4e		a9 1a		lda #$1a		lda	#26
.8b50		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8b53						_CLEHNotFound:
.8b53		a9 19		lda #$19		lda	#25
.8b55		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8b58						LoadReadLine:
.8b58		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b5a		20 74 8b	jsr $8b74			jsr 	LoadReadCharacter
.8b5d		f0 14		beq $8b73			beq 	_LRLExit 					; eof ?
.8b5f		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b61		90 f5		bcc $8b58			bcc 	LoadReadLine
.8b63						_LRLLoop:
.8b63		9d aa 03	sta $03aa,x			sta 	lineBuffer,x 				; write into line buffer
.8b66		9e ab 03	stz $03ab,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b69		e8		inx				inx
.8b6a		20 74 8b	jsr $8b74			jsr 	LoadReadCharacter 			; next line
.8b6d		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b6f		b0 f2		bcs $8b63			bcs 	_LRLLoop
.8b71		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b73						_LRLExit:
.8b73		60		rts				rts
.8b74						LoadReadCharacter:
.8b74		da		phx				phx
.8b75		5a		phy				phy
.8b76		ad e0 04	lda $04e0			lda 	LoadEOFFlag 				; already done EOF.
.8b79		d0 0c		bne $8b87			bne 	_LRCIsEOF
.8b7b		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8b7e		90 09		bcc $8b89			bcc		_LRCExit 					; read okay.
.8b80		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b82		d0 be		bne $8b42			bne 	CLCloseError
.8b84		ce e0 04	dec $04e0			dec 	LoadEOFFlag
.8b87						_LRCIsEOF:
.8b87		a9 00		lda #$00			lda 	#0
.8b89						_LRCExit:
.8b89		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b8b		d0 02		bne $8b8f			bne 	_LRCNotTab
.8b8d		a9 20		lda #$20			lda 	#' '
.8b8f						_LRCNotTab:
.8b8f		c9 0a		cmp #$0a			cmp 	#$0A
.8b91		d0 02		bne $8b95			bne 	_LRCNotLF
.8b93		a9 0d		lda #$0d			lda 	#$0D
.8b95						_LRCNotLF:
.8b95		7a		ply				ply
.8b96		fa		plx				plx
.8b97		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b99		60		rts				rts
.04e0						LoadEOFFlag:
>04e0								.fill 	1
.04e1						CurrentFileStream:
>04e1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8b9a						Command_LOCAL:
.8b9a		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8b9c		20 a8 8b	jsr $8ba8			jsr 	LocaliseNextTerm 			; convert term to a local.
.8b9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8ba1		c8		iny				iny
.8ba2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ba4		f0 f4		beq $8b9a			beq 	Command_LOCAL 				; if so, localise another variable.
.8ba6		88		dey				dey 								; unpick pre-get
.8ba7		60		rts				rts
.8ba8						LocaliseNextTerm:
.8ba8		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm 				; evaluate the term
.8bab		b5 50		lda $50,x			lda 	NSStatus,x
.8bad		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8baf		f0 5c		beq $8c0d			beq		_LNTError
.8bb1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8bb3		85 36		sta $36				sta 	zTemp0
.8bb5		b5 60		lda $60,x			lda 	NSMantissa1,x
.8bb7		85 37		sta $37				sta  	zTemp0+1
.8bb9		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8bbb		29 10		and #$10			and 	#NSBIsString
.8bbd		d0 1e		bne $8bdd			bne 	_LNTPushString
.8bbf		5a		phy				phy
.8bc0		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8bc2						_LNTPushNumLoop:
.8bc2		b1 36		lda ($36),y			lda		(zTemp0),y
.8bc4		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bc7		c8		iny				iny
.8bc8		c0 05		cpy #$05			cpy 	#5
.8bca		d0 f6		bne $8bc2			bne 	_LNTPushNumLoop
.8bcc		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8bce		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bd1		a5 37		lda $37				lda 	zTemp0+1
.8bd3		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bd6		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8bd8		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bdb		7a		ply				ply
.8bdc		60		rts				rts
.8bdd						_LNTPushString:
.8bdd		5a		phy				phy
.8bde		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8be0		85 38		sta $38				sta 	zTemp1
.8be2		a0 01		ldy #$01			ldy 	#1
.8be4		b1 36		lda ($36),y			lda 	(zTemp0),y
.8be6		85 39		sta $39				sta 	zTemp1+1
.8be8		a0 00		ldy #$00			ldy 	#0 							; output string
.8bea		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8bec		f0 0a		beq $8bf8			beq 	_LNTStringOut
.8bee						_LNTPushStrLoop:
.8bee		b1 38		lda ($38),y			lda 	(zTemp1),y
.8bf0		f0 06		beq $8bf8			beq 	_LNTStringOut
.8bf2		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bf5		c8		iny				iny
.8bf6		80 f6		bra $8bee			bra 	_LNTPushStrLoop
.8bf8						_LNTStringOut:
.8bf8		98		tya				tya									; output length (chars written).
.8bf9		20 16 b2	jsr $b216			jsr 	StackPushByte
.8bfc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8bfe		20 16 b2	jsr $b216			jsr 	StackPushByte
.8c01		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c03		20 16 b2	jsr $b216			jsr 	StackPushByte
.8c06		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8c08		20 16 b2	jsr $b216			jsr 	StackPushByte
.8c0b		7a		ply				ply
.8c0c		60		rts				rts
.8c0d						_LNTError:
.8c0d		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.8c10						LocalPopValue:
.8c10		20 2e b2	jsr $b22e			jsr 	StackPopByte
.8c13		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8c15		d0 17		bne $8c2e			bne 	_LPVString
.8c17		20 2e b2	jsr $b22e			jsr 	StackPopByte 				; address
.8c1a		85 37		sta $37				sta 	zTemp0+1
.8c1c		20 2e b2	jsr $b22e			jsr 	StackPopByte
.8c1f		85 36		sta $36				sta 	zTemp0
.8c21		5a		phy				phy
.8c22		a0 04		ldy #$04			ldy 	#4 							; copy back
.8c24						_LPVNumberCopy:
.8c24		20 2e b2	jsr $b22e			jsr 	StackPopByte
.8c27		91 36		sta ($36),y			sta 	(zTemp0),y
.8c29		88		dey				dey
.8c2a		10 f8		bpl $8c24			bpl 	_LPVNumberCopy
.8c2c		7a		ply				ply 								; and complete
.8c2d		60		rts				rts
.8c2e						_LPVString:
.8c2e		20 2e b2	jsr $b22e			jsr 	StackPopByte 				; address of record copied to zTemp0
.8c31		85 37		sta $37				sta 	zTemp0+1
.8c33		20 2e b2	jsr $b22e			jsr 	StackPopByte
.8c36		85 36		sta $36				sta 	zTemp0
.8c38		5a		phy				phy
.8c39		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8c3b		85 38		sta $38				sta 	zTemp1
.8c3d		a0 01		ldy #$01			ldy 	#1
.8c3f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c41		85 39		sta $39				sta 	zTemp1+1
.8c43		20 2e b2	jsr $b22e			jsr 	StackPopByte 				; # chars to get => y
.8c46		a8		tay				tay
.8c47		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8c49		f0 0e		beq $8c59			beq 	_LPVStringCopied
.8c4b		a9 00		lda #$00			lda 	#0 							; NULL on end
.8c4d		91 38		sta ($38),y			sta 	(zTemp1),y
.8c4f						_LPVStringCopy:
.8c4f		88		dey				dey
.8c50		30 07		bmi $8c59			bmi 	_LPVStringCopied
.8c52		20 2e b2	jsr $b22e			jsr 	StackPopByte
.8c55		91 38		sta ($38),y			sta 	(zTemp1),y
.8c57		80 f6		bra $8c4f			bra 	_LPVStringCopy
.8c59						_LPVStringCopied:
.8c59		fa		plx				plx
.8c5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8c5b						NewCommand:
.8c5b		20 61 8c	jsr $8c61			jsr 	NewProgram 					; does the actual NEW.
.8c5e		4c 5e 84	jmp $845e			jmp 	WarmStart 					; and warm starts straight away.
.8c61						NewProgram:
.8c61		20 c5 a8	jsr $a8c5			jsr 	MemoryNew
.8c64		9c 00 08	stz $0800			stz 	VariableSpace 				; erase all variables.
.8c67		20 92 85	jsr $8592			jsr 	ClearCommand 				; clear everything.
.8c6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8c6b						PokeBCommand:
.8c6b		a9 01		lda #$01			lda 	#1
.8c6d		80 0c		bra $8c7b			bra 	PokeCommand
.8c6f						PokeWCommand:
.8c6f		a9 02		lda #$02			lda 	#2
.8c71		80 08		bra $8c7b			bra 	PokeCommand
.8c73						PokeLCommand:
.8c73		a9 03		lda #$03			lda 	#3
.8c75		80 04		bra $8c7b			bra 	PokeCommand
.8c77						PokeDCommand:
.8c77		a9 04		lda #$04			lda 	#4
.8c79		80 00		bra $8c7b			bra 	PokeCommand
.8c7b						PokeCommand:
.8c7b		48		pha				pha 								; save count on stack
.8c7c		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8c7e		20 d8 a0	jsr $a0d8			jsr		Evaluate16BitInteger 		; address
.8c81		20 fc 91	jsr $91fc			jsr 	CheckComma
.8c84		e8		inx				inx
.8c85		20 c5 a0	jsr $a0c5			jsr		EvaluateInteger 			; data
.8c88		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8c8a		85 36		sta $36				sta 	zTemp0
.8c8c		a5 60		lda $60				lda 	NSMantissa1
.8c8e		85 37		sta $37				sta 	zTemp0+1
.8c90		68		pla				pla 								; count -> zTemp1
.8c91		85 38		sta $38				sta 	zTemp1
.8c93		5a		phy				phy 								; save Y position.
.8c94		a0 00		ldy #$00			ldy 	#0 							; index to write
.8c96		a2 00		ldx #$00			ldx 	#0 							; index to read
.8c98						_PCLoop:
.8c98		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8c9a		91 36		sta ($36),y			sta 	(zTemp0),y
.8c9c		c8		iny				iny 								; next byte to write
.8c9d		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8c9e		18		clc				clc
.8c9f		69 08		adc #$08			adc 	#MathStackSize
.8ca1		aa		tax				tax
.8ca2		c6 38		dec $38				dec 	zTemp1 						; done them all
.8ca4		d0 f2		bne $8c98			bne 	_PCLoop
.8ca6		7a		ply				ply 								; restore position.
.8ca7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8ca8						CallProcedure:
.8ca8		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8caa		b1 30		lda ($30),y			lda 	(codePtr),y
.8cac		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8cae		f0 0c		beq $8cbc			beq 	_CPEndParam
.8cb0						_CPParamLoop:
.8cb0		20 9d a0	jsr $a09d			jsr 	EvaluateValue 				; get parameter onto stack
.8cb3		e8		inx				inx 								; bump next stack
.8cb4		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb6		c8		iny				iny
.8cb7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8cb9		f0 f5		beq $8cb0			beq 	_CPParamLoop
.8cbb		88		dey				dey 								; unpick.
.8cbc						_CPEndParam:
.8cbc		8e 96 02	stx $0296			stx 	lastParameter 				; save the last parameters index.
.8cbf		c8		iny				iny									; skip right bracket
.8cc0		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8cc2		20 37 b2	jsr $b237			jsr 	StackOpen
.8cc5		20 7c b2	jsr $b27c			jsr 	STKSaveCodePosition 		; save loop position
.8cc8		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8cca		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ccc		a5 60		lda $60				lda 	NSMantissa1
.8cce		85 37		sta $37				sta 	zTemp0+1
.8cd0		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8cd2		b2 36		lda ($36)			lda 	(zTemp0)
.8cd4		85 30		sta $30				sta 	safePtr
.8cd6		b1 36		lda ($36),y			lda 	(zTemp0),y
.8cd8		85 31		sta $31				sta 	safePtr+1
.8cda		c8		iny				iny
.8cdb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8cdd		85 32		sta $32				sta 	safePtr+2
.8cdf		c8		iny				iny
.8ce0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ce2		85 33		sta $33				sta 	safePtr+3
.8ce4		c8		iny				iny 								; get Y offset -> Y
.8ce5		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ce7		a8		tay				tay
.8ce8		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8cea		ec 96 02	cpx $0296			cpx	 	lastParameter 				; check zero parameters at the start
.8ced		f0 13		beq $8d02			beq 	_ParamExit 					; if so, exit.
.8cef						_ParamExtract:
.8cef		ca		dex				dex 								; put a local term on the level before
.8cf0		20 a8 8b	jsr $8ba8			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8cf3		20 dd 89	jsr $89dd			jsr 	AssignVariable 				; assign stacked value to the variable.
.8cf6		e8		inx				inx 								; advance to next parameter to do.
.8cf7		e8		inx				inx
.8cf8		ec 96 02	cpx $0296			cpx 	lastParameter 				; are we done ?
.8cfb		f0 05		beq $8d02			beq 	_ParamExit
.8cfd		20 fc 91	jsr $91fc			jsr 	CheckComma 					; comma seperating parameters
.8d00		80 ed		bra $8cef			bra 	_ParamExtract
.8d02						_ParamExit:
.8d02		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; check )
.8d05		60		rts				rts 								; and continue from here
.8d06						Command_ENDPROC:
.8d06		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8d08		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8d0a		20 64 b2	jsr $b264			jsr 	StackCheckFrame
.8d0d		20 8d b2	jsr $b28d			jsr 	STKLoadCodePosition 		; restore code position
.8d10		20 56 b2	jsr $b256			jsr 	StackClose
.8d13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d14						Command_Read:
.8d14		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d16		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm
.8d19		b5 50		lda $50,x			lda 	NSStatus,x
.8d1b		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d1d		f0 4f		beq $8d6e			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8d1f		20 b7 8d	jsr $8db7			jsr 	SwapDataCodePtrs 			; swap code and data
.8d22		ad 9c 02	lda $029c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8d25		d0 25		bne $8d4c			bne 	_CRContinueData  			; forward for the next one.
.8d27		b2 30		lda ($30)			lda 	(codePtr)
.8d29		f0 1c		beq $8d47			beq 	_CRNoData
.8d2b						_CRKeepSearching:
.8d2b		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8d2d		a2 80		ldx #$80			ldx 	#KWC_EOL
.8d2f		20 4f 91	jsr $914f			jsr 	ScanForward
.8d32		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8d34		f0 16		beq $8d4c			beq 	_CRHaveData 				; found it
.8d36		18		clc				clc
.8d37		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d39		65 30		adc $30				adc 	codePtr
.8d3b		85 30		sta $30				sta 	codePtr
.8d3d		90 02		bcc $8d41			bcc 	_CREExit
.8d3f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d41						_CREExit:
.8d41		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8d43		b2 30		lda ($30)			lda 	(codePtr)
.8d45		d0 e4		bne $8d2b			bne 	_CRKeepSearching
.8d47						_CRNoData:
.8d47		a9 0b		lda #$0b		lda	#11
.8d49		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8d4c						_CRHaveData:
.8d4c						_CRContinueData:
.8d4c		a2 01		ldx #$01			ldx 	#1
.8d4e		20 9d a0	jsr $a09d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8d51		ca		dex				dex
.8d52		20 dd 89	jsr $89dd			jsr		AssignVariable 				; do the assignment
.8d55		9c 9c 02	stz $029c			stz 	inDataStatement 			; clear in data flag
.8d58		b1 30		lda ($30),y			lda 	(codePtr),y
.8d5a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8d5c		d0 04		bne $8d62			bne 	_CRSwapBack
.8d5e		c8		iny				iny 								; consume comma
.8d5f		ee 9c 02	inc $029c			inc 	inDataStatement 			; set in data statement currently.
.8d62						_CRSwapBack:
.8d62		20 b7 8d	jsr $8db7			jsr 	SwapDataCodePtrs			; swap them back.
.8d65		b1 30		lda ($30),y			lda 	(codePtr),y
.8d67		c8		iny				iny
.8d68		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d6a		f0 a8		beq $8d14			beq 	Command_Read 				; if so go round again.
.8d6c		88		dey				dey 								; unpick get.
.8d6d		60		rts				rts
.8d6e						_CRSyntax:
.8d6e		4c d6 a2	jmp $a2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8d71						RemCommand:
.8d71		b1 30		lda ($30),y			lda 	(codePtr),y
.8d73		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8d75		d0 06		bne $8d7d			bne 	_RMExit
.8d77		c8		iny				iny 								; point to offset
.8d78		98		tya				tya 								; A = offset position
.8d79		38		sec				sec 								; add size +1 hence SEC
.8d7a		71 30		adc ($30),y			adc 	(codePtr),y
.8d7c		a8		tay				tay 								; make current position.
.8d7d						_RMExit:
.8d7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8d7e						Command_REPEAT:
.8d7e		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8d80		20 37 b2	jsr $b237			jsr 	StackOpen
.8d83		20 7c b2	jsr $b27c			jsr 	STKSaveCodePosition 		; save loop position
.8d86		60		rts				rts
.8d87						Command_UNTIL:
.8d87		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8d89		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8d8b		20 64 b2	jsr $b264			jsr 	StackCheckFrame
.8d8e		a2 00		ldx #$00			ldx 	#0
.8d90		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; work out the number
.8d93		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; check if zero
.8d96		f0 04		beq $8d9c			beq 	_CULoopBack 				; if so keep looping
.8d98		20 56 b2	jsr $b256			jsr 	StackClose		 			; return
.8d9b		60		rts				rts
.8d9c						_CULoopBack:
.8d9c		20 8d b2	jsr $b28d			jsr 	STKLoadCodePosition 		; loop back
.8d9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8da0						Command_Restore:
.8da0		20 b7 8d	jsr $8db7			jsr 	SwapDataCodePtrs 			; swap code and data
.8da3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8da5		85 30		sta $30				sta 	codePtr
.8da7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8da9		85 31		sta $31				sta 	codePtr+1
.8dab		20 b7 8d	jsr $8db7			jsr 	SwapDataCodePtrs 			; put them back
.8dae		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8db0		8d 9b 02	sta $029b			sta 	dataPointer+4   			; (read checks not EOF)
.8db3		9c 9c 02	stz $029c			stz 	inDataStatement 			; not in data statement
.8db6		60		rts				rts
.8db7						SwapDataCodePtrs:
.8db7		da		phx				phx
.8db8		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8dba						_SDCPLoop:
.8dba		b5 30		lda $30,x			lda 	safePtr,x
.8dbc		48		pha				pha
.8dbd		bd 97 02	lda $0297,x			lda 	dataPointer,x
.8dc0		95 30		sta $30,x			sta 	safePtr,x
.8dc2		68		pla				pla
.8dc3		9d 97 02	sta $0297,x			sta 	dataPointer,x
.8dc6		ca		dex				dex
.8dc7		10 f1		bpl $8dba			bpl 	_SDCPLoop
.8dc9		ad 9b 02	lda $029b			lda 	dataPointer+4 				; swap Y position over.
.8dcc		8c 9b 02	sty $029b			sty 	dataPointer+4
.8dcf		a8		tay				tay
.8dd0		fa		plx				plx
.8dd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8dd2						EOLCommand:
.8dd2		18		clc				clc
.8dd3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8dd5		65 30		adc $30				adc 	codePtr
.8dd7		85 30		sta $30				sta 	codePtr
.8dd9		90 02		bcc $8ddd			bcc 	_CREExit
.8ddb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ddd						_CREExit:
.8ddd		80 0b		bra $8dea			bra 	RunNewLine
.8ddf						CommandRUN:
.8ddf		20 92 85	jsr $8592			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8de2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8de4		85 30		sta $30				sta 	codePtr
.8de6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8de8		85 31		sta $31				sta 	codePtr+1
.8dea						RunNewLine:
.8dea		b2 30		lda ($30)			lda 	(codePtr)
.8dec		f0 78		beq $8e66			beq 	CRNoProgram         		; no then END.
.8dee		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8df0		9a		txs				txs
.8df1						RUNCodePointerLine:
.8df1		a0 02		ldy #$02			ldy 	#2 							; start of program
.8df3						_CRIncMainLoop:
.8df3		0e 93 02	asl $0293			asl 	breakCheck 					; clears 1 time in 8
.8df6		d0 1f		bne $8e17			bne 	_CRNoBreakCheck
.8df8		ce 93 02	dec $0293			dec	 	breakCheck 					; set it back to $FF
.8dfb		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8dfe		f0 61		beq $8e61			beq 	_CRBreak
.8e00		a5 01		lda $01				lda 	1 							; save I/O 0
.8e02		48		pha				pha
.8e03		64 01		stz $01				stz 	1 							; access I/O Page 0
.8e05		38		sec				sec 								; calculate timer - LastTick
.8e06		ad 59 d6	lda $d659			lda 	$D659
.8e09		cd e2 04	cmp $04e2			cmp 	LastTick
.8e0c		f0 06		beq $8e14			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8e0e		8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.8e11		20 83 a1	jsr $a183			jsr 	TickHandler 							; go do the code.
.8e14						_NoFireTick:
.8e14		68		pla				pla 								; restore I/O 0
.8e15		85 01		sta $01				sta 	1
.8e17						_CRNoBreakCheck:
.8e17		c8		iny				iny									; next token
.8e18						_CRMainLoop:
.8e18		9c 90 02	stz $0290			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1d		10 10		bpl $8e2f			bpl 	_CRNotKeyword				; not a token.
.8e1f		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e21		b0 04		bcs $8e27			bcs 	_CRIsKeyword
.8e23		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e25		b0 34		bcs $8e5b			bcs		_CRSyntaxError
.8e27						_CRIsKeyword:
.8e27		c8		iny				iny 								; consume command
.8e28		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e29		aa		tax				tax 								; put in X for vector jump
.8e2a		20 5e 8e	jsr $8e5e			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e2d		80 e9		bra $8e18			bra 	_CRMainLoop 				; and loop round
.8e2f						_CRNotKeyword:
.8e2f		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e31		f0 c0		beq $8df3			beq 	_CRIncMainLoop
.8e33		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e35		90 05		bcc $8e3c			bcc 	_CRNotVariable
.8e37						_CRGoLet:
.8e37		20 a4 89	jsr $89a4			jsr 	LetCommand
.8e3a		80 dc		bra $8e18			bra 	_CRMainLoop
.8e3c						_CRNotVariable:
.8e3c		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e3e		f0 f7		beq $8e37			beq 	_CRGoLet
.8e40		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e42		f0 f3		beq $8e37			beq 	_CRGoLet
.8e44		c9 21		cmp #$21			cmp 	#KWD_PLING
.8e46		f0 ef		beq $8e37			beq 	_CRGoLet
.8e48		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e4a		f0 09		beq $8e55			beq 	_CRGoRem
.8e4c		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e4e		d0 0b		bne $8e5b			bne 	_CRSyntaxError
.8e50		20 d0 82	jsr $82d0			jsr 	LabelHere
.8e53		80 c3		bra $8e18			bra 	_CRMainLoop
.8e55						_CRGoRem:
.8e55		c8		iny				iny
.8e56		20 71 8d	jsr $8d71			jsr 	RemCommand
.8e59		80 bd		bra $8e18			bra 	_CRMainLoop
.8e5b						_CRSyntaxError:
.8e5b		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.8e5e						_CRCallVector0:
.8e5e		7c fc 8e	jmp ($8efc,x)			jmp 	(VectorSet0,x)
.8e61						_CRBreak:
.8e61		a9 01		lda #$01		lda	#1
.8e63		4c 0d 92	jmp $920d		jmp	ErrorHandler
.8e66						CRNoProgram:
.8e66		4c 3a 87	jmp $873a			jmp 	EndCommand
.8e69						Shift1Command:
.8e69		b1 30		lda ($30),y			lda 	(codePtr),y
.8e6b		c8		iny				iny
.8e6c		0a		asl a				asl 	a
.8e6d		aa		tax				tax
.8e6e		7c b0 8f	jmp ($8fb0,x)			jmp 	(VectorSet1,x)
.8e71						Shift2Command:
.8e71		b1 30		lda ($30),y			lda 	(codePtr),y
.8e73		c8		iny				iny
.8e74		0a		asl a				asl 	a
.8e75		aa		tax				tax
.8e76		7c ec 8f	jmp ($8fec,x)			jmp 	(VectorSet2,x)
.8e79						Unused1:
.8e79						Unused2:
.8e79						Unused3:
.8e79						Unused4:
.8e79		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
>8e7c								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8e7c						VectorSetPunc:
>8e7c		c5 94					.word	ShiftLeft                        ; $00 <<
>8e7e		b0 92					.word	BinaryCompareLessEqual           ; $01 <=
>8e80		a6 92					.word	BinaryCompareNotEqual            ; $02 <>
>8e82		d6 a2					.word	SyntaxError                      ; $03 !!3
>8e84		d6 a2					.word	SyntaxError                      ; $04 ><
>8e86		ba 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8e88		c8 94					.word	ShiftRight                       ; $06 >>
>8e8a		d6 a2					.word	SyntaxError                      ; $07 !!7
>8e8c		d6 a2					.word	SyntaxError                      ; $08 !!8
>8e8e		d6 a2					.word	SyntaxError                      ; $09 !!9
>8e90		d6 a2					.word	SyntaxError                      ; $0a !!10
>8e92		d6 a2					.word	SyntaxError                      ; $0b !!11
>8e94		d6 a2					.word	SyntaxError                      ; $0c !!12
>8e96		d6 a2					.word	SyntaxError                      ; $0d !!13
>8e98		d6 a2					.word	SyntaxError                      ; $0e !!14
>8e9a		d6 a2					.word	SyntaxError                      ; $0f !!15
>8e9c		d6 a2					.word	SyntaxError                      ; $10 @
>8e9e		d6 a2					.word	SyntaxError                      ; $11 !!17
>8ea0		d6 a2					.word	SyntaxError                      ; $12 !!18
>8ea2		d6 a2					.word	SyntaxError                      ; $13 [
>8ea4		71 93					.word	IntegerDivide                    ; $14 \
>8ea6		d6 a2					.word	SyntaxError                      ; $15 ]
>8ea8		03 96					.word	EorInteger                       ; $16 ^
>8eaa		d6 a2					.word	SyntaxError                      ; $17 _
>8eac		d6 a2					.word	SyntaxError                      ; $18 `
>8eae		d6 a2					.word	SyntaxError                      ; $19 !!25
>8eb0		d6 a2					.word	SyntaxError                      ; $1a !!26
>8eb2		d6 a2					.word	SyntaxError                      ; $1b {
>8eb4		ce 95					.word	OraInteger                       ; $1c |
>8eb6		d6 a2					.word	SyntaxError                      ; $1d }
>8eb8		d6 a2					.word	SyntaxError                      ; $1e ~
>8eba		d6 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ebc		d6 a2					.word	SyntaxError                      ; $20
>8ebe		38 96					.word	WordIndirect                     ; $21 !
>8ec0		d6 a2					.word	SyntaxError                      ; $22 "
>8ec2		d6 a2					.word	SyntaxError                      ; $23 #
>8ec4		d6 a2					.word	SyntaxError                      ; $24 $
>8ec6		b2 93					.word	IntegerModulus                   ; $25 %
>8ec8		99 95					.word	AndInteger                       ; $26 &
>8eca		d6 a2					.word	SyntaxError                      ; $27 '
>8ecc		d6 a2					.word	SyntaxError                      ; $28 (
>8ece		d6 a2					.word	SyntaxError                      ; $29 )
>8ed0		20 94					.word	MulInteger                       ; $2a *
>8ed2		3b 95					.word	AddInteger                       ; $2b +
>8ed4		d6 a2					.word	SyntaxError                      ; $2c ,
>8ed6		74 95					.word	SubInteger                       ; $2d -
>8ed8		d6 a2					.word	SyntaxError                      ; $2e .
>8eda		f2 97					.word	FDivideCommand                   ; $2f /
>8edc		d6 a2					.word	SyntaxError                      ; $30 0
>8ede		d6 a2					.word	SyntaxError                      ; $31 1
>8ee0		d6 a2					.word	SyntaxError                      ; $32 2
>8ee2		d6 a2					.word	SyntaxError                      ; $33 3
>8ee4		d6 a2					.word	SyntaxError                      ; $34 4
>8ee6		d6 a2					.word	SyntaxError                      ; $35 5
>8ee8		d6 a2					.word	SyntaxError                      ; $36 6
>8eea		d6 a2					.word	SyntaxError                      ; $37 7
>8eec		d6 a2					.word	SyntaxError                      ; $38 8
>8eee		d6 a2					.word	SyntaxError                      ; $39 9
>8ef0		d6 a2					.word	SyntaxError                      ; $3a :
>8ef2		d6 a2					.word	SyntaxError                      ; $3b ;
>8ef4		92 92					.word	BinaryCompareLess                ; $3c <
>8ef6		88 92					.word	BinaryCompareEqual               ; $3d =
>8ef8		9c 92					.word	BinaryCompareGreater             ; $3e >
>8efa		5a 96					.word	ByteIndirect                     ; $3f ?
.8efc						VectorSet0:
>8efc		d2 8d					.word	EOLCommand                       ; $80 !0:EOF
>8efe		69 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f00		71 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f02		dc 9c					.word	AbsUnary                         ; $83 ABS(
>8f04		ea 9c					.word	AllocUnary                       ; $84 ALLOC(
>8f06		5a 9d					.word	AscUnary                         ; $85 ASC(
>8f08		3e 9f					.word	ChrUnary                         ; $86 CHR$(
>8f0a		59 a7					.word	UnaryEvent                       ; $87 EVENT(
>8f0c		84 92					.word	UnaryFalse                       ; $88 FALSE
>8f0e		67 9d					.word	FracUnary                        ; $89 FRAC(
>8f10		d6 a2					.word	SyntaxError                      ; $8a GETDATE$(
>8f12		d6 a2					.word	SyntaxError                      ; $8b GETTIME$(
>8f14		e3 a6					.word	UnaryHit                         ; $8c HIT(
>8f16		7c 9d					.word	IntUnary                         ; $8d INT(
>8f18		fd 9e					.word	IsValUnary                       ; $8e ISVAL(
>8f1a		dd a7					.word	UnaryJoyB                        ; $8f JOYB(
>8f1c		b6 a7					.word	UnaryJoyX                        ; $90 JOYX(
>8f1e		b9 a7					.word	UnaryJoyY                        ; $91 JOYY(
>8f20		11 a0					.word	Unary_Left                       ; $92 LEFT$(
>8f22		8d 9d					.word	LenUnary                         ; $93 LEN(
>8f24		ab 9d					.word	Unary_Max                        ; $94 MAX(
>8f26		33 a0					.word	Unary_Mid                        ; $95 MID$(
>8f28		a7 9d					.word	Unary_Min                        ; $96 MIN(
>8f2a		f6 9d					.word	Unary_Not                        ; $97 NOT(
>8f2c		09 9e					.word	PeekByteUnary                    ; $98 PEEK(
>8f2e		15 9e					.word	PeekDUnary                       ; $99 PEEKD(
>8f30		11 9e					.word	PeekLUnary                       ; $9a PEEKL(
>8f32		0d 9e					.word	PeekWUnary                       ; $9b PEEKW(
>8f34		94 b1					.word	UnaryPlaying                     ; $9c PLAYING(
>8f36		42 9e					.word	Unary_Random                     ; $9d RANDOM(
>8f38		1e a0					.word	Unary_Right                      ; $9e RIGHT$(
>8f3a		5f 9e					.word	Unary_Rnd                        ; $9f RND(
>8f3c		d5 9e					.word	SgnUnary                         ; $a0 SGN(
>8f3e		50 9f					.word	SpcUnary                         ; $a1 SPC(
>8f40		6b 9f					.word	Unary_Str                        ; $a2 STR$(
>8f42		ef a7					.word	UnaryTimer                       ; $a3 TIMER(
>8f44		79 92					.word	UnaryTrue                        ; $a4 TRUE
>8f46		f3 9e					.word	ValUnary                         ; $a5 VAL(
>8f48		3d 87					.word	ForCommand                       ; $a6 FOR
>8f4a		80 88					.word	IfCommand                        ; $a7 IF
>8f4c		79 8e					.word	Unused1                          ; $a8 PROC
>8f4e		7e 8d					.word	Command_REPEAT                   ; $a9 REPEAT
>8f50		c5 91					.word	Command_WHILE                    ; $aa WHILE
>8f52		a9 88					.word	EndIf                            ; $ab ENDIF
>8f54		06 8d					.word	Command_ENDPROC                  ; $ac ENDPROC
>8f56		ef 87					.word	NextCommand                      ; $ad NEXT
>8f58		79 8e					.word	Unused4                          ; $ae THEN
>8f5a		87 8d					.word	Command_UNTIL                    ; $af UNTIL
>8f5c		e6 91					.word	Command_WEND                     ; $b0 WEND
>8f5e		d6 a2					.word	SyntaxError                      ; $b1 BY
>8f60		5d 85					.word	CallCommand                      ; $b2 CALL
>8f62		97 a4					.word	CircleCommand                    ; $b3 CIRCLE
>8f64		92 85					.word	ClearCommand                     ; $b4 CLEAR
>8f66		ea 85					.word	ClearScreen                      ; $b5 CLS
>8f68		d6 a2					.word	SyntaxError                      ; $b6 COLOR
>8f6a		d6 a2					.word	SyntaxError                      ; $b7 COLOUR
>8f6c		af 88					.word	Command_CPrint                   ; $b8 CPRINT
>8f6e		f2 85					.word	Command_Data                     ; $b9 DATA
>8f70		fa 85					.word	DimCommand                       ; $ba DIM
>8f72		79 8e					.word	Unused3                          ; $bb DOWNTO
>8f74		a2 88					.word	ElseCode                         ; $bc ELSE
>8f76		d6 a2					.word	SyntaxError                      ; $bd FROM
>8f78		b6 a6					.word	GfxCommand                       ; $be GFX
>8f7a		48 88					.word	Command_GOSUB                    ; $bf GOSUB
>8f7c		66 88					.word	GotoCommand                      ; $c0 GOTO
>8f7e		d6 a2					.word	SyntaxError                      ; $c1 HERE
>8f80		c0 a4					.word	ImageCommand                     ; $c2 IMAGE
>8f82		aa 88					.word	Command_Input                    ; $c3 INPUT
>8f84		a4 89					.word	LetCommand                       ; $c4 LET
>8f86		12 a5					.word	LineCommand                      ; $c5 LINE
>8f88		9a 8b					.word	Command_LOCAL                    ; $c6 LOCAL
>8f8a		d6 a2					.word	SyntaxError                      ; $c7 OFF
>8f8c		d6 a2					.word	SyntaxError                      ; $c8 ON
>8f8e		d6 a2					.word	SyntaxError                      ; $c9 OUTLINE
>8f90		07 a7					.word	PaletteCommand                   ; $ca PALETTE
>8f92		0b a5					.word	PlotCommand                      ; $cb PLOT
>8f94		6b 8c					.word	PokeBCommand                     ; $cc POKE
>8f96		77 8c					.word	PokeDCommand                     ; $cd POKED
>8f98		73 8c					.word	PokeLCommand                     ; $ce POKEL
>8f9a		6f 8c					.word	PokeWCommand                     ; $cf POKEW
>8f9c		b6 88					.word	Command_Print                    ; $d0 PRINT
>8f9e		14 8d					.word	Command_Read                     ; $d1 READ
>8fa0		93 a4					.word	RectangleCommand                 ; $d2 RECT
>8fa2		71 8d					.word	RemCommand                       ; $d3 REM
>8fa4		58 88					.word	Command_RETURN                   ; $d4 RETURN
>8fa6		d6 a2					.word	SyntaxError                      ; $d5 SOLID
>8fa8		b0 b1					.word	SoundCommand                     ; $d6 SOUND
>8faa		a2 a4					.word	SpriteCommand                    ; $d7 SPRITE
>8fac		dc a4					.word	TextCommand                      ; $d8 TEXT
>8fae		79 8e					.word	Unused2                          ; $d9 TO
.8fb0						VectorSet1:
>8fb0		d6 a2					.word	SyntaxError                      ; $80 !0:EOF
>8fb2		d6 a2					.word	SyntaxError                      ; $81 !1:SH1
>8fb4		d6 a2					.word	SyntaxError                      ; $82 !2:SH2
>8fb6		93 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8fb8		af 84					.word	AssertCommand                    ; $84 ASSERT
>8fba		56 a6					.word	BitmapCtrl                       ; $85 BITMAP
>8fbc		bf 84					.word	Command_BLoad                    ; $86 BLOAD
>8fbe		d6 a2					.word	SyntaxError                      ; $87 BSAVE
>8fc0		b7 86					.word	Command_Dir                      ; $88 DIR
>8fc2		33 87					.word	Command_Drive                    ; $89 DRIVE
>8fc4		3a 87					.word	EndCommand                       ; $8a END
>8fc6		68 b1					.word	Explode                          ; $8b EXPLODE
>8fc8		d6 a2					.word	SyntaxError                      ; $8c GO
>8fca		d6 a2					.word	SyntaxError                      ; $8d HIMEM
>8fcc		f4 89					.word	Command_List                     ; $8e LIST
>8fce		fa 8a					.word	Command_Load                     ; $8f LOAD
>8fd0		5b 8c					.word	NewCommand                       ; $90 NEW
>8fd2		44 b1					.word	PingCommand                      ; $91 PING
>8fd4		a0 8d					.word	Command_Restore                  ; $92 RESTORE
>8fd6		df 8d					.word	CommandRUN                       ; $93 RUN
>8fd8		74 90					.word	Command_Save                     ; $94 SAVE
>8fda		d6 a2					.word	SyntaxError                      ; $95 SETDATE
>8fdc		d6 a2					.word	SyntaxError                      ; $96 SETTIME
>8fde		5c b1					.word	ShootCommand                     ; $97 SHOOT
>8fe0		9b a6					.word	SpritesCtrl                      ; $98 SPRITES
>8fe2		f8 90					.word	StopCommand                      ; $99 STOP
>8fe4		6f b3					.word	Command_VERIFY                   ; $9a VERIFY
>8fe6		50 a7					.word	XGoCommand                       ; $9b XGO
>8fe8		47 a7					.word	XLoadCommand                     ; $9c XLOAD
>8fea		50 b1					.word	ZapCommand                       ; $9d ZAP
.8fec						VectorSet2:
>8fec		d6 a2					.word	SyntaxError                      ; $80 !0:EOF
>8fee		d6 a2					.word	SyntaxError                      ; $81 !1:SH1
>8ff0		d6 a2					.word	SyntaxError                      ; $82 !2:SH2
>8ff2		95 a1					.word	Assemble_adc                     ; $83 ADC
>8ff4		8d a1					.word	Assemble_and                     ; $84 AND
>8ff6		a9 a1					.word	Assemble_asl                     ; $85 ASL
>8ff8		13 a2					.word	Assemble_bcc                     ; $86 BCC
>8ffa		17 a2					.word	Assemble_bcs                     ; $87 BCS
>8ffc		1f a2					.word	Assemble_beq                     ; $88 BEQ
>8ffe		d6 a1					.word	Assemble_bit                     ; $89 BIT
>9000		07 a2					.word	Assemble_bmi                     ; $8a BMI
>9002		1b a2					.word	Assemble_bne                     ; $8b BNE
>9004		03 a2					.word	Assemble_bpl                     ; $8c BPL
>9006		23 a2					.word	Assemble_bra                     ; $8d BRA
>9008		27 a2					.word	Assemble_brk                     ; $8e BRK
>900a		0b a2					.word	Assemble_bvc                     ; $8f BVC
>900c		0f a2					.word	Assemble_bvs                     ; $90 BVS
>900e		2f a2					.word	Assemble_clc                     ; $91 CLC
>9010		83 a2					.word	Assemble_cld                     ; $92 CLD
>9012		43 a2					.word	Assemble_cli                     ; $93 CLI
>9014		73 a2					.word	Assemble_clv                     ; $94 CLV
>9016		a1 a1					.word	Assemble_cmp                     ; $95 CMP
>9018		ea a1					.word	Assemble_cpx                     ; $96 CPX
>901a		e5 a1					.word	Assemble_cpy                     ; $97 CPY
>901c		c7 a1					.word	Assemble_dec                     ; $98 DEC
>901e		7f a2					.word	Assemble_dex                     ; $99 DEX
>9020		5b a2					.word	Assemble_dey                     ; $9a DEY
>9022		91 a1					.word	Assemble_eor                     ; $9b EOR
>9024		cc a1					.word	Assemble_inc                     ; $9c INC
>9026		8f a2					.word	Assemble_inx                     ; $9d INX
>9028		7b a2					.word	Assemble_iny                     ; $9e INY
>902a		fe a1					.word	Assemble_jmp                     ; $9f JMP
>902c		f9 a1					.word	Assemble_jsr                     ; $a0 JSR
>902e		9d a1					.word	Assemble_lda                     ; $a1 LDA
>9030		c2 a1					.word	Assemble_ldx                     ; $a2 LDX
>9032		e0 a1					.word	Assemble_ldy                     ; $a3 LDY
>9034		b3 a1					.word	Assemble_lsr                     ; $a4 LSR
>9036		93 a2					.word	Assemble_nop                     ; $a5 NOP
>9038		89 a1					.word	Assemble_ora                     ; $a6 ORA
>903a		3f a2					.word	Assemble_pha                     ; $a7 PHA
>903c		2b a2					.word	Assemble_php                     ; $a8 PHP
>903e		87 a2					.word	Assemble_phx                     ; $a9 PHX
>9040		47 a2					.word	Assemble_phy                     ; $aa PHY
>9042		4f a2					.word	Assemble_pla                     ; $ab PLA
>9044		33 a2					.word	Assemble_plp                     ; $ac PLP
>9046		9b a2					.word	Assemble_plx                     ; $ad PLX
>9048		57 a2					.word	Assemble_ply                     ; $ae PLY
>904a		ae a1					.word	Assemble_rol                     ; $af ROL
>904c		b8 a1					.word	Assemble_ror                     ; $b0 ROR
>904e		3b a2					.word	Assemble_rti                     ; $b1 RTI
>9050		4b a2					.word	Assemble_rts                     ; $b2 RTS
>9052		a5 a1					.word	Assemble_sbc                     ; $b3 SBC
>9054		37 a2					.word	Assemble_sec                     ; $b4 SEC
>9056		97 a2					.word	Assemble_sed                     ; $b5 SED
>9058		53 a2					.word	Assemble_sei                     ; $b6 SEI
>905a		99 a1					.word	Assemble_sta                     ; $b7 STA
>905c		8b a2					.word	Assemble_stp                     ; $b8 STP
>905e		bd a1					.word	Assemble_stx                     ; $b9 STX
>9060		db a1					.word	Assemble_sty                     ; $ba STY
>9062		d1 a1					.word	Assemble_stz                     ; $bb STZ
>9064		6f a2					.word	Assemble_tax                     ; $bc TAX
>9066		6b a2					.word	Assemble_tay                     ; $bd TAY
>9068		f4 a1					.word	Assemble_trb                     ; $be TRB
>906a		ef a1					.word	Assemble_tsb                     ; $bf TSB
>906c		77 a2					.word	Assemble_tsx                     ; $c0 TSX
>906e		5f a2					.word	Assemble_txa                     ; $c1 TXA
>9070		67 a2					.word	Assemble_txs                     ; $c2 TXS
>9072		63 a2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.9074						Command_Save:
.9074		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; file name to load
.9077		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9079		a5 36		lda $36				lda 	zTemp0
.907b		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.907e		b0 2f		bcs $90af			bcs 	CSErrorHandler 				; error, so fail.
.9080		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.9083		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9085		85 30		sta $30				sta 	codePtr
.9087		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9089		85 31		sta $31				sta 	codePtr+1
.908b						_CSLoop:
.908b		b2 30		lda ($30)			lda 	(codePtr)
.908d		f0 17		beq $90a6			beq 	_CSExit
.908f		20 d3 90	jsr $90d3			jsr 	CSGetCleanLine
.9092		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.9094		85 36		sta $36				sta 	zTemp0
.9096		20 b2 90	jsr $90b2			jsr 	CLWriteByteBlock 			; write the block out.
.9099		18		clc				clc
.909a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.909c		65 30		adc $30				adc 	codePtr
.909e		85 30		sta $30				sta 	codePtr
.90a0		90 02		bcc $90a4			bcc 	_CREExit
.90a2		e6 31		inc $31				inc 	codePtr+1 					; carry
.90a4						_CREExit:
.90a4		80 e5		bra $908b			bra 	_CSLoop
.90a6						_CSExit:
.90a6		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; close file
.90a9		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.90ac		4c 2d 8b	jmp $8b2d			jmp 	CLComplete 					; display complete message.
.90af						CSErrorHandler:
.90af		4c 4a 8b	jmp $8b4a			jmp 	CLErrorHandler
.90b2						CLWriteByteBlock:
.90b2		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.90b4		f0 1c		beq $90d2			beq 	_CLWBBExit					; if so, exit
.90b6		ad e1 04	lda $04e1			lda 	CurrentFileStream 			; stream to write, count in X
.90b9		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.90bc		b0 f1		bcs $90af			bcs 	CSErrorHandler 				; error occurred
.90be		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.90c0		8a		txa				txa 								; subtract bytes written from X, total count.
.90c1		38		sec				sec
.90c2		e5 38		sbc $38				sbc 	zTemp1
.90c4		aa		tax				tax
.90c5		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.90c6		a5 36		lda $36				lda 	zTemp0
.90c8		65 38		adc $38				adc 	zTemp1
.90ca		85 36		sta $36				sta 	zTemp0
.90cc		90 e4		bcc $90b2			bcc 	CLWriteByteBlock
.90ce		e6 37		inc $37				inc 	zTemp0+1
.90d0		80 e0		bra $90b2			bra 	CLWriteByteBlock 			; and retry write out.
.90d2						_CLWBBExit:
.90d2		60		rts				rts
.90d3						CSGetCleanLine:
.90d3		a9 00		lda #$00			lda 	#0 							; no indent.
.90d5		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.90d8		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.90da		a0 00		ldy #$00			ldy 	#0
.90dc						_CSClean:
.90dc		b9 ad 02	lda $02ad,y			lda 	tokenBuffer,y
.90df		f0 09		beq $90ea			beq 	_CSDoneClean
.90e1		30 04		bmi $90e7			bmi 	_CSIgnoreCharacter
.90e3		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.90e6		e8		inx				inx
.90e7						_CSIgnoreCharacter:
.90e7		c8		iny				iny
.90e8		80 f2		bra $90dc			bra 	_CSClean
.90ea						_CSDoneClean:
.90ea		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.90ec		9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.90ef		e8		inx				inx
.90f0		9e aa 03	stz $03aa,x			stz 	lineBuffer,x
.90f3		a0 03		ldy #$03			ldy 	#(lineBuffer >> 8) 			; line address in YA
.90f5		a9 aa		lda #$aa			lda 	#(lineBuffer & $FF)
.90f7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.90f8						StopCommand:
.90f8		a9 08		lda #$08		lda	#8
.90fa		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.90fd						ProcedureScan:
.90fd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90ff		85 30		sta $30				sta 	codePtr
.9101		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9103		85 31		sta $31				sta 	codePtr+1
.9105						_PSLoop:
.9105		b2 30		lda ($30)			lda 	(codePtr)
.9107		f0 42		beq $914b			beq 	_PSExit
.9109		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.910b		b1 30		lda ($30),y			lda 	(codePtr),y
.910d		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.910f		d0 2d		bne $913e			bne 	_PSNext
.9111		c8		iny				iny 								; get the address of the record to zTemp0 and
.9112		b1 30		lda ($30),y			lda 	(codePtr),y
.9114		29 c0		and #$c0			and 	#$C0
.9116		c9 40		cmp #$40			cmp 	#$40
.9118		d0 32		bne $914c			bne 	_PSSyntax
.911a		b1 30		lda ($30),y			lda 	(codePtr),y
.911c		18		clc				clc
.911d		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.911f		85 37		sta $37				sta 	zTemp0+1
.9121		c8		iny				iny 								; LSB
.9122		b1 30		lda ($30),y			lda 	(codePtr),y
.9124		85 36		sta $36				sta 	zTemp0
.9126		c8		iny				iny 								; character after variable call.
.9127		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9128		a0 07		ldy #$07			ldy 	#7
.912a		91 36		sta ($36),y			sta 	(zTemp0),y
.912c		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.912e		a0 02		ldy #$02			ldy 	#2
.9130		91 36		sta ($36),y			sta 	(zTemp0),y
.9132		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9134						_PSCopy:
.9134		b5 30		lda $30,x			lda 	safePtr,x
.9136		c8		iny				iny
.9137		91 36		sta ($36),y			sta 	(zTemp0),y
.9139		e8		inx				inx
.913a		e0 04		cpx #$04			cpx 	#4
.913c		d0 f6		bne $9134			bne 	_PSCopy
.913e						_PSNext:
.913e		18		clc				clc
.913f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9141		65 30		adc $30				adc 	codePtr
.9143		85 30		sta $30				sta 	codePtr
.9145		90 02		bcc $9149			bcc 	_CREExit
.9147		e6 31		inc $31				inc 	codePtr+1 					; carry
.9149						_CREExit:
.9149		80 ba		bra $9105			bra 	_PSLoop
.914b						_PSExit:
.914b		60		rts				rts
.914c						_PSSyntax:
.914c		4c d6 a2	jmp $a2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.914f						ScanForward:
.914f		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9151		86 37		stx $37				stx 	zTemp0+1
.9153		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9155						_ScanLoop:
.9155		b1 30		lda ($30),y			lda 	(codePtr),y
.9157		c8		iny				iny
.9158		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.915a		d0 0e		bne $916a			bne 	_ScanGoNext
.915c		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.915e		f0 04		beq $9164			beq 	_ScanMatch
.9160		c5 37		cmp $37				cmp 	zTemp0+1
.9162		d0 06		bne $916a			bne 	_ScanGoNext
.9164						_ScanMatch:
.9164		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9166		d0 01		bne $9169			bne 	_ScanNotEndEOL
.9168		88		dey				dey
.9169						_ScanNotEndEOL:
.9169		60		rts				rts
.916a						_ScanGoNext:
.916a		20 6f 91	jsr $916f			jsr  	ScanForwardOne 				; allows for shifts and so on.
.916d		80 e6		bra $9155			bra 	_ScanLoop
.916f						ScanForwardOne:
.916f		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9171		90 3e		bcc $91b1			bcc 	_SFWExit
.9173		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9175		90 18		bcc $918f			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9177		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9179		b0 2f		bcs $91aa			bcs 	_ScanSkipData
.917b		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.917d		90 32		bcc $91b1			bcc 	_SFWExit 					; if not, ordinary keywords.
.917f		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.9181		b0 2e		bcs $91b1			bcs 	_SFWExit
.9183		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9185		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9187		b0 28		bcs $91b1			bcs 	_SFWExit
.9189		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.918b		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.918d		80 22		bra $91b1			bra 	_SFWExit
.918f						_ScanSkipOne:
.918f		c8		iny				iny 								; consume the extra one.
.9190		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9192		d0 1d		bne $91b1			bne 	_SFWExit
.9194		18		clc				clc
.9195		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9197		65 30		adc $30				adc 	codePtr
.9199		85 30		sta $30				sta 	codePtr
.919b		90 02		bcc $919f			bcc 	_CREExit
.919d		e6 31		inc $31				inc 	codePtr+1 					; carry
.919f						_CREExit:
.919f		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.91a1		b2 30		lda ($30)			lda 	(codePtr)
.91a3		d0 0c		bne $91b1			bne 	_SFWExit 					; if not zero, more to scan
.91a5		a9 13		lda #$13		lda	#19
.91a7		4c 0d 92	jmp $920d		jmp	ErrorHandler
.91aa						_ScanSkipData:
.91aa		88		dey				dey 								; point at data token
.91ab		c8		iny				iny 								; point to offset
.91ac		98		tya				tya 								; A = offset position
.91ad		38		sec				sec 								; add size +1 hence SEC
.91ae		71 30		adc ($30),y			adc 	(codePtr),y
.91b0		a8		tay				tay 								; make current position.
.91b1						_SFWExit:
.91b1		60		rts				rts
.91b2						ScanGetCurrentLineStep:
.91b2		64 38		stz $38				stz 	zTemp1
.91b4		a0 03		ldy #$03			ldy 	#3
.91b6						_SGCLSLoop:
.91b6		b1 30		lda ($30),y			lda 	(codePtr),y
.91b8		c8		iny				iny
.91b9		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.91bb		f0 05		beq $91c2			beq 	_SGCLSExit
.91bd		20 6f 91	jsr $916f			jsr 	ScanForwardOne
.91c0		80 f4		bra $91b6			bra 	_SGCLSLoop
.91c2						_SGCLSExit:
.91c2		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.91c4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.91c5						Command_WHILE:
.91c5		5a		phy				phy 								; save position of the test
.91c6		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.91c8		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber
.91cb		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; check if zero
.91ce		f0 0e		beq $91de			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.91d0		98		tya				tya 								; position *after* test.
.91d1		7a		ply				ply 								; restore position before test, at WHILE
.91d2		88		dey				dey 								; so we execute the WHILE command again.
.91d3		48		pha				pha 								; push after test on the stack
.91d4		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.91d6		20 37 b2	jsr $b237			jsr 	StackOpen
.91d9		20 7c b2	jsr $b27c			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.91dc		7a		ply				ply 								; restore the position *after* the test
.91dd		60		rts				rts
.91de						_WHExitLoop:
.91de		68		pla				pla 								; throw post loop position
.91df		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.91e1		aa		tax				tax
.91e2		20 4f 91	jsr $914f			jsr 	ScanForward
.91e5		60		rts				rts
.91e6						Command_WEND:
.91e6		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.91e8		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.91ea		20 64 b2	jsr $b264			jsr 	StackCheckFrame
.91ed		20 8d b2	jsr $b28d			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.91f0		20 56 b2	jsr $b256			jsr 	StackClose		 			; erase the frame
.91f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.91f4						CheckRightBracket:
.91f4		b1 30		lda ($30),y			lda 	(codePtr),y
.91f6		c8		iny				iny
.91f7		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.91f9		d0 0f		bne $920a			bne 	CNAFail
.91fb		60		rts				rts
.91fc						CheckComma:
.91fc		b1 30		lda ($30),y			lda 	(codePtr),y
.91fe		c8		iny				iny
.91ff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9201		d0 07		bne $920a			bne 	CNAFail
.9203		60		rts				rts
.9204						CheckNextA:
.9204		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9206		d0 02		bne $920a			bne 	CNAFail
.9208		c8		iny				iny 								; skip character
.9209		60		rts				rts 								; and exit
.920a						CNAFail:
.920a		4c d6 a2	jmp $a2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.920d						ErrorHandler:
.920d		a8		tay				tay 								; find the error text
.920e		f0 49		beq $9259			beq 	_EHEnd
.9210		a2 00		ldx #$00			ldx 	#0
.9212		a9 ef		lda #$ef			lda 	#((ErrorText) & $FF)
.9214		85 36		sta $36				sta 	0+zTemp0
.9216		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.9218		85 37		sta $37				sta 	1+zTemp0
.921a						_EHFind:
.921a		88		dey				dey 								; keep looking through text
.921b		f0 0e		beq $922b			beq 	_EHFound
.921d						_EHFindZero:
.921d		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.921f		e6 36		inc $36				inc 	zTemp0
.9221		d0 02		bne $9225			bne 	_EHFNoCarry
.9223		e6 37		inc $37				inc 	zTemp0+1
.9225						_EHFNoCarry:
.9225		c9 00		cmp #$00			cmp 	#0
.9227		d0 f4		bne $921d			bne 	_EHFindZero
.9229		80 ef		bra $921a			bra 	_EHFind
.922b						_EHFound:
.922b		a5 36		lda $36				lda 	zTemp0 						; print message
.922d		a6 37		ldx $37				ldx 	zTemp0+1
.922f		20 66 92	jsr $9266			jsr 	PrintStringXA
.9232		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9234		b1 30		lda ($30),y			lda 	(codePtr),y
.9236		d0 05		bne $923d			bne 	_EHAtMsg
.9238		c8		iny				iny
.9239		b1 30		lda ($30),y			lda 	(codePtr),y
.923b		f0 17		beq $9254			beq 	_EHCREnd
.923d						_EHAtMsg:
.923d		a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.923f		a9 5c		lda #$5c			lda 	#_AtMsg & $FF
.9241		20 66 92	jsr $9266			jsr 	PrintStringXA
.9244		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9246		b1 30		lda ($30),y			lda 	(codePtr),y
.9248		48		pha				pha
.9249		c8		iny				iny
.924a		b1 30		lda ($30),y			lda 	(codePtr),y
.924c		aa		tax				tax
.924d		68		pla				pla
.924e		20 7c 96	jsr $967c			jsr 	ConvertInt16 				; convert XA to string
.9251		20 66 92	jsr $9266			jsr 	PrintStringXA 				; and print it.
.9254						_EHCREnd:
.9254		a9 0d		lda #$0d			lda 	#13 						; new line
.9256		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9259						_EHEnd:
.9259		4c 5e 84	jmp $845e			jmp 	WarmStart
>925c		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9264		20 00
.9266						PrintStringXA:
.9266		5a		phy				phy
.9267		86 37		stx $37				stx 	zTemp0+1
.9269		85 36		sta $36				sta 	zTemp0
.926b		a0 00		ldy #$00			ldy 	#0
.926d						_PSXALoop:
.926d		b1 36		lda ($36),y			lda 	(zTemp0),y
.926f		f0 06		beq $9277			beq 	_PSXAExit
.9271		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9274		c8		iny				iny
.9275		80 f6		bra $926d			bra 	_PSXALoop
.9277						_PSXAExit:
.9277		7a		ply				ply
.9278		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9279						UnaryTrue:
.9279		fa		plx				plx
.927a						ReturnTrue:
.927a		a9 01		lda #$01			lda 	#1  						; set to 1
.927c		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.927f		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9281		95 50		sta $50,x			sta 	NSStatus,x
.9283		60		rts				rts
.9284						UnaryFalse:
.9284		fa		plx				plx
.9285						ReturnFalse:
.9285		4c 58 a1	jmp $a158			jmp 	NSMSetZero 					; set it all to zero
.9288						BinaryCompareEqual:
.9288		fa		plx				plx
.9289		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.928c		c9 00		cmp #$00			cmp 	#0
.928e		f0 ea		beq $927a			beq 	ReturnTrue
.9290		80 f3		bra $9285			bra 	ReturnFalse
.9292						BinaryCompareLess:
.9292		fa		plx				plx
.9293		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.9296		c9 ff		cmp #$ff			cmp 	#$FF
.9298		f0 e0		beq $927a			beq 	ReturnTrue
.929a		80 e9		bra $9285			bra 	ReturnFalse
.929c						BinaryCompareGreater:
.929c		fa		plx				plx
.929d		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.92a0		c9 01		cmp #$01			cmp 	#1
.92a2		f0 d6		beq $927a			beq 	ReturnTrue
.92a4		80 df		bra $9285			bra 	ReturnFalse
.92a6						BinaryCompareNotEqual:
.92a6		fa		plx				plx
.92a7		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.92aa		c9 00		cmp #$00			cmp 	#0
.92ac		d0 cc		bne $927a			bne 	ReturnTrue
.92ae		80 d5		bra $9285			bra 	ReturnFalse
.92b0						BinaryCompareLessEqual:
.92b0		fa		plx				plx
.92b1		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.92b4		c9 01		cmp #$01			cmp 	#1
.92b6		d0 c2		bne $927a			bne 	ReturnTrue
.92b8		80 cb		bra $9285			bra 	ReturnFalse
.92ba						BinaryCompareGreaterEqual:
.92ba		fa		plx				plx
.92bb		20 c4 92	jsr $92c4			jsr 	CompareBaseCode
.92be		c9 ff		cmp #$ff			cmp 	#$FF
.92c0		d0 b8		bne $927a			bne 	ReturnTrue
.92c2		80 c1		bra $9285			bra 	ReturnFalse
.92c4						CompareBaseCode:
.92c4		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; make both values if references.
.92c7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.92c9		15 51		ora $51,x			ora 	NSStatus+1,x
.92cb		29 10		and #$10			and 	#NSTString
.92cd		d0 37		bne $9306			bne 	_CBCString 					; if so do string code, which will check if both.
.92cf		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.92d1		15 79		ora $79,x			ora 	NSExponent+1,x
.92d3		d0 34		bne $9309			bne 	_CBCFloat
.92d5		b5 50		lda $50,x			lda 	NSStatus,x
.92d7		15 51		ora $51,x			ora 	NSStatus+1,x
.92d9		29 08		and #$08			and 	#NSTFloat
.92db		d0 2c		bne $9309			bne 	_CBCFloat
.92dd		20 0c 93	jsr $930c			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.92e0		e8		inx				inx
.92e1		20 0c 93	jsr $930c			jsr 	CompareFixMinusZero
.92e4		ca		dex				dex
.92e5		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.92e7		55 51		eor $51,x			eor 	NSStatus+1,x
.92e9		10 0a		bpl $92f5			bpl 	_CDCSameSign
.92eb		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.92ed		30 14		bmi $9303			bmi 	_CBCLess 					; return $FF
.92ef						_CBCGreater:
.92ef		a9 01		lda #$01			lda 	#1
.92f1		60		rts				rts
.92f2						_CBCEqual:
.92f2		a9 00		lda #$00			lda 	#0
.92f4		60		rts				rts
.92f5						_CDCSameSign:
.92f5		20 21 95	jsr $9521			jsr 	SubTopTwoStack 				; unsigned subtract
.92f8		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; or the mantissa together
.92fb		f0 f5		beq $92f2			beq 	_CBCEqual 					; -0 == 0
.92fd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.92ff		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9301		10 ec		bpl $92ef			bpl 	_CBCGreater
.9303						_CBCLess:
.9303		a9 ff		lda #$ff			lda 	#$FF
.9305		60		rts				rts
.9306						_CBCString:
.9306		4c 92 94	jmp $9492			jmp 	CompareStrings
.9309						_CBCFloat:
.9309		4c dc 97	jmp $97dc			jmp 	CompareFloat
.930c						CompareFixMinusZero:
.930c		20 7a a1	jsr $a17a			jsr 	NSMIsZero
.930f		d0 02		bne $9313			bne 	_CFXMZNotZero
.9311		74 50		stz $50,x			stz 	NSStatus,x
.9313						_CFXMZNotZero:
.9313		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9314						StringConcat:
.9314		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9316		35 51		and $51,x			and 	NSStatus+1,x
.9318		29 18		and #$18			and 	#NSBTypeMask
.931a		c9 10		cmp #$10			cmp 	#NSTString
.931c		d0 50		bne $936e			bne		_SCType
.931e		64 38		stz $38				stz 	zTemp1 						; counting total length
.9320		e8		inx				inx
.9321		20 3f 93	jsr $933f			jsr 	_SCSetupZ0 					; setup for second
.9324		20 48 93	jsr $9348			jsr 	_SCLengthZ0 				; length for second
.9327		ca		dex				dex
.9328		20 3f 93	jsr $933f			jsr 	_SCSetupZ0 					; setup for first
.932b		20 48 93	jsr $9348			jsr 	_SCLengthZ0 				; length for first
.932e		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9330		20 27 b3	jsr $b327			jsr 	StringTempAllocate
.9333		20 5f 93	jsr $935f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9336		e8		inx				inx
.9337		20 3f 93	jsr $933f			jsr 	_SCSetupZ0 					; copy second out
.933a		20 5f 93	jsr $935f			jsr 	_SCCopy
.933d		ca		dex				dex
.933e		60		rts				rts
.933f						_SCSetupZ0:
.933f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9341		85 36		sta $36				sta 	zTemp0
.9343		b5 60		lda $60,x			lda 	NSMantissa1,x
.9345		85 37		sta $37				sta 	zTemp0+1
.9347		60		rts				rts
.9348						_SCLengthZ0:
.9348		5a		phy				phy
.9349		a0 00		ldy #$00			ldy 	#0
.934b						_SCLenLoop:
.934b		b1 36		lda ($36),y			lda 	(zTemp0),y
.934d		f0 0e		beq $935d			beq 	_SCLExit
.934f		c8		iny				iny
.9350		e6 38		inc $38				inc 	zTemp1
.9352		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9354		c9 fd		cmp #$fd			cmp 	#253
.9356		d0 f3		bne $934b			bne		_SCLenLoop
.9358		a9 09		lda #$09		lda	#9
.935a		4c 0d 92	jmp $920d		jmp	ErrorHandler
.935d						_SCLExit:
.935d		7a		ply				ply
.935e		60		rts				rts
.935f						_SCCopy:
.935f		5a		phy				phy
.9360		a0 00		ldy #$00			ldy 	#0
.9362						_SCCopyLoop:
.9362		b1 36		lda ($36),y			lda 	(zTemp0),y
.9364		f0 06		beq $936c			beq 	_SCCExit
.9366		20 60 b3	jsr $b360			jsr 	StringTempWrite
.9369		c8		iny				iny
.936a		80 f6		bra $9362			bra 	_SCCopyLoop
.936c						_SCCExit:
.936c		7a		ply				ply
.936d		60		rts				rts
.936e						_SCType:
.936e		4c e0 a2	jmp $a2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9371						IntegerDivide:
.9371		fa		plx				plx
.9372		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9374		15 51		ora $51,x			ora 	NSStatus+1,x
.9376		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9377		0a		asl a				asl 	a
.9378		10 05		bpl $937f			bpl 	_NotRef
.937a		48		pha				pha
.937b		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.937e		68		pla				pla
.937f						_NotRef:
.937f		0a		asl a				asl 	a
.9380		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9382		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9384		15 79		ora $79,x			ora 	NSExponent+1,x
.9386		f0 03		beq $938b			beq 	_IntegerCode 				; if clear, then we have two integers
.9388		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.938b						_IntegerCode:
.938b		20 a5 93	jsr $93a5			jsr 	CheckDivideZero 			; do div zero check
.938e		20 d7 93	jsr $93d7			jsr 	Int32Divide 				; do the division
.9391		20 88 94	jsr $9488			jsr 	CalculateSign 				; calculate result sign
.9394						NSMCopyPlusTwoToZero:
.9394		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9396		95 58		sta $58,x			sta 	NSMantissa0,x
.9398		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.939a		95 60		sta $60,x			sta 	NSMantissa1,x
.939c		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.939e		95 68		sta $68,x			sta 	NSMantissa2,x
.93a0		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.93a2		95 70		sta $70,x			sta 	NSMantissa3,x
.93a4		60		rts				rts
.93a5						CheckDivideZero:
.93a5		e8		inx				inx
.93a6		20 7a a1	jsr $a17a			jsr 	NSMIsZero
.93a9		f0 02		beq $93ad			beq 	_CDVError
.93ab		ca		dex				dex
.93ac		60		rts				rts
.93ad						_CDVError:
.93ad		a9 03		lda #$03		lda	#3
.93af		4c 0d 92	jmp $920d		jmp	ErrorHandler
.93b2						IntegerModulus:
.93b2		fa		plx				plx
.93b3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93b5		15 51		ora $51,x			ora 	NSStatus+1,x
.93b7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93b8		0a		asl a				asl 	a
.93b9		10 05		bpl $93c0			bpl 	_NotRef
.93bb		48		pha				pha
.93bc		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93bf		68		pla				pla
.93c0						_NotRef:
.93c0		0a		asl a				asl 	a
.93c1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93c3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93c5		15 79		ora $79,x			ora 	NSExponent+1,x
.93c7		f0 03		beq $93cc			beq 	_IntegerCode 				; if clear, then we have two integers
.93c9		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.93cc						_IntegerCode:
.93cc						IntegerModulusNoCheck:
.93cc		20 a5 93	jsr $93a5			jsr 	CheckDivideZero 			; do div zero check
.93cf		20 d7 93	jsr $93d7			jsr 	Int32Divide 				; do the division
.93d2		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.93d4		56 50		lsr $50,x			lsr 	NSStatus,x
.93d6		60		rts				rts
.93d7						Int32Divide:
.93d7		48		pha				pha 								; save AXY
.93d8		5a		phy				phy
.93d9		20 3b a1	jsr $a13b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93dc		20 54 a1	jsr $a154			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.93df		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.93e1						_I32DivideLoop:
.93e1		e8		inx				inx
.93e2		e8		inx				inx
.93e3		20 67 a1	jsr $a167			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.93e6		ca		dex				dex
.93e7		ca		dex				dex
.93e8		20 68 a1	jsr $a168			jsr 	NSMRotateLeft
.93eb		20 16 94	jsr $9416			jsr 	DivideCheckSubtract 		; check if subtract possible
.93ee		90 02		bcc $93f2			bcc 	_I32DivideNoCarryIn
.93f0		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.93f2						_I32DivideNoCarryIn:
.93f2		88		dey				dey 								; loop round till division completed.
.93f3		d0 ec		bne $93e1			bne 	_I32DivideLoop
.93f5		7a		ply				ply 								; restore AXY and exit
.93f6		68		pla				pla
.93f7		60		rts				rts
.93f8						Int32ShiftDivide:
.93f8		48		pha				pha 								; save AY
.93f9		5a		phy				phy
.93fa		e8		inx				inx 								; clear S[X+2]
.93fb		e8		inx				inx
.93fc		20 58 a1	jsr $a158			jsr 	NSMSetZero
.93ff		ca		dex				dex
.9400		ca		dex				dex
.9401		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9403						_I32SDLoop:
.9403		20 16 94	jsr $9416			jsr 	DivideCheckSubtract 		; check if subtract possible
.9406		e8		inx				inx
.9407		e8		inx				inx
.9408		20 68 a1	jsr $a168			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.940b		ca		dex				dex
.940c		ca		dex				dex
.940d		20 68 a1	jsr $a168			jsr 	NSMRotateLeft
.9410		88		dey				dey 	 							; do 31 times
.9411		d0 f0		bne $9403			bne 	_I32SDLoop
.9413		7a		ply				ply 								; restore AY and exit
.9414		68		pla				pla
.9415		60		rts				rts
.9416						DivideCheckSubtract:
.9416		20 21 95	jsr $9521			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9419		b0 04		bcs $941f			bcs 	_DCSExit 					; if carry set, then could do, exit
.941b		20 07 95	jsr $9507			jsr 	AddTopTwoStack 				; add it back in
.941e		18		clc				clc 								; and return False
.941f						_DCSExit:
.941f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9420						MulInteger:
.9420		fa		plx				plx
.9421		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9423		15 51		ora $51,x			ora 	NSStatus+1,x
.9425		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9426		0a		asl a				asl 	a
.9427		10 05		bpl $942e			bpl 	_NotRef
.9429		48		pha				pha
.942a		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.942d		68		pla				pla
.942e						_NotRef:
.942e		0a		asl a				asl 	a 							; put MSB of type into A:7
.942f		30 09		bmi $943a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9431		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9433		15 79		ora $79,x			ora 	NSExponent+1,x
.9435		f0 06		beq $943d			beq 	_IntegerCode 				; if clear, then we have two integers
.9437		4c 9e 98	jmp $989e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.943a						_StringData:
.943a		4c ea a2	jmp $a2ea			jmp 	NotDoneError							; at least one string - don't know both are strings.
.943d						_IntegerCode:
.943d		20 4a 94	jsr $944a			jsr 	MultiplyShort
.9440		c9 00		cmp #$00			cmp 	#0
.9442		f0 05		beq $9449			beq 	_MIExit
.9444		a9 04		lda #$04		lda	#4
.9446		4c 0d 92	jmp $920d		jmp	ErrorHandler
.9449						_MIExit:
.9449		60		rts				rts
.944a						MultiplyShort:
.944a		5a		phy				phy 								; save Y
.944b		20 3b a1	jsr $a13b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.944e		20 54 a1	jsr $a154			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9451		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9453						_I32MLoop:
.9453		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9455		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9457		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9459		15 72		ora $72,x			ora 	NSMantissa3+2,x
.945b		f0 25		beq $9482			beq 	_I32MExit 					; exit if zero
.945d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.945f		29 01		and #$01			and 	#1
.9461		f0 0d		beq $9470			beq 	_I32MNoAdd
.9463		20 07 95	jsr $9507			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9466		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9468		10 06		bpl $9470			bpl 	_I32MNoAdd
.946a						_I32ShiftRight:
.946a		20 71 a1	jsr $a171			jsr 	NSMShiftRight 				; shift S[X] right
.946d		c8		iny				iny 								; increment shift count
.946e		80 09		bra $9479			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9470						_I32MNoAdd:
.9470		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9472		70 f6		bvs $946a			bvs 	_I32ShiftRight 				; instead.
.9474		e8		inx				inx
.9475		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9478		ca		dex				dex
.9479						_I32MShiftUpper:
.9479		e8		inx				inx 								; shift S[X+2] right
.947a		e8		inx				inx
.947b		20 71 a1	jsr $a171			jsr 	NSMShiftRight
.947e		ca		dex				dex
.947f		ca		dex				dex
.9480		80 d1		bra $9453			bra 	_I32MLoop 					; try again.
.9482						_I32MExit:
.9482		20 88 94	jsr $9488			jsr 	CalculateSign
.9485		98		tya				tya 								; shift in A
.9486		7a		ply				ply 								; restore Y and exit
.9487		60		rts				rts
.9488						CalculateSign:
.9488		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.948a		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.948c		55 51		eor $51,x			eor 	NSStatus+1,x
.948e		0a		asl a				asl 	a 							; shift bit 7 into carry
.948f		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9491		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9492						CompareStrings:
.9492		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9494		35 51		and $51,x			and 	NSStatus+1,x
.9496		29 10		and #$10			and 	#NSBIsString
.9498		f0 28		beq $94c2			beq 	_CSTypeError
.949a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.949c		85 36		sta $36				sta 	zTemp0
.949e		b5 60		lda $60,x			lda 	NSMantissa1,x
.94a0		85 37		sta $37				sta 	zTemp0+1
.94a2		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.94a4		85 38		sta $38				sta 	zTemp1
.94a6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94a8		85 39		sta $39				sta 	zTemp1+1
.94aa		5a		phy				phy 								; save Y so we can access strings
.94ab		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.94ad						_CSLoop:
.94ad		c8		iny				iny
.94ae		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.94b0		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.94b2		d0 06		bne $94ba			bne 	_CSDifferent
.94b4		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.94b6		d0 f5		bne $94ad			bne 	_CSLoop 					; still comparing
.94b8						_CSExit:
.94b8		7a		ply				ply 								; reached end, return zero in A from EOS
.94b9		60		rts				rts
.94ba						_CSDifferent:
.94ba		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.94bc		90 fa		bcc $94b8			bcc		_CSExit
.94be		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.94c0		80 f6		bra $94b8			bra 	_CSExit
.94c2						_CSTypeError:
.94c2		4c e0 a2	jmp $a2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.94c5						ShiftLeft:
.94c5		38		sec				sec 								; common code, carry determines which way.
.94c6		80 01		bra $94c9			bra 	ShiftMain
.94c8						ShiftRight:
.94c8		18		clc				clc
.94c9						ShiftMain:
.94c9		fa		plx				plx 								; restore X
.94ca		08		php				php 								; save direction
.94cb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94cd		15 51		ora $51,x			ora 	NSStatus+1,x
.94cf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94d0		0a		asl a				asl 	a
.94d1		10 05		bpl $94d8			bpl 	_NotRef
.94d3		48		pha				pha
.94d4		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94d7		68		pla				pla
.94d8						_NotRef:
.94d8		0a		asl a				asl 	a
.94d9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94db		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94dd		15 79		ora $79,x			ora 	NSExponent+1,x
.94df		f0 03		beq $94e4			beq 	_IntegerCode 				; if clear, then we have two integers
.94e1		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.94e4						_IntegerCode:
.94e4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.94e6		29 e0		and #$e0			and 	#$E0
.94e8		15 61		ora $61,x			ora 	NSMantissa1+1,x
.94ea		15 69		ora $69,x			ora 	NSMantissa2+1,x
.94ec		15 71		ora $71,x			ora 	NSMantissa3+1,x
.94ee		d0 12		bne $9502			bne 	_SMExit0 					; if >= 32 it will always return zero.
.94f0						_SMLoop:
.94f0		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.94f2		30 11		bmi $9505			bmi 	_SMExit 					; exit if done.
.94f4		28		plp				plp 								; restore direction setting
.94f5		08		php				php
.94f6		90 05		bcc $94fd			bcc 	_SMRight
.94f8		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; shift left if CS
.94fb		80 f3		bra $94f0			bra 	_SMLoop
.94fd						_SMRight:
.94fd		20 71 a1	jsr $a171			jsr 	NSMShiftRight 				; shift right if CC
.9500		80 ee		bra $94f0			bra 	_SMLoop
.9502						_SMExit0:
.9502		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; return zero.
.9505						_SMExit:
.9505		28		plp				plp 								; throw direction
.9506		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9507						AddTopTwoStack:
.9507		18		clc				clc
.9508		b5 58		lda $58,x			lda		NSMantissa0,x
.950a		75 59		adc $59,x			adc 		NSMantissa0+1,x
.950c		95 58		sta $58,x			sta 	NSMantissa0,x
.950e		b5 60		lda $60,x			lda		NSMantissa1,x
.9510		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9512		95 60		sta $60,x			sta 	NSMantissa1,x
.9514		b5 68		lda $68,x			lda		NSMantissa2,x
.9516		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9518		95 68		sta $68,x			sta 	NSMantissa2,x
.951a		b5 70		lda $70,x			lda		NSMantissa3,x
.951c		75 71		adc $71,x			adc 		NSMantissa3+1,x
.951e		95 70		sta $70,x			sta 	NSMantissa3,x
.9520		60		rts				rts
.9521						SubTopTwoStack:
.9521		38		sec				sec
.9522		b5 58		lda $58,x			lda		NSMantissa0,x
.9524		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9526		95 58		sta $58,x			sta 	NSMantissa0,x
.9528		b5 60		lda $60,x			lda		NSMantissa1,x
.952a		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.952c		95 60		sta $60,x			sta 	NSMantissa1,x
.952e		b5 68		lda $68,x			lda		NSMantissa2,x
.9530		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9532		95 68		sta $68,x			sta 	NSMantissa2,x
.9534		b5 70		lda $70,x			lda		NSMantissa3,x
.9536		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9538		95 70		sta $70,x			sta 	NSMantissa3,x
.953a		60		rts				rts
.953b						AddInteger:
.953b		fa		plx				plx
.953c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.953e		15 51		ora $51,x			ora 	NSStatus+1,x
.9540		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9541		0a		asl a				asl 	a
.9542		10 05		bpl $9549			bpl 	_NotRef
.9544		48		pha				pha
.9545		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9548		68		pla				pla
.9549						_NotRef:
.9549		0a		asl a				asl 	a 							; put MSB of type into A:7
.954a		30 09		bmi $9555			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.954c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.954e		15 79		ora $79,x			ora 	NSExponent+1,x
.9550		f0 06		beq $9558			beq 	_IntegerCode 				; if clear, then we have two integers
.9552		4c 4e 97	jmp $974e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9555						_StringData:
.9555		4c 14 93	jmp $9314			jmp 	StringConcat							; at least one string - don't know both are strings.
.9558						_IntegerCode:
.9558						AddCode:
.9558		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.955a		55 51		eor $51,x			eor 	NSStatus+1,x
.955c		10 a9		bpl $9507			bpl 	AddTopTwoStack
.955e		20 21 95	jsr $9521			jsr 	SubTopTwoStack 				; do a physical subtraction
.9561		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9563		10 07		bpl $956c			bpl 	_AddExit
.9565		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9567		95 50		sta $50,x			sta 	NSStatus,x
.9569		20 21 a1	jsr $a121			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.956c						_AddExit:
.956c		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; check for -0
.956f		d0 02		bne $9573			bne 	_AddNonZero
.9571		74 50		stz $50,x			stz 	NSStatus,x
.9573						_AddNonZero:
.9573		60		rts				rts
.9574						SubInteger:
.9574		fa		plx				plx
.9575		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9577		15 51		ora $51,x			ora 	NSStatus+1,x
.9579		0a		asl a				asl 	a 							; shift reference bit into sign bit
.957a		0a		asl a				asl 	a
.957b		10 05		bpl $9582			bpl 	_NotRef
.957d		48		pha				pha
.957e		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9581		68		pla				pla
.9582						_NotRef:
.9582		0a		asl a				asl 	a 							; put MSB of type into A:7
.9583		30 09		bmi $958e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9585		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9587		15 79		ora $79,x			ora 	NSExponent+1,x
.9589		f0 06		beq $9591			beq 	_IntegerCode 				; if clear, then we have two integers
.958b		4c 53 97	jmp $9753			jmp 	FloatingPointSub 							; otherwise at least one float.
.958e						_StringData:
.958e		4c ea a2	jmp $a2ea			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9591						_IntegerCode:
.9591		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9593		49 80		eor #$80			eor 	#$80
.9595		95 51		sta $51,x			sta 	NSStatus+1,x
.9597		80 bf		bra $9558			bra 	AddCode 					; and do the same code as add.
.9599						AndInteger:
.9599		fa		plx				plx
.959a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.959c		15 51		ora $51,x			ora 	NSStatus+1,x
.959e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.959f		0a		asl a				asl 	a
.95a0		10 05		bpl $95a7			bpl 	_NotRef
.95a2		48		pha				pha
.95a3		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95a6		68		pla				pla
.95a7						_NotRef:
.95a7		0a		asl a				asl 	a
.95a8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95aa		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ac		15 79		ora $79,x			ora 	NSExponent+1,x
.95ae		f0 03		beq $95b3			beq 	_IntegerCode 				; if clear, then we have two integers
.95b0		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.95b3						_IntegerCode:
.95b3		b5 58		lda $58,x			lda		NSMantissa0,x
.95b5		35 59		and $59,x			and 		NSMantissa0+1,x
.95b7		95 58		sta $58,x			sta 	NSMantissa0,x
.95b9		b5 60		lda $60,x			lda		NSMantissa1,x
.95bb		35 61		and $61,x			and 		NSMantissa1+1,x
.95bd		95 60		sta $60,x			sta 	NSMantissa1,x
.95bf		b5 68		lda $68,x			lda		NSMantissa2,x
.95c1		35 69		and $69,x			and 		NSMantissa2+1,x
.95c3		95 68		sta $68,x			sta 	NSMantissa2,x
.95c5		b5 70		lda $70,x			lda		NSMantissa3,x
.95c7		35 71		and $71,x			and 		NSMantissa3+1,x
.95c9		95 70		sta $70,x			sta 	NSMantissa3,x
.95cb		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.95cd		60		rts				rts
.95ce						OraInteger:
.95ce		fa		plx				plx
.95cf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95d1		15 51		ora $51,x			ora 	NSStatus+1,x
.95d3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d4		0a		asl a				asl 	a
.95d5		10 05		bpl $95dc			bpl 	_NotRef
.95d7		48		pha				pha
.95d8		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95db		68		pla				pla
.95dc						_NotRef:
.95dc		0a		asl a				asl 	a
.95dd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95df		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e1		15 79		ora $79,x			ora 	NSExponent+1,x
.95e3		f0 03		beq $95e8			beq 	_IntegerCode 				; if clear, then we have two integers
.95e5		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.95e8						_IntegerCode:
.95e8		b5 58		lda $58,x			lda		NSMantissa0,x
.95ea		15 59		ora $59,x			ora 		NSMantissa0+1,x
.95ec		95 58		sta $58,x			sta 	NSMantissa0,x
.95ee		b5 60		lda $60,x			lda		NSMantissa1,x
.95f0		15 61		ora $61,x			ora 		NSMantissa1+1,x
.95f2		95 60		sta $60,x			sta 	NSMantissa1,x
.95f4		b5 68		lda $68,x			lda		NSMantissa2,x
.95f6		15 69		ora $69,x			ora 		NSMantissa2+1,x
.95f8		95 68		sta $68,x			sta 	NSMantissa2,x
.95fa		b5 70		lda $70,x			lda		NSMantissa3,x
.95fc		15 71		ora $71,x			ora 		NSMantissa3+1,x
.95fe		95 70		sta $70,x			sta 	NSMantissa3,x
.9600		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9602		60		rts				rts
.9603						EorInteger:
.9603		fa		plx				plx
.9604		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9606		15 51		ora $51,x			ora 	NSStatus+1,x
.9608		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9609		0a		asl a				asl 	a
.960a		10 05		bpl $9611			bpl 	_NotRef
.960c		48		pha				pha
.960d		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9610		68		pla				pla
.9611						_NotRef:
.9611		0a		asl a				asl 	a
.9612		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9614		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9616		15 79		ora $79,x			ora 	NSExponent+1,x
.9618		f0 03		beq $961d			beq 	_IntegerCode 				; if clear, then we have two integers
.961a		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.961d						_IntegerCode:
.961d		b5 58		lda $58,x			lda		NSMantissa0,x
.961f		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9621		95 58		sta $58,x			sta 	NSMantissa0,x
.9623		b5 60		lda $60,x			lda		NSMantissa1,x
.9625		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9627		95 60		sta $60,x			sta 	NSMantissa1,x
.9629		b5 68		lda $68,x			lda		NSMantissa2,x
.962b		55 69		eor $69,x			eor 		NSMantissa2+1,x
.962d		95 68		sta $68,x			sta 	NSMantissa2,x
.962f		b5 70		lda $70,x			lda		NSMantissa3,x
.9631		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9633		95 70		sta $70,x			sta 	NSMantissa3,x
.9635		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9637		60		rts				rts
.9638						WordIndirect:
.9638		fa		plx				plx
.9639		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.963b		15 51		ora $51,x			ora 	NSStatus+1,x
.963d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.963e		0a		asl a				asl 	a
.963f		10 05		bpl $9646			bpl 	_NotRef
.9641		48		pha				pha
.9642		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9645		68		pla				pla
.9646						_NotRef:
.9646		0a		asl a				asl 	a
.9647		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9649		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.964b		15 79		ora $79,x			ora 	NSExponent+1,x
.964d		f0 03		beq $9652			beq 	_IntegerCode 				; if clear, then we have two integers
.964f		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.9652						_IntegerCode:
.9652		20 58 95	jsr $9558			jsr 	AddCode 					; add the two values
.9655		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9657		95 50		sta $50,x			sta 	NSStatus,x
.9659		60		rts				rts
.965a						ByteIndirect:
.965a		fa		plx				plx
.965b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.965d		15 51		ora $51,x			ora 	NSStatus+1,x
.965f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9660		0a		asl a				asl 	a
.9661		10 05		bpl $9668			bpl 	_NotRef
.9663		48		pha				pha
.9664		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9667		68		pla				pla
.9668						_NotRef:
.9668		0a		asl a				asl 	a
.9669		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.966b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.966d		15 79		ora $79,x			ora 	NSExponent+1,x
.966f		f0 03		beq $9674			beq 	_IntegerCode 				; if clear, then we have two integers
.9671		4c e0 a2	jmp $a2e0			jmp 	TypeError 					; anything else, type mismatch.
.9674						_IntegerCode:
.9674		20 58 95	jsr $9558			jsr 	AddCode 					; add the two values
.9677		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9679		95 50		sta $50,x			sta 	NSStatus,x
.967b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.967c						ConvertInt16:
.967c		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.967e		86 60		stx $60				stx 	NSMantissa1
.9680		64 68		stz $68				stz 	NSMantissa2
.9682		64 70		stz $70				stz 	NSMantissa3
.9684		64 50		stz $50				stz 	NSStatus 					; positive integer
.9686		a2 00		ldx #$00			ldx 	#0 							; stack level
.9688		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.968a		80 00		bra $968c			bra 	ConvertInt32
.968c						ConvertInt32:
.968c		5a		phy				phy
.968d		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.968f		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9691		10 08		bpl $969b			bpl 	_CI32NotNeg
.9693		48		pha				pha
.9694		a9 2d		lda #$2d			lda 	#'-'
.9696		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.9699		c8		iny				iny
.969a		68		pla				pla
.969b						_CI32NotNeg:
.969b		20 a9 96	jsr $96a9			jsr 	_CI32DivideConvert 			; recursive conversion
.969e		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.96a0		99 a7 04	sta $04a7,y			sta 	numberBuffer,y
.96a3		7a		ply				ply
.96a4		a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.96a6		a9 a7		lda #$a7			lda 	#numberBuffer & $FF
.96a8		60		rts				rts
.96a9						_CI32DivideConvert:
.96a9		e8		inx				inx 								; write to next slot up
.96aa		20 5a a1	jsr $a15a			jsr 	NSMSetByte 		 			; write the base out.
.96ad		ca		dex				dex
.96ae		20 d7 93	jsr $93d7			jsr 	Int32Divide 				; divide
.96b1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.96b3		48		pha				pha
.96b4		20 94 93	jsr $9394			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.96b7		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; is it zero ?
.96ba		f0 05		beq $96c1			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.96bc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.96be		20 a9 96	jsr $96a9			jsr 	_CI32DivideConvert 			; and recusrively call.
.96c1						_CI32NoRecurse:
.96c1		68		pla				pla 								; remainder
.96c2		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.96c4		90 02		bcc $96c8			bcc 	_CI32NotHex
.96c6		69 26		adc #$26			adc 	#6+32
.96c8						_CI32NotHex:
.96c8		69 30		adc #$30			adc 	#48
.96ca		99 a7 04	sta $04a7,y			sta 	numberBuffer,y 				; write out and exit
.96cd		c8		iny				iny
.96ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.96cf						PrecedenceLevel:
>96cf		04					.byte	 4	; $00 <<
>96d0		02					.byte	 2	; $01 <=
>96d1		02					.byte	 2	; $02 <>
>96d2		00					.byte	 0	; $03 !!3
>96d3		00					.byte	 0	; $04 ><
>96d4		02					.byte	 2	; $05 >=
>96d5		04					.byte	 4	; $06 >>
>96d6		00					.byte	 0	; $07 !!7
>96d7		00					.byte	 0	; $08 !!8
>96d8		00					.byte	 0	; $09 !!9
>96d9		00					.byte	 0	; $0a !!10
>96da		00					.byte	 0	; $0b !!11
>96db		00					.byte	 0	; $0c !!12
>96dc		00					.byte	 0	; $0d !!13
>96dd		00					.byte	 0	; $0e !!14
>96de		00					.byte	 0	; $0f !!15
>96df		00					.byte	 0	; $10 @
>96e0		00					.byte	 0	; $11 !!17
>96e1		00					.byte	 0	; $12 !!18
>96e2		00					.byte	 0	; $13 [
>96e3		04					.byte	 4	; $14 \
>96e4		00					.byte	 0	; $15 ]
>96e5		01					.byte	 1	; $16 ^
>96e6		00					.byte	 0	; $17 _
>96e7		00					.byte	 0	; $18 `
>96e8		00					.byte	 0	; $19 !!25
>96e9		00					.byte	 0	; $1a !!26
>96ea		00					.byte	 0	; $1b {
>96eb		01					.byte	 1	; $1c |
>96ec		00					.byte	 0	; $1d }
>96ed		00					.byte	 0	; $1e ~
>96ee		00					.byte	 0	; $1f [7m<7F>[m
>96ef		00					.byte	 0	; $20
>96f0		05					.byte	 5	; $21 !
>96f1		00					.byte	 0	; $22 "
>96f2		00					.byte	 0	; $23 #
>96f3		05					.byte	 5	; $24 $
>96f4		04					.byte	 4	; $25 %
>96f5		01					.byte	 1	; $26 &
>96f6		00					.byte	 0	; $27 '
>96f7		00					.byte	 0	; $28 (
>96f8		00					.byte	 0	; $29 )
>96f9		04					.byte	 4	; $2a *
>96fa		03					.byte	 3	; $2b +
>96fb		00					.byte	 0	; $2c ,
>96fc		03					.byte	 3	; $2d -
>96fd		00					.byte	 0	; $2e .
>96fe		04					.byte	 4	; $2f /
>96ff		00					.byte	 0	; $30 0
>9700		00					.byte	 0	; $31 1
>9701		00					.byte	 0	; $32 2
>9702		00					.byte	 0	; $33 3
>9703		00					.byte	 0	; $34 4
>9704		00					.byte	 0	; $35 5
>9705		00					.byte	 0	; $36 6
>9706		00					.byte	 0	; $37 7
>9707		00					.byte	 0	; $38 8
>9708		00					.byte	 0	; $39 9
>9709		00					.byte	 0	; $3a :
>970a		00					.byte	 0	; $3b ;
>970b		02					.byte	 2	; $3c <
>970c		02					.byte	 2	; $3d =
>970d		02					.byte	 2	; $3e >
>970e		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.970f						EvaluateExpressionAt0:
.970f		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9711						EvaluateExpression:
.9711		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9713						EvaluateExpressionAtPrecedence:
.9713		48		pha				pha 								; save precedence level
.9714		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9717		68		pla				pla 								; restore precedence level.
.9718						_EXPRLoop:
.9718		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.971a		b1 30		lda ($30),y			lda 	(codePtr),y
.971c		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.971e		b0 25		bcs $9745			bcs 	_EXPRExit
.9720		da		phx				phx 								; read the operator precedence
.9721		aa		tax				tax
.9722		bd cf 96	lda $96cf,x			lda 	PrecedenceLevel,x
.9725		fa		plx				plx
.9726		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9728		f0 1b		beq $9745			beq 	_EXPRExit
.972a		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.972c		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.972e		c5 37		cmp $37				cmp 	zTemp0+1
.9730		b0 13		bcs $9745			bcs		_EXPRExit 					; if current >= operator exit
.9732		48		pha				pha 								; save current precedence.
.9733		b1 30		lda ($30),y			lda 	(codePtr),y
.9735		c8		iny				iny
.9736		48		pha				pha
.9737		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9739		e8		inx				inx 								; work out the right hand side.
.973a		20 13 97	jsr $9713			jsr 	EvaluateExpressionAtPrecedence
.973d		ca		dex				dex
.973e		68		pla				pla 								; get operator, call the code.
.973f		20 48 97	jsr $9748			jsr 	_EXPRCaller
.9742		68		pla				pla 								; restore precedence level
.9743		80 d3		bra $9718			bra 	_EXPRLoop 					; and go round.
.9745						_EXPRExit:
.9745		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9747		60		rts				rts
.9748						_EXPRCaller:
.9748		da		phx				phx 								; save on stack, first thing is to restore it
.9749		0a		asl a				asl 	a 							; double so can use vectors into X
.974a		aa		tax				tax
.974b		7c 7c 8e	jmp ($8e7c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.974e						FloatingPointAdd:
.974e		20 c4 98	jsr $98c4			jsr 	FloatPrepare 				; prepare for floats
.9751		80 09		bra $975c			bra 	FloatAdd
.9753						FloatingPointSub:
.9753		20 c4 98	jsr $98c4			jsr 	FloatPrepare 				; prepare for floats
.9756						FloatSubtract:
.9756		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9758		49 80		eor #$80			eor 	#$80
.975a		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.975c						FloatAdd:
.975c		48		pha				pha
.975d		5a		phy				phy
.975e		20 d3 98	jsr $98d3			jsr 	NSNormalise 				; normalise S[X]
.9761		f0 51		beq $97b4			beq 	_FAReturn1
.9763		e8		inx				inx 								; normalise S[X+1]
.9764		20 d3 98	jsr $98d3			jsr 	NSNormalise
.9767		ca		dex				dex
.9768		c9 00		cmp #$00			cmp 	#0
.976a		f0 60		beq $97cc			beq 	_FAExit 					; if so, just return A
.976c		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.976e		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9770		f0 18		beq $978a			beq 	_FAExponentsEqual
.9772		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9774		a8		tay				tay
.9775		38		sec				sec 								; do a signed comparison of the exponents.
.9776		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9778		50 02		bvc $977c			bvc 	_FANoSignedChange
.977a		49 80		eor #$80			eor 	#$80
.977c						_FANoSignedChange:
.977c		29 80		and #$80			and 	#$80
.977e		10 02		bpl $9782			bpl 	_FAHaveMax
.9780		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9782						_FAHaveMax:
.9782		20 cf 97	jsr $97cf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9785		e8		inx				inx
.9786		20 cf 97	jsr $97cf			jsr 	_FAShiftToExponent
.9789		ca		dex				dex
.978a						_FAExponentsEqual:
.978a		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.978c		55 51		eor $51,x			eor 	NSStatus+1,x
.978e		30 0e		bmi $979e			bmi 	_FADifferentSigns
.9790		20 07 95	jsr $9507			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9793		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9795		10 35		bpl $97cc			bpl 	_FAExit 					; if no, we are done.
.9797		20 71 a1	jsr $a171			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.979a		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.979c		80 2e		bra $97cc			bra 	_FAExit
.979e						_FADifferentSigns:
.979e		20 21 95	jsr $9521			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.97a1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.97a3		10 06		bpl $97ab			bpl 	_FACheckZero 				; if no, check for -0
.97a5		20 1a a1	jsr $a11a			jsr 	NSMNegate 					; netate result
.97a8		20 21 a1	jsr $a121			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.97ab						_FACheckZero:
.97ab		20 7a a1	jsr $a17a			jsr 	NSMIsZero	 				; check for -0
.97ae		d0 1c		bne $97cc			bne 	_FAExit
.97b0		74 50		stz $50,x			stz 	NSStatus,x
.97b2		80 18		bra $97cc			bra 	_FAExit
.97b4						_FAReturn1:
.97b4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.97b6		95 58		sta $58,x			sta 	NSMantissa0,x
.97b8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.97ba		95 60		sta $60,x			sta 	NSMantissa1,x
.97bc		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.97be		95 68		sta $68,x			sta 	NSMantissa2,x
.97c0		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.97c2		95 70		sta $70,x			sta 	NSMantissa3,x
.97c4		b5 79		lda $79,x			lda 	NSExponent+1,x
.97c6		95 78		sta $78,x			sta 	NSExponent,x
.97c8		b5 51		lda $51,x			lda 	NSStatus+1,x
.97ca		95 50		sta $50,x			sta 	NSStatus,x
.97cc						_FAExit:
.97cc		7a		ply				ply
.97cd		68		pla				pla
.97ce		60		rts				rts
.97cf						_FAShiftToExponent:
.97cf						_FAShiftToExponent2:
.97cf		98		tya				tya 								; compare Y to exponent
.97d0		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.97d2		f0 07		beq $97db			beq 	_FASEExit 					; exit if so.
.97d4		20 71 a1	jsr $a171			jsr 	NSMShiftRight	 			; shift the mantissa right
.97d7		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.97d9		80 f4		bra $97cf			bra 	_FAShiftToExponent2
.97db						_FASEExit:
.97db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.97dc						CompareFloat:
.97dc		20 56 97	jsr $9756			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.97df		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.97e1		29 f8		and #$f8			and 	#$F8
.97e3		15 68		ora $68,x			ora 	NSMantissa2,x
.97e5		15 70		ora $70,x			ora 	NSMantissa3,x
.97e7		f0 08		beq $97f1			beq 	_FCExit 					; zero, so approximately identical
.97e9		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.97eb		34 50		bit $50,x			bit 	NSStatus,x
.97ed		10 02		bpl $97f1			bpl 	_FCExit
.97ef						_FCNegative:
.97ef		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.97f1						_FCExit:
.97f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.97f2						FDivideCommand:
.97f2		fa		plx				plx	 								; restore stack position
.97f3		20 c4 98	jsr $98c4			jsr 	FloatPrepare 				; prepare for floats
.97f6						FloatDivide:
.97f6		48		pha				pha
.97f7		e8		inx				inx
.97f8		20 d3 98	jsr $98d3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97fb		ca		dex				dex
.97fc		c9 00		cmp #$00			cmp 	#0
.97fe		f0 1d		beq $981d			beq 	_FDZero
.9800		20 d3 98	jsr $98d3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9803		f0 16		beq $981b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9805		20 f8 93	jsr $93f8			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9808		20 94 93	jsr $9394			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.980b		20 d3 98	jsr $98d3			jsr		NSNormalise 				; renormalise
.980e		20 88 94	jsr $9488			jsr 	CalculateSign 				; calculate result sign
.9811		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9813		38		sec				sec
.9814		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9816		38		sec				sec
.9817		e9 1e		sbc #$1e			sbc 	#30
.9819		95 78		sta $78,x			sta 	NSExponent,x
.981b						_FDExit:
.981b		68		pla				pla
.981c		60		rts				rts
.981d						_FDZero:
.981d		a9 03		lda #$03		lda	#3
.981f		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9822						FloatFractionalPart:
.9822		5a		phy				phy
.9823		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9825		29 7f		and #$7f			and 	#$7F
.9827		95 50		sta $50,x			sta 	NSStatus,x
.9829		20 d3 98	jsr $98d3			jsr 	NSNormalise
.982c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.982e		38		sec				sec
.982f		e9 e0		sbc #$e0			sbc 	#$E0
.9831		90 29		bcc $985c			bcc 	_FFPExit 					; already fractional
.9833		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9835		b0 22		bcs $9859			bcs 	_FFPZero
.9837		a8		tay				tay 								; put count to do in Y
.9838		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.983a		20 5e 98	jsr $985e			jsr 	_FFPPartial
.983d		95 70		sta $70,x			sta 	NSMantissa3,x
.983f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9841		20 5e 98	jsr $985e			jsr 	_FFPPartial
.9844		95 68		sta $68,x			sta 	NSMantissa2,x
.9846		b5 60		lda $60,x			lda 	NSMantissa1,x
.9848		20 5e 98	jsr $985e			jsr 	_FFPPartial
.984b		95 60		sta $60,x			sta 	NSMantissa1,x
.984d		b5 58		lda $58,x			lda 	NSMantissa0,x
.984f		20 5e 98	jsr $985e			jsr 	_FFPPartial
.9852		95 58		sta $58,x			sta 	NSMantissa0,x
.9854		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; zeroed check.
.9857		d0 03		bne $985c			bne 	_FFPExit
.9859						_FFPZero:
.9859		20 58 a1	jsr $a158			jsr 	NSMSetZero
.985c						_FFPExit:
.985c		7a		ply				ply
.985d		60		rts				rts
.985e						_FFPPartial:
.985e		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9860		f0 17		beq $9879			beq 	_FFFPPExit
.9862		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9864		b0 0c		bcs $9872			bcs 	_FFFPPWholeByte
.9866		5a		phy				phy
.9867						_FFFPPLeft:
.9867		0a		asl a				asl 	a
.9868		88		dey				dey
.9869		d0 fc		bne $9867			bne 	_FFFPPLeft
.986b		7a		ply				ply
.986c						_FFFPPRight:
.986c		4a		lsr a				lsr 	a
.986d		88		dey				dey
.986e		d0 fc		bne $986c			bne 	_FFFPPRight
.9870		80 07		bra $9879			bra 	_FFFPPExit
.9872						_FFFPPWholeByte:
.9872		98		tya				tya 								; subtract 8 from count
.9873		38		sec				sec
.9874		e9 08		sbc #$08			sbc 	#8
.9876		a8		tay				tay
.9877		a9 00		lda #$00			lda 	#0 							; and clear all
.9879						_FFFPPExit:
.9879		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.987a						FloatIntegerPart:
.987a		48		pha				pha
.987b		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.987d		f0 1d		beq $989c			beq 	_FIPExit 					; if so do nothing
.987f		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; is it zero ?
.9882		f0 15		beq $9899			beq 	_FIPZero 					; if so return zero.
.9884		20 d3 98	jsr $98d3			jsr 	NSNormalise 				; normalise
.9887		f0 10		beq $9899			beq 	_FIPZero 					; normalised to zero, exit zero
.9889						_FIPShift:
.9889		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.988b		10 07		bpl $9894			bpl 	_FIPCheckZero
.988d		20 71 a1	jsr $a171			jsr 	NSMShiftRight 				; shift mantissa right
.9890		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9892		80 f5		bra $9889			bra 	_FIPShift
.9894						_FIPCheckZero:
.9894		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; avoid -0 problem
.9897		d0 03		bne $989c			bne 	_FIPExit 					; set to zero if mantissa zero.
.9899						_FIPZero:
.9899		20 58 a1	jsr $a158			jsr 	NSMSetZero
.989c						_FIPExit:
.989c		68		pla				pla
.989d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.989e						FloatingPointMultiply:
.989e		20 c4 98	jsr $98c4			jsr 	FloatPrepare 				; prepare for floats
.98a1						FloatMultiply:
.98a1		48		pha				pha
.98a2		20 d3 98	jsr $98d3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98a5		f0 18		beq $98bf			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.98a7		e8		inx				inx
.98a8		20 d3 98	jsr $98d3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98ab		ca		dex				dex
.98ac		c9 00		cmp #$00			cmp 	#0
.98ae		f0 0c		beq $98bc			beq 	_FDSetZero
.98b0		20 4a 94	jsr $944a			jsr 	MultiplyShort 				; calculate the result.
.98b3		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.98b5		18		clc				clc
.98b6		75 79		adc $79,x			adc 	NSExponent+1,x
.98b8		95 78		sta $78,x			sta 	NSExponent,x
.98ba		80 03		bra $98bf			bra 	_FDExit
.98bc						_FDSetZero:
.98bc		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; return 0
.98bf						_FDExit:
.98bf		20 d3 98	jsr $98d3			jsr 	NSNormalise 				; normalise the result
.98c2		68		pla				pla
.98c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.98c4						FloatPrepare:
.98c4		20 cf 99	jsr $99cf			jsr 	DereferenceTopTwo 			; dereference the top two values
.98c7		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.98c9		15 51		ora $51,x			ora 	NSStatus+1,x
.98cb		29 10		and #$10			and 	#NSBIsString
.98cd		d0 01		bne $98d0			bne 	_FDType
.98cf		60		rts				rts
.98d0						_FDType:
.98d0		4c e0 a2	jmp $a2e0			jmp 	TypeError
.98d3						NSNormalise:
.98d3		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.98d5		29 80		and #$80			and 	#$80
.98d7		09 08		ora #$08			ora 	#NSTFloat
.98d9		95 50		sta $50,x			sta 	NSStatus,x
.98db		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; if zero exit
.98de		d0 07		bne $98e7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98e0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.98e2		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.98e4		a9 00		lda #$00			lda 	#0 							; set Z flag
.98e6		60		rts				rts
.98e7						_NSNormaliseOptimise:
.98e7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98e9		d0 19		bne $9904			bne 	_NSNormaliseLoop
.98eb		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.98ed		30 15		bmi $9904			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.98ef		95 70		sta $70,x			sta 	NSMantissa3,x
.98f1		b5 60		lda $60,x			lda 	NSMantissa1,x
.98f3		95 68		sta $68,x			sta 	NSMantissa2,x
.98f5		b5 58		lda $58,x			lda 	NSMantissa0,x
.98f7		95 60		sta $60,x			sta 	NSMantissa1,x
.98f9		74 58		stz $58,x			stz 	NSMantissa0,x
.98fb		b5 78		lda $78,x			lda 	NSExponent,x
.98fd		38		sec				sec
.98fe		e9 08		sbc #$08			sbc 	#8
.9900		95 78		sta $78,x			sta 	NSExponent,x
.9902		80 e3		bra $98e7			bra 	_NSNormaliseOptimise
.9904						_NSNormaliseLoop:
.9904		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9906		70 07		bvs $990f			bvs 	_NSNExit 					; exit if so with Z flag clear
.9908		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; shift mantissa left
.990b		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.990d		80 f5		bra $9904			bra 	_NSNormaliseLoop
.990f						_NSNExit:
.990f		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9911		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9912						AssignNumber:
.9912		5a		phy				phy
.9913		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9915		85 36		sta $36				sta 	zTemp0
.9917		b5 60		lda $60,x			lda 	NSMantissa1,x
.9919		85 37		sta $37				sta 	zTemp0+1
.991b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.991d		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.991f		95 50		sta $50,x			sta 	NSStatus,x
.9921		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9923		c9 08		cmp #$08			cmp 	#NSTFloat
.9925		f0 24		beq $994b			beq 	_ANFloat
.9927		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9929		f0 03		beq $992e			beq		_ANNotFloat
.992b		4c db a2	jmp $a2db			jmp 	RangeError					; if it is, report an error.
.992e						_ANNotFloat:
.992e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9930		29 03		and #$03			and 	#3
.9932		d0 05		bne $9939			bne 	_ANByteWord
.9934		20 56 99	jsr $9956			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9937		80 1b		bra $9954			bra 	_ANExit
.9939						_ANByteWord:
.9939		48		pha				pha 								; save count
.993a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.993c		92 36		sta ($36)			sta 	(zTemp0)
.993e		68		pla				pla
.993f		c9 01		cmp #$01			cmp	 	#1
.9941		f0 11		beq $9954			beq 	_ANExit
.9943		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9945		a0 01		ldy #$01			ldy 	#1
.9947		91 36		sta ($36),y			sta 	(zTemp0),y
.9949		80 09		bra $9954			bra 	_ANExit
.994b						_ANFloat:
.994b		20 56 99	jsr $9956			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.994e		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9950		a0 04		ldy #$04			ldy 	#4
.9952		91 36		sta ($36),y			sta 	(zTemp0),y
.9954						_ANExit:
.9954		7a		ply				ply
.9955		60		rts				rts
.9956						_ANCopy4PackSign:
.9956		a0 03		ldy #$03			ldy 	#3
.9958		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.995a		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.995c		15 71		ora $71,x			ora 	NSMantissa3+1,x
.995e		91 36		sta ($36),y			sta 	(zTemp0),y
.9960		88		dey				dey
.9961		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9963		91 36		sta ($36),y			sta 	(zTemp0),y
.9965		88		dey				dey
.9966		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9968		91 36		sta ($36),y			sta 	(zTemp0),y
.996a		88		dey				dey
.996b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.996d		91 36		sta ($36),y			sta 	(zTemp0),y
.996f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9970						AssignString:
.9970		5a		phy				phy
.9971		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9973		85 38		sta $38				sta 	zTemp1
.9975		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9977		85 39		sta $39				sta 	zTemp1+1
.9979		b5 58		lda $58,x			lda 	NSMantissa0,x
.997b		85 36		sta $36				sta 	zTemp0
.997d		b5 60		lda $60,x			lda 	NSMantissa1,x
.997f		85 37		sta $37				sta 	zTemp0+1
.9981		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9983		b1 36		lda ($36),y			lda 	(zTemp0),y
.9985		f0 23		beq $99aa			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9987		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9988		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.998a		e9 02		sbc #$02			sbc 	#2
.998c		85 3c		sta $3c				sta 	zsTemp
.998e		a0 01		ldy #$01			ldy 	#1
.9990		b1 36		lda ($36),y			lda 	(zTemp0),y
.9992		e9 00		sbc #$00			sbc 	#0
.9994		85 3d		sta $3d				sta 	zsTemp+1
.9996		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9998						_ASGetLength:
.9998		c8		iny				iny
.9999		b1 38		lda ($38),y			lda 	(zTemp1),y
.999b		d0 fb		bne $9998			bne 	_ASGetLength
.999d		98		tya				tya 								; is this length <= current length
.999e		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.99a0		90 1e		bcc $99c0			bcc 	_ASCopyString
.99a2		f0 1c		beq $99c0			beq 	_ASCopyString
.99a4		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.99a6		a0 01		ldy #$01			ldy 	#1
.99a8		91 3c		sta ($3c),y			sta 	(zsTemp),y
.99aa						_ASNewStringRequired:
.99aa		e8		inx				inx 								; concrete the new string.
.99ab		20 aa b2	jsr $b2aa			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.99ae		ca		dex				dex
.99af		18		clc				clc
.99b0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.99b2		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.99b4		92 36		sta ($36)			sta 	(zTemp0)
.99b6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.99b8		69 00		adc #$00			adc 	#0
.99ba		a0 01		ldy #$01			ldy 	#1
.99bc		91 36		sta ($36),y			sta 	(zTemp0),y
.99be		80 0d		bra $99cd			bra 	_ASExit
.99c0						_ASCopyString:
.99c0		a0 00		ldy #$00			ldy 	#0
.99c2						_ASCopyLoop:
.99c2		b1 38		lda ($38),y			lda 	(zTemp1),y
.99c4		c8		iny				iny
.99c5		c8		iny				iny
.99c6		91 3c		sta ($3c),y			sta 	(zsTemp),y
.99c8		88		dey				dey
.99c9		c9 00		cmp #$00			cmp 	#0
.99cb		d0 f5		bne $99c2			bne 	_ASCopyLoop
.99cd						_ASExit:
.99cd		7a		ply				ply
.99ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.99cf						DereferenceTopTwo:
.99cf		e8		inx				inx
.99d0		20 d4 99	jsr $99d4			jsr 	Dereference 				; deref x+1
.99d3		ca		dex				dex  								; falls through to deref x
.99d4						Dereference:
.99d4		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.99d6		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.99d8		f0 48		beq $9a22			beq 	_DRFExit 					; not a reference, so exit.
.99da		5a		phy				phy
.99db		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.99dd		85 36		sta $36				sta 	zTemp0
.99df		b5 60		lda $60,x			lda 	NSMantissa1,x
.99e1		85 37		sta $37				sta 	zTemp0+1
.99e3		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.99e5		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.99e7		95 58		sta $58,x			sta 	NSMantissa0,x
.99e9		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.99eb		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.99ed		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.99ef		f0 0e		beq $99ff			beq 	_DRFDereferenceTwo
.99f1		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99f3		f0 2f		beq $9a24			beq 	_DRFFull
.99f5		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99f7		29 03		and #$03			and 	#3
.99f9		f0 29		beq $9a24			beq 	_DRFFull 					; the whole word
.99fb		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99fd		f0 06		beq $9a05			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99ff						_DRFDereferenceTwo:
.99ff		a0 01		ldy #$01			ldy 	#1
.9a01		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a03		95 60		sta $60,x			sta 	NSMantissa1,x
.9a05						_DRFClear23:
.9a05		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9a07		74 70		stz $70,x			stz 	NSMantissa3,x
.9a09		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9a0b		29 18		and #$18			and 	#NSBTypeMask
.9a0d		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9a0f		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9a11		d0 0e		bne $9a21			bne 	_DRFNotString
.9a13		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9a15		15 60		ora $60,x			ora 	NSMantissa1,x
.9a17		d0 08		bne $9a21			bne 	_DRFNotString
.9a19		a9 23		lda #$23			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9a1b		95 58		sta $58,x			sta 	NSMantissa0,x
.9a1d		a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9a1f		95 60		sta $60,x			sta 	NSMantissa1,x
.9a21						_DRFNotString
.9a21		7a		ply				ply 								; restore Y and exit
.9a22						_DRFExit:
.9a22		60		rts				rts
.9a23						_DRFNullString:
>9a23		00						.byte 	0
.9a24						_DRFFull:
.9a24		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9a26		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a28		95 60		sta $60,x			sta 	NSMantissa1,x
.9a2a		c8		iny				iny
.9a2b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a2d		95 68		sta $68,x			sta 	NSMantissa2,x
.9a2f		c8		iny				iny
.9a30		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a32		95 70		sta $70,x			sta 	NSMantissa3,x
.9a34		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9a36		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9a38		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9a3a		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9a3c		f0 05		beq $9a43			beq 	_DRFNoExponent
.9a3e		c8		iny				iny 								; if not, read the exponent as well.
.9a3f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a41		95 78		sta $78,x			sta 	NSExponent,x
.9a43						_DRFNoExponent:
.9a43		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a45		10 0a		bpl $9a51			bpl 	_DRFExit2 					; if not, then exit.
.9a47		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a49		95 70		sta $70,x			sta 	NSMantissa3,x
.9a4b		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9a4d		09 80		ora #$80			ora 	#NSBIsNegative
.9a4f		95 50		sta $50,x			sta 	NSStatus,x
.9a51						_DRFExit2:
.9a51		7a		ply				ply
.9a52		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9a53						EncodeNumberStart:
.9a53		38		sec				sec
.9a54		80 01		bra $9a57			bra 	EncodeNumberContinue+1
.9a56						EncodeNumberContinue:
.9a56		18		clc				clc
.9a57						EncodeNumber:
.9a57		08		php				php 								; save reset flag.
.9a58		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a5a		f0 12		beq $9a6e			beq 	_ENIsOkay
.9a5c		c9 30		cmp #$30			cmp 	#"0"
.9a5e		90 04		bcc $9a64			bcc 	_ENBadNumber
.9a60		c9 3a		cmp #$3a			cmp 	#"9"+1
.9a62		90 0a		bcc $9a6e			bcc 	_ENIsOkay
.9a64						_ENBadNumber:
.9a64		28		plp				plp 								; throw saved reset
.9a65		ad 85 02	lda $0285			lda 	encodeState 				; if in decimal mode, construct final number
.9a68		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a6a		f0 7b		beq $9ae7			beq 	_ENConstructFinal
.9a6c						_ENFail:
.9a6c		18		clc				clc 								; not allowed
.9a6d		60		rts				rts
.9a6e						_ENIsOkay:
.9a6e		28		plp				plp 								; are we restarting
.9a6f		90 15		bcc $9a86			bcc 	_ENNoRestart
.9a71						_ENStartEncode:
.9a71		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9a73		f0 0c		beq $9a81			beq 	_ENFirstDP
.9a75		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9a77		20 5a a1	jsr $a15a			jsr 	NSMSetByte 					; in single byte mode.
.9a7a		a9 01		lda #$01			lda 	#ESTA_Low
.9a7c						_ENExitChange:
.9a7c		8d 85 02	sta $0285			sta 	encodeState 				; save new state
.9a7f		38		sec				sec
.9a80		60		rts				rts
.9a81						_ENFirstDP:
.9a81		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; clear integer part
.9a84		80 3c		bra $9ac2			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a86						_ENNoRestart:
.9a86		48		pha				pha 								; save digit or DP on stack.
.9a87		ad 85 02	lda $0285			lda 	encodeState 				; get current state
.9a8a		c9 01		cmp #$01			cmp 	#ESTA_Low
.9a8c		f0 09		beq $9a97			beq  	_ESTALowState
.9a8e		c9 02		cmp #$02			cmp 	#ESTA_High
.9a90		f0 26		beq $9ab8			beq 	_ESTAHighState
.9a92		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a94		f0 38		beq $9ace			beq 	_ESTADecimalState
>9a96		db						.byte 	$DB 						; causes a break in the emulator
.9a97						_ESTALowState:
.9a97		68		pla				pla 								; get value back
.9a98		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a9a		f0 26		beq $9ac2			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a9c		29 0f		and #$0f			and 	#15 						; make digit
.9a9e		8d 86 02	sta $0286			sta 	digitTemp 					; save it.
.9aa1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9aa3		0a		asl a				asl 	a
.9aa4		0a		asl a				asl 	a
.9aa5		75 58		adc $58,x			adc 	NSMantissa0,x
.9aa7		0a		asl a				asl 	a
.9aa8		6d 86 02	adc $0286			adc 	digitTemp
.9aab		95 58		sta $58,x			sta 	NSMantissa0,x
.9aad		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9aaf		90 05		bcc $9ab6			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ab1		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ab3		8d 85 02	sta $0285			sta 	encodeState
.9ab6						_ESTANoSwitch:
.9ab6		38		sec				sec
.9ab7		60		rts				rts
.9ab8						_ESTAHighState:
.9ab8		68		pla				pla 								; get value back
.9ab9		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9abb		f0 05		beq $9ac2			beq 	_ESTASwitchFloat
.9abd		20 1b 9b	jsr $9b1b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9ac0		38		sec				sec
.9ac1		60		rts				rts
.9ac2						_ESTASwitchFloat:
.9ac2		9c 87 02	stz $0287			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9ac5		e8		inx				inx 								; zero the decimal additive.
.9ac6		20 58 a1	jsr $a158			jsr 	NSMSetZero
.9ac9		ca		dex				dex
.9aca		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9acc		80 ae		bra $9a7c			bra 	_ENExitChange
.9ace						_ESTADecimalState:
.9ace		68		pla				pla 								; digit.
.9acf		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ad1		f0 99		beq $9a6c			beq 	_ENFail
.9ad3		e8		inx				inx 								; put digit into fractional part of X+1
.9ad4		20 1b 9b	jsr $9b1b			jsr 	ESTAShiftDigitIntoMantissa
.9ad7		ca		dex				dex
.9ad8		ee 87 02	inc $0287			inc 	decimalCount 				; bump the count of decimals
.9adb		ad 87 02	lda $0287			lda 	decimalCount 				; too many decimal digits.
.9ade		c9 0b		cmp #$0b			cmp 	#11
.9ae0		f0 02		beq $9ae4			beq 	_ESTADSFail
.9ae2		38		sec				sec
.9ae3		60		rts				rts
.9ae4						_ESTADSFail:
.9ae4		4c db a2	jmp $a2db			jmp 	RangeError
.9ae7						_ENConstructFinal:
.9ae7		ad 87 02	lda $0287			lda 	decimalCount 				; get decimal count
.9aea		f0 2d		beq $9b19			beq 	_ENCFExit 					; no decimals
.9aec		5a		phy				phy
.9aed		0a		asl a				asl 	a 							; x 4 and CLC
.9aee		0a		asl a				asl 	a
.9aef		6d 87 02	adc $0287			adc 	decimalCount
.9af2		a8		tay				tay
.9af3		b9 9a a2	lda $a29a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9af6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9af8		b9 9b a2	lda $a29b,y			lda 	DecimalScalarTable-5+1,y
.9afb		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9afd		b9 9c a2	lda $a29c,y			lda 	DecimalScalarTable-5+2,y
.9b00		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9b02		b9 9d a2	lda $a29d,y			lda 	DecimalScalarTable-5+3,y
.9b05		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9b07		b9 9e a2	lda $a29e,y			lda 	DecimalScalarTable-5+4,y
.9b0a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9b0c		a9 08		lda #$08			lda 	#NSTFloat
.9b0e		95 52		sta $52,x			sta 	NSStatus+2,x
.9b10		7a		ply				ply
.9b11		e8		inx				inx 								; multiply decimal const by decimal scalar
.9b12		20 a1 98	jsr $98a1			jsr 	FloatMultiply
.9b15		ca		dex				dex
.9b16		20 5c 97	jsr $975c			jsr 	FloatAdd 					; add to integer part.
.9b19						_ENCFExit:
.9b19		18		clc				clc 								; reject the digit.
.9b1a		60		rts				rts
.9b1b						ESTAShiftDigitIntoMantissa:
.9b1b		29 0f		and #$0f			and 	#15 						; save digit
.9b1d		48		pha				pha
.9b1e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9b20		48		pha				pha
.9b21		b5 68		lda $68,x			lda 	NSMantissa2,x
.9b23		48		pha				pha
.9b24		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b26		48		pha				pha
.9b27		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b29		48		pha				pha
.9b2a		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 2
.9b2d		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 4
.9b30		18		clc				clc 								; pop mantissa and add
.9b31		68		pla				pla
.9b32		75 58		adc $58,x			adc 	NSMantissa0,x
.9b34		95 58		sta $58,x			sta 	NSMantissa0,x
.9b36		68		pla				pla
.9b37		75 60		adc $60,x			adc 	NSMantissa1,x
.9b39		95 60		sta $60,x			sta 	NSMantissa1,x
.9b3b		68		pla				pla
.9b3c		75 68		adc $68,x			adc 	NSMantissa2,x
.9b3e		95 68		sta $68,x			sta 	NSMantissa2,x
.9b40		68		pla				pla
.9b41		75 70		adc $70,x			adc 	NSMantissa3,x
.9b43		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9b45		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 10
.9b48		68		pla				pla 								; add digit
.9b49		18		clc				clc
.9b4a		75 58		adc $58,x			adc 	NSMantissa0,x
.9b4c		95 58		sta $58,x			sta 	NSMantissa0,x
.9b4e		90 0a		bcc $9b5a			bcc 	_ESTASDExit
.9b50		f6 60		inc $60,x			inc 	NSMantissa1,x
.9b52		d0 06		bne $9b5a			bne 	_ESTASDExit
.9b54		f6 68		inc $68,x			inc 	NSMantissa2,x
.9b56		d0 02		bne $9b5a			bne 	_ESTASDExit
.9b58		f6 70		inc $70,x			inc 	NSMantissa3,x
.9b5a						_ESTASDExit:
.9b5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b5b						EvaluateTerm:
.9b5b		b1 30		lda ($30),y			lda 	(codePtr),y
.9b5d		30 18		bmi $9b77			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b5f		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b61		b0 6c		bcs $9bcf			bcs 	_ETVariable
.9b63		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b65		90 6b		bcc $9bd2			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b67		c9 3a		cmp #$3a			cmp 	#'9'+1
.9b69		b0 67		bcs $9bd2			bcs 	_ETPuncUnary
.9b6b		20 53 9a	jsr $9a53			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b6e						_ETNumber:
.9b6e		c8		iny				iny 								; keep encoding until we have the numbers
.9b6f		b1 30		lda ($30),y			lda 	(codePtr),y
.9b71		20 56 9a	jsr $9a56			jsr 	EncodeNumberContinue
.9b74		b0 f8		bcs $9b6e			bcs 	_ETNumber 					; go back if accepted.
.9b76		60		rts				rts
.9b77						_ETCheckUnary:
.9b77		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b79		f0 3f		beq $9bba			beq 	_ETString
.9b7b		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b7d		f0 12		beq $9b91			beq 	_ETHexConstant
.9b7f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b81		90 0b		bcc $9b8e			bcc 	_ETSyntaxError
.9b83		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9b85		b0 07		bcs $9b8e			bcs 	_ETSyntaxError
.9b87		da		phx				phx 								; push X on the stack
.9b88		0a		asl a				asl 	a 							; put vector x 2 into X
.9b89		aa		tax				tax
.9b8a		c8		iny				iny 								; consume unary function token
.9b8b		7c fc 8e	jmp ($8efc,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b8e						_ETSyntaxError:
.9b8e		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.9b91						_ETHexConstant:
.9b91		c8		iny				iny 								; skip #
.9b92		c8		iny				iny 								; skip count
.9b93		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; clear result
.9b96						_ETHLoop:
.9b96		b1 30		lda ($30),y			lda 	(codePtr),y
.9b98		c8		iny				iny 								; and consume
.9b99		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b9b		f0 1c		beq $9bb9			beq 	_ETHExit
.9b9d		48		pha				pha 								; save on stack.
.9b9e		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 2
.9ba1		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 4
.9ba4		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 8
.9ba7		20 67 a1	jsr $a167			jsr 	NSMShiftLeft 				; x 16
.9baa		68		pla				pla 								; ASCII
.9bab		c9 41		cmp #$41			cmp 	#'A'
.9bad		90 02		bcc $9bb1			bcc 	_ETHNotChar
.9baf		e9 07		sbc #$07			sbc 	#7
.9bb1						_ETHNotChar:
.9bb1		29 0f		and #$0f			and 	#15 						; digit now
.9bb3		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9bb5		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb7		80 dd		bra $9b96			bra 	_ETHLoop 					; go round.
.9bb9						_ETHExit:
.9bb9		60		rts				rts
.9bba						_ETString:
.9bba		c8		iny				iny 								; look at length
.9bbb		b1 30		lda ($30),y			lda 	(codePtr),y
.9bbd		48		pha				pha
.9bbe		c8		iny				iny 								; first character
.9bbf		20 d2 a8	jsr $a8d2			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9bc2		68		pla				pla 								; restore count and save
.9bc3		85 36		sta $36				sta 	zTemp0
.9bc5		98		tya				tya 								; add length to Y to skip it.
.9bc6		18		clc				clc
.9bc7		65 36		adc $36				adc 	zTemp0
.9bc9		a8		tay				tay
.9bca		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9bcc		95 50		sta $50,x			sta 	NSStatus,x
.9bce		60		rts				rts
.9bcf						_ETVariable:
.9bcf		4c 24 9c	jmp $9c24			jmp 	VariableHandler
.9bd2						_ETPuncUnary:
.9bd2		c8		iny				iny 								; consume the unary character
.9bd3		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9bd5		f0 2b		beq $9c02			beq 	_ETUnaryNegate
.9bd7		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9bd9		f0 36		beq $9c11			beq 	_ETDereference
.9bdb		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9bdd		f0 3e		beq $9c1d			beq 	_ETParenthesis
.9bdf		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9be1		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9be3		f0 06		beq $9beb			beq 	_ETIndirection
.9be5		e6 36		inc $36				inc 	zTemp0
.9be7		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9be9		d0 a3		bne $9b8e			bne 	_ETSyntaxError
.9beb						_ETIndirection:
.9beb		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9bed		1a		inc a				inc 	a
.9bee		48		pha				pha
.9bef		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm				; evaluate the term
.9bf2		20 d4 99	jsr $99d4			jsr 	Dereference 				; dereference it.
.9bf5		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bf7		d0 06		bne $9bff			bne 	_ETTypeMismatch
.9bf9		68		pla				pla 								; indirection 1-2
.9bfa		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bfc		95 50		sta $50,x			sta 	NSStatus,x
.9bfe		60		rts				rts
.9bff						_ETTypeMismatch:
.9bff		4c e0 a2	jmp $a2e0			jmp 	TypeError
.9c02						_ETUnaryNegate:
.9c02		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm				; evaluate the term
.9c05		20 d4 99	jsr $99d4			jsr 	Dereference 				; dereference it.
.9c08		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9c0a		29 10		and #$10			and 	#NSTString
.9c0c		d0 f1		bne $9bff			bne 	_ETTypeMismatch
.9c0e		4c 1a a1	jmp $a11a			jmp 	NSMNegate  					; just toggles the sign bit.
.9c11						_ETDereference:
.9c11		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm				; evaluate the term
.9c14		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9c16		29 20		and #$20			and 	#NSBIsReference
.9c18		f0 e5		beq $9bff			beq 	_ETTypeMismatch
.9c1a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9c1c		60		rts				rts
.9c1d						_ETParenthesis:
.9c1d		20 11 97	jsr $9711			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c20		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; check for )
.9c23		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c24						VariableHandler:
.9c24		b1 30		lda ($30),y			lda 	(codePtr),y
.9c26		18		clc				clc
.9c27		69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c29		85 37		sta $37				sta 	zTemp0+1
.9c2b		c8		iny				iny
.9c2c		b1 30		lda ($30),y			lda 	(codePtr),y
.9c2e		85 36		sta $36				sta 	zTemp0
.9c30		c8		iny				iny
.9c31		18		clc				clc									; copy variable address+3 to mantissa
.9c32		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9c34		95 58		sta $58,x			sta 	NSMantissa0,x
.9c36		a5 37		lda $37				lda 	zTemp0+1
.9c38		69 00		adc #$00			adc 	#0
.9c3a		95 60		sta $60,x			sta 	NSMantissa1,x
.9c3c		74 68		stz $68,x			stz 	NSMantissa2,x
.9c3e		74 70		stz $70,x			stz 	NSMantissa3,x
.9c40		74 78		stz $78,x			stz 	NSExponent,x
.9c42		5a		phy				phy
.9c43		a0 02		ldy #$02			ldy 	#2 							; read type
.9c45		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c47		7a		ply				ply
.9c48		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c4a		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c4c		95 50		sta $50,x			sta 	NSStatus,x
.9c4e		29 04		and #$04			and 	#NSBIsArray
.9c50		d0 01		bne $9c53			bne 	_VHArray
.9c52		60		rts				rts
.9c53						_VHArray:
.9c53		e8		inx				inx
.9c54		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c57		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c59		95 51		sta $51,x			sta 	NSStatus+1,x
.9c5b		b1 30		lda ($30),y			lda 	(codePtr),y
.9c5d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c5f		d0 06		bne $9c67			bne 	_VHNoSecondIndex
.9c61		c8		iny				iny 								; skip the comma
.9c62		e8		inx				inx
.9c63		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c66		ca		dex				dex
.9c67						_VHNoSecondIndex:
.9c67		ca		dex				dex 								; set X back.
.9c68		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; and check the right bracket.
.9c6b		5a		phy				phy 								; save position
.9c6c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9c6e		85 3e		sta $3e				sta 	zaTemp
.9c70		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c72		85 3f		sta $3f				sta 	zaTemp+1
.9c74		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9c76		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c78		f0 5d		beq $9cd7			beq 	_VHBadArray
.9c7a		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c7c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c7e		f0 02		beq $9c82			beq 	_VHHas2Mask
.9c80		a9 ff		lda #$ff			lda 	#$FF
.9c82						_VHHas2Mask:
.9c82		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c84		f0 4c		beq $9cd2			beq 	_VHBadIndex
.9c86		0a		asl a				asl 	a 							; carry will be set if a second index
.9c87		90 08		bcc $9c91			bcc 	_VHCheckFirstIndex
.9c89		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c8b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c8d		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9c8f		90 41		bcc $9cd2			bcc 	_VHBadIndex
.9c91						_VHCheckFirstIndex:
.9c91		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c93		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c95		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9c97		90 39		bcc $9cd2			bcc 	_VHBadIndex
.9c99		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c9b		64 37		stz $37				stz 	zTemp0+1
.9c9d		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c9f		30 0e		bmi $9caf			bmi 	_VHNoMultiply
.9ca1		da		phx				phx
.9ca2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9ca4		48		pha				pha
.9ca5		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9ca7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ca9		1a		inc a				inc 	a 							; add 1 for zero base
.9caa		fa		plx				plx
.9cab		20 03 a1	jsr $a103			jsr 	Multiply8x8 				; calculate -> Z0
.9cae		fa		plx				plx
.9caf						_VHNoMultiply:
.9caf		18		clc				clc
.9cb0		a5 36		lda $36				lda 	zTemp0
.9cb2		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9cb4		85 36		sta $36				sta 	zTemp0
.9cb6		a5 37		lda $37				lda 	zTemp0+1
.9cb8		69 00		adc #$00			adc 	#0
.9cba		85 37		sta $37				sta 	zTemp0+1
.9cbc		b5 50		lda $50,x			lda 	NSStatus,x
.9cbe		20 95 86	jsr $8695			jsr 	ScaleByBaseType
.9cc1		18		clc				clc
.9cc2		b2 3e		lda ($3e)			lda 	(zaTemp)
.9cc4		65 36		adc $36				adc 	zTemp0
.9cc6		95 58		sta $58,x			sta 	NSMantissa0,x
.9cc8		a0 01		ldy #$01			ldy 	#1
.9cca		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ccc		65 37		adc $37				adc 	zTemp0+1
.9cce		95 60		sta $60,x			sta 	NSMantissa1,x
.9cd0		7a		ply				ply 								; restore position
.9cd1		60		rts				rts
.9cd2						_VHBadIndex:
.9cd2		a9 17		lda #$17		lda	#23
.9cd4		4c 0d 92	jmp $920d		jmp	ErrorHandler
.9cd7						_VHBadArray:
.9cd7		a9 18		lda #$18		lda	#24
.9cd9		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9cdc						AbsUnary:
.9cdc		fa		plx				plx 								; restore stack pos
.9cdd		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; get a float or int
.9ce0		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9ce3		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9ce5		29 7f		and #$7f			and 	#$7F
.9ce7		95 50		sta $50,x			sta 	NSStatus,x
.9ce9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cea						AllocUnary:
.9cea		fa		plx				plx 								; restore stack pos
.9ceb		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger		; get bytes required.
.9cee		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9cf1		da		phx				phx 								; save X/Y
.9cf2		5a		phy				phy
.9cf3		8a		txa				txa 								; copy X into Y
.9cf4		a8		tay				tay
.9cf5		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9cf8		aa		tax				tax
.9cf9		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9cfc		20 09 9d	jsr $9d09			jsr 	AllocateXABytes 			; allocate memory
.9cff		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9d02		8a		txa				txa 	 							; typing is 16 bit integer.
.9d03		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9d06		7a		ply				ply
.9d07		fa		plx				plx
.9d08		60		rts				rts
.9d09						AllocateXABytes:
.9d09		5a		phy				phy
.9d0a		ac 8c 02	ldy $028c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9d0d		84 36		sty $36				sty 	zTemp0
.9d0f		5a		phy				phy
.9d10		ac 8d 02	ldy $028d			ldy 	lowMemPtr+1
.9d13		84 37		sty $37				sty 	zTemp0+1
.9d15		5a		phy				phy
.9d16		18		clc				clc 								; add to low memory pointer
.9d17		6d 8c 02	adc $028c			adc 	lowMemPtr
.9d1a		8d 8c 02	sta $028c			sta 	lowMemPtr
.9d1d		8a		txa				txa
.9d1e		6d 8d 02	adc $028d			adc 	lowMemPtr+1
.9d21		8d 8d 02	sta $028d			sta 	lowMemPtr+1
.9d24		b0 2f		bcs $9d55			bcs 	CISSMemory
.9d26		20 47 9d	jsr $9d47			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d29						_ClearMemory:
.9d29		ad 8c 02	lda $028c			lda 	lowMemPtr 					; cleared all memory allocated
.9d2c		c5 36		cmp $36				cmp 	zTemp0
.9d2e		d0 07		bne $9d37			bne 	_CMClearNext
.9d30		ad 8d 02	lda $028d			lda 	lowMemPtr+1
.9d33		c5 37		cmp $37				cmp 	zTemp0+1
.9d35		f0 0c		beq $9d43			beq 	_CMExit
.9d37						_CMClearNext:
.9d37		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d39		92 36		sta ($36)			sta 	(zTemp0)
.9d3b		e6 36		inc $36				inc 	zTemp0
.9d3d		d0 ea		bne $9d29			bne 	_ClearMemory
.9d3f		e6 37		inc $37				inc		zTemp0+1
.9d41		80 e6		bra $9d29			bra 	_ClearMemory
.9d43						_CMExit:
.9d43		fa		plx				plx
.9d44		68		pla				pla
.9d45		7a		ply				ply
.9d46		60		rts				rts
.9d47						CheckIdentifierStringSpace:
.9d47		48		pha				pha
.9d48		ad 8d 02	lda $028d			lda 	lowMemPtr+1 				; get low memory pointer
.9d4b		18		clc				clc
.9d4c		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d4e		cd 8f 02	cmp $028f			cmp 	stringMemory+1 				; is it >= StringMemory
.9d51		b0 02		bcs $9d55			bcs 	CISSMemory
.9d53		68		pla				pla
.9d54		60		rts				rts
.9d55						CISSMemory:
.9d55		a9 06		lda #$06		lda	#6
.9d57		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d5a						AscUnary:
.9d5a		fa		plx				plx 								; restore stack pos
.9d5b		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; get a string
.9d5e		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9d60		20 5a a1	jsr $a15a			jsr 	NSMSetByte 					; ASC("") will return zero.
.9d63		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9d66		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d67						FracUnary:
.9d67		fa		plx				plx 								; restore stack pos
.9d68		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; get a float or int
.9d6b		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9d6e		b5 50		lda $50,x			lda 	NSStatus,x
.9d70		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d72		f0 04		beq $9d78			beq 	_IUZero
.9d74		20 22 98	jsr $9822			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9d77		60		rts				rts
.9d78						_IUZero:
.9d78		20 58 a1	jsr $a158			jsr 	NSMSetZero
.9d7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d7c						IntUnary:
.9d7c		fa		plx				plx 								; restore stack pos
.9d7d		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; get a float or int
.9d80		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9d83		b5 50		lda $50,x			lda 	NSStatus,x
.9d85		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d87		f0 03		beq $9d8c			beq 	_IUExit
.9d89		20 7a 98	jsr $987a			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9d8c						_IUExit:
.9d8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d8d						LenUnary:
.9d8d		fa		plx				plx 								; restore stack pos
.9d8e		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; get a string
.9d91		5a		phy				phy
.9d92		a0 00		ldy #$00			ldy 	#0 							; find length
.9d94						_LenFind:
.9d94		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9d96		f0 06		beq $9d9e			beq 	_LenExit
.9d98		c8		iny				iny
.9d99		d0 f9		bne $9d94			bne 	_LenFind
.9d9b		4c db a2	jmp $a2db			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9d9e						_LenExit:
.9d9e		98		tya				tya		 							; return length
.9d9f		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.9da2		7a		ply				ply
.9da3		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9da6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9da7						Unary_Min:
.9da7		a9 01		lda #$01			lda 	#1
.9da9		80 02		bra $9dad			bra 	UnaryMinMaxMain
.9dab						Unary_Max:
.9dab		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9dad						UnaryMinMaxMain:
.9dad		fa		plx				plx 								; get index on number stack
.9dae		48		pha				pha 								; save comparator
.9daf		20 9d a0	jsr $a09d			jsr 	EvaluateValue 				; get the first value.
.9db2						_UMMMLoop:
.9db2		b1 30		lda ($30),y			lda 	(codePtr),y
.9db4		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9db6		f0 22		beq $9dda			beq 	_UMMMDone
.9db8		20 fc 91	jsr $91fc			jsr 	CheckComma 					; must be a comma
.9dbb		e8		inx				inx
.9dbc		20 9d a0	jsr $a09d			jsr 	EvaluateValue
.9dbf		ca		dex				dex
.9dc0		20 3b a1	jsr $a13b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9dc3		e8		inx				inx
.9dc4		20 3b a1	jsr $a13b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9dc7		e8		inx				inx
.9dc8		20 c4 92	jsr $92c4			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9dcb		ca		dex				dex
.9dcc		ca		dex				dex
.9dcd		85 36		sta $36				sta 	zTemp0 						; save required result
.9dcf		68		pla				pla 								; get and save comparator
.9dd0		48		pha				pha
.9dd1		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9dd3		d0 dd		bne $9db2			bne 	_UMMMLoop
.9dd5		20 dd 9d	jsr $9ddd			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9dd8		80 d8		bra $9db2			bra 	_UMMMLoop
.9dda						_UMMMDone:
.9dda		68		pla				pla 								; throw the comparator
.9ddb		c8		iny				iny 								; skip )
.9ddc		60		rts				rts
.9ddd						ExpCopyAboveDown:
.9ddd		b5 51		lda $51,x			lda 	NSStatus+1,x
.9ddf		95 50		sta $50,x			sta 	NSStatus,x
.9de1		b5 79		lda $79,x			lda 	NSExponent+1,x
.9de3		95 78		sta $78,x			sta 	NSExponent,x
.9de5		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9de7		95 58		sta $58,x			sta 	NSMantissa0,x
.9de9		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9deb		95 60		sta $60,x			sta 	NSMantissa1,x
.9ded		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9def		95 68		sta $68,x			sta 	NSMantissa2,x
.9df1		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9df3		95 70		sta $70,x			sta 	NSMantissa3,x
.9df5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9df6						Unary_Not:
.9df6		fa		plx				plx
.9df7		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger 			; get integer
.9dfa		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9dfd		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; zero mantissa ?
.9e00		f0 04		beq $9e06			beq 	_NotZero
.9e02		20 58 a1	jsr $a158			jsr 	NSMSetZero
.9e05		60		rts				rts
.9e06						_NotZero:
.9e06		4c 7a 92	jmp $927a			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9e09						PeekByteUnary:
.9e09		a9 01		lda #$01			lda 	#1
.9e0b		80 0a		bra $9e17			bra 	PeekUnary
.9e0d						PeekWUnary:
.9e0d		a9 02		lda #$02			lda 	#2
.9e0f		80 06		bra $9e17			bra 	PeekUnary
.9e11						PeekLUnary:
.9e11		a9 03		lda #$03			lda 	#3
.9e13		80 02		bra $9e17			bra 	PeekUnary
.9e15						PeekDUnary:
.9e15		a9 04		lda #$04			lda 	#4
.9e17						PeekUnary:
.9e17		fa		plx				plx 								; restore position.
.9e18		48		pha				pha 								; save count to copy on stack
.9e19		20 d8 a0	jsr $a0d8			jsr		Evaluate16BitInteger 		; address as constant.
.9e1c		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9e1f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9e21		85 36		sta $36				sta 	zTemp0
.9e23		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e25		85 37		sta $37				sta 	zTemp0+1
.9e27		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; clear the result to zero.
.9e2a		68		pla				pla 								; count in zTemp2
.9e2b		85 3a		sta $3a				sta 	zTemp2
.9e2d		da		phx				phx 								; save stack position and offset of read
.9e2e		5a		phy				phy
.9e2f		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9e31						_PULoop:
.9e31		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9e33		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9e35		c8		iny				iny 								; next byte to write
.9e36		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9e37		18		clc				clc
.9e38		69 08		adc #$08			adc 	#MathStackSize
.9e3a		aa		tax				tax
.9e3b		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9e3d		d0 f2		bne $9e31			bne 	_PULoop
.9e3f		7a		ply				ply 								; restore stack/code pos and exit.
.9e40		fa		plx				plx
.9e41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9e42						Unary_Random:
.9e42		fa		plx				plx
.9e43		20 b4 9e	jsr $9eb4			jsr 	Random32Bit 				; get a random number
.9e46		20 9d 9e	jsr $9e9d			jsr 	URCopyToMantissa  			; put in mantissa
.9e49		b1 30		lda ($30),y			lda 	(codePtr),y
.9e4b		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9e4d		f0 08		beq $9e57			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9e4f		e8		inx				inx
.9e50		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9e53		ca		dex				dex
.9e54		20 cc 93	jsr $93cc			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9e57						_URNoModulus:
.9e57		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9e59		74 78		stz $78,x			stz 	NSExponent,x
.9e5b		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9e5e		60		rts				rts
.9e5f						Unary_Rnd:
.9e5f		fa		plx				plx
.9e60		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; number to use.
.9e63		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; closing bracket
.9e66		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e69		f0 26		beq $9e91			beq 	_URCopySeed
.9e6b		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e6d		10 1f		bpl $9e8e			bpl 	_URDontSeed
.9e6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e71		49 17		eor #$17			eor 	#$17
.9e73		8d 88 02	sta $0288			sta 	randomSeed+0
.9e76		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e78		49 a5		eor #$a5			eor 	#$A5
.9e7a		8d 89 02	sta $0289			sta 	randomSeed+1
.9e7d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e7f		49 c2		eor #$c2			eor 	#$C2
.9e81		8d 8a 02	sta $028a			sta 	randomSeed+2
.9e84		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e86		49 9d		eor #$9d			eor 	#$9D
.9e88		8d 8b 02	sta $028b			sta 	randomSeed+3
.9e8b		20 b4 9e	jsr $9eb4			jsr 	Random32Bit
.9e8e						_URDontSeed:
.9e8e		20 b4 9e	jsr $9eb4			jsr 	Random32Bit 				; generate a number
.9e91						_URCopySeed:
.9e91		20 9d 9e	jsr $9e9d			jsr 	URCopyToMantissa 			; copy into mantissa
.9e94		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9e96		95 78		sta $78,x			sta 	NSExponent,x
.9e98		a9 08		lda #$08			lda 	#NSTFloat
.9e9a		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9e9c		60		rts				rts
.9e9d						URCopyToMantissa:
.9e9d		ad 88 02	lda $0288			lda 	randomSeed+0
.9ea0		95 58		sta $58,x			sta 	NSMantissa0,x
.9ea2		ad 89 02	lda $0289			lda 	randomSeed+1
.9ea5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ea7		ad 8a 02	lda $028a			lda 	randomSeed+2
.9eaa		95 68		sta $68,x			sta 	NSMantissa2,x
.9eac		ad 8b 02	lda $028b			lda 	randomSeed+3
.9eaf		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9eb1		95 70		sta $70,x			sta 	NSMantissa3,x
.9eb3		60		rts				rts
.9eb4						Random32Bit:
.9eb4		5a		phy				phy
.9eb5		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9eb7		ad 88 02	lda $0288			lda 	randomSeed+0 				; check the seed isn't zero
.9eba		d0 03		bne $9ebf			bne 	_Random1
.9ebc		a8		tay				tay 								; if so do it 256 times
.9ebd		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9ebf						_Random1:
.9ebf		0a		asl a				asl 	a 							; LSFR RNG
.9ec0		2e 89 02	rol $0289			rol 	randomSeed+1
.9ec3		2e 8a 02	rol $028a			rol 	randomSeed+2
.9ec6		2e 8b 02	rol $028b			rol 	randomSeed+3
.9ec9		90 02		bcc $9ecd			bcc 	_Random2
.9ecb		49 c5		eor #$c5			eor 	#$C5
.9ecd						_Random2:
.9ecd		88		dey				dey
.9ece		d0 ef		bne $9ebf			bne 	_Random1
.9ed0		8d 88 02	sta $0288			sta 	randomSeed+0
.9ed3		7a		ply				ply
.9ed4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9ed5						SgnUnary:
.9ed5		fa		plx				plx 								; restore stack pos
.9ed6		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber 				; get a float or int
.9ed9		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9edc		20 7a a1	jsr $a17a			jsr 	NSMIsZero 					; if zero
.9edf		f0 0e		beq $9eef			beq 	_SGZero  					; return Int Zero
.9ee1		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9ee3		48		pha				pha
.9ee4		a9 01		lda #$01			lda 	#1 							; set to 1
.9ee6		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.9ee9		68		pla				pla
.9eea		29 80		and #$80			and		#$80 						; copy the sign byte out
.9eec		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9eee		60		rts				rts
.9eef		20 58 a1	jsr $a158	_SGZero:jsr 	NSMSetZero
.9ef2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9ef3						ValUnary:
.9ef3		fa		plx				plx 								; restore stack pos
.9ef4		20 09 9f	jsr $9f09			jsr 	ValMainCode 				; do the main val() code
.9ef7		b0 01		bcs $9efa			bcs 	_VUError 					; couldn't convert
.9ef9		60		rts				rts
.9efa						_VUError:
.9efa		4c e0 a2	jmp $a2e0			jmp 	TypeError
.9efd						IsValUnary:
.9efd		fa		plx				plx 								; restore stack pos
.9efe		20 09 9f	jsr $9f09			jsr 	ValMainCode 				; do the main val() code
.9f01		b0 03		bcs $9f06			bcs 	_VUBad
.9f03		4c 7a 92	jmp $927a			jmp 	ReturnTrue
.9f06						_VUBad:
.9f06		4c 85 92	jmp $9285			jmp 	ReturnFalse
.9f09						ValMainCode:
.9f09		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; get a string
.9f0c		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; check right bracket present
.9f0f						ValEvaluateZTemp0:
.9f0f		5a		phy				phy
.9f10		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9f12		f0 17		beq $9f2b			beq 	_VMCFail2
.9f14		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9f16		48		pha				pha 								; save first character
.9f17		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9f19		d0 01		bne $9f1c			bne 	_VMCStart
.9f1b		c8		iny				iny 								; skip over -
.9f1c						_VMCStart:
.9f1c		38		sec				sec 								; initialise first time round.
.9f1d						_VMCNext:
.9f1d		c8		iny				iny 								; pre-increment
.9f1e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9f20		f0 0c		beq $9f2e			beq 	_VMCSuccess 				; successful.
.9f22		20 57 9a	jsr $9a57			jsr 	EncodeNumber 				; send it to the number-builder
.9f25		90 03		bcc $9f2a			bcc 	_VMCFail 					; if failed, give up.
.9f27		18		clc				clc 								; next time round, countinue
.9f28		80 f3		bra $9f1d			bra 	_VMCNext
.9f2a						_VMCFail:
.9f2a		68		pla				pla
.9f2b						_VMCFail2:
.9f2b		7a		ply				ply
.9f2c		38		sec				sec
.9f2d		60		rts				rts
.9f2e						_VMCSuccess:
.9f2e		a9 00		lda #$00			lda 	#0 							; construct final
.9f30		20 57 9a	jsr $9a57			jsr 	EncodeNumber 				; by sending a duff value.
.9f33		68		pla				pla 								; if it was -ve
.9f34		c9 2d		cmp #$2d			cmp 	#"-"
.9f36		d0 03		bne $9f3b			bne 	_VMCNotNegative
.9f38		20 1a a1	jsr $a11a			jsr		NSMNegate 					; negate it.
.9f3b						_VMCNotNegative:
.9f3b		7a		ply				ply
.9f3c		18		clc				clc
.9f3d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9f3e						ChrUnary:
.9f3e		fa		plx				plx 								; restore stack pos
.9f3f		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9f42		48		pha				pha
.9f43		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9f46		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9f48		20 27 b3	jsr $b327			jsr 	StringTempAllocate
.9f4b		68		pla				pla 								; write number to it
.9f4c		20 60 b3	jsr $b360			jsr 	StringTempWrite
.9f4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9f50						SpcUnary:
.9f50		fa		plx				plx 								; restore stack pos
.9f51		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger			; get value
.9f54		5a		phy				phy
.9f55		48		pha				pha 								; save count
.9f56		20 27 b3	jsr $b327			jsr 	StringTempAllocate
.9f59		7a		ply				ply 								; to do count in Y
.9f5a						_SpcLoop:
.9f5a		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9f5c		f0 08		beq $9f66			beq 	_SpcExit
.9f5e		a9 20		lda #$20			lda 	#32
.9f60		20 60 b3	jsr $b360			jsr 	StringTempWrite
.9f63		88		dey				dey
.9f64		80 f4		bra $9f5a			bra 	_SpcLoop
.9f66						_SpcExit:
.9f66		7a		ply				ply
.9f67		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.9f6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f6b						Unary_Str:
.9f6b		fa		plx				plx
.9f6c		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber  			; get number
.9f6f		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; closing bracket
.9f72		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f74		20 8d 9f	jsr $9f8d			jsr 	ConvertNumberToString 		; do the conversion.
.9f77		a9 21		lda #$21			lda		#33 						; create buffer
.9f79		20 27 b3	jsr $b327			jsr 	StringTempAllocate 			; allocate memory
.9f7c		da		phx				phx  								; copy the converted string into the buffer.
.9f7d		a2 00		ldx #$00			ldx 	#0
.9f7f						_USCopy:
.9f7f		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.9f82		20 60 b3	jsr $b360			jsr 	StringTempWrite
.9f85		e8		inx				inx
.9f86		bd c9 04	lda $04c9,x			lda 	decimalBuffer,x
.9f89		d0 f4		bne $9f7f			bne 	_USCopy
.9f8b		fa		plx				plx
.9f8c		60		rts				rts
.9f8d						ConvertNumberToString:
.9f8d		5a		phy				phy 								; save code position
.9f8e		8d 94 02	sta $0294			sta 	decimalPlaces	 			; save number of DPs.
.9f91		9c 95 02	stz $0295			stz 	dbOffset 					; offset into decimal buffer = start.
.9f94		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9f96		10 09		bpl $9fa1			bpl 	_CNTSNotNegative
.9f98		29 7f		and #$7f			and 	#$7F 						; make +ve
.9f9a		95 50		sta $50,x			sta 	NSStatus,x
.9f9c		a9 2d		lda #$2d			lda 	#"-"
.9f9e		20 02 a0	jsr $a002			jsr 	WriteDecimalBuffer
.9fa1						_CNTSNotNegative:
.9fa1		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9fa3		f0 12		beq $9fb7			beq 	_CNTSNotFloat
.9fa5		e8		inx				inx 								; round up so we don't get too many 6.999999
.9fa6		a9 01		lda #$01			lda 	#1
.9fa8		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.9fab		ca		dex				dex
.9fac		b5 78		lda $78,x			lda		NSExponent,x
.9fae		95 79		sta $79,x			sta 	NSExponent+1,x
.9fb0		a9 08		lda #$08			lda 	#NSTFloat
.9fb2		95 51		sta $51,x			sta 	NSStatus+1,x
.9fb4		20 5c 97	jsr $975c			jsr 	FloatAdd
.9fb7						_CNTSNotFloat:
.9fb7		20 e4 9f	jsr $9fe4			jsr 	MakePlusTwoString 			; do the integer part.
.9fba		20 22 98	jsr $9822			jsr 	FloatFractionalPart 		; get the fractional part
.9fbd		20 d3 98	jsr $98d3			jsr 	NSNormalise					; normalise , exit if zero
.9fc0		f0 20		beq $9fe2			beq 	_CNTSExit
.9fc2		a9 2e		lda #$2e			lda 	#"."
.9fc4		20 02 a0	jsr $a002			jsr 	WriteDecimalBuffer 			; write decimal place
.9fc7						_CNTSDecimal:
.9fc7		ce 94 02	dec $0294			dec 	decimalPlaces 				; done all the decimals
.9fca		30 16		bmi $9fe2			bmi 	_CNTSExit
.9fcc		e8		inx				inx 								; x 10.0
.9fcd		a9 0a		lda #$0a			lda 	#10
.9fcf		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.9fd2		a9 08		lda #$08			lda 	#NSTFloat
.9fd4		95 50		sta $50,x			sta 	NSStatus,x
.9fd6		ca		dex				dex
.9fd7		20 a1 98	jsr $98a1			jsr 	FloatMultiply
.9fda		20 e4 9f	jsr $9fe4			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9fdd		20 22 98	jsr $9822			jsr 	FloatFractionalPart 		; get the fractional part
.9fe0		80 e5		bra $9fc7			bra 	_CNTSDecimal 				; keep going.
.9fe2						_CNTSExit:
.9fe2		7a		ply				ply
.9fe3		60		rts				rts
.9fe4						MakePlusTwoString:
.9fe4		da		phx				phx
.9fe5		20 3b a1	jsr $a13b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9fe8		e8		inx				inx 								; access it
.9fe9		e8		inx				inx
.9fea		20 7a 98	jsr $987a			jsr 	FloatIntegerPart 			; make it an integer
.9fed		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9fef		20 8c 96	jsr $968c			jsr 	ConvertInt32
.9ff2		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9ff4						_MPTSCopy:
.9ff4		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.9ff7		20 02 a0	jsr $a002			jsr 	WriteDecimalBuffer
.9ffa		e8		inx				inx
.9ffb		bd a7 04	lda $04a7,x			lda 	numberBuffer,x
.9ffe		d0 f4		bne $9ff4			bne 	_MPTSCopy
.a000		fa		plx				plx
.a001		60		rts				rts
.a002						WriteDecimalBuffer:
.a002		da		phx				phx
.a003		ae 95 02	ldx $0295			ldx 	dbOffset
.a006		9d c9 04	sta $04c9,x			sta 	decimalBuffer,x
.a009		9e ca 04	stz $04ca,x			stz 	decimalBuffer+1,x
.a00c		ee 95 02	inc $0295			inc 	dbOffset
.a00f		fa		plx				plx
.a010		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a011						Unary_Left:
.a011		fa		plx				plx
.a012		18		clc				clc 								; only one parameter
.a013		20 76 a0	jsr $a076			jsr 	SubstringInitial 			; set up.
.a016		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a018		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a01a		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a01c		80 25		bra $a043			bra 	SubstringMain
.a01e						Unary_Right:
.a01e		fa		plx				plx
.a01f		18		clc				clc 								; only one parameter
.a020		20 76 a0	jsr $a076			jsr 	SubstringInitial 			; set up.
.a023		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a025		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a027		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a029		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a02b		b0 02		bcs $a02f			bcs 	_URNotUnderflow
.a02d		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a02f						_URNotUnderflow:
.a02f		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a031		80 10		bra $a043			bra 	SubstringMain
.a033						Unary_Mid:
.a033		fa		plx				plx
.a034		38		sec				sec 								; two parameters
.a035		20 76 a0	jsr $a076			jsr 	SubstringInitial 			; set up.
.a038		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a03a		f0 04		beq $a040			beq 	_UMError
.a03c		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a03e		80 03		bra $a043			bra 	SubstringMain
.a040						_UMError:
.a040		4c e5 a2	jmp $a2e5			jmp 	ArgumentError
.a043						SubstringMain:
.a043		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a045		d5 78		cmp $78,x			cmp 	NSExponent,x
.a047		b0 27		bcs $a070			bcs 	_SSMNull 					; if so, return an empty string.
.a049		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a04b		f0 23		beq $a070			beq 	_SSMNull 					; return empty string.
.a04d		18		clc				clc 								; add the offset +1 to the address and
.a04e		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a050		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a052		85 36		sta $36				sta 	zTemp0
.a054		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a056		69 00		adc #$00			adc 	#0
.a058		85 37		sta $37				sta 	zTemp0+1
.a05a						_SSMNoCarry:
.a05a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a05c		20 27 b3	jsr $b327			jsr 	StringTempAllocate 			; allocate that many characters
.a05f		5a		phy				phy 								; save Y
.a060		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a062						_SSMCopy:
.a062		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a064		f0 08		beq $a06e			beq 	_SSMEString 				; no more to copy
.a066		20 60 b3	jsr $b360			jsr 	StringTempWrite 			; and write it out.
.a069		c8		iny				iny
.a06a		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a06c		d0 f4		bne $a062			bne 	_SSMCopy
.a06e						_SSMEString:
.a06e		7a		ply				ply
.a06f						_SSMExit:
.a06f		60		rts				rts
.a070						_SSMNull:
.a070		a9 00		lda #$00			lda 	#0
.a072		20 27 b3	jsr $b327			jsr 	StringTempAllocate
.a075		60		rts				rts
.a076						SubstringInitial:
.a076		da		phx				phx 								; save initial stack position
.a077		08		php				php 								; save carry on stack indicating 2 parameters
.a078		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; get a string
.a07b		5a		phy				phy 								; calculate length to exponent.
.a07c		a0 ff		ldy #$ff			ldy 	#$FF
.a07e						_SIFindLength:
.a07e		c8		iny				iny
.a07f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a081		d0 fb		bne $a07e			bne 	_SIFindLength
.a083		98		tya				tya
.a084		95 78		sta $78,x			sta 	NSExponent,x
.a086		7a		ply				ply
.a087		e8		inx				inx
.a088		20 fc 91	jsr $91fc			jsr 	CheckComma 					; comma next
.a08b		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get next parameter
.a08e		28		plp				plp 								; is it the last parameter ?
.a08f		90 07		bcc $a098			bcc 	_SSIExit 					; if so, exit.
.a091		e8		inx				inx
.a092		20 fc 91	jsr $91fc			jsr 	CheckComma 					; comma next
.a095		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get last parameter
.a098						_SSIExit:
.a098		fa		plx				plx
.a099		20 f4 91	jsr $91f4			jsr 	CheckRightBracket 			; check closing bracket
.a09c		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a09d						EvaluateValue:
.a09d		48		pha				pha
.a09e		20 11 97	jsr $9711			jsr		EvaluateExpression 			; expression
.a0a1		20 d4 99	jsr $99d4			jsr 	Dereference					; derefernce it
.a0a4		68		pla				pla
.a0a5		60		rts				rts
.a0a6						EvaluateNumber:
.a0a6		20 9d a0	jsr $a09d			jsr 	EvaluateValue 				; get a value
.a0a9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a0ab		29 10		and #$10			and 	#NSBIsString
.a0ad		d0 13		bne $a0c2			bne 	HelperTypeError
.a0af		60		rts				rts
.a0b0						EvaluateString:
.a0b0		20 9d a0	jsr $a09d			jsr 	EvaluateValue 				; get a value
.a0b3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a0b5		29 10		and #$10			and 	#NSBIsString
.a0b7		f0 09		beq $a0c2			beq 	HelperTypeError
.a0b9						CopyAddressToTemp0:
.a0b9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a0bb		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a0bd		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0bf		85 37		sta $37				sta 	zTemp0+1
.a0c1		60		rts				rts
.a0c2						HelperTypeError:
.a0c2		4c e0 a2	jmp $a2e0			jmp 	TypeError
.a0c5						EvaluateInteger:
.a0c5		20 a6 a0	jsr $a0a6			jsr 	EvaluateNumber
.a0c8		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a0ca		d0 09		bne $a0d5			bne 	HelperValueError 			; if not, it's a float.
.a0cc		60		rts				rts
.a0cd						EvaluateUnsignedInteger:
.a0cd		20 c5 a0	jsr $a0c5			jsr 	EvaluateInteger 			; check integer is +ve
.a0d0		b5 50		lda $50,x			lda 	NSStatus,x
.a0d2		30 01		bmi $a0d5			bmi 	HelperValueError
.a0d4		60		rts				rts
.a0d5						HelperValueError:
.a0d5		4c e5 a2	jmp $a2e5			jmp 	ArgumentError
.a0d8						Evaluate16BitInteger:
.a0d8		20 cd a0	jsr $a0cd			jsr	 	EvaluateUnsignedInteger		; get integer
.a0db		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0dd		15 68		ora $68,x			ora 	NSMantissa2,x
.a0df		d0 f4		bne $a0d5			bne 	HelperValueError
.a0e1		60		rts				rts
.a0e2						Evaluate16BitIntegerSigned:
.a0e2		20 c5 a0	jsr $a0c5			jsr	 	EvaluateInteger				; get integer
.a0e5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0e7		15 68		ora $68,x			ora 	NSMantissa2,x
.a0e9		d0 ea		bne $a0d5			bne 	HelperValueError
.a0eb		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a0ed		10 03		bpl $a0f2			bpl 	_EISNotSigned
.a0ef		20 21 a1	jsr $a121			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a0f2						_EISNotSigned:
.a0f2		60		rts				rts
.a0f3						Evaluate8BitInteger:
.a0f3		20 cd a0	jsr $a0cd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a0f6		d0 dd		bne $a0d5			bne 	HelperValueError
.a0f8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a0fa		15 68		ora $68,x			ora 	NSMantissa2,x
.a0fc		15 60		ora $60,x			ora 	NSMantissa1,x
.a0fe		d0 d5		bne $a0d5			bne 	HelperValueError
.a100		b5 58		lda $58,x			lda 	NSMantissa0,x
.a102		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a103						Multiply8x8:
.a103		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a104		85 36		sta $36			  	sta 	zTemp0
.a106		86 37		stx $37				stx 	zTemp0+1
.a108		a9 00		lda #$00			lda 	#0
.a10a		a2 08		ldx #$08			ldx 	#8
.a10c						_M88Loop:
.a10c		90 03		bcc $a111			bcc 	_M88NoAdd
.a10e		18		clc				clc
.a10f		65 37		adc $37				adc 	zTemp0+1
.a111						_M88NoAdd:
.a111		6a		ror a				ror 	a
.a112		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a114		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a115		d0 f5		bne $a10c			bne 	_M88Loop
.a117		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a119		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a11a						NSMNegate:
.a11a		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a11c		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a11e		95 50		sta $50,x			sta 	NSStatus,x
.a120		60		rts				rts
.a121						NSMNegateMantissa:
.a121		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a122		a9 00		lda #$00			lda 	#0
.a124		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a126		95 58		sta $58,x			sta 	NSMantissa0,x
.a128		a9 00		lda #$00			lda 	#0
.a12a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a12c		95 60		sta $60,x			sta 	NSMantissa1,x
.a12e		a9 00		lda #$00			lda 	#0
.a130		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a132		95 68		sta $68,x			sta 	NSMantissa2,x
.a134		a9 00		lda #$00			lda 	#0
.a136		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a138		95 70		sta $70,x			sta 	NSMantissa3,x
.a13a		60		rts				rts
.a13b						NSMShiftUpTwo:
.a13b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a13d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a13f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a141		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a143		b5 68		lda $68,x			lda 	NSMantissa2,x
.a145		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a147		b5 70		lda $70,x			lda 	NSMantissa3,x
.a149		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a14b		b5 78		lda $78,x			lda 	NSExponent,x
.a14d		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a14f		b5 50		lda $50,x			lda 	NSStatus,x
.a151		95 52		sta $52,x			sta 	NSStatus+2,x
.a153		60		rts				rts
.a154						NSMSetZeroMantissaOnly:
.a154		a9 00		lda #$00			lda 	#0
.a156		80 06		bra $a15e			bra 	NSMSetMantissa
.a158						NSMSetZero:
.a158		a9 00		lda #$00			lda 	#0
.a15a						NSMSetByte:
.a15a		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a15c		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a15e						NSMSetMantissa:
.a15e		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a160		74 60		stz $60,x			stz 	NSMantissa1,x
.a162		74 68		stz $68,x			stz 	NSMantissa2,x
.a164		74 70		stz $70,x			stz 	NSMantissa3,x
.a166		60		rts				rts
.a167						NSMShiftLeft:
.a167		18		clc				clc
.a168						NSMRotateLeft:
.a168		36 58		rol $58,x			rol 	NSMantissa0,x
.a16a		36 60		rol $60,x			rol		NSMantissa1,x
.a16c		36 68		rol $68,x			rol		NSMantissa2,x
.a16e		36 70		rol $70,x			rol		NSMantissa3,x
.a170		60		rts				rts
.a171						NSMShiftRight:
.a171		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a173		76 68		ror $68,x			ror		NSMantissa2,x
.a175		76 60		ror $60,x			ror		NSMantissa1,x
.a177		76 58		ror $58,x			ror		NSMantissa0,x
.a179		60		rts				rts
.a17a						NSMIsZero:
.a17a		b5 70		lda $70,x			lda 	NSMantissa3,x
.a17c		15 68		ora $68,x			ora		NSMantissa2,x
.a17e		15 60		ora $60,x			ora		NSMantissa1,x
.a180		15 58		ora $58,x			ora		NSMantissa0,x
.a182		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a183						TickHandler:
.a183		5a		phy				phy 								; need to preserve Y
.a184		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a187		7a		ply				ply
.a188		60		rts				rts
.04e2						LastTick:
>04e2								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a189						Assemble_ora:
.a189		20 30 81	jsr $8130		jsr	AssembleGroup1
>a18c		01					.byte $01
.a18d						Assemble_and:
.a18d		20 30 81	jsr $8130		jsr	AssembleGroup1
>a190		21					.byte $21
.a191						Assemble_eor:
.a191		20 30 81	jsr $8130		jsr	AssembleGroup1
>a194		41					.byte $41
.a195						Assemble_adc:
.a195		20 30 81	jsr $8130		jsr	AssembleGroup1
>a198		61					.byte $61
.a199						Assemble_sta:
.a199		20 30 81	jsr $8130		jsr	AssembleGroup1
>a19c		81					.byte $81
.a19d						Assemble_lda:
.a19d		20 30 81	jsr $8130		jsr	AssembleGroup1
>a1a0		a1					.byte $a1
.a1a1						Assemble_cmp:
.a1a1		20 30 81	jsr $8130		jsr	AssembleGroup1
>a1a4		c1					.byte $c1
.a1a5						Assemble_sbc:
.a1a5		20 30 81	jsr $8130		jsr	AssembleGroup1
>a1a8		e1					.byte $e1
.a1a9						Assemble_asl:
.a1a9		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1ac		02					.byte $02
>a1ad		75					.byte $75
.a1ae						Assemble_rol:
.a1ae		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1b1		22					.byte $22
>a1b2		75					.byte $75
.a1b3						Assemble_lsr:
.a1b3		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1b6		42					.byte $42
>a1b7		75					.byte $75
.a1b8						Assemble_ror:
.a1b8		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1bb		62					.byte $62
>a1bc		75					.byte $75
.a1bd						Assemble_stx:
.a1bd		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1c0		82					.byte $82
>a1c1		50					.byte $50
.a1c2						Assemble_ldx:
.a1c2		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1c5		a2					.byte $a2
>a1c6		d0					.byte $d0
.a1c7						Assemble_dec:
.a1c7		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1ca		c2					.byte $c2
>a1cb		55					.byte $55
.a1cc						Assemble_inc:
.a1cc		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1cf		e2					.byte $e2
>a1d0		55					.byte $55
.a1d1						Assemble_stz:
.a1d1		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1d4		60					.byte $60
>a1d5		44					.byte $44
.a1d6						Assemble_bit:
.a1d6		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1d9		20					.byte $20
>a1da		55					.byte $55
.a1db						Assemble_sty:
.a1db		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1de		80					.byte $80
>a1df		54					.byte $54
.a1e0						Assemble_ldy:
.a1e0		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1e3		a0					.byte $a0
>a1e4		d5					.byte $d5
.a1e5						Assemble_cpy:
.a1e5		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1e8		c0					.byte $c0
>a1e9		d4					.byte $d4
.a1ea						Assemble_cpx:
.a1ea		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1ed		e0					.byte $e0
>a1ee		d0					.byte $d0
.a1ef						Assemble_tsb:
.a1ef		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1f2		00					.byte $00
>a1f3		50					.byte $50
.a1f4						Assemble_trb:
.a1f4		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1f7		10					.byte $10
>a1f8		50					.byte $50
.a1f9						Assemble_jsr:
.a1f9		20 37 81	jsr $8137		jsr	AssembleGroup2
>a1fc		14					.byte $14
>a1fd		10					.byte $10
.a1fe						Assemble_jmp:
.a1fe		20 37 81	jsr $8137		jsr	AssembleGroup2
>a201		40					.byte $40
>a202		10					.byte $10
.a203						Assemble_bpl:
.a203		20 88 81	jsr $8188		jsr	AssembleGroup3
>a206		10					.byte $10
.a207						Assemble_bmi:
.a207		20 88 81	jsr $8188		jsr	AssembleGroup3
>a20a		30					.byte $30
.a20b						Assemble_bvc:
.a20b		20 88 81	jsr $8188		jsr	AssembleGroup3
>a20e		50					.byte $50
.a20f						Assemble_bvs:
.a20f		20 88 81	jsr $8188		jsr	AssembleGroup3
>a212		70					.byte $70
.a213						Assemble_bcc:
.a213		20 88 81	jsr $8188		jsr	AssembleGroup3
>a216		90					.byte $90
.a217						Assemble_bcs:
.a217		20 88 81	jsr $8188		jsr	AssembleGroup3
>a21a		b0					.byte $b0
.a21b						Assemble_bne:
.a21b		20 88 81	jsr $8188		jsr	AssembleGroup3
>a21e		d0					.byte $d0
.a21f						Assemble_beq:
.a21f		20 88 81	jsr $8188		jsr	AssembleGroup3
>a222		f0					.byte $f0
.a223						Assemble_bra:
.a223		20 88 81	jsr $8188		jsr	AssembleGroup3
>a226		80					.byte $80
.a227						Assemble_brk:
.a227		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a22a		00					.byte $00
.a22b						Assemble_php:
.a22b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a22e		08					.byte $08
.a22f						Assemble_clc:
.a22f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a232		18					.byte $18
.a233						Assemble_plp:
.a233		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a236		28					.byte $28
.a237						Assemble_sec:
.a237		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a23a		38					.byte $38
.a23b						Assemble_rti:
.a23b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a23e		40					.byte $40
.a23f						Assemble_pha:
.a23f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a242		48					.byte $48
.a243						Assemble_cli:
.a243		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a246		58					.byte $58
.a247						Assemble_phy:
.a247		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a24a		5a					.byte $5a
.a24b						Assemble_rts:
.a24b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a24e		60					.byte $60
.a24f						Assemble_pla:
.a24f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a252		68					.byte $68
.a253						Assemble_sei:
.a253		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a256		78					.byte $78
.a257						Assemble_ply:
.a257		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a25a		7a					.byte $7a
.a25b						Assemble_dey:
.a25b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a25e		88					.byte $88
.a25f						Assemble_txa:
.a25f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a262		8a					.byte $8a
.a263						Assemble_tya:
.a263		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a266		98					.byte $98
.a267						Assemble_txs:
.a267		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a26a		9a					.byte $9a
.a26b						Assemble_tay:
.a26b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a26e		a8					.byte $a8
.a26f						Assemble_tax:
.a26f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a272		aa					.byte $aa
.a273						Assemble_clv:
.a273		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a276		b8					.byte $b8
.a277						Assemble_tsx:
.a277		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a27a		ba					.byte $ba
.a27b						Assemble_iny:
.a27b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a27e		c8					.byte $c8
.a27f						Assemble_dex:
.a27f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a282		ca					.byte $ca
.a283						Assemble_cld:
.a283		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a286		d8					.byte $d8
.a287						Assemble_phx:
.a287		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a28a		da					.byte $da
.a28b						Assemble_stp:
.a28b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a28e		db					.byte $db
.a28f						Assemble_inx:
.a28f		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a292		e8					.byte $e8
.a293						Assemble_nop:
.a293		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a296		ea					.byte $ea
.a297						Assemble_sed:
.a297		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a29a		f8					.byte $f8
.a29b						Assemble_plx:
.a29b		20 bc 81	jsr $81bc		jsr	AssembleGroup4
>a29e		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a29f						DecimalScalarTable:
>a29f		66 66 66 66				.dword $66666666 ; 0.1
>a2a3		de					.byte $de
>a2a4		1f 85 eb 51				.dword $51eb851f ; 0.01
>a2a8		db					.byte $db
>a2a9		4c 37 89 41				.dword $4189374c ; 0.001
>a2ad		d8					.byte $d8
>a2ae		ac 8b db 68				.dword $68db8bac ; 0.0001
>a2b2		d4					.byte $d4
>a2b3		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a2b7		d1					.byte $d1
>a2b8		83 de 1b 43				.dword $431bde83 ; 1e-06
>a2bc		ce					.byte $ce
>a2bd		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a2c1		ca					.byte $ca
>a2c2		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a2c6		c7					.byte $c7
>a2c7		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a2cb		c4					.byte $c4
>a2cc		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a2d0		c0					.byte $c0
>a2d1		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a2d5		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a2d6						SyntaxError:
.a2d6		a9 02		lda #$02		lda	#2
.a2d8		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a2db						RangeError:
.a2db		a9 04		lda #$04		lda	#4
.a2dd		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a2e0						TypeError:
.a2e0		a9 05		lda #$05		lda	#5
.a2e2		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a2e5						ArgumentError:
.a2e5		a9 07		lda #$07		lda	#7
.a2e7		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a2ea						NotDoneError:
.a2ea		a9 0c		lda #$0c		lda	#12
.a2ec		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a2ef						ErrorText:
>a2ef		42 72 65 61 6b 00			.text	"Break",0
>a2f5		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a2fd		72 72 6f 72 00
>a302		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a30a		20 62 79 20 7a 65 72 6f 00
>a313		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a31b		61 6e 67 65 00
>a320		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a328		6d 61 74 63 68 00
>a32e		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a336		65 6d 6f 72 79 00
>a33c		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a344		61 72 67 75 6d 65 6e 74 00
>a34d		53 74 6f 70 00				.text	"Stop",0
>a352		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a35a		6f 6f 20 6c 6f 6e 67 00
>a362		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a36a		6e 20 66 61 69 6c 65 64 00
>a373		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a37b		61 74 61 00
>a37f		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a387		65 6e 74 65 64 00
>a38d		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a395		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a3a1		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a3a9		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a3b6		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a3be		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a3cb		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a3d3		68 6f 75 74 20 57 68 69 6c 65 00
>a3de		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a3e6		68 6f 75 74 20 46 6f 72 00
>a3ef		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a3f7		61 63 6b 20 66 75 6c 6c 00
>a400		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a408		75 63 74 75 72 65 00
>a40f		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a417		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a424		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a42c		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a43a		41 72 72 61 79 20 73 69			.text	"Array size",0
>a442		7a 65 00
>a445		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a44d		79 20 69 6e 64 65 78 00
>a455		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a45d		74 20 64 65 63 6c 61 72 65 64 00
>a468		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a470		20 66 6f 75 6e 64 00
>a477		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a47f		65 72 72 6f 72 00
>a485		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a48d		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 34 2f 30 31 2f			.text 9,9,"04/01/23 23"
>dd5c		32 33 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a493						RectangleCommand:
.a493		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a495		80 02		bra $a499			bra 	ShapeDrawCmd
.a497						CircleCommand:
.a497		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a499						ShapeDrawCmd:
.a499		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a49c						ShapeDraw:
.a49c		0d e4 04	ora $04e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a49f		4c 17 a5	jmp $a517			jmp 	ExecuteGraphicCommand	 	; and complete
.a4a2						SpriteCommand:
.a4a2		a2 00		ldx #$00			ldx 	#0
.a4a4		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get image number.
.a4a7		5a		phy				phy
.a4a8		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a4aa		a6 58		ldx $58				ldx 	NSMantissa0
.a4ac		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a4ae		b0 0d		bcs $a4bd			bcs 	_SCRange
.a4b0		a0 ff		ldy #$ff			ldy 	#255
.a4b2		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4b5		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a4b7		7a		ply				ply
.a4b8		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a4bb		80 5a		bra $a517			bra 	ExecuteGraphicCommand
.a4bd						_SCRange:
.a4bd		4c db a2	jmp $a2db			jmp 	RangeError
.a4c0						ImageCommand:
.a4c0		a2 00		ldx #$00			ldx 	#0
.a4c2		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get image number.
.a4c5		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a4c8						ImageRunDraw:
.a4c8		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a4ca		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4cd		ad ea 04	lda $04ea			lda 	gxDrawScale
.a4d0		0a		asl a				asl 	a
.a4d1		0a		asl a				asl 	a
.a4d2		0a		asl a				asl 	a
.a4d3		a8		tay				tay
.a4d4		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a4d6		a6 58		ldx $58				ldx 	NSMantissa0
.a4d8		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4db		60		rts				rts
.a4dc						TextCommand:
.a4dc		a2 00		ldx #$00			ldx 	#0
.a4de		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; get text
.a4e1		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a4e4						TextRunDraw:
.a4e4		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a4e6		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4e9		a0 00		ldy #$00			ldy 	#0
.a4eb						_IRDLoop:
.a4eb		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a4ed		85 37		sta $37				sta 	zTemp0+1
.a4ef		a5 58		lda $58				lda 	NSMantissa0
.a4f1		85 36		sta $36				sta 	zTemp0
.a4f3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4f5		f0 13		beq $a50a			beq 	_IRDExit
.a4f7		5a		phy				phy									; save string pos
.a4f8		48		pha				pha 								; save char
.a4f9		ad ea 04	lda $04ea			lda 	gxDrawScale 				; get scale
.a4fc		0a		asl a				asl 	a
.a4fd		0a		asl a				asl 	a
.a4fe		0a		asl a				asl 	a
.a4ff		a8		tay				tay
.a500		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a502		fa		plx				plx 								; char to draw
.a503		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a506		7a		ply				ply 								; restore string pos
.a507		c8		iny				iny
.a508		90 e1		bcc $a4eb			bcc 	_IRDLoop 					; go back if no error.
.a50a						_IRDExit:
.a50a		60		rts				rts
.a50b						PlotCommand:
.a50b		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a50d		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a510		80 05		bra $a517			bra 	ExecuteGraphicCommand
.a512						LineCommand:
.a512		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a514		20 23 a5	jsr $a523			jsr 	RunGraphicsCommand
.a517						ExecuteGraphicCommand:
.a517		0d e3 04	ora $04e3			ora 	gxCommandID 				; make a full command
.a51a		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a51d		b0 01		bcs $a520			bcs 	_EGCError
.a51f		60		rts				rts
.a520						_EGCError:
.a520		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.a523						RunGraphicsCommand:
.a523		8d e3 04	sta $04e3			sta 	gxCommandID					; save TODO graphics command.
.a526		68		pla				pla 								; pop handler address
.a527		fa		plx				plx
.a528		1a		inc a				inc 	a
.a529		d0 01		bne $a52c			bne 	_RGINoCarry
.a52b		e8		inx				inx
.a52c						_RGINoCarry:
.a52c		8d e8 04	sta $04e8			sta 	gxHandler
.a52f		8e e9 04	stx $04e9			stx 	gxHandler+1
.a532						_RGICommandLoop:
.a532		b1 30		lda ($30),y			lda 	(codePtr),y
.a534		c8		iny				iny
.a535		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a537		f0 53		beq $a58c			beq 	_RGI_To
.a539		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a53b		f0 55		beq $a592			beq 	_RGI_Here
.a53d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a53f		f0 3d		beq $a57e			beq 	_RGI_Exit
.a541		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a543		f0 39		beq $a57e			beq 	_RGI_Exit
.a545		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a547		f0 3e		beq $a587			beq 	_RGI_Frame
.a549		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a54b		f0 33		beq $a580			beq 	_RGI_Solid
.a54d		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a54f		f0 4b		beq $a59c			beq 	_RGI_By
.a551		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a553		f0 17		beq $a56c			beq 	_RGI_Move2
.a555		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a557		f0 62		beq $a5bb			beq 	_RGI_Dim
.a559		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a55b		f0 74		beq $a5d1			beq 	_RGI_Colour
.a55d		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a55f		f0 70		beq $a5d1			beq 	_RGI_Colour
.a561		ae e3 04	ldx $04e3			ldx 	gxCommandID
.a564		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a566		d0 03		bne $a56b			bne 	_RGI_Move 					; move
.a568		4c f9 a5	jmp $a5f9			jmp		_RGI_SpriteInstructions
.a56b						_RGI_Move:
.a56b		88		dey				dey 								; unpick get.
.a56c						_RGI_Move2:
.a56c		20 1f a6	jsr $a61f			jsr 	GCGetCoordinatePair 		; move to here
.a56f		20 46 a6	jsr $a646			jsr 	GCCopyPairToStore 			; save
.a572		5a		phy				phy
.a573		20 3c a6	jsr $a63c			jsr 	GCLoadAXY 					; load in
.a576		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a578		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a57b		7a		ply				ply
.a57c		80 b4		bra $a532			bra 	_RGICommandLoop 			; and go round
.a57e						_RGI_Exit:
.a57e		88		dey				dey 								; unpick : / EOL
.a57f		60		rts				rts
.a580						_RGI_Solid:
.a580		a9 02		lda #$02			lda 	#2
.a582		8d e4 04	sta $04e4			sta 	gxFillSolid
.a585		80 ab		bra $a532			bra 	_RGICommandLoop
.a587						_RGI_Frame:
.a587		9c e4 04	stz $04e4			stz 	gxFillSolid
.a58a		80 a6		bra $a532			bra 	_RGICommandLoop
.a58c						_RGI_To:
.a58c		20 1f a6	jsr $a61f			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a58f		20 46 a6	jsr $a646			jsr 	GCCopyPairToStore
.a592						_RGI_Here:
.a592		5a		phy				phy
.a593		20 3c a6	jsr $a63c			jsr 	GCLoadAXY 					; load it into AXY
.a596		20 f6 a5	jsr $a5f6			jsr 	_RGICallHandler 			; go do whatever it is.
.a599		7a		ply				ply
.a59a		80 96		bra $a532			bra 	_RGICommandLoop 			; and go round
.a59c						_RGI_By:
.a59c		20 2c a6	jsr $a62c			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a59f		18		clc				clc
.a5a0		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a5a2		6d e5 04	adc $04e5			adc 	gxXPos
.a5a5		8d e5 04	sta $04e5			sta 	gxXPos
.a5a8		a5 61		lda $61				lda 	NSMantissa1+1
.a5aa		6d e6 04	adc $04e6			adc 	gxXPos+1
.a5ad		8d e6 04	sta $04e6			sta 	gxXPos+1
.a5b0		a5 5a		lda $5a				lda 	NSMantissa0+2
.a5b2		18		clc				clc
.a5b3		6d e7 04	adc $04e7			adc 	gxYPos
.a5b6		8d e7 04	sta $04e7			sta 	gxYPos
.a5b9		80 d7		bra $a592			bra 	_RGI_Here
.a5bb						_RGI_Dim:
.a5bb		a2 01		ldx #$01			ldx	 	#1
.a5bd		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger
.a5c0		a5 59		lda $59				lda 	NSMantissa0+1
.a5c2		c9 00		cmp #$00			cmp 	#0
.a5c4		f0 2d		beq $a5f3			beq 	_RGIRange
.a5c6		c9 09		cmp #$09			cmp 	#8+1
.a5c8		b0 29		bcs $a5f3			bcs		_RGIRange
.a5ca		3a		dec a				dec 	a
.a5cb		8d ea 04	sta $04ea			sta 	gxDrawScale
.a5ce		4c 32 a5	jmp $a532			jmp 	_RGICommandLoop
.a5d1						_RGI_Colour:
.a5d1		a2 01		ldx #$01			ldx 	#1 							; colour
.a5d3		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger
.a5d6		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a5d8		20 58 a1	jsr $a158			jsr 	NSMSetZero
.a5db		b1 30		lda ($30),y			lda 	(codePtr),y
.a5dd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a5df		d0 04		bne $a5e5			bne 	_RGICDefaultMode
.a5e1		c8		iny				iny
.a5e2		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger
.a5e5						_RGICDefaultMode:
.a5e5		5a		phy				phy
.a5e6		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a5e8		a6 59		ldx $59				ldx 	NSMantissa0+1
.a5ea		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a5ec		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5ef		7a		ply				ply
.a5f0		4c 32 a5	jmp $a532			jmp 	_RGICommandLoop 			; and go round
.a5f3						_RGIRange:
.a5f3		4c db a2	jmp $a2db			jmp 	RangeError
.a5f6						_RGICallHandler:
.a5f6		6c e8 04	jmp ($04e8)			jmp 	(gxHandler)
.a5f9						_RGI_SpriteInstructions:
.a5f9		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5fb		f0 07		beq $a604			beq 	_RGISpriteOff
.a5fd		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a5ff		f0 13		beq $a614			beq 	_RGISetImage
.a601		4c 6b a5	jmp $a56b			jmp 	_RGI_Move
.a604						_RGISpriteOff:
.a604		5a		phy				phy
.a605		a0 01		ldy #$01			ldy 	#1
.a607		a2 00		ldx #$00			ldx 	#0
.a609						_RGIDoCommandLoop:
.a609		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a60b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a60e		7a		ply				ply
.a60f		b0 e2		bcs $a5f3			bcs 	_RGIRange
.a611		4c 32 a5	jmp $a532			jmp 	_RGICommandLoop
.a614						_RGISetImage:
.a614		a2 01		ldx #$01			ldx 	#1
.a616		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger
.a619		5a		phy				phy
.a61a		aa		tax				tax
.a61b		a0 00		ldy #$00			ldy 	#0
.a61d		80 ea		bra $a609			bra 	_RGIDoCommandLoop
.a61f						GCGetCoordinatePair:
.a61f		a2 01		ldx #$01			ldx 	#1
.a621		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.a624		20 fc 91	jsr $91fc			jsr 	CheckComma
.a627		e8		inx				inx
.a628		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.a62b		60		rts				rts
.a62c						GCSignedCoordinatePair:
.a62c		a2 01		ldx #$01			ldx 	#1
.a62e		20 e2 a0	jsr $a0e2			jsr 	Evaluate16BitIntegerSigned
.a631		20 fc 91	jsr $91fc			jsr 	CheckComma
.a634		e8		inx				inx
.a635		20 e2 a0	jsr $a0e2			jsr 	Evaluate16BitIntegerSigned
.a638		60		rts				rts
.a639						_GCCPRange:
.a639		4c db a2	jmp $a2db			jmp 	RangeError
.a63c						GCLoadAXY:
.a63c		ad e6 04	lda $04e6			lda 	gxXPos+1
.a63f		ae e5 04	ldx $04e5			ldx 	gxXPos
.a642		ac e7 04	ldy $04e7			ldy 	gxYPos
.a645		60		rts				rts
.a646						GCCopyPairToStore:
.a646		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a648		8d e5 04	sta $04e5			sta 	gxXPos
.a64b		a5 61		lda $61				lda 	NSMantissa1+1
.a64d		8d e6 04	sta $04e6			sta 	gxXPos+1
.a650		a5 5a		lda $5a				lda 	NSMantissa0+2
.a652		8d e7 04	sta $04e7			sta 	gxYPos
.a655		60		rts				rts
.04e3						gxCommandID:
>04e3								.fill 	1
.04e4						gxFillSolid:
>04e4								.fill 	1
.04e5						gxXPos:
>04e5								.fill 	2
.04e7						gxYPos:
>04e7								.fill 	1
.04e8						gxHandler:
>04e8								.fill 	2
.04ea						gxDrawScale:
>04ea								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a656						BitmapCtrl:
.a656		b1 30		lda ($30),y			lda 	(codePtr),y
.a658		c8		iny				iny
.a659		a2 01		ldx #$01			ldx 	#1
.a65b		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a65d		f0 11		beq $a670			beq 	BitmapSwitch
.a65f		ca		dex				dex
.a660		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a662		f0 0c		beq $a670			beq 	BitmapSwitch
.a664		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get the colour
.a667		5a		phy				phy
.a668		aa		tax				tax
.a669		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a66b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a66e		7a		ply				ply
.a66f		60		rts				rts
.a670						BitmapSwitch:
.a670		5a		phy				phy
.a671		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a673		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a675		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a678		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a67a		a0 00		ldy #$00			ldy 	#0
.a67c		a2 ff		ldx #$ff			ldx 	#$FF
.a67e		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a681		9c e4 04	stz $04e4			stz 	gxFillSolid
.a684		9c e5 04	stz $04e5			stz 	gxXPos
.a687		9c e6 04	stz $04e6			stz 	gxXPos+1
.a68a		9c e7 04	stz $04e7			stz 	gxYPos
.a68d		9c ea 04	stz $04ea			stz 	gxDrawScale
.a690		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a692		a2 00		ldx #$00			ldx 	#0
.a694		a0 00		ldy #$00			ldy 	#0
.a696		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a699		7a		ply				ply
.a69a		60		rts				rts
.a69b						SpritesCtrl:
.a69b		b1 30		lda ($30),y			lda 	(codePtr),y
.a69d		c8		iny				iny
.a69e		a2 01		ldx #$01			ldx 	#1
.a6a0		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a6a2		f0 08		beq $a6ac			beq 	SpriteSwitch
.a6a4		ca		dex				dex
.a6a5		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a6a7		f0 03		beq $a6ac			beq 	SpriteSwitch
.a6a9		4c d6 a2	jmp $a2d6			jmp 	SyntaxError
.a6ac						SpriteSwitch:
.a6ac		5a		phy				phy
.a6ad		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a6af		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a6b1		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6b4		7a		ply				ply
.a6b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a6b6						GfxCommand:
.a6b6		a2 00		ldx #$00			ldx 	#0
.a6b8		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; command
.a6bb		20 fc 91	jsr $91fc			jsr 	CheckComma
.a6be		e8		inx				inx
.a6bf		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; X
.a6c2		20 fc 91	jsr $91fc			jsr 	CheckComma
.a6c5		e8		inx				inx
.a6c6		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; Y
.a6c9		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a6cb		4a		lsr a				lsr 	a
.a6cc		d0 12		bne $a6e0			bne 	_GfxError
.a6ce		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a6d0		b0 0e		bcs $a6e0			bcs 	_GfxError 					; bit 7 should have been zero
.a6d2		5a		phy				phy 								; save pos
.a6d3		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a6d5		a6 59		ldx $59				ldx 	NSMantissa0+1
.a6d7		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a6d9		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a6dc		b0 02		bcs $a6e0			bcs 	_GfxError
.a6de		7a		ply				ply 								; restore pos and exit.
.a6df		60		rts				rts
.a6e0						_GfxError:
.a6e0		4c db a2	jmp $a2db			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a6e3						UnaryHit:
.a6e3		fa		plx				plx
.a6e4		a9 36		lda #$36			lda 	#zTemp0
.a6e6		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a6e9		20 fc 91	jsr $91fc			jsr 	CheckComma
.a6ec		e8		inx				inx
.a6ed		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a6f0		20 f4 91	jsr $91f4			jsr		CheckRightBracket
.a6f3		ca		dex				dex 								; fix back up again.
.a6f4		da		phx				phx 								; save X/Y
.a6f5		5a		phy				phy
.a6f6		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a6f8		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6fa		aa		tax				tax
.a6fb		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a6fd		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a700		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a701		7a		ply				ply 								; restore XY
.a702		fa		plx				plx
.a703		20 5a a1	jsr $a15a			jsr 	NSMSetByte 					; return the hit result
.a706		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a707						PaletteCommand:
.a707		a2 00		ldx #$00			ldx 	#0
.a709		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; colour
.a70c		20 fc 91	jsr $91fc			jsr 	CheckComma
.a70f		e8		inx				inx
.a710		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; r
.a713		20 fc 91	jsr $91fc			jsr 	CheckComma
.a716		e8		inx				inx
.a717		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; g
.a71a		20 fc 91	jsr $91fc			jsr 	CheckComma
.a71d		e8		inx				inx
.a71e		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; b
.a721		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a723		85 36		sta $36				sta 	zTemp0
.a725		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a727		85 37		sta $37				sta 	zTemp0+1
.a729		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a72b		26 37		rol $37				rol	 	zTemp0+1
.a72d		06 36		asl $36				asl 	zTemp0
.a72f		26 37		rol $37				rol	 	zTemp0+1
.a731		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a733		85 01		sta $01				sta 	1
.a735		5a		phy				phy
.a736		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a738		92 36		sta ($36)			sta 	(zTemp0)
.a73a		a0 01		ldy #$01			ldy 	#1
.a73c		a5 5a		lda $5a				lda 	NSMantissa0+2
.a73e		91 36		sta ($36),y			sta 	(zTemp0),y
.a740		a5 59		lda $59				lda 	NSMantissa0+1
.a742		c8		iny				iny
.a743		91 36		sta ($36),y			sta 	(zTemp0),y
.a745		7a		ply				ply
.a746		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a747						XLoadCommand:
.a747		20 61 8c	jsr $8c61			jsr 	NewProgram
.a74a		20 9f 83	jsr $839f			jsr 	BackloadProgram
.a74d		4c 5e 84	jmp $845e			jmp 	WarmStart
.a750						XGoCommand:
.a750		20 61 8c	jsr $8c61			jsr 	NewProgram
.a753		20 9f 83	jsr $839f			jsr 	BackloadProgram
.a756		4c df 8d	jmp $8ddf			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a759						UnaryEvent:
.a759		fa		plx				plx
.a75a		20 f3 a7	jsr $a7f3			jsr 	TimerToStackX 				; timer in +0
.a75d		e8		inx				inx  								; put reference into +1
.a75e		20 5b 9b	jsr $9b5b			jsr 	EvaluateTerm
.a761		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a763		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a765		d0 4c		bne $a7b3			bne 	_UEType
.a767		e8		inx				inx 								; put the step in +2
.a768		20 fc 91	jsr $91fc			jsr 	CheckComma
.a76b		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger
.a76e		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.a771		ca		dex				dex
.a772		ca		dex				dex
.a773		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a775		85 36		sta $36				sta 	zTemp0
.a777		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a779		85 37		sta $37				sta 	zTemp0+1
.a77b		5a		phy				phy
.a77c		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a77e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a780		30 2d		bmi $a7af			bmi 	_UEFalse 					; exit if signed.
.a782		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a784		b5 58		lda $58,x			lda 	NSMantissa0,x
.a786		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a788		c8		iny				iny
.a789		b5 60		lda $60,x			lda 	NSMantissa1,x
.a78b		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a78d		c8		iny				iny
.a78e		b5 68		lda $68,x			lda 	NSMantissa2,x
.a790		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a792		90 1b		bcc $a7af			bcc 	_UEFalse 					; no, return FALSE.
.a794		18		clc				clc
.a795		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a797		b5 58		lda $58,x			lda 	NSMantissa0,x
.a799		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a79b		91 36		sta ($36),y			sta 	(zTemp0),y
.a79d		c8		iny				iny
.a79e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a7a0		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a7a2		91 36		sta ($36),y			sta 	(zTemp0),y
.a7a4		c8		iny				iny
.a7a5		b5 68		lda $68,x			lda 	NSMantissa2,x
.a7a7		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a7a9		91 36		sta ($36),y			sta 	(zTemp0),y
.a7ab		7a		ply				ply
.a7ac		4c 7a 92	jmp $927a			jmp 	ReturnTrue
.a7af						_UEFalse:
.a7af		7a		ply				ply 								; restore Y
.a7b0		4c 85 92	jmp $9285			jmp 	ReturnFalse 				; and return False
.a7b3						_UEType:
.a7b3		4c e0 a2	jmp $a2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a7b6						UnaryJoyX:
.a7b6		18		clc				clc
.a7b7		80 01		bra $a7ba			bra 	JoyMain
.a7b9						UnaryJoyY:
.a7b9		38		sec				sec
.a7ba						JoyMain:
.a7ba		fa		plx				plx 								; get pos
.a7bb		08		php				php 								; save carry (set for Y)
.a7bc		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a7bf		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.a7c2		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a7c5		28		plp				plp
.a7c6		b0 02		bcs $a7ca			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a7c8		4a		lsr a				lsr 	a
.a7c9		4a		lsr a				lsr 	a
.a7ca						_JMNoShift:
.a7ca		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a7cb		b0 07		bcs $a7d4			bcs 	JMIsLeft
.a7cd		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a7ce		b0 07		bcs $a7d7			bcs 	JMIsRight
.a7d0		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; zero result
.a7d3		60		rts				rts
.a7d4						JMIsLeft:
.a7d4		4c 7a 92	jmp $927a			jmp 	ReturnTrue
.a7d7						JMIsRight:
.a7d7		a9 01		lda #$01			lda 	#1
.a7d9		20 5a a1	jsr $a15a			jsr 	NSMSetByte
.a7dc		60		rts				rts
.a7dd						UnaryJoyB:
.a7dd		fa		plx				plx 								; get pos
.a7de		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a7e1		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.a7e4		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a7e7		29 10		and #$10			and 	#$10
.a7e9		d0 e9		bne $a7d4			bne 	JMIsLeft
.a7eb		20 58 a1	jsr $a158			jsr 	NSMSetZero
.a7ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a7ef						UnaryTimer:
.a7ef		fa		plx				plx
.a7f0		20 f4 91	jsr $91f4			jsr 	CheckRightBracket
.a7f3						TimerToStackX:
.a7f3		20 58 a1	jsr $a158			jsr 	NSMSetZero 					; zero result
.a7f6		64 01		stz $01				stz 	1 							; access I/O
.a7f8		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a7fb		95 58		sta $58,x			sta 	NSMantissa0,x
.a7fd		ad 5a d6	lda $d65a			lda 	$D65A
.a800		95 60		sta $60,x			sta 	NSMantissa1,x
.a802		ad 5b d6	lda $d65b			lda 	$D65B
.a805		95 68		sta $68,x			sta 	NSMantissa2,x
.a807		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a808						MemoryDeleteLine:
.a808		20 27 a8	jsr $a827			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a80b		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a80d		a8		tay				tay
.a80e						_MDDLLoop:
.a80e		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a810		92 30		sta ($30)			sta 	(codePtr)
.a812		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a814		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a816		d0 07		bne $a81f			bne 	_MDLDLNext
.a818		a5 31		lda $31				lda 	codePtr+1
.a81a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a81c		d0 01		bne $a81f			bne 	_MDLDLNext
.a81e						_MDDLExit:
.a81e		60		rts				rts
.a81f						_MDLDLNext:
.a81f		e6 30		inc $30				inc 	codePtr						; next byte
.a821		d0 eb		bne $a80e			bne 	_MDDLLoop
.a823		e6 31		inc $31				inc 	codePtr+1
.a825		80 e7		bra $a80e			bra 	_MDDLLoop
.a827						IMemoryFindEnd:
.a827		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a829		85 3a		sta $3a				sta 	0+zTemp2
.a82b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a82d		85 3b		sta $3b				sta 	1+zTemp2
.a82f						_MDLFELoop:
.a82f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a831		f0 0b		beq $a83e			beq 	_MDLFEExit
.a833		18		clc				clc
.a834		65 3a		adc $3a				adc 	zTemp2
.a836		85 3a		sta $3a				sta 	zTemp2
.a838		90 f5		bcc $a82f			bcc 	_MDLFELoop
.a83a		e6 3b		inc $3b				inc 	zTemp2+1
.a83c		80 f1		bra $a82f			bra 	_MDLFELoop
.a83e						_MDLFEExit:
.a83e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a83f						MemoryInsertLine:
.a83f		08		php				php
.a840		20 27 a8	jsr $a827			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a843		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a845		1a		inc a				inc 	a
.a846		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a848		b0 36		bcs $a880			bcs 	_MDLIError 					; no, fail.
.a84a		28		plp				plp 								; do at a specific point or the end ?
.a84b		90 08		bcc $a855			bcc 	_MDLIFound 					; if specific point already set.
.a84d		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a84f		85 30		sta $30				sta 	codePtr 					; end.
.a851		a5 3b		lda $3b				lda 	zTemp2+1
.a853		85 31		sta $31				sta 	codePtr+1
.a855						_MDLIFound:
.a855		ad aa 02	lda $02aa			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a858		a8		tay				tay
.a859						_MDLIInsert:
.a859		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a85b		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a85d		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a85f		c5 3a		cmp $3a				cmp 	zTemp2
.a861		d0 06		bne $a869			bne 	_MDLINext
.a863		a5 31		lda $31				lda 	codePtr+1
.a865		c5 3b		cmp $3b				cmp 	zTemp2+1
.a867		f0 0a		beq $a873			beq 	_MDLIHaveSpace
.a869						_MDLINext:
.a869		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a86b		d0 02		bne $a86f			bne 	_MDLINoBorrow
.a86d		c6 3b		dec $3b				dec 	zTemp2+1
.a86f						_MDLINoBorrow:
.a86f		c6 3a		dec $3a				dec 	zTemp2
.a871		80 e6		bra $a859			bra 	_MDLIInsert
.a873						_MDLIHaveSpace:
.a873		ac aa 02	ldy $02aa			ldy 	tokenOffset 				; bytes to copy
.a876		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a877						_MDLICopy:
.a877		b9 aa 02	lda $02aa,y			lda 	tokenOffset,y
.a87a		91 30		sta ($30),y			sta 	(codePtr),y
.a87c		88		dey				dey
.a87d		10 f8		bpl $a877			bpl 	_MDLICopy
.a87f		60		rts				rts
.a880						_MDLIError:
.a880		a9 06		lda #$06		lda	#6
.a882		4c 0d 92	jmp $920d		jmp	ErrorHandler
.a885						MDLAppendLine:
.a885		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a887		85 36		sta $36				sta 	zTemp0
.a889		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a88b		85 38		sta $38				sta 	0+zTemp1
.a88d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a88f		85 39		sta $39				sta 	1+zTemp1
.a891		b2 38		lda ($38)			lda 	(zTemp1)
.a893		d0 0a		bne $a89f			bne 	_MDLANoInitialise
.a895		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a897		8d eb 04	sta $04eb			sta 	0+AppendPointer
.a89a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a89c		8d ec 04	sta $04ec			sta 	1+AppendPointer
.a89f						_MDLANoInitialise:
.a89f		18		clc				clc
.a8a0		ad eb 04	lda $04eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a8a3		85 38		sta $38				sta 	zTemp1
.a8a5		72 36		adc ($36)			adc 	(zTemp0)
.a8a7		8d eb 04	sta $04eb			sta 	AppendPointer
.a8aa		ad ec 04	lda $04ec			lda 	AppendPointer+1
.a8ad		85 39		sta $39				sta 	zTemp1+1
.a8af		69 00		adc #$00			adc 	#0
.a8b1		8d ec 04	sta $04ec			sta 	AppendPointer+1
.a8b4		a0 00		ldy #$00			ldy 	#0
.a8b6						_MDLACopy:
.a8b6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a8b8		91 38		sta ($38),y			sta 	(zTemp1),y
.a8ba		c8		iny				iny
.a8bb		98		tya				tya
.a8bc		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a8be		d0 f6		bne $a8b6			bne 	_MDLACopy
.a8c0		a9 00		lda #$00			lda 	#0 							; end of program.
.a8c2		91 38		sta ($38),y			sta 	(zTemp1),y
.a8c4		60		rts				rts
.04eb						AppendPointer:
>04eb								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a8c5						MemoryNew:
.a8c5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8c7		85 30		sta $30				sta 	codePtr
.a8c9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8cb		85 31		sta $31				sta 	codePtr+1
.a8cd		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a8cf		92 30		sta ($30)			sta 	(codePtr)
.a8d1		60		rts				rts
.a8d2						MemoryInline:
.a8d2		98		tya				tya 								; put address into stack,x
.a8d3		18		clc				clc  								; get the offset, add codePtr
.a8d4		65 30		adc $30				adc 	codePtr
.a8d6		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a8d8		a5 31		lda $31				lda 	codePtr+1
.a8da		69 00		adc #$00			adc 	#0
.a8dc		95 60		sta $60,x			sta 	NSMantissa1,x
.a8de		74 68		stz $68,x			stz 	NSMantissa2,x
.a8e0		74 70		stz $70,x			stz 	NSMantissa3,x
.a8e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a8e3						MemorySearch:
.a8e3		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a8e5		86 37		stx $37				stx 	zTemp0+1
.a8e7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8e9		85 30		sta $30				sta 	codePtr
.a8eb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8ed		85 31		sta $31				sta 	codePtr+1
.a8ef						_MTAXLoop:
.a8ef		b2 30		lda ($30)			lda 	(codePtr)
.a8f1		18		clc				clc
.a8f2		f0 21		beq $a915			beq 	_MTAXExit 					; reached end, exit with CC.
.a8f4		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a8f6		b1 30		lda ($30),y			lda 	(codePtr),y
.a8f8		38		sec				sec
.a8f9		e5 36		sbc $36				sbc 	zTemp0
.a8fb		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a8fd		c8		iny				iny 								; do the MSB
.a8fe		b1 30		lda ($30),y			lda 	(codePtr),y
.a900		e5 37		sbc $37				sbc 	zTemp0+1
.a902		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a904		f0 0f		beq $a915			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a906		b0 0d		bcs $a915			bcs 	_MTAXExit 					; current < required exit
.a908		18		clc				clc
.a909		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a90b		65 30		adc $30				adc 	codePtr
.a90d		85 30		sta $30				sta 	codePtr
.a90f		90 02		bcc $a913			bcc 	_CREExit
.a911		e6 31		inc $31				inc 	codePtr+1 					; carry
.a913						_CREExit:
.a913		80 da		bra $a8ef			bra 	_MTAXLoop
.a915						_MTAXExit:
.a915		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a916						UpdateFont:
.a916		a5 01		lda $01				lda 	1 							; save position
.a918		48		pha				pha
.a919		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a91b		85 01		sta $01				sta 	1
.a91d		a9 44		lda #$44			lda 	#((FontBinary) & $FF)
.a91f		85 36		sta $36				sta 	0+zTemp0
.a921		a9 a9		lda #$a9			lda 	#((FontBinary) >> 8)
.a923		85 37		sta $37				sta 	1+zTemp0
.a925		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a927		85 38		sta $38				sta 	0+zTemp1
.a929		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a92b		85 39		sta $39				sta 	1+zTemp1
.a92d						_UFCopy1:
.a92d		a0 00		ldy #$00			ldy 	#0
.a92f						_UFCopy2:
.a92f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a931		91 38		sta ($38),y			sta 	(zTemp1),y
.a933		c8		iny				iny
.a934		d0 f9		bne $a92f			bne 	_UFCopy2
.a936		e6 37		inc $37				inc 	zTemp0+1
.a938		e6 39		inc $39				inc 	zTemp1+1
.a93a		a5 39		lda $39				lda 	zTemp1+1
.a93c		c9 c8		cmp #$c8			cmp 	#$C8
.a93e		d0 ed		bne $a92d			bne 	_UFCopy1
.a940		68		pla				pla 								; restore.
.a941		85 01		sta $01				sta 	1
.a943		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a944						FontBinary:
>a944		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a94c		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a95c		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a96c		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a97c		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a98c		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a99c		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a9ac		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a9bc		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a9cc		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a9dc		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a9ec		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a9fc		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>aa0c		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>aa1c		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>aa2c		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aa3c		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aa4c		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aa5c		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aa6c		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aa7c		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>aa8c		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>aa9c		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>aaac		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>aabc		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aacc		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aadc		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aaec		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aafc		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>ab0c		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>ab1c		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>ab2c		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>ab3c		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>ab4c		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>ab5c		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>ab6c		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>ab7c		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ab8c		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ab9c		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>abac		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>abbc		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>abcc		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>abdc		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>abec		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>abfc		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ac0c		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ac1c		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ac2c		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ac3c		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ac4c		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ac5c		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ac6c		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ac7c		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ac8c		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ac9c		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>acac		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>acbc		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>accc		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>acdc		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>acec		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>acfc		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ad0c		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ad1c		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ad2c		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ad3c		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ad4c		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ad5c		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ad6c		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ad7c		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ad8c		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ad9c		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>adac		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>adbc		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>adcc		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>addc		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>adec		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>adfc		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ae0c		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ae1c		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ae2c		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ae3c		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ae4c		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ae5c		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ae6c		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ae7c		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ae8c		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ae9c		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>aeac		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>aebc		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>aecc		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>aedc		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>aeec		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>aefc		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>af0c		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>af1c		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>af2c		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>af3c		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>af4c		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>af5c		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>af6c		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>af7c		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>af8c		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>af9c		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>afac		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>afbc		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>afcc		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>afdc		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>afec		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>affc		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>b00c		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>b01c		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>b02c		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>b03c		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>b04c		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b05c		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b06c		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b07c		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b08c		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b09c		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b0ac		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b0bc		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b0cc		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b0dc		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b0ec		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b0fc		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b10c		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b11c		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b12c		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b13c		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b144						PingCommand:
.b144		5a		phy				phy 								; save pos
.b145		a9 01		lda #$01			lda 	#1 						; push channel.
.b147		48		pha				pha
.b148		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b14a		a2 06		ldx #$06			ldx 	#6 						; length
.b14c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b14e		80 24		bra $b174			bra 	SoundEffectCommand
.b150						ZapCommand:
.b150		5a		phy				phy 								; save pos
.b151		a9 01		lda #$01			lda 	#1 						; push channel.
.b153		48		pha				pha
.b154		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b156		a2 0a		ldx #$0a			ldx 	#10 						; length
.b158		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b15a		80 18		bra $b174			bra 	SoundEffectCommand
.b15c						ShootCommand:
.b15c		5a		phy				phy 								; save pos
.b15d		a9 03		lda #$03			lda 	#3 						; push channel.
.b15f		48		pha				pha
.b160		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b162		a2 04		ldx #$04			ldx 	#4 						; length
.b164		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b166		80 0c		bra $b174			bra 	SoundEffectCommand
.b168						Explode:
.b168		5a		phy				phy 								; save pos
.b169		a9 03		lda #$03			lda 	#3 						; push channel.
.b16b		48		pha				pha
.b16c		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b16e		a2 0a		ldx #$0a			ldx 	#10 						; length
.b170		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b172		80 00		bra $b174			bra 	SoundEffectCommand
.b174						SoundEffectCommand:
.b174		8d ed 04	sta $04ed			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b177		9c ee 04	stz $04ee			stz 	SoundCommandBlock+1
.b17a		a9 0f		lda #$0f			lda 	#15
.b17c		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2
.b17f		8e f0 04	stx $04f0			stx 	SoundCommandBlock+3
.b182		8c f1 04	sty $04f1			sty 	SoundCommandBlock+4
.b185		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b188		68		pla				pla
.b189		09 10		ora #$10			ora 	#$10  						; execute command $11
.b18b		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b18d		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b18f		20 8f 80	jsr $808f			jsr 	SNDCommand
.b192		7a		ply				ply
.b193		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b194						UnaryPlaying:
.b194		fa		plx				plx
.b195		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; get channel #
.b198		48		pha				pha
.b199		20 f4 91	jsr $91f4			jsr		CheckRightBracket
.b19c		68		pla				pla
.b19d		c9 04		cmp #$04			cmp 	#4
.b19f		b0 0c		bcs $b1ad			bcs 	_UPNotPlaying
.b1a1		09 20		ora #$20			ora 	#$20 						; query playing ?
.b1a3		20 8f 80	jsr $808f			jsr 	SNDCommand
.b1a6		c9 00		cmp #$00			cmp 	#0
.b1a8		f0 03		beq $b1ad			beq 	_UPNotPlaying
.b1aa		4c 7a 92	jmp $927a			jmp 	ReturnTrue
.b1ad						_UPNotPlaying:
.b1ad		4c 85 92	jmp $9285			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b1b0						SoundCommand:
.b1b0		b1 30		lda ($30),y			lda 	(codePtr),y
.b1b2		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b1b4		d0 09		bne $b1bf			bne 	_SNDMain
.b1b6		c8		iny				iny 								; skip OFF
.b1b7		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b1b9		5a		phy				phy
.b1ba		20 8f 80	jsr $808f			jsr 	SNDCommand
.b1bd		7a		ply				ply
.b1be		60		rts				rts
.b1bf						_SNDMain:
.b1bf		a2 00		ldx #$00			ldx 	#0
.b1c1		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; channel
.b1c4		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b1c6		b0 4b		bcs $b213			bcs 	_SndError
.b1c8		e8		inx				inx 								; do the rest in slot 1.
.b1c9		20 fc 91	jsr $91fc			jsr 	CheckComma
.b1cc		20 d8 a0	jsr $a0d8			jsr 	Evaluate16BitInteger 		; Pitch
.b1cf		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b1d1		c9 10		cmp #$10			cmp 	#16
.b1d3		b0 3e		bcs $b213			bcs 	_SndError
.b1d5		8d ee 04	sta $04ee			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b1d8		b5 58		lda $58,x			lda 	NSMantissa0,x
.b1da		8d ed 04	sta $04ed			sta 	SoundCommandBlock
.b1dd		20 fc 91	jsr $91fc			jsr 	CheckComma
.b1e0		20 f3 a0	jsr $a0f3			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b1e3		8d f0 04	sta $04f0			sta 	SoundCommandBlock+3
.b1e6		a9 0f		lda #$0f			lda 	#15
.b1e8		8d ef 04	sta $04ef			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b1eb		9c f1 04	stz $04f1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b1ee		9c f2 04	stz $04f2			stz 	SoundCommandBlock+5
.b1f1		b1 30		lda ($30),y			lda 	(codePtr),y
.b1f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b1f5		d0 0e		bne $b205			bne 	_SNDPlay
.b1f7		c8		iny				iny
.b1f8		20 e2 a0	jsr $a0e2			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b1fb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b1fd		8d f1 04	sta $04f1			sta 	SoundCommandBlock+4
.b200		b5 60		lda $60,x			lda 	NSMantissa1,x
.b202		8d f2 04	sta $04f2			sta 	SoundCommandBlock+5
.b205						_SNDPlay:
.b205		5a		phy				phy
.b206		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b208		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b20a		a2 ed		ldx #$ed			ldx 	#(SoundCommandBlock & $FF)
.b20c		a0 04		ldy #$04			ldy 	#(SoundCommandBlock >> 8)
.b20e		20 8f 80	jsr $808f			jsr 	SNDCommand
.b211		7a		ply				ply
.b212		60		rts				rts
.b213						_SndError:
.b213		4c db a2	jmp $a2db			jmp 	RangeError
.04ed						SoundCommandBlock:
>04ed								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b216						StackPushByte:
.b216		48		pha				pha 								; save byte on stack
.b217		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b219		d0 08		bne $b223			bne 	_SPBNoBorrow
.b21b		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b21d		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b21f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b221		90 06		bcc $b229			bcc 	_SPBMemory
.b223						_SPBNoBorrow:
.b223		c6 34		dec $34				dec 	basicStack
.b225		68		pla				pla 								; get back and write
.b226		92 34		sta ($34)			sta 	(basicStack)
.b228		60		rts				rts
.b229						_SPBMemory:
.b229		a9 12		lda #$12		lda	#18
.b22b		4c 0d 92	jmp $920d		jmp	ErrorHandler
.b22e						StackPopByte:
.b22e		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b230		e6 34		inc $34				inc 	basicStack
.b232		d0 02		bne $b236			bne 	_SPBNoCarry
.b234		e6 35		inc $35				inc 	basicStack+1
.b236						_SPBNoCarry:
.b236		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b237						StackOpen:
.b237		48		pha				pha 								; save frame byte
.b238		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b23a		0a		asl a				asl 	a 							; claim twice this for storage
.b23b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b23d		38		sec				sec 								; so basically subtracting from
.b23e		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b240		85 34		sta $34				sta 	basicStack
.b242		b0 09		bcs $b24d			bcs 	_SONoBorrow
>b244		db						.byte 	$DB 						; causes a break in the emulator
.b245		c6 35		dec $35				dec 	basicStack+1
.b247		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b249		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b24b		90 04		bcc $b251			bcc 	_SOMemory
.b24d						_SONoBorrow:
.b24d		68		pla				pla 								; get marker back and write at TOS
.b24e		92 34		sta ($34)			sta 	(basicStack)
.b250		60		rts				rts
.b251						_SOMemory:
.b251		a9 12		lda #$12		lda	#18
.b253		4c 0d 92	jmp $920d		jmp	ErrorHandler
.b256						StackClose:
.b256		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b258		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b25a		0a		asl a				asl 	a 							; claim twice this.
.b25b		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b25d		85 34		sta $34				sta 	basicStack
.b25f		90 02		bcc $b263			bcc 	_SCExit
.b261		e6 35		inc $35				inc 	basicStack+1
.b263						_SCExit:
.b263		60		rts				rts
.b264						StackCheckFrame:
.b264		48		pha				pha
.b265						_StackRemoveLocals:
.b265		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b267		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b269		b0 05		bcs $b270			bcs 	_SCNoLocal
.b26b		20 10 8c	jsr $8c10			jsr 	LocalPopValue 				; restore the local value
.b26e		80 f5		bra $b265			bra 	_StackRemoveLocals 			; gr round again
.b270						_SCNoLocal:
.b270		68		pla				pla 								; get the frame check.
.b271		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b273		29 f0		and #$f0			and 	#$F0 						; check type bits
.b275		d0 01		bne $b278			bne 	_SCFError 					; different, we have structures mixed up
.b277		60		rts				rts
.b278						_SCFError:
.b278		8a		txa				txa 								; report error X
.b279		4c 0d 92	jmp $920d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b27c						STKSaveCodePosition:
.b27c		5a		phy				phy
.b27d		98		tya				tya 								; save Y
.b27e		a0 05		ldy #$05			ldy 	#5
.b280		91 34		sta ($34),y			sta 	(basicStack),y
.b282		88		dey				dey 								; save Code Pointer
.b283						_STKSaveLoop:
.b283		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b286		91 34		sta ($34),y			sta 	(basicStack),y
.b288		88		dey				dey
.b289		d0 f8		bne $b283			bne 	_STKSaveLoop
.b28b		7a		ply				ply
.b28c		60		rts				rts
.b28d						STKLoadCodePosition:
.b28d		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b28f						_STKLoadLoop:
.b28f		b1 34		lda ($34),y			lda 	(basicStack),y
.b291		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b294		c8		iny				iny
.b295		c0 05		cpy #$05			cpy 	#5
.b297		d0 f6		bne $b28f			bne 	_STKLoadLoop
.b299		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b29b		a8		tay				tay
.b29c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b29d						StackReset:
.b29d		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b29f		85 34		sta $34				sta 	0+basicStack
.b2a1		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b2a3		85 35		sta $35				sta 	1+basicStack
.b2a5		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b2a7		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b2a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b2aa						StringConcrete:
.b2aa		5a		phy				phy 								; save position on stack
.b2ab		20 47 9d	jsr $9d47			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b2ae		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b2b0		85 38		sta $38				sta 	zTemp1
.b2b2		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2b4		85 39		sta $39				sta 	zTemp1+1
.b2b6		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b2b8						_SALength:
.b2b8		c8		iny				iny
.b2b9		b1 38		lda ($38),y			lda 	(zTemp1),y
.b2bb		d0 fb		bne $b2b8			bne 	_SALength
.b2bd		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b2bf		b0 3d		bcs $b2fe			bcs 	_SALengthError
.b2c1		98		tya				tya 				 				; length of the new string
.b2c2		18		clc				clc
.b2c3		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b2c5		90 02		bcc $b2c9			bcc 	_SAHaveLength
.b2c7		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b2c9						_SAHaveLength:
.b2c9		48		pha				pha 								; save length.
.b2ca		38		sec				sec
.b2cb		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b2cd		6d 8e 02	adc $028e			adc 	stringMemory
.b2d0		8d 8e 02	sta $028e			sta 	stringMemory
.b2d3		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b2d5		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b2d7		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b2d9		6d 8f 02	adc $028f			adc 	stringMemory+1
.b2dc		8d 8f 02	sta $028f			sta 	stringMemory+1
.b2df		85 3b		sta $3b				sta 	zTemp2+1
.b2e1		95 60		sta $60,x			sta 	NSMantissa1,x
.b2e3		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b2e4		38		sec				sec
.b2e5		e9 03		sbc #$03			sbc 	#3
.b2e7		92 3a		sta ($3a)			sta 	(zTemp2)
.b2e9		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b2eb		a0 01		ldy #$01			ldy 	#1
.b2ed		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b2ef						_SACopyNewString:
.b2ef		a0 00		ldy #$00			ldy 	#0
.b2f1						_SACopyNSLoop:
.b2f1		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b2f3		c8		iny				iny 								; write two on in string storage
.b2f4		c8		iny				iny
.b2f5		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b2f7		88		dey				dey 								; this makes it one one.
.b2f8		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b2fa		d0 f5		bne $b2f1			bne 	_SACopyNSLoop
.b2fc		7a		ply				ply
.b2fd		60		rts				rts
.b2fe						_SALengthError:
.b2fe		a9 09		lda #$09		lda	#9
.b300		4c 0d 92	jmp $920d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b303						StringSystemInitialise:
.b303		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b305		8d 8e 02	sta $028e			sta 	0+stringMemory
.b308		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b30a		8d 8f 02	sta $028f			sta 	1+stringMemory
.b30d		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b310		60		rts				rts
.b311						StringSpaceInitialise:
.b311		20 47 9d	jsr $9d47			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b314		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b316		8d 90 02	sta $0290			sta 	stringInitialised
.b319		ad 8e 02	lda $028e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b31c		8d 91 02	sta $0291			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b31f		ad 8f 02	lda $028f			lda 	stringMemory+1
.b322		3a		dec a				dec 	a
.b323		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b326		60		rts				rts
.b327						StringTempAllocate:
.b327		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b329		b0 30		bcs $b35b			bcs 	_STALength
.b32b		2c 90 02	bit $0290			bit 	stringInitialised 			; already initialised
.b32e		30 05		bmi $b335			bmi 	_STAAllocate
.b330		48		pha				pha 								; save value to subtract.
.b331		20 11 b3	jsr $b311			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b334		68		pla				pla 								; restore it
.b335						_STAAllocate:
.b335		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b337		18		clc				clc  								; deliberate allows one more
.b338		6d 91 02	adc $0291			adc 	stringTempPointer 			; subtract from temp pointer
.b33b		8d 91 02	sta $0291			sta 	stringTempPointer
.b33e		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b340		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b342		ad 92 02	lda $0292			lda 	stringTempPointer+1
.b345		69 ff		adc #$ff			adc 	#$FF
.b347		8d 92 02	sta $0292			sta 	stringTempPointer+1
.b34a		85 3d		sta $3d				sta 	zsTemp+1
.b34c		95 60		sta $60,x			sta 	NSMantissa1,x
.b34e		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b350		74 70		stz $70,x			stz 	NSMantissa3,x
.b352		a9 10		lda #$10			lda 	#NSTString
.b354		95 50		sta $50,x			sta 	NSStatus,x
.b356		a9 00		lda #$00			lda 	#0 							; clear the target string
.b358		92 3c		sta ($3c)			sta 	(zsTemp)
.b35a		60		rts				rts
.b35b						_STALength:
.b35b		a9 09		lda #$09		lda	#9
.b35d		4c 0d 92	jmp $920d		jmp	ErrorHandler
.b360						StringTempWrite:
.b360		48		pha				pha
.b361		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b363		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b365		d0 02		bne $b369			bne 	_STWNoCarry
.b367		e6 3d		inc $3d				inc 	zsTemp+1
.b369						_STWNoCarry:
.b369		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b36b		92 3c		sta ($3c)			sta 	(zsTemp)
.b36d		68		pla				pla
.b36e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b36f						Command_VERIFY:
.b36f		20 b0 a0	jsr $a0b0			jsr 	EvaluateString 				; file name to verify
.b372		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b374		a5 36		lda $36				lda 	zTemp0
.b376		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b379		b0 4b		bcs $b3c6			bcs 	_CVErrorHandler 			; error, so fail.
.b37b		8d e1 04	sta $04e1			sta 	CurrentFileStream 			; save the reading stream.
.b37e		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b381		9c e0 04	stz $04e0			stz 	LoadEOFFlag 				; clear EOF Flag.
.b384		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b386		85 30		sta $30				sta 	codePtr
.b388		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b38a		85 31		sta $31				sta 	codePtr+1
.b38c						_CVLoop:
.b38c		20 58 8b	jsr $8b58			jsr 	LoadReadLine 				; get next line.
.b38f		f0 27		beq $b3b8			beq 	_CVExit 					; end, exit.
.b391		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b394		ad ab 02	lda $02ab			lda 	tokenLineNumber 			; line number = 0
.b397		0d ac 02	ora $02ac			ora 	tokenLineNumber+1
.b39a		f0 f0		beq $b38c			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b39c		a0 00		ldy #$00			ldy 	#0 							; start compare
.b39e						_CVCompareLoop:
.b39e		b1 30		lda ($30),y			lda 	(codePtr),y
.b3a0		d9 aa 02	cmp $02aa,y			cmp 	tokenOffset,y 				; compare against actual code.
.b3a3		d0 1c		bne $b3c1			bne 	_CVCompareError
.b3a5		c8		iny				iny
.b3a6		cc aa 02	cpy $02aa			cpy 	tokenOffset 				; until done whole line of code
.b3a9		d0 f3		bne $b39e			bne 	_CVCompareLoop
.b3ab		18		clc				clc
.b3ac		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b3ae		65 30		adc $30				adc 	codePtr
.b3b0		85 30		sta $30				sta 	codePtr
.b3b2		90 02		bcc $b3b6			bcc 	_CREExit
.b3b4		e6 31		inc $31				inc 	codePtr+1 					; carry
.b3b6						_CREExit:
.b3b6		80 d4		bra $b38c			bra 	_CVLoop
.b3b8						_CVExit:
.b3b8		ad e1 04	lda $04e1			lda 	CurrentFileStream
.b3bb		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b3be		4c 2d 8b	jmp $8b2d			jmp 	CLComplete
.b3c1						_CVCompareError:
.b3c1		a9 1b		lda #$1b		lda	#27
.b3c3		4c 0d 92	jmp $920d		jmp	ErrorHandler
.b3c6						_CVErrorHandler:
.b3c6		4c 4a 8b	jmp $8b4a			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b3c9						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad f5 04	lda $04f5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c f4 04	sty $04f4			sty 	EXTColumn
.c02d	a02d	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee f3 04	inc $04f3			inc 	EXTRow  					; bump row
.c035	a035	9c f4 04	stz $04f4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad f3 04	lda $04f3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd f7 04	cmp $04f7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce f4 04	dec $04f4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c f4 04	stz $04f4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce f3 04	dec $04f3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad f3 04	lda $04f3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce f3 04	dec $04f3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed f6 04	sbc $04f6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c f4 04	sty $04f4			sty 	EXTColumn
.c08c	a08c	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c f4 04	sty $04f4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad f7 04	lda $04f7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd f3 04	cmp $04f3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee f3 04	inc $04f3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d f6 04	adc $04f6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad f4 04	lda $04f4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d f4 04	sta $04f4			sta 	EXTColumn
.c0c9	a0c9	cd f6 04	cmp $04f6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce f4 04	dec $04f4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d f5 04	and $04f5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d f5 04	sta $04f5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d f5 04	ora $04f5			ora 	EXTTextColour
.c13c	a13c	8d f5 04	sta $04f5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad f5 04	lda $04f5			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad f5 04	lda $04f5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c f3 04	stz $04f3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c f4 04	stz $04f4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad f4 04	lda $04f4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad f3 04	lda $04f3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad f4 04	lda $04f4			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 aa 03	sta $03aa,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac f4 04	ldy $04f4			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc f6 04	cpy $04f6			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc f4 04	cpy $04f4			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad f6 04	lda $04f6			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac f6 04	ldy $04f6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.04f3						EXTRow:
>04f3								.fill 	1
.04f4						EXTColumn:
>04f4								.fill 	1
.04f5						EXTTextColour:
>04f5								.fill 	1
.04f6						EXTScreenWidth:
>04f6								.fill 	1
.04f7						EXTScreenHeight:
>04f7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d f5 04	sta $04f5			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d f6 04	sta $04f6			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d f7 04	sta $04f7			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad f3 04	lda $04f3			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$4a7						gxPixelBuffer = numberBuffer
.04f8						gxCurrentX:
>04f8								.fill 	2
.04fa						gxCurrentY:
>04fa								.fill 	2
.04fc						gxLastX:
>04fc								.fill 	2
.04fe						gxLastY:
>04fe								.fill 	2
.0500						gxX0:
>0500								.fill 	2
.0502						gxY0:
>0502								.fill 	2
.0504						gxX1:
>0504								.fill 	2
.0506						gxY1:
>0506								.fill 	2
.0508						gxSpritesOn:
>0508								.fill 	1
.0509						gxBitmapsOn:
>0509								.fill 	1
.050a						gxBasePage:
>050a								.fill 	1
.050b						gxSpritePage:
>050b								.fill 	1
.050c						gxHeight:
>050c								.fill 	1
.050d						gxMode:
>050d								.fill 	1
.050e						gxColour:
>050e								.fill 	1
.050f						gxEORValue:
>050f								.fill 	1
.0510						gxANDValue:
>0510								.fill 	1
.0511						gxOriginalLUTValue:
>0511								.fill 	1
.0512						gxOffset:
>0512								.fill 	1
.0513						GSCurrentSpriteID:
>0513								.fill 	1
.0514						GSCurrentSpriteAddr:
>0514								.fill 	2
.0516						gxSpriteOffsetBase:
>0516								.fill 	2
.0518						gxSpriteLow:
>0518								.fill 	64
.0558						gxSpriteHigh:
>0558								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d fc 04	sta $04fc,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d fa 04	sta $04fa			sta 	gxCurrentY
.c7e7	a7e7	9c fb 04	stz $04fb			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d f8 04	sta $04f8			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d f9 04	sta $04f9			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad f9 04	lda $04f9			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad f8 04	lda $04f8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad fa 04	lda $04fa			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 0c 05	cmp $050c			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd f8 04	lda $04f8,x			lda 	gxCurrentX,x
.c819	a819	9d 00 05	sta $0500,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 9b 05	sta $059b			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 09 05	lda $0509			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 9c 05	stz $059c			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 99 05	lda $0599			lda 	gxxCentre					; while x <= y
.c848	a848	cd 9a 05	cmp $059a			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 9a 05	lda $059a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 99 05	lda $0599			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 9a 05	ldx $059a			ldx	 	gxYCentre
.c875	a875	8d 9a 05	sta $059a			sta 	gxYCentre
.c878	a878	8e 99 05	stx $0599			stx 	gxxCentre
.c87b	a87b	ad 9c 05	lda $059c			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 9c 05	sta $059c			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 9b 05	lda $059b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 9c 05	lda $059c			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 9a 05	lda $059a			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 99 05	lda $0599			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 9b 05	lda $059b			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8bc	a8bc	8d 9a 05	sta $059a			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 04 05	lda $0504,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 00 05	sta $0500,x			sta 	gxX0,x
.c8d3	a8d3	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 01 05	sta $0501,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 9c 05	stz $059c			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 99 05	inc $0599			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 99 05	lda $0599			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 99 05	inc $0599			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 9a 05	dec $059a			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 99 05	lda $0599			lda 	gxxCentre
.c8fc	a8fc	ed 9a 05	sbc $059a			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 9c 05	dec $059c			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 06 05	lda $0506			lda 	gxY1
.c935	a935	ed 02 05	sbc $0502			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 98 05	sta $0598			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 99 05	stz $0599			stz 	gxxCentre
.c949	a949	ad 98 05	lda $0598			lda 	gxRadius
.c94c	a94c	8d 9a 05	sta $059a			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 04 05	lda $0504,x			lda 	gxX1,x
.c964	a964	7d 00 05	adc $0500,x			adc 	gxX0,x
.c967	a967	9d 04 05	sta $0504,x			sta 	gxX1,x
.c96a	a96a	bd 05 05	lda $0505,x			lda 	gxX1+1,x
.c96d	a96d	7d 01 05	adc $0501,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 05 05	sta $0505,x			sta 	gxX1+1,x
.c974	a974	7e 04 05	ror $0504,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0598						gxRadius:
>0598								.fill 	1
.0599						gxxCentre:
>0599								.fill 	1
.059a						gxYCentre:
>059a								.fill 	1
.059b						gxIsFillMode:
>059b								.fill 	1
.059c						gxYChanged:
>059c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 0c 05	lda $050c			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 0a 05	adc $050a			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 0a 05	cmp $050a			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 08 05	stz $0508			stz 	gxSpritesOn
.c9d1	a9d1	9c 09 05	stz $0509			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e f8 04	stz $04f8,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 09 05	sta $0509			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 0a 05	sta $050a			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 0c 05	stx $050c			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 08 05	sta $0508			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 0b 05	sta $050b			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 16 05	sta $0516			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 17 05	sta $0517			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 15 05	stz $0515			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 58 05	stz $0558,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 09 05	lda $0509			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 12 05	ldy $0512			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 10 05	and $0510			and 	gxANDValue
.ca9e	aa9e	4d 0f 05	eor $050f			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 00 05	lda $0500			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 04 05	eor $0504			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 01 05	lda $0501			lda 	gxX0+1
.cac4	aac4	4d 05 05	eor $0505			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 06 05	lda $0506			lda 	gxY1
.cacb	aacb	4d 02 05	eor $0502			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad a1 05	lda $05a1			lda 	gxPosition
.cad3	aad3	6d a2 05	adc $05a2			adc 	gxAdjust
.cad6	aad6	8d a1 05	sta $05a1			sta 	gxPosition
.cad9	aad9	9c a4 05	stz $05a4			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd a3 05	cmp $05a3			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce a4 05	dec $05a4			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed a3 05	sbc $05a3			sbc 	gxTotal
.caea	aaea	8d a1 05	sta $05a1			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 9f 05	lda $059f			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad a4 05	lda $05a4			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad a4 05	lda $05a4			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad a0 05	lda $05a0			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 00 05	lda $0500			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 01 05	dec $0501			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 00 05	dec $0500			dec 	gxX0
.cb1b	ab1b	ce 12 05	dec $0512			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 12 05	lda $0512			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 00 05	inc $0500			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 01 05	inc $0501			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 12 05	inc $0512			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 02 05	inc $0502			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 06 05	lda $0506			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 02 05	sbc $0502			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 9e 05	sta $059e			sta 	gxDiffY
.cb63	ab63	9c a0 05	stz $05a0			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 04 05	lda $0504			lda 	gxX1
.cb6a	ab6a	ed 00 05	sbc $0500			sbc 	gxX0
.cb6d	ab6d	8d 9d 05	sta $059d			sta 	gxDiffX
.cb70	ab70	ad 05 05	lda $0505			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 01 05	sbc $0501			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 9d 05	ror $059d			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 9d 05	sbc $059d			sbc 	gxDiffX
.cb83	ab83	8d 9d 05	sta $059d			sta 	gxDiffX
.cb86	ab86	ce a0 05	dec $05a0			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 9f 05	stz $059f			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 9e 05	lda $059e			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d a2 05	sta $05a2			sta 	gxAdjust
.cb92	ab92	ad 9d 05	lda $059d			lda 	gxDiffX
.cb95	ab95	8d a3 05	sta $05a3			sta 	gxTotal
.cb98	ab98	ad 9e 05	lda $059e			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 9d 05	cmp $059d			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 9f 05	dec $059f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 9d 05	lda $059d			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d a2 05	sta $05a2			sta 	gxAdjust
.cba9	aba9	ad 9e 05	lda $059e			lda 	gxDiffY
.cbac	abac	8d a3 05	sta $05a3			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad a3 05	lda $05a3			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d a1 05	sta $05a1			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.059d						gxDiffX:
>059d								.fill 	1
.059e						gxDiffY:
>059e								.fill 	1
.059f						gxIsDiffYLarger:
>059f								.fill 	1
.05a0						gxDXNegative:
>05a0								.fill 	1
.05a1						gxPosition:
>05a1								.fill 	1
.05a2						gxAdjust:
>05a2								.fill 	1
.05a3						gxTotal:
>05a3								.fill 	1
.05a4						gxAddSelect:
>05a4								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 0e 05	stx $050e			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 0d 05	sta $050d			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 10 05	stz $0510			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 0e 05	ldx $050e			ldx 	gxColour
.cbc9	abc9	8e 0f 05	stx $050f			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 10 05	stx $0510			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 0f 05	stz $050f			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 10 05	lda $0510			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 10 05	sta $0510			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 12 05	ldy $0512			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 10 05	and $0510			and 	gxANDValue
.cbf3	abf3	4d 0f 05	eor $050f			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 09 05	lda $0509			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 02 05	lda $0502			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 06 05	cmp $0506			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 02 05	inc $0502			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 02 05	lda $0502			lda 	gxY0 						; reached last line
.cc25	ac25	cd 06 05	cmp $0506			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 04 05	lda $0504			lda		gxX1
.cc42	ac42	ed 00 05	sbc $0500			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 05 05	lda $0505			lda 	gxX1+1
.cc4a	ac4a	ed 01 05	sbc $0501			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 12 05	lda $0512			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 10 05	and $0510			and 	gxANDValue
.cc67	ac67	4d 0f 05	eor $050f			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 10 05	and $0510			and 	gxANDValue
.cc85	ac85	4d 0f 05	eor $050f			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 10 05	and $0510			and 	gxANDValue
.cc9d	ac9d	4d 0f 05	eor $050f			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 12 05	sta $0512			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d a5 05	sta $05a5			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d a6 05	sta $05a6			sta 	gxMask 						; and mask
.ccc4	acc4	ad 09 05	lda $0509			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 02 05	lda $0502			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c a8 05	sty $05a8			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e a7 05	stx $05a7			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad aa 05	lda $05aa			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d a9 05	sta $05a9			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c aa 05	bit $05aa			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad a6 05	lda $05a6			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad a9 05	lda $05a9			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 02 05	lda $0502			lda 	gxY0 						; off screen
.ccfd	acfd	cd 0c 05	cmp $050c			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd a5 05	cmp $05a5			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 02 05	sta $0502			sta 	gxY0
.cd16	ad16	ae a9 05	ldx $05a9			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad a5 05	lda $05a5			lda 	gxSize
.cd1d	ad1d	6d 00 05	adc $0500			adc 	gxX0
.cd20	ad20	8d 00 05	sta $0500			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 01 05	inc $0501			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c a7 05	jmp ($05a7)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 12 05	ldy $0512			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad a9 05	lda $05a9			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 0d 05	bit $050d			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad a6 05	lda $05a6			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd a7 04	lda $04a7,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad aa 05	lda $05aa			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 10 05	and $0510			and 	gxANDValue
.cd61	ad61	5d a7 04	eor $04a7,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd a5 05	cmp $05a5			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 02 05	inc $0502			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.05a5						gxSize:
>05a5								.fill 	1
.05a6						gxMask:
>05a6								.fill 	1
.05a7						gxAcquireVector:
>05a7								.fill 	2
.05a9						gxScale:
>05a9								.fill 	1
.05aa						gxUseMode:
>05aa								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 0d 05	eor $050d			eor 	gxMode
.cd84	ad84	8d aa 05	sta $05aa			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e a7 04	stz $04a7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 0e 05	lda $050e			lda 	gxColour
.cdbd	adbd	9d a7 04	sta $04a7,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 08 05	lda $0508			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 0d 05	eor $050d			eor 	gxMode
.cdd1	add1	8d aa 05	sta $05aa			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad ab 05	lda $05ab			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 0b 05	lda $050b			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae ac 05	ldx $05ac			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d ae 05	adc $05ae			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d af 05	adc $05af			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 a7 04	sta $04a7,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc ab 05	cpy $05ab			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 13 05	sta $0513			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 15 05	sta $0515			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 14 05	sta $0514			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 08 05	lda $0508			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad ae 05	lda $05ae			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad af 05	lda $05af			lda 	gxSpriteOffset+1
.ce92	ae92	6d 16 05	adc $0516			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 17 05	lda $0517			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d ad 05	ora $05ad			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad ac 05	lda $05ac			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 58 05	ora $0558,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 08 05	lda $0508			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 15 05	lda $0515			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 14 05	lda $0514			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 00 05	adc $0500			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 01 05	lda $0501			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 02 05	adc $0502			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 01 05	lsr $0501			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 00 05	ror $0500			ror 	gxX0
.cf3d	af3d	4e 00 05	lsr $0500			lsr 	gxX0
.cf40	af40	4e 02 05	lsr $0502			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 02 05	lsr $0502			lsr 	gxY0
.cf46	af46	ae 13 05	ldx $0513			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 18 05	lda $0518,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 00 05	ora $0500			ora 	gxX0
.cf51	af51	9d 18 05	sta $0518,x			sta 	gxSpriteLow,x
.cf54	af54	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 02 05	ora $0502			ora 	gxY0
.cf5c	af5c	9d 58 05	sta $0558,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 11 05	sta $0511			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 11 05	lda $0511			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 02 05	lda $0502			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 00 05	lda $0500			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 12 05	sta $0512			sta 	gxOffset
.cfae	afae	ad 01 05	lda $0501			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 0a 05	adc $050a			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 12 05	lda $0512			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 12 05	sta $0512			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 18 05	ora $0518,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y
.d000	b000	7d 58 05	adc $0558,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 58 05	lda $0558,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 58 05	lda $0558,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 18 05	lda $0518,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 18 05	sbc $0518,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 0b 05	lda $050b			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d af 05	sta $05af			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d ac 05	sta $05ac			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d ab 05	sta $05ab			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d ad 05	sta $05ad			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d ae 05	sta $05ae			sta 	gxSpriteOffset
.d07b	b07b	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d07e	b07e	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d081	b081	0e ae 05	asl $05ae			asl 	gxSpriteOffset
.d084	b084	2e af 05	rol $05af			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.05ab						gxSizePixels:
>05ab								.fill 	1
.05ac						gxSizeBits:
>05ac								.fill 	1
.05ad						gxSpriteLUT:
>05ad								.fill 	1
.05ae						gxSpriteOffset:
>05ae								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 00 05	lda $0500			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 04 05	cmp $0504			cmp 	gxX1
.d098	b098	ad 01 05	lda $0501			lda 	gxX0+1
.d09b	b09b	ed 05 05	sbc $0505			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 02 05	lda $0502			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 06 05	cmp $0506			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 00 05	lda $0500,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 00 05	lda $0500,y			lda 	gxX0,y
.d0c8	b0c8	9d 00 05	sta $0500,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 00 05	sta $0500,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 9d 02	stz $029d			stz 	tbOffset
.d535	b535	9c ad 02	stz $02ad			stz 	tokenBuffer
.d538	b538	9c a9 02	stz $02a9			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d a6 02	adc $02a6			adc 	listIndent
.d553	b553	8d a6 02	sta $02a6			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c a6 02	stz $02a6			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad a6 02	lda $02a6			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 9d 02	lda $029d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d a6 02	adc $02a6			adc 	listIndent
.d59b	b59b	8d a6 02	sta $02a6			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 c8		adc #$c8			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad f5 04	lda $04f5			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd a9 02	cmp $02a9			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d a9 02	sta $02a9			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 9d 02	ldx $029d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d ad 02	sta $02ad,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e ae 02	stz $02ae,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 9d 02	inc $029d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d a7 02	sta $02a7			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 9d 02	ldx $029d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd ac 02	lda $02ac,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 9d 02	dec $029d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad a7 02	lda $02a7			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 9d 02	lda $029d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 83 02	cmp $0283			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 82 02	lda $0282			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 80 02	sbc $0280			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 80 02	ldx $0280			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d aa 02	sta $02aa			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c ab 02	stz $02ab			stz 	tokenLineNumber
.d7d0	b7d0	9c ac 02	stz $02ac			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd ab 03	lda $03ab,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d ab 03	adc $03ab,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 80 02	stx $0280			stx 	identStart 					; save start
.d864	b864	9c 84 02	stz $0284			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd aa 03	lda $03aa,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 81 02	stx $0281			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 84 02	sty $0284			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 84 02	lda $0284			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 84 02	sta $0284			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 82 02	stx $0282			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 82 02	ldx $0282			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d aa 03	sta $03aa,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 aa 03	lda $03aa,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 80 02	ldx $0280			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d aa 03	adc $03aa,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 83 02	sta $0283			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d a9 03	sta $03a9,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad ac 02	lda $02ac			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad ab 02	lda $02ab			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9cf	b9cf	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d ac 02	adc $02ac			adc 	tokenLineNumber+1
.d9d6	b9d6	8d ac 02	sta $02ac			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d ab 02	adc $02ab			adc 	tokenLineNumber
.d9e6	b9e6	8d ab 02	sta $02ab			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee ac 02	inc $02ac			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e ab 02	asl $02ab			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e ac 02	rol $02ac			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae aa 02	ldx $02aa			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d aa 02	sta $02aa,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee aa 02	inc $02aa			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 08		lda #$08			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 83 02	cmp $0283			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 80 02	ldx $0280			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd aa 03	lda $03aa,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 82 02	cpx $0282			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 83 02	lda $0283			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 84 02	lda $0284			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 80 02	ldx $0280			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd aa 03	lda $03aa,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 82 02	cpx $0282			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 08		sbc #$08			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd b3 05	lda $05b3,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 b2 06	sta $06b2,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd b4 05	lda $05b4,x			lda 	SNDQueue+2,x
.daa1	baa1	99 b6 06	sta $06b6,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd b5 05	lda $05b5,x			lda 	SNDQueue+3,x
.daa7	baa7	99 ba 06	sta $06ba,y			sta 	SNDVolume,y
.daaa	baaa	bd b6 05	lda $05b6,x			lda 	SNDQueue+4,x
.daad	baad	99 be 06	sta $06be,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd b7 05	lda $05b7,x			lda 	SNDQueue+5,x
.dab3	bab3	99 c2 06	sta $06c2,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd b8 05	lda $05b8,x			lda 	SNDQueue+6,x
.dab9	bab9	99 c6 06	sta $06c6,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce b1 05	dec $05b1			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d b0 05	sta $05b0			sta 	SNDChannelBits
.dad1	bad1	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d b0 05	ora $05b0			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d b0 05	sta $05b0			sta 	SNDChannelBits
.daed	baed	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.daf0	baf0	4e b0 05	lsr $05b0			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e b0 05	lsr $05b0			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad b0 05	lda $05b0			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac b1 05	ldy $05b1			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd b2 05	cmp $05b2,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd ba 05	lda $05ba,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.05b0						SNDChannelBits:
>05b0								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae b1 05	ldx $05b1			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d b2 05	sta $05b2,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d b2 05	sta $05b2,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee b1 05	inc $05b1			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e be 06	stz $06be,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd be 06	lda $06be,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c b1 05	stz $05b1			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.05b1						SNDLength:
>05b1								.fill 	1
.05b2						SNDQueue:
>05b2								.fill 	SNDQueueSize * 8
.06b2						SNDPitchLow:
>06b2								.fill 	4
.06b6						SNDPitchHigh:
>06b6								.fill 	4
.06ba						SNDVolume:
>06ba								.fill 	4
.06be						SNDTimeLeft:
>06be								.fill 	4
.06c2						SNDAdjustLow:
>06c2								.fill 	4
.06c6						SNDAdjustHigh:
>06c6								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad be 06	lda $06be			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad bf 06	lda $06bf			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad c0 06	lda $06c0			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad c1 06	lda $06c1			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d be 06	sta $06be,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd c2 06	lda $06c2,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d c6 06	ora $06c6,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd b2 06	lda $06b2,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d c2 06	adc $06c2,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d b2 06	sta $06b2,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd b6 06	lda $06b6,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d c6 06	adc $06c6,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d b6 06	sta $06b6,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd e2 04	cmp $04e2			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d e2 04	sta $04e2			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 ca		lda #$ca			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 06		lda #$06			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad ca 06	lda $06ca			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad cf 06	lda $06cf			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.06ca						event
>06ca						type        .byte   ?   ; Enum above
>06cb						buf         .byte   ?   ; page id or zero
>06cc						ext         .byte   ?   ; page id or zero
.06cd						key
>06cd						keyboard    .byte   ?   ; Keyboard ID
>06ce						raw         .byte   ?   ; Raw key ID
>06cf						ascii       .byte   ?   ; ASCII value
>06d0						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.06cd						mouse
.06cd						delta
>06cd						x           .byte   ?
>06ce						y           .byte   ?
>06cf						z           .byte   ?
>06d0						buttons     .byte   ?
.06cd						clicks
>06cd						inner       .byte   ?
>06ce						middle      .byte   ?
>06cf						outer       .byte   ?
.06cd						joystick
>06cd						joy0        .byte   ?
>06ce						joy1        .byte   ?
.06cd						udp
>06cd						token       .byte   ?   ; TODO: break out into fields
.06cd						file
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						data
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						read        .byte   ?   ; Number of bytes actually read
.06cf						wrote
>06cf						requested   .byte   ?   ; Requested number of bytes to read
>06d0						wrote       .byte   ?   ; Number of bytes actually read
.06cd						directory
>06cd						stream      .byte   ?
>06ce						cookie      .byte   ?
.06cf						volume
>06cf						len         .byte   ?   ; Length of volname (in buf)
>06d0						flags       .byte   ?   ; block size, text encoding
.06cf						file
>06cf						len         .byte   ?
>06d0						flags       .byte   ?   ; block scale, text encoding, approx size
.06cf						free
>06cf						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 ca		lda #$ca			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 06		lda #$06			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad df 04	lda $04df			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad ca 06	lda $06ca			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad cd 06	lda $06cd			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.06d1						KNLStream:
>06d1								.byte   ?
.06d2						KNLReadBuffer:
>06d2								.fill   KNLReadBufferLen
.0712						KNLNext:
>0712								.byte   ?
.0713						KNLEnd:
>0713								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d d1 06	sta $06d1			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 12 07	stz $0712			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 13 07	stz $0713			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 12 07	ldx $0712			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 13 07	cpx $0713			cpx     KNLEnd
.dcc2	bcc2	d0 10		bne $bcd4			bne     _KNLRBGetNextByte
.dcc4	bcc4	ad d1 06	lda $06d1			lda     KNLStream
.dcc7	bcc7	20 dd bc	jsr $bcdd			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcca	bcca	b0 0f		bcs $bcdb			bcs     _KNLRBError 				; error has occurred on read.
.dccc	bccc	8d 13 07	sta $0713			sta     KNLEnd 						; # read is the number available
.dccf	bccf	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcd1	bcd1	8e 12 07	stx $0712			stx     KNLNext
.dcd4	bcd4					_KNLRBGetNextByte:
.dcd4	bcd4	bd d2 06	lda $06d2,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd7	bcd7	ee 12 07	inc $0712			inc     KNLNext 					; and advance the index
.dcda	bcda	18		clc				clc 								; succeeded
.dcdb	bcdb					_KNLRBError:
.dcdb	bcdb	fa		plx				plx
.dcdc	bcdc	60		rts				rts
.dcdd	bcdd					Export_KNLReadBlock:
.dcdd	bcdd					KNLRBGetNextBlock:
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 			; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad ca 06	lda $06ca			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 d2		lda #$d2			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 06		lda #$06			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad d0 06	lda $06d0			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad d0 06	lda $06d0			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad ca 06	lda $06ca			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad d0 06	lda $06d0			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
