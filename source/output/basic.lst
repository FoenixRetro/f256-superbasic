
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Oct 10 13:07:47 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 1e 94	jsr $941e			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 b9 85	jsr $85b9			jsr 	RunDemos
.8013	20 01 8e	jsr $8e01			jsr 	NewCommand 					; erase current program
.8016	20 a3 a0	jsr $a0a3			jsr 	BackloadProgram
.8019	4c 5d 89	jmp $895d			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1240."
>8064	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 32 34 30 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 af 86	jsr $86af			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 20 86	jsr $8620			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 31 86	jsr $8631			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 3e 86	jsr $863e			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 20 86	jsr $8620			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 31 86	jsr $8631			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 20 86	jsr $8620			jsr 	GXOpenBitmap
.8216	20 cd 86	jsr $86cd			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 3e 86	jsr $863e			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 31 86	jsr $8631			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.82ad	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3d		sta $3d				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.82ca	a5 3d		lda $3d				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3d		sta $3d				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 94 86	jsr $8694			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 20 86	jsr $8620			jsr 	GXOpenBitmap 				; start drawing
.8345	20 af 86	jsr $86af			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 3e 86	jsr $863e			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 94 86	jsr $8694			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 31 86	jsr $8631			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3d		lda $3d				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3d		lda $3d				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3d		sta $3d				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap 			; fix up.
.83d0	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3d		sta $3d				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3c		sta $3c				sta 	gsTemp
.83e7	60		rts				rts
.83e8					GXDLTCheckWrap:
.83e8	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3d		sta $3d				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
.83f5	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.83f8	3a		dec a				dec 	a
.83f9	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.83fc	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.83ff	48		pha				pha
.8400	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.8403	9c 55 06	stz $0655			stz 	gxHFlip
.8406	2c 56 06	bit $0656			bit 	gxUseMode
.8409	10 03		bpl $840e			bpl 	_GXNotVertical
.840b	8d 54 06	sta $0654			sta 	gxVFlip
.840e					_GXNotVertical:
.840e	50 03		bvc $8413			bvc 	_GXNotHorizontal
.8410	8d 55 06	sta $0655			sta 	gxHFlip
.8413					_GXNotHorizontal:
.8413	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8416	8e 51 06	stx $0651			stx 	gxAcquireVector
.8419	20 20 86	jsr $8620			jsr 	gxOpenBitmap 				; open the bitmap.
.841c	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.841f	4a		lsr a				lsr 	a
.8420	4a		lsr a				lsr 	a
.8421	4a		lsr a				lsr 	a
.8422	29 07		and #$07			and		#7
.8424	1a		inc a				inc 	a
.8425	8d 53 06	sta $0653			sta 	gxScale
.8428	64 38		stz $38				stz 	gzTemp1						; start first line
.842a					_GXGELoop:
.842a	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.842c	4d 54 06	eor $0654			eor 	gxVFlip
.842f	aa		tax				tax 								; get the Xth line.
.8430	20 6d 84	jsr $846d			jsr 	_GXCallAcquire 				; get that data.
.8433	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8436	85 39		sta $39				sta 	gzTemp1+1
.8438					_GXGELoop2:
.8438	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.843b	cd 3a 06	cmp $063a			cmp 	gxHeight
.843e	b0 10		bcs $8450			bcs 	_GXDGEExit
.8440	20 70 84	jsr $8470			jsr 	GXRenderOneLine 			; render line
.8443	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8445	d0 f1		bne $8438			bne 	_GXGELoop2
.8447	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8449	a5 38		lda $38				lda 	gzTemp1
.844b	cd 4f 06	cmp $064f			cmp 	gxSize
.844e	d0 da		bne $842a			bne 	_GXGELoop
.8450					_GXDGEExit:
.8450	68		pla				pla 								; restore Y for next time
.8451	8d 33 06	sta $0633			sta 	gxY0
.8454	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.8457					_GXShiftLeft:
.8457	18		clc				clc
.8458	ad 4f 06	lda $064f			lda 	gxSize
.845b	6d 31 06	adc $0631			adc 	gxX0
.845e	8d 31 06	sta $0631			sta 	gxX0
.8461	90 03		bcc $8466			bcc 	_GXSLNoCarry
.8463	ee 32 06	inc $0632			inc 	gxX0+1
.8466					_GXSLNoCarry:
.8466	ca		dex				dex
.8467	d0 ee		bne $8457			bne 	_GXShiftLeft
.8469	20 31 86	jsr $8631			jsr 	GXCloseBitmap
.846c	60		rts				rts
.846d					_GXCallAcquire:
.846d	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8470					GXRenderOneLine:
.8470	20 3e 86	jsr $863e			jsr 	GXPositionCalc 				; calculate position/offset.
.8473	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8476	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.8478					_GXROLLoop1:
.8478	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.847b	85 3b		sta $3b				sta 	gzTemp2+1
.847d					_GXROLLoop2:
.847d	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.847f	4d 55 06	eor $0655			eor 	gxHFlip
.8482	aa		tax				tax 								; read from the pixel buffer
.8483	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8486	f0 0a		beq $8492			beq 	_GXZeroPixel 				; don't draw if zero.
.8488	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.848a	2d 3e 06	and $063e			and 	gxANDValue
.848d	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8490	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8492					_GXZeroPixel:
.8492	c8		iny				iny 								; advance pointer
.8493	d0 05		bne $849a			bne 	_GXNoShift
.8495	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8497	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.849a					_GXNoShift:
.849a	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.849c	d0 df		bne $847d			bne 	_GXROLLoop2
.849e	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.84a0	a5 3a		lda $3a				lda 	gzTemp2
.84a2	cd 4f 06	cmp $064f			cmp 	gxSize
.84a5	d0 d1		bne $8478			bne 	_GXROLLoop1
.84a7	ee 33 06	inc $0633			inc 	gxY0
.84aa	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.84ab					GXFontHandler:
.84ab	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.84ad	4d 3b 06	eor $063b			eor 	gxMode
.84b0	8d 56 06	sta $0656			sta 	gxUseMode
.84b3	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.84b5	06 36		asl $36				asl	 	gzTemp0 					; x 2
.84b7	26 37		rol $37				rol	 	gzTemp0+1
.84b9	06 36		asl $36				asl	 	gzTemp0 					; x 4
.84bb	26 37		rol $37				rol	 	gzTemp0+1
.84bd	06 36		asl $36				asl	 	gzTemp0 					; x 8
.84bf	26 37		rol $37				rol	 	gzTemp0+1
.84c1	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.84c3	09 c0		ora #$c0			ora 	#$C0
.84c5	85 37		sta $37				sta 	gzTemp0+1
.84c7	a9 08		lda #$08			lda 	#8 							; size 8x8
.84c9	a2 d1		ldx #$d1			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.84cb	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.84cd	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84d0	60		rts				rts
.84d1					GXGetGraphicDataFont:
.84d1	8a		txa				txa 								; X->Y
.84d2	a8		tay				tay
.84d3	a6 01		ldx $01				ldx 	1 							; preserve old value
.84d5	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.84d7	85 01		sta $01				sta 	1
.84d9	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.84db	86 01		stx $01				stx 	1 							; put old value back.
.84dd	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.84df					_GXExpand:
.84df	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.84e2	0a		asl a				asl 	a 							; shift bit 7 into C
.84e3	90 08		bcc $84ed			bcc 	_GXNoPixel
.84e5	48		pha				pha 								; if set, set pixel buffer to current colour.
.84e6	ad 3c 06	lda $063c			lda 	gxColour
.84e9	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.84ec	68		pla				pla
.84ed					_GXNoPixel:
.84ed	e8		inx				inx 								; do the whole byte.
.84ee	e0 08		cpx #$08			cpx 	#8
.84f0	d0 ed		bne $84df			bne 	_GXExpand
.84f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/sprite.asm

.84f3					GXSpriteHandler:
.84f3	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.84f5	4d 3b 06	eor $063b			eor 	gxMode
.84f8	8d 56 06	sta $0656			sta 	gxUseMode
.84fb	a9 18		lda #$18			lda 	#GXSpritePage
.84fd	8d 57 06	sta $0657			sta 	GXspriteBasePage
.8500	a9 08		lda #$08			lda 	#8
.8502	a2 0a		ldx #$0a			ldx 	#GXSpriteAcquire & $FF
.8504	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.8506	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.8509	60		rts				rts
.850a					GXSpriteAcquire:
.850a	ad 57 06	lda $0657			lda 	GXspriteBasePage
.850d	85 0b		sta $0b				sta 	GFXEditSlot
.850f	a0 00		ldy #$00			ldy 	#0
.8511	8a		txa				txa
.8512	0a		asl a				asl 	a
.8513	0a		asl a				asl 	a
.8514	0a		asl a				asl 	a
.8515	aa		tax				tax
.8516					_GXSALoop:
.8516	bd 00 62	lda $6200,x			lda 	GXMappingAddress+$200,x
.8519	e8		inx				inx
.851a	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.851d	c8		iny				iny
.851e	c0 08		cpy #$08			cpy 	#8
.8520	d0 f4		bne $8516			bne 	_GXSALoop
.8522	60		rts				rts
.0657					GXspriteBasePage:
>0657							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.8523					GraphicDraw:
.8523	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8525	b0 06		bcs $852d			bcs 	_GDCoordinate
.8527	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.8529	84 37		sty $37				sty 	gzTemp0+1
.852b	80 2c		bra $8559			bra 	_GDExecuteA 				; and execute
.852d					_GDCoordinate:
.852d	48		pha				pha 								; save AXY
.852e	da		phx				phx
.852f	5a		phy				phy
.8530	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8532					_GDCopy1:
.8532	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8535	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8538	ca		dex				dex
.8539	10 f7		bpl $8532			bpl 	_GDCopy1
.853b	68		pla				pla 								; update Y
.853c	8d 2b 06	sta $062b			sta 	gxCurrentY
.853f	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8542	68		pla				pla
.8543	8d 29 06	sta $0629			sta 	gxCurrentX
.8546	68		pla				pla 								; get A (command+X.1) back
.8547	48		pha				pha
.8548	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.854a	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.854d	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.854f					_GDCopy2:
.854f	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8552	9d 31 06	sta $0631,x			sta 	gxX0,x
.8555	ca		dex				dex
.8556	10 f7		bpl $854f			bpl 	_GDCopy2
.8558	68		pla				pla 								; get command back
.8559					_GDExecuteA:
.8559	29 fe		and #$fe			and 	#$FE 						; lose LSB
.855b	aa		tax				tax
.855c	7c 60 85	jmp ($8560,x)			jmp 	(GDVectors,x)
.855f					GXMove:
.855f	60		rts				rts
.8560					GDVectors:
>8560							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>8564	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>8566	8c 85						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>8568	ab 84						.word 	GXFontHandler 				; $04 		; Draw from font
>856a	f3 84						.word 	GXSpriteHandler 			; $05 		; Draw from sprite
>856c							.fill 	10*2 						; $06-$0F 	: Reserved
>8580	5f 85						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8582	13 82						.word 	GXLine 						; $11 		: Draw line
>8584	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8586	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8588	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>858a	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.858c					GXSetColourMode:
.858c	a6 36		ldx $36				ldx 	gzTemp0
.858e	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.8591	a5 37		lda $37				lda 	gzTemp0+1 								;
.8593	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.8596	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8598	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.859b	ae 3c 06	ldx $063c			ldx 	gxColour
.859e	8e 3d 06	stx $063d			stx 	gxEORValue
.85a1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.85a3	90 03		bcc $85a8			bcc 	_GXSDCNotAndColour
.85a5	8e 3e 06	stx $063e			stx 	gxANDValue
.85a8					_GXSDCNotAndColour:
.85a8	d0 03		bne $85ad			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.85aa	9c 3d 06	stz $063d			stz 	gxEORValue
.85ad					_GXSDCNotAnd:
.85ad	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.85ae	90 08		bcc $85b8			bcc 	_GXSDCNoFlip
.85b0	ad 3e 06	lda $063e			lda	 	gxANDValue
.85b3	49 ff		eor #$ff			eor 	#$FF
.85b5	8d 3e 06	sta $063e			sta 	gxANDValue
.85b8					_GXSDCNoFlip:
.85b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.85b9					RunDemos:
.85b9	64 01		stz $01				stz 	1
.85bb	a9 0f		lda #$0f			lda 	#$0F
.85bd	8d 00 d0	sta $d000			sta 	$D000
.85c0	a9 01		lda #$01			lda 	#1
.85c2	8d 00 d1	sta $d100			sta 	$D100
.85c5	9c 01 d1	stz $d101			stz 	$D101
.85c8	9c 02 d1	stz $d102			stz 	$D102
.85cb	a9 01		lda #$01			lda 	#1
.85cd	8d 03 d1	sta $d103			sta 	$D103
.85d0	a9 08		lda #$08			lda 	#8
.85d2	8d 39 06	sta $0639			sta 	gxBasePage
.85d5	a9 f0		lda #$f0			lda 	#240
.85d7	8d 3a 06	sta $063a			sta 	gxHeight
.85da					loop:
.85da	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.85dc	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.85de	a0 00		ldy #$00			ldy 	#(0)
.85e0	20 23 85	jsr $8523			jsr 	GraphicDraw
.85e3	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.85e5	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.85e7	a0 00		ldy #$00			ldy 	#(0)
.85e9	20 23 85	jsr $8523			jsr 	GraphicDraw
.85ec	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.85ee	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.85f0	a0 28		ldy #$28			ldy 	#(40)
.85f2	20 23 85	jsr $8523			jsr 	GraphicDraw
.85f5	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.85f7	a2 00		ldx #$00			ldx 	#((0) & $FF)
.85f9	a0 00		ldy #$00			ldy 	#(0)
.85fb	20 23 85	jsr $8523			jsr 	GraphicDraw
.85fe	60		rts				rts
.85ff	20 2e 9d	jsr $9d2e	demo:	jsr 	Random32Bit
.8602	ee 3d 06	inc $063d			inc 	gxEORValue
.8605	a9 20		lda #$20			lda 	#16*2
.8607	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.860a	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.860d	20 23 85	jsr $8523			jsr 	GraphicDraw
.8610	ad 8a 04	lda $048a			lda 	RandomSeed+2
.8613	29 1c		and #$1c			and 	#$1C
.8615	a8		tay				tay
.8616	a9 0a		lda #$0a			lda 	#5*2
.8618	a2 00		ldx #$00			ldx 	#0
.861a	20 23 85	jsr $8523			jsr 	GraphicDraw
.861d	80 e0		bra $85ff			bra 	demo
.861f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.8620					GXOpenBitmap:
.8620	78		sei				sei 								; no interrupts here
.8621	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8623	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8626	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8628	85 00		sta $00				sta 	0
.862a	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.862c	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.862f	58		cli				cli
.8630	60		rts				rts
.8631					GXCloseBitmap:
.8631	78		sei				sei
.8632	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8635	85 0b		sta $0b				sta 	GFXEditSlot
.8637	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.863a	85 00		sta $00				sta 	0
.863c	58		cli				cli
.863d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.863e					GXPositionCalc:
.863e	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8640	48		pha				pha
.8641	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8644	85 3c		sta $3c				sta 	gsTemp
.8646	64 3d		stz $3d				stz 	gsTemp+1
.8648	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.864a	26 3d		rol $3d				rol 	gsTemp+1
.864c	06 3c		asl $3c				asl 	gsTemp
.864e	26 3d		rol $3d				rol 	gsTemp+1
.8650	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8651	65 3c		adc $3c				adc 	gsTemp
.8653	85 3c		sta $3c				sta 	gsTemp
.8655	90 02		bcc $8659			bcc 	_GXPCNoCarry
.8657	e6 3d		inc $3d				inc 	gsTemp+1
.8659					_GXPCNoCarry:
.8659	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.865b	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.865d	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.865f	85 36		sta $36				sta 	gzTemp0
.8661	64 3d		stz $3d				stz 	gsTemp+1
.8663	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8665					_GXPCMultiply32:
.8665	06 3c		asl $3c				asl 	gsTemp
.8667	26 3d		rol $3d				rol 	gsTemp+1
.8669	3a		dec a				dec 	a
.866a	d0 f9		bne $8665			bne 	_GXPCMultiply32
.866c	18		clc				clc
.866d	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8670	65 3c		adc $3c				adc 	gsTemp
.8672	8d 41 06	sta $0641			sta 	gsOffset
.8675	ad 32 06	lda $0632			lda 	GXX0+1
.8678	65 3d		adc $3d				adc 	gsTemp+1
.867a	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.867c	90 04		bcc $8682			bcc 	_GXPCNoOverflow
.867e	29 1f		and #$1f			and 	#$1F 						; fix it up
.8680	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8682					_GXPCNoOverflow:
.8682	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8684	85 3d		sta $3d				sta 	gsTemp+1
.8686	64 3c		stz $3c				stz 	gsTemp
.8688	18		clc				clc
.8689	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.868b	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.868e	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8690	68		pla				pla
.8691	85 36		sta $36				sta 	gzTemp0
.8693	60		rts				rts
.8694					GXMovePositionDown:
.8694	18		clc				clc 								; add 320 to offset/temp+1
.8695	ad 41 06	lda $0641			lda 	gsOffset
.8698	69 40		adc #$40			adc 	#64
.869a	8d 41 06	sta $0641			sta 	gsOffset
.869d	a5 3d		lda $3d				lda 	gsTemp+1
.869f	69 01		adc #$01			adc 	#1
.86a1	85 3d		sta $3d				sta 	gsTemp+1
.86a3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.86a5	90 07		bcc $86ae			bcc 	_GXMPDExit
.86a7	38		sec				sec  								; next page
.86a8	e9 20		sbc #$20			sbc 	#$20
.86aa	85 3d		sta $3d				sta 	gsTemp+1
.86ac	e6 0b		inc $0b				inc 	GFXEditSlot
.86ae					_GXMPDExit:
.86ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.86af					GXSortXY:
.86af	20 cd 86	jsr $86cd			jsr 	GXSortY 					; will be sorted on Y now
.86b2	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.86b5	cd 35 06	cmp $0635			cmp 	gxX1
.86b8	ad 32 06	lda $0632			lda 	gXX0+1
.86bb	ed 36 06	sbc $0636			sbc 	gXX1+1
.86be	90 0c		bcc $86cc			bcc 	_GXSXYExit 					; X0 < X1 exit
.86c0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.86c2	a0 04		ldy #$04			ldy 	#4
.86c4	20 e1 86	jsr $86e1			jsr 	GXSwapXY
.86c7	e8		inx				inx
.86c8	c8		iny				iny
.86c9	20 e1 86	jsr $86e1			jsr 	GXSwapXY
.86cc					_GXSXYExit:
.86cc	60		rts				rts
.86cd					GXSortY:
.86cd	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.86d0	cd 37 06	cmp $0637			cmp 	gxY1
.86d3	90 0b		bcc $86e0			bcc 	_GXSYSorted
.86d5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.86d7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.86d9					_GXSwap1:
.86d9	20 e1 86	jsr $86e1			jsr 	GXSwapXY
.86dc	88		dey				dey
.86dd	ca		dex				dex
.86de	10 f9		bpl $86d9			bpl 	_GXSwap1
.86e0					_GXSYSorted:
.86e0	60		rts				rts
.86e1					GXSwapXY:
.86e1	bd 31 06	lda $0631,x			lda 	gxX0,x
.86e4	48		pha				pha
.86e5	b9 31 06	lda $0631,y			lda 	gxX0,y
.86e8	9d 31 06	sta $0631,x			sta 	gxX0,x
.86eb	68		pla				pla
.86ec	99 31 06	sta $0631,y			sta 	gxX0,y
.86ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.86f0					AssembleGroup1:
.86f0	a9 ff		lda #$ff			lda 	#$FF
.86f2	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.86f5	80 02		bra $86f9			bra 	AsmGroup12
.86f7					AssembleGroup2:
.86f7	a5 00		lda $00				lda 	$00
.86f9					AsmGroup12:
.86f9	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.86fc	68		pla				pla 								; pop the return address to access the information following.
.86fd	fa		plx				plx
.86fe	20 87 87	jsr $8787			jsr 	AccessParameters 			; get opcode and save as base
.8701	8d a4 04	sta $04a4			sta 	BaseOpcode
.8704	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8707	d0 08		bne $8711			bne 	_AG12HaveMask
.8709	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.870b	20 8f 87	jsr $878f			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.870e	8d a5 04	sta $04a5			sta 	ModeMask
.8711					_AG12HaveMask:
.8711	20 ca 88	jsr $88ca			jsr 	TypeAndCalculateOperand 	; get zero page type
.8714	da		phx				phx 								; save found address mode
.8715	20 f3 87	jsr $87f3			jsr 	AssembleModeX
.8718	fa		plx				plx  								; restore address mode
.8719	b0 0b		bcs $8726			bcs 	_AG12Exit
.871b	20 27 87	jsr $8727			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.871e	20 f3 87	jsr $87f3			jsr 	AssembleModeX
.8721	b0 03		bcs $8726			bcs 	_AG12Exit
.8723	4c e4 ac	jmp $ace4			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8726					_AG12Exit:
.8726	60		rts				rts
.8727					PromoteToAbsolute:
.8727	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8729	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.872b	f0 19		beq $8746			beq 	_PTADo
.872d	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.872f	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8731	f0 13		beq $8746			beq 	_PTADo
.8733	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8735	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8737	f0 0d		beq $8746			beq 	_PTADo
.8739	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.873b	e0 d1		cpx #$d1			cpx 	#AM_IND
.873d	f0 07		beq $8746			beq 	_PTADo
.873f	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8741	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8743	f0 01		beq $8746			beq 	_PTADo
.8745	60		rts				rts
.8746					_PTADo:
.8746	aa		tax				tax
.8747	60		rts				rts
.8748					AssembleGroup3:
.8748	68		pla				pla 								; get parameters, which is just the opcode.
.8749	fa		plx				plx
.874a	20 87 87	jsr $8787			jsr 	AccessParameters 			; get and output opcode
.874d	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte
.8750	20 2e 89	jsr $892e			jsr 	CalculateOperand 			; get a 16 bit operand
.8753	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8756	38		sec				sec
.8757	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.875a	48		pha				pha 								; LSB in A
.875b	ad 10 04	lda $0410			lda 	NSMantissa1
.875e	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8761	aa		tax				tax 								; MSB in X
.8762	68		pla				pla
.8763	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8764	69 7f		adc #$7f			adc 	#$7F
.8766	90 01		bcc $8769			bcc 	_AG3NoCarry
.8768	e8		inx				inx
.8769					_AG3NoCarry:
.8769	38		sec				sec 								; fix back and write out anyways.
.876a	e9 80		sbc #$80			sbc 	#$80
.876c	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte
.876f	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8771	f0 0a		beq $877d			beq 	_AG3Exit
.8773	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8776	29 01		and #$01			and 	#1
.8778	f0 03		beq $877d			beq 	_AG3Exit
.877a	4c e9 ac	jmp $ace9			jmp 	RangeError 					; no, branch is out of range
.877d					_AG3Exit:
.877d	60		rts				rts
.877e					AssembleGroup4:
.877e	68		pla				pla 								; pop address
.877f	fa		plx				plx
.8780	20 87 87	jsr $8787			jsr 	AccessParameters 			; access and get first
.8783	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte 			; output it.
.8786	60		rts				rts
.8787					AccessParameters:
.8787	8d a1 04	sta $04a1			sta 	ParamStart
.878a	8e a2 04	stx $04a2			stx 	ParamStart+1
.878d	a9 01		lda #$01			lda 	#1
.878f					GetParameter:
.878f	5a		phy				phy
.8790	a8		tay				tay
.8791	ad a1 04	lda $04a1			lda 	ParamStart
.8794	85 36		sta $36				sta 	zTemp0
.8796	ad a2 04	lda $04a2			lda 	ParamStart+1
.8799	85 37		sta $37				sta 	zTemp0+1
.879b	b1 36		lda ($36),y			lda 	(zTemp0),y
.879d	7a		ply				ply
.879e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.879f					AssemblerWriteByte:
.879f	48		pha			pha
.87a0	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.87a3	29 02		and #$02		and 	#2
.87a5	f0 1b		beq $87c2		beq 	_AWBNoPrint
.87a7	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.87aa	20 dd 87	jsr $87dd		jsr 	PrintHex
.87ad	ad 9e 04	lda $049e		lda		AssemblerAddress
.87b0	20 dd 87	jsr $87dd		jsr 	PrintHex
.87b3	a9 20		lda #$20		lda 	#' '
.87b5	20 88 ae	jsr $ae88		jsr 	EXTPrintCharacter
.87b8	68		pla			pla 									; print byte
.87b9	48		pha			pha
.87ba	20 dd 87	jsr $87dd		jsr 	PrintHex
.87bd	a9 0d		lda #$0d		lda 	#13
.87bf	20 88 ae	jsr $ae88		jsr 	EXTPrintCharacter
.87c2					_AWBNoPrint:
.87c2	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.87c5	85 36		sta $36			sta 	zTemp0
.87c7	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.87ca	f0 0e		beq $87da		beq 	_AWBRange
.87cc	85 37		sta $37			sta 	zTemp0+1
.87ce	68		pla			pla 									; write byte out
.87cf	92 36		sta ($36)		sta 	(zTemp0)
.87d1	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.87d4	d0 03		bne $87d9		bne 	_AWBNoCarry
.87d6	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.87d9					_AWBNoCarry:
.87d9	60		rts			rts
.87da					_AWBRange:
.87da	4c e9 ac	jmp $ace9		jmp 	RangeError
.87dd					PrintHex:
.87dd	48		pha				pha
.87de	4a		lsr a				lsr 	a
.87df	4a		lsr a				lsr 	a
.87e0	4a		lsr a				lsr 	a
.87e1	4a		lsr a				lsr 	a
.87e2	20 e6 87	jsr $87e6			jsr 	_PrintNibble
.87e5	68		pla				pla
.87e6					_PrintNibble:
.87e6	29 0f		and #$0f			and 	#15
.87e8	c9 0a		cmp #$0a			cmp 	#10
.87ea	90 02		bcc $87ee			bcc 	_NoShift
.87ec	69 06		adc #$06			adc 	#6
.87ee					_NoShift:
.87ee	69 30		adc #$30			adc 	#48
.87f0	4c 88 ae	jmp $ae88			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.87f3					AssembleModeX:
.87f3	5a		phy				phy
.87f4	ad a3 04	lda $04a3			lda 	IsGroup1
.87f7	f0 17		beq $8810			beq 	_AMXGroup2
.87f9	8a		txa				txa 							; is it in group # 1
.87fa	29 40		and #$40			and 	#AM_ISG1
.87fc	f0 50		beq $884e			beq 	_AMXFail 				; no, give up.
.87fe	8a		txa				txa 							; get back.
.87ff	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8801	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8803	d0 22		bne $8827			bne 	_AMXHaveInfo
.8805	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8808	c9 81		cmp #$81			cmp 	#$81
.880a	f0 42		beq $884e			beq 	_AMXFail
.880c	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.880e	80 17		bra $8827			bra 	_AMXHaveInfo 			; odd design decision there.
.8810					_AMXGroup2:
.8810	8a		txa				txa 							; is it in group 2 ?
.8811	29 20		and #$20			and 	#AM_ISG2
.8813	f0 39		beq $884e			beq 	_AMXFail 				; no, give up.
.8815	8a		txa				txa 							; get the offset into Y
.8816	29 1f		and #$1f			and 	#$1F
.8818	4a		lsr a				lsr 	a 						; make it 0-7.
.8819	4a		lsr a				lsr  	a
.881a	a8		tay				tay
.881b	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.881e					_AMXCheckOkay:
.881e	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.881f	88		dey				dey
.8820	10 fc		bpl $881e			bpl 	_AMXCheckOkay
.8822	90 2a		bcc $884e			bcc 	_AMXFail 				; not allowed.
.8824	8a		txa				txa  							; get mask back
.8825	29 1f		and #$1f			and 	#$1F
.8827					_AMXHaveInfo:
.8827	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8829	10 05		bpl $8830			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.882b	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.882e	d0 1e		bne $884e			bne 	_AMXFail
.8830					_AMXAnySize:
.8830	18		clc				clc 							; add offset to the base opcode
.8831	6d a4 04	adc $04a4			adc 	BaseOpcode
.8834					_AMXOutputCode:
.8834	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte 		; write the opcode out.
.8837	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8839	f0 10		beq $884b			beq 	_AMXExit
.883b	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.883e	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte
.8841	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8843	30 06		bmi $884b			bmi 	_AMXExit
.8845	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8848	20 9f 87	jsr $879f			jsr 	AssemblerWriteByte
.884b					_AMXExit:
.884b	7a		ply				ply
.884c	38		sec				sec
.884d	60		rts				rts
.884e					_AMXFail:
.884e	a0 00		ldy #$00			ldy 	#0
.8850					_AMXCheckOddities:
.8850	8a		txa				txa
.8851	d9 79 88	cmp $8879,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8854	d0 16		bne $886c			bne 	_AMXCONext
.8856	b9 77 88	lda $8877,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8859	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.885c	d0 0e		bne $886c			bne 	_AMXCONext
.885e	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8860	10 05		bpl $8867			bpl 	_AMXCONotZero
.8862	ad 10 04	lda $0410			lda 	NSMantissa1
.8865	d0 05		bne $886c			bne 	_AMXCONext
.8867					_AMXCONotZero:
.8867	b9 78 88	lda $8878,y			lda 	ExtraOpcode+1,y 		; get new opcode
.886a	80 c8		bra $8834			bra 	_AMXOutputCode 			; and assemble it
.886c					_AMXCONext:
.886c	c8		iny				iny
.886d	c8		iny				iny
.886e	c8		iny				iny
.886f	b9 77 88	lda $8877,y			lda 	ExtraOpcode+0,y 		; end of table
.8872	d0 dc		bne $8850			bne 	_AMXCheckOddities
.8874					_AMXCOFail:
.8874	7a		ply				ply
.8875	18		clc				clc
.8876	60		rts				rts
.8877					ExtraOpcode:
>8877	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>887a	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>887d	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8880	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8883	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8886	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8889	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>888c	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>888f	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8892	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8895	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8896					LabelHere:
.8896	c8		iny				iny 								; skip .
.8897	a2 00		ldx #$00			ldx 	#0 							; get a term
.8899	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm 				; get a term
.889c	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.889f	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.88a1	d0 24		bne $88c7			bne 	_ALType
.88a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.88a6	85 36		sta $36				sta 	zTemp0
.88a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.88ab	85 37		sta $37				sta 	zTemp0+1
.88ad	5a		phy				phy 								; copy address in.
.88ae	a0 01		ldy #$01			ldy 	#1
.88b0	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.88b3	92 36		sta ($36)			sta 	(zTemp0)
.88b5	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.88b8	91 36		sta ($36),y			sta 	(zTemp0),y
.88ba	c8		iny				iny
.88bb	a9 00		lda #$00			lda 	#0
.88bd	91 36		sta ($36),y			sta 	(zTemp0),y
.88bf	c8		iny				iny
.88c0	91 36		sta ($36),y			sta 	(zTemp0),y
.88c2	c8		iny				iny
.88c3	91 36		sta ($36),y			sta 	(zTemp0),y
.88c5	7a		ply				ply
.88c6	60		rts				rts
.88c7					_ALType:
.88c7	4c ee ac	jmp $acee			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.88ca					TypeAndCalculateOperand:
.88ca	b1 30		lda ($30),y			lda 	(codePtr),y
.88cc	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.88ce	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88d0	f0 5b		beq $892d			beq 	_TACOExit
.88d2	c9 80		cmp #$80			cmp 	#KWC_EOL
.88d4	f0 57		beq $892d			beq 	_TACOExit
.88d6	c8		iny				iny
.88d7	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.88d9	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.88db	f0 51		beq $892e			beq 	CalculateOperand
.88dd	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.88df	f0 1f		beq $8900			beq 	_TACOIndirect
.88e1	88		dey				dey 								; undo get of first character
.88e2	20 2e 89	jsr $892e			jsr 	CalculateOperand 			; get operand
.88e5	b1 30		lda ($30),y			lda 	(codePtr),y
.88e7	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.88e9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88eb	d0 40		bne $892d			bne 	_TACOExit
.88ed	c8		iny				iny
.88ee	20 75 a6	jsr $a675			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.88f1	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.88f3	c9 58		cmp #$58			cmp 	#'X'
.88f5	f0 36		beq $892d			beq 	_TACOExit
.88f7	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.88f9	c9 59		cmp #$59			cmp 	#'Y'
.88fb	f0 30		beq $892d			beq 	_TACOExit
.88fd					_TACOSyntax:
.88fd	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.8900					_TACOIndirect:
.8900	20 2e 89	jsr $892e			jsr 	CalculateOperand 			; get the operand
.8903	b1 30		lda ($30),y			lda 	(codePtr),y
.8905	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8907	f0 17		beq $8920			beq 	_TACOIndX
.8909	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.890c	b1 30		lda ($30),y			lda 	(codePtr),y
.890e	a2 d1		ldx #$d1			ldx 	#AM_IND
.8910	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8912	d0 19		bne $892d			bne 	_TACOExit
.8914	c8		iny				iny
.8915	20 75 a6	jsr $a675			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8918	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.891a	d0 e1		bne $88fd			bne 	_TACOSyntax
.891c	a2 d0		ldx #$d0			ldx 	#AM_INDY
.891e	80 0d		bra $892d			bra 	_TACOExit
.8920					_TACOIndX:
.8920	c8		iny				iny
.8921	20 75 a6	jsr $a675			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8924	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8926	d0 d5		bne $88fd			bne 	_TACOSyntax
.8928	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket			; check )
.892b	a2 c0		ldx #$c0			ldx 	#AM_INDX
.892d					_TACOExit:
.892d	60		rts				rts
.892e					CalculateOperand:
.892e	48		pha				pha
.892f	da		phx				phx
.8930	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8932	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger
.8935	fa		plx				plx
.8936	68		pla				pla
.8937	60		rts				rts
.a675					TACOCheckXY:
.a675	b1 30		lda ($30),y			lda 	(codePtr),y
.a677	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a679	c9 40		cmp #$40			cmp 	#$40
.a67b	d0 21		bne $a69e			bne 	_TCXYFail
.a67d	b1 30		lda ($30),y			lda 	(codePtr),y
.a67f	18		clc				clc
.a680	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a682	85 37		sta $37				sta 	zTemp0+1
.a684	c8		iny				iny
.a685	b1 30		lda ($30),y			lda 	(codePtr),y
.a687	c8		iny				iny
.a688	85 36		sta $36				sta 	zTemp0
.a68a	5a		phy				phy 								; save position
.a68b	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a68d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a68f	d0 0c		bne $a69d			bne 	_TCXYPopFail
.a691	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a693	b1 36		lda ($36),y			lda 	(zTemp0),y
.a695	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a697	f0 08		beq $a6a1			beq 	_TCXYFound
.a699	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a69b	f0 04		beq $a6a1			beq 	_TCXYFound
.a69d					_TCXYPopFail:
.a69d	7a		ply				ply
.a69e					_TCXYFail:
.a69e	a9 00		lda #$00			lda 	#0
.a6a0	60		rts				rts
.a6a1					_TCXYFound:
.a6a1	7a		ply				ply 								; restore position
.a6a2	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a6a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8938					EditProgramCode:
.8938	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.893b	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.893e	20 dc 9f	jsr $9fdc			jsr 	MemorySearch
.8941	90 05		bcc $8948			bcc 	_EPCNoDelete 				; reached the end don't delete
.8943	d0 03		bne $8948			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8945	20 cc ae	jsr $aecc			jsr 	MemoryDeleteLine 			; delete the line
.8948					_EPCNoDelete:
.8948	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.894b	c9 80		cmp #$80			cmp 	#KWC_EOL
.894d	f0 0d		beq $895c			beq 	_EPCNoInsert
.894f	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8952	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8955	20 dc 9f	jsr $9fdc			jsr 	MemorySearch
.8958	18		clc				clc 								; insert at this point.
.8959	20 03 af	jsr $af03			jsr 	MemoryInsertLine 			; insert the line
.895c					_EPCNoInsert:
.895c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.895d					WarmStart:
.895d	a2 ff		ldx #$ff			ldx 	#$FF
.895f	9a		txs				txs
.8960	20 9e ae	jsr $ae9e			jsr 	EXTInputLine 				; get line to lineBuffer
.8963	20 f6 a3	jsr $a3f6			jsr 	TokeniseLine 				; tokenise the line
.8966	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8969	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.896c	d0 17		bne $8985			bne 	_WSEditCode 				; if so,edit code.
.896e	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8971	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8973	85 30		sta $30				sta 	codePtr
.8975	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8977	85 31		sta $31				sta 	codePtr+1
.8979	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.897c	c9 80		cmp #$80			cmp 	#KWC_EOL
.897e	f0 dd		beq $895d			beq 	WarmStart
.8980	20 8e 8f	jsr $8f8e			jsr 	RUNCodePointerLine 			; execute that line.
.8983	80 d8		bra $895d			bra 	WarmStart
.8985					_WSEditCode:
.8985	20 38 89	jsr $8938			jsr 	EditProgramCode
.8988	20 f6 89	jsr $89f6			jsr 	ClearCommand
.898b	80 d0		bra $895d			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.898d					AssembleCommand:
.898d	a2 00		ldx #$00			ldx 	#0
.898f	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger 		; start address
.8992	ad 08 04	lda $0408			lda 	NSMantissa0
.8995	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8998	ad 10 04	lda $0410			lda 	NSMantissa1
.899b	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.899e	20 06 a7	jsr $a706			jsr 	CheckComma
.89a1	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; options
.89a4	ad 08 04	lda $0408			lda 	NSMantissa0
.89a7	8d a0 04	sta $04a0			sta 	AssemblerControl
.89aa	60		rts				rts
.89ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.89ac					AssertCommand:
.89ac	a2 00		ldx #$00			ldx 	#0
.89ae	20 f4 9e	jsr $9ef4			jsr 	EvaluateInteger 			; the assert test
.89b1	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; exit if result is non zero.
.89b4	d0 05		bne $89bb			bne 	_ACExit
.89b6	a9 0a		lda #$0a		lda	#10
.89b8	4c c5 93	jmp $93c5		jmp	ErrorHandler
.89bb					_ACExit:
.89bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.89bc					CallCommand:
.89bc	a2 00		ldx #$00			ldx 	#0
.89be	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger
.89c1					_CCClear
.89c1	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.89c2	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.89c5	e0 04		cpx #$04			cpx 	#4
.89c7	d0 f8		bne $89c1			bne 	_CCClear
.89c9	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.89cb					_CCCParam:
.89cb	b1 30		lda ($30),y			lda 	(codePtr),y
.89cd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89cf	d0 09		bne $89da			bne 	_CCCRun6502
.89d1	c8		iny				iny 								; skip comma
.89d2	e8		inx				inx	 								; next level
.89d3	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; get A/X/Y
.89d6	e0 03		cpx #$03			cpx 	#3
.89d8	90 f1		bcc $89cb			bcc 	_CCCParam 					; done all 3 ?
.89da					_CCCRun6502:
.89da	5a		phy				phy 								; save position
.89db	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.89de	85 37		sta $37				sta 	zTemp0+1
.89e0	ad 08 04	lda $0408			lda 	NSMantissa0
.89e3	85 36		sta $36				sta 	zTemp0
.89e5	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.89e8	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.89eb	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.89ee	20 f3 89	jsr $89f3			jsr 	_CCCZTemp0 					; call zTemp0
.89f1	7a		ply				ply 								; restore position and exit
.89f2	60		rts				rts
.89f3					_CCCZTemp0:
.89f3	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.89f6					ClearCommand:
.89f6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.89f8	85 36		sta $36				sta 	0+zTemp0
.89fa	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.89fc	85 37		sta $37				sta 	1+zTemp0
.89fe					_ClearZeroLoop:
.89fe	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8a00	f0 24		beq $8a26			beq 	_ClearZeroEnd
.8a02	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8a04	a9 00		lda #$00			lda 	#0
.8a06					_ClearOneVariable:
.8a06	91 36		sta ($36),y			sta 	(zTemp0),y
.8a08	c8		iny				iny
.8a09	c0 08		cpy #$08			cpy 	#8
.8a0b	d0 f9		bne $8a06			bne 	_ClearOneVariable
.8a0d	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8a0f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a11	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a13	d0 04		bne $8a19			bne 	_ClearNotProcedure
.8a15	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8a17	91 36		sta ($36),y			sta 	(zTemp0),y
.8a19					_ClearNotProcedure:
.8a19	18		clc				clc 								; go to the next variable
.8a1a	b2 36		lda ($36)			lda 	(zTemp0)
.8a1c	65 36		adc $36				adc 	zTemp0
.8a1e	85 36		sta $36				sta 	zTemp0
.8a20	90 dc		bcc $89fe			bcc 	_ClearZeroLoop
.8a22	e6 37		inc $37				inc 	zTemp0+1
.8a24	80 d8		bra $89fe			bra 	_ClearZeroLoop
.8a26					_ClearZeroEnd:
.8a26	18		clc				clc
.8a27	a5 36		lda $36				lda 	zTemp0
.8a29	69 01		adc #$01			adc 	#1
.8a2b	8d 8c 04	sta $048c			sta 	lowMemPtr
.8a2e	a5 37		lda $37				lda 	zTemp0+1
.8a30	69 00		adc #$00			adc 	#0
.8a32	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8a35	20 96 a0	jsr $a096			jsr 	StackReset
.8a38	20 e6 af	jsr $afe6			jsr 	StringSystemInitialise
.8a3b	20 e5 92	jsr $92e5			jsr 	ProcedureScan
.8a3e	20 4a 8f	jsr $8f4a			jsr 	Command_Restore
.8a41	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8a44	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8a47	9c a0 04	stz $04a0			stz 	AssemblerControl
.8a4a	20 8c 9c	jsr $9c8c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8a4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8a4e					Command_Data:
.8a4e	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8a50	a2 80		ldx #$80			ldx 	#KWC_EOL
.8a52	20 37 93	jsr $9337			jsr 	ScanForward
.8a55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8a56					DimCommand:
.8a56	b1 30		lda ($30),y			lda 	(codePtr),y
.8a58	29 c0		and #$c0			and 	#$C0
.8a5a	c9 40		cmp #$40			cmp 	#$40
.8a5c	d0 7a		bne $8ad8			bne 	_DCSyntax
.8a5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a60	18		clc				clc
.8a61	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a63	85 3f		sta $3f				sta 	zaTemp+1
.8a65	c8		iny				iny
.8a66	b1 30		lda ($30),y			lda 	(codePtr),y
.8a68	c8		iny				iny
.8a69	85 3e		sta $3e				sta 	zaTemp
.8a6b	5a		phy				phy
.8a6c	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8a6e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a70	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8a72	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a74	f0 62		beq $8ad8			beq 	_DCSyntax
.8a76	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8a78	29 04		and #$04			and 	#NSBIsArray
.8a7a	f0 64		beq $8ae0			beq 	_DCType
.8a7c	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8a7e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a80	d0 59		bne $8adb			bne 	_DCRedefine
.8a82	7a		ply				ply
.8a83	20 e3 8a	jsr $8ae3			jsr 	_DCGetSize 				; get array size, check it.
.8a86	5a		phy				phy
.8a87	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8a89	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8a8b	7a		ply				ply 							; is there a second (e.g. ,x)
.8a8c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a90	d0 0a		bne $8a9c			bne 	_DCOneDimension
.8a92	c8		iny				iny 							; skip comma
.8a93	20 e3 8a	jsr $8ae3			jsr 	_DCGetSize 				; get 2nd array size
.8a96	5a		phy				phy
.8a97	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8a99	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a9b	7a		ply				ply
.8a9c					_DCOneDimension:
.8a9c	5a		phy				phy 							; save position
.8a9d	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8a9f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8aa1	aa		tax				tax
.8aa2	c8		iny				iny
.8aa3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8aa5	e8		inx				inx 							; bump them.
.8aa6	1a		inc a				inc 	a
.8aa7	20 80 ab	jsr $ab80			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8aaa	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8aac	29 e0		and #$e0			and 	#$E0
.8aae	d0 23		bne $8ad3			bne 	_DCSize
.8ab0	a0 02		ldy #$02			ldy 	#2 						; get base type
.8ab2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ab4	20 f1 8a	jsr $8af1			jsr 	ScaleByBaseType 		; scale by base type
.8ab7	a5 36		lda $36				lda 	zTemp0
.8ab9	a6 37		ldx $37				ldx 	zTemp0+1
.8abb	20 4e 9c	jsr $9c4e			jsr 	AllocateXABytes 		; allocate memory
.8abe	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8ac0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ac2	c8		iny				iny
.8ac3	8a		txa				txa
.8ac4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ac6	7a		ply				ply 							; get position back
.8ac7	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 		; check )
.8aca	b1 30		lda ($30),y			lda 	(codePtr),y
.8acc	c8		iny				iny 							; consume in case
.8acd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8acf	f0 85		beq $8a56			beq 	DimCommand
.8ad1	88		dey				dey 							; undo consume
.8ad2	60		rts				rts
.8ad3					_DCSize:
.8ad3	a9 16		lda #$16		lda	#22
.8ad5	4c c5 93	jmp $93c5		jmp	ErrorHandler
.8ad8					_DCSyntax:
.8ad8	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.8adb					_DCRedefine:
.8adb	a9 15		lda #$15		lda	#21
.8add	4c c5 93	jmp $93c5		jmp	ErrorHandler
.8ae0					_DCType:
.8ae0	4c ee ac	jmp $acee			jmp 	TypeError
.8ae3					_DCGetSize:
.8ae3	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8ae5	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 	; get array dimension
.8ae8	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8aea	f0 e7		beq $8ad3			beq 	_DCSize
.8aec	c9 fe		cmp #$fe			cmp 	#254
.8aee	f0 e3		beq $8ad3			beq 	_DCSize
.8af0	60		rts				rts
.8af1					ScaleByBaseType:
.8af1	29 10		and #$10			and 	#NSBIsString 			; is it string
.8af3	d0 19		bne $8b0e			bne 	_SBBTString
.8af5	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8af7	48		pha				pha
.8af8	a5 36		lda $36				lda 	zTemp0
.8afa	48		pha				pha
.8afb	06 36		asl $36				asl 	zTemp0 					; x 2
.8afd	26 37		rol $37				rol 	zTemp0+1
.8aff	06 36		asl $36				asl 	zTemp0 					; x 4
.8b01	26 37		rol $37				rol 	zTemp0+1
.8b03	68		pla				pla 							; add stacked value = x 5
.8b04	65 36		adc $36				adc 	zTemp0
.8b06	85 36		sta $36				sta 	zTemp0
.8b08	68		pla				pla
.8b09	65 37		adc $37				adc 	zTemp0+1
.8b0b	85 37		sta $37				sta 	zTemp0+1
.8b0d	60		rts				rts
.8b0e					_SBBTString:
.8b0e	06 36		asl $36				asl 	zTemp0
.8b10	26 37		rol $37				rol 	zTemp0+1
.8b12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8b13					EndCommand:
.8b13	4c 5d 89	jmp $895d			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8b16					ForCommand:
.8b16	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8b18	20 31 a0	jsr $a031			jsr 	StackOpen
.8b1b	a2 00		ldx #$00			ldx 	#0
.8b1d	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm
.8b20	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8b23	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8b25	d0 49		bne $8b70			bne		_FCError
.8b27	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8b29	20 0e a7	jsr $a70e			jsr 	CheckNextA
.8b2c	e8		inx				inx
.8b2d	20 f4 9e	jsr $9ef4			jsr 	EvaluateInteger 			; <from> in +1
.8b30	b1 30		lda ($30),y			lda 	(codePtr),y
.8b32	c8		iny				iny 								; consume it
.8b33	48		pha				pha 								; save on stack for later
.8b34	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8b36	f0 04		beq $8b3c			beq 	_FCNoSyntax
.8b38	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8b3a	d0 37		bne $8b73			bne 	_FCSyntaxError
.8b3c					_FCNoSyntax:
.8b3c	e8		inx				inx
.8b3d	20 f4 9e	jsr $9ef4			jsr 	EvaluateInteger
.8b40	20 75 a0	jsr $a075			jsr 	STKSaveCodePosition 		; save loop back position
.8b43	68		pla				pla 								; restore DOWNTO or TO
.8b44	5a		phy				phy 								; save Y on the stack
.8b45	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8b47	f0 02		beq $8b4b			beq 	_FCNotDownTo
.8b49	a9 02		lda #$02			lda 	#2
.8b4b					_FCNotDownTo:
.8b4b	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8b4c	a0 10		ldy #$10			ldy 	#16
.8b4e	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8b50	a0 06		ldy #$06			ldy 	#6
.8b52	ad 08 04	lda $0408			lda 	NSMantissa0
.8b55	91 34		sta ($34),y			sta 	(basicStack),y
.8b57	ad 10 04	lda $0410			lda 	NSMantissa1
.8b5a	c8		iny				iny
.8b5b	91 34		sta ($34),y			sta 	(basicStack),y
.8b5d	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8b5f	a2 01		ldx #$01			ldx 	#1
.8b61	20 76 8b	jsr $8b76			jsr 	FCIntegerToStack
.8b64	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8b66	a2 02		ldx #$02			ldx 	#2
.8b68	20 76 8b	jsr $8b76			jsr 	FCIntegerToStack
.8b6b	20 96 8b	jsr $8b96			jsr 	CopyIndexToReference
.8b6e	7a		ply				ply 								; restore position
.8b6f	60		rts				rts
.8b70					_FCError:
.8b70	4c ee ac	jmp $acee			jmp 	TypeError
.8b73					_FCSyntaxError:
.8b73	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.8b76					FCIntegerToStack:
.8b76	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8b79	10 03		bpl $8b7e			bpl	 	_FCNotNegative
.8b7b	20 32 9f	jsr $9f32			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8b7e					_FCNotNegative:
.8b7e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8b81	91 34		sta ($34),y			sta 	(basicStack),y
.8b83	c8		iny				iny
.8b84	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b87	91 34		sta ($34),y			sta 	(basicStack),y
.8b89	c8		iny				iny
.8b8a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8b8d	91 34		sta ($34),y			sta 	(basicStack),y
.8b8f	c8		iny				iny
.8b90	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8b93	91 34		sta ($34),y			sta 	(basicStack),y
.8b95	60		rts				rts
.8b96					CopyIndexToReference:
.8b96	5a		phy				phy
.8b97	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8b99	38		sec				sec 								; (because we copy from offset 8)
.8b9a	b1 34		lda ($34),y			lda 	(basicStack),y
.8b9c	e9 08		sbc #$08			sbc 	#8
.8b9e	85 36		sta $36				sta 	zTemp0
.8ba0	c8		iny				iny
.8ba1	b1 34		lda ($34),y			lda 	(basicStack),y
.8ba3	e9 00		sbc #$00			sbc 	#0
.8ba5	85 37		sta $37				sta 	zTemp0+1
.8ba7	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ba9	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8bab	b1 34		lda ($34),y			lda 	(basicStack),y
.8bad	0a		asl a				asl 	a 							; into carry
.8bae	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8bb0	90 14		bcc $8bc6			bcc 	_CITRNormal
.8bb2	38		sec				sec
.8bb3					_CITRNegative:
.8bb3	a9 00		lda #$00			lda 	#0
.8bb5	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8bb7	91 36		sta ($36),y			sta 	(zTemp0),y
.8bb9	c8		iny				iny
.8bba	ca		dex				dex
.8bbb	d0 f6		bne $8bb3			bne 	_CITRNegative
.8bbd	88		dey				dey 								; look at MSB of mantissa
.8bbe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8bc0	09 80		ora #$80			ora 	#$80
.8bc2	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc4	7a		ply				ply
.8bc5	60		rts				rts
.8bc6					_CITRNormal:
.8bc6	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8bc8	91 36		sta ($36),y			sta 	(zTemp0),y
.8bca	c8		iny				iny
.8bcb	ca		dex				dex
.8bcc	d0 f8		bne $8bc6			bne 	_CITRNormal
.8bce	7a		ply				ply 								; and exit.
.8bcf	60		rts				rts
.8bd0					NextCommand:
.8bd0	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8bd2	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8bd4	20 5d a0	jsr $a05d			jsr 	StackCheckFrame
.8bd7	5a		phy				phy
.8bd8	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8bda	b1 34		lda ($34),y			lda 	(basicStack),y
.8bdc	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8bde	30 02		bmi $8be2			bmi 	_NCStepNeg
.8be0	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8be2					_NCStepNeg:
.8be2	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8be4	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8be6	18		clc				clc
.8be7					_NCBump:
.8be7	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8be9	91 34		sta ($34),y			sta 	(basicStack),y
.8beb	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8bed	c8		iny				iny 								; next byte
.8bee	ca		dex				dex 								; do four times
.8bef	d0 f6		bne $8be7			bne 	_NCBump
.8bf1	20 96 8b	jsr $8b96			jsr		CopyIndexToReference		; copy it to the reference variable.
.8bf4	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8bf6	b1 34		lda ($34),y			lda 	(basicStack),y
.8bf8	0a		asl a				asl 	a 							; sign bit to carry
.8bf9	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8bfb	85 38		sta $38				sta 	zTemp1
.8bfd	90 02		bcc $8c01			bcc 	_NCCompRev 					; use if step is +ve
.8bff	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c01					_NCCompRev:
.8c01	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c03	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c05	85 39		sta $39				sta 	zTemp1+1
.8c07	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8c09	38		sec				sec
.8c0a					_NCCompare:
.8c0a	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8c0c	b1 34		lda ($34),y			lda 	(basicStack),y
.8c0e	a4 39		ldy $39				ldy 	zTemp1+1
.8c10	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c12	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8c14	e6 39		inc $39				inc 	zTemp1+1
.8c16	ca		dex				dex 								; do it 4 times.
.8c17	d0 f1		bne $8c0a			bne 	_NCCompare
.8c19	50 02		bvc $8c1d			bvc 	_NCNoOverflow 				; convert to signed comparison
.8c1b	49 80		eor #$80			eor 	#$80
.8c1d					_NCNoOverflow:
.8c1d	7a		ply				ply 								; restore Y position
.8c1e	0a		asl a				asl 	a 							; is bit 7 set.
.8c1f	90 04		bcc $8c25			bcc 	_NCLoopback 				; if no , >= so loop back
.8c21	20 4f a0	jsr $a04f			jsr 	StackClose 					; exit the loop
.8c24	60		rts				rts
.8c25					_NCLoopBack:
.8c25	20 86 a0	jsr $a086			jsr 	STKLoadCodePosition 		; loop back
.8c28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8c29					Command_GOSUB:
.8c29	a2 00		ldx #$00			ldx 	#0
.8c2b	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8c2e	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8c30	20 31 a0	jsr $a031			jsr 	StackOpen 					; create frame
.8c33	20 75 a0	jsr $a075			jsr 	STKSaveCodePosition 		; save current position
.8c36	4c 4c 8c	jmp $8c4c			jmp 	GotoStackX
.8c39					Command_RETURN:
.8c39	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8c3b	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8c3d	20 5d a0	jsr $a05d			jsr 	StackCheckFrame
.8c40	20 86 a0	jsr $a086			jsr 	STKLoadCodePosition 		; restore code position
.8c43	20 4f a0	jsr $a04f			jsr 	StackClose
.8c46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8c47					GotoCommand:
.8c47	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8c49	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger
.8c4c					GotoStackX:
.8c4c	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8c4f	48		pha				pha 								; it is slightly inefficient, just in cases.
.8c50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8c53	fa		plx				plx
.8c54	20 dc 9f	jsr $9fdc			jsr 	MemorySearch 				; transfer to line number AX.
.8c57	90 05		bcc $8c5e			bcc 	_GotoError 					; not found, off end.
.8c59	d0 03		bne $8c5e			bne 	_GotoError 					; not found exactly
.8c5b	4c 87 8f	jmp $8f87			jmp 	RunNewLine 					; and go straight to new line code.
.8c5e					_GotoError:
.8c5e	a9 0d		lda #$0d		lda	#13
.8c60	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8c63					IfCommand:
.8c63	a2 00		ldx #$00			ldx 	#0 							; If what.
.8c65	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber
.8c68	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6a	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8c6c	d0 0a		bne $8c78			bne 	_IFStructured
.8c6e	c8		iny				iny 								; consume THEN
.8c6f	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; is it zero
.8c72	f0 01		beq $8c75			beq 	_IfFail 					; if fail, go to next line
.8c74	60		rts				rts 								; if THEN just continue
.8c75					_IfFail:
.8c75	4c ec 8f	jmp $8fec			jmp 	EOLCommand
.8c78					_IfStructured:
.8c78	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; is it zero
.8c7b	d0 07		bne $8c84			bne 	_IfExit 					; if not, then continue normally.
.8c7d	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8c7f	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8c81	20 37 93	jsr $9337			jsr 	ScanForward 				; and run from there/
.8c84					_IfExit:
.8c84	60		rts				rts
.8c85					ElseCode:
.8c85	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8c87	aa		tax				tax 								; so just go to the structure exit
.8c88	20 37 93	jsr $9337			jsr 	ScanForward
.8c8b	60		rts				rts
.8c8c					EndIf:
.8c8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8c8d					LetCommand:
.8c8d	a2 00		ldx #$00			ldx 	#0
.8c8f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c91	c9 10		cmp #$10			cmp 	#KWD_AT
.8c93	d0 16		bne $8cab			bne 	_LCStandard
.8c95	c8		iny				iny 								; skip equal
.8c96	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm 				; get a number
.8c99	20 e3 98	jsr $98e3			jsr 	Dereference 				; dereference it
.8c9c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8c9f	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ca1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8ca4	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ca6	d0 10		bne $8cb8			bne 	_LCMain
.8ca8	4c ee ac	jmp $acee			jmp 	TypeError 					; was a reference before.
.8cab					_LCStandard:
.8cab	ad b6 97	lda $97b6			lda 	PrecedenceLevel+"*"			; precedence > this
.8cae	20 d0 97	jsr $97d0			jsr 	EvaluateExpressionAtPrecedence
.8cb1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8cb4	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8cb6	f0 0e		beq $8cc6			beq 	_LetGoProc 					; it's a procedure call.
.8cb8					_LCMain:
.8cb8	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8cba	20 0e a7	jsr $a70e			jsr 	CheckNextA
.8cbd	e8		inx				inx 								; RHS
.8cbe	20 c8 9e	jsr $9ec8			jsr 	EvaluateValue
.8cc1	ca		dex				dex
.8cc2	20 c9 8c	jsr $8cc9			jsr 	AssignVariable
.8cc5	60		rts				rts
.8cc6					_LetGoProc:
.8cc6	4c 62 8e	jmp $8e62			jmp 	CallProcedure
.8cc9					AssignVariable:
.8cc9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8ccc	48		pha				pha 								; save a copy
.8ccd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8cd0	29 10		and #$10			and 	#NSBIsString
.8cd2	d0 0b		bne $8cdf			bne 	_ASError
.8cd4	68		pla				pla 								; get back
.8cd5	29 10		and #$10			and 	#NSBIsString 				; check type
.8cd7	d0 03		bne $8cdc			bne 	_ASString
.8cd9	4c 0b 98	jmp $980b			jmp 	AssignNumber
.8cdc					_ASString:
.8cdc	4c 79 98	jmp $9879			jmp 	AssignString
.8cdf					_ASError:
.8cdf	4c ee ac	jmp $acee			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8ce2					Command_List:
.8ce2	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8ce5	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8ce8	a9 ff		lda #$ff			lda 	#$FF
.8cea	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8ced	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8cf0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cf4	f0 1e		beq $8d14			beq 	_CLSecond
.8cf6	20 72 8d	jsr $8d72			jsr 	CLIsDigit 					; if not digit, list all
.8cf9	b0 24		bcs $8d1f			bcs 	_CLStart
.8cfb	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8cfd	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger
.8d00	b1 30		lda ($30),y			lda 	(codePtr),y
.8d02	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d04	f0 0e		beq $8d14			beq 	_CLSecond 					; if so go get it
.8d06	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8d09	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d0c	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8d0f	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d12	80 0b		bra $8d1f			bra 	_CLStart
.8d14					_CLSecond:
.8d14	c8		iny				iny 								; consume comma
.8d15	20 72 8d	jsr $8d72			jsr 	CLIsDigit 					; digit found
.8d18	b0 05		bcs $8d1f			bcs 	_CLStart 					; if not, continue listing
.8d1a	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8d1c	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger
.8d1f					_CLStart
.8d1f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d21	85 30		sta $30				sta 	codePtr
.8d23	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d25	85 31		sta $31				sta 	codePtr+1
.8d27					_CLLoop:
.8d27	20 c9 ae	jsr $aec9			jsr 	EXTBreakCheck 				; break check
.8d2a	f0 30		beq $8d5c			beq 	_CLExit
.8d2c	b2 30		lda ($30)			lda 	(codePtr)
.8d2e	f0 2c		beq $8d5c			beq 	_CLExit
.8d30	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8d32	20 5f 8d	jsr $8d5f			jsr 	CLCompareLineNo
.8d35	90 18		bcc $8d4f			bcc 	_CLNext
.8d37	a2 07		ldx #$07			ldx 	#7
.8d39	20 5f 8d	jsr $8d5f			jsr 	CLCompareLineNo
.8d3c	f0 02		beq $8d40			beq 	_CLDoThisOne
.8d3e	b0 0f		bcs $8d4f			bcs 	_CLNext
.8d40					_CLDoThisOne:
.8d40	20 93 91	jsr $9193			jsr 	ListConvertLine 			; convert line into token Buffer
.8d43	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d45	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8d47	20 1e 94	jsr $941e			jsr 	PrintStringXA
.8d4a	a9 0d		lda #$0d			lda 	#13 						; new line
.8d4c	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.8d4f					_CLNext:
.8d4f	18		clc				clc
.8d50	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d52	65 30		adc $30				adc 	codePtr
.8d54	85 30		sta $30				sta 	codePtr
.8d56	90 02		bcc $8d5a			bcc 	_CREExit
.8d58	e6 31		inc $31				inc 	codePtr+1
.8d5a					_CREExit:
.8d5a	80 cb		bra $8d27			bra 	_CLLoop
.8d5c					_CLExit:
.8d5c	4c 5d 89	jmp $895d			jmp 	WarmStart
.8d5f					CLCompareLineNo:
.8d5f	38		sec				sec
.8d60	a0 01		ldy #$01			ldy 	#1
.8d62	b1 30		lda ($30),y			lda 	(codePtr),y
.8d64	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8d67	85 36		sta $36				sta 	zTemp0
.8d69	c8		iny				iny
.8d6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6c	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8d6f	05 36		ora $36				ora 	zTemp0
.8d71	60		rts				rts
.8d72					CLIsDigit:
.8d72	b1 30		lda ($30),y			lda 	(codePtr),y
.8d74	c9 30		cmp #$30			cmp 	#"0"
.8d76	90 03		bcc $8d7b			bcc	 	_CLIDExitFalse
.8d78	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d7a	60		rts				rts
.8d7b					_CLIDExitFalse:
.8d7b	38		sec				sec
.8d7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d7d					Command_LOCAL:
.8d7d	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d7f	20 8b 8d	jsr $8d8b			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d82	b1 30		lda ($30),y			lda 	(codePtr),y
.8d84	c8		iny				iny
.8d85	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d87	f0 f4		beq $8d7d			beq 	Command_LOCAL
.8d89	88		dey				dey 								; unpick pre-get
.8d8a	60		rts				rts
.8d8b					LocaliseNextTerm:
.8d8b	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm 				; evaluate the term
.8d8e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d91	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8d93	f0 69		beq $8dfe			beq		_LNTError
.8d95	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d98	85 36		sta $36				sta 	zTemp0
.8d9a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d9d	85 37		sta $37				sta  	zTemp0+1
.8d9f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8da2	29 10		and #$10			and 	#NSBIsString
.8da4	d0 22		bne $8dc8			bne 	_LNTPushString
.8da6	5a		phy				phy
.8da7	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8da9					_LNTPushNumLoop:
.8da9	b1 36		lda ($36),y			lda		(zTemp0),y
.8dab	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8dae	a9 00		lda #$00			lda 	#0
.8db0	91 36		sta ($36),y			sta 	(zTemp0),y
.8db2	c8		iny				iny
.8db3	c0 05		cpy #$05			cpy 	#5
.8db5	d0 f2		bne $8da9			bne 	_LNTPushNumLoop
.8db7	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8db9	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8dbc	a5 37		lda $37				lda 	zTemp0+1
.8dbe	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8dc1	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8dc3	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8dc6	7a		ply				ply
.8dc7	60		rts				rts
.8dc8					_LNTPushString:
.8dc8	5a		phy				phy
.8dc9	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8dcb	85 38		sta $38				sta 	zTemp1
.8dcd	a0 01		ldy #$01			ldy 	#1
.8dcf	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dd1	85 39		sta $39				sta 	zTemp1+1
.8dd3	a0 00		ldy #$00			ldy 	#0 							; output string
.8dd5	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8dd7	f0 0a		beq $8de3			beq 	_LNTStringOut
.8dd9					_LNTPushStrLoop:
.8dd9	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ddb	f0 06		beq $8de3			beq 	_LNTStringOut
.8ddd	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8de0	c8		iny				iny
.8de1	80 f6		bra $8dd9			bra 	_LNTPushStrLoop
.8de3					_LNTStringOut:
.8de3	98		tya				tya									; output length
.8de4	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8de7	a9 00		lda #$00			lda 	#0 							; clear original string.
.8de9	92 38		sta ($38)			sta 	(zTemp1)
.8deb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8dee	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8df1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8df4	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8df7	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8df9	20 0f a0	jsr $a00f			jsr 	StackPushByte
.8dfc	7a		ply				ply
.8dfd	60		rts				rts
.8dfe					_LNTError:
.8dfe	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.a6a5					LocalPopValue:
.a6a5	20 28 a0	jsr $a028			jsr 	StackPopByte
.a6a8	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a6aa	d0 17		bne $a6c3			bne 	_LPVString
.a6ac	20 28 a0	jsr $a028			jsr 	StackPopByte 				; address
.a6af	85 37		sta $37				sta 	zTemp0+1
.a6b1	20 28 a0	jsr $a028			jsr 	StackPopByte
.a6b4	85 36		sta $36				sta 	zTemp0
.a6b6	5a		phy				phy
.a6b7	a0 04		ldy #$04			ldy 	#4 							; copy back
.a6b9					_LPVNumberCopy:
.a6b9	20 28 a0	jsr $a028			jsr 	StackPopByte
.a6bc	91 36		sta ($36),y			sta 	(zTemp0),y
.a6be	88		dey				dey
.a6bf	10 f8		bpl $a6b9			bpl 	_LPVNumberCopy
.a6c1	7a		ply				ply 								; and complete
.a6c2	60		rts				rts
.a6c3					_LPVString:
.a6c3	20 28 a0	jsr $a028			jsr 	StackPopByte 				; address of record => zTemp0
.a6c6	85 37		sta $37				sta 	zTemp0+1
.a6c8	20 28 a0	jsr $a028			jsr 	StackPopByte
.a6cb	85 36		sta $36				sta 	zTemp0
.a6cd	5a		phy				phy
.a6ce	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a6d0	85 38		sta $38				sta 	zTemp1
.a6d2	a0 01		ldy #$01			ldy 	#1
.a6d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6d6	85 39		sta $39				sta 	zTemp1+1
.a6d8	20 28 a0	jsr $a028			jsr 	StackPopByte 				; # to get => y
.a6db	a8		tay				tay
.a6dc	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a6de	f0 0e		beq $a6ee			beq 	_LPVStringCopied
.a6e0	a9 00		lda #$00			lda 	#0 							; NULL on end
.a6e2	91 38		sta ($38),y			sta 	(zTemp1),y
.a6e4					_LPVStringCopy:
.a6e4	88		dey				dey
.a6e5	30 07		bmi $a6ee			bmi 	_LPVStringCopied
.a6e7	20 28 a0	jsr $a028			jsr 	StackPopByte
.a6ea	91 38		sta ($38),y			sta 	(zTemp1),y
.a6ec	80 f6		bra $a6e4			bra 	_LPVStringCopy
.a6ee					_LPVStringCopied:
.a6ee	fa		plx				plx
.a6ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e01					NewCommand:
.8e01	20 ba 9f	jsr $9fba			jsr 	MemoryNew
.8e04	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e07	20 f6 89	jsr $89f6			jsr 	ClearCommand 				; clear everything.
.8e0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8e0b					Command_Print:
.8e0b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8e0c					_CPLoop:
.8e0c	08		php				php 								; save last action flag
.8e0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8e11	f0 46		beq $8e59			beq 	_CPExit
.8e13	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8e15	f0 42		beq $8e59			beq 	_CPExit
.8e17	68		pla				pla 								; throw last action flag
.8e18	b1 30		lda ($30),y			lda 	(codePtr),y
.8e1a	c8		iny				iny
.8e1b	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8e1d	f0 37		beq $8e56			beq 	_CPContinueWithSameLine
.8e1f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8e21	f0 2e		beq $8e51			beq 	_CPTab
.8e23	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8e25	f0 26		beq $8e4d			beq 	_CPNewLine
.8e27	88		dey				dey 								; undo the get.
.8e28	a2 00		ldx #$00			ldx 	#0
.8e2a	20 c8 9e	jsr $9ec8			jsr 	EvaluateValue 				; get a value into slot 0
.8e2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8e30	29 10		and #$10			and 	#NSBIsString
.8e32	f0 0b		beq $8e3f			beq 	_CPNumber
.8e34	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8e37	ad 08 04	lda $0408			lda 	NSMantissa0
.8e3a	20 1e 94	jsr $941e			jsr 	PrintStringXA
.8e3d	80 cc		bra $8e0b			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e3f					_CPNumber:
.8e3f	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e41	20 9e 9d	jsr $9d9e			jsr 	ConvertNumberToString 		; convert to string
.8e44	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8e46	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8e48	20 1e 94	jsr $941e			jsr 	PrintStringXA
.8e4b	80 be		bra $8e0b			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e4d					_CPNewLine:
.8e4d	a9 0d		lda #$0d			lda 	#13
.8e4f	80 02		bra $8e53			bra 	_CPPrintChar
.8e51					_CPTab:
.8e51	a9 09		lda #$09			lda 	#9 							; print TAB
.8e53					_CPPrintChar:
.8e53	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.8e56					_CPContinueWithSameLine:
.8e56	38		sec				sec 								; loop round with carry set, which
.8e57	80 b3		bra $8e0c			bra 	_CPLoop 					; will inhibit final CR
.8e59					_CPExit:
.8e59	28		plp				plp 								; get last action flag
.8e5a	b0 05		bcs $8e61			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e5c	a9 0d		lda #$0d			lda 	#13 						; print new line
.8e5e	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.8e61					_CPExit2:
.8e61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8e62					CallProcedure:
.8e62	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e64	b1 30		lda ($30),y			lda 	(codePtr),y
.8e66	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e68	f0 0c		beq $8e76			beq 	_CPEndParam
.8e6a					_CPParamLoop:
.8e6a	20 ce 97	jsr $97ce			jsr 	EvaluateExpression 			; get parameter onto stack
.8e6d	e8		inx				inx 								; bump next stack
.8e6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8e70	c8		iny				iny
.8e71	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e73	f0 f5		beq $8e6a			beq 	_CPParamLoop
.8e75	88		dey				dey 								; unpick.
.8e76					_CPEndParam:
.8e76	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8e79	c8		iny				iny									; skip right bracket
.8e7a	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e7c	20 31 a0	jsr $a031			jsr 	StackOpen
.8e7f	20 75 a0	jsr $a075			jsr 	STKSaveCodePosition 		; save loop position
.8e82	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e85	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e87	ad 10 04	lda $0410			lda 	NSMantissa1
.8e8a	85 37		sta $37				sta 	zTemp0+1
.8e8c	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e8e	b2 36		lda ($36)			lda 	(zTemp0)
.8e90	85 30		sta $30				sta 	safePtr
.8e92	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e94	85 31		sta $31				sta 	safePtr+1
.8e96	c8		iny				iny
.8e97	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e99	85 32		sta $32				sta 	safePtr+2
.8e9b	c8		iny				iny
.8e9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9e	85 33		sta $33				sta 	safePtr+3
.8ea0	c8		iny				iny 								; get Y offset -> Y
.8ea1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea3	a8		tay				tay
.8ea4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8ea6	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8ea9	f0 13		beq $8ebe			beq 	_ParamExit 					; if so, exit.
.8eab					_ParamExtract:
.8eab	ca		dex				dex 								; put a local term on the level before
.8eac	20 8b 8d	jsr $8d8b			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8eaf	20 c9 8c	jsr $8cc9			jsr 	AssignVariable 				; assign stacked value to the variable.
.8eb2	e8		inx				inx 								; advance to next parameter to do.
.8eb3	e8		inx				inx
.8eb4	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8eb7	f0 05		beq $8ebe			beq 	_ParamExit
.8eb9	20 06 a7	jsr $a706			jsr 	CheckComma 					; comma seperating parameters
.8ebc	80 ed		bra $8eab			bra 	_ParamExtract
.8ebe					_ParamExit:
.8ebe	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; check )
.8ec1	60		rts				rts 								; and continue from here
.a6f0					Command_ENDPROC:
.a6f0	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a6f2	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a6f4	20 5d a0	jsr $a05d			jsr 	StackCheckFrame
.a6f7	20 86 a0	jsr $a086			jsr 	STKLoadCodePosition 		; restore code position
.a6fa	20 4f a0	jsr $a04f			jsr 	StackClose
.a6fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ec2					Command_Read:
.8ec2	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8ec4	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm
.8ec7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8eca	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ecc	f0 4a		beq $8f18			beq 	_CRSyntax 					; check reference (bit 0)
.8ece	20 61 8f	jsr $8f61			jsr 	SwapDataCodePtrs 			; swap code and data
.8ed1	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ed4	d0 20		bne $8ef6			bne 	_CRContinueData
.8ed6					_CRKeepSearching:
.8ed6	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8ed8	aa		tax				tax
.8ed9	20 37 93	jsr $9337			jsr 	ScanForward
.8edc	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8ede	f0 16		beq $8ef6			beq 	_CRHaveData 				; found it
.8ee0	18		clc				clc
.8ee1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ee3	65 30		adc $30				adc 	codePtr
.8ee5	85 30		sta $30				sta 	codePtr
.8ee7	90 02		bcc $8eeb			bcc 	_CREExit
.8ee9	e6 31		inc $31				inc 	codePtr+1
.8eeb					_CREExit:
.8eeb	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8eed	b2 30		lda ($30)			lda 	(codePtr)
.8eef	d0 e5		bne $8ed6			bne 	_CRKeepSearching
.8ef1	a9 0b		lda #$0b		lda	#11
.8ef3	4c c5 93	jmp $93c5		jmp	ErrorHandler
.8ef6					_CRHaveData:
.8ef6					_CRContinueData:
.8ef6	a2 01		ldx #$01			ldx 	#1
.8ef8	20 c8 9e	jsr $9ec8			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8efb	ca		dex				dex
.8efc	20 c9 8c	jsr $8cc9			jsr		AssignVariable 				; do the assignment
.8eff	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8f02	b1 30		lda ($30),y			lda 	(codePtr),y
.8f04	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8f06	d0 04		bne $8f0c			bne 	_CRSwapBack
.8f08	c8		iny				iny 								; consume comma
.8f09	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8f0c					_CRSwapBack:
.8f0c	20 61 8f	jsr $8f61			jsr 	SwapDataCodePtrs			; swap them back.
.8f0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8f11	c8		iny				iny
.8f12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f14	f0 ac		beq $8ec2			beq 	Command_Read 				; if so go round again.
.8f16	88		dey				dey 								; unpick get.
.8f17	60		rts				rts
.8f18					_CRSyntax:
.8f18	4c e4 ac	jmp $ace4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f1b					RemCommand:
.8f1b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f1d	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f1f	d0 06		bne $8f27			bne 	_RMExit
.8f21	c8		iny				iny
.8f22	98		tya				tya
.8f23	38		sec				sec
.8f24	71 30		adc ($30),y			adc 	(codePtr),y
.8f26	a8		tay				tay
.8f27					_RMExit:
.8f27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f28					Command_REPEAT:
.8f28	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f2a	20 31 a0	jsr $a031			jsr 	StackOpen
.8f2d	20 75 a0	jsr $a075			jsr 	STKSaveCodePosition 		; save loop position
.8f30	60		rts				rts
.8f31					Command_UNTIL:
.8f31	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f33	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f35	20 5d a0	jsr $a05d			jsr 	StackCheckFrame
.8f38	a2 00		ldx #$00			ldx 	#0
.8f3a	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; work out the number
.8f3d	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; check if zero
.8f40	f0 04		beq $8f46			beq 	_CULoopBack 				; if so keep looping
.8f42	20 4f a0	jsr $a04f			jsr 	StackClose		 			; return
.8f45	60		rts				rts
.8f46					_CULoopBack:
.8f46	20 86 a0	jsr $a086			jsr 	STKLoadCodePosition 		; loop back
.8f49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f4a					Command_Restore:
.8f4a	20 61 8f	jsr $8f61			jsr 	SwapDataCodePtrs 			; swap code and data
.8f4d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f4f	85 30		sta $30				sta 	codePtr
.8f51	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f53	85 31		sta $31				sta 	codePtr+1
.8f55	20 61 8f	jsr $8f61			jsr 	SwapDataCodePtrs 			; put them back
.8f58	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f5a	8d 9b 04	sta $049b			sta 	dataPointer+4
.8f5d	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8f60	60		rts				rts
.8f61					SwapDataCodePtrs:
.8f61	da		phx				phx
.8f62	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f64					_SDCPLoop:
.8f64	b5 30		lda $30,x			lda 	safePtr,x
.8f66	48		pha				pha
.8f67	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8f6a	95 30		sta $30,x			sta 	safePtr,x
.8f6c	68		pla				pla
.8f6d	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8f70	ca		dex				dex
.8f71	10 f1		bpl $8f64			bpl 	_SDCPLoop
.8f73	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8f76	8c 9b 04	sty $049b			sty 	dataPointer+4
.8f79	a8		tay				tay
.8f7a	fa		plx				plx
.8f7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f7c					CommandRUN:
.8f7c	20 f6 89	jsr $89f6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8f7f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f81	85 30		sta $30				sta 	codePtr
.8f83	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f85	85 31		sta $31				sta 	codePtr+1
.8f87					RUNNewLine:
.8f87	b2 30		lda ($30)			lda 	(codePtr)
.8f89	f0 5e		beq $8fe9			beq 	CRNoProgram         		; no then END.
.8f8b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f8d	9a		txs				txs
.8f8e					RUNCodePointerLine:
.8f8e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8f90					_CRIncMainLoop:
.8f90	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8f93	d0 05		bne $8f9a			bne 	_CRNoBreakCheck
.8f95	20 c9 ae	jsr $aec9			jsr 	EXTBreakCheck 				; break check
.8f98	f0 4a		beq $8fe4			beq 	_CRBreak
.8f9a					_CRNoBreakCheck:
.8f9a	c8		iny				iny
.8f9b					_CRMainLoop:
.8f9b	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f9e	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa0	10 10		bpl $8fb2			bpl 	_CRNotKeyword
.8fa2	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8fa4	b0 04		bcs $8faa			bcs 	_CRIsKeyword
.8fa6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fa8	b0 34		bcs $8fde			bcs		_CRSyntaxError
.8faa					_CRIsKeyword:
.8faa	c8		iny				iny 								; consume command
.8fab	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fac	aa		tax				tax 								; put in X for vector jump
.8fad	20 e1 8f	jsr $8fe1			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fb0	80 e9		bra $8f9b			bra 	_CRMainLoop 				; and loop round
.8fb2					_CRNotKeyword:
.8fb2	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fb4	f0 da		beq $8f90			beq 	_CRIncMainLoop
.8fb6	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fb8	90 05		bcc $8fbf			bcc 	_CRNotVariable
.8fba					_CRGoLet:
.8fba	20 8d 8c	jsr $8c8d			jsr 	LetCommand
.8fbd	80 dc		bra $8f9b			bra 	_CRMainLoop
.8fbf					_CRNotVariable:
.8fbf	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8fc1	f0 f7		beq $8fba			beq 	_CRGoLet
.8fc3	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fc5	f0 f3		beq $8fba			beq 	_CRGoLet
.8fc7	c9 21		cmp #$21			cmp 	#KWD_PLING
.8fc9	f0 ef		beq $8fba			beq 	_CRGoLet
.8fcb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fcd	f0 09		beq $8fd8			beq 	_CRGoRem
.8fcf	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fd1	d0 0b		bne $8fde			bne 	_CRSyntaxError
.8fd3	20 96 88	jsr $8896			jsr 	LabelHere
.8fd6	80 c3		bra $8f9b			bra 	_CRMainLoop
.8fd8					_CRGoRem:
.8fd8	c8		iny				iny
.8fd9	20 1b 8f	jsr $8f1b			jsr 	RemCommand
.8fdc	80 bd		bra $8f9b			bra 	_CRMainLoop
.8fde					_CRSyntaxError:
.8fde	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.8fe1					_CRCallVector0:
.8fe1	7c 8c 90	jmp ($908c,x)			jmp 	(VectorSet0,x)
.8fe4					_CRBreak:
.8fe4	a9 01		lda #$01		lda	#1
.8fe6	4c c5 93	jmp $93c5		jmp	ErrorHandler
.8fe9					CRNoProgram:
.8fe9	4c 13 8b	jmp $8b13			jmp 	EndCommand
.8fec					EOLCommand:
.8fec	18		clc				clc
.8fed	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fef	65 30		adc $30				adc 	codePtr
.8ff1	85 30		sta $30				sta 	codePtr
.8ff3	90 02		bcc $8ff7			bcc 	_CREExit
.8ff5	e6 31		inc $31				inc 	codePtr+1
.8ff7					_CREExit:
.8ff7	80 8e		bra $8f87			bra 	RunNewLine
.8ff9					Shift1Command:
.8ff9	b1 30		lda ($30),y			lda 	(codePtr),y
.8ffb	c8		iny				iny
.8ffc	0a		asl a				asl 	a
.8ffd	aa		tax				tax
.8ffe	7c ee 90	jmp ($90ee,x)			jmp 	(VectorSet1,x)
.9001					Shift2Command:
.9001	b1 30		lda ($30),y			lda 	(codePtr),y
.9003	c8		iny				iny
.9004	0a		asl a				asl 	a
.9005	aa		tax				tax
.9006	7c 06 91	jmp ($9106,x)			jmp 	(VectorSet2,x)
.9009					Unused1:
.9009					Unused2:
.9009					Unused3:
.9009					Unused4:
.9009	4c e4 ac	jmp $ace4			jmp 	SyntaxError
>900c							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.900c					VectorSetPunc:
>900c	6f 95					.word	ShiftLeft                        ; $00 <<
>900e	69 94					.word	BinaryCompareLessEqual           ; $01 <=
>9010	5f 94					.word	BinaryCompareNotEqual            ; $02 <>
>9012	e4 ac					.word	SyntaxError                      ; $03 !!3
>9014	e4 ac					.word	SyntaxError                      ; $04 ><
>9016	73 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9018	72 95					.word	ShiftRight                       ; $06 >>
>901a	e4 ac					.word	SyntaxError                      ; $07 !!7
>901c	e4 ac					.word	SyntaxError                      ; $08 !!8
>901e	e4 ac					.word	SyntaxError                      ; $09 !!9
>9020	e4 ac					.word	SyntaxError                      ; $0a !!10
>9022	e4 ac					.word	SyntaxError                      ; $0b !!11
>9024	e4 ac					.word	SyntaxError                      ; $0c !!12
>9026	e4 ac					.word	SyntaxError                      ; $0d !!13
>9028	e4 ac					.word	SyntaxError                      ; $0e !!14
>902a	e4 ac					.word	SyntaxError                      ; $0f !!15
>902c	e4 ac					.word	SyntaxError                      ; $10 @
>902e	e4 ac					.word	SyntaxError                      ; $11 !!17
>9030	e4 ac					.word	SyntaxError                      ; $12 !!18
>9032	e4 ac					.word	SyntaxError                      ; $13 [
>9034	17 a7					.word	IntegerDivide                    ; $14 \
>9036	e4 ac					.word	SyntaxError                      ; $15 ]
>9038	f8 96					.word	EorInteger                       ; $16 ^
>903a	e4 ac					.word	SyntaxError                      ; $17 _
>903c	e4 ac					.word	SyntaxError                      ; $18 `
>903e	e4 ac					.word	SyntaxError                      ; $19 !!25
>9040	e4 ac					.word	SyntaxError                      ; $1a !!26
>9042	e4 ac					.word	SyntaxError                      ; $1b {
>9044	b2 96					.word	OraInteger                       ; $1c |
>9046	e4 ac					.word	SyntaxError                      ; $1d }
>9048	e4 ac					.word	SyntaxError                      ; $1e ~
>904a	e4 ac					.word	SyntaxError                      ; $1f [7m<7F>[m
>904c	e4 ac					.word	SyntaxError                      ; $20
>904e	3e 97					.word	WordIndirect                     ; $21 !
>9050	e4 ac					.word	SyntaxError                      ; $22 "
>9052	e4 ac					.word	SyntaxError                      ; $23 #
>9054	e4 ac					.word	SyntaxError                      ; $24 $
>9056	64 a7					.word	IntegerModulus                   ; $25 %
>9058	6c 96					.word	AndInteger                       ; $26 &
>905a	e4 ac					.word	SyntaxError                      ; $27 '
>905c	e4 ac					.word	SyntaxError                      ; $28 (
>905e	e4 ac					.word	SyntaxError                      ; $29 )
>9060	d9 a7					.word	MulInteger                       ; $2a *
>9062	06 96					.word	AddInteger                       ; $2b +
>9064	e4 ac					.word	SyntaxError                      ; $2c ,
>9066	41 96					.word	SubInteger                       ; $2d -
>9068	e4 ac					.word	SyntaxError                      ; $2e .
>906a	70 a9					.word	FDivideCommand                   ; $2f /
>906c	e4 ac					.word	SyntaxError                      ; $30 0
>906e	e4 ac					.word	SyntaxError                      ; $31 1
>9070	e4 ac					.word	SyntaxError                      ; $32 2
>9072	e4 ac					.word	SyntaxError                      ; $33 3
>9074	e4 ac					.word	SyntaxError                      ; $34 4
>9076	e4 ac					.word	SyntaxError                      ; $35 5
>9078	e4 ac					.word	SyntaxError                      ; $36 6
>907a	e4 ac					.word	SyntaxError                      ; $37 7
>907c	e4 ac					.word	SyntaxError                      ; $38 8
>907e	e4 ac					.word	SyntaxError                      ; $39 9
>9080	e4 ac					.word	SyntaxError                      ; $3a :
>9082	e4 ac					.word	SyntaxError                      ; $3b ;
>9084	4b 94					.word	BinaryCompareLess                ; $3c <
>9086	41 94					.word	BinaryCompareEqual               ; $3d =
>9088	55 94					.word	BinaryCompareGreater             ; $3e >
>908a	65 97					.word	ByteIndirect                     ; $3f ?
.908c					VectorSet0:
>908c	ec 8f					.word	EOLCommand                       ; $80 !0:EOF
>908e	f9 8f					.word	Shift1Command                    ; $81 !1:SH1
>9090	01 90					.word	Shift2Command                    ; $82 !2:SH2
>9092	b6 aa					.word	AbsUnary                         ; $83 ABS(
>9094	2f 9c					.word	AllocUnary                       ; $84 ALLOC(
>9096	c6 aa					.word	AscUnary                         ; $85 ASC(
>9098	4f 9d					.word	ChrUnary                         ; $86 CHR$(
>909a	3d 94					.word	UnaryFalse                       ; $87 FALSE
>909c	d3 aa					.word	FracUnary                        ; $88 FRAC(
>909e	e9 aa					.word	IntUnary                         ; $89 INT(
>90a0	3f ab					.word	IsValUnary                       ; $8a ISVAL(
>90a2	29 9e					.word	Unary_Left                       ; $8b LEFT$(
>90a4	fb aa					.word	LenUnary                         ; $8c LEN(
>90a6	53 9e					.word	Unary_Mid                        ; $8d MID$(
>90a8	9f 9c					.word	Unary_Not                        ; $8e NOT(
>90aa	b5 9c					.word	Unary_Random                     ; $8f RANDOM(
>90ac	39 9e					.word	Unary_Right                      ; $90 RIGHT$(
>90ae	ce 9c					.word	Unary_Rnd                        ; $91 RND(
>90b0	15 ab					.word	SgnUnary                         ; $92 SGN(
>90b2	61 9d					.word	SpcUnary                         ; $93 SPC(
>90b4	7c 9d					.word	Unary_Str                        ; $94 STR$(
>90b6	31 94					.word	UnaryTrue                        ; $95 TRUE
>90b8	35 ab					.word	ValUnary                         ; $96 VAL(
>90ba	16 8b					.word	ForCommand                       ; $97 FOR
>90bc	63 8c					.word	IfCommand                        ; $98 IF
>90be	09 90					.word	Unused1                          ; $99 PROC
>90c0	28 8f					.word	Command_REPEAT                   ; $9a REPEAT
>90c2	96 93					.word	Command_WHILE                    ; $9b WHILE
>90c4	8c 8c					.word	EndIf                            ; $9c ENDIF
>90c6	f0 a6					.word	Command_ENDPROC                  ; $9d ENDPROC
>90c8	d0 8b					.word	NextCommand                      ; $9e NEXT
>90ca	09 90					.word	Unused4                          ; $9f THEN
>90cc	31 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>90ce	b7 93					.word	Command_WEND                     ; $a1 WEND
>90d0	bc 89					.word	CallCommand                      ; $a2 CALL
>90d2	e4 ac					.word	SyntaxError                      ; $a3 CLS
>90d4	4e 8a					.word	Command_Data                     ; $a4 DATA
>90d6	56 8a					.word	DimCommand                       ; $a5 DIM
>90d8	09 90					.word	Unused3                          ; $a6 DOWNTO
>90da	85 8c					.word	ElseCode                         ; $a7 ELSE
>90dc	29 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>90de	47 8c					.word	GotoCommand                      ; $a9 GOTO
>90e0	8d 8c					.word	LetCommand                       ; $aa LET
>90e2	7d 8d					.word	Command_LOCAL                    ; $ab LOCAL
>90e4	0b 8e					.word	Command_Print                    ; $ac PRINT
>90e6	c2 8e					.word	Command_Read                     ; $ad READ
>90e8	1b 8f					.word	RemCommand                       ; $ae REM
>90ea	39 8c					.word	Command_RETURN                   ; $af RETURN
>90ec	09 90					.word	Unused2                          ; $b0 TO
.90ee					VectorSet1:
>90ee	e4 ac					.word	SyntaxError                      ; $80 !0:EOF
>90f0	e4 ac					.word	SyntaxError                      ; $81 !1:SH1
>90f2	e4 ac					.word	SyntaxError                      ; $82 !2:SH2
>90f4	8d 89					.word	AssembleCommand                  ; $83 ASSEMBLE
>90f6	ac 89					.word	AssertCommand                    ; $84 ASSERT
>90f8	f6 89					.word	ClearCommand                     ; $85 CLEAR
>90fa	13 8b					.word	EndCommand                       ; $86 END
>90fc	e2 8c					.word	Command_List                     ; $87 LIST
>90fe	01 8e					.word	NewCommand                       ; $88 NEW
>9100	4a 8f					.word	Command_Restore                  ; $89 RESTORE
>9102	7c 8f					.word	CommandRUN                       ; $8a RUN
>9104	8e 91					.word	StopCommand                      ; $8b STOP
.9106					VectorSet2:
>9106	e4 ac					.word	SyntaxError                      ; $80 !0:EOF
>9108	e4 ac					.word	SyntaxError                      ; $81 !1:SH1
>910a	e4 ac					.word	SyntaxError                      ; $82 !2:SH2
>910c	a3 ab					.word	Assemble_adc                     ; $83 ADC
>910e	9b ab					.word	Assemble_and                     ; $84 AND
>9110	b7 ab					.word	Assemble_asl                     ; $85 ASL
>9112	21 ac					.word	Assemble_bcc                     ; $86 BCC
>9114	25 ac					.word	Assemble_bcs                     ; $87 BCS
>9116	2d ac					.word	Assemble_beq                     ; $88 BEQ
>9118	e4 ab					.word	Assemble_bit                     ; $89 BIT
>911a	15 ac					.word	Assemble_bmi                     ; $8a BMI
>911c	29 ac					.word	Assemble_bne                     ; $8b BNE
>911e	11 ac					.word	Assemble_bpl                     ; $8c BPL
>9120	31 ac					.word	Assemble_bra                     ; $8d BRA
>9122	35 ac					.word	Assemble_brk                     ; $8e BRK
>9124	19 ac					.word	Assemble_bvc                     ; $8f BVC
>9126	1d ac					.word	Assemble_bvs                     ; $90 BVS
>9128	3d ac					.word	Assemble_clc                     ; $91 CLC
>912a	91 ac					.word	Assemble_cld                     ; $92 CLD
>912c	51 ac					.word	Assemble_cli                     ; $93 CLI
>912e	81 ac					.word	Assemble_clv                     ; $94 CLV
>9130	af ab					.word	Assemble_cmp                     ; $95 CMP
>9132	f8 ab					.word	Assemble_cpx                     ; $96 CPX
>9134	f3 ab					.word	Assemble_cpy                     ; $97 CPY
>9136	d5 ab					.word	Assemble_dec                     ; $98 DEC
>9138	8d ac					.word	Assemble_dex                     ; $99 DEX
>913a	69 ac					.word	Assemble_dey                     ; $9a DEY
>913c	9f ab					.word	Assemble_eor                     ; $9b EOR
>913e	da ab					.word	Assemble_inc                     ; $9c INC
>9140	9d ac					.word	Assemble_inx                     ; $9d INX
>9142	89 ac					.word	Assemble_iny                     ; $9e INY
>9144	0c ac					.word	Assemble_jmp                     ; $9f JMP
>9146	07 ac					.word	Assemble_jsr                     ; $a0 JSR
>9148	ab ab					.word	Assemble_lda                     ; $a1 LDA
>914a	d0 ab					.word	Assemble_ldx                     ; $a2 LDX
>914c	ee ab					.word	Assemble_ldy                     ; $a3 LDY
>914e	c1 ab					.word	Assemble_lsr                     ; $a4 LSR
>9150	a1 ac					.word	Assemble_nop                     ; $a5 NOP
>9152	97 ab					.word	Assemble_ora                     ; $a6 ORA
>9154	4d ac					.word	Assemble_pha                     ; $a7 PHA
>9156	39 ac					.word	Assemble_php                     ; $a8 PHP
>9158	95 ac					.word	Assemble_phx                     ; $a9 PHX
>915a	55 ac					.word	Assemble_phy                     ; $aa PHY
>915c	5d ac					.word	Assemble_pla                     ; $ab PLA
>915e	41 ac					.word	Assemble_plp                     ; $ac PLP
>9160	a9 ac					.word	Assemble_plx                     ; $ad PLX
>9162	65 ac					.word	Assemble_ply                     ; $ae PLY
>9164	bc ab					.word	Assemble_rol                     ; $af ROL
>9166	c6 ab					.word	Assemble_ror                     ; $b0 ROR
>9168	49 ac					.word	Assemble_rti                     ; $b1 RTI
>916a	59 ac					.word	Assemble_rts                     ; $b2 RTS
>916c	b3 ab					.word	Assemble_sbc                     ; $b3 SBC
>916e	45 ac					.word	Assemble_sec                     ; $b4 SEC
>9170	a5 ac					.word	Assemble_sed                     ; $b5 SED
>9172	61 ac					.word	Assemble_sei                     ; $b6 SEI
>9174	a7 ab					.word	Assemble_sta                     ; $b7 STA
>9176	99 ac					.word	Assemble_stp                     ; $b8 STP
>9178	cb ab					.word	Assemble_stx                     ; $b9 STX
>917a	e9 ab					.word	Assemble_sty                     ; $ba STY
>917c	df ab					.word	Assemble_stz                     ; $bb STZ
>917e	7d ac					.word	Assemble_tax                     ; $bc TAX
>9180	79 ac					.word	Assemble_tay                     ; $bd TAY
>9182	02 ac					.word	Assemble_trb                     ; $be TRB
>9184	fd ab					.word	Assemble_tsb                     ; $bf TSB
>9186	85 ac					.word	Assemble_tsx                     ; $c0 TSX
>9188	6d ac					.word	Assemble_txa                     ; $c1 TXA
>918a	75 ac					.word	Assemble_txs                     ; $c2 TXS
>918c	71 ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.918e					StopCommand:
.918e	a9 08		lda #$08		lda	#8
.9190	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9193					ListConvertLine:
.9193	9c 9d 04	stz $049d			stz 	tbOffset
.9196	9c a9 04	stz $04a9			stz 	tokenBuffer
.9199	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.919b	b1 30		lda ($30),y			lda 	(codePtr),y
.919d	aa		tax				tax
.919e	88		dey				dey
.919f	b1 30		lda ($30),y			lda 	(codePtr),y
.91a1	20 5a a8	jsr $a85a			jsr 	ConvertInt16
.91a4	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.91a6	86 37		stx $37				stx 	zTemp0+1
.91a8	a0 00		ldy #$00			ldy 	#0
.91aa					_LCCopyNumber:
.91aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.91ac	20 ac 92	jsr $92ac			jsr 	LCLWrite
.91af	c8		iny				iny
.91b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.91b2	d0 f6		bne $91aa			bne 	_LCCopyNumber
.91b4					_LCPadOut:
.91b4	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.91b6	20 ac 92	jsr $92ac			jsr 	LCLWrite
.91b9	ad 9d 04	lda $049d			lda 	tbOffset
.91bc	c9 06		cmp #$06			cmp 	#6
.91be	d0 f4		bne $91b4			bne 	_LCPadOut
.91c0	a0 03		ldy #$03			ldy 	#3 							; start position.
.91c2					_LCMainLoop:
.91c2	b1 30		lda ($30),y			lda 	(codePtr),y
.91c4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.91c6	f0 17		beq $91df			beq 	_LCExit
.91c8	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.91ca	90 14		bcc $91e0			bcc 	_LCDoubles
.91cc	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.91ce	90 20		bcc $91f0			bcc 	_LCShiftPunc
.91d0	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.91d2	90 2b		bcc $91ff			bcc 	_LCPunctuation
.91d4	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.91d6	90 2d		bcc $9205			bcc 	_LCIdentifiers
.91d8	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.91da	90 49		bcc $9225			bcc 	_LCTokens
.91dc	4c 80 92	jmp $9280			jmp 	_LCData 					; 254-5 are data objects
.91df					_LCExit:
.91df	60		rts				rts
.91e0					_LCDoubles:
.91e0	48		pha				pha
.91e1	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.91e2	29 02		and #$02			and 	#2
.91e4	09 3c		ora #$3c			ora 	#60 						; make < >
.91e6	20 ac 92	jsr $92ac			jsr 	LCLWrite
.91e9	68		pla				pla 								; restore, do lower bit
.91ea	29 03		and #$03			and 	#3
.91ec	09 3c		ora #$3c			ora 	#60
.91ee	80 0f		bra $91ff			bra		_LCPunctuation 				; print, increment, loop
.91f0					_LCShiftPunc:
.91f0	aa		tax				tax 								; save in X
.91f1	29 07		and #$07			and 	#7 							; lower 3 bits
.91f3	f0 02		beq $91f7			beq 	_LCNoAdd
.91f5	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.91f7					_LCNoAdd:
.91f7	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.91f9	90 02		bcc $91fd			bcc 	_LCNoAdd2
.91fb	09 20		ora #$20			ora 	#32 						; adds $20
.91fd					_LCNoAdd2:
.91fd	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.91ff					_LCPunctuation:
.91ff	c8		iny				iny 								; consume character
.9200	20 ac 92	jsr $92ac			jsr 	LCLWrite 					; write it out.
.9203	80 bd		bra $91c2			bra 	_LCMainLoop 				; go round again.
.9205					_LCIdentifiers:
.9205	18		clc				clc 								; convert to physical address
.9206	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9208	85 37		sta $37				sta 	zTemp0+1
.920a	c8		iny				iny
.920b	b1 30		lda ($30),y			lda 	(codePtr),y
.920d	85 36		sta $36				sta 	zTemp0
.920f	c8		iny				iny
.9210	5a		phy				phy 								; save position
.9211	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9213					_LCOutIdentifier:
.9213	c8		iny				iny
.9214	b1 36		lda ($36),y			lda 	(zTemp0),y
.9216	29 7f		and #$7f			and 	#$7F
.9218	20 da 92	jsr $92da			jsr 	LCLLowerCase
.921b	20 ac 92	jsr $92ac			jsr 	LCLWrite
.921e	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9220	10 f1		bpl $9213			bpl 	_LCOutIdentifier
.9222	7a		ply				ply 								; restore position
.9223	80 9d		bra $91c2			bra 	_LCMainLoop
.9225					_LCTokens:
.9225	aa		tax				tax 								; token in X
.9226	a9 aa		lda #$aa			lda 	#((KeywordSet2) & $FF)
.9228	85 36		sta $36				sta 	0+zTemp0
.922a	a9 a2		lda #$a2			lda 	#((KeywordSet2) >> 8)
.922c	85 37		sta $37				sta 	1+zTemp0
.922e	e0 82		cpx #$82			cpx 	#$82
.9230	f0 16		beq $9248			beq 	_LCUseShift
.9232	a9 66		lda #$66			lda 	#((KeywordSet1) & $FF)
.9234	85 36		sta $36				sta 	0+zTemp0
.9236	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.9238	85 37		sta $37				sta 	1+zTemp0
.923a	e0 81		cpx #$81			cpx 	#$81
.923c	f0 0a		beq $9248			beq 	_LCUseShift
.923e	a9 34		lda #$34			lda 	#((KeywordSet0) & $FF)
.9240	85 36		sta $36				sta 	0+zTemp0
.9242	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.9244	85 37		sta $37				sta 	1+zTemp0
.9246	80 01		bra $9249			bra 	_LCNoShift
.9248					_LCUseShift:
.9248	c8		iny				iny
.9249					_LCNoShift:
.9249	20 bb 92	jsr $92bb			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.924c	b1 30		lda ($30),y			lda 	(codePtr),y
.924e	aa		tax				tax 								; into X
.924f					_LCFindText:
.924f	ca		dex				dex
.9250	10 0e		bpl $9260			bpl 	_LCFoundText 				; found text.
.9252	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9254	1a		inc a				inc 	a 							; one extra for size
.9255	38		sec				sec 								; one extra for checksum
.9256	65 36		adc $36				adc 	zTemp0 						; go to next token
.9258	85 36		sta $36				sta 	zTemp0
.925a	90 f3		bcc $924f			bcc 	_LCFindText
.925c	e6 37		inc $37				inc 	zTemp0+1
.925e	80 ef		bra $924f			bra 	_LCFindText
.9260					_LCFoundText:
.9260	5a		phy				phy 								; save List position
.9261	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9263	aa		tax				tax
.9264	a0 02		ldy #$02			ldy 	#2
.9266					_LCCopyToken:
.9266	b1 36		lda ($36),y			lda 	(zTemp0),y
.9268	20 da 92	jsr $92da			jsr 	LCLLowerCase
.926b	20 ac 92	jsr $92ac			jsr 	LCLWrite
.926e	c8		iny				iny
.926f	ca		dex				dex
.9270	d0 f4		bne $9266			bne 	_LCCopyToken
.9272	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9274	f0 05		beq $927b			beq 	_LCNoSpace
.9276	a9 20		lda #$20			lda 	#' '
.9278	20 ac 92	jsr $92ac			jsr 	LCLWrite
.927b					_LCNoSpace:
.927b	7a		ply				ply 								; restore position.
.927c	c8		iny				iny 								; consume token
.927d	4c c2 91	jmp $91c2			jmp 	_LCMainLoop 				; and go around again.
.9280					_LCData:
.9280	48		pha				pha 								; save type $FE/$FF
.9281	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9283	c9 fe		cmp #$fe			cmp 	#$FE
.9285	f0 02		beq $9289			beq 	_LCHaveOpener
.9287	a2 22		ldx #$22			ldx 	#'"'
.9289					_LCHaveOpener:
.9289	8a		txa				txa 								; output prefix (# or ")
.928a	20 ac 92	jsr $92ac			jsr 	LCLWrite
.928d	c8		iny				iny 								; get count
.928e	b1 30		lda ($30),y			lda 	(codePtr),y
.9290	aa		tax				tax
.9291	c8		iny				iny 								; point at first character
.9292					_LCOutData:
.9292	b1 30		lda ($30),y			lda 	(codePtr),y
.9294	c9 00		cmp #$00			cmp 	#0
.9296	f0 03		beq $929b			beq 	_LCNoPrint
.9298	20 ac 92	jsr $92ac			jsr 	LCLWrite
.929b					_LCNoPrint:
.929b	c8		iny				iny
.929c	ca		dex				dex
.929d	d0 f3		bne $9292			bne 	_LCOutData
.929f	68		pla				pla 								; closing " required ?
.92a0	c9 ff		cmp #$ff			cmp 	#$FF
.92a2	d0 05		bne $92a9			bne 	_LCNoQuote
.92a4	a9 22		lda #$22			lda 	#'"'
.92a6	20 ac 92	jsr $92ac			jsr 	LCLWrite
.92a9					_LCNoQuote:
.92a9	4c c2 91	jmp $91c2			jmp 	_LCMainLoop
.92ac					LCLWrite:
.92ac	da		phx				phx
.92ad	ae 9d 04	ldx $049d			ldx 	tbOffset
.92b0	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.92b3	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.92b6	ee 9d 04	inc $049d			inc 	tbOffset
.92b9	fa		plx				plx
.92ba	60		rts				rts
.92bb					LCCheckSpaceRequired:
.92bb	ae 9d 04	ldx $049d			ldx 	tbOffset
.92be	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.92c1	20 da 92	jsr $92da			jsr 	LCLLowerCase 				; saves a little effort
.92c4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.92c6	90 11		bcc $92d9			bcc 	_LCCSRExit
.92c8	c9 3a		cmp #$3a			cmp 	#"9"+1
.92ca	90 08		bcc $92d4			bcc 	_LCCSRSpace
.92cc	c9 61		cmp #$61			cmp 	#"a"
.92ce	90 09		bcc $92d9			bcc 	_LCCSRExit
.92d0	c9 7b		cmp #$7b			cmp 	#"z"+1
.92d2	b0 05		bcs $92d9			bcs 	_LCCSRExit
.92d4					_LCCSRSpace:
.92d4	a9 20		lda #$20			lda 	#' '
.92d6	20 ac 92	jsr $92ac			jsr 	LCLWrite
.92d9					_LCCSRExit:
.92d9	60		rts				rts
.92da					LCLLowerCase:
.92da	c9 41		cmp #$41			cmp 	#"A"
.92dc	90 06		bcc $92e4			bcc 	_LCLLCOut
.92de	c9 5b		cmp #$5b			cmp 	#"Z"+1
.92e0	b0 02		bcs $92e4			bcs 	_LCLLCOut
.92e2	69 20		adc #$20			adc 	#$20
.92e4					_LCLLCOut:
.92e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92e5					ProcedureScan:
.92e5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92e7	85 30		sta $30				sta 	codePtr
.92e9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92eb	85 31		sta $31				sta 	codePtr+1
.92ed					_PSLoop:
.92ed	b2 30		lda ($30)			lda 	(codePtr)
.92ef	f0 42		beq $9333			beq 	_PSExit
.92f1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.92f3	b1 30		lda ($30),y			lda 	(codePtr),y
.92f5	c9 99		cmp #$99			cmp 	#KWD_PROC
.92f7	d0 2d		bne $9326			bne 	_PSNext
.92f9	c8		iny				iny 								; get the address of the record to zTemp0 and
.92fa	b1 30		lda ($30),y			lda 	(codePtr),y
.92fc	29 c0		and #$c0			and 	#$C0
.92fe	c9 40		cmp #$40			cmp 	#$40
.9300	d0 32		bne $9334			bne 	_PSSyntax
.9302	b1 30		lda ($30),y			lda 	(codePtr),y
.9304	18		clc				clc
.9305	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9307	85 37		sta $37				sta 	zTemp0+1
.9309	c8		iny				iny 								; LSB
.930a	b1 30		lda ($30),y			lda 	(codePtr),y
.930c	85 36		sta $36				sta 	zTemp0
.930e	c8		iny				iny 								; character after variable call.
.930f	98		tya				tya 								; save Y offset at +7
.9310	a0 07		ldy #$07			ldy 	#7
.9312	91 36		sta ($36),y			sta 	(zTemp0),y
.9314	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9316	a0 02		ldy #$02			ldy 	#2
.9318	91 36		sta ($36),y			sta 	(zTemp0),y
.931a	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.931c					_PSCopy:
.931c	b5 30		lda $30,x			lda 	safePtr,x
.931e	c8		iny				iny
.931f	91 36		sta ($36),y			sta 	(zTemp0),y
.9321	e8		inx				inx
.9322	e0 04		cpx #$04			cpx 	#4
.9324	d0 f6		bne $931c			bne 	_PSCopy
.9326					_PSNext:
.9326	18		clc				clc
.9327	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9329	65 30		adc $30				adc 	codePtr
.932b	85 30		sta $30				sta 	codePtr
.932d	90 02		bcc $9331			bcc 	_CREExit
.932f	e6 31		inc $31				inc 	codePtr+1
.9331					_CREExit:
.9331	80 ba		bra $92ed			bra 	_PSLoop
.9333					_PSExit:
.9333	60		rts				rts
.9334					_PSSyntax:
.9334	4c e4 ac	jmp $ace4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9337					ScanForward:
.9337	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9339	86 37		stx $37				stx 	zTemp0+1
.933b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.933d					_ScanLoop:
.933d	b1 30		lda ($30),y			lda 	(codePtr),y
.933f	c8		iny				iny
.9340	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9342	d0 0e		bne $9352			bne 	_ScanGoNext
.9344	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9346	f0 04		beq $934c			beq 	_ScanMatch
.9348	c5 37		cmp $37				cmp 	zTemp0+1
.934a	d0 06		bne $9352			bne 	_ScanGoNext
.934c					_ScanMatch:
.934c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.934e	d0 01		bne $9351			bne 	_ScanNotEndEOL
.9350	88		dey				dey
.9351					_ScanNotEndEOL:
.9351	60		rts				rts
.9352					_ScanGoNext:
.9352	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9354	90 e7		bcc $933d			bcc 	_ScanLoop
.9356	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9358	90 18		bcc $9372			bcc 	_ScanSkipOne
.935a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.935c	b0 2f		bcs $938d			bcs 	_ScanSkipData
.935e	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9360	90 db		bcc $933d			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9362	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.9364	b0 d7		bcs $933d			bcs 	_ScanLoop
.9366	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9368	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.936a	b0 d1		bcs $933d			bcs 	_ScanLoop
.936c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.936e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9370	80 cb		bra $933d			bra 	_ScanLoop
.9372					_ScanSkipOne:
.9372	c8		iny				iny 								; consume the extra one.
.9373	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9375	d0 c6		bne $933d			bne 	_ScanLoop
.9377	18		clc				clc
.9378	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.937a	65 30		adc $30				adc 	codePtr
.937c	85 30		sta $30				sta 	codePtr
.937e	90 02		bcc $9382			bcc 	_CREExit
.9380	e6 31		inc $31				inc 	codePtr+1
.9382					_CREExit:
.9382	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9384	b2 30		lda ($30)			lda 	(codePtr)
.9386	d0 b5		bne $933d			bne 	_ScanLoop 					; if not zero, more to scan
.9388	a9 13		lda #$13		lda	#19
.938a	4c c5 93	jmp $93c5		jmp	ErrorHandler
.938d					_ScanSkipData:
.938d	88		dey				dey 								; point at data token
.938e	c8		iny				iny
.938f	98		tya				tya
.9390	38		sec				sec
.9391	71 30		adc ($30),y			adc 	(codePtr),y
.9393	a8		tay				tay
.9394	80 a7		bra $933d			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9396					Command_WHILE:
.9396	5a		phy				phy 								; save position of the test
.9397	a2 00		ldx #$00			ldx 	#0
.9399	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; work out the number
.939c	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; check if zero
.939f	f0 0e		beq $93af			beq 	_WHExitLoop 				; if so exit the loop
.93a1	98		tya				tya 								; position *after* test.
.93a2	7a		ply				ply 								; restore position before test, at WHILE
.93a3	88		dey				dey
.93a4	48		pha				pha 								; push after test on the stack
.93a5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.93a7	20 31 a0	jsr $a031			jsr 	StackOpen
.93aa	20 75 a0	jsr $a075			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.93ad	7a		ply				ply 								; restore the position *after* the test
.93ae	60		rts				rts
.93af					_WHExitLoop:
.93af	68		pla				pla 								; throw post loop position
.93b0	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.93b2	aa		tax				tax
.93b3	20 37 93	jsr $9337			jsr 	ScanForward
.93b6	60		rts				rts
.93b7					Command_WEND:
.93b7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.93b9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.93bb	20 5d a0	jsr $a05d			jsr 	StackCheckFrame
.93be	20 86 a0	jsr $a086			jsr 	STKLoadCodePosition 		; loop back
.93c1	20 4f a0	jsr $a04f			jsr 	StackClose		 			; erase the frame
.93c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a6fe					CheckRightBracket:
.a6fe	b1 30		lda ($30),y			lda 	(codePtr),y
.a700	c8		iny				iny
.a701	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a703	d0 0f		bne $a714			bne 	CNAFail
.a705	60		rts				rts
.a706					CheckComma:
.a706	b1 30		lda ($30),y			lda 	(codePtr),y
.a708	c8		iny				iny
.a709	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a70b	d0 07		bne $a714			bne 	CNAFail
.a70d	60		rts				rts
.a70e					CheckNextA:
.a70e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a710	d0 02		bne $a714			bne 	CNAFail
.a712	c8		iny				iny 								; skip character
.a713	60		rts				rts 								; and exit
.a714					CNAFail:
.a714	4c e4 ac	jmp $ace4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.93c5					ErrorHandler:
.93c5	a8		tay				tay 								; find the error text
.93c6	f0 49		beq $9411			beq 	_EHEnd
.93c8	a2 00		ldx #$00			ldx 	#0
.93ca	a9 fd		lda #$fd			lda 	#((ErrorText) & $FF)
.93cc	85 36		sta $36				sta 	0+zTemp0
.93ce	a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.93d0	85 37		sta $37				sta 	1+zTemp0
.93d2					_EHFind:
.93d2	88		dey				dey 								; found the error text ?
.93d3	f0 0e		beq $93e3			beq 	_EHFound
.93d5					_EHFindZero:
.93d5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93d7	e6 36		inc $36				inc 	zTemp0
.93d9	d0 02		bne $93dd			bne 	_EHFNoCarry
.93db	e6 37		inc $37				inc 	zTemp0+1
.93dd					_EHFNoCarry:
.93dd	c9 00		cmp #$00			cmp 	#0
.93df	d0 f4		bne $93d5			bne 	_EHFindZero
.93e1	80 ef		bra $93d2			bra 	_EHFind
.93e3					_EHFound:
.93e3	a5 36		lda $36				lda 	zTemp0 						; print message
.93e5	a6 37		ldx $37				ldx 	zTemp0+1
.93e7	20 1e 94	jsr $941e			jsr 	PrintStringXA
.93ea	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.93ec	b1 30		lda ($30),y			lda 	(codePtr),y
.93ee	d0 05		bne $93f5			bne 	_EHAtMsg
.93f0	c8		iny				iny
.93f1	b1 30		lda ($30),y			lda 	(codePtr),y
.93f3	f0 17		beq $940c			beq 	_EHCREnd
.93f5					_EHAtMsg:
.93f5	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.93f7	a9 14		lda #$14			lda 	#_AtMsg & $FF
.93f9	20 1e 94	jsr $941e			jsr 	PrintStringXA
.93fc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9400	48		pha				pha
.9401	c8		iny				iny
.9402	b1 30		lda ($30),y			lda 	(codePtr),y
.9404	aa		tax				tax
.9405	68		pla				pla
.9406	20 5a a8	jsr $a85a			jsr 	ConvertInt16 				; convert XA to string
.9409	20 1e 94	jsr $941e			jsr 	PrintStringXA 				; and print it.
.940c					_EHCREnd:
.940c	a9 0d		lda #$0d			lda 	#13 						; new line
.940e	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.9411					_EHEnd:
.9411	4c 5d 89	jmp $895d			jmp 	WarmStart
>9414	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>941c	20 00
.941e					PrintStringXA:
.941e	5a		phy				phy
.941f	86 37		stx $37				stx 	zTemp0+1
.9421	85 36		sta $36				sta 	zTemp0
.9423	a0 00		ldy #$00			ldy 	#0
.9425					_PSXALoop:
.9425	b1 36		lda ($36),y			lda 	(zTemp0),y
.9427	f0 06		beq $942f			beq 	_PSXAExit
.9429	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.942c	c8		iny				iny
.942d	80 f6		bra $9425			bra 	_PSXALoop
.942f					_PSXAExit:
.942f	7a		ply				ply
.9430	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9431					UnaryTrue:
.9431	fa		plx				plx
.9432					ReturnTrue:
.9432	a9 01		lda #$01			lda 	#1  						; set to 1
.9434	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.9437	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9439	9d 00 04	sta $0400,x			sta 	NSStatus,x
.943c	60		rts				rts
.943d					UnaryFalse:
.943d	fa		plx				plx
.943e					ReturnFalse:
.943e	4c 7d 9f	jmp $9f7d			jmp 	NSMSetZero 					; set it all to zero
.9441					BinaryCompareEqual:
.9441	fa		plx				plx
.9442	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.9445	c9 00		cmp #$00			cmp 	#0
.9447	f0 e9		beq $9432			beq 	ReturnTrue
.9449	80 f3		bra $943e			bra 	ReturnFalse
.944b					BinaryCompareLess:
.944b	fa		plx				plx
.944c	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.944f	c9 ff		cmp #$ff			cmp 	#$FF
.9451	f0 df		beq $9432			beq 	ReturnTrue
.9453	80 e9		bra $943e			bra 	ReturnFalse
.9455					BinaryCompareGreater:
.9455	fa		plx				plx
.9456	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.9459	c9 01		cmp #$01			cmp 	#1
.945b	f0 d5		beq $9432			beq 	ReturnTrue
.945d	80 df		bra $943e			bra 	ReturnFalse
.945f					BinaryCompareNotEqual:
.945f	fa		plx				plx
.9460	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.9463	c9 00		cmp #$00			cmp 	#0
.9465	d0 cb		bne $9432			bne 	ReturnTrue
.9467	80 d5		bra $943e			bra 	ReturnFalse
.9469					BinaryCompareLessEqual:
.9469	fa		plx				plx
.946a	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.946d	c9 01		cmp #$01			cmp 	#1
.946f	d0 c1		bne $9432			bne 	ReturnTrue
.9471	80 cb		bra $943e			bra 	ReturnFalse
.9473					BinaryCompareGreaterEqual:
.9473	fa		plx				plx
.9474	20 7d 94	jsr $947d			jsr 	CompareBaseCode
.9477	c9 ff		cmp #$ff			cmp 	#$FF
.9479	d0 b7		bne $9432			bne 	ReturnTrue
.947b	80 c1		bra $943e			bra 	ReturnFalse
.947d					CompareBaseCode:
.947d	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; make both values if references.
.9480	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9483	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9486	29 10		and #$10			and 	#NSTString
.9488	d0 40		bne $94ca			bne 	_CBCString
.948a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.948d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9490	d0 3b		bne $94cd			bne 	_CBCFloat
.9492	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9495	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9498	29 08		and #$08			and 	#NSTFloat
.949a	d0 31		bne $94cd			bne 	_CBCFloat
.949c	20 d0 94	jsr $94d0			jsr 	CompareFixMinusZero
.949f	e8		inx				inx
.94a0	20 d0 94	jsr $94d0			jsr 	CompareFixMinusZero
.94a3	ca		dex				dex
.94a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.94a7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.94aa	10 0b		bpl $94b7			bpl 	_CDCSameSign
.94ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.94af	30 16		bmi $94c7			bmi 	_CBCLess 					; return $FF
.94b1					_CBCGreater:
.94b1	a9 01		lda #$01			lda 	#1
.94b3	60		rts				rts
.94b4					_CBCEqual:
.94b4	a9 00		lda #$00			lda 	#0
.94b6	60		rts				rts
.94b7					_CDCSameSign:
.94b7	20 e0 95	jsr $95e0			jsr 	SubTopTwoStack 				; unsigned subtract
.94ba	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; or the mantissa together
.94bd	f0 f5		beq $94b4			beq 	_CBCEqual 					; -0 == 0
.94bf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.94c2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.94c5	10 ea		bpl $94b1			bpl 	_CBCGreater
.94c7					_CBCLess:
.94c7	a9 ff		lda #$ff			lda 	#$FF
.94c9	60		rts				rts
.94ca					_CBCString:
.94ca	4c 36 95	jmp $9536			jmp 	CompareStrings
.94cd					_CBCFloat:
.94cd	4c 56 a9	jmp $a956			jmp 	CompareFloat
.94d0					CompareFixMinusZero:
.94d0	20 ad 9f	jsr $9fad			jsr 	NSMIsZero
.94d3	d0 03		bne $94d8			bne 	_CFXMZNotZero
.94d5	9e 00 04	stz $0400,x			stz 	NSStatus,x
.94d8					_CFXMZNotZero:
.94d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94d9					StringConcat:
.94d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.94dc	3d 01 04	and $0401,x			and 	NSStatus+1,x
.94df	29 18		and #$18			and 	#NSBTypeMask
.94e1	c9 10		cmp #$10			cmp 	#NSTString
.94e3	d0 4e		bne $9533			bne		_SCType
.94e5	64 38		stz $38				stz 	zTemp1 						; counting total length
.94e7	e8		inx				inx
.94e8	20 06 95	jsr $9506			jsr 	_SCSetupZ0 					; setup for second
.94eb	20 11 95	jsr $9511			jsr 	_SCLengthZ0 				; length for second
.94ee	ca		dex				dex
.94ef	20 06 95	jsr $9506			jsr 	_SCSetupZ0 					; setup for first
.94f2	20 11 95	jsr $9511			jsr 	_SCLengthZ0 				; length for first
.94f5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.94f7	20 0a b0	jsr $b00a			jsr 	StringTempAllocate
.94fa	20 24 95	jsr $9524			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94fd	e8		inx				inx
.94fe	20 06 95	jsr $9506			jsr 	_SCSetupZ0 					; copy second out
.9501	20 24 95	jsr $9524			jsr 	_SCCopy
.9504	ca		dex				dex
.9505	60		rts				rts
.9506					_SCSetupZ0:
.9506	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9509	85 36		sta $36				sta 	zTemp0
.950b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.950e	85 37		sta $37				sta 	zTemp0+1
.9510	60		rts				rts
.9511					_SCLengthZ0:
.9511	5a		phy				phy
.9512	a0 00		ldy #$00			ldy 	#0
.9514					_SCLenLoop:
.9514	b1 36		lda ($36),y			lda 	(zTemp0),y
.9516	f0 0a		beq $9522			beq 	_SCLExit
.9518	c8		iny				iny
.9519	e6 38		inc $38				inc 	zTemp1
.951b	10 f7		bpl $9514			bpl		_SCLenLoop
.951d	a9 09		lda #$09		lda	#9
.951f	4c c5 93	jmp $93c5		jmp	ErrorHandler
.9522					_SCLExit:
.9522	7a		ply				ply
.9523	60		rts				rts
.9524					_SCCopy:
.9524	5a		phy				phy
.9525	a0 00		ldy #$00			ldy 	#0
.9527					_SCCopyLoop:
.9527	b1 36		lda ($36),y			lda 	(zTemp0),y
.9529	f0 06		beq $9531			beq 	_SCCExit
.952b	20 48 b0	jsr $b048			jsr 	StringTempWrite
.952e	c8		iny				iny
.952f	80 f6		bra $9527			bra 	_SCCopyLoop
.9531					_SCCExit:
.9531	7a		ply				ply
.9532	60		rts				rts
.9533					_SCType:
.9533	4c ee ac	jmp $acee			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a717					IntegerDivide:
.a717	fa		plx				plx
.a718	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a71b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a71e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a71f	0a		asl a				asl 	a
.a720	10 05		bpl $a727			bpl 	_NotRef
.a722	48		pha				pha
.a723	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a726	68		pla				pla
.a727					_NotRef:
.a727	0a		asl a				asl 	a
.a728	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a72a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a72d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a730	f0 03		beq $a735			beq 	_IntegerCode 				; if clear, then we have two integers
.a732	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.a735					_IntegerCode:
.a735	20 57 a7	jsr $a757			jsr 	CheckDivideZero 			; do div zero check
.a738	20 8f a7	jsr $a78f			jsr 	Int32Divide 				; do the division
.a73b	20 4c a8	jsr $a84c			jsr 	CalculateSign 				; calculate result sign
.a73e					NSMCopyPlusTwoToZero:
.a73e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a741	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a744	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a747	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a74a	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a74d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a750	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a753	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a756	60		rts				rts
.a757					CheckDivideZero:
.a757	e8		inx				inx
.a758	20 ad 9f	jsr $9fad			jsr 	NSMIsZero
.a75b	f0 02		beq $a75f			beq 	_CDVError
.a75d	ca		dex				dex
.a75e	60		rts				rts
.a75f					_CDVError:
.a75f	a9 03		lda #$03		lda	#3
.a761	4c c5 93	jmp $93c5		jmp	ErrorHandler
.a764					IntegerModulus:
.a764	fa		plx				plx
.a765	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a768	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a76b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a76c	0a		asl a				asl 	a
.a76d	10 05		bpl $a774			bpl 	_NotRef
.a76f	48		pha				pha
.a770	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a773	68		pla				pla
.a774					_NotRef:
.a774	0a		asl a				asl 	a
.a775	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a777	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a77a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a77d	f0 03		beq $a782			beq 	_IntegerCode 				; if clear, then we have two integers
.a77f	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.a782					_IntegerCode:
.a782					IntegerModulusNoCheck:
.a782	20 57 a7	jsr $a757			jsr 	CheckDivideZero 			; do div zero check
.a785	20 8f a7	jsr $a78f			jsr 	Int32Divide 				; do the division
.a788	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a78b	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a78e	60		rts				rts
.a78f					Int32Divide:
.a78f	48		pha				pha 								; save AXY
.a790	5a		phy				phy
.a791	20 54 9f	jsr $9f54			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a794	20 79 9f	jsr $9f79			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a797	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a799					_I32DivideLoop:
.a799	e8		inx				inx
.a79a	e8		inx				inx
.a79b	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a79e	ca		dex				dex
.a79f	ca		dex				dex
.a7a0	20 93 9f	jsr $9f93			jsr 	NSMRotateLeft
.a7a3	20 cf a7	jsr $a7cf			jsr 	DivideCheckSubtract 		; check if subtract possible
.a7a6	90 03		bcc $a7ab			bcc 	_I32DivideNoCarryIn
.a7a8	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a7ab					_I32DivideNoCarryIn:
.a7ab	88		dey				dey 								; loop round till division completed.
.a7ac	d0 eb		bne $a799			bne 	_I32DivideLoop
.a7ae	7a		ply				ply 								; restore AXY and exit
.a7af	68		pla				pla
.a7b0	60		rts				rts
.a7b1					Int32ShiftDivide:
.a7b1	48		pha				pha 								; save AY
.a7b2	5a		phy				phy
.a7b3	e8		inx				inx 								; clear S[X+2]
.a7b4	e8		inx				inx
.a7b5	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.a7b8	ca		dex				dex
.a7b9	ca		dex				dex
.a7ba	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a7bc					_I32SDLoop:
.a7bc	20 cf a7	jsr $a7cf			jsr 	DivideCheckSubtract 		; check if subtract possible
.a7bf	e8		inx				inx
.a7c0	e8		inx				inx
.a7c1	20 93 9f	jsr $9f93			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a7c4	ca		dex				dex
.a7c5	ca		dex				dex
.a7c6	20 93 9f	jsr $9f93			jsr 	NSMRotateLeft
.a7c9	88		dey				dey 	 							; do 31 times
.a7ca	d0 f0		bne $a7bc			bne 	_I32SDLoop
.a7cc	7a		ply				ply 								; restore AY and exit
.a7cd	68		pla				pla
.a7ce	60		rts				rts
.a7cf					DivideCheckSubtract:
.a7cf	20 e0 95	jsr $95e0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a7d2	b0 04		bcs $a7d8			bcs 	_DCSExit 					; if carry set, then could do, exit
.a7d4	20 ba 95	jsr $95ba			jsr 	AddTopTwoStack 				; add it back in
.a7d7	18		clc				clc 								; and return False
.a7d8					_DCSExit:
.a7d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a7d9					MulInteger:
.a7d9	fa		plx				plx
.a7da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7dd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7e0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7e1	0a		asl a				asl 	a
.a7e2	10 05		bpl $a7e9			bpl 	_NotRef
.a7e4	48		pha				pha
.a7e5	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7e8	68		pla				pla
.a7e9					_NotRef:
.a7e9	0a		asl a				asl 	a 							; put MSB of type into A:7
.a7ea	30 0b		bmi $a7f7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a7ec	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7ef	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7f2	f0 06		beq $a7fa			beq 	_IntegerCode 				; if clear, then we have two integers
.a7f4	4c 2d aa	jmp $aa2d			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a7f7					_StringData:
.a7f7	4c f8 ac	jmp $acf8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a7fa					_IntegerCode:
.a7fa	20 07 a8	jsr $a807			jsr 	MultiplyShort
.a7fd	c9 00		cmp #$00			cmp 	#0
.a7ff	f0 05		beq $a806			beq 	_MIExit
.a801	a9 04		lda #$04		lda	#4
.a803	4c c5 93	jmp $93c5		jmp	ErrorHandler
.a806					_MIExit:
.a806	60		rts				rts
.a807					MultiplyShort:
.a807	5a		phy				phy 								; save Y
.a808	20 54 9f	jsr $9f54			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a80b	20 79 9f	jsr $9f79			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a80e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a810					_I32MLoop:
.a810	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a813	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a816	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a819	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a81c	f0 28		beq $a846			beq 	_I32MExit 					; exit if zero
.a81e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a821	29 01		and #$01			and 	#1
.a823	f0 0e		beq $a833			beq 	_I32MNoAdd
.a825	20 ba 95	jsr $95ba			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a828	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a82b	10 06		bpl $a833			bpl 	_I32MNoAdd
.a82d					_I32ShiftRight:
.a82d	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight 				; shift S[X] right
.a830	c8		iny				iny 								; increment shift count
.a831	80 0a		bra $a83d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a833					_I32MNoAdd:
.a833	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a836	70 f5		bvs $a82d			bvs 	_I32ShiftRight 				; instead.
.a838	e8		inx				inx
.a839	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a83c	ca		dex				dex
.a83d					_I32MShiftUpper:
.a83d	e8		inx				inx 								; shift S[X+2] right
.a83e	e8		inx				inx
.a83f	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight
.a842	ca		dex				dex
.a843	ca		dex				dex
.a844	80 ca		bra $a810			bra 	_I32MLoop 					; try again.
.a846					_I32MExit:
.a846	20 4c a8	jsr $a84c			jsr 	CalculateSign
.a849	98		tya				tya 								; shift in A
.a84a	7a		ply				ply 								; restore Y and exit
.a84b	60		rts				rts
.a84c					CalculateSign:
.a84c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a84f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a852	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a855	0a		asl a				asl 	a 							; shift bit 7 into carry
.a856	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a859	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9536					CompareStrings:
.9536	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9539	3d 01 04	and $0401,x			and 	NSStatus+1,x
.953c	29 10		and #$10			and 	#NSBIsString
.953e	f0 2c		beq $956c			beq 	_CSTypeError
.9540	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9543	85 36		sta $36				sta 	zTemp0
.9545	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9548	85 37		sta $37				sta 	zTemp0+1
.954a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.954d	85 38		sta $38				sta 	zTemp1
.954f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9552	85 39		sta $39				sta 	zTemp1+1
.9554	5a		phy				phy 								; save Y so we can access strings
.9555	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9557					_CSLoop:
.9557	c8		iny				iny
.9558	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.955a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.955c	d0 06		bne $9564			bne 	_CSDifferent
.955e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9560	d0 f5		bne $9557			bne 	_CSLoop 					; still comparing
.9562					_CSExit:
.9562	7a		ply				ply 								; reached end, return zero in A from EOS
.9563	60		rts				rts
.9564					_CSDifferent:
.9564	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9566	90 fa		bcc $9562			bcc		_CSExit
.9568	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.956a	80 f6		bra $9562			bra 	_CSExit
.956c					_CSTypeError:
.956c	4c ee ac	jmp $acee			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.956f					ShiftLeft:
.956f	38		sec				sec
.9570	80 01		bra $9573			bra 	ShiftMain
.9572					ShiftRight:
.9572	18		clc				clc
.9573					ShiftMain:
.9573	fa		plx				plx 								; restore X
.9574	08		php				php 								; save direction
.9575	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9578	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.957b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.957c	0a		asl a				asl 	a
.957d	10 05		bpl $9584			bpl 	_NotRef
.957f	48		pha				pha
.9580	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9583	68		pla				pla
.9584					_NotRef:
.9584	0a		asl a				asl 	a
.9585	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9587	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.958d	f0 03		beq $9592			beq 	_IntegerCode 				; if clear, then we have two integers
.958f	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.9592					_IntegerCode:
.9592	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9595	29 e0		and #$e0			and 	#$E0
.9597	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.959a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.959d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95a0	d0 13		bne $95b5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.95a2					_SMLoop:
.95a2	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.95a5	30 11		bmi $95b8			bmi 	_SMExit 					; exit if done.
.95a7	28		plp				plp 								; restore direcition setting
.95a8	08		php				php
.95a9	90 05		bcc $95b0			bcc 	_SMRight
.95ab	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; shift left if CS
.95ae	80 f2		bra $95a2			bra 	_SMLoop
.95b0					_SMRight:
.95b0	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight 				; shift right if CC
.95b3	80 ed		bra $95a2			bra 	_SMLoop
.95b5					_SMExit0:
.95b5	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero 					; return zero.
.95b8					_SMExit:
.95b8	28		plp				plp 								; throw direction
.95b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.95ba					AddTopTwoStack:
.95ba	18		clc				clc
.95bb	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95be	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.95c1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95c4	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95c7	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.95ca	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95cd	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95d0	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.95d3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95d6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95d9	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.95dc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95df	60		rts				rts
.95e0					SubTopTwoStack:
.95e0	38		sec				sec
.95e1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95e4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.95e7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95ea	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95ed	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.95f0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95f3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95f6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.95f9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95fc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95ff	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9602	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9605	60		rts				rts
.9606					AddInteger:
.9606	fa		plx				plx
.9607	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.960a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.960d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.960e	0a		asl a				asl 	a
.960f	10 05		bpl $9616			bpl 	_NotRef
.9611	48		pha				pha
.9612	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9615	68		pla				pla
.9616					_NotRef:
.9616	0a		asl a				asl 	a 							; put MSB of type into A:7
.9617	30 0b		bmi $9624			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9619	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.961c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.961f	f0 06		beq $9627			beq 	_IntegerCode 				; if clear, then we have two integers
.9621	4c b5 a8	jmp $a8b5			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9624					_StringData:
.9624	4c d9 94	jmp $94d9			jmp 	StringConcat							; at least one string - don't know both are strings.
.9627					_IntegerCode:
.9627					AddCode:
.9627	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.962a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.962d	10 8b		bpl $95ba			bpl 	AddTopTwoStack
.962f	20 e0 95	jsr $95e0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9632	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9635	10 09		bpl $9640			bpl 	_AddExit
.9637	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.963a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.963d	20 32 9f	jsr $9f32			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9640					_AddExit:
.9640	60		rts				rts
.9641					SubInteger:
.9641	fa		plx				plx
.9642	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9645	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9648	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9649	0a		asl a				asl 	a
.964a	10 05		bpl $9651			bpl 	_NotRef
.964c	48		pha				pha
.964d	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9650	68		pla				pla
.9651					_NotRef:
.9651	0a		asl a				asl 	a 							; put MSB of type into A:7
.9652	30 0b		bmi $965f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9654	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9657	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.965a	f0 06		beq $9662			beq 	_IntegerCode 				; if clear, then we have two integers
.965c	4c ba a8	jmp $a8ba			jmp 	FloatingPointSub 							; otherwise at least one float.
.965f					_StringData:
.965f	4c f8 ac	jmp $acf8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9662					_IntegerCode:
.9662	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9665	49 80		eor #$80			eor 	#$80
.9667	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.966a	80 bb		bra $9627			bra 	AddCode 					; and do the same code as add.
.966c					AndInteger:
.966c	fa		plx				plx
.966d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9670	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9673	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9674	0a		asl a				asl 	a
.9675	10 05		bpl $967c			bpl 	_NotRef
.9677	48		pha				pha
.9678	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.967b	68		pla				pla
.967c					_NotRef:
.967c	0a		asl a				asl 	a
.967d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.967f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9682	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9685	f0 03		beq $968a			beq 	_IntegerCode 				; if clear, then we have two integers
.9687	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.968a					_IntegerCode:
.968a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.968d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9690	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9693	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9696	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9699	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.969c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.969f	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.96a2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96a5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96a8	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.96ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96ae	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96b1	60		rts				rts
.96b2					OraInteger:
.96b2	fa		plx				plx
.96b3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96b6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96b9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96ba	0a		asl a				asl 	a
.96bb	10 05		bpl $96c2			bpl 	_NotRef
.96bd	48		pha				pha
.96be	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c1	68		pla				pla
.96c2					_NotRef:
.96c2	0a		asl a				asl 	a
.96c3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96c5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96c8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96cb	f0 03		beq $96d0			beq 	_IntegerCode 				; if clear, then we have two integers
.96cd	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.96d0					_IntegerCode:
.96d0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96d3	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.96d6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96dc	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.96df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96e2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96e5	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.96e8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96eb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96ee	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.96f1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96f4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96f7	60		rts				rts
.96f8					EorInteger:
.96f8	fa		plx				plx
.96f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96fc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9700	0a		asl a				asl 	a
.9701	10 05		bpl $9708			bpl 	_NotRef
.9703	48		pha				pha
.9704	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9707	68		pla				pla
.9708					_NotRef:
.9708	0a		asl a				asl 	a
.9709	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.970b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.970e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9711	f0 03		beq $9716			beq 	_IntegerCode 				; if clear, then we have two integers
.9713	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.9716					_IntegerCode:
.9716	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9719	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.971c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.971f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9722	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9725	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9728	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.972b	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.972e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9731	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9734	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9737	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.973a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.973d	60		rts				rts
.973e					WordIndirect:
.973e	fa		plx				plx
.973f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9742	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9745	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9746	0a		asl a				asl 	a
.9747	10 05		bpl $974e			bpl 	_NotRef
.9749	48		pha				pha
.974a	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.974d	68		pla				pla
.974e					_NotRef:
.974e	0a		asl a				asl 	a
.974f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9751	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9754	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9757	f0 03		beq $975c			beq 	_IntegerCode 				; if clear, then we have two integers
.9759	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.975c					_IntegerCode:
.975c	20 27 96	jsr $9627			jsr 	AddCode 					; add the two values
.975f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9761	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9764	60		rts				rts
.9765					ByteIndirect:
.9765	fa		plx				plx
.9766	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9769	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.976c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.976d	0a		asl a				asl 	a
.976e	10 05		bpl $9775			bpl 	_NotRef
.9770	48		pha				pha
.9771	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9774	68		pla				pla
.9775					_NotRef:
.9775	0a		asl a				asl 	a
.9776	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9778	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.977b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.977e	f0 03		beq $9783			beq 	_IntegerCode 				; if clear, then we have two integers
.9780	4c ee ac	jmp $acee			jmp 	TypeError 					; anything else, type mismatch.
.9783					_IntegerCode:
.9783	20 27 96	jsr $9627			jsr 	AddCode 					; add the two values
.9786	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9788	9d 00 04	sta $0400,x			sta 	NSStatus,x
.978b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a85a					ConvertInt16:
.a85a	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a85d	8e 10 04	stx $0410			stx 	NSMantissa1
.a860	9c 18 04	stz $0418			stz 	NSMantissa2
.a863	9c 20 04	stz $0420			stz 	NSMantissa3
.a866	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a869	a2 00		ldx #$00			ldx 	#0 							; stack level
.a86b	a9 0a		lda #$0a			lda 	#10 						; base
.a86d	80 00		bra $a86f			bra 	ConvertInt32
.a86f					ConvertInt32:
.a86f	5a		phy				phy
.a870	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a872	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a875	10 08		bpl $a87f			bpl 	_CI32NotNeg
.a877	48		pha				pha
.a878	a9 2d		lda #$2d			lda 	#'-'
.a87a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a87d	c8		iny				iny
.a87e	68		pla				pla
.a87f					_CI32NotNeg:
.a87f	20 8d a8	jsr $a88d			jsr 	_CI32DivideConvert 			; recursive conversion
.a882	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a884	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a887	7a		ply				ply
.a888	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a88a	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a88c	60		rts				rts
.a88d					_CI32DivideConvert:
.a88d	e8		inx				inx 								; write to next slot up
.a88e	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.a891	ca		dex				dex
.a892	20 8f a7	jsr $a78f			jsr 	Int32Divide 				; divide
.a895	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a898	48		pha				pha
.a899	20 3e a7	jsr $a73e			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a89c	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; is it zero ?
.a89f	f0 06		beq $a8a7			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a8a1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a8a4	20 8d a8	jsr $a88d			jsr 	_CI32DivideConvert 			; and recusrively call.
.a8a7					_CI32NoRecurse:
.a8a7	68		pla				pla 								; remainder
.a8a8	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a8aa	90 02		bcc $a8ae			bcc 	_CI32NotHex
.a8ac	69 26		adc #$26			adc 	#6+32
.a8ae					_CI32NotHex:
.a8ae	69 30		adc #$30			adc 	#48
.a8b0	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a8b3	c8		iny				iny
.a8b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.978c					PrecedenceLevel:
>978c	04					.byte	 4	; $00 <<
>978d	02					.byte	 2	; $01 <=
>978e	02					.byte	 2	; $02 <>
>978f	00					.byte	 0	; $03 !!3
>9790	00					.byte	 0	; $04 ><
>9791	02					.byte	 2	; $05 >=
>9792	04					.byte	 4	; $06 >>
>9793	00					.byte	 0	; $07 !!7
>9794	00					.byte	 0	; $08 !!8
>9795	00					.byte	 0	; $09 !!9
>9796	00					.byte	 0	; $0a !!10
>9797	00					.byte	 0	; $0b !!11
>9798	00					.byte	 0	; $0c !!12
>9799	00					.byte	 0	; $0d !!13
>979a	00					.byte	 0	; $0e !!14
>979b	00					.byte	 0	; $0f !!15
>979c	00					.byte	 0	; $10 @
>979d	00					.byte	 0	; $11 !!17
>979e	00					.byte	 0	; $12 !!18
>979f	00					.byte	 0	; $13 [
>97a0	04					.byte	 4	; $14 \
>97a1	00					.byte	 0	; $15 ]
>97a2	01					.byte	 1	; $16 ^
>97a3	00					.byte	 0	; $17 _
>97a4	00					.byte	 0	; $18 `
>97a5	00					.byte	 0	; $19 !!25
>97a6	00					.byte	 0	; $1a !!26
>97a7	00					.byte	 0	; $1b {
>97a8	01					.byte	 1	; $1c |
>97a9	00					.byte	 0	; $1d }
>97aa	00					.byte	 0	; $1e ~
>97ab	00					.byte	 0	; $1f [7m<7F>[m
>97ac	00					.byte	 0	; $20
>97ad	05					.byte	 5	; $21 !
>97ae	00					.byte	 0	; $22 "
>97af	00					.byte	 0	; $23 #
>97b0	05					.byte	 5	; $24 $
>97b1	04					.byte	 4	; $25 %
>97b2	01					.byte	 1	; $26 &
>97b3	00					.byte	 0	; $27 '
>97b4	00					.byte	 0	; $28 (
>97b5	00					.byte	 0	; $29 )
>97b6	04					.byte	 4	; $2a *
>97b7	03					.byte	 3	; $2b +
>97b8	00					.byte	 0	; $2c ,
>97b9	03					.byte	 3	; $2d -
>97ba	00					.byte	 0	; $2e .
>97bb	04					.byte	 4	; $2f /
>97bc	00					.byte	 0	; $30 0
>97bd	00					.byte	 0	; $31 1
>97be	00					.byte	 0	; $32 2
>97bf	00					.byte	 0	; $33 3
>97c0	00					.byte	 0	; $34 4
>97c1	00					.byte	 0	; $35 5
>97c2	00					.byte	 0	; $36 6
>97c3	00					.byte	 0	; $37 7
>97c4	00					.byte	 0	; $38 8
>97c5	00					.byte	 0	; $39 9
>97c6	00					.byte	 0	; $3a :
>97c7	00					.byte	 0	; $3b ;
>97c8	02					.byte	 2	; $3c <
>97c9	02					.byte	 2	; $3d =
>97ca	02					.byte	 2	; $3e >
>97cb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.97cc					EvaluateExpressionAt0:
.97cc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.97ce					EvaluateExpression:
.97ce	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.97d0					EvaluateExpressionAtPrecedence:
.97d0	48		pha				pha 								; save precedence level
.97d1	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm 				; evaluate term into level X.
.97d4	68		pla				pla 								; restore precedence level.
.97d5					_EXPRLoop:
.97d5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.97d7	b1 30		lda ($30),y			lda 	(codePtr),y
.97d9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.97db	b0 25		bcs $9802			bcs 	_EXPRExit
.97dd	da		phx				phx 								; read the operator precedence
.97de	aa		tax				tax
.97df	bd 8c 97	lda $978c,x			lda 	PrecedenceLevel,x
.97e2	fa		plx				plx
.97e3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.97e5	f0 1b		beq $9802			beq 	_EXPRExit
.97e7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.97e9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.97eb	c5 37		cmp $37				cmp 	zTemp0+1
.97ed	b0 13		bcs $9802			bcs		_EXPRExit 					; if current >= operator exit
.97ef	48		pha				pha 								; save current precedence.
.97f0	b1 30		lda ($30),y			lda 	(codePtr),y
.97f2	c8		iny				iny
.97f3	48		pha				pha
.97f4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.97f6	e8		inx				inx 								; work out the right hand side.
.97f7	20 d0 97	jsr $97d0			jsr 	EvaluateExpressionAtPrecedence
.97fa	ca		dex				dex
.97fb	68		pla				pla 								; get operator, call the code.
.97fc	20 05 98	jsr $9805			jsr 	_EXPRCaller
.97ff	68		pla				pla 								; restore precedence level
.9800	80 d3		bra $97d5			bra 	_EXPRLoop 					; and go round.
.9802					_EXPRExit:
.9802	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9804	60		rts				rts
.9805					_EXPRCaller:
.9805	da		phx				phx 								; save on stack, first thing is to restore it
.9806	0a		asl a				asl 	a 							; double so can use vectors into X
.9807	aa		tax				tax
.9808	7c 0c 90	jmp ($900c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a8b5					FloatingPointAdd:
.a8b5	20 56 aa	jsr $aa56			jsr 	FloatPrepare 				; prepare for floats
.a8b8	80 0b		bra $a8c5			bra 	FloatAdd
.a8ba					FloatingPointSub:
.a8ba	20 56 aa	jsr $aa56			jsr 	FloatPrepare 				; prepare for floats
.a8bd					FloatSubtract:
.a8bd	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a8c0	49 80		eor #$80			eor 	#$80
.a8c2	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a8c5					FloatAdd:
.a8c5	48		pha				pha
.a8c6	5a		phy				phy
.a8c7	20 67 aa	jsr $aa67			jsr 	NSNormalise 				; normalise S[X]
.a8ca	f0 54		beq $a920			beq 	_FAReturn1
.a8cc	e8		inx				inx 								; normalise S[X+1]
.a8cd	20 67 aa	jsr $aa67			jsr 	NSNormalise
.a8d0	ca		dex				dex
.a8d1	c9 00		cmp #$00			cmp 	#0
.a8d3	f0 6f		beq $a944			beq 	_FAExit 					; if so, just return A
.a8d5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a8d8	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a8db	f0 1b		beq $a8f8			beq 	_FAExponentsEqual
.a8dd	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a8e0	a8		tay				tay
.a8e1	38		sec				sec 								; do a signed comparison of the exponents.
.a8e2	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a8e5	50 02		bvc $a8e9			bvc 	_FANoSignedChange
.a8e7	49 80		eor #$80			eor 	#$80
.a8e9					_FANoSignedChange:
.a8e9	29 80		and #$80			and 	#$80
.a8eb	10 03		bpl $a8f0			bpl 	_FAHaveMax
.a8ed	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a8f0					_FAHaveMax:
.a8f0	20 47 a9	jsr $a947			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a8f3	e8		inx				inx
.a8f4	20 47 a9	jsr $a947			jsr 	_FAShiftToExponent
.a8f7	ca		dex				dex
.a8f8					_FAExponentsEqual:
.a8f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a8fb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8fe	30 10		bmi $a910			bmi 	_FADifferentSigns
.a900	20 ba 95	jsr $95ba			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a903	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a906	10 3c		bpl $a944			bpl 	_FAExit 					; if no, we are done.
.a908	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a90b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a90e	80 34		bra $a944			bra 	_FAExit
.a910					_FADifferentSigns:
.a910	20 e0 95	jsr $95e0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a913	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a916	10 2c		bpl $a944			bpl 	_FAExit 					; if no, we are done.
.a918	20 29 9f	jsr $9f29			jsr 	NSMNegate 					; netate result
.a91b	20 32 9f	jsr $9f32			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a91e	80 24		bra $a944			bra 	_FAExit
.a920					_FAReturn1:
.a920	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a923	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a926	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a929	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a92c	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a92f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a932	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a935	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a938	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a93b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a93e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a941	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a944					_FAExit:
.a944	7a		ply				ply
.a945	68		pla				pla
.a946	60		rts				rts
.a947					_FAShiftToExponent:
.a947					_FAShiftToExponent2:
.a947	98		tya				tya 								; compare Y to exponent
.a948	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a94b	f0 08		beq $a955			beq 	_FASEExit 					; exit if so.
.a94d	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight	 			; shift the mantissa right
.a950	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a953	80 f2		bra $a947			bra 	_FAShiftToExponent2
.a955					_FASEExit:
.a955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a956					CompareFloat:
.a956	20 bd a8	jsr $a8bd			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a959	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a95c	29 f8		and #$f8			and 	#$F8
.a95e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a961	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a964	f0 09		beq $a96f			beq 	_FCExit 					; zero, so approximately identical
.a966	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a968	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a96b	10 02		bpl $a96f			bpl 	_FCExit
.a96d					_FCNegative:
.a96d	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a96f					_FCExit:
.a96f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a970					FDivideCommand:
.a970	fa		plx				plx	 								; restore stack position
.a971	20 56 aa	jsr $aa56			jsr 	FloatPrepare 				; prepare for floats
.a974					FloatDivide:
.a974	48		pha				pha
.a975	e8		inx				inx
.a976	20 67 aa	jsr $aa67			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a979	ca		dex				dex
.a97a	c9 00		cmp #$00			cmp 	#0
.a97c	f0 20		beq $a99e			beq 	_FDZero
.a97e	20 67 aa	jsr $aa67			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a981	f0 19		beq $a99c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a983	20 b1 a7	jsr $a7b1			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a986	20 3e a7	jsr $a73e			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a989	20 67 aa	jsr $aa67			jsr		NSNormalise 				; renormalise
.a98c	20 4c a8	jsr $a84c			jsr 	CalculateSign 				; calculate result sign
.a98f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a992	38		sec				sec
.a993	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a996	38		sec				sec
.a997	e9 1e		sbc #$1e			sbc 	#30
.a999	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a99c					_FDExit:
.a99c	68		pla				pla
.a99d	60		rts				rts
.a99e					_FDZero:
.a99e	a9 03		lda #$03		lda	#3
.a9a0	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a9a3					FloatFractionalPart:
.a9a3	5a		phy				phy
.a9a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a9a7	29 7f		and #$7f			and 	#$7F
.a9a9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9ac	20 67 aa	jsr $aa67			jsr 	NSNormalise
.a9af	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a9b2	38		sec				sec
.a9b3	e9 e0		sbc #$e0			sbc 	#$E0
.a9b5	90 31		bcc $a9e8			bcc 	_FFPExit 					; already fractional
.a9b7	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a9b9	b0 2a		bcs $a9e5			bcs 	_FFPZero
.a9bb	a8		tay				tay 								; put count to do in Y
.a9bc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a9bf	20 ea a9	jsr $a9ea			jsr 	_FFPPartial
.a9c2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9c5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a9c8	20 ea a9	jsr $a9ea			jsr 	_FFPPartial
.a9cb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9ce	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a9d1	20 ea a9	jsr $a9ea			jsr 	_FFPPartial
.a9d4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9d7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a9da	20 ea a9	jsr $a9ea			jsr 	_FFPPartial
.a9dd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9e0	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; zeroed check.
.a9e3	d0 03		bne $a9e8			bne 	_FFPExit
.a9e5					_FFPZero:
.a9e5	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.a9e8					_FFPExit:
.a9e8	7a		ply				ply
.a9e9	60		rts				rts
.a9ea					_FFPPartial:
.a9ea	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a9ec	f0 17		beq $aa05			beq 	_FFFPPExit
.a9ee	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a9f0	b0 0c		bcs $a9fe			bcs 	_FFFPPWholeByte
.a9f2	5a		phy				phy
.a9f3					_FFFPPLeft:
.a9f3	0a		asl a				asl 	a
.a9f4	88		dey				dey
.a9f5	d0 fc		bne $a9f3			bne 	_FFFPPLeft
.a9f7	7a		ply				ply
.a9f8					_FFFPPRight:
.a9f8	4a		lsr a				lsr 	a
.a9f9	88		dey				dey
.a9fa	d0 fc		bne $a9f8			bne 	_FFFPPRight
.a9fc	80 07		bra $aa05			bra 	_FFFPPExit
.a9fe					_FFFPPWholeByte:
.a9fe	98		tya				tya 								; subtract 8 from count
.a9ff	38		sec				sec
.aa00	e9 08		sbc #$08			sbc 	#8
.aa02	a8		tay				tay
.aa03	a9 00		lda #$00			lda 	#0 							; and clear all
.aa05					_FFFPPExit:
.aa05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aa06					FloatIntegerPart:
.aa06	48		pha				pha
.aa07	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aa0a	f0 1f		beq $aa2b			beq 	_FIPExit 					; if so do nothing
.aa0c	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; is it zero ?
.aa0f	f0 17		beq $aa28			beq 	_FIPZero 					; if so return zero.
.aa11	20 67 aa	jsr $aa67			jsr 	NSNormalise 				; normalise
.aa14	f0 12		beq $aa28			beq 	_FIPZero 					; normalised to zero, exit zero
.aa16					_FIPShift:
.aa16	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aa19	10 08		bpl $aa23			bpl 	_FIPCheckZero
.aa1b	20 a0 9f	jsr $9fa0			jsr 	NSMShiftRight 				; shift mantissa right
.aa1e	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aa21	80 f3		bra $aa16			bra 	_FIPShift
.aa23					_FIPCheckZero:
.aa23	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; avoid -0 problem
.aa26	d0 03		bne $aa2b			bne 	_FIPExit 					; set to zero if mantissa zero.
.aa28					_FIPZero:
.aa28	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.aa2b					_FIPExit:
.aa2b	68		pla				pla
.aa2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aa2d					FloatingPointMultiply:
.aa2d	20 56 aa	jsr $aa56			jsr 	FloatPrepare 				; prepare for floats
.aa30					FloatMultiply:
.aa30	48		pha				pha
.aa31	20 67 aa	jsr $aa67			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa34	f0 1b		beq $aa51			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa36	e8		inx				inx
.aa37	20 67 aa	jsr $aa67			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa3a	ca		dex				dex
.aa3b	c9 00		cmp #$00			cmp 	#0
.aa3d	f0 0f		beq $aa4e			beq 	_FDSetZero
.aa3f	20 07 a8	jsr $a807			jsr 	MultiplyShort 				; calculate the result.
.aa42	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aa45	18		clc				clc
.aa46	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aa49	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa4c	80 03		bra $aa51			bra 	_FDExit
.aa4e					_FDSetZero:
.aa4e	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero 					; return 0
.aa51					_FDExit:
.aa51	20 67 aa	jsr $aa67			jsr 	NSNormalise 				; normalise the result
.aa54	68		pla				pla
.aa55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aa56					FloatPrepare:
.aa56	20 de 98	jsr $98de			jsr 	DereferenceTopTwo 			; dereference the top two values
.aa59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aa5c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa5f	29 10		and #$10			and 	#NSBIsString
.aa61	d0 01		bne $aa64			bne 	_FDType
.aa63	60		rts				rts
.aa64					_FDType:
.aa64	4c ee ac	jmp $acee			jmp 	TypeError
.aa67					NSNormalise:
.aa67	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aa6a	29 80		and #$80			and 	#$80
.aa6c	09 08		ora #$08			ora 	#NSTFloat
.aa6e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa71	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; if zero exit
.aa74	d0 09		bne $aa7f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aa76	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aa79	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aa7c	a9 00		lda #$00			lda 	#0 							; set Z flag
.aa7e	60		rts				rts
.aa7f					_NSNormaliseOptimise:
.aa7f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aa82	d0 22		bne $aaa6			bne 	_NSNormaliseLoop
.aa84	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aa87	30 1d		bmi $aaa6			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aa89	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa8c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa8f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa95	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa98	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.aa9b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.aa9e	38		sec				sec
.aa9f	e9 08		sbc #$08			sbc 	#8
.aaa1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aaa4	80 d9		bra $aa7f			bra 	_NSNormaliseOptimise
.aaa6					_NSNormaliseLoop:
.aaa6	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.aaa9	70 08		bvs $aab3			bvs 	_NSNExit 					; exit if so with Z flag clear
.aaab	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; shift mantissa left
.aaae	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.aab1	80 f3		bra $aaa6			bra 	_NSNormaliseLoop
.aab3					_NSNExit:
.aab3	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.aab5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.980b					AssignNumber:
.980b	5a		phy				phy
.980c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.980f	85 36		sta $36				sta 	zTemp0
.9811	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9814	85 37		sta $37				sta 	zTemp0+1
.9816	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9819	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.981b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.981e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9820	c9 08		cmp #$08			cmp 	#NSTFloat
.9822	f0 2a		beq $984e			beq 	_ANFloat
.9824	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9827	f0 05		beq $982e			beq		_ANNotFloat
.9829	e8		inx				inx
.982a	20 06 aa	jsr $aa06			jsr 	FloatIntegerPart 			; make it an integer
.982d	ca		dex				dex
.982e					_ANNotFloat:
.982e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9831	29 03		and #$03			and 	#3
.9833	d0 05		bne $983a			bne 	_ANByteWord
.9835	20 5a 98	jsr $985a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9838	80 1e		bra $9858			bra 	_ANExit
.983a					_ANByteWord:
.983a	48		pha				pha 								; save count
.983b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.983e	92 36		sta ($36)			sta 	(zTemp0)
.9840	68		pla				pla
.9841	c9 01		cmp #$01			cmp	 	#1
.9843	f0 13		beq $9858			beq 	_ANExit
.9845	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9848	a0 01		ldy #$01			ldy 	#1
.984a	91 36		sta ($36),y			sta 	(zTemp0),y
.984c	80 0a		bra $9858			bra 	_ANExit
.984e					_ANFloat:
.984e	20 5a 98	jsr $985a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9851	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9854	a0 04		ldy #$04			ldy 	#4
.9856	91 36		sta ($36),y			sta 	(zTemp0),y
.9858					_ANExit:
.9858	7a		ply				ply
.9859	60		rts				rts
.985a					_ANCopy4PackSign:
.985a	a0 03		ldy #$03			ldy 	#3
.985c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.985f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9861	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9864	91 36		sta ($36),y			sta 	(zTemp0),y
.9866	88		dey				dey
.9867	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.986a	91 36		sta ($36),y			sta 	(zTemp0),y
.986c	88		dey				dey
.986d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9870	91 36		sta ($36),y			sta 	(zTemp0),y
.9872	88		dey				dey
.9873	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9876	91 36		sta ($36),y			sta 	(zTemp0),y
.9878	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9879					AssignString:
.9879	5a		phy				phy
.987a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.987d	85 38		sta $38				sta 	zTemp1
.987f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9882	85 39		sta $39				sta 	zTemp1+1
.9884	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9887	85 36		sta $36				sta 	zTemp0
.9889	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.988c	85 37		sta $37				sta 	zTemp0+1
.988e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9890	b1 36		lda ($36),y			lda 	(zTemp0),y
.9892	f0 23		beq $98b7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9894	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9895	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9897	e9 02		sbc #$02			sbc 	#2
.9899	85 3c		sta $3c				sta 	zsTemp
.989b	a0 01		ldy #$01			ldy 	#1
.989d	b1 36		lda ($36),y			lda 	(zTemp0),y
.989f	e9 00		sbc #$00			sbc 	#0
.98a1	85 3d		sta $3d				sta 	zsTemp+1
.98a3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98a5					_ASGetLength:
.98a5	c8		iny				iny
.98a6	b1 38		lda ($38),y			lda 	(zTemp1),y
.98a8	d0 fb		bne $98a5			bne 	_ASGetLength
.98aa	98		tya				tya 								; is this length <= current length
.98ab	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98ad	90 20		bcc $98cf			bcc 	_ASCopyString
.98af	f0 1e		beq $98cf			beq 	_ASCopyString
.98b1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98b3	a0 01		ldy #$01			ldy 	#1
.98b5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.98b7					_ASNewStringRequired:
.98b7	e8		inx				inx 								; concrete the new string.
.98b8	20 89 af	jsr $af89			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.98bb	ca		dex				dex
.98bc	18		clc				clc
.98bd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.98c0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.98c2	92 36		sta ($36)			sta 	(zTemp0)
.98c4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.98c7	69 00		adc #$00			adc 	#0
.98c9	a0 01		ldy #$01			ldy 	#1
.98cb	91 36		sta ($36),y			sta 	(zTemp0),y
.98cd	80 0d		bra $98dc			bra 	_ASExit
.98cf					_ASCopyString:
.98cf	a0 00		ldy #$00			ldy 	#0
.98d1					_ASCopyLoop:
.98d1	b1 38		lda ($38),y			lda 	(zTemp1),y
.98d3	c8		iny				iny
.98d4	c8		iny				iny
.98d5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.98d7	88		dey				dey
.98d8	c9 00		cmp #$00			cmp 	#0
.98da	d0 f5		bne $98d1			bne 	_ASCopyLoop
.98dc					_ASExit:
.98dc	7a		ply				ply
.98dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98de					DereferenceTopTwo:
.98de	e8		inx				inx
.98df	20 e3 98	jsr $98e3			jsr 	Dereference 				; deref x+1
.98e2	ca		dex				dex  								; falls through to deref x
.98e3					Dereference:
.98e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.98e6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.98e8	f0 57		beq $9941			beq 	_DRFExit 					; not a reference
.98ea	5a		phy				phy
.98eb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.98ee	85 36		sta $36				sta 	zTemp0
.98f0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f3	85 37		sta $37				sta 	zTemp0+1
.98f5	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.98f8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.98fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9900	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9902	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9904	f0 0f		beq $9915			beq 	_DRFDereferenceTwo
.9906	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9908	f0 39		beq $9943			beq 	_DRFFull
.990a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.990d	29 03		and #$03			and 	#3
.990f	f0 32		beq $9943			beq 	_DRFFull 					; the whole word
.9911	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9913	f0 07		beq $991c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9915					_DRFDereferenceTwo:
.9915	a0 01		ldy #$01			ldy 	#1
.9917	b1 36		lda ($36),y			lda 	(zTemp0),y
.9919	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.991c					_DRFClear23:
.991c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.991f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9922	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9925	29 18		and #$18			and 	#NSBTypeMask
.9927	9d 00 04	sta $0400,x			sta 	NSStatus,x
.992a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.992c	d0 12		bne $9940			bne 	_DRFNotString
.992e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9931	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9934	d0 0a		bne $9940			bne 	_DRFNotString
.9936	a9 42		lda #$42			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9938	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.993b	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.993d	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9940					_DRFNotString
.9940	7a		ply				ply 								; restore Y and exit
.9941					_DRFExit:
.9941	60		rts				rts
.9942					_DRFNullString:
>9942	00						.byte 	0
.9943					_DRFFull:
.9943	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9945	b1 36		lda ($36),y			lda 	(zTemp0),y
.9947	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.994a	c8		iny				iny
.994b	b1 36		lda ($36),y			lda 	(zTemp0),y
.994d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9950	c8		iny				iny
.9951	b1 36		lda ($36),y			lda 	(zTemp0),y
.9953	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9956	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9959	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.995c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.995e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9961	f0 06		beq $9969			beq 	_DRFNoExponent
.9963	c8		iny				iny 								; if not, read the exponent as well.
.9964	b1 36		lda ($36),y			lda 	(zTemp0),y
.9966	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9969					_DRFNoExponent:
.9969	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.996c	10 0d		bpl $997b			bpl 	_DRFExit2 					; if not, then exit.
.996e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9970	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9973	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9976	09 80		ora #$80			ora 	#NSBIsNegative
.9978	9d 00 04	sta $0400,x			sta 	NSStatus,x
.997b					_DRFExit2:
.997b	7a		ply				ply
.997c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.997d					EncodeNumberStart:
.997d	38		sec				sec
.997e	80 01		bra $9981			bra 	EncodeNumberContinue+1
.9980					EncodeNumberContinue:
.9980	18		clc				clc
.9981					EncodeNumber:
.9981	08		php				php 								; save reset.
.9982	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9984	f0 12		beq $9998			beq 	_ENIsOkay
.9986	c9 30		cmp #$30			cmp 	#"0"
.9988	90 04		bcc $998e			bcc 	_ENBadNumber
.998a	c9 3a		cmp #$3a			cmp 	#"9"+1
.998c	90 0a		bcc $9998			bcc 	_ENIsOkay
.998e					_ENBadNumber:
.998e	28		plp				plp 								; throw saved reset
.998f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9992	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9994	f0 7e		beq $9a14			beq 	_ENConstructFinal
.9996					_ENFail:
.9996	18		clc				clc 								; not allowed
.9997	60		rts				rts
.9998					_ENIsOkay:
.9998	28		plp				plp 								; are we restarting
.9999	90 15		bcc $99b0			bcc 	_ENNoRestart
.999b					_ENStartEncode:
.999b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.999d	f0 0c		beq $99ab			beq 	_ENFirstDP
.999f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.99a1	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.99a4	a9 01		lda #$01			lda 	#ESTA_Low
.99a6					_ENExitChange:
.99a6	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.99a9	38		sec				sec
.99aa	60		rts				rts
.99ab					_ENFirstDP:
.99ab	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero 					; clear integer part
.99ae	80 3f		bra $99ef			bra 	_ESTASwitchFloat			; go straight to float and exi
.99b0					_ENNoRestart:
.99b0	48		pha				pha 								; save on stack.
.99b1	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.99b4	c9 01		cmp #$01			cmp 	#ESTA_Low
.99b6	f0 09		beq $99c1			beq  	_ESTALowState
.99b8	c9 02		cmp #$02			cmp 	#ESTA_High
.99ba	f0 29		beq $99e5			beq 	_ESTAHighState
.99bc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99be	f0 3b		beq $99fb			beq 	_ESTADecimalState
>99c0	db						.byte 	$DB 						; causes a break in the emulator
.99c1					_ESTALowState:
.99c1	68		pla				pla 								; get value back
.99c2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.99c4	f0 29		beq $99ef			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.99c6	29 0f		and #$0f			and 	#15 						; make digit
.99c8	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.99cb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99ce	0a		asl a				asl 	a
.99cf	0a		asl a				asl 	a
.99d0	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.99d3	0a		asl a				asl 	a
.99d4	6d 86 04	adc $0486			adc 	DigitTemp
.99d7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99da	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99dc	90 05		bcc $99e3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99de	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99e0	8d 85 04	sta $0485			sta 	EncodeState
.99e3					_ESTANoSwitch:
.99e3	38		sec				sec
.99e4	60		rts				rts
.99e5					_ESTAHighState:
.99e5	68		pla				pla 								; get value back
.99e6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99e8	f0 05		beq $99ef			beq 	_ESTASwitchFloat
.99ea	20 4e 9a	jsr $9a4e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99ed	38		sec				sec
.99ee	60		rts				rts
.99ef					_ESTASwitchFloat:
.99ef	9c 87 04	stz $0487			stz 	DecimalCount
.99f2	e8		inx				inx 								; zero the decimal additive.
.99f3	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.99f6	ca		dex				dex
.99f7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99f9	80 ab		bra $99a6			bra 	_ENExitChange
.99fb					_ESTADecimalState:
.99fb	68		pla				pla 								; digit.
.99fc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99fe	f0 96		beq $9996			beq 	_ENFail
.9a00	e8		inx				inx 								; put digit into fractional part of X+1
.9a01	20 4e 9a	jsr $9a4e			jsr 	ESTAShiftDigitIntoMantissa
.9a04	ca		dex				dex
.9a05	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9a08	ad 87 04	lda $0487			lda 	DecimalCount
.9a0b	c9 0b		cmp #$0b			cmp 	#11
.9a0d	f0 02		beq $9a11			beq 	_ESTADSFail
.9a0f	38		sec				sec
.9a10	60		rts				rts
.9a11					_ESTADSFail:
.9a11	4c e9 ac	jmp $ace9			jmp 	RangeError
.9a14					_ENConstructFinal:
.9a14	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9a17	f0 33		beq $9a4c			beq 	_ENCFExit 					; no decimals
.9a19	5a		phy				phy
.9a1a	0a		asl a				asl 	a 							; x 4 and CLC
.9a1b	0a		asl a				asl 	a
.9a1c	6d 87 04	adc $0487			adc 	DecimalCount
.9a1f	a8		tay				tay
.9a20	b9 a8 ac	lda $aca8,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a23	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9a26	b9 a9 ac	lda $aca9,y			lda 	DecimalScalarTable-5+1,y
.9a29	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9a2c	b9 aa ac	lda $acaa,y			lda 	DecimalScalarTable-5+2,y
.9a2f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9a32	b9 ab ac	lda $acab,y			lda 	DecimalScalarTable-5+3,y
.9a35	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9a38	b9 ac ac	lda $acac,y			lda 	DecimalScalarTable-5+4,y
.9a3b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9a3e	a9 08		lda #$08			lda 	#NSTFloat
.9a40	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9a43	7a		ply				ply
.9a44	e8		inx				inx 								; multiply decimal const by decimal scalar
.9a45	20 30 aa	jsr $aa30			jsr 	FloatMultiply
.9a48	ca		dex				dex
.9a49	20 c5 a8	jsr $a8c5			jsr 	FloatAdd 					; add to integer part.
.9a4c					_ENCFExit:
.9a4c	18		clc				clc 								; reject the digit.
.9a4d	60		rts				rts
.9a4e					ESTAShiftDigitIntoMantissa:
.9a4e	29 0f		and #$0f			and 	#15 						; save digit
.9a50	48		pha				pha
.9a51	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a54	48		pha				pha
.9a55	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9a58	48		pha				pha
.9a59	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a5c	48		pha				pha
.9a5d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a60	48		pha				pha
.9a61	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 2
.9a64	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 4
.9a67	18		clc				clc 								; pop mantissa and add
.9a68	68		pla				pla
.9a69	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a6c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6f	68		pla				pla
.9a70	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9a73	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a76	68		pla				pla
.9a77	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9a7a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7d	68		pla				pla
.9a7e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9a81	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9a84	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 10
.9a87	68		pla				pla 								; add digit
.9a88	18		clc				clc
.9a89	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a8c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a8f	90 0d		bcc $9a9e			bcc 	_ESTASDExit
.9a91	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9a94	d0 08		bne $9a9e			bne 	_ESTASDExit
.9a96	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9a99	d0 03		bne $9a9e			bne 	_ESTASDExit
.9a9b	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9a9e					_ESTASDExit:
.9a9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a9f					EvaluateTerm:
.9a9f	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa1	30 18		bmi $9abb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9aa3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9aa5	b0 6f		bcs $9b16			bcs 	_ETVariable
.9aa7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9aa9	90 6e		bcc $9b19			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9aab	c9 3a		cmp #$3a			cmp 	#'9'+1
.9aad	b0 6a		bcs $9b19			bcs 	_ETPuncUnary
.9aaf	20 7d 99	jsr $997d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9ab2					_ETNumber:
.9ab2	c8		iny				iny 								; keep encoding until we have the numbers
.9ab3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab5	20 80 99	jsr $9980			jsr 	EncodeNumberContinue
.9ab8	b0 f8		bcs $9ab2			bcs 	_ETNumber 					; go back if accepted.
.9aba	60		rts				rts
.9abb					_ETCheckUnary:
.9abb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9abd	f0 41		beq $9b00			beq 	_ETString
.9abf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ac1	f0 12		beq $9ad5			beq 	_ETHexConstant
.9ac3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ac5	90 0b		bcc $9ad2			bcc 	_ETSyntaxError
.9ac7	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9ac9	b0 07		bcs $9ad2			bcs 	_ETSyntaxError
.9acb	da		phx				phx 								; push X on the stack
.9acc	0a		asl a				asl 	a 							; put vector x 2 into X
.9acd	aa		tax				tax
.9ace	c8		iny				iny 								; consume unary function token
.9acf	7c 8c 90	jmp ($908c,x)			jmp 	(VectorSet0,x) 				; and do it.
.9ad2					_ETSyntaxError:
.9ad2	4c e4 ac	jmp $ace4			jmp 	SyntaxError
.9ad5					_ETHexConstant:
.9ad5	c8		iny				iny 								; skip #
.9ad6	c8		iny				iny 								; skip count
.9ad7	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero 					; clear result
.9ada					_ETHLoop:
.9ada	b1 30		lda ($30),y			lda 	(codePtr),y
.9adc	c8		iny				iny 								; and consume
.9add	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9adf	f0 1e		beq $9aff			beq 	_ETHExit
.9ae1	48		pha				pha 								; save on stack.
.9ae2	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 2
.9ae5	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 4
.9ae8	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 8
.9aeb	20 92 9f	jsr $9f92			jsr 	NSMShiftLeft 				; x 16
.9aee	68		pla				pla 								; ASCII
.9aef	c9 41		cmp #$41			cmp 	#'A'
.9af1	90 02		bcc $9af5			bcc 	_ETHNotChar
.9af3	e9 07		sbc #$07			sbc 	#7
.9af5					_ETHNotChar:
.9af5	29 0f		and #$0f			and 	#15 						; digit now
.9af7	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9afa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9afd	80 db		bra $9ada			bra 	_ETHLoop 					; go round.
.9aff					_ETHExit:
.9aff	60		rts				rts
.9b00					_ETString:
.9b00	c8		iny				iny 								; look at length
.9b01	b1 30		lda ($30),y			lda 	(codePtr),y
.9b03	48		pha				pha
.9b04	c8		iny				iny 								; first character
.9b05	20 c7 9f	jsr $9fc7			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9b08	68		pla				pla 								; restore count and save
.9b09	85 36		sta $36				sta 	zTemp0
.9b0b	98		tya				tya 								; add length to Y to skip it.
.9b0c	18		clc				clc
.9b0d	65 36		adc $36				adc 	zTemp0
.9b0f	a8		tay				tay
.9b10	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9b12	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b15	60		rts				rts
.9b16					_ETVariable:
.9b16	4c 70 9b	jmp $9b70			jmp 	VariableHandler
.9b19					_ETPuncUnary:
.9b19	c8		iny				iny 								; consume the unary character
.9b1a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b1c	f0 2d		beq $9b4b			beq 	_ETUnaryNegate
.9b1e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9b20	f0 39		beq $9b5b			beq 	_ETDereference
.9b22	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9b24	f0 43		beq $9b69			beq 	_ETParenthesis
.9b26	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b28	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b2a	f0 06		beq $9b32			beq 	_ETIndirection
.9b2c	e6 36		inc $36				inc 	zTemp0
.9b2e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b30	d0 a0		bne $9ad2			bne 	_ETSyntaxError
.9b32					_ETIndirection:
.9b32	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b34	1a		inc a				inc 	a
.9b35	48		pha				pha
.9b36	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm				; evaluate the term
.9b39	20 e3 98	jsr $98e3			jsr 	Dereference 				; dereference it.
.9b3c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b3f	d0 07		bne $9b48			bne 	_ETTypeMismatch
.9b41	68		pla				pla 								; indirection 1-2
.9b42	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b44	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b47	60		rts				rts
.9b48					_ETTypeMismatch:
.9b48	4c ee ac	jmp $acee			jmp 	TypeError
.9b4b					_ETUnaryNegate:
.9b4b	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm				; evaluate the term
.9b4e	20 e3 98	jsr $98e3			jsr 	Dereference 				; dereference it.
.9b51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9b54	29 10		and #$10			and 	#NSTString
.9b56	d0 f0		bne $9b48			bne 	_ETTypeMismatch
.9b58	4c 29 9f	jmp $9f29			jmp 	NSMNegate  					; just toggles the sign bit.
.9b5b					_ETDereference:
.9b5b	20 9f 9a	jsr $9a9f			jsr 	EvaluateTerm				; evaluate the term
.9b5e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9b61	29 20		and #$20			and 	#NSBIsReference
.9b63	f0 e3		beq $9b48			beq 	_ETTypeMismatch
.9b65	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9b68	60		rts				rts
.9b69					_ETParenthesis:
.9b69	20 ce 97	jsr $97ce			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b6c	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; check for )
.9b6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b70					VariableHandler:
.9b70	b1 30		lda ($30),y			lda 	(codePtr),y
.9b72	18		clc				clc
.9b73	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b75	85 37		sta $37				sta 	zTemp0+1
.9b77	c8		iny				iny
.9b78	b1 30		lda ($30),y			lda 	(codePtr),y
.9b7a	85 36		sta $36				sta 	zTemp0
.9b7c	c8		iny				iny
.9b7d	18		clc				clc									; copy variable address+3 to mantissa
.9b7e	69 03		adc #$03			adc 	#3
.9b80	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b83	a5 37		lda $37				lda 	zTemp0+1
.9b85	69 00		adc #$00			adc 	#0
.9b87	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b8a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b8d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b90	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b93	5a		phy				phy
.9b94	a0 02		ldy #$02			ldy 	#2 							; read type
.9b96	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b98	7a		ply				ply
.9b99	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b9b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b9d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ba0	29 04		and #$04			and 	#NSBIsArray
.9ba2	d0 01		bne $9ba5			bne 	_VHArray
.9ba4	60		rts				rts
.9ba5					_VHArray:
.9ba5	e8		inx				inx
.9ba6	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9ba9	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9bab	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9bae	b1 30		lda ($30),y			lda 	(codePtr),y
.9bb0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9bb2	d0 06		bne $9bba			bne 	_VHNoSecondIndex
.9bb4	c8		iny				iny 								; skip the comma
.9bb5	e8		inx				inx
.9bb6	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9bb9	ca		dex				dex
.9bba					_VHNoSecondIndex:
.9bba	ca		dex				dex 								; set X back.
.9bbb	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; and check the right bracket.
.9bbe	5a		phy				phy 								; save position
.9bbf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9bc2	85 3e		sta $3e				sta 	zaTemp
.9bc4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bc7	85 3f		sta $3f				sta 	zaTemp+1
.9bc9	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9bcb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bcd	f0 02		beq $9bd1			beq 	_VHHas2Mask
.9bcf	a9 ff		lda #$ff			lda 	#$FF
.9bd1					_VHHas2Mask:
.9bd1	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9bd4	f0 54		beq $9c2a			beq 	_VHBadIndex
.9bd6	0a		asl a				asl 	a 							; carry will be set if a second index
.9bd7	90 09		bcc $9be2			bcc 	_VHCheckFirstIndex
.9bd9	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9bdb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bdd	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9be0	90 48		bcc $9c2a			bcc 	_VHBadIndex
.9be2					_VHCheckFirstIndex:
.9be2	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9be4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9be6	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9be9	90 3f		bcc $9c2a			bcc 	_VHBadIndex
.9beb	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bed	64 37		stz $37				stz 	zTemp0+1
.9bef	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bf2	30 0f		bmi $9c03			bmi 	_VHNoMultiply
.9bf4	da		phx				phx
.9bf5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bf8	48		pha				pha
.9bf9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bfb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bfd	1a		inc a				inc 	a 							; add 1 for zero base
.9bfe	fa		plx				plx
.9bff	20 80 ab	jsr $ab80			jsr 	Multiply8x8 				; calculate -> Z0
.9c02	fa		plx				plx
.9c03					_VHNoMultiply:
.9c03	18		clc				clc
.9c04	a5 36		lda $36				lda 	zTemp0
.9c06	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9c09	85 36		sta $36				sta 	zTemp0
.9c0b	a5 37		lda $37				lda 	zTemp0+1
.9c0d	69 00		adc #$00			adc 	#0
.9c0f	85 37		sta $37				sta 	zTemp0+1
.9c11	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9c14	20 f1 8a	jsr $8af1			jsr 	ScaleByBaseType
.9c17	18		clc				clc
.9c18	b2 3e		lda ($3e)			lda 	(zaTemp)
.9c1a	65 36		adc $36				adc 	zTemp0
.9c1c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c1f	a0 01		ldy #$01			ldy 	#1
.9c21	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c23	65 37		adc $37				adc 	zTemp0+1
.9c25	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c28	7a		ply				ply 								; restore position
.9c29	60		rts				rts
.9c2a					_VHBadIndex:
.9c2a	a9 17		lda #$17		lda	#23
.9c2c	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.aab6					AbsUnary:
.aab6	fa		plx				plx 								; restore stack pos
.aab7	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; get a float or int
.aaba	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.aabd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.aac0	29 7f		and #$7f			and 	#$7F
.aac2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aac5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c2f					AllocUnary:
.9c2f	fa		plx				plx 								; restore stack pos
.9c30	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger		; get bytes required.
.9c33	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.9c36	da		phx				phx 								; save X/Y
.9c37	5a		phy				phy
.9c38	8a		txa				txa 								; copy X into Y
.9c39	a8		tay				tay
.9c3a	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9c3d	aa		tax				tax
.9c3e	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9c41	20 4e 9c	jsr $9c4e			jsr 	AllocateXABytes 			; allocate memory
.9c44	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9c47	8a		txa				txa
.9c48	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9c4b	7a		ply				ply
.9c4c	fa		plx				plx
.9c4d	60		rts				rts
.9c4e					AllocateXABytes:
.9c4e	5a		phy				phy
.9c4f	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c52	84 36		sty $36				sty 	zTemp0
.9c54	5a		phy				phy
.9c55	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9c58	84 37		sty $37				sty 	zTemp0+1
.9c5a	5a		phy				phy
.9c5b	18		clc				clc 								; add to low memory pointer
.9c5c	6d 8c 04	adc $048c			adc 	lowMemPtr
.9c5f	8d 8c 04	sta $048c			sta 	lowMemPtr
.9c62	8a		txa				txa
.9c63	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9c66	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9c69	b0 2f		bcs $9c9a			bcs 	CISSMemory
.9c6b	20 8c 9c	jsr $9c8c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c6e					_ClearMemory:
.9c6e	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9c71	c5 36		cmp $36				cmp 	zTemp0
.9c73	d0 07		bne $9c7c			bne 	_CMClearNext
.9c75	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9c78	c5 37		cmp $37				cmp 	zTemp0+1
.9c7a	f0 0c		beq $9c88			beq 	_CMExit
.9c7c					_CMClearNext:
.9c7c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c7e	92 36		sta ($36)			sta 	(zTemp0)
.9c80	e6 36		inc $36				inc 	zTemp0
.9c82	d0 ea		bne $9c6e			bne 	_ClearMemory
.9c84	e6 37		inc $37				inc		zTemp0+1
.9c86	80 e6		bra $9c6e			bra 	_ClearMemory
.9c88					_CMExit:
.9c88	fa		plx				plx
.9c89	68		pla				pla
.9c8a	7a		ply				ply
.9c8b	60		rts				rts
.9c8c					CheckIdentifierStringSpace:
.9c8c	48		pha				pha
.9c8d	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9c90	18		clc				clc
.9c91	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c93	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9c96	b0 02		bcs $9c9a			bcs 	CISSMemory
.9c98	68		pla				pla
.9c99	60		rts				rts
.9c9a					CISSMemory:
.9c9a	a9 06		lda #$06		lda	#6
.9c9c	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.aac6					AscUnary:
.aac6	fa		plx				plx 								; restore stack pos
.aac7	20 dc 9e	jsr $9edc			jsr 	EvaluateString 				; get a string
.aaca	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.aacc	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.aacf	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.aad2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.aad3					FracUnary:
.aad3	fa		plx				plx 								; restore stack pos
.aad4	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; get a float or int
.aad7	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.aada	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aadd	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aadf	f0 04		beq $aae5			beq 	_IUZero
.aae1	20 a3 a9	jsr $a9a3			jsr 	FloatFractionalPart
.aae4	60		rts				rts
.aae5					_IUZero:
.aae5	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.aae8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aae9					IntUnary:
.aae9	fa		plx				plx 								; restore stack pos
.aaea	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; get a float or int
.aaed	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.aaf0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aaf3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aaf5	f0 03		beq $aafa			beq 	_IUExit
.aaf7	20 06 aa	jsr $aa06			jsr 	FloatIntegerPart
.aafa					_IUExit:
.aafa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aafb					LenUnary:
.aafb	fa		plx				plx 								; restore stack pos
.aafc	20 dc 9e	jsr $9edc			jsr 	EvaluateString 				; get a string
.aaff	5a		phy				phy
.ab00	a0 00		ldy #$00			ldy 	#0 							; find length
.ab02					_LenFind:
.ab02	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab04	f0 06		beq $ab0c			beq 	_LenExit
.ab06	c8		iny				iny
.ab07	d0 f9		bne $ab02			bne 	_LenFind
.ab09	4c e9 ac	jmp $ace9			jmp 	RangeError 					; string > 255
.ab0c					_LenExit:
.ab0c	98		tya				tya
.ab0d	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.ab10	7a		ply				ply
.ab11	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.ab14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9c9f					Unary_Not:
.9c9f	fa		plx				plx
.9ca0	20 f4 9e	jsr $9ef4			jsr 	EvaluateInteger 			; get integer
.9ca3	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.9ca6	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; zero mantissa ?
.9ca9	f0 04		beq $9caf			beq 	_NotZero
.9cab	20 7d 9f	jsr $9f7d			jsr 	NSMSetZero
.9cae	60		rts				rts
.9caf					_NotZero:
.9caf	4c 32 94	jmp $9432			jmp 	ReturnTrue
.9cb2					_UNBad:
.9cb2	4c f3 ac	jmp $acf3			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9cb5					Unary_Random:
.9cb5	fa		plx				plx
.9cb6	20 2e 9d	jsr $9d2e			jsr 	Random32Bit 				; get a random number
.9cb9	20 13 9d	jsr $9d13			jsr 	URCopyToMantissa  			; put in mantissa
.9cbc	e8		inx				inx
.9cbd	20 09 9f	jsr $9f09			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9cc0	ca		dex				dex
.9cc1	20 82 a7	jsr $a782			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9cc4	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9cc7	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9cca	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.9ccd	60		rts				rts
.9cce					Unary_Rnd:
.9cce	fa		plx				plx
.9ccf	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; number to use.
.9cd2	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; closing bracket
.9cd5	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9cd8	f0 2b		beq $9d05			beq 	_URCopySeed
.9cda	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9cdd	10 23		bpl $9d02			bpl 	_URDontSeed
.9cdf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ce2	49 17		eor #$17			eor 	#$17
.9ce4	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ce7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cea	49 a5		eor #$a5			eor 	#$A5
.9cec	8d 89 04	sta $0489			sta 	RandomSeed+1
.9cef	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9cf2	49 c2		eor #$c2			eor 	#$C2
.9cf4	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9cf7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9cfa	49 9d		eor #$9d			eor 	#$9D
.9cfc	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9cff	20 2e 9d	jsr $9d2e			jsr 	Random32Bit
.9d02					_URDontSeed:
.9d02	20 2e 9d	jsr $9d2e			jsr 	Random32Bit 				; generate a number.
.9d05					_URCopySeed:
.9d05	20 13 9d	jsr $9d13			jsr 	URCopyToMantissa 			; copy into mantissa
.9d08	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9d0a	8d 28 04	sta $0428			sta 	NSExponent
.9d0d	a9 08		lda #$08			lda 	#NSTFloat
.9d0f	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9d12	60		rts				rts
.9d13					URCopyToMantissa:
.9d13	ad 88 04	lda $0488			lda 	RandomSeed+0
.9d16	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d19	ad 89 04	lda $0489			lda 	RandomSeed+1
.9d1c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d1f	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9d22	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d25	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9d28	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9d2a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d2d	60		rts				rts
.9d2e					Random32Bit:
.9d2e	5a		phy				phy
.9d2f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9d31	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9d34	d0 03		bne $9d39			bne 	_Random1
.9d36	a8		tay				tay 								; if so do it 256 times
.9d37	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9d39					_Random1:
.9d39	0a		asl a				asl 	a 							; LSFR RNG
.9d3a	2e 89 04	rol $0489			rol 	RandomSeed+1
.9d3d	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9d40	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9d43	90 02		bcc $9d47			bcc 	_Random2
.9d45	49 c5		eor #$c5			eor 	#$C5
.9d47					_Random2:
.9d47	88		dey				dey
.9d48	d0 ef		bne $9d39			bne 	_Random1
.9d4a	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d4d	7a		ply				ply
.9d4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ab15					SgnUnary:
.ab15	fa		plx				plx 								; restore stack pos
.ab16	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber 				; get a float or int
.ab19	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.ab1c	20 ad 9f	jsr $9fad			jsr 	NSMIsZero 					; if zero
.ab1f	f0 10		beq $ab31			beq 	_SGZero  					; return Int Zero
.ab21	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ab24	48		pha				pha
.ab25	a9 01		lda #$01			lda 	#1 							; set to 1
.ab27	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.ab2a	68		pla				pla
.ab2b	29 80		and #$80			and		#$80 						; copy the sign byte out
.ab2d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab30	60		rts				rts
.ab31	20 7d 9f	jsr $9f7d	_SGZero:jsr 	NSMSetZero
.ab34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ab35					ValUnary:
.ab35	fa		plx				plx 								; restore stack pos
.ab36	20 4b ab	jsr $ab4b			jsr 	ValMainCode 				; do the main val() code
.ab39	b0 01		bcs $ab3c			bcs 	_VUError 					; couldn't convert
.ab3b	60		rts				rts
.ab3c					_VUError:
.ab3c	4c ee ac	jmp $acee			jmp 	TypeError
.ab3f					IsValUnary:
.ab3f	fa		plx				plx 								; restore stack pos
.ab40	20 4b ab	jsr $ab4b			jsr 	ValMainCode 				; do the main val() code
.ab43	b0 03		bcs $ab48			bcs 	_VUBad
.ab45	4c 32 94	jmp $9432			jmp 	ReturnTrue
.ab48					_VUBad:
.ab48	4c 3e 94	jmp $943e			jmp 	ReturnFalse
.ab4b					ValMainCode:
.ab4b	20 dc 9e	jsr $9edc			jsr 	EvaluateString 				; get a string
.ab4e	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; check right bracket present
.ab51	5a		phy				phy
.ab52	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ab54	f0 17		beq $ab6d			beq 	_VMCFail2
.ab56	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ab58	48		pha				pha 								; save first character
.ab59	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ab5b	d0 01		bne $ab5e			bne 	_VMCStart
.ab5d	c8		iny				iny 								; skip over -
.ab5e					_VMCStart:
.ab5e	38		sec				sec 								; initialise first time round.
.ab5f					_VMCNext:
.ab5f	c8		iny				iny 								; pre-increment
.ab60	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ab62	f0 0c		beq $ab70			beq 	_VMCSuccess 				; successful.
.ab64	20 81 99	jsr $9981			jsr 	EncodeNumber 				; send it to the number-builder
.ab67	90 03		bcc $ab6c			bcc 	_VMCFail 					; if failed, give up.
.ab69	18		clc				clc 								; next time round, countinue
.ab6a	80 f3		bra $ab5f			bra 	_VMCNext
.ab6c					_VMCFail:
.ab6c	68		pla				pla
.ab6d					_VMCFail2:
.ab6d	7a		ply				ply
.ab6e	38		sec				sec
.ab6f	60		rts				rts
.ab70					_VMCSuccess:
.ab70	a9 00		lda #$00			lda 	#0 							; construct final
.ab72	20 81 99	jsr $9981			jsr 	EncodeNumber
.ab75	68		pla				pla
.ab76	c9 2d		cmp #$2d			cmp 	#"-"
.ab78	d0 03		bne $ab7d			bne 	_VMCNotNegative
.ab7a	20 29 9f	jsr $9f29			jsr		NSMNegate
.ab7d					_VMCNotNegative:
.ab7d	7a		ply				ply
.ab7e	18		clc				clc
.ab7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d4f					ChrUnary:
.9d4f	fa		plx				plx 								; restore stack pos
.9d50	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger			; get value
.9d53	48		pha				pha
.9d54	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.9d57	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d59	20 0a b0	jsr $b00a			jsr 	StringTempAllocate
.9d5c	68		pla				pla 								; write number to it
.9d5d	20 48 b0	jsr $b048			jsr 	StringTempWrite
.9d60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d61					SpcUnary:
.9d61	fa		plx				plx 								; restore stack pos
.9d62	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger			; get value
.9d65	5a		phy				phy
.9d66	48		pha				pha 								; save count
.9d67	20 0a b0	jsr $b00a			jsr 	StringTempAllocate
.9d6a	7a		ply				ply 								; to do count in Y
.9d6b					_SpcLoop:
.9d6b	c0 00		cpy #$00			cpy 	#0
.9d6d	f0 08		beq $9d77			beq 	_SpcExit
.9d6f	a9 20		lda #$20			lda 	#32
.9d71	20 48 b0	jsr $b048			jsr 	StringTempWrite
.9d74	88		dey				dey
.9d75	80 f4		bra $9d6b			bra 	_SPCLoop
.9d77					_SpcExit:
.9d77	7a		ply				ply
.9d78	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket
.9d7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d7c					Unary_Str:
.9d7c	fa		plx				plx
.9d7d	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber  			; get number
.9d80	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; closing bracket
.9d83	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d85	20 9e 9d	jsr $9d9e			jsr 	ConvertNumberToString 		; do the conversion.
.9d88	a9 21		lda #$21			lda		#33 						; create buffer
.9d8a	20 0a b0	jsr $b00a			jsr 	StringTempAllocate 			; allocate memory
.9d8d	da		phx				phx
.9d8e	a2 00		ldx #$00			ldx 	#0
.9d90					_USCopy:
.9d90	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d93	20 48 b0	jsr $b048			jsr 	StringTempWrite
.9d96	e8		inx				inx
.9d97	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d9a	d0 f4		bne $9d90			bne 	_USCopy
.9d9c	fa		plx				plx
.9d9d	60		rts				rts
.9d9e					ConvertNumberToString:
.9d9e	5a		phy				phy 								; save code position
.9d9f	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9da2	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9da5	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9da8	10 0a		bpl $9db4			bpl 	_CNTSNotNegative
.9daa	29 7f		and #$7f			and 	#$7F 						; make +ve
.9dac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9daf	a9 2d		lda #$2d			lda 	#"-"
.9db1	20 1a 9e	jsr $9e1a			jsr 	WriteDecimalBuffer
.9db4					_CNTSNotNegative:
.9db4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9db7	f0 15		beq $9dce			beq 	_CNTSNotFloat
.9db9	e8		inx				inx 								; round up
.9dba	a9 01		lda #$01			lda 	#1
.9dbc	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.9dbf	ca		dex				dex
.9dc0	bd 28 04	lda $0428,x			lda		NSExponent,x
.9dc3	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9dc6	a9 08		lda #$08			lda 	#NSTFloat
.9dc8	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9dcb	20 c5 a8	jsr $a8c5			jsr 	FloatAdd
.9dce					_CNTSNotFloat:
.9dce	20 fc 9d	jsr $9dfc			jsr 	MakePlusTwoString
.9dd1	20 a3 a9	jsr $a9a3			jsr 	FloatFractionalPart 		; get the fractional part
.9dd4	20 67 aa	jsr $aa67			jsr 	NSNormalise					; normalise , exit if zero
.9dd7	f0 21		beq $9dfa			beq 	_CNTSExit
.9dd9	a9 2e		lda #$2e			lda 	#"."
.9ddb	20 1a 9e	jsr $9e1a			jsr 	WriteDecimalBuffer 			; write decimal place
.9dde					_CNTSDecimal:
.9dde	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9de1	30 17		bmi $9dfa			bmi 	_CNTSExit
.9de3	e8		inx				inx 								; x 10.0
.9de4	a9 0a		lda #$0a			lda 	#10
.9de6	20 7f 9f	jsr $9f7f			jsr 	NSMSetByte
.9de9	a9 08		lda #$08			lda 	#NSTFloat
.9deb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dee	ca		dex				dex
.9def	20 30 aa	jsr $aa30			jsr 	FloatMultiply
.9df2	20 fc 9d	jsr $9dfc			jsr 	MakePlusTwoString
.9df5	20 a3 a9	jsr $a9a3			jsr 	FloatFractionalPart 		; get the fractional part
.9df8	80 e4		bra $9dde			bra 	_CNTSDecimal 				; keep going.
.9dfa					_CNTSExit:
.9dfa	7a		ply				ply
.9dfb	60		rts				rts
.9dfc					MakePlusTwoString:
.9dfc	da		phx				phx
.9dfd	20 54 9f	jsr $9f54			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e00	e8		inx				inx 								; access it
.9e01	e8		inx				inx
.9e02	20 06 aa	jsr $aa06			jsr 	FloatIntegerPart 			; make it an integer
.9e05	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9e07	20 6f a8	jsr $a86f			jsr 	ConvertInt32
.9e0a	a2 00		ldx #$00			ldx	 	#0
.9e0c					_MPTSCopy:
.9e0c	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e0f	20 1a 9e	jsr $9e1a			jsr 	WriteDecimalBuffer
.9e12	e8		inx				inx
.9e13	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e16	d0 f4		bne $9e0c			bne 	_MPTSCopy
.9e18	fa		plx				plx
.9e19	60		rts				rts
.9e1a					WriteDecimalBuffer:
.9e1a	da		phx				phx
.9e1b	ae 95 04	ldx $0495			ldx 	dbOffset
.9e1e	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9e21	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9e24	ee 95 04	inc $0495			inc 	dbOffset
.9e27	fa		plx				plx
.9e28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9e29					Unary_Left:
.9e29	fa		plx				plx
.9e2a	18		clc				clc 								; only one parameter
.9e2b	20 a0 9e	jsr $9ea0			jsr 	SubstringInitial 			; set up.
.9e2e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9e31	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e34	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9e37	80 2c		bra $9e65			bra 	SubstringMain
.9e39					Unary_Right:
.9e39	fa		plx				plx
.9e3a	18		clc				clc 								; only one parameter
.9e3b	20 a0 9e	jsr $9ea0			jsr 	SubstringInitial 			; set up.
.9e3e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9e41	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e44	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9e47	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9e4a	b0 02		bcs $9e4e			bcs 	_URNotUnderflow
.9e4c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9e4e					_URNotUnderFlow:
.9e4e	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9e51	80 12		bra $9e65			bra 	SubStringMain
.9e53					Unary_Mid:
.9e53	fa		plx				plx
.9e54	38		sec				sec 								; two parameters
.9e55	20 a0 9e	jsr $9ea0			jsr 	SubstringInitial 			; set up.
.9e58	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e5b	f0 05		beq $9e62			beq 	_UMError
.9e5d	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e60	80 03		bra $9e65			bra 	SubStringMain
.9e62					_UMError:
.9e62	4c f3 ac	jmp $acf3			jmp 	ArgumentError
.9e65					SubStringMain:
.9e65	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e68	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9e6b	b0 2d		bcs $9e9a			bcs 	_SSMNull 					; if so, return an empty string.
.9e6d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e70	f0 28		beq $9e9a			beq 	_SSMNull 					; return empty string.
.9e72	18		clc				clc 								; add the offset +1 to the address and
.9e73	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9e76	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9e79	85 36		sta $36				sta 	zTemp0
.9e7b	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9e7e	69 00		adc #$00			adc 	#0
.9e80	85 37		sta $37				sta 	zTemp0+1
.9e82					_SSMNoCarry:
.9e82	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e85	20 0a b0	jsr $b00a			jsr 	StringTempAllocate 			; allocate that many characters
.9e88	5a		phy				phy 								; save Y
.9e89	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e8b					_SSMCopy:
.9e8b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e8d	f0 09		beq $9e98			beq 	_SSMEString 				; no more to copy
.9e8f	20 48 b0	jsr $b048			jsr 	StringTempWrite 			; and write it out.
.9e92	c8		iny				iny
.9e93	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9e96	d0 f3		bne $9e8b			bne 	_SSMCopy
.9e98					_SSMEString:
.9e98	7a		ply				ply
.9e99					_SSMExit:
.9e99	60		rts				rts
.9e9a					_SSMNull:
.9e9a	a9 00		lda #$00			lda 	#0
.9e9c	20 0a b0	jsr $b00a			jsr 	StringTempAllocate
.9e9f	60		rts				rts
.9ea0					SubstringInitial:
.9ea0	da		phx				phx 								; save initial stack position
.9ea1	08		php				php 								; save carry on stack indicating 2 parameters
.9ea2	20 dc 9e	jsr $9edc			jsr 	EvaluateString 				; get a string
.9ea5	5a		phy				phy 								; calculate length to exponent.
.9ea6	a0 ff		ldy #$ff			ldy 	#$FF
.9ea8					_SIFindLength:
.9ea8	c8		iny				iny
.9ea9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eab	d0 fb		bne $9ea8			bne 	_SIFindLength
.9ead	98		tya				tya
.9eae	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9eb1	7a		ply				ply
.9eb2	e8		inx				inx
.9eb3	20 06 a7	jsr $a706			jsr 	CheckComma 					; comma next
.9eb6	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; get next parameter
.9eb9	28		plp				plp 								; is it the last parameter ?
.9eba	90 07		bcc $9ec3			bcc 	_SSIExit 					; if so, exit.
.9ebc	e8		inx				inx
.9ebd	20 06 a7	jsr $a706			jsr 	CheckComma 					; comma next
.9ec0	20 15 9f	jsr $9f15			jsr 	Evaluate8BitInteger 		; get last parameter
.9ec3					_SSIExit:
.9ec3	fa		plx				plx
.9ec4	20 fe a6	jsr $a6fe			jsr 	CheckRightBracket 			; check closing bracket
.9ec7	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9ec8					EvaluateValue:
.9ec8	48		pha				pha
.9ec9	20 ce 97	jsr $97ce			jsr		EvaluateExpression 			; expression
.9ecc	20 e3 98	jsr $98e3			jsr 	Dereference					; derefernce it
.9ecf	68		pla				pla
.9ed0	60		rts				rts
.9ed1					EvaluateNumber:
.9ed1	20 c8 9e	jsr $9ec8			jsr 	EvaluateValue 				; get a value
.9ed4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9ed7	29 10		and #$10			and 	#NSBIsString
.9ed9	d0 16		bne $9ef1			bne 	HelperTypeError
.9edb	60		rts				rts
.9edc					EvaluateString:
.9edc	20 c8 9e	jsr $9ec8			jsr 	EvaluateValue 				; get a value
.9edf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9ee2	29 10		and #$10			and 	#NSBIsString
.9ee4	f0 0b		beq $9ef1			beq 	HelperTypeError
.9ee6					CopyAddressToTemp0:
.9ee6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9ee9	85 36		sta $36				sta 	zTemp0
.9eeb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9eee	85 37		sta $37				sta 	zTemp0+1
.9ef0	60		rts				rts
.9ef1					HelperTypeError:
.9ef1	4c ee ac	jmp $acee			jmp 	TypeError
.9ef4					EvaluateInteger:
.9ef4	20 d1 9e	jsr $9ed1			jsr 	EvaluateNumber
.9ef7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9efa	d0 0a		bne $9f06			bne 	HelperValueError 			; if not, it's a float.
.9efc	60		rts				rts
.9efd					EvaluateUnsignedInteger:
.9efd	20 f4 9e	jsr $9ef4			jsr 	EvaluateInteger 			; check integer is +ve
.9f00	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f03	30 01		bmi $9f06			bmi 	HelperValueError
.9f05	60		rts				rts
.9f06					HelperValueError:
.9f06	4c f3 ac	jmp $acf3			jmp 	ArgumentError
.9f09					Evaluate16BitInteger:
.9f09	20 fd 9e	jsr $9efd			jsr	 	EvaluateUnsignedInteger		; get integer
.9f0c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9f0f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9f12	d0 f2		bne $9f06			bne 	HelperValueError
.9f14	60		rts				rts
.9f15					Evaluate8BitInteger:
.9f15	20 fd 9e	jsr $9efd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9f18	d0 ec		bne $9f06			bne 	HelperValueError
.9f1a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9f1d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9f20	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f23	d0 e1		bne $9f06			bne 	HelperValueError
.9f25	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ab80					Multiply8x8:
.ab80	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ab81	85 36		sta $36			  	sta 	zTemp0
.ab83	86 37		stx $37				stx 	zTemp0+1
.ab85	a9 00		lda #$00			lda 	#0
.ab87	a2 08		ldx #$08			ldx 	#8
.ab89					_M88Loop:
.ab89	90 03		bcc $ab8e			bcc 	_M88NoAdd
.ab8b	18		clc				clc
.ab8c	65 37		adc $37				adc 	zTemp0+1
.ab8e					_M88NoAdd:
.ab8e	6a		ror a				ror 	a
.ab8f	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ab91	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ab92	d0 f5		bne $ab89			bne 	_M88Loop
.ab94	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ab96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9f29					NSMNegate:
.9f29	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f2c	49 80		eor #$80			eor 	#NSBIsNegative
.9f2e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f31	60		rts				rts
.9f32					NSMNegateMantissa:
.9f32	38		sec				sec
.9f33	a9 00		lda #$00			lda 	#0
.9f35	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9f38	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f3b	a9 00		lda #$00			lda 	#0
.9f3d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9f40	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f43	a9 00		lda #$00			lda 	#0
.9f45	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9f48	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f4b	a9 00		lda #$00			lda 	#0
.9f4d	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9f50	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f53	60		rts				rts
.9f54					NSMShiftUpTwo:
.9f54	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f57	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f5a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f5d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f60	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f63	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f66	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f69	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f6c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9f6f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f72	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f75	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f78	60		rts				rts
.9f79					NSMSetZeroMantissaOnly:
.9f79	a9 00		lda #$00			lda 	#0
.9f7b	80 08		bra $9f85			bra 	NSMSetMantissa
.9f7d					NSMSetZero:
.9f7d	a9 00		lda #$00			lda 	#0
.9f7f					NSMSetByte:
.9f7f	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f82	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9f85					NSMSetMantissa:
.9f85	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9f88	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9f8b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9f8e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f91	60		rts				rts
.9f92					NSMShiftLeft:
.9f92	18		clc				clc
.9f93					NSMRotateLeft:
.9f93	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9f96	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9f99	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9f9c	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9f9f	60		rts				rts
.9fa0					NSMShiftRight:
.9fa0	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9fa3	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9fa6	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9fa9	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9fac	60		rts				rts
.9fad					NSMIsZero:
.9fad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9fb0	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9fb3	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9fb6	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9fb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ab97					Assemble_ora:
.ab97	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>ab9a	01					.byte $01
.ab9b					Assemble_and:
.ab9b	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>ab9e	21					.byte $21
.ab9f					Assemble_eor:
.ab9f	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>aba2	41					.byte $41
.aba3					Assemble_adc:
.aba3	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>aba6	61					.byte $61
.aba7					Assemble_sta:
.aba7	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>abaa	81					.byte $81
.abab					Assemble_lda:
.abab	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>abae	a1					.byte $a1
.abaf					Assemble_cmp:
.abaf	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>abb2	c1					.byte $c1
.abb3					Assemble_sbc:
.abb3	20 f0 86	jsr $86f0		jsr	AssembleGroup1
>abb6	e1					.byte $e1
.abb7					Assemble_asl:
.abb7	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abba	02					.byte $02
>abbb	75					.byte $75
.abbc					Assemble_rol:
.abbc	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abbf	22					.byte $22
>abc0	75					.byte $75
.abc1					Assemble_lsr:
.abc1	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abc4	42					.byte $42
>abc5	75					.byte $75
.abc6					Assemble_ror:
.abc6	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abc9	62					.byte $62
>abca	75					.byte $75
.abcb					Assemble_stx:
.abcb	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abce	82					.byte $82
>abcf	50					.byte $50
.abd0					Assemble_ldx:
.abd0	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abd3	a2					.byte $a2
>abd4	d0					.byte $d0
.abd5					Assemble_dec:
.abd5	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abd8	c2					.byte $c2
>abd9	55					.byte $55
.abda					Assemble_inc:
.abda	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abdd	e2					.byte $e2
>abde	55					.byte $55
.abdf					Assemble_stz:
.abdf	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abe2	60					.byte $60
>abe3	44					.byte $44
.abe4					Assemble_bit:
.abe4	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abe7	20					.byte $20
>abe8	55					.byte $55
.abe9					Assemble_sty:
.abe9	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abec	80					.byte $80
>abed	54					.byte $54
.abee					Assemble_ldy:
.abee	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abf1	a0					.byte $a0
>abf2	d5					.byte $d5
.abf3					Assemble_cpy:
.abf3	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abf6	c0					.byte $c0
>abf7	d4					.byte $d4
.abf8					Assemble_cpx:
.abf8	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>abfb	e0					.byte $e0
>abfc	d0					.byte $d0
.abfd					Assemble_tsb:
.abfd	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>ac00	00					.byte $00
>ac01	50					.byte $50
.ac02					Assemble_trb:
.ac02	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>ac05	10					.byte $10
>ac06	50					.byte $50
.ac07					Assemble_jsr:
.ac07	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>ac0a	14					.byte $14
>ac0b	10					.byte $10
.ac0c					Assemble_jmp:
.ac0c	20 f7 86	jsr $86f7		jsr	AssembleGroup2
>ac0f	40					.byte $40
>ac10	10					.byte $10
.ac11					Assemble_bpl:
.ac11	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac14	10					.byte $10
.ac15					Assemble_bmi:
.ac15	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac18	30					.byte $30
.ac19					Assemble_bvc:
.ac19	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac1c	50					.byte $50
.ac1d					Assemble_bvs:
.ac1d	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac20	70					.byte $70
.ac21					Assemble_bcc:
.ac21	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac24	90					.byte $90
.ac25					Assemble_bcs:
.ac25	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac28	b0					.byte $b0
.ac29					Assemble_bne:
.ac29	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac2c	d0					.byte $d0
.ac2d					Assemble_beq:
.ac2d	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac30	f0					.byte $f0
.ac31					Assemble_bra:
.ac31	20 48 87	jsr $8748		jsr	AssembleGroup3
>ac34	80					.byte $80
.ac35					Assemble_brk:
.ac35	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac38	00					.byte $00
.ac39					Assemble_php:
.ac39	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac3c	08					.byte $08
.ac3d					Assemble_clc:
.ac3d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac40	18					.byte $18
.ac41					Assemble_plp:
.ac41	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac44	28					.byte $28
.ac45					Assemble_sec:
.ac45	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac48	38					.byte $38
.ac49					Assemble_rti:
.ac49	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac4c	40					.byte $40
.ac4d					Assemble_pha:
.ac4d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac50	48					.byte $48
.ac51					Assemble_cli:
.ac51	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac54	58					.byte $58
.ac55					Assemble_phy:
.ac55	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac58	5a					.byte $5a
.ac59					Assemble_rts:
.ac59	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac5c	60					.byte $60
.ac5d					Assemble_pla:
.ac5d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac60	68					.byte $68
.ac61					Assemble_sei:
.ac61	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac64	78					.byte $78
.ac65					Assemble_ply:
.ac65	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac68	7a					.byte $7a
.ac69					Assemble_dey:
.ac69	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac6c	88					.byte $88
.ac6d					Assemble_txa:
.ac6d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac70	8a					.byte $8a
.ac71					Assemble_tya:
.ac71	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac74	98					.byte $98
.ac75					Assemble_txs:
.ac75	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac78	9a					.byte $9a
.ac79					Assemble_tay:
.ac79	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac7c	a8					.byte $a8
.ac7d					Assemble_tax:
.ac7d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac80	aa					.byte $aa
.ac81					Assemble_clv:
.ac81	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac84	b8					.byte $b8
.ac85					Assemble_tsx:
.ac85	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac88	ba					.byte $ba
.ac89					Assemble_iny:
.ac89	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac8c	c8					.byte $c8
.ac8d					Assemble_dex:
.ac8d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac90	ca					.byte $ca
.ac91					Assemble_cld:
.ac91	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac94	d8					.byte $d8
.ac95					Assemble_phx:
.ac95	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac98	da					.byte $da
.ac99					Assemble_stp:
.ac99	20 7e 87	jsr $877e		jsr	AssembleGroup4
>ac9c	db					.byte $db
.ac9d					Assemble_inx:
.ac9d	20 7e 87	jsr $877e		jsr	AssembleGroup4
>aca0	e8					.byte $e8
.aca1					Assemble_nop:
.aca1	20 7e 87	jsr $877e		jsr	AssembleGroup4
>aca4	ea					.byte $ea
.aca5					Assemble_sed:
.aca5	20 7e 87	jsr $877e		jsr	AssembleGroup4
>aca8	f8					.byte $f8
.aca9					Assemble_plx:
.aca9	20 7e 87	jsr $877e		jsr	AssembleGroup4
>acac	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.acad					DecimalScalarTable:
>acad	66 66 66 66				.dword $66666666 ; 0.1
>acb1	de					.byte $de
>acb2	1f 85 eb 51				.dword $51eb851f ; 0.01
>acb6	db					.byte $db
>acb7	4c 37 89 41				.dword $4189374c ; 0.001
>acbb	d8					.byte $d8
>acbc	ac 8b db 68				.dword $68db8bac ; 0.0001
>acc0	d4					.byte $d4
>acc1	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>acc5	d1					.byte $d1
>acc6	83 de 1b 43				.dword $431bde83 ; 1e-06
>acca	ce					.byte $ce
>accb	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>accf	ca					.byte $ca
>acd0	89 3b e6 55				.dword $55e63b89 ; 1e-08
>acd4	c7					.byte $c7
>acd5	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>acd9	c4					.byte $c4
>acda	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>acde	c0					.byte $c0
>acdf	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ace3	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ace4					SyntaxError:
.ace4	a9 02		lda #$02		lda	#2
.ace6	4c c5 93	jmp $93c5		jmp	ErrorHandler
.ace9					RangeError:
.ace9	a9 04		lda #$04		lda	#4
.aceb	4c c5 93	jmp $93c5		jmp	ErrorHandler
.acee					TypeError:
.acee	a9 05		lda #$05		lda	#5
.acf0	4c c5 93	jmp $93c5		jmp	ErrorHandler
.acf3					ArgumentError:
.acf3	a9 07		lda #$07		lda	#7
.acf5	4c c5 93	jmp $93c5		jmp	ErrorHandler
.acf8					NotDoneError:
.acf8	a9 0c		lda #$0c		lda	#12
.acfa	4c c5 93	jmp $93c5		jmp	ErrorHandler
.acfd					ErrorText:
>acfd	42 72 65 61 6b 00			.text	"Break",0
>ad03	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ad0b	72 72 6f 72 00
>ad10	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ad18	20 62 79 20 7a 65 72 6f 00
>ad21	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ad29	61 6e 67 65 00
>ad2e	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ad36	6d 61 74 63 68 00
>ad3c	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ad44	65 6d 6f 72 79 00
>ad4a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ad52	61 72 67 75 6d 65 6e 74 00
>ad5b	53 74 6f 70 00				.text	"Stop",0
>ad60	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ad68	6f 6f 20 6c 6f 6e 67 00
>ad70	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ad78	6e 20 66 61 69 6c 65 64 00
>ad81	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ad89	61 74 61 00
>ad8d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ad95	65 6e 74 65 64 00
>ad9b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ada3	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>adaf	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>adb7	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>adc4	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>adcc	74 68 6f 75 74 20 52 65 70 65 61 74 00
>add9	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ade1	68 6f 75 74 20 57 68 69 6c 65 00
>adec	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>adf4	68 6f 75 74 20 46 6f 72 00
>adfd	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ae05	61 63 6b 20 66 75 6c 6c 00
>ae0e	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ae16	75 63 74 75 72 65 00
>ae1d	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ae25	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ae32	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ae3a	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ae48	41 72 72 61 79 20 73 69			.text	"Array size",0
>ae50	7a 65 00
>ae53	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ae5b	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ae63	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1240."
>ae6b	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>ae7b	2e 20 42 75 69 6c 64 20 31 32 34 30 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ae88					EXTPrintCharacter:
.ae88	48		pha				pha
.ae89	da		phx				phx
.ae8a	5a		phy				phy
.ae8b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ae8e	7a		ply				ply
.ae8f	fa		plx				plx
.ae90	68		pla				pla
.ae91	60		rts				rts
.ae92					EXTInputSingleCharacter:
.ae92	da		phx				phx
.ae93	5a		phy				phy
.ae94					_EISCWait:
.ae94	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ae97	c9 00		cmp #$00			cmp 	#0
.ae99	f0 f9		beq $ae94			beq 	_EISCWait
.ae9b	7a		ply				ply
.ae9c	fa		plx				plx
.ae9d	60		rts				rts
.ae9e					EXTInputLine:
.ae9e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.aea0					_ILLoop:
.aea0	da		phx				phx 								; read character in
.aea1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.aea4	fa		plx				plx
.aea5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.aea7	f0 12		beq $aebb			beq 	_ILBackspace
.aea9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.aeab	f0 15		beq $aec2			beq 	_ILExit
.aead	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.aeaf	90 ef		bcc $aea0			bcc 	_ILLoop
.aeb1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.aeb3	f0 eb		beq $aea0			beq 	_ILLoop
.aeb5	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.aeb8	e8		inx				inx
.aeb9	80 e5		bra $aea0			bra 	_ILLoop
.aebb					_ILBackspace:
.aebb	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.aebd	f0 e1		beq $aea0			beq 	_ILLoop
.aebf	ca		dex				dex 								; back one.
.aec0	80 de		bra $aea0			bra 	_ILLoop
.aec2					_ILExit:
.aec2	20 88 ae	jsr $ae88			jsr 	EXTPrintCharacter
.aec5	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.aec8	60		rts				rts
.aec9					EXTBreakCheck:
.aec9	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.aecc					MemoryDeleteLine:
.aecc	20 eb ae	jsr $aeeb			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aecf	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.aed1	a8		tay				tay
.aed2					_MDDLLoop:
.aed2	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.aed4	92 30		sta ($30)			sta 	(codePtr)
.aed6	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aed8	c5 3a		cmp $3a				cmp 	zTemp2
.aeda	d0 07		bne $aee3			bne 	_MDLDLNext
.aedc	a5 31		lda $31				lda 	codePtr+1
.aede	c5 3b		cmp $3b				cmp 	zTemp2+1
.aee0	d0 01		bne $aee3			bne 	_MDLDLNext
.aee2					_MDDLExit:
.aee2	60		rts				rts
.aee3					_MDLDLNext:
.aee3	e6 30		inc $30				inc 	codePtr						; next byte
.aee5	d0 eb		bne $aed2			bne 	_MDDLLoop
.aee7	e6 31		inc $31				inc 	codePtr+1
.aee9	80 e7		bra $aed2			bra 	_MDDLLoop
.aeeb					IMemoryFindEnd:
.aeeb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aeed	85 3a		sta $3a				sta 	0+zTemp2
.aeef	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aef1	85 3b		sta $3b				sta 	1+zTemp2
.aef3					_MDLFELoop:
.aef3	b2 3a		lda ($3a)			lda 	(zTemp2)
.aef5	f0 0b		beq $af02			beq 	_MDLFEExit
.aef7	18		clc				clc
.aef8	65 3a		adc $3a				adc 	zTemp2
.aefa	85 3a		sta $3a				sta 	zTemp2
.aefc	90 f5		bcc $aef3			bcc 	_MDLFELoop
.aefe	e6 3b		inc $3b				inc 	zTemp2+1
.af00	80 f1		bra $aef3			bra 	_MDLFELoop
.af02					_MDLFEExit:
.af02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.af03					MemoryInsertLine:
.af03	08		php				php
.af04	20 eb ae	jsr $aeeb			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af07	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.af09	1a		inc a				inc 	a
.af0a	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.af0c	b0 36		bcs $af44			bcs 	_MDLIError
.af0e	28		plp				plp
.af0f	90 08		bcc $af19			bcc 	_MDLIFound
.af11	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.af13	85 30		sta $30				sta 	codePtr
.af15	a5 3b		lda $3b				lda 	zTemp2+1
.af17	85 31		sta $31				sta 	codePtr+1
.af19					_MDLIFound:
.af19	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.af1c	a8		tay				tay
.af1d					_MDLIInsert:
.af1d	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.af1f	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.af21	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.af23	c5 3a		cmp $3a				cmp 	zTemp2
.af25	d0 06		bne $af2d			bne 	_MDLINext
.af27	a5 31		lda $31				lda 	codePtr+1
.af29	c5 3b		cmp $3b				cmp 	zTemp2+1
.af2b	f0 0a		beq $af37			beq 	_MDLIHaveSpace
.af2d					_MDLINext:
.af2d	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.af2f	d0 02		bne $af33			bne 	_MDLINoBorrow
.af31	c6 3b		dec $3b				dec 	zTemp2+1
.af33					_MDLINoBorrow:
.af33	c6 3a		dec $3a				dec 	zTemp2
.af35	80 e6		bra $af1d			bra 	_MDLIInsert
.af37					_MDLIHaveSpace:
.af37	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.af3a	88		dey				dey 								; from offset-1 to 0
.af3b					_MDLICopy:
.af3b	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.af3e	91 30		sta ($30),y			sta 	(codePtr),y
.af40	88		dey				dey
.af41	10 f8		bpl $af3b			bpl 	_MDLICopy
.af43	60		rts				rts
.af44					_MDLIError:
.af44	a9 06		lda #$06		lda	#6
.af46	4c c5 93	jmp $93c5		jmp	ErrorHandler
.af49					MDLAppendLine:
.af49	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.af4b	85 36		sta $36				sta 	zTemp0
.af4d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af4f	85 38		sta $38				sta 	0+zTemp1
.af51	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af53	85 39		sta $39				sta 	1+zTemp1
.af55	b2 38		lda ($38)			lda 	(zTemp1)
.af57	d0 0a		bne $af63			bne 	_MDLANoInitialise
.af59	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af5b	8d 58 06	sta $0658			sta 	0+AppendPointer
.af5e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af60	8d 59 06	sta $0659			sta 	1+AppendPointer
.af63					_MDLANoInitialise:
.af63	18		clc				clc
.af64	ad 58 06	lda $0658			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.af67	85 38		sta $38				sta 	zTemp1
.af69	72 36		adc ($36)			adc 	(zTemp0)
.af6b	8d 58 06	sta $0658			sta 	AppendPointer
.af6e	ad 59 06	lda $0659			lda 	AppendPointer+1
.af71	85 39		sta $39				sta 	zTemp1+1
.af73	69 00		adc #$00			adc 	#0
.af75	8d 59 06	sta $0659			sta 	AppendPointer+1
.af78	a0 00		ldy #$00			ldy 	#0
.af7a					_MDLACopy:
.af7a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.af7c	91 38		sta ($38),y			sta 	(zTemp1),y
.af7e	c8		iny				iny
.af7f	98		tya				tya
.af80	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.af82	d0 f6		bne $af7a			bne 	_MDLACopy
.af84	a9 00		lda #$00			lda 	#0 							; end of program.
.af86	91 38		sta ($38),y			sta 	(zTemp1),y
.af88	60		rts				rts
.0658					AppendPointer:
>0658							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9fba					MemoryNew:
.9fba	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9fbc	85 30		sta $30				sta 	codePtr
.9fbe	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fc0	85 31		sta $31				sta 	codePtr+1
.9fc2	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9fc4	92 30		sta ($30)			sta 	(codePtr)
.9fc6	60		rts				rts
.9fc7					MemoryInline:
.9fc7	98		tya				tya 								; put address into stack,x
.9fc8	18		clc				clc
.9fc9	65 30		adc $30				adc 	codePtr
.9fcb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fce	a5 31		lda $31				lda 	codePtr+1
.9fd0	69 00		adc #$00			adc 	#0
.9fd2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fd5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9fd8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fdb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9fdc					MemorySearch:
.9fdc	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9fde	86 37		stx $37				stx 	zTemp0+1
.9fe0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9fe2	85 30		sta $30				sta 	codePtr
.9fe4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fe6	85 31		sta $31				sta 	codePtr+1
.9fe8					_MTAXLoop:
.9fe8	b2 30		lda ($30)			lda 	(codePtr)
.9fea	18		clc				clc
.9feb	f0 21		beq $a00e			beq 	_MTAXExit 					; reached end, exit with CC.
.9fed	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9fef	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff1	38		sec				sec
.9ff2	e5 36		sbc $36				sbc 	zTemp0
.9ff4	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ff6	c8		iny				iny 								; do the MSB
.9ff7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff9	e5 37		sbc $37				sbc 	zTemp0+1
.9ffb	05 38		ora $38				ora 	zTemp1
.9ffd	f0 0f		beq $a00e			beq 	_MTAXExit	 				; found
.9fff	b0 0d		bcs $a00e			bcs 	_MTAXExit 					; current < required exit
.a001	18		clc				clc
.a002	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a004	65 30		adc $30				adc 	codePtr
.a006	85 30		sta $30				sta 	codePtr
.a008	90 02		bcc $a00c			bcc 	_CREExit
.a00a	e6 31		inc $31				inc 	codePtr+1
.a00c					_CREExit:
.a00c	80 da		bra $9fe8			bra 	_MTAXLoop
.a00e					_MTAXExit:
.a00e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a00f					StackPushByte:
.a00f	48		pha				pha 								; save byte
.a010	a5 34		lda $34				lda 	BasicStack
.a012	d0 09		bne $a01d			bne 	_SPBNoBorrow
.a014	c6 35		dec $35				dec 	BasicStack+1
.a016	48		pha				pha
.a017	a5 35		lda $35				lda 	BasicStack+1
.a019	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a01b	90 06		bcc $a023			bcc 	_SPBMemory
.a01d					_SPBNoBorrow:
.a01d	c6 34		dec $34				dec 	BasicStack
.a01f	68		pla				pla 								; get back and write
.a020	92 34		sta ($34)			sta 	(BasicStack)
.a022	60		rts				rts
.a023					_SPBMemory:
.a023	a9 12		lda #$12		lda	#18
.a025	4c c5 93	jmp $93c5		jmp	ErrorHandler
.a028					StackPopByte:
.a028	b2 34		lda ($34)			lda 	(BasicStack)
.a02a	e6 34		inc $34				inc 	BasicStack
.a02c	d0 02		bne $a030			bne 	_SPBNoCarry
.a02e	e6 35		inc $35				inc 	BasicStack+1
.a030					_SPBNoCarry:
.a030	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a031					StackOpen:
.a031	48		pha				pha 								; save frame byte
.a032	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a034	0a		asl a				asl 	a 							; claim twice this for storage
.a035	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a037	38		sec				sec 								; so basically subtracting from
.a038	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a03a	85 34		sta $34				sta 	basicStack
.a03c	b0 08		bcs $a046			bcs 	_SONoBorrow
.a03e	c6 35		dec $35				dec 	basicStack+1
.a040	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a042	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a044	90 04		bcc $a04a			bcc 	_SOMemory
.a046					_SONoBorrow:
.a046	68		pla				pla 								; get marker back and write at TOS
.a047	92 34		sta ($34)			sta 	(basicStack)
.a049	60		rts				rts
.a04a					_SOMemory:
.a04a	a9 12		lda #$12		lda	#18
.a04c	4c c5 93	jmp $93c5		jmp	ErrorHandler
.a04f					StackClose:
.a04f	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a051	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a053	0a		asl a				asl 	a 							; claim twice this.
.a054	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a056	85 34		sta $34				sta 	basicStack
.a058	90 02		bcc $a05c			bcc 	_SCExit
.a05a	e6 35		inc $35				inc 	basicStack+1
.a05c					_SCExit:
.a05c	60		rts				rts
.a05d					StackCheckFrame:
.a05d	48		pha				pha
.a05e					_StackRemoveLocals:
.a05e	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a060	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a062	b0 05		bcs $a069			bcs 	_SCNoLocal
.a064	20 a5 a6	jsr $a6a5			jsr 	LocalPopValue
.a067	80 f5		bra $a05e			bra 	_StackRemoveLocals
.a069					_SCNoLocal:
.a069	68		pla				pla
.a06a	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a06c	29 f0		and #$f0			and 	#$F0 						; check type bits
.a06e	d0 01		bne $a071			bne 	_SCFError 					; different, we have structures mixed up
.a070	60		rts				rts
.a071					_SCFError:
.a071	8a		txa				txa 								; report error X
.a072	4c c5 93	jmp $93c5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a075					STKSaveCodePosition:
.a075	5a		phy				phy
.a076	98		tya				tya 								; save Y
.a077	a0 05		ldy #$05			ldy 	#5
.a079	91 34		sta ($34),y			sta 	(basicStack),y
.a07b	88		dey				dey 								; save Code Pointer
.a07c					_STKSaveLoop:
.a07c	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a07f	91 34		sta ($34),y			sta 	(basicStack),y
.a081	88		dey				dey
.a082	d0 f8		bne $a07c			bne 	_STKSaveLoop
.a084	7a		ply				ply
.a085	60		rts				rts
.a086					STKLoadCodePosition:
.a086	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a088					_STKLoadLoop:
.a088	b1 34		lda ($34),y			lda 	(basicStack),y
.a08a	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a08d	c8		iny				iny
.a08e	c0 05		cpy #$05			cpy 	#5
.a090	d0 f6		bne $a088			bne 	_STKLoadLoop
.a092	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a094	a8		tay				tay
.a095	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a096					StackReset:
.a096	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a098	85 34		sta $34				sta 	0+basicStack
.a09a	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a09c	85 35		sta $35				sta 	1+basicStack
.a09e	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a0a0	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a0a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.af89					StringConcrete:
.af89	5a		phy				phy 								; save position on stack
.af8a	20 8c 9c	jsr $9c8c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.af8d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.af90	85 38		sta $38				sta 	zTemp1
.af92	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af95	85 39		sta $39				sta 	zTemp1+1
.af97	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.af99					_SALength:
.af99	c8		iny				iny
.af9a	b1 38		lda ($38),y			lda 	(zTemp1),y
.af9c	d0 fb		bne $af99			bne 	_SALength
.af9e	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.afa0	b0 3f		bcs $afe1			bcs 	_SALengthError
.afa2	98		tya				tya 				 				; length of the new string
.afa3	18		clc				clc
.afa4	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.afa6	90 02		bcc $afaa			bcc 	_SAHaveLength
.afa8	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.afaa					_SAHaveLength:
.afaa	48		pha				pha 								; save length.
.afab	38		sec				sec
.afac	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.afae	6d 8e 04	adc $048e			adc 	StringMemory
.afb1	8d 8e 04	sta $048e			sta 	StringMemory
.afb4	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.afb6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.afb9	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.afbb	6d 8f 04	adc $048f			adc 	StringMemory+1
.afbe	8d 8f 04	sta $048f			sta 	StringMemory+1
.afc1	85 3b		sta $3b				sta 	zTemp2+1
.afc3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afc6	68		pla				pla 								; save length-3 (chars allowed) in first byte
.afc7	38		sec				sec
.afc8	e9 03		sbc #$03			sbc 	#3
.afca	92 3a		sta ($3a)			sta 	(zTemp2)
.afcc	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.afce	a0 01		ldy #$01			ldy 	#1
.afd0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.afd2					_SACopyNewString:
.afd2	a0 00		ldy #$00			ldy 	#0
.afd4					_SACopyNSLoop:
.afd4	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.afd6	c8		iny				iny 								; write two on in string storage
.afd7	c8		iny				iny
.afd8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.afda	88		dey				dey 								; this makes it one one.
.afdb	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.afdd	d0 f5		bne $afd4			bne 	_SACopyNSLoop
.afdf	7a		ply				ply
.afe0	60		rts				rts
.afe1					_SALengthError:
.afe1	a9 09		lda #$09		lda	#9
.afe3	4c c5 93	jmp $93c5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.afe6					StringSystemInitialise:
.afe6	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.afe8	8d 8e 04	sta $048e			sta 	0+StringMemory
.afeb	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.afed	8d 8f 04	sta $048f			sta 	1+StringMemory
.aff0	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.aff3	60		rts				rts
.aff4					StringSpaceInitialise:
.aff4	20 8c 9c	jsr $9c8c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aff7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aff9	8d 90 04	sta $0490			sta 	StringInitialised
.affc	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.afff	8d 91 04	sta $0491			sta 	StringTempPointer
.b002	ad 8f 04	lda $048f			lda 	StringMemory+1
.b005	3a		dec a				dec 	a
.b006	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b009	60		rts				rts
.b00a					StringTempAllocate:
.b00a	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b00c	b0 35		bcs $b043			bcs 	_STALength
.b00e	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b011	30 05		bmi $b018			bmi 	_STAAllocate
.b013	48		pha				pha 								; save value to subtract.
.b014	20 f4 af	jsr $aff4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b017	68		pla				pla 								; restore it
.b018					_STAAllocate:
.b018	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b01a	18		clc				clc  								; deliberate allows one more
.b01b	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b01e	8d 91 04	sta $0491			sta 	StringTempPointer
.b021	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b024	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b026	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b029	69 ff		adc #$ff			adc 	#$FF
.b02b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b02e	85 3d		sta $3d				sta 	zsTemp+1
.b030	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b033	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b036	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b039	a9 10		lda #$10			lda 	#NSTString
.b03b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b03e	a9 00		lda #$00			lda 	#0 							; clear the target string
.b040	92 3c		sta ($3c)			sta 	(zsTemp)
.b042	60		rts				rts
.b043					_STALength:
.b043	a9 09		lda #$09		lda	#9
.b045	4c c5 93	jmp $93c5		jmp	ErrorHandler
.b048					StringTempWrite:
.b048	48		pha				pha
.b049	92 3c		sta ($3c)			sta 	(zsTemp)
.b04b	e6 3c		inc $3c				inc 	zsTemp
.b04d	d0 02		bne $b051			bne 	_STWNoCarry
.b04f	e6 3d		inc $3d				inc 	zsTemp+1
.b051					_STWNoCarry:
.b051	a9 00		lda #$00			lda 	#0
.b053	92 3c		sta ($3c)			sta 	(zsTemp)
.b055	68		pla				pla
.b056	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a0a3					BackloadProgram:
.a0a3	a2 ff		ldx #$ff			ldx 	#$FF
.a0a5	20 cd a0	jsr $a0cd			jsr 	BLReadByte
.a0a8	30 1f		bmi $a0c9			bmi 	_BPExit
.a0aa					_BPCopy:
.a0aa	e8		inx				inx  								; copy byte in
.a0ab	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a0ae	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a0b1	20 cd a0	jsr $a0cd			jsr 	BLReadByte 					; read next byte
.a0b4	30 0a		bmi $a0c0			bmi 	_BPEndLine 					; -ve = EOL
.a0b6	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a0b8	d0 02		bne $a0bc			bne 	_BPNotTab
.a0ba	a9 20		lda #$20			lda 	#' '
.a0bc					_BPNotTab:
.a0bc	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a0be	b0 ea		bcs $a0aa			bcs 	_BPCopy
.a0c0					_BPEndLine:
.a0c0	20 f6 a3	jsr $a3f6			jsr 	TokeniseLine 				; tokenise the line.
.a0c3	38		sec				sec 								; append not insert
.a0c4	20 03 af	jsr $af03			jsr 	MemoryInsertLine 			; append to current program
.a0c7	80 da		bra $a0a3			bra 	BackloadProgram
.a0c9					_BPExit:
.a0c9	20 f6 89	jsr $89f6			jsr 	ClearCommand 				; clear variables etc.
.a0cc	60		rts				rts
.a0cd					BLReadByte:
.a0cd					_BLLoad:
.a0cd	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a0d0	ee ce a0	inc $a0ce			inc 	_BLLoad+1
.a0d3	d0 03		bne $a0d8			bne 	_BLNoCarry
.a0d5	ee cf a0	inc $a0cf			inc 	_BLLoad+2
.a0d8					_BLNoCarry:
.a0d8	c9 00		cmp #$00			cmp 	#0
.a0da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a0db					TokeniseSearchTable:
.a0db	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a0dd	85 36		sta $36				sta 	zTemp0
.a0df	a0 00		ldy #$00			ldy 	#0
.a0e1	a9 80		lda #$80			lda 	#$80 						; token #
.a0e3	85 38		sta $38				sta 	zTemp1
.a0e5					_TSTLoop:
.a0e5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a0e7	30 49		bmi $a132			bmi 	_TSTFail 					; -ve = end of table
.a0e9	f0 2e		beq $a119			beq 	_TSTNext 					; zero, check next it's a dummy
.a0eb	c8		iny				iny 								; get the hash
.a0ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ee	88		dey				dey
.a0ef	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a0f2	d0 25		bne $a119			bne 	_TSTNext
.a0f4	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a0f7	38		sec				sec
.a0f8	ed 80 04	sbc $0480			sbc 	identStart
.a0fb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a0fd	d0 1a		bne $a119			bne 	_TSTNext
.a0ff	5a		phy				phy 								; save Y , we might fail
.a100	c8		iny				iny 								; point to text
.a101	c8		iny				iny
.a102	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a105					_TSTCompareName:
.a105	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a108	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a10a	d0 0c		bne $a118			bne 	_TSTNextPullY 				; fail, pullY and do next
.a10c	e8		inx				inx
.a10d	c8		iny				iny
.a10e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a111	d0 f2		bne $a105			bne 	_TSTCompareName
.a113	7a		ply				ply 								; throw Y
.a114	a5 38		lda $38				lda 	zTemp1 						; get token #
.a116	38		sec				sec 								; return with CS = passed.
.a117	60		rts				rts
.a118					_TSTNextPullY:
.a118	7a		ply				ply 								; restore current, fall through.
.a119					_TSTNext:
.a119	e6 38		inc $38				inc 	zTemp1 						; token counter
.a11b	98		tya				tya
.a11c	18		clc				clc
.a11d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a11f	1a		inc a				inc 	a 							; +1
.a120	1a		inc a				inc 	a 							; +2
.a121	a8		tay				tay
.a122	10 c1		bpl $a0e5			bpl 	_TSTLoop 					; if Y < $80 loop back
.a124	98		tya				tya 								; add Y to zTemp0 and reset Y
.a125	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a127	18		clc				clc  								; but have tables > 255 bytes
.a128	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a12a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a12c	90 b7		bcc $a0e5			bcc 	_TSTLoop
.a12e	e6 37		inc $37				inc 	zTemp0+1
.a130	80 b3		bra $a0e5			bra 	_TSTLoop
.a132					_TSTFail:
.a132	18		clc				clc
.a133	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a134					KeywordSet0:
>a134	00 65					.text	0,$65,""               ; $80 !0:EOF
>a136	00 58					.text	0,$58,""               ; $81 !1:SH1
>a138	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a13a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a140	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a148	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a14e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a155	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a15c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a163	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a169	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a171	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a179	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a17f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a186	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a18c	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a194	28
>a195	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a19d	28
>a19e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a1a4	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a1aa	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a1b0	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a1b7	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a1bd	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a1c3	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a1c8	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a1cc	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a1d2	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a1da	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a1e1	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a1e8	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a1f0	43
>a1f1	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a1f7	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a1fd	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a204	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a20a	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a210	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a215	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a21b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a220	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a228	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a22e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a235	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a23b	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a240	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a247	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a24e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a254	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a259	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a261	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a265	ff					.text	$FF
.a266					KeywordSet1:
>a266	00 65					.text	0,$65,""               ; $80 !0:EOF
>a268	00 58					.text	0,$58,""               ; $81 !1:SH1
>a26a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a26c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a274	4c 45
>a276	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a27e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a285	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a28a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a290	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a295	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a29d	45
>a29e	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a2a3	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a2a9	ff					.text	$FF
.a2aa					KeywordSet2:
>a2aa	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2ac	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2ae	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2b0	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a2b5	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a2ba	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a2bf	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a2c4	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a2c9	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a2ce	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a2d3	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a2d8	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a2dd	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a2e2	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a2e7	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a2ec	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a2f1	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a2f6	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a2fb	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a300	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a305	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a30a	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a30f	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a314	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a319	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a31e	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a323	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a328	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a32d	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a332	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a337	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a33c	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a341	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a346	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a34b	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a350	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a355	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a35a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a35f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a364	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a369	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a36e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a373	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a378	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a37d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a382	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a387	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a38c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a391	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a396	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a39b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a3a0	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a3a5	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a3aa	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a3af	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a3b4	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a3b9	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a3be	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a3c3	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a3c8	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a3cd	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a3d2	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a3d7	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a3dc	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a3e1	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a3e6	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a3eb	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a3f0	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a3f5	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a3f6					TokeniseLine:
.a3f6	20 7e a5	jsr $a57e			jsr 	FixLineBufferCase 			; fix line case
.a3f9	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a3fb	8d a6 04	sta $04a6			sta 	tokenOffset
.a3fe	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a401	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a404	a2 ff		ldx #$ff			ldx 	#$FF
.a406					_TKFindFirst:
.a406	e8		inx				inx
.a407	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a40a	f0 79		beq $a485			beq 	_TKExit
.a40c	c9 20		cmp #$20			cmp 	#' '
.a40e	90 f6		bcc $a406			bcc 	_TKFindFirst
.a410	c9 30		cmp #$30			cmp 	#'0'
.a412	90 07		bcc $a41b			bcc 	_TKNoLineNumber
.a414	c9 3a		cmp #$3a			cmp 	#'9'+1
.a416	b0 03		bcs $a41b			bcs 	_TKNoLineNumber
.a418	20 a8 a5	jsr $a5a8			jsr 	TokeniseExtractLineNumber
.a41b					_TKNoLineNumber:
.a41b					_TKTokeniseLoop:
.a41b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a41e	f0 65		beq $a485			beq 	_TKExit
.a420	e8		inx				inx
.a421	c9 20		cmp #$20			cmp 	#' '
.a423	f0 f6		beq $a41b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a425	ca		dex				dex 								; undo last get, A contains character, X is position.
.a426	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a428	f0 61		beq $a48b			beq 	_TKTokeniseIdentifier
.a42a	c9 41		cmp #$41			cmp 	#'A'
.a42c	90 04		bcc $a432			bcc 	_TKTokenisePunctuation
.a42e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a430	90 59		bcc $a48b			bcc 	_TKTokeniseIdentifier
.a432					_TKTokenisePunctuation:
.a432	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a434	f0 27		beq $a45d			beq 	_TKString
.a436	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a438	f0 28		beq $a462			beq 	_TKHexConstant
.a43a	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a43c	f0 29		beq $a467			beq 	_TKCheckDouble
.a43e	c9 3e		cmp #$3e			cmp 	#'>'
.a440	f0 25		beq $a467			beq 	_TKCheckDouble
.a442					_TKStandardPunctuation:
.a442	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a445	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a447	90 0e		bcc $a457			bcc 	_TKNoShift
.a449	48		pha				pha 								; save
.a44a	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a44c	85 36		sta $36				sta 	zTemp0
.a44e	68		pla				pla
.a44f	29 20		and #$20			and 	#32 						; bit 5
.a451	4a		lsr a				lsr 	a 							; shift into bit 3
.a452	4a		lsr a				lsr 	a
.a453	05 36		ora $36				ora 	zTemp0
.a455	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a457					_TKNoShift:
.a457	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte 			; write the punctuation character
.a45a	e8		inx				inx 								; consume the character
.a45b	80 be		bra $a41b			bra 	_TKTokeniseLoop 			; and loop round again.
.a45d					_TKString:
.a45d	20 0d a5	jsr $a50d			jsr 	TokeniseString
.a460	80 b9		bra $a41b			bra 	_TKTokeniseLoop
.a462					_TKHexConstant:
.a462	20 48 a5	jsr $a548			jsr 	TokeniseHexConstant
.a465	80 b4		bra $a41b			bra 	_TKTokeniseLoop
.a467					_TKCheckDouble:
.a467	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a46a	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a46c	90 d4		bcc $a442			bcc 	_TKStandardPunctuation
.a46e	c9 3f		cmp #$3f			cmp 	#'>'+1
.a470	b0 d0		bcs $a442			bcs 	_TKStandardPunctuation
.a472	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a475	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a477	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a478	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a47b	38		sec				sec
.a47c	e9 3c		sbc #$3c			sbc 	#'<'
.a47e	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a481	e8		inx				inx 								; consume both
.a482	e8		inx				inx
.a483	80 96		bra $a41b			bra 	_TKTokeniseLoop
.a485	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a487	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a48a	60		rts				rts
.a48b					_TKTokeniseIdentifier:
.a48b	8e 80 04	stx $0480			stx 	identStart 					; save start
.a48e	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a491					_TKCheckLoop:
.a491	e8		inx				inx 								; look at next, we know first is identifier.
.a492	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a495	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a497	f0 f8		beq $a491			beq 	_TKCheckLoop
.a499	c9 30		cmp #$30			cmp	 	#"0"
.a49b	90 0c		bcc $a4a9			bcc 	_TKEndIdentifier
.a49d	c9 3a		cmp #$3a			cmp 	#"9"+1
.a49f	90 f0		bcc $a491			bcc 	_TKCheckLoop
.a4a1	c9 41		cmp #$41			cmp	 	#"A"
.a4a3	90 04		bcc $a4a9			bcc 	_TKEndIdentifier
.a4a5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a4a7	90 e8		bcc $a491			bcc 	_TKCheckLoop
.a4a9					_TKEndIdentifier:
.a4a9	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a4ac	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a4ae	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a4b0	f0 06		beq $a4b8			beq 	_TKHasTypeCharacter
.a4b2	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a4b4	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a4b6	d0 07		bne $a4bf			bne 	_TKNoTypeCharacter
.a4b8					_TKHasTypeCharacter:
.a4b8	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a4bb	e8		inx				inx 								; read next
.a4bc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4bf					_TKNoTypeCharacter:
.a4bf	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a4c1	d0 09		bne $a4cc			bne 	_TKNoArray
.a4c3	e8		inx				inx 								; skip the (
.a4c4	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a4c7	09 04		ora #$04			ora 	#$04
.a4c9	8d 84 04	sta $0484			sta 	identTypeByte
.a4cc					_TKNoArray:
.a4cc	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a4cf	20 69 a5	jsr $a569			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a4d2	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a4d4	a9 34		lda #$34			lda 	#(KeywordSet0) & $FF
.a4d6	20 db a0	jsr $a0db			jsr 	TokeniseSearchTable
.a4d9	a2 00		ldx #$00			ldx 	#0
.a4db	b0 1f		bcs $a4fc			bcs 	_TKFoundToken
.a4dd	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a4df	a9 66		lda #$66			lda 	#(KeywordSet1) & $FF
.a4e1	20 db a0	jsr $a0db			jsr 	TokeniseSearchTable
.a4e4	a2 81		ldx #$81			ldx 	#$81
.a4e6	b0 14		bcs $a4fc			bcs 	_TKFoundToken
.a4e8	a0 a2		ldy #$a2			ldy 	#(KeywordSet2) >> 8
.a4ea	a9 aa		lda #$aa			lda 	#(KeywordSet2) & $FF
.a4ec	20 db a0	jsr $a0db			jsr 	TokeniseSearchTable
.a4ef	a2 82		ldx #$82			ldx 	#$82
.a4f1	b0 09		bcs $a4fc			bcs 	_TKFoundToken
.a4f3	20 f9 a5	jsr $a5f9			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a4f6	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4f9	4c 1b a4	jmp $a41b			jmp 	_TKTokeniseLoop 			; and go round again.
.a4fc					_TKFoundToken:
.a4fc	48		pha				pha 								; save token
.a4fd	8a		txa				txa 								; shift in X, is there one ?
.a4fe	f0 03		beq $a503			beq 	_TKNoTShift
.a500	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte 			; if so, write it out
.a503					_TKNoTShift:
.a503	68		pla				pla 								; restore and write token
.a504	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a507	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a50a	4c 1b a4	jmp $a41b			jmp 	_TKTokeniseLoop 			; and go round again.
.a50d					TokeniseString:
.a50d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a50f	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a512	e8		inx				inx									; start of quoted string.
.a513	da		phx				phx 								; push start of string on top
.a514	ca		dex				dex
.a515					_TSFindEnd:
.a515	e8		inx				inx
.a516	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a519	f0 04		beq $a51f			beq 	_TSEndOfString
.a51b	c9 22		cmp #$22			cmp 	#'"'
.a51d	d0 f6		bne $a515			bne 	_TSFindEnd
.a51f					_TSEndOfString:
.a51f	7a		ply				ply  								; so now Y is first character, X is character after end.
.a520	48		pha				pha 								; save terminating character
.a521	20 29 a5	jsr $a529			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a524	68		pla				pla 								; terminating character
.a525	f0 01		beq $a528			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a527	e8		inx				inx
.a528					_TSNotQuote:
.a528	60		rts				rts
.a529					TOWriteBlockXY:
.a529	86 36		stx $36				stx 	zTemp0 						; write end character
.a52b	98		tya				tya
.a52c	49 ff		eor #$ff			eor 	#$FF
.a52e	38		sec				sec
.a52f	65 36		adc $36				adc 	zTemp0
.a531	1a		inc a				inc 	a 							; one extra for NULL
.a532	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a535					_TOBlockLoop:
.a535	c4 36		cpy $36				cpy 	zTemp0
.a537	f0 09		beq $a542			beq 	_TOBlockExit
.a539	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a53c	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a53f	c8		iny				iny
.a540	80 f3		bra $a535			bra 	_TOBlockLoop
.a542					_TOBlockExit:
.a542	a9 00		lda #$00			lda 	#0
.a544	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a547	60		rts				rts
.a548					TokeniseHexConstant:
.a548	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a54a	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a54d	e8		inx				inx									; start of quoted string.
.a54e	da		phx				phx 								; push start of constant on top
.a54f	ca		dex				dex
.a550					_THFindLoop:
.a550	e8		inx				inx
.a551	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a554	c9 30		cmp #$30			cmp 	#"0"
.a556	90 0c		bcc $a564			bcc 	_THFoundEnd
.a558	c9 3a		cmp #$3a			cmp 	#"9"+1
.a55a	90 f4		bcc $a550			bcc 	_THFindLoop
.a55c	c9 41		cmp #$41			cmp 	#"A"
.a55e	90 04		bcc $a564			bcc 	_THFoundEnd
.a560	c9 47		cmp #$47			cmp 	#"F"+1
.a562	90 ec		bcc $a550			bcc 	_THFindLoop
.a564					_THFoundEnd:
.a564	7a		ply				ply 								; restore start
.a565	20 29 a5	jsr $a529			jsr 	TOWriteBlockXY 				; output the block
.a568	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a569					TokeniseCalculateHash:
.a569	da		phx				phx
.a56a	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a56d	a9 00		lda #$00			lda 	#0
.a56f					_TCHLoop:
.a56f	18		clc				clc
.a570	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a573	e8		inx				inx
.a574	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a577	d0 f6		bne $a56f			bne 	_TCHLoop
.a579	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a57c	fa		plx				plx
.a57d	60		rts				rts
.a57e					FixLineBufferCase:
.a57e	a2 00		ldx #$00			ldx 	#0
.a580					_FLBCLoop:
.a580	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a583	f0 22		beq $a5a7			beq 	_FLBCExit 					; end of string.
.a585	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a587	f0 11		beq $a59a			beq 	_FLBCInQuotes
.a589	e8		inx				inx
.a58a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a58c	90 f2		bcc $a580			bcc 	_FLBCLoop
.a58e	c9 7b		cmp #$7b			cmp 	#'z'+1
.a590	b0 ee		bcs $a580			bcs 	_FLBCLoop
.a592	38		sec				sec 								; make U/C
.a593	e9 20		sbc #$20			sbc 	#32
.a595	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a598	80 e6		bra $a580			bra 	_FLBCLoop
.a59a					_FLBCInQuotes:
.a59a	e8		inx				inx 								; advance
.a59b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a59e	f0 07		beq $a5a7			beq 	_FLBCExit 					; exit on EOS
.a5a0	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a5a2	d0 f6		bne $a59a			bne 	_FLBCInQuotes
.a5a4	e8		inx				inx 								; skip over it
.a5a5	80 d9		bra $a580			bra 	_FLBCLoop
.a5a7					_FLBCExit:
.a5a7	60		rts				rts
.a5a8					TokeniseExtractLineNumber:
.a5a8	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a5ab	48		pha				pha
.a5ac	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a5af	48		pha				pha
.a5b0	20 e6 a5	jsr $a5e6			jsr 	_TELNTimes2 				; line # x 4
.a5b3	20 e6 a5	jsr $a5e6			jsr 	_TELNTimes2 				; line # x 2
.a5b6	18		clc				clc 								; add stacked value
.a5b7	68		pla				pla
.a5b8	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a5bb	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a5be	68		pla				pla
.a5bf	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a5c2	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a5c5	20 e6 a5	jsr $a5e6			jsr 	_TELNTimes2 				; line # x 10
.a5c8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a5cb	e8		inx				inx
.a5cc	29 0f		and #$0f			and 	#15 						; add to line #
.a5ce	18		clc				clc
.a5cf	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a5d2	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a5d5	90 03		bcc $a5da			bcc 	_TLENNoCarry
.a5d7	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a5da					_TLENNoCarry:
.a5da	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a5dd	c9 30		cmp #$30			cmp 	#'0'
.a5df	90 04		bcc $a5e5			bcc 	_TLENExit
.a5e1	c9 3a		cmp #$3a			cmp 	#'9'+1
.a5e3	90 c3		bcc $a5a8			bcc 	TokeniseExtractLineNumber
.a5e5					_TLENExit:
.a5e5	60		rts				rts
.a5e6					_TELNTimes2:
.a5e6	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a5e9	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a5ec	60		rts				rts
.a5ed					TokeniseWriteByte:
.a5ed	da		phx				phx
.a5ee	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a5f1	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a5f4	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a5f7	fa		plx				plx
.a5f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a5f9					CheckCreateVariableRecord:
.a5f9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a5fb	85 36		sta $36				sta 	0+zTemp0
.a5fd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a5ff	85 37		sta $37				sta 	1+zTemp0
.a601					_CCVSearch:
.a601	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a603	f0 2c		beq $a631			beq 	_CCVFail
.a605	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a607	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a609	cd 83 04	cmp $0483			cmp 	identHash
.a60c	d0 16		bne $a624			bne 	_CCVNext
.a60e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a610	ae 80 04	ldx $0480			ldx 	identStart
.a613					_CCVCompare:
.a613	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a616	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a618	e8		inx				inx 								; advance pointers
.a619	c8		iny				iny
.a61a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a61b	d0 07		bne $a624			bne 	_CCVNext  					; didn't match go to next.
.a61d	90 f4		bcc $a613			bcc 	_CCVCompare 				; not finished yet.
.a61f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a622	f0 41		beq $a665			beq 	_CCVFound 					; yes, we were successful
.a624					_CCVNext:
.a624	18		clc				clc
.a625	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a627	65 36		adc $36				adc 	zTemp0
.a629	85 36		sta $36				sta 	zTemp0
.a62b	90 d4		bcc $a601			bcc 	_CCVSearch
.a62d	e6 37		inc $37				inc 	zTemp0+1
.a62f	80 d0		bra $a601			bra 	_CCVSearch
.a631					_CCVFail:
.a631	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a633	ad 83 04	lda $0483			lda 	identHash
.a636	91 36		sta ($36),y			sta 	(zTemp0),y
.a638	c8		iny				iny 								; offset 2 is the type byte
.a639	ad 84 04	lda $0484			lda 	identTypeByte
.a63c	91 36		sta ($36),y			sta 	(zTemp0),y
.a63e	c8		iny				iny
.a63f					_CCVData:
.a63f	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a641	91 36		sta ($36),y			sta 	(zTemp0),y
.a643	c8		iny				iny
.a644	c0 08		cpy #$08			cpy 	#8
.a646	90 f7		bcc $a63f			bcc 	_CCVData
.a648	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a64b					_CCVCopyName:
.a64b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a64e	91 36		sta ($36),y			sta 	(zTemp0),y
.a650	e8		inx				inx
.a651	c8		iny				iny
.a652	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a655	d0 f4		bne $a64b			bne 	_CCVCopyName
.a657	98		tya				tya 								; patch offset
.a658	92 36		sta ($36)			sta 	(zTemp0)
.a65a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a65c	91 36		sta ($36),y			sta 	(zTemp0),y
.a65e	88		dey				dey
.a65f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a661	09 80		ora #$80			ora 	#$80
.a663	91 36		sta ($36),y			sta 	(zTemp0),y
.a665					_CCVFound:
.a665	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a667	38		sec				sec
.a668	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a66a	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a66c	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a66f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a671	20 ed a5	jsr $a5ed			jsr 	TokeniseWriteByte
.a674	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
