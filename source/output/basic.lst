
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 19 16:02:11 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_JOYBLPAREN                       = $8c; $8c JOYB(
=$8d					KWD_JOYXLPAREN                       = $8d; $8d JOYX(
=$8e					KWD_JOYYLPAREN                       = $8e; $8e JOYY(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOTLPAREN                        = $92; $92 NOT(
=$93					KWD_RANDOMLPAREN                     = $93; $93 RANDOM(
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TIMERLPAREN                      = $99; $99 TIMER(
=$9a					KWD_TRUE                             = $9a; $9a TRUE
=$9b					KWD_VALLPAREN                        = $9b; $9b VAL(
=$9c					KWD_FOR                              = $9c; $9c FOR
=$9d					KWD_IF                               = $9d; $9d IF
=$9e					KWD_PROC                             = $9e; $9e PROC
=$9f					KWD_REPEAT                           = $9f; $9f REPEAT
=$a0					KWD_WHILE                            = $a0; $a0 WHILE
=$a1					KWD_ENDIF                            = $a1; $a1 ENDIF
=$a2					KWD_ENDPROC                          = $a2; $a2 ENDPROC
=$a3					KWD_NEXT                             = $a3; $a3 NEXT
=$a4					KWD_THEN                             = $a4; $a4 THEN
=$a5					KWD_UNTIL                            = $a5; $a5 UNTIL
=$a6					KWD_WEND                             = $a6; $a6 WEND
=$a7					KWD_BY                               = $a7; $a7 BY
=$a8					KWD_CALL                             = $a8; $a8 CALL
=$a9					KWD_CIRCLE                           = $a9; $a9 CIRCLE
=$aa					KWD_CLEAR                            = $aa; $aa CLEAR
=$ab					KWD_CLS                              = $ab; $ab CLS
=$ac					KWD_COLOR                            = $ac; $ac COLOR
=$ad					KWD_COLOUR                           = $ad; $ad COLOUR
=$ae					KWD_DATA                             = $ae; $ae DATA
=$af					KWD_DIM                              = $af; $af DIM
=$b0					KWD_DOWNTO                           = $b0; $b0 DOWNTO
=$b1					KWD_ELSE                             = $b1; $b1 ELSE
=$b2					KWD_FROM                             = $b2; $b2 FROM
=$b3					KWD_GFX                              = $b3; $b3 GFX
=$b4					KWD_GOSUB                            = $b4; $b4 GOSUB
=$b5					KWD_GOTO                             = $b5; $b5 GOTO
=$b6					KWD_HERE                             = $b6; $b6 HERE
=$b7					KWD_IMAGE                            = $b7; $b7 IMAGE
=$b8					KWD_LET                              = $b8; $b8 LET
=$b9					KWD_LINE                             = $b9; $b9 LINE
=$ba					KWD_LOCAL                            = $ba; $ba LOCAL
=$bb					KWD_OFF                              = $bb; $bb OFF
=$bc					KWD_ON                               = $bc; $bc ON
=$bd					KWD_OUTLINE                          = $bd; $bd OUTLINE
=$be					KWD_PLOT                             = $be; $be PLOT
=$bf					KWD_PRINT                            = $bf; $bf PRINT
=$c0					KWD_READ                             = $c0; $c0 READ
=$c1					KWD_RECT                             = $c1; $c1 RECT
=$c2					KWD_REM                              = $c2; $c2 REM
=$c3					KWD_RETURN                           = $c3; $c3 RETURN
=$c4					KWD_SOLID                            = $c4; $c4 SOLID
=$c5					KWD_SPRITE                           = $c5; $c5 SPRITE
=$c6					KWD_TEXT                             = $c6; $c6 TEXT
=$c7					KWD_TO                               = $c7; $c7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9c					KWC_FIRST_STRUCTURE = $9c
=$a1					KWC_FIRST_STRUCTURE_DEC = $a1
=$a6					KWC_LAST_STRUCTURE = $a6
=$83					KWC_FIRST_UNARY = $83
=$9b					KWC_LAST_UNARY = $9b

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 80 b4	jsr $b480			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 4c 99	jsr $994c			jsr 	PrintStringXA
.8014	20 e2 92	jsr $92e2			jsr 	NewCommand 					; erase current program
.8017	20 f1 a5	jsr $a5f1			jsr 	BackloadProgram
.801a	4c 5d 94	jmp $945d			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 19-Oct-2022. Build 2135."
>8065	64 6e 65 73 64 61 79 20 31 39 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 32 31 33 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 2c		bra $80be			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80b4					_GDCopy2:
.80b4	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80b7	9d 31 06	sta $0631,x			sta 	gxX0,x
.80ba	ca		dex				dex
.80bb	10 f7		bpl $80b4			bpl 	_GDCopy2
.80bd	68		pla				pla 								; get command back
.80be					_GDExecuteA:
.80be	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80c0	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80c2	b0 04		bcs $80c8			bcs 	_GDError2
.80c4	aa		tax				tax
.80c5	7c cd 80	jmp ($80cd,x)			jmp 	(GRVectorTable,x)
.80c8					_GDError2:
.80c8	38		sec				sec
.80c9	60		rts				rts
.80ca					GXMove:
.80ca	18		clc				clc
.80cb	60		rts				rts
.80cc					GRUndefined:
>80cc	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80cd					GRVectorTable:
>80cd	9c 82					.word	GXInitialise             ; $00 Initialise
>80cf	b3 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80d1	fb 82					.word	GXControlSprite          ; $02 SpriteCtl
>80d3	4e 82					.word	GXClearBitmap            ; $03 Clear
>80d5	79 84					.word	GXSetColourMode          ; $04 Colour
>80d7	44 86					.word	GXFontHandler            ; $05 DrawFont
>80d9	8c 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80db	f4 86					.word	GXSelect                 ; $07 SPRUSE
>80dd	1a 87					.word	GXSelectImage            ; $08 SPRIMG
>80df	cc 80					.word	GRUndefined              ; $09
>80e1	cc 80					.word	GRUndefined              ; $0a
>80e3	cc 80					.word	GRUndefined              ; $0b
>80e5	cc 80					.word	GRUndefined              ; $0c
>80e7	cc 80					.word	GRUndefined              ; $0d
>80e9	cc 80					.word	GRUndefined              ; $0e
>80eb	cc 80					.word	GRUndefined              ; $0f
>80ed	ca 80					.word	GXMove                   ; $10 Move
>80ef	47 83					.word	GXLine                   ; $11 Line
>80f1	c2 84					.word	GXFrameRectangle         ; $12 FrameRect
>80f3	bf 84					.word	GXFillRectangle          ; $13 FillRect
>80f5	05 81					.word	GXFrameCircle            ; $14 FrameCircle
>80f7	01 81					.word	GXFillCircle             ; $15 FillCircle
>80f9	cc 80					.word	GRUndefined              ; $16
>80fb	cc 80					.word	GRUndefined              ; $17
>80fd	a7 84					.word	GXPlotPoint              ; $18 Plot
>80ff	7f 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8101					GXFillCircle:
.8101	a9 ff		lda #$ff			lda 	#255
.8103	80 02		bra $8107			bra 	GXCircle
.8105					GXFrameCircle:
.8105	a9 00		lda #$00			lda 	#0
.8107					GXCircle:
.8107	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.810a	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.810d	f0 26		beq $8135			beq 	_GXCFail
.810f	20 86 88	jsr $8886			jsr 	GXSortXY 					; topleft/bottomright
.8112	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap 				; start drawing
.8115	20 07 82	jsr $8207			jsr 	GXCircleSetup 				; set up for drawing
.8118	9c 4d 06	stz $064d			stz 	gxYChanged
.811b					_GXCircleDraw:
.811b	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.811e	cd 4b 06	cmp $064b			cmp 	gYCentre
.8121	90 0a		bcc $812d			bcc 	_GXCircleContinue
.8123	d0 03		bne $8128			bne 	_GXNoLast
.8125	20 3a 81	jsr $813a			jsr 	GXPlot1
.8128					_GXNoLast:
.8128	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap 				; close the bitmap
.812b	18		clc				clc
.812c	60		rts				rts
.812d					_GXCircleContinue:
.812d	20 37 81	jsr $8137			jsr 	GXPlot2 					; draw it
.8130	20 b4 81	jsr $81b4			jsr 	GXCircleMove 				; adjust the coordinates
.8133	80 e6		bra $811b			bra 	_GXCircleDraw
.8135					_GXCFail:
.8135	38		sec				sec
.8136	60		rts				rts
.8137					GXPlot2:
.8137	20 3a 81	jsr $813a			jsr 	GXPlot1 						; plot and swap, fall through does twice
.813a					GXPlot1:
.813a	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.813d	f0 03		beq $8142			beq 	_GXPlot1Only
.813f	20 5e 81	jsr $815e			jsr 	GXPlot0 						; plot and negate
.8142					_GXPlot1Only:
.8142	20 5e 81	jsr $815e			jsr 	GXPlot0 						; twice, undoing negation
.8145	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8148	ae 4b 06	ldx $064b			ldx	 	gYCentre
.814b	8d 4b 06	sta $064b			sta 	gYCentre
.814e	8e 4a 06	stx $064a			stx 	gXCentre
.8151	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8154	a9 ff		lda #$ff			lda 	#$FF
.8156	8d 4d 06	sta $064d			sta 	gxYChanged
.8159	60		rts				rts
.815a	20 5e 81	jsr $815e			jsr 	GXPlot0 						; do once
.815d	60		rts				rts
.815e	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8161	f0 05		beq $8168			beq 	_GXPlot0Always
.8163	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8166	f0 2d		beq $8195			beq 	GXPlot0Exit
.8168					_GXPlot0Always:
.8168	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.816a	ad 4b 06	lda $064b			lda 	gYCentre
.816d	20 96 81	jsr $8196			jsr 	GXSubCopy
.8170	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8172	ad 4a 06	lda $064a			lda 	gXCentre
.8175	20 96 81	jsr $8196			jsr 	GXSubCopy
.8178	48		pha				pha 									; save last offset X
.8179	20 d9 87	jsr $87d9			jsr 	GXPositionCalc 					; calculate position/offset.
.817c	68		pla				pla
.817d	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.817e	85 36		sta $36				sta 	gxzTemp0
.8180	64 37		stz $37				stz 	gxzTemp0+1
.8182	26 37		rol $37				rol 	gxzTemp0+1
.8184	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8187	69 80		adc #$80			adc 	#128
.8189	20 12 85	jsr $8512			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.818c	38		sec				sec 									; GY = -GY
.818d	a9 00		lda #$00			lda 	#0
.818f	ed 4b 06	sbc $064b			sbc 	gYCentre
.8192	8d 4b 06	sta $064b			sta 	gYCentre
.8195					GXPlot0Exit:
.8195	60		rts				rts
.8196					GXSubCopy:
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	29 80		and #$80			and 	#$80
.819c	f0 02		beq $81a0			beq 	_GXNoSx
.819e	c6 37		dec $37				dec 	gxzTemp0+1
.81a0					_GXNoSx:
.81a0	38		sec				sec
.81a1	bd 35 06	lda $0635,x			lda 	gXX1,x
.81a4	e5 36		sbc $36				sbc 	gxzTemp0
.81a6	9d 31 06	sta $0631,x			sta 	gXX0,x
.81a9	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81ac	e5 37		sbc $37				sbc 	gxzTemp0+1
.81ae	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81b1	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81b3	60		rts				rts
.81b4					GXCircleMove:
.81b4	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81b7	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81b9	10 0d		bpl $81c8			bpl 	_GXEMPositive
.81bb	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81be	ad 4a 06	lda $064a			lda 	gXCentre
.81c1	20 e7 81	jsr $81e7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81c4	a9 06		lda #$06			lda 	#6  						; and add 6
.81c6	80 15		bra $81dd			bra 	_GXEMAddD
.81c8					_GXEMPositive:
.81c8	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81cb	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81ce	38		sec				sec 								; calculate X-Y
.81cf	ad 4a 06	lda $064a			lda 	gXCentre
.81d2	ed 4b 06	sbc $064b			sbc 	gYCentre
.81d5	20 e7 81	jsr $81e7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d8	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81da	ce 4d 06	dec $064d			dec 	gxYChanged
.81dd					_GXEMAddD:
.81dd	18		clc				clc
.81de	65 38		adc $38				adc 	gxzTemp1
.81e0	85 38		sta $38				sta 	gxzTemp1
.81e2	90 02		bcc $81e6			bcc 	_GXEMNoCarry
.81e4	e6 39		inc $39				inc 	gxzTemp1+1
.81e6					_GXEMNoCarry:
.81e6	60		rts				rts
.81e7					_GXAdd4TimesToD:
.81e7	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81e9	29 80		and #$80			and 	#$80
.81eb	f0 02		beq $81ef			beq 	_GXA4Unsigned
.81ed	a9 ff		lda #$ff			lda 	#$FF
.81ef					_GXA4Unsigned:
.81ef	85 37		sta $37				sta 	gxzTemp0+1
.81f1	06 36		asl $36				asl 	gxzTemp0  					; x 4
.81f3	26 37		rol $37				rol 	gxzTemp0+1
.81f5	06 36		asl $36				asl 	gxzTemp0
.81f7	26 37		rol $37				rol 	gxzTemp0+1
.81f9	18		clc				clc 								; add
.81fa	a5 36		lda $36				lda		gxzTemp0
.81fc	65 38		adc $38				adc 	gxzTemp1
.81fe	85 38		sta $38				sta 	gxzTemp1
.8200	a5 37		lda $37				lda		gxzTemp0+1
.8202	65 39		adc $39				adc 	gxzTemp1+1
.8204	85 39		sta $39				sta 	gxzTemp1+1
.8206	60		rts				rts
.8207					GXCircleSetup:
.8207	38		sec				sec
.8208	ad 37 06	lda $0637			lda 	gxY1
.820b	ed 33 06	sbc $0633			sbc 	gxY0
.820e	4a		lsr a				lsr 	a
.820f	8d 49 06	sta $0649			sta 	gxRadius
.8212	a2 00		ldx #$00			ldx 	#0
.8214	20 36 82	jsr $8236			jsr 	_GXCalculateCentre
.8217	a2 02		ldx #$02			ldx 	#2
.8219	20 36 82	jsr $8236			jsr 	_GXCalculateCentre
.821c	9c 4a 06	stz $064a			stz 	gXCentre
.821f	ad 49 06	lda $0649			lda 	gxRadius
.8222	8d 4b 06	sta $064b			sta 	gYCentre
.8225	0a		asl a				asl 	a 							; R x 2
.8226	85 36		sta $36				sta 	gxzTemp0
.8228	38		sec				sec
.8229	a9 03		lda #$03			lda 	#3
.822b	e5 36		sbc $36				sbc 	gxzTemp0
.822d	85 38		sta $38				sta 	gxzTemp1
.822f	a9 00		lda #$00			lda 	#0
.8231	e9 00		sbc #$00			sbc 	#0
.8233	85 39		sta $39				sta 	gxzTemp1+1
.8235	60		rts				rts
.8236					_GXCalculateCentre:
.8236	38		sec				sec
.8237	bd 35 06	lda $0635,x			lda 	gxX1,x
.823a	7d 31 06	adc $0631,x			adc 	gXX0,x
.823d	9d 35 06	sta $0635,x			sta 	gXX1,x
.8240	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8243	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8246	4a		lsr a				lsr 	a
.8247	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.824a	7e 35 06	ror $0635,x			ror 	gXX1,x
.824d	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.824e					GXClearBitmap:
.824e	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8251	f0 24		beq $8277			beq 	_GXCBFail
.8253	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap 				; start access
.8256	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8258	ad 3d 06	lda $063d			lda 	gxHeight
.825b	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.825d	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.825f					_GXCalcLastPage:
.825f	98		tya				tya 								; add to base page
.8260	18		clc				clc
.8261	6d 3b 06	adc $063b			adc 	gxBasePage
.8264	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8266					_GXClearAll:
.8266	20 79 82	jsr $8279			jsr 	_GXClearBlock 				; clear 8k block
.8269	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.826b	a5 0b		lda $0b				lda 	GXEditSlot
.826d	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8270	b0 f4		bcs $8266			bcs 	_GXClearAll
.8272	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap	 			; stop access
.8275	18		clc				clc
.8276	60		rts				rts
.8277					_GXCBFail:
.8277	38		sec				sec
.8278	60		rts				rts
.8279					_GXClearBlock:
.8279	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.827b	85 38		sta $38				sta 	0+gxzTemp1
.827d	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.827f	85 39		sta $39				sta 	1+gxzTemp1
.8281					_GXCB0:
.8281	a5 36		lda $36				lda 	gxzTemp0
.8283	a0 00		ldy #$00			ldy 	#0
.8285					_GXCB1:
.8285	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8287	c8		iny				iny
.8288	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828a	c8		iny				iny
.828b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828d	c8		iny				iny
.828e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8290	c8		iny				iny
.8291	d0 f2		bne $8285			bne 	_GXCB1
.8293	e6 39		inc $39				inc 	gxzTemp1+1
.8295	a5 39		lda $39				lda 	gxzTemp1+1
.8297	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8299	d0 e6		bne $8281			bne 	_GXCB0
.829b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.829c					GXInitialise:
.829c	64 01		stz $01				stz 	1
.829e	a9 01		lda #$01			lda 	#1
.82a0	8d 00 d0	sta $d000			sta 	$D000
.82a3	18		clc				clc
.82a4	9c 39 06	stz $0639			stz 	GXSpritesOn
.82a7	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82aa	a2 0f		ldx #$0f			ldx 	#15
.82ac					_GXIClear:
.82ac	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82af	ca		dex				dex
.82b0	10 fa		bpl $82ac			bpl 	_GXIClear
.82b2	60		rts				rts
.82b3					GXControlBitmap:
.82b3	64 01		stz $01				stz 	1
.82b5	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82b7	29 01		and #$01			and 	#1 							; set bitmap flag
.82b9	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82bc	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82bd	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82c0	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82c2	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82c4	90 02		bcc $82c8			bcc 	_CBNotOn
.82c6	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82c8					_CBNotOn:
.82c8	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82cb	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82cd	29 07		and #$07			and 	#7
.82cf	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82d2	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82d4	d0 02		bne $82d8			bne 	_CBNotDefault
.82d6	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82d8					_CBNotDefault:
.82d8	8d 3b 06	sta $063b			sta 	gxBasePage
.82db	20 39 83	jsr $8339			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82de	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82e0	8d 03 d1	sta $d103			sta 	$D103
.82e3	a5 36		lda $36				lda 	gxzTemp0
.82e5	8d 02 d1	sta $d102			sta 	$D102
.82e8	9c 01 d1	stz $d101			stz 	$D101
.82eb	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ed	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82f0	29 01		and #$01			and 	#1
.82f2	f0 02		beq $82f6			beq 	_CBHaveHeight
.82f4	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82f6					_CBHaveHeight
.82f6	8e 3d 06	stx $063d			stx 	gxHeight
.82f9	18		clc				clc
.82fa	60		rts				rts
.82fb					GXControlSprite:
.82fb	64 01		stz $01				stz 	1
.82fd	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82ff	29 01		and #$01			and 	#1 							; set sprites flag
.8301	8d 39 06	sta $0639			sta 	gxSpritesOn
.8304	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8305	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8308	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.830a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.830c	90 02		bcc $8310			bcc 	_CSNotOn
.830e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8310					_CSNotOn:
.8310	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8313	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8315	d0 02		bne $8319			bne 	_CSNotDefault
.8317	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8319					_CSNotDefault:
.8319	8d 3c 06	sta $063c			sta 	gxSpritePage
.831c	20 39 83	jsr $8339			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.831f	a5 36		lda $36				lda 	zTemp0
.8321	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8324	a5 37		lda $37				lda 	zTemp0+1
.8326	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.8329	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.832b					_CSClear:
.832b	9e 00 d9	stz $d900,x			stz 	$D900,x
.832e	9e 00 da	stz $da00,x			stz 	$DA00,x
.8331	ca		dex				dex
.8332	d0 f7		bne $832b			bne 	_CSClear
.8334	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8337	18		clc				clc
.8338	60		rts				rts
.8339					GXCalculateBaseAddress:
.8339	85 36		sta $36				sta 	gxzTemp0
.833b	64 37		stz $37				stz 	gxzTemp0+1
.833d	a9 05		lda #$05			lda 	#5
.833f					_GXShift:
.833f	06 36		asl $36				asl 	gxzTemp0
.8341	26 37		rol $37				rol 	gxzTemp0+1
.8343	3a		dec a				dec		a
.8344	d0 f9		bne $833f			bne 	_GXShift
.8346	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8347					GXLine:
.8347	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.834a	f0 28		beq $8374			beq 	_GXLFail
.834c	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap
.834f	20 a4 88	jsr $88a4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8352	20 1a 84	jsr $841a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8355	20 d9 87	jsr $87d9			jsr 	GXPositionCalc 				; calculate position/offset.
.8358					_GXDrawLoop:
.8358	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.835b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.835d	2d 41 06	and $0641			and 	gxANDValue
.8360	4d 40 06	eor $0640			eor 	gxEORValue
.8363	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8365	20 76 83	jsr $8376			jsr 	GXLineIsComplete 			; is the line complete ?
.8368	f0 05		beq $836f			beq 	_GXLExit
.836a	20 91 83	jsr $8391			jsr 	GXLineAdvance 				; code as per advance method
.836d	80 e9		bra $8358			bra 	_GXDrawLoop
.836f					_GXLExit:
.836f	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap
.8372	18		clc				clc
.8373	60		rts				rts
.8374					_GXLFail:
.8374	38		sec				sec
.8375	60		rts				rts
.8376					GXLineIsComplete:
.8376	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.8379	d0 0f		bne $838a			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.837b	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.837e	4d 35 06	eor $0635			eor 	GXX1
.8381	d0 06		bne $8389			bne 	_GXLICExit
.8383	ad 32 06	lda $0632			lda 	GXX0+1
.8386	4d 36 06	eor $0636			eor 	GXX1+1
.8389					_GXLICExit:
.8389	60		rts				rts
.838a					_GXLICCompareY:
.838a	ad 37 06	lda $0637			lda 	GXY1
.838d	4d 33 06	eor $0633			eor 	GXY0
.8390	60		rts				rts
.8391					GXLineAdvance:
.8391	18		clc				clc 								; add adjust to position
.8392	ad 52 06	lda $0652			lda 	GXPosition
.8395	6d 53 06	adc $0653			adc 	GXAdjust
.8398	8d 52 06	sta $0652			sta 	GXPosition
.839b	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.839e	b0 05		bcs $83a5			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83a0	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83a3	90 0a		bcc $83af			bcc 	_GXLANoExtra
.83a5					_GXLAOverflow:
.83a5	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83a8	38		sec				sec 								; subtract total and write back
.83a9	ed 54 06	sbc $0654			sbc 	GXTotal
.83ac	8d 52 06	sta $0652			sta 	GXPosition
.83af					_GXLANoExtra:
.83af	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83b2	f0 0d		beq $83c1			beq 	_GXDXLarger
.83b4	20 13 84	jsr $8413			jsr 	GXIncrementY
.83b7	ad 55 06	lda $0655			lda 	GXAddSelect
.83ba	f0 10		beq $83cc			beq 	_GXLAExit
.83bc	20 cd 83	jsr $83cd			jsr 	GXAdjustX
.83bf	80 0b		bra $83cc			bra 	_GXLAExit
.83c1					_GXDXLarger:
.83c1	20 cd 83	jsr $83cd			jsr 	GXAdjustX
.83c4	ad 55 06	lda $0655			lda 	GXAddSelect
.83c7	f0 03		beq $83cc			beq 	_GXLAExit
.83c9	20 13 84	jsr $8413			jsr 	GXIncrementY
.83cc					_GXLAExit:
.83cc	60		rts				rts
.83cd					GXAdjustX:
.83cd	ad 51 06	lda $0651			lda 	GXDXNegative
.83d0	10 25		bpl $83f7			bpl 	_GXAXRight
.83d2	ad 31 06	lda $0631			lda 	GXX0
.83d5	d0 03		bne $83da			bne 	_GXAXNoBorrow
.83d7	ce 32 06	dec $0632			dec 	GXX0+1
.83da					_GXAXNoBorrow:
.83da	ce 31 06	dec $0631			dec 	GXX0
.83dd	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83e0	ad 44 06	lda $0644			lda 	gsOffset
.83e3	c9 ff		cmp #$ff			cmp 	#$FF
.83e5	d0 0f		bne $83f6			bne 	_GXAYExit 					; underflow
.83e7	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83e9	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83eb	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ed	b0 07		bcs $83f6			bcs 	_GXAYExit
.83ef	18		clc				clc
.83f0	69 20		adc #$20			adc 	#$20 						; fix up
.83f2	85 3d		sta $3d				sta 	gxzScreen+1
.83f4	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.83f6					_GXAYExit:
.83f6	60		rts				rts
.83f7					_GXAXRight:
.83f7	ee 31 06	inc $0631			inc 	GXX0
.83fa	d0 03		bne $83ff			bne 	_GXAXNoCarry
.83fc	ee 32 06	inc $0632			inc 	GXX0+1
.83ff					_GXAXNoCarry:
.83ff	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8402	d0 0e		bne $8412			bne 	_GXAXExit 					; if not overflowed, exit.
.8404	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8406	a5 3d		lda $3d				lda 	gxzScreen+1
.8408	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.840a	90 06		bcc $8412			bcc 	_GXAXExit
.840c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.840e	85 3d		sta $3d				sta 	gxzScreen+1
.8410	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8412					_GXAXExit:
.8412	60		rts				rts
.8413					GXIncrementY:
.8413	ee 33 06	inc $0633			inc 	GXY0
.8416	20 2f 88	jsr $882f			jsr 	GXMovePositionDown
.8419	60		rts				rts
.841a					GXLineSetup:
.841a	ad 37 06	lda $0637			lda 	GXY1
.841d	38		sec				sec
.841e	ed 33 06	sbc $0633			sbc 	GXY0
.8421	4a		lsr a				lsr 	a
.8422	8d 4f 06	sta $064f			sta 	GXDiffY
.8425	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8428	38		sec				sec
.8429	ad 35 06	lda $0635			lda 	GXX1
.842c	ed 31 06	sbc $0631			sbc 	GXX0
.842f	8d 4e 06	sta $064e			sta 	GXDiffX
.8432	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8435	ed 32 06	sbc $0632			sbc 	GXX0+1
.8438	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8439	6e 4e 06	ror $064e			ror 	GXDiffX
.843c	0a		asl a				asl 	a
.843d	10 0c		bpl $844b			bpl 	_GDXNotNegative
.843f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8441	38		sec				sec
.8442	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8445	8d 4e 06	sta $064e			sta 	GXDiffX
.8448	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.844b					_GDXNotNegative:
.844b	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.844e	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8451	8d 53 06	sta $0653			sta 	GXAdjust
.8454	ad 4e 06	lda $064e			lda 	GXDiffX
.8457	8d 54 06	sta $0654			sta 	GXTotal
.845a	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.845d	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8460	90 0f		bcc $8471			bcc 	_GDXNotLarger
.8462	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8465	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8468	8d 53 06	sta $0653			sta 	GXAdjust
.846b	ad 4f 06	lda $064f			lda 	GXDiffY
.846e	8d 54 06	sta $0654			sta 	GXTotal
.8471					_GDXNotLarger:
.8471	ad 54 06	lda $0654			lda 	GXTotal
.8474	4a		lsr a				lsr 	a
.8475	8d 52 06	sta $0652			sta 	GXPosition
.8478	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8479					GXSetColourMode:
.8479	a6 36		ldx $36				ldx 	gxzTemp0
.847b	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.847e	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8480	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8483	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8485	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8488	ae 3f 06	ldx $063f			ldx 	gxColour
.848b	8e 40 06	stx $0640			stx 	gxEORValue
.848e	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8490	90 03		bcc $8495			bcc 	_GXSDCNotAndColour
.8492	8e 41 06	stx $0641			stx 	gxANDValue
.8495					_GXSDCNotAndColour:
.8495	d0 03		bne $849a			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8497	9c 40 06	stz $0640			stz 	gxEORValue
.849a					_GXSDCNotAnd:
.849a	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.849b	90 08		bcc $84a5			bcc 	_GXSDCNoFlip
.849d	ad 41 06	lda $0641			lda	 	gxANDValue
.84a0	49 ff		eor #$ff			eor 	#$FF
.84a2	8d 41 06	sta $0641			sta 	gxANDValue
.84a5					_GXSDCNoFlip:
.84a5	18		clc				clc
.84a6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84a7					GXPlotPoint:
.84a7	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap 				; start drawing
.84aa	20 d9 87	jsr $87d9			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ad	ac 44 06	ldy $0644			ldy 	gsOffset
.84b0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84b2	2d 41 06	and $0641			and 	gxANDValue
.84b5	4d 40 06	eor $0640			eor 	gxEORValue
.84b8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84ba	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap 				; stop drawing and exit
.84bd	18		clc				clc
.84be	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84bf					GXFillRectangle:
.84bf	38		sec				sec
.84c0	80 01		bra $84c3			bra 	GXRectangle
.84c2					GXFrameRectangle:
.84c2	18		clc				clc
.84c3					GXRectangle:
.84c3	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84c6	f0 35		beq $84fd			beq 	_GXRFail
.84c8	08		php				php 								; save Fill flag (CS)
.84c9	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap 				; start drawing
.84cc	20 86 88	jsr $8886			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84cf	20 d9 87	jsr $87d9			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84d2	38		sec				sec 								; sec = Draw line
.84d3	20 ff 84	jsr $84ff			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84d6	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84d9	cd 37 06	cmp $0637			cmp 	gxY1
.84dc	f0 19		beq $84f7			beq 	_GXRectangleExit
.84de					_GXRectLoop:
.84de	20 2f 88	jsr $882f			jsr 	GXMovePositionDown 			; down one.
.84e1	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84e4	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84e7	cd 37 06	cmp $0637			cmp 	gXY1
.84ea	f0 07		beq $84f3			beq 	_GXLastLine
.84ec	28		plp				plp 								; get flag back
.84ed	08		php				php
.84ee	20 ff 84	jsr $84ff			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84f1	80 eb		bra $84de			bra 	_GXRectLoop
.84f3					_GXLastLine:
.84f3	38		sec				sec
.84f4	20 ff 84	jsr $84ff			jsr 	GXDrawLineX1X0
.84f7					_GXRectangleExit:
.84f7	68		pla				pla 								; throw fill flag.
.84f8	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap 				; stop drawing and exit
.84fb	18		clc				clc
.84fc	60		rts				rts
.84fd					_GXRFail:
.84fd	38		sec				sec
.84fe	60		rts				rts
.84ff					GXDrawLineX1X0:
.84ff	08		php				php 								; save solid/either-end
.8500	38		sec				sec
.8501	ad 35 06	lda $0635			lda		gXX1
.8504	ed 31 06	sbc $0631			sbc 	gXX0
.8507	85 36		sta $36				sta 	gxzTemp0
.8509	ad 36 06	lda $0636			lda 	gXX1+1
.850c	ed 32 06	sbc $0632			sbc 	gXX0+1
.850f	85 37		sta $37				sta 	gxzTemp0+1
.8511	28		plp				plp
.8512					GXDrawLineTemp0:
.8512	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8514	48		pha				pha
.8515	a5 3d		lda $3d				lda 	gxzScreen+1
.8517	48		pha				pha
.8518	ad 44 06	lda $0644			lda 	gsOffset
.851b	48		pha				pha
.851c	a5 0b		lda $0b				lda 	GXEditSlot
.851e	48		pha				pha
.851f	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8522	90 1e		bcc $8542			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8524					_GXDLTLine:
.8524	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8526	2d 41 06	and $0641			and 	gxANDValue
.8529	4d 40 06	eor $0640			eor 	gxEORValue
.852c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.852e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8530	d0 04		bne $8536			bne 	_GXDLTNoBorrow
.8532	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8534	30 2e		bmi $8564			bmi 	_GXDLTExit
.8536					_GXDLTNoBorrow:
.8536	c6 36		dec $36				dec 	gxzTemp0
.8538	c8		iny				iny 								; next slot.
.8539	d0 e9		bne $8524			bne 	_GXDLTLine
.853b	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.853d	20 72 85	jsr $8572			jsr 	GXDLTCheckWrap				; check for new page.
.8540	80 e2		bra $8524			bra 	_GXDLTLine
.8542					_GXDLTEndPoints:
.8542	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8544	2d 41 06	and $0641			and 	gxANDValue
.8547	4d 40 06	eor $0640			eor 	gxEORValue
.854a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.854c	98		tya				tya 								; advance to right side
.854d	18		clc				clc
.854e	65 36		adc $36				adc 	gxzTemp0
.8550	a8		tay				tay
.8551	a5 3d		lda $3d				lda 	gxzScreen+1
.8553	65 37		adc $37				adc 	gxzTemp0+1
.8555	85 3d		sta $3d				sta 	gxzScreen+1
.8557	20 72 85	jsr $8572			jsr 	GXDLTCheckWrap 			; fix up.
.855a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.855c	2d 41 06	and $0641			and 	gxANDValue
.855f	4d 40 06	eor $0640			eor 	gxEORValue
.8562	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8564					_GXDLTExit:
.8564	68		pla				pla
.8565	85 0b		sta $0b				sta 	GXEditSlot
.8567	68		pla				pla
.8568	8d 44 06	sta $0644			sta 	gsOffset
.856b	68		pla				pla
.856c	85 3d		sta $3d				sta 	gxzScreen+1
.856e	68		pla				pla
.856f	85 3c		sta $3c				sta 	gxzScreen
.8571	60		rts				rts
.8572					GXDLTCheckWrap:
.8572	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8574	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8576	90 06		bcc $857e			bcc 	_GXDLTCWExit
.8578	e9 20		sbc #$20			sbc 	#$20 						; fix up
.857a	85 3d		sta $3d				sta 	gxzScreen+1
.857c	e6 0b		inc $0b				inc 	GXEditSlot
.857e					_GXDLTCWExit:
.857e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.857f					GXDrawGraphicElement:
.857f	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8582	3a		dec a				dec 	a
.8583	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8586	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.8589	9c 5c 06	stz $065c			stz 	gxHFlip
.858c	2c 5d 06	bit $065d			bit 	gxUseMode
.858f	10 03		bpl $8594			bpl 	_GXNotVertical
.8591	8d 5b 06	sta $065b			sta 	gxVFlip
.8594					_GXNotVertical:
.8594	50 03		bvc $8599			bvc 	_GXNotHorizontal
.8596	8d 5c 06	sta $065c			sta 	gxHFlip
.8599					_GXNotHorizontal:
.8599	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.859c	f0 5f		beq $85fd			beq 	_GXSLFail
.859e	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85a1	48		pha				pha
.85a2	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85a5	8e 58 06	stx $0658			stx 	gxAcquireVector
.85a8	20 bb 87	jsr $87bb			jsr 	gxOpenBitmap 				; open the bitmap.
.85ab	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85ae	4a		lsr a				lsr 	a
.85af	4a		lsr a				lsr 	a
.85b0	4a		lsr a				lsr 	a
.85b1	29 07		and #$07			and		#7
.85b3	1a		inc a				inc 	a
.85b4	8d 5a 06	sta $065a			sta 	gxScale
.85b7	64 38		stz $38				stz 	gxzTemp1					; start first line
.85b9					_GXGELoop:
.85b9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85bb	4d 5b 06	eor $065b			eor 	gxVFlip
.85be	aa		tax				tax 								; get the Xth line.
.85bf	20 ff 85	jsr $85ff			jsr 	_GXCallAcquire 				; get that data.
.85c2	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85c5	85 39		sta $39				sta 	gxzTemp1+1
.85c7					_GXGELoop2:
.85c7	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85ca	cd 3d 06	cmp $063d			cmp 	gxHeight
.85cd	b0 10		bcs $85df			bcs 	_GXDGEExit
.85cf	20 02 86	jsr $8602			jsr 	GXRenderOneLine 			; render line
.85d2	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85d4	d0 f1		bne $85c7			bne 	_GXGELoop2
.85d6	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85d8	a5 38		lda $38				lda 	gxzTemp1
.85da	cd 56 06	cmp $0656			cmp 	gxSize
.85dd	d0 da		bne $85b9			bne 	_GXGELoop
.85df					_GXDGEExit:
.85df	68		pla				pla 								; restore Y for next time
.85e0	8d 33 06	sta $0633			sta 	gxY0
.85e3	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85e6					_GXShiftLeft:
.85e6	18		clc				clc
.85e7	ad 56 06	lda $0656			lda 	gxSize
.85ea	6d 31 06	adc $0631			adc 	gxX0
.85ed	8d 31 06	sta $0631			sta 	gxX0
.85f0	90 03		bcc $85f5			bcc 	_GXSLNoCarry
.85f2	ee 32 06	inc $0632			inc 	gxX0+1
.85f5					_GXSLNoCarry:
.85f5	ca		dex				dex
.85f6	d0 ee		bne $85e6			bne 	_GXShiftLeft
.85f8	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap
.85fb	18		clc				clc
.85fc	60		rts				rts
.85fd					_GXSLFail:
.85fd	38		sec				sec
.85fe	60		rts				rts
.85ff					_GXCallAcquire:
.85ff	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8602					GXRenderOneLine:
.8602	20 d9 87	jsr $87d9			jsr 	GXPositionCalc 				; calculate position/offset.
.8605	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8608	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.860a					_GXROLLoop1:
.860a	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.860d	85 3b		sta $3b				sta 	gxzTemp2+1
.860f					_GXROLLoop2:
.860f	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8611	4d 5c 06	eor $065c			eor 	gxHFlip
.8614	aa		tax				tax 								; read from the pixel buffer
.8615	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8618	d0 07		bne $8621			bne 	_GXDraw 					; draw if non zero
.861a	ad 5d 06	lda $065d			lda 	gxUseMode 					; check to see if solid background
.861d	29 04		and #$04			and 	#4
.861f	f0 0a		beq $862b			beq 	_GXZeroPixel
.8621					_GXDraw:
.8621	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8623	2d 41 06	and $0641			and 	gxANDValue
.8626	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8629	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.862b					_GXZeroPixel:
.862b	c8		iny				iny 								; advance pointer
.862c	d0 05		bne $8633			bne 	_GXNoShift
.862e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8630	20 72 85	jsr $8572			jsr 	GXDLTCheckWrap				; check for new page.
.8633					_GXNoShift:
.8633	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8635	d0 d8		bne $860f			bne 	_GXROLLoop2
.8637	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8639	a5 3a		lda $3a				lda 	gxzTemp2
.863b	cd 56 06	cmp $0656			cmp 	gxSize
.863e	d0 ca		bne $860a			bne 	_GXROLLoop1
.8640	ee 33 06	inc $0633			inc 	gxY0
.8643	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8644					GXFontHandler:
.8644	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8646	4d 3e 06	eor $063e			eor 	gxMode
.8649	8d 5d 06	sta $065d			sta 	gxUseMode
.864c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.864e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8650	26 37		rol $37				rol	 	gxzTemp0+1
.8652	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8654	26 37		rol $37				rol	 	gxzTemp0+1
.8656	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8658	26 37		rol $37				rol	 	gxzTemp0+1
.865a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.865c	09 c0		ora #$c0			ora 	#$C0
.865e	85 37		sta $37				sta 	gxzTemp0+1
.8660	a9 08		lda #$08			lda 	#8 							; size 8x8
.8662	a2 6a		ldx #$6a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8664	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8666	20 7f 85	jsr $857f			jsr 	GXDrawGraphicElement
.8669	60		rts				rts
.866a					GXGetGraphicDataFont:
.866a	8a		txa				txa 								; X->Y
.866b	a8		tay				tay
.866c	a6 01		ldx $01				ldx 	1 							; preserve old value
.866e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8670	85 01		sta $01				sta 	1
.8672	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8674	86 01		stx $01				stx 	1 							; put old value back.
.8676	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8678					_GXExpand:
.8678	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.867b	0a		asl a				asl 	a 							; shift bit 7 into C
.867c	90 08		bcc $8686			bcc 	_GXNoPixel
.867e	48		pha				pha 								; if set, set pixel buffer to current colour.
.867f	ad 3f 06	lda $063f			lda 	gxColour
.8682	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8685	68		pla				pla
.8686					_GXNoPixel:
.8686	e8		inx				inx 								; do the whole byte.
.8687	e0 08		cpx #$08			cpx 	#8
.8689	d0 ed		bne $8678			bne 	_GXExpand
.868b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.868c					GXSpriteHandler:
.868c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.868e	4d 3e 06	eor $063e			eor 	gxMode
.8691	8d 5d 06	sta $065d			sta 	gxUseMode
.8694	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.8696	da		phx				phx
.8697	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap 				; can access sprite information
.869a	68		pla				pla
.869b	20 4a 88	jsr $884a			jsr 	GXFindSprite 				; get the sprite address
.869e	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap
.86a1	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86a4	a2 ac		ldx #$ac			ldx 	#GXSpriteAcquire & $FF
.86a6	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86a8	20 7f 85	jsr $857f			jsr 	GXDrawGraphicElement
.86ab	60		rts				rts
.86ac					GXSpriteAcquire:
.86ac	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86af	85 0b		sta $0b				sta 	GXEditSlot
.86b1	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86b3	a9 00		lda #$00			lda 	#0
.86b5	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86b8					_GXTimesRowNumber:
.86b8	18		clc				clc
.86b9	65 36		adc $36				adc 	zTemp0
.86bb	ca		dex				dex
.86bc	10 fa		bpl $86b8			bpl 	_GXTimesRowNumber
.86be	64 37		stz $37				stz 	gxzTemp0+1
.86c0	0a		asl a				asl 	a 							; row x 2,4,6,8
.86c1	26 37		rol $37				rol 	gxzTemp0+1
.86c3	0a		asl a				asl 	a 							; row x 4,8,12,16
.86c4	26 37		rol $37				rol 	gxzTemp0+1
.86c6	0a		asl a				asl 	a 							; row x 8,16,24,32
.86c7	26 37		rol $37				rol 	gxzTemp0+1
.86c9	85 36		sta $36				sta 	gxzTemp0
.86cb	18		clc				clc 								; add base address.
.86cc	a5 36		lda $36				lda 	gxzTemp0
.86ce	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86d1	85 36		sta $36				sta 	gxzTemp0
.86d3	a5 37		lda $37				lda 	gxzTemp0+1
.86d5	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86d8					_GXSAFindPage:
.86d8	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86da	90 06		bcc $86e2			bcc 	_GXSAFoundPage
.86dc	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86de	e6 0b		inc $0b				inc 	GXEditSlot
.86e0	80 f6		bra $86d8			bra 	_GXSAFindPage
.86e2					_GXSAFoundPage:
.86e2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86e4	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86e6	a0 00		ldy #$00			ldy 	#0
.86e8					_GXSACopyLoop:
.86e8	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86ea	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86ed	c8		iny				iny
.86ee	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86f1	d0 f5		bne $86e8			bne 	_GXSACopyLoop
.86f3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86f4					GXSelect:
.86f4	ad 39 06	lda $0639			lda 	gxSpritesOn
.86f7	f0 1f		beq $8718			beq 	_GXSFail
.86f9	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.86fb	c9 40		cmp #$40			cmp 	#64
.86fd	b0 19		bcs $8718			bcs 	_GXSFail
.86ff	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8701	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8703	06 36		asl $36				asl 	gxzTemp0
.8705	06 36		asl $36				asl 	gxzTemp0
.8707	06 36		asl $36				asl 	gxzTemp0
.8709	2a		rol a				rol 	a
.870a	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.870c	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.870f	85 37		sta $37				sta 	gxzTemp0+1
.8711	a5 36		lda $36				lda 	gxzTemp0
.8713	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8716	18		clc				clc
.8717	60		rts				rts
.8718					_GXSFail:
.8718	38		sec				sec
.8719	60		rts				rts
.871a					GXSelectImage:
.871a	ad 39 06	lda $0639			lda 	gxSpritesOn
.871d	f0 5e		beq $877d			beq 	_GXSIFail
.871f	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8722	f0 59		beq $877d			beq 	_GXSIFail
.8724	64 01		stz $01				stz 	1
.8726	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8728	d0 43		bne $876d			bne 	_GXSIHide
.872a	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.872c	48		pha				pha
.872d	20 bb 87	jsr $87bb			jsr 	GXOpenBitmap
.8730	68		pla				pla
.8731	20 4a 88	jsr $884a			jsr 	GXFindSprite
.8734	a0 01		ldy #$01			ldy 	#1
.8736	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8739	85 36		sta $36				sta 	gxzTemp0
.873b	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.873e	85 37		sta $37				sta 	gxzTemp0+1
.8740	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8743	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8745	18		clc				clc
.8746	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8749	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.874c	c8		iny				iny
.874d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.874f	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8752	69 00		adc #$00			adc 	#0
.8754	c8		iny				iny
.8755	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8757	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.875a	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.875c	2a		rol a				rol 	a 							; x 2
.875d	0a		asl a				asl 	a 							; x 4
.875e	0a		asl a				asl 	a 							; x 8
.875f	0a		asl a				asl 	a 							; x 16
.8760	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.8763	0a		asl a				asl 	a 							; 1 shift
.8764	09 01		ora #$01			ora 	#1 							; enable sprite.
.8766	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8768	20 cc 87	jsr $87cc			jsr 	GXCloseBitmap
.876b	18		clc				clc
.876c	60		rts				rts
.876d					_GXSIHide:
.876d	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8770	85 36		sta $36				sta 	gxzTemp0
.8772	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8775	85 37		sta $37				sta 	gxzTemp0+1
.8777	a9 00		lda #$00			lda 	#0
.8779	92 36		sta ($36)			sta 	(gxzTemp0)
.877b	18		clc				clc
.877c	60		rts				rts
.877d					_GXSIFail:
.877d	38		sec				sec
.877e	60		rts				rts
.877f					GXMoveSprite:
.877f	ad 39 06	lda $0639			lda 	gxSpritesOn
.8782	f0 35		beq $87b9			beq 	_GXSIFail
.8784	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8787	f0 30		beq $87b9			beq 	_GXSIFail
.8789	85 37		sta $37				sta 	gxzTemp0+1
.878b	a0 04		ldy #$04			ldy 	#4
.878d	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8790	85 36		sta $36				sta 	gxzTemp0
.8792	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.8794	38		sec				sec
.8795	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.8798	4a		lsr a				lsr 	a
.8799	48		pha				pha
.879a	18		clc				clc
.879b	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.879e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87a0	c8		iny				iny
.87a1	ad 32 06	lda $0632			lda 	gxX0+1
.87a4	69 00		adc #$00			adc 	#0
.87a6	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87a8	c8		iny				iny
.87a9	68		pla				pla
.87aa	18		clc				clc
.87ab	6d 33 06	adc $0633			adc 	gxY0
.87ae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b0	a9 00		lda #$00			lda 	#0
.87b2	69 00		adc #$00			adc 	#0
.87b4	c8		iny				iny
.87b5	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b7	18		clc				clc
.87b8	60		rts				rts
.87b9					_GXSIFail:
.87b9	38		sec				sec
.87ba	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87bb					GXOpenBitmap:
.87bb	78		sei				sei 								; no interrupts here
.87bc	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87be	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c1	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c3	85 00		sta $00				sta 	0
.87c5	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87c7	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87ca	58		cli				cli
.87cb	60		rts				rts
.87cc					GXCloseBitmap:
.87cc	78		sei				sei
.87cd	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d0	85 0b		sta $0b				sta 	GXEditSlot
.87d2	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d5	85 00		sta $00				sta 	0
.87d7	58		cli				cli
.87d8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87d9					GXPositionCalc:
.87d9	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87db	48		pha				pha
.87dc	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87df	85 3c		sta $3c				sta 	gxzScreen
.87e1	64 3d		stz $3d				stz 	gxzScreen+1
.87e3	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e5	26 3d		rol $3d				rol 	gxzScreen+1
.87e7	06 3c		asl $3c				asl 	gxzScreen
.87e9	26 3d		rol $3d				rol 	gxzScreen+1
.87eb	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87ec	65 3c		adc $3c				adc 	gxzScreen
.87ee	85 3c		sta $3c				sta 	gxzScreen
.87f0	90 02		bcc $87f4			bcc 	_GXPCNoCarry
.87f2	e6 3d		inc $3d				inc 	gxzScreen+1
.87f4					_GXPCNoCarry:
.87f4	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87f6	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87f8	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fa	85 36		sta $36				sta 	gxzTemp0
.87fc	64 3d		stz $3d				stz 	gxzScreen+1
.87fe	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8800					_GXPCMultiply32:
.8800	06 3c		asl $3c				asl 	gxzScreen
.8802	26 3d		rol $3d				rol 	gxzScreen+1
.8804	3a		dec a				dec 	a
.8805	d0 f9		bne $8800			bne 	_GXPCMultiply32
.8807	18		clc				clc
.8808	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880b	65 3c		adc $3c				adc 	gxzScreen
.880d	8d 44 06	sta $0644			sta 	gsOffset
.8810	ad 32 06	lda $0632			lda 	GXX0+1
.8813	65 3d		adc $3d				adc 	gxzScreen+1
.8815	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8817	90 04		bcc $881d			bcc 	_GXPCNoOverflow
.8819	29 1f		and #$1f			and 	#$1F 						; fix it up
.881b	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.881d					_GXPCNoOverflow:
.881d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.881f	85 3d		sta $3d				sta 	gxzScreen+1
.8821	64 3c		stz $3c				stz 	gxzScreen
.8823	18		clc				clc
.8824	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8826	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.8829	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882b	68		pla				pla
.882c	85 36		sta $36				sta 	gxzTemp0
.882e	60		rts				rts
.882f					GXMovePositionDown:
.882f	18		clc				clc 								; add 320 to offset/temp+1
.8830	ad 44 06	lda $0644			lda 	gsOffset
.8833	69 40		adc #$40			adc 	#64
.8835	8d 44 06	sta $0644			sta 	gsOffset
.8838	a5 3d		lda $3d				lda 	gxzScreen+1
.883a	69 01		adc #$01			adc 	#1
.883c	85 3d		sta $3d				sta 	gxzScreen+1
.883e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8840	90 07		bcc $8849			bcc 	_GXMPDExit
.8842	38		sec				sec  								; next page
.8843	e9 20		sbc #$20			sbc 	#$20
.8845	85 3d		sta $3d				sta 	gxzScreen+1
.8847	e6 0b		inc $0b				inc 	GXEditSlot
.8849					_GXMPDExit:
.8849	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884a					GXFindSprite:
.884a	aa		tax				tax
.884b	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.884e	85 0b		sta $0b				sta 	GXEditSlot
.8850	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8853	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8856	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8859	48		pha				pha 								; save twice
.885a	48		pha				pha
.885b	29 03		and #$03			and 	#3 							; get sprite size
.885d	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8860	aa		tax				tax
.8861	bd 82 88	lda $8882,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8864	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.8867	68		pla				pla 								; get LUT
.8868	4a		lsr a				lsr		a
.8869	4a		lsr a				lsr		a
.886a	29 03		and #$03			and 	#3
.886c	8d 60 06	sta $0660			sta 	GXSpriteLUT
.886f	68		pla				pla 								; address, neeeds to be x 4
.8870	29 f0		and #$f0			and 	#$F0
.8872	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8875	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8878	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887b	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887e	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8881	60		rts				rts
.8882					_GXFXSSTTable:
>8882	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8886					GXSortXY:
.8886	20 a4 88	jsr $88a4			jsr 	GXSortY 					; will be sorted on Y now
.8889	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.888c	cd 35 06	cmp $0635			cmp 	gxX1
.888f	ad 32 06	lda $0632			lda 	gXX0+1
.8892	ed 36 06	sbc $0636			sbc 	gXX1+1
.8895	90 0c		bcc $88a3			bcc 	_GXSXYExit 					; X0 < X1 exit
.8897	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8899	a0 04		ldy #$04			ldy 	#4
.889b	20 b8 88	jsr $88b8			jsr 	GXSwapXY
.889e	e8		inx				inx
.889f	c8		iny				iny
.88a0	20 b8 88	jsr $88b8			jsr 	GXSwapXY
.88a3					_GXSXYExit:
.88a3	60		rts				rts
.88a4					GXSortY:
.88a4	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88a7	cd 37 06	cmp $0637			cmp 	gxY1
.88aa	90 0b		bcc $88b7			bcc 	_GXSYSorted
.88ac	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88ae	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b0					_GXSwap1:
.88b0	20 b8 88	jsr $88b8			jsr 	GXSwapXY
.88b3	88		dey				dey
.88b4	ca		dex				dex
.88b5	10 f9		bpl $88b0			bpl 	_GXSwap1
.88b7					_GXSYSorted:
.88b7	60		rts				rts
.88b8					GXSwapXY:
.88b8	bd 31 06	lda $0631,x			lda 	gxX0,x
.88bb	48		pha				pha
.88bc	b9 31 06	lda $0631,y			lda 	gxX0,y
.88bf	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c2	68		pla				pla
.88c3	99 31 06	sta $0631,y			sta 	gxX0,y
.88c6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88c7					AssembleGroup1:
.88c7	a9 ff		lda #$ff			lda 	#$FF
.88c9	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88cc	80 02		bra $88d0			bra 	AsmGroup12
.88ce					AssembleGroup2:
.88ce	a5 00		lda $00				lda 	$00
.88d0					AsmGroup12:
.88d0	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88d3	68		pla				pla 								; pop the return address to access the information following.
.88d4	fa		plx				plx
.88d5	20 5e 89	jsr $895e			jsr 	AccessParameters 			; get opcode and save as base
.88d8	8d a4 04	sta $04a4			sta 	BaseOpcode
.88db	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88de	d0 08		bne $88e8			bne 	_AG12HaveMask
.88e0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88e2	20 66 89	jsr $8966			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88e5	8d a5 04	sta $04a5			sta 	ModeMask
.88e8					_AG12HaveMask:
.88e8	20 a1 8a	jsr $8aa1			jsr 	TypeAndCalculateOperand 	; get zero page type
.88eb	da		phx				phx 								; save found address mode
.88ec	20 ca 89	jsr $89ca			jsr 	AssembleModeX
.88ef	fa		plx				plx  								; restore address mode
.88f0	b0 0b		bcs $88fd			bcs 	_AG12Exit
.88f2	20 fe 88	jsr $88fe			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.88f5	20 ca 89	jsr $89ca			jsr 	AssembleModeX
.88f8	b0 03		bcs $88fd			bcs 	_AG12Exit
.88fa	4c d9 b2	jmp $b2d9			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.88fd					_AG12Exit:
.88fd	60		rts				rts
.88fe					PromoteToAbsolute:
.88fe	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8900	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8902	f0 19		beq $891d			beq 	_PTADo
.8904	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8906	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8908	f0 13		beq $891d			beq 	_PTADo
.890a	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.890c	e0 80		cpx #$80			cpx 	#AM_ZEROY
.890e	f0 0d		beq $891d			beq 	_PTADo
.8910	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8912	e0 d1		cpx #$d1			cpx 	#AM_IND
.8914	f0 07		beq $891d			beq 	_PTADo
.8916	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8918	e0 c0		cpx #$c0			cpx 	#AM_INDX
.891a	f0 01		beq $891d			beq 	_PTADo
.891c	60		rts				rts
.891d					_PTADo:
.891d	aa		tax				tax
.891e	60		rts				rts
.891f					AssembleGroup3:
.891f	68		pla				pla 								; get parameters, which is just the opcode.
.8920	fa		plx				plx
.8921	20 5e 89	jsr $895e			jsr 	AccessParameters 			; get and output opcode
.8924	20 76 89	jsr $8976			jsr 	AssemblerWriteByte
.8927	20 05 8b	jsr $8b05			jsr 	CalculateOperand 			; get a 16 bit operand
.892a	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.892d	38		sec				sec
.892e	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8931	48		pha				pha 								; LSB in A
.8932	ad 10 04	lda $0410			lda 	NSMantissa1
.8935	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8938	aa		tax				tax 								; MSB in X
.8939	68		pla				pla
.893a	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.893b	69 7f		adc #$7f			adc 	#$7F
.893d	90 01		bcc $8940			bcc 	_AG3NoCarry
.893f	e8		inx				inx
.8940					_AG3NoCarry:
.8940	38		sec				sec 								; fix back and write out anyways.
.8941	e9 80		sbc #$80			sbc 	#$80
.8943	20 76 89	jsr $8976			jsr 	AssemblerWriteByte
.8946	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8948	f0 0a		beq $8954			beq 	_AG3Exit
.894a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.894d	29 01		and #$01			and 	#1
.894f	f0 03		beq $8954			beq 	_AG3Exit
.8951	4c de b2	jmp $b2de			jmp 	RangeError 					; no, branch is out of range
.8954					_AG3Exit:
.8954	60		rts				rts
.8955					AssembleGroup4:
.8955	68		pla				pla 								; pop address
.8956	fa		plx				plx
.8957	20 5e 89	jsr $895e			jsr 	AccessParameters 			; access and get first
.895a	20 76 89	jsr $8976			jsr 	AssemblerWriteByte 			; output it.
.895d	60		rts				rts
.895e					AccessParameters:
.895e	8d a1 04	sta $04a1			sta 	ParamStart
.8961	8e a2 04	stx $04a2			stx 	ParamStart+1
.8964	a9 01		lda #$01			lda 	#1
.8966					GetParameter:
.8966	5a		phy				phy
.8967	a8		tay				tay
.8968	ad a1 04	lda $04a1			lda 	ParamStart
.896b	85 36		sta $36				sta 	zTemp0
.896d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8970	85 37		sta $37				sta 	zTemp0+1
.8972	b1 36		lda ($36),y			lda 	(zTemp0),y
.8974	7a		ply				ply
.8975	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8976					AssemblerWriteByte:
.8976	48		pha			pha
.8977	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.897a	29 02		and #$02		and 	#2
.897c	f0 1b		beq $8999		beq 	_AWBNoPrint
.897e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8981	20 b4 89	jsr $89b4		jsr 	PrintHex
.8984	ad 9e 04	lda $049e		lda		AssemblerAddress
.8987	20 b4 89	jsr $89b4		jsr 	PrintHex
.898a	a9 20		lda #$20		lda 	#' '
.898c	20 94 b4	jsr $b494		jsr 	EXTPrintCharacter
.898f	68		pla			pla 									; print byte
.8990	48		pha			pha
.8991	20 b4 89	jsr $89b4		jsr 	PrintHex
.8994	a9 0d		lda #$0d		lda 	#13
.8996	20 94 b4	jsr $b494		jsr 	EXTPrintCharacter
.8999					_AWBNoPrint:
.8999	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.899c	85 36		sta $36			sta 	zTemp0
.899e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89a1	f0 0e		beq $89b1		beq 	_AWBRange
.89a3	85 37		sta $37			sta 	zTemp0+1
.89a5	68		pla			pla 									; write byte out
.89a6	92 36		sta ($36)		sta 	(zTemp0)
.89a8	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89ab	d0 03		bne $89b0		bne 	_AWBNoCarry
.89ad	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89b0					_AWBNoCarry:
.89b0	60		rts			rts
.89b1					_AWBRange:
.89b1	4c de b2	jmp $b2de		jmp 	RangeError
.89b4					PrintHex:
.89b4	48		pha				pha
.89b5	4a		lsr a				lsr 	a
.89b6	4a		lsr a				lsr 	a
.89b7	4a		lsr a				lsr 	a
.89b8	4a		lsr a				lsr 	a
.89b9	20 bd 89	jsr $89bd			jsr 	_PrintNibble
.89bc	68		pla				pla
.89bd					_PrintNibble:
.89bd	29 0f		and #$0f			and 	#15
.89bf	c9 0a		cmp #$0a			cmp 	#10
.89c1	90 02		bcc $89c5			bcc 	_NoShift
.89c3	69 06		adc #$06			adc 	#6
.89c5					_NoShift:
.89c5	69 30		adc #$30			adc 	#48
.89c7	4c 94 b4	jmp $b494			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89ca					AssembleModeX:
.89ca	5a		phy				phy
.89cb	ad a3 04	lda $04a3			lda 	IsGroup1
.89ce	f0 17		beq $89e7			beq 	_AMXGroup2
.89d0	8a		txa				txa 							; is it in group # 1
.89d1	29 40		and #$40			and 	#AM_ISG1
.89d3	f0 50		beq $8a25			beq 	_AMXFail 				; no, give up.
.89d5	8a		txa				txa 							; get back.
.89d6	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89d8	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89da	d0 22		bne $89fe			bne 	_AMXHaveInfo
.89dc	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89df	c9 81		cmp #$81			cmp 	#$81
.89e1	f0 42		beq $8a25			beq 	_AMXFail
.89e3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89e5	80 17		bra $89fe			bra 	_AMXHaveInfo 			; odd design decision there.
.89e7					_AMXGroup2:
.89e7	8a		txa				txa 							; is it in group 2 ?
.89e8	29 20		and #$20			and 	#AM_ISG2
.89ea	f0 39		beq $8a25			beq 	_AMXFail 				; no, give up.
.89ec	8a		txa				txa 							; get the offset into Y
.89ed	29 1f		and #$1f			and 	#$1F
.89ef	4a		lsr a				lsr 	a 						; make it 0-7.
.89f0	4a		lsr a				lsr  	a
.89f1	a8		tay				tay
.89f2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.89f5					_AMXCheckOkay:
.89f5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.89f6	88		dey				dey
.89f7	10 fc		bpl $89f5			bpl 	_AMXCheckOkay
.89f9	90 2a		bcc $8a25			bcc 	_AMXFail 				; not allowed.
.89fb	8a		txa				txa  							; get mask back
.89fc	29 1f		and #$1f			and 	#$1F
.89fe					_AMXHaveInfo:
.89fe	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a00	10 05		bpl $8a07			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a02	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a05	d0 1e		bne $8a25			bne 	_AMXFail
.8a07					_AMXAnySize:
.8a07	18		clc				clc 							; add offset to the base opcode
.8a08	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a0b					_AMXOutputCode:
.8a0b	20 76 89	jsr $8976			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a0e	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a10	f0 10		beq $8a22			beq 	_AMXExit
.8a12	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a15	20 76 89	jsr $8976			jsr 	AssemblerWriteByte
.8a18	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a1a	30 06		bmi $8a22			bmi 	_AMXExit
.8a1c	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a1f	20 76 89	jsr $8976			jsr 	AssemblerWriteByte
.8a22					_AMXExit:
.8a22	7a		ply				ply
.8a23	38		sec				sec
.8a24	60		rts				rts
.8a25					_AMXFail:
.8a25	a0 00		ldy #$00			ldy 	#0
.8a27					_AMXCheckOddities:
.8a27	8a		txa				txa
.8a28	d9 50 8a	cmp $8a50,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a2b	d0 16		bne $8a43			bne 	_AMXCONext
.8a2d	b9 4e 8a	lda $8a4e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a30	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a33	d0 0e		bne $8a43			bne 	_AMXCONext
.8a35	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a37	10 05		bpl $8a3e			bpl 	_AMXCONotZero
.8a39	ad 10 04	lda $0410			lda 	NSMantissa1
.8a3c	d0 05		bne $8a43			bne 	_AMXCONext
.8a3e					_AMXCONotZero:
.8a3e	b9 4f 8a	lda $8a4f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a41	80 c8		bra $8a0b			bra 	_AMXOutputCode 			; and assemble it
.8a43					_AMXCONext:
.8a43	c8		iny				iny
.8a44	c8		iny				iny
.8a45	c8		iny				iny
.8a46	b9 4e 8a	lda $8a4e,y			lda 	ExtraOpcode+0,y 		; end of table
.8a49	d0 dc		bne $8a27			bne 	_AMXCheckOddities
.8a4b					_AMXCOFail:
.8a4b	7a		ply				ply
.8a4c	18		clc				clc
.8a4d	60		rts				rts
.8a4e					ExtraOpcode:
>8a4e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a51	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a54	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a57	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a5a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a5d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a60	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a63	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a66	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a69	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a6c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a6d					LabelHere:
.8a6d	c8		iny				iny 								; skip .
.8a6e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a70	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm 				; get a term
.8a73	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a76	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a78	d0 24		bne $8a9e			bne 	_ALType
.8a7a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a7d	85 36		sta $36				sta 	zTemp0
.8a7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a82	85 37		sta $37				sta 	zTemp0+1
.8a84	5a		phy				phy 								; copy address in.
.8a85	a0 01		ldy #$01			ldy 	#1
.8a87	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a8a	92 36		sta ($36)			sta 	(zTemp0)
.8a8c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a91	c8		iny				iny
.8a92	a9 00		lda #$00			lda 	#0
.8a94	91 36		sta ($36),y			sta 	(zTemp0),y
.8a96	c8		iny				iny
.8a97	91 36		sta ($36),y			sta 	(zTemp0),y
.8a99	c8		iny				iny
.8a9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9c	7a		ply				ply
.8a9d	60		rts				rts
.8a9e					_ALType:
.8a9e	4c e3 b2	jmp $b2e3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aa1					TypeAndCalculateOperand:
.8aa1	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa3	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8aa5	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8aa7	f0 5b		beq $8b04			beq 	_TACOExit
.8aa9	c9 80		cmp #$80			cmp 	#KWC_EOL
.8aab	f0 57		beq $8b04			beq 	_TACOExit
.8aad	c8		iny				iny
.8aae	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ab0	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ab2	f0 51		beq $8b05			beq 	CalculateOperand
.8ab4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ab6	f0 1f		beq $8ad7			beq 	_TACOIndirect
.8ab8	88		dey				dey 								; undo get of first character
.8ab9	20 05 8b	jsr $8b05			jsr 	CalculateOperand 			; get operand
.8abc	b1 30		lda ($30),y			lda 	(codePtr),y
.8abe	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ac0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ac2	d0 40		bne $8b04			bne 	_TACOExit
.8ac4	c8		iny				iny
.8ac5	20 6a ac	jsr $ac6a			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ac8	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8aca	c9 58		cmp #$58			cmp 	#'X'
.8acc	f0 36		beq $8b04			beq 	_TACOExit
.8ace	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ad0	c9 59		cmp #$59			cmp 	#'Y'
.8ad2	f0 30		beq $8b04			beq 	_TACOExit
.8ad4					_TACOSyntax:
.8ad4	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.8ad7					_TACOIndirect:
.8ad7	20 05 8b	jsr $8b05			jsr 	CalculateOperand 			; get the operand
.8ada	b1 30		lda ($30),y			lda 	(codePtr),y
.8adc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8ade	f0 17		beq $8af7			beq 	_TACOIndX
.8ae0	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8ae3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae5	a2 d1		ldx #$d1			ldx 	#AM_IND
.8ae7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8ae9	d0 19		bne $8b04			bne 	_TACOExit
.8aeb	c8		iny				iny
.8aec	20 6a ac	jsr $ac6a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8aef	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8af1	d0 e1		bne $8ad4			bne 	_TACOSyntax
.8af3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8af5	80 0d		bra $8b04			bra 	_TACOExit
.8af7					_TACOIndX:
.8af7	c8		iny				iny
.8af8	20 6a ac	jsr $ac6a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8afb	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8afd	d0 d5		bne $8ad4			bne 	_TACOSyntax
.8aff	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket			; check )
.8b02	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b04					_TACOExit:
.8b04	60		rts				rts
.8b05					CalculateOperand:
.8b05	48		pha				pha
.8b06	da		phx				phx
.8b07	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b09	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.8b0c	fa		plx				plx
.8b0d	68		pla				pla
.8b0e	60		rts				rts
.ac6a					TACOCheckXY:
.ac6a	b1 30		lda ($30),y			lda 	(codePtr),y
.ac6c	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac6e	c9 40		cmp #$40			cmp 	#$40
.ac70	d0 21		bne $ac93			bne 	_TCXYFail
.ac72	b1 30		lda ($30),y			lda 	(codePtr),y
.ac74	18		clc				clc
.ac75	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac77	85 37		sta $37				sta 	zTemp0+1
.ac79	c8		iny				iny
.ac7a	b1 30		lda ($30),y			lda 	(codePtr),y
.ac7c	c8		iny				iny
.ac7d	85 36		sta $36				sta 	zTemp0
.ac7f	5a		phy				phy 								; save position
.ac80	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac82	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac84	d0 0c		bne $ac92			bne 	_TCXYPopFail
.ac86	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac88	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac8a	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac8c	f0 08		beq $ac96			beq 	_TCXYFound
.ac8e	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac90	f0 04		beq $ac96			beq 	_TCXYFound
.ac92					_TCXYPopFail:
.ac92	7a		ply				ply
.ac93					_TCXYFail:
.ac93	a9 00		lda #$00			lda 	#0
.ac95	60		rts				rts
.ac96					_TCXYFound:
.ac96	7a		ply				ply 								; restore position
.ac97	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ac99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b0f					EditProgramCode:
.8b0f	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b12	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b15	20 2a a5	jsr $a52a			jsr 	MemorySearch
.8b18	90 05		bcc $8b1f			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b1a	d0 03		bne $8b1f			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b1c	20 1f b5	jsr $b51f			jsr 	MemoryDeleteLine 			; delete the line
.8b1f					_EPCNoDelete:
.8b1f	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b22	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b24	f0 0d		beq $8b33			beq 	_EPCNoInsert
.8b26	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b29	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b2c	20 2a a5	jsr $a52a			jsr 	MemorySearch
.8b2f	18		clc				clc 								; insert at this point.
.8b30	20 56 b5	jsr $b556			jsr 	MemoryInsertLine 			; insert the line
.8b33					_EPCNoInsert:
.8b33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b34					WarmStart:
.8b34	a2 ff		ldx #$ff			ldx 	#$FF
.8b36	9a		txs				txs
.8b37	20 aa b4	jsr $b4aa			jsr 	EXTInputLine 				; get line to lineBuffer
.8b3a	20 eb a9	jsr $a9eb			jsr 	TokeniseLine 				; tokenise the line
.8b3d	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b40	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b43	d0 17		bne $8b5c			bne 	_WSEditCode 				; if so,edit code.
.8b45	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b48	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b4a	85 30		sta $30				sta 	codePtr
.8b4c	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b4e	85 31		sta $31				sta 	codePtr+1
.8b50	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b53	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b55	f0 dd		beq $8b34			beq 	WarmStart
.8b57	20 6f 94	jsr $946f			jsr 	RUNCodePointerLine 			; execute that line.
.8b5a	80 d8		bra $8b34			bra 	WarmStart
.8b5c					_WSEditCode:
.8b5c	20 0f 8b	jsr $8b0f			jsr 	EditProgramCode
.8b5f	20 cd 8b	jsr $8bcd			jsr 	ClearCommand
.8b62	80 d0		bra $8b34			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b64					AssembleCommand:
.8b64	a2 00		ldx #$00			ldx 	#0
.8b66	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger 		; start address
.8b69	ad 08 04	lda $0408			lda 	NSMantissa0
.8b6c	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b6f	ad 10 04	lda $0410			lda 	NSMantissa1
.8b72	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b75	20 fb ac	jsr $acfb			jsr 	CheckComma
.8b78	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; options
.8b7b	ad 08 04	lda $0408			lda 	NSMantissa0
.8b7e	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b81	60		rts				rts
.8b82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b83					AssertCommand:
.8b83	a2 00		ldx #$00			ldx 	#0
.8b85	20 2e a4	jsr $a42e			jsr 	EvaluateInteger 			; the assert test
.8b88	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; exit if result is non zero.
.8b8b	d0 05		bne $8b92			bne 	_ACExit
.8b8d	a9 0a		lda #$0a		lda	#10
.8b8f	4c f3 98	jmp $98f3		jmp	ErrorHandler
.8b92					_ACExit:
.8b92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b93					CallCommand:
.8b93	a2 00		ldx #$00			ldx 	#0
.8b95	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.8b98					_CCClear
.8b98	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8b99	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.8b9c	e0 04		cpx #$04			cpx 	#4
.8b9e	d0 f8		bne $8b98			bne 	_CCClear
.8ba0	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ba2					_CCCParam:
.8ba2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ba6	d0 09		bne $8bb1			bne 	_CCCRun6502
.8ba8	c8		iny				iny 								; skip comma
.8ba9	e8		inx				inx	 								; next level
.8baa	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bad	e0 03		cpx #$03			cpx 	#3
.8baf	90 f1		bcc $8ba2			bcc 	_CCCParam 					; done all 3 ?
.8bb1					_CCCRun6502:
.8bb1	5a		phy				phy 								; save position
.8bb2	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bb5	85 37		sta $37				sta 	zTemp0+1
.8bb7	ad 08 04	lda $0408			lda 	NSMantissa0
.8bba	85 36		sta $36				sta 	zTemp0
.8bbc	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bbf	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bc2	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bc5	20 ca 8b	jsr $8bca			jsr 	_CCCZTemp0 					; call zTemp0
.8bc8	7a		ply				ply 								; restore position and exit
.8bc9	60		rts				rts
.8bca					_CCCZTemp0:
.8bca	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bcd					ClearCommand:
.8bcd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bcf	85 36		sta $36				sta 	0+zTemp0
.8bd1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bd3	85 37		sta $37				sta 	1+zTemp0
.8bd5					_ClearZeroLoop:
.8bd5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bd7	f0 24		beq $8bfd			beq 	_ClearZeroEnd
.8bd9	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bdb	a9 00		lda #$00			lda 	#0
.8bdd					_ClearOneVariable:
.8bdd	91 36		sta ($36),y			sta 	(zTemp0),y
.8bdf	c8		iny				iny
.8be0	c0 08		cpy #$08			cpy 	#8
.8be2	d0 f9		bne $8bdd			bne 	_ClearOneVariable
.8be4	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8be6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8be8	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bea	d0 04		bne $8bf0			bne 	_ClearNotProcedure
.8bec	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8bee	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf0					_ClearNotProcedure:
.8bf0	18		clc				clc 								; go to the next variable
.8bf1	b2 36		lda ($36)			lda 	(zTemp0)
.8bf3	65 36		adc $36				adc 	zTemp0
.8bf5	85 36		sta $36				sta 	zTemp0
.8bf7	90 dc		bcc $8bd5			bcc 	_ClearZeroLoop
.8bf9	e6 37		inc $37				inc 	zTemp0+1
.8bfb	80 d8		bra $8bd5			bra 	_ClearZeroLoop
.8bfd					_ClearZeroEnd:
.8bfd	18		clc				clc
.8bfe	a5 36		lda $36				lda 	zTemp0
.8c00	69 01		adc #$01			adc 	#1
.8c02	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c05	a5 37		lda $37				lda 	zTemp0+1
.8c07	69 00		adc #$00			adc 	#0
.8c09	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c0c	20 e4 a5	jsr $a5e4			jsr 	StackReset
.8c0f	20 39 b6	jsr $b639			jsr 	StringSystemInitialise
.8c12	20 13 98	jsr $9813			jsr 	ProcedureScan
.8c15	20 2b 94	jsr $942b			jsr 	Command_Restore
.8c18	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c1b	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c1e	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c21	20 c0 a1	jsr $a1c0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c25					ClearScreen:
.8c25	5a		phy				phy
.8c26	20 91 b4	jsr $b491			jsr 	EXTClearScreen
.8c29	7a		ply				ply
.8c2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c2b					Command_Data:
.8c2b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c2d	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c2f	20 65 98	jsr $9865			jsr 	ScanForward
.8c32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c33					DimCommand:
.8c33	b1 30		lda ($30),y			lda 	(codePtr),y
.8c35	29 c0		and #$c0			and 	#$C0
.8c37	c9 40		cmp #$40			cmp 	#$40
.8c39	d0 7a		bne $8cb5			bne 	_DCSyntax
.8c3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3d	18		clc				clc
.8c3e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c40	85 3f		sta $3f				sta 	zaTemp+1
.8c42	c8		iny				iny
.8c43	b1 30		lda ($30),y			lda 	(codePtr),y
.8c45	c8		iny				iny
.8c46	85 3e		sta $3e				sta 	zaTemp
.8c48	5a		phy				phy
.8c49	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c4b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c4d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c4f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c51	f0 62		beq $8cb5			beq 	_DCSyntax
.8c53	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c55	29 04		and #$04			and 	#NSBIsArray
.8c57	f0 64		beq $8cbd			beq 	_DCType
.8c59	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c5b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c5d	d0 59		bne $8cb8			bne 	_DCRedefine
.8c5f	7a		ply				ply
.8c60	20 c0 8c	jsr $8cc0			jsr 	_DCGetSize 				; get array size, check it.
.8c63	5a		phy				phy
.8c64	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c66	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c68	7a		ply				ply 							; is there a second (e.g. ,x)
.8c69	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c6d	d0 0a		bne $8c79			bne 	_DCOneDimension
.8c6f	c8		iny				iny 							; skip comma
.8c70	20 c0 8c	jsr $8cc0			jsr 	_DCGetSize 				; get 2nd array size
.8c73	5a		phy				phy
.8c74	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c76	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c78	7a		ply				ply
.8c79					_DCOneDimension:
.8c79	5a		phy				phy 							; save position
.8c7a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c7c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c7e	aa		tax				tax
.8c7f	c8		iny				iny
.8c80	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c82	e8		inx				inx 							; bump them.
.8c83	1a		inc a				inc 	a
.8c84	20 75 b1	jsr $b175			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c87	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c89	29 e0		and #$e0			and 	#$E0
.8c8b	d0 23		bne $8cb0			bne 	_DCSize
.8c8d	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c8f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c91	20 ce 8c	jsr $8cce			jsr 	ScaleByBaseType 		; scale by base type
.8c94	a5 36		lda $36				lda 	zTemp0
.8c96	a6 37		ldx $37				ldx 	zTemp0+1
.8c98	20 82 a1	jsr $a182			jsr 	AllocateXABytes 		; allocate memory
.8c9b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8c9d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c9f	c8		iny				iny
.8ca0	8a		txa				txa
.8ca1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca3	7a		ply				ply 							; get position back
.8ca4	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 		; check )
.8ca7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca9	c8		iny				iny 							; consume in case
.8caa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cac	f0 85		beq $8c33			beq 	DimCommand
.8cae	88		dey				dey 							; undo consume
.8caf	60		rts				rts
.8cb0					_DCSize:
.8cb0	a9 16		lda #$16		lda	#22
.8cb2	4c f3 98	jmp $98f3		jmp	ErrorHandler
.8cb5					_DCSyntax:
.8cb5	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.8cb8					_DCRedefine:
.8cb8	a9 15		lda #$15		lda	#21
.8cba	4c f3 98	jmp $98f3		jmp	ErrorHandler
.8cbd					_DCType:
.8cbd	4c e3 b2	jmp $b2e3			jmp 	TypeError
.8cc0					_DCGetSize:
.8cc0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cc2	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 	; get array dimension
.8cc5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cc7	f0 e7		beq $8cb0			beq 	_DCSize
.8cc9	c9 fe		cmp #$fe			cmp 	#254
.8ccb	f0 e3		beq $8cb0			beq 	_DCSize
.8ccd	60		rts				rts
.8cce					ScaleByBaseType:
.8cce	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cd0	d0 19		bne $8ceb			bne 	_SBBTString
.8cd2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cd4	48		pha				pha
.8cd5	a5 36		lda $36				lda 	zTemp0
.8cd7	48		pha				pha
.8cd8	06 36		asl $36				asl 	zTemp0 					; x 2
.8cda	26 37		rol $37				rol 	zTemp0+1
.8cdc	06 36		asl $36				asl 	zTemp0 					; x 4
.8cde	26 37		rol $37				rol 	zTemp0+1
.8ce0	68		pla				pla 							; add stacked value = x 5
.8ce1	65 36		adc $36				adc 	zTemp0
.8ce3	85 36		sta $36				sta 	zTemp0
.8ce5	68		pla				pla
.8ce6	65 37		adc $37				adc 	zTemp0+1
.8ce8	85 37		sta $37				sta 	zTemp0+1
.8cea	60		rts				rts
.8ceb					_SBBTString:
.8ceb	06 36		asl $36				asl 	zTemp0
.8ced	26 37		rol $37				rol 	zTemp0+1
.8cef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8cf0					EndCommand:
.8cf0	4c 34 8b	jmp $8b34			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8cf3					UnaryEvent:
.8cf3	fa		plx				plx
.8cf4	20 a9 96	jsr $96a9			jsr 	TimerToStackX 				; timer in +0
.8cf7	e8		inx				inx  								; put reference into +1
.8cf8	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm
.8cfb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8cfe	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d00	d0 57		bne $8d59			bne 	_UEType
.8d02	e8		inx				inx 								; put the step in +2
.8d03	20 fb ac	jsr $acfb			jsr 	CheckComma
.8d06	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.8d09	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.8d0c	ca		dex				dex
.8d0d	ca		dex				dex
.8d0e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d11	85 36		sta $36				sta 	zTemp0
.8d13	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d16	85 37		sta $37				sta 	zTemp0+1
.8d18	5a		phy				phy
.8d19	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d1d	30 36		bmi $8d55			bmi 	_UEFalse
.8d1f	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d21	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d24	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d26	c8		iny				iny
.8d27	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d2a	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d2c	c8		iny				iny
.8d2d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d30	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d32	90 21		bcc $8d55			bcc 	_UEFalse 					; no, return FALSE.
.8d34	18		clc				clc
.8d35	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d37	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3a	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d3d	91 36		sta ($36),y			sta 	(zTemp0),y
.8d3f	c8		iny				iny
.8d40	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d43	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d46	91 36		sta ($36),y			sta 	(zTemp0),y
.8d48	c8		iny				iny
.8d49	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d4c	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d4f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d51	7a		ply				ply
.8d52	4c 60 99	jmp $9960			jmp 	ReturnTrue
.8d55					_UEFalse:
.8d55	7a		ply				ply 								; restore Y
.8d56	4c 6c 99	jmp $996c			jmp 	ReturnFalse 				; and return False
.8d59					_UEType:
.8d59	4c e3 b2	jmp $b2e3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d5c					ForCommand:
.8d5c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d5e	20 7f a5	jsr $a57f			jsr 	StackOpen
.8d61	a2 00		ldx #$00			ldx 	#0
.8d63	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm
.8d66	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d69	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d6b	d0 49		bne $8db6			bne		_FCError
.8d6d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d6f	20 03 ad	jsr $ad03			jsr 	CheckNextA
.8d72	e8		inx				inx
.8d73	20 2e a4	jsr $a42e			jsr 	EvaluateInteger 			; <from> in +1
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	c8		iny				iny 								; consume it
.8d79	48		pha				pha 								; save on stack for later
.8d7a	c9 b0		cmp #$b0			cmp 	#KWD_DOWNTO
.8d7c	f0 04		beq $8d82			beq 	_FCNoSyntax
.8d7e	c9 c7		cmp #$c7			cmp 	#KWD_TO
.8d80	d0 37		bne $8db9			bne 	_FCSyntaxError
.8d82					_FCNoSyntax:
.8d82	e8		inx				inx
.8d83	20 2e a4	jsr $a42e			jsr 	EvaluateInteger
.8d86	20 c3 a5	jsr $a5c3			jsr 	STKSaveCodePosition 		; save loop back position
.8d89	68		pla				pla 								; restore DOWNTO or TO
.8d8a	5a		phy				phy 								; save Y on the stack
.8d8b	49 b0		eor #$b0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d8d	f0 02		beq $8d91			beq 	_FCNotDownTo
.8d8f	a9 02		lda #$02			lda 	#2
.8d91					_FCNotDownTo:
.8d91	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d92	a0 10		ldy #$10			ldy 	#16
.8d94	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8d96	a0 06		ldy #$06			ldy 	#6
.8d98	ad 08 04	lda $0408			lda 	NSMantissa0
.8d9b	91 34		sta ($34),y			sta 	(basicStack),y
.8d9d	ad 10 04	lda $0410			lda 	NSMantissa1
.8da0	c8		iny				iny
.8da1	91 34		sta ($34),y			sta 	(basicStack),y
.8da3	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8da5	a2 01		ldx #$01			ldx 	#1
.8da7	20 bc 8d	jsr $8dbc			jsr 	FCIntegerToStack
.8daa	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dac	a2 02		ldx #$02			ldx 	#2
.8dae	20 bc 8d	jsr $8dbc			jsr 	FCIntegerToStack
.8db1	20 dc 8d	jsr $8ddc			jsr 	CopyIndexToReference
.8db4	7a		ply				ply 								; restore position
.8db5	60		rts				rts
.8db6					_FCError:
.8db6	4c e3 b2	jmp $b2e3			jmp 	TypeError
.8db9					_FCSyntaxError:
.8db9	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.8dbc					FCIntegerToStack:
.8dbc	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dbf	10 03		bpl $8dc4			bpl	 	_FCNotNegative
.8dc1	20 80 a4	jsr $a480			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dc4					_FCNotNegative:
.8dc4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8dc7	91 34		sta ($34),y			sta 	(basicStack),y
.8dc9	c8		iny				iny
.8dca	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dcd	91 34		sta ($34),y			sta 	(basicStack),y
.8dcf	c8		iny				iny
.8dd0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dd3	91 34		sta ($34),y			sta 	(basicStack),y
.8dd5	c8		iny				iny
.8dd6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8dd9	91 34		sta ($34),y			sta 	(basicStack),y
.8ddb	60		rts				rts
.8ddc					CopyIndexToReference:
.8ddc	5a		phy				phy
.8ddd	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ddf	38		sec				sec 								; (because we copy from offset 8)
.8de0	b1 34		lda ($34),y			lda 	(basicStack),y
.8de2	e9 08		sbc #$08			sbc 	#8
.8de4	85 36		sta $36				sta 	zTemp0
.8de6	c8		iny				iny
.8de7	b1 34		lda ($34),y			lda 	(basicStack),y
.8de9	e9 00		sbc #$00			sbc 	#0
.8deb	85 37		sta $37				sta 	zTemp0+1
.8ded	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8def	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8df1	b1 34		lda ($34),y			lda 	(basicStack),y
.8df3	0a		asl a				asl 	a 							; into carry
.8df4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8df6	90 14		bcc $8e0c			bcc 	_CITRNormal
.8df8	38		sec				sec
.8df9					_CITRNegative:
.8df9	a9 00		lda #$00			lda 	#0
.8dfb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8dfd	91 36		sta ($36),y			sta 	(zTemp0),y
.8dff	c8		iny				iny
.8e00	ca		dex				dex
.8e01	d0 f6		bne $8df9			bne 	_CITRNegative
.8e03	88		dey				dey 								; look at MSB of mantissa
.8e04	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e06	09 80		ora #$80			ora 	#$80
.8e08	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0a	7a		ply				ply
.8e0b	60		rts				rts
.8e0c					_CITRNormal:
.8e0c	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e0e	91 36		sta ($36),y			sta 	(zTemp0),y
.8e10	c8		iny				iny
.8e11	ca		dex				dex
.8e12	d0 f8		bne $8e0c			bne 	_CITRNormal
.8e14	7a		ply				ply 								; and exit.
.8e15	60		rts				rts
.8e16					NextCommand:
.8e16	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e18	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e1a	20 ab a5	jsr $a5ab			jsr 	StackCheckFrame
.8e1d	5a		phy				phy
.8e1e	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e20	b1 34		lda ($34),y			lda 	(basicStack),y
.8e22	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e24	30 02		bmi $8e28			bmi 	_NCStepNeg
.8e26	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e28					_NCStepNeg:
.8e28	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e2a	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e2c	18		clc				clc
.8e2d					_NCBump:
.8e2d	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e2f	91 34		sta ($34),y			sta 	(basicStack),y
.8e31	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e33	c8		iny				iny 								; next byte
.8e34	ca		dex				dex 								; do four times
.8e35	d0 f6		bne $8e2d			bne 	_NCBump
.8e37	20 dc 8d	jsr $8ddc			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e3a	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e3c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3e	0a		asl a				asl 	a 							; sign bit to carry
.8e3f	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e41	85 38		sta $38				sta 	zTemp1
.8e43	90 02		bcc $8e47			bcc 	_NCCompRev 					; use if step is +ve
.8e45	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e47					_NCCompRev:
.8e47	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e49	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e4b	85 39		sta $39				sta 	zTemp1+1
.8e4d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e4f	38		sec				sec
.8e50					_NCCompare:
.8e50	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e52	b1 34		lda ($34),y			lda 	(basicStack),y
.8e54	a4 39		ldy $39				ldy 	zTemp1+1
.8e56	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e58	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e5a	e6 39		inc $39				inc 	zTemp1+1
.8e5c	ca		dex				dex 								; do it 4 times.
.8e5d	d0 f1		bne $8e50			bne 	_NCCompare
.8e5f	50 02		bvc $8e63			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e61	49 80		eor #$80			eor 	#$80
.8e63					_NCNoOverflow:
.8e63	7a		ply				ply 								; restore Y position
.8e64	0a		asl a				asl 	a 							; is bit 7 set.
.8e65	90 04		bcc $8e6b			bcc 	_NCLoopback 				; if no , >= so loop back
.8e67	20 9d a5	jsr $a59d			jsr 	StackClose 					; exit the loop
.8e6a	60		rts				rts
.8e6b					_NCLoopBack:
.8e6b	20 d4 a5	jsr $a5d4			jsr 	STKLoadCodePosition 		; loop back
.8e6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e6f					RectangleCommand:
.8e6f	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e71	80 02		bra $8e75			bra 	ShapeDrawCmd
.8e73					CircleCommand:
.8e73	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e75					ShapeDrawCmd:
.8e75	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8e78					ShapeDraw:
.8e78	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e7b	4c f7 8e	jmp $8ef7			jmp 	ExecuteGraphicCommand	 	; and complete
.8e7e					SpriteCommand:
.8e7e	a2 00		ldx #$00			ldx 	#0
.8e80	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get image number.
.8e83	5a		phy				phy
.8e84	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8e86	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8e89	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8e8b	b0 0d		bcs $8e9a			bcs 	_SCRange
.8e8d	a0 ff		ldy #$ff			ldy 	#255
.8e8f	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8e92	a9 32		lda #$32			lda 	#25*2
.8e94	7a		ply				ply
.8e95	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8e98	80 5d		bra $8ef7			bra 	ExecuteGraphicCommand
.8e9a					_SCRange:
.8e9a	4c de b2	jmp $b2de			jmp 	RangeError
.8e9d					ImageCommand:
.8e9d	a2 00		ldx #$00			ldx 	#0
.8e9f	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get image number.
.8ea2	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8ea5					ImageRunDraw:
.8ea5	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ea7	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8eaa	ad 6a 06	lda $066a			lda 	gxDrawScale
.8ead	0a		asl a				asl 	a
.8eae	0a		asl a				asl 	a
.8eaf	0a		asl a				asl 	a
.8eb0	a8		tay				tay
.8eb1	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8eb3	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8eb9	60		rts				rts
.8eba					TextCommand:
.8eba	a2 00		ldx #$00			ldx 	#0
.8ebc	20 16 a4	jsr $a416			jsr 	EvaluateString 				; get text
.8ebf	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8ec2					TextRunDraw:
.8ec2	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ec4	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ec7	a0 00		ldy #$00			ldy 	#0
.8ec9					_IRDLoop:
.8ec9	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ecc	85 37		sta $37				sta 	zTemp0+1
.8ece	ad 08 04	lda $0408			lda 	NSMantissa0
.8ed1	85 36		sta $36				sta 	zTemp0
.8ed3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ed5	f0 13		beq $8eea			beq 	_IRDExit
.8ed7	5a		phy				phy									; save string pos
.8ed8	48		pha				pha 								; save char
.8ed9	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8edc	0a		asl a				asl 	a
.8edd	0a		asl a				asl 	a
.8ede	0a		asl a				asl 	a
.8edf	a8		tay				tay
.8ee0	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8ee2	fa		plx				plx 								; char to draw
.8ee3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ee6	7a		ply				ply 								; restore string pos
.8ee7	c8		iny				iny
.8ee8	90 df		bcc $8ec9			bcc 	_IRDLoop 					; go back if no error.
.8eea					_IRDExit:
.8eea	60		rts				rts
.8eeb					PlotCommand:
.8eeb	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8eed	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8ef0	80 05		bra $8ef7			bra 	ExecuteGraphicCommand
.8ef2					LineCommand:
.8ef2	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ef4	20 03 8f	jsr $8f03			jsr 	RunGraphicsCommand
.8ef7					ExecuteGraphicCommand:
.8ef7	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8efa	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8efd	b0 01		bcs $8f00			bcs 	_EGCError
.8eff	60		rts				rts
.8f00					_EGCError:
.8f00	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.8f03					RunGraphicsCommand:
.8f03	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f06	68		pla				pla 								; pop handler address
.8f07	fa		plx				plx
.8f08	1a		inc a				inc 	a
.8f09	d0 01		bne $8f0c			bne 	_RGINoCarry
.8f0b	e8		inx				inx
.8f0c					_RGINoCarry:
.8f0c	8d 68 06	sta $0668			sta 	GXHandler
.8f0f	8e 69 06	stx $0669			stx 	GXHandler+1
.8f12					_RGICommandLoop:
.8f12	b1 30		lda ($30),y			lda 	(codePtr),y
.8f14	c8		iny				iny
.8f15	c9 c7		cmp #$c7			cmp 	#KWD_TO						; is it TO x,y
.8f17	f0 53		beq $8f6c			beq 	_RGI_To
.8f19	c9 b6		cmp #$b6			cmp 	#KWD_HERE 					; do it here.
.8f1b	f0 55		beq $8f72			beq 	_RGI_Here
.8f1d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f1f	f0 3d		beq $8f5e			beq 	_RGI_Exit
.8f21	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f23	f0 39		beq $8f5e			beq 	_RGI_Exit
.8f25	c9 bd		cmp #$bd			cmp 	#KWD_OUTLINE 				; solid or outline
.8f27	f0 3e		beq $8f67			beq 	_RGI_Frame
.8f29	c9 c4		cmp #$c4			cmp 	#KWD_SOLID
.8f2b	f0 33		beq $8f60			beq 	_RGI_Solid
.8f2d	c9 a7		cmp #$a7			cmp 	#KWD_BY 					; by offset
.8f2f	f0 4b		beq $8f7c			beq 	_RGI_By
.8f31	c9 b2		cmp #$b2			cmp 	#KWD_FROM 					; from
.8f33	f0 17		beq $8f4c			beq 	_RGI_Move2
.8f35	c9 af		cmp #$af			cmp 	#KWD_DIM 					; dim (set scale)
.8f37	f0 65		beq $8f9e			beq 	_RGI_Dim
.8f39	c9 ad		cmp #$ad			cmp 	#KWD_COLOUR 				; colour or Color
.8f3b	f0 78		beq $8fb5			beq 	_RGI_Colour
.8f3d	c9 ac		cmp #$ac			cmp 	#KWD_COLOR
.8f3f	f0 74		beq $8fb5			beq 	_RGI_Colour
.8f41	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f44	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f46	d0 03		bne $8f4b			bne 	_RGI_Move 					; move
.8f48	4c df 8f	jmp $8fdf			jmp		_RGI_SpriteInstructions
.8f4b					_RGI_Move:
.8f4b	88		dey				dey 								; unpick get.
.8f4c					_RGI_Move2:
.8f4c	20 03 90	jsr $9003			jsr 	GCGetCoordinatePair 		; move to here
.8f4f	20 2a 90	jsr $902a			jsr 	GCCopyPairToStore 			; save
.8f52	5a		phy				phy
.8f53	20 20 90	jsr $9020			jsr 	GCLoadAXY 					; load in
.8f56	09 20		ora #$20			ora 	#16*2 						; move there
.8f58	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f5b	7a		ply				ply
.8f5c	80 b4		bra $8f12			bra 	_RGICommandLoop 			; and go round
.8f5e					_RGI_Exit:
.8f5e	88		dey				dey 								; unpick : / EOL
.8f5f	60		rts				rts
.8f60					_RGI_Solid:
.8f60	a9 02		lda #$02			lda 	#2
.8f62	8d 64 06	sta $0664			sta 	gxFillSolid
.8f65	80 ab		bra $8f12			bra 	_RGICommandLoop
.8f67					_RGI_Frame:
.8f67	9c 64 06	stz $0664			stz 	gxFillSolid
.8f6a	80 a6		bra $8f12			bra 	_RGICommandLoop
.8f6c					_RGI_To:
.8f6c	20 03 90	jsr $9003			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f6f	20 2a 90	jsr $902a			jsr 	GCCopyPairToStore
.8f72					_RGI_Here:
.8f72	5a		phy				phy
.8f73	20 20 90	jsr $9020			jsr 	GCLoadAXY 					; load it into AXY
.8f76	20 dc 8f	jsr $8fdc			jsr 	_RGICallHandler 			; go do whatever it is.
.8f79	7a		ply				ply
.8f7a	80 96		bra $8f12			bra 	_RGICommandLoop 			; and go round
.8f7c					_RGI_By:
.8f7c	20 10 90	jsr $9010			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f7f	18		clc				clc
.8f80	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f83	6d 65 06	adc $0665			adc 	gxxPos
.8f86	8d 65 06	sta $0665			sta 	gxXPos
.8f89	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f8c	6d 66 06	adc $0666			adc 	gxxPos+1
.8f8f	8d 66 06	sta $0666			sta 	gxXPos+1
.8f92	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8f95	18		clc				clc
.8f96	6d 67 06	adc $0667			adc 	gxYPos
.8f99	8d 67 06	sta $0667			sta 	gxYPos
.8f9c	80 d4		bra $8f72			bra 	_RGI_Here
.8f9e					_RGI_Dim:
.8f9e	a2 01		ldx #$01			ldx	 	#1
.8fa0	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger
.8fa3	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fa6	c9 00		cmp #$00			cmp 	#0
.8fa8	f0 2f		beq $8fd9			beq 	_RGIRange
.8faa	c9 09		cmp #$09			cmp 	#8+1
.8fac	b0 2b		bcs $8fd9			bcs		_RGIRange
.8fae	3a		dec a				dec 	a
.8faf	8d 6a 06	sta $066a			sta 	gxDrawScale
.8fb2	4c 12 8f	jmp $8f12			jmp 	_RGICommandLoop
.8fb5					_RGI_Colour:
.8fb5	a2 01		ldx #$01			ldx 	#1 							; colour
.8fb7	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger
.8fba	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fbc	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.8fbf	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fc3	d0 04		bne $8fc9			bne 	_RGICDefaultMode
.8fc5	c8		iny				iny
.8fc6	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger
.8fc9					_RGICDefaultMode:
.8fc9	5a		phy				phy
.8fca	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fcc	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fcf	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fd2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fd5	7a		ply				ply
.8fd6	4c 12 8f	jmp $8f12			jmp 	_RGICommandLoop 			; and go round
.8fd9					_RGIRange:
.8fd9	4c de b2	jmp $b2de			jmp 	RangeError
.8fdc					_RGICallHandler:
.8fdc	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8fdf					_RGI_SpriteInstructions:
.8fdf	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.8fe1	f0 07		beq $8fea			beq 	_RGISpriteOff
.8fe3	c9 b7		cmp #$b7			cmp 	#KWD_IMAGE
.8fe5	f0 11		beq $8ff8			beq 	_RGISetImage
.8fe7	4c 4b 8f	jmp $8f4b			jmp 	_RGI_Move
.8fea					_RGISpriteOff:
.8fea	5a		phy				phy
.8feb	a0 01		ldy #$01			ldy 	#1
.8fed	a2 00		ldx #$00			ldx 	#0
.8fef					_RGIDoCommandLoop:
.8fef	a9 10		lda #$10			lda 	#8*2
.8ff1	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ff4	7a		ply				ply
.8ff5	4c 12 8f	jmp $8f12			jmp 	_RGICommandLoop
.8ff8					_RGISetImage:
.8ff8	a2 01		ldx #$01			ldx 	#1
.8ffa	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger
.8ffd	5a		phy				phy
.8ffe	aa		tax				tax
.8fff	a0 00		ldy #$00			ldy 	#0
.9001	80 ec		bra $8fef			bra 	_RGIDoCommandLoop
.9003					GCGetCoordinatePair:
.9003	a2 01		ldx #$01			ldx 	#1
.9005	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.9008	20 fb ac	jsr $acfb			jsr 	CheckComma
.900b	e8		inx				inx
.900c	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.900f	60		rts				rts
.9010					GCSignedCoordinatePair:
.9010	a2 01		ldx #$01			ldx 	#1
.9012	20 4f a4	jsr $a44f			jsr 	Evaluate16BitIntegerSigned
.9015	20 fb ac	jsr $acfb			jsr 	CheckComma
.9018	e8		inx				inx
.9019	20 4f a4	jsr $a44f			jsr 	Evaluate16BitIntegerSigned
.901c	60		rts				rts
.901d					_GCCPRange:
.901d	4c de b2	jmp $b2de			jmp 	RangeError
.9020					GCLoadAXY:
.9020	ad 66 06	lda $0666			lda 	gxXPos+1
.9023	ae 65 06	ldx $0665			ldx 	gxXPos
.9026	ac 67 06	ldy $0667			ldy 	gxYPos
.9029	60		rts				rts
.902a					GCCopyPairToStore:
.902a	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.902d	8d 65 06	sta $0665			sta 	gxXPos
.9030	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9033	8d 66 06	sta $0666			sta 	gxXPos+1
.9036	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9039	8d 67 06	sta $0667			sta 	gxYPos
.903c	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.903d					BitmapCtrl:
.903d	b1 30		lda ($30),y			lda 	(codePtr),y
.903f	c8		iny				iny
.9040	a2 01		ldx #$01			ldx 	#1
.9042	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9044	f0 11		beq $9057			beq 	BitmapSwitch
.9046	ca		dex				dex
.9047	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9049	f0 0c		beq $9057			beq 	BitmapSwitch
.904b	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get the colour
.904e	5a		phy				phy
.904f	aa		tax				tax
.9050	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9052	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9055	7a		ply				ply
.9056	60		rts				rts
.9057					BitmapSwitch:
.9057	5a		phy				phy
.9058	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.905a	a9 02		lda #$02			lda 	#1*2
.905c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.905f	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9061	a0 00		ldy #$00			ldy 	#0
.9063	a2 ff		ldx #$ff			ldx 	#$FF
.9065	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9068	9c 64 06	stz $0664			stz 	gxFillSolid
.906b	9c 65 06	stz $0665			stz 	gxXPos
.906e	9c 66 06	stz $0666			stz 	gxXPos+1
.9071	9c 67 06	stz $0667			stz 	gxYPos
.9074	9c 6a 06	stz $066a			stz 	gxDrawScale
.9077	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9079	a2 00		ldx #$00			ldx 	#0
.907b	a0 00		ldy #$00			ldy 	#0
.907d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9080	7a		ply				ply
.9081	60		rts				rts
.9082					SpritesCtrl:
.9082	b1 30		lda ($30),y			lda 	(codePtr),y
.9084	c8		iny				iny
.9085	a2 01		ldx #$01			ldx 	#1
.9087	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9089	f0 08		beq $9093			beq 	SpriteSwitch
.908b	ca		dex				dex
.908c	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.908e	f0 03		beq $9093			beq 	SpriteSwitch
.9090	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.9093					SpriteSwitch:
.9093	5a		phy				phy
.9094	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9096	a9 04		lda #$04			lda 	#2*2
.9098	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.909b	7a		ply				ply
.909c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.909d					GfxCommand:
.909d	a2 00		ldx #$00			ldx 	#0
.909f	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; command
.90a2	20 fb ac	jsr $acfb			jsr 	CheckComma
.90a5	e8		inx				inx
.90a6	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger 		; X
.90a9	20 fb ac	jsr $acfb			jsr 	CheckComma
.90ac	e8		inx				inx
.90ad	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; Y
.90b0	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90b3	4a		lsr a				lsr 	a
.90b4	d0 16		bne $90cc			bne 	_GfxError
.90b6	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90b9	b0 11		bcs $90cc			bcs 	_GfxError 					; bit 7 should have been zero
.90bb	5a		phy				phy 								; save pos
.90bc	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90bf	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c2	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c5	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90c8	b0 02		bcs $90cc			bcs 	_GfxError
.90ca	7a		ply				ply 								; restore pos and exit.
.90cb	60		rts				rts
.90cc					_GfxError:
.90cc	4c de b2	jmp $b2de			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90cf					Command_GOSUB:
.90cf	a2 00		ldx #$00			ldx 	#0
.90d1	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90d4	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90d6	20 7f a5	jsr $a57f			jsr 	StackOpen 					; create frame
.90d9	20 c3 a5	jsr $a5c3			jsr 	STKSaveCodePosition 		; save current position
.90dc	4c f2 90	jmp $90f2			jmp 	GotoStackX
.90df					Command_RETURN:
.90df	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90e1	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90e3	20 ab a5	jsr $a5ab			jsr 	StackCheckFrame
.90e6	20 d4 a5	jsr $a5d4			jsr 	STKLoadCodePosition 		; restore code position
.90e9	20 9d a5	jsr $a59d			jsr 	StackClose
.90ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.90ed					GotoCommand:
.90ed	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.90ef	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.90f2					GotoStackX:
.90f2	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.90f5	48		pha				pha 								; it is slightly inefficient, just in cases.
.90f6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.90f9	fa		plx				plx
.90fa	20 2a a5	jsr $a52a			jsr 	MemorySearch 				; transfer to line number AX.
.90fd	90 05		bcc $9104			bcc 	_GotoError 					; not found, off end.
.90ff	d0 03		bne $9104			bne 	_GotoError 					; not found exactly
.9101	4c 68 94	jmp $9468			jmp 	RunNewLine 					; and go straight to new line code.
.9104					_GotoError:
.9104	a9 0d		lda #$0d		lda	#13
.9106	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9109					IfCommand:
.9109	a2 00		ldx #$00			ldx 	#0 							; If what.
.910b	20 0b a4	jsr $a40b			jsr 	EvaluateNumber
.910e	b1 30		lda ($30),y			lda 	(codePtr),y
.9110	c9 a4		cmp #$a4			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9112	d0 0a		bne $911e			bne 	_IFStructured
.9114	c8		iny				iny 								; consume THEN
.9115	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; is it zero
.9118	f0 01		beq $911b			beq 	_IfFail 					; if fail, go to next line
.911a	60		rts				rts 								; if THEN just continue
.911b					_IfFail:
.911b	4c cd 94	jmp $94cd			jmp 	EOLCommand
.911e					_IfStructured:
.911e	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; is it zero
.9121	d0 07		bne $912a			bne 	_IfExit 					; if not, then continue normally.
.9123	a9 b1		lda #$b1			lda 	#KWD_ELSE 					; look for else/endif
.9125	a2 a1		ldx #$a1			ldx 	#KWD_ENDIF
.9127	20 65 98	jsr $9865			jsr 	ScanForward 				; and run from there/
.912a					_IfExit:
.912a	60		rts				rts
.912b					ElseCode:
.912b	a9 a1		lda #$a1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.912d	aa		tax				tax 								; so just go to the structure exit
.912e	20 65 98	jsr $9865			jsr 	ScanForward
.9131	60		rts				rts
.9132					EndIf:
.9132	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9133					UnaryJoyX:
.9133	18		clc				clc
.9134	80 01		bra $9137			bra 	JoyMain
.9136					UnaryJoyY:
.9136	38		sec				sec
.9137					JoyMain:
.9137	fa		plx				plx 								; get pos
.9138	08		php				php 								; save carry (set for Y)
.9139	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; ignore the parameter
.913c	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.913f	20 d8 b4	jsr $b4d8			jsr 	EXTReadController 			; read the controller.
.9142	28		plp				plp
.9143	90 02		bcc $9147			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9145	4a		lsr a				lsr 	a
.9146	4a		lsr a				lsr 	a
.9147					_JMNoShift:
.9147	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9148	b0 0a		bcs $9154			bcs 	_JMIsRight
.914a	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.914b	b0 04		bcs $9151			bcs 	_JMIsLeft
.914d	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; zero result
.9150	60		rts				rts
.9151					_JMIsLeft:
.9151	4c 60 99	jmp $9960			jmp 	ReturnTrue
.9154					_JMIsRight:
.9154	a9 01		lda #$01			lda 	#1
.9156	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.9159	60		rts				rts
.915a					UnaryJoyB:
.915a	fa		plx				plx 								; get pos
.915b	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; ignore the parameter
.915e	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.9161	20 d8 b4	jsr $b4d8			jsr 	EXTReadController 			; read the controller.
.9164	4a		lsr a				lsr 	a
.9165	4a		lsr a				lsr 	a
.9166	4a		lsr a				lsr 	a
.9167	4a		lsr a				lsr 	a
.9168	29 01		and #$01			and 	#1
.916a	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.916d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.916e					LetCommand:
.916e	a2 00		ldx #$00			ldx 	#0
.9170	b1 30		lda ($30),y			lda 	(codePtr),y
.9172	c9 10		cmp #$10			cmp 	#KWD_AT
.9174	d0 16		bne $918c			bne 	_LCStandard
.9176	c8		iny				iny 								; skip equal
.9177	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm 				; get a number
.917a	20 11 9e	jsr $9e11			jsr 	Dereference 				; dereference it
.917d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9180	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9182	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9185	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9187	d0 10		bne $9199			bne 	_LCMain
.9189	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; was a reference before.
.918c					_LCStandard:
.918c	ad e4 9c	lda $9ce4			lda 	PrecedenceLevel+"*"			; precedence > this
.918f	20 fe 9c	jsr $9cfe			jsr 	EvaluateExpressionAtPrecedence
.9192	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.9195	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9197	f0 0e		beq $91a7			beq 	_LetGoProc 					; it's a procedure call.
.9199					_LCMain:
.9199	a9 3d		lda #$3d			lda 	#"=" 						; check =
.919b	20 03 ad	jsr $ad03			jsr 	CheckNextA
.919e	e8		inx				inx 								; RHS
.919f	20 02 a4	jsr $a402			jsr 	EvaluateValue
.91a2	ca		dex				dex
.91a3	20 aa 91	jsr $91aa			jsr 	AssignVariable
.91a6	60		rts				rts
.91a7					_LetGoProc:
.91a7	4c 43 93	jmp $9343			jmp 	CallProcedure
.91aa					AssignVariable:
.91aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91ad	48		pha				pha 								; save a copy
.91ae	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91b1	29 10		and #$10			and 	#NSBIsString
.91b3	d0 0b		bne $91c0			bne 	_ASError
.91b5	68		pla				pla 								; get back
.91b6	29 10		and #$10			and 	#NSBIsString 				; check type
.91b8	d0 03		bne $91bd			bne 	_ASString
.91ba	4c 39 9d	jmp $9d39			jmp 	AssignNumber
.91bd					_ASString:
.91bd	4c a7 9d	jmp $9da7			jmp 	AssignString
.91c0					_ASError:
.91c0	4c e3 b2	jmp $b2e3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91c3					Command_List:
.91c3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91c6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91c9	a9 ff		lda #$ff			lda 	#$FF
.91cb	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91ce	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91d1	b1 30		lda ($30),y			lda 	(codePtr),y
.91d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91d5	f0 1e		beq $91f5			beq 	_CLSecond
.91d7	20 53 92	jsr $9253			jsr 	CLIsDigit 					; if not digit, list all
.91da	b0 24		bcs $9200			bcs 	_CLStart
.91dc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91de	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.91e1	b1 30		lda ($30),y			lda 	(codePtr),y
.91e3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91e5	f0 0e		beq $91f5			beq 	_CLSecond 					; if so go get it
.91e7	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.91ea	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91ed	ad 14 04	lda $0414			lda 	NSMantissa1+4
.91f0	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91f3	80 0b		bra $9200			bra 	_CLStart
.91f5					_CLSecond:
.91f5	c8		iny				iny 								; consume comma
.91f6	20 53 92	jsr $9253			jsr 	CLIsDigit 					; digit found
.91f9	b0 05		bcs $9200			bcs 	_CLStart 					; if not, continue listing
.91fb	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.91fd	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger
.9200					_CLStart
.9200	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9202	85 30		sta $30				sta 	codePtr
.9204	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9206	85 31		sta $31				sta 	codePtr+1
.9208					_CLLoop:
.9208	20 d5 b4	jsr $b4d5			jsr 	EXTBreakCheck 				; break check
.920b	f0 30		beq $923d			beq 	_CLExit
.920d	b2 30		lda ($30)			lda 	(codePtr)
.920f	f0 2c		beq $923d			beq 	_CLExit
.9211	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9213	20 40 92	jsr $9240			jsr 	CLCompareLineNo
.9216	90 18		bcc $9230			bcc 	_CLNext
.9218	a2 07		ldx #$07			ldx 	#7
.921a	20 40 92	jsr $9240			jsr 	CLCompareLineNo
.921d	f0 02		beq $9221			beq 	_CLDoThisOne
.921f	b0 0f		bcs $9230			bcs 	_CLNext
.9221					_CLDoThisOne:
.9221	20 c1 96	jsr $96c1			jsr 	ListConvertLine 			; convert line into token Buffer
.9224	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9226	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9228	20 4c 99	jsr $994c			jsr 	PrintStringXA
.922b	a9 0d		lda #$0d			lda 	#13 						; new line
.922d	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.9230					_CLNext:
.9230	18		clc				clc
.9231	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9233	65 30		adc $30				adc 	codePtr
.9235	85 30		sta $30				sta 	codePtr
.9237	90 02		bcc $923b			bcc 	_CREExit
.9239	e6 31		inc $31				inc 	codePtr+1
.923b					_CREExit:
.923b	80 cb		bra $9208			bra 	_CLLoop
.923d					_CLExit:
.923d	4c 34 8b	jmp $8b34			jmp 	WarmStart
.9240					CLCompareLineNo:
.9240	38		sec				sec
.9241	a0 01		ldy #$01			ldy 	#1
.9243	b1 30		lda ($30),y			lda 	(codePtr),y
.9245	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9248	85 36		sta $36				sta 	zTemp0
.924a	c8		iny				iny
.924b	b1 30		lda ($30),y			lda 	(codePtr),y
.924d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9250	05 36		ora $36				ora 	zTemp0
.9252	60		rts				rts
.9253					CLIsDigit:
.9253	b1 30		lda ($30),y			lda 	(codePtr),y
.9255	c9 30		cmp #$30			cmp 	#"0"
.9257	90 03		bcc $925c			bcc	 	_CLIDExitFalse
.9259	c9 3a		cmp #$3a			cmp 	#"9"+1
.925b	60		rts				rts
.925c					_CLIDExitFalse:
.925c	38		sec				sec
.925d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.925e					Command_LOCAL:
.925e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9260	20 6c 92	jsr $926c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9263	b1 30		lda ($30),y			lda 	(codePtr),y
.9265	c8		iny				iny
.9266	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9268	f0 f4		beq $925e			beq 	Command_LOCAL
.926a	88		dey				dey 								; unpick pre-get
.926b	60		rts				rts
.926c					LocaliseNextTerm:
.926c	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm 				; evaluate the term
.926f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9272	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9274	f0 69		beq $92df			beq		_LNTError
.9276	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9279	85 36		sta $36				sta 	zTemp0
.927b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.927e	85 37		sta $37				sta  	zTemp0+1
.9280	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9283	29 10		and #$10			and 	#NSBIsString
.9285	d0 22		bne $92a9			bne 	_LNTPushString
.9287	5a		phy				phy
.9288	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.928a					_LNTPushNumLoop:
.928a	b1 36		lda ($36),y			lda		(zTemp0),y
.928c	20 5d a5	jsr $a55d			jsr 	StackPushByte
.928f	a9 00		lda #$00			lda 	#0
.9291	91 36		sta ($36),y			sta 	(zTemp0),y
.9293	c8		iny				iny
.9294	c0 05		cpy #$05			cpy 	#5
.9296	d0 f2		bne $928a			bne 	_LNTPushNumLoop
.9298	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.929a	20 5d a5	jsr $a55d			jsr 	StackPushByte
.929d	a5 37		lda $37				lda 	zTemp0+1
.929f	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92a2	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92a4	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92a7	7a		ply				ply
.92a8	60		rts				rts
.92a9					_LNTPushString:
.92a9	5a		phy				phy
.92aa	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92ac	85 38		sta $38				sta 	zTemp1
.92ae	a0 01		ldy #$01			ldy 	#1
.92b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b2	85 39		sta $39				sta 	zTemp1+1
.92b4	a0 00		ldy #$00			ldy 	#0 							; output string
.92b6	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92b8	f0 0a		beq $92c4			beq 	_LNTStringOut
.92ba					_LNTPushStrLoop:
.92ba	b1 38		lda ($38),y			lda 	(zTemp1),y
.92bc	f0 06		beq $92c4			beq 	_LNTStringOut
.92be	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92c1	c8		iny				iny
.92c2	80 f6		bra $92ba			bra 	_LNTPushStrLoop
.92c4					_LNTStringOut:
.92c4	98		tya				tya									; output length
.92c5	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92c8	a9 00		lda #$00			lda 	#0 							; clear original string.
.92ca	92 38		sta ($38)			sta 	(zTemp1)
.92cc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92cf	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92d2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92d5	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92d8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92da	20 5d a5	jsr $a55d			jsr 	StackPushByte
.92dd	7a		ply				ply
.92de	60		rts				rts
.92df					_LNTError:
.92df	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.ac9a					LocalPopValue:
.ac9a	20 76 a5	jsr $a576			jsr 	StackPopByte
.ac9d	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ac9f	d0 17		bne $acb8			bne 	_LPVString
.aca1	20 76 a5	jsr $a576			jsr 	StackPopByte 				; address
.aca4	85 37		sta $37				sta 	zTemp0+1
.aca6	20 76 a5	jsr $a576			jsr 	StackPopByte
.aca9	85 36		sta $36				sta 	zTemp0
.acab	5a		phy				phy
.acac	a0 04		ldy #$04			ldy 	#4 							; copy back
.acae					_LPVNumberCopy:
.acae	20 76 a5	jsr $a576			jsr 	StackPopByte
.acb1	91 36		sta ($36),y			sta 	(zTemp0),y
.acb3	88		dey				dey
.acb4	10 f8		bpl $acae			bpl 	_LPVNumberCopy
.acb6	7a		ply				ply 								; and complete
.acb7	60		rts				rts
.acb8					_LPVString:
.acb8	20 76 a5	jsr $a576			jsr 	StackPopByte 				; address of record => zTemp0
.acbb	85 37		sta $37				sta 	zTemp0+1
.acbd	20 76 a5	jsr $a576			jsr 	StackPopByte
.acc0	85 36		sta $36				sta 	zTemp0
.acc2	5a		phy				phy
.acc3	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.acc5	85 38		sta $38				sta 	zTemp1
.acc7	a0 01		ldy #$01			ldy 	#1
.acc9	b1 36		lda ($36),y			lda 	(zTemp0),y
.accb	85 39		sta $39				sta 	zTemp1+1
.accd	20 76 a5	jsr $a576			jsr 	StackPopByte 				; # to get => y
.acd0	a8		tay				tay
.acd1	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.acd3	f0 0e		beq $ace3			beq 	_LPVStringCopied
.acd5	a9 00		lda #$00			lda 	#0 							; NULL on end
.acd7	91 38		sta ($38),y			sta 	(zTemp1),y
.acd9					_LPVStringCopy:
.acd9	88		dey				dey
.acda	30 07		bmi $ace3			bmi 	_LPVStringCopied
.acdc	20 76 a5	jsr $a576			jsr 	StackPopByte
.acdf	91 38		sta ($38),y			sta 	(zTemp1),y
.ace1	80 f6		bra $acd9			bra 	_LPVStringCopy
.ace3					_LPVStringCopied:
.ace3	fa		plx				plx
.ace4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92e2					NewCommand:
.92e2	20 08 a5	jsr $a508			jsr 	MemoryNew
.92e5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.92e8	20 cd 8b	jsr $8bcd			jsr 	ClearCommand 				; clear everything.
.92eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.92ec					Command_Print:
.92ec	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.92ed					_CPLoop:
.92ed	08		php				php 								; save last action flag
.92ee	b1 30		lda ($30),y			lda 	(codePtr),y
.92f0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.92f2	f0 46		beq $933a			beq 	_CPExit
.92f4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.92f6	f0 42		beq $933a			beq 	_CPExit
.92f8	68		pla				pla 								; throw last action flag
.92f9	b1 30		lda ($30),y			lda 	(codePtr),y
.92fb	c8		iny				iny
.92fc	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.92fe	f0 37		beq $9337			beq 	_CPContinueWithSameLine
.9300	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9302	f0 2e		beq $9332			beq 	_CPTab
.9304	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9306	f0 26		beq $932e			beq 	_CPNewLine
.9308	88		dey				dey 								; undo the get.
.9309	a2 00		ldx #$00			ldx 	#0
.930b	20 02 a4	jsr $a402			jsr 	EvaluateValue 				; get a value into slot 0
.930e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9311	29 10		and #$10			and 	#NSBIsString
.9313	f0 0b		beq $9320			beq 	_CPNumber
.9315	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9318	ad 08 04	lda $0408			lda 	NSMantissa0
.931b	20 4c 99	jsr $994c			jsr 	PrintStringXA
.931e	80 cc		bra $92ec			bra 	Command_Print 				; loop round clearing carry so NL if end
.9320					_CPNumber:
.9320	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9322	20 d8 a2	jsr $a2d8			jsr 	ConvertNumberToString 		; convert to string
.9325	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9327	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9329	20 4c 99	jsr $994c			jsr 	PrintStringXA
.932c	80 be		bra $92ec			bra 	Command_Print 				; loop round clearing carry so NL if end
.932e					_CPNewLine:
.932e	a9 0d		lda #$0d			lda 	#13
.9330	80 02		bra $9334			bra 	_CPPrintChar
.9332					_CPTab:
.9332	a9 09		lda #$09			lda 	#9 							; print TAB
.9334					_CPPrintChar:
.9334	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.9337					_CPContinueWithSameLine:
.9337	38		sec				sec 								; loop round with carry set, which
.9338	80 b3		bra $92ed			bra 	_CPLoop 					; will inhibit final CR
.933a					_CPExit:
.933a	28		plp				plp 								; get last action flag
.933b	b0 05		bcs $9342			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.933d	a9 0d		lda #$0d			lda 	#13 						; print new line
.933f	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.9342					_CPExit2:
.9342	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9343					CallProcedure:
.9343	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9345	b1 30		lda ($30),y			lda 	(codePtr),y
.9347	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9349	f0 0c		beq $9357			beq 	_CPEndParam
.934b					_CPParamLoop:
.934b	20 fc 9c	jsr $9cfc			jsr 	EvaluateExpression 			; get parameter onto stack
.934e	e8		inx				inx 								; bump next stack
.934f	b1 30		lda ($30),y			lda 	(codePtr),y
.9351	c8		iny				iny
.9352	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9354	f0 f5		beq $934b			beq 	_CPParamLoop
.9356	88		dey				dey 								; unpick.
.9357					_CPEndParam:
.9357	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.935a	c8		iny				iny									; skip right bracket
.935b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.935d	20 7f a5	jsr $a57f			jsr 	StackOpen
.9360	20 c3 a5	jsr $a5c3			jsr 	STKSaveCodePosition 		; save loop position
.9363	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9366	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9368	ad 10 04	lda $0410			lda 	NSMantissa1
.936b	85 37		sta $37				sta 	zTemp0+1
.936d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.936f	b2 36		lda ($36)			lda 	(zTemp0)
.9371	85 30		sta $30				sta 	safePtr
.9373	b1 36		lda ($36),y			lda 	(zTemp0),y
.9375	85 31		sta $31				sta 	safePtr+1
.9377	c8		iny				iny
.9378	b1 36		lda ($36),y			lda 	(zTemp0),y
.937a	85 32		sta $32				sta 	safePtr+2
.937c	c8		iny				iny
.937d	b1 36		lda ($36),y			lda 	(zTemp0),y
.937f	85 33		sta $33				sta 	safePtr+3
.9381	c8		iny				iny 								; get Y offset -> Y
.9382	b1 36		lda ($36),y			lda 	(zTemp0),y
.9384	a8		tay				tay
.9385	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9387	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.938a	f0 13		beq $939f			beq 	_ParamExit 					; if so, exit.
.938c					_ParamExtract:
.938c	ca		dex				dex 								; put a local term on the level before
.938d	20 6c 92	jsr $926c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9390	20 aa 91	jsr $91aa			jsr 	AssignVariable 				; assign stacked value to the variable.
.9393	e8		inx				inx 								; advance to next parameter to do.
.9394	e8		inx				inx
.9395	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9398	f0 05		beq $939f			beq 	_ParamExit
.939a	20 fb ac	jsr $acfb			jsr 	CheckComma 					; comma seperating parameters
.939d	80 ed		bra $938c			bra 	_ParamExtract
.939f					_ParamExit:
.939f	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; check )
.93a2	60		rts				rts 								; and continue from here
.ace5					Command_ENDPROC:
.ace5	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ace7	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ace9	20 ab a5	jsr $a5ab			jsr 	StackCheckFrame
.acec	20 d4 a5	jsr $a5d4			jsr 	STKLoadCodePosition 		; restore code position
.acef	20 9d a5	jsr $a59d			jsr 	StackClose
.acf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93a3					Command_Read:
.93a3	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93a5	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm
.93a8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93ab	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93ad	f0 4a		beq $93f9			beq 	_CRSyntax 					; check reference (bit 0)
.93af	20 42 94	jsr $9442			jsr 	SwapDataCodePtrs 			; swap code and data
.93b2	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93b5	d0 20		bne $93d7			bne 	_CRContinueData
.93b7					_CRKeepSearching:
.93b7	a9 ae		lda #$ae			lda 	#KWD_DATA 					; scan for instruction
.93b9	aa		tax				tax
.93ba	20 65 98	jsr $9865			jsr 	ScanForward
.93bd	c9 ae		cmp #$ae			cmp 	#KWD_DATA 					; found data ?
.93bf	f0 16		beq $93d7			beq 	_CRHaveData 				; found it
.93c1	18		clc				clc
.93c2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93c4	65 30		adc $30				adc 	codePtr
.93c6	85 30		sta $30				sta 	codePtr
.93c8	90 02		bcc $93cc			bcc 	_CREExit
.93ca	e6 31		inc $31				inc 	codePtr+1
.93cc					_CREExit:
.93cc	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93ce	b2 30		lda ($30)			lda 	(codePtr)
.93d0	d0 e5		bne $93b7			bne 	_CRKeepSearching
.93d2	a9 0b		lda #$0b		lda	#11
.93d4	4c f3 98	jmp $98f3		jmp	ErrorHandler
.93d7					_CRHaveData:
.93d7					_CRContinueData:
.93d7	a2 01		ldx #$01			ldx 	#1
.93d9	20 02 a4	jsr $a402			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93dc	ca		dex				dex
.93dd	20 aa 91	jsr $91aa			jsr		AssignVariable 				; do the assignment
.93e0	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93e3	b1 30		lda ($30),y			lda 	(codePtr),y
.93e5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93e7	d0 04		bne $93ed			bne 	_CRSwapBack
.93e9	c8		iny				iny 								; consume comma
.93ea	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.93ed					_CRSwapBack:
.93ed	20 42 94	jsr $9442			jsr 	SwapDataCodePtrs			; swap them back.
.93f0	b1 30		lda ($30),y			lda 	(codePtr),y
.93f2	c8		iny				iny
.93f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93f5	f0 ac		beq $93a3			beq 	Command_Read 				; if so go round again.
.93f7	88		dey				dey 								; unpick get.
.93f8	60		rts				rts
.93f9					_CRSyntax:
.93f9	4c d9 b2	jmp $b2d9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.93fc					RemCommand:
.93fc	b1 30		lda ($30),y			lda 	(codePtr),y
.93fe	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9400	d0 06		bne $9408			bne 	_RMExit
.9402	c8		iny				iny
.9403	98		tya				tya
.9404	38		sec				sec
.9405	71 30		adc ($30),y			adc 	(codePtr),y
.9407	a8		tay				tay
.9408					_RMExit:
.9408	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9409					Command_REPEAT:
.9409	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.940b	20 7f a5	jsr $a57f			jsr 	StackOpen
.940e	20 c3 a5	jsr $a5c3			jsr 	STKSaveCodePosition 		; save loop position
.9411	60		rts				rts
.9412					Command_UNTIL:
.9412	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9414	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9416	20 ab a5	jsr $a5ab			jsr 	StackCheckFrame
.9419	a2 00		ldx #$00			ldx 	#0
.941b	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; work out the number
.941e	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; check if zero
.9421	f0 04		beq $9427			beq 	_CULoopBack 				; if so keep looping
.9423	20 9d a5	jsr $a59d			jsr 	StackClose		 			; return
.9426	60		rts				rts
.9427					_CULoopBack:
.9427	20 d4 a5	jsr $a5d4			jsr 	STKLoadCodePosition 		; loop back
.942a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.942b					Command_Restore:
.942b	20 42 94	jsr $9442			jsr 	SwapDataCodePtrs 			; swap code and data
.942e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9430	85 30		sta $30				sta 	codePtr
.9432	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9434	85 31		sta $31				sta 	codePtr+1
.9436	20 42 94	jsr $9442			jsr 	SwapDataCodePtrs 			; put them back
.9439	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.943b	8d 9b 04	sta $049b			sta 	dataPointer+4
.943e	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9441	60		rts				rts
.9442					SwapDataCodePtrs:
.9442	da		phx				phx
.9443	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9445					_SDCPLoop:
.9445	b5 30		lda $30,x			lda 	safePtr,x
.9447	48		pha				pha
.9448	bd 97 04	lda $0497,x			lda 	dataPointer,x
.944b	95 30		sta $30,x			sta 	safePtr,x
.944d	68		pla				pla
.944e	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9451	ca		dex				dex
.9452	10 f1		bpl $9445			bpl 	_SDCPLoop
.9454	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9457	8c 9b 04	sty $049b			sty 	dataPointer+4
.945a	a8		tay				tay
.945b	fa		plx				plx
.945c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.945d					CommandRUN:
.945d	20 cd 8b	jsr $8bcd			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9460	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9462	85 30		sta $30				sta 	codePtr
.9464	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9466	85 31		sta $31				sta 	codePtr+1
.9468					RUNNewLine:
.9468	b2 30		lda ($30)			lda 	(codePtr)
.946a	f0 5e		beq $94ca			beq 	CRNoProgram         		; no then END.
.946c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.946e	9a		txs				txs
.946f					RUNCodePointerLine:
.946f	a0 02		ldy #$02			ldy 	#2 							; start of program
.9471					_CRIncMainLoop:
.9471	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9474	d0 05		bne $947b			bne 	_CRNoBreakCheck
.9476	20 d5 b4	jsr $b4d5			jsr 	EXTBreakCheck 				; break check
.9479	f0 4a		beq $94c5			beq 	_CRBreak
.947b					_CRNoBreakCheck:
.947b	c8		iny				iny
.947c					_CRMainLoop:
.947c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.947f	b1 30		lda ($30),y			lda 	(codePtr),y
.9481	10 10		bpl $9493			bpl 	_CRNotKeyword
.9483	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9485	b0 04		bcs $948b			bcs 	_CRIsKeyword
.9487	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9489	b0 34		bcs $94bf			bcs		_CRSyntaxError
.948b					_CRIsKeyword:
.948b	c8		iny				iny 								; consume command
.948c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.948d	aa		tax				tax 								; put in X for vector jump
.948e	20 c2 94	jsr $94c2			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9491	80 e9		bra $947c			bra 	_CRMainLoop 				; and loop round
.9493					_CRNotKeyword:
.9493	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9495	f0 da		beq $9471			beq 	_CRIncMainLoop
.9497	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9499	90 05		bcc $94a0			bcc 	_CRNotVariable
.949b					_CRGoLet:
.949b	20 6e 91	jsr $916e			jsr 	LetCommand
.949e	80 dc		bra $947c			bra 	_CRMainLoop
.94a0					_CRNotVariable:
.94a0	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94a2	f0 f7		beq $949b			beq 	_CRGoLet
.94a4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94a6	f0 f3		beq $949b			beq 	_CRGoLet
.94a8	c9 21		cmp #$21			cmp 	#KWD_PLING
.94aa	f0 ef		beq $949b			beq 	_CRGoLet
.94ac	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94ae	f0 09		beq $94b9			beq 	_CRGoRem
.94b0	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94b2	d0 0b		bne $94bf			bne 	_CRSyntaxError
.94b4	20 6d 8a	jsr $8a6d			jsr 	LabelHere
.94b7	80 c3		bra $947c			bra 	_CRMainLoop
.94b9					_CRGoRem:
.94b9	c8		iny				iny
.94ba	20 fc 93	jsr $93fc			jsr 	RemCommand
.94bd	80 bd		bra $947c			bra 	_CRMainLoop
.94bf					_CRSyntaxError:
.94bf	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.94c2					_CRCallVector0:
.94c2	7c 6e 95	jmp ($956e,x)			jmp 	(VectorSet0,x)
.94c5					_CRBreak:
.94c5	a9 01		lda #$01		lda	#1
.94c7	4c f3 98	jmp $98f3		jmp	ErrorHandler
.94ca					CRNoProgram:
.94ca	4c f0 8c	jmp $8cf0			jmp 	EndCommand
.94cd					EOLCommand:
.94cd	18		clc				clc
.94ce	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94d0	65 30		adc $30				adc 	codePtr
.94d2	85 30		sta $30				sta 	codePtr
.94d4	90 02		bcc $94d8			bcc 	_CREExit
.94d6	e6 31		inc $31				inc 	codePtr+1
.94d8					_CREExit:
.94d8	80 8e		bra $9468			bra 	RunNewLine
.94da					Shift1Command:
.94da	b1 30		lda ($30),y			lda 	(codePtr),y
.94dc	c8		iny				iny
.94dd	0a		asl a				asl 	a
.94de	aa		tax				tax
.94df	7c fe 95	jmp ($95fe,x)			jmp 	(VectorSet1,x)
.94e2					Shift2Command:
.94e2	b1 30		lda ($30),y			lda 	(codePtr),y
.94e4	c8		iny				iny
.94e5	0a		asl a				asl 	a
.94e6	aa		tax				tax
.94e7	7c 18 96	jmp ($9618,x)			jmp 	(VectorSet2,x)
.94ea					Unused1:
.94ea					Unused2:
.94ea					Unused3:
.94ea					Unused4:
.94ea	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
>94ed							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94ee					VectorSetPunc:
>94ee	9d 9a					.word	ShiftLeft                        ; $00 <<
>94f0	97 99					.word	BinaryCompareLessEqual           ; $01 <=
>94f2	8d 99					.word	BinaryCompareNotEqual            ; $02 <>
>94f4	d9 b2					.word	SyntaxError                      ; $03 !!3
>94f6	d9 b2					.word	SyntaxError                      ; $04 ><
>94f8	a1 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>94fa	a0 9a					.word	ShiftRight                       ; $06 >>
>94fc	d9 b2					.word	SyntaxError                      ; $07 !!7
>94fe	d9 b2					.word	SyntaxError                      ; $08 !!8
>9500	d9 b2					.word	SyntaxError                      ; $09 !!9
>9502	d9 b2					.word	SyntaxError                      ; $0a !!10
>9504	d9 b2					.word	SyntaxError                      ; $0b !!11
>9506	d9 b2					.word	SyntaxError                      ; $0c !!12
>9508	d9 b2					.word	SyntaxError                      ; $0d !!13
>950a	d9 b2					.word	SyntaxError                      ; $0e !!14
>950c	d9 b2					.word	SyntaxError                      ; $0f !!15
>950e	d9 b2					.word	SyntaxError                      ; $10 @
>9510	d9 b2					.word	SyntaxError                      ; $11 !!17
>9512	d9 b2					.word	SyntaxError                      ; $12 !!18
>9514	d9 b2					.word	SyntaxError                      ; $13 [
>9516	0c ad					.word	IntegerDivide                    ; $14 \
>9518	d9 b2					.word	SyntaxError                      ; $15 ]
>951a	26 9c					.word	EorInteger                       ; $16 ^
>951c	d9 b2					.word	SyntaxError                      ; $17 _
>951e	d9 b2					.word	SyntaxError                      ; $18 `
>9520	d9 b2					.word	SyntaxError                      ; $19 !!25
>9522	d9 b2					.word	SyntaxError                      ; $1a !!26
>9524	d9 b2					.word	SyntaxError                      ; $1b {
>9526	e0 9b					.word	OraInteger                       ; $1c |
>9528	d9 b2					.word	SyntaxError                      ; $1d }
>952a	d9 b2					.word	SyntaxError                      ; $1e ~
>952c	d9 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>952e	d9 b2					.word	SyntaxError                      ; $20
>9530	6c 9c					.word	WordIndirect                     ; $21 !
>9532	d9 b2					.word	SyntaxError                      ; $22 "
>9534	d9 b2					.word	SyntaxError                      ; $23 #
>9536	d9 b2					.word	SyntaxError                      ; $24 $
>9538	59 ad					.word	IntegerModulus                   ; $25 %
>953a	9a 9b					.word	AndInteger                       ; $26 &
>953c	d9 b2					.word	SyntaxError                      ; $27 '
>953e	d9 b2					.word	SyntaxError                      ; $28 (
>9540	d9 b2					.word	SyntaxError                      ; $29 )
>9542	ce ad					.word	MulInteger                       ; $2a *
>9544	34 9b					.word	AddInteger                       ; $2b +
>9546	d9 b2					.word	SyntaxError                      ; $2c ,
>9548	6f 9b					.word	SubInteger                       ; $2d -
>954a	d9 b2					.word	SyntaxError                      ; $2e .
>954c	65 af					.word	FDivideCommand                   ; $2f /
>954e	d9 b2					.word	SyntaxError                      ; $30 0
>9550	d9 b2					.word	SyntaxError                      ; $31 1
>9552	d9 b2					.word	SyntaxError                      ; $32 2
>9554	d9 b2					.word	SyntaxError                      ; $33 3
>9556	d9 b2					.word	SyntaxError                      ; $34 4
>9558	d9 b2					.word	SyntaxError                      ; $35 5
>955a	d9 b2					.word	SyntaxError                      ; $36 6
>955c	d9 b2					.word	SyntaxError                      ; $37 7
>955e	d9 b2					.word	SyntaxError                      ; $38 8
>9560	d9 b2					.word	SyntaxError                      ; $39 9
>9562	d9 b2					.word	SyntaxError                      ; $3a :
>9564	d9 b2					.word	SyntaxError                      ; $3b ;
>9566	79 99					.word	BinaryCompareLess                ; $3c <
>9568	6f 99					.word	BinaryCompareEqual               ; $3d =
>956a	83 99					.word	BinaryCompareGreater             ; $3e >
>956c	93 9c					.word	ByteIndirect                     ; $3f ?
.956e					VectorSet0:
>956e	cd 94					.word	EOLCommand                       ; $80 !0:EOF
>9570	da 94					.word	Shift1Command                    ; $81 !1:SH1
>9572	e2 94					.word	Shift2Command                    ; $82 !2:SH2
>9574	ab b0					.word	AbsUnary                         ; $83 ABS(
>9576	63 a1					.word	AllocUnary                       ; $84 ALLOC(
>9578	bb b0					.word	AscUnary                         ; $85 ASC(
>957a	89 a2					.word	ChrUnary                         ; $86 CHR$(
>957c	f3 8c					.word	UnaryEvent                       ; $87 EVENT(
>957e	6b 99					.word	UnaryFalse                       ; $88 FALSE
>9580	c8 b0					.word	FracUnary                        ; $89 FRAC(
>9582	de b0					.word	IntUnary                         ; $8a INT(
>9584	34 b1					.word	IsValUnary                       ; $8b ISVAL(
>9586	5a 91					.word	UnaryJoyB                        ; $8c JOYB(
>9588	33 91					.word	UnaryJoyX                        ; $8d JOYX(
>958a	36 91					.word	UnaryJoyY                        ; $8e JOYY(
>958c	63 a3					.word	Unary_Left                       ; $8f LEFT$(
>958e	f0 b0					.word	LenUnary                         ; $90 LEN(
>9590	8d a3					.word	Unary_Mid                        ; $91 MID$(
>9592	d3 a1					.word	Unary_Not                        ; $92 NOT(
>9594	e9 a1					.word	Unary_Random                     ; $93 RANDOM(
>9596	73 a3					.word	Unary_Right                      ; $94 RIGHT$(
>9598	08 a2					.word	Unary_Rnd                        ; $95 RND(
>959a	0a b1					.word	SgnUnary                         ; $96 SGN(
>959c	9b a2					.word	SpcUnary                         ; $97 SPC(
>959e	b6 a2					.word	Unary_Str                        ; $98 STR$(
>95a0	a5 96					.word	UnaryTimer                       ; $99 TIMER(
>95a2	5f 99					.word	UnaryTrue                        ; $9a TRUE
>95a4	2a b1					.word	ValUnary                         ; $9b VAL(
>95a6	5c 8d					.word	ForCommand                       ; $9c FOR
>95a8	09 91					.word	IfCommand                        ; $9d IF
>95aa	ea 94					.word	Unused1                          ; $9e PROC
>95ac	09 94					.word	Command_REPEAT                   ; $9f REPEAT
>95ae	c4 98					.word	Command_WHILE                    ; $a0 WHILE
>95b0	32 91					.word	EndIf                            ; $a1 ENDIF
>95b2	e5 ac					.word	Command_ENDPROC                  ; $a2 ENDPROC
>95b4	16 8e					.word	NextCommand                      ; $a3 NEXT
>95b6	ea 94					.word	Unused4                          ; $a4 THEN
>95b8	12 94					.word	Command_UNTIL                    ; $a5 UNTIL
>95ba	e5 98					.word	Command_WEND                     ; $a6 WEND
>95bc	d9 b2					.word	SyntaxError                      ; $a7 BY
>95be	93 8b					.word	CallCommand                      ; $a8 CALL
>95c0	73 8e					.word	CircleCommand                    ; $a9 CIRCLE
>95c2	cd 8b					.word	ClearCommand                     ; $aa CLEAR
>95c4	25 8c					.word	ClearScreen                      ; $ab CLS
>95c6	d9 b2					.word	SyntaxError                      ; $ac COLOR
>95c8	d9 b2					.word	SyntaxError                      ; $ad COLOUR
>95ca	2b 8c					.word	Command_Data                     ; $ae DATA
>95cc	33 8c					.word	DimCommand                       ; $af DIM
>95ce	ea 94					.word	Unused3                          ; $b0 DOWNTO
>95d0	2b 91					.word	ElseCode                         ; $b1 ELSE
>95d2	d9 b2					.word	SyntaxError                      ; $b2 FROM
>95d4	9d 90					.word	GfxCommand                       ; $b3 GFX
>95d6	cf 90					.word	Command_GOSUB                    ; $b4 GOSUB
>95d8	ed 90					.word	GotoCommand                      ; $b5 GOTO
>95da	d9 b2					.word	SyntaxError                      ; $b6 HERE
>95dc	9d 8e					.word	ImageCommand                     ; $b7 IMAGE
>95de	6e 91					.word	LetCommand                       ; $b8 LET
>95e0	f2 8e					.word	LineCommand                      ; $b9 LINE
>95e2	5e 92					.word	Command_LOCAL                    ; $ba LOCAL
>95e4	d9 b2					.word	SyntaxError                      ; $bb OFF
>95e6	d9 b2					.word	SyntaxError                      ; $bc ON
>95e8	d9 b2					.word	SyntaxError                      ; $bd OUTLINE
>95ea	eb 8e					.word	PlotCommand                      ; $be PLOT
>95ec	ec 92					.word	Command_Print                    ; $bf PRINT
>95ee	a3 93					.word	Command_Read                     ; $c0 READ
>95f0	6f 8e					.word	RectangleCommand                 ; $c1 RECT
>95f2	fc 93					.word	RemCommand                       ; $c2 REM
>95f4	df 90					.word	Command_RETURN                   ; $c3 RETURN
>95f6	d9 b2					.word	SyntaxError                      ; $c4 SOLID
>95f8	7e 8e					.word	SpriteCommand                    ; $c5 SPRITE
>95fa	ba 8e					.word	TextCommand                      ; $c6 TEXT
>95fc	ea 94					.word	Unused2                          ; $c7 TO
.95fe					VectorSet1:
>95fe	d9 b2					.word	SyntaxError                      ; $80 !0:EOF
>9600	d9 b2					.word	SyntaxError                      ; $81 !1:SH1
>9602	d9 b2					.word	SyntaxError                      ; $82 !2:SH2
>9604	64 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9606	83 8b					.word	AssertCommand                    ; $84 ASSERT
>9608	3d 90					.word	BitmapCtrl                       ; $85 BITMAP
>960a	f0 8c					.word	EndCommand                       ; $86 END
>960c	c3 91					.word	Command_List                     ; $87 LIST
>960e	e2 92					.word	NewCommand                       ; $88 NEW
>9610	2b 94					.word	Command_Restore                  ; $89 RESTORE
>9612	5d 94					.word	CommandRUN                       ; $8a RUN
>9614	82 90					.word	SpritesCtrl                      ; $8b SPRITES
>9616	a0 96					.word	StopCommand                      ; $8c STOP
.9618					VectorSet2:
>9618	d9 b2					.word	SyntaxError                      ; $80 !0:EOF
>961a	d9 b2					.word	SyntaxError                      ; $81 !1:SH1
>961c	d9 b2					.word	SyntaxError                      ; $82 !2:SH2
>961e	98 b1					.word	Assemble_adc                     ; $83 ADC
>9620	90 b1					.word	Assemble_and                     ; $84 AND
>9622	ac b1					.word	Assemble_asl                     ; $85 ASL
>9624	16 b2					.word	Assemble_bcc                     ; $86 BCC
>9626	1a b2					.word	Assemble_bcs                     ; $87 BCS
>9628	22 b2					.word	Assemble_beq                     ; $88 BEQ
>962a	d9 b1					.word	Assemble_bit                     ; $89 BIT
>962c	0a b2					.word	Assemble_bmi                     ; $8a BMI
>962e	1e b2					.word	Assemble_bne                     ; $8b BNE
>9630	06 b2					.word	Assemble_bpl                     ; $8c BPL
>9632	26 b2					.word	Assemble_bra                     ; $8d BRA
>9634	2a b2					.word	Assemble_brk                     ; $8e BRK
>9636	0e b2					.word	Assemble_bvc                     ; $8f BVC
>9638	12 b2					.word	Assemble_bvs                     ; $90 BVS
>963a	32 b2					.word	Assemble_clc                     ; $91 CLC
>963c	86 b2					.word	Assemble_cld                     ; $92 CLD
>963e	46 b2					.word	Assemble_cli                     ; $93 CLI
>9640	76 b2					.word	Assemble_clv                     ; $94 CLV
>9642	a4 b1					.word	Assemble_cmp                     ; $95 CMP
>9644	ed b1					.word	Assemble_cpx                     ; $96 CPX
>9646	e8 b1					.word	Assemble_cpy                     ; $97 CPY
>9648	ca b1					.word	Assemble_dec                     ; $98 DEC
>964a	82 b2					.word	Assemble_dex                     ; $99 DEX
>964c	5e b2					.word	Assemble_dey                     ; $9a DEY
>964e	94 b1					.word	Assemble_eor                     ; $9b EOR
>9650	cf b1					.word	Assemble_inc                     ; $9c INC
>9652	92 b2					.word	Assemble_inx                     ; $9d INX
>9654	7e b2					.word	Assemble_iny                     ; $9e INY
>9656	01 b2					.word	Assemble_jmp                     ; $9f JMP
>9658	fc b1					.word	Assemble_jsr                     ; $a0 JSR
>965a	a0 b1					.word	Assemble_lda                     ; $a1 LDA
>965c	c5 b1					.word	Assemble_ldx                     ; $a2 LDX
>965e	e3 b1					.word	Assemble_ldy                     ; $a3 LDY
>9660	b6 b1					.word	Assemble_lsr                     ; $a4 LSR
>9662	96 b2					.word	Assemble_nop                     ; $a5 NOP
>9664	8c b1					.word	Assemble_ora                     ; $a6 ORA
>9666	42 b2					.word	Assemble_pha                     ; $a7 PHA
>9668	2e b2					.word	Assemble_php                     ; $a8 PHP
>966a	8a b2					.word	Assemble_phx                     ; $a9 PHX
>966c	4a b2					.word	Assemble_phy                     ; $aa PHY
>966e	52 b2					.word	Assemble_pla                     ; $ab PLA
>9670	36 b2					.word	Assemble_plp                     ; $ac PLP
>9672	9e b2					.word	Assemble_plx                     ; $ad PLX
>9674	5a b2					.word	Assemble_ply                     ; $ae PLY
>9676	b1 b1					.word	Assemble_rol                     ; $af ROL
>9678	bb b1					.word	Assemble_ror                     ; $b0 ROR
>967a	3e b2					.word	Assemble_rti                     ; $b1 RTI
>967c	4e b2					.word	Assemble_rts                     ; $b2 RTS
>967e	a8 b1					.word	Assemble_sbc                     ; $b3 SBC
>9680	3a b2					.word	Assemble_sec                     ; $b4 SEC
>9682	9a b2					.word	Assemble_sed                     ; $b5 SED
>9684	56 b2					.word	Assemble_sei                     ; $b6 SEI
>9686	9c b1					.word	Assemble_sta                     ; $b7 STA
>9688	8e b2					.word	Assemble_stp                     ; $b8 STP
>968a	c0 b1					.word	Assemble_stx                     ; $b9 STX
>968c	de b1					.word	Assemble_sty                     ; $ba STY
>968e	d4 b1					.word	Assemble_stz                     ; $bb STZ
>9690	72 b2					.word	Assemble_tax                     ; $bc TAX
>9692	6e b2					.word	Assemble_tay                     ; $bd TAY
>9694	f7 b1					.word	Assemble_trb                     ; $be TRB
>9696	f2 b1					.word	Assemble_tsb                     ; $bf TSB
>9698	7a b2					.word	Assemble_tsx                     ; $c0 TSX
>969a	62 b2					.word	Assemble_txa                     ; $c1 TXA
>969c	6a b2					.word	Assemble_txs                     ; $c2 TXS
>969e	66 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96a0					StopCommand:
.96a0	a9 08		lda #$08		lda	#8
.96a2	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96a5					UnaryTimer:
.96a5	fa		plx				plx
.96a6	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.96a9					TimerToStackX:
.96a9	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; zero result
.96ac	64 01		stz $01				stz 	1 							; access I/O
.96ae	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96b1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96b4	ad 5a d6	lda $d65a			lda 	$D65A
.96b7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96ba	ad 5b d6	lda $d65b			lda 	$D65B
.96bd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96c1					ListConvertLine:
.96c1	9c 9d 04	stz $049d			stz 	tbOffset
.96c4	9c a9 04	stz $04a9			stz 	tokenBuffer
.96c7	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96c9	b1 30		lda ($30),y			lda 	(codePtr),y
.96cb	aa		tax				tax
.96cc	88		dey				dey
.96cd	b1 30		lda ($30),y			lda 	(codePtr),y
.96cf	20 4f ae	jsr $ae4f			jsr 	ConvertInt16
.96d2	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96d4	86 37		stx $37				stx 	zTemp0+1
.96d6	a0 00		ldy #$00			ldy 	#0
.96d8					_LCCopyNumber:
.96d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96da	20 da 97	jsr $97da			jsr 	LCLWrite
.96dd	c8		iny				iny
.96de	b1 36		lda ($36),y			lda 	(zTemp0),y
.96e0	d0 f6		bne $96d8			bne 	_LCCopyNumber
.96e2					_LCPadOut:
.96e2	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96e4	20 da 97	jsr $97da			jsr 	LCLWrite
.96e7	ad 9d 04	lda $049d			lda 	tbOffset
.96ea	c9 06		cmp #$06			cmp 	#6
.96ec	d0 f4		bne $96e2			bne 	_LCPadOut
.96ee	a0 03		ldy #$03			ldy 	#3 							; start position.
.96f0					_LCMainLoop:
.96f0	b1 30		lda ($30),y			lda 	(codePtr),y
.96f2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.96f4	f0 17		beq $970d			beq 	_LCExit
.96f6	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.96f8	90 14		bcc $970e			bcc 	_LCDoubles
.96fa	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.96fc	90 20		bcc $971e			bcc 	_LCShiftPunc
.96fe	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9700	90 2b		bcc $972d			bcc 	_LCPunctuation
.9702	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9704	90 2d		bcc $9733			bcc 	_LCIdentifiers
.9706	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9708	90 49		bcc $9753			bcc 	_LCTokens
.970a	4c ae 97	jmp $97ae			jmp 	_LCData 					; 254-5 are data objects
.970d					_LCExit:
.970d	60		rts				rts
.970e					_LCDoubles:
.970e	48		pha				pha
.970f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9710	29 02		and #$02			and 	#2
.9712	09 3c		ora #$3c			ora 	#60 						; make < >
.9714	20 da 97	jsr $97da			jsr 	LCLWrite
.9717	68		pla				pla 								; restore, do lower bit
.9718	29 03		and #$03			and 	#3
.971a	09 3c		ora #$3c			ora 	#60
.971c	80 0f		bra $972d			bra		_LCPunctuation 				; print, increment, loop
.971e					_LCShiftPunc:
.971e	aa		tax				tax 								; save in X
.971f	29 07		and #$07			and 	#7 							; lower 3 bits
.9721	f0 02		beq $9725			beq 	_LCNoAdd
.9723	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9725					_LCNoAdd:
.9725	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9727	90 02		bcc $972b			bcc 	_LCNoAdd2
.9729	09 20		ora #$20			ora 	#32 						; adds $20
.972b					_LCNoAdd2:
.972b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.972d					_LCPunctuation:
.972d	c8		iny				iny 								; consume character
.972e	20 da 97	jsr $97da			jsr 	LCLWrite 					; write it out.
.9731	80 bd		bra $96f0			bra 	_LCMainLoop 				; go round again.
.9733					_LCIdentifiers:
.9733	18		clc				clc 								; convert to physical address
.9734	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9736	85 37		sta $37				sta 	zTemp0+1
.9738	c8		iny				iny
.9739	b1 30		lda ($30),y			lda 	(codePtr),y
.973b	85 36		sta $36				sta 	zTemp0
.973d	c8		iny				iny
.973e	5a		phy				phy 								; save position
.973f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9741					_LCOutIdentifier:
.9741	c8		iny				iny
.9742	b1 36		lda ($36),y			lda 	(zTemp0),y
.9744	29 7f		and #$7f			and 	#$7F
.9746	20 08 98	jsr $9808			jsr 	LCLLowerCase
.9749	20 da 97	jsr $97da			jsr 	LCLWrite
.974c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.974e	10 f1		bpl $9741			bpl 	_LCOutIdentifier
.9750	7a		ply				ply 								; restore position
.9751	80 9d		bra $96f0			bra 	_LCMainLoop
.9753					_LCTokens:
.9753	aa		tax				tax 								; token in X
.9754	a9 9f		lda #$9f			lda 	#((KeywordSet2) & $FF)
.9756	85 36		sta $36				sta 	0+zTemp0
.9758	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.975a	85 37		sta $37				sta 	1+zTemp0
.975c	e0 82		cpx #$82			cpx 	#$82
.975e	f0 16		beq $9776			beq 	_LCUseShift
.9760	a9 51		lda #$51			lda 	#((KeywordSet1) & $FF)
.9762	85 36		sta $36				sta 	0+zTemp0
.9764	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.9766	85 37		sta $37				sta 	1+zTemp0
.9768	e0 81		cpx #$81			cpx 	#$81
.976a	f0 0a		beq $9776			beq 	_LCUseShift
.976c	a9 87		lda #$87			lda 	#((KeywordSet0) & $FF)
.976e	85 36		sta $36				sta 	0+zTemp0
.9770	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.9772	85 37		sta $37				sta 	1+zTemp0
.9774	80 01		bra $9777			bra 	_LCNoShift
.9776					_LCUseShift:
.9776	c8		iny				iny
.9777					_LCNoShift:
.9777	20 e9 97	jsr $97e9			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.977a	b1 30		lda ($30),y			lda 	(codePtr),y
.977c	aa		tax				tax 								; into X
.977d					_LCFindText:
.977d	ca		dex				dex
.977e	10 0e		bpl $978e			bpl 	_LCFoundText 				; found text.
.9780	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9782	1a		inc a				inc 	a 							; one extra for size
.9783	38		sec				sec 								; one extra for checksum
.9784	65 36		adc $36				adc 	zTemp0 						; go to next token
.9786	85 36		sta $36				sta 	zTemp0
.9788	90 f3		bcc $977d			bcc 	_LCFindText
.978a	e6 37		inc $37				inc 	zTemp0+1
.978c	80 ef		bra $977d			bra 	_LCFindText
.978e					_LCFoundText:
.978e	5a		phy				phy 								; save List position
.978f	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9791	aa		tax				tax
.9792	a0 02		ldy #$02			ldy 	#2
.9794					_LCCopyToken:
.9794	b1 36		lda ($36),y			lda 	(zTemp0),y
.9796	20 08 98	jsr $9808			jsr 	LCLLowerCase
.9799	20 da 97	jsr $97da			jsr 	LCLWrite
.979c	c8		iny				iny
.979d	ca		dex				dex
.979e	d0 f4		bne $9794			bne 	_LCCopyToken
.97a0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97a2	f0 05		beq $97a9			beq 	_LCNoSpace
.97a4	a9 20		lda #$20			lda 	#' '
.97a6	20 da 97	jsr $97da			jsr 	LCLWrite
.97a9					_LCNoSpace:
.97a9	7a		ply				ply 								; restore position.
.97aa	c8		iny				iny 								; consume token
.97ab	4c f0 96	jmp $96f0			jmp 	_LCMainLoop 				; and go around again.
.97ae					_LCData:
.97ae	48		pha				pha 								; save type $FE/$FF
.97af	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97b1	c9 fe		cmp #$fe			cmp 	#$FE
.97b3	f0 02		beq $97b7			beq 	_LCHaveOpener
.97b5	a2 22		ldx #$22			ldx 	#'"'
.97b7					_LCHaveOpener:
.97b7	8a		txa				txa 								; output prefix (# or ")
.97b8	20 da 97	jsr $97da			jsr 	LCLWrite
.97bb	c8		iny				iny 								; get count
.97bc	b1 30		lda ($30),y			lda 	(codePtr),y
.97be	aa		tax				tax
.97bf	c8		iny				iny 								; point at first character
.97c0					_LCOutData:
.97c0	b1 30		lda ($30),y			lda 	(codePtr),y
.97c2	c9 00		cmp #$00			cmp 	#0
.97c4	f0 03		beq $97c9			beq 	_LCNoPrint
.97c6	20 da 97	jsr $97da			jsr 	LCLWrite
.97c9					_LCNoPrint:
.97c9	c8		iny				iny
.97ca	ca		dex				dex
.97cb	d0 f3		bne $97c0			bne 	_LCOutData
.97cd	68		pla				pla 								; closing " required ?
.97ce	c9 ff		cmp #$ff			cmp 	#$FF
.97d0	d0 05		bne $97d7			bne 	_LCNoQuote
.97d2	a9 22		lda #$22			lda 	#'"'
.97d4	20 da 97	jsr $97da			jsr 	LCLWrite
.97d7					_LCNoQuote:
.97d7	4c f0 96	jmp $96f0			jmp 	_LCMainLoop
.97da					LCLWrite:
.97da	da		phx				phx
.97db	ae 9d 04	ldx $049d			ldx 	tbOffset
.97de	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97e1	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97e4	ee 9d 04	inc $049d			inc 	tbOffset
.97e7	fa		plx				plx
.97e8	60		rts				rts
.97e9					LCCheckSpaceRequired:
.97e9	ae 9d 04	ldx $049d			ldx 	tbOffset
.97ec	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.97ef	20 08 98	jsr $9808			jsr 	LCLLowerCase 				; saves a little effort
.97f2	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.97f4	90 11		bcc $9807			bcc 	_LCCSRExit
.97f6	c9 3a		cmp #$3a			cmp 	#"9"+1
.97f8	90 08		bcc $9802			bcc 	_LCCSRSpace
.97fa	c9 61		cmp #$61			cmp 	#"a"
.97fc	90 09		bcc $9807			bcc 	_LCCSRExit
.97fe	c9 7b		cmp #$7b			cmp 	#"z"+1
.9800	b0 05		bcs $9807			bcs 	_LCCSRExit
.9802					_LCCSRSpace:
.9802	a9 20		lda #$20			lda 	#' '
.9804	20 da 97	jsr $97da			jsr 	LCLWrite
.9807					_LCCSRExit:
.9807	60		rts				rts
.9808					LCLLowerCase:
.9808	c9 41		cmp #$41			cmp 	#"A"
.980a	90 06		bcc $9812			bcc 	_LCLLCOut
.980c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.980e	b0 02		bcs $9812			bcs 	_LCLLCOut
.9810	69 20		adc #$20			adc 	#$20
.9812					_LCLLCOut:
.9812	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9813					ProcedureScan:
.9813	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9815	85 30		sta $30				sta 	codePtr
.9817	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9819	85 31		sta $31				sta 	codePtr+1
.981b					_PSLoop:
.981b	b2 30		lda ($30)			lda 	(codePtr)
.981d	f0 42		beq $9861			beq 	_PSExit
.981f	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9821	b1 30		lda ($30),y			lda 	(codePtr),y
.9823	c9 9e		cmp #$9e			cmp 	#KWD_PROC
.9825	d0 2d		bne $9854			bne 	_PSNext
.9827	c8		iny				iny 								; get the address of the record to zTemp0 and
.9828	b1 30		lda ($30),y			lda 	(codePtr),y
.982a	29 c0		and #$c0			and 	#$C0
.982c	c9 40		cmp #$40			cmp 	#$40
.982e	d0 32		bne $9862			bne 	_PSSyntax
.9830	b1 30		lda ($30),y			lda 	(codePtr),y
.9832	18		clc				clc
.9833	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9835	85 37		sta $37				sta 	zTemp0+1
.9837	c8		iny				iny 								; LSB
.9838	b1 30		lda ($30),y			lda 	(codePtr),y
.983a	85 36		sta $36				sta 	zTemp0
.983c	c8		iny				iny 								; character after variable call.
.983d	98		tya				tya 								; save Y offset at +7
.983e	a0 07		ldy #$07			ldy 	#7
.9840	91 36		sta ($36),y			sta 	(zTemp0),y
.9842	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9844	a0 02		ldy #$02			ldy 	#2
.9846	91 36		sta ($36),y			sta 	(zTemp0),y
.9848	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.984a					_PSCopy:
.984a	b5 30		lda $30,x			lda 	safePtr,x
.984c	c8		iny				iny
.984d	91 36		sta ($36),y			sta 	(zTemp0),y
.984f	e8		inx				inx
.9850	e0 04		cpx #$04			cpx 	#4
.9852	d0 f6		bne $984a			bne 	_PSCopy
.9854					_PSNext:
.9854	18		clc				clc
.9855	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9857	65 30		adc $30				adc 	codePtr
.9859	85 30		sta $30				sta 	codePtr
.985b	90 02		bcc $985f			bcc 	_CREExit
.985d	e6 31		inc $31				inc 	codePtr+1
.985f					_CREExit:
.985f	80 ba		bra $981b			bra 	_PSLoop
.9861					_PSExit:
.9861	60		rts				rts
.9862					_PSSyntax:
.9862	4c d9 b2	jmp $b2d9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9865					ScanForward:
.9865	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9867	86 37		stx $37				stx 	zTemp0+1
.9869	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.986b					_ScanLoop:
.986b	b1 30		lda ($30),y			lda 	(codePtr),y
.986d	c8		iny				iny
.986e	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9870	d0 0e		bne $9880			bne 	_ScanGoNext
.9872	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9874	f0 04		beq $987a			beq 	_ScanMatch
.9876	c5 37		cmp $37				cmp 	zTemp0+1
.9878	d0 06		bne $9880			bne 	_ScanGoNext
.987a					_ScanMatch:
.987a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.987c	d0 01		bne $987f			bne 	_ScanNotEndEOL
.987e	88		dey				dey
.987f					_ScanNotEndEOL:
.987f	60		rts				rts
.9880					_ScanGoNext:
.9880	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9882	90 e7		bcc $986b			bcc 	_ScanLoop
.9884	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9886	90 18		bcc $98a0			bcc 	_ScanSkipOne
.9888	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.988a	b0 2f		bcs $98bb			bcs 	_ScanSkipData
.988c	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.988e	90 db		bcc $986b			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9890	c9 a7		cmp #$a7			cmp 	#KWC_LAST_STRUCTURE+1
.9892	b0 d7		bcs $986b			bcs 	_ScanLoop
.9894	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9896	c9 a1		cmp #$a1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9898	b0 d1		bcs $986b			bcs 	_ScanLoop
.989a	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.989c	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.989e	80 cb		bra $986b			bra 	_ScanLoop
.98a0					_ScanSkipOne:
.98a0	c8		iny				iny 								; consume the extra one.
.98a1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98a3	d0 c6		bne $986b			bne 	_ScanLoop
.98a5	18		clc				clc
.98a6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98a8	65 30		adc $30				adc 	codePtr
.98aa	85 30		sta $30				sta 	codePtr
.98ac	90 02		bcc $98b0			bcc 	_CREExit
.98ae	e6 31		inc $31				inc 	codePtr+1
.98b0					_CREExit:
.98b0	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98b2	b2 30		lda ($30)			lda 	(codePtr)
.98b4	d0 b5		bne $986b			bne 	_ScanLoop 					; if not zero, more to scan
.98b6	a9 13		lda #$13		lda	#19
.98b8	4c f3 98	jmp $98f3		jmp	ErrorHandler
.98bb					_ScanSkipData:
.98bb	88		dey				dey 								; point at data token
.98bc	c8		iny				iny
.98bd	98		tya				tya
.98be	38		sec				sec
.98bf	71 30		adc ($30),y			adc 	(codePtr),y
.98c1	a8		tay				tay
.98c2	80 a7		bra $986b			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98c4					Command_WHILE:
.98c4	5a		phy				phy 								; save position of the test
.98c5	a2 00		ldx #$00			ldx 	#0
.98c7	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; work out the number
.98ca	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; check if zero
.98cd	f0 0e		beq $98dd			beq 	_WHExitLoop 				; if so exit the loop
.98cf	98		tya				tya 								; position *after* test.
.98d0	7a		ply				ply 								; restore position before test, at WHILE
.98d1	88		dey				dey
.98d2	48		pha				pha 								; push after test on the stack
.98d3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98d5	20 7f a5	jsr $a57f			jsr 	StackOpen
.98d8	20 c3 a5	jsr $a5c3			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98db	7a		ply				ply 								; restore the position *after* the test
.98dc	60		rts				rts
.98dd					_WHExitLoop:
.98dd	68		pla				pla 								; throw post loop position
.98de	a9 a6		lda #$a6			lda 	#KWD_WEND 					; scan forward past WEND
.98e0	aa		tax				tax
.98e1	20 65 98	jsr $9865			jsr 	ScanForward
.98e4	60		rts				rts
.98e5					Command_WEND:
.98e5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98e7	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98e9	20 ab a5	jsr $a5ab			jsr 	StackCheckFrame
.98ec	20 d4 a5	jsr $a5d4			jsr 	STKLoadCodePosition 		; loop back
.98ef	20 9d a5	jsr $a59d			jsr 	StackClose		 			; erase the frame
.98f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.acf3					CheckRightBracket:
.acf3	b1 30		lda ($30),y			lda 	(codePtr),y
.acf5	c8		iny				iny
.acf6	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.acf8	d0 0f		bne $ad09			bne 	CNAFail
.acfa	60		rts				rts
.acfb					CheckComma:
.acfb	b1 30		lda ($30),y			lda 	(codePtr),y
.acfd	c8		iny				iny
.acfe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ad00	d0 07		bne $ad09			bne 	CNAFail
.ad02	60		rts				rts
.ad03					CheckNextA:
.ad03	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad05	d0 02		bne $ad09			bne 	CNAFail
.ad07	c8		iny				iny 								; skip character
.ad08	60		rts				rts 								; and exit
.ad09					CNAFail:
.ad09	4c d9 b2	jmp $b2d9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98f3					ErrorHandler:
.98f3	a8		tay				tay 								; find the error text
.98f4	f0 49		beq $993f			beq 	_EHEnd
.98f6	a2 00		ldx #$00			ldx 	#0
.98f8	a9 f2		lda #$f2			lda 	#((ErrorText) & $FF)
.98fa	85 36		sta $36				sta 	0+zTemp0
.98fc	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.98fe	85 37		sta $37				sta 	1+zTemp0
.9900					_EHFind:
.9900	88		dey				dey 								; found the error text ?
.9901	f0 0e		beq $9911			beq 	_EHFound
.9903					_EHFindZero:
.9903	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9905	e6 36		inc $36				inc 	zTemp0
.9907	d0 02		bne $990b			bne 	_EHFNoCarry
.9909	e6 37		inc $37				inc 	zTemp0+1
.990b					_EHFNoCarry:
.990b	c9 00		cmp #$00			cmp 	#0
.990d	d0 f4		bne $9903			bne 	_EHFindZero
.990f	80 ef		bra $9900			bra 	_EHFind
.9911					_EHFound:
.9911	a5 36		lda $36				lda 	zTemp0 						; print message
.9913	a6 37		ldx $37				ldx 	zTemp0+1
.9915	20 4c 99	jsr $994c			jsr 	PrintStringXA
.9918	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.991a	b1 30		lda ($30),y			lda 	(codePtr),y
.991c	d0 05		bne $9923			bne 	_EHAtMsg
.991e	c8		iny				iny
.991f	b1 30		lda ($30),y			lda 	(codePtr),y
.9921	f0 17		beq $993a			beq 	_EHCREnd
.9923					_EHAtMsg:
.9923	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.9925	a9 42		lda #$42			lda 	#_AtMsg & $FF
.9927	20 4c 99	jsr $994c			jsr 	PrintStringXA
.992a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.992c	b1 30		lda ($30),y			lda 	(codePtr),y
.992e	48		pha				pha
.992f	c8		iny				iny
.9930	b1 30		lda ($30),y			lda 	(codePtr),y
.9932	aa		tax				tax
.9933	68		pla				pla
.9934	20 4f ae	jsr $ae4f			jsr 	ConvertInt16 				; convert XA to string
.9937	20 4c 99	jsr $994c			jsr 	PrintStringXA 				; and print it.
.993a					_EHCREnd:
.993a	a9 0d		lda #$0d			lda 	#13 						; new line
.993c	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.993f					_EHEnd:
.993f	4c 34 8b	jmp $8b34			jmp 	WarmStart
>9942	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>994a	20 00
.994c					PrintStringXA:
.994c	5a		phy				phy
.994d	86 37		stx $37				stx 	zTemp0+1
.994f	85 36		sta $36				sta 	zTemp0
.9951	a0 00		ldy #$00			ldy 	#0
.9953					_PSXALoop:
.9953	b1 36		lda ($36),y			lda 	(zTemp0),y
.9955	f0 06		beq $995d			beq 	_PSXAExit
.9957	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.995a	c8		iny				iny
.995b	80 f6		bra $9953			bra 	_PSXALoop
.995d					_PSXAExit:
.995d	7a		ply				ply
.995e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.995f					UnaryTrue:
.995f	fa		plx				plx
.9960					ReturnTrue:
.9960	a9 01		lda #$01			lda 	#1  						; set to 1
.9962	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.9965	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9967	9d 00 04	sta $0400,x			sta 	NSStatus,x
.996a	60		rts				rts
.996b					UnaryFalse:
.996b	fa		plx				plx
.996c					ReturnFalse:
.996c	4c cb a4	jmp $a4cb			jmp 	NSMSetZero 					; set it all to zero
.996f					BinaryCompareEqual:
.996f	fa		plx				plx
.9970	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.9973	c9 00		cmp #$00			cmp 	#0
.9975	f0 e9		beq $9960			beq 	ReturnTrue
.9977	80 f3		bra $996c			bra 	ReturnFalse
.9979					BinaryCompareLess:
.9979	fa		plx				plx
.997a	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.997d	c9 ff		cmp #$ff			cmp 	#$FF
.997f	f0 df		beq $9960			beq 	ReturnTrue
.9981	80 e9		bra $996c			bra 	ReturnFalse
.9983					BinaryCompareGreater:
.9983	fa		plx				plx
.9984	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.9987	c9 01		cmp #$01			cmp 	#1
.9989	f0 d5		beq $9960			beq 	ReturnTrue
.998b	80 df		bra $996c			bra 	ReturnFalse
.998d					BinaryCompareNotEqual:
.998d	fa		plx				plx
.998e	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.9991	c9 00		cmp #$00			cmp 	#0
.9993	d0 cb		bne $9960			bne 	ReturnTrue
.9995	80 d5		bra $996c			bra 	ReturnFalse
.9997					BinaryCompareLessEqual:
.9997	fa		plx				plx
.9998	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.999b	c9 01		cmp #$01			cmp 	#1
.999d	d0 c1		bne $9960			bne 	ReturnTrue
.999f	80 cb		bra $996c			bra 	ReturnFalse
.99a1					BinaryCompareGreaterEqual:
.99a1	fa		plx				plx
.99a2	20 ab 99	jsr $99ab			jsr 	CompareBaseCode
.99a5	c9 ff		cmp #$ff			cmp 	#$FF
.99a7	d0 b7		bne $9960			bne 	ReturnTrue
.99a9	80 c1		bra $996c			bra 	ReturnFalse
.99ab					CompareBaseCode:
.99ab	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; make both values if references.
.99ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99b1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b4	29 10		and #$10			and 	#NSTString
.99b6	d0 40		bne $99f8			bne 	_CBCString
.99b8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99bb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99be	d0 3b		bne $99fb			bne 	_CBCFloat
.99c0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99c3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99c6	29 08		and #$08			and 	#NSTFloat
.99c8	d0 31		bne $99fb			bne 	_CBCFloat
.99ca	20 fe 99	jsr $99fe			jsr 	CompareFixMinusZero
.99cd	e8		inx				inx
.99ce	20 fe 99	jsr $99fe			jsr 	CompareFixMinusZero
.99d1	ca		dex				dex
.99d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99d5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99d8	10 0b		bpl $99e5			bpl 	_CDCSameSign
.99da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99dd	30 16		bmi $99f5			bmi 	_CBCLess 					; return $FF
.99df					_CBCGreater:
.99df	a9 01		lda #$01			lda 	#1
.99e1	60		rts				rts
.99e2					_CBCEqual:
.99e2	a9 00		lda #$00			lda 	#0
.99e4	60		rts				rts
.99e5					_CDCSameSign:
.99e5	20 0e 9b	jsr $9b0e			jsr 	SubTopTwoStack 				; unsigned subtract
.99e8	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; or the mantissa together
.99eb	f0 f5		beq $99e2			beq 	_CBCEqual 					; -0 == 0
.99ed	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99f0	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99f3	10 ea		bpl $99df			bpl 	_CBCGreater
.99f5					_CBCLess:
.99f5	a9 ff		lda #$ff			lda 	#$FF
.99f7	60		rts				rts
.99f8					_CBCString:
.99f8	4c 64 9a	jmp $9a64			jmp 	CompareStrings
.99fb					_CBCFloat:
.99fb	4c 4b af	jmp $af4b			jmp 	CompareFloat
.99fe					CompareFixMinusZero:
.99fe	20 fb a4	jsr $a4fb			jsr 	NSMIsZero
.9a01	d0 03		bne $9a06			bne 	_CFXMZNotZero
.9a03	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a06					_CFXMZNotZero:
.9a06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a07					StringConcat:
.9a07	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a0a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a0d	29 18		and #$18			and 	#NSBTypeMask
.9a0f	c9 10		cmp #$10			cmp 	#NSTString
.9a11	d0 4e		bne $9a61			bne		_SCType
.9a13	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a15	e8		inx				inx
.9a16	20 34 9a	jsr $9a34			jsr 	_SCSetupZ0 					; setup for second
.9a19	20 3f 9a	jsr $9a3f			jsr 	_SCLengthZ0 				; length for second
.9a1c	ca		dex				dex
.9a1d	20 34 9a	jsr $9a34			jsr 	_SCSetupZ0 					; setup for first
.9a20	20 3f 9a	jsr $9a3f			jsr 	_SCLengthZ0 				; length for first
.9a23	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a25	20 5d b6	jsr $b65d			jsr 	StringTempAllocate
.9a28	20 52 9a	jsr $9a52			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a2b	e8		inx				inx
.9a2c	20 34 9a	jsr $9a34			jsr 	_SCSetupZ0 					; copy second out
.9a2f	20 52 9a	jsr $9a52			jsr 	_SCCopy
.9a32	ca		dex				dex
.9a33	60		rts				rts
.9a34					_SCSetupZ0:
.9a34	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a37	85 36		sta $36				sta 	zTemp0
.9a39	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a3c	85 37		sta $37				sta 	zTemp0+1
.9a3e	60		rts				rts
.9a3f					_SCLengthZ0:
.9a3f	5a		phy				phy
.9a40	a0 00		ldy #$00			ldy 	#0
.9a42					_SCLenLoop:
.9a42	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a44	f0 0a		beq $9a50			beq 	_SCLExit
.9a46	c8		iny				iny
.9a47	e6 38		inc $38				inc 	zTemp1
.9a49	10 f7		bpl $9a42			bpl		_SCLenLoop
.9a4b	a9 09		lda #$09		lda	#9
.9a4d	4c f3 98	jmp $98f3		jmp	ErrorHandler
.9a50					_SCLExit:
.9a50	7a		ply				ply
.9a51	60		rts				rts
.9a52					_SCCopy:
.9a52	5a		phy				phy
.9a53	a0 00		ldy #$00			ldy 	#0
.9a55					_SCCopyLoop:
.9a55	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a57	f0 06		beq $9a5f			beq 	_SCCExit
.9a59	20 9b b6	jsr $b69b			jsr 	StringTempWrite
.9a5c	c8		iny				iny
.9a5d	80 f6		bra $9a55			bra 	_SCCopyLoop
.9a5f					_SCCExit:
.9a5f	7a		ply				ply
.9a60	60		rts				rts
.9a61					_SCType:
.9a61	4c e3 b2	jmp $b2e3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad0c					IntegerDivide:
.ad0c	fa		plx				plx
.ad0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad10	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad13	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad14	0a		asl a				asl 	a
.ad15	10 05		bpl $ad1c			bpl 	_NotRef
.ad17	48		pha				pha
.ad18	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad1b	68		pla				pla
.ad1c					_NotRef:
.ad1c	0a		asl a				asl 	a
.ad1d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad1f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad22	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad25	f0 03		beq $ad2a			beq 	_IntegerCode 				; if clear, then we have two integers
.ad27	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.ad2a					_IntegerCode:
.ad2a	20 4c ad	jsr $ad4c			jsr 	CheckDivideZero 			; do div zero check
.ad2d	20 84 ad	jsr $ad84			jsr 	Int32Divide 				; do the division
.ad30	20 41 ae	jsr $ae41			jsr 	CalculateSign 				; calculate result sign
.ad33					NSMCopyPlusTwoToZero:
.ad33	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ad36	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad39	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ad3c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad3f	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ad42	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad45	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ad48	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad4b	60		rts				rts
.ad4c					CheckDivideZero:
.ad4c	e8		inx				inx
.ad4d	20 fb a4	jsr $a4fb			jsr 	NSMIsZero
.ad50	f0 02		beq $ad54			beq 	_CDVError
.ad52	ca		dex				dex
.ad53	60		rts				rts
.ad54					_CDVError:
.ad54	a9 03		lda #$03		lda	#3
.ad56	4c f3 98	jmp $98f3		jmp	ErrorHandler
.ad59					IntegerModulus:
.ad59	fa		plx				plx
.ad5a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad5d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad60	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad61	0a		asl a				asl 	a
.ad62	10 05		bpl $ad69			bpl 	_NotRef
.ad64	48		pha				pha
.ad65	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad68	68		pla				pla
.ad69					_NotRef:
.ad69	0a		asl a				asl 	a
.ad6a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad6c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad6f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad72	f0 03		beq $ad77			beq 	_IntegerCode 				; if clear, then we have two integers
.ad74	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.ad77					_IntegerCode:
.ad77					IntegerModulusNoCheck:
.ad77	20 4c ad	jsr $ad4c			jsr 	CheckDivideZero 			; do div zero check
.ad7a	20 84 ad	jsr $ad84			jsr 	Int32Divide 				; do the division
.ad7d	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad80	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad83	60		rts				rts
.ad84					Int32Divide:
.ad84	48		pha				pha 								; save AXY
.ad85	5a		phy				phy
.ad86	20 a2 a4	jsr $a4a2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad89	20 c7 a4	jsr $a4c7			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad8c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad8e					_I32DivideLoop:
.ad8e	e8		inx				inx
.ad8f	e8		inx				inx
.ad90	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad93	ca		dex				dex
.ad94	ca		dex				dex
.ad95	20 e1 a4	jsr $a4e1			jsr 	NSMRotateLeft
.ad98	20 c4 ad	jsr $adc4			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad9b	90 03		bcc $ada0			bcc 	_I32DivideNoCarryIn
.ad9d	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ada0					_I32DivideNoCarryIn:
.ada0	88		dey				dey 								; loop round till division completed.
.ada1	d0 eb		bne $ad8e			bne 	_I32DivideLoop
.ada3	7a		ply				ply 								; restore AXY and exit
.ada4	68		pla				pla
.ada5	60		rts				rts
.ada6					Int32ShiftDivide:
.ada6	48		pha				pha 								; save AY
.ada7	5a		phy				phy
.ada8	e8		inx				inx 								; clear S[X+2]
.ada9	e8		inx				inx
.adaa	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.adad	ca		dex				dex
.adae	ca		dex				dex
.adaf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.adb1					_I32SDLoop:
.adb1	20 c4 ad	jsr $adc4			jsr 	DivideCheckSubtract 		; check if subtract possible
.adb4	e8		inx				inx
.adb5	e8		inx				inx
.adb6	20 e1 a4	jsr $a4e1			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.adb9	ca		dex				dex
.adba	ca		dex				dex
.adbb	20 e1 a4	jsr $a4e1			jsr 	NSMRotateLeft
.adbe	88		dey				dey 	 							; do 31 times
.adbf	d0 f0		bne $adb1			bne 	_I32SDLoop
.adc1	7a		ply				ply 								; restore AY and exit
.adc2	68		pla				pla
.adc3	60		rts				rts
.adc4					DivideCheckSubtract:
.adc4	20 0e 9b	jsr $9b0e			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.adc7	b0 04		bcs $adcd			bcs 	_DCSExit 					; if carry set, then could do, exit
.adc9	20 e8 9a	jsr $9ae8			jsr 	AddTopTwoStack 				; add it back in
.adcc	18		clc				clc 								; and return False
.adcd					_DCSExit:
.adcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.adce					MulInteger:
.adce	fa		plx				plx
.adcf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.add2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.add5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.add6	0a		asl a				asl 	a
.add7	10 05		bpl $adde			bpl 	_NotRef
.add9	48		pha				pha
.adda	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.addd	68		pla				pla
.adde					_NotRef:
.adde	0a		asl a				asl 	a 							; put MSB of type into A:7
.addf	30 0b		bmi $adec			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ade1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ade4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ade7	f0 06		beq $adef			beq 	_IntegerCode 				; if clear, then we have two integers
.ade9	4c 22 b0	jmp $b022			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.adec					_StringData:
.adec	4c ed b2	jmp $b2ed			jmp 	NotDoneError							; at least one string - don't know both are strings.
.adef					_IntegerCode:
.adef	20 fc ad	jsr $adfc			jsr 	MultiplyShort
.adf2	c9 00		cmp #$00			cmp 	#0
.adf4	f0 05		beq $adfb			beq 	_MIExit
.adf6	a9 04		lda #$04		lda	#4
.adf8	4c f3 98	jmp $98f3		jmp	ErrorHandler
.adfb					_MIExit:
.adfb	60		rts				rts
.adfc					MultiplyShort:
.adfc	5a		phy				phy 								; save Y
.adfd	20 a2 a4	jsr $a4a2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae00	20 c7 a4	jsr $a4c7			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae03	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae05					_I32MLoop:
.ae05	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae08	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae0b	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae0e	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae11	f0 28		beq $ae3b			beq 	_I32MExit 					; exit if zero
.ae13	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ae16	29 01		and #$01			and 	#1
.ae18	f0 0e		beq $ae28			beq 	_I32MNoAdd
.ae1a	20 e8 9a	jsr $9ae8			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ae1d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ae20	10 06		bpl $ae28			bpl 	_I32MNoAdd
.ae22					_I32ShiftRight:
.ae22	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight 				; shift S[X] right
.ae25	c8		iny				iny 								; increment shift count
.ae26	80 0a		bra $ae32			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ae28					_I32MNoAdd:
.ae28	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ae2b	70 f5		bvs $ae22			bvs 	_I32ShiftRight 				; instead.
.ae2d	e8		inx				inx
.ae2e	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ae31	ca		dex				dex
.ae32					_I32MShiftUpper:
.ae32	e8		inx				inx 								; shift S[X+2] right
.ae33	e8		inx				inx
.ae34	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight
.ae37	ca		dex				dex
.ae38	ca		dex				dex
.ae39	80 ca		bra $ae05			bra 	_I32MLoop 					; try again.
.ae3b					_I32MExit:
.ae3b	20 41 ae	jsr $ae41			jsr 	CalculateSign
.ae3e	98		tya				tya 								; shift in A
.ae3f	7a		ply				ply 								; restore Y and exit
.ae40	60		rts				rts
.ae41					CalculateSign:
.ae41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ae44	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ae47	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae4a	0a		asl a				asl 	a 							; shift bit 7 into carry
.ae4b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ae4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a64					CompareStrings:
.9a64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a67	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a6a	29 10		and #$10			and 	#NSBIsString
.9a6c	f0 2c		beq $9a9a			beq 	_CSTypeError
.9a6e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a71	85 36		sta $36				sta 	zTemp0
.9a73	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a76	85 37		sta $37				sta 	zTemp0+1
.9a78	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a7b	85 38		sta $38				sta 	zTemp1
.9a7d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a80	85 39		sta $39				sta 	zTemp1+1
.9a82	5a		phy				phy 								; save Y so we can access strings
.9a83	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a85					_CSLoop:
.9a85	c8		iny				iny
.9a86	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a88	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a8a	d0 06		bne $9a92			bne 	_CSDifferent
.9a8c	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a8e	d0 f5		bne $9a85			bne 	_CSLoop 					; still comparing
.9a90					_CSExit:
.9a90	7a		ply				ply 								; reached end, return zero in A from EOS
.9a91	60		rts				rts
.9a92					_CSDifferent:
.9a92	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a94	90 fa		bcc $9a90			bcc		_CSExit
.9a96	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a98	80 f6		bra $9a90			bra 	_CSExit
.9a9a					_CSTypeError:
.9a9a	4c e3 b2	jmp $b2e3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a9d					ShiftLeft:
.9a9d	38		sec				sec
.9a9e	80 01		bra $9aa1			bra 	ShiftMain
.9aa0					ShiftRight:
.9aa0	18		clc				clc
.9aa1					ShiftMain:
.9aa1	fa		plx				plx 								; restore X
.9aa2	08		php				php 								; save direction
.9aa3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9aa6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aa9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aaa	0a		asl a				asl 	a
.9aab	10 05		bpl $9ab2			bpl 	_NotRef
.9aad	48		pha				pha
.9aae	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ab1	68		pla				pla
.9ab2					_NotRef:
.9ab2	0a		asl a				asl 	a
.9ab3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ab5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ab8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9abb	f0 03		beq $9ac0			beq 	_IntegerCode 				; if clear, then we have two integers
.9abd	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9ac0					_IntegerCode:
.9ac0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ac3	29 e0		and #$e0			and 	#$E0
.9ac5	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ac8	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9acb	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ace	d0 13		bne $9ae3			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ad0					_SMLoop:
.9ad0	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ad3	30 11		bmi $9ae6			bmi 	_SMExit 					; exit if done.
.9ad5	28		plp				plp 								; restore direcition setting
.9ad6	08		php				php
.9ad7	90 05		bcc $9ade			bcc 	_SMRight
.9ad9	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; shift left if CS
.9adc	80 f2		bra $9ad0			bra 	_SMLoop
.9ade					_SMRight:
.9ade	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight 				; shift right if CC
.9ae1	80 ed		bra $9ad0			bra 	_SMLoop
.9ae3					_SMExit0:
.9ae3	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; return zero.
.9ae6					_SMExit:
.9ae6	28		plp				plp 								; throw direction
.9ae7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ae8					AddTopTwoStack:
.9ae8	18		clc				clc
.9ae9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9aec	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9aef	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9af2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9af5	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9af8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9afb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9afe	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b01	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b04	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b07	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b0a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b0d	60		rts				rts
.9b0e					SubTopTwoStack:
.9b0e	38		sec				sec
.9b0f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b12	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b15	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b18	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b1b	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b1e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b21	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b24	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b27	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b2d	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b30	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b33	60		rts				rts
.9b34					AddInteger:
.9b34	fa		plx				plx
.9b35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b38	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b3b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3c	0a		asl a				asl 	a
.9b3d	10 05		bpl $9b44			bpl 	_NotRef
.9b3f	48		pha				pha
.9b40	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b43	68		pla				pla
.9b44					_NotRef:
.9b44	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b45	30 0b		bmi $9b52			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b47	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4d	f0 06		beq $9b55			beq 	_IntegerCode 				; if clear, then we have two integers
.9b4f	4c aa ae	jmp $aeaa			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b52					_StringData:
.9b52	4c 07 9a	jmp $9a07			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b55					_IntegerCode:
.9b55					AddCode:
.9b55	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b58	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b5b	10 8b		bpl $9ae8			bpl 	AddTopTwoStack
.9b5d	20 0e 9b	jsr $9b0e			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b60	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b63	10 09		bpl $9b6e			bpl 	_AddExit
.9b65	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b68	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b6b	20 80 a4	jsr $a480			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b6e					_AddExit:
.9b6e	60		rts				rts
.9b6f					SubInteger:
.9b6f	fa		plx				plx
.9b70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b73	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b76	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b77	0a		asl a				asl 	a
.9b78	10 05		bpl $9b7f			bpl 	_NotRef
.9b7a	48		pha				pha
.9b7b	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b7e	68		pla				pla
.9b7f					_NotRef:
.9b7f	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b80	30 0b		bmi $9b8d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b82	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b85	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b88	f0 06		beq $9b90			beq 	_IntegerCode 				; if clear, then we have two integers
.9b8a	4c af ae	jmp $aeaf			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b8d					_StringData:
.9b8d	4c ed b2	jmp $b2ed			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b90					_IntegerCode:
.9b90	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9b93	49 80		eor #$80			eor 	#$80
.9b95	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b98	80 bb		bra $9b55			bra 	AddCode 					; and do the same code as add.
.9b9a					AndInteger:
.9b9a	fa		plx				plx
.9b9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b9e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ba2	0a		asl a				asl 	a
.9ba3	10 05		bpl $9baa			bpl 	_NotRef
.9ba5	48		pha				pha
.9ba6	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ba9	68		pla				pla
.9baa					_NotRef:
.9baa	0a		asl a				asl 	a
.9bab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bb3	f0 03		beq $9bb8			beq 	_IntegerCode 				; if clear, then we have two integers
.9bb5	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9bb8					_IntegerCode:
.9bb8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bbb	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bbe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bc1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bc4	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bc7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bca	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bcd	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bd0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bd3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bd6	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bd9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bdc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bdf	60		rts				rts
.9be0					OraInteger:
.9be0	fa		plx				plx
.9be1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9be4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9be7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be8	0a		asl a				asl 	a
.9be9	10 05		bpl $9bf0			bpl 	_NotRef
.9beb	48		pha				pha
.9bec	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bef	68		pla				pla
.9bf0					_NotRef:
.9bf0	0a		asl a				asl 	a
.9bf1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bf9	f0 03		beq $9bfe			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfb	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9bfe					_IntegerCode:
.9bfe	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c01	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c07	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c0a	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c0d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c10	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c13	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c16	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c19	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c1c	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c1f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c22	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c25	60		rts				rts
.9c26					EorInteger:
.9c26	fa		plx				plx
.9c27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c2a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c2d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c2e	0a		asl a				asl 	a
.9c2f	10 05		bpl $9c36			bpl 	_NotRef
.9c31	48		pha				pha
.9c32	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c35	68		pla				pla
.9c36					_NotRef:
.9c36	0a		asl a				asl 	a
.9c37	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c39	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c3c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c3f	f0 03		beq $9c44			beq 	_IntegerCode 				; if clear, then we have two integers
.9c41	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9c44					_IntegerCode:
.9c44	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c47	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c4a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c4d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c50	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c56	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c59	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c5c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c5f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c62	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c65	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c68	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c6b	60		rts				rts
.9c6c					WordIndirect:
.9c6c	fa		plx				plx
.9c6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c70	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c73	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c74	0a		asl a				asl 	a
.9c75	10 05		bpl $9c7c			bpl 	_NotRef
.9c77	48		pha				pha
.9c78	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c7b	68		pla				pla
.9c7c					_NotRef:
.9c7c	0a		asl a				asl 	a
.9c7d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c7f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c82	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c85	f0 03		beq $9c8a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c87	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9c8a					_IntegerCode:
.9c8a	20 55 9b	jsr $9b55			jsr 	AddCode 					; add the two values
.9c8d	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c8f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c92	60		rts				rts
.9c93					ByteIndirect:
.9c93	fa		plx				plx
.9c94	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c97	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c9a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c9b	0a		asl a				asl 	a
.9c9c	10 05		bpl $9ca3			bpl 	_NotRef
.9c9e	48		pha				pha
.9c9f	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ca2	68		pla				pla
.9ca3					_NotRef:
.9ca3	0a		asl a				asl 	a
.9ca4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ca6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cac	f0 03		beq $9cb1			beq 	_IntegerCode 				; if clear, then we have two integers
.9cae	4c e3 b2	jmp $b2e3			jmp 	TypeError 					; anything else, type mismatch.
.9cb1					_IntegerCode:
.9cb1	20 55 9b	jsr $9b55			jsr 	AddCode 					; add the two values
.9cb4	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cb6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ae4f					ConvertInt16:
.ae4f	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ae52	8e 10 04	stx $0410			stx 	NSMantissa1
.ae55	9c 18 04	stz $0418			stz 	NSMantissa2
.ae58	9c 20 04	stz $0420			stz 	NSMantissa3
.ae5b	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae5e	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae60	a9 0a		lda #$0a			lda 	#10 						; base
.ae62	80 00		bra $ae64			bra 	ConvertInt32
.ae64					ConvertInt32:
.ae64	5a		phy				phy
.ae65	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae67	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae6a	10 08		bpl $ae74			bpl 	_CI32NotNeg
.ae6c	48		pha				pha
.ae6d	a9 2d		lda #$2d			lda 	#'-'
.ae6f	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae72	c8		iny				iny
.ae73	68		pla				pla
.ae74					_CI32NotNeg:
.ae74	20 82 ae	jsr $ae82			jsr 	_CI32DivideConvert 			; recursive conversion
.ae77	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae79	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae7c	7a		ply				ply
.ae7d	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae7f	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae81	60		rts				rts
.ae82					_CI32DivideConvert:
.ae82	e8		inx				inx 								; write to next slot up
.ae83	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.ae86	ca		dex				dex
.ae87	20 84 ad	jsr $ad84			jsr 	Int32Divide 				; divide
.ae8a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae8d	48		pha				pha
.ae8e	20 33 ad	jsr $ad33			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae91	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; is it zero ?
.ae94	f0 06		beq $ae9c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ae96	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ae99	20 82 ae	jsr $ae82			jsr 	_CI32DivideConvert 			; and recusrively call.
.ae9c					_CI32NoRecurse:
.ae9c	68		pla				pla 								; remainder
.ae9d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ae9f	90 02		bcc $aea3			bcc 	_CI32NotHex
.aea1	69 26		adc #$26			adc 	#6+32
.aea3					_CI32NotHex:
.aea3	69 30		adc #$30			adc 	#48
.aea5	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aea8	c8		iny				iny
.aea9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cba					PrecedenceLevel:
>9cba	04					.byte	 4	; $00 <<
>9cbb	02					.byte	 2	; $01 <=
>9cbc	02					.byte	 2	; $02 <>
>9cbd	00					.byte	 0	; $03 !!3
>9cbe	00					.byte	 0	; $04 ><
>9cbf	02					.byte	 2	; $05 >=
>9cc0	04					.byte	 4	; $06 >>
>9cc1	00					.byte	 0	; $07 !!7
>9cc2	00					.byte	 0	; $08 !!8
>9cc3	00					.byte	 0	; $09 !!9
>9cc4	00					.byte	 0	; $0a !!10
>9cc5	00					.byte	 0	; $0b !!11
>9cc6	00					.byte	 0	; $0c !!12
>9cc7	00					.byte	 0	; $0d !!13
>9cc8	00					.byte	 0	; $0e !!14
>9cc9	00					.byte	 0	; $0f !!15
>9cca	00					.byte	 0	; $10 @
>9ccb	00					.byte	 0	; $11 !!17
>9ccc	00					.byte	 0	; $12 !!18
>9ccd	00					.byte	 0	; $13 [
>9cce	04					.byte	 4	; $14 \
>9ccf	00					.byte	 0	; $15 ]
>9cd0	01					.byte	 1	; $16 ^
>9cd1	00					.byte	 0	; $17 _
>9cd2	00					.byte	 0	; $18 `
>9cd3	00					.byte	 0	; $19 !!25
>9cd4	00					.byte	 0	; $1a !!26
>9cd5	00					.byte	 0	; $1b {
>9cd6	01					.byte	 1	; $1c |
>9cd7	00					.byte	 0	; $1d }
>9cd8	00					.byte	 0	; $1e ~
>9cd9	00					.byte	 0	; $1f [7m<7F>[m
>9cda	00					.byte	 0	; $20
>9cdb	05					.byte	 5	; $21 !
>9cdc	00					.byte	 0	; $22 "
>9cdd	00					.byte	 0	; $23 #
>9cde	05					.byte	 5	; $24 $
>9cdf	04					.byte	 4	; $25 %
>9ce0	01					.byte	 1	; $26 &
>9ce1	00					.byte	 0	; $27 '
>9ce2	00					.byte	 0	; $28 (
>9ce3	00					.byte	 0	; $29 )
>9ce4	04					.byte	 4	; $2a *
>9ce5	03					.byte	 3	; $2b +
>9ce6	00					.byte	 0	; $2c ,
>9ce7	03					.byte	 3	; $2d -
>9ce8	00					.byte	 0	; $2e .
>9ce9	04					.byte	 4	; $2f /
>9cea	00					.byte	 0	; $30 0
>9ceb	00					.byte	 0	; $31 1
>9cec	00					.byte	 0	; $32 2
>9ced	00					.byte	 0	; $33 3
>9cee	00					.byte	 0	; $34 4
>9cef	00					.byte	 0	; $35 5
>9cf0	00					.byte	 0	; $36 6
>9cf1	00					.byte	 0	; $37 7
>9cf2	00					.byte	 0	; $38 8
>9cf3	00					.byte	 0	; $39 9
>9cf4	00					.byte	 0	; $3a :
>9cf5	00					.byte	 0	; $3b ;
>9cf6	02					.byte	 2	; $3c <
>9cf7	02					.byte	 2	; $3d =
>9cf8	02					.byte	 2	; $3e >
>9cf9	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cfa					EvaluateExpressionAt0:
.9cfa	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cfc					EvaluateExpression:
.9cfc	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cfe					EvaluateExpressionAtPrecedence:
.9cfe	48		pha				pha 								; save precedence level
.9cff	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d02	68		pla				pla 								; restore precedence level.
.9d03					_EXPRLoop:
.9d03	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d05	b1 30		lda ($30),y			lda 	(codePtr),y
.9d07	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d09	b0 25		bcs $9d30			bcs 	_EXPRExit
.9d0b	da		phx				phx 								; read the operator precedence
.9d0c	aa		tax				tax
.9d0d	bd ba 9c	lda $9cba,x			lda 	PrecedenceLevel,x
.9d10	fa		plx				plx
.9d11	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d13	f0 1b		beq $9d30			beq 	_EXPRExit
.9d15	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d17	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d19	c5 37		cmp $37				cmp 	zTemp0+1
.9d1b	b0 13		bcs $9d30			bcs		_EXPRExit 					; if current >= operator exit
.9d1d	48		pha				pha 								; save current precedence.
.9d1e	b1 30		lda ($30),y			lda 	(codePtr),y
.9d20	c8		iny				iny
.9d21	48		pha				pha
.9d22	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d24	e8		inx				inx 								; work out the right hand side.
.9d25	20 fe 9c	jsr $9cfe			jsr 	EvaluateExpressionAtPrecedence
.9d28	ca		dex				dex
.9d29	68		pla				pla 								; get operator, call the code.
.9d2a	20 33 9d	jsr $9d33			jsr 	_EXPRCaller
.9d2d	68		pla				pla 								; restore precedence level
.9d2e	80 d3		bra $9d03			bra 	_EXPRLoop 					; and go round.
.9d30					_EXPRExit:
.9d30	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d32	60		rts				rts
.9d33					_EXPRCaller:
.9d33	da		phx				phx 								; save on stack, first thing is to restore it
.9d34	0a		asl a				asl 	a 							; double so can use vectors into X
.9d35	aa		tax				tax
.9d36	7c ee 94	jmp ($94ee,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aeaa					FloatingPointAdd:
.aeaa	20 4b b0	jsr $b04b			jsr 	FloatPrepare 				; prepare for floats
.aead	80 0b		bra $aeba			bra 	FloatAdd
.aeaf					FloatingPointSub:
.aeaf	20 4b b0	jsr $b04b			jsr 	FloatPrepare 				; prepare for floats
.aeb2					FloatSubtract:
.aeb2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aeb5	49 80		eor #$80			eor 	#$80
.aeb7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aeba					FloatAdd:
.aeba	48		pha				pha
.aebb	5a		phy				phy
.aebc	20 5c b0	jsr $b05c			jsr 	NSNormalise 				; normalise S[X]
.aebf	f0 54		beq $af15			beq 	_FAReturn1
.aec1	e8		inx				inx 								; normalise S[X+1]
.aec2	20 5c b0	jsr $b05c			jsr 	NSNormalise
.aec5	ca		dex				dex
.aec6	c9 00		cmp #$00			cmp 	#0
.aec8	f0 6f		beq $af39			beq 	_FAExit 					; if so, just return A
.aeca	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aecd	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aed0	f0 1b		beq $aeed			beq 	_FAExponentsEqual
.aed2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aed5	a8		tay				tay
.aed6	38		sec				sec 								; do a signed comparison of the exponents.
.aed7	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aeda	50 02		bvc $aede			bvc 	_FANoSignedChange
.aedc	49 80		eor #$80			eor 	#$80
.aede					_FANoSignedChange:
.aede	29 80		and #$80			and 	#$80
.aee0	10 03		bpl $aee5			bpl 	_FAHaveMax
.aee2	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aee5					_FAHaveMax:
.aee5	20 3c af	jsr $af3c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aee8	e8		inx				inx
.aee9	20 3c af	jsr $af3c			jsr 	_FAShiftToExponent
.aeec	ca		dex				dex
.aeed					_FAExponentsEqual:
.aeed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aef0	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aef3	30 10		bmi $af05			bmi 	_FADifferentSigns
.aef5	20 e8 9a	jsr $9ae8			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aef8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aefb	10 3c		bpl $af39			bpl 	_FAExit 					; if no, we are done.
.aefd	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.af00	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af03	80 34		bra $af39			bra 	_FAExit
.af05					_FADifferentSigns:
.af05	20 0e 9b	jsr $9b0e			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af08	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af0b	10 2c		bpl $af39			bpl 	_FAExit 					; if no, we are done.
.af0d	20 77 a4	jsr $a477			jsr 	NSMNegate 					; netate result
.af10	20 80 a4	jsr $a480			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af13	80 24		bra $af39			bra 	_FAExit
.af15					_FAReturn1:
.af15	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.af18	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af1b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.af1e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af21	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.af24	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af27	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.af2a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af2d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.af30	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af33	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.af36	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af39					_FAExit:
.af39	7a		ply				ply
.af3a	68		pla				pla
.af3b	60		rts				rts
.af3c					_FAShiftToExponent:
.af3c					_FAShiftToExponent2:
.af3c	98		tya				tya 								; compare Y to exponent
.af3d	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.af40	f0 08		beq $af4a			beq 	_FASEExit 					; exit if so.
.af42	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight	 			; shift the mantissa right
.af45	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.af48	80 f2		bra $af3c			bra 	_FAShiftToExponent2
.af4a					_FASEExit:
.af4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.af4b					CompareFloat:
.af4b	20 b2 ae	jsr $aeb2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.af4e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.af51	29 f8		and #$f8			and 	#$F8
.af53	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af56	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af59	f0 09		beq $af64			beq 	_FCExit 					; zero, so approximately identical
.af5b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af5d	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af60	10 02		bpl $af64			bpl 	_FCExit
.af62					_FCNegative:
.af62	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af64					_FCExit:
.af64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af65					FDivideCommand:
.af65	fa		plx				plx	 								; restore stack position
.af66	20 4b b0	jsr $b04b			jsr 	FloatPrepare 				; prepare for floats
.af69					FloatDivide:
.af69	48		pha				pha
.af6a	e8		inx				inx
.af6b	20 5c b0	jsr $b05c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af6e	ca		dex				dex
.af6f	c9 00		cmp #$00			cmp 	#0
.af71	f0 20		beq $af93			beq 	_FDZero
.af73	20 5c b0	jsr $b05c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af76	f0 19		beq $af91			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af78	20 a6 ad	jsr $ada6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af7b	20 33 ad	jsr $ad33			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af7e	20 5c b0	jsr $b05c			jsr		NSNormalise 				; renormalise
.af81	20 41 ae	jsr $ae41			jsr 	CalculateSign 				; calculate result sign
.af84	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af87	38		sec				sec
.af88	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af8b	38		sec				sec
.af8c	e9 1e		sbc #$1e			sbc 	#30
.af8e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af91					_FDExit:
.af91	68		pla				pla
.af92	60		rts				rts
.af93					_FDZero:
.af93	a9 03		lda #$03		lda	#3
.af95	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.af98					FloatFractionalPart:
.af98	5a		phy				phy
.af99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.af9c	29 7f		and #$7f			and 	#$7F
.af9e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afa1	20 5c b0	jsr $b05c			jsr 	NSNormalise
.afa4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.afa7	38		sec				sec
.afa8	e9 e0		sbc #$e0			sbc 	#$E0
.afaa	90 31		bcc $afdd			bcc 	_FFPExit 					; already fractional
.afac	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.afae	b0 2a		bcs $afda			bcs 	_FFPZero
.afb0	a8		tay				tay 								; put count to do in Y
.afb1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.afb4	20 df af	jsr $afdf			jsr 	_FFPPartial
.afb7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afba	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.afbd	20 df af	jsr $afdf			jsr 	_FFPPartial
.afc0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afc3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afc6	20 df af	jsr $afdf			jsr 	_FFPPartial
.afc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afcc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.afcf	20 df af	jsr $afdf			jsr 	_FFPPartial
.afd2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afd5	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; zeroed check.
.afd8	d0 03		bne $afdd			bne 	_FFPExit
.afda					_FFPZero:
.afda	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.afdd					_FFPExit:
.afdd	7a		ply				ply
.afde	60		rts				rts
.afdf					_FFPPartial:
.afdf	c0 00		cpy #$00			cpy 	#0 							; no more to do
.afe1	f0 17		beq $affa			beq 	_FFFPPExit
.afe3	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.afe5	b0 0c		bcs $aff3			bcs 	_FFFPPWholeByte
.afe7	5a		phy				phy
.afe8					_FFFPPLeft:
.afe8	0a		asl a				asl 	a
.afe9	88		dey				dey
.afea	d0 fc		bne $afe8			bne 	_FFFPPLeft
.afec	7a		ply				ply
.afed					_FFFPPRight:
.afed	4a		lsr a				lsr 	a
.afee	88		dey				dey
.afef	d0 fc		bne $afed			bne 	_FFFPPRight
.aff1	80 07		bra $affa			bra 	_FFFPPExit
.aff3					_FFFPPWholeByte:
.aff3	98		tya				tya 								; subtract 8 from count
.aff4	38		sec				sec
.aff5	e9 08		sbc #$08			sbc 	#8
.aff7	a8		tay				tay
.aff8	a9 00		lda #$00			lda 	#0 							; and clear all
.affa					_FFFPPExit:
.affa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.affb					FloatIntegerPart:
.affb	48		pha				pha
.affc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.afff	f0 1f		beq $b020			beq 	_FIPExit 					; if so do nothing
.b001	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; is it zero ?
.b004	f0 17		beq $b01d			beq 	_FIPZero 					; if so return zero.
.b006	20 5c b0	jsr $b05c			jsr 	NSNormalise 				; normalise
.b009	f0 12		beq $b01d			beq 	_FIPZero 					; normalised to zero, exit zero
.b00b					_FIPShift:
.b00b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b00e	10 08		bpl $b018			bpl 	_FIPCheckZero
.b010	20 ee a4	jsr $a4ee			jsr 	NSMShiftRight 				; shift mantissa right
.b013	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b016	80 f3		bra $b00b			bra 	_FIPShift
.b018					_FIPCheckZero:
.b018	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; avoid -0 problem
.b01b	d0 03		bne $b020			bne 	_FIPExit 					; set to zero if mantissa zero.
.b01d					_FIPZero:
.b01d	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.b020					_FIPExit:
.b020	68		pla				pla
.b021	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b022					FloatingPointMultiply:
.b022	20 4b b0	jsr $b04b			jsr 	FloatPrepare 				; prepare for floats
.b025					FloatMultiply:
.b025	48		pha				pha
.b026	20 5c b0	jsr $b05c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b029	f0 1b		beq $b046			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b02b	e8		inx				inx
.b02c	20 5c b0	jsr $b05c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b02f	ca		dex				dex
.b030	c9 00		cmp #$00			cmp 	#0
.b032	f0 0f		beq $b043			beq 	_FDSetZero
.b034	20 fc ad	jsr $adfc			jsr 	MultiplyShort 				; calculate the result.
.b037	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b03a	18		clc				clc
.b03b	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b03e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b041	80 03		bra $b046			bra 	_FDExit
.b043					_FDSetZero:
.b043	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; return 0
.b046					_FDExit:
.b046	20 5c b0	jsr $b05c			jsr 	NSNormalise 				; normalise the result
.b049	68		pla				pla
.b04a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b04b					FloatPrepare:
.b04b	20 0c 9e	jsr $9e0c			jsr 	DereferenceTopTwo 			; dereference the top two values
.b04e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b051	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b054	29 10		and #$10			and 	#NSBIsString
.b056	d0 01		bne $b059			bne 	_FDType
.b058	60		rts				rts
.b059					_FDType:
.b059	4c e3 b2	jmp $b2e3			jmp 	TypeError
.b05c					NSNormalise:
.b05c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b05f	29 80		and #$80			and 	#$80
.b061	09 08		ora #$08			ora 	#NSTFloat
.b063	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b066	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; if zero exit
.b069	d0 09		bne $b074			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b06b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b06e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b071	a9 00		lda #$00			lda 	#0 							; set Z flag
.b073	60		rts				rts
.b074					_NSNormaliseOptimise:
.b074	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b077	d0 22		bne $b09b			bne 	_NSNormaliseLoop
.b079	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b07c	30 1d		bmi $b09b			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b07e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b081	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b084	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b087	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b08a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b08d	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b090	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b093	38		sec				sec
.b094	e9 08		sbc #$08			sbc 	#8
.b096	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b099	80 d9		bra $b074			bra 	_NSNormaliseOptimise
.b09b					_NSNormaliseLoop:
.b09b	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b09e	70 08		bvs $b0a8			bvs 	_NSNExit 					; exit if so with Z flag clear
.b0a0	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; shift mantissa left
.b0a3	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b0a6	80 f3		bra $b09b			bra 	_NSNormaliseLoop
.b0a8					_NSNExit:
.b0a8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b0aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d39					AssignNumber:
.9d39	5a		phy				phy
.9d3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d3d	85 36		sta $36				sta 	zTemp0
.9d3f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d42	85 37		sta $37				sta 	zTemp0+1
.9d44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d47	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d49	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d4c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d4e	c9 08		cmp #$08			cmp 	#NSTFloat
.9d50	f0 2a		beq $9d7c			beq 	_ANFloat
.9d52	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d55	f0 05		beq $9d5c			beq		_ANNotFloat
.9d57	e8		inx				inx
.9d58	20 fb af	jsr $affb			jsr 	FloatIntegerPart 			; make it an integer
.9d5b	ca		dex				dex
.9d5c					_ANNotFloat:
.9d5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d5f	29 03		and #$03			and 	#3
.9d61	d0 05		bne $9d68			bne 	_ANByteWord
.9d63	20 88 9d	jsr $9d88			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d66	80 1e		bra $9d86			bra 	_ANExit
.9d68					_ANByteWord:
.9d68	48		pha				pha 								; save count
.9d69	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d6c	92 36		sta ($36)			sta 	(zTemp0)
.9d6e	68		pla				pla
.9d6f	c9 01		cmp #$01			cmp	 	#1
.9d71	f0 13		beq $9d86			beq 	_ANExit
.9d73	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d76	a0 01		ldy #$01			ldy 	#1
.9d78	91 36		sta ($36),y			sta 	(zTemp0),y
.9d7a	80 0a		bra $9d86			bra 	_ANExit
.9d7c					_ANFloat:
.9d7c	20 88 9d	jsr $9d88			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d7f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d82	a0 04		ldy #$04			ldy 	#4
.9d84	91 36		sta ($36),y			sta 	(zTemp0),y
.9d86					_ANExit:
.9d86	7a		ply				ply
.9d87	60		rts				rts
.9d88					_ANCopy4PackSign:
.9d88	a0 03		ldy #$03			ldy 	#3
.9d8a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9d8d	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d8f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9d92	91 36		sta ($36),y			sta 	(zTemp0),y
.9d94	88		dey				dey
.9d95	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9d98	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9a	88		dey				dey
.9d9b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d9e	91 36		sta ($36),y			sta 	(zTemp0),y
.9da0	88		dey				dey
.9da1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9da4	91 36		sta ($36),y			sta 	(zTemp0),y
.9da6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9da7					AssignString:
.9da7	5a		phy				phy
.9da8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dab	85 38		sta $38				sta 	zTemp1
.9dad	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9db0	85 39		sta $39				sta 	zTemp1+1
.9db2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9db5	85 36		sta $36				sta 	zTemp0
.9db7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dba	85 37		sta $37				sta 	zTemp0+1
.9dbc	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dbe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc0	f0 23		beq $9de5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dc2	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dc3	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dc5	e9 02		sbc #$02			sbc 	#2
.9dc7	85 3c		sta $3c				sta 	zsTemp
.9dc9	a0 01		ldy #$01			ldy 	#1
.9dcb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dcd	e9 00		sbc #$00			sbc 	#0
.9dcf	85 3d		sta $3d				sta 	zsTemp+1
.9dd1	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dd3					_ASGetLength:
.9dd3	c8		iny				iny
.9dd4	b1 38		lda ($38),y			lda 	(zTemp1),y
.9dd6	d0 fb		bne $9dd3			bne 	_ASGetLength
.9dd8	98		tya				tya 								; is this length <= current length
.9dd9	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ddb	90 20		bcc $9dfd			bcc 	_ASCopyString
.9ddd	f0 1e		beq $9dfd			beq 	_ASCopyString
.9ddf	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9de1	a0 01		ldy #$01			ldy 	#1
.9de3	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9de5					_ASNewStringRequired:
.9de5	e8		inx				inx 								; concrete the new string.
.9de6	20 dc b5	jsr $b5dc			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9de9	ca		dex				dex
.9dea	18		clc				clc
.9deb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9dee	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9df0	92 36		sta ($36)			sta 	(zTemp0)
.9df2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9df5	69 00		adc #$00			adc 	#0
.9df7	a0 01		ldy #$01			ldy 	#1
.9df9	91 36		sta ($36),y			sta 	(zTemp0),y
.9dfb	80 0d		bra $9e0a			bra 	_ASExit
.9dfd					_ASCopyString:
.9dfd	a0 00		ldy #$00			ldy 	#0
.9dff					_ASCopyLoop:
.9dff	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e01	c8		iny				iny
.9e02	c8		iny				iny
.9e03	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e05	88		dey				dey
.9e06	c9 00		cmp #$00			cmp 	#0
.9e08	d0 f5		bne $9dff			bne 	_ASCopyLoop
.9e0a					_ASExit:
.9e0a	7a		ply				ply
.9e0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e0c					DereferenceTopTwo:
.9e0c	e8		inx				inx
.9e0d	20 11 9e	jsr $9e11			jsr 	Dereference 				; deref x+1
.9e10	ca		dex				dex  								; falls through to deref x
.9e11					Dereference:
.9e11	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e14	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e16	f0 57		beq $9e6f			beq 	_DRFExit 					; not a reference
.9e18	5a		phy				phy
.9e19	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e1c	85 36		sta $36				sta 	zTemp0
.9e1e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e21	85 37		sta $37				sta 	zTemp0+1
.9e23	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e26	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e28	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e2b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e2e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e30	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e32	f0 0f		beq $9e43			beq 	_DRFDereferenceTwo
.9e34	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e36	f0 39		beq $9e71			beq 	_DRFFull
.9e38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e3b	29 03		and #$03			and 	#3
.9e3d	f0 32		beq $9e71			beq 	_DRFFull 					; the whole word
.9e3f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e41	f0 07		beq $9e4a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e43					_DRFDereferenceTwo:
.9e43	a0 01		ldy #$01			ldy 	#1
.9e45	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e47	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e4a					_DRFClear23:
.9e4a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e4d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e50	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e53	29 18		and #$18			and 	#NSBTypeMask
.9e55	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e58	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e5a	d0 12		bne $9e6e			bne 	_DRFNotString
.9e5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e5f	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e62	d0 0a		bne $9e6e			bne 	_DRFNotString
.9e64	a9 70		lda #$70			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e66	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e69	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e6b	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e6e					_DRFNotString
.9e6e	7a		ply				ply 								; restore Y and exit
.9e6f					_DRFExit:
.9e6f	60		rts				rts
.9e70					_DRFNullString:
>9e70	00						.byte 	0
.9e71					_DRFFull:
.9e71	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e73	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e75	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e78	c8		iny				iny
.9e79	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e7b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e7e	c8		iny				iny
.9e7f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e81	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e84	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e87	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9e8a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e8c	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9e8f	f0 06		beq $9e97			beq 	_DRFNoExponent
.9e91	c8		iny				iny 								; if not, read the exponent as well.
.9e92	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e94	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e97					_DRFNoExponent:
.9e97	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e9a	10 0d		bpl $9ea9			bpl 	_DRFExit2 					; if not, then exit.
.9e9c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e9e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ea1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9ea4	09 80		ora #$80			ora 	#NSBIsNegative
.9ea6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ea9					_DRFExit2:
.9ea9	7a		ply				ply
.9eaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9eab					EncodeNumberStart:
.9eab	38		sec				sec
.9eac	80 01		bra $9eaf			bra 	EncodeNumberContinue+1
.9eae					EncodeNumberContinue:
.9eae	18		clc				clc
.9eaf					EncodeNumber:
.9eaf	08		php				php 								; save reset.
.9eb0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9eb2	f0 12		beq $9ec6			beq 	_ENIsOkay
.9eb4	c9 30		cmp #$30			cmp 	#"0"
.9eb6	90 04		bcc $9ebc			bcc 	_ENBadNumber
.9eb8	c9 3a		cmp #$3a			cmp 	#"9"+1
.9eba	90 0a		bcc $9ec6			bcc 	_ENIsOkay
.9ebc					_ENBadNumber:
.9ebc	28		plp				plp 								; throw saved reset
.9ebd	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ec0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ec2	f0 7e		beq $9f42			beq 	_ENConstructFinal
.9ec4					_ENFail:
.9ec4	18		clc				clc 								; not allowed
.9ec5	60		rts				rts
.9ec6					_ENIsOkay:
.9ec6	28		plp				plp 								; are we restarting
.9ec7	90 15		bcc $9ede			bcc 	_ENNoRestart
.9ec9					_ENStartEncode:
.9ec9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ecb	f0 0c		beq $9ed9			beq 	_ENFirstDP
.9ecd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ecf	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.9ed2	a9 01		lda #$01			lda 	#ESTA_Low
.9ed4					_ENExitChange:
.9ed4	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ed7	38		sec				sec
.9ed8	60		rts				rts
.9ed9					_ENFirstDP:
.9ed9	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; clear integer part
.9edc	80 3f		bra $9f1d			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ede					_ENNoRestart:
.9ede	48		pha				pha 								; save on stack.
.9edf	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9ee2	c9 01		cmp #$01			cmp 	#ESTA_Low
.9ee4	f0 09		beq $9eef			beq  	_ESTALowState
.9ee6	c9 02		cmp #$02			cmp 	#ESTA_High
.9ee8	f0 29		beq $9f13			beq 	_ESTAHighState
.9eea	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eec	f0 3b		beq $9f29			beq 	_ESTADecimalState
>9eee	db						.byte 	$DB 						; causes a break in the emulator
.9eef					_ESTALowState:
.9eef	68		pla				pla 								; get value back
.9ef0	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ef2	f0 29		beq $9f1d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ef4	29 0f		and #$0f			and 	#15 						; make digit
.9ef6	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9ef9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9efc	0a		asl a				asl 	a
.9efd	0a		asl a				asl 	a
.9efe	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f01	0a		asl a				asl 	a
.9f02	6d 86 04	adc $0486			adc 	DigitTemp
.9f05	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f08	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f0a	90 05		bcc $9f11			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f0c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f0e	8d 85 04	sta $0485			sta 	EncodeState
.9f11					_ESTANoSwitch:
.9f11	38		sec				sec
.9f12	60		rts				rts
.9f13					_ESTAHighState:
.9f13	68		pla				pla 								; get value back
.9f14	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f16	f0 05		beq $9f1d			beq 	_ESTASwitchFloat
.9f18	20 7c 9f	jsr $9f7c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f1b	38		sec				sec
.9f1c	60		rts				rts
.9f1d					_ESTASwitchFloat:
.9f1d	9c 87 04	stz $0487			stz 	DecimalCount
.9f20	e8		inx				inx 								; zero the decimal additive.
.9f21	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.9f24	ca		dex				dex
.9f25	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f27	80 ab		bra $9ed4			bra 	_ENExitChange
.9f29					_ESTADecimalState:
.9f29	68		pla				pla 								; digit.
.9f2a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f2c	f0 96		beq $9ec4			beq 	_ENFail
.9f2e	e8		inx				inx 								; put digit into fractional part of X+1
.9f2f	20 7c 9f	jsr $9f7c			jsr 	ESTAShiftDigitIntoMantissa
.9f32	ca		dex				dex
.9f33	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f36	ad 87 04	lda $0487			lda 	DecimalCount
.9f39	c9 0b		cmp #$0b			cmp 	#11
.9f3b	f0 02		beq $9f3f			beq 	_ESTADSFail
.9f3d	38		sec				sec
.9f3e	60		rts				rts
.9f3f					_ESTADSFail:
.9f3f	4c de b2	jmp $b2de			jmp 	RangeError
.9f42					_ENConstructFinal:
.9f42	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f45	f0 33		beq $9f7a			beq 	_ENCFExit 					; no decimals
.9f47	5a		phy				phy
.9f48	0a		asl a				asl 	a 							; x 4 and CLC
.9f49	0a		asl a				asl 	a
.9f4a	6d 87 04	adc $0487			adc 	DecimalCount
.9f4d	a8		tay				tay
.9f4e	b9 9d b2	lda $b29d,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f51	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f54	b9 9e b2	lda $b29e,y			lda 	DecimalScalarTable-5+1,y
.9f57	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f5a	b9 9f b2	lda $b29f,y			lda 	DecimalScalarTable-5+2,y
.9f5d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f60	b9 a0 b2	lda $b2a0,y			lda 	DecimalScalarTable-5+3,y
.9f63	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f66	b9 a1 b2	lda $b2a1,y			lda 	DecimalScalarTable-5+4,y
.9f69	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f6c	a9 08		lda #$08			lda 	#NSTFloat
.9f6e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f71	7a		ply				ply
.9f72	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f73	20 25 b0	jsr $b025			jsr 	FloatMultiply
.9f76	ca		dex				dex
.9f77	20 ba ae	jsr $aeba			jsr 	FloatAdd 					; add to integer part.
.9f7a					_ENCFExit:
.9f7a	18		clc				clc 								; reject the digit.
.9f7b	60		rts				rts
.9f7c					ESTAShiftDigitIntoMantissa:
.9f7c	29 0f		and #$0f			and 	#15 						; save digit
.9f7e	48		pha				pha
.9f7f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f82	48		pha				pha
.9f83	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f86	48		pha				pha
.9f87	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f8a	48		pha				pha
.9f8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f8e	48		pha				pha
.9f8f	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 2
.9f92	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 4
.9f95	18		clc				clc 								; pop mantissa and add
.9f96	68		pla				pla
.9f97	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f9a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f9d	68		pla				pla
.9f9e	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fa1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fa4	68		pla				pla
.9fa5	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fa8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fab	68		pla				pla
.9fac	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9faf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fb2	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 10
.9fb5	68		pla				pla 								; add digit
.9fb6	18		clc				clc
.9fb7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbd	90 0d		bcc $9fcc			bcc 	_ESTASDExit
.9fbf	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fc2	d0 08		bne $9fcc			bne 	_ESTASDExit
.9fc4	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fc7	d0 03		bne $9fcc			bne 	_ESTASDExit
.9fc9	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fcc					_ESTASDExit:
.9fcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fcd					EvaluateTerm:
.9fcd	b1 30		lda ($30),y			lda 	(codePtr),y
.9fcf	30 18		bmi $9fe9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fd1	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fd3	b0 6f		bcs $a044			bcs 	_ETVariable
.9fd5	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fd7	90 6e		bcc $a047			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fd9	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fdb	b0 6a		bcs $a047			bcs 	_ETPuncUnary
.9fdd	20 ab 9e	jsr $9eab			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fe0					_ETNumber:
.9fe0	c8		iny				iny 								; keep encoding until we have the numbers
.9fe1	b1 30		lda ($30),y			lda 	(codePtr),y
.9fe3	20 ae 9e	jsr $9eae			jsr 	EncodeNumberContinue
.9fe6	b0 f8		bcs $9fe0			bcs 	_ETNumber 					; go back if accepted.
.9fe8	60		rts				rts
.9fe9					_ETCheckUnary:
.9fe9	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9feb	f0 41		beq $a02e			beq 	_ETString
.9fed	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fef	f0 12		beq $a003			beq 	_ETHexConstant
.9ff1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ff3	90 0b		bcc $a000			bcc 	_ETSyntaxError
.9ff5	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1
.9ff7	b0 07		bcs $a000			bcs 	_ETSyntaxError
.9ff9	da		phx				phx 								; push X on the stack
.9ffa	0a		asl a				asl 	a 							; put vector x 2 into X
.9ffb	aa		tax				tax
.9ffc	c8		iny				iny 								; consume unary function token
.9ffd	7c 6e 95	jmp ($956e,x)			jmp 	(VectorSet0,x) 				; and do it.
.a000					_ETSyntaxError:
.a000	4c d9 b2	jmp $b2d9			jmp 	SyntaxError
.a003					_ETHexConstant:
.a003	c8		iny				iny 								; skip #
.a004	c8		iny				iny 								; skip count
.a005	20 cb a4	jsr $a4cb			jsr 	NSMSetZero 					; clear result
.a008					_ETHLoop:
.a008	b1 30		lda ($30),y			lda 	(codePtr),y
.a00a	c8		iny				iny 								; and consume
.a00b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a00d	f0 1e		beq $a02d			beq 	_ETHExit
.a00f	48		pha				pha 								; save on stack.
.a010	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 2
.a013	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 4
.a016	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 8
.a019	20 e0 a4	jsr $a4e0			jsr 	NSMShiftLeft 				; x 16
.a01c	68		pla				pla 								; ASCII
.a01d	c9 41		cmp #$41			cmp 	#'A'
.a01f	90 02		bcc $a023			bcc 	_ETHNotChar
.a021	e9 07		sbc #$07			sbc 	#7
.a023					_ETHNotChar:
.a023	29 0f		and #$0f			and 	#15 						; digit now
.a025	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a028	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a02b	80 db		bra $a008			bra 	_ETHLoop 					; go round.
.a02d					_ETHExit:
.a02d	60		rts				rts
.a02e					_ETString:
.a02e	c8		iny				iny 								; look at length
.a02f	b1 30		lda ($30),y			lda 	(codePtr),y
.a031	48		pha				pha
.a032	c8		iny				iny 								; first character
.a033	20 15 a5	jsr $a515			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a036	68		pla				pla 								; restore count and save
.a037	85 36		sta $36				sta 	zTemp0
.a039	98		tya				tya 								; add length to Y to skip it.
.a03a	18		clc				clc
.a03b	65 36		adc $36				adc 	zTemp0
.a03d	a8		tay				tay
.a03e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a040	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a043	60		rts				rts
.a044					_ETVariable:
.a044	4c 9e a0	jmp $a09e			jmp 	VariableHandler
.a047					_ETPuncUnary:
.a047	c8		iny				iny 								; consume the unary character
.a048	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a04a	f0 2d		beq $a079			beq 	_ETUnaryNegate
.a04c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a04e	f0 39		beq $a089			beq 	_ETDereference
.a050	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a052	f0 43		beq $a097			beq 	_ETParenthesis
.a054	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a056	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a058	f0 06		beq $a060			beq 	_ETIndirection
.a05a	e6 36		inc $36				inc 	zTemp0
.a05c	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a05e	d0 a0		bne $a000			bne 	_ETSyntaxError
.a060					_ETIndirection:
.a060	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a062	1a		inc a				inc 	a
.a063	48		pha				pha
.a064	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm				; evaluate the term
.a067	20 11 9e	jsr $9e11			jsr 	Dereference 				; dereference it.
.a06a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a06d	d0 07		bne $a076			bne 	_ETTypeMismatch
.a06f	68		pla				pla 								; indirection 1-2
.a070	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a072	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a075	60		rts				rts
.a076					_ETTypeMismatch:
.a076	4c e3 b2	jmp $b2e3			jmp 	TypeError
.a079					_ETUnaryNegate:
.a079	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm				; evaluate the term
.a07c	20 11 9e	jsr $9e11			jsr 	Dereference 				; dereference it.
.a07f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a082	29 10		and #$10			and 	#NSTString
.a084	d0 f0		bne $a076			bne 	_ETTypeMismatch
.a086	4c 77 a4	jmp $a477			jmp 	NSMNegate  					; just toggles the sign bit.
.a089					_ETDereference:
.a089	20 cd 9f	jsr $9fcd			jsr 	EvaluateTerm				; evaluate the term
.a08c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a08f	29 20		and #$20			and 	#NSBIsReference
.a091	f0 e3		beq $a076			beq 	_ETTypeMismatch
.a093	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a096	60		rts				rts
.a097					_ETParenthesis:
.a097	20 fc 9c	jsr $9cfc			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a09a	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; check for )
.a09d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a09e					VariableHandler:
.a09e	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a0	18		clc				clc
.a0a1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0a3	85 37		sta $37				sta 	zTemp0+1
.a0a5	c8		iny				iny
.a0a6	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a8	85 36		sta $36				sta 	zTemp0
.a0aa	c8		iny				iny
.a0ab	18		clc				clc									; copy variable address+3 to mantissa
.a0ac	69 03		adc #$03			adc 	#3
.a0ae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0b1	a5 37		lda $37				lda 	zTemp0+1
.a0b3	69 00		adc #$00			adc 	#0
.a0b5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0b8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0bb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0be	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0c1	5a		phy				phy
.a0c2	a0 02		ldy #$02			ldy 	#2 							; read type
.a0c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c6	7a		ply				ply
.a0c7	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0c9	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0cb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0ce	29 04		and #$04			and 	#NSBIsArray
.a0d0	d0 01		bne $a0d3			bne 	_VHArray
.a0d2	60		rts				rts
.a0d3					_VHArray:
.a0d3	e8		inx				inx
.a0d4	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0d7	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0d9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0dc	b1 30		lda ($30),y			lda 	(codePtr),y
.a0de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0e0	d0 06		bne $a0e8			bne 	_VHNoSecondIndex
.a0e2	c8		iny				iny 								; skip the comma
.a0e3	e8		inx				inx
.a0e4	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0e7	ca		dex				dex
.a0e8					_VHNoSecondIndex:
.a0e8	ca		dex				dex 								; set X back.
.a0e9	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; and check the right bracket.
.a0ec	5a		phy				phy 								; save position
.a0ed	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0ef	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f1	f0 6b		beq $a15e			beq 	_VHBadIndex
.a0f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a0f6	85 3e		sta $3e				sta 	zaTemp
.a0f8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0fb	85 3f		sta $3f				sta 	zaTemp+1
.a0fd	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0ff	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a101	f0 02		beq $a105			beq 	_VHHas2Mask
.a103	a9 ff		lda #$ff			lda 	#$FF
.a105					_VHHas2Mask:
.a105	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a108	f0 54		beq $a15e			beq 	_VHBadIndex
.a10a	0a		asl a				asl 	a 							; carry will be set if a second index
.a10b	90 09		bcc $a116			bcc 	_VHCheckFirstIndex
.a10d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a10f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a111	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a114	90 48		bcc $a15e			bcc 	_VHBadIndex
.a116					_VHCheckFirstIndex:
.a116	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a118	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a11a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a11d	90 3f		bcc $a15e			bcc 	_VHBadIndex
.a11f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a121	64 37		stz $37				stz 	zTemp0+1
.a123	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a126	30 0f		bmi $a137			bmi 	_VHNoMultiply
.a128	da		phx				phx
.a129	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a12c	48		pha				pha
.a12d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a12f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a131	1a		inc a				inc 	a 							; add 1 for zero base
.a132	fa		plx				plx
.a133	20 75 b1	jsr $b175			jsr 	Multiply8x8 				; calculate -> Z0
.a136	fa		plx				plx
.a137					_VHNoMultiply:
.a137	18		clc				clc
.a138	a5 36		lda $36				lda 	zTemp0
.a13a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a13d	85 36		sta $36				sta 	zTemp0
.a13f	a5 37		lda $37				lda 	zTemp0+1
.a141	69 00		adc #$00			adc 	#0
.a143	85 37		sta $37				sta 	zTemp0+1
.a145	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a148	20 ce 8c	jsr $8cce			jsr 	ScaleByBaseType
.a14b	18		clc				clc
.a14c	b2 3e		lda ($3e)			lda 	(zaTemp)
.a14e	65 36		adc $36				adc 	zTemp0
.a150	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a153	a0 01		ldy #$01			ldy 	#1
.a155	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a157	65 37		adc $37				adc 	zTemp0+1
.a159	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a15c	7a		ply				ply 								; restore position
.a15d	60		rts				rts
.a15e					_VHBadIndex:
.a15e	a9 17		lda #$17		lda	#23
.a160	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b0ab					AbsUnary:
.b0ab	fa		plx				plx 								; restore stack pos
.b0ac	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; get a float or int
.b0af	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b0b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b0b5	29 7f		and #$7f			and 	#$7F
.b0b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a163					AllocUnary:
.a163	fa		plx				plx 								; restore stack pos
.a164	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger		; get bytes required.
.a167	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.a16a	da		phx				phx 								; save X/Y
.a16b	5a		phy				phy
.a16c	8a		txa				txa 								; copy X into Y
.a16d	a8		tay				tay
.a16e	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a171	aa		tax				tax
.a172	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a175	20 82 a1	jsr $a182			jsr 	AllocateXABytes 			; allocate memory
.a178	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a17b	8a		txa				txa
.a17c	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a17f	7a		ply				ply
.a180	fa		plx				plx
.a181	60		rts				rts
.a182					AllocateXABytes:
.a182	5a		phy				phy
.a183	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a186	84 36		sty $36				sty 	zTemp0
.a188	5a		phy				phy
.a189	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a18c	84 37		sty $37				sty 	zTemp0+1
.a18e	5a		phy				phy
.a18f	18		clc				clc 								; add to low memory pointer
.a190	6d 8c 04	adc $048c			adc 	lowMemPtr
.a193	8d 8c 04	sta $048c			sta 	lowMemPtr
.a196	8a		txa				txa
.a197	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a19a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a19d	b0 2f		bcs $a1ce			bcs 	CISSMemory
.a19f	20 c0 a1	jsr $a1c0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1a2					_ClearMemory:
.a1a2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1a5	c5 36		cmp $36				cmp 	zTemp0
.a1a7	d0 07		bne $a1b0			bne 	_CMClearNext
.a1a9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1ac	c5 37		cmp $37				cmp 	zTemp0+1
.a1ae	f0 0c		beq $a1bc			beq 	_CMExit
.a1b0					_CMClearNext:
.a1b0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1b2	92 36		sta ($36)			sta 	(zTemp0)
.a1b4	e6 36		inc $36				inc 	zTemp0
.a1b6	d0 ea		bne $a1a2			bne 	_ClearMemory
.a1b8	e6 37		inc $37				inc		zTemp0+1
.a1ba	80 e6		bra $a1a2			bra 	_ClearMemory
.a1bc					_CMExit:
.a1bc	fa		plx				plx
.a1bd	68		pla				pla
.a1be	7a		ply				ply
.a1bf	60		rts				rts
.a1c0					CheckIdentifierStringSpace:
.a1c0	48		pha				pha
.a1c1	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1c4	18		clc				clc
.a1c5	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1c7	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1ca	b0 02		bcs $a1ce			bcs 	CISSMemory
.a1cc	68		pla				pla
.a1cd	60		rts				rts
.a1ce					CISSMemory:
.a1ce	a9 06		lda #$06		lda	#6
.a1d0	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b0bb					AscUnary:
.b0bb	fa		plx				plx 								; restore stack pos
.b0bc	20 16 a4	jsr $a416			jsr 	EvaluateString 				; get a string
.b0bf	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b0c1	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.b0c4	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b0c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b0c8					FracUnary:
.b0c8	fa		plx				plx 								; restore stack pos
.b0c9	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; get a float or int
.b0cc	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b0cf	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0d2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0d4	f0 04		beq $b0da			beq 	_IUZero
.b0d6	20 98 af	jsr $af98			jsr 	FloatFractionalPart
.b0d9	60		rts				rts
.b0da					_IUZero:
.b0da	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.b0dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b0de					IntUnary:
.b0de	fa		plx				plx 								; restore stack pos
.b0df	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; get a float or int
.b0e2	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b0e5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0e8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0ea	f0 03		beq $b0ef			beq 	_IUExit
.b0ec	20 fb af	jsr $affb			jsr 	FloatIntegerPart
.b0ef					_IUExit:
.b0ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b0f0					LenUnary:
.b0f0	fa		plx				plx 								; restore stack pos
.b0f1	20 16 a4	jsr $a416			jsr 	EvaluateString 				; get a string
.b0f4	5a		phy				phy
.b0f5	a0 00		ldy #$00			ldy 	#0 							; find length
.b0f7					_LenFind:
.b0f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.b0f9	f0 06		beq $b101			beq 	_LenExit
.b0fb	c8		iny				iny
.b0fc	d0 f9		bne $b0f7			bne 	_LenFind
.b0fe	4c de b2	jmp $b2de			jmp 	RangeError 					; string > 255
.b101					_LenExit:
.b101	98		tya				tya
.b102	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.b105	7a		ply				ply
.b106	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b109	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1d3					Unary_Not:
.a1d3	fa		plx				plx
.a1d4	20 2e a4	jsr $a42e			jsr 	EvaluateInteger 			; get integer
.a1d7	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.a1da	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; zero mantissa ?
.a1dd	f0 04		beq $a1e3			beq 	_NotZero
.a1df	20 cb a4	jsr $a4cb			jsr 	NSMSetZero
.a1e2	60		rts				rts
.a1e3					_NotZero:
.a1e3	4c 60 99	jmp $9960			jmp 	ReturnTrue
.a1e6					_UNBad:
.a1e6	4c e8 b2	jmp $b2e8			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1e9					Unary_Random:
.a1e9	fa		plx				plx
.a1ea	20 68 a2	jsr $a268			jsr 	Random32Bit 				; get a random number
.a1ed	20 4d a2	jsr $a24d			jsr 	URCopyToMantissa  			; put in mantissa
.a1f0	b1 30		lda ($30),y			lda 	(codePtr),y
.a1f2	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a1f4	f0 08		beq $a1fe			beq 	_URNoModulus
.a1f6	e8		inx				inx
.a1f7	20 43 a4	jsr $a443			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a1fa	ca		dex				dex
.a1fb	20 77 ad	jsr $ad77			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a1fe					_URNoModulus:
.a1fe	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a201	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a204	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.a207	60		rts				rts
.a208					Unary_Rnd:
.a208	fa		plx				plx
.a209	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; number to use.
.a20c	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; closing bracket
.a20f	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a212	f0 2b		beq $a23f			beq 	_URCopySeed
.a214	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a217	10 23		bpl $a23c			bpl 	_URDontSeed
.a219	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a21c	49 17		eor #$17			eor 	#$17
.a21e	8d 88 04	sta $0488			sta 	RandomSeed+0
.a221	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a224	49 a5		eor #$a5			eor 	#$A5
.a226	8d 89 04	sta $0489			sta 	RandomSeed+1
.a229	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a22c	49 c2		eor #$c2			eor 	#$C2
.a22e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a231	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a234	49 9d		eor #$9d			eor 	#$9D
.a236	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a239	20 68 a2	jsr $a268			jsr 	Random32Bit
.a23c					_URDontSeed:
.a23c	20 68 a2	jsr $a268			jsr 	Random32Bit 				; generate a number.
.a23f					_URCopySeed:
.a23f	20 4d a2	jsr $a24d			jsr 	URCopyToMantissa 			; copy into mantissa
.a242	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a244	8d 28 04	sta $0428			sta 	NSExponent
.a247	a9 08		lda #$08			lda 	#NSTFloat
.a249	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a24c	60		rts				rts
.a24d					URCopyToMantissa:
.a24d	ad 88 04	lda $0488			lda 	RandomSeed+0
.a250	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a253	ad 89 04	lda $0489			lda 	RandomSeed+1
.a256	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a259	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a25c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a25f	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a262	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a264	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a267	60		rts				rts
.a268					Random32Bit:
.a268	5a		phy				phy
.a269	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a26b	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a26e	d0 03		bne $a273			bne 	_Random1
.a270	a8		tay				tay 								; if so do it 256 times
.a271	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a273					_Random1:
.a273	0a		asl a				asl 	a 							; LSFR RNG
.a274	2e 89 04	rol $0489			rol 	RandomSeed+1
.a277	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a27a	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a27d	90 02		bcc $a281			bcc 	_Random2
.a27f	49 c5		eor #$c5			eor 	#$C5
.a281					_Random2:
.a281	88		dey				dey
.a282	d0 ef		bne $a273			bne 	_Random1
.a284	8d 88 04	sta $0488			sta 	RandomSeed+0
.a287	7a		ply				ply
.a288	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b10a					SgnUnary:
.b10a	fa		plx				plx 								; restore stack pos
.b10b	20 0b a4	jsr $a40b			jsr 	EvaluateNumber 				; get a float or int
.b10e	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.b111	20 fb a4	jsr $a4fb			jsr 	NSMIsZero 					; if zero
.b114	f0 10		beq $b126			beq 	_SGZero  					; return Int Zero
.b116	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b119	48		pha				pha
.b11a	a9 01		lda #$01			lda 	#1 							; set to 1
.b11c	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.b11f	68		pla				pla
.b120	29 80		and #$80			and		#$80 						; copy the sign byte out
.b122	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b125	60		rts				rts
.b126	20 cb a4	jsr $a4cb	_SGZero:jsr 	NSMSetZero
.b129	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b12a					ValUnary:
.b12a	fa		plx				plx 								; restore stack pos
.b12b	20 40 b1	jsr $b140			jsr 	ValMainCode 				; do the main val() code
.b12e	b0 01		bcs $b131			bcs 	_VUError 					; couldn't convert
.b130	60		rts				rts
.b131					_VUError:
.b131	4c e3 b2	jmp $b2e3			jmp 	TypeError
.b134					IsValUnary:
.b134	fa		plx				plx 								; restore stack pos
.b135	20 40 b1	jsr $b140			jsr 	ValMainCode 				; do the main val() code
.b138	b0 03		bcs $b13d			bcs 	_VUBad
.b13a	4c 60 99	jmp $9960			jmp 	ReturnTrue
.b13d					_VUBad:
.b13d	4c 6c 99	jmp $996c			jmp 	ReturnFalse
.b140					ValMainCode:
.b140	20 16 a4	jsr $a416			jsr 	EvaluateString 				; get a string
.b143	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; check right bracket present
.b146	5a		phy				phy
.b147	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b149	f0 17		beq $b162			beq 	_VMCFail2
.b14b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b14d	48		pha				pha 								; save first character
.b14e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b150	d0 01		bne $b153			bne 	_VMCStart
.b152	c8		iny				iny 								; skip over -
.b153					_VMCStart:
.b153	38		sec				sec 								; initialise first time round.
.b154					_VMCNext:
.b154	c8		iny				iny 								; pre-increment
.b155	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b157	f0 0c		beq $b165			beq 	_VMCSuccess 				; successful.
.b159	20 af 9e	jsr $9eaf			jsr 	EncodeNumber 				; send it to the number-builder
.b15c	90 03		bcc $b161			bcc 	_VMCFail 					; if failed, give up.
.b15e	18		clc				clc 								; next time round, countinue
.b15f	80 f3		bra $b154			bra 	_VMCNext
.b161					_VMCFail:
.b161	68		pla				pla
.b162					_VMCFail2:
.b162	7a		ply				ply
.b163	38		sec				sec
.b164	60		rts				rts
.b165					_VMCSuccess:
.b165	a9 00		lda #$00			lda 	#0 							; construct final
.b167	20 af 9e	jsr $9eaf			jsr 	EncodeNumber
.b16a	68		pla				pla
.b16b	c9 2d		cmp #$2d			cmp 	#"-"
.b16d	d0 03		bne $b172			bne 	_VMCNotNegative
.b16f	20 77 a4	jsr $a477			jsr		NSMNegate
.b172					_VMCNotNegative:
.b172	7a		ply				ply
.b173	18		clc				clc
.b174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a289					ChrUnary:
.a289	fa		plx				plx 								; restore stack pos
.a28a	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger			; get value
.a28d	48		pha				pha
.a28e	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.a291	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a293	20 5d b6	jsr $b65d			jsr 	StringTempAllocate
.a296	68		pla				pla 								; write number to it
.a297	20 9b b6	jsr $b69b			jsr 	StringTempWrite
.a29a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a29b					SpcUnary:
.a29b	fa		plx				plx 								; restore stack pos
.a29c	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger			; get value
.a29f	5a		phy				phy
.a2a0	48		pha				pha 								; save count
.a2a1	20 5d b6	jsr $b65d			jsr 	StringTempAllocate
.a2a4	7a		ply				ply 								; to do count in Y
.a2a5					_SpcLoop:
.a2a5	c0 00		cpy #$00			cpy 	#0
.a2a7	f0 08		beq $a2b1			beq 	_SpcExit
.a2a9	a9 20		lda #$20			lda 	#32
.a2ab	20 9b b6	jsr $b69b			jsr 	StringTempWrite
.a2ae	88		dey				dey
.a2af	80 f4		bra $a2a5			bra 	_SPCLoop
.a2b1					_SpcExit:
.a2b1	7a		ply				ply
.a2b2	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket
.a2b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a2b6					Unary_Str:
.a2b6	fa		plx				plx
.a2b7	20 0b a4	jsr $a40b			jsr 	EvaluateNumber  			; get number
.a2ba	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; closing bracket
.a2bd	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a2bf	20 d8 a2	jsr $a2d8			jsr 	ConvertNumberToString 		; do the conversion.
.a2c2	a9 21		lda #$21			lda		#33 						; create buffer
.a2c4	20 5d b6	jsr $b65d			jsr 	StringTempAllocate 			; allocate memory
.a2c7	da		phx				phx
.a2c8	a2 00		ldx #$00			ldx 	#0
.a2ca					_USCopy:
.a2ca	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2cd	20 9b b6	jsr $b69b			jsr 	StringTempWrite
.a2d0	e8		inx				inx
.a2d1	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2d4	d0 f4		bne $a2ca			bne 	_USCopy
.a2d6	fa		plx				plx
.a2d7	60		rts				rts
.a2d8					ConvertNumberToString:
.a2d8	5a		phy				phy 								; save code position
.a2d9	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2dc	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2df	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2e2	10 0a		bpl $a2ee			bpl 	_CNTSNotNegative
.a2e4	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2e9	a9 2d		lda #$2d			lda 	#"-"
.a2eb	20 54 a3	jsr $a354			jsr 	WriteDecimalBuffer
.a2ee					_CNTSNotNegative:
.a2ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a2f1	f0 15		beq $a308			beq 	_CNTSNotFloat
.a2f3	e8		inx				inx 								; round up
.a2f4	a9 01		lda #$01			lda 	#1
.a2f6	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.a2f9	ca		dex				dex
.a2fa	bd 28 04	lda $0428,x			lda		NSExponent,x
.a2fd	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a300	a9 08		lda #$08			lda 	#NSTFloat
.a302	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a305	20 ba ae	jsr $aeba			jsr 	FloatAdd
.a308					_CNTSNotFloat:
.a308	20 36 a3	jsr $a336			jsr 	MakePlusTwoString
.a30b	20 98 af	jsr $af98			jsr 	FloatFractionalPart 		; get the fractional part
.a30e	20 5c b0	jsr $b05c			jsr 	NSNormalise					; normalise , exit if zero
.a311	f0 21		beq $a334			beq 	_CNTSExit
.a313	a9 2e		lda #$2e			lda 	#"."
.a315	20 54 a3	jsr $a354			jsr 	WriteDecimalBuffer 			; write decimal place
.a318					_CNTSDecimal:
.a318	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a31b	30 17		bmi $a334			bmi 	_CNTSExit
.a31d	e8		inx				inx 								; x 10.0
.a31e	a9 0a		lda #$0a			lda 	#10
.a320	20 cd a4	jsr $a4cd			jsr 	NSMSetByte
.a323	a9 08		lda #$08			lda 	#NSTFloat
.a325	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a328	ca		dex				dex
.a329	20 25 b0	jsr $b025			jsr 	FloatMultiply
.a32c	20 36 a3	jsr $a336			jsr 	MakePlusTwoString
.a32f	20 98 af	jsr $af98			jsr 	FloatFractionalPart 		; get the fractional part
.a332	80 e4		bra $a318			bra 	_CNTSDecimal 				; keep going.
.a334					_CNTSExit:
.a334	7a		ply				ply
.a335	60		rts				rts
.a336					MakePlusTwoString:
.a336	da		phx				phx
.a337	20 a2 a4	jsr $a4a2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a33a	e8		inx				inx 								; access it
.a33b	e8		inx				inx
.a33c	20 fb af	jsr $affb			jsr 	FloatIntegerPart 			; make it an integer
.a33f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a341	20 64 ae	jsr $ae64			jsr 	ConvertInt32
.a344	a2 00		ldx #$00			ldx	 	#0
.a346					_MPTSCopy:
.a346	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a349	20 54 a3	jsr $a354			jsr 	WriteDecimalBuffer
.a34c	e8		inx				inx
.a34d	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a350	d0 f4		bne $a346			bne 	_MPTSCopy
.a352	fa		plx				plx
.a353	60		rts				rts
.a354					WriteDecimalBuffer:
.a354	da		phx				phx
.a355	ae 95 04	ldx $0495			ldx 	dbOffset
.a358	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a35b	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a35e	ee 95 04	inc $0495			inc 	dbOffset
.a361	fa		plx				plx
.a362	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a363					Unary_Left:
.a363	fa		plx				plx
.a364	18		clc				clc 								; only one parameter
.a365	20 da a3	jsr $a3da			jsr 	SubstringInitial 			; set up.
.a368	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a36b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a36e	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a371	80 2c		bra $a39f			bra 	SubstringMain
.a373					Unary_Right:
.a373	fa		plx				plx
.a374	18		clc				clc 								; only one parameter
.a375	20 da a3	jsr $a3da			jsr 	SubstringInitial 			; set up.
.a378	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a37b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a37e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a381	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a384	b0 02		bcs $a388			bcs 	_URNotUnderflow
.a386	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a388					_URNotUnderFlow:
.a388	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a38b	80 12		bra $a39f			bra 	SubStringMain
.a38d					Unary_Mid:
.a38d	fa		plx				plx
.a38e	38		sec				sec 								; two parameters
.a38f	20 da a3	jsr $a3da			jsr 	SubstringInitial 			; set up.
.a392	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a395	f0 05		beq $a39c			beq 	_UMError
.a397	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a39a	80 03		bra $a39f			bra 	SubStringMain
.a39c					_UMError:
.a39c	4c e8 b2	jmp $b2e8			jmp 	ArgumentError
.a39f					SubStringMain:
.a39f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a3a2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a3a5	b0 2d		bcs $a3d4			bcs 	_SSMNull 					; if so, return an empty string.
.a3a7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a3aa	f0 28		beq $a3d4			beq 	_SSMNull 					; return empty string.
.a3ac	18		clc				clc 								; add the offset +1 to the address and
.a3ad	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a3b0	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a3b3	85 36		sta $36				sta 	zTemp0
.a3b5	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a3b8	69 00		adc #$00			adc 	#0
.a3ba	85 37		sta $37				sta 	zTemp0+1
.a3bc					_SSMNoCarry:
.a3bc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a3bf	20 5d b6	jsr $b65d			jsr 	StringTempAllocate 			; allocate that many characters
.a3c2	5a		phy				phy 								; save Y
.a3c3	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3c5					_SSMCopy:
.a3c5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3c7	f0 09		beq $a3d2			beq 	_SSMEString 				; no more to copy
.a3c9	20 9b b6	jsr $b69b			jsr 	StringTempWrite 			; and write it out.
.a3cc	c8		iny				iny
.a3cd	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3d0	d0 f3		bne $a3c5			bne 	_SSMCopy
.a3d2					_SSMEString:
.a3d2	7a		ply				ply
.a3d3					_SSMExit:
.a3d3	60		rts				rts
.a3d4					_SSMNull:
.a3d4	a9 00		lda #$00			lda 	#0
.a3d6	20 5d b6	jsr $b65d			jsr 	StringTempAllocate
.a3d9	60		rts				rts
.a3da					SubstringInitial:
.a3da	da		phx				phx 								; save initial stack position
.a3db	08		php				php 								; save carry on stack indicating 2 parameters
.a3dc	20 16 a4	jsr $a416			jsr 	EvaluateString 				; get a string
.a3df	5a		phy				phy 								; calculate length to exponent.
.a3e0	a0 ff		ldy #$ff			ldy 	#$FF
.a3e2					_SIFindLength:
.a3e2	c8		iny				iny
.a3e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3e5	d0 fb		bne $a3e2			bne 	_SIFindLength
.a3e7	98		tya				tya
.a3e8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3eb	7a		ply				ply
.a3ec	e8		inx				inx
.a3ed	20 fb ac	jsr $acfb			jsr 	CheckComma 					; comma next
.a3f0	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get next parameter
.a3f3	28		plp				plp 								; is it the last parameter ?
.a3f4	90 07		bcc $a3fd			bcc 	_SSIExit 					; if so, exit.
.a3f6	e8		inx				inx
.a3f7	20 fb ac	jsr $acfb			jsr 	CheckComma 					; comma next
.a3fa	20 63 a4	jsr $a463			jsr 	Evaluate8BitInteger 		; get last parameter
.a3fd					_SSIExit:
.a3fd	fa		plx				plx
.a3fe	20 f3 ac	jsr $acf3			jsr 	CheckRightBracket 			; check closing bracket
.a401	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a402					EvaluateValue:
.a402	48		pha				pha
.a403	20 fc 9c	jsr $9cfc			jsr		EvaluateExpression 			; expression
.a406	20 11 9e	jsr $9e11			jsr 	Dereference					; derefernce it
.a409	68		pla				pla
.a40a	60		rts				rts
.a40b					EvaluateNumber:
.a40b	20 02 a4	jsr $a402			jsr 	EvaluateValue 				; get a value
.a40e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a411	29 10		and #$10			and 	#NSBIsString
.a413	d0 16		bne $a42b			bne 	HelperTypeError
.a415	60		rts				rts
.a416					EvaluateString:
.a416	20 02 a4	jsr $a402			jsr 	EvaluateValue 				; get a value
.a419	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a41c	29 10		and #$10			and 	#NSBIsString
.a41e	f0 0b		beq $a42b			beq 	HelperTypeError
.a420					CopyAddressToTemp0:
.a420	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a423	85 36		sta $36				sta 	zTemp0
.a425	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a428	85 37		sta $37				sta 	zTemp0+1
.a42a	60		rts				rts
.a42b					HelperTypeError:
.a42b	4c e3 b2	jmp $b2e3			jmp 	TypeError
.a42e					EvaluateInteger:
.a42e	20 0b a4	jsr $a40b			jsr 	EvaluateNumber
.a431	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a434	d0 0a		bne $a440			bne 	HelperValueError 			; if not, it's a float.
.a436	60		rts				rts
.a437					EvaluateUnsignedInteger:
.a437	20 2e a4	jsr $a42e			jsr 	EvaluateInteger 			; check integer is +ve
.a43a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a43d	30 01		bmi $a440			bmi 	HelperValueError
.a43f	60		rts				rts
.a440					HelperValueError:
.a440	4c e8 b2	jmp $b2e8			jmp 	ArgumentError
.a443					Evaluate16BitInteger:
.a443	20 37 a4	jsr $a437			jsr	 	EvaluateUnsignedInteger		; get integer
.a446	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a449	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a44c	d0 f2		bne $a440			bne 	HelperValueError
.a44e	60		rts				rts
.a44f					Evaluate16BitIntegerSigned:
.a44f	20 2e a4	jsr $a42e			jsr	 	EvaluateInteger				; get integer
.a452	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a455	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a458	d0 e6		bne $a440			bne 	HelperValueError
.a45a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a45d	10 03		bpl $a462			bpl 	_EISNotSigned
.a45f	20 80 a4	jsr $a480			jsr 	NSMNegateMantissa
.a462					_EISNotSigned:
.a462	60		rts				rts
.a463					Evaluate8BitInteger:
.a463	20 37 a4	jsr $a437			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a466	d0 d8		bne $a440			bne 	HelperValueError
.a468	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a46b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a46e	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a471	d0 cd		bne $a440			bne 	HelperValueError
.a473	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a476	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b175					Multiply8x8:
.b175	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b176	85 36		sta $36			  	sta 	zTemp0
.b178	86 37		stx $37				stx 	zTemp0+1
.b17a	a9 00		lda #$00			lda 	#0
.b17c	a2 08		ldx #$08			ldx 	#8
.b17e					_M88Loop:
.b17e	90 03		bcc $b183			bcc 	_M88NoAdd
.b180	18		clc				clc
.b181	65 37		adc $37				adc 	zTemp0+1
.b183					_M88NoAdd:
.b183	6a		ror a				ror 	a
.b184	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b186	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b187	d0 f5		bne $b17e			bne 	_M88Loop
.b189	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b18b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a477					NSMNegate:
.a477	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a47a	49 80		eor #$80			eor 	#NSBIsNegative
.a47c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a47f	60		rts				rts
.a480					NSMNegateMantissa:
.a480	38		sec				sec
.a481	a9 00		lda #$00			lda 	#0
.a483	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a486	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a489	a9 00		lda #$00			lda 	#0
.a48b	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a48e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a491	a9 00		lda #$00			lda 	#0
.a493	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a496	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a499	a9 00		lda #$00			lda 	#0
.a49b	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a49e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4a1	60		rts				rts
.a4a2					NSMShiftUpTwo:
.a4a2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4a5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4ab	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a4ae	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a4b1	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a4b4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4b7	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a4ba	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4bd	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a4c0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4c3	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a4c6	60		rts				rts
.a4c7					NSMSetZeroMantissaOnly:
.a4c7	a9 00		lda #$00			lda 	#0
.a4c9	80 08		bra $a4d3			bra 	NSMSetMantissa
.a4cb					NSMSetZero:
.a4cb	a9 00		lda #$00			lda 	#0
.a4cd					NSMSetByte:
.a4cd	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a4d0	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a4d3					NSMSetMantissa:
.a4d3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4d6	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4d9	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4dc	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4df	60		rts				rts
.a4e0					NSMShiftLeft:
.a4e0	18		clc				clc
.a4e1					NSMRotateLeft:
.a4e1	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4e4	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4e7	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4ea	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4ed	60		rts				rts
.a4ee					NSMShiftRight:
.a4ee	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4f1	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4f4	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a4f7	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a4fa	60		rts				rts
.a4fb					NSMIsZero:
.a4fb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4fe	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a501	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a504	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a507	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b18c					Assemble_ora:
.b18c	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b18f	01					.byte $01
.b190					Assemble_and:
.b190	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b193	21					.byte $21
.b194					Assemble_eor:
.b194	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b197	41					.byte $41
.b198					Assemble_adc:
.b198	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b19b	61					.byte $61
.b19c					Assemble_sta:
.b19c	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b19f	81					.byte $81
.b1a0					Assemble_lda:
.b1a0	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b1a3	a1					.byte $a1
.b1a4					Assemble_cmp:
.b1a4	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b1a7	c1					.byte $c1
.b1a8					Assemble_sbc:
.b1a8	20 c7 88	jsr $88c7		jsr	AssembleGroup1
>b1ab	e1					.byte $e1
.b1ac					Assemble_asl:
.b1ac	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1af	02					.byte $02
>b1b0	75					.byte $75
.b1b1					Assemble_rol:
.b1b1	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1b4	22					.byte $22
>b1b5	75					.byte $75
.b1b6					Assemble_lsr:
.b1b6	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1b9	42					.byte $42
>b1ba	75					.byte $75
.b1bb					Assemble_ror:
.b1bb	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1be	62					.byte $62
>b1bf	75					.byte $75
.b1c0					Assemble_stx:
.b1c0	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1c3	82					.byte $82
>b1c4	50					.byte $50
.b1c5					Assemble_ldx:
.b1c5	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1c8	a2					.byte $a2
>b1c9	d0					.byte $d0
.b1ca					Assemble_dec:
.b1ca	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1cd	c2					.byte $c2
>b1ce	55					.byte $55
.b1cf					Assemble_inc:
.b1cf	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1d2	e2					.byte $e2
>b1d3	55					.byte $55
.b1d4					Assemble_stz:
.b1d4	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1d7	60					.byte $60
>b1d8	44					.byte $44
.b1d9					Assemble_bit:
.b1d9	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1dc	20					.byte $20
>b1dd	55					.byte $55
.b1de					Assemble_sty:
.b1de	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1e1	80					.byte $80
>b1e2	54					.byte $54
.b1e3					Assemble_ldy:
.b1e3	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1e6	a0					.byte $a0
>b1e7	d5					.byte $d5
.b1e8					Assemble_cpy:
.b1e8	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1eb	c0					.byte $c0
>b1ec	d4					.byte $d4
.b1ed					Assemble_cpx:
.b1ed	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1f0	e0					.byte $e0
>b1f1	d0					.byte $d0
.b1f2					Assemble_tsb:
.b1f2	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1f5	00					.byte $00
>b1f6	50					.byte $50
.b1f7					Assemble_trb:
.b1f7	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1fa	10					.byte $10
>b1fb	50					.byte $50
.b1fc					Assemble_jsr:
.b1fc	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b1ff	14					.byte $14
>b200	10					.byte $10
.b201					Assemble_jmp:
.b201	20 ce 88	jsr $88ce		jsr	AssembleGroup2
>b204	40					.byte $40
>b205	10					.byte $10
.b206					Assemble_bpl:
.b206	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b209	10					.byte $10
.b20a					Assemble_bmi:
.b20a	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b20d	30					.byte $30
.b20e					Assemble_bvc:
.b20e	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b211	50					.byte $50
.b212					Assemble_bvs:
.b212	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b215	70					.byte $70
.b216					Assemble_bcc:
.b216	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b219	90					.byte $90
.b21a					Assemble_bcs:
.b21a	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b21d	b0					.byte $b0
.b21e					Assemble_bne:
.b21e	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b221	d0					.byte $d0
.b222					Assemble_beq:
.b222	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b225	f0					.byte $f0
.b226					Assemble_bra:
.b226	20 1f 89	jsr $891f		jsr	AssembleGroup3
>b229	80					.byte $80
.b22a					Assemble_brk:
.b22a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b22d	00					.byte $00
.b22e					Assemble_php:
.b22e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b231	08					.byte $08
.b232					Assemble_clc:
.b232	20 55 89	jsr $8955		jsr	AssembleGroup4
>b235	18					.byte $18
.b236					Assemble_plp:
.b236	20 55 89	jsr $8955		jsr	AssembleGroup4
>b239	28					.byte $28
.b23a					Assemble_sec:
.b23a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b23d	38					.byte $38
.b23e					Assemble_rti:
.b23e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b241	40					.byte $40
.b242					Assemble_pha:
.b242	20 55 89	jsr $8955		jsr	AssembleGroup4
>b245	48					.byte $48
.b246					Assemble_cli:
.b246	20 55 89	jsr $8955		jsr	AssembleGroup4
>b249	58					.byte $58
.b24a					Assemble_phy:
.b24a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b24d	5a					.byte $5a
.b24e					Assemble_rts:
.b24e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b251	60					.byte $60
.b252					Assemble_pla:
.b252	20 55 89	jsr $8955		jsr	AssembleGroup4
>b255	68					.byte $68
.b256					Assemble_sei:
.b256	20 55 89	jsr $8955		jsr	AssembleGroup4
>b259	78					.byte $78
.b25a					Assemble_ply:
.b25a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b25d	7a					.byte $7a
.b25e					Assemble_dey:
.b25e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b261	88					.byte $88
.b262					Assemble_txa:
.b262	20 55 89	jsr $8955		jsr	AssembleGroup4
>b265	8a					.byte $8a
.b266					Assemble_tya:
.b266	20 55 89	jsr $8955		jsr	AssembleGroup4
>b269	98					.byte $98
.b26a					Assemble_txs:
.b26a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b26d	9a					.byte $9a
.b26e					Assemble_tay:
.b26e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b271	a8					.byte $a8
.b272					Assemble_tax:
.b272	20 55 89	jsr $8955		jsr	AssembleGroup4
>b275	aa					.byte $aa
.b276					Assemble_clv:
.b276	20 55 89	jsr $8955		jsr	AssembleGroup4
>b279	b8					.byte $b8
.b27a					Assemble_tsx:
.b27a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b27d	ba					.byte $ba
.b27e					Assemble_iny:
.b27e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b281	c8					.byte $c8
.b282					Assemble_dex:
.b282	20 55 89	jsr $8955		jsr	AssembleGroup4
>b285	ca					.byte $ca
.b286					Assemble_cld:
.b286	20 55 89	jsr $8955		jsr	AssembleGroup4
>b289	d8					.byte $d8
.b28a					Assemble_phx:
.b28a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b28d	da					.byte $da
.b28e					Assemble_stp:
.b28e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b291	db					.byte $db
.b292					Assemble_inx:
.b292	20 55 89	jsr $8955		jsr	AssembleGroup4
>b295	e8					.byte $e8
.b296					Assemble_nop:
.b296	20 55 89	jsr $8955		jsr	AssembleGroup4
>b299	ea					.byte $ea
.b29a					Assemble_sed:
.b29a	20 55 89	jsr $8955		jsr	AssembleGroup4
>b29d	f8					.byte $f8
.b29e					Assemble_plx:
.b29e	20 55 89	jsr $8955		jsr	AssembleGroup4
>b2a1	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b2a2					DecimalScalarTable:
>b2a2	66 66 66 66				.dword $66666666 ; 0.1
>b2a6	de					.byte $de
>b2a7	1f 85 eb 51				.dword $51eb851f ; 0.01
>b2ab	db					.byte $db
>b2ac	4c 37 89 41				.dword $4189374c ; 0.001
>b2b0	d8					.byte $d8
>b2b1	ac 8b db 68				.dword $68db8bac ; 0.0001
>b2b5	d4					.byte $d4
>b2b6	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b2ba	d1					.byte $d1
>b2bb	83 de 1b 43				.dword $431bde83 ; 1e-06
>b2bf	ce					.byte $ce
>b2c0	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b2c4	ca					.byte $ca
>b2c5	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b2c9	c7					.byte $c7
>b2ca	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b2ce	c4					.byte $c4
>b2cf	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b2d3	c0					.byte $c0
>b2d4	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b2d8	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b2d9					SyntaxError:
.b2d9	a9 02		lda #$02		lda	#2
.b2db	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b2de					RangeError:
.b2de	a9 04		lda #$04		lda	#4
.b2e0	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b2e3					TypeError:
.b2e3	a9 05		lda #$05		lda	#5
.b2e5	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b2e8					ArgumentError:
.b2e8	a9 07		lda #$07		lda	#7
.b2ea	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b2ed					NotDoneError:
.b2ed	a9 0c		lda #$0c		lda	#12
.b2ef	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b2f2					ErrorText:
>b2f2	42 72 65 61 6b 00			.text	"Break",0
>b2f8	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b300	72 72 6f 72 00
>b305	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b30d	20 62 79 20 7a 65 72 6f 00
>b316	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b31e	61 6e 67 65 00
>b323	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b32b	6d 61 74 63 68 00
>b331	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b339	65 6d 6f 72 79 00
>b33f	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b347	61 72 67 75 6d 65 6e 74 00
>b350	53 74 6f 70 00				.text	"Stop",0
>b355	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b35d	6f 6f 20 6c 6f 6e 67 00
>b365	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b36d	6e 20 66 61 69 6c 65 64 00
>b376	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b37e	61 74 61 00
>b382	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b38a	65 6e 74 65 64 00
>b390	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b398	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b3a4	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b3ac	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b3b9	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b3c1	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b3ce	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b3d6	68 6f 75 74 20 57 68 69 6c 65 00
>b3e1	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b3e9	68 6f 75 74 20 46 6f 72 00
>b3f2	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b3fa	61 63 6b 20 66 75 6c 6c 00
>b403	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b40b	75 63 74 75 72 65 00
>b412	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b41a	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b427	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b42f	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b43d	41 72 72 61 79 20 73 69			.text	"Array size",0
>b445	7a 65 00
>b448	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b450	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b458	42 75 69 6c 74 20 57 65			.text "Built Wednesday 19-Oct-2022. Build 2135."
>b460	64 6e 65 73 64 61 79 20 31 39 2d 4f 63 74 2d 32
>b470	30 32 32 2e 20 42 75 69 6c 64 20 32 31 33 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b480					EXTInitialise:
.b480	64 01		stz $01				stz 	1 							; Access I/O
.b482	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b485	9c 08 d0	stz $d008			stz 	$D008
.b488	9c 09 d0	stz $d009			stz 	$D009
.b48b	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b48d	8d 58 d6	sta $d658			sta 	$D658
.b490	60		rts				rts
.b491					EXTClearScreen:
.b491	4c ea ff	jmp $ffea			jmp 	$FFEA
.b494					EXTPrintCharacter:
.b494	48		pha				pha
.b495	da		phx				phx
.b496	5a		phy				phy
.b497	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b49a	7a		ply				ply
.b49b	fa		plx				plx
.b49c	68		pla				pla
.b49d	60		rts				rts
.b49e					EXTInputSingleCharacter:
.b49e	da		phx				phx
.b49f	5a		phy				phy
.b4a0					_EISCWait:
.b4a0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b4a3	c9 00		cmp #$00			cmp 	#0
.b4a5	f0 f9		beq $b4a0			beq 	_EISCWait
.b4a7	7a		ply				ply
.b4a8	fa		plx				plx
.b4a9	60		rts				rts
.b4aa					EXTInputLine:
.b4aa	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b4ac					_ILLoop:
.b4ac	da		phx				phx 								; read character in
.b4ad	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b4b0	fa		plx				plx
.b4b1	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b4b3	f0 12		beq $b4c7			beq 	_ILBackspace
.b4b5	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b4b7	f0 15		beq $b4ce			beq 	_ILExit
.b4b9	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b4bb	90 ef		bcc $b4ac			bcc 	_ILLoop
.b4bd	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b4bf	f0 eb		beq $b4ac			beq 	_ILLoop
.b4c1	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b4c4	e8		inx				inx
.b4c5	80 e5		bra $b4ac			bra 	_ILLoop
.b4c7					_ILBackspace:
.b4c7	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b4c9	f0 e1		beq $b4ac			beq 	_ILLoop
.b4cb	ca		dex				dex 								; back one.
.b4cc	80 de		bra $b4ac			bra 	_ILLoop
.b4ce					_ILExit:
.b4ce	20 94 b4	jsr $b494			jsr 	EXTPrintCharacter
.b4d1	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b4d4	60		rts				rts
.b4d5					EXTBreakCheck:
.b4d5	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b4d8					EXTReadController:
.b4d8	da		phx				phx
.b4d9	a2 00		ldx #$00			ldx 	#0
.b4db	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b4dd	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4e0	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b4e2	f0 04		beq $b4e8			beq 	_NoSet1
.b4e4	8a		txa				txa
.b4e5	09 01		ora #$01			ora 	#1
.b4e7	aa		tax				tax
.b4e8					_NoSet1:
.b4e8	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b4ea	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4ed	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b4ef	f0 04		beq $b4f5			beq 	_NoSet1
.b4f1	8a		txa				txa
.b4f2	09 02		ora #$02			ora 	#2
.b4f4	aa		tax				tax
.b4f5					_NoSet1:
.b4f5	a9 06		lda #$06			lda 	#(($32) >> 3)
.b4f7	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4fa	29 04		and #$04			and 	#($01 << (($32) & 7))
.b4fc	f0 04		beq $b502			beq 	_NoSet1
.b4fe	8a		txa				txa
.b4ff	09 04		ora #$04			ora 	#4
.b501	aa		tax				tax
.b502					_NoSet1:
.b502	a9 04		lda #$04			lda 	#(($25) >> 3)
.b504	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b507	29 20		and #$20			and 	#($01 << (($25) & 7))
.b509	f0 04		beq $b50f			beq 	_NoSet1
.b50b	8a		txa				txa
.b50c	09 08		ora #$08			ora 	#8
.b50e	aa		tax				tax
.b50f					_NoSet1:
.b50f	a9 04		lda #$04			lda 	#(($26) >> 3)
.b511	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b514	29 40		and #$40			and 	#($01 << (($26) & 7))
.b516	f0 04		beq $b51c			beq 	_NoSet1
.b518	8a		txa				txa
.b519	09 10		ora #$10			ora 	#16
.b51b	aa		tax				tax
.b51c					_NoSet1:
.b51c	8a		txa				txa
.b51d	fa		plx				plx
.b51e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b51f					MemoryDeleteLine:
.b51f	20 3e b5	jsr $b53e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b522	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b524	a8		tay				tay
.b525					_MDDLLoop:
.b525	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b527	92 30		sta ($30)			sta 	(codePtr)
.b529	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b52b	c5 3a		cmp $3a				cmp 	zTemp2
.b52d	d0 07		bne $b536			bne 	_MDLDLNext
.b52f	a5 31		lda $31				lda 	codePtr+1
.b531	c5 3b		cmp $3b				cmp 	zTemp2+1
.b533	d0 01		bne $b536			bne 	_MDLDLNext
.b535					_MDDLExit:
.b535	60		rts				rts
.b536					_MDLDLNext:
.b536	e6 30		inc $30				inc 	codePtr						; next byte
.b538	d0 eb		bne $b525			bne 	_MDDLLoop
.b53a	e6 31		inc $31				inc 	codePtr+1
.b53c	80 e7		bra $b525			bra 	_MDDLLoop
.b53e					IMemoryFindEnd:
.b53e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b540	85 3a		sta $3a				sta 	0+zTemp2
.b542	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b544	85 3b		sta $3b				sta 	1+zTemp2
.b546					_MDLFELoop:
.b546	b2 3a		lda ($3a)			lda 	(zTemp2)
.b548	f0 0b		beq $b555			beq 	_MDLFEExit
.b54a	18		clc				clc
.b54b	65 3a		adc $3a				adc 	zTemp2
.b54d	85 3a		sta $3a				sta 	zTemp2
.b54f	90 f5		bcc $b546			bcc 	_MDLFELoop
.b551	e6 3b		inc $3b				inc 	zTemp2+1
.b553	80 f1		bra $b546			bra 	_MDLFELoop
.b555					_MDLFEExit:
.b555	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b556					MemoryInsertLine:
.b556	08		php				php
.b557	20 3e b5	jsr $b53e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b55a	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b55c	1a		inc a				inc 	a
.b55d	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b55f	b0 36		bcs $b597			bcs 	_MDLIError
.b561	28		plp				plp
.b562	90 08		bcc $b56c			bcc 	_MDLIFound
.b564	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b566	85 30		sta $30				sta 	codePtr
.b568	a5 3b		lda $3b				lda 	zTemp2+1
.b56a	85 31		sta $31				sta 	codePtr+1
.b56c					_MDLIFound:
.b56c	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b56f	a8		tay				tay
.b570					_MDLIInsert:
.b570	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b572	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b574	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b576	c5 3a		cmp $3a				cmp 	zTemp2
.b578	d0 06		bne $b580			bne 	_MDLINext
.b57a	a5 31		lda $31				lda 	codePtr+1
.b57c	c5 3b		cmp $3b				cmp 	zTemp2+1
.b57e	f0 0a		beq $b58a			beq 	_MDLIHaveSpace
.b580					_MDLINext:
.b580	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b582	d0 02		bne $b586			bne 	_MDLINoBorrow
.b584	c6 3b		dec $3b				dec 	zTemp2+1
.b586					_MDLINoBorrow:
.b586	c6 3a		dec $3a				dec 	zTemp2
.b588	80 e6		bra $b570			bra 	_MDLIInsert
.b58a					_MDLIHaveSpace:
.b58a	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b58d	88		dey				dey 								; from offset-1 to 0
.b58e					_MDLICopy:
.b58e	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b591	91 30		sta ($30),y			sta 	(codePtr),y
.b593	88		dey				dey
.b594	10 f8		bpl $b58e			bpl 	_MDLICopy
.b596	60		rts				rts
.b597					_MDLIError:
.b597	a9 06		lda #$06		lda	#6
.b599	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b59c					MDLAppendLine:
.b59c	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b59e	85 36		sta $36				sta 	zTemp0
.b5a0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5a2	85 38		sta $38				sta 	0+zTemp1
.b5a4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5a6	85 39		sta $39				sta 	1+zTemp1
.b5a8	b2 38		lda ($38)			lda 	(zTemp1)
.b5aa	d0 0a		bne $b5b6			bne 	_MDLANoInitialise
.b5ac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5ae	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b5b1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5b3	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b5b6					_MDLANoInitialise:
.b5b6	18		clc				clc
.b5b7	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b5ba	85 38		sta $38				sta 	zTemp1
.b5bc	72 36		adc ($36)			adc 	(zTemp0)
.b5be	8d 6b 06	sta $066b			sta 	AppendPointer
.b5c1	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b5c4	85 39		sta $39				sta 	zTemp1+1
.b5c6	69 00		adc #$00			adc 	#0
.b5c8	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b5cb	a0 00		ldy #$00			ldy 	#0
.b5cd					_MDLACopy:
.b5cd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b5cf	91 38		sta ($38),y			sta 	(zTemp1),y
.b5d1	c8		iny				iny
.b5d2	98		tya				tya
.b5d3	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b5d5	d0 f6		bne $b5cd			bne 	_MDLACopy
.b5d7	a9 00		lda #$00			lda 	#0 							; end of program.
.b5d9	91 38		sta ($38),y			sta 	(zTemp1),y
.b5db	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a508					MemoryNew:
.a508	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a50a	85 30		sta $30				sta 	codePtr
.a50c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a50e	85 31		sta $31				sta 	codePtr+1
.a510	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a512	92 30		sta ($30)			sta 	(codePtr)
.a514	60		rts				rts
.a515					MemoryInline:
.a515	98		tya				tya 								; put address into stack,x
.a516	18		clc				clc
.a517	65 30		adc $30				adc 	codePtr
.a519	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a51c	a5 31		lda $31				lda 	codePtr+1
.a51e	69 00		adc #$00			adc 	#0
.a520	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a523	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a526	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a529	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a52a					MemorySearch:
.a52a	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a52c	86 37		stx $37				stx 	zTemp0+1
.a52e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a530	85 30		sta $30				sta 	codePtr
.a532	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a534	85 31		sta $31				sta 	codePtr+1
.a536					_MTAXLoop:
.a536	b2 30		lda ($30)			lda 	(codePtr)
.a538	18		clc				clc
.a539	f0 21		beq $a55c			beq 	_MTAXExit 					; reached end, exit with CC.
.a53b	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a53d	b1 30		lda ($30),y			lda 	(codePtr),y
.a53f	38		sec				sec
.a540	e5 36		sbc $36				sbc 	zTemp0
.a542	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a544	c8		iny				iny 								; do the MSB
.a545	b1 30		lda ($30),y			lda 	(codePtr),y
.a547	e5 37		sbc $37				sbc 	zTemp0+1
.a549	05 38		ora $38				ora 	zTemp1
.a54b	f0 0f		beq $a55c			beq 	_MTAXExit	 				; found
.a54d	b0 0d		bcs $a55c			bcs 	_MTAXExit 					; current < required exit
.a54f	18		clc				clc
.a550	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a552	65 30		adc $30				adc 	codePtr
.a554	85 30		sta $30				sta 	codePtr
.a556	90 02		bcc $a55a			bcc 	_CREExit
.a558	e6 31		inc $31				inc 	codePtr+1
.a55a					_CREExit:
.a55a	80 da		bra $a536			bra 	_MTAXLoop
.a55c					_MTAXExit:
.a55c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a55d					StackPushByte:
.a55d	48		pha				pha 								; save byte
.a55e	a5 34		lda $34				lda 	BasicStack
.a560	d0 09		bne $a56b			bne 	_SPBNoBorrow
.a562	c6 35		dec $35				dec 	BasicStack+1
.a564	48		pha				pha
.a565	a5 35		lda $35				lda 	BasicStack+1
.a567	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a569	90 06		bcc $a571			bcc 	_SPBMemory
.a56b					_SPBNoBorrow:
.a56b	c6 34		dec $34				dec 	BasicStack
.a56d	68		pla				pla 								; get back and write
.a56e	92 34		sta ($34)			sta 	(BasicStack)
.a570	60		rts				rts
.a571					_SPBMemory:
.a571	a9 12		lda #$12		lda	#18
.a573	4c f3 98	jmp $98f3		jmp	ErrorHandler
.a576					StackPopByte:
.a576	b2 34		lda ($34)			lda 	(BasicStack)
.a578	e6 34		inc $34				inc 	BasicStack
.a57a	d0 02		bne $a57e			bne 	_SPBNoCarry
.a57c	e6 35		inc $35				inc 	BasicStack+1
.a57e					_SPBNoCarry:
.a57e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a57f					StackOpen:
.a57f	48		pha				pha 								; save frame byte
.a580	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a582	0a		asl a				asl 	a 							; claim twice this for storage
.a583	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a585	38		sec				sec 								; so basically subtracting from
.a586	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a588	85 34		sta $34				sta 	basicStack
.a58a	b0 08		bcs $a594			bcs 	_SONoBorrow
.a58c	c6 35		dec $35				dec 	basicStack+1
.a58e	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a590	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a592	90 04		bcc $a598			bcc 	_SOMemory
.a594					_SONoBorrow:
.a594	68		pla				pla 								; get marker back and write at TOS
.a595	92 34		sta ($34)			sta 	(basicStack)
.a597	60		rts				rts
.a598					_SOMemory:
.a598	a9 12		lda #$12		lda	#18
.a59a	4c f3 98	jmp $98f3		jmp	ErrorHandler
.a59d					StackClose:
.a59d	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a59f	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a5a1	0a		asl a				asl 	a 							; claim twice this.
.a5a2	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a5a4	85 34		sta $34				sta 	basicStack
.a5a6	90 02		bcc $a5aa			bcc 	_SCExit
.a5a8	e6 35		inc $35				inc 	basicStack+1
.a5aa					_SCExit:
.a5aa	60		rts				rts
.a5ab					StackCheckFrame:
.a5ab	48		pha				pha
.a5ac					_StackRemoveLocals:
.a5ac	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a5ae	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a5b0	b0 05		bcs $a5b7			bcs 	_SCNoLocal
.a5b2	20 9a ac	jsr $ac9a			jsr 	LocalPopValue
.a5b5	80 f5		bra $a5ac			bra 	_StackRemoveLocals
.a5b7					_SCNoLocal:
.a5b7	68		pla				pla
.a5b8	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a5ba	29 f0		and #$f0			and 	#$F0 						; check type bits
.a5bc	d0 01		bne $a5bf			bne 	_SCFError 					; different, we have structures mixed up
.a5be	60		rts				rts
.a5bf					_SCFError:
.a5bf	8a		txa				txa 								; report error X
.a5c0	4c f3 98	jmp $98f3			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a5c3					STKSaveCodePosition:
.a5c3	5a		phy				phy
.a5c4	98		tya				tya 								; save Y
.a5c5	a0 05		ldy #$05			ldy 	#5
.a5c7	91 34		sta ($34),y			sta 	(basicStack),y
.a5c9	88		dey				dey 								; save Code Pointer
.a5ca					_STKSaveLoop:
.a5ca	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a5cd	91 34		sta ($34),y			sta 	(basicStack),y
.a5cf	88		dey				dey
.a5d0	d0 f8		bne $a5ca			bne 	_STKSaveLoop
.a5d2	7a		ply				ply
.a5d3	60		rts				rts
.a5d4					STKLoadCodePosition:
.a5d4	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5d6					_STKLoadLoop:
.a5d6	b1 34		lda ($34),y			lda 	(basicStack),y
.a5d8	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5db	c8		iny				iny
.a5dc	c0 05		cpy #$05			cpy 	#5
.a5de	d0 f6		bne $a5d6			bne 	_STKLoadLoop
.a5e0	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5e2	a8		tay				tay
.a5e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5e4					StackReset:
.a5e4	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5e6	85 34		sta $34				sta 	0+basicStack
.a5e8	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5ea	85 35		sta $35				sta 	1+basicStack
.a5ec	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5ee	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b5dc					StringConcrete:
.b5dc	5a		phy				phy 								; save position on stack
.b5dd	20 c0 a1	jsr $a1c0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5e0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b5e3	85 38		sta $38				sta 	zTemp1
.b5e5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b5e8	85 39		sta $39				sta 	zTemp1+1
.b5ea	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b5ec					_SALength:
.b5ec	c8		iny				iny
.b5ed	b1 38		lda ($38),y			lda 	(zTemp1),y
.b5ef	d0 fb		bne $b5ec			bne 	_SALength
.b5f1	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b5f3	b0 3f		bcs $b634			bcs 	_SALengthError
.b5f5	98		tya				tya 				 				; length of the new string
.b5f6	18		clc				clc
.b5f7	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b5f9	90 02		bcc $b5fd			bcc 	_SAHaveLength
.b5fb	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b5fd					_SAHaveLength:
.b5fd	48		pha				pha 								; save length.
.b5fe	38		sec				sec
.b5ff	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b601	6d 8e 04	adc $048e			adc 	StringMemory
.b604	8d 8e 04	sta $048e			sta 	StringMemory
.b607	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b609	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b60c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b60e	6d 8f 04	adc $048f			adc 	StringMemory+1
.b611	8d 8f 04	sta $048f			sta 	StringMemory+1
.b614	85 3b		sta $3b				sta 	zTemp2+1
.b616	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b619	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b61a	38		sec				sec
.b61b	e9 03		sbc #$03			sbc 	#3
.b61d	92 3a		sta ($3a)			sta 	(zTemp2)
.b61f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b621	a0 01		ldy #$01			ldy 	#1
.b623	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b625					_SACopyNewString:
.b625	a0 00		ldy #$00			ldy 	#0
.b627					_SACopyNSLoop:
.b627	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b629	c8		iny				iny 								; write two on in string storage
.b62a	c8		iny				iny
.b62b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b62d	88		dey				dey 								; this makes it one one.
.b62e	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b630	d0 f5		bne $b627			bne 	_SACopyNSLoop
.b632	7a		ply				ply
.b633	60		rts				rts
.b634					_SALengthError:
.b634	a9 09		lda #$09		lda	#9
.b636	4c f3 98	jmp $98f3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b639					StringSystemInitialise:
.b639	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b63b	8d 8e 04	sta $048e			sta 	0+StringMemory
.b63e	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b640	8d 8f 04	sta $048f			sta 	1+StringMemory
.b643	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b646	60		rts				rts
.b647					StringSpaceInitialise:
.b647	20 c0 a1	jsr $a1c0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b64a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b64c	8d 90 04	sta $0490			sta 	StringInitialised
.b64f	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b652	8d 91 04	sta $0491			sta 	StringTempPointer
.b655	ad 8f 04	lda $048f			lda 	StringMemory+1
.b658	3a		dec a				dec 	a
.b659	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b65c	60		rts				rts
.b65d					StringTempAllocate:
.b65d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b65f	b0 35		bcs $b696			bcs 	_STALength
.b661	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b664	30 05		bmi $b66b			bmi 	_STAAllocate
.b666	48		pha				pha 								; save value to subtract.
.b667	20 47 b6	jsr $b647			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b66a	68		pla				pla 								; restore it
.b66b					_STAAllocate:
.b66b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b66d	18		clc				clc  								; deliberate allows one more
.b66e	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b671	8d 91 04	sta $0491			sta 	StringTempPointer
.b674	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b677	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b679	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b67c	69 ff		adc #$ff			adc 	#$FF
.b67e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b681	85 3d		sta $3d				sta 	zsTemp+1
.b683	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b686	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b689	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b68c	a9 10		lda #$10			lda 	#NSTString
.b68e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b691	a9 00		lda #$00			lda 	#0 							; clear the target string
.b693	92 3c		sta ($3c)			sta 	(zsTemp)
.b695	60		rts				rts
.b696					_STALength:
.b696	a9 09		lda #$09		lda	#9
.b698	4c f3 98	jmp $98f3		jmp	ErrorHandler
.b69b					StringTempWrite:
.b69b	48		pha				pha
.b69c	92 3c		sta ($3c)			sta 	(zsTemp)
.b69e	e6 3c		inc $3c				inc 	zsTemp
.b6a0	d0 02		bne $b6a4			bne 	_STWNoCarry
.b6a2	e6 3d		inc $3d				inc 	zsTemp+1
.b6a4					_STWNoCarry:
.b6a4	a9 00		lda #$00			lda 	#0
.b6a6	92 3c		sta ($3c)			sta 	(zsTemp)
.b6a8	68		pla				pla
.b6a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5f1					BackloadProgram:
.a5f1	a2 ff		ldx #$ff			ldx 	#$FF
.a5f3	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a5f6	20 20 a6	jsr $a620			jsr 	BLReadByte
.a5f9	30 1e		bmi $a619			bmi 	_BPExit
.a5fb					_BPCopy:
.a5fb	e8		inx				inx  								; copy byte in
.a5fc	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a5ff	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a602	20 20 a6	jsr $a620			jsr 	BLReadByte 					; read next byte
.a605	30 0a		bmi $a611			bmi 	_BPEndLine 					; -ve = EOL
.a607	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a609	d0 02		bne $a60d			bne 	_BPNotTab
.a60b	a9 20		lda #$20			lda 	#' '
.a60d					_BPNotTab:
.a60d	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a60f	b0 ea		bcs $a5fb			bcs 	_BPCopy
.a611					_BPEndLine:
.a611	20 eb a9	jsr $a9eb			jsr 	TokeniseLine 				; tokenise the line.
.a614	20 0f 8b	jsr $8b0f			jsr 	EditProgramCode
.a617	80 d8		bra $a5f1			bra 	BackloadProgram
.a619					_BPExit:
.a619	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a61c	20 cd 8b	jsr $8bcd			jsr 	ClearCommand 				; clear variables etc.
.a61f	60		rts				rts
.a620					BLReadByte:
.a620					_BLLoad:
.a620	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a623	ee 21 a6	inc $a621			inc 	_BLLoad+1
.a626	d0 03		bne $a62b			bne 	_BLNoCarry
.a628	ee 22 a6	inc $a622			inc 	_BLLoad+2
.a62b					_BLNoCarry:
.a62b	c9 00		cmp #$00			cmp 	#0
.a62d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a62e					TokeniseSearchTable:
.a62e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a630	85 36		sta $36				sta 	zTemp0
.a632	a0 00		ldy #$00			ldy 	#0
.a634	a9 80		lda #$80			lda 	#$80 						; token #
.a636	85 38		sta $38				sta 	zTemp1
.a638					_TSTLoop:
.a638	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a63a	30 49		bmi $a685			bmi 	_TSTFail 					; -ve = end of table
.a63c	f0 2e		beq $a66c			beq 	_TSTNext 					; zero, check next it's a dummy
.a63e	c8		iny				iny 								; get the hash
.a63f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a641	88		dey				dey
.a642	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a645	d0 25		bne $a66c			bne 	_TSTNext
.a647	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a64a	38		sec				sec
.a64b	ed 80 04	sbc $0480			sbc 	identStart
.a64e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a650	d0 1a		bne $a66c			bne 	_TSTNext
.a652	5a		phy				phy 								; save Y , we might fail
.a653	c8		iny				iny 								; point to text
.a654	c8		iny				iny
.a655	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a658					_TSTCompareName:
.a658	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a65b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a65d	d0 0c		bne $a66b			bne 	_TSTNextPullY 				; fail, pullY and do next
.a65f	e8		inx				inx
.a660	c8		iny				iny
.a661	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a664	d0 f2		bne $a658			bne 	_TSTCompareName
.a666	7a		ply				ply 								; throw Y
.a667	a5 38		lda $38				lda 	zTemp1 						; get token #
.a669	38		sec				sec 								; return with CS = passed.
.a66a	60		rts				rts
.a66b					_TSTNextPullY:
.a66b	7a		ply				ply 								; restore current, fall through.
.a66c					_TSTNext:
.a66c	e6 38		inc $38				inc 	zTemp1 						; token counter
.a66e	98		tya				tya
.a66f	18		clc				clc
.a670	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a672	1a		inc a				inc 	a 							; +1
.a673	1a		inc a				inc 	a 							; +2
.a674	a8		tay				tay
.a675	10 c1		bpl $a638			bpl 	_TSTLoop 					; if Y < $80 loop back
.a677	98		tya				tya 								; add Y to zTemp0 and reset Y
.a678	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a67a	18		clc				clc  								; but have tables > 255 bytes
.a67b	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a67d	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a67f	90 b7		bcc $a638			bcc 	_TSTLoop
.a681	e6 37		inc $37				inc 	zTemp0+1
.a683	80 b3		bra $a638			bra 	_TSTLoop
.a685					_TSTFail:
.a685	18		clc				clc
.a686	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a687					KeywordSet0:
>a687	00 65					.text	0,$65,""               ; $80 !0:EOF
>a689	00 58					.text	0,$58,""               ; $81 !1:SH1
>a68b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a68d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a693	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a69b	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a6a1	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a6a8	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a6b0	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a6b7	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a6be	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a6c4	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a6cc	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8c JOYB(
>a6d3	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8d JOYX(
>a6da	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8e JOYY(
>a6e1	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>a6e9	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>a6ef	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>a6f6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $92 NOT(
>a6fc	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $93 RANDOM(
>a704	28
>a705	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>a70d	28
>a70e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>a714	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>a71a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>a720	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>a727	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $99 TIMER(
>a72f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9a TRUE
>a735	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9b VAL(
>a73b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9c FOR
>a740	02 8f 49 46				.text	2,$8f,"IF"             ; $9d IF
>a744	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9e PROC
>a74a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9f REPEAT
>a752	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a0 WHILE
>a759	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a1 ENDIF
>a760	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a2 ENDPROC
>a768	43
>a769	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a3 NEXT
>a76f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a4 THEN
>a775	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a5 UNTIL
>a77c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a6 WEND
>a782	02 9b 42 59				.text	2,$9b,"BY"             ; $a7 BY
>a786	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a8 CALL
>a78c	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a9 CIRCLE
>a794	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $aa CLEAR
>a79b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ab CLS
>a7a0	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ac COLOR
>a7a7	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ad COLOUR
>a7af	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ae DATA
>a7b5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $af DIM
>a7ba	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b0 DOWNTO
>a7c2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b1 ELSE
>a7c8	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b2 FROM
>a7ce	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b3 GFX
>a7d3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b4 GOSUB
>a7da	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b5 GOTO
>a7e0	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b6 HERE
>a7e6	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b7 IMAGE
>a7ed	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b8 LET
>a7f2	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b9 LINE
>a7f8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ba LOCAL
>a7ff	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bb OFF
>a804	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bc ON
>a808	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $bd OUTLINE
>a810	45
>a811	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $be PLOT
>a817	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bf PRINT
>a81e	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c0 READ
>a824	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c1 RECT
>a82a	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c2 REM
>a82f	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c3 RETURN
>a837	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c4 SOLID
>a83e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c5 SPRITE
>a846	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c6 TEXT
>a84c	02 a3 54 4f				.text	2,$a3,"TO"             ; $c7 TO
>a850	ff					.text	$FF
.a851					KeywordSet1:
>a851	00 65					.text	0,$65,""               ; $80 !0:EOF
>a853	00 58					.text	0,$58,""               ; $81 !1:SH1
>a855	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a857	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a85f	4c 45
>a861	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a869	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a871	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a876	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a87c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a881	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a889	45
>a88a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a88f	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a897	53
>a898	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a89e	ff					.text	$FF
.a89f					KeywordSet2:
>a89f	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8a1	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8a3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8a5	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a8aa	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a8af	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a8b4	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a8b9	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a8be	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a8c3	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a8c8	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a8cd	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a8d2	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a8d7	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a8dc	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a8e1	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a8e6	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a8eb	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a8f0	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8f5	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a8fa	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a8ff	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a904	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a909	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a90e	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a913	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a918	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a91d	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a922	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a927	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a92c	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a931	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a936	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a93b	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a940	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a945	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a94a	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a94f	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a954	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a959	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a95e	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a963	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a968	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a96d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a972	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a977	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a97c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a981	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a986	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a98b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a990	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a995	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a99a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a99f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a9a4	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a9a9	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a9ae	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a9b3	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a9b8	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a9bd	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a9c2	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a9c7	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a9cc	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a9d1	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a9d6	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a9db	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a9e0	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a9e5	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a9ea	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a9eb					TokeniseLine:
.a9eb	20 73 ab	jsr $ab73			jsr 	FixLineBufferCase 			; fix line case
.a9ee	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a9f0	8d a6 04	sta $04a6			sta 	tokenOffset
.a9f3	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a9f6	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a9f9	a2 ff		ldx #$ff			ldx 	#$FF
.a9fb					_TKFindFirst:
.a9fb	e8		inx				inx
.a9fc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9ff	f0 79		beq $aa7a			beq 	_TKExit
.aa01	c9 20		cmp #$20			cmp 	#' '
.aa03	90 f6		bcc $a9fb			bcc 	_TKFindFirst
.aa05	c9 30		cmp #$30			cmp 	#'0'
.aa07	90 07		bcc $aa10			bcc 	_TKNoLineNumber
.aa09	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa0b	b0 03		bcs $aa10			bcs 	_TKNoLineNumber
.aa0d	20 9d ab	jsr $ab9d			jsr 	TokeniseExtractLineNumber
.aa10					_TKNoLineNumber:
.aa10					_TKTokeniseLoop:
.aa10	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa13	f0 65		beq $aa7a			beq 	_TKExit
.aa15	e8		inx				inx
.aa16	c9 20		cmp #$20			cmp 	#' '
.aa18	f0 f6		beq $aa10			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aa1a	ca		dex				dex 								; undo last get, A contains character, X is position.
.aa1b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aa1d	f0 61		beq $aa80			beq 	_TKTokeniseIdentifier
.aa1f	c9 41		cmp #$41			cmp 	#'A'
.aa21	90 04		bcc $aa27			bcc 	_TKTokenisePunctuation
.aa23	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aa25	90 59		bcc $aa80			bcc 	_TKTokeniseIdentifier
.aa27					_TKTokenisePunctuation:
.aa27	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aa29	f0 27		beq $aa52			beq 	_TKString
.aa2b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aa2d	f0 28		beq $aa57			beq 	_TKHexConstant
.aa2f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aa31	f0 29		beq $aa5c			beq 	_TKCheckDouble
.aa33	c9 3e		cmp #$3e			cmp 	#'>'
.aa35	f0 25		beq $aa5c			beq 	_TKCheckDouble
.aa37					_TKStandardPunctuation:
.aa37	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aa3a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aa3c	90 0e		bcc $aa4c			bcc 	_TKNoShift
.aa3e	48		pha				pha 								; save
.aa3f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aa41	85 36		sta $36				sta 	zTemp0
.aa43	68		pla				pla
.aa44	29 20		and #$20			and 	#32 						; bit 5
.aa46	4a		lsr a				lsr 	a 							; shift into bit 3
.aa47	4a		lsr a				lsr 	a
.aa48	05 36		ora $36				ora 	zTemp0
.aa4a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aa4c					_TKNoShift:
.aa4c	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte 			; write the punctuation character
.aa4f	e8		inx				inx 								; consume the character
.aa50	80 be		bra $aa10			bra 	_TKTokeniseLoop 			; and loop round again.
.aa52					_TKString:
.aa52	20 02 ab	jsr $ab02			jsr 	TokeniseString
.aa55	80 b9		bra $aa10			bra 	_TKTokeniseLoop
.aa57					_TKHexConstant:
.aa57	20 3d ab	jsr $ab3d			jsr 	TokeniseHexConstant
.aa5a	80 b4		bra $aa10			bra 	_TKTokeniseLoop
.aa5c					_TKCheckDouble:
.aa5c	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa5f	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa61	90 d4		bcc $aa37			bcc 	_TKStandardPunctuation
.aa63	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa65	b0 d0		bcs $aa37			bcs 	_TKStandardPunctuation
.aa67	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa6a	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa6c	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa6d	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa70	38		sec				sec
.aa71	e9 3c		sbc #$3c			sbc 	#'<'
.aa73	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa76	e8		inx				inx 								; consume both
.aa77	e8		inx				inx
.aa78	80 96		bra $aa10			bra 	_TKTokeniseLoop
.aa7a	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa7c	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.aa7f	60		rts				rts
.aa80					_TKTokeniseIdentifier:
.aa80	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa83	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa86					_TKCheckLoop:
.aa86	e8		inx				inx 								; look at next, we know first is identifier.
.aa87	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa8a	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa8c	f0 f8		beq $aa86			beq 	_TKCheckLoop
.aa8e	c9 30		cmp #$30			cmp	 	#"0"
.aa90	90 0c		bcc $aa9e			bcc 	_TKEndIdentifier
.aa92	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa94	90 f0		bcc $aa86			bcc 	_TKCheckLoop
.aa96	c9 41		cmp #$41			cmp	 	#"A"
.aa98	90 04		bcc $aa9e			bcc 	_TKEndIdentifier
.aa9a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aa9c	90 e8		bcc $aa86			bcc 	_TKCheckLoop
.aa9e					_TKEndIdentifier:
.aa9e	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aaa1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aaa3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aaa5	f0 06		beq $aaad			beq 	_TKHasTypeCharacter
.aaa7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aaa9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aaab	d0 07		bne $aab4			bne 	_TKNoTypeCharacter
.aaad					_TKHasTypeCharacter:
.aaad	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aab0	e8		inx				inx 								; read next
.aab1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aab4					_TKNoTypeCharacter:
.aab4	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aab6	d0 09		bne $aac1			bne 	_TKNoArray
.aab8	e8		inx				inx 								; skip the (
.aab9	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aabc	09 04		ora #$04			ora 	#$04
.aabe	8d 84 04	sta $0484			sta 	identTypeByte
.aac1					_TKNoArray:
.aac1	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aac4	20 5e ab	jsr $ab5e			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aac7	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aac9	a9 87		lda #$87			lda 	#(KeywordSet0) & $FF
.aacb	20 2e a6	jsr $a62e			jsr 	TokeniseSearchTable
.aace	a2 00		ldx #$00			ldx 	#0
.aad0	b0 1f		bcs $aaf1			bcs 	_TKFoundToken
.aad2	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.aad4	a9 51		lda #$51			lda 	#(KeywordSet1) & $FF
.aad6	20 2e a6	jsr $a62e			jsr 	TokeniseSearchTable
.aad9	a2 81		ldx #$81			ldx 	#$81
.aadb	b0 14		bcs $aaf1			bcs 	_TKFoundToken
.aadd	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aadf	a9 9f		lda #$9f			lda 	#(KeywordSet2) & $FF
.aae1	20 2e a6	jsr $a62e			jsr 	TokeniseSearchTable
.aae4	a2 82		ldx #$82			ldx 	#$82
.aae6	b0 09		bcs $aaf1			bcs 	_TKFoundToken
.aae8	20 ee ab	jsr $abee			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aaeb	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaee	4c 10 aa	jmp $aa10			jmp 	_TKTokeniseLoop 			; and go round again.
.aaf1					_TKFoundToken:
.aaf1	48		pha				pha 								; save token
.aaf2	8a		txa				txa 								; shift in X, is there one ?
.aaf3	f0 03		beq $aaf8			beq 	_TKNoTShift
.aaf5	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte 			; if so, write it out
.aaf8					_TKNoTShift:
.aaf8	68		pla				pla 								; restore and write token
.aaf9	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.aafc	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaff	4c 10 aa	jmp $aa10			jmp 	_TKTokeniseLoop 			; and go round again.
.ab02					TokeniseString:
.ab02	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab04	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ab07	e8		inx				inx									; start of quoted string.
.ab08	da		phx				phx 								; push start of string on top
.ab09	ca		dex				dex
.ab0a					_TSFindEnd:
.ab0a	e8		inx				inx
.ab0b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab0e	f0 04		beq $ab14			beq 	_TSEndOfString
.ab10	c9 22		cmp #$22			cmp 	#'"'
.ab12	d0 f6		bne $ab0a			bne 	_TSFindEnd
.ab14					_TSEndOfString:
.ab14	7a		ply				ply  								; so now Y is first character, X is character after end.
.ab15	48		pha				pha 								; save terminating character
.ab16	20 1e ab	jsr $ab1e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ab19	68		pla				pla 								; terminating character
.ab1a	f0 01		beq $ab1d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ab1c	e8		inx				inx
.ab1d					_TSNotQuote:
.ab1d	60		rts				rts
.ab1e					TOWriteBlockXY:
.ab1e	86 36		stx $36				stx 	zTemp0 						; write end character
.ab20	98		tya				tya
.ab21	49 ff		eor #$ff			eor 	#$FF
.ab23	38		sec				sec
.ab24	65 36		adc $36				adc 	zTemp0
.ab26	1a		inc a				inc 	a 							; one extra for NULL
.ab27	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ab2a					_TOBlockLoop:
.ab2a	c4 36		cpy $36				cpy 	zTemp0
.ab2c	f0 09		beq $ab37			beq 	_TOBlockExit
.ab2e	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.ab31	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ab34	c8		iny				iny
.ab35	80 f3		bra $ab2a			bra 	_TOBlockLoop
.ab37					_TOBlockExit:
.ab37	a9 00		lda #$00			lda 	#0
.ab39	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ab3c	60		rts				rts
.ab3d					TokeniseHexConstant:
.ab3d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ab3f	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ab42	e8		inx				inx									; start of quoted string.
.ab43	da		phx				phx 								; push start of constant on top
.ab44	ca		dex				dex
.ab45					_THFindLoop:
.ab45	e8		inx				inx
.ab46	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab49	c9 30		cmp #$30			cmp 	#"0"
.ab4b	90 0c		bcc $ab59			bcc 	_THFoundEnd
.ab4d	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab4f	90 f4		bcc $ab45			bcc 	_THFindLoop
.ab51	c9 41		cmp #$41			cmp 	#"A"
.ab53	90 04		bcc $ab59			bcc 	_THFoundEnd
.ab55	c9 47		cmp #$47			cmp 	#"F"+1
.ab57	90 ec		bcc $ab45			bcc 	_THFindLoop
.ab59					_THFoundEnd:
.ab59	7a		ply				ply 								; restore start
.ab5a	20 1e ab	jsr $ab1e			jsr 	TOWriteBlockXY 				; output the block
.ab5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab5e					TokeniseCalculateHash:
.ab5e	da		phx				phx
.ab5f	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab62	a9 00		lda #$00			lda 	#0
.ab64					_TCHLoop:
.ab64	18		clc				clc
.ab65	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab68	e8		inx				inx
.ab69	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab6c	d0 f6		bne $ab64			bne 	_TCHLoop
.ab6e	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab71	fa		plx				plx
.ab72	60		rts				rts
.ab73					FixLineBufferCase:
.ab73	a2 00		ldx #$00			ldx 	#0
.ab75					_FLBCLoop:
.ab75	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab78	f0 22		beq $ab9c			beq 	_FLBCExit 					; end of string.
.ab7a	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab7c	f0 11		beq $ab8f			beq 	_FLBCInQuotes
.ab7e	e8		inx				inx
.ab7f	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab81	90 f2		bcc $ab75			bcc 	_FLBCLoop
.ab83	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab85	b0 ee		bcs $ab75			bcs 	_FLBCLoop
.ab87	38		sec				sec 								; make U/C
.ab88	e9 20		sbc #$20			sbc 	#32
.ab8a	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab8d	80 e6		bra $ab75			bra 	_FLBCLoop
.ab8f					_FLBCInQuotes:
.ab8f	e8		inx				inx 								; advance
.ab90	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab93	f0 07		beq $ab9c			beq 	_FLBCExit 					; exit on EOS
.ab95	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ab97	d0 f6		bne $ab8f			bne 	_FLBCInQuotes
.ab99	e8		inx				inx 								; skip over it
.ab9a	80 d9		bra $ab75			bra 	_FLBCLoop
.ab9c					_FLBCExit:
.ab9c	60		rts				rts
.ab9d					TokeniseExtractLineNumber:
.ab9d	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.aba0	48		pha				pha
.aba1	ad a7 04	lda $04a7			lda 	tokenLineNumber
.aba4	48		pha				pha
.aba5	20 db ab	jsr $abdb			jsr 	_TELNTimes2 				; line # x 4
.aba8	20 db ab	jsr $abdb			jsr 	_TELNTimes2 				; line # x 2
.abab	18		clc				clc 								; add stacked value
.abac	68		pla				pla
.abad	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abb0	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abb3	68		pla				pla
.abb4	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.abb7	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.abba	20 db ab	jsr $abdb			jsr 	_TELNTimes2 				; line # x 10
.abbd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.abc0	e8		inx				inx
.abc1	29 0f		and #$0f			and 	#15 						; add to line #
.abc3	18		clc				clc
.abc4	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abc7	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abca	90 03		bcc $abcf			bcc 	_TLENNoCarry
.abcc	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.abcf					_TLENNoCarry:
.abcf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.abd2	c9 30		cmp #$30			cmp 	#'0'
.abd4	90 04		bcc $abda			bcc 	_TLENExit
.abd6	c9 3a		cmp #$3a			cmp 	#'9'+1
.abd8	90 c3		bcc $ab9d			bcc 	TokeniseExtractLineNumber
.abda					_TLENExit:
.abda	60		rts				rts
.abdb					_TELNTimes2:
.abdb	0e a7 04	asl $04a7			asl 	tokenLineNumber
.abde	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.abe1	60		rts				rts
.abe2					TokeniseWriteByte:
.abe2	da		phx				phx
.abe3	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.abe6	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.abe9	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.abec	fa		plx				plx
.abed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.abee					CheckCreateVariableRecord:
.abee	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.abf0	85 36		sta $36				sta 	0+zTemp0
.abf2	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.abf4	85 37		sta $37				sta 	1+zTemp0
.abf6					_CCVSearch:
.abf6	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.abf8	f0 2c		beq $ac26			beq 	_CCVFail
.abfa	a0 01		ldy #$01			ldy 	#1 							; read the hash
.abfc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.abfe	cd 83 04	cmp $0483			cmp 	identHash
.ac01	d0 16		bne $ac19			bne 	_CCVNext
.ac03	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac05	ae 80 04	ldx $0480			ldx 	identStart
.ac08					_CCVCompare:
.ac08	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac0b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac0d	e8		inx				inx 								; advance pointers
.ac0e	c8		iny				iny
.ac0f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac10	d0 07		bne $ac19			bne 	_CCVNext  					; didn't match go to next.
.ac12	90 f4		bcc $ac08			bcc 	_CCVCompare 				; not finished yet.
.ac14	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ac17	f0 41		beq $ac5a			beq 	_CCVFound 					; yes, we were successful
.ac19					_CCVNext:
.ac19	18		clc				clc
.ac1a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ac1c	65 36		adc $36				adc 	zTemp0
.ac1e	85 36		sta $36				sta 	zTemp0
.ac20	90 d4		bcc $abf6			bcc 	_CCVSearch
.ac22	e6 37		inc $37				inc 	zTemp0+1
.ac24	80 d0		bra $abf6			bra 	_CCVSearch
.ac26					_CCVFail:
.ac26	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ac28	ad 83 04	lda $0483			lda 	identHash
.ac2b	91 36		sta ($36),y			sta 	(zTemp0),y
.ac2d	c8		iny				iny 								; offset 2 is the type byte
.ac2e	ad 84 04	lda $0484			lda 	identTypeByte
.ac31	91 36		sta ($36),y			sta 	(zTemp0),y
.ac33	c8		iny				iny
.ac34					_CCVData:
.ac34	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ac36	91 36		sta ($36),y			sta 	(zTemp0),y
.ac38	c8		iny				iny
.ac39	c0 08		cpy #$08			cpy 	#8
.ac3b	90 f7		bcc $ac34			bcc 	_CCVData
.ac3d	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ac40					_CCVCopyName:
.ac40	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ac43	91 36		sta ($36),y			sta 	(zTemp0),y
.ac45	e8		inx				inx
.ac46	c8		iny				iny
.ac47	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ac4a	d0 f4		bne $ac40			bne 	_CCVCopyName
.ac4c	98		tya				tya 								; patch offset
.ac4d	92 36		sta ($36)			sta 	(zTemp0)
.ac4f	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ac51	91 36		sta ($36),y			sta 	(zTemp0),y
.ac53	88		dey				dey
.ac54	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac56	09 80		ora #$80			ora 	#$80
.ac58	91 36		sta ($36),y			sta 	(zTemp0),y
.ac5a					_CCVFound:
.ac5a	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac5c	38		sec				sec
.ac5d	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac5f	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac61	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ac64	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac66	20 e2 ab	jsr $abe2			jsr 	TokeniseWriteByte
.ac69	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
