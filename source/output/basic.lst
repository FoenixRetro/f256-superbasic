
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan 11 17:39:31 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_JOYBLPAREN                       = $93; $93 JOYB(
=$94						KWD_JOYXLPAREN                       = $94; $94 JOYX(
=$95						KWD_JOYYLPAREN                       = $95; $95 JOYY(
=$96						KWD_LEFTDOLLARLPAREN                 = $96; $96 LEFT$(
=$97						KWD_LENLPAREN                        = $97; $97 LEN(
=$98						KWD_MAXLPAREN                        = $98; $98 MAX(
=$99						KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a						KWD_MINLPAREN                        = $9a; $9a MIN(
=$9b						KWD_NOTLPAREN                        = $9b; $9b NOT(
=$9c						KWD_PEEKLPAREN                       = $9c; $9c PEEK(
=$9d						KWD_PEEKDLPAREN                      = $9d; $9d PEEKD(
=$9e						KWD_PEEKLLPAREN                      = $9e; $9e PEEKL(
=$9f						KWD_PEEKWLPAREN                      = $9f; $9f PEEKW(
=$a0						KWD_PLAYINGLPAREN                    = $a0; $a0 PLAYING(
=$a1						KWD_RANDOMLPAREN                     = $a1; $a1 RANDOM(
=$a2						KWD_RIGHTDOLLARLPAREN                = $a2; $a2 RIGHT$(
=$a3						KWD_RNDLPAREN                        = $a3; $a3 RND(
=$a4						KWD_SGNLPAREN                        = $a4; $a4 SGN(
=$a5						KWD_SPCLPAREN                        = $a5; $a5 SPC(
=$a6						KWD_STRDOLLARLPAREN                  = $a6; $a6 STR$(
=$a7						KWD_TIMERLPAREN                      = $a7; $a7 TIMER(
=$a8						KWD_TRUE                             = $a8; $a8 TRUE
=$a9						KWD_VALLPAREN                        = $a9; $a9 VAL(
=$aa						KWD_FOR                              = $aa; $aa FOR
=$ab						KWD_IF                               = $ab; $ab IF
=$ac						KWD_PROC                             = $ac; $ac PROC
=$ad						KWD_REPEAT                           = $ad; $ad REPEAT
=$ae						KWD_WHILE                            = $ae; $ae WHILE
=$af						KWD_ENDIF                            = $af; $af ENDIF
=$b0						KWD_ENDPROC                          = $b0; $b0 ENDPROC
=$b1						KWD_NEXT                             = $b1; $b1 NEXT
=$b2						KWD_THEN                             = $b2; $b2 THEN
=$b3						KWD_UNTIL                            = $b3; $b3 UNTIL
=$b4						KWD_WEND                             = $b4; $b4 WEND
=$b5						KWD_AT                               = $b5; $b5 AT
=$b6						KWD_BY                               = $b6; $b6 BY
=$b7						KWD_CALL                             = $b7; $b7 CALL
=$b8						KWD_CIRCLE                           = $b8; $b8 CIRCLE
=$b9						KWD_CLEAR                            = $b9; $b9 CLEAR
=$ba						KWD_COLOR                            = $ba; $ba COLOR
=$bb						KWD_COLOUR                           = $bb; $bb COLOUR
=$bc						KWD_DATA                             = $bc; $bc DATA
=$bd						KWD_DIM                              = $bd; $bd DIM
=$be						KWD_DOWNTO                           = $be; $be DOWNTO
=$bf						KWD_ELSE                             = $bf; $bf ELSE
=$c0						KWD_FROM                             = $c0; $c0 FROM
=$c1						KWD_GFX                              = $c1; $c1 GFX
=$c2						KWD_HERE                             = $c2; $c2 HERE
=$c3						KWD_IMAGE                            = $c3; $c3 IMAGE
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_MEMCOPY                          = $c7; $c7 MEMCOPY
=$c8						KWD_OFF                              = $c8; $c8 OFF
=$c9						KWD_ON                               = $c9; $c9 ON
=$ca						KWD_OUTLINE                          = $ca; $ca OUTLINE
=$cb						KWD_PALETTE                          = $cb; $cb PALETTE
=$cc						KWD_PLOT                             = $cc; $cc PLOT
=$cd						KWD_POKE                             = $cd; $cd POKE
=$ce						KWD_POKED                            = $ce; $ce POKED
=$cf						KWD_POKEL                            = $cf; $cf POKEL
=$d0						KWD_POKEW                            = $d0; $d0 POKEW
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$aa						KWC_FIRST_STRUCTURE = $aa
=$af						KWC_FIRST_STRUCTURE_DEC = $af
=$b4						KWC_LAST_STRUCTURE = $b4
=$83						KWC_FIRST_UNARY = $83
=$a9						KWC_LAST_UNARY = $a9

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 ce bb	jsr $bbce		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 01 bc	jsr $bc01		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 7f b5	jsr $b57f		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 13 b8	jsr $b813		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 5e ad	jsr $ad5e			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 40 81	jsr $8140			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 6a 83	jsr $836a			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 6a 83	jsr $836a			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 6a 83	jsr $836a			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 6a 83	jsr $836a			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 54 96	jsr $9654			jsr 	PrintStringXA
.80c6		20 79 8f	jsr $8f79			jsr 	NewProgram 					; erase current program
.80c9		4c ad 85	jmp $85ad			jmp 	WarmStart					; make same size.
.80cc		4c ad 85	jmp $85ad			jmp 	WarmStart
>80cf		0d 09 09 47 6f 20 67 6f		Prompt:	.text 	13,9,9,"Go go Gadget!",13
>80d7		20 47 61 64 67 65 74 21 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e0		09 09 31 31 2f 30 31 2f			.text 9,9,"11/01/23 27"
>80e8		32 33 20 32 37

;******  Return to file: ./common/aa.system/00start.asm

>80ed		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80f1						ProcessEvents:
.80f1		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.80f4		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80f7		b0 27		bcs $8120			bcs 	_PEExitZ 					; nothing left to process.
.80f9		ad 63 07	lda $0763			lda 	KNLEvent.type 				; go back if event not key.pressed.
.80fc		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.80fe		d0 f1		bne $80f1			bne 	ProcessEvents
.8100		ad 69 07	lda $0769			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8103		d0 ec		bne $80f1			bne 	ProcessEvents
.8105		ad 68 07	lda $0768			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8108		c9 03		cmp #$03			cmp 	#3
.810a		f0 11		beq $811d			beq 	_PEReturnBreak  			; no, keep going.
.810c		da		phx				phx
.810d		ae 61 06	ldx $0661			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8110		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8112		f0 06		beq $811a			beq 	_PENoQueue
.8114		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x 			; write into queue
.8117		ee 61 06	inc $0661			inc 	KeyboardQueueEntries 		; bump count
.811a						_PENoQueue:
.811a		fa		plx				plx
.811b		80 d4		bra $80f1			bra 	ProcessEvents
.811d						_PEReturnBreak:
.811d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.811f		60		rts				rts
.8120						_PEExitZ:
.8120		a9 00		lda #$00			lda 	#0
.8122		60		rts				rts
.8123						PopKeyboardQueue:
.8123		ad 61 06	lda $0661			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8126		f0 17		beq $813f			beq 	_PKQExit 					; zero, then exit.
.8128		ad 59 06	lda $0659			lda 	KeyboardQueue 				; save head of keyboard queue
.812b		48		pha				pha
.812c		da		phx				phx 								; drop head of queue
.812d		a2 00		ldx #$00			ldx 	#0
.812f						_PKQLoop:
.812f		bd 5a 06	lda $065a,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8132		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8135		e8		inx				inx
.8136		e0 07		cpx #$07			cpx 	#7
.8138		d0 f5		bne $812f			bne 	_PKQLoop
.813a		fa		plx				plx
.813b		ce 61 06	dec $0661			dec 	KeyboardQueueEntries 		; one fewer in queue.
.813e		68		pla				pla 								; restore head of queue.
.813f						_PKQExit:
.813f		60		rts				rts
=8						KBDQueueSize = 8
.0659						KeyboardQueue:
>0659								.fill 	KBDQueueSize
.0661						KeyboardQueueEntries:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8140						KNLSetDrive:
.8140		8d 62 07	sta $0762			sta 	KNLDefaultDrive
.8143		60		rts				rts
.8144						KNLOpenFileWrite:
.8144		48		pha				pha
.8145		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8147		80 03		bra $814c			bra 	KNLOpenStart
.8149						KNLOpenFileRead:
.8149		48		pha				pha
.814a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.814c						KNLOpenStart:
.814c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.814e		68		pla				pla
.814f		20 8a 81	jsr $818a			jsr 	KNLSetupFileName
.8152		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.8155		ad 62 07	lda $0762			lda 	KNLDefaultDrive 			; currently drive zero only.
.8158		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.815a		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.815d		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.815f		b0 1d		bcs $817e			bcs     _out
.8161						_loop
.8161		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8164		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8167		b0 f8		bcs $8161			bcs     _loop
.8169		ad 63 07	lda $0763			lda 	KNLEvent.type
.816c		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.816e		f0 0a		beq $817a			beq 	_success
.8170		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8172		f0 0a		beq $817e			beq 	_out
.8174		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8176		f0 06		beq $817e			beq 	_out
.8178		80 e7		bra $8161			bra     _loop
.817a						_success
.817a		ad 66 07	lda $0766			lda     KNLEvent.file.stream
.817d		18		clc				clc
.817e						_out
.817e		60		rts				rts
.817f						KNLSetEventPointer:
.817f		48		pha				pha
.8180		a9 63		lda #$63			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8182		85 f0		sta $f0				sta     kernel.args.events+0
.8184		a9 07		lda #$07			lda     #KNLEvent >> 8
.8186		85 f1		sta $f1				sta     kernel.args.events+1
.8188		68		pla				pla
.8189		60		rts				rts
.818a						KNLSetupFileName:
.818a		5a		phy				phy 								; save Y on stack
.818b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.818d		86 37		stx $37				stx 	zTemp0+1
.818f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8191		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8193		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8195						_KNLGetLength:
.8195		c8		iny				iny
.8196		b1 36		lda ($36),y			lda 	(zTemp0),y
.8198		d0 fb		bne $8195			bne 	_KNLGetLength
.819a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.819c		7a		ply				ply
.819d		60		rts				rts
.819e						KNLReadBlock:
.819e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81a0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81a2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81a5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81a7		b0 2e		bcs $81d7			bcs     _KGNBExitFail               ; report as general error
.81a9						_KGRBEventLoop:
.81a9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81ac		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81af		b0 f8		bcs $81a9			bcs     _KGRBEventLoop
.81b1		ad 63 07	lda $0763			lda 	KNLEvent.type 				; get event
.81b4		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81b6		f0 0a		beq $81c2			beq     _KNLRBGetNextByte
.81b8		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81ba		f0 1b		beq $81d7			beq 	_KGNBExitFail
.81bc		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81be		f0 17		beq $81d7			beq 	_KGNBExitFail
.81c0		80 e7		bra $81a9			bra 	_KGRBEventLoop
.81c2						_KNLRBGetNextByte:
.81c2		a9 62		lda #$62			lda     #<KNLReadBuffer 			; Set the target buffer
.81c4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81c6		a9 06		lda #$06			lda     #>KNLReadBuffer
.81c8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81ca		ad 69 07	lda $0769			lda     KNLEvent.file.data.read 	; Set the target length
.81cd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81cf		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81d2		ad 69 07	lda $0769			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.81d5		18		clc				clc
.81d6		60		rts				rts
.81d7						_KGNBExitFail:
.81d7		38		sec				sec
.81d8		60		rts				rts
.81d9						KNLWriteBlock:
.81d9		da		phx				phx
.81da		5a		phy				phy
.81db		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81dd		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81df		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81e1		a5 37		lda $37				lda     zTemp0+1
.81e3		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81e5		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81e7		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81ea		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81ec		b0 21		bcs $820f			bcs 	_KWBFailed
.81ee						_KNLWLoop:
.81ee		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81f1		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81f4		b0 f8		bcs $81ee			bcs     _KNLWLoop
.81f6		ad 63 07	lda $0763			lda     KNLEvent.type 				; various errors.
.81f9		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81fb		f0 12		beq $820f			beq 	_KWBFailed
.81fd		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81ff		f0 0e		beq $820f			beq 	_KWBFailed
.8201		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8203		f0 0a		beq $820f			beq 	_KWBFailed
.8205		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8207		d0 e5		bne $81ee			bne 	_KNLWLoop
.8209		18		clc				clc
.820a		ad 69 07	lda $0769			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.820d		80 01		bra $8210			bra 	_KWBExit
.820f						_KWBFailed:
.820f		38		sec				sec
.8210						_KWBExit:
.8210		7a		ply				ply
.8211		fa		plx				plx
.8212		60		rts				rts
.8213						KNLCloseFile:
.8213		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8215		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8218		60		rts				rts
.8219						KNLCheckKeyPressed:
.8219		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.821c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.821f		b0 0b		bcs $822c			bcs 	_CKPNoEvent 				; no event
.8221		ad 63 07	lda $0763			lda     KNLEvent.type
.8224		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8226		d0 04		bne $822c			bne 	_CKPNoEvent
.8228		ad 68 07	lda $0768			lda     KNLEvent.key.ascii
.822b		60		rts				rts
.822c						_CKPNoEvent:
.822c		a9 00		lda #$00			lda 	#0
.822e		60		rts				rts
.822f						EXTReadController:
.822f		da		phx				phx
.8230		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8232		64 01		stz $01				stz 	1 							; switch to I/O 0
.8234		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8237		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8239		fa		plx				plx
.823a		60		rts				rts
.0662						KNLReadBuffer:
>0662								.fill   256
.0762						KNLDefaultDrive:
>0762								.byte 	?
.0763						KNLEvent
>0763						type        .byte   ?   ; Enum above
>0764						buf         .byte   ?   ; page id or zero
>0765						ext         .byte   ?   ; page id or zero
.0766						key
>0766						keyboard    .byte   ?   ; Keyboard ID
>0767						raw         .byte   ?   ; Raw key ID
>0768						ascii       .byte   ?   ; ASCII value
>0769						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0766						mouse
.0766						delta
>0766						x           .byte   ?
>0767						y           .byte   ?
>0768						z           .byte   ?
>0769						buttons     .byte   ?
.0766						clicks
>0766						inner       .byte   ?
>0767						middle      .byte   ?
>0768						outer       .byte   ?
.0766						joystick
>0766						joy0        .byte   ?
>0767						joy1        .byte   ?
.0766						udp
>0766						token       .byte   ?   ; TODO: break out into fields
.0766						file
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						data
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						read        .byte   ?   ; Number of bytes actually read
.0768						wrote
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						wrote       .byte   ?   ; Number of bytes actually read
.0766						directory
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						volume
>0768						len         .byte   ?   ; Length of volname (in buf)
>0769						flags       .byte   ?   ; block size, text encoding
.0768						file
>0768						len         .byte   ?
>0769						flags       .byte   ?   ; block scale, text encoding, approx size
.0768						free
>0768						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.823b						AscGet:
.823b		fa		plx				plx 								; restore stack pos
.823c						AscGet2:
.823c		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.823f		20 f1 80	jsr $80f1	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.8242		d0 0b		bne $824f			bne 	_AGBreak
.8244		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; wait for key.
.8247		c9 00		cmp #$00			cmp 	#0
.8249		f0 f4		beq $823f			beq 	_AGKey
.824b		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.824e		60		rts				rts
.824f						_AGBreak:
.824f		a9 01		lda #$01		lda	#1
.8251		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8254						AscInkey:
.8254		fa		plx				plx 								; restore stack pos
.8255						AscInkey2:
.8255		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.8258		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.825b		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.825e		60		rts				rts
.825f						ChrGet:
.825f		fa		plx				plx
.8260		20 3c 82	jsr $823c			jsr 	AscGet2
.8263		4c 6a 82	jmp $826a			jmp 	GetInkeyToString
.8266						ChrInkey:
.8266		fa		plx				plx
.8267		20 55 82	jsr $8255			jsr 	AscInkey2
.826a						GetInkeyToString:
.826a		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.826c		f0 0b		beq $8279			beq 	_GKISNull
.826e		48		pha				pha
.826f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8271		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.8274		68		pla				pla 								; write number to it
.8275		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.8278		60		rts				rts
.8279						_GKISNull:
.8279		a9 00		lda #$00			lda 	#0
.827b		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.827e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.827f						AssembleGroup1:
.827f		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8281		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.8284		80 02		bra $8288			bra 	AsmGroup12
.8286						AssembleGroup2:
.8286		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8288						AsmGroup12:
.8288		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.828b		68		pla				pla 								; pop the return address to access the information following.
.828c		fa		plx				plx
.828d		20 14 83	jsr $8314			jsr 	AccessParameters 			; get opcode and save as base
.8290		8d 24 04	sta $0424			sta 	BaseOpcode
.8293		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8296		d0 08		bne $82a0			bne 	_AG12HaveMask
.8298		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.829a		20 1c 83	jsr $831c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.829d		8d 25 04	sta $0425			sta 	ModeMask
.82a0						_AG12HaveMask:
.82a0		20 50 84	jsr $8450			jsr 	TypeAndCalculateOperand 	; get zero page type
.82a3		da		phx				phx 								; save found address mode
.82a4		20 80 83	jsr $8380			jsr 	AssembleModeX
.82a7		fa		plx				plx  								; restore address mode
.82a8		b0 0b		bcs $82b5			bcs 	_AG12Exit
.82aa		20 b6 82	jsr $82b6			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82ad		20 80 83	jsr $8380			jsr 	AssembleModeX
.82b0		b0 03		bcs $82b5			bcs 	_AG12Exit
.82b2		4c 1e a7	jmp $a71e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82b5						_AG12Exit:
.82b5		60		rts				rts
.82b6						PromoteToAbsolute:
.82b6		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82b8		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82ba		f0 19		beq $82d5			beq 	_PTADo
.82bc		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82be		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82c0		f0 13		beq $82d5			beq 	_PTADo
.82c2		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82c4		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82c6		f0 0d		beq $82d5			beq 	_PTADo
.82c8		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82ca		e0 d1		cpx #$d1			cpx 	#AM_IND
.82cc		f0 07		beq $82d5			beq 	_PTADo
.82ce		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82d0		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82d2		f0 01		beq $82d5			beq 	_PTADo
.82d4		60		rts				rts
.82d5						_PTADo:
.82d5		aa		tax				tax
.82d6		60		rts				rts
.82d7						AssembleGroup3:
.82d7		68		pla				pla 								; get parameters, which is just the opcode.
.82d8		fa		plx				plx
.82d9		20 14 83	jsr $8314			jsr 	AccessParameters 			; get and output opcode
.82dc		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82df		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get a 16 bit operand
.82e2		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82e4		38		sec				sec
.82e5		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.82e8		48		pha				pha 								; LSB in A
.82e9		a5 60		lda $60				lda 	NSMantissa1
.82eb		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.82ee		aa		tax				tax 								; MSB in X
.82ef		68		pla				pla
.82f0		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82f1		69 7f		adc #$7f			adc 	#$7F
.82f3		90 01		bcc $82f6			bcc 	_AG3NoCarry
.82f5		e8		inx				inx
.82f6						_AG3NoCarry:
.82f6		38		sec				sec 								; fix back and write out anyways.
.82f7		e9 80		sbc #$80			sbc 	#$80
.82f9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82fc		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82fe		f0 0a		beq $830a			beq 	_AG3Exit
.8300		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8303		29 01		and #$01			and 	#1
.8305		f0 03		beq $830a			beq 	_AG3Exit
.8307		4c 23 a7	jmp $a723			jmp 	RangeError 					; no, branch is out of range
.830a						_AG3Exit:
.830a		60		rts				rts
.830b						AssembleGroup4:
.830b		68		pla				pla 								; pop address
.830c		fa		plx				plx
.830d		20 14 83	jsr $8314			jsr 	AccessParameters 			; access and get first
.8310		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 			; output it.
.8313		60		rts				rts
.8314						AccessParameters:
.8314		8d 21 04	sta $0421			sta 	ParamStart
.8317		8e 22 04	stx $0422			stx 	ParamStart+1
.831a		a9 01		lda #$01			lda 	#1
.831c						GetParameter:
.831c		5a		phy				phy
.831d		a8		tay				tay
.831e		ad 21 04	lda $0421			lda 	ParamStart
.8321		85 36		sta $36				sta 	zTemp0
.8323		ad 22 04	lda $0422			lda 	ParamStart+1
.8326		85 37		sta $37				sta 	zTemp0+1
.8328		b1 36		lda ($36),y			lda 	(zTemp0),y
.832a		7a		ply				ply
.832b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.832c						AssemblerWriteByte:
.832c		48		pha			pha
.832d		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8330		29 02		and #$02		and 	#2
.8332		f0 1b		beq $834f		beq 	_AWBNoPrint
.8334		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8337		20 6a 83	jsr $836a		jsr 	PrintHex
.833a		ad 1e 04	lda $041e		lda		AssemblerAddress
.833d		20 6a 83	jsr $836a		jsr 	PrintHex
.8340		a9 20		lda #$20		lda 	#' '
.8342		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8345		68		pla			pla 									; print byte
.8346		48		pha			pha
.8347		20 6a 83	jsr $836a		jsr 	PrintHex
.834a		a9 0d		lda #$0d		lda 	#13
.834c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.834f						_AWBNoPrint:
.834f		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8352		85 36		sta $36			sta 	zTemp0
.8354		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.8357		f0 0e		beq $8367		beq 	_AWBRange
.8359		85 37		sta $37			sta 	zTemp0+1
.835b		68		pla			pla 									; write byte out
.835c		92 36		sta ($36)		sta 	(zTemp0)
.835e		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.8361		d0 03		bne $8366		bne 	_AWBNoCarry
.8363		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.8366						_AWBNoCarry:
.8366		60		rts			rts
.8367						_AWBRange:
.8367		4c 23 a7	jmp $a723		jmp 	RangeError
.836a						PrintHex:
.836a		48		pha				pha
.836b		4a		lsr a				lsr 	a
.836c		4a		lsr a				lsr 	a
.836d		4a		lsr a				lsr 	a
.836e		4a		lsr a				lsr 	a
.836f		20 73 83	jsr $8373			jsr 	_PrintNibble
.8372		68		pla				pla
.8373						_PrintNibble:
.8373		29 0f		and #$0f			and 	#15
.8375		c9 0a		cmp #$0a			cmp 	#10
.8377		90 02		bcc $837b			bcc 	_NoShift
.8379		69 06		adc #$06			adc 	#6
.837b						_NoShift:
.837b		69 30		adc #$30			adc 	#48
.837d		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8380						AssembleModeX:
.8380		5a		phy				phy
.8381		ad 23 04	lda $0423			lda 	IsGroup1
.8384		f0 17		beq $839d			beq 	_AMXGroup2
.8386		8a		txa				txa 							; is it in group # 1
.8387		29 40		and #$40			and 	#AM_ISG1
.8389		f0 4d		beq $83d8			beq 	_AMXFail 				; no, give up.
.838b		8a		txa				txa 							; get back.
.838c		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.838e		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8390		d0 22		bne $83b4			bne 	_AMXHaveInfo
.8392		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8395		c9 81		cmp #$81			cmp 	#$81
.8397		f0 3f		beq $83d8			beq 	_AMXFail
.8399		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.839b		80 17		bra $83b4			bra 	_AMXHaveInfo 			; odd design decision there.
.839d						_AMXGroup2:
.839d		8a		txa				txa 							; is it in group 2 ?
.839e		29 20		and #$20			and 	#AM_ISG2
.83a0		f0 36		beq $83d8			beq 	_AMXFail 				; no, give up.
.83a2		8a		txa				txa 							; get the offset into Y
.83a3		29 1f		and #$1f			and 	#$1F
.83a5		4a		lsr a				lsr 	a 						; make it 0-7.
.83a6		4a		lsr a				lsr  	a
.83a7		a8		tay				tay
.83a8		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83ab						_AMXCheckOkay:
.83ab		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83ac		88		dey				dey
.83ad		10 fc		bpl $83ab			bpl 	_AMXCheckOkay
.83af		90 27		bcc $83d8			bcc 	_AMXFail 				; not allowed.
.83b1		8a		txa				txa  							; get mask back
.83b2		29 1f		and #$1f			and 	#$1F
.83b4						_AMXHaveInfo:
.83b4		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83b6		10 04		bpl $83bc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83b8		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83ba		d0 1c		bne $83d8			bne 	_AMXFail
.83bc						_AMXAnySize:
.83bc		18		clc				clc 							; add offset to the base opcode
.83bd		6d 24 04	adc $0424			adc 	BaseOpcode
.83c0						_AMXOutputCode:
.83c0		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 		; write the opcode out.
.83c3		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83c5		f0 0e		beq $83d5			beq 	_AMXExit
.83c7		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83c9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83cc		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83ce		30 05		bmi $83d5			bmi 	_AMXExit
.83d0		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83d2		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83d5						_AMXExit:
.83d5		7a		ply				ply
.83d6		38		sec				sec
.83d7		60		rts				rts
.83d8						_AMXFail:
.83d8		a0 00		ldy #$00			ldy 	#0
.83da						_AMXCheckOddities:
.83da		8a		txa				txa
.83db		d9 02 84	cmp $8402,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83de		d0 15		bne $83f5			bne 	_AMXCONext
.83e0		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83e3		cd 24 04	cmp $0424			cmp 	BaseOpcode
.83e6		d0 0d		bne $83f5			bne 	_AMXCONext
.83e8		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83ea		10 04		bpl $83f0			bpl 	_AMXCONotZero
.83ec		a5 60		lda $60				lda 	NSMantissa1
.83ee		d0 05		bne $83f5			bne 	_AMXCONext
.83f0						_AMXCONotZero:
.83f0		b9 01 84	lda $8401,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83f3		80 cb		bra $83c0			bra 	_AMXOutputCode 			; and assemble it
.83f5						_AMXCONext:
.83f5		c8		iny				iny
.83f6		c8		iny				iny
.83f7		c8		iny				iny
.83f8		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; end of table
.83fb		d0 dd		bne $83da			bne 	_AMXCheckOddities
.83fd						_AMXCOFail:
.83fd		7a		ply				ply
.83fe		18		clc				clc
.83ff		60		rts				rts
.8400						ExtraOpcode:
>8400		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8403		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8406		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8409		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>840c		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>840f		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8412		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8415		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8418		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>841b		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>841e		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.841f						LabelHere:
.841f		c8		iny				iny 								; skip .
.8420		a2 00		ldx #$00			ldx 	#0 							; get a term
.8422		20 49 9f	jsr $9f49			jsr 	EvaluateTerm
.8425		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8427		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8429		d0 22		bne $844d			bne 	_ALType 					; otherwise typing error
.842b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.842d		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.842f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8431		85 37		sta $37				sta 	zTemp0+1
.8433		5a		phy				phy 								; copy address in (64k)
.8434		a0 01		ldy #$01			ldy 	#1
.8436		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8439		92 36		sta ($36)			sta 	(zTemp0)
.843b		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.843e		91 36		sta ($36),y			sta 	(zTemp0),y
.8440		c8		iny				iny
.8441		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8443		91 36		sta ($36),y			sta 	(zTemp0),y
.8445		c8		iny				iny
.8446		91 36		sta ($36),y			sta 	(zTemp0),y
.8448		c8		iny				iny
.8449		91 36		sta ($36),y			sta 	(zTemp0),y
.844b		7a		ply				ply
.844c		60		rts				rts
.844d						_ALType:
.844d		4c 28 a7	jmp $a728			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8450						TypeAndCalculateOperand:
.8450		b1 30		lda ($30),y			lda 	(codePtr),y
.8452		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8454		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8456		f0 5b		beq $84b3			beq 	_TACOExit
.8458		c9 80		cmp #$80			cmp 	#KWC_EOL
.845a		f0 57		beq $84b3			beq 	_TACOExit
.845c		c8		iny				iny
.845d		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.845f		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8461		f0 51		beq $84b4			beq 	CalculateOperand
.8463		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8465		f0 1f		beq $8486			beq 	_TACOIndirect
.8467		88		dey				dey 								; undo get of first character
.8468		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get operand
.846b		b1 30		lda ($30),y			lda 	(codePtr),y
.846d		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.846f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8471		d0 40		bne $84b3			bne 	_TACOExit
.8473		c8		iny				iny
.8474		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8477		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8479		c9 58		cmp #$58			cmp 	#'X'
.847b		f0 36		beq $84b3			beq 	_TACOExit
.847d		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.847f		c9 59		cmp #$59			cmp 	#'Y'
.8481		f0 30		beq $84b3			beq 	_TACOExit
.8483						_TACOSyntax:
.8483		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.8486						_TACOIndirect:
.8486		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get the operand
.8489		b1 30		lda ($30),y			lda 	(codePtr),y
.848b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.848d		f0 17		beq $84a6			beq 	_TACOIndX
.848f		20 e2 95	jsr $95e2			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8492		b1 30		lda ($30),y			lda 	(codePtr),y
.8494		a2 d1		ldx #$d1			ldx 	#AM_IND
.8496		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8498		d0 19		bne $84b3			bne 	_TACOExit
.849a		c8		iny				iny
.849b		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.849e		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84a0		d0 e1		bne $8483			bne 	_TACOSyntax
.84a2		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84a4		80 0d		bra $84b3			bra 	_TACOExit
.84a6						_TACOIndX:
.84a6		c8		iny				iny
.84a7		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84aa		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84ac		d0 d5		bne $8483			bne 	_TACOSyntax
.84ae		20 e2 95	jsr $95e2			jsr 	CheckRightBracket			; check )
.84b1		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84b3						_TACOExit:
.84b3		60		rts				rts
.84b4						CalculateOperand:
.84b4		48		pha				pha
.84b5		da		phx				phx
.84b6		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84b8		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.84bb		fa		plx				plx
.84bc		68		pla				pla
.84bd		60		rts				rts
.84be						TACOCheckXY:
.84be		b1 30		lda ($30),y			lda 	(codePtr),y
.84c0		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84c2		c9 40		cmp #$40			cmp 	#$40
.84c4		d0 21		bne $84e7			bne 	_TCXYFail
.84c6		b1 30		lda ($30),y			lda 	(codePtr),y
.84c8		18		clc				clc
.84c9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84cb		85 37		sta $37				sta 	zTemp0+1
.84cd		c8		iny				iny
.84ce		b1 30		lda ($30),y			lda 	(codePtr),y
.84d0		c8		iny				iny
.84d1		85 36		sta $36				sta 	zTemp0
.84d3		5a		phy				phy 								; save position
.84d4		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84d6		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d8		d0 0c		bne $84e6			bne 	_TCXYPopFail
.84da		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84dc		b1 36		lda ($36),y			lda 	(zTemp0),y
.84de		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84e0		f0 08		beq $84ea			beq 	_TCXYFound
.84e2		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84e4		f0 04		beq $84ea			beq 	_TCXYFound
.84e6						_TCXYPopFail:
.84e6		7a		ply				ply
.84e7						_TCXYFail:
.84e7		a9 00		lda #$00			lda 	#0
.84e9		60		rts				rts
.84ea						_TCXYFound:
.84ea		7a		ply				ply 								; restore position
.84eb		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84ee						BackloadProgram:
.84ee		20 79 8f	jsr $8f79			jsr 	NewProgram 					; does the actual NEW.
.84f1		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84f3		a9 45		lda #$45			lda 	#_BLLoad & $FF
.84f5		20 54 96	jsr $9654			jsr 	PrintStringXA
.84f8		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84fa		8d 6a 07	sta $076a			sta 	BackLoadPage
.84fd		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84ff		8d 6b 07	sta $076b			sta 	0+BackLoadPointer
.8502		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8504		8d 6c 07	sta $076c			sta 	1+BackLoadPointer
.8507		a9 ff		lda #$ff			lda 	#$FF
.8509		8d fa ff	sta $fffa			sta 	$FFFA
.850c						_BPLoop:
.850c		a2 ff		ldx #$ff			ldx 	#$FF
.850e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read a byte
.8511		c9 00		cmp #$00			cmp 	#0
.8513		f0 29		beq $853e			beq 	_BPExit 					; if 0 exit
.8515		30 27		bmi $853e			bmi 	_BPExit 					; if -ve exit
.8517						_BPCopy:
.8517		e8		inx				inx  								; copy byte into the lineBuffer
.8518		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.851b		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.851e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read next byte
.8521		30 0a		bmi $852d			bmi 	_BPEndLine 					; -ve = EOL
.8523		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8525		d0 02		bne $8529			bne 	_BPNotTab
.8527		a9 20		lda #$20			lda 	#' '
.8529						_BPNotTab:
.8529		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.852b		b0 ea		bcs $8517			bcs 	_BPCopy 					; until a control character, should be 13 received.
.852d						_BPEndLine:
.852d		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8530		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8533		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8536		f0 d4		beq $850c			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8538		38		sec				sec 								; append not insert
.8539		20 87 ac	jsr $ac87			jsr 	MemoryInsertLine 			; append to current program
.853c		80 ce		bra $850c			bra 	_BPLoop
.853e						_BPExit:
.853e		9c fa ff	stz $fffa			stz 	$FFFA
.8541		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variables etc.
.8544		60		rts				rts
.8545						_BLLoad:
>8545		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>854d		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.855a						BLReadByte:
.855a		da		phx				phx
.855b		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.855d		ad 6a 07	lda $076a			lda 	BackLoadPage	 			; set current page
.8560		85 0b		sta $0b				sta 	8+3
.8562		ad 6b 07	lda $076b			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8565		85 36		sta $36				sta 	zTemp0
.8567		ad 6c 07	lda $076c			lda 	BackLoadPointer+1
.856a		85 37		sta $37				sta 	zTemp0+1
.856c		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.856e		ee 6b 07	inc $076b			inc 	BackLoadPointer 			; bump pointer
.8571		d0 0f		bne $8582			bne 	_BLNoCarry
.8573		ee 6c 07	inc $076c			inc 	BackLoadPointer+1
.8576		10 0a		bpl $8582			bpl 	_BLNoCarry 					; need a new page
.8578		48		pha				pha
.8579		a9 60		lda #$60			lda 	#$60 						; reset pointer
.857b		8d 6c 07	sta $076c			sta 	BackLoadPointer+1
.857e		ee 6a 07	inc $076a			inc 	BackLoadPage 				; next page from source.
.8581		68		pla				pla
.8582						_BLNoCarry:
.8582		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8584		fa		plx				plx
.8585		c9 00		cmp #$00			cmp 	#0
.8587		60		rts				rts
.076a						BackLoadPage:
>076a								.fill  	1
.076b						BackLoadPointer:
>076b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8588						EditProgramCode:
.8588		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.858b		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.858e		20 2b ad	jsr $ad2b			jsr 	MemorySearch
.8591		90 05		bcc $8598			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8593		d0 03		bne $8598			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8595		20 50 ac	jsr $ac50			jsr 	MemoryDeleteLine 			; delete the line
.8598						_EPCNoDelete:
.8598		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.859b		c9 80		cmp #$80			cmp 	#KWC_EOL
.859d		f0 0d		beq $85ac			beq 	_EPCNoInsert
.859f		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85a2		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85a5		20 2b ad	jsr $ad2b			jsr 	MemorySearch
.85a8		18		clc				clc 								; insert at this point.
.85a9		20 87 ac	jsr $ac87			jsr 	MemoryInsertLine 			; insert the line
.85ac						_EPCNoInsert:
.85ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85ad						WarmStart:
.85ad		a2 ff		ldx #$ff			ldx 	#$FF
.85af		9a		txs				txs
.85b0		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85b2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85b5		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.85b8		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.85bb		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.85be		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.85c1		d0 17		bne $85da			bne 	_WSEditCode 				; if so,edit code.
.85c3		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85c6		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.85c8		85 30		sta $30				sta 	codePtr
.85ca		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85cc		85 31		sta $31				sta 	codePtr+1
.85ce		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.85d1		c9 80		cmp #$80			cmp 	#KWC_EOL
.85d3		f0 d8		beq $85ad			beq 	WarmStart
.85d5		20 09 91	jsr $9109			jsr 	RUNCodePointerLine 			; execute that line.
.85d8		80 d3		bra $85ad			bra 	WarmStart
.85da						_WSEditCode:
.85da		20 88 85	jsr $8588			jsr 	EditProgramCode 			; edit the program code
.85dd		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear all variables etc.
.85e0		80 cb		bra $85ad			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85e2						AssembleCommand:
.85e2		a2 00		ldx #$00			ldx 	#0
.85e4		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; start address
.85e7		a5 58		lda $58				lda 	NSMantissa0
.85e9		8d 1e 04	sta $041e			sta 	AssemblerAddress
.85ec		a5 60		lda $60				lda 	NSMantissa1
.85ee		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.85f1		20 ea 95	jsr $95ea			jsr 	CheckComma
.85f4		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; options 0-3
.85f7		a5 58		lda $58				lda 	NSMantissa0
.85f9		8d 20 04	sta $0420			sta 	AssemblerControl
.85fc		60		rts				rts
.85fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85fe						AssertCommand:
.85fe		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8600		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; the assert test
.8603		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; exit if result is non zero.
.8606		d0 05		bne $860d			bne 	_ACExit
.8608		a9 0a		lda #$0a		lda	#10
.860a		4c fb 95	jmp $95fb		jmp	ErrorHandler
.860d						_ACExit:
.860d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.860e						Command_BLoad:
.860e		a2 00		ldx #$00			ldx 	#0
.8610		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; file name to load
.8613		20 ea 95	jsr $95ea			jsr 	CheckComma 					; consume comma
.8616		e8		inx				inx
.8617		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; load address (full physical address)
.861a		5a		phy				phy
.861b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.861d		a6 60		ldx $60				ldx 	NSMantissa1
.861f		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8622		b0 4e		bcs $8672			bcs 	CBLErrorHandler 			; error, so fail.
.8624		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8627		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8629		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.862c						_BLReadFile:
.862c		ad 71 07	lda $0771			lda 	BasicFileStream
.862f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8631		20 9e 81	jsr $819e			jsr 	KNLReadBlock 				; read next block
.8634		b0 22		bcs $8658			bcs 	_BLFileError 				; file error, which might be EOF.
.8636		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8638		f0 f2		beq $862c			beq 	_BLReadFile
.863a		8d 6f 07	sta $076f			sta 	BLCopyCounter 				; counter.
.863d		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; copy the buffer out here
.8640		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8642						_BLCopyLoop:
.8642		bd 62 06	lda $0662,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8645		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8647		c8		iny				iny
.8648		d0 03		bne $864d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.864a		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory
.864d						_BLNoAdjust:
.864d		e8		inx				inx
.864e		ce 6f 07	dec $076f			dec 	BLCopyCounter
.8651		d0 ef		bne $8642			bne 	_BLCopyLoop
.8653		8c 6e 07	sty $076e			sty 	BLYOffset 					; update Y offset
.8656		80 d4		bra $862c			bra 	_BLReadFile 				; go ask for more.
.8658						_BLFileError:
.8658		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.865a		d0 16		bne $8672			bne 	CBLErrorHandler				; no, it's an actual error
.865c		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.865f		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.8662		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8665		7a		ply				ply
.8666		60		rts				rts
.8667						CBLCloseError:
.8667		48		pha				pha
.8668		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.866b		ad 71 07	lda $0771			lda 	BasicFileStream
.866e		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8671		68		pla				pla
.8672						CBLErrorHandler:
.8672		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8675						BLOpenPhysicalMemory:
.8675		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8677		8d 6d 07	sta $076d			sta 	BLNormalMapping
.867a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.867c		8d 6e 07	sta $076e			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.867f		64 3a		stz $3a				stz 	zTemp2
.8681		b5 60		lda $60,x			lda 	NSMantissa1,x
.8683		29 1f		and #$1f			and 	#$1F
.8685		09 60		ora #$60			ora 	#BLAccessPage << 5
.8687		85 3b		sta $3b				sta 	zTemp2+1
.8689		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.868b		16 60		asl $60,x			asl 	NSMantissa1,x
.868d		2a		rol a				rol 	a
.868e		16 60		asl $60,x			asl 	NSMantissa1,x
.8690		2a		rol a				rol 	a
.8691		16 60		asl $60,x			asl 	NSMantissa1,x
.8693		2a		rol a				rol 	a
.8694		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8696		60		rts				rts
.8697						BLClosePhysicalMemory:
.8697		ad 6d 07	lda $076d			lda 	BLNormalMapping
.869a		85 0b		sta $0b				sta 	BLAccessPage+8
.869c		60		rts				rts
.869d						BLAdvancePhysicalMemory:
.869d		48		pha				pha
.869e		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86a0		a5 3b		lda $3b				lda 	zTemp2+1
.86a2		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86a4		d0 06		bne $86ac			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86a6		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86a8		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86aa		85 3b		sta $3b				sta 	zTemp2+1
.86ac						_BLAPMExit:
.86ac		68		pla				pla
.86ad		60		rts				rts
.076d						BLNormalMapping:
>076d								.fill 	1
.076e						BLYOffset:
>076e								.fill 	1
.076f						BLCopyCounter:
>076f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86ae						Command_BSave:
.86ae		a2 00		ldx #$00			ldx 	#0
.86b0		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; file name to load
.86b3		20 ea 95	jsr $95ea			jsr 	CheckComma 					; consume comma
.86b6		e8		inx				inx
.86b7		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; load address (full physical address)
.86ba		20 ea 95	jsr $95ea			jsr 	CheckComma 					; consume comma
.86bd		e8		inx				inx
.86be		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86c1		5a		phy				phy
.86c2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86c4		a6 60		ldx $60				ldx 	NSMantissa1
.86c6		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for reading
.86c9		b0 62		bcs $872d			bcs 	CBSErrorHandler 			; error, so fail.
.86cb		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.86ce		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86d0		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.86d3		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86d5		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; used for data offset.
.86d8						_BSWriteToFileLoop:
.86d8		38		sec				sec 								; pre decrement count.
.86d9		a5 5a		lda $5a				lda 	NSMantissa0+2
.86db		e9 01		sbc #$01			sbc 	#1
.86dd		85 5a		sta $5a				sta 	NSMantissa0+2
.86df		a5 62		lda $62				lda 	NSMantissa1+2
.86e1		e9 00		sbc #$00			sbc 	#0
.86e3		85 62		sta $62				sta 	NSMantissa1+2
.86e5		a5 6a		lda $6a				lda 	NSMantissa2+2
.86e7		e9 00		sbc #$00			sbc 	#0
.86e9		85 6a		sta $6a				sta 	NSMantissa2+2
.86eb		30 15		bmi $8702			bmi 	_BSFileComplete 			; undercounted, so exit.
.86ed		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86ef		9d 62 06	sta $0662,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86f2		e8		inx				inx
.86f3		c8		iny				iny 								; next byte
.86f4		d0 03		bne $86f9			bne 	_BSNoCheck
.86f6		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86f9						_BSNoCheck:
.86f9		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86fb		d0 db		bne $86d8			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86fd		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8700		80 d6		bra $86d8			bra 	_BSWriteToFileLoop 			; and keep on going
.8702						_BSFileComplete:
.8702		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8705		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.8708		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.870b		20 13 82	jsr $8213			jsr 	KNLCloseFile
.870e		7a		ply				ply
.870f		60		rts				rts
.8710						BSFlushBuffer:
.8710		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8712		f0 0d		beq $8721			beq 	_BSFBExit 					; if so, exit.
.8714		a9 62		lda #$62			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8716		85 36		sta $36				sta 	zTemp0
.8718		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.871a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.871c		20 d2 93	jsr $93d2			jsr 	CLWriteByteBlock 			; write it.
.871f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8721						_BSFBExit:
.8721		60		rts				rts
.8722						CBSSCloseError:
.8722		48		pha				pha
.8723		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.8726		ad 71 07	lda $0771			lda 	BasicFileStream
.8729		20 13 82	jsr $8213			jsr 	KNLCloseFile
.872c		68		pla				pla
.872d						CBSErrorHandler:
.872d		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8730						CallCommand:
.8730		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8732		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.8735						_CCClear
.8735		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8736		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; these are optional sequentially.
.8739		e0 04		cpx #$04			cpx 	#4
.873b		d0 f8		bne $8735			bne 	_CCClear
.873d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.873f						_CCCParam:
.873f		b1 30		lda ($30),y			lda 	(codePtr),y
.8741		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8743		d0 09		bne $874e			bne 	_CCCRun6502
.8745		c8		iny				iny 								; skip comma
.8746		e8		inx				inx	 								; next level
.8747		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.874a		e0 03		cpx #$03			cpx 	#3
.874c		90 f1		bcc $873f			bcc 	_CCCParam 					; done all 3 ?
.874e						_CCCRun6502:
.874e		5a		phy				phy 								; save position
.874f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8751		85 37		sta $37				sta 	zTemp0+1
.8753		a5 58		lda $58				lda 	NSMantissa0
.8755		85 36		sta $36				sta 	zTemp0
.8757		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8759		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.875b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.875d		20 62 87	jsr $8762			jsr 	_CCCZTemp0 					; call zTemp0
.8760		7a		ply				ply 								; restore position and exit
.8761		60		rts				rts
.8762						_CCCZTemp0:
.8762		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8765						ClearCommand:
.8765		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8767		85 36		sta $36				sta 	0+zTemp0
.8769		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.876b		85 37		sta $37				sta 	1+zTemp0
.876d						_ClearZeroLoop:
.876d		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.876f		f0 24		beq $8795			beq 	_ClearZeroEnd
.8771		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8773		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8775						_ClearOneVariable:
.8775		91 36		sta ($36),y			sta 	(zTemp0),y
.8777		c8		iny				iny
.8778		c0 08		cpy #$08			cpy 	#8
.877a		d0 f9		bne $8775			bne 	_ClearOneVariable
.877c		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.877e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8780		c9 18		cmp #$18			cmp 	#NSTProcedure
.8782		d0 04		bne $8788			bne 	_ClearNotProcedure
.8784		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8786		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8788						_ClearNotProcedure:
.8788		18		clc				clc 								; go to the next variable
.8789		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.878b		65 36		adc $36				adc 	zTemp0
.878d		85 36		sta $36				sta 	zTemp0
.878f		90 dc		bcc $876d			bcc 	_ClearZeroLoop
.8791		e6 37		inc $37				inc 	zTemp0+1
.8793		80 d8		bra $876d			bra 	_ClearZeroLoop
.8795						_ClearZeroEnd:
.8795		18		clc				clc
.8796		a5 36		lda $36				lda 	zTemp0
.8798		69 01		adc #$01			adc 	#1
.879a		8d 0c 04	sta $040c			sta 	lowMemPtr
.879d		a5 37		lda $37				lda 	zTemp0+1
.879f		69 00		adc #$00			adc 	#0
.87a1		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.87a4		20 e5 b6	jsr $b6e5			jsr 	StackReset
.87a7		20 4b b7	jsr $b74b			jsr 	StringSystemInitialise
.87aa		20 91 94	jsr $9491			jsr 	ProcedureScan
.87ad		20 b8 90	jsr $90b8			jsr 	Command_Restore
.87b0		9c 1e 04	stz $041e			stz 	AssemblerAddress
.87b3		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.87b6		9c 20 04	stz $0420			stz 	AssemblerControl
.87b9		9c 61 06	stz $0661			stz 	KeyboardQueueEntries
.87bc		20 35 a1	jsr $a135			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87c0						ClearScreen:
.87c0		5a		phy				phy
.87c1		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87c3		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87c6		7a		ply				ply
.87c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87c8						Command_Data:
.87c8		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87ca		a2 80		ldx #$80			ldx 	#KWC_EOL
.87cc		20 e3 94	jsr $94e3			jsr 	ScanForward
.87cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87d0						DimCommand:
.87d0		b1 30		lda ($30),y			lda 	(codePtr),y
.87d2		29 c0		and #$c0			and 	#$C0
.87d4		c9 40		cmp #$40			cmp 	#$40
.87d6		d0 7a		bne $8852			bne 	_DCSyntax 				; n o, error.
.87d8		b1 30		lda ($30),y			lda 	(codePtr),y
.87da		18		clc				clc
.87db		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87dd		85 3f		sta $3f				sta 	zaTemp+1
.87df		c8		iny				iny
.87e0		b1 30		lda ($30),y			lda 	(codePtr),y
.87e2		c8		iny				iny
.87e3		85 3e		sta $3e				sta 	zaTemp
.87e5		5a		phy				phy
.87e6		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ea		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87ec		c9 18		cmp #$18			cmp 	#NSTProcedure
.87ee		f0 62		beq $8852			beq 	_DCSyntax
.87f0		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87f2		29 04		and #$04			and 	#NSBIsArray
.87f4		f0 64		beq $885a			beq 	_DCType
.87f6		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87f8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87fa		d0 59		bne $8855			bne 	_DCRedefine
.87fc		7a		ply				ply
.87fd		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get array size, check it.
.8800		5a		phy				phy
.8801		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8803		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8805		7a		ply				ply 							; is there a second (e.g. ,x)
.8806		b1 30		lda ($30),y			lda 	(codePtr),y
.8808		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.880a		d0 0a		bne $8816			bne 	_DCOneDimension
.880c		c8		iny				iny 							; skip comma
.880d		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get 2nd array size
.8810		5a		phy				phy
.8811		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8813		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8815		7a		ply				ply
.8816						_DCOneDimension:
.8816		5a		phy				phy 							; save position
.8817		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8819		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881b		aa		tax				tax
.881c		c8		iny				iny
.881d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881f		e8		inx				inx 							; bump them.
.8820		1a		inc a				inc 	a
.8821		20 4b a5	jsr $a54b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8824		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8826		29 e0		and #$e0			and 	#$E0
.8828		d0 23		bne $884d			bne 	_DCSize
.882a		a0 02		ldy #$02			ldy 	#2 						; get base type
.882c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.882e		20 6b 88	jsr $886b			jsr 	ScaleByBaseType 		; scale by base type
.8831		a5 36		lda $36				lda 	zTemp0
.8833		a6 37		ldx $37				ldx 	zTemp0+1
.8835		20 f7 a0	jsr $a0f7			jsr 	AllocateXABytes 		; allocate memory
.8838		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.883a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.883c		c8		iny				iny
.883d		8a		txa				txa
.883e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8840		7a		ply				ply 							; get position back
.8841		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 		; check )
.8844		b1 30		lda ($30),y			lda 	(codePtr),y
.8846		c8		iny				iny 							; consume in case
.8847		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8849		f0 85		beq $87d0			beq 	DimCommand
.884b		88		dey				dey 							; undo consume
.884c		60		rts				rts
.884d						_DCSize:
.884d		a9 16		lda #$16		lda	#22
.884f		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8852						_DCSyntax:
.8852		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.8855						_DCRedefine:
.8855		a9 15		lda #$15		lda	#21
.8857		4c fb 95	jmp $95fb		jmp	ErrorHandler
.885a						_DCType:
.885a		4c 28 a7	jmp $a728			jmp 	TypeError
.885d						_DCGetSize:
.885d		a2 00		ldx #$00			ldx 	#0 						; get first index.
.885f		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 	; get array dimension
.8862		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8864		f0 e7		beq $884d			beq 	_DCSize
.8866		c9 fe		cmp #$fe			cmp 	#254
.8868		f0 e3		beq $884d			beq 	_DCSize
.886a		60		rts				rts
.886b						ScaleByBaseType:
.886b		29 10		and #$10			and 	#NSBIsString 			; is it string
.886d		d0 19		bne $8888			bne 	_SBBTString
.886f		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8871		48		pha				pha
.8872		a5 36		lda $36				lda 	zTemp0
.8874		48		pha				pha
.8875		06 36		asl $36				asl 	zTemp0 					; x 2
.8877		26 37		rol $37				rol 	zTemp0+1
.8879		06 36		asl $36				asl 	zTemp0 					; x 4
.887b		26 37		rol $37				rol 	zTemp0+1
.887d		68		pla				pla 							; add stacked value = x 5
.887e		65 36		adc $36				adc 	zTemp0
.8880		85 36		sta $36				sta 	zTemp0
.8882		68		pla				pla
.8883		65 37		adc $37				adc 	zTemp0+1
.8885		85 37		sta $37				sta 	zTemp0+1
.8887		60		rts				rts
.8888						_SBBTString:
.8888		06 36		asl $36				asl 	zTemp0
.888a		26 37		rol $37				rol 	zTemp0+1
.888c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.888d						Command_Dir:
.888d		ad 62 07	lda $0762			lda     KNLDefaultDrive				; set drive to list.
.8890		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8892		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8894		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8897		b0 56		bcs $88ef			bcs     _CDExit
.8899						_CDEventLoop:
.8899		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.889c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.889f		b0 f8		bcs $8899			bcs     _CDEventLoop
.88a1		ad 63 07	lda $0763			lda     KNLEvent.type
.88a4		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88a6		f0 47		beq $88ef			beq    	_CDExit
.88a8		20 ad 88	jsr $88ad			jsr     _CDMessages 				; handle various messages
.88ab		80 ec		bra $8899			bra     _CDEventLoop
.88ad						_CDMessages:
.88ad		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88af		f0 15		beq $88c6			beq     _CDEVRead
.88b1		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88b3		f0 19		beq $88ce			beq     _CDEVVolume
.88b5		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88b7		f0 17		beq $88d0			beq     _CDEVFile
.88b9		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88bb		f0 28		beq $88e5			beq     _CDEVFree
.88bd		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88bf		f0 26		beq $88e7			beq     _CDEVEOF
.88c1		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88c3		f0 22		beq $88e7			beq     _CDEVEOF
.88c5		60		rts				rts
.88c6						_CDEVRead:
.88c6		ad 66 07	lda $0766			lda     KNLEvent.directory.stream
.88c9		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88cb		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88ce						_CDEVVolume:
.88ce		80 f6		bra $88c6			bra     _CDEVRead
.88d0						_CDEVFile:
.88d0		a9 20		lda #$20			lda 	#32
.88d2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d5		ad 68 07	lda $0768			lda     KNLEvent.directory.file.len
.88d8		20 f2 88	jsr $88f2			jsr     _CDReadData
.88db		20 54 96	jsr $9654			jsr 	PrintStringXA
.88de		a9 0d		lda #$0d			lda 	#13
.88e0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88e3		80 e1		bra $88c6			bra     _CDEVRead
.88e5						_CDEVFree:
.88e5		80 00		bra $88e7			bra     _CDEVEOF
.88e7						_CDEVEOF:
.88e7		ad 66 07	lda $0766			lda     KNLEvent.directory.stream
.88ea		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.88ec		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.88ef						_CDExit:
.88ef		4c ad 85	jmp $85ad			jmp 	WarmStart
.88f2						_CDReadData:
.88f2		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88f4		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.88f6		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.88f8		a9 05		lda #$05			lda     #lineBuffer >> 8
.88fa		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.88fc		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.88ff		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8901		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8904		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.8906		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8908		60		rts				rts
.8909						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8909						Command_Drive:
.8909		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.890c		20 40 81	jsr $8140			jsr 	KNLSetDrive
.890f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8910						EndCommand:
.8910		4c ad 85	jmp $85ad			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8913						ForCommand:
.8913		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8915		20 7f b6	jsr $b67f			jsr 	StackOpen
.8918		a2 00		ldx #$00			ldx 	#0
.891a		20 49 9f	jsr $9f49			jsr 	EvaluateTerm
.891d		b5 50		lda $50,x			lda 	NSStatus,x
.891f		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8921		d0 47		bne $896a			bne		_FCError
.8923		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8925		20 f2 95	jsr $95f2			jsr 	CheckNextA
.8928		e8		inx				inx
.8929		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; <from> in +1
.892c		b1 30		lda ($30),y			lda 	(codePtr),y
.892e		c8		iny				iny 								; consume it
.892f		48		pha				pha 								; save on stack for later
.8930		c9 be		cmp #$be			cmp 	#KWD_DOWNTO
.8932		f0 04		beq $8938			beq 	_FCNoSyntax
.8934		c9 d8		cmp #$d8			cmp 	#KWD_TO
.8936		d0 35		bne $896d			bne 	_FCSyntaxError
.8938						_FCNoSyntax:
.8938		e8		inx				inx
.8939		20 0d a5	jsr $a50d			jsr 	EvaluateInteger
.893c		20 c4 b6	jsr $b6c4			jsr 	STKSaveCodePosition 		; save loop back position
.893f		68		pla				pla 								; restore DOWNTO or TO
.8940		5a		phy				phy 								; save Y on the stack
.8941		49 be		eor #$be			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8943		f0 02		beq $8947			beq 	_FCNotDownTo
.8945		a9 02		lda #$02			lda 	#2
.8947						_FCNotDownTo:
.8947		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8948		a0 10		ldy #$10			ldy 	#16
.894a		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.894c		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.894e		a5 58		lda $58				lda 	NSMantissa0
.8950		91 34		sta ($34),y			sta 	(basicStack),y
.8952		a5 60		lda $60				lda 	NSMantissa1
.8954		c8		iny				iny
.8955		91 34		sta ($34),y			sta 	(basicStack),y
.8957		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8959		a2 01		ldx #$01			ldx 	#1
.895b		20 70 89	jsr $8970			jsr 	FCIntegerToStack
.895e		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8960		a2 02		ldx #$02			ldx 	#2
.8962		20 70 89	jsr $8970			jsr 	FCIntegerToStack
.8965		20 8b 89	jsr $898b			jsr 	CopyIndexToReference
.8968		7a		ply				ply 								; restore position
.8969		60		rts				rts
.896a						_FCError:
.896a		4c 28 a7	jmp $a728			jmp 	TypeError
.896d						_FCSyntaxError:
.896d		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.8970						FCIntegerToStack:
.8970		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8972		10 03		bpl $8977			bpl	 	_FCNotNegative
.8974		20 69 a5	jsr $a569			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8977						_FCNotNegative:
.8977		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8979		91 34		sta ($34),y			sta 	(basicStack),y
.897b		c8		iny				iny
.897c		b5 60		lda $60,x			lda 	NSMantissa1,x
.897e		91 34		sta ($34),y			sta 	(basicStack),y
.8980		c8		iny				iny
.8981		b5 68		lda $68,x			lda 	NSMantissa2,x
.8983		91 34		sta ($34),y			sta 	(basicStack),y
.8985		c8		iny				iny
.8986		b5 70		lda $70,x			lda 	NSMantissa3,x
.8988		91 34		sta ($34),y			sta 	(basicStack),y
.898a		60		rts				rts
.898b						CopyIndexToReference:
.898b		5a		phy				phy
.898c		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.898e		38		sec				sec 								; (because we copy from offset 8)
.898f		b1 34		lda ($34),y			lda 	(basicStack),y
.8991		e9 08		sbc #$08			sbc 	#8
.8993		85 36		sta $36				sta 	zTemp0
.8995		c8		iny				iny
.8996		b1 34		lda ($34),y			lda 	(basicStack),y
.8998		e9 00		sbc #$00			sbc 	#0
.899a		85 37		sta $37				sta 	zTemp0+1
.899c		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.899e		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89a0		b1 34		lda ($34),y			lda 	(basicStack),y
.89a2		0a		asl a				asl 	a 							; into carry
.89a3		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89a5		90 14		bcc $89bb			bcc 	_CITRNormal
.89a7		38		sec				sec
.89a8						_CITRNegative:
.89a8		a9 00		lda #$00			lda 	#0
.89aa		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89ac		91 36		sta ($36),y			sta 	(zTemp0),y
.89ae		c8		iny				iny
.89af		ca		dex				dex
.89b0		d0 f6		bne $89a8			bne 	_CITRNegative
.89b2		88		dey				dey 								; look at MSB of mantissa
.89b3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89b5		09 80		ora #$80			ora 	#$80
.89b7		91 36		sta ($36),y			sta 	(zTemp0),y
.89b9		7a		ply				ply
.89ba		60		rts				rts
.89bb						_CITRNormal:
.89bb		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89bd		91 36		sta ($36),y			sta 	(zTemp0),y
.89bf		c8		iny				iny
.89c0		ca		dex				dex
.89c1		d0 f8		bne $89bb			bne 	_CITRNormal
.89c3		7a		ply				ply 								; and exit.
.89c4		60		rts				rts
.89c5						NextCommand:
.89c5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89c7		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89c9		20 ac b6	jsr $b6ac			jsr 	StackCheckFrame
.89cc		5a		phy				phy
.89cd		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89cf		b1 34		lda ($34),y			lda 	(basicStack),y
.89d1		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89d3		30 02		bmi $89d7			bmi 	_NCStepNeg
.89d5		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89d7						_NCStepNeg:
.89d7		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89d9		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89db		18		clc				clc
.89dc						_NCBump:
.89dc		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89de		91 34		sta ($34),y			sta 	(basicStack),y
.89e0		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89e2		c8		iny				iny 								; next byte
.89e3		ca		dex				dex 								; do four times
.89e4		d0 f6		bne $89dc			bne 	_NCBump
.89e6		20 8b 89	jsr $898b			jsr		CopyIndexToReference		; copy it to the reference variable.
.89e9		a0 10		ldy #$10			ldy 	#16 						; get step count again
.89eb		b1 34		lda ($34),y			lda 	(basicStack),y
.89ed		0a		asl a				asl 	a 							; sign bit to carry
.89ee		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89f0		85 38		sta $38				sta 	zTemp1
.89f2		90 02		bcc $89f6			bcc 	_NCCompRev 					; use if step is +ve
.89f4		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89f6						_NCCompRev:
.89f6		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89f8		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89fa		85 39		sta $39				sta 	zTemp1+1
.89fc		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.89fe		38		sec				sec
.89ff						_NCCompare:
.89ff		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a01		b1 34		lda ($34),y			lda 	(basicStack),y
.8a03		a4 39		ldy $39				ldy 	zTemp1+1
.8a05		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a07		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a09		e6 39		inc $39				inc 	zTemp1+1
.8a0b		ca		dex				dex 								; do it 4 times.
.8a0c		d0 f1		bne $89ff			bne 	_NCCompare
.8a0e		50 02		bvc $8a12			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a10		49 80		eor #$80			eor 	#$80
.8a12						_NCNoOverflow:
.8a12		7a		ply				ply 								; restore Y position
.8a13		0a		asl a				asl 	a 							; is bit 7 set.
.8a14		90 04		bcc $8a1a			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a16		20 9e b6	jsr $b69e			jsr 	StackClose 					; exit the loop
.8a19		60		rts				rts
.8a1a						_NCLoopBack:
.8a1a		20 d5 b6	jsr $b6d5			jsr 	STKLoadCodePosition 		; loop back
.8a1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a1e						Command_GOSUB:
.8a1e		a2 00		ldx #$00			ldx 	#0
.8a20		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a23		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a25		20 7f b6	jsr $b67f			jsr 	StackOpen 					; create frame
.8a28		20 c4 b6	jsr $b6c4			jsr 	STKSaveCodePosition 		; save current position
.8a2b		4c 41 8a	jmp $8a41			jmp 	GotoStackX
.8a2e						Command_RETURN:
.8a2e		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a30		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a32		20 ac b6	jsr $b6ac			jsr 	StackCheckFrame
.8a35		20 d5 b6	jsr $b6d5			jsr 	STKLoadCodePosition 		; restore code position
.8a38		20 9e b6	jsr $b69e			jsr 	StackClose
.8a3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a3c						GotoCommand:
.8a3c		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a3e		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.8a41						GotoStackX:
.8a41		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a43		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a44		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a46		fa		plx				plx
.8a47		20 2b ad	jsr $ad2b			jsr 	MemorySearch 				; transfer to line number AX.
.8a4a		90 05		bcc $8a51			bcc 	_GotoError 					; not found, off end.
.8a4c		d0 03		bne $8a51			bne 	_GotoError 					; not found exactly
.8a4e		4c 02 91	jmp $9102			jmp 	RunNewLine 					; and go straight to new line code.
.8a51						_GotoError:
.8a51		a9 0d		lda #$0d		lda	#13
.8a53		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a56						IfCommand:
.8a56		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a58		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber
.8a5b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5d		c9 b2		cmp #$b2			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a5f		d0 0a		bne $8a6b			bne 	_IfStructured 				; we still support it.
.8a61		c8		iny				iny 								; consume THEN
.8a62		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; is it zero
.8a65		f0 01		beq $8a68			beq 	_IfFail 					; if fail, go to next line
.8a67		60		rts				rts 								; if THEN just continue
.8a68						_IfFail:
.8a68		4c ea 90	jmp $90ea			jmp 	EOLCommand
.8a6b						_IfStructured:
.8a6b		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; is it zero
.8a6e		d0 07		bne $8a77			bne 	_IfExit 					; if not, then continue normally.
.8a70		a9 bf		lda #$bf			lda 	#KWD_ELSE 					; look for else/endif
.8a72		a2 af		ldx #$af			ldx 	#KWD_ENDIF
.8a74		20 e3 94	jsr $94e3			jsr 	ScanForward 				; and run from there
.8a77						_IfExit:
.8a77		60		rts				rts
.8a78						ElseCode:
.8a78		a9 af		lda #$af			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a7a		aa		tax				tax 								; so just go to the structure exit
.8a7b		20 e3 94	jsr $94e3			jsr 	ScanForward
.8a7e		60		rts				rts
.8a7f						EndIf:
.8a7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8a80						Command_Input:
.8a80		9c 28 04	stz $0428			stz 	isPrintFlag
.8a83		80 0c		bra $8a91			bra 	Command_IP_Main
.8a85						Command_CPrint:
.8a85		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8a87		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a8a		80 05		bra $8a91			bra 	Command_IP_Main
.8a8c						Command_Print:
.8a8c		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8a8e		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a91						Command_IP_Main:
.8a91		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a92						_CPLoop:
.8a92		08		php				php 								; save last action flag
.8a93		b1 30		lda ($30),y			lda 	(codePtr),y
.8a95		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a97		f0 54		beq $8aed			beq 	_CPExit
.8a99		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a9b		f0 50		beq $8aed			beq 	_CPExit
.8a9d		68		pla				pla 								; throw last action flag
.8a9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa0		c8		iny				iny
.8aa1		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8aa3		f0 45		beq $8aea			beq 	_CPContinueWithSameLine
.8aa5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8aa7		f0 3c		beq $8ae5			beq 	_CPTab
.8aa9		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aab		f0 34		beq $8ae1			beq 	_CPNewLine
.8aad		88		dey				dey 								; undo the get.
.8aae		20 fd 9a	jsr $9afd			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8ab3		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8ab5		f0 0d		beq $8ac4			beq 	_CPIsValue 					; no, display it.
.8ab7		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8aba		d0 05		bne $8ac1			bne 	_CPIsPrint 					; otherwise display.
.8abc		20 f6 8a	jsr $8af6			jsr 	CIInputValue 				; input a value to the reference
.8abf		80 20		bra $8ae1			bra 	_CPNewLine
.8ac1						_CPIsPrint:
.8ac1		20 c2 9d	jsr $9dc2			jsr 	Dereference 				; dereference if required.
.8ac4						_CPIsValue:
.8ac4		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8ac6		29 10		and #$10			and 	#NSBIsString
.8ac8		f0 09		beq $8ad3			beq 	_CPNumber
.8aca		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8acc		a5 58		lda $58				lda 	NSMantissa0
.8ace		20 59 8b	jsr $8b59			jsr 	CPPrintStringXA
.8ad1		80 be		bra $8a91			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8ad3						_CPNumber:
.8ad3		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ad5		20 d5 a3	jsr $a3d5			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8ad8		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8ada		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8adc		20 59 8b	jsr $8b59			jsr 	CPPrintStringXA 			; print it.
.8adf		80 b0		bra $8a91			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8ae1						_CPNewLine:
.8ae1		a9 0d		lda #$0d			lda 	#13
.8ae3		80 02		bra $8ae7			bra 	_CPPrintCharDirect
.8ae5						_CPTab:
.8ae5		a9 09		lda #$09			lda 	#9 							; print TAB
.8ae7						_CPPrintCharDirect:
.8ae7		20 74 8b	jsr $8b74			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8aea						_CPContinueWithSameLine:
.8aea		38		sec				sec 								; loop round with carry set, which
.8aeb		80 a5		bra $8a92			bra 	_CPLoop 					; will inhibit final CR
.8aed						_CPExit:
.8aed		28		plp				plp 								; get last action flag
.8aee		b0 05		bcs $8af5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8af0		a9 0d		lda #$0d			lda 	#13 						; print new line
.8af2		20 74 8b	jsr $8b74			jsr 	CPPVControl
.8af5						_CPExit2:
.8af5		60		rts				rts
.8af6						CIInputValue:
.8af6		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8af8						_CIInputLine:
.8af8		20 77 8b	jsr $8b77			jsr 	CPInputVector 				; get key
.8afb		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8afd		f0 1f		beq $8b1e			beq 	_CIHaveValue
.8aff		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b01		f0 11		beq $8b14			beq 	_CIBackspace
.8b03		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b05		90 f1		bcc $8af8			bcc 	_CIInputLine
.8b07		e0 50		cpx #$50			cpx 	#80 						; max length
.8b09		b0 ed		bcs $8af8			bcs 	_CIInputLine
.8b0b		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8b0e		e8		inx				inx
.8b0f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b12		80 e4		bra $8af8			bra 	_CIInputLine
.8b14						_CIBackspace:
.8b14		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b16		f0 e0		beq $8af8			beq 	_CIInputLine
.8b18		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b1b		ca		dex				dex
.8b1c		80 da		bra $8af8			bra 	_CIInputLine
.8b1e						_CIHaveValue:
.8b1e		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b21		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b23		29 10		and #$10			and 	#NSBIsString
.8b25		f0 17		beq $8b3e			beq 	_CIAssignNumber 			; assign a number
.8b27		a2 01		ldx #$01			ldx 	#1
.8b29		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b2b		95 58		sta $58,x			sta 	NSMantissa0,x
.8b2d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b2f		95 60		sta $60,x			sta 	NSMantissa1,x
.8b31		74 68		stz $68,x			stz 	NSMantissa2,x
.8b33		74 70		stz $70,x			stz 	NSMantissa3,x
.8b35		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b37		95 50		sta $50,x			sta  	NSStatus,x
.8b39		ca		dex				dex 								; X = 0
.8b3a		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8b3d		60		rts				rts
.8b3e						_CIAssignNumber:
.8b3e		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b40		85 36		sta $36				sta 	zTemp0
.8b42		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b44		85 37		sta $37				sta 	zTemp0+1
.8b46		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b48		20 fd a2	jsr $a2fd			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b4b		90 07		bcc $8b54			bcc 	_CIIsOkay
.8b4d		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b4f		20 6c 8b	jsr $8b6c			jsr 	CPPrintVector
.8b52		80 a2		bra $8af6			bra 	CIInputValue
.8b54						_CIIsOkay:
.8b54		ca		dex				dex 								; X = 0
.8b55		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8b58		60		rts				rts
.8b59						CPPrintStringXA:
.8b59		5a		phy				phy
.8b5a		86 37		stx $37				stx 	zTemp0+1
.8b5c		85 36		sta $36				sta 	zTemp0
.8b5e		a0 00		ldy #$00			ldy 	#0
.8b60						_PSXALoop:
.8b60		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b62		f0 06		beq $8b6a			beq 	_PSXAExit
.8b64		20 6c 8b	jsr $8b6c			jsr 	CPPrintVector
.8b67		c8		iny				iny
.8b68		80 f6		bra $8b60			bra 	_PSXALoop
.8b6a						_PSXAExit:
.8b6a		7a		ply				ply
.8b6b		60		rts				rts
.8b6c						CPPrintVector:
.8b6c		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b6f		30 03		bmi $8b74			bmi 	CPPVControl
.8b71		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b74						CPPVControl:
.8b74		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b77						CPInputVector:
.8b77		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b7a						LetCommand:
.8b7a		a2 00		ldx #$00			ldx 	#0
.8b7c		b1 30		lda ($30),y			lda 	(codePtr),y
.8b7e		c9 b5		cmp #$b5			cmp 	#KWD_AT
.8b80		d0 14		bne $8b96			bne 	_LCStandard
.8b82		c8		iny				iny 								; skip equal
.8b83		20 49 9f	jsr $9f49			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8b86		20 c2 9d	jsr $9dc2			jsr 	Dereference 				; dereference it to a value
.8b89		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8b8b		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b8d		95 50		sta $50,x			sta 	NSStatus,x
.8b8f		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b91		d0 0f		bne $8ba2			bne 	_LCMain
.8b93		4c 28 a7	jmp $a728			jmp 	TypeError 					; was a reference before.
.8b96						_LCStandard:
.8b96		ad e7 9a	lda $9ae7			lda 	PrecedenceLevel+"*"			; precedence > this
.8b99		20 01 9b	jsr $9b01			jsr 	EvaluateExpressionAtPrecedence
.8b9c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8b9e		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ba0		f0 0e		beq $8bb0			beq 	_LetGoProc 					; it's a procedure call.
.8ba2						_LCMain:
.8ba2		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ba4		20 f2 95	jsr $95f2			jsr 	CheckNextA
.8ba7		e8		inx				inx 								; RHS
.8ba8		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue
.8bab		ca		dex				dex
.8bac		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8baf		60		rts				rts
.8bb0						_LetGoProc:
.8bb0		4c c0 8f	jmp $8fc0			jmp 	CallProcedure
.8bb3						AssignVariable:
.8bb3		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bb5		48		pha				pha 								; save a copy
.8bb6		55 51		eor $51,x			eor 	NSStatus+1,x
.8bb8		29 10		and #$10			and 	#NSBIsString
.8bba		d0 0b		bne $8bc7			bne 	_ASError
.8bbc		68		pla				pla 								; get back
.8bbd		29 10		and #$10			and 	#NSBIsString 				; check type
.8bbf		d0 03		bne $8bc4			bne 	_ASString
.8bc1		4c 00 9d	jmp $9d00			jmp 	AssignNumber
.8bc4						_ASString:
.8bc4		4c 5e 9d	jmp $9d5e			jmp 	AssignString
.8bc7						_ASError:
.8bc7		4c 28 a7	jmp $a728			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bca						Command_List:
.8bca		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8bcd		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bcf		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bd2		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd4		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bd6		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bd8		f0 72		beq $8c4c			beq 	_CLListProcedure
.8bda		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bdc		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8bde		a9 ff		lda #$ff			lda 	#$FF
.8be0		85 5f		sta $5f				sta 	NSMantissa0+7
.8be2		85 67		sta $67				sta 	NSMantissa1+7
.8be4		b1 30		lda ($30),y			lda 	(codePtr),y
.8be6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8be8		f0 1a		beq $8c04			beq 	_CLSecond
.8bea		20 c9 8c	jsr $8cc9			jsr 	CLIsDigit 					; if not digit, list all
.8bed		b0 20		bcs $8c0f			bcs 	_CLStart
.8bef		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bf1		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.8bf4		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bf8		f0 0a		beq $8c04			beq 	_CLSecond 					; if so go get it
.8bfa		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8bfc		85 5f		sta $5f				sta 	NSMantissa0+7
.8bfe		a5 64		lda $64				lda 	NSMantissa1+4
.8c00		85 67		sta $67				sta 	NSMantissa1+7
.8c02		80 0b		bra $8c0f			bra 	_CLStart
.8c04						_CLSecond:
.8c04		c8		iny				iny 								; consume comma
.8c05		20 c9 8c	jsr $8cc9			jsr 	CLIsDigit 					; digit found
.8c08		b0 05		bcs $8c0f			bcs 	_CLStart 					; if not, continue listing
.8c0a		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c0c		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.8c0f						_CLStart
.8c0f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c11		85 30		sta $30				sta 	codePtr
.8c13		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c15		85 31		sta $31				sta 	codePtr+1
.8c17						_CLLoop:
.8c17		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c19		f0 03		beq $8c1e			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c1b		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.8c1e						_NoEvents:
.8c1e		d0 27		bne $8c47			bne 	_CLBreak
.8c20		b2 30		lda ($30)			lda 	(codePtr)
.8c22		f0 20		beq $8c44			beq 	_CLExit
.8c24		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c26		20 b8 8c	jsr $8cb8			jsr 	CLCompareLineNo
.8c29		90 0c		bcc $8c37			bcc 	_CLNext
.8c2b		a2 07		ldx #$07			ldx 	#7
.8c2d		20 b8 8c	jsr $8cb8			jsr 	CLCompareLineNo
.8c30		f0 02		beq $8c34			beq 	_CLDoThisOne
.8c32		b0 03		bcs $8c37			bcs 	_CLNext
.8c34						_CLDoThisOne:
.8c34		20 a5 8c	jsr $8ca5			jsr 	CLListOneLine 				; routine to list the current line.
.8c37						_CLNext:
.8c37		18		clc				clc
.8c38		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c3a		65 30		adc $30				adc 	codePtr
.8c3c		85 30		sta $30				sta 	codePtr
.8c3e		90 02		bcc $8c42			bcc 	_CREExit
.8c40		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c42						_CREExit:
.8c42		80 d3		bra $8c17			bra 	_CLLoop
.8c44						_CLExit:
.8c44		4c ad 85	jmp $85ad			jmp 	WarmStart
.8c47						_CLBreak:
.8c47		a9 01		lda #$01		lda	#1
.8c49		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8c4c						_CLListProcedure:
.8c4c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4e		85 38		sta $38				sta 	zTemp1
.8c50		c8		iny				iny
.8c51		b1 30		lda ($30),y			lda 	(codePtr),y
.8c53		85 39		sta $39				sta 	zTemp1+1
.8c55		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c57		85 30		sta $30				sta 	codePtr
.8c59		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c5b		85 31		sta $31				sta 	codePtr+1
.8c5d						_CLLPSearch:
.8c5d		b2 30		lda ($30)			lda 	(codePtr)
.8c5f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c61		f0 e1		beq $8c44			beq 	_CLExit
.8c63		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c65		b1 30		lda ($30),y			lda 	(codePtr),y
.8c67		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.8c69		d0 0e		bne $8c79			bne 	_CLLPNext
.8c6b		c8		iny				iny 								; check if PROC this.
.8c6c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c70		d0 07		bne $8c79			bne 	_CLLPNext
.8c72		c8		iny				iny
.8c73		b1 30		lda ($30),y			lda 	(codePtr),y
.8c75		c5 39		cmp $39				cmp 	zTemp1+1
.8c77		f0 0d		beq $8c86			beq 	_CLLPFound
.8c79						_CLLPNext:
.8c79		18		clc				clc
.8c7a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c7c		65 30		adc $30				adc 	codePtr
.8c7e		85 30		sta $30				sta 	codePtr
.8c80		90 02		bcc $8c84			bcc 	_CREExit
.8c82		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c84						_CREExit:
.8c84		80 d7		bra $8c5d			bra 	_CLLPSearch
.8c86						_CLLPFound:
.8c86		b2 30		lda ($30)			lda 	(codePtr)
.8c88		f0 ba		beq $8c44			beq 	_CLExit
.8c8a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8c8c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8e		48		pha				pha
.8c8f		20 a5 8c	jsr $8ca5			jsr 	CLListOneLine 				; list line and go forward
.8c92		18		clc				clc
.8c93		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c95		65 30		adc $30				adc 	codePtr
.8c97		85 30		sta $30				sta 	codePtr
.8c99		90 02		bcc $8c9d			bcc 	_CREExit
.8c9b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c9d						_CREExit:
.8c9d		68		pla				pla 								; reached ENDPROC ?
.8c9e		c9 b0		cmp #$b0			cmp 	#KWD_ENDPROC
.8ca0		d0 e4		bne $8c86			bne 	_CLLPFound
.8ca2		4c ad 85	jmp $85ad			jmp 	WarmStart
.8ca5						CLListOneLine:
.8ca5		20 46 95	jsr $9546			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ca8		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cab		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cad		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8caf		20 54 96	jsr $9654			jsr 	PrintStringXA
.8cb2		a9 0d		lda #$0d			lda 	#13 						; new line
.8cb4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cb7		60		rts				rts
.8cb8						CLCompareLineNo:
.8cb8		38		sec				sec
.8cb9		a0 01		ldy #$01			ldy 	#1
.8cbb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cbd		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cbf		85 36		sta $36				sta 	zTemp0
.8cc1		c8		iny				iny
.8cc2		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cc6		05 36		ora $36				ora 	zTemp0
.8cc8		60		rts				rts
.8cc9						CLIsDigit:
.8cc9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccb		c9 30		cmp #$30			cmp 	#"0"
.8ccd		90 03		bcc $8cd2			bcc	 	_CLIDExitFalse
.8ccf		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cd1		60		rts				rts
.8cd2						_CLIDExitFalse:
.8cd2		38		sec				sec
.8cd3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cd4						Command_Load:
.8cd4		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; file name to load
.8cd7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cd9		a5 36		lda $36				lda 	zTemp0
.8cdb		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8cde		b0 44		bcs $8d24			bcs 	CLErrorHandler 				; error, so fail.
.8ce0		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8ce3		20 74 8d	jsr $8d74			jsr     LoadReadByteInit            ; Init reader with the stream
.8ce6		20 79 8f	jsr $8f79			jsr 	NewProgram 					; does the actual NEW.
.8ce9		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.8cec						_CLLoop:
.8cec		20 32 8d	jsr $8d32			jsr 	LoadReadLine 				; get next line.
.8cef		f0 10		beq $8d01			beq 	_CLExit 					; end, exit.
.8cf1		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8cf4		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8cf7		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8cfa		f0 f0		beq $8cec			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8cfc		20 88 85	jsr $8588			jsr 	EditProgramCode 			; do the editing etc.
.8cff		80 eb		bra $8cec			bra 	_CLLoop
.8d01						_CLExit:
.8d01		ad 71 07	lda $0771			lda 	BasicFileStream
.8d04		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d07						CLComplete:
.8d07		a9 11		lda #$11			lda 	#_CLCMsg & $FF
.8d09		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d0b		20 54 96	jsr $9654			jsr 	PrintStringXA
.8d0e		4c ad 85	jmp $85ad			jmp 	WarmStart
.8d11						_CLCMsg:
>8d11		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d19		2e 0d 00
.8d1c						CLCloseError:
.8d1c		48		pha				pha
.8d1d		ad 71 07	lda $0771			lda 	BasicFileStream
.8d20		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d23		68		pla				pla
.8d24						CLErrorHandler:
.8d24		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d26		f0 05		beq $8d2d			beq 	_CLEHNotFound
.8d28		a9 1a		lda #$1a		lda	#26
.8d2a		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8d2d						_CLEHNotFound:
.8d2d		a9 19		lda #$19		lda	#25
.8d2f		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8d32						LoadReadLine:
.8d32		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d34		20 4e 8d	jsr $8d4e			jsr 	LoadReadCharacter
.8d37		f0 14		beq $8d4d			beq 	_LRLExit 					; eof ?
.8d39		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d3b		90 f5		bcc $8d32			bcc 	LoadReadLine
.8d3d						_LRLLoop:
.8d3d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8d40		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d43		e8		inx				inx
.8d44		20 4e 8d	jsr $8d4e			jsr 	LoadReadCharacter 			; next line
.8d47		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d49		b0 f2		bcs $8d3d			bcs 	_LRLLoop
.8d4b		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d4d						_LRLExit:
.8d4d		60		rts				rts
.8d4e						LoadReadCharacter:
.8d4e		da		phx				phx
.8d4f		5a		phy				phy
.8d50		ad 70 07	lda $0770			lda 	LoadEOFFlag 				; already done EOF.
.8d53		d0 0c		bne $8d61			bne 	_LRCIsEOF
.8d55		20 7e 8d	jsr $8d7e			jsr 	LoadReadByte 				; read a byte
.8d58		90 09		bcc $8d63			bcc		_LRCExit 					; read okay.
.8d5a		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d5c		d0 be		bne $8d1c			bne 	CLCloseError
.8d5e		ce 70 07	dec $0770			dec 	LoadEOFFlag
.8d61						_LRCIsEOF:
.8d61		a9 00		lda #$00			lda 	#0
.8d63						_LRCExit:
.8d63		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d65		d0 02		bne $8d69			bne 	_LRCNotTab
.8d67		a9 20		lda #$20			lda 	#' '
.8d69						_LRCNotTab:
.8d69		c9 0a		cmp #$0a			cmp 	#$0A
.8d6b		d0 02		bne $8d6f			bne 	_LRCNotLF
.8d6d		a9 0d		lda #$0d			lda 	#$0D
.8d6f						_LRCNotLF:
.8d6f		7a		ply				ply
.8d70		fa		plx				plx
.8d71		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d73		60		rts				rts
.8d74						LoadReadByteInit:
.8d74		8d 72 07	sta $0772			sta     LoadFileStream 				; save stream
.8d77		9c 73 07	stz $0773			stz     LoadNextCharacter 			; reset buffer
.8d7a		9c 74 07	stz $0774			stz     LoadEndCharacter
.8d7d		60		rts				rts
.8d7e						LoadReadByte:
.8d7e		da		phx				phx
.8d7f		ae 73 07	ldx $0773			ldx     LoadNextCharacter 					; all data consumed ?
.8d82		ec 74 07	cpx $0774			cpx     LoadEndCharacter
.8d85		d0 12		bne $8d99			bne     _KNLRBGetNextByte
.8d87		ad 72 07	lda $0772			lda     LoadFileStream
.8d8a		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8d8c		20 9e 81	jsr $819e			jsr     KNLReadBlock 				; read next chunk from the stream
.8d8f		b0 0f		bcs $8da0			bcs     _KNLRBError 				; error has occurred on read.
.8d91		8d 74 07	sta $0774			sta     LoadEndCharacter 						; # read is the number available
.8d94		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8d96		8e 73 07	stx $0773			stx     LoadNextCharacter
.8d99						_KNLRBGetNextByte:
.8d99		bd 62 06	lda $0662,x			lda     KNLReadBuffer,x 			; get the next data item
.8d9c		ee 73 07	inc $0773			inc     LoadNextCharacter 					; and advance the index
.8d9f		18		clc				clc 								; succeeded
.8da0						_KNLRBError:
.8da0		fa		plx				plx
.8da1		60		rts				rts
.0770						LoadEOFFlag:
>0770								.fill 	1
.0771						BasicFileStream:
>0771								.fill 	1
.0772						LoadFileStream:
>0772								.byte   ?
.0773						LoadNextCharacter:
>0773								.byte   ?
.0774						LoadEndCharacter:
>0774								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8da2						Command_LOCAL:
.8da2		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8da4		20 b0 8d	jsr $8db0			jsr 	LocaliseNextTerm 			; convert term to a local.
.8da7		b1 30		lda ($30),y			lda 	(codePtr),y
.8da9		c8		iny				iny
.8daa		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dac		f0 f4		beq $8da2			beq 	Command_LOCAL 				; if so, localise another variable.
.8dae		88		dey				dey 								; unpick pre-get
.8daf		60		rts				rts
.8db0						LocaliseNextTerm:
.8db0		20 49 9f	jsr $9f49			jsr 	EvaluateTerm 				; evaluate the term
.8db3		b5 50		lda $50,x			lda 	NSStatus,x
.8db5		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8db7		f0 5c		beq $8e15			beq		_LNTError
.8db9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8dbb		85 36		sta $36				sta 	zTemp0
.8dbd		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dbf		85 37		sta $37				sta  	zTemp0+1
.8dc1		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8dc3		29 10		and #$10			and 	#NSBIsString
.8dc5		d0 1e		bne $8de5			bne 	_LNTPushString
.8dc7		5a		phy				phy
.8dc8		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dca						_LNTPushNumLoop:
.8dca		b1 36		lda ($36),y			lda		(zTemp0),y
.8dcc		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8dcf		c8		iny				iny
.8dd0		c0 05		cpy #$05			cpy 	#5
.8dd2		d0 f6		bne $8dca			bne 	_LNTPushNumLoop
.8dd4		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dd6		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8dd9		a5 37		lda $37				lda 	zTemp0+1
.8ddb		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8dde		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8de0		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8de3		7a		ply				ply
.8de4		60		rts				rts
.8de5						_LNTPushString:
.8de5		5a		phy				phy
.8de6		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8de8		85 38		sta $38				sta 	zTemp1
.8dea		a0 01		ldy #$01			ldy 	#1
.8dec		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dee		85 39		sta $39				sta 	zTemp1+1
.8df0		a0 00		ldy #$00			ldy 	#0 							; output string
.8df2		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8df4		f0 0a		beq $8e00			beq 	_LNTStringOut
.8df6						_LNTPushStrLoop:
.8df6		b1 38		lda ($38),y			lda 	(zTemp1),y
.8df8		f0 06		beq $8e00			beq 	_LNTStringOut
.8dfa		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8dfd		c8		iny				iny
.8dfe		80 f6		bra $8df6			bra 	_LNTPushStrLoop
.8e00						_LNTStringOut:
.8e00		98		tya				tya									; output length (chars written).
.8e01		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8e04		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e06		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8e09		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e0b		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8e0e		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e10		20 5e b6	jsr $b65e			jsr 	StackPushByte
.8e13		7a		ply				ply
.8e14		60		rts				rts
.8e15						_LNTError:
.8e15		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.8e18						LocalPopValue:
.8e18		20 76 b6	jsr $b676			jsr 	StackPopByte
.8e1b		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e1d		d0 17		bne $8e36			bne 	_LPVString
.8e1f		20 76 b6	jsr $b676			jsr 	StackPopByte 				; address
.8e22		85 37		sta $37				sta 	zTemp0+1
.8e24		20 76 b6	jsr $b676			jsr 	StackPopByte
.8e27		85 36		sta $36				sta 	zTemp0
.8e29		5a		phy				phy
.8e2a		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e2c						_LPVNumberCopy:
.8e2c		20 76 b6	jsr $b676			jsr 	StackPopByte
.8e2f		91 36		sta ($36),y			sta 	(zTemp0),y
.8e31		88		dey				dey
.8e32		10 f8		bpl $8e2c			bpl 	_LPVNumberCopy
.8e34		7a		ply				ply 								; and complete
.8e35		60		rts				rts
.8e36						_LPVString:
.8e36		20 76 b6	jsr $b676			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e39		85 37		sta $37				sta 	zTemp0+1
.8e3b		20 76 b6	jsr $b676			jsr 	StackPopByte
.8e3e		85 36		sta $36				sta 	zTemp0
.8e40		5a		phy				phy
.8e41		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e43		85 38		sta $38				sta 	zTemp1
.8e45		a0 01		ldy #$01			ldy 	#1
.8e47		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e49		85 39		sta $39				sta 	zTemp1+1
.8e4b		20 76 b6	jsr $b676			jsr 	StackPopByte 				; # chars to get => y
.8e4e		a8		tay				tay
.8e4f		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e51		f0 0e		beq $8e61			beq 	_LPVStringCopied
.8e53		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e55		91 38		sta ($38),y			sta 	(zTemp1),y
.8e57						_LPVStringCopy:
.8e57		88		dey				dey
.8e58		30 07		bmi $8e61			bmi 	_LPVStringCopied
.8e5a		20 76 b6	jsr $b676			jsr 	StackPopByte
.8e5d		91 38		sta ($38),y			sta 	(zTemp1),y
.8e5f		80 f6		bra $8e57			bra 	_LPVStringCopy
.8e61						_LPVStringCopied:
.8e61		fa		plx				plx
.8e62		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8e63						MCCommand:
.8e63		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8e65		48		pha				pha
.8e66		64 01		stz $01				stz 	1
.8e68		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8e6b		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8e6d		8d 75 07	sta $0775			sta 	DMAControlByte
.8e70		20 1e 8f	jsr $8f1e			jsr 	MCPosition 					; start position
.8e73		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8e75		20 ef 8e	jsr $8eef			jsr 	MCCopyAddress
.8e78		a2 08		ldx #$08			ldx 	#8
.8e7a		20 ef 8e	jsr $8eef			jsr 	MCCopyAddress
.8e7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e7f		c8		iny				iny
.8e80		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8e82		f0 09		beq $8e8d			beq 	_MCSize1D
.8e84		c9 d2		cmp #$d2			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8e86		f0 11		beq $8e99			beq 	_MCRect2D
.8e88						_MCSyntax:
.8e88		a9 02		lda #$02		lda	#2
.8e8a		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8e8d						_MCSize1D:
.8e8d		a2 00		ldx #$00			ldx 	#0 							; get size
.8e8f		20 0d a5	jsr $a50d			jsr 	EvaluateInteger
.8e92		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8e94		20 ef 8e	jsr $8eef			jsr 	MCCopyAddress
.8e97		80 24		bra $8ebd			bra 	_MCDestination
.8e99						_MCRect2D:
.8e99		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8e9b		20 0c 8f	jsr $8f0c			jsr 	MCEvalCopyData16
.8e9e		20 ea 95	jsr $95ea			jsr 	CheckComma
.8ea1		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8ea3		20 0c 8f	jsr $8f0c			jsr 	MCEvalCopyData16
.8ea6		a9 b6		lda #$b6			lda 	#KWD_BY 					; BY keyword.
.8ea8		20 f2 95	jsr $95f2			jsr 	CheckNextA
.8eab		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8ead		20 0c 8f	jsr $8f0c			jsr 	MCEvalCopyData16
.8eb0		a2 12		ldx #$12			ldx 	#$12
.8eb2		20 13 8f	jsr $8f13			jsr 	MCCopyData16
.8eb5		ad 75 07	lda $0775			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8eb8		09 02		ora #$02			ora 	#$02
.8eba		8d 75 07	sta $0775			sta 	DMAControlByte
.8ebd						_MCDestination:
.8ebd		b1 30		lda ($30),y			lda 	(codePtr),y
.8ebf		c8		iny				iny
.8ec0		c9 cd		cmp #$cd			cmp 	#KWD_POKE 					; is it POKE n
.8ec2		f0 0e		beq $8ed2			beq 	_MCDestPoke
.8ec4		c9 d8		cmp #$d8			cmp 	#KWD_TO 					; is it TO n
.8ec6		d0 c0		bne $8e88			bne 	_MCSyntax
.8ec8		20 1e 8f	jsr $8f1e			jsr 	MCPosition 					; get target address
.8ecb		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8ecd		20 ef 8e	jsr $8eef			jsr 	MCCopyAddress
.8ed0		80 0e		bra $8ee0			bra 	_MCDoDMA 					; and we can go.
.8ed2						_MCDestPoke:
.8ed2		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; POKE what
.8ed5		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8ed8		ad 75 07	lda $0775			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8edb		09 04		ora #$04			ora 	#$04
.8edd		8d 75 07	sta $0775			sta 	DMAControlByte
.8ee0						_MCDoDMA:
.8ee0		ad 75 07	lda $0775			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8ee3		8d 00 df	sta $df00			sta 	$DF00
.8ee6						_MCWaitBUSD:
.8ee6		ad 01 df	lda $df01			lda 	$DF01
.8ee9		30 fb		bmi $8ee6			bmi 	_MCWaitBUSD
.8eeb		68		pla				pla 								; restore I/O.
.8eec		85 01		sta $01				sta 	1
.8eee		60		rts				rts
.8eef						MCCopyAddress:
.8eef		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8ef1		29 fc		and #$fc			and 	#$FC
.8ef3		05 70		ora $70				ora 	NSMantissa3
.8ef5		d0 10		bne $8f07			bne 	_MCRange
.8ef7		a5 58		lda $58				lda 	NSMantissa0
.8ef9		9d 00 df	sta $df00,x			sta 	$DF00,x
.8efc		a5 60		lda $60				lda 	NSMantissa1
.8efe		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f01		a5 68		lda $68				lda 	NSMantissa2
.8f03		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f06		60		rts				rts
.8f07						_MCRange:
.8f07		a9 04		lda #$04		lda	#4
.8f09		4c fb 95	jmp $95fb		jmp	ErrorHandler
.8f0c						MCEvalCopyData16:
.8f0c		da		phx				phx
.8f0d		a2 00		ldx #$00			ldx 	#0
.8f0f		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.8f12		fa		plx				plx
.8f13						MCCopyData16:
.8f13		a5 58		lda $58				lda 	NSMantissa0
.8f15		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f18		a5 60		lda $60				lda 	NSMantissa1
.8f1a		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f1d		60		rts				rts
.8f1e						MCPosition:
.8f1e		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f20		b1 30		lda ($30),y			lda 	(codePtr),y
.8f22		c9 b5		cmp #$b5			cmp 	#KWD_AT
.8f24		f0 04		beq $8f2a			beq 	_MCPAt
.8f26		20 0d a5	jsr $a50d			jsr 	EvaluateInteger
.8f29		60		rts				rts
.8f2a						_MCPAt:
.8f2a		c8		iny				iny
.8f2b		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; X position
.8f2e		48		pha				pha
.8f2f		20 ea 95	jsr $95ea			jsr 	CheckComma
.8f32		e8		inx				inx
.8f33		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; Y position
.8f36		ca		dex				dex
.8f37		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8f39		64 58		stz $58				stz 	NSMantissa0
.8f3b		64 68		stz $68				stz 	NSMantissa2
.8f3d		64 70		stz $70				stz 	NSMantissa3
.8f3f		46 60		lsr $60				lsr 	NSMantissa1
.8f41		66 58		ror $58				ror 	NSMantissa0
.8f43		46 60		lsr $60				lsr 	NSMantissa1
.8f45		66 58		ror $58				ror 	NSMantissa0
.8f47		68		pla				pla
.8f48		18		clc				clc
.8f49		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8f4b		85 58		sta $58				sta 	NSMantissa0
.8f4d		a5 60		lda $60				lda 	NSMantissa1
.8f4f		65 59		adc $59				adc 	NSMantissa0+1
.8f51		85 60		sta $60				sta 	NSMantissa1
.8f53		90 02		bcc $8f57			bcc 	_MCPNoCarry
.8f55		e6 68		inc $68				inc 	NSMantissa2
.8f57						_MCPNoCarry:
.8f57		ad 9e 07	lda $079e			lda 	gxBasePage
.8f5a		85 69		sta $69				sta 	NSMantissa2+1
.8f5c		64 59		stz $59				stz 	NSMantissa0+1
.8f5e		64 61		stz $61				stz 	NSMantissa1+1
.8f60		64 71		stz $71				stz 	NSMantissa3+1
.8f62		a2 01		ldx #$01			ldx 	#1
.8f64		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight
.8f67		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight
.8f6a		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight
.8f6d		a2 00		ldx #$00			ldx 	#0
.8f6f		20 f5 98	jsr $98f5			jsr 	AddTopTwoStack
.8f72		60		rts				rts
.0775						DMAControlByte:
>0775								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f73						NewCommand:
.8f73		20 79 8f	jsr $8f79			jsr 	NewProgram 					; does the actual NEW.
.8f76		4c ad 85	jmp $85ad			jmp 	WarmStart 					; and warm starts straight away.
.8f79						NewProgram:
.8f79		20 0d ad	jsr $ad0d			jsr 	MemoryNew
.8f7c		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8f7f		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear everything.
.8f82		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8f83						PokeBCommand:
.8f83		a9 01		lda #$01			lda 	#1
.8f85		80 0c		bra $8f93			bra 	PokeCommand
.8f87						PokeWCommand:
.8f87		a9 02		lda #$02			lda 	#2
.8f89		80 08		bra $8f93			bra 	PokeCommand
.8f8b						PokeLCommand:
.8f8b		a9 03		lda #$03			lda 	#3
.8f8d		80 04		bra $8f93			bra 	PokeCommand
.8f8f						PokeDCommand:
.8f8f		a9 04		lda #$04			lda 	#4
.8f91		80 00		bra $8f93			bra 	PokeCommand
.8f93						PokeCommand:
.8f93		48		pha				pha 								; save count on stack
.8f94		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8f96		20 20 a5	jsr $a520			jsr		Evaluate16BitInteger 		; address
.8f99		20 ea 95	jsr $95ea			jsr 	CheckComma
.8f9c		e8		inx				inx
.8f9d		20 0d a5	jsr $a50d			jsr		EvaluateInteger 			; data
.8fa0		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8fa2		85 36		sta $36				sta 	zTemp0
.8fa4		a5 60		lda $60				lda 	NSMantissa1
.8fa6		85 37		sta $37				sta 	zTemp0+1
.8fa8		68		pla				pla 								; count -> zTemp1
.8fa9		85 38		sta $38				sta 	zTemp1
.8fab		5a		phy				phy 								; save Y position.
.8fac		a0 00		ldy #$00			ldy 	#0 							; index to write
.8fae		a2 00		ldx #$00			ldx 	#0 							; index to read
.8fb0						_PCLoop:
.8fb0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8fb2		91 36		sta ($36),y			sta 	(zTemp0),y
.8fb4		c8		iny				iny 								; next byte to write
.8fb5		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8fb6		18		clc				clc
.8fb7		69 08		adc #$08			adc 	#MathStackSize
.8fb9		aa		tax				tax
.8fba		c6 38		dec $38				dec 	zTemp1 						; done them all
.8fbc		d0 f2		bne $8fb0			bne 	_PCLoop
.8fbe		7a		ply				ply 								; restore position.
.8fbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8fc0						CallProcedure:
.8fc0		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8fc2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc4		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8fc6		f0 0c		beq $8fd4			beq 	_CPEndParam
.8fc8						_CPParamLoop:
.8fc8		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue 				; get parameter onto stack
.8fcb		e8		inx				inx 								; bump next stack
.8fcc		b1 30		lda ($30),y			lda 	(codePtr),y
.8fce		c8		iny				iny
.8fcf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8fd1		f0 f5		beq $8fc8			beq 	_CPParamLoop
.8fd3		88		dey				dey 								; unpick.
.8fd4						_CPEndParam:
.8fd4		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8fd7		c8		iny				iny									; skip right bracket
.8fd8		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8fda		20 7f b6	jsr $b67f			jsr 	StackOpen
.8fdd		20 c4 b6	jsr $b6c4			jsr 	STKSaveCodePosition 		; save loop position
.8fe0		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8fe2		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8fe4		a5 60		lda $60				lda 	NSMantissa1
.8fe6		85 37		sta $37				sta 	zTemp0+1
.8fe8		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8fea		b2 36		lda ($36)			lda 	(zTemp0)
.8fec		85 30		sta $30				sta 	safePtr
.8fee		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ff0		85 31		sta $31				sta 	safePtr+1
.8ff2		c8		iny				iny
.8ff3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ff5		85 32		sta $32				sta 	safePtr+2
.8ff7		c8		iny				iny
.8ff8		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ffa		85 33		sta $33				sta 	safePtr+3
.8ffc		c8		iny				iny 								; get Y offset -> Y
.8ffd		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fff		a8		tay				tay
.9000		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9002		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.9005		f0 13		beq $901a			beq 	_ParamExit 					; if so, exit.
.9007						_ParamExtract:
.9007		ca		dex				dex 								; put a local term on the level before
.9008		20 b0 8d	jsr $8db0			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.900b		20 b3 8b	jsr $8bb3			jsr 	AssignVariable 				; assign stacked value to the variable.
.900e		e8		inx				inx 								; advance to next parameter to do.
.900f		e8		inx				inx
.9010		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.9013		f0 05		beq $901a			beq 	_ParamExit
.9015		20 ea 95	jsr $95ea			jsr 	CheckComma 					; comma seperating parameters
.9018		80 ed		bra $9007			bra 	_ParamExtract
.901a						_ParamExit:
.901a		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; check )
.901d		60		rts				rts 								; and continue from here
.901e						Command_ENDPROC:
.901e		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9020		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9022		20 ac b6	jsr $b6ac			jsr 	StackCheckFrame
.9025		20 d5 b6	jsr $b6d5			jsr 	STKLoadCodePosition 		; restore code position
.9028		20 9e b6	jsr $b69e			jsr 	StackClose
.902b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.902c						Command_Read:
.902c		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.902e		20 49 9f	jsr $9f49			jsr 	EvaluateTerm
.9031		b5 50		lda $50,x			lda 	NSStatus,x
.9033		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9035		f0 4f		beq $9086			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.9037		20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; swap code and data
.903a		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.903d		d0 25		bne $9064			bne 	_CRContinueData  			; forward for the next one.
.903f		b2 30		lda ($30)			lda 	(codePtr)
.9041		f0 1c		beq $905f			beq 	_CRNoData
.9043						_CRKeepSearching:
.9043		a9 bc		lda #$bc			lda 	#KWD_DATA 					; scan for instruction
.9045		a2 80		ldx #$80			ldx 	#KWC_EOL
.9047		20 e3 94	jsr $94e3			jsr 	ScanForward
.904a		c9 bc		cmp #$bc			cmp 	#KWD_DATA 					; found data ?
.904c		f0 16		beq $9064			beq 	_CRHaveData 				; found it
.904e		18		clc				clc
.904f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9051		65 30		adc $30				adc 	codePtr
.9053		85 30		sta $30				sta 	codePtr
.9055		90 02		bcc $9059			bcc 	_CREExit
.9057		e6 31		inc $31				inc 	codePtr+1 					; carry
.9059						_CREExit:
.9059		a0 03		ldy #$03			ldy 	#3 							; start of line.
.905b		b2 30		lda ($30)			lda 	(codePtr)
.905d		d0 e4		bne $9043			bne 	_CRKeepSearching
.905f						_CRNoData:
.905f		a9 0b		lda #$0b		lda	#11
.9061		4c fb 95	jmp $95fb		jmp	ErrorHandler
.9064						_CRHaveData:
.9064						_CRContinueData:
.9064		a2 01		ldx #$01			ldx 	#1
.9066		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9069		ca		dex				dex
.906a		20 b3 8b	jsr $8bb3			jsr		AssignVariable 				; do the assignment
.906d		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.9070		b1 30		lda ($30),y			lda 	(codePtr),y
.9072		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9074		d0 04		bne $907a			bne 	_CRSwapBack
.9076		c8		iny				iny 								; consume comma
.9077		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.907a						_CRSwapBack:
.907a		20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs			; swap them back.
.907d		b1 30		lda ($30),y			lda 	(codePtr),y
.907f		c8		iny				iny
.9080		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9082		f0 a8		beq $902c			beq 	Command_Read 				; if so go round again.
.9084		88		dey				dey 								; unpick get.
.9085		60		rts				rts
.9086						_CRSyntax:
.9086		4c 1e a7	jmp $a71e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9089						RemCommand:
.9089		b1 30		lda ($30),y			lda 	(codePtr),y
.908b		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.908d		d0 06		bne $9095			bne 	_RMExit
.908f		c8		iny				iny 								; point to offset
.9090		98		tya				tya 								; A = offset position
.9091		38		sec				sec 								; add size +1 hence SEC
.9092		71 30		adc ($30),y			adc 	(codePtr),y
.9094		a8		tay				tay 								; make current position.
.9095						_RMExit:
.9095		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9096						Command_REPEAT:
.9096		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9098		20 7f b6	jsr $b67f			jsr 	StackOpen
.909b		20 c4 b6	jsr $b6c4			jsr 	STKSaveCodePosition 		; save loop position
.909e		60		rts				rts
.909f						Command_UNTIL:
.909f		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90a1		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90a3		20 ac b6	jsr $b6ac			jsr 	StackCheckFrame
.90a6		a2 00		ldx #$00			ldx 	#0
.90a8		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; work out the number
.90ab		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; check if zero
.90ae		f0 04		beq $90b4			beq 	_CULoopBack 				; if so keep looping
.90b0		20 9e b6	jsr $b69e			jsr 	StackClose		 			; return
.90b3		60		rts				rts
.90b4						_CULoopBack:
.90b4		20 d5 b6	jsr $b6d5			jsr 	STKLoadCodePosition 		; loop back
.90b7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.90b8						Command_Restore:
.90b8		20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; swap code and data
.90bb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90bd		85 30		sta $30				sta 	codePtr
.90bf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90c1		85 31		sta $31				sta 	codePtr+1
.90c3		20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; put them back
.90c6		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.90c8		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.90cb		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.90ce		60		rts				rts
.90cf						SwapDataCodePtrs:
.90cf		da		phx				phx
.90d0		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.90d2						_SDCPLoop:
.90d2		b5 30		lda $30,x			lda 	safePtr,x
.90d4		48		pha				pha
.90d5		bd 17 04	lda $0417,x			lda 	dataPointer,x
.90d8		95 30		sta $30,x			sta 	safePtr,x
.90da		68		pla				pla
.90db		9d 17 04	sta $0417,x			sta 	dataPointer,x
.90de		ca		dex				dex
.90df		10 f1		bpl $90d2			bpl 	_SDCPLoop
.90e1		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.90e4		8c 1b 04	sty $041b			sty 	dataPointer+4
.90e7		a8		tay				tay
.90e8		fa		plx				plx
.90e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.90ea						EOLCommand:
.90ea		18		clc				clc
.90eb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90ed		65 30		adc $30				adc 	codePtr
.90ef		85 30		sta $30				sta 	codePtr
.90f1		90 02		bcc $90f5			bcc 	_CREExit
.90f3		e6 31		inc $31				inc 	codePtr+1 					; carry
.90f5						_CREExit:
.90f5		80 0b		bra $9102			bra 	RunNewLine
.90f7						CommandRUN:
.90f7		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variable/stacks/etc.
.90fa		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90fc		85 30		sta $30				sta 	codePtr
.90fe		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9100		85 31		sta $31				sta 	codePtr+1
.9102						RunNewLine:
.9102		b2 30		lda ($30)			lda 	(codePtr)
.9104		f0 74		beq $917a			beq 	CRNoProgram         		; no then END.
.9106		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9108		9a		txs				txs
.9109						RUNCodePointerLine:
.9109		a0 02		ldy #$02			ldy 	#2 							; start of program
.910b						_CRIncMainLoop:
.910b		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.910d		f0 03		beq $9112			beq 	_NoEvents					; if zero, skip with Z flag set.
.910f		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.9112						_NoEvents:
.9112		d0 61		bne $9175			bne 	_CRBreak
.9114		a5 01		lda $01				lda 	1 							; save I/O 0
.9116		48		pha				pha
.9117		64 01		stz $01				stz 	1 							; access I/O Page 0
.9119		38		sec				sec 								; calculate timer - LastTick
.911a		ad 59 d6	lda $d659			lda 	$D659
.911d		cd 76 07	cmp $0776			cmp 	LastTick
.9120		f0 06		beq $9128			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9122		8d 76 07	sta $0776			sta 	LastTick 					; update last timer
.9125		20 cb a5	jsr $a5cb			jsr 	TickHandler 							; go do the code.
.9128						_NoFireTick:
.9128		68		pla				pla 								; restore I/O 0
.9129		85 01		sta $01				sta 	1
.912b						_CRNoBreakCheck:
.912b		c8		iny				iny									; next token
.912c						_CRMainLoop:
.912c		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.912f		b1 30		lda ($30),y			lda 	(codePtr),y
.9131		10 10		bpl $9143			bpl 	_CRNotKeyword				; not a token.
.9133		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9135		b0 04		bcs $913b			bcs 	_CRIsKeyword
.9137		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9139		b0 34		bcs $916f			bcs		_CRSyntaxError
.913b						_CRIsKeyword:
.913b		c8		iny				iny 								; consume command
.913c		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.913d		aa		tax				tax 								; put in X for vector jump
.913e		20 72 91	jsr $9172			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9141		80 e9		bra $912c			bra 	_CRMainLoop 				; and loop round
.9143						_CRNotKeyword:
.9143		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9145		f0 c4		beq $910b			beq 	_CRIncMainLoop
.9147		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9149		90 05		bcc $9150			bcc 	_CRNotVariable
.914b						_CRGoLet:
.914b		20 7a 8b	jsr $8b7a			jsr 	LetCommand
.914e		80 dc		bra $912c			bra 	_CRMainLoop
.9150						_CRNotVariable:
.9150		c9 b5		cmp #$b5			cmp 	#KWD_AT 					; handle @
.9152		f0 f7		beq $914b			beq 	_CRGoLet
.9154		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9156		f0 f3		beq $914b			beq 	_CRGoLet
.9158		c9 21		cmp #$21			cmp 	#KWD_PLING
.915a		f0 ef		beq $914b			beq 	_CRGoLet
.915c		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.915e		f0 09		beq $9169			beq 	_CRGoRem
.9160		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9162		d0 0b		bne $916f			bne 	_CRSyntaxError
.9164		20 1f 84	jsr $841f			jsr 	LabelHere
.9167		80 c3		bra $912c			bra 	_CRMainLoop
.9169						_CRGoRem:
.9169		c8		iny				iny
.916a		20 89 90	jsr $9089			jsr 	RemCommand
.916d		80 bd		bra $912c			bra 	_CRMainLoop
.916f						_CRSyntaxError:
.916f		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.9172						_CRCallVector0:
.9172		7c 10 92	jmp ($9210,x)			jmp 	(VectorSet0,x)
.9175						_CRBreak:
.9175		a9 01		lda #$01		lda	#1
.9177		4c fb 95	jmp $95fb		jmp	ErrorHandler
.917a						CRNoProgram:
.917a		4c 10 89	jmp $8910			jmp 	EndCommand
.917d						Shift1Command:
.917d		b1 30		lda ($30),y			lda 	(codePtr),y
.917f		c8		iny				iny
.9180		0a		asl a				asl 	a
.9181		aa		tax				tax
.9182		7c c2 92	jmp ($92c2,x)			jmp 	(VectorSet1,x)
.9185						Shift2Command:
.9185		b1 30		lda ($30),y			lda 	(codePtr),y
.9187		c8		iny				iny
.9188		0a		asl a				asl 	a
.9189		aa		tax				tax
.918a		7c 0c 93	jmp ($930c,x)			jmp 	(VectorSet2,x)
.918d						Unused1:
.918d						Unused2:
.918d						Unused3:
.918d						Unused4:
.918d		4c 1e a7	jmp $a71e			jmp 	SyntaxError
>9190								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9190						VectorSetPunc:
>9190		b3 98					.word	ShiftLeft                        ; $00 <<
>9192		9e 96					.word	BinaryCompareLessEqual           ; $01 <=
>9194		94 96					.word	BinaryCompareNotEqual            ; $02 <>
>9196		1e a7					.word	SyntaxError                      ; $03 !!3
>9198		1e a7					.word	SyntaxError                      ; $04 ><
>919a		a8 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>919c		b6 98					.word	ShiftRight                       ; $06 >>
>919e		1e a7					.word	SyntaxError                      ; $07 !!7
>91a0		1e a7					.word	SyntaxError                      ; $08 !!8
>91a2		1e a7					.word	SyntaxError                      ; $09 !!9
>91a4		1e a7					.word	SyntaxError                      ; $0a !!10
>91a6		1e a7					.word	SyntaxError                      ; $0b !!11
>91a8		1e a7					.word	SyntaxError                      ; $0c !!12
>91aa		1e a7					.word	SyntaxError                      ; $0d !!13
>91ac		1e a7					.word	SyntaxError                      ; $0e !!14
>91ae		1e a7					.word	SyntaxError                      ; $0f !!15
>91b0		1e a7					.word	SyntaxError                      ; $10 @
>91b2		1e a7					.word	SyntaxError                      ; $11 !!17
>91b4		1e a7					.word	SyntaxError                      ; $12 !!18
>91b6		1e a7					.word	SyntaxError                      ; $13 [
>91b8		5f 97					.word	IntegerDivide                    ; $14 \
>91ba		1e a7					.word	SyntaxError                      ; $15 ]
>91bc		f1 99					.word	EorInteger                       ; $16 ^
>91be		1e a7					.word	SyntaxError                      ; $17 _
>91c0		1e a7					.word	SyntaxError                      ; $18 `
>91c2		1e a7					.word	SyntaxError                      ; $19 !!25
>91c4		1e a7					.word	SyntaxError                      ; $1a !!26
>91c6		1e a7					.word	SyntaxError                      ; $1b {
>91c8		bc 99					.word	OraInteger                       ; $1c |
>91ca		1e a7					.word	SyntaxError                      ; $1d }
>91cc		1e a7					.word	SyntaxError                      ; $1e ~
>91ce		1e a7					.word	SyntaxError                      ; $1f <7F>
>91d0		1e a7					.word	SyntaxError                      ; $20
>91d2		26 9a					.word	WordIndirect                     ; $21 !
>91d4		1e a7					.word	SyntaxError                      ; $22 "
>91d6		1e a7					.word	SyntaxError                      ; $23 #
>91d8		1e a7					.word	SyntaxError                      ; $24 $
>91da		a0 97					.word	IntegerModulus                   ; $25 %
>91dc		87 99					.word	AndInteger                       ; $26 &
>91de		1e a7					.word	SyntaxError                      ; $27 '
>91e0		1e a7					.word	SyntaxError                      ; $28 (
>91e2		1e a7					.word	SyntaxError                      ; $29 )
>91e4		0e 98					.word	MulInteger                       ; $2a *
>91e6		29 99					.word	AddInteger                       ; $2b +
>91e8		1e a7					.word	SyntaxError                      ; $2c ,
>91ea		62 99					.word	SubInteger                       ; $2d -
>91ec		1e a7					.word	SyntaxError                      ; $2e .
>91ee		e0 9b					.word	FDivideCommand                   ; $2f /
>91f0		1e a7					.word	SyntaxError                      ; $30 0
>91f2		1e a7					.word	SyntaxError                      ; $31 1
>91f4		1e a7					.word	SyntaxError                      ; $32 2
>91f6		1e a7					.word	SyntaxError                      ; $33 3
>91f8		1e a7					.word	SyntaxError                      ; $34 4
>91fa		1e a7					.word	SyntaxError                      ; $35 5
>91fc		1e a7					.word	SyntaxError                      ; $36 6
>91fe		1e a7					.word	SyntaxError                      ; $37 7
>9200		1e a7					.word	SyntaxError                      ; $38 8
>9202		1e a7					.word	SyntaxError                      ; $39 9
>9204		1e a7					.word	SyntaxError                      ; $3a :
>9206		1e a7					.word	SyntaxError                      ; $3b ;
>9208		80 96					.word	BinaryCompareLess                ; $3c <
>920a		76 96					.word	BinaryCompareEqual               ; $3d =
>920c		8a 96					.word	BinaryCompareGreater             ; $3e >
>920e		48 9a					.word	ByteIndirect                     ; $3f ?
.9210						VectorSet0:
>9210		ea 90					.word	EOLCommand                       ; $80 !0:EOF
>9212		7d 91					.word	Shift1Command                    ; $81 !1:SH1
>9214		85 91					.word	Shift2Command                    ; $82 !2:SH2
>9216		ca a0					.word	AbsUnary                         ; $83 ABS(
>9218		d8 a0					.word	AllocUnary                       ; $84 ALLOC(
>921a		48 a1					.word	AscUnary                         ; $85 ASC(
>921c		2c a3					.word	ChrUnary                         ; $86 CHR$(
>921e		a1 ab					.word	UnaryEvent                       ; $87 EVENT(
>9220		72 96					.word	UnaryFalse                       ; $88 FALSE
>9222		55 a1					.word	FracUnary                        ; $89 FRAC(
>9224		5f 82					.word	ChrGet                           ; $8a GET$(
>9226		3b 82					.word	AscGet                           ; $8b GET(
>9228		42 a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>922a		3e a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>922c		2b ab					.word	UnaryHit                         ; $8e HIT(
>922e		66 82					.word	ChrInkey                         ; $8f INKEY$(
>9230		54 82					.word	AscInkey                         ; $90 INKEY(
>9232		6a a1					.word	IntUnary                         ; $91 INT(
>9234		eb a2					.word	IsValUnary                       ; $92 ISVAL(
>9236		25 ac					.word	UnaryJoyB                        ; $93 JOYB(
>9238		fe ab					.word	UnaryJoyX                        ; $94 JOYX(
>923a		01 ac					.word	UnaryJoyY                        ; $95 JOYY(
>923c		59 a4					.word	Unary_Left                       ; $96 LEFT$(
>923e		7b a1					.word	LenUnary                         ; $97 LEN(
>9240		99 a1					.word	Unary_Max                        ; $98 MAX(
>9242		7b a4					.word	Unary_Mid                        ; $99 MID$(
>9244		95 a1					.word	Unary_Min                        ; $9a MIN(
>9246		e4 a1					.word	Unary_Not                        ; $9b NOT(
>9248		f7 a1					.word	PeekByteUnary                    ; $9c PEEK(
>924a		03 a2					.word	PeekDUnary                       ; $9d PEEKD(
>924c		ff a1					.word	PeekLUnary                       ; $9e PEEKL(
>924e		fb a1					.word	PeekWUnary                       ; $9f PEEKW(
>9250		dc b5					.word	UnaryPlaying                     ; $a0 PLAYING(
>9252		30 a2					.word	Unary_Random                     ; $a1 RANDOM(
>9254		66 a4					.word	Unary_Right                      ; $a2 RIGHT$(
>9256		4d a2					.word	Unary_Rnd                        ; $a3 RND(
>9258		c3 a2					.word	SgnUnary                         ; $a4 SGN(
>925a		98 a3					.word	SpcUnary                         ; $a5 SPC(
>925c		b3 a3					.word	Unary_Str                        ; $a6 STR$(
>925e		37 ac					.word	UnaryTimer                       ; $a7 TIMER(
>9260		67 96					.word	UnaryTrue                        ; $a8 TRUE
>9262		e1 a2					.word	ValUnary                         ; $a9 VAL(
>9264		13 89					.word	ForCommand                       ; $aa FOR
>9266		56 8a					.word	IfCommand                        ; $ab IF
>9268		8d 91					.word	Unused1                          ; $ac PROC
>926a		96 90					.word	Command_REPEAT                   ; $ad REPEAT
>926c		b3 95					.word	Command_WHILE                    ; $ae WHILE
>926e		7f 8a					.word	EndIf                            ; $af ENDIF
>9270		1e 90					.word	Command_ENDPROC                  ; $b0 ENDPROC
>9272		c5 89					.word	NextCommand                      ; $b1 NEXT
>9274		8d 91					.word	Unused4                          ; $b2 THEN
>9276		9f 90					.word	Command_UNTIL                    ; $b3 UNTIL
>9278		d4 95					.word	Command_WEND                     ; $b4 WEND
>927a		1e a7					.word	SyntaxError                      ; $b5 AT
>927c		1e a7					.word	SyntaxError                      ; $b6 BY
>927e		30 87					.word	CallCommand                      ; $b7 CALL
>9280		df a8					.word	CircleCommand                    ; $b8 CIRCLE
>9282		65 87					.word	ClearCommand                     ; $b9 CLEAR
>9284		1e a7					.word	SyntaxError                      ; $ba COLOR
>9286		1e a7					.word	SyntaxError                      ; $bb COLOUR
>9288		c8 87					.word	Command_Data                     ; $bc DATA
>928a		d0 87					.word	DimCommand                       ; $bd DIM
>928c		8d 91					.word	Unused3                          ; $be DOWNTO
>928e		78 8a					.word	ElseCode                         ; $bf ELSE
>9290		1e a7					.word	SyntaxError                      ; $c0 FROM
>9292		fe aa					.word	GfxCommand                       ; $c1 GFX
>9294		1e a7					.word	SyntaxError                      ; $c2 HERE
>9296		08 a9					.word	ImageCommand                     ; $c3 IMAGE
>9298		7a 8b					.word	LetCommand                       ; $c4 LET
>929a		5a a9					.word	LineCommand                      ; $c5 LINE
>929c		a2 8d					.word	Command_LOCAL                    ; $c6 LOCAL
>929e		63 8e					.word	MCCommand                        ; $c7 MEMCOPY
>92a0		1e a7					.word	SyntaxError                      ; $c8 OFF
>92a2		1e a7					.word	SyntaxError                      ; $c9 ON
>92a4		1e a7					.word	SyntaxError                      ; $ca OUTLINE
>92a6		4f ab					.word	PaletteCommand                   ; $cb PALETTE
>92a8		53 a9					.word	PlotCommand                      ; $cc PLOT
>92aa		83 8f					.word	PokeBCommand                     ; $cd POKE
>92ac		8f 8f					.word	PokeDCommand                     ; $ce POKED
>92ae		8b 8f					.word	PokeLCommand                     ; $cf POKEL
>92b0		87 8f					.word	PokeWCommand                     ; $d0 POKEW
>92b2		2c 90					.word	Command_Read                     ; $d1 READ
>92b4		db a8					.word	RectangleCommand                 ; $d2 RECT
>92b6		89 90					.word	RemCommand                       ; $d3 REM
>92b8		1e a7					.word	SyntaxError                      ; $d4 SOLID
>92ba		f8 b5					.word	SoundCommand                     ; $d5 SOUND
>92bc		ea a8					.word	SpriteCommand                    ; $d6 SPRITE
>92be		24 a9					.word	TextCommand                      ; $d7 TEXT
>92c0		8d 91					.word	Unused2                          ; $d8 TO
.92c2						VectorSet1:
>92c2		1e a7					.word	SyntaxError                      ; $80 !0:EOF
>92c4		1e a7					.word	SyntaxError                      ; $81 !1:SH1
>92c6		1e a7					.word	SyntaxError                      ; $82 !2:SH2
>92c8		e2 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>92ca		fe 85					.word	AssertCommand                    ; $84 ASSERT
>92cc		9e aa					.word	BitmapCtrl                       ; $85 BITMAP
>92ce		0e 86					.word	Command_BLoad                    ; $86 BLOAD
>92d0		ae 86					.word	Command_BSave                    ; $87 BSAVE
>92d2		c0 87					.word	ClearScreen                      ; $88 CLS
>92d4		85 8a					.word	Command_CPrint                   ; $89 CPRINT
>92d6		8d 88					.word	Command_Dir                      ; $8a DIR
>92d8		09 89					.word	Command_Drive                    ; $8b DRIVE
>92da		10 89					.word	EndCommand                       ; $8c END
>92dc		b0 b5					.word	Explode                          ; $8d EXPLODE
>92de		1e a7					.word	SyntaxError                      ; $8e GO
>92e0		1e 8a					.word	Command_GOSUB                    ; $8f GOSUB
>92e2		3c 8a					.word	GotoCommand                      ; $90 GOTO
>92e4		1e a7					.word	SyntaxError                      ; $91 HIMEM
>92e6		80 8a					.word	Command_Input                    ; $92 INPUT
>92e8		ca 8b					.word	Command_List                     ; $93 LIST
>92ea		d4 8c					.word	Command_Load                     ; $94 LOAD
>92ec		73 8f					.word	NewCommand                       ; $95 NEW
>92ee		8c b5					.word	PingCommand                      ; $96 PING
>92f0		8c 8a					.word	Command_Print                    ; $97 PRINT
>92f2		b8 90					.word	Command_Restore                  ; $98 RESTORE
>92f4		2e 8a					.word	Command_RETURN                   ; $99 RETURN
>92f6		f7 90					.word	CommandRUN                       ; $9a RUN
>92f8		94 93					.word	Command_Save                     ; $9b SAVE
>92fa		18 94					.word	CommandSetDate                   ; $9c SETDATE
>92fc		1c 94					.word	CommandSetTime                   ; $9d SETTIME
>92fe		a4 b5					.word	ShootCommand                     ; $9e SHOOT
>9300		e3 aa					.word	SpritesCtrl                      ; $9f SPRITES
>9302		8c 94					.word	StopCommand                      ; $a0 STOP
>9304		59 95					.word	Command_VERIFY                   ; $a1 VERIFY
>9306		98 ab					.word	XGoCommand                       ; $a2 XGO
>9308		8f ab					.word	XLoadCommand                     ; $a3 XLOAD
>930a		98 b5					.word	ZapCommand                       ; $a4 ZAP
.930c						VectorSet2:
>930c		1e a7					.word	SyntaxError                      ; $80 !0:EOF
>930e		1e a7					.word	SyntaxError                      ; $81 !1:SH1
>9310		1e a7					.word	SyntaxError                      ; $82 !2:SH2
>9312		dd a5					.word	Assemble_adc                     ; $83 ADC
>9314		d5 a5					.word	Assemble_and                     ; $84 AND
>9316		f1 a5					.word	Assemble_asl                     ; $85 ASL
>9318		5b a6					.word	Assemble_bcc                     ; $86 BCC
>931a		5f a6					.word	Assemble_bcs                     ; $87 BCS
>931c		67 a6					.word	Assemble_beq                     ; $88 BEQ
>931e		1e a6					.word	Assemble_bit                     ; $89 BIT
>9320		4f a6					.word	Assemble_bmi                     ; $8a BMI
>9322		63 a6					.word	Assemble_bne                     ; $8b BNE
>9324		4b a6					.word	Assemble_bpl                     ; $8c BPL
>9326		6b a6					.word	Assemble_bra                     ; $8d BRA
>9328		6f a6					.word	Assemble_brk                     ; $8e BRK
>932a		53 a6					.word	Assemble_bvc                     ; $8f BVC
>932c		57 a6					.word	Assemble_bvs                     ; $90 BVS
>932e		77 a6					.word	Assemble_clc                     ; $91 CLC
>9330		cb a6					.word	Assemble_cld                     ; $92 CLD
>9332		8b a6					.word	Assemble_cli                     ; $93 CLI
>9334		bb a6					.word	Assemble_clv                     ; $94 CLV
>9336		e9 a5					.word	Assemble_cmp                     ; $95 CMP
>9338		32 a6					.word	Assemble_cpx                     ; $96 CPX
>933a		2d a6					.word	Assemble_cpy                     ; $97 CPY
>933c		0f a6					.word	Assemble_dec                     ; $98 DEC
>933e		c7 a6					.word	Assemble_dex                     ; $99 DEX
>9340		a3 a6					.word	Assemble_dey                     ; $9a DEY
>9342		d9 a5					.word	Assemble_eor                     ; $9b EOR
>9344		14 a6					.word	Assemble_inc                     ; $9c INC
>9346		d7 a6					.word	Assemble_inx                     ; $9d INX
>9348		c3 a6					.word	Assemble_iny                     ; $9e INY
>934a		46 a6					.word	Assemble_jmp                     ; $9f JMP
>934c		41 a6					.word	Assemble_jsr                     ; $a0 JSR
>934e		e5 a5					.word	Assemble_lda                     ; $a1 LDA
>9350		0a a6					.word	Assemble_ldx                     ; $a2 LDX
>9352		28 a6					.word	Assemble_ldy                     ; $a3 LDY
>9354		fb a5					.word	Assemble_lsr                     ; $a4 LSR
>9356		db a6					.word	Assemble_nop                     ; $a5 NOP
>9358		d1 a5					.word	Assemble_ora                     ; $a6 ORA
>935a		87 a6					.word	Assemble_pha                     ; $a7 PHA
>935c		73 a6					.word	Assemble_php                     ; $a8 PHP
>935e		cf a6					.word	Assemble_phx                     ; $a9 PHX
>9360		8f a6					.word	Assemble_phy                     ; $aa PHY
>9362		97 a6					.word	Assemble_pla                     ; $ab PLA
>9364		7b a6					.word	Assemble_plp                     ; $ac PLP
>9366		e3 a6					.word	Assemble_plx                     ; $ad PLX
>9368		9f a6					.word	Assemble_ply                     ; $ae PLY
>936a		f6 a5					.word	Assemble_rol                     ; $af ROL
>936c		00 a6					.word	Assemble_ror                     ; $b0 ROR
>936e		83 a6					.word	Assemble_rti                     ; $b1 RTI
>9370		93 a6					.word	Assemble_rts                     ; $b2 RTS
>9372		ed a5					.word	Assemble_sbc                     ; $b3 SBC
>9374		7f a6					.word	Assemble_sec                     ; $b4 SEC
>9376		df a6					.word	Assemble_sed                     ; $b5 SED
>9378		9b a6					.word	Assemble_sei                     ; $b6 SEI
>937a		e1 a5					.word	Assemble_sta                     ; $b7 STA
>937c		d3 a6					.word	Assemble_stp                     ; $b8 STP
>937e		05 a6					.word	Assemble_stx                     ; $b9 STX
>9380		23 a6					.word	Assemble_sty                     ; $ba STY
>9382		19 a6					.word	Assemble_stz                     ; $bb STZ
>9384		b7 a6					.word	Assemble_tax                     ; $bc TAX
>9386		b3 a6					.word	Assemble_tay                     ; $bd TAY
>9388		3c a6					.word	Assemble_trb                     ; $be TRB
>938a		37 a6					.word	Assemble_tsb                     ; $bf TSB
>938c		bf a6					.word	Assemble_tsx                     ; $c0 TSX
>938e		a7 a6					.word	Assemble_txa                     ; $c1 TXA
>9390		af a6					.word	Assemble_txs                     ; $c2 TXS
>9392		ab a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.9394						Command_Save:
.9394		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; file name to load
.9397		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9399		a5 36		lda $36				lda 	zTemp0
.939b		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for writing
.939e		b0 2f		bcs $93cf			bcs 	CSErrorHandler 				; error, so fail.
.93a0		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.93a3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93a5		85 30		sta $30				sta 	codePtr
.93a7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93a9		85 31		sta $31				sta 	codePtr+1
.93ab						_CSLoop:
.93ab		b2 30		lda ($30)			lda 	(codePtr)
.93ad		f0 17		beq $93c6			beq 	_CSExit
.93af		20 f3 93	jsr $93f3			jsr 	CSGetCleanLine
.93b2		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.93b4		85 36		sta $36				sta 	zTemp0
.93b6		20 d2 93	jsr $93d2			jsr 	CLWriteByteBlock 			; write the block out.
.93b9		18		clc				clc
.93ba		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93bc		65 30		adc $30				adc 	codePtr
.93be		85 30		sta $30				sta 	codePtr
.93c0		90 02		bcc $93c4			bcc 	_CREExit
.93c2		e6 31		inc $31				inc 	codePtr+1 					; carry
.93c4						_CREExit:
.93c4		80 e5		bra $93ab			bra 	_CSLoop
.93c6						_CSExit:
.93c6		ad 71 07	lda $0771			lda 	BasicFileStream 			; close file
.93c9		20 13 82	jsr $8213			jsr 	KNLCloseFile
.93cc		4c 07 8d	jmp $8d07			jmp 	CLComplete 					; display complete message.
.93cf						CSErrorHandler:
.93cf		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler
.93d2						CLWriteByteBlock:
.93d2		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.93d4		f0 1c		beq $93f2			beq 	_CLWBBExit					; if so, exit
.93d6		ad 71 07	lda $0771			lda 	BasicFileStream 			; stream to write, count in X
.93d9		20 d9 81	jsr $81d9			jsr 	KNLWriteBlock 				; call one write attempt
.93dc		b0 f1		bcs $93cf			bcs 	CSErrorHandler 				; error occurred
.93de		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.93e0		8a		txa				txa 								; subtract bytes written from X, total count.
.93e1		38		sec				sec
.93e2		e5 38		sbc $38				sbc 	zTemp1
.93e4		aa		tax				tax
.93e5		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.93e6		a5 36		lda $36				lda 	zTemp0
.93e8		65 38		adc $38				adc 	zTemp1
.93ea		85 36		sta $36				sta 	zTemp0
.93ec		90 e4		bcc $93d2			bcc 	CLWriteByteBlock
.93ee		e6 37		inc $37				inc 	zTemp0+1
.93f0		80 e0		bra $93d2			bra 	CLWriteByteBlock 			; and retry write out.
.93f2						_CLWBBExit:
.93f2		60		rts				rts
.93f3						CSGetCleanLine:
.93f3		a9 00		lda #$00			lda 	#0 							; no indent.
.93f5		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.93f8		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.93fa		a0 00		ldy #$00			ldy 	#0
.93fc						_CSClean:
.93fc		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.93ff		f0 09		beq $940a			beq 	_CSDoneClean
.9401		30 04		bmi $9407			bmi 	_CSIgnoreCharacter
.9403		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9406		e8		inx				inx
.9407						_CSIgnoreCharacter:
.9407		c8		iny				iny
.9408		80 f2		bra $93fc			bra 	_CSClean
.940a						_CSDoneClean:
.940a		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.940c		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.940f		e8		inx				inx
.9410		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.9413		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9415		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9417		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.9418						CommandSetDate:
.9418		a9 03		lda #$03			lda 	#3
.941a		80 02		bra $941e			bra 	CSDTMain
.941c						CommandSetTime:
.941c		a9 00		lda #$00			lda 	#0
.941e						CSDTMain:
.941e		48		pha				pha 								; save table offsets 0 or 3
.941f		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9421		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.9424		20 ea 95	jsr $95ea			jsr 	CheckComma
.9427		e8		inx				inx
.9428		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.942b		20 ea 95	jsr $95ea			jsr 	CheckComma
.942e		e8		inx				inx
.942f		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.9432		68		pla				pla 								; table offset in Y, saving Y
.9433		5a		phy				phy
.9434		a8		tay				tay
.9435		a2 00		ldx #$00			ldx 	#0 							; first number
.9437		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9439		48		pha				pha
.943a		64 01		stz $01				stz 	1
.943c						_CSDTCopy:
.943c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.943e		d9 80 94	cmp $9480,y			cmp 	RTCWMinValues,y 			; check range
.9441		90 1b		bcc $945e			bcc 	_CSDTRange
.9443		d9 86 94	cmp $9486,y			cmp 	RTCWMaxValues,y
.9446		b0 16		bcs $945e			bcs 	_CSDTRange
.9448		20 63 94	jsr $9463			jsr 	CSDTDecimalToBCD
.944b		da		phx				phx 								; save X
.944c		be 7a 94	ldx $947a,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.944f		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9452		fa		plx				plx 								; restore X
.9453		e8		inx				inx 								; next number
.9454		c8		iny				iny 								; next table entries
.9455		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9457		d0 e3		bne $943c			bne 	_CSDTCopy
.9459		68		pla				pla 								; restore I/O space
.945a		85 01		sta $01				sta 	1
.945c		7a		ply				ply 								; restore code pos and exit.
.945d		60		rts				rts
.945e						_CSDTRange:
.945e		a9 04		lda #$04		lda	#4
.9460		4c fb 95	jmp $95fb		jmp	ErrorHandler
.9463						CSDTDecimalToBCD:
.9463		da		phx				phx 								; 10 count in X
.9464		a2 00		ldx #$00			ldx 	#0
.9466						_CSDTDBLoop:
.9466		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9468		90 05		bcc $946f			bcc 	_CSDTDBExit
.946a		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.946c		e8		inx				inx 								; one more 10s.
.946d		80 f7		bra $9466			bra 	_CSDTDBLoop
.946f						_CSDTDBExit:
.946f		85 36		sta $36				sta 	zTemp0 						; units
.9471		8a		txa				txa 								; 10s x 16
.9472		0a		asl a				asl 	a
.9473		0a		asl a				asl 	a
.9474		0a		asl a				asl 	a
.9475		0a		asl a				asl 	a
.9476		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9478		fa		plx				plx
.9479		60		rts				rts
.947a						RTCWOffset:
>947a		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9480						RTCWMinValues:
>9480		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9486						RTCWMaxValues:
>9486		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.948c						StopCommand:
.948c		a9 08		lda #$08		lda	#8
.948e		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9491						ProcedureScan:
.9491		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9493		85 30		sta $30				sta 	codePtr
.9495		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9497		85 31		sta $31				sta 	codePtr+1
.9499						_PSLoop:
.9499		b2 30		lda ($30)			lda 	(codePtr)
.949b		f0 42		beq $94df			beq 	_PSExit
.949d		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.949f		b1 30		lda ($30),y			lda 	(codePtr),y
.94a1		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.94a3		d0 2d		bne $94d2			bne 	_PSNext
.94a5		c8		iny				iny 								; get the address of the record to zTemp0 and
.94a6		b1 30		lda ($30),y			lda 	(codePtr),y
.94a8		29 c0		and #$c0			and 	#$C0
.94aa		c9 40		cmp #$40			cmp 	#$40
.94ac		d0 32		bne $94e0			bne 	_PSSyntax
.94ae		b1 30		lda ($30),y			lda 	(codePtr),y
.94b0		18		clc				clc
.94b1		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94b3		85 37		sta $37				sta 	zTemp0+1
.94b5		c8		iny				iny 								; LSB
.94b6		b1 30		lda ($30),y			lda 	(codePtr),y
.94b8		85 36		sta $36				sta 	zTemp0
.94ba		c8		iny				iny 								; character after variable call.
.94bb		98		tya				tya 								; save Y offset at +7 (exponent slot)
.94bc		a0 07		ldy #$07			ldy 	#7
.94be		91 36		sta ($36),y			sta 	(zTemp0),y
.94c0		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.94c2		a0 02		ldy #$02			ldy 	#2
.94c4		91 36		sta ($36),y			sta 	(zTemp0),y
.94c6		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.94c8						_PSCopy:
.94c8		b5 30		lda $30,x			lda 	safePtr,x
.94ca		c8		iny				iny
.94cb		91 36		sta ($36),y			sta 	(zTemp0),y
.94cd		e8		inx				inx
.94ce		e0 04		cpx #$04			cpx 	#4
.94d0		d0 f6		bne $94c8			bne 	_PSCopy
.94d2						_PSNext:
.94d2		18		clc				clc
.94d3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.94d5		65 30		adc $30				adc 	codePtr
.94d7		85 30		sta $30				sta 	codePtr
.94d9		90 02		bcc $94dd			bcc 	_CREExit
.94db		e6 31		inc $31				inc 	codePtr+1 					; carry
.94dd						_CREExit:
.94dd		80 ba		bra $9499			bra 	_PSLoop
.94df						_PSExit:
.94df		60		rts				rts
.94e0						_PSSyntax:
.94e0		4c 1e a7	jmp $a71e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.94e3						ScanForward:
.94e3		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.94e5		86 37		stx $37				stx 	zTemp0+1
.94e7		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.94e9						_ScanLoop:
.94e9		b1 30		lda ($30),y			lda 	(codePtr),y
.94eb		c8		iny				iny
.94ec		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.94ee		d0 0e		bne $94fe			bne 	_ScanGoNext
.94f0		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.94f2		f0 04		beq $94f8			beq 	_ScanMatch
.94f4		c5 37		cmp $37				cmp 	zTemp0+1
.94f6		d0 06		bne $94fe			bne 	_ScanGoNext
.94f8						_ScanMatch:
.94f8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.94fa		d0 01		bne $94fd			bne 	_ScanNotEndEOL
.94fc		88		dey				dey
.94fd						_ScanNotEndEOL:
.94fd		60		rts				rts
.94fe						_ScanGoNext:
.94fe		20 03 95	jsr $9503			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9501		80 e6		bra $94e9			bra 	_ScanLoop
.9503						ScanForwardOne:
.9503		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9505		90 3e		bcc $9545			bcc 	_SFWExit
.9507		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9509		90 18		bcc $9523			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.950b		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.950d		b0 2f		bcs $953e			bcs 	_ScanSkipData
.950f		c9 aa		cmp #$aa			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9511		90 32		bcc $9545			bcc 	_SFWExit 					; if not, ordinary keywords.
.9513		c9 b5		cmp #$b5			cmp 	#KWC_LAST_STRUCTURE+1
.9515		b0 2e		bcs $9545			bcs 	_SFWExit
.9517		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9519		c9 af		cmp #$af			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.951b		b0 28		bcs $9545			bcs 	_SFWExit
.951d		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.951f		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9521		80 22		bra $9545			bra 	_SFWExit
.9523						_ScanSkipOne:
.9523		c8		iny				iny 								; consume the extra one.
.9524		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9526		d0 1d		bne $9545			bne 	_SFWExit
.9528		18		clc				clc
.9529		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.952b		65 30		adc $30				adc 	codePtr
.952d		85 30		sta $30				sta 	codePtr
.952f		90 02		bcc $9533			bcc 	_CREExit
.9531		e6 31		inc $31				inc 	codePtr+1 					; carry
.9533						_CREExit:
.9533		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9535		b2 30		lda ($30)			lda 	(codePtr)
.9537		d0 0c		bne $9545			bne 	_SFWExit 					; if not zero, more to scan
.9539		a9 13		lda #$13		lda	#19
.953b		4c fb 95	jmp $95fb		jmp	ErrorHandler
.953e						_ScanSkipData:
.953e		88		dey				dey 								; point at data token
.953f		c8		iny				iny 								; point to offset
.9540		98		tya				tya 								; A = offset position
.9541		38		sec				sec 								; add size +1 hence SEC
.9542		71 30		adc ($30),y			adc 	(codePtr),y
.9544		a8		tay				tay 								; make current position.
.9545						_SFWExit:
.9545		60		rts				rts
.9546						ScanGetCurrentLineStep:
.9546		64 38		stz $38				stz 	zTemp1
.9548		a0 03		ldy #$03			ldy 	#3
.954a						_SGCLSLoop:
.954a		b1 30		lda ($30),y			lda 	(codePtr),y
.954c		c8		iny				iny
.954d		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.954f		f0 05		beq $9556			beq 	_SGCLSExit
.9551		20 03 95	jsr $9503			jsr 	ScanForwardOne
.9554		80 f4		bra $954a			bra 	_SGCLSLoop
.9556						_SGCLSExit:
.9556		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9558		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc5b						m
.9559						Command_VERIFY:
.9559		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; file name to verify
.955c		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.955e		a5 36		lda $36				lda 	zTemp0
.9560		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.9563		b0 4b		bcs $95b0			bcs 	_CVErrorHandler 			; error, so fail.
.9565		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.9568		20 74 8d	jsr $8d74			jsr     LoadReadByteInit            ; Init reader with the stream
.956b		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.956e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9570		85 30		sta $30				sta 	codePtr
.9572		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9574		85 31		sta $31				sta 	codePtr+1
.9576						_CVLoop:
.9576		20 32 8d	jsr $8d32			jsr 	LoadReadLine 				; get next line.
.9579		f0 27		beq $95a2			beq 	_CVExit 					; end, exit.
.957b		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.957e		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.9581		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.9584		f0 f0		beq $9576			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.9586		a0 00		ldy #$00			ldy 	#0 							; start compare
.9588						_CVCompareLoop:
.9588		b1 30		lda ($30),y			lda 	(codePtr),y
.958a		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.958d		d0 1c		bne $95ab			bne 	_CVCompareError
.958f		c8		iny				iny
.9590		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.9593		d0 f3		bne $9588			bne 	_CVCompareLoop
.9595		18		clc				clc
.9596		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9598		65 30		adc $30				adc 	codePtr
.959a		85 30		sta $30				sta 	codePtr
.959c		90 02		bcc $95a0			bcc 	_CREExit
.959e		e6 31		inc $31				inc 	codePtr+1 					; carry
.95a0						_CREExit:
.95a0		80 d4		bra $9576			bra 	_CVLoop
.95a2						_CVExit:
.95a2		ad 71 07	lda $0771			lda 	BasicFileStream
.95a5		20 13 82	jsr $8213			jsr 	KNLCloseFile
.95a8		4c 07 8d	jmp $8d07			jmp 	CLComplete
.95ab						_CVCompareError:
.95ab		a9 1b		lda #$1b		lda	#27
.95ad		4c fb 95	jmp $95fb		jmp	ErrorHandler
.95b0						_CVErrorHandler:
.95b0		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.95b3						Command_WHILE:
.95b3		5a		phy				phy 								; save position of the test
.95b4		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.95b6		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber
.95b9		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; check if zero
.95bc		f0 0e		beq $95cc			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.95be		98		tya				tya 								; position *after* test.
.95bf		7a		ply				ply 								; restore position before test, at WHILE
.95c0		88		dey				dey 								; so we execute the WHILE command again.
.95c1		48		pha				pha 								; push after test on the stack
.95c2		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.95c4		20 7f b6	jsr $b67f			jsr 	StackOpen
.95c7		20 c4 b6	jsr $b6c4			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.95ca		7a		ply				ply 								; restore the position *after* the test
.95cb		60		rts				rts
.95cc						_WHExitLoop:
.95cc		68		pla				pla 								; throw post loop position
.95cd		a9 b4		lda #$b4			lda 	#KWD_WEND 					; scan forward past WEND
.95cf		aa		tax				tax
.95d0		20 e3 94	jsr $94e3			jsr 	ScanForward
.95d3		60		rts				rts
.95d4						Command_WEND:
.95d4		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.95d6		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.95d8		20 ac b6	jsr $b6ac			jsr 	StackCheckFrame
.95db		20 d5 b6	jsr $b6d5			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.95de		20 9e b6	jsr $b69e			jsr 	StackClose		 			; erase the frame
.95e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.95e2						CheckRightBracket:
.95e2		b1 30		lda ($30),y			lda 	(codePtr),y
.95e4		c8		iny				iny
.95e5		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.95e7		d0 0f		bne $95f8			bne 	CNAFail
.95e9		60		rts				rts
.95ea						CheckComma:
.95ea		b1 30		lda ($30),y			lda 	(codePtr),y
.95ec		c8		iny				iny
.95ed		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.95ef		d0 07		bne $95f8			bne 	CNAFail
.95f1		60		rts				rts
.95f2						CheckNextA:
.95f2		d1 30		cmp ($30),y			cmp 	(codePtr),y
.95f4		d0 02		bne $95f8			bne 	CNAFail
.95f6		c8		iny				iny 								; skip character
.95f7		60		rts				rts 								; and exit
.95f8						CNAFail:
.95f8		4c 1e a7	jmp $a71e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.95fb						ErrorHandler:
.95fb		a8		tay				tay 								; find the error text
.95fc		f0 49		beq $9647			beq 	_EHEnd
.95fe		a2 00		ldx #$00			ldx 	#0
.9600		a9 37		lda #$37			lda 	#((ErrorText) & $FF)
.9602		85 36		sta $36				sta 	0+zTemp0
.9604		a9 a7		lda #$a7			lda 	#((ErrorText) >> 8)
.9606		85 37		sta $37				sta 	1+zTemp0
.9608						_EHFind:
.9608		88		dey				dey 								; keep looking through text
.9609		f0 0e		beq $9619			beq 	_EHFound
.960b						_EHFindZero:
.960b		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.960d		e6 36		inc $36				inc 	zTemp0
.960f		d0 02		bne $9613			bne 	_EHFNoCarry
.9611		e6 37		inc $37				inc 	zTemp0+1
.9613						_EHFNoCarry:
.9613		c9 00		cmp #$00			cmp 	#0
.9615		d0 f4		bne $960b			bne 	_EHFindZero
.9617		80 ef		bra $9608			bra 	_EHFind
.9619						_EHFound:
.9619		a5 36		lda $36				lda 	zTemp0 						; print message
.961b		a6 37		ldx $37				ldx 	zTemp0+1
.961d		20 54 96	jsr $9654			jsr 	PrintStringXA
.9620		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9622		b1 30		lda ($30),y			lda 	(codePtr),y
.9624		d0 05		bne $962b			bne 	_EHAtMsg
.9626		c8		iny				iny
.9627		b1 30		lda ($30),y			lda 	(codePtr),y
.9629		f0 17		beq $9642			beq 	_EHCREnd
.962b						_EHAtMsg:
.962b		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.962d		a9 4a		lda #$4a			lda 	#_AtMsg & $FF
.962f		20 54 96	jsr $9654			jsr 	PrintStringXA
.9632		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9634		b1 30		lda ($30),y			lda 	(codePtr),y
.9636		48		pha				pha
.9637		c8		iny				iny
.9638		b1 30		lda ($30),y			lda 	(codePtr),y
.963a		aa		tax				tax
.963b		68		pla				pla
.963c		20 6a 9a	jsr $9a6a			jsr 	ConvertInt16 				; convert XA to string
.963f		20 54 96	jsr $9654			jsr 	PrintStringXA 				; and print it.
.9642						_EHCREnd:
.9642		a9 0d		lda #$0d			lda 	#13 						; new line
.9644		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9647						_EHEnd:
.9647		4c ad 85	jmp $85ad			jmp 	WarmStart
>964a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9652		20 00
.9654						PrintStringXA:
.9654		5a		phy				phy
.9655		86 37		stx $37				stx 	zTemp0+1
.9657		85 36		sta $36				sta 	zTemp0
.9659		a0 00		ldy #$00			ldy 	#0
.965b						_PSXALoop:
.965b		b1 36		lda ($36),y			lda 	(zTemp0),y
.965d		f0 06		beq $9665			beq 	_PSXAExit
.965f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9662		c8		iny				iny
.9663		80 f6		bra $965b			bra 	_PSXALoop
.9665						_PSXAExit:
.9665		7a		ply				ply
.9666		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9667						UnaryTrue:
.9667		fa		plx				plx
.9668						ReturnTrue:
.9668		a9 01		lda #$01			lda 	#1  						; set to 1
.966a		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.966d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.966f		95 50		sta $50,x			sta 	NSStatus,x
.9671		60		rts				rts
.9672						UnaryFalse:
.9672		fa		plx				plx
.9673						ReturnFalse:
.9673		4c a0 a5	jmp $a5a0			jmp 	NSMSetZero 					; set it all to zero
.9676						BinaryCompareEqual:
.9676		fa		plx				plx
.9677		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.967a		c9 00		cmp #$00			cmp 	#0
.967c		f0 ea		beq $9668			beq 	ReturnTrue
.967e		80 f3		bra $9673			bra 	ReturnFalse
.9680						BinaryCompareLess:
.9680		fa		plx				plx
.9681		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.9684		c9 ff		cmp #$ff			cmp 	#$FF
.9686		f0 e0		beq $9668			beq 	ReturnTrue
.9688		80 e9		bra $9673			bra 	ReturnFalse
.968a						BinaryCompareGreater:
.968a		fa		plx				plx
.968b		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.968e		c9 01		cmp #$01			cmp 	#1
.9690		f0 d6		beq $9668			beq 	ReturnTrue
.9692		80 df		bra $9673			bra 	ReturnFalse
.9694						BinaryCompareNotEqual:
.9694		fa		plx				plx
.9695		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.9698		c9 00		cmp #$00			cmp 	#0
.969a		d0 cc		bne $9668			bne 	ReturnTrue
.969c		80 d5		bra $9673			bra 	ReturnFalse
.969e						BinaryCompareLessEqual:
.969e		fa		plx				plx
.969f		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.96a2		c9 01		cmp #$01			cmp 	#1
.96a4		d0 c2		bne $9668			bne 	ReturnTrue
.96a6		80 cb		bra $9673			bra 	ReturnFalse
.96a8						BinaryCompareGreaterEqual:
.96a8		fa		plx				plx
.96a9		20 b2 96	jsr $96b2			jsr 	CompareBaseCode
.96ac		c9 ff		cmp #$ff			cmp 	#$FF
.96ae		d0 b8		bne $9668			bne 	ReturnTrue
.96b0		80 c1		bra $9673			bra 	ReturnFalse
.96b2						CompareBaseCode:
.96b2		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; make both values if references.
.96b5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.96b7		15 51		ora $51,x			ora 	NSStatus+1,x
.96b9		29 10		and #$10			and 	#NSTString
.96bb		d0 37		bne $96f4			bne 	_CBCString 					; if so do string code, which will check if both.
.96bd		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.96bf		15 79		ora $79,x			ora 	NSExponent+1,x
.96c1		d0 34		bne $96f7			bne 	_CBCFloat
.96c3		b5 50		lda $50,x			lda 	NSStatus,x
.96c5		15 51		ora $51,x			ora 	NSStatus+1,x
.96c7		29 08		and #$08			and 	#NSTFloat
.96c9		d0 2c		bne $96f7			bne 	_CBCFloat
.96cb		20 fa 96	jsr $96fa			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.96ce		e8		inx				inx
.96cf		20 fa 96	jsr $96fa			jsr 	CompareFixMinusZero
.96d2		ca		dex				dex
.96d3		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.96d5		55 51		eor $51,x			eor 	NSStatus+1,x
.96d7		10 0a		bpl $96e3			bpl 	_CDCSameSign
.96d9		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.96db		30 14		bmi $96f1			bmi 	_CBCLess 					; return $FF
.96dd						_CBCGreater:
.96dd		a9 01		lda #$01			lda 	#1
.96df		60		rts				rts
.96e0						_CBCEqual:
.96e0		a9 00		lda #$00			lda 	#0
.96e2		60		rts				rts
.96e3						_CDCSameSign:
.96e3		20 0f 99	jsr $990f			jsr 	SubTopTwoStack 				; unsigned subtract
.96e6		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; or the mantissa together
.96e9		f0 f5		beq $96e0			beq 	_CBCEqual 					; -0 == 0
.96eb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.96ed		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.96ef		10 ec		bpl $96dd			bpl 	_CBCGreater
.96f1						_CBCLess:
.96f1		a9 ff		lda #$ff			lda 	#$FF
.96f3		60		rts				rts
.96f4						_CBCString:
.96f4		4c 80 98	jmp $9880			jmp 	CompareStrings
.96f7						_CBCFloat:
.96f7		4c ca 9b	jmp $9bca			jmp 	CompareFloat
.96fa						CompareFixMinusZero:
.96fa		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero
.96fd		d0 02		bne $9701			bne 	_CFXMZNotZero
.96ff		74 50		stz $50,x			stz 	NSStatus,x
.9701						_CFXMZNotZero:
.9701		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9702						StringConcat:
.9702		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9704		35 51		and $51,x			and 	NSStatus+1,x
.9706		29 18		and #$18			and 	#NSBTypeMask
.9708		c9 10		cmp #$10			cmp 	#NSTString
.970a		d0 50		bne $975c			bne		_SCType
.970c		64 38		stz $38				stz 	zTemp1 						; counting total length
.970e		e8		inx				inx
.970f		20 2d 97	jsr $972d			jsr 	_SCSetupZ0 					; setup for second
.9712		20 36 97	jsr $9736			jsr 	_SCLengthZ0 				; length for second
.9715		ca		dex				dex
.9716		20 2d 97	jsr $972d			jsr 	_SCSetupZ0 					; setup for first
.9719		20 36 97	jsr $9736			jsr 	_SCLengthZ0 				; length for first
.971c		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.971e		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.9721		20 4d 97	jsr $974d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9724		e8		inx				inx
.9725		20 2d 97	jsr $972d			jsr 	_SCSetupZ0 					; copy second out
.9728		20 4d 97	jsr $974d			jsr 	_SCCopy
.972b		ca		dex				dex
.972c		60		rts				rts
.972d						_SCSetupZ0:
.972d		b5 58		lda $58,x			lda 	NSMantissa0,x
.972f		85 36		sta $36				sta 	zTemp0
.9731		b5 60		lda $60,x			lda 	NSMantissa1,x
.9733		85 37		sta $37				sta 	zTemp0+1
.9735		60		rts				rts
.9736						_SCLengthZ0:
.9736		5a		phy				phy
.9737		a0 00		ldy #$00			ldy 	#0
.9739						_SCLenLoop:
.9739		b1 36		lda ($36),y			lda 	(zTemp0),y
.973b		f0 0e		beq $974b			beq 	_SCLExit
.973d		c8		iny				iny
.973e		e6 38		inc $38				inc 	zTemp1
.9740		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9742		c9 fd		cmp #$fd			cmp 	#253
.9744		d0 f3		bne $9739			bne		_SCLenLoop
.9746		a9 09		lda #$09		lda	#9
.9748		4c fb 95	jmp $95fb		jmp	ErrorHandler
.974b						_SCLExit:
.974b		7a		ply				ply
.974c		60		rts				rts
.974d						_SCCopy:
.974d		5a		phy				phy
.974e		a0 00		ldy #$00			ldy 	#0
.9750						_SCCopyLoop:
.9750		b1 36		lda ($36),y			lda 	(zTemp0),y
.9752		f0 06		beq $975a			beq 	_SCCExit
.9754		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.9757		c8		iny				iny
.9758		80 f6		bra $9750			bra 	_SCCopyLoop
.975a						_SCCExit:
.975a		7a		ply				ply
.975b		60		rts				rts
.975c						_SCType:
.975c		4c 28 a7	jmp $a728			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.975f						IntegerDivide:
.975f		fa		plx				plx
.9760		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9762		15 51		ora $51,x			ora 	NSStatus+1,x
.9764		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9765		0a		asl a				asl 	a
.9766		10 05		bpl $976d			bpl 	_NotRef
.9768		48		pha				pha
.9769		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.976c		68		pla				pla
.976d						_NotRef:
.976d		0a		asl a				asl 	a
.976e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9770		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9772		15 79		ora $79,x			ora 	NSExponent+1,x
.9774		f0 03		beq $9779			beq 	_IntegerCode 				; if clear, then we have two integers
.9776		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.9779						_IntegerCode:
.9779		20 93 97	jsr $9793			jsr 	CheckDivideZero 			; do div zero check
.977c		20 c5 97	jsr $97c5			jsr 	Int32Divide 				; do the division
.977f		20 76 98	jsr $9876			jsr 	CalculateSign 				; calculate result sign
.9782						NSMCopyPlusTwoToZero:
.9782		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9784		95 58		sta $58,x			sta 	NSMantissa0,x
.9786		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9788		95 60		sta $60,x			sta 	NSMantissa1,x
.978a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.978c		95 68		sta $68,x			sta 	NSMantissa2,x
.978e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9790		95 70		sta $70,x			sta 	NSMantissa3,x
.9792		60		rts				rts
.9793						CheckDivideZero:
.9793		e8		inx				inx
.9794		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero
.9797		f0 02		beq $979b			beq 	_CDVError
.9799		ca		dex				dex
.979a		60		rts				rts
.979b						_CDVError:
.979b		a9 03		lda #$03		lda	#3
.979d		4c fb 95	jmp $95fb		jmp	ErrorHandler
.97a0						IntegerModulus:
.97a0		fa		plx				plx
.97a1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97a3		15 51		ora $51,x			ora 	NSStatus+1,x
.97a5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97a6		0a		asl a				asl 	a
.97a7		10 05		bpl $97ae			bpl 	_NotRef
.97a9		48		pha				pha
.97aa		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97ad		68		pla				pla
.97ae						_NotRef:
.97ae		0a		asl a				asl 	a
.97af		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97b1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b3		15 79		ora $79,x			ora 	NSExponent+1,x
.97b5		f0 03		beq $97ba			beq 	_IntegerCode 				; if clear, then we have two integers
.97b7		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.97ba						_IntegerCode:
.97ba						IntegerModulusNoCheck:
.97ba		20 93 97	jsr $9793			jsr 	CheckDivideZero 			; do div zero check
.97bd		20 c5 97	jsr $97c5			jsr 	Int32Divide 				; do the division
.97c0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.97c2		56 50		lsr $50,x			lsr 	NSStatus,x
.97c4		60		rts				rts
.97c5						Int32Divide:
.97c5		48		pha				pha 								; save AXY
.97c6		5a		phy				phy
.97c7		20 83 a5	jsr $a583			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.97ca		20 9c a5	jsr $a59c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.97cd		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.97cf						_I32DivideLoop:
.97cf		e8		inx				inx
.97d0		e8		inx				inx
.97d1		20 af a5	jsr $a5af			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.97d4		ca		dex				dex
.97d5		ca		dex				dex
.97d6		20 b0 a5	jsr $a5b0			jsr 	NSMRotateLeft
.97d9		20 04 98	jsr $9804			jsr 	DivideCheckSubtract 		; check if subtract possible
.97dc		90 02		bcc $97e0			bcc 	_I32DivideNoCarryIn
.97de		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.97e0						_I32DivideNoCarryIn:
.97e0		88		dey				dey 								; loop round till division completed.
.97e1		d0 ec		bne $97cf			bne 	_I32DivideLoop
.97e3		7a		ply				ply 								; restore AXY and exit
.97e4		68		pla				pla
.97e5		60		rts				rts
.97e6						Int32ShiftDivide:
.97e6		48		pha				pha 								; save AY
.97e7		5a		phy				phy
.97e8		e8		inx				inx 								; clear S[X+2]
.97e9		e8		inx				inx
.97ea		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.97ed		ca		dex				dex
.97ee		ca		dex				dex
.97ef		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.97f1						_I32SDLoop:
.97f1		20 04 98	jsr $9804			jsr 	DivideCheckSubtract 		; check if subtract possible
.97f4		e8		inx				inx
.97f5		e8		inx				inx
.97f6		20 b0 a5	jsr $a5b0			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.97f9		ca		dex				dex
.97fa		ca		dex				dex
.97fb		20 b0 a5	jsr $a5b0			jsr 	NSMRotateLeft
.97fe		88		dey				dey 	 							; do 31 times
.97ff		d0 f0		bne $97f1			bne 	_I32SDLoop
.9801		7a		ply				ply 								; restore AY and exit
.9802		68		pla				pla
.9803		60		rts				rts
.9804						DivideCheckSubtract:
.9804		20 0f 99	jsr $990f			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9807		b0 04		bcs $980d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9809		20 f5 98	jsr $98f5			jsr 	AddTopTwoStack 				; add it back in
.980c		18		clc				clc 								; and return False
.980d						_DCSExit:
.980d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.980e						MulInteger:
.980e		fa		plx				plx
.980f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9811		15 51		ora $51,x			ora 	NSStatus+1,x
.9813		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9814		0a		asl a				asl 	a
.9815		10 05		bpl $981c			bpl 	_NotRef
.9817		48		pha				pha
.9818		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.981b		68		pla				pla
.981c						_NotRef:
.981c		0a		asl a				asl 	a 							; put MSB of type into A:7
.981d		30 09		bmi $9828			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.981f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9821		15 79		ora $79,x			ora 	NSExponent+1,x
.9823		f0 06		beq $982b			beq 	_IntegerCode 				; if clear, then we have two integers
.9825		4c 8c 9c	jmp $9c8c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9828						_StringData:
.9828		4c 32 a7	jmp $a732			jmp 	NotDoneError							; at least one string - don't know both are strings.
.982b						_IntegerCode:
.982b		20 38 98	jsr $9838			jsr 	MultiplyShort
.982e		c9 00		cmp #$00			cmp 	#0
.9830		f0 05		beq $9837			beq 	_MIExit
.9832		a9 04		lda #$04		lda	#4
.9834		4c fb 95	jmp $95fb		jmp	ErrorHandler
.9837						_MIExit:
.9837		60		rts				rts
.9838						MultiplyShort:
.9838		5a		phy				phy 								; save Y
.9839		20 83 a5	jsr $a583			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.983c		20 9c a5	jsr $a59c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.983f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9841						_I32MLoop:
.9841		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9843		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9845		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9847		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9849		f0 25		beq $9870			beq 	_I32MExit 					; exit if zero
.984b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.984d		29 01		and #$01			and 	#1
.984f		f0 0d		beq $985e			beq 	_I32MNoAdd
.9851		20 f5 98	jsr $98f5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9854		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9856		10 06		bpl $985e			bpl 	_I32MNoAdd
.9858						_I32ShiftRight:
.9858		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight 				; shift S[X] right
.985b		c8		iny				iny 								; increment shift count
.985c		80 09		bra $9867			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.985e						_I32MNoAdd:
.985e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9860		70 f6		bvs $9858			bvs 	_I32ShiftRight 				; instead.
.9862		e8		inx				inx
.9863		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9866		ca		dex				dex
.9867						_I32MShiftUpper:
.9867		e8		inx				inx 								; shift S[X+2] right
.9868		e8		inx				inx
.9869		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight
.986c		ca		dex				dex
.986d		ca		dex				dex
.986e		80 d1		bra $9841			bra 	_I32MLoop 					; try again.
.9870						_I32MExit:
.9870		20 76 98	jsr $9876			jsr 	CalculateSign
.9873		98		tya				tya 								; shift in A
.9874		7a		ply				ply 								; restore Y and exit
.9875		60		rts				rts
.9876						CalculateSign:
.9876		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9878		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.987a		55 51		eor $51,x			eor 	NSStatus+1,x
.987c		0a		asl a				asl 	a 							; shift bit 7 into carry
.987d		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.987f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9880						CompareStrings:
.9880		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9882		35 51		and $51,x			and 	NSStatus+1,x
.9884		29 10		and #$10			and 	#NSBIsString
.9886		f0 28		beq $98b0			beq 	_CSTypeError
.9888		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.988a		85 36		sta $36				sta 	zTemp0
.988c		b5 60		lda $60,x			lda 	NSMantissa1,x
.988e		85 37		sta $37				sta 	zTemp0+1
.9890		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9892		85 38		sta $38				sta 	zTemp1
.9894		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9896		85 39		sta $39				sta 	zTemp1+1
.9898		5a		phy				phy 								; save Y so we can access strings
.9899		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.989b						_CSLoop:
.989b		c8		iny				iny
.989c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.989e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.98a0		d0 06		bne $98a8			bne 	_CSDifferent
.98a2		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.98a4		d0 f5		bne $989b			bne 	_CSLoop 					; still comparing
.98a6						_CSExit:
.98a6		7a		ply				ply 								; reached end, return zero in A from EOS
.98a7		60		rts				rts
.98a8						_CSDifferent:
.98a8		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.98aa		90 fa		bcc $98a6			bcc		_CSExit
.98ac		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.98ae		80 f6		bra $98a6			bra 	_CSExit
.98b0						_CSTypeError:
.98b0		4c 28 a7	jmp $a728			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.98b3						ShiftLeft:
.98b3		38		sec				sec 								; common code, carry determines which way.
.98b4		80 01		bra $98b7			bra 	ShiftMain
.98b6						ShiftRight:
.98b6		18		clc				clc
.98b7						ShiftMain:
.98b7		fa		plx				plx 								; restore X
.98b8		08		php				php 								; save direction
.98b9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98bb		15 51		ora $51,x			ora 	NSStatus+1,x
.98bd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98be		0a		asl a				asl 	a
.98bf		10 05		bpl $98c6			bpl 	_NotRef
.98c1		48		pha				pha
.98c2		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98c5		68		pla				pla
.98c6						_NotRef:
.98c6		0a		asl a				asl 	a
.98c7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98c9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98cb		15 79		ora $79,x			ora 	NSExponent+1,x
.98cd		f0 03		beq $98d2			beq 	_IntegerCode 				; if clear, then we have two integers
.98cf		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.98d2						_IntegerCode:
.98d2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.98d4		29 e0		and #$e0			and 	#$E0
.98d6		15 61		ora $61,x			ora 	NSMantissa1+1,x
.98d8		15 69		ora $69,x			ora 	NSMantissa2+1,x
.98da		15 71		ora $71,x			ora 	NSMantissa3+1,x
.98dc		d0 12		bne $98f0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.98de						_SMLoop:
.98de		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.98e0		30 11		bmi $98f3			bmi 	_SMExit 					; exit if done.
.98e2		28		plp				plp 								; restore direction setting
.98e3		08		php				php
.98e4		90 05		bcc $98eb			bcc 	_SMRight
.98e6		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; shift left if CS
.98e9		80 f3		bra $98de			bra 	_SMLoop
.98eb						_SMRight:
.98eb		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight 				; shift right if CC
.98ee		80 ee		bra $98de			bra 	_SMLoop
.98f0						_SMExit0:
.98f0		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; return zero.
.98f3						_SMExit:
.98f3		28		plp				plp 								; throw direction
.98f4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.98f5						AddTopTwoStack:
.98f5		18		clc				clc
.98f6		b5 58		lda $58,x			lda		NSMantissa0,x
.98f8		75 59		adc $59,x			adc 		NSMantissa0+1,x
.98fa		95 58		sta $58,x			sta 	NSMantissa0,x
.98fc		b5 60		lda $60,x			lda		NSMantissa1,x
.98fe		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9900		95 60		sta $60,x			sta 	NSMantissa1,x
.9902		b5 68		lda $68,x			lda		NSMantissa2,x
.9904		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9906		95 68		sta $68,x			sta 	NSMantissa2,x
.9908		b5 70		lda $70,x			lda		NSMantissa3,x
.990a		75 71		adc $71,x			adc 		NSMantissa3+1,x
.990c		95 70		sta $70,x			sta 	NSMantissa3,x
.990e		60		rts				rts
.990f						SubTopTwoStack:
.990f		38		sec				sec
.9910		b5 58		lda $58,x			lda		NSMantissa0,x
.9912		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9914		95 58		sta $58,x			sta 	NSMantissa0,x
.9916		b5 60		lda $60,x			lda		NSMantissa1,x
.9918		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.991a		95 60		sta $60,x			sta 	NSMantissa1,x
.991c		b5 68		lda $68,x			lda		NSMantissa2,x
.991e		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9920		95 68		sta $68,x			sta 	NSMantissa2,x
.9922		b5 70		lda $70,x			lda		NSMantissa3,x
.9924		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9926		95 70		sta $70,x			sta 	NSMantissa3,x
.9928		60		rts				rts
.9929						AddInteger:
.9929		fa		plx				plx
.992a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.992c		15 51		ora $51,x			ora 	NSStatus+1,x
.992e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.992f		0a		asl a				asl 	a
.9930		10 05		bpl $9937			bpl 	_NotRef
.9932		48		pha				pha
.9933		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9936		68		pla				pla
.9937						_NotRef:
.9937		0a		asl a				asl 	a 							; put MSB of type into A:7
.9938		30 09		bmi $9943			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.993a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.993c		15 79		ora $79,x			ora 	NSExponent+1,x
.993e		f0 06		beq $9946			beq 	_IntegerCode 				; if clear, then we have two integers
.9940		4c 3c 9b	jmp $9b3c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9943						_StringData:
.9943		4c 02 97	jmp $9702			jmp 	StringConcat							; at least one string - don't know both are strings.
.9946						_IntegerCode:
.9946						AddCode:
.9946		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9948		55 51		eor $51,x			eor 	NSStatus+1,x
.994a		10 a9		bpl $98f5			bpl 	AddTopTwoStack
.994c		20 0f 99	jsr $990f			jsr 	SubTopTwoStack 				; do a physical subtraction
.994f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9951		10 07		bpl $995a			bpl 	_AddExit
.9953		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9955		95 50		sta $50,x			sta 	NSStatus,x
.9957		20 69 a5	jsr $a569			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.995a						_AddExit:
.995a		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; check for -0
.995d		d0 02		bne $9961			bne 	_AddNonZero
.995f		74 50		stz $50,x			stz 	NSStatus,x
.9961						_AddNonZero:
.9961		60		rts				rts
.9962						SubInteger:
.9962		fa		plx				plx
.9963		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9965		15 51		ora $51,x			ora 	NSStatus+1,x
.9967		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9968		0a		asl a				asl 	a
.9969		10 05		bpl $9970			bpl 	_NotRef
.996b		48		pha				pha
.996c		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.996f		68		pla				pla
.9970						_NotRef:
.9970		0a		asl a				asl 	a 							; put MSB of type into A:7
.9971		30 09		bmi $997c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9973		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9975		15 79		ora $79,x			ora 	NSExponent+1,x
.9977		f0 06		beq $997f			beq 	_IntegerCode 				; if clear, then we have two integers
.9979		4c 41 9b	jmp $9b41			jmp 	FloatingPointSub 							; otherwise at least one float.
.997c						_StringData:
.997c		4c 32 a7	jmp $a732			jmp 	NotDoneError							; at least one string - don't know both are strings.
.997f						_IntegerCode:
.997f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9981		49 80		eor #$80			eor 	#$80
.9983		95 51		sta $51,x			sta 	NSStatus+1,x
.9985		80 bf		bra $9946			bra 	AddCode 					; and do the same code as add.
.9987						AndInteger:
.9987		fa		plx				plx
.9988		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.998a		15 51		ora $51,x			ora 	NSStatus+1,x
.998c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.998d		0a		asl a				asl 	a
.998e		10 05		bpl $9995			bpl 	_NotRef
.9990		48		pha				pha
.9991		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9994		68		pla				pla
.9995						_NotRef:
.9995		0a		asl a				asl 	a
.9996		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9998		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.999a		15 79		ora $79,x			ora 	NSExponent+1,x
.999c		f0 03		beq $99a1			beq 	_IntegerCode 				; if clear, then we have two integers
.999e		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.99a1						_IntegerCode:
.99a1		b5 58		lda $58,x			lda		NSMantissa0,x
.99a3		35 59		and $59,x			and 		NSMantissa0+1,x
.99a5		95 58		sta $58,x			sta 	NSMantissa0,x
.99a7		b5 60		lda $60,x			lda		NSMantissa1,x
.99a9		35 61		and $61,x			and 		NSMantissa1+1,x
.99ab		95 60		sta $60,x			sta 	NSMantissa1,x
.99ad		b5 68		lda $68,x			lda		NSMantissa2,x
.99af		35 69		and $69,x			and 		NSMantissa2+1,x
.99b1		95 68		sta $68,x			sta 	NSMantissa2,x
.99b3		b5 70		lda $70,x			lda		NSMantissa3,x
.99b5		35 71		and $71,x			and 		NSMantissa3+1,x
.99b7		95 70		sta $70,x			sta 	NSMantissa3,x
.99b9		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99bb		60		rts				rts
.99bc						OraInteger:
.99bc		fa		plx				plx
.99bd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99bf		15 51		ora $51,x			ora 	NSStatus+1,x
.99c1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c2		0a		asl a				asl 	a
.99c3		10 05		bpl $99ca			bpl 	_NotRef
.99c5		48		pha				pha
.99c6		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99c9		68		pla				pla
.99ca						_NotRef:
.99ca		0a		asl a				asl 	a
.99cb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99cd		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99cf		15 79		ora $79,x			ora 	NSExponent+1,x
.99d1		f0 03		beq $99d6			beq 	_IntegerCode 				; if clear, then we have two integers
.99d3		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.99d6						_IntegerCode:
.99d6		b5 58		lda $58,x			lda		NSMantissa0,x
.99d8		15 59		ora $59,x			ora 		NSMantissa0+1,x
.99da		95 58		sta $58,x			sta 	NSMantissa0,x
.99dc		b5 60		lda $60,x			lda		NSMantissa1,x
.99de		15 61		ora $61,x			ora 		NSMantissa1+1,x
.99e0		95 60		sta $60,x			sta 	NSMantissa1,x
.99e2		b5 68		lda $68,x			lda		NSMantissa2,x
.99e4		15 69		ora $69,x			ora 		NSMantissa2+1,x
.99e6		95 68		sta $68,x			sta 	NSMantissa2,x
.99e8		b5 70		lda $70,x			lda		NSMantissa3,x
.99ea		15 71		ora $71,x			ora 		NSMantissa3+1,x
.99ec		95 70		sta $70,x			sta 	NSMantissa3,x
.99ee		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99f0		60		rts				rts
.99f1						EorInteger:
.99f1		fa		plx				plx
.99f2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99f4		15 51		ora $51,x			ora 	NSStatus+1,x
.99f6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99f7		0a		asl a				asl 	a
.99f8		10 05		bpl $99ff			bpl 	_NotRef
.99fa		48		pha				pha
.99fb		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99fe		68		pla				pla
.99ff						_NotRef:
.99ff		0a		asl a				asl 	a
.9a00		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a02		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a04		15 79		ora $79,x			ora 	NSExponent+1,x
.9a06		f0 03		beq $9a0b			beq 	_IntegerCode 				; if clear, then we have two integers
.9a08		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.9a0b						_IntegerCode:
.9a0b		b5 58		lda $58,x			lda		NSMantissa0,x
.9a0d		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a0f		95 58		sta $58,x			sta 	NSMantissa0,x
.9a11		b5 60		lda $60,x			lda		NSMantissa1,x
.9a13		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a15		95 60		sta $60,x			sta 	NSMantissa1,x
.9a17		b5 68		lda $68,x			lda		NSMantissa2,x
.9a19		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9a1b		95 68		sta $68,x			sta 	NSMantissa2,x
.9a1d		b5 70		lda $70,x			lda		NSMantissa3,x
.9a1f		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9a21		95 70		sta $70,x			sta 	NSMantissa3,x
.9a23		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a25		60		rts				rts
.9a26						WordIndirect:
.9a26		fa		plx				plx
.9a27		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a29		15 51		ora $51,x			ora 	NSStatus+1,x
.9a2b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a2c		0a		asl a				asl 	a
.9a2d		10 05		bpl $9a34			bpl 	_NotRef
.9a2f		48		pha				pha
.9a30		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a33		68		pla				pla
.9a34						_NotRef:
.9a34		0a		asl a				asl 	a
.9a35		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a37		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a39		15 79		ora $79,x			ora 	NSExponent+1,x
.9a3b		f0 03		beq $9a40			beq 	_IntegerCode 				; if clear, then we have two integers
.9a3d		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.9a40						_IntegerCode:
.9a40		20 46 99	jsr $9946			jsr 	AddCode 					; add the two values
.9a43		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a45		95 50		sta $50,x			sta 	NSStatus,x
.9a47		60		rts				rts
.9a48						ByteIndirect:
.9a48		fa		plx				plx
.9a49		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a4b		15 51		ora $51,x			ora 	NSStatus+1,x
.9a4d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a4e		0a		asl a				asl 	a
.9a4f		10 05		bpl $9a56			bpl 	_NotRef
.9a51		48		pha				pha
.9a52		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a55		68		pla				pla
.9a56						_NotRef:
.9a56		0a		asl a				asl 	a
.9a57		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a59		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a5b		15 79		ora $79,x			ora 	NSExponent+1,x
.9a5d		f0 03		beq $9a62			beq 	_IntegerCode 				; if clear, then we have two integers
.9a5f		4c 28 a7	jmp $a728			jmp 	TypeError 					; anything else, type mismatch.
.9a62						_IntegerCode:
.9a62		20 46 99	jsr $9946			jsr 	AddCode 					; add the two values
.9a65		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a67		95 50		sta $50,x			sta 	NSStatus,x
.9a69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9a6a						ConvertInt16:
.9a6a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9a6c		86 60		stx $60				stx 	NSMantissa1
.9a6e		64 68		stz $68				stz 	NSMantissa2
.9a70		64 70		stz $70				stz 	NSMantissa3
.9a72		64 50		stz $50				stz 	NSStatus 					; positive integer
.9a74		a2 00		ldx #$00			ldx 	#0 							; stack level
.9a76		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9a78		80 00		bra $9a7a			bra 	ConvertInt32
.9a7a						ConvertInt32:
.9a7a		5a		phy				phy
.9a7b		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9a7d		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9a7f		10 08		bpl $9a89			bpl 	_CI32NotNeg
.9a81		48		pha				pha
.9a82		a9 2d		lda #$2d			lda 	#'-'
.9a84		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9a87		c8		iny				iny
.9a88		68		pla				pla
.9a89						_CI32NotNeg:
.9a89		20 97 9a	jsr $9a97			jsr 	_CI32DivideConvert 			; recursive conversion
.9a8c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9a8e		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9a91		7a		ply				ply
.9a92		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9a94		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9a96		60		rts				rts
.9a97						_CI32DivideConvert:
.9a97		e8		inx				inx 								; write to next slot up
.9a98		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte 		 			; write the base out.
.9a9b		ca		dex				dex
.9a9c		20 c5 97	jsr $97c5			jsr 	Int32Divide 				; divide
.9a9f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9aa1		48		pha				pha
.9aa2		20 82 97	jsr $9782			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9aa5		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; is it zero ?
.9aa8		f0 05		beq $9aaf			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9aaa		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9aac		20 97 9a	jsr $9a97			jsr 	_CI32DivideConvert 			; and recusrively call.
.9aaf						_CI32NoRecurse:
.9aaf		68		pla				pla 								; remainder
.9ab0		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9ab2		90 02		bcc $9ab6			bcc 	_CI32NotHex
.9ab4		69 26		adc #$26			adc 	#6+32
.9ab6						_CI32NotHex:
.9ab6		69 30		adc #$30			adc 	#48
.9ab8		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9abb		c8		iny				iny
.9abc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9abd						PrecedenceLevel:
>9abd		04					.byte	 4	; $00 <<
>9abe		02					.byte	 2	; $01 <=
>9abf		02					.byte	 2	; $02 <>
>9ac0		00					.byte	 0	; $03 !!3
>9ac1		00					.byte	 0	; $04 ><
>9ac2		02					.byte	 2	; $05 >=
>9ac3		04					.byte	 4	; $06 >>
>9ac4		00					.byte	 0	; $07 !!7
>9ac5		00					.byte	 0	; $08 !!8
>9ac6		00					.byte	 0	; $09 !!9
>9ac7		00					.byte	 0	; $0a !!10
>9ac8		00					.byte	 0	; $0b !!11
>9ac9		00					.byte	 0	; $0c !!12
>9aca		00					.byte	 0	; $0d !!13
>9acb		00					.byte	 0	; $0e !!14
>9acc		00					.byte	 0	; $0f !!15
>9acd		00					.byte	 0	; $10 @
>9ace		00					.byte	 0	; $11 !!17
>9acf		00					.byte	 0	; $12 !!18
>9ad0		00					.byte	 0	; $13 [
>9ad1		04					.byte	 4	; $14 \
>9ad2		00					.byte	 0	; $15 ]
>9ad3		01					.byte	 1	; $16 ^
>9ad4		00					.byte	 0	; $17 _
>9ad5		00					.byte	 0	; $18 `
>9ad6		00					.byte	 0	; $19 !!25
>9ad7		00					.byte	 0	; $1a !!26
>9ad8		00					.byte	 0	; $1b {
>9ad9		01					.byte	 1	; $1c |
>9ada		00					.byte	 0	; $1d }
>9adb		00					.byte	 0	; $1e ~
>9adc		00					.byte	 0	; $1f <7F>
>9add		00					.byte	 0	; $20
>9ade		05					.byte	 5	; $21 !
>9adf		00					.byte	 0	; $22 "
>9ae0		00					.byte	 0	; $23 #
>9ae1		05					.byte	 5	; $24 $
>9ae2		04					.byte	 4	; $25 %
>9ae3		01					.byte	 1	; $26 &
>9ae4		00					.byte	 0	; $27 '
>9ae5		00					.byte	 0	; $28 (
>9ae6		00					.byte	 0	; $29 )
>9ae7		04					.byte	 4	; $2a *
>9ae8		03					.byte	 3	; $2b +
>9ae9		00					.byte	 0	; $2c ,
>9aea		03					.byte	 3	; $2d -
>9aeb		00					.byte	 0	; $2e .
>9aec		04					.byte	 4	; $2f /
>9aed		00					.byte	 0	; $30 0
>9aee		00					.byte	 0	; $31 1
>9aef		00					.byte	 0	; $32 2
>9af0		00					.byte	 0	; $33 3
>9af1		00					.byte	 0	; $34 4
>9af2		00					.byte	 0	; $35 5
>9af3		00					.byte	 0	; $36 6
>9af4		00					.byte	 0	; $37 7
>9af5		00					.byte	 0	; $38 8
>9af6		00					.byte	 0	; $39 9
>9af7		00					.byte	 0	; $3a :
>9af8		00					.byte	 0	; $3b ;
>9af9		02					.byte	 2	; $3c <
>9afa		02					.byte	 2	; $3d =
>9afb		02					.byte	 2	; $3e >
>9afc		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9afd						EvaluateExpressionAt0:
.9afd		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9aff						EvaluateExpression:
.9aff		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b01						EvaluateExpressionAtPrecedence:
.9b01		48		pha				pha 								; save precedence level
.9b02		20 49 9f	jsr $9f49			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b05		68		pla				pla 								; restore precedence level.
.9b06						_EXPRLoop:
.9b06		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b08		b1 30		lda ($30),y			lda 	(codePtr),y
.9b0a		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b0c		b0 25		bcs $9b33			bcs 	_EXPRExit
.9b0e		da		phx				phx 								; read the operator precedence
.9b0f		aa		tax				tax
.9b10		bd bd 9a	lda $9abd,x			lda 	PrecedenceLevel,x
.9b13		fa		plx				plx
.9b14		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b16		f0 1b		beq $9b33			beq 	_EXPRExit
.9b18		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b1a		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b1c		c5 37		cmp $37				cmp 	zTemp0+1
.9b1e		b0 13		bcs $9b33			bcs		_EXPRExit 					; if current >= operator exit
.9b20		48		pha				pha 								; save current precedence.
.9b21		b1 30		lda ($30),y			lda 	(codePtr),y
.9b23		c8		iny				iny
.9b24		48		pha				pha
.9b25		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b27		e8		inx				inx 								; work out the right hand side.
.9b28		20 01 9b	jsr $9b01			jsr 	EvaluateExpressionAtPrecedence
.9b2b		ca		dex				dex
.9b2c		68		pla				pla 								; get operator, call the code.
.9b2d		20 36 9b	jsr $9b36			jsr 	_EXPRCaller
.9b30		68		pla				pla 								; restore precedence level
.9b31		80 d3		bra $9b06			bra 	_EXPRLoop 					; and go round.
.9b33						_EXPRExit:
.9b33		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9b35		60		rts				rts
.9b36						_EXPRCaller:
.9b36		da		phx				phx 								; save on stack, first thing is to restore it
.9b37		0a		asl a				asl 	a 							; double so can use vectors into X
.9b38		aa		tax				tax
.9b39		7c 90 91	jmp ($9190,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9b3c						FloatingPointAdd:
.9b3c		20 b2 9c	jsr $9cb2			jsr 	FloatPrepare 				; prepare for floats
.9b3f		80 09		bra $9b4a			bra 	FloatAdd
.9b41						FloatingPointSub:
.9b41		20 b2 9c	jsr $9cb2			jsr 	FloatPrepare 				; prepare for floats
.9b44						FloatSubtract:
.9b44		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9b46		49 80		eor #$80			eor 	#$80
.9b48		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9b4a						FloatAdd:
.9b4a		48		pha				pha
.9b4b		5a		phy				phy
.9b4c		20 c1 9c	jsr $9cc1			jsr 	NSNormalise 				; normalise S[X]
.9b4f		f0 51		beq $9ba2			beq 	_FAReturn1
.9b51		e8		inx				inx 								; normalise S[X+1]
.9b52		20 c1 9c	jsr $9cc1			jsr 	NSNormalise
.9b55		ca		dex				dex
.9b56		c9 00		cmp #$00			cmp 	#0
.9b58		f0 60		beq $9bba			beq 	_FAExit 					; if so, just return A
.9b5a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b5c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9b5e		f0 18		beq $9b78			beq 	_FAExponentsEqual
.9b60		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9b62		a8		tay				tay
.9b63		38		sec				sec 								; do a signed comparison of the exponents.
.9b64		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9b66		50 02		bvc $9b6a			bvc 	_FANoSignedChange
.9b68		49 80		eor #$80			eor 	#$80
.9b6a						_FANoSignedChange:
.9b6a		29 80		and #$80			and 	#$80
.9b6c		10 02		bpl $9b70			bpl 	_FAHaveMax
.9b6e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9b70						_FAHaveMax:
.9b70		20 bd 9b	jsr $9bbd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9b73		e8		inx				inx
.9b74		20 bd 9b	jsr $9bbd			jsr 	_FAShiftToExponent
.9b77		ca		dex				dex
.9b78						_FAExponentsEqual:
.9b78		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9b7a		55 51		eor $51,x			eor 	NSStatus+1,x
.9b7c		30 0e		bmi $9b8c			bmi 	_FADifferentSigns
.9b7e		20 f5 98	jsr $98f5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9b81		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9b83		10 35		bpl $9bba			bpl 	_FAExit 					; if no, we are done.
.9b85		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9b88		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9b8a		80 2e		bra $9bba			bra 	_FAExit
.9b8c						_FADifferentSigns:
.9b8c		20 0f 99	jsr $990f			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9b8f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9b91		10 06		bpl $9b99			bpl 	_FACheckZero 				; if no, check for -0
.9b93		20 62 a5	jsr $a562			jsr 	NSMNegate 					; netate result
.9b96		20 69 a5	jsr $a569			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b99						_FACheckZero:
.9b99		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero	 				; check for -0
.9b9c		d0 1c		bne $9bba			bne 	_FAExit
.9b9e		74 50		stz $50,x			stz 	NSStatus,x
.9ba0		80 18		bra $9bba			bra 	_FAExit
.9ba2						_FAReturn1:
.9ba2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9ba4		95 58		sta $58,x			sta 	NSMantissa0,x
.9ba6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ba8		95 60		sta $60,x			sta 	NSMantissa1,x
.9baa		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bac		95 68		sta $68,x			sta 	NSMantissa2,x
.9bae		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9bb0		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb2		b5 79		lda $79,x			lda 	NSExponent+1,x
.9bb4		95 78		sta $78,x			sta 	NSExponent,x
.9bb6		b5 51		lda $51,x			lda 	NSStatus+1,x
.9bb8		95 50		sta $50,x			sta 	NSStatus,x
.9bba						_FAExit:
.9bba		7a		ply				ply
.9bbb		68		pla				pla
.9bbc		60		rts				rts
.9bbd						_FAShiftToExponent:
.9bbd						_FAShiftToExponent2:
.9bbd		98		tya				tya 								; compare Y to exponent
.9bbe		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9bc0		f0 07		beq $9bc9			beq 	_FASEExit 					; exit if so.
.9bc2		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight	 			; shift the mantissa right
.9bc5		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9bc7		80 f4		bra $9bbd			bra 	_FAShiftToExponent2
.9bc9						_FASEExit:
.9bc9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9bca						CompareFloat:
.9bca		20 44 9b	jsr $9b44			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9bcd		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9bcf		29 f8		and #$f8			and 	#$F8
.9bd1		15 68		ora $68,x			ora 	NSMantissa2,x
.9bd3		15 70		ora $70,x			ora 	NSMantissa3,x
.9bd5		f0 08		beq $9bdf			beq 	_FCExit 					; zero, so approximately identical
.9bd7		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9bd9		34 50		bit $50,x			bit 	NSStatus,x
.9bdb		10 02		bpl $9bdf			bpl 	_FCExit
.9bdd						_FCNegative:
.9bdd		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9bdf						_FCExit:
.9bdf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9be0						FDivideCommand:
.9be0		fa		plx				plx	 								; restore stack position
.9be1		20 b2 9c	jsr $9cb2			jsr 	FloatPrepare 				; prepare for floats
.9be4						FloatDivide:
.9be4		48		pha				pha
.9be5		e8		inx				inx
.9be6		20 c1 9c	jsr $9cc1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9be9		ca		dex				dex
.9bea		c9 00		cmp #$00			cmp 	#0
.9bec		f0 1d		beq $9c0b			beq 	_FDZero
.9bee		20 c1 9c	jsr $9cc1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9bf1		f0 16		beq $9c09			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9bf3		20 e6 97	jsr $97e6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9bf6		20 82 97	jsr $9782			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9bf9		20 c1 9c	jsr $9cc1			jsr		NSNormalise 				; renormalise
.9bfc		20 76 98	jsr $9876			jsr 	CalculateSign 				; calculate result sign
.9bff		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c01		38		sec				sec
.9c02		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c04		38		sec				sec
.9c05		e9 1e		sbc #$1e			sbc 	#30
.9c07		95 78		sta $78,x			sta 	NSExponent,x
.9c09						_FDExit:
.9c09		68		pla				pla
.9c0a		60		rts				rts
.9c0b						_FDZero:
.9c0b		a9 03		lda #$03		lda	#3
.9c0d		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c10						FloatFractionalPart:
.9c10		5a		phy				phy
.9c11		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c13		29 7f		and #$7f			and 	#$7F
.9c15		95 50		sta $50,x			sta 	NSStatus,x
.9c17		20 c1 9c	jsr $9cc1			jsr 	NSNormalise
.9c1a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c1c		38		sec				sec
.9c1d		e9 e0		sbc #$e0			sbc 	#$E0
.9c1f		90 29		bcc $9c4a			bcc 	_FFPExit 					; already fractional
.9c21		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c23		b0 22		bcs $9c47			bcs 	_FFPZero
.9c25		a8		tay				tay 								; put count to do in Y
.9c26		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9c28		20 4c 9c	jsr $9c4c			jsr 	_FFPPartial
.9c2b		95 70		sta $70,x			sta 	NSMantissa3,x
.9c2d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c2f		20 4c 9c	jsr $9c4c			jsr 	_FFPPartial
.9c32		95 68		sta $68,x			sta 	NSMantissa2,x
.9c34		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c36		20 4c 9c	jsr $9c4c			jsr 	_FFPPartial
.9c39		95 60		sta $60,x			sta 	NSMantissa1,x
.9c3b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c3d		20 4c 9c	jsr $9c4c			jsr 	_FFPPartial
.9c40		95 58		sta $58,x			sta 	NSMantissa0,x
.9c42		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; zeroed check.
.9c45		d0 03		bne $9c4a			bne 	_FFPExit
.9c47						_FFPZero:
.9c47		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.9c4a						_FFPExit:
.9c4a		7a		ply				ply
.9c4b		60		rts				rts
.9c4c						_FFPPartial:
.9c4c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9c4e		f0 17		beq $9c67			beq 	_FFFPPExit
.9c50		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9c52		b0 0c		bcs $9c60			bcs 	_FFFPPWholeByte
.9c54		5a		phy				phy
.9c55						_FFFPPLeft:
.9c55		0a		asl a				asl 	a
.9c56		88		dey				dey
.9c57		d0 fc		bne $9c55			bne 	_FFFPPLeft
.9c59		7a		ply				ply
.9c5a						_FFFPPRight:
.9c5a		4a		lsr a				lsr 	a
.9c5b		88		dey				dey
.9c5c		d0 fc		bne $9c5a			bne 	_FFFPPRight
.9c5e		80 07		bra $9c67			bra 	_FFFPPExit
.9c60						_FFFPPWholeByte:
.9c60		98		tya				tya 								; subtract 8 from count
.9c61		38		sec				sec
.9c62		e9 08		sbc #$08			sbc 	#8
.9c64		a8		tay				tay
.9c65		a9 00		lda #$00			lda 	#0 							; and clear all
.9c67						_FFFPPExit:
.9c67		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c68						FloatIntegerPart:
.9c68		48		pha				pha
.9c69		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9c6b		f0 1d		beq $9c8a			beq 	_FIPExit 					; if so do nothing
.9c6d		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; is it zero ?
.9c70		f0 15		beq $9c87			beq 	_FIPZero 					; if so return zero.
.9c72		20 c1 9c	jsr $9cc1			jsr 	NSNormalise 				; normalise
.9c75		f0 10		beq $9c87			beq 	_FIPZero 					; normalised to zero, exit zero
.9c77						_FIPShift:
.9c77		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9c79		10 07		bpl $9c82			bpl 	_FIPCheckZero
.9c7b		20 b9 a5	jsr $a5b9			jsr 	NSMShiftRight 				; shift mantissa right
.9c7e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9c80		80 f5		bra $9c77			bra 	_FIPShift
.9c82						_FIPCheckZero:
.9c82		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; avoid -0 problem
.9c85		d0 03		bne $9c8a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c87						_FIPZero:
.9c87		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.9c8a						_FIPExit:
.9c8a		68		pla				pla
.9c8b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c8c						FloatingPointMultiply:
.9c8c		20 b2 9c	jsr $9cb2			jsr 	FloatPrepare 				; prepare for floats
.9c8f						FloatMultiply:
.9c8f		48		pha				pha
.9c90		20 c1 9c	jsr $9cc1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c93		f0 18		beq $9cad			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9c95		e8		inx				inx
.9c96		20 c1 9c	jsr $9cc1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c99		ca		dex				dex
.9c9a		c9 00		cmp #$00			cmp 	#0
.9c9c		f0 0c		beq $9caa			beq 	_FDSetZero
.9c9e		20 38 98	jsr $9838			jsr 	MultiplyShort 				; calculate the result.
.9ca1		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9ca3		18		clc				clc
.9ca4		75 79		adc $79,x			adc 	NSExponent+1,x
.9ca6		95 78		sta $78,x			sta 	NSExponent,x
.9ca8		80 03		bra $9cad			bra 	_FDExit
.9caa						_FDSetZero:
.9caa		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; return 0
.9cad						_FDExit:
.9cad		20 c1 9c	jsr $9cc1			jsr 	NSNormalise 				; normalise the result
.9cb0		68		pla				pla
.9cb1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9cb2						FloatPrepare:
.9cb2		20 bd 9d	jsr $9dbd			jsr 	DereferenceTopTwo 			; dereference the top two values
.9cb5		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9cb7		15 51		ora $51,x			ora 	NSStatus+1,x
.9cb9		29 10		and #$10			and 	#NSBIsString
.9cbb		d0 01		bne $9cbe			bne 	_FDType
.9cbd		60		rts				rts
.9cbe						_FDType:
.9cbe		4c 28 a7	jmp $a728			jmp 	TypeError
.9cc1						NSNormalise:
.9cc1		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9cc3		29 80		and #$80			and 	#$80
.9cc5		09 08		ora #$08			ora 	#NSTFloat
.9cc7		95 50		sta $50,x			sta 	NSStatus,x
.9cc9		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; if zero exit
.9ccc		d0 07		bne $9cd5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9cce		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9cd0		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9cd2		a9 00		lda #$00			lda 	#0 							; set Z flag
.9cd4		60		rts				rts
.9cd5						_NSNormaliseOptimise:
.9cd5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9cd7		d0 19		bne $9cf2			bne 	_NSNormaliseLoop
.9cd9		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9cdb		30 15		bmi $9cf2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9cdd		95 70		sta $70,x			sta 	NSMantissa3,x
.9cdf		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ce1		95 68		sta $68,x			sta 	NSMantissa2,x
.9ce3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ce5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ce7		74 58		stz $58,x			stz 	NSMantissa0,x
.9ce9		b5 78		lda $78,x			lda 	NSExponent,x
.9ceb		38		sec				sec
.9cec		e9 08		sbc #$08			sbc 	#8
.9cee		95 78		sta $78,x			sta 	NSExponent,x
.9cf0		80 e3		bra $9cd5			bra 	_NSNormaliseOptimise
.9cf2						_NSNormaliseLoop:
.9cf2		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9cf4		70 07		bvs $9cfd			bvs 	_NSNExit 					; exit if so with Z flag clear
.9cf6		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; shift mantissa left
.9cf9		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9cfb		80 f5		bra $9cf2			bra 	_NSNormaliseLoop
.9cfd						_NSNExit:
.9cfd		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9cff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d00						AssignNumber:
.9d00		5a		phy				phy
.9d01		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d03		85 36		sta $36				sta 	zTemp0
.9d05		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d07		85 37		sta $37				sta 	zTemp0+1
.9d09		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d0b		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d0d		95 50		sta $50,x			sta 	NSStatus,x
.9d0f		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d11		c9 08		cmp #$08			cmp 	#NSTFloat
.9d13		f0 24		beq $9d39			beq 	_ANFloat
.9d15		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9d17		f0 03		beq $9d1c			beq		_ANNotFloat
.9d19		4c 23 a7	jmp $a723			jmp 	RangeError					; if it is, report an error.
.9d1c						_ANNotFloat:
.9d1c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d1e		29 03		and #$03			and 	#3
.9d20		d0 05		bne $9d27			bne 	_ANByteWord
.9d22		20 44 9d	jsr $9d44			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d25		80 1b		bra $9d42			bra 	_ANExit
.9d27						_ANByteWord:
.9d27		48		pha				pha 								; save count
.9d28		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9d2a		92 36		sta ($36)			sta 	(zTemp0)
.9d2c		68		pla				pla
.9d2d		c9 01		cmp #$01			cmp	 	#1
.9d2f		f0 11		beq $9d42			beq 	_ANExit
.9d31		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9d33		a0 01		ldy #$01			ldy 	#1
.9d35		91 36		sta ($36),y			sta 	(zTemp0),y
.9d37		80 09		bra $9d42			bra 	_ANExit
.9d39						_ANFloat:
.9d39		20 44 9d	jsr $9d44			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d3c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d3e		a0 04		ldy #$04			ldy 	#4
.9d40		91 36		sta ($36),y			sta 	(zTemp0),y
.9d42						_ANExit:
.9d42		7a		ply				ply
.9d43		60		rts				rts
.9d44						_ANCopy4PackSign:
.9d44		a0 03		ldy #$03			ldy 	#3
.9d46		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9d48		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d4a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9d4c		91 36		sta ($36),y			sta 	(zTemp0),y
.9d4e		88		dey				dey
.9d4f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d51		91 36		sta ($36),y			sta 	(zTemp0),y
.9d53		88		dey				dey
.9d54		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d56		91 36		sta ($36),y			sta 	(zTemp0),y
.9d58		88		dey				dey
.9d59		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d5b		91 36		sta ($36),y			sta 	(zTemp0),y
.9d5d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d5e						AssignString:
.9d5e		5a		phy				phy
.9d5f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d61		85 38		sta $38				sta 	zTemp1
.9d63		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d65		85 39		sta $39				sta 	zTemp1+1
.9d67		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d69		85 36		sta $36				sta 	zTemp0
.9d6b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d6d		85 37		sta $37				sta 	zTemp0+1
.9d6f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9d71		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d73		f0 23		beq $9d98			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9d75		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9d76		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9d78		e9 02		sbc #$02			sbc 	#2
.9d7a		85 3c		sta $3c				sta 	zsTemp
.9d7c		a0 01		ldy #$01			ldy 	#1
.9d7e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d80		e9 00		sbc #$00			sbc 	#0
.9d82		85 3d		sta $3d				sta 	zsTemp+1
.9d84		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9d86						_ASGetLength:
.9d86		c8		iny				iny
.9d87		b1 38		lda ($38),y			lda 	(zTemp1),y
.9d89		d0 fb		bne $9d86			bne 	_ASGetLength
.9d8b		98		tya				tya 								; is this length <= current length
.9d8c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9d8e		90 1e		bcc $9dae			bcc 	_ASCopyString
.9d90		f0 1c		beq $9dae			beq 	_ASCopyString
.9d92		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9d94		a0 01		ldy #$01			ldy 	#1
.9d96		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d98						_ASNewStringRequired:
.9d98		e8		inx				inx 								; concrete the new string.
.9d99		20 f2 b6	jsr $b6f2			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9d9c		ca		dex				dex
.9d9d		18		clc				clc
.9d9e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9da0		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9da2		92 36		sta ($36)			sta 	(zTemp0)
.9da4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9da6		69 00		adc #$00			adc 	#0
.9da8		a0 01		ldy #$01			ldy 	#1
.9daa		91 36		sta ($36),y			sta 	(zTemp0),y
.9dac		80 0d		bra $9dbb			bra 	_ASExit
.9dae						_ASCopyString:
.9dae		a0 00		ldy #$00			ldy 	#0
.9db0						_ASCopyLoop:
.9db0		b1 38		lda ($38),y			lda 	(zTemp1),y
.9db2		c8		iny				iny
.9db3		c8		iny				iny
.9db4		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9db6		88		dey				dey
.9db7		c9 00		cmp #$00			cmp 	#0
.9db9		d0 f5		bne $9db0			bne 	_ASCopyLoop
.9dbb						_ASExit:
.9dbb		7a		ply				ply
.9dbc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9dbd						DereferenceTopTwo:
.9dbd		e8		inx				inx
.9dbe		20 c2 9d	jsr $9dc2			jsr 	Dereference 				; deref x+1
.9dc1		ca		dex				dex  								; falls through to deref x
.9dc2						Dereference:
.9dc2		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9dc4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9dc6		f0 48		beq $9e10			beq 	_DRFExit 					; not a reference, so exit.
.9dc8		5a		phy				phy
.9dc9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9dcb		85 36		sta $36				sta 	zTemp0
.9dcd		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dcf		85 37		sta $37				sta 	zTemp0+1
.9dd1		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9dd3		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9dd5		95 58		sta $58,x			sta 	NSMantissa0,x
.9dd7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9dd9		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ddb		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9ddd		f0 0e		beq $9ded			beq 	_DRFDereferenceTwo
.9ddf		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9de1		f0 2f		beq $9e12			beq 	_DRFFull
.9de3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9de5		29 03		and #$03			and 	#3
.9de7		f0 29		beq $9e12			beq 	_DRFFull 					; the whole word
.9de9		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9deb		f0 06		beq $9df3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9ded						_DRFDereferenceTwo:
.9ded		a0 01		ldy #$01			ldy 	#1
.9def		b1 36		lda ($36),y			lda 	(zTemp0),y
.9df1		95 60		sta $60,x			sta 	NSMantissa1,x
.9df3						_DRFClear23:
.9df3		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9df5		74 70		stz $70,x			stz 	NSMantissa3,x
.9df7		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9df9		29 18		and #$18			and 	#NSBTypeMask
.9dfb		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9dfd		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9dff		d0 0e		bne $9e0f			bne 	_DRFNotString
.9e01		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e03		15 60		ora $60,x			ora 	NSMantissa1,x
.9e05		d0 08		bne $9e0f			bne 	_DRFNotString
.9e07		a9 11		lda #$11			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e09		95 58		sta $58,x			sta 	NSMantissa0,x
.9e0b		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e0d		95 60		sta $60,x			sta 	NSMantissa1,x
.9e0f						_DRFNotString
.9e0f		7a		ply				ply 								; restore Y and exit
.9e10						_DRFExit:
.9e10		60		rts				rts
.9e11						_DRFNullString:
>9e11		00						.byte 	0
.9e12						_DRFFull:
.9e12		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e14		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e16		95 60		sta $60,x			sta 	NSMantissa1,x
.9e18		c8		iny				iny
.9e19		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e1b		95 68		sta $68,x			sta 	NSMantissa2,x
.9e1d		c8		iny				iny
.9e1e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e20		95 70		sta $70,x			sta 	NSMantissa3,x
.9e22		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9e24		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9e26		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e28		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9e2a		f0 05		beq $9e31			beq 	_DRFNoExponent
.9e2c		c8		iny				iny 								; if not, read the exponent as well.
.9e2d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e2f		95 78		sta $78,x			sta 	NSExponent,x
.9e31						_DRFNoExponent:
.9e31		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e33		10 0a		bpl $9e3f			bpl 	_DRFExit2 					; if not, then exit.
.9e35		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e37		95 70		sta $70,x			sta 	NSMantissa3,x
.9e39		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9e3b		09 80		ora #$80			ora 	#NSBIsNegative
.9e3d		95 50		sta $50,x			sta 	NSStatus,x
.9e3f						_DRFExit2:
.9e3f		7a		ply				ply
.9e40		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9e41						EncodeNumberStart:
.9e41		38		sec				sec
.9e42		80 01		bra $9e45			bra 	EncodeNumberContinue+1
.9e44						EncodeNumberContinue:
.9e44		18		clc				clc
.9e45						EncodeNumber:
.9e45		08		php				php 								; save reset flag.
.9e46		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9e48		f0 12		beq $9e5c			beq 	_ENIsOkay
.9e4a		c9 30		cmp #$30			cmp 	#"0"
.9e4c		90 04		bcc $9e52			bcc 	_ENBadNumber
.9e4e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9e50		90 0a		bcc $9e5c			bcc 	_ENIsOkay
.9e52						_ENBadNumber:
.9e52		28		plp				plp 								; throw saved reset
.9e53		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9e56		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e58		f0 7b		beq $9ed5			beq 	_ENConstructFinal
.9e5a						_ENFail:
.9e5a		18		clc				clc 								; not allowed
.9e5b		60		rts				rts
.9e5c						_ENIsOkay:
.9e5c		28		plp				plp 								; are we restarting
.9e5d		90 15		bcc $9e74			bcc 	_ENNoRestart
.9e5f						_ENStartEncode:
.9e5f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9e61		f0 0c		beq $9e6f			beq 	_ENFirstDP
.9e63		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9e65		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte 					; in single byte mode.
.9e68		a9 01		lda #$01			lda 	#ESTA_Low
.9e6a						_ENExitChange:
.9e6a		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9e6d		38		sec				sec
.9e6e		60		rts				rts
.9e6f						_ENFirstDP:
.9e6f		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; clear integer part
.9e72		80 3c		bra $9eb0			bra 	_ESTASwitchFloat			; go straight to float and exi
.9e74						_ENNoRestart:
.9e74		48		pha				pha 								; save digit or DP on stack.
.9e75		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9e78		c9 01		cmp #$01			cmp 	#ESTA_Low
.9e7a		f0 09		beq $9e85			beq  	_ESTALowState
.9e7c		c9 02		cmp #$02			cmp 	#ESTA_High
.9e7e		f0 26		beq $9ea6			beq 	_ESTAHighState
.9e80		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e82		f0 38		beq $9ebc			beq 	_ESTADecimalState
>9e84		db						.byte 	$DB 						; causes a break in the emulator
.9e85						_ESTALowState:
.9e85		68		pla				pla 								; get value back
.9e86		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9e88		f0 26		beq $9eb0			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9e8a		29 0f		and #$0f			and 	#15 						; make digit
.9e8c		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9e8f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9e91		0a		asl a				asl 	a
.9e92		0a		asl a				asl 	a
.9e93		75 58		adc $58,x			adc 	NSMantissa0,x
.9e95		0a		asl a				asl 	a
.9e96		6d 06 04	adc $0406			adc 	digitTemp
.9e99		95 58		sta $58,x			sta 	NSMantissa0,x
.9e9b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9e9d		90 05		bcc $9ea4			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9e9f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ea1		8d 05 04	sta $0405			sta 	encodeState
.9ea4						_ESTANoSwitch:
.9ea4		38		sec				sec
.9ea5		60		rts				rts
.9ea6						_ESTAHighState:
.9ea6		68		pla				pla 								; get value back
.9ea7		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9ea9		f0 05		beq $9eb0			beq 	_ESTASwitchFloat
.9eab		20 09 9f	jsr $9f09			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9eae		38		sec				sec
.9eaf		60		rts				rts
.9eb0						_ESTASwitchFloat:
.9eb0		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9eb3		e8		inx				inx 								; zero the decimal additive.
.9eb4		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.9eb7		ca		dex				dex
.9eb8		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9eba		80 ae		bra $9e6a			bra 	_ENExitChange
.9ebc						_ESTADecimalState:
.9ebc		68		pla				pla 								; digit.
.9ebd		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ebf		f0 99		beq $9e5a			beq 	_ENFail
.9ec1		e8		inx				inx 								; put digit into fractional part of X+1
.9ec2		20 09 9f	jsr $9f09			jsr 	ESTAShiftDigitIntoMantissa
.9ec5		ca		dex				dex
.9ec6		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9ec9		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9ecc		c9 0b		cmp #$0b			cmp 	#11
.9ece		f0 02		beq $9ed2			beq 	_ESTADSFail
.9ed0		38		sec				sec
.9ed1		60		rts				rts
.9ed2						_ESTADSFail:
.9ed2		4c 23 a7	jmp $a723			jmp 	RangeError
.9ed5						_ENConstructFinal:
.9ed5		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9ed8		f0 2d		beq $9f07			beq 	_ENCFExit 					; no decimals
.9eda		5a		phy				phy
.9edb		0a		asl a				asl 	a 							; x 4 and CLC
.9edc		0a		asl a				asl 	a
.9edd		6d 07 04	adc $0407			adc 	decimalCount
.9ee0		a8		tay				tay
.9ee1		b9 e2 a6	lda $a6e2,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ee4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9ee6		b9 e3 a6	lda $a6e3,y			lda 	DecimalScalarTable-5+1,y
.9ee9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9eeb		b9 e4 a6	lda $a6e4,y			lda 	DecimalScalarTable-5+2,y
.9eee		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9ef0		b9 e5 a6	lda $a6e5,y			lda 	DecimalScalarTable-5+3,y
.9ef3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9ef5		b9 e6 a6	lda $a6e6,y			lda 	DecimalScalarTable-5+4,y
.9ef8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9efa		a9 08		lda #$08			lda 	#NSTFloat
.9efc		95 52		sta $52,x			sta 	NSStatus+2,x
.9efe		7a		ply				ply
.9eff		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f00		20 8f 9c	jsr $9c8f			jsr 	FloatMultiply
.9f03		ca		dex				dex
.9f04		20 4a 9b	jsr $9b4a			jsr 	FloatAdd 					; add to integer part.
.9f07						_ENCFExit:
.9f07		18		clc				clc 								; reject the digit.
.9f08		60		rts				rts
.9f09						ESTAShiftDigitIntoMantissa:
.9f09		29 0f		and #$0f			and 	#15 						; save digit
.9f0b		48		pha				pha
.9f0c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f0e		48		pha				pha
.9f0f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f11		48		pha				pha
.9f12		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f14		48		pha				pha
.9f15		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f17		48		pha				pha
.9f18		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 2
.9f1b		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 4
.9f1e		18		clc				clc 								; pop mantissa and add
.9f1f		68		pla				pla
.9f20		75 58		adc $58,x			adc 	NSMantissa0,x
.9f22		95 58		sta $58,x			sta 	NSMantissa0,x
.9f24		68		pla				pla
.9f25		75 60		adc $60,x			adc 	NSMantissa1,x
.9f27		95 60		sta $60,x			sta 	NSMantissa1,x
.9f29		68		pla				pla
.9f2a		75 68		adc $68,x			adc 	NSMantissa2,x
.9f2c		95 68		sta $68,x			sta 	NSMantissa2,x
.9f2e		68		pla				pla
.9f2f		75 70		adc $70,x			adc 	NSMantissa3,x
.9f31		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9f33		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 10
.9f36		68		pla				pla 								; add digit
.9f37		18		clc				clc
.9f38		75 58		adc $58,x			adc 	NSMantissa0,x
.9f3a		95 58		sta $58,x			sta 	NSMantissa0,x
.9f3c		90 0a		bcc $9f48			bcc 	_ESTASDExit
.9f3e		f6 60		inc $60,x			inc 	NSMantissa1,x
.9f40		d0 06		bne $9f48			bne 	_ESTASDExit
.9f42		f6 68		inc $68,x			inc 	NSMantissa2,x
.9f44		d0 02		bne $9f48			bne 	_ESTASDExit
.9f46		f6 70		inc $70,x			inc 	NSMantissa3,x
.9f48						_ESTASDExit:
.9f48		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9f49						EvaluateTerm:
.9f49		b1 30		lda ($30),y			lda 	(codePtr),y
.9f4b		30 18		bmi $9f65			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9f4d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9f4f		b0 6c		bcs $9fbd			bcs 	_ETVariable
.9f51		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9f53		90 6b		bcc $9fc0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9f55		c9 3a		cmp #$3a			cmp 	#'9'+1
.9f57		b0 67		bcs $9fc0			bcs 	_ETPuncUnary
.9f59		20 41 9e	jsr $9e41			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9f5c						_ETNumber:
.9f5c		c8		iny				iny 								; keep encoding until we have the numbers
.9f5d		b1 30		lda ($30),y			lda 	(codePtr),y
.9f5f		20 44 9e	jsr $9e44			jsr 	EncodeNumberContinue
.9f62		b0 f8		bcs $9f5c			bcs 	_ETNumber 					; go back if accepted.
.9f64		60		rts				rts
.9f65						_ETCheckUnary:
.9f65		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9f67		f0 3f		beq $9fa8			beq 	_ETString
.9f69		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9f6b		f0 12		beq $9f7f			beq 	_ETHexConstant
.9f6d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9f6f		90 0b		bcc $9f7c			bcc 	_ETSyntaxError
.9f71		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1
.9f73		b0 07		bcs $9f7c			bcs 	_ETSyntaxError
.9f75		da		phx				phx 								; push X on the stack
.9f76		0a		asl a				asl 	a 							; put vector x 2 into X
.9f77		aa		tax				tax
.9f78		c8		iny				iny 								; consume unary function token
.9f79		7c 10 92	jmp ($9210,x)			jmp 	(VectorSet0,x) 				; and do it.
.9f7c						_ETSyntaxError:
.9f7c		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.9f7f						_ETHexConstant:
.9f7f		c8		iny				iny 								; skip #
.9f80		c8		iny				iny 								; skip count
.9f81		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; clear result
.9f84						_ETHLoop:
.9f84		b1 30		lda ($30),y			lda 	(codePtr),y
.9f86		c8		iny				iny 								; and consume
.9f87		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9f89		f0 1c		beq $9fa7			beq 	_ETHExit
.9f8b		48		pha				pha 								; save on stack.
.9f8c		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 2
.9f8f		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 4
.9f92		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 8
.9f95		20 af a5	jsr $a5af			jsr 	NSMShiftLeft 				; x 16
.9f98		68		pla				pla 								; ASCII
.9f99		c9 41		cmp #$41			cmp 	#'A'
.9f9b		90 02		bcc $9f9f			bcc 	_ETHNotChar
.9f9d		e9 07		sbc #$07			sbc 	#7
.9f9f						_ETHNotChar:
.9f9f		29 0f		and #$0f			and 	#15 						; digit now
.9fa1		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9fa3		95 58		sta $58,x			sta 	NSMantissa0,x
.9fa5		80 dd		bra $9f84			bra 	_ETHLoop 					; go round.
.9fa7						_ETHExit:
.9fa7		60		rts				rts
.9fa8						_ETString:
.9fa8		c8		iny				iny 								; look at length
.9fa9		b1 30		lda ($30),y			lda 	(codePtr),y
.9fab		48		pha				pha
.9fac		c8		iny				iny 								; first character
.9fad		20 1a ad	jsr $ad1a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9fb0		68		pla				pla 								; restore count and save
.9fb1		85 36		sta $36				sta 	zTemp0
.9fb3		98		tya				tya 								; add length to Y to skip it.
.9fb4		18		clc				clc
.9fb5		65 36		adc $36				adc 	zTemp0
.9fb7		a8		tay				tay
.9fb8		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9fba		95 50		sta $50,x			sta 	NSStatus,x
.9fbc		60		rts				rts
.9fbd						_ETVariable:
.9fbd		4c 12 a0	jmp $a012			jmp 	VariableHandler
.9fc0						_ETPuncUnary:
.9fc0		c8		iny				iny 								; consume the unary character
.9fc1		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9fc3		f0 2b		beq $9ff0			beq 	_ETUnaryNegate
.9fc5		c9 b5		cmp #$b5			cmp 	#KWD_AT 					; @ reference -> constant
.9fc7		f0 36		beq $9fff			beq 	_ETDereference
.9fc9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9fcb		f0 3e		beq $a00b			beq 	_ETParenthesis
.9fcd		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9fcf		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9fd1		f0 06		beq $9fd9			beq 	_ETIndirection
.9fd3		e6 36		inc $36				inc 	zTemp0
.9fd5		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9fd7		d0 a3		bne $9f7c			bne 	_ETSyntaxError
.9fd9						_ETIndirection:
.9fd9		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9fdb		1a		inc a				inc 	a
.9fdc		48		pha				pha
.9fdd		20 49 9f	jsr $9f49			jsr 	EvaluateTerm				; evaluate the term
.9fe0		20 c2 9d	jsr $9dc2			jsr 	Dereference 				; dereference it.
.9fe3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9fe5		d0 06		bne $9fed			bne 	_ETTypeMismatch
.9fe7		68		pla				pla 								; indirection 1-2
.9fe8		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9fea		95 50		sta $50,x			sta 	NSStatus,x
.9fec		60		rts				rts
.9fed						_ETTypeMismatch:
.9fed		4c 28 a7	jmp $a728			jmp 	TypeError
.9ff0						_ETUnaryNegate:
.9ff0		20 49 9f	jsr $9f49			jsr 	EvaluateTerm				; evaluate the term
.9ff3		20 c2 9d	jsr $9dc2			jsr 	Dereference 				; dereference it.
.9ff6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9ff8		29 10		and #$10			and 	#NSTString
.9ffa		d0 f1		bne $9fed			bne 	_ETTypeMismatch
.9ffc		4c 62 a5	jmp $a562			jmp 	NSMNegate  					; just toggles the sign bit.
.9fff						_ETDereference:
.9fff		20 49 9f	jsr $9f49			jsr 	EvaluateTerm				; evaluate the term
.a002		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a004		29 20		and #$20			and 	#NSBIsReference
.a006		f0 e5		beq $9fed			beq 	_ETTypeMismatch
.a008		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a00a		60		rts				rts
.a00b						_ETParenthesis:
.a00b		20 ff 9a	jsr $9aff			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a00e		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; check for )
.a011		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a012						VariableHandler:
.a012		b1 30		lda ($30),y			lda 	(codePtr),y
.a014		18		clc				clc
.a015		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a017		85 37		sta $37				sta 	zTemp0+1
.a019		c8		iny				iny
.a01a		b1 30		lda ($30),y			lda 	(codePtr),y
.a01c		85 36		sta $36				sta 	zTemp0
.a01e		c8		iny				iny
.a01f		18		clc				clc									; copy variable address+3 to mantissa
.a020		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a022		95 58		sta $58,x			sta 	NSMantissa0,x
.a024		a5 37		lda $37				lda 	zTemp0+1
.a026		69 00		adc #$00			adc 	#0
.a028		95 60		sta $60,x			sta 	NSMantissa1,x
.a02a		74 68		stz $68,x			stz 	NSMantissa2,x
.a02c		74 70		stz $70,x			stz 	NSMantissa3,x
.a02e		74 78		stz $78,x			stz 	NSExponent,x
.a030		5a		phy				phy
.a031		a0 02		ldy #$02			ldy 	#2 							; read type
.a033		b1 36		lda ($36),y			lda 	(zTemp0),y
.a035		7a		ply				ply
.a036		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a038		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a03a		95 50		sta $50,x			sta 	NSStatus,x
.a03c		29 04		and #$04			and 	#NSBIsArray
.a03e		d0 01		bne $a041			bne 	_VHArray
.a040		60		rts				rts
.a041						_VHArray:
.a041		e8		inx				inx
.a042		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a045		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a047		95 51		sta $51,x			sta 	NSStatus+1,x
.a049		b1 30		lda ($30),y			lda 	(codePtr),y
.a04b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a04d		d0 06		bne $a055			bne 	_VHNoSecondIndex
.a04f		c8		iny				iny 								; skip the comma
.a050		e8		inx				inx
.a051		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a054		ca		dex				dex
.a055						_VHNoSecondIndex:
.a055		ca		dex				dex 								; set X back.
.a056		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; and check the right bracket.
.a059		5a		phy				phy 								; save position
.a05a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a05c		85 3e		sta $3e				sta 	zaTemp
.a05e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a060		85 3f		sta $3f				sta 	zaTemp+1
.a062		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a064		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a066		f0 5d		beq $a0c5			beq 	_VHBadArray
.a068		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a06a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a06c		f0 02		beq $a070			beq 	_VHHas2Mask
.a06e		a9 ff		lda #$ff			lda 	#$FF
.a070						_VHHas2Mask:
.a070		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a072		f0 4c		beq $a0c0			beq 	_VHBadIndex
.a074		0a		asl a				asl 	a 							; carry will be set if a second index
.a075		90 08		bcc $a07f			bcc 	_VHCheckFirstIndex
.a077		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a079		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a07b		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a07d		90 41		bcc $a0c0			bcc 	_VHBadIndex
.a07f						_VHCheckFirstIndex:
.a07f		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a081		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a083		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a085		90 39		bcc $a0c0			bcc 	_VHBadIndex
.a087		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a089		64 37		stz $37				stz 	zTemp0+1
.a08b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a08d		30 0e		bmi $a09d			bmi 	_VHNoMultiply
.a08f		da		phx				phx
.a090		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a092		48		pha				pha
.a093		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a095		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a097		1a		inc a				inc 	a 							; add 1 for zero base
.a098		fa		plx				plx
.a099		20 4b a5	jsr $a54b			jsr 	Multiply8x8 				; calculate -> Z0
.a09c		fa		plx				plx
.a09d						_VHNoMultiply:
.a09d		18		clc				clc
.a09e		a5 36		lda $36				lda 	zTemp0
.a0a0		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0a2		85 36		sta $36				sta 	zTemp0
.a0a4		a5 37		lda $37				lda 	zTemp0+1
.a0a6		69 00		adc #$00			adc 	#0
.a0a8		85 37		sta $37				sta 	zTemp0+1
.a0aa		b5 50		lda $50,x			lda 	NSStatus,x
.a0ac		20 6b 88	jsr $886b			jsr 	ScaleByBaseType
.a0af		18		clc				clc
.a0b0		b2 3e		lda ($3e)			lda 	(zaTemp)
.a0b2		65 36		adc $36				adc 	zTemp0
.a0b4		95 58		sta $58,x			sta 	NSMantissa0,x
.a0b6		a0 01		ldy #$01			ldy 	#1
.a0b8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0ba		65 37		adc $37				adc 	zTemp0+1
.a0bc		95 60		sta $60,x			sta 	NSMantissa1,x
.a0be		7a		ply				ply 								; restore position
.a0bf		60		rts				rts
.a0c0						_VHBadIndex:
.a0c0		a9 17		lda #$17		lda	#23
.a0c2		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a0c5						_VHBadArray:
.a0c5		a9 18		lda #$18		lda	#24
.a0c7		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a0ca						AbsUnary:
.a0ca		fa		plx				plx 								; restore stack pos
.a0cb		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; get a float or int
.a0ce		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a0d1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a0d3		29 7f		and #$7f			and 	#$7F
.a0d5		95 50		sta $50,x			sta 	NSStatus,x
.a0d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a0d8						AllocUnary:
.a0d8		fa		plx				plx 								; restore stack pos
.a0d9		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger		; get bytes required.
.a0dc		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a0df		da		phx				phx 								; save X/Y
.a0e0		5a		phy				phy
.a0e1		8a		txa				txa 								; copy X into Y
.a0e2		a8		tay				tay
.a0e3		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a0e6		aa		tax				tax
.a0e7		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a0ea		20 f7 a0	jsr $a0f7			jsr 	AllocateXABytes 			; allocate memory
.a0ed		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a0f0		8a		txa				txa 	 							; typing is 16 bit integer.
.a0f1		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a0f4		7a		ply				ply
.a0f5		fa		plx				plx
.a0f6		60		rts				rts
.a0f7						AllocateXABytes:
.a0f7		5a		phy				phy
.a0f8		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a0fb		84 36		sty $36				sty 	zTemp0
.a0fd		5a		phy				phy
.a0fe		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.a101		84 37		sty $37				sty 	zTemp0+1
.a103		5a		phy				phy
.a104		18		clc				clc 								; add to low memory pointer
.a105		6d 0c 04	adc $040c			adc 	lowMemPtr
.a108		8d 0c 04	sta $040c			sta 	lowMemPtr
.a10b		8a		txa				txa
.a10c		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.a10f		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.a112		b0 2f		bcs $a143			bcs 	CISSMemory
.a114		20 35 a1	jsr $a135			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a117						_ClearMemory:
.a117		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.a11a		c5 36		cmp $36				cmp 	zTemp0
.a11c		d0 07		bne $a125			bne 	_CMClearNext
.a11e		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.a121		c5 37		cmp $37				cmp 	zTemp0+1
.a123		f0 0c		beq $a131			beq 	_CMExit
.a125						_CMClearNext:
.a125		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a127		92 36		sta ($36)			sta 	(zTemp0)
.a129		e6 36		inc $36				inc 	zTemp0
.a12b		d0 ea		bne $a117			bne 	_ClearMemory
.a12d		e6 37		inc $37				inc		zTemp0+1
.a12f		80 e6		bra $a117			bra 	_ClearMemory
.a131						_CMExit:
.a131		fa		plx				plx
.a132		68		pla				pla
.a133		7a		ply				ply
.a134		60		rts				rts
.a135						CheckIdentifierStringSpace:
.a135		48		pha				pha
.a136		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.a139		18		clc				clc
.a13a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a13c		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.a13f		b0 02		bcs $a143			bcs 	CISSMemory
.a141		68		pla				pla
.a142		60		rts				rts
.a143						CISSMemory:
.a143		a9 06		lda #$06		lda	#6
.a145		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a148						AscUnary:
.a148		fa		plx				plx 								; restore stack pos
.a149		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; get a string
.a14c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a14e		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte 					; ASC("") will return zero.
.a151		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a154		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a155						FracUnary:
.a155		fa		plx				plx 								; restore stack pos
.a156		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; get a float or int
.a159		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a15c		b5 50		lda $50,x			lda 	NSStatus,x
.a15e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a160		f0 04		beq $a166			beq 	_IUZero
.a162		20 10 9c	jsr $9c10			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a165		60		rts				rts
.a166						_IUZero:
.a166		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.a169		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a16a						IntUnary:
.a16a		fa		plx				plx 								; restore stack pos
.a16b		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; get a float or int
.a16e		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a171		b5 50		lda $50,x			lda 	NSStatus,x
.a173		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a175		f0 03		beq $a17a			beq 	_IUExit
.a177		20 68 9c	jsr $9c68			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a17a						_IUExit:
.a17a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a17b						LenUnary:
.a17b		fa		plx				plx 								; restore stack pos
.a17c		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; get a string
.a17f		5a		phy				phy
.a180		a0 00		ldy #$00			ldy 	#0 							; find length
.a182						_LenFind:
.a182		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a184		f0 06		beq $a18c			beq 	_LenExit
.a186		c8		iny				iny
.a187		d0 f9		bne $a182			bne 	_LenFind
.a189		4c 23 a7	jmp $a723			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a18c						_LenExit:
.a18c		98		tya				tya		 							; return length
.a18d		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.a190		7a		ply				ply
.a191		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a194		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a195						Unary_Min:
.a195		a9 01		lda #$01			lda 	#1
.a197		80 02		bra $a19b			bra 	UnaryMinMaxMain
.a199						Unary_Max:
.a199		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a19b						UnaryMinMaxMain:
.a19b		fa		plx				plx 								; get index on number stack
.a19c		48		pha				pha 								; save comparator
.a19d		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue 				; get the first value.
.a1a0						_UMMMLoop:
.a1a0		b1 30		lda ($30),y			lda 	(codePtr),y
.a1a2		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a1a4		f0 22		beq $a1c8			beq 	_UMMMDone
.a1a6		20 ea 95	jsr $95ea			jsr 	CheckComma 					; must be a comma
.a1a9		e8		inx				inx
.a1aa		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue
.a1ad		ca		dex				dex
.a1ae		20 83 a5	jsr $a583			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a1b1		e8		inx				inx
.a1b2		20 83 a5	jsr $a583			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a1b5		e8		inx				inx
.a1b6		20 b2 96	jsr $96b2			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a1b9		ca		dex				dex
.a1ba		ca		dex				dex
.a1bb		85 36		sta $36				sta 	zTemp0 						; save required result
.a1bd		68		pla				pla 								; get and save comparator
.a1be		48		pha				pha
.a1bf		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a1c1		d0 dd		bne $a1a0			bne 	_UMMMLoop
.a1c3		20 cb a1	jsr $a1cb			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a1c6		80 d8		bra $a1a0			bra 	_UMMMLoop
.a1c8						_UMMMDone:
.a1c8		68		pla				pla 								; throw the comparator
.a1c9		c8		iny				iny 								; skip )
.a1ca		60		rts				rts
.a1cb						ExpCopyAboveDown:
.a1cb		b5 51		lda $51,x			lda 	NSStatus+1,x
.a1cd		95 50		sta $50,x			sta 	NSStatus,x
.a1cf		b5 79		lda $79,x			lda 	NSExponent+1,x
.a1d1		95 78		sta $78,x			sta 	NSExponent,x
.a1d3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a1d5		95 58		sta $58,x			sta 	NSMantissa0,x
.a1d7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a1d9		95 60		sta $60,x			sta 	NSMantissa1,x
.a1db		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a1dd		95 68		sta $68,x			sta 	NSMantissa2,x
.a1df		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a1e1		95 70		sta $70,x			sta 	NSMantissa3,x
.a1e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1e4						Unary_Not:
.a1e4		fa		plx				plx
.a1e5		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; get integer
.a1e8		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a1eb		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; zero mantissa ?
.a1ee		f0 04		beq $a1f4			beq 	_NotZero
.a1f0		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.a1f3		60		rts				rts
.a1f4						_NotZero:
.a1f4		4c 68 96	jmp $9668			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a1f7						PeekByteUnary:
.a1f7		a9 01		lda #$01			lda 	#1
.a1f9		80 0a		bra $a205			bra 	PeekUnary
.a1fb						PeekWUnary:
.a1fb		a9 02		lda #$02			lda 	#2
.a1fd		80 06		bra $a205			bra 	PeekUnary
.a1ff						PeekLUnary:
.a1ff		a9 03		lda #$03			lda 	#3
.a201		80 02		bra $a205			bra 	PeekUnary
.a203						PeekDUnary:
.a203		a9 04		lda #$04			lda 	#4
.a205						PeekUnary:
.a205		fa		plx				plx 								; restore position.
.a206		48		pha				pha 								; save count to copy on stack
.a207		20 20 a5	jsr $a520			jsr		Evaluate16BitInteger 		; address as constant.
.a20a		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a20d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a20f		85 36		sta $36				sta 	zTemp0
.a211		b5 60		lda $60,x			lda 	NSMantissa1,x
.a213		85 37		sta $37				sta 	zTemp0+1
.a215		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; clear the result to zero.
.a218		68		pla				pla 								; count in zTemp2
.a219		85 3a		sta $3a				sta 	zTemp2
.a21b		da		phx				phx 								; save stack position and offset of read
.a21c		5a		phy				phy
.a21d		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a21f						_PULoop:
.a21f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a221		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a223		c8		iny				iny 								; next byte to write
.a224		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a225		18		clc				clc
.a226		69 08		adc #$08			adc 	#MathStackSize
.a228		aa		tax				tax
.a229		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a22b		d0 f2		bne $a21f			bne 	_PULoop
.a22d		7a		ply				ply 								; restore stack/code pos and exit.
.a22e		fa		plx				plx
.a22f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a230						Unary_Random:
.a230		fa		plx				plx
.a231		20 a2 a2	jsr $a2a2			jsr 	Random32Bit 				; get a random number
.a234		20 8b a2	jsr $a28b			jsr 	URCopyToMantissa  			; put in mantissa
.a237		b1 30		lda ($30),y			lda 	(codePtr),y
.a239		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a23b		f0 08		beq $a245			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a23d		e8		inx				inx
.a23e		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a241		ca		dex				dex
.a242		20 ba 97	jsr $97ba			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a245						_URNoModulus:
.a245		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a247		74 78		stz $78,x			stz 	NSExponent,x
.a249		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a24c		60		rts				rts
.a24d						Unary_Rnd:
.a24d		fa		plx				plx
.a24e		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; number to use.
.a251		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; closing bracket
.a254		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a257		f0 26		beq $a27f			beq 	_URCopySeed
.a259		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a25b		10 1f		bpl $a27c			bpl 	_URDontSeed
.a25d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a25f		49 17		eor #$17			eor 	#$17
.a261		8d 08 04	sta $0408			sta 	randomSeed+0
.a264		b5 60		lda $60,x			lda 	NSMantissa1,x
.a266		49 a5		eor #$a5			eor 	#$A5
.a268		8d 09 04	sta $0409			sta 	randomSeed+1
.a26b		b5 68		lda $68,x			lda 	NSMantissa2,x
.a26d		49 c2		eor #$c2			eor 	#$C2
.a26f		8d 0a 04	sta $040a			sta 	randomSeed+2
.a272		b5 70		lda $70,x			lda 	NSMantissa3,x
.a274		49 9d		eor #$9d			eor 	#$9D
.a276		8d 0b 04	sta $040b			sta 	randomSeed+3
.a279		20 a2 a2	jsr $a2a2			jsr 	Random32Bit
.a27c						_URDontSeed:
.a27c		20 a2 a2	jsr $a2a2			jsr 	Random32Bit 				; generate a number
.a27f						_URCopySeed:
.a27f		20 8b a2	jsr $a28b			jsr 	URCopyToMantissa 			; copy into mantissa
.a282		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a284		95 78		sta $78,x			sta 	NSExponent,x
.a286		a9 08		lda #$08			lda 	#NSTFloat
.a288		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a28a		60		rts				rts
.a28b						URCopyToMantissa:
.a28b		ad 08 04	lda $0408			lda 	randomSeed+0
.a28e		95 58		sta $58,x			sta 	NSMantissa0,x
.a290		ad 09 04	lda $0409			lda 	randomSeed+1
.a293		95 60		sta $60,x			sta 	NSMantissa1,x
.a295		ad 0a 04	lda $040a			lda 	randomSeed+2
.a298		95 68		sta $68,x			sta 	NSMantissa2,x
.a29a		ad 0b 04	lda $040b			lda 	randomSeed+3
.a29d		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a29f		95 70		sta $70,x			sta 	NSMantissa3,x
.a2a1		60		rts				rts
.a2a2						Random32Bit:
.a2a2		5a		phy				phy
.a2a3		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a2a5		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.a2a8		d0 03		bne $a2ad			bne 	_Random1
.a2aa		a8		tay				tay 								; if so do it 256 times
.a2ab		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a2ad						_Random1:
.a2ad		0a		asl a				asl 	a 							; LSFR RNG
.a2ae		2e 09 04	rol $0409			rol 	randomSeed+1
.a2b1		2e 0a 04	rol $040a			rol 	randomSeed+2
.a2b4		2e 0b 04	rol $040b			rol 	randomSeed+3
.a2b7		90 02		bcc $a2bb			bcc 	_Random2
.a2b9		49 c5		eor #$c5			eor 	#$C5
.a2bb						_Random2:
.a2bb		88		dey				dey
.a2bc		d0 ef		bne $a2ad			bne 	_Random1
.a2be		8d 08 04	sta $0408			sta 	randomSeed+0
.a2c1		7a		ply				ply
.a2c2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2c3						SgnUnary:
.a2c3		fa		plx				plx 								; restore stack pos
.a2c4		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber 				; get a float or int
.a2c7		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a2ca		20 c2 a5	jsr $a5c2			jsr 	NSMIsZero 					; if zero
.a2cd		f0 0e		beq $a2dd			beq 	_SGZero  					; return Int Zero
.a2cf		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a2d1		48		pha				pha
.a2d2		a9 01		lda #$01			lda 	#1 							; set to 1
.a2d4		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.a2d7		68		pla				pla
.a2d8		29 80		and #$80			and		#$80 						; copy the sign byte out
.a2da		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a2dc		60		rts				rts
.a2dd		20 a0 a5	jsr $a5a0	_SGZero:jsr 	NSMSetZero
.a2e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2e1						ValUnary:
.a2e1		fa		plx				plx 								; restore stack pos
.a2e2		20 f7 a2	jsr $a2f7			jsr 	ValMainCode 				; do the main val() code
.a2e5		b0 01		bcs $a2e8			bcs 	_VUError 					; couldn't convert
.a2e7		60		rts				rts
.a2e8						_VUError:
.a2e8		4c 28 a7	jmp $a728			jmp 	TypeError
.a2eb						IsValUnary:
.a2eb		fa		plx				plx 								; restore stack pos
.a2ec		20 f7 a2	jsr $a2f7			jsr 	ValMainCode 				; do the main val() code
.a2ef		b0 03		bcs $a2f4			bcs 	_VUBad
.a2f1		4c 68 96	jmp $9668			jmp 	ReturnTrue
.a2f4						_VUBad:
.a2f4		4c 73 96	jmp $9673			jmp 	ReturnFalse
.a2f7						ValMainCode:
.a2f7		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; get a string
.a2fa		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; check right bracket present
.a2fd						ValEvaluateZTemp0:
.a2fd		5a		phy				phy
.a2fe		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a300		f0 17		beq $a319			beq 	_VMCFail2
.a302		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a304		48		pha				pha 								; save first character
.a305		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a307		d0 01		bne $a30a			bne 	_VMCStart
.a309		c8		iny				iny 								; skip over -
.a30a						_VMCStart:
.a30a		38		sec				sec 								; initialise first time round.
.a30b						_VMCNext:
.a30b		c8		iny				iny 								; pre-increment
.a30c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a30e		f0 0c		beq $a31c			beq 	_VMCSuccess 				; successful.
.a310		20 45 9e	jsr $9e45			jsr 	EncodeNumber 				; send it to the number-builder
.a313		90 03		bcc $a318			bcc 	_VMCFail 					; if failed, give up.
.a315		18		clc				clc 								; next time round, countinue
.a316		80 f3		bra $a30b			bra 	_VMCNext
.a318						_VMCFail:
.a318		68		pla				pla
.a319						_VMCFail2:
.a319		7a		ply				ply
.a31a		38		sec				sec
.a31b		60		rts				rts
.a31c						_VMCSuccess:
.a31c		a9 00		lda #$00			lda 	#0 							; construct final
.a31e		20 45 9e	jsr $9e45			jsr 	EncodeNumber 				; by sending a duff value.
.a321		68		pla				pla 								; if it was -ve
.a322		c9 2d		cmp #$2d			cmp 	#"-"
.a324		d0 03		bne $a329			bne 	_VMCNotNegative
.a326		20 62 a5	jsr $a562			jsr		NSMNegate 					; negate it.
.a329						_VMCNotNegative:
.a329		7a		ply				ply
.a32a		18		clc				clc
.a32b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a32c						ChrUnary:
.a32c		fa		plx				plx 								; restore stack pos
.a32d		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a330		48		pha				pha
.a331		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a334		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a336		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.a339		68		pla				pla 								; write number to it
.a33a		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a33d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a33e						UnaryGetTime:
.a33e		a9 00		lda #$00			lda 	#0
.a340		80 02		bra $a344			bra 	UGDTMain
.a342						UnaryGetDate:
.a342		a9 03		lda #$03			lda 	#3
.a344						UGDTMain:
.a344		fa		plx				plx 								; get stack position back
.a345		48		pha				pha 								; save table offset
.a346		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger			; ignored parameter
.a349		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; closing )
.a34c		68		pla				pla 								; table offset in A
.a34d		5a		phy				phy 								; saving Y
.a34e		a8		tay				tay 								; table offset in Y
.a34f		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a351		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.a354		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a356		48		pha				pha
.a357		64 01		stz $01				stz 	1
.a359		20 6c a3	jsr $a36c			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a35c		20 67 a3	jsr $a367			jsr 	UGDTColonDigit
.a35f		20 67 a3	jsr $a367			jsr 	UGDTColonDigit
.a362		68		pla				pla 								; restore I/O select
.a363		85 01		sta $01				sta 	1
.a365		7a		ply				ply  								; restore code position
.a366		60		rts				rts
.a367						UGDTColonDigit:
.a367		a9 3a		lda #$3a			lda 	#':'
.a369		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a36c						UGDTDigit:
.a36c		da		phx				phx 								; save X
.a36d		b9 8c a3	lda $a38c,y			lda 	RTCROffset,y 				; get offset in RTC register
.a370		aa		tax				tax
.a371		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a374		39 92 a3	and $a392,y			and 	RTCRMask,y 					; and with Mask.
.a377		fa		plx				plx
.a378		48		pha				pha 								; output in BCD
.a379		4a		lsr a				lsr 	a
.a37a		4a		lsr a				lsr 	a
.a37b		4a		lsr a				lsr 	a
.a37c		4a		lsr a				lsr 	a
.a37d		09 30		ora #$30			ora 	#48
.a37f		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a382		68		pla				pla
.a383		29 0f		and #$0f			and 	#15
.a385		09 30		ora #$30			ora 	#48
.a387		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a38a		c8		iny				iny
.a38b		60		rts				rts
.a38c						RTCROffset:
>a38c		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a392						RTCRMask:
>a392		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a398						SpcUnary:
.a398		fa		plx				plx 								; restore stack pos
.a399		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger			; get value
.a39c		5a		phy				phy
.a39d		48		pha				pha 								; save count
.a39e		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.a3a1		7a		ply				ply 								; to do count in Y
.a3a2						_SpcLoop:
.a3a2		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a3a4		f0 08		beq $a3ae			beq 	_SpcExit
.a3a6		a9 20		lda #$20			lda 	#32
.a3a8		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a3ab		88		dey				dey
.a3ac		80 f4		bra $a3a2			bra 	_SpcLoop
.a3ae						_SpcExit:
.a3ae		7a		ply				ply
.a3af		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.a3b2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3b3						Unary_Str:
.a3b3		fa		plx				plx
.a3b4		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber  			; get number
.a3b7		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; closing bracket
.a3ba		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a3bc		20 d5 a3	jsr $a3d5			jsr 	ConvertNumberToString 		; do the conversion.
.a3bf		a9 21		lda #$21			lda		#33 						; create buffer
.a3c1		20 6f b7	jsr $b76f			jsr 	StringTempAllocate 			; allocate memory
.a3c4		da		phx				phx  								; copy the converted string into the buffer.
.a3c5		a2 00		ldx #$00			ldx 	#0
.a3c7						_USCopy:
.a3c7		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a3ca		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite
.a3cd		e8		inx				inx
.a3ce		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a3d1		d0 f4		bne $a3c7			bne 	_USCopy
.a3d3		fa		plx				plx
.a3d4		60		rts				rts
.a3d5						ConvertNumberToString:
.a3d5		5a		phy				phy 								; save code position
.a3d6		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.a3d9		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.a3dc		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a3de		10 09		bpl $a3e9			bpl 	_CNTSNotNegative
.a3e0		29 7f		and #$7f			and 	#$7F 						; make +ve
.a3e2		95 50		sta $50,x			sta 	NSStatus,x
.a3e4		a9 2d		lda #$2d			lda 	#"-"
.a3e6		20 4a a4	jsr $a44a			jsr 	WriteDecimalBuffer
.a3e9						_CNTSNotNegative:
.a3e9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a3eb		f0 12		beq $a3ff			beq 	_CNTSNotFloat
.a3ed		e8		inx				inx 								; round up so we don't get too many 6.999999
.a3ee		a9 01		lda #$01			lda 	#1
.a3f0		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.a3f3		ca		dex				dex
.a3f4		b5 78		lda $78,x			lda		NSExponent,x
.a3f6		95 79		sta $79,x			sta 	NSExponent+1,x
.a3f8		a9 08		lda #$08			lda 	#NSTFloat
.a3fa		95 51		sta $51,x			sta 	NSStatus+1,x
.a3fc		20 4a 9b	jsr $9b4a			jsr 	FloatAdd
.a3ff						_CNTSNotFloat:
.a3ff		20 2c a4	jsr $a42c			jsr 	MakePlusTwoString 			; do the integer part.
.a402		20 10 9c	jsr $9c10			jsr 	FloatFractionalPart 		; get the fractional part
.a405		20 c1 9c	jsr $9cc1			jsr 	NSNormalise					; normalise , exit if zero
.a408		f0 20		beq $a42a			beq 	_CNTSExit
.a40a		a9 2e		lda #$2e			lda 	#"."
.a40c		20 4a a4	jsr $a44a			jsr 	WriteDecimalBuffer 			; write decimal place
.a40f						_CNTSDecimal:
.a40f		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.a412		30 16		bmi $a42a			bmi 	_CNTSExit
.a414		e8		inx				inx 								; x 10.0
.a415		a9 0a		lda #$0a			lda 	#10
.a417		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.a41a		a9 08		lda #$08			lda 	#NSTFloat
.a41c		95 50		sta $50,x			sta 	NSStatus,x
.a41e		ca		dex				dex
.a41f		20 8f 9c	jsr $9c8f			jsr 	FloatMultiply
.a422		20 2c a4	jsr $a42c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a425		20 10 9c	jsr $9c10			jsr 	FloatFractionalPart 		; get the fractional part
.a428		80 e5		bra $a40f			bra 	_CNTSDecimal 				; keep going.
.a42a						_CNTSExit:
.a42a		7a		ply				ply
.a42b		60		rts				rts
.a42c						MakePlusTwoString:
.a42c		da		phx				phx
.a42d		20 83 a5	jsr $a583			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a430		e8		inx				inx 								; access it
.a431		e8		inx				inx
.a432		20 68 9c	jsr $9c68			jsr 	FloatIntegerPart 			; make it an integer
.a435		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a437		20 7a 9a	jsr $9a7a			jsr 	ConvertInt32
.a43a		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a43c						_MPTSCopy:
.a43c		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a43f		20 4a a4	jsr $a44a			jsr 	WriteDecimalBuffer
.a442		e8		inx				inx
.a443		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a446		d0 f4		bne $a43c			bne 	_MPTSCopy
.a448		fa		plx				plx
.a449		60		rts				rts
.a44a						WriteDecimalBuffer:
.a44a		da		phx				phx
.a44b		ae 15 04	ldx $0415			ldx 	dbOffset
.a44e		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.a451		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.a454		ee 15 04	inc $0415			inc 	dbOffset
.a457		fa		plx				plx
.a458		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a459						Unary_Left:
.a459		fa		plx				plx
.a45a		18		clc				clc 								; only one parameter
.a45b		20 be a4	jsr $a4be			jsr 	SubstringInitial 			; set up.
.a45e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a460		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a462		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a464		80 25		bra $a48b			bra 	SubstringMain
.a466						Unary_Right:
.a466		fa		plx				plx
.a467		18		clc				clc 								; only one parameter
.a468		20 be a4	jsr $a4be			jsr 	SubstringInitial 			; set up.
.a46b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a46d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a46f		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a471		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a473		b0 02		bcs $a477			bcs 	_URNotUnderflow
.a475		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a477						_URNotUnderflow:
.a477		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a479		80 10		bra $a48b			bra 	SubstringMain
.a47b						Unary_Mid:
.a47b		fa		plx				plx
.a47c		38		sec				sec 								; two parameters
.a47d		20 be a4	jsr $a4be			jsr 	SubstringInitial 			; set up.
.a480		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a482		f0 04		beq $a488			beq 	_UMError
.a484		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a486		80 03		bra $a48b			bra 	SubstringMain
.a488						_UMError:
.a488		4c 2d a7	jmp $a72d			jmp 	ArgumentError
.a48b						SubstringMain:
.a48b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a48d		d5 78		cmp $78,x			cmp 	NSExponent,x
.a48f		b0 27		bcs $a4b8			bcs 	_SSMNull 					; if so, return an empty string.
.a491		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a493		f0 23		beq $a4b8			beq 	_SSMNull 					; return empty string.
.a495		18		clc				clc 								; add the offset +1 to the address and
.a496		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a498		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a49a		85 36		sta $36				sta 	zTemp0
.a49c		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a49e		69 00		adc #$00			adc 	#0
.a4a0		85 37		sta $37				sta 	zTemp0+1
.a4a2						_SSMNoCarry:
.a4a2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a4a4		20 6f b7	jsr $b76f			jsr 	StringTempAllocate 			; allocate that many characters
.a4a7		5a		phy				phy 								; save Y
.a4a8		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a4aa						_SSMCopy:
.a4aa		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a4ac		f0 08		beq $a4b6			beq 	_SSMEString 				; no more to copy
.a4ae		20 a8 b7	jsr $b7a8			jsr 	StringTempWrite 			; and write it out.
.a4b1		c8		iny				iny
.a4b2		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a4b4		d0 f4		bne $a4aa			bne 	_SSMCopy
.a4b6						_SSMEString:
.a4b6		7a		ply				ply
.a4b7						_SSMExit:
.a4b7		60		rts				rts
.a4b8						_SSMNull:
.a4b8		a9 00		lda #$00			lda 	#0
.a4ba		20 6f b7	jsr $b76f			jsr 	StringTempAllocate
.a4bd		60		rts				rts
.a4be						SubstringInitial:
.a4be		da		phx				phx 								; save initial stack position
.a4bf		08		php				php 								; save carry on stack indicating 2 parameters
.a4c0		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; get a string
.a4c3		5a		phy				phy 								; calculate length to exponent.
.a4c4		a0 ff		ldy #$ff			ldy 	#$FF
.a4c6						_SIFindLength:
.a4c6		c8		iny				iny
.a4c7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c9		d0 fb		bne $a4c6			bne 	_SIFindLength
.a4cb		98		tya				tya
.a4cc		95 78		sta $78,x			sta 	NSExponent,x
.a4ce		7a		ply				ply
.a4cf		e8		inx				inx
.a4d0		20 ea 95	jsr $95ea			jsr 	CheckComma 					; comma next
.a4d3		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get next parameter
.a4d6		28		plp				plp 								; is it the last parameter ?
.a4d7		90 07		bcc $a4e0			bcc 	_SSIExit 					; if so, exit.
.a4d9		e8		inx				inx
.a4da		20 ea 95	jsr $95ea			jsr 	CheckComma 					; comma next
.a4dd		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get last parameter
.a4e0						_SSIExit:
.a4e0		fa		plx				plx
.a4e1		20 e2 95	jsr $95e2			jsr 	CheckRightBracket 			; check closing bracket
.a4e4		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a4e5						EvaluateValue:
.a4e5		48		pha				pha
.a4e6		20 ff 9a	jsr $9aff			jsr		EvaluateExpression 			; expression
.a4e9		20 c2 9d	jsr $9dc2			jsr 	Dereference					; derefernce it
.a4ec		68		pla				pla
.a4ed		60		rts				rts
.a4ee						EvaluateNumber:
.a4ee		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue 				; get a value
.a4f1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a4f3		29 10		and #$10			and 	#NSBIsString
.a4f5		d0 13		bne $a50a			bne 	HelperTypeError
.a4f7		60		rts				rts
.a4f8						EvaluateString:
.a4f8		20 e5 a4	jsr $a4e5			jsr 	EvaluateValue 				; get a value
.a4fb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a4fd		29 10		and #$10			and 	#NSBIsString
.a4ff		f0 09		beq $a50a			beq 	HelperTypeError
.a501						CopyAddressToTemp0:
.a501		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a503		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a505		b5 60		lda $60,x			lda 	NSMantissa1,x
.a507		85 37		sta $37				sta 	zTemp0+1
.a509		60		rts				rts
.a50a						HelperTypeError:
.a50a		4c 28 a7	jmp $a728			jmp 	TypeError
.a50d						EvaluateInteger:
.a50d		20 ee a4	jsr $a4ee			jsr 	EvaluateNumber
.a510		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a512		d0 09		bne $a51d			bne 	HelperValueError 			; if not, it's a float.
.a514		60		rts				rts
.a515						EvaluateUnsignedInteger:
.a515		20 0d a5	jsr $a50d			jsr 	EvaluateInteger 			; check integer is +ve
.a518		b5 50		lda $50,x			lda 	NSStatus,x
.a51a		30 01		bmi $a51d			bmi 	HelperValueError
.a51c		60		rts				rts
.a51d						HelperValueError:
.a51d		4c 2d a7	jmp $a72d			jmp 	ArgumentError
.a520						Evaluate16BitInteger:
.a520		20 15 a5	jsr $a515			jsr	 	EvaluateUnsignedInteger		; get integer
.a523		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a525		15 68		ora $68,x			ora 	NSMantissa2,x
.a527		d0 f4		bne $a51d			bne 	HelperValueError
.a529		60		rts				rts
.a52a						Evaluate16BitIntegerSigned:
.a52a		20 0d a5	jsr $a50d			jsr	 	EvaluateInteger				; get integer
.a52d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a52f		15 68		ora $68,x			ora 	NSMantissa2,x
.a531		d0 ea		bne $a51d			bne 	HelperValueError
.a533		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a535		10 03		bpl $a53a			bpl 	_EISNotSigned
.a537		20 69 a5	jsr $a569			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a53a						_EISNotSigned:
.a53a		60		rts				rts
.a53b						Evaluate8BitInteger:
.a53b		20 15 a5	jsr $a515			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a53e		d0 dd		bne $a51d			bne 	HelperValueError
.a540		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a542		15 68		ora $68,x			ora 	NSMantissa2,x
.a544		15 60		ora $60,x			ora 	NSMantissa1,x
.a546		d0 d5		bne $a51d			bne 	HelperValueError
.a548		b5 58		lda $58,x			lda 	NSMantissa0,x
.a54a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a54b						Multiply8x8:
.a54b		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a54c		85 36		sta $36			  	sta 	zTemp0
.a54e		86 37		stx $37				stx 	zTemp0+1
.a550		a9 00		lda #$00			lda 	#0
.a552		a2 08		ldx #$08			ldx 	#8
.a554						_M88Loop:
.a554		90 03		bcc $a559			bcc 	_M88NoAdd
.a556		18		clc				clc
.a557		65 37		adc $37				adc 	zTemp0+1
.a559						_M88NoAdd:
.a559		6a		ror a				ror 	a
.a55a		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a55c		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a55d		d0 f5		bne $a554			bne 	_M88Loop
.a55f		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a561		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a562						NSMNegate:
.a562		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a564		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a566		95 50		sta $50,x			sta 	NSStatus,x
.a568		60		rts				rts
.a569						NSMNegateMantissa:
.a569		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a56a		a9 00		lda #$00			lda 	#0
.a56c		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a56e		95 58		sta $58,x			sta 	NSMantissa0,x
.a570		a9 00		lda #$00			lda 	#0
.a572		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a574		95 60		sta $60,x			sta 	NSMantissa1,x
.a576		a9 00		lda #$00			lda 	#0
.a578		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a57a		95 68		sta $68,x			sta 	NSMantissa2,x
.a57c		a9 00		lda #$00			lda 	#0
.a57e		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a580		95 70		sta $70,x			sta 	NSMantissa3,x
.a582		60		rts				rts
.a583						NSMShiftUpTwo:
.a583		b5 58		lda $58,x			lda 	NSMantissa0,x
.a585		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a587		b5 60		lda $60,x			lda 	NSMantissa1,x
.a589		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a58b		b5 68		lda $68,x			lda 	NSMantissa2,x
.a58d		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a58f		b5 70		lda $70,x			lda 	NSMantissa3,x
.a591		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a593		b5 78		lda $78,x			lda 	NSExponent,x
.a595		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a597		b5 50		lda $50,x			lda 	NSStatus,x
.a599		95 52		sta $52,x			sta 	NSStatus+2,x
.a59b		60		rts				rts
.a59c						NSMSetZeroMantissaOnly:
.a59c		a9 00		lda #$00			lda 	#0
.a59e		80 06		bra $a5a6			bra 	NSMSetMantissa
.a5a0						NSMSetZero:
.a5a0		a9 00		lda #$00			lda 	#0
.a5a2						NSMSetByte:
.a5a2		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a5a4		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a5a6						NSMSetMantissa:
.a5a6		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a5a8		74 60		stz $60,x			stz 	NSMantissa1,x
.a5aa		74 68		stz $68,x			stz 	NSMantissa2,x
.a5ac		74 70		stz $70,x			stz 	NSMantissa3,x
.a5ae		60		rts				rts
.a5af						NSMShiftLeft:
.a5af		18		clc				clc
.a5b0						NSMRotateLeft:
.a5b0		36 58		rol $58,x			rol 	NSMantissa0,x
.a5b2		36 60		rol $60,x			rol		NSMantissa1,x
.a5b4		36 68		rol $68,x			rol		NSMantissa2,x
.a5b6		36 70		rol $70,x			rol		NSMantissa3,x
.a5b8		60		rts				rts
.a5b9						NSMShiftRight:
.a5b9		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a5bb		76 68		ror $68,x			ror		NSMantissa2,x
.a5bd		76 60		ror $60,x			ror		NSMantissa1,x
.a5bf		76 58		ror $58,x			ror		NSMantissa0,x
.a5c1		60		rts				rts
.a5c2						NSMIsZero:
.a5c2		b5 70		lda $70,x			lda 	NSMantissa3,x
.a5c4		15 68		ora $68,x			ora		NSMantissa2,x
.a5c6		15 60		ora $60,x			ora		NSMantissa1,x
.a5c8		15 58		ora $58,x			ora		NSMantissa0,x
.a5ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a5cb						TickHandler:
.a5cb		5a		phy				phy 								; need to preserve Y
.a5cc		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a5cf		7a		ply				ply
.a5d0		60		rts				rts
.0776						LastTick:
>0776								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a5d1						Assemble_ora:
.a5d1		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5d4		01					.byte $01
.a5d5						Assemble_and:
.a5d5		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5d8		21					.byte $21
.a5d9						Assemble_eor:
.a5d9		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5dc		41					.byte $41
.a5dd						Assemble_adc:
.a5dd		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5e0		61					.byte $61
.a5e1						Assemble_sta:
.a5e1		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5e4		81					.byte $81
.a5e5						Assemble_lda:
.a5e5		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5e8		a1					.byte $a1
.a5e9						Assemble_cmp:
.a5e9		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5ec		c1					.byte $c1
.a5ed						Assemble_sbc:
.a5ed		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a5f0		e1					.byte $e1
.a5f1						Assemble_asl:
.a5f1		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5f4		02					.byte $02
>a5f5		75					.byte $75
.a5f6						Assemble_rol:
.a5f6		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5f9		22					.byte $22
>a5fa		75					.byte $75
.a5fb						Assemble_lsr:
.a5fb		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5fe		42					.byte $42
>a5ff		75					.byte $75
.a600						Assemble_ror:
.a600		20 86 82	jsr $8286		jsr	AssembleGroup2
>a603		62					.byte $62
>a604		75					.byte $75
.a605						Assemble_stx:
.a605		20 86 82	jsr $8286		jsr	AssembleGroup2
>a608		82					.byte $82
>a609		50					.byte $50
.a60a						Assemble_ldx:
.a60a		20 86 82	jsr $8286		jsr	AssembleGroup2
>a60d		a2					.byte $a2
>a60e		d0					.byte $d0
.a60f						Assemble_dec:
.a60f		20 86 82	jsr $8286		jsr	AssembleGroup2
>a612		c2					.byte $c2
>a613		55					.byte $55
.a614						Assemble_inc:
.a614		20 86 82	jsr $8286		jsr	AssembleGroup2
>a617		e2					.byte $e2
>a618		55					.byte $55
.a619						Assemble_stz:
.a619		20 86 82	jsr $8286		jsr	AssembleGroup2
>a61c		60					.byte $60
>a61d		44					.byte $44
.a61e						Assemble_bit:
.a61e		20 86 82	jsr $8286		jsr	AssembleGroup2
>a621		20					.byte $20
>a622		55					.byte $55
.a623						Assemble_sty:
.a623		20 86 82	jsr $8286		jsr	AssembleGroup2
>a626		80					.byte $80
>a627		54					.byte $54
.a628						Assemble_ldy:
.a628		20 86 82	jsr $8286		jsr	AssembleGroup2
>a62b		a0					.byte $a0
>a62c		d5					.byte $d5
.a62d						Assemble_cpy:
.a62d		20 86 82	jsr $8286		jsr	AssembleGroup2
>a630		c0					.byte $c0
>a631		d4					.byte $d4
.a632						Assemble_cpx:
.a632		20 86 82	jsr $8286		jsr	AssembleGroup2
>a635		e0					.byte $e0
>a636		d0					.byte $d0
.a637						Assemble_tsb:
.a637		20 86 82	jsr $8286		jsr	AssembleGroup2
>a63a		00					.byte $00
>a63b		50					.byte $50
.a63c						Assemble_trb:
.a63c		20 86 82	jsr $8286		jsr	AssembleGroup2
>a63f		10					.byte $10
>a640		50					.byte $50
.a641						Assemble_jsr:
.a641		20 86 82	jsr $8286		jsr	AssembleGroup2
>a644		14					.byte $14
>a645		10					.byte $10
.a646						Assemble_jmp:
.a646		20 86 82	jsr $8286		jsr	AssembleGroup2
>a649		40					.byte $40
>a64a		10					.byte $10
.a64b						Assemble_bpl:
.a64b		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a64e		10					.byte $10
.a64f						Assemble_bmi:
.a64f		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a652		30					.byte $30
.a653						Assemble_bvc:
.a653		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a656		50					.byte $50
.a657						Assemble_bvs:
.a657		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a65a		70					.byte $70
.a65b						Assemble_bcc:
.a65b		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a65e		90					.byte $90
.a65f						Assemble_bcs:
.a65f		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a662		b0					.byte $b0
.a663						Assemble_bne:
.a663		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a666		d0					.byte $d0
.a667						Assemble_beq:
.a667		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a66a		f0					.byte $f0
.a66b						Assemble_bra:
.a66b		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a66e		80					.byte $80
.a66f						Assemble_brk:
.a66f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a672		00					.byte $00
.a673						Assemble_php:
.a673		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a676		08					.byte $08
.a677						Assemble_clc:
.a677		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a67a		18					.byte $18
.a67b						Assemble_plp:
.a67b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a67e		28					.byte $28
.a67f						Assemble_sec:
.a67f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a682		38					.byte $38
.a683						Assemble_rti:
.a683		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a686		40					.byte $40
.a687						Assemble_pha:
.a687		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a68a		48					.byte $48
.a68b						Assemble_cli:
.a68b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a68e		58					.byte $58
.a68f						Assemble_phy:
.a68f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a692		5a					.byte $5a
.a693						Assemble_rts:
.a693		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a696		60					.byte $60
.a697						Assemble_pla:
.a697		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a69a		68					.byte $68
.a69b						Assemble_sei:
.a69b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a69e		78					.byte $78
.a69f						Assemble_ply:
.a69f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6a2		7a					.byte $7a
.a6a3						Assemble_dey:
.a6a3		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6a6		88					.byte $88
.a6a7						Assemble_txa:
.a6a7		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6aa		8a					.byte $8a
.a6ab						Assemble_tya:
.a6ab		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ae		98					.byte $98
.a6af						Assemble_txs:
.a6af		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6b2		9a					.byte $9a
.a6b3						Assemble_tay:
.a6b3		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6b6		a8					.byte $a8
.a6b7						Assemble_tax:
.a6b7		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ba		aa					.byte $aa
.a6bb						Assemble_clv:
.a6bb		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6be		b8					.byte $b8
.a6bf						Assemble_tsx:
.a6bf		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6c2		ba					.byte $ba
.a6c3						Assemble_iny:
.a6c3		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6c6		c8					.byte $c8
.a6c7						Assemble_dex:
.a6c7		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ca		ca					.byte $ca
.a6cb						Assemble_cld:
.a6cb		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ce		d8					.byte $d8
.a6cf						Assemble_phx:
.a6cf		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6d2		da					.byte $da
.a6d3						Assemble_stp:
.a6d3		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6d6		db					.byte $db
.a6d7						Assemble_inx:
.a6d7		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6da		e8					.byte $e8
.a6db						Assemble_nop:
.a6db		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6de		ea					.byte $ea
.a6df						Assemble_sed:
.a6df		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6e2		f8					.byte $f8
.a6e3						Assemble_plx:
.a6e3		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6e6		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a6e7						DecimalScalarTable:
>a6e7		66 66 66 66				.dword $66666666 ; 0.1
>a6eb		de					.byte $de
>a6ec		1f 85 eb 51				.dword $51eb851f ; 0.01
>a6f0		db					.byte $db
>a6f1		4c 37 89 41				.dword $4189374c ; 0.001
>a6f5		d8					.byte $d8
>a6f6		ac 8b db 68				.dword $68db8bac ; 0.0001
>a6fa		d4					.byte $d4
>a6fb		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a6ff		d1					.byte $d1
>a700		83 de 1b 43				.dword $431bde83 ; 1e-06
>a704		ce					.byte $ce
>a705		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a709		ca					.byte $ca
>a70a		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a70e		c7					.byte $c7
>a70f		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a713		c4					.byte $c4
>a714		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a718		c0					.byte $c0
>a719		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a71d		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a71e						SyntaxError:
.a71e		a9 02		lda #$02		lda	#2
.a720		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a723						RangeError:
.a723		a9 04		lda #$04		lda	#4
.a725		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a728						TypeError:
.a728		a9 05		lda #$05		lda	#5
.a72a		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a72d						ArgumentError:
.a72d		a9 07		lda #$07		lda	#7
.a72f		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a732						NotDoneError:
.a732		a9 0c		lda #$0c		lda	#12
.a734		4c fb 95	jmp $95fb		jmp	ErrorHandler
.a737						ErrorText:
>a737		42 72 65 61 6b 00			.text	"Break",0
>a73d		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a745		72 72 6f 72 00
>a74a		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a752		20 62 79 20 7a 65 72 6f 00
>a75b		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a763		61 6e 67 65 00
>a768		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a770		6d 61 74 63 68 00
>a776		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a77e		65 6d 6f 72 79 00
>a784		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a78c		61 72 67 75 6d 65 6e 74 00
>a795		53 74 6f 70 00				.text	"Stop",0
>a79a		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a7a2		6f 6f 20 6c 6f 6e 67 00
>a7aa		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a7b2		6e 20 66 61 69 6c 65 64 00
>a7bb		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a7c3		61 74 61 00
>a7c7		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a7cf		65 6e 74 65 64 00
>a7d5		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a7dd		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a7e9		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a7f1		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a7fe		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a806		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a813		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a81b		68 6f 75 74 20 57 68 69 6c 65 00
>a826		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a82e		68 6f 75 74 20 46 6f 72 00
>a837		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a83f		61 63 6b 20 66 75 6c 6c 00
>a848		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a850		75 63 74 75 72 65 00
>a857		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a85f		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a86c		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a874		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a882		41 72 72 61 79 20 73 69			.text	"Array size",0
>a88a		7a 65 00
>a88d		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a895		79 20 69 6e 64 65 78 00
>a89d		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a8a5		74 20 64 65 63 6c 61 72 65 64 00
>a8b0		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a8b8		20 66 6f 75 6e 64 00
>a8bf		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a8c7		65 72 72 6f 72 00
>a8cd		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a8d5		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc5b		09 09 31 31 2f 30 31 2f			.text 9,9,"11/01/23 27"
>dc63		32 33 20 32 37

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a8db						RectangleCommand:
.a8db		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a8dd		80 02		bra $a8e1			bra 	ShapeDrawCmd
.a8df						CircleCommand:
.a8df		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a8e1						ShapeDrawCmd:
.a8e1		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a8e4						ShapeDraw:
.a8e4		0d 78 07	ora $0778			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a8e7		4c 5f a9	jmp $a95f			jmp 	ExecuteGraphicCommand	 	; and complete
.a8ea						SpriteCommand:
.a8ea		a2 00		ldx #$00			ldx 	#0
.a8ec		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get image number.
.a8ef		5a		phy				phy
.a8f0		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a8f2		a6 58		ldx $58				ldx 	NSMantissa0
.a8f4		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a8f6		b0 0d		bcs $a905			bcs 	_SCRange
.a8f8		a0 ff		ldy #$ff			ldy 	#255
.a8fa		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8fd		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a8ff		7a		ply				ply
.a900		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a903		80 5a		bra $a95f			bra 	ExecuteGraphicCommand
.a905						_SCRange:
.a905		4c 23 a7	jmp $a723			jmp 	RangeError
.a908						ImageCommand:
.a908		a2 00		ldx #$00			ldx 	#0
.a90a		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get image number.
.a90d		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a910						ImageRunDraw:
.a910		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a912		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a915		ad 7e 07	lda $077e			lda 	gxDrawScale
.a918		0a		asl a				asl 	a
.a919		0a		asl a				asl 	a
.a91a		0a		asl a				asl 	a
.a91b		a8		tay				tay
.a91c		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a91e		a6 58		ldx $58				ldx 	NSMantissa0
.a920		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a923		60		rts				rts
.a924						TextCommand:
.a924		a2 00		ldx #$00			ldx 	#0
.a926		20 f8 a4	jsr $a4f8			jsr 	EvaluateString 				; get text
.a929		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a92c						TextRunDraw:
.a92c		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a92e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a931		a0 00		ldy #$00			ldy 	#0
.a933						_IRDLoop:
.a933		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a935		85 37		sta $37				sta 	zTemp0+1
.a937		a5 58		lda $58				lda 	NSMantissa0
.a939		85 36		sta $36				sta 	zTemp0
.a93b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a93d		f0 13		beq $a952			beq 	_IRDExit
.a93f		5a		phy				phy									; save string pos
.a940		48		pha				pha 								; save char
.a941		ad 7e 07	lda $077e			lda 	gxDrawScale 				; get scale
.a944		0a		asl a				asl 	a
.a945		0a		asl a				asl 	a
.a946		0a		asl a				asl 	a
.a947		a8		tay				tay
.a948		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a94a		fa		plx				plx 								; char to draw
.a94b		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a94e		7a		ply				ply 								; restore string pos
.a94f		c8		iny				iny
.a950		90 e1		bcc $a933			bcc 	_IRDLoop 					; go back if no error.
.a952						_IRDExit:
.a952		60		rts				rts
.a953						PlotCommand:
.a953		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a955		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a958		80 05		bra $a95f			bra 	ExecuteGraphicCommand
.a95a						LineCommand:
.a95a		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a95c		20 6b a9	jsr $a96b			jsr 	RunGraphicsCommand
.a95f						ExecuteGraphicCommand:
.a95f		0d 77 07	ora $0777			ora 	gxCommandID 				; make a full command
.a962		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.a965		b0 01		bcs $a968			bcs 	_EGCError
.a967		60		rts				rts
.a968						_EGCError:
.a968		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.a96b						RunGraphicsCommand:
.a96b		8d 77 07	sta $0777			sta 	gxCommandID					; save TODO graphics command.
.a96e		68		pla				pla 								; pop handler address
.a96f		fa		plx				plx
.a970		1a		inc a				inc 	a
.a971		d0 01		bne $a974			bne 	_RGINoCarry
.a973		e8		inx				inx
.a974						_RGINoCarry:
.a974		8d 7c 07	sta $077c			sta 	gxHandler
.a977		8e 7d 07	stx $077d			stx 	gxHandler+1
.a97a						_RGICommandLoop:
.a97a		b1 30		lda ($30),y			lda 	(codePtr),y
.a97c		c8		iny				iny
.a97d		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a97f		f0 53		beq $a9d4			beq 	_RGI_To
.a981		c9 c2		cmp #$c2			cmp 	#KWD_HERE 					; do it here.
.a983		f0 55		beq $a9da			beq 	_RGI_Here
.a985		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a987		f0 3d		beq $a9c6			beq 	_RGI_Exit
.a989		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a98b		f0 39		beq $a9c6			beq 	_RGI_Exit
.a98d		c9 ca		cmp #$ca			cmp 	#KWD_OUTLINE 				; solid or outline
.a98f		f0 3e		beq $a9cf			beq 	_RGI_Frame
.a991		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a993		f0 33		beq $a9c8			beq 	_RGI_Solid
.a995		c9 b6		cmp #$b6			cmp 	#KWD_BY 					; by offset
.a997		f0 4b		beq $a9e4			beq 	_RGI_By
.a999		c9 c0		cmp #$c0			cmp 	#KWD_FROM 					; from
.a99b		f0 17		beq $a9b4			beq 	_RGI_Move2
.a99d		c9 bd		cmp #$bd			cmp 	#KWD_DIM 					; dim (set scale)
.a99f		f0 62		beq $aa03			beq 	_RGI_Dim
.a9a1		c9 bb		cmp #$bb			cmp 	#KWD_COLOUR 				; colour or Color
.a9a3		f0 74		beq $aa19			beq 	_RGI_Colour
.a9a5		c9 ba		cmp #$ba			cmp 	#KWD_COLOR
.a9a7		f0 70		beq $aa19			beq 	_RGI_Colour
.a9a9		ae 77 07	ldx $0777			ldx 	gxCommandID
.a9ac		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a9ae		d0 03		bne $a9b3			bne 	_RGI_Move 					; move
.a9b0		4c 41 aa	jmp $aa41			jmp		_RGI_SpriteInstructions
.a9b3						_RGI_Move:
.a9b3		88		dey				dey 								; unpick get.
.a9b4						_RGI_Move2:
.a9b4		20 67 aa	jsr $aa67			jsr 	GCGetCoordinatePair 		; move to here
.a9b7		20 8e aa	jsr $aa8e			jsr 	GCCopyPairToStore 			; save
.a9ba		5a		phy				phy
.a9bb		20 84 aa	jsr $aa84			jsr 	GCLoadAXY 					; load in
.a9be		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a9c0		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9c3		7a		ply				ply
.a9c4		80 b4		bra $a97a			bra 	_RGICommandLoop 			; and go round
.a9c6						_RGI_Exit:
.a9c6		88		dey				dey 								; unpick : / EOL
.a9c7		60		rts				rts
.a9c8						_RGI_Solid:
.a9c8		a9 02		lda #$02			lda 	#2
.a9ca		8d 78 07	sta $0778			sta 	gxFillSolid
.a9cd		80 ab		bra $a97a			bra 	_RGICommandLoop
.a9cf						_RGI_Frame:
.a9cf		9c 78 07	stz $0778			stz 	gxFillSolid
.a9d2		80 a6		bra $a97a			bra 	_RGICommandLoop
.a9d4						_RGI_To:
.a9d4		20 67 aa	jsr $aa67			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a9d7		20 8e aa	jsr $aa8e			jsr 	GCCopyPairToStore
.a9da						_RGI_Here:
.a9da		5a		phy				phy
.a9db		20 84 aa	jsr $aa84			jsr 	GCLoadAXY 					; load it into AXY
.a9de		20 3e aa	jsr $aa3e			jsr 	_RGICallHandler 			; go do whatever it is.
.a9e1		7a		ply				ply
.a9e2		80 96		bra $a97a			bra 	_RGICommandLoop 			; and go round
.a9e4						_RGI_By:
.a9e4		20 74 aa	jsr $aa74			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a9e7		18		clc				clc
.a9e8		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a9ea		6d 79 07	adc $0779			adc 	gxXPos
.a9ed		8d 79 07	sta $0779			sta 	gxXPos
.a9f0		a5 61		lda $61				lda 	NSMantissa1+1
.a9f2		6d 7a 07	adc $077a			adc 	gxXPos+1
.a9f5		8d 7a 07	sta $077a			sta 	gxXPos+1
.a9f8		a5 5a		lda $5a				lda 	NSMantissa0+2
.a9fa		18		clc				clc
.a9fb		6d 7b 07	adc $077b			adc 	gxYPos
.a9fe		8d 7b 07	sta $077b			sta 	gxYPos
.aa01		80 d7		bra $a9da			bra 	_RGI_Here
.aa03						_RGI_Dim:
.aa03		a2 01		ldx #$01			ldx	 	#1
.aa05		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.aa08		a5 59		lda $59				lda 	NSMantissa0+1
.aa0a		c9 00		cmp #$00			cmp 	#0
.aa0c		f0 2d		beq $aa3b			beq 	_RGIRange
.aa0e		c9 09		cmp #$09			cmp 	#8+1
.aa10		b0 29		bcs $aa3b			bcs		_RGIRange
.aa12		3a		dec a				dec 	a
.aa13		8d 7e 07	sta $077e			sta 	gxDrawScale
.aa16		4c 7a a9	jmp $a97a			jmp 	_RGICommandLoop
.aa19						_RGI_Colour:
.aa19		a2 01		ldx #$01			ldx 	#1 							; colour
.aa1b		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.aa1e		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.aa20		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.aa23		b1 30		lda ($30),y			lda 	(codePtr),y
.aa25		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.aa27		d0 04		bne $aa2d			bne 	_RGICDefaultMode
.aa29		c8		iny				iny
.aa2a		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.aa2d						_RGICDefaultMode:
.aa2d		5a		phy				phy
.aa2e		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.aa30		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa32		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa34		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa37		7a		ply				ply
.aa38		4c 7a a9	jmp $a97a			jmp 	_RGICommandLoop 			; and go round
.aa3b						_RGIRange:
.aa3b		4c 23 a7	jmp $a723			jmp 	RangeError
.aa3e						_RGICallHandler:
.aa3e		6c 7c 07	jmp ($077c)			jmp 	(gxHandler)
.aa41						_RGI_SpriteInstructions:
.aa41		c9 c8		cmp #$c8			cmp 	#KWD_OFF
.aa43		f0 07		beq $aa4c			beq 	_RGISpriteOff
.aa45		c9 c3		cmp #$c3			cmp 	#KWD_IMAGE
.aa47		f0 13		beq $aa5c			beq 	_RGISetImage
.aa49		4c b3 a9	jmp $a9b3			jmp 	_RGI_Move
.aa4c						_RGISpriteOff:
.aa4c		5a		phy				phy
.aa4d		a0 01		ldy #$01			ldy 	#1
.aa4f		a2 00		ldx #$00			ldx 	#0
.aa51						_RGIDoCommandLoop:
.aa51		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.aa53		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa56		7a		ply				ply
.aa57		b0 e2		bcs $aa3b			bcs 	_RGIRange
.aa59		4c 7a a9	jmp $a97a			jmp 	_RGICommandLoop
.aa5c						_RGISetImage:
.aa5c		a2 01		ldx #$01			ldx 	#1
.aa5e		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger
.aa61		5a		phy				phy
.aa62		aa		tax				tax
.aa63		a0 00		ldy #$00			ldy 	#0
.aa65		80 ea		bra $aa51			bra 	_RGIDoCommandLoop
.aa67						GCGetCoordinatePair:
.aa67		a2 01		ldx #$01			ldx 	#1
.aa69		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.aa6c		20 ea 95	jsr $95ea			jsr 	CheckComma
.aa6f		e8		inx				inx
.aa70		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.aa73		60		rts				rts
.aa74						GCSignedCoordinatePair:
.aa74		a2 01		ldx #$01			ldx 	#1
.aa76		20 2a a5	jsr $a52a			jsr 	Evaluate16BitIntegerSigned
.aa79		20 ea 95	jsr $95ea			jsr 	CheckComma
.aa7c		e8		inx				inx
.aa7d		20 2a a5	jsr $a52a			jsr 	Evaluate16BitIntegerSigned
.aa80		60		rts				rts
.aa81						_GCCPRange:
.aa81		4c 23 a7	jmp $a723			jmp 	RangeError
.aa84						GCLoadAXY:
.aa84		ad 7a 07	lda $077a			lda 	gxXPos+1
.aa87		ae 79 07	ldx $0779			ldx 	gxXPos
.aa8a		ac 7b 07	ldy $077b			ldy 	gxYPos
.aa8d		60		rts				rts
.aa8e						GCCopyPairToStore:
.aa8e		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aa90		8d 79 07	sta $0779			sta 	gxXPos
.aa93		a5 61		lda $61				lda 	NSMantissa1+1
.aa95		8d 7a 07	sta $077a			sta 	gxXPos+1
.aa98		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa9a		8d 7b 07	sta $077b			sta 	gxYPos
.aa9d		60		rts				rts
.0777						gxCommandID:
>0777								.fill 	1
.0778						gxFillSolid:
>0778								.fill 	1
.0779						gxXPos:
>0779								.fill 	2
.077b						gxYPos:
>077b								.fill 	1
.077c						gxHandler:
>077c								.fill 	2
.077e						gxDrawScale:
>077e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.aa9e						BitmapCtrl:
.aa9e		b1 30		lda ($30),y			lda 	(codePtr),y
.aaa0		c8		iny				iny
.aaa1		a2 01		ldx #$01			ldx 	#1
.aaa3		c9 c9		cmp #$c9			cmp 	#KWD_ON
.aaa5		f0 11		beq $aab8			beq 	BitmapSwitch
.aaa7		ca		dex				dex
.aaa8		c9 c8		cmp #$c8			cmp 	#KWD_OFF
.aaaa		f0 0c		beq $aab8			beq 	BitmapSwitch
.aaac		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get the colour
.aaaf		5a		phy				phy
.aab0		aa		tax				tax
.aab1		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.aab3		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aab6		7a		ply				ply
.aab7		60		rts				rts
.aab8						BitmapSwitch:
.aab8		5a		phy				phy
.aab9		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.aabb		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.aabd		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aac0		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.aac2		a0 00		ldy #$00			ldy 	#0
.aac4		a2 ff		ldx #$ff			ldx 	#$FF
.aac6		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aac9		9c 78 07	stz $0778			stz 	gxFillSolid
.aacc		9c 79 07	stz $0779			stz 	gxXPos
.aacf		9c 7a 07	stz $077a			stz 	gxXPos+1
.aad2		9c 7b 07	stz $077b			stz 	gxYPos
.aad5		9c 7e 07	stz $077e			stz 	gxDrawScale
.aad8		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.aada		a2 00		ldx #$00			ldx 	#0
.aadc		a0 00		ldy #$00			ldy 	#0
.aade		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aae1		7a		ply				ply
.aae2		60		rts				rts
.aae3						SpritesCtrl:
.aae3		b1 30		lda ($30),y			lda 	(codePtr),y
.aae5		c8		iny				iny
.aae6		a2 01		ldx #$01			ldx 	#1
.aae8		c9 c9		cmp #$c9			cmp 	#KWD_ON
.aaea		f0 08		beq $aaf4			beq 	SpriteSwitch
.aaec		ca		dex				dex
.aaed		c9 c8		cmp #$c8			cmp 	#KWD_OFF
.aaef		f0 03		beq $aaf4			beq 	SpriteSwitch
.aaf1		4c 1e a7	jmp $a71e			jmp 	SyntaxError
.aaf4						SpriteSwitch:
.aaf4		5a		phy				phy
.aaf5		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aaf7		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.aaf9		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aafc		7a		ply				ply
.aafd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.aafe						GfxCommand:
.aafe		a2 00		ldx #$00			ldx 	#0
.ab00		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; command
.ab03		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab06		e8		inx				inx
.ab07		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; X
.ab0a		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab0d		e8		inx				inx
.ab0e		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; Y
.ab11		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.ab13		4a		lsr a				lsr 	a
.ab14		d0 12		bne $ab28			bne 	_GfxError
.ab16		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.ab18		b0 0e		bcs $ab28			bcs 	_GfxError 					; bit 7 should have been zero
.ab1a		5a		phy				phy 								; save pos
.ab1b		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.ab1d		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab1f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab21		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab24		b0 02		bcs $ab28			bcs 	_GfxError
.ab26		7a		ply				ply 								; restore pos and exit.
.ab27		60		rts				rts
.ab28						_GfxError:
.ab28		4c 23 a7	jmp $a723			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.ab2b						UnaryHit:
.ab2b		fa		plx				plx
.ab2c		a9 36		lda #$36			lda 	#zTemp0
.ab2e		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.ab31		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab34		e8		inx				inx
.ab35		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ab38		20 e2 95	jsr $95e2			jsr		CheckRightBracket
.ab3b		ca		dex				dex 								; fix back up again.
.ab3c		da		phx				phx 								; save X/Y
.ab3d		5a		phy				phy
.ab3e		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ab40		b5 58		lda $58,x			lda 	NSMantissa0,x
.ab42		aa		tax				tax
.ab43		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ab45		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.ab48		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ab49		7a		ply				ply 								; restore XY
.ab4a		fa		plx				plx
.ab4b		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte 					; return the hit result
.ab4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.ab4f						PaletteCommand:
.ab4f		a2 00		ldx #$00			ldx 	#0
.ab51		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; colour
.ab54		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab57		e8		inx				inx
.ab58		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; r
.ab5b		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab5e		e8		inx				inx
.ab5f		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; g
.ab62		20 ea 95	jsr $95ea			jsr 	CheckComma
.ab65		e8		inx				inx
.ab66		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; b
.ab69		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.ab6b		85 36		sta $36				sta 	zTemp0
.ab6d		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.ab6f		85 37		sta $37				sta 	zTemp0+1
.ab71		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.ab73		26 37		rol $37				rol	 	zTemp0+1
.ab75		06 36		asl $36				asl 	zTemp0
.ab77		26 37		rol $37				rol	 	zTemp0+1
.ab79		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.ab7b		85 01		sta $01				sta 	1
.ab7d		5a		phy				phy
.ab7e		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.ab80		92 36		sta ($36)			sta 	(zTemp0)
.ab82		a0 01		ldy #$01			ldy 	#1
.ab84		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab86		91 36		sta ($36),y			sta 	(zTemp0),y
.ab88		a5 59		lda $59				lda 	NSMantissa0+1
.ab8a		c8		iny				iny
.ab8b		91 36		sta ($36),y			sta 	(zTemp0),y
.ab8d		7a		ply				ply
.ab8e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.ab8f						XLoadCommand:
.ab8f		20 79 8f	jsr $8f79			jsr 	NewProgram
.ab92		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.ab95		4c ad 85	jmp $85ad			jmp 	WarmStart
.ab98						XGoCommand:
.ab98		20 79 8f	jsr $8f79			jsr 	NewProgram
.ab9b		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.ab9e		4c f7 90	jmp $90f7			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.aba1						UnaryEvent:
.aba1		fa		plx				plx
.aba2		20 3b ac	jsr $ac3b			jsr 	TimerToStackX 				; timer in +0
.aba5		e8		inx				inx  								; put reference into +1
.aba6		20 49 9f	jsr $9f49			jsr 	EvaluateTerm
.aba9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.abab		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.abad		d0 4c		bne $abfb			bne 	_UEType
.abaf		e8		inx				inx 								; put the step in +2
.abb0		20 ea 95	jsr $95ea			jsr 	CheckComma
.abb3		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger
.abb6		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.abb9		ca		dex				dex
.abba		ca		dex				dex
.abbb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.abbd		85 36		sta $36				sta 	zTemp0
.abbf		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.abc1		85 37		sta $37				sta 	zTemp0+1
.abc3		5a		phy				phy
.abc4		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.abc6		b1 36		lda ($36),y			lda 	(zTemp0),y
.abc8		30 2d		bmi $abf7			bmi 	_UEFalse 					; exit if signed.
.abca		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.abcc		b5 58		lda $58,x			lda 	NSMantissa0,x
.abce		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.abd0		c8		iny				iny
.abd1		b5 60		lda $60,x			lda 	NSMantissa1,x
.abd3		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abd5		c8		iny				iny
.abd6		b5 68		lda $68,x			lda 	NSMantissa2,x
.abd8		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abda		90 1b		bcc $abf7			bcc 	_UEFalse 					; no, return FALSE.
.abdc		18		clc				clc
.abdd		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.abdf		b5 58		lda $58,x			lda 	NSMantissa0,x
.abe1		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.abe3		91 36		sta ($36),y			sta 	(zTemp0),y
.abe5		c8		iny				iny
.abe6		b5 60		lda $60,x			lda 	NSMantissa1,x
.abe8		75 62		adc $62,x			adc 	NSMantissa1+2,x
.abea		91 36		sta ($36),y			sta 	(zTemp0),y
.abec		c8		iny				iny
.abed		b5 68		lda $68,x			lda 	NSMantissa2,x
.abef		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.abf1		91 36		sta ($36),y			sta 	(zTemp0),y
.abf3		7a		ply				ply
.abf4		4c 68 96	jmp $9668			jmp 	ReturnTrue
.abf7						_UEFalse:
.abf7		7a		ply				ply 								; restore Y
.abf8		4c 73 96	jmp $9673			jmp 	ReturnFalse 				; and return False
.abfb						_UEType:
.abfb		4c 28 a7	jmp $a728			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.abfe						UnaryJoyX:
.abfe		18		clc				clc
.abff		80 01		bra $ac02			bra 	JoyMain
.ac01						UnaryJoyY:
.ac01		38		sec				sec
.ac02						JoyMain:
.ac02		fa		plx				plx 								; get pos
.ac03		08		php				php 								; save carry (set for Y)
.ac04		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ac07		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.ac0a		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.ac0d		28		plp				plp
.ac0e		b0 02		bcs $ac12			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.ac10		4a		lsr a				lsr 	a
.ac11		4a		lsr a				lsr 	a
.ac12						_JMNoShift:
.ac12		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ac13		b0 07		bcs $ac1c			bcs 	JMIsLeft
.ac15		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ac16		b0 07		bcs $ac1f			bcs 	JMIsRight
.ac18		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; zero result
.ac1b		60		rts				rts
.ac1c						JMIsLeft:
.ac1c		4c 68 96	jmp $9668			jmp 	ReturnTrue
.ac1f						JMIsRight:
.ac1f		a9 01		lda #$01			lda 	#1
.ac21		20 a2 a5	jsr $a5a2			jsr 	NSMSetByte
.ac24		60		rts				rts
.ac25						UnaryJoyB:
.ac25		fa		plx				plx 								; get pos
.ac26		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ac29		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.ac2c		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.ac2f		29 10		and #$10			and 	#$10
.ac31		d0 e9		bne $ac1c			bne 	JMIsLeft
.ac33		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero
.ac36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ac37						UnaryTimer:
.ac37		fa		plx				plx
.ac38		20 e2 95	jsr $95e2			jsr 	CheckRightBracket
.ac3b						TimerToStackX:
.ac3b		20 a0 a5	jsr $a5a0			jsr 	NSMSetZero 					; zero result
.ac3e		64 01		stz $01				stz 	1 							; access I/O
.ac40		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ac43		95 58		sta $58,x			sta 	NSMantissa0,x
.ac45		ad 5a d6	lda $d65a			lda 	$D65A
.ac48		95 60		sta $60,x			sta 	NSMantissa1,x
.ac4a		ad 5b d6	lda $d65b			lda 	$D65B
.ac4d		95 68		sta $68,x			sta 	NSMantissa2,x
.ac4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		80 fe		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ac50						MemoryDeleteLine:
.ac50		20 6f ac	jsr $ac6f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac53		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ac55		a8		tay				tay
.ac56						_MDDLLoop:
.ac56		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac58		92 30		sta ($30)			sta 	(codePtr)
.ac5a		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac5c		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ac5e		d0 07		bne $ac67			bne 	_MDLDLNext
.ac60		a5 31		lda $31				lda 	codePtr+1
.ac62		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac64		d0 01		bne $ac67			bne 	_MDLDLNext
.ac66						_MDDLExit:
.ac66		60		rts				rts
.ac67						_MDLDLNext:
.ac67		e6 30		inc $30				inc 	codePtr						; next byte
.ac69		d0 eb		bne $ac56			bne 	_MDDLLoop
.ac6b		e6 31		inc $31				inc 	codePtr+1
.ac6d		80 e7		bra $ac56			bra 	_MDDLLoop
.ac6f						IMemoryFindEnd:
.ac6f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac71		85 3a		sta $3a				sta 	0+zTemp2
.ac73		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac75		85 3b		sta $3b				sta 	1+zTemp2
.ac77						_MDLFELoop:
.ac77		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ac79		f0 0b		beq $ac86			beq 	_MDLFEExit
.ac7b		18		clc				clc
.ac7c		65 3a		adc $3a				adc 	zTemp2
.ac7e		85 3a		sta $3a				sta 	zTemp2
.ac80		90 f5		bcc $ac77			bcc 	_MDLFELoop
.ac82		e6 3b		inc $3b				inc 	zTemp2+1
.ac84		80 f1		bra $ac77			bra 	_MDLFELoop
.ac86						_MDLFEExit:
.ac86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.ac87						MemoryInsertLine:
.ac87		08		php				php
.ac88		20 6f ac	jsr $ac6f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac8b		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ac8d		1a		inc a				inc 	a
.ac8e		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ac90		b0 36		bcs $acc8			bcs 	_MDLIError 					; no, fail.
.ac92		28		plp				plp 								; do at a specific point or the end ?
.ac93		90 08		bcc $ac9d			bcc 	_MDLIFound 					; if specific point already set.
.ac95		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ac97		85 30		sta $30				sta 	codePtr 					; end.
.ac99		a5 3b		lda $3b				lda 	zTemp2+1
.ac9b		85 31		sta $31				sta 	codePtr+1
.ac9d						_MDLIFound:
.ac9d		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aca0		a8		tay				tay
.aca1						_MDLIInsert:
.aca1		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.aca3		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aca5		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.aca7		c5 3a		cmp $3a				cmp 	zTemp2
.aca9		d0 06		bne $acb1			bne 	_MDLINext
.acab		a5 31		lda $31				lda 	codePtr+1
.acad		c5 3b		cmp $3b				cmp 	zTemp2+1
.acaf		f0 0a		beq $acbb			beq 	_MDLIHaveSpace
.acb1						_MDLINext:
.acb1		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.acb3		d0 02		bne $acb7			bne 	_MDLINoBorrow
.acb5		c6 3b		dec $3b				dec 	zTemp2+1
.acb7						_MDLINoBorrow:
.acb7		c6 3a		dec $3a				dec 	zTemp2
.acb9		80 e6		bra $aca1			bra 	_MDLIInsert
.acbb						_MDLIHaveSpace:
.acbb		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.acbe		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.acbf						_MDLICopy:
.acbf		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.acc2		91 30		sta ($30),y			sta 	(codePtr),y
.acc4		88		dey				dey
.acc5		10 f8		bpl $acbf			bpl 	_MDLICopy
.acc7		60		rts				rts
.acc8						_MDLIError:
.acc8		a9 06		lda #$06		lda	#6
.acca		4c fb 95	jmp $95fb		jmp	ErrorHandler
.accd						MDLAppendLine:
.accd		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.accf		85 36		sta $36				sta 	zTemp0
.acd1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acd3		85 38		sta $38				sta 	0+zTemp1
.acd5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acd7		85 39		sta $39				sta 	1+zTemp1
.acd9		b2 38		lda ($38)			lda 	(zTemp1)
.acdb		d0 0a		bne $ace7			bne 	_MDLANoInitialise
.acdd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acdf		8d 7f 07	sta $077f			sta 	0+AppendPointer
.ace2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ace4		8d 80 07	sta $0780			sta 	1+AppendPointer
.ace7						_MDLANoInitialise:
.ace7		18		clc				clc
.ace8		ad 7f 07	lda $077f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.aceb		85 38		sta $38				sta 	zTemp1
.aced		72 36		adc ($36)			adc 	(zTemp0)
.acef		8d 7f 07	sta $077f			sta 	AppendPointer
.acf2		ad 80 07	lda $0780			lda 	AppendPointer+1
.acf5		85 39		sta $39				sta 	zTemp1+1
.acf7		69 00		adc #$00			adc 	#0
.acf9		8d 80 07	sta $0780			sta 	AppendPointer+1
.acfc		a0 00		ldy #$00			ldy 	#0
.acfe						_MDLACopy:
.acfe		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ad00		91 38		sta ($38),y			sta 	(zTemp1),y
.ad02		c8		iny				iny
.ad03		98		tya				tya
.ad04		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ad06		d0 f6		bne $acfe			bne 	_MDLACopy
.ad08		a9 00		lda #$00			lda 	#0 							; end of program.
.ad0a		91 38		sta ($38),y			sta 	(zTemp1),y
.ad0c		60		rts				rts
.077f						AppendPointer:
>077f								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ad0d						MemoryNew:
.ad0d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad0f		85 30		sta $30				sta 	codePtr
.ad11		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad13		85 31		sta $31				sta 	codePtr+1
.ad15		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ad17		92 30		sta ($30)			sta 	(codePtr)
.ad19		60		rts				rts
.ad1a						MemoryInline:
.ad1a		98		tya				tya 								; put address into stack,x
.ad1b		18		clc				clc  								; get the offset, add codePtr
.ad1c		65 30		adc $30				adc 	codePtr
.ad1e		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ad20		a5 31		lda $31				lda 	codePtr+1
.ad22		69 00		adc #$00			adc 	#0
.ad24		95 60		sta $60,x			sta 	NSMantissa1,x
.ad26		74 68		stz $68,x			stz 	NSMantissa2,x
.ad28		74 70		stz $70,x			stz 	NSMantissa3,x
.ad2a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ad2b						MemorySearch:
.ad2b		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ad2d		86 37		stx $37				stx 	zTemp0+1
.ad2f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad31		85 30		sta $30				sta 	codePtr
.ad33		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad35		85 31		sta $31				sta 	codePtr+1
.ad37						_MTAXLoop:
.ad37		b2 30		lda ($30)			lda 	(codePtr)
.ad39		18		clc				clc
.ad3a		f0 21		beq $ad5d			beq 	_MTAXExit 					; reached end, exit with CC.
.ad3c		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ad3e		b1 30		lda ($30),y			lda 	(codePtr),y
.ad40		38		sec				sec
.ad41		e5 36		sbc $36				sbc 	zTemp0
.ad43		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ad45		c8		iny				iny 								; do the MSB
.ad46		b1 30		lda ($30),y			lda 	(codePtr),y
.ad48		e5 37		sbc $37				sbc 	zTemp0+1
.ad4a		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ad4c		f0 0f		beq $ad5d			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ad4e		b0 0d		bcs $ad5d			bcs 	_MTAXExit 					; current < required exit
.ad50		18		clc				clc
.ad51		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ad53		65 30		adc $30				adc 	codePtr
.ad55		85 30		sta $30				sta 	codePtr
.ad57		90 02		bcc $ad5b			bcc 	_CREExit
.ad59		e6 31		inc $31				inc 	codePtr+1 					; carry
.ad5b						_CREExit:
.ad5b		80 da		bra $ad37			bra 	_MTAXLoop
.ad5d						_MTAXExit:
.ad5d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ad5e						UpdateFont:
.ad5e		a5 01		lda $01				lda 	1 							; save position
.ad60		48		pha				pha
.ad61		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ad63		85 01		sta $01				sta 	1
.ad65		a9 8c		lda #$8c			lda 	#((FontBinary) & $FF)
.ad67		85 36		sta $36				sta 	0+zTemp0
.ad69		a9 ad		lda #$ad			lda 	#((FontBinary) >> 8)
.ad6b		85 37		sta $37				sta 	1+zTemp0
.ad6d		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ad6f		85 38		sta $38				sta 	0+zTemp1
.ad71		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ad73		85 39		sta $39				sta 	1+zTemp1
.ad75						_UFCopy1:
.ad75		a0 00		ldy #$00			ldy 	#0
.ad77						_UFCopy2:
.ad77		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad79		91 38		sta ($38),y			sta 	(zTemp1),y
.ad7b		c8		iny				iny
.ad7c		d0 f9		bne $ad77			bne 	_UFCopy2
.ad7e		e6 37		inc $37				inc 	zTemp0+1
.ad80		e6 39		inc $39				inc 	zTemp1+1
.ad82		a5 39		lda $39				lda 	zTemp1+1
.ad84		c9 c8		cmp #$c8			cmp 	#$C8
.ad86		d0 ed		bne $ad75			bne 	_UFCopy1
.ad88		68		pla				pla 								; restore.
.ad89		85 01		sta $01				sta 	1
.ad8b		60		rts				rts
.ad8c						FontBinary:
>ad8c		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>ad94		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>ada4		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>adb4		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>adc4		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>add4		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>ade4		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>adf4		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>ae04		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>ae14		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>ae24		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>ae34		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>ae44		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>ae54		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ae64		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>ae74		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>ae84		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>ae94		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aea4		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aeb4		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aec4		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>aed4		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>aee4		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>aef4		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>af04		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>af14		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>af24		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>af34		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>af44		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>af54		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>af64		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>af74		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>af84		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>af94		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>afa4		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>afb4		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>afc4		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>afd4		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>afe4		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aff4		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b004		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b014		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b024		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b034		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b044		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b054		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b064		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b074		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b084		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b094		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b0a4		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b0b4		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b0c4		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b0d4		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b0e4		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b0f4		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b104		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b114		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b124		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b134		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b144		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b154		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b164		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b174		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b184		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b194		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b1a4		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b1b4		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b1c4		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b1d4		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b1e4		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b1f4		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b204		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b214		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b224		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b234		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b244		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b254		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b264		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b274		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b284		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b294		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b2a4		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b2b4		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b2c4		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b2d4		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b2e4		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b2f4		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b304		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b314		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b324		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b334		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b344		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b354		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b364		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b374		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b384		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b394		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b3a4		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b3b4		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b3c4		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b3d4		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b3e4		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b3f4		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b404		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b414		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b424		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b434		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b444		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b454		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b464		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b474		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b484		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b494		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b4a4		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b4b4		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b4c4		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b4d4		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b4e4		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b4f4		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b504		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b514		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b524		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b534		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b544		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b554		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b564		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b574		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b584		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b58c						PingCommand:
.b58c		5a		phy				phy 								; save pos
.b58d		a9 01		lda #$01			lda 	#1 						; push channel.
.b58f		48		pha				pha
.b590		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b592		a2 06		ldx #$06			ldx 	#6 						; length
.b594		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b596		80 24		bra $b5bc			bra 	SoundEffectCommand
.b598						ZapCommand:
.b598		5a		phy				phy 								; save pos
.b599		a9 01		lda #$01			lda 	#1 						; push channel.
.b59b		48		pha				pha
.b59c		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b59e		a2 0a		ldx #$0a			ldx 	#10 						; length
.b5a0		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b5a2		80 18		bra $b5bc			bra 	SoundEffectCommand
.b5a4						ShootCommand:
.b5a4		5a		phy				phy 								; save pos
.b5a5		a9 03		lda #$03			lda 	#3 						; push channel.
.b5a7		48		pha				pha
.b5a8		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b5aa		a2 04		ldx #$04			ldx 	#4 						; length
.b5ac		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b5ae		80 0c		bra $b5bc			bra 	SoundEffectCommand
.b5b0						Explode:
.b5b0		5a		phy				phy 								; save pos
.b5b1		a9 03		lda #$03			lda 	#3 						; push channel.
.b5b3		48		pha				pha
.b5b4		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b5b6		a2 0a		ldx #$0a			ldx 	#10 						; length
.b5b8		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b5ba		80 00		bra $b5bc			bra 	SoundEffectCommand
.b5bc						SoundEffectCommand:
.b5bc		8d 81 07	sta $0781			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b5bf		9c 82 07	stz $0782			stz 	SoundCommandBlock+1
.b5c2		a9 0f		lda #$0f			lda 	#15
.b5c4		8d 83 07	sta $0783			sta 	SoundCommandBlock+2
.b5c7		8e 84 07	stx $0784			stx 	SoundCommandBlock+3
.b5ca		8c 85 07	sty $0785			sty 	SoundCommandBlock+4
.b5cd		9c 86 07	stz $0786			stz 	SoundCommandBlock+5
.b5d0		68		pla				pla
.b5d1		09 10		ora #$10			ora 	#$10  						; execute command $11
.b5d3		a2 81		ldx #$81			ldx 	#(SoundCommandBlock & $FF)
.b5d5		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b5d7		20 3f 80	jsr $803f			jsr 	SNDCommand
.b5da		7a		ply				ply
.b5db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b5dc						UnaryPlaying:
.b5dc		fa		plx				plx
.b5dd		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; get channel #
.b5e0		48		pha				pha
.b5e1		20 e2 95	jsr $95e2			jsr		CheckRightBracket
.b5e4		68		pla				pla
.b5e5		c9 04		cmp #$04			cmp 	#4
.b5e7		b0 0c		bcs $b5f5			bcs 	_UPNotPlaying
.b5e9		09 20		ora #$20			ora 	#$20 						; query playing ?
.b5eb		20 3f 80	jsr $803f			jsr 	SNDCommand
.b5ee		c9 00		cmp #$00			cmp 	#0
.b5f0		f0 03		beq $b5f5			beq 	_UPNotPlaying
.b5f2		4c 68 96	jmp $9668			jmp 	ReturnTrue
.b5f5						_UPNotPlaying:
.b5f5		4c 73 96	jmp $9673			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b5f8						SoundCommand:
.b5f8		b1 30		lda ($30),y			lda 	(codePtr),y
.b5fa		c9 c8		cmp #$c8			cmp 	#KWD_OFF 					; SOUND OFF ?
.b5fc		d0 09		bne $b607			bne 	_SNDMain
.b5fe		c8		iny				iny 								; skip OFF
.b5ff		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b601		5a		phy				phy
.b602		20 3f 80	jsr $803f			jsr 	SNDCommand
.b605		7a		ply				ply
.b606		60		rts				rts
.b607						_SNDMain:
.b607		a2 00		ldx #$00			ldx 	#0
.b609		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; channel
.b60c		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b60e		b0 4b		bcs $b65b			bcs 	_SndError
.b610		e8		inx				inx 								; do the rest in slot 1.
.b611		20 ea 95	jsr $95ea			jsr 	CheckComma
.b614		20 20 a5	jsr $a520			jsr 	Evaluate16BitInteger 		; Pitch
.b617		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b619		c9 10		cmp #$10			cmp 	#16
.b61b		b0 3e		bcs $b65b			bcs 	_SndError
.b61d		8d 82 07	sta $0782			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b620		b5 58		lda $58,x			lda 	NSMantissa0,x
.b622		8d 81 07	sta $0781			sta 	SoundCommandBlock
.b625		20 ea 95	jsr $95ea			jsr 	CheckComma
.b628		20 3b a5	jsr $a53b			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b62b		8d 84 07	sta $0784			sta 	SoundCommandBlock+3
.b62e		a9 0f		lda #$0f			lda 	#15
.b630		8d 83 07	sta $0783			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b633		9c 85 07	stz $0785			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b636		9c 86 07	stz $0786			stz 	SoundCommandBlock+5
.b639		b1 30		lda ($30),y			lda 	(codePtr),y
.b63b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b63d		d0 0e		bne $b64d			bne 	_SNDPlay
.b63f		c8		iny				iny
.b640		20 2a a5	jsr $a52a			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b643		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b645		8d 85 07	sta $0785			sta 	SoundCommandBlock+4
.b648		b5 60		lda $60,x			lda 	NSMantissa1,x
.b64a		8d 86 07	sta $0786			sta 	SoundCommandBlock+5
.b64d						_SNDPlay:
.b64d		5a		phy				phy
.b64e		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b650		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b652		a2 81		ldx #$81			ldx 	#(SoundCommandBlock & $FF)
.b654		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b656		20 3f 80	jsr $803f			jsr 	SNDCommand
.b659		7a		ply				ply
.b65a		60		rts				rts
.b65b						_SndError:
.b65b		4c 23 a7	jmp $a723			jmp 	RangeError
.0781						SoundCommandBlock:
>0781								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b65e						StackPushByte:
.b65e		48		pha				pha 								; save byte on stack
.b65f		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b661		d0 08		bne $b66b			bne 	_SPBNoBorrow
.b663		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b665		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b667		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b669		90 06		bcc $b671			bcc 	_SPBMemory
.b66b						_SPBNoBorrow:
.b66b		c6 34		dec $34				dec 	basicStack
.b66d		68		pla				pla 								; get back and write
.b66e		92 34		sta ($34)			sta 	(basicStack)
.b670		60		rts				rts
.b671						_SPBMemory:
.b671		a9 12		lda #$12		lda	#18
.b673		4c fb 95	jmp $95fb		jmp	ErrorHandler
.b676						StackPopByte:
.b676		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b678		e6 34		inc $34				inc 	basicStack
.b67a		d0 02		bne $b67e			bne 	_SPBNoCarry
.b67c		e6 35		inc $35				inc 	basicStack+1
.b67e						_SPBNoCarry:
.b67e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b67f						StackOpen:
.b67f		48		pha				pha 								; save frame byte
.b680		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b682		0a		asl a				asl 	a 							; claim twice this for storage
.b683		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b685		38		sec				sec 								; so basically subtracting from
.b686		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b688		85 34		sta $34				sta 	basicStack
.b68a		b0 09		bcs $b695			bcs 	_SONoBorrow
>b68c		db						.byte 	$DB 						; causes a break in the emulator
.b68d		c6 35		dec $35				dec 	basicStack+1
.b68f		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b691		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b693		90 04		bcc $b699			bcc 	_SOMemory
.b695						_SONoBorrow:
.b695		68		pla				pla 								; get marker back and write at TOS
.b696		92 34		sta ($34)			sta 	(basicStack)
.b698		60		rts				rts
.b699						_SOMemory:
.b699		a9 12		lda #$12		lda	#18
.b69b		4c fb 95	jmp $95fb		jmp	ErrorHandler
.b69e						StackClose:
.b69e		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b6a0		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b6a2		0a		asl a				asl 	a 							; claim twice this.
.b6a3		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b6a5		85 34		sta $34				sta 	basicStack
.b6a7		90 02		bcc $b6ab			bcc 	_SCExit
.b6a9		e6 35		inc $35				inc 	basicStack+1
.b6ab						_SCExit:
.b6ab		60		rts				rts
.b6ac						StackCheckFrame:
.b6ac		48		pha				pha
.b6ad						_StackRemoveLocals:
.b6ad		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b6af		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b6b1		b0 05		bcs $b6b8			bcs 	_SCNoLocal
.b6b3		20 18 8e	jsr $8e18			jsr 	LocalPopValue 				; restore the local value
.b6b6		80 f5		bra $b6ad			bra 	_StackRemoveLocals 			; gr round again
.b6b8						_SCNoLocal:
.b6b8		68		pla				pla 								; get the frame check.
.b6b9		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b6bb		29 f0		and #$f0			and 	#$F0 						; check type bits
.b6bd		d0 01		bne $b6c0			bne 	_SCFError 					; different, we have structures mixed up
.b6bf		60		rts				rts
.b6c0						_SCFError:
.b6c0		8a		txa				txa 								; report error X
.b6c1		4c fb 95	jmp $95fb			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b6c4						STKSaveCodePosition:
.b6c4		5a		phy				phy
.b6c5		98		tya				tya 								; save Y
.b6c6		a0 05		ldy #$05			ldy 	#5
.b6c8		91 34		sta ($34),y			sta 	(basicStack),y
.b6ca		88		dey				dey 								; save Code Pointer
.b6cb						_STKSaveLoop:
.b6cb		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b6ce		91 34		sta ($34),y			sta 	(basicStack),y
.b6d0		88		dey				dey
.b6d1		d0 f8		bne $b6cb			bne 	_STKSaveLoop
.b6d3		7a		ply				ply
.b6d4		60		rts				rts
.b6d5						STKLoadCodePosition:
.b6d5		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b6d7						_STKLoadLoop:
.b6d7		b1 34		lda ($34),y			lda 	(basicStack),y
.b6d9		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b6dc		c8		iny				iny
.b6dd		c0 05		cpy #$05			cpy 	#5
.b6df		d0 f6		bne $b6d7			bne 	_STKLoadLoop
.b6e1		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b6e3		a8		tay				tay
.b6e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b6e5						StackReset:
.b6e5		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b6e7		85 34		sta $34				sta 	0+basicStack
.b6e9		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b6eb		85 35		sta $35				sta 	1+basicStack
.b6ed		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b6ef		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b6f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b6f2						StringConcrete:
.b6f2		5a		phy				phy 								; save position on stack
.b6f3		20 35 a1	jsr $a135			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6f6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b6f8		85 38		sta $38				sta 	zTemp1
.b6fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.b6fc		85 39		sta $39				sta 	zTemp1+1
.b6fe		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b700						_SALength:
.b700		c8		iny				iny
.b701		b1 38		lda ($38),y			lda 	(zTemp1),y
.b703		d0 fb		bne $b700			bne 	_SALength
.b705		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b707		b0 3d		bcs $b746			bcs 	_SALengthError
.b709		98		tya				tya 				 				; length of the new string
.b70a		18		clc				clc
.b70b		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b70d		90 02		bcc $b711			bcc 	_SAHaveLength
.b70f		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b711						_SAHaveLength:
.b711		48		pha				pha 								; save length.
.b712		38		sec				sec
.b713		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b715		6d 0e 04	adc $040e			adc 	stringMemory
.b718		8d 0e 04	sta $040e			sta 	stringMemory
.b71b		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b71d		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b71f		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b721		6d 0f 04	adc $040f			adc 	stringMemory+1
.b724		8d 0f 04	sta $040f			sta 	stringMemory+1
.b727		85 3b		sta $3b				sta 	zTemp2+1
.b729		95 60		sta $60,x			sta 	NSMantissa1,x
.b72b		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b72c		38		sec				sec
.b72d		e9 03		sbc #$03			sbc 	#3
.b72f		92 3a		sta ($3a)			sta 	(zTemp2)
.b731		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b733		a0 01		ldy #$01			ldy 	#1
.b735		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b737						_SACopyNewString:
.b737		a0 00		ldy #$00			ldy 	#0
.b739						_SACopyNSLoop:
.b739		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b73b		c8		iny				iny 								; write two on in string storage
.b73c		c8		iny				iny
.b73d		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b73f		88		dey				dey 								; this makes it one one.
.b740		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b742		d0 f5		bne $b739			bne 	_SACopyNSLoop
.b744		7a		ply				ply
.b745		60		rts				rts
.b746						_SALengthError:
.b746		a9 09		lda #$09		lda	#9
.b748		4c fb 95	jmp $95fb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b74b						StringSystemInitialise:
.b74b		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b74d		8d 0e 04	sta $040e			sta 	0+stringMemory
.b750		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b752		8d 0f 04	sta $040f			sta 	1+stringMemory
.b755		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b758		60		rts				rts
.b759						StringSpaceInitialise:
.b759		20 35 a1	jsr $a135			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b75c		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b75e		8d 10 04	sta $0410			sta 	stringInitialised
.b761		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b764		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b767		ad 0f 04	lda $040f			lda 	stringMemory+1
.b76a		3a		dec a				dec 	a
.b76b		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b76e		60		rts				rts
.b76f						StringTempAllocate:
.b76f		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b771		b0 30		bcs $b7a3			bcs 	_STALength
.b773		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b776		30 05		bmi $b77d			bmi 	_STAAllocate
.b778		48		pha				pha 								; save value to subtract.
.b779		20 59 b7	jsr $b759			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b77c		68		pla				pla 								; restore it
.b77d						_STAAllocate:
.b77d		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b77f		18		clc				clc  								; deliberate allows one more
.b780		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b783		8d 11 04	sta $0411			sta 	stringTempPointer
.b786		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b788		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b78a		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b78d		69 ff		adc #$ff			adc 	#$FF
.b78f		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b792		85 3d		sta $3d				sta 	zsTemp+1
.b794		95 60		sta $60,x			sta 	NSMantissa1,x
.b796		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b798		74 70		stz $70,x			stz 	NSMantissa3,x
.b79a		a9 10		lda #$10			lda 	#NSTString
.b79c		95 50		sta $50,x			sta 	NSStatus,x
.b79e		a9 00		lda #$00			lda 	#0 							; clear the target string
.b7a0		92 3c		sta ($3c)			sta 	(zsTemp)
.b7a2		60		rts				rts
.b7a3						_STALength:
.b7a3		a9 09		lda #$09		lda	#9
.b7a5		4c fb 95	jmp $95fb		jmp	ErrorHandler
.b7a8						StringTempWrite:
.b7a8		48		pha				pha
.b7a9		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b7ab		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b7ad		d0 02		bne $b7b1			bne 	_STWNoCarry
.b7af		e6 3d		inc $3d				inc 	zsTemp+1
.b7b1						_STWNoCarry:
.b7b1		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b7b3		92 3c		sta ($3c)			sta 	(zsTemp)
.b7b5		68		pla				pla
.b7b6		60		rts				rts

;******  Return to file: _basic.asm

.b7b7						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 88 07	ldy $0788			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 88 07	ldy $0788			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 89 07	lda $0789			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 88 07	sty $0788			sty 	EXTColumn
.c02d	a02d	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 87 07	inc $0787			inc 	EXTRow  					; bump row
.c035	a035	9c 88 07	stz $0788			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 87 07	lda $0787			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 8b 07	cmp $078b			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 8a 07	adc $078a			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 88 07	dec $0788			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 88 07	stz $0788			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 87 07	dec $0787			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 87 07	lda $0787			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 87 07	dec $0787			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 8a 07	sbc $078a			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 88 07	sty $0788			sty 	EXTColumn
.c08c	a08c	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 88 07	sty $0788			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 8b 07	lda $078b			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 87 07	cmp $0787			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 87 07	inc $0787			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 8a 07	adc $078a			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 88 07	lda $0788			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 88 07	sta $0788			sta 	EXTColumn
.c0c9	a0c9	cd 8a 07	cmp $078a			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 88 07	dec $0788			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 89 07	and $0789			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 89 07	sta $0789			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 89 07	ora $0789			ora 	EXTTextColour
.c13c	a13c	8d 89 07	sta $0789			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 89 07	lda $0789			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 89 07	lda $0789			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 87 07	stz $0787			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 88 07	stz $0788			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 88 07	lda $0788			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 87 07	lda $0787			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 76 07	cmp $0776			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 76 07	sta $0776			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 01 bc	jsr $bc01			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 19 82	jsr $8219			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 88 07	lda $0788			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 88 07	ldy $0788			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 88 07	ldy $0788			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 88 07	cpy $0788			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 8a 07	lda $078a			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0787						EXTRow:
>0787								.fill 	1
.0788						EXTColumn:
>0788								.fill 	1
.0789						EXTTextColour:
>0789								.fill 	1
.078a						EXTScreenWidth:
>078a								.fill 	1
.078b						EXTScreenHeight:
>078b								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 89 07	sta $0789			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 8a 07	sta $078a			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 8b 07	sta $078b			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 87 07	lda $0787			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.078c						gxCurrentX:
>078c								.fill 	2
.078e						gxCurrentY:
>078e								.fill 	2
.0790						gxLastX:
>0790								.fill 	2
.0792						gxLastY:
>0792								.fill 	2
.0794						gxX0:
>0794								.fill 	2
.0796						gxY0:
>0796								.fill 	2
.0798						gxX1:
>0798								.fill 	2
.079a						gxY1:
>079a								.fill 	2
.079c						gxSpritesOn:
>079c								.fill 	1
.079d						gxBitmapsOn:
>079d								.fill 	1
.079e						gxBasePage:
>079e								.fill 	1
.079f						gxSpritePage:
>079f								.fill 	1
.07a0						gxHeight:
>07a0								.fill 	1
.07a1						gxMode:
>07a1								.fill 	1
.07a2						gxColour:
>07a2								.fill 	1
.07a3						gxEORValue:
>07a3								.fill 	1
.07a4						gxANDValue:
>07a4								.fill 	1
.07a5						gxOriginalLUTValue:
>07a5								.fill 	1
.07a6						gxOffset:
>07a6								.fill 	1
.07a7						GSCurrentSpriteID:
>07a7								.fill 	1
.07a8						GSCurrentSpriteAddr:
>07a8								.fill 	2
.07aa						gxSpriteOffsetBase:
>07aa								.fill 	2
.07ac						gxSpriteLow:
>07ac								.fill 	64
.07ec						gxSpriteHigh:
>07ec								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 8c 07	lda $078c,x			lda 	gxCurrentX,x
.c800	a800	9d 90 07	sta $0790,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8e 07	sta $078e			sta 	gxCurrentY
.c80a	a80a	9c 8f 07	stz $078f			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 8c 07	sta $078c			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8d 07	sta $078d			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8d 07	lda $078d			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 8c 07	lda $078c			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8e 07	lda $078e			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd a0 07	cmp $07a0			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 8c 07	lda $078c,x			lda 	gxCurrentX,x
.c83c	a83c	9d 94 07	sta $0794,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2f 08	sta $082f			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 30 08	stz $0830			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2d 08	lda $082d			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2e 08	cmp $082e			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2e 08	lda $082e			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2d 08	lda $082d			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2e 08	ldx $082e			ldx	 	gxYCentre
.c898	a898	8d 2e 08	sta $082e			sta 	gxYCentre
.c89b	a89b	8e 2d 08	stx $082d			stx 	gxxCentre
.c89e	a89e	ad 30 08	lda $0830			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 30 08	sta $0830			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2f 08	lda $082f	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 30 08	lda $0830			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2e 08	lda $082e			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2d 08	lda $082d			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2f 08	lda $082f			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2e 08	sbc $082e			sbc 	gxYCentre
.c8df	a8df	8d 2e 08	sta $082e			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 98 07	lda $0798,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 94 07	sta $0794,x			sta 	gxX0,x
.c8f6	a8f6	bd 99 07	lda $0799,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 95 07	sta $0795,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 30 08	stz $0830			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2d 08	inc $082d			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2d 08	lda $082d			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2d 08	inc $082d			inc 	gxxCentre					; X++
.c918	a918	ce 2e 08	dec $082e			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2d 08	lda $082d			lda 	gxxCentre
.c91f	a91f	ed 2e 08	sbc $082e			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 30 08	dec $0830			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 9a 07	lda $079a			lda 	gxY1
.c958	a958	ed 96 07	sbc $0796			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 2c 08	sta $082c			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2d 08	stz $082d			stz 	gxxCentre
.c96c	a96c	ad 2c 08	lda $082c			lda 	gxRadius
.c96f	a96f	8d 2e 08	sta $082e			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 98 07	lda $0798,x			lda 	gxX1,x
.c987	a987	7d 94 07	adc $0794,x			adc 	gxX0,x
.c98a	a98a	9d 98 07	sta $0798,x			sta 	gxX1,x
.c98d	a98d	bd 99 07	lda $0799,x			lda 	gxX1+1,x
.c990	a990	7d 95 07	adc $0795,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 99 07	sta $0799,x			sta 	gxX1+1,x
.c997	a997	7e 98 07	ror $0798,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.082c						gxRadius:
>082c								.fill 	1
.082d						gxxCentre:
>082d								.fill 	1
.082e						gxYCentre:
>082e								.fill 	1
.082f						gxIsFillMode:
>082f								.fill 	1
.0830						gxYChanged:
>0830								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9d 07	lda $079d			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad a0 07	lda $07a0			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9e 07	adc $079e			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9e 07	cmp $079e			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 9c 07	stz $079c			stz 	gxSpritesOn
.c9f4	a9f4	9c 9d 07	stz $079d			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 8c 07	stz $078c,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9d 07	sta $079d			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9e 07	sta $079e			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e a0 07	stx $07a0			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 9c 07	sta $079c			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9f 07	sta $079f			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d aa 07	sta $07aa			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d ab 07	sta $07ab			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a9 07	stz $07a9			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e ec 07	stz $07ec,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a6 07	ldy $07a6			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a4 07	and $07a4			and 	gxANDValue
.cac1	aac1	4d a3 07	eor $07a3			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 33 08	lda $0833			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 94 07	lda $0794			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 98 07	eor $0798			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 95 07	lda $0795			lda 	gxX0+1
.cae7	aae7	4d 99 07	eor $0799			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 9a 07	lda $079a			lda 	gxY1
.caee	aaee	4d 96 07	eor $0796			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 35 08	lda $0835			lda 	gxPosition
.caf6	aaf6	6d 36 08	adc $0836			adc 	gxAdjust
.caf9	aaf9	8d 35 08	sta $0835			sta 	gxPosition
.cafc	aafc	9c 38 08	stz $0838			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 37 08	cmp $0837			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 38 08	dec $0838			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 37 08	sbc $0837			sbc 	gxTotal
.cb0d	ab0d	8d 35 08	sta $0835			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 33 08	lda $0833			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 38 08	lda $0838			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 38 08	lda $0838			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 34 08	lda $0834			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 94 07	lda $0794			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 95 07	dec $0795			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 94 07	dec $0794			dec 	gxX0
.cb3e	ab3e	ce a6 07	dec $07a6			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a6 07	lda $07a6			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 94 07	inc $0794			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 95 07	inc $0795			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a6 07	inc $07a6			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 96 07	inc $0796			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 9a 07	lda $079a			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 96 07	sbc $0796			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 32 08	sta $0832			sta 	gxDiffY
.cb86	ab86	9c 34 08	stz $0834			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 98 07	lda $0798			lda 	gxX1
.cb8d	ab8d	ed 94 07	sbc $0794			sbc 	gxX0
.cb90	ab90	8d 31 08	sta $0831			sta 	gxDiffX
.cb93	ab93	ad 99 07	lda $0799			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 95 07	sbc $0795			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 31 08	ror $0831			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 31 08	sbc $0831			sbc 	gxDiffX
.cba6	aba6	8d 31 08	sta $0831			sta 	gxDiffX
.cba9	aba9	ce 34 08	dec $0834			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 33 08	stz $0833			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 32 08	lda $0832			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 36 08	sta $0836			sta 	gxAdjust
.cbb5	abb5	ad 31 08	lda $0831			lda 	gxDiffX
.cbb8	abb8	8d 37 08	sta $0837			sta 	gxTotal
.cbbb	abbb	ad 32 08	lda $0832			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 31 08	cmp $0831			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 33 08	dec $0833			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 31 08	lda $0831			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 36 08	sta $0836			sta 	gxAdjust
.cbcc	abcc	ad 32 08	lda $0832			lda 	gxDiffY
.cbcf	abcf	8d 37 08	sta $0837			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 37 08	lda $0837			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 35 08	sta $0835			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.0831						gxDiffX:
>0831								.fill 	1
.0832						gxDiffY:
>0832								.fill 	1
.0833						gxIsDiffYLarger:
>0833								.fill 	1
.0834						gxDXNegative:
>0834								.fill 	1
.0835						gxPosition:
>0835								.fill 	1
.0836						gxAdjust:
>0836								.fill 	1
.0837						gxTotal:
>0837								.fill 	1
.0838						gxAddSelect:
>0838								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e a2 07	stx $07a2			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d a1 07	sta $07a1			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a4 07	stz $07a4			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae a2 07	ldx $07a2			ldx 	gxColour
.cbec	abec	8e a3 07	stx $07a3			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a4 07	stx $07a4			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a3 07	stz $07a3			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a4 07	lda $07a4			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a4 07	sta $07a4			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a6 07	ldy $07a6			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a4 07	and $07a4			and 	gxANDValue
.cc16	ac16	4d a3 07	eor $07a3			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 96 07	lda $0796			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 9a 07	cmp $079a			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 96 07	inc $0796			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 96 07	lda $0796			lda 	gxY0 						; reached last line
.cc48	ac48	cd 9a 07	cmp $079a			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 98 07	lda $0798			lda		gxX1
.cc65	ac65	ed 94 07	sbc $0794			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 99 07	lda $0799			lda 	gxX1+1
.cc6d	ac6d	ed 95 07	sbc $0795			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a6 07	lda $07a6			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a6 07	ldy $07a6			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a4 07	and $07a4			and 	gxANDValue
.cc8a	ac8a	4d a3 07	eor $07a3			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a4 07	and $07a4			and 	gxANDValue
.cca8	aca8	4d a3 07	eor $07a3			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a4 07	and $07a4			and 	gxANDValue
.ccc0	acc0	4d a3 07	eor $07a3			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a6 07	sta $07a6			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 39 08	sta $0839			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 3a 08	sta $083a			sta 	gxMask 						; and mask
.cce7	ace7	ad 9d 07	lda $079d			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 96 07	lda $0796			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 3c 08	sty $083c			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 3b 08	stx $083b			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3e 08	lda $083e			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3d 08	sta $083d			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3e 08	bit $083e			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 3a 08	lda $083a			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3d 08	lda $083d			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 96 07	lda $0796			lda 	gxY0 						; off screen
.cd20	ad20	cd a0 07	cmp $07a0			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 39 08	cmp $0839			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 96 07	sta $0796			sta 	gxY0
.cd39	ad39	ae 3d 08	ldx $083d			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 39 08	lda $0839			lda 	gxSize
.cd40	ad40	6d 94 07	adc $0794			adc 	gxX0
.cd43	ad43	8d 94 07	sta $0794			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 95 07	inc $0795			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 3b 08	jmp ($083b)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a6 07	ldy $07a6			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3d 08	lda $083d			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c a1 07	bit $07a1			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 3a 08	lda $083a			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3e 08	lda $083e			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a4 07	and $07a4			and 	gxANDValue
.cd84	ad84	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 39 08	cmp $0839			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 96 07	inc $0796			inc 	gxY0
.cda1	ada1	60		rts				rts
.0839						gxSize:
>0839								.fill 	1
.083a						gxMask:
>083a								.fill 	1
.083b						gxAcquireVector:
>083b								.fill 	2
.083d						gxScale:
>083d								.fill 	1
.083e						gxUseMode:
>083e								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d a1 07	eor $07a1			eor 	gxMode
.cda7	ada7	8d 3e 08	sta $083e			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad a2 07	lda $07a2			lda 	gxColour
.cde0	ade0	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 9c 07	lda $079c			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d a1 07	eor $07a1			eor 	gxMode
.cdf4	adf4	8d 3e 08	sta $083e			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3f 08	lda $083f			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9f 07	lda $079f			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 40 08	ldx $0840			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 42 08	adc $0842			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 43 08	adc $0843			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3f 08	cpy $083f			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 9c 07	lda $079c			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a7 07	sta $07a7			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a9 07	sta $07a9			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a8 07	sta $07a8			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 9c 07	lda $079c			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 42 08	lda $0842			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 43 08	lda $0843			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d aa 07	adc $07aa			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad ab 07	lda $07ab			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 40 08	lda $0840			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 41 08	ora $0841			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 40 08	lda $0840			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d ec 07	ora $07ec,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 9c 07	lda $079c			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 94 07	adc $0794			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 95 07	lda $0795			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 96 07	adc $0796			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 95 07	lsr $0795			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 94 07	ror $0794			ror 	gxX0
.cf60	af60	4e 94 07	lsr $0794			lsr 	gxX0
.cf63	af63	4e 96 07	lsr $0796			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 96 07	lsr $0796			lsr 	gxY0
.cf69	af69	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 94 07	ora $0794			ora 	gxX0
.cf74	af74	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cf77	af77	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 96 07	ora $0796			ora 	gxY0
.cf7f	af7f	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a5 07	sta $07a5			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a5 07	lda $07a5			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 96 07	lda $0796			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 94 07	lda $0794			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a6 07	sta $07a6			sta 	gxOffset
.cfd1	afd1	ad 95 07	lda $0795			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9e 07	adc $079e			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a6 07	lda $07a6			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a6 07	sta $07a6			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 ac 07	lda $07ac,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d ac 07	ora $07ac,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 ec 07	lda $07ec,y			lda 	gxSpriteHigh,y
.d023	b023	7d ec 07	adc $07ec,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 ec 07	lda $07ec,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 ac 07	lda $07ac,y			lda 	gxSpriteLow,y
.d051	b051	fd ac 07	sbc $07ac,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9f 07	lda $079f			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 43 08	sta $0843			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 40 08	sta $0840			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3f 08	sta $083f			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 41 08	sta $0841			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 42 08	sta $0842			sta 	gxSpriteOffset
.d09e	b09e	0e 42 08	asl $0842			asl 	gxSpriteOffset
.d0a1	b0a1	2e 43 08	rol $0843			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 42 08	asl $0842			asl 	gxSpriteOffset
.d0a7	b0a7	2e 43 08	rol $0843			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083f						gxSizePixels:
>083f								.fill 	1
.0840						gxSizeBits:
>0840								.fill 	1
.0841						gxSpriteLUT:
>0841								.fill 	1
.0842						gxSpriteOffset:
>0842								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 94 07	lda $0794			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 98 07	cmp $0798			cmp 	gxX1
.d0bb	b0bb	ad 95 07	lda $0795			lda 	gxX0+1
.d0be	b0be	ed 99 07	sbc $0799			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 96 07	lda $0796			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 9a 07	cmp $079a			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 94 07	lda $0794,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 94 07	lda $0794,y			lda 	gxX0,y
.d0eb	b0eb	9d 94 07	sta $0794,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 94 07	sta $0794,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d179	b179	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d180	b180	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d187	b187	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d18f	b18f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d195	b195	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d19b	b19b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d1a2	b1a2	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d1a8	b1a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d1ae	b1ae	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d1b5	b1b5	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d1bd	b1bd	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1c5	b1c5	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1cd	b1cd	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1d5	b1d5	47 28
>d1d7	b1d7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1df	b1df	28
>d1e0	b1e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1e8	b1e8	28
>d1e9	b1e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1ef	b1ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1f5	b1f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1fb	b1fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d202	b202	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d20a	b20a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d210	b210	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d216	b216	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d21b	b21b	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d21f	b21f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d225	b225	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d22d	b22d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d234	b234	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d23b	b23b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d243	b243	43
>d244	b244	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d24a	b24a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d250	b250	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d257	b257	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d25d	b25d	02 95 41 54				.text	2,$95,"AT"             ; $b5 AT
>d261	b261	02 9b 42 59				.text	2,$9b,"BY"             ; $b6 BY
>d265	b265	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b7 CALL
>d26b	b26b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b8 CIRCLE
>d273	b273	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b9 CLEAR
>d27a	b27a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ba COLOR
>d281	b281	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bb COLOUR
>d289	b289	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bc DATA
>d28f	b28f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bd DIM
>d294	b294	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $be DOWNTO
>d29c	b29c	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bf ELSE
>d2a2	b2a2	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c0 FROM
>d2a8	b2a8	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c1 GFX
>d2ad	b2ad	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c2 HERE
>d2b3	b2b3	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c3 IMAGE
>d2ba	b2ba	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d2bf	b2bf	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2c5	b2c5	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2cc	b2cc	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c7 MEMCOPY
>d2d4	b2d4	59
>d2d5	b2d5	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c8 OFF
>d2da	b2da	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c9 ON
>d2de	b2de	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ca OUTLINE
>d2e6	b2e6	45
>d2e7	b2e7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cb PALETTE
>d2ef	b2ef	45
>d2f0	b2f0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cc PLOT
>d2f6	b2f6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cd POKE
>d2fc	b2fc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $ce POKED
>d303	b303	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cf POKEL
>d30a	b30a	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d0 POKEW
>d311	b311	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d317	b317	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d31d	b31d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d322	b322	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d329	b329	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d330	b330	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d338	b338	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d33e	b33e	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d342	b342	ff					.text	$FF
.d343	b343					KeywordSet1:
>d343	b343	00 65					.text	0,$65,""               ; $80 !0:EOF
>d345	b345	00 58					.text	0,$58,""               ; $81 !1:SH1
>d347	b347	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d349	b349	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d351	b351	4c 45
>d353	b353	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d35b	b35b	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d363	b363	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d36a	b36a	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d371	b371	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d376	b376	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37e	b37e	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d383	b383	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d38a	b38a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d38f	b38f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d397	b397	45
>d398	b398	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d39c	b39c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d3a3	b3a3	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3a9	b3a9	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3b0	b3b0	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3b7	b3b7	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3bd	b3bd	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3c3	b3c3	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3c8	b3c8	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3ce	b3ce	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3d5	b3d5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3dd	b3dd	45
>d3de	b3de	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3e6	b3e6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3eb	b3eb	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3f1	b3f1	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3f9	b3f9	45
>d3fa	b3fa	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d402	b402	45
>d403	b403	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d40a	b40a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d412	b412	53
>d413	b413	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d419	b419	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d421	b421	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d426	b426	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d42d	b42d	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d432	b432	ff					.text	$FF
.d433	b433					KeywordSet2:
>d433	b433	00 65					.text	0,$65,""               ; $80 !0:EOF
>d435	b435	00 58					.text	0,$58,""               ; $81 !1:SH1
>d437	b437	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d439	b439	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d43e	b43e	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d443	b443	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d448	b448	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d44d	b44d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d452	b452	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d457	b457	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d45c	b45c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d461	b461	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d466	b466	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d46b	b46b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d470	b470	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d475	b475	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d47a	b47a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d47f	b47f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d484	b484	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d489	b489	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d48e	b48e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d493	b493	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d498	b498	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d49d	b49d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4a2	b4a2	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4a7	b4a7	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4ac	b4ac	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4b1	b4b1	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4b6	b4b6	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4bb	b4bb	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4c0	b4c0	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4c5	b4c5	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4ca	b4ca	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4cf	b4cf	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4d4	b4d4	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4d9	b4d9	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4de	b4de	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4e3	b4e3	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4e8	b4e8	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4ed	b4ed	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4f2	b4f2	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4f7	b4f7	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4fc	b4fc	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d501	b501	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d506	b506	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d50b	b50b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d510	b510	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d515	b515	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d51a	b51a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d51f	b51f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d524	b524	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d529	b529	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d52e	b52e	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d533	b533	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d538	b538	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d53d	b53d	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d542	b542	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d547	b547	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d54c	b54c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d551	b551	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d556	b556	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d55b	b55b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d560	b560	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d565	b565	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d56a	b56a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d56f	b56f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d574	b574	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d579	b579	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d57e	b57e	ff					.text	$FF
.d57f	b57f					Export_TKListConvertLine:
.d57f	b57f	48		pha				pha 								; save indent on the stack
.d580	b580	9c 1d 04	stz $041d			stz 	tbOffset
.d583	b583	9c 2d 04	stz $042d			stz 	tokenBuffer
.d586	b586	9c 29 04	stz $0429			stz 	currentListColour
.d589	b589	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d58b	b58b	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d58e	b58e	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d590	b590	b1 30		lda ($30),y			lda 	(codePtr),y
.d592	b592	aa		tax				tax
.d593	b593	88		dey				dey
.d594	b594	b1 30		lda ($30),y			lda 	(codePtr),y
.d596	b596	20 79 b7	jsr $b779			jsr 	LCLWriteNumberXA
.d599	b599	68		pla				pla 								; adjustment to indent
.d59a	b59a	48		pha				pha 								; save on stack
.d59b	b59b	10 0c		bpl $b5a9			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d59d	b59d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d59e	b59e	6d 26 04	adc $0426			adc 	listIndent
.d5a1	b5a1	8d 26 04	sta $0426			sta 	listIndent
.d5a4	b5a4	10 03		bpl $b5a9			bpl 	_LCNoAdjust
.d5a6	b5a6	9c 26 04	stz $0426			stz 	listIndent
.d5a9	b5a9					_LCNoAdjust:
.d5a9	b5a9	18		clc				clc		 							; work out actual indent.
.d5aa	b5aa	ad 26 04	lda $0426			lda 	listIndent
.d5ad	b5ad	0a		asl a				asl 	a
.d5ae	b5ae	69 07		adc #$07			adc 	#7
.d5b0	b5b0	85 36		sta $36				sta 	zTemp0
.d5b2	b5b2					_LCPadOut:
.d5b2	b5b2	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5b4	b5b4	20 11 b7	jsr $b711			jsr 	LCLWrite
.d5b7	b5b7	ad 1d 04	lda $041d			lda 	tbOffset
.d5ba	b5ba	c5 36		cmp $36				cmp 	zTemp0
.d5bc	b5bc	d0 f4		bne $b5b2			bne 	_LCPadOut
.d5be	b5be	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5c0	b5c0					_LCMainLoop:
.d5c0	b5c0	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5c2	b5c2	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d5c5	b5c5	b1 30		lda ($30),y			lda 	(codePtr),y
.d5c7	b5c7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5c9	b5c9	f0 17		beq $b5e2			beq 	_LCExit
.d5cb	b5cb	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5cd	b5cd	90 1e		bcc $b5ed			bcc 	_LCDoubles
.d5cf	b5cf	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5d1	b5d1	90 2a		bcc $b5fd			bcc 	_LCShiftPunc
.d5d3	b5d3	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5d5	b5d5	90 35		bcc $b60c			bcc 	_LCPunctuation
.d5d7	b5d7	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5d9	b5d9	90 51		bcc $b62c			bcc 	_LCIdentifiers
.d5db	b5db	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5dd	b5dd	90 73		bcc $b652			bcc 	_LCTokens
.d5df	b5df	4c b2 b6	jmp $b6b2			jmp 	_LCData 					; 254-5 are data objects
.d5e2	b5e2					_LCExit:
.d5e2	b5e2	68		pla				pla 								; get old indent adjust
.d5e3	b5e3	30 07		bmi $b5ec			bmi 	_LCExit2
.d5e5	b5e5	18		clc				clc 								; add to indent if +ve
.d5e6	b5e6	6d 26 04	adc $0426			adc 	listIndent
.d5e9	b5e9	8d 26 04	sta $0426			sta 	listIndent
.d5ec	b5ec					_LCExit2:
.d5ec	b5ec	60		rts				rts
.d5ed	b5ed					_LCDoubles:
.d5ed	b5ed	48		pha				pha
.d5ee	b5ee	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5ef	b5ef	29 02		and #$02			and 	#2
.d5f1	b5f1	09 3c		ora #$3c			ora 	#60 						; make < >
.d5f3	b5f3	20 11 b7	jsr $b711			jsr 	LCLWrite
.d5f6	b5f6	68		pla				pla 								; restore, do lower bit
.d5f7	b5f7	29 03		and #$03			and 	#3
.d5f9	b5f9	09 3c		ora #$3c			ora 	#60
.d5fb	b5fb	80 0f		bra $b60c			bra		_LCPunctuation 				; print, increment, loop
.d5fd	b5fd					_LCShiftPunc:
.d5fd	b5fd	aa		tax				tax 								; save in X
.d5fe	b5fe	29 07		and #$07			and 	#7 							; lower 3 bits
.d600	b600	f0 02		beq $b604			beq 	_LCNoAdd
.d602	b602	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d604	b604					_LCNoAdd:
.d604	b604	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d606	b606	90 02		bcc $b60a			bcc 	_LCNoAdd2
.d608	b608	09 20		ora #$20			ora 	#32 						; adds $20
.d60a	b60a					_LCNoAdd2:
.d60a	b60a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d60c	b60c					_LCPunctuation:
.d60c	b60c	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d60e	b60e	d0 03		bne $b613			bne 	_LCPContinue
.d610	b610	20 27 b7	jsr $b727			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d613	b613					_LCPContinue:
.d613	b613	c9 2e		cmp #$2e			cmp 	#'.'
.d615	b615	f0 08		beq $b61f			beq 	_LCPIsConstant
.d617	b617	c9 30		cmp #$30			cmp 	#'0'
.d619	b619	90 0b		bcc $b626			bcc 	_LCPNotConstant
.d61b	b61b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d61d	b61d	b0 07		bcs $b626			bcs 	_LCPNotConstant
.d61f	b61f					_LCPIsConstant:
.d61f	b61f	48		pha				pha
.d620	b620	a9 87		lda #$87			lda 	#CLIConstant+$80
.d622	b622	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d625	b625	68		pla				pla
.d626	b626					_LCPNotConstant:
.d626	b626	c8		iny				iny 								; consume character
.d627	b627	20 11 b7	jsr $b711			jsr 	LCLWrite 					; write it out.
.d62a	b62a	80 94		bra $b5c0			bra 	_LCMainLoop 				; go round again.
.d62c	b62c					_LCIdentifiers:
.d62c	b62c	18		clc				clc 								; convert to physical address
.d62d	b62d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d62f	b62f	85 37		sta $37				sta 	zTemp0+1
.d631	b631	c8		iny				iny
.d632	b632	b1 30		lda ($30),y			lda 	(codePtr),y
.d634	b634	85 36		sta $36				sta 	zTemp0
.d636	b636	c8		iny				iny
.d637	b637	5a		phy				phy 								; save position
.d638	b638	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d63a	b63a	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d63d	b63d	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d63f	b63f					_LCOutIdentifier:
.d63f	b63f	c8		iny				iny
.d640	b640	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d642	b642	29 7f		and #$7f			and 	#$7F
.d644	b644	20 63 b7	jsr $b763			jsr 	LCLLowerCase
.d647	b647	20 11 b7	jsr $b711			jsr 	LCLWrite
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d64c	b64c	10 f1		bpl $b63f			bpl 	_LCOutIdentifier
.d64e	b64e	7a		ply				ply 								; restore position
.d64f	b64f	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop
.d652	b652					_LCTokens:
.d652	b652	aa		tax				tax 								; token in X
.d653	b653	a9 33		lda #$33			lda 	#((KeywordSet2) & $FF)
.d655	b655	85 36		sta $36				sta 	0+zTemp0
.d657	b657	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d659	b659	85 37		sta $37				sta 	1+zTemp0
.d65b	b65b	e0 82		cpx #$82			cpx 	#$82
.d65d	b65d	f0 16		beq $b675			beq 	_LCUseShift
.d65f	b65f	a9 43		lda #$43			lda 	#((KeywordSet1) & $FF)
.d661	b661	85 36		sta $36				sta 	0+zTemp0
.d663	b663	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d665	b665	85 37		sta $37				sta 	1+zTemp0
.d667	b667	e0 81		cpx #$81			cpx 	#$81
.d669	b669	f0 0a		beq $b675			beq 	_LCUseShift
.d66b	b66b	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d66d	b66d	85 36		sta $36				sta 	0+zTemp0
.d66f	b66f	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d671	b671	85 37		sta $37				sta 	1+zTemp0
.d673	b673	80 01		bra $b676			bra 	_LCNoShift
.d675	b675					_LCUseShift:
.d675	b675	c8		iny				iny
.d676	b676					_LCNoShift:
.d676	b676	20 3b b7	jsr $b73b			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d679	b679	b1 30		lda ($30),y			lda 	(codePtr),y
.d67b	b67b	aa		tax				tax 								; into X
.d67c	b67c					_LCFindText:
.d67c	b67c	ca		dex				dex
.d67d	b67d	10 0e		bpl $b68d			bpl 	_LCFoundText 				; found text.
.d67f	b67f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d681	b681	1a		inc a				inc 	a 							; one extra for size
.d682	b682	38		sec				sec 								; one extra for checksum
.d683	b683	65 36		adc $36				adc 	zTemp0 						; go to next token
.d685	b685	85 36		sta $36				sta 	zTemp0
.d687	b687	90 f3		bcc $b67c			bcc 	_LCFindText
.d689	b689	e6 37		inc $37				inc 	zTemp0+1
.d68b	b68b	80 ef		bra $b67c			bra 	_LCFindText
.d68d	b68d					_LCFoundText:
.d68d	b68d	5a		phy				phy 								; save List position
.d68e	b68e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d690	b690	aa		tax				tax
.d691	b691	a9 86		lda #$86			lda 	#CLIToken+$80
.d693	b693	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d696	b696	a0 02		ldy #$02			ldy 	#2
.d698	b698					_LCCopyToken:
.d698	b698	b1 36		lda ($36),y			lda 	(zTemp0),y
.d69a	b69a	20 63 b7	jsr $b763			jsr 	LCLLowerCase
.d69d	b69d	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6a0	b6a0	c8		iny				iny
.d6a1	b6a1	ca		dex				dex
.d6a2	b6a2	d0 f4		bne $b698			bne 	_LCCopyToken
.d6a4	b6a4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6a6	b6a6	f0 05		beq $b6ad			beq 	_LCNoSpace
.d6a8	b6a8	a9 20		lda #$20			lda 	#' '
.d6aa	b6aa	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6ad	b6ad					_LCNoSpace:
.d6ad	b6ad	7a		ply				ply 								; restore position.
.d6ae	b6ae	c8		iny				iny 								; consume token
.d6af	b6af	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop 				; and go around again.
.d6b2	b6b2					_LCData:
.d6b2	b6b2	48		pha				pha 								; save type $FE/$FF
.d6b3	b6b3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6b5	b6b5	c9 fe		cmp #$fe			cmp 	#$FE
.d6b7	b6b7	f0 22		beq $b6db			beq 	_LCHaveOpener
.d6b9	b6b9	a2 22		ldx #$22			ldx 	#'"'
.d6bb	b6bb	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6bd	b6bd	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d6c0	b6c0	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6c2	b6c2	d0 17		bne $b6db			bne 	_LCHaveOpener
.d6c4	b6c4	88		dey				dey 								; what precedes it ?
.d6c5	b6c5	b1 30		lda ($30),y			lda 	(codePtr),y
.d6c7	b6c7	c8		iny				iny
.d6c8	b6c8	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6ca	b6ca	d0 0f		bne $b6db			bne 	_LCHaveOpener
.d6cc	b6cc	a9 09		lda #$09			lda 	#9 							; tab
.d6ce	b6ce	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6d1	b6d1	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6d3	b6d3	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6d6	b6d6	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6d8	b6d8	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d6db	b6db					_LCHaveOpener:
.d6db	b6db	8a		txa				txa 								; output prefix (# or ")
.d6dc	b6dc	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6df	b6df	c8		iny				iny 								; get count
.d6e0	b6e0	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e2	b6e2	aa		tax				tax
.d6e3	b6e3	c8		iny				iny 								; point at first character
.d6e4	b6e4					_LCOutData:
.d6e4	b6e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e6	b6e6	c9 00		cmp #$00			cmp 	#0
.d6e8	b6e8	f0 03		beq $b6ed			beq 	_LCNoPrint
.d6ea	b6ea	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6ed	b6ed					_LCNoPrint:
.d6ed	b6ed	c8		iny				iny
.d6ee	b6ee	ca		dex				dex
.d6ef	b6ef	d0 f3		bne $b6e4			bne 	_LCOutData
.d6f1	b6f1	68		pla				pla 								; closing " required ?
.d6f2	b6f2	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6f4	b6f4	d0 0f		bne $b705			bne 	_LCNoQuote
.d6f6	b6f6	a9 22		lda #$22			lda 	#'"'
.d6f8	b6f8	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6fb	b6fb	ad 89 07	lda $0789			lda 	EXTTextColour
.d6fe	b6fe	29 0f		and #$0f			and 	#$0F
.d700	b700	09 90		ora #$90			ora 	#$90
.d702	b702	20 11 b7	jsr $b711			jsr 	LCLWrite
.d705	b705					_LCNoQuote:
.d705	b705	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop
.d708	b708					LCLWriteColour:
.d708	b708	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d70b	b70b	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d70e	b70e	d0 01		bne $b711			bne 	LCLWrite 					; if different, output it
.d710	b710	60		rts				rts
.d711	b711					LCLWrite:
.d711	b711	da		phx				phx
.d712	b712	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d715	b715	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d718	b718	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d71b	b71b	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d71e	b71e	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d720	b720	30 03		bmi $b725			bmi 	_LCLNoColour
.d722	b722	8d 27 04	sta $0427			sta 	lcLastCharacter
.d725	b725					_LCLNoColour:
.d725	b725	fa		plx				plx
.d726	b726	60		rts				rts
.d727	b727					LCLDeleteLastSpace:
.d727	b727	48		pha				pha
.d728	b728	da		phx				phx
.d729	b729	ae 1d 04	ldx $041d			ldx 	tbOffset
.d72c	b72c	f0 0a		beq $b738			beq 	_LCDLSExit
.d72e	b72e	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d731	b731	c9 20		cmp #$20			cmp 	#' '
.d733	b733	d0 03		bne $b738			bne 	_LCDLSExit
.d735	b735	ce 1d 04	dec $041d			dec 	tbOffset
.d738	b738					_LCDLSExit:
.d738	b738	fa		plx				plx
.d739	b739	68		pla				pla
.d73a	b73a	60		rts				rts
.d73b	b73b					LCLCheckSpaceRequired:
.d73b	b73b	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d73e	b73e	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d740	b740	f0 1b		beq $b75d			beq 	_LCCSRSpace
.d742	b742	c9 29		cmp #$29			cmp 	#')'
.d744	b744	f0 17		beq $b75d			beq 	_LCCSRSpace
.d746	b746	c9 23		cmp #$23			cmp 	#'#'
.d748	b748	f0 13		beq $b75d			beq 	_LCCSRSpace
.d74a	b74a	20 63 b7	jsr $b763			jsr 	LCLLowerCase 				; saves a little effort
.d74d	b74d	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d74f	b74f	90 11		bcc $b762			bcc 	_LCCSRExit
.d751	b751	c9 3a		cmp #$3a			cmp 	#"9"+1
.d753	b753	90 08		bcc $b75d			bcc 	_LCCSRSpace
.d755	b755	c9 61		cmp #$61			cmp 	#"a"
.d757	b757	90 09		bcc $b762			bcc 	_LCCSRExit
.d759	b759	c9 7b		cmp #$7b			cmp 	#"z"+1
.d75b	b75b	b0 05		bcs $b762			bcs 	_LCCSRExit
.d75d	b75d					_LCCSRSpace:
.d75d	b75d	a9 20		lda #$20			lda 	#' '
.d75f	b75f	20 11 b7	jsr $b711			jsr 	LCLWrite
.d762	b762					_LCCSRExit:
.d762	b762	60		rts				rts
.d763	b763					LCLLowerCase:
.d763	b763	c9 41		cmp #$41			cmp 	#"A"
.d765	b765	90 06		bcc $b76d			bcc 	_LCLLCOut
.d767	b767	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d769	b769	b0 02		bcs $b76d			bcs 	_LCLLCOut
.d76b	b76b	69 20		adc #$20			adc 	#$20
.d76d	b76d					_LCLLCOut:
.d76d	b76d	60		rts				rts
.d76e	b76e					LCLUpperCase:
.d76e	b76e	c9 61		cmp #$61			cmp 	#"a"
.d770	b770	90 06		bcc $b778			bcc 	_LCLUCOut
.d772	b772	c9 7b		cmp #$7b			cmp 	#"z"+1
.d774	b774	b0 02		bcs $b778			bcs 	_LCLUCOut
.d776	b776	e9 1f		sbc #$1f			sbc 	#$1F
.d778	b778					_LCLUCOut:
.d778	b778	60		rts				rts
.d779	b779					LCLWriteNumberXA:
.d779	b779	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d77b	b77b					_LCLWNLoop1:
.d77b	b77b	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d77d	b77d					_LCLWNLoop2:
.d77d	b77d	48		pha				pha 								; save initial LSB
.d77e	b77e	38		sec				sec
.d77f	b77f	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d781	b781	f9 b2 b7	sbc $b7b2,y			sbc 	_LCLWNTable,y
.d784	b784	48		pha				pha
.d785	b785	8a		txa				txa
.d786	b786	f9 b3 b7	sbc $b7b3,y			sbc 	_LCLWNTable+1,y
.d789	b789	90 07		bcc $b792			bcc 	_LCLWNUnderflow
.d78b	b78b	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d78d	b78d	aa		tax				tax 								; update X
.d78e	b78e	68		pla				pla 								; restore A
.d78f	b78f	7a		ply				ply 								; throw original
.d790	b790	80 eb		bra $b77d			bra 	_LCLWNLoop2 				; try again.
.d792	b792					_LCLWNUnderflow:
.d792	b792	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d794	b794	d0 06		bne $b79c			bne 	_LCLWNOut
.d796	b796	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d799	b799	3a		dec a				dec 	a
.d79a	b79a	f0 04		beq $b7a0			beq 	_LCLWNNext
.d79c	b79c					_LCLWNOut:
.d79c	b79c	98		tya				tya
.d79d	b79d	20 ac b7	jsr $b7ac			jsr 	_LCLWNOutDigit
.d7a0	b7a0					_LCLWNNext:
.d7a0	b7a0	7a		ply				ply 							 	; restore original value.
.d7a1	b7a1	68		pla				pla
.d7a2	b7a2	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7a4	b7a4	c8		iny				iny
.d7a5	b7a5	c8		iny				iny
.d7a6	b7a6	84 37		sty $37				sty 	zTemp0+1
.d7a8	b7a8	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7aa	b7aa	d0 cf		bne $b77b			bne 	_LCLWNLoop1
.d7ac	b7ac					_LCLWNOutDigit:
.d7ac	b7ac	09 30		ora #$30			ora 	#'0'
.d7ae	b7ae	20 11 b7	jsr $b711			jsr 	LCLWrite
.d7b1	b7b1	60		rts				rts
.d7b2	b7b2					_LCLWNTable:
>d7b2	b7b2	10 27						.word 	10000
>d7b4	b7b4	e8 03						.word 	1000
>d7b6	b7b6	64 00						.word 	100
>d7b8	b7b8	0a 00						.word 	10
.d7ba	b7ba					TOKSearchTable:
.d7ba	b7ba	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7bc	b7bc	85 36		sta $36				sta 	zTemp0
.d7be	b7be	a0 00		ldy #$00			ldy 	#0
.d7c0	b7c0	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7c2	b7c2	85 38		sta $38				sta 	zTemp1
.d7c4	b7c4					_TSTLoop:
.d7c4	b7c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7c6	b7c6	30 49		bmi $b811			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7c8	b7c8	f0 2e		beq $b7f8			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7ca	b7ca	c8		iny				iny 								; get the hash
.d7cb	b7cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7cd	b7cd	88		dey				dey
.d7ce	b7ce	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7d1	b7d1	d0 25		bne $b7f8			bne 	_TSTNext
.d7d3	b7d3	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7d6	b7d6	38		sec				sec
.d7d7	b7d7	ed 00 04	sbc $0400			sbc 	identStart
.d7da	b7da	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7dc	b7dc	d0 1a		bne $b7f8			bne 	_TSTNext
.d7de	b7de	5a		phy				phy 								; save Y , we might fail to match.
.d7df	b7df	c8		iny				iny 								; point to text
.d7e0	b7e0	c8		iny				iny
.d7e1	b7e1	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7e4	b7e4					_TSTCompareName:
.d7e4	b7e4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d7e7	b7e7	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7e9	b7e9	d0 0c		bne $b7f7			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7eb	b7eb	e8		inx				inx
.d7ec	b7ec	c8		iny				iny
.d7ed	b7ed	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7f0	b7f0	d0 f2		bne $b7e4			bne 	_TSTCompareName
.d7f2	b7f2	7a		ply				ply 								; throw Y
.d7f3	b7f3	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7f5	b7f5	38		sec				sec 								; return with CS = passed.
.d7f6	b7f6	60		rts				rts
.d7f7	b7f7					_TSTNextPullY:
.d7f7	b7f7	7a		ply				ply 								; restore current, fall through.
.d7f8	b7f8					_TSTNext:
.d7f8	b7f8	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7fa	b7fa	98		tya				tya
.d7fb	b7fb	18		clc				clc
.d7fc	b7fc	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7fe	b7fe	1a		inc a				inc 	a 							; +1
.d7ff	b7ff	1a		inc a				inc 	a 							; +2
.d800	b800	a8		tay				tay
.d801	b801	10 c1		bpl $b7c4			bpl 	_TSTLoop 					; if Y < $80 loop back
.d803	b803	98		tya				tya 								; add Y to zTemp0 and reset Y
.d804	b804	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d806	b806	18		clc				clc  								; but have tables > 255 bytes
.d807	b807	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d809	b809	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d80b	b80b	90 b7		bcc $b7c4			bcc 	_TSTLoop
.d80d	b80d	e6 37		inc $37				inc 	zTemp0+1
.d80f	b80f	80 b3		bra $b7c4			bra 	_TSTLoop
.d811	b811					_TSTFail:
.d811	b811	18		clc				clc
.d812	b812	60		rts				rts
.d813	b813					Export_TKTokeniseLine:
.d813	b813	20 e0 b9	jsr $b9e0			jsr 	LCLFixLineBufferCase 		; fix line case
.d816	b816	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d818	b818	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d81b	b81b	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d81e	b81e	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d821	b821	a2 ff		ldx #$ff			ldx 	#$FF
.d823	b823					_TKFindFirst:
.d823	b823	e8		inx				inx
.d824	b824	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d827	b827	f0 62		beq $b88b			beq 	_TKExit
.d829	b829	c9 20		cmp #$20			cmp 	#' '
.d82b	b82b	90 f6		bcc $b823			bcc 	_TKFindFirst
.d82d	b82d	c9 30		cmp #$30			cmp 	#'0'
.d82f	b82f	90 07		bcc $b838			bcc 	_TKNoLineNumber
.d831	b831	c9 3a		cmp #$3a			cmp 	#'9'+1
.d833	b833	b0 03		bcs $b838			bcs 	_TKNoLineNumber
.d835	b835	20 0a ba	jsr $ba0a			jsr 	TOKExtractLineNumber
.d838	b838					_TKNoLineNumber:
.d838	b838					_TKTokeniseLoop:
.d838	b838	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d83b	b83b	f0 4e		beq $b88b			beq 	_TKExit
.d83d	b83d	e8		inx				inx
.d83e	b83e	c9 20		cmp #$20			cmp 	#' '
.d840	b840	f0 f6		beq $b838			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d842	b842	ca		dex				dex 								; undo last get, A contains character, X is position.
.d843	b843	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d845	b845	f0 68		beq $b8af			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d847	b847	c9 41		cmp #$41			cmp 	#'A'
.d849	b849	90 04		bcc $b84f			bcc 	_TKTokenisePunctuation
.d84b	b84b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d84d	b84d	90 60		bcc $b8af			bcc 	_TKTokeniseIdentifier
.d84f	b84f					_TKTokenisePunctuation:
.d84f	b84f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d851	b851	f0 2e		beq $b881			beq 	_TKString
.d853	b853	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d855	b855	f0 2f		beq $b886			beq 	_TKHexConstant
.d857	b857	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d859	b859	f0 36		beq $b891			beq 	_TKCheckDouble
.d85b	b85b	c9 3e		cmp #$3e			cmp 	#'>'
.d85d	b85d	f0 32		beq $b891			beq 	_TKCheckDouble
.d85f	b85f					_TKStandardPunctuation:
.d85f	b85f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d862	b862	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d864	b864	90 0e		bcc $b874			bcc 	_TKNoShift
.d866	b866	48		pha				pha 								; save. we are about to convert this punctuation token from
.d867	b867	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d869	b869	85 36		sta $36				sta 	zTemp0
.d86b	b86b	68		pla				pla
.d86c	b86c	29 20		and #$20			and 	#32 						; bit 5
.d86e	b86e	4a		lsr a				lsr 	a 							; shift into bit 3
.d86f	b86f	4a		lsr a				lsr 	a
.d870	b870	05 36		ora $36				ora 	zTemp0
.d872	b872	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d874	b874					_TKNoShift:
.d874	b874	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; write the punctuation character
.d877	b877	e8		inx				inx 								; consume the character
.d878	b878	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d87a	b87a	d0 bc		bne $b838			bne 	_TKTokeniseLoop 			; and loop round again.
.d87c	b87c	20 42 b9	jsr $b942			jsr 	TOKCheckComment 			; comment checl
.d87f	b87f	80 b7		bra $b838			bra 	_TKTokeniseLoop
.d881	b881					_TKString:
.d881	b881	20 6f b9	jsr $b96f			jsr 	TOKTokenString
.d884	b884	80 b2		bra $b838			bra 	_TKTokeniseLoop
.d886	b886					_TKHexConstant:
.d886	b886	20 aa b9	jsr $b9aa			jsr 	TOKHexConstant
.d889	b889	80 ad		bra $b838			bra 	_TKTokeniseLoop
.d88b	b88b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d88d	b88d	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d890	b890	60		rts				rts
.d891	b891					_TKCheckDouble:
.d891	b891	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d894	b894	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d896	b896	90 c7		bcc $b85f			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d898	b898	c9 3f		cmp #$3f			cmp 	#'>'+1
.d89a	b89a	b0 c3		bcs $b85f			bcs 	_TKStandardPunctuation
.d89c	b89c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d89f	b89f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8a1	b8a1	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8a2	b8a2	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8a5	b8a5	38		sec				sec
.d8a6	b8a6	e9 3c		sbc #$3c			sbc 	#'<'
.d8a8	b8a8	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8ab	b8ab	e8		inx				inx 								; consume both
.d8ac	b8ac	e8		inx				inx
.d8ad	b8ad	80 89		bra $b838			bra 	_TKTokeniseLoop
.d8af	b8af					_TKTokeniseIdentifier:
.d8af	b8af	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8b2	b8b2	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8b5	b8b5					_TKCheckLoop:
.d8b5	b8b5	e8		inx				inx 								; look at next, we know first is identifier already.
.d8b6	b8b6	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d8b9	b8b9	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8bb	b8bb	f0 f8		beq $b8b5			beq 	_TKCheckLoop
.d8bd	b8bd	c9 30		cmp #$30			cmp	 	#"0"
.d8bf	b8bf	90 0c		bcc $b8cd			bcc 	_TKEndIdentifier
.d8c1	b8c1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8c3	b8c3	90 f0		bcc $b8b5			bcc 	_TKCheckLoop
.d8c5	b8c5	c9 41		cmp #$41			cmp	 	#"A"
.d8c7	b8c7	90 04		bcc $b8cd			bcc 	_TKEndIdentifier
.d8c9	b8c9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8cb	b8cb	90 e8		bcc $b8b5			bcc 	_TKCheckLoop
.d8cd	b8cd					_TKEndIdentifier:
.d8cd	b8cd	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8d0	b8d0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8d2	b8d2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8d4	b8d4	f0 06		beq $b8dc			beq 	_TKHasTypeCharacter
.d8d6	b8d6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8d8	b8d8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8da	b8da	d0 07		bne $b8e3			bne 	_TKNoTypeCharacter
.d8dc	b8dc					_TKHasTypeCharacter:
.d8dc	b8dc	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8df	b8df	e8		inx				inx 								; consume the type character
.d8e0	b8e0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d8e3	b8e3					_TKNoTypeCharacter:
.d8e3	b8e3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8e5	b8e5	d0 09		bne $b8f0			bne 	_TKNoArray
.d8e7	b8e7	e8		inx				inx 								; skip the (
.d8e8	b8e8	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8eb	b8eb	09 04		ora #$04			ora 	#$04
.d8ed	b8ed	8d 04 04	sta $0404			sta 	identTypeByte
.d8f0	b8f0					_TKNoArray:
.d8f0	b8f0	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8f3	b8f3	20 cb b9	jsr $b9cb			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8f6	b8f6	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8f8	b8f8	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d8fa	b8fa	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d8fd	b8fd	a2 00		ldx #$00			ldx 	#0
.d8ff	b8ff	b0 1f		bcs $b920			bcs 	_TKFoundToken
.d901	b901	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d903	b903	a9 43		lda #$43			lda 	#(KeywordSet1) & $FF
.d905	b905	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d908	b908	a2 81		ldx #$81			ldx 	#$81
.d90a	b90a	b0 14		bcs $b920			bcs 	_TKFoundToken
.d90c	b90c	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d90e	b90e	a9 33		lda #$33			lda 	#(KeywordSet2) & $FF
.d910	b910	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d913	b913	a2 82		ldx #$82			ldx 	#$82
.d915	b915	b0 09		bcs $b920			bcs 	_TKFoundToken
.d917	b917	20 5b ba	jsr $ba5b			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d91a	b91a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d91d	b91d	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop 			; and go round again.
.d920	b920					_TKFoundToken:
.d920	b920	48		pha				pha 								; save token
.d921	b921	8a		txa				txa 								; shift in X, is there one ?
.d922	b922	f0 03		beq $b927			beq 	_TKNoTShift
.d924	b924	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; if so, write it out
.d927	b927					_TKNoTShift:
.d927	b927	68		pla				pla 								; restore and write token
.d928	b928	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d92b	b92b	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d92d	b92d	d0 0d		bne $b93c			bne 	_TKNotRem 			 		; not shifted ?
.d92f	b92f	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d931	b931	d0 09		bne $b93c			bne 	_TKNotRem
.d933	b933	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d936	b936	20 42 b9	jsr $b942			jsr 	TOKCheckComment
.d939	b939	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop
.d93c	b93c					_TKNotRem:
.d93c	b93c	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d93f	b93f	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop 			; and go round again.
.d942	b942					TOKCheckComment:
.d942	b942	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d945	b945	e8		inx				inx
.d946	b946	c9 20		cmp #$20			cmp 	#' '
.d948	b948	f0 f8		beq $b942			beq 	TOKCheckComment
.d94a	b94a	ca		dex				dex 								; first non space character
.d94b	b94b	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d94d	b94d	f0 1f		beq $b96e			beq 	_TOKCCExit 					; then we are okay
.d94f	b94f	c9 00		cmp #$00			cmp 	#0 							; EOL
.d951	b951	f0 1b		beq $b96e			beq 	_TOKCCExit 					; then we are okay
.d953	b953	da		phx				phx
.d954	b954					_TOKCCLowerCase:
.d954	b954	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d957	b957	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d959	b959	90 09		bcc $b964			bcc 	_TOKKCNotUC
.d95b	b95b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d95d	b95d	b0 05		bcs $b964			bcs 	_TOKKCNotUC
.d95f	b95f	49 20		eor #$20			eor 	#$20
.d961	b961	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d964	b964					_TOKKCNotUC:
.d964	b964	e8		inx				inx
.d965	b965	c9 00		cmp #$00			cmp 	#0
.d967	b967	d0 eb		bne $b954			bne 	_TOKCCLowerCase
.d969	b969	fa		plx				plx
.d96a	b96a	ca		dex				dex 								; tokenise string expects initial skip.
.d96b	b96b	20 6f b9	jsr $b96f			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d96e	b96e					_TOKCCExit:
.d96e	b96e	60		rts				rts
.d96f	b96f					TOKTokenString:
.d96f	b96f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d971	b971	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d974	b974	e8		inx				inx									; start of quoted string.
.d975	b975	da		phx				phx 								; push start of string on top
.d976	b976	ca		dex				dex 								; because we pre-increment
.d977	b977					_TSFindEnd:
.d977	b977	e8		inx				inx
.d978	b978	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d97b	b97b	f0 04		beq $b981			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d97d	b97d	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d97f	b97f	d0 f6		bne $b977			bne 	_TSFindEnd
.d981	b981					_TSEndOfString:
.d981	b981	7a		ply				ply  								; so now Y is first character, X is character after end.
.d982	b982	48		pha				pha 								; save terminating character
.d983	b983	20 8b b9	jsr $b98b			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d986	b986	68		pla				pla 								; terminating character
.d987	b987	f0 01		beq $b98a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d989	b989	e8		inx				inx
.d98a	b98a					_TSNotQuote:
.d98a	b98a	60		rts				rts
.d98b	b98b					TOKWriteBlockXY:
.d98b	b98b	86 36		stx $36				stx 	zTemp0 						; save end character
.d98d	b98d	98		tya				tya 								; use 2's complement to work out the byte size
.d98e	b98e	49 ff		eor #$ff			eor 	#$FF
.d990	b990	38		sec				sec
.d991	b991	65 36		adc $36				adc 	zTemp0
.d993	b993	1a		inc a				inc 	a 							; one extra for NULL
.d994	b994	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d997	b997					_TOBlockLoop:
.d997	b997	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d999	b999	f0 09		beq $b9a4			beq 	_TOBlockExit
.d99b	b99b	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d99e	b99e	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9a1	b9a1	c8		iny				iny
.d9a2	b9a2	80 f3		bra $b997			bra 	_TOBlockLoop
.d9a4	b9a4					_TOBlockExit:
.d9a4	b9a4	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9a6	b9a6	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9a9	b9a9	60		rts				rts
.d9aa	b9aa					TOKHexConstant:
.d9aa	b9aa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9ac	b9ac	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9af	b9af	e8		inx				inx									; start of quoted string.
.d9b0	b9b0	da		phx				phx 								; push start of constant on top
.d9b1	b9b1	ca		dex				dex
.d9b2	b9b2					_THFindLoop:
.d9b2	b9b2	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9b3	b9b3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d9b6	b9b6	c9 30		cmp #$30			cmp 	#"0"
.d9b8	b9b8	90 0c		bcc $b9c6			bcc 	_THFoundEnd
.d9ba	b9ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9bc	b9bc	90 f4		bcc $b9b2			bcc 	_THFindLoop
.d9be	b9be	c9 41		cmp #$41			cmp 	#"A"
.d9c0	b9c0	90 04		bcc $b9c6			bcc 	_THFoundEnd
.d9c2	b9c2	c9 47		cmp #$47			cmp 	#"F"+1
.d9c4	b9c4	90 ec		bcc $b9b2			bcc 	_THFindLoop
.d9c6	b9c6					_THFoundEnd:
.d9c6	b9c6	7a		ply				ply 								; restore start
.d9c7	b9c7	20 8b b9	jsr $b98b			jsr 	TOKWriteBlockXY 			; output the block
.d9ca	b9ca	60		rts				rts
.d9cb	b9cb					TOKCalculateHash:
.d9cb	b9cb	da		phx				phx
.d9cc	b9cc	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9cf	b9cf	a9 00		lda #$00			lda 	#0
.d9d1	b9d1					_TCHLoop:
.d9d1	b9d1	18		clc				clc
.d9d2	b9d2	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d9d5	b9d5	e8		inx				inx
.d9d6	b9d6	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9d9	b9d9	d0 f6		bne $b9d1			bne 	_TCHLoop
.d9db	b9db	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9de	b9de	fa		plx				plx
.d9df	b9df	60		rts				rts
.d9e0	b9e0					LCLFixLineBufferCase:
.d9e0	b9e0	a2 00		ldx #$00			ldx 	#0
.d9e2	b9e2					_FLBCLoop:
.d9e2	b9e2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d9e5	b9e5	f0 22		beq $ba09			beq 	_FLBCExit 					; end of string.
.d9e7	b9e7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9e9	b9e9	f0 11		beq $b9fc			beq 	_FLBCInQuotes
.d9eb	b9eb	e8		inx				inx
.d9ec	b9ec	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9ee	b9ee	90 f2		bcc $b9e2			bcc 	_FLBCLoop
.d9f0	b9f0	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9f2	b9f2	b0 ee		bcs $b9e2			bcs 	_FLBCLoop
.d9f4	b9f4	38		sec				sec 								; make U/C
.d9f5	b9f5	e9 20		sbc #$20			sbc 	#32
.d9f7	b9f7	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9fa	b9fa	80 e6		bra $b9e2			bra 	_FLBCLoop
.d9fc	b9fc					_FLBCInQuotes:
.d9fc	b9fc	e8		inx				inx 								; advance
.d9fd	b9fd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.da00	ba00	f0 07		beq $ba09			beq 	_FLBCExit 					; exit on EOS
.da02	ba02	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da04	ba04	d0 f6		bne $b9fc			bne 	_FLBCInQuotes
.da06	ba06	e8		inx				inx 								; skip over it
.da07	ba07	80 d9		bra $b9e2			bra 	_FLBCLoop
.da09	ba09					_FLBCExit:
.da09	ba09	60		rts				rts
.da0a	ba0a					TOKExtractLineNumber:
.da0a	ba0a	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.da0d	ba0d	48		pha				pha
.da0e	ba0e	ad 2b 04	lda $042b			lda 	tokenLineNumber
.da11	ba11	48		pha				pha
.da12	ba12	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 2
.da15	ba15	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 4
.da18	ba18	18		clc				clc 								; add stacked value
.da19	ba19	68		pla				pla
.da1a	ba1a	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da1d	ba1d	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da20	ba20	68		pla				pla
.da21	ba21	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.da24	ba24	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.da27	ba27	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 10
.da2a	ba2a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.da2d	ba2d	e8		inx				inx
.da2e	ba2e	29 0f		and #$0f			and 	#15 						; add to line #
.da30	ba30	18		clc				clc
.da31	ba31	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da34	ba34	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da37	ba37	90 03		bcc $ba3c			bcc 	_TLENNoCarry
.da39	ba39	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.da3c	ba3c					_TLENNoCarry:
.da3c	ba3c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.da3f	ba3f	c9 30		cmp #$30			cmp 	#'0'
.da41	ba41	90 04		bcc $ba47			bcc 	_TLENExit
.da43	ba43	c9 3a		cmp #$3a			cmp 	#'9'+1
.da45	ba45	90 c3		bcc $ba0a			bcc 	TOKExtractLineNumber
.da47	ba47					_TLENExit:
.da47	ba47	60		rts				rts
.da48	ba48					_LCLNTimes2:
.da48	ba48	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da4b	ba4b	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da4e	ba4e	60		rts				rts
.da4f	ba4f					TOKWriteByte:
.da4f	ba4f	da		phx				phx
.da50	ba50	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da53	ba53	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da56	ba56	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da59	ba59	fa		plx				plx
.da5a	ba5a	60		rts				rts
.da5b	ba5b					TOKCheckCreateVariableRecord:
.da5b	ba5b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da5d	ba5d	85 36		sta $36				sta 	0+zTemp0
.da5f	ba5f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da61	ba61	85 37		sta $37				sta 	1+zTemp0
.da63	ba63					_CCVSearch:
.da63	ba63	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da65	ba65	f0 2c		beq $ba93			beq 	_CCVFail
.da67	ba67	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da69	ba69	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da6b	ba6b	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da6e	ba6e	d0 16		bne $ba86			bne 	_CCVNext
.da70	ba70	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da72	ba72	ae 00 04	ldx $0400			ldx 	identStart
.da75	ba75					_CCVCompare:
.da75	ba75	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da78	ba78	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da7a	ba7a	e8		inx				inx 								; advance pointers
.da7b	ba7b	c8		iny				iny
.da7c	ba7c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da7d	ba7d	d0 07		bne $ba86			bne 	_CCVNext  					; didn't match go to next.
.da7f	ba7f	90 f4		bcc $ba75			bcc 	_CCVCompare 				; not finished yet.
.da81	ba81	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da84	ba84	f0 41		beq $bac7			beq 	_CCVFound 					; yes, we were successful
.da86	ba86					_CCVNext:
.da86	ba86	18		clc				clc 								; go to next record.
.da87	ba87	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da89	ba89	65 36		adc $36				adc 	zTemp0
.da8b	ba8b	85 36		sta $36				sta 	zTemp0
.da8d	ba8d	90 d4		bcc $ba63			bcc 	_CCVSearch
.da8f	ba8f	e6 37		inc $37				inc 	zTemp0+1
.da91	ba91	80 d0		bra $ba63			bra 	_CCVSearch
.da93	ba93					_CCVFail:
.da93	ba93	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da95	ba95	ad 03 04	lda $0403			lda 	identHash
.da98	ba98	91 36		sta ($36),y			sta 	(zTemp0),y
.da9a	ba9a	c8		iny				iny 								; offset 2 is the type byte
.da9b	ba9b	ad 04 04	lda $0404			lda 	identTypeByte
.da9e	ba9e	91 36		sta ($36),y			sta 	(zTemp0),y
.daa0	baa0	c8		iny				iny
.daa1	baa1					_CCVData:
.daa1	baa1	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daa3	baa3	91 36		sta ($36),y			sta 	(zTemp0),y
.daa5	baa5	c8		iny				iny
.daa6	baa6	c0 08		cpy #$08			cpy 	#8
.daa8	baa8	90 f7		bcc $baa1			bcc 	_CCVData
.daaa	baaa	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daad	baad					_CCVCopyName:
.daad	baad	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.dab0	bab0	91 36		sta ($36),y			sta 	(zTemp0),y
.dab2	bab2	e8		inx				inx
.dab3	bab3	c8		iny				iny
.dab4	bab4	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dab7	bab7	d0 f4		bne $baad			bne 	_CCVCopyName
.dab9	bab9	98		tya				tya 								; patch offset
.daba	baba	92 36		sta ($36)			sta 	(zTemp0)
.dabc	babc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dabe	babe	91 36		sta ($36),y			sta 	(zTemp0),y
.dac0	bac0	88		dey				dey
.dac1	bac1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dac3	bac3	09 80		ora #$80			ora 	#$80
.dac5	bac5	91 36		sta ($36),y			sta 	(zTemp0),y
.dac7	bac7					_CCVFound:
.dac7	bac7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dac9	bac9	38		sec				sec
.daca	baca	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dacc	bacc	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dace	bace	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.dad1	bad1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dad3	bad3	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.dad6	bad6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dad7	bad7					SNDCheckChannel:
.dad7	bad7	aa		tax				tax
.dad8	bad8	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dadb	badb	d0 38		bne $bb15			bne 	_SNDCCExit
.dadd	badd	da		phx				phx 								; save current channel
.dade	bade	8a		txa				txa 								; put in A
.dadf	badf	20 5b bb	jsr $bb5b			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dae2	bae2	68		pla				pla 								; channel # in A
.dae3	bae3	90 30		bcc $bb15			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dae5	bae5	a8		tay				tay 								; Y is the channel #
.dae6	bae6	bd 47 08	lda $0847,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dae9	bae9	99 46 09	sta $0946,y			sta 	SNDPitchLow,y
.daec	baec	bd 48 08	lda $0848,x			lda 	SNDQueue+2,x
.daef	baef	99 4a 09	sta $094a,y			sta 	SNDPitchHigh,y
.daf2	baf2	bd 49 08	lda $0849,x			lda 	SNDQueue+3,x
.daf5	baf5	99 4e 09	sta $094e,y			sta 	SNDVolume,y
.daf8	baf8	bd 4a 08	lda $084a,x			lda 	SNDQueue+4,x
.dafb	bafb	99 52 09	sta $0952,y			sta 	SNDTimeLeft,y
.dafe	bafe	bd 4b 08	lda $084b,x			lda 	SNDQueue+5,x
.db01	bb01	99 56 09	sta $0956,y			sta 	SNDAdjustLow,y
.db04	bb04	bd 4c 08	lda $084c,x			lda 	SNDQueue+6,x
.db07	bb07	99 5a 09	sta $095a,y			sta 	SNDAdjustHigh,y
.db0a	bb0a	5a		phy				phy 								; save channel #
.db0b	bb0b	20 75 bb	jsr $bb75			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db0e	bb0e	ce 45 08	dec $0845			dec 	SNDLength 					; reduce the queue length.
.db11	bb11	68		pla				pla
.db12	bb12	20 16 bb	jsr $bb16			jsr 	SNDUpdateNote 				; update channel A
.db15	bb15					_SNDCCExit:
.db15	bb15	60		rts				rts
.db16	bb16					SNDUpdateNote:
.db16	bb16	aa		tax				tax 								; so we can access records
.db17	bb17	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db18	bb18	0a		asl a				asl 	a
.db19	bb19	0a		asl a				asl 	a
.db1a	bb1a	0a		asl a				asl 	a
.db1b	bb1b	0a		asl a				asl 	a
.db1c	bb1c	8d 44 08	sta $0844			sta 	SNDChannelBits
.db1f	bb1f	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; are we silent
.db22	bb22	f0 2e		beq $bb52			beq 	_SNDUNIsSilent
.db24	bb24	ad 44 08	lda $0844			lda 	SNDChannelBits 				; push channel bits on stack
.db27	bb27	48		pha				pha
.db28	bb28	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db2b	bb2b	29 0f		and #$0f			and 	#$0F
.db2d	bb2d	0d 44 08	ora $0844			ora 	SNDChannelBits 				; set channel bits
.db30	bb30	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db32	bb32	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.db35	bb35	bd 4a 09	lda $094a,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db38	bb38	8d 44 08	sta $0844			sta 	SNDChannelBits
.db3b	bb3b	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x
.db3e	bb3e	4e 44 08	lsr $0844			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db41	bb41	6a		ror a				ror 	a
.db42	bb42	4e 44 08	lsr $0844			lsr 	SNDChannelBits
.db45	bb45	6a		ror a				ror 	a
.db46	bb46	4a		lsr a				lsr 	a 							; put in bits 0-5
.db47	bb47	4a		lsr a				lsr 	a
.db48	bb48	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts 				; write as rest of pitch register
.db4b	bb4b	68		pla				pla
.db4c	bb4c	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db4e	bb4e	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.db51	bb51	60		rts				rts
.db52	bb52					_SNDUNIsSilent:
.db52	bb52	ad 44 08	lda $0844			lda 	SNDChannelBits 				; channel bits
.db55	bb55	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db57	bb57	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts 				; write to the ports
.db5a	bb5a	60		rts				rts
.db5b	bb5b					SNDFindNextNoteForA:
.db5b	bb5b	ac 45 08	ldy $0845			ldy 	SNDLength 					; queue size into Y
.db5e	bb5e	f0 13		beq $bb73			beq 	_SNDFNNFail 				; queue empty.
.db60	bb60	a2 00		ldx #$00			ldx 	#0
.db62	bb62					_SNDFNNSearch:
.db62	bb62	dd 46 08	cmp $0846,x			cmp 	SNDQueue,x 					; does it match the channel
.db65	bb65	38		sec				sec
.db66	bb66	f0 0c		beq $bb74			beq 	_SNDFNNExit 				; if so exit with CS.
.db68	bb68	e8		inx				inx 								; next queue slot.
.db69	bb69	e8		inx				inx
.db6a	bb6a	e8		inx				inx
.db6b	bb6b	e8		inx				inx
.db6c	bb6c	e8		inx				inx
.db6d	bb6d	e8		inx				inx
.db6e	bb6e	e8		inx				inx
.db6f	bb6f	e8		inx				inx
.db70	bb70	88		dey				dey 								; done the whole queue
.db71	bb71	d0 ef		bne $bb62			bne 	_SNDFNNSearch 				; no, go back.
.db73	bb73					_SNDFNNFail:
.db73	bb73	18		clc				clc
.db74	bb74					_SNDFNNExit:
.db74	bb74	60		rts				rts
.db75	bb75					SNDDeleteXFromQueue:
.db75	bb75	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db77	bb77	f0 09		beq $bb82			beq 	_SNDDXExit
.db79	bb79	bd 4e 08	lda $084e,x			lda 	SNDQueue+8,x
.db7c	bb7c	9d 46 08	sta $0846,x			sta 	SNDQueue,x
.db7f	bb7f	e8		inx				inx
.db80	bb80	80 f3		bra $bb75			bra 	SNDDeleteXFromQueue
.db82	bb82					_SNDDXExit:
.db82	bb82	60		rts				rts
.0844						SNDChannelBits:
>0844								.fill 	1
.db83	bb83					SNDQueueRequest:
.db83	bb83	86 36		stx $36				stx 	zTemp0						; save queue address
.db85	bb85	84 37		sty $37				sty 	zTemp0+1
.db87	bb87	ae 45 08	ldx $0845			ldx 	SNDLength 					; queue is full, can't take any more.
.db8a	bb8a	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db8c	bb8c	f0 21		beq $bbaf			beq 	_SNDQRExit
.db8e	bb8e	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db90	bb90	48		pha				pha
.db91	bb91	8a		txa				txa  								; get offset in queue buffer/
.db92	bb92	0a		asl a				asl 	a
.db93	bb93	0a		asl a				asl 	a
.db94	bb94	0a		asl a				asl 	a
.db95	bb95	aa		tax				tax
.db96	bb96	68		pla				pla 								; get back and push again
.db97	bb97	48		pha				pha
.db98	bb98	9d 46 08	sta $0846,x			sta 	SNDQueue+0,x 				; save the channel #
.db9b	bb9b	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db9d	bb9d					_SNDQCopy:
.db9d	bb9d	b1 36		lda ($36),y			lda 	(zTemp0),y
.db9f	bb9f	e8		inx				inx
.dba0	bba0	c8		iny				iny
.dba1	bba1	9d 46 08	sta $0846,x			sta 	SNDQueue,x
.dba4	bba4	c0 06		cpy #$06			cpy 	#6
.dba6	bba6	d0 f5		bne $bb9d			bne 	_SNDQCopy
.dba8	bba8	ee 45 08	inc $0845			inc 	SNDLength 					; bump queue length.
.dbab	bbab	68		pla				pla 								; get channel # back
.dbac	bbac	20 d7 ba	jsr $bad7			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbaf	bbaf					_SNDQRExit:
.dbaf	bbaf	60		rts				rts
.dbb0	bbb0					SNDSilenceChannel:
.dbb0	bbb0	aa		tax				tax 								; zero time left.
.dbb1	bbb1	9e 52 09	stz $0952,x			stz 	SNDTimeLeft,x
.dbb4	bbb4	0a		asl a				asl 	a 							; shift into position
.dbb5	bbb5	0a		asl a				asl 	a
.dbb6	bbb6	0a		asl a				asl 	a
.dbb7	bbb7	0a		asl a				asl 	a
.dbb8	bbb8	0a		asl a				asl 	a
.dbb9	bbb9	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbbb	bbbb	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.dbbe	bbbe	60		rts				rts
.dbbf	bbbf					SNDWritePorts:
.dbbf	bbbf	da		phx				phx 								; save X
.dbc0	bbc0	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbc2	bbc2	64 01		stz $01				stz 	1 							; access I/O page 0
.dbc4	bbc4	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbc7	bbc7	8d 10 d6	sta $d610			sta 	$D610
.dbca	bbca	86 01		stx $01				stx 	1 							; restore I/O
.dbcc	bbcc	fa		plx				plx 								; restore X
.dbcd	bbcd	60		rts				rts
.dbce	bbce					Export_SNDCommand:
.dbce	bbce	da		phx				phx 								; save XY
.dbcf	bbcf	5a		phy				phy
.dbd0	bbd0	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbd2	bbd2	f0 1d		beq $bbf1			beq 	_SNDInitialise
.dbd4	bbd4	90 28		bcc $bbfe			bcc 	_SNDExit
.dbd6	bbd6	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbd8	bbd8	f0 17		beq $bbf1			beq 	_SNDSilence
.dbda	bbda	b0 22		bcs $bbfe			bcs 	_SNDExit
.dbdc	bbdc	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbde	bbde	b0 09		bcs $bbe9			bcs 	_SNDQueryPlay
.dbe0	bbe0	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbe2	bbe2	b0 1a		bcs $bbfe			bcs 	_SNDExit
.dbe4	bbe4	20 83 bb	jsr $bb83			jsr 	SNDQueueRequest
.dbe7	bbe7	80 15		bra $bbfe			bra 	_SNDExit
.dbe9	bbe9					_SNDQueryPlay:
.dbe9	bbe9	29 03		and #$03			and 	#3 							; get channel #
.dbeb	bbeb	aa		tax				tax
.dbec	bbec	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbef	bbef	80 0d		bra $bbfe			bra 	_SNDExit
.dbf1	bbf1					_SNDInitialise:
.dbf1	bbf1					_SNDSilence:
.dbf1	bbf1	9c 45 08	stz $0845			stz 	SNDLength 					; empty the queue.
.dbf4	bbf4	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbf6	bbf6					_SNDSilenceLoop:
.dbf6	bbf6	48		pha				pha
.dbf7	bbf7	20 b0 bb	jsr $bbb0			jsr 	SNDSilenceChannel
.dbfa	bbfa	68		pla				pla
.dbfb	bbfb	3a		dec a				dec 	a
.dbfc	bbfc	10 f8		bpl $bbf6			bpl 	_SNDSilenceLoop
.dbfe	bbfe					_SNDExit:
.dbfe	bbfe	7a		ply				ply
.dbff	bbff	fa		plx				plx
.dc00	bc00	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0845						SNDLength:
>0845								.fill 	1
.0846						SNDQueue:
>0846								.fill 	SNDQueueSize * 8
.0946						SNDPitchLow:
>0946								.fill 	4
.094a						SNDPitchHigh:
>094a								.fill 	4
.094e						SNDVolume:
>094e								.fill 	4
.0952						SNDTimeLeft:
>0952								.fill 	4
.0956						SNDAdjustLow:
>0956								.fill 	4
.095a						SNDAdjustHigh:
>095a								.fill 	4
.dc01	bc01					Export_SNDUpdate:
.dc01	bc01					PagedSNDUpdate:
.dc01	bc01	ad 52 09	lda $0952			lda 	SNDTimeLeft+0 				; look at time remaining
.dc04	bc04	f0 05		beq $bc0b			beq 	_SNDUNot0 					; not playing
.dc06	bc06	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc08	bc08	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel 			; update it.
.dc0b	bc0b					_SNDUNot0:
.dc0b	bc0b	ad 53 09	lda $0953			lda 	SNDTimeLeft+1
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot1
.dc10	bc10	a2 01		ldx #$01			ldx 	#1
.dc12	bc12	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc15	bc15					_SNDUNot1:
.dc15	bc15	ad 54 09	lda $0954			lda 	SNDTimeLeft+2
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot2
.dc1a	bc1a	a2 02		ldx #$02			ldx 	#2
.dc1c	bc1c	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot2:
.dc1f	bc1f	ad 55 09	lda $0955			lda 	SNDTimeLeft+3
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot3
.dc24	bc24	a2 03		ldx #$03			ldx 	#3
.dc26	bc26	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot3:
.dc29	bc29	60		rts				rts
.dc2a	bc2a					SNDUpdateChannel:
.dc2a	bc2a	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc2c	bc2c	f0 2c		beq $bc5a			beq 	_SNDUCExit
.dc2e	bc2e	3a		dec a				dec 	a 							; decrement and update timer
.dc2f	bc2f	9d 52 09	sta $0952,x			sta 	SNDTimeLeft,x
.dc32	bc32	f0 1d		beq $bc51			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc34	bc34	bd 56 09	lda $0956,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc37	bc37	1d 5a 09	ora $095a,x			ora 	SNDAdjustHigh,x
.dc3a	bc3a	f0 1e		beq $bc5a			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc3c	bc3c	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc3d	bc3d	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x
.dc40	bc40	7d 56 09	adc $0956,x			adc 	SNDAdjustLow,x
.dc43	bc43	9d 46 09	sta $0946,x			sta 	SNDPitchLow,x
.dc46	bc46	bd 4a 09	lda $094a,x			lda 	SNDPitchHigh,x
.dc49	bc49	7d 5a 09	adc $095a,x			adc 	SNDAdjustHigh,x
.dc4c	bc4c	29 03		and #$03			and 	#3
.dc4e	bc4e	9d 4a 09	sta $094a,x			sta 	SNDPitchHigh,x
.dc51	bc51					_SNDUCUpdate:
.dc51	bc51	8a		txa				txa 								; which channel.
.dc52	bc52	48		pha				pha
.dc53	bc53	20 16 bb	jsr $bb16			jsr 	SNDUpdateNote 				; update the current note
.dc56	bc56	68		pla				pla
.dc57	bc57	20 d7 ba	jsr $bad7			jsr 	SNDCheckChannel 			; more to do ?
.dc5a	bc5a					_SNDUCExit:
.dc5a	bc5a	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
