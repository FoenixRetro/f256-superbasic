
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Nov 19 19:02:26 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 c0 a9	jsr $a9c0			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 b2 8d	jsr $8db2			jsr 	PrintStringXA
.8014	20 5b 88	jsr $885b			jsr 	NewProgram 					; erase current program
.8017	20 fe 82	jsr $82fe			jsr 	BackloadProgram
.801a	4c fa 89	jmp $89fa			jmp 	CommandRun
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 61			.text "Built Saturday 19-Nov-2022. Build 3204."
>8064	74 75 72 64 61 79 20 31 39 2d 4e 6f 76 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 33 32 30 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8086					AssembleGroup1:
.8086	a9 ff		lda #$ff			lda 	#$FF
.8088	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808b	80 02		bra $808f			bra 	AsmGroup12
.808d					AssembleGroup2:
.808d	a9 00		lda #$00			lda 	#$00
.808f					AsmGroup12:
.808f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8092	68		pla				pla 								; pop the return address to access the information following.
.8093	fa		plx				plx
.8094	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get opcode and save as base
.8097	8d a4 04	sta $04a4			sta 	BaseOpcode
.809a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809d	d0 08		bne $80a7			bne 	_AG12HaveMask
.809f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a1	20 25 81	jsr $8125			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a4	8d a5 04	sta $04a5			sta 	ModeMask
.80a7					_AG12HaveMask:
.80a7	20 60 82	jsr $8260			jsr 	TypeAndCalculateOperand 	; get zero page type
.80aa	da		phx				phx 								; save found address mode
.80ab	20 89 81	jsr $8189			jsr 	AssembleModeX
.80ae	fa		plx				plx  								; restore address mode
.80af	b0 0b		bcs $80bc			bcs 	_AG12Exit
.80b1	20 bd 80	jsr $80bd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b4	20 89 81	jsr $8189			jsr 	AssembleModeX
.80b7	b0 03		bcs $80bc			bcs 	_AG12Exit
.80b9	4c a6 9f	jmp $9fa6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bc					_AG12Exit:
.80bc	60		rts				rts
.80bd					PromoteToAbsolute:
.80bd	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bf	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c1	f0 19		beq $80dc			beq 	_PTADo
.80c3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c7	f0 13		beq $80dc			beq 	_PTADo
.80c9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cb	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cd	f0 0d		beq $80dc			beq 	_PTADo
.80cf	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d3	f0 07		beq $80dc			beq 	_PTADo
.80d5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d9	f0 01		beq $80dc			beq 	_PTADo
.80db	60		rts				rts
.80dc					_PTADo:
.80dc	aa		tax				tax
.80dd	60		rts				rts
.80de					AssembleGroup3:
.80de	68		pla				pla 								; get parameters, which is just the opcode.
.80df	fa		plx				plx
.80e0	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get and output opcode
.80e3	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.80e6	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get a 16 bit operand
.80e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ec	38		sec				sec
.80ed	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f0	48		pha				pha 								; LSB in A
.80f1	ad 10 04	lda $0410			lda 	NSMantissa1
.80f4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f7	aa		tax				tax 								; MSB in X
.80f8	68		pla				pla
.80f9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fa	69 7f		adc #$7f			adc 	#$7F
.80fc	90 01		bcc $80ff			bcc 	_AG3NoCarry
.80fe	e8		inx				inx
.80ff					_AG3NoCarry:
.80ff	38		sec				sec 								; fix back and write out anyways.
.8100	e9 80		sbc #$80			sbc 	#$80
.8102	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.8105	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8107	f0 0a		beq $8113			beq 	_AG3Exit
.8109	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810c	29 01		and #$01			and 	#1
.810e	f0 03		beq $8113			beq 	_AG3Exit
.8110	4c ab 9f	jmp $9fab			jmp 	RangeError 					; no, branch is out of range
.8113					_AG3Exit:
.8113	60		rts				rts
.8114					AssembleGroup4:
.8114	68		pla				pla 								; pop address
.8115	fa		plx				plx
.8116	20 1d 81	jsr $811d			jsr 	AccessParameters 			; access and get first
.8119	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 			; output it.
.811c	60		rts				rts
.811d					AccessParameters:
.811d	8d a1 04	sta $04a1			sta 	ParamStart
.8120	8e a2 04	stx $04a2			stx 	ParamStart+1
.8123	a9 01		lda #$01			lda 	#1
.8125					GetParameter:
.8125	5a		phy				phy
.8126	a8		tay				tay
.8127	ad a1 04	lda $04a1			lda 	ParamStart
.812a	85 36		sta $36				sta 	zTemp0
.812c	ad a2 04	lda $04a2			lda 	ParamStart+1
.812f	85 37		sta $37				sta 	zTemp0+1
.8131	b1 36		lda ($36),y			lda 	(zTemp0),y
.8133	7a		ply				ply
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8135					AssemblerWriteByte:
.8135	48		pha			pha
.8136	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8139	29 02		and #$02		and 	#2
.813b	f0 1b		beq $8158		beq 	_AWBNoPrint
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8140	20 73 81	jsr $8173		jsr 	PrintHex
.8143	ad 9e 04	lda $049e		lda		AssemblerAddress
.8146	20 73 81	jsr $8173		jsr 	PrintHex
.8149	a9 20		lda #$20		lda 	#' '
.814b	20 4c a7	jsr $a74c		jsr 	EXTPrintCharacter
.814e	68		pla			pla 									; print byte
.814f	48		pha			pha
.8150	20 73 81	jsr $8173		jsr 	PrintHex
.8153	a9 0d		lda #$0d		lda 	#13
.8155	20 4c a7	jsr $a74c		jsr 	EXTPrintCharacter
.8158					_AWBNoPrint:
.8158	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815b	85 36		sta $36			sta 	zTemp0
.815d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8160	f0 0e		beq $8170		beq 	_AWBRange
.8162	85 37		sta $37			sta 	zTemp0+1
.8164	68		pla			pla 									; write byte out
.8165	92 36		sta ($36)		sta 	(zTemp0)
.8167	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816a	d0 03		bne $816f		bne 	_AWBNoCarry
.816c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816f					_AWBNoCarry:
.816f	60		rts			rts
.8170					_AWBRange:
.8170	4c ab 9f	jmp $9fab		jmp 	RangeError
.8173					PrintHex:
.8173	48		pha				pha
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	20 7c 81	jsr $817c			jsr 	_PrintNibble
.817b	68		pla				pla
.817c					_PrintNibble:
.817c	29 0f		and #$0f			and 	#15
.817e	c9 0a		cmp #$0a			cmp 	#10
.8180	90 02		bcc $8184			bcc 	_NoShift
.8182	69 06		adc #$06			adc 	#6
.8184					_NoShift:
.8184	69 30		adc #$30			adc 	#48
.8186	4c 4c a7	jmp $a74c			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8189					AssembleModeX:
.8189	5a		phy				phy
.818a	ad a3 04	lda $04a3			lda 	IsGroup1
.818d	f0 17		beq $81a6			beq 	_AMXGroup2
.818f	8a		txa				txa 							; is it in group # 1
.8190	29 40		and #$40			and 	#AM_ISG1
.8192	f0 50		beq $81e4			beq 	_AMXFail 				; no, give up.
.8194	8a		txa				txa 							; get back.
.8195	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8197	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8199	d0 22		bne $81bd			bne 	_AMXHaveInfo
.819b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819e	c9 81		cmp #$81			cmp 	#$81
.81a0	f0 42		beq $81e4			beq 	_AMXFail
.81a2	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a4	80 17		bra $81bd			bra 	_AMXHaveInfo 			; odd design decision there.
.81a6					_AMXGroup2:
.81a6	8a		txa				txa 							; is it in group 2 ?
.81a7	29 20		and #$20			and 	#AM_ISG2
.81a9	f0 39		beq $81e4			beq 	_AMXFail 				; no, give up.
.81ab	8a		txa				txa 							; get the offset into Y
.81ac	29 1f		and #$1f			and 	#$1F
.81ae	4a		lsr a				lsr 	a 						; make it 0-7.
.81af	4a		lsr a				lsr  	a
.81b0	a8		tay				tay
.81b1	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b4					_AMXCheckOkay:
.81b4	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b5	88		dey				dey
.81b6	10 fc		bpl $81b4			bpl 	_AMXCheckOkay
.81b8	90 2a		bcc $81e4			bcc 	_AMXFail 				; not allowed.
.81ba	8a		txa				txa  							; get mask back
.81bb	29 1f		and #$1f			and 	#$1F
.81bd					_AMXHaveInfo:
.81bd	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bf	10 05		bpl $81c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c4	d0 1e		bne $81e4			bne 	_AMXFail
.81c6					_AMXAnySize:
.81c6	18		clc				clc 							; add offset to the base opcode
.81c7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81ca					_AMXOutputCode:
.81ca	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cd	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cf	f0 10		beq $81e1			beq 	_AMXExit
.81d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d4	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81d7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d9	30 06		bmi $81e1			bmi 	_AMXExit
.81db	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81de	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81e1					_AMXExit:
.81e1	7a		ply				ply
.81e2	38		sec				sec
.81e3	60		rts				rts
.81e4					_AMXFail:
.81e4	a0 00		ldy #$00			ldy 	#0
.81e6					_AMXCheckOddities:
.81e6	8a		txa				txa
.81e7	d9 0f 82	cmp $820f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ea	d0 16		bne $8202			bne 	_AMXCONext
.81ec	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ef	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f2	d0 0e		bne $8202			bne 	_AMXCONext
.81f4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f6	10 05		bpl $81fd			bpl 	_AMXCONotZero
.81f8	ad 10 04	lda $0410			lda 	NSMantissa1
.81fb	d0 05		bne $8202			bne 	_AMXCONext
.81fd					_AMXCONotZero:
.81fd	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8200	80 c8		bra $81ca			bra 	_AMXOutputCode 			; and assemble it
.8202					_AMXCONext:
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; end of table
.8208	d0 dc		bne $81e6			bne 	_AMXCheckOddities
.820a					_AMXCOFail:
.820a	7a		ply				ply
.820b	18		clc				clc
.820c	60		rts				rts
.820d					ExtraOpcode:
>820d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8210	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8213	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8216	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8219	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8222	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8225	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8228	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822c					LabelHere:
.822c	c8		iny				iny 								; skip .
.822d	a2 00		ldx #$00			ldx 	#0 							; get a term
.822f	20 e2 97	jsr $97e2			jsr 	EvaluateTerm 				; get a term
.8232	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8235	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8237	d0 24		bne $825d			bne 	_ALType
.8239	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823c	85 36		sta $36				sta 	zTemp0
.823e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8241	85 37		sta $37				sta 	zTemp0+1
.8243	5a		phy				phy 								; copy address in.
.8244	a0 01		ldy #$01			ldy 	#1
.8246	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8249	92 36		sta ($36)			sta 	(zTemp0)
.824b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824e	91 36		sta ($36),y			sta 	(zTemp0),y
.8250	c8		iny				iny
.8251	a9 00		lda #$00			lda 	#0
.8253	91 36		sta ($36),y			sta 	(zTemp0),y
.8255	c8		iny				iny
.8256	91 36		sta ($36),y			sta 	(zTemp0),y
.8258	c8		iny				iny
.8259	91 36		sta ($36),y			sta 	(zTemp0),y
.825b	7a		ply				ply
.825c	60		rts				rts
.825d					_ALType:
.825d	4c b0 9f	jmp $9fb0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8260					TypeAndCalculateOperand:
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8264	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8266	f0 5b		beq $82c3			beq 	_TACOExit
.8268	c9 80		cmp #$80			cmp 	#KWC_EOL
.826a	f0 57		beq $82c3			beq 	_TACOExit
.826c	c8		iny				iny
.826d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8271	f0 51		beq $82c4			beq 	CalculateOperand
.8273	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8275	f0 1f		beq $8296			beq 	_TACOIndirect
.8277	88		dey				dey 								; undo get of first character
.8278	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get operand
.827b	b1 30		lda ($30),y			lda 	(codePtr),y
.827d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8281	d0 40		bne $82c3			bne 	_TACOExit
.8283	c8		iny				iny
.8284	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8287	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8289	c9 58		cmp #$58			cmp 	#'X'
.828b	f0 36		beq $82c3			beq 	_TACOExit
.828d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828f	c9 59		cmp #$59			cmp 	#'Y'
.8291	f0 30		beq $82c3			beq 	_TACOExit
.8293					_TACOSyntax:
.8293	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.8296					_TACOIndirect:
.8296	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get the operand
.8299	b1 30		lda ($30),y			lda 	(codePtr),y
.829b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829d	f0 17		beq $82b6			beq 	_TACOIndX
.829f	20 40 8d	jsr $8d40			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a2	b1 30		lda ($30),y			lda 	(codePtr),y
.82a4	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a8	d0 19		bne $82c3			bne 	_TACOExit
.82aa	c8		iny				iny
.82ab	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ae	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b0	d0 e1		bne $8293			bne 	_TACOSyntax
.82b2	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b4	80 0d		bra $82c3			bra 	_TACOExit
.82b6					_TACOIndX:
.82b6	c8		iny				iny
.82b7	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ba	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bc	d0 d5		bne $8293			bne 	_TACOSyntax
.82be	20 40 8d	jsr $8d40			jsr 	CheckRightBracket			; check )
.82c1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c3					_TACOExit:
.82c3	60		rts				rts
.82c4					CalculateOperand:
.82c4	48		pha				pha
.82c5	da		phx				phx
.82c6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c8	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.82cb	fa		plx				plx
.82cc	68		pla				pla
.82cd	60		rts				rts
.82ce					TACOCheckXY:
.82ce	b1 30		lda ($30),y			lda 	(codePtr),y
.82d0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d2	c9 40		cmp #$40			cmp 	#$40
.82d4	d0 21		bne $82f7			bne 	_TCXYFail
.82d6	b1 30		lda ($30),y			lda 	(codePtr),y
.82d8	18		clc				clc
.82d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82db	85 37		sta $37				sta 	zTemp0+1
.82dd	c8		iny				iny
.82de	b1 30		lda ($30),y			lda 	(codePtr),y
.82e0	c8		iny				iny
.82e1	85 36		sta $36				sta 	zTemp0
.82e3	5a		phy				phy 								; save position
.82e4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e8	d0 0c		bne $82f6			bne 	_TCXYPopFail
.82ea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f0	f0 08		beq $82fa			beq 	_TCXYFound
.82f2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f4	f0 04		beq $82fa			beq 	_TCXYFound
.82f6					_TCXYPopFail:
.82f6	7a		ply				ply
.82f7					_TCXYFail:
.82f7	a9 00		lda #$00			lda 	#0
.82f9	60		rts				rts
.82fa					_TCXYFound:
.82fa	7a		ply				ply 								; restore position
.82fb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fe					BackloadProgram:
.82fe	a2 ff		ldx #$ff			ldx 	#$FF
.8300	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.8303	20 2d 83	jsr $832d			jsr 	BLReadByte
.8306	30 1e		bmi $8326			bmi 	_BPExit
.8308					_BPCopy:
.8308	e8		inx				inx  								; copy byte in
.8309	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.830c	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830f	20 2d 83	jsr $832d			jsr 	BLReadByte 					; read next byte
.8312	30 0a		bmi $831e			bmi 	_BPEndLine 					; -ve = EOL
.8314	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8316	d0 02		bne $831a			bne 	_BPNotTab
.8318	a9 20		lda #$20			lda 	#' '
.831a					_BPNotTab:
.831a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831c	b0 ea		bcs $8308			bcs 	_BPCopy
.831e					_BPEndLine:
.831e	20 56 b5	jsr $b556			jsr 	TokeniseLine 				; tokenise the line.
.8321	20 3b 83	jsr $833b			jsr 	EditProgramCode
.8324	80 d8		bra $82fe			bra 	BackloadProgram
.8326					_BPExit:
.8326	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.8329	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear variables etc.
.832c	60		rts				rts
.832d					BLReadByte:
.832d					_BLLoad:
.832d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8330	ee 2e 83	inc $832e			inc 	_BLLoad+1
.8333	d0 03		bne $8338			bne 	_BLNoCarry
.8335	ee 2f 83	inc $832f			inc 	_BLLoad+2
.8338					_BLNoCarry:
.8338	c9 00		cmp #$00			cmp 	#0
.833a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.833b					EditProgramCode:
.833b	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.833e	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.8341	20 2b a2	jsr $a22b			jsr 	MemorySearch
.8344	90 05		bcc $834b			bcc 	_EPCNoDelete 				; reached the end don't delete
.8346	d0 03		bne $834b			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8348	20 4c a1	jsr $a14c			jsr 	MemoryDeleteLine 			; delete the line
.834b					_EPCNoDelete:
.834b	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.834e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8350	f0 0d		beq $835f			beq 	_EPCNoInsert
.8352	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8355	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8358	20 2b a2	jsr $a22b			jsr 	MemorySearch
.835b	18		clc				clc 								; insert at this point.
.835c	20 83 a1	jsr $a183			jsr 	MemoryInsertLine 			; insert the line
.835f					_EPCNoInsert:
.835f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8360					WarmStart:
.8360	a2 ff		ldx #$ff			ldx 	#$FF
.8362	9a		txs				txs
.8363	20 da a8	jsr $a8da			jsr 	EXTInputLine 				; get line to lineBuffer
.8366	20 56 b5	jsr $b556			jsr 	TokeniseLine 				; tokenise the line
.8369	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.836c	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.836f	d0 17		bne $8388			bne 	_WSEditCode 				; if so,edit code.
.8371	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8374	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8376	85 30		sta $30				sta 	codePtr
.8378	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.837a	85 31		sta $31				sta 	codePtr+1
.837c	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.837f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8381	f0 dd		beq $8360			beq 	WarmStart
.8383	20 0c 8a	jsr $8a0c			jsr 	RUNCodePointerLine 			; execute that line.
.8386	80 d8		bra $8360			bra 	WarmStart
.8388					_WSEditCode:
.8388	20 3b 83	jsr $833b			jsr 	EditProgramCode
.838b	20 f9 83	jsr $83f9			jsr 	ClearCommand
.838e	80 d0		bra $8360			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8390					AssembleCommand:
.8390	a2 00		ldx #$00			ldx 	#0
.8392	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger 		; start address
.8395	ad 08 04	lda $0408			lda 	NSMantissa0
.8398	8d 9e 04	sta $049e			sta 	AssemblerAddress
.839b	ad 10 04	lda $0410			lda 	NSMantissa1
.839e	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.83a1	20 48 8d	jsr $8d48			jsr 	CheckComma
.83a4	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; options
.83a7	ad 08 04	lda $0408			lda 	NSMantissa0
.83aa	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ad	60		rts				rts
.83ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83af					AssertCommand:
.83af	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.83b1	20 68 9d	jsr $9d68			jsr 	EvaluateInteger 			; the assert test
.83b4	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; exit if result is non zero.
.83b7	d0 05		bne $83be			bne 	_ACExit
.83b9	a9 0a		lda #$0a		lda	#10
.83bb	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.83be					_ACExit:
.83be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83bf					CallCommand:
.83bf	a2 00		ldx #$00			ldx 	#0
.83c1	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.83c4					_CCClear
.83c4	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c5	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.83c8	e0 04		cpx #$04			cpx 	#4
.83ca	d0 f8		bne $83c4			bne 	_CCClear
.83cc	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83ce					_CCCParam:
.83ce	b1 30		lda ($30),y			lda 	(codePtr),y
.83d0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d2	d0 09		bne $83dd			bne 	_CCCRun6502
.83d4	c8		iny				iny 								; skip comma
.83d5	e8		inx				inx	 								; next level
.83d6	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d9	e0 03		cpx #$03			cpx 	#3
.83db	90 f1		bcc $83ce			bcc 	_CCCParam 					; done all 3 ?
.83dd					_CCCRun6502:
.83dd	5a		phy				phy 								; save position
.83de	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83e1	85 37		sta $37				sta 	zTemp0+1
.83e3	ad 08 04	lda $0408			lda 	NSMantissa0
.83e6	85 36		sta $36				sta 	zTemp0
.83e8	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83eb	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ee	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83f1	20 f6 83	jsr $83f6			jsr 	_CCCZTemp0 					; call zTemp0
.83f4	7a		ply				ply 								; restore position and exit
.83f5	60		rts				rts
.83f6					_CCCZTemp0:
.83f6	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f9					ClearCommand:
.83f9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83fb	85 36		sta $36				sta 	0+zTemp0
.83fd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83ff	85 37		sta $37				sta 	1+zTemp0
.8401					_ClearZeroLoop:
.8401	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8403	f0 24		beq $8429			beq 	_ClearZeroEnd
.8405	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8407	a9 00		lda #$00			lda 	#0
.8409					_ClearOneVariable:
.8409	91 36		sta ($36),y			sta 	(zTemp0),y
.840b	c8		iny				iny
.840c	c0 08		cpy #$08			cpy 	#8
.840e	d0 f9		bne $8409			bne 	_ClearOneVariable
.8410	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8412	b1 36		lda ($36),y			lda 	(zTemp0),y
.8414	c9 18		cmp #$18			cmp 	#NSTProcedure
.8416	d0 04		bne $841c			bne 	_ClearNotProcedure
.8418	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.841a	91 36		sta ($36),y			sta 	(zTemp0),y
.841c					_ClearNotProcedure:
.841c	18		clc				clc 								; go to the next variable
.841d	b2 36		lda ($36)			lda 	(zTemp0)
.841f	65 36		adc $36				adc 	zTemp0
.8421	85 36		sta $36				sta 	zTemp0
.8423	90 dc		bcc $8401			bcc 	_ClearZeroLoop
.8425	e6 37		inc $37				inc 	zTemp0+1
.8427	80 d8		bra $8401			bra 	_ClearZeroLoop
.8429					_ClearZeroEnd:
.8429	18		clc				clc
.842a	a5 36		lda $36				lda 	zTemp0
.842c	69 01		adc #$01			adc 	#1
.842e	8d 8c 04	sta $048c			sta 	lowMemPtr
.8431	a5 37		lda $37				lda 	zTemp0+1
.8433	69 00		adc #$00			adc 	#0
.8435	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8438	20 71 a6	jsr $a671			jsr 	StackReset
.843b	20 db a6	jsr $a6db			jsr 	StringSystemInitialise
.843e	20 49 8c	jsr $8c49			jsr 	ProcedureScan
.8441	20 c8 89	jsr $89c8			jsr 	Command_Restore
.8444	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8447	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.844a	9c a0 04	stz $04a0			stz 	AssemblerControl
.844d	20 e5 99	jsr $99e5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8450	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8451					ClearScreen:
.8451	5a		phy				phy
.8452	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8454	20 4c a7	jsr $a74c			jsr 	EXTPrintCharacter
.8457	7a		ply				ply
.8458	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8459					Command_Data:
.8459	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.845b	a2 80		ldx #$80			ldx 	#KWC_EOL
.845d	20 9b 8c	jsr $8c9b			jsr 	ScanForward
.8460	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8461					DimCommand:
.8461	b1 30		lda ($30),y			lda 	(codePtr),y
.8463	29 c0		and #$c0			and 	#$C0
.8465	c9 40		cmp #$40			cmp 	#$40
.8467	d0 7a		bne $84e3			bne 	_DCSyntax
.8469	b1 30		lda ($30),y			lda 	(codePtr),y
.846b	18		clc				clc
.846c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846e	85 3f		sta $3f				sta 	zaTemp+1
.8470	c8		iny				iny
.8471	b1 30		lda ($30),y			lda 	(codePtr),y
.8473	c8		iny				iny
.8474	85 3e		sta $3e				sta 	zaTemp
.8476	5a		phy				phy
.8477	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8479	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.847b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.847d	c9 18		cmp #$18			cmp 	#NSTProcedure
.847f	f0 62		beq $84e3			beq 	_DCSyntax
.8481	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8483	29 04		and #$04			and 	#NSBIsArray
.8485	f0 64		beq $84eb			beq 	_DCType
.8487	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8489	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848b	d0 59		bne $84e6			bne 	_DCRedefine
.848d	7a		ply				ply
.848e	20 ee 84	jsr $84ee			jsr 	_DCGetSize 				; get array size, check it.
.8491	5a		phy				phy
.8492	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8494	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8496	7a		ply				ply 							; is there a second (e.g. ,x)
.8497	b1 30		lda ($30),y			lda 	(codePtr),y
.8499	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.849b	d0 0a		bne $84a7			bne 	_DCOneDimension
.849d	c8		iny				iny 							; skip comma
.849e	20 ee 84	jsr $84ee			jsr 	_DCGetSize 				; get 2nd array size
.84a1	5a		phy				phy
.84a2	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a6	7a		ply				ply
.84a7					_DCOneDimension:
.84a7	5a		phy				phy 							; save position
.84a8	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84aa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ac	aa		tax				tax
.84ad	c8		iny				iny
.84ae	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b0	e8		inx				inx 							; bump them.
.84b1	1a		inc a				inc 	a
.84b2	20 b1 9d	jsr $9db1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b5	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b7	29 e0		and #$e0			and 	#$E0
.84b9	d0 23		bne $84de			bne 	_DCSize
.84bb	a0 02		ldy #$02			ldy 	#2 						; get base type
.84bd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bf	20 fc 84	jsr $84fc			jsr 	ScaleByBaseType 		; scale by base type
.84c2	a5 36		lda $36				lda 	zTemp0
.84c4	a6 37		ldx $37				ldx 	zTemp0+1
.84c6	20 a7 99	jsr $99a7			jsr 	AllocateXABytes 		; allocate memory
.84c9	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84cb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cd	c8		iny				iny
.84ce	8a		txa				txa
.84cf	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84d1	7a		ply				ply 							; get position back
.84d2	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 		; check )
.84d5	b1 30		lda ($30),y			lda 	(codePtr),y
.84d7	c8		iny				iny 							; consume in case
.84d8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84da	f0 85		beq $8461			beq 	DimCommand
.84dc	88		dey				dey 							; undo consume
.84dd	60		rts				rts
.84de					_DCSize:
.84de	a9 16		lda #$16		lda	#22
.84e0	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.84e3					_DCSyntax:
.84e3	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.84e6					_DCRedefine:
.84e6	a9 15		lda #$15		lda	#21
.84e8	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.84eb					_DCType:
.84eb	4c b0 9f	jmp $9fb0			jmp 	TypeError
.84ee					_DCGetSize:
.84ee	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84f0	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 	; get array dimension
.84f3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f5	f0 e7		beq $84de			beq 	_DCSize
.84f7	c9 fe		cmp #$fe			cmp 	#254
.84f9	f0 e3		beq $84de			beq 	_DCSize
.84fb	60		rts				rts
.84fc					ScaleByBaseType:
.84fc	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fe	d0 19		bne $8519			bne 	_SBBTString
.8500	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8502	48		pha				pha
.8503	a5 36		lda $36				lda 	zTemp0
.8505	48		pha				pha
.8506	06 36		asl $36				asl 	zTemp0 					; x 2
.8508	26 37		rol $37				rol 	zTemp0+1
.850a	06 36		asl $36				asl 	zTemp0 					; x 4
.850c	26 37		rol $37				rol 	zTemp0+1
.850e	68		pla				pla 							; add stacked value = x 5
.850f	65 36		adc $36				adc 	zTemp0
.8511	85 36		sta $36				sta 	zTemp0
.8513	68		pla				pla
.8514	65 37		adc $37				adc 	zTemp0+1
.8516	85 37		sta $37				sta 	zTemp0+1
.8518	60		rts				rts
.8519					_SBBTString:
.8519	06 36		asl $36				asl 	zTemp0
.851b	26 37		rol $37				rol 	zTemp0+1
.851d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851e					EndCommand:
.851e	4c 60 83	jmp $8360			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8521					ForCommand:
.8521	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8523	20 0c a6	jsr $a60c			jsr 	StackOpen
.8526	a2 00		ldx #$00			ldx 	#0
.8528	20 e2 97	jsr $97e2			jsr 	EvaluateTerm
.852b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.852e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8530	d0 49		bne $857b			bne		_FCError
.8532	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8534	20 50 8d	jsr $8d50			jsr 	CheckNextA
.8537	e8		inx				inx
.8538	20 68 9d	jsr $9d68			jsr 	EvaluateInteger 			; <from> in +1
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	c8		iny				iny 								; consume it
.853e	48		pha				pha 								; save on stack for later
.853f	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8541	f0 04		beq $8547			beq 	_FCNoSyntax
.8543	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8545	d0 37		bne $857e			bne 	_FCSyntaxError
.8547					_FCNoSyntax:
.8547	e8		inx				inx
.8548	20 68 9d	jsr $9d68			jsr 	EvaluateInteger
.854b	20 50 a6	jsr $a650			jsr 	STKSaveCodePosition 		; save loop back position
.854e	68		pla				pla 								; restore DOWNTO or TO
.854f	5a		phy				phy 								; save Y on the stack
.8550	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8552	f0 02		beq $8556			beq 	_FCNotDownTo
.8554	a9 02		lda #$02			lda 	#2
.8556					_FCNotDownTo:
.8556	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8557	a0 10		ldy #$10			ldy 	#16
.8559	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.855b	a0 06		ldy #$06			ldy 	#6
.855d	ad 08 04	lda $0408			lda 	NSMantissa0
.8560	91 34		sta ($34),y			sta 	(basicStack),y
.8562	ad 10 04	lda $0410			lda 	NSMantissa1
.8565	c8		iny				iny
.8566	91 34		sta ($34),y			sta 	(basicStack),y
.8568	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.856a	a2 01		ldx #$01			ldx 	#1
.856c	20 81 85	jsr $8581			jsr 	FCIntegerToStack
.856f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8571	a2 02		ldx #$02			ldx 	#2
.8573	20 81 85	jsr $8581			jsr 	FCIntegerToStack
.8576	20 a1 85	jsr $85a1			jsr 	CopyIndexToReference
.8579	7a		ply				ply 								; restore position
.857a	60		rts				rts
.857b					_FCError:
.857b	4c b0 9f	jmp $9fb0			jmp 	TypeError
.857e					_FCSyntaxError:
.857e	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.8581					FCIntegerToStack:
.8581	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8584	10 03		bpl $8589			bpl	 	_FCNotNegative
.8586	20 d1 9d	jsr $9dd1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8589					_FCNotNegative:
.8589	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.858c	91 34		sta ($34),y			sta 	(basicStack),y
.858e	c8		iny				iny
.858f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8592	91 34		sta ($34),y			sta 	(basicStack),y
.8594	c8		iny				iny
.8595	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8598	91 34		sta ($34),y			sta 	(basicStack),y
.859a	c8		iny				iny
.859b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.859e	91 34		sta ($34),y			sta 	(basicStack),y
.85a0	60		rts				rts
.85a1					CopyIndexToReference:
.85a1	5a		phy				phy
.85a2	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85a4	38		sec				sec 								; (because we copy from offset 8)
.85a5	b1 34		lda ($34),y			lda 	(basicStack),y
.85a7	e9 08		sbc #$08			sbc 	#8
.85a9	85 36		sta $36				sta 	zTemp0
.85ab	c8		iny				iny
.85ac	b1 34		lda ($34),y			lda 	(basicStack),y
.85ae	e9 00		sbc #$00			sbc 	#0
.85b0	85 37		sta $37				sta 	zTemp0+1
.85b2	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85b4	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b6	b1 34		lda ($34),y			lda 	(basicStack),y
.85b8	0a		asl a				asl 	a 							; into carry
.85b9	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85bb	90 14		bcc $85d1			bcc 	_CITRNormal
.85bd	38		sec				sec
.85be					_CITRNegative:
.85be	a9 00		lda #$00			lda 	#0
.85c0	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85c2	91 36		sta ($36),y			sta 	(zTemp0),y
.85c4	c8		iny				iny
.85c5	ca		dex				dex
.85c6	d0 f6		bne $85be			bne 	_CITRNegative
.85c8	88		dey				dey 								; look at MSB of mantissa
.85c9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85cb	09 80		ora #$80			ora 	#$80
.85cd	91 36		sta ($36),y			sta 	(zTemp0),y
.85cf	7a		ply				ply
.85d0	60		rts				rts
.85d1					_CITRNormal:
.85d1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85d3	91 36		sta ($36),y			sta 	(zTemp0),y
.85d5	c8		iny				iny
.85d6	ca		dex				dex
.85d7	d0 f8		bne $85d1			bne 	_CITRNormal
.85d9	7a		ply				ply 								; and exit.
.85da	60		rts				rts
.85db					NextCommand:
.85db	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85dd	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85df	20 38 a6	jsr $a638			jsr 	StackCheckFrame
.85e2	5a		phy				phy
.85e3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e5	b1 34		lda ($34),y			lda 	(basicStack),y
.85e7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e9	30 02		bmi $85ed			bmi 	_NCStepNeg
.85eb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85ed					_NCStepNeg:
.85ed	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ef	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85f1	18		clc				clc
.85f2					_NCBump:
.85f2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85f4	91 34		sta ($34),y			sta 	(basicStack),y
.85f6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f8	c8		iny				iny 								; next byte
.85f9	ca		dex				dex 								; do four times
.85fa	d0 f6		bne $85f2			bne 	_NCBump
.85fc	20 a1 85	jsr $85a1			jsr		CopyIndexToReference		; copy it to the reference variable.
.85ff	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8601	b1 34		lda ($34),y			lda 	(basicStack),y
.8603	0a		asl a				asl 	a 							; sign bit to carry
.8604	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8606	85 38		sta $38				sta 	zTemp1
.8608	90 02		bcc $860c			bcc 	_NCCompRev 					; use if step is +ve
.860a	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.860c					_NCCompRev:
.860c	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.860e	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8610	85 39		sta $39				sta 	zTemp1+1
.8612	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8614	38		sec				sec
.8615					_NCCompare:
.8615	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8617	b1 34		lda ($34),y			lda 	(basicStack),y
.8619	a4 39		ldy $39				ldy 	zTemp1+1
.861b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.861d	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861f	e6 39		inc $39				inc 	zTemp1+1
.8621	ca		dex				dex 								; do it 4 times.
.8622	d0 f1		bne $8615			bne 	_NCCompare
.8624	50 02		bvc $8628			bvc 	_NCNoOverflow 				; convert to signed comparison
.8626	49 80		eor #$80			eor 	#$80
.8628					_NCNoOverflow:
.8628	7a		ply				ply 								; restore Y position
.8629	0a		asl a				asl 	a 							; is bit 7 set.
.862a	90 04		bcc $8630			bcc 	_NCLoopback 				; if no , >= so loop back
.862c	20 2a a6	jsr $a62a			jsr 	StackClose 					; exit the loop
.862f	60		rts				rts
.8630					_NCLoopBack:
.8630	20 61 a6	jsr $a661			jsr 	STKLoadCodePosition 		; loop back
.8633	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8634					Command_GOSUB:
.8634	a2 00		ldx #$00			ldx 	#0
.8636	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8639	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.863b	20 0c a6	jsr $a60c			jsr 	StackOpen 					; create frame
.863e	20 50 a6	jsr $a650			jsr 	STKSaveCodePosition 		; save current position
.8641	4c 57 86	jmp $8657			jmp 	GotoStackX
.8644					Command_RETURN:
.8644	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8646	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8648	20 38 a6	jsr $a638			jsr 	StackCheckFrame
.864b	20 61 a6	jsr $a661			jsr 	STKLoadCodePosition 		; restore code position
.864e	20 2a a6	jsr $a62a			jsr 	StackClose
.8651	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8652					GotoCommand:
.8652	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8654	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.8657					GotoStackX:
.8657	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.865a	48		pha				pha 								; it is slightly inefficient, just in cases.
.865b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.865e	fa		plx				plx
.865f	20 2b a2	jsr $a22b			jsr 	MemorySearch 				; transfer to line number AX.
.8662	90 05		bcc $8669			bcc 	_GotoError 					; not found, off end.
.8664	d0 03		bne $8669			bne 	_GotoError 					; not found exactly
.8666	4c 05 8a	jmp $8a05			jmp 	RunNewLine 					; and go straight to new line code.
.8669					_GotoError:
.8669	a9 0d		lda #$0d		lda	#13
.866b	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.866e					IfCommand:
.866e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8670	20 45 9d	jsr $9d45			jsr 	EvaluateNumber
.8673	b1 30		lda ($30),y			lda 	(codePtr),y
.8675	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8677	d0 0a		bne $8683			bne 	_IFStructured
.8679	c8		iny				iny 								; consume THEN
.867a	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; is it zero
.867d	f0 01		beq $8680			beq 	_IfFail 					; if fail, go to next line
.867f	60		rts				rts 								; if THEN just continue
.8680					_IfFail:
.8680	4c 6a 8a	jmp $8a6a			jmp 	EOLCommand
.8683					_IfStructured:
.8683	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; is it zero
.8686	d0 07		bne $868f			bne 	_IfExit 					; if not, then continue normally.
.8688	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.868a	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.868c	20 9b 8c	jsr $8c9b			jsr 	ScanForward 				; and run from there/
.868f					_IfExit:
.868f	60		rts				rts
.8690					ElseCode:
.8690	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8692	aa		tax				tax 								; so just go to the structure exit
.8693	20 9b 8c	jsr $8c9b			jsr 	ScanForward
.8696	60		rts				rts
.8697					EndIf:
.8697	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8698					LetCommand:
.8698	a2 00		ldx #$00			ldx 	#0
.869a	b1 30		lda ($30),y			lda 	(codePtr),y
.869c	c9 10		cmp #$10			cmp 	#KWD_AT
.869e	d0 16		bne $86b6			bne 	_LCStandard
.86a0	c8		iny				iny 								; skip equal
.86a1	20 e2 97	jsr $97e2			jsr 	EvaluateTerm 				; get a number
.86a4	20 26 96	jsr $9626			jsr 	Dereference 				; dereference it
.86a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86aa	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86ac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86af	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86b1	d0 10		bne $86c3			bne 	_LCMain
.86b3	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; was a reference before.
.86b6					_LCStandard:
.86b6	ad f0 92	lda $92f0			lda 	PrecedenceLevel+"*"			; precedence > this
.86b9	20 0a 93	jsr $930a			jsr 	EvaluateExpressionAtPrecedence
.86bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86bf	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86c1	f0 0e		beq $86d1			beq 	_LetGoProc 					; it's a procedure call.
.86c3					_LCMain:
.86c3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c5	20 50 8d	jsr $8d50			jsr 	CheckNextA
.86c8	e8		inx				inx 								; RHS
.86c9	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue
.86cc	ca		dex				dex
.86cd	20 d4 86	jsr $86d4			jsr 	AssignVariable
.86d0	60		rts				rts
.86d1					_LetGoProc:
.86d1	4c d2 88	jmp $88d2			jmp 	CallProcedure
.86d4					AssignVariable:
.86d4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d7	48		pha				pha 								; save a copy
.86d8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86db	29 10		and #$10			and 	#NSBIsString
.86dd	d0 0b		bne $86ea			bne 	_ASError
.86df	68		pla				pla 								; get back
.86e0	29 10		and #$10			and 	#NSBIsString 				; check type
.86e2	d0 03		bne $86e7			bne 	_ASString
.86e4	4c 4e 95	jmp $954e			jmp 	AssignNumber
.86e7					_ASString:
.86e7	4c bc 95	jmp $95bc			jmp 	AssignString
.86ea					_ASError:
.86ea	4c b0 9f	jmp $9fb0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86ed					Command_List:
.86ed	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86f0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86f3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f6	a9 ff		lda #$ff			lda 	#$FF
.86f8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86fb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8700	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8702	f0 1e		beq $8722			beq 	_CLSecond
.8704	20 83 87	jsr $8783			jsr 	CLIsDigit 					; if not digit, list all
.8707	b0 24		bcs $872d			bcs 	_CLStart
.8709	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.870b	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.870e	b1 30		lda ($30),y			lda 	(codePtr),y
.8710	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8712	f0 0e		beq $8722			beq 	_CLSecond 					; if so go get it
.8714	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8717	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.871a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.871d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8720	80 0b		bra $872d			bra 	_CLStart
.8722					_CLSecond:
.8722	c8		iny				iny 								; consume comma
.8723	20 83 87	jsr $8783			jsr 	CLIsDigit 					; digit found
.8726	b0 05		bcs $872d			bcs 	_CLStart 					; if not, continue listing
.8728	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.872a	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.872d					_CLStart
.872d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872f	85 30		sta $30				sta 	codePtr
.8731	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8733	85 31		sta $31				sta 	codePtr+1
.8735					_CLLoop:
.8735	20 ee a9	jsr $a9ee			jsr 	EXTBreakCheck 				; break check
.8738	f0 33		beq $876d			beq 	_CLExit
.873a	b2 30		lda ($30)			lda 	(codePtr)
.873c	f0 2f		beq $876d			beq 	_CLExit
.873e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8740	20 70 87	jsr $8770			jsr 	CLCompareLineNo
.8743	90 1b		bcc $8760			bcc 	_CLNext
.8745	a2 07		ldx #$07			ldx 	#7
.8747	20 70 87	jsr $8770			jsr 	CLCompareLineNo
.874a	f0 02		beq $874e			beq 	_CLDoThisOne
.874c	b0 12		bcs $8760			bcs 	_CLNext
.874e					_CLDoThisOne:
.874e	20 fe 8c	jsr $8cfe			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8751	20 38 b3	jsr $b338			jsr 	ListConvertLine 			; convert line into token Buffer
.8754	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8756	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8758	20 b2 8d	jsr $8db2			jsr 	PrintStringXA
.875b	a9 0d		lda #$0d			lda 	#13 						; new line
.875d	20 4c a7	jsr $a74c			jsr 	EXTPrintCharacter
.8760					_CLNext:
.8760	18		clc				clc
.8761	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8763	65 30		adc $30				adc 	codePtr
.8765	85 30		sta $30				sta 	codePtr
.8767	90 02		bcc $876b			bcc 	_CREExit
.8769	e6 31		inc $31				inc 	codePtr+1
.876b					_CREExit:
.876b	80 c8		bra $8735			bra 	_CLLoop
.876d					_CLExit:
.876d	4c 60 83	jmp $8360			jmp 	WarmStart
.8770					CLCompareLineNo:
.8770	38		sec				sec
.8771	a0 01		ldy #$01			ldy 	#1
.8773	b1 30		lda ($30),y			lda 	(codePtr),y
.8775	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8778	85 36		sta $36				sta 	zTemp0
.877a	c8		iny				iny
.877b	b1 30		lda ($30),y			lda 	(codePtr),y
.877d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8780	05 36		ora $36				ora 	zTemp0
.8782	60		rts				rts
.8783					CLIsDigit:
.8783	b1 30		lda ($30),y			lda 	(codePtr),y
.8785	c9 30		cmp #$30			cmp 	#"0"
.8787	90 03		bcc $878c			bcc	 	_CLIDExitFalse
.8789	c9 3a		cmp #$3a			cmp 	#"9"+1
.878b	60		rts				rts
.878c					_CLIDExitFalse:
.878c	38		sec				sec
.878d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.878e					Command_LOCAL:
.878e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8790	20 9c 87	jsr $879c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8793	b1 30		lda ($30),y			lda 	(codePtr),y
.8795	c8		iny				iny
.8796	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8798	f0 f4		beq $878e			beq 	Command_LOCAL
.879a	88		dey				dey 								; unpick pre-get
.879b	60		rts				rts
.879c					LocaliseNextTerm:
.879c	20 e2 97	jsr $97e2			jsr 	EvaluateTerm 				; evaluate the term
.879f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87a2	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.87a4	f0 61		beq $8807			beq		_LNTError
.87a6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a9	85 36		sta $36				sta 	zTemp0
.87ab	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87ae	85 37		sta $37				sta  	zTemp0+1
.87b0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87b3	29 10		and #$10			and 	#NSBIsString
.87b5	d0 1e		bne $87d5			bne 	_LNTPushString
.87b7	5a		phy				phy
.87b8	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87ba					_LNTPushNumLoop:
.87ba	b1 36		lda ($36),y			lda		(zTemp0),y
.87bc	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87bf	c8		iny				iny
.87c0	c0 05		cpy #$05			cpy 	#5
.87c2	d0 f6		bne $87ba			bne 	_LNTPushNumLoop
.87c4	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87c6	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87c9	a5 37		lda $37				lda 	zTemp0+1
.87cb	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87ce	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87d0	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87d3	7a		ply				ply
.87d4	60		rts				rts
.87d5					_LNTPushString:
.87d5	5a		phy				phy
.87d6	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d8	85 38		sta $38				sta 	zTemp1
.87da	a0 01		ldy #$01			ldy 	#1
.87dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.87de	85 39		sta $39				sta 	zTemp1+1
.87e0	a0 00		ldy #$00			ldy 	#0 							; output string
.87e2	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87e4	f0 0a		beq $87f0			beq 	_LNTStringOut
.87e6					_LNTPushStrLoop:
.87e6	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e8	f0 06		beq $87f0			beq 	_LNTStringOut
.87ea	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87ed	c8		iny				iny
.87ee	80 f6		bra $87e6			bra 	_LNTPushStrLoop
.87f0					_LNTStringOut:
.87f0	98		tya				tya									; output length
.87f1	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87f4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f7	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.87fa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87fd	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.8800	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8802	20 ea a5	jsr $a5ea			jsr 	StackPushByte
.8805	7a		ply				ply
.8806	60		rts				rts
.8807					_LNTError:
.8807	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.880a					LocalPopValue:
.880a	20 03 a6	jsr $a603			jsr 	StackPopByte
.880d	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.880f	d0 17		bne $8828			bne 	_LPVString
.8811	20 03 a6	jsr $a603			jsr 	StackPopByte 				; address
.8814	85 37		sta $37				sta 	zTemp0+1
.8816	20 03 a6	jsr $a603			jsr 	StackPopByte
.8819	85 36		sta $36				sta 	zTemp0
.881b	5a		phy				phy
.881c	a0 04		ldy #$04			ldy 	#4 							; copy back
.881e					_LPVNumberCopy:
.881e	20 03 a6	jsr $a603			jsr 	StackPopByte
.8821	91 36		sta ($36),y			sta 	(zTemp0),y
.8823	88		dey				dey
.8824	10 f8		bpl $881e			bpl 	_LPVNumberCopy
.8826	7a		ply				ply 								; and complete
.8827	60		rts				rts
.8828					_LPVString:
.8828	20 03 a6	jsr $a603			jsr 	StackPopByte 				; address of record => zTemp0
.882b	85 37		sta $37				sta 	zTemp0+1
.882d	20 03 a6	jsr $a603			jsr 	StackPopByte
.8830	85 36		sta $36				sta 	zTemp0
.8832	5a		phy				phy
.8833	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8835	85 38		sta $38				sta 	zTemp1
.8837	a0 01		ldy #$01			ldy 	#1
.8839	b1 36		lda ($36),y			lda 	(zTemp0),y
.883b	85 39		sta $39				sta 	zTemp1+1
.883d	20 03 a6	jsr $a603			jsr 	StackPopByte 				; # to get => y
.8840	a8		tay				tay
.8841	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8843	f0 0e		beq $8853			beq 	_LPVStringCopied
.8845	a9 00		lda #$00			lda 	#0 							; NULL on end
.8847	91 38		sta ($38),y			sta 	(zTemp1),y
.8849					_LPVStringCopy:
.8849	88		dey				dey
.884a	30 07		bmi $8853			bmi 	_LPVStringCopied
.884c	20 03 a6	jsr $a603			jsr 	StackPopByte
.884f	91 38		sta ($38),y			sta 	(zTemp1),y
.8851	80 f6		bra $8849			bra 	_LPVStringCopy
.8853					_LPVStringCopied:
.8853	fa		plx				plx
.8854	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8855					NewCommand:
.8855	20 5b 88	jsr $885b			jsr 	NewProgram
.8858	4c 60 83	jmp $8360			jmp 	WarmStart
.885b					NewProgram:
.885b	20 09 a2	jsr $a209			jsr 	MemoryNew
.885e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8861	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear everything.
.8864	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8865					Command_Print:
.8865	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8866					_CPLoop:
.8866	08		php				php 								; save last action flag
.8867	b1 30		lda ($30),y			lda 	(codePtr),y
.8869	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.886b	f0 46		beq $88b3			beq 	_CPExit
.886d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.886f	f0 42		beq $88b3			beq 	_CPExit
.8871	68		pla				pla 								; throw last action flag
.8872	b1 30		lda ($30),y			lda 	(codePtr),y
.8874	c8		iny				iny
.8875	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8877	f0 37		beq $88b0			beq 	_CPContinueWithSameLine
.8879	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.887b	f0 2e		beq $88ab			beq 	_CPTab
.887d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.887f	f0 26		beq $88a7			beq 	_CPNewLine
.8881	88		dey				dey 								; undo the get.
.8882	a2 00		ldx #$00			ldx 	#0
.8884	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; get a value into slot 0
.8887	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.888a	29 10		and #$10			and 	#NSBIsString
.888c	f0 0b		beq $8899			beq 	_CPNumber
.888e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8891	ad 08 04	lda $0408			lda 	NSMantissa0
.8894	20 bc 88	jsr $88bc			jsr 	CPPrintStringXA
.8897	80 cc		bra $8865			bra 	Command_Print 				; loop round clearing carry so NL if end
.8899					_CPNumber:
.8899	a9 05		lda #$05			lda 	#5 							; maximum decimals
.889b	20 12 9c	jsr $9c12			jsr 	ConvertNumberToString 		; convert to string
.889e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.88a0	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.88a2	20 bc 88	jsr $88bc			jsr 	CPPrintStringXA
.88a5	80 be		bra $8865			bra 	Command_Print 				; loop round clearing carry so NL if end
.88a7					_CPNewLine:
.88a7	a9 0d		lda #$0d			lda 	#13
.88a9	80 02		bra $88ad			bra 	_CPPrintChar
.88ab					_CPTab:
.88ab	a9 09		lda #$09			lda 	#9 							; print TAB
.88ad					_CPPrintChar:
.88ad	20 cf 88	jsr $88cf			jsr 	CPPrintVector
.88b0					_CPContinueWithSameLine:
.88b0	38		sec				sec 								; loop round with carry set, which
.88b1	80 b3		bra $8866			bra 	_CPLoop 					; will inhibit final CR
.88b3					_CPExit:
.88b3	28		plp				plp 								; get last action flag
.88b4	b0 05		bcs $88bb			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88b6	a9 0d		lda #$0d			lda 	#13 						; print new line
.88b8	20 cf 88	jsr $88cf			jsr 	CPPrintVector
.88bb					_CPExit2:
.88bb	60		rts				rts
.88bc					CPPrintStringXA:
.88bc	5a		phy				phy
.88bd	86 37		stx $37				stx 	zTemp0+1
.88bf	85 36		sta $36				sta 	zTemp0
.88c1	a0 00		ldy #$00			ldy 	#0
.88c3					_PSXALoop:
.88c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c5	f0 06		beq $88cd			beq 	_PSXAExit
.88c7	20 cf 88	jsr $88cf			jsr 	CPPrintVector
.88ca	c8		iny				iny
.88cb	80 f6		bra $88c3			bra 	_PSXALoop
.88cd					_PSXAExit:
.88cd	7a		ply				ply
.88ce	60		rts				rts
.88cf					CPPrintVector:
.88cf	4c 4c a7	jmp $a74c			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88d2					CallProcedure:
.88d2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88d4	b1 30		lda ($30),y			lda 	(codePtr),y
.88d6	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88d8	f0 0c		beq $88e6			beq 	_CPEndParam
.88da					_CPParamLoop:
.88da	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; get parameter onto stack
.88dd	e8		inx				inx 								; bump next stack
.88de	b1 30		lda ($30),y			lda 	(codePtr),y
.88e0	c8		iny				iny
.88e1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88e3	f0 f5		beq $88da			beq 	_CPParamLoop
.88e5	88		dey				dey 								; unpick.
.88e6					_CPEndParam:
.88e6	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88e9	c8		iny				iny									; skip right bracket
.88ea	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88ec	20 0c a6	jsr $a60c			jsr 	StackOpen
.88ef	20 50 a6	jsr $a650			jsr 	STKSaveCodePosition 		; save loop position
.88f2	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88f5	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88f7	ad 10 04	lda $0410			lda 	NSMantissa1
.88fa	85 37		sta $37				sta 	zTemp0+1
.88fc	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88fe	b2 36		lda ($36)			lda 	(zTemp0)
.8900	85 30		sta $30				sta 	safePtr
.8902	b1 36		lda ($36),y			lda 	(zTemp0),y
.8904	85 31		sta $31				sta 	safePtr+1
.8906	c8		iny				iny
.8907	b1 36		lda ($36),y			lda 	(zTemp0),y
.8909	85 32		sta $32				sta 	safePtr+2
.890b	c8		iny				iny
.890c	b1 36		lda ($36),y			lda 	(zTemp0),y
.890e	85 33		sta $33				sta 	safePtr+3
.8910	c8		iny				iny 								; get Y offset -> Y
.8911	b1 36		lda ($36),y			lda 	(zTemp0),y
.8913	a8		tay				tay
.8914	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8916	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8919	f0 13		beq $892e			beq 	_ParamExit 					; if so, exit.
.891b					_ParamExtract:
.891b	ca		dex				dex 								; put a local term on the level before
.891c	20 9c 87	jsr $879c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.891f	20 d4 86	jsr $86d4			jsr 	AssignVariable 				; assign stacked value to the variable.
.8922	e8		inx				inx 								; advance to next parameter to do.
.8923	e8		inx				inx
.8924	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8927	f0 05		beq $892e			beq 	_ParamExit
.8929	20 48 8d	jsr $8d48			jsr 	CheckComma 					; comma seperating parameters
.892c	80 ed		bra $891b			bra 	_ParamExtract
.892e					_ParamExit:
.892e	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; check )
.8931	60		rts				rts 								; and continue from here
.8932					Command_ENDPROC:
.8932	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8934	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8936	20 38 a6	jsr $a638			jsr 	StackCheckFrame
.8939	20 61 a6	jsr $a661			jsr 	STKLoadCodePosition 		; restore code position
.893c	20 2a a6	jsr $a62a			jsr 	StackClose
.893f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8940					Command_Read:
.8940	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8942	20 e2 97	jsr $97e2			jsr 	EvaluateTerm
.8945	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8948	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.894a	f0 4a		beq $8996			beq 	_CRSyntax 					; check reference (bit 0)
.894c	20 df 89	jsr $89df			jsr 	SwapDataCodePtrs 			; swap code and data
.894f	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8952	d0 20		bne $8974			bne 	_CRContinueData
.8954					_CRKeepSearching:
.8954	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8956	aa		tax				tax
.8957	20 9b 8c	jsr $8c9b			jsr 	ScanForward
.895a	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.895c	f0 16		beq $8974			beq 	_CRHaveData 				; found it
.895e	18		clc				clc
.895f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8961	65 30		adc $30				adc 	codePtr
.8963	85 30		sta $30				sta 	codePtr
.8965	90 02		bcc $8969			bcc 	_CREExit
.8967	e6 31		inc $31				inc 	codePtr+1
.8969					_CREExit:
.8969	a0 03		ldy #$03			ldy 	#3 							; start of line.
.896b	b2 30		lda ($30)			lda 	(codePtr)
.896d	d0 e5		bne $8954			bne 	_CRKeepSearching
.896f	a9 0b		lda #$0b		lda	#11
.8971	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8974					_CRHaveData:
.8974					_CRContinueData:
.8974	a2 01		ldx #$01			ldx 	#1
.8976	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8979	ca		dex				dex
.897a	20 d4 86	jsr $86d4			jsr		AssignVariable 				; do the assignment
.897d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8980	b1 30		lda ($30),y			lda 	(codePtr),y
.8982	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8984	d0 04		bne $898a			bne 	_CRSwapBack
.8986	c8		iny				iny 								; consume comma
.8987	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.898a					_CRSwapBack:
.898a	20 df 89	jsr $89df			jsr 	SwapDataCodePtrs			; swap them back.
.898d	b1 30		lda ($30),y			lda 	(codePtr),y
.898f	c8		iny				iny
.8990	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8992	f0 ac		beq $8940			beq 	Command_Read 				; if so go round again.
.8994	88		dey				dey 								; unpick get.
.8995	60		rts				rts
.8996					_CRSyntax:
.8996	4c a6 9f	jmp $9fa6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8999					RemCommand:
.8999	b1 30		lda ($30),y			lda 	(codePtr),y
.899b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.899d	d0 06		bne $89a5			bne 	_RMExit
.899f	c8		iny				iny
.89a0	98		tya				tya
.89a1	38		sec				sec
.89a2	71 30		adc ($30),y			adc 	(codePtr),y
.89a4	a8		tay				tay
.89a5					_RMExit:
.89a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89a6					Command_REPEAT:
.89a6	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89a8	20 0c a6	jsr $a60c			jsr 	StackOpen
.89ab	20 50 a6	jsr $a650			jsr 	STKSaveCodePosition 		; save loop position
.89ae	60		rts				rts
.89af					Command_UNTIL:
.89af	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89b1	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89b3	20 38 a6	jsr $a638			jsr 	StackCheckFrame
.89b6	a2 00		ldx #$00			ldx 	#0
.89b8	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; work out the number
.89bb	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; check if zero
.89be	f0 04		beq $89c4			beq 	_CULoopBack 				; if so keep looping
.89c0	20 2a a6	jsr $a62a			jsr 	StackClose		 			; return
.89c3	60		rts				rts
.89c4					_CULoopBack:
.89c4	20 61 a6	jsr $a661			jsr 	STKLoadCodePosition 		; loop back
.89c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89c8					Command_Restore:
.89c8	20 df 89	jsr $89df			jsr 	SwapDataCodePtrs 			; swap code and data
.89cb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89cd	85 30		sta $30				sta 	codePtr
.89cf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89d1	85 31		sta $31				sta 	codePtr+1
.89d3	20 df 89	jsr $89df			jsr 	SwapDataCodePtrs 			; put them back
.89d6	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89d8	8d 9b 04	sta $049b			sta 	dataPointer+4
.89db	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89de	60		rts				rts
.89df					SwapDataCodePtrs:
.89df	da		phx				phx
.89e0	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89e2					_SDCPLoop:
.89e2	b5 30		lda $30,x			lda 	safePtr,x
.89e4	48		pha				pha
.89e5	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89e8	95 30		sta $30,x			sta 	safePtr,x
.89ea	68		pla				pla
.89eb	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89ee	ca		dex				dex
.89ef	10 f1		bpl $89e2			bpl 	_SDCPLoop
.89f1	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89f4	8c 9b 04	sty $049b			sty 	dataPointer+4
.89f7	a8		tay				tay
.89f8	fa		plx				plx
.89f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89fa					CommandRUN:
.89fa	20 f9 83	jsr $83f9			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89fd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ff	85 30		sta $30				sta 	codePtr
.8a01	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a03	85 31		sta $31				sta 	codePtr+1
.8a05					RUNNewLine:
.8a05	b2 30		lda ($30)			lda 	(codePtr)
.8a07	f0 5e		beq $8a67			beq 	CRNoProgram         		; no then END.
.8a09	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a0b	9a		txs				txs
.8a0c					RUNCodePointerLine:
.8a0c	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a0e					_CRIncMainLoop:
.8a0e	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8a11	d0 05		bne $8a18			bne 	_CRNoBreakCheck
.8a13	20 ee a9	jsr $a9ee			jsr 	EXTBreakCheck 				; break check
.8a16	f0 4a		beq $8a62			beq 	_CRBreak
.8a18					_CRNoBreakCheck:
.8a18	c8		iny				iny
.8a19					_CRMainLoop:
.8a19	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a1e	10 10		bpl $8a30			bpl 	_CRNotKeyword
.8a20	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a22	b0 04		bcs $8a28			bcs 	_CRIsKeyword
.8a24	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a26	b0 34		bcs $8a5c			bcs		_CRSyntaxError
.8a28					_CRIsKeyword:
.8a28	c8		iny				iny 								; consume command
.8a29	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a2a	aa		tax				tax 								; put in X for vector jump
.8a2b	20 5f 8a	jsr $8a5f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a2e	80 e9		bra $8a19			bra 	_CRMainLoop 				; and loop round
.8a30					_CRNotKeyword:
.8a30	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a32	f0 da		beq $8a0e			beq 	_CRIncMainLoop
.8a34	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a36	90 05		bcc $8a3d			bcc 	_CRNotVariable
.8a38					_CRGoLet:
.8a38	20 98 86	jsr $8698			jsr 	LetCommand
.8a3b	80 dc		bra $8a19			bra 	_CRMainLoop
.8a3d					_CRNotVariable:
.8a3d	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a3f	f0 f7		beq $8a38			beq 	_CRGoLet
.8a41	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a43	f0 f3		beq $8a38			beq 	_CRGoLet
.8a45	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a47	f0 ef		beq $8a38			beq 	_CRGoLet
.8a49	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a4b	f0 09		beq $8a56			beq 	_CRGoRem
.8a4d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a4f	d0 0b		bne $8a5c			bne 	_CRSyntaxError
.8a51	20 2c 82	jsr $822c			jsr 	LabelHere
.8a54	80 c3		bra $8a19			bra 	_CRMainLoop
.8a56					_CRGoRem:
.8a56	c8		iny				iny
.8a57	20 99 89	jsr $8999			jsr 	RemCommand
.8a5a	80 bd		bra $8a19			bra 	_CRMainLoop
.8a5c					_CRSyntaxError:
.8a5c	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.8a5f					_CRCallVector0:
.8a5f	7c 0a 8b	jmp ($8b0a,x)			jmp 	(VectorSet0,x)
.8a62					_CRBreak:
.8a62	a9 01		lda #$01		lda	#1
.8a64	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8a67					CRNoProgram:
.8a67	4c 1e 85	jmp $851e			jmp 	EndCommand
.8a6a					EOLCommand:
.8a6a	18		clc				clc
.8a6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a6d	65 30		adc $30				adc 	codePtr
.8a6f	85 30		sta $30				sta 	codePtr
.8a71	90 02		bcc $8a75			bcc 	_CREExit
.8a73	e6 31		inc $31				inc 	codePtr+1
.8a75					_CREExit:
.8a75	80 8e		bra $8a05			bra 	RunNewLine
.8a77					Shift1Command:
.8a77	b1 30		lda ($30),y			lda 	(codePtr),y
.8a79	c8		iny				iny
.8a7a	0a		asl a				asl 	a
.8a7b	aa		tax				tax
.8a7c	7c a2 8b	jmp ($8ba2,x)			jmp 	(VectorSet1,x)
.8a7f					Shift2Command:
.8a7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a81	c8		iny				iny
.8a82	0a		asl a				asl 	a
.8a83	aa		tax				tax
.8a84	7c bc 8b	jmp ($8bbc,x)			jmp 	(VectorSet2,x)
.8a87					Unused1:
.8a87					Unused2:
.8a87					Unused3:
.8a87					Unused4:
.8a87	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
>8a8a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a8a					VectorSetPunc:
>8a8a	46 90					.word	ShiftLeft                        ; $00 <<
>8a8c	fd 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a8e	f3 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a90	a6 9f					.word	SyntaxError                      ; $03 !!3
>8a92	a6 9f					.word	SyntaxError                      ; $04 ><
>8a94	07 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a96	49 90					.word	ShiftRight                       ; $06 >>
>8a98	a6 9f					.word	SyntaxError                      ; $07 !!7
>8a9a	a6 9f					.word	SyntaxError                      ; $08 !!8
>8a9c	a6 9f					.word	SyntaxError                      ; $09 !!9
>8a9e	a6 9f					.word	SyntaxError                      ; $0a !!10
>8aa0	a6 9f					.word	SyntaxError                      ; $0b !!11
>8aa2	a6 9f					.word	SyntaxError                      ; $0c !!12
>8aa4	a6 9f					.word	SyntaxError                      ; $0d !!13
>8aa6	a6 9f					.word	SyntaxError                      ; $0e !!14
>8aa8	a6 9f					.word	SyntaxError                      ; $0f !!15
>8aaa	a6 9f					.word	SyntaxError                      ; $10 @
>8aac	a6 9f					.word	SyntaxError                      ; $11 !!17
>8aae	a6 9f					.word	SyntaxError                      ; $12 !!18
>8ab0	a6 9f					.word	SyntaxError                      ; $13 [
>8ab2	ca 8e					.word	IntegerDivide                    ; $14 \
>8ab4	a6 9f					.word	SyntaxError                      ; $15 ]
>8ab6	d7 91					.word	EorInteger                       ; $16 ^
>8ab8	a6 9f					.word	SyntaxError                      ; $17 _
>8aba	a6 9f					.word	SyntaxError                      ; $18 `
>8abc	a6 9f					.word	SyntaxError                      ; $19 !!25
>8abe	a6 9f					.word	SyntaxError                      ; $1a !!26
>8ac0	a6 9f					.word	SyntaxError                      ; $1b {
>8ac2	91 91					.word	OraInteger                       ; $1c |
>8ac4	a6 9f					.word	SyntaxError                      ; $1d }
>8ac6	a6 9f					.word	SyntaxError                      ; $1e ~
>8ac8	a6 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aca	a6 9f					.word	SyntaxError                      ; $20
>8acc	1d 92					.word	WordIndirect                     ; $21 !
>8ace	a6 9f					.word	SyntaxError                      ; $22 "
>8ad0	a6 9f					.word	SyntaxError                      ; $23 #
>8ad2	a6 9f					.word	SyntaxError                      ; $24 $
>8ad4	17 8f					.word	IntegerModulus                   ; $25 %
>8ad6	4b 91					.word	AndInteger                       ; $26 &
>8ad8	a6 9f					.word	SyntaxError                      ; $27 '
>8ada	a6 9f					.word	SyntaxError                      ; $28 (
>8adc	a6 9f					.word	SyntaxError                      ; $29 )
>8ade	8c 8f					.word	MulInteger                       ; $2a *
>8ae0	dd 90					.word	AddInteger                       ; $2b +
>8ae2	a6 9f					.word	SyntaxError                      ; $2c ,
>8ae4	20 91					.word	SubInteger                       ; $2d -
>8ae6	a6 9f					.word	SyntaxError                      ; $2e .
>8ae8	08 94					.word	FDivideCommand                   ; $2f /
>8aea	a6 9f					.word	SyntaxError                      ; $30 0
>8aec	a6 9f					.word	SyntaxError                      ; $31 1
>8aee	a6 9f					.word	SyntaxError                      ; $32 2
>8af0	a6 9f					.word	SyntaxError                      ; $33 3
>8af2	a6 9f					.word	SyntaxError                      ; $34 4
>8af4	a6 9f					.word	SyntaxError                      ; $35 5
>8af6	a6 9f					.word	SyntaxError                      ; $36 6
>8af8	a6 9f					.word	SyntaxError                      ; $37 7
>8afa	a6 9f					.word	SyntaxError                      ; $38 8
>8afc	a6 9f					.word	SyntaxError                      ; $39 9
>8afe	a6 9f					.word	SyntaxError                      ; $3a :
>8b00	a6 9f					.word	SyntaxError                      ; $3b ;
>8b02	df 8d					.word	BinaryCompareLess                ; $3c <
>8b04	d5 8d					.word	BinaryCompareEqual               ; $3d =
>8b06	e9 8d					.word	BinaryCompareGreater             ; $3e >
>8b08	44 92					.word	ByteIndirect                     ; $3f ?
.8b0a					VectorSet0:
>8b0a	6a 8a					.word	EOLCommand                       ; $80 !0:EOF
>8b0c	77 8a					.word	Shift1Command                    ; $81 !1:SH1
>8b0e	7f 8a					.word	Shift2Command                    ; $82 !2:SH2
>8b10	78 99					.word	AbsUnary                         ; $83 ABS(
>8b12	88 99					.word	AllocUnary                       ; $84 ALLOC(
>8b14	f8 99					.word	AscUnary                         ; $85 ASC(
>8b16	c3 9b					.word	ChrUnary                         ; $86 CHR$(
>8b18	2a a5					.word	UnaryEvent                       ; $87 EVENT(
>8b1a	d1 8d					.word	UnaryFalse                       ; $88 FALSE
>8b1c	05 9a					.word	FracUnary                        ; $89 FRAC(
>8b1e	c0 a4					.word	UnaryHit                         ; $8a HIT(
>8b20	1b 9a					.word	IntUnary                         ; $8b INT(
>8b22	82 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b24	ba a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b26	93 a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b28	96 a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b2a	9d 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b2c	2d 9a					.word	LenUnary                         ; $91 LEN(
>8b2e	4b 9a					.word	Unary_Max                        ; $92 MAX(
>8b30	c7 9c					.word	Unary_Mid                        ; $93 MID$(
>8b32	47 9a					.word	Unary_Min                        ; $94 MIN(
>8b34	a2 9a					.word	Unary_Not                        ; $95 NOT(
>8b36	b8 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b38	ad 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b3a	d7 9a					.word	Unary_Rnd                        ; $98 RND(
>8b3c	58 9b					.word	SgnUnary                         ; $99 SGN(
>8b3e	d5 9b					.word	SpcUnary                         ; $9a SPC(
>8b40	f0 9b					.word	Unary_Str                        ; $9b STR$(
>8b42	ce a5					.word	UnaryTimer                       ; $9c TIMER(
>8b44	c5 8d					.word	UnaryTrue                        ; $9d TRUE
>8b46	78 9b					.word	ValUnary                         ; $9e VAL(
>8b48	21 85					.word	ForCommand                       ; $9f FOR
>8b4a	6e 86					.word	IfCommand                        ; $a0 IF
>8b4c	87 8a					.word	Unused1                          ; $a1 PROC
>8b4e	a6 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b50	11 8d					.word	Command_WHILE                    ; $a3 WHILE
>8b52	97 86					.word	EndIf                            ; $a4 ENDIF
>8b54	32 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b56	db 85					.word	NextCommand                      ; $a6 NEXT
>8b58	87 8a					.word	Unused4                          ; $a7 THEN
>8b5a	af 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b5c	32 8d					.word	Command_WEND                     ; $a9 WEND
>8b5e	a6 9f					.word	SyntaxError                      ; $aa BY
>8b60	bf 83					.word	CallCommand                      ; $ab CALL
>8b62	62 a2					.word	CircleCommand                    ; $ac CIRCLE
>8b64	f9 83					.word	ClearCommand                     ; $ad CLEAR
>8b66	51 84					.word	ClearScreen                      ; $ae CLS
>8b68	a6 9f					.word	SyntaxError                      ; $af COLOR
>8b6a	a6 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b6c	59 84					.word	Command_Data                     ; $b1 DATA
>8b6e	61 84					.word	DimCommand                       ; $b2 DIM
>8b70	87 8a					.word	Unused3                          ; $b3 DOWNTO
>8b72	90 86					.word	ElseCode                         ; $b4 ELSE
>8b74	a6 9f					.word	SyntaxError                      ; $b5 FROM
>8b76	8e a4					.word	GfxCommand                       ; $b6 GFX
>8b78	34 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b7a	52 86					.word	GotoCommand                      ; $b8 GOTO
>8b7c	a6 9f					.word	SyntaxError                      ; $b9 HERE
>8b7e	8c a2					.word	ImageCommand                     ; $ba IMAGE
>8b80	98 86					.word	LetCommand                       ; $bb LET
>8b82	e1 a2					.word	LineCommand                      ; $bc LINE
>8b84	8e 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b86	a6 9f					.word	SyntaxError                      ; $be OFF
>8b88	a6 9f					.word	SyntaxError                      ; $bf ON
>8b8a	a6 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b8c	e6 a4					.word	PaletteCommand                   ; $c1 PALETTE
>8b8e	da a2					.word	PlotCommand                      ; $c2 PLOT
>8b90	65 88					.word	Command_Print                    ; $c3 PRINT
>8b92	40 89					.word	Command_Read                     ; $c4 READ
>8b94	5e a2					.word	RectangleCommand                 ; $c5 RECT
>8b96	99 89					.word	RemCommand                       ; $c6 REM
>8b98	44 86					.word	Command_RETURN                   ; $c7 RETURN
>8b9a	a6 9f					.word	SyntaxError                      ; $c8 SOLID
>8b9c	6d a2					.word	SpriteCommand                    ; $c9 SPRITE
>8b9e	a9 a2					.word	TextCommand                      ; $ca TEXT
>8ba0	87 8a					.word	Unused2                          ; $cb TO
.8ba2					VectorSet1:
>8ba2	a6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8ba4	a6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba6	a6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba8	90 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8baa	af 83					.word	AssertCommand                    ; $84 ASSERT
>8bac	2e a4					.word	BitmapCtrl                       ; $85 BITMAP
>8bae	1e 85					.word	EndCommand                       ; $86 END
>8bb0	ed 86					.word	Command_List                     ; $87 LIST
>8bb2	55 88					.word	NewCommand                       ; $88 NEW
>8bb4	c8 89					.word	Command_Restore                  ; $89 RESTORE
>8bb6	fa 89					.word	CommandRUN                       ; $8a RUN
>8bb8	73 a4					.word	SpritesCtrl                      ; $8b SPRITES
>8bba	44 8c					.word	StopCommand                      ; $8c STOP
.8bbc					VectorSet2:
>8bbc	a6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8bbe	a6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8bc0	a6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bc2	65 9e					.word	Assemble_adc                     ; $83 ADC
>8bc4	5d 9e					.word	Assemble_and                     ; $84 AND
>8bc6	79 9e					.word	Assemble_asl                     ; $85 ASL
>8bc8	e3 9e					.word	Assemble_bcc                     ; $86 BCC
>8bca	e7 9e					.word	Assemble_bcs                     ; $87 BCS
>8bcc	ef 9e					.word	Assemble_beq                     ; $88 BEQ
>8bce	a6 9e					.word	Assemble_bit                     ; $89 BIT
>8bd0	d7 9e					.word	Assemble_bmi                     ; $8a BMI
>8bd2	eb 9e					.word	Assemble_bne                     ; $8b BNE
>8bd4	d3 9e					.word	Assemble_bpl                     ; $8c BPL
>8bd6	f3 9e					.word	Assemble_bra                     ; $8d BRA
>8bd8	f7 9e					.word	Assemble_brk                     ; $8e BRK
>8bda	db 9e					.word	Assemble_bvc                     ; $8f BVC
>8bdc	df 9e					.word	Assemble_bvs                     ; $90 BVS
>8bde	ff 9e					.word	Assemble_clc                     ; $91 CLC
>8be0	53 9f					.word	Assemble_cld                     ; $92 CLD
>8be2	13 9f					.word	Assemble_cli                     ; $93 CLI
>8be4	43 9f					.word	Assemble_clv                     ; $94 CLV
>8be6	71 9e					.word	Assemble_cmp                     ; $95 CMP
>8be8	ba 9e					.word	Assemble_cpx                     ; $96 CPX
>8bea	b5 9e					.word	Assemble_cpy                     ; $97 CPY
>8bec	97 9e					.word	Assemble_dec                     ; $98 DEC
>8bee	4f 9f					.word	Assemble_dex                     ; $99 DEX
>8bf0	2b 9f					.word	Assemble_dey                     ; $9a DEY
>8bf2	61 9e					.word	Assemble_eor                     ; $9b EOR
>8bf4	9c 9e					.word	Assemble_inc                     ; $9c INC
>8bf6	5f 9f					.word	Assemble_inx                     ; $9d INX
>8bf8	4b 9f					.word	Assemble_iny                     ; $9e INY
>8bfa	ce 9e					.word	Assemble_jmp                     ; $9f JMP
>8bfc	c9 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bfe	6d 9e					.word	Assemble_lda                     ; $a1 LDA
>8c00	92 9e					.word	Assemble_ldx                     ; $a2 LDX
>8c02	b0 9e					.word	Assemble_ldy                     ; $a3 LDY
>8c04	83 9e					.word	Assemble_lsr                     ; $a4 LSR
>8c06	63 9f					.word	Assemble_nop                     ; $a5 NOP
>8c08	59 9e					.word	Assemble_ora                     ; $a6 ORA
>8c0a	0f 9f					.word	Assemble_pha                     ; $a7 PHA
>8c0c	fb 9e					.word	Assemble_php                     ; $a8 PHP
>8c0e	57 9f					.word	Assemble_phx                     ; $a9 PHX
>8c10	17 9f					.word	Assemble_phy                     ; $aa PHY
>8c12	1f 9f					.word	Assemble_pla                     ; $ab PLA
>8c14	03 9f					.word	Assemble_plp                     ; $ac PLP
>8c16	6b 9f					.word	Assemble_plx                     ; $ad PLX
>8c18	27 9f					.word	Assemble_ply                     ; $ae PLY
>8c1a	7e 9e					.word	Assemble_rol                     ; $af ROL
>8c1c	88 9e					.word	Assemble_ror                     ; $b0 ROR
>8c1e	0b 9f					.word	Assemble_rti                     ; $b1 RTI
>8c20	1b 9f					.word	Assemble_rts                     ; $b2 RTS
>8c22	75 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c24	07 9f					.word	Assemble_sec                     ; $b4 SEC
>8c26	67 9f					.word	Assemble_sed                     ; $b5 SED
>8c28	23 9f					.word	Assemble_sei                     ; $b6 SEI
>8c2a	69 9e					.word	Assemble_sta                     ; $b7 STA
>8c2c	5b 9f					.word	Assemble_stp                     ; $b8 STP
>8c2e	8d 9e					.word	Assemble_stx                     ; $b9 STX
>8c30	ab 9e					.word	Assemble_sty                     ; $ba STY
>8c32	a1 9e					.word	Assemble_stz                     ; $bb STZ
>8c34	3f 9f					.word	Assemble_tax                     ; $bc TAX
>8c36	3b 9f					.word	Assemble_tay                     ; $bd TAY
>8c38	c4 9e					.word	Assemble_trb                     ; $be TRB
>8c3a	bf 9e					.word	Assemble_tsb                     ; $bf TSB
>8c3c	47 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c3e	2f 9f					.word	Assemble_txa                     ; $c1 TXA
>8c40	37 9f					.word	Assemble_txs                     ; $c2 TXS
>8c42	33 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c44					StopCommand:
.8c44	a9 08		lda #$08		lda	#8
.8c46	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c49					ProcedureScan:
.8c49	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c4b	85 30		sta $30				sta 	codePtr
.8c4d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c4f	85 31		sta $31				sta 	codePtr+1
.8c51					_PSLoop:
.8c51	b2 30		lda ($30)			lda 	(codePtr)
.8c53	f0 42		beq $8c97			beq 	_PSExit
.8c55	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c57	b1 30		lda ($30),y			lda 	(codePtr),y
.8c59	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c5b	d0 2d		bne $8c8a			bne 	_PSNext
.8c5d	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	29 c0		and #$c0			and 	#$C0
.8c62	c9 40		cmp #$40			cmp 	#$40
.8c64	d0 32		bne $8c98			bne 	_PSSyntax
.8c66	b1 30		lda ($30),y			lda 	(codePtr),y
.8c68	18		clc				clc
.8c69	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c6b	85 37		sta $37				sta 	zTemp0+1
.8c6d	c8		iny				iny 								; LSB
.8c6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c70	85 36		sta $36				sta 	zTemp0
.8c72	c8		iny				iny 								; character after variable call.
.8c73	98		tya				tya 								; save Y offset at +7
.8c74	a0 07		ldy #$07			ldy 	#7
.8c76	91 36		sta ($36),y			sta 	(zTemp0),y
.8c78	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c7a	a0 02		ldy #$02			ldy 	#2
.8c7c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c80					_PSCopy:
.8c80	b5 30		lda $30,x			lda 	safePtr,x
.8c82	c8		iny				iny
.8c83	91 36		sta ($36),y			sta 	(zTemp0),y
.8c85	e8		inx				inx
.8c86	e0 04		cpx #$04			cpx 	#4
.8c88	d0 f6		bne $8c80			bne 	_PSCopy
.8c8a					_PSNext:
.8c8a	18		clc				clc
.8c8b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c8d	65 30		adc $30				adc 	codePtr
.8c8f	85 30		sta $30				sta 	codePtr
.8c91	90 02		bcc $8c95			bcc 	_CREExit
.8c93	e6 31		inc $31				inc 	codePtr+1
.8c95					_CREExit:
.8c95	80 ba		bra $8c51			bra 	_PSLoop
.8c97					_PSExit:
.8c97	60		rts				rts
.8c98					_PSSyntax:
.8c98	4c a6 9f	jmp $9fa6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c9b					ScanForward:
.8c9b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c9d	86 37		stx $37				stx 	zTemp0+1
.8c9f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8ca1					_ScanLoop:
.8ca1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca3	c8		iny				iny
.8ca4	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8ca6	d0 0e		bne $8cb6			bne 	_ScanGoNext
.8ca8	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8caa	f0 04		beq $8cb0			beq 	_ScanMatch
.8cac	c5 37		cmp $37				cmp 	zTemp0+1
.8cae	d0 06		bne $8cb6			bne 	_ScanGoNext
.8cb0					_ScanMatch:
.8cb0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8cb2	d0 01		bne $8cb5			bne 	_ScanNotEndEOL
.8cb4	88		dey				dey
.8cb5					_ScanNotEndEOL:
.8cb5	60		rts				rts
.8cb6					_ScanGoNext:
.8cb6	20 bb 8c	jsr $8cbb			jsr  	ScanForwardOne
.8cb9	80 e6		bra $8ca1			bra 	_ScanLoop
.8cbb					ScanForwardOne:
.8cbb	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8cbd	90 3e		bcc $8cfd			bcc 	_SFWExit
.8cbf	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cc1	90 18		bcc $8cdb			bcc 	_ScanSkipOne
.8cc3	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cc5	b0 2f		bcs $8cf6			bcs 	_ScanSkipData
.8cc7	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cc9	90 32		bcc $8cfd			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ccb	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8ccd	b0 2e		bcs $8cfd			bcs 	_SFWExit
.8ccf	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cd1	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cd3	b0 28		bcs $8cfd			bcs 	_SFWExit
.8cd5	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cd7	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cd9	80 22		bra $8cfd			bra 	_SFWExit
.8cdb					_ScanSkipOne:
.8cdb	c8		iny				iny 								; consume the extra one.
.8cdc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cde	d0 1d		bne $8cfd			bne 	_SFWExit
.8ce0	18		clc				clc
.8ce1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ce3	65 30		adc $30				adc 	codePtr
.8ce5	85 30		sta $30				sta 	codePtr
.8ce7	90 02		bcc $8ceb			bcc 	_CREExit
.8ce9	e6 31		inc $31				inc 	codePtr+1
.8ceb					_CREExit:
.8ceb	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ced	b2 30		lda ($30)			lda 	(codePtr)
.8cef	d0 0c		bne $8cfd			bne 	_SFWExit 					; if not zero, more to scan
.8cf1	a9 13		lda #$13		lda	#19
.8cf3	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8cf6					_ScanSkipData:
.8cf6	88		dey				dey 								; point at data token
.8cf7	c8		iny				iny
.8cf8	98		tya				tya
.8cf9	38		sec				sec
.8cfa	71 30		adc ($30),y			adc 	(codePtr),y
.8cfc	a8		tay				tay
.8cfd					_SFWExit:
.8cfd	60		rts				rts
.8cfe					ScanGetCurrentLineStep:
.8cfe	64 38		stz $38				stz 	zTemp1
.8d00	a0 03		ldy #$03			ldy 	#3
.8d02					_SGCLSLoop:
.8d02	b1 30		lda ($30),y			lda 	(codePtr),y
.8d04	c8		iny				iny
.8d05	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8d07	f0 05		beq $8d0e			beq 	_SGCLSExit
.8d09	20 bb 8c	jsr $8cbb			jsr 	ScanForwardOne
.8d0c	80 f4		bra $8d02			bra 	_SGCLSLoop
.8d0e					_SGCLSExit:
.8d0e	a5 38		lda $38				lda 	zTemp1
.8d10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d11					Command_WHILE:
.8d11	5a		phy				phy 								; save position of the test
.8d12	a2 00		ldx #$00			ldx 	#0
.8d14	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; work out the number
.8d17	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; check if zero
.8d1a	f0 0e		beq $8d2a			beq 	_WHExitLoop 				; if so exit the loop
.8d1c	98		tya				tya 								; position *after* test.
.8d1d	7a		ply				ply 								; restore position before test, at WHILE
.8d1e	88		dey				dey
.8d1f	48		pha				pha 								; push after test on the stack
.8d20	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d22	20 0c a6	jsr $a60c			jsr 	StackOpen
.8d25	20 50 a6	jsr $a650			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d28	7a		ply				ply 								; restore the position *after* the test
.8d29	60		rts				rts
.8d2a					_WHExitLoop:
.8d2a	68		pla				pla 								; throw post loop position
.8d2b	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d2d	aa		tax				tax
.8d2e	20 9b 8c	jsr $8c9b			jsr 	ScanForward
.8d31	60		rts				rts
.8d32					Command_WEND:
.8d32	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d34	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d36	20 38 a6	jsr $a638			jsr 	StackCheckFrame
.8d39	20 61 a6	jsr $a661			jsr 	STKLoadCodePosition 		; loop back
.8d3c	20 2a a6	jsr $a62a			jsr 	StackClose		 			; erase the frame
.8d3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d40					CheckRightBracket:
.8d40	b1 30		lda ($30),y			lda 	(codePtr),y
.8d42	c8		iny				iny
.8d43	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d45	d0 0f		bne $8d56			bne 	CNAFail
.8d47	60		rts				rts
.8d48					CheckComma:
.8d48	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4a	c8		iny				iny
.8d4b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d4d	d0 07		bne $8d56			bne 	CNAFail
.8d4f	60		rts				rts
.8d50					CheckNextA:
.8d50	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d52	d0 02		bne $8d56			bne 	CNAFail
.8d54	c8		iny				iny 								; skip character
.8d55	60		rts				rts 								; and exit
.8d56					CNAFail:
.8d56	4c a6 9f	jmp $9fa6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d59					ErrorHandler:
.8d59	a8		tay				tay 								; find the error text
.8d5a	f0 49		beq $8da5			beq 	_EHEnd
.8d5c	a2 00		ldx #$00			ldx 	#0
.8d5e	a9 bf		lda #$bf			lda 	#((ErrorText) & $FF)
.8d60	85 36		sta $36				sta 	0+zTemp0
.8d62	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d64	85 37		sta $37				sta 	1+zTemp0
.8d66					_EHFind:
.8d66	88		dey				dey 								; found the error text ?
.8d67	f0 0e		beq $8d77			beq 	_EHFound
.8d69					_EHFindZero:
.8d69	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d6b	e6 36		inc $36				inc 	zTemp0
.8d6d	d0 02		bne $8d71			bne 	_EHFNoCarry
.8d6f	e6 37		inc $37				inc 	zTemp0+1
.8d71					_EHFNoCarry:
.8d71	c9 00		cmp #$00			cmp 	#0
.8d73	d0 f4		bne $8d69			bne 	_EHFindZero
.8d75	80 ef		bra $8d66			bra 	_EHFind
.8d77					_EHFound:
.8d77	a5 36		lda $36				lda 	zTemp0 						; print message
.8d79	a6 37		ldx $37				ldx 	zTemp0+1
.8d7b	20 b2 8d	jsr $8db2			jsr 	PrintStringXA
.8d7e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d80	b1 30		lda ($30),y			lda 	(codePtr),y
.8d82	d0 05		bne $8d89			bne 	_EHAtMsg
.8d84	c8		iny				iny
.8d85	b1 30		lda ($30),y			lda 	(codePtr),y
.8d87	f0 17		beq $8da0			beq 	_EHCREnd
.8d89					_EHAtMsg:
.8d89	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d8b	a9 a8		lda #$a8			lda 	#_AtMsg & $FF
.8d8d	20 b2 8d	jsr $8db2			jsr 	PrintStringXA
.8d90	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d92	b1 30		lda ($30),y			lda 	(codePtr),y
.8d94	48		pha				pha
.8d95	c8		iny				iny
.8d96	b1 30		lda ($30),y			lda 	(codePtr),y
.8d98	aa		tax				tax
.8d99	68		pla				pla
.8d9a	20 6b 92	jsr $926b			jsr 	LCLConvertInt16 				; convert XA to string
.8d9d	20 b2 8d	jsr $8db2			jsr 	PrintStringXA 				; and print it.
.8da0					_EHCREnd:
.8da0	a9 0d		lda #$0d			lda 	#13 						; new line
.8da2	20 4c a7	jsr $a74c			jsr 	EXTPrintCharacter
.8da5					_EHEnd:
.8da5	4c 60 83	jmp $8360			jmp 	WarmStart
>8da8	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8db0	20 00
.8db2					PrintStringXA:
.8db2	5a		phy				phy
.8db3	86 37		stx $37				stx 	zTemp0+1
.8db5	85 36		sta $36				sta 	zTemp0
.8db7	a0 00		ldy #$00			ldy 	#0
.8db9					_PSXALoop:
.8db9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dbb	f0 06		beq $8dc3			beq 	_PSXAExit
.8dbd	20 4c a7	jsr $a74c			jsr 	EXTPrintCharacter
.8dc0	c8		iny				iny
.8dc1	80 f6		bra $8db9			bra 	_PSXALoop
.8dc3					_PSXAExit:
.8dc3	7a		ply				ply
.8dc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dc5					UnaryTrue:
.8dc5	fa		plx				plx
.8dc6					ReturnTrue:
.8dc6	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc8	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.8dcb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dcd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dd0	60		rts				rts
.8dd1					UnaryFalse:
.8dd1	fa		plx				plx
.8dd2					ReturnFalse:
.8dd2	4c 1c 9e	jmp $9e1c			jmp 	NSMSetZero 					; set it all to zero
.8dd5					BinaryCompareEqual:
.8dd5	fa		plx				plx
.8dd6	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8dd9	c9 00		cmp #$00			cmp 	#0
.8ddb	f0 e9		beq $8dc6			beq 	ReturnTrue
.8ddd	80 f3		bra $8dd2			bra 	ReturnFalse
.8ddf					BinaryCompareLess:
.8ddf	fa		plx				plx
.8de0	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8de3	c9 ff		cmp #$ff			cmp 	#$FF
.8de5	f0 df		beq $8dc6			beq 	ReturnTrue
.8de7	80 e9		bra $8dd2			bra 	ReturnFalse
.8de9					BinaryCompareGreater:
.8de9	fa		plx				plx
.8dea	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8ded	c9 01		cmp #$01			cmp 	#1
.8def	f0 d5		beq $8dc6			beq 	ReturnTrue
.8df1	80 df		bra $8dd2			bra 	ReturnFalse
.8df3					BinaryCompareNotEqual:
.8df3	fa		plx				plx
.8df4	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8df7	c9 00		cmp #$00			cmp 	#0
.8df9	d0 cb		bne $8dc6			bne 	ReturnTrue
.8dfb	80 d5		bra $8dd2			bra 	ReturnFalse
.8dfd					BinaryCompareLessEqual:
.8dfd	fa		plx				plx
.8dfe	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8e01	c9 01		cmp #$01			cmp 	#1
.8e03	d0 c1		bne $8dc6			bne 	ReturnTrue
.8e05	80 cb		bra $8dd2			bra 	ReturnFalse
.8e07					BinaryCompareGreaterEqual:
.8e07	fa		plx				plx
.8e08	20 11 8e	jsr $8e11			jsr 	CompareBaseCode
.8e0b	c9 ff		cmp #$ff			cmp 	#$FF
.8e0d	d0 b7		bne $8dc6			bne 	ReturnTrue
.8e0f	80 c1		bra $8dd2			bra 	ReturnFalse
.8e11					CompareBaseCode:
.8e11	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; make both values if references.
.8e14	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e17	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e1a	29 10		and #$10			and 	#NSTString
.8e1c	d0 40		bne $8e5e			bne 	_CBCString
.8e1e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e21	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e24	d0 3b		bne $8e61			bne 	_CBCFloat
.8e26	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e29	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e2c	29 08		and #$08			and 	#NSTFloat
.8e2e	d0 31		bne $8e61			bne 	_CBCFloat
.8e30	20 64 8e	jsr $8e64			jsr 	CompareFixMinusZero
.8e33	e8		inx				inx
.8e34	20 64 8e	jsr $8e64			jsr 	CompareFixMinusZero
.8e37	ca		dex				dex
.8e38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e3b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e3e	10 0b		bpl $8e4b			bpl 	_CDCSameSign
.8e40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e43	30 16		bmi $8e5b			bmi 	_CBCLess 					; return $FF
.8e45					_CBCGreater:
.8e45	a9 01		lda #$01			lda 	#1
.8e47	60		rts				rts
.8e48					_CBCEqual:
.8e48	a9 00		lda #$00			lda 	#0
.8e4a	60		rts				rts
.8e4b					_CDCSameSign:
.8e4b	20 b7 90	jsr $90b7			jsr 	SubTopTwoStack 				; unsigned subtract
.8e4e	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; or the mantissa together
.8e51	f0 f5		beq $8e48			beq 	_CBCEqual 					; -0 == 0
.8e53	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e56	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e59	10 ea		bpl $8e45			bpl 	_CBCGreater
.8e5b					_CBCLess:
.8e5b	a9 ff		lda #$ff			lda 	#$FF
.8e5d	60		rts				rts
.8e5e					_CBCString:
.8e5e	4c 0d 90	jmp $900d			jmp 	CompareStrings
.8e61					_CBCFloat:
.8e61	4c ee 93	jmp $93ee			jmp 	CompareFloat
.8e64					CompareFixMinusZero:
.8e64	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero
.8e67	d0 03		bne $8e6c			bne 	_CFXMZNotZero
.8e69	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e6c					_CFXMZNotZero:
.8e6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e6d					StringConcat:
.8e6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e70	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e73	29 18		and #$18			and 	#NSBTypeMask
.8e75	c9 10		cmp #$10			cmp 	#NSTString
.8e77	d0 4e		bne $8ec7			bne		_SCType
.8e79	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e7b	e8		inx				inx
.8e7c	20 9a 8e	jsr $8e9a			jsr 	_SCSetupZ0 					; setup for second
.8e7f	20 a5 8e	jsr $8ea5			jsr 	_SCLengthZ0 				; length for second
.8e82	ca		dex				dex
.8e83	20 9a 8e	jsr $8e9a			jsr 	_SCSetupZ0 					; setup for first
.8e86	20 a5 8e	jsr $8ea5			jsr 	_SCLengthZ0 				; length for first
.8e89	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e8b	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate
.8e8e	20 b8 8e	jsr $8eb8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e91	e8		inx				inx
.8e92	20 9a 8e	jsr $8e9a			jsr 	_SCSetupZ0 					; copy second out
.8e95	20 b8 8e	jsr $8eb8			jsr 	_SCCopy
.8e98	ca		dex				dex
.8e99	60		rts				rts
.8e9a					_SCSetupZ0:
.8e9a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e9d	85 36		sta $36				sta 	zTemp0
.8e9f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ea2	85 37		sta $37				sta 	zTemp0+1
.8ea4	60		rts				rts
.8ea5					_SCLengthZ0:
.8ea5	5a		phy				phy
.8ea6	a0 00		ldy #$00			ldy 	#0
.8ea8					_SCLenLoop:
.8ea8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eaa	f0 0a		beq $8eb6			beq 	_SCLExit
.8eac	c8		iny				iny
.8ead	e6 38		inc $38				inc 	zTemp1
.8eaf	10 f7		bpl $8ea8			bpl		_SCLenLoop
.8eb1	a9 09		lda #$09		lda	#9
.8eb3	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8eb6					_SCLExit:
.8eb6	7a		ply				ply
.8eb7	60		rts				rts
.8eb8					_SCCopy:
.8eb8	5a		phy				phy
.8eb9	a0 00		ldy #$00			ldy 	#0
.8ebb					_SCCopyLoop:
.8ebb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ebd	f0 06		beq $8ec5			beq 	_SCCExit
.8ebf	20 3d a7	jsr $a73d			jsr 	StringTempWrite
.8ec2	c8		iny				iny
.8ec3	80 f6		bra $8ebb			bra 	_SCCopyLoop
.8ec5					_SCCExit:
.8ec5	7a		ply				ply
.8ec6	60		rts				rts
.8ec7					_SCType:
.8ec7	4c b0 9f	jmp $9fb0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eca					IntegerDivide:
.8eca	fa		plx				plx
.8ecb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ece	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ed1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ed2	0a		asl a				asl 	a
.8ed3	10 05		bpl $8eda			bpl 	_NotRef
.8ed5	48		pha				pha
.8ed6	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed9	68		pla				pla
.8eda					_NotRef:
.8eda	0a		asl a				asl 	a
.8edb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8edd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ee0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ee3	f0 03		beq $8ee8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ee5	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.8ee8					_IntegerCode:
.8ee8	20 0a 8f	jsr $8f0a			jsr 	CheckDivideZero 			; do div zero check
.8eeb	20 42 8f	jsr $8f42			jsr 	Int32Divide 				; do the division
.8eee	20 ff 8f	jsr $8fff			jsr 	CalculateSign 				; calculate result sign
.8ef1					NSMCopyPlusTwoToZero:
.8ef1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ef4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ef7	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8efa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8efd	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8f00	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8f03	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8f06	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8f09	60		rts				rts
.8f0a					CheckDivideZero:
.8f0a	e8		inx				inx
.8f0b	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero
.8f0e	f0 02		beq $8f12			beq 	_CDVError
.8f10	ca		dex				dex
.8f11	60		rts				rts
.8f12					_CDVError:
.8f12	a9 03		lda #$03		lda	#3
.8f14	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8f17					IntegerModulus:
.8f17	fa		plx				plx
.8f18	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f1b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f1e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f1f	0a		asl a				asl 	a
.8f20	10 05		bpl $8f27			bpl 	_NotRef
.8f22	48		pha				pha
.8f23	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f26	68		pla				pla
.8f27					_NotRef:
.8f27	0a		asl a				asl 	a
.8f28	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f2a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f30	f0 03		beq $8f35			beq 	_IntegerCode 				; if clear, then we have two integers
.8f32	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.8f35					_IntegerCode:
.8f35					IntegerModulusNoCheck:
.8f35	20 0a 8f	jsr $8f0a			jsr 	CheckDivideZero 			; do div zero check
.8f38	20 42 8f	jsr $8f42			jsr 	Int32Divide 				; do the division
.8f3b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f3e	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f41	60		rts				rts
.8f42					Int32Divide:
.8f42	48		pha				pha 								; save AXY
.8f43	5a		phy				phy
.8f44	20 f3 9d	jsr $9df3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f47	20 18 9e	jsr $9e18			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f4a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f4c					_I32DivideLoop:
.8f4c	e8		inx				inx
.8f4d	e8		inx				inx
.8f4e	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f51	ca		dex				dex
.8f52	ca		dex				dex
.8f53	20 32 9e	jsr $9e32			jsr 	NSMRotateLeft
.8f56	20 82 8f	jsr $8f82			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f59	90 03		bcc $8f5e			bcc 	_I32DivideNoCarryIn
.8f5b	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f5e					_I32DivideNoCarryIn:
.8f5e	88		dey				dey 								; loop round till division completed.
.8f5f	d0 eb		bne $8f4c			bne 	_I32DivideLoop
.8f61	7a		ply				ply 								; restore AXY and exit
.8f62	68		pla				pla
.8f63	60		rts				rts
.8f64					Int32ShiftDivide:
.8f64	48		pha				pha 								; save AY
.8f65	5a		phy				phy
.8f66	e8		inx				inx 								; clear S[X+2]
.8f67	e8		inx				inx
.8f68	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.8f6b	ca		dex				dex
.8f6c	ca		dex				dex
.8f6d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f6f					_I32SDLoop:
.8f6f	20 82 8f	jsr $8f82			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f72	e8		inx				inx
.8f73	e8		inx				inx
.8f74	20 32 9e	jsr $9e32			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f77	ca		dex				dex
.8f78	ca		dex				dex
.8f79	20 32 9e	jsr $9e32			jsr 	NSMRotateLeft
.8f7c	88		dey				dey 	 							; do 31 times
.8f7d	d0 f0		bne $8f6f			bne 	_I32SDLoop
.8f7f	7a		ply				ply 								; restore AY and exit
.8f80	68		pla				pla
.8f81	60		rts				rts
.8f82					DivideCheckSubtract:
.8f82	20 b7 90	jsr $90b7			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f85	b0 04		bcs $8f8b			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f87	20 91 90	jsr $9091			jsr 	AddTopTwoStack 				; add it back in
.8f8a	18		clc				clc 								; and return False
.8f8b					_DCSExit:
.8f8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f8c					MulInteger:
.8f8c	fa		plx				plx
.8f8d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f90	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f93	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f94	0a		asl a				asl 	a
.8f95	10 05		bpl $8f9c			bpl 	_NotRef
.8f97	48		pha				pha
.8f98	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f9b	68		pla				pla
.8f9c					_NotRef:
.8f9c	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f9d	30 0b		bmi $8faa			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f9f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fa2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8fa5	f0 06		beq $8fad			beq 	_IntegerCode 				; if clear, then we have two integers
.8fa7	4c c5 94	jmp $94c5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8faa					_StringData:
.8faa	4c ba 9f	jmp $9fba			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fad					_IntegerCode:
.8fad	20 ba 8f	jsr $8fba			jsr 	MultiplyShort
.8fb0	c9 00		cmp #$00			cmp 	#0
.8fb2	f0 05		beq $8fb9			beq 	_MIExit
.8fb4	a9 04		lda #$04		lda	#4
.8fb6	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.8fb9					_MIExit:
.8fb9	60		rts				rts
.8fba					MultiplyShort:
.8fba	5a		phy				phy 								; save Y
.8fbb	20 f3 9d	jsr $9df3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fbe	20 18 9e	jsr $9e18			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fc1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fc3					_I32MLoop:
.8fc3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fc6	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fc9	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fcc	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fcf	f0 28		beq $8ff9			beq 	_I32MExit 					; exit if zero
.8fd1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fd4	29 01		and #$01			and 	#1
.8fd6	f0 0e		beq $8fe6			beq 	_I32MNoAdd
.8fd8	20 91 90	jsr $9091			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fdb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fde	10 06		bpl $8fe6			bpl 	_I32MNoAdd
.8fe0					_I32ShiftRight:
.8fe0	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight 				; shift S[X] right
.8fe3	c8		iny				iny 								; increment shift count
.8fe4	80 0a		bra $8ff0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fe6					_I32MNoAdd:
.8fe6	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fe9	70 f5		bvs $8fe0			bvs 	_I32ShiftRight 				; instead.
.8feb	e8		inx				inx
.8fec	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fef	ca		dex				dex
.8ff0					_I32MShiftUpper:
.8ff0	e8		inx				inx 								; shift S[X+2] right
.8ff1	e8		inx				inx
.8ff2	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight
.8ff5	ca		dex				dex
.8ff6	ca		dex				dex
.8ff7	80 ca		bra $8fc3			bra 	_I32MLoop 					; try again.
.8ff9					_I32MExit:
.8ff9	20 ff 8f	jsr $8fff			jsr 	CalculateSign
.8ffc	98		tya				tya 								; shift in A
.8ffd	7a		ply				ply 								; restore Y and exit
.8ffe	60		rts				rts
.8fff					CalculateSign:
.8fff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9002	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.9005	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9008	0a		asl a				asl 	a 							; shift bit 7 into carry
.9009	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.900c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.900d					CompareStrings:
.900d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9010	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9013	29 10		and #$10			and 	#NSBIsString
.9015	f0 2c		beq $9043			beq 	_CSTypeError
.9017	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.901a	85 36		sta $36				sta 	zTemp0
.901c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.901f	85 37		sta $37				sta 	zTemp0+1
.9021	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9024	85 38		sta $38				sta 	zTemp1
.9026	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9029	85 39		sta $39				sta 	zTemp1+1
.902b	5a		phy				phy 								; save Y so we can access strings
.902c	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.902e					_CSLoop:
.902e	c8		iny				iny
.902f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9031	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9033	d0 06		bne $903b			bne 	_CSDifferent
.9035	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9037	d0 f5		bne $902e			bne 	_CSLoop 					; still comparing
.9039					_CSExit:
.9039	7a		ply				ply 								; reached end, return zero in A from EOS
.903a	60		rts				rts
.903b					_CSDifferent:
.903b	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.903d	90 fa		bcc $9039			bcc		_CSExit
.903f	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9041	80 f6		bra $9039			bra 	_CSExit
.9043					_CSTypeError:
.9043	4c b0 9f	jmp $9fb0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9046					ShiftLeft:
.9046	38		sec				sec
.9047	80 01		bra $904a			bra 	ShiftMain
.9049					ShiftRight:
.9049	18		clc				clc
.904a					ShiftMain:
.904a	fa		plx				plx 								; restore X
.904b	08		php				php 								; save direction
.904c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.904f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9052	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9053	0a		asl a				asl 	a
.9054	10 05		bpl $905b			bpl 	_NotRef
.9056	48		pha				pha
.9057	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.905a	68		pla				pla
.905b					_NotRef:
.905b	0a		asl a				asl 	a
.905c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.905e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9061	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9064	f0 03		beq $9069			beq 	_IntegerCode 				; if clear, then we have two integers
.9066	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.9069					_IntegerCode:
.9069	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.906c	29 e0		and #$e0			and 	#$E0
.906e	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9071	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9074	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9077	d0 13		bne $908c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9079					_SMLoop:
.9079	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.907c	30 11		bmi $908f			bmi 	_SMExit 					; exit if done.
.907e	28		plp				plp 								; restore direcition setting
.907f	08		php				php
.9080	90 05		bcc $9087			bcc 	_SMRight
.9082	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; shift left if CS
.9085	80 f2		bra $9079			bra 	_SMLoop
.9087					_SMRight:
.9087	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight 				; shift right if CC
.908a	80 ed		bra $9079			bra 	_SMLoop
.908c					_SMExit0:
.908c	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; return zero.
.908f					_SMExit:
.908f	28		plp				plp 								; throw direction
.9090	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9091					AddTopTwoStack:
.9091	18		clc				clc
.9092	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9095	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9098	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.909b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.909e	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.90a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90a4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a7	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.90aa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90ad	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b0	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.90b3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b6	60		rts				rts
.90b7					SubTopTwoStack:
.90b7	38		sec				sec
.90b8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90bb	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90be	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90c1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90c4	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90c7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90ca	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90cd	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90d0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90d3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90d6	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90d9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90dc	60		rts				rts
.90dd					AddInteger:
.90dd	fa		plx				plx
.90de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90e1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90e4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e5	0a		asl a				asl 	a
.90e6	10 05		bpl $90ed			bpl 	_NotRef
.90e8	48		pha				pha
.90e9	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ec	68		pla				pla
.90ed					_NotRef:
.90ed	0a		asl a				asl 	a 							; put MSB of type into A:7
.90ee	30 0b		bmi $90fb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90f0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90f3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90f6	f0 06		beq $90fe			beq 	_IntegerCode 				; if clear, then we have two integers
.90f8	4c 45 93	jmp $9345			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90fb					_StringData:
.90fb	4c 6d 8e	jmp $8e6d			jmp 	StringConcat							; at least one string - don't know both are strings.
.90fe					_IntegerCode:
.90fe					AddCode:
.90fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9101	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9104	10 8b		bpl $9091			bpl 	AddTopTwoStack
.9106	20 b7 90	jsr $90b7			jsr 	SubTopTwoStack 				; do a physical subtraction
.9109	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.910c	10 09		bpl $9117			bpl 	_AddExit
.910e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9111	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9114	20 d1 9d	jsr $9dd1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9117					_AddExit:
.9117	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; check for -0
.911a	d0 03		bne $911f			bne 	_AddNonZero
.911c	9e 00 04	stz $0400,x			stz 	NSStatus,x
.911f					_AddNonZero:
.911f	60		rts				rts
.9120					SubInteger:
.9120	fa		plx				plx
.9121	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9124	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9127	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9128	0a		asl a				asl 	a
.9129	10 05		bpl $9130			bpl 	_NotRef
.912b	48		pha				pha
.912c	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.912f	68		pla				pla
.9130					_NotRef:
.9130	0a		asl a				asl 	a 							; put MSB of type into A:7
.9131	30 0b		bmi $913e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9133	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9136	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9139	f0 06		beq $9141			beq 	_IntegerCode 				; if clear, then we have two integers
.913b	4c 4a 93	jmp $934a			jmp 	FloatingPointSub 							; otherwise at least one float.
.913e					_StringData:
.913e	4c ba 9f	jmp $9fba			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9141					_IntegerCode:
.9141	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9144	49 80		eor #$80			eor 	#$80
.9146	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9149	80 b3		bra $90fe			bra 	AddCode 					; and do the same code as add.
.914b					AndInteger:
.914b	fa		plx				plx
.914c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.914f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9152	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9153	0a		asl a				asl 	a
.9154	10 05		bpl $915b			bpl 	_NotRef
.9156	48		pha				pha
.9157	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.915a	68		pla				pla
.915b					_NotRef:
.915b	0a		asl a				asl 	a
.915c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.915e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9161	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9164	f0 03		beq $9169			beq 	_IntegerCode 				; if clear, then we have two integers
.9166	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.9169					_IntegerCode:
.9169	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.916c	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.916f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9172	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9175	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9178	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.917b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.917e	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9181	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9184	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9187	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.918a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.918d	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9190	60		rts				rts
.9191					OraInteger:
.9191	fa		plx				plx
.9192	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9195	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9198	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9199	0a		asl a				asl 	a
.919a	10 05		bpl $91a1			bpl 	_NotRef
.919c	48		pha				pha
.919d	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91a0	68		pla				pla
.91a1					_NotRef:
.91a1	0a		asl a				asl 	a
.91a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91a4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91a7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91aa	f0 03		beq $91af			beq 	_IntegerCode 				; if clear, then we have two integers
.91ac	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.91af					_IntegerCode:
.91af	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91b2	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.91b5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91b8	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91bb	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91be	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91c1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91c4	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91c7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ca	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91cd	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91d0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91d3	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91d6	60		rts				rts
.91d7					EorInteger:
.91d7	fa		plx				plx
.91d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91db	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91de	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91df	0a		asl a				asl 	a
.91e0	10 05		bpl $91e7			bpl 	_NotRef
.91e2	48		pha				pha
.91e3	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91e6	68		pla				pla
.91e7					_NotRef:
.91e7	0a		asl a				asl 	a
.91e8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91ea	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91ed	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91f0	f0 03		beq $91f5			beq 	_IntegerCode 				; if clear, then we have two integers
.91f2	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.91f5					_IntegerCode:
.91f5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91f8	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91fb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91fe	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9201	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9204	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9207	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.920a	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.920d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9210	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9213	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9216	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9219	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.921c	60		rts				rts
.921d					WordIndirect:
.921d	fa		plx				plx
.921e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9221	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9224	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9225	0a		asl a				asl 	a
.9226	10 05		bpl $922d			bpl 	_NotRef
.9228	48		pha				pha
.9229	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.922c	68		pla				pla
.922d					_NotRef:
.922d	0a		asl a				asl 	a
.922e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9230	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9233	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9236	f0 03		beq $923b			beq 	_IntegerCode 				; if clear, then we have two integers
.9238	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.923b					_IntegerCode:
.923b	20 fe 90	jsr $90fe			jsr 	AddCode 					; add the two values
.923e	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9240	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9243	60		rts				rts
.9244					ByteIndirect:
.9244	fa		plx				plx
.9245	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9248	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.924b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.924c	0a		asl a				asl 	a
.924d	10 05		bpl $9254			bpl 	_NotRef
.924f	48		pha				pha
.9250	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9253	68		pla				pla
.9254					_NotRef:
.9254	0a		asl a				asl 	a
.9255	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9257	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.925a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.925d	f0 03		beq $9262			beq 	_IntegerCode 				; if clear, then we have two integers
.925f	4c b0 9f	jmp $9fb0			jmp 	TypeError 					; anything else, type mismatch.
.9262					_IntegerCode:
.9262	20 fe 90	jsr $90fe			jsr 	AddCode 					; add the two values
.9265	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9267	9d 00 04	sta $0400,x			sta 	NSStatus,x
.926a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.926b					LCLConvertInt16:
.926b	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.926e	8e 10 04	stx $0410			stx 	NSMantissa1
.9271	9c 18 04	stz $0418			stz 	NSMantissa2
.9274	9c 20 04	stz $0420			stz 	NSMantissa3
.9277	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.927a	a2 00		ldx #$00			ldx 	#0 							; stack level
.927c	a9 0a		lda #$0a			lda 	#10 						; base
.927e	80 00		bra $9280			bra 	ConvertInt32
.9280					ConvertInt32:
.9280	5a		phy				phy
.9281	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9283	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9286	10 08		bpl $9290			bpl 	_CI32NotNeg
.9288	48		pha				pha
.9289	a9 2d		lda #$2d			lda 	#'-'
.928b	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.928e	c8		iny				iny
.928f	68		pla				pla
.9290					_CI32NotNeg:
.9290	20 9e 92	jsr $929e			jsr 	_CI32DivideConvert 			; recursive conversion
.9293	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9295	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9298	7a		ply				ply
.9299	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.929b	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.929d	60		rts				rts
.929e					_CI32DivideConvert:
.929e	e8		inx				inx 								; write to next slot up
.929f	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.92a2	ca		dex				dex
.92a3	20 42 8f	jsr $8f42			jsr 	Int32Divide 				; divide
.92a6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.92a9	48		pha				pha
.92aa	20 f1 8e	jsr $8ef1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92ad	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; is it zero ?
.92b0	f0 06		beq $92b8			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92b2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92b5	20 9e 92	jsr $929e			jsr 	_CI32DivideConvert 			; and recusrively call.
.92b8					_CI32NoRecurse:
.92b8	68		pla				pla 								; remainder
.92b9	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92bb	90 02		bcc $92bf			bcc 	_CI32NotHex
.92bd	69 26		adc #$26			adc 	#6+32
.92bf					_CI32NotHex:
.92bf	69 30		adc #$30			adc 	#48
.92c1	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92c4	c8		iny				iny
.92c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92c6					PrecedenceLevel:
>92c6	04					.byte	 4	; $00 <<
>92c7	02					.byte	 2	; $01 <=
>92c8	02					.byte	 2	; $02 <>
>92c9	00					.byte	 0	; $03 !!3
>92ca	00					.byte	 0	; $04 ><
>92cb	02					.byte	 2	; $05 >=
>92cc	04					.byte	 4	; $06 >>
>92cd	00					.byte	 0	; $07 !!7
>92ce	00					.byte	 0	; $08 !!8
>92cf	00					.byte	 0	; $09 !!9
>92d0	00					.byte	 0	; $0a !!10
>92d1	00					.byte	 0	; $0b !!11
>92d2	00					.byte	 0	; $0c !!12
>92d3	00					.byte	 0	; $0d !!13
>92d4	00					.byte	 0	; $0e !!14
>92d5	00					.byte	 0	; $0f !!15
>92d6	00					.byte	 0	; $10 @
>92d7	00					.byte	 0	; $11 !!17
>92d8	00					.byte	 0	; $12 !!18
>92d9	00					.byte	 0	; $13 [
>92da	04					.byte	 4	; $14 \
>92db	00					.byte	 0	; $15 ]
>92dc	01					.byte	 1	; $16 ^
>92dd	00					.byte	 0	; $17 _
>92de	00					.byte	 0	; $18 `
>92df	00					.byte	 0	; $19 !!25
>92e0	00					.byte	 0	; $1a !!26
>92e1	00					.byte	 0	; $1b {
>92e2	01					.byte	 1	; $1c |
>92e3	00					.byte	 0	; $1d }
>92e4	00					.byte	 0	; $1e ~
>92e5	00					.byte	 0	; $1f [7m<7F>[m
>92e6	00					.byte	 0	; $20
>92e7	05					.byte	 5	; $21 !
>92e8	00					.byte	 0	; $22 "
>92e9	00					.byte	 0	; $23 #
>92ea	05					.byte	 5	; $24 $
>92eb	04					.byte	 4	; $25 %
>92ec	01					.byte	 1	; $26 &
>92ed	00					.byte	 0	; $27 '
>92ee	00					.byte	 0	; $28 (
>92ef	00					.byte	 0	; $29 )
>92f0	04					.byte	 4	; $2a *
>92f1	03					.byte	 3	; $2b +
>92f2	00					.byte	 0	; $2c ,
>92f3	03					.byte	 3	; $2d -
>92f4	00					.byte	 0	; $2e .
>92f5	04					.byte	 4	; $2f /
>92f6	00					.byte	 0	; $30 0
>92f7	00					.byte	 0	; $31 1
>92f8	00					.byte	 0	; $32 2
>92f9	00					.byte	 0	; $33 3
>92fa	00					.byte	 0	; $34 4
>92fb	00					.byte	 0	; $35 5
>92fc	00					.byte	 0	; $36 6
>92fd	00					.byte	 0	; $37 7
>92fe	00					.byte	 0	; $38 8
>92ff	00					.byte	 0	; $39 9
>9300	00					.byte	 0	; $3a :
>9301	00					.byte	 0	; $3b ;
>9302	02					.byte	 2	; $3c <
>9303	02					.byte	 2	; $3d =
>9304	02					.byte	 2	; $3e >
>9305	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9306					EvaluateExpressionAt0:
.9306	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9308					EvaluateExpression:
.9308	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.930a					EvaluateExpressionAtPrecedence:
.930a	48		pha				pha 								; save precedence level
.930b	20 e2 97	jsr $97e2			jsr 	EvaluateTerm 				; evaluate term into level X.
.930e	68		pla				pla 								; restore precedence level.
.930f					_EXPRLoop:
.930f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9311	b1 30		lda ($30),y			lda 	(codePtr),y
.9313	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9315	b0 25		bcs $933c			bcs 	_EXPRExit
.9317	da		phx				phx 								; read the operator precedence
.9318	aa		tax				tax
.9319	bd c6 92	lda $92c6,x			lda 	PrecedenceLevel,x
.931c	fa		plx				plx
.931d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.931f	f0 1b		beq $933c			beq 	_EXPRExit
.9321	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9323	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9325	c5 37		cmp $37				cmp 	zTemp0+1
.9327	b0 13		bcs $933c			bcs		_EXPRExit 					; if current >= operator exit
.9329	48		pha				pha 								; save current precedence.
.932a	b1 30		lda ($30),y			lda 	(codePtr),y
.932c	c8		iny				iny
.932d	48		pha				pha
.932e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9330	e8		inx				inx 								; work out the right hand side.
.9331	20 0a 93	jsr $930a			jsr 	EvaluateExpressionAtPrecedence
.9334	ca		dex				dex
.9335	68		pla				pla 								; get operator, call the code.
.9336	20 3f 93	jsr $933f			jsr 	_EXPRCaller
.9339	68		pla				pla 								; restore precedence level
.933a	80 d3		bra $930f			bra 	_EXPRLoop 					; and go round.
.933c					_EXPRExit:
.933c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.933e	60		rts				rts
.933f					_EXPRCaller:
.933f	da		phx				phx 								; save on stack, first thing is to restore it
.9340	0a		asl a				asl 	a 							; double so can use vectors into X
.9341	aa		tax				tax
.9342	7c 8a 8a	jmp ($8a8a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9345					FloatingPointAdd:
.9345	20 ee 94	jsr $94ee			jsr 	FloatPrepare 				; prepare for floats
.9348	80 0b		bra $9355			bra 	FloatAdd
.934a					FloatingPointSub:
.934a	20 ee 94	jsr $94ee			jsr 	FloatPrepare 				; prepare for floats
.934d					FloatSubtract:
.934d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9350	49 80		eor #$80			eor 	#$80
.9352	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9355					FloatAdd:
.9355	48		pha				pha
.9356	5a		phy				phy
.9357	20 ff 94	jsr $94ff			jsr 	NSNormalise 				; normalise S[X]
.935a	f0 5c		beq $93b8			beq 	_FAReturn1
.935c	e8		inx				inx 								; normalise S[X+1]
.935d	20 ff 94	jsr $94ff			jsr 	NSNormalise
.9360	ca		dex				dex
.9361	c9 00		cmp #$00			cmp 	#0
.9363	f0 77		beq $93dc			beq 	_FAExit 					; if so, just return A
.9365	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9368	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.936b	f0 1b		beq $9388			beq 	_FAExponentsEqual
.936d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9370	a8		tay				tay
.9371	38		sec				sec 								; do a signed comparison of the exponents.
.9372	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9375	50 02		bvc $9379			bvc 	_FANoSignedChange
.9377	49 80		eor #$80			eor 	#$80
.9379					_FANoSignedChange:
.9379	29 80		and #$80			and 	#$80
.937b	10 03		bpl $9380			bpl 	_FAHaveMax
.937d	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9380					_FAHaveMax:
.9380	20 df 93	jsr $93df			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9383	e8		inx				inx
.9384	20 df 93	jsr $93df			jsr 	_FAShiftToExponent
.9387	ca		dex				dex
.9388					_FAExponentsEqual:
.9388	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.938b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.938e	30 10		bmi $93a0			bmi 	_FADifferentSigns
.9390	20 91 90	jsr $9091			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9393	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9396	10 44		bpl $93dc			bpl 	_FAExit 					; if no, we are done.
.9398	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.939b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.939e	80 3c		bra $93dc			bra 	_FAExit
.93a0					_FADifferentSigns:
.93a0	20 b7 90	jsr $90b7			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.93a3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.93a6	10 06		bpl $93ae			bpl 	_FACheckZero 				; if no, check for -0
.93a8	20 c8 9d	jsr $9dc8			jsr 	NSMNegate 					; netate result
.93ab	20 d1 9d	jsr $9dd1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93ae					_FACheckZero:
.93ae	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero	 				; check for -0
.93b1	d0 29		bne $93dc			bne 	_FAExit
.93b3	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93b6	80 24		bra $93dc			bra 	_FAExit
.93b8					_FAReturn1:
.93b8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93be	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93c4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93c7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93ca	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93cd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93d0	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93d3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93d6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93d9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93dc					_FAExit:
.93dc	7a		ply				ply
.93dd	68		pla				pla
.93de	60		rts				rts
.93df					_FAShiftToExponent:
.93df					_FAShiftToExponent2:
.93df	98		tya				tya 								; compare Y to exponent
.93e0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93e3	f0 08		beq $93ed			beq 	_FASEExit 					; exit if so.
.93e5	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight	 			; shift the mantissa right
.93e8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93eb	80 f2		bra $93df			bra 	_FAShiftToExponent2
.93ed					_FASEExit:
.93ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93ee					CompareFloat:
.93ee	20 4d 93	jsr $934d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93f1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93f4	29 f8		and #$f8			and 	#$F8
.93f6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93f9	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93fc	f0 09		beq $9407			beq 	_FCExit 					; zero, so approximately identical
.93fe	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9400	3c 00 04	bit $0400,x			bit 	NSStatus,x
.9403	10 02		bpl $9407			bpl 	_FCExit
.9405					_FCNegative:
.9405	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9407					_FCExit:
.9407	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9408					FDivideCommand:
.9408	fa		plx				plx	 								; restore stack position
.9409	20 ee 94	jsr $94ee			jsr 	FloatPrepare 				; prepare for floats
.940c					FloatDivide:
.940c	48		pha				pha
.940d	e8		inx				inx
.940e	20 ff 94	jsr $94ff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9411	ca		dex				dex
.9412	c9 00		cmp #$00			cmp 	#0
.9414	f0 20		beq $9436			beq 	_FDZero
.9416	20 ff 94	jsr $94ff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9419	f0 19		beq $9434			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.941b	20 64 8f	jsr $8f64			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.941e	20 f1 8e	jsr $8ef1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9421	20 ff 94	jsr $94ff			jsr		NSNormalise 				; renormalise
.9424	20 ff 8f	jsr $8fff			jsr 	CalculateSign 				; calculate result sign
.9427	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.942a	38		sec				sec
.942b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.942e	38		sec				sec
.942f	e9 1e		sbc #$1e			sbc 	#30
.9431	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9434					_FDExit:
.9434	68		pla				pla
.9435	60		rts				rts
.9436					_FDZero:
.9436	a9 03		lda #$03		lda	#3
.9438	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.943b					FloatFractionalPart:
.943b	5a		phy				phy
.943c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.943f	29 7f		and #$7f			and 	#$7F
.9441	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9444	20 ff 94	jsr $94ff			jsr 	NSNormalise
.9447	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.944a	38		sec				sec
.944b	e9 e0		sbc #$e0			sbc 	#$E0
.944d	90 31		bcc $9480			bcc 	_FFPExit 					; already fractional
.944f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9451	b0 2a		bcs $947d			bcs 	_FFPZero
.9453	a8		tay				tay 								; put count to do in Y
.9454	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9457	20 82 94	jsr $9482			jsr 	_FFPPartial
.945a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.945d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9460	20 82 94	jsr $9482			jsr 	_FFPPartial
.9463	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9466	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9469	20 82 94	jsr $9482			jsr 	_FFPPartial
.946c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.946f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9472	20 82 94	jsr $9482			jsr 	_FFPPartial
.9475	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9478	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; zeroed check.
.947b	d0 03		bne $9480			bne 	_FFPExit
.947d					_FFPZero:
.947d	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.9480					_FFPExit:
.9480	7a		ply				ply
.9481	60		rts				rts
.9482					_FFPPartial:
.9482	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9484	f0 17		beq $949d			beq 	_FFFPPExit
.9486	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9488	b0 0c		bcs $9496			bcs 	_FFFPPWholeByte
.948a	5a		phy				phy
.948b					_FFFPPLeft:
.948b	0a		asl a				asl 	a
.948c	88		dey				dey
.948d	d0 fc		bne $948b			bne 	_FFFPPLeft
.948f	7a		ply				ply
.9490					_FFFPPRight:
.9490	4a		lsr a				lsr 	a
.9491	88		dey				dey
.9492	d0 fc		bne $9490			bne 	_FFFPPRight
.9494	80 07		bra $949d			bra 	_FFFPPExit
.9496					_FFFPPWholeByte:
.9496	98		tya				tya 								; subtract 8 from count
.9497	38		sec				sec
.9498	e9 08		sbc #$08			sbc 	#8
.949a	a8		tay				tay
.949b	a9 00		lda #$00			lda 	#0 							; and clear all
.949d					_FFFPPExit:
.949d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.949e					FloatIntegerPart:
.949e	48		pha				pha
.949f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.94a2	f0 1f		beq $94c3			beq 	_FIPExit 					; if so do nothing
.94a4	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; is it zero ?
.94a7	f0 17		beq $94c0			beq 	_FIPZero 					; if so return zero.
.94a9	20 ff 94	jsr $94ff			jsr 	NSNormalise 				; normalise
.94ac	f0 12		beq $94c0			beq 	_FIPZero 					; normalised to zero, exit zero
.94ae					_FIPShift:
.94ae	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94b1	10 08		bpl $94bb			bpl 	_FIPCheckZero
.94b3	20 3f 9e	jsr $9e3f			jsr 	NSMShiftRight 				; shift mantissa right
.94b6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94b9	80 f3		bra $94ae			bra 	_FIPShift
.94bb					_FIPCheckZero:
.94bb	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; avoid -0 problem
.94be	d0 03		bne $94c3			bne 	_FIPExit 					; set to zero if mantissa zero.
.94c0					_FIPZero:
.94c0	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.94c3					_FIPExit:
.94c3	68		pla				pla
.94c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94c5					FloatingPointMultiply:
.94c5	20 ee 94	jsr $94ee			jsr 	FloatPrepare 				; prepare for floats
.94c8					FloatMultiply:
.94c8	48		pha				pha
.94c9	20 ff 94	jsr $94ff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94cc	f0 1b		beq $94e9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ce	e8		inx				inx
.94cf	20 ff 94	jsr $94ff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94d2	ca		dex				dex
.94d3	c9 00		cmp #$00			cmp 	#0
.94d5	f0 0f		beq $94e6			beq 	_FDSetZero
.94d7	20 ba 8f	jsr $8fba			jsr 	MultiplyShort 				; calculate the result.
.94da	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94dd	18		clc				clc
.94de	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94e1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94e4	80 03		bra $94e9			bra 	_FDExit
.94e6					_FDSetZero:
.94e6	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; return 0
.94e9					_FDExit:
.94e9	20 ff 94	jsr $94ff			jsr 	NSNormalise 				; normalise the result
.94ec	68		pla				pla
.94ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94ee					FloatPrepare:
.94ee	20 21 96	jsr $9621			jsr 	DereferenceTopTwo 			; dereference the top two values
.94f1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94f4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94f7	29 10		and #$10			and 	#NSBIsString
.94f9	d0 01		bne $94fc			bne 	_FDType
.94fb	60		rts				rts
.94fc					_FDType:
.94fc	4c b0 9f	jmp $9fb0			jmp 	TypeError
.94ff					NSNormalise:
.94ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.9502	29 80		and #$80			and 	#$80
.9504	09 08		ora #$08			ora 	#NSTFloat
.9506	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9509	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; if zero exit
.950c	d0 09		bne $9517			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.950e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.9511	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.9514	a9 00		lda #$00			lda 	#0 							; set Z flag
.9516	60		rts				rts
.9517					_NSNormaliseOptimise:
.9517	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.951a	d0 22		bne $953e			bne 	_NSNormaliseLoop
.951c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.951f	30 1d		bmi $953e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9521	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9524	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9527	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.952a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.952d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9530	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9533	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9536	38		sec				sec
.9537	e9 08		sbc #$08			sbc 	#8
.9539	9d 28 04	sta $0428,x			sta 	NSExponent,x
.953c	80 d9		bra $9517			bra 	_NSNormaliseOptimise
.953e					_NSNormaliseLoop:
.953e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9541	70 08		bvs $954b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9543	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; shift mantissa left
.9546	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9549	80 f3		bra $953e			bra 	_NSNormaliseLoop
.954b					_NSNExit:
.954b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.954d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.954e					AssignNumber:
.954e	5a		phy				phy
.954f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9552	85 36		sta $36				sta 	zTemp0
.9554	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9557	85 37		sta $37				sta 	zTemp0+1
.9559	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.955c	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.955e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9561	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9563	c9 08		cmp #$08			cmp 	#NSTFloat
.9565	f0 2a		beq $9591			beq 	_ANFloat
.9567	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.956a	f0 05		beq $9571			beq		_ANNotFloat
.956c	e8		inx				inx
.956d	20 9e 94	jsr $949e			jsr 	FloatIntegerPart 			; make it an integer
.9570	ca		dex				dex
.9571					_ANNotFloat:
.9571	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9574	29 03		and #$03			and 	#3
.9576	d0 05		bne $957d			bne 	_ANByteWord
.9578	20 9d 95	jsr $959d			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.957b	80 1e		bra $959b			bra 	_ANExit
.957d					_ANByteWord:
.957d	48		pha				pha 								; save count
.957e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9581	92 36		sta ($36)			sta 	(zTemp0)
.9583	68		pla				pla
.9584	c9 01		cmp #$01			cmp	 	#1
.9586	f0 13		beq $959b			beq 	_ANExit
.9588	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.958b	a0 01		ldy #$01			ldy 	#1
.958d	91 36		sta ($36),y			sta 	(zTemp0),y
.958f	80 0a		bra $959b			bra 	_ANExit
.9591					_ANFloat:
.9591	20 9d 95	jsr $959d			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9594	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9597	a0 04		ldy #$04			ldy 	#4
.9599	91 36		sta ($36),y			sta 	(zTemp0),y
.959b					_ANExit:
.959b	7a		ply				ply
.959c	60		rts				rts
.959d					_ANCopy4PackSign:
.959d	a0 03		ldy #$03			ldy 	#3
.959f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.95a2	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.95a4	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95a7	91 36		sta ($36),y			sta 	(zTemp0),y
.95a9	88		dey				dey
.95aa	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95ad	91 36		sta ($36),y			sta 	(zTemp0),y
.95af	88		dey				dey
.95b0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95b3	91 36		sta ($36),y			sta 	(zTemp0),y
.95b5	88		dey				dey
.95b6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b9	91 36		sta ($36),y			sta 	(zTemp0),y
.95bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95bc					AssignString:
.95bc	5a		phy				phy
.95bd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95c0	85 38		sta $38				sta 	zTemp1
.95c2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95c5	85 39		sta $39				sta 	zTemp1+1
.95c7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95ca	85 36		sta $36				sta 	zTemp0
.95cc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95cf	85 37		sta $37				sta 	zTemp0+1
.95d1	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.95d5	f0 23		beq $95fa			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95d7	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d8	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95da	e9 02		sbc #$02			sbc 	#2
.95dc	85 3c		sta $3c				sta 	zsTemp
.95de	a0 01		ldy #$01			ldy 	#1
.95e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.95e2	e9 00		sbc #$00			sbc 	#0
.95e4	85 3d		sta $3d				sta 	zsTemp+1
.95e6	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e8					_ASGetLength:
.95e8	c8		iny				iny
.95e9	b1 38		lda ($38),y			lda 	(zTemp1),y
.95eb	d0 fb		bne $95e8			bne 	_ASGetLength
.95ed	98		tya				tya 								; is this length <= current length
.95ee	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95f0	90 20		bcc $9612			bcc 	_ASCopyString
.95f2	f0 1e		beq $9612			beq 	_ASCopyString
.95f4	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95f6	a0 01		ldy #$01			ldy 	#1
.95f8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95fa					_ASNewStringRequired:
.95fa	e8		inx				inx 								; concrete the new string.
.95fb	20 7e a6	jsr $a67e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95fe	ca		dex				dex
.95ff	18		clc				clc
.9600	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9603	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9605	92 36		sta ($36)			sta 	(zTemp0)
.9607	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.960a	69 00		adc #$00			adc 	#0
.960c	a0 01		ldy #$01			ldy 	#1
.960e	91 36		sta ($36),y			sta 	(zTemp0),y
.9610	80 0d		bra $961f			bra 	_ASExit
.9612					_ASCopyString:
.9612	a0 00		ldy #$00			ldy 	#0
.9614					_ASCopyLoop:
.9614	b1 38		lda ($38),y			lda 	(zTemp1),y
.9616	c8		iny				iny
.9617	c8		iny				iny
.9618	91 3c		sta ($3c),y			sta 	(zsTemp),y
.961a	88		dey				dey
.961b	c9 00		cmp #$00			cmp 	#0
.961d	d0 f5		bne $9614			bne 	_ASCopyLoop
.961f					_ASExit:
.961f	7a		ply				ply
.9620	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9621					DereferenceTopTwo:
.9621	e8		inx				inx
.9622	20 26 96	jsr $9626			jsr 	Dereference 				; deref x+1
.9625	ca		dex				dex  								; falls through to deref x
.9626					Dereference:
.9626	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9629	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.962b	f0 57		beq $9684			beq 	_DRFExit 					; not a reference
.962d	5a		phy				phy
.962e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9631	85 36		sta $36				sta 	zTemp0
.9633	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9636	85 37		sta $37				sta 	zTemp0+1
.9638	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.963b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.963d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9640	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9643	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9645	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9647	f0 0f		beq $9658			beq 	_DRFDereferenceTwo
.9649	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.964b	f0 39		beq $9686			beq 	_DRFFull
.964d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9650	29 03		and #$03			and 	#3
.9652	f0 32		beq $9686			beq 	_DRFFull 					; the whole word
.9654	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9656	f0 07		beq $965f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9658					_DRFDereferenceTwo:
.9658	a0 01		ldy #$01			ldy 	#1
.965a	b1 36		lda ($36),y			lda 	(zTemp0),y
.965c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.965f					_DRFClear23:
.965f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9662	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9665	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9668	29 18		and #$18			and 	#NSBTypeMask
.966a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.966d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.966f	d0 12		bne $9683			bne 	_DRFNotString
.9671	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9674	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9677	d0 0a		bne $9683			bne 	_DRFNotString
.9679	a9 85		lda #$85			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.967b	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.967e	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9680	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9683					_DRFNotString
.9683	7a		ply				ply 								; restore Y and exit
.9684					_DRFExit:
.9684	60		rts				rts
.9685					_DRFNullString:
>9685	00						.byte 	0
.9686					_DRFFull:
.9686	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9688	b1 36		lda ($36),y			lda 	(zTemp0),y
.968a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968d	c8		iny				iny
.968e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9690	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9693	c8		iny				iny
.9694	b1 36		lda ($36),y			lda 	(zTemp0),y
.9696	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9699	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.969c	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.969f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.96a1	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.96a4	f0 06		beq $96ac			beq 	_DRFNoExponent
.96a6	c8		iny				iny 								; if not, read the exponent as well.
.96a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96ac					_DRFNoExponent:
.96ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96af	10 0d		bpl $96be			bpl 	_DRFExit2 					; if not, then exit.
.96b1	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96b3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b9	09 80		ora #$80			ora 	#NSBIsNegative
.96bb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96be					_DRFExit2:
.96be	7a		ply				ply
.96bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96c0					EncodeNumberStart:
.96c0	38		sec				sec
.96c1	80 01		bra $96c4			bra 	EncodeNumberContinue+1
.96c3					EncodeNumberContinue:
.96c3	18		clc				clc
.96c4					EncodeNumber:
.96c4	08		php				php 								; save reset.
.96c5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96c7	f0 12		beq $96db			beq 	_ENIsOkay
.96c9	c9 30		cmp #$30			cmp 	#"0"
.96cb	90 04		bcc $96d1			bcc 	_ENBadNumber
.96cd	c9 3a		cmp #$3a			cmp 	#"9"+1
.96cf	90 0a		bcc $96db			bcc 	_ENIsOkay
.96d1					_ENBadNumber:
.96d1	28		plp				plp 								; throw saved reset
.96d2	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96d5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96d7	f0 7e		beq $9757			beq 	_ENConstructFinal
.96d9					_ENFail:
.96d9	18		clc				clc 								; not allowed
.96da	60		rts				rts
.96db					_ENIsOkay:
.96db	28		plp				plp 								; are we restarting
.96dc	90 15		bcc $96f3			bcc 	_ENNoRestart
.96de					_ENStartEncode:
.96de	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96e0	f0 0c		beq $96ee			beq 	_ENFirstDP
.96e2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96e4	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.96e7	a9 01		lda #$01			lda 	#ESTA_Low
.96e9					_ENExitChange:
.96e9	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96ec	38		sec				sec
.96ed	60		rts				rts
.96ee					_ENFirstDP:
.96ee	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; clear integer part
.96f1	80 3f		bra $9732			bra 	_ESTASwitchFloat			; go straight to float and exi
.96f3					_ENNoRestart:
.96f3	48		pha				pha 								; save on stack.
.96f4	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96f7	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f9	f0 09		beq $9704			beq  	_ESTALowState
.96fb	c9 02		cmp #$02			cmp 	#ESTA_High
.96fd	f0 29		beq $9728			beq 	_ESTAHighState
.96ff	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9701	f0 3b		beq $973e			beq 	_ESTADecimalState
>9703	db						.byte 	$DB 						; causes a break in the emulator
.9704					_ESTALowState:
.9704	68		pla				pla 								; get value back
.9705	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9707	f0 29		beq $9732			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9709	29 0f		and #$0f			and 	#15 						; make digit
.970b	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.970e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9711	0a		asl a				asl 	a
.9712	0a		asl a				asl 	a
.9713	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9716	0a		asl a				asl 	a
.9717	6d 86 04	adc $0486			adc 	DigitTemp
.971a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.971d	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.971f	90 05		bcc $9726			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9721	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9723	8d 85 04	sta $0485			sta 	EncodeState
.9726					_ESTANoSwitch:
.9726	38		sec				sec
.9727	60		rts				rts
.9728					_ESTAHighState:
.9728	68		pla				pla 								; get value back
.9729	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.972b	f0 05		beq $9732			beq 	_ESTASwitchFloat
.972d	20 91 97	jsr $9791			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9730	38		sec				sec
.9731	60		rts				rts
.9732					_ESTASwitchFloat:
.9732	9c 87 04	stz $0487			stz 	DecimalCount
.9735	e8		inx				inx 								; zero the decimal additive.
.9736	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.9739	ca		dex				dex
.973a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.973c	80 ab		bra $96e9			bra 	_ENExitChange
.973e					_ESTADecimalState:
.973e	68		pla				pla 								; digit.
.973f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9741	f0 96		beq $96d9			beq 	_ENFail
.9743	e8		inx				inx 								; put digit into fractional part of X+1
.9744	20 91 97	jsr $9791			jsr 	ESTAShiftDigitIntoMantissa
.9747	ca		dex				dex
.9748	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.974b	ad 87 04	lda $0487			lda 	DecimalCount
.974e	c9 0b		cmp #$0b			cmp 	#11
.9750	f0 02		beq $9754			beq 	_ESTADSFail
.9752	38		sec				sec
.9753	60		rts				rts
.9754					_ESTADSFail:
.9754	4c ab 9f	jmp $9fab			jmp 	RangeError
.9757					_ENConstructFinal:
.9757	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.975a	f0 33		beq $978f			beq 	_ENCFExit 					; no decimals
.975c	5a		phy				phy
.975d	0a		asl a				asl 	a 							; x 4 and CLC
.975e	0a		asl a				asl 	a
.975f	6d 87 04	adc $0487			adc 	DecimalCount
.9762	a8		tay				tay
.9763	b9 6a 9f	lda $9f6a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9766	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9769	b9 6b 9f	lda $9f6b,y			lda 	DecimalScalarTable-5+1,y
.976c	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.976f	b9 6c 9f	lda $9f6c,y			lda 	DecimalScalarTable-5+2,y
.9772	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9775	b9 6d 9f	lda $9f6d,y			lda 	DecimalScalarTable-5+3,y
.9778	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.977b	b9 6e 9f	lda $9f6e,y			lda 	DecimalScalarTable-5+4,y
.977e	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9781	a9 08		lda #$08			lda 	#NSTFloat
.9783	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9786	7a		ply				ply
.9787	e8		inx				inx 								; multiply decimal const by decimal scalar
.9788	20 c8 94	jsr $94c8			jsr 	FloatMultiply
.978b	ca		dex				dex
.978c	20 55 93	jsr $9355			jsr 	FloatAdd 					; add to integer part.
.978f					_ENCFExit:
.978f	18		clc				clc 								; reject the digit.
.9790	60		rts				rts
.9791					ESTAShiftDigitIntoMantissa:
.9791	29 0f		and #$0f			and 	#15 						; save digit
.9793	48		pha				pha
.9794	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9797	48		pha				pha
.9798	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.979b	48		pha				pha
.979c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.979f	48		pha				pha
.97a0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97a3	48		pha				pha
.97a4	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 2
.97a7	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 4
.97aa	18		clc				clc 								; pop mantissa and add
.97ab	68		pla				pla
.97ac	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b2	68		pla				pla
.97b3	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97b6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b9	68		pla				pla
.97ba	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97bd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97c0	68		pla				pla
.97c1	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97c4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97c7	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 10
.97ca	68		pla				pla 								; add digit
.97cb	18		clc				clc
.97cc	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97d2	90 0d		bcc $97e1			bcc 	_ESTASDExit
.97d4	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97d7	d0 08		bne $97e1			bne 	_ESTASDExit
.97d9	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97dc	d0 03		bne $97e1			bne 	_ESTASDExit
.97de	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97e1					_ESTASDExit:
.97e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97e2					EvaluateTerm:
.97e2	b1 30		lda ($30),y			lda 	(codePtr),y
.97e4	30 18		bmi $97fe			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97e6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e8	b0 6f		bcs $9859			bcs 	_ETVariable
.97ea	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97ec	90 6e		bcc $985c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ee	c9 3a		cmp #$3a			cmp 	#'9'+1
.97f0	b0 6a		bcs $985c			bcs 	_ETPuncUnary
.97f2	20 c0 96	jsr $96c0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97f5					_ETNumber:
.97f5	c8		iny				iny 								; keep encoding until we have the numbers
.97f6	b1 30		lda ($30),y			lda 	(codePtr),y
.97f8	20 c3 96	jsr $96c3			jsr 	EncodeNumberContinue
.97fb	b0 f8		bcs $97f5			bcs 	_ETNumber 					; go back if accepted.
.97fd	60		rts				rts
.97fe					_ETCheckUnary:
.97fe	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9800	f0 41		beq $9843			beq 	_ETString
.9802	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9804	f0 12		beq $9818			beq 	_ETHexConstant
.9806	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9808	90 0b		bcc $9815			bcc 	_ETSyntaxError
.980a	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.980c	b0 07		bcs $9815			bcs 	_ETSyntaxError
.980e	da		phx				phx 								; push X on the stack
.980f	0a		asl a				asl 	a 							; put vector x 2 into X
.9810	aa		tax				tax
.9811	c8		iny				iny 								; consume unary function token
.9812	7c 0a 8b	jmp ($8b0a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9815					_ETSyntaxError:
.9815	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.9818					_ETHexConstant:
.9818	c8		iny				iny 								; skip #
.9819	c8		iny				iny 								; skip count
.981a	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; clear result
.981d					_ETHLoop:
.981d	b1 30		lda ($30),y			lda 	(codePtr),y
.981f	c8		iny				iny 								; and consume
.9820	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9822	f0 1e		beq $9842			beq 	_ETHExit
.9824	48		pha				pha 								; save on stack.
.9825	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 2
.9828	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 4
.982b	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 8
.982e	20 31 9e	jsr $9e31			jsr 	NSMShiftLeft 				; x 16
.9831	68		pla				pla 								; ASCII
.9832	c9 41		cmp #$41			cmp 	#'A'
.9834	90 02		bcc $9838			bcc 	_ETHNotChar
.9836	e9 07		sbc #$07			sbc 	#7
.9838					_ETHNotChar:
.9838	29 0f		and #$0f			and 	#15 						; digit now
.983a	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.983d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9840	80 db		bra $981d			bra 	_ETHLoop 					; go round.
.9842					_ETHExit:
.9842	60		rts				rts
.9843					_ETString:
.9843	c8		iny				iny 								; look at length
.9844	b1 30		lda ($30),y			lda 	(codePtr),y
.9846	48		pha				pha
.9847	c8		iny				iny 								; first character
.9848	20 16 a2	jsr $a216			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.984b	68		pla				pla 								; restore count and save
.984c	85 36		sta $36				sta 	zTemp0
.984e	98		tya				tya 								; add length to Y to skip it.
.984f	18		clc				clc
.9850	65 36		adc $36				adc 	zTemp0
.9852	a8		tay				tay
.9853	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9855	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9858	60		rts				rts
.9859					_ETVariable:
.9859	4c b3 98	jmp $98b3			jmp 	VariableHandler
.985c					_ETPuncUnary:
.985c	c8		iny				iny 								; consume the unary character
.985d	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.985f	f0 2d		beq $988e			beq 	_ETUnaryNegate
.9861	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9863	f0 39		beq $989e			beq 	_ETDereference
.9865	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9867	f0 43		beq $98ac			beq 	_ETParenthesis
.9869	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.986b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.986d	f0 06		beq $9875			beq 	_ETIndirection
.986f	e6 36		inc $36				inc 	zTemp0
.9871	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9873	d0 a0		bne $9815			bne 	_ETSyntaxError
.9875					_ETIndirection:
.9875	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9877	1a		inc a				inc 	a
.9878	48		pha				pha
.9879	20 e2 97	jsr $97e2			jsr 	EvaluateTerm				; evaluate the term
.987c	20 26 96	jsr $9626			jsr 	Dereference 				; dereference it.
.987f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9882	d0 07		bne $988b			bne 	_ETTypeMismatch
.9884	68		pla				pla 								; indirection 1-2
.9885	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9887	9d 00 04	sta $0400,x			sta 	NSStatus,x
.988a	60		rts				rts
.988b					_ETTypeMismatch:
.988b	4c b0 9f	jmp $9fb0			jmp 	TypeError
.988e					_ETUnaryNegate:
.988e	20 e2 97	jsr $97e2			jsr 	EvaluateTerm				; evaluate the term
.9891	20 26 96	jsr $9626			jsr 	Dereference 				; dereference it.
.9894	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9897	29 10		and #$10			and 	#NSTString
.9899	d0 f0		bne $988b			bne 	_ETTypeMismatch
.989b	4c c8 9d	jmp $9dc8			jmp 	NSMNegate  					; just toggles the sign bit.
.989e					_ETDereference:
.989e	20 e2 97	jsr $97e2			jsr 	EvaluateTerm				; evaluate the term
.98a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.98a4	29 20		and #$20			and 	#NSBIsReference
.98a6	f0 e3		beq $988b			beq 	_ETTypeMismatch
.98a8	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98ab	60		rts				rts
.98ac					_ETParenthesis:
.98ac	20 08 93	jsr $9308			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98af	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; check for )
.98b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98b3					VariableHandler:
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	18		clc				clc
.98b6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b8	85 37		sta $37				sta 	zTemp0+1
.98ba	c8		iny				iny
.98bb	b1 30		lda ($30),y			lda 	(codePtr),y
.98bd	85 36		sta $36				sta 	zTemp0
.98bf	c8		iny				iny
.98c0	18		clc				clc									; copy variable address+3 to mantissa
.98c1	69 03		adc #$03			adc 	#3
.98c3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c6	a5 37		lda $37				lda 	zTemp0+1
.98c8	69 00		adc #$00			adc 	#0
.98ca	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98cd	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98d0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98d3	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98d6	5a		phy				phy
.98d7	a0 02		ldy #$02			ldy 	#2 							; read type
.98d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.98db	7a		ply				ply
.98dc	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98de	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98e0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98e3	29 04		and #$04			and 	#NSBIsArray
.98e5	d0 01		bne $98e8			bne 	_VHArray
.98e7	60		rts				rts
.98e8					_VHArray:
.98e8	e8		inx				inx
.98e9	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98ec	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ee	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98f1	b1 30		lda ($30),y			lda 	(codePtr),y
.98f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98f5	d0 06		bne $98fd			bne 	_VHNoSecondIndex
.98f7	c8		iny				iny 								; skip the comma
.98f8	e8		inx				inx
.98f9	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98fc	ca		dex				dex
.98fd					_VHNoSecondIndex:
.98fd	ca		dex				dex 								; set X back.
.98fe	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; and check the right bracket.
.9901	5a		phy				phy 								; save position
.9902	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9904	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9906	f0 6b		beq $9973			beq 	_VHBadIndex
.9908	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.990b	85 3e		sta $3e				sta 	zaTemp
.990d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9910	85 3f		sta $3f				sta 	zaTemp+1
.9912	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9914	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9916	f0 02		beq $991a			beq 	_VHHas2Mask
.9918	a9 ff		lda #$ff			lda 	#$FF
.991a					_VHHas2Mask:
.991a	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.991d	f0 54		beq $9973			beq 	_VHBadIndex
.991f	0a		asl a				asl 	a 							; carry will be set if a second index
.9920	90 09		bcc $992b			bcc 	_VHCheckFirstIndex
.9922	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9924	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9926	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9929	90 48		bcc $9973			bcc 	_VHBadIndex
.992b					_VHCheckFirstIndex:
.992b	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.992d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.992f	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9932	90 3f		bcc $9973			bcc 	_VHBadIndex
.9934	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9936	64 37		stz $37				stz 	zTemp0+1
.9938	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.993b	30 0f		bmi $994c			bmi 	_VHNoMultiply
.993d	da		phx				phx
.993e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9941	48		pha				pha
.9942	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9944	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9946	1a		inc a				inc 	a 							; add 1 for zero base
.9947	fa		plx				plx
.9948	20 b1 9d	jsr $9db1			jsr 	Multiply8x8 				; calculate -> Z0
.994b	fa		plx				plx
.994c					_VHNoMultiply:
.994c	18		clc				clc
.994d	a5 36		lda $36				lda 	zTemp0
.994f	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9952	85 36		sta $36				sta 	zTemp0
.9954	a5 37		lda $37				lda 	zTemp0+1
.9956	69 00		adc #$00			adc 	#0
.9958	85 37		sta $37				sta 	zTemp0+1
.995a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.995d	20 fc 84	jsr $84fc			jsr 	ScaleByBaseType
.9960	18		clc				clc
.9961	b2 3e		lda ($3e)			lda 	(zaTemp)
.9963	65 36		adc $36				adc 	zTemp0
.9965	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9968	a0 01		ldy #$01			ldy 	#1
.996a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.996c	65 37		adc $37				adc 	zTemp0+1
.996e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9971	7a		ply				ply 								; restore position
.9972	60		rts				rts
.9973					_VHBadIndex:
.9973	a9 17		lda #$17		lda	#23
.9975	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9978					AbsUnary:
.9978	fa		plx				plx 								; restore stack pos
.9979	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; get a float or int
.997c	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.997f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9982	29 7f		and #$7f			and 	#$7F
.9984	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9987	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9988					AllocUnary:
.9988	fa		plx				plx 								; restore stack pos
.9989	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger		; get bytes required.
.998c	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.998f	da		phx				phx 								; save X/Y
.9990	5a		phy				phy
.9991	8a		txa				txa 								; copy X into Y
.9992	a8		tay				tay
.9993	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9996	aa		tax				tax
.9997	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.999a	20 a7 99	jsr $99a7			jsr 	AllocateXABytes 			; allocate memory
.999d	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.99a0	8a		txa				txa
.99a1	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.99a4	7a		ply				ply
.99a5	fa		plx				plx
.99a6	60		rts				rts
.99a7					AllocateXABytes:
.99a7	5a		phy				phy
.99a8	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.99ab	84 36		sty $36				sty 	zTemp0
.99ad	5a		phy				phy
.99ae	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.99b1	84 37		sty $37				sty 	zTemp0+1
.99b3	5a		phy				phy
.99b4	18		clc				clc 								; add to low memory pointer
.99b5	6d 8c 04	adc $048c			adc 	lowMemPtr
.99b8	8d 8c 04	sta $048c			sta 	lowMemPtr
.99bb	8a		txa				txa
.99bc	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99bf	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99c2	b0 2f		bcs $99f3			bcs 	CISSMemory
.99c4	20 e5 99	jsr $99e5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99c7					_ClearMemory:
.99c7	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99ca	c5 36		cmp $36				cmp 	zTemp0
.99cc	d0 07		bne $99d5			bne 	_CMClearNext
.99ce	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99d1	c5 37		cmp $37				cmp 	zTemp0+1
.99d3	f0 0c		beq $99e1			beq 	_CMExit
.99d5					_CMClearNext:
.99d5	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99d7	92 36		sta ($36)			sta 	(zTemp0)
.99d9	e6 36		inc $36				inc 	zTemp0
.99db	d0 ea		bne $99c7			bne 	_ClearMemory
.99dd	e6 37		inc $37				inc		zTemp0+1
.99df	80 e6		bra $99c7			bra 	_ClearMemory
.99e1					_CMExit:
.99e1	fa		plx				plx
.99e2	68		pla				pla
.99e3	7a		ply				ply
.99e4	60		rts				rts
.99e5					CheckIdentifierStringSpace:
.99e5	48		pha				pha
.99e6	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99e9	18		clc				clc
.99ea	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99ec	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99ef	b0 02		bcs $99f3			bcs 	CISSMemory
.99f1	68		pla				pla
.99f2	60		rts				rts
.99f3					CISSMemory:
.99f3	a9 06		lda #$06		lda	#6
.99f5	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99f8					AscUnary:
.99f8	fa		plx				plx 								; restore stack pos
.99f9	20 50 9d	jsr $9d50			jsr 	EvaluateString 				; get a string
.99fc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99fe	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.9a01	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9a04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a05					FracUnary:
.9a05	fa		plx				plx 								; restore stack pos
.9a06	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; get a float or int
.9a09	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9a0c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a0f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a11	f0 04		beq $9a17			beq 	_IUZero
.9a13	20 3b 94	jsr $943b			jsr 	FloatFractionalPart
.9a16	60		rts				rts
.9a17					_IUZero:
.9a17	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.9a1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a1b					IntUnary:
.9a1b	fa		plx				plx 								; restore stack pos
.9a1c	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; get a float or int
.9a1f	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9a22	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a25	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a27	f0 03		beq $9a2c			beq 	_IUExit
.9a29	20 9e 94	jsr $949e			jsr 	FloatIntegerPart
.9a2c					_IUExit:
.9a2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a2d					LenUnary:
.9a2d	fa		plx				plx 								; restore stack pos
.9a2e	20 50 9d	jsr $9d50			jsr 	EvaluateString 				; get a string
.9a31	5a		phy				phy
.9a32	a0 00		ldy #$00			ldy 	#0 							; find length
.9a34					_LenFind:
.9a34	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a36	f0 06		beq $9a3e			beq 	_LenExit
.9a38	c8		iny				iny
.9a39	d0 f9		bne $9a34			bne 	_LenFind
.9a3b	4c ab 9f	jmp $9fab			jmp 	RangeError 					; string > 255
.9a3e					_LenExit:
.9a3e	98		tya				tya
.9a3f	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.9a42	7a		ply				ply
.9a43	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9a46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a47					Unary_Min:
.9a47	a9 01		lda #$01			lda 	#1
.9a49	80 02		bra $9a4d			bra 	UnaryMinMaxMain
.9a4b					Unary_Max:
.9a4b	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a4d					UnaryMinMaxMain:
.9a4d	fa		plx				plx 								; get index on number stack
.9a4e	48		pha				pha 								; save comparator
.9a4f	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; get the first value.
.9a52					_UMMMLoop:
.9a52	b1 30		lda ($30),y			lda 	(codePtr),y
.9a54	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a56	f0 22		beq $9a7a			beq 	_UMMMDone
.9a58	20 48 8d	jsr $8d48			jsr 	CheckComma 					; must be a comma
.9a5b	e8		inx				inx
.9a5c	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue
.9a5f	ca		dex				dex
.9a60	20 f3 9d	jsr $9df3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a63	e8		inx				inx
.9a64	20 f3 9d	jsr $9df3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a67	e8		inx				inx
.9a68	20 11 8e	jsr $8e11			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a6b	ca		dex				dex
.9a6c	ca		dex				dex
.9a6d	85 36		sta $36				sta 	zTemp0 						; save required result
.9a6f	68		pla				pla 								; get and save comparator
.9a70	48		pha				pha
.9a71	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a73	d0 dd		bne $9a52			bne 	_UMMMLoop
.9a75	20 7d 9a	jsr $9a7d			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a78	80 d8		bra $9a52			bra 	_UMMMLoop
.9a7a					_UMMMDone:
.9a7a	68		pla				pla 								; throw the comparator
.9a7b	c8		iny				iny 								; skip )
.9a7c	60		rts				rts
.9a7d					ExpCopyAboveDown:
.9a7d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a80	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a83	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a86	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a89	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a8c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a8f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a92	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a95	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a98	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a9b	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a9e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9aa1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9aa2					Unary_Not:
.9aa2	fa		plx				plx
.9aa3	20 68 9d	jsr $9d68			jsr 	EvaluateInteger 			; get integer
.9aa6	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9aa9	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; zero mantissa ?
.9aac	f0 04		beq $9ab2			beq 	_NotZero
.9aae	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.9ab1	60		rts				rts
.9ab2					_NotZero:
.9ab2	4c c6 8d	jmp $8dc6			jmp 	ReturnTrue
.9ab5					_UNBad:
.9ab5	4c b5 9f	jmp $9fb5			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ab8					Unary_Random:
.9ab8	fa		plx				plx
.9ab9	20 37 9b	jsr $9b37			jsr 	Random32Bit 				; get a random number
.9abc	20 1c 9b	jsr $9b1c			jsr 	URCopyToMantissa  			; put in mantissa
.9abf	b1 30		lda ($30),y			lda 	(codePtr),y
.9ac1	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9ac3	f0 08		beq $9acd			beq 	_URNoModulus
.9ac5	e8		inx				inx
.9ac6	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ac9	ca		dex				dex
.9aca	20 35 8f	jsr $8f35			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9acd					_URNoModulus:
.9acd	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ad0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ad3	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9ad6	60		rts				rts
.9ad7					Unary_Rnd:
.9ad7	fa		plx				plx
.9ad8	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; number to use.
.9adb	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; closing bracket
.9ade	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ae1	f0 2b		beq $9b0e			beq 	_URCopySeed
.9ae3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ae6	10 23		bpl $9b0b			bpl 	_URDontSeed
.9ae8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9aeb	49 17		eor #$17			eor 	#$17
.9aed	8d 88 04	sta $0488			sta 	RandomSeed+0
.9af0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9af3	49 a5		eor #$a5			eor 	#$A5
.9af5	8d 89 04	sta $0489			sta 	RandomSeed+1
.9af8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9afb	49 c2		eor #$c2			eor 	#$C2
.9afd	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9b00	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b03	49 9d		eor #$9d			eor 	#$9D
.9b05	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b08	20 37 9b	jsr $9b37			jsr 	Random32Bit
.9b0b					_URDontSeed:
.9b0b	20 37 9b	jsr $9b37			jsr 	Random32Bit 				; generate a number.
.9b0e					_URCopySeed:
.9b0e	20 1c 9b	jsr $9b1c			jsr 	URCopyToMantissa 			; copy into mantissa
.9b11	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b13	8d 28 04	sta $0428			sta 	NSExponent
.9b16	a9 08		lda #$08			lda 	#NSTFloat
.9b18	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b1b	60		rts				rts
.9b1c					URCopyToMantissa:
.9b1c	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b1f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b22	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b25	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b28	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b2b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2e	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b31	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b33	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b36	60		rts				rts
.9b37					Random32Bit:
.9b37	5a		phy				phy
.9b38	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b3a	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b3d	d0 03		bne $9b42			bne 	_Random1
.9b3f	a8		tay				tay 								; if so do it 256 times
.9b40	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b42					_Random1:
.9b42	0a		asl a				asl 	a 							; LSFR RNG
.9b43	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b46	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b49	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b4c	90 02		bcc $9b50			bcc 	_Random2
.9b4e	49 c5		eor #$c5			eor 	#$C5
.9b50					_Random2:
.9b50	88		dey				dey
.9b51	d0 ef		bne $9b42			bne 	_Random1
.9b53	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b56	7a		ply				ply
.9b57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b58					SgnUnary:
.9b58	fa		plx				plx 								; restore stack pos
.9b59	20 45 9d	jsr $9d45			jsr 	EvaluateNumber 				; get a float or int
.9b5c	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9b5f	20 4c 9e	jsr $9e4c			jsr 	NSMIsZero 					; if zero
.9b62	f0 10		beq $9b74			beq 	_SGZero  					; return Int Zero
.9b64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b67	48		pha				pha
.9b68	a9 01		lda #$01			lda 	#1 							; set to 1
.9b6a	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.9b6d	68		pla				pla
.9b6e	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b70	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b73	60		rts				rts
.9b74	20 1c 9e	jsr $9e1c	_SGZero:jsr 	NSMSetZero
.9b77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b78					ValUnary:
.9b78	fa		plx				plx 								; restore stack pos
.9b79	20 8e 9b	jsr $9b8e			jsr 	ValMainCode 				; do the main val() code
.9b7c	b0 01		bcs $9b7f			bcs 	_VUError 					; couldn't convert
.9b7e	60		rts				rts
.9b7f					_VUError:
.9b7f	4c b0 9f	jmp $9fb0			jmp 	TypeError
.9b82					IsValUnary:
.9b82	fa		plx				plx 								; restore stack pos
.9b83	20 8e 9b	jsr $9b8e			jsr 	ValMainCode 				; do the main val() code
.9b86	b0 03		bcs $9b8b			bcs 	_VUBad
.9b88	4c c6 8d	jmp $8dc6			jmp 	ReturnTrue
.9b8b					_VUBad:
.9b8b	4c d2 8d	jmp $8dd2			jmp 	ReturnFalse
.9b8e					ValMainCode:
.9b8e	20 50 9d	jsr $9d50			jsr 	EvaluateString 				; get a string
.9b91	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; check right bracket present
.9b94	5a		phy				phy
.9b95	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b97	f0 17		beq $9bb0			beq 	_VMCFail2
.9b99	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b9b	48		pha				pha 								; save first character
.9b9c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b9e	d0 01		bne $9ba1			bne 	_VMCStart
.9ba0	c8		iny				iny 								; skip over -
.9ba1					_VMCStart:
.9ba1	38		sec				sec 								; initialise first time round.
.9ba2					_VMCNext:
.9ba2	c8		iny				iny 								; pre-increment
.9ba3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9ba5	f0 0c		beq $9bb3			beq 	_VMCSuccess 				; successful.
.9ba7	20 c4 96	jsr $96c4			jsr 	EncodeNumber 				; send it to the number-builder
.9baa	90 03		bcc $9baf			bcc 	_VMCFail 					; if failed, give up.
.9bac	18		clc				clc 								; next time round, countinue
.9bad	80 f3		bra $9ba2			bra 	_VMCNext
.9baf					_VMCFail:
.9baf	68		pla				pla
.9bb0					_VMCFail2:
.9bb0	7a		ply				ply
.9bb1	38		sec				sec
.9bb2	60		rts				rts
.9bb3					_VMCSuccess:
.9bb3	a9 00		lda #$00			lda 	#0 							; construct final
.9bb5	20 c4 96	jsr $96c4			jsr 	EncodeNumber
.9bb8	68		pla				pla
.9bb9	c9 2d		cmp #$2d			cmp 	#"-"
.9bbb	d0 03		bne $9bc0			bne 	_VMCNotNegative
.9bbd	20 c8 9d	jsr $9dc8			jsr		NSMNegate
.9bc0					_VMCNotNegative:
.9bc0	7a		ply				ply
.9bc1	18		clc				clc
.9bc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bc3					ChrUnary:
.9bc3	fa		plx				plx 								; restore stack pos
.9bc4	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger			; get value
.9bc7	48		pha				pha
.9bc8	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9bcb	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bcd	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate
.9bd0	68		pla				pla 								; write number to it
.9bd1	20 3d a7	jsr $a73d			jsr 	StringTempWrite
.9bd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bd5					SpcUnary:
.9bd5	fa		plx				plx 								; restore stack pos
.9bd6	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger			; get value
.9bd9	5a		phy				phy
.9bda	48		pha				pha 								; save count
.9bdb	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate
.9bde	7a		ply				ply 								; to do count in Y
.9bdf					_SpcLoop:
.9bdf	c0 00		cpy #$00			cpy 	#0
.9be1	f0 08		beq $9beb			beq 	_SpcExit
.9be3	a9 20		lda #$20			lda 	#32
.9be5	20 3d a7	jsr $a73d			jsr 	StringTempWrite
.9be8	88		dey				dey
.9be9	80 f4		bra $9bdf			bra 	_SPCLoop
.9beb					_SpcExit:
.9beb	7a		ply				ply
.9bec	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.9bef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bf0					Unary_Str:
.9bf0	fa		plx				plx
.9bf1	20 45 9d	jsr $9d45			jsr 	EvaluateNumber  			; get number
.9bf4	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; closing bracket
.9bf7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf9	20 12 9c	jsr $9c12			jsr 	ConvertNumberToString 		; do the conversion.
.9bfc	a9 21		lda #$21			lda		#33 						; create buffer
.9bfe	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate 			; allocate memory
.9c01	da		phx				phx
.9c02	a2 00		ldx #$00			ldx 	#0
.9c04					_USCopy:
.9c04	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c07	20 3d a7	jsr $a73d			jsr 	StringTempWrite
.9c0a	e8		inx				inx
.9c0b	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c0e	d0 f4		bne $9c04			bne 	_USCopy
.9c10	fa		plx				plx
.9c11	60		rts				rts
.9c12					ConvertNumberToString:
.9c12	5a		phy				phy 								; save code position
.9c13	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c16	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c19	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c1c	10 0a		bpl $9c28			bpl 	_CNTSNotNegative
.9c1e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c20	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c23	a9 2d		lda #$2d			lda 	#"-"
.9c25	20 8e 9c	jsr $9c8e			jsr 	WriteDecimalBuffer
.9c28					_CNTSNotNegative:
.9c28	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c2b	f0 15		beq $9c42			beq 	_CNTSNotFloat
.9c2d	e8		inx				inx 								; round up
.9c2e	a9 01		lda #$01			lda 	#1
.9c30	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.9c33	ca		dex				dex
.9c34	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c37	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c3a	a9 08		lda #$08			lda 	#NSTFloat
.9c3c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c3f	20 55 93	jsr $9355			jsr 	FloatAdd
.9c42					_CNTSNotFloat:
.9c42	20 70 9c	jsr $9c70			jsr 	MakePlusTwoString
.9c45	20 3b 94	jsr $943b			jsr 	FloatFractionalPart 		; get the fractional part
.9c48	20 ff 94	jsr $94ff			jsr 	NSNormalise					; normalise , exit if zero
.9c4b	f0 21		beq $9c6e			beq 	_CNTSExit
.9c4d	a9 2e		lda #$2e			lda 	#"."
.9c4f	20 8e 9c	jsr $9c8e			jsr 	WriteDecimalBuffer 			; write decimal place
.9c52					_CNTSDecimal:
.9c52	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c55	30 17		bmi $9c6e			bmi 	_CNTSExit
.9c57	e8		inx				inx 								; x 10.0
.9c58	a9 0a		lda #$0a			lda 	#10
.9c5a	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.9c5d	a9 08		lda #$08			lda 	#NSTFloat
.9c5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c62	ca		dex				dex
.9c63	20 c8 94	jsr $94c8			jsr 	FloatMultiply
.9c66	20 70 9c	jsr $9c70			jsr 	MakePlusTwoString
.9c69	20 3b 94	jsr $943b			jsr 	FloatFractionalPart 		; get the fractional part
.9c6c	80 e4		bra $9c52			bra 	_CNTSDecimal 				; keep going.
.9c6e					_CNTSExit:
.9c6e	7a		ply				ply
.9c6f	60		rts				rts
.9c70					MakePlusTwoString:
.9c70	da		phx				phx
.9c71	20 f3 9d	jsr $9df3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c74	e8		inx				inx 								; access it
.9c75	e8		inx				inx
.9c76	20 9e 94	jsr $949e			jsr 	FloatIntegerPart 			; make it an integer
.9c79	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c7b	20 80 92	jsr $9280			jsr 	ConvertInt32
.9c7e	a2 00		ldx #$00			ldx	 	#0
.9c80					_MPTSCopy:
.9c80	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c83	20 8e 9c	jsr $9c8e			jsr 	WriteDecimalBuffer
.9c86	e8		inx				inx
.9c87	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c8a	d0 f4		bne $9c80			bne 	_MPTSCopy
.9c8c	fa		plx				plx
.9c8d	60		rts				rts
.9c8e					WriteDecimalBuffer:
.9c8e	da		phx				phx
.9c8f	ae 95 04	ldx $0495			ldx 	dbOffset
.9c92	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c95	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c98	ee 95 04	inc $0495			inc 	dbOffset
.9c9b	fa		plx				plx
.9c9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c9d					Unary_Left:
.9c9d	fa		plx				plx
.9c9e	18		clc				clc 								; only one parameter
.9c9f	20 14 9d	jsr $9d14			jsr 	SubstringInitial 			; set up.
.9ca2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ca5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca8	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9cab	80 2c		bra $9cd9			bra 	SubstringMain
.9cad					Unary_Right:
.9cad	fa		plx				plx
.9cae	18		clc				clc 								; only one parameter
.9caf	20 14 9d	jsr $9d14			jsr 	SubstringInitial 			; set up.
.9cb2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cb5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cbb	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cbe	b0 02		bcs $9cc2			bcs 	_URNotUnderflow
.9cc0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cc2					_URNotUnderFlow:
.9cc2	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cc5	80 12		bra $9cd9			bra 	SubStringMain
.9cc7					Unary_Mid:
.9cc7	fa		plx				plx
.9cc8	38		sec				sec 								; two parameters
.9cc9	20 14 9d	jsr $9d14			jsr 	SubstringInitial 			; set up.
.9ccc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ccf	f0 05		beq $9cd6			beq 	_UMError
.9cd1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cd4	80 03		bra $9cd9			bra 	SubStringMain
.9cd6					_UMError:
.9cd6	4c b5 9f	jmp $9fb5			jmp 	ArgumentError
.9cd9					SubStringMain:
.9cd9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cdc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cdf	b0 2d		bcs $9d0e			bcs 	_SSMNull 					; if so, return an empty string.
.9ce1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ce4	f0 28		beq $9d0e			beq 	_SSMNull 					; return empty string.
.9ce6	18		clc				clc 								; add the offset +1 to the address and
.9ce7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cea	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ced	85 36		sta $36				sta 	zTemp0
.9cef	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cf2	69 00		adc #$00			adc 	#0
.9cf4	85 37		sta $37				sta 	zTemp0+1
.9cf6					_SSMNoCarry:
.9cf6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf9	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate 			; allocate that many characters
.9cfc	5a		phy				phy 								; save Y
.9cfd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cff					_SSMCopy:
.9cff	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d01	f0 09		beq $9d0c			beq 	_SSMEString 				; no more to copy
.9d03	20 3d a7	jsr $a73d			jsr 	StringTempWrite 			; and write it out.
.9d06	c8		iny				iny
.9d07	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d0a	d0 f3		bne $9cff			bne 	_SSMCopy
.9d0c					_SSMEString:
.9d0c	7a		ply				ply
.9d0d					_SSMExit:
.9d0d	60		rts				rts
.9d0e					_SSMNull:
.9d0e	a9 00		lda #$00			lda 	#0
.9d10	20 ff a6	jsr $a6ff			jsr 	StringTempAllocate
.9d13	60		rts				rts
.9d14					SubstringInitial:
.9d14	da		phx				phx 								; save initial stack position
.9d15	08		php				php 								; save carry on stack indicating 2 parameters
.9d16	20 50 9d	jsr $9d50			jsr 	EvaluateString 				; get a string
.9d19	5a		phy				phy 								; calculate length to exponent.
.9d1a	a0 ff		ldy #$ff			ldy 	#$FF
.9d1c					_SIFindLength:
.9d1c	c8		iny				iny
.9d1d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d1f	d0 fb		bne $9d1c			bne 	_SIFindLength
.9d21	98		tya				tya
.9d22	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d25	7a		ply				ply
.9d26	e8		inx				inx
.9d27	20 48 8d	jsr $8d48			jsr 	CheckComma 					; comma next
.9d2a	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get next parameter
.9d2d	28		plp				plp 								; is it the last parameter ?
.9d2e	90 07		bcc $9d37			bcc 	_SSIExit 					; if so, exit.
.9d30	e8		inx				inx
.9d31	20 48 8d	jsr $8d48			jsr 	CheckComma 					; comma next
.9d34	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get last parameter
.9d37					_SSIExit:
.9d37	fa		plx				plx
.9d38	20 40 8d	jsr $8d40			jsr 	CheckRightBracket 			; check closing bracket
.9d3b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d3c					EvaluateValue:
.9d3c	48		pha				pha
.9d3d	20 08 93	jsr $9308			jsr		EvaluateExpression 			; expression
.9d40	20 26 96	jsr $9626			jsr 	Dereference					; derefernce it
.9d43	68		pla				pla
.9d44	60		rts				rts
.9d45					EvaluateNumber:
.9d45	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; get a value
.9d48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d4b	29 10		and #$10			and 	#NSBIsString
.9d4d	d0 16		bne $9d65			bne 	HelperTypeError
.9d4f	60		rts				rts
.9d50					EvaluateString:
.9d50	20 3c 9d	jsr $9d3c			jsr 	EvaluateValue 				; get a value
.9d53	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d56	29 10		and #$10			and 	#NSBIsString
.9d58	f0 0b		beq $9d65			beq 	HelperTypeError
.9d5a					CopyAddressToTemp0:
.9d5a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d5d	85 36		sta $36				sta 	zTemp0
.9d5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d62	85 37		sta $37				sta 	zTemp0+1
.9d64	60		rts				rts
.9d65					HelperTypeError:
.9d65	4c b0 9f	jmp $9fb0			jmp 	TypeError
.9d68					EvaluateInteger:
.9d68	20 45 9d	jsr $9d45			jsr 	EvaluateNumber
.9d6b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d6e	d0 0a		bne $9d7a			bne 	HelperValueError 			; if not, it's a float.
.9d70	60		rts				rts
.9d71					EvaluateUnsignedInteger:
.9d71	20 68 9d	jsr $9d68			jsr 	EvaluateInteger 			; check integer is +ve
.9d74	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d77	30 01		bmi $9d7a			bmi 	HelperValueError
.9d79	60		rts				rts
.9d7a					HelperValueError:
.9d7a	4c b5 9f	jmp $9fb5			jmp 	ArgumentError
.9d7d					Evaluate16BitInteger:
.9d7d	20 71 9d	jsr $9d71			jsr	 	EvaluateUnsignedInteger		; get integer
.9d80	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d83	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d86	d0 f2		bne $9d7a			bne 	HelperValueError
.9d88	60		rts				rts
.9d89					Evaluate16BitIntegerSigned:
.9d89	20 68 9d	jsr $9d68			jsr	 	EvaluateInteger				; get integer
.9d8c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d8f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d92	d0 e6		bne $9d7a			bne 	HelperValueError
.9d94	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d97	10 03		bpl $9d9c			bpl 	_EISNotSigned
.9d99	20 d1 9d	jsr $9dd1			jsr 	NSMNegateMantissa
.9d9c					_EISNotSigned:
.9d9c	60		rts				rts
.9d9d					Evaluate8BitInteger:
.9d9d	20 71 9d	jsr $9d71			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9da0	d0 d8		bne $9d7a			bne 	HelperValueError
.9da2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9da5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9da8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9dab	d0 cd		bne $9d7a			bne 	HelperValueError
.9dad	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9db0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9db1					Multiply8x8:
.9db1	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9db2	85 36		sta $36			  	sta 	zTemp0
.9db4	86 37		stx $37				stx 	zTemp0+1
.9db6	a9 00		lda #$00			lda 	#0
.9db8	a2 08		ldx #$08			ldx 	#8
.9dba					_M88Loop:
.9dba	90 03		bcc $9dbf			bcc 	_M88NoAdd
.9dbc	18		clc				clc
.9dbd	65 37		adc $37				adc 	zTemp0+1
.9dbf					_M88NoAdd:
.9dbf	6a		ror a				ror 	a
.9dc0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dc2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dc3	d0 f5		bne $9dba			bne 	_M88Loop
.9dc5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dc7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dc8					NSMNegate:
.9dc8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dcb	49 80		eor #$80			eor 	#NSBIsNegative
.9dcd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dd0	60		rts				rts
.9dd1					NSMNegateMantissa:
.9dd1	38		sec				sec
.9dd2	a9 00		lda #$00			lda 	#0
.9dd4	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dd7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dda	a9 00		lda #$00			lda 	#0
.9ddc	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9ddf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9de2	a9 00		lda #$00			lda 	#0
.9de4	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9de7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dea	a9 00		lda #$00			lda 	#0
.9dec	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9def	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9df2	60		rts				rts
.9df3					NSMShiftUpTwo:
.9df3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9df6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9df9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dfc	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9dff	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e02	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e05	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e08	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e0b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e0e	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e11	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e14	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e17	60		rts				rts
.9e18					NSMSetZeroMantissaOnly:
.9e18	a9 00		lda #$00			lda 	#0
.9e1a	80 08		bra $9e24			bra 	NSMSetMantissa
.9e1c					NSMSetZero:
.9e1c	a9 00		lda #$00			lda 	#0
.9e1e					NSMSetByte:
.9e1e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e21	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e24					NSMSetMantissa:
.9e24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e27	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e2a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e2d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e30	60		rts				rts
.9e31					NSMShiftLeft:
.9e31	18		clc				clc
.9e32					NSMRotateLeft:
.9e32	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e35	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e38	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e3b	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e3e	60		rts				rts
.9e3f					NSMShiftRight:
.9e3f	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e42	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e45	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e48	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e4b	60		rts				rts
.9e4c					NSMIsZero:
.9e4c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e4f	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e52	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e55	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e59					Assemble_ora:
.9e59	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e5c	01					.byte $01
.9e5d					Assemble_and:
.9e5d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e60	21					.byte $21
.9e61					Assemble_eor:
.9e61	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e64	41					.byte $41
.9e65					Assemble_adc:
.9e65	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e68	61					.byte $61
.9e69					Assemble_sta:
.9e69	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e6c	81					.byte $81
.9e6d					Assemble_lda:
.9e6d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e70	a1					.byte $a1
.9e71					Assemble_cmp:
.9e71	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e74	c1					.byte $c1
.9e75					Assemble_sbc:
.9e75	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e78	e1					.byte $e1
.9e79					Assemble_asl:
.9e79	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e7c	02					.byte $02
>9e7d	75					.byte $75
.9e7e					Assemble_rol:
.9e7e	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e81	22					.byte $22
>9e82	75					.byte $75
.9e83					Assemble_lsr:
.9e83	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e86	42					.byte $42
>9e87	75					.byte $75
.9e88					Assemble_ror:
.9e88	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8b	62					.byte $62
>9e8c	75					.byte $75
.9e8d					Assemble_stx:
.9e8d	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e90	82					.byte $82
>9e91	50					.byte $50
.9e92					Assemble_ldx:
.9e92	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e95	a2					.byte $a2
>9e96	d0					.byte $d0
.9e97					Assemble_dec:
.9e97	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9a	c2					.byte $c2
>9e9b	55					.byte $55
.9e9c					Assemble_inc:
.9e9c	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9f	e2					.byte $e2
>9ea0	55					.byte $55
.9ea1					Assemble_stz:
.9ea1	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea4	60					.byte $60
>9ea5	44					.byte $44
.9ea6					Assemble_bit:
.9ea6	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea9	20					.byte $20
>9eaa	55					.byte $55
.9eab					Assemble_sty:
.9eab	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eae	80					.byte $80
>9eaf	54					.byte $54
.9eb0					Assemble_ldy:
.9eb0	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eb3	a0					.byte $a0
>9eb4	d5					.byte $d5
.9eb5					Assemble_cpy:
.9eb5	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eb8	c0					.byte $c0
>9eb9	d4					.byte $d4
.9eba					Assemble_cpx:
.9eba	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ebd	e0					.byte $e0
>9ebe	d0					.byte $d0
.9ebf					Assemble_tsb:
.9ebf	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ec2	00					.byte $00
>9ec3	50					.byte $50
.9ec4					Assemble_trb:
.9ec4	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ec7	10					.byte $10
>9ec8	50					.byte $50
.9ec9					Assemble_jsr:
.9ec9	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ecc	14					.byte $14
>9ecd	10					.byte $10
.9ece					Assemble_jmp:
.9ece	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ed1	40					.byte $40
>9ed2	10					.byte $10
.9ed3					Assemble_bpl:
.9ed3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed6	10					.byte $10
.9ed7					Assemble_bmi:
.9ed7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eda	30					.byte $30
.9edb					Assemble_bvc:
.9edb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ede	50					.byte $50
.9edf					Assemble_bvs:
.9edf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ee2	70					.byte $70
.9ee3					Assemble_bcc:
.9ee3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ee6	90					.byte $90
.9ee7					Assemble_bcs:
.9ee7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eea	b0					.byte $b0
.9eeb					Assemble_bne:
.9eeb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eee	d0					.byte $d0
.9eef					Assemble_beq:
.9eef	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ef2	f0					.byte $f0
.9ef3					Assemble_bra:
.9ef3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ef6	80					.byte $80
.9ef7					Assemble_brk:
.9ef7	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efa	00					.byte $00
.9efb					Assemble_php:
.9efb	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efe	08					.byte $08
.9eff					Assemble_clc:
.9eff	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f02	18					.byte $18
.9f03					Assemble_plp:
.9f03	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f06	28					.byte $28
.9f07					Assemble_sec:
.9f07	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0a	38					.byte $38
.9f0b					Assemble_rti:
.9f0b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0e	40					.byte $40
.9f0f					Assemble_pha:
.9f0f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f12	48					.byte $48
.9f13					Assemble_cli:
.9f13	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f16	58					.byte $58
.9f17					Assemble_phy:
.9f17	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1a	5a					.byte $5a
.9f1b					Assemble_rts:
.9f1b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1e	60					.byte $60
.9f1f					Assemble_pla:
.9f1f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f22	68					.byte $68
.9f23					Assemble_sei:
.9f23	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f26	78					.byte $78
.9f27					Assemble_ply:
.9f27	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2a	7a					.byte $7a
.9f2b					Assemble_dey:
.9f2b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2e	88					.byte $88
.9f2f					Assemble_txa:
.9f2f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f32	8a					.byte $8a
.9f33					Assemble_tya:
.9f33	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f36	98					.byte $98
.9f37					Assemble_txs:
.9f37	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3a	9a					.byte $9a
.9f3b					Assemble_tay:
.9f3b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3e	a8					.byte $a8
.9f3f					Assemble_tax:
.9f3f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f42	aa					.byte $aa
.9f43					Assemble_clv:
.9f43	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f46	b8					.byte $b8
.9f47					Assemble_tsx:
.9f47	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4a	ba					.byte $ba
.9f4b					Assemble_iny:
.9f4b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4e	c8					.byte $c8
.9f4f					Assemble_dex:
.9f4f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f52	ca					.byte $ca
.9f53					Assemble_cld:
.9f53	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f56	d8					.byte $d8
.9f57					Assemble_phx:
.9f57	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f5a	da					.byte $da
.9f5b					Assemble_stp:
.9f5b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f5e	db					.byte $db
.9f5f					Assemble_inx:
.9f5f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f62	e8					.byte $e8
.9f63					Assemble_nop:
.9f63	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f66	ea					.byte $ea
.9f67					Assemble_sed:
.9f67	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f6a	f8					.byte $f8
.9f6b					Assemble_plx:
.9f6b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f6e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f6f					DecimalScalarTable:
>9f6f	66 66 66 66				.dword $66666666 ; 0.1
>9f73	de					.byte $de
>9f74	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f78	db					.byte $db
>9f79	4c 37 89 41				.dword $4189374c ; 0.001
>9f7d	d8					.byte $d8
>9f7e	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f82	d4					.byte $d4
>9f83	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f87	d1					.byte $d1
>9f88	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f8c	ce					.byte $ce
>9f8d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f91	ca					.byte $ca
>9f92	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f96	c7					.byte $c7
>9f97	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f9b	c4					.byte $c4
>9f9c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9fa0	c0					.byte $c0
>9fa1	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9fa5	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9fa6					SyntaxError:
.9fa6	a9 02		lda #$02		lda	#2
.9fa8	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.9fab					RangeError:
.9fab	a9 04		lda #$04		lda	#4
.9fad	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.9fb0					TypeError:
.9fb0	a9 05		lda #$05		lda	#5
.9fb2	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.9fb5					ArgumentError:
.9fb5	a9 07		lda #$07		lda	#7
.9fb7	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.9fba					NotDoneError:
.9fba	a9 0c		lda #$0c		lda	#12
.9fbc	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.9fbf					ErrorText:
>9fbf	42 72 65 61 6b 00			.text	"Break",0
>9fc5	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fcd	72 72 6f 72 00
>9fd2	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fda	20 62 79 20 7a 65 72 6f 00
>9fe3	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9feb	61 6e 67 65 00
>9ff0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ff8	6d 61 74 63 68 00
>9ffe	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a006	65 6d 6f 72 79 00
>a00c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a014	61 72 67 75 6d 65 6e 74 00
>a01d	53 74 6f 70 00				.text	"Stop",0
>a022	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a02a	6f 6f 20 6c 6f 6e 67 00
>a032	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a03a	6e 20 66 61 69 6c 65 64 00
>a043	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a04b	61 74 61 00
>a04f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a057	65 6e 74 65 64 00
>a05d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a065	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a071	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a079	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a086	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a08e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a09b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0a3	68 6f 75 74 20 57 68 69 6c 65 00
>a0ae	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0b6	68 6f 75 74 20 46 6f 72 00
>a0bf	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0c7	61 63 6b 20 66 75 6c 6c 00
>a0d0	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0d8	75 63 74 75 72 65 00
>a0df	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0e7	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0f4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0fc	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a10a	41 72 72 61 79 20 73 69			.text	"Array size",0
>a112	7a 65 00
>a115	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a11d	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a125	42 75 69 6c 74 20 53 61			.text "Built Saturday 19-Nov-2022. Build 3204."
>a12d	74 75 72 64 61 79 20 31 39 2d 4e 6f 76 2d 32 30
>a13d	32 32 2e 20 42 75 69 6c 64 20 33 32 30 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a14c					MemoryDeleteLine:
.a14c	20 6b a1	jsr $a16b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a14f	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a151	a8		tay				tay
.a152					_MDDLLoop:
.a152	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a154	92 30		sta ($30)			sta 	(codePtr)
.a156	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a158	c5 3a		cmp $3a				cmp 	zTemp2
.a15a	d0 07		bne $a163			bne 	_MDLDLNext
.a15c	a5 31		lda $31				lda 	codePtr+1
.a15e	c5 3b		cmp $3b				cmp 	zTemp2+1
.a160	d0 01		bne $a163			bne 	_MDLDLNext
.a162					_MDDLExit:
.a162	60		rts				rts
.a163					_MDLDLNext:
.a163	e6 30		inc $30				inc 	codePtr						; next byte
.a165	d0 eb		bne $a152			bne 	_MDDLLoop
.a167	e6 31		inc $31				inc 	codePtr+1
.a169	80 e7		bra $a152			bra 	_MDDLLoop
.a16b					IMemoryFindEnd:
.a16b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a16d	85 3a		sta $3a				sta 	0+zTemp2
.a16f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a171	85 3b		sta $3b				sta 	1+zTemp2
.a173					_MDLFELoop:
.a173	b2 3a		lda ($3a)			lda 	(zTemp2)
.a175	f0 0b		beq $a182			beq 	_MDLFEExit
.a177	18		clc				clc
.a178	65 3a		adc $3a				adc 	zTemp2
.a17a	85 3a		sta $3a				sta 	zTemp2
.a17c	90 f5		bcc $a173			bcc 	_MDLFELoop
.a17e	e6 3b		inc $3b				inc 	zTemp2+1
.a180	80 f1		bra $a173			bra 	_MDLFELoop
.a182					_MDLFEExit:
.a182	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a183					MemoryInsertLine:
.a183	08		php				php
.a184	20 6b a1	jsr $a16b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a187	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a189	1a		inc a				inc 	a
.a18a	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a18c	b0 36		bcs $a1c4			bcs 	_MDLIError
.a18e	28		plp				plp
.a18f	90 08		bcc $a199			bcc 	_MDLIFound
.a191	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a193	85 30		sta $30				sta 	codePtr
.a195	a5 3b		lda $3b				lda 	zTemp2+1
.a197	85 31		sta $31				sta 	codePtr+1
.a199					_MDLIFound:
.a199	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a19c	a8		tay				tay
.a19d					_MDLIInsert:
.a19d	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a19f	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a1a1	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a1a3	c5 3a		cmp $3a				cmp 	zTemp2
.a1a5	d0 06		bne $a1ad			bne 	_MDLINext
.a1a7	a5 31		lda $31				lda 	codePtr+1
.a1a9	c5 3b		cmp $3b				cmp 	zTemp2+1
.a1ab	f0 0a		beq $a1b7			beq 	_MDLIHaveSpace
.a1ad					_MDLINext:
.a1ad	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a1af	d0 02		bne $a1b3			bne 	_MDLINoBorrow
.a1b1	c6 3b		dec $3b				dec 	zTemp2+1
.a1b3					_MDLINoBorrow:
.a1b3	c6 3a		dec $3a				dec 	zTemp2
.a1b5	80 e6		bra $a19d			bra 	_MDLIInsert
.a1b7					_MDLIHaveSpace:
.a1b7	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1ba	88		dey				dey 								; from offset-1 to 0
.a1bb					_MDLICopy:
.a1bb	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1be	91 30		sta ($30),y			sta 	(codePtr),y
.a1c0	88		dey				dey
.a1c1	10 f8		bpl $a1bb			bpl 	_MDLICopy
.a1c3	60		rts				rts
.a1c4					_MDLIError:
.a1c4	a9 06		lda #$06		lda	#6
.a1c6	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.a1c9					MDLAppendLine:
.a1c9	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1cb	85 36		sta $36				sta 	zTemp0
.a1cd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1cf	85 38		sta $38				sta 	0+zTemp1
.a1d1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1d3	85 39		sta $39				sta 	1+zTemp1
.a1d5	b2 38		lda ($38)			lda 	(zTemp1)
.a1d7	d0 0a		bne $a1e3			bne 	_MDLANoInitialise
.a1d9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1db	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1de	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1e0	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1e3					_MDLANoInitialise:
.a1e3	18		clc				clc
.a1e4	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1e7	85 38		sta $38				sta 	zTemp1
.a1e9	72 36		adc ($36)			adc 	(zTemp0)
.a1eb	8d 2b 06	sta $062b			sta 	AppendPointer
.a1ee	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1f1	85 39		sta $39				sta 	zTemp1+1
.a1f3	69 00		adc #$00			adc 	#0
.a1f5	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1f8	a0 00		ldy #$00			ldy 	#0
.a1fa					_MDLACopy:
.a1fa	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1fc	91 38		sta ($38),y			sta 	(zTemp1),y
.a1fe	c8		iny				iny
.a1ff	98		tya				tya
.a200	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a202	d0 f6		bne $a1fa			bne 	_MDLACopy
.a204	a9 00		lda #$00			lda 	#0 							; end of program.
.a206	91 38		sta ($38),y			sta 	(zTemp1),y
.a208	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a209					MemoryNew:
.a209	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a20b	85 30		sta $30				sta 	codePtr
.a20d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a20f	85 31		sta $31				sta 	codePtr+1
.a211	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a213	92 30		sta ($30)			sta 	(codePtr)
.a215	60		rts				rts
.a216					MemoryInline:
.a216	98		tya				tya 								; put address into stack,x
.a217	18		clc				clc
.a218	65 30		adc $30				adc 	codePtr
.a21a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a21d	a5 31		lda $31				lda 	codePtr+1
.a21f	69 00		adc #$00			adc 	#0
.a221	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a224	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a227	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a22a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a22b					MemorySearch:
.a22b	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a22d	86 37		stx $37				stx 	zTemp0+1
.a22f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a231	85 30		sta $30				sta 	codePtr
.a233	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a235	85 31		sta $31				sta 	codePtr+1
.a237					_MTAXLoop:
.a237	b2 30		lda ($30)			lda 	(codePtr)
.a239	18		clc				clc
.a23a	f0 21		beq $a25d			beq 	_MTAXExit 					; reached end, exit with CC.
.a23c	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a23e	b1 30		lda ($30),y			lda 	(codePtr),y
.a240	38		sec				sec
.a241	e5 36		sbc $36				sbc 	zTemp0
.a243	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a245	c8		iny				iny 								; do the MSB
.a246	b1 30		lda ($30),y			lda 	(codePtr),y
.a248	e5 37		sbc $37				sbc 	zTemp0+1
.a24a	05 38		ora $38				ora 	zTemp1
.a24c	f0 0f		beq $a25d			beq 	_MTAXExit	 				; found
.a24e	b0 0d		bcs $a25d			bcs 	_MTAXExit 					; current < required exit
.a250	18		clc				clc
.a251	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a253	65 30		adc $30				adc 	codePtr
.a255	85 30		sta $30				sta 	codePtr
.a257	90 02		bcc $a25b			bcc 	_CREExit
.a259	e6 31		inc $31				inc 	codePtr+1
.a25b					_CREExit:
.a25b	80 da		bra $a237			bra 	_MTAXLoop
.a25d					_MTAXExit:
.a25d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a25e					RectangleCommand:
.a25e	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a260	80 02		bra $a264			bra 	ShapeDrawCmd
.a262					CircleCommand:
.a262	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a264					ShapeDrawCmd:
.a264	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a267					ShapeDraw:
.a267	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a26a	4c e6 a2	jmp $a2e6			jmp 	ExecuteGraphicCommand	 	; and complete
.a26d					SpriteCommand:
.a26d	a2 00		ldx #$00			ldx 	#0
.a26f	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get image number.
.a272	5a		phy				phy
.a273	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a275	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a278	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a27a	b0 0d		bcs $a289			bcs 	_SCRange
.a27c	a0 ff		ldy #$ff			ldy 	#255
.a27e	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a281	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a283	7a		ply				ply
.a284	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a287	80 5d		bra $a2e6			bra 	ExecuteGraphicCommand
.a289					_SCRange:
.a289	4c ab 9f	jmp $9fab			jmp 	RangeError
.a28c					ImageCommand:
.a28c	a2 00		ldx #$00			ldx 	#0
.a28e	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get image number.
.a291	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a294					ImageRunDraw:
.a294	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a296	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a299	ad 34 06	lda $0634			lda 	gxDrawScale
.a29c	0a		asl a				asl 	a
.a29d	0a		asl a				asl 	a
.a29e	0a		asl a				asl 	a
.a29f	a8		tay				tay
.a2a0	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a2a2	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a2a5	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a2a8	60		rts				rts
.a2a9					TextCommand:
.a2a9	a2 00		ldx #$00			ldx 	#0
.a2ab	20 50 9d	jsr $9d50			jsr 	EvaluateString 				; get text
.a2ae	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a2b1					TextRunDraw:
.a2b1	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2b3	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a2b6	a0 00		ldy #$00			ldy 	#0
.a2b8					_IRDLoop:
.a2b8	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a2bb	85 37		sta $37				sta 	zTemp0+1
.a2bd	ad 08 04	lda $0408			lda 	NSMantissa0
.a2c0	85 36		sta $36				sta 	zTemp0
.a2c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2c4	f0 13		beq $a2d9			beq 	_IRDExit
.a2c6	5a		phy				phy									; save string pos
.a2c7	48		pha				pha 								; save char
.a2c8	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2cb	0a		asl a				asl 	a
.a2cc	0a		asl a				asl 	a
.a2cd	0a		asl a				asl 	a
.a2ce	a8		tay				tay
.a2cf	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2d1	fa		plx				plx 								; char to draw
.a2d2	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a2d5	7a		ply				ply 								; restore string pos
.a2d6	c8		iny				iny
.a2d7	90 df		bcc $a2b8			bcc 	_IRDLoop 					; go back if no error.
.a2d9					_IRDExit:
.a2d9	60		rts				rts
.a2da					PlotCommand:
.a2da	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2dc	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a2df	80 05		bra $a2e6			bra 	ExecuteGraphicCommand
.a2e1					LineCommand:
.a2e1	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2e3	20 f2 a2	jsr $a2f2			jsr 	RunGraphicsCommand
.a2e6					ExecuteGraphicCommand:
.a2e6	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2e9	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw 				; draw it and exit
.a2ec	b0 01		bcs $a2ef			bcs 	_EGCError
.a2ee	60		rts				rts
.a2ef					_EGCError:
.a2ef	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.a2f2					RunGraphicsCommand:
.a2f2	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2f5	68		pla				pla 								; pop handler address
.a2f6	fa		plx				plx
.a2f7	1a		inc a				inc 	a
.a2f8	d0 01		bne $a2fb			bne 	_RGINoCarry
.a2fa	e8		inx				inx
.a2fb					_RGINoCarry:
.a2fb	8d 32 06	sta $0632			sta 	GXHandler
.a2fe	8e 33 06	stx $0633			stx 	GXHandler+1
.a301					_RGICommandLoop:
.a301	b1 30		lda ($30),y			lda 	(codePtr),y
.a303	c8		iny				iny
.a304	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a306	f0 53		beq $a35b			beq 	_RGI_To
.a308	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a30a	f0 55		beq $a361			beq 	_RGI_Here
.a30c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a30e	f0 3d		beq $a34d			beq 	_RGI_Exit
.a310	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a312	f0 39		beq $a34d			beq 	_RGI_Exit
.a314	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a316	f0 3e		beq $a356			beq 	_RGI_Frame
.a318	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a31a	f0 33		beq $a34f			beq 	_RGI_Solid
.a31c	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a31e	f0 4b		beq $a36b			beq 	_RGI_By
.a320	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a322	f0 17		beq $a33b			beq 	_RGI_Move2
.a324	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a326	f0 65		beq $a38d			beq 	_RGI_Dim
.a328	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a32a	f0 78		beq $a3a4			beq 	_RGI_Colour
.a32c	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a32e	f0 74		beq $a3a4			beq 	_RGI_Colour
.a330	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a333	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a335	d0 03		bne $a33a			bne 	_RGI_Move 					; move
.a337	4c ce a3	jmp $a3ce			jmp		_RGI_SpriteInstructions
.a33a					_RGI_Move:
.a33a	88		dey				dey 								; unpick get.
.a33b					_RGI_Move2:
.a33b	20 f4 a3	jsr $a3f4			jsr 	GCGetCoordinatePair 		; move to here
.a33e	20 1b a4	jsr $a41b			jsr 	GCCopyPairToStore 			; save
.a341	5a		phy				phy
.a342	20 11 a4	jsr $a411			jsr 	GCLoadAXY 					; load in
.a345	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a347	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a34a	7a		ply				ply
.a34b	80 b4		bra $a301			bra 	_RGICommandLoop 			; and go round
.a34d					_RGI_Exit:
.a34d	88		dey				dey 								; unpick : / EOL
.a34e	60		rts				rts
.a34f					_RGI_Solid:
.a34f	a9 02		lda #$02			lda 	#2
.a351	8d 2e 06	sta $062e			sta 	gxFillSolid
.a354	80 ab		bra $a301			bra 	_RGICommandLoop
.a356					_RGI_Frame:
.a356	9c 2e 06	stz $062e			stz 	gxFillSolid
.a359	80 a6		bra $a301			bra 	_RGICommandLoop
.a35b					_RGI_To:
.a35b	20 f4 a3	jsr $a3f4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a35e	20 1b a4	jsr $a41b			jsr 	GCCopyPairToStore
.a361					_RGI_Here:
.a361	5a		phy				phy
.a362	20 11 a4	jsr $a411			jsr 	GCLoadAXY 					; load it into AXY
.a365	20 cb a3	jsr $a3cb			jsr 	_RGICallHandler 			; go do whatever it is.
.a368	7a		ply				ply
.a369	80 96		bra $a301			bra 	_RGICommandLoop 			; and go round
.a36b					_RGI_By:
.a36b	20 01 a4	jsr $a401			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a36e	18		clc				clc
.a36f	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a372	6d 2f 06	adc $062f			adc 	gxxPos
.a375	8d 2f 06	sta $062f			sta 	gxXPos
.a378	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a37b	6d 30 06	adc $0630			adc 	gxxPos+1
.a37e	8d 30 06	sta $0630			sta 	gxXPos+1
.a381	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a384	18		clc				clc
.a385	6d 31 06	adc $0631			adc 	gxYPos
.a388	8d 31 06	sta $0631			sta 	gxYPos
.a38b	80 d4		bra $a361			bra 	_RGI_Here
.a38d					_RGI_Dim:
.a38d	a2 01		ldx #$01			ldx	 	#1
.a38f	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger
.a392	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a395	c9 00		cmp #$00			cmp 	#0
.a397	f0 2f		beq $a3c8			beq 	_RGIRange
.a399	c9 09		cmp #$09			cmp 	#8+1
.a39b	b0 2b		bcs $a3c8			bcs		_RGIRange
.a39d	3a		dec a				dec 	a
.a39e	8d 34 06	sta $0634			sta 	gxDrawScale
.a3a1	4c 01 a3	jmp $a301			jmp 	_RGICommandLoop
.a3a4					_RGI_Colour:
.a3a4	a2 01		ldx #$01			ldx 	#1 							; colour
.a3a6	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger
.a3a9	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3ab	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero
.a3ae	b1 30		lda ($30),y			lda 	(codePtr),y
.a3b0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3b2	d0 04		bne $a3b8			bne 	_RGICDefaultMode
.a3b4	c8		iny				iny
.a3b5	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger
.a3b8					_RGICDefaultMode:
.a3b8	5a		phy				phy
.a3b9	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3bb	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3be	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3c1	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a3c4	7a		ply				ply
.a3c5	4c 01 a3	jmp $a301			jmp 	_RGICommandLoop 			; and go round
.a3c8					_RGIRange:
.a3c8	4c ab 9f	jmp $9fab			jmp 	RangeError
.a3cb					_RGICallHandler:
.a3cb	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3ce					_RGI_SpriteInstructions:
.a3ce	c9 be		cmp #$be			cmp 	#KWD_OFF
.a3d0	f0 07		beq $a3d9			beq 	_RGISpriteOff
.a3d2	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a3d4	f0 13		beq $a3e9			beq 	_RGISetImage
.a3d6	4c 3a a3	jmp $a33a			jmp 	_RGI_Move
.a3d9					_RGISpriteOff:
.a3d9	5a		phy				phy
.a3da	a0 01		ldy #$01			ldy 	#1
.a3dc	a2 00		ldx #$00			ldx 	#0
.a3de					_RGIDoCommandLoop:
.a3de	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3e0	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a3e3	7a		ply				ply
.a3e4	b0 e2		bcs $a3c8			bcs 	_RGIRange
.a3e6	4c 01 a3	jmp $a301			jmp 	_RGICommandLoop
.a3e9					_RGISetImage:
.a3e9	a2 01		ldx #$01			ldx 	#1
.a3eb	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger
.a3ee	5a		phy				phy
.a3ef	aa		tax				tax
.a3f0	a0 00		ldy #$00			ldy 	#0
.a3f2	80 ea		bra $a3de			bra 	_RGIDoCommandLoop
.a3f4					GCGetCoordinatePair:
.a3f4	a2 01		ldx #$01			ldx 	#1
.a3f6	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.a3f9	20 48 8d	jsr $8d48			jsr 	CheckComma
.a3fc	e8		inx				inx
.a3fd	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.a400	60		rts				rts
.a401					GCSignedCoordinatePair:
.a401	a2 01		ldx #$01			ldx 	#1
.a403	20 89 9d	jsr $9d89			jsr 	Evaluate16BitIntegerSigned
.a406	20 48 8d	jsr $8d48			jsr 	CheckComma
.a409	e8		inx				inx
.a40a	20 89 9d	jsr $9d89			jsr 	Evaluate16BitIntegerSigned
.a40d	60		rts				rts
.a40e					_GCCPRange:
.a40e	4c ab 9f	jmp $9fab			jmp 	RangeError
.a411					GCLoadAXY:
.a411	ad 30 06	lda $0630			lda 	gxXPos+1
.a414	ae 2f 06	ldx $062f			ldx 	gxXPos
.a417	ac 31 06	ldy $0631			ldy 	gxYPos
.a41a	60		rts				rts
.a41b					GCCopyPairToStore:
.a41b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a41e	8d 2f 06	sta $062f			sta 	gxXPos
.a421	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a424	8d 30 06	sta $0630			sta 	gxXPos+1
.a427	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a42a	8d 31 06	sta $0631			sta 	gxYPos
.a42d	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a42e					BitmapCtrl:
.a42e	b1 30		lda ($30),y			lda 	(codePtr),y
.a430	c8		iny				iny
.a431	a2 01		ldx #$01			ldx 	#1
.a433	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a435	f0 11		beq $a448			beq 	BitmapSwitch
.a437	ca		dex				dex
.a438	c9 be		cmp #$be			cmp 	#KWD_OFF
.a43a	f0 0c		beq $a448			beq 	BitmapSwitch
.a43c	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get the colour
.a43f	5a		phy				phy
.a440	aa		tax				tax
.a441	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a443	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a446	7a		ply				ply
.a447	60		rts				rts
.a448					BitmapSwitch:
.a448	5a		phy				phy
.a449	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a44b	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a44d	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a450	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a452	a0 00		ldy #$00			ldy 	#0
.a454	a2 ff		ldx #$ff			ldx 	#$FF
.a456	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a459	9c 2e 06	stz $062e			stz 	gxFillSolid
.a45c	9c 2f 06	stz $062f			stz 	gxXPos
.a45f	9c 30 06	stz $0630			stz 	gxXPos+1
.a462	9c 31 06	stz $0631			stz 	gxYPos
.a465	9c 34 06	stz $0634			stz 	gxDrawScale
.a468	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a46a	a2 00		ldx #$00			ldx 	#0
.a46c	a0 00		ldy #$00			ldy 	#0
.a46e	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a471	7a		ply				ply
.a472	60		rts				rts
.a473					SpritesCtrl:
.a473	b1 30		lda ($30),y			lda 	(codePtr),y
.a475	c8		iny				iny
.a476	a2 01		ldx #$01			ldx 	#1
.a478	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a47a	f0 08		beq $a484			beq 	SpriteSwitch
.a47c	ca		dex				dex
.a47d	c9 be		cmp #$be			cmp 	#KWD_OFF
.a47f	f0 03		beq $a484			beq 	SpriteSwitch
.a481	4c a6 9f	jmp $9fa6			jmp 	SyntaxError
.a484					SpriteSwitch:
.a484	5a		phy				phy
.a485	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a487	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a489	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a48c	7a		ply				ply
.a48d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a48e					GfxCommand:
.a48e	a2 00		ldx #$00			ldx 	#0
.a490	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; command
.a493	20 48 8d	jsr $8d48			jsr 	CheckComma
.a496	e8		inx				inx
.a497	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger 		; X
.a49a	20 48 8d	jsr $8d48			jsr 	CheckComma
.a49d	e8		inx				inx
.a49e	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; Y
.a4a1	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a4a4	4a		lsr a				lsr 	a
.a4a5	d0 16		bne $a4bd			bne 	_GfxError
.a4a7	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a4aa	b0 11		bcs $a4bd			bcs 	_GfxError 					; bit 7 should have been zero
.a4ac	5a		phy				phy 								; save pos
.a4ad	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a4b0	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a4b3	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a4b6	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw
.a4b9	b0 02		bcs $a4bd			bcs 	_GfxError
.a4bb	7a		ply				ply 								; restore pos and exit.
.a4bc	60		rts				rts
.a4bd					_GfxError:
.a4bd	4c ab 9f	jmp $9fab			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4c0					UnaryHit:
.a4c0	fa		plx				plx
.a4c1	a9 36		lda #$36			lda 	#zTemp0
.a4c3	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4c6	20 48 8d	jsr $8d48			jsr 	CheckComma
.a4c9	e8		inx				inx
.a4ca	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4cd	20 40 8d	jsr $8d40			jsr		CheckRightBracket
.a4d0	ca		dex				dex 								; fix back up again.
.a4d1	da		phx				phx 								; save X/Y
.a4d2	5a		phy				phy
.a4d3	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4d6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4d9	aa		tax				tax
.a4da	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4dc	20 38 aa	jsr $aa38			jsr 	GXGraphicDraw 				; calculate result
.a4df	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4e0	7a		ply				ply 								; restore XY
.a4e1	fa		plx				plx
.a4e2	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte 					; return the hit result
.a4e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4e6					PaletteCommand:
.a4e6	a2 00		ldx #$00			ldx 	#0
.a4e8	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; colour
.a4eb	20 48 8d	jsr $8d48			jsr 	CheckComma
.a4ee	e8		inx				inx
.a4ef	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger 		; r
.a4f2	20 48 8d	jsr $8d48			jsr 	CheckComma
.a4f5	e8		inx				inx
.a4f6	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; g
.a4f9	20 48 8d	jsr $8d48			jsr 	CheckComma
.a4fc	e8		inx				inx
.a4fd	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; b
.a500	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a503	85 36		sta $36				sta 	zTemp0
.a505	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a507	85 37		sta $37				sta 	zTemp0+1
.a509	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a50b	26 37		rol $37				rol	 	zTemp0+1
.a50d	06 36		asl $36				asl 	zTemp0
.a50f	26 37		rol $37				rol	 	zTemp0+1
.a511	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a513	85 01		sta $01				sta 	1
.a515	5a		phy				phy
.a516	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a519	92 36		sta ($36)			sta 	(zTemp0)
.a51b	a0 01		ldy #$01			ldy 	#1
.a51d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a520	91 36		sta ($36),y			sta 	(zTemp0),y
.a522	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a525	c8		iny				iny
.a526	91 36		sta ($36),y			sta 	(zTemp0),y
.a528	7a		ply				ply
.a529	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/event.asm

.a52a					UnaryEvent:
.a52a	fa		plx				plx
.a52b	20 d2 a5	jsr $a5d2			jsr 	TimerToStackX 				; timer in +0
.a52e	e8		inx				inx  								; put reference into +1
.a52f	20 e2 97	jsr $97e2			jsr 	EvaluateTerm
.a532	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a535	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a537	d0 57		bne $a590			bne 	_UEType
.a539	e8		inx				inx 								; put the step in +2
.a53a	20 48 8d	jsr $8d48			jsr 	CheckComma
.a53d	20 7d 9d	jsr $9d7d			jsr 	Evaluate16BitInteger
.a540	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.a543	ca		dex				dex
.a544	ca		dex				dex
.a545	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a548	85 36		sta $36				sta 	zTemp0
.a54a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a54d	85 37		sta $37				sta 	zTemp0+1
.a54f	5a		phy				phy
.a550	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a552	b1 36		lda ($36),y			lda 	(zTemp0),y
.a554	30 36		bmi $a58c			bmi 	_UEFalse 					; exit if signed.
.a556	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a558	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a55b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a55d	c8		iny				iny
.a55e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a561	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a563	c8		iny				iny
.a564	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a567	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a569	90 21		bcc $a58c			bcc 	_UEFalse 					; no, return FALSE.
.a56b	18		clc				clc
.a56c	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a56e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a571	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a574	91 36		sta ($36),y			sta 	(zTemp0),y
.a576	c8		iny				iny
.a577	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a57a	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a57d	91 36		sta ($36),y			sta 	(zTemp0),y
.a57f	c8		iny				iny
.a580	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a583	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a586	91 36		sta ($36),y			sta 	(zTemp0),y
.a588	7a		ply				ply
.a589	4c c6 8d	jmp $8dc6			jmp 	ReturnTrue
.a58c					_UEFalse:
.a58c	7a		ply				ply 								; restore Y
.a58d	4c d2 8d	jmp $8dd2			jmp 	ReturnFalse 				; and return False
.a590					_UEType:
.a590	4c b0 9f	jmp $9fb0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/joy.asm

.a593					UnaryJoyX:
.a593	18		clc				clc
.a594	80 01		bra $a597			bra 	JoyMain
.a596					UnaryJoyY:
.a596	38		sec				sec
.a597					JoyMain:
.a597	fa		plx				plx 								; get pos
.a598	08		php				php 								; save carry (set for Y)
.a599	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a59c	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.a59f	20 f1 a9	jsr $a9f1			jsr 	EXTReadController 			; read the controller.
.a5a2	28		plp				plp
.a5a3	90 02		bcc $a5a7			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a5a5	4a		lsr a				lsr 	a
.a5a6	4a		lsr a				lsr 	a
.a5a7					_JMNoShift:
.a5a7	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a5a8	b0 0a		bcs $a5b4			bcs 	_JMIsRight
.a5aa	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a5ab	b0 04		bcs $a5b1			bcs 	_JMIsLeft
.a5ad	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; zero result
.a5b0	60		rts				rts
.a5b1					_JMIsLeft:
.a5b1	4c c6 8d	jmp $8dc6			jmp 	ReturnTrue
.a5b4					_JMIsRight:
.a5b4	a9 01		lda #$01			lda 	#1
.a5b6	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.a5b9	60		rts				rts
.a5ba					UnaryJoyB:
.a5ba	fa		plx				plx 								; get pos
.a5bb	20 9d 9d	jsr $9d9d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5be	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.a5c1	20 f1 a9	jsr $a9f1			jsr 	EXTReadController 			; read the controller.
.a5c4	4a		lsr a				lsr 	a
.a5c5	4a		lsr a				lsr 	a
.a5c6	4a		lsr a				lsr 	a
.a5c7	4a		lsr a				lsr 	a
.a5c8	29 01		and #$01			and 	#1
.a5ca	20 1e 9e	jsr $9e1e			jsr 	NSMSetByte
.a5cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/timer.asm

.a5ce					UnaryTimer:
.a5ce	fa		plx				plx
.a5cf	20 40 8d	jsr $8d40			jsr 	CheckRightBracket
.a5d2					TimerToStackX:
.a5d2	20 1c 9e	jsr $9e1c			jsr 	NSMSetZero 					; zero result
.a5d5	64 01		stz $01				stz 	1 							; access I/O
.a5d7	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5da	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5dd	ad 5a d6	lda $d65a			lda 	$D65A
.a5e0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5e3	ad 5b d6	lda $d65b			lda 	$D65B
.a5e6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5ea					StackPushByte:
.a5ea	48		pha				pha 								; save byte
.a5eb	a5 34		lda $34				lda 	BasicStack
.a5ed	d0 09		bne $a5f8			bne 	_SPBNoBorrow
.a5ef	c6 35		dec $35				dec 	BasicStack+1
.a5f1	48		pha				pha
.a5f2	a5 35		lda $35				lda 	BasicStack+1
.a5f4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5f6	90 06		bcc $a5fe			bcc 	_SPBMemory
.a5f8					_SPBNoBorrow:
.a5f8	c6 34		dec $34				dec 	BasicStack
.a5fa	68		pla				pla 								; get back and write
.a5fb	92 34		sta ($34)			sta 	(BasicStack)
.a5fd	60		rts				rts
.a5fe					_SPBMemory:
.a5fe	a9 12		lda #$12		lda	#18
.a600	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.a603					StackPopByte:
.a603	b2 34		lda ($34)			lda 	(BasicStack)
.a605	e6 34		inc $34				inc 	BasicStack
.a607	d0 02		bne $a60b			bne 	_SPBNoCarry
.a609	e6 35		inc $35				inc 	BasicStack+1
.a60b					_SPBNoCarry:
.a60b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a60c					StackOpen:
.a60c	48		pha				pha 								; save frame byte
.a60d	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a60f	0a		asl a				asl 	a 							; claim twice this for storage
.a610	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a612	38		sec				sec 								; so basically subtracting from
.a613	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a615	85 34		sta $34				sta 	basicStack
.a617	b0 08		bcs $a621			bcs 	_SONoBorrow
.a619	c6 35		dec $35				dec 	basicStack+1
.a61b	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a61d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a61f	90 04		bcc $a625			bcc 	_SOMemory
.a621					_SONoBorrow:
.a621	68		pla				pla 								; get marker back and write at TOS
.a622	92 34		sta ($34)			sta 	(basicStack)
.a624	60		rts				rts
.a625					_SOMemory:
.a625	a9 12		lda #$12		lda	#18
.a627	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.a62a					StackClose:
.a62a	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a62c	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a62e	0a		asl a				asl 	a 							; claim twice this.
.a62f	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a631	85 34		sta $34				sta 	basicStack
.a633	90 02		bcc $a637			bcc 	_SCExit
.a635	e6 35		inc $35				inc 	basicStack+1
.a637					_SCExit:
.a637	60		rts				rts
.a638					StackCheckFrame:
.a638	48		pha				pha
.a639					_StackRemoveLocals:
.a639	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a63b	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a63d	b0 05		bcs $a644			bcs 	_SCNoLocal
.a63f	20 0a 88	jsr $880a			jsr 	LocalPopValue
.a642	80 f5		bra $a639			bra 	_StackRemoveLocals
.a644					_SCNoLocal:
.a644	68		pla				pla
.a645	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a647	29 f0		and #$f0			and 	#$F0 						; check type bits
.a649	d0 01		bne $a64c			bne 	_SCFError 					; different, we have structures mixed up
.a64b	60		rts				rts
.a64c					_SCFError:
.a64c	8a		txa				txa 								; report error X
.a64d	4c 59 8d	jmp $8d59			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a650					STKSaveCodePosition:
.a650	5a		phy				phy
.a651	98		tya				tya 								; save Y
.a652	a0 05		ldy #$05			ldy 	#5
.a654	91 34		sta ($34),y			sta 	(basicStack),y
.a656	88		dey				dey 								; save Code Pointer
.a657					_STKSaveLoop:
.a657	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a65a	91 34		sta ($34),y			sta 	(basicStack),y
.a65c	88		dey				dey
.a65d	d0 f8		bne $a657			bne 	_STKSaveLoop
.a65f	7a		ply				ply
.a660	60		rts				rts
.a661					STKLoadCodePosition:
.a661	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a663					_STKLoadLoop:
.a663	b1 34		lda ($34),y			lda 	(basicStack),y
.a665	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a668	c8		iny				iny
.a669	c0 05		cpy #$05			cpy 	#5
.a66b	d0 f6		bne $a663			bne 	_STKLoadLoop
.a66d	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a66f	a8		tay				tay
.a670	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a671					StackReset:
.a671	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a673	85 34		sta $34				sta 	0+basicStack
.a675	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a677	85 35		sta $35				sta 	1+basicStack
.a679	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a67b	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a67d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a67e					StringConcrete:
.a67e	5a		phy				phy 								; save position on stack
.a67f	20 e5 99	jsr $99e5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a682	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a685	85 38		sta $38				sta 	zTemp1
.a687	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a68a	85 39		sta $39				sta 	zTemp1+1
.a68c	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a68e					_SALength:
.a68e	c8		iny				iny
.a68f	b1 38		lda ($38),y			lda 	(zTemp1),y
.a691	d0 fb		bne $a68e			bne 	_SALength
.a693	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a695	b0 3f		bcs $a6d6			bcs 	_SALengthError
.a697	98		tya				tya 				 				; length of the new string
.a698	18		clc				clc
.a699	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a69b	90 02		bcc $a69f			bcc 	_SAHaveLength
.a69d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a69f					_SAHaveLength:
.a69f	48		pha				pha 								; save length.
.a6a0	38		sec				sec
.a6a1	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a6a3	6d 8e 04	adc $048e			adc 	StringMemory
.a6a6	8d 8e 04	sta $048e			sta 	StringMemory
.a6a9	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a6ab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a6ae	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a6b0	6d 8f 04	adc $048f			adc 	StringMemory+1
.a6b3	8d 8f 04	sta $048f			sta 	StringMemory+1
.a6b6	85 3b		sta $3b				sta 	zTemp2+1
.a6b8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6bb	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a6bc	38		sec				sec
.a6bd	e9 03		sbc #$03			sbc 	#3
.a6bf	92 3a		sta ($3a)			sta 	(zTemp2)
.a6c1	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6c3	a0 01		ldy #$01			ldy 	#1
.a6c5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6c7					_SACopyNewString:
.a6c7	a0 00		ldy #$00			ldy 	#0
.a6c9					_SACopyNSLoop:
.a6c9	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6cb	c8		iny				iny 								; write two on in string storage
.a6cc	c8		iny				iny
.a6cd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6cf	88		dey				dey 								; this makes it one one.
.a6d0	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6d2	d0 f5		bne $a6c9			bne 	_SACopyNSLoop
.a6d4	7a		ply				ply
.a6d5	60		rts				rts
.a6d6					_SALengthError:
.a6d6	a9 09		lda #$09		lda	#9
.a6d8	4c 59 8d	jmp $8d59		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6db					StringSystemInitialise:
.a6db	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6dd	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6e0	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6e2	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6e5	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6e8	60		rts				rts
.a6e9					StringSpaceInitialise:
.a6e9	20 e5 99	jsr $99e5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6ec	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6ee	8d 90 04	sta $0490			sta 	StringInitialised
.a6f1	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6f4	8d 91 04	sta $0491			sta 	StringTempPointer
.a6f7	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6fa	3a		dec a				dec 	a
.a6fb	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6fe	60		rts				rts
.a6ff					StringTempAllocate:
.a6ff	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a701	b0 35		bcs $a738			bcs 	_STALength
.a703	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a706	30 05		bmi $a70d			bmi 	_STAAllocate
.a708	48		pha				pha 								; save value to subtract.
.a709	20 e9 a6	jsr $a6e9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a70c	68		pla				pla 								; restore it
.a70d					_STAAllocate:
.a70d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a70f	18		clc				clc  								; deliberate allows one more
.a710	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a713	8d 91 04	sta $0491			sta 	StringTempPointer
.a716	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a719	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a71b	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a71e	69 ff		adc #$ff			adc 	#$FF
.a720	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a723	85 3d		sta $3d				sta 	zsTemp+1
.a725	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a728	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a72b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a72e	a9 10		lda #$10			lda 	#NSTString
.a730	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a733	a9 00		lda #$00			lda 	#0 							; clear the target string
.a735	92 3c		sta ($3c)			sta 	(zsTemp)
.a737	60		rts				rts
.a738					_STALength:
.a738	a9 09		lda #$09		lda	#9
.a73a	4c 59 8d	jmp $8d59		jmp	ErrorHandler
.a73d					StringTempWrite:
.a73d	48		pha				pha
.a73e	92 3c		sta ($3c)			sta 	(zsTemp)
.a740	e6 3c		inc $3c				inc 	zsTemp
.a742	d0 02		bne $a746			bne 	_STWNoCarry
.a744	e6 3d		inc $3d				inc 	zsTemp+1
.a746					_STWNoCarry:
.a746	a9 00		lda #$00			lda 	#0
.a748	92 3c		sta ($3c)			sta 	(zsTemp)
.a74a	68		pla				pla
.a74b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a74c					EXTPrintCharacter:
.a74c	48		pha				pha
.a74d	da		phx				phx
.a74e	5a		phy				phy
.a74f	a6 01		ldx $01				ldx 	1
.a751	da		phx				phx
.a752	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a755	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a757	30 48		bmi $a7a1			bmi 	_EXPCColour
.a759	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a75b	90 4d		bcc $a7aa			bcc 	_EXPCControl
.a75d	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a75f	86 01		stx $01				stx 	1
.a761	91 40		sta ($40),y			sta 	(EXTAddress),y
.a763	e6 01		inc $01				inc 	1 							; select colour memory
.a765	ad 37 06	lda $0637			lda 	EXTTextColour
.a768	91 40		sta ($40),y			sta 	(EXTAddress),y
.a76a	c8		iny				iny 								; advance horizontal position
.a76b	8c 36 06	sty $0636			sty 	EXTColumn
.a76e	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a771	90 66		bcc $a7d9			bcc 	_EXPCExit 					; no, then exit.
.a773					_EXPCCRLF:
.a773	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a776	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a779	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a77c	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a77f	f0 18		beq $a799			beq 	_EXPCScroll
.a781	18		clc				clc 								; add width to address.
.a782	a5 40		lda $40				lda 	EXTAddress
.a784	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a787	85 40		sta $40				sta 	EXTAddress
.a789	90 4e		bcc $a7d9			bcc 	_EXPCExit
.a78b	e6 41		inc $41				inc 	EXTAddress+1
.a78d	80 4a		bra $a7d9			bra 	_EXPCExit
.a78f					_EXPCLeft:
.a78f	ce 36 06	dec $0636			dec 	EXTColumn
.a792	10 45		bpl $a7d9			bpl 	_EXPCExit
.a794					_EXPCBegin:
.a794	9c 36 06	stz $0636			stz 	EXTColumn
.a797	80 40		bra $a7d9			bra 	_EXPCExit
.a799					_EXPCScroll:
.a799	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a79c	20 66 a8	jsr $a866			jsr 	EXTScreenScroll 			; scroll the screen
.a79f	80 38		bra $a7d9			bra 	_EXPCExit
.a7a1					_EXPCColour:
.a7a1	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a7a3	b0 34		bcs $a7d9			bcs 	_EXPCExit
.a7a5	20 46 a8	jsr $a846			jsr 	_EXPCHandleColour
.a7a8	80 2f		bra $a7d9			bra 	_EXPCExit
.a7aa					_EXPCControl:
.a7aa	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a7ac	b0 2b		bcs $a7d9			bcs 	_EXPCExit
.a7ae	0a		asl a				asl 	a 							; double into X
.a7af	aa		tax				tax
.a7b0	7c 24 a8	jmp ($a824,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a7b3					_EXPCUp:
.a7b3	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a7b6	f0 21		beq $a7d9			beq 	_EXPCExit
.a7b8	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a7bb	38		sec				sec
.a7bc	a5 40		lda $40				lda 	EXTAddress
.a7be	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7c1	85 40		sta $40				sta 	EXTAddress
.a7c3	b0 14		bcs $a7d9			bcs 	_EXPCExit
.a7c5	c6 41		dec $41				dec 	EXTAddress+1
.a7c7	80 10		bra $a7d9			bra 	_EXPCExit
.a7c9					_EXPCRight:
.a7c9	c8		iny				iny
.a7ca	8c 36 06	sty $0636			sty 	EXTColumn
.a7cd	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7d0	d0 07		bne $a7d9			bne 	_EXPCExit
.a7d2					_EXPCEnd:
.a7d2	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7d5	3a		dec a				dec 	a
.a7d6	8d 36 06	sta $0636			sta 	EXTColumn
.a7d9					_EXPCExit:
.a7d9	20 bb a8	jsr $a8bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7dc	68		pla				pla
.a7dd	85 01		sta $01				sta 	1
.a7df	7a		ply				ply
.a7e0	fa		plx				plx
.a7e1	68		pla				pla
.a7e2	60		rts				rts
.a7e3					_EXPCClearScreen:
.a7e3	20 78 a8	jsr $a878			jsr		EXTClearScreenCode
.a7e6	80 f1		bra $a7d9			bra 	_EXPCExit
.a7e8					_EXPCDown:
.a7e8	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7eb	3a		dec a				dec 	a
.a7ec	cd 35 06	cmp $0635			cmp 	EXTRow
.a7ef	f0 e8		beq $a7d9			beq 	_EXPCExit
.a7f1	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7f4	18		clc				clc
.a7f5	a5 40		lda $40				lda 	EXTAddress
.a7f7	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7fa	85 40		sta $40				sta 	EXTAddress
.a7fc	90 db		bcc $a7d9			bcc 	_EXPCExit
.a7fe	e6 41		inc $41				inc 	EXTAddress+1
.a800	80 d7		bra $a7d9			bra 	_EXPCExit
.a802					_EXPCTab:
.a802	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a805	29 f8		and #$f8			and 	#$F8
.a807	18		clc				clc
.a808	69 08		adc #$08			adc 	#8
.a80a	8d 36 06	sta $0636			sta 	EXTColumn
.a80d	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a810	90 c7		bcc $a7d9			bcc 	_EXPCExit
.a812	80 be		bra $a7d2			bra 	_EXPCEnd
.a814					_EXPCBackSpace:
.a814	88		dey				dey
.a815	30 c2		bmi $a7d9			bmi 	_EXPCExit
.a817	ce 36 06	dec $0636			dec 	EXTColumn
.a81a	a9 02		lda #$02			lda 	#2
.a81c	85 01		sta $01				sta 	1
.a81e	a9 20		lda #$20			lda 	#32
.a820	91 40		sta ($40),y			sta 	(EXTAddress),y
.a822	80 b5		bra $a7d9			bra 	_EXPCExit
.a824					_EXPCActionTable:
>a824	d9 a7						.word 	_EXPCExit 					; 00
>a826	94 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a828	8f a7						.word 	_EXPCLeft 					; 02 B Left
>a82a	d9 a7						.word 	_EXPCExit 					; 03 <Break>
>a82c	d9 a7						.word 	_EXPCExit 					; 04
>a82e	d2 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a830	c9 a7						.word 	_EXPCRight 					; 06 F Right
>a832	d9 a7						.word 	_EXPCExit 					; 07
>a834	14 a8						.word 	_EXPCBackspace 				; 08 H Backspace
>a836	02 a8						.word 	_EXPCTab 					; 09 I Tab
>a838	d9 a7						.word 	_EXPCExit 					; 0A
>a83a	d9 a7						.word 	_EXPCExit 					; 0B
>a83c	e3 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a83e	73 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a840	e8 a7						.word 	_EXPCDown 					; 0E N Down
>a842	d9 a7						.word 	_EXPCExit 					; 0F
>a844	b3 a7						.word 	_EXPCUp 					; 10 P Up
.a846					_EXPCHandleColour
.a846	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a848	b0 16		bcs $a860			bcs 	_EXPCBackground
.a84a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a84b	0a		asl a				asl 	a
.a84c	0a		asl a				asl 	a
.a84d	0a		asl a				asl 	a
.a84e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a850					_EXPCUpdate:
.a850	48		pha				pha 								; save new colour
.a851	8a		txa				txa 								; get mask
.a852	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a855	8d 37 06	sta $0637			sta 	EXTTextColour
.a858	68		pla				pla 								; or in new colour
.a859	0d 37 06	ora $0637			ora 	EXTTextColour
.a85c	8d 37 06	sta $0637			sta 	EXTTextColour
.a85f	60		rts				rts
.a860					_EXPCBackground:
.a860	29 0f		and #$0f			and 	#$0F 						; get the colour
.a862	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a864	80 ea		bra $a850			bra 	_EXPCUpdate
.a866					EXTScreenScroll:
.a866	a9 02		lda #$02			lda 	#2 							; select text page
.a868	85 01		sta $01				sta 	1
.a86a	a9 20		lda #$20			lda		#32 						; fill with space
.a86c	20 7b a9	jsr $a97b			jsr 	EXTScrollFill
.a86f	e6 01		inc $01				inc 	1 							; select colour page
.a871	ad 37 06	lda $0637			lda 	EXTTextColour
.a874	20 7b a9	jsr $a97b			jsr 	EXTScrollFill
.a877	60		rts				rts
.a878					EXTClearScreenCode:
.a878	a9 02		lda #$02			lda 	#2 							; select text page
.a87a	85 01		sta $01				sta 	1
.a87c	a9 20		lda #$20			lda		#32 						; fill with space
.a87e	20 8b a8	jsr $a88b			jsr 	_EXTCSFill
.a881	e6 01		inc $01				inc 	1 							; select colour page
.a883	ad 37 06	lda $0637			lda 	EXTTextColour
.a886	20 8b a8	jsr $a88b			jsr 	_EXTCSFill
.a889	80 22		bra $a8ad			bra 	EXTHomeCursor
.a88b					_EXTCSFill:
.a88b	aa		tax				tax
.a88c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a88e	85 40		sta $40				sta 	EXTAddress
.a890	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a892	85 41		sta $41				sta 	EXTAddress+1
.a894					_EXTCSFill1:
.a894	a0 00		ldy #$00			ldy 	#0
.a896	8a		txa				txa
.a897					_EXTCSFill2:
.a897	91 40		sta ($40),y			sta 	(EXTAddress),y
.a899	c8		iny				iny
.a89a	d0 fb		bne $a897			bne 	_EXTCSFill2
.a89c	e6 41		inc $41				inc 	EXTAddress+1
.a89e	a5 41		lda $41				lda 	EXTAddress+1
.a8a0	c9 d2		cmp #$d2			cmp 	#$D2
.a8a2	d0 f0		bne $a894			bne 	_EXTCSFill1
.a8a4	8a		txa				txa
.a8a5					_EXTCSFill3:
.a8a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.a8a7	c8		iny				iny
.a8a8	c0 c0		cpy #$c0			cpy 	#$C0
.a8aa	d0 f9		bne $a8a5			bne 	_EXTCSFill3
.a8ac	60		rts				rts
.a8ad					EXTHomeCursor:
.a8ad	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a8b0	9c 36 06	stz $0636			stz 	EXTColumn
.a8b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a8b5	85 40		sta $40				sta 	EXTAddress
.a8b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8b9	85 41		sta $41				sta 	EXTAddress+1
.a8bb					EXTSetHardwareCursor:
.a8bb	64 01		stz $01				stz 	1 							; I/O Page zero
.a8bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8bf	8d 10 d0	sta $d010			sta 	$D010
.a8c2	a9 b1		lda #$b1			lda 	#$B1
.a8c4	8d 12 d0	sta $d012			sta 	$D012
.a8c7	ad 36 06	lda $0636			lda 	EXTColumn
.a8ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8cd	9c 15 d0	stz $d015			stz 	$D015
.a8d0	ad 35 06	lda $0635			lda 	EXTRow
.a8d3	8d 16 d0	sta $d016			sta 	$D016
.a8d6	9c 17 d0	stz $d017			stz 	$D017
.a8d9	60		rts				rts
.a8da					EXTInputLine:
.a8da	48		pha				pha
.a8db	da		phx				phx
.a8dc	5a		phy				phy
.a8dd	a5 01		lda $01				lda 	1 							; save I/O page
.a8df	48		pha				pha
.a8e0					_EILLoop:
.a8e0	20 e2 a9	jsr $a9e2			jsr 	ExtInputSingleCharacter
.a8e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8e5	f0 40		beq $a927			beq 	_EILExit
.a8e7	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8e9	f0 1c		beq $a907			beq 	_EILBackspace
.a8eb	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8ed	90 12		bcc $a901			bcc 	_EILPrintLoop
.a8ef	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8f1	b0 0e		bcs $a901			bcs 	_EILPrintLoop
.a8f3	48		pha				pha 								; save character
.a8f4	a9 02		lda #$02			lda 	#2  						; insert a space
.a8f6	85 01		sta $01				sta 	1
.a8f8	20 69 a9	jsr $a969			jsr 	EXTILInsert 				; insert in text screen
.a8fb	e6 01		inc $01				inc 	1
.a8fd	20 69 a9	jsr $a969			jsr 	EXTILInsert 				; insert in colour screen
.a900	68		pla				pla 								; get character back.
.a901					_EILPrintLoop:
.a901	20 4c a7	jsr $a74c			jsr 	ExtPrintCharacter
.a904	80 da		bra $a8e0			bra 	_EILLoop
.a906	60		rts				rts
.a907					_EILBackspace:
.a907	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a90a	f0 d4		beq $a8e0			beq 	_EILLoop
.a90c	a9 02		lda #$02			lda 	#2 							; move cursor left
.a90e	20 4c a7	jsr $a74c			jsr 	EXTPrintCharacter
.a911	a9 02		lda #$02			lda 	#2 							; text block
.a913	85 01		sta $01				sta 	1
.a915	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a917	20 54 a9	jsr $a954			jsr 	EXTILDelete
.a91a	e6 01		inc $01				inc 	1 							; colour block
.a91c	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a91f	88		dey				dey
.a920	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a922	20 54 a9	jsr $a954			jsr 	EXTILDelete 				; backspace attribute
.a925	80 b9		bra $a8e0			bra 	_EILLoop 					; and go round.
.a927					_EILExit:
.a927	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a929	85 01		sta $01				sta 	1
.a92b	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a92d					_EILScrapeLine:
.a92d	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a92f	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a932	c8		iny				iny
.a933	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a936	d0 f5		bne $a92d			bne 	_EILScrapeLine
.a938					_EILTrimSpaces:
.a938	88		dey				dey
.a939	f0 08		beq $a943			beq 	_EILEndTrim
.a93b	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a93e	c9 20		cmp #$20			cmp 	#' '
.a940	f0 f6		beq $a938			beq 	_EILTrimSpaces
.a942	c8		iny				iny 								; trim after non space character.
.a943					_EILEndTrim:
.a943	a9 00		lda #$00			lda 	#0 							; trim here.
.a945	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a948	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a94a	20 4c a7	jsr $a74c			jsr 	ExtPrintCharacter
.a94d	68		pla				pla 								; reset I/O page
.a94e	85 01		sta $01				sta 	1
.a950	7a		ply				ply
.a951	fa		plx				plx
.a952	68		pla				pla
.a953	60		rts				rts
.a954					EXTILDelete:
.a954	48		pha				pha 								; save the new character
.a955	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a958					_EXTDLoop:
.a958	c8		iny				iny 								; copy one byte down.
.a959	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a95b	88		dey				dey
.a95c	91 40		sta ($40),y			sta 	(EXTAddress),y
.a95e	c8		iny				iny 								; do till end of line.
.a95f	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a962	90 f4		bcc $a958			bcc 	_EXTDLoop
.a964	88		dey				dey 	 							; write in last slot.
.a965	68		pla				pla
.a966	91 40		sta ($40),y			sta 	(EXTAddress),y
.a968	60		rts				rts
.a969					EXTILInsert:
.a969	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a96c					_EXTILoop:
.a96c	88		dey				dey 								; back one
.a96d	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a970	f0 08		beq $a97a			beq 	_EXTIExit
.a972	88		dey				dey 								; copy one byte up.
.a973	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a975	c8		iny				iny
.a976	91 40		sta ($40),y			sta 	(EXTAddress),y
.a978	80 f2		bra $a96c			bra 	_EXTILoop
.a97a					_EXTIExit:
.a97a	60		rts				rts
.a97b					EXTScrollFill:
.a97b	aa		tax				tax									; save value to fill with
.a97c	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a97e	48		pha				pha
.a97f	a5 37		lda $37				lda 	zTemp0+1
.a981	48		pha				pha
.a982	a5 38		lda $38				lda 	zTemp1
.a984	48		pha				pha
.a985	a5 39		lda $39				lda 	zTemp1+1
.a987	48		pha				pha
.a988	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a98a	85 37		sta $37				sta 	zTemp0+1
.a98c	85 39		sta $39				sta 	zTemp1+1
.a98e	64 36		stz $36				stz 	zTemp0
.a990	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a993	85 38		sta $38				sta 	zTemp1
.a995	a0 00		ldy #$00			ldy 	#0
.a997					_EXSFCopy1:
.a997	b1 38		lda ($38),y			lda 	(zTemp1),y
.a999	91 36		sta ($36),y			sta 	(zTemp0),y
.a99b	c8		iny				iny
.a99c	d0 f9		bne $a997			bne 	_EXSFCopy1
.a99e	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a9a0	e6 39		inc $39				inc 	zTemp1+1
.a9a2	a5 39		lda $39				lda 	zTemp1+1
.a9a4	c9 d3		cmp #$d3			cmp 	#$D3
.a9a6	d0 ef		bne $a997			bne 	_EXSFCopy1
.a9a8	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a9ab	8a		txa				txa
.a9ac					_EXSFFill1:
.a9ac	88		dey				dey
.a9ad	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9af	c0 00		cpy #$00			cpy 	#0
.a9b1	10 f9		bpl $a9ac			bpl 	_EXSFFill1
.a9b3	68		pla				pla
.a9b4	85 39		sta $39				sta 	zTemp1+1
.a9b6	68		pla				pla
.a9b7	85 38		sta $38				sta 	zTemp1
.a9b9	68		pla				pla
.a9ba	85 37		sta $37				sta 	zTemp0+1
.a9bc	68		pla				pla
.a9bd	85 36		sta $36				sta 	zTemp0
.a9bf	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a9c0					EXTInitialise:
.a9c0	64 01		stz $01				stz 	1 							; Access I/O
.a9c2	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9c5	9c 08 d0	stz $d008			stz 	$D008
.a9c8	9c 09 d0	stz $d009			stz 	$D009
.a9cb	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9cd	8d 58 d6	sta $d658			sta 	$D658
.a9d0	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9d2	8d 37 06	sta $0637			sta 	EXTTextColour
.a9d5	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9d7	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9da	a9 3c		lda #$3c			lda 	#60
.a9dc	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9df	64 01		stz $01				stz 	1
.a9e1	60		rts				rts
.a9e2					EXTInputSingleCharacter:
.a9e2	da		phx				phx
.a9e3	5a		phy				phy
.a9e4					_EISCWait:
.a9e4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9e7	c9 00		cmp #$00			cmp 	#0
.a9e9	f0 f9		beq $a9e4			beq 	_EISCWait
.a9eb	7a		ply				ply
.a9ec	fa		plx				plx
.a9ed	60		rts				rts
.a9ee					EXTBreakCheck:
.a9ee	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9f1					EXTReadController:
.a9f1	da		phx				phx
.a9f2	a2 00		ldx #$00			ldx 	#0
.a9f4	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9f6	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9f9	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9fb	f0 04		beq $aa01			beq 	_NoSet1
.a9fd	8a		txa				txa
.a9fe	09 01		ora #$01			ora 	#1
.aa00	aa		tax				tax
.aa01					_NoSet1:
.aa01	a9 05		lda #$05			lda 	#(($2C) >> 3)
.aa03	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa06	29 10		and #$10			and 	#($01 << (($2C) & 7))
.aa08	f0 04		beq $aa0e			beq 	_NoSet1
.aa0a	8a		txa				txa
.aa0b	09 02		ora #$02			ora 	#2
.aa0d	aa		tax				tax
.aa0e					_NoSet1:
.aa0e	a9 06		lda #$06			lda 	#(($32) >> 3)
.aa10	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa13	29 04		and #$04			and 	#($01 << (($32) & 7))
.aa15	f0 04		beq $aa1b			beq 	_NoSet1
.aa17	8a		txa				txa
.aa18	09 04		ora #$04			ora 	#4
.aa1a	aa		tax				tax
.aa1b					_NoSet1:
.aa1b	a9 04		lda #$04			lda 	#(($25) >> 3)
.aa1d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa20	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa22	f0 04		beq $aa28			beq 	_NoSet1
.aa24	8a		txa				txa
.aa25	09 08		ora #$08			ora 	#8
.aa27	aa		tax				tax
.aa28					_NoSet1:
.aa28	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa2a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa2d	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa2f	f0 04		beq $aa35			beq 	_NoSet1
.aa31	8a		txa				txa
.aa32	09 10		ora #$10			ora 	#16
.aa34	aa		tax				tax
.aa35					_NoSet1:
.aa35	8a		txa				txa
.aa36	fa		plx				plx
.aa37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7d5					GRVectorTable:
>b7d5	33 ac					.word	GXInitialise             ; $00 Initialise
>b7d7	4d ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7d9	95 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7db	e5 ab					.word	GXClearBitmap            ; $03 Clear
>b7dd	24 ae					.word	GXSetColourMode          ; $04 Colour
>b7df	ec af					.word	GXFontHandler            ; $05 DrawFont
>b7e1	34 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7e3	a0 b0					.word	GXSelect                 ; $07 SpriteUse
>b7e5	c9 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7e7	50 b2					.word	GXCollide                ; $09 SpriteCollide
>b7e9	97 aa					.word	GRUndefined              ; $0a
>b7eb	97 aa					.word	GRUndefined              ; $0b
>b7ed	97 aa					.word	GRUndefined              ; $0c
>b7ef	97 aa					.word	GRUndefined              ; $0d
>b7f1	97 aa					.word	GRUndefined              ; $0e
>b7f3	97 aa					.word	GRUndefined              ; $0f
>b7f5	97 aa					.word	GRUndefined              ; $10
>b7f7	97 aa					.word	GRUndefined              ; $11
>b7f9	97 aa					.word	GRUndefined              ; $12
>b7fb	97 aa					.word	GRUndefined              ; $13
>b7fd	97 aa					.word	GRUndefined              ; $14
>b7ff	97 aa					.word	GRUndefined              ; $15
>b801	97 aa					.word	GRUndefined              ; $16
>b803	97 aa					.word	GRUndefined              ; $17
>b805	97 aa					.word	GRUndefined              ; $18
>b807	97 aa					.word	GRUndefined              ; $19
>b809	97 aa					.word	GRUndefined              ; $1a
>b80b	97 aa					.word	GRUndefined              ; $1b
>b80d	97 aa					.word	GRUndefined              ; $1c
>b80f	97 aa					.word	GRUndefined              ; $1d
>b811	97 aa					.word	GRUndefined              ; $1e
>b813	97 aa					.word	GRUndefined              ; $1f
>b815	95 aa					.word	GXMove                   ; $20 Move
>b817	f2 ac					.word	GXLine                   ; $21 Line
>b819	6d ae					.word	GXFrameRectangle         ; $22 FrameRect
>b81b	6a ae					.word	GXFillRectangle          ; $23 FillRect
>b81d	9c aa					.word	GXFrameCircle            ; $24 FrameCircle
>b81f	98 aa					.word	GXFillCircle             ; $25 FillCircle
>b821	97 aa					.word	GRUndefined              ; $26
>b823	97 aa					.word	GRUndefined              ; $27
>b825	52 ae					.word	GXPlotPoint              ; $28 Plot
>b827	5f b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa38					GXGraphicDraw:
.aa38	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa3a	b0 06		bcs $aa42			bcs 	_GDCoordinate
.aa3c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa3e	84 37		sty $37				sty 	gxzTemp0+1
.aa40	80 4b		bra $aa8d			bra 	_GDExecuteA 				; and execute
.aa42					_GDCoordinate:
.aa42	48		pha				pha 								; save AXY
.aa43	da		phx				phx
.aa44	5a		phy				phy
.aa45	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa47					_GDCopy1:
.aa47	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa4a	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa4d	ca		dex				dex
.aa4e	10 f7		bpl $aa47			bpl 	_GDCopy1
.aa50	68		pla				pla 								; update Y
.aa51	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa54	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa57	68		pla				pla
.aa58	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa5b	68		pla				pla 								; get A (command+X.1) back
.aa5c	48		pha				pha
.aa5d	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa5f	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa62	68		pla				pla 								; get command back
.aa63	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa65	48		pha				pha 								; push back.
.aa66	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa68	f0 17		beq $aa81			beq 	_GDCopyToWorkArea
.aa6a	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa6d	f0 07		beq $aa76			beq 	_GDCheckY
.aa6f	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa72	c9 40		cmp #$40			cmp 	#64
.aa74	b0 08		bcs $aa7e			bcs 	_GDError1
.aa76					_GDCheckY:
.aa76	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa79	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa7c	90 03		bcc $aa81			bcc 	_GDCopyToWorkArea
.aa7e					_GDError1:
.aa7e	68		pla				pla
.aa7f					_GDError2:
.aa7f	38		sec				sec
.aa80	60		rts				rts
.aa81					_GDCopyToWorkArea:
.aa81	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa83					_GDCopy2:
.aa83	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa86	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa89	ca		dex				dex
.aa8a	10 f7		bpl $aa83			bpl 	_GDCopy2
.aa8c	68		pla				pla 								; get command
.aa8d					_GDExecuteA:
.aa8d	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa8f	b0 ee		bcs $aa7f			bcs 	_GDError2
.aa91	aa		tax				tax
.aa92	7c d5 b7	jmp ($b7d5,x)			jmp 	(GRVectorTable,x)
.aa95					GXMove:
.aa95	18		clc				clc
.aa96	60		rts				rts
.aa97					GRUndefined:
>aa97	db						.byte 	$DB 						; causes a break in the emulator
.aa98					GXFillCircle:
.aa98	a9 ff		lda #$ff			lda 	#255
.aa9a	80 02		bra $aa9e			bra 	GXCircle
.aa9c					GXFrameCircle:
.aa9c	a9 00		lda #$00			lda 	#0
.aa9e					GXCircle:
.aa9e	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aaa1	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aaa4	f0 26		beq $aacc			beq 	_GXCFail
.aaa6	20 f7 b2	jsr $b2f7			jsr 	GXSortXY 					; topleft/bottomright
.aaa9	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap 				; start drawing
.aaac	20 9e ab	jsr $ab9e			jsr 	GXCircleSetup 				; set up for drawing
.aaaf	9c de 06	stz $06de			stz 	gxYChanged
.aab2					_GXCircleDraw:
.aab2	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aab5	cd dc 06	cmp $06dc			cmp 	gYCentre
.aab8	90 0a		bcc $aac4			bcc 	_GXCircleContinue
.aaba	d0 03		bne $aabf			bne 	_GXNoLast
.aabc	20 d1 aa	jsr $aad1			jsr 	GXPlot1
.aabf					_GXNoLast:
.aabf	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap 				; close the bitmap
.aac2	18		clc				clc
.aac3	60		rts				rts
.aac4					_GXCircleContinue:
.aac4	20 ce aa	jsr $aace			jsr 	GXPlot2 					; draw it
.aac7	20 4b ab	jsr $ab4b			jsr 	GXCircleMove 				; adjust the coordinates
.aaca	80 e6		bra $aab2			bra 	_GXCircleDraw
.aacc					_GXCFail:
.aacc	38		sec				sec
.aacd	60		rts				rts
.aace					GXPlot2:
.aace	20 d1 aa	jsr $aad1			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aad1					GXPlot1:
.aad1	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aad4	f0 03		beq $aad9			beq 	_GXPlot1Only
.aad6	20 f5 aa	jsr $aaf5			jsr 	GXPlot0 						; plot and negate
.aad9					_GXPlot1Only:
.aad9	20 f5 aa	jsr $aaf5			jsr 	GXPlot0 						; twice, undoing negation
.aadc	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aadf	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aae2	8d dc 06	sta $06dc			sta 	gYCentre
.aae5	8e db 06	stx $06db			stx 	gXCentre
.aae8	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aaeb	a9 ff		lda #$ff			lda 	#$FF
.aaed	8d de 06	sta $06de			sta 	gxYChanged
.aaf0	60		rts				rts
.aaf1	20 f5 aa	jsr $aaf5			jsr 	GXPlot0 						; do once
.aaf4	60		rts				rts
.aaf5	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aaf8	f0 05		beq $aaff			beq 	_GXPlot0Always
.aafa	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aafd	f0 2d		beq $ab2c			beq 	GXPlot0Exit
.aaff					_GXPlot0Always:
.aaff	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.ab01	ad dc 06	lda $06dc			lda 	gYCentre
.ab04	20 2d ab	jsr $ab2d			jsr 	GXSubCopy
.ab07	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.ab09	ad db 06	lda $06db			lda 	gXCentre
.ab0c	20 2d ab	jsr $ab2d			jsr 	GXSubCopy
.ab0f	48		pha				pha 									; save last offset X
.ab10	20 df b1	jsr $b1df			jsr 	GXPositionCalc 					; calculate position/offset.
.ab13	68		pla				pla
.ab14	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.ab15	85 36		sta $36				sta 	gxzTemp0
.ab17	64 37		stz $37				stz 	gxzTemp0+1
.ab19	26 37		rol $37				rol 	gxzTemp0+1
.ab1b	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab1e	69 80		adc #$80			adc 	#128
.ab20	20 bd ae	jsr $aebd			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab23	38		sec				sec 									; GY = -GY
.ab24	a9 00		lda #$00			lda 	#0
.ab26	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab29	8d dc 06	sta $06dc			sta 	gYCentre
.ab2c					GXPlot0Exit:
.ab2c	60		rts				rts
.ab2d					GXSubCopy:
.ab2d	85 36		sta $36				sta 	gxzTemp0
.ab2f	64 37		stz $37				stz 	gxzTemp0+1
.ab31	29 80		and #$80			and 	#$80
.ab33	f0 02		beq $ab37			beq 	_GXNoSx
.ab35	c6 37		dec $37				dec 	gxzTemp0+1
.ab37					_GXNoSx:
.ab37	38		sec				sec
.ab38	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab3b	e5 36		sbc $36				sbc 	gxzTemp0
.ab3d	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab40	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab43	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab45	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab48	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab4a	60		rts				rts
.ab4b					GXCircleMove:
.ab4b	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab4e	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab50	10 0d		bpl $ab5f			bpl 	_GXEMPositive
.ab52	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab55	ad db 06	lda $06db			lda 	gXCentre
.ab58	20 7e ab	jsr $ab7e			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab5b	a9 06		lda #$06			lda 	#6  						; and add 6
.ab5d	80 15		bra $ab74			bra 	_GXEMAddD
.ab5f					_GXEMPositive:
.ab5f	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab62	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab65	38		sec				sec 								; calculate X-Y
.ab66	ad db 06	lda $06db			lda 	gXCentre
.ab69	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab6c	20 7e ab	jsr $ab7e			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab6f	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab71	ce de 06	dec $06de			dec 	gxYChanged
.ab74					_GXEMAddD:
.ab74	18		clc				clc
.ab75	65 38		adc $38				adc 	gxzTemp1
.ab77	85 38		sta $38				sta 	gxzTemp1
.ab79	90 02		bcc $ab7d			bcc 	_GXEMNoCarry
.ab7b	e6 39		inc $39				inc 	gxzTemp1+1
.ab7d					_GXEMNoCarry:
.ab7d	60		rts				rts
.ab7e					_GXAdd4TimesToD:
.ab7e	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab80	29 80		and #$80			and 	#$80
.ab82	f0 02		beq $ab86			beq 	_GXA4Unsigned
.ab84	a9 ff		lda #$ff			lda 	#$FF
.ab86					_GXA4Unsigned:
.ab86	85 37		sta $37				sta 	gxzTemp0+1
.ab88	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab8a	26 37		rol $37				rol 	gxzTemp0+1
.ab8c	06 36		asl $36				asl 	gxzTemp0
.ab8e	26 37		rol $37				rol 	gxzTemp0+1
.ab90	18		clc				clc 								; add
.ab91	a5 36		lda $36				lda		gxzTemp0
.ab93	65 38		adc $38				adc 	gxzTemp1
.ab95	85 38		sta $38				sta 	gxzTemp1
.ab97	a5 37		lda $37				lda		gxzTemp0+1
.ab99	65 39		adc $39				adc 	gxzTemp1+1
.ab9b	85 39		sta $39				sta 	gxzTemp1+1
.ab9d	60		rts				rts
.ab9e					GXCircleSetup:
.ab9e	38		sec				sec
.ab9f	ad 48 06	lda $0648			lda 	gxY1
.aba2	ed 44 06	sbc $0644			sbc 	gxY0
.aba5	4a		lsr a				lsr 	a
.aba6	8d da 06	sta $06da			sta 	gxRadius
.aba9	a2 00		ldx #$00			ldx 	#0
.abab	20 cd ab	jsr $abcd			jsr 	_GXCalculateCentre
.abae	a2 02		ldx #$02			ldx 	#2
.abb0	20 cd ab	jsr $abcd			jsr 	_GXCalculateCentre
.abb3	9c db 06	stz $06db			stz 	gXCentre
.abb6	ad da 06	lda $06da			lda 	gxRadius
.abb9	8d dc 06	sta $06dc			sta 	gYCentre
.abbc	0a		asl a				asl 	a 							; R x 2
.abbd	85 36		sta $36				sta 	gxzTemp0
.abbf	38		sec				sec
.abc0	a9 03		lda #$03			lda 	#3
.abc2	e5 36		sbc $36				sbc 	gxzTemp0
.abc4	85 38		sta $38				sta 	gxzTemp1
.abc6	a9 00		lda #$00			lda 	#0
.abc8	e9 00		sbc #$00			sbc 	#0
.abca	85 39		sta $39				sta 	gxzTemp1+1
.abcc	60		rts				rts
.abcd					_GXCalculateCentre:
.abcd	38		sec				sec
.abce	bd 46 06	lda $0646,x			lda 	gxX1,x
.abd1	7d 42 06	adc $0642,x			adc 	gXX0,x
.abd4	9d 46 06	sta $0646,x			sta 	gXX1,x
.abd7	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abda	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abdd	4a		lsr a				lsr 	a
.abde	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abe1	7e 46 06	ror $0646,x			ror 	gXX1,x
.abe4	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abe5					GXClearBitmap:
.abe5	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abe8	f0 24		beq $ac0e			beq 	_GXCBFail
.abea	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap 				; start access
.abed	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abef	ad 4e 06	lda $064e			lda 	gxHeight
.abf2	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abf4	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abf6					_GXCalcLastPage:
.abf6	98		tya				tya 								; add to base page
.abf7	18		clc				clc
.abf8	6d 4c 06	adc $064c			adc 	gxBasePage
.abfb	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abfd					_GXClearAll:
.abfd	20 10 ac	jsr $ac10			jsr 	_GXClearBlock 				; clear 8k block
.ac00	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.ac02	a5 0b		lda $0b				lda 	GXEditSlot
.ac04	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.ac07	b0 f4		bcs $abfd			bcs 	_GXClearAll
.ac09	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap	 			; stop access
.ac0c	18		clc				clc
.ac0d	60		rts				rts
.ac0e					_GXCBFail:
.ac0e	38		sec				sec
.ac0f	60		rts				rts
.ac10					_GXClearBlock:
.ac10	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ac12	85 38		sta $38				sta 	0+gxzTemp1
.ac14	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ac16	85 39		sta $39				sta 	1+gxzTemp1
.ac18					_GXCB0:
.ac18	a5 36		lda $36				lda 	gxzTemp0
.ac1a	a0 00		ldy #$00			ldy 	#0
.ac1c					_GXCB1:
.ac1c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1e	c8		iny				iny
.ac1f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac21	c8		iny				iny
.ac22	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac24	c8		iny				iny
.ac25	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac27	c8		iny				iny
.ac28	d0 f2		bne $ac1c			bne 	_GXCB1
.ac2a	e6 39		inc $39				inc 	gxzTemp1+1
.ac2c	a5 39		lda $39				lda 	gxzTemp1+1
.ac2e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac30	d0 e6		bne $ac18			bne 	_GXCB0
.ac32	60		rts				rts
.ac33					GXInitialise:
.ac33	64 01		stz $01				stz 	1
.ac35	a9 01		lda #$01			lda 	#1
.ac37	8d 00 d0	sta $d000			sta 	$D000
.ac3a	18		clc				clc
.ac3b	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac3e	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac41	a2 0f		ldx #$0f			ldx 	#15
.ac43					_GXIClear:
.ac43	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac46	ca		dex				dex
.ac47	10 fa		bpl $ac43			bpl 	_GXIClear
.ac49	20 e4 ac	jsr $ace4			jsr 	GXClearSpriteStore
.ac4c	60		rts				rts
.ac4d					GXControlBitmap:
.ac4d	64 01		stz $01				stz 	1
.ac4f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac51	29 01		and #$01			and 	#1 							; set bitmap flag
.ac53	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac56	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac57	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac5a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac5c	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac5e	90 02		bcc $ac62			bcc 	_CBNotOn
.ac60	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac62					_CBNotOn:
.ac62	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac65	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac67	29 07		and #$07			and 	#7
.ac69	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac6c	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac6e	d0 02		bne $ac72			bne 	_CBNotDefault
.ac70	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac72					_CBNotDefault:
.ac72	8d 4c 06	sta $064c			sta 	gxBasePage
.ac75	20 d6 ac	jsr $acd6			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac78	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac7a	8d 03 d1	sta $d103			sta 	$D103
.ac7d	a5 36		lda $36				lda 	gxzTemp0
.ac7f	8d 02 d1	sta $d102			sta 	$D102
.ac82	9c 01 d1	stz $d101			stz 	$D101
.ac85	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac87	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac8a	29 01		and #$01			and 	#1
.ac8c	f0 02		beq $ac90			beq 	_CBHaveHeight
.ac8e	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac90					_CBHaveHeight
.ac90	8e 4e 06	stx $064e			stx 	gxHeight
.ac93	18		clc				clc
.ac94	60		rts				rts
.ac95					GXControlSprite:
.ac95	64 01		stz $01				stz 	1
.ac97	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac99	29 01		and #$01			and 	#1 							; set sprites flag
.ac9b	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac9e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac9f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aca2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aca4	29 df		and #$df			and 	#$DF 						; clear sprite bit
.aca6	90 02		bcc $acaa			bcc 	_CSNotOn
.aca8	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.acaa					_CSNotOn:
.acaa	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.acad	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.acaf	d0 02		bne $acb3			bne 	_CSNotDefault
.acb1	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.acb3					_CSNotDefault:
.acb3	8d 4d 06	sta $064d			sta 	gxSpritePage
.acb6	20 d6 ac	jsr $acd6			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.acb9	a5 36		lda $36				lda 	zTemp0
.acbb	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.acbe	a5 37		lda $37				lda 	zTemp0+1
.acc0	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.acc3	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.acc5					_CSClear:
.acc5	9e 00 d9	stz $d900,x			stz 	$D900,x
.acc8	9e 00 da	stz $da00,x			stz 	$DA00,x
.accb	ca		dex				dex
.accc	d0 f7		bne $acc5			bne 	_CSClear
.acce	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acd1	20 e4 ac	jsr $ace4			jsr 	GXClearSpriteStore
.acd4	18		clc				clc
.acd5	60		rts				rts
.acd6					GXCalculateBaseAddress:
.acd6	85 36		sta $36				sta 	gxzTemp0
.acd8	64 37		stz $37				stz 	gxzTemp0+1
.acda	a9 05		lda #$05			lda 	#5
.acdc					_GXShift:
.acdc	06 36		asl $36				asl 	gxzTemp0
.acde	26 37		rol $37				rol 	gxzTemp0+1
.ace0	3a		dec a				dec		a
.ace1	d0 f9		bne $acdc			bne 	_GXShift
.ace3	60		rts				rts
.ace4					GXClearSpriteStore:
.ace4	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ace6					_GXCSSLoop:
.ace6	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.ace9	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.aceb	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.acee	ca		dex				dex
.acef	10 f5		bpl $ace6			bpl 	_GXCSSLoop
.acf1	60		rts				rts
.acf2					GXLine:
.acf2	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acf5	f0 28		beq $ad1f			beq 	_GXLFail
.acf7	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap
.acfa	20 15 b3	jsr $b315			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acfd	20 c5 ad	jsr $adc5			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ad00	20 df b1	jsr $b1df			jsr 	GXPositionCalc 				; calculate position/offset.
.ad03					_GXDrawLoop:
.ad03	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ad06	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ad08	2d 52 06	and $0652			and 	gxANDValue
.ad0b	4d 51 06	eor $0651			eor 	gxEORValue
.ad0e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad10	20 21 ad	jsr $ad21			jsr 	GXLineIsComplete 			; is the line complete ?
.ad13	f0 05		beq $ad1a			beq 	_GXLExit
.ad15	20 3c ad	jsr $ad3c			jsr 	GXLineAdvance 				; code as per advance method
.ad18	80 e9		bra $ad03			bra 	_GXDrawLoop
.ad1a					_GXLExit:
.ad1a	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap
.ad1d	18		clc				clc
.ad1e	60		rts				rts
.ad1f					_GXLFail:
.ad1f	38		sec				sec
.ad20	60		rts				rts
.ad21					GXLineIsComplete:
.ad21	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad24	d0 0f		bne $ad35			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad26	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad29	4d 46 06	eor $0646			eor 	GXX1
.ad2c	d0 06		bne $ad34			bne 	_GXLICExit
.ad2e	ad 43 06	lda $0643			lda 	GXX0+1
.ad31	4d 47 06	eor $0647			eor 	GXX1+1
.ad34					_GXLICExit:
.ad34	60		rts				rts
.ad35					_GXLICCompareY:
.ad35	ad 48 06	lda $0648			lda 	GXY1
.ad38	4d 44 06	eor $0644			eor 	GXY0
.ad3b	60		rts				rts
.ad3c					GXLineAdvance:
.ad3c	18		clc				clc 								; add adjust to position
.ad3d	ad e3 06	lda $06e3			lda 	GXPosition
.ad40	6d e4 06	adc $06e4			adc 	GXAdjust
.ad43	8d e3 06	sta $06e3			sta 	GXPosition
.ad46	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad49	b0 05		bcs $ad50			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad4b	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad4e	90 0a		bcc $ad5a			bcc 	_GXLANoExtra
.ad50					_GXLAOverflow:
.ad50	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad53	38		sec				sec 								; subtract total and write back
.ad54	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad57	8d e3 06	sta $06e3			sta 	GXPosition
.ad5a					_GXLANoExtra:
.ad5a	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad5d	f0 0d		beq $ad6c			beq 	_GXDXLarger
.ad5f	20 be ad	jsr $adbe			jsr 	GXIncrementY
.ad62	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad65	f0 10		beq $ad77			beq 	_GXLAExit
.ad67	20 78 ad	jsr $ad78			jsr 	GXAdjustX
.ad6a	80 0b		bra $ad77			bra 	_GXLAExit
.ad6c					_GXDXLarger:
.ad6c	20 78 ad	jsr $ad78			jsr 	GXAdjustX
.ad6f	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad72	f0 03		beq $ad77			beq 	_GXLAExit
.ad74	20 be ad	jsr $adbe			jsr 	GXIncrementY
.ad77					_GXLAExit:
.ad77	60		rts				rts
.ad78					GXAdjustX:
.ad78	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad7b	10 25		bpl $ada2			bpl 	_GXAXRight
.ad7d	ad 42 06	lda $0642			lda 	GXX0
.ad80	d0 03		bne $ad85			bne 	_GXAXNoBorrow
.ad82	ce 43 06	dec $0643			dec 	GXX0+1
.ad85					_GXAXNoBorrow:
.ad85	ce 42 06	dec $0642			dec 	GXX0
.ad88	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad8b	ad 54 06	lda $0654			lda 	gsOffset
.ad8e	c9 ff		cmp #$ff			cmp 	#$FF
.ad90	d0 0f		bne $ada1			bne 	_GXAYExit 					; underflow
.ad92	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad94	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad96	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad98	b0 07		bcs $ada1			bcs 	_GXAYExit
.ad9a	18		clc				clc
.ad9b	69 20		adc #$20			adc 	#$20 						; fix up
.ad9d	85 3d		sta $3d				sta 	gxzScreen+1
.ad9f	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ada1					_GXAYExit:
.ada1	60		rts				rts
.ada2					_GXAXRight:
.ada2	ee 42 06	inc $0642			inc 	GXX0
.ada5	d0 03		bne $adaa			bne 	_GXAXNoCarry
.ada7	ee 43 06	inc $0643			inc 	GXX0+1
.adaa					_GXAXNoCarry:
.adaa	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.adad	d0 0e		bne $adbd			bne 	_GXAXExit 					; if not overflowed, exit.
.adaf	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.adb1	a5 3d		lda $3d				lda 	gxzScreen+1
.adb3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.adb5	90 06		bcc $adbd			bcc 	_GXAXExit
.adb7	e9 20		sbc #$20			sbc 	#$20 						; fix up
.adb9	85 3d		sta $3d				sta 	gxzScreen+1
.adbb	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.adbd					_GXAXExit:
.adbd	60		rts				rts
.adbe					GXIncrementY:
.adbe	ee 44 06	inc $0644			inc 	GXY0
.adc1	20 35 b2	jsr $b235			jsr 	GXMovePositionDown
.adc4	60		rts				rts
.adc5					GXLineSetup:
.adc5	ad 48 06	lda $0648			lda 	GXY1
.adc8	38		sec				sec
.adc9	ed 44 06	sbc $0644			sbc 	GXY0
.adcc	4a		lsr a				lsr 	a
.adcd	8d e0 06	sta $06e0			sta 	GXDiffY
.add0	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.add3	38		sec				sec
.add4	ad 46 06	lda $0646			lda 	GXX1
.add7	ed 42 06	sbc $0642			sbc 	GXX0
.adda	8d df 06	sta $06df			sta 	GXDiffX
.addd	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.ade0	ed 43 06	sbc $0643			sbc 	GXX0+1
.ade3	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ade4	6e df 06	ror $06df			ror 	GXDiffX
.ade7	0a		asl a				asl 	a
.ade8	10 0c		bpl $adf6			bpl 	_GDXNotNegative
.adea	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.adec	38		sec				sec
.aded	ed df 06	sbc $06df			sbc 	GXDiffX
.adf0	8d df 06	sta $06df			sta 	GXDiffX
.adf3	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.adf6					_GDXNotNegative:
.adf6	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.adf9	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adfc	8d e4 06	sta $06e4			sta 	GXAdjust
.adff	ad df 06	lda $06df			lda 	GXDiffX
.ae02	8d e5 06	sta $06e5			sta 	GXTotal
.ae05	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ae08	cd df 06	cmp $06df			cmp 	GXDiffX
.ae0b	90 0f		bcc $ae1c			bcc 	_GDXNotLarger
.ae0d	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ae10	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.ae13	8d e4 06	sta $06e4			sta 	GXAdjust
.ae16	ad e0 06	lda $06e0			lda 	GXDiffY
.ae19	8d e5 06	sta $06e5			sta 	GXTotal
.ae1c					_GDXNotLarger:
.ae1c	ad e5 06	lda $06e5			lda 	GXTotal
.ae1f	4a		lsr a				lsr 	a
.ae20	8d e3 06	sta $06e3			sta 	GXPosition
.ae23	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae24					GXSetColourMode:
.ae24	a6 36		ldx $36				ldx 	gxzTemp0
.ae26	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae29	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae2b	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae2e	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae30	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae33	ae 50 06	ldx $0650			ldx 	gxColour
.ae36	8e 51 06	stx $0651			stx 	gxEORValue
.ae39	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae3b	90 03		bcc $ae40			bcc 	_GXSDCNotAndColour
.ae3d	8e 52 06	stx $0652			stx 	gxANDValue
.ae40					_GXSDCNotAndColour:
.ae40	d0 03		bne $ae45			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae42	9c 51 06	stz $0651			stz 	gxEORValue
.ae45					_GXSDCNotAnd:
.ae45	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae46	90 08		bcc $ae50			bcc 	_GXSDCNoFlip
.ae48	ad 52 06	lda $0652			lda	 	gxANDValue
.ae4b	49 ff		eor #$ff			eor 	#$FF
.ae4d	8d 52 06	sta $0652			sta 	gxANDValue
.ae50					_GXSDCNoFlip:
.ae50	18		clc				clc
.ae51	60		rts				rts
.ae52					GXPlotPoint:
.ae52	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap 				; start drawing
.ae55	20 df b1	jsr $b1df			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae58	ac 54 06	ldy $0654			ldy 	gsOffset
.ae5b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae5d	2d 52 06	and $0652			and 	gxANDValue
.ae60	4d 51 06	eor $0651			eor 	gxEORValue
.ae63	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae65	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae68	18		clc				clc
.ae69	60		rts				rts
.ae6a					GXFillRectangle:
.ae6a	38		sec				sec
.ae6b	80 01		bra $ae6e			bra 	GXRectangle
.ae6d					GXFrameRectangle:
.ae6d	18		clc				clc
.ae6e					GXRectangle:
.ae6e	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae71	f0 35		beq $aea8			beq 	_GXRFail
.ae73	08		php				php 								; save Fill flag (CS)
.ae74	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap 				; start drawing
.ae77	20 f7 b2	jsr $b2f7			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae7a	20 df b1	jsr $b1df			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae7d	38		sec				sec 								; sec = Draw line
.ae7e	20 aa ae	jsr $aeaa			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae81	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae84	cd 48 06	cmp $0648			cmp 	gxY1
.ae87	f0 19		beq $aea2			beq 	_GXRectangleExit
.ae89					_GXRectLoop:
.ae89	20 35 b2	jsr $b235			jsr 	GXMovePositionDown 			; down one.
.ae8c	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae8f	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae92	cd 48 06	cmp $0648			cmp 	gXY1
.ae95	f0 07		beq $ae9e			beq 	_GXLastLine
.ae97	28		plp				plp 								; get flag back
.ae98	08		php				php
.ae99	20 aa ae	jsr $aeaa			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae9c	80 eb		bra $ae89			bra 	_GXRectLoop
.ae9e					_GXLastLine:
.ae9e	38		sec				sec
.ae9f	20 aa ae	jsr $aeaa			jsr 	GXDrawLineX1X0
.aea2					_GXRectangleExit:
.aea2	68		pla				pla 								; throw fill flag.
.aea3	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap 				; stop drawing and exit
.aea6	18		clc				clc
.aea7	60		rts				rts
.aea8					_GXRFail:
.aea8	38		sec				sec
.aea9	60		rts				rts
.aeaa					GXDrawLineX1X0:
.aeaa	08		php				php 								; save solid/either-end
.aeab	38		sec				sec
.aeac	ad 46 06	lda $0646			lda		gXX1
.aeaf	ed 42 06	sbc $0642			sbc 	gXX0
.aeb2	85 36		sta $36				sta 	gxzTemp0
.aeb4	ad 47 06	lda $0647			lda 	gXX1+1
.aeb7	ed 43 06	sbc $0643			sbc 	gXX0+1
.aeba	85 37		sta $37				sta 	gxzTemp0+1
.aebc	28		plp				plp
.aebd					GXDrawLineTemp0:
.aebd	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aebf	48		pha				pha
.aec0	a5 3d		lda $3d				lda 	gxzScreen+1
.aec2	48		pha				pha
.aec3	ad 54 06	lda $0654			lda 	gsOffset
.aec6	48		pha				pha
.aec7	a5 0b		lda $0b				lda 	GXEditSlot
.aec9	48		pha				pha
.aeca	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aecd	90 1e		bcc $aeed			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aecf					_GXDLTLine:
.aecf	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aed1	2d 52 06	and $0652			and 	gxANDValue
.aed4	4d 51 06	eor $0651			eor 	gxEORValue
.aed7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed9	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aedb	d0 04		bne $aee1			bne 	_GXDLTNoBorrow
.aedd	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aedf	30 2e		bmi $af0f			bmi 	_GXDLTExit
.aee1					_GXDLTNoBorrow:
.aee1	c6 36		dec $36				dec 	gxzTemp0
.aee3	c8		iny				iny 								; next slot.
.aee4	d0 e9		bne $aecf			bne 	_GXDLTLine
.aee6	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aee8	20 1d af	jsr $af1d			jsr 	GXDLTCheckWrap				; check for new page.
.aeeb	80 e2		bra $aecf			bra 	_GXDLTLine
.aeed					_GXDLTEndPoints:
.aeed	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeef	2d 52 06	and $0652			and 	gxANDValue
.aef2	4d 51 06	eor $0651			eor 	gxEORValue
.aef5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef7	98		tya				tya 								; advance to right side
.aef8	18		clc				clc
.aef9	65 36		adc $36				adc 	gxzTemp0
.aefb	a8		tay				tay
.aefc	a5 3d		lda $3d				lda 	gxzScreen+1
.aefe	65 37		adc $37				adc 	gxzTemp0+1
.af00	85 3d		sta $3d				sta 	gxzScreen+1
.af02	20 1d af	jsr $af1d			jsr 	GXDLTCheckWrap 			; fix up.
.af05	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.af07	2d 52 06	and $0652			and 	gxANDValue
.af0a	4d 51 06	eor $0651			eor 	gxEORValue
.af0d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af0f					_GXDLTExit:
.af0f	68		pla				pla
.af10	85 0b		sta $0b				sta 	GXEditSlot
.af12	68		pla				pla
.af13	8d 54 06	sta $0654			sta 	gsOffset
.af16	68		pla				pla
.af17	85 3d		sta $3d				sta 	gxzScreen+1
.af19	68		pla				pla
.af1a	85 3c		sta $3c				sta 	gxzScreen
.af1c	60		rts				rts
.af1d					GXDLTCheckWrap:
.af1d	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af1f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af21	90 06		bcc $af29			bcc 	_GXDLTCWExit
.af23	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af25	85 3d		sta $3d				sta 	gxzScreen+1
.af27	e6 0b		inc $0b				inc 	GXEditSlot
.af29					_GXDLTCWExit:
.af29	60		rts				rts
.af2a					GXDrawGraphicElement:
.af2a	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af2d	3a		dec a				dec 	a
.af2e	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af31	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af34	f0 67		beq $af9d			beq 	_GXSLFail
.af36	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af39	48		pha				pha
.af3a	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af3d	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af40	20 cf b1	jsr $b1cf			jsr 	gxOpenBitmap 				; open the bitmap.
.af43	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af46	4a		lsr a				lsr 	a
.af47	4a		lsr a				lsr 	a
.af48	4a		lsr a				lsr 	a
.af49	29 07		and #$07			and		#7
.af4b	1a		inc a				inc 	a
.af4c	8d eb 06	sta $06eb			sta 	gxScale
.af4f	64 38		stz $38				stz 	gxzTemp1					; start first line
.af51					_GXGELoop:
.af51	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af53	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af56	10 06		bpl $af5e			bpl		_GXNoVFlip
.af58	ad e8 06	lda $06e8			lda 	gxMask
.af5b	38		sec				sec
.af5c	e5 38		sbc $38				sbc 	gxzTemp1
.af5e					_GXNoVFlip:
.af5e	aa		tax				tax 								; get the Xth line.
.af5f	20 9f af	jsr $af9f			jsr 	_GXCallAcquire 				; get that data.
.af62	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af65	85 39		sta $39				sta 	gxzTemp1+1
.af67					_GXGELoop2:
.af67	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af6a	cd 4e 06	cmp $064e			cmp 	gxHeight
.af6d	b0 10		bcs $af7f			bcs 	_GXDGEExit
.af6f	20 a2 af	jsr $afa2			jsr 	GXRenderOneLine 			; render line
.af72	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af74	d0 f1		bne $af67			bne 	_GXGELoop2
.af76	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af78	a5 38		lda $38				lda 	gxzTemp1
.af7a	cd e7 06	cmp $06e7			cmp 	gxSize
.af7d	d0 d2		bne $af51			bne 	_GXGELoop
.af7f					_GXDGEExit:
.af7f	68		pla				pla 								; restore Y for next time
.af80	8d 44 06	sta $0644			sta 	gxY0
.af83	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af86					_GXShiftLeft:
.af86	18		clc				clc
.af87	ad e7 06	lda $06e7			lda 	gxSize
.af8a	6d 42 06	adc $0642			adc 	gxX0
.af8d	8d 42 06	sta $0642			sta 	gxX0
.af90	90 03		bcc $af95			bcc 	_GXSLNoCarry
.af92	ee 43 06	inc $0643			inc 	gxX0+1
.af95					_GXSLNoCarry:
.af95	ca		dex				dex
.af96	d0 ee		bne $af86			bne 	_GXShiftLeft
.af98	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap
.af9b	18		clc				clc
.af9c	60		rts				rts
.af9d					_GXSLFail:
.af9d	38		sec				sec
.af9e	60		rts				rts
.af9f					_GXCallAcquire:
.af9f	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.afa2					GXRenderOneLine:
.afa2	20 df b1	jsr $b1df			jsr 	GXPositionCalc 				; calculate position/offset.
.afa5	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.afa8	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.afaa					_GXROLLoop1:
.afaa	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.afad	85 3b		sta $3b				sta 	gxzTemp2+1
.afaf					_GXROLLoop2:
.afaf	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.afb1	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.afb4	50 06		bvc $afbc			bvc 	_GXNoHFlip
.afb6	ad e8 06	lda $06e8			lda 	gxMask
.afb9	38		sec				sec
.afba	e5 3a		sbc $3a				sbc 	gxzTemp2
.afbc					_GXNoHFlip:
.afbc	aa		tax				tax 								; read from the pixel buffer
.afbd	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afc0	d0 07		bne $afc9			bne 	_GXDraw 					; draw if non zero
.afc2	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afc5	29 04		and #$04			and 	#4
.afc7	f0 0a		beq $afd3			beq 	_GXZeroPixel
.afc9					_GXDraw:
.afc9	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afcb	2d 52 06	and $0652			and 	gxANDValue
.afce	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afd1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afd3					_GXZeroPixel:
.afd3	c8		iny				iny 								; advance pointer
.afd4	d0 05		bne $afdb			bne 	_GXNoShift
.afd6	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afd8	20 1d af	jsr $af1d			jsr 	GXDLTCheckWrap				; check for new page.
.afdb					_GXNoShift:
.afdb	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afdd	d0 d0		bne $afaf			bne 	_GXROLLoop2
.afdf	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afe1	a5 3a		lda $3a				lda 	gxzTemp2
.afe3	cd e7 06	cmp $06e7			cmp 	gxSize
.afe6	d0 c2		bne $afaa			bne 	_GXROLLoop1
.afe8	ee 44 06	inc $0644			inc 	gxY0
.afeb	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afec					GXFontHandler:
.afec	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afee	4d 4f 06	eor $064f			eor 	gxMode
.aff1	8d ec 06	sta $06ec			sta 	gxUseMode
.aff4	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.aff6	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.aff8	26 37		rol $37				rol	 	gxzTemp0+1
.affa	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.affc	26 37		rol $37				rol	 	gxzTemp0+1
.affe	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.b000	26 37		rol $37				rol	 	gxzTemp0+1
.b002	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.b004	09 c0		ora #$c0			ora 	#$C0
.b006	85 37		sta $37				sta 	gxzTemp0+1
.b008	a9 08		lda #$08			lda 	#8 							; size 8x8
.b00a	a2 12		ldx #$12			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.b00c	a0 b0		ldy #$b0			ldy 	#GXGetGraphicDataFont >> 8
.b00e	20 2a af	jsr $af2a			jsr 	GXDrawGraphicElement
.b011	60		rts				rts
.b012					GXGetGraphicDataFont:
.b012	8a		txa				txa 								; X->Y
.b013	a8		tay				tay
.b014	a6 01		ldx $01				ldx 	1 							; preserve old value
.b016	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b018	85 01		sta $01				sta 	1
.b01a	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b01c	86 01		stx $01				stx 	1 							; put old value back.
.b01e	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b020					_GXExpand:
.b020	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b023	0a		asl a				asl 	a 							; shift bit 7 into C
.b024	90 08		bcc $b02e			bcc 	_GXNoPixel
.b026	48		pha				pha 								; if set, set pixel buffer to current colour.
.b027	ad 50 06	lda $0650			lda 	gxColour
.b02a	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b02d	68		pla				pla
.b02e					_GXNoPixel:
.b02e	e8		inx				inx 								; do the whole byte.
.b02f	e0 08		cpx #$08			cpx 	#8
.b031	d0 ed		bne $b020			bne 	_GXExpand
.b033	60		rts				rts
.b034					GXSpriteHandler:
.b034	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b036	4d 4f 06	eor $064f			eor 	gxMode
.b039	8d ec 06	sta $06ec			sta 	gxUseMode
.b03c	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b03e	da		phx				phx
.b03f	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap 				; can access sprite information
.b042	68		pla				pla
.b043	20 b0 b2	jsr $b2b0			jsr 	GXFindSprite 				; get the sprite address
.b046	08		php				php
.b047	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap
.b04a	28		plp				plp
.b04b	b0 0a		bcs $b057			bcs		_GXSHExit 					; exit if find failed.
.b04d	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b050	a2 58		ldx #$58			ldx 	#GXSpriteAcquire & $FF
.b052	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b054	20 2a af	jsr $af2a			jsr 	GXDrawGraphicElement
.b057					_GXSHExit:
.b057	60		rts				rts
.b058					GXSpriteAcquire:
.b058	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b05b	85 0b		sta $0b				sta 	GXEditSlot
.b05d	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b05f	a9 00		lda #$00			lda 	#0
.b061	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b064					_GXTimesRowNumber:
.b064	18		clc				clc
.b065	65 36		adc $36				adc 	zTemp0
.b067	ca		dex				dex
.b068	10 fa		bpl $b064			bpl 	_GXTimesRowNumber
.b06a	64 37		stz $37				stz 	gxzTemp0+1
.b06c	0a		asl a				asl 	a 							; row x 2,4,6,8
.b06d	26 37		rol $37				rol 	gxzTemp0+1
.b06f	0a		asl a				asl 	a 							; row x 4,8,12,16
.b070	26 37		rol $37				rol 	gxzTemp0+1
.b072	0a		asl a				asl 	a 							; row x 8,16,24,32
.b073	26 37		rol $37				rol 	gxzTemp0+1
.b075	85 36		sta $36				sta 	gxzTemp0
.b077	18		clc				clc 								; add base address.
.b078	a5 36		lda $36				lda 	gxzTemp0
.b07a	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b07d	85 36		sta $36				sta 	gxzTemp0
.b07f	a5 37		lda $37				lda 	gxzTemp0+1
.b081	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b084					_GXSAFindPage:
.b084	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b086	90 06		bcc $b08e			bcc 	_GXSAFoundPage
.b088	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b08a	e6 0b		inc $0b				inc 	GXEditSlot
.b08c	80 f6		bra $b084			bra 	_GXSAFindPage
.b08e					_GXSAFoundPage:
.b08e	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b090	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b092	a0 00		ldy #$00			ldy 	#0
.b094					_GXSACopyLoop:
.b094	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b096	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b099	c8		iny				iny
.b09a	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b09d	d0 f5		bne $b094			bne 	_GXSACopyLoop
.b09f	60		rts				rts
.b0a0					GXSelect:
.b0a0	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0a3	f0 22		beq $b0c7			beq 	_GXSFail
.b0a5	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b0a7	c9 40		cmp #$40			cmp 	#64
.b0a9	b0 1c		bcs $b0c7			bcs 	_GXSFail
.b0ab	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b0ae	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b0b0	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b0b2	06 36		asl $36				asl 	gxzTemp0
.b0b4	06 36		asl $36				asl 	gxzTemp0
.b0b6	06 36		asl $36				asl 	gxzTemp0
.b0b8	2a		rol a				rol 	a
.b0b9	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b0bb	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0be	85 37		sta $37				sta 	gxzTemp0+1
.b0c0	a5 36		lda $36				lda 	gxzTemp0
.b0c2	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0c5	18		clc				clc
.b0c6	60		rts				rts
.b0c7					_GXSFail:
.b0c7	38		sec				sec
.b0c8	60		rts				rts
.b0c9					GXSelectImage:
.b0c9	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0cc	f0 74		beq $b142			beq 	_GXSIFail
.b0ce	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0d1	f0 6f		beq $b142			beq 	_GXSIFail 					; (checking the MSB)
.b0d3	64 01		stz $01				stz 	1
.b0d5	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0d7	d0 6b		bne $b144			bne 	_GXSIHide
.b0d9	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0db	48		pha				pha
.b0dc	20 cf b1	jsr $b1cf			jsr 	GXOpenBitmap
.b0df	68		pla				pla
.b0e0	20 b0 b2	jsr $b2b0			jsr 	GXFindSprite
.b0e3	b0 5a		bcs $b13f			bcs 	_GXSICloseFail 				; no image
.b0e5	a0 01		ldy #$01			ldy 	#1
.b0e7	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0ea	85 36		sta $36				sta 	gxzTemp0
.b0ec	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0ef	85 37		sta $37				sta 	gxzTemp0+1
.b0f1	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0f4	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0f6	18		clc				clc
.b0f7	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0fa	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0fd	c8		iny				iny
.b0fe	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b100	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b103	69 00		adc #$00			adc 	#0
.b105	c8		iny				iny
.b106	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b108	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b10b	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b10d	2a		rol a				rol 	a 							; x 2
.b10e	0a		asl a				asl 	a 							; x 4
.b10f	0a		asl a				asl 	a 							; x 8
.b110	0a		asl a				asl 	a 							; x 16
.b111	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b114	0a		asl a				asl 	a 							; 1 shift
.b115	09 01		ora #$01			ora 	#1 							; enable sprite.
.b117	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b119	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap
.b11c	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b11f	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b122	29 3f		and #$3f			and 	#$3F
.b124	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b127	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b12a	6a		ror a				ror 	a 							; shift into bits 6/7
.b12b	6a		ror a				ror 	a
.b12c	6a		ror a				ror 	a
.b12d	29 c0		and #$c0			and 	#$C0
.b12f	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b132	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b135	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b138	29 7f		and #$7f			and 	#$7F
.b13a	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b13d	18		clc				clc
.b13e	60		rts				rts
.b13f					_GXSICloseFail:
.b13f	20 d7 b1	jsr $b1d7			jsr 	GXCloseBitmap
.b142					_GXSIFail:
.b142	38		sec				sec
.b143	60		rts				rts
.b144					_GXSIHide:
.b144	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b147	85 36		sta $36				sta 	gxzTemp0
.b149	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b14c	85 37		sta $37				sta 	gxzTemp0+1
.b14e	a9 00		lda #$00			lda 	#0
.b150	92 36		sta ($36)			sta 	(gxzTemp0)
.b152	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b155	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b158	09 80		ora #$80			ora 	#$80
.b15a	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b15d	18		clc				clc
.b15e	60		rts				rts
.b15f					GXMoveSprite:
.b15f	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b162	f0 65		beq $b1c9			beq 	_GXSIFail
.b164	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b167	f0 60		beq $b1c9			beq 	_GXSIFail
.b169	85 37		sta $37				sta 	gxzTemp0+1
.b16b	a0 04		ldy #$04			ldy 	#4
.b16d	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b170	85 36		sta $36				sta 	gxzTemp0
.b172	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b175	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b178	2a		rol a				rol 	a	 						; into bits 0,1.
.b179	2a		rol a				rol 	a
.b17a	2a		rol a				rol 	a
.b17b	29 03		and #$03			and 	#3
.b17d	aa		tax				tax
.b17e	bd cb b1	lda $b1cb,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b181	48		pha				pha
.b182	18		clc				clc
.b183	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b186	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b188	c8		iny				iny
.b189	ad 43 06	lda $0643			lda 	gxX0+1
.b18c	69 00		adc #$00			adc 	#0
.b18e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b190	c8		iny				iny
.b191	68		pla				pla
.b192	18		clc				clc
.b193	6d 44 06	adc $0644			adc 	gxY0
.b196	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b198	a9 00		lda #$00			lda 	#0
.b19a	69 00		adc #$00			adc 	#0
.b19c	c8		iny				iny
.b19d	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b19f	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b1a2	6e 42 06	ror $0642			ror 	gxX0
.b1a5	4e 42 06	lsr $0642			lsr 	gxX0
.b1a8	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b1ab	4e 44 06	lsr $0644			lsr 	gxY0
.b1ae	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b1b1	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b1b4	29 80		and #$80			and 	#$80
.b1b6	0d 42 06	ora $0642			ora 	gxX0
.b1b9	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b1bc	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1bf	29 c0		and #$c0			and 	#$C0
.b1c1	0d 44 06	ora $0644			ora 	gxY0
.b1c4	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1c7	18		clc				clc
.b1c8	60		rts				rts
.b1c9					_GXSIFail:
.b1c9	38		sec				sec
.b1ca	60		rts				rts
.b1cb					_GXMSOffset:
>b1cb	1c						.byte 	32-8/2
>b1cc	18						.byte 	32-16/2
>b1cd	14						.byte 	32-24/2
>b1ce	10						.byte 	32-32/2
.b1cf					GXOpenBitmap:
.b1cf	78		sei				sei 								; no interrupts here
.b1d0	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1d2	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1d5	58		cli				cli
.b1d6	60		rts				rts
.b1d7					GXCloseBitmap:
.b1d7	78		sei				sei
.b1d8	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1db	85 0b		sta $0b				sta 	GXEditSlot
.b1dd	58		cli				cli
.b1de	60		rts				rts
.b1df					GXPositionCalc:
.b1df	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1e1	48		pha				pha
.b1e2	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1e5	85 3c		sta $3c				sta 	gxzScreen
.b1e7	64 3d		stz $3d				stz 	gxzScreen+1
.b1e9	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1eb	26 3d		rol $3d				rol 	gxzScreen+1
.b1ed	06 3c		asl $3c				asl 	gxzScreen
.b1ef	26 3d		rol $3d				rol 	gxzScreen+1
.b1f1	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1f2	65 3c		adc $3c				adc 	gxzScreen
.b1f4	85 3c		sta $3c				sta 	gxzScreen
.b1f6	90 02		bcc $b1fa			bcc 	_GXPCNoCarry
.b1f8	e6 3d		inc $3d				inc 	gxzScreen+1
.b1fa					_GXPCNoCarry:
.b1fa	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1fc	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1fe	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b200	85 36		sta $36				sta 	gxzTemp0
.b202	64 3d		stz $3d				stz 	gxzScreen+1
.b204	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b206					_GXPCMultiply32:
.b206	06 3c		asl $3c				asl 	gxzScreen
.b208	26 3d		rol $3d				rol 	gxzScreen+1
.b20a	3a		dec a				dec 	a
.b20b	d0 f9		bne $b206			bne 	_GXPCMultiply32
.b20d	18		clc				clc
.b20e	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b211	65 3c		adc $3c				adc 	gxzScreen
.b213	8d 54 06	sta $0654			sta 	gsOffset
.b216	ad 43 06	lda $0643			lda 	GXX0+1
.b219	65 3d		adc $3d				adc 	gxzScreen+1
.b21b	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b21d	90 04		bcc $b223			bcc 	_GXPCNoOverflow
.b21f	29 1f		and #$1f			and 	#$1F 						; fix it up
.b221	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b223					_GXPCNoOverflow:
.b223	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b225	85 3d		sta $3d				sta 	gxzScreen+1
.b227	64 3c		stz $3c				stz 	gxzScreen
.b229	18		clc				clc
.b22a	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b22c	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b22f	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b231	68		pla				pla
.b232	85 36		sta $36				sta 	gxzTemp0
.b234	60		rts				rts
.b235					GXMovePositionDown:
.b235	18		clc				clc 								; add 320 to offset/temp+1
.b236	ad 54 06	lda $0654			lda 	gsOffset
.b239	69 40		adc #$40			adc 	#64
.b23b	8d 54 06	sta $0654			sta 	gsOffset
.b23e	a5 3d		lda $3d				lda 	gxzScreen+1
.b240	69 01		adc #$01			adc 	#1
.b242	85 3d		sta $3d				sta 	gxzScreen+1
.b244	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b246	90 07		bcc $b24f			bcc 	_GXMPDExit
.b248	38		sec				sec  								; next page
.b249	e9 20		sbc #$20			sbc 	#$20
.b24b	85 3d		sta $3d				sta 	gxzScreen+1
.b24d	e6 0b		inc $0b				inc 	GXEditSlot
.b24f					_GXMPDExit:
.b24f	60		rts				rts
.b250					GXCollide:
.b250	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b252	aa		tax				tax
.b253	05 37		ora $37				ora 	gxzTemp0+1
.b255	29 c0		and #$c0			and 	#$C0
.b257	38		sec				sec
.b258	d0 53		bne $b2ad			bne 	_GXCollideFail 				; if either >= 64, fail.
.b25a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b25c	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b25f	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b262	30 48		bmi $b2ac			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b264	18		clc				clc 								; need to calculate sum of sizes.
.b265	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b268	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b26b	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b26d	6a		ror a				ror 	a 							; 5/6/7
.b26e	4a		lsr a				lsr 	a 							; 4/5/6
.b26f	4a		lsr a				lsr 	a 							; 3/4/5
.b270	4a		lsr a				lsr 	a 							; 2/3/4
.b271	18		clc				clc
.b272	69 08		adc #$08			adc 	#$08
.b274	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b275	4a		lsr a				lsr 	a
.b276	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b278	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b27b	29 3f		and #$3f			and 	#$3F
.b27d	85 39		sta $39				sta 	gxzTemp1+1
.b27f	38		sec				sec
.b280	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b283	29 3f		and #$3f			and 	#$3F
.b285	e5 39		sbc $39				sbc 	gxzTemp1+1
.b287	b0 03		bcs $b28c			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b289	49 ff		eor #$ff			eor 	#$FF
.b28b	1a		inc a				inc 	a
.b28c					_GXCAbs1:
.b28c	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b28e	b0 1c		bcs $b2ac			bcs 	_GXOkayFail
.b290	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b292	38		sec				sec 								; calculate |x1-x0|
.b293	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b296	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b299	b0 03		bcs $b29e			bcs 	_GXCAbs2
.b29b	49 ff		eor #$ff			eor 	#$FF
.b29d	1a		inc a				inc 	a
.b29e					_GXCAbs2:
.b29e	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b2a0	b0 0a		bcs $b2ac			bcs 	_GXOkayFail
.b2a2	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b2a4	90 02		bcc $b2a8			bcc 	_GXCHaveLowest
.b2a6	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b2a8					_GXCHaveLowest:
.b2a8	0a		asl a				asl 	a 							; scale to allow for >> 2
.b2a9	0a		asl a				asl 	a
.b2aa	18		clc				clc
.b2ab	60		rts				rts
.b2ac					_GXOkayFail:
.b2ac	18		clc				clc
.b2ad					_GXCollideFail:
.b2ad	a9 ff		lda #$ff			lda 	#$FF
.b2af	60		rts				rts
.b2b0					GXFindSprite:
.b2b0	aa		tax				tax
.b2b1	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b2b4	85 0b		sta $0b				sta 	GXEditSlot
.b2b6	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b2b9	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b2bc	f0 33		beq $b2f1			beq 	_GXFSFail
.b2be	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2c1	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2c4	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2c7	48		pha				pha 								; save twice
.b2c8	48		pha				pha
.b2c9	29 03		and #$03			and 	#3 							; get sprite size
.b2cb	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2ce	aa		tax				tax
.b2cf	bd f3 b2	lda $b2f3,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2d2	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2d5	68		pla				pla 								; get LUT
.b2d6	4a		lsr a				lsr		a
.b2d7	4a		lsr a				lsr		a
.b2d8	29 03		and #$03			and 	#3
.b2da	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2dd	68		pla				pla 								; address, neeeds to be x 4
.b2de	29 f0		and #$f0			and 	#$F0
.b2e0	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2e3	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2e6	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e9	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ec	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2ef	18		clc				clc
.b2f0	60		rts				rts
.b2f1					_GXFSFail:
.b2f1	38		sec				sec
.b2f2	60		rts				rts
.b2f3					_GXFXSSTTable:
>b2f3	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2f7					GXSortXY:
.b2f7	20 15 b3	jsr $b315			jsr 	GXSortY 					; will be sorted on Y now
.b2fa	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2fd	cd 46 06	cmp $0646			cmp 	gxX1
.b300	ad 43 06	lda $0643			lda 	gXX0+1
.b303	ed 47 06	sbc $0647			sbc 	gXX1+1
.b306	90 0c		bcc $b314			bcc 	_GXSXYExit 					; X0 < X1 exit
.b308	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b30a	a0 04		ldy #$04			ldy 	#4
.b30c	20 29 b3	jsr $b329			jsr 	GXSwapXY
.b30f	e8		inx				inx
.b310	c8		iny				iny
.b311	20 29 b3	jsr $b329			jsr 	GXSwapXY
.b314					_GXSXYExit:
.b314	60		rts				rts
.b315					GXSortY:
.b315	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b318	cd 48 06	cmp $0648			cmp 	gxY1
.b31b	90 0b		bcc $b328			bcc 	_GXSYSorted
.b31d	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b31f	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b321					_GXSwap1:
.b321	20 29 b3	jsr $b329			jsr 	GXSwapXY
.b324	88		dey				dey
.b325	ca		dex				dex
.b326	10 f9		bpl $b321			bpl 	_GXSwap1
.b328					_GXSYSorted:
.b328	60		rts				rts
.b329					GXSwapXY:
.b329	bd 42 06	lda $0642,x			lda 	gxX0,x
.b32c	48		pha				pha
.b32d	b9 42 06	lda $0642,y			lda 	gxX0,y
.b330	9d 42 06	sta $0642,x			sta 	gxX0,x
.b333	68		pla				pla
.b334	99 42 06	sta $0642,y			sta 	gxX0,y
.b337	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b829					KeywordSet0:
>b829	00 65					.text	0,$65,""               ; $80 !0:EOF
>b82b	00 58					.text	0,$58,""               ; $81 !1:SH1
>b82d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b82f	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b835	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b83d	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b843	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b84a	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b852	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b859	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b860	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b866	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b86c	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b874	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b87b	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b882	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b889	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b891	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b897	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b89d	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b8a4	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8aa	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8b0	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b8b8	28
>b8b9	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8c1	28
>b8c2	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8c8	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8ce	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8d4	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8db	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8e3	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8e9	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8ef	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8f4	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8f8	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8fe	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b906	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b90d	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b914	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b91c	43
>b91d	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b923	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b929	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b930	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b936	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b93a	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b940	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b948	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b94f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b954	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b95b	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b963	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b969	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b96e	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b976	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b97c	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b982	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b987	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b98e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b994	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b99a	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b9a1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b9a6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b9ac	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b9b3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b9b8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b9bc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9c4	45
>b9c5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9cd	45
>b9ce	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9d4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9db	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9e1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9e7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9ec	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9f4	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9fb	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>ba03	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>ba09	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>ba0d	ff					.text	$FF
.ba0e					KeywordSet1:
>ba0e	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba10	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba12	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba14	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba1c	4c 45
>ba1e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba26	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba2e	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba33	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba39	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba3e	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba46	45
>ba47	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba4c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba54	53
>ba55	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba5b	ff					.text	$FF
.ba5c					KeywordSet2:
>ba5c	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba5e	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba60	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba62	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba67	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba6c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba71	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba76	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba7b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba80	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba85	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba8a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba8f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba94	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba99	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba9e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>baa3	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>baa8	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>baad	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>bab2	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>bab7	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>babc	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>bac1	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>bac6	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>bacb	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bad0	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bad5	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bada	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>badf	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bae4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bae9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>baee	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>baf3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>baf8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>bafd	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bb02	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb07	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb0c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb11	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb16	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb1b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb20	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb25	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb2a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb2f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb34	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb39	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb3e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb43	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb48	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb4d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb52	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb57	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb5c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb61	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb66	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb6b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb70	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb75	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb7a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb7f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb84	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb89	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb8e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb93	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb98	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb9d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bba2	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bba7	ff					.text	$FF
.b338					ListConvertLine:
.b338	48		pha				pha 								; save indent on the stack
.b339	9c 9d 04	stz $049d			stz 	tbOffset
.b33c	9c ab 04	stz $04ab			stz 	tokenBuffer
.b33f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b341	b1 30		lda ($30),y			lda 	(codePtr),y
.b343	aa		tax				tax
.b344	88		dey				dey
.b345	b1 30		lda ($30),y			lda 	(codePtr),y
.b347	20 6b 92	jsr $926b			jsr 	LCLConvertInt16
.b34a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b34c	86 37		stx $37				stx 	zTemp0+1
.b34e	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b350	20 95 b4	jsr $b495			jsr 	LCLWrite
.b353	a0 00		ldy #$00			ldy 	#0
.b355					_LCCopyNumber:
.b355	b1 36		lda ($36),y			lda 	(zTemp0),y
.b357	20 95 b4	jsr $b495			jsr 	LCLWrite
.b35a	c8		iny				iny
.b35b	b1 36		lda ($36),y			lda 	(zTemp0),y
.b35d	d0 f6		bne $b355			bne 	_LCCopyNumber
.b35f	68		pla				pla 								; adjustment to indent
.b360	48		pha				pha 								; save on stack
.b361	10 0c		bpl $b36f			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b363	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b364	6d a6 04	adc $04a6			adc 	listIndent
.b367	8d a6 04	sta $04a6			sta 	listIndent
.b36a	10 03		bpl $b36f			bpl 	_LCNoAdjust
.b36c	9c a6 04	stz $04a6			stz 	listIndent
.b36f					_LCNoAdjust:
.b36f	18		clc				clc		 							; work out actual indent.
.b370	ad a6 04	lda $04a6			lda 	listIndent
.b373	0a		asl a				asl 	a
.b374	69 06		adc #$06			adc 	#6
.b376	85 36		sta $36				sta 	zTemp0
.b378					_LCPadOut:
.b378	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b37a	20 95 b4	jsr $b495			jsr 	LCLWrite
.b37d	ad 9d 04	lda $049d			lda 	tbOffset
.b380	c5 36		cmp $36				cmp 	zTemp0
.b382	d0 f4		bne $b378			bne 	_LCPadOut
.b384	a0 03		ldy #$03			ldy 	#3 							; start position.
.b386					_LCMainLoop:
.b386	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b388	20 95 b4	jsr $b495			jsr 	LCLWrite
.b38b	b1 30		lda ($30),y			lda 	(codePtr),y
.b38d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b38f	f0 17		beq $b3a8			beq 	_LCExit
.b391	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b393	90 1e		bcc $b3b3			bcc 	_LCDoubles
.b395	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b397	90 2a		bcc $b3c3			bcc 	_LCShiftPunc
.b399	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b39b	90 35		bcc $b3d2			bcc 	_LCPunctuation
.b39d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b39f	90 3e		bcc $b3df			bcc 	_LCIdentifiers
.b3a1	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b3a3	90 5f		bcc $b404			bcc 	_LCTokens
.b3a5	4c 64 b4	jmp $b464			jmp 	_LCData 					; 254-5 are data objects
.b3a8					_LCExit:
.b3a8	68		pla				pla 								; get old indent adjust
.b3a9	30 07		bmi $b3b2			bmi 	_LCExit2
.b3ab	18		clc				clc 								; add to indent if +ve
.b3ac	6d a6 04	adc $04a6			adc 	listIndent
.b3af	8d a6 04	sta $04a6			sta 	listIndent
.b3b2					_LCExit2:
.b3b2	60		rts				rts
.b3b3					_LCDoubles:
.b3b3	48		pha				pha
.b3b4	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b3b5	29 02		and #$02			and 	#2
.b3b7	09 3c		ora #$3c			ora 	#60 						; make < >
.b3b9	20 95 b4	jsr $b495			jsr 	LCLWrite
.b3bc	68		pla				pla 								; restore, do lower bit
.b3bd	29 03		and #$03			and 	#3
.b3bf	09 3c		ora #$3c			ora 	#60
.b3c1	80 0f		bra $b3d2			bra		_LCPunctuation 				; print, increment, loop
.b3c3					_LCShiftPunc:
.b3c3	aa		tax				tax 								; save in X
.b3c4	29 07		and #$07			and 	#7 							; lower 3 bits
.b3c6	f0 02		beq $b3ca			beq 	_LCNoAdd
.b3c8	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3ca					_LCNoAdd:
.b3ca	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3cc	90 02		bcc $b3d0			bcc 	_LCNoAdd2
.b3ce	09 20		ora #$20			ora 	#32 						; adds $20
.b3d0					_LCNoAdd2:
.b3d0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3d2					_LCPunctuation:
.b3d2	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3d4	d0 03		bne $b3d9			bne 	_LCPContinue
.b3d6	20 ab b4	jsr $b4ab			jsr 	LCLDeleteLastSpace
.b3d9					_LCPContinue:
.b3d9	c8		iny				iny 								; consume character
.b3da	20 95 b4	jsr $b495			jsr 	LCLWrite 					; write it out.
.b3dd	80 a7		bra $b386			bra 	_LCMainLoop 				; go round again.
.b3df					_LCIdentifiers:
.b3df	18		clc				clc 								; convert to physical address
.b3e0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3e2	85 37		sta $37				sta 	zTemp0+1
.b3e4	c8		iny				iny
.b3e5	b1 30		lda ($30),y			lda 	(codePtr),y
.b3e7	85 36		sta $36				sta 	zTemp0
.b3e9	c8		iny				iny
.b3ea	5a		phy				phy 								; save position
.b3eb	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3ed	20 95 b4	jsr $b495			jsr 	LCLWrite
.b3f0	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3f2					_LCOutIdentifier:
.b3f2	c8		iny				iny
.b3f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3f5	29 7f		and #$7f			and 	#$7F
.b3f7	20 e7 b4	jsr $b4e7			jsr 	LCLLowerCase
.b3fa	20 95 b4	jsr $b495			jsr 	LCLWrite
.b3fd	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3ff	10 f1		bpl $b3f2			bpl 	_LCOutIdentifier
.b401	7a		ply				ply 								; restore position
.b402	80 82		bra $b386			bra 	_LCMainLoop
.b404					_LCTokens:
.b404	aa		tax				tax 								; token in X
.b405	a9 5c		lda #$5c			lda 	#((KeywordSet2) & $FF)
.b407	85 36		sta $36				sta 	0+zTemp0
.b409	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b40b	85 37		sta $37				sta 	1+zTemp0
.b40d	e0 82		cpx #$82			cpx 	#$82
.b40f	f0 16		beq $b427			beq 	_LCUseShift
.b411	a9 0e		lda #$0e			lda 	#((KeywordSet1) & $FF)
.b413	85 36		sta $36				sta 	0+zTemp0
.b415	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b417	85 37		sta $37				sta 	1+zTemp0
.b419	e0 81		cpx #$81			cpx 	#$81
.b41b	f0 0a		beq $b427			beq 	_LCUseShift
.b41d	a9 29		lda #$29			lda 	#((KeywordSet0) & $FF)
.b41f	85 36		sta $36				sta 	0+zTemp0
.b421	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b423	85 37		sta $37				sta 	1+zTemp0
.b425	80 01		bra $b428			bra 	_LCNoShift
.b427					_LCUseShift:
.b427	c8		iny				iny
.b428					_LCNoShift:
.b428	20 bf b4	jsr $b4bf			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b42b	b1 30		lda ($30),y			lda 	(codePtr),y
.b42d	aa		tax				tax 								; into X
.b42e					_LCFindText:
.b42e	ca		dex				dex
.b42f	10 0e		bpl $b43f			bpl 	_LCFoundText 				; found text.
.b431	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b433	1a		inc a				inc 	a 							; one extra for size
.b434	38		sec				sec 								; one extra for checksum
.b435	65 36		adc $36				adc 	zTemp0 						; go to next token
.b437	85 36		sta $36				sta 	zTemp0
.b439	90 f3		bcc $b42e			bcc 	_LCFindText
.b43b	e6 37		inc $37				inc 	zTemp0+1
.b43d	80 ef		bra $b42e			bra 	_LCFindText
.b43f					_LCFoundText:
.b43f	5a		phy				phy 								; save List position
.b440	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b442	aa		tax				tax
.b443	a9 83		lda #$83			lda 	#CLIToken+$80
.b445	20 95 b4	jsr $b495			jsr 	LCLWrite
.b448	a0 02		ldy #$02			ldy 	#2
.b44a					_LCCopyToken:
.b44a	b1 36		lda ($36),y			lda 	(zTemp0),y
.b44c	20 e7 b4	jsr $b4e7			jsr 	LCLLowerCase
.b44f	20 95 b4	jsr $b495			jsr 	LCLWrite
.b452	c8		iny				iny
.b453	ca		dex				dex
.b454	d0 f4		bne $b44a			bne 	_LCCopyToken
.b456	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b458	f0 05		beq $b45f			beq 	_LCNoSpace
.b45a	a9 20		lda #$20			lda 	#' '
.b45c	20 95 b4	jsr $b495			jsr 	LCLWrite
.b45f					_LCNoSpace:
.b45f	7a		ply				ply 								; restore position.
.b460	c8		iny				iny 								; consume token
.b461	4c 86 b3	jmp $b386			jmp 	_LCMainLoop 				; and go around again.
.b464					_LCData:
.b464	48		pha				pha 								; save type $FE/$FF
.b465	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b467	c9 fe		cmp #$fe			cmp 	#$FE
.b469	f0 07		beq $b472			beq 	_LCHaveOpener
.b46b	a2 22		ldx #$22			ldx 	#'"'
.b46d	a9 81		lda #$81			lda 	#CLIData+$80
.b46f	20 95 b4	jsr $b495			jsr 	LCLWrite
.b472					_LCHaveOpener:
.b472	8a		txa				txa 								; output prefix (# or ")
.b473	20 95 b4	jsr $b495			jsr 	LCLWrite
.b476	c8		iny				iny 								; get count
.b477	b1 30		lda ($30),y			lda 	(codePtr),y
.b479	aa		tax				tax
.b47a	c8		iny				iny 								; point at first character
.b47b					_LCOutData:
.b47b	b1 30		lda ($30),y			lda 	(codePtr),y
.b47d	c9 00		cmp #$00			cmp 	#0
.b47f	f0 03		beq $b484			beq 	_LCNoPrint
.b481	20 95 b4	jsr $b495			jsr 	LCLWrite
.b484					_LCNoPrint:
.b484	c8		iny				iny
.b485	ca		dex				dex
.b486	d0 f3		bne $b47b			bne 	_LCOutData
.b488	68		pla				pla 								; closing " required ?
.b489	c9 ff		cmp #$ff			cmp 	#$FF
.b48b	d0 05		bne $b492			bne 	_LCNoQuote
.b48d	a9 22		lda #$22			lda 	#'"'
.b48f	20 95 b4	jsr $b495			jsr 	LCLWrite
.b492					_LCNoQuote:
.b492	4c 86 b3	jmp $b386			jmp 	_LCMainLoop
.b495					LCLWrite:
.b495	da		phx				phx
.b496	ae 9d 04	ldx $049d			ldx 	tbOffset
.b499	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b49c	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b49f	ee 9d 04	inc $049d			inc 	tbOffset
.b4a2	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b4a4	30 03		bmi $b4a9			bmi 	_LCLNoColour
.b4a6	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b4a9					_LCLNoColour:
.b4a9	fa		plx				plx
.b4aa	60		rts				rts
.b4ab					LCLDeleteLastSpace:
.b4ab	48		pha				pha
.b4ac	da		phx				phx
.b4ad	ae 9d 04	ldx $049d			ldx 	tbOffset
.b4b0	f0 0a		beq $b4bc			beq 	_LCDLSExit
.b4b2	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b4b5	c9 20		cmp #$20			cmp 	#' '
.b4b7	d0 03		bne $b4bc			bne 	_LCDLSExit
.b4b9	ce 9d 04	dec $049d			dec 	tbOffset
.b4bc					_LCDLSExit:
.b4bc	fa		plx				plx
.b4bd	68		pla				pla
.b4be	60		rts				rts
.b4bf					LCLCheckSpaceRequired:
.b4bf	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4c2	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4c4	f0 1b		beq $b4e1			beq 	_LCCSRSpace
.b4c6	c9 29		cmp #$29			cmp 	#')'
.b4c8	f0 17		beq $b4e1			beq 	_LCCSRSpace
.b4ca	c9 23		cmp #$23			cmp 	#'#'
.b4cc	f0 13		beq $b4e1			beq 	_LCCSRSpace
.b4ce	20 e7 b4	jsr $b4e7			jsr 	LCLLowerCase 				; saves a little effort
.b4d1	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4d3	90 11		bcc $b4e6			bcc 	_LCCSRExit
.b4d5	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4d7	90 08		bcc $b4e1			bcc 	_LCCSRSpace
.b4d9	c9 61		cmp #$61			cmp 	#"a"
.b4db	90 09		bcc $b4e6			bcc 	_LCCSRExit
.b4dd	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4df	b0 05		bcs $b4e6			bcs 	_LCCSRExit
.b4e1					_LCCSRSpace:
.b4e1	a9 20		lda #$20			lda 	#' '
.b4e3	20 95 b4	jsr $b495			jsr 	LCLWrite
.b4e6					_LCCSRExit:
.b4e6	60		rts				rts
.b4e7					LCLLowerCase:
.b4e7	c9 41		cmp #$41			cmp 	#"A"
.b4e9	90 06		bcc $b4f1			bcc 	_LCLLCOut
.b4eb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4ed	b0 02		bcs $b4f1			bcs 	_LCLLCOut
.b4ef	69 20		adc #$20			adc 	#$20
.b4f1					_LCLLCOut:
.b4f1	60		rts				rts
.b4f2					LCLUpperCase:
.b4f2	c9 61		cmp #$61			cmp 	#"a"
.b4f4	90 06		bcc $b4fc			bcc 	_LCLUCOut
.b4f6	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4f8	b0 02		bcs $b4fc			bcs 	_LCLUCOut
.b4fa	e9 1f		sbc #$1f			sbc 	#$1F
.b4fc					_LCLUCOut:
.b4fc	60		rts				rts
.b4fd					TOKSearchTable:
.b4fd	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4ff	85 36		sta $36				sta 	zTemp0
.b501	a0 00		ldy #$00			ldy 	#0
.b503	a9 80		lda #$80			lda 	#$80 						; token #
.b505	85 38		sta $38				sta 	zTemp1
.b507					_TSTLoop:
.b507	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b509	30 49		bmi $b554			bmi 	_TSTFail 					; -ve = end of table
.b50b	f0 2e		beq $b53b			beq 	_TSTNext 					; zero, check next it's a dummy
.b50d	c8		iny				iny 								; get the hash
.b50e	b1 36		lda ($36),y			lda 	(zTemp0),y
.b510	88		dey				dey
.b511	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b514	d0 25		bne $b53b			bne 	_TSTNext
.b516	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b519	38		sec				sec
.b51a	ed 80 04	sbc $0480			sbc 	identStart
.b51d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b51f	d0 1a		bne $b53b			bne 	_TSTNext
.b521	5a		phy				phy 								; save Y , we might fail
.b522	c8		iny				iny 								; point to text
.b523	c8		iny				iny
.b524	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b527					_TSTCompareName:
.b527	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b52a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b52c	d0 0c		bne $b53a			bne 	_TSTNextPullY 				; fail, pullY and do next
.b52e	e8		inx				inx
.b52f	c8		iny				iny
.b530	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b533	d0 f2		bne $b527			bne 	_TSTCompareName
.b535	7a		ply				ply 								; throw Y
.b536	a5 38		lda $38				lda 	zTemp1 						; get token #
.b538	38		sec				sec 								; return with CS = passed.
.b539	60		rts				rts
.b53a					_TSTNextPullY:
.b53a	7a		ply				ply 								; restore current, fall through.
.b53b					_TSTNext:
.b53b	e6 38		inc $38				inc 	zTemp1 						; token counter
.b53d	98		tya				tya
.b53e	18		clc				clc
.b53f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b541	1a		inc a				inc 	a 							; +1
.b542	1a		inc a				inc 	a 							; +2
.b543	a8		tay				tay
.b544	10 c1		bpl $b507			bpl 	_TSTLoop 					; if Y < $80 loop back
.b546	98		tya				tya 								; add Y to zTemp0 and reset Y
.b547	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b549	18		clc				clc  								; but have tables > 255 bytes
.b54a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b54c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b54e	90 b7		bcc $b507			bcc 	_TSTLoop
.b550	e6 37		inc $37				inc 	zTemp0+1
.b552	80 b3		bra $b507			bra 	_TSTLoop
.b554					_TSTFail:
.b554	18		clc				clc
.b555	60		rts				rts
.b556					TokeniseLine:
.b556	20 de b6	jsr $b6de			jsr 	LCLFixLineBufferCase 		; fix line case
.b559	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b55b	8d a8 04	sta $04a8			sta 	tokenOffset
.b55e	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b561	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b564	a2 ff		ldx #$ff			ldx 	#$FF
.b566					_TKFindFirst:
.b566	e8		inx				inx
.b567	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b56a	f0 79		beq $b5e5			beq 	_TKExit
.b56c	c9 20		cmp #$20			cmp 	#' '
.b56e	90 f6		bcc $b566			bcc 	_TKFindFirst
.b570	c9 30		cmp #$30			cmp 	#'0'
.b572	90 07		bcc $b57b			bcc 	_TKNoLineNumber
.b574	c9 3a		cmp #$3a			cmp 	#'9'+1
.b576	b0 03		bcs $b57b			bcs 	_TKNoLineNumber
.b578	20 08 b7	jsr $b708			jsr 	TOKExtractLineNumber
.b57b					_TKNoLineNumber:
.b57b					_TKTokeniseLoop:
.b57b	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b57e	f0 65		beq $b5e5			beq 	_TKExit
.b580	e8		inx				inx
.b581	c9 20		cmp #$20			cmp 	#' '
.b583	f0 f6		beq $b57b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b585	ca		dex				dex 								; undo last get, A contains character, X is position.
.b586	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b588	f0 61		beq $b5eb			beq 	_TKTokeniseIdentifier
.b58a	c9 41		cmp #$41			cmp 	#'A'
.b58c	90 04		bcc $b592			bcc 	_TKTokenisePunctuation
.b58e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b590	90 59		bcc $b5eb			bcc 	_TKTokeniseIdentifier
.b592					_TKTokenisePunctuation:
.b592	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b594	f0 27		beq $b5bd			beq 	_TKString
.b596	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b598	f0 28		beq $b5c2			beq 	_TKHexConstant
.b59a	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b59c	f0 29		beq $b5c7			beq 	_TKCheckDouble
.b59e	c9 3e		cmp #$3e			cmp 	#'>'
.b5a0	f0 25		beq $b5c7			beq 	_TKCheckDouble
.b5a2					_TKStandardPunctuation:
.b5a2	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b5a5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b5a7	90 0e		bcc $b5b7			bcc 	_TKNoShift
.b5a9	48		pha				pha 								; save
.b5aa	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b5ac	85 36		sta $36				sta 	zTemp0
.b5ae	68		pla				pla
.b5af	29 20		and #$20			and 	#32 						; bit 5
.b5b1	4a		lsr a				lsr 	a 							; shift into bit 3
.b5b2	4a		lsr a				lsr 	a
.b5b3	05 36		ora $36				ora 	zTemp0
.b5b5	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b5b7					_TKNoShift:
.b5b7	20 4d b7	jsr $b74d			jsr 	TOKWriteByte 				; write the punctuation character
.b5ba	e8		inx				inx 								; consume the character
.b5bb	80 be		bra $b57b			bra 	_TKTokeniseLoop 			; and loop round again.
.b5bd					_TKString:
.b5bd	20 6d b6	jsr $b66d			jsr 	TOKTokenString
.b5c0	80 b9		bra $b57b			bra 	_TKTokeniseLoop
.b5c2					_TKHexConstant:
.b5c2	20 a8 b6	jsr $b6a8			jsr 	TOKHexConstant
.b5c5	80 b4		bra $b57b			bra 	_TKTokeniseLoop
.b5c7					_TKCheckDouble:
.b5c7	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5ca	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5cc	90 d4		bcc $b5a2			bcc 	_TKStandardPunctuation
.b5ce	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5d0	b0 d0		bcs $b5a2			bcs 	_TKStandardPunctuation
.b5d2	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5d5	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5d7	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5d8	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5db	38		sec				sec
.b5dc	e9 3c		sbc #$3c			sbc 	#'<'
.b5de	20 4d b7	jsr $b74d			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5e1	e8		inx				inx 								; consume both
.b5e2	e8		inx				inx
.b5e3	80 96		bra $b57b			bra 	_TKTokeniseLoop
.b5e5	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5e7	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b5ea	60		rts				rts
.b5eb					_TKTokeniseIdentifier:
.b5eb	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5ee	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5f1					_TKCheckLoop:
.b5f1	e8		inx				inx 								; look at next, we know first is identifier.
.b5f2	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5f5	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5f7	f0 f8		beq $b5f1			beq 	_TKCheckLoop
.b5f9	c9 30		cmp #$30			cmp	 	#"0"
.b5fb	90 0c		bcc $b609			bcc 	_TKEndIdentifier
.b5fd	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5ff	90 f0		bcc $b5f1			bcc 	_TKCheckLoop
.b601	c9 41		cmp #$41			cmp	 	#"A"
.b603	90 04		bcc $b609			bcc 	_TKEndIdentifier
.b605	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b607	90 e8		bcc $b5f1			bcc 	_TKCheckLoop
.b609					_TKEndIdentifier:
.b609	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b60c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b60e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b610	f0 06		beq $b618			beq 	_TKHasTypeCharacter
.b612	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b614	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b616	d0 07		bne $b61f			bne 	_TKNoTypeCharacter
.b618					_TKHasTypeCharacter:
.b618	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b61b	e8		inx				inx 								; read next
.b61c	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b61f					_TKNoTypeCharacter:
.b61f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b621	d0 09		bne $b62c			bne 	_TKNoArray
.b623	e8		inx				inx 								; skip the (
.b624	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b627	09 04		ora #$04			ora 	#$04
.b629	8d 84 04	sta $0484			sta 	identTypeByte
.b62c					_TKNoArray:
.b62c	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b62f	20 c9 b6	jsr $b6c9			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b632	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b634	a9 29		lda #$29			lda 	#(KeywordSet0) & $FF
.b636	20 fd b4	jsr $b4fd			jsr 	TOKSearchTable
.b639	a2 00		ldx #$00			ldx 	#0
.b63b	b0 1f		bcs $b65c			bcs 	_TKFoundToken
.b63d	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b63f	a9 0e		lda #$0e			lda 	#(KeywordSet1) & $FF
.b641	20 fd b4	jsr $b4fd			jsr 	TOKSearchTable
.b644	a2 81		ldx #$81			ldx 	#$81
.b646	b0 14		bcs $b65c			bcs 	_TKFoundToken
.b648	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b64a	a9 5c		lda #$5c			lda 	#(KeywordSet2) & $FF
.b64c	20 fd b4	jsr $b4fd			jsr 	TOKSearchTable
.b64f	a2 82		ldx #$82			ldx 	#$82
.b651	b0 09		bcs $b65c			bcs 	_TKFoundToken
.b653	20 59 b7	jsr $b759			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b656	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b659	4c 7b b5	jmp $b57b			jmp 	_TKTokeniseLoop 			; and go round again.
.b65c					_TKFoundToken:
.b65c	48		pha				pha 								; save token
.b65d	8a		txa				txa 								; shift in X, is there one ?
.b65e	f0 03		beq $b663			beq 	_TKNoTShift
.b660	20 4d b7	jsr $b74d			jsr 	TOKWriteByte 				; if so, write it out
.b663					_TKNoTShift:
.b663	68		pla				pla 								; restore and write token
.b664	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b667	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b66a	4c 7b b5	jmp $b57b			jmp 	_TKTokeniseLoop 			; and go round again.
.b66d					TOKTokenString:
.b66d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b66f	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b672	e8		inx				inx									; start of quoted string.
.b673	da		phx				phx 								; push start of string on top
.b674	ca		dex				dex
.b675					_TSFindEnd:
.b675	e8		inx				inx
.b676	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b679	f0 04		beq $b67f			beq 	_TSEndOfString
.b67b	c9 22		cmp #$22			cmp 	#'"'
.b67d	d0 f6		bne $b675			bne 	_TSFindEnd
.b67f					_TSEndOfString:
.b67f	7a		ply				ply  								; so now Y is first character, X is character after end.
.b680	48		pha				pha 								; save terminating character
.b681	20 89 b6	jsr $b689			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b684	68		pla				pla 								; terminating character
.b685	f0 01		beq $b688			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b687	e8		inx				inx
.b688					_TSNotQuote:
.b688	60		rts				rts
.b689					TOKWriteBlockXY:
.b689	86 36		stx $36				stx 	zTemp0 						; write end character
.b68b	98		tya				tya
.b68c	49 ff		eor #$ff			eor 	#$FF
.b68e	38		sec				sec
.b68f	65 36		adc $36				adc 	zTemp0
.b691	1a		inc a				inc 	a 							; one extra for NULL
.b692	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b695					_TOBlockLoop:
.b695	c4 36		cpy $36				cpy 	zTemp0
.b697	f0 09		beq $b6a2			beq 	_TOBlockExit
.b699	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b69c	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b69f	c8		iny				iny
.b6a0	80 f3		bra $b695			bra 	_TOBlockLoop
.b6a2					_TOBlockExit:
.b6a2	a9 00		lda #$00			lda 	#0
.b6a4	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b6a7	60		rts				rts
.b6a8					TOKHexConstant:
.b6a8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b6aa	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b6ad	e8		inx				inx									; start of quoted string.
.b6ae	da		phx				phx 								; push start of constant on top
.b6af	ca		dex				dex
.b6b0					_THFindLoop:
.b6b0	e8		inx				inx
.b6b1	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b6b4	c9 30		cmp #$30			cmp 	#"0"
.b6b6	90 0c		bcc $b6c4			bcc 	_THFoundEnd
.b6b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.b6ba	90 f4		bcc $b6b0			bcc 	_THFindLoop
.b6bc	c9 41		cmp #$41			cmp 	#"A"
.b6be	90 04		bcc $b6c4			bcc 	_THFoundEnd
.b6c0	c9 47		cmp #$47			cmp 	#"F"+1
.b6c2	90 ec		bcc $b6b0			bcc 	_THFindLoop
.b6c4					_THFoundEnd:
.b6c4	7a		ply				ply 								; restore start
.b6c5	20 89 b6	jsr $b689			jsr 	TOKWriteBlockXY 			; output the block
.b6c8	60		rts				rts
.b6c9					TOKCalculateHash:
.b6c9	da		phx				phx
.b6ca	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6cd	a9 00		lda #$00			lda 	#0
.b6cf					_TCHLoop:
.b6cf	18		clc				clc
.b6d0	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6d3	e8		inx				inx
.b6d4	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6d7	d0 f6		bne $b6cf			bne 	_TCHLoop
.b6d9	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6dc	fa		plx				plx
.b6dd	60		rts				rts
.b6de					LCLFixLineBufferCase:
.b6de	a2 00		ldx #$00			ldx 	#0
.b6e0					_FLBCLoop:
.b6e0	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6e3	f0 22		beq $b707			beq 	_FLBCExit 					; end of string.
.b6e5	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6e7	f0 11		beq $b6fa			beq 	_FLBCInQuotes
.b6e9	e8		inx				inx
.b6ea	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6ec	90 f2		bcc $b6e0			bcc 	_FLBCLoop
.b6ee	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6f0	b0 ee		bcs $b6e0			bcs 	_FLBCLoop
.b6f2	38		sec				sec 								; make U/C
.b6f3	e9 20		sbc #$20			sbc 	#32
.b6f5	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6f8	80 e6		bra $b6e0			bra 	_FLBCLoop
.b6fa					_FLBCInQuotes:
.b6fa	e8		inx				inx 								; advance
.b6fb	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6fe	f0 07		beq $b707			beq 	_FLBCExit 					; exit on EOS
.b700	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b702	d0 f6		bne $b6fa			bne 	_FLBCInQuotes
.b704	e8		inx				inx 								; skip over it
.b705	80 d9		bra $b6e0			bra 	_FLBCLoop
.b707					_FLBCExit:
.b707	60		rts				rts
.b708					TOKExtractLineNumber:
.b708	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b70b	48		pha				pha
.b70c	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b70f	48		pha				pha
.b710	20 46 b7	jsr $b746			jsr 	_LCLNTimes2 				; line # x 4
.b713	20 46 b7	jsr $b746			jsr 	_LCLNTimes2 				; line # x 2
.b716	18		clc				clc 								; add stacked value
.b717	68		pla				pla
.b718	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b71b	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b71e	68		pla				pla
.b71f	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b722	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b725	20 46 b7	jsr $b746			jsr 	_LCLNTimes2 				; line # x 10
.b728	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b72b	e8		inx				inx
.b72c	29 0f		and #$0f			and 	#15 						; add to line #
.b72e	18		clc				clc
.b72f	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b732	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b735	90 03		bcc $b73a			bcc 	_TLENNoCarry
.b737	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b73a					_TLENNoCarry:
.b73a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b73d	c9 30		cmp #$30			cmp 	#'0'
.b73f	90 04		bcc $b745			bcc 	_TLENExit
.b741	c9 3a		cmp #$3a			cmp 	#'9'+1
.b743	90 c3		bcc $b708			bcc 	TOKExtractLineNumber
.b745					_TLENExit:
.b745	60		rts				rts
.b746					_LCLNTimes2:
.b746	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b749	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b74c	60		rts				rts
.b74d					TOKWriteByte:
.b74d	da		phx				phx
.b74e	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b751	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b754	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b757	fa		plx				plx
.b758	60		rts				rts
.b759					TOKCheckCreateVariableRecord:
.b759	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b75b	85 36		sta $36				sta 	0+zTemp0
.b75d	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b75f	85 37		sta $37				sta 	1+zTemp0
.b761					_CCVSearch:
.b761	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b763	f0 2c		beq $b791			beq 	_CCVFail
.b765	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b767	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b769	cd 83 04	cmp $0483			cmp 	identHash
.b76c	d0 16		bne $b784			bne 	_CCVNext
.b76e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b770	ae 80 04	ldx $0480			ldx 	identStart
.b773					_CCVCompare:
.b773	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b776	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b778	e8		inx				inx 								; advance pointers
.b779	c8		iny				iny
.b77a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b77b	d0 07		bne $b784			bne 	_CCVNext  					; didn't match go to next.
.b77d	90 f4		bcc $b773			bcc 	_CCVCompare 				; not finished yet.
.b77f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b782	f0 41		beq $b7c5			beq 	_CCVFound 					; yes, we were successful
.b784					_CCVNext:
.b784	18		clc				clc
.b785	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b787	65 36		adc $36				adc 	zTemp0
.b789	85 36		sta $36				sta 	zTemp0
.b78b	90 d4		bcc $b761			bcc 	_CCVSearch
.b78d	e6 37		inc $37				inc 	zTemp0+1
.b78f	80 d0		bra $b761			bra 	_CCVSearch
.b791					_CCVFail:
.b791	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b793	ad 83 04	lda $0483			lda 	identHash
.b796	91 36		sta ($36),y			sta 	(zTemp0),y
.b798	c8		iny				iny 								; offset 2 is the type byte
.b799	ad 84 04	lda $0484			lda 	identTypeByte
.b79c	91 36		sta ($36),y			sta 	(zTemp0),y
.b79e	c8		iny				iny
.b79f					_CCVData:
.b79f	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b7a1	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a3	c8		iny				iny
.b7a4	c0 08		cpy #$08			cpy 	#8
.b7a6	90 f7		bcc $b79f			bcc 	_CCVData
.b7a8	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b7ab					_CCVCopyName:
.b7ab	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b7ae	91 36		sta ($36),y			sta 	(zTemp0),y
.b7b0	e8		inx				inx
.b7b1	c8		iny				iny
.b7b2	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b7b5	d0 f4		bne $b7ab			bne 	_CCVCopyName
.b7b7	98		tya				tya 								; patch offset
.b7b8	92 36		sta ($36)			sta 	(zTemp0)
.b7ba	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b7bc	91 36		sta ($36),y			sta 	(zTemp0),y
.b7be	88		dey				dey
.b7bf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7c1	09 80		ora #$80			ora 	#$80
.b7c3	91 36		sta ($36),y			sta 	(zTemp0),y
.b7c5					_CCVFound:
.b7c5	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7c7	38		sec				sec
.b7c8	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7ca	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7cc	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b7cf	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7d1	20 4d b7	jsr $b74d			jsr 	TOKWriteByte
.b7d4	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
