
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 19:39:38 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b5 81	jsr $81b5			jsr 	NewCommand 					; erase current program
.8006	20 32 8a	jsr $8a32			jsr 	BackloadProgram
.8009	4c cc 81	jmp $81cc			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 a5 8e	jsr $8ea5			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	b7 82					.word	ShiftLeft                        ; $00 <<
>8016	3a 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8018	30 8f					.word	BinaryCompareNotEqual            ; $02 <>
>801a	b3 94					.word	SyntaxError                      ; $03 !!3
>801c	b3 94					.word	SyntaxError                      ; $04 ><
>801e	44 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	ba 82					.word	ShiftRight                       ; $06 >>
>8022	b3 94					.word	SyntaxError                      ; $07 !!7
>8024	b3 94					.word	SyntaxError                      ; $08 !!8
>8026	b3 94					.word	SyntaxError                      ; $09 !!9
>8028	b3 94					.word	SyntaxError                      ; $0a !!10
>802a	b3 94					.word	SyntaxError                      ; $0b !!11
>802c	b3 94					.word	SyntaxError                      ; $0c !!12
>802e	b3 94					.word	SyntaxError                      ; $0d !!13
>8030	b3 94					.word	SyntaxError                      ; $0e !!14
>8032	b3 94					.word	SyntaxError                      ; $0f !!15
>8034	b3 94					.word	SyntaxError                      ; $10 @
>8036	b3 94					.word	SyntaxError                      ; $11 !!17
>8038	b3 94					.word	SyntaxError                      ; $12 !!18
>803a	b3 94					.word	SyntaxError                      ; $13 [
>803c	aa 8f					.word	IntegerDivide                    ; $14 \
>803e	b3 94					.word	SyntaxError                      ; $15 ]
>8040	3d 84					.word	EorInteger                       ; $16 ^
>8042	b3 94					.word	SyntaxError                      ; $17 _
>8044	b3 94					.word	SyntaxError                      ; $18 `
>8046	b3 94					.word	SyntaxError                      ; $19 !!25
>8048	b3 94					.word	SyntaxError                      ; $1a !!26
>804a	b3 94					.word	SyntaxError                      ; $1b {
>804c	f8 83					.word	OraInteger                       ; $1c |
>804e	b3 94					.word	SyntaxError                      ; $1d }
>8050	b3 94					.word	SyntaxError                      ; $1e ~
>8052	b3 94					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	b3 94					.word	SyntaxError                      ; $20
>8056	b3 94					.word	SyntaxError                      ; $21 !
>8058	b3 94					.word	SyntaxError                      ; $22 "
>805a	b3 94					.word	SyntaxError                      ; $23 #
>805c	b3 94					.word	SyntaxError                      ; $24 $
>805e	f6 8f					.word	IntegerModulus                   ; $25 %
>8060	b3 83					.word	AndInteger                       ; $26 &
>8062	b3 94					.word	SyntaxError                      ; $27 '
>8064	b3 94					.word	SyntaxError                      ; $28 (
>8066	b3 94					.word	SyntaxError                      ; $29 )
>8068	6a 90					.word	MulInteger                       ; $2a *
>806a	4d 83					.word	AddInteger                       ; $2b +
>806c	b3 94					.word	SyntaxError                      ; $2c ,
>806e	88 83					.word	SubInteger                       ; $2d -
>8070	b3 94					.word	SyntaxError                      ; $2e .
>8072	01 92					.word	FDivideCommand                   ; $2f /
>8074	b3 94					.word	SyntaxError                      ; $30 0
>8076	b3 94					.word	SyntaxError                      ; $31 1
>8078	b3 94					.word	SyntaxError                      ; $32 2
>807a	b3 94					.word	SyntaxError                      ; $33 3
>807c	b3 94					.word	SyntaxError                      ; $34 4
>807e	b3 94					.word	SyntaxError                      ; $35 5
>8080	b3 94					.word	SyntaxError                      ; $36 6
>8082	b3 94					.word	SyntaxError                      ; $37 7
>8084	b3 94					.word	SyntaxError                      ; $38 8
>8086	b3 94					.word	SyntaxError                      ; $39 9
>8088	b3 94					.word	SyntaxError                      ; $3a :
>808a	b3 94					.word	SyntaxError                      ; $3b ;
>808c	1c 8f					.word	BinaryCompareLess                ; $3c <
>808e	12 8f					.word	BinaryCompareEqual               ; $3d =
>8090	26 8f					.word	BinaryCompareGreater             ; $3e >
>8092	b3 94					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	06 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	13 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	b3 94					.word	SyntaxError                      ; $82 !2:SH2
>809a	47 93					.word	AbsUnary                         ; $83 ABS(
>809c	a9 87					.word	AllocUnary                       ; $84 ALLOC(
>809e	57 93					.word	AscUnary                         ; $85 ASC(
>80a0	46 88					.word	ChrUnary                         ; $86 CHR$(
>80a2	0e 8f					.word	UnaryFalse                       ; $87 FALSE
>80a4	64 93					.word	FracUnary                        ; $88 FRAC(
>80a6	7a 93					.word	IntUnary                         ; $89 INT(
>80a8	d0 93					.word	IsValUnary                       ; $8a ISVAL(
>80aa	a1 88					.word	Unary_Left                       ; $8b LEFT$(
>80ac	8c 93					.word	LenUnary                         ; $8c LEN(
>80ae	cb 88					.word	Unary_Mid                        ; $8d MID$(
>80b0	e3 87					.word	Unary_Not                        ; $8e NOT(
>80b2	b1 88					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	f9 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	a6 93					.word	SgnUnary                         ; $91 SGN(
>80b8	58 88					.word	SpcUnary                         ; $92 SPC(
>80ba	73 88					.word	Unary_Str                        ; $93 STR$(
>80bc	02 8f					.word	UnaryTrue                        ; $94 TRUE
>80be	c6 93					.word	ValUnary                         ; $95 VAL(
>80c0	b3 94					.word	SyntaxError                      ; $96 FOR
>80c2	b3 94					.word	SyntaxError                      ; $97 IF
>80c4	b3 94					.word	SyntaxError                      ; $98 PROC
>80c6	b3 94					.word	SyntaxError                      ; $99 REPEAT
>80c8	b3 94					.word	SyntaxError                      ; $9a WHILE
>80ca	b3 94					.word	SyntaxError                      ; $9b ENDIF
>80cc	b3 94					.word	SyntaxError                      ; $9c ENDPROC
>80ce	b3 94					.word	SyntaxError                      ; $9d NEXT
>80d0	b3 94					.word	SyntaxError                      ; $9e UNTIL
>80d2	b3 94					.word	SyntaxError                      ; $9f WEND
>80d4	6d 81					.word	CallCommand                      ; $a0 CALL
>80d6	b3 94					.word	SyntaxError                      ; $a1 CLS
>80d8	b3 94					.word	SyntaxError                      ; $a2 DATA
>80da	b3 94					.word	SyntaxError                      ; $a3 DIM
>80dc	b3 94					.word	SyntaxError                      ; $a4 GOSUB
>80de	b3 94					.word	SyntaxError                      ; $a5 GOTO
>80e0	b3 94					.word	SyntaxError                      ; $a6 LET
>80e2	b3 94					.word	SyntaxError                      ; $a7 PRINT
>80e4	b3 94					.word	SyntaxError                      ; $a8 READ
>80e6	bf 81					.word	RemCommand                       ; $a9 REM
>80e8	b3 94					.word	SyntaxError                      ; $aa RETURN
>80ea	b3 94					.word	SyntaxError                      ; $ab THEN
>80ec	b3 94					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	b3 94					.word	SyntaxError                      ; $80 !0:EOF
>80f0	b3 94					.word	SyntaxError                      ; $81 !1:SH1
>80f2	b3 94					.word	SyntaxError                      ; $82 !2:SH2
>80f4	5d 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	7b 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	b2 81					.word	EndCommand                       ; $85 END
>80fa	b3 94					.word	SyntaxError                      ; $86 LIST
>80fc	b5 81					.word	NewCommand                       ; $87 NEW
>80fe	b3 94					.word	SyntaxError                      ; $88 RESTORE
>8100	cc 81					.word	CommandRUN                       ; $89 RUN
>8102	b3 94					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	b3 94					.word	SyntaxError                      ; $80 !0:EOF
>8106	b3 94					.word	SyntaxError                      ; $81 !1:SH1
>8108	b3 94					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/memory.asm

.8e9f					MemoryPeek:
.8e9f	b2 36		lda ($36)			lda 	(zTemp0)
.8ea1	60		rts				rts
.8ea2					MemoryPoke:
.8ea2	92 36		sta ($36)			sta 	(zTemp0)
.8ea4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/vectors.asm

.8ea5					EXTPrintCharacter:
.8ea5	48		pha				pha
.8ea6	da		phx				phx
.8ea7	5a		phy				phy
.8ea8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.8eab	7a		ply				ply
.8eac	fa		plx				plx
.8ead	68		pla				pla
.8eae	60		rts				rts
.8eaf					EXTInputSingleCharacter:
.8eaf	da		phx				phx
.8eb0	5a		phy				phy
.8eb1					_EISCWait:
.8eb1	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.8eb4	c9 00		cmp #$00			cmp 	#0
.8eb6	f0 f9		beq $8eb1			beq 	_EISCWait
.8eb8	7a		ply				ply
.8eb9	fa		plx				plx
.8eba	60		rts				rts
.8ebb					EXTInputLine:
.8ebb	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.8ebd					_ILLoop:
.8ebd	da		phx				phx 								; read character in
.8ebe	20 cf ff	jsr $ffcf			jsr 	$FFCF
.8ec1	fa		plx				plx
.8ec2	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.8ec4	f0 12		beq $8ed8			beq 	_ILBackspace
.8ec6	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.8ec8	f0 15		beq $8edf			beq 	_ILExit
.8eca	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.8ecc	90 ef		bcc $8ebd			bcc 	_ILLoop
.8ece	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.8ed0	f0 eb		beq $8ebd			beq 	_ILLoop
.8ed2	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.8ed5	e8		inx				inx
.8ed6	80 e5		bra $8ebd			bra 	_ILLoop
.8ed8					_ILBackspace:
.8ed8	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.8eda	f0 e1		beq $8ebd			beq 	_ILLoop
.8edc	ca		dex				dex 								; back one.
.8edd	80 de		bra $8ebd			bra 	_ILLoop
.8edf					_ILExit:
.8edf	20 a5 8e	jsr $8ea5			jsr 	EXTPrintCharacter
.8ee2	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.8ee5	60		rts				rts
.8ee6					EXTBreakCheck:
.8ee6	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/memory.asm

.810a					MemoryNew:
.810a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.810c	85 30		sta $30				sta 	codePtr
.810e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8110	85 31		sta $31				sta 	codePtr+1
.8112	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8114	92 30		sta ($30)			sta 	(codePtr)
.8116	60		rts				rts
.8117					MemoryAppend:
.8117	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8119	85 30		sta $30				sta 	codePtr
.811b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.811d	85 31		sta $31				sta 	codePtr+1
.811f					_MAFindEnd:
.811f	b2 30		lda ($30)			lda 	(codePtr)
.8121	f0 0d		beq $8130			beq 	_MAFoundEnd
.8123	18		clc				clc
.8124	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8126	65 30		adc $30				adc 	codePtr
.8128	85 30		sta $30				sta 	codePtr
.812a	90 02		bcc $812e			bcc 	_CREExit
.812c	e6 31		inc $31				inc 	codePtr+1
.812e					_CREExit:
.812e	80 ef		bra $811f			bra 	_MAFindEnd
.8130					_MAFoundEnd:
.8130	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.8133	c0 04		cpy #$04			cpy 	#4 							; blank line
.8135	f0 0e		beq $8145			beq 	_MANoLine
.8137	a9 00		lda #$00			lda 	#0 							; end of program
.8139	91 30		sta ($30),y			sta 	(codePtr),y
.813b					_MACopy:
.813b	88		dey				dey
.813c	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.813f	91 30		sta ($30),y			sta 	(codePtr),y
.8141	c0 00		cpy #$00			cpy 	#0
.8143	d0 f6		bne $813b			bne 	_MACopy
.8145					_MANoLine:
.8145	60		rts				rts
.8146					MemoryInline:
.8146	98		tya				tya 								; put address into stack,x
.8147	18		clc				clc
.8148	65 30		adc $30				adc 	codePtr
.814a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814d	a5 31		lda $31				lda 	codePtr+1
.814f	69 00		adc #$00			adc 	#0
.8151	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8154	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8157	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/variable.asm

.815b					VariableOpen:
.815b	60		rts				rts
.815c					VariableClose:
.815c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/assert.asm

.815d					AssertCommand:
.815d	a2 00		ldx #$00			ldx 	#0
.815f	20 6c 89	jsr $896c			jsr 	EvaluateInteger 			; the assert test
.8162	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; exit if result is non zero.
.8165	d0 05		bne $816c			bne 	_ACExit
.8167	a9 0a		lda #$0a		lda	#10
.8169	4c 1b 82	jmp $821b		jmp	ErrorHandler
.816c					_ACExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/call.asm

.816d					CallCommand:
.816d	a2 00		ldx #$00			ldx 	#0
.816f	20 81 89	jsr $8981			jsr 	Evaluate16BitInteger
.8172	ad 10 06	lda $0610			lda 	NSMantissa1
.8175	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8178	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/clear.asm

.817b					ClearCommand:
.817b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.817d	85 36		sta $36				sta 	0+zTemp0
.817f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8181	85 37		sta $37				sta 	1+zTemp0
.8183					_ClearZeroLoop:
.8183	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8185	f0 18		beq $819f			beq 	_ClearZeroEnd
.8187	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8189	a9 00		lda #$00			lda 	#0
.818b					_ClearOneVariable:
.818b	91 36		sta ($36),y			sta 	(zTemp0),y
.818d	c8		iny				iny
.818e	c0 08		cpy #$08			cpy 	#8
.8190	d0 f9		bne $818b			bne 	_ClearOneVariable
.8192	18		clc				clc 								; go to the next variable
.8193	b2 36		lda ($36)			lda 	(zTemp0)
.8195	65 36		adc $36				adc 	zTemp0
.8197	85 36		sta $36				sta 	zTemp0
.8199	90 e8		bcc $8183			bcc 	_ClearZeroLoop
.819b	e6 37		inc $37				inc 	zTemp0+1
.819d	80 e4		bra $8183			bra 	_ClearZeroLoop
.819f					_ClearZeroEnd:
.819f	18		clc				clc
.81a0	a5 36		lda $36				lda 	zTemp0
.81a2	69 01		adc #$01			adc 	#1
.81a4	8d 0c 07	sta $070c			sta 	lowMemPtr
.81a7	a5 37		lda $37				lda 	zTemp0+1
.81a9	69 00		adc #$00			adc 	#0
.81ab	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81ae	20 11 94	jsr $9411			jsr 	StringSystemInitialise
.81b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/end.asm

.81b2					EndCommand:
.81b2	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/new.asm

.81b5					NewCommand:
.81b5	20 0a 81	jsr $810a			jsr 	MemoryNew
.81b8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81bb	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear everything.
.81be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/rem.asm

.81bf					RemCommand:
.81bf	b1 30		lda ($30),y			lda 	(codePtr),y
.81c1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81c3	d0 06		bne $81cb			bne 	_RMExit
.81c5	c8		iny				iny
.81c6	98		tya				tya
.81c7	38		sec				sec
.81c8	71 30		adc ($30),y			adc 	(codePtr),y
.81ca	a8		tay				tay
.81cb					_RMExit:
.81cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/run.asm

.81cc					CommandRUN:
.81cc	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.81cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.81d1	85 30		sta $30				sta 	codePtr
.81d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.81d5	85 31		sta $31				sta 	codePtr+1
.81d7					RUNNewLine:
.81d7	b2 30		lda ($30)			lda 	(codePtr)
.81d9	f0 28		beq $8203			beq 	CRNoProgram         		; no then END.
.81db	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.81dd	9a		txs				txs
.81de					RUNCodePointerLine:
.81de	a0 02		ldy #$02			ldy 	#2 							; start of program
.81e0					_CRIncMainLoop:
.81e0	c8		iny				iny
.81e1					_CRMainLoop:
.81e1	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.81e4	b1 30		lda ($30),y			lda 	(codePtr),y
.81e6	10 10		bpl $81f8			bpl 	_CRNotKeyword
.81e8	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.81ea	b0 04		bcs $81f0			bcs 	_CRIsKeyword
.81ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.81ee	b0 0d		bcs $81fd			bcs		_CRSyntaxError
.81f0					_CRIsKeyword:
.81f0	c8		iny				iny 								; consume command
.81f1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81f2	aa		tax				tax 								; put in X for vector jump
.81f3	20 00 82	jsr $8200			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81f6	80 e9		bra $81e1			bra 	_CRMainLoop 				; and loop round
.81f8					_CRNotKeyword:
.81f8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81fa	f0 e4		beq $81e0			beq 	_CRIncMainLoop
>81fc	db						.byte 	$DB 						; causes a break in the emulator
.81fd					_CRSyntaxError:
.81fd	4c b3 94	jmp $94b3			jmp 	SyntaxError
.8200					_CRCallVector0:
.8200	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8203					CRNoProgram:
.8203	4c b2 81	jmp $81b2			jmp 	EndCommand
.8206					EOLCommand:
.8206	18		clc				clc
.8207	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8209	65 30		adc $30				adc 	codePtr
.820b	85 30		sta $30				sta 	codePtr
.820d	90 02		bcc $8211			bcc 	_CREExit
.820f	e6 31		inc $31				inc 	codePtr+1
.8211					_CREExit:
.8211	80 c4		bra $81d7			bra 	RunNewLine
.8213					Shift1Command:
.8213	b1 30		lda ($30),y			lda 	(codePtr),y
.8215	c8		iny				iny
.8216	0a		asl a				asl 	a
.8217	aa		tax				tax
.8218	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/charcheck.asm

.8ee9					CheckRightBracket:
.8ee9	b1 30		lda ($30),y			lda 	(codePtr),y
.8eeb	c8		iny				iny
.8eec	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8eee	d0 0f		bne $8eff			bne 	CNAFail
.8ef0	60		rts				rts
.8ef1					CheckComma:
.8ef1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef3	c8		iny				iny
.8ef4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8ef6	d0 07		bne $8eff			bne 	CNAFail
.8ef8	60		rts				rts
.8ef9					CheckNextA:
.8ef9	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8efb	d0 02		bne $8eff			bne 	CNAFail
.8efd	c8		iny				iny 								; skip character
.8efe	60		rts				rts 								; and exit
.8eff					CNAFail:
.8eff	4c b3 94	jmp $94b3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/errors.asm

.821b					ErrorHandler:
.821b	a8		tay				tay 								; find the error text
.821c	f0 42		beq $8260			beq 	_EHEnd
.821e	a2 00		ldx #$00			ldx 	#0
.8220					_EHFind:
.8220	88		dey				dey 								; found the error text ?
.8221	f0 0a		beq $822d			beq 	_EHFound
.8223					_EHFindZero:
.8223	bd cc 94	lda $94cc,x			lda 	ErrorText,x 				; find the next error
.8226	e8		inx				inx
.8227	c9 00		cmp #$00			cmp 	#0
.8229	d0 f8		bne $8223			bne 	_EHFindZero
.822b	80 f3		bra $8220			bra 	_EHFind
.822d					_EHFound:
.822d	bd cc 94	lda $94cc,x			lda 	ErrorText,x 				; print the message
.8230	20 a5 8e	jsr $8ea5			jsr 	EXTPrintCharacter
.8233	e8		inx				inx
.8234	bd cc 94	lda $94cc,x			lda 	ErrorText,x
.8237	d0 f4		bne $822d			bne 	_EHFound
.8239	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.823b	b1 30		lda ($30),y			lda 	(codePtr),y
.823d	d0 05		bne $8244			bne 	_EHAtMsg
.823f	c8		iny				iny
.8240	b1 30		lda ($30),y			lda 	(codePtr),y
.8242	f0 17		beq $825b			beq 	_EHCREnd
.8244					_EHAtMsg:
.8244	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8246	a9 63		lda #$63			lda 	#_AtMsg & $FF
.8248	20 6d 82	jsr $826d			jsr 	PrintStringXA
.824b	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	48		pha				pha
.8250	c8		iny				iny
.8251	b1 30		lda ($30),y			lda 	(codePtr),y
.8253	aa		tax				tax
.8254	68		pla				pla
.8255	20 eb 90	jsr $90eb			jsr 	ConvertInt16 				; convert XA to string
.8258	20 6d 82	jsr $826d			jsr 	PrintStringXA 				; and print it.
.825b					_EHCREnd:
.825b	a9 0d		lda #$0d			lda 	#13 						; new line
.825d	20 a5 8e	jsr $8ea5			jsr 	EXTPrintCharacter
.8260					_EHEnd:
.8260	4c 0c 80	jmp $800c			jmp 	WarmStart
>8263	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>826b	20 00
.826d					PrintStringXA:
.826d	86 37		stx $37				stx 	zTemp0+1
.826f	85 36		sta $36				sta 	zTemp0
.8271	a0 00		ldy #$00			ldy 	#0
.8273					_PSXALoop:
.8273	b1 36		lda ($36),y			lda 	(zTemp0),y
.8275	f0 06		beq $827d			beq 	_PSXAExit
.8277	20 a5 8e	jsr $8ea5			jsr 	EXTPrintCharacter
.827a	c8		iny				iny
.827b	80 f6		bra $8273			bra 	_PSXALoop
.827d					_PSXAExit:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/compare.asm

.8f02					UnaryTrue:
.8f02	fa		plx				plx
.8f03					ReturnTrue:
.8f03	a9 01		lda #$01			lda 	#1  						; set to 1
.8f05	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.8f08	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8f0a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f0d	60		rts				rts
.8f0e					UnaryFalse:
.8f0e	fa		plx				plx
.8f0f					ReturnFalse:
.8f0f	4c f5 89	jmp $89f5			jmp 	NSMSetZero 					; set it all to zero
.8f12					BinaryCompareEqual:
.8f12	fa		plx				plx
.8f13	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f16	c9 00		cmp #$00			cmp 	#0
.8f18	f0 e9		beq $8f03			beq 	ReturnTrue
.8f1a	80 f3		bra $8f0f			bra 	ReturnFalse
.8f1c					BinaryCompareLess:
.8f1c	fa		plx				plx
.8f1d	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f20	c9 ff		cmp #$ff			cmp 	#$FF
.8f22	f0 df		beq $8f03			beq 	ReturnTrue
.8f24	80 e9		bra $8f0f			bra 	ReturnFalse
.8f26					BinaryCompareGreater:
.8f26	fa		plx				plx
.8f27	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f2a	c9 01		cmp #$01			cmp 	#1
.8f2c	f0 d5		beq $8f03			beq 	ReturnTrue
.8f2e	80 df		bra $8f0f			bra 	ReturnFalse
.8f30					BinaryCompareNotEqual:
.8f30	fa		plx				plx
.8f31	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f34	c9 00		cmp #$00			cmp 	#0
.8f36	d0 cb		bne $8f03			bne 	ReturnTrue
.8f38	80 d5		bra $8f0f			bra 	ReturnFalse
.8f3a					BinaryCompareLessEqual:
.8f3a	fa		plx				plx
.8f3b	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f3e	c9 01		cmp #$01			cmp 	#1
.8f40	d0 c1		bne $8f03			bne 	ReturnTrue
.8f42	80 cb		bra $8f0f			bra 	ReturnFalse
.8f44					BinaryCompareGreaterEqual:
.8f44	fa		plx				plx
.8f45	20 4e 8f	jsr $8f4e			jsr 	CompareBaseCode
.8f48	c9 ff		cmp #$ff			cmp 	#$FF
.8f4a	d0 b7		bne $8f03			bne 	ReturnTrue
.8f4c	80 c1		bra $8f0f			bra 	ReturnFalse
.8f4e					CompareBaseCode:
.8f4e	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; make both values if references.
.8f51	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8f54	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f57	29 10		and #$10			and 	#NSTString
.8f59	d0 40		bne $8f9b			bne 	_CBCString
.8f5b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8f5e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f61	d0 3b		bne $8f9e			bne 	_CBCFloat
.8f63	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f66	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f69	29 08		and #$08			and 	#NSTFloat
.8f6b	d0 31		bne $8f9e			bne 	_CBCFloat
.8f6d	20 a1 8f	jsr $8fa1			jsr 	CompareFixMinusZero
.8f70	e8		inx				inx
.8f71	20 a1 8f	jsr $8fa1			jsr 	CompareFixMinusZero
.8f74	ca		dex				dex
.8f75	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8f78	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f7b	10 0b		bpl $8f88			bpl 	_CDCSameSign
.8f7d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8f80	30 16		bmi $8f98			bmi 	_CBCLess 					; return $FF
.8f82					_CBCGreater:
.8f82	a9 01		lda #$01			lda 	#1
.8f84	60		rts				rts
.8f85					_CBCEqual:
.8f85	a9 00		lda #$00			lda 	#0
.8f87	60		rts				rts
.8f88					_CDCSameSign:
.8f88	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; unsigned subtract
.8f8b	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; or the mantissa together
.8f8e	f0 f5		beq $8f85			beq 	_CBCEqual 					; -0 == 0
.8f90	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8f93	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8f96	10 ea		bpl $8f82			bpl 	_CBCGreater
.8f98					_CBCLess:
.8f98	a9 ff		lda #$ff			lda 	#$FF
.8f9a	60		rts				rts
.8f9b					_CBCString:
.8f9b	4c 7e 82	jmp $827e			jmp 	CompareStrings
.8f9e					_CBCFloat:
.8f9e	4c e7 91	jmp $91e7			jmp 	CompareFloat
.8fa1					CompareFixMinusZero:
.8fa1	20 25 8a	jsr $8a25			jsr 	NSMIsZero
.8fa4	d0 03		bne $8fa9			bne 	_CFXMZNotZero
.8fa6	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8fa9					_CFXMZNotZero:
.8fa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/divide.asm

.8faa					IntegerDivide:
.8faa	fa		plx				plx
.8fab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fae	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fb1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fb2	0a		asl a				asl 	a
.8fb3	10 05		bpl $8fba			bpl 	_NotRef
.8fb5	48		pha				pha
.8fb6	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fb9	68		pla				pla
.8fba					_NotRef:
.8fba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fbc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fbf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fc2	f0 03		beq $8fc7			beq 	_IntegerCode 				; if clear, then we have two integers
.8fc4	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.8fc7					_IntegerCode:
.8fc7	20 e9 8f	jsr $8fe9			jsr 	CheckDivideZero 			; do div zero check
.8fca	20 20 90	jsr $9020			jsr 	Int32Divide 				; do the division
.8fcd	20 dd 90	jsr $90dd			jsr 	CalculateSign 				; calculate result sign
.8fd0					NSMCopyPlusTwoToZero:
.8fd0	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8fd3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fd6	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8fd9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fdc	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8fdf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fe2	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8fe5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fe8	60		rts				rts
.8fe9					CheckDivideZero:
.8fe9	e8		inx				inx
.8fea	20 25 8a	jsr $8a25			jsr 	NSMIsZero
.8fed	f0 02		beq $8ff1			beq 	_CDVError
.8fef	ca		dex				dex
.8ff0	60		rts				rts
.8ff1					_CDVError:
.8ff1	a9 03		lda #$03		lda	#3
.8ff3	4c 1b 82	jmp $821b		jmp	ErrorHandler
.8ff6					IntegerModulus:
.8ff6	fa		plx				plx
.8ff7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ffa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ffd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ffe	0a		asl a				asl 	a
.8fff	10 05		bpl $9006			bpl 	_NotRef
.9001	48		pha				pha
.9002	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9005	68		pla				pla
.9006					_NotRef:
.9006	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9008	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.900b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.900e	f0 03		beq $9013			beq 	_IntegerCode 				; if clear, then we have two integers
.9010	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.9013					_IntegerCode:
.9013	20 e9 8f	jsr $8fe9			jsr 	CheckDivideZero 			; do div zero check
.9016	20 20 90	jsr $9020			jsr 	Int32Divide 				; do the division
.9019	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.901c	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.901f	60		rts				rts
.9020					Int32Divide:
.9020	48		pha				pha 								; save AXY
.9021	5a		phy				phy
.9022	20 cc 89	jsr $89cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9025	20 f1 89	jsr $89f1			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9028	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.902a					_I32DivideLoop:
.902a	e8		inx				inx
.902b	e8		inx				inx
.902c	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.902f	ca		dex				dex
.9030	ca		dex				dex
.9031	20 0b 8a	jsr $8a0b			jsr 	NSMRotateLeft
.9034	20 60 90	jsr $9060			jsr 	DivideCheckSubtract 		; check if subtract possible
.9037	90 03		bcc $903c			bcc 	_I32DivideNoCarryIn
.9039	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.903c					_I32DivideNoCarryIn:
.903c	88		dey				dey 								; loop round till division completed.
.903d	d0 eb		bne $902a			bne 	_I32DivideLoop
.903f	7a		ply				ply 								; restore AXY and exit
.9040	68		pla				pla
.9041	60		rts				rts
.9042					Int32ShiftDivide:
.9042	48		pha				pha 								; save AY
.9043	5a		phy				phy
.9044	e8		inx				inx 								; clear S[X+2]
.9045	e8		inx				inx
.9046	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.9049	ca		dex				dex
.904a	ca		dex				dex
.904b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.904d					_I32SDLoop:
.904d	20 60 90	jsr $9060			jsr 	DivideCheckSubtract 		; check if subtract possible
.9050	e8		inx				inx
.9051	e8		inx				inx
.9052	20 0b 8a	jsr $8a0b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9055	ca		dex				dex
.9056	ca		dex				dex
.9057	20 0b 8a	jsr $8a0b			jsr 	NSMRotateLeft
.905a	88		dey				dey 	 							; do 31 times
.905b	d0 f0		bne $904d			bne 	_I32SDLoop
.905d	7a		ply				ply 								; restore AY and exit
.905e	68		pla				pla
.905f	60		rts				rts
.9060					DivideCheckSubtract:
.9060	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9063	b0 04		bcs $9069			bcs 	_DCSExit 					; if carry set, then could do, exit
.9065	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; add it back in
.9068	18		clc				clc 								; and return False
.9069					_DCSExit:
.9069	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/multiply.asm

.906a					MulInteger:
.906a	fa		plx				plx
.906b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.906e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9071	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9072	0a		asl a				asl 	a
.9073	10 05		bpl $907a			bpl 	_NotRef
.9075	48		pha				pha
.9076	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9079	68		pla				pla
.907a					_NotRef:
.907a	0a		asl a				asl 	a 							; put MSB of type into A:7
.907b	30 0b		bmi $9088			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.907d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9080	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9083	f0 06		beq $908b			beq 	_IntegerCode 				; if clear, then we have two integers
.9085	4c be 92	jmp $92be			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9088					_StringData:
.9088	4c c7 94	jmp $94c7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.908b					_IntegerCode:
.908b	20 98 90	jsr $9098			jsr 	MultiplyShort
.908e	c9 00		cmp #$00			cmp 	#0
.9090	f0 05		beq $9097			beq 	_MIExit
.9092	a9 04		lda #$04		lda	#4
.9094	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9097					_MIExit:
.9097	60		rts				rts
.9098					MultiplyShort:
.9098	5a		phy				phy 								; save Y
.9099	20 cc 89	jsr $89cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.909c	20 f1 89	jsr $89f1			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.909f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.90a1					_I32MLoop:
.90a1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.90a4	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.90a7	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.90aa	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.90ad	f0 28		beq $90d7			beq 	_I32MExit 					; exit if zero
.90af	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.90b2	29 01		and #$01			and 	#1
.90b4	f0 0e		beq $90c4			beq 	_I32MNoAdd
.90b6	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.90b9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.90bc	10 06		bpl $90c4			bpl 	_I32MNoAdd
.90be					_I32ShiftRight:
.90be	20 18 8a	jsr $8a18			jsr 	NSMShiftRight 				; shift S[X] right
.90c1	c8		iny				iny 								; increment shift count
.90c2	80 0a		bra $90ce			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.90c4					_I32MNoAdd:
.90c4	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.90c7	70 f5		bvs $90be			bvs 	_I32ShiftRight 				; instead.
.90c9	e8		inx				inx
.90ca	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.90cd	ca		dex				dex
.90ce					_I32MShiftUpper:
.90ce	e8		inx				inx 								; shift S[X+2] right
.90cf	e8		inx				inx
.90d0	20 18 8a	jsr $8a18			jsr 	NSMShiftRight
.90d3	ca		dex				dex
.90d4	ca		dex				dex
.90d5	80 ca		bra $90a1			bra 	_I32MLoop 					; try again.
.90d7					_I32MExit:
.90d7	20 dd 90	jsr $90dd			jsr 	CalculateSign
.90da	98		tya				tya 								; shift in A
.90db	7a		ply				ply 								; restore Y and exit
.90dc	60		rts				rts
.90dd					CalculateSign:
.90dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.90e0	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.90e3	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.90e6	0a		asl a				asl 	a 							; shift bit 7 into carry
.90e7	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.90ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/scompare.asm

.827e					CompareStrings:
.827e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8281	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8284	29 10		and #$10			and 	#NSBIsString
.8286	f0 2c		beq $82b4			beq 	_CSTypeError
.8288	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.828b	85 36		sta $36				sta 	zTemp0
.828d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8290	85 37		sta $37				sta 	zTemp0+1
.8292	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8295	85 38		sta $38				sta 	zTemp1
.8297	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.829a	85 39		sta $39				sta 	zTemp1+1
.829c	5a		phy				phy 								; save Y so we can access strings
.829d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.829f					_CSLoop:
.829f	c8		iny				iny
.82a0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.82a2	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.82a4	d0 06		bne $82ac			bne 	_CSDifferent
.82a6	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.82a8	d0 f5		bne $829f			bne 	_CSLoop 					; still comparing
.82aa					_CSExit:
.82aa	7a		ply				ply 								; reached end, return zero in A from EOS
.82ab	60		rts				rts
.82ac					_CSDifferent:
.82ac	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.82ae	90 fa		bcc $82aa			bcc		_CSExit
.82b0	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.82b2	80 f6		bra $82aa			bra 	_CSExit
.82b4					_CSTypeError:
.82b4	4c bd 94	jmp $94bd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/shifts.asm

.82b7					ShiftLeft:
.82b7	38		sec				sec
.82b8	80 01		bra $82bb			bra 	ShiftMain
.82ba					ShiftRight:
.82ba	18		clc				clc
.82bb					ShiftMain:
.82bb	fa		plx				plx 								; restore X
.82bc	08		php				php 								; save direction
.82bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82c4	0a		asl a				asl 	a
.82c5	10 05		bpl $82cc			bpl 	_NotRef
.82c7	48		pha				pha
.82c8	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82cb	68		pla				pla
.82cc					_NotRef:
.82cc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82ce	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82d1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82d4	f0 03		beq $82d9			beq 	_IntegerCode 				; if clear, then we have two integers
.82d6	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.82d9					_IntegerCode:
.82d9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.82dc	29 e0		and #$e0			and 	#$E0
.82de	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.82e1	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.82e4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.82e7	d0 13		bne $82fc			bne 	_SMExit0 					; if >= 32 it will always return zero.
.82e9					_SMLoop:
.82e9	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.82ec	30 11		bmi $82ff			bmi 	_SMExit 					; exit if done.
.82ee	28		plp				plp 								; restore direcition setting
.82ef	08		php				php
.82f0	90 05		bcc $82f7			bcc 	_SMRight
.82f2	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; shift left if CS
.82f5	80 f2		bra $82e9			bra 	_SMLoop
.82f7					_SMRight:
.82f7	20 18 8a	jsr $8a18			jsr 	NSMShiftRight 				; shift right if CC
.82fa	80 ed		bra $82e9			bra 	_SMLoop
.82fc					_SMExit0:
.82fc	20 f5 89	jsr $89f5			jsr 	NSMSetZero 					; return zero.
.82ff					_SMExit:
.82ff	28		plp				plp 								; throw direction
.8300	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/simple.asm

.8301					AddTopTwoStack:
.8301	18		clc				clc
.8302	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8305	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8308	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.830b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.830e	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8311	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8314	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8317	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.831a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.831d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8320	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8323	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8326	60		rts				rts
.8327					SubTopTwoStack:
.8327	38		sec				sec
.8328	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.832b	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.832e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8331	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8334	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8337	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.833a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.833d	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8340	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8343	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8346	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8349	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.834c	60		rts				rts
.834d					AddInteger:
.834d	fa		plx				plx
.834e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8351	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8354	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8355	0a		asl a				asl 	a
.8356	10 05		bpl $835d			bpl 	_NotRef
.8358	48		pha				pha
.8359	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.835c	68		pla				pla
.835d					_NotRef:
.835d	0a		asl a				asl 	a 							; put MSB of type into A:7
.835e	30 0b		bmi $836b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8360	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8363	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8366	f0 06		beq $836e			beq 	_IntegerCode 				; if clear, then we have two integers
.8368	4c 46 91	jmp $9146			jmp 	FloatingPointAdd 							; otherwise at least one float.
.836b					_StringData:
.836b	4c c7 94	jmp $94c7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.836e					_IntegerCode:
.836e					AddCode:
.836e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8371	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8374	10 8b		bpl $8301			bpl 	AddTopTwoStack
.8376	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; do a physical subtraction
.8379	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.837c	10 09		bpl $8387			bpl 	_AddExit
.837e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8381	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8384	20 aa 89	jsr $89aa			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8387					_AddExit:
.8387	60		rts				rts
.8388					SubInteger:
.8388	fa		plx				plx
.8389	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.838c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.838f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8390	0a		asl a				asl 	a
.8391	10 05		bpl $8398			bpl 	_NotRef
.8393	48		pha				pha
.8394	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8397	68		pla				pla
.8398					_NotRef:
.8398	0a		asl a				asl 	a 							; put MSB of type into A:7
.8399	30 0b		bmi $83a6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.839b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.839e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a1	f0 06		beq $83a9			beq 	_IntegerCode 				; if clear, then we have two integers
.83a3	4c 4b 91	jmp $914b			jmp 	FloatingPointSub 							; otherwise at least one float.
.83a6					_StringData:
.83a6	4c c7 94	jmp $94c7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.83a9					_IntegerCode:
.83a9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.83ac	49 80		eor #$80			eor 	#$80
.83ae	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.83b1	80 bb		bra $836e			bra 	AddCode 					; and do the same code as add.
.83b3					AndInteger:
.83b3	fa		plx				plx
.83b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83b7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83bb	0a		asl a				asl 	a
.83bc	10 05		bpl $83c3			bpl 	_NotRef
.83be	48		pha				pha
.83bf	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83c2	68		pla				pla
.83c3					_NotRef:
.83c3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83c5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83c8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83cb	f0 03		beq $83d0			beq 	_IntegerCode 				; if clear, then we have two integers
.83cd	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.83d0					_IntegerCode:
.83d0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83d3	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.83d6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83d9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83dc	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.83df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83e2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83e5	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.83e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83eb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83ee	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.83f1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83f4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83f7	60		rts				rts
.83f8					OraInteger:
.83f8	fa		plx				plx
.83f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8400	0a		asl a				asl 	a
.8401	10 05		bpl $8408			bpl 	_NotRef
.8403	48		pha				pha
.8404	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8407	68		pla				pla
.8408					_NotRef:
.8408	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.840a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.840d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8410	f0 03		beq $8415			beq 	_IntegerCode 				; if clear, then we have two integers
.8412	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.8415					_IntegerCode:
.8415	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8418	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.841b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.841e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8421	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8424	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8427	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.842a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.842d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8430	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8433	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8436	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8439	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.843c	60		rts				rts
.843d					EorInteger:
.843d	fa		plx				plx
.843e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8441	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8444	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8445	0a		asl a				asl 	a
.8446	10 05		bpl $844d			bpl 	_NotRef
.8448	48		pha				pha
.8449	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.844c	68		pla				pla
.844d					_NotRef:
.844d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.844f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8452	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8455	f0 03		beq $845a			beq 	_IntegerCode 				; if clear, then we have two integers
.8457	4c bd 94	jmp $94bd			jmp 	TypeError 					; anything else, type mismatch.
.845a					_IntegerCode:
.845a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.845d	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8460	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8463	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8466	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8469	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.846c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.846f	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8472	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8475	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8478	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.847b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.847e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/tostring.asm

.90eb					ConvertInt16:
.90eb	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.90ee	8e 10 06	stx $0610			stx 	NSMantissa1
.90f1	9c 18 06	stz $0618			stz 	NSMantissa2
.90f4	9c 20 06	stz $0620			stz 	NSMantissa3
.90f7	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.90fa	a2 00		ldx #$00			ldx 	#0 							; stack level
.90fc	a9 0a		lda #$0a			lda 	#10 						; base
.90fe	80 00		bra $9100			bra 	ConvertInt32
.9100					ConvertInt32:
.9100	5a		phy				phy
.9101	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9103	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9106	10 08		bpl $9110			bpl 	_CI32NotNeg
.9108	48		pha				pha
.9109	a9 2d		lda #$2d			lda 	#'-'
.910b	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.910e	c8		iny				iny
.910f	68		pla				pla
.9110					_CI32NotNeg:
.9110	20 1e 91	jsr $911e			jsr 	_CI32DivideConvert 			; recursive conversion
.9113	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9115	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9118	7a		ply				ply
.9119	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.911b	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.911d	60		rts				rts
.911e					_CI32DivideConvert:
.911e	e8		inx				inx 								; write to next slot up
.911f	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.9122	ca		dex				dex
.9123	20 20 90	jsr $9020			jsr 	Int32Divide 				; divide
.9126	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9129	48		pha				pha
.912a	20 d0 8f	jsr $8fd0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.912d	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; is it zero ?
.9130	f0 06		beq $9138			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9132	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9135	20 1e 91	jsr $911e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9138					_CI32NoRecurse:
.9138	68		pla				pla 								; remainder
.9139	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.913b	90 02		bcc $913f			bcc 	_CI32NotHex
.913d	69 26		adc #$26			adc 	#6+32
.913f					_CI32NotHex:
.913f	69 30		adc #$30			adc 	#48
.9141	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9144	c8		iny				iny
.9145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/expression.asm


;******  Processing file: ./core/expressions/../../generated/precedence.dat

.8482					PrecedenceLevel:
>8482	04					.byte	 4	; $00 <<
>8483	02					.byte	 2	; $01 <=
>8484	02					.byte	 2	; $02 <>
>8485	00					.byte	 0	; $03 !!3
>8486	00					.byte	 0	; $04 ><
>8487	02					.byte	 2	; $05 >=
>8488	04					.byte	 4	; $06 >>
>8489	00					.byte	 0	; $07 !!7
>848a	00					.byte	 0	; $08 !!8
>848b	00					.byte	 0	; $09 !!9
>848c	00					.byte	 0	; $0a !!10
>848d	00					.byte	 0	; $0b !!11
>848e	00					.byte	 0	; $0c !!12
>848f	00					.byte	 0	; $0d !!13
>8490	00					.byte	 0	; $0e !!14
>8491	00					.byte	 0	; $0f !!15
>8492	00					.byte	 0	; $10 @
>8493	00					.byte	 0	; $11 !!17
>8494	00					.byte	 0	; $12 !!18
>8495	00					.byte	 0	; $13 [
>8496	04					.byte	 4	; $14 \
>8497	00					.byte	 0	; $15 ]
>8498	01					.byte	 1	; $16 ^
>8499	00					.byte	 0	; $17 _
>849a	00					.byte	 0	; $18 `
>849b	00					.byte	 0	; $19 !!25
>849c	00					.byte	 0	; $1a !!26
>849d	00					.byte	 0	; $1b {
>849e	01					.byte	 1	; $1c |
>849f	00					.byte	 0	; $1d }
>84a0	00					.byte	 0	; $1e ~
>84a1	00					.byte	 0	; $1f [7m<7F>[m
>84a2	00					.byte	 0	; $20
>84a3	05					.byte	 5	; $21 !
>84a4	00					.byte	 0	; $22 "
>84a5	00					.byte	 0	; $23 #
>84a6	05					.byte	 5	; $24 $
>84a7	04					.byte	 4	; $25 %
>84a8	01					.byte	 1	; $26 &
>84a9	00					.byte	 0	; $27 '
>84aa	00					.byte	 0	; $28 (
>84ab	00					.byte	 0	; $29 )
>84ac	04					.byte	 4	; $2a *
>84ad	03					.byte	 3	; $2b +
>84ae	00					.byte	 0	; $2c ,
>84af	03					.byte	 3	; $2d -
>84b0	00					.byte	 0	; $2e .
>84b1	04					.byte	 4	; $2f /
>84b2	00					.byte	 0	; $30 0
>84b3	00					.byte	 0	; $31 1
>84b4	00					.byte	 0	; $32 2
>84b5	00					.byte	 0	; $33 3
>84b6	00					.byte	 0	; $34 4
>84b7	00					.byte	 0	; $35 5
>84b8	00					.byte	 0	; $36 6
>84b9	00					.byte	 0	; $37 7
>84ba	00					.byte	 0	; $38 8
>84bb	00					.byte	 0	; $39 9
>84bc	00					.byte	 0	; $3a :
>84bd	00					.byte	 0	; $3b ;
>84be	02					.byte	 2	; $3c <
>84bf	02					.byte	 2	; $3d =
>84c0	02					.byte	 2	; $3e >
>84c1	05					.byte	 5	; $3f ?

;******  Return to file: ./core/expressions/expression.asm

.84c2					EvaluateExpressionAt0:
.84c2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.84c4					EvaluateExpression:
.84c4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.84c6					EvaluateExpressionAtPrecedence:
.84c6	48		pha				pha 								; save precedence level
.84c7	20 c2 86	jsr $86c2			jsr 	EvaluateTerm 				; evaluate term into level X.
.84ca	68		pla				pla 								; restore precedence level.
.84cb					_EXPRLoop:
.84cb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.84cd	b1 30		lda ($30),y			lda 	(codePtr),y
.84cf	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.84d1	b0 25		bcs $84f8			bcs 	_EXPRExit
.84d3	da		phx				phx 								; read the operator precedence
.84d4	aa		tax				tax
.84d5	bd 82 84	lda $8482,x			lda 	PrecedenceLevel,x
.84d8	fa		plx				plx
.84d9	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.84db	f0 1b		beq $84f8			beq 	_EXPRExit
.84dd	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.84df	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.84e1	c5 37		cmp $37				cmp 	zTemp0+1
.84e3	b0 13		bcs $84f8			bcs		_EXPRExit 					; if current >= operator exit
.84e5	48		pha				pha 								; save current precedence.
.84e6	b1 30		lda ($30),y			lda 	(codePtr),y
.84e8	c8		iny				iny
.84e9	48		pha				pha
.84ea	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.84ec	e8		inx				inx 								; work out the right hand side.
.84ed	20 c6 84	jsr $84c6			jsr 	EvaluateExpressionAtPrecedence
.84f0	ca		dex				dex
.84f1	68		pla				pla 								; get operator, call the code.
.84f2	20 fb 84	jsr $84fb			jsr 	_EXPRCaller
.84f5	68		pla				pla 								; restore precedence level
.84f6	80 d3		bra $84cb			bra 	_EXPRLoop 					; and go round.
.84f8					_EXPRExit:
.84f8	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.84fa	60		rts				rts
.84fb					_EXPRCaller:
.84fb	da		phx				phx 								; save on stack, first thing is to restore it
.84fc	0a		asl a				asl 	a 							; double so can use vectors into X
.84fd	aa		tax				tax
.84fe	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/addsub.asm

.9146					FloatingPointAdd:
.9146	20 e7 92	jsr $92e7			jsr 	FloatPrepare 				; prepare for floats
.9149	80 0b		bra $9156			bra 	FloatAdd
.914b					FloatingPointSub:
.914b	20 e7 92	jsr $92e7			jsr 	FloatPrepare 				; prepare for floats
.914e					FloatSubtract:
.914e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9151	49 80		eor #$80			eor 	#$80
.9153	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9156					FloatAdd:
.9156	48		pha				pha
.9157	5a		phy				phy
.9158	20 f8 92	jsr $92f8			jsr 	NSNormalise 				; normalise S[X]
.915b	f0 54		beq $91b1			beq 	_FAReturn1
.915d	e8		inx				inx 								; normalise S[X+1]
.915e	20 f8 92	jsr $92f8			jsr 	NSNormalise
.9161	ca		dex				dex
.9162	c9 00		cmp #$00			cmp 	#0
.9164	f0 6f		beq $91d5			beq 	_FAExit 					; if so, just return A
.9166	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9169	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.916c	f0 1b		beq $9189			beq 	_FAExponentsEqual
.916e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9171	a8		tay				tay
.9172	38		sec				sec 								; do a signed comparison of the exponents.
.9173	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9176	50 02		bvc $917a			bvc 	_FANoSignedChange
.9178	49 80		eor #$80			eor 	#$80
.917a					_FANoSignedChange:
.917a	29 80		and #$80			and 	#$80
.917c	10 03		bpl $9181			bpl 	_FAHaveMax
.917e	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9181					_FAHaveMax:
.9181	20 d8 91	jsr $91d8			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9184	e8		inx				inx
.9185	20 d8 91	jsr $91d8			jsr 	_FAShiftToExponent
.9188	ca		dex				dex
.9189					_FAExponentsEqual:
.9189	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.918c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.918f	30 10		bmi $91a1			bmi 	_FADifferentSigns
.9191	20 01 83	jsr $8301			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9194	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9197	10 3c		bpl $91d5			bpl 	_FAExit 					; if no, we are done.
.9199	20 18 8a	jsr $8a18			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.919c	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.919f	80 34		bra $91d5			bra 	_FAExit
.91a1					_FADifferentSigns:
.91a1	20 27 83	jsr $8327			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.91a4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.91a7	10 2c		bpl $91d5			bpl 	_FAExit 					; if no, we are done.
.91a9	20 a1 89	jsr $89a1			jsr 	NSMNegate 					; netate result
.91ac	20 aa 89	jsr $89aa			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.91af	80 24		bra $91d5			bra 	_FAExit
.91b1					_FAReturn1:
.91b1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91b4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91b7	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91ba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91bd	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.91c0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91c3	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.91c6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91c9	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.91cc	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91cf	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.91d2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91d5					_FAExit:
.91d5	7a		ply				ply
.91d6	68		pla				pla
.91d7	60		rts				rts
.91d8					_FAShiftToExponent:
.91d8					_FAShiftToExponent2:
.91d8	98		tya				tya 								; compare Y to exponent
.91d9	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.91dc	f0 08		beq $91e6			beq 	_FASEExit 					; exit if so.
.91de	20 18 8a	jsr $8a18			jsr 	NSMShiftRight	 			; shift the mantissa right
.91e1	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.91e4	80 f2		bra $91d8			bra 	_FAShiftToExponent2
.91e6					_FASEExit:
.91e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/compare.asm

.91e7					CompareFloat:
.91e7	20 4e 91	jsr $914e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.91ea	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.91ed	29 fc		and #$fc			and 	#$FC
.91ef	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.91f2	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.91f5	f0 09		beq $9200			beq 	_FCExit 					; zero, so approximately identical
.91f7	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.91f9	3c 00 06	bit $0600,x			bit 	NSStatus,x
.91fc	10 02		bpl $9200			bpl 	_FCExit
.91fe					_FCNegative:
.91fe	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9200					_FCExit:
.9200	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/divide.asm

.9201					FDivideCommand:
.9201	fa		plx				plx	 								; restore stack position
.9202	20 e7 92	jsr $92e7			jsr 	FloatPrepare 				; prepare for floats
.9205					FloatDivide:
.9205	48		pha				pha
.9206	e8		inx				inx
.9207	20 f8 92	jsr $92f8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.920a	ca		dex				dex
.920b	c9 00		cmp #$00			cmp 	#0
.920d	f0 20		beq $922f			beq 	_FDZero
.920f	20 f8 92	jsr $92f8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9212	f0 19		beq $922d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9214	20 42 90	jsr $9042			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9217	20 d0 8f	jsr $8fd0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.921a	20 f8 92	jsr $92f8			jsr		NSNormalise 				; renormalise
.921d	20 dd 90	jsr $90dd			jsr 	CalculateSign 				; calculate result sign
.9220	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9223	38		sec				sec
.9224	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9227	38		sec				sec
.9228	e9 1e		sbc #$1e			sbc 	#30
.922a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.922d					_FDExit:
.922d	68		pla				pla
.922e	60		rts				rts
.922f					_FDZero:
.922f	a9 03		lda #$03		lda	#3
.9231	4c 1b 82	jmp $821b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/fractional.asm

.9234					FloatFractionalPart:
.9234	5a		phy				phy
.9235	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9238	29 7f		and #$7f			and 	#$7F
.923a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.923d	20 f8 92	jsr $92f8			jsr 	NSNormalise
.9240	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9243	38		sec				sec
.9244	e9 e0		sbc #$e0			sbc 	#$E0
.9246	90 31		bcc $9279			bcc 	_FFPExit 					; already fractional
.9248	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.924a	b0 2a		bcs $9276			bcs 	_FFPZero
.924c	a8		tay				tay 								; put count to do in Y
.924d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9250	20 7b 92	jsr $927b			jsr 	_FFPPartial
.9253	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9256	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9259	20 7b 92	jsr $927b			jsr 	_FFPPartial
.925c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.925f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9262	20 7b 92	jsr $927b			jsr 	_FFPPartial
.9265	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9268	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.926b	20 7b 92	jsr $927b			jsr 	_FFPPartial
.926e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9271	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; zeroed check.
.9274	d0 03		bne $9279			bne 	_FFPExit
.9276					_FFPZero:
.9276	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.9279					_FFPExit:
.9279	7a		ply				ply
.927a	60		rts				rts
.927b					_FFPPartial:
.927b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.927d	f0 17		beq $9296			beq 	_FFFPPExit
.927f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9281	b0 0c		bcs $928f			bcs 	_FFFPPWholeByte
.9283	5a		phy				phy
.9284					_FFFPPLeft:
.9284	0a		asl a				asl 	a
.9285	88		dey				dey
.9286	d0 fc		bne $9284			bne 	_FFFPPLeft
.9288	7a		ply				ply
.9289					_FFFPPRight:
.9289	4a		lsr a				lsr 	a
.928a	88		dey				dey
.928b	d0 fc		bne $9289			bne 	_FFFPPRight
.928d	80 07		bra $9296			bra 	_FFFPPExit
.928f					_FFFPPWholeByte:
.928f	98		tya				tya 								; subtract 8 from count
.9290	38		sec				sec
.9291	e9 08		sbc #$08			sbc 	#8
.9293	a8		tay				tay
.9294	a9 00		lda #$00			lda 	#0 							; and clear all
.9296					_FFFPPExit:
.9296	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/integer.asm

.9297					FloatIntegerPart:
.9297	48		pha				pha
.9298	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.929b	f0 1f		beq $92bc			beq 	_FIPExit 					; if so do nothing
.929d	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; is it zero ?
.92a0	f0 17		beq $92b9			beq 	_FIPZero 					; if so return zero.
.92a2	20 f8 92	jsr $92f8			jsr 	NSNormalise 				; normalise
.92a5	f0 12		beq $92b9			beq 	_FIPZero 					; normalised to zero, exit zero
.92a7					_FIPShift:
.92a7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.92aa	10 08		bpl $92b4			bpl 	_FIPCheckZero
.92ac	20 18 8a	jsr $8a18			jsr 	NSMShiftRight 				; shift mantissa right
.92af	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.92b2	80 f3		bra $92a7			bra 	_FIPShift
.92b4					_FIPCheckZero:
.92b4	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; avoid -0 problem
.92b7	d0 03		bne $92bc			bne 	_FIPExit 					; set to zero if mantissa zero.
.92b9					_FIPZero:
.92b9	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.92bc					_FIPExit:
.92bc	68		pla				pla
.92bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/multiply.asm

.92be					FloatingPointMultiply:
.92be	20 e7 92	jsr $92e7			jsr 	FloatPrepare 				; prepare for floats
.92c1					FloatMultiply:
.92c1	48		pha				pha
.92c2	20 f8 92	jsr $92f8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.92c5	f0 1b		beq $92e2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.92c7	e8		inx				inx
.92c8	20 f8 92	jsr $92f8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.92cb	ca		dex				dex
.92cc	c9 00		cmp #$00			cmp 	#0
.92ce	f0 0f		beq $92df			beq 	_FDSetZero
.92d0	20 98 90	jsr $9098			jsr 	MultiplyShort 				; calculate the result.
.92d3	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.92d6	18		clc				clc
.92d7	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.92da	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92dd	80 03		bra $92e2			bra 	_FDExit
.92df					_FDSetZero:
.92df	20 f5 89	jsr $89f5			jsr 	NSMSetZero 					; return 0
.92e2					_FDExit:
.92e2	20 f8 92	jsr $92f8			jsr 	NSNormalise 				; normalise the result
.92e5	68		pla				pla
.92e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/utility.asm

.92e7					FloatPrepare:
.92e7	20 01 85	jsr $8501			jsr 	DereferenceTopTwo 			; dereference the top two values
.92ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.92ed	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92f0	29 10		and #$10			and 	#NSBIsString
.92f2	d0 01		bne $92f5			bne 	_FDType
.92f4	60		rts				rts
.92f5					_FDType:
.92f5	4c bd 94	jmp $94bd			jmp 	TypeError
.92f8					NSNormalise:
.92f8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.92fb	29 80		and #$80			and 	#$80
.92fd	09 08		ora #$08			ora 	#NSTFloat
.92ff	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9302	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; if zero exit
.9305	d0 09		bne $9310			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9307	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.930a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.930d	a9 00		lda #$00			lda 	#0 							; set Z flag
.930f	60		rts				rts
.9310					_NSNormaliseOptimise:
.9310	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9313	d0 22		bne $9337			bne 	_NSNormaliseLoop
.9315	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9318	30 1d		bmi $9337			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.931a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.931d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9320	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9323	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9326	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9329	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.932c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.932f	38		sec				sec
.9330	e9 08		sbc #$08			sbc 	#8
.9332	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9335	80 d9		bra $9310			bra 	_NSNormaliseOptimise
.9337					_NSNormaliseLoop:
.9337	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.933a	70 08		bvs $9344			bvs 	_NSNExit 					; exit if so with Z flag clear
.933c	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; shift mantissa left
.933f	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9342	80 f3		bra $9337			bra 	_NSNormaliseLoop
.9344					_NSNExit:
.9344	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9346	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/dereference.asm

.8501					DereferenceTopTwo:
.8501	e8		inx				inx
.8502	20 06 85	jsr $8506			jsr 	Dereference 				; deref x+1
.8505	ca		dex				dex  								; falls through to deref x
.8506					Dereference:
.8506	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8509	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.850b	f0 57		beq $8564			beq 	_DRFExit 					; not a reference
.850d	5a		phy				phy
.850e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8511	85 36		sta $36				sta 	zTemp0
.8513	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8516	85 37		sta $37				sta 	zTemp0+1
.8518	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.851b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.851d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8520	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8523	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8525	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8527	f0 0f		beq $8538			beq 	_DRFDereferenceTwo
.8529	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.852b	f0 39		beq $8566			beq 	_DRFFull
.852d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8530	29 03		and #$03			and 	#3
.8532	f0 32		beq $8566			beq 	_DRFFull 					; the whole word
.8534	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8536	f0 07		beq $853f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8538					_DRFDereferenceTwo:
.8538	a0 01		ldy #$01			ldy 	#1
.853a	b1 36		lda ($36),y			lda 	(zTemp0),y
.853c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.853f					_DRFClear23:
.853f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8542	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8545	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8548	29 18		and #$18			and 	#NSBTypeMask
.854a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.854f	d0 12		bne $8563			bne 	_DRFNotString
.8551	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8554	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8557	d0 0a		bne $8563			bne 	_DRFNotString
.8559	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.855b	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.855e	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.8560	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8563					_DRFNotString
.8563	7a		ply				ply 								; restore Y and exit
.8564					_DRFExit:
.8564	60		rts				rts
.8565					_DRFNullString:
>8565	00						.byte 	0
.8566					_DRFFull:
.8566	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8568	b1 36		lda ($36),y			lda 	(zTemp0),y
.856a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856d	c8		iny				iny
.856e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8570	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8573	c8		iny				iny
.8574	b1 36		lda ($36),y			lda 	(zTemp0),y
.8576	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8579	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.857c	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.857f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8581	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8584	f0 06		beq $858c			beq 	_DRFNoExponent
.8586	c8		iny				iny 								; if not, read the exponent as well.
.8587	b1 36		lda ($36),y			lda 	(zTemp0),y
.8589	9d 28 06	sta $0628,x			sta 	NSExponent,x
.858c					_DRFNoExponent:
.858c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.858f	10 0d		bpl $859e			bpl 	_DRFExit2 					; if not, then exit.
.8591	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8593	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8596	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8599	09 80		ora #$80			ora 	#NSBIsNegative
.859b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.859e					_DRFExit2:
.859e	7a		ply				ply
.859f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.85a0					EncodeNumberStart:
.85a0	38		sec				sec
.85a1	80 01		bra $85a4			bra 	EncodeNumberContinue+1
.85a3					EncodeNumberContinue:
.85a3	18		clc				clc
.85a4					EncodeNumber:
.85a4	08		php				php 								; save reset.
.85a5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.85a7	f0 12		beq $85bb			beq 	_ENIsOkay
.85a9	c9 30		cmp #$30			cmp 	#"0"
.85ab	90 04		bcc $85b1			bcc 	_ENBadNumber
.85ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.85af	90 0a		bcc $85bb			bcc 	_ENIsOkay
.85b1					_ENBadNumber:
.85b1	28		plp				plp 								; throw saved reset
.85b2	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.85b5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85b7	f0 7e		beq $8637			beq 	_ENConstructFinal
.85b9					_ENFail:
.85b9	18		clc				clc 								; not allowed
.85ba	60		rts				rts
.85bb					_ENIsOkay:
.85bb	28		plp				plp 								; are we restarting
.85bc	90 15		bcc $85d3			bcc 	_ENNoRestart
.85be					_ENStartEncode:
.85be	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.85c0	f0 0c		beq $85ce			beq 	_ENFirstDP
.85c2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.85c4	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.85c7	a9 01		lda #$01			lda 	#ESTA_Low
.85c9					_ENExitChange:
.85c9	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.85cc	38		sec				sec
.85cd	60		rts				rts
.85ce					_ENFirstDP:
.85ce	20 f5 89	jsr $89f5			jsr 	NSMSetZero 					; clear integer part
.85d1	80 3f		bra $8612			bra 	_ESTASwitchFloat			; go straight to float and exi
.85d3					_ENNoRestart:
.85d3	48		pha				pha 								; save on stack.
.85d4	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.85d7	c9 01		cmp #$01			cmp 	#ESTA_Low
.85d9	f0 09		beq $85e4			beq  	_ESTALowState
.85db	c9 02		cmp #$02			cmp 	#ESTA_High
.85dd	f0 29		beq $8608			beq 	_ESTAHighState
.85df	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.85e1	f0 3b		beq $861e			beq 	_ESTADecimalState
>85e3	db						.byte 	$DB 						; causes a break in the emulator
.85e4					_ESTALowState:
.85e4	68		pla				pla 								; get value back
.85e5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.85e7	f0 29		beq $8612			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.85e9	29 0f		and #$0f			and 	#15 						; make digit
.85eb	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.85ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.85f1	0a		asl a				asl 	a
.85f2	0a		asl a				asl 	a
.85f3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85f6	0a		asl a				asl 	a
.85f7	6d 06 07	adc $0706			adc 	DigitTemp
.85fa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85fd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.85ff	90 05		bcc $8606			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8601	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8603	8d 05 07	sta $0705			sta 	EncodeState
.8606					_ESTANoSwitch:
.8606	38		sec				sec
.8607	60		rts				rts
.8608					_ESTAHighState:
.8608	68		pla				pla 								; get value back
.8609	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.860b	f0 05		beq $8612			beq 	_ESTASwitchFloat
.860d	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8610	38		sec				sec
.8611	60		rts				rts
.8612					_ESTASwitchFloat:
.8612	9c 07 07	stz $0707			stz 	DecimalCount
.8615	e8		inx				inx 								; zero the decimal additive.
.8616	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.8619	ca		dex				dex
.861a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.861c	80 ab		bra $85c9			bra 	_ENExitChange
.861e					_ESTADecimalState:
.861e	68		pla				pla 								; digit.
.861f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8621	f0 96		beq $85b9			beq 	_ENFail
.8623	e8		inx				inx 								; put digit into fractional part of X+1
.8624	20 71 86	jsr $8671			jsr 	ESTAShiftDigitIntoMantissa
.8627	ca		dex				dex
.8628	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.862b	ad 07 07	lda $0707			lda 	DecimalCount
.862e	c9 0b		cmp #$0b			cmp 	#11
.8630	f0 02		beq $8634			beq 	_ESTADSFail
.8632	38		sec				sec
.8633	60		rts				rts
.8634					_ESTADSFail:
.8634	4c b8 94	jmp $94b8			jmp 	RangeError
.8637					_ENConstructFinal:
.8637	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.863a	f0 33		beq $866f			beq 	_ENCFExit 					; no decimals
.863c	5a		phy				phy
.863d	0a		asl a				asl 	a 							; x 4 and CLC
.863e	0a		asl a				asl 	a
.863f	6d 07 07	adc $0707			adc 	DecimalCount
.8642	a8		tay				tay
.8643	b9 77 94	lda $9477,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8646	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8649	b9 78 94	lda $9478,y			lda 	DecimalScalarTable-5+1,y
.864c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.864f	b9 79 94	lda $9479,y			lda 	DecimalScalarTable-5+2,y
.8652	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8655	b9 7a 94	lda $947a,y			lda 	DecimalScalarTable-5+3,y
.8658	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.865b	b9 7b 94	lda $947b,y			lda 	DecimalScalarTable-5+4,y
.865e	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8661	a9 08		lda #$08			lda 	#NSTFloat
.8663	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8666	7a		ply				ply
.8667	e8		inx				inx 								; multiply decimal const by decimal scalar
.8668	20 c1 92	jsr $92c1			jsr 	FloatMultiply
.866b	ca		dex				dex
.866c	20 56 91	jsr $9156			jsr 	FloatAdd 					; add to integer part.
.866f					_ENCFExit:
.866f	18		clc				clc 								; reject the digit.
.8670	60		rts				rts
.8671					ESTAShiftDigitIntoMantissa:
.8671	29 0f		and #$0f			and 	#15 						; save digit
.8673	48		pha				pha
.8674	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8677	48		pha				pha
.8678	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.867b	48		pha				pha
.867c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.867f	48		pha				pha
.8680	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8683	48		pha				pha
.8684	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 2
.8687	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 4
.868a	18		clc				clc 								; pop mantissa and add
.868b	68		pla				pla
.868c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.868f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8692	68		pla				pla
.8693	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8696	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8699	68		pla				pla
.869a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.869d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86a0	68		pla				pla
.86a1	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.86a4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.86a7	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 10
.86aa	68		pla				pla 								; add digit
.86ab	18		clc				clc
.86ac	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.86af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b2	90 0d		bcc $86c1			bcc 	_ESTASDExit
.86b4	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.86b7	d0 08		bne $86c1			bne 	_ESTASDExit
.86b9	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.86bc	d0 03		bne $86c1			bne 	_ESTASDExit
.86be	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.86c1					_ESTASDExit:
.86c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/term.asm

.86c2					EvaluateTerm:
.86c2	b1 30		lda ($30),y			lda 	(codePtr),y
.86c4	30 18		bmi $86de			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.86c6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.86c8	b0 6f		bcs $8739			bcs 	_ETVariable
.86ca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.86cc	90 6f		bcc $873d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.86ce	c9 3a		cmp #$3a			cmp 	#'9'+1
.86d0	b0 6b		bcs $873d			bcs 	_ETPuncUnary
.86d2	20 a0 85	jsr $85a0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.86d5					_ETNumber:
.86d5	c8		iny				iny 								; keep encoding until we have the numbers
.86d6	b1 30		lda ($30),y			lda 	(codePtr),y
.86d8	20 a3 85	jsr $85a3			jsr 	EncodeNumberContinue
.86db	b0 f8		bcs $86d5			bcs 	_ETNumber 					; go back if accepted.
.86dd	60		rts				rts
.86de					_ETCheckUnary:
.86de	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.86e0	f0 41		beq $8723			beq 	_ETString
.86e2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.86e4	f0 12		beq $86f8			beq 	_ETHexConstant
.86e6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.86e8	90 0b		bcc $86f5			bcc 	_ETSyntaxError
.86ea	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.86ec	b0 07		bcs $86f5			bcs 	_ETSyntaxError
.86ee	da		phx				phx 								; push X on the stack
.86ef	0a		asl a				asl 	a 							; put vector x 2 into X
.86f0	aa		tax				tax
.86f1	c8		iny				iny 								; consume unary function token
.86f2	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.86f5					_ETSyntaxError:
.86f5	4c b3 94	jmp $94b3			jmp 	SyntaxError
.86f8					_ETHexConstant:
.86f8	c8		iny				iny 								; skip #
.86f9	c8		iny				iny 								; skip count
.86fa	20 f5 89	jsr $89f5			jsr 	NSMSetZero 					; clear result
.86fd					_ETHLoop:
.86fd	b1 30		lda ($30),y			lda 	(codePtr),y
.86ff	c8		iny				iny 								; and consume
.8700	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8702	f0 1e		beq $8722			beq 	_ETHExit
.8704	48		pha				pha 								; save on stack.
.8705	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 2
.8708	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 4
.870b	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 8
.870e	20 0a 8a	jsr $8a0a			jsr 	NSMShiftLeft 				; x 16
.8711	68		pla				pla 								; ASCII
.8712	c9 41		cmp #$41			cmp 	#'A'
.8714	90 02		bcc $8718			bcc 	_ETHNotChar
.8716	e9 07		sbc #$07			sbc 	#7
.8718					_ETHNotChar:
.8718	29 0f		and #$0f			and 	#15 						; digit now
.871a	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.871d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8720	80 db		bra $86fd			bra 	_ETHLoop 					; go round.
.8722					_ETHExit:
.8722	60		rts				rts
.8723					_ETString:
.8723	c8		iny				iny 								; look at length
.8724	b1 30		lda ($30),y			lda 	(codePtr),y
.8726	48		pha				pha
.8727	c8		iny				iny 								; first character
.8728	20 46 81	jsr $8146			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.872b	68		pla				pla 								; restore count and save
.872c	85 36		sta $36				sta 	zTemp0
.872e	98		tya				tya 								; add length to Y to skip it.
.872f	18		clc				clc
.8730	65 36		adc $36				adc 	zTemp0
.8732	a8		tay				tay
.8733	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8735	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8738	60		rts				rts
.8739					_ETVariable:
>8739	db						.byte 	$DB 						; causes a break in the emulator
.873a	4c ff ff	jmp $ffff			jmp 	$FFFF
.873d					_ETPuncUnary:
.873d	c8		iny				iny 								; consume the unary character
.873e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8740	f0 31		beq $8773			beq 	_ETUnaryNegate
.8742	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8744	f0 3d		beq $8783			beq 	_ETDereference
.8746	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8748	f0 58		beq $87a2			beq 	_ETParenthesis
.874a	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.874c	f0 43		beq $8791			beq 	_ETStringReference
.874e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8750	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8752	f0 06		beq $875a			beq 	_ETIndirection
.8754	e6 36		inc $36				inc 	zTemp0
.8756	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8758	d0 9b		bne $86f5			bne 	_ETSyntaxError
.875a					_ETIndirection:
.875a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.875c	1a		inc a				inc 	a
.875d	48		pha				pha
.875e	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8761	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8764	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8767	d0 07		bne $8770			bne 	_ETTypeMismatch
.8769	68		pla				pla 								; indirection 1-2
.876a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.876c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.876f	60		rts				rts
.8770					_ETTypeMismatch:
.8770	4c bd 94	jmp $94bd			jmp 	TypeError
.8773					_ETUnaryNegate:
.8773	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8776	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.877c	29 10		and #$10			and 	#NSTString
.877e	d0 f0		bne $8770			bne 	_ETTypeMismatch
.8780	4c a1 89	jmp $89a1			jmp 	NSMNegate  					; just toggles the sign bit.
.8783					_ETDereference:
.8783	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8786	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8789	29 20		and #$20			and 	#NSBIsReference
.878b	f0 e3		beq $8770			beq 	_ETTypeMismatch
.878d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8790	60		rts				rts
.8791					_ETStringReference:
.8791	20 c2 86	jsr $86c2			jsr 	EvaluateTerm				; evaluate the term
.8794	20 06 85	jsr $8506			jsr 	Dereference 				; dereference it.
.8797	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.879a	d0 d4		bne $8770			bne 	_ETTypeMismatch
.879c	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.879e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87a1	60		rts				rts
.87a2					_ETParenthesis:
.87a2	20 c4 84	jsr $84c4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.87a5	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket 			; check for )
.87a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/abs.asm

.9347					AbsUnary:
.9347	fa		plx				plx 								; restore stack pos
.9348	20 49 89	jsr $8949			jsr 	EvaluateNumber 				; get a float or int
.934b	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.934e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9351	29 7f		and #$7f			and 	#$7F
.9353	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9356	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/alloc.asm

.87a9					AllocUnary:
.87a9	fa		plx				plx 								; restore stack pos
.87aa	20 81 89	jsr $8981			jsr 	Evaluate16BitInteger		; get bytes required.
.87ad	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.87b0	da		phx				phx 								; save X/Y
.87b1	5a		phy				phy
.87b2	8a		txa				txa 								; copy X into Y
.87b3	a8		tay				tay
.87b4	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.87b7	aa		tax				tax
.87b8	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.87bb	20 c8 87	jsr $87c8			jsr 	AllocateXABytes 			; allocate memory
.87be	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.87c1	8a		txa				txa
.87c2	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.87c5	7a		ply				ply
.87c6	fa		plx				plx
.87c7	60		rts				rts
.87c8					AllocateXABytes:
.87c8	5a		phy				phy
.87c9	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.87cc	5a		phy				phy
.87cd	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.87d0	5a		phy				phy
.87d1	18		clc				clc
.87d2	6d 0c 07	adc $070c			adc 	lowMemPtr
.87d5	8d 0c 07	sta $070c			sta 	lowMemPtr
.87d8	8a		txa				txa
.87d9	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.87dc	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.87df	fa		plx				plx
.87e0	68		pla				pla
.87e1	7a		ply				ply
.87e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/asc.asm

.9357					AscUnary:
.9357	fa		plx				plx 								; restore stack pos
.9358	20 54 89	jsr $8954			jsr 	EvaluateString 				; get a string
.935b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.935d	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.9360	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.9363	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/frac.asm

.9364					FracUnary:
.9364	fa		plx				plx 								; restore stack pos
.9365	20 49 89	jsr $8949			jsr 	EvaluateNumber 				; get a float or int
.9368	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.936b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.936e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9370	f0 04		beq $9376			beq 	_IUZero
.9372	20 34 92	jsr $9234			jsr 	FloatFractionalPart
.9375	60		rts				rts
.9376					_IUZero:
.9376	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.9379	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/int.asm

.937a					IntUnary:
.937a	fa		plx				plx 								; restore stack pos
.937b	20 49 89	jsr $8949			jsr 	EvaluateNumber 				; get a float or int
.937e	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.9381	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9384	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9386	f0 03		beq $938b			beq 	_IUExit
.9388	20 97 92	jsr $9297			jsr 	FloatIntegerPart
.938b					_IUExit:
.938b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/len.asm

.938c					LenUnary:
.938c	fa		plx				plx 								; restore stack pos
.938d	20 54 89	jsr $8954			jsr 	EvaluateString 				; get a string
.9390	5a		phy				phy
.9391	a0 00		ldy #$00			ldy 	#0 							; find length
.9393					_LenFind:
.9393	b1 36		lda ($36),y			lda 	(zTemp0),y
.9395	f0 06		beq $939d			beq 	_LenExit
.9397	c8		iny				iny
.9398	d0 f9		bne $9393			bne 	_LenFind
.939a	4c b8 94	jmp $94b8			jmp 	RangeError 					; string > 255
.939d					_LenExit:
.939d	98		tya				tya
.939e	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.93a1	7a		ply				ply
.93a2	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.93a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/not.asm

.87e3					Unary_Not:
.87e3	fa		plx				plx
.87e4	20 6c 89	jsr $896c			jsr 	EvaluateInteger 			; get integer
.87e7	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.87ea	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; zero mantissa ?
.87ed	f0 04		beq $87f3			beq 	_NotZero
.87ef	20 f5 89	jsr $89f5			jsr 	NSMSetZero
.87f2	60		rts				rts
.87f3					_NotZero:
.87f3	4c 03 8f	jmp $8f03			jmp 	ReturnTrue
.87f6					_UNBad:
.87f6	4c c2 94	jmp $94c2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/rnd.asm

.87f9					Unary_Rnd:
.87f9	20 49 89	jsr $8949			jsr 	EvaluateNumber 				; number to use.
.87fc	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket 			; closing bracket
.87ff	20 28 88	jsr $8828			jsr 	Random32Bit 				; generate a number.
.8802	ad 08 07	lda $0708			lda 	RandomSeed+0
.8805	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8808	ad 09 07	lda $0709			lda 	RandomSeed+1
.880b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.880e	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8811	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8814	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8817	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8819	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.881c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.881e	8d 28 06	sta $0628			sta 	NSExponent
.8821	a9 08		lda #$08			lda 	#NSTFloat
.8823	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8826	db						.byte 	$DB 						; causes a break in the emulator
.8827	60		rts				rts
.8828					Random32Bit:
.8828	5a		phy				phy
.8829	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.882b	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.882e	d0 03		bne $8833			bne 	_Random1
.8830	a8		tay				tay 								; if so do it 256 times
.8831	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8833					_Random1:
.8833	0a		asl a				asl 	a 							; LSFR RNG
.8834	2e 09 07	rol $0709			rol 	RandomSeed+1
.8837	2e 0a 07	rol $070a			rol 	RandomSeed+2
.883a	2e 0b 07	rol $070b			rol 	RandomSeed+3
.883d	90 02		bcc $8841			bcc 	_Random2
.883f	49 c5		eor #$c5			eor 	#$C5
.8841					_Random2:
.8841	88		dey				dey
.8842	d0 ef		bne $8833			bne 	_Random1
.8844	7a		ply				ply
.8845	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/sgn.asm

.93a6					SgnUnary:
.93a6	fa		plx				plx 								; restore stack pos
.93a7	20 49 89	jsr $8949			jsr 	EvaluateNumber 				; get a float or int
.93aa	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.93ad	20 25 8a	jsr $8a25			jsr 	NSMIsZero 					; if zero
.93b0	f0 10		beq $93c2			beq 	_SGZero  					; return Int Zero
.93b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.93b5	48		pha				pha
.93b6	a9 01		lda #$01			lda 	#1 							; set to 1
.93b8	20 f7 89	jsr $89f7			jsr 	NSMSetByte
.93bb	68		pla				pla
.93bc	29 80		and #$80			and		#$80 						; copy the sign byte out
.93be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93c1	60		rts				rts
.93c2	20 f5 89	jsr $89f5	_SGZero:jsr 	NSMSetZero
.93c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/val.asm

.93c6					ValUnary:
.93c6	fa		plx				plx 								; restore stack pos
.93c7	20 dc 93	jsr $93dc			jsr 	ValMainCode 				; do the main val() code
.93ca	b0 01		bcs $93cd			bcs 	_VUError 					; couldn't convert
.93cc	60		rts				rts
.93cd					_VUError:
.93cd	4c bd 94	jmp $94bd			jmp 	TypeError
.93d0					IsValUnary:
.93d0	fa		plx				plx 								; restore stack pos
.93d1	20 dc 93	jsr $93dc			jsr 	ValMainCode 				; do the main val() code
.93d4	b0 03		bcs $93d9			bcs 	_VUBad
.93d6	4c 03 8f	jmp $8f03			jmp 	ReturnTrue
.93d9					_VUBad:
.93d9	4c 0f 8f	jmp $8f0f			jmp 	ReturnFalse
.93dc					ValMainCode:
.93dc	20 54 89	jsr $8954			jsr 	EvaluateString 				; get a string
.93df	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket 			; check right bracket present
.93e2	5a		phy				phy
.93e3	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.93e5	f0 17		beq $93fe			beq 	_VMCFail2
.93e7	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.93e9	48		pha				pha 								; save first character
.93ea	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.93ec	d0 01		bne $93ef			bne 	_VMCStart
.93ee	c8		iny				iny 								; skip over -
.93ef					_VMCStart:
.93ef	38		sec				sec 								; initialise first time round.
.93f0					_VMCNext:
.93f0	c8		iny				iny 								; pre-increment
.93f1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.93f3	f0 0c		beq $9401			beq 	_VMCSuccess 				; successful.
.93f5	20 a4 85	jsr $85a4			jsr 	EncodeNumber 				; send it to the number-builder
.93f8	90 03		bcc $93fd			bcc 	_VMCFail 					; if failed, give up.
.93fa	18		clc				clc 								; next time round, countinue
.93fb	80 f3		bra $93f0			bra 	_VMCNext
.93fd					_VMCFail:
.93fd	68		pla				pla
.93fe					_VMCFail2:
.93fe	7a		ply				ply
.93ff	38		sec				sec
.9400	60		rts				rts
.9401					_VMCSuccess:
.9401	a9 00		lda #$00			lda 	#0 							; construct final
.9403	20 a4 85	jsr $85a4			jsr 	EncodeNumber
.9406	68		pla				pla
.9407	c9 2d		cmp #$2d			cmp 	#"-"
.9409	d0 03		bne $940e			bne 	_VMCNotNegative
.940b	20 a1 89	jsr $89a1			jsr		NSMNegate
.940e					_VMCNotNegative:
.940e	7a		ply				ply
.940f	18		clc				clc
.9410	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/chr.asm

.8846					ChrUnary:
.8846	fa		plx				plx 								; restore stack pos
.8847	20 8d 89	jsr $898d			jsr 	Evaluate8BitInteger			; get value
.884a	48		pha				pha
.884b	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.884e	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8850	20 2f 94	jsr $942f			jsr 	StringTempAllocate
.8853	68		pla				pla 								; write number to it
.8854	20 6d 94	jsr $946d			jsr 	StringTempWrite
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/spc.asm

.8858					SpcUnary:
.8858	fa		plx				plx 								; restore stack pos
.8859	20 8d 89	jsr $898d			jsr 	Evaluate8BitInteger			; get value
.885c	5a		phy				phy
.885d	48		pha				pha 								; save count
.885e	20 2f 94	jsr $942f			jsr 	StringTempAllocate
.8861	7a		ply				ply 								; to do count in Y
.8862					_SpcLoop:
.8862	c0 00		cpy #$00			cpy 	#0
.8864	f0 08		beq $886e			beq 	_SpcExit
.8866	a9 20		lda #$20			lda 	#32
.8868	20 6d 94	jsr $946d			jsr 	StringTempWrite
.886b	88		dey				dey
.886c	80 f4		bra $8862			bra 	_SPCLoop
.886e					_SpcExit:
.886e	7a		ply				ply
.886f	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket
.8872	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/str.asm

.8873					Unary_Str:
.8873	fa		plx				plx
.8874	20 49 89	jsr $8949			jsr 	EvaluateNumber  			; get number
.8877	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket 			; closing bracket
.887a	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.887c	20 95 88	jsr $8895			jsr 	ConvertNumberToString 		; do the conversion.
.887f	a9 21		lda #$21			lda		#33 						; create buffer
.8881	20 2f 94	jsr $942f			jsr 	StringTempAllocate 			; allocate memory
.8884	da		phx				phx
.8885	a2 00		ldx #$00			ldx 	#0
.8887					_USCopy:
.8887	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.888a	20 6d 94	jsr $946d			jsr 	StringTempWrite
.888d	e8		inx				inx
.888e	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8891	d0 f4		bne $8887			bne 	_USCopy
.8893	fa		plx				plx
.8894	60		rts				rts
.8895					ConvertNumberToString:
.8895	5a		phy				phy 								; save code position
.8896	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8899	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.889c	20 cc 89	jsr $89cc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.889f	7a		ply				ply
.88a0	60		rts				rts
.88a1					MakePlusTwoString:

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/substring.asm

.88a1					Unary_Left:
.88a1	fa		plx				plx
.88a2	18		clc				clc 								; only one parameter
.88a3	20 18 89	jsr $8918			jsr 	SubstringInitial 			; set up.
.88a6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.88a9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88ac	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.88af	80 2c		bra $88dd			bra 	SubstringMain
.88b1					Unary_Right:
.88b1	fa		plx				plx
.88b2	18		clc				clc 								; only one parameter
.88b3	20 18 89	jsr $8918			jsr 	SubstringInitial 			; set up.
.88b6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.88b9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88bc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.88bf	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.88c2	b0 02		bcs $88c6			bcs 	_URNotUnderflow
.88c4	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.88c6					_URNotUnderFlow:
.88c6	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.88c9	80 12		bra $88dd			bra 	SubStringMain
.88cb					Unary_Mid:
.88cb	fa		plx				plx
.88cc	38		sec				sec 								; two parameters
.88cd	20 18 89	jsr $8918			jsr 	SubstringInitial 			; set up.
.88d0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.88d3	f0 05		beq $88da			beq 	_UMError
.88d5	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.88d8	80 03		bra $88dd			bra 	SubStringMain
.88da					_UMError:
.88da	4c c2 94	jmp $94c2			jmp 	ArgumentError
.88dd					SubStringMain:
.88dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.88e0	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.88e3	b0 2d		bcs $8912			bcs 	_SSMNull 					; if so, return an empty string.
.88e5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.88e8	f0 28		beq $8912			beq 	_SSMNull 					; return empty string.
.88ea	18		clc				clc 								; add the offset +1 to the address and
.88eb	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.88ee	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.88f1	85 36		sta $36				sta 	zTemp0
.88f3	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.88f6	69 00		adc #$00			adc 	#0
.88f8	85 37		sta $37				sta 	zTemp0+1
.88fa					_SSMNoCarry:
.88fa	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.88fd	20 2f 94	jsr $942f			jsr 	StringTempAllocate 			; allocate that many characters
.8900	5a		phy				phy 								; save Y
.8901	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8903					_SSMCopy:
.8903	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8905	f0 09		beq $8910			beq 	_SSMEString 				; no more to copy
.8907	20 6d 94	jsr $946d			jsr 	StringTempWrite 			; and write it out.
.890a	c8		iny				iny
.890b	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.890e	d0 f3		bne $8903			bne 	_SSMCopy
.8910					_SSMEString:
.8910	7a		ply				ply
.8911					_SSMExit:
.8911	60		rts				rts
.8912					_SSMNull:
.8912	a9 00		lda #$00			lda 	#0
.8914	20 2f 94	jsr $942f			jsr 	StringTempAllocate
.8917	60		rts				rts
.8918					SubstringInitial:
.8918	da		phx				phx 								; save initial stack position
.8919	08		php				php 								; save carry on stack indicating 2 parameters
.891a	20 54 89	jsr $8954			jsr 	EvaluateString 				; get a string
.891d	5a		phy				phy 								; calculate length to exponent.
.891e	a0 ff		ldy #$ff			ldy 	#$FF
.8920					_SIFindLength:
.8920	c8		iny				iny
.8921	b1 36		lda ($36),y			lda 	(zTemp0),y
.8923	d0 fb		bne $8920			bne 	_SIFindLength
.8925	98		tya				tya
.8926	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8929	7a		ply				ply
.892a	e8		inx				inx
.892b	20 f1 8e	jsr $8ef1			jsr 	CheckComma 					; comma next
.892e	20 8d 89	jsr $898d			jsr 	Evaluate8BitInteger 		; get next parameter
.8931	28		plp				plp 								; is it the last parameter ?
.8932	90 07		bcc $893b			bcc 	_SSIExit 					; if so, exit.
.8934	e8		inx				inx
.8935	20 f1 8e	jsr $8ef1			jsr 	CheckComma 					; comma next
.8938	20 8d 89	jsr $898d			jsr 	Evaluate8BitInteger 		; get last parameter
.893b					_SSIExit:
.893b	fa		plx				plx
.893c	20 e9 8e	jsr $8ee9			jsr 	CheckRightBracket 			; check closing bracket
.893f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/exprhelper.asm

.8940					EvaluateValue:
.8940	48		pha				pha
.8941	20 c4 84	jsr $84c4			jsr		EvaluateExpression 			; expression
.8944	20 06 85	jsr $8506			jsr 	Dereference					; derefernce it
.8947	68		pla				pla
.8948	60		rts				rts
.8949					EvaluateNumber:
.8949	20 40 89	jsr $8940			jsr 	EvaluateValue 				; get a value
.894c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.894f	29 10		and #$10			and 	#NSBIsString
.8951	d0 16		bne $8969			bne 	HelperTypeError
.8953	60		rts				rts
.8954					EvaluateString:
.8954	20 40 89	jsr $8940			jsr 	EvaluateValue 				; get a value
.8957	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.895a	29 10		and #$10			and 	#NSBIsString
.895c	f0 0b		beq $8969			beq 	HelperTypeError
.895e					CopyAddressToTemp0:
.895e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8961	85 36		sta $36				sta 	zTemp0
.8963	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8966	85 37		sta $37				sta 	zTemp0+1
.8968	60		rts				rts
.8969					HelperTypeError:
.8969	4c bd 94	jmp $94bd			jmp 	TypeError
.896c					EvaluateInteger:
.896c	20 49 89	jsr $8949			jsr 	EvaluateNumber
.896f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8972	d0 0a		bne $897e			bne 	HelperValueError 			; if not, it's a float.
.8974	60		rts				rts
.8975					EvaluateUnsignedInteger:
.8975	20 6c 89	jsr $896c			jsr 	EvaluateInteger 			; check integer is +ve
.8978	bd 00 06	lda $0600,x			lda 	NSStatus,x
.897b	30 01		bmi $897e			bmi 	HelperValueError
.897d	60		rts				rts
.897e					HelperValueError:
.897e	4c c2 94	jmp $94c2			jmp 	ArgumentError
.8981					Evaluate16BitInteger:
.8981	20 75 89	jsr $8975			jsr	 	EvaluateUnsignedInteger		; get integer
.8984	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8987	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.898a	d0 f2		bne $897e			bne 	HelperValueError
.898c	60		rts				rts
.898d					Evaluate8BitInteger:
.898d	20 75 89	jsr $8975			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8990	d0 ec		bne $897e			bne 	HelperValueError
.8992	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8995	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8998	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.899b	d0 e1		bne $897e			bne 	HelperValueError
.899d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/utility.asm

.89a1					NSMNegate:
.89a1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89a4	49 80		eor #$80			eor 	#NSBIsNegative
.89a6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89a9	60		rts				rts
.89aa					NSMNegateMantissa:
.89aa	38		sec				sec
.89ab	a9 00		lda #$00			lda 	#0
.89ad	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.89b0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89b3	a9 00		lda #$00			lda 	#0
.89b5	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.89b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89bb	a9 00		lda #$00			lda 	#0
.89bd	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.89c0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89c3	a9 00		lda #$00			lda 	#0
.89c5	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.89c8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89cb	60		rts				rts
.89cc					NSMShiftUpTwo:
.89cc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89cf	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.89d2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89d5	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.89d8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.89db	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.89de	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.89e1	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.89e4	bd 28 06	lda $0628,x			lda 	NSExponent,x
.89e7	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.89ea	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89ed	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.89f0	60		rts				rts
.89f1					NSMSetZeroMantissaOnly:
.89f1	a9 00		lda #$00			lda 	#0
.89f3	80 08		bra $89fd			bra 	NSMSetMantissa
.89f5					NSMSetZero:
.89f5	a9 00		lda #$00			lda 	#0
.89f7					NSMSetByte:
.89f7	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.89fa	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.89fd					NSMSetMantissa:
.89fd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8a00	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8a03	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a06	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a09	60		rts				rts
.8a0a					NSMShiftLeft:
.8a0a	18		clc				clc
.8a0b					NSMRotateLeft:
.8a0b	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8a0e	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8a11	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8a14	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8a17	60		rts				rts
.8a18					NSMShiftRight:
.8a18	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8a1b	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8a1e	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8a21	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8a24	60		rts				rts
.8a25					NSMIsZero:
.8a25	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8a28	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8a2b	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8a2e	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8a31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/strings/stringalloc.asm

.9411					StringSystemInitialise:
.9411	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.9413	8d 0e 07	sta $070e			sta 	0+StringMemory
.9416	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.9418	8d 0f 07	sta $070f			sta 	1+StringMemory
.941b	60		rts				rts
.941c					StringSpaceInitialise:
.941c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.941e	8d 10 07	sta $0710			sta 	StringInitialised
.9421	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9424	8d 11 07	sta $0711			sta 	StringTempPointer
.9427	ad 0f 07	lda $070f			lda 	StringMemory+1
.942a	3a		dec a				dec 	a
.942b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.942e	60		rts				rts
.942f					StringTempAllocate:
.942f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9431	b0 35		bcs $9468			bcs 	_STALength
.9433	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9436	30 05		bmi $943d			bmi 	_STAAllocate
.9438	48		pha				pha 								; save value to subtract.
.9439	20 1c 94	jsr $941c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.943c	68		pla				pla 								; restore it
.943d					_STAAllocate:
.943d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.943f	18		clc				clc  								; deliberate allows one more
.9440	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9443	8d 11 07	sta $0711			sta 	StringTempPointer
.9446	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9449	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.944b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.944e	69 ff		adc #$ff			adc 	#$FF
.9450	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9453	85 3d		sta $3d				sta 	zsTemp+1
.9455	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9458	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.945b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.945e	a9 10		lda #$10			lda 	#NSTString
.9460	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9463	a9 00		lda #$00			lda 	#0 							; clear the target string
.9465	92 3c		sta ($3c)			sta 	(zsTemp)
.9467	60		rts				rts
.9468					_STALength:
.9468	a9 09		lda #$09		lda	#9
.946a	4c 1b 82	jmp $821b		jmp	ErrorHandler
.946d					StringTempWrite:
.946d	48		pha				pha
.946e	92 3c		sta ($3c)			sta 	(zsTemp)
.9470	e6 3c		inc $3c				inc 	zsTemp
.9472	d0 02		bne $9476			bne 	_STWNoCarry
.9474	e6 3d		inc $3d				inc 	zsTemp+1
.9476					_STWNoCarry:
.9476	a9 00		lda #$00			lda 	#0
.9478	92 3c		sta ($3c)			sta 	(zsTemp)
.947a	68		pla				pla
.947b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/backload.asm

.8a32					BackloadProgram:
.8a32	a2 ff		ldx #$ff			ldx 	#$FF
.8a34	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8a37	20 5e 8a	jsr $8a5e			jsr 	BLReadByte
.8a3a	30 1e		bmi $8a5a			bmi 	_BPExit
.8a3c					_BPCopy:
.8a3c	e8		inx				inx  								; copy byte in
.8a3d	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8a40	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8a43	20 5e 8a	jsr $8a5e			jsr 	BLReadByte 					; read next byte
.8a46	30 0a		bmi $8a52			bmi 	_BPEndLine 					; -ve = EOL
.8a48	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8a4a	d0 02		bne $8a4e			bne 	_BPNotTab
.8a4c	a9 20		lda #$20			lda 	#' '
.8a4e					_BPNotTab:
.8a4e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8a50	b0 ea		bcs $8a3c			bcs 	_BPCopy
.8a52					_BPEndLine:
.8a52	20 1a 8c	jsr $8c1a			jsr 	TokeniseLine 				; tokenise the line.
.8a55	20 17 81	jsr $8117			jsr 	MemoryAppend 				; append to current program
.8a58	80 d8		bra $8a32			bra 	BackloadProgram
.8a5a					_BPExit:
.8a5a	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variables etc.
.8a5d	60		rts				rts
.8a5e					BLReadByte:
.8a5e					_BLLoad:
.8a5e	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8a61	ee 5f 8a	inc $8a5f			inc 	_BLLoad+1
.8a64	d0 03		bne $8a69			bne 	_BLNoCarry
.8a66	ee 60 8a	inc $8a60			inc 	_BLLoad+2
.8a69					_BLNoCarry:
.8a69	c9 00		cmp #$00			cmp 	#0
.8a6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/searchtokens.asm

.8a6c					TokeniseSearchTable:
.8a6c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8a6e	85 36		sta $36				sta 	zTemp0
.8a70	a0 00		ldy #$00			ldy 	#0
.8a72	a9 80		lda #$80			lda 	#$80 						; token #
.8a74	85 38		sta $38				sta 	zTemp1
.8a76					_TSTLoop:
.8a76	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8a78	30 49		bmi $8ac3			bmi 	_TSTFail 					; -ve = end of table
.8a7a	f0 2e		beq $8aaa			beq 	_TSTNext 					; zero, check next it's a dummy
.8a7c	c8		iny				iny 								; get the hash
.8a7d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a7f	88		dey				dey
.8a80	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8a83	d0 25		bne $8aaa			bne 	_TSTNext
.8a85	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8a88	38		sec				sec
.8a89	ed 00 07	sbc $0700			sbc 	identStart
.8a8c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8a8e	d0 1a		bne $8aaa			bne 	_TSTNext
.8a90	5a		phy				phy 								; save Y , we might fail
.8a91	c8		iny				iny 								; point to text
.8a92	c8		iny				iny
.8a93	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8a96					_TSTCompareName:
.8a96	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8a99	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8a9b	d0 0c		bne $8aa9			bne 	_TSTNextPullY 				; fail, pullY and do next
.8a9d	e8		inx				inx
.8a9e	c8		iny				iny
.8a9f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8aa2	d0 f2		bne $8a96			bne 	_TSTCompareName
.8aa4	7a		ply				ply 								; throw Y
.8aa5	a5 38		lda $38				lda 	zTemp1 						; get token #
.8aa7	38		sec				sec 								; return with CS = passed.
.8aa8	60		rts				rts
.8aa9					_TSTNextPullY:
.8aa9	7a		ply				ply 								; restore current, fall through.
.8aaa					_TSTNext:
.8aaa	e6 38		inc $38				inc 	zTemp1 						; token counter
.8aac	98		tya				tya
.8aad	18		clc				clc
.8aae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8ab0	1a		inc a				inc 	a 							; +1
.8ab1	1a		inc a				inc 	a 							; +2
.8ab2	a8		tay				tay
.8ab3	10 c1		bpl $8a76			bpl 	_TSTLoop 					; if Y < $80 loop back
.8ab5	98		tya				tya 								; add Y to zTemp0 and reset Y
.8ab6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8ab8	18		clc				clc  								; but have tables > 255 bytes
.8ab9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8abb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8abd	90 b7		bcc $8a76			bcc 	_TSTLoop
.8abf	e6 37		inc $37				inc 	zTemp0+1
.8ac1	80 b3		bra $8a76			bra 	_TSTLoop
.8ac3					_TSTFail:
.8ac3	18		clc				clc
.8ac4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/tokenise.asm


;******  Processing file: ./core/tokeniser/../../generated/kwdtext.dat

.8ac5					KeywordSet0:
>8ac5	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ac7	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ac9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8acb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8ad1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8ad9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8adf	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8ae6	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8aed	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8af4	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8afa	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8b02	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8b0a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8b10	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8b17	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8b1d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8b25	28
>8b26	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8b2c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8b32	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8b38	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8b3f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8b45	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8b4b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8b50	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8b54	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8b5a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8b62	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8b69	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8b70	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8b78	43
>8b79	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8b7f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8b86	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8b8c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8b92	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8b97	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8b9d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8ba2	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8ba9	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8baf	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8bb4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8bbb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8bc1	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8bc6	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8bce	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8bd4	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8bd8	ff					.text	$FF
.8bd9					KeywordSet1:
>8bd9	00 65					.text	0,$65,""               ; $80 !0:EOF
>8bdb	00 58					.text	0,$58,""               ; $81 !1:SH1
>8bdd	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8bdf	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8be7	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8bee	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8bf3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8bf9	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8bfe	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8c06	45
>8c07	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8c0c	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8c12	ff					.text	$FF
.8c13					KeywordSet2:
>8c13	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c15	00 58					.text	0,$58,""               ; $81 !1:SH1
>8c17	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8c19	ff					.text	$FF

;******  Return to file: ./core/tokeniser/tokenise.asm

.8c1a					TokeniseLine:
.8c1a	20 a2 8d	jsr $8da2			jsr 	FixLineBufferCase 			; fix line case
.8c1d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8c1f	8d 15 07	sta $0715			sta 	tokenOffset
.8c22	9c 16 07	stz $0716			stz 	tokenLineNumber
.8c25	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8c28	a2 ff		ldx #$ff			ldx 	#$FF
.8c2a					_TKFindFirst:
.8c2a	e8		inx				inx
.8c2b	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8c2e	f0 79		beq $8ca9			beq 	_TKExit
.8c30	c9 20		cmp #$20			cmp 	#' '
.8c32	90 f6		bcc $8c2a			bcc 	_TKFindFirst
.8c34	c9 30		cmp #$30			cmp 	#'0'
.8c36	90 07		bcc $8c3f			bcc 	_TKNoLineNumber
.8c38	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c3a	b0 03		bcs $8c3f			bcs 	_TKNoLineNumber
.8c3c	20 cc 8d	jsr $8dcc			jsr 	TokeniseExtractLineNumber
.8c3f					_TKNoLineNumber:
.8c3f					_TKTokeniseLoop:
.8c3f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8c42	f0 65		beq $8ca9			beq 	_TKExit
.8c44	e8		inx				inx
.8c45	c9 20		cmp #$20			cmp 	#' '
.8c47	f0 f6		beq $8c3f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8c49	ca		dex				dex 								; undo last get, A contains character, X is position.
.8c4a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8c4c	f0 61		beq $8caf			beq 	_TKTokeniseIdentifier
.8c4e	c9 41		cmp #$41			cmp 	#'A'
.8c50	90 04		bcc $8c56			bcc 	_TKTokenisePunctuation
.8c52	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8c54	90 59		bcc $8caf			bcc 	_TKTokeniseIdentifier
.8c56					_TKTokenisePunctuation:
.8c56	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8c58	f0 27		beq $8c81			beq 	_TKString
.8c5a	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8c5c	f0 28		beq $8c86			beq 	_TKHexConstant
.8c5e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8c60	f0 29		beq $8c8b			beq 	_TKCheckDouble
.8c62	c9 3e		cmp #$3e			cmp 	#'>'
.8c64	f0 25		beq $8c8b			beq 	_TKCheckDouble
.8c66					_TKStandardPunctuation:
.8c66	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8c69	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8c6b	90 0e		bcc $8c7b			bcc 	_TKNoShift
.8c6d	48		pha				pha 								; save
.8c6e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8c70	85 36		sta $36				sta 	zTemp0
.8c72	68		pla				pla
.8c73	29 20		and #$20			and 	#32 						; bit 5
.8c75	4a		lsr a				lsr 	a 							; shift into bit 3
.8c76	4a		lsr a				lsr 	a
.8c77	05 36		ora $36				ora 	zTemp0
.8c79	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8c7b					_TKNoShift:
.8c7b	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte 			; write the punctuation character
.8c7e	e8		inx				inx 								; consume the character
.8c7f	80 be		bra $8c3f			bra 	_TKTokeniseLoop 			; and loop round again.
.8c81					_TKString:
.8c81	20 31 8d	jsr $8d31			jsr 	TokeniseString
.8c84	80 b9		bra $8c3f			bra 	_TKTokeniseLoop
.8c86					_TKHexConstant:
.8c86	20 6c 8d	jsr $8d6c			jsr 	TokeniseHexConstant
.8c89	80 b4		bra $8c3f			bra 	_TKTokeniseLoop
.8c8b					_TKCheckDouble:
.8c8b	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8c8e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8c90	90 d4		bcc $8c66			bcc 	_TKStandardPunctuation
.8c92	c9 3f		cmp #$3f			cmp 	#'>'+1
.8c94	b0 d0		bcs $8c66			bcs 	_TKStandardPunctuation
.8c96	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8c99	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8c9b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8c9c	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8c9f	38		sec				sec
.8ca0	e9 3c		sbc #$3c			sbc 	#'<'
.8ca2	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ca5	e8		inx				inx 								; consume both
.8ca6	e8		inx				inx
.8ca7	80 96		bra $8c3f			bra 	_TKTokeniseLoop
.8ca9	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8cab	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8cae	60		rts				rts
.8caf					_TKTokeniseIdentifier:
.8caf	8e 00 07	stx $0700			stx 	identStart 					; save start
.8cb2	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8cb5					_TKCheckLoop:
.8cb5	e8		inx				inx 								; look at next, we know first is identifier.
.8cb6	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8cb9	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8cbb	f0 f8		beq $8cb5			beq 	_TKCheckLoop
.8cbd	c9 30		cmp #$30			cmp	 	#"0"
.8cbf	90 0c		bcc $8ccd			bcc 	_TKEndIdentifier
.8cc1	c9 3a		cmp #$3a			cmp 	#"9"+1
.8cc3	90 f0		bcc $8cb5			bcc 	_TKCheckLoop
.8cc5	c9 41		cmp #$41			cmp	 	#"A"
.8cc7	90 04		bcc $8ccd			bcc 	_TKEndIdentifier
.8cc9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8ccb	90 e8		bcc $8cb5			bcc 	_TKCheckLoop
.8ccd					_TKEndIdentifier:
.8ccd	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8cd0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8cd2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8cd4	f0 06		beq $8cdc			beq 	_TKHasTypeCharacter
.8cd6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8cd8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8cda	d0 07		bne $8ce3			bne 	_TKNoTypeCharacter
.8cdc					_TKHasTypeCharacter:
.8cdc	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8cdf	e8		inx				inx 								; read next
.8ce0	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ce3					_TKNoTypeCharacter:
.8ce3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8ce5	d0 09		bne $8cf0			bne 	_TKNoArray
.8ce7	e8		inx				inx 								; skip the (
.8ce8	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8ceb	09 04		ora #$04			ora 	#$04
.8ced	8d 04 07	sta $0704			sta 	identTypeByte
.8cf0					_TKNoArray:
.8cf0	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8cf3	20 8d 8d	jsr $8d8d			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8cf6	a0 8a		ldy #$8a			ldy 	#(KeywordSet0) >> 8
.8cf8	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.8cfa	20 6c 8a	jsr $8a6c			jsr 	TokeniseSearchTable
.8cfd	a2 00		ldx #$00			ldx 	#0
.8cff	b0 1f		bcs $8d20			bcs 	_TKFoundToken
.8d01	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8d03	a9 d9		lda #$d9			lda 	#(KeywordSet1) & $FF
.8d05	20 6c 8a	jsr $8a6c			jsr 	TokeniseSearchTable
.8d08	a2 81		ldx #$81			ldx 	#$81
.8d0a	b0 14		bcs $8d20			bcs 	_TKFoundToken
.8d0c	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8d0e	a9 d9		lda #$d9			lda 	#(KeywordSet1) & $FF
.8d10	20 6c 8a	jsr $8a6c			jsr 	TokeniseSearchTable
.8d13	a2 82		ldx #$82			ldx 	#$82
.8d15	b0 09		bcs $8d20			bcs 	_TKFoundToken
.8d17	20 1d 8e	jsr $8e1d			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8d1a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8d1d	4c 3f 8c	jmp $8c3f			jmp 	_TKTokeniseLoop 			; and go round again.
.8d20					_TKFoundToken:
.8d20	48		pha				pha 								; save token
.8d21	8a		txa				txa 								; shift in X, is there one ?
.8d22	f0 03		beq $8d27			beq 	_TKNoTShift
.8d24	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte 			; if so, write it out
.8d27					_TKNoTShift:
.8d27	68		pla				pla 								; restore and write token
.8d28	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d2b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8d2e	4c 3f 8c	jmp $8c3f			jmp 	_TKTokeniseLoop 			; and go round again.
.8d31					TokeniseString:
.8d31	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8d33	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d36	e8		inx				inx									; start of quoted string.
.8d37	da		phx				phx 								; push start of string on top
.8d38	ca		dex				dex
.8d39					_TSFindEnd:
.8d39	e8		inx				inx
.8d3a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8d3d	f0 04		beq $8d43			beq 	_TSEndOfString
.8d3f	c9 22		cmp #$22			cmp 	#'"'
.8d41	d0 f6		bne $8d39			bne 	_TSFindEnd
.8d43					_TSEndOfString:
.8d43	7a		ply				ply  								; so now Y is first character, X is character after end.
.8d44	48		pha				pha 								; save terminating character
.8d45	20 4d 8d	jsr $8d4d			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8d48	68		pla				pla 								; terminating character
.8d49	f0 01		beq $8d4c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8d4b	e8		inx				inx
.8d4c					_TSNotQuote:
.8d4c	60		rts				rts
.8d4d					TOWriteBlockXY:
.8d4d	86 36		stx $36				stx 	zTemp0 						; write end character
.8d4f	98		tya				tya
.8d50	49 ff		eor #$ff			eor 	#$FF
.8d52	38		sec				sec
.8d53	65 36		adc $36				adc 	zTemp0
.8d55	1a		inc a				inc 	a 							; one extra for NULL
.8d56	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d59					_TOBlockLoop:
.8d59	c4 36		cpy $36				cpy 	zTemp0
.8d5b	f0 09		beq $8d66			beq 	_TOBlockExit
.8d5d	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8d60	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d63	c8		iny				iny
.8d64	80 f3		bra $8d59			bra 	_TOBlockLoop
.8d66					_TOBlockExit:
.8d66	a9 00		lda #$00			lda 	#0
.8d68	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d6b	60		rts				rts
.8d6c					TokeniseHexConstant:
.8d6c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8d6e	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8d71	e8		inx				inx									; start of quoted string.
.8d72	da		phx				phx 								; push start of constant on top
.8d73	ca		dex				dex
.8d74					_THFindLoop:
.8d74	e8		inx				inx
.8d75	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8d78	c9 30		cmp #$30			cmp 	#"0"
.8d7a	90 0c		bcc $8d88			bcc 	_THFoundEnd
.8d7c	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d7e	90 f4		bcc $8d74			bcc 	_THFindLoop
.8d80	c9 41		cmp #$41			cmp 	#"A"
.8d82	90 04		bcc $8d88			bcc 	_THFoundEnd
.8d84	c9 47		cmp #$47			cmp 	#"F"+1
.8d86	90 ec		bcc $8d74			bcc 	_THFindLoop
.8d88					_THFoundEnd:
.8d88	7a		ply				ply 								; restore start
.8d89	20 4d 8d	jsr $8d4d			jsr 	TOWriteBlockXY 				; output the block
.8d8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/utility.asm

.8d8d					TokeniseCalculateHash:
.8d8d	da		phx				phx
.8d8e	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8d91	a9 00		lda #$00			lda 	#0
.8d93					_TCHLoop:
.8d93	18		clc				clc
.8d94	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8d97	e8		inx				inx
.8d98	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8d9b	d0 f6		bne $8d93			bne 	_TCHLoop
.8d9d	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8da0	fa		plx				plx
.8da1	60		rts				rts
.8da2					FixLineBufferCase:
.8da2	a2 00		ldx #$00			ldx 	#0
.8da4					_FLBCLoop:
.8da4	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8da7	f0 22		beq $8dcb			beq 	_FLBCExit 					; end of string.
.8da9	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8dab	f0 11		beq $8dbe			beq 	_FLBCInQuotes
.8dad	e8		inx				inx
.8dae	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8db0	90 f2		bcc $8da4			bcc 	_FLBCLoop
.8db2	c9 7b		cmp #$7b			cmp 	#'z'+1
.8db4	b0 ee		bcs $8da4			bcs 	_FLBCLoop
.8db6	38		sec				sec 								; make U/C
.8db7	e9 20		sbc #$20			sbc 	#32
.8db9	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8dbc	80 e6		bra $8da4			bra 	_FLBCLoop
.8dbe					_FLBCInQuotes:
.8dbe	e8		inx				inx 								; advance
.8dbf	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8dc2	f0 07		beq $8dcb			beq 	_FLBCExit 					; exit on EOS
.8dc4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8dc6	d0 f6		bne $8dbe			bne 	_FLBCInQuotes
.8dc8	e8		inx				inx 								; skip over it
.8dc9	80 d9		bra $8da4			bra 	_FLBCLoop
.8dcb					_FLBCExit:
.8dcb	60		rts				rts
.8dcc					TokeniseExtractLineNumber:
.8dcc	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8dcf	48		pha				pha
.8dd0	ad 16 07	lda $0716			lda 	tokenLineNumber
.8dd3	48		pha				pha
.8dd4	20 0a 8e	jsr $8e0a			jsr 	_TELNTimes2 				; line # x 4
.8dd7	20 0a 8e	jsr $8e0a			jsr 	_TELNTimes2 				; line # x 2
.8dda	18		clc				clc 								; add stacked value
.8ddb	68		pla				pla
.8ddc	6d 16 07	adc $0716			adc 	tokenLineNumber
.8ddf	8d 16 07	sta $0716			sta 	tokenLineNumber
.8de2	68		pla				pla
.8de3	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.8de6	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.8de9	20 0a 8e	jsr $8e0a			jsr 	_TELNTimes2 				; line # x 10
.8dec	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.8def	e8		inx				inx
.8df0	29 0f		and #$0f			and 	#15 						; add to line #
.8df2	18		clc				clc
.8df3	6d 16 07	adc $0716			adc 	tokenLineNumber
.8df6	8d 16 07	sta $0716			sta 	tokenLineNumber
.8df9	90 03		bcc $8dfe			bcc 	_TLENNoCarry
.8dfb	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.8dfe					_TLENNoCarry:
.8dfe	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.8e01	c9 30		cmp #$30			cmp 	#'0'
.8e03	90 04		bcc $8e09			bcc 	_TLENExit
.8e05	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e07	90 c3		bcc $8dcc			bcc 	TokeniseExtractLineNumber
.8e09					_TLENExit:
.8e09	60		rts				rts
.8e0a					_TELNTimes2:
.8e0a	0e 16 07	asl $0716			asl 	tokenLineNumber
.8e0d	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.8e10	60		rts				rts
.8e11					TokeniseWriteByte:
.8e11	da		phx				phx
.8e12	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.8e15	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.8e18	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.8e1b	fa		plx				plx
.8e1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/variablerecord.asm

.8e1d					CheckCreateVariableRecord:
.8e1d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8e1f	85 36		sta $36				sta 	0+zTemp0
.8e21	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8e23	85 37		sta $37				sta 	1+zTemp0
.8e25	20 5b 81	jsr $815b			jsr 	VariableOpen 				; make variable space available
.8e28					_CCVSearch:
.8e28	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8e2a	f0 2c		beq $8e58			beq 	_CCVFail
.8e2c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8e2e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8e30	cd 03 07	cmp $0703			cmp 	identHash
.8e33	d0 16		bne $8e4b			bne 	_CCVNext
.8e35	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8e37	ae 00 07	ldx $0700			ldx 	identStart
.8e3a					_CCVCompare:
.8e3a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8e3d	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8e3f	e8		inx				inx 								; advance pointers
.8e40	c8		iny				iny
.8e41	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8e42	d0 07		bne $8e4b			bne 	_CCVNext  					; didn't match go to next.
.8e44	90 f4		bcc $8e3a			bcc 	_CCVCompare 				; not finished yet.
.8e46	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8e49	f0 41		beq $8e8c			beq 	_CCVFound 					; yes, we were successful
.8e4b					_CCVNext:
.8e4b	18		clc				clc
.8e4c	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8e4e	65 36		adc $36				adc 	zTemp0
.8e50	85 36		sta $36				sta 	zTemp0
.8e52	90 d4		bcc $8e28			bcc 	_CCVSearch
.8e54	e6 37		inc $37				inc 	zTemp0+1
.8e56	80 d0		bra $8e28			bra 	_CCVSearch
.8e58					_CCVFail:
.8e58	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8e5a	ad 03 07	lda $0703			lda 	identHash
.8e5d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e5f	c8		iny				iny 								; offset 2 is the type byte
.8e60	ad 04 07	lda $0704			lda 	identTypeByte
.8e63	91 36		sta ($36),y			sta 	(zTemp0),y
.8e65	c8		iny				iny
.8e66					_CCVData:
.8e66	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8e68	91 36		sta ($36),y			sta 	(zTemp0),y
.8e6a	c8		iny				iny
.8e6b	c0 08		cpy #$08			cpy 	#8
.8e6d	90 f7		bcc $8e66			bcc 	_CCVData
.8e6f	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8e72					_CCVCopyName:
.8e72	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e75	91 36		sta ($36),y			sta 	(zTemp0),y
.8e77	e8		inx				inx
.8e78	c8		iny				iny
.8e79	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8e7c	d0 f4		bne $8e72			bne 	_CCVCopyName
.8e7e	98		tya				tya 								; patch offset
.8e7f	92 36		sta ($36)			sta 	(zTemp0)
.8e81	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8e83	91 36		sta ($36),y			sta 	(zTemp0),y
.8e85	88		dey				dey
.8e86	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8e88	09 80		ora #$80			ora 	#$80
.8e8a	91 36		sta ($36),y			sta 	(zTemp0),y
.8e8c					_CCVFound:
.8e8c	20 5c 81	jsr $815c			jsr 	VariableClose 				; map out variables, perhaps.
.8e8f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8e91	38		sec				sec
.8e92	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8e94	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8e96	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8e99	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8e9b	20 11 8e	jsr $8e11			jsr 	TokeniseWriteByte
.8e9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.947c					DecimalScalarTable:
>947c	66 66 66 66				.dword $66666666 ; 0.1
>9480	de					.byte $de
>9481	1f 85 eb 51				.dword $51eb851f ; 0.01
>9485	db					.byte $db
>9486	4c 37 89 41				.dword $4189374c ; 0.001
>948a	d8					.byte $d8
>948b	ac 8b db 68				.dword $68db8bac ; 0.0001
>948f	d4					.byte $d4
>9490	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9494	d1					.byte $d1
>9495	83 de 1b 43				.dword $431bde83 ; 1e-06
>9499	ce					.byte $ce
>949a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>949e	ca					.byte $ca
>949f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>94a3	c7					.byte $c7
>94a4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>94a8	c4					.byte $c4
>94a9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>94ad	c0					.byte $c0
>94ae	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>94b2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.94b3					SyntaxError:
.94b3	a9 02		lda #$02		lda	#2
.94b5	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94b8					RangeError:
.94b8	a9 04		lda #$04		lda	#4
.94ba	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94bd					TypeError:
.94bd	a9 05		lda #$05		lda	#5
.94bf	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94c2					ArgumentError:
.94c2	a9 07		lda #$07		lda	#7
.94c4	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94c7					NotDoneError:
.94c7	a9 0c		lda #$0c		lda	#12
.94c9	4c 1b 82	jmp $821b		jmp	ErrorHandler
.94cc					ErrorText:
>94cc	42 72 65 61 6b 00			.text	"Break",0
>94d2	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>94da	72 72 6f 72 00
>94df	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>94e7	20 62 79 20 7a 65 72 6f 00
>94f0	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>94f8	61 6e 67 65 00
>94fd	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9505	6d 61 74 63 68 00
>950b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9513	65 6d 6f 72 79 00
>9519	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9521	61 72 67 75 6d 65 6e 74 00
>952a	53 74 6f 70 00				.text	"Stop",0
>952f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9537	6f 6f 20 6c 6f 6e 67 00
>953f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9547	6e 20 66 61 69 6c 65 64 00
>9550	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9558	61 74 61 00
>955c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9564	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  End of listing
