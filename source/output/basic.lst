
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Oct 10 17:08:55 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 66 94	jsr $9466			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 c6 85	jsr $85c6			jsr 	RunDemos
.8013	20 48 8e	jsr $8e48			jsr 	NewCommand 					; erase current program
.8016	20 eb a0	jsr $a0eb			jsr 	BackloadProgram
.8019	4c a4 89	jmp $89a4			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1245."
>8064	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 32 34 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 f6 86	jsr $86f6			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 2d 86	jsr $862d			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 3e 86	jsr $863e			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 4b 86	jsr $864b			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 2d 86	jsr $862d			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 3e 86	jsr $863e			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 2d 86	jsr $862d			jsr 	GXOpenBitmap
.8216	20 14 87	jsr $8714			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 4b 86	jsr $864b			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 3e 86	jsr $863e			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.82ad	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3d		sta $3d				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.82ca	a5 3d		lda $3d				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3d		sta $3d				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 a1 86	jsr $86a1			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 2d 86	jsr $862d			jsr 	GXOpenBitmap 				; start drawing
.8345	20 f6 86	jsr $86f6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 4b 86	jsr $864b			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 a1 86	jsr $86a1			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 3e 86	jsr $863e			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3d		lda $3d				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3d		lda $3d				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3d		sta $3d				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap 			; fix up.
.83d0	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3d		sta $3d				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3c		sta $3c				sta 	gsTemp
.83e7	60		rts				rts
.83e8					GXDLTCheckWrap:
.83e8	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3d		sta $3d				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
.83f5	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.83f8	3a		dec a				dec 	a
.83f9	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.83fc	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.83ff	48		pha				pha
.8400	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.8403	9c 55 06	stz $0655			stz 	gxHFlip
.8406	2c 56 06	bit $0656			bit 	gxUseMode
.8409	10 03		bpl $840e			bpl 	_GXNotVertical
.840b	8d 54 06	sta $0654			sta 	gxVFlip
.840e					_GXNotVertical:
.840e	50 03		bvc $8413			bvc 	_GXNotHorizontal
.8410	8d 55 06	sta $0655			sta 	gxHFlip
.8413					_GXNotHorizontal:
.8413	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8416	8e 51 06	stx $0651			stx 	gxAcquireVector
.8419	20 2d 86	jsr $862d			jsr 	gxOpenBitmap 				; open the bitmap.
.841c	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.841f	4a		lsr a				lsr 	a
.8420	4a		lsr a				lsr 	a
.8421	4a		lsr a				lsr 	a
.8422	29 07		and #$07			and		#7
.8424	1a		inc a				inc 	a
.8425	8d 53 06	sta $0653			sta 	gxScale
.8428	64 38		stz $38				stz 	gzTemp1						; start first line
.842a					_GXGELoop:
.842a	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.842c	4d 54 06	eor $0654			eor 	gxVFlip
.842f	aa		tax				tax 								; get the Xth line.
.8430	20 6d 84	jsr $846d			jsr 	_GXCallAcquire 				; get that data.
.8433	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8436	85 39		sta $39				sta 	gzTemp1+1
.8438					_GXGELoop2:
.8438	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.843b	cd 3a 06	cmp $063a			cmp 	gxHeight
.843e	b0 10		bcs $8450			bcs 	_GXDGEExit
.8440	20 70 84	jsr $8470			jsr 	GXRenderOneLine 			; render line
.8443	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8445	d0 f1		bne $8438			bne 	_GXGELoop2
.8447	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8449	a5 38		lda $38				lda 	gzTemp1
.844b	cd 4f 06	cmp $064f			cmp 	gxSize
.844e	d0 da		bne $842a			bne 	_GXGELoop
.8450					_GXDGEExit:
.8450	68		pla				pla 								; restore Y for next time
.8451	8d 33 06	sta $0633			sta 	gxY0
.8454	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.8457					_GXShiftLeft:
.8457	18		clc				clc
.8458	ad 4f 06	lda $064f			lda 	gxSize
.845b	6d 31 06	adc $0631			adc 	gxX0
.845e	8d 31 06	sta $0631			sta 	gxX0
.8461	90 03		bcc $8466			bcc 	_GXSLNoCarry
.8463	ee 32 06	inc $0632			inc 	gxX0+1
.8466					_GXSLNoCarry:
.8466	ca		dex				dex
.8467	d0 ee		bne $8457			bne 	_GXShiftLeft
.8469	20 3e 86	jsr $863e			jsr 	GXCloseBitmap
.846c	60		rts				rts
.846d					_GXCallAcquire:
.846d	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8470					GXRenderOneLine:
.8470	20 4b 86	jsr $864b			jsr 	GXPositionCalc 				; calculate position/offset.
.8473	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8476	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.8478					_GXROLLoop1:
.8478	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.847b	85 3b		sta $3b				sta 	gzTemp2+1
.847d					_GXROLLoop2:
.847d	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.847f	4d 55 06	eor $0655			eor 	gxHFlip
.8482	aa		tax				tax 								; read from the pixel buffer
.8483	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8486	f0 0a		beq $8492			beq 	_GXZeroPixel 				; don't draw if zero.
.8488	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.848a	2d 3e 06	and $063e			and 	gxANDValue
.848d	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8490	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8492					_GXZeroPixel:
.8492	c8		iny				iny 								; advance pointer
.8493	d0 05		bne $849a			bne 	_GXNoShift
.8495	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8497	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.849a					_GXNoShift:
.849a	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.849c	d0 df		bne $847d			bne 	_GXROLLoop2
.849e	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.84a0	a5 3a		lda $3a				lda 	gzTemp2
.84a2	cd 4f 06	cmp $064f			cmp 	gxSize
.84a5	d0 d1		bne $8478			bne 	_GXROLLoop1
.84a7	ee 33 06	inc $0633			inc 	gxY0
.84aa	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.84ab					GXFontHandler:
.84ab	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.84ad	4d 3b 06	eor $063b			eor 	gxMode
.84b0	8d 56 06	sta $0656			sta 	gxUseMode
.84b3	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.84b5	06 36		asl $36				asl	 	gzTemp0 					; x 2
.84b7	26 37		rol $37				rol	 	gzTemp0+1
.84b9	06 36		asl $36				asl	 	gzTemp0 					; x 4
.84bb	26 37		rol $37				rol	 	gzTemp0+1
.84bd	06 36		asl $36				asl	 	gzTemp0 					; x 8
.84bf	26 37		rol $37				rol	 	gzTemp0+1
.84c1	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.84c3	09 c0		ora #$c0			ora 	#$C0
.84c5	85 37		sta $37				sta 	gzTemp0+1
.84c7	a9 08		lda #$08			lda 	#8 							; size 8x8
.84c9	a2 d1		ldx #$d1			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.84cb	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.84cd	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84d0	60		rts				rts
.84d1					GXGetGraphicDataFont:
.84d1	8a		txa				txa 								; X->Y
.84d2	a8		tay				tay
.84d3	a6 01		ldx $01				ldx 	1 							; preserve old value
.84d5	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.84d7	85 01		sta $01				sta 	1
.84d9	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.84db	86 01		stx $01				stx 	1 							; put old value back.
.84dd	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.84df					_GXExpand:
.84df	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.84e2	0a		asl a				asl 	a 							; shift bit 7 into C
.84e3	90 08		bcc $84ed			bcc 	_GXNoPixel
.84e5	48		pha				pha 								; if set, set pixel buffer to current colour.
.84e6	ad 3c 06	lda $063c			lda 	gxColour
.84e9	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.84ec	68		pla				pla
.84ed					_GXNoPixel:
.84ed	e8		inx				inx 								; do the whole byte.
.84ee	e0 08		cpx #$08			cpx 	#8
.84f0	d0 ed		bne $84df			bne 	_GXExpand
.84f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/sprite.asm

.84f3					GXSpriteHandler:
.84f3	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.84f5	4d 3b 06	eor $063b			eor 	gxMode
.84f8	8d 56 06	sta $0656			sta 	gxUseMode
.84fb	a9 18		lda #$18			lda 	#GXSpritePage
.84fd	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.8500	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.8502	da		phx				phx
.8503	20 2d 86	jsr $862d			jsr 	GXOpenBitmap 				; can access sprite information
.8506	68		pla				pla
.8507	20 bc 86	jsr $86bc			jsr 	GXFindSprite 				; get the sprite address
.850a	20 3e 86	jsr $863e			jsr 	GXCloseBitmap
.850d	a9 08		lda #$08			lda 	#8
.850f	a2 17		ldx #$17			ldx 	#GXSpriteAcquire & $FF
.8511	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.8513	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.8516	60		rts				rts
.8517					GXSpriteAcquire:
.8517	ad 57 06	lda $0657			lda 	GXspriteBasePage
.851a	85 0b		sta $0b				sta 	GFXEditSlot
.851c	a0 00		ldy #$00			ldy 	#0
.851e	8a		txa				txa
.851f	0a		asl a				asl 	a
.8520	0a		asl a				asl 	a
.8521	0a		asl a				asl 	a
.8522	aa		tax				tax
.8523					_GXSALoop:
.8523	bd 00 62	lda $6200,x			lda 	GXMappingAddress+$200,x
.8526	e8		inx				inx
.8527	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.852a	c8		iny				iny
.852b	c0 08		cpy #$08			cpy 	#8
.852d	d0 f4		bne $8523			bne 	_GXSALoop
.852f	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.8530					GraphicDraw:
.8530	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8532	b0 06		bcs $853a			bcs 	_GDCoordinate
.8534	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.8536	84 37		sty $37				sty 	gzTemp0+1
.8538	80 2c		bra $8566			bra 	_GDExecuteA 				; and execute
.853a					_GDCoordinate:
.853a	48		pha				pha 								; save AXY
.853b	da		phx				phx
.853c	5a		phy				phy
.853d	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.853f					_GDCopy1:
.853f	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8542	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8545	ca		dex				dex
.8546	10 f7		bpl $853f			bpl 	_GDCopy1
.8548	68		pla				pla 								; update Y
.8549	8d 2b 06	sta $062b			sta 	gxCurrentY
.854c	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.854f	68		pla				pla
.8550	8d 29 06	sta $0629			sta 	gxCurrentX
.8553	68		pla				pla 								; get A (command+X.1) back
.8554	48		pha				pha
.8555	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8557	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.855a	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.855c					_GDCopy2:
.855c	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.855f	9d 31 06	sta $0631,x			sta 	gxX0,x
.8562	ca		dex				dex
.8563	10 f7		bpl $855c			bpl 	_GDCopy2
.8565	68		pla				pla 								; get command back
.8566					_GDExecuteA:
.8566	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8568	aa		tax				tax
.8569	7c 6d 85	jmp ($856d,x)			jmp 	(GDVectors,x)
.856c					GXMove:
.856c	60		rts				rts
.856d					GDVectors:
>856d							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>8571	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>8573	99 85						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>8575	ab 84						.word 	GXFontHandler 				; $04 		; Draw from font
>8577	f3 84						.word 	GXSpriteHandler 			; $05 		; Draw from sprite
>8579							.fill 	10*2 						; $06-$0F 	: Reserved
>858d	6c 85						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>858f	13 82						.word 	GXLine 						; $11 		: Draw line
>8591	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8593	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8595	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>8597	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.8599					GXSetColourMode:
.8599	a6 36		ldx $36				ldx 	gzTemp0
.859b	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.859e	a5 37		lda $37				lda 	gzTemp0+1 								;
.85a0	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.85a3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.85a5	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.85a8	ae 3c 06	ldx $063c			ldx 	gxColour
.85ab	8e 3d 06	stx $063d			stx 	gxEORValue
.85ae	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.85b0	90 03		bcc $85b5			bcc 	_GXSDCNotAndColour
.85b2	8e 3e 06	stx $063e			stx 	gxANDValue
.85b5					_GXSDCNotAndColour:
.85b5	d0 03		bne $85ba			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.85b7	9c 3d 06	stz $063d			stz 	gxEORValue
.85ba					_GXSDCNotAnd:
.85ba	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.85bb	90 08		bcc $85c5			bcc 	_GXSDCNoFlip
.85bd	ad 3e 06	lda $063e			lda	 	gxANDValue
.85c0	49 ff		eor #$ff			eor 	#$FF
.85c2	8d 3e 06	sta $063e			sta 	gxANDValue
.85c5					_GXSDCNoFlip:
.85c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.85c6					RunDemos:
.85c6	64 01		stz $01				stz 	1
.85c8	a9 0f		lda #$0f			lda 	#$0F
.85ca	8d 00 d0	sta $d000			sta 	$D000
.85cd	a9 01		lda #$01			lda 	#1
.85cf	8d 00 d1	sta $d100			sta 	$D100
.85d2	9c 01 d1	stz $d101			stz 	$D101
.85d5	9c 02 d1	stz $d102			stz 	$D102
.85d8	a9 01		lda #$01			lda 	#1
.85da	8d 03 d1	sta $d103			sta 	$D103
.85dd	a9 08		lda #$08			lda 	#8
.85df	8d 39 06	sta $0639			sta 	gxBasePage
.85e2	a9 f0		lda #$f0			lda 	#240
.85e4	8d 3a 06	sta $063a			sta 	gxHeight
.85e7					loop:
.85e7	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.85e9	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.85eb	a0 00		ldy #$00			ldy 	#(0)
.85ed	20 30 85	jsr $8530			jsr 	GraphicDraw
.85f0	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.85f2	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.85f4	a0 00		ldy #$00			ldy 	#(0)
.85f6	20 30 85	jsr $8530			jsr 	GraphicDraw
.85f9	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.85fb	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.85fd	a0 28		ldy #$28			ldy 	#(40)
.85ff	20 30 85	jsr $8530			jsr 	GraphicDraw
.8602	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8604	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8606	a0 00		ldy #$00			ldy 	#(0)
.8608	20 30 85	jsr $8530			jsr 	GraphicDraw
.860b	60		rts				rts
.860c	20 76 9d	jsr $9d76	demo:	jsr 	Random32Bit
.860f	ee 3d 06	inc $063d			inc 	gxEORValue
.8612	a9 20		lda #$20			lda 	#16*2
.8614	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8617	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.861a	20 30 85	jsr $8530			jsr 	GraphicDraw
.861d	ad 8a 04	lda $048a			lda 	RandomSeed+2
.8620	29 1c		and #$1c			and 	#$1C
.8622	a8		tay				tay
.8623	a9 0a		lda #$0a			lda 	#5*2
.8625	a2 00		ldx #$00			ldx 	#0
.8627	20 30 85	jsr $8530			jsr 	GraphicDraw
.862a	80 e0		bra $860c			bra 	demo
.862c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.862d					GXOpenBitmap:
.862d	78		sei				sei 								; no interrupts here
.862e	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8630	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8633	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8635	85 00		sta $00				sta 	0
.8637	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.8639	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.863c	58		cli				cli
.863d	60		rts				rts
.863e					GXCloseBitmap:
.863e	78		sei				sei
.863f	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8642	85 0b		sta $0b				sta 	GFXEditSlot
.8644	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8647	85 00		sta $00				sta 	0
.8649	58		cli				cli
.864a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.864b					GXPositionCalc:
.864b	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.864d	48		pha				pha
.864e	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8651	85 3c		sta $3c				sta 	gsTemp
.8653	64 3d		stz $3d				stz 	gsTemp+1
.8655	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.8657	26 3d		rol $3d				rol 	gsTemp+1
.8659	06 3c		asl $3c				asl 	gsTemp
.865b	26 3d		rol $3d				rol 	gsTemp+1
.865d	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.865e	65 3c		adc $3c				adc 	gsTemp
.8660	85 3c		sta $3c				sta 	gsTemp
.8662	90 02		bcc $8666			bcc 	_GXPCNoCarry
.8664	e6 3d		inc $3d				inc 	gsTemp+1
.8666					_GXPCNoCarry:
.8666	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8668	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.866a	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.866c	85 36		sta $36				sta 	gzTemp0
.866e	64 3d		stz $3d				stz 	gsTemp+1
.8670	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8672					_GXPCMultiply32:
.8672	06 3c		asl $3c				asl 	gsTemp
.8674	26 3d		rol $3d				rol 	gsTemp+1
.8676	3a		dec a				dec 	a
.8677	d0 f9		bne $8672			bne 	_GXPCMultiply32
.8679	18		clc				clc
.867a	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.867d	65 3c		adc $3c				adc 	gsTemp
.867f	8d 41 06	sta $0641			sta 	gsOffset
.8682	ad 32 06	lda $0632			lda 	GXX0+1
.8685	65 3d		adc $3d				adc 	gsTemp+1
.8687	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8689	90 04		bcc $868f			bcc 	_GXPCNoOverflow
.868b	29 1f		and #$1f			and 	#$1F 						; fix it up
.868d	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.868f					_GXPCNoOverflow:
.868f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8691	85 3d		sta $3d				sta 	gsTemp+1
.8693	64 3c		stz $3c				stz 	gsTemp
.8695	18		clc				clc
.8696	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8698	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.869b	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.869d	68		pla				pla
.869e	85 36		sta $36				sta 	gzTemp0
.86a0	60		rts				rts
.86a1					GXMovePositionDown:
.86a1	18		clc				clc 								; add 320 to offset/temp+1
.86a2	ad 41 06	lda $0641			lda 	gsOffset
.86a5	69 40		adc #$40			adc 	#64
.86a7	8d 41 06	sta $0641			sta 	gsOffset
.86aa	a5 3d		lda $3d				lda 	gsTemp+1
.86ac	69 01		adc #$01			adc 	#1
.86ae	85 3d		sta $3d				sta 	gsTemp+1
.86b0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.86b2	90 07		bcc $86bb			bcc 	_GXMPDExit
.86b4	38		sec				sec  								; next page
.86b5	e9 20		sbc #$20			sbc 	#$20
.86b7	85 3d		sta $3d				sta 	gsTemp+1
.86b9	e6 0b		inc $0b				inc 	GFXEditSlot
.86bb					_GXMPDExit:
.86bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/find.asm

.86bc					GXFindSprite:
>86bc	db						.byte 	$DB 						; causes a break in the emulator
.86bd	aa		tax				tax
.86be	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.86c1	85 0b		sta $0b				sta 	GFXEditSlot
.86c3	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.86c6	8d 5c 06	sta $065c			sta 	GXSAddress+1
.86c9	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.86cc	48		pha				pha 								; save twice
.86cd	48		pha				pha
.86ce	29 03		and #$03			and 	#3 							; get sprite size
.86d0	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.86d3	aa		tax				tax
.86d4	bd f2 86	lda $86f2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.86d7	68		pla				pla 								; get LUT
.86d8	4a		lsr a				lsr		a
.86d9	4a		lsr a				lsr		a
.86da	29 03		and #$03			and 	#3
.86dc	8d 5a 06	sta $065a			sta 	GXSLUT
.86df	68		pla				pla 								; address, neeeds to be x 4
.86e0	29 f0		and #$f0			and 	#$F0
.86e2	8d 5b 06	sta $065b			sta 	GXSAddress
.86e5	0e 5b 06	asl $065b			asl 	GXSAddress
.86e8	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86eb	0e 5b 06	asl $065b			asl 	GXSAddress
.86ee	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86f1	60		rts				rts
.86f2					_GXFXSSTTable:
>86f2	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.86f6					GXSortXY:
.86f6	20 14 87	jsr $8714			jsr 	GXSortY 					; will be sorted on Y now
.86f9	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.86fc	cd 35 06	cmp $0635			cmp 	gxX1
.86ff	ad 32 06	lda $0632			lda 	gXX0+1
.8702	ed 36 06	sbc $0636			sbc 	gXX1+1
.8705	90 0c		bcc $8713			bcc 	_GXSXYExit 					; X0 < X1 exit
.8707	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8709	a0 04		ldy #$04			ldy 	#4
.870b	20 28 87	jsr $8728			jsr 	GXSwapXY
.870e	e8		inx				inx
.870f	c8		iny				iny
.8710	20 28 87	jsr $8728			jsr 	GXSwapXY
.8713					_GXSXYExit:
.8713	60		rts				rts
.8714					GXSortY:
.8714	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8717	cd 37 06	cmp $0637			cmp 	gxY1
.871a	90 0b		bcc $8727			bcc 	_GXSYSorted
.871c	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.871e	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8720					_GXSwap1:
.8720	20 28 87	jsr $8728			jsr 	GXSwapXY
.8723	88		dey				dey
.8724	ca		dex				dex
.8725	10 f9		bpl $8720			bpl 	_GXSwap1
.8727					_GXSYSorted:
.8727	60		rts				rts
.8728					GXSwapXY:
.8728	bd 31 06	lda $0631,x			lda 	gxX0,x
.872b	48		pha				pha
.872c	b9 31 06	lda $0631,y			lda 	gxX0,y
.872f	9d 31 06	sta $0631,x			sta 	gxX0,x
.8732	68		pla				pla
.8733	99 31 06	sta $0631,y			sta 	gxX0,y
.8736	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8737					AssembleGroup1:
.8737	a9 ff		lda #$ff			lda 	#$FF
.8739	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.873c	80 02		bra $8740			bra 	AsmGroup12
.873e					AssembleGroup2:
.873e	a5 00		lda $00				lda 	$00
.8740					AsmGroup12:
.8740	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8743	68		pla				pla 								; pop the return address to access the information following.
.8744	fa		plx				plx
.8745	20 ce 87	jsr $87ce			jsr 	AccessParameters 			; get opcode and save as base
.8748	8d a4 04	sta $04a4			sta 	BaseOpcode
.874b	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.874e	d0 08		bne $8758			bne 	_AG12HaveMask
.8750	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8752	20 d6 87	jsr $87d6			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8755	8d a5 04	sta $04a5			sta 	ModeMask
.8758					_AG12HaveMask:
.8758	20 11 89	jsr $8911			jsr 	TypeAndCalculateOperand 	; get zero page type
.875b	da		phx				phx 								; save found address mode
.875c	20 3a 88	jsr $883a			jsr 	AssembleModeX
.875f	fa		plx				plx  								; restore address mode
.8760	b0 0b		bcs $876d			bcs 	_AG12Exit
.8762	20 6e 87	jsr $876e			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8765	20 3a 88	jsr $883a			jsr 	AssembleModeX
.8768	b0 03		bcs $876d			bcs 	_AG12Exit
.876a	4c 2c ad	jmp $ad2c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.876d					_AG12Exit:
.876d	60		rts				rts
.876e					PromoteToAbsolute:
.876e	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8770	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8772	f0 19		beq $878d			beq 	_PTADo
.8774	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8776	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8778	f0 13		beq $878d			beq 	_PTADo
.877a	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.877c	e0 80		cpx #$80			cpx 	#AM_ZEROY
.877e	f0 0d		beq $878d			beq 	_PTADo
.8780	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8782	e0 d1		cpx #$d1			cpx 	#AM_IND
.8784	f0 07		beq $878d			beq 	_PTADo
.8786	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8788	e0 c0		cpx #$c0			cpx 	#AM_INDX
.878a	f0 01		beq $878d			beq 	_PTADo
.878c	60		rts				rts
.878d					_PTADo:
.878d	aa		tax				tax
.878e	60		rts				rts
.878f					AssembleGroup3:
.878f	68		pla				pla 								; get parameters, which is just the opcode.
.8790	fa		plx				plx
.8791	20 ce 87	jsr $87ce			jsr 	AccessParameters 			; get and output opcode
.8794	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte
.8797	20 75 89	jsr $8975			jsr 	CalculateOperand 			; get a 16 bit operand
.879a	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.879d	38		sec				sec
.879e	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.87a1	48		pha				pha 								; LSB in A
.87a2	ad 10 04	lda $0410			lda 	NSMantissa1
.87a5	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.87a8	aa		tax				tax 								; MSB in X
.87a9	68		pla				pla
.87aa	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.87ab	69 7f		adc #$7f			adc 	#$7F
.87ad	90 01		bcc $87b0			bcc 	_AG3NoCarry
.87af	e8		inx				inx
.87b0					_AG3NoCarry:
.87b0	38		sec				sec 								; fix back and write out anyways.
.87b1	e9 80		sbc #$80			sbc 	#$80
.87b3	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte
.87b6	e0 00		cpx #$00			cpx 	#0 							; was it in range
.87b8	f0 0a		beq $87c4			beq 	_AG3Exit
.87ba	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.87bd	29 01		and #$01			and 	#1
.87bf	f0 03		beq $87c4			beq 	_AG3Exit
.87c1	4c 31 ad	jmp $ad31			jmp 	RangeError 					; no, branch is out of range
.87c4					_AG3Exit:
.87c4	60		rts				rts
.87c5					AssembleGroup4:
.87c5	68		pla				pla 								; pop address
.87c6	fa		plx				plx
.87c7	20 ce 87	jsr $87ce			jsr 	AccessParameters 			; access and get first
.87ca	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte 			; output it.
.87cd	60		rts				rts
.87ce					AccessParameters:
.87ce	8d a1 04	sta $04a1			sta 	ParamStart
.87d1	8e a2 04	stx $04a2			stx 	ParamStart+1
.87d4	a9 01		lda #$01			lda 	#1
.87d6					GetParameter:
.87d6	5a		phy				phy
.87d7	a8		tay				tay
.87d8	ad a1 04	lda $04a1			lda 	ParamStart
.87db	85 36		sta $36				sta 	zTemp0
.87dd	ad a2 04	lda $04a2			lda 	ParamStart+1
.87e0	85 37		sta $37				sta 	zTemp0+1
.87e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e4	7a		ply				ply
.87e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.87e6					AssemblerWriteByte:
.87e6	48		pha			pha
.87e7	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.87ea	29 02		and #$02		and 	#2
.87ec	f0 1b		beq $8809		beq 	_AWBNoPrint
.87ee	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.87f1	20 24 88	jsr $8824		jsr 	PrintHex
.87f4	ad 9e 04	lda $049e		lda		AssemblerAddress
.87f7	20 24 88	jsr $8824		jsr 	PrintHex
.87fa	a9 20		lda #$20		lda 	#' '
.87fc	20 d0 ae	jsr $aed0		jsr 	EXTPrintCharacter
.87ff	68		pla			pla 									; print byte
.8800	48		pha			pha
.8801	20 24 88	jsr $8824		jsr 	PrintHex
.8804	a9 0d		lda #$0d		lda 	#13
.8806	20 d0 ae	jsr $aed0		jsr 	EXTPrintCharacter
.8809					_AWBNoPrint:
.8809	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.880c	85 36		sta $36			sta 	zTemp0
.880e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8811	f0 0e		beq $8821		beq 	_AWBRange
.8813	85 37		sta $37			sta 	zTemp0+1
.8815	68		pla			pla 									; write byte out
.8816	92 36		sta ($36)		sta 	(zTemp0)
.8818	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.881b	d0 03		bne $8820		bne 	_AWBNoCarry
.881d	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8820					_AWBNoCarry:
.8820	60		rts			rts
.8821					_AWBRange:
.8821	4c 31 ad	jmp $ad31		jmp 	RangeError
.8824					PrintHex:
.8824	48		pha				pha
.8825	4a		lsr a				lsr 	a
.8826	4a		lsr a				lsr 	a
.8827	4a		lsr a				lsr 	a
.8828	4a		lsr a				lsr 	a
.8829	20 2d 88	jsr $882d			jsr 	_PrintNibble
.882c	68		pla				pla
.882d					_PrintNibble:
.882d	29 0f		and #$0f			and 	#15
.882f	c9 0a		cmp #$0a			cmp 	#10
.8831	90 02		bcc $8835			bcc 	_NoShift
.8833	69 06		adc #$06			adc 	#6
.8835					_NoShift:
.8835	69 30		adc #$30			adc 	#48
.8837	4c d0 ae	jmp $aed0			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.883a					AssembleModeX:
.883a	5a		phy				phy
.883b	ad a3 04	lda $04a3			lda 	IsGroup1
.883e	f0 17		beq $8857			beq 	_AMXGroup2
.8840	8a		txa				txa 							; is it in group # 1
.8841	29 40		and #$40			and 	#AM_ISG1
.8843	f0 50		beq $8895			beq 	_AMXFail 				; no, give up.
.8845	8a		txa				txa 							; get back.
.8846	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8848	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.884a	d0 22		bne $886e			bne 	_AMXHaveInfo
.884c	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.884f	c9 81		cmp #$81			cmp 	#$81
.8851	f0 42		beq $8895			beq 	_AMXFail
.8853	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8855	80 17		bra $886e			bra 	_AMXHaveInfo 			; odd design decision there.
.8857					_AMXGroup2:
.8857	8a		txa				txa 							; is it in group 2 ?
.8858	29 20		and #$20			and 	#AM_ISG2
.885a	f0 39		beq $8895			beq 	_AMXFail 				; no, give up.
.885c	8a		txa				txa 							; get the offset into Y
.885d	29 1f		and #$1f			and 	#$1F
.885f	4a		lsr a				lsr 	a 						; make it 0-7.
.8860	4a		lsr a				lsr  	a
.8861	a8		tay				tay
.8862	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8865					_AMXCheckOkay:
.8865	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8866	88		dey				dey
.8867	10 fc		bpl $8865			bpl 	_AMXCheckOkay
.8869	90 2a		bcc $8895			bcc 	_AMXFail 				; not allowed.
.886b	8a		txa				txa  							; get mask back
.886c	29 1f		and #$1f			and 	#$1F
.886e					_AMXHaveInfo:
.886e	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8870	10 05		bpl $8877			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8872	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8875	d0 1e		bne $8895			bne 	_AMXFail
.8877					_AMXAnySize:
.8877	18		clc				clc 							; add offset to the base opcode
.8878	6d a4 04	adc $04a4			adc 	BaseOpcode
.887b					_AMXOutputCode:
.887b	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte 		; write the opcode out.
.887e	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8880	f0 10		beq $8892			beq 	_AMXExit
.8882	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8885	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte
.8888	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.888a	30 06		bmi $8892			bmi 	_AMXExit
.888c	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.888f	20 e6 87	jsr $87e6			jsr 	AssemblerWriteByte
.8892					_AMXExit:
.8892	7a		ply				ply
.8893	38		sec				sec
.8894	60		rts				rts
.8895					_AMXFail:
.8895	a0 00		ldy #$00			ldy 	#0
.8897					_AMXCheckOddities:
.8897	8a		txa				txa
.8898	d9 c0 88	cmp $88c0,y			cmp 	ExtraOpcode+2,y 		; match address mode
.889b	d0 16		bne $88b3			bne 	_AMXCONext
.889d	b9 be 88	lda $88be,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.88a0	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.88a3	d0 0e		bne $88b3			bne 	_AMXCONext
.88a5	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.88a7	10 05		bpl $88ae			bpl 	_AMXCONotZero
.88a9	ad 10 04	lda $0410			lda 	NSMantissa1
.88ac	d0 05		bne $88b3			bne 	_AMXCONext
.88ae					_AMXCONotZero:
.88ae	b9 bf 88	lda $88bf,y			lda 	ExtraOpcode+1,y 		; get new opcode
.88b1	80 c8		bra $887b			bra 	_AMXOutputCode 			; and assemble it
.88b3					_AMXCONext:
.88b3	c8		iny				iny
.88b4	c8		iny				iny
.88b5	c8		iny				iny
.88b6	b9 be 88	lda $88be,y			lda 	ExtraOpcode+0,y 		; end of table
.88b9	d0 dc		bne $8897			bne 	_AMXCheckOddities
.88bb					_AMXCOFail:
.88bb	7a		ply				ply
.88bc	18		clc				clc
.88bd	60		rts				rts
.88be					ExtraOpcode:
>88be	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>88c1	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>88c4	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>88c7	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>88ca	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>88cd	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>88d0	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>88d3	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>88d6	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>88d9	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>88dc	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.88dd					LabelHere:
.88dd	c8		iny				iny 								; skip .
.88de	a2 00		ldx #$00			ldx 	#0 							; get a term
.88e0	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm 				; get a term
.88e3	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.88e6	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.88e8	d0 24		bne $890e			bne 	_ALType
.88ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.88ed	85 36		sta $36				sta 	zTemp0
.88ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.88f2	85 37		sta $37				sta 	zTemp0+1
.88f4	5a		phy				phy 								; copy address in.
.88f5	a0 01		ldy #$01			ldy 	#1
.88f7	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.88fa	92 36		sta ($36)			sta 	(zTemp0)
.88fc	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.88ff	91 36		sta ($36),y			sta 	(zTemp0),y
.8901	c8		iny				iny
.8902	a9 00		lda #$00			lda 	#0
.8904	91 36		sta ($36),y			sta 	(zTemp0),y
.8906	c8		iny				iny
.8907	91 36		sta ($36),y			sta 	(zTemp0),y
.8909	c8		iny				iny
.890a	91 36		sta ($36),y			sta 	(zTemp0),y
.890c	7a		ply				ply
.890d	60		rts				rts
.890e					_ALType:
.890e	4c 36 ad	jmp $ad36			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8911					TypeAndCalculateOperand:
.8911	b1 30		lda ($30),y			lda 	(codePtr),y
.8913	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8915	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8917	f0 5b		beq $8974			beq 	_TACOExit
.8919	c9 80		cmp #$80			cmp 	#KWC_EOL
.891b	f0 57		beq $8974			beq 	_TACOExit
.891d	c8		iny				iny
.891e	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8920	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8922	f0 51		beq $8975			beq 	CalculateOperand
.8924	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8926	f0 1f		beq $8947			beq 	_TACOIndirect
.8928	88		dey				dey 								; undo get of first character
.8929	20 75 89	jsr $8975			jsr 	CalculateOperand 			; get operand
.892c	b1 30		lda ($30),y			lda 	(codePtr),y
.892e	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8930	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8932	d0 40		bne $8974			bne 	_TACOExit
.8934	c8		iny				iny
.8935	20 bd a6	jsr $a6bd			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8938	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.893a	c9 58		cmp #$58			cmp 	#'X'
.893c	f0 36		beq $8974			beq 	_TACOExit
.893e	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8940	c9 59		cmp #$59			cmp 	#'Y'
.8942	f0 30		beq $8974			beq 	_TACOExit
.8944					_TACOSyntax:
.8944	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.8947					_TACOIndirect:
.8947	20 75 89	jsr $8975			jsr 	CalculateOperand 			; get the operand
.894a	b1 30		lda ($30),y			lda 	(codePtr),y
.894c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.894e	f0 17		beq $8967			beq 	_TACOIndX
.8950	20 46 a7	jsr $a746			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8953	b1 30		lda ($30),y			lda 	(codePtr),y
.8955	a2 d1		ldx #$d1			ldx 	#AM_IND
.8957	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8959	d0 19		bne $8974			bne 	_TACOExit
.895b	c8		iny				iny
.895c	20 bd a6	jsr $a6bd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.895f	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8961	d0 e1		bne $8944			bne 	_TACOSyntax
.8963	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8965	80 0d		bra $8974			bra 	_TACOExit
.8967					_TACOIndX:
.8967	c8		iny				iny
.8968	20 bd a6	jsr $a6bd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.896b	c9 58		cmp #$58			cmp 	#'X' 						; check X
.896d	d0 d5		bne $8944			bne 	_TACOSyntax
.896f	20 46 a7	jsr $a746			jsr 	CheckRightBracket			; check )
.8972	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8974					_TACOExit:
.8974	60		rts				rts
.8975					CalculateOperand:
.8975	48		pha				pha
.8976	da		phx				phx
.8977	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8979	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger
.897c	fa		plx				plx
.897d	68		pla				pla
.897e	60		rts				rts
.a6bd					TACOCheckXY:
.a6bd	b1 30		lda ($30),y			lda 	(codePtr),y
.a6bf	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a6c1	c9 40		cmp #$40			cmp 	#$40
.a6c3	d0 21		bne $a6e6			bne 	_TCXYFail
.a6c5	b1 30		lda ($30),y			lda 	(codePtr),y
.a6c7	18		clc				clc
.a6c8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a6ca	85 37		sta $37				sta 	zTemp0+1
.a6cc	c8		iny				iny
.a6cd	b1 30		lda ($30),y			lda 	(codePtr),y
.a6cf	c8		iny				iny
.a6d0	85 36		sta $36				sta 	zTemp0
.a6d2	5a		phy				phy 								; save position
.a6d3	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a6d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6d7	d0 0c		bne $a6e5			bne 	_TCXYPopFail
.a6d9	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a6db	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6dd	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a6df	f0 08		beq $a6e9			beq 	_TCXYFound
.a6e1	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a6e3	f0 04		beq $a6e9			beq 	_TCXYFound
.a6e5					_TCXYPopFail:
.a6e5	7a		ply				ply
.a6e6					_TCXYFail:
.a6e6	a9 00		lda #$00			lda 	#0
.a6e8	60		rts				rts
.a6e9					_TCXYFound:
.a6e9	7a		ply				ply 								; restore position
.a6ea	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a6ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.897f					EditProgramCode:
.897f	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8982	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8985	20 24 a0	jsr $a024			jsr 	MemorySearch
.8988	90 05		bcc $898f			bcc 	_EPCNoDelete 				; reached the end don't delete
.898a	d0 03		bne $898f			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.898c	20 14 af	jsr $af14			jsr 	MemoryDeleteLine 			; delete the line
.898f					_EPCNoDelete:
.898f	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8992	c9 80		cmp #$80			cmp 	#KWC_EOL
.8994	f0 0d		beq $89a3			beq 	_EPCNoInsert
.8996	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8999	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.899c	20 24 a0	jsr $a024			jsr 	MemorySearch
.899f	18		clc				clc 								; insert at this point.
.89a0	20 4b af	jsr $af4b			jsr 	MemoryInsertLine 			; insert the line
.89a3					_EPCNoInsert:
.89a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.89a4					WarmStart:
.89a4	a2 ff		ldx #$ff			ldx 	#$FF
.89a6	9a		txs				txs
.89a7	20 e6 ae	jsr $aee6			jsr 	EXTInputLine 				; get line to lineBuffer
.89aa	20 3e a4	jsr $a43e			jsr 	TokeniseLine 				; tokenise the line
.89ad	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.89b0	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.89b3	d0 17		bne $89cc			bne 	_WSEditCode 				; if so,edit code.
.89b5	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.89b8	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.89ba	85 30		sta $30				sta 	codePtr
.89bc	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.89be	85 31		sta $31				sta 	codePtr+1
.89c0	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.89c3	c9 80		cmp #$80			cmp 	#KWC_EOL
.89c5	f0 dd		beq $89a4			beq 	WarmStart
.89c7	20 d5 8f	jsr $8fd5			jsr 	RUNCodePointerLine 			; execute that line.
.89ca	80 d8		bra $89a4			bra 	WarmStart
.89cc					_WSEditCode:
.89cc	20 7f 89	jsr $897f			jsr 	EditProgramCode
.89cf	20 3d 8a	jsr $8a3d			jsr 	ClearCommand
.89d2	80 d0		bra $89a4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.89d4					AssembleCommand:
.89d4	a2 00		ldx #$00			ldx 	#0
.89d6	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger 		; start address
.89d9	ad 08 04	lda $0408			lda 	NSMantissa0
.89dc	8d 9e 04	sta $049e			sta 	AssemblerAddress
.89df	ad 10 04	lda $0410			lda 	NSMantissa1
.89e2	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.89e5	20 4e a7	jsr $a74e			jsr 	CheckComma
.89e8	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; options
.89eb	ad 08 04	lda $0408			lda 	NSMantissa0
.89ee	8d a0 04	sta $04a0			sta 	AssemblerControl
.89f1	60		rts				rts
.89f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.89f3					AssertCommand:
.89f3	a2 00		ldx #$00			ldx 	#0
.89f5	20 3c 9f	jsr $9f3c			jsr 	EvaluateInteger 			; the assert test
.89f8	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; exit if result is non zero.
.89fb	d0 05		bne $8a02			bne 	_ACExit
.89fd	a9 0a		lda #$0a		lda	#10
.89ff	4c 0d 94	jmp $940d		jmp	ErrorHandler
.8a02					_ACExit:
.8a02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8a03					CallCommand:
.8a03	a2 00		ldx #$00			ldx 	#0
.8a05	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger
.8a08					_CCClear
.8a08	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8a09	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.8a0c	e0 04		cpx #$04			cpx 	#4
.8a0e	d0 f8		bne $8a08			bne 	_CCClear
.8a10	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8a12					_CCCParam:
.8a12	b1 30		lda ($30),y			lda 	(codePtr),y
.8a14	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a16	d0 09		bne $8a21			bne 	_CCCRun6502
.8a18	c8		iny				iny 								; skip comma
.8a19	e8		inx				inx	 								; next level
.8a1a	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8a1d	e0 03		cpx #$03			cpx 	#3
.8a1f	90 f1		bcc $8a12			bcc 	_CCCParam 					; done all 3 ?
.8a21					_CCCRun6502:
.8a21	5a		phy				phy 								; save position
.8a22	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8a25	85 37		sta $37				sta 	zTemp0+1
.8a27	ad 08 04	lda $0408			lda 	NSMantissa0
.8a2a	85 36		sta $36				sta 	zTemp0
.8a2c	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8a2f	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8a32	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8a35	20 3a 8a	jsr $8a3a			jsr 	_CCCZTemp0 					; call zTemp0
.8a38	7a		ply				ply 								; restore position and exit
.8a39	60		rts				rts
.8a3a					_CCCZTemp0:
.8a3a	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8a3d					ClearCommand:
.8a3d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8a3f	85 36		sta $36				sta 	0+zTemp0
.8a41	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8a43	85 37		sta $37				sta 	1+zTemp0
.8a45					_ClearZeroLoop:
.8a45	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8a47	f0 24		beq $8a6d			beq 	_ClearZeroEnd
.8a49	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8a4b	a9 00		lda #$00			lda 	#0
.8a4d					_ClearOneVariable:
.8a4d	91 36		sta ($36),y			sta 	(zTemp0),y
.8a4f	c8		iny				iny
.8a50	c0 08		cpy #$08			cpy 	#8
.8a52	d0 f9		bne $8a4d			bne 	_ClearOneVariable
.8a54	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8a56	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a58	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a5a	d0 04		bne $8a60			bne 	_ClearNotProcedure
.8a5c	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8a5e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a60					_ClearNotProcedure:
.8a60	18		clc				clc 								; go to the next variable
.8a61	b2 36		lda ($36)			lda 	(zTemp0)
.8a63	65 36		adc $36				adc 	zTemp0
.8a65	85 36		sta $36				sta 	zTemp0
.8a67	90 dc		bcc $8a45			bcc 	_ClearZeroLoop
.8a69	e6 37		inc $37				inc 	zTemp0+1
.8a6b	80 d8		bra $8a45			bra 	_ClearZeroLoop
.8a6d					_ClearZeroEnd:
.8a6d	18		clc				clc
.8a6e	a5 36		lda $36				lda 	zTemp0
.8a70	69 01		adc #$01			adc 	#1
.8a72	8d 8c 04	sta $048c			sta 	lowMemPtr
.8a75	a5 37		lda $37				lda 	zTemp0+1
.8a77	69 00		adc #$00			adc 	#0
.8a79	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8a7c	20 de a0	jsr $a0de			jsr 	StackReset
.8a7f	20 2e b0	jsr $b02e			jsr 	StringSystemInitialise
.8a82	20 2d 93	jsr $932d			jsr 	ProcedureScan
.8a85	20 91 8f	jsr $8f91			jsr 	Command_Restore
.8a88	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8a8b	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8a8e	9c a0 04	stz $04a0			stz 	AssemblerControl
.8a91	20 d4 9c	jsr $9cd4			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8a94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8a95					Command_Data:
.8a95	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8a97	a2 80		ldx #$80			ldx 	#KWC_EOL
.8a99	20 7f 93	jsr $937f			jsr 	ScanForward
.8a9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8a9d					DimCommand:
.8a9d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9f	29 c0		and #$c0			and 	#$C0
.8aa1	c9 40		cmp #$40			cmp 	#$40
.8aa3	d0 7a		bne $8b1f			bne 	_DCSyntax
.8aa5	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa7	18		clc				clc
.8aa8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8aaa	85 3f		sta $3f				sta 	zaTemp+1
.8aac	c8		iny				iny
.8aad	b1 30		lda ($30),y			lda 	(codePtr),y
.8aaf	c8		iny				iny
.8ab0	85 3e		sta $3e				sta 	zaTemp
.8ab2	5a		phy				phy
.8ab3	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8ab5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ab7	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8ab9	c9 18		cmp #$18			cmp 	#NSTProcedure
.8abb	f0 62		beq $8b1f			beq 	_DCSyntax
.8abd	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8abf	29 04		and #$04			and 	#NSBIsArray
.8ac1	f0 64		beq $8b27			beq 	_DCType
.8ac3	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8ac5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ac7	d0 59		bne $8b22			bne 	_DCRedefine
.8ac9	7a		ply				ply
.8aca	20 2a 8b	jsr $8b2a			jsr 	_DCGetSize 				; get array size, check it.
.8acd	5a		phy				phy
.8ace	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8ad0	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8ad2	7a		ply				ply 							; is there a second (e.g. ,x)
.8ad3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ad7	d0 0a		bne $8ae3			bne 	_DCOneDimension
.8ad9	c8		iny				iny 							; skip comma
.8ada	20 2a 8b	jsr $8b2a			jsr 	_DCGetSize 				; get 2nd array size
.8add	5a		phy				phy
.8ade	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8ae0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ae2	7a		ply				ply
.8ae3					_DCOneDimension:
.8ae3	5a		phy				phy 							; save position
.8ae4	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8ae6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ae8	aa		tax				tax
.8ae9	c8		iny				iny
.8aea	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8aec	e8		inx				inx 							; bump them.
.8aed	1a		inc a				inc 	a
.8aee	20 c8 ab	jsr $abc8			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8af1	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8af3	29 e0		and #$e0			and 	#$E0
.8af5	d0 23		bne $8b1a			bne 	_DCSize
.8af7	a0 02		ldy #$02			ldy 	#2 						; get base type
.8af9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8afb	20 38 8b	jsr $8b38			jsr 	ScaleByBaseType 		; scale by base type
.8afe	a5 36		lda $36				lda 	zTemp0
.8b00	a6 37		ldx $37				ldx 	zTemp0+1
.8b02	20 96 9c	jsr $9c96			jsr 	AllocateXABytes 		; allocate memory
.8b05	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8b07	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b09	c8		iny				iny
.8b0a	8a		txa				txa
.8b0b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b0d	7a		ply				ply 							; get position back
.8b0e	20 46 a7	jsr $a746			jsr 	CheckRightBracket 		; check )
.8b11	b1 30		lda ($30),y			lda 	(codePtr),y
.8b13	c8		iny				iny 							; consume in case
.8b14	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8b16	f0 85		beq $8a9d			beq 	DimCommand
.8b18	88		dey				dey 							; undo consume
.8b19	60		rts				rts
.8b1a					_DCSize:
.8b1a	a9 16		lda #$16		lda	#22
.8b1c	4c 0d 94	jmp $940d		jmp	ErrorHandler
.8b1f					_DCSyntax:
.8b1f	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.8b22					_DCRedefine:
.8b22	a9 15		lda #$15		lda	#21
.8b24	4c 0d 94	jmp $940d		jmp	ErrorHandler
.8b27					_DCType:
.8b27	4c 36 ad	jmp $ad36			jmp 	TypeError
.8b2a					_DCGetSize:
.8b2a	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8b2c	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 	; get array dimension
.8b2f	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8b31	f0 e7		beq $8b1a			beq 	_DCSize
.8b33	c9 fe		cmp #$fe			cmp 	#254
.8b35	f0 e3		beq $8b1a			beq 	_DCSize
.8b37	60		rts				rts
.8b38					ScaleByBaseType:
.8b38	29 10		and #$10			and 	#NSBIsString 			; is it string
.8b3a	d0 19		bne $8b55			bne 	_SBBTString
.8b3c	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8b3e	48		pha				pha
.8b3f	a5 36		lda $36				lda 	zTemp0
.8b41	48		pha				pha
.8b42	06 36		asl $36				asl 	zTemp0 					; x 2
.8b44	26 37		rol $37				rol 	zTemp0+1
.8b46	06 36		asl $36				asl 	zTemp0 					; x 4
.8b48	26 37		rol $37				rol 	zTemp0+1
.8b4a	68		pla				pla 							; add stacked value = x 5
.8b4b	65 36		adc $36				adc 	zTemp0
.8b4d	85 36		sta $36				sta 	zTemp0
.8b4f	68		pla				pla
.8b50	65 37		adc $37				adc 	zTemp0+1
.8b52	85 37		sta $37				sta 	zTemp0+1
.8b54	60		rts				rts
.8b55					_SBBTString:
.8b55	06 36		asl $36				asl 	zTemp0
.8b57	26 37		rol $37				rol 	zTemp0+1
.8b59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8b5a					EndCommand:
.8b5a	4c a4 89	jmp $89a4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8b5d					ForCommand:
.8b5d	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8b5f	20 79 a0	jsr $a079			jsr 	StackOpen
.8b62	a2 00		ldx #$00			ldx 	#0
.8b64	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm
.8b67	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8b6a	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8b6c	d0 49		bne $8bb7			bne		_FCError
.8b6e	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8b70	20 56 a7	jsr $a756			jsr 	CheckNextA
.8b73	e8		inx				inx
.8b74	20 3c 9f	jsr $9f3c			jsr 	EvaluateInteger 			; <from> in +1
.8b77	b1 30		lda ($30),y			lda 	(codePtr),y
.8b79	c8		iny				iny 								; consume it
.8b7a	48		pha				pha 								; save on stack for later
.8b7b	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8b7d	f0 04		beq $8b83			beq 	_FCNoSyntax
.8b7f	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8b81	d0 37		bne $8bba			bne 	_FCSyntaxError
.8b83					_FCNoSyntax:
.8b83	e8		inx				inx
.8b84	20 3c 9f	jsr $9f3c			jsr 	EvaluateInteger
.8b87	20 bd a0	jsr $a0bd			jsr 	STKSaveCodePosition 		; save loop back position
.8b8a	68		pla				pla 								; restore DOWNTO or TO
.8b8b	5a		phy				phy 								; save Y on the stack
.8b8c	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8b8e	f0 02		beq $8b92			beq 	_FCNotDownTo
.8b90	a9 02		lda #$02			lda 	#2
.8b92					_FCNotDownTo:
.8b92	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8b93	a0 10		ldy #$10			ldy 	#16
.8b95	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8b97	a0 06		ldy #$06			ldy 	#6
.8b99	ad 08 04	lda $0408			lda 	NSMantissa0
.8b9c	91 34		sta ($34),y			sta 	(basicStack),y
.8b9e	ad 10 04	lda $0410			lda 	NSMantissa1
.8ba1	c8		iny				iny
.8ba2	91 34		sta ($34),y			sta 	(basicStack),y
.8ba4	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8ba6	a2 01		ldx #$01			ldx 	#1
.8ba8	20 bd 8b	jsr $8bbd			jsr 	FCIntegerToStack
.8bab	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8bad	a2 02		ldx #$02			ldx 	#2
.8baf	20 bd 8b	jsr $8bbd			jsr 	FCIntegerToStack
.8bb2	20 dd 8b	jsr $8bdd			jsr 	CopyIndexToReference
.8bb5	7a		ply				ply 								; restore position
.8bb6	60		rts				rts
.8bb7					_FCError:
.8bb7	4c 36 ad	jmp $ad36			jmp 	TypeError
.8bba					_FCSyntaxError:
.8bba	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.8bbd					FCIntegerToStack:
.8bbd	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8bc0	10 03		bpl $8bc5			bpl	 	_FCNotNegative
.8bc2	20 7a 9f	jsr $9f7a			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8bc5					_FCNotNegative:
.8bc5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8bc8	91 34		sta ($34),y			sta 	(basicStack),y
.8bca	c8		iny				iny
.8bcb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8bce	91 34		sta ($34),y			sta 	(basicStack),y
.8bd0	c8		iny				iny
.8bd1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8bd4	91 34		sta ($34),y			sta 	(basicStack),y
.8bd6	c8		iny				iny
.8bd7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8bda	91 34		sta ($34),y			sta 	(basicStack),y
.8bdc	60		rts				rts
.8bdd					CopyIndexToReference:
.8bdd	5a		phy				phy
.8bde	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8be0	38		sec				sec 								; (because we copy from offset 8)
.8be1	b1 34		lda ($34),y			lda 	(basicStack),y
.8be3	e9 08		sbc #$08			sbc 	#8
.8be5	85 36		sta $36				sta 	zTemp0
.8be7	c8		iny				iny
.8be8	b1 34		lda ($34),y			lda 	(basicStack),y
.8bea	e9 00		sbc #$00			sbc 	#0
.8bec	85 37		sta $37				sta 	zTemp0+1
.8bee	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8bf0	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8bf2	b1 34		lda ($34),y			lda 	(basicStack),y
.8bf4	0a		asl a				asl 	a 							; into carry
.8bf5	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8bf7	90 14		bcc $8c0d			bcc 	_CITRNormal
.8bf9	38		sec				sec
.8bfa					_CITRNegative:
.8bfa	a9 00		lda #$00			lda 	#0
.8bfc	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8bfe	91 36		sta ($36),y			sta 	(zTemp0),y
.8c00	c8		iny				iny
.8c01	ca		dex				dex
.8c02	d0 f6		bne $8bfa			bne 	_CITRNegative
.8c04	88		dey				dey 								; look at MSB of mantissa
.8c05	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c07	09 80		ora #$80			ora 	#$80
.8c09	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0b	7a		ply				ply
.8c0c	60		rts				rts
.8c0d					_CITRNormal:
.8c0d	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c0f	91 36		sta ($36),y			sta 	(zTemp0),y
.8c11	c8		iny				iny
.8c12	ca		dex				dex
.8c13	d0 f8		bne $8c0d			bne 	_CITRNormal
.8c15	7a		ply				ply 								; and exit.
.8c16	60		rts				rts
.8c17					NextCommand:
.8c17	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c19	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c1b	20 a5 a0	jsr $a0a5			jsr 	StackCheckFrame
.8c1e	5a		phy				phy
.8c1f	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c21	b1 34		lda ($34),y			lda 	(basicStack),y
.8c23	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c25	30 02		bmi $8c29			bmi 	_NCStepNeg
.8c27	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c29					_NCStepNeg:
.8c29	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c2b	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c2d	18		clc				clc
.8c2e					_NCBump:
.8c2e	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c30	91 34		sta ($34),y			sta 	(basicStack),y
.8c32	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c34	c8		iny				iny 								; next byte
.8c35	ca		dex				dex 								; do four times
.8c36	d0 f6		bne $8c2e			bne 	_NCBump
.8c38	20 dd 8b	jsr $8bdd			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c3b	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c3d	b1 34		lda ($34),y			lda 	(basicStack),y
.8c3f	0a		asl a				asl 	a 							; sign bit to carry
.8c40	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c42	85 38		sta $38				sta 	zTemp1
.8c44	90 02		bcc $8c48			bcc 	_NCCompRev 					; use if step is +ve
.8c46	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c48					_NCCompRev:
.8c48	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c4a	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c4c	85 39		sta $39				sta 	zTemp1+1
.8c4e	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8c50	38		sec				sec
.8c51					_NCCompare:
.8c51	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8c53	b1 34		lda ($34),y			lda 	(basicStack),y
.8c55	a4 39		ldy $39				ldy 	zTemp1+1
.8c57	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c59	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8c5b	e6 39		inc $39				inc 	zTemp1+1
.8c5d	ca		dex				dex 								; do it 4 times.
.8c5e	d0 f1		bne $8c51			bne 	_NCCompare
.8c60	50 02		bvc $8c64			bvc 	_NCNoOverflow 				; convert to signed comparison
.8c62	49 80		eor #$80			eor 	#$80
.8c64					_NCNoOverflow:
.8c64	7a		ply				ply 								; restore Y position
.8c65	0a		asl a				asl 	a 							; is bit 7 set.
.8c66	90 04		bcc $8c6c			bcc 	_NCLoopback 				; if no , >= so loop back
.8c68	20 97 a0	jsr $a097			jsr 	StackClose 					; exit the loop
.8c6b	60		rts				rts
.8c6c					_NCLoopBack:
.8c6c	20 ce a0	jsr $a0ce			jsr 	STKLoadCodePosition 		; loop back
.8c6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8c70					Command_GOSUB:
.8c70	a2 00		ldx #$00			ldx 	#0
.8c72	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8c75	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8c77	20 79 a0	jsr $a079			jsr 	StackOpen 					; create frame
.8c7a	20 bd a0	jsr $a0bd			jsr 	STKSaveCodePosition 		; save current position
.8c7d	4c 93 8c	jmp $8c93			jmp 	GotoStackX
.8c80					Command_RETURN:
.8c80	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8c82	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8c84	20 a5 a0	jsr $a0a5			jsr 	StackCheckFrame
.8c87	20 ce a0	jsr $a0ce			jsr 	STKLoadCodePosition 		; restore code position
.8c8a	20 97 a0	jsr $a097			jsr 	StackClose
.8c8d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8c8e					GotoCommand:
.8c8e	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8c90	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger
.8c93					GotoStackX:
.8c93	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8c96	48		pha				pha 								; it is slightly inefficient, just in cases.
.8c97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8c9a	fa		plx				plx
.8c9b	20 24 a0	jsr $a024			jsr 	MemorySearch 				; transfer to line number AX.
.8c9e	90 05		bcc $8ca5			bcc 	_GotoError 					; not found, off end.
.8ca0	d0 03		bne $8ca5			bne 	_GotoError 					; not found exactly
.8ca2	4c ce 8f	jmp $8fce			jmp 	RunNewLine 					; and go straight to new line code.
.8ca5					_GotoError:
.8ca5	a9 0d		lda #$0d		lda	#13
.8ca7	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8caa					IfCommand:
.8caa	a2 00		ldx #$00			ldx 	#0 							; If what.
.8cac	20 19 9f	jsr $9f19			jsr 	EvaluateNumber
.8caf	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb1	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8cb3	d0 0a		bne $8cbf			bne 	_IFStructured
.8cb5	c8		iny				iny 								; consume THEN
.8cb6	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; is it zero
.8cb9	f0 01		beq $8cbc			beq 	_IfFail 					; if fail, go to next line
.8cbb	60		rts				rts 								; if THEN just continue
.8cbc					_IfFail:
.8cbc	4c 33 90	jmp $9033			jmp 	EOLCommand
.8cbf					_IfStructured:
.8cbf	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; is it zero
.8cc2	d0 07		bne $8ccb			bne 	_IfExit 					; if not, then continue normally.
.8cc4	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8cc6	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8cc8	20 7f 93	jsr $937f			jsr 	ScanForward 				; and run from there/
.8ccb					_IfExit:
.8ccb	60		rts				rts
.8ccc					ElseCode:
.8ccc	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8cce	aa		tax				tax 								; so just go to the structure exit
.8ccf	20 7f 93	jsr $937f			jsr 	ScanForward
.8cd2	60		rts				rts
.8cd3					EndIf:
.8cd3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8cd4					LetCommand:
.8cd4	a2 00		ldx #$00			ldx 	#0
.8cd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd8	c9 10		cmp #$10			cmp 	#KWD_AT
.8cda	d0 16		bne $8cf2			bne 	_LCStandard
.8cdc	c8		iny				iny 								; skip equal
.8cdd	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm 				; get a number
.8ce0	20 2b 99	jsr $992b			jsr 	Dereference 				; dereference it
.8ce3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8ce6	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ce8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8ceb	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ced	d0 10		bne $8cff			bne 	_LCMain
.8cef	4c 36 ad	jmp $ad36			jmp 	TypeError 					; was a reference before.
.8cf2					_LCStandard:
.8cf2	ad fe 97	lda $97fe			lda 	PrecedenceLevel+"*"			; precedence > this
.8cf5	20 18 98	jsr $9818			jsr 	EvaluateExpressionAtPrecedence
.8cf8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8cfb	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8cfd	f0 0e		beq $8d0d			beq 	_LetGoProc 					; it's a procedure call.
.8cff					_LCMain:
.8cff	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8d01	20 56 a7	jsr $a756			jsr 	CheckNextA
.8d04	e8		inx				inx 								; RHS
.8d05	20 10 9f	jsr $9f10			jsr 	EvaluateValue
.8d08	ca		dex				dex
.8d09	20 10 8d	jsr $8d10			jsr 	AssignVariable
.8d0c	60		rts				rts
.8d0d					_LetGoProc:
.8d0d	4c a9 8e	jmp $8ea9			jmp 	CallProcedure
.8d10					AssignVariable:
.8d10	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8d13	48		pha				pha 								; save a copy
.8d14	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8d17	29 10		and #$10			and 	#NSBIsString
.8d19	d0 0b		bne $8d26			bne 	_ASError
.8d1b	68		pla				pla 								; get back
.8d1c	29 10		and #$10			and 	#NSBIsString 				; check type
.8d1e	d0 03		bne $8d23			bne 	_ASString
.8d20	4c 53 98	jmp $9853			jmp 	AssignNumber
.8d23					_ASString:
.8d23	4c c1 98	jmp $98c1			jmp 	AssignString
.8d26					_ASError:
.8d26	4c 36 ad	jmp $ad36			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8d29					Command_List:
.8d29	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8d2c	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8d2f	a9 ff		lda #$ff			lda 	#$FF
.8d31	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d34	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d37	b1 30		lda ($30),y			lda 	(codePtr),y
.8d39	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3b	f0 1e		beq $8d5b			beq 	_CLSecond
.8d3d	20 b9 8d	jsr $8db9			jsr 	CLIsDigit 					; if not digit, list all
.8d40	b0 24		bcs $8d66			bcs 	_CLStart
.8d42	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8d44	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger
.8d47	b1 30		lda ($30),y			lda 	(codePtr),y
.8d49	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d4b	f0 0e		beq $8d5b			beq 	_CLSecond 					; if so go get it
.8d4d	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8d50	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d53	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8d56	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d59	80 0b		bra $8d66			bra 	_CLStart
.8d5b					_CLSecond:
.8d5b	c8		iny				iny 								; consume comma
.8d5c	20 b9 8d	jsr $8db9			jsr 	CLIsDigit 					; digit found
.8d5f	b0 05		bcs $8d66			bcs 	_CLStart 					; if not, continue listing
.8d61	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8d63	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger
.8d66					_CLStart
.8d66	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d68	85 30		sta $30				sta 	codePtr
.8d6a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d6c	85 31		sta $31				sta 	codePtr+1
.8d6e					_CLLoop:
.8d6e	20 11 af	jsr $af11			jsr 	EXTBreakCheck 				; break check
.8d71	f0 30		beq $8da3			beq 	_CLExit
.8d73	b2 30		lda ($30)			lda 	(codePtr)
.8d75	f0 2c		beq $8da3			beq 	_CLExit
.8d77	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8d79	20 a6 8d	jsr $8da6			jsr 	CLCompareLineNo
.8d7c	90 18		bcc $8d96			bcc 	_CLNext
.8d7e	a2 07		ldx #$07			ldx 	#7
.8d80	20 a6 8d	jsr $8da6			jsr 	CLCompareLineNo
.8d83	f0 02		beq $8d87			beq 	_CLDoThisOne
.8d85	b0 0f		bcs $8d96			bcs 	_CLNext
.8d87					_CLDoThisOne:
.8d87	20 db 91	jsr $91db			jsr 	ListConvertLine 			; convert line into token Buffer
.8d8a	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d8c	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8d8e	20 66 94	jsr $9466			jsr 	PrintStringXA
.8d91	a9 0d		lda #$0d			lda 	#13 						; new line
.8d93	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.8d96					_CLNext:
.8d96	18		clc				clc
.8d97	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d99	65 30		adc $30				adc 	codePtr
.8d9b	85 30		sta $30				sta 	codePtr
.8d9d	90 02		bcc $8da1			bcc 	_CREExit
.8d9f	e6 31		inc $31				inc 	codePtr+1
.8da1					_CREExit:
.8da1	80 cb		bra $8d6e			bra 	_CLLoop
.8da3					_CLExit:
.8da3	4c a4 89	jmp $89a4			jmp 	WarmStart
.8da6					CLCompareLineNo:
.8da6	38		sec				sec
.8da7	a0 01		ldy #$01			ldy 	#1
.8da9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dab	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8dae	85 36		sta $36				sta 	zTemp0
.8db0	c8		iny				iny
.8db1	b1 30		lda ($30),y			lda 	(codePtr),y
.8db3	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8db6	05 36		ora $36				ora 	zTemp0
.8db8	60		rts				rts
.8db9					CLIsDigit:
.8db9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dbb	c9 30		cmp #$30			cmp 	#"0"
.8dbd	90 03		bcc $8dc2			bcc	 	_CLIDExitFalse
.8dbf	c9 3a		cmp #$3a			cmp 	#"9"+1
.8dc1	60		rts				rts
.8dc2					_CLIDExitFalse:
.8dc2	38		sec				sec
.8dc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8dc4					Command_LOCAL:
.8dc4	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8dc6	20 d2 8d	jsr $8dd2			jsr 	LocaliseNextTerm 			; convert term to a local.
.8dc9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dcb	c8		iny				iny
.8dcc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dce	f0 f4		beq $8dc4			beq 	Command_LOCAL
.8dd0	88		dey				dey 								; unpick pre-get
.8dd1	60		rts				rts
.8dd2					LocaliseNextTerm:
.8dd2	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm 				; evaluate the term
.8dd5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dd8	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8dda	f0 69		beq $8e45			beq		_LNTError
.8ddc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ddf	85 36		sta $36				sta 	zTemp0
.8de1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8de4	85 37		sta $37				sta  	zTemp0+1
.8de6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8de9	29 10		and #$10			and 	#NSBIsString
.8deb	d0 22		bne $8e0f			bne 	_LNTPushString
.8ded	5a		phy				phy
.8dee	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8df0					_LNTPushNumLoop:
.8df0	b1 36		lda ($36),y			lda		(zTemp0),y
.8df2	20 57 a0	jsr $a057			jsr 	StackPushByte
.8df5	a9 00		lda #$00			lda 	#0
.8df7	91 36		sta ($36),y			sta 	(zTemp0),y
.8df9	c8		iny				iny
.8dfa	c0 05		cpy #$05			cpy 	#5
.8dfc	d0 f2		bne $8df0			bne 	_LNTPushNumLoop
.8dfe	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e00	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e03	a5 37		lda $37				lda 	zTemp0+1
.8e05	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e08	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e0a	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e0d	7a		ply				ply
.8e0e	60		rts				rts
.8e0f					_LNTPushString:
.8e0f	5a		phy				phy
.8e10	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e12	85 38		sta $38				sta 	zTemp1
.8e14	a0 01		ldy #$01			ldy 	#1
.8e16	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e18	85 39		sta $39				sta 	zTemp1+1
.8e1a	a0 00		ldy #$00			ldy 	#0 							; output string
.8e1c	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8e1e	f0 0a		beq $8e2a			beq 	_LNTStringOut
.8e20					_LNTPushStrLoop:
.8e20	b1 38		lda ($38),y			lda 	(zTemp1),y
.8e22	f0 06		beq $8e2a			beq 	_LNTStringOut
.8e24	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e27	c8		iny				iny
.8e28	80 f6		bra $8e20			bra 	_LNTPushStrLoop
.8e2a					_LNTStringOut:
.8e2a	98		tya				tya									; output length
.8e2b	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e2e	a9 00		lda #$00			lda 	#0 							; clear original string.
.8e30	92 38		sta ($38)			sta 	(zTemp1)
.8e32	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e35	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e38	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e3b	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e3e	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e40	20 57 a0	jsr $a057			jsr 	StackPushByte
.8e43	7a		ply				ply
.8e44	60		rts				rts
.8e45					_LNTError:
.8e45	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.a6ed					LocalPopValue:
.a6ed	20 70 a0	jsr $a070			jsr 	StackPopByte
.a6f0	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a6f2	d0 17		bne $a70b			bne 	_LPVString
.a6f4	20 70 a0	jsr $a070			jsr 	StackPopByte 				; address
.a6f7	85 37		sta $37				sta 	zTemp0+1
.a6f9	20 70 a0	jsr $a070			jsr 	StackPopByte
.a6fc	85 36		sta $36				sta 	zTemp0
.a6fe	5a		phy				phy
.a6ff	a0 04		ldy #$04			ldy 	#4 							; copy back
.a701					_LPVNumberCopy:
.a701	20 70 a0	jsr $a070			jsr 	StackPopByte
.a704	91 36		sta ($36),y			sta 	(zTemp0),y
.a706	88		dey				dey
.a707	10 f8		bpl $a701			bpl 	_LPVNumberCopy
.a709	7a		ply				ply 								; and complete
.a70a	60		rts				rts
.a70b					_LPVString:
.a70b	20 70 a0	jsr $a070			jsr 	StackPopByte 				; address of record => zTemp0
.a70e	85 37		sta $37				sta 	zTemp0+1
.a710	20 70 a0	jsr $a070			jsr 	StackPopByte
.a713	85 36		sta $36				sta 	zTemp0
.a715	5a		phy				phy
.a716	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a718	85 38		sta $38				sta 	zTemp1
.a71a	a0 01		ldy #$01			ldy 	#1
.a71c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a71e	85 39		sta $39				sta 	zTemp1+1
.a720	20 70 a0	jsr $a070			jsr 	StackPopByte 				; # to get => y
.a723	a8		tay				tay
.a724	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a726	f0 0e		beq $a736			beq 	_LPVStringCopied
.a728	a9 00		lda #$00			lda 	#0 							; NULL on end
.a72a	91 38		sta ($38),y			sta 	(zTemp1),y
.a72c					_LPVStringCopy:
.a72c	88		dey				dey
.a72d	30 07		bmi $a736			bmi 	_LPVStringCopied
.a72f	20 70 a0	jsr $a070			jsr 	StackPopByte
.a732	91 38		sta ($38),y			sta 	(zTemp1),y
.a734	80 f6		bra $a72c			bra 	_LPVStringCopy
.a736					_LPVStringCopied:
.a736	fa		plx				plx
.a737	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e48					NewCommand:
.8e48	20 02 a0	jsr $a002			jsr 	MemoryNew
.8e4b	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e4e	20 3d 8a	jsr $8a3d			jsr 	ClearCommand 				; clear everything.
.8e51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8e52					Command_Print:
.8e52	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8e53					_CPLoop:
.8e53	08		php				php 								; save last action flag
.8e54	b1 30		lda ($30),y			lda 	(codePtr),y
.8e56	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8e58	f0 46		beq $8ea0			beq 	_CPExit
.8e5a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8e5c	f0 42		beq $8ea0			beq 	_CPExit
.8e5e	68		pla				pla 								; throw last action flag
.8e5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8e61	c8		iny				iny
.8e62	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8e64	f0 37		beq $8e9d			beq 	_CPContinueWithSameLine
.8e66	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8e68	f0 2e		beq $8e98			beq 	_CPTab
.8e6a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8e6c	f0 26		beq $8e94			beq 	_CPNewLine
.8e6e	88		dey				dey 								; undo the get.
.8e6f	a2 00		ldx #$00			ldx 	#0
.8e71	20 10 9f	jsr $9f10			jsr 	EvaluateValue 				; get a value into slot 0
.8e74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8e77	29 10		and #$10			and 	#NSBIsString
.8e79	f0 0b		beq $8e86			beq 	_CPNumber
.8e7b	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8e7e	ad 08 04	lda $0408			lda 	NSMantissa0
.8e81	20 66 94	jsr $9466			jsr 	PrintStringXA
.8e84	80 cc		bra $8e52			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e86					_CPNumber:
.8e86	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e88	20 e6 9d	jsr $9de6			jsr 	ConvertNumberToString 		; convert to string
.8e8b	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8e8d	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8e8f	20 66 94	jsr $9466			jsr 	PrintStringXA
.8e92	80 be		bra $8e52			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e94					_CPNewLine:
.8e94	a9 0d		lda #$0d			lda 	#13
.8e96	80 02		bra $8e9a			bra 	_CPPrintChar
.8e98					_CPTab:
.8e98	a9 09		lda #$09			lda 	#9 							; print TAB
.8e9a					_CPPrintChar:
.8e9a	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.8e9d					_CPContinueWithSameLine:
.8e9d	38		sec				sec 								; loop round with carry set, which
.8e9e	80 b3		bra $8e53			bra 	_CPLoop 					; will inhibit final CR
.8ea0					_CPExit:
.8ea0	28		plp				plp 								; get last action flag
.8ea1	b0 05		bcs $8ea8			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ea3	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ea5	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.8ea8					_CPExit2:
.8ea8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ea9					CallProcedure:
.8ea9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8eab	b1 30		lda ($30),y			lda 	(codePtr),y
.8ead	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8eaf	f0 0c		beq $8ebd			beq 	_CPEndParam
.8eb1					_CPParamLoop:
.8eb1	20 16 98	jsr $9816			jsr 	EvaluateExpression 			; get parameter onto stack
.8eb4	e8		inx				inx 								; bump next stack
.8eb5	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb7	c8		iny				iny
.8eb8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8eba	f0 f5		beq $8eb1			beq 	_CPParamLoop
.8ebc	88		dey				dey 								; unpick.
.8ebd					_CPEndParam:
.8ebd	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8ec0	c8		iny				iny									; skip right bracket
.8ec1	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ec3	20 79 a0	jsr $a079			jsr 	StackOpen
.8ec6	20 bd a0	jsr $a0bd			jsr 	STKSaveCodePosition 		; save loop position
.8ec9	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8ecc	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ece	ad 10 04	lda $0410			lda 	NSMantissa1
.8ed1	85 37		sta $37				sta 	zTemp0+1
.8ed3	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8ed5	b2 36		lda ($36)			lda 	(zTemp0)
.8ed7	85 30		sta $30				sta 	safePtr
.8ed9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8edb	85 31		sta $31				sta 	safePtr+1
.8edd	c8		iny				iny
.8ede	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee0	85 32		sta $32				sta 	safePtr+2
.8ee2	c8		iny				iny
.8ee3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ee5	85 33		sta $33				sta 	safePtr+3
.8ee7	c8		iny				iny 								; get Y offset -> Y
.8ee8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eea	a8		tay				tay
.8eeb	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8eed	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8ef0	f0 13		beq $8f05			beq 	_ParamExit 					; if so, exit.
.8ef2					_ParamExtract:
.8ef2	ca		dex				dex 								; put a local term on the level before
.8ef3	20 d2 8d	jsr $8dd2			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8ef6	20 10 8d	jsr $8d10			jsr 	AssignVariable 				; assign stacked value to the variable.
.8ef9	e8		inx				inx 								; advance to next parameter to do.
.8efa	e8		inx				inx
.8efb	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8efe	f0 05		beq $8f05			beq 	_ParamExit
.8f00	20 4e a7	jsr $a74e			jsr 	CheckComma 					; comma seperating parameters
.8f03	80 ed		bra $8ef2			bra 	_ParamExtract
.8f05					_ParamExit:
.8f05	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; check )
.8f08	60		rts				rts 								; and continue from here
.a738					Command_ENDPROC:
.a738	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a73a	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a73c	20 a5 a0	jsr $a0a5			jsr 	StackCheckFrame
.a73f	20 ce a0	jsr $a0ce			jsr 	STKLoadCodePosition 		; restore code position
.a742	20 97 a0	jsr $a097			jsr 	StackClose
.a745	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f09					Command_Read:
.8f09	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f0b	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm
.8f0e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f11	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f13	f0 4a		beq $8f5f			beq 	_CRSyntax 					; check reference (bit 0)
.8f15	20 a8 8f	jsr $8fa8			jsr 	SwapDataCodePtrs 			; swap code and data
.8f18	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f1b	d0 20		bne $8f3d			bne 	_CRContinueData
.8f1d					_CRKeepSearching:
.8f1d	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8f1f	aa		tax				tax
.8f20	20 7f 93	jsr $937f			jsr 	ScanForward
.8f23	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8f25	f0 16		beq $8f3d			beq 	_CRHaveData 				; found it
.8f27	18		clc				clc
.8f28	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f2a	65 30		adc $30				adc 	codePtr
.8f2c	85 30		sta $30				sta 	codePtr
.8f2e	90 02		bcc $8f32			bcc 	_CREExit
.8f30	e6 31		inc $31				inc 	codePtr+1
.8f32					_CREExit:
.8f32	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f34	b2 30		lda ($30)			lda 	(codePtr)
.8f36	d0 e5		bne $8f1d			bne 	_CRKeepSearching
.8f38	a9 0b		lda #$0b		lda	#11
.8f3a	4c 0d 94	jmp $940d		jmp	ErrorHandler
.8f3d					_CRHaveData:
.8f3d					_CRContinueData:
.8f3d	a2 01		ldx #$01			ldx 	#1
.8f3f	20 10 9f	jsr $9f10			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f42	ca		dex				dex
.8f43	20 10 8d	jsr $8d10			jsr		AssignVariable 				; do the assignment
.8f46	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8f49	b1 30		lda ($30),y			lda 	(codePtr),y
.8f4b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8f4d	d0 04		bne $8f53			bne 	_CRSwapBack
.8f4f	c8		iny				iny 								; consume comma
.8f50	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8f53					_CRSwapBack:
.8f53	20 a8 8f	jsr $8fa8			jsr 	SwapDataCodePtrs			; swap them back.
.8f56	b1 30		lda ($30),y			lda 	(codePtr),y
.8f58	c8		iny				iny
.8f59	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f5b	f0 ac		beq $8f09			beq 	Command_Read 				; if so go round again.
.8f5d	88		dey				dey 								; unpick get.
.8f5e	60		rts				rts
.8f5f					_CRSyntax:
.8f5f	4c 2c ad	jmp $ad2c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f62					RemCommand:
.8f62	b1 30		lda ($30),y			lda 	(codePtr),y
.8f64	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f66	d0 06		bne $8f6e			bne 	_RMExit
.8f68	c8		iny				iny
.8f69	98		tya				tya
.8f6a	38		sec				sec
.8f6b	71 30		adc ($30),y			adc 	(codePtr),y
.8f6d	a8		tay				tay
.8f6e					_RMExit:
.8f6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f6f					Command_REPEAT:
.8f6f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f71	20 79 a0	jsr $a079			jsr 	StackOpen
.8f74	20 bd a0	jsr $a0bd			jsr 	STKSaveCodePosition 		; save loop position
.8f77	60		rts				rts
.8f78					Command_UNTIL:
.8f78	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f7a	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f7c	20 a5 a0	jsr $a0a5			jsr 	StackCheckFrame
.8f7f	a2 00		ldx #$00			ldx 	#0
.8f81	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; work out the number
.8f84	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; check if zero
.8f87	f0 04		beq $8f8d			beq 	_CULoopBack 				; if so keep looping
.8f89	20 97 a0	jsr $a097			jsr 	StackClose		 			; return
.8f8c	60		rts				rts
.8f8d					_CULoopBack:
.8f8d	20 ce a0	jsr $a0ce			jsr 	STKLoadCodePosition 		; loop back
.8f90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f91					Command_Restore:
.8f91	20 a8 8f	jsr $8fa8			jsr 	SwapDataCodePtrs 			; swap code and data
.8f94	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f96	85 30		sta $30				sta 	codePtr
.8f98	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f9a	85 31		sta $31				sta 	codePtr+1
.8f9c	20 a8 8f	jsr $8fa8			jsr 	SwapDataCodePtrs 			; put them back
.8f9f	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8fa1	8d 9b 04	sta $049b			sta 	dataPointer+4
.8fa4	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8fa7	60		rts				rts
.8fa8					SwapDataCodePtrs:
.8fa8	da		phx				phx
.8fa9	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8fab					_SDCPLoop:
.8fab	b5 30		lda $30,x			lda 	safePtr,x
.8fad	48		pha				pha
.8fae	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8fb1	95 30		sta $30,x			sta 	safePtr,x
.8fb3	68		pla				pla
.8fb4	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8fb7	ca		dex				dex
.8fb8	10 f1		bpl $8fab			bpl 	_SDCPLoop
.8fba	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8fbd	8c 9b 04	sty $049b			sty 	dataPointer+4
.8fc0	a8		tay				tay
.8fc1	fa		plx				plx
.8fc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8fc3					CommandRUN:
.8fc3	20 3d 8a	jsr $8a3d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8fc6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fc8	85 30		sta $30				sta 	codePtr
.8fca	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fcc	85 31		sta $31				sta 	codePtr+1
.8fce					RUNNewLine:
.8fce	b2 30		lda ($30)			lda 	(codePtr)
.8fd0	f0 5e		beq $9030			beq 	CRNoProgram         		; no then END.
.8fd2	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8fd4	9a		txs				txs
.8fd5					RUNCodePointerLine:
.8fd5	a0 02		ldy #$02			ldy 	#2 							; start of program
.8fd7					_CRIncMainLoop:
.8fd7	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8fda	d0 05		bne $8fe1			bne 	_CRNoBreakCheck
.8fdc	20 11 af	jsr $af11			jsr 	EXTBreakCheck 				; break check
.8fdf	f0 4a		beq $902b			beq 	_CRBreak
.8fe1					_CRNoBreakCheck:
.8fe1	c8		iny				iny
.8fe2					_CRMainLoop:
.8fe2	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8fe5	b1 30		lda ($30),y			lda 	(codePtr),y
.8fe7	10 10		bpl $8ff9			bpl 	_CRNotKeyword
.8fe9	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8feb	b0 04		bcs $8ff1			bcs 	_CRIsKeyword
.8fed	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fef	b0 34		bcs $9025			bcs		_CRSyntaxError
.8ff1					_CRIsKeyword:
.8ff1	c8		iny				iny 								; consume command
.8ff2	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8ff3	aa		tax				tax 								; put in X for vector jump
.8ff4	20 28 90	jsr $9028			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8ff7	80 e9		bra $8fe2			bra 	_CRMainLoop 				; and loop round
.8ff9					_CRNotKeyword:
.8ff9	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ffb	f0 da		beq $8fd7			beq 	_CRIncMainLoop
.8ffd	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fff	90 05		bcc $9006			bcc 	_CRNotVariable
.9001					_CRGoLet:
.9001	20 d4 8c	jsr $8cd4			jsr 	LetCommand
.9004	80 dc		bra $8fe2			bra 	_CRMainLoop
.9006					_CRNotVariable:
.9006	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9008	f0 f7		beq $9001			beq 	_CRGoLet
.900a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.900c	f0 f3		beq $9001			beq 	_CRGoLet
.900e	c9 21		cmp #$21			cmp 	#KWD_PLING
.9010	f0 ef		beq $9001			beq 	_CRGoLet
.9012	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9014	f0 09		beq $901f			beq 	_CRGoRem
.9016	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9018	d0 0b		bne $9025			bne 	_CRSyntaxError
.901a	20 dd 88	jsr $88dd			jsr 	LabelHere
.901d	80 c3		bra $8fe2			bra 	_CRMainLoop
.901f					_CRGoRem:
.901f	c8		iny				iny
.9020	20 62 8f	jsr $8f62			jsr 	RemCommand
.9023	80 bd		bra $8fe2			bra 	_CRMainLoop
.9025					_CRSyntaxError:
.9025	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.9028					_CRCallVector0:
.9028	7c d4 90	jmp ($90d4,x)			jmp 	(VectorSet0,x)
.902b					_CRBreak:
.902b	a9 01		lda #$01		lda	#1
.902d	4c 0d 94	jmp $940d		jmp	ErrorHandler
.9030					CRNoProgram:
.9030	4c 5a 8b	jmp $8b5a			jmp 	EndCommand
.9033					EOLCommand:
.9033	18		clc				clc
.9034	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9036	65 30		adc $30				adc 	codePtr
.9038	85 30		sta $30				sta 	codePtr
.903a	90 02		bcc $903e			bcc 	_CREExit
.903c	e6 31		inc $31				inc 	codePtr+1
.903e					_CREExit:
.903e	80 8e		bra $8fce			bra 	RunNewLine
.9040					Shift1Command:
.9040	b1 30		lda ($30),y			lda 	(codePtr),y
.9042	c8		iny				iny
.9043	0a		asl a				asl 	a
.9044	aa		tax				tax
.9045	7c 36 91	jmp ($9136,x)			jmp 	(VectorSet1,x)
.9048					Shift2Command:
.9048	b1 30		lda ($30),y			lda 	(codePtr),y
.904a	c8		iny				iny
.904b	0a		asl a				asl 	a
.904c	aa		tax				tax
.904d	7c 4e 91	jmp ($914e,x)			jmp 	(VectorSet2,x)
.9050					Unused1:
.9050					Unused2:
.9050					Unused3:
.9050					Unused4:
.9050	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
>9053							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9054					VectorSetPunc:
>9054	b7 95					.word	ShiftLeft                        ; $00 <<
>9056	b1 94					.word	BinaryCompareLessEqual           ; $01 <=
>9058	a7 94					.word	BinaryCompareNotEqual            ; $02 <>
>905a	2c ad					.word	SyntaxError                      ; $03 !!3
>905c	2c ad					.word	SyntaxError                      ; $04 ><
>905e	bb 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9060	ba 95					.word	ShiftRight                       ; $06 >>
>9062	2c ad					.word	SyntaxError                      ; $07 !!7
>9064	2c ad					.word	SyntaxError                      ; $08 !!8
>9066	2c ad					.word	SyntaxError                      ; $09 !!9
>9068	2c ad					.word	SyntaxError                      ; $0a !!10
>906a	2c ad					.word	SyntaxError                      ; $0b !!11
>906c	2c ad					.word	SyntaxError                      ; $0c !!12
>906e	2c ad					.word	SyntaxError                      ; $0d !!13
>9070	2c ad					.word	SyntaxError                      ; $0e !!14
>9072	2c ad					.word	SyntaxError                      ; $0f !!15
>9074	2c ad					.word	SyntaxError                      ; $10 @
>9076	2c ad					.word	SyntaxError                      ; $11 !!17
>9078	2c ad					.word	SyntaxError                      ; $12 !!18
>907a	2c ad					.word	SyntaxError                      ; $13 [
>907c	5f a7					.word	IntegerDivide                    ; $14 \
>907e	2c ad					.word	SyntaxError                      ; $15 ]
>9080	40 97					.word	EorInteger                       ; $16 ^
>9082	2c ad					.word	SyntaxError                      ; $17 _
>9084	2c ad					.word	SyntaxError                      ; $18 `
>9086	2c ad					.word	SyntaxError                      ; $19 !!25
>9088	2c ad					.word	SyntaxError                      ; $1a !!26
>908a	2c ad					.word	SyntaxError                      ; $1b {
>908c	fa 96					.word	OraInteger                       ; $1c |
>908e	2c ad					.word	SyntaxError                      ; $1d }
>9090	2c ad					.word	SyntaxError                      ; $1e ~
>9092	2c ad					.word	SyntaxError                      ; $1f [7m<7F>[m
>9094	2c ad					.word	SyntaxError                      ; $20
>9096	86 97					.word	WordIndirect                     ; $21 !
>9098	2c ad					.word	SyntaxError                      ; $22 "
>909a	2c ad					.word	SyntaxError                      ; $23 #
>909c	2c ad					.word	SyntaxError                      ; $24 $
>909e	ac a7					.word	IntegerModulus                   ; $25 %
>90a0	b4 96					.word	AndInteger                       ; $26 &
>90a2	2c ad					.word	SyntaxError                      ; $27 '
>90a4	2c ad					.word	SyntaxError                      ; $28 (
>90a6	2c ad					.word	SyntaxError                      ; $29 )
>90a8	21 a8					.word	MulInteger                       ; $2a *
>90aa	4e 96					.word	AddInteger                       ; $2b +
>90ac	2c ad					.word	SyntaxError                      ; $2c ,
>90ae	89 96					.word	SubInteger                       ; $2d -
>90b0	2c ad					.word	SyntaxError                      ; $2e .
>90b2	b8 a9					.word	FDivideCommand                   ; $2f /
>90b4	2c ad					.word	SyntaxError                      ; $30 0
>90b6	2c ad					.word	SyntaxError                      ; $31 1
>90b8	2c ad					.word	SyntaxError                      ; $32 2
>90ba	2c ad					.word	SyntaxError                      ; $33 3
>90bc	2c ad					.word	SyntaxError                      ; $34 4
>90be	2c ad					.word	SyntaxError                      ; $35 5
>90c0	2c ad					.word	SyntaxError                      ; $36 6
>90c2	2c ad					.word	SyntaxError                      ; $37 7
>90c4	2c ad					.word	SyntaxError                      ; $38 8
>90c6	2c ad					.word	SyntaxError                      ; $39 9
>90c8	2c ad					.word	SyntaxError                      ; $3a :
>90ca	2c ad					.word	SyntaxError                      ; $3b ;
>90cc	93 94					.word	BinaryCompareLess                ; $3c <
>90ce	89 94					.word	BinaryCompareEqual               ; $3d =
>90d0	9d 94					.word	BinaryCompareGreater             ; $3e >
>90d2	ad 97					.word	ByteIndirect                     ; $3f ?
.90d4					VectorSet0:
>90d4	33 90					.word	EOLCommand                       ; $80 !0:EOF
>90d6	40 90					.word	Shift1Command                    ; $81 !1:SH1
>90d8	48 90					.word	Shift2Command                    ; $82 !2:SH2
>90da	fe aa					.word	AbsUnary                         ; $83 ABS(
>90dc	77 9c					.word	AllocUnary                       ; $84 ALLOC(
>90de	0e ab					.word	AscUnary                         ; $85 ASC(
>90e0	97 9d					.word	ChrUnary                         ; $86 CHR$(
>90e2	85 94					.word	UnaryFalse                       ; $87 FALSE
>90e4	1b ab					.word	FracUnary                        ; $88 FRAC(
>90e6	31 ab					.word	IntUnary                         ; $89 INT(
>90e8	87 ab					.word	IsValUnary                       ; $8a ISVAL(
>90ea	71 9e					.word	Unary_Left                       ; $8b LEFT$(
>90ec	43 ab					.word	LenUnary                         ; $8c LEN(
>90ee	9b 9e					.word	Unary_Mid                        ; $8d MID$(
>90f0	e7 9c					.word	Unary_Not                        ; $8e NOT(
>90f2	fd 9c					.word	Unary_Random                     ; $8f RANDOM(
>90f4	81 9e					.word	Unary_Right                      ; $90 RIGHT$(
>90f6	16 9d					.word	Unary_Rnd                        ; $91 RND(
>90f8	5d ab					.word	SgnUnary                         ; $92 SGN(
>90fa	a9 9d					.word	SpcUnary                         ; $93 SPC(
>90fc	c4 9d					.word	Unary_Str                        ; $94 STR$(
>90fe	79 94					.word	UnaryTrue                        ; $95 TRUE
>9100	7d ab					.word	ValUnary                         ; $96 VAL(
>9102	5d 8b					.word	ForCommand                       ; $97 FOR
>9104	aa 8c					.word	IfCommand                        ; $98 IF
>9106	50 90					.word	Unused1                          ; $99 PROC
>9108	6f 8f					.word	Command_REPEAT                   ; $9a REPEAT
>910a	de 93					.word	Command_WHILE                    ; $9b WHILE
>910c	d3 8c					.word	EndIf                            ; $9c ENDIF
>910e	38 a7					.word	Command_ENDPROC                  ; $9d ENDPROC
>9110	17 8c					.word	NextCommand                      ; $9e NEXT
>9112	50 90					.word	Unused4                          ; $9f THEN
>9114	78 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>9116	ff 93					.word	Command_WEND                     ; $a1 WEND
>9118	03 8a					.word	CallCommand                      ; $a2 CALL
>911a	2c ad					.word	SyntaxError                      ; $a3 CLS
>911c	95 8a					.word	Command_Data                     ; $a4 DATA
>911e	9d 8a					.word	DimCommand                       ; $a5 DIM
>9120	50 90					.word	Unused3                          ; $a6 DOWNTO
>9122	cc 8c					.word	ElseCode                         ; $a7 ELSE
>9124	70 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>9126	8e 8c					.word	GotoCommand                      ; $a9 GOTO
>9128	d4 8c					.word	LetCommand                       ; $aa LET
>912a	c4 8d					.word	Command_LOCAL                    ; $ab LOCAL
>912c	52 8e					.word	Command_Print                    ; $ac PRINT
>912e	09 8f					.word	Command_Read                     ; $ad READ
>9130	62 8f					.word	RemCommand                       ; $ae REM
>9132	80 8c					.word	Command_RETURN                   ; $af RETURN
>9134	50 90					.word	Unused2                          ; $b0 TO
.9136					VectorSet1:
>9136	2c ad					.word	SyntaxError                      ; $80 !0:EOF
>9138	2c ad					.word	SyntaxError                      ; $81 !1:SH1
>913a	2c ad					.word	SyntaxError                      ; $82 !2:SH2
>913c	d4 89					.word	AssembleCommand                  ; $83 ASSEMBLE
>913e	f3 89					.word	AssertCommand                    ; $84 ASSERT
>9140	3d 8a					.word	ClearCommand                     ; $85 CLEAR
>9142	5a 8b					.word	EndCommand                       ; $86 END
>9144	29 8d					.word	Command_List                     ; $87 LIST
>9146	48 8e					.word	NewCommand                       ; $88 NEW
>9148	91 8f					.word	Command_Restore                  ; $89 RESTORE
>914a	c3 8f					.word	CommandRUN                       ; $8a RUN
>914c	d6 91					.word	StopCommand                      ; $8b STOP
.914e					VectorSet2:
>914e	2c ad					.word	SyntaxError                      ; $80 !0:EOF
>9150	2c ad					.word	SyntaxError                      ; $81 !1:SH1
>9152	2c ad					.word	SyntaxError                      ; $82 !2:SH2
>9154	eb ab					.word	Assemble_adc                     ; $83 ADC
>9156	e3 ab					.word	Assemble_and                     ; $84 AND
>9158	ff ab					.word	Assemble_asl                     ; $85 ASL
>915a	69 ac					.word	Assemble_bcc                     ; $86 BCC
>915c	6d ac					.word	Assemble_bcs                     ; $87 BCS
>915e	75 ac					.word	Assemble_beq                     ; $88 BEQ
>9160	2c ac					.word	Assemble_bit                     ; $89 BIT
>9162	5d ac					.word	Assemble_bmi                     ; $8a BMI
>9164	71 ac					.word	Assemble_bne                     ; $8b BNE
>9166	59 ac					.word	Assemble_bpl                     ; $8c BPL
>9168	79 ac					.word	Assemble_bra                     ; $8d BRA
>916a	7d ac					.word	Assemble_brk                     ; $8e BRK
>916c	61 ac					.word	Assemble_bvc                     ; $8f BVC
>916e	65 ac					.word	Assemble_bvs                     ; $90 BVS
>9170	85 ac					.word	Assemble_clc                     ; $91 CLC
>9172	d9 ac					.word	Assemble_cld                     ; $92 CLD
>9174	99 ac					.word	Assemble_cli                     ; $93 CLI
>9176	c9 ac					.word	Assemble_clv                     ; $94 CLV
>9178	f7 ab					.word	Assemble_cmp                     ; $95 CMP
>917a	40 ac					.word	Assemble_cpx                     ; $96 CPX
>917c	3b ac					.word	Assemble_cpy                     ; $97 CPY
>917e	1d ac					.word	Assemble_dec                     ; $98 DEC
>9180	d5 ac					.word	Assemble_dex                     ; $99 DEX
>9182	b1 ac					.word	Assemble_dey                     ; $9a DEY
>9184	e7 ab					.word	Assemble_eor                     ; $9b EOR
>9186	22 ac					.word	Assemble_inc                     ; $9c INC
>9188	e5 ac					.word	Assemble_inx                     ; $9d INX
>918a	d1 ac					.word	Assemble_iny                     ; $9e INY
>918c	54 ac					.word	Assemble_jmp                     ; $9f JMP
>918e	4f ac					.word	Assemble_jsr                     ; $a0 JSR
>9190	f3 ab					.word	Assemble_lda                     ; $a1 LDA
>9192	18 ac					.word	Assemble_ldx                     ; $a2 LDX
>9194	36 ac					.word	Assemble_ldy                     ; $a3 LDY
>9196	09 ac					.word	Assemble_lsr                     ; $a4 LSR
>9198	e9 ac					.word	Assemble_nop                     ; $a5 NOP
>919a	df ab					.word	Assemble_ora                     ; $a6 ORA
>919c	95 ac					.word	Assemble_pha                     ; $a7 PHA
>919e	81 ac					.word	Assemble_php                     ; $a8 PHP
>91a0	dd ac					.word	Assemble_phx                     ; $a9 PHX
>91a2	9d ac					.word	Assemble_phy                     ; $aa PHY
>91a4	a5 ac					.word	Assemble_pla                     ; $ab PLA
>91a6	89 ac					.word	Assemble_plp                     ; $ac PLP
>91a8	f1 ac					.word	Assemble_plx                     ; $ad PLX
>91aa	ad ac					.word	Assemble_ply                     ; $ae PLY
>91ac	04 ac					.word	Assemble_rol                     ; $af ROL
>91ae	0e ac					.word	Assemble_ror                     ; $b0 ROR
>91b0	91 ac					.word	Assemble_rti                     ; $b1 RTI
>91b2	a1 ac					.word	Assemble_rts                     ; $b2 RTS
>91b4	fb ab					.word	Assemble_sbc                     ; $b3 SBC
>91b6	8d ac					.word	Assemble_sec                     ; $b4 SEC
>91b8	ed ac					.word	Assemble_sed                     ; $b5 SED
>91ba	a9 ac					.word	Assemble_sei                     ; $b6 SEI
>91bc	ef ab					.word	Assemble_sta                     ; $b7 STA
>91be	e1 ac					.word	Assemble_stp                     ; $b8 STP
>91c0	13 ac					.word	Assemble_stx                     ; $b9 STX
>91c2	31 ac					.word	Assemble_sty                     ; $ba STY
>91c4	27 ac					.word	Assemble_stz                     ; $bb STZ
>91c6	c5 ac					.word	Assemble_tax                     ; $bc TAX
>91c8	c1 ac					.word	Assemble_tay                     ; $bd TAY
>91ca	4a ac					.word	Assemble_trb                     ; $be TRB
>91cc	45 ac					.word	Assemble_tsb                     ; $bf TSB
>91ce	cd ac					.word	Assemble_tsx                     ; $c0 TSX
>91d0	b5 ac					.word	Assemble_txa                     ; $c1 TXA
>91d2	bd ac					.word	Assemble_txs                     ; $c2 TXS
>91d4	b9 ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.91d6					StopCommand:
.91d6	a9 08		lda #$08		lda	#8
.91d8	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.91db					ListConvertLine:
.91db	9c 9d 04	stz $049d			stz 	tbOffset
.91de	9c a9 04	stz $04a9			stz 	tokenBuffer
.91e1	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.91e3	b1 30		lda ($30),y			lda 	(codePtr),y
.91e5	aa		tax				tax
.91e6	88		dey				dey
.91e7	b1 30		lda ($30),y			lda 	(codePtr),y
.91e9	20 a2 a8	jsr $a8a2			jsr 	ConvertInt16
.91ec	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.91ee	86 37		stx $37				stx 	zTemp0+1
.91f0	a0 00		ldy #$00			ldy 	#0
.91f2					_LCCopyNumber:
.91f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.91f4	20 f4 92	jsr $92f4			jsr 	LCLWrite
.91f7	c8		iny				iny
.91f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.91fa	d0 f6		bne $91f2			bne 	_LCCopyNumber
.91fc					_LCPadOut:
.91fc	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.91fe	20 f4 92	jsr $92f4			jsr 	LCLWrite
.9201	ad 9d 04	lda $049d			lda 	tbOffset
.9204	c9 06		cmp #$06			cmp 	#6
.9206	d0 f4		bne $91fc			bne 	_LCPadOut
.9208	a0 03		ldy #$03			ldy 	#3 							; start position.
.920a					_LCMainLoop:
.920a	b1 30		lda ($30),y			lda 	(codePtr),y
.920c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.920e	f0 17		beq $9227			beq 	_LCExit
.9210	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9212	90 14		bcc $9228			bcc 	_LCDoubles
.9214	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9216	90 20		bcc $9238			bcc 	_LCShiftPunc
.9218	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.921a	90 2b		bcc $9247			bcc 	_LCPunctuation
.921c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.921e	90 2d		bcc $924d			bcc 	_LCIdentifiers
.9220	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9222	90 49		bcc $926d			bcc 	_LCTokens
.9224	4c c8 92	jmp $92c8			jmp 	_LCData 					; 254-5 are data objects
.9227					_LCExit:
.9227	60		rts				rts
.9228					_LCDoubles:
.9228	48		pha				pha
.9229	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.922a	29 02		and #$02			and 	#2
.922c	09 3c		ora #$3c			ora 	#60 						; make < >
.922e	20 f4 92	jsr $92f4			jsr 	LCLWrite
.9231	68		pla				pla 								; restore, do lower bit
.9232	29 03		and #$03			and 	#3
.9234	09 3c		ora #$3c			ora 	#60
.9236	80 0f		bra $9247			bra		_LCPunctuation 				; print, increment, loop
.9238					_LCShiftPunc:
.9238	aa		tax				tax 								; save in X
.9239	29 07		and #$07			and 	#7 							; lower 3 bits
.923b	f0 02		beq $923f			beq 	_LCNoAdd
.923d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.923f					_LCNoAdd:
.923f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9241	90 02		bcc $9245			bcc 	_LCNoAdd2
.9243	09 20		ora #$20			ora 	#32 						; adds $20
.9245					_LCNoAdd2:
.9245	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9247					_LCPunctuation:
.9247	c8		iny				iny 								; consume character
.9248	20 f4 92	jsr $92f4			jsr 	LCLWrite 					; write it out.
.924b	80 bd		bra $920a			bra 	_LCMainLoop 				; go round again.
.924d					_LCIdentifiers:
.924d	18		clc				clc 								; convert to physical address
.924e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9250	85 37		sta $37				sta 	zTemp0+1
.9252	c8		iny				iny
.9253	b1 30		lda ($30),y			lda 	(codePtr),y
.9255	85 36		sta $36				sta 	zTemp0
.9257	c8		iny				iny
.9258	5a		phy				phy 								; save position
.9259	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.925b					_LCOutIdentifier:
.925b	c8		iny				iny
.925c	b1 36		lda ($36),y			lda 	(zTemp0),y
.925e	29 7f		and #$7f			and 	#$7F
.9260	20 22 93	jsr $9322			jsr 	LCLLowerCase
.9263	20 f4 92	jsr $92f4			jsr 	LCLWrite
.9266	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9268	10 f1		bpl $925b			bpl 	_LCOutIdentifier
.926a	7a		ply				ply 								; restore position
.926b	80 9d		bra $920a			bra 	_LCMainLoop
.926d					_LCTokens:
.926d	aa		tax				tax 								; token in X
.926e	a9 f2		lda #$f2			lda 	#((KeywordSet2) & $FF)
.9270	85 36		sta $36				sta 	0+zTemp0
.9272	a9 a2		lda #$a2			lda 	#((KeywordSet2) >> 8)
.9274	85 37		sta $37				sta 	1+zTemp0
.9276	e0 82		cpx #$82			cpx 	#$82
.9278	f0 16		beq $9290			beq 	_LCUseShift
.927a	a9 ae		lda #$ae			lda 	#((KeywordSet1) & $FF)
.927c	85 36		sta $36				sta 	0+zTemp0
.927e	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.9280	85 37		sta $37				sta 	1+zTemp0
.9282	e0 81		cpx #$81			cpx 	#$81
.9284	f0 0a		beq $9290			beq 	_LCUseShift
.9286	a9 7c		lda #$7c			lda 	#((KeywordSet0) & $FF)
.9288	85 36		sta $36				sta 	0+zTemp0
.928a	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.928c	85 37		sta $37				sta 	1+zTemp0
.928e	80 01		bra $9291			bra 	_LCNoShift
.9290					_LCUseShift:
.9290	c8		iny				iny
.9291					_LCNoShift:
.9291	20 03 93	jsr $9303			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9294	b1 30		lda ($30),y			lda 	(codePtr),y
.9296	aa		tax				tax 								; into X
.9297					_LCFindText:
.9297	ca		dex				dex
.9298	10 0e		bpl $92a8			bpl 	_LCFoundText 				; found text.
.929a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.929c	1a		inc a				inc 	a 							; one extra for size
.929d	38		sec				sec 								; one extra for checksum
.929e	65 36		adc $36				adc 	zTemp0 						; go to next token
.92a0	85 36		sta $36				sta 	zTemp0
.92a2	90 f3		bcc $9297			bcc 	_LCFindText
.92a4	e6 37		inc $37				inc 	zTemp0+1
.92a6	80 ef		bra $9297			bra 	_LCFindText
.92a8					_LCFoundText:
.92a8	5a		phy				phy 								; save List position
.92a9	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.92ab	aa		tax				tax
.92ac	a0 02		ldy #$02			ldy 	#2
.92ae					_LCCopyToken:
.92ae	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b0	20 22 93	jsr $9322			jsr 	LCLLowerCase
.92b3	20 f4 92	jsr $92f4			jsr 	LCLWrite
.92b6	c8		iny				iny
.92b7	ca		dex				dex
.92b8	d0 f4		bne $92ae			bne 	_LCCopyToken
.92ba	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.92bc	f0 05		beq $92c3			beq 	_LCNoSpace
.92be	a9 20		lda #$20			lda 	#' '
.92c0	20 f4 92	jsr $92f4			jsr 	LCLWrite
.92c3					_LCNoSpace:
.92c3	7a		ply				ply 								; restore position.
.92c4	c8		iny				iny 								; consume token
.92c5	4c 0a 92	jmp $920a			jmp 	_LCMainLoop 				; and go around again.
.92c8					_LCData:
.92c8	48		pha				pha 								; save type $FE/$FF
.92c9	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.92cb	c9 fe		cmp #$fe			cmp 	#$FE
.92cd	f0 02		beq $92d1			beq 	_LCHaveOpener
.92cf	a2 22		ldx #$22			ldx 	#'"'
.92d1					_LCHaveOpener:
.92d1	8a		txa				txa 								; output prefix (# or ")
.92d2	20 f4 92	jsr $92f4			jsr 	LCLWrite
.92d5	c8		iny				iny 								; get count
.92d6	b1 30		lda ($30),y			lda 	(codePtr),y
.92d8	aa		tax				tax
.92d9	c8		iny				iny 								; point at first character
.92da					_LCOutData:
.92da	b1 30		lda ($30),y			lda 	(codePtr),y
.92dc	c9 00		cmp #$00			cmp 	#0
.92de	f0 03		beq $92e3			beq 	_LCNoPrint
.92e0	20 f4 92	jsr $92f4			jsr 	LCLWrite
.92e3					_LCNoPrint:
.92e3	c8		iny				iny
.92e4	ca		dex				dex
.92e5	d0 f3		bne $92da			bne 	_LCOutData
.92e7	68		pla				pla 								; closing " required ?
.92e8	c9 ff		cmp #$ff			cmp 	#$FF
.92ea	d0 05		bne $92f1			bne 	_LCNoQuote
.92ec	a9 22		lda #$22			lda 	#'"'
.92ee	20 f4 92	jsr $92f4			jsr 	LCLWrite
.92f1					_LCNoQuote:
.92f1	4c 0a 92	jmp $920a			jmp 	_LCMainLoop
.92f4					LCLWrite:
.92f4	da		phx				phx
.92f5	ae 9d 04	ldx $049d			ldx 	tbOffset
.92f8	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.92fb	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.92fe	ee 9d 04	inc $049d			inc 	tbOffset
.9301	fa		plx				plx
.9302	60		rts				rts
.9303					LCCheckSpaceRequired:
.9303	ae 9d 04	ldx $049d			ldx 	tbOffset
.9306	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9309	20 22 93	jsr $9322			jsr 	LCLLowerCase 				; saves a little effort
.930c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.930e	90 11		bcc $9321			bcc 	_LCCSRExit
.9310	c9 3a		cmp #$3a			cmp 	#"9"+1
.9312	90 08		bcc $931c			bcc 	_LCCSRSpace
.9314	c9 61		cmp #$61			cmp 	#"a"
.9316	90 09		bcc $9321			bcc 	_LCCSRExit
.9318	c9 7b		cmp #$7b			cmp 	#"z"+1
.931a	b0 05		bcs $9321			bcs 	_LCCSRExit
.931c					_LCCSRSpace:
.931c	a9 20		lda #$20			lda 	#' '
.931e	20 f4 92	jsr $92f4			jsr 	LCLWrite
.9321					_LCCSRExit:
.9321	60		rts				rts
.9322					LCLLowerCase:
.9322	c9 41		cmp #$41			cmp 	#"A"
.9324	90 06		bcc $932c			bcc 	_LCLLCOut
.9326	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9328	b0 02		bcs $932c			bcs 	_LCLLCOut
.932a	69 20		adc #$20			adc 	#$20
.932c					_LCLLCOut:
.932c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.932d					ProcedureScan:
.932d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.932f	85 30		sta $30				sta 	codePtr
.9331	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9333	85 31		sta $31				sta 	codePtr+1
.9335					_PSLoop:
.9335	b2 30		lda ($30)			lda 	(codePtr)
.9337	f0 42		beq $937b			beq 	_PSExit
.9339	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.933b	b1 30		lda ($30),y			lda 	(codePtr),y
.933d	c9 99		cmp #$99			cmp 	#KWD_PROC
.933f	d0 2d		bne $936e			bne 	_PSNext
.9341	c8		iny				iny 								; get the address of the record to zTemp0 and
.9342	b1 30		lda ($30),y			lda 	(codePtr),y
.9344	29 c0		and #$c0			and 	#$C0
.9346	c9 40		cmp #$40			cmp 	#$40
.9348	d0 32		bne $937c			bne 	_PSSyntax
.934a	b1 30		lda ($30),y			lda 	(codePtr),y
.934c	18		clc				clc
.934d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.934f	85 37		sta $37				sta 	zTemp0+1
.9351	c8		iny				iny 								; LSB
.9352	b1 30		lda ($30),y			lda 	(codePtr),y
.9354	85 36		sta $36				sta 	zTemp0
.9356	c8		iny				iny 								; character after variable call.
.9357	98		tya				tya 								; save Y offset at +7
.9358	a0 07		ldy #$07			ldy 	#7
.935a	91 36		sta ($36),y			sta 	(zTemp0),y
.935c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.935e	a0 02		ldy #$02			ldy 	#2
.9360	91 36		sta ($36),y			sta 	(zTemp0),y
.9362	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9364					_PSCopy:
.9364	b5 30		lda $30,x			lda 	safePtr,x
.9366	c8		iny				iny
.9367	91 36		sta ($36),y			sta 	(zTemp0),y
.9369	e8		inx				inx
.936a	e0 04		cpx #$04			cpx 	#4
.936c	d0 f6		bne $9364			bne 	_PSCopy
.936e					_PSNext:
.936e	18		clc				clc
.936f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9371	65 30		adc $30				adc 	codePtr
.9373	85 30		sta $30				sta 	codePtr
.9375	90 02		bcc $9379			bcc 	_CREExit
.9377	e6 31		inc $31				inc 	codePtr+1
.9379					_CREExit:
.9379	80 ba		bra $9335			bra 	_PSLoop
.937b					_PSExit:
.937b	60		rts				rts
.937c					_PSSyntax:
.937c	4c 2c ad	jmp $ad2c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.937f					ScanForward:
.937f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9381	86 37		stx $37				stx 	zTemp0+1
.9383	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9385					_ScanLoop:
.9385	b1 30		lda ($30),y			lda 	(codePtr),y
.9387	c8		iny				iny
.9388	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.938a	d0 0e		bne $939a			bne 	_ScanGoNext
.938c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.938e	f0 04		beq $9394			beq 	_ScanMatch
.9390	c5 37		cmp $37				cmp 	zTemp0+1
.9392	d0 06		bne $939a			bne 	_ScanGoNext
.9394					_ScanMatch:
.9394	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9396	d0 01		bne $9399			bne 	_ScanNotEndEOL
.9398	88		dey				dey
.9399					_ScanNotEndEOL:
.9399	60		rts				rts
.939a					_ScanGoNext:
.939a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.939c	90 e7		bcc $9385			bcc 	_ScanLoop
.939e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.93a0	90 18		bcc $93ba			bcc 	_ScanSkipOne
.93a2	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.93a4	b0 2f		bcs $93d5			bcs 	_ScanSkipData
.93a6	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.93a8	90 db		bcc $9385			bcc 	_ScanLoop 					; if not, ordinary keywords.
.93aa	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.93ac	b0 d7		bcs $9385			bcs 	_ScanLoop
.93ae	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.93b0	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.93b2	b0 d1		bcs $9385			bcs 	_ScanLoop
.93b4	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.93b6	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.93b8	80 cb		bra $9385			bra 	_ScanLoop
.93ba					_ScanSkipOne:
.93ba	c8		iny				iny 								; consume the extra one.
.93bb	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.93bd	d0 c6		bne $9385			bne 	_ScanLoop
.93bf	18		clc				clc
.93c0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93c2	65 30		adc $30				adc 	codePtr
.93c4	85 30		sta $30				sta 	codePtr
.93c6	90 02		bcc $93ca			bcc 	_CREExit
.93c8	e6 31		inc $31				inc 	codePtr+1
.93ca					_CREExit:
.93ca	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.93cc	b2 30		lda ($30)			lda 	(codePtr)
.93ce	d0 b5		bne $9385			bne 	_ScanLoop 					; if not zero, more to scan
.93d0	a9 13		lda #$13		lda	#19
.93d2	4c 0d 94	jmp $940d		jmp	ErrorHandler
.93d5					_ScanSkipData:
.93d5	88		dey				dey 								; point at data token
.93d6	c8		iny				iny
.93d7	98		tya				tya
.93d8	38		sec				sec
.93d9	71 30		adc ($30),y			adc 	(codePtr),y
.93db	a8		tay				tay
.93dc	80 a7		bra $9385			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.93de					Command_WHILE:
.93de	5a		phy				phy 								; save position of the test
.93df	a2 00		ldx #$00			ldx 	#0
.93e1	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; work out the number
.93e4	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; check if zero
.93e7	f0 0e		beq $93f7			beq 	_WHExitLoop 				; if so exit the loop
.93e9	98		tya				tya 								; position *after* test.
.93ea	7a		ply				ply 								; restore position before test, at WHILE
.93eb	88		dey				dey
.93ec	48		pha				pha 								; push after test on the stack
.93ed	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.93ef	20 79 a0	jsr $a079			jsr 	StackOpen
.93f2	20 bd a0	jsr $a0bd			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.93f5	7a		ply				ply 								; restore the position *after* the test
.93f6	60		rts				rts
.93f7					_WHExitLoop:
.93f7	68		pla				pla 								; throw post loop position
.93f8	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.93fa	aa		tax				tax
.93fb	20 7f 93	jsr $937f			jsr 	ScanForward
.93fe	60		rts				rts
.93ff					Command_WEND:
.93ff	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9401	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9403	20 a5 a0	jsr $a0a5			jsr 	StackCheckFrame
.9406	20 ce a0	jsr $a0ce			jsr 	STKLoadCodePosition 		; loop back
.9409	20 97 a0	jsr $a097			jsr 	StackClose		 			; erase the frame
.940c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a746					CheckRightBracket:
.a746	b1 30		lda ($30),y			lda 	(codePtr),y
.a748	c8		iny				iny
.a749	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a74b	d0 0f		bne $a75c			bne 	CNAFail
.a74d	60		rts				rts
.a74e					CheckComma:
.a74e	b1 30		lda ($30),y			lda 	(codePtr),y
.a750	c8		iny				iny
.a751	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a753	d0 07		bne $a75c			bne 	CNAFail
.a755	60		rts				rts
.a756					CheckNextA:
.a756	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a758	d0 02		bne $a75c			bne 	CNAFail
.a75a	c8		iny				iny 								; skip character
.a75b	60		rts				rts 								; and exit
.a75c					CNAFail:
.a75c	4c 2c ad	jmp $ad2c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.940d					ErrorHandler:
.940d	a8		tay				tay 								; find the error text
.940e	f0 49		beq $9459			beq 	_EHEnd
.9410	a2 00		ldx #$00			ldx 	#0
.9412	a9 45		lda #$45			lda 	#((ErrorText) & $FF)
.9414	85 36		sta $36				sta 	0+zTemp0
.9416	a9 ad		lda #$ad			lda 	#((ErrorText) >> 8)
.9418	85 37		sta $37				sta 	1+zTemp0
.941a					_EHFind:
.941a	88		dey				dey 								; found the error text ?
.941b	f0 0e		beq $942b			beq 	_EHFound
.941d					_EHFindZero:
.941d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.941f	e6 36		inc $36				inc 	zTemp0
.9421	d0 02		bne $9425			bne 	_EHFNoCarry
.9423	e6 37		inc $37				inc 	zTemp0+1
.9425					_EHFNoCarry:
.9425	c9 00		cmp #$00			cmp 	#0
.9427	d0 f4		bne $941d			bne 	_EHFindZero
.9429	80 ef		bra $941a			bra 	_EHFind
.942b					_EHFound:
.942b	a5 36		lda $36				lda 	zTemp0 						; print message
.942d	a6 37		ldx $37				ldx 	zTemp0+1
.942f	20 66 94	jsr $9466			jsr 	PrintStringXA
.9432	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9434	b1 30		lda ($30),y			lda 	(codePtr),y
.9436	d0 05		bne $943d			bne 	_EHAtMsg
.9438	c8		iny				iny
.9439	b1 30		lda ($30),y			lda 	(codePtr),y
.943b	f0 17		beq $9454			beq 	_EHCREnd
.943d					_EHAtMsg:
.943d	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.943f	a9 5c		lda #$5c			lda 	#_AtMsg & $FF
.9441	20 66 94	jsr $9466			jsr 	PrintStringXA
.9444	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9446	b1 30		lda ($30),y			lda 	(codePtr),y
.9448	48		pha				pha
.9449	c8		iny				iny
.944a	b1 30		lda ($30),y			lda 	(codePtr),y
.944c	aa		tax				tax
.944d	68		pla				pla
.944e	20 a2 a8	jsr $a8a2			jsr 	ConvertInt16 				; convert XA to string
.9451	20 66 94	jsr $9466			jsr 	PrintStringXA 				; and print it.
.9454					_EHCREnd:
.9454	a9 0d		lda #$0d			lda 	#13 						; new line
.9456	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.9459					_EHEnd:
.9459	4c a4 89	jmp $89a4			jmp 	WarmStart
>945c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9464	20 00
.9466					PrintStringXA:
.9466	5a		phy				phy
.9467	86 37		stx $37				stx 	zTemp0+1
.9469	85 36		sta $36				sta 	zTemp0
.946b	a0 00		ldy #$00			ldy 	#0
.946d					_PSXALoop:
.946d	b1 36		lda ($36),y			lda 	(zTemp0),y
.946f	f0 06		beq $9477			beq 	_PSXAExit
.9471	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.9474	c8		iny				iny
.9475	80 f6		bra $946d			bra 	_PSXALoop
.9477					_PSXAExit:
.9477	7a		ply				ply
.9478	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9479					UnaryTrue:
.9479	fa		plx				plx
.947a					ReturnTrue:
.947a	a9 01		lda #$01			lda 	#1  						; set to 1
.947c	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.947f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9481	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9484	60		rts				rts
.9485					UnaryFalse:
.9485	fa		plx				plx
.9486					ReturnFalse:
.9486	4c c5 9f	jmp $9fc5			jmp 	NSMSetZero 					; set it all to zero
.9489					BinaryCompareEqual:
.9489	fa		plx				plx
.948a	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.948d	c9 00		cmp #$00			cmp 	#0
.948f	f0 e9		beq $947a			beq 	ReturnTrue
.9491	80 f3		bra $9486			bra 	ReturnFalse
.9493					BinaryCompareLess:
.9493	fa		plx				plx
.9494	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.9497	c9 ff		cmp #$ff			cmp 	#$FF
.9499	f0 df		beq $947a			beq 	ReturnTrue
.949b	80 e9		bra $9486			bra 	ReturnFalse
.949d					BinaryCompareGreater:
.949d	fa		plx				plx
.949e	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.94a1	c9 01		cmp #$01			cmp 	#1
.94a3	f0 d5		beq $947a			beq 	ReturnTrue
.94a5	80 df		bra $9486			bra 	ReturnFalse
.94a7					BinaryCompareNotEqual:
.94a7	fa		plx				plx
.94a8	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.94ab	c9 00		cmp #$00			cmp 	#0
.94ad	d0 cb		bne $947a			bne 	ReturnTrue
.94af	80 d5		bra $9486			bra 	ReturnFalse
.94b1					BinaryCompareLessEqual:
.94b1	fa		plx				plx
.94b2	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.94b5	c9 01		cmp #$01			cmp 	#1
.94b7	d0 c1		bne $947a			bne 	ReturnTrue
.94b9	80 cb		bra $9486			bra 	ReturnFalse
.94bb					BinaryCompareGreaterEqual:
.94bb	fa		plx				plx
.94bc	20 c5 94	jsr $94c5			jsr 	CompareBaseCode
.94bf	c9 ff		cmp #$ff			cmp 	#$FF
.94c1	d0 b7		bne $947a			bne 	ReturnTrue
.94c3	80 c1		bra $9486			bra 	ReturnFalse
.94c5					CompareBaseCode:
.94c5	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; make both values if references.
.94c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.94cb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94ce	29 10		and #$10			and 	#NSTString
.94d0	d0 40		bne $9512			bne 	_CBCString
.94d2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.94d5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94d8	d0 3b		bne $9515			bne 	_CBCFloat
.94da	bd 00 04	lda $0400,x			lda 	NSStatus,x
.94dd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94e0	29 08		and #$08			and 	#NSTFloat
.94e2	d0 31		bne $9515			bne 	_CBCFloat
.94e4	20 18 95	jsr $9518			jsr 	CompareFixMinusZero
.94e7	e8		inx				inx
.94e8	20 18 95	jsr $9518			jsr 	CompareFixMinusZero
.94eb	ca		dex				dex
.94ec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.94ef	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.94f2	10 0b		bpl $94ff			bpl 	_CDCSameSign
.94f4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.94f7	30 16		bmi $950f			bmi 	_CBCLess 					; return $FF
.94f9					_CBCGreater:
.94f9	a9 01		lda #$01			lda 	#1
.94fb	60		rts				rts
.94fc					_CBCEqual:
.94fc	a9 00		lda #$00			lda 	#0
.94fe	60		rts				rts
.94ff					_CDCSameSign:
.94ff	20 28 96	jsr $9628			jsr 	SubTopTwoStack 				; unsigned subtract
.9502	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; or the mantissa together
.9505	f0 f5		beq $94fc			beq 	_CBCEqual 					; -0 == 0
.9507	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.950a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.950d	10 ea		bpl $94f9			bpl 	_CBCGreater
.950f					_CBCLess:
.950f	a9 ff		lda #$ff			lda 	#$FF
.9511	60		rts				rts
.9512					_CBCString:
.9512	4c 7e 95	jmp $957e			jmp 	CompareStrings
.9515					_CBCFloat:
.9515	4c 9e a9	jmp $a99e			jmp 	CompareFloat
.9518					CompareFixMinusZero:
.9518	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero
.951b	d0 03		bne $9520			bne 	_CFXMZNotZero
.951d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9520					_CFXMZNotZero:
.9520	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9521					StringConcat:
.9521	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9524	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9527	29 18		and #$18			and 	#NSBTypeMask
.9529	c9 10		cmp #$10			cmp 	#NSTString
.952b	d0 4e		bne $957b			bne		_SCType
.952d	64 38		stz $38				stz 	zTemp1 						; counting total length
.952f	e8		inx				inx
.9530	20 4e 95	jsr $954e			jsr 	_SCSetupZ0 					; setup for second
.9533	20 59 95	jsr $9559			jsr 	_SCLengthZ0 				; length for second
.9536	ca		dex				dex
.9537	20 4e 95	jsr $954e			jsr 	_SCSetupZ0 					; setup for first
.953a	20 59 95	jsr $9559			jsr 	_SCLengthZ0 				; length for first
.953d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.953f	20 52 b0	jsr $b052			jsr 	StringTempAllocate
.9542	20 6c 95	jsr $956c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9545	e8		inx				inx
.9546	20 4e 95	jsr $954e			jsr 	_SCSetupZ0 					; copy second out
.9549	20 6c 95	jsr $956c			jsr 	_SCCopy
.954c	ca		dex				dex
.954d	60		rts				rts
.954e					_SCSetupZ0:
.954e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9551	85 36		sta $36				sta 	zTemp0
.9553	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9556	85 37		sta $37				sta 	zTemp0+1
.9558	60		rts				rts
.9559					_SCLengthZ0:
.9559	5a		phy				phy
.955a	a0 00		ldy #$00			ldy 	#0
.955c					_SCLenLoop:
.955c	b1 36		lda ($36),y			lda 	(zTemp0),y
.955e	f0 0a		beq $956a			beq 	_SCLExit
.9560	c8		iny				iny
.9561	e6 38		inc $38				inc 	zTemp1
.9563	10 f7		bpl $955c			bpl		_SCLenLoop
.9565	a9 09		lda #$09		lda	#9
.9567	4c 0d 94	jmp $940d		jmp	ErrorHandler
.956a					_SCLExit:
.956a	7a		ply				ply
.956b	60		rts				rts
.956c					_SCCopy:
.956c	5a		phy				phy
.956d	a0 00		ldy #$00			ldy 	#0
.956f					_SCCopyLoop:
.956f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9571	f0 06		beq $9579			beq 	_SCCExit
.9573	20 90 b0	jsr $b090			jsr 	StringTempWrite
.9576	c8		iny				iny
.9577	80 f6		bra $956f			bra 	_SCCopyLoop
.9579					_SCCExit:
.9579	7a		ply				ply
.957a	60		rts				rts
.957b					_SCType:
.957b	4c 36 ad	jmp $ad36			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a75f					IntegerDivide:
.a75f	fa		plx				plx
.a760	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a763	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a766	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a767	0a		asl a				asl 	a
.a768	10 05		bpl $a76f			bpl 	_NotRef
.a76a	48		pha				pha
.a76b	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a76e	68		pla				pla
.a76f					_NotRef:
.a76f	0a		asl a				asl 	a
.a770	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a772	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a775	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a778	f0 03		beq $a77d			beq 	_IntegerCode 				; if clear, then we have two integers
.a77a	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.a77d					_IntegerCode:
.a77d	20 9f a7	jsr $a79f			jsr 	CheckDivideZero 			; do div zero check
.a780	20 d7 a7	jsr $a7d7			jsr 	Int32Divide 				; do the division
.a783	20 94 a8	jsr $a894			jsr 	CalculateSign 				; calculate result sign
.a786					NSMCopyPlusTwoToZero:
.a786	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a789	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a78c	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a78f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a792	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a795	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a798	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a79b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a79e	60		rts				rts
.a79f					CheckDivideZero:
.a79f	e8		inx				inx
.a7a0	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero
.a7a3	f0 02		beq $a7a7			beq 	_CDVError
.a7a5	ca		dex				dex
.a7a6	60		rts				rts
.a7a7					_CDVError:
.a7a7	a9 03		lda #$03		lda	#3
.a7a9	4c 0d 94	jmp $940d		jmp	ErrorHandler
.a7ac					IntegerModulus:
.a7ac	fa		plx				plx
.a7ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7b0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7b3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7b4	0a		asl a				asl 	a
.a7b5	10 05		bpl $a7bc			bpl 	_NotRef
.a7b7	48		pha				pha
.a7b8	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7bb	68		pla				pla
.a7bc					_NotRef:
.a7bc	0a		asl a				asl 	a
.a7bd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7bf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7c2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7c5	f0 03		beq $a7ca			beq 	_IntegerCode 				; if clear, then we have two integers
.a7c7	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.a7ca					_IntegerCode:
.a7ca					IntegerModulusNoCheck:
.a7ca	20 9f a7	jsr $a79f			jsr 	CheckDivideZero 			; do div zero check
.a7cd	20 d7 a7	jsr $a7d7			jsr 	Int32Divide 				; do the division
.a7d0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a7d3	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a7d6	60		rts				rts
.a7d7					Int32Divide:
.a7d7	48		pha				pha 								; save AXY
.a7d8	5a		phy				phy
.a7d9	20 9c 9f	jsr $9f9c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a7dc	20 c1 9f	jsr $9fc1			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a7df	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a7e1					_I32DivideLoop:
.a7e1	e8		inx				inx
.a7e2	e8		inx				inx
.a7e3	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a7e6	ca		dex				dex
.a7e7	ca		dex				dex
.a7e8	20 db 9f	jsr $9fdb			jsr 	NSMRotateLeft
.a7eb	20 17 a8	jsr $a817			jsr 	DivideCheckSubtract 		; check if subtract possible
.a7ee	90 03		bcc $a7f3			bcc 	_I32DivideNoCarryIn
.a7f0	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a7f3					_I32DivideNoCarryIn:
.a7f3	88		dey				dey 								; loop round till division completed.
.a7f4	d0 eb		bne $a7e1			bne 	_I32DivideLoop
.a7f6	7a		ply				ply 								; restore AXY and exit
.a7f7	68		pla				pla
.a7f8	60		rts				rts
.a7f9					Int32ShiftDivide:
.a7f9	48		pha				pha 								; save AY
.a7fa	5a		phy				phy
.a7fb	e8		inx				inx 								; clear S[X+2]
.a7fc	e8		inx				inx
.a7fd	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.a800	ca		dex				dex
.a801	ca		dex				dex
.a802	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a804					_I32SDLoop:
.a804	20 17 a8	jsr $a817			jsr 	DivideCheckSubtract 		; check if subtract possible
.a807	e8		inx				inx
.a808	e8		inx				inx
.a809	20 db 9f	jsr $9fdb			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a80c	ca		dex				dex
.a80d	ca		dex				dex
.a80e	20 db 9f	jsr $9fdb			jsr 	NSMRotateLeft
.a811	88		dey				dey 	 							; do 31 times
.a812	d0 f0		bne $a804			bne 	_I32SDLoop
.a814	7a		ply				ply 								; restore AY and exit
.a815	68		pla				pla
.a816	60		rts				rts
.a817					DivideCheckSubtract:
.a817	20 28 96	jsr $9628			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a81a	b0 04		bcs $a820			bcs 	_DCSExit 					; if carry set, then could do, exit
.a81c	20 02 96	jsr $9602			jsr 	AddTopTwoStack 				; add it back in
.a81f	18		clc				clc 								; and return False
.a820					_DCSExit:
.a820	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a821					MulInteger:
.a821	fa		plx				plx
.a822	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a825	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a828	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a829	0a		asl a				asl 	a
.a82a	10 05		bpl $a831			bpl 	_NotRef
.a82c	48		pha				pha
.a82d	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a830	68		pla				pla
.a831					_NotRef:
.a831	0a		asl a				asl 	a 							; put MSB of type into A:7
.a832	30 0b		bmi $a83f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a834	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a837	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a83a	f0 06		beq $a842			beq 	_IntegerCode 				; if clear, then we have two integers
.a83c	4c 75 aa	jmp $aa75			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a83f					_StringData:
.a83f	4c 40 ad	jmp $ad40			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a842					_IntegerCode:
.a842	20 4f a8	jsr $a84f			jsr 	MultiplyShort
.a845	c9 00		cmp #$00			cmp 	#0
.a847	f0 05		beq $a84e			beq 	_MIExit
.a849	a9 04		lda #$04		lda	#4
.a84b	4c 0d 94	jmp $940d		jmp	ErrorHandler
.a84e					_MIExit:
.a84e	60		rts				rts
.a84f					MultiplyShort:
.a84f	5a		phy				phy 								; save Y
.a850	20 9c 9f	jsr $9f9c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a853	20 c1 9f	jsr $9fc1			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a856	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a858					_I32MLoop:
.a858	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a85b	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a85e	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a861	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a864	f0 28		beq $a88e			beq 	_I32MExit 					; exit if zero
.a866	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a869	29 01		and #$01			and 	#1
.a86b	f0 0e		beq $a87b			beq 	_I32MNoAdd
.a86d	20 02 96	jsr $9602			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a870	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a873	10 06		bpl $a87b			bpl 	_I32MNoAdd
.a875					_I32ShiftRight:
.a875	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight 				; shift S[X] right
.a878	c8		iny				iny 								; increment shift count
.a879	80 0a		bra $a885			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a87b					_I32MNoAdd:
.a87b	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a87e	70 f5		bvs $a875			bvs 	_I32ShiftRight 				; instead.
.a880	e8		inx				inx
.a881	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a884	ca		dex				dex
.a885					_I32MShiftUpper:
.a885	e8		inx				inx 								; shift S[X+2] right
.a886	e8		inx				inx
.a887	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight
.a88a	ca		dex				dex
.a88b	ca		dex				dex
.a88c	80 ca		bra $a858			bra 	_I32MLoop 					; try again.
.a88e					_I32MExit:
.a88e	20 94 a8	jsr $a894			jsr 	CalculateSign
.a891	98		tya				tya 								; shift in A
.a892	7a		ply				ply 								; restore Y and exit
.a893	60		rts				rts
.a894					CalculateSign:
.a894	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a897	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a89a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a89d	0a		asl a				asl 	a 							; shift bit 7 into carry
.a89e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a8a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.957e					CompareStrings:
.957e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9581	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9584	29 10		and #$10			and 	#NSBIsString
.9586	f0 2c		beq $95b4			beq 	_CSTypeError
.9588	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.958b	85 36		sta $36				sta 	zTemp0
.958d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9590	85 37		sta $37				sta 	zTemp0+1
.9592	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9595	85 38		sta $38				sta 	zTemp1
.9597	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.959a	85 39		sta $39				sta 	zTemp1+1
.959c	5a		phy				phy 								; save Y so we can access strings
.959d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.959f					_CSLoop:
.959f	c8		iny				iny
.95a0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.95a2	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.95a4	d0 06		bne $95ac			bne 	_CSDifferent
.95a6	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.95a8	d0 f5		bne $959f			bne 	_CSLoop 					; still comparing
.95aa					_CSExit:
.95aa	7a		ply				ply 								; reached end, return zero in A from EOS
.95ab	60		rts				rts
.95ac					_CSDifferent:
.95ac	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.95ae	90 fa		bcc $95aa			bcc		_CSExit
.95b0	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.95b2	80 f6		bra $95aa			bra 	_CSExit
.95b4					_CSTypeError:
.95b4	4c 36 ad	jmp $ad36			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.95b7					ShiftLeft:
.95b7	38		sec				sec
.95b8	80 01		bra $95bb			bra 	ShiftMain
.95ba					ShiftRight:
.95ba	18		clc				clc
.95bb					ShiftMain:
.95bb	fa		plx				plx 								; restore X
.95bc	08		php				php 								; save direction
.95bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95c0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95c4	0a		asl a				asl 	a
.95c5	10 05		bpl $95cc			bpl 	_NotRef
.95c7	48		pha				pha
.95c8	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95cb	68		pla				pla
.95cc					_NotRef:
.95cc	0a		asl a				asl 	a
.95cd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95cf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95d2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95d5	f0 03		beq $95da			beq 	_IntegerCode 				; if clear, then we have two integers
.95d7	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.95da					_IntegerCode:
.95da	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.95dd	29 e0		and #$e0			and 	#$E0
.95df	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.95e2	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.95e5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95e8	d0 13		bne $95fd			bne 	_SMExit0 					; if >= 32 it will always return zero.
.95ea					_SMLoop:
.95ea	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.95ed	30 11		bmi $9600			bmi 	_SMExit 					; exit if done.
.95ef	28		plp				plp 								; restore direcition setting
.95f0	08		php				php
.95f1	90 05		bcc $95f8			bcc 	_SMRight
.95f3	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; shift left if CS
.95f6	80 f2		bra $95ea			bra 	_SMLoop
.95f8					_SMRight:
.95f8	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight 				; shift right if CC
.95fb	80 ed		bra $95ea			bra 	_SMLoop
.95fd					_SMExit0:
.95fd	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero 					; return zero.
.9600					_SMExit:
.9600	28		plp				plp 								; throw direction
.9601	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9602					AddTopTwoStack:
.9602	18		clc				clc
.9603	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9606	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9609	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.960c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.960f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9612	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9615	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9618	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.961b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.961e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9621	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9624	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9627	60		rts				rts
.9628					SubTopTwoStack:
.9628	38		sec				sec
.9629	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.962c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.962f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9632	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9635	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9638	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.963e	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9641	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9644	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9647	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.964a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.964d	60		rts				rts
.964e					AddInteger:
.964e	fa		plx				plx
.964f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9652	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9655	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9656	0a		asl a				asl 	a
.9657	10 05		bpl $965e			bpl 	_NotRef
.9659	48		pha				pha
.965a	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.965d	68		pla				pla
.965e					_NotRef:
.965e	0a		asl a				asl 	a 							; put MSB of type into A:7
.965f	30 0b		bmi $966c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9661	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9664	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9667	f0 06		beq $966f			beq 	_IntegerCode 				; if clear, then we have two integers
.9669	4c fd a8	jmp $a8fd			jmp 	FloatingPointAdd 							; otherwise at least one float.
.966c					_StringData:
.966c	4c 21 95	jmp $9521			jmp 	StringConcat							; at least one string - don't know both are strings.
.966f					_IntegerCode:
.966f					AddCode:
.966f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9672	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9675	10 8b		bpl $9602			bpl 	AddTopTwoStack
.9677	20 28 96	jsr $9628			jsr 	SubTopTwoStack 				; do a physical subtraction
.967a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.967d	10 09		bpl $9688			bpl 	_AddExit
.967f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9682	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9685	20 7a 9f	jsr $9f7a			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9688					_AddExit:
.9688	60		rts				rts
.9689					SubInteger:
.9689	fa		plx				plx
.968a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.968d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9690	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9691	0a		asl a				asl 	a
.9692	10 05		bpl $9699			bpl 	_NotRef
.9694	48		pha				pha
.9695	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9698	68		pla				pla
.9699					_NotRef:
.9699	0a		asl a				asl 	a 							; put MSB of type into A:7
.969a	30 0b		bmi $96a7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.969c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.969f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96a2	f0 06		beq $96aa			beq 	_IntegerCode 				; if clear, then we have two integers
.96a4	4c 02 a9	jmp $a902			jmp 	FloatingPointSub 							; otherwise at least one float.
.96a7					_StringData:
.96a7	4c 40 ad	jmp $ad40			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96aa					_IntegerCode:
.96aa	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.96ad	49 80		eor #$80			eor 	#$80
.96af	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.96b2	80 bb		bra $966f			bra 	AddCode 					; and do the same code as add.
.96b4					AndInteger:
.96b4	fa		plx				plx
.96b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96b8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96bb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96bc	0a		asl a				asl 	a
.96bd	10 05		bpl $96c4			bpl 	_NotRef
.96bf	48		pha				pha
.96c0	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c3	68		pla				pla
.96c4					_NotRef:
.96c4	0a		asl a				asl 	a
.96c5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96c7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ca	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96cd	f0 03		beq $96d2			beq 	_IntegerCode 				; if clear, then we have two integers
.96cf	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.96d2					_IntegerCode:
.96d2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96d5	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.96d8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96db	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96de	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.96e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96e4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96e7	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.96ea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96ed	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96f0	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.96f3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96f6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96f9	60		rts				rts
.96fa					OraInteger:
.96fa	fa		plx				plx
.96fb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96fe	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9701	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9702	0a		asl a				asl 	a
.9703	10 05		bpl $970a			bpl 	_NotRef
.9705	48		pha				pha
.9706	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9709	68		pla				pla
.970a					_NotRef:
.970a	0a		asl a				asl 	a
.970b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.970d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9710	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9713	f0 03		beq $9718			beq 	_IntegerCode 				; if clear, then we have two integers
.9715	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.9718					_IntegerCode:
.9718	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.971b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.971e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9721	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9724	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9727	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.972a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.972d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9730	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9733	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9736	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9739	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.973c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.973f	60		rts				rts
.9740					EorInteger:
.9740	fa		plx				plx
.9741	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9744	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9747	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9748	0a		asl a				asl 	a
.9749	10 05		bpl $9750			bpl 	_NotRef
.974b	48		pha				pha
.974c	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.974f	68		pla				pla
.9750					_NotRef:
.9750	0a		asl a				asl 	a
.9751	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9753	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9756	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9759	f0 03		beq $975e			beq 	_IntegerCode 				; if clear, then we have two integers
.975b	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.975e					_IntegerCode:
.975e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9761	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9764	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9767	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.976a	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.976d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9770	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9773	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9776	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9779	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.977c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.977f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9782	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9785	60		rts				rts
.9786					WordIndirect:
.9786	fa		plx				plx
.9787	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.978a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.978d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.978e	0a		asl a				asl 	a
.978f	10 05		bpl $9796			bpl 	_NotRef
.9791	48		pha				pha
.9792	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9795	68		pla				pla
.9796					_NotRef:
.9796	0a		asl a				asl 	a
.9797	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9799	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.979c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.979f	f0 03		beq $97a4			beq 	_IntegerCode 				; if clear, then we have two integers
.97a1	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.97a4					_IntegerCode:
.97a4	20 6f 96	jsr $966f			jsr 	AddCode 					; add the two values
.97a7	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97a9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97ac	60		rts				rts
.97ad					ByteIndirect:
.97ad	fa		plx				plx
.97ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97b1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97b4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97b5	0a		asl a				asl 	a
.97b6	10 05		bpl $97bd			bpl 	_NotRef
.97b8	48		pha				pha
.97b9	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97bc	68		pla				pla
.97bd					_NotRef:
.97bd	0a		asl a				asl 	a
.97be	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97c0	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97c3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97c6	f0 03		beq $97cb			beq 	_IntegerCode 				; if clear, then we have two integers
.97c8	4c 36 ad	jmp $ad36			jmp 	TypeError 					; anything else, type mismatch.
.97cb					_IntegerCode:
.97cb	20 6f 96	jsr $966f			jsr 	AddCode 					; add the two values
.97ce	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.97d0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a8a2					ConvertInt16:
.a8a2	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a8a5	8e 10 04	stx $0410			stx 	NSMantissa1
.a8a8	9c 18 04	stz $0418			stz 	NSMantissa2
.a8ab	9c 20 04	stz $0420			stz 	NSMantissa3
.a8ae	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a8b1	a2 00		ldx #$00			ldx 	#0 							; stack level
.a8b3	a9 0a		lda #$0a			lda 	#10 						; base
.a8b5	80 00		bra $a8b7			bra 	ConvertInt32
.a8b7					ConvertInt32:
.a8b7	5a		phy				phy
.a8b8	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a8ba	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a8bd	10 08		bpl $a8c7			bpl 	_CI32NotNeg
.a8bf	48		pha				pha
.a8c0	a9 2d		lda #$2d			lda 	#'-'
.a8c2	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a8c5	c8		iny				iny
.a8c6	68		pla				pla
.a8c7					_CI32NotNeg:
.a8c7	20 d5 a8	jsr $a8d5			jsr 	_CI32DivideConvert 			; recursive conversion
.a8ca	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a8cc	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a8cf	7a		ply				ply
.a8d0	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a8d2	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a8d4	60		rts				rts
.a8d5					_CI32DivideConvert:
.a8d5	e8		inx				inx 								; write to next slot up
.a8d6	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.a8d9	ca		dex				dex
.a8da	20 d7 a7	jsr $a7d7			jsr 	Int32Divide 				; divide
.a8dd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a8e0	48		pha				pha
.a8e1	20 86 a7	jsr $a786			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a8e4	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; is it zero ?
.a8e7	f0 06		beq $a8ef			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a8e9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a8ec	20 d5 a8	jsr $a8d5			jsr 	_CI32DivideConvert 			; and recusrively call.
.a8ef					_CI32NoRecurse:
.a8ef	68		pla				pla 								; remainder
.a8f0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a8f2	90 02		bcc $a8f6			bcc 	_CI32NotHex
.a8f4	69 26		adc #$26			adc 	#6+32
.a8f6					_CI32NotHex:
.a8f6	69 30		adc #$30			adc 	#48
.a8f8	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a8fb	c8		iny				iny
.a8fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.97d4					PrecedenceLevel:
>97d4	04					.byte	 4	; $00 <<
>97d5	02					.byte	 2	; $01 <=
>97d6	02					.byte	 2	; $02 <>
>97d7	00					.byte	 0	; $03 !!3
>97d8	00					.byte	 0	; $04 ><
>97d9	02					.byte	 2	; $05 >=
>97da	04					.byte	 4	; $06 >>
>97db	00					.byte	 0	; $07 !!7
>97dc	00					.byte	 0	; $08 !!8
>97dd	00					.byte	 0	; $09 !!9
>97de	00					.byte	 0	; $0a !!10
>97df	00					.byte	 0	; $0b !!11
>97e0	00					.byte	 0	; $0c !!12
>97e1	00					.byte	 0	; $0d !!13
>97e2	00					.byte	 0	; $0e !!14
>97e3	00					.byte	 0	; $0f !!15
>97e4	00					.byte	 0	; $10 @
>97e5	00					.byte	 0	; $11 !!17
>97e6	00					.byte	 0	; $12 !!18
>97e7	00					.byte	 0	; $13 [
>97e8	04					.byte	 4	; $14 \
>97e9	00					.byte	 0	; $15 ]
>97ea	01					.byte	 1	; $16 ^
>97eb	00					.byte	 0	; $17 _
>97ec	00					.byte	 0	; $18 `
>97ed	00					.byte	 0	; $19 !!25
>97ee	00					.byte	 0	; $1a !!26
>97ef	00					.byte	 0	; $1b {
>97f0	01					.byte	 1	; $1c |
>97f1	00					.byte	 0	; $1d }
>97f2	00					.byte	 0	; $1e ~
>97f3	00					.byte	 0	; $1f [7m<7F>[m
>97f4	00					.byte	 0	; $20
>97f5	05					.byte	 5	; $21 !
>97f6	00					.byte	 0	; $22 "
>97f7	00					.byte	 0	; $23 #
>97f8	05					.byte	 5	; $24 $
>97f9	04					.byte	 4	; $25 %
>97fa	01					.byte	 1	; $26 &
>97fb	00					.byte	 0	; $27 '
>97fc	00					.byte	 0	; $28 (
>97fd	00					.byte	 0	; $29 )
>97fe	04					.byte	 4	; $2a *
>97ff	03					.byte	 3	; $2b +
>9800	00					.byte	 0	; $2c ,
>9801	03					.byte	 3	; $2d -
>9802	00					.byte	 0	; $2e .
>9803	04					.byte	 4	; $2f /
>9804	00					.byte	 0	; $30 0
>9805	00					.byte	 0	; $31 1
>9806	00					.byte	 0	; $32 2
>9807	00					.byte	 0	; $33 3
>9808	00					.byte	 0	; $34 4
>9809	00					.byte	 0	; $35 5
>980a	00					.byte	 0	; $36 6
>980b	00					.byte	 0	; $37 7
>980c	00					.byte	 0	; $38 8
>980d	00					.byte	 0	; $39 9
>980e	00					.byte	 0	; $3a :
>980f	00					.byte	 0	; $3b ;
>9810	02					.byte	 2	; $3c <
>9811	02					.byte	 2	; $3d =
>9812	02					.byte	 2	; $3e >
>9813	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9814					EvaluateExpressionAt0:
.9814	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9816					EvaluateExpression:
.9816	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9818					EvaluateExpressionAtPrecedence:
.9818	48		pha				pha 								; save precedence level
.9819	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm 				; evaluate term into level X.
.981c	68		pla				pla 								; restore precedence level.
.981d					_EXPRLoop:
.981d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.981f	b1 30		lda ($30),y			lda 	(codePtr),y
.9821	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9823	b0 25		bcs $984a			bcs 	_EXPRExit
.9825	da		phx				phx 								; read the operator precedence
.9826	aa		tax				tax
.9827	bd d4 97	lda $97d4,x			lda 	PrecedenceLevel,x
.982a	fa		plx				plx
.982b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.982d	f0 1b		beq $984a			beq 	_EXPRExit
.982f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9831	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9833	c5 37		cmp $37				cmp 	zTemp0+1
.9835	b0 13		bcs $984a			bcs		_EXPRExit 					; if current >= operator exit
.9837	48		pha				pha 								; save current precedence.
.9838	b1 30		lda ($30),y			lda 	(codePtr),y
.983a	c8		iny				iny
.983b	48		pha				pha
.983c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.983e	e8		inx				inx 								; work out the right hand side.
.983f	20 18 98	jsr $9818			jsr 	EvaluateExpressionAtPrecedence
.9842	ca		dex				dex
.9843	68		pla				pla 								; get operator, call the code.
.9844	20 4d 98	jsr $984d			jsr 	_EXPRCaller
.9847	68		pla				pla 								; restore precedence level
.9848	80 d3		bra $981d			bra 	_EXPRLoop 					; and go round.
.984a					_EXPRExit:
.984a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.984c	60		rts				rts
.984d					_EXPRCaller:
.984d	da		phx				phx 								; save on stack, first thing is to restore it
.984e	0a		asl a				asl 	a 							; double so can use vectors into X
.984f	aa		tax				tax
.9850	7c 54 90	jmp ($9054,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a8fd					FloatingPointAdd:
.a8fd	20 9e aa	jsr $aa9e			jsr 	FloatPrepare 				; prepare for floats
.a900	80 0b		bra $a90d			bra 	FloatAdd
.a902					FloatingPointSub:
.a902	20 9e aa	jsr $aa9e			jsr 	FloatPrepare 				; prepare for floats
.a905					FloatSubtract:
.a905	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a908	49 80		eor #$80			eor 	#$80
.a90a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a90d					FloatAdd:
.a90d	48		pha				pha
.a90e	5a		phy				phy
.a90f	20 af aa	jsr $aaaf			jsr 	NSNormalise 				; normalise S[X]
.a912	f0 54		beq $a968			beq 	_FAReturn1
.a914	e8		inx				inx 								; normalise S[X+1]
.a915	20 af aa	jsr $aaaf			jsr 	NSNormalise
.a918	ca		dex				dex
.a919	c9 00		cmp #$00			cmp 	#0
.a91b	f0 6f		beq $a98c			beq 	_FAExit 					; if so, just return A
.a91d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a920	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a923	f0 1b		beq $a940			beq 	_FAExponentsEqual
.a925	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a928	a8		tay				tay
.a929	38		sec				sec 								; do a signed comparison of the exponents.
.a92a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a92d	50 02		bvc $a931			bvc 	_FANoSignedChange
.a92f	49 80		eor #$80			eor 	#$80
.a931					_FANoSignedChange:
.a931	29 80		and #$80			and 	#$80
.a933	10 03		bpl $a938			bpl 	_FAHaveMax
.a935	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a938					_FAHaveMax:
.a938	20 8f a9	jsr $a98f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a93b	e8		inx				inx
.a93c	20 8f a9	jsr $a98f			jsr 	_FAShiftToExponent
.a93f	ca		dex				dex
.a940					_FAExponentsEqual:
.a940	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a943	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a946	30 10		bmi $a958			bmi 	_FADifferentSigns
.a948	20 02 96	jsr $9602			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a94b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a94e	10 3c		bpl $a98c			bpl 	_FAExit 					; if no, we are done.
.a950	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a953	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a956	80 34		bra $a98c			bra 	_FAExit
.a958					_FADifferentSigns:
.a958	20 28 96	jsr $9628			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a95b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a95e	10 2c		bpl $a98c			bpl 	_FAExit 					; if no, we are done.
.a960	20 71 9f	jsr $9f71			jsr 	NSMNegate 					; netate result
.a963	20 7a 9f	jsr $9f7a			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a966	80 24		bra $a98c			bra 	_FAExit
.a968					_FAReturn1:
.a968	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a96b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a96e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a971	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a974	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a977	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a97a	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a97d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a980	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a983	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a986	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a989	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a98c					_FAExit:
.a98c	7a		ply				ply
.a98d	68		pla				pla
.a98e	60		rts				rts
.a98f					_FAShiftToExponent:
.a98f					_FAShiftToExponent2:
.a98f	98		tya				tya 								; compare Y to exponent
.a990	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a993	f0 08		beq $a99d			beq 	_FASEExit 					; exit if so.
.a995	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight	 			; shift the mantissa right
.a998	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a99b	80 f2		bra $a98f			bra 	_FAShiftToExponent2
.a99d					_FASEExit:
.a99d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a99e					CompareFloat:
.a99e	20 05 a9	jsr $a905			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a9a1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a9a4	29 f8		and #$f8			and 	#$F8
.a9a6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a9a9	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a9ac	f0 09		beq $a9b7			beq 	_FCExit 					; zero, so approximately identical
.a9ae	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a9b0	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a9b3	10 02		bpl $a9b7			bpl 	_FCExit
.a9b5					_FCNegative:
.a9b5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a9b7					_FCExit:
.a9b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a9b8					FDivideCommand:
.a9b8	fa		plx				plx	 								; restore stack position
.a9b9	20 9e aa	jsr $aa9e			jsr 	FloatPrepare 				; prepare for floats
.a9bc					FloatDivide:
.a9bc	48		pha				pha
.a9bd	e8		inx				inx
.a9be	20 af aa	jsr $aaaf			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a9c1	ca		dex				dex
.a9c2	c9 00		cmp #$00			cmp 	#0
.a9c4	f0 20		beq $a9e6			beq 	_FDZero
.a9c6	20 af aa	jsr $aaaf			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a9c9	f0 19		beq $a9e4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a9cb	20 f9 a7	jsr $a7f9			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a9ce	20 86 a7	jsr $a786			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a9d1	20 af aa	jsr $aaaf			jsr		NSNormalise 				; renormalise
.a9d4	20 94 a8	jsr $a894			jsr 	CalculateSign 				; calculate result sign
.a9d7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a9da	38		sec				sec
.a9db	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a9de	38		sec				sec
.a9df	e9 1e		sbc #$1e			sbc 	#30
.a9e1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9e4					_FDExit:
.a9e4	68		pla				pla
.a9e5	60		rts				rts
.a9e6					_FDZero:
.a9e6	a9 03		lda #$03		lda	#3
.a9e8	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a9eb					FloatFractionalPart:
.a9eb	5a		phy				phy
.a9ec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a9ef	29 7f		and #$7f			and 	#$7F
.a9f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9f4	20 af aa	jsr $aaaf			jsr 	NSNormalise
.a9f7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a9fa	38		sec				sec
.a9fb	e9 e0		sbc #$e0			sbc 	#$E0
.a9fd	90 31		bcc $aa30			bcc 	_FFPExit 					; already fractional
.a9ff	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aa01	b0 2a		bcs $aa2d			bcs 	_FFPZero
.aa03	a8		tay				tay 								; put count to do in Y
.aa04	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aa07	20 32 aa	jsr $aa32			jsr 	_FFPPartial
.aa0a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa0d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aa10	20 32 aa	jsr $aa32			jsr 	_FFPPartial
.aa13	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa16	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa19	20 32 aa	jsr $aa32			jsr 	_FFPPartial
.aa1c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa1f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa22	20 32 aa	jsr $aa32			jsr 	_FFPPartial
.aa25	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa28	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; zeroed check.
.aa2b	d0 03		bne $aa30			bne 	_FFPExit
.aa2d					_FFPZero:
.aa2d	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.aa30					_FFPExit:
.aa30	7a		ply				ply
.aa31	60		rts				rts
.aa32					_FFPPartial:
.aa32	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aa34	f0 17		beq $aa4d			beq 	_FFFPPExit
.aa36	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aa38	b0 0c		bcs $aa46			bcs 	_FFFPPWholeByte
.aa3a	5a		phy				phy
.aa3b					_FFFPPLeft:
.aa3b	0a		asl a				asl 	a
.aa3c	88		dey				dey
.aa3d	d0 fc		bne $aa3b			bne 	_FFFPPLeft
.aa3f	7a		ply				ply
.aa40					_FFFPPRight:
.aa40	4a		lsr a				lsr 	a
.aa41	88		dey				dey
.aa42	d0 fc		bne $aa40			bne 	_FFFPPRight
.aa44	80 07		bra $aa4d			bra 	_FFFPPExit
.aa46					_FFFPPWholeByte:
.aa46	98		tya				tya 								; subtract 8 from count
.aa47	38		sec				sec
.aa48	e9 08		sbc #$08			sbc 	#8
.aa4a	a8		tay				tay
.aa4b	a9 00		lda #$00			lda 	#0 							; and clear all
.aa4d					_FFFPPExit:
.aa4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aa4e					FloatIntegerPart:
.aa4e	48		pha				pha
.aa4f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aa52	f0 1f		beq $aa73			beq 	_FIPExit 					; if so do nothing
.aa54	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; is it zero ?
.aa57	f0 17		beq $aa70			beq 	_FIPZero 					; if so return zero.
.aa59	20 af aa	jsr $aaaf			jsr 	NSNormalise 				; normalise
.aa5c	f0 12		beq $aa70			beq 	_FIPZero 					; normalised to zero, exit zero
.aa5e					_FIPShift:
.aa5e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aa61	10 08		bpl $aa6b			bpl 	_FIPCheckZero
.aa63	20 e8 9f	jsr $9fe8			jsr 	NSMShiftRight 				; shift mantissa right
.aa66	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aa69	80 f3		bra $aa5e			bra 	_FIPShift
.aa6b					_FIPCheckZero:
.aa6b	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; avoid -0 problem
.aa6e	d0 03		bne $aa73			bne 	_FIPExit 					; set to zero if mantissa zero.
.aa70					_FIPZero:
.aa70	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.aa73					_FIPExit:
.aa73	68		pla				pla
.aa74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aa75					FloatingPointMultiply:
.aa75	20 9e aa	jsr $aa9e			jsr 	FloatPrepare 				; prepare for floats
.aa78					FloatMultiply:
.aa78	48		pha				pha
.aa79	20 af aa	jsr $aaaf			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa7c	f0 1b		beq $aa99			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa7e	e8		inx				inx
.aa7f	20 af aa	jsr $aaaf			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa82	ca		dex				dex
.aa83	c9 00		cmp #$00			cmp 	#0
.aa85	f0 0f		beq $aa96			beq 	_FDSetZero
.aa87	20 4f a8	jsr $a84f			jsr 	MultiplyShort 				; calculate the result.
.aa8a	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aa8d	18		clc				clc
.aa8e	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aa91	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa94	80 03		bra $aa99			bra 	_FDExit
.aa96					_FDSetZero:
.aa96	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero 					; return 0
.aa99					_FDExit:
.aa99	20 af aa	jsr $aaaf			jsr 	NSNormalise 				; normalise the result
.aa9c	68		pla				pla
.aa9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aa9e					FloatPrepare:
.aa9e	20 26 99	jsr $9926			jsr 	DereferenceTopTwo 			; dereference the top two values
.aaa1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aaa4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aaa7	29 10		and #$10			and 	#NSBIsString
.aaa9	d0 01		bne $aaac			bne 	_FDType
.aaab	60		rts				rts
.aaac					_FDType:
.aaac	4c 36 ad	jmp $ad36			jmp 	TypeError
.aaaf					NSNormalise:
.aaaf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aab2	29 80		and #$80			and 	#$80
.aab4	09 08		ora #$08			ora 	#NSTFloat
.aab6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aab9	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; if zero exit
.aabc	d0 09		bne $aac7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aabe	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aac1	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aac4	a9 00		lda #$00			lda 	#0 							; set Z flag
.aac6	60		rts				rts
.aac7					_NSNormaliseOptimise:
.aac7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aaca	d0 22		bne $aaee			bne 	_NSNormaliseLoop
.aacc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aacf	30 1d		bmi $aaee			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aad1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aad4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aad7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aada	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aadd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aae0	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.aae3	bd 28 04	lda $0428,x			lda 	NSExponent,x
.aae6	38		sec				sec
.aae7	e9 08		sbc #$08			sbc 	#8
.aae9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aaec	80 d9		bra $aac7			bra 	_NSNormaliseOptimise
.aaee					_NSNormaliseLoop:
.aaee	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.aaf1	70 08		bvs $aafb			bvs 	_NSNExit 					; exit if so with Z flag clear
.aaf3	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; shift mantissa left
.aaf6	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.aaf9	80 f3		bra $aaee			bra 	_NSNormaliseLoop
.aafb					_NSNExit:
.aafb	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.aafd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9853					AssignNumber:
.9853	5a		phy				phy
.9854	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9857	85 36		sta $36				sta 	zTemp0
.9859	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.985c	85 37		sta $37				sta 	zTemp0+1
.985e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9861	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9863	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9866	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9868	c9 08		cmp #$08			cmp 	#NSTFloat
.986a	f0 2a		beq $9896			beq 	_ANFloat
.986c	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.986f	f0 05		beq $9876			beq		_ANNotFloat
.9871	e8		inx				inx
.9872	20 4e aa	jsr $aa4e			jsr 	FloatIntegerPart 			; make it an integer
.9875	ca		dex				dex
.9876					_ANNotFloat:
.9876	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9879	29 03		and #$03			and 	#3
.987b	d0 05		bne $9882			bne 	_ANByteWord
.987d	20 a2 98	jsr $98a2			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9880	80 1e		bra $98a0			bra 	_ANExit
.9882					_ANByteWord:
.9882	48		pha				pha 								; save count
.9883	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9886	92 36		sta ($36)			sta 	(zTemp0)
.9888	68		pla				pla
.9889	c9 01		cmp #$01			cmp	 	#1
.988b	f0 13		beq $98a0			beq 	_ANExit
.988d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9890	a0 01		ldy #$01			ldy 	#1
.9892	91 36		sta ($36),y			sta 	(zTemp0),y
.9894	80 0a		bra $98a0			bra 	_ANExit
.9896					_ANFloat:
.9896	20 a2 98	jsr $98a2			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9899	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.989c	a0 04		ldy #$04			ldy 	#4
.989e	91 36		sta ($36),y			sta 	(zTemp0),y
.98a0					_ANExit:
.98a0	7a		ply				ply
.98a1	60		rts				rts
.98a2					_ANCopy4PackSign:
.98a2	a0 03		ldy #$03			ldy 	#3
.98a4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.98a7	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.98a9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.98ac	91 36		sta ($36),y			sta 	(zTemp0),y
.98ae	88		dey				dey
.98af	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.98b2	91 36		sta ($36),y			sta 	(zTemp0),y
.98b4	88		dey				dey
.98b5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.98b8	91 36		sta ($36),y			sta 	(zTemp0),y
.98ba	88		dey				dey
.98bb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.98be	91 36		sta ($36),y			sta 	(zTemp0),y
.98c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.98c1					AssignString:
.98c1	5a		phy				phy
.98c2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.98c5	85 38		sta $38				sta 	zTemp1
.98c7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.98ca	85 39		sta $39				sta 	zTemp1+1
.98cc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.98cf	85 36		sta $36				sta 	zTemp0
.98d1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98d4	85 37		sta $37				sta 	zTemp0+1
.98d6	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.98d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.98da	f0 23		beq $98ff			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.98dc	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.98dd	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.98df	e9 02		sbc #$02			sbc 	#2
.98e1	85 3c		sta $3c				sta 	zsTemp
.98e3	a0 01		ldy #$01			ldy 	#1
.98e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.98e7	e9 00		sbc #$00			sbc 	#0
.98e9	85 3d		sta $3d				sta 	zsTemp+1
.98eb	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98ed					_ASGetLength:
.98ed	c8		iny				iny
.98ee	b1 38		lda ($38),y			lda 	(zTemp1),y
.98f0	d0 fb		bne $98ed			bne 	_ASGetLength
.98f2	98		tya				tya 								; is this length <= current length
.98f3	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98f5	90 20		bcc $9917			bcc 	_ASCopyString
.98f7	f0 1e		beq $9917			beq 	_ASCopyString
.98f9	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98fb	a0 01		ldy #$01			ldy 	#1
.98fd	91 3c		sta ($3c),y			sta 	(zsTemp),y
.98ff					_ASNewStringRequired:
.98ff	e8		inx				inx 								; concrete the new string.
.9900	20 d1 af	jsr $afd1			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9903	ca		dex				dex
.9904	18		clc				clc
.9905	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9908	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.990a	92 36		sta ($36)			sta 	(zTemp0)
.990c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.990f	69 00		adc #$00			adc 	#0
.9911	a0 01		ldy #$01			ldy 	#1
.9913	91 36		sta ($36),y			sta 	(zTemp0),y
.9915	80 0d		bra $9924			bra 	_ASExit
.9917					_ASCopyString:
.9917	a0 00		ldy #$00			ldy 	#0
.9919					_ASCopyLoop:
.9919	b1 38		lda ($38),y			lda 	(zTemp1),y
.991b	c8		iny				iny
.991c	c8		iny				iny
.991d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.991f	88		dey				dey
.9920	c9 00		cmp #$00			cmp 	#0
.9922	d0 f5		bne $9919			bne 	_ASCopyLoop
.9924					_ASExit:
.9924	7a		ply				ply
.9925	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9926					DereferenceTopTwo:
.9926	e8		inx				inx
.9927	20 2b 99	jsr $992b			jsr 	Dereference 				; deref x+1
.992a	ca		dex				dex  								; falls through to deref x
.992b					Dereference:
.992b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.992e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9930	f0 57		beq $9989			beq 	_DRFExit 					; not a reference
.9932	5a		phy				phy
.9933	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9936	85 36		sta $36				sta 	zTemp0
.9938	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.993b	85 37		sta $37				sta 	zTemp0+1
.993d	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9940	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9942	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9945	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9948	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.994a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.994c	f0 0f		beq $995d			beq 	_DRFDereferenceTwo
.994e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9950	f0 39		beq $998b			beq 	_DRFFull
.9952	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9955	29 03		and #$03			and 	#3
.9957	f0 32		beq $998b			beq 	_DRFFull 					; the whole word
.9959	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.995b	f0 07		beq $9964			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.995d					_DRFDereferenceTwo:
.995d	a0 01		ldy #$01			ldy 	#1
.995f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9961	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9964					_DRFClear23:
.9964	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9967	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.996a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.996d	29 18		and #$18			and 	#NSBTypeMask
.996f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9972	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9974	d0 12		bne $9988			bne 	_DRFNotString
.9976	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9979	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.997c	d0 0a		bne $9988			bne 	_DRFNotString
.997e	a9 8a		lda #$8a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9980	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9983	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.9985	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9988					_DRFNotString
.9988	7a		ply				ply 								; restore Y and exit
.9989					_DRFExit:
.9989	60		rts				rts
.998a					_DRFNullString:
>998a	00						.byte 	0
.998b					_DRFFull:
.998b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.998d	b1 36		lda ($36),y			lda 	(zTemp0),y
.998f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9992	c8		iny				iny
.9993	b1 36		lda ($36),y			lda 	(zTemp0),y
.9995	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9998	c8		iny				iny
.9999	b1 36		lda ($36),y			lda 	(zTemp0),y
.999b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.999e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.99a1	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.99a4	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.99a6	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.99a9	f0 06		beq $99b1			beq 	_DRFNoExponent
.99ab	c8		iny				iny 								; if not, read the exponent as well.
.99ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.99ae	9d 28 04	sta $0428,x			sta 	NSExponent,x
.99b1					_DRFNoExponent:
.99b1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.99b4	10 0d		bpl $99c3			bpl 	_DRFExit2 					; if not, then exit.
.99b6	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.99b8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99bb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.99be	09 80		ora #$80			ora 	#NSBIsNegative
.99c0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c3					_DRFExit2:
.99c3	7a		ply				ply
.99c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.99c5					EncodeNumberStart:
.99c5	38		sec				sec
.99c6	80 01		bra $99c9			bra 	EncodeNumberContinue+1
.99c8					EncodeNumberContinue:
.99c8	18		clc				clc
.99c9					EncodeNumber:
.99c9	08		php				php 								; save reset.
.99ca	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.99cc	f0 12		beq $99e0			beq 	_ENIsOkay
.99ce	c9 30		cmp #$30			cmp 	#"0"
.99d0	90 04		bcc $99d6			bcc 	_ENBadNumber
.99d2	c9 3a		cmp #$3a			cmp 	#"9"+1
.99d4	90 0a		bcc $99e0			bcc 	_ENIsOkay
.99d6					_ENBadNumber:
.99d6	28		plp				plp 								; throw saved reset
.99d7	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.99da	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99dc	f0 7e		beq $9a5c			beq 	_ENConstructFinal
.99de					_ENFail:
.99de	18		clc				clc 								; not allowed
.99df	60		rts				rts
.99e0					_ENIsOkay:
.99e0	28		plp				plp 								; are we restarting
.99e1	90 15		bcc $99f8			bcc 	_ENNoRestart
.99e3					_ENStartEncode:
.99e3	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.99e5	f0 0c		beq $99f3			beq 	_ENFirstDP
.99e7	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.99e9	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.99ec	a9 01		lda #$01			lda 	#ESTA_Low
.99ee					_ENExitChange:
.99ee	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.99f1	38		sec				sec
.99f2	60		rts				rts
.99f3					_ENFirstDP:
.99f3	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero 					; clear integer part
.99f6	80 3f		bra $9a37			bra 	_ESTASwitchFloat			; go straight to float and exi
.99f8					_ENNoRestart:
.99f8	48		pha				pha 								; save on stack.
.99f9	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.99fc	c9 01		cmp #$01			cmp 	#ESTA_Low
.99fe	f0 09		beq $9a09			beq  	_ESTALowState
.9a00	c9 02		cmp #$02			cmp 	#ESTA_High
.9a02	f0 29		beq $9a2d			beq 	_ESTAHighState
.9a04	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a06	f0 3b		beq $9a43			beq 	_ESTADecimalState
>9a08	db						.byte 	$DB 						; causes a break in the emulator
.9a09					_ESTALowState:
.9a09	68		pla				pla 								; get value back
.9a0a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a0c	f0 29		beq $9a37			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a0e	29 0f		and #$0f			and 	#15 						; make digit
.9a10	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a13	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a16	0a		asl a				asl 	a
.9a17	0a		asl a				asl 	a
.9a18	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a1b	0a		asl a				asl 	a
.9a1c	6d 86 04	adc $0486			adc 	DigitTemp
.9a1f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a22	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a24	90 05		bcc $9a2b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a26	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a28	8d 85 04	sta $0485			sta 	EncodeState
.9a2b					_ESTANoSwitch:
.9a2b	38		sec				sec
.9a2c	60		rts				rts
.9a2d					_ESTAHighState:
.9a2d	68		pla				pla 								; get value back
.9a2e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a30	f0 05		beq $9a37			beq 	_ESTASwitchFloat
.9a32	20 96 9a	jsr $9a96			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a35	38		sec				sec
.9a36	60		rts				rts
.9a37					_ESTASwitchFloat:
.9a37	9c 87 04	stz $0487			stz 	DecimalCount
.9a3a	e8		inx				inx 								; zero the decimal additive.
.9a3b	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.9a3e	ca		dex				dex
.9a3f	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a41	80 ab		bra $99ee			bra 	_ENExitChange
.9a43					_ESTADecimalState:
.9a43	68		pla				pla 								; digit.
.9a44	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a46	f0 96		beq $99de			beq 	_ENFail
.9a48	e8		inx				inx 								; put digit into fractional part of X+1
.9a49	20 96 9a	jsr $9a96			jsr 	ESTAShiftDigitIntoMantissa
.9a4c	ca		dex				dex
.9a4d	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9a50	ad 87 04	lda $0487			lda 	DecimalCount
.9a53	c9 0b		cmp #$0b			cmp 	#11
.9a55	f0 02		beq $9a59			beq 	_ESTADSFail
.9a57	38		sec				sec
.9a58	60		rts				rts
.9a59					_ESTADSFail:
.9a59	4c 31 ad	jmp $ad31			jmp 	RangeError
.9a5c					_ENConstructFinal:
.9a5c	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9a5f	f0 33		beq $9a94			beq 	_ENCFExit 					; no decimals
.9a61	5a		phy				phy
.9a62	0a		asl a				asl 	a 							; x 4 and CLC
.9a63	0a		asl a				asl 	a
.9a64	6d 87 04	adc $0487			adc 	DecimalCount
.9a67	a8		tay				tay
.9a68	b9 f0 ac	lda $acf0,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a6b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9a6e	b9 f1 ac	lda $acf1,y			lda 	DecimalScalarTable-5+1,y
.9a71	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9a74	b9 f2 ac	lda $acf2,y			lda 	DecimalScalarTable-5+2,y
.9a77	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9a7a	b9 f3 ac	lda $acf3,y			lda 	DecimalScalarTable-5+3,y
.9a7d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9a80	b9 f4 ac	lda $acf4,y			lda 	DecimalScalarTable-5+4,y
.9a83	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9a86	a9 08		lda #$08			lda 	#NSTFloat
.9a88	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9a8b	7a		ply				ply
.9a8c	e8		inx				inx 								; multiply decimal const by decimal scalar
.9a8d	20 78 aa	jsr $aa78			jsr 	FloatMultiply
.9a90	ca		dex				dex
.9a91	20 0d a9	jsr $a90d			jsr 	FloatAdd 					; add to integer part.
.9a94					_ENCFExit:
.9a94	18		clc				clc 								; reject the digit.
.9a95	60		rts				rts
.9a96					ESTAShiftDigitIntoMantissa:
.9a96	29 0f		and #$0f			and 	#15 						; save digit
.9a98	48		pha				pha
.9a99	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a9c	48		pha				pha
.9a9d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9aa0	48		pha				pha
.9aa1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aa4	48		pha				pha
.9aa5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9aa8	48		pha				pha
.9aa9	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 2
.9aac	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 4
.9aaf	18		clc				clc 								; pop mantissa and add
.9ab0	68		pla				pla
.9ab1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ab4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ab7	68		pla				pla
.9ab8	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9abb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9abe	68		pla				pla
.9abf	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9ac2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ac5	68		pla				pla
.9ac6	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9ac9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9acc	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 10
.9acf	68		pla				pla 								; add digit
.9ad0	18		clc				clc
.9ad1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ad4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ad7	90 0d		bcc $9ae6			bcc 	_ESTASDExit
.9ad9	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9adc	d0 08		bne $9ae6			bne 	_ESTASDExit
.9ade	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9ae1	d0 03		bne $9ae6			bne 	_ESTASDExit
.9ae3	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9ae6					_ESTASDExit:
.9ae6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9ae7					EvaluateTerm:
.9ae7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ae9	30 18		bmi $9b03			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9aeb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9aed	b0 6f		bcs $9b5e			bcs 	_ETVariable
.9aef	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9af1	90 6e		bcc $9b61			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9af3	c9 3a		cmp #$3a			cmp 	#'9'+1
.9af5	b0 6a		bcs $9b61			bcs 	_ETPuncUnary
.9af7	20 c5 99	jsr $99c5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9afa					_ETNumber:
.9afa	c8		iny				iny 								; keep encoding until we have the numbers
.9afb	b1 30		lda ($30),y			lda 	(codePtr),y
.9afd	20 c8 99	jsr $99c8			jsr 	EncodeNumberContinue
.9b00	b0 f8		bcs $9afa			bcs 	_ETNumber 					; go back if accepted.
.9b02	60		rts				rts
.9b03					_ETCheckUnary:
.9b03	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b05	f0 41		beq $9b48			beq 	_ETString
.9b07	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b09	f0 12		beq $9b1d			beq 	_ETHexConstant
.9b0b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b0d	90 0b		bcc $9b1a			bcc 	_ETSyntaxError
.9b0f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9b11	b0 07		bcs $9b1a			bcs 	_ETSyntaxError
.9b13	da		phx				phx 								; push X on the stack
.9b14	0a		asl a				asl 	a 							; put vector x 2 into X
.9b15	aa		tax				tax
.9b16	c8		iny				iny 								; consume unary function token
.9b17	7c d4 90	jmp ($90d4,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b1a					_ETSyntaxError:
.9b1a	4c 2c ad	jmp $ad2c			jmp 	SyntaxError
.9b1d					_ETHexConstant:
.9b1d	c8		iny				iny 								; skip #
.9b1e	c8		iny				iny 								; skip count
.9b1f	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero 					; clear result
.9b22					_ETHLoop:
.9b22	b1 30		lda ($30),y			lda 	(codePtr),y
.9b24	c8		iny				iny 								; and consume
.9b25	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b27	f0 1e		beq $9b47			beq 	_ETHExit
.9b29	48		pha				pha 								; save on stack.
.9b2a	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 2
.9b2d	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 4
.9b30	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 8
.9b33	20 da 9f	jsr $9fda			jsr 	NSMShiftLeft 				; x 16
.9b36	68		pla				pla 								; ASCII
.9b37	c9 41		cmp #$41			cmp 	#'A'
.9b39	90 02		bcc $9b3d			bcc 	_ETHNotChar
.9b3b	e9 07		sbc #$07			sbc 	#7
.9b3d					_ETHNotChar:
.9b3d	29 0f		and #$0f			and 	#15 						; digit now
.9b3f	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b42	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b45	80 db		bra $9b22			bra 	_ETHLoop 					; go round.
.9b47					_ETHExit:
.9b47	60		rts				rts
.9b48					_ETString:
.9b48	c8		iny				iny 								; look at length
.9b49	b1 30		lda ($30),y			lda 	(codePtr),y
.9b4b	48		pha				pha
.9b4c	c8		iny				iny 								; first character
.9b4d	20 0f a0	jsr $a00f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9b50	68		pla				pla 								; restore count and save
.9b51	85 36		sta $36				sta 	zTemp0
.9b53	98		tya				tya 								; add length to Y to skip it.
.9b54	18		clc				clc
.9b55	65 36		adc $36				adc 	zTemp0
.9b57	a8		tay				tay
.9b58	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9b5a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b5d	60		rts				rts
.9b5e					_ETVariable:
.9b5e	4c b8 9b	jmp $9bb8			jmp 	VariableHandler
.9b61					_ETPuncUnary:
.9b61	c8		iny				iny 								; consume the unary character
.9b62	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b64	f0 2d		beq $9b93			beq 	_ETUnaryNegate
.9b66	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9b68	f0 39		beq $9ba3			beq 	_ETDereference
.9b6a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9b6c	f0 43		beq $9bb1			beq 	_ETParenthesis
.9b6e	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b70	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b72	f0 06		beq $9b7a			beq 	_ETIndirection
.9b74	e6 36		inc $36				inc 	zTemp0
.9b76	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b78	d0 a0		bne $9b1a			bne 	_ETSyntaxError
.9b7a					_ETIndirection:
.9b7a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b7c	1a		inc a				inc 	a
.9b7d	48		pha				pha
.9b7e	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm				; evaluate the term
.9b81	20 2b 99	jsr $992b			jsr 	Dereference 				; dereference it.
.9b84	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b87	d0 07		bne $9b90			bne 	_ETTypeMismatch
.9b89	68		pla				pla 								; indirection 1-2
.9b8a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b8c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b8f	60		rts				rts
.9b90					_ETTypeMismatch:
.9b90	4c 36 ad	jmp $ad36			jmp 	TypeError
.9b93					_ETUnaryNegate:
.9b93	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm				; evaluate the term
.9b96	20 2b 99	jsr $992b			jsr 	Dereference 				; dereference it.
.9b99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9b9c	29 10		and #$10			and 	#NSTString
.9b9e	d0 f0		bne $9b90			bne 	_ETTypeMismatch
.9ba0	4c 71 9f	jmp $9f71			jmp 	NSMNegate  					; just toggles the sign bit.
.9ba3					_ETDereference:
.9ba3	20 e7 9a	jsr $9ae7			jsr 	EvaluateTerm				; evaluate the term
.9ba6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9ba9	29 20		and #$20			and 	#NSBIsReference
.9bab	f0 e3		beq $9b90			beq 	_ETTypeMismatch
.9bad	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9bb0	60		rts				rts
.9bb1					_ETParenthesis:
.9bb1	20 16 98	jsr $9816			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9bb4	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; check for )
.9bb7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9bb8					VariableHandler:
.9bb8	b1 30		lda ($30),y			lda 	(codePtr),y
.9bba	18		clc				clc
.9bbb	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9bbd	85 37		sta $37				sta 	zTemp0+1
.9bbf	c8		iny				iny
.9bc0	b1 30		lda ($30),y			lda 	(codePtr),y
.9bc2	85 36		sta $36				sta 	zTemp0
.9bc4	c8		iny				iny
.9bc5	18		clc				clc									; copy variable address+3 to mantissa
.9bc6	69 03		adc #$03			adc 	#3
.9bc8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bcb	a5 37		lda $37				lda 	zTemp0+1
.9bcd	69 00		adc #$00			adc 	#0
.9bcf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bd2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9bd5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9bd8	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9bdb	5a		phy				phy
.9bdc	a0 02		ldy #$02			ldy 	#2 							; read type
.9bde	b1 36		lda ($36),y			lda 	(zTemp0),y
.9be0	7a		ply				ply
.9be1	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9be3	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9be5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9be8	29 04		and #$04			and 	#NSBIsArray
.9bea	d0 01		bne $9bed			bne 	_VHArray
.9bec	60		rts				rts
.9bed					_VHArray:
.9bed	e8		inx				inx
.9bee	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9bf1	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9bf3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9bf6	b1 30		lda ($30),y			lda 	(codePtr),y
.9bf8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9bfa	d0 06		bne $9c02			bne 	_VHNoSecondIndex
.9bfc	c8		iny				iny 								; skip the comma
.9bfd	e8		inx				inx
.9bfe	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c01	ca		dex				dex
.9c02					_VHNoSecondIndex:
.9c02	ca		dex				dex 								; set X back.
.9c03	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; and check the right bracket.
.9c06	5a		phy				phy 								; save position
.9c07	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c0a	85 3e		sta $3e				sta 	zaTemp
.9c0c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c0f	85 3f		sta $3f				sta 	zaTemp+1
.9c11	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c13	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c15	f0 02		beq $9c19			beq 	_VHHas2Mask
.9c17	a9 ff		lda #$ff			lda 	#$FF
.9c19					_VHHas2Mask:
.9c19	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c1c	f0 54		beq $9c72			beq 	_VHBadIndex
.9c1e	0a		asl a				asl 	a 							; carry will be set if a second index
.9c1f	90 09		bcc $9c2a			bcc 	_VHCheckFirstIndex
.9c21	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c23	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c25	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c28	90 48		bcc $9c72			bcc 	_VHBadIndex
.9c2a					_VHCheckFirstIndex:
.9c2a	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c2c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c2e	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c31	90 3f		bcc $9c72			bcc 	_VHBadIndex
.9c33	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c35	64 37		stz $37				stz 	zTemp0+1
.9c37	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c3a	30 0f		bmi $9c4b			bmi 	_VHNoMultiply
.9c3c	da		phx				phx
.9c3d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c40	48		pha				pha
.9c41	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c43	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c45	1a		inc a				inc 	a 							; add 1 for zero base
.9c46	fa		plx				plx
.9c47	20 c8 ab	jsr $abc8			jsr 	Multiply8x8 				; calculate -> Z0
.9c4a	fa		plx				plx
.9c4b					_VHNoMultiply:
.9c4b	18		clc				clc
.9c4c	a5 36		lda $36				lda 	zTemp0
.9c4e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9c51	85 36		sta $36				sta 	zTemp0
.9c53	a5 37		lda $37				lda 	zTemp0+1
.9c55	69 00		adc #$00			adc 	#0
.9c57	85 37		sta $37				sta 	zTemp0+1
.9c59	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9c5c	20 38 8b	jsr $8b38			jsr 	ScaleByBaseType
.9c5f	18		clc				clc
.9c60	b2 3e		lda ($3e)			lda 	(zaTemp)
.9c62	65 36		adc $36				adc 	zTemp0
.9c64	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c67	a0 01		ldy #$01			ldy 	#1
.9c69	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c6b	65 37		adc $37				adc 	zTemp0+1
.9c6d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c70	7a		ply				ply 								; restore position
.9c71	60		rts				rts
.9c72					_VHBadIndex:
.9c72	a9 17		lda #$17		lda	#23
.9c74	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.aafe					AbsUnary:
.aafe	fa		plx				plx 								; restore stack pos
.aaff	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; get a float or int
.ab02	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab05	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ab08	29 7f		and #$7f			and 	#$7F
.ab0a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c77					AllocUnary:
.9c77	fa		plx				plx 								; restore stack pos
.9c78	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger		; get bytes required.
.9c7b	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.9c7e	da		phx				phx 								; save X/Y
.9c7f	5a		phy				phy
.9c80	8a		txa				txa 								; copy X into Y
.9c81	a8		tay				tay
.9c82	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9c85	aa		tax				tax
.9c86	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9c89	20 96 9c	jsr $9c96			jsr 	AllocateXABytes 			; allocate memory
.9c8c	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9c8f	8a		txa				txa
.9c90	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9c93	7a		ply				ply
.9c94	fa		plx				plx
.9c95	60		rts				rts
.9c96					AllocateXABytes:
.9c96	5a		phy				phy
.9c97	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c9a	84 36		sty $36				sty 	zTemp0
.9c9c	5a		phy				phy
.9c9d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9ca0	84 37		sty $37				sty 	zTemp0+1
.9ca2	5a		phy				phy
.9ca3	18		clc				clc 								; add to low memory pointer
.9ca4	6d 8c 04	adc $048c			adc 	lowMemPtr
.9ca7	8d 8c 04	sta $048c			sta 	lowMemPtr
.9caa	8a		txa				txa
.9cab	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9cae	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9cb1	b0 2f		bcs $9ce2			bcs 	CISSMemory
.9cb3	20 d4 9c	jsr $9cd4			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9cb6					_ClearMemory:
.9cb6	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9cb9	c5 36		cmp $36				cmp 	zTemp0
.9cbb	d0 07		bne $9cc4			bne 	_CMClearNext
.9cbd	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9cc0	c5 37		cmp $37				cmp 	zTemp0+1
.9cc2	f0 0c		beq $9cd0			beq 	_CMExit
.9cc4					_CMClearNext:
.9cc4	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9cc6	92 36		sta ($36)			sta 	(zTemp0)
.9cc8	e6 36		inc $36				inc 	zTemp0
.9cca	d0 ea		bne $9cb6			bne 	_ClearMemory
.9ccc	e6 37		inc $37				inc		zTemp0+1
.9cce	80 e6		bra $9cb6			bra 	_ClearMemory
.9cd0					_CMExit:
.9cd0	fa		plx				plx
.9cd1	68		pla				pla
.9cd2	7a		ply				ply
.9cd3	60		rts				rts
.9cd4					CheckIdentifierStringSpace:
.9cd4	48		pha				pha
.9cd5	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9cd8	18		clc				clc
.9cd9	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9cdb	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9cde	b0 02		bcs $9ce2			bcs 	CISSMemory
.9ce0	68		pla				pla
.9ce1	60		rts				rts
.9ce2					CISSMemory:
.9ce2	a9 06		lda #$06		lda	#6
.9ce4	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ab0e					AscUnary:
.ab0e	fa		plx				plx 								; restore stack pos
.ab0f	20 24 9f	jsr $9f24			jsr 	EvaluateString 				; get a string
.ab12	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ab14	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.ab17	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ab1b					FracUnary:
.ab1b	fa		plx				plx 								; restore stack pos
.ab1c	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; get a float or int
.ab1f	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab22	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab25	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab27	f0 04		beq $ab2d			beq 	_IUZero
.ab29	20 eb a9	jsr $a9eb			jsr 	FloatFractionalPart
.ab2c	60		rts				rts
.ab2d					_IUZero:
.ab2d	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.ab30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ab31					IntUnary:
.ab31	fa		plx				plx 								; restore stack pos
.ab32	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; get a float or int
.ab35	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab38	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab3b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab3d	f0 03		beq $ab42			beq 	_IUExit
.ab3f	20 4e aa	jsr $aa4e			jsr 	FloatIntegerPart
.ab42					_IUExit:
.ab42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ab43					LenUnary:
.ab43	fa		plx				plx 								; restore stack pos
.ab44	20 24 9f	jsr $9f24			jsr 	EvaluateString 				; get a string
.ab47	5a		phy				phy
.ab48	a0 00		ldy #$00			ldy 	#0 							; find length
.ab4a					_LenFind:
.ab4a	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab4c	f0 06		beq $ab54			beq 	_LenExit
.ab4e	c8		iny				iny
.ab4f	d0 f9		bne $ab4a			bne 	_LenFind
.ab51	4c 31 ad	jmp $ad31			jmp 	RangeError 					; string > 255
.ab54					_LenExit:
.ab54	98		tya				tya
.ab55	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.ab58	7a		ply				ply
.ab59	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9ce7					Unary_Not:
.9ce7	fa		plx				plx
.9ce8	20 3c 9f	jsr $9f3c			jsr 	EvaluateInteger 			; get integer
.9ceb	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.9cee	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; zero mantissa ?
.9cf1	f0 04		beq $9cf7			beq 	_NotZero
.9cf3	20 c5 9f	jsr $9fc5			jsr 	NSMSetZero
.9cf6	60		rts				rts
.9cf7					_NotZero:
.9cf7	4c 7a 94	jmp $947a			jmp 	ReturnTrue
.9cfa					_UNBad:
.9cfa	4c 3b ad	jmp $ad3b			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9cfd					Unary_Random:
.9cfd	fa		plx				plx
.9cfe	20 76 9d	jsr $9d76			jsr 	Random32Bit 				; get a random number
.9d01	20 5b 9d	jsr $9d5b			jsr 	URCopyToMantissa  			; put in mantissa
.9d04	e8		inx				inx
.9d05	20 51 9f	jsr $9f51			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d08	ca		dex				dex
.9d09	20 ca a7	jsr $a7ca			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9d0c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9d0f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d12	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.9d15	60		rts				rts
.9d16					Unary_Rnd:
.9d16	fa		plx				plx
.9d17	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; number to use.
.9d1a	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; closing bracket
.9d1d	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d20	f0 2b		beq $9d4d			beq 	_URCopySeed
.9d22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d25	10 23		bpl $9d4a			bpl 	_URDontSeed
.9d27	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d2a	49 17		eor #$17			eor 	#$17
.9d2c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d2f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d32	49 a5		eor #$a5			eor 	#$A5
.9d34	8d 89 04	sta $0489			sta 	RandomSeed+1
.9d37	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d3a	49 c2		eor #$c2			eor 	#$C2
.9d3c	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9d3f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d42	49 9d		eor #$9d			eor 	#$9D
.9d44	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9d47	20 76 9d	jsr $9d76			jsr 	Random32Bit
.9d4a					_URDontSeed:
.9d4a	20 76 9d	jsr $9d76			jsr 	Random32Bit 				; generate a number.
.9d4d					_URCopySeed:
.9d4d	20 5b 9d	jsr $9d5b			jsr 	URCopyToMantissa 			; copy into mantissa
.9d50	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9d52	8d 28 04	sta $0428			sta 	NSExponent
.9d55	a9 08		lda #$08			lda 	#NSTFloat
.9d57	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9d5a	60		rts				rts
.9d5b					URCopyToMantissa:
.9d5b	ad 88 04	lda $0488			lda 	RandomSeed+0
.9d5e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d61	ad 89 04	lda $0489			lda 	RandomSeed+1
.9d64	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d67	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9d6a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d6d	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9d70	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9d72	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d75	60		rts				rts
.9d76					Random32Bit:
.9d76	5a		phy				phy
.9d77	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9d79	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9d7c	d0 03		bne $9d81			bne 	_Random1
.9d7e	a8		tay				tay 								; if so do it 256 times
.9d7f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9d81					_Random1:
.9d81	0a		asl a				asl 	a 							; LSFR RNG
.9d82	2e 89 04	rol $0489			rol 	RandomSeed+1
.9d85	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9d88	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9d8b	90 02		bcc $9d8f			bcc 	_Random2
.9d8d	49 c5		eor #$c5			eor 	#$C5
.9d8f					_Random2:
.9d8f	88		dey				dey
.9d90	d0 ef		bne $9d81			bne 	_Random1
.9d92	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d95	7a		ply				ply
.9d96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ab5d					SgnUnary:
.ab5d	fa		plx				plx 								; restore stack pos
.ab5e	20 19 9f	jsr $9f19			jsr 	EvaluateNumber 				; get a float or int
.ab61	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.ab64	20 f5 9f	jsr $9ff5			jsr 	NSMIsZero 					; if zero
.ab67	f0 10		beq $ab79			beq 	_SGZero  					; return Int Zero
.ab69	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ab6c	48		pha				pha
.ab6d	a9 01		lda #$01			lda 	#1 							; set to 1
.ab6f	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.ab72	68		pla				pla
.ab73	29 80		and #$80			and		#$80 						; copy the sign byte out
.ab75	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab78	60		rts				rts
.ab79	20 c5 9f	jsr $9fc5	_SGZero:jsr 	NSMSetZero
.ab7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ab7d					ValUnary:
.ab7d	fa		plx				plx 								; restore stack pos
.ab7e	20 93 ab	jsr $ab93			jsr 	ValMainCode 				; do the main val() code
.ab81	b0 01		bcs $ab84			bcs 	_VUError 					; couldn't convert
.ab83	60		rts				rts
.ab84					_VUError:
.ab84	4c 36 ad	jmp $ad36			jmp 	TypeError
.ab87					IsValUnary:
.ab87	fa		plx				plx 								; restore stack pos
.ab88	20 93 ab	jsr $ab93			jsr 	ValMainCode 				; do the main val() code
.ab8b	b0 03		bcs $ab90			bcs 	_VUBad
.ab8d	4c 7a 94	jmp $947a			jmp 	ReturnTrue
.ab90					_VUBad:
.ab90	4c 86 94	jmp $9486			jmp 	ReturnFalse
.ab93					ValMainCode:
.ab93	20 24 9f	jsr $9f24			jsr 	EvaluateString 				; get a string
.ab96	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; check right bracket present
.ab99	5a		phy				phy
.ab9a	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ab9c	f0 17		beq $abb5			beq 	_VMCFail2
.ab9e	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aba0	48		pha				pha 								; save first character
.aba1	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.aba3	d0 01		bne $aba6			bne 	_VMCStart
.aba5	c8		iny				iny 								; skip over -
.aba6					_VMCStart:
.aba6	38		sec				sec 								; initialise first time round.
.aba7					_VMCNext:
.aba7	c8		iny				iny 								; pre-increment
.aba8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.abaa	f0 0c		beq $abb8			beq 	_VMCSuccess 				; successful.
.abac	20 c9 99	jsr $99c9			jsr 	EncodeNumber 				; send it to the number-builder
.abaf	90 03		bcc $abb4			bcc 	_VMCFail 					; if failed, give up.
.abb1	18		clc				clc 								; next time round, countinue
.abb2	80 f3		bra $aba7			bra 	_VMCNext
.abb4					_VMCFail:
.abb4	68		pla				pla
.abb5					_VMCFail2:
.abb5	7a		ply				ply
.abb6	38		sec				sec
.abb7	60		rts				rts
.abb8					_VMCSuccess:
.abb8	a9 00		lda #$00			lda 	#0 							; construct final
.abba	20 c9 99	jsr $99c9			jsr 	EncodeNumber
.abbd	68		pla				pla
.abbe	c9 2d		cmp #$2d			cmp 	#"-"
.abc0	d0 03		bne $abc5			bne 	_VMCNotNegative
.abc2	20 71 9f	jsr $9f71			jsr		NSMNegate
.abc5					_VMCNotNegative:
.abc5	7a		ply				ply
.abc6	18		clc				clc
.abc7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d97					ChrUnary:
.9d97	fa		plx				plx 								; restore stack pos
.9d98	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger			; get value
.9d9b	48		pha				pha
.9d9c	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.9d9f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9da1	20 52 b0	jsr $b052			jsr 	StringTempAllocate
.9da4	68		pla				pla 								; write number to it
.9da5	20 90 b0	jsr $b090			jsr 	StringTempWrite
.9da8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9da9					SpcUnary:
.9da9	fa		plx				plx 								; restore stack pos
.9daa	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger			; get value
.9dad	5a		phy				phy
.9dae	48		pha				pha 								; save count
.9daf	20 52 b0	jsr $b052			jsr 	StringTempAllocate
.9db2	7a		ply				ply 								; to do count in Y
.9db3					_SpcLoop:
.9db3	c0 00		cpy #$00			cpy 	#0
.9db5	f0 08		beq $9dbf			beq 	_SpcExit
.9db7	a9 20		lda #$20			lda 	#32
.9db9	20 90 b0	jsr $b090			jsr 	StringTempWrite
.9dbc	88		dey				dey
.9dbd	80 f4		bra $9db3			bra 	_SPCLoop
.9dbf					_SpcExit:
.9dbf	7a		ply				ply
.9dc0	20 46 a7	jsr $a746			jsr 	CheckRightBracket
.9dc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9dc4					Unary_Str:
.9dc4	fa		plx				plx
.9dc5	20 19 9f	jsr $9f19			jsr 	EvaluateNumber  			; get number
.9dc8	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; closing bracket
.9dcb	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9dcd	20 e6 9d	jsr $9de6			jsr 	ConvertNumberToString 		; do the conversion.
.9dd0	a9 21		lda #$21			lda		#33 						; create buffer
.9dd2	20 52 b0	jsr $b052			jsr 	StringTempAllocate 			; allocate memory
.9dd5	da		phx				phx
.9dd6	a2 00		ldx #$00			ldx 	#0
.9dd8					_USCopy:
.9dd8	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9ddb	20 90 b0	jsr $b090			jsr 	StringTempWrite
.9dde	e8		inx				inx
.9ddf	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9de2	d0 f4		bne $9dd8			bne 	_USCopy
.9de4	fa		plx				plx
.9de5	60		rts				rts
.9de6					ConvertNumberToString:
.9de6	5a		phy				phy 								; save code position
.9de7	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9dea	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9ded	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9df0	10 0a		bpl $9dfc			bpl 	_CNTSNotNegative
.9df2	29 7f		and #$7f			and 	#$7F 						; make +ve
.9df4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9df7	a9 2d		lda #$2d			lda 	#"-"
.9df9	20 62 9e	jsr $9e62			jsr 	WriteDecimalBuffer
.9dfc					_CNTSNotNegative:
.9dfc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9dff	f0 15		beq $9e16			beq 	_CNTSNotFloat
.9e01	e8		inx				inx 								; round up
.9e02	a9 01		lda #$01			lda 	#1
.9e04	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.9e07	ca		dex				dex
.9e08	bd 28 04	lda $0428,x			lda		NSExponent,x
.9e0b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9e0e	a9 08		lda #$08			lda 	#NSTFloat
.9e10	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e13	20 0d a9	jsr $a90d			jsr 	FloatAdd
.9e16					_CNTSNotFloat:
.9e16	20 44 9e	jsr $9e44			jsr 	MakePlusTwoString
.9e19	20 eb a9	jsr $a9eb			jsr 	FloatFractionalPart 		; get the fractional part
.9e1c	20 af aa	jsr $aaaf			jsr 	NSNormalise					; normalise , exit if zero
.9e1f	f0 21		beq $9e42			beq 	_CNTSExit
.9e21	a9 2e		lda #$2e			lda 	#"."
.9e23	20 62 9e	jsr $9e62			jsr 	WriteDecimalBuffer 			; write decimal place
.9e26					_CNTSDecimal:
.9e26	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9e29	30 17		bmi $9e42			bmi 	_CNTSExit
.9e2b	e8		inx				inx 								; x 10.0
.9e2c	a9 0a		lda #$0a			lda 	#10
.9e2e	20 c7 9f	jsr $9fc7			jsr 	NSMSetByte
.9e31	a9 08		lda #$08			lda 	#NSTFloat
.9e33	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e36	ca		dex				dex
.9e37	20 78 aa	jsr $aa78			jsr 	FloatMultiply
.9e3a	20 44 9e	jsr $9e44			jsr 	MakePlusTwoString
.9e3d	20 eb a9	jsr $a9eb			jsr 	FloatFractionalPart 		; get the fractional part
.9e40	80 e4		bra $9e26			bra 	_CNTSDecimal 				; keep going.
.9e42					_CNTSExit:
.9e42	7a		ply				ply
.9e43	60		rts				rts
.9e44					MakePlusTwoString:
.9e44	da		phx				phx
.9e45	20 9c 9f	jsr $9f9c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e48	e8		inx				inx 								; access it
.9e49	e8		inx				inx
.9e4a	20 4e aa	jsr $aa4e			jsr 	FloatIntegerPart 			; make it an integer
.9e4d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9e4f	20 b7 a8	jsr $a8b7			jsr 	ConvertInt32
.9e52	a2 00		ldx #$00			ldx	 	#0
.9e54					_MPTSCopy:
.9e54	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e57	20 62 9e	jsr $9e62			jsr 	WriteDecimalBuffer
.9e5a	e8		inx				inx
.9e5b	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e5e	d0 f4		bne $9e54			bne 	_MPTSCopy
.9e60	fa		plx				plx
.9e61	60		rts				rts
.9e62					WriteDecimalBuffer:
.9e62	da		phx				phx
.9e63	ae 95 04	ldx $0495			ldx 	dbOffset
.9e66	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9e69	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9e6c	ee 95 04	inc $0495			inc 	dbOffset
.9e6f	fa		plx				plx
.9e70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9e71					Unary_Left:
.9e71	fa		plx				plx
.9e72	18		clc				clc 								; only one parameter
.9e73	20 e8 9e	jsr $9ee8			jsr 	SubstringInitial 			; set up.
.9e76	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9e79	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e7c	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9e7f	80 2c		bra $9ead			bra 	SubstringMain
.9e81					Unary_Right:
.9e81	fa		plx				plx
.9e82	18		clc				clc 								; only one parameter
.9e83	20 e8 9e	jsr $9ee8			jsr 	SubstringInitial 			; set up.
.9e86	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9e89	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e8c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9e8f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9e92	b0 02		bcs $9e96			bcs 	_URNotUnderflow
.9e94	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9e96					_URNotUnderFlow:
.9e96	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9e99	80 12		bra $9ead			bra 	SubStringMain
.9e9b					Unary_Mid:
.9e9b	fa		plx				plx
.9e9c	38		sec				sec 								; two parameters
.9e9d	20 e8 9e	jsr $9ee8			jsr 	SubstringInitial 			; set up.
.9ea0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ea3	f0 05		beq $9eaa			beq 	_UMError
.9ea5	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ea8	80 03		bra $9ead			bra 	SubStringMain
.9eaa					_UMError:
.9eaa	4c 3b ad	jmp $ad3b			jmp 	ArgumentError
.9ead					SubStringMain:
.9ead	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9eb0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9eb3	b0 2d		bcs $9ee2			bcs 	_SSMNull 					; if so, return an empty string.
.9eb5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9eb8	f0 28		beq $9ee2			beq 	_SSMNull 					; return empty string.
.9eba	18		clc				clc 								; add the offset +1 to the address and
.9ebb	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ebe	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ec1	85 36		sta $36				sta 	zTemp0
.9ec3	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9ec6	69 00		adc #$00			adc 	#0
.9ec8	85 37		sta $37				sta 	zTemp0+1
.9eca					_SSMNoCarry:
.9eca	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9ecd	20 52 b0	jsr $b052			jsr 	StringTempAllocate 			; allocate that many characters
.9ed0	5a		phy				phy 								; save Y
.9ed1	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9ed3					_SSMCopy:
.9ed3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ed5	f0 09		beq $9ee0			beq 	_SSMEString 				; no more to copy
.9ed7	20 90 b0	jsr $b090			jsr 	StringTempWrite 			; and write it out.
.9eda	c8		iny				iny
.9edb	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9ede	d0 f3		bne $9ed3			bne 	_SSMCopy
.9ee0					_SSMEString:
.9ee0	7a		ply				ply
.9ee1					_SSMExit:
.9ee1	60		rts				rts
.9ee2					_SSMNull:
.9ee2	a9 00		lda #$00			lda 	#0
.9ee4	20 52 b0	jsr $b052			jsr 	StringTempAllocate
.9ee7	60		rts				rts
.9ee8					SubstringInitial:
.9ee8	da		phx				phx 								; save initial stack position
.9ee9	08		php				php 								; save carry on stack indicating 2 parameters
.9eea	20 24 9f	jsr $9f24			jsr 	EvaluateString 				; get a string
.9eed	5a		phy				phy 								; calculate length to exponent.
.9eee	a0 ff		ldy #$ff			ldy 	#$FF
.9ef0					_SIFindLength:
.9ef0	c8		iny				iny
.9ef1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ef3	d0 fb		bne $9ef0			bne 	_SIFindLength
.9ef5	98		tya				tya
.9ef6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9ef9	7a		ply				ply
.9efa	e8		inx				inx
.9efb	20 4e a7	jsr $a74e			jsr 	CheckComma 					; comma next
.9efe	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; get next parameter
.9f01	28		plp				plp 								; is it the last parameter ?
.9f02	90 07		bcc $9f0b			bcc 	_SSIExit 					; if so, exit.
.9f04	e8		inx				inx
.9f05	20 4e a7	jsr $a74e			jsr 	CheckComma 					; comma next
.9f08	20 5d 9f	jsr $9f5d			jsr 	Evaluate8BitInteger 		; get last parameter
.9f0b					_SSIExit:
.9f0b	fa		plx				plx
.9f0c	20 46 a7	jsr $a746			jsr 	CheckRightBracket 			; check closing bracket
.9f0f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f10					EvaluateValue:
.9f10	48		pha				pha
.9f11	20 16 98	jsr $9816			jsr		EvaluateExpression 			; expression
.9f14	20 2b 99	jsr $992b			jsr 	Dereference					; derefernce it
.9f17	68		pla				pla
.9f18	60		rts				rts
.9f19					EvaluateNumber:
.9f19	20 10 9f	jsr $9f10			jsr 	EvaluateValue 				; get a value
.9f1c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f1f	29 10		and #$10			and 	#NSBIsString
.9f21	d0 16		bne $9f39			bne 	HelperTypeError
.9f23	60		rts				rts
.9f24					EvaluateString:
.9f24	20 10 9f	jsr $9f10			jsr 	EvaluateValue 				; get a value
.9f27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f2a	29 10		and #$10			and 	#NSBIsString
.9f2c	f0 0b		beq $9f39			beq 	HelperTypeError
.9f2e					CopyAddressToTemp0:
.9f2e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f31	85 36		sta $36				sta 	zTemp0
.9f33	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f36	85 37		sta $37				sta 	zTemp0+1
.9f38	60		rts				rts
.9f39					HelperTypeError:
.9f39	4c 36 ad	jmp $ad36			jmp 	TypeError
.9f3c					EvaluateInteger:
.9f3c	20 19 9f	jsr $9f19			jsr 	EvaluateNumber
.9f3f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9f42	d0 0a		bne $9f4e			bne 	HelperValueError 			; if not, it's a float.
.9f44	60		rts				rts
.9f45					EvaluateUnsignedInteger:
.9f45	20 3c 9f	jsr $9f3c			jsr 	EvaluateInteger 			; check integer is +ve
.9f48	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f4b	30 01		bmi $9f4e			bmi 	HelperValueError
.9f4d	60		rts				rts
.9f4e					HelperValueError:
.9f4e	4c 3b ad	jmp $ad3b			jmp 	ArgumentError
.9f51					Evaluate16BitInteger:
.9f51	20 45 9f	jsr $9f45			jsr	 	EvaluateUnsignedInteger		; get integer
.9f54	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9f57	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9f5a	d0 f2		bne $9f4e			bne 	HelperValueError
.9f5c	60		rts				rts
.9f5d					Evaluate8BitInteger:
.9f5d	20 45 9f	jsr $9f45			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9f60	d0 ec		bne $9f4e			bne 	HelperValueError
.9f62	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9f65	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9f68	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f6b	d0 e1		bne $9f4e			bne 	HelperValueError
.9f6d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.abc8					Multiply8x8:
.abc8	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.abc9	85 36		sta $36			  	sta 	zTemp0
.abcb	86 37		stx $37				stx 	zTemp0+1
.abcd	a9 00		lda #$00			lda 	#0
.abcf	a2 08		ldx #$08			ldx 	#8
.abd1					_M88Loop:
.abd1	90 03		bcc $abd6			bcc 	_M88NoAdd
.abd3	18		clc				clc
.abd4	65 37		adc $37				adc 	zTemp0+1
.abd6					_M88NoAdd:
.abd6	6a		ror a				ror 	a
.abd7	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.abd9	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.abda	d0 f5		bne $abd1			bne 	_M88Loop
.abdc	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.abde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9f71					NSMNegate:
.9f71	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f74	49 80		eor #$80			eor 	#NSBIsNegative
.9f76	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f79	60		rts				rts
.9f7a					NSMNegateMantissa:
.9f7a	38		sec				sec
.9f7b	a9 00		lda #$00			lda 	#0
.9f7d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9f80	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f83	a9 00		lda #$00			lda 	#0
.9f85	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9f88	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f8b	a9 00		lda #$00			lda 	#0
.9f8d	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9f90	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f93	a9 00		lda #$00			lda 	#0
.9f95	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9f98	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f9b	60		rts				rts
.9f9c					NSMShiftUpTwo:
.9f9c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f9f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fa2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9fa8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9fab	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9fae	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9fb1	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9fb4	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9fb7	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9fba	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fbd	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9fc0	60		rts				rts
.9fc1					NSMSetZeroMantissaOnly:
.9fc1	a9 00		lda #$00			lda 	#0
.9fc3	80 08		bra $9fcd			bra 	NSMSetMantissa
.9fc5					NSMSetZero:
.9fc5	a9 00		lda #$00			lda 	#0
.9fc7					NSMSetByte:
.9fc7	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9fca	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9fcd					NSMSetMantissa:
.9fcd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9fd0	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9fd3	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9fd6	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fd9	60		rts				rts
.9fda					NSMShiftLeft:
.9fda	18		clc				clc
.9fdb					NSMRotateLeft:
.9fdb	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9fde	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9fe1	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9fe4	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9fe7	60		rts				rts
.9fe8					NSMShiftRight:
.9fe8	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9feb	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9fee	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9ff1	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9ff4	60		rts				rts
.9ff5					NSMIsZero:
.9ff5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ff8	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9ffb	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9ffe	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a001	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.abdf					Assemble_ora:
.abdf	20 37 87	jsr $8737		jsr	AssembleGroup1
>abe2	01					.byte $01
.abe3					Assemble_and:
.abe3	20 37 87	jsr $8737		jsr	AssembleGroup1
>abe6	21					.byte $21
.abe7					Assemble_eor:
.abe7	20 37 87	jsr $8737		jsr	AssembleGroup1
>abea	41					.byte $41
.abeb					Assemble_adc:
.abeb	20 37 87	jsr $8737		jsr	AssembleGroup1
>abee	61					.byte $61
.abef					Assemble_sta:
.abef	20 37 87	jsr $8737		jsr	AssembleGroup1
>abf2	81					.byte $81
.abf3					Assemble_lda:
.abf3	20 37 87	jsr $8737		jsr	AssembleGroup1
>abf6	a1					.byte $a1
.abf7					Assemble_cmp:
.abf7	20 37 87	jsr $8737		jsr	AssembleGroup1
>abfa	c1					.byte $c1
.abfb					Assemble_sbc:
.abfb	20 37 87	jsr $8737		jsr	AssembleGroup1
>abfe	e1					.byte $e1
.abff					Assemble_asl:
.abff	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac02	02					.byte $02
>ac03	75					.byte $75
.ac04					Assemble_rol:
.ac04	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac07	22					.byte $22
>ac08	75					.byte $75
.ac09					Assemble_lsr:
.ac09	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac0c	42					.byte $42
>ac0d	75					.byte $75
.ac0e					Assemble_ror:
.ac0e	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac11	62					.byte $62
>ac12	75					.byte $75
.ac13					Assemble_stx:
.ac13	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac16	82					.byte $82
>ac17	50					.byte $50
.ac18					Assemble_ldx:
.ac18	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac1b	a2					.byte $a2
>ac1c	d0					.byte $d0
.ac1d					Assemble_dec:
.ac1d	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac20	c2					.byte $c2
>ac21	55					.byte $55
.ac22					Assemble_inc:
.ac22	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac25	e2					.byte $e2
>ac26	55					.byte $55
.ac27					Assemble_stz:
.ac27	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac2a	60					.byte $60
>ac2b	44					.byte $44
.ac2c					Assemble_bit:
.ac2c	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac2f	20					.byte $20
>ac30	55					.byte $55
.ac31					Assemble_sty:
.ac31	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac34	80					.byte $80
>ac35	54					.byte $54
.ac36					Assemble_ldy:
.ac36	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac39	a0					.byte $a0
>ac3a	d5					.byte $d5
.ac3b					Assemble_cpy:
.ac3b	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac3e	c0					.byte $c0
>ac3f	d4					.byte $d4
.ac40					Assemble_cpx:
.ac40	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac43	e0					.byte $e0
>ac44	d0					.byte $d0
.ac45					Assemble_tsb:
.ac45	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac48	00					.byte $00
>ac49	50					.byte $50
.ac4a					Assemble_trb:
.ac4a	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac4d	10					.byte $10
>ac4e	50					.byte $50
.ac4f					Assemble_jsr:
.ac4f	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac52	14					.byte $14
>ac53	10					.byte $10
.ac54					Assemble_jmp:
.ac54	20 3e 87	jsr $873e		jsr	AssembleGroup2
>ac57	40					.byte $40
>ac58	10					.byte $10
.ac59					Assemble_bpl:
.ac59	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac5c	10					.byte $10
.ac5d					Assemble_bmi:
.ac5d	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac60	30					.byte $30
.ac61					Assemble_bvc:
.ac61	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac64	50					.byte $50
.ac65					Assemble_bvs:
.ac65	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac68	70					.byte $70
.ac69					Assemble_bcc:
.ac69	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac6c	90					.byte $90
.ac6d					Assemble_bcs:
.ac6d	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac70	b0					.byte $b0
.ac71					Assemble_bne:
.ac71	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac74	d0					.byte $d0
.ac75					Assemble_beq:
.ac75	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac78	f0					.byte $f0
.ac79					Assemble_bra:
.ac79	20 8f 87	jsr $878f		jsr	AssembleGroup3
>ac7c	80					.byte $80
.ac7d					Assemble_brk:
.ac7d	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac80	00					.byte $00
.ac81					Assemble_php:
.ac81	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac84	08					.byte $08
.ac85					Assemble_clc:
.ac85	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac88	18					.byte $18
.ac89					Assemble_plp:
.ac89	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac8c	28					.byte $28
.ac8d					Assemble_sec:
.ac8d	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac90	38					.byte $38
.ac91					Assemble_rti:
.ac91	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac94	40					.byte $40
.ac95					Assemble_pha:
.ac95	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac98	48					.byte $48
.ac99					Assemble_cli:
.ac99	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ac9c	58					.byte $58
.ac9d					Assemble_phy:
.ac9d	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>aca0	5a					.byte $5a
.aca1					Assemble_rts:
.aca1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>aca4	60					.byte $60
.aca5					Assemble_pla:
.aca5	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>aca8	68					.byte $68
.aca9					Assemble_sei:
.aca9	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acac	78					.byte $78
.acad					Assemble_ply:
.acad	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acb0	7a					.byte $7a
.acb1					Assemble_dey:
.acb1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acb4	88					.byte $88
.acb5					Assemble_txa:
.acb5	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acb8	8a					.byte $8a
.acb9					Assemble_tya:
.acb9	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acbc	98					.byte $98
.acbd					Assemble_txs:
.acbd	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acc0	9a					.byte $9a
.acc1					Assemble_tay:
.acc1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acc4	a8					.byte $a8
.acc5					Assemble_tax:
.acc5	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acc8	aa					.byte $aa
.acc9					Assemble_clv:
.acc9	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>accc	b8					.byte $b8
.accd					Assemble_tsx:
.accd	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acd0	ba					.byte $ba
.acd1					Assemble_iny:
.acd1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acd4	c8					.byte $c8
.acd5					Assemble_dex:
.acd5	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acd8	ca					.byte $ca
.acd9					Assemble_cld:
.acd9	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acdc	d8					.byte $d8
.acdd					Assemble_phx:
.acdd	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ace0	da					.byte $da
.ace1					Assemble_stp:
.ace1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ace4	db					.byte $db
.ace5					Assemble_inx:
.ace5	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>ace8	e8					.byte $e8
.ace9					Assemble_nop:
.ace9	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acec	ea					.byte $ea
.aced					Assemble_sed:
.aced	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acf0	f8					.byte $f8
.acf1					Assemble_plx:
.acf1	20 c5 87	jsr $87c5		jsr	AssembleGroup4
>acf4	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.acf5					DecimalScalarTable:
>acf5	66 66 66 66				.dword $66666666 ; 0.1
>acf9	de					.byte $de
>acfa	1f 85 eb 51				.dword $51eb851f ; 0.01
>acfe	db					.byte $db
>acff	4c 37 89 41				.dword $4189374c ; 0.001
>ad03	d8					.byte $d8
>ad04	ac 8b db 68				.dword $68db8bac ; 0.0001
>ad08	d4					.byte $d4
>ad09	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ad0d	d1					.byte $d1
>ad0e	83 de 1b 43				.dword $431bde83 ; 1e-06
>ad12	ce					.byte $ce
>ad13	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ad17	ca					.byte $ca
>ad18	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ad1c	c7					.byte $c7
>ad1d	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ad21	c4					.byte $c4
>ad22	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ad26	c0					.byte $c0
>ad27	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ad2b	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ad2c					SyntaxError:
.ad2c	a9 02		lda #$02		lda	#2
.ad2e	4c 0d 94	jmp $940d		jmp	ErrorHandler
.ad31					RangeError:
.ad31	a9 04		lda #$04		lda	#4
.ad33	4c 0d 94	jmp $940d		jmp	ErrorHandler
.ad36					TypeError:
.ad36	a9 05		lda #$05		lda	#5
.ad38	4c 0d 94	jmp $940d		jmp	ErrorHandler
.ad3b					ArgumentError:
.ad3b	a9 07		lda #$07		lda	#7
.ad3d	4c 0d 94	jmp $940d		jmp	ErrorHandler
.ad40					NotDoneError:
.ad40	a9 0c		lda #$0c		lda	#12
.ad42	4c 0d 94	jmp $940d		jmp	ErrorHandler
.ad45					ErrorText:
>ad45	42 72 65 61 6b 00			.text	"Break",0
>ad4b	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ad53	72 72 6f 72 00
>ad58	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ad60	20 62 79 20 7a 65 72 6f 00
>ad69	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ad71	61 6e 67 65 00
>ad76	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ad7e	6d 61 74 63 68 00
>ad84	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ad8c	65 6d 6f 72 79 00
>ad92	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ad9a	61 72 67 75 6d 65 6e 74 00
>ada3	53 74 6f 70 00				.text	"Stop",0
>ada8	53 74 72 69 6e 67 20 74			.text	"String too long",0
>adb0	6f 6f 20 6c 6f 6e 67 00
>adb8	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>adc0	6e 20 66 61 69 6c 65 64 00
>adc9	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>add1	61 74 61 00
>add5	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>addd	65 6e 74 65 64 00
>ade3	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>adeb	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>adf7	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>adff	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ae0c	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ae14	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ae21	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ae29	68 6f 75 74 20 57 68 69 6c 65 00
>ae34	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ae3c	68 6f 75 74 20 46 6f 72 00
>ae45	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ae4d	61 63 6b 20 66 75 6c 6c 00
>ae56	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ae5e	75 63 74 75 72 65 00
>ae65	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ae6d	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ae7a	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ae82	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ae90	41 72 72 61 79 20 73 69			.text	"Array size",0
>ae98	7a 65 00
>ae9b	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aea3	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aeab	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1245."
>aeb3	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>aec3	2e 20 42 75 69 6c 64 20 31 32 34 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.aed0					EXTPrintCharacter:
.aed0	48		pha				pha
.aed1	da		phx				phx
.aed2	5a		phy				phy
.aed3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.aed6	7a		ply				ply
.aed7	fa		plx				plx
.aed8	68		pla				pla
.aed9	60		rts				rts
.aeda					EXTInputSingleCharacter:
.aeda	da		phx				phx
.aedb	5a		phy				phy
.aedc					_EISCWait:
.aedc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.aedf	c9 00		cmp #$00			cmp 	#0
.aee1	f0 f9		beq $aedc			beq 	_EISCWait
.aee3	7a		ply				ply
.aee4	fa		plx				plx
.aee5	60		rts				rts
.aee6					EXTInputLine:
.aee6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.aee8					_ILLoop:
.aee8	da		phx				phx 								; read character in
.aee9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.aeec	fa		plx				plx
.aeed	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.aeef	f0 12		beq $af03			beq 	_ILBackspace
.aef1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.aef3	f0 15		beq $af0a			beq 	_ILExit
.aef5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.aef7	90 ef		bcc $aee8			bcc 	_ILLoop
.aef9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.aefb	f0 eb		beq $aee8			beq 	_ILLoop
.aefd	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.af00	e8		inx				inx
.af01	80 e5		bra $aee8			bra 	_ILLoop
.af03					_ILBackspace:
.af03	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.af05	f0 e1		beq $aee8			beq 	_ILLoop
.af07	ca		dex				dex 								; back one.
.af08	80 de		bra $aee8			bra 	_ILLoop
.af0a					_ILExit:
.af0a	20 d0 ae	jsr $aed0			jsr 	EXTPrintCharacter
.af0d	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.af10	60		rts				rts
.af11					EXTBreakCheck:
.af11	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.af14					MemoryDeleteLine:
.af14	20 33 af	jsr $af33			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af17	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.af19	a8		tay				tay
.af1a					_MDDLLoop:
.af1a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.af1c	92 30		sta ($30)			sta 	(codePtr)
.af1e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.af20	c5 3a		cmp $3a				cmp 	zTemp2
.af22	d0 07		bne $af2b			bne 	_MDLDLNext
.af24	a5 31		lda $31				lda 	codePtr+1
.af26	c5 3b		cmp $3b				cmp 	zTemp2+1
.af28	d0 01		bne $af2b			bne 	_MDLDLNext
.af2a					_MDDLExit:
.af2a	60		rts				rts
.af2b					_MDLDLNext:
.af2b	e6 30		inc $30				inc 	codePtr						; next byte
.af2d	d0 eb		bne $af1a			bne 	_MDDLLoop
.af2f	e6 31		inc $31				inc 	codePtr+1
.af31	80 e7		bra $af1a			bra 	_MDDLLoop
.af33					IMemoryFindEnd:
.af33	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af35	85 3a		sta $3a				sta 	0+zTemp2
.af37	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af39	85 3b		sta $3b				sta 	1+zTemp2
.af3b					_MDLFELoop:
.af3b	b2 3a		lda ($3a)			lda 	(zTemp2)
.af3d	f0 0b		beq $af4a			beq 	_MDLFEExit
.af3f	18		clc				clc
.af40	65 3a		adc $3a				adc 	zTemp2
.af42	85 3a		sta $3a				sta 	zTemp2
.af44	90 f5		bcc $af3b			bcc 	_MDLFELoop
.af46	e6 3b		inc $3b				inc 	zTemp2+1
.af48	80 f1		bra $af3b			bra 	_MDLFELoop
.af4a					_MDLFEExit:
.af4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.af4b					MemoryInsertLine:
.af4b	08		php				php
.af4c	20 33 af	jsr $af33			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af4f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.af51	1a		inc a				inc 	a
.af52	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.af54	b0 36		bcs $af8c			bcs 	_MDLIError
.af56	28		plp				plp
.af57	90 08		bcc $af61			bcc 	_MDLIFound
.af59	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.af5b	85 30		sta $30				sta 	codePtr
.af5d	a5 3b		lda $3b				lda 	zTemp2+1
.af5f	85 31		sta $31				sta 	codePtr+1
.af61					_MDLIFound:
.af61	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.af64	a8		tay				tay
.af65					_MDLIInsert:
.af65	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.af67	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.af69	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.af6b	c5 3a		cmp $3a				cmp 	zTemp2
.af6d	d0 06		bne $af75			bne 	_MDLINext
.af6f	a5 31		lda $31				lda 	codePtr+1
.af71	c5 3b		cmp $3b				cmp 	zTemp2+1
.af73	f0 0a		beq $af7f			beq 	_MDLIHaveSpace
.af75					_MDLINext:
.af75	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.af77	d0 02		bne $af7b			bne 	_MDLINoBorrow
.af79	c6 3b		dec $3b				dec 	zTemp2+1
.af7b					_MDLINoBorrow:
.af7b	c6 3a		dec $3a				dec 	zTemp2
.af7d	80 e6		bra $af65			bra 	_MDLIInsert
.af7f					_MDLIHaveSpace:
.af7f	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.af82	88		dey				dey 								; from offset-1 to 0
.af83					_MDLICopy:
.af83	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.af86	91 30		sta ($30),y			sta 	(codePtr),y
.af88	88		dey				dey
.af89	10 f8		bpl $af83			bpl 	_MDLICopy
.af8b	60		rts				rts
.af8c					_MDLIError:
.af8c	a9 06		lda #$06		lda	#6
.af8e	4c 0d 94	jmp $940d		jmp	ErrorHandler
.af91					MDLAppendLine:
.af91	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.af93	85 36		sta $36				sta 	zTemp0
.af95	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af97	85 38		sta $38				sta 	0+zTemp1
.af99	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af9b	85 39		sta $39				sta 	1+zTemp1
.af9d	b2 38		lda ($38)			lda 	(zTemp1)
.af9f	d0 0a		bne $afab			bne 	_MDLANoInitialise
.afa1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afa3	8d 5d 06	sta $065d			sta 	0+AppendPointer
.afa6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afa8	8d 5e 06	sta $065e			sta 	1+AppendPointer
.afab					_MDLANoInitialise:
.afab	18		clc				clc
.afac	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.afaf	85 38		sta $38				sta 	zTemp1
.afb1	72 36		adc ($36)			adc 	(zTemp0)
.afb3	8d 5d 06	sta $065d			sta 	AppendPointer
.afb6	ad 5e 06	lda $065e			lda 	AppendPointer+1
.afb9	85 39		sta $39				sta 	zTemp1+1
.afbb	69 00		adc #$00			adc 	#0
.afbd	8d 5e 06	sta $065e			sta 	AppendPointer+1
.afc0	a0 00		ldy #$00			ldy 	#0
.afc2					_MDLACopy:
.afc2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.afc4	91 38		sta ($38),y			sta 	(zTemp1),y
.afc6	c8		iny				iny
.afc7	98		tya				tya
.afc8	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.afca	d0 f6		bne $afc2			bne 	_MDLACopy
.afcc	a9 00		lda #$00			lda 	#0 							; end of program.
.afce	91 38		sta ($38),y			sta 	(zTemp1),y
.afd0	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a002					MemoryNew:
.a002	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a004	85 30		sta $30				sta 	codePtr
.a006	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a008	85 31		sta $31				sta 	codePtr+1
.a00a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a00c	92 30		sta ($30)			sta 	(codePtr)
.a00e	60		rts				rts
.a00f					MemoryInline:
.a00f	98		tya				tya 								; put address into stack,x
.a010	18		clc				clc
.a011	65 30		adc $30				adc 	codePtr
.a013	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a016	a5 31		lda $31				lda 	codePtr+1
.a018	69 00		adc #$00			adc 	#0
.a01a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a01d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a020	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a023	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a024					MemorySearch:
.a024	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a026	86 37		stx $37				stx 	zTemp0+1
.a028	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a02a	85 30		sta $30				sta 	codePtr
.a02c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a02e	85 31		sta $31				sta 	codePtr+1
.a030					_MTAXLoop:
.a030	b2 30		lda ($30)			lda 	(codePtr)
.a032	18		clc				clc
.a033	f0 21		beq $a056			beq 	_MTAXExit 					; reached end, exit with CC.
.a035	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a037	b1 30		lda ($30),y			lda 	(codePtr),y
.a039	38		sec				sec
.a03a	e5 36		sbc $36				sbc 	zTemp0
.a03c	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a03e	c8		iny				iny 								; do the MSB
.a03f	b1 30		lda ($30),y			lda 	(codePtr),y
.a041	e5 37		sbc $37				sbc 	zTemp0+1
.a043	05 38		ora $38				ora 	zTemp1
.a045	f0 0f		beq $a056			beq 	_MTAXExit	 				; found
.a047	b0 0d		bcs $a056			bcs 	_MTAXExit 					; current < required exit
.a049	18		clc				clc
.a04a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a04c	65 30		adc $30				adc 	codePtr
.a04e	85 30		sta $30				sta 	codePtr
.a050	90 02		bcc $a054			bcc 	_CREExit
.a052	e6 31		inc $31				inc 	codePtr+1
.a054					_CREExit:
.a054	80 da		bra $a030			bra 	_MTAXLoop
.a056					_MTAXExit:
.a056	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a057					StackPushByte:
.a057	48		pha				pha 								; save byte
.a058	a5 34		lda $34				lda 	BasicStack
.a05a	d0 09		bne $a065			bne 	_SPBNoBorrow
.a05c	c6 35		dec $35				dec 	BasicStack+1
.a05e	48		pha				pha
.a05f	a5 35		lda $35				lda 	BasicStack+1
.a061	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a063	90 06		bcc $a06b			bcc 	_SPBMemory
.a065					_SPBNoBorrow:
.a065	c6 34		dec $34				dec 	BasicStack
.a067	68		pla				pla 								; get back and write
.a068	92 34		sta ($34)			sta 	(BasicStack)
.a06a	60		rts				rts
.a06b					_SPBMemory:
.a06b	a9 12		lda #$12		lda	#18
.a06d	4c 0d 94	jmp $940d		jmp	ErrorHandler
.a070					StackPopByte:
.a070	b2 34		lda ($34)			lda 	(BasicStack)
.a072	e6 34		inc $34				inc 	BasicStack
.a074	d0 02		bne $a078			bne 	_SPBNoCarry
.a076	e6 35		inc $35				inc 	BasicStack+1
.a078					_SPBNoCarry:
.a078	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a079					StackOpen:
.a079	48		pha				pha 								; save frame byte
.a07a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a07c	0a		asl a				asl 	a 							; claim twice this for storage
.a07d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a07f	38		sec				sec 								; so basically subtracting from
.a080	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a082	85 34		sta $34				sta 	basicStack
.a084	b0 08		bcs $a08e			bcs 	_SONoBorrow
.a086	c6 35		dec $35				dec 	basicStack+1
.a088	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a08a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a08c	90 04		bcc $a092			bcc 	_SOMemory
.a08e					_SONoBorrow:
.a08e	68		pla				pla 								; get marker back and write at TOS
.a08f	92 34		sta ($34)			sta 	(basicStack)
.a091	60		rts				rts
.a092					_SOMemory:
.a092	a9 12		lda #$12		lda	#18
.a094	4c 0d 94	jmp $940d		jmp	ErrorHandler
.a097					StackClose:
.a097	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a099	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a09b	0a		asl a				asl 	a 							; claim twice this.
.a09c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a09e	85 34		sta $34				sta 	basicStack
.a0a0	90 02		bcc $a0a4			bcc 	_SCExit
.a0a2	e6 35		inc $35				inc 	basicStack+1
.a0a4					_SCExit:
.a0a4	60		rts				rts
.a0a5					StackCheckFrame:
.a0a5	48		pha				pha
.a0a6					_StackRemoveLocals:
.a0a6	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a0a8	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a0aa	b0 05		bcs $a0b1			bcs 	_SCNoLocal
.a0ac	20 ed a6	jsr $a6ed			jsr 	LocalPopValue
.a0af	80 f5		bra $a0a6			bra 	_StackRemoveLocals
.a0b1					_SCNoLocal:
.a0b1	68		pla				pla
.a0b2	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a0b4	29 f0		and #$f0			and 	#$F0 						; check type bits
.a0b6	d0 01		bne $a0b9			bne 	_SCFError 					; different, we have structures mixed up
.a0b8	60		rts				rts
.a0b9					_SCFError:
.a0b9	8a		txa				txa 								; report error X
.a0ba	4c 0d 94	jmp $940d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a0bd					STKSaveCodePosition:
.a0bd	5a		phy				phy
.a0be	98		tya				tya 								; save Y
.a0bf	a0 05		ldy #$05			ldy 	#5
.a0c1	91 34		sta ($34),y			sta 	(basicStack),y
.a0c3	88		dey				dey 								; save Code Pointer
.a0c4					_STKSaveLoop:
.a0c4	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a0c7	91 34		sta ($34),y			sta 	(basicStack),y
.a0c9	88		dey				dey
.a0ca	d0 f8		bne $a0c4			bne 	_STKSaveLoop
.a0cc	7a		ply				ply
.a0cd	60		rts				rts
.a0ce					STKLoadCodePosition:
.a0ce	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a0d0					_STKLoadLoop:
.a0d0	b1 34		lda ($34),y			lda 	(basicStack),y
.a0d2	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a0d5	c8		iny				iny
.a0d6	c0 05		cpy #$05			cpy 	#5
.a0d8	d0 f6		bne $a0d0			bne 	_STKLoadLoop
.a0da	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a0dc	a8		tay				tay
.a0dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a0de					StackReset:
.a0de	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a0e0	85 34		sta $34				sta 	0+basicStack
.a0e2	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a0e4	85 35		sta $35				sta 	1+basicStack
.a0e6	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a0e8	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a0ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.afd1					StringConcrete:
.afd1	5a		phy				phy 								; save position on stack
.afd2	20 d4 9c	jsr $9cd4			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afd5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.afd8	85 38		sta $38				sta 	zTemp1
.afda	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afdd	85 39		sta $39				sta 	zTemp1+1
.afdf	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.afe1					_SALength:
.afe1	c8		iny				iny
.afe2	b1 38		lda ($38),y			lda 	(zTemp1),y
.afe4	d0 fb		bne $afe1			bne 	_SALength
.afe6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.afe8	b0 3f		bcs $b029			bcs 	_SALengthError
.afea	98		tya				tya 				 				; length of the new string
.afeb	18		clc				clc
.afec	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.afee	90 02		bcc $aff2			bcc 	_SAHaveLength
.aff0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.aff2					_SAHaveLength:
.aff2	48		pha				pha 								; save length.
.aff3	38		sec				sec
.aff4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.aff6	6d 8e 04	adc $048e			adc 	StringMemory
.aff9	8d 8e 04	sta $048e			sta 	StringMemory
.affc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.affe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b001	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b003	6d 8f 04	adc $048f			adc 	StringMemory+1
.b006	8d 8f 04	sta $048f			sta 	StringMemory+1
.b009	85 3b		sta $3b				sta 	zTemp2+1
.b00b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b00e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b00f	38		sec				sec
.b010	e9 03		sbc #$03			sbc 	#3
.b012	92 3a		sta ($3a)			sta 	(zTemp2)
.b014	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b016	a0 01		ldy #$01			ldy 	#1
.b018	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b01a					_SACopyNewString:
.b01a	a0 00		ldy #$00			ldy 	#0
.b01c					_SACopyNSLoop:
.b01c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b01e	c8		iny				iny 								; write two on in string storage
.b01f	c8		iny				iny
.b020	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b022	88		dey				dey 								; this makes it one one.
.b023	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b025	d0 f5		bne $b01c			bne 	_SACopyNSLoop
.b027	7a		ply				ply
.b028	60		rts				rts
.b029					_SALengthError:
.b029	a9 09		lda #$09		lda	#9
.b02b	4c 0d 94	jmp $940d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b02e					StringSystemInitialise:
.b02e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b030	8d 8e 04	sta $048e			sta 	0+StringMemory
.b033	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b035	8d 8f 04	sta $048f			sta 	1+StringMemory
.b038	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b03b	60		rts				rts
.b03c					StringSpaceInitialise:
.b03c	20 d4 9c	jsr $9cd4			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b03f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b041	8d 90 04	sta $0490			sta 	StringInitialised
.b044	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b047	8d 91 04	sta $0491			sta 	StringTempPointer
.b04a	ad 8f 04	lda $048f			lda 	StringMemory+1
.b04d	3a		dec a				dec 	a
.b04e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b051	60		rts				rts
.b052					StringTempAllocate:
.b052	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b054	b0 35		bcs $b08b			bcs 	_STALength
.b056	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b059	30 05		bmi $b060			bmi 	_STAAllocate
.b05b	48		pha				pha 								; save value to subtract.
.b05c	20 3c b0	jsr $b03c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b05f	68		pla				pla 								; restore it
.b060					_STAAllocate:
.b060	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b062	18		clc				clc  								; deliberate allows one more
.b063	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b066	8d 91 04	sta $0491			sta 	StringTempPointer
.b069	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b06c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b06e	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b071	69 ff		adc #$ff			adc 	#$FF
.b073	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b076	85 3d		sta $3d				sta 	zsTemp+1
.b078	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b07b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b07e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b081	a9 10		lda #$10			lda 	#NSTString
.b083	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b086	a9 00		lda #$00			lda 	#0 							; clear the target string
.b088	92 3c		sta ($3c)			sta 	(zsTemp)
.b08a	60		rts				rts
.b08b					_STALength:
.b08b	a9 09		lda #$09		lda	#9
.b08d	4c 0d 94	jmp $940d		jmp	ErrorHandler
.b090					StringTempWrite:
.b090	48		pha				pha
.b091	92 3c		sta ($3c)			sta 	(zsTemp)
.b093	e6 3c		inc $3c				inc 	zsTemp
.b095	d0 02		bne $b099			bne 	_STWNoCarry
.b097	e6 3d		inc $3d				inc 	zsTemp+1
.b099					_STWNoCarry:
.b099	a9 00		lda #$00			lda 	#0
.b09b	92 3c		sta ($3c)			sta 	(zsTemp)
.b09d	68		pla				pla
.b09e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a0eb					BackloadProgram:
.a0eb	a2 ff		ldx #$ff			ldx 	#$FF
.a0ed	20 15 a1	jsr $a115			jsr 	BLReadByte
.a0f0	30 1f		bmi $a111			bmi 	_BPExit
.a0f2					_BPCopy:
.a0f2	e8		inx				inx  								; copy byte in
.a0f3	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a0f6	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a0f9	20 15 a1	jsr $a115			jsr 	BLReadByte 					; read next byte
.a0fc	30 0a		bmi $a108			bmi 	_BPEndLine 					; -ve = EOL
.a0fe	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a100	d0 02		bne $a104			bne 	_BPNotTab
.a102	a9 20		lda #$20			lda 	#' '
.a104					_BPNotTab:
.a104	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a106	b0 ea		bcs $a0f2			bcs 	_BPCopy
.a108					_BPEndLine:
.a108	20 3e a4	jsr $a43e			jsr 	TokeniseLine 				; tokenise the line.
.a10b	38		sec				sec 								; append not insert
.a10c	20 4b af	jsr $af4b			jsr 	MemoryInsertLine 			; append to current program
.a10f	80 da		bra $a0eb			bra 	BackloadProgram
.a111					_BPExit:
.a111	20 3d 8a	jsr $8a3d			jsr 	ClearCommand 				; clear variables etc.
.a114	60		rts				rts
.a115					BLReadByte:
.a115					_BLLoad:
.a115	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a118	ee 16 a1	inc $a116			inc 	_BLLoad+1
.a11b	d0 03		bne $a120			bne 	_BLNoCarry
.a11d	ee 17 a1	inc $a117			inc 	_BLLoad+2
.a120					_BLNoCarry:
.a120	c9 00		cmp #$00			cmp 	#0
.a122	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a123					TokeniseSearchTable:
.a123	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a125	85 36		sta $36				sta 	zTemp0
.a127	a0 00		ldy #$00			ldy 	#0
.a129	a9 80		lda #$80			lda 	#$80 						; token #
.a12b	85 38		sta $38				sta 	zTemp1
.a12d					_TSTLoop:
.a12d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a12f	30 49		bmi $a17a			bmi 	_TSTFail 					; -ve = end of table
.a131	f0 2e		beq $a161			beq 	_TSTNext 					; zero, check next it's a dummy
.a133	c8		iny				iny 								; get the hash
.a134	b1 36		lda ($36),y			lda 	(zTemp0),y
.a136	88		dey				dey
.a137	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a13a	d0 25		bne $a161			bne 	_TSTNext
.a13c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a13f	38		sec				sec
.a140	ed 80 04	sbc $0480			sbc 	identStart
.a143	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a145	d0 1a		bne $a161			bne 	_TSTNext
.a147	5a		phy				phy 								; save Y , we might fail
.a148	c8		iny				iny 								; point to text
.a149	c8		iny				iny
.a14a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a14d					_TSTCompareName:
.a14d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a150	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a152	d0 0c		bne $a160			bne 	_TSTNextPullY 				; fail, pullY and do next
.a154	e8		inx				inx
.a155	c8		iny				iny
.a156	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a159	d0 f2		bne $a14d			bne 	_TSTCompareName
.a15b	7a		ply				ply 								; throw Y
.a15c	a5 38		lda $38				lda 	zTemp1 						; get token #
.a15e	38		sec				sec 								; return with CS = passed.
.a15f	60		rts				rts
.a160					_TSTNextPullY:
.a160	7a		ply				ply 								; restore current, fall through.
.a161					_TSTNext:
.a161	e6 38		inc $38				inc 	zTemp1 						; token counter
.a163	98		tya				tya
.a164	18		clc				clc
.a165	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a167	1a		inc a				inc 	a 							; +1
.a168	1a		inc a				inc 	a 							; +2
.a169	a8		tay				tay
.a16a	10 c1		bpl $a12d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a16c	98		tya				tya 								; add Y to zTemp0 and reset Y
.a16d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a16f	18		clc				clc  								; but have tables > 255 bytes
.a170	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a172	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a174	90 b7		bcc $a12d			bcc 	_TSTLoop
.a176	e6 37		inc $37				inc 	zTemp0+1
.a178	80 b3		bra $a12d			bra 	_TSTLoop
.a17a					_TSTFail:
.a17a	18		clc				clc
.a17b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a17c					KeywordSet0:
>a17c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a17e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a180	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a182	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a188	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a190	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a196	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a19d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a1a4	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a1ab	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a1b1	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a1b9	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a1c1	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a1c7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a1ce	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a1d4	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a1dc	28
>a1dd	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a1e5	28
>a1e6	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a1ec	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a1f2	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a1f8	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a1ff	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a205	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a20b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a210	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a214	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a21a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a222	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a229	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a230	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a238	43
>a239	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a23f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a245	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a24c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a252	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a258	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a25d	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a263	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a268	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a270	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a276	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a27d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a288	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a28f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a296	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a29c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a2a1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a2a9	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a2ad	ff					.text	$FF
.a2ae					KeywordSet1:
>a2ae	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2b0	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2b2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2b4	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a2bc	4c 45
>a2be	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a2c6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a2cd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a2d2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a2d8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a2dd	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a2e5	45
>a2e6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a2eb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a2f1	ff					.text	$FF
.a2f2					KeywordSet2:
>a2f2	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2f4	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2f6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2f8	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a2fd	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a302	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a307	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a30c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a311	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a316	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a31b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a320	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a325	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a32a	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a32f	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a334	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a339	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a33e	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a343	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a348	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a34d	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a352	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a357	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a35c	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a361	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a366	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a36b	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a370	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a375	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a37a	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a37f	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a384	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a389	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a38e	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a393	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a398	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a39d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a3a2	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a3a7	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a3ac	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a3b1	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a3b6	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a3bb	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a3c0	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a3c5	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a3ca	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a3cf	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a3d4	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a3d9	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a3de	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a3e3	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a3e8	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a3ed	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a3f2	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a3f7	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a3fc	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a401	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a406	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a40b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a410	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a415	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a41a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a41f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a424	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a429	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a42e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a433	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a438	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a43d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a43e					TokeniseLine:
.a43e	20 c6 a5	jsr $a5c6			jsr 	FixLineBufferCase 			; fix line case
.a441	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a443	8d a6 04	sta $04a6			sta 	tokenOffset
.a446	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a449	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a44c	a2 ff		ldx #$ff			ldx 	#$FF
.a44e					_TKFindFirst:
.a44e	e8		inx				inx
.a44f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a452	f0 79		beq $a4cd			beq 	_TKExit
.a454	c9 20		cmp #$20			cmp 	#' '
.a456	90 f6		bcc $a44e			bcc 	_TKFindFirst
.a458	c9 30		cmp #$30			cmp 	#'0'
.a45a	90 07		bcc $a463			bcc 	_TKNoLineNumber
.a45c	c9 3a		cmp #$3a			cmp 	#'9'+1
.a45e	b0 03		bcs $a463			bcs 	_TKNoLineNumber
.a460	20 f0 a5	jsr $a5f0			jsr 	TokeniseExtractLineNumber
.a463					_TKNoLineNumber:
.a463					_TKTokeniseLoop:
.a463	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a466	f0 65		beq $a4cd			beq 	_TKExit
.a468	e8		inx				inx
.a469	c9 20		cmp #$20			cmp 	#' '
.a46b	f0 f6		beq $a463			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a46d	ca		dex				dex 								; undo last get, A contains character, X is position.
.a46e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a470	f0 61		beq $a4d3			beq 	_TKTokeniseIdentifier
.a472	c9 41		cmp #$41			cmp 	#'A'
.a474	90 04		bcc $a47a			bcc 	_TKTokenisePunctuation
.a476	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a478	90 59		bcc $a4d3			bcc 	_TKTokeniseIdentifier
.a47a					_TKTokenisePunctuation:
.a47a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a47c	f0 27		beq $a4a5			beq 	_TKString
.a47e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a480	f0 28		beq $a4aa			beq 	_TKHexConstant
.a482	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a484	f0 29		beq $a4af			beq 	_TKCheckDouble
.a486	c9 3e		cmp #$3e			cmp 	#'>'
.a488	f0 25		beq $a4af			beq 	_TKCheckDouble
.a48a					_TKStandardPunctuation:
.a48a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a48d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a48f	90 0e		bcc $a49f			bcc 	_TKNoShift
.a491	48		pha				pha 								; save
.a492	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a494	85 36		sta $36				sta 	zTemp0
.a496	68		pla				pla
.a497	29 20		and #$20			and 	#32 						; bit 5
.a499	4a		lsr a				lsr 	a 							; shift into bit 3
.a49a	4a		lsr a				lsr 	a
.a49b	05 36		ora $36				ora 	zTemp0
.a49d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a49f					_TKNoShift:
.a49f	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte 			; write the punctuation character
.a4a2	e8		inx				inx 								; consume the character
.a4a3	80 be		bra $a463			bra 	_TKTokeniseLoop 			; and loop round again.
.a4a5					_TKString:
.a4a5	20 55 a5	jsr $a555			jsr 	TokeniseString
.a4a8	80 b9		bra $a463			bra 	_TKTokeniseLoop
.a4aa					_TKHexConstant:
.a4aa	20 90 a5	jsr $a590			jsr 	TokeniseHexConstant
.a4ad	80 b4		bra $a463			bra 	_TKTokeniseLoop
.a4af					_TKCheckDouble:
.a4af	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a4b2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a4b4	90 d4		bcc $a48a			bcc 	_TKStandardPunctuation
.a4b6	c9 3f		cmp #$3f			cmp 	#'>'+1
.a4b8	b0 d0		bcs $a48a			bcs 	_TKStandardPunctuation
.a4ba	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a4bd	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a4bf	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a4c0	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a4c3	38		sec				sec
.a4c4	e9 3c		sbc #$3c			sbc 	#'<'
.a4c6	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a4c9	e8		inx				inx 								; consume both
.a4ca	e8		inx				inx
.a4cb	80 96		bra $a463			bra 	_TKTokeniseLoop
.a4cd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a4cf	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a4d2	60		rts				rts
.a4d3					_TKTokeniseIdentifier:
.a4d3	8e 80 04	stx $0480			stx 	identStart 					; save start
.a4d6	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a4d9					_TKCheckLoop:
.a4d9	e8		inx				inx 								; look at next, we know first is identifier.
.a4da	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a4dd	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a4df	f0 f8		beq $a4d9			beq 	_TKCheckLoop
.a4e1	c9 30		cmp #$30			cmp	 	#"0"
.a4e3	90 0c		bcc $a4f1			bcc 	_TKEndIdentifier
.a4e5	c9 3a		cmp #$3a			cmp 	#"9"+1
.a4e7	90 f0		bcc $a4d9			bcc 	_TKCheckLoop
.a4e9	c9 41		cmp #$41			cmp	 	#"A"
.a4eb	90 04		bcc $a4f1			bcc 	_TKEndIdentifier
.a4ed	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a4ef	90 e8		bcc $a4d9			bcc 	_TKCheckLoop
.a4f1					_TKEndIdentifier:
.a4f1	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a4f4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a4f6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a4f8	f0 06		beq $a500			beq 	_TKHasTypeCharacter
.a4fa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a4fc	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a4fe	d0 07		bne $a507			bne 	_TKNoTypeCharacter
.a500					_TKHasTypeCharacter:
.a500	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a503	e8		inx				inx 								; read next
.a504	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a507					_TKNoTypeCharacter:
.a507	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a509	d0 09		bne $a514			bne 	_TKNoArray
.a50b	e8		inx				inx 								; skip the (
.a50c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a50f	09 04		ora #$04			ora 	#$04
.a511	8d 84 04	sta $0484			sta 	identTypeByte
.a514					_TKNoArray:
.a514	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a517	20 b1 a5	jsr $a5b1			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a51a	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a51c	a9 7c		lda #$7c			lda 	#(KeywordSet0) & $FF
.a51e	20 23 a1	jsr $a123			jsr 	TokeniseSearchTable
.a521	a2 00		ldx #$00			ldx 	#0
.a523	b0 1f		bcs $a544			bcs 	_TKFoundToken
.a525	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a527	a9 ae		lda #$ae			lda 	#(KeywordSet1) & $FF
.a529	20 23 a1	jsr $a123			jsr 	TokeniseSearchTable
.a52c	a2 81		ldx #$81			ldx 	#$81
.a52e	b0 14		bcs $a544			bcs 	_TKFoundToken
.a530	a0 a2		ldy #$a2			ldy 	#(KeywordSet2) >> 8
.a532	a9 f2		lda #$f2			lda 	#(KeywordSet2) & $FF
.a534	20 23 a1	jsr $a123			jsr 	TokeniseSearchTable
.a537	a2 82		ldx #$82			ldx 	#$82
.a539	b0 09		bcs $a544			bcs 	_TKFoundToken
.a53b	20 41 a6	jsr $a641			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a53e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a541	4c 63 a4	jmp $a463			jmp 	_TKTokeniseLoop 			; and go round again.
.a544					_TKFoundToken:
.a544	48		pha				pha 								; save token
.a545	8a		txa				txa 								; shift in X, is there one ?
.a546	f0 03		beq $a54b			beq 	_TKNoTShift
.a548	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte 			; if so, write it out
.a54b					_TKNoTShift:
.a54b	68		pla				pla 								; restore and write token
.a54c	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a54f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a552	4c 63 a4	jmp $a463			jmp 	_TKTokeniseLoop 			; and go round again.
.a555					TokeniseString:
.a555	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a557	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a55a	e8		inx				inx									; start of quoted string.
.a55b	da		phx				phx 								; push start of string on top
.a55c	ca		dex				dex
.a55d					_TSFindEnd:
.a55d	e8		inx				inx
.a55e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a561	f0 04		beq $a567			beq 	_TSEndOfString
.a563	c9 22		cmp #$22			cmp 	#'"'
.a565	d0 f6		bne $a55d			bne 	_TSFindEnd
.a567					_TSEndOfString:
.a567	7a		ply				ply  								; so now Y is first character, X is character after end.
.a568	48		pha				pha 								; save terminating character
.a569	20 71 a5	jsr $a571			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a56c	68		pla				pla 								; terminating character
.a56d	f0 01		beq $a570			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a56f	e8		inx				inx
.a570					_TSNotQuote:
.a570	60		rts				rts
.a571					TOWriteBlockXY:
.a571	86 36		stx $36				stx 	zTemp0 						; write end character
.a573	98		tya				tya
.a574	49 ff		eor #$ff			eor 	#$FF
.a576	38		sec				sec
.a577	65 36		adc $36				adc 	zTemp0
.a579	1a		inc a				inc 	a 							; one extra for NULL
.a57a	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a57d					_TOBlockLoop:
.a57d	c4 36		cpy $36				cpy 	zTemp0
.a57f	f0 09		beq $a58a			beq 	_TOBlockExit
.a581	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a584	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a587	c8		iny				iny
.a588	80 f3		bra $a57d			bra 	_TOBlockLoop
.a58a					_TOBlockExit:
.a58a	a9 00		lda #$00			lda 	#0
.a58c	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a58f	60		rts				rts
.a590					TokeniseHexConstant:
.a590	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a592	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a595	e8		inx				inx									; start of quoted string.
.a596	da		phx				phx 								; push start of constant on top
.a597	ca		dex				dex
.a598					_THFindLoop:
.a598	e8		inx				inx
.a599	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a59c	c9 30		cmp #$30			cmp 	#"0"
.a59e	90 0c		bcc $a5ac			bcc 	_THFoundEnd
.a5a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.a5a2	90 f4		bcc $a598			bcc 	_THFindLoop
.a5a4	c9 41		cmp #$41			cmp 	#"A"
.a5a6	90 04		bcc $a5ac			bcc 	_THFoundEnd
.a5a8	c9 47		cmp #$47			cmp 	#"F"+1
.a5aa	90 ec		bcc $a598			bcc 	_THFindLoop
.a5ac					_THFoundEnd:
.a5ac	7a		ply				ply 								; restore start
.a5ad	20 71 a5	jsr $a571			jsr 	TOWriteBlockXY 				; output the block
.a5b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a5b1					TokeniseCalculateHash:
.a5b1	da		phx				phx
.a5b2	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a5b5	a9 00		lda #$00			lda 	#0
.a5b7					_TCHLoop:
.a5b7	18		clc				clc
.a5b8	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a5bb	e8		inx				inx
.a5bc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a5bf	d0 f6		bne $a5b7			bne 	_TCHLoop
.a5c1	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a5c4	fa		plx				plx
.a5c5	60		rts				rts
.a5c6					FixLineBufferCase:
.a5c6	a2 00		ldx #$00			ldx 	#0
.a5c8					_FLBCLoop:
.a5c8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a5cb	f0 22		beq $a5ef			beq 	_FLBCExit 					; end of string.
.a5cd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a5cf	f0 11		beq $a5e2			beq 	_FLBCInQuotes
.a5d1	e8		inx				inx
.a5d2	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a5d4	90 f2		bcc $a5c8			bcc 	_FLBCLoop
.a5d6	c9 7b		cmp #$7b			cmp 	#'z'+1
.a5d8	b0 ee		bcs $a5c8			bcs 	_FLBCLoop
.a5da	38		sec				sec 								; make U/C
.a5db	e9 20		sbc #$20			sbc 	#32
.a5dd	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a5e0	80 e6		bra $a5c8			bra 	_FLBCLoop
.a5e2					_FLBCInQuotes:
.a5e2	e8		inx				inx 								; advance
.a5e3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a5e6	f0 07		beq $a5ef			beq 	_FLBCExit 					; exit on EOS
.a5e8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a5ea	d0 f6		bne $a5e2			bne 	_FLBCInQuotes
.a5ec	e8		inx				inx 								; skip over it
.a5ed	80 d9		bra $a5c8			bra 	_FLBCLoop
.a5ef					_FLBCExit:
.a5ef	60		rts				rts
.a5f0					TokeniseExtractLineNumber:
.a5f0	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a5f3	48		pha				pha
.a5f4	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a5f7	48		pha				pha
.a5f8	20 2e a6	jsr $a62e			jsr 	_TELNTimes2 				; line # x 4
.a5fb	20 2e a6	jsr $a62e			jsr 	_TELNTimes2 				; line # x 2
.a5fe	18		clc				clc 								; add stacked value
.a5ff	68		pla				pla
.a600	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a603	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a606	68		pla				pla
.a607	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a60a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a60d	20 2e a6	jsr $a62e			jsr 	_TELNTimes2 				; line # x 10
.a610	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a613	e8		inx				inx
.a614	29 0f		and #$0f			and 	#15 						; add to line #
.a616	18		clc				clc
.a617	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a61a	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a61d	90 03		bcc $a622			bcc 	_TLENNoCarry
.a61f	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a622					_TLENNoCarry:
.a622	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a625	c9 30		cmp #$30			cmp 	#'0'
.a627	90 04		bcc $a62d			bcc 	_TLENExit
.a629	c9 3a		cmp #$3a			cmp 	#'9'+1
.a62b	90 c3		bcc $a5f0			bcc 	TokeniseExtractLineNumber
.a62d					_TLENExit:
.a62d	60		rts				rts
.a62e					_TELNTimes2:
.a62e	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a631	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a634	60		rts				rts
.a635					TokeniseWriteByte:
.a635	da		phx				phx
.a636	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a639	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a63c	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a63f	fa		plx				plx
.a640	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a641					CheckCreateVariableRecord:
.a641	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a643	85 36		sta $36				sta 	0+zTemp0
.a645	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a647	85 37		sta $37				sta 	1+zTemp0
.a649					_CCVSearch:
.a649	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a64b	f0 2c		beq $a679			beq 	_CCVFail
.a64d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a64f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a651	cd 83 04	cmp $0483			cmp 	identHash
.a654	d0 16		bne $a66c			bne 	_CCVNext
.a656	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a658	ae 80 04	ldx $0480			ldx 	identStart
.a65b					_CCVCompare:
.a65b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a65e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a660	e8		inx				inx 								; advance pointers
.a661	c8		iny				iny
.a662	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a663	d0 07		bne $a66c			bne 	_CCVNext  					; didn't match go to next.
.a665	90 f4		bcc $a65b			bcc 	_CCVCompare 				; not finished yet.
.a667	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a66a	f0 41		beq $a6ad			beq 	_CCVFound 					; yes, we were successful
.a66c					_CCVNext:
.a66c	18		clc				clc
.a66d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a66f	65 36		adc $36				adc 	zTemp0
.a671	85 36		sta $36				sta 	zTemp0
.a673	90 d4		bcc $a649			bcc 	_CCVSearch
.a675	e6 37		inc $37				inc 	zTemp0+1
.a677	80 d0		bra $a649			bra 	_CCVSearch
.a679					_CCVFail:
.a679	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a67b	ad 83 04	lda $0483			lda 	identHash
.a67e	91 36		sta ($36),y			sta 	(zTemp0),y
.a680	c8		iny				iny 								; offset 2 is the type byte
.a681	ad 84 04	lda $0484			lda 	identTypeByte
.a684	91 36		sta ($36),y			sta 	(zTemp0),y
.a686	c8		iny				iny
.a687					_CCVData:
.a687	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a689	91 36		sta ($36),y			sta 	(zTemp0),y
.a68b	c8		iny				iny
.a68c	c0 08		cpy #$08			cpy 	#8
.a68e	90 f7		bcc $a687			bcc 	_CCVData
.a690	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a693					_CCVCopyName:
.a693	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a696	91 36		sta ($36),y			sta 	(zTemp0),y
.a698	e8		inx				inx
.a699	c8		iny				iny
.a69a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a69d	d0 f4		bne $a693			bne 	_CCVCopyName
.a69f	98		tya				tya 								; patch offset
.a6a0	92 36		sta ($36)			sta 	(zTemp0)
.a6a2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a6a4	91 36		sta ($36),y			sta 	(zTemp0),y
.a6a6	88		dey				dey
.a6a7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a6a9	09 80		ora #$80			ora 	#$80
.a6ab	91 36		sta ($36),y			sta 	(zTemp0),y
.a6ad					_CCVFound:
.a6ad	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a6af	38		sec				sec
.a6b0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a6b2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a6b4	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a6b7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a6b9	20 35 a6	jsr $a635			jsr 	TokeniseWriteByte
.a6bc	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
