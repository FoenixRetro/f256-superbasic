
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Dec 17 08:41:41 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b						KWD_INTLPAREN                        = $8b; $8b INT(
=$8c						KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d						KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e						KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f						KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90						KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91						KWD_LENLPAREN                        = $91; $91 LEN(
=$92						KWD_MAXLPAREN                        = $92; $92 MAX(
=$93						KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94						KWD_MINLPAREN                        = $94; $94 MIN(
=$95						KWD_NOTLPAREN                        = $95; $95 NOT(
=$96						KWD_PEEKLPAREN                       = $96; $96 PEEK(
=$97						KWD_PEEKDLPAREN                      = $97; $97 PEEKD(
=$98						KWD_PEEKLLPAREN                      = $98; $98 PEEKL(
=$99						KWD_PEEKWLPAREN                      = $99; $99 PEEKW(
=$9a						KWD_PLAYINGLPAREN                    = $9a; $9a PLAYING(
=$9b						KWD_RANDOMLPAREN                     = $9b; $9b RANDOM(
=$9c						KWD_RIGHTDOLLARLPAREN                = $9c; $9c RIGHT$(
=$9d						KWD_RNDLPAREN                        = $9d; $9d RND(
=$9e						KWD_SGNLPAREN                        = $9e; $9e SGN(
=$9f						KWD_SPCLPAREN                        = $9f; $9f SPC(
=$a0						KWD_STRDOLLARLPAREN                  = $a0; $a0 STR$(
=$a1						KWD_TIMERLPAREN                      = $a1; $a1 TIMER(
=$a2						KWD_TRUE                             = $a2; $a2 TRUE
=$a3						KWD_VALLPAREN                        = $a3; $a3 VAL(
=$a4						KWD_FOR                              = $a4; $a4 FOR
=$a5						KWD_IF                               = $a5; $a5 IF
=$a6						KWD_PROC                             = $a6; $a6 PROC
=$a7						KWD_REPEAT                           = $a7; $a7 REPEAT
=$a8						KWD_WHILE                            = $a8; $a8 WHILE
=$a9						KWD_ENDIF                            = $a9; $a9 ENDIF
=$aa						KWD_ENDPROC                          = $aa; $aa ENDPROC
=$ab						KWD_NEXT                             = $ab; $ab NEXT
=$ac						KWD_THEN                             = $ac; $ac THEN
=$ad						KWD_UNTIL                            = $ad; $ad UNTIL
=$ae						KWD_WEND                             = $ae; $ae WEND
=$af						KWD_BY                               = $af; $af BY
=$b0						KWD_CALL                             = $b0; $b0 CALL
=$b1						KWD_CIRCLE                           = $b1; $b1 CIRCLE
=$b2						KWD_CLEAR                            = $b2; $b2 CLEAR
=$b3						KWD_CLS                              = $b3; $b3 CLS
=$b4						KWD_COLOR                            = $b4; $b4 COLOR
=$b5						KWD_COLOUR                           = $b5; $b5 COLOUR
=$b6						KWD_DATA                             = $b6; $b6 DATA
=$b7						KWD_DIM                              = $b7; $b7 DIM
=$b8						KWD_DOWNTO                           = $b8; $b8 DOWNTO
=$b9						KWD_ELSE                             = $b9; $b9 ELSE
=$ba						KWD_FROM                             = $ba; $ba FROM
=$bb						KWD_GFX                              = $bb; $bb GFX
=$bc						KWD_GOSUB                            = $bc; $bc GOSUB
=$bd						KWD_GOTO                             = $bd; $bd GOTO
=$be						KWD_HERE                             = $be; $be HERE
=$bf						KWD_IMAGE                            = $bf; $bf IMAGE
=$c0						KWD_INPUT                            = $c0; $c0 INPUT
=$c1						KWD_LET                              = $c1; $c1 LET
=$c2						KWD_LINE                             = $c2; $c2 LINE
=$c3						KWD_LOCAL                            = $c3; $c3 LOCAL
=$c4						KWD_OFF                              = $c4; $c4 OFF
=$c5						KWD_ON                               = $c5; $c5 ON
=$c6						KWD_OUTLINE                          = $c6; $c6 OUTLINE
=$c7						KWD_PALETTE                          = $c7; $c7 PALETTE
=$c8						KWD_PLOT                             = $c8; $c8 PLOT
=$c9						KWD_POKE                             = $c9; $c9 POKE
=$ca						KWD_POKED                            = $ca; $ca POKED
=$cb						KWD_POKEL                            = $cb; $cb POKEL
=$cc						KWD_POKEW                            = $cc; $cc POKEW
=$cd						KWD_PRINT                            = $cd; $cd PRINT
=$ce						KWD_READ                             = $ce; $ce READ
=$cf						KWD_RECT                             = $cf; $cf RECT
=$d0						KWD_REM                              = $d0; $d0 REM
=$d1						KWD_RETURN                           = $d1; $d1 RETURN
=$d2						KWD_SOLID                            = $d2; $d2 SOLID
=$d3						KWD_SOUND                            = $d3; $d3 SOUND
=$d4						KWD_SPRITE                           = $d4; $d4 SPRITE
=$d5						KWD_TEXT                             = $d5; $d5 TEXT
=$d6						KWD_TO                               = $d6; $d6 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a4						KWC_FIRST_STRUCTURE = $a4
=$a9						KWC_FIRST_STRUCTURE_DEC = $a9
=$ae						KWC_LAST_STRUCTURE = $ae
=$83						KWC_FIRST_UNARY = $83
=$a3						KWC_LAST_UNARY = $a3

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 71 80	jmp $8071	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 99 a2	jsr $a299		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInputSingleCharacter:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 cd a2	jsr $a2cd		jsr	Export_EXTInputSingleCharacter
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTBreakCheck:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 f3 a2	jsr $a2f3		jsr	Export_EXTBreakCheck
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTReadController:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 f6 a2	jsr $a2f6		jsr	Export_EXTReadController
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						EXTInputLine:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 af a1	jsr $a1af		jsr	Export_EXTInputLine
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						GXGraphicDraw:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 0e a8	jsr $a80e		jsr	Export_GXGraphicDraw
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDCommand:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 1f bb	jsr $bb1f		jsr	Export_SNDCommand
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						SNDUpdate:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 52 bb	jsr $bb52		jsr	Export_SNDUpdate
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKListConvertLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 15 b5	jsr $b515		jsr	Export_TKListConvertLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						TKTokeniseLine:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 a9 b7	jsr $b7a9		jsr	Export_TKTokeniseLine
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8071		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8073		9a		txs				txs
.8074		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8076		09 80		ora #$80			ora 	#$80
.8078		85 00		sta $00				sta 	0
.807a		20 27 a6	jsr $a627			jsr		UpdateFont 					; update font if between FPGA updates.
.807d		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.8080		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8082		aa		tax				tax
.8083		a8		tay				tay
.8084		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.8087		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8089		20 49 80	jsr $8049			jsr 	SNDCommand
.808c		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.808e		a9 9c		lda #$9c			lda 	#Prompt & $FF
.8090		20 86 8f	jsr $8f86			jsr 	PrintStringXA
.8093		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; erase current program
.8096		4c e7 83	jmp $83e7			jmp 	WarmStart					; make same size.
.8099		4c e7 83	jmp $83e7			jmp 	WarmStart
.809c						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>809c		41 6c 70 68 61 20 31 36			.text "Alpha 16 built 17-Dec-22. "
>80a4		20 62 75 69 6c 74 20 31 37 2d 44 65 63 2d 32 32
>80b4		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80b6		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80b9						AssembleGroup1:
.80b9		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80bb		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80be		80 02		bra $80c2			bra 	AsmGroup12
.80c0						AssembleGroup2:
.80c0		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80c2						AsmGroup12:
.80c2		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80c5		68		pla				pla 								; pop the return address to access the information following.
.80c6		fa		plx				plx
.80c7		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get opcode and save as base
.80ca		8d 24 04	sta $0424			sta 	BaseOpcode
.80cd		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80d0		d0 08		bne $80da			bne 	_AG12HaveMask
.80d2		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80d4		20 56 81	jsr $8156			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80d7		8d 25 04	sta $0425			sta 	ModeMask
.80da						_AG12HaveMask:
.80da		20 8a 82	jsr $828a			jsr 	TypeAndCalculateOperand 	; get zero page type
.80dd		da		phx				phx 								; save found address mode
.80de		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80e1		fa		plx				plx  								; restore address mode
.80e2		b0 0b		bcs $80ef			bcs 	_AG12Exit
.80e4		20 f0 80	jsr $80f0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80e7		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80ea		b0 03		bcs $80ef			bcs 	_AG12Exit
.80ec		4c f6 9f	jmp $9ff6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ef						_AG12Exit:
.80ef		60		rts				rts
.80f0						PromoteToAbsolute:
.80f0		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80f2		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80f4		f0 19		beq $810f			beq 	_PTADo
.80f6		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80f8		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80fa		f0 13		beq $810f			beq 	_PTADo
.80fc		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80fe		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8100		f0 0d		beq $810f			beq 	_PTADo
.8102		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8104		e0 d1		cpx #$d1			cpx 	#AM_IND
.8106		f0 07		beq $810f			beq 	_PTADo
.8108		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.810a		e0 c0		cpx #$c0			cpx 	#AM_INDX
.810c		f0 01		beq $810f			beq 	_PTADo
.810e		60		rts				rts
.810f						_PTADo:
.810f		aa		tax				tax
.8110		60		rts				rts
.8111						AssembleGroup3:
.8111		68		pla				pla 								; get parameters, which is just the opcode.
.8112		fa		plx				plx
.8113		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get and output opcode
.8116		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8119		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get a 16 bit operand
.811c		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.811e		38		sec				sec
.811f		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8122		48		pha				pha 								; LSB in A
.8123		a5 60		lda $60				lda 	NSMantissa1
.8125		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8128		aa		tax				tax 								; MSB in X
.8129		68		pla				pla
.812a		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.812b		69 7f		adc #$7f			adc 	#$7F
.812d		90 01		bcc $8130			bcc 	_AG3NoCarry
.812f		e8		inx				inx
.8130						_AG3NoCarry:
.8130		38		sec				sec 								; fix back and write out anyways.
.8131		e9 80		sbc #$80			sbc 	#$80
.8133		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8136		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8138		f0 0a		beq $8144			beq 	_AG3Exit
.813a		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.813d		29 01		and #$01			and 	#1
.813f		f0 03		beq $8144			beq 	_AG3Exit
.8141		4c fb 9f	jmp $9ffb			jmp 	RangeError 					; no, branch is out of range
.8144						_AG3Exit:
.8144		60		rts				rts
.8145						AssembleGroup4:
.8145		68		pla				pla 								; pop address
.8146		fa		plx				plx
.8147		20 4e 81	jsr $814e			jsr 	AccessParameters 			; access and get first
.814a		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 			; output it.
.814d		60		rts				rts
.814e						AccessParameters:
.814e		8d 21 04	sta $0421			sta 	ParamStart
.8151		8e 22 04	stx $0422			stx 	ParamStart+1
.8154		a9 01		lda #$01			lda 	#1
.8156						GetParameter:
.8156		5a		phy				phy
.8157		a8		tay				tay
.8158		ad 21 04	lda $0421			lda 	ParamStart
.815b		85 36		sta $36				sta 	zTemp0
.815d		ad 22 04	lda $0422			lda 	ParamStart+1
.8160		85 37		sta $37				sta 	zTemp0+1
.8162		b1 36		lda ($36),y			lda 	(zTemp0),y
.8164		7a		ply				ply
.8165		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8166						AssemblerWriteByte:
.8166		48		pha			pha
.8167		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.816a		29 02		and #$02		and 	#2
.816c		f0 1b		beq $8189		beq 	_AWBNoPrint
.816e		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8171		20 a4 81	jsr $81a4		jsr 	PrintHex
.8174		ad 1e 04	lda $041e		lda		AssemblerAddress
.8177		20 a4 81	jsr $81a4		jsr 	PrintHex
.817a		a9 20		lda #$20		lda 	#' '
.817c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.817f		68		pla			pla 									; print byte
.8180		48		pha			pha
.8181		20 a4 81	jsr $81a4		jsr 	PrintHex
.8184		a9 0d		lda #$0d		lda 	#13
.8186		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8189						_AWBNoPrint:
.8189		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.818c		85 36		sta $36			sta 	zTemp0
.818e		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.8191		f0 0e		beq $81a1		beq 	_AWBRange
.8193		85 37		sta $37			sta 	zTemp0+1
.8195		68		pla			pla 									; write byte out
.8196		92 36		sta ($36)		sta 	(zTemp0)
.8198		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.819b		d0 03		bne $81a0		bne 	_AWBNoCarry
.819d		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81a0						_AWBNoCarry:
.81a0		60		rts			rts
.81a1						_AWBRange:
.81a1		4c fb 9f	jmp $9ffb		jmp 	RangeError
.81a4						PrintHex:
.81a4		48		pha				pha
.81a5		4a		lsr a				lsr 	a
.81a6		4a		lsr a				lsr 	a
.81a7		4a		lsr a				lsr 	a
.81a8		4a		lsr a				lsr 	a
.81a9		20 ad 81	jsr $81ad			jsr 	_PrintNibble
.81ac		68		pla				pla
.81ad						_PrintNibble:
.81ad		29 0f		and #$0f			and 	#15
.81af		c9 0a		cmp #$0a			cmp 	#10
.81b1		90 02		bcc $81b5			bcc 	_NoShift
.81b3		69 06		adc #$06			adc 	#6
.81b5						_NoShift:
.81b5		69 30		adc #$30			adc 	#48
.81b7		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81ba						AssembleModeX:
.81ba		5a		phy				phy
.81bb		ad 23 04	lda $0423			lda 	IsGroup1
.81be		f0 17		beq $81d7			beq 	_AMXGroup2
.81c0		8a		txa				txa 							; is it in group # 1
.81c1		29 40		and #$40			and 	#AM_ISG1
.81c3		f0 4d		beq $8212			beq 	_AMXFail 				; no, give up.
.81c5		8a		txa				txa 							; get back.
.81c6		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81c8		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81ca		d0 22		bne $81ee			bne 	_AMXHaveInfo
.81cc		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81cf		c9 81		cmp #$81			cmp 	#$81
.81d1		f0 3f		beq $8212			beq 	_AMXFail
.81d3		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81d5		80 17		bra $81ee			bra 	_AMXHaveInfo 			; odd design decision there.
.81d7						_AMXGroup2:
.81d7		8a		txa				txa 							; is it in group 2 ?
.81d8		29 20		and #$20			and 	#AM_ISG2
.81da		f0 36		beq $8212			beq 	_AMXFail 				; no, give up.
.81dc		8a		txa				txa 							; get the offset into Y
.81dd		29 1f		and #$1f			and 	#$1F
.81df		4a		lsr a				lsr 	a 						; make it 0-7.
.81e0		4a		lsr a				lsr  	a
.81e1		a8		tay				tay
.81e2		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81e5						_AMXCheckOkay:
.81e5		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81e6		88		dey				dey
.81e7		10 fc		bpl $81e5			bpl 	_AMXCheckOkay
.81e9		90 27		bcc $8212			bcc 	_AMXFail 				; not allowed.
.81eb		8a		txa				txa  							; get mask back
.81ec		29 1f		and #$1f			and 	#$1F
.81ee						_AMXHaveInfo:
.81ee		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81f0		10 04		bpl $81f6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81f2		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81f4		d0 1c		bne $8212			bne 	_AMXFail
.81f6						_AMXAnySize:
.81f6		18		clc				clc 							; add offset to the base opcode
.81f7		6d 24 04	adc $0424			adc 	BaseOpcode
.81fa						_AMXOutputCode:
.81fa		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 		; write the opcode out.
.81fd		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.81ff		f0 0e		beq $820f			beq 	_AMXExit
.8201		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8203		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8206		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8208		30 05		bmi $820f			bmi 	_AMXExit
.820a		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.820c		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.820f						_AMXExit:
.820f		7a		ply				ply
.8210		38		sec				sec
.8211		60		rts				rts
.8212						_AMXFail:
.8212		a0 00		ldy #$00			ldy 	#0
.8214						_AMXCheckOddities:
.8214		8a		txa				txa
.8215		d9 3c 82	cmp $823c,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8218		d0 15		bne $822f			bne 	_AMXCONext
.821a		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.821d		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8220		d0 0d		bne $822f			bne 	_AMXCONext
.8222		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8224		10 04		bpl $822a			bpl 	_AMXCONotZero
.8226		a5 60		lda $60				lda 	NSMantissa1
.8228		d0 05		bne $822f			bne 	_AMXCONext
.822a						_AMXCONotZero:
.822a		b9 3b 82	lda $823b,y			lda 	ExtraOpcode+1,y 		; get new opcode
.822d		80 cb		bra $81fa			bra 	_AMXOutputCode 			; and assemble it
.822f						_AMXCONext:
.822f		c8		iny				iny
.8230		c8		iny				iny
.8231		c8		iny				iny
.8232		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; end of table
.8235		d0 dd		bne $8214			bne 	_AMXCheckOddities
.8237						_AMXCOFail:
.8237		7a		ply				ply
.8238		18		clc				clc
.8239		60		rts				rts
.823a						ExtraOpcode:
>823a		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>823d		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8240		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8243		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8246		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8249		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>824c		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>824f		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8252		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8255		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8258		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8259						LabelHere:
.8259		c8		iny				iny 								; skip .
.825a		a2 00		ldx #$00			ldx 	#0 							; get a term
.825c		20 7b 98	jsr $987b			jsr 	EvaluateTerm
.825f		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8261		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8263		d0 22		bne $8287			bne 	_ALType 					; otherwise typing error
.8265		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8267		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8269		b5 60		lda $60,x			lda 	NSMantissa1,x
.826b		85 37		sta $37				sta 	zTemp0+1
.826d		5a		phy				phy 								; copy address in (64k)
.826e		a0 01		ldy #$01			ldy 	#1
.8270		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8273		92 36		sta ($36)			sta 	(zTemp0)
.8275		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8278		91 36		sta ($36),y			sta 	(zTemp0),y
.827a		c8		iny				iny
.827b		a9 00		lda #$00			lda 	#0 							; zero the rest.
.827d		91 36		sta ($36),y			sta 	(zTemp0),y
.827f		c8		iny				iny
.8280		91 36		sta ($36),y			sta 	(zTemp0),y
.8282		c8		iny				iny
.8283		91 36		sta ($36),y			sta 	(zTemp0),y
.8285		7a		ply				ply
.8286		60		rts				rts
.8287						_ALType:
.8287		4c 00 a0	jmp $a000			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.828a						TypeAndCalculateOperand:
.828a		b1 30		lda ($30),y			lda 	(codePtr),y
.828c		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.828e		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8290		f0 5b		beq $82ed			beq 	_TACOExit
.8292		c9 80		cmp #$80			cmp 	#KWC_EOL
.8294		f0 57		beq $82ed			beq 	_TACOExit
.8296		c8		iny				iny
.8297		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8299		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.829b		f0 51		beq $82ee			beq 	CalculateOperand
.829d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.829f		f0 1f		beq $82c0			beq 	_TACOIndirect
.82a1		88		dey				dey 								; undo get of first character
.82a2		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get operand
.82a5		b1 30		lda ($30),y			lda 	(codePtr),y
.82a7		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82a9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ab		d0 40		bne $82ed			bne 	_TACOExit
.82ad		c8		iny				iny
.82ae		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82b1		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82b3		c9 58		cmp #$58			cmp 	#'X'
.82b5		f0 36		beq $82ed			beq 	_TACOExit
.82b7		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82b9		c9 59		cmp #$59			cmp 	#'Y'
.82bb		f0 30		beq $82ed			beq 	_TACOExit
.82bd						_TACOSyntax:
.82bd		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.82c0						_TACOIndirect:
.82c0		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get the operand
.82c3		b1 30		lda ($30),y			lda 	(codePtr),y
.82c5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82c7		f0 17		beq $82e0			beq 	_TACOIndX
.82c9		20 14 8f	jsr $8f14			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82cc		b1 30		lda ($30),y			lda 	(codePtr),y
.82ce		a2 d1		ldx #$d1			ldx 	#AM_IND
.82d0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82d2		d0 19		bne $82ed			bne 	_TACOExit
.82d4		c8		iny				iny
.82d5		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82d8		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82da		d0 e1		bne $82bd			bne 	_TACOSyntax
.82dc		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82de		80 0d		bra $82ed			bra 	_TACOExit
.82e0						_TACOIndX:
.82e0		c8		iny				iny
.82e1		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e4		c9 58		cmp #$58			cmp 	#'X' 						; check X
.82e6		d0 d5		bne $82bd			bne 	_TACOSyntax
.82e8		20 14 8f	jsr $8f14			jsr 	CheckRightBracket			; check )
.82eb		a2 c0		ldx #$c0			ldx 	#AM_INDX
.82ed						_TACOExit:
.82ed		60		rts				rts
.82ee						CalculateOperand:
.82ee		48		pha				pha
.82ef		da		phx				phx
.82f0		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82f2		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.82f5		fa		plx				plx
.82f6		68		pla				pla
.82f7		60		rts				rts
.82f8						TACOCheckXY:
.82f8		b1 30		lda ($30),y			lda 	(codePtr),y
.82fa		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82fc		c9 40		cmp #$40			cmp 	#$40
.82fe		d0 21		bne $8321			bne 	_TCXYFail
.8300		b1 30		lda ($30),y			lda 	(codePtr),y
.8302		18		clc				clc
.8303		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8305		85 37		sta $37				sta 	zTemp0+1
.8307		c8		iny				iny
.8308		b1 30		lda ($30),y			lda 	(codePtr),y
.830a		c8		iny				iny
.830b		85 36		sta $36				sta 	zTemp0
.830d		5a		phy				phy 								; save position
.830e		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8310		b1 36		lda ($36),y			lda 	(zTemp0),y
.8312		d0 0c		bne $8320			bne 	_TCXYPopFail
.8314		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8316		b1 36		lda ($36),y			lda 	(zTemp0),y
.8318		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.831a		f0 08		beq $8324			beq 	_TCXYFound
.831c		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.831e		f0 04		beq $8324			beq 	_TCXYFound
.8320						_TCXYPopFail:
.8320		7a		ply				ply
.8321						_TCXYFail:
.8321		a9 00		lda #$00			lda 	#0
.8323		60		rts				rts
.8324						_TCXYFound:
.8324		7a		ply				ply 								; restore position
.8325		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8327		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8328						BackloadProgram:
.8328		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; does the actual NEW.
.832b		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.832d		a9 7f		lda #$7f			lda 	#_BLLoad & $FF
.832f		20 86 8f	jsr $8f86			jsr 	PrintStringXA
.8332		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8334		8d 59 06	sta $0659			sta 	BackLoadPage
.8337		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8339		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.833c		a9 60		lda #$60			lda 	#(($6000) >> 8)
.833e		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8341		a9 ff		lda #$ff			lda 	#$FF
.8343		8d fa ff	sta $fffa			sta 	$FFFA
.8346						_BPLoop:
.8346		a2 ff		ldx #$ff			ldx 	#$FF
.8348		20 94 83	jsr $8394			jsr 	BLReadByte 					; read a byte
.834b		c9 00		cmp #$00			cmp 	#0
.834d		f0 29		beq $8378			beq 	_BPExit 					; if 0 exit
.834f		30 27		bmi $8378			bmi 	_BPExit 					; if -ve exit
.8351						_BPCopy:
.8351		e8		inx				inx  								; copy byte into the lineBuffer
.8352		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8355		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8358		20 94 83	jsr $8394			jsr 	BLReadByte 					; read next byte
.835b		30 0a		bmi $8367			bmi 	_BPEndLine 					; -ve = EOL
.835d		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.835f		d0 02		bne $8363			bne 	_BPNotTab
.8361		a9 20		lda #$20			lda 	#' '
.8363						_BPNotTab:
.8363		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8365		b0 ea		bcs $8351			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8367						_BPEndLine:
.8367		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line.
.836a		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number = 0
.836d		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.8370		f0 d4		beq $8346			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8372		38		sec				sec 								; append not insert
.8373		20 50 a5	jsr $a550			jsr 	MemoryInsertLine 			; append to current program
.8376		80 ce		bra $8346			bra 	_BPLoop
.8378						_BPExit:
.8378		9c fa ff	stz $fffa			stz 	$FFFA
.837b		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variables etc.
.837e		60		rts				rts
.837f						_BLLoad:
>837f		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8387		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8394						BLReadByte:
.8394		da		phx				phx
.8395		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8397		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.839a		85 0b		sta $0b				sta 	8+3
.839c		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.839f		85 36		sta $36				sta 	zTemp0
.83a1		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83a4		85 37		sta $37				sta 	zTemp0+1
.83a6		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83a8		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ab		d0 0f		bne $83bc			bne 	_BLNoCarry
.83ad		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83b0		10 0a		bpl $83bc			bpl 	_BLNoCarry 					; need a new page
.83b2		48		pha				pha
.83b3		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83b5		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83b8		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83bb		68		pla				pla
.83bc						_BLNoCarry:
.83bc		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83be		fa		plx				plx
.83bf		c9 00		cmp #$00			cmp 	#0
.83c1		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83c2						EditProgramCode:
.83c2		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; try to find the line.
.83c5		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1
.83c8		20 f4 a5	jsr $a5f4			jsr 	MemorySearch
.83cb		90 05		bcc $83d2			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83cd		d0 03		bne $83d2			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83cf		20 19 a5	jsr $a519			jsr 	MemoryDeleteLine 			; delete the line
.83d2						_EPCNoDelete:
.83d2		ad 2d 04	lda $042d			lda 	TokenBuffer 				; buffer empty - we just want to delete a line.
.83d5		c9 80		cmp #$80			cmp 	#KWC_EOL
.83d7		f0 0d		beq $83e6			beq 	_EPCNoInsert
.83d9		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83dc		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83df		20 f4 a5	jsr $a5f4			jsr 	MemorySearch
.83e2		18		clc				clc 								; insert at this point.
.83e3		20 50 a5	jsr $a550			jsr 	MemoryInsertLine 			; insert the line
.83e6						_EPCNoInsert:
.83e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83e7						WarmStart:
.83e7		a2 ff		ldx #$ff			ldx 	#$FF
.83e9		9a		txs				txs
.83ea		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.83ec		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.83ef		20 35 80	jsr $8035			jsr 	EXTInputLine 				; get line to lineBuffer
.83f2		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line
.83f5		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number <> 0
.83f8		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.83fb		d0 17		bne $8414			bne 	_WSEditCode 				; if so,edit code.
.83fd		9c 2a 04	stz $042a			stz 	TokenOffset 				; zero the "offset", meaning it only runs one line.
.8400		a9 2a		lda #$2a			lda 	#((TokenOffset) & $FF)
.8402		85 30		sta $30				sta 	codePtr
.8404		a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8406		85 31		sta $31				sta 	codePtr+1
.8408		ad 2d 04	lda $042d			lda 	TokenBuffer 				; nothing to run
.840b		c9 80		cmp #$80			cmp 	#KWC_EOL
.840d		f0 d8		beq $83e7			beq 	WarmStart
.840f		20 aa 8b	jsr $8baa			jsr 	RUNCodePointerLine 			; execute that line.
.8412		80 d3		bra $83e7			bra 	WarmStart
.8414						_WSEditCode:
.8414		20 c2 83	jsr $83c2			jsr 	EditProgramCode 			; edit the program code
.8417		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear all variables etc.
.841a		80 cb		bra $83e7			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.841c						AssembleCommand:
.841c		a2 00		ldx #$00			ldx 	#0
.841e		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; start address
.8421		a5 58		lda $58				lda 	NSMantissa0
.8423		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8426		a5 60		lda $60				lda 	NSMantissa1
.8428		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.842b		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.842e		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; options 0-3
.8431		a5 58		lda $58				lda 	NSMantissa0
.8433		8d 20 04	sta $0420			sta 	AssemblerControl
.8436		60		rts				rts
.8437		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8438						AssertCommand:
.8438		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.843a		20 e5 9d	jsr $9de5			jsr 	EvaluateInteger 			; the assert test
.843d		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; exit if result is non zero.
.8440		d0 05		bne $8447			bne 	_ACExit
.8442		a9 0a		lda #$0a		lda	#10
.8444		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.8447						_ACExit:
.8447		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8448						CallCommand:
.8448		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.844a		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.844d						_CCClear
.844d		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.844e		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; these are optional sequentially.
.8451		e0 04		cpx #$04			cpx 	#4
.8453		d0 f8		bne $844d			bne 	_CCClear
.8455		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8457						_CCCParam:
.8457		b1 30		lda ($30),y			lda 	(codePtr),y
.8459		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.845b		d0 09		bne $8466			bne 	_CCCRun6502
.845d		c8		iny				iny 								; skip comma
.845e		e8		inx				inx	 								; next level
.845f		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8462		e0 03		cpx #$03			cpx 	#3
.8464		90 f1		bcc $8457			bcc 	_CCCParam 					; done all 3 ?
.8466						_CCCRun6502:
.8466		5a		phy				phy 								; save position
.8467		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8469		85 37		sta $37				sta 	zTemp0+1
.846b		a5 58		lda $58				lda 	NSMantissa0
.846d		85 36		sta $36				sta 	zTemp0
.846f		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8471		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8473		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8475		20 7a 84	jsr $847a			jsr 	_CCCZTemp0 					; call zTemp0
.8478		7a		ply				ply 								; restore position and exit
.8479		60		rts				rts
.847a						_CCCZTemp0:
.847a		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.847d						ClearCommand:
.847d		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.847f		85 36		sta $36				sta 	0+zTemp0
.8481		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8483		85 37		sta $37				sta 	1+zTemp0
.8485						_ClearZeroLoop:
.8485		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8487		f0 24		beq $84ad			beq 	_ClearZeroEnd
.8489		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.848b		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.848d						_ClearOneVariable:
.848d		91 36		sta ($36),y			sta 	(zTemp0),y
.848f		c8		iny				iny
.8490		c0 08		cpy #$08			cpy 	#8
.8492		d0 f9		bne $848d			bne 	_ClearOneVariable
.8494		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8496		b1 36		lda ($36),y			lda 	(zTemp0),y
.8498		c9 18		cmp #$18			cmp 	#NSTProcedure
.849a		d0 04		bne $84a0			bne 	_ClearNotProcedure
.849c		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.849e		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84a0						_ClearNotProcedure:
.84a0		18		clc				clc 								; go to the next variable
.84a1		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84a3		65 36		adc $36				adc 	zTemp0
.84a5		85 36		sta $36				sta 	zTemp0
.84a7		90 dc		bcc $8485			bcc 	_ClearZeroLoop
.84a9		e6 37		inc $37				inc 	zTemp0+1
.84ab		80 d8		bra $8485			bra 	_ClearZeroLoop
.84ad						_ClearZeroEnd:
.84ad		18		clc				clc
.84ae		a5 36		lda $36				lda 	zTemp0
.84b0		69 01		adc #$01			adc 	#1
.84b2		8d 0c 04	sta $040c			sta 	lowMemPtr
.84b5		a5 37		lda $37				lda 	zTemp0+1
.84b7		69 00		adc #$00			adc 	#0
.84b9		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84bc		20 ae af	jsr $afae			jsr 	StackReset
.84bf		20 14 b0	jsr $b014			jsr 	StringSystemInitialise
.84c2		20 1d 8e	jsr $8e1d			jsr 	ProcedureScan
.84c5		20 59 8b	jsr $8b59			jsr 	Command_Restore
.84c8		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84cb		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84ce		9c 20 04	stz $0420			stz 	AssemblerControl
.84d1		20 67 9a	jsr $9a67			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84d5						ClearScreen:
.84d5		5a		phy				phy
.84d6		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84d8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84db		7a		ply				ply
.84dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84dd						Command_Data:
.84dd		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84df		a2 80		ldx #$80			ldx 	#KWC_EOL
.84e1		20 6f 8e	jsr $8e6f			jsr 	ScanForward
.84e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e5						DimCommand:
.84e5		b1 30		lda ($30),y			lda 	(codePtr),y
.84e7		29 c0		and #$c0			and 	#$C0
.84e9		c9 40		cmp #$40			cmp 	#$40
.84eb		d0 7a		bne $8567			bne 	_DCSyntax 				; n o, error.
.84ed		b1 30		lda ($30),y			lda 	(codePtr),y
.84ef		18		clc				clc
.84f0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84f2		85 3f		sta $3f				sta 	zaTemp+1
.84f4		c8		iny				iny
.84f5		b1 30		lda ($30),y			lda 	(codePtr),y
.84f7		c8		iny				iny
.84f8		85 3e		sta $3e				sta 	zaTemp
.84fa		5a		phy				phy
.84fb		a0 02		ldy #$02			ldy 	#2 						; read type byte
.84fd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ff		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8501		c9 18		cmp #$18			cmp 	#NSTProcedure
.8503		f0 62		beq $8567			beq 	_DCSyntax
.8505		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8507		29 04		and #$04			and 	#NSBIsArray
.8509		f0 64		beq $856f			beq 	_DCType
.850b		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.850d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850f		d0 59		bne $856a			bne 	_DCRedefine
.8511		7a		ply				ply
.8512		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get array size, check it.
.8515		5a		phy				phy
.8516		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8518		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.851a		7a		ply				ply 							; is there a second (e.g. ,x)
.851b		b1 30		lda ($30),y			lda 	(codePtr),y
.851d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.851f		d0 0a		bne $852b			bne 	_DCOneDimension
.8521		c8		iny				iny 							; skip comma
.8522		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get 2nd array size
.8525		5a		phy				phy
.8526		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8528		91 3e		sta ($3e),y			sta 	(zaTemp),y
.852a		7a		ply				ply
.852b						_DCOneDimension:
.852b		5a		phy				phy 							; save position
.852c		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.852e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8530		aa		tax				tax
.8531		c8		iny				iny
.8532		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8534		e8		inx				inx 							; bump them.
.8535		1a		inc a				inc 	a
.8536		20 23 9e	jsr $9e23			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8539		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.853b		29 e0		and #$e0			and 	#$E0
.853d		d0 23		bne $8562			bne 	_DCSize
.853f		a0 02		ldy #$02			ldy 	#2 						; get base type
.8541		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8543		20 80 85	jsr $8580			jsr 	ScaleByBaseType 		; scale by base type
.8546		a5 36		lda $36				lda 	zTemp0
.8548		a6 37		ldx $37				ldx 	zTemp0+1
.854a		20 29 9a	jsr $9a29			jsr 	AllocateXABytes 		; allocate memory
.854d		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.854f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8551		c8		iny				iny
.8552		8a		txa				txa
.8553		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8555		7a		ply				ply 							; get position back
.8556		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 		; check )
.8559		b1 30		lda ($30),y			lda 	(codePtr),y
.855b		c8		iny				iny 							; consume in case
.855c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.855e		f0 85		beq $84e5			beq 	DimCommand
.8560		88		dey				dey 							; undo consume
.8561		60		rts				rts
.8562						_DCSize:
.8562		a9 16		lda #$16		lda	#22
.8564		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.8567						_DCSyntax:
.8567		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.856a						_DCRedefine:
.856a		a9 15		lda #$15		lda	#21
.856c		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.856f						_DCType:
.856f		4c 00 a0	jmp $a000			jmp 	TypeError
.8572						_DCGetSize:
.8572		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8574		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 	; get array dimension
.8577		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8579		f0 e7		beq $8562			beq 	_DCSize
.857b		c9 fe		cmp #$fe			cmp 	#254
.857d		f0 e3		beq $8562			beq 	_DCSize
.857f		60		rts				rts
.8580						ScaleByBaseType:
.8580		29 10		and #$10			and 	#NSBIsString 			; is it string
.8582		d0 19		bne $859d			bne 	_SBBTString
.8584		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8586		48		pha				pha
.8587		a5 36		lda $36				lda 	zTemp0
.8589		48		pha				pha
.858a		06 36		asl $36				asl 	zTemp0 					; x 2
.858c		26 37		rol $37				rol 	zTemp0+1
.858e		06 36		asl $36				asl 	zTemp0 					; x 4
.8590		26 37		rol $37				rol 	zTemp0+1
.8592		68		pla				pla 							; add stacked value = x 5
.8593		65 36		adc $36				adc 	zTemp0
.8595		85 36		sta $36				sta 	zTemp0
.8597		68		pla				pla
.8598		65 37		adc $37				adc 	zTemp0+1
.859a		85 37		sta $37				sta 	zTemp0+1
.859c		60		rts				rts
.859d						_SBBTString:
.859d		06 36		asl $36				asl 	zTemp0
.859f		26 37		rol $37				rol 	zTemp0+1
.85a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85a2						EndCommand:
.85a2		4c e7 83	jmp $83e7			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85a5						ForCommand:
.85a5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85a7		20 48 af	jsr $af48			jsr 	StackOpen
.85aa		a2 00		ldx #$00			ldx 	#0
.85ac		20 7b 98	jsr $987b			jsr 	EvaluateTerm
.85af		b5 50		lda $50,x			lda 	NSStatus,x
.85b1		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85b3		d0 47		bne $85fc			bne		_FCError
.85b5		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85b7		20 24 8f	jsr $8f24			jsr 	CheckNextA
.85ba		e8		inx				inx
.85bb		20 e5 9d	jsr $9de5			jsr 	EvaluateInteger 			; <from> in +1
.85be		b1 30		lda ($30),y			lda 	(codePtr),y
.85c0		c8		iny				iny 								; consume it
.85c1		48		pha				pha 								; save on stack for later
.85c2		c9 b8		cmp #$b8			cmp 	#KWD_DOWNTO
.85c4		f0 04		beq $85ca			beq 	_FCNoSyntax
.85c6		c9 d6		cmp #$d6			cmp 	#KWD_TO
.85c8		d0 35		bne $85ff			bne 	_FCSyntaxError
.85ca						_FCNoSyntax:
.85ca		e8		inx				inx
.85cb		20 e5 9d	jsr $9de5			jsr 	EvaluateInteger
.85ce		20 8d af	jsr $af8d			jsr 	STKSaveCodePosition 		; save loop back position
.85d1		68		pla				pla 								; restore DOWNTO or TO
.85d2		5a		phy				phy 								; save Y on the stack
.85d3		49 b8		eor #$b8			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85d5		f0 02		beq $85d9			beq 	_FCNotDownTo
.85d7		a9 02		lda #$02			lda 	#2
.85d9						_FCNotDownTo:
.85d9		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85da		a0 10		ldy #$10			ldy 	#16
.85dc		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85de		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.85e0		a5 58		lda $58				lda 	NSMantissa0
.85e2		91 34		sta ($34),y			sta 	(basicStack),y
.85e4		a5 60		lda $60				lda 	NSMantissa1
.85e6		c8		iny				iny
.85e7		91 34		sta ($34),y			sta 	(basicStack),y
.85e9		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85eb		a2 01		ldx #$01			ldx 	#1
.85ed		20 02 86	jsr $8602			jsr 	FCIntegerToStack
.85f0		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85f2		a2 02		ldx #$02			ldx 	#2
.85f4		20 02 86	jsr $8602			jsr 	FCIntegerToStack
.85f7		20 1d 86	jsr $861d			jsr 	CopyIndexToReference
.85fa		7a		ply				ply 								; restore position
.85fb		60		rts				rts
.85fc						_FCError:
.85fc		4c 00 a0	jmp $a000			jmp 	TypeError
.85ff						_FCSyntaxError:
.85ff		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.8602						FCIntegerToStack:
.8602		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8604		10 03		bpl $8609			bpl	 	_FCNotNegative
.8606		20 41 9e	jsr $9e41			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8609						_FCNotNegative:
.8609		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.860b		91 34		sta ($34),y			sta 	(basicStack),y
.860d		c8		iny				iny
.860e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8610		91 34		sta ($34),y			sta 	(basicStack),y
.8612		c8		iny				iny
.8613		b5 68		lda $68,x			lda 	NSMantissa2,x
.8615		91 34		sta ($34),y			sta 	(basicStack),y
.8617		c8		iny				iny
.8618		b5 70		lda $70,x			lda 	NSMantissa3,x
.861a		91 34		sta ($34),y			sta 	(basicStack),y
.861c		60		rts				rts
.861d						CopyIndexToReference:
.861d		5a		phy				phy
.861e		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8620		38		sec				sec 								; (because we copy from offset 8)
.8621		b1 34		lda ($34),y			lda 	(basicStack),y
.8623		e9 08		sbc #$08			sbc 	#8
.8625		85 36		sta $36				sta 	zTemp0
.8627		c8		iny				iny
.8628		b1 34		lda ($34),y			lda 	(basicStack),y
.862a		e9 00		sbc #$00			sbc 	#0
.862c		85 37		sta $37				sta 	zTemp0+1
.862e		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8630		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8632		b1 34		lda ($34),y			lda 	(basicStack),y
.8634		0a		asl a				asl 	a 							; into carry
.8635		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8637		90 14		bcc $864d			bcc 	_CITRNormal
.8639		38		sec				sec
.863a						_CITRNegative:
.863a		a9 00		lda #$00			lda 	#0
.863c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.863e		91 36		sta ($36),y			sta 	(zTemp0),y
.8640		c8		iny				iny
.8641		ca		dex				dex
.8642		d0 f6		bne $863a			bne 	_CITRNegative
.8644		88		dey				dey 								; look at MSB of mantissa
.8645		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8647		09 80		ora #$80			ora 	#$80
.8649		91 36		sta ($36),y			sta 	(zTemp0),y
.864b		7a		ply				ply
.864c		60		rts				rts
.864d						_CITRNormal:
.864d		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.864f		91 36		sta ($36),y			sta 	(zTemp0),y
.8651		c8		iny				iny
.8652		ca		dex				dex
.8653		d0 f8		bne $864d			bne 	_CITRNormal
.8655		7a		ply				ply 								; and exit.
.8656		60		rts				rts
.8657						NextCommand:
.8657		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8659		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.865b		20 75 af	jsr $af75			jsr 	StackCheckFrame
.865e		5a		phy				phy
.865f		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8661		b1 34		lda ($34),y			lda 	(basicStack),y
.8663		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8665		30 02		bmi $8669			bmi 	_NCStepNeg
.8667		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8669						_NCStepNeg:
.8669		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.866b		a2 04		ldx #$04			ldx 	#4 							; count to bump
.866d		18		clc				clc
.866e						_NCBump:
.866e		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8670		91 34		sta ($34),y			sta 	(basicStack),y
.8672		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8674		c8		iny				iny 								; next byte
.8675		ca		dex				dex 								; do four times
.8676		d0 f6		bne $866e			bne 	_NCBump
.8678		20 1d 86	jsr $861d			jsr		CopyIndexToReference		; copy it to the reference variable.
.867b		a0 10		ldy #$10			ldy 	#16 						; get step count again
.867d		b1 34		lda ($34),y			lda 	(basicStack),y
.867f		0a		asl a				asl 	a 							; sign bit to carry
.8680		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8682		85 38		sta $38				sta 	zTemp1
.8684		90 02		bcc $8688			bcc 	_NCCompRev 					; use if step is +ve
.8686		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8688						_NCCompRev:
.8688		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.868a		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.868c		85 39		sta $39				sta 	zTemp1+1
.868e		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8690		38		sec				sec
.8691						_NCCompare:
.8691		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8693		b1 34		lda ($34),y			lda 	(basicStack),y
.8695		a4 39		ldy $39				ldy 	zTemp1+1
.8697		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8699		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.869b		e6 39		inc $39				inc 	zTemp1+1
.869d		ca		dex				dex 								; do it 4 times.
.869e		d0 f1		bne $8691			bne 	_NCCompare
.86a0		50 02		bvc $86a4			bvc 	_NCNoOverflow 				; convert to signed comparison
.86a2		49 80		eor #$80			eor 	#$80
.86a4						_NCNoOverflow:
.86a4		7a		ply				ply 								; restore Y position
.86a5		0a		asl a				asl 	a 							; is bit 7 set.
.86a6		90 04		bcc $86ac			bcc 	_NCLoopback 				; if no , >= so loop back
.86a8		20 67 af	jsr $af67			jsr 	StackClose 					; exit the loop
.86ab		60		rts				rts
.86ac						_NCLoopBack:
.86ac		20 9e af	jsr $af9e			jsr 	STKLoadCodePosition 		; loop back
.86af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86b0						Command_GOSUB:
.86b0		a2 00		ldx #$00			ldx 	#0
.86b2		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86b5		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86b7		20 48 af	jsr $af48			jsr 	StackOpen 					; create frame
.86ba		20 8d af	jsr $af8d			jsr 	STKSaveCodePosition 		; save current position
.86bd		4c d3 86	jmp $86d3			jmp 	GotoStackX
.86c0						Command_RETURN:
.86c0		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86c2		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86c4		20 75 af	jsr $af75			jsr 	StackCheckFrame
.86c7		20 9e af	jsr $af9e			jsr 	STKLoadCodePosition 		; restore code position
.86ca		20 67 af	jsr $af67			jsr 	StackClose
.86cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86ce						GotoCommand:
.86ce		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86d0		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.86d3						GotoStackX:
.86d3		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86d5		48		pha				pha 								; it is slightly inefficient, just in cases.
.86d6		b5 58		lda $58,x			lda 	NSMantissa0,x
.86d8		fa		plx				plx
.86d9		20 f4 a5	jsr $a5f4			jsr 	MemorySearch 				; transfer to line number AX.
.86dc		90 05		bcc $86e3			bcc 	_GotoError 					; not found, off end.
.86de		d0 03		bne $86e3			bne 	_GotoError 					; not found exactly
.86e0		4c a3 8b	jmp $8ba3			jmp 	RunNewLine 					; and go straight to new line code.
.86e3						_GotoError:
.86e3		a9 0d		lda #$0d		lda	#13
.86e5		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86e8						IfCommand:
.86e8		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.86ea		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber
.86ed		b1 30		lda ($30),y			lda 	(codePtr),y
.86ef		c9 ac		cmp #$ac			cmp 	#KWD_THEN  					; could be THEN <stuff>
.86f1		d0 0a		bne $86fd			bne 	_IFStructured 				; we still support it.
.86f3		c8		iny				iny 								; consume THEN
.86f4		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; is it zero
.86f7		f0 01		beq $86fa			beq 	_IfFail 					; if fail, go to next line
.86f9		60		rts				rts 								; if THEN just continue
.86fa						_IfFail:
.86fa		4c 8b 8b	jmp $8b8b			jmp 	EOLCommand
.86fd						_IfStructured:
.86fd		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; is it zero
.8700		d0 07		bne $8709			bne 	_IfExit 					; if not, then continue normally.
.8702		a9 b9		lda #$b9			lda 	#KWD_ELSE 					; look for else/endif
.8704		a2 a9		ldx #$a9			ldx 	#KWD_ENDIF
.8706		20 6f 8e	jsr $8e6f			jsr 	ScanForward 				; and run from there
.8709						_IfExit:
.8709		60		rts				rts
.870a						ElseCode:
.870a		a9 a9		lda #$a9			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.870c		aa		tax				tax 								; so just go to the structure exit
.870d		20 6f 8e	jsr $8e6f			jsr 	ScanForward
.8710		60		rts				rts
.8711						EndIf:
.8711		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8712						Command_Input:
.8712		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8714		8d 28 04	sta $0428			sta 	IsInputFlag
.8717		80 03		bra $871c			bra 	Command_IP_Main
.8719						Command_Print:
.8719		9c 28 04	stz $0428			stz 	IsInputFlag 				; clear input flag
.871c						Command_IP_Main:
.871c		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.871d						_CPLoop:
.871d		08		php				php 								; save last action flag
.871e		b1 30		lda ($30),y			lda 	(codePtr),y
.8720		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8722		f0 54		beq $8778			beq 	_CPExit
.8724		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8726		f0 50		beq $8778			beq 	_CPExit
.8728		68		pla				pla 								; throw last action flag
.8729		b1 30		lda ($30),y			lda 	(codePtr),y
.872b		c8		iny				iny
.872c		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.872e		f0 45		beq $8775			beq 	_CPContinueWithSameLine
.8730		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8732		f0 3c		beq $8770			beq 	_CPTab
.8734		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8736		f0 34		beq $876c			beq 	_CPNewLine
.8738		88		dey				dey 								; undo the get.
.8739		20 2f 94	jsr $942f			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.873c		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.873e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8740		f0 0d		beq $874f			beq 	_CPIsValue 					; no, display it.
.8742		ad 28 04	lda $0428			lda 	IsInputFlag 				; if print, dereference and print.
.8745		f0 05		beq $874c			beq 	_CPIsPrint 					; otherwise display.
.8747		20 81 87	jsr $8781			jsr 	CIInputValue 				; input a value to the reference
.874a		80 20		bra $876c			bra 	_CPNewLine
.874c						_CPIsPrint:
.874c		20 f4 96	jsr $96f4			jsr 	Dereference 				; dereference if required.
.874f						_CPIsValue:
.874f		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8751		29 10		and #$10			and 	#NSBIsString
.8753		f0 09		beq $875e			beq 	_CPNumber
.8755		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8757		a5 58		lda $58				lda 	NSMantissa0
.8759		20 e4 87	jsr $87e4			jsr 	CPPrintStringXA
.875c		80 be		bra $871c			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.875e						_CPNumber:
.875e		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8760		20 ad 9c	jsr $9cad			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8763		a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8765		a9 49		lda #$49			lda 	#DecimalBuffer & $FF
.8767		20 e4 87	jsr $87e4			jsr 	CPPrintStringXA 			; print it.
.876a		80 b0		bra $871c			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.876c						_CPNewLine:
.876c		a9 0d		lda #$0d			lda 	#13
.876e		80 02		bra $8772			bra 	_CPPrintChar
.8770						_CPTab:
.8770		a9 09		lda #$09			lda 	#9 							; print TAB
.8772						_CPPrintChar:
.8772		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.8775						_CPContinueWithSameLine:
.8775		38		sec				sec 								; loop round with carry set, which
.8776		80 a5		bra $871d			bra 	_CPLoop 					; will inhibit final CR
.8778						_CPExit:
.8778		28		plp				plp 								; get last action flag
.8779		b0 05		bcs $8780			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.877b		a9 0d		lda #$0d			lda 	#13 						; print new line
.877d		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.8780						_CPExit2:
.8780		60		rts				rts
.8781						CIInputValue:
.8781		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8783						_CIInputLine:
.8783		20 fa 87	jsr $87fa			jsr 	CPInputVector 				; get key
.8786		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8788		f0 1f		beq $87a9			beq 	_CIHaveValue
.878a		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.878c		f0 11		beq $879f			beq 	_CIBackspace
.878e		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8790		90 f1		bcc $8783			bcc 	_CIInputLine
.8792		e0 50		cpx #$50			cpx 	#80 						; max length
.8794		b0 ed		bcs $8783			bcs 	_CIInputLine
.8796		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8799		e8		inx				inx
.879a		20 f7 87	jsr $87f7			jsr 	CPPrintVector 				; echo it.
.879d		80 e4		bra $8783			bra 	_CIInputLine
.879f						_CIBackSpace:
.879f		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87a1		f0 e0		beq $8783			beq 	_CIInputLine
.87a3		20 f7 87	jsr $87f7			jsr 	CPPrintVector 				; echo it.
.87a6		ca		dex				dex
.87a7		80 da		bra $8783			bra 	_CIInputLine
.87a9						_CIHaveValue:
.87a9		9e 2a 05	stz $052a,x			stz 	LineBuffer,x 				; ASCIIZ string now in line buffer.
.87ac		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87ae		29 10		and #$10			and 	#NSBIsString
.87b0		f0 17		beq $87c9			beq 	_CIAssignNumber 			; assign a number
.87b2		a2 01		ldx #$01			ldx 	#1
.87b4		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87b6		95 58		sta $58,x			sta 	NSMantissa0,x
.87b8		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87ba		95 60		sta $60,x			sta 	NSMantissa1,x
.87bc		74 68		stz $68,x			stz 	NSMantissa2,x
.87be		74 70		stz $70,x			stz 	NSMantissa3,x
.87c0		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87c2		95 50		sta $50,x			sta  	NSStatus,x
.87c4		ca		dex				dex 								; X = 0
.87c5		20 36 88	jsr $8836			jsr 	AssignVariable
.87c8		60		rts				rts
.87c9						_CIAssignNumber:
.87c9		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87cb		85 36		sta $36				sta 	zTemp0
.87cd		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87cf		85 37		sta $37				sta 	zTemp0+1
.87d1		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87d3		20 2f 9c	jsr $9c2f			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87d6		90 07		bcc $87df			bcc 	_CIIsOkay
.87d8		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.87da		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.87dd		80 a2		bra $8781			bra 	CIInputValue
.87df						_CIIsOkay:
.87df		ca		dex				dex 								; X = 0
.87e0		20 36 88	jsr $8836			jsr 	AssignVariable
.87e3		60		rts				rts
.87e4						CPPrintStringXA:
.87e4		5a		phy				phy
.87e5		86 37		stx $37				stx 	zTemp0+1
.87e7		85 36		sta $36				sta 	zTemp0
.87e9		a0 00		ldy #$00			ldy 	#0
.87eb						_PSXALoop:
.87eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.87ed		f0 06		beq $87f5			beq 	_PSXAExit
.87ef		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.87f2		c8		iny				iny
.87f3		80 f6		bra $87eb			bra 	_PSXALoop
.87f5						_PSXAExit:
.87f5		7a		ply				ply
.87f6		60		rts				rts
.87f7						CPPrintVector:
.87f7		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.87fa						CPInputVector:
.87fa		4c 17 80	jmp $8017			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.87fd						LetCommand:
.87fd		a2 00		ldx #$00			ldx 	#0
.87ff		b1 30		lda ($30),y			lda 	(codePtr),y
.8801		c9 10		cmp #$10			cmp 	#KWD_AT
.8803		d0 14		bne $8819			bne 	_LCStandard
.8805		c8		iny				iny 								; skip equal
.8806		20 7b 98	jsr $987b			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8809		20 f4 96	jsr $96f4			jsr 	Dereference 				; dereference it to a value
.880c		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.880e		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8810		95 50		sta $50,x			sta 	NSStatus,x
.8812		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8814		d0 0f		bne $8825			bne 	_LCMain
.8816		4c 00 a0	jmp $a000			jmp 	TypeError 					; was a reference before.
.8819						_LCStandard:
.8819		ad 19 94	lda $9419			lda 	PrecedenceLevel+"*"			; precedence > this
.881c		20 33 94	jsr $9433			jsr 	EvaluateExpressionAtPrecedence
.881f		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8821		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8823		f0 0e		beq $8833			beq 	_LetGoProc 					; it's a procedure call.
.8825						_LCMain:
.8825		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8827		20 24 8f	jsr $8f24			jsr 	CheckNextA
.882a		e8		inx				inx 								; RHS
.882b		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue
.882e		ca		dex				dex
.882f		20 36 88	jsr $8836			jsr 	AssignVariable
.8832		60		rts				rts
.8833						_LetGoProc:
.8833		4c 61 8a	jmp $8a61			jmp 	CallProcedure
.8836						AssignVariable:
.8836		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8838		48		pha				pha 								; save a copy
.8839		55 51		eor $51,x			eor 	NSStatus+1,x
.883b		29 10		and #$10			and 	#NSBIsString
.883d		d0 0b		bne $884a			bne 	_ASError
.883f		68		pla				pla 								; get back
.8840		29 10		and #$10			and 	#NSBIsString 				; check type
.8842		d0 03		bne $8847			bne 	_ASString
.8844		4c 32 96	jmp $9632			jmp 	AssignNumber
.8847						_ASString:
.8847		4c 90 96	jmp $9690			jmp 	AssignString
.884a						_ASError:
.884a		4c 00 a0	jmp $a000			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.884d						Command_List:
.884d		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8850		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8852		20 49 80	jsr $8049			jsr 	SNDCommand
.8855		b1 30		lda ($30),y			lda 	(codePtr),y
.8857		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8859		c9 40		cmp #$40			cmp 	#$40  						; of code.
.885b		f0 6e		beq $88cb			beq 	_CLListProcedure
.885d		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.885f		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8861		a9 ff		lda #$ff			lda 	#$FF
.8863		85 5f		sta $5f				sta 	NSMantissa0+7
.8865		85 67		sta $67				sta 	NSMantissa1+7
.8867		b1 30		lda ($30),y			lda 	(codePtr),y
.8869		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.886b		f0 1a		beq $8887			beq 	_CLSecond
.886d		20 48 89	jsr $8948			jsr 	CLIsDigit 					; if not digit, list all
.8870		b0 20		bcs $8892			bcs 	_CLStart
.8872		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8874		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.8877		b1 30		lda ($30),y			lda 	(codePtr),y
.8879		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.887b		f0 0a		beq $8887			beq 	_CLSecond 					; if so go get it
.887d		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.887f		85 5f		sta $5f				sta 	NSMantissa0+7
.8881		a5 64		lda $64				lda 	NSMantissa1+4
.8883		85 67		sta $67				sta 	NSMantissa1+7
.8885		80 0b		bra $8892			bra 	_CLStart
.8887						_CLSecond:
.8887		c8		iny				iny 								; consume comma
.8888		20 48 89	jsr $8948			jsr 	CLIsDigit 					; digit found
.888b		b0 05		bcs $8892			bcs 	_CLStart 					; if not, continue listing
.888d		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.888f		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.8892						_CLStart
.8892		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8894		85 30		sta $30				sta 	codePtr
.8896		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8898		85 31		sta $31				sta 	codePtr+1
.889a						_CLLoop:
.889a		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.889d		f0 27		beq $88c6			beq 	_CLBreak
.889f		b2 30		lda ($30)			lda 	(codePtr)
.88a1		f0 20		beq $88c3			beq 	_CLExit
.88a3		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88a5		20 37 89	jsr $8937			jsr 	CLCompareLineNo
.88a8		90 0c		bcc $88b6			bcc 	_CLNext
.88aa		a2 07		ldx #$07			ldx 	#7
.88ac		20 37 89	jsr $8937			jsr 	CLCompareLineNo
.88af		f0 02		beq $88b3			beq 	_CLDoThisOne
.88b1		b0 03		bcs $88b6			bcs 	_CLNext
.88b3						_CLDoThisOne:
.88b3		20 24 89	jsr $8924			jsr 	CLListOneLine 				; routine to list the current line.
.88b6						_CLNext:
.88b6		18		clc				clc
.88b7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88b9		65 30		adc $30				adc 	codePtr
.88bb		85 30		sta $30				sta 	codePtr
.88bd		90 02		bcc $88c1			bcc 	_CREExit
.88bf		e6 31		inc $31				inc 	codePtr+1 					; carry
.88c1						_CREExit:
.88c1		80 d7		bra $889a			bra 	_CLLoop
.88c3						_CLExit:
.88c3		4c e7 83	jmp $83e7			jmp 	WarmStart
.88c6						_CLBreak:
.88c6		a9 01		lda #$01		lda	#1
.88c8		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.88cb						_CLListProcedure:
.88cb		b1 30		lda ($30),y			lda 	(codePtr),y
.88cd		85 38		sta $38				sta 	zTemp1
.88cf		c8		iny				iny
.88d0		b1 30		lda ($30),y			lda 	(codePtr),y
.88d2		85 39		sta $39				sta 	zTemp1+1
.88d4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88d6		85 30		sta $30				sta 	codePtr
.88d8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88da		85 31		sta $31				sta 	codePtr+1
.88dc						_CLLPSearch:
.88dc		b2 30		lda ($30)			lda 	(codePtr)
.88de		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.88e0		f0 e1		beq $88c3			beq 	_CLExit
.88e2		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.88e4		b1 30		lda ($30),y			lda 	(codePtr),y
.88e6		c9 a6		cmp #$a6			cmp 	#KWD_PROC
.88e8		d0 0e		bne $88f8			bne 	_CLLPNext
.88ea		c8		iny				iny 								; check if PROC this.
.88eb		b1 30		lda ($30),y			lda 	(codePtr),y
.88ed		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.88ef		d0 07		bne $88f8			bne 	_CLLPNext
.88f1		c8		iny				iny
.88f2		b1 30		lda ($30),y			lda 	(codePtr),y
.88f4		c5 39		cmp $39				cmp 	zTemp1+1
.88f6		f0 0d		beq $8905			beq 	_CLLPFound
.88f8						_CLLPNext:
.88f8		18		clc				clc
.88f9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88fb		65 30		adc $30				adc 	codePtr
.88fd		85 30		sta $30				sta 	codePtr
.88ff		90 02		bcc $8903			bcc 	_CREExit
.8901		e6 31		inc $31				inc 	codePtr+1 					; carry
.8903						_CREExit:
.8903		80 d7		bra $88dc			bra 	_CLLPSearch
.8905						_CLLPFound:
.8905		b2 30		lda ($30)			lda 	(codePtr)
.8907		f0 ba		beq $88c3			beq 	_CLExit
.8909		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.890b		b1 30		lda ($30),y			lda 	(codePtr),y
.890d		48		pha				pha
.890e		20 24 89	jsr $8924			jsr 	CLListOneLine 				; list line and go forward
.8911		18		clc				clc
.8912		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8914		65 30		adc $30				adc 	codePtr
.8916		85 30		sta $30				sta 	codePtr
.8918		90 02		bcc $891c			bcc 	_CREExit
.891a		e6 31		inc $31				inc 	codePtr+1 					; carry
.891c						_CREExit:
.891c		68		pla				pla 								; reached ENDPROC ?
.891d		c9 aa		cmp #$aa			cmp 	#KWD_ENDPROC
.891f		d0 e4		bne $8905			bne 	_CLLPFound
.8921		4c e7 83	jmp $83e7			jmp 	WarmStart
.8924						CLListOneLine:
.8924		20 d2 8e	jsr $8ed2			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8927		20 5d 80	jsr $805d			jsr 	TKListConvertLine 			; convert line into token Buffer
.892a		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.892c		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.892e		20 86 8f	jsr $8f86			jsr 	PrintStringXA
.8931		a9 0d		lda #$0d			lda 	#13 						; new line
.8933		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8936		60		rts				rts
.8937						CLCompareLineNo:
.8937		38		sec				sec
.8938		a0 01		ldy #$01			ldy 	#1
.893a		b1 30		lda ($30),y			lda 	(codePtr),y
.893c		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.893e		85 36		sta $36				sta 	zTemp0
.8940		c8		iny				iny
.8941		b1 30		lda ($30),y			lda 	(codePtr),y
.8943		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8945		05 36		ora $36				ora 	zTemp0
.8947		60		rts				rts
.8948						CLIsDigit:
.8948		b1 30		lda ($30),y			lda 	(codePtr),y
.894a		c9 30		cmp #$30			cmp 	#"0"
.894c		90 03		bcc $8951			bcc	 	_CLIDExitFalse
.894e		c9 3a		cmp #$3a			cmp 	#"9"+1
.8950		60		rts				rts
.8951						_CLIDExitFalse:
.8951		38		sec				sec
.8952		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8953						Command_LOCAL:
.8953		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8955		20 61 89	jsr $8961			jsr 	LocaliseNextTerm 			; convert term to a local.
.8958		b1 30		lda ($30),y			lda 	(codePtr),y
.895a		c8		iny				iny
.895b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.895d		f0 f4		beq $8953			beq 	Command_LOCAL 				; if so, localise another variable.
.895f		88		dey				dey 								; unpick pre-get
.8960		60		rts				rts
.8961						LocaliseNextTerm:
.8961		20 7b 98	jsr $987b			jsr 	EvaluateTerm 				; evaluate the term
.8964		b5 50		lda $50,x			lda 	NSStatus,x
.8966		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8968		f0 5c		beq $89c6			beq		_LNTError
.896a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.896c		85 36		sta $36				sta 	zTemp0
.896e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8970		85 37		sta $37				sta  	zTemp0+1
.8972		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8974		29 10		and #$10			and 	#NSBIsString
.8976		d0 1e		bne $8996			bne 	_LNTPushString
.8978		5a		phy				phy
.8979		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.897b						_LNTPushNumLoop:
.897b		b1 36		lda ($36),y			lda		(zTemp0),y
.897d		20 27 af	jsr $af27			jsr 	StackPushByte
.8980		c8		iny				iny
.8981		c0 05		cpy #$05			cpy 	#5
.8983		d0 f6		bne $897b			bne 	_LNTPushNumLoop
.8985		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8987		20 27 af	jsr $af27			jsr 	StackPushByte
.898a		a5 37		lda $37				lda 	zTemp0+1
.898c		20 27 af	jsr $af27			jsr 	StackPushByte
.898f		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8991		20 27 af	jsr $af27			jsr 	StackPushByte
.8994		7a		ply				ply
.8995		60		rts				rts
.8996						_LNTPushString:
.8996		5a		phy				phy
.8997		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8999		85 38		sta $38				sta 	zTemp1
.899b		a0 01		ldy #$01			ldy 	#1
.899d		b1 36		lda ($36),y			lda 	(zTemp0),y
.899f		85 39		sta $39				sta 	zTemp1+1
.89a1		a0 00		ldy #$00			ldy 	#0 							; output string
.89a3		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89a5		f0 0a		beq $89b1			beq 	_LNTStringOut
.89a7						_LNTPushStrLoop:
.89a7		b1 38		lda ($38),y			lda 	(zTemp1),y
.89a9		f0 06		beq $89b1			beq 	_LNTStringOut
.89ab		20 27 af	jsr $af27			jsr 	StackPushByte
.89ae		c8		iny				iny
.89af		80 f6		bra $89a7			bra 	_LNTPushStrLoop
.89b1						_LNTStringOut:
.89b1		98		tya				tya									; output length (chars written).
.89b2		20 27 af	jsr $af27			jsr 	StackPushByte
.89b5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89b7		20 27 af	jsr $af27			jsr 	StackPushByte
.89ba		b5 60		lda $60,x			lda 	NSMantissa1,x
.89bc		20 27 af	jsr $af27			jsr 	StackPushByte
.89bf		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89c1		20 27 af	jsr $af27			jsr 	StackPushByte
.89c4		7a		ply				ply
.89c5		60		rts				rts
.89c6						_LNTError:
.89c6		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.89c9						LocalPopValue:
.89c9		20 3f af	jsr $af3f			jsr 	StackPopByte
.89cc		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.89ce		d0 17		bne $89e7			bne 	_LPVString
.89d0		20 3f af	jsr $af3f			jsr 	StackPopByte 				; address
.89d3		85 37		sta $37				sta 	zTemp0+1
.89d5		20 3f af	jsr $af3f			jsr 	StackPopByte
.89d8		85 36		sta $36				sta 	zTemp0
.89da		5a		phy				phy
.89db		a0 04		ldy #$04			ldy 	#4 							; copy back
.89dd						_LPVNumberCopy:
.89dd		20 3f af	jsr $af3f			jsr 	StackPopByte
.89e0		91 36		sta ($36),y			sta 	(zTemp0),y
.89e2		88		dey				dey
.89e3		10 f8		bpl $89dd			bpl 	_LPVNumberCopy
.89e5		7a		ply				ply 								; and complete
.89e6		60		rts				rts
.89e7						_LPVString:
.89e7		20 3f af	jsr $af3f			jsr 	StackPopByte 				; address of record copied to zTemp0
.89ea		85 37		sta $37				sta 	zTemp0+1
.89ec		20 3f af	jsr $af3f			jsr 	StackPopByte
.89ef		85 36		sta $36				sta 	zTemp0
.89f1		5a		phy				phy
.89f2		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.89f4		85 38		sta $38				sta 	zTemp1
.89f6		a0 01		ldy #$01			ldy 	#1
.89f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.89fa		85 39		sta $39				sta 	zTemp1+1
.89fc		20 3f af	jsr $af3f			jsr 	StackPopByte 				; # chars to get => y
.89ff		a8		tay				tay
.8a00		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a02		f0 0e		beq $8a12			beq 	_LPVStringCopied
.8a04		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a06		91 38		sta ($38),y			sta 	(zTemp1),y
.8a08						_LPVStringCopy:
.8a08		88		dey				dey
.8a09		30 07		bmi $8a12			bmi 	_LPVStringCopied
.8a0b		20 3f af	jsr $af3f			jsr 	StackPopByte
.8a0e		91 38		sta ($38),y			sta 	(zTemp1),y
.8a10		80 f6		bra $8a08			bra 	_LPVStringCopy
.8a12						_LPVStringCopied:
.8a12		fa		plx				plx
.8a13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a14						NewCommand:
.8a14		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; does the actual NEW.
.8a17		4c e7 83	jmp $83e7			jmp 	WarmStart 					; and warm starts straight away.
.8a1a						NewProgram:
.8a1a		20 d6 a5	jsr $a5d6			jsr 	MemoryNew
.8a1d		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a20		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear everything.
.8a23		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8a24						PokeBCommand:
.8a24		a9 01		lda #$01			lda 	#1
.8a26		80 0c		bra $8a34			bra 	PokeCommand
.8a28						PokeWCommand:
.8a28		a9 02		lda #$02			lda 	#2
.8a2a		80 08		bra $8a34			bra 	PokeCommand
.8a2c						PokeLCommand:
.8a2c		a9 03		lda #$03			lda 	#3
.8a2e		80 04		bra $8a34			bra 	PokeCommand
.8a30						PokeDCommand:
.8a30		a9 04		lda #$04			lda 	#4
.8a32		80 00		bra $8a34			bra 	PokeCommand
.8a34						PokeCommand:
.8a34		48		pha				pha 								; save count on stack
.8a35		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8a37		20 f8 9d	jsr $9df8			jsr		Evaluate16BitInteger 		; address
.8a3a		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.8a3d		e8		inx				inx
.8a3e		20 e5 9d	jsr $9de5			jsr		EvaluateInteger 			; data
.8a41		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8a43		85 36		sta $36				sta 	zTemp0
.8a45		a5 60		lda $60				lda 	NSMantissa1
.8a47		85 37		sta $37				sta 	zTemp0+1
.8a49		68		pla				pla 								; count -> zTemp1
.8a4a		85 38		sta $38				sta 	zTemp1
.8a4c		5a		phy				phy 								; save Y position.
.8a4d		a0 00		ldy #$00			ldy 	#0 							; index to write
.8a4f		a2 00		ldx #$00			ldx 	#0 							; index to read
.8a51						_PCLoop:
.8a51		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8a53		91 36		sta ($36),y			sta 	(zTemp0),y
.8a55		c8		iny				iny 								; next byte to write
.8a56		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8a57		18		clc				clc
.8a58		69 08		adc #$08			adc 	#MathStackSize
.8a5a		aa		tax				tax
.8a5b		c6 38		dec $38				dec 	zTemp1 						; done them all
.8a5d		d0 f2		bne $8a51			bne 	_PCLoop
.8a5f		7a		ply				ply 								; restore position.
.8a60		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a61						CallProcedure:
.8a61		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a63		b1 30		lda ($30),y			lda 	(codePtr),y
.8a65		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a67		f0 0c		beq $8a75			beq 	_CPEndParam
.8a69						_CPParamLoop:
.8a69		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue 				; get parameter onto stack
.8a6c		e8		inx				inx 								; bump next stack
.8a6d		b1 30		lda ($30),y			lda 	(codePtr),y
.8a6f		c8		iny				iny
.8a70		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a72		f0 f5		beq $8a69			beq 	_CPParamLoop
.8a74		88		dey				dey 								; unpick.
.8a75						_CPEndParam:
.8a75		8e 16 04	stx $0416			stx 	LastParameter 				; save the last parameters index.
.8a78		c8		iny				iny									; skip right bracket
.8a79		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a7b		20 48 af	jsr $af48			jsr 	StackOpen
.8a7e		20 8d af	jsr $af8d			jsr 	STKSaveCodePosition 		; save loop position
.8a81		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a83		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a85		a5 60		lda $60				lda 	NSMantissa1
.8a87		85 37		sta $37				sta 	zTemp0+1
.8a89		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a8b		b2 36		lda ($36)			lda 	(zTemp0)
.8a8d		85 30		sta $30				sta 	safePtr
.8a8f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a91		85 31		sta $31				sta 	safePtr+1
.8a93		c8		iny				iny
.8a94		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a96		85 32		sta $32				sta 	safePtr+2
.8a98		c8		iny				iny
.8a99		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a9b		85 33		sta $33				sta 	safePtr+3
.8a9d		c8		iny				iny 								; get Y offset -> Y
.8a9e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa0		a8		tay				tay
.8aa1		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8aa3		ec 16 04	cpx $0416			cpx	 	LastParameter 				; check zero parameters at the start
.8aa6		f0 13		beq $8abb			beq 	_ParamExit 					; if so, exit.
.8aa8						_ParamExtract:
.8aa8		ca		dex				dex 								; put a local term on the level before
.8aa9		20 61 89	jsr $8961			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8aac		20 36 88	jsr $8836			jsr 	AssignVariable 				; assign stacked value to the variable.
.8aaf		e8		inx				inx 								; advance to next parameter to do.
.8ab0		e8		inx				inx
.8ab1		ec 16 04	cpx $0416			cpx 	LastParameter 				; are we done ?
.8ab4		f0 05		beq $8abb			beq 	_ParamExit
.8ab6		20 1c 8f	jsr $8f1c			jsr 	CheckComma 					; comma seperating parameters
.8ab9		80 ed		bra $8aa8			bra 	_ParamExtract
.8abb						_ParamExit:
.8abb		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; check )
.8abe		60		rts				rts 								; and continue from here
.8abf						Command_ENDPROC:
.8abf		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ac1		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ac3		20 75 af	jsr $af75			jsr 	StackCheckFrame
.8ac6		20 9e af	jsr $af9e			jsr 	STKLoadCodePosition 		; restore code position
.8ac9		20 67 af	jsr $af67			jsr 	StackClose
.8acc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8acd						Command_Read:
.8acd		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8acf		20 7b 98	jsr $987b			jsr 	EvaluateTerm
.8ad2		b5 50		lda $50,x			lda 	NSStatus,x
.8ad4		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ad6		f0 4f		beq $8b27			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ad8		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; swap code and data
.8adb		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ade		d0 25		bne $8b05			bne 	_CRContinueData  			; forward for the next one.
.8ae0		b2 30		lda ($30)			lda 	(codePtr)
.8ae2		f0 1c		beq $8b00			beq 	_CRNoData
.8ae4						_CRKeepSearching:
.8ae4		a9 b6		lda #$b6			lda 	#KWD_DATA 					; scan for instruction
.8ae6		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ae8		20 6f 8e	jsr $8e6f			jsr 	ScanForward
.8aeb		c9 b6		cmp #$b6			cmp 	#KWD_DATA 					; found data ?
.8aed		f0 16		beq $8b05			beq 	_CRHaveData 				; found it
.8aef		18		clc				clc
.8af0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8af2		65 30		adc $30				adc 	codePtr
.8af4		85 30		sta $30				sta 	codePtr
.8af6		90 02		bcc $8afa			bcc 	_CREExit
.8af8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8afa						_CREExit:
.8afa		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8afc		b2 30		lda ($30)			lda 	(codePtr)
.8afe		d0 e4		bne $8ae4			bne 	_CRKeepSearching
.8b00						_CRNoData:
.8b00		a9 0b		lda #$0b		lda	#11
.8b02		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.8b05						_CRHaveData:
.8b05						_CRContinueData:
.8b05		a2 01		ldx #$01			ldx 	#1
.8b07		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8b0a		ca		dex				dex
.8b0b		20 36 88	jsr $8836			jsr		AssignVariable 				; do the assignment
.8b0e		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8b11		b1 30		lda ($30),y			lda 	(codePtr),y
.8b13		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8b15		d0 04		bne $8b1b			bne 	_CRSwapBack
.8b17		c8		iny				iny 								; consume comma
.8b18		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8b1b						_CRSwapBack:
.8b1b		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs			; swap them back.
.8b1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b20		c8		iny				iny
.8b21		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b23		f0 a8		beq $8acd			beq 	Command_Read 				; if so go round again.
.8b25		88		dey				dey 								; unpick get.
.8b26		60		rts				rts
.8b27						_CRSyntax:
.8b27		4c f6 9f	jmp $9ff6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b2a						RemCommand:
.8b2a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b2c		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b2e		d0 06		bne $8b36			bne 	_RMExit
.8b30		c8		iny				iny 								; point to offset
.8b31		98		tya				tya 								; A = offset position
.8b32		38		sec				sec 								; add size +1 hence SEC
.8b33		71 30		adc ($30),y			adc 	(codePtr),y
.8b35		a8		tay				tay 								; make current position.
.8b36						_RMExit:
.8b36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b37						Command_REPEAT:
.8b37		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b39		20 48 af	jsr $af48			jsr 	StackOpen
.8b3c		20 8d af	jsr $af8d			jsr 	STKSaveCodePosition 		; save loop position
.8b3f		60		rts				rts
.8b40						Command_UNTIL:
.8b40		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b42		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b44		20 75 af	jsr $af75			jsr 	StackCheckFrame
.8b47		a2 00		ldx #$00			ldx 	#0
.8b49		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; work out the number
.8b4c		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; check if zero
.8b4f		f0 04		beq $8b55			beq 	_CULoopBack 				; if so keep looping
.8b51		20 67 af	jsr $af67			jsr 	StackClose		 			; return
.8b54		60		rts				rts
.8b55						_CULoopBack:
.8b55		20 9e af	jsr $af9e			jsr 	STKLoadCodePosition 		; loop back
.8b58		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b59						Command_Restore:
.8b59		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; swap code and data
.8b5c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b5e		85 30		sta $30				sta 	codePtr
.8b60		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b62		85 31		sta $31				sta 	codePtr+1
.8b64		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; put them back
.8b67		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b69		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8b6c		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8b6f		60		rts				rts
.8b70						SwapDataCodePtrs:
.8b70		da		phx				phx
.8b71		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b73						_SDCPLoop:
.8b73		b5 30		lda $30,x			lda 	safePtr,x
.8b75		48		pha				pha
.8b76		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8b79		95 30		sta $30,x			sta 	safePtr,x
.8b7b		68		pla				pla
.8b7c		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8b7f		ca		dex				dex
.8b80		10 f1		bpl $8b73			bpl 	_SDCPLoop
.8b82		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8b85		8c 1b 04	sty $041b			sty 	dataPointer+4
.8b88		a8		tay				tay
.8b89		fa		plx				plx
.8b8a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b8b						EOLCommand:
.8b8b		18		clc				clc
.8b8c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b8e		65 30		adc $30				adc 	codePtr
.8b90		85 30		sta $30				sta 	codePtr
.8b92		90 02		bcc $8b96			bcc 	_CREExit
.8b94		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b96						_CREExit:
.8b96		80 0b		bra $8ba3			bra 	RunNewLine
.8b98						CommandRUN:
.8b98		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8b9b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b9d		85 30		sta $30				sta 	codePtr
.8b9f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ba1		85 31		sta $31				sta 	codePtr+1
.8ba3						RUNNewLine:
.8ba3		b2 30		lda ($30)			lda 	(codePtr)
.8ba5		f0 7b		beq $8c22			beq 	CRNoProgram         		; no then END.
.8ba7		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8ba9		9a		txs				txs
.8baa						RUNCodePointerLine:
.8baa		a0 02		ldy #$02			ldy 	#2 							; start of program
.8bac						_CRIncMainLoop:
.8bac		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8baf		d0 22		bne $8bd3			bne 	_CRNoBreakCheck
.8bb1		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8bb4		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check
.8bb7		f0 64		beq $8c1d			beq 	_CRBreak
.8bb9		a5 01		lda $01				lda 	1 							; save I/O 0
.8bbb		48		pha				pha
.8bbc		64 01		stz $01				stz 	1 							; access I/O Page 0
.8bbe		38		sec				sec 								; calculate timer - LastTick
.8bbf		ad 59 d6	lda $d659			lda 	$D659
.8bc2		aa		tax				tax 								; saving timer in X
.8bc3		ed 5c 06	sbc $065c			sbc 	LastTick
.8bc6		c9 03		cmp #$03			cmp 	#3
.8bc8		90 06		bcc $8bd0			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8bca		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8bcd		20 a3 9e	jsr $9ea3			jsr 	TickHandler 							; go do the code.
.8bd0						_NoFireTick:
.8bd0		68		pla				pla 								; restore I/O 0
.8bd1		85 01		sta $01				sta 	1
.8bd3						_CRNoBreakCheck:
.8bd3		c8		iny				iny									; next token
.8bd4						_CRMainLoop:
.8bd4		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8bd7		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd9		10 10		bpl $8beb			bpl 	_CRNotKeyword				; not a token.
.8bdb		c9 a4		cmp #$a4			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8bdd		b0 04		bcs $8be3			bcs 	_CRIsKeyword
.8bdf		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8be1		b0 34		bcs $8c17			bcs		_CRSyntaxError
.8be3						_CRIsKeyword:
.8be3		c8		iny				iny 								; consume command
.8be4		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8be5		aa		tax				tax 								; put in X for vector jump
.8be6		20 1a 8c	jsr $8c1a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8be9		80 e9		bra $8bd4			bra 	_CRMainLoop 				; and loop round
.8beb						_CRNotKeyword:
.8beb		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8bed		f0 bd		beq $8bac			beq 	_CRIncMainLoop
.8bef		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8bf1		90 05		bcc $8bf8			bcc 	_CRNotVariable
.8bf3						_CRGoLet:
.8bf3		20 fd 87	jsr $87fd			jsr 	LetCommand
.8bf6		80 dc		bra $8bd4			bra 	_CRMainLoop
.8bf8						_CRNotVariable:
.8bf8		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8bfa		f0 f7		beq $8bf3			beq 	_CRGoLet
.8bfc		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8bfe		f0 f3		beq $8bf3			beq 	_CRGoLet
.8c00		c9 21		cmp #$21			cmp 	#KWD_PLING
.8c02		f0 ef		beq $8bf3			beq 	_CRGoLet
.8c04		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8c06		f0 09		beq $8c11			beq 	_CRGoRem
.8c08		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8c0a		d0 0b		bne $8c17			bne 	_CRSyntaxError
.8c0c		20 59 82	jsr $8259			jsr 	LabelHere
.8c0f		80 c3		bra $8bd4			bra 	_CRMainLoop
.8c11						_CRGoRem:
.8c11		c8		iny				iny
.8c12		20 2a 8b	jsr $8b2a			jsr 	RemCommand
.8c15		80 bd		bra $8bd4			bra 	_CRMainLoop
.8c17						_CRSyntaxError:
.8c17		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.8c1a						_CRCallVector0:
.8c1a		7c b8 8c	jmp ($8cb8,x)			jmp 	(VectorSet0,x)
.8c1d						_CRBreak:
.8c1d		a9 01		lda #$01		lda	#1
.8c1f		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.8c22						CRNoProgram:
.8c22		4c a2 85	jmp $85a2			jmp 	EndCommand
.8c25						Shift1Command:
.8c25		b1 30		lda ($30),y			lda 	(codePtr),y
.8c27		c8		iny				iny
.8c28		0a		asl a				asl 	a
.8c29		aa		tax				tax
.8c2a		7c 66 8d	jmp ($8d66,x)			jmp 	(VectorSet1,x)
.8c2d						Shift2Command:
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		c8		iny				iny
.8c30		0a		asl a				asl 	a
.8c31		aa		tax				tax
.8c32		7c 90 8d	jmp ($8d90,x)			jmp 	(VectorSet2,x)
.8c35						Unused1:
.8c35						Unused2:
.8c35						Unused3:
.8c35						Unused4:
.8c35		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
>8c38								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c38						VectorSetPunc:
>8c38		e5 91					.word	ShiftLeft                        ; $00 <<
>8c3a		d0 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8c3c		c6 8f					.word	BinaryCompareNotEqual            ; $02 <>
>8c3e		f6 9f					.word	SyntaxError                      ; $03 !!3
>8c40		f6 9f					.word	SyntaxError                      ; $04 ><
>8c42		da 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c44		e8 91					.word	ShiftRight                       ; $06 >>
>8c46		f6 9f					.word	SyntaxError                      ; $07 !!7
>8c48		f6 9f					.word	SyntaxError                      ; $08 !!8
>8c4a		f6 9f					.word	SyntaxError                      ; $09 !!9
>8c4c		f6 9f					.word	SyntaxError                      ; $0a !!10
>8c4e		f6 9f					.word	SyntaxError                      ; $0b !!11
>8c50		f6 9f					.word	SyntaxError                      ; $0c !!12
>8c52		f6 9f					.word	SyntaxError                      ; $0d !!13
>8c54		f6 9f					.word	SyntaxError                      ; $0e !!14
>8c56		f6 9f					.word	SyntaxError                      ; $0f !!15
>8c58		f6 9f					.word	SyntaxError                      ; $10 @
>8c5a		f6 9f					.word	SyntaxError                      ; $11 !!17
>8c5c		f6 9f					.word	SyntaxError                      ; $12 !!18
>8c5e		f6 9f					.word	SyntaxError                      ; $13 [
>8c60		91 90					.word	IntegerDivide                    ; $14 \
>8c62		f6 9f					.word	SyntaxError                      ; $15 ]
>8c64		23 93					.word	EorInteger                       ; $16 ^
>8c66		f6 9f					.word	SyntaxError                      ; $17 _
>8c68		f6 9f					.word	SyntaxError                      ; $18 `
>8c6a		f6 9f					.word	SyntaxError                      ; $19 !!25
>8c6c		f6 9f					.word	SyntaxError                      ; $1a !!26
>8c6e		f6 9f					.word	SyntaxError                      ; $1b {
>8c70		ee 92					.word	OraInteger                       ; $1c |
>8c72		f6 9f					.word	SyntaxError                      ; $1d }
>8c74		f6 9f					.word	SyntaxError                      ; $1e ~
>8c76		f6 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8c78		f6 9f					.word	SyntaxError                      ; $20
>8c7a		58 93					.word	WordIndirect                     ; $21 !
>8c7c		f6 9f					.word	SyntaxError                      ; $22 "
>8c7e		f6 9f					.word	SyntaxError                      ; $23 #
>8c80		f6 9f					.word	SyntaxError                      ; $24 $
>8c82		d2 90					.word	IntegerModulus                   ; $25 %
>8c84		b9 92					.word	AndInteger                       ; $26 &
>8c86		f6 9f					.word	SyntaxError                      ; $27 '
>8c88		f6 9f					.word	SyntaxError                      ; $28 (
>8c8a		f6 9f					.word	SyntaxError                      ; $29 )
>8c8c		40 91					.word	MulInteger                       ; $2a *
>8c8e		5b 92					.word	AddInteger                       ; $2b +
>8c90		f6 9f					.word	SyntaxError                      ; $2c ,
>8c92		94 92					.word	SubInteger                       ; $2d -
>8c94		f6 9f					.word	SyntaxError                      ; $2e .
>8c96		12 95					.word	FDivideCommand                   ; $2f /
>8c98		f6 9f					.word	SyntaxError                      ; $30 0
>8c9a		f6 9f					.word	SyntaxError                      ; $31 1
>8c9c		f6 9f					.word	SyntaxError                      ; $32 2
>8c9e		f6 9f					.word	SyntaxError                      ; $33 3
>8ca0		f6 9f					.word	SyntaxError                      ; $34 4
>8ca2		f6 9f					.word	SyntaxError                      ; $35 5
>8ca4		f6 9f					.word	SyntaxError                      ; $36 6
>8ca6		f6 9f					.word	SyntaxError                      ; $37 7
>8ca8		f6 9f					.word	SyntaxError                      ; $38 8
>8caa		f6 9f					.word	SyntaxError                      ; $39 9
>8cac		f6 9f					.word	SyntaxError                      ; $3a :
>8cae		f6 9f					.word	SyntaxError                      ; $3b ;
>8cb0		b2 8f					.word	BinaryCompareLess                ; $3c <
>8cb2		a8 8f					.word	BinaryCompareEqual               ; $3d =
>8cb4		bc 8f					.word	BinaryCompareGreater             ; $3e >
>8cb6		7a 93					.word	ByteIndirect                     ; $3f ?
.8cb8						VectorSet0:
>8cb8		8b 8b					.word	EOLCommand                       ; $80 !0:EOF
>8cba		25 8c					.word	Shift1Command                    ; $81 !1:SH1
>8cbc		2d 8c					.word	Shift2Command                    ; $82 !2:SH2
>8cbe		fc 99					.word	AbsUnary                         ; $83 ABS(
>8cc0		0a 9a					.word	AllocUnary                       ; $84 ALLOC(
>8cc2		7a 9a					.word	AscUnary                         ; $85 ASC(
>8cc4		5e 9c					.word	ChrUnary                         ; $86 CHR$(
>8cc6		68 a4					.word	UnaryEvent                       ; $87 EVENT(
>8cc8		a4 8f					.word	UnaryFalse                       ; $88 FALSE
>8cca		87 9a					.word	FracUnary                        ; $89 FRAC(
>8ccc		f2 a3					.word	UnaryHit                         ; $8a HIT(
>8cce		9c 9a					.word	IntUnary                         ; $8b INT(
>8cd0		1d 9c					.word	IsValUnary                       ; $8c ISVAL(
>8cd2		ec a4					.word	UnaryJoyB                        ; $8d JOYB(
>8cd4		c5 a4					.word	UnaryJoyX                        ; $8e JOYX(
>8cd6		c8 a4					.word	UnaryJoyY                        ; $8f JOYY(
>8cd8		31 9d					.word	Unary_Left                       ; $90 LEFT$(
>8cda		ad 9a					.word	LenUnary                         ; $91 LEN(
>8cdc		cb 9a					.word	Unary_Max                        ; $92 MAX(
>8cde		53 9d					.word	Unary_Mid                        ; $93 MID$(
>8ce0		c7 9a					.word	Unary_Min                        ; $94 MIN(
>8ce2		16 9b					.word	Unary_Not                        ; $95 NOT(
>8ce4		29 9b					.word	PeekByteUnary                    ; $96 PEEK(
>8ce6		35 9b					.word	PeekDUnary                       ; $97 PEEKD(
>8ce8		31 9b					.word	PeekLUnary                       ; $98 PEEKL(
>8cea		2d 9b					.word	PeekWUnary                       ; $99 PEEKW(
>8cec		a5 ae					.word	UnaryPlaying                     ; $9a PLAYING(
>8cee		62 9b					.word	Unary_Random                     ; $9b RANDOM(
>8cf0		3e 9d					.word	Unary_Right                      ; $9c RIGHT$(
>8cf2		7f 9b					.word	Unary_Rnd                        ; $9d RND(
>8cf4		f5 9b					.word	SgnUnary                         ; $9e SGN(
>8cf6		70 9c					.word	SpcUnary                         ; $9f SPC(
>8cf8		8b 9c					.word	Unary_Str                        ; $a0 STR$(
>8cfa		00 a5					.word	UnaryTimer                       ; $a1 TIMER(
>8cfc		99 8f					.word	UnaryTrue                        ; $a2 TRUE
>8cfe		13 9c					.word	ValUnary                         ; $a3 VAL(
>8d00		a5 85					.word	ForCommand                       ; $a4 FOR
>8d02		e8 86					.word	IfCommand                        ; $a5 IF
>8d04		35 8c					.word	Unused1                          ; $a6 PROC
>8d06		37 8b					.word	Command_REPEAT                   ; $a7 REPEAT
>8d08		e5 8e					.word	Command_WHILE                    ; $a8 WHILE
>8d0a		11 87					.word	EndIf                            ; $a9 ENDIF
>8d0c		bf 8a					.word	Command_ENDPROC                  ; $aa ENDPROC
>8d0e		57 86					.word	NextCommand                      ; $ab NEXT
>8d10		35 8c					.word	Unused4                          ; $ac THEN
>8d12		40 8b					.word	Command_UNTIL                    ; $ad UNTIL
>8d14		06 8f					.word	Command_WEND                     ; $ae WEND
>8d16		f6 9f					.word	SyntaxError                      ; $af BY
>8d18		48 84					.word	CallCommand                      ; $b0 CALL
>8d1a		a6 a1					.word	CircleCommand                    ; $b1 CIRCLE
>8d1c		7d 84					.word	ClearCommand                     ; $b2 CLEAR
>8d1e		d5 84					.word	ClearScreen                      ; $b3 CLS
>8d20		f6 9f					.word	SyntaxError                      ; $b4 COLOR
>8d22		f6 9f					.word	SyntaxError                      ; $b5 COLOUR
>8d24		dd 84					.word	Command_Data                     ; $b6 DATA
>8d26		e5 84					.word	DimCommand                       ; $b7 DIM
>8d28		35 8c					.word	Unused3                          ; $b8 DOWNTO
>8d2a		0a 87					.word	ElseCode                         ; $b9 ELSE
>8d2c		f6 9f					.word	SyntaxError                      ; $ba FROM
>8d2e		c5 a3					.word	GfxCommand                       ; $bb GFX
>8d30		b0 86					.word	Command_GOSUB                    ; $bc GOSUB
>8d32		ce 86					.word	GotoCommand                      ; $bd GOTO
>8d34		f6 9f					.word	SyntaxError                      ; $be HERE
>8d36		cf a1					.word	ImageCommand                     ; $bf IMAGE
>8d38		12 87					.word	Command_Input                    ; $c0 INPUT
>8d3a		fd 87					.word	LetCommand                       ; $c1 LET
>8d3c		21 a2					.word	LineCommand                      ; $c2 LINE
>8d3e		53 89					.word	Command_LOCAL                    ; $c3 LOCAL
>8d40		f6 9f					.word	SyntaxError                      ; $c4 OFF
>8d42		f6 9f					.word	SyntaxError                      ; $c5 ON
>8d44		f6 9f					.word	SyntaxError                      ; $c6 OUTLINE
>8d46		16 a4					.word	PaletteCommand                   ; $c7 PALETTE
>8d48		1a a2					.word	PlotCommand                      ; $c8 PLOT
>8d4a		24 8a					.word	PokeBCommand                     ; $c9 POKE
>8d4c		30 8a					.word	PokeDCommand                     ; $ca POKED
>8d4e		2c 8a					.word	PokeLCommand                     ; $cb POKEL
>8d50		28 8a					.word	PokeWCommand                     ; $cc POKEW
>8d52		19 87					.word	Command_Print                    ; $cd PRINT
>8d54		cd 8a					.word	Command_Read                     ; $ce READ
>8d56		a2 a1					.word	RectangleCommand                 ; $cf RECT
>8d58		2a 8b					.word	RemCommand                       ; $d0 REM
>8d5a		c0 86					.word	Command_RETURN                   ; $d1 RETURN
>8d5c		f6 9f					.word	SyntaxError                      ; $d2 SOLID
>8d5e		c1 ae					.word	SoundCommand                     ; $d3 SOUND
>8d60		b1 a1					.word	SpriteCommand                    ; $d4 SPRITE
>8d62		eb a1					.word	TextCommand                      ; $d5 TEXT
>8d64		35 8c					.word	Unused2                          ; $d6 TO
.8d66						VectorSet1:
>8d66		f6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d68		f6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d6a		f6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d6c		1c 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d6e		38 84					.word	AssertCommand                    ; $84 ASSERT
>8d70		65 a3					.word	BitmapCtrl                       ; $85 BITMAP
>8d72		a2 85					.word	EndCommand                       ; $86 END
>8d74		79 ae					.word	Explode                          ; $87 EXPLODE
>8d76		f6 9f					.word	SyntaxError                      ; $88 GO
>8d78		4d 88					.word	Command_List                     ; $89 LIST
>8d7a		f6 9f					.word	SyntaxError                      ; $8a LOAD
>8d7c		14 8a					.word	NewCommand                       ; $8b NEW
>8d7e		55 ae					.word	PingCommand                      ; $8c PING
>8d80		59 8b					.word	Command_Restore                  ; $8d RESTORE
>8d82		98 8b					.word	CommandRUN                       ; $8e RUN
>8d84		6d ae					.word	ShootCommand                     ; $8f SHOOT
>8d86		aa a3					.word	SpritesCtrl                      ; $90 SPRITES
>8d88		18 8e					.word	StopCommand                      ; $91 STOP
>8d8a		5f a4					.word	XGoCommand                       ; $92 XGO
>8d8c		56 a4					.word	XLoadCommand                     ; $93 XLOAD
>8d8e		61 ae					.word	ZapCommand                       ; $94 ZAP
.8d90						VectorSet2:
>8d90		f6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d92		f6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d94		f6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d96		b5 9e					.word	Assemble_adc                     ; $83 ADC
>8d98		ad 9e					.word	Assemble_and                     ; $84 AND
>8d9a		c9 9e					.word	Assemble_asl                     ; $85 ASL
>8d9c		33 9f					.word	Assemble_bcc                     ; $86 BCC
>8d9e		37 9f					.word	Assemble_bcs                     ; $87 BCS
>8da0		3f 9f					.word	Assemble_beq                     ; $88 BEQ
>8da2		f6 9e					.word	Assemble_bit                     ; $89 BIT
>8da4		27 9f					.word	Assemble_bmi                     ; $8a BMI
>8da6		3b 9f					.word	Assemble_bne                     ; $8b BNE
>8da8		23 9f					.word	Assemble_bpl                     ; $8c BPL
>8daa		43 9f					.word	Assemble_bra                     ; $8d BRA
>8dac		47 9f					.word	Assemble_brk                     ; $8e BRK
>8dae		2b 9f					.word	Assemble_bvc                     ; $8f BVC
>8db0		2f 9f					.word	Assemble_bvs                     ; $90 BVS
>8db2		4f 9f					.word	Assemble_clc                     ; $91 CLC
>8db4		a3 9f					.word	Assemble_cld                     ; $92 CLD
>8db6		63 9f					.word	Assemble_cli                     ; $93 CLI
>8db8		93 9f					.word	Assemble_clv                     ; $94 CLV
>8dba		c1 9e					.word	Assemble_cmp                     ; $95 CMP
>8dbc		0a 9f					.word	Assemble_cpx                     ; $96 CPX
>8dbe		05 9f					.word	Assemble_cpy                     ; $97 CPY
>8dc0		e7 9e					.word	Assemble_dec                     ; $98 DEC
>8dc2		9f 9f					.word	Assemble_dex                     ; $99 DEX
>8dc4		7b 9f					.word	Assemble_dey                     ; $9a DEY
>8dc6		b1 9e					.word	Assemble_eor                     ; $9b EOR
>8dc8		ec 9e					.word	Assemble_inc                     ; $9c INC
>8dca		af 9f					.word	Assemble_inx                     ; $9d INX
>8dcc		9b 9f					.word	Assemble_iny                     ; $9e INY
>8dce		1e 9f					.word	Assemble_jmp                     ; $9f JMP
>8dd0		19 9f					.word	Assemble_jsr                     ; $a0 JSR
>8dd2		bd 9e					.word	Assemble_lda                     ; $a1 LDA
>8dd4		e2 9e					.word	Assemble_ldx                     ; $a2 LDX
>8dd6		00 9f					.word	Assemble_ldy                     ; $a3 LDY
>8dd8		d3 9e					.word	Assemble_lsr                     ; $a4 LSR
>8dda		b3 9f					.word	Assemble_nop                     ; $a5 NOP
>8ddc		a9 9e					.word	Assemble_ora                     ; $a6 ORA
>8dde		5f 9f					.word	Assemble_pha                     ; $a7 PHA
>8de0		4b 9f					.word	Assemble_php                     ; $a8 PHP
>8de2		a7 9f					.word	Assemble_phx                     ; $a9 PHX
>8de4		67 9f					.word	Assemble_phy                     ; $aa PHY
>8de6		6f 9f					.word	Assemble_pla                     ; $ab PLA
>8de8		53 9f					.word	Assemble_plp                     ; $ac PLP
>8dea		bb 9f					.word	Assemble_plx                     ; $ad PLX
>8dec		77 9f					.word	Assemble_ply                     ; $ae PLY
>8dee		ce 9e					.word	Assemble_rol                     ; $af ROL
>8df0		d8 9e					.word	Assemble_ror                     ; $b0 ROR
>8df2		5b 9f					.word	Assemble_rti                     ; $b1 RTI
>8df4		6b 9f					.word	Assemble_rts                     ; $b2 RTS
>8df6		c5 9e					.word	Assemble_sbc                     ; $b3 SBC
>8df8		57 9f					.word	Assemble_sec                     ; $b4 SEC
>8dfa		b7 9f					.word	Assemble_sed                     ; $b5 SED
>8dfc		73 9f					.word	Assemble_sei                     ; $b6 SEI
>8dfe		b9 9e					.word	Assemble_sta                     ; $b7 STA
>8e00		ab 9f					.word	Assemble_stp                     ; $b8 STP
>8e02		dd 9e					.word	Assemble_stx                     ; $b9 STX
>8e04		fb 9e					.word	Assemble_sty                     ; $ba STY
>8e06		f1 9e					.word	Assemble_stz                     ; $bb STZ
>8e08		8f 9f					.word	Assemble_tax                     ; $bc TAX
>8e0a		8b 9f					.word	Assemble_tay                     ; $bd TAY
>8e0c		14 9f					.word	Assemble_trb                     ; $be TRB
>8e0e		0f 9f					.word	Assemble_tsb                     ; $bf TSB
>8e10		97 9f					.word	Assemble_tsx                     ; $c0 TSX
>8e12		7f 9f					.word	Assemble_txa                     ; $c1 TXA
>8e14		87 9f					.word	Assemble_txs                     ; $c2 TXS
>8e16		83 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8e18						StopCommand:
.8e18		a9 08		lda #$08		lda	#8
.8e1a		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e1d						ProcedureScan:
.8e1d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e1f		85 30		sta $30				sta 	codePtr
.8e21		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e23		85 31		sta $31				sta 	codePtr+1
.8e25						_PSLoop:
.8e25		b2 30		lda ($30)			lda 	(codePtr)
.8e27		f0 42		beq $8e6b			beq 	_PSExit
.8e29		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e2b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e2d		c9 a6		cmp #$a6			cmp 	#KWD_PROC
.8e2f		d0 2d		bne $8e5e			bne 	_PSNext
.8e31		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e32		b1 30		lda ($30),y			lda 	(codePtr),y
.8e34		29 c0		and #$c0			and 	#$C0
.8e36		c9 40		cmp #$40			cmp 	#$40
.8e38		d0 32		bne $8e6c			bne 	_PSSyntax
.8e3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e3c		18		clc				clc
.8e3d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e3f		85 37		sta $37				sta 	zTemp0+1
.8e41		c8		iny				iny 								; LSB
.8e42		b1 30		lda ($30),y			lda 	(codePtr),y
.8e44		85 36		sta $36				sta 	zTemp0
.8e46		c8		iny				iny 								; character after variable call.
.8e47		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e48		a0 07		ldy #$07			ldy 	#7
.8e4a		91 36		sta ($36),y			sta 	(zTemp0),y
.8e4c		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e4e		a0 02		ldy #$02			ldy 	#2
.8e50		91 36		sta ($36),y			sta 	(zTemp0),y
.8e52		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e54						_PSCopy:
.8e54		b5 30		lda $30,x			lda 	safePtr,x
.8e56		c8		iny				iny
.8e57		91 36		sta ($36),y			sta 	(zTemp0),y
.8e59		e8		inx				inx
.8e5a		e0 04		cpx #$04			cpx 	#4
.8e5c		d0 f6		bne $8e54			bne 	_PSCopy
.8e5e						_PSNext:
.8e5e		18		clc				clc
.8e5f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e61		65 30		adc $30				adc 	codePtr
.8e63		85 30		sta $30				sta 	codePtr
.8e65		90 02		bcc $8e69			bcc 	_CREExit
.8e67		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e69						_CREExit:
.8e69		80 ba		bra $8e25			bra 	_PSLoop
.8e6b						_PSExit:
.8e6b		60		rts				rts
.8e6c						_PSSyntax:
.8e6c		4c f6 9f	jmp $9ff6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8e6f						ScanForward:
.8e6f		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8e71		86 37		stx $37				stx 	zTemp0+1
.8e73		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8e75						_ScanLoop:
.8e75		b1 30		lda ($30),y			lda 	(codePtr),y
.8e77		c8		iny				iny
.8e78		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8e7a		d0 0e		bne $8e8a			bne 	_ScanGoNext
.8e7c		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8e7e		f0 04		beq $8e84			beq 	_ScanMatch
.8e80		c5 37		cmp $37				cmp 	zTemp0+1
.8e82		d0 06		bne $8e8a			bne 	_ScanGoNext
.8e84						_ScanMatch:
.8e84		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8e86		d0 01		bne $8e89			bne 	_ScanNotEndEOL
.8e88		88		dey				dey
.8e89						_ScanNotEndEOL:
.8e89		60		rts				rts
.8e8a						_ScanGoNext:
.8e8a		20 8f 8e	jsr $8e8f			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8e8d		80 e6		bra $8e75			bra 	_ScanLoop
.8e8f						ScanForwardOne:
.8e8f		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8e91		90 3e		bcc $8ed1			bcc 	_SFWExit
.8e93		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8e95		90 18		bcc $8eaf			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8e97		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8e99		b0 2f		bcs $8eca			bcs 	_ScanSkipData
.8e9b		c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8e9d		90 32		bcc $8ed1			bcc 	_SFWExit 					; if not, ordinary keywords.
.8e9f		c9 af		cmp #$af			cmp 	#KWC_LAST_STRUCTURE+1
.8ea1		b0 2e		bcs $8ed1			bcs 	_SFWExit
.8ea3		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ea5		c9 a9		cmp #$a9			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ea7		b0 28		bcs $8ed1			bcs 	_SFWExit
.8ea9		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8eab		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8ead		80 22		bra $8ed1			bra 	_SFWExit
.8eaf						_ScanSkipOne:
.8eaf		c8		iny				iny 								; consume the extra one.
.8eb0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8eb2		d0 1d		bne $8ed1			bne 	_SFWExit
.8eb4		18		clc				clc
.8eb5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8eb7		65 30		adc $30				adc 	codePtr
.8eb9		85 30		sta $30				sta 	codePtr
.8ebb		90 02		bcc $8ebf			bcc 	_CREExit
.8ebd		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ebf						_CREExit:
.8ebf		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ec1		b2 30		lda ($30)			lda 	(codePtr)
.8ec3		d0 0c		bne $8ed1			bne 	_SFWExit 					; if not zero, more to scan
.8ec5		a9 13		lda #$13		lda	#19
.8ec7		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.8eca						_ScanSkipData:
.8eca		88		dey				dey 								; point at data token
.8ecb		c8		iny				iny 								; point to offset
.8ecc		98		tya				tya 								; A = offset position
.8ecd		38		sec				sec 								; add size +1 hence SEC
.8ece		71 30		adc ($30),y			adc 	(codePtr),y
.8ed0		a8		tay				tay 								; make current position.
.8ed1						_SFWExit:
.8ed1		60		rts				rts
.8ed2						ScanGetCurrentLineStep:
.8ed2		64 38		stz $38				stz 	zTemp1
.8ed4		a0 03		ldy #$03			ldy 	#3
.8ed6						_SGCLSLoop:
.8ed6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ed8		c8		iny				iny
.8ed9		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8edb		f0 05		beq $8ee2			beq 	_SGCLSExit
.8edd		20 8f 8e	jsr $8e8f			jsr 	ScanForwardOne
.8ee0		80 f4		bra $8ed6			bra 	_SGCLSLoop
.8ee2						_SGCLSExit:
.8ee2		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8ee4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ee5						Command_WHILE:
.8ee5		5a		phy				phy 								; save position of the test
.8ee6		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8ee8		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber
.8eeb		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; check if zero
.8eee		f0 0e		beq $8efe			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8ef0		98		tya				tya 								; position *after* test.
.8ef1		7a		ply				ply 								; restore position before test, at WHILE
.8ef2		88		dey				dey 								; so we execute the WHILE command again.
.8ef3		48		pha				pha 								; push after test on the stack
.8ef4		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ef6		20 48 af	jsr $af48			jsr 	StackOpen
.8ef9		20 8d af	jsr $af8d			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8efc		7a		ply				ply 								; restore the position *after* the test
.8efd		60		rts				rts
.8efe						_WHExitLoop:
.8efe		68		pla				pla 								; throw post loop position
.8eff		a9 ae		lda #$ae			lda 	#KWD_WEND 					; scan forward past WEND
.8f01		aa		tax				tax
.8f02		20 6f 8e	jsr $8e6f			jsr 	ScanForward
.8f05		60		rts				rts
.8f06						Command_WEND:
.8f06		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8f08		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8f0a		20 75 af	jsr $af75			jsr 	StackCheckFrame
.8f0d		20 9e af	jsr $af9e			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8f10		20 67 af	jsr $af67			jsr 	StackClose		 			; erase the frame
.8f13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8f14						CheckRightBracket:
.8f14		b1 30		lda ($30),y			lda 	(codePtr),y
.8f16		c8		iny				iny
.8f17		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8f19		d0 0f		bne $8f2a			bne 	CNAFail
.8f1b		60		rts				rts
.8f1c						CheckComma:
.8f1c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f1e		c8		iny				iny
.8f1f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f21		d0 07		bne $8f2a			bne 	CNAFail
.8f23		60		rts				rts
.8f24						CheckNextA:
.8f24		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f26		d0 02		bne $8f2a			bne 	CNAFail
.8f28		c8		iny				iny 								; skip character
.8f29		60		rts				rts 								; and exit
.8f2a						CNAFail:
.8f2a		4c f6 9f	jmp $9ff6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f2d						ErrorHandler:
.8f2d		a8		tay				tay 								; find the error text
.8f2e		f0 49		beq $8f79			beq 	_EHEnd
.8f30		a2 00		ldx #$00			ldx 	#0
.8f32		a9 0f		lda #$0f			lda 	#((ErrorText) & $FF)
.8f34		85 36		sta $36				sta 	0+zTemp0
.8f36		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.8f38		85 37		sta $37				sta 	1+zTemp0
.8f3a						_EHFind:
.8f3a		88		dey				dey 								; keep looking through text
.8f3b		f0 0e		beq $8f4b			beq 	_EHFound
.8f3d						_EHFindZero:
.8f3d		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f3f		e6 36		inc $36				inc 	zTemp0
.8f41		d0 02		bne $8f45			bne 	_EHFNoCarry
.8f43		e6 37		inc $37				inc 	zTemp0+1
.8f45						_EHFNoCarry:
.8f45		c9 00		cmp #$00			cmp 	#0
.8f47		d0 f4		bne $8f3d			bne 	_EHFindZero
.8f49		80 ef		bra $8f3a			bra 	_EHFind
.8f4b						_EHFound:
.8f4b		a5 36		lda $36				lda 	zTemp0 						; print message
.8f4d		a6 37		ldx $37				ldx 	zTemp0+1
.8f4f		20 86 8f	jsr $8f86			jsr 	PrintStringXA
.8f52		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f54		b1 30		lda ($30),y			lda 	(codePtr),y
.8f56		d0 05		bne $8f5d			bne 	_EHAtMsg
.8f58		c8		iny				iny
.8f59		b1 30		lda ($30),y			lda 	(codePtr),y
.8f5b		f0 17		beq $8f74			beq 	_EHCREnd
.8f5d						_EHAtMsg:
.8f5d		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8f5f		a9 7c		lda #$7c			lda 	#_AtMsg & $FF
.8f61		20 86 8f	jsr $8f86			jsr 	PrintStringXA
.8f64		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8f66		b1 30		lda ($30),y			lda 	(codePtr),y
.8f68		48		pha				pha
.8f69		c8		iny				iny
.8f6a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f6c		aa		tax				tax
.8f6d		68		pla				pla
.8f6e		20 9c 93	jsr $939c			jsr 	ConvertInt16 				; convert XA to string
.8f71		20 86 8f	jsr $8f86			jsr 	PrintStringXA 				; and print it.
.8f74						_EHCREnd:
.8f74		a9 0d		lda #$0d			lda 	#13 						; new line
.8f76		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f79						_EHEnd:
.8f79		4c e7 83	jmp $83e7			jmp 	WarmStart
>8f7c		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8f84		20 00
.8f86						PrintStringXA:
.8f86		5a		phy				phy
.8f87		86 37		stx $37				stx 	zTemp0+1
.8f89		85 36		sta $36				sta 	zTemp0
.8f8b		a0 00		ldy #$00			ldy 	#0
.8f8d						_PSXALoop:
.8f8d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f8f		f0 06		beq $8f97			beq 	_PSXAExit
.8f91		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f94		c8		iny				iny
.8f95		80 f6		bra $8f8d			bra 	_PSXALoop
.8f97						_PSXAExit:
.8f97		7a		ply				ply
.8f98		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8f99						UnaryTrue:
.8f99		fa		plx				plx
.8f9a						ReturnTrue:
.8f9a		a9 01		lda #$01			lda 	#1  						; set to 1
.8f9c		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.8f9f		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8fa1		95 50		sta $50,x			sta 	NSStatus,x
.8fa3		60		rts				rts
.8fa4						UnaryFalse:
.8fa4		fa		plx				plx
.8fa5						ReturnFalse:
.8fa5		4c 78 9e	jmp $9e78			jmp 	NSMSetZero 					; set it all to zero
.8fa8						BinaryCompareEqual:
.8fa8		fa		plx				plx
.8fa9		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fac		c9 00		cmp #$00			cmp 	#0
.8fae		f0 ea		beq $8f9a			beq 	ReturnTrue
.8fb0		80 f3		bra $8fa5			bra 	ReturnFalse
.8fb2						BinaryCompareLess:
.8fb2		fa		plx				plx
.8fb3		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fb6		c9 ff		cmp #$ff			cmp 	#$FF
.8fb8		f0 e0		beq $8f9a			beq 	ReturnTrue
.8fba		80 e9		bra $8fa5			bra 	ReturnFalse
.8fbc						BinaryCompareGreater:
.8fbc		fa		plx				plx
.8fbd		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fc0		c9 01		cmp #$01			cmp 	#1
.8fc2		f0 d6		beq $8f9a			beq 	ReturnTrue
.8fc4		80 df		bra $8fa5			bra 	ReturnFalse
.8fc6						BinaryCompareNotEqual:
.8fc6		fa		plx				plx
.8fc7		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fca		c9 00		cmp #$00			cmp 	#0
.8fcc		d0 cc		bne $8f9a			bne 	ReturnTrue
.8fce		80 d5		bra $8fa5			bra 	ReturnFalse
.8fd0						BinaryCompareLessEqual:
.8fd0		fa		plx				plx
.8fd1		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fd4		c9 01		cmp #$01			cmp 	#1
.8fd6		d0 c2		bne $8f9a			bne 	ReturnTrue
.8fd8		80 cb		bra $8fa5			bra 	ReturnFalse
.8fda						BinaryCompareGreaterEqual:
.8fda		fa		plx				plx
.8fdb		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode
.8fde		c9 ff		cmp #$ff			cmp 	#$FF
.8fe0		d0 b8		bne $8f9a			bne 	ReturnTrue
.8fe2		80 c1		bra $8fa5			bra 	ReturnFalse
.8fe4						CompareBaseCode:
.8fe4		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; make both values if references.
.8fe7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.8fe9		15 51		ora $51,x			ora 	NSStatus+1,x
.8feb		29 10		and #$10			and 	#NSTString
.8fed		d0 37		bne $9026			bne 	_CBCString 					; if so do string code, which will check if both.
.8fef		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.8ff1		15 79		ora $79,x			ora 	NSExponent+1,x
.8ff3		d0 34		bne $9029			bne 	_CBCFloat
.8ff5		b5 50		lda $50,x			lda 	NSStatus,x
.8ff7		15 51		ora $51,x			ora 	NSStatus+1,x
.8ff9		29 08		and #$08			and 	#NSTFloat
.8ffb		d0 2c		bne $9029			bne 	_CBCFloat
.8ffd		20 2c 90	jsr $902c			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9000		e8		inx				inx
.9001		20 2c 90	jsr $902c			jsr 	CompareFixMinusZero
.9004		ca		dex				dex
.9005		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9007		55 51		eor $51,x			eor 	NSStatus+1,x
.9009		10 0a		bpl $9015			bpl 	_CDCSameSign
.900b		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.900d		30 14		bmi $9023			bmi 	_CBCLess 					; return $FF
.900f						_CBCGreater:
.900f		a9 01		lda #$01			lda 	#1
.9011		60		rts				rts
.9012						_CBCEqual:
.9012		a9 00		lda #$00			lda 	#0
.9014		60		rts				rts
.9015						_CDCSameSign:
.9015		20 41 92	jsr $9241			jsr 	SubTopTwoStack 				; unsigned subtract
.9018		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; or the mantissa together
.901b		f0 f5		beq $9012			beq 	_CBCEqual 					; -0 == 0
.901d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.901f		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9021		10 ec		bpl $900f			bpl 	_CBCGreater
.9023						_CBCLess:
.9023		a9 ff		lda #$ff			lda 	#$FF
.9025		60		rts				rts
.9026						_CBCString:
.9026		4c b2 91	jmp $91b2			jmp 	CompareStrings
.9029						_CBCFloat:
.9029		4c fc 94	jmp $94fc			jmp 	CompareFloat
.902c						CompareFixMinusZero:
.902c		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero
.902f		d0 02		bne $9033			bne 	_CFXMZNotZero
.9031		74 50		stz $50,x			stz 	NSStatus,x
.9033						_CFXMZNotZero:
.9033		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9034						StringConcat:
.9034		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9036		35 51		and $51,x			and 	NSStatus+1,x
.9038		29 18		and #$18			and 	#NSBTypeMask
.903a		c9 10		cmp #$10			cmp 	#NSTString
.903c		d0 50		bne $908e			bne		_SCType
.903e		64 38		stz $38				stz 	zTemp1 						; counting total length
.9040		e8		inx				inx
.9041		20 5f 90	jsr $905f			jsr 	_SCSetupZ0 					; setup for second
.9044		20 68 90	jsr $9068			jsr 	_SCLengthZ0 				; length for second
.9047		ca		dex				dex
.9048		20 5f 90	jsr $905f			jsr 	_SCSetupZ0 					; setup for first
.904b		20 68 90	jsr $9068			jsr 	_SCLengthZ0 				; length for first
.904e		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9050		20 38 b0	jsr $b038			jsr 	StringTempAllocate
.9053		20 7f 90	jsr $907f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9056		e8		inx				inx
.9057		20 5f 90	jsr $905f			jsr 	_SCSetupZ0 					; copy second out
.905a		20 7f 90	jsr $907f			jsr 	_SCCopy
.905d		ca		dex				dex
.905e		60		rts				rts
.905f						_SCSetupZ0:
.905f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9061		85 36		sta $36				sta 	zTemp0
.9063		b5 60		lda $60,x			lda 	NSMantissa1,x
.9065		85 37		sta $37				sta 	zTemp0+1
.9067		60		rts				rts
.9068						_SCLengthZ0:
.9068		5a		phy				phy
.9069		a0 00		ldy #$00			ldy 	#0
.906b						_SCLenLoop:
.906b		b1 36		lda ($36),y			lda 	(zTemp0),y
.906d		f0 0e		beq $907d			beq 	_SCLExit
.906f		c8		iny				iny
.9070		e6 38		inc $38				inc 	zTemp1
.9072		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9074		c9 fd		cmp #$fd			cmp 	#253
.9076		d0 f3		bne $906b			bne		_SCLenLoop
.9078		a9 09		lda #$09		lda	#9
.907a		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.907d						_SCLExit:
.907d		7a		ply				ply
.907e		60		rts				rts
.907f						_SCCopy:
.907f		5a		phy				phy
.9080		a0 00		ldy #$00			ldy 	#0
.9082						_SCCopyLoop:
.9082		b1 36		lda ($36),y			lda 	(zTemp0),y
.9084		f0 06		beq $908c			beq 	_SCCExit
.9086		20 71 b0	jsr $b071			jsr 	StringTempWrite
.9089		c8		iny				iny
.908a		80 f6		bra $9082			bra 	_SCCopyLoop
.908c						_SCCExit:
.908c		7a		ply				ply
.908d		60		rts				rts
.908e						_SCType:
.908e		4c 00 a0	jmp $a000			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9091						IntegerDivide:
.9091		fa		plx				plx
.9092		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9094		15 51		ora $51,x			ora 	NSStatus+1,x
.9096		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9097		0a		asl a				asl 	a
.9098		10 05		bpl $909f			bpl 	_NotRef
.909a		48		pha				pha
.909b		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.909e		68		pla				pla
.909f						_NotRef:
.909f		0a		asl a				asl 	a
.90a0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90a2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90a4		15 79		ora $79,x			ora 	NSExponent+1,x
.90a6		f0 03		beq $90ab			beq 	_IntegerCode 				; if clear, then we have two integers
.90a8		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.90ab						_IntegerCode:
.90ab		20 c5 90	jsr $90c5			jsr 	CheckDivideZero 			; do div zero check
.90ae		20 f7 90	jsr $90f7			jsr 	Int32Divide 				; do the division
.90b1		20 a8 91	jsr $91a8			jsr 	CalculateSign 				; calculate result sign
.90b4						NSMCopyPlusTwoToZero:
.90b4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90b6		95 58		sta $58,x			sta 	NSMantissa0,x
.90b8		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.90ba		95 60		sta $60,x			sta 	NSMantissa1,x
.90bc		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.90be		95 68		sta $68,x			sta 	NSMantissa2,x
.90c0		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.90c2		95 70		sta $70,x			sta 	NSMantissa3,x
.90c4		60		rts				rts
.90c5						CheckDivideZero:
.90c5		e8		inx				inx
.90c6		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero
.90c9		f0 02		beq $90cd			beq 	_CDVError
.90cb		ca		dex				dex
.90cc		60		rts				rts
.90cd						_CDVError:
.90cd		a9 03		lda #$03		lda	#3
.90cf		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.90d2						IntegerModulus:
.90d2		fa		plx				plx
.90d3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90d5		15 51		ora $51,x			ora 	NSStatus+1,x
.90d7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90d8		0a		asl a				asl 	a
.90d9		10 05		bpl $90e0			bpl 	_NotRef
.90db		48		pha				pha
.90dc		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90df		68		pla				pla
.90e0						_NotRef:
.90e0		0a		asl a				asl 	a
.90e1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90e3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90e5		15 79		ora $79,x			ora 	NSExponent+1,x
.90e7		f0 03		beq $90ec			beq 	_IntegerCode 				; if clear, then we have two integers
.90e9		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.90ec						_IntegerCode:
.90ec						IntegerModulusNoCheck:
.90ec		20 c5 90	jsr $90c5			jsr 	CheckDivideZero 			; do div zero check
.90ef		20 f7 90	jsr $90f7			jsr 	Int32Divide 				; do the division
.90f2		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.90f4		56 50		lsr $50,x			lsr 	NSStatus,x
.90f6		60		rts				rts
.90f7						Int32Divide:
.90f7		48		pha				pha 								; save AXY
.90f8		5a		phy				phy
.90f9		20 5b 9e	jsr $9e5b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.90fc		20 74 9e	jsr $9e74			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.90ff		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9101						_I32DivideLoop:
.9101		e8		inx				inx
.9102		e8		inx				inx
.9103		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9106		ca		dex				dex
.9107		ca		dex				dex
.9108		20 88 9e	jsr $9e88			jsr 	NSMRotateLeft
.910b		20 36 91	jsr $9136			jsr 	DivideCheckSubtract 		; check if subtract possible
.910e		90 02		bcc $9112			bcc 	_I32DivideNoCarryIn
.9110		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9112						_I32DivideNoCarryIn:
.9112		88		dey				dey 								; loop round till division completed.
.9113		d0 ec		bne $9101			bne 	_I32DivideLoop
.9115		7a		ply				ply 								; restore AXY and exit
.9116		68		pla				pla
.9117		60		rts				rts
.9118						Int32ShiftDivide:
.9118		48		pha				pha 								; save AY
.9119		5a		phy				phy
.911a		e8		inx				inx 								; clear S[X+2]
.911b		e8		inx				inx
.911c		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.911f		ca		dex				dex
.9120		ca		dex				dex
.9121		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9123						_I32SDLoop:
.9123		20 36 91	jsr $9136			jsr 	DivideCheckSubtract 		; check if subtract possible
.9126		e8		inx				inx
.9127		e8		inx				inx
.9128		20 88 9e	jsr $9e88			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.912b		ca		dex				dex
.912c		ca		dex				dex
.912d		20 88 9e	jsr $9e88			jsr 	NSMRotateLeft
.9130		88		dey				dey 	 							; do 31 times
.9131		d0 f0		bne $9123			bne 	_I32SDLoop
.9133		7a		ply				ply 								; restore AY and exit
.9134		68		pla				pla
.9135		60		rts				rts
.9136						DivideCheckSubtract:
.9136		20 41 92	jsr $9241			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9139		b0 04		bcs $913f			bcs 	_DCSExit 					; if carry set, then could do, exit
.913b		20 27 92	jsr $9227			jsr 	AddTopTwoStack 				; add it back in
.913e		18		clc				clc 								; and return False
.913f						_DCSExit:
.913f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9140						MulInteger:
.9140		fa		plx				plx
.9141		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9143		15 51		ora $51,x			ora 	NSStatus+1,x
.9145		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9146		0a		asl a				asl 	a
.9147		10 05		bpl $914e			bpl 	_NotRef
.9149		48		pha				pha
.914a		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.914d		68		pla				pla
.914e						_NotRef:
.914e		0a		asl a				asl 	a 							; put MSB of type into A:7
.914f		30 09		bmi $915a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9151		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9153		15 79		ora $79,x			ora 	NSExponent+1,x
.9155		f0 06		beq $915d			beq 	_IntegerCode 				; if clear, then we have two integers
.9157		4c be 95	jmp $95be			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.915a						_StringData:
.915a		4c 0a a0	jmp $a00a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.915d						_IntegerCode:
.915d		20 6a 91	jsr $916a			jsr 	MultiplyShort
.9160		c9 00		cmp #$00			cmp 	#0
.9162		f0 05		beq $9169			beq 	_MIExit
.9164		a9 04		lda #$04		lda	#4
.9166		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.9169						_MIExit:
.9169		60		rts				rts
.916a						MultiplyShort:
.916a		5a		phy				phy 								; save Y
.916b		20 5b 9e	jsr $9e5b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.916e		20 74 9e	jsr $9e74			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9171		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9173						_I32MLoop:
.9173		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9175		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9177		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9179		15 72		ora $72,x			ora 	NSMantissa3+2,x
.917b		f0 25		beq $91a2			beq 	_I32MExit 					; exit if zero
.917d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.917f		29 01		and #$01			and 	#1
.9181		f0 0d		beq $9190			beq 	_I32MNoAdd
.9183		20 27 92	jsr $9227			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9186		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9188		10 06		bpl $9190			bpl 	_I32MNoAdd
.918a						_I32ShiftRight:
.918a		20 91 9e	jsr $9e91			jsr 	NSMShiftRight 				; shift S[X] right
.918d		c8		iny				iny 								; increment shift count
.918e		80 09		bra $9199			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9190						_I32MNoAdd:
.9190		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9192		70 f6		bvs $918a			bvs 	_I32ShiftRight 				; instead.
.9194		e8		inx				inx
.9195		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9198		ca		dex				dex
.9199						_I32MShiftUpper:
.9199		e8		inx				inx 								; shift S[X+2] right
.919a		e8		inx				inx
.919b		20 91 9e	jsr $9e91			jsr 	NSMShiftRight
.919e		ca		dex				dex
.919f		ca		dex				dex
.91a0		80 d1		bra $9173			bra 	_I32MLoop 					; try again.
.91a2						_I32MExit:
.91a2		20 a8 91	jsr $91a8			jsr 	CalculateSign
.91a5		98		tya				tya 								; shift in A
.91a6		7a		ply				ply 								; restore Y and exit
.91a7		60		rts				rts
.91a8						CalculateSign:
.91a8		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91aa		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.91ac		55 51		eor $51,x			eor 	NSStatus+1,x
.91ae		0a		asl a				asl 	a 							; shift bit 7 into carry
.91af		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.91b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.91b2						CompareStrings:
.91b2		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.91b4		35 51		and $51,x			and 	NSStatus+1,x
.91b6		29 10		and #$10			and 	#NSBIsString
.91b8		f0 28		beq $91e2			beq 	_CSTypeError
.91ba		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.91bc		85 36		sta $36				sta 	zTemp0
.91be		b5 60		lda $60,x			lda 	NSMantissa1,x
.91c0		85 37		sta $37				sta 	zTemp0+1
.91c2		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.91c4		85 38		sta $38				sta 	zTemp1
.91c6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.91c8		85 39		sta $39				sta 	zTemp1+1
.91ca		5a		phy				phy 								; save Y so we can access strings
.91cb		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91cd						_CSLoop:
.91cd		c8		iny				iny
.91ce		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91d0		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91d2		d0 06		bne $91da			bne 	_CSDifferent
.91d4		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91d6		d0 f5		bne $91cd			bne 	_CSLoop 					; still comparing
.91d8						_CSExit:
.91d8		7a		ply				ply 								; reached end, return zero in A from EOS
.91d9		60		rts				rts
.91da						_CSDifferent:
.91da		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91dc		90 fa		bcc $91d8			bcc		_CSExit
.91de		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91e0		80 f6		bra $91d8			bra 	_CSExit
.91e2						_CSTypeError:
.91e2		4c 00 a0	jmp $a000			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91e5						ShiftLeft:
.91e5		38		sec				sec 								; common code, carry determines which way.
.91e6		80 01		bra $91e9			bra 	ShiftMain
.91e8						ShiftRight:
.91e8		18		clc				clc
.91e9						ShiftMain:
.91e9		fa		plx				plx 								; restore X
.91ea		08		php				php 								; save direction
.91eb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91ed		15 51		ora $51,x			ora 	NSStatus+1,x
.91ef		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f0		0a		asl a				asl 	a
.91f1		10 05		bpl $91f8			bpl 	_NotRef
.91f3		48		pha				pha
.91f4		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91f7		68		pla				pla
.91f8						_NotRef:
.91f8		0a		asl a				asl 	a
.91f9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91fb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91fd		15 79		ora $79,x			ora 	NSExponent+1,x
.91ff		f0 03		beq $9204			beq 	_IntegerCode 				; if clear, then we have two integers
.9201		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.9204						_IntegerCode:
.9204		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9206		29 e0		and #$e0			and 	#$E0
.9208		15 61		ora $61,x			ora 	NSMantissa1+1,x
.920a		15 69		ora $69,x			ora 	NSMantissa2+1,x
.920c		15 71		ora $71,x			ora 	NSMantissa3+1,x
.920e		d0 12		bne $9222			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9210						_SMLoop:
.9210		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9212		30 11		bmi $9225			bmi 	_SMExit 					; exit if done.
.9214		28		plp				plp 								; restore direction setting
.9215		08		php				php
.9216		90 05		bcc $921d			bcc 	_SMRight
.9218		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; shift left if CS
.921b		80 f3		bra $9210			bra 	_SMLoop
.921d						_SMRight:
.921d		20 91 9e	jsr $9e91			jsr 	NSMShiftRight 				; shift right if CC
.9220		80 ee		bra $9210			bra 	_SMLoop
.9222						_SMExit0:
.9222		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; return zero.
.9225						_SMExit:
.9225		28		plp				plp 								; throw direction
.9226		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9227						AddTopTwoStack:
.9227		18		clc				clc
.9228		b5 58		lda $58,x			lda		NSMantissa0,x
.922a		75 59		adc $59,x			adc 		NSMantissa0+1,x
.922c		95 58		sta $58,x			sta 	NSMantissa0,x
.922e		b5 60		lda $60,x			lda		NSMantissa1,x
.9230		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9232		95 60		sta $60,x			sta 	NSMantissa1,x
.9234		b5 68		lda $68,x			lda		NSMantissa2,x
.9236		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9238		95 68		sta $68,x			sta 	NSMantissa2,x
.923a		b5 70		lda $70,x			lda		NSMantissa3,x
.923c		75 71		adc $71,x			adc 		NSMantissa3+1,x
.923e		95 70		sta $70,x			sta 	NSMantissa3,x
.9240		60		rts				rts
.9241						SubTopTwoStack:
.9241		38		sec				sec
.9242		b5 58		lda $58,x			lda		NSMantissa0,x
.9244		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9246		95 58		sta $58,x			sta 	NSMantissa0,x
.9248		b5 60		lda $60,x			lda		NSMantissa1,x
.924a		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.924c		95 60		sta $60,x			sta 	NSMantissa1,x
.924e		b5 68		lda $68,x			lda		NSMantissa2,x
.9250		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9252		95 68		sta $68,x			sta 	NSMantissa2,x
.9254		b5 70		lda $70,x			lda		NSMantissa3,x
.9256		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9258		95 70		sta $70,x			sta 	NSMantissa3,x
.925a		60		rts				rts
.925b						AddInteger:
.925b		fa		plx				plx
.925c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.925e		15 51		ora $51,x			ora 	NSStatus+1,x
.9260		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9261		0a		asl a				asl 	a
.9262		10 05		bpl $9269			bpl 	_NotRef
.9264		48		pha				pha
.9265		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9268		68		pla				pla
.9269						_NotRef:
.9269		0a		asl a				asl 	a 							; put MSB of type into A:7
.926a		30 09		bmi $9275			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.926c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.926e		15 79		ora $79,x			ora 	NSExponent+1,x
.9270		f0 06		beq $9278			beq 	_IntegerCode 				; if clear, then we have two integers
.9272		4c 6e 94	jmp $946e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9275						_StringData:
.9275		4c 34 90	jmp $9034			jmp 	StringConcat							; at least one string - don't know both are strings.
.9278						_IntegerCode:
.9278						AddCode:
.9278		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.927a		55 51		eor $51,x			eor 	NSStatus+1,x
.927c		10 a9		bpl $9227			bpl 	AddTopTwoStack
.927e		20 41 92	jsr $9241			jsr 	SubTopTwoStack 				; do a physical subtraction
.9281		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9283		10 07		bpl $928c			bpl 	_AddExit
.9285		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9287		95 50		sta $50,x			sta 	NSStatus,x
.9289		20 41 9e	jsr $9e41			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.928c						_AddExit:
.928c		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; check for -0
.928f		d0 02		bne $9293			bne 	_AddNonZero
.9291		74 50		stz $50,x			stz 	NSStatus,x
.9293						_AddNonZero:
.9293		60		rts				rts
.9294						SubInteger:
.9294		fa		plx				plx
.9295		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9297		15 51		ora $51,x			ora 	NSStatus+1,x
.9299		0a		asl a				asl 	a 							; shift reference bit into sign bit
.929a		0a		asl a				asl 	a
.929b		10 05		bpl $92a2			bpl 	_NotRef
.929d		48		pha				pha
.929e		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92a1		68		pla				pla
.92a2						_NotRef:
.92a2		0a		asl a				asl 	a 							; put MSB of type into A:7
.92a3		30 09		bmi $92ae			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92a5		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92a7		15 79		ora $79,x			ora 	NSExponent+1,x
.92a9		f0 06		beq $92b1			beq 	_IntegerCode 				; if clear, then we have two integers
.92ab		4c 73 94	jmp $9473			jmp 	FloatingPointSub 							; otherwise at least one float.
.92ae						_StringData:
.92ae		4c 0a a0	jmp $a00a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92b1						_IntegerCode:
.92b1		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.92b3		49 80		eor #$80			eor 	#$80
.92b5		95 51		sta $51,x			sta 	NSStatus+1,x
.92b7		80 bf		bra $9278			bra 	AddCode 					; and do the same code as add.
.92b9						AndInteger:
.92b9		fa		plx				plx
.92ba		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92bc		15 51		ora $51,x			ora 	NSStatus+1,x
.92be		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92bf		0a		asl a				asl 	a
.92c0		10 05		bpl $92c7			bpl 	_NotRef
.92c2		48		pha				pha
.92c3		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92c6		68		pla				pla
.92c7						_NotRef:
.92c7		0a		asl a				asl 	a
.92c8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ca		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92cc		15 79		ora $79,x			ora 	NSExponent+1,x
.92ce		f0 03		beq $92d3			beq 	_IntegerCode 				; if clear, then we have two integers
.92d0		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.92d3						_IntegerCode:
.92d3		b5 58		lda $58,x			lda		NSMantissa0,x
.92d5		35 59		and $59,x			and 		NSMantissa0+1,x
.92d7		95 58		sta $58,x			sta 	NSMantissa0,x
.92d9		b5 60		lda $60,x			lda		NSMantissa1,x
.92db		35 61		and $61,x			and 		NSMantissa1+1,x
.92dd		95 60		sta $60,x			sta 	NSMantissa1,x
.92df		b5 68		lda $68,x			lda		NSMantissa2,x
.92e1		35 69		and $69,x			and 		NSMantissa2+1,x
.92e3		95 68		sta $68,x			sta 	NSMantissa2,x
.92e5		b5 70		lda $70,x			lda		NSMantissa3,x
.92e7		35 71		and $71,x			and 		NSMantissa3+1,x
.92e9		95 70		sta $70,x			sta 	NSMantissa3,x
.92eb		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.92ed		60		rts				rts
.92ee						OraInteger:
.92ee		fa		plx				plx
.92ef		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92f1		15 51		ora $51,x			ora 	NSStatus+1,x
.92f3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92f4		0a		asl a				asl 	a
.92f5		10 05		bpl $92fc			bpl 	_NotRef
.92f7		48		pha				pha
.92f8		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92fb		68		pla				pla
.92fc						_NotRef:
.92fc		0a		asl a				asl 	a
.92fd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ff		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9301		15 79		ora $79,x			ora 	NSExponent+1,x
.9303		f0 03		beq $9308			beq 	_IntegerCode 				; if clear, then we have two integers
.9305		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.9308						_IntegerCode:
.9308		b5 58		lda $58,x			lda		NSMantissa0,x
.930a		15 59		ora $59,x			ora 		NSMantissa0+1,x
.930c		95 58		sta $58,x			sta 	NSMantissa0,x
.930e		b5 60		lda $60,x			lda		NSMantissa1,x
.9310		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9312		95 60		sta $60,x			sta 	NSMantissa1,x
.9314		b5 68		lda $68,x			lda		NSMantissa2,x
.9316		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9318		95 68		sta $68,x			sta 	NSMantissa2,x
.931a		b5 70		lda $70,x			lda		NSMantissa3,x
.931c		15 71		ora $71,x			ora 		NSMantissa3+1,x
.931e		95 70		sta $70,x			sta 	NSMantissa3,x
.9320		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9322		60		rts				rts
.9323						EorInteger:
.9323		fa		plx				plx
.9324		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9326		15 51		ora $51,x			ora 	NSStatus+1,x
.9328		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9329		0a		asl a				asl 	a
.932a		10 05		bpl $9331			bpl 	_NotRef
.932c		48		pha				pha
.932d		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9330		68		pla				pla
.9331						_NotRef:
.9331		0a		asl a				asl 	a
.9332		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9334		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9336		15 79		ora $79,x			ora 	NSExponent+1,x
.9338		f0 03		beq $933d			beq 	_IntegerCode 				; if clear, then we have two integers
.933a		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.933d						_IntegerCode:
.933d		b5 58		lda $58,x			lda		NSMantissa0,x
.933f		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9341		95 58		sta $58,x			sta 	NSMantissa0,x
.9343		b5 60		lda $60,x			lda		NSMantissa1,x
.9345		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9347		95 60		sta $60,x			sta 	NSMantissa1,x
.9349		b5 68		lda $68,x			lda		NSMantissa2,x
.934b		55 69		eor $69,x			eor 		NSMantissa2+1,x
.934d		95 68		sta $68,x			sta 	NSMantissa2,x
.934f		b5 70		lda $70,x			lda		NSMantissa3,x
.9351		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9353		95 70		sta $70,x			sta 	NSMantissa3,x
.9355		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9357		60		rts				rts
.9358						WordIndirect:
.9358		fa		plx				plx
.9359		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.935b		15 51		ora $51,x			ora 	NSStatus+1,x
.935d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.935e		0a		asl a				asl 	a
.935f		10 05		bpl $9366			bpl 	_NotRef
.9361		48		pha				pha
.9362		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9365		68		pla				pla
.9366						_NotRef:
.9366		0a		asl a				asl 	a
.9367		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9369		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.936b		15 79		ora $79,x			ora 	NSExponent+1,x
.936d		f0 03		beq $9372			beq 	_IntegerCode 				; if clear, then we have two integers
.936f		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.9372						_IntegerCode:
.9372		20 78 92	jsr $9278			jsr 	AddCode 					; add the two values
.9375		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9377		95 50		sta $50,x			sta 	NSStatus,x
.9379		60		rts				rts
.937a						ByteIndirect:
.937a		fa		plx				plx
.937b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.937d		15 51		ora $51,x			ora 	NSStatus+1,x
.937f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9380		0a		asl a				asl 	a
.9381		10 05		bpl $9388			bpl 	_NotRef
.9383		48		pha				pha
.9384		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9387		68		pla				pla
.9388						_NotRef:
.9388		0a		asl a				asl 	a
.9389		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.938b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.938d		15 79		ora $79,x			ora 	NSExponent+1,x
.938f		f0 03		beq $9394			beq 	_IntegerCode 				; if clear, then we have two integers
.9391		4c 00 a0	jmp $a000			jmp 	TypeError 					; anything else, type mismatch.
.9394						_IntegerCode:
.9394		20 78 92	jsr $9278			jsr 	AddCode 					; add the two values
.9397		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9399		95 50		sta $50,x			sta 	NSStatus,x
.939b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.939c						ConvertInt16:
.939c		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.939e		86 60		stx $60				stx 	NSMantissa1
.93a0		64 68		stz $68				stz 	NSMantissa2
.93a2		64 70		stz $70				stz 	NSMantissa3
.93a4		64 50		stz $50				stz 	NSStatus 					; positive integer
.93a6		a2 00		ldx #$00			ldx 	#0 							; stack level
.93a8		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.93aa		80 00		bra $93ac			bra 	ConvertInt32
.93ac						ConvertInt32:
.93ac		5a		phy				phy
.93ad		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93af		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.93b1		10 08		bpl $93bb			bpl 	_CI32NotNeg
.93b3		48		pha				pha
.93b4		a9 2d		lda #$2d			lda 	#'-'
.93b6		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.93b9		c8		iny				iny
.93ba		68		pla				pla
.93bb						_CI32NotNeg:
.93bb		20 c9 93	jsr $93c9			jsr 	_CI32DivideConvert 			; recursive conversion
.93be		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93c0		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.93c3		7a		ply				ply
.93c4		a2 06		ldx #$06			ldx 	#NumberBuffer >> 8 			; return address in XA
.93c6		a9 27		lda #$27			lda 	#NumberBuffer & $FF
.93c8		60		rts				rts
.93c9						_CI32DivideConvert:
.93c9		e8		inx				inx 								; write to next slot up
.93ca		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte 		 			; write the base out.
.93cd		ca		dex				dex
.93ce		20 f7 90	jsr $90f7			jsr 	Int32Divide 				; divide
.93d1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.93d3		48		pha				pha
.93d4		20 b4 90	jsr $90b4			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93d7		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; is it zero ?
.93da		f0 05		beq $93e1			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93dc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93de		20 c9 93	jsr $93c9			jsr 	_CI32DivideConvert 			; and recusrively call.
.93e1						_CI32NoRecurse:
.93e1		68		pla				pla 								; remainder
.93e2		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.93e4		90 02		bcc $93e8			bcc 	_CI32NotHex
.93e6		69 26		adc #$26			adc 	#6+32
.93e8						_CI32NotHex:
.93e8		69 30		adc #$30			adc 	#48
.93ea		99 27 06	sta $0627,y			sta 	NumberBuffer,y 				; write out and exit
.93ed		c8		iny				iny
.93ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.93ef						PrecedenceLevel:
>93ef		04					.byte	 4	; $00 <<
>93f0		02					.byte	 2	; $01 <=
>93f1		02					.byte	 2	; $02 <>
>93f2		00					.byte	 0	; $03 !!3
>93f3		00					.byte	 0	; $04 ><
>93f4		02					.byte	 2	; $05 >=
>93f5		04					.byte	 4	; $06 >>
>93f6		00					.byte	 0	; $07 !!7
>93f7		00					.byte	 0	; $08 !!8
>93f8		00					.byte	 0	; $09 !!9
>93f9		00					.byte	 0	; $0a !!10
>93fa		00					.byte	 0	; $0b !!11
>93fb		00					.byte	 0	; $0c !!12
>93fc		00					.byte	 0	; $0d !!13
>93fd		00					.byte	 0	; $0e !!14
>93fe		00					.byte	 0	; $0f !!15
>93ff		00					.byte	 0	; $10 @
>9400		00					.byte	 0	; $11 !!17
>9401		00					.byte	 0	; $12 !!18
>9402		00					.byte	 0	; $13 [
>9403		04					.byte	 4	; $14 \
>9404		00					.byte	 0	; $15 ]
>9405		01					.byte	 1	; $16 ^
>9406		00					.byte	 0	; $17 _
>9407		00					.byte	 0	; $18 `
>9408		00					.byte	 0	; $19 !!25
>9409		00					.byte	 0	; $1a !!26
>940a		00					.byte	 0	; $1b {
>940b		01					.byte	 1	; $1c |
>940c		00					.byte	 0	; $1d }
>940d		00					.byte	 0	; $1e ~
>940e		00					.byte	 0	; $1f [7m<7F>[m
>940f		00					.byte	 0	; $20
>9410		05					.byte	 5	; $21 !
>9411		00					.byte	 0	; $22 "
>9412		00					.byte	 0	; $23 #
>9413		05					.byte	 5	; $24 $
>9414		04					.byte	 4	; $25 %
>9415		01					.byte	 1	; $26 &
>9416		00					.byte	 0	; $27 '
>9417		00					.byte	 0	; $28 (
>9418		00					.byte	 0	; $29 )
>9419		04					.byte	 4	; $2a *
>941a		03					.byte	 3	; $2b +
>941b		00					.byte	 0	; $2c ,
>941c		03					.byte	 3	; $2d -
>941d		00					.byte	 0	; $2e .
>941e		04					.byte	 4	; $2f /
>941f		00					.byte	 0	; $30 0
>9420		00					.byte	 0	; $31 1
>9421		00					.byte	 0	; $32 2
>9422		00					.byte	 0	; $33 3
>9423		00					.byte	 0	; $34 4
>9424		00					.byte	 0	; $35 5
>9425		00					.byte	 0	; $36 6
>9426		00					.byte	 0	; $37 7
>9427		00					.byte	 0	; $38 8
>9428		00					.byte	 0	; $39 9
>9429		00					.byte	 0	; $3a :
>942a		00					.byte	 0	; $3b ;
>942b		02					.byte	 2	; $3c <
>942c		02					.byte	 2	; $3d =
>942d		02					.byte	 2	; $3e >
>942e		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.942f						EvaluateExpressionAt0:
.942f		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9431						EvaluateExpression:
.9431		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9433						EvaluateExpressionAtPrecedence:
.9433		48		pha				pha 								; save precedence level
.9434		20 7b 98	jsr $987b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9437		68		pla				pla 								; restore precedence level.
.9438						_EXPRLoop:
.9438		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.943a		b1 30		lda ($30),y			lda 	(codePtr),y
.943c		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.943e		b0 25		bcs $9465			bcs 	_EXPRExit
.9440		da		phx				phx 								; read the operator precedence
.9441		aa		tax				tax
.9442		bd ef 93	lda $93ef,x			lda 	PrecedenceLevel,x
.9445		fa		plx				plx
.9446		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9448		f0 1b		beq $9465			beq 	_EXPRExit
.944a		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.944c		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.944e		c5 37		cmp $37				cmp 	zTemp0+1
.9450		b0 13		bcs $9465			bcs		_EXPRExit 					; if current >= operator exit
.9452		48		pha				pha 								; save current precedence.
.9453		b1 30		lda ($30),y			lda 	(codePtr),y
.9455		c8		iny				iny
.9456		48		pha				pha
.9457		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9459		e8		inx				inx 								; work out the right hand side.
.945a		20 33 94	jsr $9433			jsr 	EvaluateExpressionAtPrecedence
.945d		ca		dex				dex
.945e		68		pla				pla 								; get operator, call the code.
.945f		20 68 94	jsr $9468			jsr 	_EXPRCaller
.9462		68		pla				pla 								; restore precedence level
.9463		80 d3		bra $9438			bra 	_EXPRLoop 					; and go round.
.9465						_EXPRExit:
.9465		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9467		60		rts				rts
.9468						_EXPRCaller:
.9468		da		phx				phx 								; save on stack, first thing is to restore it
.9469		0a		asl a				asl 	a 							; double so can use vectors into X
.946a		aa		tax				tax
.946b		7c 38 8c	jmp ($8c38,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.946e						FloatingPointAdd:
.946e		20 e4 95	jsr $95e4			jsr 	FloatPrepare 				; prepare for floats
.9471		80 09		bra $947c			bra 	FloatAdd
.9473						FloatingPointSub:
.9473		20 e4 95	jsr $95e4			jsr 	FloatPrepare 				; prepare for floats
.9476						FloatSubtract:
.9476		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9478		49 80		eor #$80			eor 	#$80
.947a		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.947c						FloatAdd:
.947c		48		pha				pha
.947d		5a		phy				phy
.947e		20 f3 95	jsr $95f3			jsr 	NSNormalise 				; normalise S[X]
.9481		f0 51		beq $94d4			beq 	_FAReturn1
.9483		e8		inx				inx 								; normalise S[X+1]
.9484		20 f3 95	jsr $95f3			jsr 	NSNormalise
.9487		ca		dex				dex
.9488		c9 00		cmp #$00			cmp 	#0
.948a		f0 60		beq $94ec			beq 	_FAExit 					; if so, just return A
.948c		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.948e		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9490		f0 18		beq $94aa			beq 	_FAExponentsEqual
.9492		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9494		a8		tay				tay
.9495		38		sec				sec 								; do a signed comparison of the exponents.
.9496		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9498		50 02		bvc $949c			bvc 	_FANoSignedChange
.949a		49 80		eor #$80			eor 	#$80
.949c						_FANoSignedChange:
.949c		29 80		and #$80			and 	#$80
.949e		10 02		bpl $94a2			bpl 	_FAHaveMax
.94a0		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.94a2						_FAHaveMax:
.94a2		20 ef 94	jsr $94ef			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.94a5		e8		inx				inx
.94a6		20 ef 94	jsr $94ef			jsr 	_FAShiftToExponent
.94a9		ca		dex				dex
.94aa						_FAExponentsEqual:
.94aa		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.94ac		55 51		eor $51,x			eor 	NSStatus+1,x
.94ae		30 0e		bmi $94be			bmi 	_FADifferentSigns
.94b0		20 27 92	jsr $9227			jsr 	AddTopTwoStack 				; do the add of the mantissae
.94b3		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.94b5		10 35		bpl $94ec			bpl 	_FAExit 					; if no, we are done.
.94b7		20 91 9e	jsr $9e91			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.94ba		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.94bc		80 2e		bra $94ec			bra 	_FAExit
.94be						_FADifferentSigns:
.94be		20 41 92	jsr $9241			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.94c1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.94c3		10 06		bpl $94cb			bpl 	_FACheckZero 				; if no, check for -0
.94c5		20 3a 9e	jsr $9e3a			jsr 	NSMNegate 					; netate result
.94c8		20 41 9e	jsr $9e41			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94cb						_FACheckZero:
.94cb		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero	 				; check for -0
.94ce		d0 1c		bne $94ec			bne 	_FAExit
.94d0		74 50		stz $50,x			stz 	NSStatus,x
.94d2		80 18		bra $94ec			bra 	_FAExit
.94d4						_FAReturn1:
.94d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.94d6		95 58		sta $58,x			sta 	NSMantissa0,x
.94d8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94da		95 60		sta $60,x			sta 	NSMantissa1,x
.94dc		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.94de		95 68		sta $68,x			sta 	NSMantissa2,x
.94e0		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.94e2		95 70		sta $70,x			sta 	NSMantissa3,x
.94e4		b5 79		lda $79,x			lda 	NSExponent+1,x
.94e6		95 78		sta $78,x			sta 	NSExponent,x
.94e8		b5 51		lda $51,x			lda 	NSStatus+1,x
.94ea		95 50		sta $50,x			sta 	NSStatus,x
.94ec						_FAExit:
.94ec		7a		ply				ply
.94ed		68		pla				pla
.94ee		60		rts				rts
.94ef						_FAShiftToExponent:
.94ef						_FAShiftToExponent2:
.94ef		98		tya				tya 								; compare Y to exponent
.94f0		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.94f2		f0 07		beq $94fb			beq 	_FASEExit 					; exit if so.
.94f4		20 91 9e	jsr $9e91			jsr 	NSMShiftRight	 			; shift the mantissa right
.94f7		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.94f9		80 f4		bra $94ef			bra 	_FAShiftToExponent2
.94fb						_FASEExit:
.94fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.94fc						CompareFloat:
.94fc		20 76 94	jsr $9476			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.94ff		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9501		29 f8		and #$f8			and 	#$F8
.9503		15 68		ora $68,x			ora 	NSMantissa2,x
.9505		15 70		ora $70,x			ora 	NSMantissa3,x
.9507		f0 08		beq $9511			beq 	_FCExit 					; zero, so approximately identical
.9509		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.950b		34 50		bit $50,x			bit 	NSStatus,x
.950d		10 02		bpl $9511			bpl 	_FCExit
.950f						_FCNegative:
.950f		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9511						_FCExit:
.9511		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9512						FDivideCommand:
.9512		fa		plx				plx	 								; restore stack position
.9513		20 e4 95	jsr $95e4			jsr 	FloatPrepare 				; prepare for floats
.9516						FloatDivide:
.9516		48		pha				pha
.9517		e8		inx				inx
.9518		20 f3 95	jsr $95f3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.951b		ca		dex				dex
.951c		c9 00		cmp #$00			cmp 	#0
.951e		f0 1d		beq $953d			beq 	_FDZero
.9520		20 f3 95	jsr $95f3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9523		f0 16		beq $953b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9525		20 18 91	jsr $9118			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9528		20 b4 90	jsr $90b4			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.952b		20 f3 95	jsr $95f3			jsr		NSNormalise 				; renormalise
.952e		20 a8 91	jsr $91a8			jsr 	CalculateSign 				; calculate result sign
.9531		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9533		38		sec				sec
.9534		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9536		38		sec				sec
.9537		e9 1e		sbc #$1e			sbc 	#30
.9539		95 78		sta $78,x			sta 	NSExponent,x
.953b						_FDExit:
.953b		68		pla				pla
.953c		60		rts				rts
.953d						_FDZero:
.953d		a9 03		lda #$03		lda	#3
.953f		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9542						FloatFractionalPart:
.9542		5a		phy				phy
.9543		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9545		29 7f		and #$7f			and 	#$7F
.9547		95 50		sta $50,x			sta 	NSStatus,x
.9549		20 f3 95	jsr $95f3			jsr 	NSNormalise
.954c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.954e		38		sec				sec
.954f		e9 e0		sbc #$e0			sbc 	#$E0
.9551		90 29		bcc $957c			bcc 	_FFPExit 					; already fractional
.9553		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9555		b0 22		bcs $9579			bcs 	_FFPZero
.9557		a8		tay				tay 								; put count to do in Y
.9558		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.955a		20 7e 95	jsr $957e			jsr 	_FFPPartial
.955d		95 70		sta $70,x			sta 	NSMantissa3,x
.955f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9561		20 7e 95	jsr $957e			jsr 	_FFPPartial
.9564		95 68		sta $68,x			sta 	NSMantissa2,x
.9566		b5 60		lda $60,x			lda 	NSMantissa1,x
.9568		20 7e 95	jsr $957e			jsr 	_FFPPartial
.956b		95 60		sta $60,x			sta 	NSMantissa1,x
.956d		b5 58		lda $58,x			lda 	NSMantissa0,x
.956f		20 7e 95	jsr $957e			jsr 	_FFPPartial
.9572		95 58		sta $58,x			sta 	NSMantissa0,x
.9574		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; zeroed check.
.9577		d0 03		bne $957c			bne 	_FFPExit
.9579						_FFPZero:
.9579		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.957c						_FFPExit:
.957c		7a		ply				ply
.957d		60		rts				rts
.957e						_FFPPartial:
.957e		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9580		f0 17		beq $9599			beq 	_FFFPPExit
.9582		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9584		b0 0c		bcs $9592			bcs 	_FFFPPWholeByte
.9586		5a		phy				phy
.9587						_FFFPPLeft:
.9587		0a		asl a				asl 	a
.9588		88		dey				dey
.9589		d0 fc		bne $9587			bne 	_FFFPPLeft
.958b		7a		ply				ply
.958c						_FFFPPRight:
.958c		4a		lsr a				lsr 	a
.958d		88		dey				dey
.958e		d0 fc		bne $958c			bne 	_FFFPPRight
.9590		80 07		bra $9599			bra 	_FFFPPExit
.9592						_FFFPPWholeByte:
.9592		98		tya				tya 								; subtract 8 from count
.9593		38		sec				sec
.9594		e9 08		sbc #$08			sbc 	#8
.9596		a8		tay				tay
.9597		a9 00		lda #$00			lda 	#0 							; and clear all
.9599						_FFFPPExit:
.9599		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.959a						FloatIntegerPart:
.959a		48		pha				pha
.959b		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.959d		f0 1d		beq $95bc			beq 	_FIPExit 					; if so do nothing
.959f		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; is it zero ?
.95a2		f0 15		beq $95b9			beq 	_FIPZero 					; if so return zero.
.95a4		20 f3 95	jsr $95f3			jsr 	NSNormalise 				; normalise
.95a7		f0 10		beq $95b9			beq 	_FIPZero 					; normalised to zero, exit zero
.95a9						_FIPShift:
.95a9		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.95ab		10 07		bpl $95b4			bpl 	_FIPCheckZero
.95ad		20 91 9e	jsr $9e91			jsr 	NSMShiftRight 				; shift mantissa right
.95b0		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.95b2		80 f5		bra $95a9			bra 	_FIPShift
.95b4						_FIPCheckZero:
.95b4		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; avoid -0 problem
.95b7		d0 03		bne $95bc			bne 	_FIPExit 					; set to zero if mantissa zero.
.95b9						_FIPZero:
.95b9		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.95bc						_FIPExit:
.95bc		68		pla				pla
.95bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.95be						FloatingPointMultiply:
.95be		20 e4 95	jsr $95e4			jsr 	FloatPrepare 				; prepare for floats
.95c1						FloatMultiply:
.95c1		48		pha				pha
.95c2		20 f3 95	jsr $95f3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95c5		f0 18		beq $95df			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.95c7		e8		inx				inx
.95c8		20 f3 95	jsr $95f3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95cb		ca		dex				dex
.95cc		c9 00		cmp #$00			cmp 	#0
.95ce		f0 0c		beq $95dc			beq 	_FDSetZero
.95d0		20 6a 91	jsr $916a			jsr 	MultiplyShort 				; calculate the result.
.95d3		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95d5		18		clc				clc
.95d6		75 79		adc $79,x			adc 	NSExponent+1,x
.95d8		95 78		sta $78,x			sta 	NSExponent,x
.95da		80 03		bra $95df			bra 	_FDExit
.95dc						_FDSetZero:
.95dc		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; return 0
.95df						_FDExit:
.95df		20 f3 95	jsr $95f3			jsr 	NSNormalise 				; normalise the result
.95e2		68		pla				pla
.95e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95e4						FloatPrepare:
.95e4		20 ef 96	jsr $96ef			jsr 	DereferenceTopTwo 			; dereference the top two values
.95e7		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.95e9		15 51		ora $51,x			ora 	NSStatus+1,x
.95eb		29 10		and #$10			and 	#NSBIsString
.95ed		d0 01		bne $95f0			bne 	_FDType
.95ef		60		rts				rts
.95f0						_FDType:
.95f0		4c 00 a0	jmp $a000			jmp 	TypeError
.95f3						NSNormalise:
.95f3		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.95f5		29 80		and #$80			and 	#$80
.95f7		09 08		ora #$08			ora 	#NSTFloat
.95f9		95 50		sta $50,x			sta 	NSStatus,x
.95fb		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; if zero exit
.95fe		d0 07		bne $9607			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9600		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9602		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9604		a9 00		lda #$00			lda 	#0 							; set Z flag
.9606		60		rts				rts
.9607						_NSNormaliseOptimise:
.9607		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9609		d0 19		bne $9624			bne 	_NSNormaliseLoop
.960b		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.960d		30 15		bmi $9624			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.960f		95 70		sta $70,x			sta 	NSMantissa3,x
.9611		b5 60		lda $60,x			lda 	NSMantissa1,x
.9613		95 68		sta $68,x			sta 	NSMantissa2,x
.9615		b5 58		lda $58,x			lda 	NSMantissa0,x
.9617		95 60		sta $60,x			sta 	NSMantissa1,x
.9619		74 58		stz $58,x			stz 	NSMantissa0,x
.961b		b5 78		lda $78,x			lda 	NSExponent,x
.961d		38		sec				sec
.961e		e9 08		sbc #$08			sbc 	#8
.9620		95 78		sta $78,x			sta 	NSExponent,x
.9622		80 e3		bra $9607			bra 	_NSNormaliseOptimise
.9624						_NSNormaliseLoop:
.9624		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9626		70 07		bvs $962f			bvs 	_NSNExit 					; exit if so with Z flag clear
.9628		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; shift mantissa left
.962b		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.962d		80 f5		bra $9624			bra 	_NSNormaliseLoop
.962f						_NSNExit:
.962f		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9631		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9632						AssignNumber:
.9632		5a		phy				phy
.9633		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9635		85 36		sta $36				sta 	zTemp0
.9637		b5 60		lda $60,x			lda 	NSMantissa1,x
.9639		85 37		sta $37				sta 	zTemp0+1
.963b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.963d		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.963f		95 50		sta $50,x			sta 	NSStatus,x
.9641		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9643		c9 08		cmp #$08			cmp 	#NSTFloat
.9645		f0 24		beq $966b			beq 	_ANFloat
.9647		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9649		f0 03		beq $964e			beq		_ANNotFloat
.964b		4c fb 9f	jmp $9ffb			jmp 	RangeError					; if it is, report an error.
.964e						_ANNotFloat:
.964e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9650		29 03		and #$03			and 	#3
.9652		d0 05		bne $9659			bne 	_ANByteWord
.9654		20 76 96	jsr $9676			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9657		80 1b		bra $9674			bra 	_ANExit
.9659						_ANByteWord:
.9659		48		pha				pha 								; save count
.965a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.965c		92 36		sta ($36)			sta 	(zTemp0)
.965e		68		pla				pla
.965f		c9 01		cmp #$01			cmp	 	#1
.9661		f0 11		beq $9674			beq 	_ANExit
.9663		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9665		a0 01		ldy #$01			ldy 	#1
.9667		91 36		sta ($36),y			sta 	(zTemp0),y
.9669		80 09		bra $9674			bra 	_ANExit
.966b						_ANFloat:
.966b		20 76 96	jsr $9676			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.966e		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9670		a0 04		ldy #$04			ldy 	#4
.9672		91 36		sta ($36),y			sta 	(zTemp0),y
.9674						_ANExit:
.9674		7a		ply				ply
.9675		60		rts				rts
.9676						_ANCopy4PackSign:
.9676		a0 03		ldy #$03			ldy 	#3
.9678		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.967a		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.967c		15 71		ora $71,x			ora 	NSMantissa3+1,x
.967e		91 36		sta ($36),y			sta 	(zTemp0),y
.9680		88		dey				dey
.9681		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9683		91 36		sta ($36),y			sta 	(zTemp0),y
.9685		88		dey				dey
.9686		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9688		91 36		sta ($36),y			sta 	(zTemp0),y
.968a		88		dey				dey
.968b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.968d		91 36		sta ($36),y			sta 	(zTemp0),y
.968f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9690						AssignString:
.9690		5a		phy				phy
.9691		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9693		85 38		sta $38				sta 	zTemp1
.9695		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9697		85 39		sta $39				sta 	zTemp1+1
.9699		b5 58		lda $58,x			lda 	NSMantissa0,x
.969b		85 36		sta $36				sta 	zTemp0
.969d		b5 60		lda $60,x			lda 	NSMantissa1,x
.969f		85 37		sta $37				sta 	zTemp0+1
.96a1		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.96a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.96a5		f0 23		beq $96ca			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.96a7		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.96a8		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.96aa		e9 02		sbc #$02			sbc 	#2
.96ac		85 3c		sta $3c				sta 	zsTemp
.96ae		a0 01		ldy #$01			ldy 	#1
.96b0		b1 36		lda ($36),y			lda 	(zTemp0),y
.96b2		e9 00		sbc #$00			sbc 	#0
.96b4		85 3d		sta $3d				sta 	zsTemp+1
.96b6		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.96b8						_ASGetLength:
.96b8		c8		iny				iny
.96b9		b1 38		lda ($38),y			lda 	(zTemp1),y
.96bb		d0 fb		bne $96b8			bne 	_ASGetLength
.96bd		98		tya				tya 								; is this length <= current length
.96be		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.96c0		90 1e		bcc $96e0			bcc 	_ASCopyString
.96c2		f0 1c		beq $96e0			beq 	_ASCopyString
.96c4		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.96c6		a0 01		ldy #$01			ldy 	#1
.96c8		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96ca						_ASNewStringRequired:
.96ca		e8		inx				inx 								; concrete the new string.
.96cb		20 bb af	jsr $afbb			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.96ce		ca		dex				dex
.96cf		18		clc				clc
.96d0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.96d2		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.96d4		92 36		sta ($36)			sta 	(zTemp0)
.96d6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96d8		69 00		adc #$00			adc 	#0
.96da		a0 01		ldy #$01			ldy 	#1
.96dc		91 36		sta ($36),y			sta 	(zTemp0),y
.96de		80 0d		bra $96ed			bra 	_ASExit
.96e0						_ASCopyString:
.96e0		a0 00		ldy #$00			ldy 	#0
.96e2						_ASCopyLoop:
.96e2		b1 38		lda ($38),y			lda 	(zTemp1),y
.96e4		c8		iny				iny
.96e5		c8		iny				iny
.96e6		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96e8		88		dey				dey
.96e9		c9 00		cmp #$00			cmp 	#0
.96eb		d0 f5		bne $96e2			bne 	_ASCopyLoop
.96ed						_ASExit:
.96ed		7a		ply				ply
.96ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.96ef						DereferenceTopTwo:
.96ef		e8		inx				inx
.96f0		20 f4 96	jsr $96f4			jsr 	Dereference 				; deref x+1
.96f3		ca		dex				dex  								; falls through to deref x
.96f4						Dereference:
.96f4		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.96f6		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.96f8		f0 48		beq $9742			beq 	_DRFExit 					; not a reference, so exit.
.96fa		5a		phy				phy
.96fb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.96fd		85 36		sta $36				sta 	zTemp0
.96ff		b5 60		lda $60,x			lda 	NSMantissa1,x
.9701		85 37		sta $37				sta 	zTemp0+1
.9703		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9705		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9707		95 58		sta $58,x			sta 	NSMantissa0,x
.9709		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.970b		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.970d		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.970f		f0 0e		beq $971f			beq 	_DRFDereferenceTwo
.9711		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9713		f0 2f		beq $9744			beq 	_DRFFull
.9715		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9717		29 03		and #$03			and 	#3
.9719		f0 29		beq $9744			beq 	_DRFFull 					; the whole word
.971b		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.971d		f0 06		beq $9725			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.971f						_DRFDereferenceTwo:
.971f		a0 01		ldy #$01			ldy 	#1
.9721		b1 36		lda ($36),y			lda 	(zTemp0),y
.9723		95 60		sta $60,x			sta 	NSMantissa1,x
.9725						_DRFClear23:
.9725		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9727		74 70		stz $70,x			stz 	NSMantissa3,x
.9729		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.972b		29 18		and #$18			and 	#NSBTypeMask
.972d		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.972f		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9731		d0 0e		bne $9741			bne 	_DRFNotString
.9733		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9735		15 60		ora $60,x			ora 	NSMantissa1,x
.9737		d0 08		bne $9741			bne 	_DRFNotString
.9739		a9 43		lda #$43			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.973b		95 58		sta $58,x			sta 	NSMantissa0,X
.973d		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.973f		95 60		sta $60,x			sta 	NSMantissa1,X
.9741						_DRFNotString
.9741		7a		ply				ply 								; restore Y and exit
.9742						_DRFExit:
.9742		60		rts				rts
.9743						_DRFNullString:
>9743		00						.byte 	0
.9744						_DRFFull:
.9744		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9746		b1 36		lda ($36),y			lda 	(zTemp0),y
.9748		95 60		sta $60,x			sta 	NSMantissa1,x
.974a		c8		iny				iny
.974b		b1 36		lda ($36),y			lda 	(zTemp0),y
.974d		95 68		sta $68,x			sta 	NSMantissa2,x
.974f		c8		iny				iny
.9750		b1 36		lda ($36),y			lda 	(zTemp0),y
.9752		95 70		sta $70,x			sta 	NSMantissa3,x
.9754		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9756		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9758		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.975a		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.975c		f0 05		beq $9763			beq 	_DRFNoExponent
.975e		c8		iny				iny 								; if not, read the exponent as well.
.975f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9761		95 78		sta $78,x			sta 	NSExponent,x
.9763						_DRFNoExponent:
.9763		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9765		10 0a		bpl $9771			bpl 	_DRFExit2 					; if not, then exit.
.9767		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9769		95 70		sta $70,x			sta 	NSMantissa3,x
.976b		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.976d		09 80		ora #$80			ora 	#NSBIsNegative
.976f		95 50		sta $50,x			sta 	NSStatus,x
.9771						_DRFExit2:
.9771		7a		ply				ply
.9772		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9773						EncodeNumberStart:
.9773		38		sec				sec
.9774		80 01		bra $9777			bra 	EncodeNumberContinue+1
.9776						EncodeNumberContinue:
.9776		18		clc				clc
.9777						EncodeNumber:
.9777		08		php				php 								; save reset flag.
.9778		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.977a		f0 12		beq $978e			beq 	_ENIsOkay
.977c		c9 30		cmp #$30			cmp 	#"0"
.977e		90 04		bcc $9784			bcc 	_ENBadNumber
.9780		c9 3a		cmp #$3a			cmp 	#"9"+1
.9782		90 0a		bcc $978e			bcc 	_ENIsOkay
.9784						_ENBadNumber:
.9784		28		plp				plp 								; throw saved reset
.9785		ad 05 04	lda $0405			lda 	EncodeState 				; if in decimal mode, construct final number
.9788		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.978a		f0 7b		beq $9807			beq 	_ENConstructFinal
.978c						_ENFail:
.978c		18		clc				clc 								; not allowed
.978d		60		rts				rts
.978e						_ENIsOkay:
.978e		28		plp				plp 								; are we restarting
.978f		90 15		bcc $97a6			bcc 	_ENNoRestart
.9791						_ENStartEncode:
.9791		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9793		f0 0c		beq $97a1			beq 	_ENFirstDP
.9795		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9797		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte 					; in single byte mode.
.979a		a9 01		lda #$01			lda 	#ESTA_Low
.979c						_ENExitChange:
.979c		8d 05 04	sta $0405			sta 	EncodeState 				; save new state
.979f		38		sec				sec
.97a0		60		rts				rts
.97a1						_ENFirstDP:
.97a1		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; clear integer part
.97a4		80 3c		bra $97e2			bra 	_ESTASwitchFloat			; go straight to float and exi
.97a6						_ENNoRestart:
.97a6		48		pha				pha 								; save digit or DP on stack.
.97a7		ad 05 04	lda $0405			lda 	EncodeState 				; get current state
.97aa		c9 01		cmp #$01			cmp 	#ESTA_Low
.97ac		f0 09		beq $97b7			beq  	_ESTALowState
.97ae		c9 02		cmp #$02			cmp 	#ESTA_High
.97b0		f0 26		beq $97d8			beq 	_ESTAHighState
.97b2		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97b4		f0 38		beq $97ee			beq 	_ESTADecimalState
>97b6		db						.byte 	$DB 						; causes a break in the emulator
.97b7						_ESTALowState:
.97b7		68		pla				pla 								; get value back
.97b8		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.97ba		f0 26		beq $97e2			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.97bc		29 0f		and #$0f			and 	#15 						; make digit
.97be		8d 06 04	sta $0406			sta 	DigitTemp 					; save it.
.97c1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.97c3		0a		asl a				asl 	a
.97c4		0a		asl a				asl 	a
.97c5		75 58		adc $58,x			adc 	NSMantissa0,x
.97c7		0a		asl a				asl 	a
.97c8		6d 06 04	adc $0406			adc 	DigitTemp
.97cb		95 58		sta $58,x			sta 	NSMantissa0,x
.97cd		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.97cf		90 05		bcc $97d6			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.97d1		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.97d3		8d 05 04	sta $0405			sta 	EncodeState
.97d6						_ESTANoSwitch:
.97d6		38		sec				sec
.97d7		60		rts				rts
.97d8						_ESTAHighState:
.97d8		68		pla				pla 								; get value back
.97d9		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97db		f0 05		beq $97e2			beq 	_ESTASwitchFloat
.97dd		20 3b 98	jsr $983b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97e0		38		sec				sec
.97e1		60		rts				rts
.97e2						_ESTASwitchFloat:
.97e2		9c 07 04	stz $0407			stz 	DecimalCount 				; reset the count of digits - we divide by 10^n at the end.
.97e5		e8		inx				inx 								; zero the decimal additive.
.97e6		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.97e9		ca		dex				dex
.97ea		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.97ec		80 ae		bra $979c			bra 	_ENExitChange
.97ee						_ESTADecimalState:
.97ee		68		pla				pla 								; digit.
.97ef		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.97f1		f0 99		beq $978c			beq 	_ENFail
.97f3		e8		inx				inx 								; put digit into fractional part of X+1
.97f4		20 3b 98	jsr $983b			jsr 	ESTAShiftDigitIntoMantissa
.97f7		ca		dex				dex
.97f8		ee 07 04	inc $0407			inc 	DecimalCount 				; bump the count of decimals
.97fb		ad 07 04	lda $0407			lda 	DecimalCount 				; too many decimal digits.
.97fe		c9 0b		cmp #$0b			cmp 	#11
.9800		f0 02		beq $9804			beq 	_ESTADSFail
.9802		38		sec				sec
.9803		60		rts				rts
.9804						_ESTADSFail:
.9804		4c fb 9f	jmp $9ffb			jmp 	RangeError
.9807						_ENConstructFinal:
.9807		ad 07 04	lda $0407			lda 	DecimalCount 				; get decimal count
.980a		f0 2d		beq $9839			beq 	_ENCFExit 					; no decimals
.980c		5a		phy				phy
.980d		0a		asl a				asl 	a 							; x 4 and CLC
.980e		0a		asl a				asl 	a
.980f		6d 07 04	adc $0407			adc 	DecimalCount
.9812		a8		tay				tay
.9813		b9 ba 9f	lda $9fba,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9816		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9818		b9 bb 9f	lda $9fbb,y			lda 	DecimalScalarTable-5+1,y
.981b		95 62		sta $62,x			sta 	NSMantissa1+2,x
.981d		b9 bc 9f	lda $9fbc,y			lda 	DecimalScalarTable-5+2,y
.9820		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9822		b9 bd 9f	lda $9fbd,y			lda 	DecimalScalarTable-5+3,y
.9825		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9827		b9 be 9f	lda $9fbe,y			lda 	DecimalScalarTable-5+4,y
.982a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.982c		a9 08		lda #$08			lda 	#NSTFloat
.982e		95 52		sta $52,x			sta 	NSStatus+2,x
.9830		7a		ply				ply
.9831		e8		inx				inx 								; multiply decimal const by decimal scalar
.9832		20 c1 95	jsr $95c1			jsr 	FloatMultiply
.9835		ca		dex				dex
.9836		20 7c 94	jsr $947c			jsr 	FloatAdd 					; add to integer part.
.9839						_ENCFExit:
.9839		18		clc				clc 								; reject the digit.
.983a		60		rts				rts
.983b						ESTAShiftDigitIntoMantissa:
.983b		29 0f		and #$0f			and 	#15 						; save digit
.983d		48		pha				pha
.983e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9840		48		pha				pha
.9841		b5 68		lda $68,x			lda 	NSMantissa2,x
.9843		48		pha				pha
.9844		b5 60		lda $60,x			lda 	NSMantissa1,x
.9846		48		pha				pha
.9847		b5 58		lda $58,x			lda 	NSMantissa0,x
.9849		48		pha				pha
.984a		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 2
.984d		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 4
.9850		18		clc				clc 								; pop mantissa and add
.9851		68		pla				pla
.9852		75 58		adc $58,x			adc 	NSMantissa0,x
.9854		95 58		sta $58,x			sta 	NSMantissa0,x
.9856		68		pla				pla
.9857		75 60		adc $60,x			adc 	NSMantissa1,x
.9859		95 60		sta $60,x			sta 	NSMantissa1,x
.985b		68		pla				pla
.985c		75 68		adc $68,x			adc 	NSMantissa2,x
.985e		95 68		sta $68,x			sta 	NSMantissa2,x
.9860		68		pla				pla
.9861		75 70		adc $70,x			adc 	NSMantissa3,x
.9863		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9865		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 10
.9868		68		pla				pla 								; add digit
.9869		18		clc				clc
.986a		75 58		adc $58,x			adc 	NSMantissa0,x
.986c		95 58		sta $58,x			sta 	NSMantissa0,x
.986e		90 0a		bcc $987a			bcc 	_ESTASDExit
.9870		f6 60		inc $60,x			inc 	NSMantissa1,x
.9872		d0 06		bne $987a			bne 	_ESTASDExit
.9874		f6 68		inc $68,x			inc 	NSMantissa2,x
.9876		d0 02		bne $987a			bne 	_ESTASDExit
.9878		f6 70		inc $70,x			inc 	NSMantissa3,x
.987a						_ESTASDExit:
.987a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.987b						EvaluateTerm:
.987b		b1 30		lda ($30),y			lda 	(codePtr),y
.987d		30 18		bmi $9897			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.987f		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9881		b0 6c		bcs $98ef			bcs 	_ETVariable
.9883		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9885		90 6b		bcc $98f2			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9887		c9 3a		cmp #$3a			cmp 	#'9'+1
.9889		b0 67		bcs $98f2			bcs 	_ETPuncUnary
.988b		20 73 97	jsr $9773			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.988e						_ETNumber:
.988e		c8		iny				iny 								; keep encoding until we have the numbers
.988f		b1 30		lda ($30),y			lda 	(codePtr),y
.9891		20 76 97	jsr $9776			jsr 	EncodeNumberContinue
.9894		b0 f8		bcs $988e			bcs 	_ETNumber 					; go back if accepted.
.9896		60		rts				rts
.9897						_ETCheckUnary:
.9897		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9899		f0 3f		beq $98da			beq 	_ETString
.989b		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.989d		f0 12		beq $98b1			beq 	_ETHexConstant
.989f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.98a1		90 0b		bcc $98ae			bcc 	_ETSyntaxError
.98a3		c9 a4		cmp #$a4			cmp 	#KWC_LAST_UNARY+1
.98a5		b0 07		bcs $98ae			bcs 	_ETSyntaxError
.98a7		da		phx				phx 								; push X on the stack
.98a8		0a		asl a				asl 	a 							; put vector x 2 into X
.98a9		aa		tax				tax
.98aa		c8		iny				iny 								; consume unary function token
.98ab		7c b8 8c	jmp ($8cb8,x)			jmp 	(VectorSet0,x) 				; and do it.
.98ae						_ETSyntaxError:
.98ae		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.98b1						_ETHexConstant:
.98b1		c8		iny				iny 								; skip #
.98b2		c8		iny				iny 								; skip count
.98b3		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; clear result
.98b6						_ETHLoop:
.98b6		b1 30		lda ($30),y			lda 	(codePtr),y
.98b8		c8		iny				iny 								; and consume
.98b9		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.98bb		f0 1c		beq $98d9			beq 	_ETHExit
.98bd		48		pha				pha 								; save on stack.
.98be		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 2
.98c1		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 4
.98c4		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 8
.98c7		20 87 9e	jsr $9e87			jsr 	NSMShiftLeft 				; x 16
.98ca		68		pla				pla 								; ASCII
.98cb		c9 41		cmp #$41			cmp 	#'A'
.98cd		90 02		bcc $98d1			bcc 	_ETHNotChar
.98cf		e9 07		sbc #$07			sbc 	#7
.98d1						_ETHNotChar:
.98d1		29 0f		and #$0f			and 	#15 						; digit now
.98d3		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98d5		95 58		sta $58,x			sta 	NSMantissa0,x
.98d7		80 dd		bra $98b6			bra 	_ETHLoop 					; go round.
.98d9						_ETHExit:
.98d9		60		rts				rts
.98da						_ETString:
.98da		c8		iny				iny 								; look at length
.98db		b1 30		lda ($30),y			lda 	(codePtr),y
.98dd		48		pha				pha
.98de		c8		iny				iny 								; first character
.98df		20 e3 a5	jsr $a5e3			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98e2		68		pla				pla 								; restore count and save
.98e3		85 36		sta $36				sta 	zTemp0
.98e5		98		tya				tya 								; add length to Y to skip it.
.98e6		18		clc				clc
.98e7		65 36		adc $36				adc 	zTemp0
.98e9		a8		tay				tay
.98ea		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.98ec		95 50		sta $50,x			sta 	NSStatus,x
.98ee		60		rts				rts
.98ef						_ETVariable:
.98ef		4c 44 99	jmp $9944			jmp 	VariableHandler
.98f2						_ETPuncUnary:
.98f2		c8		iny				iny 								; consume the unary character
.98f3		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.98f5		f0 2b		beq $9922			beq 	_ETUnaryNegate
.98f7		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.98f9		f0 36		beq $9931			beq 	_ETDereference
.98fb		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.98fd		f0 3e		beq $993d			beq 	_ETParenthesis
.98ff		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9901		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9903		f0 06		beq $990b			beq 	_ETIndirection
.9905		e6 36		inc $36				inc 	zTemp0
.9907		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9909		d0 a3		bne $98ae			bne 	_ETSyntaxError
.990b						_ETIndirection:
.990b		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.990d		1a		inc a				inc 	a
.990e		48		pha				pha
.990f		20 7b 98	jsr $987b			jsr 	EvaluateTerm				; evaluate the term
.9912		20 f4 96	jsr $96f4			jsr 	Dereference 				; dereference it.
.9915		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9917		d0 06		bne $991f			bne 	_ETTypeMismatch
.9919		68		pla				pla 								; indirection 1-2
.991a		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.991c		95 50		sta $50,x			sta 	NSStatus,x
.991e		60		rts				rts
.991f						_ETTypeMismatch:
.991f		4c 00 a0	jmp $a000			jmp 	TypeError
.9922						_ETUnaryNegate:
.9922		20 7b 98	jsr $987b			jsr 	EvaluateTerm				; evaluate the term
.9925		20 f4 96	jsr $96f4			jsr 	Dereference 				; dereference it.
.9928		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.992a		29 10		and #$10			and 	#NSTString
.992c		d0 f1		bne $991f			bne 	_ETTypeMismatch
.992e		4c 3a 9e	jmp $9e3a			jmp 	NSMNegate  					; just toggles the sign bit.
.9931						_ETDereference:
.9931		20 7b 98	jsr $987b			jsr 	EvaluateTerm				; evaluate the term
.9934		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9936		29 20		and #$20			and 	#NSBIsReference
.9938		f0 e5		beq $991f			beq 	_ETTypeMismatch
.993a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.993c		60		rts				rts
.993d						_ETParenthesis:
.993d		20 31 94	jsr $9431			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9940		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; check for )
.9943		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9944						VariableHandler:
.9944		b1 30		lda ($30),y			lda 	(codePtr),y
.9946		18		clc				clc
.9947		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9949		85 37		sta $37				sta 	zTemp0+1
.994b		c8		iny				iny
.994c		b1 30		lda ($30),y			lda 	(codePtr),y
.994e		85 36		sta $36				sta 	zTemp0
.9950		c8		iny				iny
.9951		18		clc				clc									; copy variable address+3 to mantissa
.9952		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9954		95 58		sta $58,x			sta 	NSMantissa0,x
.9956		a5 37		lda $37				lda 	zTemp0+1
.9958		69 00		adc #$00			adc 	#0
.995a		95 60		sta $60,x			sta 	NSMantissa1,x
.995c		74 68		stz $68,x			stz 	NSMantissa2,x
.995e		74 70		stz $70,x			stz 	NSMantissa3,x
.9960		74 78		stz $78,x			stz 	NSExponent,x
.9962		5a		phy				phy
.9963		a0 02		ldy #$02			ldy 	#2 							; read type
.9965		b1 36		lda ($36),y			lda 	(zTemp0),y
.9967		7a		ply				ply
.9968		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.996a		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.996c		95 50		sta $50,x			sta 	NSStatus,x
.996e		29 04		and #$04			and 	#NSBIsArray
.9970		d0 01		bne $9973			bne 	_VHArray
.9972		60		rts				rts
.9973						_VHArray:
.9973		e8		inx				inx
.9974		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9977		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9979		95 51		sta $51,x			sta 	NSStatus+1,x
.997b		b1 30		lda ($30),y			lda 	(codePtr),y
.997d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.997f		d0 06		bne $9987			bne 	_VHNoSecondIndex
.9981		c8		iny				iny 								; skip the comma
.9982		e8		inx				inx
.9983		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9986		ca		dex				dex
.9987						_VHNoSecondIndex:
.9987		ca		dex				dex 								; set X back.
.9988		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; and check the right bracket.
.998b		5a		phy				phy 								; save position
.998c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.998e		85 3e		sta $3e				sta 	zaTemp
.9990		b5 60		lda $60,x			lda 	NSMantissa1,x
.9992		85 3f		sta $3f				sta 	zaTemp+1
.9994		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9996		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9998		f0 5d		beq $99f7			beq 	_VHBadArray
.999a		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.999c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.999e		f0 02		beq $99a2			beq 	_VHHas2Mask
.99a0		a9 ff		lda #$ff			lda 	#$FF
.99a2						_VHHas2Mask:
.99a2		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.99a4		f0 4c		beq $99f2			beq 	_VHBadIndex
.99a6		0a		asl a				asl 	a 							; carry will be set if a second index
.99a7		90 08		bcc $99b1			bcc 	_VHCheckFirstIndex
.99a9		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.99ab		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99ad		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.99af		90 41		bcc $99f2			bcc 	_VHBadIndex
.99b1						_VHCheckFirstIndex:
.99b1		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.99b3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99b5		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.99b7		90 39		bcc $99f2			bcc 	_VHBadIndex
.99b9		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.99bb		64 37		stz $37				stz 	zTemp0+1
.99bd		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.99bf		30 0e		bmi $99cf			bmi 	_VHNoMultiply
.99c1		da		phx				phx
.99c2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.99c4		48		pha				pha
.99c5		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.99c7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99c9		1a		inc a				inc 	a 							; add 1 for zero base
.99ca		fa		plx				plx
.99cb		20 23 9e	jsr $9e23			jsr 	Multiply8x8 				; calculate -> Z0
.99ce		fa		plx				plx
.99cf						_VHNoMultiply:
.99cf		18		clc				clc
.99d0		a5 36		lda $36				lda 	zTemp0
.99d2		75 59		adc $59,x			adc 	NSMantissa0+1,x
.99d4		85 36		sta $36				sta 	zTemp0
.99d6		a5 37		lda $37				lda 	zTemp0+1
.99d8		69 00		adc #$00			adc 	#0
.99da		85 37		sta $37				sta 	zTemp0+1
.99dc		b5 50		lda $50,x			lda 	NSStatus,x
.99de		20 80 85	jsr $8580			jsr 	ScaleByBaseType
.99e1		18		clc				clc
.99e2		b2 3e		lda ($3e)			lda 	(zaTemp)
.99e4		65 36		adc $36				adc 	zTemp0
.99e6		95 58		sta $58,x			sta 	NSMantissa0,x
.99e8		a0 01		ldy #$01			ldy 	#1
.99ea		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99ec		65 37		adc $37				adc 	zTemp0+1
.99ee		95 60		sta $60,x			sta 	NSMantissa1,x
.99f0		7a		ply				ply 								; restore position
.99f1		60		rts				rts
.99f2						_VHBadIndex:
.99f2		a9 17		lda #$17		lda	#23
.99f4		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.99f7						_VHBadArray:
.99f7		a9 18		lda #$18		lda	#24
.99f9		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.99fc						AbsUnary:
.99fc		fa		plx				plx 								; restore stack pos
.99fd		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; get a float or int
.9a00		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9a03		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9a05		29 7f		and #$7f			and 	#$7F
.9a07		95 50		sta $50,x			sta 	NSStatus,x
.9a09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9a0a						AllocUnary:
.9a0a		fa		plx				plx 								; restore stack pos
.9a0b		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger		; get bytes required.
.9a0e		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9a11		da		phx				phx 								; save X/Y
.9a12		5a		phy				phy
.9a13		8a		txa				txa 								; copy X into Y
.9a14		a8		tay				tay
.9a15		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9a18		aa		tax				tax
.9a19		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9a1c		20 29 9a	jsr $9a29			jsr 	AllocateXABytes 			; allocate memory
.9a1f		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9a22		8a		txa				txa 	 							; typing is 16 bit integer.
.9a23		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9a26		7a		ply				ply
.9a27		fa		plx				plx
.9a28		60		rts				rts
.9a29						AllocateXABytes:
.9a29		5a		phy				phy
.9a2a		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a2d		84 36		sty $36				sty 	zTemp0
.9a2f		5a		phy				phy
.9a30		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a33		84 37		sty $37				sty 	zTemp0+1
.9a35		5a		phy				phy
.9a36		18		clc				clc 								; add to low memory pointer
.9a37		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a3a		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a3d		8a		txa				txa
.9a3e		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a41		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a44		b0 2f		bcs $9a75			bcs 	CISSMemory
.9a46		20 67 9a	jsr $9a67			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a49						_ClearMemory:
.9a49		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a4c		c5 36		cmp $36				cmp 	zTemp0
.9a4e		d0 07		bne $9a57			bne 	_CMClearNext
.9a50		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a53		c5 37		cmp $37				cmp 	zTemp0+1
.9a55		f0 0c		beq $9a63			beq 	_CMExit
.9a57						_CMClearNext:
.9a57		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a59		92 36		sta ($36)			sta 	(zTemp0)
.9a5b		e6 36		inc $36				inc 	zTemp0
.9a5d		d0 ea		bne $9a49			bne 	_ClearMemory
.9a5f		e6 37		inc $37				inc		zTemp0+1
.9a61		80 e6		bra $9a49			bra 	_ClearMemory
.9a63						_CMExit:
.9a63		fa		plx				plx
.9a64		68		pla				pla
.9a65		7a		ply				ply
.9a66		60		rts				rts
.9a67						CheckIdentifierStringSpace:
.9a67		48		pha				pha
.9a68		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9a6b		18		clc				clc
.9a6c		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a6e		cd 0f 04	cmp $040f			cmp 	StringMemory+1 				; is it >= StringMemory
.9a71		b0 02		bcs $9a75			bcs 	CISSMemory
.9a73		68		pla				pla
.9a74		60		rts				rts
.9a75						CISSMemory:
.9a75		a9 06		lda #$06		lda	#6
.9a77		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a7a						AscUnary:
.9a7a		fa		plx				plx 								; restore stack pos
.9a7b		20 d0 9d	jsr $9dd0			jsr 	EvaluateString 				; get a string
.9a7e		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9a80		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte 					; ASC("") will return zero.
.9a83		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9a86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a87						FracUnary:
.9a87		fa		plx				plx 								; restore stack pos
.9a88		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; get a float or int
.9a8b		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9a8e		b5 50		lda $50,x			lda 	NSStatus,x
.9a90		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a92		f0 04		beq $9a98			beq 	_IUZero
.9a94		20 42 95	jsr $9542			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9a97		60		rts				rts
.9a98						_IUZero:
.9a98		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.9a9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a9c						IntUnary:
.9a9c		fa		plx				plx 								; restore stack pos
.9a9d		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; get a float or int
.9aa0		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9aa3		b5 50		lda $50,x			lda 	NSStatus,x
.9aa5		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9aa7		f0 03		beq $9aac			beq 	_IUExit
.9aa9		20 9a 95	jsr $959a			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9aac						_IUExit:
.9aac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9aad						LenUnary:
.9aad		fa		plx				plx 								; restore stack pos
.9aae		20 d0 9d	jsr $9dd0			jsr 	EvaluateString 				; get a string
.9ab1		5a		phy				phy
.9ab2		a0 00		ldy #$00			ldy 	#0 							; find length
.9ab4						_LenFind:
.9ab4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9ab6		f0 06		beq $9abe			beq 	_LenExit
.9ab8		c8		iny				iny
.9ab9		d0 f9		bne $9ab4			bne 	_LenFind
.9abb		4c fb 9f	jmp $9ffb			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9abe						_LenExit:
.9abe		98		tya				tya		 							; return length
.9abf		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.9ac2		7a		ply				ply
.9ac3		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9ac6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9ac7						Unary_Min:
.9ac7		a9 01		lda #$01			lda 	#1
.9ac9		80 02		bra $9acd			bra 	UnaryMinMaxMain
.9acb						Unary_Max:
.9acb		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9acd						UnaryMinMaxMain:
.9acd		fa		plx				plx 								; get index on number stack
.9ace		48		pha				pha 								; save comparator
.9acf		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue 				; get the first value.
.9ad2						_UMMMLoop:
.9ad2		b1 30		lda ($30),y			lda 	(codePtr),y
.9ad4		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ad6		f0 22		beq $9afa			beq 	_UMMMDone
.9ad8		20 1c 8f	jsr $8f1c			jsr 	CheckComma 					; must be a comma
.9adb		e8		inx				inx
.9adc		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue
.9adf		ca		dex				dex
.9ae0		20 5b 9e	jsr $9e5b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9ae3		e8		inx				inx
.9ae4		20 5b 9e	jsr $9e5b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9ae7		e8		inx				inx
.9ae8		20 e4 8f	jsr $8fe4			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9aeb		ca		dex				dex
.9aec		ca		dex				dex
.9aed		85 36		sta $36				sta 	zTemp0 						; save required result
.9aef		68		pla				pla 								; get and save comparator
.9af0		48		pha				pha
.9af1		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9af3		d0 dd		bne $9ad2			bne 	_UMMMLoop
.9af5		20 fd 9a	jsr $9afd			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9af8		80 d8		bra $9ad2			bra 	_UMMMLoop
.9afa						_UMMMDone:
.9afa		68		pla				pla 								; throw the comparator
.9afb		c8		iny				iny 								; skip )
.9afc		60		rts				rts
.9afd						ExpCopyAboveDown:
.9afd		b5 51		lda $51,x			lda 	NSStatus+1,x
.9aff		95 50		sta $50,x			sta 	NSStatus,x
.9b01		b5 79		lda $79,x			lda 	NSExponent+1,x
.9b03		95 78		sta $78,x			sta 	NSExponent,x
.9b05		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b07		95 58		sta $58,x			sta 	NSMantissa0,x
.9b09		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b0b		95 60		sta $60,x			sta 	NSMantissa1,x
.9b0d		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b0f		95 68		sta $68,x			sta 	NSMantissa2,x
.9b11		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b13		95 70		sta $70,x			sta 	NSMantissa3,x
.9b15		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b16						Unary_Not:
.9b16		fa		plx				plx
.9b17		20 e5 9d	jsr $9de5			jsr 	EvaluateInteger 			; get integer
.9b1a		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9b1d		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; zero mantissa ?
.9b20		f0 04		beq $9b26			beq 	_NotZero
.9b22		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.9b25		60		rts				rts
.9b26						_NotZero:
.9b26		4c 9a 8f	jmp $8f9a			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9b29						PeekByteUnary:
.9b29		a9 01		lda #$01			lda 	#1
.9b2b		80 0a		bra $9b37			bra 	PeekUnary
.9b2d						PeekWUnary:
.9b2d		a9 02		lda #$02			lda 	#2
.9b2f		80 06		bra $9b37			bra 	PeekUnary
.9b31						PeekLUnary:
.9b31		a9 03		lda #$03			lda 	#3
.9b33		80 02		bra $9b37			bra 	PeekUnary
.9b35						PeekDUnary:
.9b35		a9 04		lda #$04			lda 	#4
.9b37						PeekUnary:
.9b37		fa		plx				plx 								; restore position.
.9b38		48		pha				pha 								; save count to copy on stack
.9b39		20 f8 9d	jsr $9df8			jsr		Evaluate16BitInteger 		; address as constant.
.9b3c		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9b3f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9b41		85 36		sta $36				sta 	zTemp0
.9b43		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b45		85 37		sta $37				sta 	zTemp0+1
.9b47		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; clear the result to zero.
.9b4a		68		pla				pla 								; count in zTemp2
.9b4b		85 3a		sta $3a				sta 	zTemp2
.9b4d		da		phx				phx 								; save stack position and offset of read
.9b4e		5a		phy				phy
.9b4f		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9b51						_PULoop:
.9b51		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9b53		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9b55		c8		iny				iny 								; next byte to write
.9b56		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9b57		18		clc				clc
.9b58		69 08		adc #$08			adc 	#MathStackSize
.9b5a		aa		tax				tax
.9b5b		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9b5d		d0 f2		bne $9b51			bne 	_PULoop
.9b5f		7a		ply				ply 								; restore stack/code pos and exit.
.9b60		fa		plx				plx
.9b61		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b62						Unary_Random:
.9b62		fa		plx				plx
.9b63		20 d4 9b	jsr $9bd4			jsr 	Random32Bit 				; get a random number
.9b66		20 bd 9b	jsr $9bbd			jsr 	URCopyToMantissa  			; put in mantissa
.9b69		b1 30		lda ($30),y			lda 	(codePtr),y
.9b6b		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9b6d		f0 08		beq $9b77			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9b6f		e8		inx				inx
.9b70		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b73		ca		dex				dex
.9b74		20 ec 90	jsr $90ec			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9b77						_URNoModulus:
.9b77		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9b79		74 78		stz $78,x			stz 	NSExponent,x
.9b7b		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9b7e		60		rts				rts
.9b7f						Unary_Rnd:
.9b7f		fa		plx				plx
.9b80		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; number to use.
.9b83		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; closing bracket
.9b86		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b89		f0 26		beq $9bb1			beq 	_URCopySeed
.9b8b		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b8d		10 1f		bpl $9bae			bpl 	_URDontSeed
.9b8f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b91		49 17		eor #$17			eor 	#$17
.9b93		8d 08 04	sta $0408			sta 	RandomSeed+0
.9b96		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b98		49 a5		eor #$a5			eor 	#$A5
.9b9a		8d 09 04	sta $0409			sta 	RandomSeed+1
.9b9d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9b9f		49 c2		eor #$c2			eor 	#$C2
.9ba1		8d 0a 04	sta $040a			sta 	RandomSeed+2
.9ba4		b5 70		lda $70,x			lda 	NSMantissa3,x
.9ba6		49 9d		eor #$9d			eor 	#$9D
.9ba8		8d 0b 04	sta $040b			sta 	RandomSeed+3
.9bab		20 d4 9b	jsr $9bd4			jsr 	Random32Bit
.9bae						_URDontSeed:
.9bae		20 d4 9b	jsr $9bd4			jsr 	Random32Bit 				; generate a number
.9bb1						_URCopySeed:
.9bb1		20 bd 9b	jsr $9bbd			jsr 	URCopyToMantissa 			; copy into mantissa
.9bb4		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9bb6		95 78		sta $78,x			sta 	NSExponent,x
.9bb8		a9 08		lda #$08			lda 	#NSTFloat
.9bba		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9bbc		60		rts				rts
.9bbd						URCopyToMantissa:
.9bbd		ad 08 04	lda $0408			lda 	RandomSeed+0
.9bc0		95 58		sta $58,x			sta 	NSMantissa0,x
.9bc2		ad 09 04	lda $0409			lda 	RandomSeed+1
.9bc5		95 60		sta $60,x			sta 	NSMantissa1,x
.9bc7		ad 0a 04	lda $040a			lda 	RandomSeed+2
.9bca		95 68		sta $68,x			sta 	NSMantissa2,x
.9bcc		ad 0b 04	lda $040b			lda 	RandomSeed+3
.9bcf		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9bd1		95 70		sta $70,x			sta 	NSMantissa3,x
.9bd3		60		rts				rts
.9bd4						Random32Bit:
.9bd4		5a		phy				phy
.9bd5		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9bd7		ad 08 04	lda $0408			lda 	RandomSeed+0 				; check the seed isn't zero
.9bda		d0 03		bne $9bdf			bne 	_Random1
.9bdc		a8		tay				tay 								; if so do it 256 times
.9bdd		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9bdf						_Random1:
.9bdf		0a		asl a				asl 	a 							; LSFR RNG
.9be0		2e 09 04	rol $0409			rol 	RandomSeed+1
.9be3		2e 0a 04	rol $040a			rol 	RandomSeed+2
.9be6		2e 0b 04	rol $040b			rol 	RandomSeed+3
.9be9		90 02		bcc $9bed			bcc 	_Random2
.9beb		49 c5		eor #$c5			eor 	#$C5
.9bed						_Random2:
.9bed		88		dey				dey
.9bee		d0 ef		bne $9bdf			bne 	_Random1
.9bf0		8d 08 04	sta $0408			sta 	RandomSeed+0
.9bf3		7a		ply				ply
.9bf4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9bf5						SgnUnary:
.9bf5		fa		plx				plx 								; restore stack pos
.9bf6		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber 				; get a float or int
.9bf9		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9bfc		20 9a 9e	jsr $9e9a			jsr 	NSMIsZero 					; if zero
.9bff		f0 0e		beq $9c0f			beq 	_SGZero  					; return Int Zero
.9c01		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9c03		48		pha				pha
.9c04		a9 01		lda #$01			lda 	#1 							; set to 1
.9c06		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.9c09		68		pla				pla
.9c0a		29 80		and #$80			and		#$80 						; copy the sign byte out
.9c0c		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9c0e		60		rts				rts
.9c0f		20 78 9e	jsr $9e78	_SGZero:jsr 	NSMSetZero
.9c12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9c13						ValUnary:
.9c13		fa		plx				plx 								; restore stack pos
.9c14		20 29 9c	jsr $9c29			jsr 	ValMainCode 				; do the main val() code
.9c17		b0 01		bcs $9c1a			bcs 	_VUError 					; couldn't convert
.9c19		60		rts				rts
.9c1a						_VUError:
.9c1a		4c 00 a0	jmp $a000			jmp 	TypeError
.9c1d						IsValUnary:
.9c1d		fa		plx				plx 								; restore stack pos
.9c1e		20 29 9c	jsr $9c29			jsr 	ValMainCode 				; do the main val() code
.9c21		b0 03		bcs $9c26			bcs 	_VUBad
.9c23		4c 9a 8f	jmp $8f9a			jmp 	ReturnTrue
.9c26						_VUBad:
.9c26		4c a5 8f	jmp $8fa5			jmp 	ReturnFalse
.9c29						ValMainCode:
.9c29		20 d0 9d	jsr $9dd0			jsr 	EvaluateString 				; get a string
.9c2c		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; check right bracket present
.9c2f						ValEvaluateZTemp0:
.9c2f		5a		phy				phy
.9c30		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9c32		f0 17		beq $9c4b			beq 	_VMCFail2
.9c34		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9c36		48		pha				pha 								; save first character
.9c37		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9c39		d0 01		bne $9c3c			bne 	_VMCStart
.9c3b		c8		iny				iny 								; skip over -
.9c3c						_VMCStart:
.9c3c		38		sec				sec 								; initialise first time round.
.9c3d						_VMCNext:
.9c3d		c8		iny				iny 								; pre-increment
.9c3e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9c40		f0 0c		beq $9c4e			beq 	_VMCSuccess 				; successful.
.9c42		20 77 97	jsr $9777			jsr 	EncodeNumber 				; send it to the number-builder
.9c45		90 03		bcc $9c4a			bcc 	_VMCFail 					; if failed, give up.
.9c47		18		clc				clc 								; next time round, countinue
.9c48		80 f3		bra $9c3d			bra 	_VMCNext
.9c4a						_VMCFail:
.9c4a		68		pla				pla
.9c4b						_VMCFail2:
.9c4b		7a		ply				ply
.9c4c		38		sec				sec
.9c4d		60		rts				rts
.9c4e						_VMCSuccess:
.9c4e		a9 00		lda #$00			lda 	#0 							; construct final
.9c50		20 77 97	jsr $9777			jsr 	EncodeNumber 				; by sending a duff value.
.9c53		68		pla				pla 								; if it was -ve
.9c54		c9 2d		cmp #$2d			cmp 	#"-"
.9c56		d0 03		bne $9c5b			bne 	_VMCNotNegative
.9c58		20 3a 9e	jsr $9e3a			jsr		NSMNegate 					; negate it.
.9c5b						_VMCNotNegative:
.9c5b		7a		ply				ply
.9c5c		18		clc				clc
.9c5d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c5e						ChrUnary:
.9c5e		fa		plx				plx 								; restore stack pos
.9c5f		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9c62		48		pha				pha
.9c63		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9c66		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c68		20 38 b0	jsr $b038			jsr 	StringTempAllocate
.9c6b		68		pla				pla 								; write number to it
.9c6c		20 71 b0	jsr $b071			jsr 	StringTempWrite
.9c6f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c70						SpcUnary:
.9c70		fa		plx				plx 								; restore stack pos
.9c71		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger			; get value
.9c74		5a		phy				phy
.9c75		48		pha				pha 								; save count
.9c76		20 38 b0	jsr $b038			jsr 	StringTempAllocate
.9c79		7a		ply				ply 								; to do count in Y
.9c7a						_SpcLoop:
.9c7a		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9c7c		f0 08		beq $9c86			beq 	_SpcExit
.9c7e		a9 20		lda #$20			lda 	#32
.9c80		20 71 b0	jsr $b071			jsr 	StringTempWrite
.9c83		88		dey				dey
.9c84		80 f4		bra $9c7a			bra 	_SPCLoop
.9c86						_SpcExit:
.9c86		7a		ply				ply
.9c87		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.9c8a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c8b						Unary_Str:
.9c8b		fa		plx				plx
.9c8c		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber  			; get number
.9c8f		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; closing bracket
.9c92		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c94		20 ad 9c	jsr $9cad			jsr 	ConvertNumberToString 		; do the conversion.
.9c97		a9 21		lda #$21			lda		#33 						; create buffer
.9c99		20 38 b0	jsr $b038			jsr 	StringTempAllocate 			; allocate memory
.9c9c		da		phx				phx  								; copy the converted string into the buffer.
.9c9d		a2 00		ldx #$00			ldx 	#0
.9c9f						_USCopy:
.9c9f		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9ca2		20 71 b0	jsr $b071			jsr 	StringTempWrite
.9ca5		e8		inx				inx
.9ca6		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9ca9		d0 f4		bne $9c9f			bne 	_USCopy
.9cab		fa		plx				plx
.9cac		60		rts				rts
.9cad						ConvertNumberToString:
.9cad		5a		phy				phy 								; save code position
.9cae		8d 14 04	sta $0414			sta 	DecimalPlaces	 			; save number of DPs.
.9cb1		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9cb4		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9cb6		10 09		bpl $9cc1			bpl 	_CNTSNotNegative
.9cb8		29 7f		and #$7f			and 	#$7F 						; make +ve
.9cba		95 50		sta $50,x			sta 	NSStatus,x
.9cbc		a9 2d		lda #$2d			lda 	#"-"
.9cbe		20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer
.9cc1						_CNTSNotNegative:
.9cc1		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9cc3		f0 12		beq $9cd7			beq 	_CNTSNotFloat
.9cc5		e8		inx				inx 								; round up so we don't get too many 6.999999
.9cc6		a9 01		lda #$01			lda 	#1
.9cc8		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.9ccb		ca		dex				dex
.9ccc		b5 78		lda $78,x			lda		NSExponent,x
.9cce		95 79		sta $79,x			sta 	NSExponent+1,x
.9cd0		a9 08		lda #$08			lda 	#NSTFloat
.9cd2		95 51		sta $51,x			sta 	NSStatus+1,x
.9cd4		20 7c 94	jsr $947c			jsr 	FloatAdd
.9cd7						_CNTSNotFloat:
.9cd7		20 04 9d	jsr $9d04			jsr 	MakePlusTwoString 			; do the integer part.
.9cda		20 42 95	jsr $9542			jsr 	FloatFractionalPart 		; get the fractional part
.9cdd		20 f3 95	jsr $95f3			jsr 	NSNormalise					; normalise , exit if zero
.9ce0		f0 20		beq $9d02			beq 	_CNTSExit
.9ce2		a9 2e		lda #$2e			lda 	#"."
.9ce4		20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer 			; write decimal place
.9ce7						_CNTSDecimal:
.9ce7		ce 14 04	dec $0414			dec 	DecimalPlaces 				; done all the decimals
.9cea		30 16		bmi $9d02			bmi 	_CNTSExit
.9cec		e8		inx				inx 								; x 10.0
.9ced		a9 0a		lda #$0a			lda 	#10
.9cef		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.9cf2		a9 08		lda #$08			lda 	#NSTFloat
.9cf4		95 50		sta $50,x			sta 	NSStatus,x
.9cf6		ca		dex				dex
.9cf7		20 c1 95	jsr $95c1			jsr 	FloatMultiply
.9cfa		20 04 9d	jsr $9d04			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9cfd		20 42 95	jsr $9542			jsr 	FloatFractionalPart 		; get the fractional part
.9d00		80 e5		bra $9ce7			bra 	_CNTSDecimal 				; keep going.
.9d02						_CNTSExit:
.9d02		7a		ply				ply
.9d03		60		rts				rts
.9d04						MakePlusTwoString:
.9d04		da		phx				phx
.9d05		20 5b 9e	jsr $9e5b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9d08		e8		inx				inx 								; access it
.9d09		e8		inx				inx
.9d0a		20 9a 95	jsr $959a			jsr 	FloatIntegerPart 			; make it an integer
.9d0d		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9d0f		20 ac 93	jsr $93ac			jsr 	ConvertInt32
.9d12		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9d14						_MPTSCopy:
.9d14		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d17		20 22 9d	jsr $9d22			jsr 	WriteDecimalBuffer
.9d1a		e8		inx				inx
.9d1b		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d1e		d0 f4		bne $9d14			bne 	_MPTSCopy
.9d20		fa		plx				plx
.9d21		60		rts				rts
.9d22						WriteDecimalBuffer:
.9d22		da		phx				phx
.9d23		ae 15 04	ldx $0415			ldx 	dbOffset
.9d26		9d 49 06	sta $0649,x			sta 	DecimalBuffer,x
.9d29		9e 4a 06	stz $064a,x			stz 	DecimalBuffer+1,x
.9d2c		ee 15 04	inc $0415			inc 	dbOffset
.9d2f		fa		plx				plx
.9d30		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d31						Unary_Left:
.9d31		fa		plx				plx
.9d32		18		clc				clc 								; only one parameter
.9d33		20 96 9d	jsr $9d96			jsr 	SubstringInitial 			; set up.
.9d36		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d38		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d3a		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d3c		80 25		bra $9d63			bra 	SubstringMain
.9d3e						Unary_Right:
.9d3e		fa		plx				plx
.9d3f		18		clc				clc 								; only one parameter
.9d40		20 96 9d	jsr $9d96			jsr 	SubstringInitial 			; set up.
.9d43		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d45		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d47		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9d49		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d4b		b0 02		bcs $9d4f			bcs 	_URNotUnderflow
.9d4d		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d4f						_URNotUnderFlow:
.9d4f		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d51		80 10		bra $9d63			bra 	SubStringMain
.9d53						Unary_Mid:
.9d53		fa		plx				plx
.9d54		38		sec				sec 								; two parameters
.9d55		20 96 9d	jsr $9d96			jsr 	SubstringInitial 			; set up.
.9d58		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d5a		f0 04		beq $9d60			beq 	_UMError
.9d5c		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d5e		80 03		bra $9d63			bra 	SubStringMain
.9d60						_UMError:
.9d60		4c 05 a0	jmp $a005			jmp 	ArgumentError
.9d63						SubStringMain:
.9d63		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d65		d5 78		cmp $78,x			cmp 	NSExponent,x
.9d67		b0 27		bcs $9d90			bcs 	_SSMNull 					; if so, return an empty string.
.9d69		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d6b		f0 23		beq $9d90			beq 	_SSMNull 					; return empty string.
.9d6d		18		clc				clc 								; add the offset +1 to the address and
.9d6e		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9d70		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d72		85 36		sta $36				sta 	zTemp0
.9d74		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9d76		69 00		adc #$00			adc 	#0
.9d78		85 37		sta $37				sta 	zTemp0+1
.9d7a						_SSMNoCarry:
.9d7a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d7c		20 38 b0	jsr $b038			jsr 	StringTempAllocate 			; allocate that many characters
.9d7f		5a		phy				phy 								; save Y
.9d80		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d82						_SSMCopy:
.9d82		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d84		f0 08		beq $9d8e			beq 	_SSMEString 				; no more to copy
.9d86		20 71 b0	jsr $b071			jsr 	StringTempWrite 			; and write it out.
.9d89		c8		iny				iny
.9d8a		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9d8c		d0 f4		bne $9d82			bne 	_SSMCopy
.9d8e						_SSMEString:
.9d8e		7a		ply				ply
.9d8f						_SSMExit:
.9d8f		60		rts				rts
.9d90						_SSMNull:
.9d90		a9 00		lda #$00			lda 	#0
.9d92		20 38 b0	jsr $b038			jsr 	StringTempAllocate
.9d95		60		rts				rts
.9d96						SubstringInitial:
.9d96		da		phx				phx 								; save initial stack position
.9d97		08		php				php 								; save carry on stack indicating 2 parameters
.9d98		20 d0 9d	jsr $9dd0			jsr 	EvaluateString 				; get a string
.9d9b		5a		phy				phy 								; calculate length to exponent.
.9d9c		a0 ff		ldy #$ff			ldy 	#$FF
.9d9e						_SIFindLength:
.9d9e		c8		iny				iny
.9d9f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9da1		d0 fb		bne $9d9e			bne 	_SIFindLength
.9da3		98		tya				tya
.9da4		95 78		sta $78,x			sta 	NSExponent,x
.9da6		7a		ply				ply
.9da7		e8		inx				inx
.9da8		20 1c 8f	jsr $8f1c			jsr 	CheckComma 					; comma next
.9dab		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get next parameter
.9dae		28		plp				plp 								; is it the last parameter ?
.9daf		90 07		bcc $9db8			bcc 	_SSIExit 					; if so, exit.
.9db1		e8		inx				inx
.9db2		20 1c 8f	jsr $8f1c			jsr 	CheckComma 					; comma next
.9db5		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get last parameter
.9db8						_SSIExit:
.9db8		fa		plx				plx
.9db9		20 14 8f	jsr $8f14			jsr 	CheckRightBracket 			; check closing bracket
.9dbc		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9dbd						EvaluateValue:
.9dbd		48		pha				pha
.9dbe		20 31 94	jsr $9431			jsr		EvaluateExpression 			; expression
.9dc1		20 f4 96	jsr $96f4			jsr 	Dereference					; derefernce it
.9dc4		68		pla				pla
.9dc5		60		rts				rts
.9dc6						EvaluateNumber:
.9dc6		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue 				; get a value
.9dc9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9dcb		29 10		and #$10			and 	#NSBIsString
.9dcd		d0 13		bne $9de2			bne 	HelperTypeError
.9dcf		60		rts				rts
.9dd0						EvaluateString:
.9dd0		20 bd 9d	jsr $9dbd			jsr 	EvaluateValue 				; get a value
.9dd3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9dd5		29 10		and #$10			and 	#NSBIsString
.9dd7		f0 09		beq $9de2			beq 	HelperTypeError
.9dd9						CopyAddressToTemp0:
.9dd9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9ddb		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9ddd		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ddf		85 37		sta $37				sta 	zTemp0+1
.9de1		60		rts				rts
.9de2						HelperTypeError:
.9de2		4c 00 a0	jmp $a000			jmp 	TypeError
.9de5						EvaluateInteger:
.9de5		20 c6 9d	jsr $9dc6			jsr 	EvaluateNumber
.9de8		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9dea		d0 09		bne $9df5			bne 	HelperValueError 			; if not, it's a float.
.9dec		60		rts				rts
.9ded						EvaluateUnsignedInteger:
.9ded		20 e5 9d	jsr $9de5			jsr 	EvaluateInteger 			; check integer is +ve
.9df0		b5 50		lda $50,x			lda 	NSStatus,x
.9df2		30 01		bmi $9df5			bmi 	HelperValueError
.9df4		60		rts				rts
.9df5						HelperValueError:
.9df5		4c 05 a0	jmp $a005			jmp 	ArgumentError
.9df8						Evaluate16BitInteger:
.9df8		20 ed 9d	jsr $9ded			jsr	 	EvaluateUnsignedInteger		; get integer
.9dfb		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9dfd		15 68		ora $68,x			ora 	NSMantissa2,x
.9dff		d0 f4		bne $9df5			bne 	HelperValueError
.9e01		60		rts				rts
.9e02						Evaluate16BitIntegerSigned:
.9e02		20 e5 9d	jsr $9de5			jsr	 	EvaluateInteger				; get integer
.9e05		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e07		15 68		ora $68,x			ora 	NSMantissa2,x
.9e09		d0 ea		bne $9df5			bne 	HelperValueError
.9e0b		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9e0d		10 03		bpl $9e12			bpl 	_EISNotSigned
.9e0f		20 41 9e	jsr $9e41			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9e12						_EISNotSigned:
.9e12		60		rts				rts
.9e13						Evaluate8BitInteger:
.9e13		20 ed 9d	jsr $9ded			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9e16		d0 dd		bne $9df5			bne 	HelperValueError
.9e18		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9e1a		15 68		ora $68,x			ora 	NSMantissa2,x
.9e1c		15 60		ora $60,x			ora 	NSMantissa1,x
.9e1e		d0 d5		bne $9df5			bne 	HelperValueError
.9e20		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e22		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9e23						Multiply8x8:
.9e23		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9e24		85 36		sta $36			  	sta 	zTemp0
.9e26		86 37		stx $37				stx 	zTemp0+1
.9e28		a9 00		lda #$00			lda 	#0
.9e2a		a2 08		ldx #$08			ldx 	#8
.9e2c						_M88Loop:
.9e2c		90 03		bcc $9e31			bcc 	_M88NoAdd
.9e2e		18		clc				clc
.9e2f		65 37		adc $37				adc 	zTemp0+1
.9e31						_M88NoAdd:
.9e31		6a		ror a				ror 	a
.9e32		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9e34		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9e35		d0 f5		bne $9e2c			bne 	_M88Loop
.9e37		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9e39		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e3a						NSMNegate:
.9e3a		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9e3c		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9e3e		95 50		sta $50,x			sta 	NSStatus,x
.9e40		60		rts				rts
.9e41						NSMNegateMantissa:
.9e41		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9e42		a9 00		lda #$00			lda 	#0
.9e44		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9e46		95 58		sta $58,x			sta 	NSMantissa0,x
.9e48		a9 00		lda #$00			lda 	#0
.9e4a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e4c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e4e		a9 00		lda #$00			lda 	#0
.9e50		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e52		95 68		sta $68,x			sta 	NSMantissa2,x
.9e54		a9 00		lda #$00			lda 	#0
.9e56		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9e58		95 70		sta $70,x			sta 	NSMantissa3,x
.9e5a		60		rts				rts
.9e5b						NSMShiftUpTwo:
.9e5b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e5d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e5f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e61		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e63		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e65		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e67		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e69		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e6b		b5 78		lda $78,x			lda 	NSExponent,x
.9e6d		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9e6f		b5 50		lda $50,x			lda 	NSStatus,x
.9e71		95 52		sta $52,x			sta 	NSStatus+2,x
.9e73		60		rts				rts
.9e74						NSMSetZeroMantissaOnly:
.9e74		a9 00		lda #$00			lda 	#0
.9e76		80 06		bra $9e7e			bra 	NSMSetMantissa
.9e78						NSMSetZero:
.9e78		a9 00		lda #$00			lda 	#0
.9e7a						NSMSetByte:
.9e7a		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e7c		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9e7e						NSMSetMantissa:
.9e7e		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9e80		74 60		stz $60,x			stz 	NSMantissa1,x
.9e82		74 68		stz $68,x			stz 	NSMantissa2,x
.9e84		74 70		stz $70,x			stz 	NSMantissa3,x
.9e86		60		rts				rts
.9e87						NSMShiftLeft:
.9e87		18		clc				clc
.9e88						NSMRotateLeft:
.9e88		36 58		rol $58,x			rol 	NSMantissa0,x
.9e8a		36 60		rol $60,x			rol		NSMantissa1,x
.9e8c		36 68		rol $68,x			rol		NSMantissa2,x
.9e8e		36 70		rol $70,x			rol		NSMantissa3,x
.9e90		60		rts				rts
.9e91						NSMShiftRight:
.9e91		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9e93		76 68		ror $68,x			ror		NSMantissa2,x
.9e95		76 60		ror $60,x			ror		NSMantissa1,x
.9e97		76 58		ror $58,x			ror		NSMantissa0,x
.9e99		60		rts				rts
.9e9a						NSMIsZero:
.9e9a		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e9c		15 68		ora $68,x			ora		NSMantissa2,x
.9e9e		15 60		ora $60,x			ora		NSMantissa1,x
.9ea0		15 58		ora $58,x			ora		NSMantissa0,x
.9ea2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9ea3						TickHandler:
.9ea3		5a		phy				phy 								; need to preserve Y
.9ea4		20 53 80	jsr $8053			jsr 	SNDUpdate 					; update sound
.9ea7		7a		ply				ply
.9ea8		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9ea9						Assemble_ora:
.9ea9		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eac		01					.byte $01
.9ead						Assemble_and:
.9ead		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eb0		21					.byte $21
.9eb1						Assemble_eor:
.9eb1		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eb4		41					.byte $41
.9eb5						Assemble_adc:
.9eb5		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eb8		61					.byte $61
.9eb9						Assemble_sta:
.9eb9		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ebc		81					.byte $81
.9ebd						Assemble_lda:
.9ebd		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec0		a1					.byte $a1
.9ec1						Assemble_cmp:
.9ec1		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec4		c1					.byte $c1
.9ec5						Assemble_sbc:
.9ec5		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec8		e1					.byte $e1
.9ec9						Assemble_asl:
.9ec9		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ecc		02					.byte $02
>9ecd		75					.byte $75
.9ece						Assemble_rol:
.9ece		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed1		22					.byte $22
>9ed2		75					.byte $75
.9ed3						Assemble_lsr:
.9ed3		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed6		42					.byte $42
>9ed7		75					.byte $75
.9ed8						Assemble_ror:
.9ed8		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9edb		62					.byte $62
>9edc		75					.byte $75
.9edd						Assemble_stx:
.9edd		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ee0		82					.byte $82
>9ee1		50					.byte $50
.9ee2						Assemble_ldx:
.9ee2		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ee5		a2					.byte $a2
>9ee6		d0					.byte $d0
.9ee7						Assemble_dec:
.9ee7		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eea		c2					.byte $c2
>9eeb		55					.byte $55
.9eec						Assemble_inc:
.9eec		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eef		e2					.byte $e2
>9ef0		55					.byte $55
.9ef1						Assemble_stz:
.9ef1		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ef4		60					.byte $60
>9ef5		44					.byte $44
.9ef6						Assemble_bit:
.9ef6		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ef9		20					.byte $20
>9efa		55					.byte $55
.9efb						Assemble_sty:
.9efb		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9efe		80					.byte $80
>9eff		54					.byte $54
.9f00						Assemble_ldy:
.9f00		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f03		a0					.byte $a0
>9f04		d5					.byte $d5
.9f05						Assemble_cpy:
.9f05		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f08		c0					.byte $c0
>9f09		d4					.byte $d4
.9f0a						Assemble_cpx:
.9f0a		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f0d		e0					.byte $e0
>9f0e		d0					.byte $d0
.9f0f						Assemble_tsb:
.9f0f		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f12		00					.byte $00
>9f13		50					.byte $50
.9f14						Assemble_trb:
.9f14		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f17		10					.byte $10
>9f18		50					.byte $50
.9f19						Assemble_jsr:
.9f19		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f1c		14					.byte $14
>9f1d		10					.byte $10
.9f1e						Assemble_jmp:
.9f1e		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f21		40					.byte $40
>9f22		10					.byte $10
.9f23						Assemble_bpl:
.9f23		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f26		10					.byte $10
.9f27						Assemble_bmi:
.9f27		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f2a		30					.byte $30
.9f2b						Assemble_bvc:
.9f2b		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f2e		50					.byte $50
.9f2f						Assemble_bvs:
.9f2f		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f32		70					.byte $70
.9f33						Assemble_bcc:
.9f33		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f36		90					.byte $90
.9f37						Assemble_bcs:
.9f37		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f3a		b0					.byte $b0
.9f3b						Assemble_bne:
.9f3b		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f3e		d0					.byte $d0
.9f3f						Assemble_beq:
.9f3f		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f42		f0					.byte $f0
.9f43						Assemble_bra:
.9f43		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f46		80					.byte $80
.9f47						Assemble_brk:
.9f47		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f4a		00					.byte $00
.9f4b						Assemble_php:
.9f4b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f4e		08					.byte $08
.9f4f						Assemble_clc:
.9f4f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f52		18					.byte $18
.9f53						Assemble_plp:
.9f53		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f56		28					.byte $28
.9f57						Assemble_sec:
.9f57		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5a		38					.byte $38
.9f5b						Assemble_rti:
.9f5b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5e		40					.byte $40
.9f5f						Assemble_pha:
.9f5f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f62		48					.byte $48
.9f63						Assemble_cli:
.9f63		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f66		58					.byte $58
.9f67						Assemble_phy:
.9f67		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6a		5a					.byte $5a
.9f6b						Assemble_rts:
.9f6b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6e		60					.byte $60
.9f6f						Assemble_pla:
.9f6f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f72		68					.byte $68
.9f73						Assemble_sei:
.9f73		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f76		78					.byte $78
.9f77						Assemble_ply:
.9f77		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7a		7a					.byte $7a
.9f7b						Assemble_dey:
.9f7b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7e		88					.byte $88
.9f7f						Assemble_txa:
.9f7f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f82		8a					.byte $8a
.9f83						Assemble_tya:
.9f83		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f86		98					.byte $98
.9f87						Assemble_txs:
.9f87		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f8a		9a					.byte $9a
.9f8b						Assemble_tay:
.9f8b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f8e		a8					.byte $a8
.9f8f						Assemble_tax:
.9f8f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f92		aa					.byte $aa
.9f93						Assemble_clv:
.9f93		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f96		b8					.byte $b8
.9f97						Assemble_tsx:
.9f97		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f9a		ba					.byte $ba
.9f9b						Assemble_iny:
.9f9b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f9e		c8					.byte $c8
.9f9f						Assemble_dex:
.9f9f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fa2		ca					.byte $ca
.9fa3						Assemble_cld:
.9fa3		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fa6		d8					.byte $d8
.9fa7						Assemble_phx:
.9fa7		20 45 81	jsr $8145		jsr	AssembleGroup4
>9faa		da					.byte $da
.9fab						Assemble_stp:
.9fab		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fae		db					.byte $db
.9faf						Assemble_inx:
.9faf		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fb2		e8					.byte $e8
.9fb3						Assemble_nop:
.9fb3		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fb6		ea					.byte $ea
.9fb7						Assemble_sed:
.9fb7		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fba		f8					.byte $f8
.9fbb						Assemble_plx:
.9fbb		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fbe		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9fbf						DecimalScalarTable:
>9fbf		66 66 66 66				.dword $66666666 ; 0.1
>9fc3		de					.byte $de
>9fc4		1f 85 eb 51				.dword $51eb851f ; 0.01
>9fc8		db					.byte $db
>9fc9		4c 37 89 41				.dword $4189374c ; 0.001
>9fcd		d8					.byte $d8
>9fce		ac 8b db 68				.dword $68db8bac ; 0.0001
>9fd2		d4					.byte $d4
>9fd3		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9fd7		d1					.byte $d1
>9fd8		83 de 1b 43				.dword $431bde83 ; 1e-06
>9fdc		ce					.byte $ce
>9fdd		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9fe1		ca					.byte $ca
>9fe2		89 3b e6 55				.dword $55e63b89 ; 1e-08
>9fe6		c7					.byte $c7
>9fe7		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9feb		c4					.byte $c4
>9fec		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9ff0		c0					.byte $c0
>9ff1		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9ff5		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9ff6						SyntaxError:
.9ff6		a9 02		lda #$02		lda	#2
.9ff8		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.9ffb						RangeError:
.9ffb		a9 04		lda #$04		lda	#4
.9ffd		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.a000						TypeError:
.a000		a9 05		lda #$05		lda	#5
.a002		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.a005						ArgumentError:
.a005		a9 07		lda #$07		lda	#7
.a007		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.a00a						NotDoneError:
.a00a		a9 0c		lda #$0c		lda	#12
.a00c		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.a00f						ErrorText:
>a00f		42 72 65 61 6b 00			.text	"Break",0
>a015		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a01d		72 72 6f 72 00
>a022		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a02a		20 62 79 20 7a 65 72 6f 00
>a033		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a03b		61 6e 67 65 00
>a040		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a048		6d 61 74 63 68 00
>a04e		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a056		65 6d 6f 72 79 00
>a05c		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a064		61 72 67 75 6d 65 6e 74 00
>a06d		53 74 6f 70 00				.text	"Stop",0
>a072		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a07a		6f 6f 20 6c 6f 6e 67 00
>a082		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a08a		6e 20 66 61 69 6c 65 64 00
>a093		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a09b		61 74 61 00
>a09f		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a0a7		65 6e 74 65 64 00
>a0ad		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a0b5		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a0c1		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a0c9		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a0d6		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a0de		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a0eb		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0f3		68 6f 75 74 20 57 68 69 6c 65 00
>a0fe		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a106		68 6f 75 74 20 46 6f 72 00
>a10f		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a117		61 63 6b 20 66 75 6c 6c 00
>a120		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a128		75 63 74 75 72 65 00
>a12f		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a137		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a144		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a14c		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a15a		41 72 72 61 79 20 73 69			.text	"Array size",0
>a162		7a 65 00
>a165		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a16d		79 20 69 6e 64 65 78 00
>a175		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a17d		74 20 64 65 63 6c 61 72 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a188		41 6c 70 68 61 20 31 36			.text "Alpha 16 built 17-Dec-22. "
>a190		20 62 75 69 6c 74 20 31 37 2d 44 65 63 2d 32 32
>a1a0		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a1a2						RectangleCommand:
.a1a2		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a1a4		80 02		bra $a1a8			bra 	ShapeDrawCmd
.a1a6						CircleCommand:
.a1a6		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a1a8						ShapeDrawCmd:
.a1a8		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a1ab						ShapeDraw:
.a1ab		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a1ae		4c 26 a2	jmp $a226			jmp 	ExecuteGraphicCommand	 	; and complete
.a1b1						SpriteCommand:
.a1b1		a2 00		ldx #$00			ldx 	#0
.a1b3		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get image number.
.a1b6		5a		phy				phy
.a1b7		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a1b9		a6 58		ldx $58				ldx 	NSMantissa0
.a1bb		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a1bd		b0 0d		bcs $a1cc			bcs 	_SCRange
.a1bf		a0 ff		ldy #$ff			ldy 	#255
.a1c1		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1c4		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a1c6		7a		ply				ply
.a1c7		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a1ca		80 5a		bra $a226			bra 	ExecuteGraphicCommand
.a1cc						_SCRange:
.a1cc		4c fb 9f	jmp $9ffb			jmp 	RangeError
.a1cf						ImageCommand:
.a1cf		a2 00		ldx #$00			ldx 	#0
.a1d1		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get image number.
.a1d4		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a1d7						ImageRunDraw:
.a1d7		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a1d9		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1dc		ad 64 06	lda $0664			lda 	gxDrawScale
.a1df		0a		asl a				asl 	a
.a1e0		0a		asl a				asl 	a
.a1e1		0a		asl a				asl 	a
.a1e2		a8		tay				tay
.a1e3		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a1e5		a6 58		ldx $58				ldx 	NSMantissa0
.a1e7		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1ea		60		rts				rts
.a1eb						TextCommand:
.a1eb		a2 00		ldx #$00			ldx 	#0
.a1ed		20 d0 9d	jsr $9dd0			jsr 	EvaluateString 				; get text
.a1f0		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a1f3						TextRunDraw:
.a1f3		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a1f5		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1f8		a0 00		ldy #$00			ldy 	#0
.a1fa						_IRDLoop:
.a1fa		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a1fc		85 37		sta $37				sta 	zTemp0+1
.a1fe		a5 58		lda $58				lda 	NSMantissa0
.a200		85 36		sta $36				sta 	zTemp0
.a202		b1 36		lda ($36),y			lda 	(zTemp0),y
.a204		f0 13		beq $a219			beq 	_IRDExit
.a206		5a		phy				phy									; save string pos
.a207		48		pha				pha 								; save char
.a208		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a20b		0a		asl a				asl 	a
.a20c		0a		asl a				asl 	a
.a20d		0a		asl a				asl 	a
.a20e		a8		tay				tay
.a20f		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a211		fa		plx				plx 								; char to draw
.a212		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a215		7a		ply				ply 								; restore string pos
.a216		c8		iny				iny
.a217		90 e1		bcc $a1fa			bcc 	_IRDLoop 					; go back if no error.
.a219						_IRDExit:
.a219		60		rts				rts
.a21a						PlotCommand:
.a21a		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a21c		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a21f		80 05		bra $a226			bra 	ExecuteGraphicCommand
.a221						LineCommand:
.a221		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a223		20 32 a2	jsr $a232			jsr 	RunGraphicsCommand
.a226						ExecuteGraphicCommand:
.a226		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a229		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; draw it and exit
.a22c		b0 01		bcs $a22f			bcs 	_EGCError
.a22e		60		rts				rts
.a22f						_EGCError:
.a22f		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.a232						RunGraphicsCommand:
.a232		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a235		68		pla				pla 								; pop handler address
.a236		fa		plx				plx
.a237		1a		inc a				inc 	a
.a238		d0 01		bne $a23b			bne 	_RGINoCarry
.a23a		e8		inx				inx
.a23b						_RGINoCarry:
.a23b		8d 62 06	sta $0662			sta 	GXHandler
.a23e		8e 63 06	stx $0663			stx 	GXHandler+1
.a241						_RGICommandLoop:
.a241		b1 30		lda ($30),y			lda 	(codePtr),y
.a243		c8		iny				iny
.a244		c9 d6		cmp #$d6			cmp 	#KWD_TO						; is it TO x,y
.a246		f0 53		beq $a29b			beq 	_RGI_To
.a248		c9 be		cmp #$be			cmp 	#KWD_HERE 					; do it here.
.a24a		f0 55		beq $a2a1			beq 	_RGI_Here
.a24c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a24e		f0 3d		beq $a28d			beq 	_RGI_Exit
.a250		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a252		f0 39		beq $a28d			beq 	_RGI_Exit
.a254		c9 c6		cmp #$c6			cmp 	#KWD_OUTLINE 				; solid or outline
.a256		f0 3e		beq $a296			beq 	_RGI_Frame
.a258		c9 d2		cmp #$d2			cmp 	#KWD_SOLID
.a25a		f0 33		beq $a28f			beq 	_RGI_Solid
.a25c		c9 af		cmp #$af			cmp 	#KWD_BY 					; by offset
.a25e		f0 4b		beq $a2ab			beq 	_RGI_By
.a260		c9 ba		cmp #$ba			cmp 	#KWD_FROM 					; from
.a262		f0 17		beq $a27b			beq 	_RGI_Move2
.a264		c9 b7		cmp #$b7			cmp 	#KWD_DIM 					; dim (set scale)
.a266		f0 62		beq $a2ca			beq 	_RGI_Dim
.a268		c9 b5		cmp #$b5			cmp 	#KWD_COLOUR 				; colour or Color
.a26a		f0 74		beq $a2e0			beq 	_RGI_Colour
.a26c		c9 b4		cmp #$b4			cmp 	#KWD_COLOR
.a26e		f0 70		beq $a2e0			beq 	_RGI_Colour
.a270		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a273		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a275		d0 03		bne $a27a			bne 	_RGI_Move 					; move
.a277		4c 08 a3	jmp $a308			jmp		_RGI_SpriteInstructions
.a27a						_RGI_Move:
.a27a		88		dey				dey 								; unpick get.
.a27b						_RGI_Move2:
.a27b		20 2e a3	jsr $a32e			jsr 	GCGetCoordinatePair 		; move to here
.a27e		20 55 a3	jsr $a355			jsr 	GCCopyPairToStore 			; save
.a281		5a		phy				phy
.a282		20 4b a3	jsr $a34b			jsr 	GCLoadAXY 					; load in
.a285		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a287		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a28a		7a		ply				ply
.a28b		80 b4		bra $a241			bra 	_RGICommandLoop 			; and go round
.a28d						_RGI_Exit:
.a28d		88		dey				dey 								; unpick : / EOL
.a28e		60		rts				rts
.a28f						_RGI_Solid:
.a28f		a9 02		lda #$02			lda 	#2
.a291		8d 5e 06	sta $065e			sta 	gxFillSolid
.a294		80 ab		bra $a241			bra 	_RGICommandLoop
.a296						_RGI_Frame:
.a296		9c 5e 06	stz $065e			stz 	gxFillSolid
.a299		80 a6		bra $a241			bra 	_RGICommandLoop
.a29b						_RGI_To:
.a29b		20 2e a3	jsr $a32e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a29e		20 55 a3	jsr $a355			jsr 	GCCopyPairToStore
.a2a1						_RGI_Here:
.a2a1		5a		phy				phy
.a2a2		20 4b a3	jsr $a34b			jsr 	GCLoadAXY 					; load it into AXY
.a2a5		20 05 a3	jsr $a305			jsr 	_RGICallHandler 			; go do whatever it is.
.a2a8		7a		ply				ply
.a2a9		80 96		bra $a241			bra 	_RGICommandLoop 			; and go round
.a2ab						_RGI_By:
.a2ab		20 3b a3	jsr $a33b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a2ae		18		clc				clc
.a2af		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a2b1		6d 5f 06	adc $065f			adc 	gxxPos
.a2b4		8d 5f 06	sta $065f			sta 	gxXPos
.a2b7		a5 61		lda $61				lda 	NSMantissa1+1
.a2b9		6d 60 06	adc $0660			adc 	gxxPos+1
.a2bc		8d 60 06	sta $0660			sta 	gxXPos+1
.a2bf		a5 5a		lda $5a				lda 	NSMantissa0+2
.a2c1		18		clc				clc
.a2c2		6d 61 06	adc $0661			adc 	gxYPos
.a2c5		8d 61 06	sta $0661			sta 	gxYPos
.a2c8		80 d7		bra $a2a1			bra 	_RGI_Here
.a2ca						_RGI_Dim:
.a2ca		a2 01		ldx #$01			ldx	 	#1
.a2cc		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger
.a2cf		a5 59		lda $59				lda 	NSMantissa0+1
.a2d1		c9 00		cmp #$00			cmp 	#0
.a2d3		f0 2d		beq $a302			beq 	_RGIRange
.a2d5		c9 09		cmp #$09			cmp 	#8+1
.a2d7		b0 29		bcs $a302			bcs		_RGIRange
.a2d9		3a		dec a				dec 	a
.a2da		8d 64 06	sta $0664			sta 	gxDrawScale
.a2dd		4c 41 a2	jmp $a241			jmp 	_RGICommandLoop
.a2e0						_RGI_Colour:
.a2e0		a2 01		ldx #$01			ldx 	#1 							; colour
.a2e2		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger
.a2e5		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a2e7		20 78 9e	jsr $9e78			jsr 	NSMSetZero
.a2ea		b1 30		lda ($30),y			lda 	(codePtr),y
.a2ec		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a2ee		d0 04		bne $a2f4			bne 	_RGICDefaultMode
.a2f0		c8		iny				iny
.a2f1		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger
.a2f4						_RGICDefaultMode:
.a2f4		5a		phy				phy
.a2f5		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a2f7		a6 59		ldx $59				ldx 	NSMantissa0+1
.a2f9		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a2fb		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a2fe		7a		ply				ply
.a2ff		4c 41 a2	jmp $a241			jmp 	_RGICommandLoop 			; and go round
.a302						_RGIRange:
.a302		4c fb 9f	jmp $9ffb			jmp 	RangeError
.a305						_RGICallHandler:
.a305		6c 62 06	jmp ($0662)			jmp 	(GXHandler)
.a308						_RGI_SpriteInstructions:
.a308		c9 c4		cmp #$c4			cmp 	#KWD_OFF
.a30a		f0 07		beq $a313			beq 	_RGISpriteOff
.a30c		c9 bf		cmp #$bf			cmp 	#KWD_IMAGE
.a30e		f0 13		beq $a323			beq 	_RGISetImage
.a310		4c 7a a2	jmp $a27a			jmp 	_RGI_Move
.a313						_RGISpriteOff:
.a313		5a		phy				phy
.a314		a0 01		ldy #$01			ldy 	#1
.a316		a2 00		ldx #$00			ldx 	#0
.a318						_RGIDoCommandLoop:
.a318		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a31a		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a31d		7a		ply				ply
.a31e		b0 e2		bcs $a302			bcs 	_RGIRange
.a320		4c 41 a2	jmp $a241			jmp 	_RGICommandLoop
.a323						_RGISetImage:
.a323		a2 01		ldx #$01			ldx 	#1
.a325		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger
.a328		5a		phy				phy
.a329		aa		tax				tax
.a32a		a0 00		ldy #$00			ldy 	#0
.a32c		80 ea		bra $a318			bra 	_RGIDoCommandLoop
.a32e						GCGetCoordinatePair:
.a32e		a2 01		ldx #$01			ldx 	#1
.a330		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.a333		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a336		e8		inx				inx
.a337		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.a33a		60		rts				rts
.a33b						GCSignedCoordinatePair:
.a33b		a2 01		ldx #$01			ldx 	#1
.a33d		20 02 9e	jsr $9e02			jsr 	Evaluate16BitIntegerSigned
.a340		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a343		e8		inx				inx
.a344		20 02 9e	jsr $9e02			jsr 	Evaluate16BitIntegerSigned
.a347		60		rts				rts
.a348						_GCCPRange:
.a348		4c fb 9f	jmp $9ffb			jmp 	RangeError
.a34b						GCLoadAXY:
.a34b		ad 60 06	lda $0660			lda 	gxXPos+1
.a34e		ae 5f 06	ldx $065f			ldx 	gxXPos
.a351		ac 61 06	ldy $0661			ldy 	gxYPos
.a354		60		rts				rts
.a355						GCCopyPairToStore:
.a355		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a357		8d 5f 06	sta $065f			sta 	gxXPos
.a35a		a5 61		lda $61				lda 	NSMantissa1+1
.a35c		8d 60 06	sta $0660			sta 	gxXPos+1
.a35f		a5 5a		lda $5a				lda 	NSMantissa0+2
.a361		8d 61 06	sta $0661			sta 	gxYPos
.a364		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a365						BitmapCtrl:
.a365		b1 30		lda ($30),y			lda 	(codePtr),y
.a367		c8		iny				iny
.a368		a2 01		ldx #$01			ldx 	#1
.a36a		c9 c5		cmp #$c5			cmp 	#KWD_ON
.a36c		f0 11		beq $a37f			beq 	BitmapSwitch
.a36e		ca		dex				dex
.a36f		c9 c4		cmp #$c4			cmp 	#KWD_OFF
.a371		f0 0c		beq $a37f			beq 	BitmapSwitch
.a373		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get the colour
.a376		5a		phy				phy
.a377		aa		tax				tax
.a378		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a37a		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a37d		7a		ply				ply
.a37e		60		rts				rts
.a37f						BitmapSwitch:
.a37f		5a		phy				phy
.a380		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a382		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a384		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a387		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a389		a0 00		ldy #$00			ldy 	#0
.a38b		a2 ff		ldx #$ff			ldx 	#$FF
.a38d		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a390		9c 5e 06	stz $065e			stz 	gxFillSolid
.a393		9c 5f 06	stz $065f			stz 	gxXPos
.a396		9c 60 06	stz $0660			stz 	gxXPos+1
.a399		9c 61 06	stz $0661			stz 	gxYPos
.a39c		9c 64 06	stz $0664			stz 	gxDrawScale
.a39f		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a3a1		a2 00		ldx #$00			ldx 	#0
.a3a3		a0 00		ldy #$00			ldy 	#0
.a3a5		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3a8		7a		ply				ply
.a3a9		60		rts				rts
.a3aa						SpritesCtrl:
.a3aa		b1 30		lda ($30),y			lda 	(codePtr),y
.a3ac		c8		iny				iny
.a3ad		a2 01		ldx #$01			ldx 	#1
.a3af		c9 c5		cmp #$c5			cmp 	#KWD_ON
.a3b1		f0 08		beq $a3bb			beq 	SpriteSwitch
.a3b3		ca		dex				dex
.a3b4		c9 c4		cmp #$c4			cmp 	#KWD_OFF
.a3b6		f0 03		beq $a3bb			beq 	SpriteSwitch
.a3b8		4c f6 9f	jmp $9ff6			jmp 	SyntaxError
.a3bb						SpriteSwitch:
.a3bb		5a		phy				phy
.a3bc		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a3be		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a3c0		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3c3		7a		ply				ply
.a3c4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a3c5						GfxCommand:
.a3c5		a2 00		ldx #$00			ldx 	#0
.a3c7		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; command
.a3ca		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a3cd		e8		inx				inx
.a3ce		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; X
.a3d1		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a3d4		e8		inx				inx
.a3d5		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; Y
.a3d8		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a3da		4a		lsr a				lsr 	a
.a3db		d0 12		bne $a3ef			bne 	_GfxError
.a3dd		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a3df		b0 0e		bcs $a3ef			bcs 	_GfxError 					; bit 7 should have been zero
.a3e1		5a		phy				phy 								; save pos
.a3e2		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a3e4		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3e6		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3e8		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3eb		b0 02		bcs $a3ef			bcs 	_GfxError
.a3ed		7a		ply				ply 								; restore pos and exit.
.a3ee		60		rts				rts
.a3ef						_GfxError:
.a3ef		4c fb 9f	jmp $9ffb			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a3f2						UnaryHit:
.a3f2		fa		plx				plx
.a3f3		a9 36		lda #$36			lda 	#zTemp0
.a3f5		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a3f8		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a3fb		e8		inx				inx
.a3fc		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a3ff		20 14 8f	jsr $8f14			jsr		CheckRightBracket
.a402		ca		dex				dex 								; fix back up again.
.a403		da		phx				phx 								; save X/Y
.a404		5a		phy				phy
.a405		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a407		b5 58		lda $58,x			lda 	NSMantissa0,x
.a409		aa		tax				tax
.a40a		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a40c		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; calculate result
.a40f		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a410		7a		ply				ply 								; restore XY
.a411		fa		plx				plx
.a412		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte 					; return the hit result
.a415		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a416						PaletteCommand:
.a416		a2 00		ldx #$00			ldx 	#0
.a418		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; colour
.a41b		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a41e		e8		inx				inx
.a41f		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; r
.a422		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a425		e8		inx				inx
.a426		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; g
.a429		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a42c		e8		inx				inx
.a42d		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; b
.a430		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a432		85 36		sta $36				sta 	zTemp0
.a434		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a436		85 37		sta $37				sta 	zTemp0+1
.a438		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a43a		26 37		rol $37				rol	 	zTemp0+1
.a43c		06 36		asl $36				asl 	zTemp0
.a43e		26 37		rol $37				rol	 	zTemp0+1
.a440		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a442		85 01		sta $01				sta 	1
.a444		5a		phy				phy
.a445		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a447		92 36		sta ($36)			sta 	(zTemp0)
.a449		a0 01		ldy #$01			ldy 	#1
.a44b		a5 5a		lda $5a				lda 	NSMantissa0+2
.a44d		91 36		sta ($36),y			sta 	(zTemp0),y
.a44f		a5 59		lda $59				lda 	NSMantissa0+1
.a451		c8		iny				iny
.a452		91 36		sta ($36),y			sta 	(zTemp0),y
.a454		7a		ply				ply
.a455		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a456						XLoadCommand:
.a456		20 1a 8a	jsr $8a1a			jsr 	NewProgram
.a459		20 28 83	jsr $8328			jsr 	BackLoadProgram
.a45c		4c e7 83	jmp $83e7			jmp 	WarmStart
.a45f						XGoCommand:
.a45f		20 1a 8a	jsr $8a1a			jsr 	NewProgram
.a462		20 28 83	jsr $8328			jsr 	BackLoadProgram
.a465		4c 98 8b	jmp $8b98			jmp 	CommandRun

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a468						UnaryEvent:
.a468		fa		plx				plx
.a469		20 04 a5	jsr $a504			jsr 	TimerToStackX 				; timer in +0
.a46c		e8		inx				inx  								; put reference into +1
.a46d		20 7b 98	jsr $987b			jsr 	EvaluateTerm
.a470		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a472		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a474		d0 4c		bne $a4c2			bne 	_UEType
.a476		e8		inx				inx 								; put the step in +2
.a477		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.a47a		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger
.a47d		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.a480		ca		dex				dex
.a481		ca		dex				dex
.a482		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a484		85 36		sta $36				sta 	zTemp0
.a486		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a488		85 37		sta $37				sta 	zTemp0+1
.a48a		5a		phy				phy
.a48b		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a48d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a48f		30 2d		bmi $a4be			bmi 	_UEFalse 					; exit if signed.
.a491		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a493		b5 58		lda $58,x			lda 	NSMantissa0,x
.a495		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a497		c8		iny				iny
.a498		b5 60		lda $60,x			lda 	NSMantissa1,x
.a49a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a49c		c8		iny				iny
.a49d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a49f		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a4a1		90 1b		bcc $a4be			bcc 	_UEFalse 					; no, return FALSE.
.a4a3		18		clc				clc
.a4a4		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a4a6		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4a8		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a4aa		91 36		sta ($36),y			sta 	(zTemp0),y
.a4ac		c8		iny				iny
.a4ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4af		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a4b1		91 36		sta ($36),y			sta 	(zTemp0),y
.a4b3		c8		iny				iny
.a4b4		b5 68		lda $68,x			lda 	NSMantissa2,x
.a4b6		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a4b8		91 36		sta ($36),y			sta 	(zTemp0),y
.a4ba		7a		ply				ply
.a4bb		4c 9a 8f	jmp $8f9a			jmp 	ReturnTrue
.a4be						_UEFalse:
.a4be		7a		ply				ply 								; restore Y
.a4bf		4c a5 8f	jmp $8fa5			jmp 	ReturnFalse 				; and return False
.a4c2						_UEType:
.a4c2		4c 00 a0	jmp $a000			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a4c5						UnaryJoyX:
.a4c5		18		clc				clc
.a4c6		80 01		bra $a4c9			bra 	JoyMain
.a4c8						UnaryJoyY:
.a4c8		38		sec				sec
.a4c9						JoyMain:
.a4c9		fa		plx				plx 								; get pos
.a4ca		08		php				php 								; save carry (set for Y)
.a4cb		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4ce		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.a4d1		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a4d4		28		plp				plp
.a4d5		90 02		bcc $a4d9			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a4d7		4a		lsr a				lsr 	a
.a4d8		4a		lsr a				lsr 	a
.a4d9						_JMNoShift:
.a4d9		4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a4da		b0 0a		bcs $a4e6			bcs 	_JMIsRight
.a4dc		4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a4dd		b0 04		bcs $a4e3			bcs 	_JMIsLeft
.a4df		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; zero result
.a4e2		60		rts				rts
.a4e3						_JMIsLeft:
.a4e3		4c 9a 8f	jmp $8f9a			jmp 	ReturnTrue
.a4e6						_JMIsRight:
.a4e6		a9 01		lda #$01			lda 	#1
.a4e8		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.a4eb		60		rts				rts
.a4ec						UnaryJoyB:
.a4ec		fa		plx				plx 								; get pos
.a4ed		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4f0		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.a4f3		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a4f6		4a		lsr a				lsr 	a
.a4f7		4a		lsr a				lsr 	a
.a4f8		4a		lsr a				lsr 	a
.a4f9		4a		lsr a				lsr 	a
.a4fa		29 01		and #$01			and 	#1
.a4fc		20 7a 9e	jsr $9e7a			jsr 	NSMSetByte
.a4ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a500						UnaryTimer:
.a500		fa		plx				plx
.a501		20 14 8f	jsr $8f14			jsr 	CheckRightBracket
.a504						TimerToStackX:
.a504		20 78 9e	jsr $9e78			jsr 	NSMSetZero 					; zero result
.a507		64 01		stz $01				stz 	1 							; access I/O
.a509		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a50c		95 58		sta $58,x			sta 	NSMantissa0,x
.a50e		ad 5a d6	lda $d65a			lda 	$D65A
.a511		95 60		sta $60,x			sta 	NSMantissa1,x
.a513		ad 5b d6	lda $d65b			lda 	$D65B
.a516		95 68		sta $68,x			sta 	NSMantissa2,x
.a518		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a519						MemoryDeleteLine:
.a519		20 38 a5	jsr $a538			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a51c		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a51e		a8		tay				tay
.a51f						_MDDLLoop:
.a51f		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a521		92 30		sta ($30)			sta 	(codePtr)
.a523		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a525		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a527		d0 07		bne $a530			bne 	_MDLDLNext
.a529		a5 31		lda $31				lda 	codePtr+1
.a52b		c5 3b		cmp $3b				cmp 	zTemp2+1
.a52d		d0 01		bne $a530			bne 	_MDLDLNext
.a52f						_MDDLExit:
.a52f		60		rts				rts
.a530						_MDLDLNext:
.a530		e6 30		inc $30				inc 	codePtr						; next byte
.a532		d0 eb		bne $a51f			bne 	_MDDLLoop
.a534		e6 31		inc $31				inc 	codePtr+1
.a536		80 e7		bra $a51f			bra 	_MDDLLoop
.a538						IMemoryFindEnd:
.a538		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a53a		85 3a		sta $3a				sta 	0+zTemp2
.a53c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a53e		85 3b		sta $3b				sta 	1+zTemp2
.a540						_MDLFELoop:
.a540		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a542		f0 0b		beq $a54f			beq 	_MDLFEExit
.a544		18		clc				clc
.a545		65 3a		adc $3a				adc 	zTemp2
.a547		85 3a		sta $3a				sta 	zTemp2
.a549		90 f5		bcc $a540			bcc 	_MDLFELoop
.a54b		e6 3b		inc $3b				inc 	zTemp2+1
.a54d		80 f1		bra $a540			bra 	_MDLFELoop
.a54f						_MDLFEExit:
.a54f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a550						MemoryInsertLine:
.a550		08		php				php
.a551		20 38 a5	jsr $a538			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a554		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a556		1a		inc a				inc 	a
.a557		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a559		b0 36		bcs $a591			bcs 	_MDLIError 					; no, fail.
.a55b		28		plp				plp 								; do at a specific point or the end ?
.a55c		90 08		bcc $a566			bcc 	_MDLIFound 					; if specific point already set.
.a55e		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a560		85 30		sta $30				sta 	codePtr 					; end.
.a562		a5 3b		lda $3b				lda 	zTemp2+1
.a564		85 31		sta $31				sta 	codePtr+1
.a566						_MDLIFound:
.a566		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a569		a8		tay				tay
.a56a						_MDLIInsert:
.a56a		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a56c		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a56e		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a570		c5 3a		cmp $3a				cmp 	zTemp2
.a572		d0 06		bne $a57a			bne 	_MDLINext
.a574		a5 31		lda $31				lda 	codePtr+1
.a576		c5 3b		cmp $3b				cmp 	zTemp2+1
.a578		f0 0a		beq $a584			beq 	_MDLIHaveSpace
.a57a						_MDLINext:
.a57a		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a57c		d0 02		bne $a580			bne 	_MDLINoBorrow
.a57e		c6 3b		dec $3b				dec 	zTemp2+1
.a580						_MDLINoBorrow:
.a580		c6 3a		dec $3a				dec 	zTemp2
.a582		80 e6		bra $a56a			bra 	_MDLIInsert
.a584						_MDLIHaveSpace:
.a584		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a587		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a588						_MDLICopy:
.a588		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a58b		91 30		sta ($30),y			sta 	(codePtr),y
.a58d		88		dey				dey
.a58e		10 f8		bpl $a588			bpl 	_MDLICopy
.a590		60		rts				rts
.a591						_MDLIError:
.a591		a9 06		lda #$06		lda	#6
.a593		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.a596						MDLAppendLine:
.a596		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a598		85 36		sta $36				sta 	zTemp0
.a59a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a59c		85 38		sta $38				sta 	0+zTemp1
.a59e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5a0		85 39		sta $39				sta 	1+zTemp1
.a5a2		b2 38		lda ($38)			lda 	(zTemp1)
.a5a4		d0 0a		bne $a5b0			bne 	_MDLANoInitialise
.a5a6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5a8		8d 65 06	sta $0665			sta 	0+AppendPointer
.a5ab		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5ad		8d 66 06	sta $0666			sta 	1+AppendPointer
.a5b0						_MDLANoInitialise:
.a5b0		18		clc				clc
.a5b1		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a5b4		85 38		sta $38				sta 	zTemp1
.a5b6		72 36		adc ($36)			adc 	(zTemp0)
.a5b8		8d 65 06	sta $0665			sta 	AppendPointer
.a5bb		ad 66 06	lda $0666			lda 	AppendPointer+1
.a5be		85 39		sta $39				sta 	zTemp1+1
.a5c0		69 00		adc #$00			adc 	#0
.a5c2		8d 66 06	sta $0666			sta 	AppendPointer+1
.a5c5		a0 00		ldy #$00			ldy 	#0
.a5c7						_MDLACopy:
.a5c7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a5c9		91 38		sta ($38),y			sta 	(zTemp1),y
.a5cb		c8		iny				iny
.a5cc		98		tya				tya
.a5cd		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a5cf		d0 f6		bne $a5c7			bne 	_MDLACopy
.a5d1		a9 00		lda #$00			lda 	#0 							; end of program.
.a5d3		91 38		sta ($38),y			sta 	(zTemp1),y
.a5d5		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a5d6						MemoryNew:
.a5d6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5d8		85 30		sta $30				sta 	codePtr
.a5da		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5dc		85 31		sta $31				sta 	codePtr+1
.a5de		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a5e0		92 30		sta ($30)			sta 	(codePtr)
.a5e2		60		rts				rts
.a5e3						MemoryInline:
.a5e3		98		tya				tya 								; put address into stack,x
.a5e4		18		clc				clc  								; get the offset, add codePtr
.a5e5		65 30		adc $30				adc 	codePtr
.a5e7		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a5e9		a5 31		lda $31				lda 	codePtr+1
.a5eb		69 00		adc #$00			adc 	#0
.a5ed		95 60		sta $60,x			sta 	NSMantissa1,x
.a5ef		74 68		stz $68,x			stz 	NSMantissa2,x
.a5f1		74 70		stz $70,x			stz 	NSMantissa3,x
.a5f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a5f4						MemorySearch:
.a5f4		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a5f6		86 37		stx $37				stx 	zTemp0+1
.a5f8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5fa		85 30		sta $30				sta 	codePtr
.a5fc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5fe		85 31		sta $31				sta 	codePtr+1
.a600						_MTAXLoop:
.a600		b2 30		lda ($30)			lda 	(codePtr)
.a602		18		clc				clc
.a603		f0 21		beq $a626			beq 	_MTAXExit 					; reached end, exit with CC.
.a605		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a607		b1 30		lda ($30),y			lda 	(codePtr),y
.a609		38		sec				sec
.a60a		e5 36		sbc $36				sbc 	zTemp0
.a60c		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a60e		c8		iny				iny 								; do the MSB
.a60f		b1 30		lda ($30),y			lda 	(codePtr),y
.a611		e5 37		sbc $37				sbc 	zTemp0+1
.a613		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a615		f0 0f		beq $a626			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a617		b0 0d		bcs $a626			bcs 	_MTAXExit 					; current < required exit
.a619		18		clc				clc
.a61a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a61c		65 30		adc $30				adc 	codePtr
.a61e		85 30		sta $30				sta 	codePtr
.a620		90 02		bcc $a624			bcc 	_CREExit
.a622		e6 31		inc $31				inc 	codePtr+1 					; carry
.a624						_CREExit:
.a624		80 da		bra $a600			bra 	_MTAXLoop
.a626						_MTAXExit:
.a626		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a627						UpdateFont:
.a627		a5 01		lda $01				lda 	1 							; save position
.a629		48		pha				pha
.a62a		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a62c		85 01		sta $01				sta 	1
.a62e		a9 55		lda #$55			lda 	#((FontBinary) & $FF)
.a630		85 36		sta $36				sta 	0+zTemp0
.a632		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a634		85 37		sta $37				sta 	1+zTemp0
.a636		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a638		85 38		sta $38				sta 	0+zTemp1
.a63a		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a63c		85 39		sta $39				sta 	1+zTemp1
.a63e						_UFCopy1:
.a63e		a0 00		ldy #$00			ldy 	#0
.a640						_UFCopy2:
.a640		b1 36		lda ($36),y			lda 	(zTemp0),y
.a642		91 38		sta ($38),y			sta 	(zTemp1),y
.a644		c8		iny				iny
.a645		d0 f9		bne $a640			bne 	_UFCopy2
.a647		e6 37		inc $37				inc 	zTemp0+1
.a649		e6 39		inc $39				inc 	zTemp1+1
.a64b		a5 39		lda $39				lda 	zTemp1+1
.a64d		c9 c8		cmp #$c8			cmp 	#$C8
.a64f		d0 ed		bne $a63e			bne 	_UFCopy1
.a651		68		pla				pla 								; restore.
.a652		85 01		sta $01				sta 	1
.a654		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a655						FontBinary:
>a655		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a65d		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a66d		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a67d		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a68d		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a69d		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a6ad		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a6bd		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a6cd		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a6dd		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a6ed		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a6fd		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a70d		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a71d		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a72d		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a73d		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a74d		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a75d		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a76d		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a77d		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a78d		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a79d		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a7ad		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a7bd		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a7cd		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a7dd		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a7ed		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a7fd		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a80d		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a81d		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a82d		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a83d		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a84d		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a85d		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a86d		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a87d		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a88d		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a89d		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a8ad		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a8bd		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a8cd		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a8dd		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a8ed		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a8fd		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a90d		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a91d		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a92d		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a93d		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a94d		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a95d		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>a96d		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>a97d		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>a98d		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>a99d		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>a9ad		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a9bd		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>a9cd		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>a9dd		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>a9ed		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>a9fd		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aa0d		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aa1d		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aa2d		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aa3d		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aa4d		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aa5d		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aa6d		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aa7d		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aa8d		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>aa9d		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aaad		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>aabd		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>aacd		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>aadd		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>aaed		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>aafd		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ab0d		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ab1d		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ab2d		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ab3d		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ab4d		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ab5d		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ab6d		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ab7d		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ab8d		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ab9d		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>abad		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>abbd		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>abcd		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>abdd		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>abed		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>abfd		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ac0d		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ac1d		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ac2d		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ac3d		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ac4d		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ac5d		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ac6d		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ac7d		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ac8d		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ac9d		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>acad		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>acbd		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>accd		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>acdd		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>aced		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>acfd		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ad0d		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>ad1d		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ad2d		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ad3d		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ad4d		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ad5d		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ad6d		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ad7d		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ad8d		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ad9d		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>adad		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>adbd		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>adcd		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>addd		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>aded		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>adfd		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>ae0d		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>ae1d		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>ae2d		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>ae3d		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>ae4d		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.ae55						PingCommand:
.ae55		5a		phy				phy 								; save pos
.ae56		a9 01		lda #$01			lda 	#1 						; push channel.
.ae58		48		pha				pha
.ae59		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.ae5b		a2 03		ldx #$03			ldx 	#3 						; length
.ae5d		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae5f		80 24		bra $ae85			bra 	SoundEffectCommand
.ae61						ZapCommand:
.ae61		5a		phy				phy 								; save pos
.ae62		a9 01		lda #$01			lda 	#1 						; push channel.
.ae64		48		pha				pha
.ae65		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.ae67		a2 05		ldx #$05			ldx 	#5 						; length
.ae69		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.ae6b		80 18		bra $ae85			bra 	SoundEffectCommand
.ae6d						ShootCommand:
.ae6d		5a		phy				phy 								; save pos
.ae6e		a9 03		lda #$03			lda 	#3 						; push channel.
.ae70		48		pha				pha
.ae71		a9 20		lda #$20			lda 	#32 						; pitch LSB
.ae73		a2 02		ldx #$02			ldx 	#2 						; length
.ae75		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae77		80 0c		bra $ae85			bra 	SoundEffectCommand
.ae79						Explode:
.ae79		5a		phy				phy 								; save pos
.ae7a		a9 03		lda #$03			lda 	#3 						; push channel.
.ae7c		48		pha				pha
.ae7d		a9 50		lda #$50			lda 	#80 						; pitch LSB
.ae7f		a2 05		ldx #$05			ldx 	#5 						; length
.ae81		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae83		80 00		bra $ae85			bra 	SoundEffectCommand
.ae85						SoundEffectCommand:
.ae85		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.ae88		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.ae8b		a9 0f		lda #$0f			lda 	#15
.ae8d		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.ae90		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.ae93		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.ae96		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.ae99		68		pla				pla
.ae9a		09 10		ora #$10			ora 	#$10  						; execute command $11
.ae9c		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.ae9e		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.aea0		20 49 80	jsr $8049			jsr 	SNDCommand
.aea3		7a		ply				ply
.aea4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.aea5						UnaryPlaying:
.aea5		fa		plx				plx
.aea6		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; get channel #
.aea9		48		pha				pha
.aeaa		20 14 8f	jsr $8f14			jsr		CheckRightBracket
.aead		68		pla				pla
.aeae		c9 04		cmp #$04			cmp 	#4
.aeb0		b0 0c		bcs $aebe			bcs 	_UPNotPlaying
.aeb2		09 20		ora #$20			ora 	#$20 						; query playing ?
.aeb4		20 49 80	jsr $8049			jsr 	SNDCommand
.aeb7		c9 00		cmp #$00			cmp 	#0
.aeb9		f0 03		beq $aebe			beq 	_UPNotPlaying
.aebb		4c 9a 8f	jmp $8f9a			jmp 	ReturnTrue
.aebe						_UPNotPlaying:
.aebe		4c a5 8f	jmp $8fa5			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.aec1						SoundCommand:
.aec1		b1 30		lda ($30),y			lda 	(codePtr),y
.aec3		c9 c4		cmp #$c4			cmp 	#KWD_OFF 					; SOUND OFF ?
.aec5		d0 09		bne $aed0			bne 	_SNDMain
.aec7		c8		iny				iny 								; skip OFF
.aec8		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.aeca		5a		phy				phy
.aecb		20 49 80	jsr $8049			jsr 	SNDCommand
.aece		7a		ply				ply
.aecf		60		rts				rts
.aed0						_SNDMain:
.aed0		a2 00		ldx #$00			ldx 	#0
.aed2		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; channel
.aed5		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.aed7		b0 4b		bcs $af24			bcs 	_SndError
.aed9		e8		inx				inx 								; do the rest in slot 1.
.aeda		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.aedd		20 f8 9d	jsr $9df8			jsr 	Evaluate16BitInteger 		; Pitch
.aee0		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.aee2		c9 10		cmp #$10			cmp 	#16
.aee4		b0 3e		bcs $af24			bcs 	_SndError
.aee6		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.aee9		b5 58		lda $58,x			lda 	NSMantissa0,x
.aeeb		8d 67 06	sta $0667			sta 	SoundCommandBlock
.aeee		20 1c 8f	jsr $8f1c			jsr 	CheckComma
.aef1		20 13 9e	jsr $9e13			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.aef4		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.aef7		a9 0f		lda #$0f			lda 	#15
.aef9		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.aefc		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.aeff		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.af02		b1 30		lda ($30),y			lda 	(codePtr),y
.af04		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.af06		d0 0e		bne $af16			bne 	_SNDPlay
.af08		c8		iny				iny
.af09		20 02 9e	jsr $9e02			jsr 	Evaluate16BitIntegerSigned 	; Slide
.af0c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.af0e		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.af11		b5 60		lda $60,x			lda 	NSMantissa1,x
.af13		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.af16						_SNDPlay:
.af16		5a		phy				phy
.af17		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.af19		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.af1b		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af1d		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af1f		20 49 80	jsr $8049			jsr 	SNDCommand
.af22		7a		ply				ply
.af23		60		rts				rts
.af24						_SndError:
.af24		4c fb 9f	jmp $9ffb			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.af27						StackPushByte:
.af27		48		pha				pha 								; save byte on stack
.af28		a5 34		lda $34				lda 	BasicStack 					; decrement basic stack pointer
.af2a		d0 08		bne $af34			bne 	_SPBNoBorrow
.af2c		c6 35		dec $35				dec 	BasicStack+1 				; borrow
.af2e		a5 35		lda $35				lda 	BasicStack+1 				; check range.
.af30		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af32		90 06		bcc $af3a			bcc 	_SPBMemory
.af34						_SPBNoBorrow:
.af34		c6 34		dec $34				dec 	BasicStack
.af36		68		pla				pla 								; get back and write
.af37		92 34		sta ($34)			sta 	(BasicStack)
.af39		60		rts				rts
.af3a						_SPBMemory:
.af3a		a9 12		lda #$12		lda	#18
.af3c		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.af3f						StackPopByte:
.af3f		b2 34		lda ($34)			lda 	(BasicStack) 				; bump the stack pointer.
.af41		e6 34		inc $34				inc 	BasicStack
.af43		d0 02		bne $af47			bne 	_SPBNoCarry
.af45		e6 35		inc $35				inc 	BasicStack+1
.af47						_SPBNoCarry:
.af47		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.af48						StackOpen:
.af48		48		pha				pha 								; save frame byte
.af49		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.af4b		0a		asl a				asl 	a 							; claim twice this for storage
.af4c		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.af4e		38		sec				sec 								; so basically subtracting from
.af4f		65 34		adc $34				adc 	basicStack 	 				; basicStack
.af51		85 34		sta $34				sta 	basicStack
.af53		b0 09		bcs $af5e			bcs 	_SONoBorrow
>af55		db						.byte 	$DB 						; causes a break in the emulator
.af56		c6 35		dec $35				dec 	basicStack+1
.af58		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.af5a		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af5c		90 04		bcc $af62			bcc 	_SOMemory
.af5e						_SONoBorrow:
.af5e		68		pla				pla 								; get marker back and write at TOS
.af5f		92 34		sta ($34)			sta 	(basicStack)
.af61		60		rts				rts
.af62						_SOMemory:
.af62		a9 12		lda #$12		lda	#18
.af64		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.af67						StackClose:
.af67		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.af69		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.af6b		0a		asl a				asl 	a 							; claim twice this.
.af6c		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.af6e		85 34		sta $34				sta 	basicStack
.af70		90 02		bcc $af74			bcc 	_SCExit
.af72		e6 35		inc $35				inc 	basicStack+1
.af74						_SCExit:
.af74		60		rts				rts
.af75						StackCheckFrame:
.af75		48		pha				pha
.af76						_StackRemoveLocals:
.af76		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.af78		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.af7a		b0 05		bcs $af81			bcs 	_SCNoLocal
.af7c		20 c9 89	jsr $89c9			jsr 	LocalPopValue 				; restore the local value
.af7f		80 f5		bra $af76			bra 	_StackRemoveLocals 			; gr round again
.af81						_SCNoLocal:
.af81		68		pla				pla 								; get the frame check.
.af82		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.af84		29 f0		and #$f0			and 	#$F0 						; check type bits
.af86		d0 01		bne $af89			bne 	_SCFError 					; different, we have structures mixed up
.af88		60		rts				rts
.af89						_SCFError:
.af89		8a		txa				txa 								; report error X
.af8a		4c 2d 8f	jmp $8f2d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.af8d						STKSaveCodePosition:
.af8d		5a		phy				phy
.af8e		98		tya				tya 								; save Y
.af8f		a0 05		ldy #$05			ldy 	#5
.af91		91 34		sta ($34),y			sta 	(basicStack),y
.af93		88		dey				dey 								; save Code Pointer
.af94						_STKSaveLoop:
.af94		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.af97		91 34		sta ($34),y			sta 	(basicStack),y
.af99		88		dey				dey
.af9a		d0 f8		bne $af94			bne 	_STKSaveLoop
.af9c		7a		ply				ply
.af9d		60		rts				rts
.af9e						STKLoadCodePosition:
.af9e		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.afa0						_STKLoadLoop:
.afa0		b1 34		lda ($34),y			lda 	(basicStack),y
.afa2		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.afa5		c8		iny				iny
.afa6		c0 05		cpy #$05			cpy 	#5
.afa8		d0 f6		bne $afa0			bne 	_STKLoadLoop
.afaa		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.afac		a8		tay				tay
.afad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.afae						StackReset:
.afae		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.afb0		85 34		sta $34				sta 	0+basicStack
.afb2		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.afb4		85 35		sta $35				sta 	1+basicStack
.afb6		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.afb8		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.afba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.afbb						StringConcrete:
.afbb		5a		phy				phy 								; save position on stack
.afbc		20 67 9a	jsr $9a67			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afbf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.afc1		85 38		sta $38				sta 	zTemp1
.afc3		b5 60		lda $60,x			lda 	NSMantissa1,x
.afc5		85 39		sta $39				sta 	zTemp1+1
.afc7		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.afc9						_SALength:
.afc9		c8		iny				iny
.afca		b1 38		lda ($38),y			lda 	(zTemp1),y
.afcc		d0 fb		bne $afc9			bne 	_SALength
.afce		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.afd0		b0 3d		bcs $b00f			bcs 	_SALengthError
.afd2		98		tya				tya 				 				; length of the new string
.afd3		18		clc				clc
.afd4		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.afd6		90 02		bcc $afda			bcc 	_SAHaveLength
.afd8		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.afda						_SAHaveLength:
.afda		48		pha				pha 								; save length.
.afdb		38		sec				sec
.afdc		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.afde		6d 0e 04	adc $040e			adc 	StringMemory
.afe1		8d 0e 04	sta $040e			sta 	StringMemory
.afe4		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.afe6		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.afe8		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.afea		6d 0f 04	adc $040f			adc 	StringMemory+1
.afed		8d 0f 04	sta $040f			sta 	StringMemory+1
.aff0		85 3b		sta $3b				sta 	zTemp2+1
.aff2		95 60		sta $60,x			sta 	NSMantissa1,x
.aff4		68		pla				pla 								; save length-3 (chars allowed) in first byte
.aff5		38		sec				sec
.aff6		e9 03		sbc #$03			sbc 	#3
.aff8		92 3a		sta ($3a)			sta 	(zTemp2)
.affa		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.affc		a0 01		ldy #$01			ldy 	#1
.affe		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b000						_SACopyNewString:
.b000		a0 00		ldy #$00			ldy 	#0
.b002						_SACopyNSLoop:
.b002		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b004		c8		iny				iny 								; write two on in string storage
.b005		c8		iny				iny
.b006		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b008		88		dey				dey 								; this makes it one one.
.b009		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b00b		d0 f5		bne $b002			bne 	_SACopyNSLoop
.b00d		7a		ply				ply
.b00e		60		rts				rts
.b00f						_SALengthError:
.b00f		a9 09		lda #$09		lda	#9
.b011		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b014						StringSystemInitialise:
.b014		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b016		8d 0e 04	sta $040e			sta 	0+StringMemory
.b019		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b01b		8d 0f 04	sta $040f			sta 	1+StringMemory
.b01e		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b021		60		rts				rts
.b022						StringSpaceInitialise:
.b022		20 67 9a	jsr $9a67			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b025		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b027		8d 10 04	sta $0410			sta 	StringInitialised
.b02a		ad 0e 04	lda $040e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b02d		8d 11 04	sta $0411			sta 	StringTempPointer 			; so temporary string space is allocated below that.
.b030		ad 0f 04	lda $040f			lda 	StringMemory+1
.b033		3a		dec a				dec 	a
.b034		8d 12 04	sta $0412			sta 	StringTempPointer+1
.b037		60		rts				rts
.b038						StringTempAllocate:
.b038		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b03a		b0 30		bcs $b06c			bcs 	_STALength
.b03c		2c 10 04	bit $0410			bit 	StringInitialised 			; already initialised
.b03f		30 05		bmi $b046			bmi 	_STAAllocate
.b041		48		pha				pha 								; save value to subtract.
.b042		20 22 b0	jsr $b022			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b045		68		pla				pla 								; restore it
.b046						_STAAllocate:
.b046		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b048		18		clc				clc  								; deliberate allows one more
.b049		6d 11 04	adc $0411			adc 	StringTempPointer 			; subtract from temp pointer
.b04c		8d 11 04	sta $0411			sta 	StringTempPointer
.b04f		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b051		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b053		ad 12 04	lda $0412			lda 	StringTempPointer+1
.b056		69 ff		adc #$ff			adc 	#$FF
.b058		8d 12 04	sta $0412			sta 	StringTempPointer+1
.b05b		85 3d		sta $3d				sta 	zsTemp+1
.b05d		95 60		sta $60,x			sta 	NSMantissa1,x
.b05f		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b061		74 70		stz $70,x			stz 	NSMantissa3,x
.b063		a9 10		lda #$10			lda 	#NSTString
.b065		95 50		sta $50,x			sta 	NSStatus,x
.b067		a9 00		lda #$00			lda 	#0 							; clear the target string
.b069		92 3c		sta ($3c)			sta 	(zsTemp)
.b06b		60		rts				rts
.b06c						_STALength:
.b06c		a9 09		lda #$09		lda	#9
.b06e		4c 2d 8f	jmp $8f2d		jmp	ErrorHandler
.b071						StringTempWrite:
.b071		48		pha				pha
.b072		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b074		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b076		d0 02		bne $b07a			bne 	_STWNoCarry
.b078		e6 3d		inc $3d				inc 	zsTemp+1
.b07a						_STWNoCarry:
.b07a		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b07c		92 3c		sta ($3c)			sta 	(zsTemp)
.b07e		68		pla				pla
.b07f		60		rts				rts

;******  Return to file: _basic.asm

.b080						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=10						CLIConstant = CONLightBlue
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 90 a1	jsr $a190			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 4d a1	jsr $a14d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackspace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					EXTClearScreenCode:
.c14d	a14d	a9 02		lda #$02			lda 	#2 							; select text page
.c14f	a14f	85 01		sta $01				sta 	1
.c151	a151	a9 20		lda #$20			lda		#32 						; fill with space
.c153	a153	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c156	a156	e6 01		inc $01				inc 	1 							; select colour page
.c158	a158	ad 6f 06	lda $066f			lda 	EXTTextColour
.c15b	a15b	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c15e	a15e	80 22		bra $a182			bra 	EXTHomeCursor
.c160	a160					_EXTCSFill:
.c160	a160	aa		tax				tax
.c161	a161	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c163	a163	85 40		sta $40				sta 	EXTAddress
.c165	a165	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c167	a167	85 41		sta $41				sta 	EXTAddress+1
.c169	a169					_EXTCSFill1:
.c169	a169	a0 00		ldy #$00			ldy 	#0
.c16b	a16b	8a		txa				txa
.c16c	a16c					_EXTCSFill2:
.c16c	a16c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c16e	a16e	c8		iny				iny
.c16f	a16f	d0 fb		bne $a16c			bne 	_EXTCSFill2
.c171	a171	e6 41		inc $41				inc 	EXTAddress+1
.c173	a173	a5 41		lda $41				lda 	EXTAddress+1
.c175	a175	c9 d2		cmp #$d2			cmp 	#$D2
.c177	a177	d0 f0		bne $a169			bne 	_EXTCSFill1
.c179	a179	8a		txa				txa
.c17a	a17a					_EXTCSFill3:
.c17a	a17a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c17c	a17c	c8		iny				iny
.c17d	a17d	c0 c0		cpy #$c0			cpy 	#$C0
.c17f	a17f	d0 f9		bne $a17a			bne 	_EXTCSFill3
.c181	a181	60		rts				rts
.c182	a182					EXTHomeCursor:
.c182	a182	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c185	a185	9c 6e 06	stz $066e			stz 	EXTColumn
.c188	a188	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c18a	a18a	85 40		sta $40				sta 	EXTAddress
.c18c	a18c	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c18e	a18e	85 41		sta $41				sta 	EXTAddress+1
.c190	a190					EXTSetHardwareCursor:
.c190	a190	64 01		stz $01				stz 	1 							; I/O Page zero
.c192	a192	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c194	a194	8d 10 d0	sta $d010			sta 	$D010
.c197	a197	a9 b3		lda #$b3			lda 	#179
.c199	a199	8d 12 d0	sta $d012			sta 	$D012
.c19c	a19c	ad 6e 06	lda $066e			lda 	EXTColumn
.c19f	a19f	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1a2	a1a2	9c 15 d0	stz $d015			stz 	$D015
.c1a5	a1a5	ad 6d 06	lda $066d			lda 	EXTRow
.c1a8	a1a8	8d 16 d0	sta $d016			sta 	$D016
.c1ab	a1ab	9c 17 d0	stz $d017			stz 	$D017
.c1ae	a1ae	60		rts				rts
.c1af	a1af					Export_EXTInputLine:
.c1af	a1af	48		pha				pha
.c1b0	a1b0	da		phx				phx
.c1b1	a1b1	5a		phy				phy
.c1b2	a1b2	a5 01		lda $01				lda 	1 							; save I/O page
.c1b4	a1b4	48		pha				pha
.c1b5	a1b5					_EILLoop:
.c1b5	a1b5	20 cd a2	jsr $a2cd			jsr 	PagedInputSingleCharacter
.c1b8	a1b8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1ba	a1ba	f0 44		beq $a200			beq 	_EILExit
.c1bc	a1bc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1be	a1be	f0 2a		beq $a1ea			beq 	_EILDelete
.c1c0	a1c0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1c2	a1c2	f0 1c		beq $a1e0			beq 	_EILBackspace
.c1c4	a1c4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1c6	a1c6	90 12		bcc $a1da			bcc 	_EILPrintLoop
.c1c8	a1c8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ca	a1ca	b0 0e		bcs $a1da			bcs 	_EILPrintLoop
.c1cc	a1cc	48		pha				pha 								; save character
.c1cd	a1cd	a9 02		lda #$02			lda 	#2  						; insert a space
.c1cf	a1cf	85 01		sta $01				sta 	1
.c1d1	a1d1	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in text screen
.c1d4	a1d4	e6 01		inc $01				inc 	1
.c1d6	a1d6	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in colour screen
.c1d9	a1d9	68		pla				pla 								; get character back.
.c1da	a1da					_EILPrintLoop:
.c1da	a1da	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1dd	a1dd	80 d6		bra $a1b5			bra 	_EILLoop
.c1df	a1df	60		rts				rts
.c1e0	a1e0					_EILBackspace:
.c1e0	a1e0	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c1e3	a1e3	f0 d0		beq $a1b5			beq 	_EILLoop
.c1e5	a1e5	a9 02		lda #$02			lda 	#2 							; move cursor left
.c1e7	a1e7	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1ea	a1ea					_EILDelete
.c1ea	a1ea	a9 02		lda #$02			lda 	#2 							; text block
.c1ec	a1ec	85 01		sta $01				sta 	1
.c1ee	a1ee	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c1f0	a1f0	20 2d a2	jsr $a22d			jsr 	EXTILDelete
.c1f3	a1f3	e6 01		inc $01				inc 	1 							; colour block
.c1f5	a1f5	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c1f8	a1f8	88		dey				dey
.c1f9	a1f9	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c1fb	a1fb	20 2d a2	jsr $a22d			jsr 	EXTILDelete 				; backspace attribute
.c1fe	a1fe	80 b5		bra $a1b5			bra 	_EILLoop 					; and go round.
.c200	a200					_EILExit:
.c200	a200	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c202	a202	85 01		sta $01				sta 	1
.c204	a204	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c206	a206					_EILScrapeLine:
.c206	a206	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c208	a208	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c20b	a20b	c8		iny				iny
.c20c	a20c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c20f	a20f	d0 f5		bne $a206			bne 	_EILScrapeLine
.c211	a211					_EILTrimSpaces:
.c211	a211	88		dey				dey
.c212	a212	f0 08		beq $a21c			beq 	_EILEndTrim
.c214	a214	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c217	a217	c9 20		cmp #$20			cmp 	#' '
.c219	a219	f0 f6		beq $a211			beq 	_EILTrimSpaces
.c21b	a21b	c8		iny				iny 								; trim after non space character.
.c21c	a21c					_EILEndTrim:
.c21c	a21c	a9 00		lda #$00			lda 	#0 							; trim here.
.c21e	a21e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c221	a221	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c223	a223	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c226	a226	68		pla				pla 								; reset I/O page
.c227	a227	85 01		sta $01				sta 	1
.c229	a229	7a		ply				ply
.c22a	a22a	fa		plx				plx
.c22b	a22b	68		pla				pla
.c22c	a22c	60		rts				rts
.c22d	a22d					EXTILDelete:
.c22d	a22d	48		pha				pha 								; save the new character
.c22e	a22e	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c231	a231					_EXTDLoop:
.c231	a231	c8		iny				iny 								; copy one byte down.
.c232	a232	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c234	a234	88		dey				dey
.c235	a235	91 40		sta ($40),y			sta 	(EXTAddress),y
.c237	a237	c8		iny				iny 								; do till end of line.
.c238	a238	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c23b	a23b	90 f4		bcc $a231			bcc 	_EXTDLoop
.c23d	a23d	88		dey				dey 	 							; write in last slot.
.c23e	a23e	68		pla				pla
.c23f	a23f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c241	a241	60		rts				rts
.c242	a242					EXTILInsert:
.c242	a242	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c245	a245					_EXTILoop:
.c245	a245	88		dey				dey 								; back one
.c246	a246	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c249	a249	f0 08		beq $a253			beq 	_EXTIExit
.c24b	a24b	88		dey				dey 								; copy one byte up.
.c24c	a24c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c24e	a24e	c8		iny				iny
.c24f	a24f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c251	a251	80 f2		bra $a245			bra 	_EXTILoop
.c253	a253					_EXTIExit:
.c253	a253	60		rts				rts
.c254	a254					EXTScrollFill:
.c254	a254	aa		tax				tax									; save value to fill with
.c255	a255	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c257	a257	48		pha				pha
.c258	a258	a5 37		lda $37				lda 	zTemp0+1
.c25a	a25a	48		pha				pha
.c25b	a25b	a5 38		lda $38				lda 	zTemp1
.c25d	a25d	48		pha				pha
.c25e	a25e	a5 39		lda $39				lda 	zTemp1+1
.c260	a260	48		pha				pha
.c261	a261	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c263	a263	85 37		sta $37				sta 	zTemp0+1
.c265	a265	85 39		sta $39				sta 	zTemp1+1
.c267	a267	64 36		stz $36				stz 	zTemp0
.c269	a269	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c26c	a26c	85 38		sta $38				sta 	zTemp1
.c26e	a26e	a0 00		ldy #$00			ldy 	#0
.c270	a270					_EXSFCopy1:
.c270	a270	b1 38		lda ($38),y			lda 	(zTemp1),y
.c272	a272	91 36		sta ($36),y			sta 	(zTemp0),y
.c274	a274	c8		iny				iny
.c275	a275	d0 f9		bne $a270			bne 	_EXSFCopy1
.c277	a277	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c279	a279	e6 39		inc $39				inc 	zTemp1+1
.c27b	a27b	a5 39		lda $39				lda 	zTemp1+1
.c27d	a27d	c9 d3		cmp #$d3			cmp 	#$D3
.c27f	a27f	d0 ef		bne $a270			bne 	_EXSFCopy1
.c281	a281	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c284	a284	8a		txa				txa
.c285	a285					_EXSFFill1:
.c285	a285	88		dey				dey
.c286	a286	91 40		sta ($40),y			sta 	(EXTAddress),y
.c288	a288	c0 00		cpy #$00			cpy 	#0
.c28a	a28a	10 f9		bpl $a285			bpl 	_EXSFFill1
.c28c	a28c	68		pla				pla
.c28d	a28d	85 39		sta $39				sta 	zTemp1+1
.c28f	a28f	68		pla				pla
.c290	a290	85 38		sta $38				sta 	zTemp1
.c292	a292	68		pla				pla
.c293	a293	85 37		sta $37				sta 	zTemp0+1
.c295	a295	68		pla				pla
.c296	a296	85 36		sta $36				sta 	zTemp0
.c298	a298	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c299	a299					Export_EXTInitialise:
.c299	a299	64 01		stz $01				stz 	1 							; Access I/O page 0
.c29b	a29b	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c29e	a29e	9c 08 d0	stz $d008			stz 	$D008
.c2a1	a2a1	9c 09 d0	stz $d009			stz 	$D009
.c2a4	a2a4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2a6	a2a6	8d 58 d6	sta $d658			sta 	$D658
.c2a9	a2a9	a9 52		lda #$52			lda 	#$52
.c2ab	a2ab	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2ae	a2ae	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2b0	a2b0	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2b3	a2b3	a9 3c		lda #$3c			lda 	#60
.c2b5	a2b5	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2b8	a2b8	20 4d a1	jsr $a14d			jsr 	EXTClearScreenCode 			; clear the screen
.c2bb	a2bb					_EXMoveDown:
.c2bb	a2bb	a9 0d		lda #$0d			lda 	#13
.c2bd	a2bd	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2c0	a2c0	ad 6d 06	lda $066d			lda 	EXTRow
.c2c3	a2c3	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2c5	a2c5	d0 f4		bne $a2bb			bne 	_EXMoveDown
.c2c7	a2c7	20 3d a3	jsr $a33d			jsr 	EXTShowHeader
.c2ca	a2ca	64 01		stz $01				stz 	1
.c2cc	a2cc	60		rts				rts
.c2cd	a2cd					Export_EXTInputSingleCharacter:
.c2cd	a2cd					PagedInputSingleCharacter:
.c2cd	a2cd	da		phx				phx
.c2ce	a2ce	5a		phy				phy
.c2cf	a2cf					_EISCWait:
.c2cf	a2cf	a5 01		lda $01				lda 	1 							; save I/O 0
.c2d1	a2d1	48		pha				pha
.c2d2	a2d2	64 01		stz $01				stz 	1 							; access I/O Page 0
.c2d4	a2d4	38		sec				sec 								; calculate timer - LastTick
.c2d5	a2d5	ad 59 d6	lda $d659			lda 	$D659
.c2d8	a2d8	aa		tax				tax 								; saving timer in X
.c2d9	a2d9	ed 5c 06	sbc $065c			sbc 	LastTick
.c2dc	a2dc	c9 03		cmp #$03			cmp 	#3
.c2de	a2de	90 06		bcc $a2e6			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.c2e0	a2e0	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.c2e3	a2e3	20 52 bb	jsr $bb52			jsr 	PagedSNDUpdate 							; go do the code.
.c2e6	a2e6					_NoFireTick:
.c2e6	a2e6	68		pla				pla 								; restore I/O 0
.c2e7	a2e7	85 01		sta $01				sta 	1
.c2e9	a2e9	20 e4 ff	jsr $ffe4			jsr 	$FFE4 						; get a key
.c2ec	a2ec	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c2ee	a2ee	f0 df		beq $a2cf			beq 	_EISCWait
.c2f0	a2f0	7a		ply				ply
.c2f1	a2f1	fa		plx				plx
.c2f2	a2f2	60		rts				rts
.c2f3	a2f3					Export_EXTBreakCheck:
.c2f3	a2f3	4c e1 ff	jmp $ffe1			jmp		$FFE1
=3						KP_Z_ROW = 3
=$04						KP_Z_COL = $04
=4						KP_X_ROW = 4
=$04						KP_X_COL = $04
=8						KP_K_ROW = 8
=$04						KP_K_COL = $04
=7						KP_M_ROW = 7
=$04						KP_M_COL = $04
=9						KP_L_ROW = 9
=$08						KP_L_COL = $08
.c2f6	a2f6					Export_EXTReadController:
.c2f6	a2f6	da		phx				phx
.c2f7	a2f7	a2 00		ldx #$00		ldx 	#0
.c2f9	a2f9	a9 04		lda #$04			lda 	#KP_X_ROW
.c2fb	a2fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c2fe	a2fe	29 04		and #$04			and 	#KP_X_COL
.c300	a300	f0 04		beq $a306			beq 	_NoSet1
.c302	a302	8a		txa				txa
.c303	a303	09 01		ora #$01			ora 	#1
.c305	a305	aa		tax				tax
.c306	a306					_NoSet1:
.c306	a306	a9 03		lda #$03			lda 	#KP_Z_ROW
.c308	a308	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c30b	a30b	29 04		and #$04			and 	#KP_Z_COL
.c30d	a30d	f0 04		beq $a313			beq 	_NoSet1
.c30f	a30f	8a		txa				txa
.c310	a310	09 02		ora #$02			ora 	#2
.c312	a312	aa		tax				tax
.c313	a313					_NoSet1:
.c313	a313	a9 07		lda #$07			lda 	#KP_M_ROW
.c315	a315	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c318	a318	29 04		and #$04			and 	#KP_M_COL
.c31a	a31a	f0 04		beq $a320			beq 	_NoSet1
.c31c	a31c	8a		txa				txa
.c31d	a31d	09 04		ora #$04			ora 	#4
.c31f	a31f	aa		tax				tax
.c320	a320					_NoSet1:
.c320	a320	a9 08		lda #$08			lda 	#KP_K_ROW
.c322	a322	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c325	a325	29 04		and #$04			and 	#KP_K_COL
.c327	a327	f0 04		beq $a32d			beq 	_NoSet1
.c329	a329	8a		txa				txa
.c32a	a32a	09 08		ora #$08			ora 	#8
.c32c	a32c	aa		tax				tax
.c32d	a32d					_NoSet1:
.c32d	a32d	a9 09		lda #$09			lda 	#KP_L_ROW
.c32f	a32f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c332	a332	29 08		and #$08			and 	#KP_L_COL
.c334	a334	f0 04		beq $a33a			beq 	_NoSet1
.c336	a336	8a		txa				txa
.c337	a337	09 10		ora #$10			ora 	#16
.c339	a339	aa		tax				tax
.c33a	a33a					_NoSet1:
.c33a	a33a	8a		txa				txa
.c33b	a33b	fa		plx				plx
.c33c	a33c	60		rts				rts
.c33d	a33d					EXTShowHeader:
.c33d	a33d	a5 01		lda $01				lda 	1
.c33f	a33f	48		pha				pha
.c340	a340	a9 02		lda #$02			lda 	#2
.c342	a342	a2 42		ldx #$42			ldx 	#(Header_Chars & $FF)
.c344	a344	a0 a5		ldy #$a5			ldy 	#(Header_Chars >> 8)
.c346	a346	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c349	a349	a9 03		lda #$03			lda 	#3
.c34b	a34b	a2 aa		ldx #$aa			ldx 	#(Header_Attrs & $FF)
.c34d	a34d	a0 a3		ldy #$a3			ldy 	#(Header_Attrs >> 8)
.c34f	a34f	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c352	a352	64 01		stz $01				stz 	1
.c354	a354	a2 3f		ldx #$3f			ldx 	#16*4-1
.c356	a356					_EXTCopyLUT:
.c356	a356	bd 72 a7	lda $a772,x			lda 	Header_Palette,x
.c359	a359	9d 00 d8	sta $d800,x			sta 	$D800,x
.c35c	a35c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c35f	a35f	ca		dex				dex
.c360	a360	10 f4		bpl $a356			bpl 	_EXTCopyLUT
.c362	a362	68		pla				pla
.c363	a363	60		rts				rts
.c364	a364					_ESHCopyBlock:
.c364	a364	85 01		sta $01				sta 	1
.c366	a366	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c368	a368	84 37		sty $37				sty 	zTemp0+1
.c36a	a36a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c36c	a36c	85 38		sta $38				sta 	0+zTemp1
.c36e	a36e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c370	a370	85 39		sta $39				sta 	1+zTemp1
.c372	a372					_ESHCopyLoop:
.c372	a372	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c374	a374	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c376	a376	f0 1b		beq $a393			beq 	_ESHUnpack
.c378	a378	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c37a	a37a	a9 01		lda #$01			lda 	#1 							; source add 1
.c37c	a37c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c37e	a37e					_ESHNext:
.c37e	a37e	18		clc				clc 								; zTemp0 + A
.c37f	a37f	65 36		adc $36				adc 	zTemp0
.c381	a381	85 36		sta $36				sta 	zTemp0
.c383	a383	90 02		bcc $a387			bcc 	_ESHNoCarry
.c385	a385	e6 37		inc $37				inc 	zTemp0+1
.c387	a387					_ESHNoCarry:
.c387	a387	98		tya				tya 								; zTemp1 + Y
.c388	a388	18		clc				clc
.c389	a389	65 38		adc $38				adc 	zTemp1
.c38b	a38b	85 38		sta $38				sta 	zTemp1
.c38d	a38d	90 e3		bcc $a372			bcc 	_ESHCopyLoop
.c38f	a38f	e6 39		inc $39				inc 	zTemp1+1
.c391	a391	80 df		bra $a372			bra 	_ESHCopyLoop
.c393	a393					_ESHUnpack:
.c393	a393	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c395	a395	b1 36		lda ($36),y			lda 	(zTemp0),y
.c397	a397	aa		tax				tax
.c398	a398	88		dey				dey 								; byte into A
.c399	a399	b1 36		lda ($36),y			lda 	(zTemp0),y
.c39b	a39b	f0 0c		beq $a3a9			beq 	_ESHExit 					; exit if zero.
.c39d	a39d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c39f	a39f					_ESHCopyOut:
.c39f	a39f	91 38		sta ($38),y			sta 	(zTemp1),y
.c3a1	a3a1	c8		iny				iny
.c3a2	a3a2	ca		dex				dex
.c3a3	a3a3	d0 fa		bne $a39f			bne 	_ESHCopyOut
.c3a5	a3a5	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c3a7	a3a7	80 d5		bra $a37e			bra 	_ESHNext
.c3a9	a3a9					_ESHExit:
.c3a9	a3a9	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c3aa	a3aa					Header_attrs:
>c3aa	a3aa	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c3b2	a3b2	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3c2	a3c2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3d2	a3d2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3e2	a3e2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3f2	a3f2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c402	a402	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c412	a412	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c422	a422	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c432	a432	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c442	a442	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c452	a452	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c462	a462	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c472	a472	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c482	a482	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c492	a492	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c4a2	a4a2	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c4b2	a4b2	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4c2	a4c2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4d2	a4d2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4e2	a4e2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4f2	a4f2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c502	a502	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c512	a512	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c522	a522	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c532	a532	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c542	a542					Header_chars:
>c542	a542	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c54a	a54a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c55a	a55a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c56a	a56a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c57a	a57a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c58a	a58a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c59a	a59a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c5aa	a5aa	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c5ba	a5ba	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5ca	a5ca	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5da	a5da	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ea	a5ea	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5fa	a5fa	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c60a	a60a	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c61a	a61a	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c62a	a62a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c63a	a63a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c64a	a64a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c65a	a65a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c66a	a66a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c67a	a67a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c68a	a68a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c69a	a69a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c6aa	a6aa	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c6ba	a6ba	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6ca	a6ca	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6da	a6da	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ea	a6ea	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6fa	a6fa	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c70a	a70a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c71a	a71a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c72a	a72a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c73a	a73a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c74a	a74a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c75a	a75a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c76a	a76a	9d ff 96 18 96 a3 ff 00
.c772	a772					Header_Palette:
>c772	a772	00 00 00 00				.dword $000000
>c776	a776	66 66 66 00				.dword $666666
>c77a	a77a	aa 00 00 00				.dword $0000aa
>c77e	a77e	00 aa 00 00				.dword $00aa00
>c782	a782	ea 41 c0 00				.dword $c041ea
>c786	a786	00 48 87 00				.dword $874800
>c78a	a78a	00 9c ff 00				.dword $ff9c00
>c78e	a78e	ff db 57 00				.dword $57dbff
>c792	a792	28 3f 3f 00				.dword $3f3f28
>c796	a796	8a aa aa 00				.dword $aaaa8a
>c79a	a79a	ff 55 55 00				.dword $5555ff
>c79e	a79e	55 ff 55 00				.dword $55ff55
>c7a2	a7a2	ed 8d ff 00				.dword $ff8ded
>c7a6	a7a6	00 00 ff 00				.dword $ff0000
>c7aa	a7aa	55 ff ff 00				.dword $ffff55
>c7ae	a7ae	ff ff ff 00				.dword $ffffff
>c7b2	a7b2	ff ff ff 00				.dword $ffffff
>c7b6	a7b6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c7ba	a7ba					GRVectorTable:
>c7ba	a7ba	09 aa					.word	GXInitialise             ; $00 Initialise
>c7bc	a7bc	23 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c7be	a7be	6b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7c0	a7c0	bb a9					.word	GXClearBitmap            ; $03 Clear
>c7c2	a7c2	fa ab					.word	GXSetColourMode          ; $04 Colour
>c7c4	a7c4	c2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7c6	a7c6	0a ae					.word	GXSpriteHandler          ; $06 DrawSprite
>c7c8	a7c8	7b ae					.word	GXSelect                 ; $07 SpriteUse
>c7ca	a7ca	a4 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7cc	a7cc	2b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ce	a7ce	6d a8					.word	GRUndefined              ; $0a
>c7d0	a7d0	6d a8					.word	GRUndefined              ; $0b
>c7d2	a7d2	6d a8					.word	GRUndefined              ; $0c
>c7d4	a7d4	6d a8					.word	GRUndefined              ; $0d
>c7d6	a7d6	6d a8					.word	GRUndefined              ; $0e
>c7d8	a7d8	6d a8					.word	GRUndefined              ; $0f
>c7da	a7da	6d a8					.word	GRUndefined              ; $10
>c7dc	a7dc	6d a8					.word	GRUndefined              ; $11
>c7de	a7de	6d a8					.word	GRUndefined              ; $12
>c7e0	a7e0	6d a8					.word	GRUndefined              ; $13
>c7e2	a7e2	6d a8					.word	GRUndefined              ; $14
>c7e4	a7e4	6d a8					.word	GRUndefined              ; $15
>c7e6	a7e6	6d a8					.word	GRUndefined              ; $16
>c7e8	a7e8	6d a8					.word	GRUndefined              ; $17
>c7ea	a7ea	6d a8					.word	GRUndefined              ; $18
>c7ec	a7ec	6d a8					.word	GRUndefined              ; $19
>c7ee	a7ee	6d a8					.word	GRUndefined              ; $1a
>c7f0	a7f0	6d a8					.word	GRUndefined              ; $1b
>c7f2	a7f2	6d a8					.word	GRUndefined              ; $1c
>c7f4	a7f4	6d a8					.word	GRUndefined              ; $1d
>c7f6	a7f6	6d a8					.word	GRUndefined              ; $1e
>c7f8	a7f8	6d a8					.word	GRUndefined              ; $1f
>c7fa	a7fa	6b a8					.word	GXMove                   ; $20 Move
>c7fc	a7fc	c8 aa					.word	GXLine                   ; $21 Line
>c7fe	a7fe	43 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c800	a800	40 ac					.word	GXFillRectangle          ; $23 FillRect
>c802	a802	72 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c804	a804	6e a8					.word	GXFillCircle             ; $25 FillCircle
>c806	a806	6d a8					.word	GRUndefined              ; $26
>c808	a808	6d a8					.word	GRUndefined              ; $27
>c80a	a80a	28 ac					.word	GXPlotPoint              ; $28 Plot
>c80c	a80c	3a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gsOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						GXSpriteOffsetBase:
>0690								.fill 	2
.0692						GXSpriteLow:
>0692								.fill 	64
.06d2						GXSpriteHigh:
>06d2								.fill 	64
.c80e	a80e					Export_GXGraphicDraw:
.c80e	a80e	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c810	a810	b0 06		bcs $a818			bcs 	_GDCoordinate
.c812	a812	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c814	a814	84 37		sty $37				sty 	gxzTemp0+1
.c816	a816	80 4b		bra $a863			bra 	_GDExecuteA 				; and execute
.c818	a818					_GDCoordinate:
.c818	a818	48		pha				pha 								; save AXY
.c819	a819	da		phx				phx
.c81a	a81a	5a		phy				phy
.c81b	a81b	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c81d	a81d					_GDCopy1:
.c81d	a81d	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c820	a820	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c823	a823	ca		dex				dex
.c824	a824	10 f7		bpl $a81d			bpl 	_GDCopy1
.c826	a826	68		pla				pla 								; update Y
.c827	a827	8d 74 06	sta $0674			sta 	gxCurrentY
.c82a	a82a	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c82d	a82d	68		pla				pla
.c82e	a82e	8d 72 06	sta $0672			sta 	gxCurrentX
.c831	a831	68		pla				pla 								; get A (command+X.1) back
.c832	a832	48		pha				pha
.c833	a833	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c835	a835	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c838	a838	68		pla				pla 								; get command back
.c839	a839	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c83b	a83b	48		pha				pha 								; push back.
.c83c	a83c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c83e	a83e	f0 17		beq $a857			beq 	_GDCopyToWorkArea
.c840	a840	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c843	a843	f0 07		beq $a84c			beq 	_GDCheckY
.c845	a845	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c848	a848	c9 40		cmp #$40			cmp 	#64
.c84a	a84a	b0 08		bcs $a854			bcs 	_GDError1
.c84c	a84c					_GDCheckY:
.c84c	a84c	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c84f	a84f	cd 86 06	cmp $0686			cmp 	gxHeight
.c852	a852	90 03		bcc $a857			bcc 	_GDCopyToWorkArea
.c854	a854					_GDError1:
.c854	a854	68		pla				pla
.c855	a855					_GDError2:
.c855	a855	38		sec				sec
.c856	a856	60		rts				rts
.c857	a857					_GDCopyToWorkArea:
.c857	a857	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c859	a859					_GDCopy2:
.c859	a859	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c85c	a85c	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c85f	a85f	ca		dex				dex
.c860	a860	10 f7		bpl $a859			bpl 	_GDCopy2
.c862	a862	68		pla				pla 								; get command
.c863	a863					_GDExecuteA:
.c863	a863	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c865	a865	b0 ee		bcs $a855			bcs 	_GDError2
.c867	a867	aa		tax				tax
.c868	a868	7c ba a7	jmp ($a7ba,x)			jmp 	(GRVectorTable,x)
.c86b	a86b					GXMove:
.c86b	a86b	18		clc				clc
.c86c	a86c	60		rts				rts
.c86d	a86d					GRUndefined:
>c86d	a86d	db						.byte 	$DB 						; causes a break in the emulator
.c86e	a86e					GXFillCircle:
.c86e	a86e	a9 ff		lda #$ff			lda 	#255
.c870	a870	80 02		bra $a874			bra 	GXCircle
.c872	a872					GXFrameCircle:
.c872	a872	a9 00		lda #$00			lda 	#0
.c874	a874					GXCircle:
.c874	a874	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c877	a877	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c87a	a87a	f0 26		beq $a8a2			beq 	_GXCFail
.c87c	a87c	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; topleft/bottomright
.c87f	a87f	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.c882	a882	20 74 a9	jsr $a974			jsr 	GXCircleSetup 				; set up for drawing
.c885	a885	9c 16 07	stz $0716			stz 	gxYChanged
.c888	a888					_GXCircleDraw:
.c888	a888	ad 13 07	lda $0713			lda 	gXCentre					; while x <= y
.c88b	a88b	cd 14 07	cmp $0714			cmp 	gYCentre
.c88e	a88e	90 0a		bcc $a89a			bcc 	_GXCircleContinue
.c890	a890	d0 03		bne $a895			bne 	_GXNoLast
.c892	a892	20 a7 a8	jsr $a8a7			jsr 	GXPlot1
.c895	a895					_GXNoLast:
.c895	a895	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; close the bitmap
.c898	a898	18		clc				clc
.c899	a899	60		rts				rts
.c89a	a89a					_GXCircleContinue:
.c89a	a89a	20 a4 a8	jsr $a8a4			jsr 	GXPlot2 					; draw it
.c89d	a89d	20 21 a9	jsr $a921			jsr 	GXCircleMove 				; adjust the coordinates
.c8a0	a8a0	80 e6		bra $a888			bra 	_GXCircleDraw
.c8a2	a8a2					_GXCFail:
.c8a2	a8a2	38		sec				sec
.c8a3	a8a3	60		rts				rts
.c8a4	a8a4					GXPlot2:
.c8a4	a8a4	20 a7 a8	jsr $a8a7			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c8a7	a8a7					GXPlot1:
.c8a7	a8a7	ad 14 07	lda $0714			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.c8aa	a8aa	f0 03		beq $a8af			beq 	_GXPlot1Only
.c8ac	a8ac	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; plot and negate
.c8af	a8af					_GXPlot1Only:
.c8af	a8af	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; twice, undoing negation
.c8b2	a8b2	ad 13 07	lda $0713			lda 	gXCentre 						; swap X and Y
.c8b5	a8b5	ae 14 07	ldx $0714			ldx	 	gYCentre
.c8b8	a8b8	8d 14 07	sta $0714			sta 	gYCentre
.c8bb	a8bb	8e 13 07	stx $0713			stx 	gXCentre
.c8be	a8be	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c8c1	a8c1	a9 ff		lda #$ff			lda 	#$FF
.c8c3	a8c3	8d 16 07	sta $0716			sta 	gxYChanged
.c8c6	a8c6	60		rts				rts
.c8c7	a8c7	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; do once
.c8ca	a8ca	60		rts				rts
.c8cb	a8cb	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ce	a8ce	f0 05		beq $a8d5			beq 	_GXPlot0Always
.c8d0	a8d0	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c8d3	a8d3	f0 2d		beq $a902			beq 	GXPlot0Exit
.c8d5	a8d5					_GXPlot0Always:
.c8d5	a8d5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8d7	a8d7	ad 14 07	lda $0714			lda 	gYCentre
.c8da	a8da	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8dd	a8dd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8df	a8df	ad 13 07	lda $0713			lda 	gXCentre
.c8e2	a8e2	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8e5	a8e5	48		pha				pha 									; save last offset X
.c8e6	a8e6	20 ba af	jsr $afba			jsr 	GXPositionCalc 					; calculate position/offset.
.c8e9	a8e9	68		pla				pla
.c8ea	a8ea	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8eb	a8eb	85 36		sta $36				sta 	gxzTemp0
.c8ed	a8ed	64 37		stz $37				stz 	gxzTemp0+1
.c8ef	a8ef	26 37		rol $37				rol 	gxzTemp0+1
.c8f1	a8f1	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8f4	a8f4	69 80		adc #$80			adc 	#128
.c8f6	a8f6	20 93 ac	jsr $ac93			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8f9	a8f9	38		sec				sec 									; GY = -GY
.c8fa	a8fa	a9 00		lda #$00			lda 	#0
.c8fc	a8fc	ed 14 07	sbc $0714			sbc 	gYCentre
.c8ff	a8ff	8d 14 07	sta $0714			sta 	gYCentre
.c902	a902					GXPlot0Exit:
.c902	a902	60		rts				rts
.c903	a903					GXSubCopy:
.c903	a903	85 36		sta $36				sta 	gxzTemp0
.c905	a905	64 37		stz $37				stz 	gxzTemp0+1
.c907	a907	29 80		and #$80			and 	#$80
.c909	a909	f0 02		beq $a90d			beq 	_GXNoSx
.c90b	a90b	c6 37		dec $37				dec 	gxzTemp0+1
.c90d	a90d					_GXNoSx:
.c90d	a90d	38		sec				sec
.c90e	a90e	bd 7e 06	lda $067e,x			lda 	gXX1,x
.c911	a911	e5 36		sbc $36				sbc 	gxzTemp0
.c913	a913	9d 7a 06	sta $067a,x			sta 	gXX0,x
.c916	a916	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c919	a919	e5 37		sbc $37				sbc 	gxzTemp0+1
.c91b	a91b	9d 7b 06	sta $067b,x			sta 	gXX0+1,x
.c91e	a91e	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c920	a920	60		rts				rts
.c921	a921					GXCircleMove:
.c921	a921	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c924	a924	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c926	a926	10 0d		bpl $a935			bpl 	_GXEMPositive
.c928	a928	ee 13 07	inc $0713			inc 	gXCentre 					; X++
.c92b	a92b	ad 13 07	lda $0713			lda 	gXCentre
.c92e	a92e	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c931	a931	a9 06		lda #$06			lda 	#6  						; and add 6
.c933	a933	80 15		bra $a94a			bra 	_GXEMAddD
.c935	a935					_GXEMPositive:
.c935	a935	ee 13 07	inc $0713			inc 	gXCentre					; X++
.c938	a938	ce 14 07	dec $0714			dec 	gyCentre 					; Y--
.c93b	a93b	38		sec				sec 								; calculate X-Y
.c93c	a93c	ad 13 07	lda $0713			lda 	gXCentre
.c93f	a93f	ed 14 07	sbc $0714			sbc 	gYCentre
.c942	a942	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c945	a945	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c947	a947	ce 16 07	dec $0716			dec 	gxYChanged
.c94a	a94a					_GXEMAddD:
.c94a	a94a	18		clc				clc
.c94b	a94b	65 38		adc $38				adc 	gxzTemp1
.c94d	a94d	85 38		sta $38				sta 	gxzTemp1
.c94f	a94f	90 02		bcc $a953			bcc 	_GXEMNoCarry
.c951	a951	e6 39		inc $39				inc 	gxzTemp1+1
.c953	a953					_GXEMNoCarry:
.c953	a953	60		rts				rts
.c954	a954					_GXAdd4TimesToD:
.c954	a954	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c956	a956	29 80		and #$80			and 	#$80
.c958	a958	f0 02		beq $a95c			beq 	_GXA4Unsigned
.c95a	a95a	a9 ff		lda #$ff			lda 	#$FF
.c95c	a95c					_GXA4Unsigned:
.c95c	a95c	85 37		sta $37				sta 	gxzTemp0+1
.c95e	a95e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c960	a960	26 37		rol $37				rol 	gxzTemp0+1
.c962	a962	06 36		asl $36				asl 	gxzTemp0
.c964	a964	26 37		rol $37				rol 	gxzTemp0+1
.c966	a966	18		clc				clc 								; add
.c967	a967	a5 36		lda $36				lda		gxzTemp0
.c969	a969	65 38		adc $38				adc 	gxzTemp1
.c96b	a96b	85 38		sta $38				sta 	gxzTemp1
.c96d	a96d	a5 37		lda $37				lda		gxzTemp0+1
.c96f	a96f	65 39		adc $39				adc 	gxzTemp1+1
.c971	a971	85 39		sta $39				sta 	gxzTemp1+1
.c973	a973	60		rts				rts
.c974	a974					GXCircleSetup:
.c974	a974	38		sec				sec
.c975	a975	ad 80 06	lda $0680			lda 	gxY1
.c978	a978	ed 7c 06	sbc $067c			sbc 	gxY0
.c97b	a97b	4a		lsr a				lsr 	a
.c97c	a97c	8d 12 07	sta $0712			sta 	gxRadius
.c97f	a97f	a2 00		ldx #$00			ldx 	#0
.c981	a981	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c984	a984	a2 02		ldx #$02			ldx 	#2
.c986	a986	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c989	a989	9c 13 07	stz $0713			stz 	gXCentre
.c98c	a98c	ad 12 07	lda $0712			lda 	gxRadius
.c98f	a98f	8d 14 07	sta $0714			sta 	gYCentre
.c992	a992	0a		asl a				asl 	a 							; R x 2
.c993	a993	85 36		sta $36				sta 	gxzTemp0
.c995	a995	38		sec				sec
.c996	a996	a9 03		lda #$03			lda 	#3
.c998	a998	e5 36		sbc $36				sbc 	gxzTemp0
.c99a	a99a	85 38		sta $38				sta 	gxzTemp1
.c99c	a99c	a9 00		lda #$00			lda 	#0
.c99e	a99e	e9 00		sbc #$00			sbc 	#0
.c9a0	a9a0	85 39		sta $39				sta 	gxzTemp1+1
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXCalculateCentre:
.c9a3	a9a3	38		sec				sec
.c9a4	a9a4	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c9a7	a9a7	7d 7a 06	adc $067a,x			adc 	gXX0,x
.c9aa	a9aa	9d 7e 06	sta $067e,x			sta 	gXX1,x
.c9ad	a9ad	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c9b0	a9b0	7d 7b 06	adc $067b,x			adc 	gXX0+1,x
.c9b3	a9b3	4a		lsr a				lsr 	a
.c9b4	a9b4	9d 7f 06	sta $067f,x			sta 	gXX1+1,x
.c9b7	a9b7	7e 7e 06	ror $067e,x			ror 	gXX1,x
.c9ba	a9ba	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gXCentre:
>0713								.fill 	1
.0714						gYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c9bb	a9bb					GXClearBitmap:
.c9bb	a9bb	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c9be	a9be	f0 24		beq $a9e4			beq 	_GXCBFail
.c9c0	a9c0	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start access
.c9c3	a9c3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9c5	a9c5	ad 86 06	lda $0686			lda 	gxHeight
.c9c8	a9c8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9ca	a9ca	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9cc	a9cc					_GXCalcLastPage:
.c9cc	a9cc	98		tya				tya 								; add to base page
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	6d 84 06	adc $0684			adc 	gxBasePage
.c9d1	a9d1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9d3	a9d3					_GXClearAll:
.c9d3	a9d3	20 e6 a9	jsr $a9e6			jsr 	_GXClearBlock 				; clear 8k block
.c9d6	a9d6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9d8	a9d8	a5 0b		lda $0b				lda 	GXEditSlot
.c9da	a9da	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c9dd	a9dd	b0 f4		bcs $a9d3			bcs 	_GXClearAll
.c9df	a9df	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap	 			; stop access
.c9e2	a9e2	18		clc				clc
.c9e3	a9e3	60		rts				rts
.c9e4	a9e4					_GXCBFail:
.c9e4	a9e4	38		sec				sec
.c9e5	a9e5	60		rts				rts
.c9e6	a9e6					_GXClearBlock:
.c9e6	a9e6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9e8	a9e8	85 38		sta $38				sta 	0+gxzTemp1
.c9ea	a9ea	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9ec	a9ec	85 39		sta $39				sta 	1+gxzTemp1
.c9ee	a9ee					_GXCB0:
.c9ee	a9ee	a5 36		lda $36				lda 	gxzTemp0
.c9f0	a9f0	a0 00		ldy #$00			ldy 	#0
.c9f2	a9f2					_GXCB1:
.c9f2	a9f2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f4	a9f4	c8		iny				iny
.c9f5	a9f5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f7	a9f7	c8		iny				iny
.c9f8	a9f8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fa	a9fa	c8		iny				iny
.c9fb	a9fb	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fd	a9fd	c8		iny				iny
.c9fe	a9fe	d0 f2		bne $a9f2			bne 	_GXCB1
.ca00	aa00	e6 39		inc $39				inc 	gxzTemp1+1
.ca02	aa02	a5 39		lda $39				lda 	gxzTemp1+1
.ca04	aa04	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ca06	aa06	d0 e6		bne $a9ee			bne 	_GXCB0
.ca08	aa08	60		rts				rts
.ca09	aa09					GXInitialise:
.ca09	aa09	64 01		stz $01				stz 	1
.ca0b	aa0b	a9 01		lda #$01			lda 	#1
.ca0d	aa0d	8d 00 d0	sta $d000			sta 	$D000
.ca10	aa10	18		clc				clc
.ca11	aa11	9c 82 06	stz $0682			stz 	GXSpritesOn
.ca14	aa14	9c 83 06	stz $0683			stz 	GXBitmapsOn
.ca17	aa17	a2 0f		ldx #$0f			ldx 	#15
.ca19	aa19					_GXIClear:
.ca19	aa19	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.ca1c	aa1c	ca		dex				dex
.ca1d	aa1d	10 fa		bpl $aa19			bpl 	_GXIClear
.ca1f	aa1f	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.ca22	aa22	60		rts				rts
.ca23	aa23					GXControlBitmap:
.ca23	aa23	64 01		stz $01				stz 	1
.ca25	aa25	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca27	aa27	29 01		and #$01			and 	#1 							; set bitmap flag
.ca29	aa29	8d 83 06	sta $0683			sta 	gxBitmapsOn
.ca2c	aa2c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca2d	aa2d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca30	aa30	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca32	aa32	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca34	aa34	90 02		bcc $aa38			bcc 	_CBNotOn
.ca36	aa36	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca38	aa38					_CBNotOn:
.ca38	aa38	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca3b	aa3b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca3d	aa3d	29 07		and #$07			and 	#7
.ca3f	aa3f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca42	aa42	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca44	aa44	d0 02		bne $aa48			bne 	_CBNotDefault
.ca46	aa46	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca48	aa48					_CBNotDefault:
.ca48	aa48	8d 84 06	sta $0684			sta 	gxBasePage
.ca4b	aa4b	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4e	aa4e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca50	aa50	8d 03 d1	sta $d103			sta 	$D103
.ca53	aa53	a5 36		lda $36				lda 	gxzTemp0
.ca55	aa55	8d 02 d1	sta $d102			sta 	$D102
.ca58	aa58	9c 01 d1	stz $d101			stz 	$D101
.ca5b	aa5b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca5d	aa5d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca60	aa60	29 01		and #$01			and 	#1
.ca62	aa62	f0 02		beq $aa66			beq 	_CBHaveHeight
.ca64	aa64	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca66	aa66					_CBHaveHeight
.ca66	aa66	8e 86 06	stx $0686			stx 	gxHeight
.ca69	aa69	18		clc				clc
.ca6a	aa6a	60		rts				rts
.ca6b	aa6b					GXControlSprite:
.ca6b	aa6b	64 01		stz $01				stz 	1
.ca6d	aa6d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca6f	aa6f	29 01		and #$01			and 	#1 							; set sprites flag
.ca71	aa71	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca74	aa74	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca75	aa75	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca78	aa78	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca7a	aa7a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca7c	aa7c	90 02		bcc $aa80			bcc 	_CSNotOn
.ca7e	aa7e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca80	aa80					_CSNotOn:
.ca80	aa80	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca83	aa83	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca85	aa85	d0 02		bne $aa89			bne 	_CSNotDefault
.ca87	aa87	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca89	aa89					_CSNotDefault:
.ca89	aa89	8d 85 06	sta $0685			sta 	gxSpritePage
.ca8c	aa8c	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca8f	aa8f	a5 36		lda $36				lda 	zTemp0
.ca91	aa91	8d 90 06	sta $0690			sta 	GXSpriteOffsetBase
.ca94	aa94	a5 37		lda $37				lda 	zTemp0+1
.ca96	aa96	8d 91 06	sta $0691			sta 	GXSpriteOffsetBase+1
.ca99	aa99	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca9b	aa9b					_CSClear:
.ca9b	aa9b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca9e	aa9e	9e 00 da	stz $da00,x			stz 	$DA00,x
.caa1	aaa1	ca		dex				dex
.caa2	aaa2	d0 f7		bne $aa9b			bne 	_CSClear
.caa4	aaa4	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.caa7	aaa7	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.caaa	aaaa	18		clc				clc
.caab	aaab	60		rts				rts
.caac	aaac					GXCalculateBaseAddress:
.caac	aaac	85 36		sta $36				sta 	gxzTemp0
.caae	aaae	64 37		stz $37				stz 	gxzTemp0+1
.cab0	aab0	a9 05		lda #$05			lda 	#5
.cab2	aab2					_GXShift:
.cab2	aab2	06 36		asl $36				asl 	gxzTemp0
.cab4	aab4	26 37		rol $37				rol 	gxzTemp0+1
.cab6	aab6	3a		dec a				dec		a
.cab7	aab7	d0 f9		bne $aab2			bne 	_GXShift
.cab9	aab9	60		rts				rts
.caba	aaba					GXClearSpriteStore:
.caba	aaba	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.cabc	aabc					_GXCSSLoop:
.cabc	aabc	9e d2 06	stz $06d2,x			stz 	GXSpriteHigh,x
.cabf	aabf	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.cac1	aac1	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cac4	aac4	ca		dex				dex
.cac5	aac5	10 f5		bpl $aabc			bpl 	_GXCSSLoop
.cac7	aac7	60		rts				rts
.cac8	aac8					GXLine:
.cac8	aac8	ad 83 06	lda $0683			lda 	GXBitmapsOn
.cacb	aacb	f0 28		beq $aaf5			beq 	_GXLFail
.cacd	aacd	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.cad0	aad0	20 f0 b0	jsr $b0f0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cad3	aad3	20 9b ab	jsr $ab9b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cad6	aad6	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cad9	aad9					_GXDrawLoop:
.cad9	aad9	ac 8c 06	ldy $068c			ldy 	gsOffset 					; draw the pixel
.cadc	aadc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cade	aade	2d 8a 06	and $068a			and 	gxANDValue
.cae1	aae1	4d 89 06	eor $0689			eor 	gxEORValue
.cae4	aae4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cae6	aae6	20 f7 aa	jsr $aaf7			jsr 	GXLineIsComplete 			; is the line complete ?
.cae9	aae9	f0 05		beq $aaf0			beq 	_GXLExit
.caeb	aaeb	20 12 ab	jsr $ab12			jsr 	GXLineAdvance 				; code as per advance method
.caee	aaee	80 e9		bra $aad9			bra 	_GXDrawLoop
.caf0	aaf0					_GXLExit:
.caf0	aaf0	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.caf3	aaf3	18		clc				clc
.caf4	aaf4	60		rts				rts
.caf5	aaf5					_GXLFail:
.caf5	aaf5	38		sec				sec
.caf6	aaf6	60		rts				rts
.caf7	aaf7					GXLineIsComplete:
.caf7	aaf7	ad 19 07	lda $0719			lda 	GXIsDiffYLarger 			; is dy larger
.cafa	aafa	d0 0f		bne $ab0b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cafc	aafc	ad 7a 06	lda $067a			lda 	GXX0 						; compare X, LSB and MSB
.caff	aaff	4d 7e 06	eor $067e			eor 	GXX1
.cb02	ab02	d0 06		bne $ab0a			bne 	_GXLICExit
.cb04	ab04	ad 7b 06	lda $067b			lda 	GXX0+1
.cb07	ab07	4d 7f 06	eor $067f			eor 	GXX1+1
.cb0a	ab0a					_GXLICExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					_GXLICCompareY:
.cb0b	ab0b	ad 80 06	lda $0680			lda 	GXY1
.cb0e	ab0e	4d 7c 06	eor $067c			eor 	GXY0
.cb11	ab11	60		rts				rts
.cb12	ab12					GXLineAdvance:
.cb12	ab12	18		clc				clc 								; add adjust to position
.cb13	ab13	ad 1b 07	lda $071b			lda 	GXPosition
.cb16	ab16	6d 1c 07	adc $071c			adc 	GXAdjust
.cb19	ab19	8d 1b 07	sta $071b			sta 	GXPosition
.cb1c	ab1c	9c 1e 07	stz $071e			stz 	GXAddSelect 				; clear add select flag
.cb1f	ab1f	b0 05		bcs $ab26			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb21	ab21	cd 1d 07	cmp $071d			cmp 	GXTotal 					; if exceeded total
.cb24	ab24	90 0a		bcc $ab30			bcc 	_GXLANoExtra
.cb26	ab26					_GXLAOverflow:
.cb26	ab26	ce 1e 07	dec $071e			dec 	GXAddSelect 				; set addselect to $FF
.cb29	ab29	38		sec				sec 								; subtract total and write back
.cb2a	ab2a	ed 1d 07	sbc $071d			sbc 	GXTotal
.cb2d	ab2d	8d 1b 07	sta $071b			sta 	GXPosition
.cb30	ab30					_GXLANoExtra:
.cb30	ab30	ad 19 07	lda $0719			lda 	GXIsDiffYLarger
.cb33	ab33	f0 0d		beq $ab42			beq 	_GXDXLarger
.cb35	ab35	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb38	ab38	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb3b	ab3b	f0 10		beq $ab4d			beq 	_GXLAExit
.cb3d	ab3d	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb40	ab40	80 0b		bra $ab4d			bra 	_GXLAExit
.cb42	ab42					_GXDXLarger:
.cb42	ab42	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb45	ab45	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb48	ab48	f0 03		beq $ab4d			beq 	_GXLAExit
.cb4a	ab4a	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb4d	ab4d					_GXLAExit:
.cb4d	ab4d	60		rts				rts
.cb4e	ab4e					GXAdjustX:
.cb4e	ab4e	ad 1a 07	lda $071a			lda 	GXDXNegative
.cb51	ab51	10 25		bpl $ab78			bpl 	_GXAXRight
.cb53	ab53	ad 7a 06	lda $067a			lda 	GXX0
.cb56	ab56	d0 03		bne $ab5b			bne 	_GXAXNoBorrow
.cb58	ab58	ce 7b 06	dec $067b			dec 	GXX0+1
.cb5b	ab5b					_GXAXNoBorrow:
.cb5b	ab5b	ce 7a 06	dec $067a			dec 	GXX0
.cb5e	ab5e	ce 8c 06	dec $068c			dec 	gsOffset 					; pixel left
.cb61	ab61	ad 8c 06	lda $068c			lda 	gsOffset
.cb64	ab64	c9 ff		cmp #$ff			cmp 	#$FF
.cb66	ab66	d0 0f		bne $ab77			bne 	_GXAYExit 					; underflow
.cb68	ab68	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb6a	ab6a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb6c	ab6c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb6e	ab6e	b0 07		bcs $ab77			bcs 	_GXAYExit
.cb70	ab70	18		clc				clc
.cb71	ab71	69 20		adc #$20			adc 	#$20 						; fix up
.cb73	ab73	85 3d		sta $3d				sta 	gxzScreen+1
.cb75	ab75	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb77	ab77					_GXAYExit:
.cb77	ab77	60		rts				rts
.cb78	ab78					_GXAXRight:
.cb78	ab78	ee 7a 06	inc $067a			inc 	GXX0
.cb7b	ab7b	d0 03		bne $ab80			bne 	_GXAXNoCarry
.cb7d	ab7d	ee 7b 06	inc $067b			inc 	GXX0+1
.cb80	ab80					_GXAXNoCarry:
.cb80	ab80	ee 8c 06	inc $068c			inc 	gsOffset 					; pixel right
.cb83	ab83	d0 0e		bne $ab93			bne 	_GXAXExit 					; if not overflowed, exit.
.cb85	ab85	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb87	ab87	a5 3d		lda $3d				lda 	gxzScreen+1
.cb89	ab89	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb8b	ab8b	90 06		bcc $ab93			bcc 	_GXAXExit
.cb8d	ab8d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb8f	ab8f	85 3d		sta $3d				sta 	gxzScreen+1
.cb91	ab91	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb93	ab93					_GXAXExit:
.cb93	ab93	60		rts				rts
.cb94	ab94					GXIncrementY:
.cb94	ab94	ee 7c 06	inc $067c			inc 	GXY0
.cb97	ab97	20 10 b0	jsr $b010			jsr 	GXMovePositionDown
.cb9a	ab9a	60		rts				rts
.cb9b	ab9b					GXLineSetup:
.cb9b	ab9b	ad 80 06	lda $0680			lda 	GXY1
.cb9e	ab9e	38		sec				sec
.cb9f	ab9f	ed 7c 06	sbc $067c			sbc 	GXY0
.cba2	aba2	4a		lsr a				lsr 	a
.cba3	aba3	8d 18 07	sta $0718			sta 	GXDiffY
.cba6	aba6	9c 1a 07	stz $071a			stz 	GXDXNegative 				; clear -ve flag
.cba9	aba9	38		sec				sec
.cbaa	abaa	ad 7e 06	lda $067e			lda 	GXX1
.cbad	abad	ed 7a 06	sbc $067a			sbc 	GXX0
.cbb0	abb0	8d 17 07	sta $0717			sta 	GXDiffX
.cbb3	abb3	ad 7f 06	lda $067f			lda 	GXX1+1 						; calculate MSB
.cbb6	abb6	ed 7b 06	sbc $067b			sbc 	GXX0+1
.cbb9	abb9	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cbba	abba	6e 17 07	ror $0717			ror 	GXDiffX
.cbbd	abbd	0a		asl a				asl 	a
.cbbe	abbe	10 0c		bpl $abcc			bpl 	_GDXNotNegative
.cbc0	abc0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cbc2	abc2	38		sec				sec
.cbc3	abc3	ed 17 07	sbc $0717			sbc 	GXDiffX
.cbc6	abc6	8d 17 07	sta $0717			sta 	GXDiffX
.cbc9	abc9	ce 1a 07	dec $071a			dec 	GXDXNegative 				; -ve flag = $FF.
.cbcc	abcc					_GDXNotNegative:
.cbcc	abcc	9c 19 07	stz $0719			stz 	GXIsDiffYLarger 			; clear larger flag
.cbcf	abcf	ad 18 07	lda $0718			lda 	GXDiffY 					; set adjust and total.
.cbd2	abd2	8d 1c 07	sta $071c			sta 	GXAdjust
.cbd5	abd5	ad 17 07	lda $0717			lda 	GXDiffX
.cbd8	abd8	8d 1d 07	sta $071d			sta 	GXTotal
.cbdb	abdb	ad 18 07	lda $0718			lda 	GXDiffY 					; if dy > dx
.cbde	abde	cd 17 07	cmp $0717			cmp 	GXDiffX
.cbe1	abe1	90 0f		bcc $abf2			bcc 	_GDXNotLarger
.cbe3	abe3	ce 19 07	dec $0719			dec 	GXIsDiffYLarger 			; set the dy larger flag
.cbe6	abe6	ad 17 07	lda $0717			lda 	GXDiffX 					; set adjust and total other way round
.cbe9	abe9	8d 1c 07	sta $071c			sta 	GXAdjust
.cbec	abec	ad 18 07	lda $0718			lda 	GXDiffY
.cbef	abef	8d 1d 07	sta $071d			sta 	GXTotal
.cbf2	abf2					_GDXNotLarger:
.cbf2	abf2	ad 1d 07	lda $071d			lda 	GXTotal
.cbf5	abf5	4a		lsr a				lsr 	a
.cbf6	abf6	8d 1b 07	sta $071b			sta 	GXPosition
.cbf9	abf9	60		rts				rts
.0717						GXDiffX:
>0717								.fill 	1
.0718						GXDiffY:
>0718								.fill 	1
.0719						GXIsDiffYLarger:
>0719								.fill 	1
.071a						GXDXNegative:
>071a								.fill 	1
.071b						GXPosition:
>071b								.fill 	1
.071c						GXAdjust:
>071c								.fill 	1
.071d						GXTotal:
>071d								.fill 	1
.071e						GXAddSelect:
>071e								.fill 	1
.cbfa	abfa					GXSetColourMode:
.cbfa	abfa	a6 36		ldx $36				ldx 	gxzTemp0
.cbfc	abfc	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbff	abff	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cc01	ac01	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cc04	ac04	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cc06	ac06	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cc09	ac09	ae 88 06	ldx $0688			ldx 	gxColour
.cc0c	ac0c	8e 89 06	stx $0689			stx 	gxEORValue
.cc0f	ac0f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cc11	ac11	90 03		bcc $ac16			bcc 	_GXSDCNotAndColour
.cc13	ac13	8e 8a 06	stx $068a			stx 	gxANDValue
.cc16	ac16					_GXSDCNotAndColour:
.cc16	ac16	d0 03		bne $ac1b			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cc18	ac18	9c 89 06	stz $0689			stz 	gxEORValue
.cc1b	ac1b					_GXSDCNotAnd:
.cc1b	ac1b	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cc1c	ac1c	90 08		bcc $ac26			bcc 	_GXSDCNoFlip
.cc1e	ac1e	ad 8a 06	lda $068a			lda	 	gxANDValue
.cc21	ac21	49 ff		eor #$ff			eor 	#$FF
.cc23	ac23	8d 8a 06	sta $068a			sta 	gxANDValue
.cc26	ac26					_GXSDCNoFlip:
.cc26	ac26	18		clc				clc
.cc27	ac27	60		rts				rts
.cc28	ac28					GXPlotPoint:
.cc28	ac28	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc2b	ac2b	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc2e	ac2e	ac 8c 06	ldy $068c			ldy 	gsOffset
.cc31	ac31	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc33	ac33	2d 8a 06	and $068a			and 	gxANDValue
.cc36	ac36	4d 89 06	eor $0689			eor 	gxEORValue
.cc39	ac39	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc3b	ac3b	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc3e	ac3e	18		clc				clc
.cc3f	ac3f	60		rts				rts
.cc40	ac40					GXFillRectangle:
.cc40	ac40	38		sec				sec
.cc41	ac41	80 01		bra $ac44			bra 	GXRectangle
.cc43	ac43					GXFrameRectangle:
.cc43	ac43	18		clc				clc
.cc44	ac44					GXRectangle:
.cc44	ac44	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cc47	ac47	f0 35		beq $ac7e			beq 	_GXRFail
.cc49	ac49	08		php				php 								; save Fill flag (CS)
.cc4a	ac4a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc4d	ac4d	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc50	ac50	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc53	ac53	38		sec				sec 								; sec = Draw line
.cc54	ac54	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc57	ac57	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc5a	ac5a	cd 80 06	cmp $0680			cmp 	gxY1
.cc5d	ac5d	f0 19		beq $ac78			beq 	_GXRectangleExit
.cc5f	ac5f					_GXRectLoop:
.cc5f	ac5f	20 10 b0	jsr $b010			jsr 	GXMovePositionDown 			; down one.
.cc62	ac62	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc65	ac65	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc68	ac68	cd 80 06	cmp $0680			cmp 	gXY1
.cc6b	ac6b	f0 07		beq $ac74			beq 	_GXLastLine
.cc6d	ac6d	28		plp				plp 								; get flag back
.cc6e	ac6e	08		php				php
.cc6f	ac6f	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc72	ac72	80 eb		bra $ac5f			bra 	_GXRectLoop
.cc74	ac74					_GXLastLine:
.cc74	ac74	38		sec				sec
.cc75	ac75	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0
.cc78	ac78					_GXRectangleExit:
.cc78	ac78	68		pla				pla 								; throw fill flag.
.cc79	ac79	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc7c	ac7c	18		clc				clc
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					_GXRFail:
.cc7e	ac7e	38		sec				sec
.cc7f	ac7f	60		rts				rts
.cc80	ac80					GXDrawLineX1X0:
.cc80	ac80	08		php				php 								; save solid/either-end
.cc81	ac81	38		sec				sec
.cc82	ac82	ad 7e 06	lda $067e			lda		gXX1
.cc85	ac85	ed 7a 06	sbc $067a			sbc 	gXX0
.cc88	ac88	85 36		sta $36				sta 	gxzTemp0
.cc8a	ac8a	ad 7f 06	lda $067f			lda 	gXX1+1
.cc8d	ac8d	ed 7b 06	sbc $067b			sbc 	gXX0+1
.cc90	ac90	85 37		sta $37				sta 	gxzTemp0+1
.cc92	ac92	28		plp				plp
.cc93	ac93					GXDrawLineTemp0:
.cc93	ac93	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.cc95	ac95	48		pha				pha
.cc96	ac96	a5 3d		lda $3d				lda 	gxzScreen+1
.cc98	ac98	48		pha				pha
.cc99	ac99	ad 8c 06	lda $068c			lda 	gsOffset
.cc9c	ac9c	48		pha				pha
.cc9d	ac9d	a5 0b		lda $0b				lda 	GXEditSlot
.cc9f	ac9f	48		pha				pha
.cca0	aca0	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y offset
.cca3	aca3	90 1e		bcc $acc3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cca5	aca5					_GXDLTLine:
.cca5	aca5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca7	aca7	2d 8a 06	and $068a			and 	gxANDValue
.ccaa	acaa	4d 89 06	eor $0689			eor 	gxEORValue
.ccad	acad	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccaf	acaf	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.ccb1	acb1	d0 04		bne $acb7			bne 	_GXDLTNoBorrow
.ccb3	acb3	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.ccb5	acb5	30 2e		bmi $ace5			bmi 	_GXDLTExit
.ccb7	acb7					_GXDLTNoBorrow:
.ccb7	acb7	c6 36		dec $36				dec 	gxzTemp0
.ccb9	acb9	c8		iny				iny 								; next slot.
.ccba	acba	d0 e9		bne $aca5			bne 	_GXDLTLine
.ccbc	acbc	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ccbe	acbe	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.ccc1	acc1	80 e2		bra $aca5			bra 	_GXDLTLine
.ccc3	acc3					_GXDLTEndPoints:
.ccc3	acc3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ccc5	acc5	2d 8a 06	and $068a			and 	gxANDValue
.ccc8	acc8	4d 89 06	eor $0689			eor 	gxEORValue
.cccb	accb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cccd	accd	98		tya				tya 								; advance to right side
.ccce	acce	18		clc				clc
.cccf	accf	65 36		adc $36				adc 	gxzTemp0
.ccd1	acd1	a8		tay				tay
.ccd2	acd2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccd4	acd4	65 37		adc $37				adc 	gxzTemp0+1
.ccd6	acd6	85 3d		sta $3d				sta 	gxzScreen+1
.ccd8	acd8	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap 			; fix up.
.ccdb	acdb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccdd	acdd	2d 8a 06	and $068a			and 	gxANDValue
.cce0	ace0	4d 89 06	eor $0689			eor 	gxEORValue
.cce3	ace3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cce5	ace5					_GXDLTExit:
.cce5	ace5	68		pla				pla
.cce6	ace6	85 0b		sta $0b				sta 	GXEditSlot
.cce8	ace8	68		pla				pla
.cce9	ace9	8d 8c 06	sta $068c			sta 	gsOffset
.ccec	acec	68		pla				pla
.cced	aced	85 3d		sta $3d				sta 	gxzScreen+1
.ccef	acef	68		pla				pla
.ccf0	acf0	85 3c		sta $3c				sta 	gxzScreen
.ccf2	acf2	60		rts				rts
.ccf3	acf3					GXDLTCheckWrap:
.ccf3	acf3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccf5	acf5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccf7	acf7	90 06		bcc $acff			bcc 	_GXDLTCWExit
.ccf9	acf9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccfb	acfb	85 3d		sta $3d				sta 	gxzScreen+1
.ccfd	acfd	e6 0b		inc $0b				inc 	GXEditSlot
.ccff	acff					_GXDLTCWExit:
.ccff	acff	60		rts				rts
.cd00	ad00					GXDrawGraphicElement:
.cd00	ad00	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.cd03	ad03	3a		dec a				dec 	a
.cd04	ad04	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.cd07	ad07	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.cd0a	ad0a	f0 67		beq $ad73			beq 	_GXSLFail
.cd0c	ad0c	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.cd0f	ad0f	48		pha				pha
.cd10	ad10	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.cd13	ad13	8e 21 07	stx $0721			stx 	gxAcquireVector
.cd16	ad16	20 aa af	jsr $afaa			jsr 	gxOpenBitmap 				; open the bitmap.
.cd19	ad19	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.cd1c	ad1c	4a		lsr a				lsr 	a
.cd1d	ad1d	4a		lsr a				lsr 	a
.cd1e	ad1e	4a		lsr a				lsr 	a
.cd1f	ad1f	29 07		and #$07			and		#7
.cd21	ad21	1a		inc a				inc 	a
.cd22	ad22	8d 23 07	sta $0723			sta 	gxScale
.cd25	ad25	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd27	ad27					_GXGELoop:
.cd27	ad27	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd29	ad29	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.cd2c	ad2c	10 06		bpl $ad34			bpl		_GXNoVFlip
.cd2e	ad2e	ad 20 07	lda $0720			lda 	gxMask
.cd31	ad31	38		sec				sec
.cd32	ad32	e5 38		sbc $38				sbc 	gxzTemp1
.cd34	ad34					_GXNoVFlip:
.cd34	ad34	aa		tax				tax 								; get the Xth line.
.cd35	ad35	20 75 ad	jsr $ad75			jsr 	_GXCallAcquire 				; get that data.
.cd38	ad38	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cd3b	ad3b	85 39		sta $39				sta 	gxzTemp1+1
.cd3d	ad3d					_GXGELoop2:
.cd3d	ad3d	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.cd40	ad40	cd 86 06	cmp $0686			cmp 	gxHeight
.cd43	ad43	b0 10		bcs $ad55			bcs 	_GXDGEExit
.cd45	ad45	20 78 ad	jsr $ad78			jsr 	GXRenderOneLine 			; render line
.cd48	ad48	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd4a	ad4a	d0 f1		bne $ad3d			bne 	_GXGELoop2
.cd4c	ad4c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd4e	ad4e	a5 38		lda $38				lda 	gxzTemp1
.cd50	ad50	cd 1f 07	cmp $071f			cmp 	gxSize
.cd53	ad53	d0 d2		bne $ad27			bne 	_GXGELoop
.cd55	ad55					_GXDGEExit:
.cd55	ad55	68		pla				pla 								; restore Y for next time
.cd56	ad56	8d 7c 06	sta $067c			sta 	gxY0
.cd59	ad59	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd5c	ad5c					_GXShiftLeft:
.cd5c	ad5c	18		clc				clc
.cd5d	ad5d	ad 1f 07	lda $071f			lda 	gxSize
.cd60	ad60	6d 7a 06	adc $067a			adc 	gxX0
.cd63	ad63	8d 7a 06	sta $067a			sta 	gxX0
.cd66	ad66	90 03		bcc $ad6b			bcc 	_GXSLNoCarry
.cd68	ad68	ee 7b 06	inc $067b			inc 	gxX0+1
.cd6b	ad6b					_GXSLNoCarry:
.cd6b	ad6b	ca		dex				dex
.cd6c	ad6c	d0 ee		bne $ad5c			bne 	_GXShiftLeft
.cd6e	ad6e	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cd71	ad71	18		clc				clc
.cd72	ad72	60		rts				rts
.cd73	ad73					_GXSLFail:
.cd73	ad73	38		sec				sec
.cd74	ad74	60		rts				rts
.cd75	ad75					_GXCallAcquire:
.cd75	ad75	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd78	ad78					GXRenderOneLine:
.cd78	ad78	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cd7b	ad7b	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y contains position.
.cd7e	ad7e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd80	ad80					_GXROLLoop1:
.cd80	ad80	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd83	ad83	85 3b		sta $3b				sta 	gxzTemp2+1
.cd85	ad85					_GXROLLoop2:
.cd85	ad85	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd87	ad87	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd8a	ad8a	50 06		bvc $ad92			bvc 	_GXNoHFlip
.cd8c	ad8c	ad 20 07	lda $0720			lda 	gxMask
.cd8f	ad8f	38		sec				sec
.cd90	ad90	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd92	ad92					_GXNoHFlip:
.cd92	ad92	aa		tax				tax 								; read from the pixel buffer
.cd93	ad93	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd96	ad96	d0 07		bne $ad9f			bne 	_GXDraw 					; draw if non zero
.cd98	ad98	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd9b	ad9b	29 04		and #$04			and 	#4
.cd9d	ad9d	f0 0a		beq $ada9			beq 	_GXZeroPixel
.cd9f	ad9f					_GXDraw:
.cd9f	ad9f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cda1	ada1	2d 8a 06	and $068a			and 	gxANDValue
.cda4	ada4	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cda7	ada7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cda9	ada9					_GXZeroPixel:
.cda9	ada9	c8		iny				iny 								; advance pointer
.cdaa	adaa	d0 05		bne $adb1			bne 	_GXNoShift
.cdac	adac	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cdae	adae	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.cdb1	adb1					_GXNoShift:
.cdb1	adb1	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cdb3	adb3	d0 d0		bne $ad85			bne 	_GXROLLoop2
.cdb5	adb5	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cdb7	adb7	a5 3a		lda $3a				lda 	gxzTemp2
.cdb9	adb9	cd 1f 07	cmp $071f			cmp 	gxSize
.cdbc	adbc	d0 c2		bne $ad80			bne 	_GXROLLoop1
.cdbe	adbe	ee 7c 06	inc $067c			inc 	gxY0
.cdc1	adc1	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cdc2	adc2					GXFontHandler:
.cdc2	adc2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc4	adc4	4d 87 06	eor $0687			eor 	gxMode
.cdc7	adc7	8d 24 07	sta $0724			sta 	gxUseMode
.cdca	adca	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdcc	adcc	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdce	adce	26 37		rol $37				rol	 	gxzTemp0+1
.cdd0	add0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdd2	add2	26 37		rol $37				rol	 	gxzTemp0+1
.cdd4	add4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdd6	add6	26 37		rol $37				rol	 	gxzTemp0+1
.cdd8	add8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdda	adda	09 c0		ora #$c0			ora 	#$C0
.cddc	addc	85 37		sta $37				sta 	gxzTemp0+1
.cdde	adde	a9 08		lda #$08			lda 	#8 							; size 8x8
.cde0	ade0	a2 e8		ldx #$e8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cde2	ade2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cde4	ade4	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.cde7	ade7	60		rts				rts
.cde8	ade8					GXGetGraphicDataFont:
.cde8	ade8	8a		txa				txa 								; X->Y
.cde9	ade9	a8		tay				tay
.cdea	adea	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdec	adec	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdee	adee	85 01		sta $01				sta 	1
.cdf0	adf0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdf2	adf2	86 01		stx $01				stx 	1 							; put old value back.
.cdf4	adf4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdf6	adf6					_GXExpand:
.cdf6	adf6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdf9	adf9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdfa	adfa	90 08		bcc $ae04			bcc 	_GXNoPixel
.cdfc	adfc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdfd	adfd	ad 88 06	lda $0688			lda 	gxColour
.ce00	ae00	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.ce03	ae03	68		pla				pla
.ce04	ae04					_GXNoPixel:
.ce04	ae04	e8		inx				inx 								; do the whole byte.
.ce05	ae05	e0 08		cpx #$08			cpx 	#8
.ce07	ae07	d0 ed		bne $adf6			bne 	_GXExpand
.ce09	ae09	60		rts				rts
.ce0a	ae0a					GXSpriteHandler:
.ce0a	ae0a	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.ce0d	ae0d	f0 23		beq $ae32			beq 	_GXSHExit
.ce0f	ae0f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ce11	ae11	4d 87 06	eor $0687			eor 	gxMode
.ce14	ae14	8d 24 07	sta $0724			sta 	gxUseMode
.ce17	ae17	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ce19	ae19	da		phx				phx
.ce1a	ae1a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; can access sprite information
.ce1d	ae1d	68		pla				pla
.ce1e	ae1e	20 8b b0	jsr $b08b			jsr 	GXFindSprite 				; get the sprite address
.ce21	ae21	08		php				php
.ce22	ae22	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.ce25	ae25	28		plp				plp
.ce26	ae26	b0 0a		bcs $ae32			bcs		_GXSHExit 					; exit if find failed.
.ce28	ae28	ad 25 07	lda $0725			lda 	GXSizePixels 				; return size
.ce2b	ae2b	a2 33		ldx #$33			ldx 	#GXSpriteAcquire & $FF
.ce2d	ae2d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce2f	ae2f	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.ce32	ae32					_GXSHExit:
.ce32	ae32	60		rts				rts
.ce33	ae33					GXSpriteAcquire:
.ce33	ae33	ad 85 06	lda $0685			lda 	GXSpritePage				; point to base page
.ce36	ae36	85 0b		sta $0b				sta 	GXEditSlot
.ce38	ae38	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.ce3a	ae3a	a9 00		lda #$00			lda 	#0
.ce3c	ae3c	ae 26 07	ldx $0726			ldx 	GXSizeBits
.ce3f	ae3f					_GXTimesRowNumber:
.ce3f	ae3f	18		clc				clc
.ce40	ae40	65 36		adc $36				adc 	zTemp0
.ce42	ae42	ca		dex				dex
.ce43	ae43	10 fa		bpl $ae3f			bpl 	_GXTimesRowNumber
.ce45	ae45	64 37		stz $37				stz 	gxzTemp0+1
.ce47	ae47	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce48	ae48	26 37		rol $37				rol 	gxzTemp0+1
.ce4a	ae4a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce4b	ae4b	26 37		rol $37				rol 	gxzTemp0+1
.ce4d	ae4d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce4e	ae4e	26 37		rol $37				rol 	gxzTemp0+1
.ce50	ae50	85 36		sta $36				sta 	gxzTemp0
.ce52	ae52	18		clc				clc 								; add base address.
.ce53	ae53	a5 36		lda $36				lda 	gxzTemp0
.ce55	ae55	6d 28 07	adc $0728			adc 	GXSpriteOffset
.ce58	ae58	85 36		sta $36				sta 	gxzTemp0
.ce5a	ae5a	a5 37		lda $37				lda 	gxzTemp0+1
.ce5c	ae5c	6d 29 07	adc $0729			adc 	GXSpriteOffset+1
.ce5f	ae5f					_GXSAFindPage:
.ce5f	ae5f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce61	ae61	90 06		bcc $ae69			bcc 	_GXSAFoundPage
.ce63	ae63	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce65	ae65	e6 0b		inc $0b				inc 	GXEditSlot
.ce67	ae67	80 f6		bra $ae5f			bra 	_GXSAFindPage
.ce69	ae69					_GXSAFoundPage:
.ce69	ae69	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce6b	ae6b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce6d	ae6d	a0 00		ldy #$00			ldy 	#0
.ce6f	ae6f					_GXSACopyLoop:
.ce6f	ae6f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce71	ae71	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce74	ae74	c8		iny				iny
.ce75	ae75	cc 25 07	cpy $0725			cpy 	GXSizePixels
.ce78	ae78	d0 f5		bne $ae6f			bne 	_GXSACopyLoop
.ce7a	ae7a	60		rts				rts
.ce7b	ae7b					GXSelect:
.ce7b	ae7b	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce7e	ae7e	f0 22		beq $aea2			beq 	_GXSFail
.ce80	ae80	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce82	ae82	c9 40		cmp #$40			cmp 	#64
.ce84	ae84	b0 1c		bcs $aea2			bcs 	_GXSFail
.ce86	ae86	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce89	ae89	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce8b	ae8b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce8d	ae8d	06 36		asl $36				asl 	gxzTemp0
.ce8f	ae8f	06 36		asl $36				asl 	gxzTemp0
.ce91	ae91	06 36		asl $36				asl 	gxzTemp0
.ce93	ae93	2a		rol a				rol 	a
.ce94	ae94	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce96	ae96	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce99	ae99	85 37		sta $37				sta 	gxzTemp0+1
.ce9b	ae9b	a5 36		lda $36				lda 	gxzTemp0
.ce9d	ae9d	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.cea0	aea0	18		clc				clc
.cea1	aea1	60		rts				rts
.cea2	aea2					_GXSFail:
.cea2	aea2	38		sec				sec
.cea3	aea3	60		rts				rts
.cea4	aea4					GXSelectImage:
.cea4	aea4	ad 82 06	lda $0682			lda 	gxSpritesOn
.cea7	aea7	f0 74		beq $af1d			beq 	_GXSIFail
.cea9	aea9	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceac	aeac	f0 6f		beq $af1d			beq 	_GXSIFail 					; (checking the MSB)
.ceae	aeae	64 01		stz $01				stz 	1
.ceb0	aeb0	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ceb2	aeb2	d0 6b		bne $af1f			bne 	_GXSIHide
.ceb4	aeb4	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ceb6	aeb6	48		pha				pha
.ceb7	aeb7	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.ceba	aeba	68		pla				pla
.cebb	aebb	20 8b b0	jsr $b08b			jsr 	GXFindSprite
.cebe	aebe	b0 5a		bcs $af1a			bcs 	_GXSICloseFail 				; no image
.cec0	aec0	a0 01		ldy #$01			ldy 	#1
.cec2	aec2	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cec5	aec5	85 36		sta $36				sta 	gxzTemp0
.cec7	aec7	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ceca	aeca	85 37		sta $37				sta 	gxzTemp0+1
.cecc	aecc	ad 28 07	lda $0728			lda 	GXSpriteOffset
.cecf	aecf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ced1	aed1	18		clc				clc
.ced2	aed2	ad 29 07	lda $0729			lda 	GXSpriteOffset+1
.ced5	aed5	6d 90 06	adc $0690			adc 	GXSpriteOffsetBase
.ced8	aed8	c8		iny				iny
.ced9	aed9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cedb	aedb	ad 91 06	lda $0691			lda 	GXSpriteOffsetBase+1
.cede	aede	69 00		adc #$00			adc 	#0
.cee0	aee0	c8		iny				iny
.cee1	aee1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cee3	aee3	ad 26 07	lda $0726			lda 	GXSizeBits 					; get raw size
.cee6	aee6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cee8	aee8	2a		rol a				rol 	a 							; x 2
.cee9	aee9	0a		asl a				asl 	a 							; x 4
.ceea	aeea	0a		asl a				asl 	a 							; x 8
.ceeb	aeeb	0a		asl a				asl 	a 							; x 16
.ceec	aeec	0d 27 07	ora $0727			ora 	GXSpriteLUT 				; Or with LUT
.ceef	aeef	0a		asl a				asl 	a 							; 1 shift
.cef0	aef0	09 01		ora #$01			ora 	#1 							; enable sprite.
.cef2	aef2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cef4	aef4	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cef7	aef7	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cefa	aefa	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.cefd	aefd	29 3f		and #$3f			and 	#$3F
.ceff	aeff	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf02	af02	ad 26 07	lda $0726			lda 	GXSizeBits 					; get bit size
.cf05	af05	6a		ror a				ror 	a 							; shift into bits 6/7
.cf06	af06	6a		ror a				ror 	a
.cf07	af07	6a		ror a				ror 	a
.cf08	af08	29 c0		and #$c0			and 	#$C0
.cf0a	af0a	1d d2 06	ora $06d2,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cf0d	af0d	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf10	af10	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.cf13	af13	29 7f		and #$7f			and 	#$7F
.cf15	af15	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					_GXSICloseFail:
.cf1a	af1a	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cf1d	af1d					_GXSIFail:
.cf1d	af1d	38		sec				sec
.cf1e	af1e	60		rts				rts
.cf1f	af1f					_GXSIHide:
.cf1f	af1f	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf22	af22	85 36		sta $36				sta 	gxzTemp0
.cf24	af24	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.cf27	af27	85 37		sta $37				sta 	gxzTemp0+1
.cf29	af29	a9 00		lda #$00			lda 	#0
.cf2b	af2b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf2d	af2d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf30	af30	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.cf33	af33	09 80		ora #$80			ora 	#$80
.cf35	af35	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf38	af38	18		clc				clc
.cf39	af39	60		rts				rts
.cf3a	af3a					GXMoveSprite:
.cf3a	af3a	ad 82 06	lda $0682			lda 	gxSpritesOn
.cf3d	af3d	f0 65		beq $afa4			beq 	_GXSIFail
.cf3f	af3f	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf42	af42	f0 60		beq $afa4			beq 	_GXSIFail
.cf44	af44	85 37		sta $37				sta 	gxzTemp0+1
.cf46	af46	a0 04		ldy #$04			ldy 	#4
.cf48	af48	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cf4b	af4b	85 36		sta $36				sta 	gxzTemp0
.cf4d	af4d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf50	af50	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf53	af53	2a		rol a				rol 	a	 						; into bits 0,1.
.cf54	af54	2a		rol a				rol 	a
.cf55	af55	2a		rol a				rol 	a
.cf56	af56	29 03		and #$03			and 	#3
.cf58	af58	aa		tax				tax
.cf59	af59	bd a6 af	lda $afa6,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf5c	af5c	48		pha				pha
.cf5d	af5d	18		clc				clc
.cf5e	af5e	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf61	af61	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf63	af63	c8		iny				iny
.cf64	af64	ad 7b 06	lda $067b			lda 	gxX0+1
.cf67	af67	69 00		adc #$00			adc 	#0
.cf69	af69	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf6b	af6b	c8		iny				iny
.cf6c	af6c	68		pla				pla
.cf6d	af6d	18		clc				clc
.cf6e	af6e	6d 7c 06	adc $067c			adc 	gxY0
.cf71	af71	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf73	af73	a9 00		lda #$00			lda 	#0
.cf75	af75	69 00		adc #$00			adc 	#0
.cf77	af77	c8		iny				iny
.cf78	af78	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf7a	af7a	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf7d	af7d	6e 7a 06	ror $067a			ror 	gxX0
.cf80	af80	4e 7a 06	lsr $067a			lsr 	gxX0
.cf83	af83	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf86	af86	4e 7c 06	lsr $067c			lsr 	gxY0
.cf89	af89	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf8c	af8c	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x
.cf8f	af8f	29 80		and #$80			and 	#$80
.cf91	af91	0d 7a 06	ora $067a			ora 	gxX0
.cf94	af94	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf97	af97	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf9a	af9a	29 c0		and #$c0			and 	#$C0
.cf9c	af9c	0d 7c 06	ora $067c			ora 	gxY0
.cf9f	af9f	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cfa2	afa2	18		clc				clc
.cfa3	afa3	60		rts				rts
.cfa4	afa4					_GXSIFail:
.cfa4	afa4	38		sec				sec
.cfa5	afa5	60		rts				rts
.cfa6	afa6					_GXMSOffset:
>cfa6	afa6	1c						.byte 	32-8/2
>cfa7	afa7	18						.byte 	32-16/2
>cfa8	afa8	14						.byte 	32-24/2
>cfa9	afa9	10						.byte 	32-32/2
.cfaa	afaa					GXOpenBitmap:
.cfaa	afaa	78		sei				sei 								; no interrupts here
.cfab	afab	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cfad	afad	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cfb0	afb0	58		cli				cli
.cfb1	afb1	60		rts				rts
.cfb2	afb2					GXCloseBitmap:
.cfb2	afb2	78		sei				sei
.cfb3	afb3	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cfb6	afb6	85 0b		sta $0b				sta 	GXEditSlot
.cfb8	afb8	58		cli				cli
.cfb9	afb9	60		rts				rts
.cfba	afba					GXPositionCalc:
.cfba	afba	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cfbc	afbc	48		pha				pha
.cfbd	afbd	ad 7c 06	lda $067c			lda 	GXY0 						; gxzScreen = Y0
.cfc0	afc0	85 3c		sta $3c				sta 	gxzScreen
.cfc2	afc2	64 3d		stz $3d				stz 	gxzScreen+1
.cfc4	afc4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfc6	afc6	26 3d		rol $3d				rol 	gxzScreen+1
.cfc8	afc8	06 3c		asl $3c				asl 	gxzScreen
.cfca	afca	26 3d		rol $3d				rol 	gxzScreen+1
.cfcc	afcc	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfcd	afcd	65 3c		adc $3c				adc 	gxzScreen
.cfcf	afcf	85 3c		sta $3c				sta 	gxzScreen
.cfd1	afd1	90 02		bcc $afd5			bcc 	_GXPCNoCarry
.cfd3	afd3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfd5	afd5					_GXPCNoCarry:
.cfd5	afd5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfd7	afd7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfd9	afd9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfdb	afdb	85 36		sta $36				sta 	gxzTemp0
.cfdd	afdd	64 3d		stz $3d				stz 	gxzScreen+1
.cfdf	afdf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfe1	afe1					_GXPCMultiply32:
.cfe1	afe1	06 3c		asl $3c				asl 	gxzScreen
.cfe3	afe3	26 3d		rol $3d				rol 	gxzScreen+1
.cfe5	afe5	3a		dec a				dec 	a
.cfe6	afe6	d0 f9		bne $afe1			bne 	_GXPCMultiply32
.cfe8	afe8	18		clc				clc
.cfe9	afe9	ad 7a 06	lda $067a			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.cfec	afec	65 3c		adc $3c				adc 	gxzScreen
.cfee	afee	8d 8c 06	sta $068c			sta 	gsOffset
.cff1	aff1	ad 7b 06	lda $067b			lda 	GXX0+1
.cff4	aff4	65 3d		adc $3d				adc 	gxzScreen+1
.cff6	aff6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cff8	aff8	90 04		bcc $affe			bcc 	_GXPCNoOverflow
.cffa	affa	29 1f		and #$1f			and 	#$1F 						; fix it up
.cffc	affc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cffe	affe					_GXPCNoOverflow:
.cffe	affe	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.d000	b000	85 3d		sta $3d				sta 	gxzScreen+1
.d002	b002	64 3c		stz $3c				stz 	gxzScreen
.d004	b004	18		clc				clc
.d005	b005	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.d007	b007	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.d00a	b00a	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.d00c	b00c	68		pla				pla
.d00d	b00d	85 36		sta $36				sta 	gxzTemp0
.d00f	b00f	60		rts				rts
.d010	b010					GXMovePositionDown:
.d010	b010	18		clc				clc 								; add 320 to offset/temp+1
.d011	b011	ad 8c 06	lda $068c			lda 	gsOffset
.d014	b014	69 40		adc #$40			adc 	#64
.d016	b016	8d 8c 06	sta $068c			sta 	gsOffset
.d019	b019	a5 3d		lda $3d				lda 	gxzScreen+1
.d01b	b01b	69 01		adc #$01			adc 	#1
.d01d	b01d	85 3d		sta $3d				sta 	gxzScreen+1
.d01f	b01f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d021	b021	90 07		bcc $b02a			bcc 	_GXMPDExit
.d023	b023	38		sec				sec  								; next page
.d024	b024	e9 20		sbc #$20			sbc 	#$20
.d026	b026	85 3d		sta $3d				sta 	gxzScreen+1
.d028	b028	e6 0b		inc $0b				inc 	GXEditSlot
.d02a	b02a					_GXMPDExit:
.d02a	b02a	60		rts				rts
.d02b	b02b					GXCollide:
.d02b	b02b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d02d	b02d	aa		tax				tax
.d02e	b02e	05 37		ora $37				ora 	gxzTemp0+1
.d030	b030	29 c0		and #$c0			and 	#$C0
.d032	b032	38		sec				sec
.d033	b033	d0 53		bne $b088			bne 	_GXCollideFail 				; if either >= 64, fail.
.d035	b035	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d037	b037	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.d03a	b03a	1d 92 06	ora $0692,x			ora 	GXSpriteLow,x
.d03d	b03d	30 48		bmi $b087			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d03f	b03f	18		clc				clc 								; need to calculate sum of sizes.
.d040	b040	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y
.d043	b043	7d d2 06	adc $06d2,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d046	b046	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d048	b048	6a		ror a				ror 	a 							; 5/6/7
.d049	b049	4a		lsr a				lsr 	a 							; 4/5/6
.d04a	b04a	4a		lsr a				lsr 	a 							; 3/4/5
.d04b	b04b	4a		lsr a				lsr 	a 							; 2/3/4
.d04c	b04c	18		clc				clc
.d04d	b04d	69 08		adc #$08			adc 	#$08
.d04f	b04f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d050	b050	4a		lsr a				lsr 	a
.d051	b051	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d053	b053	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.d056	b056	29 3f		and #$3f			and 	#$3F
.d058	b058	85 39		sta $39				sta 	gxzTemp1+1
.d05a	b05a	38		sec				sec
.d05b	b05b	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.d05e	b05e	29 3f		and #$3f			and 	#$3F
.d060	b060	e5 39		sbc $39				sbc 	gxzTemp1+1
.d062	b062	b0 03		bcs $b067			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d064	b064	49 ff		eor #$ff			eor 	#$FF
.d066	b066	1a		inc a				inc 	a
.d067	b067					_GXCAbs1:
.d067	b067	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d069	b069	b0 1c		bcs $b087			bcs 	_GXOkayFail
.d06b	b06b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d06d	b06d	38		sec				sec 								; calculate |x1-x0|
.d06e	b06e	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y
.d071	b071	fd 92 06	sbc $0692,x			sbc 	GXSpriteLow,x
.d074	b074	b0 03		bcs $b079			bcs 	_GXCAbs2
.d076	b076	49 ff		eor #$ff			eor 	#$FF
.d078	b078	1a		inc a				inc 	a
.d079	b079					_GXCAbs2:
.d079	b079	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d07b	b07b	b0 0a		bcs $b087			bcs 	_GXOkayFail
.d07d	b07d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d07f	b07f	90 02		bcc $b083			bcc 	_GXCHaveLowest
.d081	b081	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d083	b083					_GXCHaveLowest:
.d083	b083	0a		asl a				asl 	a 							; scale to allow for >> 2
.d084	b084	0a		asl a				asl 	a
.d085	b085	18		clc				clc
.d086	b086	60		rts				rts
.d087	b087					_GXOkayFail:
.d087	b087	18		clc				clc
.d088	b088					_GXCollideFail:
.d088	b088	a9 ff		lda #$ff			lda 	#$FF
.d08a	b08a	60		rts				rts
.d08b	b08b					GXFindSprite:
.d08b	b08b	aa		tax				tax
.d08c	b08c	ad 85 06	lda $0685			lda 	GXSpritePage 				; access the base page of the sprite
.d08f	b08f	85 0b		sta $0b				sta 	GXEditSlot
.d091	b091	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d094	b094	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d097	b097	f0 33		beq $b0cc			beq 	_GXFSFail
.d099	b099	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d09c	b09c	8d 29 07	sta $0729			sta 	GXSpriteOffset+1
.d09f	b09f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d0a2	b0a2	48		pha				pha 								; save twice
.d0a3	b0a3	48		pha				pha
.d0a4	b0a4	29 03		and #$03			and 	#3 							; get sprite size
.d0a6	b0a6	8d 26 07	sta $0726			sta 	GXSizeBits 					; save raw (0-3)
.d0a9	b0a9	aa		tax				tax
.d0aa	b0aa	bd ce b0	lda $b0ce,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d0ad	b0ad	8d 25 07	sta $0725			sta 	GXSizePixels 					; save (8/16/24/32)
.d0b0	b0b0	68		pla				pla 								; get LUT
.d0b1	b0b1	4a		lsr a				lsr		a
.d0b2	b0b2	4a		lsr a				lsr		a
.d0b3	b0b3	29 03		and #$03			and 	#3
.d0b5	b0b5	8d 27 07	sta $0727			sta 	GXSpriteLUT
.d0b8	b0b8	68		pla				pla 								; address, neeeds to be x 4
.d0b9	b0b9	29 f0		and #$f0			and 	#$F0
.d0bb	b0bb	8d 28 07	sta $0728			sta 	GXSpriteOffset
.d0be	b0be	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c1	b0c1	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0c4	b0c4	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c7	b0c7	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0ca	b0ca	18		clc				clc
.d0cb	b0cb	60		rts				rts
.d0cc	b0cc					_GXFSFail:
.d0cc	b0cc	38		sec				sec
.d0cd	b0cd	60		rts				rts
.d0ce	b0ce					_GXFXSSTTable:
>d0ce	b0ce	08 10 18 20					.byte 	8,16,24,32
.0725						GXSizePixels:
>0725								.fill 	1
.0726						GXSizeBits:
>0726								.fill 	1
.0727						GXSpriteLUT:
>0727								.fill 	1
.0728						GXSpriteOffset:
>0728								.fill 	2
.d0d2	b0d2					GXSortXY:
.d0d2	b0d2	20 f0 b0	jsr $b0f0			jsr 	GXSortY 					; will be sorted on Y now
.d0d5	b0d5	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d0d8	b0d8	cd 7e 06	cmp $067e			cmp 	gxX1
.d0db	b0db	ad 7b 06	lda $067b			lda 	gXX0+1
.d0de	b0de	ed 7f 06	sbc $067f			sbc 	gXX1+1
.d0e1	b0e1	90 0c		bcc $b0ef			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0e3	b0e3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0e5	b0e5	a0 04		ldy #$04			ldy 	#4
.d0e7	b0e7	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ea	b0ea	e8		inx				inx
.d0eb	b0eb	c8		iny				iny
.d0ec	b0ec	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ef	b0ef					_GXSXYExit:
.d0ef	b0ef	60		rts				rts
.d0f0	b0f0					GXSortY:
.d0f0	b0f0	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0f3	b0f3	cd 80 06	cmp $0680			cmp 	gxY1
.d0f6	b0f6	90 0b		bcc $b103			bcc 	_GXSYSorted
.d0f8	b0f8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0fa	b0fa	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0fc	b0fc					_GXSwap1:
.d0fc	b0fc	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ff	b0ff	88		dey				dey
.d100	b100	ca		dex				dex
.d101	b101	10 f9		bpl $b0fc			bpl 	_GXSwap1
.d103	b103					_GXSYSorted:
.d103	b103	60		rts				rts
.d104	b104					GXSwapXY:
.d104	b104	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d107	b107	48		pha				pha
.d108	b108	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d10b	b10b	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d10e	b10e	68		pla				pla
.d10f	b10f	99 7a 06	sta $067a,y			sta 	gxX0,y
.d112	b112	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d113	b113					KeywordSet0:
>d113	b113	00 65					.text	0,$65,""               ; $80 !0:EOF
>d115	b115	00 58					.text	0,$58,""               ; $81 !1:SH1
>d117	b117	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d119	b119	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d11f	b11f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d127	b127	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d12d	b12d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d134	b134	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d13c	b13c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d143	b143	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d14a	b14a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>d150	b150	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>d156	b156	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>d15e	b15e	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>d165	b165	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>d16c	b16c	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>d173	b173	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>d17b	b17b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>d181	b181	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>d187	b187	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>d18e	b18e	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>d194	b194	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>d19a	b19a	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $96 PEEK(
>d1a1	b1a1	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $97 PEEKD(
>d1a9	b1a9	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $98 PEEKL(
>d1b1	b1b1	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $99 PEEKW(
>d1b9	b1b9	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9a PLAYING(
>d1c1	b1c1	47 28
>d1c3	b1c3	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9b RANDOM(
>d1cb	b1cb	28
>d1cc	b1cc	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9c RIGHT$(
>d1d4	b1d4	28
>d1d5	b1d5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9d RND(
>d1db	b1db	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9e SGN(
>d1e1	b1e1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9f SPC(
>d1e7	b1e7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a0 STR$(
>d1ee	b1ee	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a1 TIMER(
>d1f6	b1f6	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a2 TRUE
>d1fc	b1fc	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a3 VAL(
>d202	b202	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a4 FOR
>d207	b207	02 8f 49 46				.text	2,$8f,"IF"             ; $a5 IF
>d20b	b20b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a6 PROC
>d211	b211	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a7 REPEAT
>d219	b219	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a8 WHILE
>d220	b220	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a9 ENDIF
>d227	b227	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $aa ENDPROC
>d22f	b22f	43
>d230	b230	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ab NEXT
>d236	b236	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>d23c	b23c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $ad UNTIL
>d243	b243	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $ae WEND
>d249	b249	02 9b 42 59				.text	2,$9b,"BY"             ; $af BY
>d24d	b24d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b0 CALL
>d253	b253	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b1 CIRCLE
>d25b	b25b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b2 CLEAR
>d262	b262	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b3 CLS
>d267	b267	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b4 COLOR
>d26e	b26e	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b5 COLOUR
>d276	b276	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b6 DATA
>d27c	b27c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b7 DIM
>d281	b281	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b8 DOWNTO
>d289	b289	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b9 ELSE
>d28f	b28f	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $ba FROM
>d295	b295	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bb GFX
>d29a	b29a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bc GOSUB
>d2a1	b2a1	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bd GOTO
>d2a7	b2a7	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $be HERE
>d2ad	b2ad	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $bf IMAGE
>d2b4	b2b4	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c0 INPUT
>d2bb	b2bb	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c1 LET
>d2c0	b2c0	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c2 LINE
>d2c6	b2c6	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c3 LOCAL
>d2cd	b2cd	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c4 OFF
>d2d2	b2d2	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c5 ON
>d2d6	b2d6	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c6 OUTLINE
>d2de	b2de	45
>d2df	b2df	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c7 PALETTE
>d2e7	b2e7	45
>d2e8	b2e8	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c8 PLOT
>d2ee	b2ee	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $c9 POKE
>d2f4	b2f4	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $ca POKED
>d2fb	b2fb	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cb POKEL
>d302	b302	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cc POKEW
>d309	b309	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cd PRINT
>d310	b310	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ce READ
>d316	b316	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $cf RECT
>d31c	b31c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d0 REM
>d321	b321	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d1 RETURN
>d329	b329	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d2 SOLID
>d330	b330	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d3 SOUND
>d337	b337	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d4 SPRITE
>d33f	b33f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d5 TEXT
>d345	b345	02 a3 54 4f				.text	2,$a3,"TO"             ; $d6 TO
>d349	b349	ff					.text	$FF
.d34a	b34a					KeywordSet1:
>d34a	b34a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d34c	b34c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d34e	b34e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d350	b350	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d358	b358	4c 45
>d35a	b35a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d362	b362	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d36a	b36a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d36f	b36f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d377	b377	45
>d378	b378	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d37c	b37c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d382	b382	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d388	b388	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d38d	b38d	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d393	b393	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d39b	b39b	45
>d39c	b39c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d3a1	b3a1	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $8f SHOOT
>d3a8	b3a8	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $90 SPRITES
>d3b0	b3b0	53
>d3b1	b3b1	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $91 STOP
>d3b7	b3b7	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $92 XGO
>d3bc	b3bc	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $93 XLOAD
>d3c3	b3c3	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $94 ZAP
>d3c8	b3c8	ff					.text	$FF
.d3c9	b3c9					KeywordSet2:
>d3c9	b3c9	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3cb	b3cb	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3cd	b3cd	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3cf	b3cf	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3d4	b3d4	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3d9	b3d9	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3de	b3de	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3e3	b3e3	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3e8	b3e8	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3ed	b3ed	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3f2	b3f2	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3f7	b3f7	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3fc	b3fc	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d401	b401	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d406	b406	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d40b	b40b	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d410	b410	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d415	b415	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d41a	b41a	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d41f	b41f	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d424	b424	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d429	b429	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d42e	b42e	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d433	b433	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d438	b438	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d43d	b43d	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d442	b442	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d447	b447	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d44c	b44c	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d451	b451	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d456	b456	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d45b	b45b	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d460	b460	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d465	b465	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d46a	b46a	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d46f	b46f	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d474	b474	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d479	b479	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d47e	b47e	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d483	b483	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d488	b488	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d48d	b48d	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d492	b492	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d497	b497	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d49c	b49c	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4a1	b4a1	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4a6	b4a6	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4ab	b4ab	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4b0	b4b0	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4b5	b4b5	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4ba	b4ba	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4bf	b4bf	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4c4	b4c4	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4c9	b4c9	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ce	b4ce	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4d3	b4d3	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4d8	b4d8	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4dd	b4dd	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4e2	b4e2	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4e7	b4e7	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4ec	b4ec	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4f1	b4f1	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4f6	b4f6	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4fb	b4fb	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d500	b500	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d505	b505	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d50a	b50a	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d50f	b50f	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d514	b514	ff					.text	$FF
.d515	b515					Export_TKListConvertLine:
.d515	b515	48		pha				pha 								; save indent on the stack
.d516	b516	9c 1d 04	stz $041d			stz 	tbOffset
.d519	b519	9c 2d 04	stz $042d			stz 	tokenBuffer
.d51c	b51c	9c 29 04	stz $0429			stz 	currentListColour
.d51f	b51f	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d521	b521	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d524	b524	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d526	b526	b1 30		lda ($30),y			lda 	(codePtr),y
.d528	b528	aa		tax				tax
.d529	b529	88		dey				dey
.d52a	b52a	b1 30		lda ($30),y			lda 	(codePtr),y
.d52c	b52c	20 0f b7	jsr $b70f			jsr 	LCLWriteNumberXA
.d52f	b52f	68		pla				pla 								; adjustment to indent
.d530	b530	48		pha				pha 								; save on stack
.d531	b531	10 0c		bpl $b53f			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d533	b533	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d534	b534	6d 26 04	adc $0426			adc 	listIndent
.d537	b537	8d 26 04	sta $0426			sta 	listIndent
.d53a	b53a	10 03		bpl $b53f			bpl 	_LCNoAdjust
.d53c	b53c	9c 26 04	stz $0426			stz 	listIndent
.d53f	b53f					_LCNoAdjust:
.d53f	b53f	18		clc				clc		 							; work out actual indent.
.d540	b540	ad 26 04	lda $0426			lda 	listIndent
.d543	b543	0a		asl a				asl 	a
.d544	b544	69 07		adc #$07			adc 	#7
.d546	b546	85 36		sta $36				sta 	zTemp0
.d548	b548					_LCPadOut:
.d548	b548	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d54a	b54a	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d54d	b54d	ad 1d 04	lda $041d			lda 	tbOffset
.d550	b550	c5 36		cmp $36				cmp 	zTemp0
.d552	b552	d0 f4		bne $b548			bne 	_LCPadOut
.d554	b554	a0 03		ldy #$03			ldy 	#3 							; start position.
.d556	b556					_LCMainLoop:
.d556	b556	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d558	b558	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d55b	b55b	b1 30		lda ($30),y			lda 	(codePtr),y
.d55d	b55d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d55f	b55f	f0 17		beq $b578			beq 	_LCExit
.d561	b561	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d563	b563	90 1e		bcc $b583			bcc 	_LCDoubles
.d565	b565	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d567	b567	90 2a		bcc $b593			bcc 	_LCShiftPunc
.d569	b569	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d56b	b56b	90 35		bcc $b5a2			bcc 	_LCPunctuation
.d56d	b56d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d56f	b56f	90 51		bcc $b5c2			bcc 	_LCIdentifiers
.d571	b571	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d573	b573	90 73		bcc $b5e8			bcc 	_LCTokens
.d575	b575	4c 48 b6	jmp $b648			jmp 	_LCData 					; 254-5 are data objects
.d578	b578					_LCExit:
.d578	b578	68		pla				pla 								; get old indent adjust
.d579	b579	30 07		bmi $b582			bmi 	_LCExit2
.d57b	b57b	18		clc				clc 								; add to indent if +ve
.d57c	b57c	6d 26 04	adc $0426			adc 	listIndent
.d57f	b57f	8d 26 04	sta $0426			sta 	listIndent
.d582	b582					_LCExit2:
.d582	b582	60		rts				rts
.d583	b583					_LCDoubles:
.d583	b583	48		pha				pha
.d584	b584	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d585	b585	29 02		and #$02			and 	#2
.d587	b587	09 3c		ora #$3c			ora 	#60 						; make < >
.d589	b589	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d58c	b58c	68		pla				pla 								; restore, do lower bit
.d58d	b58d	29 03		and #$03			and 	#3
.d58f	b58f	09 3c		ora #$3c			ora 	#60
.d591	b591	80 0f		bra $b5a2			bra		_LCPunctuation 				; print, increment, loop
.d593	b593					_LCShiftPunc:
.d593	b593	aa		tax				tax 								; save in X
.d594	b594	29 07		and #$07			and 	#7 							; lower 3 bits
.d596	b596	f0 02		beq $b59a			beq 	_LCNoAdd
.d598	b598	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d59a	b59a					_LCNoAdd:
.d59a	b59a	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d59c	b59c	90 02		bcc $b5a0			bcc 	_LCNoAdd2
.d59e	b59e	09 20		ora #$20			ora 	#32 						; adds $20
.d5a0	b5a0					_LCNoAdd2:
.d5a0	b5a0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5a2	b5a2					_LCPunctuation:
.d5a2	b5a2	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5a4	b5a4	d0 03		bne $b5a9			bne 	_LCPContinue
.d5a6	b5a6	20 bd b6	jsr $b6bd			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5a9	b5a9					_LCPContinue:
.d5a9	b5a9	c9 2e		cmp #$2e			cmp 	#'.'
.d5ab	b5ab	f0 08		beq $b5b5			beq 	_LCPIsConstant
.d5ad	b5ad	c9 30		cmp #$30			cmp 	#'0'
.d5af	b5af	90 0b		bcc $b5bc			bcc 	_LCPNotConstant
.d5b1	b5b1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5b3	b5b3	b0 07		bcs $b5bc			bcs 	_LCPNotConstant
.d5b5	b5b5					_LCPIsConstant:
.d5b5	b5b5	48		pha				pha
.d5b6	b5b6	a9 8a		lda #$8a			lda 	#CLIConstant+$80
.d5b8	b5b8	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d5bb	b5bb	68		pla				pla
.d5bc	b5bc					_LCPNotConstant:
.d5bc	b5bc	c8		iny				iny 								; consume character
.d5bd	b5bd	20 a7 b6	jsr $b6a7			jsr 	LCLWrite 					; write it out.
.d5c0	b5c0	80 94		bra $b556			bra 	_LCMainLoop 				; go round again.
.d5c2	b5c2					_LCIdentifiers:
.d5c2	b5c2	18		clc				clc 								; convert to physical address
.d5c3	b5c3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5c5	b5c5	85 37		sta $37				sta 	zTemp0+1
.d5c7	b5c7	c8		iny				iny
.d5c8	b5c8	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ca	b5ca	85 36		sta $36				sta 	zTemp0
.d5cc	b5cc	c8		iny				iny
.d5cd	b5cd	5a		phy				phy 								; save position
.d5ce	b5ce	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5d0	b5d0	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d5d3	b5d3	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5d5	b5d5					_LCOutIdentifier:
.d5d5	b5d5	c8		iny				iny
.d5d6	b5d6	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5d8	b5d8	29 7f		and #$7f			and 	#$7F
.d5da	b5da	20 f9 b6	jsr $b6f9			jsr 	LCLLowerCase
.d5dd	b5dd	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d5e0	b5e0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5e2	b5e2	10 f1		bpl $b5d5			bpl 	_LCOutIdentifier
.d5e4	b5e4	7a		ply				ply 								; restore position
.d5e5	b5e5	4c 56 b5	jmp $b556			jmp 	_LCMainLoop
.d5e8	b5e8					_LCTokens:
.d5e8	b5e8	aa		tax				tax 								; token in X
.d5e9	b5e9	a9 c9		lda #$c9			lda 	#((KeywordSet2) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	e0 82		cpx #$82			cpx 	#$82
.d5f3	b5f3	f0 16		beq $b60b			beq 	_LCUseShift
.d5f5	b5f5	a9 4a		lda #$4a			lda 	#((KeywordSet1) & $FF)
.d5f7	b5f7	85 36		sta $36				sta 	0+zTemp0
.d5f9	b5f9	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5fb	b5fb	85 37		sta $37				sta 	1+zTemp0
.d5fd	b5fd	e0 81		cpx #$81			cpx 	#$81
.d5ff	b5ff	f0 0a		beq $b60b			beq 	_LCUseShift
.d601	b601	a9 13		lda #$13			lda 	#((KeywordSet0) & $FF)
.d603	b603	85 36		sta $36				sta 	0+zTemp0
.d605	b605	a9 b1		lda #$b1			lda 	#((KeywordSet0) >> 8)
.d607	b607	85 37		sta $37				sta 	1+zTemp0
.d609	b609	80 01		bra $b60c			bra 	_LCNoShift
.d60b	b60b					_LCUseShift:
.d60b	b60b	c8		iny				iny
.d60c	b60c					_LCNoShift:
.d60c	b60c	20 d1 b6	jsr $b6d1			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d60f	b60f	b1 30		lda ($30),y			lda 	(codePtr),y
.d611	b611	aa		tax				tax 								; into X
.d612	b612					_LCFindText:
.d612	b612	ca		dex				dex
.d613	b613	10 0e		bpl $b623			bpl 	_LCFoundText 				; found text.
.d615	b615	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d617	b617	1a		inc a				inc 	a 							; one extra for size
.d618	b618	38		sec				sec 								; one extra for checksum
.d619	b619	65 36		adc $36				adc 	zTemp0 						; go to next token
.d61b	b61b	85 36		sta $36				sta 	zTemp0
.d61d	b61d	90 f3		bcc $b612			bcc 	_LCFindText
.d61f	b61f	e6 37		inc $37				inc 	zTemp0+1
.d621	b621	80 ef		bra $b612			bra 	_LCFindText
.d623	b623					_LCFoundText:
.d623	b623	5a		phy				phy 								; save List position
.d624	b624	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d626	b626	aa		tax				tax
.d627	b627	a9 86		lda #$86			lda 	#CLIToken+$80
.d629	b629	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d62c	b62c	a0 02		ldy #$02			ldy 	#2
.d62e	b62e					_LCCopyToken:
.d62e	b62e	b1 36		lda ($36),y			lda 	(zTemp0),y
.d630	b630	20 f9 b6	jsr $b6f9			jsr 	LCLLowerCase
.d633	b633	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d636	b636	c8		iny				iny
.d637	b637	ca		dex				dex
.d638	b638	d0 f4		bne $b62e			bne 	_LCCopyToken
.d63a	b63a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d63c	b63c	f0 05		beq $b643			beq 	_LCNoSpace
.d63e	b63e	a9 20		lda #$20			lda 	#' '
.d640	b640	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d643	b643					_LCNoSpace:
.d643	b643	7a		ply				ply 								; restore position.
.d644	b644	c8		iny				iny 								; consume token
.d645	b645	4c 56 b5	jmp $b556			jmp 	_LCMainLoop 				; and go around again.
.d648	b648					_LCData:
.d648	b648	48		pha				pha 								; save type $FE/$FF
.d649	b649	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d64b	b64b	c9 fe		cmp #$fe			cmp 	#$FE
.d64d	b64d	f0 22		beq $b671			beq 	_LCHaveOpener
.d64f	b64f	a2 22		ldx #$22			ldx 	#'"'
.d651	b651	a9 8f		lda #$8f			lda 	#CLIData+$80
.d653	b653	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d656	b656	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d658	b658	d0 17		bne $b671			bne 	_LCHaveOpener
.d65a	b65a	88		dey				dey 								; what precedes it ?
.d65b	b65b	b1 30		lda ($30),y			lda 	(codePtr),y
.d65d	b65d	c8		iny				iny
.d65e	b65e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d660	b660	d0 0f		bne $b671			bne 	_LCHaveOpener
.d662	b662	a9 09		lda #$09			lda 	#9 							; tab
.d664	b664	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d667	b667	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d669	b669	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d66c	b66c	a9 85		lda #$85			lda 	#CLIFComment+$80
.d66e	b66e	20 9e b6	jsr $b69e			jsr 	LCLWriteColour
.d671	b671					_LCHaveOpener:
.d671	b671	8a		txa				txa 								; output prefix (# or ")
.d672	b672	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d675	b675	c8		iny				iny 								; get count
.d676	b676	b1 30		lda ($30),y			lda 	(codePtr),y
.d678	b678	aa		tax				tax
.d679	b679	c8		iny				iny 								; point at first character
.d67a	b67a					_LCOutData:
.d67a	b67a	b1 30		lda ($30),y			lda 	(codePtr),y
.d67c	b67c	c9 00		cmp #$00			cmp 	#0
.d67e	b67e	f0 03		beq $b683			beq 	_LCNoPrint
.d680	b680	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d683	b683					_LCNoPrint:
.d683	b683	c8		iny				iny
.d684	b684	ca		dex				dex
.d685	b685	d0 f3		bne $b67a			bne 	_LCOutData
.d687	b687	68		pla				pla 								; closing " required ?
.d688	b688	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d68a	b68a	d0 0f		bne $b69b			bne 	_LCNoQuote
.d68c	b68c	a9 22		lda #$22			lda 	#'"'
.d68e	b68e	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d691	b691	ad 6f 06	lda $066f			lda 	EXTTextColour
.d694	b694	29 0f		and #$0f			and 	#$0F
.d696	b696	09 90		ora #$90			ora 	#$90
.d698	b698	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d69b	b69b					_LCNoQuote:
.d69b	b69b	4c 56 b5	jmp $b556			jmp 	_LCMainLoop
.d69e	b69e					LCLWriteColour:
.d69e	b69e	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6a1	b6a1	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6a4	b6a4	d0 01		bne $b6a7			bne 	LCLWrite 					; if different, output it
.d6a6	b6a6	60		rts				rts
.d6a7	b6a7					LCLWrite:
.d6a7	b6a7	da		phx				phx
.d6a8	b6a8	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6ab	b6ab	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6ae	b6ae	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6b1	b6b1	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6b4	b6b4	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6b6	b6b6	30 03		bmi $b6bb			bmi 	_LCLNoColour
.d6b8	b6b8	8d 27 04	sta $0427			sta 	LCLastCharacter
.d6bb	b6bb					_LCLNoColour:
.d6bb	b6bb	fa		plx				plx
.d6bc	b6bc	60		rts				rts
.d6bd	b6bd					LCLDeleteLastSpace:
.d6bd	b6bd	48		pha				pha
.d6be	b6be	da		phx				phx
.d6bf	b6bf	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6c2	b6c2	f0 0a		beq $b6ce			beq 	_LCDLSExit
.d6c4	b6c4	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6c7	b6c7	c9 20		cmp #$20			cmp 	#' '
.d6c9	b6c9	d0 03		bne $b6ce			bne 	_LCDLSExit
.d6cb	b6cb	ce 1d 04	dec $041d			dec 	tbOffset
.d6ce	b6ce					_LCDLSExit:
.d6ce	b6ce	fa		plx				plx
.d6cf	b6cf	68		pla				pla
.d6d0	b6d0	60		rts				rts
.d6d1	b6d1					LCLCheckSpaceRequired:
.d6d1	b6d1	ad 27 04	lda $0427			lda 	LCLastCharacter 			; check last character
.d6d4	b6d4	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6d6	b6d6	f0 1b		beq $b6f3			beq 	_LCCSRSpace
.d6d8	b6d8	c9 29		cmp #$29			cmp 	#')'
.d6da	b6da	f0 17		beq $b6f3			beq 	_LCCSRSpace
.d6dc	b6dc	c9 23		cmp #$23			cmp 	#'#'
.d6de	b6de	f0 13		beq $b6f3			beq 	_LCCSRSpace
.d6e0	b6e0	20 f9 b6	jsr $b6f9			jsr 	LCLLowerCase 				; saves a little effort
.d6e3	b6e3	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6e5	b6e5	90 11		bcc $b6f8			bcc 	_LCCSRExit
.d6e7	b6e7	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6e9	b6e9	90 08		bcc $b6f3			bcc 	_LCCSRSpace
.d6eb	b6eb	c9 61		cmp #$61			cmp 	#"a"
.d6ed	b6ed	90 09		bcc $b6f8			bcc 	_LCCSRExit
.d6ef	b6ef	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6f1	b6f1	b0 05		bcs $b6f8			bcs 	_LCCSRExit
.d6f3	b6f3					_LCCSRSpace:
.d6f3	b6f3	a9 20		lda #$20			lda 	#' '
.d6f5	b6f5	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d6f8	b6f8					_LCCSRExit:
.d6f8	b6f8	60		rts				rts
.d6f9	b6f9					LCLLowerCase:
.d6f9	b6f9	c9 41		cmp #$41			cmp 	#"A"
.d6fb	b6fb	90 06		bcc $b703			bcc 	_LCLLCOut
.d6fd	b6fd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6ff	b6ff	b0 02		bcs $b703			bcs 	_LCLLCOut
.d701	b701	69 20		adc #$20			adc 	#$20
.d703	b703					_LCLLCOut:
.d703	b703	60		rts				rts
.d704	b704					LCLUpperCase:
.d704	b704	c9 61		cmp #$61			cmp 	#"a"
.d706	b706	90 06		bcc $b70e			bcc 	_LCLUCOut
.d708	b708	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70a	b70a	b0 02		bcs $b70e			bcs 	_LCLUCOut
.d70c	b70c	e9 1f		sbc #$1f			sbc 	#$1F
.d70e	b70e					_LCLUCOut:
.d70e	b70e	60		rts				rts
.d70f	b70f					LCLWriteNumberXA:
.d70f	b70f	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d711	b711					_LCLWNLoop1:
.d711	b711	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d713	b713					_LCLWNLoop2:
.d713	b713	48		pha				pha 								; save initial LSB
.d714	b714	38		sec				sec
.d715	b715	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d717	b717	f9 48 b7	sbc $b748,y			sbc 	_LCLWNTable,y
.d71a	b71a	48		pha				pha
.d71b	b71b	8a		txa				txa
.d71c	b71c	f9 49 b7	sbc $b749,y			sbc 	_LCLWNTable+1,y
.d71f	b71f	90 07		bcc $b728			bcc 	_LCLWNUnderflow
.d721	b721	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d723	b723	aa		tax				tax 								; update X
.d724	b724	68		pla				pla 								; restore A
.d725	b725	7a		ply				ply 								; throw original
.d726	b726	80 eb		bra $b713			bra 	_LCLWNLoop2 				; try again.
.d728	b728					_LCLWNUnderflow:
.d728	b728	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d72a	b72a	d0 06		bne $b732			bne 	_LCLWNOut
.d72c	b72c	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d72f	b72f	3a		dec a				dec 	a
.d730	b730	f0 04		beq $b736			beq 	_LCLWNNext
.d732	b732					_LCLWNOut:
.d732	b732	98		tya				tya
.d733	b733	20 42 b7	jsr $b742			jsr 	_LCLWNOutDigit
.d736	b736					_LCLWNNext:
.d736	b736	7a		ply				ply 							 	; restore original value.
.d737	b737	68		pla				pla
.d738	b738	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d73a	b73a	c8		iny				iny
.d73b	b73b	c8		iny				iny
.d73c	b73c	84 37		sty $37				sty 	zTemp0+1
.d73e	b73e	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d740	b740	d0 cf		bne $b711			bne 	_LCLWNLoop1
.d742	b742					_LCLWNOutDigit:
.d742	b742	09 30		ora #$30			ora 	#'0'
.d744	b744	20 a7 b6	jsr $b6a7			jsr 	LCLWrite
.d747	b747	60		rts				rts
.d748	b748					_LCLWNTable:
>d748	b748	10 27						.word 	10000
>d74a	b74a	e8 03						.word 	1000
>d74c	b74c	64 00						.word 	100
>d74e	b74e	0a 00						.word 	10
.d750	b750					TOKSearchTable:
.d750	b750	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d752	b752	85 36		sta $36				sta 	zTemp0
.d754	b754	a0 00		ldy #$00			ldy 	#0
.d756	b756	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d758	b758	85 38		sta $38				sta 	zTemp1
.d75a	b75a					_TSTLoop:
.d75a	b75a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d75c	b75c	30 49		bmi $b7a7			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d75e	b75e	f0 2e		beq $b78e			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d760	b760	c8		iny				iny 								; get the hash
.d761	b761	b1 36		lda ($36),y			lda 	(zTemp0),y
.d763	b763	88		dey				dey
.d764	b764	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d767	b767	d0 25		bne $b78e			bne 	_TSTNext
.d769	b769	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d76c	b76c	38		sec				sec
.d76d	b76d	ed 00 04	sbc $0400			sbc 	identStart
.d770	b770	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d772	b772	d0 1a		bne $b78e			bne 	_TSTNext
.d774	b774	5a		phy				phy 								; save Y , we might fail to match.
.d775	b775	c8		iny				iny 								; point to text
.d776	b776	c8		iny				iny
.d777	b777	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d77a	b77a					_TSTCompareName:
.d77a	b77a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d77d	b77d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d77f	b77f	d0 0c		bne $b78d			bne 	_TSTNextPullY 				; fail, pullY and do next
.d781	b781	e8		inx				inx
.d782	b782	c8		iny				iny
.d783	b783	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d786	b786	d0 f2		bne $b77a			bne 	_TSTCompareName
.d788	b788	7a		ply				ply 								; throw Y
.d789	b789	a5 38		lda $38				lda 	zTemp1 						; get token #
.d78b	b78b	38		sec				sec 								; return with CS = passed.
.d78c	b78c	60		rts				rts
.d78d	b78d					_TSTNextPullY:
.d78d	b78d	7a		ply				ply 								; restore current, fall through.
.d78e	b78e					_TSTNext:
.d78e	b78e	e6 38		inc $38				inc 	zTemp1 						; token counter
.d790	b790	98		tya				tya
.d791	b791	18		clc				clc
.d792	b792	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d794	b794	1a		inc a				inc 	a 							; +1
.d795	b795	1a		inc a				inc 	a 							; +2
.d796	b796	a8		tay				tay
.d797	b797	10 c1		bpl $b75a			bpl 	_TSTLoop 					; if Y < $80 loop back
.d799	b799	98		tya				tya 								; add Y to zTemp0 and reset Y
.d79a	b79a	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d79c	b79c	18		clc				clc  								; but have tables > 255 bytes
.d79d	b79d	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d79f	b79f	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7a1	b7a1	90 b7		bcc $b75a			bcc 	_TSTLoop
.d7a3	b7a3	e6 37		inc $37				inc 	zTemp0+1
.d7a5	b7a5	80 b3		bra $b75a			bra 	_TSTLoop
.d7a7	b7a7					_TSTFail:
.d7a7	b7a7	18		clc				clc
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					Export_TKTokeniseLine:
.d7a9	b7a9	20 31 b9	jsr $b931			jsr 	LCLFixLineBufferCase 		; fix line case
.d7ac	b7ac	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ae	b7ae	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7b1	b7b1	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7b4	b7b4	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7b7	b7b7	a2 ff		ldx #$ff			ldx 	#$FF
.d7b9	b7b9					_TKFindFirst:
.d7b9	b7b9	e8		inx				inx
.d7ba	b7ba	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7bd	b7bd	f0 79		beq $b838			beq 	_TKExit
.d7bf	b7bf	c9 20		cmp #$20			cmp 	#' '
.d7c1	b7c1	90 f6		bcc $b7b9			bcc 	_TKFindFirst
.d7c3	b7c3	c9 30		cmp #$30			cmp 	#'0'
.d7c5	b7c5	90 07		bcc $b7ce			bcc 	_TKNoLineNumber
.d7c7	b7c7	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7c9	b7c9	b0 03		bcs $b7ce			bcs 	_TKNoLineNumber
.d7cb	b7cb	20 5b b9	jsr $b95b			jsr 	TOKExtractLineNumber
.d7ce	b7ce					_TKNoLineNumber:
.d7ce	b7ce					_TKTokeniseLoop:
.d7ce	b7ce	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7d1	b7d1	f0 65		beq $b838			beq 	_TKExit
.d7d3	b7d3	e8		inx				inx
.d7d4	b7d4	c9 20		cmp #$20			cmp 	#' '
.d7d6	b7d6	f0 f6		beq $b7ce			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7d8	b7d8	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7d9	b7d9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7db	b7db	f0 61		beq $b83e			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7dd	b7dd	c9 41		cmp #$41			cmp 	#'A'
.d7df	b7df	90 04		bcc $b7e5			bcc 	_TKTokenisePunctuation
.d7e1	b7e1	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7e3	b7e3	90 59		bcc $b83e			bcc 	_TKTokeniseIdentifier
.d7e5	b7e5					_TKTokenisePunctuation:
.d7e5	b7e5	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7e7	b7e7	f0 27		beq $b810			beq 	_TKString
.d7e9	b7e9	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7eb	b7eb	f0 28		beq $b815			beq 	_TKHexConstant
.d7ed	b7ed	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7ef	b7ef	f0 29		beq $b81a			beq 	_TKCheckDouble
.d7f1	b7f1	c9 3e		cmp #$3e			cmp 	#'>'
.d7f3	b7f3	f0 25		beq $b81a			beq 	_TKCheckDouble
.d7f5	b7f5					_TKStandardPunctuation:
.d7f5	b7f5	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7f8	b7f8	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7fa	b7fa	90 0e		bcc $b80a			bcc 	_TKNoShift
.d7fc	b7fc	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7fd	b7fd	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7ff	b7ff	85 36		sta $36				sta 	zTemp0
.d801	b801	68		pla				pla
.d802	b802	29 20		and #$20			and 	#32 						; bit 5
.d804	b804	4a		lsr a				lsr 	a 							; shift into bit 3
.d805	b805	4a		lsr a				lsr 	a
.d806	b806	05 36		ora $36				ora 	zTemp0
.d808	b808	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d80a	b80a					_TKNoShift:
.d80a	b80a	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte 				; write the punctuation character
.d80d	b80d	e8		inx				inx 								; consume the character
.d80e	b80e	80 be		bra $b7ce			bra 	_TKTokeniseLoop 			; and loop round again.
.d810	b810					_TKString:
.d810	b810	20 c0 b8	jsr $b8c0			jsr 	TOKTokenString
.d813	b813	80 b9		bra $b7ce			bra 	_TKTokeniseLoop
.d815	b815					_TKHexConstant:
.d815	b815	20 fb b8	jsr $b8fb			jsr 	TOKHexConstant
.d818	b818	80 b4		bra $b7ce			bra 	_TKTokeniseLoop
.d81a	b81a					_TKCheckDouble:
.d81a	b81a	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d81d	b81d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d81f	b81f	90 d4		bcc $b7f5			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d821	b821	c9 3f		cmp #$3f			cmp 	#'>'+1
.d823	b823	b0 d0		bcs $b7f5			bcs 	_TKStandardPunctuation
.d825	b825	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d828	b828	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d82a	b82a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d82b	b82b	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d82e	b82e	38		sec				sec
.d82f	b82f	e9 3c		sbc #$3c			sbc 	#'<'
.d831	b831	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte 				; this is in the range 0-7
.d834	b834	e8		inx				inx 								; consume both
.d835	b835	e8		inx				inx
.d836	b836	80 96		bra $b7ce			bra 	_TKTokeniseLoop
.d838	b838	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83a	b83a	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d83d	b83d	60		rts				rts
.d83e	b83e					_TKTokeniseIdentifier:
.d83e	b83e	8e 00 04	stx $0400			stx 	identStart 					; save start
.d841	b841	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d844	b844					_TKCheckLoop:
.d844	b844	e8		inx				inx 								; look at next, we know first is identifier already.
.d845	b845	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d848	b848	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d84a	b84a	f0 f8		beq $b844			beq 	_TKCheckLoop
.d84c	b84c	c9 30		cmp #$30			cmp	 	#"0"
.d84e	b84e	90 0c		bcc $b85c			bcc 	_TKEndIdentifier
.d850	b850	c9 3a		cmp #$3a			cmp 	#"9"+1
.d852	b852	90 f0		bcc $b844			bcc 	_TKCheckLoop
.d854	b854	c9 41		cmp #$41			cmp	 	#"A"
.d856	b856	90 04		bcc $b85c			bcc 	_TKEndIdentifier
.d858	b858	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d85a	b85a	90 e8		bcc $b844			bcc 	_TKCheckLoop
.d85c	b85c					_TKEndIdentifier:
.d85c	b85c	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d85f	b85f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d861	b861	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d863	b863	f0 06		beq $b86b			beq 	_TKHasTypeCharacter
.d865	b865	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d867	b867	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d869	b869	d0 07		bne $b872			bne 	_TKNoTypeCharacter
.d86b	b86b					_TKHasTypeCharacter:
.d86b	b86b	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d86e	b86e	e8		inx				inx 								; consume the type character
.d86f	b86f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d872	b872					_TKNoTypeCharacter:
.d872	b872	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d874	b874	d0 09		bne $b87f			bne 	_TKNoArray
.d876	b876	e8		inx				inx 								; skip the (
.d877	b877	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d87a	b87a	09 04		ora #$04			ora 	#$04
.d87c	b87c	8d 04 04	sta $0404			sta 	identTypeByte
.d87f	b87f					_TKNoArray:
.d87f	b87f	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d882	b882	20 1c b9	jsr $b91c			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d885	b885	a0 b1		ldy #$b1			ldy 	#(KeywordSet0) >> 8
.d887	b887	a9 13		lda #$13			lda 	#(KeywordSet0) & $FF
.d889	b889	20 50 b7	jsr $b750			jsr 	TOKSearchTable
.d88c	b88c	a2 00		ldx #$00			ldx 	#0
.d88e	b88e	b0 1f		bcs $b8af			bcs 	_TKFoundToken
.d890	b890	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d892	b892	a9 4a		lda #$4a			lda 	#(KeywordSet1) & $FF
.d894	b894	20 50 b7	jsr $b750			jsr 	TOKSearchTable
.d897	b897	a2 81		ldx #$81			ldx 	#$81
.d899	b899	b0 14		bcs $b8af			bcs 	_TKFoundToken
.d89b	b89b	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d89d	b89d	a9 c9		lda #$c9			lda 	#(KeywordSet2) & $FF
.d89f	b89f	20 50 b7	jsr $b750			jsr 	TOKSearchTable
.d8a2	b8a2	a2 82		ldx #$82			ldx 	#$82
.d8a4	b8a4	b0 09		bcs $b8af			bcs 	_TKFoundToken
.d8a6	b8a6	20 ac b9	jsr $b9ac			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8a9	b8a9	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8ac	b8ac	4c ce b7	jmp $b7ce			jmp 	_TKTokeniseLoop 			; and go round again.
.d8af	b8af					_TKFoundToken:
.d8af	b8af	48		pha				pha 								; save token
.d8b0	b8b0	8a		txa				txa 								; shift in X, is there one ?
.d8b1	b8b1	f0 03		beq $b8b6			beq 	_TKNoTShift
.d8b3	b8b3	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte 				; if so, write it out
.d8b6	b8b6					_TKNoTShift:
.d8b6	b8b6	68		pla				pla 								; restore and write token
.d8b7	b8b7	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d8ba	b8ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8bd	b8bd	4c ce b7	jmp $b7ce			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c0	b8c0					TOKTokenString:
.d8c0	b8c0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8c2	b8c2	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d8c5	b8c5	e8		inx				inx									; start of quoted string.
.d8c6	b8c6	da		phx				phx 								; push start of string on top
.d8c7	b8c7	ca		dex				dex 								; because we pre-increment
.d8c8	b8c8					_TSFindEnd:
.d8c8	b8c8	e8		inx				inx
.d8c9	b8c9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8cc	b8cc	f0 04		beq $b8d2			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8ce	b8ce	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8d0	b8d0	d0 f6		bne $b8c8			bne 	_TSFindEnd
.d8d2	b8d2					_TSEndOfString:
.d8d2	b8d2	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8d3	b8d3	48		pha				pha 								; save terminating character
.d8d4	b8d4	20 dc b8	jsr $b8dc			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d8d7	b8d7	68		pla				pla 								; terminating character
.d8d8	b8d8	f0 01		beq $b8db			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d8da	b8da	e8		inx				inx
.d8db	b8db					_TSNotQuote:
.d8db	b8db	60		rts				rts
.d8dc	b8dc					TOKWriteBlockXY:
.d8dc	b8dc	86 36		stx $36				stx 	zTemp0 						; save end character
.d8de	b8de	98		tya				tya 								; use 2's complement to work out the byte size
.d8df	b8df	49 ff		eor #$ff			eor 	#$FF
.d8e1	b8e1	38		sec				sec
.d8e2	b8e2	65 36		adc $36				adc 	zTemp0
.d8e4	b8e4	1a		inc a				inc 	a 							; one extra for NULL
.d8e5	b8e5	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d8e8	b8e8					_TOBlockLoop:
.d8e8	b8e8	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d8ea	b8ea	f0 09		beq $b8f5			beq 	_TOBlockExit
.d8ec	b8ec	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d8ef	b8ef	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d8f2	b8f2	c8		iny				iny
.d8f3	b8f3	80 f3		bra $b8e8			bra 	_TOBlockLoop
.d8f5	b8f5					_TOBlockExit:
.d8f5	b8f5	a9 00		lda #$00			lda 	#0 							; add NULL.
.d8f7	b8f7	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d8fa	b8fa	60		rts				rts
.d8fb	b8fb					TOKHexConstant:
.d8fb	b8fb	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d8fd	b8fd	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.d900	b900	e8		inx				inx									; start of quoted string.
.d901	b901	da		phx				phx 								; push start of constant on top
.d902	b902	ca		dex				dex
.d903	b903					_THFindLoop:
.d903	b903	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d904	b904	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d907	b907	c9 30		cmp #$30			cmp 	#"0"
.d909	b909	90 0c		bcc $b917			bcc 	_THFoundEnd
.d90b	b90b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d90d	b90d	90 f4		bcc $b903			bcc 	_THFindLoop
.d90f	b90f	c9 41		cmp #$41			cmp 	#"A"
.d911	b911	90 04		bcc $b917			bcc 	_THFoundEnd
.d913	b913	c9 47		cmp #$47			cmp 	#"F"+1
.d915	b915	90 ec		bcc $b903			bcc 	_THFindLoop
.d917	b917					_THFoundEnd:
.d917	b917	7a		ply				ply 								; restore start
.d918	b918	20 dc b8	jsr $b8dc			jsr 	TOKWriteBlockXY 			; output the block
.d91b	b91b	60		rts				rts
.d91c	b91c					TOKCalculateHash:
.d91c	b91c	da		phx				phx
.d91d	b91d	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d920	b920	a9 00		lda #$00			lda 	#0
.d922	b922					_TCHLoop:
.d922	b922	18		clc				clc
.d923	b923	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d926	b926	e8		inx				inx
.d927	b927	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d92a	b92a	d0 f6		bne $b922			bne 	_TCHLoop
.d92c	b92c	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d92f	b92f	fa		plx				plx
.d930	b930	60		rts				rts
.d931	b931					LCLFixLineBufferCase:
.d931	b931	a2 00		ldx #$00			ldx 	#0
.d933	b933					_FLBCLoop:
.d933	b933	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d936	b936	f0 22		beq $b95a			beq 	_FLBCExit 					; end of string.
.d938	b938	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d93a	b93a	f0 11		beq $b94d			beq 	_FLBCInQuotes
.d93c	b93c	e8		inx				inx
.d93d	b93d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d93f	b93f	90 f2		bcc $b933			bcc 	_FLBCLoop
.d941	b941	c9 7b		cmp #$7b			cmp 	#'z'+1
.d943	b943	b0 ee		bcs $b933			bcs 	_FLBCLoop
.d945	b945	38		sec				sec 								; make U/C
.d946	b946	e9 20		sbc #$20			sbc 	#32
.d948	b948	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d94b	b94b	80 e6		bra $b933			bra 	_FLBCLoop
.d94d	b94d					_FLBCInQuotes:
.d94d	b94d	e8		inx				inx 								; advance
.d94e	b94e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d951	b951	f0 07		beq $b95a			beq 	_FLBCExit 					; exit on EOS
.d953	b953	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d955	b955	d0 f6		bne $b94d			bne 	_FLBCInQuotes
.d957	b957	e8		inx				inx 								; skip over it
.d958	b958	80 d9		bra $b933			bra 	_FLBCLoop
.d95a	b95a					_FLBCExit:
.d95a	b95a	60		rts				rts
.d95b	b95b					TOKExtractLineNumber:
.d95b	b95b	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d95e	b95e	48		pha				pha
.d95f	b95f	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d962	b962	48		pha				pha
.d963	b963	20 99 b9	jsr $b999			jsr 	_LCLNTimes2 				; line # x 2
.d966	b966	20 99 b9	jsr $b999			jsr 	_LCLNTimes2 				; line # x 4
.d969	b969	18		clc				clc 								; add stacked value
.d96a	b96a	68		pla				pla
.d96b	b96b	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d96e	b96e	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d971	b971	68		pla				pla
.d972	b972	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d975	b975	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d978	b978	20 99 b9	jsr $b999			jsr 	_LCLNTimes2 				; line # x 10
.d97b	b97b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d97e	b97e	e8		inx				inx
.d97f	b97f	29 0f		and #$0f			and 	#15 						; add to line #
.d981	b981	18		clc				clc
.d982	b982	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d985	b985	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d988	b988	90 03		bcc $b98d			bcc 	_TLENNoCarry
.d98a	b98a	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d98d	b98d					_TLENNoCarry:
.d98d	b98d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d990	b990	c9 30		cmp #$30			cmp 	#'0'
.d992	b992	90 04		bcc $b998			bcc 	_TLENExit
.d994	b994	c9 3a		cmp #$3a			cmp 	#'9'+1
.d996	b996	90 c3		bcc $b95b			bcc 	TOKExtractLineNumber
.d998	b998					_TLENExit:
.d998	b998	60		rts				rts
.d999	b999					_LCLNTimes2:
.d999	b999	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d99c	b99c	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d99f	b99f	60		rts				rts
.d9a0	b9a0					TOKWriteByte:
.d9a0	b9a0	da		phx				phx
.d9a1	b9a1	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9a4	b9a4	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9a7	b9a7	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9aa	b9aa	fa		plx				plx
.d9ab	b9ab	60		rts				rts
.d9ac	b9ac					TOKCheckCreateVariableRecord:
.d9ac	b9ac	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9ae	b9ae	85 36		sta $36				sta 	0+zTemp0
.d9b0	b9b0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9b2	b9b2	85 37		sta $37				sta 	1+zTemp0
.d9b4	b9b4					_CCVSearch:
.d9b4	b9b4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9b6	b9b6	f0 2c		beq $b9e4			beq 	_CCVFail
.d9b8	b9b8	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9ba	b9ba	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9bc	b9bc	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9bf	b9bf	d0 16		bne $b9d7			bne 	_CCVNext
.d9c1	b9c1	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9c3	b9c3	ae 00 04	ldx $0400			ldx 	identStart
.d9c6	b9c6					_CCVCompare:
.d9c6	b9c6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9c9	b9c9	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9cb	b9cb	e8		inx				inx 								; advance pointers
.d9cc	b9cc	c8		iny				iny
.d9cd	b9cd	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9ce	b9ce	d0 07		bne $b9d7			bne 	_CCVNext  					; didn't match go to next.
.d9d0	b9d0	90 f4		bcc $b9c6			bcc 	_CCVCompare 				; not finished yet.
.d9d2	b9d2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d9d5	b9d5	f0 41		beq $ba18			beq 	_CCVFound 					; yes, we were successful
.d9d7	b9d7					_CCVNext:
.d9d7	b9d7	18		clc				clc 								; go to next record.
.d9d8	b9d8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d9da	b9da	65 36		adc $36				adc 	zTemp0
.d9dc	b9dc	85 36		sta $36				sta 	zTemp0
.d9de	b9de	90 d4		bcc $b9b4			bcc 	_CCVSearch
.d9e0	b9e0	e6 37		inc $37				inc 	zTemp0+1
.d9e2	b9e2	80 d0		bra $b9b4			bra 	_CCVSearch
.d9e4	b9e4					_CCVFail:
.d9e4	b9e4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d9e6	b9e6	ad 03 04	lda $0403			lda 	identHash
.d9e9	b9e9	91 36		sta ($36),y			sta 	(zTemp0),y
.d9eb	b9eb	c8		iny				iny 								; offset 2 is the type byte
.d9ec	b9ec	ad 04 04	lda $0404			lda 	identTypeByte
.d9ef	b9ef	91 36		sta ($36),y			sta 	(zTemp0),y
.d9f1	b9f1	c8		iny				iny
.d9f2	b9f2					_CCVData:
.d9f2	b9f2	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d9f4	b9f4	91 36		sta ($36),y			sta 	(zTemp0),y
.d9f6	b9f6	c8		iny				iny
.d9f7	b9f7	c0 08		cpy #$08			cpy 	#8
.d9f9	b9f9	90 f7		bcc $b9f2			bcc 	_CCVData
.d9fb	b9fb	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d9fe	b9fe					_CCVCopyName:
.d9fe	b9fe	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da01	ba01	91 36		sta ($36),y			sta 	(zTemp0),y
.da03	ba03	e8		inx				inx
.da04	ba04	c8		iny				iny
.da05	ba05	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da08	ba08	d0 f4		bne $b9fe			bne 	_CCVCopyName
.da0a	ba0a	98		tya				tya 								; patch offset
.da0b	ba0b	92 36		sta ($36)			sta 	(zTemp0)
.da0d	ba0d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da0f	ba0f	91 36		sta ($36),y			sta 	(zTemp0),y
.da11	ba11	88		dey				dey
.da12	ba12	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da14	ba14	09 80		ora #$80			ora 	#$80
.da16	ba16	91 36		sta ($36),y			sta 	(zTemp0),y
.da18	ba18					_CCVFound:
.da18	ba18	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da1a	ba1a	38		sec				sec
.da1b	ba1b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da1d	ba1d	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da1f	ba1f	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.da22	ba22	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da24	ba24	20 a0 b9	jsr $b9a0			jsr 	TOKWriteByte
.da27	ba27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da28	ba28					SNDCheckChannel:
.da28	ba28	aa		tax				tax
.da29	ba29	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da2c	ba2c	d0 38		bne $ba66			bne 	_SNDCCExit
.da2e	ba2e	da		phx				phx 								; save current channel
.da2f	ba2f	8a		txa				txa 								; put in A
.da30	ba30	20 ac ba	jsr $baac			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da33	ba33	68		pla				pla 								; channel # in A
.da34	ba34	90 30		bcc $ba66			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da36	ba36	a8		tay				tay 								; Y is the channel #
.da37	ba37	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da3a	ba3a	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da3d	ba3d	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da40	ba40	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da43	ba43	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da46	ba46	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da49	ba49	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da4c	ba4c	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da4f	ba4f	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da52	ba52	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da55	ba55	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da58	ba58	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da5b	ba5b	5a		phy				phy 								; save channel #
.da5c	ba5c	20 c6 ba	jsr $bac6			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da5f	ba5f	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da62	ba62	68		pla				pla
.da63	ba63	20 67 ba	jsr $ba67			jsr 	SNDUpdateNote 				; update channel A
.da66	ba66					_SNDCCExit:
.da66	ba66	60		rts				rts
.da67	ba67					SNDUpdateNote:
.da67	ba67	aa		tax				tax 								; so we can access records
.da68	ba68	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da69	ba69	0a		asl a				asl 	a
.da6a	ba6a	0a		asl a				asl 	a
.da6b	ba6b	0a		asl a				asl 	a
.da6c	ba6c	0a		asl a				asl 	a
.da6d	ba6d	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da70	ba70	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da73	ba73	f0 2e		beq $baa3			beq 	_SNDUNIsSilent
.da75	ba75	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.da78	ba78	48		pha				pha
.da79	ba79	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.da7c	ba7c	29 0f		and #$0f			and 	#$0F
.da7e	ba7e	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.da81	ba81	09 80		ora #$80			ora 	#$80 						; write to pitch register
.da83	ba83	20 10 bb	jsr $bb10			jsr 	SNDWritePorts
.da86	ba86	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.da89	ba89	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da8c	ba8c	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.da8f	ba8f	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.da92	ba92	6a		ror a				ror 	a
.da93	ba93	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.da96	ba96	6a		ror a				ror 	a
.da97	ba97	4a		lsr a				lsr 	a 							; put in bits 0-5
.da98	ba98	4a		lsr a				lsr 	a
.da99	ba99	20 10 bb	jsr $bb10			jsr 	SNDWritePorts 				; write as rest of pitch register
.da9c	ba9c	68		pla				pla
.da9d	ba9d	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.da9f	ba9f	20 10 bb	jsr $bb10			jsr 	SNDWritePorts
.daa2	baa2	60		rts				rts
.daa3	baa3					_SNDUNIsSilent:
.daa3	baa3	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.daa6	baa6	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.daa8	baa8	20 10 bb	jsr $bb10			jsr 	SNDWritePorts 				; write to the ports
.daab	baab	60		rts				rts
.daac	baac					SNDFindNextNoteForA:
.daac	baac	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.daaf	baaf	f0 13		beq $bac4			beq 	_SNDFNNFail 				; queue empty.
.dab1	bab1	a2 00		ldx #$00			ldx 	#0
.dab3	bab3					_SNDFNNSearch:
.dab3	bab3	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.dab6	bab6	38		sec				sec
.dab7	bab7	f0 0c		beq $bac5			beq 	_SNDFNNExit 				; if so exit with CS.
.dab9	bab9	e8		inx				inx 								; next queue slot.
.daba	baba	e8		inx				inx
.dabb	babb	e8		inx				inx
.dabc	babc	e8		inx				inx
.dabd	babd	e8		inx				inx
.dabe	babe	e8		inx				inx
.dabf	babf	e8		inx				inx
.dac0	bac0	e8		inx				inx
.dac1	bac1	88		dey				dey 								; done the whole queue
.dac2	bac2	d0 ef		bne $bab3			bne 	_SNDFNNSearch 				; no, go back.
.dac4	bac4					_SNDFNNFail:
.dac4	bac4	18		clc				clc
.dac5	bac5					_SNDFNNexit:
.dac5	bac5	60		rts				rts
.dac6	bac6					SNDDeleteXFromQueue:
.dac6	bac6	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.dac8	bac8	f0 09		beq $bad3			beq 	_SNDDXExit
.daca	baca	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.dacd	bacd	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dad0	bad0	e8		inx				inx
.dad1	bad1	80 f3		bra $bac6			bra 	SNDDeleteXFromQueue
.dad3	bad3					_SNDDXExit:
.dad3	bad3	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.dad4	bad4					SNDQueueRequest:
.dad4	bad4	86 36		stx $36				stx 	zTemp0						; save queue address
.dad6	bad6	84 37		sty $37				sty 	zTemp0+1
.dad8	bad8	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.dadb	badb	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dadd	badd	f0 21		beq $bb00			beq 	_SNDQRExit
.dadf	badf	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dae1	bae1	48		pha				pha
.dae2	bae2	8a		txa				txa  								; get offset in queue buffer/
.dae3	bae3	0a		asl a				asl 	a
.dae4	bae4	0a		asl a				asl 	a
.dae5	bae5	0a		asl a				asl 	a
.dae6	bae6	aa		tax				tax
.dae7	bae7	68		pla				pla 								; get back and push again
.dae8	bae8	48		pha				pha
.dae9	bae9	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.daec	baec	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.daee	baee					_SNDQCopy:
.daee	baee	b1 36		lda ($36),y			lda 	(zTemp0),y
.daf0	baf0	e8		inx				inx
.daf1	baf1	c8		iny				iny
.daf2	baf2	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.daf5	baf5	c0 06		cpy #$06			cpy 	#6
.daf7	baf7	d0 f5		bne $baee			bne 	_SNDQCopy
.daf9	baf9	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.dafc	bafc	68		pla				pla 								; get channel # back
.dafd	bafd	20 28 ba	jsr $ba28			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db00	bb00					_SNDQRExit:
.db00	bb00	60		rts				rts
.db01	bb01					SNDSilenceChannel:
.db01	bb01	aa		tax				tax 								; zero time left.
.db02	bb02	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.db05	bb05	0a		asl a				asl 	a 							; shift into position
.db06	bb06	0a		asl a				asl 	a
.db07	bb07	0a		asl a				asl 	a
.db08	bb08	0a		asl a				asl 	a
.db09	bb09	0a		asl a				asl 	a
.db0a	bb0a	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db0c	bb0c	20 10 bb	jsr $bb10			jsr 	SNDWritePorts
.db0f	bb0f	60		rts				rts
.db10	bb10					SNDWritePorts:
.db10	bb10	da		phx				phx 								; save X
.db11	bb11	a6 01		ldx $01				ldx 	1 							; save I/O status
.db13	bb13	64 01		stz $01				stz 	1 							; access I/O page 0
.db15	bb15	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db18	bb18	8d 10 d6	sta $d610			sta 	$D610
.db1b	bb1b	86 01		stx $01				stx 	1 							; restore I/O
.db1d	bb1d	fa		plx				plx 								; restore X
.db1e	bb1e	60		rts				rts
.db1f	bb1f					Export_SNDCommand:
.db1f	bb1f	da		phx				phx 								; save XY
.db20	bb20	5a		phy				phy
.db21	bb21	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db23	bb23	f0 1d		beq $bb42			beq 	_SNDInitialise
.db25	bb25	90 28		bcc $bb4f			bcc 	_SNDExit
.db27	bb27	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db29	bb29	f0 17		beq $bb42			beq 	_SNDSilence
.db2b	bb2b	b0 22		bcs $bb4f			bcs 	_SNDExit
.db2d	bb2d	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db2f	bb2f	b0 09		bcs $bb3a			bcs 	_SNDQueryPlay
.db31	bb31	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db33	bb33	b0 1a		bcs $bb4f			bcs 	_SNDExit
.db35	bb35	20 d4 ba	jsr $bad4			jsr 	SNDQueueRequest
.db38	bb38	80 15		bra $bb4f			bra 	_SNDExit
.db3a	bb3a					_SNDQueryPlay:
.db3a	bb3a	29 03		and #$03			and 	#3 							; get channel #
.db3c	bb3c	aa		tax				tax
.db3d	bb3d	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db40	bb40	80 0d		bra $bb4f			bra 	_SNDExit
.db42	bb42					_SNDInitialise:
.db42	bb42					_SNDSilence:
.db42	bb42	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db45	bb45	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db47	bb47					_SNDSilenceLoop:
.db47	bb47	48		pha				pha
.db48	bb48	20 01 bb	jsr $bb01			jsr 	SNDSilenceChannel
.db4b	bb4b	68		pla				pla
.db4c	bb4c	3a		dec a				dec 	a
.db4d	bb4d	10 f8		bpl $bb47			bpl 	_SNDSilenceLoop
.db4f	bb4f					_SNDExit:
.db4f	bb4f	7a		ply				ply
.db50	bb50	fa		plx				plx
.db51	bb51	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db52	bb52					Export_SNDUpdate:
.db52	bb52					PagedSNDUpdate:
.db52	bb52	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db55	bb55	f0 05		beq $bb5c			beq 	_SNDUNot0 					; not playing
.db57	bb57	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db59	bb59	20 7b bb	jsr $bb7b			jsr 	SNDUpdateChannel 			; update it.
.db5c	bb5c					_SNDUNot0:
.db5c	bb5c	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db5f	bb5f	f0 05		beq $bb66			beq 	_SNDUNot1
.db61	bb61	a2 01		ldx #$01			ldx 	#1
.db63	bb63	20 7b bb	jsr $bb7b			jsr 	SNDUpdateChannel
.db66	bb66					_SNDUNot1:
.db66	bb66	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db69	bb69	f0 05		beq $bb70			beq 	_SNDUNot2
.db6b	bb6b	a2 02		ldx #$02			ldx 	#2
.db6d	bb6d	20 7b bb	jsr $bb7b			jsr 	SNDUpdateChannel
.db70	bb70					_SNDUNot2:
.db70	bb70	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db73	bb73	f0 05		beq $bb7a			beq 	_SNDUNot3
.db75	bb75	a2 03		ldx #$03			ldx 	#3
.db77	bb77	20 7b bb	jsr $bb7b			jsr 	SNDUpdateChannel
.db7a	bb7a					_SNDUNot3:
.db7a	bb7a	60		rts				rts
.db7b	bb7b					SNDUpdateChannel:
.db7b	bb7b	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.db7d	bb7d	f0 2c		beq $bbab			beq 	_SNDUCExit
.db7f	bb7f	3a		dec a				dec 	a 							; decrement and update timer
.db80	bb80	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.db83	bb83	f0 1d		beq $bba2			beq 	_SNDUCUpdate 				; if zero, silence channel
.db85	bb85	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.db88	bb88	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.db8b	bb8b	f0 1e		beq $bbab			beq 	_SNDUCExit 					; if zero carry on at current tone.
.db8d	bb8d	18		clc				clc 								; add adjust, forcing into a 10 bit range
.db8e	bb8e	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.db91	bb91	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.db94	bb94	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.db97	bb97	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.db9a	bb9a	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.db9d	bb9d	29 03		and #$03			and 	#3
.db9f	bb9f	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.dba2	bba2					_SNDUCUpdate:
.dba2	bba2	8a		txa				txa 								; which channel.
.dba3	bba3	48		pha				pha
.dba4	bba4	20 67 ba	jsr $ba67			jsr 	SNDUpdateNote 				; update the current note
.dba7	bba7	68		pla				pla
.dba8	bba8	20 28 ba	jsr $ba28			jsr 	SNDCheckChannel 			; more to do ?
.dbab	bbab					_SNDUCExit:
.dbab	bbab	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
