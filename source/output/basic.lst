
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sun Jan  1 15:17:37 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c ad 80	jmp $80ad	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 26 bc	jsr $bc26		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 29 bc	jsr $bc29		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 e5 bb	jsr $bbe5		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 3a bc	jsr $bc3a		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 35 bc	jsr $bc35		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 8f bc	jsr $bc8f		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 99 bc	jsr $bc99		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLWriteBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 f8 bc	jsr $bcf8		jsr	Export_KNLWriteBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLCloseFile:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 75 bc	jsr $bc75		jsr	Export_KNLCloseFile
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						GXGraphicDraw:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						SNDCommand:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 58 bb	jsr $bb58		jsr	Export_SNDCommand
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDUpdate:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 8b bb	jsr $bb8b		jsr	Export_SNDUpdate
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						TKListConvertLine:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 09 b5	jsr $b509		jsr	Export_TKListConvertLine
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKTokeniseLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 9d b7	jsr $b79d		jsr	Export_TKTokeniseLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80ad		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80af		9a		txs				txs
.80b0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80b2		09 80		ora #$80			ora 	#$80
.80b4		85 00		sta $00				sta 	0
.80b6		20 5b a8	jsr $a85b			jsr		UpdateFont 					; update font if between FPGA updates.
.80b9		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.80bc		9c 5c 06	stz $065c			stz 	DefaultDrive 				; zero the default drive.
.80bf		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c1		aa		tax				tax
.80c2		a8		tay				tay
.80c3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.80c6		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80c8		20 85 80	jsr $8085			jsr 	SNDCommand
.80cb		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80cd		a9 db		lda #$db			lda 	#Prompt & $FF
.80cf		20 91 91	jsr $9191			jsr 	PrintStringXA
.80d2		20 91 8b	jsr $8b91			jsr 	NewProgram 					; erase current program
.80d5		4c 26 84	jmp $8426			jmp 	WarmStart					; make same size.
.80d8		4c 26 84	jmp $8426			jmp 	WarmStart
.80db						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80db		41 6c 70 68 61 20 32 31			.text "Alpha 21 built 01-Jan-23. "
>80e3		20 62 75 69 6c 74 20 30 31 2d 4a 61 6e 2d 32 33
>80f3		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80f5		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80f8						AssembleGroup1:
.80f8		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80fa		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80fd		80 02		bra $8101			bra 	AsmGroup12
.80ff						AssembleGroup2:
.80ff		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8101						AsmGroup12:
.8101		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8104		68		pla				pla 								; pop the return address to access the information following.
.8105		fa		plx				plx
.8106		20 8d 81	jsr $818d			jsr 	AccessParameters 			; get opcode and save as base
.8109		8d 24 04	sta $0424			sta 	BaseOpcode
.810c		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.810f		d0 08		bne $8119			bne 	_AG12HaveMask
.8111		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8113		20 95 81	jsr $8195			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8116		8d 25 04	sta $0425			sta 	ModeMask
.8119						_AG12HaveMask:
.8119		20 c9 82	jsr $82c9			jsr 	TypeAndCalculateOperand 	; get zero page type
.811c		da		phx				phx 								; save found address mode
.811d		20 f9 81	jsr $81f9			jsr 	AssembleModeX
.8120		fa		plx				plx  								; restore address mode
.8121		b0 0b		bcs $812e			bcs 	_AG12Exit
.8123		20 2f 81	jsr $812f			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8126		20 f9 81	jsr $81f9			jsr 	AssembleModeX
.8129		b0 03		bcs $812e			bcs 	_AG12Exit
.812b		4c 01 a2	jmp $a201			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.812e						_AG12Exit:
.812e		60		rts				rts
.812f						PromoteToAbsolute:
.812f		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8131		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8133		f0 19		beq $814e			beq 	_PTADo
.8135		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8137		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8139		f0 13		beq $814e			beq 	_PTADo
.813b		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813d		e0 80		cpx #$80			cpx 	#AM_ZEROY
.813f		f0 0d		beq $814e			beq 	_PTADo
.8141		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8143		e0 d1		cpx #$d1			cpx 	#AM_IND
.8145		f0 07		beq $814e			beq 	_PTADo
.8147		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8149		e0 c0		cpx #$c0			cpx 	#AM_INDX
.814b		f0 01		beq $814e			beq 	_PTADo
.814d		60		rts				rts
.814e						_PTADo:
.814e		aa		tax				tax
.814f		60		rts				rts
.8150						AssembleGroup3:
.8150		68		pla				pla 								; get parameters, which is just the opcode.
.8151		fa		plx				plx
.8152		20 8d 81	jsr $818d			jsr 	AccessParameters 			; get and output opcode
.8155		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8158		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get a 16 bit operand
.815b		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815d		38		sec				sec
.815e		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8161		48		pha				pha 								; LSB in A
.8162		a5 60		lda $60				lda 	NSMantissa1
.8164		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8167		aa		tax				tax 								; MSB in X
.8168		68		pla				pla
.8169		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.816a		69 7f		adc #$7f			adc 	#$7F
.816c		90 01		bcc $816f			bcc 	_AG3NoCarry
.816e		e8		inx				inx
.816f						_AG3NoCarry:
.816f		38		sec				sec 								; fix back and write out anyways.
.8170		e9 80		sbc #$80			sbc 	#$80
.8172		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8175		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8177		f0 0a		beq $8183			beq 	_AG3Exit
.8179		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.817c		29 01		and #$01			and 	#1
.817e		f0 03		beq $8183			beq 	_AG3Exit
.8180		4c 06 a2	jmp $a206			jmp 	RangeError 					; no, branch is out of range
.8183						_AG3Exit:
.8183		60		rts				rts
.8184						AssembleGroup4:
.8184		68		pla				pla 								; pop address
.8185		fa		plx				plx
.8186		20 8d 81	jsr $818d			jsr 	AccessParameters 			; access and get first
.8189		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte 			; output it.
.818c		60		rts				rts
.818d						AccessParameters:
.818d		8d 21 04	sta $0421			sta 	ParamStart
.8190		8e 22 04	stx $0422			stx 	ParamStart+1
.8193		a9 01		lda #$01			lda 	#1
.8195						GetParameter:
.8195		5a		phy				phy
.8196		a8		tay				tay
.8197		ad 21 04	lda $0421			lda 	ParamStart
.819a		85 36		sta $36				sta 	zTemp0
.819c		ad 22 04	lda $0422			lda 	ParamStart+1
.819f		85 37		sta $37				sta 	zTemp0+1
.81a1		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a3		7a		ply				ply
.81a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a5						AssemblerWriteByte:
.81a5		48		pha			pha
.81a6		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81a9		29 02		and #$02		and 	#2
.81ab		f0 1b		beq $81c8		beq 	_AWBNoPrint
.81ad		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81b0		20 e3 81	jsr $81e3		jsr 	PrintHex
.81b3		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b6		20 e3 81	jsr $81e3		jsr 	PrintHex
.81b9		a9 20		lda #$20		lda 	#' '
.81bb		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81be		68		pla			pla 									; print byte
.81bf		48		pha			pha
.81c0		20 e3 81	jsr $81e3		jsr 	PrintHex
.81c3		a9 0d		lda #$0d		lda 	#13
.81c5		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c8						_AWBNoPrint:
.81c8		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81cb		85 36		sta $36			sta 	zTemp0
.81cd		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81d0		f0 0e		beq $81e0		beq 	_AWBRange
.81d2		85 37		sta $37			sta 	zTemp0+1
.81d4		68		pla			pla 									; write byte out
.81d5		92 36		sta ($36)		sta 	(zTemp0)
.81d7		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81da		d0 03		bne $81df		bne 	_AWBNoCarry
.81dc		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81df						_AWBNoCarry:
.81df		60		rts			rts
.81e0						_AWBRange:
.81e0		4c 06 a2	jmp $a206		jmp 	RangeError
.81e3						PrintHex:
.81e3		48		pha				pha
.81e4		4a		lsr a				lsr 	a
.81e5		4a		lsr a				lsr 	a
.81e6		4a		lsr a				lsr 	a
.81e7		4a		lsr a				lsr 	a
.81e8		20 ec 81	jsr $81ec			jsr 	_PrintNibble
.81eb		68		pla				pla
.81ec						_PrintNibble:
.81ec		29 0f		and #$0f			and 	#15
.81ee		c9 0a		cmp #$0a			cmp 	#10
.81f0		90 02		bcc $81f4			bcc 	_NoShift
.81f2		69 06		adc #$06			adc 	#6
.81f4						_NoShift:
.81f4		69 30		adc #$30			adc 	#48
.81f6		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81f9						AssembleModeX:
.81f9		5a		phy				phy
.81fa		ad 23 04	lda $0423			lda 	IsGroup1
.81fd		f0 17		beq $8216			beq 	_AMXGroup2
.81ff		8a		txa				txa 							; is it in group # 1
.8200		29 40		and #$40			and 	#AM_ISG1
.8202		f0 4d		beq $8251			beq 	_AMXFail 				; no, give up.
.8204		8a		txa				txa 							; get back.
.8205		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8207		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8209		d0 22		bne $822d			bne 	_AMXHaveInfo
.820b		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.820e		c9 81		cmp #$81			cmp 	#$81
.8210		f0 3f		beq $8251			beq 	_AMXFail
.8212		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8214		80 17		bra $822d			bra 	_AMXHaveInfo 			; odd design decision there.
.8216						_AMXGroup2:
.8216		8a		txa				txa 							; is it in group 2 ?
.8217		29 20		and #$20			and 	#AM_ISG2
.8219		f0 36		beq $8251			beq 	_AMXFail 				; no, give up.
.821b		8a		txa				txa 							; get the offset into Y
.821c		29 1f		and #$1f			and 	#$1F
.821e		4a		lsr a				lsr 	a 						; make it 0-7.
.821f		4a		lsr a				lsr  	a
.8220		a8		tay				tay
.8221		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8224						_AMXCheckOkay:
.8224		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8225		88		dey				dey
.8226		10 fc		bpl $8224			bpl 	_AMXCheckOkay
.8228		90 27		bcc $8251			bcc 	_AMXFail 				; not allowed.
.822a		8a		txa				txa  							; get mask back
.822b		29 1f		and #$1f			and 	#$1F
.822d						_AMXHaveInfo:
.822d		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.822f		10 04		bpl $8235			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8231		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8233		d0 1c		bne $8251			bne 	_AMXFail
.8235						_AMXAnySize:
.8235		18		clc				clc 							; add offset to the base opcode
.8236		6d 24 04	adc $0424			adc 	BaseOpcode
.8239						_AMXOutputCode:
.8239		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte 		; write the opcode out.
.823c		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.823e		f0 0e		beq $824e			beq 	_AMXExit
.8240		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8242		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.8245		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8247		30 05		bmi $824e			bmi 	_AMXExit
.8249		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.824b		20 a5 81	jsr $81a5			jsr 	AssemblerWriteByte
.824e						_AMXExit:
.824e		7a		ply				ply
.824f		38		sec				sec
.8250		60		rts				rts
.8251						_AMXFail:
.8251		a0 00		ldy #$00			ldy 	#0
.8253						_AMXCheckOddities:
.8253		8a		txa				txa
.8254		d9 7b 82	cmp $827b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8257		d0 15		bne $826e			bne 	_AMXCONext
.8259		b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825c		cd 24 04	cmp $0424			cmp 	BaseOpcode
.825f		d0 0d		bne $826e			bne 	_AMXCONext
.8261		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8263		10 04		bpl $8269			bpl 	_AMXCONotZero
.8265		a5 60		lda $60				lda 	NSMantissa1
.8267		d0 05		bne $826e			bne 	_AMXCONext
.8269						_AMXCONotZero:
.8269		b9 7a 82	lda $827a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826c		80 cb		bra $8239			bra 	_AMXOutputCode 			; and assemble it
.826e						_AMXCONext:
.826e		c8		iny				iny
.826f		c8		iny				iny
.8270		c8		iny				iny
.8271		b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; end of table
.8274		d0 dd		bne $8253			bne 	_AMXCheckOddities
.8276						_AMXCOFail:
.8276		7a		ply				ply
.8277		18		clc				clc
.8278		60		rts				rts
.8279						ExtraOpcode:
>8279		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>827c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>827f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8282		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8285		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8288		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>828e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8291		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8294		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8297		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8298						LabelHere:
.8298		c8		iny				iny 								; skip .
.8299		a2 00		ldx #$00			ldx 	#0 							; get a term
.829b		20 86 9a	jsr $9a86			jsr 	EvaluateTerm
.829e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82a0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a2		d0 22		bne $82c6			bne 	_ALType 					; otherwise typing error
.82a4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a6		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82a8		b5 60		lda $60,x			lda 	NSMantissa1,x
.82aa		85 37		sta $37				sta 	zTemp0+1
.82ac		5a		phy				phy 								; copy address in (64k)
.82ad		a0 01		ldy #$01			ldy 	#1
.82af		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82b2		92 36		sta ($36)			sta 	(zTemp0)
.82b4		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b7		91 36		sta ($36),y			sta 	(zTemp0),y
.82b9		c8		iny				iny
.82ba		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82bc		91 36		sta ($36),y			sta 	(zTemp0),y
.82be		c8		iny				iny
.82bf		91 36		sta ($36),y			sta 	(zTemp0),y
.82c1		c8		iny				iny
.82c2		91 36		sta ($36),y			sta 	(zTemp0),y
.82c4		7a		ply				ply
.82c5		60		rts				rts
.82c6						_ALType:
.82c6		4c 0b a2	jmp $a20b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82c9						TypeAndCalculateOperand:
.82c9		b1 30		lda ($30),y			lda 	(codePtr),y
.82cb		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82cd		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82cf		f0 5b		beq $832c			beq 	_TACOExit
.82d1		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d3		f0 57		beq $832c			beq 	_TACOExit
.82d5		c8		iny				iny
.82d6		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82d8		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82da		f0 51		beq $832d			beq 	CalculateOperand
.82dc		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82de		f0 1f		beq $82ff			beq 	_TACOIndirect
.82e0		88		dey				dey 								; undo get of first character
.82e1		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get operand
.82e4		b1 30		lda ($30),y			lda 	(codePtr),y
.82e6		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82e8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ea		d0 40		bne $832c			bne 	_TACOExit
.82ec		c8		iny				iny
.82ed		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f0		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f2		c9 58		cmp #$58			cmp 	#'X'
.82f4		f0 36		beq $832c			beq 	_TACOExit
.82f6		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82f8		c9 59		cmp #$59			cmp 	#'Y'
.82fa		f0 30		beq $832c			beq 	_TACOExit
.82fc						_TACOSyntax:
.82fc		4c 01 a2	jmp $a201			jmp 	SyntaxError
.82ff						_TACOIndirect:
.82ff		20 2d 83	jsr $832d			jsr 	CalculateOperand 			; get the operand
.8302		b1 30		lda ($30),y			lda 	(codePtr),y
.8304		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8306		f0 17		beq $831f			beq 	_TACOIndX
.8308		20 1f 91	jsr $911f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830b		b1 30		lda ($30),y			lda 	(codePtr),y
.830d		a2 d1		ldx #$d1			ldx 	#AM_IND
.830f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8311		d0 19		bne $832c			bne 	_TACOExit
.8313		c8		iny				iny
.8314		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8317		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8319		d0 e1		bne $82fc			bne 	_TACOSyntax
.831b		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831d		80 0d		bra $832c			bra 	_TACOExit
.831f						_TACOIndX:
.831f		c8		iny				iny
.8320		20 37 83	jsr $8337			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8323		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8325		d0 d5		bne $82fc			bne 	_TACOSyntax
.8327		20 1f 91	jsr $911f			jsr 	CheckRightBracket			; check )
.832a		a2 c0		ldx #$c0			ldx 	#AM_INDX
.832c						_TACOExit:
.832c		60		rts				rts
.832d						CalculateOperand:
.832d		48		pha				pha
.832e		da		phx				phx
.832f		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8331		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.8334		fa		plx				plx
.8335		68		pla				pla
.8336		60		rts				rts
.8337						TACOCheckXY:
.8337		b1 30		lda ($30),y			lda 	(codePtr),y
.8339		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.833b		c9 40		cmp #$40			cmp 	#$40
.833d		d0 21		bne $8360			bne 	_TCXYFail
.833f		b1 30		lda ($30),y			lda 	(codePtr),y
.8341		18		clc				clc
.8342		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8344		85 37		sta $37				sta 	zTemp0+1
.8346		c8		iny				iny
.8347		b1 30		lda ($30),y			lda 	(codePtr),y
.8349		c8		iny				iny
.834a		85 36		sta $36				sta 	zTemp0
.834c		5a		phy				phy 								; save position
.834d		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.834f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8351		d0 0c		bne $835f			bne 	_TCXYPopFail
.8353		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8355		b1 36		lda ($36),y			lda 	(zTemp0),y
.8357		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8359		f0 08		beq $8363			beq 	_TCXYFound
.835b		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835d		f0 04		beq $8363			beq 	_TCXYFound
.835f						_TCXYPopFail:
.835f		7a		ply				ply
.8360						_TCXYFail:
.8360		a9 00		lda #$00			lda 	#0
.8362		60		rts				rts
.8363						_TCXYFound:
.8363		7a		ply				ply 								; restore position
.8364		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8366		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8367						BackloadProgram:
.8367		20 91 8b	jsr $8b91			jsr 	NewProgram 					; does the actual NEW.
.836a		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.836c		a9 be		lda #$be			lda 	#_BLLoad & $FF
.836e		20 91 91	jsr $9191			jsr 	PrintStringXA
.8371		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8373		8d 59 06	sta $0659			sta 	BackLoadPage
.8376		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8378		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.837b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837d		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8380		a9 ff		lda #$ff			lda 	#$FF
.8382		8d fa ff	sta $fffa			sta 	$FFFA
.8385						_BPLoop:
.8385		a2 ff		ldx #$ff			ldx 	#$FF
.8387		20 d3 83	jsr $83d3			jsr 	BLReadByte 					; read a byte
.838a		c9 00		cmp #$00			cmp 	#0
.838c		f0 29		beq $83b7			beq 	_BPExit 					; if 0 exit
.838e		30 27		bmi $83b7			bmi 	_BPExit 					; if -ve exit
.8390						_BPCopy:
.8390		e8		inx				inx  								; copy byte into the lineBuffer
.8391		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8394		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8397		20 d3 83	jsr $83d3			jsr 	BLReadByte 					; read next byte
.839a		30 0a		bmi $83a6			bmi 	_BPEndLine 					; -ve = EOL
.839c		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.839e		d0 02		bne $83a2			bne 	_BPNotTab
.83a0		a9 20		lda #$20			lda 	#' '
.83a2						_BPNotTab:
.83a2		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a4		b0 ea		bcs $8390			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a6						_BPEndLine:
.83a6		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.83a9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83ac		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83af		f0 d4		beq $8385			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83b1		38		sec				sec 								; append not insert
.83b2		20 84 a7	jsr $a784			jsr 	MemoryInsertLine 			; append to current program
.83b5		80 ce		bra $8385			bra 	_BPLoop
.83b7						_BPExit:
.83b7		9c fa ff	stz $fffa			stz 	$FFFA
.83ba		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear variables etc.
.83bd		60		rts				rts
.83be						_BLLoad:
>83be		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c6		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d3						BLReadByte:
.83d3		da		phx				phx
.83d4		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d6		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83d9		85 0b		sta $0b				sta 	8+3
.83db		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83de		85 36		sta $36				sta 	zTemp0
.83e0		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e3		85 37		sta $37				sta 	zTemp0+1
.83e5		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e7		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ea		d0 0f		bne $83fb			bne 	_BLNoCarry
.83ec		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ef		10 0a		bpl $83fb			bpl 	_BLNoCarry 					; need a new page
.83f1		48		pha				pha
.83f2		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f4		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f7		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83fa		68		pla				pla
.83fb						_BLNoCarry:
.83fb		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83fd		fa		plx				plx
.83fe		c9 00		cmp #$00			cmp 	#0
.8400		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8401						EditProgramCode:
.8401		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8404		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8407		20 28 a8	jsr $a828			jsr 	MemorySearch
.840a		90 05		bcc $8411			bcc 	_EPCNoDelete 				; reached the end : don't delete
.840c		d0 03		bne $8411			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.840e		20 4d a7	jsr $a74d			jsr 	MemoryDeleteLine 			; delete the line
.8411						_EPCNoDelete:
.8411		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8414		c9 80		cmp #$80			cmp 	#KWC_EOL
.8416		f0 0d		beq $8425			beq 	_EPCNoInsert
.8418		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.841b		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.841e		20 28 a8	jsr $a828			jsr 	MemorySearch
.8421		18		clc				clc 								; insert at this point.
.8422		20 84 a7	jsr $a784			jsr 	MemoryInsertLine 			; insert the line
.8425						_EPCNoInsert:
.8425		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8426						WarmStart:
.8426		a2 ff		ldx #$ff			ldx 	#$FF
.8428		9a		txs				txs
.8429		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.842b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.842e		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8431		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line
.8434		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8437		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.843a		d0 17		bne $8453			bne 	_WSEditCode 				; if so,edit code.
.843c		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.843f		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8441		85 30		sta $30				sta 	codePtr
.8443		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8445		85 31		sta $31				sta 	codePtr+1
.8447		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.844a		c9 80		cmp #$80			cmp 	#KWC_EOL
.844c		f0 d8		beq $8426			beq 	WarmStart
.844e		20 21 8d	jsr $8d21			jsr 	RUNCodePointerLine 			; execute that line.
.8451		80 d3		bra $8426			bra 	WarmStart
.8453						_WSEditCode:
.8453		20 01 84	jsr $8401			jsr 	EditProgramCode 			; edit the program code
.8456		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear all variables etc.
.8459		80 cb		bra $8426			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.845b						AssembleCommand:
.845b		a2 00		ldx #$00			ldx 	#0
.845d		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; start address
.8460		a5 58		lda $58				lda 	NSMantissa0
.8462		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8465		a5 60		lda $60				lda 	NSMantissa1
.8467		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.846a		20 27 91	jsr $9127			jsr 	CheckComma
.846d		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; options 0-3
.8470		a5 58		lda $58				lda 	NSMantissa0
.8472		8d 20 04	sta $0420			sta 	AssemblerControl
.8475		60		rts				rts
.8476		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8477						AssertCommand:
.8477		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8479		20 f0 9f	jsr $9ff0			jsr 	EvaluateInteger 			; the assert test
.847c		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; exit if result is non zero.
.847f		d0 05		bne $8486			bne 	_ACExit
.8481		a9 0a		lda #$0a		lda	#10
.8483		4c 38 91	jmp $9138		jmp	ErrorHandler
.8486						_ACExit:
.8486		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8487						CallCommand:
.8487		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8489		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.848c						_CCClear
.848c		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.848d		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; these are optional sequentially.
.8490		e0 04		cpx #$04			cpx 	#4
.8492		d0 f8		bne $848c			bne 	_CCClear
.8494		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8496						_CCCParam:
.8496		b1 30		lda ($30),y			lda 	(codePtr),y
.8498		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.849a		d0 09		bne $84a5			bne 	_CCCRun6502
.849c		c8		iny				iny 								; skip comma
.849d		e8		inx				inx	 								; next level
.849e		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get A/X/Y
.84a1		e0 03		cpx #$03			cpx 	#3
.84a3		90 f1		bcc $8496			bcc 	_CCCParam 					; done all 3 ?
.84a5						_CCCRun6502:
.84a5		5a		phy				phy 								; save position
.84a6		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.84a8		85 37		sta $37				sta 	zTemp0+1
.84aa		a5 58		lda $58				lda 	NSMantissa0
.84ac		85 36		sta $36				sta 	zTemp0
.84ae		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.84b0		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.84b2		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.84b4		20 b9 84	jsr $84b9			jsr 	_CCCZTemp0 					; call zTemp0
.84b7		7a		ply				ply 								; restore position and exit
.84b8		60		rts				rts
.84b9						_CCCZTemp0:
.84b9		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84bc						ClearCommand:
.84bc		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84be		85 36		sta $36				sta 	0+zTemp0
.84c0		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84c2		85 37		sta $37				sta 	1+zTemp0
.84c4						_ClearZeroLoop:
.84c4		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84c6		f0 24		beq $84ec			beq 	_ClearZeroEnd
.84c8		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84ca		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84cc						_ClearOneVariable:
.84cc		91 36		sta ($36),y			sta 	(zTemp0),y
.84ce		c8		iny				iny
.84cf		c0 08		cpy #$08			cpy 	#8
.84d1		d0 f9		bne $84cc			bne 	_ClearOneVariable
.84d3		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84d5		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d7		c9 18		cmp #$18			cmp 	#NSTProcedure
.84d9		d0 04		bne $84df			bne 	_ClearNotProcedure
.84db		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84dd		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84df						_ClearNotProcedure:
.84df		18		clc				clc 								; go to the next variable
.84e0		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84e2		65 36		adc $36				adc 	zTemp0
.84e4		85 36		sta $36				sta 	zTemp0
.84e6		90 dc		bcc $84c4			bcc 	_ClearZeroLoop
.84e8		e6 37		inc $37				inc 	zTemp0+1
.84ea		80 d8		bra $84c4			bra 	_ClearZeroLoop
.84ec						_ClearZeroEnd:
.84ec		18		clc				clc
.84ed		a5 36		lda $36				lda 	zTemp0
.84ef		69 01		adc #$01			adc 	#1
.84f1		8d 0c 04	sta $040c			sta 	lowMemPtr
.84f4		a5 37		lda $37				lda 	zTemp0+1
.84f6		69 00		adc #$00			adc 	#0
.84f8		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84fb		20 e2 b1	jsr $b1e2			jsr 	StackReset
.84fe		20 48 b2	jsr $b248			jsr 	StringSystemInitialise
.8501		20 28 90	jsr $9028			jsr 	ProcedureScan
.8504		20 d0 8c	jsr $8cd0			jsr 	Command_Restore
.8507		9c 1e 04	stz $041e			stz 	AssemblerAddress
.850a		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.850d		9c 20 04	stz $0420			stz 	AssemblerControl
.8510		20 72 9c	jsr $9c72			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8513		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8514						ClearScreen:
.8514		5a		phy				phy
.8515		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8517		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.851a		7a		ply				ply
.851b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.851c						Command_Data:
.851c		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.851e		a2 80		ldx #$80			ldx 	#KWC_EOL
.8520		20 7a 90	jsr $907a			jsr 	ScanForward
.8523		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8524						DimCommand:
.8524		b1 30		lda ($30),y			lda 	(codePtr),y
.8526		29 c0		and #$c0			and 	#$C0
.8528		c9 40		cmp #$40			cmp 	#$40
.852a		d0 7a		bne $85a6			bne 	_DCSyntax 				; n o, error.
.852c		b1 30		lda ($30),y			lda 	(codePtr),y
.852e		18		clc				clc
.852f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8531		85 3f		sta $3f				sta 	zaTemp+1
.8533		c8		iny				iny
.8534		b1 30		lda ($30),y			lda 	(codePtr),y
.8536		c8		iny				iny
.8537		85 3e		sta $3e				sta 	zaTemp
.8539		5a		phy				phy
.853a		a0 02		ldy #$02			ldy 	#2 						; read type byte
.853c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.853e		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8540		c9 18		cmp #$18			cmp 	#NSTProcedure
.8542		f0 62		beq $85a6			beq 	_DCSyntax
.8544		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8546		29 04		and #$04			and 	#NSBIsArray
.8548		f0 64		beq $85ae			beq 	_DCType
.854a		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.854c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854e		d0 59		bne $85a9			bne 	_DCRedefine
.8550		7a		ply				ply
.8551		20 b1 85	jsr $85b1			jsr 	_DCGetSize 				; get array size, check it.
.8554		5a		phy				phy
.8555		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8557		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8559		7a		ply				ply 							; is there a second (e.g. ,x)
.855a		b1 30		lda ($30),y			lda 	(codePtr),y
.855c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.855e		d0 0a		bne $856a			bne 	_DCOneDimension
.8560		c8		iny				iny 							; skip comma
.8561		20 b1 85	jsr $85b1			jsr 	_DCGetSize 				; get 2nd array size
.8564		5a		phy				phy
.8565		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8567		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8569		7a		ply				ply
.856a						_DCOneDimension:
.856a		5a		phy				phy 							; save position
.856b		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.856d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.856f		aa		tax				tax
.8570		c8		iny				iny
.8571		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8573		e8		inx				inx 							; bump them.
.8574		1a		inc a				inc 	a
.8575		20 2e a0	jsr $a02e			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8578		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.857a		29 e0		and #$e0			and 	#$E0
.857c		d0 23		bne $85a1			bne 	_DCSize
.857e		a0 02		ldy #$02			ldy 	#2 						; get base type
.8580		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582		20 bf 85	jsr $85bf			jsr 	ScaleByBaseType 		; scale by base type
.8585		a5 36		lda $36				lda 	zTemp0
.8587		a6 37		ldx $37				ldx 	zTemp0+1
.8589		20 34 9c	jsr $9c34			jsr 	AllocateXABytes 		; allocate memory
.858c		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.858e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8590		c8		iny				iny
.8591		8a		txa				txa
.8592		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8594		7a		ply				ply 							; get position back
.8595		20 1f 91	jsr $911f			jsr 	CheckRightBracket 		; check )
.8598		b1 30		lda ($30),y			lda 	(codePtr),y
.859a		c8		iny				iny 							; consume in case
.859b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.859d		f0 85		beq $8524			beq 	DimCommand
.859f		88		dey				dey 							; undo consume
.85a0		60		rts				rts
.85a1						_DCSize:
.85a1		a9 16		lda #$16		lda	#22
.85a3		4c 38 91	jmp $9138		jmp	ErrorHandler
.85a6						_DCSyntax:
.85a6		4c 01 a2	jmp $a201			jmp 	SyntaxError
.85a9						_DCRedefine:
.85a9		a9 15		lda #$15		lda	#21
.85ab		4c 38 91	jmp $9138		jmp	ErrorHandler
.85ae						_DCType:
.85ae		4c 0b a2	jmp $a20b			jmp 	TypeError
.85b1						_DCGetSize:
.85b1		a2 00		ldx #$00			ldx 	#0 						; get first index.
.85b3		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 	; get array dimension
.85b6		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85b8		f0 e7		beq $85a1			beq 	_DCSize
.85ba		c9 fe		cmp #$fe			cmp 	#254
.85bc		f0 e3		beq $85a1			beq 	_DCSize
.85be		60		rts				rts
.85bf						ScaleByBaseType:
.85bf		29 10		and #$10			and 	#NSBIsString 			; is it string
.85c1		d0 19		bne $85dc			bne 	_SBBTString
.85c3		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85c5		48		pha				pha
.85c6		a5 36		lda $36				lda 	zTemp0
.85c8		48		pha				pha
.85c9		06 36		asl $36				asl 	zTemp0 					; x 2
.85cb		26 37		rol $37				rol 	zTemp0+1
.85cd		06 36		asl $36				asl 	zTemp0 					; x 4
.85cf		26 37		rol $37				rol 	zTemp0+1
.85d1		68		pla				pla 							; add stacked value = x 5
.85d2		65 36		adc $36				adc 	zTemp0
.85d4		85 36		sta $36				sta 	zTemp0
.85d6		68		pla				pla
.85d7		65 37		adc $37				adc 	zTemp0+1
.85d9		85 37		sta $37				sta 	zTemp0+1
.85db		60		rts				rts
.85dc						_SBBTString:
.85dc		06 36		asl $36				asl 	zTemp0
.85de		26 37		rol $37				rol 	zTemp0+1
.85e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.85e1						Command_Dir:
.85e1		ad 5c 06	lda $065c			lda     DefaultDrive				; set drive to list.
.85e4		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.85e6		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.85e8		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.85eb		b0 56		bcs $8643			bcs     _CDExit
.85ed						_CDEventLoop:
.85ed		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.85f0		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.85f3		b0 f8		bcs $85ed			bcs     _CDEventLoop
.85f5		ad 47 08	lda $0847			lda     event.type
.85f8		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.85fa		f0 47		beq $8643			beq    	_CDExit
.85fc		20 01 86	jsr $8601			jsr     _CDMessages 				; handle various messages
.85ff		80 ec		bra $85ed			bra     _CDEventLoop
.8601						_CDMessages:
.8601		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8603		f0 15		beq $861a			beq     _CDEVRead
.8605		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8607		f0 19		beq $8622			beq     _CDEVVolume
.8609		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.860b		f0 17		beq $8624			beq     _CDEVFile
.860d		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.860f		f0 28		beq $8639			beq     _CDEVFree
.8611		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8613		f0 26		beq $863b			beq     _CDEVEOF
.8615		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8617		f0 22		beq $863b			beq     _CDEVEOF
.8619		60		rts				rts
.861a						_CDEVRead:
.861a		ad 4a 08	lda $084a			lda     event.directory.stream
.861d		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.861f		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8622						_CDEVVolume:
.8622		80 f6		bra $861a			bra     _CDEVRead
.8624						_CDEVFile:
.8624		a9 20		lda #$20			lda 	#32
.8626		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8629		ad 4c 08	lda $084c			lda     event.directory.file.len
.862c		20 46 86	jsr $8646			jsr     _CDReadData
.862f		20 59 86	jsr $8659			jsr     _CDPrintData
.8632		a9 0d		lda #$0d			lda 	#13
.8634		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8637		80 e1		bra $861a			bra     _CDEVRead
.8639						_CDEVFree:
.8639		80 00		bra $863b			bra     _CDEVEOF
.863b						_CDEVEOF:
.863b		ad 4a 08	lda $084a			lda     event.directory.stream
.863e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8640		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8643						_CDExit:
.8643		4c 26 84	jmp $8426			jmp 	WarmStart
.8646						_CDReadData:
.8646		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8648		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.864a		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.864c		a9 05		lda #$05			lda     #lineBuffer >> 8
.864e		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8650		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8653		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8655		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8658		60		rts				rts
.8659						_CDPrintData:
.8659		a2 00		ldx #$00			ldx 	#0
.865b						_CDPLoop:
.865b		bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.865e		c9 41		cmp #$41			cmp		#"A"
.8660		90 06		bcc $8668			bcc 	_CDPNotUpper
.8662		c9 5b		cmp #$5b			cmp 	#"Z"+1
.8664		b0 02		bcs $8668			bcs 	_CDPNotUpper
.8666		49 20		eor #$20			eor 	#32
.8668						_CDPNotUpper:
.8668		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.866b		e8		inx				inx
.866c		bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.866f		d0 ea		bne $865b			bne 	_CDPLoop
.8671		60		rts				rts
.8672						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8672						Command_Drive:
.8672		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger
.8675		8d 5c 06	sta $065c			sta 	DefaultDrive
.8678		60		rts				rts
.065c						DefaultDrive:
>065c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8679						EndCommand:
.8679		4c 26 84	jmp $8426			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.867c						ForCommand:
.867c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.867e		20 7c b1	jsr $b17c			jsr 	StackOpen
.8681		a2 00		ldx #$00			ldx 	#0
.8683		20 86 9a	jsr $9a86			jsr 	EvaluateTerm
.8686		b5 50		lda $50,x			lda 	NSStatus,x
.8688		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.868a		d0 47		bne $86d3			bne		_FCError
.868c		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.868e		20 2f 91	jsr $912f			jsr 	CheckNextA
.8691		e8		inx				inx
.8692		20 f0 9f	jsr $9ff0			jsr 	EvaluateInteger 			; <from> in +1
.8695		b1 30		lda ($30),y			lda 	(codePtr),y
.8697		c8		iny				iny 								; consume it
.8698		48		pha				pha 								; save on stack for later
.8699		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.869b		f0 04		beq $86a1			beq 	_FCNoSyntax
.869d		c9 d8		cmp #$d8			cmp 	#KWD_TO
.869f		d0 35		bne $86d6			bne 	_FCSyntaxError
.86a1						_FCNoSyntax:
.86a1		e8		inx				inx
.86a2		20 f0 9f	jsr $9ff0			jsr 	EvaluateInteger
.86a5		20 c1 b1	jsr $b1c1			jsr 	STKSaveCodePosition 		; save loop back position
.86a8		68		pla				pla 								; restore DOWNTO or TO
.86a9		5a		phy				phy 								; save Y on the stack
.86aa		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.86ac		f0 02		beq $86b0			beq 	_FCNotDownTo
.86ae		a9 02		lda #$02			lda 	#2
.86b0						_FCNotDownTo:
.86b0		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.86b1		a0 10		ldy #$10			ldy 	#16
.86b3		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.86b5		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.86b7		a5 58		lda $58				lda 	NSMantissa0
.86b9		91 34		sta ($34),y			sta 	(basicStack),y
.86bb		a5 60		lda $60				lda 	NSMantissa1
.86bd		c8		iny				iny
.86be		91 34		sta ($34),y			sta 	(basicStack),y
.86c0		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.86c2		a2 01		ldx #$01			ldx 	#1
.86c4		20 d9 86	jsr $86d9			jsr 	FCIntegerToStack
.86c7		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.86c9		a2 02		ldx #$02			ldx 	#2
.86cb		20 d9 86	jsr $86d9			jsr 	FCIntegerToStack
.86ce		20 f4 86	jsr $86f4			jsr 	CopyIndexToReference
.86d1		7a		ply				ply 								; restore position
.86d2		60		rts				rts
.86d3						_FCError:
.86d3		4c 0b a2	jmp $a20b			jmp 	TypeError
.86d6						_FCSyntaxError:
.86d6		4c 01 a2	jmp $a201			jmp 	SyntaxError
.86d9						FCIntegerToStack:
.86d9		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.86db		10 03		bpl $86e0			bpl	 	_FCNotNegative
.86dd		20 4c a0	jsr $a04c			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.86e0						_FCNotNegative:
.86e0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.86e2		91 34		sta ($34),y			sta 	(basicStack),y
.86e4		c8		iny				iny
.86e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.86e7		91 34		sta ($34),y			sta 	(basicStack),y
.86e9		c8		iny				iny
.86ea		b5 68		lda $68,x			lda 	NSMantissa2,x
.86ec		91 34		sta ($34),y			sta 	(basicStack),y
.86ee		c8		iny				iny
.86ef		b5 70		lda $70,x			lda 	NSMantissa3,x
.86f1		91 34		sta ($34),y			sta 	(basicStack),y
.86f3		60		rts				rts
.86f4						CopyIndexToReference:
.86f4		5a		phy				phy
.86f5		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.86f7		38		sec				sec 								; (because we copy from offset 8)
.86f8		b1 34		lda ($34),y			lda 	(basicStack),y
.86fa		e9 08		sbc #$08			sbc 	#8
.86fc		85 36		sta $36				sta 	zTemp0
.86fe		c8		iny				iny
.86ff		b1 34		lda ($34),y			lda 	(basicStack),y
.8701		e9 00		sbc #$00			sbc 	#0
.8703		85 37		sta $37				sta 	zTemp0+1
.8705		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8707		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8709		b1 34		lda ($34),y			lda 	(basicStack),y
.870b		0a		asl a				asl 	a 							; into carry
.870c		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.870e		90 14		bcc $8724			bcc 	_CITRNormal
.8710		38		sec				sec
.8711						_CITRNegative:
.8711		a9 00		lda #$00			lda 	#0
.8713		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8715		91 36		sta ($36),y			sta 	(zTemp0),y
.8717		c8		iny				iny
.8718		ca		dex				dex
.8719		d0 f6		bne $8711			bne 	_CITRNegative
.871b		88		dey				dey 								; look at MSB of mantissa
.871c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.871e		09 80		ora #$80			ora 	#$80
.8720		91 36		sta ($36),y			sta 	(zTemp0),y
.8722		7a		ply				ply
.8723		60		rts				rts
.8724						_CITRNormal:
.8724		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8726		91 36		sta ($36),y			sta 	(zTemp0),y
.8728		c8		iny				iny
.8729		ca		dex				dex
.872a		d0 f8		bne $8724			bne 	_CITRNormal
.872c		7a		ply				ply 								; and exit.
.872d		60		rts				rts
.872e						NextCommand:
.872e		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8730		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8732		20 a9 b1	jsr $b1a9			jsr 	StackCheckFrame
.8735		5a		phy				phy
.8736		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8738		b1 34		lda ($34),y			lda 	(basicStack),y
.873a		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.873c		30 02		bmi $8740			bmi 	_NCStepNeg
.873e		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8740						_NCStepNeg:
.8740		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8742		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8744		18		clc				clc
.8745						_NCBump:
.8745		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8747		91 34		sta ($34),y			sta 	(basicStack),y
.8749		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.874b		c8		iny				iny 								; next byte
.874c		ca		dex				dex 								; do four times
.874d		d0 f6		bne $8745			bne 	_NCBump
.874f		20 f4 86	jsr $86f4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8752		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8754		b1 34		lda ($34),y			lda 	(basicStack),y
.8756		0a		asl a				asl 	a 							; sign bit to carry
.8757		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8759		85 38		sta $38				sta 	zTemp1
.875b		90 02		bcc $875f			bcc 	_NCCompRev 					; use if step is +ve
.875d		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.875f						_NCCompRev:
.875f		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8761		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8763		85 39		sta $39				sta 	zTemp1+1
.8765		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8767		38		sec				sec
.8768						_NCCompare:
.8768		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.876a		b1 34		lda ($34),y			lda 	(basicStack),y
.876c		a4 39		ldy $39				ldy 	zTemp1+1
.876e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8770		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8772		e6 39		inc $39				inc 	zTemp1+1
.8774		ca		dex				dex 								; do it 4 times.
.8775		d0 f1		bne $8768			bne 	_NCCompare
.8777		50 02		bvc $877b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8779		49 80		eor #$80			eor 	#$80
.877b						_NCNoOverflow:
.877b		7a		ply				ply 								; restore Y position
.877c		0a		asl a				asl 	a 							; is bit 7 set.
.877d		90 04		bcc $8783			bcc 	_NCLoopBack 				; if no , >= so loop back
.877f		20 9b b1	jsr $b19b			jsr 	StackClose 					; exit the loop
.8782		60		rts				rts
.8783						_NCLoopBack:
.8783		20 d2 b1	jsr $b1d2			jsr 	STKLoadCodePosition 		; loop back
.8786		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8787						Command_GOSUB:
.8787		a2 00		ldx #$00			ldx 	#0
.8789		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.878c		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.878e		20 7c b1	jsr $b17c			jsr 	StackOpen 					; create frame
.8791		20 c1 b1	jsr $b1c1			jsr 	STKSaveCodePosition 		; save current position
.8794		4c aa 87	jmp $87aa			jmp 	GotoStackX
.8797						Command_RETURN:
.8797		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8799		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.879b		20 a9 b1	jsr $b1a9			jsr 	StackCheckFrame
.879e		20 d2 b1	jsr $b1d2			jsr 	STKLoadCodePosition 		; restore code position
.87a1		20 9b b1	jsr $b19b			jsr 	StackClose
.87a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.87a5						GotoCommand:
.87a5		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.87a7		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.87aa						GotoStackX:
.87aa		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.87ac		48		pha				pha 								; it is slightly inefficient, just in cases.
.87ad		b5 58		lda $58,x			lda 	NSMantissa0,x
.87af		fa		plx				plx
.87b0		20 28 a8	jsr $a828			jsr 	MemorySearch 				; transfer to line number AX.
.87b3		90 05		bcc $87ba			bcc 	_GotoError 					; not found, off end.
.87b5		d0 03		bne $87ba			bne 	_GotoError 					; not found exactly
.87b7		4c 1a 8d	jmp $8d1a			jmp 	RunNewLine 					; and go straight to new line code.
.87ba						_GotoError:
.87ba		a9 0d		lda #$0d		lda	#13
.87bc		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.87bf						IfCommand:
.87bf		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.87c1		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber
.87c4		b1 30		lda ($30),y			lda 	(codePtr),y
.87c6		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.87c8		d0 0a		bne $87d4			bne 	_IfStructured 				; we still support it.
.87ca		c8		iny				iny 								; consume THEN
.87cb		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; is it zero
.87ce		f0 01		beq $87d1			beq 	_IfFail 					; if fail, go to next line
.87d0		60		rts				rts 								; if THEN just continue
.87d1						_IfFail:
.87d1		4c 02 8d	jmp $8d02			jmp 	EOLCommand
.87d4						_IfStructured:
.87d4		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; is it zero
.87d7		d0 07		bne $87e0			bne 	_IfExit 					; if not, then continue normally.
.87d9		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.87db		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.87dd		20 7a 90	jsr $907a			jsr 	ScanForward 				; and run from there
.87e0						_IfExit:
.87e0		60		rts				rts
.87e1						ElseCode:
.87e1		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.87e3		aa		tax				tax 								; so just go to the structure exit
.87e4		20 7a 90	jsr $907a			jsr 	ScanForward
.87e7		60		rts				rts
.87e8						EndIf:
.87e8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.87e9						Command_Input:
.87e9		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.87eb		8d 28 04	sta $0428			sta 	isInputFlag
.87ee		80 03		bra $87f3			bra 	Command_IP_Main
.87f0						Command_Print:
.87f0		9c 28 04	stz $0428			stz 	isInputFlag 				; clear input flag
.87f3						Command_IP_Main:
.87f3		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87f4						_CPLoop:
.87f4		08		php				php 								; save last action flag
.87f5		b1 30		lda ($30),y			lda 	(codePtr),y
.87f7		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87f9		f0 54		beq $884f			beq 	_CPExit
.87fb		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87fd		f0 50		beq $884f			beq 	_CPExit
.87ff		68		pla				pla 								; throw last action flag
.8800		b1 30		lda ($30),y			lda 	(codePtr),y
.8802		c8		iny				iny
.8803		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8805		f0 45		beq $884c			beq 	_CPContinueWithSameLine
.8807		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8809		f0 3c		beq $8847			beq 	_CPTab
.880b		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.880d		f0 34		beq $8843			beq 	_CPNewLine
.880f		88		dey				dey 								; undo the get.
.8810		20 3a 96	jsr $963a			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8813		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8815		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8817		f0 0d		beq $8826			beq 	_CPIsValue 					; no, display it.
.8819		ad 28 04	lda $0428			lda 	isInputFlag 				; if print, dereference and print.
.881c		f0 05		beq $8823			beq 	_CPIsPrint 					; otherwise display.
.881e		20 58 88	jsr $8858			jsr 	CIInputValue 				; input a value to the reference
.8821		80 20		bra $8843			bra 	_CPNewLine
.8823						_CPIsPrint:
.8823		20 ff 98	jsr $98ff			jsr 	Dereference 				; dereference if required.
.8826						_CPIsValue:
.8826		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8828		29 10		and #$10			and 	#NSBIsString
.882a		f0 09		beq $8835			beq 	_CPNumber
.882c		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.882e		a5 58		lda $58				lda 	NSMantissa0
.8830		20 bb 88	jsr $88bb			jsr 	CPPrintStringXA
.8833		80 be		bra $87f3			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8835						_CPNumber:
.8835		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8837		20 b8 9e	jsr $9eb8			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.883a		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.883c		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.883e		20 bb 88	jsr $88bb			jsr 	CPPrintStringXA 			; print it.
.8841		80 b0		bra $87f3			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8843						_CPNewLine:
.8843		a9 0d		lda #$0d			lda 	#13
.8845		80 02		bra $8849			bra 	_CPPrintChar
.8847						_CPTab:
.8847		a9 09		lda #$09			lda 	#9 							; print TAB
.8849						_CPPrintChar:
.8849		20 ce 88	jsr $88ce			jsr 	CPPrintVector
.884c						_CPContinueWithSameLine:
.884c		38		sec				sec 								; loop round with carry set, which
.884d		80 a5		bra $87f4			bra 	_CPLoop 					; will inhibit final CR
.884f						_CPExit:
.884f		28		plp				plp 								; get last action flag
.8850		b0 05		bcs $8857			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8852		a9 0d		lda #$0d			lda 	#13 						; print new line
.8854		20 ce 88	jsr $88ce			jsr 	CPPrintVector
.8857						_CPExit2:
.8857		60		rts				rts
.8858						CIInputValue:
.8858		a2 00		ldx #$00			ldx 	#0 							; input a line.
.885a						_CIInputLine:
.885a		20 d1 88	jsr $88d1			jsr 	CPInputVector 				; get key
.885d		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.885f		f0 1f		beq $8880			beq 	_CIHaveValue
.8861		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8863		f0 11		beq $8876			beq 	_CIBackspace
.8865		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8867		90 f1		bcc $885a			bcc 	_CIInputLine
.8869		e0 50		cpx #$50			cpx 	#80 						; max length
.886b		b0 ed		bcs $885a			bcs 	_CIInputLine
.886d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8870		e8		inx				inx
.8871		20 ce 88	jsr $88ce			jsr 	CPPrintVector 				; echo it.
.8874		80 e4		bra $885a			bra 	_CIInputLine
.8876						_CIBackspace:
.8876		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8878		f0 e0		beq $885a			beq 	_CIInputLine
.887a		20 ce 88	jsr $88ce			jsr 	CPPrintVector 				; echo it.
.887d		ca		dex				dex
.887e		80 da		bra $885a			bra 	_CIInputLine
.8880						_CIHaveValue:
.8880		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8883		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8885		29 10		and #$10			and 	#NSBIsString
.8887		f0 17		beq $88a0			beq 	_CIAssignNumber 			; assign a number
.8889		a2 01		ldx #$01			ldx 	#1
.888b		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.888d		95 58		sta $58,x			sta 	NSMantissa0,x
.888f		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8891		95 60		sta $60,x			sta 	NSMantissa1,x
.8893		74 68		stz $68,x			stz 	NSMantissa2,x
.8895		74 70		stz $70,x			stz 	NSMantissa3,x
.8897		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8899		95 50		sta $50,x			sta  	NSStatus,x
.889b		ca		dex				dex 								; X = 0
.889c		20 0d 89	jsr $890d			jsr 	AssignVariable
.889f		60		rts				rts
.88a0						_CIAssignNumber:
.88a0		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.88a2		85 36		sta $36				sta 	zTemp0
.88a4		a9 05		lda #$05			lda 	#lineBuffer >> 8
.88a6		85 37		sta $37				sta 	zTemp0+1
.88a8		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.88aa		20 3a 9e	jsr $9e3a			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.88ad		90 07		bcc $88b6			bcc 	_CIIsOkay
.88af		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.88b1		20 ce 88	jsr $88ce			jsr 	CPPrintVector
.88b4		80 a2		bra $8858			bra 	CIInputValue
.88b6						_CIIsOkay:
.88b6		ca		dex				dex 								; X = 0
.88b7		20 0d 89	jsr $890d			jsr 	AssignVariable
.88ba		60		rts				rts
.88bb						CPPrintStringXA:
.88bb		5a		phy				phy
.88bc		86 37		stx $37				stx 	zTemp0+1
.88be		85 36		sta $36				sta 	zTemp0
.88c0		a0 00		ldy #$00			ldy 	#0
.88c2						_PSXALoop:
.88c2		b1 36		lda ($36),y			lda 	(zTemp0),y
.88c4		f0 06		beq $88cc			beq 	_PSXAExit
.88c6		20 ce 88	jsr $88ce			jsr 	CPPrintVector
.88c9		c8		iny				iny
.88ca		80 f6		bra $88c2			bra 	_PSXALoop
.88cc						_PSXAExit:
.88cc		7a		ply				ply
.88cd		60		rts				rts
.88ce						CPPrintVector:
.88ce		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.88d1						CPInputVector:
.88d1		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.88d4						LetCommand:
.88d4		a2 00		ldx #$00			ldx 	#0
.88d6		b1 30		lda ($30),y			lda 	(codePtr),y
.88d8		c9 10		cmp #$10			cmp 	#KWD_AT
.88da		d0 14		bne $88f0			bne 	_LCStandard
.88dc		c8		iny				iny 								; skip equal
.88dd		20 86 9a	jsr $9a86			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.88e0		20 ff 98	jsr $98ff			jsr 	Dereference 				; dereference it to a value
.88e3		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.88e5		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.88e7		95 50		sta $50,x			sta 	NSStatus,x
.88e9		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.88eb		d0 0f		bne $88fc			bne 	_LCMain
.88ed		4c 0b a2	jmp $a20b			jmp 	TypeError 					; was a reference before.
.88f0						_LCStandard:
.88f0		ad 24 96	lda $9624			lda 	PrecedenceLevel+"*"			; precedence > this
.88f3		20 3e 96	jsr $963e			jsr 	EvaluateExpressionAtPrecedence
.88f6		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.88f8		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.88fa		f0 0e		beq $890a			beq 	_LetGoProc 					; it's a procedure call.
.88fc						_LCMain:
.88fc		a9 3d		lda #$3d			lda 	#"=" 						; check =
.88fe		20 2f 91	jsr $912f			jsr 	CheckNextA
.8901		e8		inx				inx 								; RHS
.8902		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue
.8905		ca		dex				dex
.8906		20 0d 89	jsr $890d			jsr 	AssignVariable
.8909		60		rts				rts
.890a						_LetGoProc:
.890a		4c d8 8b	jmp $8bd8			jmp 	CallProcedure
.890d						AssignVariable:
.890d		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.890f		48		pha				pha 								; save a copy
.8910		55 51		eor $51,x			eor 	NSStatus+1,x
.8912		29 10		and #$10			and 	#NSBIsString
.8914		d0 0b		bne $8921			bne 	_ASError
.8916		68		pla				pla 								; get back
.8917		29 10		and #$10			and 	#NSBIsString 				; check type
.8919		d0 03		bne $891e			bne 	_ASString
.891b		4c 3d 98	jmp $983d			jmp 	AssignNumber
.891e						_ASString:
.891e		4c 9b 98	jmp $989b			jmp 	AssignString
.8921						_ASError:
.8921		4c 0b a2	jmp $a20b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8924						Command_List:
.8924		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8927		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8929		20 85 80	jsr $8085			jsr 	SNDCommand
.892c		b1 30		lda ($30),y			lda 	(codePtr),y
.892e		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8930		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8932		f0 6e		beq $89a2			beq 	_CLListProcedure
.8934		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8936		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8938		a9 ff		lda #$ff			lda 	#$FF
.893a		85 5f		sta $5f				sta 	NSMantissa0+7
.893c		85 67		sta $67				sta 	NSMantissa1+7
.893e		b1 30		lda ($30),y			lda 	(codePtr),y
.8940		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8942		f0 1a		beq $895e			beq 	_CLSecond
.8944		20 1f 8a	jsr $8a1f			jsr 	CLIsDigit 					; if not digit, list all
.8947		b0 20		bcs $8969			bcs 	_CLStart
.8949		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.894b		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.894e		b1 30		lda ($30),y			lda 	(codePtr),y
.8950		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8952		f0 0a		beq $895e			beq 	_CLSecond 					; if so go get it
.8954		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8956		85 5f		sta $5f				sta 	NSMantissa0+7
.8958		a5 64		lda $64				lda 	NSMantissa1+4
.895a		85 67		sta $67				sta 	NSMantissa1+7
.895c		80 0b		bra $8969			bra 	_CLStart
.895e						_CLSecond:
.895e		c8		iny				iny 								; consume comma
.895f		20 1f 8a	jsr $8a1f			jsr 	CLIsDigit 					; digit found
.8962		b0 05		bcs $8969			bcs 	_CLStart 					; if not, continue listing
.8964		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8966		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.8969						_CLStart
.8969		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.896b		85 30		sta $30				sta 	codePtr
.896d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.896f		85 31		sta $31				sta 	codePtr+1
.8971						_CLLoop:
.8971		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.8974		f0 27		beq $899d			beq 	_CLBreak
.8976		b2 30		lda ($30)			lda 	(codePtr)
.8978		f0 20		beq $899a			beq 	_CLExit
.897a		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.897c		20 0e 8a	jsr $8a0e			jsr 	CLCompareLineNo
.897f		90 0c		bcc $898d			bcc 	_CLNext
.8981		a2 07		ldx #$07			ldx 	#7
.8983		20 0e 8a	jsr $8a0e			jsr 	CLCompareLineNo
.8986		f0 02		beq $898a			beq 	_CLDoThisOne
.8988		b0 03		bcs $898d			bcs 	_CLNext
.898a						_CLDoThisOne:
.898a		20 fb 89	jsr $89fb			jsr 	CLListOneLine 				; routine to list the current line.
.898d						_CLNext:
.898d		18		clc				clc
.898e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8990		65 30		adc $30				adc 	codePtr
.8992		85 30		sta $30				sta 	codePtr
.8994		90 02		bcc $8998			bcc 	_CREExit
.8996		e6 31		inc $31				inc 	codePtr+1 					; carry
.8998						_CREExit:
.8998		80 d7		bra $8971			bra 	_CLLoop
.899a						_CLExit:
.899a		4c 26 84	jmp $8426			jmp 	WarmStart
.899d						_CLBreak:
.899d		a9 01		lda #$01		lda	#1
.899f		4c 38 91	jmp $9138		jmp	ErrorHandler
.89a2						_CLListProcedure:
.89a2		b1 30		lda ($30),y			lda 	(codePtr),y
.89a4		85 38		sta $38				sta 	zTemp1
.89a6		c8		iny				iny
.89a7		b1 30		lda ($30),y			lda 	(codePtr),y
.89a9		85 39		sta $39				sta 	zTemp1+1
.89ab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ad		85 30		sta $30				sta 	codePtr
.89af		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b1		85 31		sta $31				sta 	codePtr+1
.89b3						_CLLPSearch:
.89b3		b2 30		lda ($30)			lda 	(codePtr)
.89b5		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.89b7		f0 e1		beq $899a			beq 	_CLExit
.89b9		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.89bb		b1 30		lda ($30),y			lda 	(codePtr),y
.89bd		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.89bf		d0 0e		bne $89cf			bne 	_CLLPNext
.89c1		c8		iny				iny 								; check if PROC this.
.89c2		b1 30		lda ($30),y			lda 	(codePtr),y
.89c4		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.89c6		d0 07		bne $89cf			bne 	_CLLPNext
.89c8		c8		iny				iny
.89c9		b1 30		lda ($30),y			lda 	(codePtr),y
.89cb		c5 39		cmp $39				cmp 	zTemp1+1
.89cd		f0 0d		beq $89dc			beq 	_CLLPFound
.89cf						_CLLPNext:
.89cf		18		clc				clc
.89d0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89d2		65 30		adc $30				adc 	codePtr
.89d4		85 30		sta $30				sta 	codePtr
.89d6		90 02		bcc $89da			bcc 	_CREExit
.89d8		e6 31		inc $31				inc 	codePtr+1 					; carry
.89da						_CREExit:
.89da		80 d7		bra $89b3			bra 	_CLLPSearch
.89dc						_CLLPFound:
.89dc		b2 30		lda ($30)			lda 	(codePtr)
.89de		f0 ba		beq $899a			beq 	_CLExit
.89e0		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.89e2		b1 30		lda ($30),y			lda 	(codePtr),y
.89e4		48		pha				pha
.89e5		20 fb 89	jsr $89fb			jsr 	CLListOneLine 				; list line and go forward
.89e8		18		clc				clc
.89e9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89eb		65 30		adc $30				adc 	codePtr
.89ed		85 30		sta $30				sta 	codePtr
.89ef		90 02		bcc $89f3			bcc 	_CREExit
.89f1		e6 31		inc $31				inc 	codePtr+1 					; carry
.89f3						_CREExit:
.89f3		68		pla				pla 								; reached ENDPROC ?
.89f4		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.89f6		d0 e4		bne $89dc			bne 	_CLLPFound
.89f8		4c 26 84	jmp $8426			jmp 	WarmStart
.89fb						CLListOneLine:
.89fb		20 dd 90	jsr $90dd			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.89fe		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.8a01		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8a03		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8a05		20 91 91	jsr $9191			jsr 	PrintStringXA
.8a08		a9 0d		lda #$0d			lda 	#13 						; new line
.8a0a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8a0d		60		rts				rts
.8a0e						CLCompareLineNo:
.8a0e		38		sec				sec
.8a0f		a0 01		ldy #$01			ldy 	#1
.8a11		b1 30		lda ($30),y			lda 	(codePtr),y
.8a13		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8a15		85 36		sta $36				sta 	zTemp0
.8a17		c8		iny				iny
.8a18		b1 30		lda ($30),y			lda 	(codePtr),y
.8a1a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8a1c		05 36		ora $36				ora 	zTemp0
.8a1e		60		rts				rts
.8a1f						CLIsDigit:
.8a1f		b1 30		lda ($30),y			lda 	(codePtr),y
.8a21		c9 30		cmp #$30			cmp 	#"0"
.8a23		90 03		bcc $8a28			bcc	 	_CLIDExitFalse
.8a25		c9 3a		cmp #$3a			cmp 	#"9"+1
.8a27		60		rts				rts
.8a28						_CLIDExitFalse:
.8a28		38		sec				sec
.8a29		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8a2a						Command_Load:
.8a2a		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; file name to load
.8a2d		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a2f		a5 36		lda $36				lda 	zTemp0
.8a31		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8a34		b0 44		bcs $8a7a			bcs 	CLErrorHandler 				; error, so fail.
.8a36		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8a39		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8a3c		20 91 8b	jsr $8b91			jsr 	NewProgram 					; does the actual NEW.
.8a3f		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a42						_CLLoop:
.8a42		20 88 8a	jsr $8a88			jsr 	LoadReadLine 				; get next line.
.8a45		f0 10		beq $8a57			beq 	_CLExit 					; end, exit.
.8a47		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.8a4a		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8a4d		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8a50		f0 f0		beq $8a42			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a52		20 01 84	jsr $8401			jsr 	EditProgramCode 			; do the editing etc.
.8a55		80 eb		bra $8a42			bra 	_CLLoop
.8a57						_CLExit:
.8a57		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a5a		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a5d						CLComplete:
.8a5d		a9 67		lda #$67			lda 	#_CLCMsg & $FF
.8a5f		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a61		20 91 91	jsr $9191			jsr 	PrintStringXA
.8a64		4c 26 84	jmp $8426			jmp 	WarmStart
.8a67						_CLCMsg:
>8a67		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a6f		2e 0d 00
.8a72						CLCloseError:
.8a72		48		pha				pha
.8a73		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a76		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8a79		68		pla				pla
.8a7a						CLErrorHandler:
.8a7a		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a7c		f0 05		beq $8a83			beq 	_CLEHNotFound
.8a7e		a9 1a		lda #$1a		lda	#26
.8a80		4c 38 91	jmp $9138		jmp	ErrorHandler
.8a83						_CLEHNotFound:
.8a83		a9 19		lda #$19		lda	#25
.8a85		4c 38 91	jmp $9138		jmp	ErrorHandler
.8a88						LoadReadLine:
.8a88		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a8a		20 a4 8a	jsr $8aa4			jsr 	LoadReadCharacter
.8a8d		f0 14		beq $8aa3			beq 	_LRLExit 					; eof ?
.8a8f		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a91		90 f5		bcc $8a88			bcc 	LoadReadLine
.8a93						_LRLLoop:
.8a93		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8a96		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a99		e8		inx				inx
.8a9a		20 a4 8a	jsr $8aa4			jsr 	LoadReadCharacter 			; next line
.8a9d		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a9f		b0 f2		bcs $8a93			bcs 	_LRLLoop
.8aa1		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8aa3						_LRLExit:
.8aa3		60		rts				rts
.8aa4						LoadReadCharacter:
.8aa4		da		phx				phx
.8aa5		5a		phy				phy
.8aa6		ad 5d 06	lda $065d			lda 	LoadEOFFlag 				; already done EOF.
.8aa9		d0 0c		bne $8ab7			bne 	_LRCIsEOF
.8aab		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8aae		90 09		bcc $8ab9			bcc		_LRCExit 					; read okay.
.8ab0		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8ab2		d0 be		bne $8a72			bne 	CLCloseError
.8ab4		ce 5d 06	dec $065d			dec 	LoadEOFFlag
.8ab7						_LRCIsEOF:
.8ab7		a9 00		lda #$00			lda 	#0
.8ab9						_LRCExit:
.8ab9		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8abb		d0 02		bne $8abf			bne 	_LRCNotTab
.8abd		a9 20		lda #$20			lda 	#' '
.8abf						_LRCNotTab:
.8abf		c9 0a		cmp #$0a			cmp 	#$0A
.8ac1		d0 02		bne $8ac5			bne 	_LRCNotLF
.8ac3		a9 0d		lda #$0d			lda 	#$0D
.8ac5						_LRCNotLF:
.8ac5		7a		ply				ply
.8ac6		fa		plx				plx
.8ac7		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8ac9		60		rts				rts
.065d						LoadEOFFlag:
>065d								.fill 	1
.065e						CurrentFileStream:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8aca						Command_LOCAL:
.8aca		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8acc		20 d8 8a	jsr $8ad8			jsr 	LocaliseNextTerm 			; convert term to a local.
.8acf		b1 30		lda ($30),y			lda 	(codePtr),y
.8ad1		c8		iny				iny
.8ad2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ad4		f0 f4		beq $8aca			beq 	Command_LOCAL 				; if so, localise another variable.
.8ad6		88		dey				dey 								; unpick pre-get
.8ad7		60		rts				rts
.8ad8						LocaliseNextTerm:
.8ad8		20 86 9a	jsr $9a86			jsr 	EvaluateTerm 				; evaluate the term
.8adb		b5 50		lda $50,x			lda 	NSStatus,x
.8add		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8adf		f0 5c		beq $8b3d			beq		_LNTError
.8ae1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ae3		85 36		sta $36				sta 	zTemp0
.8ae5		b5 60		lda $60,x			lda 	NSMantissa1,x
.8ae7		85 37		sta $37				sta  	zTemp0+1
.8ae9		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8aeb		29 10		and #$10			and 	#NSBIsString
.8aed		d0 1e		bne $8b0d			bne 	_LNTPushString
.8aef		5a		phy				phy
.8af0		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8af2						_LNTPushNumLoop:
.8af2		b1 36		lda ($36),y			lda		(zTemp0),y
.8af4		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8af7		c8		iny				iny
.8af8		c0 05		cpy #$05			cpy 	#5
.8afa		d0 f6		bne $8af2			bne 	_LNTPushNumLoop
.8afc		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8afe		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b01		a5 37		lda $37				lda 	zTemp0+1
.8b03		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b06		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8b08		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b0b		7a		ply				ply
.8b0c		60		rts				rts
.8b0d						_LNTPushString:
.8b0d		5a		phy				phy
.8b0e		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b10		85 38		sta $38				sta 	zTemp1
.8b12		a0 01		ldy #$01			ldy 	#1
.8b14		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b16		85 39		sta $39				sta 	zTemp1+1
.8b18		a0 00		ldy #$00			ldy 	#0 							; output string
.8b1a		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8b1c		f0 0a		beq $8b28			beq 	_LNTStringOut
.8b1e						_LNTPushStrLoop:
.8b1e		b1 38		lda ($38),y			lda 	(zTemp1),y
.8b20		f0 06		beq $8b28			beq 	_LNTStringOut
.8b22		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b25		c8		iny				iny
.8b26		80 f6		bra $8b1e			bra 	_LNTPushStrLoop
.8b28						_LNTStringOut:
.8b28		98		tya				tya									; output length (chars written).
.8b29		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b2c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b2e		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b31		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b33		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b36		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b38		20 5b b1	jsr $b15b			jsr 	StackPushByte
.8b3b		7a		ply				ply
.8b3c		60		rts				rts
.8b3d						_LNTError:
.8b3d		4c 01 a2	jmp $a201			jmp 	SyntaxError
.8b40						LocalPopValue:
.8b40		20 73 b1	jsr $b173			jsr 	StackPopByte
.8b43		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8b45		d0 17		bne $8b5e			bne 	_LPVString
.8b47		20 73 b1	jsr $b173			jsr 	StackPopByte 				; address
.8b4a		85 37		sta $37				sta 	zTemp0+1
.8b4c		20 73 b1	jsr $b173			jsr 	StackPopByte
.8b4f		85 36		sta $36				sta 	zTemp0
.8b51		5a		phy				phy
.8b52		a0 04		ldy #$04			ldy 	#4 							; copy back
.8b54						_LPVNumberCopy:
.8b54		20 73 b1	jsr $b173			jsr 	StackPopByte
.8b57		91 36		sta ($36),y			sta 	(zTemp0),y
.8b59		88		dey				dey
.8b5a		10 f8		bpl $8b54			bpl 	_LPVNumberCopy
.8b5c		7a		ply				ply 								; and complete
.8b5d		60		rts				rts
.8b5e						_LPVString:
.8b5e		20 73 b1	jsr $b173			jsr 	StackPopByte 				; address of record copied to zTemp0
.8b61		85 37		sta $37				sta 	zTemp0+1
.8b63		20 73 b1	jsr $b173			jsr 	StackPopByte
.8b66		85 36		sta $36				sta 	zTemp0
.8b68		5a		phy				phy
.8b69		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8b6b		85 38		sta $38				sta 	zTemp1
.8b6d		a0 01		ldy #$01			ldy 	#1
.8b6f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b71		85 39		sta $39				sta 	zTemp1+1
.8b73		20 73 b1	jsr $b173			jsr 	StackPopByte 				; # chars to get => y
.8b76		a8		tay				tay
.8b77		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8b79		f0 0e		beq $8b89			beq 	_LPVStringCopied
.8b7b		a9 00		lda #$00			lda 	#0 							; NULL on end
.8b7d		91 38		sta ($38),y			sta 	(zTemp1),y
.8b7f						_LPVStringCopy:
.8b7f		88		dey				dey
.8b80		30 07		bmi $8b89			bmi 	_LPVStringCopied
.8b82		20 73 b1	jsr $b173			jsr 	StackPopByte
.8b85		91 38		sta ($38),y			sta 	(zTemp1),y
.8b87		80 f6		bra $8b7f			bra 	_LPVStringCopy
.8b89						_LPVStringCopied:
.8b89		fa		plx				plx
.8b8a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b8b						NewCommand:
.8b8b		20 91 8b	jsr $8b91			jsr 	NewProgram 					; does the actual NEW.
.8b8e		4c 26 84	jmp $8426			jmp 	WarmStart 					; and warm starts straight away.
.8b91						NewProgram:
.8b91		20 0a a8	jsr $a80a			jsr 	MemoryNew
.8b94		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b97		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear everything.
.8b9a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8b9b						PokeBCommand:
.8b9b		a9 01		lda #$01			lda 	#1
.8b9d		80 0c		bra $8bab			bra 	PokeCommand
.8b9f						PokeWCommand:
.8b9f		a9 02		lda #$02			lda 	#2
.8ba1		80 08		bra $8bab			bra 	PokeCommand
.8ba3						PokeLCommand:
.8ba3		a9 03		lda #$03			lda 	#3
.8ba5		80 04		bra $8bab			bra 	PokeCommand
.8ba7						PokeDCommand:
.8ba7		a9 04		lda #$04			lda 	#4
.8ba9		80 00		bra $8bab			bra 	PokeCommand
.8bab						PokeCommand:
.8bab		48		pha				pha 								; save count on stack
.8bac		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8bae		20 03 a0	jsr $a003			jsr		Evaluate16BitInteger 		; address
.8bb1		20 27 91	jsr $9127			jsr 	CheckComma
.8bb4		e8		inx				inx
.8bb5		20 f0 9f	jsr $9ff0			jsr		EvaluateInteger 			; data
.8bb8		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8bba		85 36		sta $36				sta 	zTemp0
.8bbc		a5 60		lda $60				lda 	NSMantissa1
.8bbe		85 37		sta $37				sta 	zTemp0+1
.8bc0		68		pla				pla 								; count -> zTemp1
.8bc1		85 38		sta $38				sta 	zTemp1
.8bc3		5a		phy				phy 								; save Y position.
.8bc4		a0 00		ldy #$00			ldy 	#0 							; index to write
.8bc6		a2 00		ldx #$00			ldx 	#0 							; index to read
.8bc8						_PCLoop:
.8bc8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8bca		91 36		sta ($36),y			sta 	(zTemp0),y
.8bcc		c8		iny				iny 								; next byte to write
.8bcd		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8bce		18		clc				clc
.8bcf		69 08		adc #$08			adc 	#MathStackSize
.8bd1		aa		tax				tax
.8bd2		c6 38		dec $38				dec 	zTemp1 						; done them all
.8bd4		d0 f2		bne $8bc8			bne 	_PCLoop
.8bd6		7a		ply				ply 								; restore position.
.8bd7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8bd8						CallProcedure:
.8bd8		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8bda		b1 30		lda ($30),y			lda 	(codePtr),y
.8bdc		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8bde		f0 0c		beq $8bec			beq 	_CPEndParam
.8be0						_CPParamLoop:
.8be0		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue 				; get parameter onto stack
.8be3		e8		inx				inx 								; bump next stack
.8be4		b1 30		lda ($30),y			lda 	(codePtr),y
.8be6		c8		iny				iny
.8be7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8be9		f0 f5		beq $8be0			beq 	_CPParamLoop
.8beb		88		dey				dey 								; unpick.
.8bec						_CPEndParam:
.8bec		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8bef		c8		iny				iny									; skip right bracket
.8bf0		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8bf2		20 7c b1	jsr $b17c			jsr 	StackOpen
.8bf5		20 c1 b1	jsr $b1c1			jsr 	STKSaveCodePosition 		; save loop position
.8bf8		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8bfa		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8bfc		a5 60		lda $60				lda 	NSMantissa1
.8bfe		85 37		sta $37				sta 	zTemp0+1
.8c00		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8c02		b2 36		lda ($36)			lda 	(zTemp0)
.8c04		85 30		sta $30				sta 	safePtr
.8c06		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c08		85 31		sta $31				sta 	safePtr+1
.8c0a		c8		iny				iny
.8c0b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c0d		85 32		sta $32				sta 	safePtr+2
.8c0f		c8		iny				iny
.8c10		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c12		85 33		sta $33				sta 	safePtr+3
.8c14		c8		iny				iny 								; get Y offset -> Y
.8c15		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c17		a8		tay				tay
.8c18		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c1a		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8c1d		f0 13		beq $8c32			beq 	_ParamExit 					; if so, exit.
.8c1f						_ParamExtract:
.8c1f		ca		dex				dex 								; put a local term on the level before
.8c20		20 d8 8a	jsr $8ad8			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c23		20 0d 89	jsr $890d			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c26		e8		inx				inx 								; advance to next parameter to do.
.8c27		e8		inx				inx
.8c28		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8c2b		f0 05		beq $8c32			beq 	_ParamExit
.8c2d		20 27 91	jsr $9127			jsr 	CheckComma 					; comma seperating parameters
.8c30		80 ed		bra $8c1f			bra 	_ParamExtract
.8c32						_ParamExit:
.8c32		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; check )
.8c35		60		rts				rts 								; and continue from here
.8c36						Command_ENDPROC:
.8c36		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8c38		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8c3a		20 a9 b1	jsr $b1a9			jsr 	StackCheckFrame
.8c3d		20 d2 b1	jsr $b1d2			jsr 	STKLoadCodePosition 		; restore code position
.8c40		20 9b b1	jsr $b19b			jsr 	StackClose
.8c43		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c44						Command_Read:
.8c44		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c46		20 86 9a	jsr $9a86			jsr 	EvaluateTerm
.8c49		b5 50		lda $50,x			lda 	NSStatus,x
.8c4b		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c4d		f0 4f		beq $8c9e			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8c4f		20 e7 8c	jsr $8ce7			jsr 	SwapDataCodePtrs 			; swap code and data
.8c52		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c55		d0 25		bne $8c7c			bne 	_CRContinueData  			; forward for the next one.
.8c57		b2 30		lda ($30)			lda 	(codePtr)
.8c59		f0 1c		beq $8c77			beq 	_CRNoData
.8c5b						_CRKeepSearching:
.8c5b		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8c5d		a2 80		ldx #$80			ldx 	#KWC_EOL
.8c5f		20 7a 90	jsr $907a			jsr 	ScanForward
.8c62		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8c64		f0 16		beq $8c7c			beq 	_CRHaveData 				; found it
.8c66		18		clc				clc
.8c67		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c69		65 30		adc $30				adc 	codePtr
.8c6b		85 30		sta $30				sta 	codePtr
.8c6d		90 02		bcc $8c71			bcc 	_CREExit
.8c6f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c71						_CREExit:
.8c71		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8c73		b2 30		lda ($30)			lda 	(codePtr)
.8c75		d0 e4		bne $8c5b			bne 	_CRKeepSearching
.8c77						_CRNoData:
.8c77		a9 0b		lda #$0b		lda	#11
.8c79		4c 38 91	jmp $9138		jmp	ErrorHandler
.8c7c						_CRHaveData:
.8c7c						_CRContinueData:
.8c7c		a2 01		ldx #$01			ldx 	#1
.8c7e		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8c81		ca		dex				dex
.8c82		20 0d 89	jsr $890d			jsr		AssignVariable 				; do the assignment
.8c85		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8c88		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8c8c		d0 04		bne $8c92			bne 	_CRSwapBack
.8c8e		c8		iny				iny 								; consume comma
.8c8f		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8c92						_CRSwapBack:
.8c92		20 e7 8c	jsr $8ce7			jsr 	SwapDataCodePtrs			; swap them back.
.8c95		b1 30		lda ($30),y			lda 	(codePtr),y
.8c97		c8		iny				iny
.8c98		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c9a		f0 a8		beq $8c44			beq 	Command_Read 				; if so go round again.
.8c9c		88		dey				dey 								; unpick get.
.8c9d		60		rts				rts
.8c9e						_CRSyntax:
.8c9e		4c 01 a2	jmp $a201			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ca1						RemCommand:
.8ca1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca3		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ca5		d0 06		bne $8cad			bne 	_RMExit
.8ca7		c8		iny				iny 								; point to offset
.8ca8		98		tya				tya 								; A = offset position
.8ca9		38		sec				sec 								; add size +1 hence SEC
.8caa		71 30		adc ($30),y			adc 	(codePtr),y
.8cac		a8		tay				tay 								; make current position.
.8cad						_RMExit:
.8cad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8cae						Command_REPEAT:
.8cae		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8cb0		20 7c b1	jsr $b17c			jsr 	StackOpen
.8cb3		20 c1 b1	jsr $b1c1			jsr 	STKSaveCodePosition 		; save loop position
.8cb6		60		rts				rts
.8cb7						Command_UNTIL:
.8cb7		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8cb9		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8cbb		20 a9 b1	jsr $b1a9			jsr 	StackCheckFrame
.8cbe		a2 00		ldx #$00			ldx 	#0
.8cc0		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; work out the number
.8cc3		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; check if zero
.8cc6		f0 04		beq $8ccc			beq 	_CULoopBack 				; if so keep looping
.8cc8		20 9b b1	jsr $b19b			jsr 	StackClose		 			; return
.8ccb		60		rts				rts
.8ccc						_CULoopBack:
.8ccc		20 d2 b1	jsr $b1d2			jsr 	STKLoadCodePosition 		; loop back
.8ccf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8cd0						Command_Restore:
.8cd0		20 e7 8c	jsr $8ce7			jsr 	SwapDataCodePtrs 			; swap code and data
.8cd3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cd5		85 30		sta $30				sta 	codePtr
.8cd7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cd9		85 31		sta $31				sta 	codePtr+1
.8cdb		20 e7 8c	jsr $8ce7			jsr 	SwapDataCodePtrs 			; put them back
.8cde		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8ce0		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8ce3		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8ce6		60		rts				rts
.8ce7						SwapDataCodePtrs:
.8ce7		da		phx				phx
.8ce8		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8cea						_SDCPLoop:
.8cea		b5 30		lda $30,x			lda 	safePtr,x
.8cec		48		pha				pha
.8ced		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8cf0		95 30		sta $30,x			sta 	safePtr,x
.8cf2		68		pla				pla
.8cf3		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8cf6		ca		dex				dex
.8cf7		10 f1		bpl $8cea			bpl 	_SDCPLoop
.8cf9		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8cfc		8c 1b 04	sty $041b			sty 	dataPointer+4
.8cff		a8		tay				tay
.8d00		fa		plx				plx
.8d01		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8d02						EOLCommand:
.8d02		18		clc				clc
.8d03		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d05		65 30		adc $30				adc 	codePtr
.8d07		85 30		sta $30				sta 	codePtr
.8d09		90 02		bcc $8d0d			bcc 	_CREExit
.8d0b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d0d						_CREExit:
.8d0d		80 0b		bra $8d1a			bra 	RunNewLine
.8d0f						CommandRUN:
.8d0f		20 bc 84	jsr $84bc			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d12		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d14		85 30		sta $30				sta 	codePtr
.8d16		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d18		85 31		sta $31				sta 	codePtr+1
.8d1a						RunNewLine:
.8d1a		b2 30		lda ($30)			lda 	(codePtr)
.8d1c		f0 7b		beq $8d99			beq 	CRNoProgram         		; no then END.
.8d1e		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d20		9a		txs				txs
.8d21						RUNCodePointerLine:
.8d21		a0 02		ldy #$02			ldy 	#2 							; start of program
.8d23						_CRIncMainLoop:
.8d23		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8d26		d0 22		bne $8d4a			bne 	_CRNoBreakCheck
.8d28		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8d2b		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8d2e		f0 64		beq $8d94			beq 	_CRBreak
.8d30		a5 01		lda $01				lda 	1 							; save I/O 0
.8d32		48		pha				pha
.8d33		64 01		stz $01				stz 	1 							; access I/O Page 0
.8d35		38		sec				sec 								; calculate timer - LastTick
.8d36		ad 59 d6	lda $d659			lda 	$D659
.8d39		aa		tax				tax 								; saving timer in X
.8d3a		ed 5f 06	sbc $065f			sbc 	LastTick
.8d3d		c9 03		cmp #$03			cmp 	#3
.8d3f		90 06		bcc $8d47			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8d41		8e 5f 06	stx $065f			stx 	LastTick 					; update last timer
.8d44		20 ae a0	jsr $a0ae			jsr 	TickHandler 							; go do the code.
.8d47						_NoFireTick:
.8d47		68		pla				pla 								; restore I/O 0
.8d48		85 01		sta $01				sta 	1
.8d4a						_CRNoBreakCheck:
.8d4a		c8		iny				iny									; next token
.8d4b						_CRMainLoop:
.8d4b		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d4e		b1 30		lda ($30),y			lda 	(codePtr),y
.8d50		10 10		bpl $8d62			bpl 	_CRNotKeyword				; not a token.
.8d52		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d54		b0 04		bcs $8d5a			bcs 	_CRIsKeyword
.8d56		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d58		b0 34		bcs $8d8e			bcs		_CRSyntaxError
.8d5a						_CRIsKeyword:
.8d5a		c8		iny				iny 								; consume command
.8d5b		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d5c		aa		tax				tax 								; put in X for vector jump
.8d5d		20 91 8d	jsr $8d91			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d60		80 e9		bra $8d4b			bra 	_CRMainLoop 				; and loop round
.8d62						_CRNotKeyword:
.8d62		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d64		f0 bd		beq $8d23			beq 	_CRIncMainLoop
.8d66		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d68		90 05		bcc $8d6f			bcc 	_CRNotVariable
.8d6a						_CRGoLet:
.8d6a		20 d4 88	jsr $88d4			jsr 	LetCommand
.8d6d		80 dc		bra $8d4b			bra 	_CRMainLoop
.8d6f						_CRNotVariable:
.8d6f		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d71		f0 f7		beq $8d6a			beq 	_CRGoLet
.8d73		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d75		f0 f3		beq $8d6a			beq 	_CRGoLet
.8d77		c9 21		cmp #$21			cmp 	#KWD_PLING
.8d79		f0 ef		beq $8d6a			beq 	_CRGoLet
.8d7b		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d7d		f0 09		beq $8d88			beq 	_CRGoRem
.8d7f		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d81		d0 0b		bne $8d8e			bne 	_CRSyntaxError
.8d83		20 98 82	jsr $8298			jsr 	LabelHere
.8d86		80 c3		bra $8d4b			bra 	_CRMainLoop
.8d88						_CRGoRem:
.8d88		c8		iny				iny
.8d89		20 a1 8c	jsr $8ca1			jsr 	RemCommand
.8d8c		80 bd		bra $8d4b			bra 	_CRMainLoop
.8d8e						_CRSyntaxError:
.8d8e		4c 01 a2	jmp $a201			jmp 	SyntaxError
.8d91						_CRCallVector0:
.8d91		7c 30 8e	jmp ($8e30,x)			jmp 	(VectorSet0,x)
.8d94						_CRBreak:
.8d94		a9 01		lda #$01		lda	#1
.8d96		4c 38 91	jmp $9138		jmp	ErrorHandler
.8d99						CRNoProgram:
.8d99		4c 79 86	jmp $8679			jmp 	EndCommand
.8d9c						Shift1Command:
.8d9c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d9e		c8		iny				iny
.8d9f		0a		asl a				asl 	a
.8da0		aa		tax				tax
.8da1		7c e2 8e	jmp ($8ee2,x)			jmp 	(VectorSet1,x)
.8da4						Shift2Command:
.8da4		b1 30		lda ($30),y			lda 	(codePtr),y
.8da6		c8		iny				iny
.8da7		0a		asl a				asl 	a
.8da8		aa		tax				tax
.8da9		7c 18 8f	jmp ($8f18,x)			jmp 	(VectorSet2,x)
.8dac						Unused1:
.8dac						Unused2:
.8dac						Unused3:
.8dac						Unused4:
.8dac		4c 01 a2	jmp $a201			jmp 	SyntaxError
>8daf								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8db0						VectorSetPunc:
>8db0		f0 93					.word	ShiftLeft                        ; $00 <<
>8db2		db 91					.word	BinaryCompareLessEqual           ; $01 <=
>8db4		d1 91					.word	BinaryCompareNotEqual            ; $02 <>
>8db6		01 a2					.word	SyntaxError                      ; $03 !!3
>8db8		01 a2					.word	SyntaxError                      ; $04 ><
>8dba		e5 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8dbc		f3 93					.word	ShiftRight                       ; $06 >>
>8dbe		01 a2					.word	SyntaxError                      ; $07 !!7
>8dc0		01 a2					.word	SyntaxError                      ; $08 !!8
>8dc2		01 a2					.word	SyntaxError                      ; $09 !!9
>8dc4		01 a2					.word	SyntaxError                      ; $0a !!10
>8dc6		01 a2					.word	SyntaxError                      ; $0b !!11
>8dc8		01 a2					.word	SyntaxError                      ; $0c !!12
>8dca		01 a2					.word	SyntaxError                      ; $0d !!13
>8dcc		01 a2					.word	SyntaxError                      ; $0e !!14
>8dce		01 a2					.word	SyntaxError                      ; $0f !!15
>8dd0		01 a2					.word	SyntaxError                      ; $10 @
>8dd2		01 a2					.word	SyntaxError                      ; $11 !!17
>8dd4		01 a2					.word	SyntaxError                      ; $12 !!18
>8dd6		01 a2					.word	SyntaxError                      ; $13 [
>8dd8		9c 92					.word	IntegerDivide                    ; $14 \
>8dda		01 a2					.word	SyntaxError                      ; $15 ]
>8ddc		2e 95					.word	EorInteger                       ; $16 ^
>8dde		01 a2					.word	SyntaxError                      ; $17 _
>8de0		01 a2					.word	SyntaxError                      ; $18 `
>8de2		01 a2					.word	SyntaxError                      ; $19 !!25
>8de4		01 a2					.word	SyntaxError                      ; $1a !!26
>8de6		01 a2					.word	SyntaxError                      ; $1b {
>8de8		f9 94					.word	OraInteger                       ; $1c |
>8dea		01 a2					.word	SyntaxError                      ; $1d }
>8dec		01 a2					.word	SyntaxError                      ; $1e ~
>8dee		01 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8df0		01 a2					.word	SyntaxError                      ; $20
>8df2		63 95					.word	WordIndirect                     ; $21 !
>8df4		01 a2					.word	SyntaxError                      ; $22 "
>8df6		01 a2					.word	SyntaxError                      ; $23 #
>8df8		01 a2					.word	SyntaxError                      ; $24 $
>8dfa		dd 92					.word	IntegerModulus                   ; $25 %
>8dfc		c4 94					.word	AndInteger                       ; $26 &
>8dfe		01 a2					.word	SyntaxError                      ; $27 '
>8e00		01 a2					.word	SyntaxError                      ; $28 (
>8e02		01 a2					.word	SyntaxError                      ; $29 )
>8e04		4b 93					.word	MulInteger                       ; $2a *
>8e06		66 94					.word	AddInteger                       ; $2b +
>8e08		01 a2					.word	SyntaxError                      ; $2c ,
>8e0a		9f 94					.word	SubInteger                       ; $2d -
>8e0c		01 a2					.word	SyntaxError                      ; $2e .
>8e0e		1d 97					.word	FDivideCommand                   ; $2f /
>8e10		01 a2					.word	SyntaxError                      ; $30 0
>8e12		01 a2					.word	SyntaxError                      ; $31 1
>8e14		01 a2					.word	SyntaxError                      ; $32 2
>8e16		01 a2					.word	SyntaxError                      ; $33 3
>8e18		01 a2					.word	SyntaxError                      ; $34 4
>8e1a		01 a2					.word	SyntaxError                      ; $35 5
>8e1c		01 a2					.word	SyntaxError                      ; $36 6
>8e1e		01 a2					.word	SyntaxError                      ; $37 7
>8e20		01 a2					.word	SyntaxError                      ; $38 8
>8e22		01 a2					.word	SyntaxError                      ; $39 9
>8e24		01 a2					.word	SyntaxError                      ; $3a :
>8e26		01 a2					.word	SyntaxError                      ; $3b ;
>8e28		bd 91					.word	BinaryCompareLess                ; $3c <
>8e2a		b3 91					.word	BinaryCompareEqual               ; $3d =
>8e2c		c7 91					.word	BinaryCompareGreater             ; $3e >
>8e2e		85 95					.word	ByteIndirect                     ; $3f ?
.8e30						VectorSet0:
>8e30		02 8d					.word	EOLCommand                       ; $80 !0:EOF
>8e32		9c 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e34		a4 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e36		07 9c					.word	AbsUnary                         ; $83 ABS(
>8e38		15 9c					.word	AllocUnary                       ; $84 ALLOC(
>8e3a		85 9c					.word	AscUnary                         ; $85 ASC(
>8e3c		69 9e					.word	ChrUnary                         ; $86 CHR$(
>8e3e		9e a6					.word	UnaryEvent                       ; $87 EVENT(
>8e40		af 91					.word	UnaryFalse                       ; $88 FALSE
>8e42		92 9c					.word	FracUnary                        ; $89 FRAC(
>8e44		01 a2					.word	SyntaxError                      ; $8a GETDATE$(
>8e46		01 a2					.word	SyntaxError                      ; $8b GETTIME$(
>8e48		28 a6					.word	UnaryHit                         ; $8c HIT(
>8e4a		a7 9c					.word	IntUnary                         ; $8d INT(
>8e4c		28 9e					.word	IsValUnary                       ; $8e ISVAL(
>8e4e		22 a7					.word	UnaryJoyB                        ; $8f JOYB(
>8e50		fb a6					.word	UnaryJoyX                        ; $90 JOYX(
>8e52		fe a6					.word	UnaryJoyY                        ; $91 JOYY(
>8e54		3c 9f					.word	Unary_Left                       ; $92 LEFT$(
>8e56		b8 9c					.word	LenUnary                         ; $93 LEN(
>8e58		d6 9c					.word	Unary_Max                        ; $94 MAX(
>8e5a		5e 9f					.word	Unary_Mid                        ; $95 MID$(
>8e5c		d2 9c					.word	Unary_Min                        ; $96 MIN(
>8e5e		21 9d					.word	Unary_Not                        ; $97 NOT(
>8e60		34 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8e62		40 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8e64		3c 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8e66		38 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8e68		d9 b0					.word	UnaryPlaying                     ; $9c PLAYING(
>8e6a		6d 9d					.word	Unary_Random                     ; $9d RANDOM(
>8e6c		49 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8e6e		8a 9d					.word	Unary_Rnd                        ; $9f RND(
>8e70		00 9e					.word	SgnUnary                         ; $a0 SGN(
>8e72		7b 9e					.word	SpcUnary                         ; $a1 SPC(
>8e74		96 9e					.word	Unary_Str                        ; $a2 STR$(
>8e76		34 a7					.word	UnaryTimer                       ; $a3 TIMER(
>8e78		a4 91					.word	UnaryTrue                        ; $a4 TRUE
>8e7a		1e 9e					.word	ValUnary                         ; $a5 VAL(
>8e7c		7c 86					.word	ForCommand                       ; $a6 FOR
>8e7e		bf 87					.word	IfCommand                        ; $a7 IF
>8e80		ac 8d					.word	Unused1                          ; $a8 PROC
>8e82		ae 8c					.word	Command_REPEAT                   ; $a9 REPEAT
>8e84		f0 90					.word	Command_WHILE                    ; $aa WHILE
>8e86		e8 87					.word	EndIf                            ; $ab ENDIF
>8e88		36 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8e8a		2e 87					.word	NextCommand                      ; $ad NEXT
>8e8c		ac 8d					.word	Unused4                          ; $ae THEN
>8e8e		b7 8c					.word	Command_UNTIL                    ; $af UNTIL
>8e90		11 91					.word	Command_WEND                     ; $b0 WEND
>8e92		01 a2					.word	SyntaxError                      ; $b1 BY
>8e94		87 84					.word	CallCommand                      ; $b2 CALL
>8e96		dc a3					.word	CircleCommand                    ; $b3 CIRCLE
>8e98		bc 84					.word	ClearCommand                     ; $b4 CLEAR
>8e9a		14 85					.word	ClearScreen                      ; $b5 CLS
>8e9c		01 a2					.word	SyntaxError                      ; $b6 COLOR
>8e9e		01 a2					.word	SyntaxError                      ; $b7 COLOUR
>8ea0		1c 85					.word	Command_Data                     ; $b8 DATA
>8ea2		24 85					.word	DimCommand                       ; $b9 DIM
>8ea4		ac 8d					.word	Unused3                          ; $ba DOWNTO
>8ea6		e1 87					.word	ElseCode                         ; $bb ELSE
>8ea8		01 a2					.word	SyntaxError                      ; $bc FROM
>8eaa		fb a5					.word	GfxCommand                       ; $bd GFX
>8eac		87 87					.word	Command_GOSUB                    ; $be GOSUB
>8eae		a5 87					.word	GotoCommand                      ; $bf GOTO
>8eb0		01 a2					.word	SyntaxError                      ; $c0 HERE
>8eb2		05 a4					.word	ImageCommand                     ; $c1 IMAGE
>8eb4		e9 87					.word	Command_Input                    ; $c2 INPUT
>8eb6		d4 88					.word	LetCommand                       ; $c3 LET
>8eb8		57 a4					.word	LineCommand                      ; $c4 LINE
>8eba		ca 8a					.word	Command_LOCAL                    ; $c5 LOCAL
>8ebc		01 a2					.word	SyntaxError                      ; $c6 OFF
>8ebe		01 a2					.word	SyntaxError                      ; $c7 ON
>8ec0		01 a2					.word	SyntaxError                      ; $c8 OUTLINE
>8ec2		4c a6					.word	PaletteCommand                   ; $c9 PALETTE
>8ec4		50 a4					.word	PlotCommand                      ; $ca PLOT
>8ec6		9b 8b					.word	PokeBCommand                     ; $cb POKE
>8ec8		a7 8b					.word	PokeDCommand                     ; $cc POKED
>8eca		a3 8b					.word	PokeLCommand                     ; $cd POKEL
>8ecc		9f 8b					.word	PokeWCommand                     ; $ce POKEW
>8ece		f0 87					.word	Command_Print                    ; $cf PRINT
>8ed0		44 8c					.word	Command_Read                     ; $d0 READ
>8ed2		d8 a3					.word	RectangleCommand                 ; $d1 RECT
>8ed4		a1 8c					.word	RemCommand                       ; $d2 REM
>8ed6		97 87					.word	Command_RETURN                   ; $d3 RETURN
>8ed8		01 a2					.word	SyntaxError                      ; $d4 SOLID
>8eda		f5 b0					.word	SoundCommand                     ; $d5 SOUND
>8edc		e7 a3					.word	SpriteCommand                    ; $d6 SPRITE
>8ede		21 a4					.word	TextCommand                      ; $d7 TEXT
>8ee0		ac 8d					.word	Unused2                          ; $d8 TO
.8ee2						VectorSet1:
>8ee2		01 a2					.word	SyntaxError                      ; $80 !0:EOF
>8ee4		01 a2					.word	SyntaxError                      ; $81 !1:SH1
>8ee6		01 a2					.word	SyntaxError                      ; $82 !2:SH2
>8ee8		5b 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8eea		77 84					.word	AssertCommand                    ; $84 ASSERT
>8eec		9b a5					.word	BitmapCtrl                       ; $85 BITMAP
>8eee		e1 85					.word	Command_Dir                      ; $86 DIR
>8ef0		72 86					.word	Command_Drive                    ; $87 DRIVE
>8ef2		79 86					.word	EndCommand                       ; $88 END
>8ef4		ad b0					.word	Explode                          ; $89 EXPLODE
>8ef6		01 a2					.word	SyntaxError                      ; $8a GO
>8ef8		24 89					.word	Command_List                     ; $8b LIST
>8efa		2a 8a					.word	Command_Load                     ; $8c LOAD
>8efc		8b 8b					.word	NewCommand                       ; $8d NEW
>8efe		89 b0					.word	PingCommand                      ; $8e PING
>8f00		d0 8c					.word	Command_Restore                  ; $8f RESTORE
>8f02		0f 8d					.word	CommandRUN                       ; $90 RUN
>8f04		a0 8f					.word	Command_Save                     ; $91 SAVE
>8f06		01 a2					.word	SyntaxError                      ; $92 SETDATE
>8f08		01 a2					.word	SyntaxError                      ; $93 SETTIME
>8f0a		a1 b0					.word	ShootCommand                     ; $94 SHOOT
>8f0c		e0 a5					.word	SpritesCtrl                      ; $95 SPRITES
>8f0e		23 90					.word	StopCommand                      ; $96 STOP
>8f10		b4 b2					.word	Command_VERIFY                   ; $97 VERIFY
>8f12		95 a6					.word	XGoCommand                       ; $98 XGO
>8f14		8c a6					.word	XLoadCommand                     ; $99 XLOAD
>8f16		95 b0					.word	ZapCommand                       ; $9a ZAP
.8f18						VectorSet2:
>8f18		01 a2					.word	SyntaxError                      ; $80 !0:EOF
>8f1a		01 a2					.word	SyntaxError                      ; $81 !1:SH1
>8f1c		01 a2					.word	SyntaxError                      ; $82 !2:SH2
>8f1e		c0 a0					.word	Assemble_adc                     ; $83 ADC
>8f20		b8 a0					.word	Assemble_and                     ; $84 AND
>8f22		d4 a0					.word	Assemble_asl                     ; $85 ASL
>8f24		3e a1					.word	Assemble_bcc                     ; $86 BCC
>8f26		42 a1					.word	Assemble_bcs                     ; $87 BCS
>8f28		4a a1					.word	Assemble_beq                     ; $88 BEQ
>8f2a		01 a1					.word	Assemble_bit                     ; $89 BIT
>8f2c		32 a1					.word	Assemble_bmi                     ; $8a BMI
>8f2e		46 a1					.word	Assemble_bne                     ; $8b BNE
>8f30		2e a1					.word	Assemble_bpl                     ; $8c BPL
>8f32		4e a1					.word	Assemble_bra                     ; $8d BRA
>8f34		52 a1					.word	Assemble_brk                     ; $8e BRK
>8f36		36 a1					.word	Assemble_bvc                     ; $8f BVC
>8f38		3a a1					.word	Assemble_bvs                     ; $90 BVS
>8f3a		5a a1					.word	Assemble_clc                     ; $91 CLC
>8f3c		ae a1					.word	Assemble_cld                     ; $92 CLD
>8f3e		6e a1					.word	Assemble_cli                     ; $93 CLI
>8f40		9e a1					.word	Assemble_clv                     ; $94 CLV
>8f42		cc a0					.word	Assemble_cmp                     ; $95 CMP
>8f44		15 a1					.word	Assemble_cpx                     ; $96 CPX
>8f46		10 a1					.word	Assemble_cpy                     ; $97 CPY
>8f48		f2 a0					.word	Assemble_dec                     ; $98 DEC
>8f4a		aa a1					.word	Assemble_dex                     ; $99 DEX
>8f4c		86 a1					.word	Assemble_dey                     ; $9a DEY
>8f4e		bc a0					.word	Assemble_eor                     ; $9b EOR
>8f50		f7 a0					.word	Assemble_inc                     ; $9c INC
>8f52		ba a1					.word	Assemble_inx                     ; $9d INX
>8f54		a6 a1					.word	Assemble_iny                     ; $9e INY
>8f56		29 a1					.word	Assemble_jmp                     ; $9f JMP
>8f58		24 a1					.word	Assemble_jsr                     ; $a0 JSR
>8f5a		c8 a0					.word	Assemble_lda                     ; $a1 LDA
>8f5c		ed a0					.word	Assemble_ldx                     ; $a2 LDX
>8f5e		0b a1					.word	Assemble_ldy                     ; $a3 LDY
>8f60		de a0					.word	Assemble_lsr                     ; $a4 LSR
>8f62		be a1					.word	Assemble_nop                     ; $a5 NOP
>8f64		b4 a0					.word	Assemble_ora                     ; $a6 ORA
>8f66		6a a1					.word	Assemble_pha                     ; $a7 PHA
>8f68		56 a1					.word	Assemble_php                     ; $a8 PHP
>8f6a		b2 a1					.word	Assemble_phx                     ; $a9 PHX
>8f6c		72 a1					.word	Assemble_phy                     ; $aa PHY
>8f6e		7a a1					.word	Assemble_pla                     ; $ab PLA
>8f70		5e a1					.word	Assemble_plp                     ; $ac PLP
>8f72		c6 a1					.word	Assemble_plx                     ; $ad PLX
>8f74		82 a1					.word	Assemble_ply                     ; $ae PLY
>8f76		d9 a0					.word	Assemble_rol                     ; $af ROL
>8f78		e3 a0					.word	Assemble_ror                     ; $b0 ROR
>8f7a		66 a1					.word	Assemble_rti                     ; $b1 RTI
>8f7c		76 a1					.word	Assemble_rts                     ; $b2 RTS
>8f7e		d0 a0					.word	Assemble_sbc                     ; $b3 SBC
>8f80		62 a1					.word	Assemble_sec                     ; $b4 SEC
>8f82		c2 a1					.word	Assemble_sed                     ; $b5 SED
>8f84		7e a1					.word	Assemble_sei                     ; $b6 SEI
>8f86		c4 a0					.word	Assemble_sta                     ; $b7 STA
>8f88		b6 a1					.word	Assemble_stp                     ; $b8 STP
>8f8a		e8 a0					.word	Assemble_stx                     ; $b9 STX
>8f8c		06 a1					.word	Assemble_sty                     ; $ba STY
>8f8e		fc a0					.word	Assemble_stz                     ; $bb STZ
>8f90		9a a1					.word	Assemble_tax                     ; $bc TAX
>8f92		96 a1					.word	Assemble_tay                     ; $bd TAY
>8f94		1f a1					.word	Assemble_trb                     ; $be TRB
>8f96		1a a1					.word	Assemble_tsb                     ; $bf TSB
>8f98		a2 a1					.word	Assemble_tsx                     ; $c0 TSX
>8f9a		8a a1					.word	Assemble_txa                     ; $c1 TXA
>8f9c		92 a1					.word	Assemble_txs                     ; $c2 TXS
>8f9e		8e a1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.8fa0						Command_Save:
.8fa0		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; file name to load
.8fa3		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8fa5		a5 36		lda $36				lda 	zTemp0
.8fa7		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.8faa		b0 4f		bcs $8ffb			bcs 	_CSErrorHandler 			; error, so fail.
.8fac		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8faf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fb1		85 30		sta $30				sta 	codePtr
.8fb3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb5		85 31		sta $31				sta 	codePtr+1
.8fb7						_CSLoop:
.8fb7		b2 30		lda ($30)			lda 	(codePtr)
.8fb9		f0 37		beq $8ff2			beq 	_CSExit
.8fbb		20 fe 8f	jsr $8ffe			jsr 	CSGetCleanLine
.8fbe		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8fc0		85 36		sta $36				sta 	zTemp0
.8fc2		e0 41		cpx #$41			cpx 	#64+1 						; <= 64 bytes to wite
.8fc4		90 19		bcc $8fdf			bcc 	_CSWrite1
.8fc6		da		phx				phx
.8fc7		a2 40		ldx #$40			ldx 	#64 						; write first 64.
.8fc9		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; stream to write, count already in X
.8fcc		20 67 80	jsr $8067			jsr 	KNLWriteBlock
.8fcf		68		pla				pla 								; calculate second lot of bytes outout.
.8fd0		38		sec				sec
.8fd1		e9 40		sbc #$40			sbc 	#64
.8fd3		aa		tax				tax
.8fd4		18		clc				clc 								; point to second part to write.
.8fd5		a5 36		lda $36				lda 	zTemp0
.8fd7		69 40		adc #$40			adc 	#64
.8fd9		85 36		sta $36				sta 	zTemp0
.8fdb		90 02		bcc $8fdf			bcc 	_CSWrite1
.8fdd		e6 37		inc $37				inc 	zTemp0+1
.8fdf						_CSWrite1:
.8fdf		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; stream to write, count already in X
.8fe2		20 67 80	jsr $8067			jsr 	KNLWriteBlock 				; write it out.
.8fe5		18		clc				clc
.8fe6		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fe8		65 30		adc $30				adc 	codePtr
.8fea		85 30		sta $30				sta 	codePtr
.8fec		90 02		bcc $8ff0			bcc 	_CREExit
.8fee		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ff0						_CREExit:
.8ff0		80 c5		bra $8fb7			bra 	_CSLoop
.8ff2						_CSExit:
.8ff2		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; close file
.8ff5		20 71 80	jsr $8071			jsr 	KNLCloseFile
.8ff8		4c 5d 8a	jmp $8a5d			jmp 	CLComplete 					; display complete message.
.8ffb						_CSErrorHandler:
.8ffb		4c 7a 8a	jmp $8a7a			jmp 	CLErrorHandler
.8ffe						CSGetCleanLine:
.8ffe		a9 00		lda #$00			lda 	#0 							; no indent.
.9000		20 99 80	jsr $8099			jsr 	TKListConvertLine 			; convert line into token Buffer
.9003		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9005		a0 00		ldy #$00			ldy 	#0
.9007						_CSClean:
.9007		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.900a		f0 09		beq $9015			beq 	_CSDoneClean
.900c		30 04		bmi $9012			bmi 	_CSIgnoreCharacter
.900e		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9011		e8		inx				inx
.9012						_CSIgnoreCharacter:
.9012		c8		iny				iny
.9013		80 f2		bra $9007			bra 	_CSClean
.9015						_CSDoneClean:
.9015		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9017		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.901a		e8		inx				inx
.901b		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.901e		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9020		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9022		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9023						StopCommand:
.9023		a9 08		lda #$08		lda	#8
.9025		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9028						ProcedureScan:
.9028		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.902a		85 30		sta $30				sta 	codePtr
.902c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.902e		85 31		sta $31				sta 	codePtr+1
.9030						_PSLoop:
.9030		b2 30		lda ($30)			lda 	(codePtr)
.9032		f0 42		beq $9076			beq 	_PSExit
.9034		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9036		b1 30		lda ($30),y			lda 	(codePtr),y
.9038		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.903a		d0 2d		bne $9069			bne 	_PSNext
.903c		c8		iny				iny 								; get the address of the record to zTemp0 and
.903d		b1 30		lda ($30),y			lda 	(codePtr),y
.903f		29 c0		and #$c0			and 	#$C0
.9041		c9 40		cmp #$40			cmp 	#$40
.9043		d0 32		bne $9077			bne 	_PSSyntax
.9045		b1 30		lda ($30),y			lda 	(codePtr),y
.9047		18		clc				clc
.9048		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.904a		85 37		sta $37				sta 	zTemp0+1
.904c		c8		iny				iny 								; LSB
.904d		b1 30		lda ($30),y			lda 	(codePtr),y
.904f		85 36		sta $36				sta 	zTemp0
.9051		c8		iny				iny 								; character after variable call.
.9052		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9053		a0 07		ldy #$07			ldy 	#7
.9055		91 36		sta ($36),y			sta 	(zTemp0),y
.9057		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9059		a0 02		ldy #$02			ldy 	#2
.905b		91 36		sta ($36),y			sta 	(zTemp0),y
.905d		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.905f						_PSCopy:
.905f		b5 30		lda $30,x			lda 	safePtr,x
.9061		c8		iny				iny
.9062		91 36		sta ($36),y			sta 	(zTemp0),y
.9064		e8		inx				inx
.9065		e0 04		cpx #$04			cpx 	#4
.9067		d0 f6		bne $905f			bne 	_PSCopy
.9069						_PSNext:
.9069		18		clc				clc
.906a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.906c		65 30		adc $30				adc 	codePtr
.906e		85 30		sta $30				sta 	codePtr
.9070		90 02		bcc $9074			bcc 	_CREExit
.9072		e6 31		inc $31				inc 	codePtr+1 					; carry
.9074						_CREExit:
.9074		80 ba		bra $9030			bra 	_PSLoop
.9076						_PSExit:
.9076		60		rts				rts
.9077						_PSSyntax:
.9077		4c 01 a2	jmp $a201			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.907a						ScanForward:
.907a		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.907c		86 37		stx $37				stx 	zTemp0+1
.907e		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9080						_ScanLoop:
.9080		b1 30		lda ($30),y			lda 	(codePtr),y
.9082		c8		iny				iny
.9083		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9085		d0 0e		bne $9095			bne 	_ScanGoNext
.9087		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9089		f0 04		beq $908f			beq 	_ScanMatch
.908b		c5 37		cmp $37				cmp 	zTemp0+1
.908d		d0 06		bne $9095			bne 	_ScanGoNext
.908f						_ScanMatch:
.908f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9091		d0 01		bne $9094			bne 	_ScanNotEndEOL
.9093		88		dey				dey
.9094						_ScanNotEndEOL:
.9094		60		rts				rts
.9095						_ScanGoNext:
.9095		20 9a 90	jsr $909a			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9098		80 e6		bra $9080			bra 	_ScanLoop
.909a						ScanForwardOne:
.909a		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.909c		90 3e		bcc $90dc			bcc 	_SFWExit
.909e		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.90a0		90 18		bcc $90ba			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.90a2		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.90a4		b0 2f		bcs $90d5			bcs 	_ScanSkipData
.90a6		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.90a8		90 32		bcc $90dc			bcc 	_SFWExit 					; if not, ordinary keywords.
.90aa		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.90ac		b0 2e		bcs $90dc			bcs 	_SFWExit
.90ae		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.90b0		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.90b2		b0 28		bcs $90dc			bcs 	_SFWExit
.90b4		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.90b6		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.90b8		80 22		bra $90dc			bra 	_SFWExit
.90ba						_ScanSkipOne:
.90ba		c8		iny				iny 								; consume the extra one.
.90bb		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.90bd		d0 1d		bne $90dc			bne 	_SFWExit
.90bf		18		clc				clc
.90c0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90c2		65 30		adc $30				adc 	codePtr
.90c4		85 30		sta $30				sta 	codePtr
.90c6		90 02		bcc $90ca			bcc 	_CREExit
.90c8		e6 31		inc $31				inc 	codePtr+1 					; carry
.90ca						_CREExit:
.90ca		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.90cc		b2 30		lda ($30)			lda 	(codePtr)
.90ce		d0 0c		bne $90dc			bne 	_SFWExit 					; if not zero, more to scan
.90d0		a9 13		lda #$13		lda	#19
.90d2		4c 38 91	jmp $9138		jmp	ErrorHandler
.90d5						_ScanSkipData:
.90d5		88		dey				dey 								; point at data token
.90d6		c8		iny				iny 								; point to offset
.90d7		98		tya				tya 								; A = offset position
.90d8		38		sec				sec 								; add size +1 hence SEC
.90d9		71 30		adc ($30),y			adc 	(codePtr),y
.90db		a8		tay				tay 								; make current position.
.90dc						_SFWExit:
.90dc		60		rts				rts
.90dd						ScanGetCurrentLineStep:
.90dd		64 38		stz $38				stz 	zTemp1
.90df		a0 03		ldy #$03			ldy 	#3
.90e1						_SGCLSLoop:
.90e1		b1 30		lda ($30),y			lda 	(codePtr),y
.90e3		c8		iny				iny
.90e4		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.90e6		f0 05		beq $90ed			beq 	_SGCLSExit
.90e8		20 9a 90	jsr $909a			jsr 	ScanForwardOne
.90eb		80 f4		bra $90e1			bra 	_SGCLSLoop
.90ed						_SGCLSExit:
.90ed		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.90ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.90f0						Command_WHILE:
.90f0		5a		phy				phy 								; save position of the test
.90f1		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.90f3		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber
.90f6		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; check if zero
.90f9		f0 0e		beq $9109			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.90fb		98		tya				tya 								; position *after* test.
.90fc		7a		ply				ply 								; restore position before test, at WHILE
.90fd		88		dey				dey 								; so we execute the WHILE command again.
.90fe		48		pha				pha 								; push after test on the stack
.90ff		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9101		20 7c b1	jsr $b17c			jsr 	StackOpen
.9104		20 c1 b1	jsr $b1c1			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9107		7a		ply				ply 								; restore the position *after* the test
.9108		60		rts				rts
.9109						_WHExitLoop:
.9109		68		pla				pla 								; throw post loop position
.910a		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.910c		aa		tax				tax
.910d		20 7a 90	jsr $907a			jsr 	ScanForward
.9110		60		rts				rts
.9111						Command_WEND:
.9111		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9113		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9115		20 a9 b1	jsr $b1a9			jsr 	StackCheckFrame
.9118		20 d2 b1	jsr $b1d2			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.911b		20 9b b1	jsr $b19b			jsr 	StackClose		 			; erase the frame
.911e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.911f						CheckRightBracket:
.911f		b1 30		lda ($30),y			lda 	(codePtr),y
.9121		c8		iny				iny
.9122		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9124		d0 0f		bne $9135			bne 	CNAFail
.9126		60		rts				rts
.9127						CheckComma:
.9127		b1 30		lda ($30),y			lda 	(codePtr),y
.9129		c8		iny				iny
.912a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.912c		d0 07		bne $9135			bne 	CNAFail
.912e		60		rts				rts
.912f						CheckNextA:
.912f		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9131		d0 02		bne $9135			bne 	CNAFail
.9133		c8		iny				iny 								; skip character
.9134		60		rts				rts 								; and exit
.9135						CNAFail:
.9135		4c 01 a2	jmp $a201			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9138						ErrorHandler:
.9138		a8		tay				tay 								; find the error text
.9139		f0 49		beq $9184			beq 	_EHEnd
.913b		a2 00		ldx #$00			ldx 	#0
.913d		a9 1a		lda #$1a			lda 	#((ErrorText) & $FF)
.913f		85 36		sta $36				sta 	0+zTemp0
.9141		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.9143		85 37		sta $37				sta 	1+zTemp0
.9145						_EHFind:
.9145		88		dey				dey 								; keep looking through text
.9146		f0 0e		beq $9156			beq 	_EHFound
.9148						_EHFindZero:
.9148		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.914a		e6 36		inc $36				inc 	zTemp0
.914c		d0 02		bne $9150			bne 	_EHFNoCarry
.914e		e6 37		inc $37				inc 	zTemp0+1
.9150						_EHFNoCarry:
.9150		c9 00		cmp #$00			cmp 	#0
.9152		d0 f4		bne $9148			bne 	_EHFindZero
.9154		80 ef		bra $9145			bra 	_EHFind
.9156						_EHFound:
.9156		a5 36		lda $36				lda 	zTemp0 						; print message
.9158		a6 37		ldx $37				ldx 	zTemp0+1
.915a		20 91 91	jsr $9191			jsr 	PrintStringXA
.915d		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.915f		b1 30		lda ($30),y			lda 	(codePtr),y
.9161		d0 05		bne $9168			bne 	_EHAtMsg
.9163		c8		iny				iny
.9164		b1 30		lda ($30),y			lda 	(codePtr),y
.9166		f0 17		beq $917f			beq 	_EHCREnd
.9168						_EHAtMsg:
.9168		a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.916a		a9 87		lda #$87			lda 	#_AtMsg & $FF
.916c		20 91 91	jsr $9191			jsr 	PrintStringXA
.916f		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9171		b1 30		lda ($30),y			lda 	(codePtr),y
.9173		48		pha				pha
.9174		c8		iny				iny
.9175		b1 30		lda ($30),y			lda 	(codePtr),y
.9177		aa		tax				tax
.9178		68		pla				pla
.9179		20 a7 95	jsr $95a7			jsr 	ConvertInt16 				; convert XA to string
.917c		20 91 91	jsr $9191			jsr 	PrintStringXA 				; and print it.
.917f						_EHCREnd:
.917f		a9 0d		lda #$0d			lda 	#13 						; new line
.9181		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9184						_EHEnd:
.9184		4c 26 84	jmp $8426			jmp 	WarmStart
>9187		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>918f		20 00
.9191						PrintStringXA:
.9191		5a		phy				phy
.9192		86 37		stx $37				stx 	zTemp0+1
.9194		85 36		sta $36				sta 	zTemp0
.9196		a0 00		ldy #$00			ldy 	#0
.9198						_PSXALoop:
.9198		b1 36		lda ($36),y			lda 	(zTemp0),y
.919a		f0 06		beq $91a2			beq 	_PSXAExit
.919c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.919f		c8		iny				iny
.91a0		80 f6		bra $9198			bra 	_PSXALoop
.91a2						_PSXAExit:
.91a2		7a		ply				ply
.91a3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.91a4						UnaryTrue:
.91a4		fa		plx				plx
.91a5						ReturnTrue:
.91a5		a9 01		lda #$01			lda 	#1  						; set to 1
.91a7		20 85 a0	jsr $a085			jsr 	NSMSetByte
.91aa		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.91ac		95 50		sta $50,x			sta 	NSStatus,x
.91ae		60		rts				rts
.91af						UnaryFalse:
.91af		fa		plx				plx
.91b0						ReturnFalse:
.91b0		4c 83 a0	jmp $a083			jmp 	NSMSetZero 					; set it all to zero
.91b3						BinaryCompareEqual:
.91b3		fa		plx				plx
.91b4		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91b7		c9 00		cmp #$00			cmp 	#0
.91b9		f0 ea		beq $91a5			beq 	ReturnTrue
.91bb		80 f3		bra $91b0			bra 	ReturnFalse
.91bd						BinaryCompareLess:
.91bd		fa		plx				plx
.91be		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91c1		c9 ff		cmp #$ff			cmp 	#$FF
.91c3		f0 e0		beq $91a5			beq 	ReturnTrue
.91c5		80 e9		bra $91b0			bra 	ReturnFalse
.91c7						BinaryCompareGreater:
.91c7		fa		plx				plx
.91c8		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91cb		c9 01		cmp #$01			cmp 	#1
.91cd		f0 d6		beq $91a5			beq 	ReturnTrue
.91cf		80 df		bra $91b0			bra 	ReturnFalse
.91d1						BinaryCompareNotEqual:
.91d1		fa		plx				plx
.91d2		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91d5		c9 00		cmp #$00			cmp 	#0
.91d7		d0 cc		bne $91a5			bne 	ReturnTrue
.91d9		80 d5		bra $91b0			bra 	ReturnFalse
.91db						BinaryCompareLessEqual:
.91db		fa		plx				plx
.91dc		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91df		c9 01		cmp #$01			cmp 	#1
.91e1		d0 c2		bne $91a5			bne 	ReturnTrue
.91e3		80 cb		bra $91b0			bra 	ReturnFalse
.91e5						BinaryCompareGreaterEqual:
.91e5		fa		plx				plx
.91e6		20 ef 91	jsr $91ef			jsr 	CompareBaseCode
.91e9		c9 ff		cmp #$ff			cmp 	#$FF
.91eb		d0 b8		bne $91a5			bne 	ReturnTrue
.91ed		80 c1		bra $91b0			bra 	ReturnFalse
.91ef						CompareBaseCode:
.91ef		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; make both values if references.
.91f2		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.91f4		15 51		ora $51,x			ora 	NSStatus+1,x
.91f6		29 10		and #$10			and 	#NSTString
.91f8		d0 37		bne $9231			bne 	_CBCString 					; if so do string code, which will check if both.
.91fa		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.91fc		15 79		ora $79,x			ora 	NSExponent+1,x
.91fe		d0 34		bne $9234			bne 	_CBCFloat
.9200		b5 50		lda $50,x			lda 	NSStatus,x
.9202		15 51		ora $51,x			ora 	NSStatus+1,x
.9204		29 08		and #$08			and 	#NSTFloat
.9206		d0 2c		bne $9234			bne 	_CBCFloat
.9208		20 37 92	jsr $9237			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.920b		e8		inx				inx
.920c		20 37 92	jsr $9237			jsr 	CompareFixMinusZero
.920f		ca		dex				dex
.9210		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9212		55 51		eor $51,x			eor 	NSStatus+1,x
.9214		10 0a		bpl $9220			bpl 	_CDCSameSign
.9216		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9218		30 14		bmi $922e			bmi 	_CBCLess 					; return $FF
.921a						_CBCGreater:
.921a		a9 01		lda #$01			lda 	#1
.921c		60		rts				rts
.921d						_CBCEqual:
.921d		a9 00		lda #$00			lda 	#0
.921f		60		rts				rts
.9220						_CDCSameSign:
.9220		20 4c 94	jsr $944c			jsr 	SubTopTwoStack 				; unsigned subtract
.9223		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; or the mantissa together
.9226		f0 f5		beq $921d			beq 	_CBCEqual 					; -0 == 0
.9228		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.922a		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.922c		10 ec		bpl $921a			bpl 	_CBCGreater
.922e						_CBCLess:
.922e		a9 ff		lda #$ff			lda 	#$FF
.9230		60		rts				rts
.9231						_CBCString:
.9231		4c bd 93	jmp $93bd			jmp 	CompareStrings
.9234						_CBCFloat:
.9234		4c 07 97	jmp $9707			jmp 	CompareFloat
.9237						CompareFixMinusZero:
.9237		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero
.923a		d0 02		bne $923e			bne 	_CFXMZNotZero
.923c		74 50		stz $50,x			stz 	NSStatus,x
.923e						_CFXMZNotZero:
.923e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.923f						StringConcat:
.923f		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9241		35 51		and $51,x			and 	NSStatus+1,x
.9243		29 18		and #$18			and 	#NSBTypeMask
.9245		c9 10		cmp #$10			cmp 	#NSTString
.9247		d0 50		bne $9299			bne		_SCType
.9249		64 38		stz $38				stz 	zTemp1 						; counting total length
.924b		e8		inx				inx
.924c		20 6a 92	jsr $926a			jsr 	_SCSetupZ0 					; setup for second
.924f		20 73 92	jsr $9273			jsr 	_SCLengthZ0 				; length for second
.9252		ca		dex				dex
.9253		20 6a 92	jsr $926a			jsr 	_SCSetupZ0 					; setup for first
.9256		20 73 92	jsr $9273			jsr 	_SCLengthZ0 				; length for first
.9259		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.925b		20 6c b2	jsr $b26c			jsr 	StringTempAllocate
.925e		20 8a 92	jsr $928a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9261		e8		inx				inx
.9262		20 6a 92	jsr $926a			jsr 	_SCSetupZ0 					; copy second out
.9265		20 8a 92	jsr $928a			jsr 	_SCCopy
.9268		ca		dex				dex
.9269		60		rts				rts
.926a						_SCSetupZ0:
.926a		b5 58		lda $58,x			lda 	NSMantissa0,x
.926c		85 36		sta $36				sta 	zTemp0
.926e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9270		85 37		sta $37				sta 	zTemp0+1
.9272		60		rts				rts
.9273						_SCLengthZ0:
.9273		5a		phy				phy
.9274		a0 00		ldy #$00			ldy 	#0
.9276						_SCLenLoop:
.9276		b1 36		lda ($36),y			lda 	(zTemp0),y
.9278		f0 0e		beq $9288			beq 	_SCLExit
.927a		c8		iny				iny
.927b		e6 38		inc $38				inc 	zTemp1
.927d		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.927f		c9 fd		cmp #$fd			cmp 	#253
.9281		d0 f3		bne $9276			bne		_SCLenLoop
.9283		a9 09		lda #$09		lda	#9
.9285		4c 38 91	jmp $9138		jmp	ErrorHandler
.9288						_SCLExit:
.9288		7a		ply				ply
.9289		60		rts				rts
.928a						_SCCopy:
.928a		5a		phy				phy
.928b		a0 00		ldy #$00			ldy 	#0
.928d						_SCCopyLoop:
.928d		b1 36		lda ($36),y			lda 	(zTemp0),y
.928f		f0 06		beq $9297			beq 	_SCCExit
.9291		20 a5 b2	jsr $b2a5			jsr 	StringTempWrite
.9294		c8		iny				iny
.9295		80 f6		bra $928d			bra 	_SCCopyLoop
.9297						_SCCExit:
.9297		7a		ply				ply
.9298		60		rts				rts
.9299						_SCType:
.9299		4c 0b a2	jmp $a20b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.929c						IntegerDivide:
.929c		fa		plx				plx
.929d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.929f		15 51		ora $51,x			ora 	NSStatus+1,x
.92a1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92a2		0a		asl a				asl 	a
.92a3		10 05		bpl $92aa			bpl 	_NotRef
.92a5		48		pha				pha
.92a6		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92a9		68		pla				pla
.92aa						_NotRef:
.92aa		0a		asl a				asl 	a
.92ab		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ad		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92af		15 79		ora $79,x			ora 	NSExponent+1,x
.92b1		f0 03		beq $92b6			beq 	_IntegerCode 				; if clear, then we have two integers
.92b3		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.92b6						_IntegerCode:
.92b6		20 d0 92	jsr $92d0			jsr 	CheckDivideZero 			; do div zero check
.92b9		20 02 93	jsr $9302			jsr 	Int32Divide 				; do the division
.92bc		20 b3 93	jsr $93b3			jsr 	CalculateSign 				; calculate result sign
.92bf						NSMCopyPlusTwoToZero:
.92bf		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.92c1		95 58		sta $58,x			sta 	NSMantissa0,x
.92c3		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.92c5		95 60		sta $60,x			sta 	NSMantissa1,x
.92c7		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.92c9		95 68		sta $68,x			sta 	NSMantissa2,x
.92cb		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.92cd		95 70		sta $70,x			sta 	NSMantissa3,x
.92cf		60		rts				rts
.92d0						CheckDivideZero:
.92d0		e8		inx				inx
.92d1		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero
.92d4		f0 02		beq $92d8			beq 	_CDVError
.92d6		ca		dex				dex
.92d7		60		rts				rts
.92d8						_CDVError:
.92d8		a9 03		lda #$03		lda	#3
.92da		4c 38 91	jmp $9138		jmp	ErrorHandler
.92dd						IntegerModulus:
.92dd		fa		plx				plx
.92de		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92e0		15 51		ora $51,x			ora 	NSStatus+1,x
.92e2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92e3		0a		asl a				asl 	a
.92e4		10 05		bpl $92eb			bpl 	_NotRef
.92e6		48		pha				pha
.92e7		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92ea		68		pla				pla
.92eb						_NotRef:
.92eb		0a		asl a				asl 	a
.92ec		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ee		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92f0		15 79		ora $79,x			ora 	NSExponent+1,x
.92f2		f0 03		beq $92f7			beq 	_IntegerCode 				; if clear, then we have two integers
.92f4		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.92f7						_IntegerCode:
.92f7						IntegerModulusNoCheck:
.92f7		20 d0 92	jsr $92d0			jsr 	CheckDivideZero 			; do div zero check
.92fa		20 02 93	jsr $9302			jsr 	Int32Divide 				; do the division
.92fd		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.92ff		56 50		lsr $50,x			lsr 	NSStatus,x
.9301		60		rts				rts
.9302						Int32Divide:
.9302		48		pha				pha 								; save AXY
.9303		5a		phy				phy
.9304		20 66 a0	jsr $a066			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9307		20 7f a0	jsr $a07f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.930a		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.930c						_I32DivideLoop:
.930c		e8		inx				inx
.930d		e8		inx				inx
.930e		20 92 a0	jsr $a092			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9311		ca		dex				dex
.9312		ca		dex				dex
.9313		20 93 a0	jsr $a093			jsr 	NSMRotateLeft
.9316		20 41 93	jsr $9341			jsr 	DivideCheckSubtract 		; check if subtract possible
.9319		90 02		bcc $931d			bcc 	_I32DivideNoCarryIn
.931b		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.931d						_I32DivideNoCarryIn:
.931d		88		dey				dey 								; loop round till division completed.
.931e		d0 ec		bne $930c			bne 	_I32DivideLoop
.9320		7a		ply				ply 								; restore AXY and exit
.9321		68		pla				pla
.9322		60		rts				rts
.9323						Int32ShiftDivide:
.9323		48		pha				pha 								; save AY
.9324		5a		phy				phy
.9325		e8		inx				inx 								; clear S[X+2]
.9326		e8		inx				inx
.9327		20 83 a0	jsr $a083			jsr 	NSMSetZero
.932a		ca		dex				dex
.932b		ca		dex				dex
.932c		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.932e						_I32SDLoop:
.932e		20 41 93	jsr $9341			jsr 	DivideCheckSubtract 		; check if subtract possible
.9331		e8		inx				inx
.9332		e8		inx				inx
.9333		20 93 a0	jsr $a093			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9336		ca		dex				dex
.9337		ca		dex				dex
.9338		20 93 a0	jsr $a093			jsr 	NSMRotateLeft
.933b		88		dey				dey 	 							; do 31 times
.933c		d0 f0		bne $932e			bne 	_I32SDLoop
.933e		7a		ply				ply 								; restore AY and exit
.933f		68		pla				pla
.9340		60		rts				rts
.9341						DivideCheckSubtract:
.9341		20 4c 94	jsr $944c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9344		b0 04		bcs $934a			bcs 	_DCSExit 					; if carry set, then could do, exit
.9346		20 32 94	jsr $9432			jsr 	AddTopTwoStack 				; add it back in
.9349		18		clc				clc 								; and return False
.934a						_DCSExit:
.934a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.934b						MulInteger:
.934b		fa		plx				plx
.934c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.934e		15 51		ora $51,x			ora 	NSStatus+1,x
.9350		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9351		0a		asl a				asl 	a
.9352		10 05		bpl $9359			bpl 	_NotRef
.9354		48		pha				pha
.9355		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9358		68		pla				pla
.9359						_NotRef:
.9359		0a		asl a				asl 	a 							; put MSB of type into A:7
.935a		30 09		bmi $9365			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.935c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.935e		15 79		ora $79,x			ora 	NSExponent+1,x
.9360		f0 06		beq $9368			beq 	_IntegerCode 				; if clear, then we have two integers
.9362		4c c9 97	jmp $97c9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9365						_StringData:
.9365		4c 15 a2	jmp $a215			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9368						_IntegerCode:
.9368		20 75 93	jsr $9375			jsr 	MultiplyShort
.936b		c9 00		cmp #$00			cmp 	#0
.936d		f0 05		beq $9374			beq 	_MIExit
.936f		a9 04		lda #$04		lda	#4
.9371		4c 38 91	jmp $9138		jmp	ErrorHandler
.9374						_MIExit:
.9374		60		rts				rts
.9375						MultiplyShort:
.9375		5a		phy				phy 								; save Y
.9376		20 66 a0	jsr $a066			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9379		20 7f a0	jsr $a07f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.937c		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.937e						_I32MLoop:
.937e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9380		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9382		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9384		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9386		f0 25		beq $93ad			beq 	_I32MExit 					; exit if zero
.9388		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.938a		29 01		and #$01			and 	#1
.938c		f0 0d		beq $939b			beq 	_I32MNoAdd
.938e		20 32 94	jsr $9432			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9391		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9393		10 06		bpl $939b			bpl 	_I32MNoAdd
.9395						_I32ShiftRight:
.9395		20 9c a0	jsr $a09c			jsr 	NSMShiftRight 				; shift S[X] right
.9398		c8		iny				iny 								; increment shift count
.9399		80 09		bra $93a4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.939b						_I32MNoAdd:
.939b		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.939d		70 f6		bvs $9395			bvs 	_I32ShiftRight 				; instead.
.939f		e8		inx				inx
.93a0		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.93a3		ca		dex				dex
.93a4						_I32MShiftUpper:
.93a4		e8		inx				inx 								; shift S[X+2] right
.93a5		e8		inx				inx
.93a6		20 9c a0	jsr $a09c			jsr 	NSMShiftRight
.93a9		ca		dex				dex
.93aa		ca		dex				dex
.93ab		80 d1		bra $937e			bra 	_I32MLoop 					; try again.
.93ad						_I32MExit:
.93ad		20 b3 93	jsr $93b3			jsr 	CalculateSign
.93b0		98		tya				tya 								; shift in A
.93b1		7a		ply				ply 								; restore Y and exit
.93b2		60		rts				rts
.93b3						CalculateSign:
.93b3		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.93b5		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.93b7		55 51		eor $51,x			eor 	NSStatus+1,x
.93b9		0a		asl a				asl 	a 							; shift bit 7 into carry
.93ba		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.93bc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93bd						CompareStrings:
.93bd		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.93bf		35 51		and $51,x			and 	NSStatus+1,x
.93c1		29 10		and #$10			and 	#NSBIsString
.93c3		f0 28		beq $93ed			beq 	_CSTypeError
.93c5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93c7		85 36		sta $36				sta 	zTemp0
.93c9		b5 60		lda $60,x			lda 	NSMantissa1,x
.93cb		85 37		sta $37				sta 	zTemp0+1
.93cd		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.93cf		85 38		sta $38				sta 	zTemp1
.93d1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.93d3		85 39		sta $39				sta 	zTemp1+1
.93d5		5a		phy				phy 								; save Y so we can access strings
.93d6		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93d8						_CSLoop:
.93d8		c8		iny				iny
.93d9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93db		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93dd		d0 06		bne $93e5			bne 	_CSDifferent
.93df		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93e1		d0 f5		bne $93d8			bne 	_CSLoop 					; still comparing
.93e3						_CSExit:
.93e3		7a		ply				ply 								; reached end, return zero in A from EOS
.93e4		60		rts				rts
.93e5						_CSDifferent:
.93e5		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93e7		90 fa		bcc $93e3			bcc		_CSExit
.93e9		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93eb		80 f6		bra $93e3			bra 	_CSExit
.93ed						_CSTypeError:
.93ed		4c 0b a2	jmp $a20b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93f0						ShiftLeft:
.93f0		38		sec				sec 								; common code, carry determines which way.
.93f1		80 01		bra $93f4			bra 	ShiftMain
.93f3						ShiftRight:
.93f3		18		clc				clc
.93f4						ShiftMain:
.93f4		fa		plx				plx 								; restore X
.93f5		08		php				php 								; save direction
.93f6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93f8		15 51		ora $51,x			ora 	NSStatus+1,x
.93fa		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93fb		0a		asl a				asl 	a
.93fc		10 05		bpl $9403			bpl 	_NotRef
.93fe		48		pha				pha
.93ff		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9402		68		pla				pla
.9403						_NotRef:
.9403		0a		asl a				asl 	a
.9404		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9406		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9408		15 79		ora $79,x			ora 	NSExponent+1,x
.940a		f0 03		beq $940f			beq 	_IntegerCode 				; if clear, then we have two integers
.940c		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.940f						_IntegerCode:
.940f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9411		29 e0		and #$e0			and 	#$E0
.9413		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9415		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9417		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9419		d0 12		bne $942d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.941b						_SMLoop:
.941b		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.941d		30 11		bmi $9430			bmi 	_SMExit 					; exit if done.
.941f		28		plp				plp 								; restore direction setting
.9420		08		php				php
.9421		90 05		bcc $9428			bcc 	_SMRight
.9423		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; shift left if CS
.9426		80 f3		bra $941b			bra 	_SMLoop
.9428						_SMRight:
.9428		20 9c a0	jsr $a09c			jsr 	NSMShiftRight 				; shift right if CC
.942b		80 ee		bra $941b			bra 	_SMLoop
.942d						_SMExit0:
.942d		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; return zero.
.9430						_SMExit:
.9430		28		plp				plp 								; throw direction
.9431		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9432						AddTopTwoStack:
.9432		18		clc				clc
.9433		b5 58		lda $58,x			lda		NSMantissa0,x
.9435		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9437		95 58		sta $58,x			sta 	NSMantissa0,x
.9439		b5 60		lda $60,x			lda		NSMantissa1,x
.943b		75 61		adc $61,x			adc 		NSMantissa1+1,x
.943d		95 60		sta $60,x			sta 	NSMantissa1,x
.943f		b5 68		lda $68,x			lda		NSMantissa2,x
.9441		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9443		95 68		sta $68,x			sta 	NSMantissa2,x
.9445		b5 70		lda $70,x			lda		NSMantissa3,x
.9447		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9449		95 70		sta $70,x			sta 	NSMantissa3,x
.944b		60		rts				rts
.944c						SubTopTwoStack:
.944c		38		sec				sec
.944d		b5 58		lda $58,x			lda		NSMantissa0,x
.944f		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9451		95 58		sta $58,x			sta 	NSMantissa0,x
.9453		b5 60		lda $60,x			lda		NSMantissa1,x
.9455		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9457		95 60		sta $60,x			sta 	NSMantissa1,x
.9459		b5 68		lda $68,x			lda		NSMantissa2,x
.945b		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.945d		95 68		sta $68,x			sta 	NSMantissa2,x
.945f		b5 70		lda $70,x			lda		NSMantissa3,x
.9461		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9463		95 70		sta $70,x			sta 	NSMantissa3,x
.9465		60		rts				rts
.9466						AddInteger:
.9466		fa		plx				plx
.9467		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9469		15 51		ora $51,x			ora 	NSStatus+1,x
.946b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.946c		0a		asl a				asl 	a
.946d		10 05		bpl $9474			bpl 	_NotRef
.946f		48		pha				pha
.9470		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9473		68		pla				pla
.9474						_NotRef:
.9474		0a		asl a				asl 	a 							; put MSB of type into A:7
.9475		30 09		bmi $9480			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9477		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9479		15 79		ora $79,x			ora 	NSExponent+1,x
.947b		f0 06		beq $9483			beq 	_IntegerCode 				; if clear, then we have two integers
.947d		4c 79 96	jmp $9679			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9480						_StringData:
.9480		4c 3f 92	jmp $923f			jmp 	StringConcat							; at least one string - don't know both are strings.
.9483						_IntegerCode:
.9483						AddCode:
.9483		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9485		55 51		eor $51,x			eor 	NSStatus+1,x
.9487		10 a9		bpl $9432			bpl 	AddTopTwoStack
.9489		20 4c 94	jsr $944c			jsr 	SubTopTwoStack 				; do a physical subtraction
.948c		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.948e		10 07		bpl $9497			bpl 	_AddExit
.9490		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9492		95 50		sta $50,x			sta 	NSStatus,x
.9494		20 4c a0	jsr $a04c			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9497						_AddExit:
.9497		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; check for -0
.949a		d0 02		bne $949e			bne 	_AddNonZero
.949c		74 50		stz $50,x			stz 	NSStatus,x
.949e						_AddNonZero:
.949e		60		rts				rts
.949f						SubInteger:
.949f		fa		plx				plx
.94a0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94a2		15 51		ora $51,x			ora 	NSStatus+1,x
.94a4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94a5		0a		asl a				asl 	a
.94a6		10 05		bpl $94ad			bpl 	_NotRef
.94a8		48		pha				pha
.94a9		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ac		68		pla				pla
.94ad						_NotRef:
.94ad		0a		asl a				asl 	a 							; put MSB of type into A:7
.94ae		30 09		bmi $94b9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94b0		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94b2		15 79		ora $79,x			ora 	NSExponent+1,x
.94b4		f0 06		beq $94bc			beq 	_IntegerCode 				; if clear, then we have two integers
.94b6		4c 7e 96	jmp $967e			jmp 	FloatingPointSub 							; otherwise at least one float.
.94b9						_StringData:
.94b9		4c 15 a2	jmp $a215			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94bc						_IntegerCode:
.94bc		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.94be		49 80		eor #$80			eor 	#$80
.94c0		95 51		sta $51,x			sta 	NSStatus+1,x
.94c2		80 bf		bra $9483			bra 	AddCode 					; and do the same code as add.
.94c4						AndInteger:
.94c4		fa		plx				plx
.94c5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94c7		15 51		ora $51,x			ora 	NSStatus+1,x
.94c9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94ca		0a		asl a				asl 	a
.94cb		10 05		bpl $94d2			bpl 	_NotRef
.94cd		48		pha				pha
.94ce		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94d1		68		pla				pla
.94d2						_NotRef:
.94d2		0a		asl a				asl 	a
.94d3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94d5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94d7		15 79		ora $79,x			ora 	NSExponent+1,x
.94d9		f0 03		beq $94de			beq 	_IntegerCode 				; if clear, then we have two integers
.94db		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.94de						_IntegerCode:
.94de		b5 58		lda $58,x			lda		NSMantissa0,x
.94e0		35 59		and $59,x			and 		NSMantissa0+1,x
.94e2		95 58		sta $58,x			sta 	NSMantissa0,x
.94e4		b5 60		lda $60,x			lda		NSMantissa1,x
.94e6		35 61		and $61,x			and 		NSMantissa1+1,x
.94e8		95 60		sta $60,x			sta 	NSMantissa1,x
.94ea		b5 68		lda $68,x			lda		NSMantissa2,x
.94ec		35 69		and $69,x			and 		NSMantissa2+1,x
.94ee		95 68		sta $68,x			sta 	NSMantissa2,x
.94f0		b5 70		lda $70,x			lda		NSMantissa3,x
.94f2		35 71		and $71,x			and 		NSMantissa3+1,x
.94f4		95 70		sta $70,x			sta 	NSMantissa3,x
.94f6		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.94f8		60		rts				rts
.94f9						OraInteger:
.94f9		fa		plx				plx
.94fa		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94fc		15 51		ora $51,x			ora 	NSStatus+1,x
.94fe		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94ff		0a		asl a				asl 	a
.9500		10 05		bpl $9507			bpl 	_NotRef
.9502		48		pha				pha
.9503		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9506		68		pla				pla
.9507						_NotRef:
.9507		0a		asl a				asl 	a
.9508		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.950a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.950c		15 79		ora $79,x			ora 	NSExponent+1,x
.950e		f0 03		beq $9513			beq 	_IntegerCode 				; if clear, then we have two integers
.9510		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.9513						_IntegerCode:
.9513		b5 58		lda $58,x			lda		NSMantissa0,x
.9515		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9517		95 58		sta $58,x			sta 	NSMantissa0,x
.9519		b5 60		lda $60,x			lda		NSMantissa1,x
.951b		15 61		ora $61,x			ora 		NSMantissa1+1,x
.951d		95 60		sta $60,x			sta 	NSMantissa1,x
.951f		b5 68		lda $68,x			lda		NSMantissa2,x
.9521		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9523		95 68		sta $68,x			sta 	NSMantissa2,x
.9525		b5 70		lda $70,x			lda		NSMantissa3,x
.9527		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9529		95 70		sta $70,x			sta 	NSMantissa3,x
.952b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.952d		60		rts				rts
.952e						EorInteger:
.952e		fa		plx				plx
.952f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9531		15 51		ora $51,x			ora 	NSStatus+1,x
.9533		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9534		0a		asl a				asl 	a
.9535		10 05		bpl $953c			bpl 	_NotRef
.9537		48		pha				pha
.9538		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.953b		68		pla				pla
.953c						_NotRef:
.953c		0a		asl a				asl 	a
.953d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.953f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9541		15 79		ora $79,x			ora 	NSExponent+1,x
.9543		f0 03		beq $9548			beq 	_IntegerCode 				; if clear, then we have two integers
.9545		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.9548						_IntegerCode:
.9548		b5 58		lda $58,x			lda		NSMantissa0,x
.954a		55 59		eor $59,x			eor 		NSMantissa0+1,x
.954c		95 58		sta $58,x			sta 	NSMantissa0,x
.954e		b5 60		lda $60,x			lda		NSMantissa1,x
.9550		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9552		95 60		sta $60,x			sta 	NSMantissa1,x
.9554		b5 68		lda $68,x			lda		NSMantissa2,x
.9556		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9558		95 68		sta $68,x			sta 	NSMantissa2,x
.955a		b5 70		lda $70,x			lda		NSMantissa3,x
.955c		55 71		eor $71,x			eor 		NSMantissa3+1,x
.955e		95 70		sta $70,x			sta 	NSMantissa3,x
.9560		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9562		60		rts				rts
.9563						WordIndirect:
.9563		fa		plx				plx
.9564		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9566		15 51		ora $51,x			ora 	NSStatus+1,x
.9568		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9569		0a		asl a				asl 	a
.956a		10 05		bpl $9571			bpl 	_NotRef
.956c		48		pha				pha
.956d		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9570		68		pla				pla
.9571						_NotRef:
.9571		0a		asl a				asl 	a
.9572		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9574		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9576		15 79		ora $79,x			ora 	NSExponent+1,x
.9578		f0 03		beq $957d			beq 	_IntegerCode 				; if clear, then we have two integers
.957a		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.957d						_IntegerCode:
.957d		20 83 94	jsr $9483			jsr 	AddCode 					; add the two values
.9580		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9582		95 50		sta $50,x			sta 	NSStatus,x
.9584		60		rts				rts
.9585						ByteIndirect:
.9585		fa		plx				plx
.9586		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9588		15 51		ora $51,x			ora 	NSStatus+1,x
.958a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.958b		0a		asl a				asl 	a
.958c		10 05		bpl $9593			bpl 	_NotRef
.958e		48		pha				pha
.958f		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9592		68		pla				pla
.9593						_NotRef:
.9593		0a		asl a				asl 	a
.9594		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9596		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9598		15 79		ora $79,x			ora 	NSExponent+1,x
.959a		f0 03		beq $959f			beq 	_IntegerCode 				; if clear, then we have two integers
.959c		4c 0b a2	jmp $a20b			jmp 	TypeError 					; anything else, type mismatch.
.959f						_IntegerCode:
.959f		20 83 94	jsr $9483			jsr 	AddCode 					; add the two values
.95a2		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.95a4		95 50		sta $50,x			sta 	NSStatus,x
.95a6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.95a7						ConvertInt16:
.95a7		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.95a9		86 60		stx $60				stx 	NSMantissa1
.95ab		64 68		stz $68				stz 	NSMantissa2
.95ad		64 70		stz $70				stz 	NSMantissa3
.95af		64 50		stz $50				stz 	NSStatus 					; positive integer
.95b1		a2 00		ldx #$00			ldx 	#0 							; stack level
.95b3		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.95b5		80 00		bra $95b7			bra 	ConvertInt32
.95b7						ConvertInt32:
.95b7		5a		phy				phy
.95b8		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95ba		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.95bc		10 08		bpl $95c6			bpl 	_CI32NotNeg
.95be		48		pha				pha
.95bf		a9 2d		lda #$2d			lda 	#'-'
.95c1		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95c4		c8		iny				iny
.95c5		68		pla				pla
.95c6						_CI32NotNeg:
.95c6		20 d4 95	jsr $95d4			jsr 	_CI32DivideConvert 			; recursive conversion
.95c9		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95cb		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95ce		7a		ply				ply
.95cf		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.95d1		a9 27		lda #$27			lda 	#numberBuffer & $FF
.95d3		60		rts				rts
.95d4						_CI32DivideConvert:
.95d4		e8		inx				inx 								; write to next slot up
.95d5		20 85 a0	jsr $a085			jsr 	NSMSetByte 		 			; write the base out.
.95d8		ca		dex				dex
.95d9		20 02 93	jsr $9302			jsr 	Int32Divide 				; divide
.95dc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.95de		48		pha				pha
.95df		20 bf 92	jsr $92bf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.95e2		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; is it zero ?
.95e5		f0 05		beq $95ec			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.95e7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.95e9		20 d4 95	jsr $95d4			jsr 	_CI32DivideConvert 			; and recusrively call.
.95ec						_CI32NoRecurse:
.95ec		68		pla				pla 								; remainder
.95ed		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.95ef		90 02		bcc $95f3			bcc 	_CI32NotHex
.95f1		69 26		adc #$26			adc 	#6+32
.95f3						_CI32NotHex:
.95f3		69 30		adc #$30			adc 	#48
.95f5		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.95f8		c8		iny				iny
.95f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.95fa						PrecedenceLevel:
>95fa		04					.byte	 4	; $00 <<
>95fb		02					.byte	 2	; $01 <=
>95fc		02					.byte	 2	; $02 <>
>95fd		00					.byte	 0	; $03 !!3
>95fe		00					.byte	 0	; $04 ><
>95ff		02					.byte	 2	; $05 >=
>9600		04					.byte	 4	; $06 >>
>9601		00					.byte	 0	; $07 !!7
>9602		00					.byte	 0	; $08 !!8
>9603		00					.byte	 0	; $09 !!9
>9604		00					.byte	 0	; $0a !!10
>9605		00					.byte	 0	; $0b !!11
>9606		00					.byte	 0	; $0c !!12
>9607		00					.byte	 0	; $0d !!13
>9608		00					.byte	 0	; $0e !!14
>9609		00					.byte	 0	; $0f !!15
>960a		00					.byte	 0	; $10 @
>960b		00					.byte	 0	; $11 !!17
>960c		00					.byte	 0	; $12 !!18
>960d		00					.byte	 0	; $13 [
>960e		04					.byte	 4	; $14 \
>960f		00					.byte	 0	; $15 ]
>9610		01					.byte	 1	; $16 ^
>9611		00					.byte	 0	; $17 _
>9612		00					.byte	 0	; $18 `
>9613		00					.byte	 0	; $19 !!25
>9614		00					.byte	 0	; $1a !!26
>9615		00					.byte	 0	; $1b {
>9616		01					.byte	 1	; $1c |
>9617		00					.byte	 0	; $1d }
>9618		00					.byte	 0	; $1e ~
>9619		00					.byte	 0	; $1f [7m<7F>[m
>961a		00					.byte	 0	; $20
>961b		05					.byte	 5	; $21 !
>961c		00					.byte	 0	; $22 "
>961d		00					.byte	 0	; $23 #
>961e		05					.byte	 5	; $24 $
>961f		04					.byte	 4	; $25 %
>9620		01					.byte	 1	; $26 &
>9621		00					.byte	 0	; $27 '
>9622		00					.byte	 0	; $28 (
>9623		00					.byte	 0	; $29 )
>9624		04					.byte	 4	; $2a *
>9625		03					.byte	 3	; $2b +
>9626		00					.byte	 0	; $2c ,
>9627		03					.byte	 3	; $2d -
>9628		00					.byte	 0	; $2e .
>9629		04					.byte	 4	; $2f /
>962a		00					.byte	 0	; $30 0
>962b		00					.byte	 0	; $31 1
>962c		00					.byte	 0	; $32 2
>962d		00					.byte	 0	; $33 3
>962e		00					.byte	 0	; $34 4
>962f		00					.byte	 0	; $35 5
>9630		00					.byte	 0	; $36 6
>9631		00					.byte	 0	; $37 7
>9632		00					.byte	 0	; $38 8
>9633		00					.byte	 0	; $39 9
>9634		00					.byte	 0	; $3a :
>9635		00					.byte	 0	; $3b ;
>9636		02					.byte	 2	; $3c <
>9637		02					.byte	 2	; $3d =
>9638		02					.byte	 2	; $3e >
>9639		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.963a						EvaluateExpressionAt0:
.963a		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.963c						EvaluateExpression:
.963c		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.963e						EvaluateExpressionAtPrecedence:
.963e		48		pha				pha 								; save precedence level
.963f		20 86 9a	jsr $9a86			jsr 	EvaluateTerm 				; evaluate term into level X.
.9642		68		pla				pla 								; restore precedence level.
.9643						_EXPRLoop:
.9643		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9645		b1 30		lda ($30),y			lda 	(codePtr),y
.9647		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9649		b0 25		bcs $9670			bcs 	_EXPRExit
.964b		da		phx				phx 								; read the operator precedence
.964c		aa		tax				tax
.964d		bd fa 95	lda $95fa,x			lda 	PrecedenceLevel,x
.9650		fa		plx				plx
.9651		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9653		f0 1b		beq $9670			beq 	_EXPRExit
.9655		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9657		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9659		c5 37		cmp $37				cmp 	zTemp0+1
.965b		b0 13		bcs $9670			bcs		_EXPRExit 					; if current >= operator exit
.965d		48		pha				pha 								; save current precedence.
.965e		b1 30		lda ($30),y			lda 	(codePtr),y
.9660		c8		iny				iny
.9661		48		pha				pha
.9662		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9664		e8		inx				inx 								; work out the right hand side.
.9665		20 3e 96	jsr $963e			jsr 	EvaluateExpressionAtPrecedence
.9668		ca		dex				dex
.9669		68		pla				pla 								; get operator, call the code.
.966a		20 73 96	jsr $9673			jsr 	_EXPRCaller
.966d		68		pla				pla 								; restore precedence level
.966e		80 d3		bra $9643			bra 	_EXPRLoop 					; and go round.
.9670						_EXPRExit:
.9670		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9672		60		rts				rts
.9673						_EXPRCaller:
.9673		da		phx				phx 								; save on stack, first thing is to restore it
.9674		0a		asl a				asl 	a 							; double so can use vectors into X
.9675		aa		tax				tax
.9676		7c b0 8d	jmp ($8db0,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9679						FloatingPointAdd:
.9679		20 ef 97	jsr $97ef			jsr 	FloatPrepare 				; prepare for floats
.967c		80 09		bra $9687			bra 	FloatAdd
.967e						FloatingPointSub:
.967e		20 ef 97	jsr $97ef			jsr 	FloatPrepare 				; prepare for floats
.9681						FloatSubtract:
.9681		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9683		49 80		eor #$80			eor 	#$80
.9685		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9687						FloatAdd:
.9687		48		pha				pha
.9688		5a		phy				phy
.9689		20 fe 97	jsr $97fe			jsr 	NSNormalise 				; normalise S[X]
.968c		f0 51		beq $96df			beq 	_FAReturn1
.968e		e8		inx				inx 								; normalise S[X+1]
.968f		20 fe 97	jsr $97fe			jsr 	NSNormalise
.9692		ca		dex				dex
.9693		c9 00		cmp #$00			cmp 	#0
.9695		f0 60		beq $96f7			beq 	_FAExit 					; if so, just return A
.9697		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9699		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.969b		f0 18		beq $96b5			beq 	_FAExponentsEqual
.969d		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.969f		a8		tay				tay
.96a0		38		sec				sec 								; do a signed comparison of the exponents.
.96a1		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.96a3		50 02		bvc $96a7			bvc 	_FANoSignedChange
.96a5		49 80		eor #$80			eor 	#$80
.96a7						_FANoSignedChange:
.96a7		29 80		and #$80			and 	#$80
.96a9		10 02		bpl $96ad			bpl 	_FAHaveMax
.96ab		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.96ad						_FAHaveMax:
.96ad		20 fa 96	jsr $96fa			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96b0		e8		inx				inx
.96b1		20 fa 96	jsr $96fa			jsr 	_FAShiftToExponent
.96b4		ca		dex				dex
.96b5						_FAExponentsEqual:
.96b5		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.96b7		55 51		eor $51,x			eor 	NSStatus+1,x
.96b9		30 0e		bmi $96c9			bmi 	_FADifferentSigns
.96bb		20 32 94	jsr $9432			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96be		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96c0		10 35		bpl $96f7			bpl 	_FAExit 					; if no, we are done.
.96c2		20 9c a0	jsr $a09c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96c5		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.96c7		80 2e		bra $96f7			bra 	_FAExit
.96c9						_FADifferentSigns:
.96c9		20 4c 94	jsr $944c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96cc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.96ce		10 06		bpl $96d6			bpl 	_FACheckZero 				; if no, check for -0
.96d0		20 45 a0	jsr $a045			jsr 	NSMNegate 					; netate result
.96d3		20 4c a0	jsr $a04c			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96d6						_FACheckZero:
.96d6		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero	 				; check for -0
.96d9		d0 1c		bne $96f7			bne 	_FAExit
.96db		74 50		stz $50,x			stz 	NSStatus,x
.96dd		80 18		bra $96f7			bra 	_FAExit
.96df						_FAReturn1:
.96df		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.96e1		95 58		sta $58,x			sta 	NSMantissa0,x
.96e3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96e5		95 60		sta $60,x			sta 	NSMantissa1,x
.96e7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.96e9		95 68		sta $68,x			sta 	NSMantissa2,x
.96eb		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.96ed		95 70		sta $70,x			sta 	NSMantissa3,x
.96ef		b5 79		lda $79,x			lda 	NSExponent+1,x
.96f1		95 78		sta $78,x			sta 	NSExponent,x
.96f3		b5 51		lda $51,x			lda 	NSStatus+1,x
.96f5		95 50		sta $50,x			sta 	NSStatus,x
.96f7						_FAExit:
.96f7		7a		ply				ply
.96f8		68		pla				pla
.96f9		60		rts				rts
.96fa						_FAShiftToExponent:
.96fa						_FAShiftToExponent2:
.96fa		98		tya				tya 								; compare Y to exponent
.96fb		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96fd		f0 07		beq $9706			beq 	_FASEExit 					; exit if so.
.96ff		20 9c a0	jsr $a09c			jsr 	NSMShiftRight	 			; shift the mantissa right
.9702		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9704		80 f4		bra $96fa			bra 	_FAShiftToExponent2
.9706						_FASEExit:
.9706		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9707						CompareFloat:
.9707		20 81 96	jsr $9681			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.970a		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.970c		29 f8		and #$f8			and 	#$F8
.970e		15 68		ora $68,x			ora 	NSMantissa2,x
.9710		15 70		ora $70,x			ora 	NSMantissa3,x
.9712		f0 08		beq $971c			beq 	_FCExit 					; zero, so approximately identical
.9714		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9716		34 50		bit $50,x			bit 	NSStatus,x
.9718		10 02		bpl $971c			bpl 	_FCExit
.971a						_FCNegative:
.971a		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.971c						_FCExit:
.971c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.971d						FDivideCommand:
.971d		fa		plx				plx	 								; restore stack position
.971e		20 ef 97	jsr $97ef			jsr 	FloatPrepare 				; prepare for floats
.9721						FloatDivide:
.9721		48		pha				pha
.9722		e8		inx				inx
.9723		20 fe 97	jsr $97fe			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9726		ca		dex				dex
.9727		c9 00		cmp #$00			cmp 	#0
.9729		f0 1d		beq $9748			beq 	_FDZero
.972b		20 fe 97	jsr $97fe			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.972e		f0 16		beq $9746			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9730		20 23 93	jsr $9323			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9733		20 bf 92	jsr $92bf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9736		20 fe 97	jsr $97fe			jsr		NSNormalise 				; renormalise
.9739		20 b3 93	jsr $93b3			jsr 	CalculateSign 				; calculate result sign
.973c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.973e		38		sec				sec
.973f		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9741		38		sec				sec
.9742		e9 1e		sbc #$1e			sbc 	#30
.9744		95 78		sta $78,x			sta 	NSExponent,x
.9746						_FDExit:
.9746		68		pla				pla
.9747		60		rts				rts
.9748						_FDZero:
.9748		a9 03		lda #$03		lda	#3
.974a		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.974d						FloatFractionalPart:
.974d		5a		phy				phy
.974e		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9750		29 7f		and #$7f			and 	#$7F
.9752		95 50		sta $50,x			sta 	NSStatus,x
.9754		20 fe 97	jsr $97fe			jsr 	NSNormalise
.9757		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9759		38		sec				sec
.975a		e9 e0		sbc #$e0			sbc 	#$E0
.975c		90 29		bcc $9787			bcc 	_FFPExit 					; already fractional
.975e		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9760		b0 22		bcs $9784			bcs 	_FFPZero
.9762		a8		tay				tay 								; put count to do in Y
.9763		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9765		20 89 97	jsr $9789			jsr 	_FFPPartial
.9768		95 70		sta $70,x			sta 	NSMantissa3,x
.976a		b5 68		lda $68,x			lda 	NSMantissa2,x
.976c		20 89 97	jsr $9789			jsr 	_FFPPartial
.976f		95 68		sta $68,x			sta 	NSMantissa2,x
.9771		b5 60		lda $60,x			lda 	NSMantissa1,x
.9773		20 89 97	jsr $9789			jsr 	_FFPPartial
.9776		95 60		sta $60,x			sta 	NSMantissa1,x
.9778		b5 58		lda $58,x			lda 	NSMantissa0,x
.977a		20 89 97	jsr $9789			jsr 	_FFPPartial
.977d		95 58		sta $58,x			sta 	NSMantissa0,x
.977f		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; zeroed check.
.9782		d0 03		bne $9787			bne 	_FFPExit
.9784						_FFPZero:
.9784		20 83 a0	jsr $a083			jsr 	NSMSetZero
.9787						_FFPExit:
.9787		7a		ply				ply
.9788		60		rts				rts
.9789						_FFPPartial:
.9789		c0 00		cpy #$00			cpy 	#0 							; no more to do
.978b		f0 17		beq $97a4			beq 	_FFFPPExit
.978d		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.978f		b0 0c		bcs $979d			bcs 	_FFFPPWholeByte
.9791		5a		phy				phy
.9792						_FFFPPLeft:
.9792		0a		asl a				asl 	a
.9793		88		dey				dey
.9794		d0 fc		bne $9792			bne 	_FFFPPLeft
.9796		7a		ply				ply
.9797						_FFFPPRight:
.9797		4a		lsr a				lsr 	a
.9798		88		dey				dey
.9799		d0 fc		bne $9797			bne 	_FFFPPRight
.979b		80 07		bra $97a4			bra 	_FFFPPExit
.979d						_FFFPPWholeByte:
.979d		98		tya				tya 								; subtract 8 from count
.979e		38		sec				sec
.979f		e9 08		sbc #$08			sbc 	#8
.97a1		a8		tay				tay
.97a2		a9 00		lda #$00			lda 	#0 							; and clear all
.97a4						_FFFPPExit:
.97a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.97a5						FloatIntegerPart:
.97a5		48		pha				pha
.97a6		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.97a8		f0 1d		beq $97c7			beq 	_FIPExit 					; if so do nothing
.97aa		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; is it zero ?
.97ad		f0 15		beq $97c4			beq 	_FIPZero 					; if so return zero.
.97af		20 fe 97	jsr $97fe			jsr 	NSNormalise 				; normalise
.97b2		f0 10		beq $97c4			beq 	_FIPZero 					; normalised to zero, exit zero
.97b4						_FIPShift:
.97b4		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97b6		10 07		bpl $97bf			bpl 	_FIPCheckZero
.97b8		20 9c a0	jsr $a09c			jsr 	NSMShiftRight 				; shift mantissa right
.97bb		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.97bd		80 f5		bra $97b4			bra 	_FIPShift
.97bf						_FIPCheckZero:
.97bf		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; avoid -0 problem
.97c2		d0 03		bne $97c7			bne 	_FIPExit 					; set to zero if mantissa zero.
.97c4						_FIPZero:
.97c4		20 83 a0	jsr $a083			jsr 	NSMSetZero
.97c7						_FIPExit:
.97c7		68		pla				pla
.97c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97c9						FloatingPointMultiply:
.97c9		20 ef 97	jsr $97ef			jsr 	FloatPrepare 				; prepare for floats
.97cc						FloatMultiply:
.97cc		48		pha				pha
.97cd		20 fe 97	jsr $97fe			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97d0		f0 18		beq $97ea			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.97d2		e8		inx				inx
.97d3		20 fe 97	jsr $97fe			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97d6		ca		dex				dex
.97d7		c9 00		cmp #$00			cmp 	#0
.97d9		f0 0c		beq $97e7			beq 	_FDSetZero
.97db		20 75 93	jsr $9375			jsr 	MultiplyShort 				; calculate the result.
.97de		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97e0		18		clc				clc
.97e1		75 79		adc $79,x			adc 	NSExponent+1,x
.97e3		95 78		sta $78,x			sta 	NSExponent,x
.97e5		80 03		bra $97ea			bra 	_FDExit
.97e7						_FDSetZero:
.97e7		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; return 0
.97ea						_FDExit:
.97ea		20 fe 97	jsr $97fe			jsr 	NSNormalise 				; normalise the result
.97ed		68		pla				pla
.97ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97ef						FloatPrepare:
.97ef		20 fa 98	jsr $98fa			jsr 	DereferenceTopTwo 			; dereference the top two values
.97f2		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.97f4		15 51		ora $51,x			ora 	NSStatus+1,x
.97f6		29 10		and #$10			and 	#NSBIsString
.97f8		d0 01		bne $97fb			bne 	_FDType
.97fa		60		rts				rts
.97fb						_FDType:
.97fb		4c 0b a2	jmp $a20b			jmp 	TypeError
.97fe						NSNormalise:
.97fe		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9800		29 80		and #$80			and 	#$80
.9802		09 08		ora #$08			ora 	#NSTFloat
.9804		95 50		sta $50,x			sta 	NSStatus,x
.9806		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; if zero exit
.9809		d0 07		bne $9812			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.980b		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.980d		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.980f		a9 00		lda #$00			lda 	#0 							; set Z flag
.9811		60		rts				rts
.9812						_NSNormaliseOptimise:
.9812		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9814		d0 19		bne $982f			bne 	_NSNormaliseLoop
.9816		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9818		30 15		bmi $982f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.981a		95 70		sta $70,x			sta 	NSMantissa3,x
.981c		b5 60		lda $60,x			lda 	NSMantissa1,x
.981e		95 68		sta $68,x			sta 	NSMantissa2,x
.9820		b5 58		lda $58,x			lda 	NSMantissa0,x
.9822		95 60		sta $60,x			sta 	NSMantissa1,x
.9824		74 58		stz $58,x			stz 	NSMantissa0,x
.9826		b5 78		lda $78,x			lda 	NSExponent,x
.9828		38		sec				sec
.9829		e9 08		sbc #$08			sbc 	#8
.982b		95 78		sta $78,x			sta 	NSExponent,x
.982d		80 e3		bra $9812			bra 	_NSNormaliseOptimise
.982f						_NSNormaliseLoop:
.982f		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9831		70 07		bvs $983a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9833		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; shift mantissa left
.9836		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9838		80 f5		bra $982f			bra 	_NSNormaliseLoop
.983a						_NSNExit:
.983a		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.983c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.983d						AssignNumber:
.983d		5a		phy				phy
.983e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9840		85 36		sta $36				sta 	zTemp0
.9842		b5 60		lda $60,x			lda 	NSMantissa1,x
.9844		85 37		sta $37				sta 	zTemp0+1
.9846		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9848		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.984a		95 50		sta $50,x			sta 	NSStatus,x
.984c		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.984e		c9 08		cmp #$08			cmp 	#NSTFloat
.9850		f0 24		beq $9876			beq 	_ANFloat
.9852		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9854		f0 03		beq $9859			beq		_ANNotFloat
.9856		4c 06 a2	jmp $a206			jmp 	RangeError					; if it is, report an error.
.9859						_ANNotFloat:
.9859		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.985b		29 03		and #$03			and 	#3
.985d		d0 05		bne $9864			bne 	_ANByteWord
.985f		20 81 98	jsr $9881			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9862		80 1b		bra $987f			bra 	_ANExit
.9864						_ANByteWord:
.9864		48		pha				pha 								; save count
.9865		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9867		92 36		sta ($36)			sta 	(zTemp0)
.9869		68		pla				pla
.986a		c9 01		cmp #$01			cmp	 	#1
.986c		f0 11		beq $987f			beq 	_ANExit
.986e		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9870		a0 01		ldy #$01			ldy 	#1
.9872		91 36		sta ($36),y			sta 	(zTemp0),y
.9874		80 09		bra $987f			bra 	_ANExit
.9876						_ANFloat:
.9876		20 81 98	jsr $9881			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9879		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.987b		a0 04		ldy #$04			ldy 	#4
.987d		91 36		sta ($36),y			sta 	(zTemp0),y
.987f						_ANExit:
.987f		7a		ply				ply
.9880		60		rts				rts
.9881						_ANCopy4PackSign:
.9881		a0 03		ldy #$03			ldy 	#3
.9883		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9885		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9887		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9889		91 36		sta ($36),y			sta 	(zTemp0),y
.988b		88		dey				dey
.988c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.988e		91 36		sta ($36),y			sta 	(zTemp0),y
.9890		88		dey				dey
.9891		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9893		91 36		sta ($36),y			sta 	(zTemp0),y
.9895		88		dey				dey
.9896		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9898		91 36		sta ($36),y			sta 	(zTemp0),y
.989a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.989b						AssignString:
.989b		5a		phy				phy
.989c		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.989e		85 38		sta $38				sta 	zTemp1
.98a0		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98a2		85 39		sta $39				sta 	zTemp1+1
.98a4		b5 58		lda $58,x			lda 	NSMantissa0,x
.98a6		85 36		sta $36				sta 	zTemp0
.98a8		b5 60		lda $60,x			lda 	NSMantissa1,x
.98aa		85 37		sta $37				sta 	zTemp0+1
.98ac		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.98ae		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b0		f0 23		beq $98d5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.98b2		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.98b3		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.98b5		e9 02		sbc #$02			sbc 	#2
.98b7		85 3c		sta $3c				sta 	zsTemp
.98b9		a0 01		ldy #$01			ldy 	#1
.98bb		b1 36		lda ($36),y			lda 	(zTemp0),y
.98bd		e9 00		sbc #$00			sbc 	#0
.98bf		85 3d		sta $3d				sta 	zsTemp+1
.98c1		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98c3						_ASGetLength:
.98c3		c8		iny				iny
.98c4		b1 38		lda ($38),y			lda 	(zTemp1),y
.98c6		d0 fb		bne $98c3			bne 	_ASGetLength
.98c8		98		tya				tya 								; is this length <= current length
.98c9		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98cb		90 1e		bcc $98eb			bcc 	_ASCopyString
.98cd		f0 1c		beq $98eb			beq 	_ASCopyString
.98cf		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98d1		a0 01		ldy #$01			ldy 	#1
.98d3		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98d5						_ASNewStringRequired:
.98d5		e8		inx				inx 								; concrete the new string.
.98d6		20 ef b1	jsr $b1ef			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.98d9		ca		dex				dex
.98da		18		clc				clc
.98db		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.98dd		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.98df		92 36		sta ($36)			sta 	(zTemp0)
.98e1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98e3		69 00		adc #$00			adc 	#0
.98e5		a0 01		ldy #$01			ldy 	#1
.98e7		91 36		sta ($36),y			sta 	(zTemp0),y
.98e9		80 0d		bra $98f8			bra 	_ASExit
.98eb						_ASCopyString:
.98eb		a0 00		ldy #$00			ldy 	#0
.98ed						_ASCopyLoop:
.98ed		b1 38		lda ($38),y			lda 	(zTemp1),y
.98ef		c8		iny				iny
.98f0		c8		iny				iny
.98f1		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98f3		88		dey				dey
.98f4		c9 00		cmp #$00			cmp 	#0
.98f6		d0 f5		bne $98ed			bne 	_ASCopyLoop
.98f8						_ASExit:
.98f8		7a		ply				ply
.98f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98fa						DereferenceTopTwo:
.98fa		e8		inx				inx
.98fb		20 ff 98	jsr $98ff			jsr 	Dereference 				; deref x+1
.98fe		ca		dex				dex  								; falls through to deref x
.98ff						Dereference:
.98ff		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9901		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9903		f0 48		beq $994d			beq 	_DRFExit 					; not a reference, so exit.
.9905		5a		phy				phy
.9906		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9908		85 36		sta $36				sta 	zTemp0
.990a		b5 60		lda $60,x			lda 	NSMantissa1,x
.990c		85 37		sta $37				sta 	zTemp0+1
.990e		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9910		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9912		95 58		sta $58,x			sta 	NSMantissa0,x
.9914		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9916		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9918		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.991a		f0 0e		beq $992a			beq 	_DRFDereferenceTwo
.991c		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.991e		f0 2f		beq $994f			beq 	_DRFFull
.9920		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9922		29 03		and #$03			and 	#3
.9924		f0 29		beq $994f			beq 	_DRFFull 					; the whole word
.9926		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9928		f0 06		beq $9930			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.992a						_DRFDereferenceTwo:
.992a		a0 01		ldy #$01			ldy 	#1
.992c		b1 36		lda ($36),y			lda 	(zTemp0),y
.992e		95 60		sta $60,x			sta 	NSMantissa1,x
.9930						_DRFClear23:
.9930		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9932		74 70		stz $70,x			stz 	NSMantissa3,x
.9934		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9936		29 18		and #$18			and 	#NSBTypeMask
.9938		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.993a		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.993c		d0 0e		bne $994c			bne 	_DRFNotString
.993e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9940		15 60		ora $60,x			ora 	NSMantissa1,x
.9942		d0 08		bne $994c			bne 	_DRFNotString
.9944		a9 4e		lda #$4e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9946		95 58		sta $58,x			sta 	NSMantissa0,x
.9948		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.994a		95 60		sta $60,x			sta 	NSMantissa1,x
.994c						_DRFNotString
.994c		7a		ply				ply 								; restore Y and exit
.994d						_DRFExit:
.994d		60		rts				rts
.994e						_DRFNullString:
>994e		00						.byte 	0
.994f						_DRFFull:
.994f		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9951		b1 36		lda ($36),y			lda 	(zTemp0),y
.9953		95 60		sta $60,x			sta 	NSMantissa1,x
.9955		c8		iny				iny
.9956		b1 36		lda ($36),y			lda 	(zTemp0),y
.9958		95 68		sta $68,x			sta 	NSMantissa2,x
.995a		c8		iny				iny
.995b		b1 36		lda ($36),y			lda 	(zTemp0),y
.995d		95 70		sta $70,x			sta 	NSMantissa3,x
.995f		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9961		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9963		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9965		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9967		f0 05		beq $996e			beq 	_DRFNoExponent
.9969		c8		iny				iny 								; if not, read the exponent as well.
.996a		b1 36		lda ($36),y			lda 	(zTemp0),y
.996c		95 78		sta $78,x			sta 	NSExponent,x
.996e						_DRFNoExponent:
.996e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9970		10 0a		bpl $997c			bpl 	_DRFExit2 					; if not, then exit.
.9972		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9974		95 70		sta $70,x			sta 	NSMantissa3,x
.9976		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9978		09 80		ora #$80			ora 	#NSBIsNegative
.997a		95 50		sta $50,x			sta 	NSStatus,x
.997c						_DRFExit2:
.997c		7a		ply				ply
.997d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.997e						EncodeNumberStart:
.997e		38		sec				sec
.997f		80 01		bra $9982			bra 	EncodeNumberContinue+1
.9981						EncodeNumberContinue:
.9981		18		clc				clc
.9982						EncodeNumber:
.9982		08		php				php 								; save reset flag.
.9983		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9985		f0 12		beq $9999			beq 	_ENIsOkay
.9987		c9 30		cmp #$30			cmp 	#"0"
.9989		90 04		bcc $998f			bcc 	_ENBadNumber
.998b		c9 3a		cmp #$3a			cmp 	#"9"+1
.998d		90 0a		bcc $9999			bcc 	_ENIsOkay
.998f						_ENBadNumber:
.998f		28		plp				plp 								; throw saved reset
.9990		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9993		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9995		f0 7b		beq $9a12			beq 	_ENConstructFinal
.9997						_ENFail:
.9997		18		clc				clc 								; not allowed
.9998		60		rts				rts
.9999						_ENIsOkay:
.9999		28		plp				plp 								; are we restarting
.999a		90 15		bcc $99b1			bcc 	_ENNoRestart
.999c						_ENStartEncode:
.999c		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.999e		f0 0c		beq $99ac			beq 	_ENFirstDP
.99a0		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.99a2		20 85 a0	jsr $a085			jsr 	NSMSetByte 					; in single byte mode.
.99a5		a9 01		lda #$01			lda 	#ESTA_Low
.99a7						_ENExitChange:
.99a7		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.99aa		38		sec				sec
.99ab		60		rts				rts
.99ac						_ENFirstDP:
.99ac		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; clear integer part
.99af		80 3c		bra $99ed			bra 	_ESTASwitchFloat			; go straight to float and exi
.99b1						_ENNoRestart:
.99b1		48		pha				pha 								; save digit or DP on stack.
.99b2		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.99b5		c9 01		cmp #$01			cmp 	#ESTA_Low
.99b7		f0 09		beq $99c2			beq  	_ESTALowState
.99b9		c9 02		cmp #$02			cmp 	#ESTA_High
.99bb		f0 26		beq $99e3			beq 	_ESTAHighState
.99bd		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99bf		f0 38		beq $99f9			beq 	_ESTADecimalState
>99c1		db						.byte 	$DB 						; causes a break in the emulator
.99c2						_ESTALowState:
.99c2		68		pla				pla 								; get value back
.99c3		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.99c5		f0 26		beq $99ed			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.99c7		29 0f		and #$0f			and 	#15 						; make digit
.99c9		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.99cc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99ce		0a		asl a				asl 	a
.99cf		0a		asl a				asl 	a
.99d0		75 58		adc $58,x			adc 	NSMantissa0,x
.99d2		0a		asl a				asl 	a
.99d3		6d 06 04	adc $0406			adc 	digitTemp
.99d6		95 58		sta $58,x			sta 	NSMantissa0,x
.99d8		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99da		90 05		bcc $99e1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99dc		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99de		8d 05 04	sta $0405			sta 	encodeState
.99e1						_ESTANoSwitch:
.99e1		38		sec				sec
.99e2		60		rts				rts
.99e3						_ESTAHighState:
.99e3		68		pla				pla 								; get value back
.99e4		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99e6		f0 05		beq $99ed			beq 	_ESTASwitchFloat
.99e8		20 46 9a	jsr $9a46			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99eb		38		sec				sec
.99ec		60		rts				rts
.99ed						_ESTASwitchFloat:
.99ed		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.99f0		e8		inx				inx 								; zero the decimal additive.
.99f1		20 83 a0	jsr $a083			jsr 	NSMSetZero
.99f4		ca		dex				dex
.99f5		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99f7		80 ae		bra $99a7			bra 	_ENExitChange
.99f9						_ESTADecimalState:
.99f9		68		pla				pla 								; digit.
.99fa		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99fc		f0 99		beq $9997			beq 	_ENFail
.99fe		e8		inx				inx 								; put digit into fractional part of X+1
.99ff		20 46 9a	jsr $9a46			jsr 	ESTAShiftDigitIntoMantissa
.9a02		ca		dex				dex
.9a03		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9a06		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9a09		c9 0b		cmp #$0b			cmp 	#11
.9a0b		f0 02		beq $9a0f			beq 	_ESTADSFail
.9a0d		38		sec				sec
.9a0e		60		rts				rts
.9a0f						_ESTADSFail:
.9a0f		4c 06 a2	jmp $a206			jmp 	RangeError
.9a12						_ENConstructFinal:
.9a12		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9a15		f0 2d		beq $9a44			beq 	_ENCFExit 					; no decimals
.9a17		5a		phy				phy
.9a18		0a		asl a				asl 	a 							; x 4 and CLC
.9a19		0a		asl a				asl 	a
.9a1a		6d 07 04	adc $0407			adc 	decimalCount
.9a1d		a8		tay				tay
.9a1e		b9 c5 a1	lda $a1c5,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a21		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9a23		b9 c6 a1	lda $a1c6,y			lda 	DecimalScalarTable-5+1,y
.9a26		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9a28		b9 c7 a1	lda $a1c7,y			lda 	DecimalScalarTable-5+2,y
.9a2b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9a2d		b9 c8 a1	lda $a1c8,y			lda 	DecimalScalarTable-5+3,y
.9a30		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9a32		b9 c9 a1	lda $a1c9,y			lda 	DecimalScalarTable-5+4,y
.9a35		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9a37		a9 08		lda #$08			lda 	#NSTFloat
.9a39		95 52		sta $52,x			sta 	NSStatus+2,x
.9a3b		7a		ply				ply
.9a3c		e8		inx				inx 								; multiply decimal const by decimal scalar
.9a3d		20 cc 97	jsr $97cc			jsr 	FloatMultiply
.9a40		ca		dex				dex
.9a41		20 87 96	jsr $9687			jsr 	FloatAdd 					; add to integer part.
.9a44						_ENCFExit:
.9a44		18		clc				clc 								; reject the digit.
.9a45		60		rts				rts
.9a46						ESTAShiftDigitIntoMantissa:
.9a46		29 0f		and #$0f			and 	#15 						; save digit
.9a48		48		pha				pha
.9a49		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a4b		48		pha				pha
.9a4c		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a4e		48		pha				pha
.9a4f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a51		48		pha				pha
.9a52		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a54		48		pha				pha
.9a55		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 2
.9a58		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 4
.9a5b		18		clc				clc 								; pop mantissa and add
.9a5c		68		pla				pla
.9a5d		75 58		adc $58,x			adc 	NSMantissa0,x
.9a5f		95 58		sta $58,x			sta 	NSMantissa0,x
.9a61		68		pla				pla
.9a62		75 60		adc $60,x			adc 	NSMantissa1,x
.9a64		95 60		sta $60,x			sta 	NSMantissa1,x
.9a66		68		pla				pla
.9a67		75 68		adc $68,x			adc 	NSMantissa2,x
.9a69		95 68		sta $68,x			sta 	NSMantissa2,x
.9a6b		68		pla				pla
.9a6c		75 70		adc $70,x			adc 	NSMantissa3,x
.9a6e		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9a70		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 10
.9a73		68		pla				pla 								; add digit
.9a74		18		clc				clc
.9a75		75 58		adc $58,x			adc 	NSMantissa0,x
.9a77		95 58		sta $58,x			sta 	NSMantissa0,x
.9a79		90 0a		bcc $9a85			bcc 	_ESTASDExit
.9a7b		f6 60		inc $60,x			inc 	NSMantissa1,x
.9a7d		d0 06		bne $9a85			bne 	_ESTASDExit
.9a7f		f6 68		inc $68,x			inc 	NSMantissa2,x
.9a81		d0 02		bne $9a85			bne 	_ESTASDExit
.9a83		f6 70		inc $70,x			inc 	NSMantissa3,x
.9a85						_ESTASDExit:
.9a85		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a86						EvaluateTerm:
.9a86		b1 30		lda ($30),y			lda 	(codePtr),y
.9a88		30 18		bmi $9aa2			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a8a		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a8c		b0 6c		bcs $9afa			bcs 	_ETVariable
.9a8e		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a90		90 6b		bcc $9afd			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a92		c9 3a		cmp #$3a			cmp 	#'9'+1
.9a94		b0 67		bcs $9afd			bcs 	_ETPuncUnary
.9a96		20 7e 99	jsr $997e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a99						_ETNumber:
.9a99		c8		iny				iny 								; keep encoding until we have the numbers
.9a9a		b1 30		lda ($30),y			lda 	(codePtr),y
.9a9c		20 81 99	jsr $9981			jsr 	EncodeNumberContinue
.9a9f		b0 f8		bcs $9a99			bcs 	_ETNumber 					; go back if accepted.
.9aa1		60		rts				rts
.9aa2						_ETCheckUnary:
.9aa2		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9aa4		f0 3f		beq $9ae5			beq 	_ETString
.9aa6		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9aa8		f0 12		beq $9abc			beq 	_ETHexConstant
.9aaa		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9aac		90 0b		bcc $9ab9			bcc 	_ETSyntaxError
.9aae		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9ab0		b0 07		bcs $9ab9			bcs 	_ETSyntaxError
.9ab2		da		phx				phx 								; push X on the stack
.9ab3		0a		asl a				asl 	a 							; put vector x 2 into X
.9ab4		aa		tax				tax
.9ab5		c8		iny				iny 								; consume unary function token
.9ab6		7c 30 8e	jmp ($8e30,x)			jmp 	(VectorSet0,x) 				; and do it.
.9ab9						_ETSyntaxError:
.9ab9		4c 01 a2	jmp $a201			jmp 	SyntaxError
.9abc						_ETHexConstant:
.9abc		c8		iny				iny 								; skip #
.9abd		c8		iny				iny 								; skip count
.9abe		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; clear result
.9ac1						_ETHLoop:
.9ac1		b1 30		lda ($30),y			lda 	(codePtr),y
.9ac3		c8		iny				iny 								; and consume
.9ac4		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ac6		f0 1c		beq $9ae4			beq 	_ETHExit
.9ac8		48		pha				pha 								; save on stack.
.9ac9		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 2
.9acc		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 4
.9acf		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 8
.9ad2		20 92 a0	jsr $a092			jsr 	NSMShiftLeft 				; x 16
.9ad5		68		pla				pla 								; ASCII
.9ad6		c9 41		cmp #$41			cmp 	#'A'
.9ad8		90 02		bcc $9adc			bcc 	_ETHNotChar
.9ada		e9 07		sbc #$07			sbc 	#7
.9adc						_ETHNotChar:
.9adc		29 0f		and #$0f			and 	#15 						; digit now
.9ade		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ae0		95 58		sta $58,x			sta 	NSMantissa0,x
.9ae2		80 dd		bra $9ac1			bra 	_ETHLoop 					; go round.
.9ae4						_ETHExit:
.9ae4		60		rts				rts
.9ae5						_ETString:
.9ae5		c8		iny				iny 								; look at length
.9ae6		b1 30		lda ($30),y			lda 	(codePtr),y
.9ae8		48		pha				pha
.9ae9		c8		iny				iny 								; first character
.9aea		20 17 a8	jsr $a817			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9aed		68		pla				pla 								; restore count and save
.9aee		85 36		sta $36				sta 	zTemp0
.9af0		98		tya				tya 								; add length to Y to skip it.
.9af1		18		clc				clc
.9af2		65 36		adc $36				adc 	zTemp0
.9af4		a8		tay				tay
.9af5		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9af7		95 50		sta $50,x			sta 	NSStatus,x
.9af9		60		rts				rts
.9afa						_ETVariable:
.9afa		4c 4f 9b	jmp $9b4f			jmp 	VariableHandler
.9afd						_ETPuncUnary:
.9afd		c8		iny				iny 								; consume the unary character
.9afe		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b00		f0 2b		beq $9b2d			beq 	_ETUnaryNegate
.9b02		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9b04		f0 36		beq $9b3c			beq 	_ETDereference
.9b06		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9b08		f0 3e		beq $9b48			beq 	_ETParenthesis
.9b0a		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b0c		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b0e		f0 06		beq $9b16			beq 	_ETIndirection
.9b10		e6 36		inc $36				inc 	zTemp0
.9b12		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b14		d0 a3		bne $9ab9			bne 	_ETSyntaxError
.9b16						_ETIndirection:
.9b16		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b18		1a		inc a				inc 	a
.9b19		48		pha				pha
.9b1a		20 86 9a	jsr $9a86			jsr 	EvaluateTerm				; evaluate the term
.9b1d		20 ff 98	jsr $98ff			jsr 	Dereference 				; dereference it.
.9b20		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b22		d0 06		bne $9b2a			bne 	_ETTypeMismatch
.9b24		68		pla				pla 								; indirection 1-2
.9b25		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b27		95 50		sta $50,x			sta 	NSStatus,x
.9b29		60		rts				rts
.9b2a						_ETTypeMismatch:
.9b2a		4c 0b a2	jmp $a20b			jmp 	TypeError
.9b2d						_ETUnaryNegate:
.9b2d		20 86 9a	jsr $9a86			jsr 	EvaluateTerm				; evaluate the term
.9b30		20 ff 98	jsr $98ff			jsr 	Dereference 				; dereference it.
.9b33		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9b35		29 10		and #$10			and 	#NSTString
.9b37		d0 f1		bne $9b2a			bne 	_ETTypeMismatch
.9b39		4c 45 a0	jmp $a045			jmp 	NSMNegate  					; just toggles the sign bit.
.9b3c						_ETDereference:
.9b3c		20 86 9a	jsr $9a86			jsr 	EvaluateTerm				; evaluate the term
.9b3f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9b41		29 20		and #$20			and 	#NSBIsReference
.9b43		f0 e5		beq $9b2a			beq 	_ETTypeMismatch
.9b45		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9b47		60		rts				rts
.9b48						_ETParenthesis:
.9b48		20 3c 96	jsr $963c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b4b		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; check for )
.9b4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b4f						VariableHandler:
.9b4f		b1 30		lda ($30),y			lda 	(codePtr),y
.9b51		18		clc				clc
.9b52		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b54		85 37		sta $37				sta 	zTemp0+1
.9b56		c8		iny				iny
.9b57		b1 30		lda ($30),y			lda 	(codePtr),y
.9b59		85 36		sta $36				sta 	zTemp0
.9b5b		c8		iny				iny
.9b5c		18		clc				clc									; copy variable address+3 to mantissa
.9b5d		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9b5f		95 58		sta $58,x			sta 	NSMantissa0,x
.9b61		a5 37		lda $37				lda 	zTemp0+1
.9b63		69 00		adc #$00			adc 	#0
.9b65		95 60		sta $60,x			sta 	NSMantissa1,x
.9b67		74 68		stz $68,x			stz 	NSMantissa2,x
.9b69		74 70		stz $70,x			stz 	NSMantissa3,x
.9b6b		74 78		stz $78,x			stz 	NSExponent,x
.9b6d		5a		phy				phy
.9b6e		a0 02		ldy #$02			ldy 	#2 							; read type
.9b70		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b72		7a		ply				ply
.9b73		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b75		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b77		95 50		sta $50,x			sta 	NSStatus,x
.9b79		29 04		and #$04			and 	#NSBIsArray
.9b7b		d0 01		bne $9b7e			bne 	_VHArray
.9b7d		60		rts				rts
.9b7e						_VHArray:
.9b7e		e8		inx				inx
.9b7f		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b82		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b84		95 51		sta $51,x			sta 	NSStatus+1,x
.9b86		b1 30		lda ($30),y			lda 	(codePtr),y
.9b88		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b8a		d0 06		bne $9b92			bne 	_VHNoSecondIndex
.9b8c		c8		iny				iny 								; skip the comma
.9b8d		e8		inx				inx
.9b8e		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b91		ca		dex				dex
.9b92						_VHNoSecondIndex:
.9b92		ca		dex				dex 								; set X back.
.9b93		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; and check the right bracket.
.9b96		5a		phy				phy 								; save position
.9b97		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9b99		85 3e		sta $3e				sta 	zaTemp
.9b9b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b9d		85 3f		sta $3f				sta 	zaTemp+1
.9b9f		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9ba1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba3		f0 5d		beq $9c02			beq 	_VHBadArray
.9ba5		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9ba7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba9		f0 02		beq $9bad			beq 	_VHHas2Mask
.9bab		a9 ff		lda #$ff			lda 	#$FF
.9bad						_VHHas2Mask:
.9bad		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9baf		f0 4c		beq $9bfd			beq 	_VHBadIndex
.9bb1		0a		asl a				asl 	a 							; carry will be set if a second index
.9bb2		90 08		bcc $9bbc			bcc 	_VHCheckFirstIndex
.9bb4		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9bb6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bb8		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9bba		90 41		bcc $9bfd			bcc 	_VHBadIndex
.9bbc						_VHCheckFirstIndex:
.9bbc		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bbe		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bc0		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9bc2		90 39		bcc $9bfd			bcc 	_VHBadIndex
.9bc4		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bc6		64 37		stz $37				stz 	zTemp0+1
.9bc8		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bca		30 0e		bmi $9bda			bmi 	_VHNoMultiply
.9bcc		da		phx				phx
.9bcd		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bcf		48		pha				pha
.9bd0		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bd2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bd4		1a		inc a				inc 	a 							; add 1 for zero base
.9bd5		fa		plx				plx
.9bd6		20 2e a0	jsr $a02e			jsr 	Multiply8x8 				; calculate -> Z0
.9bd9		fa		plx				plx
.9bda						_VHNoMultiply:
.9bda		18		clc				clc
.9bdb		a5 36		lda $36				lda 	zTemp0
.9bdd		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9bdf		85 36		sta $36				sta 	zTemp0
.9be1		a5 37		lda $37				lda 	zTemp0+1
.9be3		69 00		adc #$00			adc 	#0
.9be5		85 37		sta $37				sta 	zTemp0+1
.9be7		b5 50		lda $50,x			lda 	NSStatus,x
.9be9		20 bf 85	jsr $85bf			jsr 	ScaleByBaseType
.9bec		18		clc				clc
.9bed		b2 3e		lda ($3e)			lda 	(zaTemp)
.9bef		65 36		adc $36				adc 	zTemp0
.9bf1		95 58		sta $58,x			sta 	NSMantissa0,x
.9bf3		a0 01		ldy #$01			ldy 	#1
.9bf5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bf7		65 37		adc $37				adc 	zTemp0+1
.9bf9		95 60		sta $60,x			sta 	NSMantissa1,x
.9bfb		7a		ply				ply 								; restore position
.9bfc		60		rts				rts
.9bfd						_VHBadIndex:
.9bfd		a9 17		lda #$17		lda	#23
.9bff		4c 38 91	jmp $9138		jmp	ErrorHandler
.9c02						_VHBadArray:
.9c02		a9 18		lda #$18		lda	#24
.9c04		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9c07						AbsUnary:
.9c07		fa		plx				plx 								; restore stack pos
.9c08		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; get a float or int
.9c0b		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9c0e		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9c10		29 7f		and #$7f			and 	#$7F
.9c12		95 50		sta $50,x			sta 	NSStatus,x
.9c14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c15						AllocUnary:
.9c15		fa		plx				plx 								; restore stack pos
.9c16		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger		; get bytes required.
.9c19		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9c1c		da		phx				phx 								; save X/Y
.9c1d		5a		phy				phy
.9c1e		8a		txa				txa 								; copy X into Y
.9c1f		a8		tay				tay
.9c20		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9c23		aa		tax				tax
.9c24		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9c27		20 34 9c	jsr $9c34			jsr 	AllocateXABytes 			; allocate memory
.9c2a		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9c2d		8a		txa				txa 	 							; typing is 16 bit integer.
.9c2e		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9c31		7a		ply				ply
.9c32		fa		plx				plx
.9c33		60		rts				rts
.9c34						AllocateXABytes:
.9c34		5a		phy				phy
.9c35		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c38		84 36		sty $36				sty 	zTemp0
.9c3a		5a		phy				phy
.9c3b		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9c3e		84 37		sty $37				sty 	zTemp0+1
.9c40		5a		phy				phy
.9c41		18		clc				clc 								; add to low memory pointer
.9c42		6d 0c 04	adc $040c			adc 	lowMemPtr
.9c45		8d 0c 04	sta $040c			sta 	lowMemPtr
.9c48		8a		txa				txa
.9c49		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9c4c		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9c4f		b0 2f		bcs $9c80			bcs 	CISSMemory
.9c51		20 72 9c	jsr $9c72			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c54						_ClearMemory:
.9c54		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9c57		c5 36		cmp $36				cmp 	zTemp0
.9c59		d0 07		bne $9c62			bne 	_CMClearNext
.9c5b		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9c5e		c5 37		cmp $37				cmp 	zTemp0+1
.9c60		f0 0c		beq $9c6e			beq 	_CMExit
.9c62						_CMClearNext:
.9c62		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c64		92 36		sta ($36)			sta 	(zTemp0)
.9c66		e6 36		inc $36				inc 	zTemp0
.9c68		d0 ea		bne $9c54			bne 	_ClearMemory
.9c6a		e6 37		inc $37				inc		zTemp0+1
.9c6c		80 e6		bra $9c54			bra 	_ClearMemory
.9c6e						_CMExit:
.9c6e		fa		plx				plx
.9c6f		68		pla				pla
.9c70		7a		ply				ply
.9c71		60		rts				rts
.9c72						CheckIdentifierStringSpace:
.9c72		48		pha				pha
.9c73		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9c76		18		clc				clc
.9c77		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c79		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9c7c		b0 02		bcs $9c80			bcs 	CISSMemory
.9c7e		68		pla				pla
.9c7f		60		rts				rts
.9c80						CISSMemory:
.9c80		a9 06		lda #$06		lda	#6
.9c82		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9c85						AscUnary:
.9c85		fa		plx				plx 								; restore stack pos
.9c86		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; get a string
.9c89		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9c8b		20 85 a0	jsr $a085			jsr 	NSMSetByte 					; ASC("") will return zero.
.9c8e		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9c91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9c92						FracUnary:
.9c92		fa		plx				plx 								; restore stack pos
.9c93		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; get a float or int
.9c96		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9c99		b5 50		lda $50,x			lda 	NSStatus,x
.9c9b		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9c9d		f0 04		beq $9ca3			beq 	_IUZero
.9c9f		20 4d 97	jsr $974d			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ca2		60		rts				rts
.9ca3						_IUZero:
.9ca3		20 83 a0	jsr $a083			jsr 	NSMSetZero
.9ca6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ca7						IntUnary:
.9ca7		fa		plx				plx 								; restore stack pos
.9ca8		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; get a float or int
.9cab		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9cae		b5 50		lda $50,x			lda 	NSStatus,x
.9cb0		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9cb2		f0 03		beq $9cb7			beq 	_IUExit
.9cb4		20 a5 97	jsr $97a5			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9cb7						_IUExit:
.9cb7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9cb8						LenUnary:
.9cb8		fa		plx				plx 								; restore stack pos
.9cb9		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; get a string
.9cbc		5a		phy				phy
.9cbd		a0 00		ldy #$00			ldy 	#0 							; find length
.9cbf						_LenFind:
.9cbf		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9cc1		f0 06		beq $9cc9			beq 	_LenExit
.9cc3		c8		iny				iny
.9cc4		d0 f9		bne $9cbf			bne 	_LenFind
.9cc6		4c 06 a2	jmp $a206			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9cc9						_LenExit:
.9cc9		98		tya				tya		 							; return length
.9cca		20 85 a0	jsr $a085			jsr 	NSMSetByte
.9ccd		7a		ply				ply
.9cce		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9cd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9cd2						Unary_Min:
.9cd2		a9 01		lda #$01			lda 	#1
.9cd4		80 02		bra $9cd8			bra 	UnaryMinMaxMain
.9cd6						Unary_Max:
.9cd6		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9cd8						UnaryMinMaxMain:
.9cd8		fa		plx				plx 								; get index on number stack
.9cd9		48		pha				pha 								; save comparator
.9cda		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue 				; get the first value.
.9cdd						_UMMMLoop:
.9cdd		b1 30		lda ($30),y			lda 	(codePtr),y
.9cdf		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ce1		f0 22		beq $9d05			beq 	_UMMMDone
.9ce3		20 27 91	jsr $9127			jsr 	CheckComma 					; must be a comma
.9ce6		e8		inx				inx
.9ce7		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue
.9cea		ca		dex				dex
.9ceb		20 66 a0	jsr $a066			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9cee		e8		inx				inx
.9cef		20 66 a0	jsr $a066			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9cf2		e8		inx				inx
.9cf3		20 ef 91	jsr $91ef			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9cf6		ca		dex				dex
.9cf7		ca		dex				dex
.9cf8		85 36		sta $36				sta 	zTemp0 						; save required result
.9cfa		68		pla				pla 								; get and save comparator
.9cfb		48		pha				pha
.9cfc		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9cfe		d0 dd		bne $9cdd			bne 	_UMMMLoop
.9d00		20 08 9d	jsr $9d08			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9d03		80 d8		bra $9cdd			bra 	_UMMMLoop
.9d05						_UMMMDone:
.9d05		68		pla				pla 								; throw the comparator
.9d06		c8		iny				iny 								; skip )
.9d07		60		rts				rts
.9d08						ExpCopyAboveDown:
.9d08		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d0a		95 50		sta $50,x			sta 	NSStatus,x
.9d0c		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d0e		95 78		sta $78,x			sta 	NSExponent,x
.9d10		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d12		95 58		sta $58,x			sta 	NSMantissa0,x
.9d14		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d16		95 60		sta $60,x			sta 	NSMantissa1,x
.9d18		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d1a		95 68		sta $68,x			sta 	NSMantissa2,x
.9d1c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d1e		95 70		sta $70,x			sta 	NSMantissa3,x
.9d20		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d21						Unary_Not:
.9d21		fa		plx				plx
.9d22		20 f0 9f	jsr $9ff0			jsr 	EvaluateInteger 			; get integer
.9d25		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9d28		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; zero mantissa ?
.9d2b		f0 04		beq $9d31			beq 	_NotZero
.9d2d		20 83 a0	jsr $a083			jsr 	NSMSetZero
.9d30		60		rts				rts
.9d31						_NotZero:
.9d31		4c a5 91	jmp $91a5			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9d34						PeekByteUnary:
.9d34		a9 01		lda #$01			lda 	#1
.9d36		80 0a		bra $9d42			bra 	PeekUnary
.9d38						PeekWUnary:
.9d38		a9 02		lda #$02			lda 	#2
.9d3a		80 06		bra $9d42			bra 	PeekUnary
.9d3c						PeekLUnary:
.9d3c		a9 03		lda #$03			lda 	#3
.9d3e		80 02		bra $9d42			bra 	PeekUnary
.9d40						PeekDUnary:
.9d40		a9 04		lda #$04			lda 	#4
.9d42						PeekUnary:
.9d42		fa		plx				plx 								; restore position.
.9d43		48		pha				pha 								; save count to copy on stack
.9d44		20 03 a0	jsr $a003			jsr		Evaluate16BitInteger 		; address as constant.
.9d47		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9d4a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9d4c		85 36		sta $36				sta 	zTemp0
.9d4e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d50		85 37		sta $37				sta 	zTemp0+1
.9d52		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; clear the result to zero.
.9d55		68		pla				pla 								; count in zTemp2
.9d56		85 3a		sta $3a				sta 	zTemp2
.9d58		da		phx				phx 								; save stack position and offset of read
.9d59		5a		phy				phy
.9d5a		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9d5c						_PULoop:
.9d5c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9d5e		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9d60		c8		iny				iny 								; next byte to write
.9d61		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9d62		18		clc				clc
.9d63		69 08		adc #$08			adc 	#MathStackSize
.9d65		aa		tax				tax
.9d66		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9d68		d0 f2		bne $9d5c			bne 	_PULoop
.9d6a		7a		ply				ply 								; restore stack/code pos and exit.
.9d6b		fa		plx				plx
.9d6c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d6d						Unary_Random:
.9d6d		fa		plx				plx
.9d6e		20 df 9d	jsr $9ddf			jsr 	Random32Bit 				; get a random number
.9d71		20 c8 9d	jsr $9dc8			jsr 	URCopyToMantissa  			; put in mantissa
.9d74		b1 30		lda ($30),y			lda 	(codePtr),y
.9d76		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9d78		f0 08		beq $9d82			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9d7a		e8		inx				inx
.9d7b		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d7e		ca		dex				dex
.9d7f		20 f7 92	jsr $92f7			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9d82						_URNoModulus:
.9d82		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9d84		74 78		stz $78,x			stz 	NSExponent,x
.9d86		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9d89		60		rts				rts
.9d8a						Unary_Rnd:
.9d8a		fa		plx				plx
.9d8b		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; number to use.
.9d8e		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; closing bracket
.9d91		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d94		f0 26		beq $9dbc			beq 	_URCopySeed
.9d96		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d98		10 1f		bpl $9db9			bpl 	_URDontSeed
.9d9a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d9c		49 17		eor #$17			eor 	#$17
.9d9e		8d 08 04	sta $0408			sta 	randomSeed+0
.9da1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9da3		49 a5		eor #$a5			eor 	#$A5
.9da5		8d 09 04	sta $0409			sta 	randomSeed+1
.9da8		b5 68		lda $68,x			lda 	NSMantissa2,x
.9daa		49 c2		eor #$c2			eor 	#$C2
.9dac		8d 0a 04	sta $040a			sta 	randomSeed+2
.9daf		b5 70		lda $70,x			lda 	NSMantissa3,x
.9db1		49 9d		eor #$9d			eor 	#$9D
.9db3		8d 0b 04	sta $040b			sta 	randomSeed+3
.9db6		20 df 9d	jsr $9ddf			jsr 	Random32Bit
.9db9						_URDontSeed:
.9db9		20 df 9d	jsr $9ddf			jsr 	Random32Bit 				; generate a number
.9dbc						_URCopySeed:
.9dbc		20 c8 9d	jsr $9dc8			jsr 	URCopyToMantissa 			; copy into mantissa
.9dbf		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9dc1		95 78		sta $78,x			sta 	NSExponent,x
.9dc3		a9 08		lda #$08			lda 	#NSTFloat
.9dc5		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9dc7		60		rts				rts
.9dc8						URCopyToMantissa:
.9dc8		ad 08 04	lda $0408			lda 	randomSeed+0
.9dcb		95 58		sta $58,x			sta 	NSMantissa0,x
.9dcd		ad 09 04	lda $0409			lda 	randomSeed+1
.9dd0		95 60		sta $60,x			sta 	NSMantissa1,x
.9dd2		ad 0a 04	lda $040a			lda 	randomSeed+2
.9dd5		95 68		sta $68,x			sta 	NSMantissa2,x
.9dd7		ad 0b 04	lda $040b			lda 	randomSeed+3
.9dda		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9ddc		95 70		sta $70,x			sta 	NSMantissa3,x
.9dde		60		rts				rts
.9ddf						Random32Bit:
.9ddf		5a		phy				phy
.9de0		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9de2		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9de5		d0 03		bne $9dea			bne 	_Random1
.9de7		a8		tay				tay 								; if so do it 256 times
.9de8		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9dea						_Random1:
.9dea		0a		asl a				asl 	a 							; LSFR RNG
.9deb		2e 09 04	rol $0409			rol 	randomSeed+1
.9dee		2e 0a 04	rol $040a			rol 	randomSeed+2
.9df1		2e 0b 04	rol $040b			rol 	randomSeed+3
.9df4		90 02		bcc $9df8			bcc 	_Random2
.9df6		49 c5		eor #$c5			eor 	#$C5
.9df8						_Random2:
.9df8		88		dey				dey
.9df9		d0 ef		bne $9dea			bne 	_Random1
.9dfb		8d 08 04	sta $0408			sta 	randomSeed+0
.9dfe		7a		ply				ply
.9dff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9e00						SgnUnary:
.9e00		fa		plx				plx 								; restore stack pos
.9e01		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber 				; get a float or int
.9e04		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9e07		20 a5 a0	jsr $a0a5			jsr 	NSMIsZero 					; if zero
.9e0a		f0 0e		beq $9e1a			beq 	_SGZero  					; return Int Zero
.9e0c		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9e0e		48		pha				pha
.9e0f		a9 01		lda #$01			lda 	#1 							; set to 1
.9e11		20 85 a0	jsr $a085			jsr 	NSMSetByte
.9e14		68		pla				pla
.9e15		29 80		and #$80			and		#$80 						; copy the sign byte out
.9e17		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9e19		60		rts				rts
.9e1a		20 83 a0	jsr $a083	_SGZero:jsr 	NSMSetZero
.9e1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9e1e						ValUnary:
.9e1e		fa		plx				plx 								; restore stack pos
.9e1f		20 34 9e	jsr $9e34			jsr 	ValMainCode 				; do the main val() code
.9e22		b0 01		bcs $9e25			bcs 	_VUError 					; couldn't convert
.9e24		60		rts				rts
.9e25						_VUError:
.9e25		4c 0b a2	jmp $a20b			jmp 	TypeError
.9e28						IsValUnary:
.9e28		fa		plx				plx 								; restore stack pos
.9e29		20 34 9e	jsr $9e34			jsr 	ValMainCode 				; do the main val() code
.9e2c		b0 03		bcs $9e31			bcs 	_VUBad
.9e2e		4c a5 91	jmp $91a5			jmp 	ReturnTrue
.9e31						_VUBad:
.9e31		4c b0 91	jmp $91b0			jmp 	ReturnFalse
.9e34						ValMainCode:
.9e34		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; get a string
.9e37		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; check right bracket present
.9e3a						ValEvaluateZTemp0:
.9e3a		5a		phy				phy
.9e3b		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9e3d		f0 17		beq $9e56			beq 	_VMCFail2
.9e3f		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9e41		48		pha				pha 								; save first character
.9e42		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9e44		d0 01		bne $9e47			bne 	_VMCStart
.9e46		c8		iny				iny 								; skip over -
.9e47						_VMCStart:
.9e47		38		sec				sec 								; initialise first time round.
.9e48						_VMCNext:
.9e48		c8		iny				iny 								; pre-increment
.9e49		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9e4b		f0 0c		beq $9e59			beq 	_VMCSuccess 				; successful.
.9e4d		20 82 99	jsr $9982			jsr 	EncodeNumber 				; send it to the number-builder
.9e50		90 03		bcc $9e55			bcc 	_VMCFail 					; if failed, give up.
.9e52		18		clc				clc 								; next time round, countinue
.9e53		80 f3		bra $9e48			bra 	_VMCNext
.9e55						_VMCFail:
.9e55		68		pla				pla
.9e56						_VMCFail2:
.9e56		7a		ply				ply
.9e57		38		sec				sec
.9e58		60		rts				rts
.9e59						_VMCSuccess:
.9e59		a9 00		lda #$00			lda 	#0 							; construct final
.9e5b		20 82 99	jsr $9982			jsr 	EncodeNumber 				; by sending a duff value.
.9e5e		68		pla				pla 								; if it was -ve
.9e5f		c9 2d		cmp #$2d			cmp 	#"-"
.9e61		d0 03		bne $9e66			bne 	_VMCNotNegative
.9e63		20 45 a0	jsr $a045			jsr		NSMNegate 					; negate it.
.9e66						_VMCNotNegative:
.9e66		7a		ply				ply
.9e67		18		clc				clc
.9e68		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9e69						ChrUnary:
.9e69		fa		plx				plx 								; restore stack pos
.9e6a		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9e6d		48		pha				pha
.9e6e		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9e71		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e73		20 6c b2	jsr $b26c			jsr 	StringTempAllocate
.9e76		68		pla				pla 								; write number to it
.9e77		20 a5 b2	jsr $b2a5			jsr 	StringTempWrite
.9e7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e7b						SpcUnary:
.9e7b		fa		plx				plx 								; restore stack pos
.9e7c		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger			; get value
.9e7f		5a		phy				phy
.9e80		48		pha				pha 								; save count
.9e81		20 6c b2	jsr $b26c			jsr 	StringTempAllocate
.9e84		7a		ply				ply 								; to do count in Y
.9e85						_SpcLoop:
.9e85		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9e87		f0 08		beq $9e91			beq 	_SpcExit
.9e89		a9 20		lda #$20			lda 	#32
.9e8b		20 a5 b2	jsr $b2a5			jsr 	StringTempWrite
.9e8e		88		dey				dey
.9e8f		80 f4		bra $9e85			bra 	_SpcLoop
.9e91						_SpcExit:
.9e91		7a		ply				ply
.9e92		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.9e95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e96						Unary_Str:
.9e96		fa		plx				plx
.9e97		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber  			; get number
.9e9a		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; closing bracket
.9e9d		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e9f		20 b8 9e	jsr $9eb8			jsr 	ConvertNumberToString 		; do the conversion.
.9ea2		a9 21		lda #$21			lda		#33 						; create buffer
.9ea4		20 6c b2	jsr $b26c			jsr 	StringTempAllocate 			; allocate memory
.9ea7		da		phx				phx  								; copy the converted string into the buffer.
.9ea8		a2 00		ldx #$00			ldx 	#0
.9eaa						_USCopy:
.9eaa		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9ead		20 a5 b2	jsr $b2a5			jsr 	StringTempWrite
.9eb0		e8		inx				inx
.9eb1		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9eb4		d0 f4		bne $9eaa			bne 	_USCopy
.9eb6		fa		plx				plx
.9eb7		60		rts				rts
.9eb8						ConvertNumberToString:
.9eb8		5a		phy				phy 								; save code position
.9eb9		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9ebc		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9ebf		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9ec1		10 09		bpl $9ecc			bpl 	_CNTSNotNegative
.9ec3		29 7f		and #$7f			and 	#$7F 						; make +ve
.9ec5		95 50		sta $50,x			sta 	NSStatus,x
.9ec7		a9 2d		lda #$2d			lda 	#"-"
.9ec9		20 2d 9f	jsr $9f2d			jsr 	WriteDecimalBuffer
.9ecc						_CNTSNotNegative:
.9ecc		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9ece		f0 12		beq $9ee2			beq 	_CNTSNotFloat
.9ed0		e8		inx				inx 								; round up so we don't get too many 6.999999
.9ed1		a9 01		lda #$01			lda 	#1
.9ed3		20 85 a0	jsr $a085			jsr 	NSMSetByte
.9ed6		ca		dex				dex
.9ed7		b5 78		lda $78,x			lda		NSExponent,x
.9ed9		95 79		sta $79,x			sta 	NSExponent+1,x
.9edb		a9 08		lda #$08			lda 	#NSTFloat
.9edd		95 51		sta $51,x			sta 	NSStatus+1,x
.9edf		20 87 96	jsr $9687			jsr 	FloatAdd
.9ee2						_CNTSNotFloat:
.9ee2		20 0f 9f	jsr $9f0f			jsr 	MakePlusTwoString 			; do the integer part.
.9ee5		20 4d 97	jsr $974d			jsr 	FloatFractionalPart 		; get the fractional part
.9ee8		20 fe 97	jsr $97fe			jsr 	NSNormalise					; normalise , exit if zero
.9eeb		f0 20		beq $9f0d			beq 	_CNTSExit
.9eed		a9 2e		lda #$2e			lda 	#"."
.9eef		20 2d 9f	jsr $9f2d			jsr 	WriteDecimalBuffer 			; write decimal place
.9ef2						_CNTSDecimal:
.9ef2		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9ef5		30 16		bmi $9f0d			bmi 	_CNTSExit
.9ef7		e8		inx				inx 								; x 10.0
.9ef8		a9 0a		lda #$0a			lda 	#10
.9efa		20 85 a0	jsr $a085			jsr 	NSMSetByte
.9efd		a9 08		lda #$08			lda 	#NSTFloat
.9eff		95 50		sta $50,x			sta 	NSStatus,x
.9f01		ca		dex				dex
.9f02		20 cc 97	jsr $97cc			jsr 	FloatMultiply
.9f05		20 0f 9f	jsr $9f0f			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9f08		20 4d 97	jsr $974d			jsr 	FloatFractionalPart 		; get the fractional part
.9f0b		80 e5		bra $9ef2			bra 	_CNTSDecimal 				; keep going.
.9f0d						_CNTSExit:
.9f0d		7a		ply				ply
.9f0e		60		rts				rts
.9f0f						MakePlusTwoString:
.9f0f		da		phx				phx
.9f10		20 66 a0	jsr $a066			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f13		e8		inx				inx 								; access it
.9f14		e8		inx				inx
.9f15		20 a5 97	jsr $97a5			jsr 	FloatIntegerPart 			; make it an integer
.9f18		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f1a		20 b7 95	jsr $95b7			jsr 	ConvertInt32
.9f1d		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9f1f						_MPTSCopy:
.9f1f		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f22		20 2d 9f	jsr $9f2d			jsr 	WriteDecimalBuffer
.9f25		e8		inx				inx
.9f26		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f29		d0 f4		bne $9f1f			bne 	_MPTSCopy
.9f2b		fa		plx				plx
.9f2c		60		rts				rts
.9f2d						WriteDecimalBuffer:
.9f2d		da		phx				phx
.9f2e		ae 15 04	ldx $0415			ldx 	dbOffset
.9f31		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9f34		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9f37		ee 15 04	inc $0415			inc 	dbOffset
.9f3a		fa		plx				plx
.9f3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9f3c						Unary_Left:
.9f3c		fa		plx				plx
.9f3d		18		clc				clc 								; only one parameter
.9f3e		20 a1 9f	jsr $9fa1			jsr 	SubstringInitial 			; set up.
.9f41		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9f43		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f45		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9f47		80 25		bra $9f6e			bra 	SubstringMain
.9f49						Unary_Right:
.9f49		fa		plx				plx
.9f4a		18		clc				clc 								; only one parameter
.9f4b		20 a1 9f	jsr $9fa1			jsr 	SubstringInitial 			; set up.
.9f4e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9f50		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f52		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9f54		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9f56		b0 02		bcs $9f5a			bcs 	_URNotUnderflow
.9f58		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9f5a						_URNotUnderflow:
.9f5a		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f5c		80 10		bra $9f6e			bra 	SubstringMain
.9f5e						Unary_Mid:
.9f5e		fa		plx				plx
.9f5f		38		sec				sec 								; two parameters
.9f60		20 a1 9f	jsr $9fa1			jsr 	SubstringInitial 			; set up.
.9f63		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f65		f0 04		beq $9f6b			beq 	_UMError
.9f67		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f69		80 03		bra $9f6e			bra 	SubstringMain
.9f6b						_UMError:
.9f6b		4c 10 a2	jmp $a210			jmp 	ArgumentError
.9f6e						SubstringMain:
.9f6e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f70		d5 78		cmp $78,x			cmp 	NSExponent,x
.9f72		b0 27		bcs $9f9b			bcs 	_SSMNull 					; if so, return an empty string.
.9f74		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f76		f0 23		beq $9f9b			beq 	_SSMNull 					; return empty string.
.9f78		18		clc				clc 								; add the offset +1 to the address and
.9f79		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9f7b		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f7d		85 36		sta $36				sta 	zTemp0
.9f7f		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9f81		69 00		adc #$00			adc 	#0
.9f83		85 37		sta $37				sta 	zTemp0+1
.9f85						_SSMNoCarry:
.9f85		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f87		20 6c b2	jsr $b26c			jsr 	StringTempAllocate 			; allocate that many characters
.9f8a		5a		phy				phy 								; save Y
.9f8b		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f8d						_SSMCopy:
.9f8d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f8f		f0 08		beq $9f99			beq 	_SSMEString 				; no more to copy
.9f91		20 a5 b2	jsr $b2a5			jsr 	StringTempWrite 			; and write it out.
.9f94		c8		iny				iny
.9f95		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9f97		d0 f4		bne $9f8d			bne 	_SSMCopy
.9f99						_SSMEString:
.9f99		7a		ply				ply
.9f9a						_SSMExit:
.9f9a		60		rts				rts
.9f9b						_SSMNull:
.9f9b		a9 00		lda #$00			lda 	#0
.9f9d		20 6c b2	jsr $b26c			jsr 	StringTempAllocate
.9fa0		60		rts				rts
.9fa1						SubstringInitial:
.9fa1		da		phx				phx 								; save initial stack position
.9fa2		08		php				php 								; save carry on stack indicating 2 parameters
.9fa3		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; get a string
.9fa6		5a		phy				phy 								; calculate length to exponent.
.9fa7		a0 ff		ldy #$ff			ldy 	#$FF
.9fa9						_SIFindLength:
.9fa9		c8		iny				iny
.9faa		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fac		d0 fb		bne $9fa9			bne 	_SIFindLength
.9fae		98		tya				tya
.9faf		95 78		sta $78,x			sta 	NSExponent,x
.9fb1		7a		ply				ply
.9fb2		e8		inx				inx
.9fb3		20 27 91	jsr $9127			jsr 	CheckComma 					; comma next
.9fb6		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get next parameter
.9fb9		28		plp				plp 								; is it the last parameter ?
.9fba		90 07		bcc $9fc3			bcc 	_SSIExit 					; if so, exit.
.9fbc		e8		inx				inx
.9fbd		20 27 91	jsr $9127			jsr 	CheckComma 					; comma next
.9fc0		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get last parameter
.9fc3						_SSIExit:
.9fc3		fa		plx				plx
.9fc4		20 1f 91	jsr $911f			jsr 	CheckRightBracket 			; check closing bracket
.9fc7		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9fc8						EvaluateValue:
.9fc8		48		pha				pha
.9fc9		20 3c 96	jsr $963c			jsr		EvaluateExpression 			; expression
.9fcc		20 ff 98	jsr $98ff			jsr 	Dereference					; derefernce it
.9fcf		68		pla				pla
.9fd0		60		rts				rts
.9fd1						EvaluateNumber:
.9fd1		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue 				; get a value
.9fd4		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fd6		29 10		and #$10			and 	#NSBIsString
.9fd8		d0 13		bne $9fed			bne 	HelperTypeError
.9fda		60		rts				rts
.9fdb						EvaluateString:
.9fdb		20 c8 9f	jsr $9fc8			jsr 	EvaluateValue 				; get a value
.9fde		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fe0		29 10		and #$10			and 	#NSBIsString
.9fe2		f0 09		beq $9fed			beq 	HelperTypeError
.9fe4						CopyAddressToTemp0:
.9fe4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9fe6		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9fe8		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fea		85 37		sta $37				sta 	zTemp0+1
.9fec		60		rts				rts
.9fed						HelperTypeError:
.9fed		4c 0b a2	jmp $a20b			jmp 	TypeError
.9ff0						EvaluateInteger:
.9ff0		20 d1 9f	jsr $9fd1			jsr 	EvaluateNumber
.9ff3		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9ff5		d0 09		bne $a000			bne 	HelperValueError 			; if not, it's a float.
.9ff7		60		rts				rts
.9ff8						EvaluateUnsignedInteger:
.9ff8		20 f0 9f	jsr $9ff0			jsr 	EvaluateInteger 			; check integer is +ve
.9ffb		b5 50		lda $50,x			lda 	NSStatus,x
.9ffd		30 01		bmi $a000			bmi 	HelperValueError
.9fff		60		rts				rts
.a000						HelperValueError:
.a000		4c 10 a2	jmp $a210			jmp 	ArgumentError
.a003						Evaluate16BitInteger:
.a003		20 f8 9f	jsr $9ff8			jsr	 	EvaluateUnsignedInteger		; get integer
.a006		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a008		15 68		ora $68,x			ora 	NSMantissa2,x
.a00a		d0 f4		bne $a000			bne 	HelperValueError
.a00c		60		rts				rts
.a00d						Evaluate16BitIntegerSigned:
.a00d		20 f0 9f	jsr $9ff0			jsr	 	EvaluateInteger				; get integer
.a010		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a012		15 68		ora $68,x			ora 	NSMantissa2,x
.a014		d0 ea		bne $a000			bne 	HelperValueError
.a016		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a018		10 03		bpl $a01d			bpl 	_EISNotSigned
.a01a		20 4c a0	jsr $a04c			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a01d						_EISNotSigned:
.a01d		60		rts				rts
.a01e						Evaluate8BitInteger:
.a01e		20 f8 9f	jsr $9ff8			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a021		d0 dd		bne $a000			bne 	HelperValueError
.a023		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a025		15 68		ora $68,x			ora 	NSMantissa2,x
.a027		15 60		ora $60,x			ora 	NSMantissa1,x
.a029		d0 d5		bne $a000			bne 	HelperValueError
.a02b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a02d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a02e						Multiply8x8:
.a02e		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a02f		85 36		sta $36			  	sta 	zTemp0
.a031		86 37		stx $37				stx 	zTemp0+1
.a033		a9 00		lda #$00			lda 	#0
.a035		a2 08		ldx #$08			ldx 	#8
.a037						_M88Loop:
.a037		90 03		bcc $a03c			bcc 	_M88NoAdd
.a039		18		clc				clc
.a03a		65 37		adc $37				adc 	zTemp0+1
.a03c						_M88NoAdd:
.a03c		6a		ror a				ror 	a
.a03d		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a03f		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a040		d0 f5		bne $a037			bne 	_M88Loop
.a042		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a044		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a045						NSMNegate:
.a045		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a047		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a049		95 50		sta $50,x			sta 	NSStatus,x
.a04b		60		rts				rts
.a04c						NSMNegateMantissa:
.a04c		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a04d		a9 00		lda #$00			lda 	#0
.a04f		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a051		95 58		sta $58,x			sta 	NSMantissa0,x
.a053		a9 00		lda #$00			lda 	#0
.a055		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a057		95 60		sta $60,x			sta 	NSMantissa1,x
.a059		a9 00		lda #$00			lda 	#0
.a05b		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a05d		95 68		sta $68,x			sta 	NSMantissa2,x
.a05f		a9 00		lda #$00			lda 	#0
.a061		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a063		95 70		sta $70,x			sta 	NSMantissa3,x
.a065		60		rts				rts
.a066						NSMShiftUpTwo:
.a066		b5 58		lda $58,x			lda 	NSMantissa0,x
.a068		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a06a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a06c		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a06e		b5 68		lda $68,x			lda 	NSMantissa2,x
.a070		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a072		b5 70		lda $70,x			lda 	NSMantissa3,x
.a074		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a076		b5 78		lda $78,x			lda 	NSExponent,x
.a078		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a07a		b5 50		lda $50,x			lda 	NSStatus,x
.a07c		95 52		sta $52,x			sta 	NSStatus+2,x
.a07e		60		rts				rts
.a07f						NSMSetZeroMantissaOnly:
.a07f		a9 00		lda #$00			lda 	#0
.a081		80 06		bra $a089			bra 	NSMSetMantissa
.a083						NSMSetZero:
.a083		a9 00		lda #$00			lda 	#0
.a085						NSMSetByte:
.a085		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a087		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a089						NSMSetMantissa:
.a089		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a08b		74 60		stz $60,x			stz 	NSMantissa1,x
.a08d		74 68		stz $68,x			stz 	NSMantissa2,x
.a08f		74 70		stz $70,x			stz 	NSMantissa3,x
.a091		60		rts				rts
.a092						NSMShiftLeft:
.a092		18		clc				clc
.a093						NSMRotateLeft:
.a093		36 58		rol $58,x			rol 	NSMantissa0,x
.a095		36 60		rol $60,x			rol		NSMantissa1,x
.a097		36 68		rol $68,x			rol		NSMantissa2,x
.a099		36 70		rol $70,x			rol		NSMantissa3,x
.a09b		60		rts				rts
.a09c						NSMShiftRight:
.a09c		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a09e		76 68		ror $68,x			ror		NSMantissa2,x
.a0a0		76 60		ror $60,x			ror		NSMantissa1,x
.a0a2		76 58		ror $58,x			ror		NSMantissa0,x
.a0a4		60		rts				rts
.a0a5						NSMIsZero:
.a0a5		b5 70		lda $70,x			lda 	NSMantissa3,x
.a0a7		15 68		ora $68,x			ora		NSMantissa2,x
.a0a9		15 60		ora $60,x			ora		NSMantissa1,x
.a0ab		15 58		ora $58,x			ora		NSMantissa0,x
.a0ad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a0ae						TickHandler:
.a0ae		5a		phy				phy 								; need to preserve Y
.a0af		20 8f 80	jsr $808f			jsr 	SNDUpdate 					; update sound
.a0b2		7a		ply				ply
.a0b3		60		rts				rts
.065f						LastTick:
>065f								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a0b4						Assemble_ora:
.a0b4		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0b7		01					.byte $01
.a0b8						Assemble_and:
.a0b8		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0bb		21					.byte $21
.a0bc						Assemble_eor:
.a0bc		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0bf		41					.byte $41
.a0c0						Assemble_adc:
.a0c0		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0c3		61					.byte $61
.a0c4						Assemble_sta:
.a0c4		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0c7		81					.byte $81
.a0c8						Assemble_lda:
.a0c8		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0cb		a1					.byte $a1
.a0cc						Assemble_cmp:
.a0cc		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0cf		c1					.byte $c1
.a0d0						Assemble_sbc:
.a0d0		20 f8 80	jsr $80f8		jsr	AssembleGroup1
>a0d3		e1					.byte $e1
.a0d4						Assemble_asl:
.a0d4		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0d7		02					.byte $02
>a0d8		75					.byte $75
.a0d9						Assemble_rol:
.a0d9		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0dc		22					.byte $22
>a0dd		75					.byte $75
.a0de						Assemble_lsr:
.a0de		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0e1		42					.byte $42
>a0e2		75					.byte $75
.a0e3						Assemble_ror:
.a0e3		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0e6		62					.byte $62
>a0e7		75					.byte $75
.a0e8						Assemble_stx:
.a0e8		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0eb		82					.byte $82
>a0ec		50					.byte $50
.a0ed						Assemble_ldx:
.a0ed		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0f0		a2					.byte $a2
>a0f1		d0					.byte $d0
.a0f2						Assemble_dec:
.a0f2		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0f5		c2					.byte $c2
>a0f6		55					.byte $55
.a0f7						Assemble_inc:
.a0f7		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0fa		e2					.byte $e2
>a0fb		55					.byte $55
.a0fc						Assemble_stz:
.a0fc		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a0ff		60					.byte $60
>a100		44					.byte $44
.a101						Assemble_bit:
.a101		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a104		20					.byte $20
>a105		55					.byte $55
.a106						Assemble_sty:
.a106		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a109		80					.byte $80
>a10a		54					.byte $54
.a10b						Assemble_ldy:
.a10b		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a10e		a0					.byte $a0
>a10f		d5					.byte $d5
.a110						Assemble_cpy:
.a110		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a113		c0					.byte $c0
>a114		d4					.byte $d4
.a115						Assemble_cpx:
.a115		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a118		e0					.byte $e0
>a119		d0					.byte $d0
.a11a						Assemble_tsb:
.a11a		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a11d		00					.byte $00
>a11e		50					.byte $50
.a11f						Assemble_trb:
.a11f		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a122		10					.byte $10
>a123		50					.byte $50
.a124						Assemble_jsr:
.a124		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a127		14					.byte $14
>a128		10					.byte $10
.a129						Assemble_jmp:
.a129		20 ff 80	jsr $80ff		jsr	AssembleGroup2
>a12c		40					.byte $40
>a12d		10					.byte $10
.a12e						Assemble_bpl:
.a12e		20 50 81	jsr $8150		jsr	AssembleGroup3
>a131		10					.byte $10
.a132						Assemble_bmi:
.a132		20 50 81	jsr $8150		jsr	AssembleGroup3
>a135		30					.byte $30
.a136						Assemble_bvc:
.a136		20 50 81	jsr $8150		jsr	AssembleGroup3
>a139		50					.byte $50
.a13a						Assemble_bvs:
.a13a		20 50 81	jsr $8150		jsr	AssembleGroup3
>a13d		70					.byte $70
.a13e						Assemble_bcc:
.a13e		20 50 81	jsr $8150		jsr	AssembleGroup3
>a141		90					.byte $90
.a142						Assemble_bcs:
.a142		20 50 81	jsr $8150		jsr	AssembleGroup3
>a145		b0					.byte $b0
.a146						Assemble_bne:
.a146		20 50 81	jsr $8150		jsr	AssembleGroup3
>a149		d0					.byte $d0
.a14a						Assemble_beq:
.a14a		20 50 81	jsr $8150		jsr	AssembleGroup3
>a14d		f0					.byte $f0
.a14e						Assemble_bra:
.a14e		20 50 81	jsr $8150		jsr	AssembleGroup3
>a151		80					.byte $80
.a152						Assemble_brk:
.a152		20 84 81	jsr $8184		jsr	AssembleGroup4
>a155		00					.byte $00
.a156						Assemble_php:
.a156		20 84 81	jsr $8184		jsr	AssembleGroup4
>a159		08					.byte $08
.a15a						Assemble_clc:
.a15a		20 84 81	jsr $8184		jsr	AssembleGroup4
>a15d		18					.byte $18
.a15e						Assemble_plp:
.a15e		20 84 81	jsr $8184		jsr	AssembleGroup4
>a161		28					.byte $28
.a162						Assemble_sec:
.a162		20 84 81	jsr $8184		jsr	AssembleGroup4
>a165		38					.byte $38
.a166						Assemble_rti:
.a166		20 84 81	jsr $8184		jsr	AssembleGroup4
>a169		40					.byte $40
.a16a						Assemble_pha:
.a16a		20 84 81	jsr $8184		jsr	AssembleGroup4
>a16d		48					.byte $48
.a16e						Assemble_cli:
.a16e		20 84 81	jsr $8184		jsr	AssembleGroup4
>a171		58					.byte $58
.a172						Assemble_phy:
.a172		20 84 81	jsr $8184		jsr	AssembleGroup4
>a175		5a					.byte $5a
.a176						Assemble_rts:
.a176		20 84 81	jsr $8184		jsr	AssembleGroup4
>a179		60					.byte $60
.a17a						Assemble_pla:
.a17a		20 84 81	jsr $8184		jsr	AssembleGroup4
>a17d		68					.byte $68
.a17e						Assemble_sei:
.a17e		20 84 81	jsr $8184		jsr	AssembleGroup4
>a181		78					.byte $78
.a182						Assemble_ply:
.a182		20 84 81	jsr $8184		jsr	AssembleGroup4
>a185		7a					.byte $7a
.a186						Assemble_dey:
.a186		20 84 81	jsr $8184		jsr	AssembleGroup4
>a189		88					.byte $88
.a18a						Assemble_txa:
.a18a		20 84 81	jsr $8184		jsr	AssembleGroup4
>a18d		8a					.byte $8a
.a18e						Assemble_tya:
.a18e		20 84 81	jsr $8184		jsr	AssembleGroup4
>a191		98					.byte $98
.a192						Assemble_txs:
.a192		20 84 81	jsr $8184		jsr	AssembleGroup4
>a195		9a					.byte $9a
.a196						Assemble_tay:
.a196		20 84 81	jsr $8184		jsr	AssembleGroup4
>a199		a8					.byte $a8
.a19a						Assemble_tax:
.a19a		20 84 81	jsr $8184		jsr	AssembleGroup4
>a19d		aa					.byte $aa
.a19e						Assemble_clv:
.a19e		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a1		b8					.byte $b8
.a1a2						Assemble_tsx:
.a1a2		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a5		ba					.byte $ba
.a1a6						Assemble_iny:
.a1a6		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1a9		c8					.byte $c8
.a1aa						Assemble_dex:
.a1aa		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1ad		ca					.byte $ca
.a1ae						Assemble_cld:
.a1ae		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b1		d8					.byte $d8
.a1b2						Assemble_phx:
.a1b2		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b5		da					.byte $da
.a1b6						Assemble_stp:
.a1b6		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1b9		db					.byte $db
.a1ba						Assemble_inx:
.a1ba		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1bd		e8					.byte $e8
.a1be						Assemble_nop:
.a1be		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1c1		ea					.byte $ea
.a1c2						Assemble_sed:
.a1c2		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1c5		f8					.byte $f8
.a1c6						Assemble_plx:
.a1c6		20 84 81	jsr $8184		jsr	AssembleGroup4
>a1c9		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a1ca						DecimalScalarTable:
>a1ca		66 66 66 66				.dword $66666666 ; 0.1
>a1ce		de					.byte $de
>a1cf		1f 85 eb 51				.dword $51eb851f ; 0.01
>a1d3		db					.byte $db
>a1d4		4c 37 89 41				.dword $4189374c ; 0.001
>a1d8		d8					.byte $d8
>a1d9		ac 8b db 68				.dword $68db8bac ; 0.0001
>a1dd		d4					.byte $d4
>a1de		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a1e2		d1					.byte $d1
>a1e3		83 de 1b 43				.dword $431bde83 ; 1e-06
>a1e7		ce					.byte $ce
>a1e8		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a1ec		ca					.byte $ca
>a1ed		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a1f1		c7					.byte $c7
>a1f2		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a1f6		c4					.byte $c4
>a1f7		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a1fb		c0					.byte $c0
>a1fc		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a200		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a201						SyntaxError:
.a201		a9 02		lda #$02		lda	#2
.a203		4c 38 91	jmp $9138		jmp	ErrorHandler
.a206						RangeError:
.a206		a9 04		lda #$04		lda	#4
.a208		4c 38 91	jmp $9138		jmp	ErrorHandler
.a20b						TypeError:
.a20b		a9 05		lda #$05		lda	#5
.a20d		4c 38 91	jmp $9138		jmp	ErrorHandler
.a210						ArgumentError:
.a210		a9 07		lda #$07		lda	#7
.a212		4c 38 91	jmp $9138		jmp	ErrorHandler
.a215						NotDoneError:
.a215		a9 0c		lda #$0c		lda	#12
.a217		4c 38 91	jmp $9138		jmp	ErrorHandler
.a21a						ErrorText:
>a21a		42 72 65 61 6b 00			.text	"Break",0
>a220		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a228		72 72 6f 72 00
>a22d		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a235		20 62 79 20 7a 65 72 6f 00
>a23e		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a246		61 6e 67 65 00
>a24b		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a253		6d 61 74 63 68 00
>a259		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a261		65 6d 6f 72 79 00
>a267		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a26f		61 72 67 75 6d 65 6e 74 00
>a278		53 74 6f 70 00				.text	"Stop",0
>a27d		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a285		6f 6f 20 6c 6f 6e 67 00
>a28d		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a295		6e 20 66 61 69 6c 65 64 00
>a29e		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a2a6		61 74 61 00
>a2aa		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a2b2		65 6e 74 65 64 00
>a2b8		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a2c0		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a2cc		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a2d4		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a2e1		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a2e9		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a2f6		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a2fe		68 6f 75 74 20 57 68 69 6c 65 00
>a309		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a311		68 6f 75 74 20 46 6f 72 00
>a31a		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a322		61 63 6b 20 66 75 6c 6c 00
>a32b		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a333		75 63 74 75 72 65 00
>a33a		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a342		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a34f		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a357		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a365		41 72 72 61 79 20 73 69			.text	"Array size",0
>a36d		7a 65 00
>a370		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a378		79 20 69 6e 64 65 78 00
>a380		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a388		74 20 64 65 63 6c 61 72 65 64 00
>a393		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a39b		20 66 6f 75 6e 64 00
>a3a2		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a3aa		65 72 72 6f 72 00
>a3b0		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a3b8		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a3be		41 6c 70 68 61 20 32 31			.text "Alpha 21 built 01-Jan-23. "
>a3c6		20 62 75 69 6c 74 20 30 31 2d 4a 61 6e 2d 32 33
>a3d6		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a3d8						RectangleCommand:
.a3d8		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a3da		80 02		bra $a3de			bra 	ShapeDrawCmd
.a3dc						CircleCommand:
.a3dc		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a3de						ShapeDrawCmd:
.a3de		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a3e1						ShapeDraw:
.a3e1		0d 61 06	ora $0661			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a3e4		4c 5c a4	jmp $a45c			jmp 	ExecuteGraphicCommand	 	; and complete
.a3e7						SpriteCommand:
.a3e7		a2 00		ldx #$00			ldx 	#0
.a3e9		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get image number.
.a3ec		5a		phy				phy
.a3ed		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a3ef		a6 58		ldx $58				ldx 	NSMantissa0
.a3f1		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a3f3		b0 0d		bcs $a402			bcs 	_SCRange
.a3f5		a0 ff		ldy #$ff			ldy 	#255
.a3f7		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a3fa		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a3fc		7a		ply				ply
.a3fd		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a400		80 5a		bra $a45c			bra 	ExecuteGraphicCommand
.a402						_SCRange:
.a402		4c 06 a2	jmp $a206			jmp 	RangeError
.a405						ImageCommand:
.a405		a2 00		ldx #$00			ldx 	#0
.a407		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get image number.
.a40a		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a40d						ImageRunDraw:
.a40d		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a40f		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a412		ad 67 06	lda $0667			lda 	gxDrawScale
.a415		0a		asl a				asl 	a
.a416		0a		asl a				asl 	a
.a417		0a		asl a				asl 	a
.a418		a8		tay				tay
.a419		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a41b		a6 58		ldx $58				ldx 	NSMantissa0
.a41d		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a420		60		rts				rts
.a421						TextCommand:
.a421		a2 00		ldx #$00			ldx 	#0
.a423		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; get text
.a426		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a429						TextRunDraw:
.a429		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a42b		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a42e		a0 00		ldy #$00			ldy 	#0
.a430						_IRDLoop:
.a430		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a432		85 37		sta $37				sta 	zTemp0+1
.a434		a5 58		lda $58				lda 	NSMantissa0
.a436		85 36		sta $36				sta 	zTemp0
.a438		b1 36		lda ($36),y			lda 	(zTemp0),y
.a43a		f0 13		beq $a44f			beq 	_IRDExit
.a43c		5a		phy				phy									; save string pos
.a43d		48		pha				pha 								; save char
.a43e		ad 67 06	lda $0667			lda 	gxDrawScale 				; get scale
.a441		0a		asl a				asl 	a
.a442		0a		asl a				asl 	a
.a443		0a		asl a				asl 	a
.a444		a8		tay				tay
.a445		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a447		fa		plx				plx 								; char to draw
.a448		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a44b		7a		ply				ply 								; restore string pos
.a44c		c8		iny				iny
.a44d		90 e1		bcc $a430			bcc 	_IRDLoop 					; go back if no error.
.a44f						_IRDExit:
.a44f		60		rts				rts
.a450						PlotCommand:
.a450		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a452		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a455		80 05		bra $a45c			bra 	ExecuteGraphicCommand
.a457						LineCommand:
.a457		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a459		20 68 a4	jsr $a468			jsr 	RunGraphicsCommand
.a45c						ExecuteGraphicCommand:
.a45c		0d 60 06	ora $0660			ora 	gxCommandID 				; make a full command
.a45f		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; draw it and exit
.a462		b0 01		bcs $a465			bcs 	_EGCError
.a464		60		rts				rts
.a465						_EGCError:
.a465		4c 01 a2	jmp $a201			jmp 	SyntaxError
.a468						RunGraphicsCommand:
.a468		8d 60 06	sta $0660			sta 	gxCommandID					; save TODO graphics command.
.a46b		68		pla				pla 								; pop handler address
.a46c		fa		plx				plx
.a46d		1a		inc a				inc 	a
.a46e		d0 01		bne $a471			bne 	_RGINoCarry
.a470		e8		inx				inx
.a471						_RGINoCarry:
.a471		8d 65 06	sta $0665			sta 	gxHandler
.a474		8e 66 06	stx $0666			stx 	gxHandler+1
.a477						_RGICommandLoop:
.a477		b1 30		lda ($30),y			lda 	(codePtr),y
.a479		c8		iny				iny
.a47a		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a47c		f0 53		beq $a4d1			beq 	_RGI_To
.a47e		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a480		f0 55		beq $a4d7			beq 	_RGI_Here
.a482		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a484		f0 3d		beq $a4c3			beq 	_RGI_Exit
.a486		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a488		f0 39		beq $a4c3			beq 	_RGI_Exit
.a48a		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a48c		f0 3e		beq $a4cc			beq 	_RGI_Frame
.a48e		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a490		f0 33		beq $a4c5			beq 	_RGI_Solid
.a492		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a494		f0 4b		beq $a4e1			beq 	_RGI_By
.a496		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a498		f0 17		beq $a4b1			beq 	_RGI_Move2
.a49a		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a49c		f0 62		beq $a500			beq 	_RGI_Dim
.a49e		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a4a0		f0 74		beq $a516			beq 	_RGI_Colour
.a4a2		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a4a4		f0 70		beq $a516			beq 	_RGI_Colour
.a4a6		ae 60 06	ldx $0660			ldx 	gxCommandID
.a4a9		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4ab		d0 03		bne $a4b0			bne 	_RGI_Move 					; move
.a4ad		4c 3e a5	jmp $a53e			jmp		_RGI_SpriteInstructions
.a4b0						_RGI_Move:
.a4b0		88		dey				dey 								; unpick get.
.a4b1						_RGI_Move2:
.a4b1		20 64 a5	jsr $a564			jsr 	GCGetCoordinatePair 		; move to here
.a4b4		20 8b a5	jsr $a58b			jsr 	GCCopyPairToStore 			; save
.a4b7		5a		phy				phy
.a4b8		20 81 a5	jsr $a581			jsr 	GCLoadAXY 					; load in
.a4bb		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4bd		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a4c0		7a		ply				ply
.a4c1		80 b4		bra $a477			bra 	_RGICommandLoop 			; and go round
.a4c3						_RGI_Exit:
.a4c3		88		dey				dey 								; unpick : / EOL
.a4c4		60		rts				rts
.a4c5						_RGI_Solid:
.a4c5		a9 02		lda #$02			lda 	#2
.a4c7		8d 61 06	sta $0661			sta 	gxFillSolid
.a4ca		80 ab		bra $a477			bra 	_RGICommandLoop
.a4cc						_RGI_Frame:
.a4cc		9c 61 06	stz $0661			stz 	gxFillSolid
.a4cf		80 a6		bra $a477			bra 	_RGICommandLoop
.a4d1						_RGI_To:
.a4d1		20 64 a5	jsr $a564			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a4d4		20 8b a5	jsr $a58b			jsr 	GCCopyPairToStore
.a4d7						_RGI_Here:
.a4d7		5a		phy				phy
.a4d8		20 81 a5	jsr $a581			jsr 	GCLoadAXY 					; load it into AXY
.a4db		20 3b a5	jsr $a53b			jsr 	_RGICallHandler 			; go do whatever it is.
.a4de		7a		ply				ply
.a4df		80 96		bra $a477			bra 	_RGICommandLoop 			; and go round
.a4e1						_RGI_By:
.a4e1		20 71 a5	jsr $a571			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a4e4		18		clc				clc
.a4e5		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a4e7		6d 62 06	adc $0662			adc 	gxXPos
.a4ea		8d 62 06	sta $0662			sta 	gxXPos
.a4ed		a5 61		lda $61				lda 	NSMantissa1+1
.a4ef		6d 63 06	adc $0663			adc 	gxXPos+1
.a4f2		8d 63 06	sta $0663			sta 	gxXPos+1
.a4f5		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4f7		18		clc				clc
.a4f8		6d 64 06	adc $0664			adc 	gxYPos
.a4fb		8d 64 06	sta $0664			sta 	gxYPos
.a4fe		80 d7		bra $a4d7			bra 	_RGI_Here
.a500						_RGI_Dim:
.a500		a2 01		ldx #$01			ldx	 	#1
.a502		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger
.a505		a5 59		lda $59				lda 	NSMantissa0+1
.a507		c9 00		cmp #$00			cmp 	#0
.a509		f0 2d		beq $a538			beq 	_RGIRange
.a50b		c9 09		cmp #$09			cmp 	#8+1
.a50d		b0 29		bcs $a538			bcs		_RGIRange
.a50f		3a		dec a				dec 	a
.a510		8d 67 06	sta $0667			sta 	gxDrawScale
.a513		4c 77 a4	jmp $a477			jmp 	_RGICommandLoop
.a516						_RGI_Colour:
.a516		a2 01		ldx #$01			ldx 	#1 							; colour
.a518		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger
.a51b		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a51d		20 83 a0	jsr $a083			jsr 	NSMSetZero
.a520		b1 30		lda ($30),y			lda 	(codePtr),y
.a522		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a524		d0 04		bne $a52a			bne 	_RGICDefaultMode
.a526		c8		iny				iny
.a527		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger
.a52a						_RGICDefaultMode:
.a52a		5a		phy				phy
.a52b		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a52d		a6 59		ldx $59				ldx 	NSMantissa0+1
.a52f		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a531		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a534		7a		ply				ply
.a535		4c 77 a4	jmp $a477			jmp 	_RGICommandLoop 			; and go round
.a538						_RGIRange:
.a538		4c 06 a2	jmp $a206			jmp 	RangeError
.a53b						_RGICallHandler:
.a53b		6c 65 06	jmp ($0665)			jmp 	(gxHandler)
.a53e						_RGI_SpriteInstructions:
.a53e		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a540		f0 07		beq $a549			beq 	_RGISpriteOff
.a542		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a544		f0 13		beq $a559			beq 	_RGISetImage
.a546		4c b0 a4	jmp $a4b0			jmp 	_RGI_Move
.a549						_RGISpriteOff:
.a549		5a		phy				phy
.a54a		a0 01		ldy #$01			ldy 	#1
.a54c		a2 00		ldx #$00			ldx 	#0
.a54e						_RGIDoCommandLoop:
.a54e		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a550		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a553		7a		ply				ply
.a554		b0 e2		bcs $a538			bcs 	_RGIRange
.a556		4c 77 a4	jmp $a477			jmp 	_RGICommandLoop
.a559						_RGISetImage:
.a559		a2 01		ldx #$01			ldx 	#1
.a55b		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger
.a55e		5a		phy				phy
.a55f		aa		tax				tax
.a560		a0 00		ldy #$00			ldy 	#0
.a562		80 ea		bra $a54e			bra 	_RGIDoCommandLoop
.a564						GCGetCoordinatePair:
.a564		a2 01		ldx #$01			ldx 	#1
.a566		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.a569		20 27 91	jsr $9127			jsr 	CheckComma
.a56c		e8		inx				inx
.a56d		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.a570		60		rts				rts
.a571						GCSignedCoordinatePair:
.a571		a2 01		ldx #$01			ldx 	#1
.a573		20 0d a0	jsr $a00d			jsr 	Evaluate16BitIntegerSigned
.a576		20 27 91	jsr $9127			jsr 	CheckComma
.a579		e8		inx				inx
.a57a		20 0d a0	jsr $a00d			jsr 	Evaluate16BitIntegerSigned
.a57d		60		rts				rts
.a57e						_GCCPRange:
.a57e		4c 06 a2	jmp $a206			jmp 	RangeError
.a581						GCLoadAXY:
.a581		ad 63 06	lda $0663			lda 	gxXPos+1
.a584		ae 62 06	ldx $0662			ldx 	gxXPos
.a587		ac 64 06	ldy $0664			ldy 	gxYPos
.a58a		60		rts				rts
.a58b						GCCopyPairToStore:
.a58b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a58d		8d 62 06	sta $0662			sta 	gxXPos
.a590		a5 61		lda $61				lda 	NSMantissa1+1
.a592		8d 63 06	sta $0663			sta 	gxXPos+1
.a595		a5 5a		lda $5a				lda 	NSMantissa0+2
.a597		8d 64 06	sta $0664			sta 	gxYPos
.a59a		60		rts				rts
.0660						gxCommandID:
>0660								.fill 	1
.0661						gxFillSolid:
>0661								.fill 	1
.0662						gxXPos:
>0662								.fill 	2
.0664						gxYPos:
>0664								.fill 	1
.0665						gxHandler:
>0665								.fill 	2
.0667						gxDrawScale:
>0667								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a59b						BitmapCtrl:
.a59b		b1 30		lda ($30),y			lda 	(codePtr),y
.a59d		c8		iny				iny
.a59e		a2 01		ldx #$01			ldx 	#1
.a5a0		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a5a2		f0 11		beq $a5b5			beq 	BitmapSwitch
.a5a4		ca		dex				dex
.a5a5		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a5a7		f0 0c		beq $a5b5			beq 	BitmapSwitch
.a5a9		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get the colour
.a5ac		5a		phy				phy
.a5ad		aa		tax				tax
.a5ae		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5b0		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5b3		7a		ply				ply
.a5b4		60		rts				rts
.a5b5						BitmapSwitch:
.a5b5		5a		phy				phy
.a5b6		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5b8		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5ba		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5bd		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5bf		a0 00		ldy #$00			ldy 	#0
.a5c1		a2 ff		ldx #$ff			ldx 	#$FF
.a5c3		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5c6		9c 61 06	stz $0661			stz 	gxFillSolid
.a5c9		9c 62 06	stz $0662			stz 	gxXPos
.a5cc		9c 63 06	stz $0663			stz 	gxXPos+1
.a5cf		9c 64 06	stz $0664			stz 	gxYPos
.a5d2		9c 67 06	stz $0667			stz 	gxDrawScale
.a5d5		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a5d7		a2 00		ldx #$00			ldx 	#0
.a5d9		a0 00		ldy #$00			ldy 	#0
.a5db		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5de		7a		ply				ply
.a5df		60		rts				rts
.a5e0						SpritesCtrl:
.a5e0		b1 30		lda ($30),y			lda 	(codePtr),y
.a5e2		c8		iny				iny
.a5e3		a2 01		ldx #$01			ldx 	#1
.a5e5		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a5e7		f0 08		beq $a5f1			beq 	SpriteSwitch
.a5e9		ca		dex				dex
.a5ea		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a5ec		f0 03		beq $a5f1			beq 	SpriteSwitch
.a5ee		4c 01 a2	jmp $a201			jmp 	SyntaxError
.a5f1						SpriteSwitch:
.a5f1		5a		phy				phy
.a5f2		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a5f4		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a5f6		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a5f9		7a		ply				ply
.a5fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a5fb						GfxCommand:
.a5fb		a2 00		ldx #$00			ldx 	#0
.a5fd		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; command
.a600		20 27 91	jsr $9127			jsr 	CheckComma
.a603		e8		inx				inx
.a604		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; X
.a607		20 27 91	jsr $9127			jsr 	CheckComma
.a60a		e8		inx				inx
.a60b		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; Y
.a60e		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a610		4a		lsr a				lsr 	a
.a611		d0 12		bne $a625			bne 	_GfxError
.a613		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a615		b0 0e		bcs $a625			bcs 	_GfxError 					; bit 7 should have been zero
.a617		5a		phy				phy 								; save pos
.a618		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a61a		a6 59		ldx $59				ldx 	NSMantissa0+1
.a61c		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a61e		20 7b 80	jsr $807b			jsr 	GXGraphicDraw
.a621		b0 02		bcs $a625			bcs 	_GfxError
.a623		7a		ply				ply 								; restore pos and exit.
.a624		60		rts				rts
.a625						_GfxError:
.a625		4c 06 a2	jmp $a206			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a628						UnaryHit:
.a628		fa		plx				plx
.a629		a9 36		lda #$36			lda 	#zTemp0
.a62b		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a62e		20 27 91	jsr $9127			jsr 	CheckComma
.a631		e8		inx				inx
.a632		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a635		20 1f 91	jsr $911f			jsr		CheckRightBracket
.a638		ca		dex				dex 								; fix back up again.
.a639		da		phx				phx 								; save X/Y
.a63a		5a		phy				phy
.a63b		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a63d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a63f		aa		tax				tax
.a640		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a642		20 7b 80	jsr $807b			jsr 	GXGraphicDraw 				; calculate result
.a645		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a646		7a		ply				ply 								; restore XY
.a647		fa		plx				plx
.a648		20 85 a0	jsr $a085			jsr 	NSMSetByte 					; return the hit result
.a64b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a64c						PaletteCommand:
.a64c		a2 00		ldx #$00			ldx 	#0
.a64e		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; colour
.a651		20 27 91	jsr $9127			jsr 	CheckComma
.a654		e8		inx				inx
.a655		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; r
.a658		20 27 91	jsr $9127			jsr 	CheckComma
.a65b		e8		inx				inx
.a65c		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; g
.a65f		20 27 91	jsr $9127			jsr 	CheckComma
.a662		e8		inx				inx
.a663		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; b
.a666		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a668		85 36		sta $36				sta 	zTemp0
.a66a		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a66c		85 37		sta $37				sta 	zTemp0+1
.a66e		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a670		26 37		rol $37				rol	 	zTemp0+1
.a672		06 36		asl $36				asl 	zTemp0
.a674		26 37		rol $37				rol	 	zTemp0+1
.a676		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a678		85 01		sta $01				sta 	1
.a67a		5a		phy				phy
.a67b		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a67d		92 36		sta ($36)			sta 	(zTemp0)
.a67f		a0 01		ldy #$01			ldy 	#1
.a681		a5 5a		lda $5a				lda 	NSMantissa0+2
.a683		91 36		sta ($36),y			sta 	(zTemp0),y
.a685		a5 59		lda $59				lda 	NSMantissa0+1
.a687		c8		iny				iny
.a688		91 36		sta ($36),y			sta 	(zTemp0),y
.a68a		7a		ply				ply
.a68b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a68c						XLoadCommand:
.a68c		20 91 8b	jsr $8b91			jsr 	NewProgram
.a68f		20 67 83	jsr $8367			jsr 	BackloadProgram
.a692		4c 26 84	jmp $8426			jmp 	WarmStart
.a695						XGoCommand:
.a695		20 91 8b	jsr $8b91			jsr 	NewProgram
.a698		20 67 83	jsr $8367			jsr 	BackloadProgram
.a69b		4c 0f 8d	jmp $8d0f			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a69e						UnaryEvent:
.a69e		fa		plx				plx
.a69f		20 38 a7	jsr $a738			jsr 	TimerToStackX 				; timer in +0
.a6a2		e8		inx				inx  								; put reference into +1
.a6a3		20 86 9a	jsr $9a86			jsr 	EvaluateTerm
.a6a6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a6a8		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a6aa		d0 4c		bne $a6f8			bne 	_UEType
.a6ac		e8		inx				inx 								; put the step in +2
.a6ad		20 27 91	jsr $9127			jsr 	CheckComma
.a6b0		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger
.a6b3		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.a6b6		ca		dex				dex
.a6b7		ca		dex				dex
.a6b8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a6ba		85 36		sta $36				sta 	zTemp0
.a6bc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a6be		85 37		sta $37				sta 	zTemp0+1
.a6c0		5a		phy				phy
.a6c1		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a6c3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6c5		30 2d		bmi $a6f4			bmi 	_UEFalse 					; exit if signed.
.a6c7		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a6c9		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6cb		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6cd		c8		iny				iny
.a6ce		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6d0		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6d2		c8		iny				iny
.a6d3		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6d5		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6d7		90 1b		bcc $a6f4			bcc 	_UEFalse 					; no, return FALSE.
.a6d9		18		clc				clc
.a6da		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a6dc		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6de		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a6e0		91 36		sta ($36),y			sta 	(zTemp0),y
.a6e2		c8		iny				iny
.a6e3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6e5		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a6e7		91 36		sta ($36),y			sta 	(zTemp0),y
.a6e9		c8		iny				iny
.a6ea		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6ec		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a6ee		91 36		sta ($36),y			sta 	(zTemp0),y
.a6f0		7a		ply				ply
.a6f1		4c a5 91	jmp $91a5			jmp 	ReturnTrue
.a6f4						_UEFalse:
.a6f4		7a		ply				ply 								; restore Y
.a6f5		4c b0 91	jmp $91b0			jmp 	ReturnFalse 				; and return False
.a6f8						_UEType:
.a6f8		4c 0b a2	jmp $a20b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a6fb						UnaryJoyX:
.a6fb		18		clc				clc
.a6fc		80 01		bra $a6ff			bra 	JoyMain
.a6fe						UnaryJoyY:
.a6fe		38		sec				sec
.a6ff						JoyMain:
.a6ff		fa		plx				plx 								; get pos
.a700		08		php				php 								; save carry (set for Y)
.a701		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a704		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.a707		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a70a		28		plp				plp
.a70b		b0 02		bcs $a70f			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a70d		4a		lsr a				lsr 	a
.a70e		4a		lsr a				lsr 	a
.a70f						_JMNoShift:
.a70f		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a710		b0 07		bcs $a719			bcs 	JMIsLeft
.a712		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a713		b0 07		bcs $a71c			bcs 	JMIsRight
.a715		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; zero result
.a718		60		rts				rts
.a719						JMIsLeft:
.a719		4c a5 91	jmp $91a5			jmp 	ReturnTrue
.a71c						JMIsRight:
.a71c		a9 01		lda #$01			lda 	#1
.a71e		20 85 a0	jsr $a085			jsr 	NSMSetByte
.a721		60		rts				rts
.a722						UnaryJoyB:
.a722		fa		plx				plx 								; get pos
.a723		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a726		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.a729		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a72c		29 10		and #$10			and 	#$10
.a72e		d0 e9		bne $a719			bne 	JMIsLeft
.a730		20 83 a0	jsr $a083			jsr 	NSMSetZero
.a733		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a734						UnaryTimer:
.a734		fa		plx				plx
.a735		20 1f 91	jsr $911f			jsr 	CheckRightBracket
.a738						TimerToStackX:
.a738		20 83 a0	jsr $a083			jsr 	NSMSetZero 					; zero result
.a73b		64 01		stz $01				stz 	1 							; access I/O
.a73d		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a740		95 58		sta $58,x			sta 	NSMantissa0,x
.a742		ad 5a d6	lda $d65a			lda 	$D65A
.a745		95 60		sta $60,x			sta 	NSMantissa1,x
.a747		ad 5b d6	lda $d65b			lda 	$D65B
.a74a		95 68		sta $68,x			sta 	NSMantissa2,x
.a74c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a74d						MemoryDeleteLine:
.a74d		20 6c a7	jsr $a76c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a750		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a752		a8		tay				tay
.a753						_MDDLLoop:
.a753		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a755		92 30		sta ($30)			sta 	(codePtr)
.a757		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a759		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a75b		d0 07		bne $a764			bne 	_MDLDLNext
.a75d		a5 31		lda $31				lda 	codePtr+1
.a75f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a761		d0 01		bne $a764			bne 	_MDLDLNext
.a763						_MDDLExit:
.a763		60		rts				rts
.a764						_MDLDLNext:
.a764		e6 30		inc $30				inc 	codePtr						; next byte
.a766		d0 eb		bne $a753			bne 	_MDDLLoop
.a768		e6 31		inc $31				inc 	codePtr+1
.a76a		80 e7		bra $a753			bra 	_MDDLLoop
.a76c						IMemoryFindEnd:
.a76c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a76e		85 3a		sta $3a				sta 	0+zTemp2
.a770		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a772		85 3b		sta $3b				sta 	1+zTemp2
.a774						_MDLFELoop:
.a774		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a776		f0 0b		beq $a783			beq 	_MDLFEExit
.a778		18		clc				clc
.a779		65 3a		adc $3a				adc 	zTemp2
.a77b		85 3a		sta $3a				sta 	zTemp2
.a77d		90 f5		bcc $a774			bcc 	_MDLFELoop
.a77f		e6 3b		inc $3b				inc 	zTemp2+1
.a781		80 f1		bra $a774			bra 	_MDLFELoop
.a783						_MDLFEExit:
.a783		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a784						MemoryInsertLine:
.a784		08		php				php
.a785		20 6c a7	jsr $a76c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a788		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a78a		1a		inc a				inc 	a
.a78b		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a78d		b0 36		bcs $a7c5			bcs 	_MDLIError 					; no, fail.
.a78f		28		plp				plp 								; do at a specific point or the end ?
.a790		90 08		bcc $a79a			bcc 	_MDLIFound 					; if specific point already set.
.a792		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a794		85 30		sta $30				sta 	codePtr 					; end.
.a796		a5 3b		lda $3b				lda 	zTemp2+1
.a798		85 31		sta $31				sta 	codePtr+1
.a79a						_MDLIFound:
.a79a		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a79d		a8		tay				tay
.a79e						_MDLIInsert:
.a79e		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a7a0		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a7a2		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a7a4		c5 3a		cmp $3a				cmp 	zTemp2
.a7a6		d0 06		bne $a7ae			bne 	_MDLINext
.a7a8		a5 31		lda $31				lda 	codePtr+1
.a7aa		c5 3b		cmp $3b				cmp 	zTemp2+1
.a7ac		f0 0a		beq $a7b8			beq 	_MDLIHaveSpace
.a7ae						_MDLINext:
.a7ae		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a7b0		d0 02		bne $a7b4			bne 	_MDLINoBorrow
.a7b2		c6 3b		dec $3b				dec 	zTemp2+1
.a7b4						_MDLINoBorrow:
.a7b4		c6 3a		dec $3a				dec 	zTemp2
.a7b6		80 e6		bra $a79e			bra 	_MDLIInsert
.a7b8						_MDLIHaveSpace:
.a7b8		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a7bb		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a7bc						_MDLICopy:
.a7bc		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a7bf		91 30		sta ($30),y			sta 	(codePtr),y
.a7c1		88		dey				dey
.a7c2		10 f8		bpl $a7bc			bpl 	_MDLICopy
.a7c4		60		rts				rts
.a7c5						_MDLIError:
.a7c5		a9 06		lda #$06		lda	#6
.a7c7		4c 38 91	jmp $9138		jmp	ErrorHandler
.a7ca						MDLAppendLine:
.a7ca		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a7cc		85 36		sta $36				sta 	zTemp0
.a7ce		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7d0		85 38		sta $38				sta 	0+zTemp1
.a7d2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7d4		85 39		sta $39				sta 	1+zTemp1
.a7d6		b2 38		lda ($38)			lda 	(zTemp1)
.a7d8		d0 0a		bne $a7e4			bne 	_MDLANoInitialise
.a7da		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7dc		8d 68 06	sta $0668			sta 	0+AppendPointer
.a7df		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7e1		8d 69 06	sta $0669			sta 	1+AppendPointer
.a7e4						_MDLANoInitialise:
.a7e4		18		clc				clc
.a7e5		ad 68 06	lda $0668			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7e8		85 38		sta $38				sta 	zTemp1
.a7ea		72 36		adc ($36)			adc 	(zTemp0)
.a7ec		8d 68 06	sta $0668			sta 	AppendPointer
.a7ef		ad 69 06	lda $0669			lda 	AppendPointer+1
.a7f2		85 39		sta $39				sta 	zTemp1+1
.a7f4		69 00		adc #$00			adc 	#0
.a7f6		8d 69 06	sta $0669			sta 	AppendPointer+1
.a7f9		a0 00		ldy #$00			ldy 	#0
.a7fb						_MDLACopy:
.a7fb		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7fd		91 38		sta ($38),y			sta 	(zTemp1),y
.a7ff		c8		iny				iny
.a800		98		tya				tya
.a801		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a803		d0 f6		bne $a7fb			bne 	_MDLACopy
.a805		a9 00		lda #$00			lda 	#0 							; end of program.
.a807		91 38		sta ($38),y			sta 	(zTemp1),y
.a809		60		rts				rts
.0668						AppendPointer:
>0668								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a80a						MemoryNew:
.a80a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a80c		85 30		sta $30				sta 	codePtr
.a80e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a810		85 31		sta $31				sta 	codePtr+1
.a812		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a814		92 30		sta ($30)			sta 	(codePtr)
.a816		60		rts				rts
.a817						MemoryInline:
.a817		98		tya				tya 								; put address into stack,x
.a818		18		clc				clc  								; get the offset, add codePtr
.a819		65 30		adc $30				adc 	codePtr
.a81b		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a81d		a5 31		lda $31				lda 	codePtr+1
.a81f		69 00		adc #$00			adc 	#0
.a821		95 60		sta $60,x			sta 	NSMantissa1,x
.a823		74 68		stz $68,x			stz 	NSMantissa2,x
.a825		74 70		stz $70,x			stz 	NSMantissa3,x
.a827		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a828						MemorySearch:
.a828		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a82a		86 37		stx $37				stx 	zTemp0+1
.a82c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a82e		85 30		sta $30				sta 	codePtr
.a830		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a832		85 31		sta $31				sta 	codePtr+1
.a834						_MTAXLoop:
.a834		b2 30		lda ($30)			lda 	(codePtr)
.a836		18		clc				clc
.a837		f0 21		beq $a85a			beq 	_MTAXExit 					; reached end, exit with CC.
.a839		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a83b		b1 30		lda ($30),y			lda 	(codePtr),y
.a83d		38		sec				sec
.a83e		e5 36		sbc $36				sbc 	zTemp0
.a840		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a842		c8		iny				iny 								; do the MSB
.a843		b1 30		lda ($30),y			lda 	(codePtr),y
.a845		e5 37		sbc $37				sbc 	zTemp0+1
.a847		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a849		f0 0f		beq $a85a			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a84b		b0 0d		bcs $a85a			bcs 	_MTAXExit 					; current < required exit
.a84d		18		clc				clc
.a84e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a850		65 30		adc $30				adc 	codePtr
.a852		85 30		sta $30				sta 	codePtr
.a854		90 02		bcc $a858			bcc 	_CREExit
.a856		e6 31		inc $31				inc 	codePtr+1 					; carry
.a858						_CREExit:
.a858		80 da		bra $a834			bra 	_MTAXLoop
.a85a						_MTAXExit:
.a85a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a85b						UpdateFont:
.a85b		a5 01		lda $01				lda 	1 							; save position
.a85d		48		pha				pha
.a85e		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a860		85 01		sta $01				sta 	1
.a862		a9 89		lda #$89			lda 	#((FontBinary) & $FF)
.a864		85 36		sta $36				sta 	0+zTemp0
.a866		a9 a8		lda #$a8			lda 	#((FontBinary) >> 8)
.a868		85 37		sta $37				sta 	1+zTemp0
.a86a		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a86c		85 38		sta $38				sta 	0+zTemp1
.a86e		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a870		85 39		sta $39				sta 	1+zTemp1
.a872						_UFCopy1:
.a872		a0 00		ldy #$00			ldy 	#0
.a874						_UFCopy2:
.a874		b1 36		lda ($36),y			lda 	(zTemp0),y
.a876		91 38		sta ($38),y			sta 	(zTemp1),y
.a878		c8		iny				iny
.a879		d0 f9		bne $a874			bne 	_UFCopy2
.a87b		e6 37		inc $37				inc 	zTemp0+1
.a87d		e6 39		inc $39				inc 	zTemp1+1
.a87f		a5 39		lda $39				lda 	zTemp1+1
.a881		c9 c8		cmp #$c8			cmp 	#$C8
.a883		d0 ed		bne $a872			bne 	_UFCopy1
.a885		68		pla				pla 								; restore.
.a886		85 01		sta $01				sta 	1
.a888		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a889						FontBinary:
>a889		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a891		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a8a1		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a8b1		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a8c1		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a8d1		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a8e1		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a8f1		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a901		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a911		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a921		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a931		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a941		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a951		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a961		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a971		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a981		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a991		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a9a1		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a9b1		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a9c1		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a9d1		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a9e1		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a9f1		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>aa01		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aa11		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aa21		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aa31		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aa41		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aa51		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aa61		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aa71		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>aa81		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>aa91		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>aaa1		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>aab1		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>aac1		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>aad1		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>aae1		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aaf1		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ab01		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ab11		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ab21		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ab31		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ab41		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ab51		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ab61		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ab71		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ab81		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ab91		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aba1		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>abb1		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>abc1		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>abd1		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>abe1		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>abf1		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ac01		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ac11		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ac21		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ac31		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ac41		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ac51		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ac61		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ac71		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ac81		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ac91		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aca1		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>acb1		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>acc1		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>acd1		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ace1		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>acf1		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ad01		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ad11		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ad21		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ad31		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ad41		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ad51		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ad61		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ad71		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ad81		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ad91		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ada1		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>adb1		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>adc1		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>add1		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ade1		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>adf1		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ae01		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ae11		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ae21		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ae31		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ae41		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ae51		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ae61		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ae71		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ae81		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ae91		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>aea1		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>aeb1		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>aec1		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>aed1		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>aee1		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>aef1		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>af01		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>af11		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>af21		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>af31		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>af41		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>af51		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>af61		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>af71		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>af81		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>af91		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>afa1		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>afb1		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>afc1		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>afd1		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>afe1		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>aff1		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b001		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b011		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b021		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b031		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b041		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b051		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b061		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b071		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b081		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b089						PingCommand:
.b089		5a		phy				phy 								; save pos
.b08a		a9 01		lda #$01			lda 	#1 						; push channel.
.b08c		48		pha				pha
.b08d		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b08f		a2 03		ldx #$03			ldx 	#3 						; length
.b091		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b093		80 24		bra $b0b9			bra 	SoundEffectCommand
.b095						ZapCommand:
.b095		5a		phy				phy 								; save pos
.b096		a9 01		lda #$01			lda 	#1 						; push channel.
.b098		48		pha				pha
.b099		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b09b		a2 05		ldx #$05			ldx 	#5 						; length
.b09d		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.b09f		80 18		bra $b0b9			bra 	SoundEffectCommand
.b0a1						ShootCommand:
.b0a1		5a		phy				phy 								; save pos
.b0a2		a9 03		lda #$03			lda 	#3 						; push channel.
.b0a4		48		pha				pha
.b0a5		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b0a7		a2 02		ldx #$02			ldx 	#2 						; length
.b0a9		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b0ab		80 0c		bra $b0b9			bra 	SoundEffectCommand
.b0ad						Explode:
.b0ad		5a		phy				phy 								; save pos
.b0ae		a9 03		lda #$03			lda 	#3 						; push channel.
.b0b0		48		pha				pha
.b0b1		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b0b3		a2 05		ldx #$05			ldx 	#5 						; length
.b0b5		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b0b7		80 00		bra $b0b9			bra 	SoundEffectCommand
.b0b9						SoundEffectCommand:
.b0b9		8d 6a 06	sta $066a			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b0bc		9c 6b 06	stz $066b			stz 	SoundCommandBlock+1
.b0bf		a9 0f		lda #$0f			lda 	#15
.b0c1		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2
.b0c4		8e 6d 06	stx $066d			stx 	SoundCommandBlock+3
.b0c7		8c 6e 06	sty $066e			sty 	SoundCommandBlock+4
.b0ca		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b0cd		68		pla				pla
.b0ce		09 10		ora #$10			ora 	#$10  						; execute command $11
.b0d0		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b0d2		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b0d4		20 85 80	jsr $8085			jsr 	SNDCommand
.b0d7		7a		ply				ply
.b0d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b0d9						UnaryPlaying:
.b0d9		fa		plx				plx
.b0da		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; get channel #
.b0dd		48		pha				pha
.b0de		20 1f 91	jsr $911f			jsr		CheckRightBracket
.b0e1		68		pla				pla
.b0e2		c9 04		cmp #$04			cmp 	#4
.b0e4		b0 0c		bcs $b0f2			bcs 	_UPNotPlaying
.b0e6		09 20		ora #$20			ora 	#$20 						; query playing ?
.b0e8		20 85 80	jsr $8085			jsr 	SNDCommand
.b0eb		c9 00		cmp #$00			cmp 	#0
.b0ed		f0 03		beq $b0f2			beq 	_UPNotPlaying
.b0ef		4c a5 91	jmp $91a5			jmp 	ReturnTrue
.b0f2						_UPNotPlaying:
.b0f2		4c b0 91	jmp $91b0			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b0f5						SoundCommand:
.b0f5		b1 30		lda ($30),y			lda 	(codePtr),y
.b0f7		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.b0f9		d0 09		bne $b104			bne 	_SNDMain
.b0fb		c8		iny				iny 								; skip OFF
.b0fc		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b0fe		5a		phy				phy
.b0ff		20 85 80	jsr $8085			jsr 	SNDCommand
.b102		7a		ply				ply
.b103		60		rts				rts
.b104						_SNDMain:
.b104		a2 00		ldx #$00			ldx 	#0
.b106		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; channel
.b109		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b10b		b0 4b		bcs $b158			bcs 	_SndError
.b10d		e8		inx				inx 								; do the rest in slot 1.
.b10e		20 27 91	jsr $9127			jsr 	CheckComma
.b111		20 03 a0	jsr $a003			jsr 	Evaluate16BitInteger 		; Pitch
.b114		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b116		c9 10		cmp #$10			cmp 	#16
.b118		b0 3e		bcs $b158			bcs 	_SndError
.b11a		8d 6b 06	sta $066b			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b11d		b5 58		lda $58,x			lda 	NSMantissa0,x
.b11f		8d 6a 06	sta $066a			sta 	SoundCommandBlock
.b122		20 27 91	jsr $9127			jsr 	CheckComma
.b125		20 1e a0	jsr $a01e			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b128		8d 6d 06	sta $066d			sta 	SoundCommandBlock+3
.b12b		a9 0f		lda #$0f			lda 	#15
.b12d		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b130		9c 6e 06	stz $066e			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b133		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b136		b1 30		lda ($30),y			lda 	(codePtr),y
.b138		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b13a		d0 0e		bne $b14a			bne 	_SNDPlay
.b13c		c8		iny				iny
.b13d		20 0d a0	jsr $a00d			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b140		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b142		8d 6e 06	sta $066e			sta 	SoundCommandBlock+4
.b145		b5 60		lda $60,x			lda 	NSMantissa1,x
.b147		8d 6f 06	sta $066f			sta 	SoundCommandBlock+5
.b14a						_SNDPlay:
.b14a		5a		phy				phy
.b14b		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b14d		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b14f		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b151		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b153		20 85 80	jsr $8085			jsr 	SNDCommand
.b156		7a		ply				ply
.b157		60		rts				rts
.b158						_SndError:
.b158		4c 06 a2	jmp $a206			jmp 	RangeError
.066a						SoundCommandBlock:
>066a								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b15b						StackPushByte:
.b15b		48		pha				pha 								; save byte on stack
.b15c		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b15e		d0 08		bne $b168			bne 	_SPBNoBorrow
.b160		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b162		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b164		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b166		90 06		bcc $b16e			bcc 	_SPBMemory
.b168						_SPBNoBorrow:
.b168		c6 34		dec $34				dec 	basicStack
.b16a		68		pla				pla 								; get back and write
.b16b		92 34		sta ($34)			sta 	(basicStack)
.b16d		60		rts				rts
.b16e						_SPBMemory:
.b16e		a9 12		lda #$12		lda	#18
.b170		4c 38 91	jmp $9138		jmp	ErrorHandler
.b173						StackPopByte:
.b173		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b175		e6 34		inc $34				inc 	basicStack
.b177		d0 02		bne $b17b			bne 	_SPBNoCarry
.b179		e6 35		inc $35				inc 	basicStack+1
.b17b						_SPBNoCarry:
.b17b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b17c						StackOpen:
.b17c		48		pha				pha 								; save frame byte
.b17d		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b17f		0a		asl a				asl 	a 							; claim twice this for storage
.b180		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b182		38		sec				sec 								; so basically subtracting from
.b183		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b185		85 34		sta $34				sta 	basicStack
.b187		b0 09		bcs $b192			bcs 	_SONoBorrow
>b189		db						.byte 	$DB 						; causes a break in the emulator
.b18a		c6 35		dec $35				dec 	basicStack+1
.b18c		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b18e		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b190		90 04		bcc $b196			bcc 	_SOMemory
.b192						_SONoBorrow:
.b192		68		pla				pla 								; get marker back and write at TOS
.b193		92 34		sta ($34)			sta 	(basicStack)
.b195		60		rts				rts
.b196						_SOMemory:
.b196		a9 12		lda #$12		lda	#18
.b198		4c 38 91	jmp $9138		jmp	ErrorHandler
.b19b						StackClose:
.b19b		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b19d		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b19f		0a		asl a				asl 	a 							; claim twice this.
.b1a0		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b1a2		85 34		sta $34				sta 	basicStack
.b1a4		90 02		bcc $b1a8			bcc 	_SCExit
.b1a6		e6 35		inc $35				inc 	basicStack+1
.b1a8						_SCExit:
.b1a8		60		rts				rts
.b1a9						StackCheckFrame:
.b1a9		48		pha				pha
.b1aa						_StackRemoveLocals:
.b1aa		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b1ac		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b1ae		b0 05		bcs $b1b5			bcs 	_SCNoLocal
.b1b0		20 40 8b	jsr $8b40			jsr 	LocalPopValue 				; restore the local value
.b1b3		80 f5		bra $b1aa			bra 	_StackRemoveLocals 			; gr round again
.b1b5						_SCNoLocal:
.b1b5		68		pla				pla 								; get the frame check.
.b1b6		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b1b8		29 f0		and #$f0			and 	#$F0 						; check type bits
.b1ba		d0 01		bne $b1bd			bne 	_SCFError 					; different, we have structures mixed up
.b1bc		60		rts				rts
.b1bd						_SCFError:
.b1bd		8a		txa				txa 								; report error X
.b1be		4c 38 91	jmp $9138			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b1c1						STKSaveCodePosition:
.b1c1		5a		phy				phy
.b1c2		98		tya				tya 								; save Y
.b1c3		a0 05		ldy #$05			ldy 	#5
.b1c5		91 34		sta ($34),y			sta 	(basicStack),y
.b1c7		88		dey				dey 								; save Code Pointer
.b1c8						_STKSaveLoop:
.b1c8		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b1cb		91 34		sta ($34),y			sta 	(basicStack),y
.b1cd		88		dey				dey
.b1ce		d0 f8		bne $b1c8			bne 	_STKSaveLoop
.b1d0		7a		ply				ply
.b1d1		60		rts				rts
.b1d2						STKLoadCodePosition:
.b1d2		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b1d4						_STKLoadLoop:
.b1d4		b1 34		lda ($34),y			lda 	(basicStack),y
.b1d6		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b1d9		c8		iny				iny
.b1da		c0 05		cpy #$05			cpy 	#5
.b1dc		d0 f6		bne $b1d4			bne 	_STKLoadLoop
.b1de		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b1e0		a8		tay				tay
.b1e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b1e2						StackReset:
.b1e2		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b1e4		85 34		sta $34				sta 	0+basicStack
.b1e6		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b1e8		85 35		sta $35				sta 	1+basicStack
.b1ea		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b1ec		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b1ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1ef						StringConcrete:
.b1ef		5a		phy				phy 								; save position on stack
.b1f0		20 72 9c	jsr $9c72			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1f3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1f5		85 38		sta $38				sta 	zTemp1
.b1f7		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1f9		85 39		sta $39				sta 	zTemp1+1
.b1fb		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1fd						_SALength:
.b1fd		c8		iny				iny
.b1fe		b1 38		lda ($38),y			lda 	(zTemp1),y
.b200		d0 fb		bne $b1fd			bne 	_SALength
.b202		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b204		b0 3d		bcs $b243			bcs 	_SALengthError
.b206		98		tya				tya 				 				; length of the new string
.b207		18		clc				clc
.b208		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b20a		90 02		bcc $b20e			bcc 	_SAHaveLength
.b20c		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b20e						_SAHaveLength:
.b20e		48		pha				pha 								; save length.
.b20f		38		sec				sec
.b210		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b212		6d 0e 04	adc $040e			adc 	stringMemory
.b215		8d 0e 04	sta $040e			sta 	stringMemory
.b218		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b21a		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b21c		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b21e		6d 0f 04	adc $040f			adc 	stringMemory+1
.b221		8d 0f 04	sta $040f			sta 	stringMemory+1
.b224		85 3b		sta $3b				sta 	zTemp2+1
.b226		95 60		sta $60,x			sta 	NSMantissa1,x
.b228		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b229		38		sec				sec
.b22a		e9 03		sbc #$03			sbc 	#3
.b22c		92 3a		sta ($3a)			sta 	(zTemp2)
.b22e		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b230		a0 01		ldy #$01			ldy 	#1
.b232		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b234						_SACopyNewString:
.b234		a0 00		ldy #$00			ldy 	#0
.b236						_SACopyNSLoop:
.b236		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b238		c8		iny				iny 								; write two on in string storage
.b239		c8		iny				iny
.b23a		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b23c		88		dey				dey 								; this makes it one one.
.b23d		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b23f		d0 f5		bne $b236			bne 	_SACopyNSLoop
.b241		7a		ply				ply
.b242		60		rts				rts
.b243						_SALengthError:
.b243		a9 09		lda #$09		lda	#9
.b245		4c 38 91	jmp $9138		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b248						StringSystemInitialise:
.b248		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b24a		8d 0e 04	sta $040e			sta 	0+stringMemory
.b24d		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b24f		8d 0f 04	sta $040f			sta 	1+stringMemory
.b252		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b255		60		rts				rts
.b256						StringSpaceInitialise:
.b256		20 72 9c	jsr $9c72			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b259		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b25b		8d 10 04	sta $0410			sta 	stringInitialised
.b25e		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b261		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b264		ad 0f 04	lda $040f			lda 	stringMemory+1
.b267		3a		dec a				dec 	a
.b268		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b26b		60		rts				rts
.b26c						StringTempAllocate:
.b26c		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b26e		b0 30		bcs $b2a0			bcs 	_STALength
.b270		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b273		30 05		bmi $b27a			bmi 	_STAAllocate
.b275		48		pha				pha 								; save value to subtract.
.b276		20 56 b2	jsr $b256			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b279		68		pla				pla 								; restore it
.b27a						_STAAllocate:
.b27a		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b27c		18		clc				clc  								; deliberate allows one more
.b27d		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b280		8d 11 04	sta $0411			sta 	stringTempPointer
.b283		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b285		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b287		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b28a		69 ff		adc #$ff			adc 	#$FF
.b28c		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b28f		85 3d		sta $3d				sta 	zsTemp+1
.b291		95 60		sta $60,x			sta 	NSMantissa1,x
.b293		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b295		74 70		stz $70,x			stz 	NSMantissa3,x
.b297		a9 10		lda #$10			lda 	#NSTString
.b299		95 50		sta $50,x			sta 	NSStatus,x
.b29b		a9 00		lda #$00			lda 	#0 							; clear the target string
.b29d		92 3c		sta ($3c)			sta 	(zsTemp)
.b29f		60		rts				rts
.b2a0						_STALength:
.b2a0		a9 09		lda #$09		lda	#9
.b2a2		4c 38 91	jmp $9138		jmp	ErrorHandler
.b2a5						StringTempWrite:
.b2a5		48		pha				pha
.b2a6		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b2a8		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b2aa		d0 02		bne $b2ae			bne 	_STWNoCarry
.b2ac		e6 3d		inc $3d				inc 	zsTemp+1
.b2ae						_STWNoCarry:
.b2ae		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b2b0		92 3c		sta ($3c)			sta 	(zsTemp)
.b2b2		68		pla				pla
.b2b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b2b4						Command_VERIFY:
.b2b4		20 db 9f	jsr $9fdb			jsr 	EvaluateString 				; file name to verify
.b2b7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b2b9		a5 36		lda $36				lda 	zTemp0
.b2bb		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b2be		b0 4b		bcs $b30b			bcs 	_CVErrorHandler 			; error, so fail.
.b2c0		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.b2c3		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b2c6		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.b2c9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b2cb		85 30		sta $30				sta 	codePtr
.b2cd		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2cf		85 31		sta $31				sta 	codePtr+1
.b2d1						_CVLoop:
.b2d1		20 88 8a	jsr $8a88			jsr 	LoadReadLine 				; get next line.
.b2d4		f0 27		beq $b2fd			beq 	_CVExit 					; end, exit.
.b2d6		20 a3 80	jsr $80a3			jsr 	TKTokeniseLine 				; tokenise the line.
.b2d9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b2dc		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b2df		f0 f0		beq $b2d1			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b2e1		a0 00		ldy #$00			ldy 	#0 							; start compare
.b2e3						_CVCompareLoop:
.b2e3		b1 30		lda ($30),y			lda 	(codePtr),y
.b2e5		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b2e8		d0 1c		bne $b306			bne 	_CVCompareError
.b2ea		c8		iny				iny
.b2eb		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b2ee		d0 f3		bne $b2e3			bne 	_CVCompareLoop
.b2f0		18		clc				clc
.b2f1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b2f3		65 30		adc $30				adc 	codePtr
.b2f5		85 30		sta $30				sta 	codePtr
.b2f7		90 02		bcc $b2fb			bcc 	_CREExit
.b2f9		e6 31		inc $31				inc 	codePtr+1 					; carry
.b2fb						_CREExit:
.b2fb		80 d4		bra $b2d1			bra 	_CVLoop
.b2fd						_CVExit:
.b2fd		ad 5e 06	lda $065e			lda 	CurrentFileStream
.b300		20 71 80	jsr $8071			jsr 	KNLCloseFile
.b303		4c 5d 8a	jmp $8a5d			jmp 	CLComplete
.b306						_CVCompareError:
.b306		a9 1b		lda #$1b		lda	#27
.b308		4c 38 91	jmp $9138		jmp	ErrorHandler
.b30b						_CVErrorHandler:
.b30b		4c 7a 8a	jmp $8a7a			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b30e						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 72 06	lda $0672			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 71 06	sty $0671			sty 	EXTColumn
.c022	a022	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 70 06	inc $0670			inc 	EXTRow  					; bump row
.c02a	a02a	9c 71 06	stz $0671			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 70 06	lda $0670			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 74 06	cmp $0674			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 71 06	dec $0671			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 71 06	stz $0671			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 70 06	dec $0670			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 70 06	lda $0670			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 70 06	dec $0670			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 73 06	sbc $0673			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 71 06	sty $0671			sty 	EXTColumn
.c081	a081	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 71 06	sty $0671			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 74 06	lda $0674			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 70 06	cmp $0670			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 70 06	inc $0670			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 71 06	lda $0671			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 71 06	sta $0671			sta 	EXTColumn
.c0be	a0be	cd 73 06	cmp $0673			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 71 06	dec $0671			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 72 06	and $0672			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 72 06	sta $0672			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 72 06	ora $0672			ora 	EXTTextColour
.c131	a131	8d 72 06	sta $0672			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 72 06	lda $0672			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 72 06	lda $0672			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 70 06	stz $0670			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 71 06	stz $0671			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 71 06	lda $0671			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 70 06	lda $0670			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 e5 bb	jsr $bbe5			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 71 06	lda $0671			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 71 06	ldy $0671			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 71 06	ldy $0671			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 71 06	cpy $0671			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 73 06	lda $0673			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0670						EXTRow:
>0670								.fill 	1
.0671						EXTColumn:
>0671								.fill 	1
.0672						EXTTextColour:
>0672								.fill 	1
.0673						EXTScreenWidth:
>0673								.fill 	1
.0674						EXTScreenHeight:
>0674								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 72 06	sta $0672			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 73 06	sta $0673			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 74 06	sta $0674			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 70 06	lda $0670			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0675						gxCurrentX:
>0675								.fill 	2
.0677						gxCurrentY:
>0677								.fill 	2
.0679						gxLastX:
>0679								.fill 	2
.067b						gxLastY:
>067b								.fill 	2
.067d						gxX0:
>067d								.fill 	2
.067f						gxY0:
>067f								.fill 	2
.0681						gxX1:
>0681								.fill 	2
.0683						gxY1:
>0683								.fill 	2
.0685						gxSpritesOn:
>0685								.fill 	1
.0686						gxBitmapsOn:
>0686								.fill 	1
.0687						gxBasePage:
>0687								.fill 	1
.0688						gxSpritePage:
>0688								.fill 	1
.0689						gxHeight:
>0689								.fill 	1
.068a						gxMode:
>068a								.fill 	1
.068b						gxColour:
>068b								.fill 	1
.068c						gxEORValue:
>068c								.fill 	1
.068d						gxANDValue:
>068d								.fill 	1
.068e						gxOriginalLUTValue:
>068e								.fill 	1
.068f						gxOffset:
>068f								.fill 	1
.0690						GSCurrentSpriteID:
>0690								.fill 	1
.0691						GSCurrentSpriteAddr:
>0691								.fill 	2
.0693						gxSpriteOffsetBase:
>0693								.fill 	2
.0695						gxSpriteLow:
>0695								.fill 	64
.06d5						gxSpriteHigh:
>06d5								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 79 06	sta $0679,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 77 06	sta $0677			sta 	gxCurrentY
.c7dc	a7dc	9c 78 06	stz $0678			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 75 06	sta $0675			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 76 06	sta $0676			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 76 06	lda $0676			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 75 06	lda $0675			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 77 06	lda $0677			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 89 06	cmp $0689			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 18 07	sta $0718			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 86 06	lda $0686			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 19 07	stz $0719			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 16 07	lda $0716			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 17 07	cmp $0717			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 17 07	lda $0717			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 16 07	lda $0716			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 17 07	ldx $0717			ldx	 	gxYCentre
.c86a	a86a	8d 17 07	sta $0717			sta 	gxYCentre
.c86d	a86d	8e 16 07	stx $0716			stx 	gxxCentre
.c870	a870	ad 19 07	lda $0719			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 19 07	sta $0719			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 18 07	lda $0718	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 19 07	lda $0719			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 17 07	lda $0717			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 16 07	lda $0716			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 18 07	lda $0718			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8b1	a8b1	8d 17 07	sta $0717			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 81 06	lda $0681,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c8c8	a8c8	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7e 06	sta $067e,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 19 07	stz $0719			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 16 07	inc $0716			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 16 07	lda $0716			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 16 07	inc $0716			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 17 07	dec $0717			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 16 07	lda $0716			lda 	gxxCentre
.c8f1	a8f1	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 19 07	dec $0719			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 83 06	lda $0683			lda 	gxY1
.c92a	a92a	ed 7f 06	sbc $067f			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 15 07	sta $0715			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 16 07	stz $0716			stz 	gxxCentre
.c93e	a93e	ad 15 07	lda $0715			lda 	gxRadius
.c941	a941	8d 17 07	sta $0717			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 81 06	lda $0681,x			lda 	gxX1,x
.c959	a959	7d 7d 06	adc $067d,x			adc 	gxX0,x
.c95c	a95c	9d 81 06	sta $0681,x			sta 	gxX1,x
.c95f	a95f	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c962	a962	7d 7e 06	adc $067e,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 82 06	sta $0682,x			sta 	gxX1+1,x
.c969	a969	7e 81 06	ror $0681,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0715						gxRadius:
>0715								.fill 	1
.0716						gxxCentre:
>0716								.fill 	1
.0717						gxYCentre:
>0717								.fill 	1
.0718						gxIsFillMode:
>0718								.fill 	1
.0719						gxYChanged:
>0719								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 89 06	lda $0689			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 87 06	adc $0687			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 87 06	cmp $0687			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 85 06	stz $0685			stz 	gxSpritesOn
.c9c6	a9c6	9c 86 06	stz $0686			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 75 06	stz $0675,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 86 06	sta $0686			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 87 06	sta $0687			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 89 06	stx $0689			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 85 06	sta $0685			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 88 06	sta $0688			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	gxzTemp0
.ca43	aa43	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	gxzTemp0+1
.ca48	aa48	8d 94 06	sta $0694			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 92 06	stz $0692			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d5 06	stz $06d5,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 86 06	lda $0686			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8f 06	ldy $068f			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8d 06	and $068d			and 	gxANDValue
.ca93	aa93	4d 8c 06	eor $068c			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7d 06	lda $067d			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 81 06	eor $0681			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7e 06	lda $067e			lda 	gxX0+1
.cab9	aab9	4d 82 06	eor $0682			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 83 06	lda $0683			lda 	gxY1
.cac0	aac0	4d 7f 06	eor $067f			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1e 07	lda $071e			lda 	gxPosition
.cac8	aac8	6d 1f 07	adc $071f			adc 	gxAdjust
.cacb	aacb	8d 1e 07	sta $071e			sta 	gxPosition
.cace	aace	9c 21 07	stz $0721			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 20 07	cmp $0720			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 21 07	dec $0721			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 20 07	sbc $0720			sbc 	gxTotal
.cadf	aadf	8d 1e 07	sta $071e			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 21 07	lda $0721			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 21 07	lda $0721			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1d 07	lda $071d			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7d 06	lda $067d			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7e 06	dec $067e			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7d 06	dec $067d			dec 	gxX0
.cb10	ab10	ce 8f 06	dec $068f			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8f 06	lda $068f			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7d 06	inc $067d			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7e 06	inc $067e			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8f 06	inc $068f			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7f 06	inc $067f			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 83 06	lda $0683			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7f 06	sbc $067f			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 1b 07	sta $071b			sta 	gxDiffY
.cb58	ab58	9c 1d 07	stz $071d			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 81 06	lda $0681			lda 	gxX1
.cb5f	ab5f	ed 7d 06	sbc $067d			sbc 	gxX0
.cb62	ab62	8d 1a 07	sta $071a			sta 	gxDiffX
.cb65	ab65	ad 82 06	lda $0682			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 1a 07	ror $071a			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 1a 07	sbc $071a			sbc 	gxDiffX
.cb78	ab78	8d 1a 07	sta $071a			sta 	gxDiffX
.cb7b	ab7b	ce 1d 07	dec $071d			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 1c 07	stz $071c			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 1b 07	lda $071b			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1f 07	sta $071f			sta 	gxAdjust
.cb87	ab87	ad 1a 07	lda $071a			lda 	gxDiffX
.cb8a	ab8a	8d 20 07	sta $0720			sta 	gxTotal
.cb8d	ab8d	ad 1b 07	lda $071b			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 1a 07	cmp $071a			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 1c 07	dec $071c			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 1a 07	lda $071a			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1f 07	sta $071f			sta 	gxAdjust
.cb9e	ab9e	ad 1b 07	lda $071b			lda 	gxDiffY
.cba1	aba1	8d 20 07	sta $0720			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 20 07	lda $0720			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1e 07	sta $071e			sta 	gxPosition
.cbab	abab	60		rts				rts
.071a						gxDiffX:
>071a								.fill 	1
.071b						gxDiffY:
>071b								.fill 	1
.071c						gxIsDiffYLarger:
>071c								.fill 	1
.071d						gxDXNegative:
>071d								.fill 	1
.071e						gxPosition:
>071e								.fill 	1
.071f						gxAdjust:
>071f								.fill 	1
.0720						gxTotal:
>0720								.fill 	1
.0721						gxAddSelect:
>0721								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 8b 06	stx $068b			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 8a 06	sta $068a			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8d 06	stz $068d			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 8b 06	ldx $068b			ldx 	gxColour
.cbbe	abbe	8e 8c 06	stx $068c			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8d 06	stx $068d			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 8c 06	stz $068c			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8d 06	lda $068d			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8d 06	sta $068d			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8f 06	ldy $068f			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8d 06	and $068d			and 	gxANDValue
.cbe8	abe8	4d 8c 06	eor $068c			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 86 06	lda $0686			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7f 06	lda $067f			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 83 06	cmp $0683			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7f 06	inc $067f			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7f 06	lda $067f			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 83 06	cmp $0683			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 81 06	lda $0681			lda		gxX1
.cc37	ac37	ed 7d 06	sbc $067d			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 82 06	lda $0682			lda 	gxX1+1
.cc3f	ac3f	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8f 06	lda $068f			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8d 06	and $068d			and 	gxANDValue
.cc5c	ac5c	4d 8c 06	eor $068c			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8d 06	and $068d			and 	gxANDValue
.cc7a	ac7a	4d 8c 06	eor $068c			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8d 06	and $068d			and 	gxANDValue
.cc92	ac92	4d 8c 06	eor $068c			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8f 06	sta $068f			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 22 07	sta $0722			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 23 07	sta $0723			sta 	gxMask 						; and mask
.ccb9	acb9	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7f 06	lda $067f			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 25 07	sty $0725			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 24 07	stx $0724			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 27 07	lda $0727			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 26 07	sta $0726			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 27 07	bit $0727			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 23 07	lda $0723			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 26 07	lda $0726			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7f 06	lda $067f			lda 	gxY0 						; off screen
.ccf2	acf2	cd 89 06	cmp $0689			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 22 07	cmp $0722			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7f 06	sta $067f			sta 	gxY0
.cd0b	ad0b	ae 26 07	ldx $0726			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 22 07	lda $0722			lda 	gxSize
.cd12	ad12	6d 7d 06	adc $067d			adc 	gxX0
.cd15	ad15	8d 7d 06	sta $067d			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7e 06	inc $067e			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 24 07	jmp ($0724)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 26 07	lda $0726			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 8a 06	bit $068a			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 23 07	lda $0723			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 27 07	lda $0727			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8d 06	and $068d			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 22 07	cmp $0722			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7f 06	inc $067f			inc 	gxY0
.cd73	ad73	60		rts				rts
.0722						gxSize:
>0722								.fill 	1
.0723						gxMask:
>0723								.fill 	1
.0724						gxAcquireVector:
>0724								.fill 	2
.0726						gxScale:
>0726								.fill 	1
.0727						gxUseMode:
>0727								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 8a 06	eor $068a			eor 	gxMode
.cd79	ad79	8d 27 07	sta $0727			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 8b 06	lda $068b			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 85 06	lda $0685			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 8a 06	eor $068a			eor 	gxMode
.cdc6	adc6	8d 27 07	sta $0727			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 28 07	lda $0728			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 88 06	lda $0688			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 29 07	ldx $0729			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	gxzTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 2b 07	adc $072b			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 2c 07	adc $072c			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 28 07	cpy $0728			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 90 06	sta $0690			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 92 06	sta $0692			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 2b 07	lda $072b			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 2c 07	lda $072c			lda 	gxSpriteOffset+1
.ce87	ae87	6d 93 06	adc $0693			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 94 06	lda $0694			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 29 07	lda $0729			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 2a 07	ora $072a			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 29 07	lda $0729			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d5 06	ora $06d5,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 85 06	lda $0685			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7d 06	adc $067d			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7e 06	lda $067e			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7f 06	adc $067f			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7e 06	lsr $067e			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7d 06	ror $067d			ror 	gxX0
.cf32	af32	4e 7d 06	lsr $067d			lsr 	gxX0
.cf35	af35	4e 7f 06	lsr $067f			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7f 06	lsr $067f			lsr 	gxY0
.cf3b	af3b	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7d 06	ora $067d			ora 	gxX0
.cf46	af46	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cf49	af49	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7f 06	ora $067f			ora 	gxY0
.cf51	af51	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8e 06	sta $068e			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8e 06	lda $068e			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7f 06	lda $067f			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7d 06	lda $067d			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8f 06	sta $068f			sta 	gxOffset
.cfa3	afa3	ad 7e 06	lda $067e			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 87 06	adc $0687			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8f 06	lda $068f			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8f 06	sta $068f			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 95 06	ora $0695,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d5 06	adc $06d5,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y
.d023	b023	fd 95 06	sbc $0695,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 88 06	lda $0688			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 2c 07	sta $072c			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 29 07	sta $0729			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 28 07	sta $0728			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 2a 07	sta $072a			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 2b 07	sta $072b			sta 	gxSpriteOffset
.d070	b070	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d073	b073	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d076	b076	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d079	b079	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0728						gxSizePixels:
>0728								.fill 	1
.0729						gxSizeBits:
>0729								.fill 	1
.072a						gxSpriteLUT:
>072a								.fill 	1
.072b						gxSpriteOffset:
>072b								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7d 06	lda $067d			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 81 06	cmp $0681			cmp 	gxX1
.d08d	b08d	ad 7e 06	lda $067e			lda 	gxX0+1
.d090	b090	ed 82 06	sbc $0682			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7f 06	lda $067f			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 83 06	cmp $0683			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7d 06	lda $067d,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7d 06	lda $067d,y			lda 	gxX0,y
.d0bd	b0bd	9d 7d 06	sta $067d,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7d 06	sta $067d,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 df 44 49 52				.text	3,$df,"DIR"            ; $86 DIR
>d337	b337	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $87 DRIVE
>d33e	b33e	03 d7 45 4e 44				.text	3,$d7,"END"            ; $88 END
>d343	b343	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $89 EXPLODE
>d34b	b34b	45
>d34c	b34c	02 96 47 4f				.text	2,$96,"GO"             ; $8a GO
>d350	b350	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8b LIST
>d356	b356	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8c LOAD
>d35c	b35c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8d NEW
>d361	b361	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8e PING
>d367	b367	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8f RESTORE
>d36f	b36f	45
>d370	b370	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $90 RUN
>d375	b375	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $91 SAVE
>d37b	b37b	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $92 SETDATE
>d383	b383	45
>d384	b384	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $93 SETTIME
>d38c	b38c	45
>d38d	b38d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $94 SHOOT
>d394	b394	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $95 SPRITES
>d39c	b39c	53
>d39d	b39d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $96 STOP
>d3a3	b3a3	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $97 VERIFY
>d3ab	b3ab	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $98 XGO
>d3b0	b3b0	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $99 XLOAD
>d3b7	b3b7	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9a ZAP
>d3bc	b3bc	ff					.text	$FF
.d3bd	b3bd					KeywordSet2:
>d3bd	b3bd	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3bf	b3bf	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3c1	b3c1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3c3	b3c3	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3c8	b3c8	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3cd	b3cd	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3d2	b3d2	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3d7	b3d7	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3dc	b3dc	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3e1	b3e1	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3e6	b3e6	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3eb	b3eb	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3f0	b3f0	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3f5	b3f5	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3fa	b3fa	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3ff	b3ff	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d404	b404	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d409	b409	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d40e	b40e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d413	b413	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d418	b418	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d41d	b41d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d422	b422	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d427	b427	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d42c	b42c	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d431	b431	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d436	b436	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d43b	b43b	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d440	b440	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d445	b445	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d44a	b44a	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d44f	b44f	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d454	b454	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d459	b459	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d45e	b45e	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d463	b463	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d468	b468	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d46d	b46d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d472	b472	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d477	b477	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d47c	b47c	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d481	b481	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d486	b486	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d48b	b48b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d490	b490	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d495	b495	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d49a	b49a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d49f	b49f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4a4	b4a4	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4a9	b4a9	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4ae	b4ae	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4b3	b4b3	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4b8	b4b8	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4bd	b4bd	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4c2	b4c2	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4c7	b4c7	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4cc	b4cc	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4d1	b4d1	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4d6	b4d6	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4db	b4db	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4e0	b4e0	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4e5	b4e5	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4ea	b4ea	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4ef	b4ef	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4f4	b4f4	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4f9	b4f9	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4fe	b4fe	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d503	b503	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d508	b508	ff					.text	$FF
.d509	b509					Export_TKListConvertLine:
.d509	b509	48		pha				pha 								; save indent on the stack
.d50a	b50a	9c 1d 04	stz $041d			stz 	tbOffset
.d50d	b50d	9c 2d 04	stz $042d			stz 	tokenBuffer
.d510	b510	9c 29 04	stz $0429			stz 	currentListColour
.d513	b513	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d515	b515	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d518	b518	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d51a	b51a	b1 30		lda ($30),y			lda 	(codePtr),y
.d51c	b51c	aa		tax				tax
.d51d	b51d	88		dey				dey
.d51e	b51e	b1 30		lda ($30),y			lda 	(codePtr),y
.d520	b520	20 03 b7	jsr $b703			jsr 	LCLWriteNumberXA
.d523	b523	68		pla				pla 								; adjustment to indent
.d524	b524	48		pha				pha 								; save on stack
.d525	b525	10 0c		bpl $b533			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d527	b527	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d528	b528	6d 26 04	adc $0426			adc 	listIndent
.d52b	b52b	8d 26 04	sta $0426			sta 	listIndent
.d52e	b52e	10 03		bpl $b533			bpl 	_LCNoAdjust
.d530	b530	9c 26 04	stz $0426			stz 	listIndent
.d533	b533					_LCNoAdjust:
.d533	b533	18		clc				clc		 							; work out actual indent.
.d534	b534	ad 26 04	lda $0426			lda 	listIndent
.d537	b537	0a		asl a				asl 	a
.d538	b538	69 07		adc #$07			adc 	#7
.d53a	b53a	85 36		sta $36				sta 	zTemp0
.d53c	b53c					_LCPadOut:
.d53c	b53c	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d53e	b53e	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d541	b541	ad 1d 04	lda $041d			lda 	tbOffset
.d544	b544	c5 36		cmp $36				cmp 	zTemp0
.d546	b546	d0 f4		bne $b53c			bne 	_LCPadOut
.d548	b548	a0 03		ldy #$03			ldy 	#3 							; start position.
.d54a	b54a					_LCMainLoop:
.d54a	b54a	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d54c	b54c	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d54f	b54f	b1 30		lda ($30),y			lda 	(codePtr),y
.d551	b551	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d553	b553	f0 17		beq $b56c			beq 	_LCExit
.d555	b555	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d557	b557	90 1e		bcc $b577			bcc 	_LCDoubles
.d559	b559	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d55b	b55b	90 2a		bcc $b587			bcc 	_LCShiftPunc
.d55d	b55d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d55f	b55f	90 35		bcc $b596			bcc 	_LCPunctuation
.d561	b561	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d563	b563	90 51		bcc $b5b6			bcc 	_LCIdentifiers
.d565	b565	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d567	b567	90 73		bcc $b5dc			bcc 	_LCTokens
.d569	b569	4c 3c b6	jmp $b63c			jmp 	_LCData 					; 254-5 are data objects
.d56c	b56c					_LCExit:
.d56c	b56c	68		pla				pla 								; get old indent adjust
.d56d	b56d	30 07		bmi $b576			bmi 	_LCExit2
.d56f	b56f	18		clc				clc 								; add to indent if +ve
.d570	b570	6d 26 04	adc $0426			adc 	listIndent
.d573	b573	8d 26 04	sta $0426			sta 	listIndent
.d576	b576					_LCExit2:
.d576	b576	60		rts				rts
.d577	b577					_LCDoubles:
.d577	b577	48		pha				pha
.d578	b578	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d579	b579	29 02		and #$02			and 	#2
.d57b	b57b	09 3c		ora #$3c			ora 	#60 						; make < >
.d57d	b57d	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d580	b580	68		pla				pla 								; restore, do lower bit
.d581	b581	29 03		and #$03			and 	#3
.d583	b583	09 3c		ora #$3c			ora 	#60
.d585	b585	80 0f		bra $b596			bra		_LCPunctuation 				; print, increment, loop
.d587	b587					_LCShiftPunc:
.d587	b587	aa		tax				tax 								; save in X
.d588	b588	29 07		and #$07			and 	#7 							; lower 3 bits
.d58a	b58a	f0 02		beq $b58e			beq 	_LCNoAdd
.d58c	b58c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d58e	b58e					_LCNoAdd:
.d58e	b58e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d590	b590	90 02		bcc $b594			bcc 	_LCNoAdd2
.d592	b592	09 20		ora #$20			ora 	#32 						; adds $20
.d594	b594					_LCNoAdd2:
.d594	b594	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d596	b596					_LCPunctuation:
.d596	b596	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d598	b598	d0 03		bne $b59d			bne 	_LCPContinue
.d59a	b59a	20 b1 b6	jsr $b6b1			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d59d	b59d					_LCPContinue:
.d59d	b59d	c9 2e		cmp #$2e			cmp 	#'.'
.d59f	b59f	f0 08		beq $b5a9			beq 	_LCPIsConstant
.d5a1	b5a1	c9 30		cmp #$30			cmp 	#'0'
.d5a3	b5a3	90 0b		bcc $b5b0			bcc 	_LCPNotConstant
.d5a5	b5a5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5a7	b5a7	b0 07		bcs $b5b0			bcs 	_LCPNotConstant
.d5a9	b5a9					_LCPIsConstant:
.d5a9	b5a9	48		pha				pha
.d5aa	b5aa	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5ac	b5ac	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d5af	b5af	68		pla				pla
.d5b0	b5b0					_LCPNotConstant:
.d5b0	b5b0	c8		iny				iny 								; consume character
.d5b1	b5b1	20 9b b6	jsr $b69b			jsr 	LCLWrite 					; write it out.
.d5b4	b5b4	80 94		bra $b54a			bra 	_LCMainLoop 				; go round again.
.d5b6	b5b6					_LCIdentifiers:
.d5b6	b5b6	18		clc				clc 								; convert to physical address
.d5b7	b5b7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5b9	b5b9	85 37		sta $37				sta 	zTemp0+1
.d5bb	b5bb	c8		iny				iny
.d5bc	b5bc	b1 30		lda ($30),y			lda 	(codePtr),y
.d5be	b5be	85 36		sta $36				sta 	zTemp0
.d5c0	b5c0	c8		iny				iny
.d5c1	b5c1	5a		phy				phy 								; save position
.d5c2	b5c2	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5c4	b5c4	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d5c7	b5c7	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5c9	b5c9					_LCOutIdentifier:
.d5c9	b5c9	c8		iny				iny
.d5ca	b5ca	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5cc	b5cc	29 7f		and #$7f			and 	#$7F
.d5ce	b5ce	20 ed b6	jsr $b6ed			jsr 	LCLLowerCase
.d5d1	b5d1	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d5d4	b5d4	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5d6	b5d6	10 f1		bpl $b5c9			bpl 	_LCOutIdentifier
.d5d8	b5d8	7a		ply				ply 								; restore position
.d5d9	b5d9	4c 4a b5	jmp $b54a			jmp 	_LCMainLoop
.d5dc	b5dc					_LCTokens:
.d5dc	b5dc	aa		tax				tax 								; token in X
.d5dd	b5dd	a9 bd		lda #$bd			lda 	#((KeywordSet2) & $FF)
.d5df	b5df	85 36		sta $36				sta 	0+zTemp0
.d5e1	b5e1	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5e3	b5e3	85 37		sta $37				sta 	1+zTemp0
.d5e5	b5e5	e0 82		cpx #$82			cpx 	#$82
.d5e7	b5e7	f0 16		beq $b5ff			beq 	_LCUseShift
.d5e9	b5e9	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	e0 81		cpx #$81			cpx 	#$81
.d5f3	b5f3	f0 0a		beq $b5ff			beq 	_LCUseShift
.d5f5	b5f5	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5f7	b5f7	85 36		sta $36				sta 	0+zTemp0
.d5f9	b5f9	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5fb	b5fb	85 37		sta $37				sta 	1+zTemp0
.d5fd	b5fd	80 01		bra $b600			bra 	_LCNoShift
.d5ff	b5ff					_LCUseShift:
.d5ff	b5ff	c8		iny				iny
.d600	b600					_LCNoShift:
.d600	b600	20 c5 b6	jsr $b6c5			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d603	b603	b1 30		lda ($30),y			lda 	(codePtr),y
.d605	b605	aa		tax				tax 								; into X
.d606	b606					_LCFindText:
.d606	b606	ca		dex				dex
.d607	b607	10 0e		bpl $b617			bpl 	_LCFoundText 				; found text.
.d609	b609	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d60b	b60b	1a		inc a				inc 	a 							; one extra for size
.d60c	b60c	38		sec				sec 								; one extra for checksum
.d60d	b60d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d60f	b60f	85 36		sta $36				sta 	zTemp0
.d611	b611	90 f3		bcc $b606			bcc 	_LCFindText
.d613	b613	e6 37		inc $37				inc 	zTemp0+1
.d615	b615	80 ef		bra $b606			bra 	_LCFindText
.d617	b617					_LCFoundText:
.d617	b617	5a		phy				phy 								; save List position
.d618	b618	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d61a	b61a	aa		tax				tax
.d61b	b61b	a9 86		lda #$86			lda 	#CLIToken+$80
.d61d	b61d	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d620	b620	a0 02		ldy #$02			ldy 	#2
.d622	b622					_LCCopyToken:
.d622	b622	b1 36		lda ($36),y			lda 	(zTemp0),y
.d624	b624	20 ed b6	jsr $b6ed			jsr 	LCLLowerCase
.d627	b627	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d62a	b62a	c8		iny				iny
.d62b	b62b	ca		dex				dex
.d62c	b62c	d0 f4		bne $b622			bne 	_LCCopyToken
.d62e	b62e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d630	b630	f0 05		beq $b637			beq 	_LCNoSpace
.d632	b632	a9 20		lda #$20			lda 	#' '
.d634	b634	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d637	b637					_LCNoSpace:
.d637	b637	7a		ply				ply 								; restore position.
.d638	b638	c8		iny				iny 								; consume token
.d639	b639	4c 4a b5	jmp $b54a			jmp 	_LCMainLoop 				; and go around again.
.d63c	b63c					_LCData:
.d63c	b63c	48		pha				pha 								; save type $FE/$FF
.d63d	b63d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d63f	b63f	c9 fe		cmp #$fe			cmp 	#$FE
.d641	b641	f0 22		beq $b665			beq 	_LCHaveOpener
.d643	b643	a2 22		ldx #$22			ldx 	#'"'
.d645	b645	a9 8f		lda #$8f			lda 	#CLIData+$80
.d647	b647	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d64a	b64a	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d64c	b64c	d0 17		bne $b665			bne 	_LCHaveOpener
.d64e	b64e	88		dey				dey 								; what precedes it ?
.d64f	b64f	b1 30		lda ($30),y			lda 	(codePtr),y
.d651	b651	c8		iny				iny
.d652	b652	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d654	b654	d0 0f		bne $b665			bne 	_LCHaveOpener
.d656	b656	a9 09		lda #$09			lda 	#9 							; tab
.d658	b658	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d65b	b65b	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d65d	b65d	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d660	b660	a9 85		lda #$85			lda 	#CLIFComment+$80
.d662	b662	20 92 b6	jsr $b692			jsr 	LCLWriteColour
.d665	b665					_LCHaveOpener:
.d665	b665	8a		txa				txa 								; output prefix (# or ")
.d666	b666	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d669	b669	c8		iny				iny 								; get count
.d66a	b66a	b1 30		lda ($30),y			lda 	(codePtr),y
.d66c	b66c	aa		tax				tax
.d66d	b66d	c8		iny				iny 								; point at first character
.d66e	b66e					_LCOutData:
.d66e	b66e	b1 30		lda ($30),y			lda 	(codePtr),y
.d670	b670	c9 00		cmp #$00			cmp 	#0
.d672	b672	f0 03		beq $b677			beq 	_LCNoPrint
.d674	b674	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d677	b677					_LCNoPrint:
.d677	b677	c8		iny				iny
.d678	b678	ca		dex				dex
.d679	b679	d0 f3		bne $b66e			bne 	_LCOutData
.d67b	b67b	68		pla				pla 								; closing " required ?
.d67c	b67c	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d67e	b67e	d0 0f		bne $b68f			bne 	_LCNoQuote
.d680	b680	a9 22		lda #$22			lda 	#'"'
.d682	b682	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d685	b685	ad 72 06	lda $0672			lda 	EXTTextColour
.d688	b688	29 0f		and #$0f			and 	#$0F
.d68a	b68a	09 90		ora #$90			ora 	#$90
.d68c	b68c	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d68f	b68f					_LCNoQuote:
.d68f	b68f	4c 4a b5	jmp $b54a			jmp 	_LCMainLoop
.d692	b692					LCLWriteColour:
.d692	b692	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d695	b695	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d698	b698	d0 01		bne $b69b			bne 	LCLWrite 					; if different, output it
.d69a	b69a	60		rts				rts
.d69b	b69b					LCLWrite:
.d69b	b69b	da		phx				phx
.d69c	b69c	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d69f	b69f	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6a2	b6a2	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6a5	b6a5	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6a8	b6a8	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6aa	b6aa	30 03		bmi $b6af			bmi 	_LCLNoColour
.d6ac	b6ac	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6af	b6af					_LCLNoColour:
.d6af	b6af	fa		plx				plx
.d6b0	b6b0	60		rts				rts
.d6b1	b6b1					LCLDeleteLastSpace:
.d6b1	b6b1	48		pha				pha
.d6b2	b6b2	da		phx				phx
.d6b3	b6b3	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6b6	b6b6	f0 0a		beq $b6c2			beq 	_LCDLSExit
.d6b8	b6b8	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6bb	b6bb	c9 20		cmp #$20			cmp 	#' '
.d6bd	b6bd	d0 03		bne $b6c2			bne 	_LCDLSExit
.d6bf	b6bf	ce 1d 04	dec $041d			dec 	tbOffset
.d6c2	b6c2					_LCDLSExit:
.d6c2	b6c2	fa		plx				plx
.d6c3	b6c3	68		pla				pla
.d6c4	b6c4	60		rts				rts
.d6c5	b6c5					LCLCheckSpaceRequired:
.d6c5	b6c5	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6c8	b6c8	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6ca	b6ca	f0 1b		beq $b6e7			beq 	_LCCSRSpace
.d6cc	b6cc	c9 29		cmp #$29			cmp 	#')'
.d6ce	b6ce	f0 17		beq $b6e7			beq 	_LCCSRSpace
.d6d0	b6d0	c9 23		cmp #$23			cmp 	#'#'
.d6d2	b6d2	f0 13		beq $b6e7			beq 	_LCCSRSpace
.d6d4	b6d4	20 ed b6	jsr $b6ed			jsr 	LCLLowerCase 				; saves a little effort
.d6d7	b6d7	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6d9	b6d9	90 11		bcc $b6ec			bcc 	_LCCSRExit
.d6db	b6db	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6dd	b6dd	90 08		bcc $b6e7			bcc 	_LCCSRSpace
.d6df	b6df	c9 61		cmp #$61			cmp 	#"a"
.d6e1	b6e1	90 09		bcc $b6ec			bcc 	_LCCSRExit
.d6e3	b6e3	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6e5	b6e5	b0 05		bcs $b6ec			bcs 	_LCCSRExit
.d6e7	b6e7					_LCCSRSpace:
.d6e7	b6e7	a9 20		lda #$20			lda 	#' '
.d6e9	b6e9	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d6ec	b6ec					_LCCSRExit:
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLLowerCase:
.d6ed	b6ed	c9 41		cmp #$41			cmp 	#"A"
.d6ef	b6ef	90 06		bcc $b6f7			bcc 	_LCLLCOut
.d6f1	b6f1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6f3	b6f3	b0 02		bcs $b6f7			bcs 	_LCLLCOut
.d6f5	b6f5	69 20		adc #$20			adc 	#$20
.d6f7	b6f7					_LCLLCOut:
.d6f7	b6f7	60		rts				rts
.d6f8	b6f8					LCLUpperCase:
.d6f8	b6f8	c9 61		cmp #$61			cmp 	#"a"
.d6fa	b6fa	90 06		bcc $b702			bcc 	_LCLUCOut
.d6fc	b6fc	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6fe	b6fe	b0 02		bcs $b702			bcs 	_LCLUCOut
.d700	b700	e9 1f		sbc #$1f			sbc 	#$1F
.d702	b702					_LCLUCOut:
.d702	b702	60		rts				rts
.d703	b703					LCLWriteNumberXA:
.d703	b703	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d705	b705					_LCLWNLoop1:
.d705	b705	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d707	b707					_LCLWNLoop2:
.d707	b707	48		pha				pha 								; save initial LSB
.d708	b708	38		sec				sec
.d709	b709	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d70b	b70b	f9 3c b7	sbc $b73c,y			sbc 	_LCLWNTable,y
.d70e	b70e	48		pha				pha
.d70f	b70f	8a		txa				txa
.d710	b710	f9 3d b7	sbc $b73d,y			sbc 	_LCLWNTable+1,y
.d713	b713	90 07		bcc $b71c			bcc 	_LCLWNUnderflow
.d715	b715	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d717	b717	aa		tax				tax 								; update X
.d718	b718	68		pla				pla 								; restore A
.d719	b719	7a		ply				ply 								; throw original
.d71a	b71a	80 eb		bra $b707			bra 	_LCLWNLoop2 				; try again.
.d71c	b71c					_LCLWNUnderflow:
.d71c	b71c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d71e	b71e	d0 06		bne $b726			bne 	_LCLWNOut
.d720	b720	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d723	b723	3a		dec a				dec 	a
.d724	b724	f0 04		beq $b72a			beq 	_LCLWNNext
.d726	b726					_LCLWNOut:
.d726	b726	98		tya				tya
.d727	b727	20 36 b7	jsr $b736			jsr 	_LCLWNOutDigit
.d72a	b72a					_LCLWNNext:
.d72a	b72a	7a		ply				ply 							 	; restore original value.
.d72b	b72b	68		pla				pla
.d72c	b72c	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d72e	b72e	c8		iny				iny
.d72f	b72f	c8		iny				iny
.d730	b730	84 37		sty $37				sty 	zTemp0+1
.d732	b732	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d734	b734	d0 cf		bne $b705			bne 	_LCLWNLoop1
.d736	b736					_LCLWNOutDigit:
.d736	b736	09 30		ora #$30			ora 	#'0'
.d738	b738	20 9b b6	jsr $b69b			jsr 	LCLWrite
.d73b	b73b	60		rts				rts
.d73c	b73c					_LCLWNTable:
>d73c	b73c	10 27						.word 	10000
>d73e	b73e	e8 03						.word 	1000
>d740	b740	64 00						.word 	100
>d742	b742	0a 00						.word 	10
.d744	b744					TOKSearchTable:
.d744	b744	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d746	b746	85 36		sta $36				sta 	zTemp0
.d748	b748	a0 00		ldy #$00			ldy 	#0
.d74a	b74a	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d74c	b74c	85 38		sta $38				sta 	zTemp1
.d74e	b74e					_TSTLoop:
.d74e	b74e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d750	b750	30 49		bmi $b79b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d752	b752	f0 2e		beq $b782			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d754	b754	c8		iny				iny 								; get the hash
.d755	b755	b1 36		lda ($36),y			lda 	(zTemp0),y
.d757	b757	88		dey				dey
.d758	b758	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d75b	b75b	d0 25		bne $b782			bne 	_TSTNext
.d75d	b75d	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d760	b760	38		sec				sec
.d761	b761	ed 00 04	sbc $0400			sbc 	identStart
.d764	b764	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d766	b766	d0 1a		bne $b782			bne 	_TSTNext
.d768	b768	5a		phy				phy 								; save Y , we might fail to match.
.d769	b769	c8		iny				iny 								; point to text
.d76a	b76a	c8		iny				iny
.d76b	b76b	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d76e	b76e					_TSTCompareName:
.d76e	b76e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d771	b771	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d773	b773	d0 0c		bne $b781			bne 	_TSTNextPullY 				; fail, pullY and do next
.d775	b775	e8		inx				inx
.d776	b776	c8		iny				iny
.d777	b777	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d77a	b77a	d0 f2		bne $b76e			bne 	_TSTCompareName
.d77c	b77c	7a		ply				ply 								; throw Y
.d77d	b77d	a5 38		lda $38				lda 	zTemp1 						; get token #
.d77f	b77f	38		sec				sec 								; return with CS = passed.
.d780	b780	60		rts				rts
.d781	b781					_TSTNextPullY:
.d781	b781	7a		ply				ply 								; restore current, fall through.
.d782	b782					_TSTNext:
.d782	b782	e6 38		inc $38				inc 	zTemp1 						; token counter
.d784	b784	98		tya				tya
.d785	b785	18		clc				clc
.d786	b786	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d788	b788	1a		inc a				inc 	a 							; +1
.d789	b789	1a		inc a				inc 	a 							; +2
.d78a	b78a	a8		tay				tay
.d78b	b78b	10 c1		bpl $b74e			bpl 	_TSTLoop 					; if Y < $80 loop back
.d78d	b78d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d78e	b78e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d790	b790	18		clc				clc  								; but have tables > 255 bytes
.d791	b791	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d793	b793	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d795	b795	90 b7		bcc $b74e			bcc 	_TSTLoop
.d797	b797	e6 37		inc $37				inc 	zTemp0+1
.d799	b799	80 b3		bra $b74e			bra 	_TSTLoop
.d79b	b79b					_TSTFail:
.d79b	b79b	18		clc				clc
.d79c	b79c	60		rts				rts
.d79d	b79d					Export_TKTokeniseLine:
.d79d	b79d	20 6a b9	jsr $b96a			jsr 	LCLFixLineBufferCase 		; fix line case
.d7a0	b7a0	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7a2	b7a2	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7a5	b7a5	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7a8	b7a8	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7ab	b7ab	a2 ff		ldx #$ff			ldx 	#$FF
.d7ad	b7ad					_TKFindFirst:
.d7ad	b7ad	e8		inx				inx
.d7ae	b7ae	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7b1	b7b1	f0 62		beq $b815			beq 	_TKExit
.d7b3	b7b3	c9 20		cmp #$20			cmp 	#' '
.d7b5	b7b5	90 f6		bcc $b7ad			bcc 	_TKFindFirst
.d7b7	b7b7	c9 30		cmp #$30			cmp 	#'0'
.d7b9	b7b9	90 07		bcc $b7c2			bcc 	_TKNoLineNumber
.d7bb	b7bb	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7bd	b7bd	b0 03		bcs $b7c2			bcs 	_TKNoLineNumber
.d7bf	b7bf	20 94 b9	jsr $b994			jsr 	TOKExtractLineNumber
.d7c2	b7c2					_TKNoLineNumber:
.d7c2	b7c2					_TKTokeniseLoop:
.d7c2	b7c2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7c5	b7c5	f0 4e		beq $b815			beq 	_TKExit
.d7c7	b7c7	e8		inx				inx
.d7c8	b7c8	c9 20		cmp #$20			cmp 	#' '
.d7ca	b7ca	f0 f6		beq $b7c2			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7cc	b7cc	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7cd	b7cd	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7cf	b7cf	f0 68		beq $b839			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7d1	b7d1	c9 41		cmp #$41			cmp 	#'A'
.d7d3	b7d3	90 04		bcc $b7d9			bcc 	_TKTokenisePunctuation
.d7d5	b7d5	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7d7	b7d7	90 60		bcc $b839			bcc 	_TKTokeniseIdentifier
.d7d9	b7d9					_TKTokenisePunctuation:
.d7d9	b7d9	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7db	b7db	f0 2e		beq $b80b			beq 	_TKString
.d7dd	b7dd	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7df	b7df	f0 2f		beq $b810			beq 	_TKHexConstant
.d7e1	b7e1	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7e3	b7e3	f0 36		beq $b81b			beq 	_TKCheckDouble
.d7e5	b7e5	c9 3e		cmp #$3e			cmp 	#'>'
.d7e7	b7e7	f0 32		beq $b81b			beq 	_TKCheckDouble
.d7e9	b7e9					_TKStandardPunctuation:
.d7e9	b7e9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7ec	b7ec	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7ee	b7ee	90 0e		bcc $b7fe			bcc 	_TKNoShift
.d7f0	b7f0	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7f1	b7f1	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7f3	b7f3	85 36		sta $36				sta 	zTemp0
.d7f5	b7f5	68		pla				pla
.d7f6	b7f6	29 20		and #$20			and 	#32 						; bit 5
.d7f8	b7f8	4a		lsr a				lsr 	a 							; shift into bit 3
.d7f9	b7f9	4a		lsr a				lsr 	a
.d7fa	b7fa	05 36		ora $36				ora 	zTemp0
.d7fc	b7fc	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7fe	b7fe					_TKNoShift:
.d7fe	b7fe	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte 				; write the punctuation character
.d801	b801	e8		inx				inx 								; consume the character
.d802	b802	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d804	b804	d0 bc		bne $b7c2			bne 	_TKTokeniseLoop 			; and loop round again.
.d806	b806	20 cc b8	jsr $b8cc			jsr 	TOKCheckComment 			; comment checl
.d809	b809	80 b7		bra $b7c2			bra 	_TKTokeniseLoop
.d80b	b80b					_TKString:
.d80b	b80b	20 f9 b8	jsr $b8f9			jsr 	TOKTokenString
.d80e	b80e	80 b2		bra $b7c2			bra 	_TKTokeniseLoop
.d810	b810					_TKHexConstant:
.d810	b810	20 34 b9	jsr $b934			jsr 	TOKHexConstant
.d813	b813	80 ad		bra $b7c2			bra 	_TKTokeniseLoop
.d815	b815	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d817	b817	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d81a	b81a	60		rts				rts
.d81b	b81b					_TKCheckDouble:
.d81b	b81b	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d81e	b81e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d820	b820	90 c7		bcc $b7e9			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d822	b822	c9 3f		cmp #$3f			cmp 	#'>'+1
.d824	b824	b0 c3		bcs $b7e9			bcs 	_TKStandardPunctuation
.d826	b826	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d829	b829	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d82b	b82b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d82c	b82c	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d82f	b82f	38		sec				sec
.d830	b830	e9 3c		sbc #$3c			sbc 	#'<'
.d832	b832	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte 				; this is in the range 0-7
.d835	b835	e8		inx				inx 								; consume both
.d836	b836	e8		inx				inx
.d837	b837	80 89		bra $b7c2			bra 	_TKTokeniseLoop
.d839	b839					_TKTokeniseIdentifier:
.d839	b839	8e 00 04	stx $0400			stx 	identStart 					; save start
.d83c	b83c	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d83f	b83f					_TKCheckLoop:
.d83f	b83f	e8		inx				inx 								; look at next, we know first is identifier already.
.d840	b840	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d843	b843	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d845	b845	f0 f8		beq $b83f			beq 	_TKCheckLoop
.d847	b847	c9 30		cmp #$30			cmp	 	#"0"
.d849	b849	90 0c		bcc $b857			bcc 	_TKEndIdentifier
.d84b	b84b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d84d	b84d	90 f0		bcc $b83f			bcc 	_TKCheckLoop
.d84f	b84f	c9 41		cmp #$41			cmp	 	#"A"
.d851	b851	90 04		bcc $b857			bcc 	_TKEndIdentifier
.d853	b853	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d855	b855	90 e8		bcc $b83f			bcc 	_TKCheckLoop
.d857	b857					_TKEndIdentifier:
.d857	b857	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d85a	b85a	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d85c	b85c	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d85e	b85e	f0 06		beq $b866			beq 	_TKHasTypeCharacter
.d860	b860	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d862	b862	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d864	b864	d0 07		bne $b86d			bne 	_TKNoTypeCharacter
.d866	b866					_TKHasTypeCharacter:
.d866	b866	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d869	b869	e8		inx				inx 								; consume the type character
.d86a	b86a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d86d	b86d					_TKNoTypeCharacter:
.d86d	b86d	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d86f	b86f	d0 09		bne $b87a			bne 	_TKNoArray
.d871	b871	e8		inx				inx 								; skip the (
.d872	b872	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d875	b875	09 04		ora #$04			ora 	#$04
.d877	b877	8d 04 04	sta $0404			sta 	identTypeByte
.d87a	b87a					_TKNoArray:
.d87a	b87a	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d87d	b87d	20 55 b9	jsr $b955			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d880	b880	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d882	b882	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d884	b884	20 44 b7	jsr $b744			jsr 	TOKSearchTable
.d887	b887	a2 00		ldx #$00			ldx 	#0
.d889	b889	b0 1f		bcs $b8aa			bcs 	_TKFoundToken
.d88b	b88b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d88d	b88d	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d88f	b88f	20 44 b7	jsr $b744			jsr 	TOKSearchTable
.d892	b892	a2 81		ldx #$81			ldx 	#$81
.d894	b894	b0 14		bcs $b8aa			bcs 	_TKFoundToken
.d896	b896	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d898	b898	a9 bd		lda #$bd			lda 	#(KeywordSet2) & $FF
.d89a	b89a	20 44 b7	jsr $b744			jsr 	TOKSearchTable
.d89d	b89d	a2 82		ldx #$82			ldx 	#$82
.d89f	b89f	b0 09		bcs $b8aa			bcs 	_TKFoundToken
.d8a1	b8a1	20 e5 b9	jsr $b9e5			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8a4	b8a4	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8a7	b8a7	4c c2 b7	jmp $b7c2			jmp 	_TKTokeniseLoop 			; and go round again.
.d8aa	b8aa					_TKFoundToken:
.d8aa	b8aa	48		pha				pha 								; save token
.d8ab	b8ab	8a		txa				txa 								; shift in X, is there one ?
.d8ac	b8ac	f0 03		beq $b8b1			beq 	_TKNoTShift
.d8ae	b8ae	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte 				; if so, write it out
.d8b1	b8b1					_TKNoTShift:
.d8b1	b8b1	68		pla				pla 								; restore and write token
.d8b2	b8b2	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d8b5	b8b5	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8b7	b8b7	d0 0d		bne $b8c6			bne 	_TKNotRem 			 		; not shifted ?
.d8b9	b8b9	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8bb	b8bb	d0 09		bne $b8c6			bne 	_TKNotRem
.d8bd	b8bd	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8c0	b8c0	20 cc b8	jsr $b8cc			jsr 	TOKCheckComment
.d8c3	b8c3	4c c2 b7	jmp $b7c2			jmp 	_TKTokeniseLoop
.d8c6	b8c6					_TKNotRem:
.d8c6	b8c6	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8c9	b8c9	4c c2 b7	jmp $b7c2			jmp 	_TKTokeniseLoop 			; and go round again.
.d8cc	b8cc					TOKCheckComment:
.d8cc	b8cc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8cf	b8cf	e8		inx				inx
.d8d0	b8d0	c9 20		cmp #$20			cmp 	#' '
.d8d2	b8d2	f0 f8		beq $b8cc			beq 	TOKCheckComment
.d8d4	b8d4	ca		dex				dex 								; first non space character
.d8d5	b8d5	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8d7	b8d7	f0 1f		beq $b8f8			beq 	_TOKCCExit 					; then we are okay
.d8d9	b8d9	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8db	b8db	f0 1b		beq $b8f8			beq 	_TOKCCExit 					; then we are okay
.d8dd	b8dd	da		phx				phx
.d8de	b8de					_TOKCCLowerCase:
.d8de	b8de	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8e1	b8e1	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8e3	b8e3	90 09		bcc $b8ee			bcc 	_TOKKCNotUC
.d8e5	b8e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e7	b8e7	b0 05		bcs $b8ee			bcs 	_TOKKCNotUC
.d8e9	b8e9	49 20		eor #$20			eor 	#$20
.d8eb	b8eb	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8ee	b8ee					_TOKKCNotUC:
.d8ee	b8ee	e8		inx				inx
.d8ef	b8ef	c9 00		cmp #$00			cmp 	#0
.d8f1	b8f1	d0 eb		bne $b8de			bne 	_TOKCCLowerCase
.d8f3	b8f3	fa		plx				plx
.d8f4	b8f4	ca		dex				dex 								; tokenise string expects initial skip.
.d8f5	b8f5	20 f9 b8	jsr $b8f9			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8f8	b8f8					_TOKCCExit:
.d8f8	b8f8	60		rts				rts
.d8f9	b8f9					TOKTokenString:
.d8f9	b8f9	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8fb	b8fb	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d8fe	b8fe	e8		inx				inx									; start of quoted string.
.d8ff	b8ff	da		phx				phx 								; push start of string on top
.d900	b900	ca		dex				dex 								; because we pre-increment
.d901	b901					_TSFindEnd:
.d901	b901	e8		inx				inx
.d902	b902	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d905	b905	f0 04		beq $b90b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d907	b907	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d909	b909	d0 f6		bne $b901			bne 	_TSFindEnd
.d90b	b90b					_TSEndOfString:
.d90b	b90b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d90c	b90c	48		pha				pha 								; save terminating character
.d90d	b90d	20 15 b9	jsr $b915			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d910	b910	68		pla				pla 								; terminating character
.d911	b911	f0 01		beq $b914			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d913	b913	e8		inx				inx
.d914	b914					_TSNotQuote:
.d914	b914	60		rts				rts
.d915	b915					TOKWriteBlockXY:
.d915	b915	86 36		stx $36				stx 	zTemp0 						; save end character
.d917	b917	98		tya				tya 								; use 2's complement to work out the byte size
.d918	b918	49 ff		eor #$ff			eor 	#$FF
.d91a	b91a	38		sec				sec
.d91b	b91b	65 36		adc $36				adc 	zTemp0
.d91d	b91d	1a		inc a				inc 	a 							; one extra for NULL
.d91e	b91e	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d921	b921					_TOBlockLoop:
.d921	b921	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d923	b923	f0 09		beq $b92e			beq 	_TOBlockExit
.d925	b925	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d928	b928	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d92b	b92b	c8		iny				iny
.d92c	b92c	80 f3		bra $b921			bra 	_TOBlockLoop
.d92e	b92e					_TOBlockExit:
.d92e	b92e	a9 00		lda #$00			lda 	#0 							; add NULL.
.d930	b930	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d933	b933	60		rts				rts
.d934	b934					TOKHexConstant:
.d934	b934	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d936	b936	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.d939	b939	e8		inx				inx									; start of quoted string.
.d93a	b93a	da		phx				phx 								; push start of constant on top
.d93b	b93b	ca		dex				dex
.d93c	b93c					_THFindLoop:
.d93c	b93c	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d93d	b93d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d940	b940	c9 30		cmp #$30			cmp 	#"0"
.d942	b942	90 0c		bcc $b950			bcc 	_THFoundEnd
.d944	b944	c9 3a		cmp #$3a			cmp 	#"9"+1
.d946	b946	90 f4		bcc $b93c			bcc 	_THFindLoop
.d948	b948	c9 41		cmp #$41			cmp 	#"A"
.d94a	b94a	90 04		bcc $b950			bcc 	_THFoundEnd
.d94c	b94c	c9 47		cmp #$47			cmp 	#"F"+1
.d94e	b94e	90 ec		bcc $b93c			bcc 	_THFindLoop
.d950	b950					_THFoundEnd:
.d950	b950	7a		ply				ply 								; restore start
.d951	b951	20 15 b9	jsr $b915			jsr 	TOKWriteBlockXY 			; output the block
.d954	b954	60		rts				rts
.d955	b955					TOKCalculateHash:
.d955	b955	da		phx				phx
.d956	b956	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d959	b959	a9 00		lda #$00			lda 	#0
.d95b	b95b					_TCHLoop:
.d95b	b95b	18		clc				clc
.d95c	b95c	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d95f	b95f	e8		inx				inx
.d960	b960	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d963	b963	d0 f6		bne $b95b			bne 	_TCHLoop
.d965	b965	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d968	b968	fa		plx				plx
.d969	b969	60		rts				rts
.d96a	b96a					LCLFixLineBufferCase:
.d96a	b96a	a2 00		ldx #$00			ldx 	#0
.d96c	b96c					_FLBCLoop:
.d96c	b96c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d96f	b96f	f0 22		beq $b993			beq 	_FLBCExit 					; end of string.
.d971	b971	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d973	b973	f0 11		beq $b986			beq 	_FLBCInQuotes
.d975	b975	e8		inx				inx
.d976	b976	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d978	b978	90 f2		bcc $b96c			bcc 	_FLBCLoop
.d97a	b97a	c9 7b		cmp #$7b			cmp 	#'z'+1
.d97c	b97c	b0 ee		bcs $b96c			bcs 	_FLBCLoop
.d97e	b97e	38		sec				sec 								; make U/C
.d97f	b97f	e9 20		sbc #$20			sbc 	#32
.d981	b981	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d984	b984	80 e6		bra $b96c			bra 	_FLBCLoop
.d986	b986					_FLBCInQuotes:
.d986	b986	e8		inx				inx 								; advance
.d987	b987	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d98a	b98a	f0 07		beq $b993			beq 	_FLBCExit 					; exit on EOS
.d98c	b98c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d98e	b98e	d0 f6		bne $b986			bne 	_FLBCInQuotes
.d990	b990	e8		inx				inx 								; skip over it
.d991	b991	80 d9		bra $b96c			bra 	_FLBCLoop
.d993	b993					_FLBCExit:
.d993	b993	60		rts				rts
.d994	b994					TOKExtractLineNumber:
.d994	b994	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d997	b997	48		pha				pha
.d998	b998	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d99b	b99b	48		pha				pha
.d99c	b99c	20 d2 b9	jsr $b9d2			jsr 	_LCLNTimes2 				; line # x 2
.d99f	b99f	20 d2 b9	jsr $b9d2			jsr 	_LCLNTimes2 				; line # x 4
.d9a2	b9a2	18		clc				clc 								; add stacked value
.d9a3	b9a3	68		pla				pla
.d9a4	b9a4	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9a7	b9a7	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9aa	b9aa	68		pla				pla
.d9ab	b9ab	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9ae	b9ae	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9b1	b9b1	20 d2 b9	jsr $b9d2			jsr 	_LCLNTimes2 				; line # x 10
.d9b4	b9b4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9b7	b9b7	e8		inx				inx
.d9b8	b9b8	29 0f		and #$0f			and 	#15 						; add to line #
.d9ba	b9ba	18		clc				clc
.d9bb	b9bb	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9be	b9be	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9c1	b9c1	90 03		bcc $b9c6			bcc 	_TLENNoCarry
.d9c3	b9c3	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9c6	b9c6					_TLENNoCarry:
.d9c6	b9c6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9c9	b9c9	c9 30		cmp #$30			cmp 	#'0'
.d9cb	b9cb	90 04		bcc $b9d1			bcc 	_TLENExit
.d9cd	b9cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9cf	b9cf	90 c3		bcc $b994			bcc 	TOKExtractLineNumber
.d9d1	b9d1					_TLENExit:
.d9d1	b9d1	60		rts				rts
.d9d2	b9d2					_LCLNTimes2:
.d9d2	b9d2	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9d5	b9d5	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9d8	b9d8	60		rts				rts
.d9d9	b9d9					TOKWriteByte:
.d9d9	b9d9	da		phx				phx
.d9da	b9da	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9dd	b9dd	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9e0	b9e0	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9e3	b9e3	fa		plx				plx
.d9e4	b9e4	60		rts				rts
.d9e5	b9e5					TOKCheckCreateVariableRecord:
.d9e5	b9e5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9e7	b9e7	85 36		sta $36				sta 	0+zTemp0
.d9e9	b9e9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9eb	b9eb	85 37		sta $37				sta 	1+zTemp0
.d9ed	b9ed					_CCVSearch:
.d9ed	b9ed	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9ef	b9ef	f0 2c		beq $ba1d			beq 	_CCVFail
.d9f1	b9f1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9f3	b9f3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9f5	b9f5	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9f8	b9f8	d0 16		bne $ba10			bne 	_CCVNext
.d9fa	b9fa	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9fc	b9fc	ae 00 04	ldx $0400			ldx 	identStart
.d9ff	b9ff					_CCVCompare:
.d9ff	b9ff	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da02	ba02	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da04	ba04	e8		inx				inx 								; advance pointers
.da05	ba05	c8		iny				iny
.da06	ba06	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da07	ba07	d0 07		bne $ba10			bne 	_CCVNext  					; didn't match go to next.
.da09	ba09	90 f4		bcc $b9ff			bcc 	_CCVCompare 				; not finished yet.
.da0b	ba0b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da0e	ba0e	f0 41		beq $ba51			beq 	_CCVFound 					; yes, we were successful
.da10	ba10					_CCVNext:
.da10	ba10	18		clc				clc 								; go to next record.
.da11	ba11	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da13	ba13	65 36		adc $36				adc 	zTemp0
.da15	ba15	85 36		sta $36				sta 	zTemp0
.da17	ba17	90 d4		bcc $b9ed			bcc 	_CCVSearch
.da19	ba19	e6 37		inc $37				inc 	zTemp0+1
.da1b	ba1b	80 d0		bra $b9ed			bra 	_CCVSearch
.da1d	ba1d					_CCVFail:
.da1d	ba1d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da1f	ba1f	ad 03 04	lda $0403			lda 	identHash
.da22	ba22	91 36		sta ($36),y			sta 	(zTemp0),y
.da24	ba24	c8		iny				iny 								; offset 2 is the type byte
.da25	ba25	ad 04 04	lda $0404			lda 	identTypeByte
.da28	ba28	91 36		sta ($36),y			sta 	(zTemp0),y
.da2a	ba2a	c8		iny				iny
.da2b	ba2b					_CCVData:
.da2b	ba2b	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da2d	ba2d	91 36		sta ($36),y			sta 	(zTemp0),y
.da2f	ba2f	c8		iny				iny
.da30	ba30	c0 08		cpy #$08			cpy 	#8
.da32	ba32	90 f7		bcc $ba2b			bcc 	_CCVData
.da34	ba34	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da37	ba37					_CCVCopyName:
.da37	ba37	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da3a	ba3a	91 36		sta ($36),y			sta 	(zTemp0),y
.da3c	ba3c	e8		inx				inx
.da3d	ba3d	c8		iny				iny
.da3e	ba3e	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da41	ba41	d0 f4		bne $ba37			bne 	_CCVCopyName
.da43	ba43	98		tya				tya 								; patch offset
.da44	ba44	92 36		sta ($36)			sta 	(zTemp0)
.da46	ba46	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da48	ba48	91 36		sta ($36),y			sta 	(zTemp0),y
.da4a	ba4a	88		dey				dey
.da4b	ba4b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da4d	ba4d	09 80		ora #$80			ora 	#$80
.da4f	ba4f	91 36		sta ($36),y			sta 	(zTemp0),y
.da51	ba51					_CCVFound:
.da51	ba51	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da53	ba53	38		sec				sec
.da54	ba54	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da56	ba56	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da58	ba58	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.da5b	ba5b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da5d	ba5d	20 d9 b9	jsr $b9d9			jsr 	TOKWriteByte
.da60	ba60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da61	ba61					SNDCheckChannel:
.da61	ba61	aa		tax				tax
.da62	ba62	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da65	ba65	d0 38		bne $ba9f			bne 	_SNDCCExit
.da67	ba67	da		phx				phx 								; save current channel
.da68	ba68	8a		txa				txa 								; put in A
.da69	ba69	20 e5 ba	jsr $bae5			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da6c	ba6c	68		pla				pla 								; channel # in A
.da6d	ba6d	90 30		bcc $ba9f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da6f	ba6f	a8		tay				tay 								; Y is the channel #
.da70	ba70	bd 30 07	lda $0730,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da73	ba73	99 2f 08	sta $082f,y			sta 	SNDPitchLow,y
.da76	ba76	bd 31 07	lda $0731,x			lda 	SNDQueue+2,x
.da79	ba79	99 33 08	sta $0833,y			sta 	SNDPitchHigh,y
.da7c	ba7c	bd 32 07	lda $0732,x			lda 	SNDQueue+3,x
.da7f	ba7f	99 37 08	sta $0837,y			sta 	SNDVolume,y
.da82	ba82	bd 33 07	lda $0733,x			lda 	SNDQueue+4,x
.da85	ba85	99 3b 08	sta $083b,y			sta 	SNDTimeLeft,y
.da88	ba88	bd 34 07	lda $0734,x			lda 	SNDQueue+5,x
.da8b	ba8b	99 3f 08	sta $083f,y			sta 	SNDAdjustLow,y
.da8e	ba8e	bd 35 07	lda $0735,x			lda 	SNDQueue+6,x
.da91	ba91	99 43 08	sta $0843,y			sta 	SNDAdjustHigh,y
.da94	ba94	5a		phy				phy 								; save channel #
.da95	ba95	20 ff ba	jsr $baff			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da98	ba98	ce 2e 07	dec $072e			dec 	SNDLength 					; reduce the queue length.
.da9b	ba9b	68		pla				pla
.da9c	ba9c	20 a0 ba	jsr $baa0			jsr 	SNDUpdateNote 				; update channel A
.da9f	ba9f					_SNDCCExit:
.da9f	ba9f	60		rts				rts
.daa0	baa0					SNDUpdateNote:
.daa0	baa0	aa		tax				tax 								; so we can access records
.daa1	baa1	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daa2	baa2	0a		asl a				asl 	a
.daa3	baa3	0a		asl a				asl 	a
.daa4	baa4	0a		asl a				asl 	a
.daa5	baa5	0a		asl a				asl 	a
.daa6	baa6	8d 2d 07	sta $072d			sta 	SNDChannelBits
.daa9	baa9	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; are we silent
.daac	baac	f0 2e		beq $badc			beq 	_SNDUNIsSilent
.daae	baae	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; push channel bits on stack
.dab1	bab1	48		pha				pha
.dab2	bab2	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dab5	bab5	29 0f		and #$0f			and 	#$0F
.dab7	bab7	0d 2d 07	ora $072d			ora 	SNDChannelBits 				; set channel bits
.daba	baba	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dabc	babc	20 49 bb	jsr $bb49			jsr 	SNDWritePorts
.dabf	babf	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dac2	bac2	8d 2d 07	sta $072d			sta 	SNDChannelBits
.dac5	bac5	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dac8	bac8	4e 2d 07	lsr $072d			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dacb	bacb	6a		ror a				ror 	a
.dacc	bacc	4e 2d 07	lsr $072d			lsr 	SNDChannelBits
.dacf	bacf	6a		ror a				ror 	a
.dad0	bad0	4a		lsr a				lsr 	a 							; put in bits 0-5
.dad1	bad1	4a		lsr a				lsr 	a
.dad2	bad2	20 49 bb	jsr $bb49			jsr 	SNDWritePorts 				; write as rest of pitch register
.dad5	bad5	68		pla				pla
.dad6	bad6	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dad8	bad8	20 49 bb	jsr $bb49			jsr 	SNDWritePorts
.dadb	badb	60		rts				rts
.dadc	badc					_SNDUNIsSilent:
.dadc	badc	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; channel bits
.dadf	badf	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dae1	bae1	20 49 bb	jsr $bb49			jsr 	SNDWritePorts 				; write to the ports
.dae4	bae4	60		rts				rts
.dae5	bae5					SNDFindNextNoteForA:
.dae5	bae5	ac 2e 07	ldy $072e			ldy 	SNDLength 					; queue size into Y
.dae8	bae8	f0 13		beq $bafd			beq 	_SNDFNNFail 				; queue empty.
.daea	baea	a2 00		ldx #$00			ldx 	#0
.daec	baec					_SNDFNNSearch:
.daec	baec	dd 2f 07	cmp $072f,x			cmp 	SNDQueue,x 					; does it match the channel
.daef	baef	38		sec				sec
.daf0	baf0	f0 0c		beq $bafe			beq 	_SNDFNNExit 				; if so exit with CS.
.daf2	baf2	e8		inx				inx 								; next queue slot.
.daf3	baf3	e8		inx				inx
.daf4	baf4	e8		inx				inx
.daf5	baf5	e8		inx				inx
.daf6	baf6	e8		inx				inx
.daf7	baf7	e8		inx				inx
.daf8	baf8	e8		inx				inx
.daf9	baf9	e8		inx				inx
.dafa	bafa	88		dey				dey 								; done the whole queue
.dafb	bafb	d0 ef		bne $baec			bne 	_SNDFNNSearch 				; no, go back.
.dafd	bafd					_SNDFNNFail:
.dafd	bafd	18		clc				clc
.dafe	bafe					_SNDFNNExit:
.dafe	bafe	60		rts				rts
.daff	baff					SNDDeleteXFromQueue:
.daff	baff	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db01	bb01	f0 09		beq $bb0c			beq 	_SNDDXExit
.db03	bb03	bd 37 07	lda $0737,x			lda 	SNDQueue+8,x
.db06	bb06	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db09	bb09	e8		inx				inx
.db0a	bb0a	80 f3		bra $baff			bra 	SNDDeleteXFromQueue
.db0c	bb0c					_SNDDXExit:
.db0c	bb0c	60		rts				rts
.072d						SNDChannelBits:
>072d								.fill 	1
.db0d	bb0d					SNDQueueRequest:
.db0d	bb0d	86 36		stx $36				stx 	zTemp0						; save queue address
.db0f	bb0f	84 37		sty $37				sty 	zTemp0+1
.db11	bb11	ae 2e 07	ldx $072e			ldx 	SNDLength 					; queue is full, can't take any more.
.db14	bb14	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db16	bb16	f0 21		beq $bb39			beq 	_SNDQRExit
.db18	bb18	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db1a	bb1a	48		pha				pha
.db1b	bb1b	8a		txa				txa  								; get offset in queue buffer/
.db1c	bb1c	0a		asl a				asl 	a
.db1d	bb1d	0a		asl a				asl 	a
.db1e	bb1e	0a		asl a				asl 	a
.db1f	bb1f	aa		tax				tax
.db20	bb20	68		pla				pla 								; get back and push again
.db21	bb21	48		pha				pha
.db22	bb22	9d 2f 07	sta $072f,x			sta 	SNDQueue+0,x 				; save the channel #
.db25	bb25	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db27	bb27					_SNDQCopy:
.db27	bb27	b1 36		lda ($36),y			lda 	(zTemp0),y
.db29	bb29	e8		inx				inx
.db2a	bb2a	c8		iny				iny
.db2b	bb2b	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db2e	bb2e	c0 06		cpy #$06			cpy 	#6
.db30	bb30	d0 f5		bne $bb27			bne 	_SNDQCopy
.db32	bb32	ee 2e 07	inc $072e			inc 	SNDLength 					; bump queue length.
.db35	bb35	68		pla				pla 								; get channel # back
.db36	bb36	20 61 ba	jsr $ba61			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db39	bb39					_SNDQRExit:
.db39	bb39	60		rts				rts
.db3a	bb3a					SNDSilenceChannel:
.db3a	bb3a	aa		tax				tax 								; zero time left.
.db3b	bb3b	9e 3b 08	stz $083b,x			stz 	SNDTimeLeft,x
.db3e	bb3e	0a		asl a				asl 	a 							; shift into position
.db3f	bb3f	0a		asl a				asl 	a
.db40	bb40	0a		asl a				asl 	a
.db41	bb41	0a		asl a				asl 	a
.db42	bb42	0a		asl a				asl 	a
.db43	bb43	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db45	bb45	20 49 bb	jsr $bb49			jsr 	SNDWritePorts
.db48	bb48	60		rts				rts
.db49	bb49					SNDWritePorts:
.db49	bb49	da		phx				phx 								; save X
.db4a	bb4a	a6 01		ldx $01				ldx 	1 							; save I/O status
.db4c	bb4c	64 01		stz $01				stz 	1 							; access I/O page 0
.db4e	bb4e	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db51	bb51	8d 10 d6	sta $d610			sta 	$D610
.db54	bb54	86 01		stx $01				stx 	1 							; restore I/O
.db56	bb56	fa		plx				plx 								; restore X
.db57	bb57	60		rts				rts
.db58	bb58					Export_SNDCommand:
.db58	bb58	da		phx				phx 								; save XY
.db59	bb59	5a		phy				phy
.db5a	bb5a	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db5c	bb5c	f0 1d		beq $bb7b			beq 	_SNDInitialise
.db5e	bb5e	90 28		bcc $bb88			bcc 	_SNDExit
.db60	bb60	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db62	bb62	f0 17		beq $bb7b			beq 	_SNDSilence
.db64	bb64	b0 22		bcs $bb88			bcs 	_SNDExit
.db66	bb66	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db68	bb68	b0 09		bcs $bb73			bcs 	_SNDQueryPlay
.db6a	bb6a	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db6c	bb6c	b0 1a		bcs $bb88			bcs 	_SNDExit
.db6e	bb6e	20 0d bb	jsr $bb0d			jsr 	SNDQueueRequest
.db71	bb71	80 15		bra $bb88			bra 	_SNDExit
.db73	bb73					_SNDQueryPlay:
.db73	bb73	29 03		and #$03			and 	#3 							; get channel #
.db75	bb75	aa		tax				tax
.db76	bb76	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db79	bb79	80 0d		bra $bb88			bra 	_SNDExit
.db7b	bb7b					_SNDInitialise:
.db7b	bb7b					_SNDSilence:
.db7b	bb7b	9c 2e 07	stz $072e			stz 	SNDLength 					; empty the queue.
.db7e	bb7e	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db80	bb80					_SNDSilenceLoop:
.db80	bb80	48		pha				pha
.db81	bb81	20 3a bb	jsr $bb3a			jsr 	SNDSilenceChannel
.db84	bb84	68		pla				pla
.db85	bb85	3a		dec a				dec 	a
.db86	bb86	10 f8		bpl $bb80			bpl 	_SNDSilenceLoop
.db88	bb88					_SNDExit:
.db88	bb88	7a		ply				ply
.db89	bb89	fa		plx				plx
.db8a	bb8a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072e						SNDLength:
>072e								.fill 	1
.072f						SNDQueue:
>072f								.fill 	SNDQueueSize * 8
.082f						SNDPitchLow:
>082f								.fill 	4
.0833						SNDPitchHigh:
>0833								.fill 	4
.0837						SNDVolume:
>0837								.fill 	4
.083b						SNDTimeLeft:
>083b								.fill 	4
.083f						SNDAdjustLow:
>083f								.fill 	4
.0843						SNDAdjustHigh:
>0843								.fill 	4
.db8b	bb8b					Export_SNDUpdate:
.db8b	bb8b					PagedSNDUpdate:
.db8b	bb8b	ad 3b 08	lda $083b			lda 	SNDTimeLeft+0 				; look at time remaining
.db8e	bb8e	f0 05		beq $bb95			beq 	_SNDUNot0 					; not playing
.db90	bb90	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db92	bb92	20 b4 bb	jsr $bbb4			jsr 	SNDUpdateChannel 			; update it.
.db95	bb95					_SNDUNot0:
.db95	bb95	ad 3c 08	lda $083c			lda 	SNDTimeLeft+1
.db98	bb98	f0 05		beq $bb9f			beq 	_SNDUNot1
.db9a	bb9a	a2 01		ldx #$01			ldx 	#1
.db9c	bb9c	20 b4 bb	jsr $bbb4			jsr 	SNDUpdateChannel
.db9f	bb9f					_SNDUNot1:
.db9f	bb9f	ad 3d 08	lda $083d			lda 	SNDTimeLeft+2
.dba2	bba2	f0 05		beq $bba9			beq 	_SNDUNot2
.dba4	bba4	a2 02		ldx #$02			ldx 	#2
.dba6	bba6	20 b4 bb	jsr $bbb4			jsr 	SNDUpdateChannel
.dba9	bba9					_SNDUNot2:
.dba9	bba9	ad 3e 08	lda $083e			lda 	SNDTimeLeft+3
.dbac	bbac	f0 05		beq $bbb3			beq 	_SNDUNot3
.dbae	bbae	a2 03		ldx #$03			ldx 	#3
.dbb0	bbb0	20 b4 bb	jsr $bbb4			jsr 	SNDUpdateChannel
.dbb3	bbb3					_SNDUNot3:
.dbb3	bbb3	60		rts				rts
.dbb4	bbb4					SNDUpdateChannel:
.dbb4	bbb4	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbb6	bbb6	f0 2c		beq $bbe4			beq 	_SNDUCExit
.dbb8	bbb8	3a		dec a				dec 	a 							; decrement and update timer
.dbb9	bbb9	9d 3b 08	sta $083b,x			sta 	SNDTimeLeft,x
.dbbc	bbbc	f0 1d		beq $bbdb			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbbe	bbbe	bd 3f 08	lda $083f,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbc1	bbc1	1d 43 08	ora $0843,x			ora 	SNDAdjustHigh,x
.dbc4	bbc4	f0 1e		beq $bbe4			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbc6	bbc6	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbc7	bbc7	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dbca	bbca	7d 3f 08	adc $083f,x			adc 	SNDAdjustLow,x
.dbcd	bbcd	9d 2f 08	sta $082f,x			sta 	SNDPitchLow,x
.dbd0	bbd0	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x
.dbd3	bbd3	7d 43 08	adc $0843,x			adc 	SNDAdjustHigh,x
.dbd6	bbd6	29 03		and #$03			and 	#3
.dbd8	bbd8	9d 33 08	sta $0833,x			sta 	SNDPitchHigh,x
.dbdb	bbdb					_SNDUCUpdate:
.dbdb	bbdb	8a		txa				txa 								; which channel.
.dbdc	bbdc	48		pha				pha
.dbdd	bbdd	20 a0 ba	jsr $baa0			jsr 	SNDUpdateNote 				; update the current note
.dbe0	bbe0	68		pla				pla
.dbe1	bbe1	20 61 ba	jsr $ba61			jsr 	SNDCheckChannel 			; more to do ?
.dbe4	bbe4					_SNDUCExit:
.dbe4	bbe4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbe5	bbe5					Export_KNLInputSingleCharacter:
.dbe5	bbe5					PagedInputSingleCharacter:
.dbe5	bbe5	da		phx				phx
.dbe6	bbe6	5a		phy				phy
.dbe7	bbe7					_EISCWait:
.dbe7	bbe7	a5 01		lda $01				lda 	1 							; save I/O 0
.dbe9	bbe9	48		pha				pha
.dbea	bbea	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbec	bbec	38		sec				sec 								; calculate timer - LastTick
.dbed	bbed	ad 59 d6	lda $d659			lda 	$D659
.dbf0	bbf0	aa		tax				tax 								; saving timer in X
.dbf1	bbf1	ed 5f 06	sbc $065f			sbc 	LastTick
.dbf4	bbf4	c9 03		cmp #$03			cmp 	#3
.dbf6	bbf6	90 06		bcc $bbfe			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbf8	bbf8	8e 5f 06	stx $065f			stx 	LastTick 					; update last timer
.dbfb	bbfb	20 8b bb	jsr $bb8b			jsr 	PagedSNDUpdate 							; go do the code.
.dbfe	bbfe					_NoFireTick:
.dbfe	bbfe	68		pla				pla 								; restore I/O 0
.dbff	bbff	85 01		sta $01				sta 	1
.dc01	bc01	20 0b bc	jsr $bc0b			jsr 	CheckKeyPressed
.dc04	bc04	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc06	bc06	f0 df		beq $bbe7			beq 	_EISCWait
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
.dc0b	bc0b					Export_KNLInkey:
.dc0b	bc0b					CheckKeyPressed:
.dc0b	bc0b	a9 47		lda #$47			lda     #<event 					; tell kernel where events go.
.dc0d	bc0d	85 f0		sta $f0				sta     kernel.args.events+0
.dc0f	bc0f	a9 08		lda #$08			lda     #>event
.dc11	bc11	85 f1		sta $f1				sta     kernel.args.events+1
.dc13	bc13	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc16	bc16	b0 0b		bcs $bc23			bcs 	_CKPNoEvent 				; no event
.dc18	bc18	ad 47 08	lda $0847			lda     event.type
.dc1b	bc1b	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc1d	bc1d	d0 04		bne $bc23			bne 	_CKPNoEvent
.dc1f	bc1f	ad 4c 08	lda $084c			lda     event.key.ascii
.dc22	bc22	60		rts				rts
.dc23	bc23					_CKPNoEvent:
.dc23	bc23	a9 00		lda #$00			lda 	#0
.dc25	bc25	60		rts				rts
.dc26	bc26					Export_EXTBreakCheck:
.dc26	bc26	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc29	bc29					Export_EXTReadController:
.dc29	bc29	da		phx				phx
.dc2a	bc2a	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc2c	bc2c	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc2e	bc2e	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc31	bc31	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc33	bc33	fa		plx				plx
.dc34	bc34	60		rts				rts
.0847						event
>0847						type        .byte   ?   ; Enum above
>0848						buf         .byte   ?   ; page id or zero
>0849						ext         .byte   ?   ; page id or zero
.084a						key
>084a						keyboard    .byte   ?   ; Keyboard ID
>084b						raw         .byte   ?   ; Raw key ID
>084c						ascii       .byte   ?   ; ASCII value
>084d						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084a						mouse
.084a						delta
>084a						x           .byte   ?
>084b						y           .byte   ?
>084c						z           .byte   ?
>084d						buttons     .byte   ?
.084a						clicks
>084a						inner       .byte   ?
>084b						middle      .byte   ?
>084c						outer       .byte   ?
.084a						udp
>084a						token       .byte   ?   ; TODO: break out into fields
.084a						file
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						data
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						read        .byte   ?   ; Number of bytes actually read
.084c						wrote
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						wrote       .byte   ?   ; Number of bytes actually read
.084a						directory
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						volume
>084c						len         .byte   ?   ; Length of volname (in buf)
>084d						flags       .byte   ?   ; block size, text encoding
.084c						file
>084c						len         .byte   ?
>084d						flags       .byte   ?   ; block scale, text encoding, approx size
.084c						free
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc35	bc35					Export_KNLOpenFileWrite:
.dc35	bc35	48		pha				pha
.dc36	bc36	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc38	bc38	80 03		bra $bc3d			bra 	KNLOpenStart
.dc3a	bc3a					Export_KNLOpenFileRead:
.dc3a	bc3a	48		pha				pha
.dc3b	bc3b	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc3d	bc3d					KNLOpenStart:
.dc3d	bc3d	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc3f	bc3f	68		pla				pla
.dc40	bc40	20 7b bc	jsr $bc7b			jsr 	KNLSetupFileName
.dc43	bc43	a9 47		lda #$47			lda     #event & $FF 				; tell kernel where to store event data
.dc45	bc45	85 f0		sta $f0				sta     kernel.args.events+0
.dc47	bc47	a9 08		lda #$08			lda     #event >> 8
.dc49	bc49	85 f1		sta $f1				sta     kernel.args.events+1
.dc4b	bc4b	ad 5c 06	lda $065c			lda 	DefaultDrive 				; currently drive zero only.
.dc4e	bc4e	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc50	bc50	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc53	bc53	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc55	bc55	b0 1d		bcs $bc74			bcs     _out
.dc57	bc57					_loop
.dc57	bc57	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc5a	bc5a	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc5d	bc5d	b0 f8		bcs $bc57			bcs     _loop
.dc5f	bc5f	ad 47 08	lda $0847			lda 	event.type
.dc62	bc62	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc64	bc64	f0 0a		beq $bc70			beq 	_success
.dc66	bc66	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc68	bc68	f0 0a		beq $bc74			beq 	_out
.dc6a	bc6a	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc6c	bc6c	f0 06		beq $bc74			beq 	_out
.dc6e	bc6e	80 e7		bra $bc57			bra     _loop
.dc70	bc70					_success
.dc70	bc70	ad 4a 08	lda $084a			lda     event.file.stream
.dc73	bc73	18		clc				clc
.dc74	bc74					_out
.dc74	bc74	60		rts				rts
.dc75	bc75					Export_KNLCloseFile:
.dc75	bc75	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc77	bc77	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc7a	bc7a	60		rts				rts
.dc7b	bc7b					KNLSetupFileName:
.dc7b	bc7b	5a		phy				phy 								; save Y on stack
.dc7c	bc7c	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc7e	bc7e	86 37		stx $37				stx 	zTemp0+1
.dc80	bc80	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dc82	bc82	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dc84	bc84	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dc86	bc86					_KNLGetLength:
.dc86	bc86	c8		iny				iny
.dc87	bc87	b1 36		lda ($36),y			lda 	(zTemp0),y
.dc89	bc89	d0 fb		bne $bc86			bne 	_KNLGetLength
.dc8b	bc8b	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dc8d	bc8d	7a		ply				ply
.dc8e	bc8e	60		rts				rts
=64						KNLBufLen = 64 								; read buffer size.
.084e						KNLStream:
>084e								.byte   ?
.084f						KNLBuf:
>084f								.fill   KNLBufLen
.088f						KNLNext:
>088f								.byte   ?
.0890						KNLEnd:
>0890								.byte   ?
.dc8f	bc8f					Export_KNLReadByteInit:
.dc8f	bc8f	8d 4e 08	sta $084e			sta     KNLStream 					; save stream
.dc92	bc92	9c 8f 08	stz $088f			stz     KNLNext 					; reset buffer
.dc95	bc95	9c 90 08	stz $0890			stz     KNLEnd
.dc98	bc98	60		rts				rts
.dc99	bc99					Export_KNLReadByte:
.dc99	bc99	da		phx				phx
.dc9a	bc9a	ae 8f 08	ldx $088f			ldx     KNLNext 					; all data consumed ?
.dc9d	bc9d	ec 90 08	cpx $0890			cpx     KNLEnd
.dca0	bca0	d0 0d		bne $bcaf			bne     _KNLRBGetNextByte
.dca2	bca2	20 b8 bc	jsr $bcb8			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dca5	bca5	b0 0f		bcs $bcb6			bcs     _KNLRBError 				; error has occurred on read.
.dca7	bca7	8d 90 08	sta $0890			sta     KNLEnd 						; # read is the number available
.dcaa	bcaa	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcac	bcac	8e 8f 08	stx $088f			stx     KNLNext
.dcaf	bcaf					_KNLRBGetNextByte:
.dcaf	bcaf	bd 4f 08	lda $084f,x			lda     KNLBuf,x 					; get the next data item
.dcb2	bcb2	ee 8f 08	inc $088f			inc     KNLNext 					; and advance the index
.dcb5	bcb5	18		clc				clc 								; succeeded
.dcb6	bcb6					_KNLRBError:
.dcb6	bcb6	fa		plx				plx
.dcb7	bcb7	60		rts				rts
.dcb8	bcb8					KNLRBGetNextBlock:
.dcb8	bcb8	ad 4e 08	lda $084e			lda     KNLStream 					; set stream to read from
.dcbb	bcbb	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcbd	bcbd	a9 40		lda #$40			lda     #KNLBufLen 					; set bytes to read.
.dcbf	bcbf	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dcc1	bcc1	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dcc4	bcc4	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dcc6	bcc6	b0 2e		bcs $bcf6			bcs     _KGNBExitFail               ; report as general error
.dcc8	bcc8					_KGRBEventLoop:
.dcc8	bcc8	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dccb	bccb	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcce	bcce	b0 f8		bcs $bcc8			bcs     _KGRBEventLoop
.dcd0	bcd0	ad 47 08	lda $0847			lda 	event.type 					; get event
.dcd3	bcd3	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcd5	bcd5	f0 0a		beq $bce1			beq     _KNLRBGetNextByte
.dcd7	bcd7	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcd9	bcd9	f0 1b		beq $bcf6			beq 	_KGNBExitFail
.dcdb	bcdb	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcdd	bcdd	f0 17		beq $bcf6			beq 	_KGNBExitFail
.dcdf	bcdf	80 e7		bra $bcc8			bra 	_KGRBEventLoop
.dce1	bce1					_KNLRBGetNextByte:
.dce1	bce1	a9 4f		lda #$4f			lda     #<KNLBuf 					; Set the target buffer
.dce3	bce3	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dce5	bce5	a9 08		lda #$08			lda     #>KNLBuf
.dce7	bce7	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dce9	bce9	ad 4d 08	lda $084d			lda     event.file.data.read 		; Set the target length
.dcec	bcec	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dcee	bcee	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dcf1	bcf1	ad 4d 08	lda $084d			lda    event.file.data.read 		; Return # of bytes read (in A)
.dcf4	bcf4	18		clc				clc
.dcf5	bcf5	60		rts				rts
.dcf6	bcf6					_KGNBExitFail:
.dcf6	bcf6	38		sec				sec
.dcf7	bcf7	60		rts				rts
.dcf8	bcf8					Export_KNLWriteBlock:
.dcf8	bcf8	48		pha				pha
.dcf9	bcf9	da		phx				phx
.dcfa	bcfa	5a		phy				phy
.dcfb	bcfb	85 f3		sta $f3		        sta     kernel.args.file.write.stream ; save the stream.
.dcfd	bcfd	a5 36		lda $36		        lda     zTemp0 						; save the data location.
.dcff	bcff	85 fb		sta $fb		        sta     kernel.args.file.write.buf+0
.dd01	bd01	a5 37		lda $37		        lda     zTemp0+1
.dd03	bd03	85 fc		sta $fc		        sta     kernel.args.file.write.buf+1
.dd05	bd05	86 fd		stx $fd		        stx     kernel.args.file.write.buflen ; Set the buffer length
.dd07	bd07	20 64 ff	jsr $ff64	        jsr     kernel.File.Write 			; write it out.
.dd0a	bd0a	a9 38		lda #$38	        lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd0c	bd0c	b0 1e		bcs $bd2c	        bcs 	_KWBFailed
.dd0e	bd0e					_KNLWLoop:
.dd0e	bd0e	20 0c ff	jsr $ff0c	       	jsr     kernel.Yield
.dd11	bd11	20 00 ff	jsr $ff00	        jsr     kernel.NextEvent
.dd14	bd14	b0 f8		bcs $bd0e	        bcs     _KNLWLoop
.dd16	bd16	ad 47 08	lda $0847	        lda     event.type 					; various errors.
.dd19	bd19	c9 32		cmp #$32	        cmp     #kernel.event.file.CLOSED
.dd1b	bd1b	f0 0f		beq $bd2c	        beq 	_KWBFailed
.dd1d	bd1d	c9 38		cmp #$38	        cmp     #kernel.event.file.ERROR
.dd1f	bd1f	f0 0b		beq $bd2c	        beq 	_KWBFailed
.dd21	bd21	c9 30		cmp #$30	        cmp     #kernel.event.file.EOF
.dd23	bd23	f0 07		beq $bd2c	        beq 	_KWBFailed
.dd25	bd25	c9 2e		cmp #$2e	        cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd27	bd27	d0 e5		bne $bd0e	      	bne 	_KNLWLoop
.dd29	bd29	18		clc		      	clc
.dd2a	bd2a	80 01		bra $bd2d	      	bra 	_KWBExit
.dd2c	bd2c					_KWBFailed:
.dd2c	bd2c	38		sec				sec
.dd2d	bd2d					_KWBExit:
.dd2d	bd2d	7a		ply				ply
.dd2e	bd2e	fa		plx				plx
.dd2f	bd2f	68		pla				pla
.dd30	bd30	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
