
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Tue Sep 20 11:05:31 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_GETDATEDOLLARLPAREN              = $88; $88 GETDATE$(
=$89					KWD_GETTIMEDOLLARLPAREN              = $89; $89 GETTIME$(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_PAGE                             = $91; $91 PAGE
=$92					KWD_RIGHTDOLLARLPAREN                = $92; $92 RIGHT$(
=$93					KWD_RNDLPAREN                        = $93; $93 RND(
=$94					KWD_SGNLPAREN                        = $94; $94 SGN(
=$95					KWD_SPCLPAREN                        = $95; $95 SPC(
=$96					KWD_STRDOLLARLPAREN                  = $96; $96 STR$(
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 2b 81	jsr $812b			jsr 	NewCommand 					; erase current program
.8016	20 15 83	jsr $8315			jsr 	BackloadProgram
.8019	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.801b	85 30		sta $30				sta 	0+codePtr
.801d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.801f	85 31		sta $31				sta 	1+codePtr
.8021	a0 04		ldy #$04			ldy 	#4
.8023	a2 01		ldx #$01			ldx 	#1
.8025	20 e3 81	jsr $81e3			jsr 	EvaluateTerm
.8028					WarmStart:
>8028	db						.byte 	$DB 						; causes a break in the emulator
.8029	80 fd		bra $8028			bra 	WarmStart
.802b					ErrorHandler:
>802b	db						.byte 	$DB 						; causes a break in the emulator
.802c	4c 2b 80	jmp $802b			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.802f					VectorSetPunc:
>802f	4f 87					.word	SyntaxError                      ; $00 <<
>8031	4f 87					.word	SyntaxError                      ; $01 <=
>8033	4f 87					.word	SyntaxError                      ; $02 <>
>8035	4f 87					.word	SyntaxError                      ; $03 !!3
>8037	4f 87					.word	SyntaxError                      ; $04 ><
>8039	4f 87					.word	SyntaxError                      ; $05 >=
>803b	4f 87					.word	SyntaxError                      ; $06 >>
>803d	4f 87					.word	SyntaxError                      ; $07 !!7
>803f	4f 87					.word	SyntaxError                      ; $08 !!8
>8041	4f 87					.word	SyntaxError                      ; $09 !!9
>8043	4f 87					.word	SyntaxError                      ; $0a !!10
>8045	4f 87					.word	SyntaxError                      ; $0b !!11
>8047	4f 87					.word	SyntaxError                      ; $0c !!12
>8049	4f 87					.word	SyntaxError                      ; $0d !!13
>804b	4f 87					.word	SyntaxError                      ; $0e !!14
>804d	4f 87					.word	SyntaxError                      ; $0f !!15
>804f	4f 87					.word	SyntaxError                      ; $10 @
>8051	4f 87					.word	SyntaxError                      ; $11 !!17
>8053	4f 87					.word	SyntaxError                      ; $12 !!18
>8055	4f 87					.word	SyntaxError                      ; $13 [
>8057	4f 87					.word	SyntaxError                      ; $14 \
>8059	4f 87					.word	SyntaxError                      ; $15 ]
>805b	4f 87					.word	SyntaxError                      ; $16 ^
>805d	4f 87					.word	SyntaxError                      ; $17 _
>805f	4f 87					.word	SyntaxError                      ; $18 `
>8061	4f 87					.word	SyntaxError                      ; $19 !!25
>8063	4f 87					.word	SyntaxError                      ; $1a !!26
>8065	4f 87					.word	SyntaxError                      ; $1b {
>8067	4f 87					.word	SyntaxError                      ; $1c |
>8069	4f 87					.word	SyntaxError                      ; $1d }
>806b	4f 87					.word	SyntaxError                      ; $1e ~
>806d	4f 87					.word	SyntaxError                      ; $1f [7m<7F>[m
>806f	4f 87					.word	SyntaxError                      ; $20
>8071	4f 87					.word	SyntaxError                      ; $21 !
>8073	4f 87					.word	SyntaxError                      ; $22 "
>8075	4f 87					.word	SyntaxError                      ; $23 #
>8077	4f 87					.word	SyntaxError                      ; $24 $
>8079	4f 87					.word	SyntaxError                      ; $25 %
>807b	4f 87					.word	SyntaxError                      ; $26 &
>807d	4f 87					.word	SyntaxError                      ; $27 '
>807f	4f 87					.word	SyntaxError                      ; $28 (
>8081	4f 87					.word	SyntaxError                      ; $29 )
>8083	4f 87					.word	SyntaxError                      ; $2a *
>8085	4f 87					.word	SyntaxError                      ; $2b +
>8087	4f 87					.word	SyntaxError                      ; $2c ,
>8089	4f 87					.word	SyntaxError                      ; $2d -
>808b	4f 87					.word	SyntaxError                      ; $2e .
>808d	4f 87					.word	SyntaxError                      ; $2f /
>808f	4f 87					.word	SyntaxError                      ; $30 0
>8091	4f 87					.word	SyntaxError                      ; $31 1
>8093	4f 87					.word	SyntaxError                      ; $32 2
>8095	4f 87					.word	SyntaxError                      ; $33 3
>8097	4f 87					.word	SyntaxError                      ; $34 4
>8099	4f 87					.word	SyntaxError                      ; $35 5
>809b	4f 87					.word	SyntaxError                      ; $36 6
>809d	4f 87					.word	SyntaxError                      ; $37 7
>809f	4f 87					.word	SyntaxError                      ; $38 8
>80a1	4f 87					.word	SyntaxError                      ; $39 9
>80a3	4f 87					.word	SyntaxError                      ; $3a :
>80a5	4f 87					.word	SyntaxError                      ; $3b ;
>80a7	4f 87					.word	SyntaxError                      ; $3c <
>80a9	4f 87					.word	SyntaxError                      ; $3d =
>80ab	4f 87					.word	SyntaxError                      ; $3e >
>80ad	4f 87					.word	SyntaxError                      ; $3f ?
.80af					VectorSet0:
>80af	4f 87					.word	SyntaxError                      ; $80 !0:EOF
>80b1	4f 87					.word	SyntaxError                      ; $81 !1:SH1
>80b3	4f 87					.word	SyntaxError                      ; $82 !2:SH2
>80b5	4f 87					.word	SyntaxError                      ; $83 ABS(
>80b7	4f 87					.word	SyntaxError                      ; $84 ALLOC(
>80b9	4f 87					.word	SyntaxError                      ; $85 ASC(
>80bb	4f 87					.word	SyntaxError                      ; $86 CHR$(
>80bd	4f 87					.word	SyntaxError                      ; $87 DEC(
>80bf	4f 87					.word	SyntaxError                      ; $88 GETDATE$(
>80c1	4f 87					.word	SyntaxError                      ; $89 GETTIME$(
>80c3	4f 87					.word	SyntaxError                      ; $8a HEX$(
>80c5	4f 87					.word	SyntaxError                      ; $8b INT(
>80c7	4f 87					.word	SyntaxError                      ; $8c ISVAL(
>80c9	4f 87					.word	SyntaxError                      ; $8d LEFT$(
>80cb	4f 87					.word	SyntaxError                      ; $8e LEN(
>80cd	4f 87					.word	SyntaxError                      ; $8f MID$(
>80cf	4f 87					.word	SyntaxError                      ; $90 NOT
>80d1	4f 87					.word	SyntaxError                      ; $91 PAGE
>80d3	4f 87					.word	SyntaxError                      ; $92 RIGHT$(
>80d5	4f 87					.word	SyntaxError                      ; $93 RND(
>80d7	4f 87					.word	SyntaxError                      ; $94 SGN(
>80d9	4f 87					.word	SyntaxError                      ; $95 SPC(
>80db	4f 87					.word	SyntaxError                      ; $96 STR$(
>80dd	4f 87					.word	SyntaxError                      ; $97 VAL(
>80df	4f 87					.word	SyntaxError                      ; $98 FOR
>80e1	4f 87					.word	SyntaxError                      ; $99 IF
>80e3	4f 87					.word	SyntaxError                      ; $9a PROC
>80e5	4f 87					.word	SyntaxError                      ; $9b REPEAT
>80e7	4f 87					.word	SyntaxError                      ; $9c WHILE
>80e9	4f 87					.word	SyntaxError                      ; $9d ENDIF
>80eb	4f 87					.word	SyntaxError                      ; $9e ENDPROC
>80ed	4f 87					.word	SyntaxError                      ; $9f NEXT
>80ef	4f 87					.word	SyntaxError                      ; $a0 UNTIL
>80f1	4f 87					.word	SyntaxError                      ; $a1 WEND
>80f3	4f 87					.word	SyntaxError                      ; $a2 CLS
>80f5	4f 87					.word	SyntaxError                      ; $a3 DATA
>80f7	4f 87					.word	SyntaxError                      ; $a4 DIM
>80f9	4f 87					.word	SyntaxError                      ; $a5 GOSUB
>80fb	4f 87					.word	SyntaxError                      ; $a6 GOTO
>80fd	4f 87					.word	SyntaxError                      ; $a7 LET
>80ff	4f 87					.word	SyntaxError                      ; $a8 PRINT
>8101	4f 87					.word	SyntaxError                      ; $a9 READ
>8103	4f 87					.word	SyntaxError                      ; $aa REM
>8105	4f 87					.word	SyntaxError                      ; $ab RETURN
>8107	4f 87					.word	SyntaxError                      ; $ac THEN
>8109	4f 87					.word	SyntaxError                      ; $ad TO
.810b					VectorSet1:
>810b	4f 87					.word	SyntaxError                      ; $80 !0:EOF
>810d	4f 87					.word	SyntaxError                      ; $81 !1:SH1
>810f	4f 87					.word	SyntaxError                      ; $82 !2:SH2
>8111	4f 87					.word	SyntaxError                      ; $83 ASSERT
>8113	4f 87					.word	SyntaxError                      ; $84 CLEAR
>8115	4f 87					.word	SyntaxError                      ; $85 END
>8117	4f 87					.word	SyntaxError                      ; $86 LIST
>8119	4f 87					.word	SyntaxError                      ; $87 NEW
>811b	4f 87					.word	SyntaxError                      ; $88 RESTORE
>811d	4f 87					.word	SyntaxError                      ; $89 RUN
>811f	4f 87					.word	SyntaxError                      ; $8a STOP
.8121					VectorSet2:
>8121	4f 87					.word	SyntaxError                      ; $80 !0:EOF
>8123	4f 87					.word	SyntaxError                      ; $81 !1:SH1
>8125	4f 87					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8127					ClearCommand:
.8127	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8128					EndCommand:
.8128	4c 28 80	jmp $8028			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.812b					NewCommand:
.812b	20 c2 82	jsr $82c2			jsr 	MemoryNew
.812e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8131	20 27 81	jsr $8127			jsr 	ClearCommand 				; clear everything.
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.8135					EncodeNumberStart:
.8135	38		sec				sec
.8136	80 01		bra $8139			bra 	EncodeNumberContinue+1
.8138					EncodeNumberContinue:
.8138	18		clc				clc
.8139	08		php				php 								; save reset.
.813a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.813c	f0 0b		beq $8149			beq 	_ENIsOkay
.813e	c9 30		cmp #$30			cmp 	#"0"
.8140	90 04		bcc $8146			bcc 	_ENBadNumber
.8142	c9 3a		cmp #$3a			cmp 	#"9"+1
.8144	90 03		bcc $8149			bcc 	_ENIsOkay
.8146					_ENBadNumber:
.8146	28		plp				plp 								; throw saved reset
.8147					_ENFail:
.8147	18		clc				clc 								; not allowed
.8148	60		rts				rts
.8149					_ENIsOkay:
.8149	28		plp				plp 								; are we restarting
.814a	90 0c		bcc $8158			bcc 	_ENNoRestart
.814c					_ENStartEncode:
.814c	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.814e	20 95 82	jsr $8295			jsr 	NSMMantissaByte
.8151	a9 01		lda #$01			lda 	#ESTA_Low
.8153					_ENExitChange:
.8153	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8156	38		sec				sec
.8157	60		rts				rts
.8158					_ENNoRestart:
.8158	48		pha				pha 								; save on stack.
.8159	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.815c	c9 01		cmp #$01			cmp 	#ESTA_Low
.815e	f0 05		beq $8165			beq  	_ESTALowState
.8160	c9 02		cmp #$02			cmp 	#ESTA_High
.8162	f0 23		beq $8187			beq 	_ESTAHighState
>8164	db						.byte 	$DB 						; causes a break in the emulator
.8165					_ESTALowState:
.8165	68		pla				pla 								; get value back
.8166	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8168	f0 27		beq $8191			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.816a	29 0f		and #$0f			and 	#15 						; make digit
.816c	85 36		sta $36				sta 	zTemp0 						; save it.
.816e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8171	0a		asl a				asl 	a
.8172	0a		asl a				asl 	a
.8173	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8176	0a		asl a				asl 	a
.8177	65 36		adc $36				adc 	zTemp0
.8179	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.817c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.817e	90 05		bcc $8185			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8180	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8182	8d 05 07	sta $0705			sta 	EncodeState
.8185					_ESTANoSwitch:
.8185	38		sec				sec
.8186	60		rts				rts
.8187					_ESTAHighState:
.8187	68		pla				pla 								; get value back
.8188	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.818a	f0 05		beq $8191			beq 	_ESTASwitchFloat
.818c	20 92 81	jsr $8192			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.818f	38		sec				sec
.8190	60		rts				rts
.8191					_ESTASwitchFloat:
>8191	db						.byte 	$DB 						; causes a break in the emulator
.8192					ESTAShiftDigitIntoMantissa:
.8192	29 0f		and #$0f			and 	#15 						; save digit
.8194	48		pha				pha
.8195	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8198	48		pha				pha
.8199	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.819c	48		pha				pha
.819d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81a0	48		pha				pha
.81a1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.81a4	48		pha				pha
.81a5	20 a8 82	jsr $82a8			jsr 	NSMShiftLeft 				; x 2
.81a8	20 a8 82	jsr $82a8			jsr 	NSMShiftLeft 				; x 4
.81ab	18		clc				clc 								; pop mantissa and add
.81ac	68		pla				pla
.81ad	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.81b0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81b3	68		pla				pla
.81b4	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.81b7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81ba	68		pla				pla
.81bb	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.81be	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81c1	68		pla				pla
.81c2	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.81c5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.81c8	20 a8 82	jsr $82a8			jsr 	NSMShiftLeft 				; x 10
.81cb	68		pla				pla 								; add digit
.81cc	18		clc				clc
.81cd	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.81d0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81d3	90 0d		bcc $81e2			bcc 	_ESTASDExit
.81d5	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.81d8	d0 08		bne $81e2			bne 	_ESTASDExit
.81da	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.81dd	d0 03		bne $81e2			bne 	_ESTASDExit
.81df	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.81e2					_ESTASDExit:
.81e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.81e3					EvaluateTerm:
.81e3	b1 30		lda ($30),y			lda 	(codePtr),y
.81e5	30 18		bmi $81ff			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.81e7	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.81e9	b0 3f		bcs $822a			bcs 	_ETVariable
.81eb	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.81ed	90 3f		bcc $822e			bcc 	_ETPuncUnary
.81ef	c9 3a		cmp #$3a			cmp 	#'9'+1
.81f1	b0 3b		bcs $822e			bcs 	_ETPuncUnary
.81f3	20 35 81	jsr $8135			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.81f6					_ETNumber:
.81f6	c8		iny				iny 								; keep encoding until we have the numbers
.81f7	b1 30		lda ($30),y			lda 	(codePtr),y
.81f9	20 38 81	jsr $8138			jsr 	EncodeNumberContinue
.81fc	b0 f8		bcs $81f6			bcs 	_ETNumber
.81fe	60		rts				rts
.81ff					_ETCheckUnary:
.81ff	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8201	f0 11		beq $8214			beq 	_ETString
.8203	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8205	90 0a		bcc $8211			bcc 	_ETSyntaxError
.8207	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.8209	b0 06		bcs $8211			bcs 	_ETSyntaxError
.820b	da		phx				phx 								; push X on the stack
.820c	0a		asl a				asl 	a 							; put vector x 2 into X
.820d	aa		tax				tax
.820e	7c af 80	jmp ($80af,x)			jmp 	(VectorSet0,x) 				; and do it.
.8211					_ETSyntaxError:
.8211	4c 4f 87	jmp $874f			jmp 	SyntaxError
.8214					_ETString:
.8214	c8		iny				iny 								; look at length
.8215	b1 30		lda ($30),y			lda 	(codePtr),y
.8217	48		pha				pha
.8218	c8		iny				iny 								; first character
.8219	20 fe 82	jsr $82fe			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.821c	68		pla				pla 								; restore count and save
.821d	85 36		sta $36				sta 	zTemp0
.821f	98		tya				tya 								; add length + 1 to Y
.8220	38		sec				sec
.8221	65 36		adc $36				adc 	zTemp0
.8223	a8		tay				tay
.8224	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8226	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8229	60		rts				rts
.822a					_ETVariable:
>822a	db						.byte 	$DB 						; causes a break in the emulator
.822b	4c ff ff	jmp $ffff			jmp 	$FFFF
.822e					_ETPuncUnary:
>822e	db						.byte 	$DB 						; causes a break in the emulator
.822f	c8		iny				iny 								; consume the unary character
.8230	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8232	f0 38		beq $826c			beq 	_ETUnaryNegate
.8234	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8236	f0 44		beq $827c			beq 	_ETDereference
.8238	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.823a	f0 4d		beq $8289			beq 	_ETParenthesis
.823c	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.823e	f0 49		beq $8289			beq 	_ETStringReference
.8240	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8242	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8244	f0 0e		beq $8254			beq 	_ETIndirection
.8246	e6 36		inc $36				inc 	zTemp0
.8248	c9 14		cmp #$14			cmp 	#KWD_BACKSLASH				; word indirection (1) \
.824a	f0 08		beq $8254			beq 	_ETIndirection
.824c	e6 36		inc $36				inc 	zTemp0
.824e	e6 36		inc $36				inc 	zTemp0
.8250	c9 21		cmp #$21			cmp 	#KWD_PLING 					; long indirection (3) !
.8252	d0 bd		bne $8211			bne 	_ETSyntaxError
.8254					_ETIndirection:
.8254	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-3) on the stack
.8256	48		pha				pha
.8257	20 e3 81	jsr $81e3			jsr 	EvaluateTerm				; evaluate the term
.825a	20 89 82	jsr $8289			jsr 	Dereference 				; dereference it.
.825d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8260	d0 07		bne $8269			bne 	_ETTypeMismatch
.8262	68		pla				pla 								; indirection 0-3
.8263	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8265	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8268	60		rts				rts
.8269					_ETTypeMismatch:
.8269	4c 59 87	jmp $8759			jmp 	TypeError
.826c					_ETUnaryNegate:
.826c	20 e3 81	jsr $81e3			jsr 	EvaluateTerm				; evaluate the term
.826f	20 89 82	jsr $8289			jsr 	Dereference 				; dereference it.
.8272	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8275	29 10		and #$10			and 	#NSTString
.8277	d0 f0		bne $8269			bne 	_ETTypeMismatch
.8279	4c 8a 82	jmp $828a			jmp 	NSMNegate
.827c					_ETDereference:
.827c	20 e3 81	jsr $81e3			jsr 	EvaluateTerm				; evaluate the term
.827f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8282	29 20		and #$20			and 	#NSBIsReference
.8284	f0 e3		beq $8269			beq 	_ETTypeMismatch
.8286	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer
.8289					_ETStringReference:
.8289					_ETParenthesis:
.8289					Dereference:
.8289	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.828a					NSMNegate:
.828a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.828d	49 80		eor #$80			eor 	#NSBIsNegative
.828f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8292	60		rts				rts
.8293					NSMMantissaZero:
.8293	a9 00		lda #$00			lda 	#0
.8295					NSMMantissaByte:
.8295	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8298	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.829b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.829e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.82a1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.82a4	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.82a7	60		rts				rts
.82a8					NSMShiftLeft:
.82a8	1e 08 06	asl $0608,x			asl 	NSMantissa0,x
.82ab	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.82ae	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.82b1	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.82b4	60		rts				rts
.82b5					NSMShiftRight:
.82b5	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.82b8	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.82bb	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.82be	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.82c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.874f					SyntaxError:
.874f	a9 02		lda #$02		lda	#2
.8751	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8754					RangeError:
.8754	a9 04		lda #$04		lda	#4
.8756	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8759					TypeError:
.8759	a9 05		lda #$05		lda	#5
.875b	4c 2b 80	jmp $802b		jmp	ErrorHandler
.875e					ErrorText:
>875e	42 72 65 61 6b 00			.text	"Break",0
>8764	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>876c	72 72 6f 72 00
>8771	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8779	20 62 79 20 7a 65 72 6f 00
>8782	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>878a	61 6e 67 65 00
>878f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8797	6d 61 74 63 68 00
>879d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>87a5	65 6d 6f 72 79 00
>87ab	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>87b3	61 72 67 75 6d 65 6e 74 00
>87bc	53 74 6f 70 00				.text	"Stop",0
>87c1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>87c9	6f 6f 20 6c 6f 6e 67 00
>87d1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>87d9	6e 20 66 61 69 6c 65 64 00
>87e2	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>87ea	61 74 61 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.82c2					MemoryNew:
.82c2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.82c4	85 30		sta $30				sta 	codePtr
.82c6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.82c8	85 31		sta $31				sta 	codePtr+1
.82ca	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.82cc	92 30		sta ($30)			sta 	(codePtr)
.82ce	60		rts				rts
.82cf					MemoryAppend:
.82cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.82d1	85 30		sta $30				sta 	codePtr
.82d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.82d5	85 31		sta $31				sta 	codePtr+1
.82d7					_MAFindEnd:
.82d7	b2 30		lda ($30)			lda 	(codePtr)
.82d9	f0 0d		beq $82e8			beq 	_MAFoundEnd
.82db	18		clc				clc
.82dc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.82de	65 30		adc $30				adc 	codePtr
.82e0	85 30		sta $30				sta 	codePtr
.82e2	90 02		bcc $82e6			bcc 	_CREExit
.82e4	e6 31		inc $31				inc 	codePtr+1
.82e6					_CREExit:
.82e6	80 ef		bra $82d7			bra 	_MAFindEnd
.82e8					_MAFoundEnd:
.82e8	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.82eb	c0 04		cpy #$04			cpy 	#4 							; blank line
.82ed	f0 0e		beq $82fd			beq 	_MANoLine
.82ef	a9 00		lda #$00			lda 	#0 							; end of program
.82f1	91 30		sta ($30),y			sta 	(codePtr),y
.82f3					_MACopy:
.82f3	88		dey				dey
.82f4	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.82f7	91 30		sta ($30),y			sta 	(codePtr),y
.82f9	c0 00		cpy #$00			cpy 	#0
.82fb	d0 f6		bne $82f3			bne 	_MACopy
.82fd					_MANoLine:
.82fd	60		rts				rts
.82fe					MemoryInline:
.82fe	98		tya				tya 								; put address into stack,x
.82ff	18		clc				clc
.8300	65 30		adc $30				adc 	codePtr
.8302	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8305	a5 31		lda $31				lda 	codePtr+1
.8307	69 00		adc #$00			adc 	#0
.8309	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.830c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.830f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8312	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8313					VariableOpen:
.8313	60		rts				rts
.8314					VariableClose:
.8314	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8315					BackloadProgram:
.8315	a2 ff		ldx #$ff			ldx 	#$FF
.8317	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.831a	30 1e		bmi $833a			bmi 	_BPExit
.831c					_BPCopy:
.831c	e8		inx				inx  								; copy byte in
.831d	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.8320	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.8323	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8326	30 0a		bmi $8332			bmi 	_BPEndLine 					; -ve = EOL
.8328	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.832a	d0 02		bne $832e			bne 	_BPNotTab
.832c	a9 20		lda #$20			lda 	#' '
.832e					_BPNotTab:
.832e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8330	b0 ea		bcs $831c			bcs 	_BPCopy
.8332					_BPEndLine:
.8332	20 f7 84	jsr $84f7			jsr 	TokeniseLine 				; tokenise the line.
.8335	20 cf 82	jsr $82cf			jsr 	MemoryAppend 				; append to current program
.8338	80 db		bra $8315			bra 	BackloadProgram
.833a					_BPExit:
.833a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.833b					TokeniseSearchTable:
.833b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.833d	85 36		sta $36				sta 	zTemp0
.833f	a0 00		ldy #$00			ldy 	#0
.8341	a9 80		lda #$80			lda 	#$80 						; token #
.8343	85 38		sta $38				sta 	zTemp1
.8345					_TSTLoop:
.8345	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8347	30 49		bmi $8392			bmi 	_TSTFail 					; -ve = end of table
.8349	f0 2e		beq $8379			beq 	_TSTNext 					; zero, check next it's a dummy
.834b	c8		iny				iny 								; get the hash
.834c	b1 36		lda ($36),y			lda 	(zTemp0),y
.834e	88		dey				dey
.834f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8352	d0 25		bne $8379			bne 	_TSTNext
.8354	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8357	38		sec				sec
.8358	ed 00 07	sbc $0700			sbc 	identStart
.835b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.835d	d0 1a		bne $8379			bne 	_TSTNext
.835f	5a		phy				phy 								; save Y , we might fail
.8360	c8		iny				iny 								; point to text
.8361	c8		iny				iny
.8362	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8365					_TSTCompareName:
.8365	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.8368	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.836a	d0 0c		bne $8378			bne 	_TSTNextPullY 				; fail, pullY and do next
.836c	e8		inx				inx
.836d	c8		iny				iny
.836e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8371	d0 f2		bne $8365			bne 	_TSTCompareName
.8373	7a		ply				ply 								; throw Y
.8374	a5 38		lda $38				lda 	zTemp1 						; get token #
.8376	38		sec				sec 								; return with CS = passed.
.8377	60		rts				rts
.8378					_TSTNextPullY:
.8378	7a		ply				ply 								; restore current, fall through.
.8379					_TSTNext:
.8379	e6 38		inc $38				inc 	zTemp1 						; token counter
.837b	98		tya				tya
.837c	18		clc				clc
.837d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.837f	1a		inc a				inc 	a 							; +1
.8380	1a		inc a				inc 	a 							; +2
.8381	a8		tay				tay
.8382	10 c1		bpl $8345			bpl 	_TSTLoop 					; if Y < $80 loop back
.8384	98		tya				tya 								; add Y to zTemp0 and reset Y
.8385	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8387	18		clc				clc  								; but have tables > 255 bytes
.8388	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.838a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.838c	90 b7		bcc $8345			bcc 	_TSTLoop
.838e	e6 37		inc $37				inc 	zTemp0+1
.8390	80 b3		bra $8345			bra 	_TSTLoop
.8392					_TSTFail:
.8392	18		clc				clc
.8393	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8394					KeywordSet0:
>8394	00 65					.text	0,$65,""               ; $80 !0:EOF
>8396	00 58					.text	0,$58,""               ; $81 !1:SH1
>8398	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>839a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>83a0	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>83a8	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>83ae	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>83b5	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>83bb	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $88 GETDATE$(
>83c3	45 24 28
>83c6	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $89 GETTIME$(
>83ce	45 24 28
>83d1	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>83d8	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>83de	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>83e6	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>83ee	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>83f4	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>83fb	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>8400	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $91 PAGE
>8406	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $92 RIGHT$(
>840e	28
>840f	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $93 RND(
>8415	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $94 SGN(
>841b	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $95 SPC(
>8421	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $96 STR$(
>8428	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>842e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>8433	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>8437	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>843d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>8445	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>844c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>8453	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>845b	43
>845c	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>8462	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>8469	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>846f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>8474	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>847a	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>847f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>8486	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>848c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>8491	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>8498	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>849e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>84a3	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>84ab	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>84b1	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>84b5	ff					.text	$FF
.84b6					KeywordSet1:
>84b6	00 65					.text	0,$65,""               ; $80 !0:EOF
>84b8	00 58					.text	0,$58,""               ; $81 !1:SH1
>84ba	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>84bc	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>84c4	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>84cb	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>84d0	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>84d6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>84db	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>84e3	45
>84e4	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>84e9	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>84ef	ff					.text	$FF
.84f0					KeywordSet2:
>84f0	00 65					.text	0,$65,""               ; $80 !0:EOF
>84f2	00 58					.text	0,$58,""               ; $81 !1:SH1
>84f4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>84f6	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.84f7					TokeniseLine:
.84f7	20 52 86	jsr $8652			jsr 	FixLineBufferCase 			; fix line case
.84fa	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.84fc	8d 06 07	sta $0706			sta 	tokenOffset
.84ff	9c 07 07	stz $0707			stz 	tokenLineNumber
.8502	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8505	a2 ff		ldx #$ff			ldx 	#$FF
.8507					_TKFindFirst:
.8507	e8		inx				inx
.8508	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.850b	f0 70		beq $857d			beq 	_TKExit
.850d	c9 20		cmp #$20			cmp 	#' '
.850f	90 f6		bcc $8507			bcc 	_TKFindFirst
.8511	c9 30		cmp #$30			cmp 	#'0'
.8513	90 07		bcc $851c			bcc 	_TKNoLineNumber
.8515	c9 3a		cmp #$3a			cmp 	#'9'+1
.8517	b0 03		bcs $851c			bcs 	_TKNoLineNumber
.8519	20 7c 86	jsr $867c			jsr 	TokeniseExtractLineNumber
.851c					_TKNoLineNumber:
.851c					_TKTokeniseLoop:
.851c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.851f	f0 5c		beq $857d			beq 	_TKExit
.8521	e8		inx				inx
.8522	c9 20		cmp #$20			cmp 	#' '
.8524	f0 f6		beq $851c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8526	ca		dex				dex 								; undo last get, A contains character, X is position.
.8527	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8529	f0 58		beq $8583			beq 	_TKTokeniseIdentifier
.852b	c9 41		cmp #$41			cmp 	#'A'
.852d	90 04		bcc $8533			bcc 	_TKTokenisePunctuation
.852f	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8531	90 50		bcc $8583			bcc 	_TKTokeniseIdentifier
.8533					_TKTokenisePunctuation:
.8533	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8535	f0 23		beq $855a			beq 	_TKString
.8537	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8539	f0 24		beq $855f			beq 	_TKCheckDouble
.853b	c9 3e		cmp #$3e			cmp 	#'>'
.853d	f0 20		beq $855f			beq 	_TKCheckDouble
.853f					_TKStandardPunctuation:
.853f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8542	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8544	90 0e		bcc $8554			bcc 	_TKNoShift
.8546	48		pha				pha 								; save
.8547	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8549	85 36		sta $36				sta 	zTemp0
.854b	68		pla				pla
.854c	29 20		and #$20			and 	#32 						; bit 5
.854e	4a		lsr a				lsr 	a 							; shift into bit 3
.854f	4a		lsr a				lsr 	a
.8550	05 36		ora $36				ora 	zTemp0
.8552	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8554					_TKNoShift:
.8554	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte 			; write the punctuation character
.8557	e8		inx				inx 								; consume the character
.8558	80 c2		bra $851c			bra 	_TKTokeniseLoop 			; and loop round again.
.855a					_TKString:
.855a	20 05 86	jsr $8605			jsr 	TokeniseString
.855d	80 bd		bra $851c			bra 	_TKTokeniseLoop
.855f					_TKCheckDouble:
.855f	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8562	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8564	90 d9		bcc $853f			bcc 	_TKStandardPunctuation
.8566	c9 3f		cmp #$3f			cmp 	#'>'+1
.8568	b0 d5		bcs $853f			bcs 	_TKStandardPunctuation
.856a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.856d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.856f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8570	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8573	38		sec				sec
.8574	e9 3c		sbc #$3c			sbc 	#'<'
.8576	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8579	e8		inx				inx 								; consume both
.857a	e8		inx				inx
.857b	80 9f		bra $851c			bra 	_TKTokeniseLoop
.857d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.857f	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.8582	60		rts				rts
.8583					_TKTokeniseIdentifier:
.8583	8e 00 07	stx $0700			stx 	identStart 					; save start
.8586	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8589					_TKCheckLoop:
.8589	e8		inx				inx 								; look at next, we know first is identifier.
.858a	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.858d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.858f	f0 f8		beq $8589			beq 	_TKCheckLoop
.8591	c9 30		cmp #$30			cmp	 	#"0"
.8593	90 0c		bcc $85a1			bcc 	_TKEndIdentifier
.8595	c9 3a		cmp #$3a			cmp 	#"9"+1
.8597	90 f0		bcc $8589			bcc 	_TKCheckLoop
.8599	c9 41		cmp #$41			cmp	 	#"A"
.859b	90 04		bcc $85a1			bcc 	_TKEndIdentifier
.859d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.859f	90 e8		bcc $8589			bcc 	_TKCheckLoop
.85a1					_TKEndIdentifier:
.85a1	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.85a4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.85a6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.85a8	f0 06		beq $85b0			beq 	_TKHasTypeCharacter
.85aa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.85ac	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.85ae	d0 07		bne $85b7			bne 	_TKNoTypeCharacter
.85b0					_TKHasTypeCharacter:
.85b0	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.85b3	e8		inx				inx 								; read next
.85b4	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.85b7					_TKNoTypeCharacter:
.85b7	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.85b9	d0 09		bne $85c4			bne 	_TKNoArray
.85bb	e8		inx				inx 								; skip the (
.85bc	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.85bf	09 04		ora #$04			ora 	#$04
.85c1	8d 04 07	sta $0704			sta 	identTypeByte
.85c4					_TKNoArray:
.85c4	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.85c7	20 3d 86	jsr $863d			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.85ca	a0 83		ldy #$83			ldy 	#(KeywordSet0) >> 8
.85cc	a9 94		lda #$94			lda 	#(KeywordSet0) & $FF
.85ce	20 3b 83	jsr $833b			jsr 	TokeniseSearchTable
.85d1	a2 00		ldx #$00			ldx 	#0
.85d3	b0 1f		bcs $85f4			bcs 	_TKFoundToken
.85d5	a0 84		ldy #$84			ldy 	#(KeywordSet1) >> 8
.85d7	a9 b6		lda #$b6			lda 	#(KeywordSet1) & $FF
.85d9	20 3b 83	jsr $833b			jsr 	TokeniseSearchTable
.85dc	a2 81		ldx #$81			ldx 	#$81
.85de	b0 14		bcs $85f4			bcs 	_TKFoundToken
.85e0	a0 84		ldy #$84			ldy 	#(KeywordSet1) >> 8
.85e2	a9 b6		lda #$b6			lda 	#(KeywordSet1) & $FF
.85e4	20 3b 83	jsr $833b			jsr 	TokeniseSearchTable
.85e7	a2 82		ldx #$82			ldx 	#$82
.85e9	b0 09		bcs $85f4			bcs 	_TKFoundToken
.85eb	20 cd 86	jsr $86cd			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.85ee	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.85f1	4c 1c 85	jmp $851c			jmp 	_TKTokeniseLoop 			; and go round again.
.85f4					_TKFoundToken:
.85f4	48		pha				pha 								; save token
.85f5	8a		txa				txa 								; shift in X, is there one ?
.85f6	f0 03		beq $85fb			beq 	_TKNoTShift
.85f8	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte 			; if so, write it out
.85fb					_TKNoTShift:
.85fb	68		pla				pla 								; restore and write token
.85fc	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.85ff	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8602	4c 1c 85	jmp $851c			jmp 	_TKTokeniseLoop 			; and go round again.
.8605					TokeniseString:
.8605	e8		inx				inx									; start of quoted string.
.8606	da		phx				phx 								; push start of string on top
.8607	ca		dex				dex
.8608					_TSFindEnd:
.8608	e8		inx				inx
.8609	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.860c	f0 04		beq $8612			beq 	_TSEndOfString
.860e	c9 22		cmp #$22			cmp 	#'"'
.8610	d0 f6		bne $8608			bne 	_TSFindEnd
.8612					_TSEndOfString:
.8612	7a		ply				ply  								; so now Y is first character, X is character after end.
.8613	48		pha				pha 								; save what we terminated with, so we know whether to skip.
.8614	86 36		stx $36				stx 	zTemp0 						; save the end point.
.8616	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8618	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.861b	98		tya				tya 								; work out the string length
.861c	49 ff		eor #$ff			eor 	#$FF
.861e	38		sec				sec
.861f	65 36		adc $36				adc 	zTemp0
.8621	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte 			; write that length.
.8624					_TSOutputString:
.8624	c4 36		cpy $36				cpy 	zTemp0 						; reached the end.
.8626	f0 09		beq $8631			beq 	_TSEndString
.8628	b9 06 08	lda $0806,y			lda 	lineBuffer,y 				; output one
.862b	c8		iny				iny
.862c	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.862f	80 f3		bra $8624			bra 	_TSOutputString
.8631					_TSEndString:
.8631	a9 00		lda #$00			lda 	#0		 					; output EOS
.8633	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.8636	68		pla				pla 								; did we end in " ?
.8637	c9 22		cmp #$22			cmp 	#'"'
.8639	d0 01		bne $863c			bne 	_TSNoEndQuote
.863b	e8		inx				inx
.863c					_TSNoEndQuote:
.863c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.863d					TokeniseCalculateHash:
.863d	da		phx				phx
.863e	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8641	a9 00		lda #$00			lda 	#0
.8643					_TCHLoop:
.8643	18		clc				clc
.8644	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8647	e8		inx				inx
.8648	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.864b	d0 f6		bne $8643			bne 	_TCHLoop
.864d	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8650	fa		plx				plx
.8651	60		rts				rts
.8652					FixLineBufferCase:
.8652	a2 00		ldx #$00			ldx 	#0
.8654					_FLBCLoop:
.8654	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8657	f0 22		beq $867b			beq 	_FLBCExit 					; end of string.
.8659	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.865b	f0 11		beq $866e			beq 	_FLBCInQuotes
.865d	e8		inx				inx
.865e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8660	90 f2		bcc $8654			bcc 	_FLBCLoop
.8662	c9 7b		cmp #$7b			cmp 	#'z'+1
.8664	b0 ee		bcs $8654			bcs 	_FLBCLoop
.8666	38		sec				sec 								; make U/C
.8667	e9 20		sbc #$20			sbc 	#32
.8669	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.866c	80 e6		bra $8654			bra 	_FLBCLoop
.866e					_FLBCInQuotes:
.866e	e8		inx				inx 								; advance
.866f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8672	f0 07		beq $867b			beq 	_FLBCExit 					; exit on EOS
.8674	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8676	d0 f6		bne $866e			bne 	_FLBCInQuotes
.8678	e8		inx				inx 								; skip over it
.8679	80 d9		bra $8654			bra 	_FLBCLoop
.867b					_FLBCExit:
.867b	60		rts				rts
.867c					TokeniseExtractLineNumber:
.867c	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.867f	48		pha				pha
.8680	ad 07 07	lda $0707			lda 	tokenLineNumber
.8683	48		pha				pha
.8684	20 ba 86	jsr $86ba			jsr 	_TELNTimes2 				; line # x 4
.8687	20 ba 86	jsr $86ba			jsr 	_TELNTimes2 				; line # x 2
.868a	18		clc				clc 								; add stacked value
.868b	68		pla				pla
.868c	6d 07 07	adc $0707			adc 	tokenLineNumber
.868f	8d 07 07	sta $0707			sta 	tokenLineNumber
.8692	68		pla				pla
.8693	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8696	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8699	20 ba 86	jsr $86ba			jsr 	_TELNTimes2 				; line # x 10
.869c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.869f	e8		inx				inx
.86a0	29 0f		and #$0f			and 	#15 						; add to line #
.86a2	18		clc				clc
.86a3	6d 07 07	adc $0707			adc 	tokenLineNumber
.86a6	8d 07 07	sta $0707			sta 	tokenLineNumber
.86a9	90 03		bcc $86ae			bcc 	_TLENNoCarry
.86ab	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.86ae					_TLENNoCarry:
.86ae	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.86b1	c9 30		cmp #$30			cmp 	#'0'
.86b3	90 04		bcc $86b9			bcc 	_TLENExit
.86b5	c9 3a		cmp #$3a			cmp 	#'9'+1
.86b7	90 c3		bcc $867c			bcc 	TokeniseExtractLineNumber
.86b9					_TLENExit:
.86b9	60		rts				rts
.86ba					_TELNTimes2:
.86ba	0e 07 07	asl $0707			asl 	tokenLineNumber
.86bd	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.86c0	60		rts				rts
.86c1					TokeniseWriteByte:
.86c1	da		phx				phx
.86c2	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.86c5	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.86c8	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.86cb	fa		plx				plx
.86cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.86cd					CheckCreateVariableRecord:
.86cd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86cf	85 36		sta $36				sta 	0+zTemp0
.86d1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86d3	85 37		sta $37				sta 	1+zTemp0
.86d5	20 13 83	jsr $8313			jsr 	VariableOpen 				; make variable space available
.86d8					_CCVSearch:
.86d8	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.86da	f0 2c		beq $8708			beq 	_CCVFail
.86dc	a0 01		ldy #$01			ldy 	#1 							; read the hash
.86de	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.86e0	cd 03 07	cmp $0703			cmp 	identHash
.86e3	d0 16		bne $86fb			bne 	_CCVNext
.86e5	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.86e7	ae 00 07	ldx $0700			ldx 	identStart
.86ea					_CCVCompare:
.86ea	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.86ed	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.86ef	e8		inx				inx 								; advance pointers
.86f0	c8		iny				iny
.86f1	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.86f2	d0 07		bne $86fb			bne 	_CCVNext  					; didn't match go to next.
.86f4	90 f4		bcc $86ea			bcc 	_CCVCompare 				; not finished yet.
.86f6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.86f9	f0 41		beq $873c			beq 	_CCVFound 					; yes, we were successful
.86fb					_CCVNext:
.86fb	18		clc				clc
.86fc	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.86fe	65 36		adc $36				adc 	zTemp0
.8700	85 36		sta $36				sta 	zTemp0
.8702	90 d4		bcc $86d8			bcc 	_CCVSearch
.8704	e6 37		inc $37				inc 	zTemp0+1
.8706	80 d0		bra $86d8			bra 	_CCVSearch
.8708					_CCVFail:
.8708	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.870a	ad 03 07	lda $0703			lda 	identHash
.870d	91 36		sta ($36),y			sta 	(zTemp0),y
.870f	c8		iny				iny 								; offset 2 is the type byte
.8710	ad 04 07	lda $0704			lda 	identTypeByte
.8713	91 36		sta ($36),y			sta 	(zTemp0),y
.8715	c8		iny				iny
.8716					_CCVData:
.8716	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8718	91 36		sta ($36),y			sta 	(zTemp0),y
.871a	c8		iny				iny
.871b	c0 08		cpy #$08			cpy 	#8
.871d	90 f7		bcc $8716			bcc 	_CCVData
.871f	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8722					_CCVCopyName:
.8722	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8725	91 36		sta ($36),y			sta 	(zTemp0),y
.8727	e8		inx				inx
.8728	c8		iny				iny
.8729	ec 02 07	cpx $0702			cpx 	identTypeEnd
.872c	d0 f4		bne $8722			bne 	_CCVCopyName
.872e	98		tya				tya 								; patch offset
.872f	92 36		sta ($36)			sta 	(zTemp0)
.8731	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8733	91 36		sta ($36),y			sta 	(zTemp0),y
.8735	88		dey				dey
.8736	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8738	09 80		ora #$80			ora 	#$80
.873a	91 36		sta ($36),y			sta 	(zTemp0),y
.873c					_CCVFound:
.873c	20 14 83	jsr $8314			jsr 	VariableClose 				; map out variables, perhaps.
.873f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8741	38		sec				sec
.8742	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8744	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8746	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.8749	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.874b	20 c1 86	jsr $86c1			jsr 	TokeniseWriteByte
.874e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
