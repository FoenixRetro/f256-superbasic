
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 09:22:09 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					tokenOffset:
>071c							.fill 	1
.071d					tokenLineNumber:
>071d							.fill 	2
.071f					tokenBuffer:
>071f							.fill 	253
.081c					lineBuffer:
>081c							.fill 	MaxLineSize+1
.086d					numberBuffer:
>086d							.fill 	34
.088f					decimalBuffer:
>088f							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 12 84	jsr $8412			jsr 	NewCommand 					; erase current program
.8006	20 d8 93	jsr $93d8			jsr 	BackloadProgram
.8009	4c 5e 85	jmp $855e			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	92 89					.word	ShiftLeft                        ; $00 <<
>8016	8c 88					.word	BinaryCompareLessEqual           ; $01 <=
>8018	82 88					.word	BinaryCompareNotEqual            ; $02 <>
>801a	b1 9d					.word	SyntaxError                      ; $03 !!3
>801c	b1 9d					.word	SyntaxError                      ; $04 ><
>801e	96 88					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	95 89					.word	ShiftRight                       ; $06 >>
>8022	b1 9d					.word	SyntaxError                      ; $07 !!7
>8024	b1 9d					.word	SyntaxError                      ; $08 !!8
>8026	b1 9d					.word	SyntaxError                      ; $09 !!9
>8028	b1 9d					.word	SyntaxError                      ; $0a !!10
>802a	b1 9d					.word	SyntaxError                      ; $0b !!11
>802c	b1 9d					.word	SyntaxError                      ; $0c !!12
>802e	b1 9d					.word	SyntaxError                      ; $0d !!13
>8030	b1 9d					.word	SyntaxError                      ; $0e !!14
>8032	b1 9d					.word	SyntaxError                      ; $0f !!15
>8034	b1 9d					.word	SyntaxError                      ; $10 @
>8036	b1 9d					.word	SyntaxError                      ; $11 !!17
>8038	b1 9d					.word	SyntaxError                      ; $12 !!18
>803a	b1 9d					.word	SyntaxError                      ; $13 [
>803c	fa 98					.word	IntegerDivide                    ; $14 \
>803e	b1 9d					.word	SyntaxError                      ; $15 ]
>8040	1b 8b					.word	EorInteger                       ; $16 ^
>8042	b1 9d					.word	SyntaxError                      ; $17 _
>8044	b1 9d					.word	SyntaxError                      ; $18 `
>8046	b1 9d					.word	SyntaxError                      ; $19 !!25
>8048	b1 9d					.word	SyntaxError                      ; $1a !!26
>804a	b1 9d					.word	SyntaxError                      ; $1b {
>804c	d5 8a					.word	OraInteger                       ; $1c |
>804e	b1 9d					.word	SyntaxError                      ; $1d }
>8050	b1 9d					.word	SyntaxError                      ; $1e ~
>8052	b1 9d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	b1 9d					.word	SyntaxError                      ; $20
>8056	61 8b					.word	WordIndirect                     ; $21 !
>8058	b1 9d					.word	SyntaxError                      ; $22 "
>805a	b1 9d					.word	SyntaxError                      ; $23 #
>805c	b1 9d					.word	SyntaxError                      ; $24 $
>805e	47 99					.word	IntegerModulus                   ; $25 %
>8060	8f 8a					.word	AndInteger                       ; $26 &
>8062	b1 9d					.word	SyntaxError                      ; $27 '
>8064	b1 9d					.word	SyntaxError                      ; $28 (
>8066	b1 9d					.word	SyntaxError                      ; $29 )
>8068	bc 99					.word	MulInteger                       ; $2a *
>806a	29 8a					.word	AddInteger                       ; $2b +
>806c	b1 9d					.word	SyntaxError                      ; $2c ,
>806e	64 8a					.word	SubInteger                       ; $2d -
>8070	b1 9d					.word	SyntaxError                      ; $2e .
>8072	53 9b					.word	FDivideCommand                   ; $2f /
>8074	b1 9d					.word	SyntaxError                      ; $30 0
>8076	b1 9d					.word	SyntaxError                      ; $31 1
>8078	b1 9d					.word	SyntaxError                      ; $32 2
>807a	b1 9d					.word	SyntaxError                      ; $33 3
>807c	b1 9d					.word	SyntaxError                      ; $34 4
>807e	b1 9d					.word	SyntaxError                      ; $35 5
>8080	b1 9d					.word	SyntaxError                      ; $36 6
>8082	b1 9d					.word	SyntaxError                      ; $37 7
>8084	b1 9d					.word	SyntaxError                      ; $38 8
>8086	b1 9d					.word	SyntaxError                      ; $39 9
>8088	b1 9d					.word	SyntaxError                      ; $3a :
>808a	b1 9d					.word	SyntaxError                      ; $3b ;
>808c	6e 88					.word	BinaryCompareLess                ; $3c <
>808e	64 88					.word	BinaryCompareEqual               ; $3d =
>8090	78 88					.word	BinaryCompareGreater             ; $3e >
>8092	88 8b					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	b3 85					.word	EOLCommand                       ; $80 !0:EOF
>8096	c0 85					.word	Shift1Command                    ; $81 !1:SH1
>8098	b1 9d					.word	SyntaxError                      ; $82 !2:SH2
>809a	99 9c					.word	AbsUnary                         ; $83 ABS(
>809c	52 90					.word	AllocUnary                       ; $84 ALLOC(
>809e	a9 9c					.word	AscUnary                         ; $85 ASC(
>80a0	0d 91					.word	ChrUnary                         ; $86 CHR$(
>80a2	60 88					.word	UnaryFalse                       ; $87 FALSE
>80a4	b6 9c					.word	FracUnary                        ; $88 FRAC(
>80a6	cc 9c					.word	IntUnary                         ; $89 INT(
>80a8	22 9d					.word	IsValUnary                       ; $8a ISVAL(
>80aa	e7 91					.word	Unary_Left                       ; $8b LEFT$(
>80ac	de 9c					.word	LenUnary                         ; $8c LEN(
>80ae	11 92					.word	Unary_Mid                        ; $8d MID$(
>80b0	aa 90					.word	Unary_Not                        ; $8e NOT(
>80b2	f7 91					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c0 90					.word	Unary_Rnd                        ; $90 RND(
>80b6	f8 9c					.word	SgnUnary                         ; $91 SGN(
>80b8	1f 91					.word	SpcUnary                         ; $92 SPC(
>80ba	3a 91					.word	Unary_Str                        ; $93 STR$(
>80bc	54 88					.word	UnaryTrue                        ; $94 TRUE
>80be	18 9d					.word	ValUnary                         ; $95 VAL(
>80c0	40 82					.word	ForCommand                       ; $96 FOR
>80c2	84 83					.word	IfCommand                        ; $97 IF
>80c4	c8 85					.word	Unused1                          ; $98 PROC
>80c6	0a 85					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	b9 87					.word	Command_WHILE                    ; $9a WHILE
>80ca	ad 83					.word	EndIf                            ; $9b ENDIF
>80cc	d3 98					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	fa 82					.word	NextCommand                      ; $9d NEXT
>80d0	c8 85					.word	Unused4                          ; $9e THEN
>80d2	13 85					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	da 87					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	b1 9d					.word	SyntaxError                      ; $a2 CLS
>80da	78 81					.word	Command_Data                     ; $a3 DATA
>80dc	80 81					.word	DimCommand                       ; $a4 DIM
>80de	c8 85					.word	Unused3                          ; $a5 DOWNTO
>80e0	a6 83					.word	ElseCode                         ; $a6 ELSE
>80e2	53 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	71 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	ae 83					.word	LetCommand                       ; $a9 LET
>80e8	1c 84					.word	Command_Print                    ; $aa PRINT
>80ea	a4 84					.word	Command_Read                     ; $ab READ
>80ec	fd 84					.word	RemCommand                       ; $ac REM
>80ee	63 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	c8 85					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	b1 9d					.word	SyntaxError                      ; $80 !0:EOF
>80f4	b1 9d					.word	SyntaxError                      ; $81 !1:SH1
>80f6	b1 9d					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	3d 82					.word	EndCommand                       ; $85 END
>80fe	e7 83					.word	Command_List                     ; $86 LIST
>8100	12 84					.word	NewCommand                       ; $87 NEW
>8102	2c 85					.word	Command_Restore                  ; $88 RESTORE
>8104	5e 85					.word	CommandRUN                       ; $89 RUN
>8106	cb 85					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	b1 9d					.word	SyntaxError                      ; $80 !0:EOF
>810a	b1 9d					.word	SyntaxError                      ; $81 !1:SH1
>810c	b1 9d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 b2 92	jsr $92b2			jsr 	EvaluateInteger 			; the assert test
.8113	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c e8 87	jmp $87e8		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 c7 92	jsr $92c7			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 cb 93	jsr $93cb			jsr 	StackReset
.816e	20 8a 9f	jsr $9f8a			jsr 	StringSystemInitialise
.8171	20 08 87	jsr $8708			jsr 	ProcedureScan
.8174	20 2c 85	jsr $852c			jsr 	Command_Restore
.8177	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8178					Command_Data:
.8178	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.817a	a2 80		ldx #$80			ldx 	#KWC_EOL
.817c	20 5a 87	jsr $875a			jsr 	ScanForward
.817f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8180					DimCommand:
.8180	b1 30		lda ($30),y			lda 	(codePtr),y
.8182	29 c0		and #$c0			and 	#$C0
.8184	c9 40		cmp #$40			cmp 	#$40
.8186	d0 7a		bne $8202			bne 	_DCSyntax
.8188	b1 30		lda ($30),y			lda 	(codePtr),y
.818a	18		clc				clc
.818b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.818d	85 3f		sta $3f				sta 	zaTemp+1
.818f	c8		iny				iny
.8190	b1 30		lda ($30),y			lda 	(codePtr),y
.8192	c8		iny				iny
.8193	85 3e		sta $3e				sta 	zaTemp
.8195	5a		phy				phy
.8196	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8198	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.819c	c9 18		cmp #$18			cmp 	#NSTProcedure
.819e	f0 62		beq $8202			beq 	_DCSyntax
.81a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.81a2	29 04		and #$04			and 	#NSBIsArray
.81a4	f0 64		beq $820a			beq 	_DCType
.81a6	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.81a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81aa	d0 59		bne $8205			bne 	_DCRedefine
.81ac	7a		ply				ply
.81ad	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get array size, check it.
.81b0	5a		phy				phy
.81b1	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81b3	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81b5	7a		ply				ply 							; is there a second (e.g. ,x)
.81b6	b1 30		lda ($30),y			lda 	(codePtr),y
.81b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81ba	d0 0a		bne $81c6			bne 	_DCOneDimension
.81bc	c8		iny				iny 							; skip comma
.81bd	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get 2nd array size
.81c0	5a		phy				phy
.81c1	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81c3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81c5	7a		ply				ply
.81c6					_DCOneDimension:
.81c6	5a		phy				phy 							; save position
.81c7	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81c9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cb	aa		tax				tax
.81cc	c8		iny				iny
.81cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cf	e8		inx				inx 							; bump them.
.81d0	1a		inc a				inc 	a
.81d1	20 63 9d	jsr $9d63			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81d4	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81d6	29 e0		and #$e0			and 	#$E0
.81d8	d0 23		bne $81fd			bne 	_DCSize
.81da	a0 02		ldy #$02			ldy 	#2 						; get base type
.81dc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81de	20 1b 82	jsr $821b			jsr 	ScaleByBaseType 		; scale by base type
.81e1	a5 36		lda $36				lda 	zTemp0
.81e3	a6 37		ldx $37				ldx 	zTemp0+1
.81e5	20 71 90	jsr $9071			jsr 	AllocateXABytes 		; allocate memory
.81e8	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81ea	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ec	c8		iny				iny
.81ed	8a		txa				txa
.81ee	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81f0	7a		ply				ply 							; get position back
.81f1	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 		; check )
.81f4	b1 30		lda ($30),y			lda 	(codePtr),y
.81f6	c8		iny				iny 							; consume in case
.81f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81f9	f0 85		beq $8180			beq 	DimCommand
.81fb	88		dey				dey 							; undo consume
.81fc	60		rts				rts
.81fd					_DCSize:
.81fd	a9 16		lda #$16		lda	#22
.81ff	4c e8 87	jmp $87e8		jmp	ErrorHandler
.8202					_DCSyntax:
.8202	4c b1 9d	jmp $9db1			jmp 	SyntaxError
.8205					_DCRedefine:
.8205	a9 15		lda #$15		lda	#21
.8207	4c e8 87	jmp $87e8		jmp	ErrorHandler
.820a					_DCType:
.820a	4c bb 9d	jmp $9dbb			jmp 	TypeError
.820d					_DCGetSize:
.820d	a2 00		ldx #$00			ldx 	#0 						; get first index.
.820f	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger 	; get array dimension
.8212	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8214	f0 e7		beq $81fd			beq 	_DCSize
.8216	c9 fe		cmp #$fe			cmp 	#254
.8218	f0 e3		beq $81fd			beq 	_DCSize
.821a	60		rts				rts
.821b					ScaleByBaseType:
.821b	29 10		and #$10			and 	#NSBIsString 			; is it string
.821d	d0 19		bne $8238			bne 	_SBBTString
.821f	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8221	48		pha				pha
.8222	a5 36		lda $36				lda 	zTemp0
.8224	48		pha				pha
.8225	06 36		asl $36				asl 	zTemp0 					; x 2
.8227	26 37		rol $37				rol 	zTemp0+1
.8229	06 36		asl $36				asl 	zTemp0 					; x 4
.822b	26 37		rol $37				rol 	zTemp0+1
.822d	68		pla				pla 							; add stacked value = x 5
.822e	65 36		adc $36				adc 	zTemp0
.8230	85 36		sta $36				sta 	zTemp0
.8232	68		pla				pla
.8233	65 37		adc $37				adc 	zTemp0+1
.8235	85 37		sta $37				sta 	zTemp0+1
.8237	60		rts				rts
.8238					_SBBTString:
.8238	06 36		asl $36				asl 	zTemp0
.823a	26 37		rol $37				rol 	zTemp0+1
.823c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.823d					EndCommand:
.823d	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8240					ForCommand:
.8240	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8242	20 78 93	jsr $9378			jsr 	StackOpen
.8245	a2 00		ldx #$00			ldx 	#0
.8247	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm
.824a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.824d	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.824f	d0 49		bne $829a			bne		_FCError
.8251	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8253	20 f1 98	jsr $98f1			jsr 	CheckNextA
.8256	e8		inx				inx
.8257	20 b2 92	jsr $92b2			jsr 	EvaluateInteger 			; <from> in +1
.825a	b1 30		lda ($30),y			lda 	(codePtr),y
.825c	c8		iny				iny 								; consume it
.825d	48		pha				pha 								; save on stack for later
.825e	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8260	f0 04		beq $8266			beq 	_FCNoSyntax
.8262	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8264	d0 37		bne $829d			bne 	_FCSyntaxError
.8266					_FCNoSyntax:
.8266	e8		inx				inx
.8267	20 b2 92	jsr $92b2			jsr 	EvaluateInteger
.826a	20 aa 93	jsr $93aa			jsr 	STKSaveCodePosition 		; save loop back position
.826d	68		pla				pla 								; restore DOWNTO or TO
.826e	5a		phy				phy 								; save Y on the stack
.826f	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8271	f0 02		beq $8275			beq 	_FCNotDownTo
.8273	a9 02		lda #$02			lda 	#2
.8275					_FCNotDownTo:
.8275	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8276	a0 10		ldy #$10			ldy 	#16
.8278	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.827a	a0 06		ldy #$06			ldy 	#6
.827c	ad 08 06	lda $0608			lda 	NSMantissa0
.827f	91 34		sta ($34),y			sta 	(basicStack),y
.8281	ad 10 06	lda $0610			lda 	NSMantissa1
.8284	c8		iny				iny
.8285	91 34		sta ($34),y			sta 	(basicStack),y
.8287	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8289	a2 01		ldx #$01			ldx 	#1
.828b	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.828e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8290	a2 02		ldx #$02			ldx 	#2
.8292	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.8295	20 c0 82	jsr $82c0			jsr 	CopyIndexToReference
.8298	7a		ply				ply 								; restore position
.8299	60		rts				rts
.829a					_FCError:
.829a	4c bb 9d	jmp $9dbb			jmp 	TypeError
.829d					_FCSyntaxError:
.829d	4c b1 9d	jmp $9db1			jmp 	SyntaxError
.82a0					FCIntegerToStack:
.82a0	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.82a3	10 03		bpl $82a8			bpl	 	_FCNotNegative
.82a5	20 f0 92	jsr $92f0			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.82a8					_FCNotNegative:
.82a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82ab	91 34		sta ($34),y			sta 	(basicStack),y
.82ad	c8		iny				iny
.82ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82b1	91 34		sta ($34),y			sta 	(basicStack),y
.82b3	c8		iny				iny
.82b4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82b7	91 34		sta ($34),y			sta 	(basicStack),y
.82b9	c8		iny				iny
.82ba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82bd	91 34		sta ($34),y			sta 	(basicStack),y
.82bf	60		rts				rts
.82c0					CopyIndexToReference:
.82c0	5a		phy				phy
.82c1	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82c3	38		sec				sec 								; (because we copy from offset 8)
.82c4	b1 34		lda ($34),y			lda 	(basicStack),y
.82c6	e9 08		sbc #$08			sbc 	#8
.82c8	85 36		sta $36				sta 	zTemp0
.82ca	c8		iny				iny
.82cb	b1 34		lda ($34),y			lda 	(basicStack),y
.82cd	e9 00		sbc #$00			sbc 	#0
.82cf	85 37		sta $37				sta 	zTemp0+1
.82d1	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82d3	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82d5	b1 34		lda ($34),y			lda 	(basicStack),y
.82d7	0a		asl a				asl 	a 							; into carry
.82d8	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82da	90 14		bcc $82f0			bcc 	_CITRNormal
.82dc	38		sec				sec
.82dd					_CITRNegative:
.82dd	a9 00		lda #$00			lda 	#0
.82df	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	c8		iny				iny
.82e4	ca		dex				dex
.82e5	d0 f6		bne $82dd			bne 	_CITRNegative
.82e7	88		dey				dey 								; look at MSB of mantissa
.82e8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82ea	09 80		ora #$80			ora 	#$80
.82ec	91 36		sta ($36),y			sta 	(zTemp0),y
.82ee	7a		ply				ply
.82ef	60		rts				rts
.82f0					_CITRNormal:
.82f0	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82f2	91 36		sta ($36),y			sta 	(zTemp0),y
.82f4	c8		iny				iny
.82f5	ca		dex				dex
.82f6	d0 f8		bne $82f0			bne 	_CITRNormal
.82f8	7a		ply				ply 								; and exit.
.82f9	60		rts				rts
.82fa					NextCommand:
.82fa	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82fc	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82fe	20 9f 93	jsr $939f			jsr 	StackCheckFrame
.8301	5a		phy				phy
.8302	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8304	b1 34		lda ($34),y			lda 	(basicStack),y
.8306	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8308	30 02		bmi $830c			bmi 	_NCStepNeg
.830a	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.830c					_NCStepNeg:
.830c	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.830e	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8310	18		clc				clc
.8311					_NCBump:
.8311	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8313	91 34		sta ($34),y			sta 	(basicStack),y
.8315	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8317	c8		iny				iny 								; next byte
.8318	ca		dex				dex 								; do four times
.8319	d0 f6		bne $8311			bne 	_NCBump
.831b	20 c0 82	jsr $82c0			jsr		CopyIndexToReference		; copy it to the reference variable.
.831e	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8320	b1 34		lda ($34),y			lda 	(basicStack),y
.8322	0a		asl a				asl 	a 							; sign bit to carry
.8323	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8325	85 38		sta $38				sta 	zTemp1
.8327	90 02		bcc $832b			bcc 	_NCCompRev 					; use if step is +ve
.8329	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.832b					_NCCompRev:
.832b	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.832d	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.832f	85 39		sta $39				sta 	zTemp1+1
.8331	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8333	38		sec				sec
.8334					_NCCompare:
.8334	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8336	b1 34		lda ($34),y			lda 	(basicStack),y
.8338	a4 39		ldy $39				ldy 	zTemp1+1
.833a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.833c	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.833e	e6 39		inc $39				inc 	zTemp1+1
.8340	ca		dex				dex 								; do it 4 times.
.8341	d0 f1		bne $8334			bne 	_NCCompare
.8343	50 02		bvc $8347			bvc 	_NCNoOverflow 				; convert to signed comparison
.8345	49 80		eor #$80			eor 	#$80
.8347					_NCNoOverflow:
.8347	7a		ply				ply 								; restore Y position
.8348	0a		asl a				asl 	a 							; is bit 7 set.
.8349	90 04		bcc $834f			bcc 	_NCLoopback 				; if no , >= so loop back
.834b	20 91 93	jsr $9391			jsr 	StackClose 					; exit the loop
.834e	60		rts				rts
.834f					_NCLoopBack:
.834f	20 bb 93	jsr $93bb			jsr 	STKLoadCodePosition 		; loop back
.8352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8353					Command_GOSUB:
.8353	a2 00		ldx #$00			ldx 	#0
.8355	20 c7 92	jsr $92c7			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8358	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.835a	20 78 93	jsr $9378			jsr 	StackOpen 					; create frame
.835d	20 aa 93	jsr $93aa			jsr 	STKSaveCodePosition 		; save current position
.8360	4c 76 83	jmp $8376			jmp 	GotoStackX
.8363					Command_RETURN:
.8363	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8365	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8367	20 9f 93	jsr $939f			jsr 	StackCheckFrame
.836a	20 bb 93	jsr $93bb			jsr 	STKLoadCodePosition 		; restore code position
.836d	20 91 93	jsr $9391			jsr 	StackClose
.8370	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8371					GotoCommand:
.8371	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8373	20 c7 92	jsr $92c7			jsr 	Evaluate16BitInteger
.8376					GotoStackX:
.8376	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8379	48		pha				pha 								; it is slightly inefficient, just in cases.
.837a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.837d	fa		plx				plx
.837e	20 a1 98	jsr $98a1			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8381	4c 69 85	jmp $8569			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8384					IfCommand:
.8384	a2 00		ldx #$00			ldx 	#0 							; If what.
.8386	20 8f 92	jsr $928f			jsr 	EvaluateNumber
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.838d	d0 0a		bne $8399			bne 	_IFStructured
.838f	c8		iny				iny 								; consume THEN
.8390	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; is it zero
.8393	f0 01		beq $8396			beq 	_IfFail 					; if fail, go to next line
.8395	60		rts				rts 								; if THEN just continue
.8396					_IfFail:
.8396	4c b3 85	jmp $85b3			jmp 	EOLCommand
.8399					_IfStructured:
.8399	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; is it zero
.839c	d0 07		bne $83a5			bne 	_IfExit 					; if not, then continue normally.
.839e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.83a0	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.83a2	20 5a 87	jsr $875a			jsr 	ScanForward 				; and run from there/
.83a5					_IfExit:
.83a5	60		rts				rts
.83a6					ElseCode:
.83a6	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.83a8	aa		tax				tax 								; so just go to the structure exit
.83a9	20 5a 87	jsr $875a			jsr 	ScanForward
.83ac	60		rts				rts
.83ad					EndIf:
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83ae					LetCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	ad d9 8b	lda $8bd9			lda 	PrecedenceLevel+"*"			; precedence > this
.83b3	20 f3 8b	jsr $8bf3			jsr 	EvaluateExpressionAtPrecedence
.83b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83b9	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83bb	f0 0e		beq $83cb			beq 	_LetGoProc 					; it's a procedure call.
.83bd	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83bf	20 f1 98	jsr $98f1			jsr 	CheckNextA
.83c2	e8		inx				inx 								; RHS
.83c3	20 86 92	jsr $9286			jsr 	EvaluateValue
.83c6	ca		dex				dex
.83c7	20 ce 83	jsr $83ce			jsr 	AssignVariable
.83ca	60		rts				rts
.83cb					_LetGoProc:
.83cb	4c 73 84	jmp $8473			jmp 	CallProcedure
.83ce					AssignVariable:
.83ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83d1	48		pha				pha 								; save a copy
.83d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83d5	29 10		and #$10			and 	#NSBIsString
.83d7	d0 0b		bne $83e4			bne 	_ASError
.83d9	68		pla				pla 								; get back
.83da	29 10		and #$10			and 	#NSBIsString 				; check type
.83dc	d0 03		bne $83e1			bne 	_ASString
.83de	4c 2e 8c	jmp $8c2e			jmp 	AssignNumber
.83e1					_ASString:
.83e1	4c 9c 8c	jmp $8c9c			jmp 	AssignString
.83e4					_ASError:
.83e4	4c bb 9d	jmp $9dbb			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.83e7					Command_List:
.83e7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83e9	85 30		sta $30				sta 	codePtr
.83eb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83ed	85 31		sta $31				sta 	codePtr+1
.83ef					_CLLoop:
.83ef	b2 30		lda ($30)			lda 	(codePtr)
.83f1	f0 1c		beq $840f			beq 	_CLExit
.83f3	20 d0 85	jsr $85d0			jsr 	ListConvertLine 			; convert line into token Buffer
.83f6	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.83f8	a9 1f		lda #$1f			lda 	#(tokenBuffer & $FF)
.83fa	20 41 88	jsr $8841			jsr 	PrintStringXA
.83fd	a9 0d		lda #$0d			lda 	#13 						; new line
.83ff	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.8402	18		clc				clc
.8403	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8405	65 30		adc $30				adc 	codePtr
.8407	85 30		sta $30				sta 	codePtr
.8409	90 02		bcc $840d			bcc 	_CREExit
.840b	e6 31		inc $31				inc 	codePtr+1
.840d					_CREExit:
.840d	80 e0		bra $83ef			bra 	_CLLoop
.840f					_CLExit:
.840f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8412					NewCommand:
.8412	20 50 98	jsr $9850			jsr 	MemoryNew
.8415	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8418	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.841b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.841c					Command_Print:
.841c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.841d					_CPLoop:
.841d	08		php				php 								; save last action flag
.841e	b1 30		lda ($30),y			lda 	(codePtr),y
.8420	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8422	f0 46		beq $846a			beq 	_CPExit
.8424	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8426	f0 42		beq $846a			beq 	_CPExit
.8428	68		pla				pla 								; throw last action flag
.8429	b1 30		lda ($30),y			lda 	(codePtr),y
.842b	c8		iny				iny
.842c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.842e	f0 37		beq $8467			beq 	_CPContinueWithSameLine
.8430	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8432	f0 2e		beq $8462			beq 	_CPTab
.8434	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8436	f0 26		beq $845e			beq 	_CPNewLine
.8438	88		dey				dey 								; undo the get.
.8439	a2 00		ldx #$00			ldx 	#0
.843b	20 86 92	jsr $9286			jsr 	EvaluateValue 				; get a value into slot 0
.843e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8441	29 10		and #$10			and 	#NSBIsString
.8443	f0 0b		beq $8450			beq 	_CPNumber
.8445	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8448	ad 08 06	lda $0608			lda 	NSMantissa0
.844b	20 41 88	jsr $8841			jsr 	PrintStringXA
.844e	80 cc		bra $841c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8450					_CPNumber:
.8450	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8452	20 5c 91	jsr $915c			jsr 	ConvertNumberToString 		; convert to string
.8455	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8457	a9 8f		lda #$8f			lda 	#DecimalBuffer & $FF
.8459	20 41 88	jsr $8841			jsr 	PrintStringXA
.845c	80 be		bra $841c			bra 	Command_Print 				; loop round clearing carry so NL if end
.845e					_CPNewLine:
.845e	a9 0d		lda #$0d			lda 	#13
.8460	80 02		bra $8464			bra 	_CPPrintChar
.8462					_CPTab:
.8462	a9 09		lda #$09			lda 	#9 							; print TAB
.8464					_CPPrintChar:
.8464	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.8467					_CPContinueWithSameLine:
.8467	38		sec				sec 								; loop round with carry set, which
.8468	80 b3		bra $841d			bra 	_CPLoop 					; will inhibit final CR
.846a					_CPExit:
.846a	28		plp				plp 								; get last action flag
.846b	b0 05		bcs $8472			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.846d	a9 0d		lda #$0d			lda 	#13 						; print new line
.846f	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.8472					_CPExit2:
.8472	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8473					CallProcedure:
.8473	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.8476	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8478	20 78 93	jsr $9378			jsr 	StackOpen
.847b	20 aa 93	jsr $93aa			jsr 	STKSaveCodePosition 		; save loop position
.847e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8481	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8483	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8486	85 37		sta $37				sta 	zTemp0+1
.8488	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.848a	b2 36		lda ($36)			lda 	(zTemp0)
.848c	85 30		sta $30				sta 	safePtr
.848e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8490	85 31		sta $31				sta 	safePtr+1
.8492	c8		iny				iny
.8493	b1 36		lda ($36),y			lda 	(zTemp0),y
.8495	85 32		sta $32				sta 	safePtr+2
.8497	c8		iny				iny
.8498	b1 36		lda ($36),y			lda 	(zTemp0),y
.849a	85 33		sta $33				sta 	safePtr+3
.849c	c8		iny				iny 								; get Y offset -> Y
.849d	b1 36		lda ($36),y			lda 	(zTemp0),y
.849f	a8		tay				tay
.84a0	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; check )
.84a3	60		rts				rts 								; and continue from here
.98d3					Command_ENDPROC:
.98d3	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.98d5	a2 14		ldx #$14			ldx 	#ERRID_PROC
.98d7	20 9f 93	jsr $939f			jsr 	StackCheckFrame
.98da	20 bb 93	jsr $93bb			jsr 	STKLoadCodePosition 		; restore code position
.98dd	20 91 93	jsr $9391			jsr 	StackClose
.98e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.84a4					Command_Read:
.84a4	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.84a6	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm
.84a9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.84ac	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.84ae	f0 4a		beq $84fa			beq 	_CRSyntax 					; check reference (bit 0)
.84b0	20 43 85	jsr $8543			jsr 	SwapDataCodePtrs 			; swap code and data
.84b3	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.84b6	d0 20		bne $84d8			bne 	_CRContinueData
.84b8					_CRKeepSearching:
.84b8	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.84ba	aa		tax				tax
.84bb	20 5a 87	jsr $875a			jsr 	ScanForward
.84be	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.84c0	f0 16		beq $84d8			beq 	_CRHaveData 				; found it
.84c2	18		clc				clc
.84c3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84c5	65 30		adc $30				adc 	codePtr
.84c7	85 30		sta $30				sta 	codePtr
.84c9	90 02		bcc $84cd			bcc 	_CREExit
.84cb	e6 31		inc $31				inc 	codePtr+1
.84cd					_CREExit:
.84cd	a0 03		ldy #$03			ldy 	#3 							; start of line.
.84cf	b2 30		lda ($30)			lda 	(codePtr)
.84d1	d0 e5		bne $84b8			bne 	_CRKeepSearching
.84d3	a9 0b		lda #$0b		lda	#11
.84d5	4c e8 87	jmp $87e8		jmp	ErrorHandler
.84d8					_CRHaveData:
.84d8					_CRContinueData:
.84d8	a2 01		ldx #$01			ldx 	#1
.84da	20 86 92	jsr $9286			jsr 	EvaluateValue 				; evaluate value into slot # 1
.84dd	ca		dex				dex
.84de	20 ce 83	jsr $83ce			jsr		AssignVariable 				; do the assignment
.84e1	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.84e4	b1 30		lda ($30),y			lda 	(codePtr),y
.84e6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.84e8	d0 04		bne $84ee			bne 	_CRSwapBack
.84ea	c8		iny				iny 								; consume comma
.84eb	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.84ee					_CRSwapBack:
.84ee	20 43 85	jsr $8543			jsr 	SwapDataCodePtrs			; swap them back.
.84f1	b1 30		lda ($30),y			lda 	(codePtr),y
.84f3	c8		iny				iny
.84f4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84f6	f0 ac		beq $84a4			beq 	Command_Read 				; if so go round again.
.84f8	88		dey				dey 								; unpick get.
.84f9	60		rts				rts
.84fa					_CRSyntax:
.84fa	4c b1 9d	jmp $9db1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.84fd					RemCommand:
.84fd	b1 30		lda ($30),y			lda 	(codePtr),y
.84ff	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8501	d0 06		bne $8509			bne 	_RMExit
.8503	c8		iny				iny
.8504	98		tya				tya
.8505	38		sec				sec
.8506	71 30		adc ($30),y			adc 	(codePtr),y
.8508	a8		tay				tay
.8509					_RMExit:
.8509	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.850a					Command_REPEAT:
.850a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.850c	20 78 93	jsr $9378			jsr 	StackOpen
.850f	20 aa 93	jsr $93aa			jsr 	STKSaveCodePosition 		; save loop position
.8512	60		rts				rts
.8513					Command_UNTIL:
.8513	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8515	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8517	20 9f 93	jsr $939f			jsr 	StackCheckFrame
.851a	a2 00		ldx #$00			ldx 	#0
.851c	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; work out the number
.851f	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; check if zero
.8522	f0 04		beq $8528			beq 	_CULoopBack 				; if so keep looping
.8524	20 91 93	jsr $9391			jsr 	StackClose		 			; return
.8527	60		rts				rts
.8528					_CULoopBack:
.8528	20 bb 93	jsr $93bb			jsr 	STKLoadCodePosition 		; loop back
.852b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.852c					Command_Restore:
.852c	20 43 85	jsr $8543			jsr 	SwapDataCodePtrs 			; swap code and data
.852f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8531	85 30		sta $30				sta 	codePtr
.8533	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8535	85 31		sta $31				sta 	codePtr+1
.8537	20 43 85	jsr $8543			jsr 	SwapDataCodePtrs 			; put them back
.853a	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.853c	8d 19 07	sta $0719			sta 	dataPointer+4
.853f	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.8542	60		rts				rts
.8543					SwapDataCodePtrs:
.8543	da		phx				phx
.8544	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8546					_SDCPLoop:
.8546	b5 30		lda $30,x			lda 	safePtr,x
.8548	48		pha				pha
.8549	bd 15 07	lda $0715,x			lda 	dataPointer,x
.854c	95 30		sta $30,x			sta 	safePtr,x
.854e	68		pla				pla
.854f	9d 15 07	sta $0715,x			sta 	dataPointer,x
.8552	ca		dex				dex
.8553	10 f1		bpl $8546			bpl 	_SDCPLoop
.8555	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.8558	8c 19 07	sty $0719			sty 	dataPointer+4
.855b	a8		tay				tay
.855c	fa		plx				plx
.855d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.855e					CommandRUN:
.855e	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8561	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8563	85 30		sta $30				sta 	codePtr
.8565	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8567	85 31		sta $31				sta 	codePtr+1
.8569					RUNNewLine:
.8569	b2 30		lda ($30)			lda 	(codePtr)
.856b	f0 43		beq $85b0			beq 	CRNoProgram         		; no then END.
.856d	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.856f	9a		txs				txs
.8570					RUNCodePointerLine:
.8570	a0 02		ldy #$02			ldy 	#2 							; start of program
.8572					_CRIncMainLoop:
.8572	c8		iny				iny
.8573					_CRMainLoop:
.8573	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8576	b1 30		lda ($30),y			lda 	(codePtr),y
.8578	10 10		bpl $858a			bpl 	_CRNotKeyword
.857a	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.857c	b0 04		bcs $8582			bcs 	_CRIsKeyword
.857e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8580	b0 28		bcs $85aa			bcs		_CRSyntaxError
.8582					_CRIsKeyword:
.8582	c8		iny				iny 								; consume command
.8583	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8584	aa		tax				tax 								; put in X for vector jump
.8585	20 ad 85	jsr $85ad			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8588	80 e9		bra $8573			bra 	_CRMainLoop 				; and loop round
.858a					_CRNotKeyword:
.858a	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.858c	f0 e4		beq $8572			beq 	_CRIncMainLoop
.858e	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8590	90 05		bcc $8597			bcc 	_CRNotVariable
.8592					_CRGoLet:
.8592	20 ae 83	jsr $83ae			jsr 	LetCommand
.8595	80 dc		bra $8573			bra 	_CRMainLoop
.8597					_CRNotVariable:
.8597	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8599	f0 f7		beq $8592			beq 	_CRGoLet
.859b	c9 21		cmp #$21			cmp 	#KWD_PLING
.859d	f0 f3		beq $8592			beq 	_CRGoLet
.859f	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.85a1	f0 01		beq $85a4			beq 	_CRGoRem
>85a3	db						.byte 	$DB 						; causes a break in the emulator
.85a4					_CRGoRem:
.85a4	c8		iny				iny
.85a5	20 fd 84	jsr $84fd			jsr 	RemCommand
.85a8	80 c9		bra $8573			bra 	_CRMainLoop
.85aa					_CRSyntaxError:
.85aa	4c b1 9d	jmp $9db1			jmp 	SyntaxError
.85ad					_CRCallVector0:
.85ad	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.85b0					CRNoProgram:
.85b0	4c 3d 82	jmp $823d			jmp 	EndCommand
.85b3					EOLCommand:
.85b3	18		clc				clc
.85b4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.85b6	65 30		adc $30				adc 	codePtr
.85b8	85 30		sta $30				sta 	codePtr
.85ba	90 02		bcc $85be			bcc 	_CREExit
.85bc	e6 31		inc $31				inc 	codePtr+1
.85be					_CREExit:
.85be	80 a9		bra $8569			bra 	RunNewLine
.85c0					Shift1Command:
.85c0	b1 30		lda ($30),y			lda 	(codePtr),y
.85c2	c8		iny				iny
.85c3	0a		asl a				asl 	a
.85c4	aa		tax				tax
.85c5	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.85c8					Unused1:
.85c8					Unused2:
.85c8					Unused3:
.85c8					Unused4:
.85c8	4c b1 9d	jmp $9db1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.85cb					StopCommand:
.85cb	a9 08		lda #$08		lda	#8
.85cd	4c e8 87	jmp $87e8		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.85d0					ListConvertLine:
.85d0	9c 1b 07	stz $071b			stz 	tbOffset
.85d3	9c 1f 07	stz $071f			stz 	tokenBuffer
.85d6	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.85d8	b1 30		lda ($30),y			lda 	(codePtr),y
.85da	aa		tax				tax
.85db	88		dey				dey
.85dc	b1 30		lda ($30),y			lda 	(codePtr),y
.85de	20 3d 9a	jsr $9a3d			jsr 	ConvertInt16
.85e1	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.85e3	86 37		stx $37				stx 	zTemp0+1
.85e5	a0 00		ldy #$00			ldy 	#0
.85e7					_LCCopyNumber:
.85e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.85e9	20 cf 86	jsr $86cf			jsr 	LCLWrite
.85ec	c8		iny				iny
.85ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.85ef	d0 f6		bne $85e7			bne 	_LCCopyNumber
.85f1					_LCPadOut:
.85f1	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.85f3	20 cf 86	jsr $86cf			jsr 	LCLWrite
.85f6	ad 1b 07	lda $071b			lda 	tbOffset
.85f9	c9 06		cmp #$06			cmp 	#6
.85fb	d0 f4		bne $85f1			bne 	_LCPadOut
.85fd	a0 03		ldy #$03			ldy 	#3 							; start position.
.85ff					_LCMainLoop:
.85ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8601	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8603	f0 17		beq $861c			beq 	_LCExit
.8605	c9 06		cmp #$06			cmp 	#6 							; 0-5 are the double punctuations
.8607	f0 14		beq $861d			beq 	_LCDoubles
.8609	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.860b	90 14		bcc $8621			bcc 	_LCShiftPunc
.860d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.860f	90 14		bcc $8625			bcc 	_LCPunctuation
.8611	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8613	90 16		bcc $862b			bcc 	_LCIdentifiers
.8615	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8617	90 32		bcc $864b			bcc 	_LCTokens
.8619	4c a3 86	jmp $86a3			jmp 	_LCData 					; 254-5 are data objects
.861c					_LCExit:
.861c	60		rts				rts
.861d					_LCDoubles:
>861d	db						.byte 	$DB 						; causes a break in the emulator
.861e	c8		iny				iny
.861f	80 de		bra $85ff			bra 	_LCMainLoop
.8621					_LCShiftPunc:
>8621	db						.byte 	$DB 						; causes a break in the emulator
.8622	c8		iny				iny
.8623	80 da		bra $85ff			bra 	_LCMainLoop
.8625					_LCPunctuation:
.8625	c8		iny				iny 								; consume character
.8626	20 cf 86	jsr $86cf			jsr 	LCLWrite 					; write it out.
.8629	80 d4		bra $85ff			bra 	_LCMainLoop 				; go round again.
.862b					_LCIdentifiers:
.862b	18		clc				clc 								; convert to physical address
.862c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.862e	85 37		sta $37				sta 	zTemp0+1
.8630	c8		iny				iny
.8631	b1 30		lda ($30),y			lda 	(codePtr),y
.8633	85 36		sta $36				sta 	zTemp0
.8635	c8		iny				iny
.8636	5a		phy				phy 								; save position
.8637	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8639					_LCOutIdentifier:
.8639	c8		iny				iny
.863a	b1 36		lda ($36),y			lda 	(zTemp0),y
.863c	29 7f		and #$7f			and 	#$7F
.863e	20 fd 86	jsr $86fd			jsr 	LCLLowerCase
.8641	20 cf 86	jsr $86cf			jsr 	LCLWrite
.8644	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8646	10 f1		bpl $8639			bpl 	_LCOutIdentifier
.8648	7a		ply				ply 								; restore position
.8649	80 b4		bra $85ff			bra 	_LCMainLoop
.864b					_LCTokens:
.864b	aa		tax				tax 								; token in X
.864c	a9 ca		lda #$ca			lda 	#((KeywordSet2) & $FF)
.864e	85 36		sta $36				sta 	0+zTemp0
.8650	a9 95		lda #$95			lda 	#((KeywordSet2) >> 8)
.8652	85 37		sta $37				sta 	1+zTemp0
.8654	e0 82		cpx #$82			cpx 	#$82
.8656	f0 16		beq $866e			beq 	_LCUseShift
.8658	a9 90		lda #$90			lda 	#((KeywordSet1) & $FF)
.865a	85 36		sta $36				sta 	0+zTemp0
.865c	a9 95		lda #$95			lda 	#((KeywordSet1) >> 8)
.865e	85 37		sta $37				sta 	1+zTemp0
.8660	e0 81		cpx #$81			cpx 	#$81
.8662	f0 0a		beq $866e			beq 	_LCUseShift
.8664	a9 6e		lda #$6e			lda 	#((KeywordSet0) & $FF)
.8666	85 36		sta $36				sta 	0+zTemp0
.8668	a9 94		lda #$94			lda 	#((KeywordSet0) >> 8)
.866a	85 37		sta $37				sta 	1+zTemp0
.866c	80 01		bra $866f			bra 	_LCNoShift
.866e					_LCUseShift:
.866e	c8		iny				iny
.866f					_LCNoShift:
.866f	20 de 86	jsr $86de			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8672	b1 30		lda ($30),y			lda 	(codePtr),y
.8674	aa		tax				tax 								; into X
.8675					_LCFindText:
.8675	ca		dex				dex
.8676	10 0e		bpl $8686			bpl 	_LCFoundText 				; found text.
.8678	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.867a	1a		inc a				inc 	a 							; one extra for size
.867b	38		sec				sec 								; one extra for checksum
.867c	65 36		adc $36				adc 	zTemp0 						; go to next token
.867e	85 36		sta $36				sta 	zTemp0
.8680	90 f3		bcc $8675			bcc 	_LCFindText
.8682	e6 37		inc $37				inc 	zTemp0+1
.8684	80 ef		bra $8675			bra 	_LCFindText
.8686					_LCFoundText:
.8686	5a		phy				phy 								; save List position
.8687	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8689	aa		tax				tax
.868a	a0 02		ldy #$02			ldy 	#2
.868c					_LCCopyToken:
.868c	b1 36		lda ($36),y			lda 	(zTemp0),y
.868e	20 cf 86	jsr $86cf			jsr 	LCLWrite
.8691	c8		iny				iny
.8692	ca		dex				dex
.8693	d0 f7		bne $868c			bne 	_LCCopyToken
.8695	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8697	f0 05		beq $869e			beq 	_LCNoSpace
.8699	a9 20		lda #$20			lda 	#' '
.869b	20 cf 86	jsr $86cf			jsr 	LCLWrite
.869e					_LCNoSpace:
.869e	7a		ply				ply 								; restore position.
.869f	c8		iny				iny 								; consume token
.86a0	4c ff 85	jmp $85ff			jmp 	_LCMainLoop 				; and go around again.
.86a3					_LCData:
.86a3	48		pha				pha 								; save type $FE/$FF
.86a4	a2 23		ldx #$23			ldx 	#'#' 						; figure out # or "
.86a6	c9 fe		cmp #$fe			cmp 	#$FE
.86a8	f0 02		beq $86ac			beq 	_LCHaveOpener
.86aa	a2 22		ldx #$22			ldx 	#'"'
.86ac					_LCHaveOpener:
.86ac	8a		txa				txa 								; output prefix (# or ")
.86ad	20 cf 86	jsr $86cf			jsr 	LCLWrite
.86b0	c8		iny				iny 								; get count
.86b1	b1 30		lda ($30),y			lda 	(codePtr),y
.86b3	aa		tax				tax
.86b4	c8		iny				iny 								; point at first character
.86b5					_LCOutData:
.86b5	b1 30		lda ($30),y			lda 	(codePtr),y
.86b7	c9 00		cmp #$00			cmp 	#0
.86b9	f0 03		beq $86be			beq 	_LCNoPrint
.86bb	20 cf 86	jsr $86cf			jsr 	LCLWrite
.86be					_LCNoPrint:
.86be	c8		iny				iny
.86bf	ca		dex				dex
.86c0	d0 f3		bne $86b5			bne 	_LCOutData
.86c2	68		pla				pla 								; closing " required ?
.86c3	c9 ff		cmp #$ff			cmp 	#$FF
.86c5	d0 05		bne $86cc			bne 	_LCNoQuote
.86c7	a9 22		lda #$22			lda 	#'"'
.86c9	20 cf 86	jsr $86cf			jsr 	LCLWrite
.86cc					_LCNoQuote:
.86cc	4c ff 85	jmp $85ff			jmp 	_LCMainLoop
.86cf					LCLWrite:
.86cf	da		phx				phx
.86d0	ae 1b 07	ldx $071b			ldx 	tbOffset
.86d3	9d 1f 07	sta $071f,x			sta 	tokenBuffer,x
.86d6	9e 20 07	stz $0720,x			stz 	tokenBuffer+1,x
.86d9	ee 1b 07	inc $071b			inc 	tbOffset
.86dc	fa		plx				plx
.86dd	60		rts				rts
.86de					LCCheckSpaceRequired:
.86de	ae 1b 07	ldx $071b			ldx 	tbOffset
.86e1	bd 1e 07	lda $071e,x			lda 	tokenBuffer-1,x 			; previous character
.86e4	20 fd 86	jsr $86fd			jsr 	LCLLowerCase 				; saves a little effort
.86e7	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.86e9	90 11		bcc $86fc			bcc 	_LCCSRExit
.86eb	c9 3a		cmp #$3a			cmp 	#"9"+1
.86ed	90 08		bcc $86f7			bcc 	_LCCSRSpace
.86ef	c9 61		cmp #$61			cmp 	#"a"
.86f1	90 09		bcc $86fc			bcc 	_LCCSRExit
.86f3	c9 7b		cmp #$7b			cmp 	#"z"+1
.86f5	b0 05		bcs $86fc			bcs 	_LCCSRExit
.86f7					_LCCSRSpace:
.86f7	a9 20		lda #$20			lda 	#' '
.86f9	20 cf 86	jsr $86cf			jsr 	LCLWrite
.86fc					_LCCSRExit:
.86fc	60		rts				rts
.86fd					LCLLowerCase:
.86fd	c9 41		cmp #$41			cmp 	#"A"
.86ff	90 06		bcc $8707			bcc 	_LCLLCOut
.8701	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8703	b0 02		bcs $8707			bcs 	_LCLLCOut
.8705	69 20		adc #$20			adc 	#$20
.8707					_LCLLCOut:
.8707	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8708					ProcedureScan:
.8708	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.870a	85 30		sta $30				sta 	codePtr
.870c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.870e	85 31		sta $31				sta 	codePtr+1
.8710					_PSLoop:
.8710	b2 30		lda ($30)			lda 	(codePtr)
.8712	f0 42		beq $8756			beq 	_PSExit
.8714	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8716	b1 30		lda ($30),y			lda 	(codePtr),y
.8718	c9 98		cmp #$98			cmp 	#KWD_PROC
.871a	d0 2d		bne $8749			bne 	_PSNext
.871c	c8		iny				iny 								; get the address of the record to zTemp0 and
.871d	b1 30		lda ($30),y			lda 	(codePtr),y
.871f	29 c0		and #$c0			and 	#$C0
.8721	c9 40		cmp #$40			cmp 	#$40
.8723	d0 32		bne $8757			bne 	_PSSyntax
.8725	b1 30		lda ($30),y			lda 	(codePtr),y
.8727	18		clc				clc
.8728	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.872a	85 37		sta $37				sta 	zTemp0+1
.872c	c8		iny				iny 								; LSB
.872d	b1 30		lda ($30),y			lda 	(codePtr),y
.872f	85 36		sta $36				sta 	zTemp0
.8731	c8		iny				iny 								; character after variable call.
.8732	98		tya				tya 								; save Y offset at +7
.8733	a0 07		ldy #$07			ldy 	#7
.8735	91 36		sta ($36),y			sta 	(zTemp0),y
.8737	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8739	a0 02		ldy #$02			ldy 	#2
.873b	91 36		sta ($36),y			sta 	(zTemp0),y
.873d	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.873f					_PSCopy:
.873f	b5 30		lda $30,x			lda 	safePtr,x
.8741	c8		iny				iny
.8742	91 36		sta ($36),y			sta 	(zTemp0),y
.8744	e8		inx				inx
.8745	e0 04		cpx #$04			cpx 	#4
.8747	d0 f6		bne $873f			bne 	_PSCopy
.8749					_PSNext:
.8749	18		clc				clc
.874a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.874c	65 30		adc $30				adc 	codePtr
.874e	85 30		sta $30				sta 	codePtr
.8750	90 02		bcc $8754			bcc 	_CREExit
.8752	e6 31		inc $31				inc 	codePtr+1
.8754					_CREExit:
.8754	80 ba		bra $8710			bra 	_PSLoop
.8756					_PSExit:
.8756	60		rts				rts
.8757					_PSSyntax:
.8757	4c b1 9d	jmp $9db1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.875a					ScanForward:
.875a	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.875c	86 37		stx $37				stx 	zTemp0+1
.875e	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8760					_ScanLoop:
.8760	b1 30		lda ($30),y			lda 	(codePtr),y
.8762	c8		iny				iny
.8763	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8765	d0 0e		bne $8775			bne 	_ScanGoNext
.8767	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8769	f0 04		beq $876f			beq 	_ScanMatch
.876b	c5 37		cmp $37				cmp 	zTemp0+1
.876d	d0 06		bne $8775			bne 	_ScanGoNext
.876f					_ScanMatch:
.876f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8771	d0 01		bne $8774			bne 	_ScanNotEndEOL
.8773	88		dey				dey
.8774					_ScanNotEndEOL:
.8774	60		rts				rts
.8775					_ScanGoNext:
.8775	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8777	90 e7		bcc $8760			bcc 	_ScanLoop
.8779	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.877b	90 18		bcc $8795			bcc 	_ScanSkipOne
.877d	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.877f	b0 2f		bcs $87b0			bcs 	_ScanSkipData
.8781	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8783	90 db		bcc $8760			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8785	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8787	b0 d7		bcs $8760			bcs 	_ScanLoop
.8789	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.878b	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.878d	b0 d1		bcs $8760			bcs 	_ScanLoop
.878f	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8791	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8793	80 cb		bra $8760			bra 	_ScanLoop
.8795					_ScanSkipOne:
.8795	c8		iny				iny 								; consume the extra one.
.8796	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8798	d0 c6		bne $8760			bne 	_ScanLoop
.879a	18		clc				clc
.879b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.879d	65 30		adc $30				adc 	codePtr
.879f	85 30		sta $30				sta 	codePtr
.87a1	90 02		bcc $87a5			bcc 	_CREExit
.87a3	e6 31		inc $31				inc 	codePtr+1
.87a5					_CREExit:
.87a5	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.87a7	b2 30		lda ($30)			lda 	(codePtr)
.87a9	d0 b5		bne $8760			bne 	_ScanLoop 					; if not zero, more to scan
.87ab	a9 13		lda #$13		lda	#19
.87ad	4c e8 87	jmp $87e8		jmp	ErrorHandler
.87b0					_ScanSkipData:
.87b0	88		dey				dey 								; point at data token
.87b1	c8		iny				iny
.87b2	98		tya				tya
.87b3	38		sec				sec
.87b4	71 30		adc ($30),y			adc 	(codePtr),y
.87b6	a8		tay				tay
.87b7	80 a7		bra $8760			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.87b9					Command_WHILE:
.87b9	5a		phy				phy 								; save position of the test
.87ba	a2 00		ldx #$00			ldx 	#0
.87bc	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; work out the number
.87bf	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; check if zero
.87c2	f0 0e		beq $87d2			beq 	_WHExitLoop 				; if so exit the loop
.87c4	98		tya				tya 								; position *after* test.
.87c5	7a		ply				ply 								; restore position before test, at WHILE
.87c6	88		dey				dey
.87c7	48		pha				pha 								; push after test on the stack
.87c8	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.87ca	20 78 93	jsr $9378			jsr 	StackOpen
.87cd	20 aa 93	jsr $93aa			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.87d0	7a		ply				ply 								; restore the position *after* the test
.87d1	60		rts				rts
.87d2					_WHExitLoop:
.87d2	68		pla				pla 								; throw post loop position
.87d3	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.87d5	aa		tax				tax
.87d6	20 5a 87	jsr $875a			jsr 	ScanForward
.87d9	60		rts				rts
.87da					Command_WEND:
.87da	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.87dc	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.87de	20 9f 93	jsr $939f			jsr 	StackCheckFrame
.87e1	20 bb 93	jsr $93bb			jsr 	STKLoadCodePosition 		; loop back
.87e4	20 91 93	jsr $9391			jsr 	StackClose		 			; erase the frame
.87e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.98e1					CheckRightBracket:
.98e1	b1 30		lda ($30),y			lda 	(codePtr),y
.98e3	c8		iny				iny
.98e4	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.98e6	d0 0f		bne $98f7			bne 	CNAFail
.98e8	60		rts				rts
.98e9					CheckComma:
.98e9	b1 30		lda ($30),y			lda 	(codePtr),y
.98eb	c8		iny				iny
.98ec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.98ee	d0 07		bne $98f7			bne 	CNAFail
.98f0	60		rts				rts
.98f1					CheckNextA:
.98f1	d1 30		cmp ($30),y			cmp 	(codePtr),y
.98f3	d0 02		bne $98f7			bne 	CNAFail
.98f5	c8		iny				iny 								; skip character
.98f6	60		rts				rts 								; and exit
.98f7					CNAFail:
.98f7	4c b1 9d	jmp $9db1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.87e8					ErrorHandler:
.87e8	a8		tay				tay 								; find the error text
.87e9	f0 49		beq $8834			beq 	_EHEnd
.87eb	a2 00		ldx #$00			ldx 	#0
.87ed	a9 ca		lda #$ca			lda 	#((ErrorText) & $FF)
.87ef	85 36		sta $36				sta 	0+zTemp0
.87f1	a9 9d		lda #$9d			lda 	#((ErrorText) >> 8)
.87f3	85 37		sta $37				sta 	1+zTemp0
.87f5					_EHFind:
.87f5	88		dey				dey 								; found the error text ?
.87f6	f0 0e		beq $8806			beq 	_EHFound
.87f8					_EHFindZero:
.87f8	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.87fa	e6 36		inc $36				inc 	zTemp0
.87fc	d0 02		bne $8800			bne 	_EHFNoCarry
.87fe	e6 37		inc $37				inc 	zTemp0+1
.8800					_EHFNoCarry:
.8800	c9 00		cmp #$00			cmp 	#0
.8802	d0 f4		bne $87f8			bne 	_EHFindZero
.8804	80 ef		bra $87f5			bra 	_EHFind
.8806					_EHFound:
.8806	a5 36		lda $36				lda 	zTemp0 						; print message
.8808	a6 37		ldx $37				ldx 	zTemp0+1
.880a	20 41 88	jsr $8841			jsr 	PrintStringXA
.880d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.880f	b1 30		lda ($30),y			lda 	(codePtr),y
.8811	d0 05		bne $8818			bne 	_EHAtMsg
.8813	c8		iny				iny
.8814	b1 30		lda ($30),y			lda 	(codePtr),y
.8816	f0 17		beq $882f			beq 	_EHCREnd
.8818					_EHAtMsg:
.8818	a2 88		ldx #$88			ldx 	#_AtMsg >> 8 				; print " at "
.881a	a9 37		lda #$37			lda 	#_AtMsg & $FF
.881c	20 41 88	jsr $8841			jsr 	PrintStringXA
.881f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8821	b1 30		lda ($30),y			lda 	(codePtr),y
.8823	48		pha				pha
.8824	c8		iny				iny
.8825	b1 30		lda ($30),y			lda 	(codePtr),y
.8827	aa		tax				tax
.8828	68		pla				pla
.8829	20 3d 9a	jsr $9a3d			jsr 	ConvertInt16 				; convert XA to string
.882c	20 41 88	jsr $8841			jsr 	PrintStringXA 				; and print it.
.882f					_EHCREnd:
.882f	a9 0d		lda #$0d			lda 	#13 						; new line
.8831	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.8834					_EHEnd:
.8834	4c 0c 80	jmp $800c			jmp 	WarmStart
>8837	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>883f	20 00
.8841					PrintStringXA:
.8841	5a		phy				phy
.8842	86 37		stx $37				stx 	zTemp0+1
.8844	85 36		sta $36				sta 	zTemp0
.8846	a0 00		ldy #$00			ldy 	#0
.8848					_PSXALoop:
.8848	b1 36		lda ($36),y			lda 	(zTemp0),y
.884a	f0 06		beq $8852			beq 	_PSXAExit
.884c	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.884f	c8		iny				iny
.8850	80 f6		bra $8848			bra 	_PSXALoop
.8852					_PSXAExit:
.8852	7a		ply				ply
.8853	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8854					UnaryTrue:
.8854	fa		plx				plx
.8855					ReturnTrue:
.8855	a9 01		lda #$01			lda 	#1  						; set to 1
.8857	20 3d 93	jsr $933d			jsr 	NSMSetByte
.885a	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.885c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.885f	60		rts				rts
.8860					UnaryFalse:
.8860	fa		plx				plx
.8861					ReturnFalse:
.8861	4c 3b 93	jmp $933b			jmp 	NSMSetZero 					; set it all to zero
.8864					BinaryCompareEqual:
.8864	fa		plx				plx
.8865	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.8868	c9 00		cmp #$00			cmp 	#0
.886a	f0 e9		beq $8855			beq 	ReturnTrue
.886c	80 f3		bra $8861			bra 	ReturnFalse
.886e					BinaryCompareLess:
.886e	fa		plx				plx
.886f	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.8872	c9 ff		cmp #$ff			cmp 	#$FF
.8874	f0 df		beq $8855			beq 	ReturnTrue
.8876	80 e9		bra $8861			bra 	ReturnFalse
.8878					BinaryCompareGreater:
.8878	fa		plx				plx
.8879	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.887c	c9 01		cmp #$01			cmp 	#1
.887e	f0 d5		beq $8855			beq 	ReturnTrue
.8880	80 df		bra $8861			bra 	ReturnFalse
.8882					BinaryCompareNotEqual:
.8882	fa		plx				plx
.8883	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.8886	c9 00		cmp #$00			cmp 	#0
.8888	d0 cb		bne $8855			bne 	ReturnTrue
.888a	80 d5		bra $8861			bra 	ReturnFalse
.888c					BinaryCompareLessEqual:
.888c	fa		plx				plx
.888d	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.8890	c9 01		cmp #$01			cmp 	#1
.8892	d0 c1		bne $8855			bne 	ReturnTrue
.8894	80 cb		bra $8861			bra 	ReturnFalse
.8896					BinaryCompareGreaterEqual:
.8896	fa		plx				plx
.8897	20 a0 88	jsr $88a0			jsr 	CompareBaseCode
.889a	c9 ff		cmp #$ff			cmp 	#$FF
.889c	d0 b7		bne $8855			bne 	ReturnTrue
.889e	80 c1		bra $8861			bra 	ReturnFalse
.88a0					CompareBaseCode:
.88a0	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; make both values if references.
.88a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.88a6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88a9	29 10		and #$10			and 	#NSTString
.88ab	d0 40		bne $88ed			bne 	_CBCString
.88ad	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.88b0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88b3	d0 3b		bne $88f0			bne 	_CBCFloat
.88b5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.88b8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88bb	29 08		and #$08			and 	#NSTFloat
.88bd	d0 31		bne $88f0			bne 	_CBCFloat
.88bf	20 f3 88	jsr $88f3			jsr 	CompareFixMinusZero
.88c2	e8		inx				inx
.88c3	20 f3 88	jsr $88f3			jsr 	CompareFixMinusZero
.88c6	ca		dex				dex
.88c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.88ca	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.88cd	10 0b		bpl $88da			bpl 	_CDCSameSign
.88cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.88d2	30 16		bmi $88ea			bmi 	_CBCLess 					; return $FF
.88d4					_CBCGreater:
.88d4	a9 01		lda #$01			lda 	#1
.88d6	60		rts				rts
.88d7					_CBCEqual:
.88d7	a9 00		lda #$00			lda 	#0
.88d9	60		rts				rts
.88da					_CDCSameSign:
.88da	20 03 8a	jsr $8a03			jsr 	SubTopTwoStack 				; unsigned subtract
.88dd	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; or the mantissa together
.88e0	f0 f5		beq $88d7			beq 	_CBCEqual 					; -0 == 0
.88e2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.88e5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.88e8	10 ea		bpl $88d4			bpl 	_CBCGreater
.88ea					_CBCLess:
.88ea	a9 ff		lda #$ff			lda 	#$FF
.88ec	60		rts				rts
.88ed					_CBCString:
.88ed	4c 59 89	jmp $8959			jmp 	CompareStrings
.88f0					_CBCFloat:
.88f0	4c 39 9b	jmp $9b39			jmp 	CompareFloat
.88f3					CompareFixMinusZero:
.88f3	20 6b 93	jsr $936b			jsr 	NSMIsZero
.88f6	d0 03		bne $88fb			bne 	_CFXMZNotZero
.88f8	9e 00 06	stz $0600,x			stz 	NSStatus,x
.88fb					_CFXMZNotZero:
.88fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.88fc					StringConcat:
.88fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.88ff	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8902	29 18		and #$18			and 	#NSBTypeMask
.8904	c9 10		cmp #$10			cmp 	#NSTString
.8906	d0 4e		bne $8956			bne		_SCType
.8908	64 38		stz $38				stz 	zTemp1 						; counting total length
.890a	e8		inx				inx
.890b	20 29 89	jsr $8929			jsr 	_SCSetupZ0 					; setup for second
.890e	20 34 89	jsr $8934			jsr 	_SCLengthZ0 				; length for second
.8911	ca		dex				dex
.8912	20 29 89	jsr $8929			jsr 	_SCSetupZ0 					; setup for first
.8915	20 34 89	jsr $8934			jsr 	_SCLengthZ0 				; length for first
.8918	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.891a	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate
.891d	20 47 89	jsr $8947			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8920	e8		inx				inx
.8921	20 29 89	jsr $8929			jsr 	_SCSetupZ0 					; copy second out
.8924	20 47 89	jsr $8947			jsr 	_SCCopy
.8927	ca		dex				dex
.8928	60		rts				rts
.8929					_SCSetupZ0:
.8929	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.892c	85 36		sta $36				sta 	zTemp0
.892e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8931	85 37		sta $37				sta 	zTemp0+1
.8933	60		rts				rts
.8934					_SCLengthZ0:
.8934	5a		phy				phy
.8935	a0 00		ldy #$00			ldy 	#0
.8937					_SCLenLoop:
.8937	b1 36		lda ($36),y			lda 	(zTemp0),y
.8939	f0 0a		beq $8945			beq 	_SCLExit
.893b	c8		iny				iny
.893c	e6 38		inc $38				inc 	zTemp1
.893e	10 f7		bpl $8937			bpl		_SCLenLoop
.8940	a9 09		lda #$09		lda	#9
.8942	4c e8 87	jmp $87e8		jmp	ErrorHandler
.8945					_SCLExit:
.8945	7a		ply				ply
.8946	60		rts				rts
.8947					_SCCopy:
.8947	5a		phy				phy
.8948	a0 00		ldy #$00			ldy 	#0
.894a					_SCCopyLoop:
.894a	b1 36		lda ($36),y			lda 	(zTemp0),y
.894c	f0 06		beq $8954			beq 	_SCCExit
.894e	20 e9 9f	jsr $9fe9			jsr 	StringTempWrite
.8951	c8		iny				iny
.8952	80 f6		bra $894a			bra 	_SCCopyLoop
.8954					_SCCExit:
.8954	7a		ply				ply
.8955	60		rts				rts
.8956					_SCType:
.8956	4c bb 9d	jmp $9dbb			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.98fa					IntegerDivide:
.98fa	fa		plx				plx
.98fb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.98fe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9901	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9902	0a		asl a				asl 	a
.9903	10 05		bpl $990a			bpl 	_NotRef
.9905	48		pha				pha
.9906	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9909	68		pla				pla
.990a					_NotRef:
.990a	0a		asl a				asl 	a
.990b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.990d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9910	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9913	f0 03		beq $9918			beq 	_IntegerCode 				; if clear, then we have two integers
.9915	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.9918					_IntegerCode:
.9918	20 3a 99	jsr $993a			jsr 	CheckDivideZero 			; do div zero check
.991b	20 72 99	jsr $9972			jsr 	Int32Divide 				; do the division
.991e	20 2f 9a	jsr $9a2f			jsr 	CalculateSign 				; calculate result sign
.9921					NSMCopyPlusTwoToZero:
.9921	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9924	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9927	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.992a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.992d	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9930	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9933	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9936	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9939	60		rts				rts
.993a					CheckDivideZero:
.993a	e8		inx				inx
.993b	20 6b 93	jsr $936b			jsr 	NSMIsZero
.993e	f0 02		beq $9942			beq 	_CDVError
.9940	ca		dex				dex
.9941	60		rts				rts
.9942					_CDVError:
.9942	a9 03		lda #$03		lda	#3
.9944	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9947					IntegerModulus:
.9947	fa		plx				plx
.9948	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.994b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.994e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.994f	0a		asl a				asl 	a
.9950	10 05		bpl $9957			bpl 	_NotRef
.9952	48		pha				pha
.9953	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9956	68		pla				pla
.9957					_NotRef:
.9957	0a		asl a				asl 	a
.9958	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.995a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.995d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9960	f0 03		beq $9965			beq 	_IntegerCode 				; if clear, then we have two integers
.9962	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.9965					_IntegerCode:
.9965	20 3a 99	jsr $993a			jsr 	CheckDivideZero 			; do div zero check
.9968	20 72 99	jsr $9972			jsr 	Int32Divide 				; do the division
.996b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.996e	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9971	60		rts				rts
.9972					Int32Divide:
.9972	48		pha				pha 								; save AXY
.9973	5a		phy				phy
.9974	20 12 93	jsr $9312			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9977	20 37 93	jsr $9337			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.997a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.997c					_I32DivideLoop:
.997c	e8		inx				inx
.997d	e8		inx				inx
.997e	20 50 93	jsr $9350			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9981	ca		dex				dex
.9982	ca		dex				dex
.9983	20 51 93	jsr $9351			jsr 	NSMRotateLeft
.9986	20 b2 99	jsr $99b2			jsr 	DivideCheckSubtract 		; check if subtract possible
.9989	90 03		bcc $998e			bcc 	_I32DivideNoCarryIn
.998b	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.998e					_I32DivideNoCarryIn:
.998e	88		dey				dey 								; loop round till division completed.
.998f	d0 eb		bne $997c			bne 	_I32DivideLoop
.9991	7a		ply				ply 								; restore AXY and exit
.9992	68		pla				pla
.9993	60		rts				rts
.9994					Int32ShiftDivide:
.9994	48		pha				pha 								; save AY
.9995	5a		phy				phy
.9996	e8		inx				inx 								; clear S[X+2]
.9997	e8		inx				inx
.9998	20 3b 93	jsr $933b			jsr 	NSMSetZero
.999b	ca		dex				dex
.999c	ca		dex				dex
.999d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.999f					_I32SDLoop:
.999f	20 b2 99	jsr $99b2			jsr 	DivideCheckSubtract 		; check if subtract possible
.99a2	e8		inx				inx
.99a3	e8		inx				inx
.99a4	20 51 93	jsr $9351			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.99a7	ca		dex				dex
.99a8	ca		dex				dex
.99a9	20 51 93	jsr $9351			jsr 	NSMRotateLeft
.99ac	88		dey				dey 	 							; do 31 times
.99ad	d0 f0		bne $999f			bne 	_I32SDLoop
.99af	7a		ply				ply 								; restore AY and exit
.99b0	68		pla				pla
.99b1	60		rts				rts
.99b2					DivideCheckSubtract:
.99b2	20 03 8a	jsr $8a03			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.99b5	b0 04		bcs $99bb			bcs 	_DCSExit 					; if carry set, then could do, exit
.99b7	20 dd 89	jsr $89dd			jsr 	AddTopTwoStack 				; add it back in
.99ba	18		clc				clc 								; and return False
.99bb					_DCSExit:
.99bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.99bc					MulInteger:
.99bc	fa		plx				plx
.99bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.99c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.99c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c4	0a		asl a				asl 	a
.99c5	10 05		bpl $99cc			bpl 	_NotRef
.99c7	48		pha				pha
.99c8	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99cb	68		pla				pla
.99cc					_NotRef:
.99cc	0a		asl a				asl 	a 							; put MSB of type into A:7
.99cd	30 0b		bmi $99da			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99cf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99d2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.99d5	f0 06		beq $99dd			beq 	_IntegerCode 				; if clear, then we have two integers
.99d7	4c 10 9c	jmp $9c10			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.99da					_StringData:
.99da	4c c5 9d	jmp $9dc5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99dd					_IntegerCode:
.99dd	20 ea 99	jsr $99ea			jsr 	MultiplyShort
.99e0	c9 00		cmp #$00			cmp 	#0
.99e2	f0 05		beq $99e9			beq 	_MIExit
.99e4	a9 04		lda #$04		lda	#4
.99e6	4c e8 87	jmp $87e8		jmp	ErrorHandler
.99e9					_MIExit:
.99e9	60		rts				rts
.99ea					MultiplyShort:
.99ea	5a		phy				phy 								; save Y
.99eb	20 12 93	jsr $9312			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99ee	20 37 93	jsr $9337			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.99f1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.99f3					_I32MLoop:
.99f3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.99f6	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.99f9	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.99fc	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.99ff	f0 28		beq $9a29			beq 	_I32MExit 					; exit if zero
.9a01	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a04	29 01		and #$01			and 	#1
.9a06	f0 0e		beq $9a16			beq 	_I32MNoAdd
.9a08	20 dd 89	jsr $89dd			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a0b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a0e	10 06		bpl $9a16			bpl 	_I32MNoAdd
.9a10					_I32ShiftRight:
.9a10	20 5e 93	jsr $935e			jsr 	NSMShiftRight 				; shift S[X] right
.9a13	c8		iny				iny 								; increment shift count
.9a14	80 0a		bra $9a20			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a16					_I32MNoAdd:
.9a16	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a19	70 f5		bvs $9a10			bvs 	_I32ShiftRight 				; instead.
.9a1b	e8		inx				inx
.9a1c	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a1f	ca		dex				dex
.9a20					_I32MShiftUpper:
.9a20	e8		inx				inx 								; shift S[X+2] right
.9a21	e8		inx				inx
.9a22	20 5e 93	jsr $935e			jsr 	NSMShiftRight
.9a25	ca		dex				dex
.9a26	ca		dex				dex
.9a27	80 ca		bra $99f3			bra 	_I32MLoop 					; try again.
.9a29					_I32MExit:
.9a29	20 2f 9a	jsr $9a2f			jsr 	CalculateSign
.9a2c	98		tya				tya 								; shift in A
.9a2d	7a		ply				ply 								; restore Y and exit
.9a2e	60		rts				rts
.9a2f					CalculateSign:
.9a2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a32	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9a35	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9a38	0a		asl a				asl 	a 							; shift bit 7 into carry
.9a39	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9a3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8959					CompareStrings:
.8959	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.895c	3d 01 06	and $0601,x			and 	NSStatus+1,x
.895f	29 10		and #$10			and 	#NSBIsString
.8961	f0 2c		beq $898f			beq 	_CSTypeError
.8963	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8966	85 36		sta $36				sta 	zTemp0
.8968	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.896b	85 37		sta $37				sta 	zTemp0+1
.896d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8970	85 38		sta $38				sta 	zTemp1
.8972	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8975	85 39		sta $39				sta 	zTemp1+1
.8977	5a		phy				phy 								; save Y so we can access strings
.8978	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.897a					_CSLoop:
.897a	c8		iny				iny
.897b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.897d	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.897f	d0 06		bne $8987			bne 	_CSDifferent
.8981	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8983	d0 f5		bne $897a			bne 	_CSLoop 					; still comparing
.8985					_CSExit:
.8985	7a		ply				ply 								; reached end, return zero in A from EOS
.8986	60		rts				rts
.8987					_CSDifferent:
.8987	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8989	90 fa		bcc $8985			bcc		_CSExit
.898b	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.898d	80 f6		bra $8985			bra 	_CSExit
.898f					_CSTypeError:
.898f	4c bb 9d	jmp $9dbb			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8992					ShiftLeft:
.8992	38		sec				sec
.8993	80 01		bra $8996			bra 	ShiftMain
.8995					ShiftRight:
.8995	18		clc				clc
.8996					ShiftMain:
.8996	fa		plx				plx 								; restore X
.8997	08		php				php 								; save direction
.8998	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.899b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.899e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.899f	0a		asl a				asl 	a
.89a0	10 05		bpl $89a7			bpl 	_NotRef
.89a2	48		pha				pha
.89a3	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.89a6	68		pla				pla
.89a7					_NotRef:
.89a7	0a		asl a				asl 	a
.89a8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.89aa	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.89ad	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.89b0	f0 03		beq $89b5			beq 	_IntegerCode 				; if clear, then we have two integers
.89b2	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.89b5					_IntegerCode:
.89b5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.89b8	29 e0		and #$e0			and 	#$E0
.89ba	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.89bd	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.89c0	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.89c3	d0 13		bne $89d8			bne 	_SMExit0 					; if >= 32 it will always return zero.
.89c5					_SMLoop:
.89c5	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.89c8	30 11		bmi $89db			bmi 	_SMExit 					; exit if done.
.89ca	28		plp				plp 								; restore direcition setting
.89cb	08		php				php
.89cc	90 05		bcc $89d3			bcc 	_SMRight
.89ce	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; shift left if CS
.89d1	80 f2		bra $89c5			bra 	_SMLoop
.89d3					_SMRight:
.89d3	20 5e 93	jsr $935e			jsr 	NSMShiftRight 				; shift right if CC
.89d6	80 ed		bra $89c5			bra 	_SMLoop
.89d8					_SMExit0:
.89d8	20 3b 93	jsr $933b			jsr 	NSMSetZero 					; return zero.
.89db					_SMExit:
.89db	28		plp				plp 								; throw direction
.89dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.89dd					AddTopTwoStack:
.89dd	18		clc				clc
.89de	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.89e1	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.89e4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89e7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.89ea	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.89ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89f0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.89f3	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.89f6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89f9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.89fc	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.89ff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a02	60		rts				rts
.8a03					SubTopTwoStack:
.8a03	38		sec				sec
.8a04	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8a07	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8a0a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8a10	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8a13	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a16	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8a19	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8a1c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a1f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8a22	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8a25	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a28	60		rts				rts
.8a29					AddInteger:
.8a29	fa		plx				plx
.8a2a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a2d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a30	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a31	0a		asl a				asl 	a
.8a32	10 05		bpl $8a39			bpl 	_NotRef
.8a34	48		pha				pha
.8a35	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a38	68		pla				pla
.8a39					_NotRef:
.8a39	0a		asl a				asl 	a 							; put MSB of type into A:7
.8a3a	30 0b		bmi $8a47			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8a3c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a3f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a42	f0 06		beq $8a4a			beq 	_IntegerCode 				; if clear, then we have two integers
.8a44	4c 98 9a	jmp $9a98			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8a47					_StringData:
.8a47	4c fc 88	jmp $88fc			jmp 	StringConcat							; at least one string - don't know both are strings.
.8a4a					_IntegerCode:
.8a4a					AddCode:
.8a4a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8a4d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8a50	10 8b		bpl $89dd			bpl 	AddTopTwoStack
.8a52	20 03 8a	jsr $8a03			jsr 	SubTopTwoStack 				; do a physical subtraction
.8a55	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8a58	10 09		bpl $8a63			bpl 	_AddExit
.8a5a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8a5d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a60	20 f0 92	jsr $92f0			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8a63					_AddExit:
.8a63	60		rts				rts
.8a64					SubInteger:
.8a64	fa		plx				plx
.8a65	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a68	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a6b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a6c	0a		asl a				asl 	a
.8a6d	10 05		bpl $8a74			bpl 	_NotRef
.8a6f	48		pha				pha
.8a70	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a73	68		pla				pla
.8a74					_NotRef:
.8a74	0a		asl a				asl 	a 							; put MSB of type into A:7
.8a75	30 0b		bmi $8a82			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8a77	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a7a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a7d	f0 06		beq $8a85			beq 	_IntegerCode 				; if clear, then we have two integers
.8a7f	4c 9d 9a	jmp $9a9d			jmp 	FloatingPointSub 							; otherwise at least one float.
.8a82					_StringData:
.8a82	4c c5 9d	jmp $9dc5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8a85					_IntegerCode:
.8a85	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8a88	49 80		eor #$80			eor 	#$80
.8a8a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8a8d	80 bb		bra $8a4a			bra 	AddCode 					; and do the same code as add.
.8a8f					AndInteger:
.8a8f	fa		plx				plx
.8a90	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a93	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a96	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a97	0a		asl a				asl 	a
.8a98	10 05		bpl $8a9f			bpl 	_NotRef
.8a9a	48		pha				pha
.8a9b	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a9e	68		pla				pla
.8a9f					_NotRef:
.8a9f	0a		asl a				asl 	a
.8aa0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8aa2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8aa5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8aa8	f0 03		beq $8aad			beq 	_IntegerCode 				; if clear, then we have two integers
.8aaa	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.8aad					_IntegerCode:
.8aad	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ab0	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8ab3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ab6	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ab9	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8abc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8abf	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ac2	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8ac5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ac8	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8acb	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8ace	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ad1	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ad4	60		rts				rts
.8ad5					OraInteger:
.8ad5	fa		plx				plx
.8ad6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ad9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8adc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8add	0a		asl a				asl 	a
.8ade	10 05		bpl $8ae5			bpl 	_NotRef
.8ae0	48		pha				pha
.8ae1	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ae4	68		pla				pla
.8ae5					_NotRef:
.8ae5	0a		asl a				asl 	a
.8ae6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ae8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8aeb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8aee	f0 03		beq $8af3			beq 	_IntegerCode 				; if clear, then we have two integers
.8af0	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.8af3					_IntegerCode:
.8af3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8af6	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8af9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8afc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8aff	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8b02	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b05	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b08	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8b0b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b0e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b11	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8b14	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b17	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b1a	60		rts				rts
.8b1b					EorInteger:
.8b1b	fa		plx				plx
.8b1c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b1f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b22	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b23	0a		asl a				asl 	a
.8b24	10 05		bpl $8b2b			bpl 	_NotRef
.8b26	48		pha				pha
.8b27	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b2a	68		pla				pla
.8b2b					_NotRef:
.8b2b	0a		asl a				asl 	a
.8b2c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b2e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b31	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b34	f0 03		beq $8b39			beq 	_IntegerCode 				; if clear, then we have two integers
.8b36	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.8b39					_IntegerCode:
.8b39	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b3c	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8b3f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b42	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b45	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8b48	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b4b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b4e	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8b51	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b54	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b57	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8b5a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b5d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b60	60		rts				rts
.8b61					WordIndirect:
.8b61	fa		plx				plx
.8b62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b65	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b68	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b69	0a		asl a				asl 	a
.8b6a	10 05		bpl $8b71			bpl 	_NotRef
.8b6c	48		pha				pha
.8b6d	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b70	68		pla				pla
.8b71					_NotRef:
.8b71	0a		asl a				asl 	a
.8b72	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b74	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b77	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b7a	f0 03		beq $8b7f			beq 	_IntegerCode 				; if clear, then we have two integers
.8b7c	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.8b7f					_IntegerCode:
.8b7f	20 4a 8a	jsr $8a4a			jsr 	AddCode 					; add the two values
.8b82	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8b84	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b87	60		rts				rts
.8b88					ByteIndirect:
.8b88	fa		plx				plx
.8b89	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b8c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b90	0a		asl a				asl 	a
.8b91	10 05		bpl $8b98			bpl 	_NotRef
.8b93	48		pha				pha
.8b94	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b97	68		pla				pla
.8b98					_NotRef:
.8b98	0a		asl a				asl 	a
.8b99	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b9b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b9e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ba1	f0 03		beq $8ba6			beq 	_IntegerCode 				; if clear, then we have two integers
.8ba3	4c bb 9d	jmp $9dbb			jmp 	TypeError 					; anything else, type mismatch.
.8ba6					_IntegerCode:
.8ba6	20 4a 8a	jsr $8a4a			jsr 	AddCode 					; add the two values
.8ba9	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8bab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9a3d					ConvertInt16:
.9a3d	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9a40	8e 10 06	stx $0610			stx 	NSMantissa1
.9a43	9c 18 06	stz $0618			stz 	NSMantissa2
.9a46	9c 20 06	stz $0620			stz 	NSMantissa3
.9a49	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9a4c	a2 00		ldx #$00			ldx 	#0 							; stack level
.9a4e	a9 0a		lda #$0a			lda 	#10 						; base
.9a50	80 00		bra $9a52			bra 	ConvertInt32
.9a52					ConvertInt32:
.9a52	5a		phy				phy
.9a53	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9a55	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9a58	10 08		bpl $9a62			bpl 	_CI32NotNeg
.9a5a	48		pha				pha
.9a5b	a9 2d		lda #$2d			lda 	#'-'
.9a5d	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9a60	c8		iny				iny
.9a61	68		pla				pla
.9a62					_CI32NotNeg:
.9a62	20 70 9a	jsr $9a70			jsr 	_CI32DivideConvert 			; recursive conversion
.9a65	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9a67	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9a6a	7a		ply				ply
.9a6b	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9a6d	a9 6d		lda #$6d			lda 	#NumberBuffer & $FF
.9a6f	60		rts				rts
.9a70					_CI32DivideConvert:
.9a70	e8		inx				inx 								; write to next slot up
.9a71	20 3d 93	jsr $933d			jsr 	NSMSetByte
.9a74	ca		dex				dex
.9a75	20 72 99	jsr $9972			jsr 	Int32Divide 				; divide
.9a78	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9a7b	48		pha				pha
.9a7c	20 21 99	jsr $9921			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9a7f	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; is it zero ?
.9a82	f0 06		beq $9a8a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9a84	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9a87	20 70 9a	jsr $9a70			jsr 	_CI32DivideConvert 			; and recusrively call.
.9a8a					_CI32NoRecurse:
.9a8a	68		pla				pla 								; remainder
.9a8b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9a8d	90 02		bcc $9a91			bcc 	_CI32NotHex
.9a8f	69 26		adc #$26			adc 	#6+32
.9a91					_CI32NotHex:
.9a91	69 30		adc #$30			adc 	#48
.9a93	99 6d 08	sta $086d,y			sta 	NumberBuffer,y 				; write out and exit
.9a96	c8		iny				iny
.9a97	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8baf					PrecedenceLevel:
>8baf	04					.byte	 4	; $00 <<
>8bb0	02					.byte	 2	; $01 <=
>8bb1	02					.byte	 2	; $02 <>
>8bb2	00					.byte	 0	; $03 !!3
>8bb3	00					.byte	 0	; $04 ><
>8bb4	02					.byte	 2	; $05 >=
>8bb5	04					.byte	 4	; $06 >>
>8bb6	00					.byte	 0	; $07 !!7
>8bb7	00					.byte	 0	; $08 !!8
>8bb8	00					.byte	 0	; $09 !!9
>8bb9	00					.byte	 0	; $0a !!10
>8bba	00					.byte	 0	; $0b !!11
>8bbb	00					.byte	 0	; $0c !!12
>8bbc	00					.byte	 0	; $0d !!13
>8bbd	00					.byte	 0	; $0e !!14
>8bbe	00					.byte	 0	; $0f !!15
>8bbf	00					.byte	 0	; $10 @
>8bc0	00					.byte	 0	; $11 !!17
>8bc1	00					.byte	 0	; $12 !!18
>8bc2	00					.byte	 0	; $13 [
>8bc3	04					.byte	 4	; $14 \
>8bc4	00					.byte	 0	; $15 ]
>8bc5	01					.byte	 1	; $16 ^
>8bc6	00					.byte	 0	; $17 _
>8bc7	00					.byte	 0	; $18 `
>8bc8	00					.byte	 0	; $19 !!25
>8bc9	00					.byte	 0	; $1a !!26
>8bca	00					.byte	 0	; $1b {
>8bcb	01					.byte	 1	; $1c |
>8bcc	00					.byte	 0	; $1d }
>8bcd	00					.byte	 0	; $1e ~
>8bce	00					.byte	 0	; $1f [7m<7F>[m
>8bcf	00					.byte	 0	; $20
>8bd0	05					.byte	 5	; $21 !
>8bd1	00					.byte	 0	; $22 "
>8bd2	00					.byte	 0	; $23 #
>8bd3	05					.byte	 5	; $24 $
>8bd4	04					.byte	 4	; $25 %
>8bd5	01					.byte	 1	; $26 &
>8bd6	00					.byte	 0	; $27 '
>8bd7	00					.byte	 0	; $28 (
>8bd8	00					.byte	 0	; $29 )
>8bd9	04					.byte	 4	; $2a *
>8bda	03					.byte	 3	; $2b +
>8bdb	00					.byte	 0	; $2c ,
>8bdc	03					.byte	 3	; $2d -
>8bdd	00					.byte	 0	; $2e .
>8bde	04					.byte	 4	; $2f /
>8bdf	00					.byte	 0	; $30 0
>8be0	00					.byte	 0	; $31 1
>8be1	00					.byte	 0	; $32 2
>8be2	00					.byte	 0	; $33 3
>8be3	00					.byte	 0	; $34 4
>8be4	00					.byte	 0	; $35 5
>8be5	00					.byte	 0	; $36 6
>8be6	00					.byte	 0	; $37 7
>8be7	00					.byte	 0	; $38 8
>8be8	00					.byte	 0	; $39 9
>8be9	00					.byte	 0	; $3a :
>8bea	00					.byte	 0	; $3b ;
>8beb	02					.byte	 2	; $3c <
>8bec	02					.byte	 2	; $3d =
>8bed	02					.byte	 2	; $3e >
>8bee	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8bef					EvaluateExpressionAt0:
.8bef	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8bf1					EvaluateExpression:
.8bf1	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8bf3					EvaluateExpressionAtPrecedence:
.8bf3	48		pha				pha 								; save precedence level
.8bf4	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm 				; evaluate term into level X.
.8bf7	68		pla				pla 								; restore precedence level.
.8bf8					_EXPRLoop:
.8bf8	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8bfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfc	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8bfe	b0 25		bcs $8c25			bcs 	_EXPRExit
.8c00	da		phx				phx 								; read the operator precedence
.8c01	aa		tax				tax
.8c02	bd af 8b	lda $8baf,x			lda 	PrecedenceLevel,x
.8c05	fa		plx				plx
.8c06	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8c08	f0 1b		beq $8c25			beq 	_EXPRExit
.8c0a	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8c0c	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8c0e	c5 37		cmp $37				cmp 	zTemp0+1
.8c10	b0 13		bcs $8c25			bcs		_EXPRExit 					; if current >= operator exit
.8c12	48		pha				pha 								; save current precedence.
.8c13	b1 30		lda ($30),y			lda 	(codePtr),y
.8c15	c8		iny				iny
.8c16	48		pha				pha
.8c17	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8c19	e8		inx				inx 								; work out the right hand side.
.8c1a	20 f3 8b	jsr $8bf3			jsr 	EvaluateExpressionAtPrecedence
.8c1d	ca		dex				dex
.8c1e	68		pla				pla 								; get operator, call the code.
.8c1f	20 28 8c	jsr $8c28			jsr 	_EXPRCaller
.8c22	68		pla				pla 								; restore precedence level
.8c23	80 d3		bra $8bf8			bra 	_EXPRLoop 					; and go round.
.8c25					_EXPRExit:
.8c25	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8c27	60		rts				rts
.8c28					_EXPRCaller:
.8c28	da		phx				phx 								; save on stack, first thing is to restore it
.8c29	0a		asl a				asl 	a 							; double so can use vectors into X
.8c2a	aa		tax				tax
.8c2b	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9a98					FloatingPointAdd:
.9a98	20 39 9c	jsr $9c39			jsr 	FloatPrepare 				; prepare for floats
.9a9b	80 0b		bra $9aa8			bra 	FloatAdd
.9a9d					FloatingPointSub:
.9a9d	20 39 9c	jsr $9c39			jsr 	FloatPrepare 				; prepare for floats
.9aa0					FloatSubtract:
.9aa0	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9aa3	49 80		eor #$80			eor 	#$80
.9aa5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9aa8					FloatAdd:
.9aa8	48		pha				pha
.9aa9	5a		phy				phy
.9aaa	20 4a 9c	jsr $9c4a			jsr 	NSNormalise 				; normalise S[X]
.9aad	f0 54		beq $9b03			beq 	_FAReturn1
.9aaf	e8		inx				inx 								; normalise S[X+1]
.9ab0	20 4a 9c	jsr $9c4a			jsr 	NSNormalise
.9ab3	ca		dex				dex
.9ab4	c9 00		cmp #$00			cmp 	#0
.9ab6	f0 6f		beq $9b27			beq 	_FAExit 					; if so, just return A
.9ab8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9abb	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9abe	f0 1b		beq $9adb			beq 	_FAExponentsEqual
.9ac0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9ac3	a8		tay				tay
.9ac4	38		sec				sec 								; do a signed comparison of the exponents.
.9ac5	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9ac8	50 02		bvc $9acc			bvc 	_FANoSignedChange
.9aca	49 80		eor #$80			eor 	#$80
.9acc					_FANoSignedChange:
.9acc	29 80		and #$80			and 	#$80
.9ace	10 03		bpl $9ad3			bpl 	_FAHaveMax
.9ad0	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9ad3					_FAHaveMax:
.9ad3	20 2a 9b	jsr $9b2a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9ad6	e8		inx				inx
.9ad7	20 2a 9b	jsr $9b2a			jsr 	_FAShiftToExponent
.9ada	ca		dex				dex
.9adb					_FAExponentsEqual:
.9adb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9ade	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9ae1	30 10		bmi $9af3			bmi 	_FADifferentSigns
.9ae3	20 dd 89	jsr $89dd			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9ae6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9ae9	10 3c		bpl $9b27			bpl 	_FAExit 					; if no, we are done.
.9aeb	20 5e 93	jsr $935e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9aee	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9af1	80 34		bra $9b27			bra 	_FAExit
.9af3					_FADifferentSigns:
.9af3	20 03 8a	jsr $8a03			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9af6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9af9	10 2c		bpl $9b27			bpl 	_FAExit 					; if no, we are done.
.9afb	20 e7 92	jsr $92e7			jsr 	NSMNegate 					; netate result
.9afe	20 f0 92	jsr $92f0			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b01	80 24		bra $9b27			bra 	_FAExit
.9b03					_FAReturn1:
.9b03	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9b06	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9b09	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9b0c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b0f	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9b12	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9b15	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9b18	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9b1b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9b1e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9b21	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9b24	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b27					_FAExit:
.9b27	7a		ply				ply
.9b28	68		pla				pla
.9b29	60		rts				rts
.9b2a					_FAShiftToExponent:
.9b2a					_FAShiftToExponent2:
.9b2a	98		tya				tya 								; compare Y to exponent
.9b2b	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9b2e	f0 08		beq $9b38			beq 	_FASEExit 					; exit if so.
.9b30	20 5e 93	jsr $935e			jsr 	NSMShiftRight	 			; shift the mantissa right
.9b33	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9b36	80 f2		bra $9b2a			bra 	_FAShiftToExponent2
.9b38					_FASEExit:
.9b38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9b39					CompareFloat:
.9b39	20 a0 9a	jsr $9aa0			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9b3c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9b3f	29 f8		and #$f8			and 	#$F8
.9b41	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9b44	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9b47	f0 09		beq $9b52			beq 	_FCExit 					; zero, so approximately identical
.9b49	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9b4b	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9b4e	10 02		bpl $9b52			bpl 	_FCExit
.9b50					_FCNegative:
.9b50	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9b52					_FCExit:
.9b52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9b53					FDivideCommand:
.9b53	fa		plx				plx	 								; restore stack position
.9b54	20 39 9c	jsr $9c39			jsr 	FloatPrepare 				; prepare for floats
.9b57					FloatDivide:
.9b57	48		pha				pha
.9b58	e8		inx				inx
.9b59	20 4a 9c	jsr $9c4a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9b5c	ca		dex				dex
.9b5d	c9 00		cmp #$00			cmp 	#0
.9b5f	f0 20		beq $9b81			beq 	_FDZero
.9b61	20 4a 9c	jsr $9c4a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9b64	f0 19		beq $9b7f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9b66	20 94 99	jsr $9994			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9b69	20 21 99	jsr $9921			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9b6c	20 4a 9c	jsr $9c4a			jsr		NSNormalise 				; renormalise
.9b6f	20 2f 9a	jsr $9a2f			jsr 	CalculateSign 				; calculate result sign
.9b72	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9b75	38		sec				sec
.9b76	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9b79	38		sec				sec
.9b7a	e9 1e		sbc #$1e			sbc 	#30
.9b7c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9b7f					_FDExit:
.9b7f	68		pla				pla
.9b80	60		rts				rts
.9b81					_FDZero:
.9b81	a9 03		lda #$03		lda	#3
.9b83	4c e8 87	jmp $87e8		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9b86					FloatFractionalPart:
.9b86	5a		phy				phy
.9b87	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9b8a	29 7f		and #$7f			and 	#$7F
.9b8c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b8f	20 4a 9c	jsr $9c4a			jsr 	NSNormalise
.9b92	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9b95	38		sec				sec
.9b96	e9 e0		sbc #$e0			sbc 	#$E0
.9b98	90 31		bcc $9bcb			bcc 	_FFPExit 					; already fractional
.9b9a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9b9c	b0 2a		bcs $9bc8			bcs 	_FFPZero
.9b9e	a8		tay				tay 								; put count to do in Y
.9b9f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9ba2	20 cd 9b	jsr $9bcd			jsr 	_FFPPartial
.9ba5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9ba8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9bab	20 cd 9b	jsr $9bcd			jsr 	_FFPPartial
.9bae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9bb1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9bb4	20 cd 9b	jsr $9bcd			jsr 	_FFPPartial
.9bb7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9bba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9bbd	20 cd 9b	jsr $9bcd			jsr 	_FFPPartial
.9bc0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9bc3	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; zeroed check.
.9bc6	d0 03		bne $9bcb			bne 	_FFPExit
.9bc8					_FFPZero:
.9bc8	20 3b 93	jsr $933b			jsr 	NSMSetZero
.9bcb					_FFPExit:
.9bcb	7a		ply				ply
.9bcc	60		rts				rts
.9bcd					_FFPPartial:
.9bcd	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9bcf	f0 17		beq $9be8			beq 	_FFFPPExit
.9bd1	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9bd3	b0 0c		bcs $9be1			bcs 	_FFFPPWholeByte
.9bd5	5a		phy				phy
.9bd6					_FFFPPLeft:
.9bd6	0a		asl a				asl 	a
.9bd7	88		dey				dey
.9bd8	d0 fc		bne $9bd6			bne 	_FFFPPLeft
.9bda	7a		ply				ply
.9bdb					_FFFPPRight:
.9bdb	4a		lsr a				lsr 	a
.9bdc	88		dey				dey
.9bdd	d0 fc		bne $9bdb			bne 	_FFFPPRight
.9bdf	80 07		bra $9be8			bra 	_FFFPPExit
.9be1					_FFFPPWholeByte:
.9be1	98		tya				tya 								; subtract 8 from count
.9be2	38		sec				sec
.9be3	e9 08		sbc #$08			sbc 	#8
.9be5	a8		tay				tay
.9be6	a9 00		lda #$00			lda 	#0 							; and clear all
.9be8					_FFFPPExit:
.9be8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9be9					FloatIntegerPart:
.9be9	48		pha				pha
.9bea	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9bed	f0 1f		beq $9c0e			beq 	_FIPExit 					; if so do nothing
.9bef	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; is it zero ?
.9bf2	f0 17		beq $9c0b			beq 	_FIPZero 					; if so return zero.
.9bf4	20 4a 9c	jsr $9c4a			jsr 	NSNormalise 				; normalise
.9bf7	f0 12		beq $9c0b			beq 	_FIPZero 					; normalised to zero, exit zero
.9bf9					_FIPShift:
.9bf9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9bfc	10 08		bpl $9c06			bpl 	_FIPCheckZero
.9bfe	20 5e 93	jsr $935e			jsr 	NSMShiftRight 				; shift mantissa right
.9c01	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9c04	80 f3		bra $9bf9			bra 	_FIPShift
.9c06					_FIPCheckZero:
.9c06	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; avoid -0 problem
.9c09	d0 03		bne $9c0e			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c0b					_FIPZero:
.9c0b	20 3b 93	jsr $933b			jsr 	NSMSetZero
.9c0e					_FIPExit:
.9c0e	68		pla				pla
.9c0f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c10					FloatingPointMultiply:
.9c10	20 39 9c	jsr $9c39			jsr 	FloatPrepare 				; prepare for floats
.9c13					FloatMultiply:
.9c13	48		pha				pha
.9c14	20 4a 9c	jsr $9c4a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c17	f0 1b		beq $9c34			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c19	e8		inx				inx
.9c1a	20 4a 9c	jsr $9c4a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c1d	ca		dex				dex
.9c1e	c9 00		cmp #$00			cmp 	#0
.9c20	f0 0f		beq $9c31			beq 	_FDSetZero
.9c22	20 ea 99	jsr $99ea			jsr 	MultiplyShort 				; calculate the result.
.9c25	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9c28	18		clc				clc
.9c29	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9c2c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9c2f	80 03		bra $9c34			bra 	_FDExit
.9c31					_FDSetZero:
.9c31	20 3b 93	jsr $933b			jsr 	NSMSetZero 					; return 0
.9c34					_FDExit:
.9c34	20 4a 9c	jsr $9c4a			jsr 	NSNormalise 				; normalise the result
.9c37	68		pla				pla
.9c38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9c39					FloatPrepare:
.9c39	20 01 8d	jsr $8d01			jsr 	DereferenceTopTwo 			; dereference the top two values
.9c3c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9c3f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9c42	29 10		and #$10			and 	#NSBIsString
.9c44	d0 01		bne $9c47			bne 	_FDType
.9c46	60		rts				rts
.9c47					_FDType:
.9c47	4c bb 9d	jmp $9dbb			jmp 	TypeError
.9c4a					NSNormalise:
.9c4a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9c4d	29 80		and #$80			and 	#$80
.9c4f	09 08		ora #$08			ora 	#NSTFloat
.9c51	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9c54	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; if zero exit
.9c57	d0 09		bne $9c62			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9c59	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9c5c	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9c5f	a9 00		lda #$00			lda 	#0 							; set Z flag
.9c61	60		rts				rts
.9c62					_NSNormaliseOptimise:
.9c62	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9c65	d0 22		bne $9c89			bne 	_NSNormaliseLoop
.9c67	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9c6a	30 1d		bmi $9c89			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9c6c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9c6f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9c72	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9c75	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9c78	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c7b	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9c7e	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9c81	38		sec				sec
.9c82	e9 08		sbc #$08			sbc 	#8
.9c84	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9c87	80 d9		bra $9c62			bra 	_NSNormaliseOptimise
.9c89					_NSNormaliseLoop:
.9c89	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9c8c	70 08		bvs $9c96			bvs 	_NSNExit 					; exit if so with Z flag clear
.9c8e	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; shift mantissa left
.9c91	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9c94	80 f3		bra $9c89			bra 	_NSNormaliseLoop
.9c96					_NSNExit:
.9c96	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9c98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8c2e					AssignNumber:
.8c2e	5a		phy				phy
.8c2f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8c32	85 36		sta $36				sta 	zTemp0
.8c34	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c37	85 37		sta $37				sta 	zTemp0+1
.8c39	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8c3c	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8c3e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c41	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8c43	c9 08		cmp #$08			cmp 	#NSTFloat
.8c45	f0 2a		beq $8c71			beq 	_ANFloat
.8c47	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8c4a	f0 05		beq $8c51			beq		_ANNotFloat
.8c4c	e8		inx				inx
.8c4d	20 e9 9b	jsr $9be9			jsr 	FloatIntegerPart 			; make it an integer
.8c50	ca		dex				dex
.8c51					_ANNotFloat:
.8c51	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8c54	29 03		and #$03			and 	#3
.8c56	d0 05		bne $8c5d			bne 	_ANByteWord
.8c58	20 7d 8c	jsr $8c7d			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8c5b	80 1e		bra $8c7b			bra 	_ANExit
.8c5d					_ANByteWord:
.8c5d	48		pha				pha 								; save count
.8c5e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8c61	92 36		sta ($36)			sta 	(zTemp0)
.8c63	68		pla				pla
.8c64	c9 01		cmp #$01			cmp	 	#1
.8c66	f0 13		beq $8c7b			beq 	_ANExit
.8c68	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8c6b	a0 01		ldy #$01			ldy 	#1
.8c6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c6f	80 0a		bra $8c7b			bra 	_ANExit
.8c71					_ANFloat:
.8c71	20 7d 8c	jsr $8c7d			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8c74	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8c77	a0 04		ldy #$04			ldy 	#4
.8c79	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7b					_ANExit:
.8c7b	7a		ply				ply
.8c7c	60		rts				rts
.8c7d					_ANCopy4PackSign:
.8c7d	a0 03		ldy #$03			ldy 	#3
.8c7f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8c82	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8c84	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8c87	91 36		sta ($36),y			sta 	(zTemp0),y
.8c89	88		dey				dey
.8c8a	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8c8d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c8f	88		dey				dey
.8c90	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8c93	91 36		sta ($36),y			sta 	(zTemp0),y
.8c95	88		dey				dey
.8c96	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8c99	91 36		sta ($36),y			sta 	(zTemp0),y
.8c9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8c9c					AssignString:
.8c9c	5a		phy				phy
.8c9d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8ca0	85 38		sta $38				sta 	zTemp1
.8ca2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ca5	85 39		sta $39				sta 	zTemp1+1
.8ca7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8caa	85 36		sta $36				sta 	zTemp0
.8cac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8caf	85 37		sta $37				sta 	zTemp0+1
.8cb1	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8cb3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cb5	f0 23		beq $8cda			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8cb7	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8cb8	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8cba	e9 02		sbc #$02			sbc 	#2
.8cbc	85 3c		sta $3c				sta 	zsTemp
.8cbe	a0 01		ldy #$01			ldy 	#1
.8cc0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cc2	e9 00		sbc #$00			sbc 	#0
.8cc4	85 3d		sta $3d				sta 	zsTemp+1
.8cc6	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8cc8					_ASGetLength:
.8cc8	c8		iny				iny
.8cc9	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ccb	d0 fb		bne $8cc8			bne 	_ASGetLength
.8ccd	98		tya				tya 								; is this length <= current length
.8cce	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8cd0	90 20		bcc $8cf2			bcc 	_ASCopyString
.8cd2	f0 1e		beq $8cf2			beq 	_ASCopyString
.8cd4	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8cd6	a0 01		ldy #$01			ldy 	#1
.8cd8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8cda					_ASNewStringRequired:
.8cda	e8		inx				inx 								; concrete the new string.
.8cdb	20 30 9f	jsr $9f30			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8cde	ca		dex				dex
.8cdf	18		clc				clc
.8ce0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8ce3	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8ce5	92 36		sta ($36)			sta 	(zTemp0)
.8ce7	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8cea	69 00		adc #$00			adc 	#0
.8cec	a0 01		ldy #$01			ldy 	#1
.8cee	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf0	80 0d		bra $8cff			bra 	_ASExit
.8cf2					_ASCopyString:
.8cf2	a0 00		ldy #$00			ldy 	#0
.8cf4					_ASCopyLoop:
.8cf4	b1 38		lda ($38),y			lda 	(zTemp1),y
.8cf6	c8		iny				iny
.8cf7	c8		iny				iny
.8cf8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8cfa	88		dey				dey
.8cfb	c9 00		cmp #$00			cmp 	#0
.8cfd	d0 f5		bne $8cf4			bne 	_ASCopyLoop
.8cff					_ASExit:
.8cff	7a		ply				ply
.8d00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8d01					DereferenceTopTwo:
.8d01	e8		inx				inx
.8d02	20 06 8d	jsr $8d06			jsr 	Dereference 				; deref x+1
.8d05	ca		dex				dex  								; falls through to deref x
.8d06					Dereference:
.8d06	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8d09	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8d0b	f0 57		beq $8d64			beq 	_DRFExit 					; not a reference
.8d0d	5a		phy				phy
.8d0e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8d11	85 36		sta $36				sta 	zTemp0
.8d13	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d16	85 37		sta $37				sta 	zTemp0+1
.8d18	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8d1b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8d1d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d20	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8d23	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8d25	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8d27	f0 0f		beq $8d38			beq 	_DRFDereferenceTwo
.8d29	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8d2b	f0 39		beq $8d66			beq 	_DRFFull
.8d2d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8d30	29 03		and #$03			and 	#3
.8d32	f0 32		beq $8d66			beq 	_DRFFull 					; the whole word
.8d34	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8d36	f0 07		beq $8d3f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8d38					_DRFDereferenceTwo:
.8d38	a0 01		ldy #$01			ldy 	#1
.8d3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d3c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d3f					_DRFClear23:
.8d3f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8d42	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d45	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8d48	29 18		and #$18			and 	#NSBTypeMask
.8d4a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d4d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8d4f	d0 12		bne $8d63			bne 	_DRFNotString
.8d51	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8d54	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8d57	d0 0a		bne $8d63			bne 	_DRFNotString
.8d59	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8d5b	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8d5e	a9 8d		lda #$8d			lda 	#_DRFNullString >> 8
.8d60	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8d63					_DRFNotString
.8d63	7a		ply				ply 								; restore Y and exit
.8d64					_DRFExit:
.8d64	60		rts				rts
.8d65					_DRFNullString:
>8d65	00						.byte 	0
.8d66					_DRFFull:
.8d66	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8d68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d6a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d6d	c8		iny				iny
.8d6e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d70	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d73	c8		iny				iny
.8d74	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d76	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d79	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8d7c	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8d7f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8d81	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8d84	f0 06		beq $8d8c			beq 	_DRFNoExponent
.8d86	c8		iny				iny 								; if not, read the exponent as well.
.8d87	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d89	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8d8c					_DRFNoExponent:
.8d8c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8d8f	10 0d		bpl $8d9e			bpl 	_DRFExit2 					; if not, then exit.
.8d91	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8d93	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d96	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8d99	09 80		ora #$80			ora 	#NSBIsNegative
.8d9b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d9e					_DRFExit2:
.8d9e	7a		ply				ply
.8d9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8da0					EncodeNumberStart:
.8da0	38		sec				sec
.8da1	80 01		bra $8da4			bra 	EncodeNumberContinue+1
.8da3					EncodeNumberContinue:
.8da3	18		clc				clc
.8da4					EncodeNumber:
.8da4	08		php				php 								; save reset.
.8da5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8da7	f0 12		beq $8dbb			beq 	_ENIsOkay
.8da9	c9 30		cmp #$30			cmp 	#"0"
.8dab	90 04		bcc $8db1			bcc 	_ENBadNumber
.8dad	c9 3a		cmp #$3a			cmp 	#"9"+1
.8daf	90 0a		bcc $8dbb			bcc 	_ENIsOkay
.8db1					_ENBadNumber:
.8db1	28		plp				plp 								; throw saved reset
.8db2	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8db5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8db7	f0 7e		beq $8e37			beq 	_ENConstructFinal
.8db9					_ENFail:
.8db9	18		clc				clc 								; not allowed
.8dba	60		rts				rts
.8dbb					_ENIsOkay:
.8dbb	28		plp				plp 								; are we restarting
.8dbc	90 15		bcc $8dd3			bcc 	_ENNoRestart
.8dbe					_ENStartEncode:
.8dbe	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8dc0	f0 0c		beq $8dce			beq 	_ENFirstDP
.8dc2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8dc4	20 3d 93	jsr $933d			jsr 	NSMSetByte
.8dc7	a9 01		lda #$01			lda 	#ESTA_Low
.8dc9					_ENExitChange:
.8dc9	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8dcc	38		sec				sec
.8dcd	60		rts				rts
.8dce					_ENFirstDP:
.8dce	20 3b 93	jsr $933b			jsr 	NSMSetZero 					; clear integer part
.8dd1	80 3f		bra $8e12			bra 	_ESTASwitchFloat			; go straight to float and exi
.8dd3					_ENNoRestart:
.8dd3	48		pha				pha 								; save on stack.
.8dd4	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8dd7	c9 01		cmp #$01			cmp 	#ESTA_Low
.8dd9	f0 09		beq $8de4			beq  	_ESTALowState
.8ddb	c9 02		cmp #$02			cmp 	#ESTA_High
.8ddd	f0 29		beq $8e08			beq 	_ESTAHighState
.8ddf	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8de1	f0 3b		beq $8e1e			beq 	_ESTADecimalState
>8de3	db						.byte 	$DB 						; causes a break in the emulator
.8de4					_ESTALowState:
.8de4	68		pla				pla 								; get value back
.8de5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8de7	f0 29		beq $8e12			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8de9	29 0f		and #$0f			and 	#15 						; make digit
.8deb	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8dee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8df1	0a		asl a				asl 	a
.8df2	0a		asl a				asl 	a
.8df3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8df6	0a		asl a				asl 	a
.8df7	6d 06 07	adc $0706			adc 	DigitTemp
.8dfa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dfd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8dff	90 05		bcc $8e06			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8e01	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8e03	8d 05 07	sta $0705			sta 	EncodeState
.8e06					_ESTANoSwitch:
.8e06	38		sec				sec
.8e07	60		rts				rts
.8e08					_ESTAHighState:
.8e08	68		pla				pla 								; get value back
.8e09	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8e0b	f0 05		beq $8e12			beq 	_ESTASwitchFloat
.8e0d	20 71 8e	jsr $8e71			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8e10	38		sec				sec
.8e11	60		rts				rts
.8e12					_ESTASwitchFloat:
.8e12	9c 07 07	stz $0707			stz 	DecimalCount
.8e15	e8		inx				inx 								; zero the decimal additive.
.8e16	20 3b 93	jsr $933b			jsr 	NSMSetZero
.8e19	ca		dex				dex
.8e1a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8e1c	80 ab		bra $8dc9			bra 	_ENExitChange
.8e1e					_ESTADecimalState:
.8e1e	68		pla				pla 								; digit.
.8e1f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8e21	f0 96		beq $8db9			beq 	_ENFail
.8e23	e8		inx				inx 								; put digit into fractional part of X+1
.8e24	20 71 8e	jsr $8e71			jsr 	ESTAShiftDigitIntoMantissa
.8e27	ca		dex				dex
.8e28	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8e2b	ad 07 07	lda $0707			lda 	DecimalCount
.8e2e	c9 0b		cmp #$0b			cmp 	#11
.8e30	f0 02		beq $8e34			beq 	_ESTADSFail
.8e32	38		sec				sec
.8e33	60		rts				rts
.8e34					_ESTADSFail:
.8e34	4c b6 9d	jmp $9db6			jmp 	RangeError
.8e37					_ENConstructFinal:
.8e37	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8e3a	f0 33		beq $8e6f			beq 	_ENCFExit 					; no decimals
.8e3c	5a		phy				phy
.8e3d	0a		asl a				asl 	a 							; x 4 and CLC
.8e3e	0a		asl a				asl 	a
.8e3f	6d 07 07	adc $0707			adc 	DecimalCount
.8e42	a8		tay				tay
.8e43	b9 75 9d	lda $9d75,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8e46	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e49	b9 76 9d	lda $9d76,y			lda 	DecimalScalarTable-5+1,y
.8e4c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8e4f	b9 77 9d	lda $9d77,y			lda 	DecimalScalarTable-5+2,y
.8e52	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8e55	b9 78 9d	lda $9d78,y			lda 	DecimalScalarTable-5+3,y
.8e58	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8e5b	b9 79 9d	lda $9d79,y			lda 	DecimalScalarTable-5+4,y
.8e5e	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8e61	a9 08		lda #$08			lda 	#NSTFloat
.8e63	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8e66	7a		ply				ply
.8e67	e8		inx				inx 								; multiply decimal const by decimal scalar
.8e68	20 13 9c	jsr $9c13			jsr 	FloatMultiply
.8e6b	ca		dex				dex
.8e6c	20 a8 9a	jsr $9aa8			jsr 	FloatAdd 					; add to integer part.
.8e6f					_ENCFExit:
.8e6f	18		clc				clc 								; reject the digit.
.8e70	60		rts				rts
.8e71					ESTAShiftDigitIntoMantissa:
.8e71	29 0f		and #$0f			and 	#15 						; save digit
.8e73	48		pha				pha
.8e74	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8e77	48		pha				pha
.8e78	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8e7b	48		pha				pha
.8e7c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e7f	48		pha				pha
.8e80	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e83	48		pha				pha
.8e84	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 2
.8e87	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 4
.8e8a	18		clc				clc 								; pop mantissa and add
.8e8b	68		pla				pla
.8e8c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8e8f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e92	68		pla				pla
.8e93	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8e96	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e99	68		pla				pla
.8e9a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8e9d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ea0	68		pla				pla
.8ea1	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8ea4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8ea7	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 10
.8eaa	68		pla				pla 								; add digit
.8eab	18		clc				clc
.8eac	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8eaf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8eb2	90 0d		bcc $8ec1			bcc 	_ESTASDExit
.8eb4	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8eb7	d0 08		bne $8ec1			bne 	_ESTASDExit
.8eb9	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8ebc	d0 03		bne $8ec1			bne 	_ESTASDExit
.8ebe	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8ec1					_ESTASDExit:
.8ec1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8ec2					EvaluateTerm:
.8ec2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec4	30 18		bmi $8ede			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8ec6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8ec8	b0 6f		bcs $8f39			bcs 	_ETVariable
.8eca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8ecc	90 6e		bcc $8f3c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8ece	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ed0	b0 6a		bcs $8f3c			bcs 	_ETPuncUnary
.8ed2	20 a0 8d	jsr $8da0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8ed5					_ETNumber:
.8ed5	c8		iny				iny 								; keep encoding until we have the numbers
.8ed6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed8	20 a3 8d	jsr $8da3			jsr 	EncodeNumberContinue
.8edb	b0 f8		bcs $8ed5			bcs 	_ETNumber 					; go back if accepted.
.8edd	60		rts				rts
.8ede					_ETCheckUnary:
.8ede	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8ee0	f0 41		beq $8f23			beq 	_ETString
.8ee2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8ee4	f0 12		beq $8ef8			beq 	_ETHexConstant
.8ee6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8ee8	90 0b		bcc $8ef5			bcc 	_ETSyntaxError
.8eea	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8eec	b0 07		bcs $8ef5			bcs 	_ETSyntaxError
.8eee	da		phx				phx 								; push X on the stack
.8eef	0a		asl a				asl 	a 							; put vector x 2 into X
.8ef0	aa		tax				tax
.8ef1	c8		iny				iny 								; consume unary function token
.8ef2	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8ef5					_ETSyntaxError:
.8ef5	4c b1 9d	jmp $9db1			jmp 	SyntaxError
.8ef8					_ETHexConstant:
.8ef8	c8		iny				iny 								; skip #
.8ef9	c8		iny				iny 								; skip count
.8efa	20 3b 93	jsr $933b			jsr 	NSMSetZero 					; clear result
.8efd					_ETHLoop:
.8efd	b1 30		lda ($30),y			lda 	(codePtr),y
.8eff	c8		iny				iny 								; and consume
.8f00	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8f02	f0 1e		beq $8f22			beq 	_ETHExit
.8f04	48		pha				pha 								; save on stack.
.8f05	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 2
.8f08	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 4
.8f0b	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 8
.8f0e	20 50 93	jsr $9350			jsr 	NSMShiftLeft 				; x 16
.8f11	68		pla				pla 								; ASCII
.8f12	c9 41		cmp #$41			cmp 	#'A'
.8f14	90 02		bcc $8f18			bcc 	_ETHNotChar
.8f16	e9 07		sbc #$07			sbc 	#7
.8f18					_ETHNotChar:
.8f18	29 0f		and #$0f			and 	#15 						; digit now
.8f1a	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8f1d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f20	80 db		bra $8efd			bra 	_ETHLoop 					; go round.
.8f22					_ETHExit:
.8f22	60		rts				rts
.8f23					_ETString:
.8f23	c8		iny				iny 								; look at length
.8f24	b1 30		lda ($30),y			lda 	(codePtr),y
.8f26	48		pha				pha
.8f27	c8		iny				iny 								; first character
.8f28	20 8c 98	jsr $988c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8f2b	68		pla				pla 								; restore count and save
.8f2c	85 36		sta $36				sta 	zTemp0
.8f2e	98		tya				tya 								; add length to Y to skip it.
.8f2f	18		clc				clc
.8f30	65 36		adc $36				adc 	zTemp0
.8f32	a8		tay				tay
.8f33	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8f35	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f38	60		rts				rts
.8f39					_ETVariable:
.8f39	4c 93 8f	jmp $8f93			jmp 	VariableHandler
.8f3c					_ETPuncUnary:
.8f3c	c8		iny				iny 								; consume the unary character
.8f3d	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8f3f	f0 2d		beq $8f6e			beq 	_ETUnaryNegate
.8f41	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8f43	f0 39		beq $8f7e			beq 	_ETDereference
.8f45	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8f47	f0 43		beq $8f8c			beq 	_ETParenthesis
.8f49	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8f4b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8f4d	f0 06		beq $8f55			beq 	_ETIndirection
.8f4f	e6 36		inc $36				inc 	zTemp0
.8f51	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8f53	d0 a0		bne $8ef5			bne 	_ETSyntaxError
.8f55					_ETIndirection:
.8f55	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8f57	1a		inc a				inc 	a
.8f58	48		pha				pha
.8f59	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm				; evaluate the term
.8f5c	20 06 8d	jsr $8d06			jsr 	Dereference 				; dereference it.
.8f5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8f62	d0 07		bne $8f6b			bne 	_ETTypeMismatch
.8f64	68		pla				pla 								; indirection 1-2
.8f65	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8f67	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f6a	60		rts				rts
.8f6b					_ETTypeMismatch:
.8f6b	4c bb 9d	jmp $9dbb			jmp 	TypeError
.8f6e					_ETUnaryNegate:
.8f6e	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm				; evaluate the term
.8f71	20 06 8d	jsr $8d06			jsr 	Dereference 				; dereference it.
.8f74	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8f77	29 10		and #$10			and 	#NSTString
.8f79	d0 f0		bne $8f6b			bne 	_ETTypeMismatch
.8f7b	4c e7 92	jmp $92e7			jmp 	NSMNegate  					; just toggles the sign bit.
.8f7e					_ETDereference:
.8f7e	20 c2 8e	jsr $8ec2			jsr 	EvaluateTerm				; evaluate the term
.8f81	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8f84	29 20		and #$20			and 	#NSBIsReference
.8f86	f0 e3		beq $8f6b			beq 	_ETTypeMismatch
.8f88	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8f8b	60		rts				rts
.8f8c					_ETParenthesis:
.8f8c	20 f1 8b	jsr $8bf1			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8f8f	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; check for )
.8f92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8f93					VariableHandler:
.8f93	b1 30		lda ($30),y			lda 	(codePtr),y
.8f95	18		clc				clc
.8f96	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8f98	85 37		sta $37				sta 	zTemp0+1
.8f9a	c8		iny				iny
.8f9b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f9d	85 36		sta $36				sta 	zTemp0
.8f9f	c8		iny				iny
.8fa0	18		clc				clc									; copy variable address+3 to mantissa
.8fa1	69 03		adc #$03			adc 	#3
.8fa3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fa6	a5 37		lda $37				lda 	zTemp0+1
.8fa8	69 00		adc #$00			adc 	#0
.8faa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fad	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8fb0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8fb3	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8fb6	5a		phy				phy
.8fb7	a0 02		ldy #$02			ldy 	#2 							; read type
.8fb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fbb	7a		ply				ply
.8fbc	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8fbe	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8fc0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fc3	29 04		and #$04			and 	#NSBIsArray
.8fc5	d0 01		bne $8fc8			bne 	_VHArray
.8fc7	60		rts				rts
.8fc8					_VHArray:
.8fc8	e8		inx				inx
.8fc9	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger 		; get the 1st index.
.8fcc	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.8fce	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8fd1	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8fd5	d0 06		bne $8fdd			bne 	_VHNoSecondIndex
.8fd7	c8		iny				iny 								; skip the comma
.8fd8	e8		inx				inx
.8fd9	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.8fdc	ca		dex				dex
.8fdd					_VHNoSecondIndex:
.8fdd	ca		dex				dex 								; set X back.
.8fde	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; and check the right bracket.
.8fe1	5a		phy				phy 								; save position
.8fe2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.8fe5	85 3e		sta $3e				sta 	zaTemp
.8fe7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fea	85 3f		sta $3f				sta 	zaTemp+1
.8fec	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.8fee	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ff0	f0 02		beq $8ff4			beq 	_VHHas2Mask
.8ff2	a9 ff		lda #$ff			lda 	#$FF
.8ff4					_VHHas2Mask:
.8ff4	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.8ff7	f0 54		beq $904d			beq 	_VHBadIndex
.8ff9	0a		asl a				asl 	a 							; carry will be set if a second index
.8ffa	90 09		bcc $9005			bcc 	_VHCheckFirstIndex
.8ffc	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.8ffe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9000	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9003	90 48		bcc $904d			bcc 	_VHBadIndex
.9005					_VHCheckFirstIndex:
.9005	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9007	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9009	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.900c	90 3f		bcc $904d			bcc 	_VHBadIndex
.900e	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9010	64 37		stz $37				stz 	zTemp0+1
.9012	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9015	30 0f		bmi $9026			bmi 	_VHNoMultiply
.9017	da		phx				phx
.9018	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.901b	48		pha				pha
.901c	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.901e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9020	1a		inc a				inc 	a 							; add 1 for zero base
.9021	fa		plx				plx
.9022	20 63 9d	jsr $9d63			jsr 	Multiply8x8 				; calculate -> Z0
.9025	fa		plx				plx
.9026					_VHNoMultiply:
.9026	18		clc				clc
.9027	a5 36		lda $36				lda 	zTemp0
.9029	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.902c	85 36		sta $36				sta 	zTemp0
.902e	a5 37		lda $37				lda 	zTemp0+1
.9030	69 00		adc #$00			adc 	#0
.9032	85 37		sta $37				sta 	zTemp0+1
.9034	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9037	20 1b 82	jsr $821b			jsr 	ScaleByBaseType
.903a	18		clc				clc
.903b	b2 3e		lda ($3e)			lda 	(zaTemp)
.903d	65 36		adc $36				adc 	zTemp0
.903f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9042	a0 01		ldy #$01			ldy 	#1
.9044	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9046	65 37		adc $37				adc 	zTemp0+1
.9048	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.904b	7a		ply				ply 								; restore position
.904c	60		rts				rts
.904d					_VHBadIndex:
.904d	a9 17		lda #$17		lda	#23
.904f	4c e8 87	jmp $87e8		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9c99					AbsUnary:
.9c99	fa		plx				plx 								; restore stack pos
.9c9a	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; get a float or int
.9c9d	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9ca0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9ca3	29 7f		and #$7f			and 	#$7F
.9ca5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9ca8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9052					AllocUnary:
.9052	fa		plx				plx 								; restore stack pos
.9053	20 c7 92	jsr $92c7			jsr 	Evaluate16BitInteger		; get bytes required.
.9056	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9059	da		phx				phx 								; save X/Y
.905a	5a		phy				phy
.905b	8a		txa				txa 								; copy X into Y
.905c	a8		tay				tay
.905d	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9060	aa		tax				tax
.9061	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.9064	20 71 90	jsr $9071			jsr 	AllocateXABytes 			; allocate memory
.9067	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.906a	8a		txa				txa
.906b	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.906e	7a		ply				ply
.906f	fa		plx				plx
.9070	60		rts				rts
.9071					AllocateXABytes:
.9071	5a		phy				phy
.9072	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9075	84 36		sty $36				sty 	zTemp0
.9077	5a		phy				phy
.9078	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.907b	84 37		sty $37				sty 	zTemp0+1
.907d	5a		phy				phy
.907e	18		clc				clc 								; add to low memory pointer
.907f	6d 0c 07	adc $070c			adc 	lowMemPtr
.9082	8d 0c 07	sta $070c			sta 	lowMemPtr
.9085	8a		txa				txa
.9086	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9089	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.908c					_ClearMemory:
.908c	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.908f	c5 36		cmp $36				cmp 	zTemp0
.9091	d0 07		bne $909a			bne 	_CMClearNext
.9093	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9096	c5 37		cmp $37				cmp 	zTemp0+1
.9098	f0 0c		beq $90a6			beq 	_CMExit
.909a					_CMClearNext:
.909a	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.909c	92 36		sta ($36)			sta 	(zTemp0)
.909e	e6 36		inc $36				inc 	zTemp0
.90a0	d0 ea		bne $908c			bne 	_ClearMemory
.90a2	e6 37		inc $37				inc		zTemp0+1
.90a4	80 e6		bra $908c			bra 	_ClearMemory
.90a6					_CMExit:
.90a6	fa		plx				plx
.90a7	68		pla				pla
.90a8	7a		ply				ply
.90a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ca9					AscUnary:
.9ca9	fa		plx				plx 								; restore stack pos
.9caa	20 9a 92	jsr $929a			jsr 	EvaluateString 				; get a string
.9cad	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9caf	20 3d 93	jsr $933d			jsr 	NSMSetByte
.9cb2	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9cb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9cb6					FracUnary:
.9cb6	fa		plx				plx 								; restore stack pos
.9cb7	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; get a float or int
.9cba	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9cbd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9cc0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9cc2	f0 04		beq $9cc8			beq 	_IUZero
.9cc4	20 86 9b	jsr $9b86			jsr 	FloatFractionalPart
.9cc7	60		rts				rts
.9cc8					_IUZero:
.9cc8	20 3b 93	jsr $933b			jsr 	NSMSetZero
.9ccb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ccc					IntUnary:
.9ccc	fa		plx				plx 								; restore stack pos
.9ccd	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; get a float or int
.9cd0	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9cd3	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9cd6	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9cd8	f0 03		beq $9cdd			beq 	_IUExit
.9cda	20 e9 9b	jsr $9be9			jsr 	FloatIntegerPart
.9cdd					_IUExit:
.9cdd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9cde					LenUnary:
.9cde	fa		plx				plx 								; restore stack pos
.9cdf	20 9a 92	jsr $929a			jsr 	EvaluateString 				; get a string
.9ce2	5a		phy				phy
.9ce3	a0 00		ldy #$00			ldy 	#0 							; find length
.9ce5					_LenFind:
.9ce5	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ce7	f0 06		beq $9cef			beq 	_LenExit
.9ce9	c8		iny				iny
.9cea	d0 f9		bne $9ce5			bne 	_LenFind
.9cec	4c b6 9d	jmp $9db6			jmp 	RangeError 					; string > 255
.9cef					_LenExit:
.9cef	98		tya				tya
.9cf0	20 3d 93	jsr $933d			jsr 	NSMSetByte
.9cf3	7a		ply				ply
.9cf4	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9cf7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.90aa					Unary_Not:
.90aa	fa		plx				plx
.90ab	20 b2 92	jsr $92b2			jsr 	EvaluateInteger 			; get integer
.90ae	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.90b1	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; zero mantissa ?
.90b4	f0 04		beq $90ba			beq 	_NotZero
.90b6	20 3b 93	jsr $933b			jsr 	NSMSetZero
.90b9	60		rts				rts
.90ba					_NotZero:
.90ba	4c 55 88	jmp $8855			jmp 	ReturnTrue
.90bd					_UNBad:
.90bd	4c c0 9d	jmp $9dc0			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.90c0					Unary_Rnd:
.90c0	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; number to use.
.90c3	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; closing bracket
.90c6	20 ef 90	jsr $90ef			jsr 	Random32Bit 				; generate a number.
.90c9	ad 08 07	lda $0708			lda 	RandomSeed+0
.90cc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90cf	ad 09 07	lda $0709			lda 	RandomSeed+1
.90d2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90d5	ad 0a 07	lda $070a			lda 	RandomSeed+2
.90d8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90db	ad 0b 07	lda $070b			lda 	RandomSeed+3
.90de	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.90e0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90e3	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.90e5	8d 28 06	sta $0628			sta 	NSExponent
.90e8	a9 08		lda #$08			lda 	#NSTFloat
.90ea	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>90ed	db						.byte 	$DB 						; causes a break in the emulator
.90ee	60		rts				rts
.90ef					Random32Bit:
.90ef	5a		phy				phy
.90f0	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.90f2	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.90f5	d0 03		bne $90fa			bne 	_Random1
.90f7	a8		tay				tay 								; if so do it 256 times
.90f8	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.90fa					_Random1:
.90fa	0a		asl a				asl 	a 							; LSFR RNG
.90fb	2e 09 07	rol $0709			rol 	RandomSeed+1
.90fe	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9101	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9104	90 02		bcc $9108			bcc 	_Random2
.9106	49 c5		eor #$c5			eor 	#$C5
.9108					_Random2:
.9108	88		dey				dey
.9109	d0 ef		bne $90fa			bne 	_Random1
.910b	7a		ply				ply
.910c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9cf8					SgnUnary:
.9cf8	fa		plx				plx 								; restore stack pos
.9cf9	20 8f 92	jsr $928f			jsr 	EvaluateNumber 				; get a float or int
.9cfc	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9cff	20 6b 93	jsr $936b			jsr 	NSMIsZero 					; if zero
.9d02	f0 10		beq $9d14			beq 	_SGZero  					; return Int Zero
.9d04	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9d07	48		pha				pha
.9d08	a9 01		lda #$01			lda 	#1 							; set to 1
.9d0a	20 3d 93	jsr $933d			jsr 	NSMSetByte
.9d0d	68		pla				pla
.9d0e	29 80		and #$80			and		#$80 						; copy the sign byte out
.9d10	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d13	60		rts				rts
.9d14	20 3b 93	jsr $933b	_SGZero:jsr 	NSMSetZero
.9d17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9d18					ValUnary:
.9d18	fa		plx				plx 								; restore stack pos
.9d19	20 2e 9d	jsr $9d2e			jsr 	ValMainCode 				; do the main val() code
.9d1c	b0 01		bcs $9d1f			bcs 	_VUError 					; couldn't convert
.9d1e	60		rts				rts
.9d1f					_VUError:
.9d1f	4c bb 9d	jmp $9dbb			jmp 	TypeError
.9d22					IsValUnary:
.9d22	fa		plx				plx 								; restore stack pos
.9d23	20 2e 9d	jsr $9d2e			jsr 	ValMainCode 				; do the main val() code
.9d26	b0 03		bcs $9d2b			bcs 	_VUBad
.9d28	4c 55 88	jmp $8855			jmp 	ReturnTrue
.9d2b					_VUBad:
.9d2b	4c 61 88	jmp $8861			jmp 	ReturnFalse
.9d2e					ValMainCode:
.9d2e	20 9a 92	jsr $929a			jsr 	EvaluateString 				; get a string
.9d31	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; check right bracket present
.9d34	5a		phy				phy
.9d35	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9d37	f0 17		beq $9d50			beq 	_VMCFail2
.9d39	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9d3b	48		pha				pha 								; save first character
.9d3c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9d3e	d0 01		bne $9d41			bne 	_VMCStart
.9d40	c8		iny				iny 								; skip over -
.9d41					_VMCStart:
.9d41	38		sec				sec 								; initialise first time round.
.9d42					_VMCNext:
.9d42	c8		iny				iny 								; pre-increment
.9d43	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9d45	f0 0c		beq $9d53			beq 	_VMCSuccess 				; successful.
.9d47	20 a4 8d	jsr $8da4			jsr 	EncodeNumber 				; send it to the number-builder
.9d4a	90 03		bcc $9d4f			bcc 	_VMCFail 					; if failed, give up.
.9d4c	18		clc				clc 								; next time round, countinue
.9d4d	80 f3		bra $9d42			bra 	_VMCNext
.9d4f					_VMCFail:
.9d4f	68		pla				pla
.9d50					_VMCFail2:
.9d50	7a		ply				ply
.9d51	38		sec				sec
.9d52	60		rts				rts
.9d53					_VMCSuccess:
.9d53	a9 00		lda #$00			lda 	#0 							; construct final
.9d55	20 a4 8d	jsr $8da4			jsr 	EncodeNumber
.9d58	68		pla				pla
.9d59	c9 2d		cmp #$2d			cmp 	#"-"
.9d5b	d0 03		bne $9d60			bne 	_VMCNotNegative
.9d5d	20 e7 92	jsr $92e7			jsr		NSMNegate
.9d60					_VMCNotNegative:
.9d60	7a		ply				ply
.9d61	18		clc				clc
.9d62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.910d					ChrUnary:
.910d	fa		plx				plx 								; restore stack pos
.910e	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger			; get value
.9111	48		pha				pha
.9112	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9115	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9117	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate
.911a	68		pla				pla 								; write number to it
.911b	20 e9 9f	jsr $9fe9			jsr 	StringTempWrite
.911e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.911f					SpcUnary:
.911f	fa		plx				plx 								; restore stack pos
.9120	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger			; get value
.9123	5a		phy				phy
.9124	48		pha				pha 								; save count
.9125	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate
.9128	7a		ply				ply 								; to do count in Y
.9129					_SpcLoop:
.9129	c0 00		cpy #$00			cpy 	#0
.912b	f0 08		beq $9135			beq 	_SpcExit
.912d	a9 20		lda #$20			lda 	#32
.912f	20 e9 9f	jsr $9fe9			jsr 	StringTempWrite
.9132	88		dey				dey
.9133	80 f4		bra $9129			bra 	_SPCLoop
.9135					_SpcExit:
.9135	7a		ply				ply
.9136	20 e1 98	jsr $98e1			jsr 	CheckRightBracket
.9139	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.913a					Unary_Str:
.913a	fa		plx				plx
.913b	20 8f 92	jsr $928f			jsr 	EvaluateNumber  			; get number
.913e	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; closing bracket
.9141	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9143	20 5c 91	jsr $915c			jsr 	ConvertNumberToString 		; do the conversion.
.9146	a9 21		lda #$21			lda		#33 						; create buffer
.9148	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate 			; allocate memory
.914b	da		phx				phx
.914c	a2 00		ldx #$00			ldx 	#0
.914e					_USCopy:
.914e	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.9151	20 e9 9f	jsr $9fe9			jsr 	StringTempWrite
.9154	e8		inx				inx
.9155	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.9158	d0 f4		bne $914e			bne 	_USCopy
.915a	fa		plx				plx
.915b	60		rts				rts
.915c					ConvertNumberToString:
.915c	5a		phy				phy 								; save code position
.915d	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.9160	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.9163	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9166	10 0a		bpl $9172			bpl 	_CNTSNotNegative
.9168	29 7f		and #$7f			and 	#$7F 						; make +ve
.916a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.916d	a9 2d		lda #$2d			lda 	#"-"
.916f	20 d8 91	jsr $91d8			jsr 	WriteDecimalBuffer
.9172					_CNTSNotNegative:
.9172	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9175	f0 15		beq $918c			beq 	_CNTSNotFloat
.9177	e8		inx				inx 								; round up
.9178	a9 01		lda #$01			lda 	#1
.917a	20 3d 93	jsr $933d			jsr 	NSMSetByte
.917d	ca		dex				dex
.917e	bd 28 06	lda $0628,x			lda		NSExponent,x
.9181	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9184	a9 08		lda #$08			lda 	#NSTFloat
.9186	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9189	20 a8 9a	jsr $9aa8			jsr 	FloatAdd
.918c					_CNTSNotFloat:
.918c	20 ba 91	jsr $91ba			jsr 	MakePlusTwoString
.918f	20 86 9b	jsr $9b86			jsr 	FloatFractionalPart 		; get the fractional part
.9192	20 4a 9c	jsr $9c4a			jsr 	NSNormalise					; normalise , exit if zero
.9195	f0 21		beq $91b8			beq 	_CNTSExit
.9197	a9 2e		lda #$2e			lda 	#"."
.9199	20 d8 91	jsr $91d8			jsr 	WriteDecimalBuffer 			; write decimal place
.919c					_CNTSDecimal:
.919c	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.919f	30 17		bmi $91b8			bmi 	_CNTSExit
.91a1	e8		inx				inx 								; x 10.0
.91a2	a9 0a		lda #$0a			lda 	#10
.91a4	20 3d 93	jsr $933d			jsr 	NSMSetByte
.91a7	a9 08		lda #$08			lda 	#NSTFloat
.91a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91ac	ca		dex				dex
.91ad	20 13 9c	jsr $9c13			jsr 	FloatMultiply
.91b0	20 ba 91	jsr $91ba			jsr 	MakePlusTwoString
.91b3	20 86 9b	jsr $9b86			jsr 	FloatFractionalPart 		; get the fractional part
.91b6	80 e4		bra $919c			bra 	_CNTSDecimal 				; keep going.
.91b8					_CNTSExit:
.91b8	7a		ply				ply
.91b9	60		rts				rts
.91ba					MakePlusTwoString:
.91ba	da		phx				phx
.91bb	20 12 93	jsr $9312			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.91be	e8		inx				inx 								; access it
.91bf	e8		inx				inx
.91c0	20 e9 9b	jsr $9be9			jsr 	FloatIntegerPart 			; make it an integer
.91c3	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.91c5	20 52 9a	jsr $9a52			jsr 	ConvertInt32
.91c8	a2 00		ldx #$00			ldx	 	#0
.91ca					_MPTSCopy:
.91ca	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.91cd	20 d8 91	jsr $91d8			jsr 	WriteDecimalBuffer
.91d0	e8		inx				inx
.91d1	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.91d4	d0 f4		bne $91ca			bne 	_MPTSCopy
.91d6	fa		plx				plx
.91d7	60		rts				rts
.91d8					WriteDecimalBuffer:
.91d8	da		phx				phx
.91d9	ae 14 07	ldx $0714			ldx 	dbOffset
.91dc	9d 8f 08	sta $088f,x			sta 	DecimalBuffer,x
.91df	9e 90 08	stz $0890,x			stz 	DecimalBuffer+1,x
.91e2	ee 14 07	inc $0714			inc 	dbOffset
.91e5	fa		plx				plx
.91e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.91e7					Unary_Left:
.91e7	fa		plx				plx
.91e8	18		clc				clc 								; only one parameter
.91e9	20 5e 92	jsr $925e			jsr 	SubstringInitial 			; set up.
.91ec	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.91ef	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.91f2	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.91f5	80 2c		bra $9223			bra 	SubstringMain
.91f7					Unary_Right:
.91f7	fa		plx				plx
.91f8	18		clc				clc 								; only one parameter
.91f9	20 5e 92	jsr $925e			jsr 	SubstringInitial 			; set up.
.91fc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.91ff	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9202	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9205	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9208	b0 02		bcs $920c			bcs 	_URNotUnderflow
.920a	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.920c					_URNotUnderFlow:
.920c	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.920f	80 12		bra $9223			bra 	SubStringMain
.9211					Unary_Mid:
.9211	fa		plx				plx
.9212	38		sec				sec 								; two parameters
.9213	20 5e 92	jsr $925e			jsr 	SubstringInitial 			; set up.
.9216	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9219	f0 05		beq $9220			beq 	_UMError
.921b	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.921e	80 03		bra $9223			bra 	SubStringMain
.9220					_UMError:
.9220	4c c0 9d	jmp $9dc0			jmp 	ArgumentError
.9223					SubStringMain:
.9223	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9226	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9229	b0 2d		bcs $9258			bcs 	_SSMNull 					; if so, return an empty string.
.922b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.922e	f0 28		beq $9258			beq 	_SSMNull 					; return empty string.
.9230	18		clc				clc 								; add the offset +1 to the address and
.9231	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9234	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9237	85 36		sta $36				sta 	zTemp0
.9239	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.923c	69 00		adc #$00			adc 	#0
.923e	85 37		sta $37				sta 	zTemp0+1
.9240					_SSMNoCarry:
.9240	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9243	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate 			; allocate that many characters
.9246	5a		phy				phy 								; save Y
.9247	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9249					_SSMCopy:
.9249	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.924b	f0 09		beq $9256			beq 	_SSMEString 				; no more to copy
.924d	20 e9 9f	jsr $9fe9			jsr 	StringTempWrite 			; and write it out.
.9250	c8		iny				iny
.9251	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9254	d0 f3		bne $9249			bne 	_SSMCopy
.9256					_SSMEString:
.9256	7a		ply				ply
.9257					_SSMExit:
.9257	60		rts				rts
.9258					_SSMNull:
.9258	a9 00		lda #$00			lda 	#0
.925a	20 ab 9f	jsr $9fab			jsr 	StringTempAllocate
.925d	60		rts				rts
.925e					SubstringInitial:
.925e	da		phx				phx 								; save initial stack position
.925f	08		php				php 								; save carry on stack indicating 2 parameters
.9260	20 9a 92	jsr $929a			jsr 	EvaluateString 				; get a string
.9263	5a		phy				phy 								; calculate length to exponent.
.9264	a0 ff		ldy #$ff			ldy 	#$FF
.9266					_SIFindLength:
.9266	c8		iny				iny
.9267	b1 36		lda ($36),y			lda 	(zTemp0),y
.9269	d0 fb		bne $9266			bne 	_SIFindLength
.926b	98		tya				tya
.926c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.926f	7a		ply				ply
.9270	e8		inx				inx
.9271	20 e9 98	jsr $98e9			jsr 	CheckComma 					; comma next
.9274	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger 		; get next parameter
.9277	28		plp				plp 								; is it the last parameter ?
.9278	90 07		bcc $9281			bcc 	_SSIExit 					; if so, exit.
.927a	e8		inx				inx
.927b	20 e9 98	jsr $98e9			jsr 	CheckComma 					; comma next
.927e	20 d3 92	jsr $92d3			jsr 	Evaluate8BitInteger 		; get last parameter
.9281					_SSIExit:
.9281	fa		plx				plx
.9282	20 e1 98	jsr $98e1			jsr 	CheckRightBracket 			; check closing bracket
.9285	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9286					EvaluateValue:
.9286	48		pha				pha
.9287	20 f1 8b	jsr $8bf1			jsr		EvaluateExpression 			; expression
.928a	20 06 8d	jsr $8d06			jsr 	Dereference					; derefernce it
.928d	68		pla				pla
.928e	60		rts				rts
.928f					EvaluateNumber:
.928f	20 86 92	jsr $9286			jsr 	EvaluateValue 				; get a value
.9292	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9295	29 10		and #$10			and 	#NSBIsString
.9297	d0 16		bne $92af			bne 	HelperTypeError
.9299	60		rts				rts
.929a					EvaluateString:
.929a	20 86 92	jsr $9286			jsr 	EvaluateValue 				; get a value
.929d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.92a0	29 10		and #$10			and 	#NSBIsString
.92a2	f0 0b		beq $92af			beq 	HelperTypeError
.92a4					CopyAddressToTemp0:
.92a4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.92a7	85 36		sta $36				sta 	zTemp0
.92a9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92ac	85 37		sta $37				sta 	zTemp0+1
.92ae	60		rts				rts
.92af					HelperTypeError:
.92af	4c bb 9d	jmp $9dbb			jmp 	TypeError
.92b2					EvaluateInteger:
.92b2	20 8f 92	jsr $928f			jsr 	EvaluateNumber
.92b5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.92b8	d0 0a		bne $92c4			bne 	HelperValueError 			; if not, it's a float.
.92ba	60		rts				rts
.92bb					EvaluateUnsignedInteger:
.92bb	20 b2 92	jsr $92b2			jsr 	EvaluateInteger 			; check integer is +ve
.92be	bd 00 06	lda $0600,x			lda 	NSStatus,x
.92c1	30 01		bmi $92c4			bmi 	HelperValueError
.92c3	60		rts				rts
.92c4					HelperValueError:
.92c4	4c c0 9d	jmp $9dc0			jmp 	ArgumentError
.92c7					Evaluate16BitInteger:
.92c7	20 bb 92	jsr $92bb			jsr	 	EvaluateUnsignedInteger		; get integer
.92ca	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.92cd	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.92d0	d0 f2		bne $92c4			bne 	HelperValueError
.92d2	60		rts				rts
.92d3					Evaluate8BitInteger:
.92d3	20 bb 92	jsr $92bb			jsr	 	EvaluateUnsignedInteger 	; get an integer
.92d6	d0 ec		bne $92c4			bne 	HelperValueError
.92d8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.92db	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.92de	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.92e1	d0 e1		bne $92c4			bne 	HelperValueError
.92e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.92e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d63					Multiply8x8:
.9d63	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d64	85 36		sta $36			  	sta 	zTemp0
.9d66	86 37		stx $37				stx 	zTemp0+1
.9d68	a9 00		lda #$00			lda 	#0
.9d6a	a2 08		ldx #$08			ldx 	#8
.9d6c					_M88Loop:
.9d6c	90 03		bcc $9d71			bcc 	_M88NoAdd
.9d6e	18		clc				clc
.9d6f	65 37		adc $37				adc 	zTemp0+1
.9d71					_M88NoAdd:
.9d71	6a		ror a				ror 	a
.9d72	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9d74	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9d75	d0 f5		bne $9d6c			bne 	_M88Loop
.9d77	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9d79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.92e7					NSMNegate:
.92e7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.92ea	49 80		eor #$80			eor 	#NSBIsNegative
.92ec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92ef	60		rts				rts
.92f0					NSMNegateMantissa:
.92f0	38		sec				sec
.92f1	a9 00		lda #$00			lda 	#0
.92f3	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.92f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92f9	a9 00		lda #$00			lda 	#0
.92fb	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.92fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9301	a9 00		lda #$00			lda 	#0
.9303	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9306	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9309	a9 00		lda #$00			lda 	#0
.930b	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.930e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9311	60		rts				rts
.9312					NSMShiftUpTwo:
.9312	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9315	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9318	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.931b	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.931e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9321	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9324	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9327	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.932a	bd 28 06	lda $0628,x			lda 	NSExponent,x
.932d	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9330	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9333	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9336	60		rts				rts
.9337					NSMSetZeroMantissaOnly:
.9337	a9 00		lda #$00			lda 	#0
.9339	80 08		bra $9343			bra 	NSMSetMantissa
.933b					NSMSetZero:
.933b	a9 00		lda #$00			lda 	#0
.933d					NSMSetByte:
.933d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9340	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9343					NSMSetMantissa:
.9343	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9346	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9349	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.934c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.934f	60		rts				rts
.9350					NSMShiftLeft:
.9350	18		clc				clc
.9351					NSMRotateLeft:
.9351	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9354	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9357	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.935a	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.935d	60		rts				rts
.935e					NSMShiftRight:
.935e	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9361	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9364	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9367	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.936a	60		rts				rts
.936b					NSMIsZero:
.936b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.936e	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9371	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9374	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9377	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9d7a					DecimalScalarTable:
>9d7a	66 66 66 66				.dword $66666666 ; 0.1
>9d7e	de					.byte $de
>9d7f	1f 85 eb 51				.dword $51eb851f ; 0.01
>9d83	db					.byte $db
>9d84	4c 37 89 41				.dword $4189374c ; 0.001
>9d88	d8					.byte $d8
>9d89	ac 8b db 68				.dword $68db8bac ; 0.0001
>9d8d	d4					.byte $d4
>9d8e	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9d92	d1					.byte $d1
>9d93	83 de 1b 43				.dword $431bde83 ; 1e-06
>9d97	ce					.byte $ce
>9d98	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9d9c	ca					.byte $ca
>9d9d	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9da1	c7					.byte $c7
>9da2	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9da6	c4					.byte $c4
>9da7	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9dab	c0					.byte $c0
>9dac	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9db0	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9db1					SyntaxError:
.9db1	a9 02		lda #$02		lda	#2
.9db3	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9db6					RangeError:
.9db6	a9 04		lda #$04		lda	#4
.9db8	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9dbb					TypeError:
.9dbb	a9 05		lda #$05		lda	#5
.9dbd	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9dc0					ArgumentError:
.9dc0	a9 07		lda #$07		lda	#7
.9dc2	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9dc5					NotDoneError:
.9dc5	a9 0c		lda #$0c		lda	#12
.9dc7	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9dca					ErrorText:
>9dca	42 72 65 61 6b 00			.text	"Break",0
>9dd0	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9dd8	72 72 6f 72 00
>9ddd	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9de5	20 62 79 20 7a 65 72 6f 00
>9dee	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9df6	61 6e 67 65 00
>9dfb	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9e03	6d 61 74 63 68 00
>9e09	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9e11	65 6d 6f 72 79 00
>9e17	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9e1f	61 72 67 75 6d 65 6e 74 00
>9e28	53 74 6f 70 00				.text	"Stop",0
>9e2d	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9e35	6f 6f 20 6c 6f 6e 67 00
>9e3d	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9e45	6e 20 66 61 69 6c 65 64 00
>9e4e	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9e56	61 74 61 00
>9e5a	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9e62	65 6e 74 65 64 00
>9e68	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9e70	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9e7c	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9e84	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9e91	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9e99	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9ea6	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9eae	68 6f 75 74 20 57 68 69 6c 65 00
>9eb9	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9ec1	68 6f 75 74 20 46 6f 72 00
>9eca	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9ed2	61 63 6b 20 66 75 6c 6c 00
>9edb	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9ee3	75 63 74 75 72 65 00
>9eea	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9ef2	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9eff	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9f07	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9f15	41 72 72 61 79 20 73 69			.text	"Array size",0
>9f1d	7a 65 00
>9f20	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>9f28	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9378					StackOpen:
.9378	48		pha				pha 								; save frame byte
.9379	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.937b	0a		asl a				asl 	a 							; claim twice this for storage
.937c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.937e	38		sec				sec 								; so basically subtracting from
.937f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9381	85 34		sta $34				sta 	basicStack
.9383	b0 08		bcs $938d			bcs 	_SONoBorrow
.9385	c6 35		dec $35				dec 	basicStack+1
.9387	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9389	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.938b	90 04		bcc $9391			bcc 	_SOMemory
.938d					_SONoBorrow:
.938d	68		pla				pla 								; get marker back and write at TOS
.938e	92 34		sta ($34)			sta 	(basicStack)
.9390	60		rts				rts
.9391					_SOMemory:
.9391							ERR_STACK
.9391					StackClose:
.9391	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9393	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9395	0a		asl a				asl 	a 							; claim twice this.
.9396	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9398	85 34		sta $34				sta 	basicStack
.939a	90 02		bcc $939e			bcc 	_SCExit
.939c	e6 35		inc $35				inc 	basicStack+1
.939e					_SCExit:
.939e	60		rts				rts
.939f					StackCheckFrame:
.939f	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.93a1	29 f0		and #$f0			and 	#$F0 						; check type bits
.93a3	d0 01		bne $93a6			bne 	_SCFError 					; different, we have structures mixed up
.93a5	60		rts				rts
.93a6					_SCFError:
.93a6	8a		txa				txa 								; report error X
.93a7	4c e8 87	jmp $87e8			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.93aa					STKSaveCodePosition:
.93aa	5a		phy				phy
.93ab	98		tya				tya 								; save Y
.93ac	a0 05		ldy #$05			ldy 	#5
.93ae	91 34		sta ($34),y			sta 	(basicStack),y
.93b0	88		dey				dey 								; save Code Pointer
.93b1					_STKSaveLoop:
.93b1	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.93b4	91 34		sta ($34),y			sta 	(basicStack),y
.93b6	88		dey				dey
.93b7	d0 f8		bne $93b1			bne 	_STKSaveLoop
.93b9	7a		ply				ply
.93ba	60		rts				rts
.93bb					STKLoadCodePosition:
.93bb	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.93bd					_STKLoadLoop:
.93bd	b1 34		lda ($34),y			lda 	(basicStack),y
.93bf	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.93c2	c8		iny				iny
.93c3	c0 05		cpy #$05			cpy 	#5
.93c5	d0 f6		bne $93bd			bne 	_STKLoadLoop
.93c7	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.93c9	a8		tay				tay
.93ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.93cb					StackReset:
.93cb	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.93cd	85 34		sta $34				sta 	0+basicStack
.93cf	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.93d1	85 35		sta $35				sta 	1+basicStack
.93d3	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.93d5	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.93d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9f30					StringConcrete:
.9f30	5a		phy				phy 								; save position on stack
.9f31	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9f34	85 38		sta $38				sta 	zTemp1
.9f36	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9f39	85 39		sta $39				sta 	zTemp1+1
.9f3b	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9f3d					_SALength:
.9f3d	c8		iny				iny
.9f3e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f40	d0 fb		bne $9f3d			bne 	_SALength
.9f42	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9f44	b0 3f		bcs $9f85			bcs 	_SALengthError
.9f46	98		tya				tya 				 				; length of the new string
.9f47	18		clc				clc
.9f48	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9f4a	90 02		bcc $9f4e			bcc 	_SAHaveLength
.9f4c	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9f4e					_SAHaveLength:
.9f4e	48		pha				pha 								; save length.
.9f4f	38		sec				sec
.9f50	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9f52	6d 0e 07	adc $070e			adc 	StringMemory
.9f55	8d 0e 07	sta $070e			sta 	StringMemory
.9f58	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9f5a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9f5d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9f5f	6d 0f 07	adc $070f			adc 	StringMemory+1
.9f62	8d 0f 07	sta $070f			sta 	StringMemory+1
.9f65	85 3b		sta $3b				sta 	zTemp2+1
.9f67	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f6a	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9f6b	38		sec				sec
.9f6c	e9 03		sbc #$03			sbc 	#3
.9f6e	92 3a		sta ($3a)			sta 	(zTemp2)
.9f70	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9f72	a0 01		ldy #$01			ldy 	#1
.9f74	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9f76					_SACopyNewString:
.9f76	a0 00		ldy #$00			ldy 	#0
.9f78					_SACopyNSLoop:
.9f78	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9f7a	c8		iny				iny 								; write two on in string storage
.9f7b	c8		iny				iny
.9f7c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9f7e	88		dey				dey 								; this makes it one one.
.9f7f	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9f81	d0 f5		bne $9f78			bne 	_SACopyNSLoop
.9f83	7a		ply				ply
.9f84	60		rts				rts
.9f85					_SALengthError:
.9f85	a9 09		lda #$09		lda	#9
.9f87	4c e8 87	jmp $87e8		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9f8a					StringSystemInitialise:
.9f8a	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9f8c	8d 0e 07	sta $070e			sta 	0+StringMemory
.9f8f	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9f91	8d 0f 07	sta $070f			sta 	1+StringMemory
.9f94	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9f97	60		rts				rts
.9f98					StringSpaceInitialise:
.9f98	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9f9a	8d 10 07	sta $0710			sta 	StringInitialised
.9f9d	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9fa0	8d 11 07	sta $0711			sta 	StringTempPointer
.9fa3	ad 0f 07	lda $070f			lda 	StringMemory+1
.9fa6	3a		dec a				dec 	a
.9fa7	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9faa	60		rts				rts
.9fab					StringTempAllocate:
.9fab	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9fad	b0 35		bcs $9fe4			bcs 	_STALength
.9faf	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9fb2	30 05		bmi $9fb9			bmi 	_STAAllocate
.9fb4	48		pha				pha 								; save value to subtract.
.9fb5	20 98 9f	jsr $9f98			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9fb8	68		pla				pla 								; restore it
.9fb9					_STAAllocate:
.9fb9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9fbb	18		clc				clc  								; deliberate allows one more
.9fbc	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9fbf	8d 11 07	sta $0711			sta 	StringTempPointer
.9fc2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9fc5	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9fc7	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9fca	69 ff		adc #$ff			adc 	#$FF
.9fcc	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9fcf	85 3d		sta $3d				sta 	zsTemp+1
.9fd1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fd4	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9fd7	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9fda	a9 10		lda #$10			lda 	#NSTString
.9fdc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9fdf	a9 00		lda #$00			lda 	#0 							; clear the target string
.9fe1	92 3c		sta ($3c)			sta 	(zsTemp)
.9fe3	60		rts				rts
.9fe4					_STALength:
.9fe4	a9 09		lda #$09		lda	#9
.9fe6	4c e8 87	jmp $87e8		jmp	ErrorHandler
.9fe9					StringTempWrite:
.9fe9	48		pha				pha
.9fea	92 3c		sta ($3c)			sta 	(zsTemp)
.9fec	e6 3c		inc $3c				inc 	zsTemp
.9fee	d0 02		bne $9ff2			bne 	_STWNoCarry
.9ff0	e6 3d		inc $3d				inc 	zsTemp+1
.9ff2					_STWNoCarry:
.9ff2	a9 00		lda #$00			lda 	#0
.9ff4	92 3c		sta ($3c)			sta 	(zsTemp)
.9ff6	68		pla				pla
.9ff7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.93d8					BackloadProgram:
.93d8	a2 ff		ldx #$ff			ldx 	#$FF
.93da	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.93dd	20 07 94	jsr $9407			jsr 	BLReadByte
.93e0	30 1e		bmi $9400			bmi 	_BPExit
.93e2					_BPCopy:
.93e2	e8		inx				inx  								; copy byte in
.93e3	9d 1c 08	sta $081c,x			sta 	lineBuffer,x
.93e6	9e 1d 08	stz $081d,x			stz 	lineBuffer+1,x
.93e9	20 07 94	jsr $9407			jsr 	BLReadByte 					; read next byte
.93ec	30 0a		bmi $93f8			bmi 	_BPEndLine 					; -ve = EOL
.93ee	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.93f0	d0 02		bne $93f4			bne 	_BPNotTab
.93f2	a9 20		lda #$20			lda 	#' '
.93f4					_BPNotTab:
.93f4	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.93f6	b0 ea		bcs $93e2			bcs 	_BPCopy
.93f8					_BPEndLine:
.93f8	20 d1 95	jsr $95d1			jsr 	TokeniseLine 				; tokenise the line.
.93fb	20 5d 98	jsr $985d			jsr 	MemoryAppend 				; append to current program
.93fe	80 d8		bra $93d8			bra 	BackloadProgram
.9400					_BPExit:
.9400	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9403	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.9406	60		rts				rts
.9407					BLReadByte:
.9407					_BLLoad:
.9407	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.940a	ee 08 94	inc $9408			inc 	_BLLoad+1
.940d	d0 03		bne $9412			bne 	_BLNoCarry
.940f	ee 09 94	inc $9409			inc 	_BLLoad+2
.9412					_BLNoCarry:
.9412	c9 00		cmp #$00			cmp 	#0
.9414	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9415					TokeniseSearchTable:
.9415	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9417	85 36		sta $36				sta 	zTemp0
.9419	a0 00		ldy #$00			ldy 	#0
.941b	a9 80		lda #$80			lda 	#$80 						; token #
.941d	85 38		sta $38				sta 	zTemp1
.941f					_TSTLoop:
.941f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9421	30 49		bmi $946c			bmi 	_TSTFail 					; -ve = end of table
.9423	f0 2e		beq $9453			beq 	_TSTNext 					; zero, check next it's a dummy
.9425	c8		iny				iny 								; get the hash
.9426	b1 36		lda ($36),y			lda 	(zTemp0),y
.9428	88		dey				dey
.9429	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.942c	d0 25		bne $9453			bne 	_TSTNext
.942e	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9431	38		sec				sec
.9432	ed 00 07	sbc $0700			sbc 	identStart
.9435	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9437	d0 1a		bne $9453			bne 	_TSTNext
.9439	5a		phy				phy 								; save Y , we might fail
.943a	c8		iny				iny 								; point to text
.943b	c8		iny				iny
.943c	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.943f					_TSTCompareName:
.943f	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; compare text.
.9442	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9444	d0 0c		bne $9452			bne 	_TSTNextPullY 				; fail, pullY and do next
.9446	e8		inx				inx
.9447	c8		iny				iny
.9448	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.944b	d0 f2		bne $943f			bne 	_TSTCompareName
.944d	7a		ply				ply 								; throw Y
.944e	a5 38		lda $38				lda 	zTemp1 						; get token #
.9450	38		sec				sec 								; return with CS = passed.
.9451	60		rts				rts
.9452					_TSTNextPullY:
.9452	7a		ply				ply 								; restore current, fall through.
.9453					_TSTNext:
.9453	e6 38		inc $38				inc 	zTemp1 						; token counter
.9455	98		tya				tya
.9456	18		clc				clc
.9457	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9459	1a		inc a				inc 	a 							; +1
.945a	1a		inc a				inc 	a 							; +2
.945b	a8		tay				tay
.945c	10 c1		bpl $941f			bpl 	_TSTLoop 					; if Y < $80 loop back
.945e	98		tya				tya 								; add Y to zTemp0 and reset Y
.945f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9461	18		clc				clc  								; but have tables > 255 bytes
.9462	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9464	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9466	90 b7		bcc $941f			bcc 	_TSTLoop
.9468	e6 37		inc $37				inc 	zTemp0+1
.946a	80 b3		bra $941f			bra 	_TSTLoop
.946c					_TSTFail:
.946c	18		clc				clc
.946d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.946e					KeywordSet0:
>946e	00 65					.text	0,$65,""               ; $80 !0:EOF
>9470	00 58					.text	0,$58,""               ; $81 !1:SH1
>9472	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9474	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>947a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9482	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9488	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>948f	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9496	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>949d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>94a3	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>94ab	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>94b3	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>94b9	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>94c0	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>94c6	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>94ce	28
>94cf	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>94d5	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>94db	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>94e1	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>94e8	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>94ee	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>94f4	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>94f9	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>94fd	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9503	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>950b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9512	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9519	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9521	43
>9522	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9528	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>952e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9535	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>953b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9541	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9546	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>954c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9551	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9559	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>955f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9566	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>956c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9571	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9578	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>957e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9583	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>958b	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>958f	ff					.text	$FF
.9590					KeywordSet1:
>9590	00 65					.text	0,$65,""               ; $80 !0:EOF
>9592	00 58					.text	0,$58,""               ; $81 !1:SH1
>9594	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9596	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>959e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>95a5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>95aa	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>95b0	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>95b5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>95bd	45
>95be	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>95c3	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>95c9	ff					.text	$FF
.95ca					KeywordSet2:
>95ca	00 65					.text	0,$65,""               ; $80 !0:EOF
>95cc	00 58					.text	0,$58,""               ; $81 !1:SH1
>95ce	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>95d0	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.95d1					TokeniseLine:
.95d1	20 59 97	jsr $9759			jsr 	FixLineBufferCase 			; fix line case
.95d4	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.95d6	8d 1c 07	sta $071c			sta 	tokenOffset
.95d9	9c 1d 07	stz $071d			stz 	tokenLineNumber
.95dc	9c 1e 07	stz $071e			stz 	tokenLineNumber+1
.95df	a2 ff		ldx #$ff			ldx 	#$FF
.95e1					_TKFindFirst:
.95e1	e8		inx				inx
.95e2	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.95e5	f0 79		beq $9660			beq 	_TKExit
.95e7	c9 20		cmp #$20			cmp 	#' '
.95e9	90 f6		bcc $95e1			bcc 	_TKFindFirst
.95eb	c9 30		cmp #$30			cmp 	#'0'
.95ed	90 07		bcc $95f6			bcc 	_TKNoLineNumber
.95ef	c9 3a		cmp #$3a			cmp 	#'9'+1
.95f1	b0 03		bcs $95f6			bcs 	_TKNoLineNumber
.95f3	20 83 97	jsr $9783			jsr 	TokeniseExtractLineNumber
.95f6					_TKNoLineNumber:
.95f6					_TKTokeniseLoop:
.95f6	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.95f9	f0 65		beq $9660			beq 	_TKExit
.95fb	e8		inx				inx
.95fc	c9 20		cmp #$20			cmp 	#' '
.95fe	f0 f6		beq $95f6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9600	ca		dex				dex 								; undo last get, A contains character, X is position.
.9601	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9603	f0 61		beq $9666			beq 	_TKTokeniseIdentifier
.9605	c9 41		cmp #$41			cmp 	#'A'
.9607	90 04		bcc $960d			bcc 	_TKTokenisePunctuation
.9609	c9 5b		cmp #$5b			cmp 	#'Z'+1
.960b	90 59		bcc $9666			bcc 	_TKTokeniseIdentifier
.960d					_TKTokenisePunctuation:
.960d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.960f	f0 27		beq $9638			beq 	_TKString
.9611	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9613	f0 28		beq $963d			beq 	_TKHexConstant
.9615	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9617	f0 29		beq $9642			beq 	_TKCheckDouble
.9619	c9 3e		cmp #$3e			cmp 	#'>'
.961b	f0 25		beq $9642			beq 	_TKCheckDouble
.961d					_TKStandardPunctuation:
.961d	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get it back.
.9620	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9622	90 0e		bcc $9632			bcc 	_TKNoShift
.9624	48		pha				pha 								; save
.9625	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9627	85 36		sta $36				sta 	zTemp0
.9629	68		pla				pla
.962a	29 20		and #$20			and 	#32 						; bit 5
.962c	4a		lsr a				lsr 	a 							; shift into bit 3
.962d	4a		lsr a				lsr 	a
.962e	05 36		ora $36				ora 	zTemp0
.9630	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9632					_TKNoShift:
.9632	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte 			; write the punctuation character
.9635	e8		inx				inx 								; consume the character
.9636	80 be		bra $95f6			bra 	_TKTokeniseLoop 			; and loop round again.
.9638					_TKString:
.9638	20 e8 96	jsr $96e8			jsr 	TokeniseString
.963b	80 b9		bra $95f6			bra 	_TKTokeniseLoop
.963d					_TKHexConstant:
.963d	20 23 97	jsr $9723			jsr 	TokeniseHexConstant
.9640	80 b4		bra $95f6			bra 	_TKTokeniseLoop
.9642					_TKCheckDouble:
.9642	bd 1d 08	lda $081d,x			lda 	lineBuffer+1,x 				; get next character
.9645	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9647	90 d4		bcc $961d			bcc 	_TKStandardPunctuation
.9649	c9 3f		cmp #$3f			cmp 	#'>'+1
.964b	b0 d0		bcs $961d			bcs 	_TKStandardPunctuation
.964d	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9650	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9652	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9653	7d 1d 08	adc $081d,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9656	38		sec				sec
.9657	e9 3c		sbc #$3c			sbc 	#'<'
.9659	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.965c	e8		inx				inx 								; consume both
.965d	e8		inx				inx
.965e	80 96		bra $95f6			bra 	_TKTokeniseLoop
.9660	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9662	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.9665	60		rts				rts
.9666					_TKTokeniseIdentifier:
.9666	8e 00 07	stx $0700			stx 	identStart 					; save start
.9669	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.966c					_TKCheckLoop:
.966c	e8		inx				inx 								; look at next, we know first is identifier.
.966d	bd 1c 08	lda $081c,x			lda  	lineBuffer,x
.9670	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9672	f0 f8		beq $966c			beq 	_TKCheckLoop
.9674	c9 30		cmp #$30			cmp	 	#"0"
.9676	90 0c		bcc $9684			bcc 	_TKEndIdentifier
.9678	c9 3a		cmp #$3a			cmp 	#"9"+1
.967a	90 f0		bcc $966c			bcc 	_TKCheckLoop
.967c	c9 41		cmp #$41			cmp	 	#"A"
.967e	90 04		bcc $9684			bcc 	_TKEndIdentifier
.9680	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9682	90 e8		bcc $966c			bcc 	_TKCheckLoop
.9684					_TKEndIdentifier:
.9684	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9687	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9689	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.968b	f0 06		beq $9693			beq 	_TKHasTypeCharacter
.968d	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.968f	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9691	d0 07		bne $969a			bne 	_TKNoTypeCharacter
.9693					_TKHasTypeCharacter:
.9693	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9696	e8		inx				inx 								; read next
.9697	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.969a					_TKNoTypeCharacter:
.969a	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.969c	d0 09		bne $96a7			bne 	_TKNoArray
.969e	e8		inx				inx 								; skip the (
.969f	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.96a2	09 04		ora #$04			ora 	#$04
.96a4	8d 04 07	sta $0704			sta 	identTypeByte
.96a7					_TKNoArray:
.96a7	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.96aa	20 44 97	jsr $9744			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.96ad	a0 94		ldy #$94			ldy 	#(KeywordSet0) >> 8
.96af	a9 6e		lda #$6e			lda 	#(KeywordSet0) & $FF
.96b1	20 15 94	jsr $9415			jsr 	TokeniseSearchTable
.96b4	a2 00		ldx #$00			ldx 	#0
.96b6	b0 1f		bcs $96d7			bcs 	_TKFoundToken
.96b8	a0 95		ldy #$95			ldy 	#(KeywordSet1) >> 8
.96ba	a9 90		lda #$90			lda 	#(KeywordSet1) & $FF
.96bc	20 15 94	jsr $9415			jsr 	TokeniseSearchTable
.96bf	a2 81		ldx #$81			ldx 	#$81
.96c1	b0 14		bcs $96d7			bcs 	_TKFoundToken
.96c3	a0 95		ldy #$95			ldy 	#(KeywordSet1) >> 8
.96c5	a9 90		lda #$90			lda 	#(KeywordSet1) & $FF
.96c7	20 15 94	jsr $9415			jsr 	TokeniseSearchTable
.96ca	a2 82		ldx #$82			ldx 	#$82
.96cc	b0 09		bcs $96d7			bcs 	_TKFoundToken
.96ce	20 d4 97	jsr $97d4			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.96d1	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.96d4	4c f6 95	jmp $95f6			jmp 	_TKTokeniseLoop 			; and go round again.
.96d7					_TKFoundToken:
.96d7	48		pha				pha 								; save token
.96d8	8a		txa				txa 								; shift in X, is there one ?
.96d9	f0 03		beq $96de			beq 	_TKNoTShift
.96db	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte 			; if so, write it out
.96de					_TKNoTShift:
.96de	68		pla				pla 								; restore and write token
.96df	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.96e2	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.96e5	4c f6 95	jmp $95f6			jmp 	_TKTokeniseLoop 			; and go round again.
.96e8					TokeniseString:
.96e8	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.96ea	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.96ed	e8		inx				inx									; start of quoted string.
.96ee	da		phx				phx 								; push start of string on top
.96ef	ca		dex				dex
.96f0					_TSFindEnd:
.96f0	e8		inx				inx
.96f1	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character
.96f4	f0 04		beq $96fa			beq 	_TSEndOfString
.96f6	c9 22		cmp #$22			cmp 	#'"'
.96f8	d0 f6		bne $96f0			bne 	_TSFindEnd
.96fa					_TSEndOfString:
.96fa	7a		ply				ply  								; so now Y is first character, X is character after end.
.96fb	48		pha				pha 								; save terminating character
.96fc	20 04 97	jsr $9704			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.96ff	68		pla				pla 								; terminating character
.9700	f0 01		beq $9703			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9702	e8		inx				inx
.9703					_TSNotQuote:
.9703	60		rts				rts
.9704					TOWriteBlockXY:
.9704	86 36		stx $36				stx 	zTemp0 						; write end character
.9706	98		tya				tya
.9707	49 ff		eor #$ff			eor 	#$FF
.9709	38		sec				sec
.970a	65 36		adc $36				adc 	zTemp0
.970c	1a		inc a				inc 	a 							; one extra for NULL
.970d	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.9710					_TOBlockLoop:
.9710	c4 36		cpy $36				cpy 	zTemp0
.9712	f0 09		beq $971d			beq 	_TOBlockExit
.9714	b9 1c 08	lda $081c,y			lda 	lineBuffer,y
.9717	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.971a	c8		iny				iny
.971b	80 f3		bra $9710			bra 	_TOBlockLoop
.971d					_TOBlockExit:
.971d	a9 00		lda #$00			lda 	#0
.971f	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.9722	60		rts				rts
.9723					TokeniseHexConstant:
.9723	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9725	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.9728	e8		inx				inx									; start of quoted string.
.9729	da		phx				phx 								; push start of constant on top
.972a	ca		dex				dex
.972b					_THFindLoop:
.972b	e8		inx				inx
.972c	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.972f	c9 30		cmp #$30			cmp 	#"0"
.9731	90 0c		bcc $973f			bcc 	_THFoundEnd
.9733	c9 3a		cmp #$3a			cmp 	#"9"+1
.9735	90 f4		bcc $972b			bcc 	_THFindLoop
.9737	c9 41		cmp #$41			cmp 	#"A"
.9739	90 04		bcc $973f			bcc 	_THFoundEnd
.973b	c9 47		cmp #$47			cmp 	#"F"+1
.973d	90 ec		bcc $972b			bcc 	_THFindLoop
.973f					_THFoundEnd:
.973f	7a		ply				ply 								; restore start
.9740	20 04 97	jsr $9704			jsr 	TOWriteBlockXY 				; output the block
.9743	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9744					TokeniseCalculateHash:
.9744	da		phx				phx
.9745	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9748	a9 00		lda #$00			lda 	#0
.974a					_TCHLoop:
.974a	18		clc				clc
.974b	7d 1c 08	adc $081c,x			adc 	lineBuffer,x
.974e	e8		inx				inx
.974f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9752	d0 f6		bne $974a			bne 	_TCHLoop
.9754	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9757	fa		plx				plx
.9758	60		rts				rts
.9759					FixLineBufferCase:
.9759	a2 00		ldx #$00			ldx 	#0
.975b					_FLBCLoop:
.975b	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next character
.975e	f0 22		beq $9782			beq 	_FLBCExit 					; end of string.
.9760	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9762	f0 11		beq $9775			beq 	_FLBCInQuotes
.9764	e8		inx				inx
.9765	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9767	90 f2		bcc $975b			bcc 	_FLBCLoop
.9769	c9 7b		cmp #$7b			cmp 	#'z'+1
.976b	b0 ee		bcs $975b			bcs 	_FLBCLoop
.976d	38		sec				sec 								; make U/C
.976e	e9 20		sbc #$20			sbc 	#32
.9770	9d 1b 08	sta $081b,x			sta	 	lineBuffer-1,x 				; write back
.9773	80 e6		bra $975b			bra 	_FLBCLoop
.9775					_FLBCInQuotes:
.9775	e8		inx				inx 								; advance
.9776	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next
.9779	f0 07		beq $9782			beq 	_FLBCExit 					; exit on EOS
.977b	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.977d	d0 f6		bne $9775			bne 	_FLBCInQuotes
.977f	e8		inx				inx 								; skip over it
.9780	80 d9		bra $975b			bra 	_FLBCLoop
.9782					_FLBCExit:
.9782	60		rts				rts
.9783					TokeniseExtractLineNumber:
.9783	ad 1e 07	lda $071e			lda 	tokenLineNumber+1 			; push current value on stack
.9786	48		pha				pha
.9787	ad 1d 07	lda $071d			lda 	tokenLineNumber
.978a	48		pha				pha
.978b	20 c1 97	jsr $97c1			jsr 	_TELNTimes2 				; line # x 4
.978e	20 c1 97	jsr $97c1			jsr 	_TELNTimes2 				; line # x 2
.9791	18		clc				clc 								; add stacked value
.9792	68		pla				pla
.9793	6d 1d 07	adc $071d			adc 	tokenLineNumber
.9796	8d 1d 07	sta $071d			sta 	tokenLineNumber
.9799	68		pla				pla
.979a	6d 1e 07	adc $071e			adc 	tokenLineNumber+1
.979d	8d 1e 07	sta $071e			sta 	tokenLineNumber+1 			; line # x 5
.97a0	20 c1 97	jsr $97c1			jsr 	_TELNTimes2 				; line # x 10
.97a3	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get and consume character
.97a6	e8		inx				inx
.97a7	29 0f		and #$0f			and 	#15 						; add to line #
.97a9	18		clc				clc
.97aa	6d 1d 07	adc $071d			adc 	tokenLineNumber
.97ad	8d 1d 07	sta $071d			sta 	tokenLineNumber
.97b0	90 03		bcc $97b5			bcc 	_TLENNoCarry
.97b2	ee 1e 07	inc $071e			inc 	tokenLineNumber+1
.97b5					_TLENNoCarry:
.97b5	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; more digits ?
.97b8	c9 30		cmp #$30			cmp 	#'0'
.97ba	90 04		bcc $97c0			bcc 	_TLENExit
.97bc	c9 3a		cmp #$3a			cmp 	#'9'+1
.97be	90 c3		bcc $9783			bcc 	TokeniseExtractLineNumber
.97c0					_TLENExit:
.97c0	60		rts				rts
.97c1					_TELNTimes2:
.97c1	0e 1d 07	asl $071d			asl 	tokenLineNumber
.97c4	2e 1e 07	rol $071e			rol 	tokenLineNumber+1
.97c7	60		rts				rts
.97c8					TokeniseWriteByte:
.97c8	da		phx				phx
.97c9	ae 1c 07	ldx $071c			ldx 	tokenOffset 				; next slot to write to
.97cc	9d 1c 07	sta $071c,x			sta 	tokenOffset,x 				; write byte out
.97cf	ee 1c 07	inc $071c			inc 	tokenOffset 				; advance slot.
.97d2	fa		plx				plx
.97d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.97d4					CheckCreateVariableRecord:
.97d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.97d6	85 36		sta $36				sta 	0+zTemp0
.97d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.97da	85 37		sta $37				sta 	1+zTemp0
.97dc					_CCVSearch:
.97dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.97de	f0 2c		beq $980c			beq 	_CCVFail
.97e0	a0 01		ldy #$01			ldy 	#1 							; read the hash
.97e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.97e4	cd 03 07	cmp $0703			cmp 	identHash
.97e7	d0 16		bne $97ff			bne 	_CCVNext
.97e9	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.97eb	ae 00 07	ldx $0700			ldx 	identStart
.97ee					_CCVCompare:
.97ee	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.97f1	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.97f3	e8		inx				inx 								; advance pointers
.97f4	c8		iny				iny
.97f5	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.97f6	d0 07		bne $97ff			bne 	_CCVNext  					; didn't match go to next.
.97f8	90 f4		bcc $97ee			bcc 	_CCVCompare 				; not finished yet.
.97fa	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.97fd	f0 41		beq $9840			beq 	_CCVFound 					; yes, we were successful
.97ff					_CCVNext:
.97ff	18		clc				clc
.9800	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9802	65 36		adc $36				adc 	zTemp0
.9804	85 36		sta $36				sta 	zTemp0
.9806	90 d4		bcc $97dc			bcc 	_CCVSearch
.9808	e6 37		inc $37				inc 	zTemp0+1
.980a	80 d0		bra $97dc			bra 	_CCVSearch
.980c					_CCVFail:
.980c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.980e	ad 03 07	lda $0703			lda 	identHash
.9811	91 36		sta ($36),y			sta 	(zTemp0),y
.9813	c8		iny				iny 								; offset 2 is the type byte
.9814	ad 04 07	lda $0704			lda 	identTypeByte
.9817	91 36		sta ($36),y			sta 	(zTemp0),y
.9819	c8		iny				iny
.981a					_CCVData:
.981a	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.981c	91 36		sta ($36),y			sta 	(zTemp0),y
.981e	c8		iny				iny
.981f	c0 08		cpy #$08			cpy 	#8
.9821	90 f7		bcc $981a			bcc 	_CCVData
.9823	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9826					_CCVCopyName:
.9826	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9829	91 36		sta ($36),y			sta 	(zTemp0),y
.982b	e8		inx				inx
.982c	c8		iny				iny
.982d	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9830	d0 f4		bne $9826			bne 	_CCVCopyName
.9832	98		tya				tya 								; patch offset
.9833	92 36		sta ($36)			sta 	(zTemp0)
.9835	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9837	91 36		sta ($36),y			sta 	(zTemp0),y
.9839	88		dey				dey
.983a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.983c	09 80		ora #$80			ora 	#$80
.983e	91 36		sta ($36),y			sta 	(zTemp0),y
.9840					_CCVFound:
.9840	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9842	38		sec				sec
.9843	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9845	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9847	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.984a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.984c	20 c8 97	jsr $97c8			jsr 	TokeniseWriteByte
.984f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9ff8					MemoryPeek:
.9ff8	b2 36		lda ($36)			lda 	(zTemp0)
.9ffa	60		rts				rts
.9ffb					MemoryPoke:
.9ffb	92 36		sta ($36)			sta 	(zTemp0)
.9ffd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9ffe					PrintHex:
.9ffe	48		pha				pha
.9fff	4a		lsr a				lsr 	a
.a000	4a		lsr a				lsr 	a
.a001	4a		lsr a				lsr 	a
.a002	4a		lsr a				lsr 	a
.a003	20 07 a0	jsr $a007			jsr 	_PrintNibble
.a006	68		pla				pla
.a007					_PrintNibble:
.a007	29 0f		and #$0f			and 	#15
.a009	c9 0a		cmp #$0a			cmp 	#10
.a00b	90 02		bcc $a00f			bcc 	_NoShift
.a00d	69 06		adc #$06			adc 	#6
.a00f					_NoShift:
.a00f	69 30		adc #$30			adc 	#48
.a011	4c 14 a0	jmp $a014			jmp 	EXTPrintCharacter
.a014					EXTPrintCharacter:
.a014	48		pha				pha
.a015	da		phx				phx
.a016	5a		phy				phy
.a017	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a01a	7a		ply				ply
.a01b	fa		plx				plx
.a01c	68		pla				pla
.a01d	60		rts				rts
.a01e					EXTInputSingleCharacter:
.a01e	da		phx				phx
.a01f	5a		phy				phy
.a020					_EISCWait:
.a020	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a023	c9 00		cmp #$00			cmp 	#0
.a025	f0 f9		beq $a020			beq 	_EISCWait
.a027	7a		ply				ply
.a028	fa		plx				plx
.a029	60		rts				rts
.a02a					EXTInputLine:
.a02a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a02c					_ILLoop:
.a02c	da		phx				phx 								; read character in
.a02d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a030	fa		plx				plx
.a031	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a033	f0 12		beq $a047			beq 	_ILBackspace
.a035	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a037	f0 15		beq $a04e			beq 	_ILExit
.a039	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a03b	90 ef		bcc $a02c			bcc 	_ILLoop
.a03d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a03f	f0 eb		beq $a02c			beq 	_ILLoop
.a041	9d 1c 08	sta $081c,x			sta 	lineBuffer,x 				; save it
.a044	e8		inx				inx
.a045	80 e5		bra $a02c			bra 	_ILLoop
.a047					_ILBackspace:
.a047	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a049	f0 e1		beq $a02c			beq 	_ILLoop
.a04b	ca		dex				dex 								; back one.
.a04c	80 de		bra $a02c			bra 	_ILLoop
.a04e					_ILExit:
.a04e	20 14 a0	jsr $a014			jsr 	EXTPrintCharacter
.a051	9e 1c 08	stz $081c,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a054	60		rts				rts
.a055					EXTBreakCheck:
.a055	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9850					MemoryNew:
.9850	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9852	85 30		sta $30				sta 	codePtr
.9854	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9856	85 31		sta $31				sta 	codePtr+1
.9858	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.985a	92 30		sta ($30)			sta 	(codePtr)
.985c	60		rts				rts
.985d					MemoryAppend:
.985d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.985f	85 30		sta $30				sta 	codePtr
.9861	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9863	85 31		sta $31				sta 	codePtr+1
.9865					_MAFindEnd:
.9865	b2 30		lda ($30)			lda 	(codePtr)
.9867	f0 0d		beq $9876			beq 	_MAFoundEnd
.9869	18		clc				clc
.986a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.986c	65 30		adc $30				adc 	codePtr
.986e	85 30		sta $30				sta 	codePtr
.9870	90 02		bcc $9874			bcc 	_CREExit
.9872	e6 31		inc $31				inc 	codePtr+1
.9874					_CREExit:
.9874	80 ef		bra $9865			bra 	_MAFindEnd
.9876					_MAFoundEnd:
.9876	ac 1c 07	ldy $071c			ldy 	tokenOffset 				; bytes to copy
.9879	c0 04		cpy #$04			cpy 	#4 							; blank line
.987b	f0 0e		beq $988b			beq 	_MANoLine
.987d	a9 00		lda #$00			lda 	#0 							; end of program
.987f	91 30		sta ($30),y			sta 	(codePtr),y
.9881					_MACopy:
.9881	88		dey				dey
.9882	b9 1c 07	lda $071c,y			lda 	tokenOffset,y
.9885	91 30		sta ($30),y			sta 	(codePtr),y
.9887	c0 00		cpy #$00			cpy 	#0
.9889	d0 f6		bne $9881			bne 	_MACopy
.988b					_MANoLine:
.988b	60		rts				rts
.988c					MemoryInline:
.988c	98		tya				tya 								; put address into stack,x
.988d	18		clc				clc
.988e	65 30		adc $30				adc 	codePtr
.9890	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9893	a5 31		lda $31				lda 	codePtr+1
.9895	69 00		adc #$00			adc 	#0
.9897	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.989a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.989d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.98a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.98a1					MemoryTransferAX:
.98a1	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.98a3	86 37		stx $37				stx 	zTemp0+1
.98a5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.98a7	85 30		sta $30				sta 	codePtr
.98a9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.98ab	85 31		sta $31				sta 	codePtr+1
.98ad					_MTAXLoop:
.98ad	b2 30		lda ($30)			lda 	(codePtr)
.98af	f0 1d		beq $98ce			beq 	_MTAXError 					; not found.
.98b1	a0 01		ldy #$01			ldy 	#1 							; check LSB
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	c5 36		cmp $36				cmp 	zTemp0
.98b7	d0 07		bne $98c0			bne 	_MTAXNext
.98b9	c8		iny				iny 								; check MSB
.98ba	b1 30		lda ($30),y			lda 	(codePtr),y
.98bc	c5 37		cmp $37				cmp 	zTemp0+1
.98be	f0 0d		beq $98cd			beq 	_MTAXExit 					; success !
.98c0					_MTAXNext:
.98c0	18		clc				clc
.98c1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98c3	65 30		adc $30				adc 	codePtr
.98c5	85 30		sta $30				sta 	codePtr
.98c7	90 02		bcc $98cb			bcc 	_CREExit
.98c9	e6 31		inc $31				inc 	codePtr+1
.98cb					_CREExit:
.98cb	80 e0		bra $98ad			bra 	_MTAXLoop
.98cd					_MTAXExit:
.98cd	60		rts				rts
.98ce					_MTAXError:
.98ce	a9 0d		lda #$0d		lda	#13
.98d0	4c e8 87	jmp $87e8		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
