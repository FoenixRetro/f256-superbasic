
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 14:09:38 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 a4 81	jsr $81a4			jsr 	NewCommand 					; erase current program
.8006	20 56 8d	jsr $8d56			jsr 	BackloadProgram
.8009	4c 12 82	jmp $8212			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	15 84					.word	ShiftLeft                        ; $00 <<
>8016	0f 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	05 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	f9 96					.word	SyntaxError                      ; $03 !!3
>801c	f9 96					.word	SyntaxError                      ; $04 ><
>801e	19 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	18 84					.word	ShiftRight                       ; $06 >>
>8022	f9 96					.word	SyntaxError                      ; $07 !!7
>8024	f9 96					.word	SyntaxError                      ; $08 !!8
>8026	f9 96					.word	SyntaxError                      ; $09 !!9
>8028	f9 96					.word	SyntaxError                      ; $0a !!10
>802a	f9 96					.word	SyntaxError                      ; $0b !!11
>802c	f9 96					.word	SyntaxError                      ; $0c !!12
>802e	f9 96					.word	SyntaxError                      ; $0d !!13
>8030	f9 96					.word	SyntaxError                      ; $0e !!14
>8032	f9 96					.word	SyntaxError                      ; $0f !!15
>8034	f9 96					.word	SyntaxError                      ; $10 @
>8036	f9 96					.word	SyntaxError                      ; $11 !!17
>8038	f9 96					.word	SyntaxError                      ; $12 !!18
>803a	f9 96					.word	SyntaxError                      ; $13 [
>803c	59 92					.word	IntegerDivide                    ; $14 \
>803e	f9 96					.word	SyntaxError                      ; $15 ]
>8040	9e 85					.word	EorInteger                       ; $16 ^
>8042	f9 96					.word	SyntaxError                      ; $17 _
>8044	f9 96					.word	SyntaxError                      ; $18 `
>8046	f9 96					.word	SyntaxError                      ; $19 !!25
>8048	f9 96					.word	SyntaxError                      ; $1a !!26
>804a	f9 96					.word	SyntaxError                      ; $1b {
>804c	58 85					.word	OraInteger                       ; $1c |
>804e	f9 96					.word	SyntaxError                      ; $1d }
>8050	f9 96					.word	SyntaxError                      ; $1e ~
>8052	f9 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	f9 96					.word	SyntaxError                      ; $20
>8056	e4 85					.word	WordIndirect                     ; $21 !
>8058	f9 96					.word	SyntaxError                      ; $22 "
>805a	f9 96					.word	SyntaxError                      ; $23 #
>805c	f9 96					.word	SyntaxError                      ; $24 $
>805e	a6 92					.word	IntegerModulus                   ; $25 %
>8060	12 85					.word	AndInteger                       ; $26 &
>8062	f9 96					.word	SyntaxError                      ; $27 '
>8064	f9 96					.word	SyntaxError                      ; $28 (
>8066	f9 96					.word	SyntaxError                      ; $29 )
>8068	1b 93					.word	MulInteger                       ; $2a *
>806a	ac 84					.word	AddInteger                       ; $2b +
>806c	f9 96					.word	SyntaxError                      ; $2c ,
>806e	e7 84					.word	SubInteger                       ; $2d -
>8070	f9 96					.word	SyntaxError                      ; $2e .
>8072	b2 94					.word	FDivideCommand                   ; $2f /
>8074	f9 96					.word	SyntaxError                      ; $30 0
>8076	f9 96					.word	SyntaxError                      ; $31 1
>8078	f9 96					.word	SyntaxError                      ; $32 2
>807a	f9 96					.word	SyntaxError                      ; $33 3
>807c	f9 96					.word	SyntaxError                      ; $34 4
>807e	f9 96					.word	SyntaxError                      ; $35 5
>8080	f9 96					.word	SyntaxError                      ; $36 6
>8082	f9 96					.word	SyntaxError                      ; $37 7
>8084	f9 96					.word	SyntaxError                      ; $38 8
>8086	f9 96					.word	SyntaxError                      ; $39 9
>8088	f9 96					.word	SyntaxError                      ; $3a :
>808a	f9 96					.word	SyntaxError                      ; $3b ;
>808c	f1 82					.word	BinaryCompareLess                ; $3c <
>808e	e7 82					.word	BinaryCompareEqual               ; $3d =
>8090	fb 82					.word	BinaryCompareGreater             ; $3e >
>8092	0b 86					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	5d 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	6a 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	f9 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	f8 95					.word	AbsUnary                         ; $83 ABS(
>809c	4e 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	08 96					.word	AscUnary                         ; $85 ASC(
>80a0	eb 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	e3 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	15 96					.word	FracUnary                        ; $88 FRAC(
>80a6	2b 96					.word	IntUnary                         ; $89 INT(
>80a8	81 96					.word	IsValUnary                       ; $8a ISVAL(
>80aa	c5 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	3d 96					.word	LenUnary                         ; $8c LEN(
>80ae	ef 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	88 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	d5 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	9e 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	57 96					.word	SgnUnary                         ; $91 SGN(
>80b8	fd 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	18 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	d7 82					.word	UnaryTrue                        ; $94 TRUE
>80be	77 96					.word	ValUnary                         ; $95 VAL(
>80c0	f9 96					.word	SyntaxError                      ; $96 FOR
>80c2	f9 96					.word	SyntaxError                      ; $97 IF
>80c4	f9 96					.word	SyntaxError                      ; $98 PROC
>80c6	f9 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	f9 96					.word	SyntaxError                      ; $9a WHILE
>80ca	f9 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	f9 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	f9 96					.word	SyntaxError                      ; $9d NEXT
>80d0	f9 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	f9 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	f9 96					.word	SyntaxError                      ; $a1 CLS
>80d8	f9 96					.word	SyntaxError                      ; $a2 DATA
>80da	f9 96					.word	SyntaxError                      ; $a3 DIM
>80dc	f9 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	62 81					.word	GotoCommand                      ; $a5 GOTO
>80e0	75 81					.word	LetCommand                       ; $a6 LET
>80e2	ae 81					.word	Command_Print                    ; $a7 PRINT
>80e4	f9 96					.word	SyntaxError                      ; $a8 READ
>80e6	05 82					.word	RemCommand                       ; $a9 REM
>80e8	f9 96					.word	SyntaxError                      ; $aa RETURN
>80ea	f9 96					.word	SyntaxError                      ; $ab THEN
>80ec	f9 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	f9 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	f9 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	f9 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	f9 96					.word	SyntaxError                      ; $86 LIST
>80fc	a4 81					.word	NewCommand                       ; $87 NEW
>80fe	f9 96					.word	SyntaxError                      ; $88 RESTORE
>8100	12 82					.word	CommandRUN                       ; $89 RUN
>8102	f9 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	f9 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	f9 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	f9 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 90 8c	jsr $8c90			jsr 	EvaluateInteger 			; the assert test
.810f	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 72 82	jmp $8272		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 a5 8c	jsr $8ca5			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 1e 98	jsr $981e			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8162					GotoCommand:
.8162	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8164	20 a5 8c	jsr $8ca5			jsr 	Evaluate16BitInteger
.8167					GotoStackX:
.8167	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.816a	48		pha				pha 								; it is slightly inefficient, just in cases.
.816b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.816e	fa		plx				plx
.816f	20 0e 92	jsr $920e			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8172	4c 1d 82	jmp $821d			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8175					LetCommand:
.8175	a2 00		ldx #$00			ldx 	#0
.8177	ad 5c 86	lda $865c			lda 	PrecedenceLevel+"*"			; precedence > this
.817a	20 76 86	jsr $8676			jsr 	EvaluateExpressionAtPrecedence
.817d	a9 3d		lda #$3d			lda 	#"=" 						; check =
.817f	20 50 92	jsr $9250			jsr 	CheckNextA
.8182	e8		inx				inx 								; RHS
.8183	20 74 86	jsr $8674			jsr 	EvaluateExpression
.8186	ca		dex				dex
.8187	20 8b 81	jsr $818b			jsr 	AssignVariable
.818a	60		rts				rts
.818b					AssignVariable:
.818b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.818e	48		pha				pha 								; save a copy
.818f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8192	29 10		and #$10			and 	#NSBIsString
.8194	d0 0b		bne $81a1			bne 	_ASError
.8196	68		pla				pla 								; get back
.8197	29 10		and #$10			and 	#NSBIsString 				; check type
.8199	d0 03		bne $819e			bne 	_ASString
.819b	4c b1 86	jmp $86b1			jmp 	AssignNumber
.819e					_ASString:
.819e	4c 1f 87	jmp $871f			jmp 	AssignString
.81a1					_ASError:
.81a1	4c 03 97	jmp $9703			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81a4					NewCommand:
.81a4	20 bd 91	jsr $91bd			jsr 	MemoryNew
.81a7	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81aa	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.81ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81ae					Command_Print:
.81ae	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81af					_CPLoop:
.81af	08		php				php 								; save last action flag
.81b0	b1 30		lda ($30),y			lda 	(codePtr),y
.81b2	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81b4	f0 46		beq $81fc			beq 	_CPExit
.81b6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81b8	f0 42		beq $81fc			beq 	_CPExit
.81ba	68		pla				pla 								; throw last action flag
.81bb	b1 30		lda ($30),y			lda 	(codePtr),y
.81bd	c8		iny				iny
.81be	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81c0	f0 37		beq $81f9			beq 	_CPContinueWithSameLine
.81c2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81c4	f0 2e		beq $81f4			beq 	_CPTab
.81c6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81c8	f0 26		beq $81f0			beq 	_CPNewLine
.81ca	88		dey				dey 								; undo the get.
.81cb	a2 00		ldx #$00			ldx 	#0
.81cd	20 64 8c	jsr $8c64			jsr 	EvaluateValue 				; get a value into slot 0
.81d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81d3	29 10		and #$10			and 	#NSBIsString
.81d5	f0 0b		beq $81e2			beq 	_CPNumber
.81d7	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81da	ad 08 06	lda $0608			lda 	NSMantissa0
.81dd	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.81e0	80 cc		bra $81ae			bra 	Command_Print 				; loop round clearing carry so NL if end
.81e2					_CPNumber:
.81e2	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81e4	20 3a 8b	jsr $8b3a			jsr 	ConvertNumberToString 		; convert to string
.81e7	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81e9	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81eb	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.81ee	80 be		bra $81ae			bra 	Command_Print 				; loop round clearing carry so NL if end
.81f0					_CPNewLine:
.81f0	a9 0d		lda #$0d			lda 	#13
.81f2	80 02		bra $81f6			bra 	_CPPrintChar
.81f4					_CPTab:
.81f4	a9 09		lda #$09			lda 	#9 							; print TAB
.81f6					_CPPrintChar:
.81f6	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.81f9					_CPContinueWithSameLine:
.81f9	38		sec				sec 								; loop round with carry set, which
.81fa	80 b3		bra $81af			bra 	_CPLoop 					; will inhibit final CR
.81fc					_CPExit:
.81fc	28		plp				plp 								; get last action flag
.81fd	b0 05		bcs $8204			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ff	a9 0d		lda #$0d			lda 	#13 						; print new line
.8201	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.8204					_CPExit2:
.8204	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8205					RemCommand:
.8205	b1 30		lda ($30),y			lda 	(codePtr),y
.8207	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8209	d0 06		bne $8211			bne 	_RMExit
.820b	c8		iny				iny
.820c	98		tya				tya
.820d	38		sec				sec
.820e	71 30		adc ($30),y			adc 	(codePtr),y
.8210	a8		tay				tay
.8211					_RMExit:
.8211	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8212					CommandRUN:
.8212	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8215	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8217	85 30		sta $30				sta 	codePtr
.8219	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.821b	85 31		sta $31				sta 	codePtr+1
.821d					RUNNewLine:
.821d	b2 30		lda ($30)			lda 	(codePtr)
.821f	f0 39		beq $825a			beq 	CRNoProgram         		; no then END.
.8221	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8223	9a		txs				txs
.8224					RUNCodePointerLine:
.8224	a0 02		ldy #$02			ldy 	#2 							; start of program
.8226					_CRIncMainLoop:
.8226	c8		iny				iny
.8227					_CRMainLoop:
.8227	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.822a	b1 30		lda ($30),y			lda 	(codePtr),y
.822c	10 10		bpl $823e			bpl 	_CRNotKeyword
.822e	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8230	b0 04		bcs $8236			bcs 	_CRIsKeyword
.8232	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8234	b0 1e		bcs $8254			bcs		_CRSyntaxError
.8236					_CRIsKeyword:
.8236	c8		iny				iny 								; consume command
.8237	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8238	aa		tax				tax 								; put in X for vector jump
.8239	20 57 82	jsr $8257			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.823c	80 e9		bra $8227			bra 	_CRMainLoop 				; and loop round
.823e					_CRNotKeyword:
.823e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8240	f0 e4		beq $8226			beq 	_CRIncMainLoop
.8242	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8244	90 05		bcc $824b			bcc 	_CRNotVariable
.8246					_CRGoLet:
.8246	20 75 81	jsr $8175			jsr 	LetCommand
.8249	80 dc		bra $8227			bra 	_CRMainLoop
.824b					_CRNotVariable:
.824b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.824d	f0 f7		beq $8246			beq 	_CRGoLet
.824f	c9 21		cmp #$21			cmp 	#KWD_PLING
.8251	f0 f3		beq $8246			beq 	_CRGoLet
>8253	db						.byte 	$DB 						; causes a break in the emulator
.8254					_CRSyntaxError:
.8254	4c f9 96	jmp $96f9			jmp 	SyntaxError
.8257					_CRCallVector0:
.8257	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.825a					CRNoProgram:
.825a	4c 5f 81	jmp $815f			jmp 	EndCommand
.825d					EOLCommand:
.825d	18		clc				clc
.825e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8260	65 30		adc $30				adc 	codePtr
.8262	85 30		sta $30				sta 	codePtr
.8264	90 02		bcc $8268			bcc 	_CREExit
.8266	e6 31		inc $31				inc 	codePtr+1
.8268					_CREExit:
.8268	80 b3		bra $821d			bra 	RunNewLine
.826a					Shift1Command:
.826a	b1 30		lda ($30),y			lda 	(codePtr),y
.826c	c8		iny				iny
.826d	0a		asl a				asl 	a
.826e	aa		tax				tax
.826f	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9240					CheckRightBracket:
.9240	b1 30		lda ($30),y			lda 	(codePtr),y
.9242	c8		iny				iny
.9243	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9245	d0 0f		bne $9256			bne 	CNAFail
.9247	60		rts				rts
.9248					CheckComma:
.9248	b1 30		lda ($30),y			lda 	(codePtr),y
.924a	c8		iny				iny
.924b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.924d	d0 07		bne $9256			bne 	CNAFail
.924f	60		rts				rts
.9250					CheckNextA:
.9250	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9252	d0 02		bne $9256			bne 	CNAFail
.9254	c8		iny				iny 								; skip character
.9255	60		rts				rts 								; and exit
.9256					CNAFail:
.9256	4c f9 96	jmp $96f9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8272					ErrorHandler:
.8272	a8		tay				tay 								; find the error text
.8273	f0 42		beq $82b7			beq 	_EHEnd
.8275	a2 00		ldx #$00			ldx 	#0
.8277					_EHFind:
.8277	88		dey				dey 								; found the error text ?
.8278	f0 0a		beq $8284			beq 	_EHFound
.827a					_EHFindZero:
.827a	bd 12 97	lda $9712,x			lda 	ErrorText,x 				; find the next error
.827d	e8		inx				inx
.827e	c9 00		cmp #$00			cmp 	#0
.8280	d0 f8		bne $827a			bne 	_EHFindZero
.8282	80 f3		bra $8277			bra 	_EHFind
.8284					_EHFound:
.8284	bd 12 97	lda $9712,x			lda 	ErrorText,x 				; print the message
.8287	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.828a	e8		inx				inx
.828b	bd 12 97	lda $9712,x			lda 	ErrorText,x
.828e	d0 f4		bne $8284			bne 	_EHFound
.8290	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8292	b1 30		lda ($30),y			lda 	(codePtr),y
.8294	d0 05		bne $829b			bne 	_EHAtMsg
.8296	c8		iny				iny
.8297	b1 30		lda ($30),y			lda 	(codePtr),y
.8299	f0 17		beq $82b2			beq 	_EHCREnd
.829b					_EHAtMsg:
.829b	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.829d	a9 ba		lda #$ba			lda 	#_AtMsg & $FF
.829f	20 c4 82	jsr $82c4			jsr 	PrintStringXA
.82a2	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.82a4	b1 30		lda ($30),y			lda 	(codePtr),y
.82a6	48		pha				pha
.82a7	c8		iny				iny
.82a8	b1 30		lda ($30),y			lda 	(codePtr),y
.82aa	aa		tax				tax
.82ab	68		pla				pla
.82ac	20 9c 93	jsr $939c			jsr 	ConvertInt16 				; convert XA to string
.82af	20 c4 82	jsr $82c4			jsr 	PrintStringXA 				; and print it.
.82b2					_EHCREnd:
.82b2	a9 0d		lda #$0d			lda 	#13 						; new line
.82b4	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.82b7					_EHEnd:
.82b7	4c 0c 80	jmp $800c			jmp 	WarmStart
>82ba	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82c2	20 00
.82c4					PrintStringXA:
.82c4	5a		phy				phy
.82c5	86 37		stx $37				stx 	zTemp0+1
.82c7	85 36		sta $36				sta 	zTemp0
.82c9	a0 00		ldy #$00			ldy 	#0
.82cb					_PSXALoop:
.82cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd	f0 06		beq $82d5			beq 	_PSXAExit
.82cf	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.82d2	c8		iny				iny
.82d3	80 f6		bra $82cb			bra 	_PSXALoop
.82d5					_PSXAExit:
.82d5	7a		ply				ply
.82d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82d7					UnaryTrue:
.82d7	fa		plx				plx
.82d8					ReturnTrue:
.82d8	a9 01		lda #$01			lda 	#1  						; set to 1
.82da	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.82dd	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82df	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82e2	60		rts				rts
.82e3					UnaryFalse:
.82e3	fa		plx				plx
.82e4					ReturnFalse:
.82e4	4c 19 8d	jmp $8d19			jmp 	NSMSetZero 					; set it all to zero
.82e7					BinaryCompareEqual:
.82e7	fa		plx				plx
.82e8	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82eb	c9 00		cmp #$00			cmp 	#0
.82ed	f0 e9		beq $82d8			beq 	ReturnTrue
.82ef	80 f3		bra $82e4			bra 	ReturnFalse
.82f1					BinaryCompareLess:
.82f1	fa		plx				plx
.82f2	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82f5	c9 ff		cmp #$ff			cmp 	#$FF
.82f7	f0 df		beq $82d8			beq 	ReturnTrue
.82f9	80 e9		bra $82e4			bra 	ReturnFalse
.82fb					BinaryCompareGreater:
.82fb	fa		plx				plx
.82fc	20 23 83	jsr $8323			jsr 	CompareBaseCode
.82ff	c9 01		cmp #$01			cmp 	#1
.8301	f0 d5		beq $82d8			beq 	ReturnTrue
.8303	80 df		bra $82e4			bra 	ReturnFalse
.8305					BinaryCompareNotEqual:
.8305	fa		plx				plx
.8306	20 23 83	jsr $8323			jsr 	CompareBaseCode
.8309	c9 00		cmp #$00			cmp 	#0
.830b	d0 cb		bne $82d8			bne 	ReturnTrue
.830d	80 d5		bra $82e4			bra 	ReturnFalse
.830f					BinaryCompareLessEqual:
.830f	fa		plx				plx
.8310	20 23 83	jsr $8323			jsr 	CompareBaseCode
.8313	c9 01		cmp #$01			cmp 	#1
.8315	d0 c1		bne $82d8			bne 	ReturnTrue
.8317	80 cb		bra $82e4			bra 	ReturnFalse
.8319					BinaryCompareGreaterEqual:
.8319	fa		plx				plx
.831a	20 23 83	jsr $8323			jsr 	CompareBaseCode
.831d	c9 ff		cmp #$ff			cmp 	#$FF
.831f	d0 b7		bne $82d8			bne 	ReturnTrue
.8321	80 c1		bra $82e4			bra 	ReturnFalse
.8323					CompareBaseCode:
.8323	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; make both values if references.
.8326	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8329	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832c	29 10		and #$10			and 	#NSTString
.832e	d0 40		bne $8370			bne 	_CBCString
.8330	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8333	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8336	d0 3b		bne $8373			bne 	_CBCFloat
.8338	bd 00 06	lda $0600,x			lda 	NSStatus,x
.833b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.833e	29 08		and #$08			and 	#NSTFloat
.8340	d0 31		bne $8373			bne 	_CBCFloat
.8342	20 76 83	jsr $8376			jsr 	CompareFixMinusZero
.8345	e8		inx				inx
.8346	20 76 83	jsr $8376			jsr 	CompareFixMinusZero
.8349	ca		dex				dex
.834a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.834d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8350	10 0b		bpl $835d			bpl 	_CDCSameSign
.8352	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8355	30 16		bmi $836d			bmi 	_CBCLess 					; return $FF
.8357					_CBCGreater:
.8357	a9 01		lda #$01			lda 	#1
.8359	60		rts				rts
.835a					_CBCEqual:
.835a	a9 00		lda #$00			lda 	#0
.835c	60		rts				rts
.835d					_CDCSameSign:
.835d	20 86 84	jsr $8486			jsr 	SubTopTwoStack 				; unsigned subtract
.8360	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; or the mantissa together
.8363	f0 f5		beq $835a			beq 	_CBCEqual 					; -0 == 0
.8365	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8368	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.836b	10 ea		bpl $8357			bpl 	_CBCGreater
.836d					_CBCLess:
.836d	a9 ff		lda #$ff			lda 	#$FF
.836f	60		rts				rts
.8370					_CBCString:
.8370	4c dc 83	jmp $83dc			jmp 	CompareStrings
.8373					_CBCFloat:
.8373	4c 98 94	jmp $9498			jmp 	CompareFloat
.8376					CompareFixMinusZero:
.8376	20 49 8d	jsr $8d49			jsr 	NSMIsZero
.8379	d0 03		bne $837e			bne 	_CFXMZNotZero
.837b	9e 00 06	stz $0600,x			stz 	NSStatus,x
.837e					_CFXMZNotZero:
.837e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.837f					StringConcat:
.837f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8382	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8385	29 18		and #$18			and 	#NSBTypeMask
.8387	c9 10		cmp #$10			cmp 	#NSTString
.8389	d0 4e		bne $83d9			bne		_SCType
.838b	64 38		stz $38				stz 	zTemp1 						; counting total length
.838d	e8		inx				inx
.838e	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; setup for second
.8391	20 b7 83	jsr $83b7			jsr 	_SCLengthZ0 				; length for second
.8394	ca		dex				dex
.8395	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; setup for first
.8398	20 b7 83	jsr $83b7			jsr 	_SCLengthZ0 				; length for first
.839b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.839d	20 3f 98	jsr $983f			jsr 	StringTempAllocate
.83a0	20 ca 83	jsr $83ca			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.83a3	e8		inx				inx
.83a4	20 ac 83	jsr $83ac			jsr 	_SCSetupZ0 					; copy second out
.83a7	20 ca 83	jsr $83ca			jsr 	_SCCopy
.83aa	ca		dex				dex
.83ab	60		rts				rts
.83ac					_SCSetupZ0:
.83ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.83af	85 36		sta $36				sta 	zTemp0
.83b1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b4	85 37		sta $37				sta 	zTemp0+1
.83b6	60		rts				rts
.83b7					_SCLengthZ0:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCLenLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 0a		beq $83c8			beq 	_SCLExit
.83be	c8		iny				iny
.83bf	e6 38		inc $38				inc 	zTemp1
.83c1	10 f7		bpl $83ba			bpl		_SCLenLoop
.83c3	a9 09		lda #$09		lda	#9
.83c5	4c 72 82	jmp $8272		jmp	ErrorHandler
.83c8					_SCLExit:
.83c8	7a		ply				ply
.83c9	60		rts				rts
.83ca					_SCCopy:
.83ca	5a		phy				phy
.83cb	a0 00		ldy #$00			ldy 	#0
.83cd					_SCCopyLoop:
.83cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.83cf	f0 06		beq $83d7			beq 	_SCCExit
.83d1	20 7d 98	jsr $987d			jsr 	StringTempWrite
.83d4	c8		iny				iny
.83d5	80 f6		bra $83cd			bra 	_SCCopyLoop
.83d7					_SCCExit:
.83d7	7a		ply				ply
.83d8	60		rts				rts
.83d9					_SCType:
.83d9	4c 03 97	jmp $9703			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9259					IntegerDivide:
.9259	fa		plx				plx
.925a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.925d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9260	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9261	0a		asl a				asl 	a
.9262	10 05		bpl $9269			bpl 	_NotRef
.9264	48		pha				pha
.9265	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9268	68		pla				pla
.9269					_NotRef:
.9269	0a		asl a				asl 	a
.926a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.926c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.926f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9272	f0 03		beq $9277			beq 	_IntegerCode 				; if clear, then we have two integers
.9274	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.9277					_IntegerCode:
.9277	20 99 92	jsr $9299			jsr 	CheckDivideZero 			; do div zero check
.927a	20 d1 92	jsr $92d1			jsr 	Int32Divide 				; do the division
.927d	20 8e 93	jsr $938e			jsr 	CalculateSign 				; calculate result sign
.9280					NSMCopyPlusTwoToZero:
.9280	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9283	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9286	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9289	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.928c	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.928f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9292	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9295	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9298	60		rts				rts
.9299					CheckDivideZero:
.9299	e8		inx				inx
.929a	20 49 8d	jsr $8d49			jsr 	NSMIsZero
.929d	f0 02		beq $92a1			beq 	_CDVError
.929f	ca		dex				dex
.92a0	60		rts				rts
.92a1					_CDVError:
.92a1	a9 03		lda #$03		lda	#3
.92a3	4c 72 82	jmp $8272		jmp	ErrorHandler
.92a6					IntegerModulus:
.92a6	fa		plx				plx
.92a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92aa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92ad	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92ae	0a		asl a				asl 	a
.92af	10 05		bpl $92b6			bpl 	_NotRef
.92b1	48		pha				pha
.92b2	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b5	68		pla				pla
.92b6					_NotRef:
.92b6	0a		asl a				asl 	a
.92b7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92b9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92bc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92bf	f0 03		beq $92c4			beq 	_IntegerCode 				; if clear, then we have two integers
.92c1	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.92c4					_IntegerCode:
.92c4	20 99 92	jsr $9299			jsr 	CheckDivideZero 			; do div zero check
.92c7	20 d1 92	jsr $92d1			jsr 	Int32Divide 				; do the division
.92ca	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.92cd	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.92d0	60		rts				rts
.92d1					Int32Divide:
.92d1	48		pha				pha 								; save AXY
.92d2	5a		phy				phy
.92d3	20 f0 8c	jsr $8cf0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92d6	20 15 8d	jsr $8d15			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.92d9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.92db					_I32DivideLoop:
.92db	e8		inx				inx
.92dc	e8		inx				inx
.92dd	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.92e0	ca		dex				dex
.92e1	ca		dex				dex
.92e2	20 2f 8d	jsr $8d2f			jsr 	NSMRotateLeft
.92e5	20 11 93	jsr $9311			jsr 	DivideCheckSubtract 		; check if subtract possible
.92e8	90 03		bcc $92ed			bcc 	_I32DivideNoCarryIn
.92ea	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.92ed					_I32DivideNoCarryIn:
.92ed	88		dey				dey 								; loop round till division completed.
.92ee	d0 eb		bne $92db			bne 	_I32DivideLoop
.92f0	7a		ply				ply 								; restore AXY and exit
.92f1	68		pla				pla
.92f2	60		rts				rts
.92f3					Int32ShiftDivide:
.92f3	48		pha				pha 								; save AY
.92f4	5a		phy				phy
.92f5	e8		inx				inx 								; clear S[X+2]
.92f6	e8		inx				inx
.92f7	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.92fa	ca		dex				dex
.92fb	ca		dex				dex
.92fc	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.92fe					_I32SDLoop:
.92fe	20 11 93	jsr $9311			jsr 	DivideCheckSubtract 		; check if subtract possible
.9301	e8		inx				inx
.9302	e8		inx				inx
.9303	20 2f 8d	jsr $8d2f			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9306	ca		dex				dex
.9307	ca		dex				dex
.9308	20 2f 8d	jsr $8d2f			jsr 	NSMRotateLeft
.930b	88		dey				dey 	 							; do 31 times
.930c	d0 f0		bne $92fe			bne 	_I32SDLoop
.930e	7a		ply				ply 								; restore AY and exit
.930f	68		pla				pla
.9310	60		rts				rts
.9311					DivideCheckSubtract:
.9311	20 86 84	jsr $8486			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9314	b0 04		bcs $931a			bcs 	_DCSExit 					; if carry set, then could do, exit
.9316	20 60 84	jsr $8460			jsr 	AddTopTwoStack 				; add it back in
.9319	18		clc				clc 								; and return False
.931a					_DCSExit:
.931a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.931b					MulInteger:
.931b	fa		plx				plx
.931c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.931f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9322	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9323	0a		asl a				asl 	a
.9324	10 05		bpl $932b			bpl 	_NotRef
.9326	48		pha				pha
.9327	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.932a	68		pla				pla
.932b					_NotRef:
.932b	0a		asl a				asl 	a 							; put MSB of type into A:7
.932c	30 0b		bmi $9339			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.932e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9331	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9334	f0 06		beq $933c			beq 	_IntegerCode 				; if clear, then we have two integers
.9336	4c 6f 95	jmp $956f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9339					_StringData:
.9339	4c 0d 97	jmp $970d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.933c					_IntegerCode:
.933c	20 49 93	jsr $9349			jsr 	MultiplyShort
.933f	c9 00		cmp #$00			cmp 	#0
.9341	f0 05		beq $9348			beq 	_MIExit
.9343	a9 04		lda #$04		lda	#4
.9345	4c 72 82	jmp $8272		jmp	ErrorHandler
.9348					_MIExit:
.9348	60		rts				rts
.9349					MultiplyShort:
.9349	5a		phy				phy 								; save Y
.934a	20 f0 8c	jsr $8cf0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.934d	20 15 8d	jsr $8d15			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9350	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9352					_I32MLoop:
.9352	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9355	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9358	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.935b	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.935e	f0 28		beq $9388			beq 	_I32MExit 					; exit if zero
.9360	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9363	29 01		and #$01			and 	#1
.9365	f0 0e		beq $9375			beq 	_I32MNoAdd
.9367	20 60 84	jsr $8460			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.936a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.936d	10 06		bpl $9375			bpl 	_I32MNoAdd
.936f					_I32ShiftRight:
.936f	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight 				; shift S[X] right
.9372	c8		iny				iny 								; increment shift count
.9373	80 0a		bra $937f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9375					_I32MNoAdd:
.9375	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9378	70 f5		bvs $936f			bvs 	_I32ShiftRight 				; instead.
.937a	e8		inx				inx
.937b	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.937e	ca		dex				dex
.937f					_I32MShiftUpper:
.937f	e8		inx				inx 								; shift S[X+2] right
.9380	e8		inx				inx
.9381	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight
.9384	ca		dex				dex
.9385	ca		dex				dex
.9386	80 ca		bra $9352			bra 	_I32MLoop 					; try again.
.9388					_I32MExit:
.9388	20 8e 93	jsr $938e			jsr 	CalculateSign
.938b	98		tya				tya 								; shift in A
.938c	7a		ply				ply 								; restore Y and exit
.938d	60		rts				rts
.938e					CalculateSign:
.938e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9391	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9394	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9397	0a		asl a				asl 	a 							; shift bit 7 into carry
.9398	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.939b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83dc					CompareStrings:
.83dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83df	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83e2	29 10		and #$10			and 	#NSBIsString
.83e4	f0 2c		beq $8412			beq 	_CSTypeError
.83e6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83e9	85 36		sta $36				sta 	zTemp0
.83eb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83ee	85 37		sta $37				sta 	zTemp0+1
.83f0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83f3	85 38		sta $38				sta 	zTemp1
.83f5	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83f8	85 39		sta $39				sta 	zTemp1+1
.83fa	5a		phy				phy 								; save Y so we can access strings
.83fb	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83fd					_CSLoop:
.83fd	c8		iny				iny
.83fe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8400	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8402	d0 06		bne $840a			bne 	_CSDifferent
.8404	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8406	d0 f5		bne $83fd			bne 	_CSLoop 					; still comparing
.8408					_CSExit:
.8408	7a		ply				ply 								; reached end, return zero in A from EOS
.8409	60		rts				rts
.840a					_CSDifferent:
.840a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.840c	90 fa		bcc $8408			bcc		_CSExit
.840e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8410	80 f6		bra $8408			bra 	_CSExit
.8412					_CSTypeError:
.8412	4c 03 97	jmp $9703			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8415					ShiftLeft:
.8415	38		sec				sec
.8416	80 01		bra $8419			bra 	ShiftMain
.8418					ShiftRight:
.8418	18		clc				clc
.8419					ShiftMain:
.8419	fa		plx				plx 								; restore X
.841a	08		php				php 								; save direction
.841b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.841e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8421	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8422	0a		asl a				asl 	a
.8423	10 05		bpl $842a			bpl 	_NotRef
.8425	48		pha				pha
.8426	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8429	68		pla				pla
.842a					_NotRef:
.842a	0a		asl a				asl 	a
.842b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.842d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8430	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8433	f0 03		beq $8438			beq 	_IntegerCode 				; if clear, then we have two integers
.8435	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.8438					_IntegerCode:
.8438	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.843b	29 e0		and #$e0			and 	#$E0
.843d	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8440	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8443	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8446	d0 13		bne $845b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8448					_SMLoop:
.8448	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.844b	30 11		bmi $845e			bmi 	_SMExit 					; exit if done.
.844d	28		plp				plp 								; restore direcition setting
.844e	08		php				php
.844f	90 05		bcc $8456			bcc 	_SMRight
.8451	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; shift left if CS
.8454	80 f2		bra $8448			bra 	_SMLoop
.8456					_SMRight:
.8456	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight 				; shift right if CC
.8459	80 ed		bra $8448			bra 	_SMLoop
.845b					_SMExit0:
.845b	20 19 8d	jsr $8d19			jsr 	NSMSetZero 					; return zero.
.845e					_SMExit:
.845e	28		plp				plp 								; throw direction
.845f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8460					AddTopTwoStack:
.8460	18		clc				clc
.8461	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8464	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8467	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.846d	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8470	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8473	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8476	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8479	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.847f	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8482	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8485	60		rts				rts
.8486					SubTopTwoStack:
.8486	38		sec				sec
.8487	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.848a	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.848d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8490	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8493	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8496	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8499	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.849c	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.849f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84a2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84a5	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.84a8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84ab	60		rts				rts
.84ac					AddInteger:
.84ac	fa		plx				plx
.84ad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84b0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84b3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84b4	0a		asl a				asl 	a
.84b5	10 05		bpl $84bc			bpl 	_NotRef
.84b7	48		pha				pha
.84b8	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84bb	68		pla				pla
.84bc					_NotRef:
.84bc	0a		asl a				asl 	a 							; put MSB of type into A:7
.84bd	30 0b		bmi $84ca			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84bf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84c2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84c5	f0 06		beq $84cd			beq 	_IntegerCode 				; if clear, then we have two integers
.84c7	4c f7 93	jmp $93f7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84ca					_StringData:
.84ca	4c 7f 83	jmp $837f			jmp 	StringConcat							; at least one string - don't know both are strings.
.84cd					_IntegerCode:
.84cd					AddCode:
.84cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84d0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84d3	10 8b		bpl $8460			bpl 	AddTopTwoStack
.84d5	20 86 84	jsr $8486			jsr 	SubTopTwoStack 				; do a physical subtraction
.84d8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84db	10 09		bpl $84e6			bpl 	_AddExit
.84dd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84e0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e3	20 ce 8c	jsr $8cce			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84e6					_AddExit:
.84e6	60		rts				rts
.84e7					SubInteger:
.84e7	fa		plx				plx
.84e8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84eb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84ee	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84ef	0a		asl a				asl 	a
.84f0	10 05		bpl $84f7			bpl 	_NotRef
.84f2	48		pha				pha
.84f3	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84f6	68		pla				pla
.84f7					_NotRef:
.84f7	0a		asl a				asl 	a 							; put MSB of type into A:7
.84f8	30 0b		bmi $8505			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84fa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84fd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8500	f0 06		beq $8508			beq 	_IntegerCode 				; if clear, then we have two integers
.8502	4c fc 93	jmp $93fc			jmp 	FloatingPointSub 							; otherwise at least one float.
.8505					_StringData:
.8505	4c 0d 97	jmp $970d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8508					_IntegerCode:
.8508	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.850b	49 80		eor #$80			eor 	#$80
.850d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8510	80 bb		bra $84cd			bra 	AddCode 					; and do the same code as add.
.8512					AndInteger:
.8512	fa		plx				plx
.8513	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8516	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8519	0a		asl a				asl 	a 							; shift reference bit into sign bit
.851a	0a		asl a				asl 	a
.851b	10 05		bpl $8522			bpl 	_NotRef
.851d	48		pha				pha
.851e	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8521	68		pla				pla
.8522					_NotRef:
.8522	0a		asl a				asl 	a
.8523	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8525	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8528	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.852b	f0 03		beq $8530			beq 	_IntegerCode 				; if clear, then we have two integers
.852d	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.8530					_IntegerCode:
.8530	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8533	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8536	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8539	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.853c	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.853f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8542	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8545	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8548	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.854b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.854e	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8551	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8554	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8557	60		rts				rts
.8558					OraInteger:
.8558	fa		plx				plx
.8559	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.855c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.855f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8560	0a		asl a				asl 	a
.8561	10 05		bpl $8568			bpl 	_NotRef
.8563	48		pha				pha
.8564	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8567	68		pla				pla
.8568					_NotRef:
.8568	0a		asl a				asl 	a
.8569	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.856b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.856e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8571	f0 03		beq $8576			beq 	_IntegerCode 				; if clear, then we have two integers
.8573	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.8576					_IntegerCode:
.8576	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8579	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.857c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.857f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8582	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8585	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8588	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.858b	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.858e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8591	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8594	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8597	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.859a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.859d	60		rts				rts
.859e					EorInteger:
.859e	fa		plx				plx
.859f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85a2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85a5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85a6	0a		asl a				asl 	a
.85a7	10 05		bpl $85ae			bpl 	_NotRef
.85a9	48		pha				pha
.85aa	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85ad	68		pla				pla
.85ae					_NotRef:
.85ae	0a		asl a				asl 	a
.85af	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85b1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85b4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85b7	f0 03		beq $85bc			beq 	_IntegerCode 				; if clear, then we have two integers
.85b9	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.85bc					_IntegerCode:
.85bc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85bf	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85c5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85c8	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85ce	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85d1	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85d4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85d7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85da	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85dd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85e0	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85e3	60		rts				rts
.85e4					WordIndirect:
.85e4	fa		plx				plx
.85e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85ec	0a		asl a				asl 	a
.85ed	10 05		bpl $85f4			bpl 	_NotRef
.85ef	48		pha				pha
.85f0	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85f3	68		pla				pla
.85f4					_NotRef:
.85f4	0a		asl a				asl 	a
.85f5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85f7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85fa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85fd	f0 03		beq $8602			beq 	_IntegerCode 				; if clear, then we have two integers
.85ff	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.8602					_IntegerCode:
.8602	20 cd 84	jsr $84cd			jsr 	AddCode 					; add the two values
.8605	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8607	9d 00 06	sta $0600,x			sta 	NSStatus,x
.860a	60		rts				rts
.860b					ByteIndirect:
.860b	fa		plx				plx
.860c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8612	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8613	0a		asl a				asl 	a
.8614	10 05		bpl $861b			bpl 	_NotRef
.8616	48		pha				pha
.8617	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.861a	68		pla				pla
.861b					_NotRef:
.861b	0a		asl a				asl 	a
.861c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8621	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8624	f0 03		beq $8629			beq 	_IntegerCode 				; if clear, then we have two integers
.8626	4c 03 97	jmp $9703			jmp 	TypeError 					; anything else, type mismatch.
.8629					_IntegerCode:
.8629	20 cd 84	jsr $84cd			jsr 	AddCode 					; add the two values
.862c	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.862e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.939c					ConvertInt16:
.939c	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.939f	8e 10 06	stx $0610			stx 	NSMantissa1
.93a2	9c 18 06	stz $0618			stz 	NSMantissa2
.93a5	9c 20 06	stz $0620			stz 	NSMantissa3
.93a8	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.93ab	a2 00		ldx #$00			ldx 	#0 							; stack level
.93ad	a9 0a		lda #$0a			lda 	#10 						; base
.93af	80 00		bra $93b1			bra 	ConvertInt32
.93b1					ConvertInt32:
.93b1	5a		phy				phy
.93b2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93b4	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.93b7	10 08		bpl $93c1			bpl 	_CI32NotNeg
.93b9	48		pha				pha
.93ba	a9 2d		lda #$2d			lda 	#'-'
.93bc	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.93bf	c8		iny				iny
.93c0	68		pla				pla
.93c1					_CI32NotNeg:
.93c1	20 cf 93	jsr $93cf			jsr 	_CI32DivideConvert 			; recursive conversion
.93c4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93c6	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.93c9	7a		ply				ply
.93ca	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.93cc	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.93ce	60		rts				rts
.93cf					_CI32DivideConvert:
.93cf	e8		inx				inx 								; write to next slot up
.93d0	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.93d3	ca		dex				dex
.93d4	20 d1 92	jsr $92d1			jsr 	Int32Divide 				; divide
.93d7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.93da	48		pha				pha
.93db	20 80 92	jsr $9280			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93de	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; is it zero ?
.93e1	f0 06		beq $93e9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93e3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93e6	20 cf 93	jsr $93cf			jsr 	_CI32DivideConvert 			; and recusrively call.
.93e9					_CI32NoRecurse:
.93e9	68		pla				pla 								; remainder
.93ea	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.93ec	90 02		bcc $93f0			bcc 	_CI32NotHex
.93ee	69 26		adc #$26			adc 	#6+32
.93f0					_CI32NotHex:
.93f0	69 30		adc #$30			adc 	#48
.93f2	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.93f5	c8		iny				iny
.93f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8632					PrecedenceLevel:
>8632	04					.byte	 4	; $00 <<
>8633	02					.byte	 2	; $01 <=
>8634	02					.byte	 2	; $02 <>
>8635	00					.byte	 0	; $03 !!3
>8636	00					.byte	 0	; $04 ><
>8637	02					.byte	 2	; $05 >=
>8638	04					.byte	 4	; $06 >>
>8639	00					.byte	 0	; $07 !!7
>863a	00					.byte	 0	; $08 !!8
>863b	00					.byte	 0	; $09 !!9
>863c	00					.byte	 0	; $0a !!10
>863d	00					.byte	 0	; $0b !!11
>863e	00					.byte	 0	; $0c !!12
>863f	00					.byte	 0	; $0d !!13
>8640	00					.byte	 0	; $0e !!14
>8641	00					.byte	 0	; $0f !!15
>8642	00					.byte	 0	; $10 @
>8643	00					.byte	 0	; $11 !!17
>8644	00					.byte	 0	; $12 !!18
>8645	00					.byte	 0	; $13 [
>8646	04					.byte	 4	; $14 \
>8647	00					.byte	 0	; $15 ]
>8648	01					.byte	 1	; $16 ^
>8649	00					.byte	 0	; $17 _
>864a	00					.byte	 0	; $18 `
>864b	00					.byte	 0	; $19 !!25
>864c	00					.byte	 0	; $1a !!26
>864d	00					.byte	 0	; $1b {
>864e	01					.byte	 1	; $1c |
>864f	00					.byte	 0	; $1d }
>8650	00					.byte	 0	; $1e ~
>8651	00					.byte	 0	; $1f [7m<7F>[m
>8652	00					.byte	 0	; $20
>8653	05					.byte	 5	; $21 !
>8654	00					.byte	 0	; $22 "
>8655	00					.byte	 0	; $23 #
>8656	05					.byte	 5	; $24 $
>8657	04					.byte	 4	; $25 %
>8658	01					.byte	 1	; $26 &
>8659	00					.byte	 0	; $27 '
>865a	00					.byte	 0	; $28 (
>865b	00					.byte	 0	; $29 )
>865c	04					.byte	 4	; $2a *
>865d	03					.byte	 3	; $2b +
>865e	00					.byte	 0	; $2c ,
>865f	03					.byte	 3	; $2d -
>8660	00					.byte	 0	; $2e .
>8661	04					.byte	 4	; $2f /
>8662	00					.byte	 0	; $30 0
>8663	00					.byte	 0	; $31 1
>8664	00					.byte	 0	; $32 2
>8665	00					.byte	 0	; $33 3
>8666	00					.byte	 0	; $34 4
>8667	00					.byte	 0	; $35 5
>8668	00					.byte	 0	; $36 6
>8669	00					.byte	 0	; $37 7
>866a	00					.byte	 0	; $38 8
>866b	00					.byte	 0	; $39 9
>866c	00					.byte	 0	; $3a :
>866d	00					.byte	 0	; $3b ;
>866e	02					.byte	 2	; $3c <
>866f	02					.byte	 2	; $3d =
>8670	02					.byte	 2	; $3e >
>8671	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8672					EvaluateExpressionAt0:
.8672	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8674					EvaluateExpression:
.8674	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8676					EvaluateExpressionAtPrecedence:
.8676	48		pha				pha 								; save precedence level
.8677	20 45 89	jsr $8945			jsr 	EvaluateTerm 				; evaluate term into level X.
.867a	68		pla				pla 								; restore precedence level.
.867b					_EXPRLoop:
.867b	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.867d	b1 30		lda ($30),y			lda 	(codePtr),y
.867f	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8681	b0 25		bcs $86a8			bcs 	_EXPRExit
.8683	da		phx				phx 								; read the operator precedence
.8684	aa		tax				tax
.8685	bd 32 86	lda $8632,x			lda 	PrecedenceLevel,x
.8688	fa		plx				plx
.8689	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.868b	f0 1b		beq $86a8			beq 	_EXPRExit
.868d	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.868f	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8691	c5 37		cmp $37				cmp 	zTemp0+1
.8693	b0 13		bcs $86a8			bcs		_EXPRExit 					; if current >= operator exit
.8695	48		pha				pha 								; save current precedence.
.8696	b1 30		lda ($30),y			lda 	(codePtr),y
.8698	c8		iny				iny
.8699	48		pha				pha
.869a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.869c	e8		inx				inx 								; work out the right hand side.
.869d	20 76 86	jsr $8676			jsr 	EvaluateExpressionAtPrecedence
.86a0	ca		dex				dex
.86a1	68		pla				pla 								; get operator, call the code.
.86a2	20 ab 86	jsr $86ab			jsr 	_EXPRCaller
.86a5	68		pla				pla 								; restore precedence level
.86a6	80 d3		bra $867b			bra 	_EXPRLoop 					; and go round.
.86a8					_EXPRExit:
.86a8	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.86aa	60		rts				rts
.86ab					_EXPRCaller:
.86ab	da		phx				phx 								; save on stack, first thing is to restore it
.86ac	0a		asl a				asl 	a 							; double so can use vectors into X
.86ad	aa		tax				tax
.86ae	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.93f7					FloatingPointAdd:
.93f7	20 98 95	jsr $9598			jsr 	FloatPrepare 				; prepare for floats
.93fa	80 0b		bra $9407			bra 	FloatAdd
.93fc					FloatingPointSub:
.93fc	20 98 95	jsr $9598			jsr 	FloatPrepare 				; prepare for floats
.93ff					FloatSubtract:
.93ff	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9402	49 80		eor #$80			eor 	#$80
.9404	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9407					FloatAdd:
.9407	48		pha				pha
.9408	5a		phy				phy
.9409	20 a9 95	jsr $95a9			jsr 	NSNormalise 				; normalise S[X]
.940c	f0 54		beq $9462			beq 	_FAReturn1
.940e	e8		inx				inx 								; normalise S[X+1]
.940f	20 a9 95	jsr $95a9			jsr 	NSNormalise
.9412	ca		dex				dex
.9413	c9 00		cmp #$00			cmp 	#0
.9415	f0 6f		beq $9486			beq 	_FAExit 					; if so, just return A
.9417	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.941a	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.941d	f0 1b		beq $943a			beq 	_FAExponentsEqual
.941f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9422	a8		tay				tay
.9423	38		sec				sec 								; do a signed comparison of the exponents.
.9424	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9427	50 02		bvc $942b			bvc 	_FANoSignedChange
.9429	49 80		eor #$80			eor 	#$80
.942b					_FANoSignedChange:
.942b	29 80		and #$80			and 	#$80
.942d	10 03		bpl $9432			bpl 	_FAHaveMax
.942f	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9432					_FAHaveMax:
.9432	20 89 94	jsr $9489			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9435	e8		inx				inx
.9436	20 89 94	jsr $9489			jsr 	_FAShiftToExponent
.9439	ca		dex				dex
.943a					_FAExponentsEqual:
.943a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.943d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9440	30 10		bmi $9452			bmi 	_FADifferentSigns
.9442	20 60 84	jsr $8460			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9445	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9448	10 3c		bpl $9486			bpl 	_FAExit 					; if no, we are done.
.944a	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.944d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9450	80 34		bra $9486			bra 	_FAExit
.9452					_FADifferentSigns:
.9452	20 86 84	jsr $8486			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9455	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9458	10 2c		bpl $9486			bpl 	_FAExit 					; if no, we are done.
.945a	20 c5 8c	jsr $8cc5			jsr 	NSMNegate 					; netate result
.945d	20 ce 8c	jsr $8cce			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9460	80 24		bra $9486			bra 	_FAExit
.9462					_FAReturn1:
.9462	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9465	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9468	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.946b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.946e	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9471	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9474	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9477	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.947a	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.947d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9480	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9483	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9486					_FAExit:
.9486	7a		ply				ply
.9487	68		pla				pla
.9488	60		rts				rts
.9489					_FAShiftToExponent:
.9489					_FAShiftToExponent2:
.9489	98		tya				tya 								; compare Y to exponent
.948a	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.948d	f0 08		beq $9497			beq 	_FASEExit 					; exit if so.
.948f	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight	 			; shift the mantissa right
.9492	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9495	80 f2		bra $9489			bra 	_FAShiftToExponent2
.9497					_FASEExit:
.9497	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9498					CompareFloat:
.9498	20 ff 93	jsr $93ff			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.949b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.949e	29 f8		and #$f8			and 	#$F8
.94a0	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.94a3	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.94a6	f0 09		beq $94b1			beq 	_FCExit 					; zero, so approximately identical
.94a8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.94aa	3c 00 06	bit $0600,x			bit 	NSStatus,x
.94ad	10 02		bpl $94b1			bpl 	_FCExit
.94af					_FCNegative:
.94af	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.94b1					_FCExit:
.94b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.94b2					FDivideCommand:
.94b2	fa		plx				plx	 								; restore stack position
.94b3	20 98 95	jsr $9598			jsr 	FloatPrepare 				; prepare for floats
.94b6					FloatDivide:
.94b6	48		pha				pha
.94b7	e8		inx				inx
.94b8	20 a9 95	jsr $95a9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94bb	ca		dex				dex
.94bc	c9 00		cmp #$00			cmp 	#0
.94be	f0 20		beq $94e0			beq 	_FDZero
.94c0	20 a9 95	jsr $95a9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94c3	f0 19		beq $94de			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94c5	20 f3 92	jsr $92f3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.94c8	20 80 92	jsr $9280			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.94cb	20 a9 95	jsr $95a9			jsr		NSNormalise 				; renormalise
.94ce	20 8e 93	jsr $938e			jsr 	CalculateSign 				; calculate result sign
.94d1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.94d4	38		sec				sec
.94d5	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.94d8	38		sec				sec
.94d9	e9 1e		sbc #$1e			sbc 	#30
.94db	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94de					_FDExit:
.94de	68		pla				pla
.94df	60		rts				rts
.94e0					_FDZero:
.94e0	a9 03		lda #$03		lda	#3
.94e2	4c 72 82	jmp $8272		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.94e5					FloatFractionalPart:
.94e5	5a		phy				phy
.94e6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.94e9	29 7f		and #$7f			and 	#$7F
.94eb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94ee	20 a9 95	jsr $95a9			jsr 	NSNormalise
.94f1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.94f4	38		sec				sec
.94f5	e9 e0		sbc #$e0			sbc 	#$E0
.94f7	90 31		bcc $952a			bcc 	_FFPExit 					; already fractional
.94f9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.94fb	b0 2a		bcs $9527			bcs 	_FFPZero
.94fd	a8		tay				tay 								; put count to do in Y
.94fe	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9501	20 2c 95	jsr $952c			jsr 	_FFPPartial
.9504	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9507	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.950a	20 2c 95	jsr $952c			jsr 	_FFPPartial
.950d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9510	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9513	20 2c 95	jsr $952c			jsr 	_FFPPartial
.9516	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9519	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.951c	20 2c 95	jsr $952c			jsr 	_FFPPartial
.951f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9522	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; zeroed check.
.9525	d0 03		bne $952a			bne 	_FFPExit
.9527					_FFPZero:
.9527	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.952a					_FFPExit:
.952a	7a		ply				ply
.952b	60		rts				rts
.952c					_FFPPartial:
.952c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.952e	f0 17		beq $9547			beq 	_FFFPPExit
.9530	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9532	b0 0c		bcs $9540			bcs 	_FFFPPWholeByte
.9534	5a		phy				phy
.9535					_FFFPPLeft:
.9535	0a		asl a				asl 	a
.9536	88		dey				dey
.9537	d0 fc		bne $9535			bne 	_FFFPPLeft
.9539	7a		ply				ply
.953a					_FFFPPRight:
.953a	4a		lsr a				lsr 	a
.953b	88		dey				dey
.953c	d0 fc		bne $953a			bne 	_FFFPPRight
.953e	80 07		bra $9547			bra 	_FFFPPExit
.9540					_FFFPPWholeByte:
.9540	98		tya				tya 								; subtract 8 from count
.9541	38		sec				sec
.9542	e9 08		sbc #$08			sbc 	#8
.9544	a8		tay				tay
.9545	a9 00		lda #$00			lda 	#0 							; and clear all
.9547					_FFFPPExit:
.9547	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9548					FloatIntegerPart:
.9548	48		pha				pha
.9549	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.954c	f0 1f		beq $956d			beq 	_FIPExit 					; if so do nothing
.954e	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; is it zero ?
.9551	f0 17		beq $956a			beq 	_FIPZero 					; if so return zero.
.9553	20 a9 95	jsr $95a9			jsr 	NSNormalise 				; normalise
.9556	f0 12		beq $956a			beq 	_FIPZero 					; normalised to zero, exit zero
.9558					_FIPShift:
.9558	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.955b	10 08		bpl $9565			bpl 	_FIPCheckZero
.955d	20 3c 8d	jsr $8d3c			jsr 	NSMShiftRight 				; shift mantissa right
.9560	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9563	80 f3		bra $9558			bra 	_FIPShift
.9565					_FIPCheckZero:
.9565	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; avoid -0 problem
.9568	d0 03		bne $956d			bne 	_FIPExit 					; set to zero if mantissa zero.
.956a					_FIPZero:
.956a	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.956d					_FIPExit:
.956d	68		pla				pla
.956e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.956f					FloatingPointMultiply:
.956f	20 98 95	jsr $9598			jsr 	FloatPrepare 				; prepare for floats
.9572					FloatMultiply:
.9572	48		pha				pha
.9573	20 a9 95	jsr $95a9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9576	f0 1b		beq $9593			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9578	e8		inx				inx
.9579	20 a9 95	jsr $95a9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.957c	ca		dex				dex
.957d	c9 00		cmp #$00			cmp 	#0
.957f	f0 0f		beq $9590			beq 	_FDSetZero
.9581	20 49 93	jsr $9349			jsr 	MultiplyShort 				; calculate the result.
.9584	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9587	18		clc				clc
.9588	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.958b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.958e	80 03		bra $9593			bra 	_FDExit
.9590					_FDSetZero:
.9590	20 19 8d	jsr $8d19			jsr 	NSMSetZero 					; return 0
.9593					_FDExit:
.9593	20 a9 95	jsr $95a9			jsr 	NSNormalise 				; normalise the result
.9596	68		pla				pla
.9597	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9598					FloatPrepare:
.9598	20 84 87	jsr $8784			jsr 	DereferenceTopTwo 			; dereference the top two values
.959b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.959e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95a1	29 10		and #$10			and 	#NSBIsString
.95a3	d0 01		bne $95a6			bne 	_FDType
.95a5	60		rts				rts
.95a6					_FDType:
.95a6	4c 03 97	jmp $9703			jmp 	TypeError
.95a9					NSNormalise:
.95a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.95ac	29 80		and #$80			and 	#$80
.95ae	09 08		ora #$08			ora 	#NSTFloat
.95b0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95b3	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; if zero exit
.95b6	d0 09		bne $95c1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.95b8	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.95bb	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.95be	a9 00		lda #$00			lda 	#0 							; set Z flag
.95c0	60		rts				rts
.95c1					_NSNormaliseOptimise:
.95c1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.95c4	d0 22		bne $95e8			bne 	_NSNormaliseLoop
.95c6	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.95c9	30 1d		bmi $95e8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.95cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95ce	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95d1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95d4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95d7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95da	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.95dd	bd 28 06	lda $0628,x			lda 	NSExponent,x
.95e0	38		sec				sec
.95e1	e9 08		sbc #$08			sbc 	#8
.95e3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95e6	80 d9		bra $95c1			bra 	_NSNormaliseOptimise
.95e8					_NSNormaliseLoop:
.95e8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.95eb	70 08		bvs $95f5			bvs 	_NSNExit 					; exit if so with Z flag clear
.95ed	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; shift mantissa left
.95f0	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.95f3	80 f3		bra $95e8			bra 	_NSNormaliseLoop
.95f5					_NSNExit:
.95f5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.95f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.86b1					AssignNumber:
.86b1	5a		phy				phy
.86b2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86b5	85 36		sta $36				sta 	zTemp0
.86b7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86ba	85 37		sta $37				sta 	zTemp0+1
.86bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86bf	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86c1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86c4	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86c6	c9 08		cmp #$08			cmp 	#NSTFloat
.86c8	f0 2a		beq $86f4			beq 	_ANFloat
.86ca	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86cd	f0 05		beq $86d4			beq		_ANNotFloat
.86cf	e8		inx				inx
.86d0	20 48 95	jsr $9548			jsr 	FloatIntegerPart 			; make it an integer
.86d3	ca		dex				dex
.86d4					_ANNotFloat:
.86d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86d7	29 03		and #$03			and 	#3
.86d9	d0 05		bne $86e0			bne 	_ANByteWord
.86db	20 00 87	jsr $8700			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.86de	80 1e		bra $86fe			bra 	_ANExit
.86e0					_ANByteWord:
.86e0	48		pha				pha 								; save count
.86e1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.86e4	92 36		sta ($36)			sta 	(zTemp0)
.86e6	68		pla				pla
.86e7	c9 01		cmp #$01			cmp	 	#1
.86e9	f0 13		beq $86fe			beq 	_ANExit
.86eb	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.86ee	a0 01		ldy #$01			ldy 	#1
.86f0	91 36		sta ($36),y			sta 	(zTemp0),y
.86f2	80 0a		bra $86fe			bra 	_ANExit
.86f4					_ANFloat:
.86f4	20 00 87	jsr $8700			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.86f7	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.86fa	a0 04		ldy #$04			ldy 	#4
.86fc	91 36		sta ($36),y			sta 	(zTemp0),y
.86fe					_ANExit:
.86fe	7a		ply				ply
.86ff	60		rts				rts
.8700					_ANCopy4PackSign:
.8700	a0 03		ldy #$03			ldy 	#3
.8702	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8705	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8707	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.870a	91 36		sta ($36),y			sta 	(zTemp0),y
.870c	88		dey				dey
.870d	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8710	91 36		sta ($36),y			sta 	(zTemp0),y
.8712	88		dey				dey
.8713	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8716	91 36		sta ($36),y			sta 	(zTemp0),y
.8718	88		dey				dey
.8719	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.871c	91 36		sta ($36),y			sta 	(zTemp0),y
.871e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.871f					AssignString:
.871f	5a		phy				phy
.8720	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8723	85 38		sta $38				sta 	zTemp1
.8725	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8728	85 39		sta $39				sta 	zTemp1+1
.872a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.872d	85 36		sta $36				sta 	zTemp0
.872f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8732	85 37		sta $37				sta 	zTemp0+1
.8734	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8736	b1 36		lda ($36),y			lda 	(zTemp0),y
.8738	f0 23		beq $875d			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.873a	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.873b	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.873d	e9 02		sbc #$02			sbc 	#2
.873f	85 3c		sta $3c				sta 	zsTemp
.8741	a0 01		ldy #$01			ldy 	#1
.8743	b1 36		lda ($36),y			lda 	(zTemp0),y
.8745	e9 00		sbc #$00			sbc 	#0
.8747	85 3d		sta $3d				sta 	zsTemp+1
.8749	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.874b					_ASGetLength:
.874b	c8		iny				iny
.874c	b1 38		lda ($38),y			lda 	(zTemp1),y
.874e	d0 fb		bne $874b			bne 	_ASGetLength
.8750	98		tya				tya 								; is this length <= current length
.8751	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8753	90 20		bcc $8775			bcc 	_ASCopyString
.8755	f0 1e		beq $8775			beq 	_ASCopyString
.8757	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8759	a0 01		ldy #$01			ldy 	#1
.875b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.875d					_ASNewStringRequired:
.875d	e8		inx				inx 								; concrete the new string.
.875e	20 c4 97	jsr $97c4			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8761	ca		dex				dex
.8762	18		clc				clc
.8763	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8766	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8768	92 36		sta ($36)			sta 	(zTemp0)
.876a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.876d	69 00		adc #$00			adc 	#0
.876f	a0 01		ldy #$01			ldy 	#1
.8771	91 36		sta ($36),y			sta 	(zTemp0),y
.8773	80 0d		bra $8782			bra 	_ASExit
.8775					_ASCopyString:
.8775	a0 00		ldy #$00			ldy 	#0
.8777					_ASCopyLoop:
.8777	b1 38		lda ($38),y			lda 	(zTemp1),y
.8779	c8		iny				iny
.877a	c8		iny				iny
.877b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.877d	88		dey				dey
.877e	c9 00		cmp #$00			cmp 	#0
.8780	d0 f5		bne $8777			bne 	_ASCopyLoop
.8782					_ASExit:
.8782	7a		ply				ply
.8783	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8784					DereferenceTopTwo:
.8784	e8		inx				inx
.8785	20 89 87	jsr $8789			jsr 	Dereference 				; deref x+1
.8788	ca		dex				dex  								; falls through to deref x
.8789					Dereference:
.8789	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.878c	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.878e	f0 57		beq $87e7			beq 	_DRFExit 					; not a reference
.8790	5a		phy				phy
.8791	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8794	85 36		sta $36				sta 	zTemp0
.8796	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8799	85 37		sta $37				sta 	zTemp0+1
.879b	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.879e	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.87a0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.87a6	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.87a8	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.87aa	f0 0f		beq $87bb			beq 	_DRFDereferenceTwo
.87ac	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.87ae	f0 39		beq $87e9			beq 	_DRFFull
.87b0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.87b3	29 03		and #$03			and 	#3
.87b5	f0 32		beq $87e9			beq 	_DRFFull 					; the whole word
.87b7	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.87b9	f0 07		beq $87c2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.87bb					_DRFDereferenceTwo:
.87bb	a0 01		ldy #$01			ldy 	#1
.87bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.87bf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87c2					_DRFClear23:
.87c2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87c5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87cb	29 18		and #$18			and 	#NSBTypeMask
.87cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87d0	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87d2	d0 12		bne $87e6			bne 	_DRFNotString
.87d4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87d7	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87da	d0 0a		bne $87e6			bne 	_DRFNotString
.87dc	a9 e8		lda #$e8			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.87de	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.87e1	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.87e3	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.87e6					_DRFNotString
.87e6	7a		ply				ply 								; restore Y and exit
.87e7					_DRFExit:
.87e7	60		rts				rts
.87e8					_DRFNullString:
>87e8	00						.byte 	0
.87e9					_DRFFull:
.87e9	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.87eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.87ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f0	c8		iny				iny
.87f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87f6	c8		iny				iny
.87f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87fc	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.87ff	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8802	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8804	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8807	f0 06		beq $880f			beq 	_DRFNoExponent
.8809	c8		iny				iny 								; if not, read the exponent as well.
.880a	b1 36		lda ($36),y			lda 	(zTemp0),y
.880c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.880f					_DRFNoExponent:
.880f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8812	10 0d		bpl $8821			bpl 	_DRFExit2 					; if not, then exit.
.8814	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8816	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8819	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.881c	09 80		ora #$80			ora 	#NSBIsNegative
.881e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8821					_DRFExit2:
.8821	7a		ply				ply
.8822	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8823					EncodeNumberStart:
.8823	38		sec				sec
.8824	80 01		bra $8827			bra 	EncodeNumberContinue+1
.8826					EncodeNumberContinue:
.8826	18		clc				clc
.8827					EncodeNumber:
.8827	08		php				php 								; save reset.
.8828	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.882a	f0 12		beq $883e			beq 	_ENIsOkay
.882c	c9 30		cmp #$30			cmp 	#"0"
.882e	90 04		bcc $8834			bcc 	_ENBadNumber
.8830	c9 3a		cmp #$3a			cmp 	#"9"+1
.8832	90 0a		bcc $883e			bcc 	_ENIsOkay
.8834					_ENBadNumber:
.8834	28		plp				plp 								; throw saved reset
.8835	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8838	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.883a	f0 7e		beq $88ba			beq 	_ENConstructFinal
.883c					_ENFail:
.883c	18		clc				clc 								; not allowed
.883d	60		rts				rts
.883e					_ENIsOkay:
.883e	28		plp				plp 								; are we restarting
.883f	90 15		bcc $8856			bcc 	_ENNoRestart
.8841					_ENStartEncode:
.8841	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8843	f0 0c		beq $8851			beq 	_ENFirstDP
.8845	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8847	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.884a	a9 01		lda #$01			lda 	#ESTA_Low
.884c					_ENExitChange:
.884c	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.884f	38		sec				sec
.8850	60		rts				rts
.8851					_ENFirstDP:
.8851	20 19 8d	jsr $8d19			jsr 	NSMSetZero 					; clear integer part
.8854	80 3f		bra $8895			bra 	_ESTASwitchFloat			; go straight to float and exi
.8856					_ENNoRestart:
.8856	48		pha				pha 								; save on stack.
.8857	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.885a	c9 01		cmp #$01			cmp 	#ESTA_Low
.885c	f0 09		beq $8867			beq  	_ESTALowState
.885e	c9 02		cmp #$02			cmp 	#ESTA_High
.8860	f0 29		beq $888b			beq 	_ESTAHighState
.8862	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8864	f0 3b		beq $88a1			beq 	_ESTADecimalState
>8866	db						.byte 	$DB 						; causes a break in the emulator
.8867					_ESTALowState:
.8867	68		pla				pla 								; get value back
.8868	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.886a	f0 29		beq $8895			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.886c	29 0f		and #$0f			and 	#15 						; make digit
.886e	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8871	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8874	0a		asl a				asl 	a
.8875	0a		asl a				asl 	a
.8876	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8879	0a		asl a				asl 	a
.887a	6d 06 07	adc $0706			adc 	DigitTemp
.887d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8880	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8882	90 05		bcc $8889			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8884	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8886	8d 05 07	sta $0705			sta 	EncodeState
.8889					_ESTANoSwitch:
.8889	38		sec				sec
.888a	60		rts				rts
.888b					_ESTAHighState:
.888b	68		pla				pla 								; get value back
.888c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.888e	f0 05		beq $8895			beq 	_ESTASwitchFloat
.8890	20 f4 88	jsr $88f4			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8893	38		sec				sec
.8894	60		rts				rts
.8895					_ESTASwitchFloat:
.8895	9c 07 07	stz $0707			stz 	DecimalCount
.8898	e8		inx				inx 								; zero the decimal additive.
.8899	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.889c	ca		dex				dex
.889d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.889f	80 ab		bra $884c			bra 	_ENExitChange
.88a1					_ESTADecimalState:
.88a1	68		pla				pla 								; digit.
.88a2	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.88a4	f0 96		beq $883c			beq 	_ENFail
.88a6	e8		inx				inx 								; put digit into fractional part of X+1
.88a7	20 f4 88	jsr $88f4			jsr 	ESTAShiftDigitIntoMantissa
.88aa	ca		dex				dex
.88ab	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.88ae	ad 07 07	lda $0707			lda 	DecimalCount
.88b1	c9 0b		cmp #$0b			cmp 	#11
.88b3	f0 02		beq $88b7			beq 	_ESTADSFail
.88b5	38		sec				sec
.88b6	60		rts				rts
.88b7					_ESTADSFail:
.88b7	4c fe 96	jmp $96fe			jmp 	RangeError
.88ba					_ENConstructFinal:
.88ba	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88bd	f0 33		beq $88f2			beq 	_ENCFExit 					; no decimals
.88bf	5a		phy				phy
.88c0	0a		asl a				asl 	a 							; x 4 and CLC
.88c1	0a		asl a				asl 	a
.88c2	6d 07 07	adc $0707			adc 	DecimalCount
.88c5	a8		tay				tay
.88c6	b9 bd 96	lda $96bd,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88c9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88cc	b9 be 96	lda $96be,y			lda 	DecimalScalarTable-5+1,y
.88cf	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88d2	b9 bf 96	lda $96bf,y			lda 	DecimalScalarTable-5+2,y
.88d5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88d8	b9 c0 96	lda $96c0,y			lda 	DecimalScalarTable-5+3,y
.88db	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.88de	b9 c1 96	lda $96c1,y			lda 	DecimalScalarTable-5+4,y
.88e1	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.88e4	a9 08		lda #$08			lda 	#NSTFloat
.88e6	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.88e9	7a		ply				ply
.88ea	e8		inx				inx 								; multiply decimal const by decimal scalar
.88eb	20 72 95	jsr $9572			jsr 	FloatMultiply
.88ee	ca		dex				dex
.88ef	20 07 94	jsr $9407			jsr 	FloatAdd 					; add to integer part.
.88f2					_ENCFExit:
.88f2	18		clc				clc 								; reject the digit.
.88f3	60		rts				rts
.88f4					ESTAShiftDigitIntoMantissa:
.88f4	29 0f		and #$0f			and 	#15 						; save digit
.88f6	48		pha				pha
.88f7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.88fa	48		pha				pha
.88fb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.88fe	48		pha				pha
.88ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8902	48		pha				pha
.8903	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8906	48		pha				pha
.8907	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 2
.890a	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 4
.890d	18		clc				clc 								; pop mantissa and add
.890e	68		pla				pla
.890f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8912	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8915	68		pla				pla
.8916	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8919	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.891c	68		pla				pla
.891d	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8920	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8923	68		pla				pla
.8924	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8927	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.892a	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 10
.892d	68		pla				pla 								; add digit
.892e	18		clc				clc
.892f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8932	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8935	90 0d		bcc $8944			bcc 	_ESTASDExit
.8937	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.893a	d0 08		bne $8944			bne 	_ESTASDExit
.893c	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.893f	d0 03		bne $8944			bne 	_ESTASDExit
.8941	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8944					_ESTASDExit:
.8944	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8945					EvaluateTerm:
.8945	b1 30		lda ($30),y			lda 	(codePtr),y
.8947	30 18		bmi $8961			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8949	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.894b	b0 6f		bcs $89bc			bcs 	_ETVariable
.894d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.894f	90 6e		bcc $89bf			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8951	c9 3a		cmp #$3a			cmp 	#'9'+1
.8953	b0 6a		bcs $89bf			bcs 	_ETPuncUnary
.8955	20 23 88	jsr $8823			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8958					_ETNumber:
.8958	c8		iny				iny 								; keep encoding until we have the numbers
.8959	b1 30		lda ($30),y			lda 	(codePtr),y
.895b	20 26 88	jsr $8826			jsr 	EncodeNumberContinue
.895e	b0 f8		bcs $8958			bcs 	_ETNumber 					; go back if accepted.
.8960	60		rts				rts
.8961					_ETCheckUnary:
.8961	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8963	f0 41		beq $89a6			beq 	_ETString
.8965	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8967	f0 12		beq $897b			beq 	_ETHexConstant
.8969	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.896b	90 0b		bcc $8978			bcc 	_ETSyntaxError
.896d	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.896f	b0 07		bcs $8978			bcs 	_ETSyntaxError
.8971	da		phx				phx 								; push X on the stack
.8972	0a		asl a				asl 	a 							; put vector x 2 into X
.8973	aa		tax				tax
.8974	c8		iny				iny 								; consume unary function token
.8975	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8978					_ETSyntaxError:
.8978	4c f9 96	jmp $96f9			jmp 	SyntaxError
.897b					_ETHexConstant:
.897b	c8		iny				iny 								; skip #
.897c	c8		iny				iny 								; skip count
.897d	20 19 8d	jsr $8d19			jsr 	NSMSetZero 					; clear result
.8980					_ETHLoop:
.8980	b1 30		lda ($30),y			lda 	(codePtr),y
.8982	c8		iny				iny 								; and consume
.8983	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8985	f0 1e		beq $89a5			beq 	_ETHExit
.8987	48		pha				pha 								; save on stack.
.8988	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 2
.898b	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 4
.898e	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 8
.8991	20 2e 8d	jsr $8d2e			jsr 	NSMShiftLeft 				; x 16
.8994	68		pla				pla 								; ASCII
.8995	c9 41		cmp #$41			cmp 	#'A'
.8997	90 02		bcc $899b			bcc 	_ETHNotChar
.8999	e9 07		sbc #$07			sbc 	#7
.899b					_ETHNotChar:
.899b	29 0f		and #$0f			and 	#15 						; digit now
.899d	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.89a0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89a3	80 db		bra $8980			bra 	_ETHLoop 					; go round.
.89a5					_ETHExit:
.89a5	60		rts				rts
.89a6					_ETString:
.89a6	c8		iny				iny 								; look at length
.89a7	b1 30		lda ($30),y			lda 	(codePtr),y
.89a9	48		pha				pha
.89aa	c8		iny				iny 								; first character
.89ab	20 f9 91	jsr $91f9			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.89ae	68		pla				pla 								; restore count and save
.89af	85 36		sta $36				sta 	zTemp0
.89b1	98		tya				tya 								; add length to Y to skip it.
.89b2	18		clc				clc
.89b3	65 36		adc $36				adc 	zTemp0
.89b5	a8		tay				tay
.89b6	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.89b8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89bb	60		rts				rts
.89bc					_ETVariable:
.89bc	4c 16 8a	jmp $8a16			jmp 	VariableHandler
.89bf					_ETPuncUnary:
.89bf	c8		iny				iny 								; consume the unary character
.89c0	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89c2	f0 2d		beq $89f1			beq 	_ETUnaryNegate
.89c4	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89c6	f0 39		beq $8a01			beq 	_ETDereference
.89c8	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89ca	f0 43		beq $8a0f			beq 	_ETParenthesis
.89cc	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89ce	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89d0	f0 06		beq $89d8			beq 	_ETIndirection
.89d2	e6 36		inc $36				inc 	zTemp0
.89d4	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89d6	d0 a0		bne $8978			bne 	_ETSyntaxError
.89d8					_ETIndirection:
.89d8	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.89da	1a		inc a				inc 	a
.89db	48		pha				pha
.89dc	20 45 89	jsr $8945			jsr 	EvaluateTerm				; evaluate the term
.89df	20 89 87	jsr $8789			jsr 	Dereference 				; dereference it.
.89e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.89e5	d0 07		bne $89ee			bne 	_ETTypeMismatch
.89e7	68		pla				pla 								; indirection 1-2
.89e8	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.89ea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89ed	60		rts				rts
.89ee					_ETTypeMismatch:
.89ee	4c 03 97	jmp $9703			jmp 	TypeError
.89f1					_ETUnaryNegate:
.89f1	20 45 89	jsr $8945			jsr 	EvaluateTerm				; evaluate the term
.89f4	20 89 87	jsr $8789			jsr 	Dereference 				; dereference it.
.89f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.89fa	29 10		and #$10			and 	#NSTString
.89fc	d0 f0		bne $89ee			bne 	_ETTypeMismatch
.89fe	4c c5 8c	jmp $8cc5			jmp 	NSMNegate  					; just toggles the sign bit.
.8a01					_ETDereference:
.8a01	20 45 89	jsr $8945			jsr 	EvaluateTerm				; evaluate the term
.8a04	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8a07	29 20		and #$20			and 	#NSBIsReference
.8a09	f0 e3		beq $89ee			beq 	_ETTypeMismatch
.8a0b	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8a0e	60		rts				rts
.8a0f					_ETParenthesis:
.8a0f	20 74 86	jsr $8674			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a12	20 40 92	jsr $9240			jsr 	CheckRightBracket 			; check for )
.8a15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a16					VariableHandler:
.8a16	b1 30		lda ($30),y			lda 	(codePtr),y
.8a18	18		clc				clc
.8a19	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a1b	85 37		sta $37				sta 	zTemp0+1
.8a1d	c8		iny				iny
.8a1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a20	85 36		sta $36				sta 	zTemp0
.8a22	c8		iny				iny
.8a23	18		clc				clc									; copy variable address+3 to mantissa
.8a24	69 03		adc #$03			adc 	#3
.8a26	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a29	a5 37		lda $37				lda 	zTemp0+1
.8a2b	69 00		adc #$00			adc 	#0
.8a2d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a30	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a33	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a36	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a39	5a		phy				phy
.8a3a	a0 02		ldy #$02			ldy 	#2 							; read type
.8a3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a3e	7a		ply				ply
.8a3f	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a41	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a43	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a46	29 04		and #$04			and 	#NSBIsArray
.8a48	d0 01		bne $8a4b			bne 	_VHArray
.8a4a	60		rts				rts
.8a4b					_VHArray:
>8a4b	db						.byte 	$DB 						; causes a break in the emulator
.8a4c	80 fd		bra $8a4b			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.95f8					AbsUnary:
.95f8	fa		plx				plx 								; restore stack pos
.95f9	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber 				; get a float or int
.95fc	20 40 92	jsr $9240			jsr 	CheckRightBracket
.95ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9602	29 7f		and #$7f			and 	#$7F
.9604	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9607	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a4e					AllocUnary:
.8a4e	fa		plx				plx 								; restore stack pos
.8a4f	20 a5 8c	jsr $8ca5			jsr 	Evaluate16BitInteger		; get bytes required.
.8a52	20 40 92	jsr $9240			jsr 	CheckRightBracket
.8a55	da		phx				phx 								; save X/Y
.8a56	5a		phy				phy
.8a57	8a		txa				txa 								; copy X into Y
.8a58	a8		tay				tay
.8a59	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a5c	aa		tax				tax
.8a5d	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a60	20 6d 8a	jsr $8a6d			jsr 	AllocateXABytes 			; allocate memory
.8a63	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a66	8a		txa				txa
.8a67	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a6a	7a		ply				ply
.8a6b	fa		plx				plx
.8a6c	60		rts				rts
.8a6d					AllocateXABytes:
.8a6d	5a		phy				phy
.8a6e	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a71	5a		phy				phy
.8a72	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a75	5a		phy				phy
.8a76	18		clc				clc
.8a77	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a7a	8d 0c 07	sta $070c			sta 	lowMemPtr
.8a7d	8a		txa				txa
.8a7e	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8a81	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8a84	fa		plx				plx
.8a85	68		pla				pla
.8a86	7a		ply				ply
.8a87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9608					AscUnary:
.9608	fa		plx				plx 								; restore stack pos
.9609	20 78 8c	jsr $8c78			jsr 	EvaluateString 				; get a string
.960c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.960e	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.9611	20 40 92	jsr $9240			jsr 	CheckRightBracket
.9614	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9615					FracUnary:
.9615	fa		plx				plx 								; restore stack pos
.9616	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber 				; get a float or int
.9619	20 40 92	jsr $9240			jsr 	CheckRightBracket
.961c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.961f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9621	f0 04		beq $9627			beq 	_IUZero
.9623	20 e5 94	jsr $94e5			jsr 	FloatFractionalPart
.9626	60		rts				rts
.9627					_IUZero:
.9627	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.962a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.962b					IntUnary:
.962b	fa		plx				plx 								; restore stack pos
.962c	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber 				; get a float or int
.962f	20 40 92	jsr $9240			jsr 	CheckRightBracket
.9632	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9635	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9637	f0 03		beq $963c			beq 	_IUExit
.9639	20 48 95	jsr $9548			jsr 	FloatIntegerPart
.963c					_IUExit:
.963c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.963d					LenUnary:
.963d	fa		plx				plx 								; restore stack pos
.963e	20 78 8c	jsr $8c78			jsr 	EvaluateString 				; get a string
.9641	5a		phy				phy
.9642	a0 00		ldy #$00			ldy 	#0 							; find length
.9644					_LenFind:
.9644	b1 36		lda ($36),y			lda 	(zTemp0),y
.9646	f0 06		beq $964e			beq 	_LenExit
.9648	c8		iny				iny
.9649	d0 f9		bne $9644			bne 	_LenFind
.964b	4c fe 96	jmp $96fe			jmp 	RangeError 					; string > 255
.964e					_LenExit:
.964e	98		tya				tya
.964f	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.9652	7a		ply				ply
.9653	20 40 92	jsr $9240			jsr 	CheckRightBracket
.9656	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8a88					Unary_Not:
.8a88	fa		plx				plx
.8a89	20 90 8c	jsr $8c90			jsr 	EvaluateInteger 			; get integer
.8a8c	20 40 92	jsr $9240			jsr 	CheckRightBracket
.8a8f	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; zero mantissa ?
.8a92	f0 04		beq $8a98			beq 	_NotZero
.8a94	20 19 8d	jsr $8d19			jsr 	NSMSetZero
.8a97	60		rts				rts
.8a98					_NotZero:
.8a98	4c d8 82	jmp $82d8			jmp 	ReturnTrue
.8a9b					_UNBad:
.8a9b	4c 08 97	jmp $9708			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8a9e					Unary_Rnd:
.8a9e	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber 				; number to use.
.8aa1	20 40 92	jsr $9240			jsr 	CheckRightBracket 			; closing bracket
.8aa4	20 cd 8a	jsr $8acd			jsr 	Random32Bit 				; generate a number.
.8aa7	ad 08 07	lda $0708			lda 	RandomSeed+0
.8aaa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8aad	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ab0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ab3	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8ab6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ab9	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8abc	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8abe	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ac1	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ac3	8d 28 06	sta $0628			sta 	NSExponent
.8ac6	a9 08		lda #$08			lda 	#NSTFloat
.8ac8	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8acb	db						.byte 	$DB 						; causes a break in the emulator
.8acc	60		rts				rts
.8acd					Random32Bit:
.8acd	5a		phy				phy
.8ace	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8ad0	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ad3	d0 03		bne $8ad8			bne 	_Random1
.8ad5	a8		tay				tay 								; if so do it 256 times
.8ad6	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8ad8					_Random1:
.8ad8	0a		asl a				asl 	a 							; LSFR RNG
.8ad9	2e 09 07	rol $0709			rol 	RandomSeed+1
.8adc	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8adf	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8ae2	90 02		bcc $8ae6			bcc 	_Random2
.8ae4	49 c5		eor #$c5			eor 	#$C5
.8ae6					_Random2:
.8ae6	88		dey				dey
.8ae7	d0 ef		bne $8ad8			bne 	_Random1
.8ae9	7a		ply				ply
.8aea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9657					SgnUnary:
.9657	fa		plx				plx 								; restore stack pos
.9658	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber 				; get a float or int
.965b	20 40 92	jsr $9240			jsr 	CheckRightBracket
.965e	20 49 8d	jsr $8d49			jsr 	NSMIsZero 					; if zero
.9661	f0 10		beq $9673			beq 	_SGZero  					; return Int Zero
.9663	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9666	48		pha				pha
.9667	a9 01		lda #$01			lda 	#1 							; set to 1
.9669	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.966c	68		pla				pla
.966d	29 80		and #$80			and		#$80 						; copy the sign byte out
.966f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9672	60		rts				rts
.9673	20 19 8d	jsr $8d19	_SGZero:jsr 	NSMSetZero
.9676	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9677					ValUnary:
.9677	fa		plx				plx 								; restore stack pos
.9678	20 8d 96	jsr $968d			jsr 	ValMainCode 				; do the main val() code
.967b	b0 01		bcs $967e			bcs 	_VUError 					; couldn't convert
.967d	60		rts				rts
.967e					_VUError:
.967e	4c 03 97	jmp $9703			jmp 	TypeError
.9681					IsValUnary:
.9681	fa		plx				plx 								; restore stack pos
.9682	20 8d 96	jsr $968d			jsr 	ValMainCode 				; do the main val() code
.9685	b0 03		bcs $968a			bcs 	_VUBad
.9687	4c d8 82	jmp $82d8			jmp 	ReturnTrue
.968a					_VUBad:
.968a	4c e4 82	jmp $82e4			jmp 	ReturnFalse
.968d					ValMainCode:
.968d	20 78 8c	jsr $8c78			jsr 	EvaluateString 				; get a string
.9690	20 40 92	jsr $9240			jsr 	CheckRightBracket 			; check right bracket present
.9693	5a		phy				phy
.9694	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9696	f0 17		beq $96af			beq 	_VMCFail2
.9698	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.969a	48		pha				pha 								; save first character
.969b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.969d	d0 01		bne $96a0			bne 	_VMCStart
.969f	c8		iny				iny 								; skip over -
.96a0					_VMCStart:
.96a0	38		sec				sec 								; initialise first time round.
.96a1					_VMCNext:
.96a1	c8		iny				iny 								; pre-increment
.96a2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.96a4	f0 0c		beq $96b2			beq 	_VMCSuccess 				; successful.
.96a6	20 27 88	jsr $8827			jsr 	EncodeNumber 				; send it to the number-builder
.96a9	90 03		bcc $96ae			bcc 	_VMCFail 					; if failed, give up.
.96ab	18		clc				clc 								; next time round, countinue
.96ac	80 f3		bra $96a1			bra 	_VMCNext
.96ae					_VMCFail:
.96ae	68		pla				pla
.96af					_VMCFail2:
.96af	7a		ply				ply
.96b0	38		sec				sec
.96b1	60		rts				rts
.96b2					_VMCSuccess:
.96b2	a9 00		lda #$00			lda 	#0 							; construct final
.96b4	20 27 88	jsr $8827			jsr 	EncodeNumber
.96b7	68		pla				pla
.96b8	c9 2d		cmp #$2d			cmp 	#"-"
.96ba	d0 03		bne $96bf			bne 	_VMCNotNegative
.96bc	20 c5 8c	jsr $8cc5			jsr		NSMNegate
.96bf					_VMCNotNegative:
.96bf	7a		ply				ply
.96c0	18		clc				clc
.96c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8aeb					ChrUnary:
.8aeb	fa		plx				plx 								; restore stack pos
.8aec	20 b1 8c	jsr $8cb1			jsr 	Evaluate8BitInteger			; get value
.8aef	48		pha				pha
.8af0	20 40 92	jsr $9240			jsr 	CheckRightBracket
.8af3	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8af5	20 3f 98	jsr $983f			jsr 	StringTempAllocate
.8af8	68		pla				pla 								; write number to it
.8af9	20 7d 98	jsr $987d			jsr 	StringTempWrite
.8afc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8afd					SpcUnary:
.8afd	fa		plx				plx 								; restore stack pos
.8afe	20 b1 8c	jsr $8cb1			jsr 	Evaluate8BitInteger			; get value
.8b01	5a		phy				phy
.8b02	48		pha				pha 								; save count
.8b03	20 3f 98	jsr $983f			jsr 	StringTempAllocate
.8b06	7a		ply				ply 								; to do count in Y
.8b07					_SpcLoop:
.8b07	c0 00		cpy #$00			cpy 	#0
.8b09	f0 08		beq $8b13			beq 	_SpcExit
.8b0b	a9 20		lda #$20			lda 	#32
.8b0d	20 7d 98	jsr $987d			jsr 	StringTempWrite
.8b10	88		dey				dey
.8b11	80 f4		bra $8b07			bra 	_SPCLoop
.8b13					_SpcExit:
.8b13	7a		ply				ply
.8b14	20 40 92	jsr $9240			jsr 	CheckRightBracket
.8b17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b18					Unary_Str:
.8b18	fa		plx				plx
.8b19	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber  			; get number
.8b1c	20 40 92	jsr $9240			jsr 	CheckRightBracket 			; closing bracket
.8b1f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b21	20 3a 8b	jsr $8b3a			jsr 	ConvertNumberToString 		; do the conversion.
.8b24	a9 21		lda #$21			lda		#33 						; create buffer
.8b26	20 3f 98	jsr $983f			jsr 	StringTempAllocate 			; allocate memory
.8b29	da		phx				phx
.8b2a	a2 00		ldx #$00			ldx 	#0
.8b2c					_USCopy:
.8b2c	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b2f	20 7d 98	jsr $987d			jsr 	StringTempWrite
.8b32	e8		inx				inx
.8b33	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b36	d0 f4		bne $8b2c			bne 	_USCopy
.8b38	fa		plx				plx
.8b39	60		rts				rts
.8b3a					ConvertNumberToString:
.8b3a	5a		phy				phy 								; save code position
.8b3b	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b3e	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b41	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b44	10 0a		bpl $8b50			bpl 	_CNTSNotNegative
.8b46	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b48	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b4b	a9 2d		lda #$2d			lda 	#"-"
.8b4d	20 b6 8b	jsr $8bb6			jsr 	WriteDecimalBuffer
.8b50					_CNTSNotNegative:
.8b50	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b53	f0 15		beq $8b6a			beq 	_CNTSNotFloat
.8b55	e8		inx				inx 								; round up
.8b56	a9 01		lda #$01			lda 	#1
.8b58	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.8b5b	ca		dex				dex
.8b5c	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b5f	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b62	a9 08		lda #$08			lda 	#NSTFloat
.8b64	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b67	20 07 94	jsr $9407			jsr 	FloatAdd
.8b6a					_CNTSNotFloat:
.8b6a	20 98 8b	jsr $8b98			jsr 	MakePlusTwoString
.8b6d	20 e5 94	jsr $94e5			jsr 	FloatFractionalPart 		; get the fractional part
.8b70	20 a9 95	jsr $95a9			jsr 	NSNormalise					; normalise , exit if zero
.8b73	f0 21		beq $8b96			beq 	_CNTSExit
.8b75	a9 2e		lda #$2e			lda 	#"."
.8b77	20 b6 8b	jsr $8bb6			jsr 	WriteDecimalBuffer 			; write decimal place
.8b7a					_CNTSDecimal:
.8b7a	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8b7d	30 17		bmi $8b96			bmi 	_CNTSExit
.8b7f	e8		inx				inx 								; x 10.0
.8b80	a9 0a		lda #$0a			lda 	#10
.8b82	20 1b 8d	jsr $8d1b			jsr 	NSMSetByte
.8b85	a9 08		lda #$08			lda 	#NSTFloat
.8b87	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b8a	ca		dex				dex
.8b8b	20 72 95	jsr $9572			jsr 	FloatMultiply
.8b8e	20 98 8b	jsr $8b98			jsr 	MakePlusTwoString
.8b91	20 e5 94	jsr $94e5			jsr 	FloatFractionalPart 		; get the fractional part
.8b94	80 e4		bra $8b7a			bra 	_CNTSDecimal 				; keep going.
.8b96					_CNTSExit:
.8b96	7a		ply				ply
.8b97	60		rts				rts
.8b98					MakePlusTwoString:
.8b98	da		phx				phx
.8b99	20 f0 8c	jsr $8cf0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8b9c	e8		inx				inx 								; access it
.8b9d	e8		inx				inx
.8b9e	20 48 95	jsr $9548			jsr 	FloatIntegerPart 			; make it an integer
.8ba1	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8ba3	20 b1 93	jsr $93b1			jsr 	ConvertInt32
.8ba6	a2 00		ldx #$00			ldx	 	#0
.8ba8					_MPTSCopy:
.8ba8	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bab	20 b6 8b	jsr $8bb6			jsr 	WriteDecimalBuffer
.8bae	e8		inx				inx
.8baf	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bb2	d0 f4		bne $8ba8			bne 	_MPTSCopy
.8bb4	fa		plx				plx
.8bb5	60		rts				rts
.8bb6					WriteDecimalBuffer:
.8bb6	da		phx				phx
.8bb7	ae 14 07	ldx $0714			ldx 	dbOffset
.8bba	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8bbd	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8bc0	ee 14 07	inc $0714			inc 	dbOffset
.8bc3	fa		plx				plx
.8bc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8bc5					Unary_Left:
.8bc5	fa		plx				plx
.8bc6	18		clc				clc 								; only one parameter
.8bc7	20 3c 8c	jsr $8c3c			jsr 	SubstringInitial 			; set up.
.8bca	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bcd	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bd0	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bd3	80 2c		bra $8c01			bra 	SubstringMain
.8bd5					Unary_Right:
.8bd5	fa		plx				plx
.8bd6	18		clc				clc 								; only one parameter
.8bd7	20 3c 8c	jsr $8c3c			jsr 	SubstringInitial 			; set up.
.8bda	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8bdd	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8be0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8be3	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8be6	b0 02		bcs $8bea			bcs 	_URNotUnderflow
.8be8	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8bea					_URNotUnderFlow:
.8bea	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8bed	80 12		bra $8c01			bra 	SubStringMain
.8bef					Unary_Mid:
.8bef	fa		plx				plx
.8bf0	38		sec				sec 								; two parameters
.8bf1	20 3c 8c	jsr $8c3c			jsr 	SubstringInitial 			; set up.
.8bf4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8bf7	f0 05		beq $8bfe			beq 	_UMError
.8bf9	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8bfc	80 03		bra $8c01			bra 	SubStringMain
.8bfe					_UMError:
.8bfe	4c 08 97	jmp $9708			jmp 	ArgumentError
.8c01					SubStringMain:
.8c01	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8c04	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8c07	b0 2d		bcs $8c36			bcs 	_SSMNull 					; if so, return an empty string.
.8c09	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8c0c	f0 28		beq $8c36			beq 	_SSMNull 					; return empty string.
.8c0e	18		clc				clc 								; add the offset +1 to the address and
.8c0f	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c12	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c15	85 36		sta $36				sta 	zTemp0
.8c17	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c1a	69 00		adc #$00			adc 	#0
.8c1c	85 37		sta $37				sta 	zTemp0+1
.8c1e					_SSMNoCarry:
.8c1e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c21	20 3f 98	jsr $983f			jsr 	StringTempAllocate 			; allocate that many characters
.8c24	5a		phy				phy 								; save Y
.8c25	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c27					_SSMCopy:
.8c27	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c29	f0 09		beq $8c34			beq 	_SSMEString 				; no more to copy
.8c2b	20 7d 98	jsr $987d			jsr 	StringTempWrite 			; and write it out.
.8c2e	c8		iny				iny
.8c2f	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c32	d0 f3		bne $8c27			bne 	_SSMCopy
.8c34					_SSMEString:
.8c34	7a		ply				ply
.8c35					_SSMExit:
.8c35	60		rts				rts
.8c36					_SSMNull:
.8c36	a9 00		lda #$00			lda 	#0
.8c38	20 3f 98	jsr $983f			jsr 	StringTempAllocate
.8c3b	60		rts				rts
.8c3c					SubstringInitial:
.8c3c	da		phx				phx 								; save initial stack position
.8c3d	08		php				php 								; save carry on stack indicating 2 parameters
.8c3e	20 78 8c	jsr $8c78			jsr 	EvaluateString 				; get a string
.8c41	5a		phy				phy 								; calculate length to exponent.
.8c42	a0 ff		ldy #$ff			ldy 	#$FF
.8c44					_SIFindLength:
.8c44	c8		iny				iny
.8c45	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c47	d0 fb		bne $8c44			bne 	_SIFindLength
.8c49	98		tya				tya
.8c4a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c4d	7a		ply				ply
.8c4e	e8		inx				inx
.8c4f	20 48 92	jsr $9248			jsr 	CheckComma 					; comma next
.8c52	20 b1 8c	jsr $8cb1			jsr 	Evaluate8BitInteger 		; get next parameter
.8c55	28		plp				plp 								; is it the last parameter ?
.8c56	90 07		bcc $8c5f			bcc 	_SSIExit 					; if so, exit.
.8c58	e8		inx				inx
.8c59	20 48 92	jsr $9248			jsr 	CheckComma 					; comma next
.8c5c	20 b1 8c	jsr $8cb1			jsr 	Evaluate8BitInteger 		; get last parameter
.8c5f					_SSIExit:
.8c5f	fa		plx				plx
.8c60	20 40 92	jsr $9240			jsr 	CheckRightBracket 			; check closing bracket
.8c63	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c64					EvaluateValue:
.8c64	48		pha				pha
.8c65	20 74 86	jsr $8674			jsr		EvaluateExpression 			; expression
.8c68	20 89 87	jsr $8789			jsr 	Dereference					; derefernce it
.8c6b	68		pla				pla
.8c6c	60		rts				rts
.8c6d					EvaluateNumber:
.8c6d	20 64 8c	jsr $8c64			jsr 	EvaluateValue 				; get a value
.8c70	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c73	29 10		and #$10			and 	#NSBIsString
.8c75	d0 16		bne $8c8d			bne 	HelperTypeError
.8c77	60		rts				rts
.8c78					EvaluateString:
.8c78	20 64 8c	jsr $8c64			jsr 	EvaluateValue 				; get a value
.8c7b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c7e	29 10		and #$10			and 	#NSBIsString
.8c80	f0 0b		beq $8c8d			beq 	HelperTypeError
.8c82					CopyAddressToTemp0:
.8c82	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8c85	85 36		sta $36				sta 	zTemp0
.8c87	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c8a	85 37		sta $37				sta 	zTemp0+1
.8c8c	60		rts				rts
.8c8d					HelperTypeError:
.8c8d	4c 03 97	jmp $9703			jmp 	TypeError
.8c90					EvaluateInteger:
.8c90	20 6d 8c	jsr $8c6d			jsr 	EvaluateNumber
.8c93	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8c96	d0 0a		bne $8ca2			bne 	HelperValueError 			; if not, it's a float.
.8c98	60		rts				rts
.8c99					EvaluateUnsignedInteger:
.8c99	20 90 8c	jsr $8c90			jsr 	EvaluateInteger 			; check integer is +ve
.8c9c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c9f	30 01		bmi $8ca2			bmi 	HelperValueError
.8ca1	60		rts				rts
.8ca2					HelperValueError:
.8ca2	4c 08 97	jmp $9708			jmp 	ArgumentError
.8ca5					Evaluate16BitInteger:
.8ca5	20 99 8c	jsr $8c99			jsr	 	EvaluateUnsignedInteger		; get integer
.8ca8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8cab	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8cae	d0 f2		bne $8ca2			bne 	HelperValueError
.8cb0	60		rts				rts
.8cb1					Evaluate8BitInteger:
.8cb1	20 99 8c	jsr $8c99			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8cb4	d0 ec		bne $8ca2			bne 	HelperValueError
.8cb6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8cb9	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8cbc	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8cbf	d0 e1		bne $8ca2			bne 	HelperValueError
.8cc1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8cc5					NSMNegate:
.8cc5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cc8	49 80		eor #$80			eor 	#NSBIsNegative
.8cca	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ccd	60		rts				rts
.8cce					NSMNegateMantissa:
.8cce	38		sec				sec
.8ccf	a9 00		lda #$00			lda 	#0
.8cd1	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cd4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cd7	a9 00		lda #$00			lda 	#0
.8cd9	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8cdc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cdf	a9 00		lda #$00			lda 	#0
.8ce1	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8ce4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ce7	a9 00		lda #$00			lda 	#0
.8ce9	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8cec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cef	60		rts				rts
.8cf0					NSMShiftUpTwo:
.8cf0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cf3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8cf6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cf9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8cfc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8cff	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8d02	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d05	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8d08	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8d0b	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8d0e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d11	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d14	60		rts				rts
.8d15					NSMSetZeroMantissaOnly:
.8d15	a9 00		lda #$00			lda 	#0
.8d17	80 08		bra $8d21			bra 	NSMSetMantissa
.8d19					NSMSetZero:
.8d19	a9 00		lda #$00			lda 	#0
.8d1b					NSMSetByte:
.8d1b	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d1e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d21					NSMSetMantissa:
.8d21	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d24	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d27	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d2a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d2d	60		rts				rts
.8d2e					NSMShiftLeft:
.8d2e	18		clc				clc
.8d2f					NSMRotateLeft:
.8d2f	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d32	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d35	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d38	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d3b	60		rts				rts
.8d3c					NSMShiftRight:
.8d3c	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d3f	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d42	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d45	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d48	60		rts				rts
.8d49					NSMIsZero:
.8d49	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d4c	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d4f	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d52	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.96c2					DecimalScalarTable:
>96c2	66 66 66 66				.dword $66666666 ; 0.1
>96c6	de					.byte $de
>96c7	1f 85 eb 51				.dword $51eb851f ; 0.01
>96cb	db					.byte $db
>96cc	4c 37 89 41				.dword $4189374c ; 0.001
>96d0	d8					.byte $d8
>96d1	ac 8b db 68				.dword $68db8bac ; 0.0001
>96d5	d4					.byte $d4
>96d6	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>96da	d1					.byte $d1
>96db	83 de 1b 43				.dword $431bde83 ; 1e-06
>96df	ce					.byte $ce
>96e0	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>96e4	ca					.byte $ca
>96e5	89 3b e6 55				.dword $55e63b89 ; 1e-08
>96e9	c7					.byte $c7
>96ea	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>96ee	c4					.byte $c4
>96ef	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>96f3	c0					.byte $c0
>96f4	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>96f8	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.96f9					SyntaxError:
.96f9	a9 02		lda #$02		lda	#2
.96fb	4c 72 82	jmp $8272		jmp	ErrorHandler
.96fe					RangeError:
.96fe	a9 04		lda #$04		lda	#4
.9700	4c 72 82	jmp $8272		jmp	ErrorHandler
.9703					TypeError:
.9703	a9 05		lda #$05		lda	#5
.9705	4c 72 82	jmp $8272		jmp	ErrorHandler
.9708					ArgumentError:
.9708	a9 07		lda #$07		lda	#7
.970a	4c 72 82	jmp $8272		jmp	ErrorHandler
.970d					NotDoneError:
.970d	a9 0c		lda #$0c		lda	#12
.970f	4c 72 82	jmp $8272		jmp	ErrorHandler
.9712					ErrorText:
>9712	42 72 65 61 6b 00			.text	"Break",0
>9718	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9720	72 72 6f 72 00
>9725	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>972d	20 62 79 20 7a 65 72 6f 00
>9736	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>973e	61 6e 67 65 00
>9743	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>974b	6d 61 74 63 68 00
>9751	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9759	65 6d 6f 72 79 00
>975f	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9767	61 72 67 75 6d 65 6e 74 00
>9770	53 74 6f 70 00				.text	"Stop",0
>9775	53 74 72 69 6e 67 20 74			.text	"String too long",0
>977d	6f 6f 20 6c 6f 6e 67 00
>9785	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>978d	6e 20 66 61 69 6c 65 64 00
>9796	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>979e	61 74 61 00
>97a2	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>97aa	65 6e 74 65 64 00
>97b0	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>97b8	6c 69 6e 65 20 6e 75 6d 62 65 72 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.97c4					StringConcrete:
.97c4	5a		phy				phy 								; save position on stack
.97c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.97c8	85 38		sta $38				sta 	zTemp1
.97ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97cd	85 39		sta $39				sta 	zTemp1+1
.97cf	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.97d1					_SALength:
.97d1	c8		iny				iny
.97d2	b1 38		lda ($38),y			lda 	(zTemp1),y
.97d4	d0 fb		bne $97d1			bne 	_SALength
.97d6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.97d8	b0 3f		bcs $9819			bcs 	_SALengthError
.97da	98		tya				tya 				 				; length of the new string
.97db	18		clc				clc
.97dc	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.97de	90 02		bcc $97e2			bcc 	_SAHaveLength
.97e0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.97e2					_SAHaveLength:
.97e2	48		pha				pha 								; save length.
.97e3	38		sec				sec
.97e4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.97e6	6d 0e 07	adc $070e			adc 	StringMemory
.97e9	8d 0e 07	sta $070e			sta 	StringMemory
.97ec	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.97ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.97f1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.97f3	6d 0f 07	adc $070f			adc 	StringMemory+1
.97f6	8d 0f 07	sta $070f			sta 	StringMemory+1
.97f9	85 3b		sta $3b				sta 	zTemp2+1
.97fb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97fe	68		pla				pla 								; save length-3 (chars allowed) in first byte
.97ff	38		sec				sec
.9800	e9 03		sbc #$03			sbc 	#3
.9802	92 3a		sta ($3a)			sta 	(zTemp2)
.9804	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9806	a0 01		ldy #$01			ldy 	#1
.9808	91 3a		sta ($3a),y			sta 	(zTemp2),y
.980a					_SACopyNewString:
.980a	a0 00		ldy #$00			ldy 	#0
.980c					_SACopyNSLoop:
.980c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.980e	c8		iny				iny 								; write two on in string storage
.980f	c8		iny				iny
.9810	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9812	88		dey				dey 								; this makes it one one.
.9813	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9815	d0 f5		bne $980c			bne 	_SACopyNSLoop
.9817	7a		ply				ply
.9818	60		rts				rts
.9819					_SALengthError:
.9819	a9 09		lda #$09		lda	#9
.981b	4c 72 82	jmp $8272		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.981e					StringSystemInitialise:
.981e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9820	8d 0e 07	sta $070e			sta 	0+StringMemory
.9823	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9825	8d 0f 07	sta $070f			sta 	1+StringMemory
.9828	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.982b	60		rts				rts
.982c					StringSpaceInitialise:
.982c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.982e	8d 10 07	sta $0710			sta 	StringInitialised
.9831	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9834	8d 11 07	sta $0711			sta 	StringTempPointer
.9837	ad 0f 07	lda $070f			lda 	StringMemory+1
.983a	3a		dec a				dec 	a
.983b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.983e	60		rts				rts
.983f					StringTempAllocate:
.983f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9841	b0 35		bcs $9878			bcs 	_STALength
.9843	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9846	30 05		bmi $984d			bmi 	_STAAllocate
.9848	48		pha				pha 								; save value to subtract.
.9849	20 2c 98	jsr $982c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.984c	68		pla				pla 								; restore it
.984d					_STAAllocate:
.984d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.984f	18		clc				clc  								; deliberate allows one more
.9850	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9853	8d 11 07	sta $0711			sta 	StringTempPointer
.9856	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9859	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.985b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.985e	69 ff		adc #$ff			adc 	#$FF
.9860	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9863	85 3d		sta $3d				sta 	zsTemp+1
.9865	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9868	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.986b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.986e	a9 10		lda #$10			lda 	#NSTString
.9870	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9873	a9 00		lda #$00			lda 	#0 							; clear the target string
.9875	92 3c		sta ($3c)			sta 	(zsTemp)
.9877	60		rts				rts
.9878					_STALength:
.9878	a9 09		lda #$09		lda	#9
.987a	4c 72 82	jmp $8272		jmp	ErrorHandler
.987d					StringTempWrite:
.987d	48		pha				pha
.987e	92 3c		sta ($3c)			sta 	(zsTemp)
.9880	e6 3c		inc $3c				inc 	zsTemp
.9882	d0 02		bne $9886			bne 	_STWNoCarry
.9884	e6 3d		inc $3d				inc 	zsTemp+1
.9886					_STWNoCarry:
.9886	a9 00		lda #$00			lda 	#0
.9888	92 3c		sta ($3c)			sta 	(zsTemp)
.988a	68		pla				pla
.988b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8d56					BackloadProgram:
.8d56	a2 ff		ldx #$ff			ldx 	#$FF
.8d58	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8d5b	20 82 8d	jsr $8d82			jsr 	BLReadByte
.8d5e	30 1e		bmi $8d7e			bmi 	_BPExit
.8d60					_BPCopy:
.8d60	e8		inx				inx  								; copy byte in
.8d61	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8d64	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8d67	20 82 8d	jsr $8d82			jsr 	BLReadByte 					; read next byte
.8d6a	30 0a		bmi $8d76			bmi 	_BPEndLine 					; -ve = EOL
.8d6c	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8d6e	d0 02		bne $8d72			bne 	_BPNotTab
.8d70	a9 20		lda #$20			lda 	#' '
.8d72					_BPNotTab:
.8d72	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8d74	b0 ea		bcs $8d60			bcs 	_BPCopy
.8d76					_BPEndLine:
.8d76	20 3e 8f	jsr $8f3e			jsr 	TokeniseLine 				; tokenise the line.
.8d79	20 ca 91	jsr $91ca			jsr 	MemoryAppend 				; append to current program
.8d7c	80 d8		bra $8d56			bra 	BackloadProgram
.8d7e					_BPExit:
.8d7e	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8d81	60		rts				rts
.8d82					BLReadByte:
.8d82					_BLLoad:
.8d82	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8d85	ee 83 8d	inc $8d83			inc 	_BLLoad+1
.8d88	d0 03		bne $8d8d			bne 	_BLNoCarry
.8d8a	ee 84 8d	inc $8d84			inc 	_BLLoad+2
.8d8d					_BLNoCarry:
.8d8d	c9 00		cmp #$00			cmp 	#0
.8d8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8d90					TokeniseSearchTable:
.8d90	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8d92	85 36		sta $36				sta 	zTemp0
.8d94	a0 00		ldy #$00			ldy 	#0
.8d96	a9 80		lda #$80			lda 	#$80 						; token #
.8d98	85 38		sta $38				sta 	zTemp1
.8d9a					_TSTLoop:
.8d9a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8d9c	30 49		bmi $8de7			bmi 	_TSTFail 					; -ve = end of table
.8d9e	f0 2e		beq $8dce			beq 	_TSTNext 					; zero, check next it's a dummy
.8da0	c8		iny				iny 								; get the hash
.8da1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8da3	88		dey				dey
.8da4	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8da7	d0 25		bne $8dce			bne 	_TSTNext
.8da9	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8dac	38		sec				sec
.8dad	ed 00 07	sbc $0700			sbc 	identStart
.8db0	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8db2	d0 1a		bne $8dce			bne 	_TSTNext
.8db4	5a		phy				phy 								; save Y , we might fail
.8db5	c8		iny				iny 								; point to text
.8db6	c8		iny				iny
.8db7	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8dba					_TSTCompareName:
.8dba	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8dbd	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8dbf	d0 0c		bne $8dcd			bne 	_TSTNextPullY 				; fail, pullY and do next
.8dc1	e8		inx				inx
.8dc2	c8		iny				iny
.8dc3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8dc6	d0 f2		bne $8dba			bne 	_TSTCompareName
.8dc8	7a		ply				ply 								; throw Y
.8dc9	a5 38		lda $38				lda 	zTemp1 						; get token #
.8dcb	38		sec				sec 								; return with CS = passed.
.8dcc	60		rts				rts
.8dcd					_TSTNextPullY:
.8dcd	7a		ply				ply 								; restore current, fall through.
.8dce					_TSTNext:
.8dce	e6 38		inc $38				inc 	zTemp1 						; token counter
.8dd0	98		tya				tya
.8dd1	18		clc				clc
.8dd2	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8dd4	1a		inc a				inc 	a 							; +1
.8dd5	1a		inc a				inc 	a 							; +2
.8dd6	a8		tay				tay
.8dd7	10 c1		bpl $8d9a			bpl 	_TSTLoop 					; if Y < $80 loop back
.8dd9	98		tya				tya 								; add Y to zTemp0 and reset Y
.8dda	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8ddc	18		clc				clc  								; but have tables > 255 bytes
.8ddd	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8ddf	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8de1	90 b7		bcc $8d9a			bcc 	_TSTLoop
.8de3	e6 37		inc $37				inc 	zTemp0+1
.8de5	80 b3		bra $8d9a			bra 	_TSTLoop
.8de7					_TSTFail:
.8de7	18		clc				clc
.8de8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8de9					KeywordSet0:
>8de9	00 65					.text	0,$65,""               ; $80 !0:EOF
>8deb	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ded	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8def	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8df5	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8dfd	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8e03	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8e0a	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8e11	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8e18	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8e1e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8e26	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8e2e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8e34	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8e3b	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8e41	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8e49	28
>8e4a	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8e50	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8e56	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8e5c	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8e63	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8e69	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8e6f	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8e74	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8e78	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8e7e	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8e86	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8e8d	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8e94	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8e9c	43
>8e9d	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8ea3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8eaa	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8eb0	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8eb6	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8ebb	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8ec1	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8ec6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8ecd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8ed3	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8ed8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8edf	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8ee5	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8eea	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8ef2	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8ef8	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8efc	ff					.text	$FF
.8efd					KeywordSet1:
>8efd	00 65					.text	0,$65,""               ; $80 !0:EOF
>8eff	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f01	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f03	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8f0b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8f12	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8f17	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8f1d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8f22	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8f2a	45
>8f2b	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8f30	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8f36	ff					.text	$FF
.8f37					KeywordSet2:
>8f37	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f39	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f3b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f3d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8f3e					TokeniseLine:
.8f3e	20 c6 90	jsr $90c6			jsr 	FixLineBufferCase 			; fix line case
.8f41	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8f43	8d 15 07	sta $0715			sta 	tokenOffset
.8f46	9c 16 07	stz $0716			stz 	tokenLineNumber
.8f49	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8f4c	a2 ff		ldx #$ff			ldx 	#$FF
.8f4e					_TKFindFirst:
.8f4e	e8		inx				inx
.8f4f	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f52	f0 79		beq $8fcd			beq 	_TKExit
.8f54	c9 20		cmp #$20			cmp 	#' '
.8f56	90 f6		bcc $8f4e			bcc 	_TKFindFirst
.8f58	c9 30		cmp #$30			cmp 	#'0'
.8f5a	90 07		bcc $8f63			bcc 	_TKNoLineNumber
.8f5c	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f5e	b0 03		bcs $8f63			bcs 	_TKNoLineNumber
.8f60	20 f0 90	jsr $90f0			jsr 	TokeniseExtractLineNumber
.8f63					_TKNoLineNumber:
.8f63					_TKTokeniseLoop:
.8f63	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8f66	f0 65		beq $8fcd			beq 	_TKExit
.8f68	e8		inx				inx
.8f69	c9 20		cmp #$20			cmp 	#' '
.8f6b	f0 f6		beq $8f63			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8f6d	ca		dex				dex 								; undo last get, A contains character, X is position.
.8f6e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8f70	f0 61		beq $8fd3			beq 	_TKTokeniseIdentifier
.8f72	c9 41		cmp #$41			cmp 	#'A'
.8f74	90 04		bcc $8f7a			bcc 	_TKTokenisePunctuation
.8f76	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8f78	90 59		bcc $8fd3			bcc 	_TKTokeniseIdentifier
.8f7a					_TKTokenisePunctuation:
.8f7a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8f7c	f0 27		beq $8fa5			beq 	_TKString
.8f7e	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8f80	f0 28		beq $8faa			beq 	_TKHexConstant
.8f82	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8f84	f0 29		beq $8faf			beq 	_TKCheckDouble
.8f86	c9 3e		cmp #$3e			cmp 	#'>'
.8f88	f0 25		beq $8faf			beq 	_TKCheckDouble
.8f8a					_TKStandardPunctuation:
.8f8a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8f8d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8f8f	90 0e		bcc $8f9f			bcc 	_TKNoShift
.8f91	48		pha				pha 								; save
.8f92	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8f94	85 36		sta $36				sta 	zTemp0
.8f96	68		pla				pla
.8f97	29 20		and #$20			and 	#32 						; bit 5
.8f99	4a		lsr a				lsr 	a 							; shift into bit 3
.8f9a	4a		lsr a				lsr 	a
.8f9b	05 36		ora $36				ora 	zTemp0
.8f9d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8f9f					_TKNoShift:
.8f9f	20 35 91	jsr $9135			jsr 	TokeniseWriteByte 			; write the punctuation character
.8fa2	e8		inx				inx 								; consume the character
.8fa3	80 be		bra $8f63			bra 	_TKTokeniseLoop 			; and loop round again.
.8fa5					_TKString:
.8fa5	20 55 90	jsr $9055			jsr 	TokeniseString
.8fa8	80 b9		bra $8f63			bra 	_TKTokeniseLoop
.8faa					_TKHexConstant:
.8faa	20 90 90	jsr $9090			jsr 	TokeniseHexConstant
.8fad	80 b4		bra $8f63			bra 	_TKTokeniseLoop
.8faf					_TKCheckDouble:
.8faf	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8fb2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8fb4	90 d4		bcc $8f8a			bcc 	_TKStandardPunctuation
.8fb6	c9 3f		cmp #$3f			cmp 	#'>'+1
.8fb8	b0 d0		bcs $8f8a			bcs 	_TKStandardPunctuation
.8fba	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8fbd	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8fbf	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8fc0	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8fc3	38		sec				sec
.8fc4	e9 3c		sbc #$3c			sbc 	#'<'
.8fc6	20 35 91	jsr $9135			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8fc9	e8		inx				inx 								; consume both
.8fca	e8		inx				inx
.8fcb	80 96		bra $8f63			bra 	_TKTokeniseLoop
.8fcd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8fcf	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.8fd2	60		rts				rts
.8fd3					_TKTokeniseIdentifier:
.8fd3	8e 00 07	stx $0700			stx 	identStart 					; save start
.8fd6	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8fd9					_TKCheckLoop:
.8fd9	e8		inx				inx 								; look at next, we know first is identifier.
.8fda	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8fdd	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8fdf	f0 f8		beq $8fd9			beq 	_TKCheckLoop
.8fe1	c9 30		cmp #$30			cmp	 	#"0"
.8fe3	90 0c		bcc $8ff1			bcc 	_TKEndIdentifier
.8fe5	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fe7	90 f0		bcc $8fd9			bcc 	_TKCheckLoop
.8fe9	c9 41		cmp #$41			cmp	 	#"A"
.8feb	90 04		bcc $8ff1			bcc 	_TKEndIdentifier
.8fed	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8fef	90 e8		bcc $8fd9			bcc 	_TKCheckLoop
.8ff1					_TKEndIdentifier:
.8ff1	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8ff4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8ff6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8ff8	f0 06		beq $9000			beq 	_TKHasTypeCharacter
.8ffa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8ffc	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8ffe	d0 07		bne $9007			bne 	_TKNoTypeCharacter
.9000					_TKHasTypeCharacter:
.9000	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9003	e8		inx				inx 								; read next
.9004	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9007					_TKNoTypeCharacter:
.9007	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9009	d0 09		bne $9014			bne 	_TKNoArray
.900b	e8		inx				inx 								; skip the (
.900c	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.900f	09 04		ora #$04			ora 	#$04
.9011	8d 04 07	sta $0704			sta 	identTypeByte
.9014					_TKNoArray:
.9014	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9017	20 b1 90	jsr $90b1			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.901a	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.901c	a9 e9		lda #$e9			lda 	#(KeywordSet0) & $FF
.901e	20 90 8d	jsr $8d90			jsr 	TokeniseSearchTable
.9021	a2 00		ldx #$00			ldx 	#0
.9023	b0 1f		bcs $9044			bcs 	_TKFoundToken
.9025	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9027	a9 fd		lda #$fd			lda 	#(KeywordSet1) & $FF
.9029	20 90 8d	jsr $8d90			jsr 	TokeniseSearchTable
.902c	a2 81		ldx #$81			ldx 	#$81
.902e	b0 14		bcs $9044			bcs 	_TKFoundToken
.9030	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9032	a9 fd		lda #$fd			lda 	#(KeywordSet1) & $FF
.9034	20 90 8d	jsr $8d90			jsr 	TokeniseSearchTable
.9037	a2 82		ldx #$82			ldx 	#$82
.9039	b0 09		bcs $9044			bcs 	_TKFoundToken
.903b	20 41 91	jsr $9141			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.903e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9041	4c 63 8f	jmp $8f63			jmp 	_TKTokeniseLoop 			; and go round again.
.9044					_TKFoundToken:
.9044	48		pha				pha 								; save token
.9045	8a		txa				txa 								; shift in X, is there one ?
.9046	f0 03		beq $904b			beq 	_TKNoTShift
.9048	20 35 91	jsr $9135			jsr 	TokeniseWriteByte 			; if so, write it out
.904b					_TKNoTShift:
.904b	68		pla				pla 								; restore and write token
.904c	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.904f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9052	4c 63 8f	jmp $8f63			jmp 	_TKTokeniseLoop 			; and go round again.
.9055					TokeniseString:
.9055	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9057	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.905a	e8		inx				inx									; start of quoted string.
.905b	da		phx				phx 								; push start of string on top
.905c	ca		dex				dex
.905d					_TSFindEnd:
.905d	e8		inx				inx
.905e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9061	f0 04		beq $9067			beq 	_TSEndOfString
.9063	c9 22		cmp #$22			cmp 	#'"'
.9065	d0 f6		bne $905d			bne 	_TSFindEnd
.9067					_TSEndOfString:
.9067	7a		ply				ply  								; so now Y is first character, X is character after end.
.9068	48		pha				pha 								; save terminating character
.9069	20 71 90	jsr $9071			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.906c	68		pla				pla 								; terminating character
.906d	f0 01		beq $9070			beq 	_TSNotQuote					; if it wasn't EOS skip it
.906f	e8		inx				inx
.9070					_TSNotQuote:
.9070	60		rts				rts
.9071					TOWriteBlockXY:
.9071	86 36		stx $36				stx 	zTemp0 						; write end character
.9073	98		tya				tya
.9074	49 ff		eor #$ff			eor 	#$FF
.9076	38		sec				sec
.9077	65 36		adc $36				adc 	zTemp0
.9079	1a		inc a				inc 	a 							; one extra for NULL
.907a	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.907d					_TOBlockLoop:
.907d	c4 36		cpy $36				cpy 	zTemp0
.907f	f0 09		beq $908a			beq 	_TOBlockExit
.9081	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9084	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.9087	c8		iny				iny
.9088	80 f3		bra $907d			bra 	_TOBlockLoop
.908a					_TOBlockExit:
.908a	a9 00		lda #$00			lda 	#0
.908c	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.908f	60		rts				rts
.9090					TokeniseHexConstant:
.9090	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9092	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.9095	e8		inx				inx									; start of quoted string.
.9096	da		phx				phx 								; push start of constant on top
.9097	ca		dex				dex
.9098					_THFindLoop:
.9098	e8		inx				inx
.9099	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.909c	c9 30		cmp #$30			cmp 	#"0"
.909e	90 0c		bcc $90ac			bcc 	_THFoundEnd
.90a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.90a2	90 f4		bcc $9098			bcc 	_THFindLoop
.90a4	c9 41		cmp #$41			cmp 	#"A"
.90a6	90 04		bcc $90ac			bcc 	_THFoundEnd
.90a8	c9 47		cmp #$47			cmp 	#"F"+1
.90aa	90 ec		bcc $9098			bcc 	_THFindLoop
.90ac					_THFoundEnd:
.90ac	7a		ply				ply 								; restore start
.90ad	20 71 90	jsr $9071			jsr 	TOWriteBlockXY 				; output the block
.90b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.90b1					TokeniseCalculateHash:
.90b1	da		phx				phx
.90b2	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.90b5	a9 00		lda #$00			lda 	#0
.90b7					_TCHLoop:
.90b7	18		clc				clc
.90b8	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.90bb	e8		inx				inx
.90bc	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.90bf	d0 f6		bne $90b7			bne 	_TCHLoop
.90c1	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.90c4	fa		plx				plx
.90c5	60		rts				rts
.90c6					FixLineBufferCase:
.90c6	a2 00		ldx #$00			ldx 	#0
.90c8					_FLBCLoop:
.90c8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.90cb	f0 22		beq $90ef			beq 	_FLBCExit 					; end of string.
.90cd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.90cf	f0 11		beq $90e2			beq 	_FLBCInQuotes
.90d1	e8		inx				inx
.90d2	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.90d4	90 f2		bcc $90c8			bcc 	_FLBCLoop
.90d6	c9 7b		cmp #$7b			cmp 	#'z'+1
.90d8	b0 ee		bcs $90c8			bcs 	_FLBCLoop
.90da	38		sec				sec 								; make U/C
.90db	e9 20		sbc #$20			sbc 	#32
.90dd	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.90e0	80 e6		bra $90c8			bra 	_FLBCLoop
.90e2					_FLBCInQuotes:
.90e2	e8		inx				inx 								; advance
.90e3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.90e6	f0 07		beq $90ef			beq 	_FLBCExit 					; exit on EOS
.90e8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.90ea	d0 f6		bne $90e2			bne 	_FLBCInQuotes
.90ec	e8		inx				inx 								; skip over it
.90ed	80 d9		bra $90c8			bra 	_FLBCLoop
.90ef					_FLBCExit:
.90ef	60		rts				rts
.90f0					TokeniseExtractLineNumber:
.90f0	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.90f3	48		pha				pha
.90f4	ad 16 07	lda $0716			lda 	tokenLineNumber
.90f7	48		pha				pha
.90f8	20 2e 91	jsr $912e			jsr 	_TELNTimes2 				; line # x 4
.90fb	20 2e 91	jsr $912e			jsr 	_TELNTimes2 				; line # x 2
.90fe	18		clc				clc 								; add stacked value
.90ff	68		pla				pla
.9100	6d 16 07	adc $0716			adc 	tokenLineNumber
.9103	8d 16 07	sta $0716			sta 	tokenLineNumber
.9106	68		pla				pla
.9107	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.910a	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.910d	20 2e 91	jsr $912e			jsr 	_TELNTimes2 				; line # x 10
.9110	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9113	e8		inx				inx
.9114	29 0f		and #$0f			and 	#15 						; add to line #
.9116	18		clc				clc
.9117	6d 16 07	adc $0716			adc 	tokenLineNumber
.911a	8d 16 07	sta $0716			sta 	tokenLineNumber
.911d	90 03		bcc $9122			bcc 	_TLENNoCarry
.911f	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9122					_TLENNoCarry:
.9122	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9125	c9 30		cmp #$30			cmp 	#'0'
.9127	90 04		bcc $912d			bcc 	_TLENExit
.9129	c9 3a		cmp #$3a			cmp 	#'9'+1
.912b	90 c3		bcc $90f0			bcc 	TokeniseExtractLineNumber
.912d					_TLENExit:
.912d	60		rts				rts
.912e					_TELNTimes2:
.912e	0e 16 07	asl $0716			asl 	tokenLineNumber
.9131	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9134	60		rts				rts
.9135					TokeniseWriteByte:
.9135	da		phx				phx
.9136	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9139	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.913c	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.913f	fa		plx				plx
.9140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9141					CheckCreateVariableRecord:
.9141	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9143	85 36		sta $36				sta 	0+zTemp0
.9145	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9147	85 37		sta $37				sta 	1+zTemp0
.9149					_CCVSearch:
.9149	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.914b	f0 2c		beq $9179			beq 	_CCVFail
.914d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.914f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9151	cd 03 07	cmp $0703			cmp 	identHash
.9154	d0 16		bne $916c			bne 	_CCVNext
.9156	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9158	ae 00 07	ldx $0700			ldx 	identStart
.915b					_CCVCompare:
.915b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.915e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9160	e8		inx				inx 								; advance pointers
.9161	c8		iny				iny
.9162	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9163	d0 07		bne $916c			bne 	_CCVNext  					; didn't match go to next.
.9165	90 f4		bcc $915b			bcc 	_CCVCompare 				; not finished yet.
.9167	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.916a	f0 41		beq $91ad			beq 	_CCVFound 					; yes, we were successful
.916c					_CCVNext:
.916c	18		clc				clc
.916d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.916f	65 36		adc $36				adc 	zTemp0
.9171	85 36		sta $36				sta 	zTemp0
.9173	90 d4		bcc $9149			bcc 	_CCVSearch
.9175	e6 37		inc $37				inc 	zTemp0+1
.9177	80 d0		bra $9149			bra 	_CCVSearch
.9179					_CCVFail:
.9179	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.917b	ad 03 07	lda $0703			lda 	identHash
.917e	91 36		sta ($36),y			sta 	(zTemp0),y
.9180	c8		iny				iny 								; offset 2 is the type byte
.9181	ad 04 07	lda $0704			lda 	identTypeByte
.9184	91 36		sta ($36),y			sta 	(zTemp0),y
.9186	c8		iny				iny
.9187					_CCVData:
.9187	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9189	91 36		sta ($36),y			sta 	(zTemp0),y
.918b	c8		iny				iny
.918c	c0 08		cpy #$08			cpy 	#8
.918e	90 f7		bcc $9187			bcc 	_CCVData
.9190	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9193					_CCVCopyName:
.9193	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9196	91 36		sta ($36),y			sta 	(zTemp0),y
.9198	e8		inx				inx
.9199	c8		iny				iny
.919a	ec 02 07	cpx $0702			cpx 	identTypeEnd
.919d	d0 f4		bne $9193			bne 	_CCVCopyName
.919f	98		tya				tya 								; patch offset
.91a0	92 36		sta ($36)			sta 	(zTemp0)
.91a2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.91a4	91 36		sta ($36),y			sta 	(zTemp0),y
.91a6	88		dey				dey
.91a7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.91a9	09 80		ora #$80			ora 	#$80
.91ab	91 36		sta ($36),y			sta 	(zTemp0),y
.91ad					_CCVFound:
.91ad	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.91af	38		sec				sec
.91b0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.91b2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.91b4	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.91b7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.91b9	20 35 91	jsr $9135			jsr 	TokeniseWriteByte
.91bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.988c					MemoryPeek:
.988c	b2 36		lda ($36)			lda 	(zTemp0)
.988e	60		rts				rts
.988f					MemoryPoke:
.988f	92 36		sta ($36)			sta 	(zTemp0)
.9891	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9892					EXTPrintCharacter:
.9892	48		pha				pha
.9893	da		phx				phx
.9894	5a		phy				phy
.9895	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9898	7a		ply				ply
.9899	fa		plx				plx
.989a	68		pla				pla
.989b	60		rts				rts
.989c					EXTInputSingleCharacter:
.989c	da		phx				phx
.989d	5a		phy				phy
.989e					_EISCWait:
.989e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.98a1	c9 00		cmp #$00			cmp 	#0
.98a3	f0 f9		beq $989e			beq 	_EISCWait
.98a5	7a		ply				ply
.98a6	fa		plx				plx
.98a7	60		rts				rts
.98a8					EXTInputLine:
.98a8	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.98aa					_ILLoop:
.98aa	da		phx				phx 								; read character in
.98ab	20 cf ff	jsr $ffcf			jsr 	$FFCF
.98ae	fa		plx				plx
.98af	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.98b1	f0 12		beq $98c5			beq 	_ILBackspace
.98b3	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.98b5	f0 15		beq $98cc			beq 	_ILExit
.98b7	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.98b9	90 ef		bcc $98aa			bcc 	_ILLoop
.98bb	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.98bd	f0 eb		beq $98aa			beq 	_ILLoop
.98bf	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.98c2	e8		inx				inx
.98c3	80 e5		bra $98aa			bra 	_ILLoop
.98c5					_ILBackspace:
.98c5	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.98c7	f0 e1		beq $98aa			beq 	_ILLoop
.98c9	ca		dex				dex 								; back one.
.98ca	80 de		bra $98aa			bra 	_ILLoop
.98cc					_ILExit:
.98cc	20 92 98	jsr $9892			jsr 	EXTPrintCharacter
.98cf	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.98d2	60		rts				rts
.98d3					EXTBreakCheck:
.98d3	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.91bd					MemoryNew:
.91bd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91bf	85 30		sta $30				sta 	codePtr
.91c1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91c3	85 31		sta $31				sta 	codePtr+1
.91c5	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.91c7	92 30		sta ($30)			sta 	(codePtr)
.91c9	60		rts				rts
.91ca					MemoryAppend:
.91ca	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91cc	85 30		sta $30				sta 	codePtr
.91ce	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91d0	85 31		sta $31				sta 	codePtr+1
.91d2					_MAFindEnd:
.91d2	b2 30		lda ($30)			lda 	(codePtr)
.91d4	f0 0d		beq $91e3			beq 	_MAFoundEnd
.91d6	18		clc				clc
.91d7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91d9	65 30		adc $30				adc 	codePtr
.91db	85 30		sta $30				sta 	codePtr
.91dd	90 02		bcc $91e1			bcc 	_CREExit
.91df	e6 31		inc $31				inc 	codePtr+1
.91e1					_CREExit:
.91e1	80 ef		bra $91d2			bra 	_MAFindEnd
.91e3					_MAFoundEnd:
.91e3	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.91e6	c0 04		cpy #$04			cpy 	#4 							; blank line
.91e8	f0 0e		beq $91f8			beq 	_MANoLine
.91ea	a9 00		lda #$00			lda 	#0 							; end of program
.91ec	91 30		sta ($30),y			sta 	(codePtr),y
.91ee					_MACopy:
.91ee	88		dey				dey
.91ef	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.91f2	91 30		sta ($30),y			sta 	(codePtr),y
.91f4	c0 00		cpy #$00			cpy 	#0
.91f6	d0 f6		bne $91ee			bne 	_MACopy
.91f8					_MANoLine:
.91f8	60		rts				rts
.91f9					MemoryInline:
.91f9	98		tya				tya 								; put address into stack,x
.91fa	18		clc				clc
.91fb	65 30		adc $30				adc 	codePtr
.91fd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9200	a5 31		lda $31				lda 	codePtr+1
.9202	69 00		adc #$00			adc 	#0
.9204	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9207	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.920a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.920d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.920e					MemoryTransferAX:
.920e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9210	86 37		stx $37				stx 	zTemp0+1
.9212	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9214	85 30		sta $30				sta 	codePtr
.9216	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9218	85 31		sta $31				sta 	codePtr+1
.921a					_MTAXLoop:
.921a	b2 30		lda ($30)			lda 	(codePtr)
.921c	f0 1d		beq $923b			beq 	_MTAXError 					; not found.
.921e	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9220	b1 30		lda ($30),y			lda 	(codePtr),y
.9222	c5 36		cmp $36				cmp 	zTemp0
.9224	d0 07		bne $922d			bne 	_MTAXNext
.9226	c8		iny				iny 								; check MSB
.9227	b1 30		lda ($30),y			lda 	(codePtr),y
.9229	c5 37		cmp $37				cmp 	zTemp0+1
.922b	f0 0d		beq $923a			beq 	_MTAXExit 					; success !
.922d					_MTAXNext:
.922d	18		clc				clc
.922e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9230	65 30		adc $30				adc 	codePtr
.9232	85 30		sta $30				sta 	codePtr
.9234	90 02		bcc $9238			bcc 	_CREExit
.9236	e6 31		inc $31				inc 	codePtr+1
.9238					_CREExit:
.9238	80 e0		bra $921a			bra 	_MTAXLoop
.923a					_MTAXExit:
.923a	60		rts				rts
.923b					_MTAXError:
.923b	a9 0d		lda #$0d		lda	#13
.923d	4c 72 82	jmp $8272		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
