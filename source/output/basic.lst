
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  8 18:19:50 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 60 91	jsr $9160			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 16 83	jsr $8316			jsr 	RunDemos
.8013	20 42 8b	jsr $8b42			jsr 	NewCommand 					; erase current program
.8016	20 e5 9d	jsr $9de5			jsr 	BackloadProgram
.8019	4c 9e 86	jmp $869e			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 61			.text "Built Saturday 08-Oct-2022. Build 761."
>8064	74 75 72 64 61 79 20 30 38 2d 4f 63 74 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 37 36 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=5					GXMappingPage = 5
=40960					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=13					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8085					GXClearBitmap:
.8085	48		pha				pha
.8086	5a		phy				phy
.8087	20 67 83	jsr $8367			jsr 	GXOpenBitmap 				; start access
.808a	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808c	ad 3a 06	lda $063a			lda 	gxHeight
.808f	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8091	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8093					_GXCalcLastPage:
.8093	98		tya				tya 								; add to base page
.8094	18		clc				clc
.8095	6d 39 06	adc $0639			adc 	gxBasePage
.8098	85 0d		sta $0d				sta 	GFXEditSlot  				; clear from this page back
.809a					_GXClearAll:
.809a	20 ac 80	jsr $80ac			jsr 	_GXClearBlock 				; clear 8k block
.809d	c6 0d		dec $0d				dec 	GFXEditSlot  				; back to previous
.809f	a5 0d		lda $0d				lda 	GFXEditSlot
.80a1	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a4	b0 f4		bcs $809a			bcs 	_GXClearAll
.80a6	20 78 83	jsr $8378			jsr 	GXCloseBitmap	 			; stop access
.80a9	7a		ply				ply
.80aa	68		pla				pla
.80ab	60		rts				rts
.80ac					_GXClearBlock:
.80ac	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ae	85 38		sta $38				sta 	0+gzTemp1
.80b0	a9 a0		lda #$a0			lda 	#((GXMappingAddress) >> 8)
.80b2	85 39		sta $39				sta 	1+gzTemp1
.80b4					_GXCB0:
.80b4	a5 36		lda $36				lda 	gzTemp0
.80b6	a0 00		ldy #$00			ldy 	#0
.80b8					_GXCB1:
.80b8	91 38		sta ($38),y			sta 	(gzTemp1),y
.80ba	c8		iny				iny
.80bb	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bd	c8		iny				iny
.80be	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c0	c8		iny				iny
.80c1	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c3	c8		iny				iny
.80c4	d0 f2		bne $80b8			bne 	_GXCB1
.80c6	e6 39		inc $39				inc 	gzTemp1+1
.80c8	a5 39		lda $39				lda 	gzTemp1+1
.80ca	c9 c0		cmp #$c0			cmp	 	#(GXMappingAddress >> 8)+$20
.80cc	d0 e6		bne $80b4			bne 	_GXCB0
.80ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.80cf					GXLine:
.80cf	20 67 83	jsr $8367			jsr 	GXOpenBitmap
.80d2	20 0e 84	jsr $840e			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.80d5	20 9a 81	jsr $819a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.80d8	20 85 83	jsr $8385			jsr 	GXPositionCalc 				; calculate position/offset.
.80db					_GXDrawLoop:
.80db	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.80de	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.80e0	2d 3c 06	and $063c			and 	gxANDValue
.80e3	4d 3b 06	eor $063b			eor 	gxEORValue
.80e6	91 3a		sta ($3a),y			sta 	(gsTemp),y
.80e8	20 f6 80	jsr $80f6			jsr 	GXLineIsComplete 			; is the line complete ?
.80eb	f0 05		beq $80f2			beq 	_GXLExit
.80ed	20 11 81	jsr $8111			jsr 	GXLineAdvance 				; code as per advance method
.80f0	80 e9		bra $80db			bra 	_GXDrawLoop
.80f2					_GXLExit:
.80f2	20 78 83	jsr $8378			jsr 	GXCloseBitmap
.80f5	60		rts				rts
.80f6					GXLineIsComplete:
.80f6	ad 42 06	lda $0642			lda 	GXIsDiffYLarger 			; is dy larger
.80f9	d0 0f		bne $810a			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.80fb	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.80fe	4d 35 06	eor $0635			eor 	GXX1
.8101	d0 06		bne $8109			bne 	_GXLICExit
.8103	ad 32 06	lda $0632			lda 	GXX0+1
.8106	4d 36 06	eor $0636			eor 	GXX1+1
.8109					_GXLICExit:
.8109	60		rts				rts
.810a					_GXLICCompareY:
.810a	ad 37 06	lda $0637			lda 	GXY1
.810d	4d 33 06	eor $0633			eor 	GXY0
.8110	60		rts				rts
.8111					GXLineAdvance:
.8111	18		clc				clc 								; add adjust to position
.8112	ad 44 06	lda $0644			lda 	GXPosition
.8115	6d 45 06	adc $0645			adc 	GXAdjust
.8118	8d 44 06	sta $0644			sta 	GXPosition
.811b	9c 47 06	stz $0647			stz 	GXAddSelect 				; clear add select flag
.811e	b0 05		bcs $8125			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8120	cd 46 06	cmp $0646			cmp 	GXTotal 					; if exceeded total
.8123	90 0a		bcc $812f			bcc 	_GXLANoExtra
.8125					_GXLAOverflow:
.8125	ce 47 06	dec $0647			dec 	GXAddSelect 				; set addselect to $FF
.8128	38		sec				sec 								; subtract total and write back
.8129	ed 46 06	sbc $0646			sbc 	GXTotal
.812c	8d 44 06	sta $0644			sta 	GXPosition
.812f					_GXLANoExtra:
.812f	ad 42 06	lda $0642			lda 	GXIsDiffYLarger
.8132	f0 0d		beq $8141			beq 	_GXDXLarger
.8134	20 93 81	jsr $8193			jsr 	GXIncrementY
.8137	ad 47 06	lda $0647			lda 	GXAddSelect
.813a	f0 10		beq $814c			beq 	_GXLAExit
.813c	20 4d 81	jsr $814d			jsr 	GXAdjustX
.813f	80 0b		bra $814c			bra 	_GXLAExit
.8141					_GXDXLarger:
.8141	20 4d 81	jsr $814d			jsr 	GXAdjustX
.8144	ad 47 06	lda $0647			lda 	GXAddSelect
.8147	f0 03		beq $814c			beq 	_GXLAExit
.8149	20 93 81	jsr $8193			jsr 	GXIncrementY
.814c					_GXLAExit:
.814c	60		rts				rts
.814d					GXAdjustX:
.814d	ad 43 06	lda $0643			lda 	GXDXNegative
.8150	10 25		bpl $8177			bpl 	_GXAXRight
.8152	ad 31 06	lda $0631			lda 	GXX0
.8155	d0 03		bne $815a			bne 	_GXAXNoBorrow
.8157	ce 32 06	dec $0632			dec 	GXX0+1
.815a					_GXAXNoBorrow:
.815a	ce 31 06	dec $0631			dec 	GXX0
.815d	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.8160	ad 3f 06	lda $063f			lda 	gsOffset
.8163	c9 ff		cmp #$ff			cmp 	#$FF
.8165	d0 0f		bne $8176			bne 	_GXAYExit 					; underflow
.8167	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.8169	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.816b	c9 a0		cmp #$a0			cmp 	#GXMappingAddress >> 8
.816d	b0 07		bcs $8176			bcs 	_GXAYExit
.816f	18		clc				clc
.8170	69 20		adc #$20			adc 	#$20 						; fix up
.8172	85 3b		sta $3b				sta 	gsTemp+1
.8174	c6 0d		dec $0d				dec 	GFXEditSlot 				; back one page
.8176					_GXAYExit:
.8176	60		rts				rts
.8177					_GXAXRight:
.8177	ee 31 06	inc $0631			inc 	GXX0
.817a	d0 03		bne $817f			bne 	_GXAXNoCarry
.817c	ee 32 06	inc $0632			inc 	GXX0+1
.817f					_GXAXNoCarry:
.817f	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.8182	d0 0e		bne $8192			bne 	_GXAXExit 					; if not overflowed, exit.
.8184	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.8186	a5 3b		lda $3b				lda 	gsTemp+1
.8188	c9 c0		cmp #$c0			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.818a	90 06		bcc $8192			bcc 	_GXAXExit
.818c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.818e	85 3b		sta $3b				sta 	gsTemp+1
.8190	e6 0d		inc $0d				inc 	GFXEditSlot 				; next page
.8192					_GXAXExit:
.8192	60		rts				rts
.8193					GXIncrementY:
.8193	ee 33 06	inc $0633			inc 	GXY0
.8196	20 d5 83	jsr $83d5			jsr 	GXMovePositionDown
.8199	60		rts				rts
.819a					GXLineSetup:
.819a	ad 37 06	lda $0637			lda 	GXY1
.819d	38		sec				sec
.819e	ed 33 06	sbc $0633			sbc 	GXY0
.81a1	4a		lsr a				lsr 	a
.81a2	8d 41 06	sta $0641			sta 	GXDiffY
.81a5	9c 43 06	stz $0643			stz 	GXDXNegative 				; clear -ve flag
.81a8	38		sec				sec
.81a9	ad 35 06	lda $0635			lda 	GXX1
.81ac	ed 31 06	sbc $0631			sbc 	GXX0
.81af	8d 40 06	sta $0640			sta 	GXDiffX
.81b2	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.81b5	ed 32 06	sbc $0632			sbc 	GXX0+1
.81b8	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.81b9	6e 40 06	ror $0640			ror 	GXDiffX
.81bc	0a		asl a				asl 	a
.81bd	10 0c		bpl $81cb			bpl 	_GDXNotNegative
.81bf	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.81c1	38		sec				sec
.81c2	ed 40 06	sbc $0640			sbc 	GXDiffX
.81c5	8d 40 06	sta $0640			sta 	GXDiffX
.81c8	ce 43 06	dec $0643			dec 	GXDXNegative 				; -ve flag = $FF.
.81cb					_GDXNotNegative:
.81cb	9c 42 06	stz $0642			stz 	GXIsDiffYLarger 			; clear larger flag
.81ce	ad 41 06	lda $0641			lda 	GXDiffY 					; set adjust and total.
.81d1	8d 45 06	sta $0645			sta 	GXAdjust
.81d4	ad 40 06	lda $0640			lda 	GXDiffX
.81d7	8d 46 06	sta $0646			sta 	GXTotal
.81da	ad 41 06	lda $0641			lda 	GXDiffY 					; if dy > dx
.81dd	cd 40 06	cmp $0640			cmp 	GXDiffX
.81e0	90 0f		bcc $81f1			bcc 	_GDXNotLarger
.81e2	ce 42 06	dec $0642			dec 	GXIsDiffYLarger 			; set the dy larger flag
.81e5	ad 40 06	lda $0640			lda 	GXDiffX 					; set adjust and total other way round
.81e8	8d 45 06	sta $0645			sta 	GXAdjust
.81eb	ad 41 06	lda $0641			lda 	GXDiffY
.81ee	8d 46 06	sta $0646			sta 	GXTotal
.81f1					_GDXNotLarger:
.81f1	ad 46 06	lda $0646			lda 	GXTotal
.81f4	4a		lsr a				lsr 	a
.81f5	8d 44 06	sta $0644			sta 	GXPosition
.81f8	60		rts				rts
.0640					GXDiffX:
>0640							.fill 	1
.0641					GXDiffY:
>0641							.fill 	1
.0642					GXIsDiffYLarger:
>0642							.fill 	1
.0643					GXDXNegative:
>0643							.fill 	1
.0644					GXPosition:
>0644							.fill 	1
.0645					GXAdjust:
>0645							.fill 	1
.0646					GXTotal:
>0646							.fill 	1
.0647					GXAddSelect:
>0647							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.81f9					GXFillRectangle:
.81f9	38		sec				sec
.81fa	80 01		bra $81fd			bra 	GXRectangle
.81fc					GXFrameRectangle:
.81fc	18		clc				clc
.81fd					GXRectangle:
.81fd	08		php				php 								; save Fill flag (CS)
.81fe	20 67 83	jsr $8367			jsr 	GXOpenBitmap 				; start drawing
.8201	20 f0 83	jsr $83f0			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8204	20 85 83	jsr $8385			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8207	38		sec				sec 								; sec = Draw line
.8208	20 31 82	jsr $8231			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.820b	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.820e	cd 37 06	cmp $0637			cmp 	gxY1
.8211	f0 19		beq $822c			beq 	_GXRectangleExit
.8213					_GXRectLoop:
.8213	20 d5 83	jsr $83d5			jsr 	GXMovePositionDown 			; down one.
.8216	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8219	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.821c	cd 37 06	cmp $0637			cmp 	gXY1
.821f	f0 07		beq $8228			beq 	_GXLastLine
.8221	28		plp				plp 								; get flag back
.8222	08		php				php
.8223	20 31 82	jsr $8231			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8226	80 eb		bra $8213			bra 	_GXRectLoop
.8228					_GXLastLine:
.8228	38		sec				sec
.8229	20 31 82	jsr $8231			jsr 	GXDrawLineX1X0
.822c					_GXRectangleExit:
.822c	68		pla				pla 								; throw fill flag.
.822d	20 78 83	jsr $8378			jsr 	GXCloseBitmap 				; stop drawing and exit
.8230	60		rts				rts
.8231					GXDrawLineX1X0:
.8231	08		php				php 								; save solid/either-end
.8232	38		sec				sec
.8233	ad 35 06	lda $0635			lda		gXX1
.8236	ed 31 06	sbc $0631			sbc 	gXX0
.8239	85 36		sta $36				sta 	gzTemp0
.823b	ad 36 06	lda $0636			lda 	gXX1+1
.823e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8241	85 37		sta $37				sta 	gzTemp0+1
.8243	28		plp				plp
.8244					GXDrawLineTemp0:
.8244	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8246	48		pha				pha
.8247	a5 3b		lda $3b				lda 	gsTemp+1
.8249	48		pha				pha
.824a	ad 3f 06	lda $063f			lda 	gsOffset
.824d	48		pha				pha
.824e	a5 0d		lda $0d				lda 	GFXEditSlot
.8250	48		pha				pha
.8251	ac 3f 06	ldy $063f			ldy 	gsOffset 					; Y offset
.8254	90 1e		bcc $8274			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8256					_GXDLTLine:
.8256	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8258	2d 3c 06	and $063c			and 	gxANDValue
.825b	4d 3b 06	eor $063b			eor 	gxEORValue
.825e	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8260	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8262	d0 04		bne $8268			bne 	_GXDLTNoBorrow
.8264	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8266	30 2e		bmi $8296			bmi 	_GXDLTExit
.8268					_GXDLTNoBorrow:
.8268	c6 36		dec $36				dec 	gzTemp0
.826a	c8		iny				iny 								; next slot.
.826b	d0 e9		bne $8256			bne 	_GXDLTLine
.826d	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.826f	20 a4 82	jsr $82a4			jsr 	_GXDLTCheckWrap				; check for new page.
.8272	80 e2		bra $8256			bra 	_GXDLTLine
.8274					_GXDLTEndPoints:
.8274	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8276	2d 3c 06	and $063c			and 	gxANDValue
.8279	4d 3b 06	eor $063b			eor 	gxEORValue
.827c	91 3a		sta ($3a),y			sta 	(gsTemp),y
.827e	98		tya				tya 								; advance to right side
.827f	18		clc				clc
.8280	65 36		adc $36				adc 	gzTemp0
.8282	a8		tay				tay
.8283	a5 3b		lda $3b				lda 	gsTemp+1
.8285	65 37		adc $37				adc 	gzTemp0+1
.8287	85 3b		sta $3b				sta 	gsTemp+1
.8289	20 a4 82	jsr $82a4			jsr 	_GXDLTCheckWrap 			; fix up.
.828c	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.828e	2d 3c 06	and $063c			and 	gxANDValue
.8291	4d 3b 06	eor $063b			eor 	gxEORValue
.8294	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8296					_GXDLTExit:
.8296	68		pla				pla
.8297	85 0d		sta $0d				sta 	GFXEditSlot
.8299	68		pla				pla
.829a	8d 3f 06	sta $063f			sta 	gsOffset
.829d	68		pla				pla
.829e	85 3b		sta $3b				sta 	gsTemp+1
.82a0	68		pla				pla
.82a1	85 3a		sta $3a				sta 	gsTemp
.82a3	60		rts				rts
.82a4					_GXDLTCheckWrap:
.82a4	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.82a6	c9 c0		cmp #$c0			cmp 	#((GXMappingAddress+$2000) >> 8)
.82a8	90 06		bcc $82b0			bcc 	_GXDLTCWExit
.82aa	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82ac	85 3b		sta $3b				sta 	gsTemp+1
.82ae	e6 0d		inc $0d				inc 	GFXEditSlot
.82b0					_GXDLTCWExit:
.82b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.82b1					GraphicDraw:
.82b1	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.82b3	b0 06		bcs $82bb			bcs 	_GDCoordinate
.82b5	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.82b7	84 37		sty $37				sty 	gzTemp0+1
.82b9	80 2c		bra $82e7			bra 	_GDExecuteA 				; and execute
.82bb					_GDCoordinate:
.82bb	48		pha				pha 								; save AXY
.82bc	da		phx				phx
.82bd	5a		phy				phy
.82be	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.82c0					_GDCopy1:
.82c0	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.82c3	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.82c6	ca		dex				dex
.82c7	10 f7		bpl $82c0			bpl 	_GDCopy1
.82c9	68		pla				pla 								; update Y
.82ca	8d 2b 06	sta $062b			sta 	gxCurrentY
.82cd	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.82d0	68		pla				pla
.82d1	8d 29 06	sta $0629			sta 	gxCurrentX
.82d4	68		pla				pla 								; get A (command+X.1) back
.82d5	48		pha				pha
.82d6	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.82d8	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.82db	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.82dd					_GDCopy2:
.82dd	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.82e0	9d 31 06	sta $0631,x			sta 	gxX0,x
.82e3	ca		dex				dex
.82e4	10 f7		bpl $82dd			bpl 	_GDCopy2
.82e6	68		pla				pla 								; get command back
.82e7					_GDExecuteA:
.82e7	29 fe		and #$fe			and 	#$FE 						; lose LSB
.82e9	aa		tax				tax
.82ea	7c ee 82	jmp ($82ee,x)			jmp 	(GDVectors,x)
.82ed					GXMove:
.82ed	60		rts				rts
.82ee					GDVectors:
>82ee	85 80						.word 	GXClearBitmap 				; $00 	  	: Clear Bitmap to X
>82f0							.fill 	15*2 						; $01-$0F 	: Reserved
>830e	ed 82						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8310	cf 80						.word 	GXLine 						; $11 		: Draw line
>8312	fc 81						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8314	f9 81						.word 	GXFillRectangle 			; $13 		; Filled rectangle

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8316					RunDemos:
.8316	64 01		stz $01				stz 	1
.8318	a9 0f		lda #$0f			lda 	#$0F
.831a	8d 00 d0	sta $d000			sta 	$D000
.831d	a9 01		lda #$01			lda 	#1
.831f	8d 00 d1	sta $d100			sta 	$D100
.8322	9c 01 d1	stz $d101			stz 	$D101
.8325	9c 02 d1	stz $d102			stz 	$D102
.8328	a9 02		lda #$02			lda 	#2
.832a	8d 03 d1	sta $d103			sta 	$D103
.832d	a9 10		lda #$10			lda 	#16
.832f	8d 39 06	sta $0639			sta 	gxBasePage
.8332	a9 f0		lda #$f0			lda 	#240
.8334	8d 3a 06	sta $063a			sta 	gxHeight
.8337	a9 fc		lda #$fc			lda 	#$FC
.8339	8d 3b 06	sta $063b			sta 	gxEORValue
.833c	a9 ff		lda #$ff			lda 	#$FF
.833e	8d 3c 06	sta $063c			sta 	gxANDValue
.8341					loop:
.8341	a9 00		lda #$00			lda 	#((0)*2)+(((4) >> 8) & 1)
.8343	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8345	a0 00		ldy #$00			ldy 	#(0)
.8347	20 b1 82	jsr $82b1			jsr 	GraphicDraw
.834a	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.834c	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.834e	a0 0a		ldy #$0a			ldy 	#(10)
.8350	20 b1 82	jsr $82b1			jsr 	GraphicDraw
.8353	20 70 9a	jsr $9a70	demo:	jsr 	Random32Bit
.8356	ee 3b 06	inc $063b			inc 	gxEORValue
.8359	a9 24		lda #$24			lda 	#18*2
.835b	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.835e	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8361	20 b1 82	jsr $82b1			jsr 	GraphicDraw
.8364	80 ed		bra $8353			bra 	demo
.8366	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.8367					GXOpenBitmap:
.8367	78		sei				sei 								; no interrupts here
.8368	a5 00		lda $00				lda 	0 							; save original MMU Control register
.836a	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.836d	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.836f	85 00		sta $00				sta 	0
.8371	a5 0d		lda $0d				lda 	GFXEditSlot 				; Save the original LUT slot value
.8373	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.8376	58		cli				cli
.8377	60		rts				rts
.8378					GXCloseBitmap:
.8378	78		sei				sei
.8379	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.837c	85 0d		sta $0d				sta 	GFXEditSlot
.837e	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8381	85 00		sta $00				sta 	0
.8383	58		cli				cli
.8384	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.8385					GXPositionCalc:
.8385	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8388	85 3a		sta $3a				sta 	gsTemp
.838a	64 3b		stz $3b				stz 	gsTemp+1
.838c	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.838e	26 3b		rol $3b				rol 	gsTemp+1
.8390	06 3a		asl $3a				asl 	gsTemp
.8392	26 3b		rol $3b				rol 	gsTemp+1
.8394	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8395	65 3a		adc $3a				adc 	gsTemp
.8397	85 3a		sta $3a				sta 	gsTemp
.8399	90 02		bcc $839d			bcc 	_GXPCNoCarry
.839b	e6 3b		inc $3b				inc 	gsTemp+1
.839d					_GXPCNoCarry:
.839d	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.839f	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.83a1	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.83a3	85 36		sta $36				sta 	gzTemp0
.83a5	64 3b		stz $3b				stz 	gsTemp+1
.83a7	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.83a9					_GXPCMultiply32:
.83a9	06 3a		asl $3a				asl 	gsTemp
.83ab	26 3b		rol $3b				rol 	gsTemp+1
.83ad	3a		dec a				dec 	a
.83ae	d0 f9		bne $83a9			bne 	_GXPCMultiply32
.83b0	18		clc				clc
.83b1	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.83b4	65 3a		adc $3a				adc 	gsTemp
.83b6	8d 3f 06	sta $063f			sta 	gsOffset
.83b9	ad 32 06	lda $0632			lda 	GXX0+1
.83bc	65 3b		adc $3b				adc 	gsTemp+1
.83be	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.83c0	90 04		bcc $83c6			bcc 	_GXPCNoOverflow
.83c2	29 1f		and #$1f			and 	#$1F 						; fix it up
.83c4	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.83c6					_GXPCNoOverflow:
.83c6	09 a0		ora #$a0			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.83c8	85 3b		sta $3b				sta 	gsTemp+1
.83ca	64 3a		stz $3a				stz 	gsTemp
.83cc	18		clc				clc
.83cd	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.83cf	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.83d2	85 0d		sta $0d				sta 	GFXEditSlot 				; and map it into memory.
.83d4	60		rts				rts
.83d5					GXMovePositionDown:
.83d5	18		clc				clc 								; add 320 to offset/temp+1
.83d6	ad 3f 06	lda $063f			lda 	gsOffset
.83d9	69 40		adc #$40			adc 	#64
.83db	8d 3f 06	sta $063f			sta 	gsOffset
.83de	a5 3b		lda $3b				lda 	gsTemp+1
.83e0	69 01		adc #$01			adc 	#1
.83e2	85 3b		sta $3b				sta 	gsTemp+1
.83e4	c9 c0		cmp #$c0			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.83e6	90 07		bcc $83ef			bcc 	_GXMPDExit
.83e8	38		sec				sec  								; next page
.83e9	e9 20		sbc #$20			sbc 	#$20
.83eb	85 3b		sta $3b				sta 	gsTemp+1
.83ed	e6 0d		inc $0d				inc 	GFXEditSlot
.83ef					_GXMPDExit:
.83ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.83f0					GXSortXY:
.83f0	20 0e 84	jsr $840e			jsr 	GXSortY 					; will be sorted on Y now
.83f3	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.83f6	cd 35 06	cmp $0635			cmp 	gxX1
.83f9	ad 32 06	lda $0632			lda 	gXX0+1
.83fc	ed 36 06	sbc $0636			sbc 	gXX1+1
.83ff	90 0c		bcc $840d			bcc 	_GXSXYExit 					; X0 < X1 exit
.8401	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8403	a0 04		ldy #$04			ldy 	#4
.8405	20 22 84	jsr $8422			jsr 	GXSwapXY
.8408	e8		inx				inx
.8409	c8		iny				iny
.840a	20 22 84	jsr $8422			jsr 	GXSwapXY
.840d					_GXSXYExit:
.840d	60		rts				rts
.840e					GXSortY:
.840e	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8411	cd 37 06	cmp $0637			cmp 	gxY1
.8414	90 0b		bcc $8421			bcc 	_GXSYSorted
.8416	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8418	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.841a					_GXSwap1:
.841a	20 22 84	jsr $8422			jsr 	GXSwapXY
.841d	88		dey				dey
.841e	ca		dex				dex
.841f	10 f9		bpl $841a			bpl 	_GXSwap1
.8421					_GXSYSorted:
.8421	60		rts				rts
.8422					GXSwapXY:
.8422	bd 31 06	lda $0631,x			lda 	gxX0,x
.8425	48		pha				pha
.8426	b9 31 06	lda $0631,y			lda 	gxX0,y
.8429	9d 31 06	sta $0631,x			sta 	gxX0,x
.842c	68		pla				pla
.842d	99 31 06	sta $0631,y			sta 	gxX0,y
.8430	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8431					AssembleGroup1:
.8431	a9 ff		lda #$ff			lda 	#$FF
.8433	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8436	80 02		bra $843a			bra 	AsmGroup12
.8438					AssembleGroup2:
.8438	a5 00		lda $00				lda 	$00
.843a					AsmGroup12:
.843a	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.843d	68		pla				pla 								; pop the return address to access the information following.
.843e	fa		plx				plx
.843f	20 c8 84	jsr $84c8			jsr 	AccessParameters 			; get opcode and save as base
.8442	8d a4 04	sta $04a4			sta 	BaseOpcode
.8445	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8448	d0 08		bne $8452			bne 	_AG12HaveMask
.844a	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.844c	20 d0 84	jsr $84d0			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.844f	8d a5 04	sta $04a5			sta 	ModeMask
.8452					_AG12HaveMask:
.8452	20 0b 86	jsr $860b			jsr 	TypeAndCalculateOperand 	; get zero page type
.8455	da		phx				phx 								; save found address mode
.8456	20 34 85	jsr $8534			jsr 	AssembleModeX
.8459	fa		plx				plx  								; restore address mode
.845a	b0 0b		bcs $8467			bcs 	_AG12Exit
.845c	20 68 84	jsr $8468			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.845f	20 34 85	jsr $8534			jsr 	AssembleModeX
.8462	b0 03		bcs $8467			bcs 	_AG12Exit
.8464	4c 26 aa	jmp $aa26			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8467					_AG12Exit:
.8467	60		rts				rts
.8468					PromoteToAbsolute:
.8468	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.846a	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.846c	f0 19		beq $8487			beq 	_PTADo
.846e	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8470	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8472	f0 13		beq $8487			beq 	_PTADo
.8474	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8476	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8478	f0 0d		beq $8487			beq 	_PTADo
.847a	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.847c	e0 d1		cpx #$d1			cpx 	#AM_IND
.847e	f0 07		beq $8487			beq 	_PTADo
.8480	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8482	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8484	f0 01		beq $8487			beq 	_PTADo
.8486	60		rts				rts
.8487					_PTADo:
.8487	aa		tax				tax
.8488	60		rts				rts
.8489					AssembleGroup3:
.8489	68		pla				pla 								; get parameters, which is just the opcode.
.848a	fa		plx				plx
.848b	20 c8 84	jsr $84c8			jsr 	AccessParameters 			; get and output opcode
.848e	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte
.8491	20 6f 86	jsr $866f			jsr 	CalculateOperand 			; get a 16 bit operand
.8494	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8497	38		sec				sec
.8498	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.849b	48		pha				pha 								; LSB in A
.849c	ad 10 04	lda $0410			lda 	NSMantissa1
.849f	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.84a2	aa		tax				tax 								; MSB in X
.84a3	68		pla				pla
.84a4	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.84a5	69 7f		adc #$7f			adc 	#$7F
.84a7	90 01		bcc $84aa			bcc 	_AG3NoCarry
.84a9	e8		inx				inx
.84aa					_AG3NoCarry:
.84aa	38		sec				sec 								; fix back and write out anyways.
.84ab	e9 80		sbc #$80			sbc 	#$80
.84ad	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte
.84b0	e0 00		cpx #$00			cpx 	#0 							; was it in range
.84b2	f0 0a		beq $84be			beq 	_AG3Exit
.84b4	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.84b7	29 01		and #$01			and 	#1
.84b9	f0 03		beq $84be			beq 	_AG3Exit
.84bb	4c 2b aa	jmp $aa2b			jmp 	RangeError 					; no, branch is out of range
.84be					_AG3Exit:
.84be	60		rts				rts
.84bf					AssembleGroup4:
.84bf	68		pla				pla 								; pop address
.84c0	fa		plx				plx
.84c1	20 c8 84	jsr $84c8			jsr 	AccessParameters 			; access and get first
.84c4	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte 			; output it.
.84c7	60		rts				rts
.84c8					AccessParameters:
.84c8	8d a1 04	sta $04a1			sta 	ParamStart
.84cb	8e a2 04	stx $04a2			stx 	ParamStart+1
.84ce	a9 01		lda #$01			lda 	#1
.84d0					GetParameter:
.84d0	5a		phy				phy
.84d1	a8		tay				tay
.84d2	ad a1 04	lda $04a1			lda 	ParamStart
.84d5	85 36		sta $36				sta 	zTemp0
.84d7	ad a2 04	lda $04a2			lda 	ParamStart+1
.84da	85 37		sta $37				sta 	zTemp0+1
.84dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.84de	7a		ply				ply
.84df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.84e0					AssemblerWriteByte:
.84e0	48		pha			pha
.84e1	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.84e4	29 02		and #$02		and 	#2
.84e6	f0 1b		beq $8503		beq 	_AWBNoPrint
.84e8	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.84eb	20 1e 85	jsr $851e		jsr 	PrintHex
.84ee	ad 9e 04	lda $049e		lda		AssemblerAddress
.84f1	20 1e 85	jsr $851e		jsr 	PrintHex
.84f4	a9 20		lda #$20		lda 	#' '
.84f6	20 cb ab	jsr $abcb		jsr 	EXTPrintCharacter
.84f9	68		pla			pla 									; print byte
.84fa	48		pha			pha
.84fb	20 1e 85	jsr $851e		jsr 	PrintHex
.84fe	a9 0d		lda #$0d		lda 	#13
.8500	20 cb ab	jsr $abcb		jsr 	EXTPrintCharacter
.8503					_AWBNoPrint:
.8503	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8506	85 36		sta $36			sta 	zTemp0
.8508	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.850b	f0 0e		beq $851b		beq 	_AWBRange
.850d	85 37		sta $37			sta 	zTemp0+1
.850f	68		pla			pla 									; write byte out
.8510	92 36		sta ($36)		sta 	(zTemp0)
.8512	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8515	d0 03		bne $851a		bne 	_AWBNoCarry
.8517	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.851a					_AWBNoCarry:
.851a	60		rts			rts
.851b					_AWBRange:
.851b	4c 2b aa	jmp $aa2b		jmp 	RangeError
.851e					PrintHex:
.851e	48		pha				pha
.851f	4a		lsr a				lsr 	a
.8520	4a		lsr a				lsr 	a
.8521	4a		lsr a				lsr 	a
.8522	4a		lsr a				lsr 	a
.8523	20 27 85	jsr $8527			jsr 	_PrintNibble
.8526	68		pla				pla
.8527					_PrintNibble:
.8527	29 0f		and #$0f			and 	#15
.8529	c9 0a		cmp #$0a			cmp 	#10
.852b	90 02		bcc $852f			bcc 	_NoShift
.852d	69 06		adc #$06			adc 	#6
.852f					_NoShift:
.852f	69 30		adc #$30			adc 	#48
.8531	4c cb ab	jmp $abcb			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8534					AssembleModeX:
.8534	5a		phy				phy
.8535	ad a3 04	lda $04a3			lda 	IsGroup1
.8538	f0 17		beq $8551			beq 	_AMXGroup2
.853a	8a		txa				txa 							; is it in group # 1
.853b	29 40		and #$40			and 	#AM_ISG1
.853d	f0 50		beq $858f			beq 	_AMXFail 				; no, give up.
.853f	8a		txa				txa 							; get back.
.8540	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8542	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8544	d0 22		bne $8568			bne 	_AMXHaveInfo
.8546	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8549	c9 81		cmp #$81			cmp 	#$81
.854b	f0 42		beq $858f			beq 	_AMXFail
.854d	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.854f	80 17		bra $8568			bra 	_AMXHaveInfo 			; odd design decision there.
.8551					_AMXGroup2:
.8551	8a		txa				txa 							; is it in group 2 ?
.8552	29 20		and #$20			and 	#AM_ISG2
.8554	f0 39		beq $858f			beq 	_AMXFail 				; no, give up.
.8556	8a		txa				txa 							; get the offset into Y
.8557	29 1f		and #$1f			and 	#$1F
.8559	4a		lsr a				lsr 	a 						; make it 0-7.
.855a	4a		lsr a				lsr  	a
.855b	a8		tay				tay
.855c	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.855f					_AMXCheckOkay:
.855f	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8560	88		dey				dey
.8561	10 fc		bpl $855f			bpl 	_AMXCheckOkay
.8563	90 2a		bcc $858f			bcc 	_AMXFail 				; not allowed.
.8565	8a		txa				txa  							; get mask back
.8566	29 1f		and #$1f			and 	#$1F
.8568					_AMXHaveInfo:
.8568	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.856a	10 05		bpl $8571			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.856c	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.856f	d0 1e		bne $858f			bne 	_AMXFail
.8571					_AMXAnySize:
.8571	18		clc				clc 							; add offset to the base opcode
.8572	6d a4 04	adc $04a4			adc 	BaseOpcode
.8575					_AMXOutputCode:
.8575	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte 		; write the opcode out.
.8578	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.857a	f0 10		beq $858c			beq 	_AMXExit
.857c	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.857f	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte
.8582	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8584	30 06		bmi $858c			bmi 	_AMXExit
.8586	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8589	20 e0 84	jsr $84e0			jsr 	AssemblerWriteByte
.858c					_AMXExit:
.858c	7a		ply				ply
.858d	38		sec				sec
.858e	60		rts				rts
.858f					_AMXFail:
.858f	a0 00		ldy #$00			ldy 	#0
.8591					_AMXCheckOddities:
.8591	8a		txa				txa
.8592	d9 ba 85	cmp $85ba,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8595	d0 16		bne $85ad			bne 	_AMXCONext
.8597	b9 b8 85	lda $85b8,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.859a	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.859d	d0 0e		bne $85ad			bne 	_AMXCONext
.859f	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.85a1	10 05		bpl $85a8			bpl 	_AMXCONotZero
.85a3	ad 10 04	lda $0410			lda 	NSMantissa1
.85a6	d0 05		bne $85ad			bne 	_AMXCONext
.85a8					_AMXCONotZero:
.85a8	b9 b9 85	lda $85b9,y			lda 	ExtraOpcode+1,y 		; get new opcode
.85ab	80 c8		bra $8575			bra 	_AMXOutputCode 			; and assemble it
.85ad					_AMXCONext:
.85ad	c8		iny				iny
.85ae	c8		iny				iny
.85af	c8		iny				iny
.85b0	b9 b8 85	lda $85b8,y			lda 	ExtraOpcode+0,y 		; end of table
.85b3	d0 dc		bne $8591			bne 	_AMXCheckOddities
.85b5					_AMXCOFail:
.85b5	7a		ply				ply
.85b6	18		clc				clc
.85b7	60		rts				rts
.85b8					ExtraOpcode:
>85b8	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>85bb	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>85be	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>85c1	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>85c4	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>85c7	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>85ca	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>85cd	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>85d0	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>85d3	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>85d6	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.85d7					LabelHere:
.85d7	c8		iny				iny 								; skip .
.85d8	a2 00		ldx #$00			ldx 	#0 							; get a term
.85da	20 e1 97	jsr $97e1			jsr 	EvaluateTerm 				; get a term
.85dd	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.85e0	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.85e2	d0 24		bne $8608			bne 	_ALType
.85e4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.85e7	85 36		sta $36				sta 	zTemp0
.85e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.85ec	85 37		sta $37				sta 	zTemp0+1
.85ee	5a		phy				phy 								; copy address in.
.85ef	a0 01		ldy #$01			ldy 	#1
.85f1	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.85f4	92 36		sta ($36)			sta 	(zTemp0)
.85f6	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.85f9	91 36		sta ($36),y			sta 	(zTemp0),y
.85fb	c8		iny				iny
.85fc	a9 00		lda #$00			lda 	#0
.85fe	91 36		sta ($36),y			sta 	(zTemp0),y
.8600	c8		iny				iny
.8601	91 36		sta ($36),y			sta 	(zTemp0),y
.8603	c8		iny				iny
.8604	91 36		sta ($36),y			sta 	(zTemp0),y
.8606	7a		ply				ply
.8607	60		rts				rts
.8608					_ALType:
.8608	4c 30 aa	jmp $aa30			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.860b					TypeAndCalculateOperand:
.860b	b1 30		lda ($30),y			lda 	(codePtr),y
.860d	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.860f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8611	f0 5b		beq $866e			beq 	_TACOExit
.8613	c9 80		cmp #$80			cmp 	#KWC_EOL
.8615	f0 57		beq $866e			beq 	_TACOExit
.8617	c8		iny				iny
.8618	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.861a	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.861c	f0 51		beq $866f			beq 	CalculateOperand
.861e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8620	f0 1f		beq $8641			beq 	_TACOIndirect
.8622	88		dey				dey 								; undo get of first character
.8623	20 6f 86	jsr $866f			jsr 	CalculateOperand 			; get operand
.8626	b1 30		lda ($30),y			lda 	(codePtr),y
.8628	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.862a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.862c	d0 40		bne $866e			bne 	_TACOExit
.862e	c8		iny				iny
.862f	20 b7 a3	jsr $a3b7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8632	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8634	c9 58		cmp #$58			cmp 	#'X'
.8636	f0 36		beq $866e			beq 	_TACOExit
.8638	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.863a	c9 59		cmp #$59			cmp 	#'Y'
.863c	f0 30		beq $866e			beq 	_TACOExit
.863e					_TACOSyntax:
.863e	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.8641					_TACOIndirect:
.8641	20 6f 86	jsr $866f			jsr 	CalculateOperand 			; get the operand
.8644	b1 30		lda ($30),y			lda 	(codePtr),y
.8646	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8648	f0 17		beq $8661			beq 	_TACOIndX
.864a	20 40 a4	jsr $a440			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.864d	b1 30		lda ($30),y			lda 	(codePtr),y
.864f	a2 d1		ldx #$d1			ldx 	#AM_IND
.8651	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8653	d0 19		bne $866e			bne 	_TACOExit
.8655	c8		iny				iny
.8656	20 b7 a3	jsr $a3b7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8659	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.865b	d0 e1		bne $863e			bne 	_TACOSyntax
.865d	a2 d0		ldx #$d0			ldx 	#AM_INDY
.865f	80 0d		bra $866e			bra 	_TACOExit
.8661					_TACOIndX:
.8661	c8		iny				iny
.8662	20 b7 a3	jsr $a3b7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8665	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8667	d0 d5		bne $863e			bne 	_TACOSyntax
.8669	20 40 a4	jsr $a440			jsr 	CheckRightBracket			; check )
.866c	a2 c0		ldx #$c0			ldx 	#AM_INDX
.866e					_TACOExit:
.866e	60		rts				rts
.866f					CalculateOperand:
.866f	48		pha				pha
.8670	da		phx				phx
.8671	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8673	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger
.8676	fa		plx				plx
.8677	68		pla				pla
.8678	60		rts				rts
.a3b7					TACOCheckXY:
.a3b7	b1 30		lda ($30),y			lda 	(codePtr),y
.a3b9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a3bb	c9 40		cmp #$40			cmp 	#$40
.a3bd	d0 21		bne $a3e0			bne 	_TCXYFail
.a3bf	b1 30		lda ($30),y			lda 	(codePtr),y
.a3c1	18		clc				clc
.a3c2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a3c4	85 37		sta $37				sta 	zTemp0+1
.a3c6	c8		iny				iny
.a3c7	b1 30		lda ($30),y			lda 	(codePtr),y
.a3c9	c8		iny				iny
.a3ca	85 36		sta $36				sta 	zTemp0
.a3cc	5a		phy				phy 								; save position
.a3cd	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a3cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3d1	d0 0c		bne $a3df			bne 	_TCXYPopFail
.a3d3	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a3d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3d7	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a3d9	f0 08		beq $a3e3			beq 	_TCXYFound
.a3db	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a3dd	f0 04		beq $a3e3			beq 	_TCXYFound
.a3df					_TCXYPopFail:
.a3df	7a		ply				ply
.a3e0					_TCXYFail:
.a3e0	a9 00		lda #$00			lda 	#0
.a3e2	60		rts				rts
.a3e3					_TCXYFound:
.a3e3	7a		ply				ply 								; restore position
.a3e4	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a3e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8679					EditProgramCode:
.8679	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.867c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.867f	20 1e 9d	jsr $9d1e			jsr 	MemorySearch
.8682	90 05		bcc $8689			bcc 	_EPCNoDelete 				; reached the end don't delete
.8684	d0 03		bne $8689			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8686	20 0f ac	jsr $ac0f			jsr 	MemoryDeleteLine 			; delete the line
.8689					_EPCNoDelete:
.8689	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.868c	c9 80		cmp #$80			cmp 	#KWC_EOL
.868e	f0 0d		beq $869d			beq 	_EPCNoInsert
.8690	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8693	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8696	20 1e 9d	jsr $9d1e			jsr 	MemorySearch
.8699	18		clc				clc 								; insert at this point.
.869a	20 46 ac	jsr $ac46			jsr 	MemoryInsertLine 			; insert the line
.869d					_EPCNoInsert:
.869d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.869e					WarmStart:
.869e	a2 ff		ldx #$ff			ldx 	#$FF
.86a0	9a		txs				txs
.86a1	20 e1 ab	jsr $abe1			jsr 	EXTInputLine 				; get line to lineBuffer
.86a4	20 38 a1	jsr $a138			jsr 	TokeniseLine 				; tokenise the line
.86a7	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.86aa	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.86ad	d0 17		bne $86c6			bne 	_WSEditCode 				; if so,edit code.
.86af	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.86b2	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.86b4	85 30		sta $30				sta 	codePtr
.86b6	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.86b8	85 31		sta $31				sta 	codePtr+1
.86ba	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.86bd	c9 80		cmp #$80			cmp 	#KWC_EOL
.86bf	f0 dd		beq $869e			beq 	WarmStart
.86c1	20 cf 8c	jsr $8ccf			jsr 	RUNCodePointerLine 			; execute that line.
.86c4	80 d8		bra $869e			bra 	WarmStart
.86c6					_WSEditCode:
.86c6	20 79 86	jsr $8679			jsr 	EditProgramCode
.86c9	20 37 87	jsr $8737			jsr 	ClearCommand
.86cc	80 d0		bra $869e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.86ce					AssembleCommand:
.86ce	a2 00		ldx #$00			ldx 	#0
.86d0	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger 		; start address
.86d3	ad 08 04	lda $0408			lda 	NSMantissa0
.86d6	8d 9e 04	sta $049e			sta 	AssemblerAddress
.86d9	ad 10 04	lda $0410			lda 	NSMantissa1
.86dc	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.86df	20 48 a4	jsr $a448			jsr 	CheckComma
.86e2	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; options
.86e5	ad 08 04	lda $0408			lda 	NSMantissa0
.86e8	8d a0 04	sta $04a0			sta 	AssemblerControl
.86eb	60		rts				rts
.86ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.86ed					AssertCommand:
.86ed	a2 00		ldx #$00			ldx 	#0
.86ef	20 36 9c	jsr $9c36			jsr 	EvaluateInteger 			; the assert test
.86f2	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; exit if result is non zero.
.86f5	d0 05		bne $86fc			bne 	_ACExit
.86f7	a9 0a		lda #$0a		lda	#10
.86f9	4c 07 91	jmp $9107		jmp	ErrorHandler
.86fc					_ACExit:
.86fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86fd					CallCommand:
.86fd	a2 00		ldx #$00			ldx 	#0
.86ff	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger
.8702					_CCClear
.8702	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8703	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.8706	e0 04		cpx #$04			cpx 	#4
.8708	d0 f8		bne $8702			bne 	_CCClear
.870a	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.870c					_CCCParam:
.870c	b1 30		lda ($30),y			lda 	(codePtr),y
.870e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8710	d0 09		bne $871b			bne 	_CCCRun6502
.8712	c8		iny				iny 								; skip comma
.8713	e8		inx				inx	 								; next level
.8714	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8717	e0 03		cpx #$03			cpx 	#3
.8719	90 f1		bcc $870c			bcc 	_CCCParam 					; done all 3 ?
.871b					_CCCRun6502:
.871b	5a		phy				phy 								; save position
.871c	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.871f	85 37		sta $37				sta 	zTemp0+1
.8721	ad 08 04	lda $0408			lda 	NSMantissa0
.8724	85 36		sta $36				sta 	zTemp0
.8726	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8729	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.872c	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.872f	20 34 87	jsr $8734			jsr 	_CCCZTemp0 					; call zTemp0
.8732	7a		ply				ply 								; restore position and exit
.8733	60		rts				rts
.8734					_CCCZTemp0:
.8734	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8737					ClearCommand:
.8737	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8739	85 36		sta $36				sta 	0+zTemp0
.873b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.873d	85 37		sta $37				sta 	1+zTemp0
.873f					_ClearZeroLoop:
.873f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8741	f0 24		beq $8767			beq 	_ClearZeroEnd
.8743	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8745	a9 00		lda #$00			lda 	#0
.8747					_ClearOneVariable:
.8747	91 36		sta ($36),y			sta 	(zTemp0),y
.8749	c8		iny				iny
.874a	c0 08		cpy #$08			cpy 	#8
.874c	d0 f9		bne $8747			bne 	_ClearOneVariable
.874e	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8750	b1 36		lda ($36),y			lda 	(zTemp0),y
.8752	c9 18		cmp #$18			cmp 	#NSTProcedure
.8754	d0 04		bne $875a			bne 	_ClearNotProcedure
.8756	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8758	91 36		sta ($36),y			sta 	(zTemp0),y
.875a					_ClearNotProcedure:
.875a	18		clc				clc 								; go to the next variable
.875b	b2 36		lda ($36)			lda 	(zTemp0)
.875d	65 36		adc $36				adc 	zTemp0
.875f	85 36		sta $36				sta 	zTemp0
.8761	90 dc		bcc $873f			bcc 	_ClearZeroLoop
.8763	e6 37		inc $37				inc 	zTemp0+1
.8765	80 d8		bra $873f			bra 	_ClearZeroLoop
.8767					_ClearZeroEnd:
.8767	18		clc				clc
.8768	a5 36		lda $36				lda 	zTemp0
.876a	69 01		adc #$01			adc 	#1
.876c	8d 8c 04	sta $048c			sta 	lowMemPtr
.876f	a5 37		lda $37				lda 	zTemp0+1
.8771	69 00		adc #$00			adc 	#0
.8773	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8776	20 d8 9d	jsr $9dd8			jsr 	StackReset
.8779	20 29 ad	jsr $ad29			jsr 	StringSystemInitialise
.877c	20 27 90	jsr $9027			jsr 	ProcedureScan
.877f	20 8b 8c	jsr $8c8b			jsr 	Command_Restore
.8782	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8785	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8788	9c a0 04	stz $04a0			stz 	AssemblerControl
.878b	20 ce 99	jsr $99ce			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.878e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.878f					Command_Data:
.878f	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8791	a2 80		ldx #$80			ldx 	#KWC_EOL
.8793	20 79 90	jsr $9079			jsr 	ScanForward
.8796	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8797					DimCommand:
.8797	b1 30		lda ($30),y			lda 	(codePtr),y
.8799	29 c0		and #$c0			and 	#$C0
.879b	c9 40		cmp #$40			cmp 	#$40
.879d	d0 7a		bne $8819			bne 	_DCSyntax
.879f	b1 30		lda ($30),y			lda 	(codePtr),y
.87a1	18		clc				clc
.87a2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87a4	85 3f		sta $3f				sta 	zaTemp+1
.87a6	c8		iny				iny
.87a7	b1 30		lda ($30),y			lda 	(codePtr),y
.87a9	c8		iny				iny
.87aa	85 3e		sta $3e				sta 	zaTemp
.87ac	5a		phy				phy
.87ad	a0 02		ldy #$02			ldy 	#2 						; read type byte
.87af	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b1	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87b3	c9 18		cmp #$18			cmp 	#NSTProcedure
.87b5	f0 62		beq $8819			beq 	_DCSyntax
.87b7	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87b9	29 04		and #$04			and 	#NSBIsArray
.87bb	f0 64		beq $8821			beq 	_DCType
.87bd	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87bf	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c1	d0 59		bne $881c			bne 	_DCRedefine
.87c3	7a		ply				ply
.87c4	20 24 88	jsr $8824			jsr 	_DCGetSize 				; get array size, check it.
.87c7	5a		phy				phy
.87c8	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87ca	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87cc	7a		ply				ply 							; is there a second (e.g. ,x)
.87cd	b1 30		lda ($30),y			lda 	(codePtr),y
.87cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87d1	d0 0a		bne $87dd			bne 	_DCOneDimension
.87d3	c8		iny				iny 							; skip comma
.87d4	20 24 88	jsr $8824			jsr 	_DCGetSize 				; get 2nd array size
.87d7	5a		phy				phy
.87d8	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87da	91 3e		sta ($3e),y			sta 	(zaTemp),y
.87dc	7a		ply				ply
.87dd					_DCOneDimension:
.87dd	5a		phy				phy 							; save position
.87de	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87e0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87e2	aa		tax				tax
.87e3	c8		iny				iny
.87e4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87e6	e8		inx				inx 							; bump them.
.87e7	1a		inc a				inc 	a
.87e8	20 c2 a8	jsr $a8c2			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87eb	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87ed	29 e0		and #$e0			and 	#$E0
.87ef	d0 23		bne $8814			bne 	_DCSize
.87f1	a0 02		ldy #$02			ldy 	#2 						; get base type
.87f3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87f5	20 32 88	jsr $8832			jsr 	ScaleByBaseType 		; scale by base type
.87f8	a5 36		lda $36				lda 	zTemp0
.87fa	a6 37		ldx $37				ldx 	zTemp0+1
.87fc	20 90 99	jsr $9990			jsr 	AllocateXABytes 		; allocate memory
.87ff	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8801	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8803	c8		iny				iny
.8804	8a		txa				txa
.8805	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8807	7a		ply				ply 							; get position back
.8808	20 40 a4	jsr $a440			jsr 	CheckRightBracket 		; check )
.880b	b1 30		lda ($30),y			lda 	(codePtr),y
.880d	c8		iny				iny 							; consume in case
.880e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8810	f0 85		beq $8797			beq 	DimCommand
.8812	88		dey				dey 							; undo consume
.8813	60		rts				rts
.8814					_DCSize:
.8814	a9 16		lda #$16		lda	#22
.8816	4c 07 91	jmp $9107		jmp	ErrorHandler
.8819					_DCSyntax:
.8819	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.881c					_DCRedefine:
.881c	a9 15		lda #$15		lda	#21
.881e	4c 07 91	jmp $9107		jmp	ErrorHandler
.8821					_DCType:
.8821	4c 30 aa	jmp $aa30			jmp 	TypeError
.8824					_DCGetSize:
.8824	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8826	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 	; get array dimension
.8829	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.882b	f0 e7		beq $8814			beq 	_DCSize
.882d	c9 fe		cmp #$fe			cmp 	#254
.882f	f0 e3		beq $8814			beq 	_DCSize
.8831	60		rts				rts
.8832					ScaleByBaseType:
.8832	29 10		and #$10			and 	#NSBIsString 			; is it string
.8834	d0 19		bne $884f			bne 	_SBBTString
.8836	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8838	48		pha				pha
.8839	a5 36		lda $36				lda 	zTemp0
.883b	48		pha				pha
.883c	06 36		asl $36				asl 	zTemp0 					; x 2
.883e	26 37		rol $37				rol 	zTemp0+1
.8840	06 36		asl $36				asl 	zTemp0 					; x 4
.8842	26 37		rol $37				rol 	zTemp0+1
.8844	68		pla				pla 							; add stacked value = x 5
.8845	65 36		adc $36				adc 	zTemp0
.8847	85 36		sta $36				sta 	zTemp0
.8849	68		pla				pla
.884a	65 37		adc $37				adc 	zTemp0+1
.884c	85 37		sta $37				sta 	zTemp0+1
.884e	60		rts				rts
.884f					_SBBTString:
.884f	06 36		asl $36				asl 	zTemp0
.8851	26 37		rol $37				rol 	zTemp0+1
.8853	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8854					EndCommand:
.8854	4c 9e 86	jmp $869e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8857					ForCommand:
.8857	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8859	20 73 9d	jsr $9d73			jsr 	StackOpen
.885c	a2 00		ldx #$00			ldx 	#0
.885e	20 e1 97	jsr $97e1			jsr 	EvaluateTerm
.8861	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8864	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8866	d0 49		bne $88b1			bne		_FCError
.8868	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.886a	20 50 a4	jsr $a450			jsr 	CheckNextA
.886d	e8		inx				inx
.886e	20 36 9c	jsr $9c36			jsr 	EvaluateInteger 			; <from> in +1
.8871	b1 30		lda ($30),y			lda 	(codePtr),y
.8873	c8		iny				iny 								; consume it
.8874	48		pha				pha 								; save on stack for later
.8875	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8877	f0 04		beq $887d			beq 	_FCNoSyntax
.8879	c9 b0		cmp #$b0			cmp 	#KWD_TO
.887b	d0 37		bne $88b4			bne 	_FCSyntaxError
.887d					_FCNoSyntax:
.887d	e8		inx				inx
.887e	20 36 9c	jsr $9c36			jsr 	EvaluateInteger
.8881	20 b7 9d	jsr $9db7			jsr 	STKSaveCodePosition 		; save loop back position
.8884	68		pla				pla 								; restore DOWNTO or TO
.8885	5a		phy				phy 								; save Y on the stack
.8886	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8888	f0 02		beq $888c			beq 	_FCNotDownTo
.888a	a9 02		lda #$02			lda 	#2
.888c					_FCNotDownTo:
.888c	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.888d	a0 10		ldy #$10			ldy 	#16
.888f	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8891	a0 06		ldy #$06			ldy 	#6
.8893	ad 08 04	lda $0408			lda 	NSMantissa0
.8896	91 34		sta ($34),y			sta 	(basicStack),y
.8898	ad 10 04	lda $0410			lda 	NSMantissa1
.889b	c8		iny				iny
.889c	91 34		sta ($34),y			sta 	(basicStack),y
.889e	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.88a0	a2 01		ldx #$01			ldx 	#1
.88a2	20 b7 88	jsr $88b7			jsr 	FCIntegerToStack
.88a5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.88a7	a2 02		ldx #$02			ldx 	#2
.88a9	20 b7 88	jsr $88b7			jsr 	FCIntegerToStack
.88ac	20 d7 88	jsr $88d7			jsr 	CopyIndexToReference
.88af	7a		ply				ply 								; restore position
.88b0	60		rts				rts
.88b1					_FCError:
.88b1	4c 30 aa	jmp $aa30			jmp 	TypeError
.88b4					_FCSyntaxError:
.88b4	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.88b7					FCIntegerToStack:
.88b7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.88ba	10 03		bpl $88bf			bpl	 	_FCNotNegative
.88bc	20 74 9c	jsr $9c74			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.88bf					_FCNotNegative:
.88bf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.88c2	91 34		sta ($34),y			sta 	(basicStack),y
.88c4	c8		iny				iny
.88c5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.88c8	91 34		sta ($34),y			sta 	(basicStack),y
.88ca	c8		iny				iny
.88cb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.88ce	91 34		sta ($34),y			sta 	(basicStack),y
.88d0	c8		iny				iny
.88d1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.88d4	91 34		sta ($34),y			sta 	(basicStack),y
.88d6	60		rts				rts
.88d7					CopyIndexToReference:
.88d7	5a		phy				phy
.88d8	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.88da	38		sec				sec 								; (because we copy from offset 8)
.88db	b1 34		lda ($34),y			lda 	(basicStack),y
.88dd	e9 08		sbc #$08			sbc 	#8
.88df	85 36		sta $36				sta 	zTemp0
.88e1	c8		iny				iny
.88e2	b1 34		lda ($34),y			lda 	(basicStack),y
.88e4	e9 00		sbc #$00			sbc 	#0
.88e6	85 37		sta $37				sta 	zTemp0+1
.88e8	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.88ea	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.88ec	b1 34		lda ($34),y			lda 	(basicStack),y
.88ee	0a		asl a				asl 	a 							; into carry
.88ef	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.88f1	90 14		bcc $8907			bcc 	_CITRNormal
.88f3	38		sec				sec
.88f4					_CITRNegative:
.88f4	a9 00		lda #$00			lda 	#0
.88f6	f1 34		sbc ($34),y			sbc 	(basicStack),y
.88f8	91 36		sta ($36),y			sta 	(zTemp0),y
.88fa	c8		iny				iny
.88fb	ca		dex				dex
.88fc	d0 f6		bne $88f4			bne 	_CITRNegative
.88fe	88		dey				dey 								; look at MSB of mantissa
.88ff	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8901	09 80		ora #$80			ora 	#$80
.8903	91 36		sta ($36),y			sta 	(zTemp0),y
.8905	7a		ply				ply
.8906	60		rts				rts
.8907					_CITRNormal:
.8907	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8909	91 36		sta ($36),y			sta 	(zTemp0),y
.890b	c8		iny				iny
.890c	ca		dex				dex
.890d	d0 f8		bne $8907			bne 	_CITRNormal
.890f	7a		ply				ply 								; and exit.
.8910	60		rts				rts
.8911					NextCommand:
.8911	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8913	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8915	20 9f 9d	jsr $9d9f			jsr 	StackCheckFrame
.8918	5a		phy				phy
.8919	a0 10		ldy #$10			ldy 	#16 						; get the step count
.891b	b1 34		lda ($34),y			lda 	(basicStack),y
.891d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.891f	30 02		bmi $8923			bmi 	_NCStepNeg
.8921	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8923					_NCStepNeg:
.8923	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8925	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8927	18		clc				clc
.8928					_NCBump:
.8928	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.892a	91 34		sta ($34),y			sta 	(basicStack),y
.892c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.892e	c8		iny				iny 								; next byte
.892f	ca		dex				dex 								; do four times
.8930	d0 f6		bne $8928			bne 	_NCBump
.8932	20 d7 88	jsr $88d7			jsr		CopyIndexToReference		; copy it to the reference variable.
.8935	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8937	b1 34		lda ($34),y			lda 	(basicStack),y
.8939	0a		asl a				asl 	a 							; sign bit to carry
.893a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.893c	85 38		sta $38				sta 	zTemp1
.893e	90 02		bcc $8942			bcc 	_NCCompRev 					; use if step is +ve
.8940	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8942					_NCCompRev:
.8942	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8944	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8946	85 39		sta $39				sta 	zTemp1+1
.8948	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.894a	38		sec				sec
.894b					_NCCompare:
.894b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.894d	b1 34		lda ($34),y			lda 	(basicStack),y
.894f	a4 39		ldy $39				ldy 	zTemp1+1
.8951	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8953	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8955	e6 39		inc $39				inc 	zTemp1+1
.8957	ca		dex				dex 								; do it 4 times.
.8958	d0 f1		bne $894b			bne 	_NCCompare
.895a	50 02		bvc $895e			bvc 	_NCNoOverflow 				; convert to signed comparison
.895c	49 80		eor #$80			eor 	#$80
.895e					_NCNoOverflow:
.895e	7a		ply				ply 								; restore Y position
.895f	0a		asl a				asl 	a 							; is bit 7 set.
.8960	90 04		bcc $8966			bcc 	_NCLoopback 				; if no , >= so loop back
.8962	20 91 9d	jsr $9d91			jsr 	StackClose 					; exit the loop
.8965	60		rts				rts
.8966					_NCLoopBack:
.8966	20 c8 9d	jsr $9dc8			jsr 	STKLoadCodePosition 		; loop back
.8969	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.896a					Command_GOSUB:
.896a	a2 00		ldx #$00			ldx 	#0
.896c	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.896f	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8971	20 73 9d	jsr $9d73			jsr 	StackOpen 					; create frame
.8974	20 b7 9d	jsr $9db7			jsr 	STKSaveCodePosition 		; save current position
.8977	4c 8d 89	jmp $898d			jmp 	GotoStackX
.897a					Command_RETURN:
.897a	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.897c	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.897e	20 9f 9d	jsr $9d9f			jsr 	StackCheckFrame
.8981	20 c8 9d	jsr $9dc8			jsr 	STKLoadCodePosition 		; restore code position
.8984	20 91 9d	jsr $9d91			jsr 	StackClose
.8987	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8988					GotoCommand:
.8988	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.898a	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger
.898d					GotoStackX:
.898d	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8990	48		pha				pha 								; it is slightly inefficient, just in cases.
.8991	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8994	fa		plx				plx
.8995	20 1e 9d	jsr $9d1e			jsr 	MemorySearch 				; transfer to line number AX.
.8998	90 05		bcc $899f			bcc 	_GotoError 					; not found, off end.
.899a	d0 03		bne $899f			bne 	_GotoError 					; not found exactly
.899c	4c c8 8c	jmp $8cc8			jmp 	RunNewLine 					; and go straight to new line code.
.899f					_GotoError:
.899f	a9 0d		lda #$0d		lda	#13
.89a1	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.89a4					IfCommand:
.89a4	a2 00		ldx #$00			ldx 	#0 							; If what.
.89a6	20 13 9c	jsr $9c13			jsr 	EvaluateNumber
.89a9	b1 30		lda ($30),y			lda 	(codePtr),y
.89ab	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.89ad	d0 0a		bne $89b9			bne 	_IFStructured
.89af	c8		iny				iny 								; consume THEN
.89b0	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; is it zero
.89b3	f0 01		beq $89b6			beq 	_IfFail 					; if fail, go to next line
.89b5	60		rts				rts 								; if THEN just continue
.89b6					_IfFail:
.89b6	4c 2d 8d	jmp $8d2d			jmp 	EOLCommand
.89b9					_IfStructured:
.89b9	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; is it zero
.89bc	d0 07		bne $89c5			bne 	_IfExit 					; if not, then continue normally.
.89be	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.89c0	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.89c2	20 79 90	jsr $9079			jsr 	ScanForward 				; and run from there/
.89c5					_IfExit:
.89c5	60		rts				rts
.89c6					ElseCode:
.89c6	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.89c8	aa		tax				tax 								; so just go to the structure exit
.89c9	20 79 90	jsr $9079			jsr 	ScanForward
.89cc	60		rts				rts
.89cd					EndIf:
.89cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.89ce					LetCommand:
.89ce	a2 00		ldx #$00			ldx 	#0
.89d0	b1 30		lda ($30),y			lda 	(codePtr),y
.89d2	c9 10		cmp #$10			cmp 	#KWD_AT
.89d4	d0 16		bne $89ec			bne 	_LCStandard
.89d6	c8		iny				iny 								; skip equal
.89d7	20 e1 97	jsr $97e1			jsr 	EvaluateTerm 				; get a number
.89da	20 25 96	jsr $9625			jsr 	Dereference 				; dereference it
.89dd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.89e0	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.89e2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.89e5	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.89e7	d0 10		bne $89f9			bne 	_LCMain
.89e9	4c 30 aa	jmp $aa30			jmp 	TypeError 					; was a reference before.
.89ec					_LCStandard:
.89ec	ad f8 94	lda $94f8			lda 	PrecedenceLevel+"*"			; precedence > this
.89ef	20 12 95	jsr $9512			jsr 	EvaluateExpressionAtPrecedence
.89f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.89f5	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.89f7	f0 0e		beq $8a07			beq 	_LetGoProc 					; it's a procedure call.
.89f9					_LCMain:
.89f9	a9 3d		lda #$3d			lda 	#"=" 						; check =
.89fb	20 50 a4	jsr $a450			jsr 	CheckNextA
.89fe	e8		inx				inx 								; RHS
.89ff	20 0a 9c	jsr $9c0a			jsr 	EvaluateValue
.8a02	ca		dex				dex
.8a03	20 0a 8a	jsr $8a0a			jsr 	AssignVariable
.8a06	60		rts				rts
.8a07					_LetGoProc:
.8a07	4c a3 8b	jmp $8ba3			jmp 	CallProcedure
.8a0a					AssignVariable:
.8a0a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8a0d	48		pha				pha 								; save a copy
.8a0e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8a11	29 10		and #$10			and 	#NSBIsString
.8a13	d0 0b		bne $8a20			bne 	_ASError
.8a15	68		pla				pla 								; get back
.8a16	29 10		and #$10			and 	#NSBIsString 				; check type
.8a18	d0 03		bne $8a1d			bne 	_ASString
.8a1a	4c 4d 95	jmp $954d			jmp 	AssignNumber
.8a1d					_ASString:
.8a1d	4c bb 95	jmp $95bb			jmp 	AssignString
.8a20					_ASError:
.8a20	4c 30 aa	jmp $aa30			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8a23					Command_List:
.8a23	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8a26	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8a29	a9 ff		lda #$ff			lda 	#$FF
.8a2b	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8a2e	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8a31	b1 30		lda ($30),y			lda 	(codePtr),y
.8a33	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a35	f0 1e		beq $8a55			beq 	_CLSecond
.8a37	20 b3 8a	jsr $8ab3			jsr 	CLIsDigit 					; if not digit, list all
.8a3a	b0 24		bcs $8a60			bcs 	_CLStart
.8a3c	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8a3e	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger
.8a41	b1 30		lda ($30),y			lda 	(codePtr),y
.8a43	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a45	f0 0e		beq $8a55			beq 	_CLSecond 					; if so go get it
.8a47	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8a4a	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8a4d	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8a50	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8a53	80 0b		bra $8a60			bra 	_CLStart
.8a55					_CLSecond:
.8a55	c8		iny				iny 								; consume comma
.8a56	20 b3 8a	jsr $8ab3			jsr 	CLIsDigit 					; digit found
.8a59	b0 05		bcs $8a60			bcs 	_CLStart 					; if not, continue listing
.8a5b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8a5d	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger
.8a60					_CLStart
.8a60	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a62	85 30		sta $30				sta 	codePtr
.8a64	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a66	85 31		sta $31				sta 	codePtr+1
.8a68					_CLLoop:
.8a68	20 0c ac	jsr $ac0c			jsr 	EXTBreakCheck 				; break check
.8a6b	f0 30		beq $8a9d			beq 	_CLExit
.8a6d	b2 30		lda ($30)			lda 	(codePtr)
.8a6f	f0 2c		beq $8a9d			beq 	_CLExit
.8a71	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8a73	20 a0 8a	jsr $8aa0			jsr 	CLCompareLineNo
.8a76	90 18		bcc $8a90			bcc 	_CLNext
.8a78	a2 07		ldx #$07			ldx 	#7
.8a7a	20 a0 8a	jsr $8aa0			jsr 	CLCompareLineNo
.8a7d	f0 02		beq $8a81			beq 	_CLDoThisOne
.8a7f	b0 0f		bcs $8a90			bcs 	_CLNext
.8a81					_CLDoThisOne:
.8a81	20 d5 8e	jsr $8ed5			jsr 	ListConvertLine 			; convert line into token Buffer
.8a84	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8a86	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8a88	20 60 91	jsr $9160			jsr 	PrintStringXA
.8a8b	a9 0d		lda #$0d			lda 	#13 						; new line
.8a8d	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.8a90					_CLNext:
.8a90	18		clc				clc
.8a91	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a93	65 30		adc $30				adc 	codePtr
.8a95	85 30		sta $30				sta 	codePtr
.8a97	90 02		bcc $8a9b			bcc 	_CREExit
.8a99	e6 31		inc $31				inc 	codePtr+1
.8a9b					_CREExit:
.8a9b	80 cb		bra $8a68			bra 	_CLLoop
.8a9d					_CLExit:
.8a9d	4c 9e 86	jmp $869e			jmp 	WarmStart
.8aa0					CLCompareLineNo:
.8aa0	38		sec				sec
.8aa1	a0 01		ldy #$01			ldy 	#1
.8aa3	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa5	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8aa8	85 36		sta $36				sta 	zTemp0
.8aaa	c8		iny				iny
.8aab	b1 30		lda ($30),y			lda 	(codePtr),y
.8aad	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8ab0	05 36		ora $36				ora 	zTemp0
.8ab2	60		rts				rts
.8ab3					CLIsDigit:
.8ab3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab5	c9 30		cmp #$30			cmp 	#"0"
.8ab7	90 03		bcc $8abc			bcc	 	_CLIDExitFalse
.8ab9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8abb	60		rts				rts
.8abc					_CLIDExitFalse:
.8abc	38		sec				sec
.8abd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8abe					Command_LOCAL:
.8abe	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8ac0	20 cc 8a	jsr $8acc			jsr 	LocaliseNextTerm 			; convert term to a local.
.8ac3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac5	c8		iny				iny
.8ac6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ac8	f0 f4		beq $8abe			beq 	Command_LOCAL
.8aca	88		dey				dey 								; unpick pre-get
.8acb	60		rts				rts
.8acc					LocaliseNextTerm:
.8acc	20 e1 97	jsr $97e1			jsr 	EvaluateTerm 				; evaluate the term
.8acf	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ad2	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8ad4	f0 69		beq $8b3f			beq		_LNTError
.8ad6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8ad9	85 36		sta $36				sta 	zTemp0
.8adb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ade	85 37		sta $37				sta  	zTemp0+1
.8ae0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ae3	29 10		and #$10			and 	#NSBIsString
.8ae5	d0 22		bne $8b09			bne 	_LNTPushString
.8ae7	5a		phy				phy
.8ae8	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8aea					_LNTPushNumLoop:
.8aea	b1 36		lda ($36),y			lda		(zTemp0),y
.8aec	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8aef	a9 00		lda #$00			lda 	#0
.8af1	91 36		sta ($36),y			sta 	(zTemp0),y
.8af3	c8		iny				iny
.8af4	c0 05		cpy #$05			cpy 	#5
.8af6	d0 f2		bne $8aea			bne 	_LNTPushNumLoop
.8af8	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8afa	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8afd	a5 37		lda $37				lda 	zTemp0+1
.8aff	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b02	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8b04	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b07	7a		ply				ply
.8b08	60		rts				rts
.8b09					_LNTPushString:
.8b09	5a		phy				phy
.8b0a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b0c	85 38		sta $38				sta 	zTemp1
.8b0e	a0 01		ldy #$01			ldy 	#1
.8b10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b12	85 39		sta $39				sta 	zTemp1+1
.8b14	a0 00		ldy #$00			ldy 	#0 							; output string
.8b16	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8b18	f0 0a		beq $8b24			beq 	_LNTStringOut
.8b1a					_LNTPushStrLoop:
.8b1a	b1 38		lda ($38),y			lda 	(zTemp1),y
.8b1c	f0 06		beq $8b24			beq 	_LNTStringOut
.8b1e	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b21	c8		iny				iny
.8b22	80 f6		bra $8b1a			bra 	_LNTPushStrLoop
.8b24					_LNTStringOut:
.8b24	98		tya				tya									; output length
.8b25	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b28	a9 00		lda #$00			lda 	#0 							; clear original string.
.8b2a	92 38		sta ($38)			sta 	(zTemp1)
.8b2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b2f	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b32	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b35	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b38	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b3a	20 51 9d	jsr $9d51			jsr 	StackPushByte
.8b3d	7a		ply				ply
.8b3e	60		rts				rts
.8b3f					_LNTError:
.8b3f	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.a3e7					LocalPopValue:
.a3e7	20 6a 9d	jsr $9d6a			jsr 	StackPopByte
.a3ea	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a3ec	d0 17		bne $a405			bne 	_LPVString
.a3ee	20 6a 9d	jsr $9d6a			jsr 	StackPopByte 				; address
.a3f1	85 37		sta $37				sta 	zTemp0+1
.a3f3	20 6a 9d	jsr $9d6a			jsr 	StackPopByte
.a3f6	85 36		sta $36				sta 	zTemp0
.a3f8	5a		phy				phy
.a3f9	a0 04		ldy #$04			ldy 	#4 							; copy back
.a3fb					_LPVNumberCopy:
.a3fb	20 6a 9d	jsr $9d6a			jsr 	StackPopByte
.a3fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a400	88		dey				dey
.a401	10 f8		bpl $a3fb			bpl 	_LPVNumberCopy
.a403	7a		ply				ply 								; and complete
.a404	60		rts				rts
.a405					_LPVString:
.a405	20 6a 9d	jsr $9d6a			jsr 	StackPopByte 				; address of record => zTemp0
.a408	85 37		sta $37				sta 	zTemp0+1
.a40a	20 6a 9d	jsr $9d6a			jsr 	StackPopByte
.a40d	85 36		sta $36				sta 	zTemp0
.a40f	5a		phy				phy
.a410	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a412	85 38		sta $38				sta 	zTemp1
.a414	a0 01		ldy #$01			ldy 	#1
.a416	b1 36		lda ($36),y			lda 	(zTemp0),y
.a418	85 39		sta $39				sta 	zTemp1+1
.a41a	20 6a 9d	jsr $9d6a			jsr 	StackPopByte 				; # to get => y
.a41d	a8		tay				tay
.a41e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a420	f0 0e		beq $a430			beq 	_LPVStringCopied
.a422	a9 00		lda #$00			lda 	#0 							; NULL on end
.a424	91 38		sta ($38),y			sta 	(zTemp1),y
.a426					_LPVStringCopy:
.a426	88		dey				dey
.a427	30 07		bmi $a430			bmi 	_LPVStringCopied
.a429	20 6a 9d	jsr $9d6a			jsr 	StackPopByte
.a42c	91 38		sta ($38),y			sta 	(zTemp1),y
.a42e	80 f6		bra $a426			bra 	_LPVStringCopy
.a430					_LPVStringCopied:
.a430	fa		plx				plx
.a431	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b42					NewCommand:
.8b42	20 fc 9c	jsr $9cfc			jsr 	MemoryNew
.8b45	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b48	20 37 87	jsr $8737			jsr 	ClearCommand 				; clear everything.
.8b4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8b4c					Command_Print:
.8b4c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8b4d					_CPLoop:
.8b4d	08		php				php 								; save last action flag
.8b4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b50	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8b52	f0 46		beq $8b9a			beq 	_CPExit
.8b54	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b56	f0 42		beq $8b9a			beq 	_CPExit
.8b58	68		pla				pla 								; throw last action flag
.8b59	b1 30		lda ($30),y			lda 	(codePtr),y
.8b5b	c8		iny				iny
.8b5c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8b5e	f0 37		beq $8b97			beq 	_CPContinueWithSameLine
.8b60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b62	f0 2e		beq $8b92			beq 	_CPTab
.8b64	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b66	f0 26		beq $8b8e			beq 	_CPNewLine
.8b68	88		dey				dey 								; undo the get.
.8b69	a2 00		ldx #$00			ldx 	#0
.8b6b	20 0a 9c	jsr $9c0a			jsr 	EvaluateValue 				; get a value into slot 0
.8b6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8b71	29 10		and #$10			and 	#NSBIsString
.8b73	f0 0b		beq $8b80			beq 	_CPNumber
.8b75	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8b78	ad 08 04	lda $0408			lda 	NSMantissa0
.8b7b	20 60 91	jsr $9160			jsr 	PrintStringXA
.8b7e	80 cc		bra $8b4c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8b80					_CPNumber:
.8b80	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b82	20 e0 9a	jsr $9ae0			jsr 	ConvertNumberToString 		; convert to string
.8b85	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8b87	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8b89	20 60 91	jsr $9160			jsr 	PrintStringXA
.8b8c	80 be		bra $8b4c			bra 	Command_Print 				; loop round clearing carry so NL if end
.8b8e					_CPNewLine:
.8b8e	a9 0d		lda #$0d			lda 	#13
.8b90	80 02		bra $8b94			bra 	_CPPrintChar
.8b92					_CPTab:
.8b92	a9 09		lda #$09			lda 	#9 							; print TAB
.8b94					_CPPrintChar:
.8b94	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.8b97					_CPContinueWithSameLine:
.8b97	38		sec				sec 								; loop round with carry set, which
.8b98	80 b3		bra $8b4d			bra 	_CPLoop 					; will inhibit final CR
.8b9a					_CPExit:
.8b9a	28		plp				plp 								; get last action flag
.8b9b	b0 05		bcs $8ba2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b9d	a9 0d		lda #$0d			lda 	#13 						; print new line
.8b9f	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.8ba2					_CPExit2:
.8ba2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ba3					CallProcedure:
.8ba3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8ba5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba7	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8ba9	f0 0c		beq $8bb7			beq 	_CPEndParam
.8bab					_CPParamLoop:
.8bab	20 10 95	jsr $9510			jsr 	EvaluateExpression 			; get parameter onto stack
.8bae	e8		inx				inx 								; bump next stack
.8baf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb1	c8		iny				iny
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8bb4	f0 f5		beq $8bab			beq 	_CPParamLoop
.8bb6	88		dey				dey 								; unpick.
.8bb7					_CPEndParam:
.8bb7	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8bba	c8		iny				iny									; skip right bracket
.8bbb	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8bbd	20 73 9d	jsr $9d73			jsr 	StackOpen
.8bc0	20 b7 9d	jsr $9db7			jsr 	STKSaveCodePosition 		; save loop position
.8bc3	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8bc6	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8bc8	ad 10 04	lda $0410			lda 	NSMantissa1
.8bcb	85 37		sta $37				sta 	zTemp0+1
.8bcd	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8bcf	b2 36		lda ($36)			lda 	(zTemp0)
.8bd1	85 30		sta $30				sta 	safePtr
.8bd3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd5	85 31		sta $31				sta 	safePtr+1
.8bd7	c8		iny				iny
.8bd8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bda	85 32		sta $32				sta 	safePtr+2
.8bdc	c8		iny				iny
.8bdd	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bdf	85 33		sta $33				sta 	safePtr+3
.8be1	c8		iny				iny 								; get Y offset -> Y
.8be2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8be4	a8		tay				tay
.8be5	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8be7	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8bea	f0 13		beq $8bff			beq 	_ParamExit 					; if so, exit.
.8bec					_ParamExtract:
.8bec	ca		dex				dex 								; put a local term on the level before
.8bed	20 cc 8a	jsr $8acc			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8bf0	20 0a 8a	jsr $8a0a			jsr 	AssignVariable 				; assign stacked value to the variable.
.8bf3	e8		inx				inx 								; advance to next parameter to do.
.8bf4	e8		inx				inx
.8bf5	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8bf8	f0 05		beq $8bff			beq 	_ParamExit
.8bfa	20 48 a4	jsr $a448			jsr 	CheckComma 					; comma seperating parameters
.8bfd	80 ed		bra $8bec			bra 	_ParamExtract
.8bff					_ParamExit:
.8bff	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; check )
.8c02	60		rts				rts 								; and continue from here
.a432					Command_ENDPROC:
.a432	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a434	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a436	20 9f 9d	jsr $9d9f			jsr 	StackCheckFrame
.a439	20 c8 9d	jsr $9dc8			jsr 	STKLoadCodePosition 		; restore code position
.a43c	20 91 9d	jsr $9d91			jsr 	StackClose
.a43f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c03					Command_Read:
.8c03	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c05	20 e1 97	jsr $97e1			jsr 	EvaluateTerm
.8c08	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c0b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c0d	f0 4a		beq $8c59			beq 	_CRSyntax 					; check reference (bit 0)
.8c0f	20 a2 8c	jsr $8ca2			jsr 	SwapDataCodePtrs 			; swap code and data
.8c12	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c15	d0 20		bne $8c37			bne 	_CRContinueData
.8c17					_CRKeepSearching:
.8c17	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8c19	aa		tax				tax
.8c1a	20 79 90	jsr $9079			jsr 	ScanForward
.8c1d	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8c1f	f0 16		beq $8c37			beq 	_CRHaveData 				; found it
.8c21	18		clc				clc
.8c22	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c24	65 30		adc $30				adc 	codePtr
.8c26	85 30		sta $30				sta 	codePtr
.8c28	90 02		bcc $8c2c			bcc 	_CREExit
.8c2a	e6 31		inc $31				inc 	codePtr+1
.8c2c					_CREExit:
.8c2c	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8c2e	b2 30		lda ($30)			lda 	(codePtr)
.8c30	d0 e5		bne $8c17			bne 	_CRKeepSearching
.8c32	a9 0b		lda #$0b		lda	#11
.8c34	4c 07 91	jmp $9107		jmp	ErrorHandler
.8c37					_CRHaveData:
.8c37					_CRContinueData:
.8c37	a2 01		ldx #$01			ldx 	#1
.8c39	20 0a 9c	jsr $9c0a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8c3c	ca		dex				dex
.8c3d	20 0a 8a	jsr $8a0a			jsr		AssignVariable 				; do the assignment
.8c40	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8c43	b1 30		lda ($30),y			lda 	(codePtr),y
.8c45	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8c47	d0 04		bne $8c4d			bne 	_CRSwapBack
.8c49	c8		iny				iny 								; consume comma
.8c4a	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8c4d					_CRSwapBack:
.8c4d	20 a2 8c	jsr $8ca2			jsr 	SwapDataCodePtrs			; swap them back.
.8c50	b1 30		lda ($30),y			lda 	(codePtr),y
.8c52	c8		iny				iny
.8c53	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c55	f0 ac		beq $8c03			beq 	Command_Read 				; if so go round again.
.8c57	88		dey				dey 								; unpick get.
.8c58	60		rts				rts
.8c59					_CRSyntax:
.8c59	4c 26 aa	jmp $aa26			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8c5c					RemCommand:
.8c5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8c60	d0 06		bne $8c68			bne 	_RMExit
.8c62	c8		iny				iny
.8c63	98		tya				tya
.8c64	38		sec				sec
.8c65	71 30		adc ($30),y			adc 	(codePtr),y
.8c67	a8		tay				tay
.8c68					_RMExit:
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8c69					Command_REPEAT:
.8c69	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8c6b	20 73 9d	jsr $9d73			jsr 	StackOpen
.8c6e	20 b7 9d	jsr $9db7			jsr 	STKSaveCodePosition 		; save loop position
.8c71	60		rts				rts
.8c72					Command_UNTIL:
.8c72	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8c74	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8c76	20 9f 9d	jsr $9d9f			jsr 	StackCheckFrame
.8c79	a2 00		ldx #$00			ldx 	#0
.8c7b	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; work out the number
.8c7e	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; check if zero
.8c81	f0 04		beq $8c87			beq 	_CULoopBack 				; if so keep looping
.8c83	20 91 9d	jsr $9d91			jsr 	StackClose		 			; return
.8c86	60		rts				rts
.8c87					_CULoopBack:
.8c87	20 c8 9d	jsr $9dc8			jsr 	STKLoadCodePosition 		; loop back
.8c8a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8c8b					Command_Restore:
.8c8b	20 a2 8c	jsr $8ca2			jsr 	SwapDataCodePtrs 			; swap code and data
.8c8e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c90	85 30		sta $30				sta 	codePtr
.8c92	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c94	85 31		sta $31				sta 	codePtr+1
.8c96	20 a2 8c	jsr $8ca2			jsr 	SwapDataCodePtrs 			; put them back
.8c99	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8c9b	8d 9b 04	sta $049b			sta 	dataPointer+4
.8c9e	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8ca1	60		rts				rts
.8ca2					SwapDataCodePtrs:
.8ca2	da		phx				phx
.8ca3	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8ca5					_SDCPLoop:
.8ca5	b5 30		lda $30,x			lda 	safePtr,x
.8ca7	48		pha				pha
.8ca8	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8cab	95 30		sta $30,x			sta 	safePtr,x
.8cad	68		pla				pla
.8cae	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8cb1	ca		dex				dex
.8cb2	10 f1		bpl $8ca5			bpl 	_SDCPLoop
.8cb4	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8cb7	8c 9b 04	sty $049b			sty 	dataPointer+4
.8cba	a8		tay				tay
.8cbb	fa		plx				plx
.8cbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8cbd					CommandRUN:
.8cbd	20 37 87	jsr $8737			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8cc0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cc2	85 30		sta $30				sta 	codePtr
.8cc4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cc6	85 31		sta $31				sta 	codePtr+1
.8cc8					RUNNewLine:
.8cc8	b2 30		lda ($30)			lda 	(codePtr)
.8cca	f0 5e		beq $8d2a			beq 	CRNoProgram         		; no then END.
.8ccc	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8cce	9a		txs				txs
.8ccf					RUNCodePointerLine:
.8ccf	a0 02		ldy #$02			ldy 	#2 							; start of program
.8cd1					_CRIncMainLoop:
.8cd1	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8cd4	d0 05		bne $8cdb			bne 	_CRNoBreakCheck
.8cd6	20 0c ac	jsr $ac0c			jsr 	EXTBreakCheck 				; break check
.8cd9	f0 4a		beq $8d25			beq 	_CRBreak
.8cdb					_CRNoBreakCheck:
.8cdb	c8		iny				iny
.8cdc					_CRMainLoop:
.8cdc	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8cdf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce1	10 10		bpl $8cf3			bpl 	_CRNotKeyword
.8ce3	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ce5	b0 04		bcs $8ceb			bcs 	_CRIsKeyword
.8ce7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ce9	b0 34		bcs $8d1f			bcs		_CRSyntaxError
.8ceb					_CRIsKeyword:
.8ceb	c8		iny				iny 								; consume command
.8cec	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8ced	aa		tax				tax 								; put in X for vector jump
.8cee	20 22 8d	jsr $8d22			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8cf1	80 e9		bra $8cdc			bra 	_CRMainLoop 				; and loop round
.8cf3					_CRNotKeyword:
.8cf3	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8cf5	f0 da		beq $8cd1			beq 	_CRIncMainLoop
.8cf7	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8cf9	90 05		bcc $8d00			bcc 	_CRNotVariable
.8cfb					_CRGoLet:
.8cfb	20 ce 89	jsr $89ce			jsr 	LetCommand
.8cfe	80 dc		bra $8cdc			bra 	_CRMainLoop
.8d00					_CRNotVariable:
.8d00	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d02	f0 f7		beq $8cfb			beq 	_CRGoLet
.8d04	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d06	f0 f3		beq $8cfb			beq 	_CRGoLet
.8d08	c9 21		cmp #$21			cmp 	#KWD_PLING
.8d0a	f0 ef		beq $8cfb			beq 	_CRGoLet
.8d0c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d0e	f0 09		beq $8d19			beq 	_CRGoRem
.8d10	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d12	d0 0b		bne $8d1f			bne 	_CRSyntaxError
.8d14	20 d7 85	jsr $85d7			jsr 	LabelHere
.8d17	80 c3		bra $8cdc			bra 	_CRMainLoop
.8d19					_CRGoRem:
.8d19	c8		iny				iny
.8d1a	20 5c 8c	jsr $8c5c			jsr 	RemCommand
.8d1d	80 bd		bra $8cdc			bra 	_CRMainLoop
.8d1f					_CRSyntaxError:
.8d1f	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.8d22					_CRCallVector0:
.8d22	7c ce 8d	jmp ($8dce,x)			jmp 	(VectorSet0,x)
.8d25					_CRBreak:
.8d25	a9 01		lda #$01		lda	#1
.8d27	4c 07 91	jmp $9107		jmp	ErrorHandler
.8d2a					CRNoProgram:
.8d2a	4c 54 88	jmp $8854			jmp 	EndCommand
.8d2d					EOLCommand:
.8d2d	18		clc				clc
.8d2e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d30	65 30		adc $30				adc 	codePtr
.8d32	85 30		sta $30				sta 	codePtr
.8d34	90 02		bcc $8d38			bcc 	_CREExit
.8d36	e6 31		inc $31				inc 	codePtr+1
.8d38					_CREExit:
.8d38	80 8e		bra $8cc8			bra 	RunNewLine
.8d3a					Shift1Command:
.8d3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3c	c8		iny				iny
.8d3d	0a		asl a				asl 	a
.8d3e	aa		tax				tax
.8d3f	7c 30 8e	jmp ($8e30,x)			jmp 	(VectorSet1,x)
.8d42					Shift2Command:
.8d42	b1 30		lda ($30),y			lda 	(codePtr),y
.8d44	c8		iny				iny
.8d45	0a		asl a				asl 	a
.8d46	aa		tax				tax
.8d47	7c 48 8e	jmp ($8e48,x)			jmp 	(VectorSet2,x)
.8d4a					Unused1:
.8d4a					Unused2:
.8d4a					Unused3:
.8d4a					Unused4:
.8d4a	4c 26 aa	jmp $aa26			jmp 	SyntaxError
>8d4d							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8d4e					VectorSetPunc:
>8d4e	b1 92					.word	ShiftLeft                        ; $00 <<
>8d50	ab 91					.word	BinaryCompareLessEqual           ; $01 <=
>8d52	a1 91					.word	BinaryCompareNotEqual            ; $02 <>
>8d54	26 aa					.word	SyntaxError                      ; $03 !!3
>8d56	26 aa					.word	SyntaxError                      ; $04 ><
>8d58	b5 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8d5a	b4 92					.word	ShiftRight                       ; $06 >>
>8d5c	26 aa					.word	SyntaxError                      ; $07 !!7
>8d5e	26 aa					.word	SyntaxError                      ; $08 !!8
>8d60	26 aa					.word	SyntaxError                      ; $09 !!9
>8d62	26 aa					.word	SyntaxError                      ; $0a !!10
>8d64	26 aa					.word	SyntaxError                      ; $0b !!11
>8d66	26 aa					.word	SyntaxError                      ; $0c !!12
>8d68	26 aa					.word	SyntaxError                      ; $0d !!13
>8d6a	26 aa					.word	SyntaxError                      ; $0e !!14
>8d6c	26 aa					.word	SyntaxError                      ; $0f !!15
>8d6e	26 aa					.word	SyntaxError                      ; $10 @
>8d70	26 aa					.word	SyntaxError                      ; $11 !!17
>8d72	26 aa					.word	SyntaxError                      ; $12 !!18
>8d74	26 aa					.word	SyntaxError                      ; $13 [
>8d76	59 a4					.word	IntegerDivide                    ; $14 \
>8d78	26 aa					.word	SyntaxError                      ; $15 ]
>8d7a	3a 94					.word	EorInteger                       ; $16 ^
>8d7c	26 aa					.word	SyntaxError                      ; $17 _
>8d7e	26 aa					.word	SyntaxError                      ; $18 `
>8d80	26 aa					.word	SyntaxError                      ; $19 !!25
>8d82	26 aa					.word	SyntaxError                      ; $1a !!26
>8d84	26 aa					.word	SyntaxError                      ; $1b {
>8d86	f4 93					.word	OraInteger                       ; $1c |
>8d88	26 aa					.word	SyntaxError                      ; $1d }
>8d8a	26 aa					.word	SyntaxError                      ; $1e ~
>8d8c	26 aa					.word	SyntaxError                      ; $1f [7m<7F>[m
>8d8e	26 aa					.word	SyntaxError                      ; $20
>8d90	80 94					.word	WordIndirect                     ; $21 !
>8d92	26 aa					.word	SyntaxError                      ; $22 "
>8d94	26 aa					.word	SyntaxError                      ; $23 #
>8d96	26 aa					.word	SyntaxError                      ; $24 $
>8d98	a6 a4					.word	IntegerModulus                   ; $25 %
>8d9a	ae 93					.word	AndInteger                       ; $26 &
>8d9c	26 aa					.word	SyntaxError                      ; $27 '
>8d9e	26 aa					.word	SyntaxError                      ; $28 (
>8da0	26 aa					.word	SyntaxError                      ; $29 )
>8da2	1b a5					.word	MulInteger                       ; $2a *
>8da4	48 93					.word	AddInteger                       ; $2b +
>8da6	26 aa					.word	SyntaxError                      ; $2c ,
>8da8	83 93					.word	SubInteger                       ; $2d -
>8daa	26 aa					.word	SyntaxError                      ; $2e .
>8dac	b2 a6					.word	FDivideCommand                   ; $2f /
>8dae	26 aa					.word	SyntaxError                      ; $30 0
>8db0	26 aa					.word	SyntaxError                      ; $31 1
>8db2	26 aa					.word	SyntaxError                      ; $32 2
>8db4	26 aa					.word	SyntaxError                      ; $33 3
>8db6	26 aa					.word	SyntaxError                      ; $34 4
>8db8	26 aa					.word	SyntaxError                      ; $35 5
>8dba	26 aa					.word	SyntaxError                      ; $36 6
>8dbc	26 aa					.word	SyntaxError                      ; $37 7
>8dbe	26 aa					.word	SyntaxError                      ; $38 8
>8dc0	26 aa					.word	SyntaxError                      ; $39 9
>8dc2	26 aa					.word	SyntaxError                      ; $3a :
>8dc4	26 aa					.word	SyntaxError                      ; $3b ;
>8dc6	8d 91					.word	BinaryCompareLess                ; $3c <
>8dc8	83 91					.word	BinaryCompareEqual               ; $3d =
>8dca	97 91					.word	BinaryCompareGreater             ; $3e >
>8dcc	a7 94					.word	ByteIndirect                     ; $3f ?
.8dce					VectorSet0:
>8dce	2d 8d					.word	EOLCommand                       ; $80 !0:EOF
>8dd0	3a 8d					.word	Shift1Command                    ; $81 !1:SH1
>8dd2	42 8d					.word	Shift2Command                    ; $82 !2:SH2
>8dd4	f8 a7					.word	AbsUnary                         ; $83 ABS(
>8dd6	71 99					.word	AllocUnary                       ; $84 ALLOC(
>8dd8	08 a8					.word	AscUnary                         ; $85 ASC(
>8dda	91 9a					.word	ChrUnary                         ; $86 CHR$(
>8ddc	7f 91					.word	UnaryFalse                       ; $87 FALSE
>8dde	15 a8					.word	FracUnary                        ; $88 FRAC(
>8de0	2b a8					.word	IntUnary                         ; $89 INT(
>8de2	81 a8					.word	IsValUnary                       ; $8a ISVAL(
>8de4	6b 9b					.word	Unary_Left                       ; $8b LEFT$(
>8de6	3d a8					.word	LenUnary                         ; $8c LEN(
>8de8	95 9b					.word	Unary_Mid                        ; $8d MID$(
>8dea	e1 99					.word	Unary_Not                        ; $8e NOT(
>8dec	f7 99					.word	Unary_Random                     ; $8f RANDOM(
>8dee	7b 9b					.word	Unary_Right                      ; $90 RIGHT$(
>8df0	10 9a					.word	Unary_Rnd                        ; $91 RND(
>8df2	57 a8					.word	SgnUnary                         ; $92 SGN(
>8df4	a3 9a					.word	SpcUnary                         ; $93 SPC(
>8df6	be 9a					.word	Unary_Str                        ; $94 STR$(
>8df8	73 91					.word	UnaryTrue                        ; $95 TRUE
>8dfa	77 a8					.word	ValUnary                         ; $96 VAL(
>8dfc	57 88					.word	ForCommand                       ; $97 FOR
>8dfe	a4 89					.word	IfCommand                        ; $98 IF
>8e00	4a 8d					.word	Unused1                          ; $99 PROC
>8e02	69 8c					.word	Command_REPEAT                   ; $9a REPEAT
>8e04	d8 90					.word	Command_WHILE                    ; $9b WHILE
>8e06	cd 89					.word	EndIf                            ; $9c ENDIF
>8e08	32 a4					.word	Command_ENDPROC                  ; $9d ENDPROC
>8e0a	11 89					.word	NextCommand                      ; $9e NEXT
>8e0c	4a 8d					.word	Unused4                          ; $9f THEN
>8e0e	72 8c					.word	Command_UNTIL                    ; $a0 UNTIL
>8e10	f9 90					.word	Command_WEND                     ; $a1 WEND
>8e12	fd 86					.word	CallCommand                      ; $a2 CALL
>8e14	26 aa					.word	SyntaxError                      ; $a3 CLS
>8e16	8f 87					.word	Command_Data                     ; $a4 DATA
>8e18	97 87					.word	DimCommand                       ; $a5 DIM
>8e1a	4a 8d					.word	Unused3                          ; $a6 DOWNTO
>8e1c	c6 89					.word	ElseCode                         ; $a7 ELSE
>8e1e	6a 89					.word	Command_GOSUB                    ; $a8 GOSUB
>8e20	88 89					.word	GotoCommand                      ; $a9 GOTO
>8e22	ce 89					.word	LetCommand                       ; $aa LET
>8e24	be 8a					.word	Command_LOCAL                    ; $ab LOCAL
>8e26	4c 8b					.word	Command_Print                    ; $ac PRINT
>8e28	03 8c					.word	Command_Read                     ; $ad READ
>8e2a	5c 8c					.word	RemCommand                       ; $ae REM
>8e2c	7a 89					.word	Command_RETURN                   ; $af RETURN
>8e2e	4a 8d					.word	Unused2                          ; $b0 TO
.8e30					VectorSet1:
>8e30	26 aa					.word	SyntaxError                      ; $80 !0:EOF
>8e32	26 aa					.word	SyntaxError                      ; $81 !1:SH1
>8e34	26 aa					.word	SyntaxError                      ; $82 !2:SH2
>8e36	ce 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>8e38	ed 86					.word	AssertCommand                    ; $84 ASSERT
>8e3a	37 87					.word	ClearCommand                     ; $85 CLEAR
>8e3c	54 88					.word	EndCommand                       ; $86 END
>8e3e	23 8a					.word	Command_List                     ; $87 LIST
>8e40	42 8b					.word	NewCommand                       ; $88 NEW
>8e42	8b 8c					.word	Command_Restore                  ; $89 RESTORE
>8e44	bd 8c					.word	CommandRUN                       ; $8a RUN
>8e46	d0 8e					.word	StopCommand                      ; $8b STOP
.8e48					VectorSet2:
>8e48	26 aa					.word	SyntaxError                      ; $80 !0:EOF
>8e4a	26 aa					.word	SyntaxError                      ; $81 !1:SH1
>8e4c	26 aa					.word	SyntaxError                      ; $82 !2:SH2
>8e4e	e5 a8					.word	Assemble_adc                     ; $83 ADC
>8e50	dd a8					.word	Assemble_and                     ; $84 AND
>8e52	f9 a8					.word	Assemble_asl                     ; $85 ASL
>8e54	63 a9					.word	Assemble_bcc                     ; $86 BCC
>8e56	67 a9					.word	Assemble_bcs                     ; $87 BCS
>8e58	6f a9					.word	Assemble_beq                     ; $88 BEQ
>8e5a	26 a9					.word	Assemble_bit                     ; $89 BIT
>8e5c	57 a9					.word	Assemble_bmi                     ; $8a BMI
>8e5e	6b a9					.word	Assemble_bne                     ; $8b BNE
>8e60	53 a9					.word	Assemble_bpl                     ; $8c BPL
>8e62	73 a9					.word	Assemble_bra                     ; $8d BRA
>8e64	77 a9					.word	Assemble_brk                     ; $8e BRK
>8e66	5b a9					.word	Assemble_bvc                     ; $8f BVC
>8e68	5f a9					.word	Assemble_bvs                     ; $90 BVS
>8e6a	7f a9					.word	Assemble_clc                     ; $91 CLC
>8e6c	d3 a9					.word	Assemble_cld                     ; $92 CLD
>8e6e	93 a9					.word	Assemble_cli                     ; $93 CLI
>8e70	c3 a9					.word	Assemble_clv                     ; $94 CLV
>8e72	f1 a8					.word	Assemble_cmp                     ; $95 CMP
>8e74	3a a9					.word	Assemble_cpx                     ; $96 CPX
>8e76	35 a9					.word	Assemble_cpy                     ; $97 CPY
>8e78	17 a9					.word	Assemble_dec                     ; $98 DEC
>8e7a	cf a9					.word	Assemble_dex                     ; $99 DEX
>8e7c	ab a9					.word	Assemble_dey                     ; $9a DEY
>8e7e	e1 a8					.word	Assemble_eor                     ; $9b EOR
>8e80	1c a9					.word	Assemble_inc                     ; $9c INC
>8e82	df a9					.word	Assemble_inx                     ; $9d INX
>8e84	cb a9					.word	Assemble_iny                     ; $9e INY
>8e86	4e a9					.word	Assemble_jmp                     ; $9f JMP
>8e88	49 a9					.word	Assemble_jsr                     ; $a0 JSR
>8e8a	ed a8					.word	Assemble_lda                     ; $a1 LDA
>8e8c	12 a9					.word	Assemble_ldx                     ; $a2 LDX
>8e8e	30 a9					.word	Assemble_ldy                     ; $a3 LDY
>8e90	03 a9					.word	Assemble_lsr                     ; $a4 LSR
>8e92	e3 a9					.word	Assemble_nop                     ; $a5 NOP
>8e94	d9 a8					.word	Assemble_ora                     ; $a6 ORA
>8e96	8f a9					.word	Assemble_pha                     ; $a7 PHA
>8e98	7b a9					.word	Assemble_php                     ; $a8 PHP
>8e9a	d7 a9					.word	Assemble_phx                     ; $a9 PHX
>8e9c	97 a9					.word	Assemble_phy                     ; $aa PHY
>8e9e	9f a9					.word	Assemble_pla                     ; $ab PLA
>8ea0	83 a9					.word	Assemble_plp                     ; $ac PLP
>8ea2	eb a9					.word	Assemble_plx                     ; $ad PLX
>8ea4	a7 a9					.word	Assemble_ply                     ; $ae PLY
>8ea6	fe a8					.word	Assemble_rol                     ; $af ROL
>8ea8	08 a9					.word	Assemble_ror                     ; $b0 ROR
>8eaa	8b a9					.word	Assemble_rti                     ; $b1 RTI
>8eac	9b a9					.word	Assemble_rts                     ; $b2 RTS
>8eae	f5 a8					.word	Assemble_sbc                     ; $b3 SBC
>8eb0	87 a9					.word	Assemble_sec                     ; $b4 SEC
>8eb2	e7 a9					.word	Assemble_sed                     ; $b5 SED
>8eb4	a3 a9					.word	Assemble_sei                     ; $b6 SEI
>8eb6	e9 a8					.word	Assemble_sta                     ; $b7 STA
>8eb8	db a9					.word	Assemble_stp                     ; $b8 STP
>8eba	0d a9					.word	Assemble_stx                     ; $b9 STX
>8ebc	2b a9					.word	Assemble_sty                     ; $ba STY
>8ebe	21 a9					.word	Assemble_stz                     ; $bb STZ
>8ec0	bf a9					.word	Assemble_tax                     ; $bc TAX
>8ec2	bb a9					.word	Assemble_tay                     ; $bd TAY
>8ec4	44 a9					.word	Assemble_trb                     ; $be TRB
>8ec6	3f a9					.word	Assemble_tsb                     ; $bf TSB
>8ec8	c7 a9					.word	Assemble_tsx                     ; $c0 TSX
>8eca	af a9					.word	Assemble_txa                     ; $c1 TXA
>8ecc	b7 a9					.word	Assemble_txs                     ; $c2 TXS
>8ece	b3 a9					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ed0					StopCommand:
.8ed0	a9 08		lda #$08		lda	#8
.8ed2	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8ed5					ListConvertLine:
.8ed5	9c 9d 04	stz $049d			stz 	tbOffset
.8ed8	9c a9 04	stz $04a9			stz 	tokenBuffer
.8edb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8edd	b1 30		lda ($30),y			lda 	(codePtr),y
.8edf	aa		tax				tax
.8ee0	88		dey				dey
.8ee1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee3	20 9c a5	jsr $a59c			jsr 	ConvertInt16
.8ee6	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8ee8	86 37		stx $37				stx 	zTemp0+1
.8eea	a0 00		ldy #$00			ldy 	#0
.8eec					_LCCopyNumber:
.8eec	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eee	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8ef1	c8		iny				iny
.8ef2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ef4	d0 f6		bne $8eec			bne 	_LCCopyNumber
.8ef6					_LCPadOut:
.8ef6	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8ef8	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8efb	ad 9d 04	lda $049d			lda 	tbOffset
.8efe	c9 06		cmp #$06			cmp 	#6
.8f00	d0 f4		bne $8ef6			bne 	_LCPadOut
.8f02	a0 03		ldy #$03			ldy 	#3 							; start position.
.8f04					_LCMainLoop:
.8f04	b1 30		lda ($30),y			lda 	(codePtr),y
.8f06	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8f08	f0 17		beq $8f21			beq 	_LCExit
.8f0a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8f0c	90 14		bcc $8f22			bcc 	_LCDoubles
.8f0e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8f10	90 20		bcc $8f32			bcc 	_LCShiftPunc
.8f12	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8f14	90 2b		bcc $8f41			bcc 	_LCPunctuation
.8f16	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8f18	90 2d		bcc $8f47			bcc 	_LCIdentifiers
.8f1a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8f1c	90 49		bcc $8f67			bcc 	_LCTokens
.8f1e	4c c2 8f	jmp $8fc2			jmp 	_LCData 					; 254-5 are data objects
.8f21					_LCExit:
.8f21	60		rts				rts
.8f22					_LCDoubles:
.8f22	48		pha				pha
.8f23	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8f24	29 02		and #$02			and 	#2
.8f26	09 3c		ora #$3c			ora 	#60 						; make < >
.8f28	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8f2b	68		pla				pla 								; restore, do lower bit
.8f2c	29 03		and #$03			and 	#3
.8f2e	09 3c		ora #$3c			ora 	#60
.8f30	80 0f		bra $8f41			bra		_LCPunctuation 				; print, increment, loop
.8f32					_LCShiftPunc:
.8f32	aa		tax				tax 								; save in X
.8f33	29 07		and #$07			and 	#7 							; lower 3 bits
.8f35	f0 02		beq $8f39			beq 	_LCNoAdd
.8f37	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8f39					_LCNoAdd:
.8f39	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8f3b	90 02		bcc $8f3f			bcc 	_LCNoAdd2
.8f3d	09 20		ora #$20			ora 	#32 						; adds $20
.8f3f					_LCNoAdd2:
.8f3f	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8f41					_LCPunctuation:
.8f41	c8		iny				iny 								; consume character
.8f42	20 ee 8f	jsr $8fee			jsr 	LCLWrite 					; write it out.
.8f45	80 bd		bra $8f04			bra 	_LCMainLoop 				; go round again.
.8f47					_LCIdentifiers:
.8f47	18		clc				clc 								; convert to physical address
.8f48	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8f4a	85 37		sta $37				sta 	zTemp0+1
.8f4c	c8		iny				iny
.8f4d	b1 30		lda ($30),y			lda 	(codePtr),y
.8f4f	85 36		sta $36				sta 	zTemp0
.8f51	c8		iny				iny
.8f52	5a		phy				phy 								; save position
.8f53	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8f55					_LCOutIdentifier:
.8f55	c8		iny				iny
.8f56	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f58	29 7f		and #$7f			and 	#$7F
.8f5a	20 1c 90	jsr $901c			jsr 	LCLLowerCase
.8f5d	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8f60	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8f62	10 f1		bpl $8f55			bpl 	_LCOutIdentifier
.8f64	7a		ply				ply 								; restore position
.8f65	80 9d		bra $8f04			bra 	_LCMainLoop
.8f67					_LCTokens:
.8f67	aa		tax				tax 								; token in X
.8f68	a9 ec		lda #$ec			lda 	#((KeywordSet2) & $FF)
.8f6a	85 36		sta $36				sta 	0+zTemp0
.8f6c	a9 9f		lda #$9f			lda 	#((KeywordSet2) >> 8)
.8f6e	85 37		sta $37				sta 	1+zTemp0
.8f70	e0 82		cpx #$82			cpx 	#$82
.8f72	f0 16		beq $8f8a			beq 	_LCUseShift
.8f74	a9 a8		lda #$a8			lda 	#((KeywordSet1) & $FF)
.8f76	85 36		sta $36				sta 	0+zTemp0
.8f78	a9 9f		lda #$9f			lda 	#((KeywordSet1) >> 8)
.8f7a	85 37		sta $37				sta 	1+zTemp0
.8f7c	e0 81		cpx #$81			cpx 	#$81
.8f7e	f0 0a		beq $8f8a			beq 	_LCUseShift
.8f80	a9 76		lda #$76			lda 	#((KeywordSet0) & $FF)
.8f82	85 36		sta $36				sta 	0+zTemp0
.8f84	a9 9e		lda #$9e			lda 	#((KeywordSet0) >> 8)
.8f86	85 37		sta $37				sta 	1+zTemp0
.8f88	80 01		bra $8f8b			bra 	_LCNoShift
.8f8a					_LCUseShift:
.8f8a	c8		iny				iny
.8f8b					_LCNoShift:
.8f8b	20 fd 8f	jsr $8ffd			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8f8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8f90	aa		tax				tax 								; into X
.8f91					_LCFindText:
.8f91	ca		dex				dex
.8f92	10 0e		bpl $8fa2			bpl 	_LCFoundText 				; found text.
.8f94	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8f96	1a		inc a				inc 	a 							; one extra for size
.8f97	38		sec				sec 								; one extra for checksum
.8f98	65 36		adc $36				adc 	zTemp0 						; go to next token
.8f9a	85 36		sta $36				sta 	zTemp0
.8f9c	90 f3		bcc $8f91			bcc 	_LCFindText
.8f9e	e6 37		inc $37				inc 	zTemp0+1
.8fa0	80 ef		bra $8f91			bra 	_LCFindText
.8fa2					_LCFoundText:
.8fa2	5a		phy				phy 								; save List position
.8fa3	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8fa5	aa		tax				tax
.8fa6	a0 02		ldy #$02			ldy 	#2
.8fa8					_LCCopyToken:
.8fa8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8faa	20 1c 90	jsr $901c			jsr 	LCLLowerCase
.8fad	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8fb0	c8		iny				iny
.8fb1	ca		dex				dex
.8fb2	d0 f4		bne $8fa8			bne 	_LCCopyToken
.8fb4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8fb6	f0 05		beq $8fbd			beq 	_LCNoSpace
.8fb8	a9 20		lda #$20			lda 	#' '
.8fba	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8fbd					_LCNoSpace:
.8fbd	7a		ply				ply 								; restore position.
.8fbe	c8		iny				iny 								; consume token
.8fbf	4c 04 8f	jmp $8f04			jmp 	_LCMainLoop 				; and go around again.
.8fc2					_LCData:
.8fc2	48		pha				pha 								; save type $FE/$FF
.8fc3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8fc5	c9 fe		cmp #$fe			cmp 	#$FE
.8fc7	f0 02		beq $8fcb			beq 	_LCHaveOpener
.8fc9	a2 22		ldx #$22			ldx 	#'"'
.8fcb					_LCHaveOpener:
.8fcb	8a		txa				txa 								; output prefix (# or ")
.8fcc	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8fcf	c8		iny				iny 								; get count
.8fd0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd2	aa		tax				tax
.8fd3	c8		iny				iny 								; point at first character
.8fd4					_LCOutData:
.8fd4	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd6	c9 00		cmp #$00			cmp 	#0
.8fd8	f0 03		beq $8fdd			beq 	_LCNoPrint
.8fda	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8fdd					_LCNoPrint:
.8fdd	c8		iny				iny
.8fde	ca		dex				dex
.8fdf	d0 f3		bne $8fd4			bne 	_LCOutData
.8fe1	68		pla				pla 								; closing " required ?
.8fe2	c9 ff		cmp #$ff			cmp 	#$FF
.8fe4	d0 05		bne $8feb			bne 	_LCNoQuote
.8fe6	a9 22		lda #$22			lda 	#'"'
.8fe8	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.8feb					_LCNoQuote:
.8feb	4c 04 8f	jmp $8f04			jmp 	_LCMainLoop
.8fee					LCLWrite:
.8fee	da		phx				phx
.8fef	ae 9d 04	ldx $049d			ldx 	tbOffset
.8ff2	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.8ff5	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.8ff8	ee 9d 04	inc $049d			inc 	tbOffset
.8ffb	fa		plx				plx
.8ffc	60		rts				rts
.8ffd					LCCheckSpaceRequired:
.8ffd	ae 9d 04	ldx $049d			ldx 	tbOffset
.9000	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9003	20 1c 90	jsr $901c			jsr 	LCLLowerCase 				; saves a little effort
.9006	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9008	90 11		bcc $901b			bcc 	_LCCSRExit
.900a	c9 3a		cmp #$3a			cmp 	#"9"+1
.900c	90 08		bcc $9016			bcc 	_LCCSRSpace
.900e	c9 61		cmp #$61			cmp 	#"a"
.9010	90 09		bcc $901b			bcc 	_LCCSRExit
.9012	c9 7b		cmp #$7b			cmp 	#"z"+1
.9014	b0 05		bcs $901b			bcs 	_LCCSRExit
.9016					_LCCSRSpace:
.9016	a9 20		lda #$20			lda 	#' '
.9018	20 ee 8f	jsr $8fee			jsr 	LCLWrite
.901b					_LCCSRExit:
.901b	60		rts				rts
.901c					LCLLowerCase:
.901c	c9 41		cmp #$41			cmp 	#"A"
.901e	90 06		bcc $9026			bcc 	_LCLLCOut
.9020	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9022	b0 02		bcs $9026			bcs 	_LCLLCOut
.9024	69 20		adc #$20			adc 	#$20
.9026					_LCLLCOut:
.9026	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9027					ProcedureScan:
.9027	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9029	85 30		sta $30				sta 	codePtr
.902b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.902d	85 31		sta $31				sta 	codePtr+1
.902f					_PSLoop:
.902f	b2 30		lda ($30)			lda 	(codePtr)
.9031	f0 42		beq $9075			beq 	_PSExit
.9033	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9035	b1 30		lda ($30),y			lda 	(codePtr),y
.9037	c9 99		cmp #$99			cmp 	#KWD_PROC
.9039	d0 2d		bne $9068			bne 	_PSNext
.903b	c8		iny				iny 								; get the address of the record to zTemp0 and
.903c	b1 30		lda ($30),y			lda 	(codePtr),y
.903e	29 c0		and #$c0			and 	#$C0
.9040	c9 40		cmp #$40			cmp 	#$40
.9042	d0 32		bne $9076			bne 	_PSSyntax
.9044	b1 30		lda ($30),y			lda 	(codePtr),y
.9046	18		clc				clc
.9047	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9049	85 37		sta $37				sta 	zTemp0+1
.904b	c8		iny				iny 								; LSB
.904c	b1 30		lda ($30),y			lda 	(codePtr),y
.904e	85 36		sta $36				sta 	zTemp0
.9050	c8		iny				iny 								; character after variable call.
.9051	98		tya				tya 								; save Y offset at +7
.9052	a0 07		ldy #$07			ldy 	#7
.9054	91 36		sta ($36),y			sta 	(zTemp0),y
.9056	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9058	a0 02		ldy #$02			ldy 	#2
.905a	91 36		sta ($36),y			sta 	(zTemp0),y
.905c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.905e					_PSCopy:
.905e	b5 30		lda $30,x			lda 	safePtr,x
.9060	c8		iny				iny
.9061	91 36		sta ($36),y			sta 	(zTemp0),y
.9063	e8		inx				inx
.9064	e0 04		cpx #$04			cpx 	#4
.9066	d0 f6		bne $905e			bne 	_PSCopy
.9068					_PSNext:
.9068	18		clc				clc
.9069	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.906b	65 30		adc $30				adc 	codePtr
.906d	85 30		sta $30				sta 	codePtr
.906f	90 02		bcc $9073			bcc 	_CREExit
.9071	e6 31		inc $31				inc 	codePtr+1
.9073					_CREExit:
.9073	80 ba		bra $902f			bra 	_PSLoop
.9075					_PSExit:
.9075	60		rts				rts
.9076					_PSSyntax:
.9076	4c 26 aa	jmp $aa26			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9079					ScanForward:
.9079	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.907b	86 37		stx $37				stx 	zTemp0+1
.907d	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.907f					_ScanLoop:
.907f	b1 30		lda ($30),y			lda 	(codePtr),y
.9081	c8		iny				iny
.9082	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9084	d0 0e		bne $9094			bne 	_ScanGoNext
.9086	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9088	f0 04		beq $908e			beq 	_ScanMatch
.908a	c5 37		cmp $37				cmp 	zTemp0+1
.908c	d0 06		bne $9094			bne 	_ScanGoNext
.908e					_ScanMatch:
.908e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9090	d0 01		bne $9093			bne 	_ScanNotEndEOL
.9092	88		dey				dey
.9093					_ScanNotEndEOL:
.9093	60		rts				rts
.9094					_ScanGoNext:
.9094	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9096	90 e7		bcc $907f			bcc 	_ScanLoop
.9098	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.909a	90 18		bcc $90b4			bcc 	_ScanSkipOne
.909c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.909e	b0 2f		bcs $90cf			bcs 	_ScanSkipData
.90a0	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.90a2	90 db		bcc $907f			bcc 	_ScanLoop 					; if not, ordinary keywords.
.90a4	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.90a6	b0 d7		bcs $907f			bcs 	_ScanLoop
.90a8	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.90aa	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.90ac	b0 d1		bcs $907f			bcs 	_ScanLoop
.90ae	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.90b0	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.90b2	80 cb		bra $907f			bra 	_ScanLoop
.90b4					_ScanSkipOne:
.90b4	c8		iny				iny 								; consume the extra one.
.90b5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.90b7	d0 c6		bne $907f			bne 	_ScanLoop
.90b9	18		clc				clc
.90ba	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.90bc	65 30		adc $30				adc 	codePtr
.90be	85 30		sta $30				sta 	codePtr
.90c0	90 02		bcc $90c4			bcc 	_CREExit
.90c2	e6 31		inc $31				inc 	codePtr+1
.90c4					_CREExit:
.90c4	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.90c6	b2 30		lda ($30)			lda 	(codePtr)
.90c8	d0 b5		bne $907f			bne 	_ScanLoop 					; if not zero, more to scan
.90ca	a9 13		lda #$13		lda	#19
.90cc	4c 07 91	jmp $9107		jmp	ErrorHandler
.90cf					_ScanSkipData:
.90cf	88		dey				dey 								; point at data token
.90d0	c8		iny				iny
.90d1	98		tya				tya
.90d2	38		sec				sec
.90d3	71 30		adc ($30),y			adc 	(codePtr),y
.90d5	a8		tay				tay
.90d6	80 a7		bra $907f			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.90d8					Command_WHILE:
.90d8	5a		phy				phy 								; save position of the test
.90d9	a2 00		ldx #$00			ldx 	#0
.90db	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; work out the number
.90de	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; check if zero
.90e1	f0 0e		beq $90f1			beq 	_WHExitLoop 				; if so exit the loop
.90e3	98		tya				tya 								; position *after* test.
.90e4	7a		ply				ply 								; restore position before test, at WHILE
.90e5	88		dey				dey
.90e6	48		pha				pha 								; push after test on the stack
.90e7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.90e9	20 73 9d	jsr $9d73			jsr 	StackOpen
.90ec	20 b7 9d	jsr $9db7			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.90ef	7a		ply				ply 								; restore the position *after* the test
.90f0	60		rts				rts
.90f1					_WHExitLoop:
.90f1	68		pla				pla 								; throw post loop position
.90f2	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.90f4	aa		tax				tax
.90f5	20 79 90	jsr $9079			jsr 	ScanForward
.90f8	60		rts				rts
.90f9					Command_WEND:
.90f9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.90fb	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.90fd	20 9f 9d	jsr $9d9f			jsr 	StackCheckFrame
.9100	20 c8 9d	jsr $9dc8			jsr 	STKLoadCodePosition 		; loop back
.9103	20 91 9d	jsr $9d91			jsr 	StackClose		 			; erase the frame
.9106	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a440					CheckRightBracket:
.a440	b1 30		lda ($30),y			lda 	(codePtr),y
.a442	c8		iny				iny
.a443	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a445	d0 0f		bne $a456			bne 	CNAFail
.a447	60		rts				rts
.a448					CheckComma:
.a448	b1 30		lda ($30),y			lda 	(codePtr),y
.a44a	c8		iny				iny
.a44b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a44d	d0 07		bne $a456			bne 	CNAFail
.a44f	60		rts				rts
.a450					CheckNextA:
.a450	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a452	d0 02		bne $a456			bne 	CNAFail
.a454	c8		iny				iny 								; skip character
.a455	60		rts				rts 								; and exit
.a456					CNAFail:
.a456	4c 26 aa	jmp $aa26			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9107					ErrorHandler:
.9107	a8		tay				tay 								; find the error text
.9108	f0 49		beq $9153			beq 	_EHEnd
.910a	a2 00		ldx #$00			ldx 	#0
.910c	a9 3f		lda #$3f			lda 	#((ErrorText) & $FF)
.910e	85 36		sta $36				sta 	0+zTemp0
.9110	a9 aa		lda #$aa			lda 	#((ErrorText) >> 8)
.9112	85 37		sta $37				sta 	1+zTemp0
.9114					_EHFind:
.9114	88		dey				dey 								; found the error text ?
.9115	f0 0e		beq $9125			beq 	_EHFound
.9117					_EHFindZero:
.9117	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9119	e6 36		inc $36				inc 	zTemp0
.911b	d0 02		bne $911f			bne 	_EHFNoCarry
.911d	e6 37		inc $37				inc 	zTemp0+1
.911f					_EHFNoCarry:
.911f	c9 00		cmp #$00			cmp 	#0
.9121	d0 f4		bne $9117			bne 	_EHFindZero
.9123	80 ef		bra $9114			bra 	_EHFind
.9125					_EHFound:
.9125	a5 36		lda $36				lda 	zTemp0 						; print message
.9127	a6 37		ldx $37				ldx 	zTemp0+1
.9129	20 60 91	jsr $9160			jsr 	PrintStringXA
.912c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.912e	b1 30		lda ($30),y			lda 	(codePtr),y
.9130	d0 05		bne $9137			bne 	_EHAtMsg
.9132	c8		iny				iny
.9133	b1 30		lda ($30),y			lda 	(codePtr),y
.9135	f0 17		beq $914e			beq 	_EHCREnd
.9137					_EHAtMsg:
.9137	a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.9139	a9 56		lda #$56			lda 	#_AtMsg & $FF
.913b	20 60 91	jsr $9160			jsr 	PrintStringXA
.913e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9140	b1 30		lda ($30),y			lda 	(codePtr),y
.9142	48		pha				pha
.9143	c8		iny				iny
.9144	b1 30		lda ($30),y			lda 	(codePtr),y
.9146	aa		tax				tax
.9147	68		pla				pla
.9148	20 9c a5	jsr $a59c			jsr 	ConvertInt16 				; convert XA to string
.914b	20 60 91	jsr $9160			jsr 	PrintStringXA 				; and print it.
.914e					_EHCREnd:
.914e	a9 0d		lda #$0d			lda 	#13 						; new line
.9150	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.9153					_EHEnd:
.9153	4c 9e 86	jmp $869e			jmp 	WarmStart
>9156	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>915e	20 00
.9160					PrintStringXA:
.9160	5a		phy				phy
.9161	86 37		stx $37				stx 	zTemp0+1
.9163	85 36		sta $36				sta 	zTemp0
.9165	a0 00		ldy #$00			ldy 	#0
.9167					_PSXALoop:
.9167	b1 36		lda ($36),y			lda 	(zTemp0),y
.9169	f0 06		beq $9171			beq 	_PSXAExit
.916b	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.916e	c8		iny				iny
.916f	80 f6		bra $9167			bra 	_PSXALoop
.9171					_PSXAExit:
.9171	7a		ply				ply
.9172	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9173					UnaryTrue:
.9173	fa		plx				plx
.9174					ReturnTrue:
.9174	a9 01		lda #$01			lda 	#1  						; set to 1
.9176	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.9179	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.917b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.917e	60		rts				rts
.917f					UnaryFalse:
.917f	fa		plx				plx
.9180					ReturnFalse:
.9180	4c bf 9c	jmp $9cbf			jmp 	NSMSetZero 					; set it all to zero
.9183					BinaryCompareEqual:
.9183	fa		plx				plx
.9184	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.9187	c9 00		cmp #$00			cmp 	#0
.9189	f0 e9		beq $9174			beq 	ReturnTrue
.918b	80 f3		bra $9180			bra 	ReturnFalse
.918d					BinaryCompareLess:
.918d	fa		plx				plx
.918e	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.9191	c9 ff		cmp #$ff			cmp 	#$FF
.9193	f0 df		beq $9174			beq 	ReturnTrue
.9195	80 e9		bra $9180			bra 	ReturnFalse
.9197					BinaryCompareGreater:
.9197	fa		plx				plx
.9198	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.919b	c9 01		cmp #$01			cmp 	#1
.919d	f0 d5		beq $9174			beq 	ReturnTrue
.919f	80 df		bra $9180			bra 	ReturnFalse
.91a1					BinaryCompareNotEqual:
.91a1	fa		plx				plx
.91a2	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.91a5	c9 00		cmp #$00			cmp 	#0
.91a7	d0 cb		bne $9174			bne 	ReturnTrue
.91a9	80 d5		bra $9180			bra 	ReturnFalse
.91ab					BinaryCompareLessEqual:
.91ab	fa		plx				plx
.91ac	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.91af	c9 01		cmp #$01			cmp 	#1
.91b1	d0 c1		bne $9174			bne 	ReturnTrue
.91b3	80 cb		bra $9180			bra 	ReturnFalse
.91b5					BinaryCompareGreaterEqual:
.91b5	fa		plx				plx
.91b6	20 bf 91	jsr $91bf			jsr 	CompareBaseCode
.91b9	c9 ff		cmp #$ff			cmp 	#$FF
.91bb	d0 b7		bne $9174			bne 	ReturnTrue
.91bd	80 c1		bra $9180			bra 	ReturnFalse
.91bf					CompareBaseCode:
.91bf	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; make both values if references.
.91c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.91c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91c8	29 10		and #$10			and 	#NSTString
.91ca	d0 40		bne $920c			bne 	_CBCString
.91cc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.91cf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91d2	d0 3b		bne $920f			bne 	_CBCFloat
.91d4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91d7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91da	29 08		and #$08			and 	#NSTFloat
.91dc	d0 31		bne $920f			bne 	_CBCFloat
.91de	20 12 92	jsr $9212			jsr 	CompareFixMinusZero
.91e1	e8		inx				inx
.91e2	20 12 92	jsr $9212			jsr 	CompareFixMinusZero
.91e5	ca		dex				dex
.91e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.91e9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91ec	10 0b		bpl $91f9			bpl 	_CDCSameSign
.91ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.91f1	30 16		bmi $9209			bmi 	_CBCLess 					; return $FF
.91f3					_CBCGreater:
.91f3	a9 01		lda #$01			lda 	#1
.91f5	60		rts				rts
.91f6					_CBCEqual:
.91f6	a9 00		lda #$00			lda 	#0
.91f8	60		rts				rts
.91f9					_CDCSameSign:
.91f9	20 22 93	jsr $9322			jsr 	SubTopTwoStack 				; unsigned subtract
.91fc	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; or the mantissa together
.91ff	f0 f5		beq $91f6			beq 	_CBCEqual 					; -0 == 0
.9201	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9204	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9207	10 ea		bpl $91f3			bpl 	_CBCGreater
.9209					_CBCLess:
.9209	a9 ff		lda #$ff			lda 	#$FF
.920b	60		rts				rts
.920c					_CBCString:
.920c	4c 78 92	jmp $9278			jmp 	CompareStrings
.920f					_CBCFloat:
.920f	4c 98 a6	jmp $a698			jmp 	CompareFloat
.9212					CompareFixMinusZero:
.9212	20 ef 9c	jsr $9cef			jsr 	NSMIsZero
.9215	d0 03		bne $921a			bne 	_CFXMZNotZero
.9217	9e 00 04	stz $0400,x			stz 	NSStatus,x
.921a					_CFXMZNotZero:
.921a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.921b					StringConcat:
.921b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.921e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9221	29 18		and #$18			and 	#NSBTypeMask
.9223	c9 10		cmp #$10			cmp 	#NSTString
.9225	d0 4e		bne $9275			bne		_SCType
.9227	64 38		stz $38				stz 	zTemp1 						; counting total length
.9229	e8		inx				inx
.922a	20 48 92	jsr $9248			jsr 	_SCSetupZ0 					; setup for second
.922d	20 53 92	jsr $9253			jsr 	_SCLengthZ0 				; length for second
.9230	ca		dex				dex
.9231	20 48 92	jsr $9248			jsr 	_SCSetupZ0 					; setup for first
.9234	20 53 92	jsr $9253			jsr 	_SCLengthZ0 				; length for first
.9237	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9239	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate
.923c	20 66 92	jsr $9266			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.923f	e8		inx				inx
.9240	20 48 92	jsr $9248			jsr 	_SCSetupZ0 					; copy second out
.9243	20 66 92	jsr $9266			jsr 	_SCCopy
.9246	ca		dex				dex
.9247	60		rts				rts
.9248					_SCSetupZ0:
.9248	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.924b	85 36		sta $36				sta 	zTemp0
.924d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9250	85 37		sta $37				sta 	zTemp0+1
.9252	60		rts				rts
.9253					_SCLengthZ0:
.9253	5a		phy				phy
.9254	a0 00		ldy #$00			ldy 	#0
.9256					_SCLenLoop:
.9256	b1 36		lda ($36),y			lda 	(zTemp0),y
.9258	f0 0a		beq $9264			beq 	_SCLExit
.925a	c8		iny				iny
.925b	e6 38		inc $38				inc 	zTemp1
.925d	10 f7		bpl $9256			bpl		_SCLenLoop
.925f	a9 09		lda #$09		lda	#9
.9261	4c 07 91	jmp $9107		jmp	ErrorHandler
.9264					_SCLExit:
.9264	7a		ply				ply
.9265	60		rts				rts
.9266					_SCCopy:
.9266	5a		phy				phy
.9267	a0 00		ldy #$00			ldy 	#0
.9269					_SCCopyLoop:
.9269	b1 36		lda ($36),y			lda 	(zTemp0),y
.926b	f0 06		beq $9273			beq 	_SCCExit
.926d	20 8b ad	jsr $ad8b			jsr 	StringTempWrite
.9270	c8		iny				iny
.9271	80 f6		bra $9269			bra 	_SCCopyLoop
.9273					_SCCExit:
.9273	7a		ply				ply
.9274	60		rts				rts
.9275					_SCType:
.9275	4c 30 aa	jmp $aa30			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a459					IntegerDivide:
.a459	fa		plx				plx
.a45a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a45d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a460	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a461	0a		asl a				asl 	a
.a462	10 05		bpl $a469			bpl 	_NotRef
.a464	48		pha				pha
.a465	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a468	68		pla				pla
.a469					_NotRef:
.a469	0a		asl a				asl 	a
.a46a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a46c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a46f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a472	f0 03		beq $a477			beq 	_IntegerCode 				; if clear, then we have two integers
.a474	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.a477					_IntegerCode:
.a477	20 99 a4	jsr $a499			jsr 	CheckDivideZero 			; do div zero check
.a47a	20 d1 a4	jsr $a4d1			jsr 	Int32Divide 				; do the division
.a47d	20 8e a5	jsr $a58e			jsr 	CalculateSign 				; calculate result sign
.a480					NSMCopyPlusTwoToZero:
.a480	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a483	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a486	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a489	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a48c	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a48f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a492	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a495	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a498	60		rts				rts
.a499					CheckDivideZero:
.a499	e8		inx				inx
.a49a	20 ef 9c	jsr $9cef			jsr 	NSMIsZero
.a49d	f0 02		beq $a4a1			beq 	_CDVError
.a49f	ca		dex				dex
.a4a0	60		rts				rts
.a4a1					_CDVError:
.a4a1	a9 03		lda #$03		lda	#3
.a4a3	4c 07 91	jmp $9107		jmp	ErrorHandler
.a4a6					IntegerModulus:
.a4a6	fa		plx				plx
.a4a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a4aa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a4ad	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a4ae	0a		asl a				asl 	a
.a4af	10 05		bpl $a4b6			bpl 	_NotRef
.a4b1	48		pha				pha
.a4b2	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a4b5	68		pla				pla
.a4b6					_NotRef:
.a4b6	0a		asl a				asl 	a
.a4b7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a4b9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a4bc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a4bf	f0 03		beq $a4c4			beq 	_IntegerCode 				; if clear, then we have two integers
.a4c1	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.a4c4					_IntegerCode:
.a4c4					IntegerModulusNoCheck:
.a4c4	20 99 a4	jsr $a499			jsr 	CheckDivideZero 			; do div zero check
.a4c7	20 d1 a4	jsr $a4d1			jsr 	Int32Divide 				; do the division
.a4ca	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a4cd	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a4d0	60		rts				rts
.a4d1					Int32Divide:
.a4d1	48		pha				pha 								; save AXY
.a4d2	5a		phy				phy
.a4d3	20 96 9c	jsr $9c96			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a4d6	20 bb 9c	jsr $9cbb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a4d9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a4db					_I32DivideLoop:
.a4db	e8		inx				inx
.a4dc	e8		inx				inx
.a4dd	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a4e0	ca		dex				dex
.a4e1	ca		dex				dex
.a4e2	20 d5 9c	jsr $9cd5			jsr 	NSMRotateLeft
.a4e5	20 11 a5	jsr $a511			jsr 	DivideCheckSubtract 		; check if subtract possible
.a4e8	90 03		bcc $a4ed			bcc 	_I32DivideNoCarryIn
.a4ea	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a4ed					_I32DivideNoCarryIn:
.a4ed	88		dey				dey 								; loop round till division completed.
.a4ee	d0 eb		bne $a4db			bne 	_I32DivideLoop
.a4f0	7a		ply				ply 								; restore AXY and exit
.a4f1	68		pla				pla
.a4f2	60		rts				rts
.a4f3					Int32ShiftDivide:
.a4f3	48		pha				pha 								; save AY
.a4f4	5a		phy				phy
.a4f5	e8		inx				inx 								; clear S[X+2]
.a4f6	e8		inx				inx
.a4f7	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.a4fa	ca		dex				dex
.a4fb	ca		dex				dex
.a4fc	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a4fe					_I32SDLoop:
.a4fe	20 11 a5	jsr $a511			jsr 	DivideCheckSubtract 		; check if subtract possible
.a501	e8		inx				inx
.a502	e8		inx				inx
.a503	20 d5 9c	jsr $9cd5			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a506	ca		dex				dex
.a507	ca		dex				dex
.a508	20 d5 9c	jsr $9cd5			jsr 	NSMRotateLeft
.a50b	88		dey				dey 	 							; do 31 times
.a50c	d0 f0		bne $a4fe			bne 	_I32SDLoop
.a50e	7a		ply				ply 								; restore AY and exit
.a50f	68		pla				pla
.a510	60		rts				rts
.a511					DivideCheckSubtract:
.a511	20 22 93	jsr $9322			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a514	b0 04		bcs $a51a			bcs 	_DCSExit 					; if carry set, then could do, exit
.a516	20 fc 92	jsr $92fc			jsr 	AddTopTwoStack 				; add it back in
.a519	18		clc				clc 								; and return False
.a51a					_DCSExit:
.a51a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a51b					MulInteger:
.a51b	fa		plx				plx
.a51c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a51f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a522	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a523	0a		asl a				asl 	a
.a524	10 05		bpl $a52b			bpl 	_NotRef
.a526	48		pha				pha
.a527	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a52a	68		pla				pla
.a52b					_NotRef:
.a52b	0a		asl a				asl 	a 							; put MSB of type into A:7
.a52c	30 0b		bmi $a539			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a52e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a531	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a534	f0 06		beq $a53c			beq 	_IntegerCode 				; if clear, then we have two integers
.a536	4c 6f a7	jmp $a76f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a539					_StringData:
.a539	4c 3a aa	jmp $aa3a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a53c					_IntegerCode:
.a53c	20 49 a5	jsr $a549			jsr 	MultiplyShort
.a53f	c9 00		cmp #$00			cmp 	#0
.a541	f0 05		beq $a548			beq 	_MIExit
.a543	a9 04		lda #$04		lda	#4
.a545	4c 07 91	jmp $9107		jmp	ErrorHandler
.a548					_MIExit:
.a548	60		rts				rts
.a549					MultiplyShort:
.a549	5a		phy				phy 								; save Y
.a54a	20 96 9c	jsr $9c96			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a54d	20 bb 9c	jsr $9cbb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a550	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a552					_I32MLoop:
.a552	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a555	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a558	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a55b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a55e	f0 28		beq $a588			beq 	_I32MExit 					; exit if zero
.a560	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a563	29 01		and #$01			and 	#1
.a565	f0 0e		beq $a575			beq 	_I32MNoAdd
.a567	20 fc 92	jsr $92fc			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a56a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a56d	10 06		bpl $a575			bpl 	_I32MNoAdd
.a56f					_I32ShiftRight:
.a56f	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight 				; shift S[X] right
.a572	c8		iny				iny 								; increment shift count
.a573	80 0a		bra $a57f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a575					_I32MNoAdd:
.a575	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a578	70 f5		bvs $a56f			bvs 	_I32ShiftRight 				; instead.
.a57a	e8		inx				inx
.a57b	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a57e	ca		dex				dex
.a57f					_I32MShiftUpper:
.a57f	e8		inx				inx 								; shift S[X+2] right
.a580	e8		inx				inx
.a581	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight
.a584	ca		dex				dex
.a585	ca		dex				dex
.a586	80 ca		bra $a552			bra 	_I32MLoop 					; try again.
.a588					_I32MExit:
.a588	20 8e a5	jsr $a58e			jsr 	CalculateSign
.a58b	98		tya				tya 								; shift in A
.a58c	7a		ply				ply 								; restore Y and exit
.a58d	60		rts				rts
.a58e					CalculateSign:
.a58e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a591	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a594	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a597	0a		asl a				asl 	a 							; shift bit 7 into carry
.a598	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a59b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9278					CompareStrings:
.9278	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.927b	3d 01 04	and $0401,x			and 	NSStatus+1,x
.927e	29 10		and #$10			and 	#NSBIsString
.9280	f0 2c		beq $92ae			beq 	_CSTypeError
.9282	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9285	85 36		sta $36				sta 	zTemp0
.9287	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.928a	85 37		sta $37				sta 	zTemp0+1
.928c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.928f	85 38		sta $38				sta 	zTemp1
.9291	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9294	85 39		sta $39				sta 	zTemp1+1
.9296	5a		phy				phy 								; save Y so we can access strings
.9297	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9299					_CSLoop:
.9299	c8		iny				iny
.929a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.929c	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.929e	d0 06		bne $92a6			bne 	_CSDifferent
.92a0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.92a2	d0 f5		bne $9299			bne 	_CSLoop 					; still comparing
.92a4					_CSExit:
.92a4	7a		ply				ply 								; reached end, return zero in A from EOS
.92a5	60		rts				rts
.92a6					_CSDifferent:
.92a6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.92a8	90 fa		bcc $92a4			bcc		_CSExit
.92aa	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.92ac	80 f6		bra $92a4			bra 	_CSExit
.92ae					_CSTypeError:
.92ae	4c 30 aa	jmp $aa30			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.92b1					ShiftLeft:
.92b1	38		sec				sec
.92b2	80 01		bra $92b5			bra 	ShiftMain
.92b4					ShiftRight:
.92b4	18		clc				clc
.92b5					ShiftMain:
.92b5	fa		plx				plx 								; restore X
.92b6	08		php				php 								; save direction
.92b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92ba	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92bd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92be	0a		asl a				asl 	a
.92bf	10 05		bpl $92c6			bpl 	_NotRef
.92c1	48		pha				pha
.92c2	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92c5	68		pla				pla
.92c6					_NotRef:
.92c6	0a		asl a				asl 	a
.92c7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92c9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92cc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.92cf	f0 03		beq $92d4			beq 	_IntegerCode 				; if clear, then we have two integers
.92d1	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.92d4					_IntegerCode:
.92d4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.92d7	29 e0		and #$e0			and 	#$E0
.92d9	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.92dc	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.92df	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.92e2	d0 13		bne $92f7			bne 	_SMExit0 					; if >= 32 it will always return zero.
.92e4					_SMLoop:
.92e4	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.92e7	30 11		bmi $92fa			bmi 	_SMExit 					; exit if done.
.92e9	28		plp				plp 								; restore direcition setting
.92ea	08		php				php
.92eb	90 05		bcc $92f2			bcc 	_SMRight
.92ed	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; shift left if CS
.92f0	80 f2		bra $92e4			bra 	_SMLoop
.92f2					_SMRight:
.92f2	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight 				; shift right if CC
.92f5	80 ed		bra $92e4			bra 	_SMLoop
.92f7					_SMExit0:
.92f7	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero 					; return zero.
.92fa					_SMExit:
.92fa	28		plp				plp 								; throw direction
.92fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.92fc					AddTopTwoStack:
.92fc	18		clc				clc
.92fd	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9300	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9303	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9306	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9309	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.930c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.930f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9312	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9315	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9318	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.931b	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.931e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9321	60		rts				rts
.9322					SubTopTwoStack:
.9322	38		sec				sec
.9323	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9326	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9329	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.932c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.932f	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9332	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9335	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9338	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.933b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.933e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9341	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9344	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9347	60		rts				rts
.9348					AddInteger:
.9348	fa		plx				plx
.9349	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.934c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.934f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9350	0a		asl a				asl 	a
.9351	10 05		bpl $9358			bpl 	_NotRef
.9353	48		pha				pha
.9354	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9357	68		pla				pla
.9358					_NotRef:
.9358	0a		asl a				asl 	a 							; put MSB of type into A:7
.9359	30 0b		bmi $9366			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.935b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.935e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9361	f0 06		beq $9369			beq 	_IntegerCode 				; if clear, then we have two integers
.9363	4c f7 a5	jmp $a5f7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9366					_StringData:
.9366	4c 1b 92	jmp $921b			jmp 	StringConcat							; at least one string - don't know both are strings.
.9369					_IntegerCode:
.9369					AddCode:
.9369	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.936c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936f	10 8b		bpl $92fc			bpl 	AddTopTwoStack
.9371	20 22 93	jsr $9322			jsr 	SubTopTwoStack 				; do a physical subtraction
.9374	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9377	10 09		bpl $9382			bpl 	_AddExit
.9379	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.937c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.937f	20 74 9c	jsr $9c74			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9382					_AddExit:
.9382	60		rts				rts
.9383					SubInteger:
.9383	fa		plx				plx
.9384	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9387	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.938a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.938b	0a		asl a				asl 	a
.938c	10 05		bpl $9393			bpl 	_NotRef
.938e	48		pha				pha
.938f	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9392	68		pla				pla
.9393					_NotRef:
.9393	0a		asl a				asl 	a 							; put MSB of type into A:7
.9394	30 0b		bmi $93a1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9396	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9399	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.939c	f0 06		beq $93a4			beq 	_IntegerCode 				; if clear, then we have two integers
.939e	4c fc a5	jmp $a5fc			jmp 	FloatingPointSub 							; otherwise at least one float.
.93a1					_StringData:
.93a1	4c 3a aa	jmp $aa3a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.93a4					_IntegerCode:
.93a4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.93a7	49 80		eor #$80			eor 	#$80
.93a9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.93ac	80 bb		bra $9369			bra 	AddCode 					; and do the same code as add.
.93ae					AndInteger:
.93ae	fa		plx				plx
.93af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93b2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93b6	0a		asl a				asl 	a
.93b7	10 05		bpl $93be			bpl 	_NotRef
.93b9	48		pha				pha
.93ba	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93bd	68		pla				pla
.93be					_NotRef:
.93be	0a		asl a				asl 	a
.93bf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93c1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93c4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93c7	f0 03		beq $93cc			beq 	_IntegerCode 				; if clear, then we have two integers
.93c9	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.93cc					_IntegerCode:
.93cc	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.93cf	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.93d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93d5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.93d8	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.93db	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93de	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.93e1	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.93e4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93e7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.93ea	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.93ed	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93f0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.93f3	60		rts				rts
.93f4					OraInteger:
.93f4	fa		plx				plx
.93f5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93f8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93fb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93fc	0a		asl a				asl 	a
.93fd	10 05		bpl $9404			bpl 	_NotRef
.93ff	48		pha				pha
.9400	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9403	68		pla				pla
.9404					_NotRef:
.9404	0a		asl a				asl 	a
.9405	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9407	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.940a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.940d	f0 03		beq $9412			beq 	_IntegerCode 				; if clear, then we have two integers
.940f	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.9412					_IntegerCode:
.9412	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9415	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9418	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.941b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.941e	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9421	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9424	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9427	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.942a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.942d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9430	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9433	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9436	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9439	60		rts				rts
.943a					EorInteger:
.943a	fa		plx				plx
.943b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.943e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9441	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9442	0a		asl a				asl 	a
.9443	10 05		bpl $944a			bpl 	_NotRef
.9445	48		pha				pha
.9446	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9449	68		pla				pla
.944a					_NotRef:
.944a	0a		asl a				asl 	a
.944b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.944d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9450	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9453	f0 03		beq $9458			beq 	_IntegerCode 				; if clear, then we have two integers
.9455	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.9458					_IntegerCode:
.9458	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.945b	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.945e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9461	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9464	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9467	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.946a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.946d	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9470	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9473	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9476	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9479	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.947c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.947f	60		rts				rts
.9480					WordIndirect:
.9480	fa		plx				plx
.9481	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9484	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9487	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9488	0a		asl a				asl 	a
.9489	10 05		bpl $9490			bpl 	_NotRef
.948b	48		pha				pha
.948c	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.948f	68		pla				pla
.9490					_NotRef:
.9490	0a		asl a				asl 	a
.9491	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9493	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9496	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9499	f0 03		beq $949e			beq 	_IntegerCode 				; if clear, then we have two integers
.949b	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.949e					_IntegerCode:
.949e	20 69 93	jsr $9369			jsr 	AddCode 					; add the two values
.94a1	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.94a3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94a6	60		rts				rts
.94a7					ByteIndirect:
.94a7	fa		plx				plx
.94a8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94ab	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94ae	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94af	0a		asl a				asl 	a
.94b0	10 05		bpl $94b7			bpl 	_NotRef
.94b2	48		pha				pha
.94b3	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94b6	68		pla				pla
.94b7					_NotRef:
.94b7	0a		asl a				asl 	a
.94b8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94ba	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94bd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94c0	f0 03		beq $94c5			beq 	_IntegerCode 				; if clear, then we have two integers
.94c2	4c 30 aa	jmp $aa30			jmp 	TypeError 					; anything else, type mismatch.
.94c5					_IntegerCode:
.94c5	20 69 93	jsr $9369			jsr 	AddCode 					; add the two values
.94c8	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.94ca	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a59c					ConvertInt16:
.a59c	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a59f	8e 10 04	stx $0410			stx 	NSMantissa1
.a5a2	9c 18 04	stz $0418			stz 	NSMantissa2
.a5a5	9c 20 04	stz $0420			stz 	NSMantissa3
.a5a8	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a5ab	a2 00		ldx #$00			ldx 	#0 							; stack level
.a5ad	a9 0a		lda #$0a			lda 	#10 						; base
.a5af	80 00		bra $a5b1			bra 	ConvertInt32
.a5b1					ConvertInt32:
.a5b1	5a		phy				phy
.a5b2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a5b4	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a5b7	10 08		bpl $a5c1			bpl 	_CI32NotNeg
.a5b9	48		pha				pha
.a5ba	a9 2d		lda #$2d			lda 	#'-'
.a5bc	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a5bf	c8		iny				iny
.a5c0	68		pla				pla
.a5c1					_CI32NotNeg:
.a5c1	20 cf a5	jsr $a5cf			jsr 	_CI32DivideConvert 			; recursive conversion
.a5c4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a5c6	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a5c9	7a		ply				ply
.a5ca	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a5cc	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a5ce	60		rts				rts
.a5cf					_CI32DivideConvert:
.a5cf	e8		inx				inx 								; write to next slot up
.a5d0	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.a5d3	ca		dex				dex
.a5d4	20 d1 a4	jsr $a4d1			jsr 	Int32Divide 				; divide
.a5d7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a5da	48		pha				pha
.a5db	20 80 a4	jsr $a480			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a5de	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; is it zero ?
.a5e1	f0 06		beq $a5e9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a5e3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a5e6	20 cf a5	jsr $a5cf			jsr 	_CI32DivideConvert 			; and recusrively call.
.a5e9					_CI32NoRecurse:
.a5e9	68		pla				pla 								; remainder
.a5ea	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a5ec	90 02		bcc $a5f0			bcc 	_CI32NotHex
.a5ee	69 26		adc #$26			adc 	#6+32
.a5f0					_CI32NotHex:
.a5f0	69 30		adc #$30			adc 	#48
.a5f2	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a5f5	c8		iny				iny
.a5f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.94ce					PrecedenceLevel:
>94ce	04					.byte	 4	; $00 <<
>94cf	02					.byte	 2	; $01 <=
>94d0	02					.byte	 2	; $02 <>
>94d1	00					.byte	 0	; $03 !!3
>94d2	00					.byte	 0	; $04 ><
>94d3	02					.byte	 2	; $05 >=
>94d4	04					.byte	 4	; $06 >>
>94d5	00					.byte	 0	; $07 !!7
>94d6	00					.byte	 0	; $08 !!8
>94d7	00					.byte	 0	; $09 !!9
>94d8	00					.byte	 0	; $0a !!10
>94d9	00					.byte	 0	; $0b !!11
>94da	00					.byte	 0	; $0c !!12
>94db	00					.byte	 0	; $0d !!13
>94dc	00					.byte	 0	; $0e !!14
>94dd	00					.byte	 0	; $0f !!15
>94de	00					.byte	 0	; $10 @
>94df	00					.byte	 0	; $11 !!17
>94e0	00					.byte	 0	; $12 !!18
>94e1	00					.byte	 0	; $13 [
>94e2	04					.byte	 4	; $14 \
>94e3	00					.byte	 0	; $15 ]
>94e4	01					.byte	 1	; $16 ^
>94e5	00					.byte	 0	; $17 _
>94e6	00					.byte	 0	; $18 `
>94e7	00					.byte	 0	; $19 !!25
>94e8	00					.byte	 0	; $1a !!26
>94e9	00					.byte	 0	; $1b {
>94ea	01					.byte	 1	; $1c |
>94eb	00					.byte	 0	; $1d }
>94ec	00					.byte	 0	; $1e ~
>94ed	00					.byte	 0	; $1f [7m<7F>[m
>94ee	00					.byte	 0	; $20
>94ef	05					.byte	 5	; $21 !
>94f0	00					.byte	 0	; $22 "
>94f1	00					.byte	 0	; $23 #
>94f2	05					.byte	 5	; $24 $
>94f3	04					.byte	 4	; $25 %
>94f4	01					.byte	 1	; $26 &
>94f5	00					.byte	 0	; $27 '
>94f6	00					.byte	 0	; $28 (
>94f7	00					.byte	 0	; $29 )
>94f8	04					.byte	 4	; $2a *
>94f9	03					.byte	 3	; $2b +
>94fa	00					.byte	 0	; $2c ,
>94fb	03					.byte	 3	; $2d -
>94fc	00					.byte	 0	; $2e .
>94fd	04					.byte	 4	; $2f /
>94fe	00					.byte	 0	; $30 0
>94ff	00					.byte	 0	; $31 1
>9500	00					.byte	 0	; $32 2
>9501	00					.byte	 0	; $33 3
>9502	00					.byte	 0	; $34 4
>9503	00					.byte	 0	; $35 5
>9504	00					.byte	 0	; $36 6
>9505	00					.byte	 0	; $37 7
>9506	00					.byte	 0	; $38 8
>9507	00					.byte	 0	; $39 9
>9508	00					.byte	 0	; $3a :
>9509	00					.byte	 0	; $3b ;
>950a	02					.byte	 2	; $3c <
>950b	02					.byte	 2	; $3d =
>950c	02					.byte	 2	; $3e >
>950d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.950e					EvaluateExpressionAt0:
.950e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9510					EvaluateExpression:
.9510	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9512					EvaluateExpressionAtPrecedence:
.9512	48		pha				pha 								; save precedence level
.9513	20 e1 97	jsr $97e1			jsr 	EvaluateTerm 				; evaluate term into level X.
.9516	68		pla				pla 								; restore precedence level.
.9517					_EXPRLoop:
.9517	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9519	b1 30		lda ($30),y			lda 	(codePtr),y
.951b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.951d	b0 25		bcs $9544			bcs 	_EXPRExit
.951f	da		phx				phx 								; read the operator precedence
.9520	aa		tax				tax
.9521	bd ce 94	lda $94ce,x			lda 	PrecedenceLevel,x
.9524	fa		plx				plx
.9525	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9527	f0 1b		beq $9544			beq 	_EXPRExit
.9529	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.952b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.952d	c5 37		cmp $37				cmp 	zTemp0+1
.952f	b0 13		bcs $9544			bcs		_EXPRExit 					; if current >= operator exit
.9531	48		pha				pha 								; save current precedence.
.9532	b1 30		lda ($30),y			lda 	(codePtr),y
.9534	c8		iny				iny
.9535	48		pha				pha
.9536	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9538	e8		inx				inx 								; work out the right hand side.
.9539	20 12 95	jsr $9512			jsr 	EvaluateExpressionAtPrecedence
.953c	ca		dex				dex
.953d	68		pla				pla 								; get operator, call the code.
.953e	20 47 95	jsr $9547			jsr 	_EXPRCaller
.9541	68		pla				pla 								; restore precedence level
.9542	80 d3		bra $9517			bra 	_EXPRLoop 					; and go round.
.9544					_EXPRExit:
.9544	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9546	60		rts				rts
.9547					_EXPRCaller:
.9547	da		phx				phx 								; save on stack, first thing is to restore it
.9548	0a		asl a				asl 	a 							; double so can use vectors into X
.9549	aa		tax				tax
.954a	7c 4e 8d	jmp ($8d4e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a5f7					FloatingPointAdd:
.a5f7	20 98 a7	jsr $a798			jsr 	FloatPrepare 				; prepare for floats
.a5fa	80 0b		bra $a607			bra 	FloatAdd
.a5fc					FloatingPointSub:
.a5fc	20 98 a7	jsr $a798			jsr 	FloatPrepare 				; prepare for floats
.a5ff					FloatSubtract:
.a5ff	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a602	49 80		eor #$80			eor 	#$80
.a604	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a607					FloatAdd:
.a607	48		pha				pha
.a608	5a		phy				phy
.a609	20 a9 a7	jsr $a7a9			jsr 	NSNormalise 				; normalise S[X]
.a60c	f0 54		beq $a662			beq 	_FAReturn1
.a60e	e8		inx				inx 								; normalise S[X+1]
.a60f	20 a9 a7	jsr $a7a9			jsr 	NSNormalise
.a612	ca		dex				dex
.a613	c9 00		cmp #$00			cmp 	#0
.a615	f0 6f		beq $a686			beq 	_FAExit 					; if so, just return A
.a617	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a61a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a61d	f0 1b		beq $a63a			beq 	_FAExponentsEqual
.a61f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a622	a8		tay				tay
.a623	38		sec				sec 								; do a signed comparison of the exponents.
.a624	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a627	50 02		bvc $a62b			bvc 	_FANoSignedChange
.a629	49 80		eor #$80			eor 	#$80
.a62b					_FANoSignedChange:
.a62b	29 80		and #$80			and 	#$80
.a62d	10 03		bpl $a632			bpl 	_FAHaveMax
.a62f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a632					_FAHaveMax:
.a632	20 89 a6	jsr $a689			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a635	e8		inx				inx
.a636	20 89 a6	jsr $a689			jsr 	_FAShiftToExponent
.a639	ca		dex				dex
.a63a					_FAExponentsEqual:
.a63a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a63d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a640	30 10		bmi $a652			bmi 	_FADifferentSigns
.a642	20 fc 92	jsr $92fc			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a645	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a648	10 3c		bpl $a686			bpl 	_FAExit 					; if no, we are done.
.a64a	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a64d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a650	80 34		bra $a686			bra 	_FAExit
.a652					_FADifferentSigns:
.a652	20 22 93	jsr $9322			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a655	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a658	10 2c		bpl $a686			bpl 	_FAExit 					; if no, we are done.
.a65a	20 6b 9c	jsr $9c6b			jsr 	NSMNegate 					; netate result
.a65d	20 74 9c	jsr $9c74			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a660	80 24		bra $a686			bra 	_FAExit
.a662					_FAReturn1:
.a662	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a665	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a668	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a66b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a66e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a671	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a674	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a677	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a67a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a67d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a680	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a683	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a686					_FAExit:
.a686	7a		ply				ply
.a687	68		pla				pla
.a688	60		rts				rts
.a689					_FAShiftToExponent:
.a689					_FAShiftToExponent2:
.a689	98		tya				tya 								; compare Y to exponent
.a68a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a68d	f0 08		beq $a697			beq 	_FASEExit 					; exit if so.
.a68f	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight	 			; shift the mantissa right
.a692	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a695	80 f2		bra $a689			bra 	_FAShiftToExponent2
.a697					_FASEExit:
.a697	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a698					CompareFloat:
.a698	20 ff a5	jsr $a5ff			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a69b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a69e	29 f8		and #$f8			and 	#$F8
.a6a0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6a3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a6a6	f0 09		beq $a6b1			beq 	_FCExit 					; zero, so approximately identical
.a6a8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a6aa	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a6ad	10 02		bpl $a6b1			bpl 	_FCExit
.a6af					_FCNegative:
.a6af	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a6b1					_FCExit:
.a6b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a6b2					FDivideCommand:
.a6b2	fa		plx				plx	 								; restore stack position
.a6b3	20 98 a7	jsr $a798			jsr 	FloatPrepare 				; prepare for floats
.a6b6					FloatDivide:
.a6b6	48		pha				pha
.a6b7	e8		inx				inx
.a6b8	20 a9 a7	jsr $a7a9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a6bb	ca		dex				dex
.a6bc	c9 00		cmp #$00			cmp 	#0
.a6be	f0 20		beq $a6e0			beq 	_FDZero
.a6c0	20 a9 a7	jsr $a7a9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a6c3	f0 19		beq $a6de			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a6c5	20 f3 a4	jsr $a4f3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a6c8	20 80 a4	jsr $a480			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a6cb	20 a9 a7	jsr $a7a9			jsr		NSNormalise 				; renormalise
.a6ce	20 8e a5	jsr $a58e			jsr 	CalculateSign 				; calculate result sign
.a6d1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a6d4	38		sec				sec
.a6d5	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a6d8	38		sec				sec
.a6d9	e9 1e		sbc #$1e			sbc 	#30
.a6db	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a6de					_FDExit:
.a6de	68		pla				pla
.a6df	60		rts				rts
.a6e0					_FDZero:
.a6e0	a9 03		lda #$03		lda	#3
.a6e2	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a6e5					FloatFractionalPart:
.a6e5	5a		phy				phy
.a6e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a6e9	29 7f		and #$7f			and 	#$7F
.a6eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6ee	20 a9 a7	jsr $a7a9			jsr 	NSNormalise
.a6f1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a6f4	38		sec				sec
.a6f5	e9 e0		sbc #$e0			sbc 	#$E0
.a6f7	90 31		bcc $a72a			bcc 	_FFPExit 					; already fractional
.a6f9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a6fb	b0 2a		bcs $a727			bcs 	_FFPZero
.a6fd	a8		tay				tay 								; put count to do in Y
.a6fe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a701	20 2c a7	jsr $a72c			jsr 	_FFPPartial
.a704	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a707	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a70a	20 2c a7	jsr $a72c			jsr 	_FFPPartial
.a70d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a710	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a713	20 2c a7	jsr $a72c			jsr 	_FFPPartial
.a716	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a719	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a71c	20 2c a7	jsr $a72c			jsr 	_FFPPartial
.a71f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a722	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; zeroed check.
.a725	d0 03		bne $a72a			bne 	_FFPExit
.a727					_FFPZero:
.a727	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.a72a					_FFPExit:
.a72a	7a		ply				ply
.a72b	60		rts				rts
.a72c					_FFPPartial:
.a72c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a72e	f0 17		beq $a747			beq 	_FFFPPExit
.a730	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a732	b0 0c		bcs $a740			bcs 	_FFFPPWholeByte
.a734	5a		phy				phy
.a735					_FFFPPLeft:
.a735	0a		asl a				asl 	a
.a736	88		dey				dey
.a737	d0 fc		bne $a735			bne 	_FFFPPLeft
.a739	7a		ply				ply
.a73a					_FFFPPRight:
.a73a	4a		lsr a				lsr 	a
.a73b	88		dey				dey
.a73c	d0 fc		bne $a73a			bne 	_FFFPPRight
.a73e	80 07		bra $a747			bra 	_FFFPPExit
.a740					_FFFPPWholeByte:
.a740	98		tya				tya 								; subtract 8 from count
.a741	38		sec				sec
.a742	e9 08		sbc #$08			sbc 	#8
.a744	a8		tay				tay
.a745	a9 00		lda #$00			lda 	#0 							; and clear all
.a747					_FFFPPExit:
.a747	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a748					FloatIntegerPart:
.a748	48		pha				pha
.a749	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a74c	f0 1f		beq $a76d			beq 	_FIPExit 					; if so do nothing
.a74e	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; is it zero ?
.a751	f0 17		beq $a76a			beq 	_FIPZero 					; if so return zero.
.a753	20 a9 a7	jsr $a7a9			jsr 	NSNormalise 				; normalise
.a756	f0 12		beq $a76a			beq 	_FIPZero 					; normalised to zero, exit zero
.a758					_FIPShift:
.a758	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a75b	10 08		bpl $a765			bpl 	_FIPCheckZero
.a75d	20 e2 9c	jsr $9ce2			jsr 	NSMShiftRight 				; shift mantissa right
.a760	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a763	80 f3		bra $a758			bra 	_FIPShift
.a765					_FIPCheckZero:
.a765	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; avoid -0 problem
.a768	d0 03		bne $a76d			bne 	_FIPExit 					; set to zero if mantissa zero.
.a76a					_FIPZero:
.a76a	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.a76d					_FIPExit:
.a76d	68		pla				pla
.a76e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a76f					FloatingPointMultiply:
.a76f	20 98 a7	jsr $a798			jsr 	FloatPrepare 				; prepare for floats
.a772					FloatMultiply:
.a772	48		pha				pha
.a773	20 a9 a7	jsr $a7a9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a776	f0 1b		beq $a793			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a778	e8		inx				inx
.a779	20 a9 a7	jsr $a7a9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a77c	ca		dex				dex
.a77d	c9 00		cmp #$00			cmp 	#0
.a77f	f0 0f		beq $a790			beq 	_FDSetZero
.a781	20 49 a5	jsr $a549			jsr 	MultiplyShort 				; calculate the result.
.a784	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a787	18		clc				clc
.a788	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a78b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a78e	80 03		bra $a793			bra 	_FDExit
.a790					_FDSetZero:
.a790	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero 					; return 0
.a793					_FDExit:
.a793	20 a9 a7	jsr $a7a9			jsr 	NSNormalise 				; normalise the result
.a796	68		pla				pla
.a797	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a798					FloatPrepare:
.a798	20 20 96	jsr $9620			jsr 	DereferenceTopTwo 			; dereference the top two values
.a79b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a79e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7a1	29 10		and #$10			and 	#NSBIsString
.a7a3	d0 01		bne $a7a6			bne 	_FDType
.a7a5	60		rts				rts
.a7a6					_FDType:
.a7a6	4c 30 aa	jmp $aa30			jmp 	TypeError
.a7a9					NSNormalise:
.a7a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a7ac	29 80		and #$80			and 	#$80
.a7ae	09 08		ora #$08			ora 	#NSTFloat
.a7b0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a7b3	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; if zero exit
.a7b6	d0 09		bne $a7c1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a7b8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a7bb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a7be	a9 00		lda #$00			lda 	#0 							; set Z flag
.a7c0	60		rts				rts
.a7c1					_NSNormaliseOptimise:
.a7c1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a7c4	d0 22		bne $a7e8			bne 	_NSNormaliseLoop
.a7c6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a7c9	30 1d		bmi $a7e8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a7cb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7ce	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a7d1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a7d7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7da	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a7dd	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a7e0	38		sec				sec
.a7e1	e9 08		sbc #$08			sbc 	#8
.a7e3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a7e6	80 d9		bra $a7c1			bra 	_NSNormaliseOptimise
.a7e8					_NSNormaliseLoop:
.a7e8	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a7eb	70 08		bvs $a7f5			bvs 	_NSNExit 					; exit if so with Z flag clear
.a7ed	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; shift mantissa left
.a7f0	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a7f3	80 f3		bra $a7e8			bra 	_NSNormaliseLoop
.a7f5					_NSNExit:
.a7f5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a7f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.954d					AssignNumber:
.954d	5a		phy				phy
.954e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9551	85 36		sta $36				sta 	zTemp0
.9553	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9556	85 37		sta $37				sta 	zTemp0+1
.9558	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.955b	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.955d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9560	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9562	c9 08		cmp #$08			cmp 	#NSTFloat
.9564	f0 2a		beq $9590			beq 	_ANFloat
.9566	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9569	f0 05		beq $9570			beq		_ANNotFloat
.956b	e8		inx				inx
.956c	20 48 a7	jsr $a748			jsr 	FloatIntegerPart 			; make it an integer
.956f	ca		dex				dex
.9570					_ANNotFloat:
.9570	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9573	29 03		and #$03			and 	#3
.9575	d0 05		bne $957c			bne 	_ANByteWord
.9577	20 9c 95	jsr $959c			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.957a	80 1e		bra $959a			bra 	_ANExit
.957c					_ANByteWord:
.957c	48		pha				pha 								; save count
.957d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9580	92 36		sta ($36)			sta 	(zTemp0)
.9582	68		pla				pla
.9583	c9 01		cmp #$01			cmp	 	#1
.9585	f0 13		beq $959a			beq 	_ANExit
.9587	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.958a	a0 01		ldy #$01			ldy 	#1
.958c	91 36		sta ($36),y			sta 	(zTemp0),y
.958e	80 0a		bra $959a			bra 	_ANExit
.9590					_ANFloat:
.9590	20 9c 95	jsr $959c			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9593	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9596	a0 04		ldy #$04			ldy 	#4
.9598	91 36		sta ($36),y			sta 	(zTemp0),y
.959a					_ANExit:
.959a	7a		ply				ply
.959b	60		rts				rts
.959c					_ANCopy4PackSign:
.959c	a0 03		ldy #$03			ldy 	#3
.959e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.95a1	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.95a3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95a6	91 36		sta ($36),y			sta 	(zTemp0),y
.95a8	88		dey				dey
.95a9	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95ac	91 36		sta ($36),y			sta 	(zTemp0),y
.95ae	88		dey				dey
.95af	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95b2	91 36		sta ($36),y			sta 	(zTemp0),y
.95b4	88		dey				dey
.95b5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b8	91 36		sta ($36),y			sta 	(zTemp0),y
.95ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95bb					AssignString:
.95bb	5a		phy				phy
.95bc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95bf	85 38		sta $38				sta 	zTemp1
.95c1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95c4	85 39		sta $39				sta 	zTemp1+1
.95c6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95c9	85 36		sta $36				sta 	zTemp0
.95cb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95ce	85 37		sta $37				sta 	zTemp0+1
.95d0	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.95d4	f0 23		beq $95f9			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95d6	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d7	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95d9	e9 02		sbc #$02			sbc 	#2
.95db	85 3c		sta $3c				sta 	zsTemp
.95dd	a0 01		ldy #$01			ldy 	#1
.95df	b1 36		lda ($36),y			lda 	(zTemp0),y
.95e1	e9 00		sbc #$00			sbc 	#0
.95e3	85 3d		sta $3d				sta 	zsTemp+1
.95e5	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e7					_ASGetLength:
.95e7	c8		iny				iny
.95e8	b1 38		lda ($38),y			lda 	(zTemp1),y
.95ea	d0 fb		bne $95e7			bne 	_ASGetLength
.95ec	98		tya				tya 								; is this length <= current length
.95ed	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95ef	90 20		bcc $9611			bcc 	_ASCopyString
.95f1	f0 1e		beq $9611			beq 	_ASCopyString
.95f3	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95f5	a0 01		ldy #$01			ldy 	#1
.95f7	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f9					_ASNewStringRequired:
.95f9	e8		inx				inx 								; concrete the new string.
.95fa	20 cc ac	jsr $accc			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95fd	ca		dex				dex
.95fe	18		clc				clc
.95ff	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9602	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9604	92 36		sta ($36)			sta 	(zTemp0)
.9606	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9609	69 00		adc #$00			adc 	#0
.960b	a0 01		ldy #$01			ldy 	#1
.960d	91 36		sta ($36),y			sta 	(zTemp0),y
.960f	80 0d		bra $961e			bra 	_ASExit
.9611					_ASCopyString:
.9611	a0 00		ldy #$00			ldy 	#0
.9613					_ASCopyLoop:
.9613	b1 38		lda ($38),y			lda 	(zTemp1),y
.9615	c8		iny				iny
.9616	c8		iny				iny
.9617	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9619	88		dey				dey
.961a	c9 00		cmp #$00			cmp 	#0
.961c	d0 f5		bne $9613			bne 	_ASCopyLoop
.961e					_ASExit:
.961e	7a		ply				ply
.961f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9620					DereferenceTopTwo:
.9620	e8		inx				inx
.9621	20 25 96	jsr $9625			jsr 	Dereference 				; deref x+1
.9624	ca		dex				dex  								; falls through to deref x
.9625					Dereference:
.9625	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9628	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.962a	f0 57		beq $9683			beq 	_DRFExit 					; not a reference
.962c	5a		phy				phy
.962d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9630	85 36		sta $36				sta 	zTemp0
.9632	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9635	85 37		sta $37				sta 	zTemp0+1
.9637	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.963a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.963c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.963f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9642	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9644	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9646	f0 0f		beq $9657			beq 	_DRFDereferenceTwo
.9648	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.964a	f0 39		beq $9685			beq 	_DRFFull
.964c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.964f	29 03		and #$03			and 	#3
.9651	f0 32		beq $9685			beq 	_DRFFull 					; the whole word
.9653	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9655	f0 07		beq $965e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9657					_DRFDereferenceTwo:
.9657	a0 01		ldy #$01			ldy 	#1
.9659	b1 36		lda ($36),y			lda 	(zTemp0),y
.965b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.965e					_DRFClear23:
.965e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9661	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9664	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9667	29 18		and #$18			and 	#NSBTypeMask
.9669	9d 00 04	sta $0400,x			sta 	NSStatus,x
.966c	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.966e	d0 12		bne $9682			bne 	_DRFNotString
.9670	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9673	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9676	d0 0a		bne $9682			bne 	_DRFNotString
.9678	a9 84		lda #$84			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.967a	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.967d	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.967f	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9682					_DRFNotString
.9682	7a		ply				ply 								; restore Y and exit
.9683					_DRFExit:
.9683	60		rts				rts
.9684					_DRFNullString:
>9684	00						.byte 	0
.9685					_DRFFull:
.9685	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9687	b1 36		lda ($36),y			lda 	(zTemp0),y
.9689	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968c	c8		iny				iny
.968d	b1 36		lda ($36),y			lda 	(zTemp0),y
.968f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9692	c8		iny				iny
.9693	b1 36		lda ($36),y			lda 	(zTemp0),y
.9695	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9698	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.969b	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.969e	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.96a0	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.96a3	f0 06		beq $96ab			beq 	_DRFNoExponent
.96a5	c8		iny				iny 								; if not, read the exponent as well.
.96a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96ab					_DRFNoExponent:
.96ab	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96ae	10 0d		bpl $96bd			bpl 	_DRFExit2 					; if not, then exit.
.96b0	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96b2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b8	09 80		ora #$80			ora 	#NSBIsNegative
.96ba	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96bd					_DRFExit2:
.96bd	7a		ply				ply
.96be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96bf					EncodeNumberStart:
.96bf	38		sec				sec
.96c0	80 01		bra $96c3			bra 	EncodeNumberContinue+1
.96c2					EncodeNumberContinue:
.96c2	18		clc				clc
.96c3					EncodeNumber:
.96c3	08		php				php 								; save reset.
.96c4	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96c6	f0 12		beq $96da			beq 	_ENIsOkay
.96c8	c9 30		cmp #$30			cmp 	#"0"
.96ca	90 04		bcc $96d0			bcc 	_ENBadNumber
.96cc	c9 3a		cmp #$3a			cmp 	#"9"+1
.96ce	90 0a		bcc $96da			bcc 	_ENIsOkay
.96d0					_ENBadNumber:
.96d0	28		plp				plp 								; throw saved reset
.96d1	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96d4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96d6	f0 7e		beq $9756			beq 	_ENConstructFinal
.96d8					_ENFail:
.96d8	18		clc				clc 								; not allowed
.96d9	60		rts				rts
.96da					_ENIsOkay:
.96da	28		plp				plp 								; are we restarting
.96db	90 15		bcc $96f2			bcc 	_ENNoRestart
.96dd					_ENStartEncode:
.96dd	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96df	f0 0c		beq $96ed			beq 	_ENFirstDP
.96e1	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96e3	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.96e6	a9 01		lda #$01			lda 	#ESTA_Low
.96e8					_ENExitChange:
.96e8	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96eb	38		sec				sec
.96ec	60		rts				rts
.96ed					_ENFirstDP:
.96ed	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero 					; clear integer part
.96f0	80 3f		bra $9731			bra 	_ESTASwitchFloat			; go straight to float and exi
.96f2					_ENNoRestart:
.96f2	48		pha				pha 								; save on stack.
.96f3	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96f6	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f8	f0 09		beq $9703			beq  	_ESTALowState
.96fa	c9 02		cmp #$02			cmp 	#ESTA_High
.96fc	f0 29		beq $9727			beq 	_ESTAHighState
.96fe	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9700	f0 3b		beq $973d			beq 	_ESTADecimalState
>9702	db						.byte 	$DB 						; causes a break in the emulator
.9703					_ESTALowState:
.9703	68		pla				pla 								; get value back
.9704	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9706	f0 29		beq $9731			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9708	29 0f		and #$0f			and 	#15 						; make digit
.970a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.970d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9710	0a		asl a				asl 	a
.9711	0a		asl a				asl 	a
.9712	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9715	0a		asl a				asl 	a
.9716	6d 86 04	adc $0486			adc 	DigitTemp
.9719	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.971c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.971e	90 05		bcc $9725			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9720	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9722	8d 85 04	sta $0485			sta 	EncodeState
.9725					_ESTANoSwitch:
.9725	38		sec				sec
.9726	60		rts				rts
.9727					_ESTAHighState:
.9727	68		pla				pla 								; get value back
.9728	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.972a	f0 05		beq $9731			beq 	_ESTASwitchFloat
.972c	20 90 97	jsr $9790			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.972f	38		sec				sec
.9730	60		rts				rts
.9731					_ESTASwitchFloat:
.9731	9c 87 04	stz $0487			stz 	DecimalCount
.9734	e8		inx				inx 								; zero the decimal additive.
.9735	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.9738	ca		dex				dex
.9739	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.973b	80 ab		bra $96e8			bra 	_ENExitChange
.973d					_ESTADecimalState:
.973d	68		pla				pla 								; digit.
.973e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9740	f0 96		beq $96d8			beq 	_ENFail
.9742	e8		inx				inx 								; put digit into fractional part of X+1
.9743	20 90 97	jsr $9790			jsr 	ESTAShiftDigitIntoMantissa
.9746	ca		dex				dex
.9747	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.974a	ad 87 04	lda $0487			lda 	DecimalCount
.974d	c9 0b		cmp #$0b			cmp 	#11
.974f	f0 02		beq $9753			beq 	_ESTADSFail
.9751	38		sec				sec
.9752	60		rts				rts
.9753					_ESTADSFail:
.9753	4c 2b aa	jmp $aa2b			jmp 	RangeError
.9756					_ENConstructFinal:
.9756	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9759	f0 33		beq $978e			beq 	_ENCFExit 					; no decimals
.975b	5a		phy				phy
.975c	0a		asl a				asl 	a 							; x 4 and CLC
.975d	0a		asl a				asl 	a
.975e	6d 87 04	adc $0487			adc 	DecimalCount
.9761	a8		tay				tay
.9762	b9 ea a9	lda $a9ea,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9765	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9768	b9 eb a9	lda $a9eb,y			lda 	DecimalScalarTable-5+1,y
.976b	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.976e	b9 ec a9	lda $a9ec,y			lda 	DecimalScalarTable-5+2,y
.9771	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9774	b9 ed a9	lda $a9ed,y			lda 	DecimalScalarTable-5+3,y
.9777	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.977a	b9 ee a9	lda $a9ee,y			lda 	DecimalScalarTable-5+4,y
.977d	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9780	a9 08		lda #$08			lda 	#NSTFloat
.9782	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9785	7a		ply				ply
.9786	e8		inx				inx 								; multiply decimal const by decimal scalar
.9787	20 72 a7	jsr $a772			jsr 	FloatMultiply
.978a	ca		dex				dex
.978b	20 07 a6	jsr $a607			jsr 	FloatAdd 					; add to integer part.
.978e					_ENCFExit:
.978e	18		clc				clc 								; reject the digit.
.978f	60		rts				rts
.9790					ESTAShiftDigitIntoMantissa:
.9790	29 0f		and #$0f			and 	#15 						; save digit
.9792	48		pha				pha
.9793	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9796	48		pha				pha
.9797	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.979a	48		pha				pha
.979b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.979e	48		pha				pha
.979f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97a2	48		pha				pha
.97a3	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 2
.97a6	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 4
.97a9	18		clc				clc 								; pop mantissa and add
.97aa	68		pla				pla
.97ab	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b1	68		pla				pla
.97b2	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97b5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b8	68		pla				pla
.97b9	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97bc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97bf	68		pla				pla
.97c0	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97c3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97c6	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 10
.97c9	68		pla				pla 								; add digit
.97ca	18		clc				clc
.97cb	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97d1	90 0d		bcc $97e0			bcc 	_ESTASDExit
.97d3	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97d6	d0 08		bne $97e0			bne 	_ESTASDExit
.97d8	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97db	d0 03		bne $97e0			bne 	_ESTASDExit
.97dd	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97e0					_ESTASDExit:
.97e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97e1					EvaluateTerm:
.97e1	b1 30		lda ($30),y			lda 	(codePtr),y
.97e3	30 18		bmi $97fd			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97e5	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e7	b0 6f		bcs $9858			bcs 	_ETVariable
.97e9	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97eb	90 6e		bcc $985b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ed	c9 3a		cmp #$3a			cmp 	#'9'+1
.97ef	b0 6a		bcs $985b			bcs 	_ETPuncUnary
.97f1	20 bf 96	jsr $96bf			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97f4					_ETNumber:
.97f4	c8		iny				iny 								; keep encoding until we have the numbers
.97f5	b1 30		lda ($30),y			lda 	(codePtr),y
.97f7	20 c2 96	jsr $96c2			jsr 	EncodeNumberContinue
.97fa	b0 f8		bcs $97f4			bcs 	_ETNumber 					; go back if accepted.
.97fc	60		rts				rts
.97fd					_ETCheckUnary:
.97fd	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97ff	f0 41		beq $9842			beq 	_ETString
.9801	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9803	f0 12		beq $9817			beq 	_ETHexConstant
.9805	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9807	90 0b		bcc $9814			bcc 	_ETSyntaxError
.9809	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.980b	b0 07		bcs $9814			bcs 	_ETSyntaxError
.980d	da		phx				phx 								; push X on the stack
.980e	0a		asl a				asl 	a 							; put vector x 2 into X
.980f	aa		tax				tax
.9810	c8		iny				iny 								; consume unary function token
.9811	7c ce 8d	jmp ($8dce,x)			jmp 	(VectorSet0,x) 				; and do it.
.9814					_ETSyntaxError:
.9814	4c 26 aa	jmp $aa26			jmp 	SyntaxError
.9817					_ETHexConstant:
.9817	c8		iny				iny 								; skip #
.9818	c8		iny				iny 								; skip count
.9819	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero 					; clear result
.981c					_ETHLoop:
.981c	b1 30		lda ($30),y			lda 	(codePtr),y
.981e	c8		iny				iny 								; and consume
.981f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9821	f0 1e		beq $9841			beq 	_ETHExit
.9823	48		pha				pha 								; save on stack.
.9824	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 2
.9827	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 4
.982a	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 8
.982d	20 d4 9c	jsr $9cd4			jsr 	NSMShiftLeft 				; x 16
.9830	68		pla				pla 								; ASCII
.9831	c9 41		cmp #$41			cmp 	#'A'
.9833	90 02		bcc $9837			bcc 	_ETHNotChar
.9835	e9 07		sbc #$07			sbc 	#7
.9837					_ETHNotChar:
.9837	29 0f		and #$0f			and 	#15 						; digit now
.9839	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.983c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.983f	80 db		bra $981c			bra 	_ETHLoop 					; go round.
.9841					_ETHExit:
.9841	60		rts				rts
.9842					_ETString:
.9842	c8		iny				iny 								; look at length
.9843	b1 30		lda ($30),y			lda 	(codePtr),y
.9845	48		pha				pha
.9846	c8		iny				iny 								; first character
.9847	20 09 9d	jsr $9d09			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.984a	68		pla				pla 								; restore count and save
.984b	85 36		sta $36				sta 	zTemp0
.984d	98		tya				tya 								; add length to Y to skip it.
.984e	18		clc				clc
.984f	65 36		adc $36				adc 	zTemp0
.9851	a8		tay				tay
.9852	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9854	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9857	60		rts				rts
.9858					_ETVariable:
.9858	4c b2 98	jmp $98b2			jmp 	VariableHandler
.985b					_ETPuncUnary:
.985b	c8		iny				iny 								; consume the unary character
.985c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.985e	f0 2d		beq $988d			beq 	_ETUnaryNegate
.9860	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9862	f0 39		beq $989d			beq 	_ETDereference
.9864	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9866	f0 43		beq $98ab			beq 	_ETParenthesis
.9868	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.986a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.986c	f0 06		beq $9874			beq 	_ETIndirection
.986e	e6 36		inc $36				inc 	zTemp0
.9870	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9872	d0 a0		bne $9814			bne 	_ETSyntaxError
.9874					_ETIndirection:
.9874	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9876	1a		inc a				inc 	a
.9877	48		pha				pha
.9878	20 e1 97	jsr $97e1			jsr 	EvaluateTerm				; evaluate the term
.987b	20 25 96	jsr $9625			jsr 	Dereference 				; dereference it.
.987e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9881	d0 07		bne $988a			bne 	_ETTypeMismatch
.9883	68		pla				pla 								; indirection 1-2
.9884	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9886	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9889	60		rts				rts
.988a					_ETTypeMismatch:
.988a	4c 30 aa	jmp $aa30			jmp 	TypeError
.988d					_ETUnaryNegate:
.988d	20 e1 97	jsr $97e1			jsr 	EvaluateTerm				; evaluate the term
.9890	20 25 96	jsr $9625			jsr 	Dereference 				; dereference it.
.9893	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9896	29 10		and #$10			and 	#NSTString
.9898	d0 f0		bne $988a			bne 	_ETTypeMismatch
.989a	4c 6b 9c	jmp $9c6b			jmp 	NSMNegate  					; just toggles the sign bit.
.989d					_ETDereference:
.989d	20 e1 97	jsr $97e1			jsr 	EvaluateTerm				; evaluate the term
.98a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.98a3	29 20		and #$20			and 	#NSBIsReference
.98a5	f0 e3		beq $988a			beq 	_ETTypeMismatch
.98a7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98aa	60		rts				rts
.98ab					_ETParenthesis:
.98ab	20 10 95	jsr $9510			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98ae	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; check for )
.98b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98b2					VariableHandler:
.98b2	b1 30		lda ($30),y			lda 	(codePtr),y
.98b4	18		clc				clc
.98b5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b7	85 37		sta $37				sta 	zTemp0+1
.98b9	c8		iny				iny
.98ba	b1 30		lda ($30),y			lda 	(codePtr),y
.98bc	85 36		sta $36				sta 	zTemp0
.98be	c8		iny				iny
.98bf	18		clc				clc									; copy variable address+3 to mantissa
.98c0	69 03		adc #$03			adc 	#3
.98c2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c5	a5 37		lda $37				lda 	zTemp0+1
.98c7	69 00		adc #$00			adc 	#0
.98c9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98cc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98cf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98d2	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98d5	5a		phy				phy
.98d6	a0 02		ldy #$02			ldy 	#2 							; read type
.98d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.98da	7a		ply				ply
.98db	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98dd	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98df	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98e2	29 04		and #$04			and 	#NSBIsArray
.98e4	d0 01		bne $98e7			bne 	_VHArray
.98e6	60		rts				rts
.98e7					_VHArray:
.98e7	e8		inx				inx
.98e8	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98eb	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ed	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98f0	b1 30		lda ($30),y			lda 	(codePtr),y
.98f2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98f4	d0 06		bne $98fc			bne 	_VHNoSecondIndex
.98f6	c8		iny				iny 								; skip the comma
.98f7	e8		inx				inx
.98f8	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98fb	ca		dex				dex
.98fc					_VHNoSecondIndex:
.98fc	ca		dex				dex 								; set X back.
.98fd	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; and check the right bracket.
.9900	5a		phy				phy 								; save position
.9901	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9904	85 3e		sta $3e				sta 	zaTemp
.9906	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9909	85 3f		sta $3f				sta 	zaTemp+1
.990b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.990d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990f	f0 02		beq $9913			beq 	_VHHas2Mask
.9911	a9 ff		lda #$ff			lda 	#$FF
.9913					_VHHas2Mask:
.9913	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9916	f0 54		beq $996c			beq 	_VHBadIndex
.9918	0a		asl a				asl 	a 							; carry will be set if a second index
.9919	90 09		bcc $9924			bcc 	_VHCheckFirstIndex
.991b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.991d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.991f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9922	90 48		bcc $996c			bcc 	_VHBadIndex
.9924					_VHCheckFirstIndex:
.9924	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9926	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9928	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.992b	90 3f		bcc $996c			bcc 	_VHBadIndex
.992d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.992f	64 37		stz $37				stz 	zTemp0+1
.9931	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9934	30 0f		bmi $9945			bmi 	_VHNoMultiply
.9936	da		phx				phx
.9937	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.993a	48		pha				pha
.993b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.993d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.993f	1a		inc a				inc 	a 							; add 1 for zero base
.9940	fa		plx				plx
.9941	20 c2 a8	jsr $a8c2			jsr 	Multiply8x8 				; calculate -> Z0
.9944	fa		plx				plx
.9945					_VHNoMultiply:
.9945	18		clc				clc
.9946	a5 36		lda $36				lda 	zTemp0
.9948	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.994b	85 36		sta $36				sta 	zTemp0
.994d	a5 37		lda $37				lda 	zTemp0+1
.994f	69 00		adc #$00			adc 	#0
.9951	85 37		sta $37				sta 	zTemp0+1
.9953	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9956	20 32 88	jsr $8832			jsr 	ScaleByBaseType
.9959	18		clc				clc
.995a	b2 3e		lda ($3e)			lda 	(zaTemp)
.995c	65 36		adc $36				adc 	zTemp0
.995e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9961	a0 01		ldy #$01			ldy 	#1
.9963	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9965	65 37		adc $37				adc 	zTemp0+1
.9967	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.996a	7a		ply				ply 								; restore position
.996b	60		rts				rts
.996c					_VHBadIndex:
.996c	a9 17		lda #$17		lda	#23
.996e	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a7f8					AbsUnary:
.a7f8	fa		plx				plx 								; restore stack pos
.a7f9	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; get a float or int
.a7fc	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a7ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a802	29 7f		and #$7f			and 	#$7F
.a804	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a807	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9971					AllocUnary:
.9971	fa		plx				plx 								; restore stack pos
.9972	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger		; get bytes required.
.9975	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.9978	da		phx				phx 								; save X/Y
.9979	5a		phy				phy
.997a	8a		txa				txa 								; copy X into Y
.997b	a8		tay				tay
.997c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.997f	aa		tax				tax
.9980	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9983	20 90 99	jsr $9990			jsr 	AllocateXABytes 			; allocate memory
.9986	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9989	8a		txa				txa
.998a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.998d	7a		ply				ply
.998e	fa		plx				plx
.998f	60		rts				rts
.9990					AllocateXABytes:
.9990	5a		phy				phy
.9991	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9994	84 36		sty $36				sty 	zTemp0
.9996	5a		phy				phy
.9997	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.999a	84 37		sty $37				sty 	zTemp0+1
.999c	5a		phy				phy
.999d	18		clc				clc 								; add to low memory pointer
.999e	6d 8c 04	adc $048c			adc 	lowMemPtr
.99a1	8d 8c 04	sta $048c			sta 	lowMemPtr
.99a4	8a		txa				txa
.99a5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99a8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99ab	b0 2f		bcs $99dc			bcs 	CISSMemory
.99ad	20 ce 99	jsr $99ce			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99b0					_ClearMemory:
.99b0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99b3	c5 36		cmp $36				cmp 	zTemp0
.99b5	d0 07		bne $99be			bne 	_CMClearNext
.99b7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99ba	c5 37		cmp $37				cmp 	zTemp0+1
.99bc	f0 0c		beq $99ca			beq 	_CMExit
.99be					_CMClearNext:
.99be	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99c0	92 36		sta ($36)			sta 	(zTemp0)
.99c2	e6 36		inc $36				inc 	zTemp0
.99c4	d0 ea		bne $99b0			bne 	_ClearMemory
.99c6	e6 37		inc $37				inc		zTemp0+1
.99c8	80 e6		bra $99b0			bra 	_ClearMemory
.99ca					_CMExit:
.99ca	fa		plx				plx
.99cb	68		pla				pla
.99cc	7a		ply				ply
.99cd	60		rts				rts
.99ce					CheckIdentifierStringSpace:
.99ce	48		pha				pha
.99cf	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99d2	18		clc				clc
.99d3	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99d5	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99d8	b0 02		bcs $99dc			bcs 	CISSMemory
.99da	68		pla				pla
.99db	60		rts				rts
.99dc					CISSMemory:
.99dc	a9 06		lda #$06		lda	#6
.99de	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a808					AscUnary:
.a808	fa		plx				plx 								; restore stack pos
.a809	20 1e 9c	jsr $9c1e			jsr 	EvaluateString 				; get a string
.a80c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a80e	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.a811	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a814	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a815					FracUnary:
.a815	fa		plx				plx 								; restore stack pos
.a816	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; get a float or int
.a819	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a81c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a81f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a821	f0 04		beq $a827			beq 	_IUZero
.a823	20 e5 a6	jsr $a6e5			jsr 	FloatFractionalPart
.a826	60		rts				rts
.a827					_IUZero:
.a827	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.a82a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a82b					IntUnary:
.a82b	fa		plx				plx 								; restore stack pos
.a82c	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; get a float or int
.a82f	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a832	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a835	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a837	f0 03		beq $a83c			beq 	_IUExit
.a839	20 48 a7	jsr $a748			jsr 	FloatIntegerPart
.a83c					_IUExit:
.a83c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a83d					LenUnary:
.a83d	fa		plx				plx 								; restore stack pos
.a83e	20 1e 9c	jsr $9c1e			jsr 	EvaluateString 				; get a string
.a841	5a		phy				phy
.a842	a0 00		ldy #$00			ldy 	#0 							; find length
.a844					_LenFind:
.a844	b1 36		lda ($36),y			lda 	(zTemp0),y
.a846	f0 06		beq $a84e			beq 	_LenExit
.a848	c8		iny				iny
.a849	d0 f9		bne $a844			bne 	_LenFind
.a84b	4c 2b aa	jmp $aa2b			jmp 	RangeError 					; string > 255
.a84e					_LenExit:
.a84e	98		tya				tya
.a84f	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.a852	7a		ply				ply
.a853	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a856	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.99e1					Unary_Not:
.99e1	fa		plx				plx
.99e2	20 36 9c	jsr $9c36			jsr 	EvaluateInteger 			; get integer
.99e5	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.99e8	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; zero mantissa ?
.99eb	f0 04		beq $99f1			beq 	_NotZero
.99ed	20 bf 9c	jsr $9cbf			jsr 	NSMSetZero
.99f0	60		rts				rts
.99f1					_NotZero:
.99f1	4c 74 91	jmp $9174			jmp 	ReturnTrue
.99f4					_UNBad:
.99f4	4c 35 aa	jmp $aa35			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.99f7					Unary_Random:
.99f7	fa		plx				plx
.99f8	20 70 9a	jsr $9a70			jsr 	Random32Bit 				; get a random number
.99fb	20 55 9a	jsr $9a55			jsr 	URCopyToMantissa  			; put in mantissa
.99fe	e8		inx				inx
.99ff	20 4b 9c	jsr $9c4b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9a02	ca		dex				dex
.9a03	20 c4 a4	jsr $a4c4			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9a06	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9a09	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a0c	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.9a0f	60		rts				rts
.9a10					Unary_Rnd:
.9a10	fa		plx				plx
.9a11	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; number to use.
.9a14	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; closing bracket
.9a17	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9a1a	f0 2b		beq $9a47			beq 	_URCopySeed
.9a1c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9a1f	10 23		bpl $9a44			bpl 	_URDontSeed
.9a21	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9a24	49 17		eor #$17			eor 	#$17
.9a26	8d 88 04	sta $0488			sta 	RandomSeed+0
.9a29	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a2c	49 a5		eor #$a5			eor 	#$A5
.9a2e	8d 89 04	sta $0489			sta 	RandomSeed+1
.9a31	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9a34	49 c2		eor #$c2			eor 	#$C2
.9a36	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9a39	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9a3c	49 9d		eor #$9d			eor 	#$9D
.9a3e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9a41	20 70 9a	jsr $9a70			jsr 	Random32Bit
.9a44					_URDontSeed:
.9a44	20 70 9a	jsr $9a70			jsr 	Random32Bit 				; generate a number.
.9a47					_URCopySeed:
.9a47	20 55 9a	jsr $9a55			jsr 	URCopyToMantissa 			; copy into mantissa
.9a4a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9a4c	8d 28 04	sta $0428			sta 	NSExponent
.9a4f	a9 08		lda #$08			lda 	#NSTFloat
.9a51	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9a54	60		rts				rts
.9a55					URCopyToMantissa:
.9a55	ad 88 04	lda $0488			lda 	RandomSeed+0
.9a58	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a5b	ad 89 04	lda $0489			lda 	RandomSeed+1
.9a5e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a61	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9a64	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a67	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9a6a	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9a6c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a6f	60		rts				rts
.9a70					Random32Bit:
.9a70	5a		phy				phy
.9a71	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9a73	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9a76	d0 03		bne $9a7b			bne 	_Random1
.9a78	a8		tay				tay 								; if so do it 256 times
.9a79	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9a7b					_Random1:
.9a7b	0a		asl a				asl 	a 							; LSFR RNG
.9a7c	2e 89 04	rol $0489			rol 	RandomSeed+1
.9a7f	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9a82	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9a85	90 02		bcc $9a89			bcc 	_Random2
.9a87	49 c5		eor #$c5			eor 	#$C5
.9a89					_Random2:
.9a89	88		dey				dey
.9a8a	d0 ef		bne $9a7b			bne 	_Random1
.9a8c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9a8f	7a		ply				ply
.9a90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a857					SgnUnary:
.a857	fa		plx				plx 								; restore stack pos
.a858	20 13 9c	jsr $9c13			jsr 	EvaluateNumber 				; get a float or int
.a85b	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.a85e	20 ef 9c	jsr $9cef			jsr 	NSMIsZero 					; if zero
.a861	f0 10		beq $a873			beq 	_SGZero  					; return Int Zero
.a863	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a866	48		pha				pha
.a867	a9 01		lda #$01			lda 	#1 							; set to 1
.a869	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.a86c	68		pla				pla
.a86d	29 80		and #$80			and		#$80 						; copy the sign byte out
.a86f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a872	60		rts				rts
.a873	20 bf 9c	jsr $9cbf	_SGZero:jsr 	NSMSetZero
.a876	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a877					ValUnary:
.a877	fa		plx				plx 								; restore stack pos
.a878	20 8d a8	jsr $a88d			jsr 	ValMainCode 				; do the main val() code
.a87b	b0 01		bcs $a87e			bcs 	_VUError 					; couldn't convert
.a87d	60		rts				rts
.a87e					_VUError:
.a87e	4c 30 aa	jmp $aa30			jmp 	TypeError
.a881					IsValUnary:
.a881	fa		plx				plx 								; restore stack pos
.a882	20 8d a8	jsr $a88d			jsr 	ValMainCode 				; do the main val() code
.a885	b0 03		bcs $a88a			bcs 	_VUBad
.a887	4c 74 91	jmp $9174			jmp 	ReturnTrue
.a88a					_VUBad:
.a88a	4c 80 91	jmp $9180			jmp 	ReturnFalse
.a88d					ValMainCode:
.a88d	20 1e 9c	jsr $9c1e			jsr 	EvaluateString 				; get a string
.a890	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; check right bracket present
.a893	5a		phy				phy
.a894	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a896	f0 17		beq $a8af			beq 	_VMCFail2
.a898	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a89a	48		pha				pha 								; save first character
.a89b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a89d	d0 01		bne $a8a0			bne 	_VMCStart
.a89f	c8		iny				iny 								; skip over -
.a8a0					_VMCStart:
.a8a0	38		sec				sec 								; initialise first time round.
.a8a1					_VMCNext:
.a8a1	c8		iny				iny 								; pre-increment
.a8a2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a8a4	f0 0c		beq $a8b2			beq 	_VMCSuccess 				; successful.
.a8a6	20 c3 96	jsr $96c3			jsr 	EncodeNumber 				; send it to the number-builder
.a8a9	90 03		bcc $a8ae			bcc 	_VMCFail 					; if failed, give up.
.a8ab	18		clc				clc 								; next time round, countinue
.a8ac	80 f3		bra $a8a1			bra 	_VMCNext
.a8ae					_VMCFail:
.a8ae	68		pla				pla
.a8af					_VMCFail2:
.a8af	7a		ply				ply
.a8b0	38		sec				sec
.a8b1	60		rts				rts
.a8b2					_VMCSuccess:
.a8b2	a9 00		lda #$00			lda 	#0 							; construct final
.a8b4	20 c3 96	jsr $96c3			jsr 	EncodeNumber
.a8b7	68		pla				pla
.a8b8	c9 2d		cmp #$2d			cmp 	#"-"
.a8ba	d0 03		bne $a8bf			bne 	_VMCNotNegative
.a8bc	20 6b 9c	jsr $9c6b			jsr		NSMNegate
.a8bf					_VMCNotNegative:
.a8bf	7a		ply				ply
.a8c0	18		clc				clc
.a8c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9a91					ChrUnary:
.9a91	fa		plx				plx 								; restore stack pos
.9a92	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger			; get value
.9a95	48		pha				pha
.9a96	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.9a99	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9a9b	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate
.9a9e	68		pla				pla 								; write number to it
.9a9f	20 8b ad	jsr $ad8b			jsr 	StringTempWrite
.9aa2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9aa3					SpcUnary:
.9aa3	fa		plx				plx 								; restore stack pos
.9aa4	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger			; get value
.9aa7	5a		phy				phy
.9aa8	48		pha				pha 								; save count
.9aa9	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate
.9aac	7a		ply				ply 								; to do count in Y
.9aad					_SpcLoop:
.9aad	c0 00		cpy #$00			cpy 	#0
.9aaf	f0 08		beq $9ab9			beq 	_SpcExit
.9ab1	a9 20		lda #$20			lda 	#32
.9ab3	20 8b ad	jsr $ad8b			jsr 	StringTempWrite
.9ab6	88		dey				dey
.9ab7	80 f4		bra $9aad			bra 	_SPCLoop
.9ab9					_SpcExit:
.9ab9	7a		ply				ply
.9aba	20 40 a4	jsr $a440			jsr 	CheckRightBracket
.9abd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9abe					Unary_Str:
.9abe	fa		plx				plx
.9abf	20 13 9c	jsr $9c13			jsr 	EvaluateNumber  			; get number
.9ac2	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; closing bracket
.9ac5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9ac7	20 e0 9a	jsr $9ae0			jsr 	ConvertNumberToString 		; do the conversion.
.9aca	a9 21		lda #$21			lda		#33 						; create buffer
.9acc	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate 			; allocate memory
.9acf	da		phx				phx
.9ad0	a2 00		ldx #$00			ldx 	#0
.9ad2					_USCopy:
.9ad2	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9ad5	20 8b ad	jsr $ad8b			jsr 	StringTempWrite
.9ad8	e8		inx				inx
.9ad9	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9adc	d0 f4		bne $9ad2			bne 	_USCopy
.9ade	fa		plx				plx
.9adf	60		rts				rts
.9ae0					ConvertNumberToString:
.9ae0	5a		phy				phy 								; save code position
.9ae1	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9ae4	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9ae7	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9aea	10 0a		bpl $9af6			bpl 	_CNTSNotNegative
.9aec	29 7f		and #$7f			and 	#$7F 						; make +ve
.9aee	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9af1	a9 2d		lda #$2d			lda 	#"-"
.9af3	20 5c 9b	jsr $9b5c			jsr 	WriteDecimalBuffer
.9af6					_CNTSNotNegative:
.9af6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9af9	f0 15		beq $9b10			beq 	_CNTSNotFloat
.9afb	e8		inx				inx 								; round up
.9afc	a9 01		lda #$01			lda 	#1
.9afe	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.9b01	ca		dex				dex
.9b02	bd 28 04	lda $0428,x			lda		NSExponent,x
.9b05	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9b08	a9 08		lda #$08			lda 	#NSTFloat
.9b0a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b0d	20 07 a6	jsr $a607			jsr 	FloatAdd
.9b10					_CNTSNotFloat:
.9b10	20 3e 9b	jsr $9b3e			jsr 	MakePlusTwoString
.9b13	20 e5 a6	jsr $a6e5			jsr 	FloatFractionalPart 		; get the fractional part
.9b16	20 a9 a7	jsr $a7a9			jsr 	NSNormalise					; normalise , exit if zero
.9b19	f0 21		beq $9b3c			beq 	_CNTSExit
.9b1b	a9 2e		lda #$2e			lda 	#"."
.9b1d	20 5c 9b	jsr $9b5c			jsr 	WriteDecimalBuffer 			; write decimal place
.9b20					_CNTSDecimal:
.9b20	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9b23	30 17		bmi $9b3c			bmi 	_CNTSExit
.9b25	e8		inx				inx 								; x 10.0
.9b26	a9 0a		lda #$0a			lda 	#10
.9b28	20 c1 9c	jsr $9cc1			jsr 	NSMSetByte
.9b2b	a9 08		lda #$08			lda 	#NSTFloat
.9b2d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b30	ca		dex				dex
.9b31	20 72 a7	jsr $a772			jsr 	FloatMultiply
.9b34	20 3e 9b	jsr $9b3e			jsr 	MakePlusTwoString
.9b37	20 e5 a6	jsr $a6e5			jsr 	FloatFractionalPart 		; get the fractional part
.9b3a	80 e4		bra $9b20			bra 	_CNTSDecimal 				; keep going.
.9b3c					_CNTSExit:
.9b3c	7a		ply				ply
.9b3d	60		rts				rts
.9b3e					MakePlusTwoString:
.9b3e	da		phx				phx
.9b3f	20 96 9c	jsr $9c96			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9b42	e8		inx				inx 								; access it
.9b43	e8		inx				inx
.9b44	20 48 a7	jsr $a748			jsr 	FloatIntegerPart 			; make it an integer
.9b47	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9b49	20 b1 a5	jsr $a5b1			jsr 	ConvertInt32
.9b4c	a2 00		ldx #$00			ldx	 	#0
.9b4e					_MPTSCopy:
.9b4e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9b51	20 5c 9b	jsr $9b5c			jsr 	WriteDecimalBuffer
.9b54	e8		inx				inx
.9b55	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9b58	d0 f4		bne $9b4e			bne 	_MPTSCopy
.9b5a	fa		plx				plx
.9b5b	60		rts				rts
.9b5c					WriteDecimalBuffer:
.9b5c	da		phx				phx
.9b5d	ae 95 04	ldx $0495			ldx 	dbOffset
.9b60	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9b63	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9b66	ee 95 04	inc $0495			inc 	dbOffset
.9b69	fa		plx				plx
.9b6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9b6b					Unary_Left:
.9b6b	fa		plx				plx
.9b6c	18		clc				clc 								; only one parameter
.9b6d	20 e2 9b	jsr $9be2			jsr 	SubstringInitial 			; set up.
.9b70	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9b73	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9b76	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9b79	80 2c		bra $9ba7			bra 	SubstringMain
.9b7b					Unary_Right:
.9b7b	fa		plx				plx
.9b7c	18		clc				clc 								; only one parameter
.9b7d	20 e2 9b	jsr $9be2			jsr 	SubstringInitial 			; set up.
.9b80	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9b83	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9b86	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9b89	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9b8c	b0 02		bcs $9b90			bcs 	_URNotUnderflow
.9b8e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9b90					_URNotUnderFlow:
.9b90	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9b93	80 12		bra $9ba7			bra 	SubStringMain
.9b95					Unary_Mid:
.9b95	fa		plx				plx
.9b96	38		sec				sec 								; two parameters
.9b97	20 e2 9b	jsr $9be2			jsr 	SubstringInitial 			; set up.
.9b9a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9b9d	f0 05		beq $9ba4			beq 	_UMError
.9b9f	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ba2	80 03		bra $9ba7			bra 	SubStringMain
.9ba4					_UMError:
.9ba4	4c 35 aa	jmp $aa35			jmp 	ArgumentError
.9ba7					SubStringMain:
.9ba7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9baa	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9bad	b0 2d		bcs $9bdc			bcs 	_SSMNull 					; if so, return an empty string.
.9baf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9bb2	f0 28		beq $9bdc			beq 	_SSMNull 					; return empty string.
.9bb4	18		clc				clc 								; add the offset +1 to the address and
.9bb5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9bb8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9bbb	85 36		sta $36				sta 	zTemp0
.9bbd	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9bc0	69 00		adc #$00			adc 	#0
.9bc2	85 37		sta $37				sta 	zTemp0+1
.9bc4					_SSMNoCarry:
.9bc4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9bc7	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate 			; allocate that many characters
.9bca	5a		phy				phy 								; save Y
.9bcb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9bcd					_SSMCopy:
.9bcd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9bcf	f0 09		beq $9bda			beq 	_SSMEString 				; no more to copy
.9bd1	20 8b ad	jsr $ad8b			jsr 	StringTempWrite 			; and write it out.
.9bd4	c8		iny				iny
.9bd5	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9bd8	d0 f3		bne $9bcd			bne 	_SSMCopy
.9bda					_SSMEString:
.9bda	7a		ply				ply
.9bdb					_SSMExit:
.9bdb	60		rts				rts
.9bdc					_SSMNull:
.9bdc	a9 00		lda #$00			lda 	#0
.9bde	20 4d ad	jsr $ad4d			jsr 	StringTempAllocate
.9be1	60		rts				rts
.9be2					SubstringInitial:
.9be2	da		phx				phx 								; save initial stack position
.9be3	08		php				php 								; save carry on stack indicating 2 parameters
.9be4	20 1e 9c	jsr $9c1e			jsr 	EvaluateString 				; get a string
.9be7	5a		phy				phy 								; calculate length to exponent.
.9be8	a0 ff		ldy #$ff			ldy 	#$FF
.9bea					_SIFindLength:
.9bea	c8		iny				iny
.9beb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bed	d0 fb		bne $9bea			bne 	_SIFindLength
.9bef	98		tya				tya
.9bf0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9bf3	7a		ply				ply
.9bf4	e8		inx				inx
.9bf5	20 48 a4	jsr $a448			jsr 	CheckComma 					; comma next
.9bf8	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; get next parameter
.9bfb	28		plp				plp 								; is it the last parameter ?
.9bfc	90 07		bcc $9c05			bcc 	_SSIExit 					; if so, exit.
.9bfe	e8		inx				inx
.9bff	20 48 a4	jsr $a448			jsr 	CheckComma 					; comma next
.9c02	20 57 9c	jsr $9c57			jsr 	Evaluate8BitInteger 		; get last parameter
.9c05					_SSIExit:
.9c05	fa		plx				plx
.9c06	20 40 a4	jsr $a440			jsr 	CheckRightBracket 			; check closing bracket
.9c09	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9c0a					EvaluateValue:
.9c0a	48		pha				pha
.9c0b	20 10 95	jsr $9510			jsr		EvaluateExpression 			; expression
.9c0e	20 25 96	jsr $9625			jsr 	Dereference					; derefernce it
.9c11	68		pla				pla
.9c12	60		rts				rts
.9c13					EvaluateNumber:
.9c13	20 0a 9c	jsr $9c0a			jsr 	EvaluateValue 				; get a value
.9c16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9c19	29 10		and #$10			and 	#NSBIsString
.9c1b	d0 16		bne $9c33			bne 	HelperTypeError
.9c1d	60		rts				rts
.9c1e					EvaluateString:
.9c1e	20 0a 9c	jsr $9c0a			jsr 	EvaluateValue 				; get a value
.9c21	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9c24	29 10		and #$10			and 	#NSBIsString
.9c26	f0 0b		beq $9c33			beq 	HelperTypeError
.9c28					CopyAddressToTemp0:
.9c28	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9c2b	85 36		sta $36				sta 	zTemp0
.9c2d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c30	85 37		sta $37				sta 	zTemp0+1
.9c32	60		rts				rts
.9c33					HelperTypeError:
.9c33	4c 30 aa	jmp $aa30			jmp 	TypeError
.9c36					EvaluateInteger:
.9c36	20 13 9c	jsr $9c13			jsr 	EvaluateNumber
.9c39	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9c3c	d0 0a		bne $9c48			bne 	HelperValueError 			; if not, it's a float.
.9c3e	60		rts				rts
.9c3f					EvaluateUnsignedInteger:
.9c3f	20 36 9c	jsr $9c36			jsr 	EvaluateInteger 			; check integer is +ve
.9c42	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9c45	30 01		bmi $9c48			bmi 	HelperValueError
.9c47	60		rts				rts
.9c48					HelperValueError:
.9c48	4c 35 aa	jmp $aa35			jmp 	ArgumentError
.9c4b					Evaluate16BitInteger:
.9c4b	20 3f 9c	jsr $9c3f			jsr	 	EvaluateUnsignedInteger		; get integer
.9c4e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9c51	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9c54	d0 f2		bne $9c48			bne 	HelperValueError
.9c56	60		rts				rts
.9c57					Evaluate8BitInteger:
.9c57	20 3f 9c	jsr $9c3f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9c5a	d0 ec		bne $9c48			bne 	HelperValueError
.9c5c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9c5f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9c62	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9c65	d0 e1		bne $9c48			bne 	HelperValueError
.9c67	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a8c2					Multiply8x8:
.a8c2	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a8c3	85 36		sta $36			  	sta 	zTemp0
.a8c5	86 37		stx $37				stx 	zTemp0+1
.a8c7	a9 00		lda #$00			lda 	#0
.a8c9	a2 08		ldx #$08			ldx 	#8
.a8cb					_M88Loop:
.a8cb	90 03		bcc $a8d0			bcc 	_M88NoAdd
.a8cd	18		clc				clc
.a8ce	65 37		adc $37				adc 	zTemp0+1
.a8d0					_M88NoAdd:
.a8d0	6a		ror a				ror 	a
.a8d1	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a8d3	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a8d4	d0 f5		bne $a8cb			bne 	_M88Loop
.a8d6	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a8d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9c6b					NSMNegate:
.9c6b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9c6e	49 80		eor #$80			eor 	#NSBIsNegative
.9c70	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c73	60		rts				rts
.9c74					NSMNegateMantissa:
.9c74	38		sec				sec
.9c75	a9 00		lda #$00			lda 	#0
.9c77	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9c7a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c7d	a9 00		lda #$00			lda 	#0
.9c7f	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9c82	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c85	a9 00		lda #$00			lda 	#0
.9c87	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9c8a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c8d	a9 00		lda #$00			lda 	#0
.9c8f	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9c92	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c95	60		rts				rts
.9c96					NSMShiftUpTwo:
.9c96	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c99	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c9c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c9f	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ca2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ca5	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ca8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9cab	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9cae	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9cb1	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9cb4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cb7	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9cba	60		rts				rts
.9cbb					NSMSetZeroMantissaOnly:
.9cbb	a9 00		lda #$00			lda 	#0
.9cbd	80 08		bra $9cc7			bra 	NSMSetMantissa
.9cbf					NSMSetZero:
.9cbf	a9 00		lda #$00			lda 	#0
.9cc1					NSMSetByte:
.9cc1	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9cc4	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9cc7					NSMSetMantissa:
.9cc7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9cca	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9ccd	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9cd0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9cd3	60		rts				rts
.9cd4					NSMShiftLeft:
.9cd4	18		clc				clc
.9cd5					NSMRotateLeft:
.9cd5	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9cd8	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9cdb	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9cde	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9ce1	60		rts				rts
.9ce2					NSMShiftRight:
.9ce2	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9ce5	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9ce8	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9ceb	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9cee	60		rts				rts
.9cef					NSMIsZero:
.9cef	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9cf2	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9cf5	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9cf8	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9cfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a8d9					Assemble_ora:
.a8d9	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8dc	01					.byte $01
.a8dd					Assemble_and:
.a8dd	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8e0	21					.byte $21
.a8e1					Assemble_eor:
.a8e1	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8e4	41					.byte $41
.a8e5					Assemble_adc:
.a8e5	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8e8	61					.byte $61
.a8e9					Assemble_sta:
.a8e9	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8ec	81					.byte $81
.a8ed					Assemble_lda:
.a8ed	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8f0	a1					.byte $a1
.a8f1					Assemble_cmp:
.a8f1	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8f4	c1					.byte $c1
.a8f5					Assemble_sbc:
.a8f5	20 31 84	jsr $8431		jsr	AssembleGroup1
>a8f8	e1					.byte $e1
.a8f9					Assemble_asl:
.a8f9	20 38 84	jsr $8438		jsr	AssembleGroup2
>a8fc	02					.byte $02
>a8fd	75					.byte $75
.a8fe					Assemble_rol:
.a8fe	20 38 84	jsr $8438		jsr	AssembleGroup2
>a901	22					.byte $22
>a902	75					.byte $75
.a903					Assemble_lsr:
.a903	20 38 84	jsr $8438		jsr	AssembleGroup2
>a906	42					.byte $42
>a907	75					.byte $75
.a908					Assemble_ror:
.a908	20 38 84	jsr $8438		jsr	AssembleGroup2
>a90b	62					.byte $62
>a90c	75					.byte $75
.a90d					Assemble_stx:
.a90d	20 38 84	jsr $8438		jsr	AssembleGroup2
>a910	82					.byte $82
>a911	50					.byte $50
.a912					Assemble_ldx:
.a912	20 38 84	jsr $8438		jsr	AssembleGroup2
>a915	a2					.byte $a2
>a916	d0					.byte $d0
.a917					Assemble_dec:
.a917	20 38 84	jsr $8438		jsr	AssembleGroup2
>a91a	c2					.byte $c2
>a91b	55					.byte $55
.a91c					Assemble_inc:
.a91c	20 38 84	jsr $8438		jsr	AssembleGroup2
>a91f	e2					.byte $e2
>a920	55					.byte $55
.a921					Assemble_stz:
.a921	20 38 84	jsr $8438		jsr	AssembleGroup2
>a924	60					.byte $60
>a925	44					.byte $44
.a926					Assemble_bit:
.a926	20 38 84	jsr $8438		jsr	AssembleGroup2
>a929	20					.byte $20
>a92a	55					.byte $55
.a92b					Assemble_sty:
.a92b	20 38 84	jsr $8438		jsr	AssembleGroup2
>a92e	80					.byte $80
>a92f	54					.byte $54
.a930					Assemble_ldy:
.a930	20 38 84	jsr $8438		jsr	AssembleGroup2
>a933	a0					.byte $a0
>a934	d5					.byte $d5
.a935					Assemble_cpy:
.a935	20 38 84	jsr $8438		jsr	AssembleGroup2
>a938	c0					.byte $c0
>a939	d4					.byte $d4
.a93a					Assemble_cpx:
.a93a	20 38 84	jsr $8438		jsr	AssembleGroup2
>a93d	e0					.byte $e0
>a93e	d0					.byte $d0
.a93f					Assemble_tsb:
.a93f	20 38 84	jsr $8438		jsr	AssembleGroup2
>a942	00					.byte $00
>a943	50					.byte $50
.a944					Assemble_trb:
.a944	20 38 84	jsr $8438		jsr	AssembleGroup2
>a947	10					.byte $10
>a948	50					.byte $50
.a949					Assemble_jsr:
.a949	20 38 84	jsr $8438		jsr	AssembleGroup2
>a94c	14					.byte $14
>a94d	10					.byte $10
.a94e					Assemble_jmp:
.a94e	20 38 84	jsr $8438		jsr	AssembleGroup2
>a951	40					.byte $40
>a952	10					.byte $10
.a953					Assemble_bpl:
.a953	20 89 84	jsr $8489		jsr	AssembleGroup3
>a956	10					.byte $10
.a957					Assemble_bmi:
.a957	20 89 84	jsr $8489		jsr	AssembleGroup3
>a95a	30					.byte $30
.a95b					Assemble_bvc:
.a95b	20 89 84	jsr $8489		jsr	AssembleGroup3
>a95e	50					.byte $50
.a95f					Assemble_bvs:
.a95f	20 89 84	jsr $8489		jsr	AssembleGroup3
>a962	70					.byte $70
.a963					Assemble_bcc:
.a963	20 89 84	jsr $8489		jsr	AssembleGroup3
>a966	90					.byte $90
.a967					Assemble_bcs:
.a967	20 89 84	jsr $8489		jsr	AssembleGroup3
>a96a	b0					.byte $b0
.a96b					Assemble_bne:
.a96b	20 89 84	jsr $8489		jsr	AssembleGroup3
>a96e	d0					.byte $d0
.a96f					Assemble_beq:
.a96f	20 89 84	jsr $8489		jsr	AssembleGroup3
>a972	f0					.byte $f0
.a973					Assemble_bra:
.a973	20 89 84	jsr $8489		jsr	AssembleGroup3
>a976	80					.byte $80
.a977					Assemble_brk:
.a977	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a97a	00					.byte $00
.a97b					Assemble_php:
.a97b	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a97e	08					.byte $08
.a97f					Assemble_clc:
.a97f	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a982	18					.byte $18
.a983					Assemble_plp:
.a983	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a986	28					.byte $28
.a987					Assemble_sec:
.a987	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a98a	38					.byte $38
.a98b					Assemble_rti:
.a98b	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a98e	40					.byte $40
.a98f					Assemble_pha:
.a98f	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a992	48					.byte $48
.a993					Assemble_cli:
.a993	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a996	58					.byte $58
.a997					Assemble_phy:
.a997	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a99a	5a					.byte $5a
.a99b					Assemble_rts:
.a99b	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a99e	60					.byte $60
.a99f					Assemble_pla:
.a99f	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9a2	68					.byte $68
.a9a3					Assemble_sei:
.a9a3	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9a6	78					.byte $78
.a9a7					Assemble_ply:
.a9a7	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9aa	7a					.byte $7a
.a9ab					Assemble_dey:
.a9ab	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ae	88					.byte $88
.a9af					Assemble_txa:
.a9af	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9b2	8a					.byte $8a
.a9b3					Assemble_tya:
.a9b3	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9b6	98					.byte $98
.a9b7					Assemble_txs:
.a9b7	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ba	9a					.byte $9a
.a9bb					Assemble_tay:
.a9bb	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9be	a8					.byte $a8
.a9bf					Assemble_tax:
.a9bf	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9c2	aa					.byte $aa
.a9c3					Assemble_clv:
.a9c3	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9c6	b8					.byte $b8
.a9c7					Assemble_tsx:
.a9c7	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ca	ba					.byte $ba
.a9cb					Assemble_iny:
.a9cb	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ce	c8					.byte $c8
.a9cf					Assemble_dex:
.a9cf	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9d2	ca					.byte $ca
.a9d3					Assemble_cld:
.a9d3	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9d6	d8					.byte $d8
.a9d7					Assemble_phx:
.a9d7	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9da	da					.byte $da
.a9db					Assemble_stp:
.a9db	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9de	db					.byte $db
.a9df					Assemble_inx:
.a9df	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9e2	e8					.byte $e8
.a9e3					Assemble_nop:
.a9e3	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9e6	ea					.byte $ea
.a9e7					Assemble_sed:
.a9e7	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ea	f8					.byte $f8
.a9eb					Assemble_plx:
.a9eb	20 bf 84	jsr $84bf		jsr	AssembleGroup4
>a9ee	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a9ef					DecimalScalarTable:
>a9ef	66 66 66 66				.dword $66666666 ; 0.1
>a9f3	de					.byte $de
>a9f4	1f 85 eb 51				.dword $51eb851f ; 0.01
>a9f8	db					.byte $db
>a9f9	4c 37 89 41				.dword $4189374c ; 0.001
>a9fd	d8					.byte $d8
>a9fe	ac 8b db 68				.dword $68db8bac ; 0.0001
>aa02	d4					.byte $d4
>aa03	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aa07	d1					.byte $d1
>aa08	83 de 1b 43				.dword $431bde83 ; 1e-06
>aa0c	ce					.byte $ce
>aa0d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aa11	ca					.byte $ca
>aa12	89 3b e6 55				.dword $55e63b89 ; 1e-08
>aa16	c7					.byte $c7
>aa17	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aa1b	c4					.byte $c4
>aa1c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aa20	c0					.byte $c0
>aa21	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>aa25	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.aa26					SyntaxError:
.aa26	a9 02		lda #$02		lda	#2
.aa28	4c 07 91	jmp $9107		jmp	ErrorHandler
.aa2b					RangeError:
.aa2b	a9 04		lda #$04		lda	#4
.aa2d	4c 07 91	jmp $9107		jmp	ErrorHandler
.aa30					TypeError:
.aa30	a9 05		lda #$05		lda	#5
.aa32	4c 07 91	jmp $9107		jmp	ErrorHandler
.aa35					ArgumentError:
.aa35	a9 07		lda #$07		lda	#7
.aa37	4c 07 91	jmp $9107		jmp	ErrorHandler
.aa3a					NotDoneError:
.aa3a	a9 0c		lda #$0c		lda	#12
.aa3c	4c 07 91	jmp $9107		jmp	ErrorHandler
.aa3f					ErrorText:
>aa3f	42 72 65 61 6b 00			.text	"Break",0
>aa45	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>aa4d	72 72 6f 72 00
>aa52	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aa5a	20 62 79 20 7a 65 72 6f 00
>aa63	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aa6b	61 6e 67 65 00
>aa70	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aa78	6d 61 74 63 68 00
>aa7e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aa86	65 6d 6f 72 79 00
>aa8c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aa94	61 72 67 75 6d 65 6e 74 00
>aa9d	53 74 6f 70 00				.text	"Stop",0
>aaa2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>aaaa	6f 6f 20 6c 6f 6e 67 00
>aab2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>aaba	6e 20 66 61 69 6c 65 64 00
>aac3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>aacb	61 74 61 00
>aacf	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>aad7	65 6e 74 65 64 00
>aadd	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aae5	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aaf1	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aaf9	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ab06	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ab0e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ab1b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ab23	68 6f 75 74 20 57 68 69 6c 65 00
>ab2e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ab36	68 6f 75 74 20 46 6f 72 00
>ab3f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ab47	61 63 6b 20 66 75 6c 6c 00
>ab50	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ab58	75 63 74 75 72 65 00
>ab5f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ab67	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ab74	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ab7c	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ab8a	41 72 72 61 79 20 73 69			.text	"Array size",0
>ab92	7a 65 00
>ab95	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ab9d	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aba5	42 75 69 6c 74 20 53 61			.text "Built Saturday 08-Oct-2022. Build 761."
>abad	74 75 72 64 61 79 20 30 38 2d 4f 63 74 2d 32 30
>abbd	32 32 2e 20 42 75 69 6c 64 20 37 36 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.abcb					EXTPrintCharacter:
.abcb	48		pha				pha
.abcc	da		phx				phx
.abcd	5a		phy				phy
.abce	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.abd1	7a		ply				ply
.abd2	fa		plx				plx
.abd3	68		pla				pla
.abd4	60		rts				rts
.abd5					EXTInputSingleCharacter:
.abd5	da		phx				phx
.abd6	5a		phy				phy
.abd7					_EISCWait:
.abd7	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.abda	c9 00		cmp #$00			cmp 	#0
.abdc	f0 f9		beq $abd7			beq 	_EISCWait
.abde	7a		ply				ply
.abdf	fa		plx				plx
.abe0	60		rts				rts
.abe1					EXTInputLine:
.abe1	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.abe3					_ILLoop:
.abe3	da		phx				phx 								; read character in
.abe4	20 cf ff	jsr $ffcf			jsr 	$FFCF
.abe7	fa		plx				plx
.abe8	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.abea	f0 12		beq $abfe			beq 	_ILBackspace
.abec	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.abee	f0 15		beq $ac05			beq 	_ILExit
.abf0	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.abf2	90 ef		bcc $abe3			bcc 	_ILLoop
.abf4	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.abf6	f0 eb		beq $abe3			beq 	_ILLoop
.abf8	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.abfb	e8		inx				inx
.abfc	80 e5		bra $abe3			bra 	_ILLoop
.abfe					_ILBackspace:
.abfe	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ac00	f0 e1		beq $abe3			beq 	_ILLoop
.ac02	ca		dex				dex 								; back one.
.ac03	80 de		bra $abe3			bra 	_ILLoop
.ac05					_ILExit:
.ac05	20 cb ab	jsr $abcb			jsr 	EXTPrintCharacter
.ac08	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ac0b	60		rts				rts
.ac0c					EXTBreakCheck:
.ac0c	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ac0f					MemoryDeleteLine:
.ac0f	20 2e ac	jsr $ac2e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac12	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ac14	a8		tay				tay
.ac15					_MDDLLoop:
.ac15	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac17	92 30		sta ($30)			sta 	(codePtr)
.ac19	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac1b	c5 3a		cmp $3a				cmp 	zTemp2
.ac1d	d0 07		bne $ac26			bne 	_MDLDLNext
.ac1f	a5 31		lda $31				lda 	codePtr+1
.ac21	c5 3b		cmp $3b				cmp 	zTemp2+1
.ac23	d0 01		bne $ac26			bne 	_MDLDLNext
.ac25					_MDDLExit:
.ac25	60		rts				rts
.ac26					_MDLDLNext:
.ac26	e6 30		inc $30				inc 	codePtr						; next byte
.ac28	d0 eb		bne $ac15			bne 	_MDDLLoop
.ac2a	e6 31		inc $31				inc 	codePtr+1
.ac2c	80 e7		bra $ac15			bra 	_MDDLLoop
.ac2e					IMemoryFindEnd:
.ac2e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac30	85 3a		sta $3a				sta 	0+zTemp2
.ac32	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac34	85 3b		sta $3b				sta 	1+zTemp2
.ac36					_MDLFELoop:
.ac36	b2 3a		lda ($3a)			lda 	(zTemp2)
.ac38	f0 0b		beq $ac45			beq 	_MDLFEExit
.ac3a	18		clc				clc
.ac3b	65 3a		adc $3a				adc 	zTemp2
.ac3d	85 3a		sta $3a				sta 	zTemp2
.ac3f	90 f5		bcc $ac36			bcc 	_MDLFELoop
.ac41	e6 3b		inc $3b				inc 	zTemp2+1
.ac43	80 f1		bra $ac36			bra 	_MDLFELoop
.ac45					_MDLFEExit:
.ac45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.ac46					MemoryInsertLine:
.ac46	08		php				php
.ac47	20 2e ac	jsr $ac2e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac4a	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ac4c	1a		inc a				inc 	a
.ac4d	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ac4f	b0 36		bcs $ac87			bcs 	_MDLIError
.ac51	28		plp				plp
.ac52	90 08		bcc $ac5c			bcc 	_MDLIFound
.ac54	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.ac56	85 30		sta $30				sta 	codePtr
.ac58	a5 3b		lda $3b				lda 	zTemp2+1
.ac5a	85 31		sta $31				sta 	codePtr+1
.ac5c					_MDLIFound:
.ac5c	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ac5f	a8		tay				tay
.ac60					_MDLIInsert:
.ac60	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.ac62	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ac64	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.ac66	c5 3a		cmp $3a				cmp 	zTemp2
.ac68	d0 06		bne $ac70			bne 	_MDLINext
.ac6a	a5 31		lda $31				lda 	codePtr+1
.ac6c	c5 3b		cmp $3b				cmp 	zTemp2+1
.ac6e	f0 0a		beq $ac7a			beq 	_MDLIHaveSpace
.ac70					_MDLINext:
.ac70	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ac72	d0 02		bne $ac76			bne 	_MDLINoBorrow
.ac74	c6 3b		dec $3b				dec 	zTemp2+1
.ac76					_MDLINoBorrow:
.ac76	c6 3a		dec $3a				dec 	zTemp2
.ac78	80 e6		bra $ac60			bra 	_MDLIInsert
.ac7a					_MDLIHaveSpace:
.ac7a	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ac7d	88		dey				dey 								; from offset-1 to 0
.ac7e					_MDLICopy:
.ac7e	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.ac81	91 30		sta ($30),y			sta 	(codePtr),y
.ac83	88		dey				dey
.ac84	10 f8		bpl $ac7e			bpl 	_MDLICopy
.ac86	60		rts				rts
.ac87					_MDLIError:
.ac87	a9 06		lda #$06		lda	#6
.ac89	4c 07 91	jmp $9107		jmp	ErrorHandler
.ac8c					MDLAppendLine:
.ac8c	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ac8e	85 36		sta $36				sta 	zTemp0
.ac90	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac92	85 38		sta $38				sta 	0+zTemp1
.ac94	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac96	85 39		sta $39				sta 	1+zTemp1
.ac98	b2 38		lda ($38)			lda 	(zTemp1)
.ac9a	d0 0a		bne $aca6			bne 	_MDLANoInitialise
.ac9c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac9e	8d 48 06	sta $0648			sta 	0+AppendPointer
.aca1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aca3	8d 49 06	sta $0649			sta 	1+AppendPointer
.aca6					_MDLANoInitialise:
.aca6	18		clc				clc
.aca7	ad 48 06	lda $0648			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.acaa	85 38		sta $38				sta 	zTemp1
.acac	72 36		adc ($36)			adc 	(zTemp0)
.acae	8d 48 06	sta $0648			sta 	AppendPointer
.acb1	ad 49 06	lda $0649			lda 	AppendPointer+1
.acb4	85 39		sta $39				sta 	zTemp1+1
.acb6	69 00		adc #$00			adc 	#0
.acb8	8d 49 06	sta $0649			sta 	AppendPointer+1
.acbb	a0 00		ldy #$00			ldy 	#0
.acbd					_MDLACopy:
.acbd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.acbf	91 38		sta ($38),y			sta 	(zTemp1),y
.acc1	c8		iny				iny
.acc2	98		tya				tya
.acc3	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.acc5	d0 f6		bne $acbd			bne 	_MDLACopy
.acc7	a9 00		lda #$00			lda 	#0 							; end of program.
.acc9	91 38		sta ($38),y			sta 	(zTemp1),y
.accb	60		rts				rts
.0648					AppendPointer:
>0648							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9cfc					MemoryNew:
.9cfc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9cfe	85 30		sta $30				sta 	codePtr
.9d00	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d02	85 31		sta $31				sta 	codePtr+1
.9d04	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9d06	92 30		sta ($30)			sta 	(codePtr)
.9d08	60		rts				rts
.9d09					MemoryInline:
.9d09	98		tya				tya 								; put address into stack,x
.9d0a	18		clc				clc
.9d0b	65 30		adc $30				adc 	codePtr
.9d0d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d10	a5 31		lda $31				lda 	codePtr+1
.9d12	69 00		adc #$00			adc 	#0
.9d14	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d17	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d1a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9d1e					MemorySearch:
.9d1e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9d20	86 37		stx $37				stx 	zTemp0+1
.9d22	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d24	85 30		sta $30				sta 	codePtr
.9d26	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d28	85 31		sta $31				sta 	codePtr+1
.9d2a					_MTAXLoop:
.9d2a	b2 30		lda ($30)			lda 	(codePtr)
.9d2c	18		clc				clc
.9d2d	f0 21		beq $9d50			beq 	_MTAXExit 					; reached end, exit with CC.
.9d2f	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9d31	b1 30		lda ($30),y			lda 	(codePtr),y
.9d33	38		sec				sec
.9d34	e5 36		sbc $36				sbc 	zTemp0
.9d36	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9d38	c8		iny				iny 								; do the MSB
.9d39	b1 30		lda ($30),y			lda 	(codePtr),y
.9d3b	e5 37		sbc $37				sbc 	zTemp0+1
.9d3d	05 38		ora $38				ora 	zTemp1
.9d3f	f0 0f		beq $9d50			beq 	_MTAXExit	 				; found
.9d41	b0 0d		bcs $9d50			bcs 	_MTAXExit 					; current < required exit
.9d43	18		clc				clc
.9d44	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9d46	65 30		adc $30				adc 	codePtr
.9d48	85 30		sta $30				sta 	codePtr
.9d4a	90 02		bcc $9d4e			bcc 	_CREExit
.9d4c	e6 31		inc $31				inc 	codePtr+1
.9d4e					_CREExit:
.9d4e	80 da		bra $9d2a			bra 	_MTAXLoop
.9d50					_MTAXExit:
.9d50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9d51					StackPushByte:
.9d51	48		pha				pha 								; save byte
.9d52	a5 34		lda $34				lda 	BasicStack
.9d54	d0 09		bne $9d5f			bne 	_SPBNoBorrow
.9d56	c6 35		dec $35				dec 	BasicStack+1
.9d58	48		pha				pha
.9d59	a5 35		lda $35				lda 	BasicStack+1
.9d5b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9d5d	90 06		bcc $9d65			bcc 	_SPBMemory
.9d5f					_SPBNoBorrow:
.9d5f	c6 34		dec $34				dec 	BasicStack
.9d61	68		pla				pla 								; get back and write
.9d62	92 34		sta ($34)			sta 	(BasicStack)
.9d64	60		rts				rts
.9d65					_SPBMemory:
.9d65	a9 12		lda #$12		lda	#18
.9d67	4c 07 91	jmp $9107		jmp	ErrorHandler
.9d6a					StackPopByte:
.9d6a	b2 34		lda ($34)			lda 	(BasicStack)
.9d6c	e6 34		inc $34				inc 	BasicStack
.9d6e	d0 02		bne $9d72			bne 	_SPBNoCarry
.9d70	e6 35		inc $35				inc 	BasicStack+1
.9d72					_SPBNoCarry:
.9d72	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9d73					StackOpen:
.9d73	48		pha				pha 								; save frame byte
.9d74	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9d76	0a		asl a				asl 	a 							; claim twice this for storage
.9d77	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9d79	38		sec				sec 								; so basically subtracting from
.9d7a	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9d7c	85 34		sta $34				sta 	basicStack
.9d7e	b0 08		bcs $9d88			bcs 	_SONoBorrow
.9d80	c6 35		dec $35				dec 	basicStack+1
.9d82	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9d84	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9d86	90 04		bcc $9d8c			bcc 	_SOMemory
.9d88					_SONoBorrow:
.9d88	68		pla				pla 								; get marker back and write at TOS
.9d89	92 34		sta ($34)			sta 	(basicStack)
.9d8b	60		rts				rts
.9d8c					_SOMemory:
.9d8c	a9 12		lda #$12		lda	#18
.9d8e	4c 07 91	jmp $9107		jmp	ErrorHandler
.9d91					StackClose:
.9d91	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9d93	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9d95	0a		asl a				asl 	a 							; claim twice this.
.9d96	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9d98	85 34		sta $34				sta 	basicStack
.9d9a	90 02		bcc $9d9e			bcc 	_SCExit
.9d9c	e6 35		inc $35				inc 	basicStack+1
.9d9e					_SCExit:
.9d9e	60		rts				rts
.9d9f					StackCheckFrame:
.9d9f	48		pha				pha
.9da0					_StackRemoveLocals:
.9da0	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9da2	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9da4	b0 05		bcs $9dab			bcs 	_SCNoLocal
.9da6	20 e7 a3	jsr $a3e7			jsr 	LocalPopValue
.9da9	80 f5		bra $9da0			bra 	_StackRemoveLocals
.9dab					_SCNoLocal:
.9dab	68		pla				pla
.9dac	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9dae	29 f0		and #$f0			and 	#$F0 						; check type bits
.9db0	d0 01		bne $9db3			bne 	_SCFError 					; different, we have structures mixed up
.9db2	60		rts				rts
.9db3					_SCFError:
.9db3	8a		txa				txa 								; report error X
.9db4	4c 07 91	jmp $9107			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9db7					STKSaveCodePosition:
.9db7	5a		phy				phy
.9db8	98		tya				tya 								; save Y
.9db9	a0 05		ldy #$05			ldy 	#5
.9dbb	91 34		sta ($34),y			sta 	(basicStack),y
.9dbd	88		dey				dey 								; save Code Pointer
.9dbe					_STKSaveLoop:
.9dbe	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9dc1	91 34		sta ($34),y			sta 	(basicStack),y
.9dc3	88		dey				dey
.9dc4	d0 f8		bne $9dbe			bne 	_STKSaveLoop
.9dc6	7a		ply				ply
.9dc7	60		rts				rts
.9dc8					STKLoadCodePosition:
.9dc8	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9dca					_STKLoadLoop:
.9dca	b1 34		lda ($34),y			lda 	(basicStack),y
.9dcc	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9dcf	c8		iny				iny
.9dd0	c0 05		cpy #$05			cpy 	#5
.9dd2	d0 f6		bne $9dca			bne 	_STKLoadLoop
.9dd4	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9dd6	a8		tay				tay
.9dd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9dd8					StackReset:
.9dd8	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9dda	85 34		sta $34				sta 	0+basicStack
.9ddc	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9dde	85 35		sta $35				sta 	1+basicStack
.9de0	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9de2	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.accc					StringConcrete:
.accc	5a		phy				phy 								; save position on stack
.accd	20 ce 99	jsr $99ce			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.acd0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.acd3	85 38		sta $38				sta 	zTemp1
.acd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.acd8	85 39		sta $39				sta 	zTemp1+1
.acda	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.acdc					_SALength:
.acdc	c8		iny				iny
.acdd	b1 38		lda ($38),y			lda 	(zTemp1),y
.acdf	d0 fb		bne $acdc			bne 	_SALength
.ace1	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ace3	b0 3f		bcs $ad24			bcs 	_SALengthError
.ace5	98		tya				tya 				 				; length of the new string
.ace6	18		clc				clc
.ace7	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ace9	90 02		bcc $aced			bcc 	_SAHaveLength
.aceb	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.aced					_SAHaveLength:
.aced	48		pha				pha 								; save length.
.acee	38		sec				sec
.acef	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.acf1	6d 8e 04	adc $048e			adc 	StringMemory
.acf4	8d 8e 04	sta $048e			sta 	StringMemory
.acf7	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.acf9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.acfc	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.acfe	6d 8f 04	adc $048f			adc 	StringMemory+1
.ad01	8d 8f 04	sta $048f			sta 	StringMemory+1
.ad04	85 3b		sta $3b				sta 	zTemp2+1
.ad06	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad09	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ad0a	38		sec				sec
.ad0b	e9 03		sbc #$03			sbc 	#3
.ad0d	92 3a		sta ($3a)			sta 	(zTemp2)
.ad0f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ad11	a0 01		ldy #$01			ldy 	#1
.ad13	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ad15					_SACopyNewString:
.ad15	a0 00		ldy #$00			ldy 	#0
.ad17					_SACopyNSLoop:
.ad17	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ad19	c8		iny				iny 								; write two on in string storage
.ad1a	c8		iny				iny
.ad1b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ad1d	88		dey				dey 								; this makes it one one.
.ad1e	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ad20	d0 f5		bne $ad17			bne 	_SACopyNSLoop
.ad22	7a		ply				ply
.ad23	60		rts				rts
.ad24					_SALengthError:
.ad24	a9 09		lda #$09		lda	#9
.ad26	4c 07 91	jmp $9107		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ad29					StringSystemInitialise:
.ad29	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ad2b	8d 8e 04	sta $048e			sta 	0+StringMemory
.ad2e	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ad30	8d 8f 04	sta $048f			sta 	1+StringMemory
.ad33	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ad36	60		rts				rts
.ad37					StringSpaceInitialise:
.ad37	20 ce 99	jsr $99ce			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ad3a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.ad3c	8d 90 04	sta $0490			sta 	StringInitialised
.ad3f	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.ad42	8d 91 04	sta $0491			sta 	StringTempPointer
.ad45	ad 8f 04	lda $048f			lda 	StringMemory+1
.ad48	3a		dec a				dec 	a
.ad49	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ad4c	60		rts				rts
.ad4d					StringTempAllocate:
.ad4d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.ad4f	b0 35		bcs $ad86			bcs 	_STALength
.ad51	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.ad54	30 05		bmi $ad5b			bmi 	_STAAllocate
.ad56	48		pha				pha 								; save value to subtract.
.ad57	20 37 ad	jsr $ad37			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.ad5a	68		pla				pla 								; restore it
.ad5b					_STAAllocate:
.ad5b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.ad5d	18		clc				clc  								; deliberate allows one more
.ad5e	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.ad61	8d 91 04	sta $0491			sta 	StringTempPointer
.ad64	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.ad67	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.ad69	ad 92 04	lda $0492			lda 	StringTempPointer+1
.ad6c	69 ff		adc #$ff			adc 	#$FF
.ad6e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ad71	85 3d		sta $3d				sta 	zsTemp+1
.ad73	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad76	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.ad79	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.ad7c	a9 10		lda #$10			lda 	#NSTString
.ad7e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad81	a9 00		lda #$00			lda 	#0 							; clear the target string
.ad83	92 3c		sta ($3c)			sta 	(zsTemp)
.ad85	60		rts				rts
.ad86					_STALength:
.ad86	a9 09		lda #$09		lda	#9
.ad88	4c 07 91	jmp $9107		jmp	ErrorHandler
.ad8b					StringTempWrite:
.ad8b	48		pha				pha
.ad8c	92 3c		sta ($3c)			sta 	(zsTemp)
.ad8e	e6 3c		inc $3c				inc 	zsTemp
.ad90	d0 02		bne $ad94			bne 	_STWNoCarry
.ad92	e6 3d		inc $3d				inc 	zsTemp+1
.ad94					_STWNoCarry:
.ad94	a9 00		lda #$00			lda 	#0
.ad96	92 3c		sta ($3c)			sta 	(zsTemp)
.ad98	68		pla				pla
.ad99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9de5					BackloadProgram:
.9de5	a2 ff		ldx #$ff			ldx 	#$FF
.9de7	20 0f 9e	jsr $9e0f			jsr 	BLReadByte
.9dea	30 1f		bmi $9e0b			bmi 	_BPExit
.9dec					_BPCopy:
.9dec	e8		inx				inx  								; copy byte in
.9ded	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9df0	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9df3	20 0f 9e	jsr $9e0f			jsr 	BLReadByte 					; read next byte
.9df6	30 0a		bmi $9e02			bmi 	_BPEndLine 					; -ve = EOL
.9df8	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9dfa	d0 02		bne $9dfe			bne 	_BPNotTab
.9dfc	a9 20		lda #$20			lda 	#' '
.9dfe					_BPNotTab:
.9dfe	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9e00	b0 ea		bcs $9dec			bcs 	_BPCopy
.9e02					_BPEndLine:
.9e02	20 38 a1	jsr $a138			jsr 	TokeniseLine 				; tokenise the line.
.9e05	38		sec				sec 								; append not insert
.9e06	20 46 ac	jsr $ac46			jsr 	MemoryInsertLine 			; append to current program
.9e09	80 da		bra $9de5			bra 	BackloadProgram
.9e0b					_BPExit:
.9e0b	20 37 87	jsr $8737			jsr 	ClearCommand 				; clear variables etc.
.9e0e	60		rts				rts
.9e0f					BLReadByte:
.9e0f					_BLLoad:
.9e0f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9e12	ee 10 9e	inc $9e10			inc 	_BLLoad+1
.9e15	d0 03		bne $9e1a			bne 	_BLNoCarry
.9e17	ee 11 9e	inc $9e11			inc 	_BLLoad+2
.9e1a					_BLNoCarry:
.9e1a	c9 00		cmp #$00			cmp 	#0
.9e1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9e1d					TokeniseSearchTable:
.9e1d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9e1f	85 36		sta $36				sta 	zTemp0
.9e21	a0 00		ldy #$00			ldy 	#0
.9e23	a9 80		lda #$80			lda 	#$80 						; token #
.9e25	85 38		sta $38				sta 	zTemp1
.9e27					_TSTLoop:
.9e27	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9e29	30 49		bmi $9e74			bmi 	_TSTFail 					; -ve = end of table
.9e2b	f0 2e		beq $9e5b			beq 	_TSTNext 					; zero, check next it's a dummy
.9e2d	c8		iny				iny 								; get the hash
.9e2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e30	88		dey				dey
.9e31	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9e34	d0 25		bne $9e5b			bne 	_TSTNext
.9e36	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9e39	38		sec				sec
.9e3a	ed 80 04	sbc $0480			sbc 	identStart
.9e3d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9e3f	d0 1a		bne $9e5b			bne 	_TSTNext
.9e41	5a		phy				phy 								; save Y , we might fail
.9e42	c8		iny				iny 								; point to text
.9e43	c8		iny				iny
.9e44	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9e47					_TSTCompareName:
.9e47	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9e4a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9e4c	d0 0c		bne $9e5a			bne 	_TSTNextPullY 				; fail, pullY and do next
.9e4e	e8		inx				inx
.9e4f	c8		iny				iny
.9e50	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9e53	d0 f2		bne $9e47			bne 	_TSTCompareName
.9e55	7a		ply				ply 								; throw Y
.9e56	a5 38		lda $38				lda 	zTemp1 						; get token #
.9e58	38		sec				sec 								; return with CS = passed.
.9e59	60		rts				rts
.9e5a					_TSTNextPullY:
.9e5a	7a		ply				ply 								; restore current, fall through.
.9e5b					_TSTNext:
.9e5b	e6 38		inc $38				inc 	zTemp1 						; token counter
.9e5d	98		tya				tya
.9e5e	18		clc				clc
.9e5f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9e61	1a		inc a				inc 	a 							; +1
.9e62	1a		inc a				inc 	a 							; +2
.9e63	a8		tay				tay
.9e64	10 c1		bpl $9e27			bpl 	_TSTLoop 					; if Y < $80 loop back
.9e66	98		tya				tya 								; add Y to zTemp0 and reset Y
.9e67	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9e69	18		clc				clc  								; but have tables > 255 bytes
.9e6a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9e6c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9e6e	90 b7		bcc $9e27			bcc 	_TSTLoop
.9e70	e6 37		inc $37				inc 	zTemp0+1
.9e72	80 b3		bra $9e27			bra 	_TSTLoop
.9e74					_TSTFail:
.9e74	18		clc				clc
.9e75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9e76					KeywordSet0:
>9e76	00 65					.text	0,$65,""               ; $80 !0:EOF
>9e78	00 58					.text	0,$58,""               ; $81 !1:SH1
>9e7a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9e7c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9e82	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9e8a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9e90	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9e97	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9e9e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9ea5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9eab	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9eb3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9ebb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9ec1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9ec8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9ece	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9ed6	28
>9ed7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9edf	28
>9ee0	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9ee6	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9eec	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9ef2	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9ef9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9eff	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9f05	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9f0a	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9f0e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9f14	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9f1c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9f23	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9f2a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9f32	43
>9f33	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9f39	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9f3f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9f46	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9f4c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9f52	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9f57	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9f5d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9f62	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9f6a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9f70	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9f77	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9f7d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9f82	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9f89	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9f90	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9f96	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9f9b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9fa3	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9fa7	ff					.text	$FF
.9fa8					KeywordSet1:
>9fa8	00 65					.text	0,$65,""               ; $80 !0:EOF
>9faa	00 58					.text	0,$58,""               ; $81 !1:SH1
>9fac	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9fae	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9fb6	4c 45
>9fb8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9fc0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9fc7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9fcc	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9fd2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9fd7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9fdf	45
>9fe0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9fe5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9feb	ff					.text	$FF
.9fec					KeywordSet2:
>9fec	00 65					.text	0,$65,""               ; $80 !0:EOF
>9fee	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ff0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ff2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9ff7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9ffc	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a001	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a006	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a00b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a010	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a015	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a01a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a01f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a024	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a029	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a02e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a033	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a038	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a03d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a042	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a047	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a04c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a051	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a056	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a05b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a060	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a065	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a06a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a06f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a074	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a079	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a07e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a083	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a088	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a08d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a092	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a097	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a09c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a0a1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a0a6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a0ab	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a0b0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a0b5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a0ba	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a0bf	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a0c4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a0c9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a0ce	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a0d3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a0d8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a0dd	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a0e2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a0e7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a0ec	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a0f1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a0f6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a0fb	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a100	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a105	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a10a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a10f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a114	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a119	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a11e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a123	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a128	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a12d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a132	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a137	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a138					TokeniseLine:
.a138	20 c0 a2	jsr $a2c0			jsr 	FixLineBufferCase 			; fix line case
.a13b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a13d	8d a6 04	sta $04a6			sta 	tokenOffset
.a140	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a143	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a146	a2 ff		ldx #$ff			ldx 	#$FF
.a148					_TKFindFirst:
.a148	e8		inx				inx
.a149	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a14c	f0 79		beq $a1c7			beq 	_TKExit
.a14e	c9 20		cmp #$20			cmp 	#' '
.a150	90 f6		bcc $a148			bcc 	_TKFindFirst
.a152	c9 30		cmp #$30			cmp 	#'0'
.a154	90 07		bcc $a15d			bcc 	_TKNoLineNumber
.a156	c9 3a		cmp #$3a			cmp 	#'9'+1
.a158	b0 03		bcs $a15d			bcs 	_TKNoLineNumber
.a15a	20 ea a2	jsr $a2ea			jsr 	TokeniseExtractLineNumber
.a15d					_TKNoLineNumber:
.a15d					_TKTokeniseLoop:
.a15d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a160	f0 65		beq $a1c7			beq 	_TKExit
.a162	e8		inx				inx
.a163	c9 20		cmp #$20			cmp 	#' '
.a165	f0 f6		beq $a15d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a167	ca		dex				dex 								; undo last get, A contains character, X is position.
.a168	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a16a	f0 61		beq $a1cd			beq 	_TKTokeniseIdentifier
.a16c	c9 41		cmp #$41			cmp 	#'A'
.a16e	90 04		bcc $a174			bcc 	_TKTokenisePunctuation
.a170	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a172	90 59		bcc $a1cd			bcc 	_TKTokeniseIdentifier
.a174					_TKTokenisePunctuation:
.a174	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a176	f0 27		beq $a19f			beq 	_TKString
.a178	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a17a	f0 28		beq $a1a4			beq 	_TKHexConstant
.a17c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a17e	f0 29		beq $a1a9			beq 	_TKCheckDouble
.a180	c9 3e		cmp #$3e			cmp 	#'>'
.a182	f0 25		beq $a1a9			beq 	_TKCheckDouble
.a184					_TKStandardPunctuation:
.a184	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a187	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a189	90 0e		bcc $a199			bcc 	_TKNoShift
.a18b	48		pha				pha 								; save
.a18c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a18e	85 36		sta $36				sta 	zTemp0
.a190	68		pla				pla
.a191	29 20		and #$20			and 	#32 						; bit 5
.a193	4a		lsr a				lsr 	a 							; shift into bit 3
.a194	4a		lsr a				lsr 	a
.a195	05 36		ora $36				ora 	zTemp0
.a197	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a199					_TKNoShift:
.a199	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte 			; write the punctuation character
.a19c	e8		inx				inx 								; consume the character
.a19d	80 be		bra $a15d			bra 	_TKTokeniseLoop 			; and loop round again.
.a19f					_TKString:
.a19f	20 4f a2	jsr $a24f			jsr 	TokeniseString
.a1a2	80 b9		bra $a15d			bra 	_TKTokeniseLoop
.a1a4					_TKHexConstant:
.a1a4	20 8a a2	jsr $a28a			jsr 	TokeniseHexConstant
.a1a7	80 b4		bra $a15d			bra 	_TKTokeniseLoop
.a1a9					_TKCheckDouble:
.a1a9	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a1ac	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a1ae	90 d4		bcc $a184			bcc 	_TKStandardPunctuation
.a1b0	c9 3f		cmp #$3f			cmp 	#'>'+1
.a1b2	b0 d0		bcs $a184			bcs 	_TKStandardPunctuation
.a1b4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a1b7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a1b9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a1ba	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a1bd	38		sec				sec
.a1be	e9 3c		sbc #$3c			sbc 	#'<'
.a1c0	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a1c3	e8		inx				inx 								; consume both
.a1c4	e8		inx				inx
.a1c5	80 96		bra $a15d			bra 	_TKTokeniseLoop
.a1c7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a1c9	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a1cc	60		rts				rts
.a1cd					_TKTokeniseIdentifier:
.a1cd	8e 80 04	stx $0480			stx 	identStart 					; save start
.a1d0	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a1d3					_TKCheckLoop:
.a1d3	e8		inx				inx 								; look at next, we know first is identifier.
.a1d4	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a1d7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a1d9	f0 f8		beq $a1d3			beq 	_TKCheckLoop
.a1db	c9 30		cmp #$30			cmp	 	#"0"
.a1dd	90 0c		bcc $a1eb			bcc 	_TKEndIdentifier
.a1df	c9 3a		cmp #$3a			cmp 	#"9"+1
.a1e1	90 f0		bcc $a1d3			bcc 	_TKCheckLoop
.a1e3	c9 41		cmp #$41			cmp	 	#"A"
.a1e5	90 04		bcc $a1eb			bcc 	_TKEndIdentifier
.a1e7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a1e9	90 e8		bcc $a1d3			bcc 	_TKCheckLoop
.a1eb					_TKEndIdentifier:
.a1eb	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a1ee	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a1f0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a1f2	f0 06		beq $a1fa			beq 	_TKHasTypeCharacter
.a1f4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a1f6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a1f8	d0 07		bne $a201			bne 	_TKNoTypeCharacter
.a1fa					_TKHasTypeCharacter:
.a1fa	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a1fd	e8		inx				inx 								; read next
.a1fe	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a201					_TKNoTypeCharacter:
.a201	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a203	d0 09		bne $a20e			bne 	_TKNoArray
.a205	e8		inx				inx 								; skip the (
.a206	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a209	09 04		ora #$04			ora 	#$04
.a20b	8d 84 04	sta $0484			sta 	identTypeByte
.a20e					_TKNoArray:
.a20e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a211	20 ab a2	jsr $a2ab			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a214	a0 9e		ldy #$9e			ldy 	#(KeywordSet0) >> 8
.a216	a9 76		lda #$76			lda 	#(KeywordSet0) & $FF
.a218	20 1d 9e	jsr $9e1d			jsr 	TokeniseSearchTable
.a21b	a2 00		ldx #$00			ldx 	#0
.a21d	b0 1f		bcs $a23e			bcs 	_TKFoundToken
.a21f	a0 9f		ldy #$9f			ldy 	#(KeywordSet1) >> 8
.a221	a9 a8		lda #$a8			lda 	#(KeywordSet1) & $FF
.a223	20 1d 9e	jsr $9e1d			jsr 	TokeniseSearchTable
.a226	a2 81		ldx #$81			ldx 	#$81
.a228	b0 14		bcs $a23e			bcs 	_TKFoundToken
.a22a	a0 9f		ldy #$9f			ldy 	#(KeywordSet2) >> 8
.a22c	a9 ec		lda #$ec			lda 	#(KeywordSet2) & $FF
.a22e	20 1d 9e	jsr $9e1d			jsr 	TokeniseSearchTable
.a231	a2 82		ldx #$82			ldx 	#$82
.a233	b0 09		bcs $a23e			bcs 	_TKFoundToken
.a235	20 3b a3	jsr $a33b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a238	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a23b	4c 5d a1	jmp $a15d			jmp 	_TKTokeniseLoop 			; and go round again.
.a23e					_TKFoundToken:
.a23e	48		pha				pha 								; save token
.a23f	8a		txa				txa 								; shift in X, is there one ?
.a240	f0 03		beq $a245			beq 	_TKNoTShift
.a242	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte 			; if so, write it out
.a245					_TKNoTShift:
.a245	68		pla				pla 								; restore and write token
.a246	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a249	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a24c	4c 5d a1	jmp $a15d			jmp 	_TKTokeniseLoop 			; and go round again.
.a24f					TokeniseString:
.a24f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a251	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a254	e8		inx				inx									; start of quoted string.
.a255	da		phx				phx 								; push start of string on top
.a256	ca		dex				dex
.a257					_TSFindEnd:
.a257	e8		inx				inx
.a258	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a25b	f0 04		beq $a261			beq 	_TSEndOfString
.a25d	c9 22		cmp #$22			cmp 	#'"'
.a25f	d0 f6		bne $a257			bne 	_TSFindEnd
.a261					_TSEndOfString:
.a261	7a		ply				ply  								; so now Y is first character, X is character after end.
.a262	48		pha				pha 								; save terminating character
.a263	20 6b a2	jsr $a26b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a266	68		pla				pla 								; terminating character
.a267	f0 01		beq $a26a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a269	e8		inx				inx
.a26a					_TSNotQuote:
.a26a	60		rts				rts
.a26b					TOWriteBlockXY:
.a26b	86 36		stx $36				stx 	zTemp0 						; write end character
.a26d	98		tya				tya
.a26e	49 ff		eor #$ff			eor 	#$FF
.a270	38		sec				sec
.a271	65 36		adc $36				adc 	zTemp0
.a273	1a		inc a				inc 	a 							; one extra for NULL
.a274	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a277					_TOBlockLoop:
.a277	c4 36		cpy $36				cpy 	zTemp0
.a279	f0 09		beq $a284			beq 	_TOBlockExit
.a27b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a27e	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a281	c8		iny				iny
.a282	80 f3		bra $a277			bra 	_TOBlockLoop
.a284					_TOBlockExit:
.a284	a9 00		lda #$00			lda 	#0
.a286	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a289	60		rts				rts
.a28a					TokeniseHexConstant:
.a28a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a28c	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a28f	e8		inx				inx									; start of quoted string.
.a290	da		phx				phx 								; push start of constant on top
.a291	ca		dex				dex
.a292					_THFindLoop:
.a292	e8		inx				inx
.a293	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a296	c9 30		cmp #$30			cmp 	#"0"
.a298	90 0c		bcc $a2a6			bcc 	_THFoundEnd
.a29a	c9 3a		cmp #$3a			cmp 	#"9"+1
.a29c	90 f4		bcc $a292			bcc 	_THFindLoop
.a29e	c9 41		cmp #$41			cmp 	#"A"
.a2a0	90 04		bcc $a2a6			bcc 	_THFoundEnd
.a2a2	c9 47		cmp #$47			cmp 	#"F"+1
.a2a4	90 ec		bcc $a292			bcc 	_THFindLoop
.a2a6					_THFoundEnd:
.a2a6	7a		ply				ply 								; restore start
.a2a7	20 6b a2	jsr $a26b			jsr 	TOWriteBlockXY 				; output the block
.a2aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a2ab					TokeniseCalculateHash:
.a2ab	da		phx				phx
.a2ac	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a2af	a9 00		lda #$00			lda 	#0
.a2b1					_TCHLoop:
.a2b1	18		clc				clc
.a2b2	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a2b5	e8		inx				inx
.a2b6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a2b9	d0 f6		bne $a2b1			bne 	_TCHLoop
.a2bb	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a2be	fa		plx				plx
.a2bf	60		rts				rts
.a2c0					FixLineBufferCase:
.a2c0	a2 00		ldx #$00			ldx 	#0
.a2c2					_FLBCLoop:
.a2c2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a2c5	f0 22		beq $a2e9			beq 	_FLBCExit 					; end of string.
.a2c7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a2c9	f0 11		beq $a2dc			beq 	_FLBCInQuotes
.a2cb	e8		inx				inx
.a2cc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a2ce	90 f2		bcc $a2c2			bcc 	_FLBCLoop
.a2d0	c9 7b		cmp #$7b			cmp 	#'z'+1
.a2d2	b0 ee		bcs $a2c2			bcs 	_FLBCLoop
.a2d4	38		sec				sec 								; make U/C
.a2d5	e9 20		sbc #$20			sbc 	#32
.a2d7	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a2da	80 e6		bra $a2c2			bra 	_FLBCLoop
.a2dc					_FLBCInQuotes:
.a2dc	e8		inx				inx 								; advance
.a2dd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a2e0	f0 07		beq $a2e9			beq 	_FLBCExit 					; exit on EOS
.a2e2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a2e4	d0 f6		bne $a2dc			bne 	_FLBCInQuotes
.a2e6	e8		inx				inx 								; skip over it
.a2e7	80 d9		bra $a2c2			bra 	_FLBCLoop
.a2e9					_FLBCExit:
.a2e9	60		rts				rts
.a2ea					TokeniseExtractLineNumber:
.a2ea	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a2ed	48		pha				pha
.a2ee	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a2f1	48		pha				pha
.a2f2	20 28 a3	jsr $a328			jsr 	_TELNTimes2 				; line # x 4
.a2f5	20 28 a3	jsr $a328			jsr 	_TELNTimes2 				; line # x 2
.a2f8	18		clc				clc 								; add stacked value
.a2f9	68		pla				pla
.a2fa	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a2fd	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a300	68		pla				pla
.a301	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a304	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a307	20 28 a3	jsr $a328			jsr 	_TELNTimes2 				; line # x 10
.a30a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a30d	e8		inx				inx
.a30e	29 0f		and #$0f			and 	#15 						; add to line #
.a310	18		clc				clc
.a311	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a314	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a317	90 03		bcc $a31c			bcc 	_TLENNoCarry
.a319	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a31c					_TLENNoCarry:
.a31c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a31f	c9 30		cmp #$30			cmp 	#'0'
.a321	90 04		bcc $a327			bcc 	_TLENExit
.a323	c9 3a		cmp #$3a			cmp 	#'9'+1
.a325	90 c3		bcc $a2ea			bcc 	TokeniseExtractLineNumber
.a327					_TLENExit:
.a327	60		rts				rts
.a328					_TELNTimes2:
.a328	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a32b	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a32e	60		rts				rts
.a32f					TokeniseWriteByte:
.a32f	da		phx				phx
.a330	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a333	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a336	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a339	fa		plx				plx
.a33a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a33b					CheckCreateVariableRecord:
.a33b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a33d	85 36		sta $36				sta 	0+zTemp0
.a33f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a341	85 37		sta $37				sta 	1+zTemp0
.a343					_CCVSearch:
.a343	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a345	f0 2c		beq $a373			beq 	_CCVFail
.a347	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a349	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a34b	cd 83 04	cmp $0483			cmp 	identHash
.a34e	d0 16		bne $a366			bne 	_CCVNext
.a350	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a352	ae 80 04	ldx $0480			ldx 	identStart
.a355					_CCVCompare:
.a355	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a358	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a35a	e8		inx				inx 								; advance pointers
.a35b	c8		iny				iny
.a35c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a35d	d0 07		bne $a366			bne 	_CCVNext  					; didn't match go to next.
.a35f	90 f4		bcc $a355			bcc 	_CCVCompare 				; not finished yet.
.a361	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a364	f0 41		beq $a3a7			beq 	_CCVFound 					; yes, we were successful
.a366					_CCVNext:
.a366	18		clc				clc
.a367	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a369	65 36		adc $36				adc 	zTemp0
.a36b	85 36		sta $36				sta 	zTemp0
.a36d	90 d4		bcc $a343			bcc 	_CCVSearch
.a36f	e6 37		inc $37				inc 	zTemp0+1
.a371	80 d0		bra $a343			bra 	_CCVSearch
.a373					_CCVFail:
.a373	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a375	ad 83 04	lda $0483			lda 	identHash
.a378	91 36		sta ($36),y			sta 	(zTemp0),y
.a37a	c8		iny				iny 								; offset 2 is the type byte
.a37b	ad 84 04	lda $0484			lda 	identTypeByte
.a37e	91 36		sta ($36),y			sta 	(zTemp0),y
.a380	c8		iny				iny
.a381					_CCVData:
.a381	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a383	91 36		sta ($36),y			sta 	(zTemp0),y
.a385	c8		iny				iny
.a386	c0 08		cpy #$08			cpy 	#8
.a388	90 f7		bcc $a381			bcc 	_CCVData
.a38a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a38d					_CCVCopyName:
.a38d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a390	91 36		sta ($36),y			sta 	(zTemp0),y
.a392	e8		inx				inx
.a393	c8		iny				iny
.a394	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a397	d0 f4		bne $a38d			bne 	_CCVCopyName
.a399	98		tya				tya 								; patch offset
.a39a	92 36		sta ($36)			sta 	(zTemp0)
.a39c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a39e	91 36		sta ($36),y			sta 	(zTemp0),y
.a3a0	88		dey				dey
.a3a1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a3a3	09 80		ora #$80			ora 	#$80
.a3a5	91 36		sta ($36),y			sta 	(zTemp0),y
.a3a7					_CCVFound:
.a3a7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a3a9	38		sec				sec
.a3aa	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a3ac	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a3ae	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a3b1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a3b3	20 2f a3	jsr $a32f			jsr 	TokeniseWriteByte
.a3b6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
