
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Nov  1 13:44:24 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 3a b6	jsr $b63a			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.8014	20 a2 93	jsr $93a2			jsr 	NewCommand 					; erase current program
.8017	20 8a a7	jsr $a78a			jsr 	BackloadProgram
.801a	4c 1d 95	jmp $951d			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2482."
>8065	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>8075	32 2e 20 42 75 69 6c 64 20 32 34 38 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSpriteID:
>0646							.fill 	1
.0647					GSCurrentSpriteAddr:
>0647							.fill 	2
.0649					GXSpriteOffsetBase:
>0649							.fill 	2
.064b					GXSpriteLow:
>064b							.fill 	64
.068b					GXSpriteHigh:
>068b							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8086					GXGraphicDraw:
.8086	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use coordinates
.8088	b0 06		bcs $8090			bcs 	_GDCoordinate
.808a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808c	84 37		sty $37				sty 	gxzTemp0+1
.808e	80 4b		bra $80db			bra 	_GDExecuteA 				; and execute
.8090					_GDCoordinate:
.8090	48		pha				pha 								; save AXY
.8091	da		phx				phx
.8092	5a		phy				phy
.8093	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8095					_GDCopy1:
.8095	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8098	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809b	ca		dex				dex
.809c	10 f7		bpl $8095			bpl 	_GDCopy1
.809e	68		pla				pla 								; update Y
.809f	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a2	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a5	68		pla				pla
.80a6	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a9	68		pla				pla 								; get A (command+X.1) back
.80aa	48		pha				pha
.80ab	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ad	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b0	68		pla				pla 								; get command back
.80b1	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b3	48		pha				pha 								; push back.
.80b4	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b6	f0 17		beq $80cf			beq 	_GDCopyToWorkArea
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bb	f0 07		beq $80c4			beq 	_GDCheckY
.80bd	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c0	c9 40		cmp #$40			cmp 	#64
.80c2	b0 08		bcs $80cc			bcs 	_GDError1
.80c4					_GDCheckY:
.80c4	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c7	cd 3e 06	cmp $063e			cmp 	gxHeight
.80ca	90 03		bcc $80cf			bcc 	_GDCopyToWorkArea
.80cc					_GDError1:
.80cc	68		pla				pla
.80cd					_GDError2:
.80cd	38		sec				sec
.80ce	60		rts				rts
.80cf					_GDCopyToWorkArea:
.80cf	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d1					_GDCopy2:
.80d1	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d4	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d7	ca		dex				dex
.80d8	10 f7		bpl $80d1			bpl 	_GDCopy2
.80da	68		pla				pla 								; get command
.80db					_GDExecuteA:
.80db	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dd	b0 ee		bcs $80cd			bcs 	_GDError2
.80df	aa		tax				tax
.80e0	7c e6 80	jmp ($80e6,x)			jmp 	(GRVectorTable,x)
.80e3					GXMove:
.80e3	18		clc				clc
.80e4	60		rts				rts
.80e5					GRUndefined:
>80e5	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e6					GRVectorTable:
>80e6	b5 82					.word	GXInitialise             ; $00 Initialise
>80e8	cf 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ea	17 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ec	67 82					.word	GXClearBitmap            ; $03 Clear
>80ee	a6 84					.word	GXSetColourMode          ; $04 Colour
>80f0	6e 86					.word	GXFontHandler            ; $05 DrawFont
>80f2	b6 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f4	22 87					.word	GXSelect                 ; $07 SPRUSE
>80f6	4b 87					.word	GXSelectImage            ; $08 SPRIMG
>80f8	e5 80					.word	GRUndefined              ; $09
>80fa	e5 80					.word	GRUndefined              ; $0a
>80fc	e5 80					.word	GRUndefined              ; $0b
>80fe	e5 80					.word	GRUndefined              ; $0c
>8100	e5 80					.word	GRUndefined              ; $0d
>8102	e5 80					.word	GRUndefined              ; $0e
>8104	e5 80					.word	GRUndefined              ; $0f
>8106	e3 80					.word	GXMove                   ; $10 Move
>8108	74 83					.word	GXLine                   ; $11 Line
>810a	ef 84					.word	GXFrameRectangle         ; $12 FrameRect
>810c	ec 84					.word	GXFillRectangle          ; $13 FillRect
>810e	1e 81					.word	GXFrameCircle            ; $14 FrameCircle
>8110	1a 81					.word	GXFillCircle             ; $15 FillCircle
>8112	e5 80					.word	GRUndefined              ; $16
>8114	e5 80					.word	GRUndefined              ; $17
>8116	d4 84					.word	GXPlotPoint              ; $18 Plot
>8118	e1 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811a					GXFillCircle:
.811a	a9 ff		lda #$ff			lda 	#255
.811c	80 02		bra $8120			bra 	GXCircle
.811e					GXFrameCircle:
.811e	a9 00		lda #$00			lda 	#0
.8120					GXCircle:
.8120	8d ce 06	sta $06ce			sta 	gxIsFillMode					; save Fill flag
.8123	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8126	f0 26		beq $814e			beq 	_GXCFail
.8128	20 1b 89	jsr $891b			jsr 	GXSortXY 					; topleft/bottomright
.812b	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.812e	20 20 82	jsr $8220			jsr 	GXCircleSetup 				; set up for drawing
.8131	9c cf 06	stz $06cf			stz 	gxYChanged
.8134					_GXCircleDraw:
.8134	ad cc 06	lda $06cc			lda 	gXCentre					; while x <= y
.8137	cd cd 06	cmp $06cd			cmp 	gYCentre
.813a	90 0a		bcc $8146			bcc 	_GXCircleContinue
.813c	d0 03		bne $8141			bne 	_GXNoLast
.813e	20 53 81	jsr $8153			jsr 	GXPlot1
.8141					_GXNoLast:
.8141	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; close the bitmap
.8144	18		clc				clc
.8145	60		rts				rts
.8146					_GXCircleContinue:
.8146	20 50 81	jsr $8150			jsr 	GXPlot2 					; draw it
.8149	20 cd 81	jsr $81cd			jsr 	GXCircleMove 				; adjust the coordinates
.814c	80 e6		bra $8134			bra 	_GXCircleDraw
.814e					_GXCFail:
.814e	38		sec				sec
.814f	60		rts				rts
.8150					GXPlot2:
.8150	20 53 81	jsr $8153			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8153					GXPlot1:
.8153	ad cd 06	lda $06cd			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8156	f0 03		beq $815b			beq 	_GXPlot1Only
.8158	20 77 81	jsr $8177			jsr 	GXPlot0 						; plot and negate
.815b					_GXPlot1Only:
.815b	20 77 81	jsr $8177			jsr 	GXPlot0 						; twice, undoing negation
.815e	ad cc 06	lda $06cc			lda 	gXCentre 						; swap X and Y
.8161	ae cd 06	ldx $06cd			ldx	 	gYCentre
.8164	8d cd 06	sta $06cd			sta 	gYCentre
.8167	8e cc 06	stx $06cc			stx 	gXCentre
.816a	ad cf 06	lda $06cf			lda 	gxYChanged 						; toggle Y Changed flag
.816d	a9 ff		lda #$ff			lda 	#$FF
.816f	8d cf 06	sta $06cf			sta 	gxYChanged
.8172	60		rts				rts
.8173	20 77 81	jsr $8177			jsr 	GXPlot0 						; do once
.8176	60		rts				rts
.8177	ad ce 06	lda $06ce	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817a	f0 05		beq $8181			beq 	_GXPlot0Always
.817c	ad cf 06	lda $06cf			lda 	gxYChanged						; fill mode, only draw if changed.
.817f	f0 2d		beq $81ae			beq 	GXPlot0Exit
.8181					_GXPlot0Always:
.8181	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8183	ad cd 06	lda $06cd			lda 	gYCentre
.8186	20 af 81	jsr $81af			jsr 	GXSubCopy
.8189	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818b	ad cc 06	lda $06cc			lda 	gXCentre
.818e	20 af 81	jsr $81af			jsr 	GXSubCopy
.8191	48		pha				pha 									; save last offset X
.8192	20 63 88	jsr $8863			jsr 	GXPositionCalc 					; calculate position/offset.
.8195	68		pla				pla
.8196	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8197	85 36		sta $36				sta 	gxzTemp0
.8199	64 37		stz $37				stz 	gxzTemp0+1
.819b	26 37		rol $37				rol 	gxzTemp0+1
.819d	ad ce 06	lda $06ce			lda 	gxIsFillMode
.81a0	69 80		adc #$80			adc 	#128
.81a2	20 3f 85	jsr $853f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a5	38		sec				sec 									; GY = -GY
.81a6	a9 00		lda #$00			lda 	#0
.81a8	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ab	8d cd 06	sta $06cd			sta 	gYCentre
.81ae					GXPlot0Exit:
.81ae	60		rts				rts
.81af					GXSubCopy:
.81af	85 36		sta $36				sta 	gxzTemp0
.81b1	64 37		stz $37				stz 	gxzTemp0+1
.81b3	29 80		and #$80			and 	#$80
.81b5	f0 02		beq $81b9			beq 	_GXNoSx
.81b7	c6 37		dec $37				dec 	gxzTemp0+1
.81b9					_GXNoSx:
.81b9	38		sec				sec
.81ba	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bd	e5 36		sbc $36				sbc 	gxzTemp0
.81bf	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c2	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c5	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c7	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81ca	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cc	60		rts				rts
.81cd					GXCircleMove:
.81cd	9c cf 06	stz $06cf			stz 	gxYChanged 					; clear Y changed flag
.81d0	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d2	10 0d		bpl $81e1			bpl 	_GXEMPositive
.81d4	ee cc 06	inc $06cc			inc 	gXCentre 					; X++
.81d7	ad cc 06	lda $06cc			lda 	gXCentre
.81da	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dd	a9 06		lda #$06			lda 	#6  						; and add 6
.81df	80 15		bra $81f6			bra 	_GXEMAddD
.81e1					_GXEMPositive:
.81e1	ee cc 06	inc $06cc			inc 	gXCentre					; X++
.81e4	ce cd 06	dec $06cd			dec 	gyCentre 					; Y--
.81e7	38		sec				sec 								; calculate X-Y
.81e8	ad cc 06	lda $06cc			lda 	gXCentre
.81eb	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ee	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f1	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f3	ce cf 06	dec $06cf			dec 	gxYChanged
.81f6					_GXEMAddD:
.81f6	18		clc				clc
.81f7	65 38		adc $38				adc 	gxzTemp1
.81f9	85 38		sta $38				sta 	gxzTemp1
.81fb	90 02		bcc $81ff			bcc 	_GXEMNoCarry
.81fd	e6 39		inc $39				inc 	gxzTemp1+1
.81ff					_GXEMNoCarry:
.81ff	60		rts				rts
.8200					_GXAdd4TimesToD:
.8200	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8202	29 80		and #$80			and 	#$80
.8204	f0 02		beq $8208			beq 	_GXA4Unsigned
.8206	a9 ff		lda #$ff			lda 	#$FF
.8208					_GXA4Unsigned:
.8208	85 37		sta $37				sta 	gxzTemp0+1
.820a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820c	26 37		rol $37				rol 	gxzTemp0+1
.820e	06 36		asl $36				asl 	gxzTemp0
.8210	26 37		rol $37				rol 	gxzTemp0+1
.8212	18		clc				clc 								; add
.8213	a5 36		lda $36				lda		gxzTemp0
.8215	65 38		adc $38				adc 	gxzTemp1
.8217	85 38		sta $38				sta 	gxzTemp1
.8219	a5 37		lda $37				lda		gxzTemp0+1
.821b	65 39		adc $39				adc 	gxzTemp1+1
.821d	85 39		sta $39				sta 	gxzTemp1+1
.821f	60		rts				rts
.8220					GXCircleSetup:
.8220	38		sec				sec
.8221	ad 38 06	lda $0638			lda 	gxY1
.8224	ed 34 06	sbc $0634			sbc 	gxY0
.8227	4a		lsr a				lsr 	a
.8228	8d cb 06	sta $06cb			sta 	gxRadius
.822b	a2 00		ldx #$00			ldx 	#0
.822d	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8230	a2 02		ldx #$02			ldx 	#2
.8232	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8235	9c cc 06	stz $06cc			stz 	gXCentre
.8238	ad cb 06	lda $06cb			lda 	gxRadius
.823b	8d cd 06	sta $06cd			sta 	gYCentre
.823e	0a		asl a				asl 	a 							; R x 2
.823f	85 36		sta $36				sta 	gxzTemp0
.8241	38		sec				sec
.8242	a9 03		lda #$03			lda 	#3
.8244	e5 36		sbc $36				sbc 	gxzTemp0
.8246	85 38		sta $38				sta 	gxzTemp1
.8248	a9 00		lda #$00			lda 	#0
.824a	e9 00		sbc #$00			sbc 	#0
.824c	85 39		sta $39				sta 	gxzTemp1+1
.824e	60		rts				rts
.824f					_GXCalculateCentre:
.824f	38		sec				sec
.8250	bd 36 06	lda $0636,x			lda 	gxX1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0,x
.8256	9d 36 06	sta $0636,x			sta 	gXX1,x
.8259	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825c	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825f	4a		lsr a				lsr 	a
.8260	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8263	7e 36 06	ror $0636,x			ror 	gXX1,x
.8266	60		rts				rts
.06cb					gxRadius:
>06cb							.fill 	1
.06cc					gXCentre:
>06cc							.fill 	1
.06cd					gYCentre:
>06cd							.fill 	1
.06ce					gxIsFillMode:
>06ce							.fill 	1
.06cf					gxYChanged:
>06cf							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8267					GXClearBitmap:
.8267	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826a	f0 24		beq $8290			beq 	_GXCBFail
.826c	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start access
.826f	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8271	ad 3e 06	lda $063e			lda 	gxHeight
.8274	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8276	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8278					_GXCalcLastPage:
.8278	98		tya				tya 								; add to base page
.8279	18		clc				clc
.827a	6d 3c 06	adc $063c			adc 	gxBasePage
.827d	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827f					_GXClearAll:
.827f	20 92 82	jsr $8292			jsr 	_GXClearBlock 				; clear 8k block
.8282	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8284	a5 0b		lda $0b				lda 	GXEditSlot
.8286	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8289	b0 f4		bcs $827f			bcs 	_GXClearAll
.828b	20 56 88	jsr $8856			jsr 	GXCloseBitmap	 			; stop access
.828e	18		clc				clc
.828f	60		rts				rts
.8290					_GXCBFail:
.8290	38		sec				sec
.8291	60		rts				rts
.8292					_GXClearBlock:
.8292	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8294	85 38		sta $38				sta 	0+gxzTemp1
.8296	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8298	85 39		sta $39				sta 	1+gxzTemp1
.829a					_GXCB0:
.829a	a5 36		lda $36				lda 	gxzTemp0
.829c	a0 00		ldy #$00			ldy 	#0
.829e					_GXCB1:
.829e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a0	c8		iny				iny
.82a1	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a3	c8		iny				iny
.82a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a6	c8		iny				iny
.82a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a9	c8		iny				iny
.82aa	d0 f2		bne $829e			bne 	_GXCB1
.82ac	e6 39		inc $39				inc 	gxzTemp1+1
.82ae	a5 39		lda $39				lda 	gxzTemp1+1
.82b0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b2	d0 e6		bne $829a			bne 	_GXCB0
.82b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b5					GXInitialise:
.82b5	64 01		stz $01				stz 	1
.82b7	a9 01		lda #$01			lda 	#1
.82b9	8d 00 d0	sta $d000			sta 	$D000
.82bc	18		clc				clc
.82bd	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c0	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c3	a2 0f		ldx #$0f			ldx 	#15
.82c5					_GXIClear:
.82c5	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c8	ca		dex				dex
.82c9	10 fa		bpl $82c5			bpl 	_GXIClear
.82cb	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.82ce	60		rts				rts
.82cf					GXControlBitmap:
.82cf	64 01		stz $01				stz 	1
.82d1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d3	29 01		and #$01			and 	#1 							; set bitmap flag
.82d5	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d8	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d9	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82dc	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82de	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82e0	90 02		bcc $82e4			bcc 	_CBNotOn
.82e2	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e4					_CBNotOn:
.82e4	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e7	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e9	29 07		and #$07			and 	#7
.82eb	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ee	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f0	d0 02		bne $82f4			bne 	_CBNotDefault
.82f2	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f4					_CBNotDefault:
.82f4	8d 3c 06	sta $063c			sta 	gxBasePage
.82f7	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fa	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fc	8d 03 d1	sta $d103			sta 	$D103
.82ff	a5 36		lda $36				lda 	gxzTemp0
.8301	8d 02 d1	sta $d102			sta 	$D102
.8304	9c 01 d1	stz $d101			stz 	$D101
.8307	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8309	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830c	29 01		and #$01			and 	#1
.830e	f0 02		beq $8312			beq 	_CBHaveHeight
.8310	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8312					_CBHaveHeight
.8312	8e 3e 06	stx $063e			stx 	gxHeight
.8315	18		clc				clc
.8316	60		rts				rts
.8317					GXControlSprite:
.8317	64 01		stz $01				stz 	1
.8319	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831b	29 01		and #$01			and 	#1 							; set sprites flag
.831d	8d 3a 06	sta $063a			sta 	gxSpritesOn
.8320	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8321	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8324	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8326	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8328	90 02		bcc $832c			bcc 	_CSNotOn
.832a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832c					_CSNotOn:
.832c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8331	d0 02		bne $8335			bne 	_CSNotDefault
.8333	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8335					_CSNotDefault:
.8335	8d 3d 06	sta $063d			sta 	gxSpritePage
.8338	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833b	a5 36		lda $36				lda 	zTemp0
.833d	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase
.8340	a5 37		lda $37				lda 	zTemp0+1
.8342	8d 4a 06	sta $064a			sta 	GXSpriteOffsetBase+1
.8345	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8347					_CSClear:
.8347	9e 00 d9	stz $d900,x			stz 	$D900,x
.834a	9e 00 da	stz $da00,x			stz 	$DA00,x
.834d	ca		dex				dex
.834e	d0 f7		bne $8347			bne 	_CSClear
.8350	9c 48 06	stz $0648			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8353	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.8356	18		clc				clc
.8357	60		rts				rts
.8358					GXCalculateBaseAddress:
.8358	85 36		sta $36				sta 	gxzTemp0
.835a	64 37		stz $37				stz 	gxzTemp0+1
.835c	a9 05		lda #$05			lda 	#5
.835e					_GXShift:
.835e	06 36		asl $36				asl 	gxzTemp0
.8360	26 37		rol $37				rol 	gxzTemp0+1
.8362	3a		dec a				dec		a
.8363	d0 f9		bne $835e			bne 	_GXShift
.8365	60		rts				rts
.8366					GXClearSpriteStore:
.8366	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8368					_GXCSSLoop:
.8368	9e 8b 06	stz $068b,x			stz 	GXSpriteHigh,x
.836b	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836d	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8370	ca		dex				dex
.8371	10 f5		bpl $8368			bpl 	_GXCSSLoop
.8373	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8374					GXLine:
.8374	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8377	f0 28		beq $83a1			beq 	_GXLFail
.8379	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.837c	20 39 89	jsr $8939			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837f	20 47 84	jsr $8447			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8382	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8385					_GXDrawLoop:
.8385	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8388	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.838a	2d 42 06	and $0642			and 	gxANDValue
.838d	4d 41 06	eor $0641			eor 	gxEORValue
.8390	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8392	20 a3 83	jsr $83a3			jsr 	GXLineIsComplete 			; is the line complete ?
.8395	f0 05		beq $839c			beq 	_GXLExit
.8397	20 be 83	jsr $83be			jsr 	GXLineAdvance 				; code as per advance method
.839a	80 e9		bra $8385			bra 	_GXDrawLoop
.839c					_GXLExit:
.839c	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.839f	18		clc				clc
.83a0	60		rts				rts
.83a1					_GXLFail:
.83a1	38		sec				sec
.83a2	60		rts				rts
.83a3					GXLineIsComplete:
.83a3	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger 			; is dy larger
.83a6	d0 0f		bne $83b7			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a8	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ab	4d 36 06	eor $0636			eor 	GXX1
.83ae	d0 06		bne $83b6			bne 	_GXLICExit
.83b0	ad 33 06	lda $0633			lda 	GXX0+1
.83b3	4d 37 06	eor $0637			eor 	GXX1+1
.83b6					_GXLICExit:
.83b6	60		rts				rts
.83b7					_GXLICCompareY:
.83b7	ad 38 06	lda $0638			lda 	GXY1
.83ba	4d 34 06	eor $0634			eor 	GXY0
.83bd	60		rts				rts
.83be					GXLineAdvance:
.83be	18		clc				clc 								; add adjust to position
.83bf	ad d4 06	lda $06d4			lda 	GXPosition
.83c2	6d d5 06	adc $06d5			adc 	GXAdjust
.83c5	8d d4 06	sta $06d4			sta 	GXPosition
.83c8	9c d7 06	stz $06d7			stz 	GXAddSelect 				; clear add select flag
.83cb	b0 05		bcs $83d2			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cd	cd d6 06	cmp $06d6			cmp 	GXTotal 					; if exceeded total
.83d0	90 0a		bcc $83dc			bcc 	_GXLANoExtra
.83d2					_GXLAOverflow:
.83d2	ce d7 06	dec $06d7			dec 	GXAddSelect 				; set addselect to $FF
.83d5	38		sec				sec 								; subtract total and write back
.83d6	ed d6 06	sbc $06d6			sbc 	GXTotal
.83d9	8d d4 06	sta $06d4			sta 	GXPosition
.83dc					_GXLANoExtra:
.83dc	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger
.83df	f0 0d		beq $83ee			beq 	_GXDXLarger
.83e1	20 40 84	jsr $8440			jsr 	GXIncrementY
.83e4	ad d7 06	lda $06d7			lda 	GXAddSelect
.83e7	f0 10		beq $83f9			beq 	_GXLAExit
.83e9	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83ec	80 0b		bra $83f9			bra 	_GXLAExit
.83ee					_GXDXLarger:
.83ee	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83f1	ad d7 06	lda $06d7			lda 	GXAddSelect
.83f4	f0 03		beq $83f9			beq 	_GXLAExit
.83f6	20 40 84	jsr $8440			jsr 	GXIncrementY
.83f9					_GXLAExit:
.83f9	60		rts				rts
.83fa					GXAdjustX:
.83fa	ad d3 06	lda $06d3			lda 	GXDXNegative
.83fd	10 25		bpl $8424			bpl 	_GXAXRight
.83ff	ad 32 06	lda $0632			lda 	GXX0
.8402	d0 03		bne $8407			bne 	_GXAXNoBorrow
.8404	ce 33 06	dec $0633			dec 	GXX0+1
.8407					_GXAXNoBorrow:
.8407	ce 32 06	dec $0632			dec 	GXX0
.840a	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840d	ad 45 06	lda $0645			lda 	gsOffset
.8410	c9 ff		cmp #$ff			cmp 	#$FF
.8412	d0 0f		bne $8423			bne 	_GXAYExit 					; underflow
.8414	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8416	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8418	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.841a	b0 07		bcs $8423			bcs 	_GXAYExit
.841c	18		clc				clc
.841d	69 20		adc #$20			adc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8423					_GXAYExit:
.8423	60		rts				rts
.8424					_GXAXRight:
.8424	ee 32 06	inc $0632			inc 	GXX0
.8427	d0 03		bne $842c			bne 	_GXAXNoCarry
.8429	ee 33 06	inc $0633			inc 	GXX0+1
.842c					_GXAXNoCarry:
.842c	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.842f	d0 0e		bne $843f			bne 	_GXAXExit 					; if not overflowed, exit.
.8431	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8433	a5 3d		lda $3d				lda 	gxzScreen+1
.8435	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8437	90 06		bcc $843f			bcc 	_GXAXExit
.8439	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843b	85 3d		sta $3d				sta 	gxzScreen+1
.843d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843f					_GXAXExit:
.843f	60		rts				rts
.8440					GXIncrementY:
.8440	ee 34 06	inc $0634			inc 	GXY0
.8443	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown
.8446	60		rts				rts
.8447					GXLineSetup:
.8447	ad 38 06	lda $0638			lda 	GXY1
.844a	38		sec				sec
.844b	ed 34 06	sbc $0634			sbc 	GXY0
.844e	4a		lsr a				lsr 	a
.844f	8d d1 06	sta $06d1			sta 	GXDiffY
.8452	9c d3 06	stz $06d3			stz 	GXDXNegative 				; clear -ve flag
.8455	38		sec				sec
.8456	ad 36 06	lda $0636			lda 	GXX1
.8459	ed 32 06	sbc $0632			sbc 	GXX0
.845c	8d d0 06	sta $06d0			sta 	GXDiffX
.845f	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8462	ed 33 06	sbc $0633			sbc 	GXX0+1
.8465	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8466	6e d0 06	ror $06d0			ror 	GXDiffX
.8469	0a		asl a				asl 	a
.846a	10 0c		bpl $8478			bpl 	_GDXNotNegative
.846c	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846e	38		sec				sec
.846f	ed d0 06	sbc $06d0			sbc 	GXDiffX
.8472	8d d0 06	sta $06d0			sta 	GXDiffX
.8475	ce d3 06	dec $06d3			dec 	GXDXNegative 				; -ve flag = $FF.
.8478					_GDXNotNegative:
.8478	9c d2 06	stz $06d2			stz 	GXIsDiffYLarger 			; clear larger flag
.847b	ad d1 06	lda $06d1			lda 	GXDiffY 					; set adjust and total.
.847e	8d d5 06	sta $06d5			sta 	GXAdjust
.8481	ad d0 06	lda $06d0			lda 	GXDiffX
.8484	8d d6 06	sta $06d6			sta 	GXTotal
.8487	ad d1 06	lda $06d1			lda 	GXDiffY 					; if dy > dx
.848a	cd d0 06	cmp $06d0			cmp 	GXDiffX
.848d	90 0f		bcc $849e			bcc 	_GDXNotLarger
.848f	ce d2 06	dec $06d2			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8492	ad d0 06	lda $06d0			lda 	GXDiffX 					; set adjust and total other way round
.8495	8d d5 06	sta $06d5			sta 	GXAdjust
.8498	ad d1 06	lda $06d1			lda 	GXDiffY
.849b	8d d6 06	sta $06d6			sta 	GXTotal
.849e					_GDXNotLarger:
.849e	ad d6 06	lda $06d6			lda 	GXTotal
.84a1	4a		lsr a				lsr 	a
.84a2	8d d4 06	sta $06d4			sta 	GXPosition
.84a5	60		rts				rts
.06d0					GXDiffX:
>06d0							.fill 	1
.06d1					GXDiffY:
>06d1							.fill 	1
.06d2					GXIsDiffYLarger:
>06d2							.fill 	1
.06d3					GXDXNegative:
>06d3							.fill 	1
.06d4					GXPosition:
>06d4							.fill 	1
.06d5					GXAdjust:
>06d5							.fill 	1
.06d6					GXTotal:
>06d6							.fill 	1
.06d7					GXAddSelect:
>06d7							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a6					GXSetColourMode:
.84a6	a6 36		ldx $36				ldx 	gxzTemp0
.84a8	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ab	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ad	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84b0	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b2	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b5	ae 40 06	ldx $0640			ldx 	gxColour
.84b8	8e 41 06	stx $0641			stx 	gxEORValue
.84bb	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bd	90 03		bcc $84c2			bcc 	_GXSDCNotAndColour
.84bf	8e 42 06	stx $0642			stx 	gxANDValue
.84c2					_GXSDCNotAndColour:
.84c2	d0 03		bne $84c7			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c4	9c 41 06	stz $0641			stz 	gxEORValue
.84c7					_GXSDCNotAnd:
.84c7	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c8	90 08		bcc $84d2			bcc 	_GXSDCNoFlip
.84ca	ad 42 06	lda $0642			lda	 	gxANDValue
.84cd	49 ff		eor #$ff			eor 	#$FF
.84cf	8d 42 06	sta $0642			sta 	gxANDValue
.84d2					_GXSDCNoFlip:
.84d2	18		clc				clc
.84d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d4					GXPlotPoint:
.84d4	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84d7	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84da	ac 45 06	ldy $0645			ldy 	gsOffset
.84dd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84df	2d 42 06	and $0642			and 	gxANDValue
.84e2	4d 41 06	eor $0641			eor 	gxEORValue
.84e5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e7	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ea	18		clc				clc
.84eb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84ec					GXFillRectangle:
.84ec	38		sec				sec
.84ed	80 01		bra $84f0			bra 	GXRectangle
.84ef					GXFrameRectangle:
.84ef	18		clc				clc
.84f0					GXRectangle:
.84f0	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f3	f0 35		beq $852a			beq 	_GXRFail
.84f5	08		php				php 								; save Fill flag (CS)
.84f6	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84f9	20 1b 89	jsr $891b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fc	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ff	38		sec				sec 								; sec = Draw line
.8500	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8503	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8506	cd 38 06	cmp $0638			cmp 	gxY1
.8509	f0 19		beq $8524			beq 	_GXRectangleExit
.850b					_GXRectLoop:
.850b	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown 			; down one.
.850e	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8511	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8514	cd 38 06	cmp $0638			cmp 	gXY1
.8517	f0 07		beq $8520			beq 	_GXLastLine
.8519	28		plp				plp 								; get flag back
.851a	08		php				php
.851b	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851e	80 eb		bra $850b			bra 	_GXRectLoop
.8520					_GXLastLine:
.8520	38		sec				sec
.8521	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0
.8524					_GXRectangleExit:
.8524	68		pla				pla 								; throw fill flag.
.8525	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.8528	18		clc				clc
.8529	60		rts				rts
.852a					_GXRFail:
.852a	38		sec				sec
.852b	60		rts				rts
.852c					GXDrawLineX1X0:
.852c	08		php				php 								; save solid/either-end
.852d	38		sec				sec
.852e	ad 36 06	lda $0636			lda		gXX1
.8531	ed 32 06	sbc $0632			sbc 	gXX0
.8534	85 36		sta $36				sta 	gxzTemp0
.8536	ad 37 06	lda $0637			lda 	gXX1+1
.8539	ed 33 06	sbc $0633			sbc 	gXX0+1
.853c	85 37		sta $37				sta 	gxzTemp0+1
.853e	28		plp				plp
.853f					GXDrawLineTemp0:
.853f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8541	48		pha				pha
.8542	a5 3d		lda $3d				lda 	gxzScreen+1
.8544	48		pha				pha
.8545	ad 45 06	lda $0645			lda 	gsOffset
.8548	48		pha				pha
.8549	a5 0b		lda $0b				lda 	GXEditSlot
.854b	48		pha				pha
.854c	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.854f	90 1e		bcc $856f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8551					_GXDLTLine:
.8551	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8553	2d 42 06	and $0642			and 	gxANDValue
.8556	4d 41 06	eor $0641			eor 	gxEORValue
.8559	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855d	d0 04		bne $8563			bne 	_GXDLTNoBorrow
.855f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8561	30 2e		bmi $8591			bmi 	_GXDLTExit
.8563					_GXDLTNoBorrow:
.8563	c6 36		dec $36				dec 	gxzTemp0
.8565	c8		iny				iny 								; next slot.
.8566	d0 e9		bne $8551			bne 	_GXDLTLine
.8568	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.856a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.856d	80 e2		bra $8551			bra 	_GXDLTLine
.856f					_GXDLTEndPoints:
.856f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8571	2d 42 06	and $0642			and 	gxANDValue
.8574	4d 41 06	eor $0641			eor 	gxEORValue
.8577	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8579	98		tya				tya 								; advance to right side
.857a	18		clc				clc
.857b	65 36		adc $36				adc 	gxzTemp0
.857d	a8		tay				tay
.857e	a5 3d		lda $3d				lda 	gxzScreen+1
.8580	65 37		adc $37				adc 	gxzTemp0+1
.8582	85 3d		sta $3d				sta 	gxzScreen+1
.8584	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap 			; fix up.
.8587	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8589	2d 42 06	and $0642			and 	gxANDValue
.858c	4d 41 06	eor $0641			eor 	gxEORValue
.858f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8591					_GXDLTExit:
.8591	68		pla				pla
.8592	85 0b		sta $0b				sta 	GXEditSlot
.8594	68		pla				pla
.8595	8d 45 06	sta $0645			sta 	gsOffset
.8598	68		pla				pla
.8599	85 3d		sta $3d				sta 	gxzScreen+1
.859b	68		pla				pla
.859c	85 3c		sta $3c				sta 	gxzScreen
.859e	60		rts				rts
.859f					GXDLTCheckWrap:
.859f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a3	90 06		bcc $85ab			bcc 	_GXDLTCWExit
.85a5	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a7	85 3d		sta $3d				sta 	gxzScreen+1
.85a9	e6 0b		inc $0b				inc 	GXEditSlot
.85ab					_GXDLTCWExit:
.85ab	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ac					GXDrawGraphicElement:
.85ac	8d d8 06	sta $06d8			sta 	gxSize 						; save size
.85af	3a		dec a				dec 	a
.85b0	8d d9 06	sta $06d9			sta 	gxMask 						; and mask
.85b3	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b6	f0 67		beq $861f			beq 	_GXSLFail
.85b8	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bb	48		pha				pha
.85bc	8c db 06	sty $06db			sty 	gxAcquireVector+1 			; and acquisition vector
.85bf	8e da 06	stx $06da			stx 	gxAcquireVector
.85c2	20 45 88	jsr $8845			jsr 	gxOpenBitmap 				; open the bitmap.
.85c5	ad dd 06	lda $06dd			lda 	gxUseMode 					; scale bits
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	29 07		and #$07			and		#7
.85cd	1a		inc a				inc 	a
.85ce	8d dc 06	sta $06dc			sta 	gxScale
.85d1	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d3					_GXGELoop:
.85d3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d5	2c dd 06	bit $06dd			bit 	gxUseMode 					; check for flip.
.85d8	10 06		bpl $85e0			bpl		_GXNoVFlip
.85da	ad d9 06	lda $06d9			lda 	gxMask
.85dd	38		sec				sec
.85de	e5 38		sbc $38				sbc 	gxzTemp1
.85e0					_GXNoVFlip:
.85e0	aa		tax				tax 								; get the Xth line.
.85e1	20 21 86	jsr $8621			jsr 	_GXCallAcquire 				; get that data.
.85e4	ad dc 06	lda $06dc			lda 	gxScale 					; do scale identical copies of that line.
.85e7	85 39		sta $39				sta 	gxzTemp1+1
.85e9					_GXGELoop2:
.85e9	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85ec	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ef	b0 10		bcs $8601			bcs 	_GXDGEExit
.85f1	20 24 86	jsr $8624			jsr 	GXRenderOneLine 			; render line
.85f4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f6	d0 f1		bne $85e9			bne 	_GXGELoop2
.85f8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85fa	a5 38		lda $38				lda 	gxzTemp1
.85fc	cd d8 06	cmp $06d8			cmp 	gxSize
.85ff	d0 d2		bne $85d3			bne 	_GXGELoop
.8601					_GXDGEExit:
.8601	68		pla				pla 								; restore Y for next time
.8602	8d 34 06	sta $0634			sta 	gxY0
.8605	ae dc 06	ldx $06dc			ldx 	gxScale 					; get scale (1-8)
.8608					_GXShiftLeft:
.8608	18		clc				clc
.8609	ad d8 06	lda $06d8			lda 	gxSize
.860c	6d 32 06	adc $0632			adc 	gxX0
.860f	8d 32 06	sta $0632			sta 	gxX0
.8612	90 03		bcc $8617			bcc 	_GXSLNoCarry
.8614	ee 33 06	inc $0633			inc 	gxX0+1
.8617					_GXSLNoCarry:
.8617	ca		dex				dex
.8618	d0 ee		bne $8608			bne 	_GXShiftLeft
.861a	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.861d	18		clc				clc
.861e	60		rts				rts
.861f					_GXSLFail:
.861f	38		sec				sec
.8620	60		rts				rts
.8621					_GXCallAcquire:
.8621	6c da 06	jmp ($06da)			jmp 	(gxAcquireVector)
.8624					GXRenderOneLine:
.8624	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8627	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.862a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862c					_GXROLLoop1:
.862c	ad dc 06	lda $06dc			lda 	gxScale 					; set to do 'scale' times
.862f	85 3b		sta $3b				sta 	gxzTemp2+1
.8631					_GXROLLoop2:
.8631	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8633	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8636	50 06		bvc $863e			bvc 	_GXNoHFlip
.8638	ad d9 06	lda $06d9			lda 	gxMask
.863b	38		sec				sec
.863c	e5 3a		sbc $3a				sbc 	gxzTemp2
.863e					_GXNoHFlip:
.863e	aa		tax				tax 								; read from the pixel buffer
.863f	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8642	d0 07		bne $864b			bne 	_GXDraw 					; draw if non zero
.8644	ad dd 06	lda $06dd			lda 	gxUseMode 					; check to see if solid background
.8647	29 04		and #$04			and 	#4
.8649	f0 0a		beq $8655			beq 	_GXZeroPixel
.864b					_GXDraw:
.864b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864d	2d 42 06	and $0642			and 	gxANDValue
.8650	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8653	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8655					_GXZeroPixel:
.8655	c8		iny				iny 								; advance pointer
.8656	d0 05		bne $865d			bne 	_GXNoShift
.8658	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.865a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.865d					_GXNoShift:
.865d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865f	d0 d0		bne $8631			bne 	_GXROLLoop2
.8661	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8663	a5 3a		lda $3a				lda 	gxzTemp2
.8665	cd d8 06	cmp $06d8			cmp 	gxSize
.8668	d0 c2		bne $862c			bne 	_GXROLLoop1
.866a	ee 34 06	inc $0634			inc 	gxY0
.866d	60		rts				rts
.06d8					gxSize:
>06d8							.fill 	1
.06d9					gxMask:
>06d9							.fill 	1
.06da					gxAcquireVector:
>06da							.fill 	2
.06dc					gxScale:
>06dc							.fill 	1
.06dd					gxUseMode:
>06dd							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866e					GXFontHandler:
.866e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8670	4d 3f 06	eor $063f			eor 	gxMode
.8673	8d dd 06	sta $06dd			sta 	gxUseMode
.8676	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8678	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.867a	26 37		rol $37				rol	 	gxzTemp0+1
.867c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867e	26 37		rol $37				rol	 	gxzTemp0+1
.8680	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8682	26 37		rol $37				rol	 	gxzTemp0+1
.8684	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8686	09 c0		ora #$c0			ora 	#$C0
.8688	85 37		sta $37				sta 	gxzTemp0+1
.868a	a9 08		lda #$08			lda 	#8 							; size 8x8
.868c	a2 94		ldx #$94			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8690	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.8693	60		rts				rts
.8694					GXGetGraphicDataFont:
.8694	8a		txa				txa 								; X->Y
.8695	a8		tay				tay
.8696	a6 01		ldx $01				ldx 	1 							; preserve old value
.8698	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.869a	85 01		sta $01				sta 	1
.869c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869e	86 01		stx $01				stx 	1 							; put old value back.
.86a0	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a2					_GXExpand:
.86a2	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a5	0a		asl a				asl 	a 							; shift bit 7 into C
.86a6	90 08		bcc $86b0			bcc 	_GXNoPixel
.86a8	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a9	ad 40 06	lda $0640			lda 	gxColour
.86ac	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86af	68		pla				pla
.86b0					_GXNoPixel:
.86b0	e8		inx				inx 								; do the whole byte.
.86b1	e0 08		cpx #$08			cpx 	#8
.86b3	d0 ed		bne $86a2			bne 	_GXExpand
.86b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b6					GXSpriteHandler:
.86b6	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b8	4d 3f 06	eor $063f			eor 	gxMode
.86bb	8d dd 06	sta $06dd			sta 	gxUseMode
.86be	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86c0	da		phx				phx
.86c1	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; can access sprite information
.86c4	68		pla				pla
.86c5	20 d4 88	jsr $88d4			jsr 	GXFindSprite 				; get the sprite address
.86c8	08		php				php
.86c9	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.86cc	28		plp				plp
.86cd	b0 0a		bcs $86d9			bcs		_GXSHExit 					; exit if find failed.
.86cf	ad de 06	lda $06de			lda 	GXSizePixels 				; return size
.86d2	a2 da		ldx #$da			ldx 	#GXSpriteAcquire & $FF
.86d4	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d6	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.86d9					_GXSHExit:
.86d9	60		rts				rts
.86da					GXSpriteAcquire:
.86da	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dd	85 0b		sta $0b				sta 	GXEditSlot
.86df	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e1	a9 00		lda #$00			lda 	#0
.86e3	ae df 06	ldx $06df			ldx 	GXSizeBits
.86e6					_GXTimesRowNumber:
.86e6	18		clc				clc
.86e7	65 36		adc $36				adc 	zTemp0
.86e9	ca		dex				dex
.86ea	10 fa		bpl $86e6			bpl 	_GXTimesRowNumber
.86ec	64 37		stz $37				stz 	gxzTemp0+1
.86ee	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ef	26 37		rol $37				rol 	gxzTemp0+1
.86f1	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f2	26 37		rol $37				rol 	gxzTemp0+1
.86f4	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f5	26 37		rol $37				rol 	gxzTemp0+1
.86f7	85 36		sta $36				sta 	gxzTemp0
.86f9	18		clc				clc 								; add base address.
.86fa	a5 36		lda $36				lda 	gxzTemp0
.86fc	6d e1 06	adc $06e1			adc 	GXSpriteOffset
.86ff	85 36		sta $36				sta 	gxzTemp0
.8701	a5 37		lda $37				lda 	gxzTemp0+1
.8703	6d e2 06	adc $06e2			adc 	GXSpriteOffset+1
.8706					_GXSAFindPage:
.8706	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8708	90 06		bcc $8710			bcc 	_GXSAFoundPage
.870a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870c	e6 0b		inc $0b				inc 	GXEditSlot
.870e	80 f6		bra $8706			bra 	_GXSAFindPage
.8710					_GXSAFoundPage:
.8710	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8712	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8714	a0 00		ldy #$00			ldy 	#0
.8716					_GXSACopyLoop:
.8716	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8718	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871b	c8		iny				iny
.871c	cc de 06	cpy $06de			cpy 	GXSizePixels
.871f	d0 f5		bne $8716			bne 	_GXSACopyLoop
.8721	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8722					GXSelect:
.8722	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8725	f0 22		beq $8749			beq 	_GXSFail
.8727	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8729	c9 40		cmp #$40			cmp 	#64
.872b	b0 1c		bcs $8749			bcs 	_GXSFail
.872d	8d 46 06	sta $0646			sta 	GSCurrentSpriteID
.8730	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8732	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8734	06 36		asl $36				asl 	gxzTemp0
.8736	06 36		asl $36				asl 	gxzTemp0
.8738	06 36		asl $36				asl 	gxzTemp0
.873a	2a		rol a				rol 	a
.873b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873d	8d 48 06	sta $0648			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.8740	85 37		sta $37				sta 	gxzTemp0+1
.8742	a5 36		lda $36				lda 	gxzTemp0
.8744	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr
.8747	18		clc				clc
.8748	60		rts				rts
.8749					_GXSFail:
.8749	38		sec				sec
.874a	60		rts				rts
.874b					GXSelectImage:
.874b	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874e	f0 74		beq $87c4			beq 	_GXSIFail
.8750	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8753	f0 6f		beq $87c4			beq 	_GXSIFail 					; (checking the MSB)
.8755	64 01		stz $01				stz 	1
.8757	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8759	d0 6b		bne $87c6			bne 	_GXSIHide
.875b	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875d	48		pha				pha
.875e	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.8761	68		pla				pla
.8762	20 d4 88	jsr $88d4			jsr 	GXFindSprite
.8765	b0 5a		bcs $87c1			bcs 	_GXSICloseFail 				; no image
.8767	a0 01		ldy #$01			ldy 	#1
.8769	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.876c	85 36		sta $36				sta 	gxzTemp0
.876e	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.8771	85 37		sta $37				sta 	gxzTemp0+1
.8773	ad e1 06	lda $06e1			lda 	GXSpriteOffset
.8776	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8778	18		clc				clc
.8779	ad e2 06	lda $06e2			lda 	GXSpriteOffset+1
.877c	6d 49 06	adc $0649			adc 	GXSpriteOffsetBase
.877f	c8		iny				iny
.8780	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8782	ad 4a 06	lda $064a			lda 	GXSpriteOffsetBase+1
.8785	69 00		adc #$00			adc 	#0
.8787	c8		iny				iny
.8788	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.878a	ad df 06	lda $06df			lda 	GXSizeBits 					; get raw size
.878d	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878f	2a		rol a				rol 	a 							; x 2
.8790	0a		asl a				asl 	a 							; x 4
.8791	0a		asl a				asl 	a 							; x 8
.8792	0a		asl a				asl 	a 							; x 16
.8793	0d e0 06	ora $06e0			ora 	GXSpriteLUT 				; Or with LUT
.8796	0a		asl a				asl 	a 							; 1 shift
.8797	09 01		ora #$01			ora 	#1 							; enable sprite.
.8799	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879b	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.879e	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a1	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a4	29 3f		and #$3f			and 	#$3F
.87a6	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87a9	ad df 06	lda $06df			lda 	GXSizeBits 					; get bit size
.87ac	6a		ror a				ror 	a 							; shift into bits 6/7
.87ad	6a		ror a				ror 	a
.87ae	6a		ror a				ror 	a
.87af	29 c0		and #$c0			and 	#$C0
.87b1	1d 8b 06	ora $068b,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b4	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87b7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87ba	29 7f		and #$7f			and 	#$7F
.87bc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87bf	18		clc				clc
.87c0	60		rts				rts
.87c1					_GXSICloseFail:
.87c1	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.87c4					_GXSIFail:
.87c4	38		sec				sec
.87c5	60		rts				rts
.87c6					_GXSIHide:
.87c6	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c9	85 36		sta $36				sta 	gxzTemp0
.87cb	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.87ce	85 37		sta $37				sta 	gxzTemp0+1
.87d0	a9 00		lda #$00			lda 	#0
.87d2	92 36		sta ($36)			sta 	(gxzTemp0)
.87d4	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87da	09 80		ora #$80			ora 	#$80
.87dc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87df	18		clc				clc
.87e0	60		rts				rts
.87e1					GXMoveSprite:
.87e1	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e4	f0 5d		beq $8843			beq 	_GXSIFail
.87e6	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e9	f0 58		beq $8843			beq 	_GXSIFail
.87eb	85 37		sta $37				sta 	gxzTemp0+1
.87ed	a0 04		ldy #$04			ldy 	#4
.87ef	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.87f2	85 36		sta $36				sta 	gxzTemp0
.87f4	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87f6	38		sec				sec
.87f7	ed de 06	sbc $06de			sbc 	GXSizePixels
.87fa	4a		lsr a				lsr 	a
.87fb	48		pha				pha
.87fc	18		clc				clc
.87fd	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8800	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8802	c8		iny				iny
.8803	ad 33 06	lda $0633			lda 	gxX0+1
.8806	69 00		adc #$00			adc 	#0
.8808	91 36		sta ($36),y			sta 	(gxzTemp0),y
.880a	c8		iny				iny
.880b	68		pla				pla
.880c	18		clc				clc
.880d	6d 34 06	adc $0634			adc 	gxY0
.8810	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8812	a9 00		lda #$00			lda 	#0
.8814	69 00		adc #$00			adc 	#0
.8816	c8		iny				iny
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.881c	6e 32 06	ror $0632			ror 	gxX0
.881f	4e 32 06	lsr $0632			lsr 	gxX0
.8822	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.8825	4e 34 06	lsr $0634			lsr 	gxY0
.8828	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.882b	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x
.882e	29 80		and #$80			and 	#$80
.8830	0d 32 06	ora $0632			ora 	gxX0
.8833	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8836	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8839	29 c0		and #$c0			and 	#$C0
.883b	0d 34 06	ora $0634			ora 	gxY0
.883e	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.8841	18		clc				clc
.8842	60		rts				rts
.8843					_GXSIFail:
.8843	38		sec				sec
.8844	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8845					GXOpenBitmap:
.8845	78		sei				sei 								; no interrupts here
.8846	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8848	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.884b	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.884d	85 00		sta $00				sta 	0
.884f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8851	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8854	58		cli				cli
.8855	60		rts				rts
.8856					GXCloseBitmap:
.8856	78		sei				sei
.8857	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.885a	85 0b		sta $0b				sta 	GXEditSlot
.885c	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.885f	85 00		sta $00				sta 	0
.8861	58		cli				cli
.8862	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8863					GXPositionCalc:
.8863	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8865	48		pha				pha
.8866	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8869	85 3c		sta $3c				sta 	gxzScreen
.886b	64 3d		stz $3d				stz 	gxzScreen+1
.886d	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.886f	26 3d		rol $3d				rol 	gxzScreen+1
.8871	06 3c		asl $3c				asl 	gxzScreen
.8873	26 3d		rol $3d				rol 	gxzScreen+1
.8875	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8876	65 3c		adc $3c				adc 	gxzScreen
.8878	85 3c		sta $3c				sta 	gxzScreen
.887a	90 02		bcc $887e			bcc 	_GXPCNoCarry
.887c	e6 3d		inc $3d				inc 	gxzScreen+1
.887e					_GXPCNoCarry:
.887e	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8880	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8882	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8884	85 36		sta $36				sta 	gxzTemp0
.8886	64 3d		stz $3d				stz 	gxzScreen+1
.8888	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.888a					_GXPCMultiply32:
.888a	06 3c		asl $3c				asl 	gxzScreen
.888c	26 3d		rol $3d				rol 	gxzScreen+1
.888e	3a		dec a				dec 	a
.888f	d0 f9		bne $888a			bne 	_GXPCMultiply32
.8891	18		clc				clc
.8892	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8895	65 3c		adc $3c				adc 	gxzScreen
.8897	8d 45 06	sta $0645			sta 	gsOffset
.889a	ad 33 06	lda $0633			lda 	GXX0+1
.889d	65 3d		adc $3d				adc 	gxzScreen+1
.889f	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88a1	90 04		bcc $88a7			bcc 	_GXPCNoOverflow
.88a3	29 1f		and #$1f			and 	#$1F 						; fix it up
.88a5	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88a7					_GXPCNoOverflow:
.88a7	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88a9	85 3d		sta $3d				sta 	gxzScreen+1
.88ab	64 3c		stz $3c				stz 	gxzScreen
.88ad	18		clc				clc
.88ae	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88b0	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88b3	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88b5	68		pla				pla
.88b6	85 36		sta $36				sta 	gxzTemp0
.88b8	60		rts				rts
.88b9					GXMovePositionDown:
.88b9	18		clc				clc 								; add 320 to offset/temp+1
.88ba	ad 45 06	lda $0645			lda 	gsOffset
.88bd	69 40		adc #$40			adc 	#64
.88bf	8d 45 06	sta $0645			sta 	gsOffset
.88c2	a5 3d		lda $3d				lda 	gxzScreen+1
.88c4	69 01		adc #$01			adc 	#1
.88c6	85 3d		sta $3d				sta 	gxzScreen+1
.88c8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88ca	90 07		bcc $88d3			bcc 	_GXMPDExit
.88cc	38		sec				sec  								; next page
.88cd	e9 20		sbc #$20			sbc 	#$20
.88cf	85 3d		sta $3d				sta 	gxzScreen+1
.88d1	e6 0b		inc $0b				inc 	GXEditSlot
.88d3					_GXMPDExit:
.88d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.88d4					GXFindSprite:
.88d4	aa		tax				tax
.88d5	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.88d8	85 0b		sta $0b				sta 	GXEditSlot
.88da	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.88dd	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.88e0	f0 33		beq $8915			beq 	_GXFSFail
.88e2	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.88e5	8d e2 06	sta $06e2			sta 	GXSpriteOffset+1
.88e8	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.88eb	48		pha				pha 								; save twice
.88ec	48		pha				pha
.88ed	29 03		and #$03			and 	#3 							; get sprite size
.88ef	8d df 06	sta $06df			sta 	GXSizeBits 					; save raw (0-3)
.88f2	aa		tax				tax
.88f3	bd 17 89	lda $8917,x			lda 	_GXFXSSTTable,x 			; read sprite size
.88f6	8d de 06	sta $06de			sta 	GXSizePixels 					; save (8/16/24/32)
.88f9	68		pla				pla 								; get LUT
.88fa	4a		lsr a				lsr		a
.88fb	4a		lsr a				lsr		a
.88fc	29 03		and #$03			and 	#3
.88fe	8d e0 06	sta $06e0			sta 	GXSpriteLUT
.8901	68		pla				pla 								; address, neeeds to be x 4
.8902	29 f0		and #$f0			and 	#$F0
.8904	8d e1 06	sta $06e1			sta 	GXSpriteOffset
.8907	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.890a	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.890d	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.8910	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.8913	18		clc				clc
.8914	60		rts				rts
.8915					_GXFSFail:
.8915	38		sec				sec
.8916	60		rts				rts
.8917					_GXFXSSTTable:
>8917	08 10 18 20					.byte 	8,16,24,32
.06de					GXSizePixels:
>06de							.fill 	1
.06df					GXSizeBits:
>06df							.fill 	1
.06e0					GXSpriteLUT:
>06e0							.fill 	1
.06e1					GXSpriteOffset:
>06e1							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.891b					GXSortXY:
.891b	20 39 89	jsr $8939			jsr 	GXSortY 					; will be sorted on Y now
.891e	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.8921	cd 36 06	cmp $0636			cmp 	gxX1
.8924	ad 33 06	lda $0633			lda 	gXX0+1
.8927	ed 37 06	sbc $0637			sbc 	gXX1+1
.892a	90 0c		bcc $8938			bcc 	_GXSXYExit 					; X0 < X1 exit
.892c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.892e	a0 04		ldy #$04			ldy 	#4
.8930	20 4d 89	jsr $894d			jsr 	GXSwapXY
.8933	e8		inx				inx
.8934	c8		iny				iny
.8935	20 4d 89	jsr $894d			jsr 	GXSwapXY
.8938					_GXSXYExit:
.8938	60		rts				rts
.8939					GXSortY:
.8939	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.893c	cd 38 06	cmp $0638			cmp 	gxY1
.893f	90 0b		bcc $894c			bcc 	_GXSYSorted
.8941	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8943	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8945					_GXSwap1:
.8945	20 4d 89	jsr $894d			jsr 	GXSwapXY
.8948	88		dey				dey
.8949	ca		dex				dex
.894a	10 f9		bpl $8945			bpl 	_GXSwap1
.894c					_GXSYSorted:
.894c	60		rts				rts
.894d					GXSwapXY:
.894d	bd 32 06	lda $0632,x			lda 	gxX0,x
.8950	48		pha				pha
.8951	b9 32 06	lda $0632,y			lda 	gxX0,y
.8954	9d 32 06	sta $0632,x			sta 	gxX0,x
.8957	68		pla				pla
.8958	99 32 06	sta $0632,y			sta 	gxX0,y
.895b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.895c					AssembleGroup1:
.895c	a9 ff		lda #$ff			lda 	#$FF
.895e	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8961	80 02		bra $8965			bra 	AsmGroup12
.8963					AssembleGroup2:
.8963	a5 00		lda $00				lda 	$00
.8965					AsmGroup12:
.8965	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8968	68		pla				pla 								; pop the return address to access the information following.
.8969	fa		plx				plx
.896a	20 f3 89	jsr $89f3			jsr 	AccessParameters 			; get opcode and save as base
.896d	8d a4 04	sta $04a4			sta 	BaseOpcode
.8970	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8973	d0 08		bne $897d			bne 	_AG12HaveMask
.8975	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8977	20 fb 89	jsr $89fb			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.897a	8d a5 04	sta $04a5			sta 	ModeMask
.897d					_AG12HaveMask:
.897d	20 36 8b	jsr $8b36			jsr 	TypeAndCalculateOperand 	; get zero page type
.8980	da		phx				phx 								; save found address mode
.8981	20 5f 8a	jsr $8a5f			jsr 	AssembleModeX
.8984	fa		plx				plx  								; restore address mode
.8985	b0 0b		bcs $8992			bcs 	_AG12Exit
.8987	20 93 89	jsr $8993			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.898a	20 5f 8a	jsr $8a5f			jsr 	AssembleModeX
.898d	b0 03		bcs $8992			bcs 	_AG12Exit
.898f	4c 95 b4	jmp $b495			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8992					_AG12Exit:
.8992	60		rts				rts
.8993					PromoteToAbsolute:
.8993	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8995	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8997	f0 19		beq $89b2			beq 	_PTADo
.8999	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.899b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.899d	f0 13		beq $89b2			beq 	_PTADo
.899f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89a1	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89a3	f0 0d		beq $89b2			beq 	_PTADo
.89a5	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89a7	e0 d1		cpx #$d1			cpx 	#AM_IND
.89a9	f0 07		beq $89b2			beq 	_PTADo
.89ab	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ad	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89af	f0 01		beq $89b2			beq 	_PTADo
.89b1	60		rts				rts
.89b2					_PTADo:
.89b2	aa		tax				tax
.89b3	60		rts				rts
.89b4					AssembleGroup3:
.89b4	68		pla				pla 								; get parameters, which is just the opcode.
.89b5	fa		plx				plx
.89b6	20 f3 89	jsr $89f3			jsr 	AccessParameters 			; get and output opcode
.89b9	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte
.89bc	20 9a 8b	jsr $8b9a			jsr 	CalculateOperand 			; get a 16 bit operand
.89bf	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.89c2	38		sec				sec
.89c3	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.89c6	48		pha				pha 								; LSB in A
.89c7	ad 10 04	lda $0410			lda 	NSMantissa1
.89ca	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.89cd	aa		tax				tax 								; MSB in X
.89ce	68		pla				pla
.89cf	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.89d0	69 7f		adc #$7f			adc 	#$7F
.89d2	90 01		bcc $89d5			bcc 	_AG3NoCarry
.89d4	e8		inx				inx
.89d5					_AG3NoCarry:
.89d5	38		sec				sec 								; fix back and write out anyways.
.89d6	e9 80		sbc #$80			sbc 	#$80
.89d8	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte
.89db	e0 00		cpx #$00			cpx 	#0 							; was it in range
.89dd	f0 0a		beq $89e9			beq 	_AG3Exit
.89df	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.89e2	29 01		and #$01			and 	#1
.89e4	f0 03		beq $89e9			beq 	_AG3Exit
.89e6	4c 9a b4	jmp $b49a			jmp 	RangeError 					; no, branch is out of range
.89e9					_AG3Exit:
.89e9	60		rts				rts
.89ea					AssembleGroup4:
.89ea	68		pla				pla 								; pop address
.89eb	fa		plx				plx
.89ec	20 f3 89	jsr $89f3			jsr 	AccessParameters 			; access and get first
.89ef	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte 			; output it.
.89f2	60		rts				rts
.89f3					AccessParameters:
.89f3	8d a1 04	sta $04a1			sta 	ParamStart
.89f6	8e a2 04	stx $04a2			stx 	ParamStart+1
.89f9	a9 01		lda #$01			lda 	#1
.89fb					GetParameter:
.89fb	5a		phy				phy
.89fc	a8		tay				tay
.89fd	ad a1 04	lda $04a1			lda 	ParamStart
.8a00	85 36		sta $36				sta 	zTemp0
.8a02	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a05	85 37		sta $37				sta 	zTemp0+1
.8a07	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a09	7a		ply				ply
.8a0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a0b					AssemblerWriteByte:
.8a0b	48		pha			pha
.8a0c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a0f	29 02		and #$02		and 	#2
.8a11	f0 1b		beq $8a2e		beq 	_AWBNoPrint
.8a13	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a16	20 49 8a	jsr $8a49		jsr 	PrintHex
.8a19	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a1c	20 49 8a	jsr $8a49		jsr 	PrintHex
.8a1f	a9 20		lda #$20		lda 	#' '
.8a21	20 4e b6	jsr $b64e		jsr 	EXTPrintCharacter
.8a24	68		pla			pla 									; print byte
.8a25	48		pha			pha
.8a26	20 49 8a	jsr $8a49		jsr 	PrintHex
.8a29	a9 0d		lda #$0d		lda 	#13
.8a2b	20 4e b6	jsr $b64e		jsr 	EXTPrintCharacter
.8a2e					_AWBNoPrint:
.8a2e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a31	85 36		sta $36			sta 	zTemp0
.8a33	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a36	f0 0e		beq $8a46		beq 	_AWBRange
.8a38	85 37		sta $37			sta 	zTemp0+1
.8a3a	68		pla			pla 									; write byte out
.8a3b	92 36		sta ($36)		sta 	(zTemp0)
.8a3d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a40	d0 03		bne $8a45		bne 	_AWBNoCarry
.8a42	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a45					_AWBNoCarry:
.8a45	60		rts			rts
.8a46					_AWBRange:
.8a46	4c 9a b4	jmp $b49a		jmp 	RangeError
.8a49					PrintHex:
.8a49	48		pha				pha
.8a4a	4a		lsr a				lsr 	a
.8a4b	4a		lsr a				lsr 	a
.8a4c	4a		lsr a				lsr 	a
.8a4d	4a		lsr a				lsr 	a
.8a4e	20 52 8a	jsr $8a52			jsr 	_PrintNibble
.8a51	68		pla				pla
.8a52					_PrintNibble:
.8a52	29 0f		and #$0f			and 	#15
.8a54	c9 0a		cmp #$0a			cmp 	#10
.8a56	90 02		bcc $8a5a			bcc 	_NoShift
.8a58	69 06		adc #$06			adc 	#6
.8a5a					_NoShift:
.8a5a	69 30		adc #$30			adc 	#48
.8a5c	4c 4e b6	jmp $b64e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a5f					AssembleModeX:
.8a5f	5a		phy				phy
.8a60	ad a3 04	lda $04a3			lda 	IsGroup1
.8a63	f0 17		beq $8a7c			beq 	_AMXGroup2
.8a65	8a		txa				txa 							; is it in group # 1
.8a66	29 40		and #$40			and 	#AM_ISG1
.8a68	f0 50		beq $8aba			beq 	_AMXFail 				; no, give up.
.8a6a	8a		txa				txa 							; get back.
.8a6b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a6d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a6f	d0 22		bne $8a93			bne 	_AMXHaveInfo
.8a71	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a74	c9 81		cmp #$81			cmp 	#$81
.8a76	f0 42		beq $8aba			beq 	_AMXFail
.8a78	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a7a	80 17		bra $8a93			bra 	_AMXHaveInfo 			; odd design decision there.
.8a7c					_AMXGroup2:
.8a7c	8a		txa				txa 							; is it in group 2 ?
.8a7d	29 20		and #$20			and 	#AM_ISG2
.8a7f	f0 39		beq $8aba			beq 	_AMXFail 				; no, give up.
.8a81	8a		txa				txa 							; get the offset into Y
.8a82	29 1f		and #$1f			and 	#$1F
.8a84	4a		lsr a				lsr 	a 						; make it 0-7.
.8a85	4a		lsr a				lsr  	a
.8a86	a8		tay				tay
.8a87	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a8a					_AMXCheckOkay:
.8a8a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a8b	88		dey				dey
.8a8c	10 fc		bpl $8a8a			bpl 	_AMXCheckOkay
.8a8e	90 2a		bcc $8aba			bcc 	_AMXFail 				; not allowed.
.8a90	8a		txa				txa  							; get mask back
.8a91	29 1f		and #$1f			and 	#$1F
.8a93					_AMXHaveInfo:
.8a93	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a95	10 05		bpl $8a9c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a97	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a9a	d0 1e		bne $8aba			bne 	_AMXFail
.8a9c					_AMXAnySize:
.8a9c	18		clc				clc 							; add offset to the base opcode
.8a9d	6d a4 04	adc $04a4			adc 	BaseOpcode
.8aa0					_AMXOutputCode:
.8aa0	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte 		; write the opcode out.
.8aa3	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8aa5	f0 10		beq $8ab7			beq 	_AMXExit
.8aa7	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aaa	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte
.8aad	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8aaf	30 06		bmi $8ab7			bmi 	_AMXExit
.8ab1	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8ab4	20 0b 8a	jsr $8a0b			jsr 	AssemblerWriteByte
.8ab7					_AMXExit:
.8ab7	7a		ply				ply
.8ab8	38		sec				sec
.8ab9	60		rts				rts
.8aba					_AMXFail:
.8aba	a0 00		ldy #$00			ldy 	#0
.8abc					_AMXCheckOddities:
.8abc	8a		txa				txa
.8abd	d9 e5 8a	cmp $8ae5,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8ac0	d0 16		bne $8ad8			bne 	_AMXCONext
.8ac2	b9 e3 8a	lda $8ae3,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8ac5	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8ac8	d0 0e		bne $8ad8			bne 	_AMXCONext
.8aca	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8acc	10 05		bpl $8ad3			bpl 	_AMXCONotZero
.8ace	ad 10 04	lda $0410			lda 	NSMantissa1
.8ad1	d0 05		bne $8ad8			bne 	_AMXCONext
.8ad3					_AMXCONotZero:
.8ad3	b9 e4 8a	lda $8ae4,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8ad6	80 c8		bra $8aa0			bra 	_AMXOutputCode 			; and assemble it
.8ad8					_AMXCONext:
.8ad8	c8		iny				iny
.8ad9	c8		iny				iny
.8ada	c8		iny				iny
.8adb	b9 e3 8a	lda $8ae3,y			lda 	ExtraOpcode+0,y 		; end of table
.8ade	d0 dc		bne $8abc			bne 	_AMXCheckOddities
.8ae0					_AMXCOFail:
.8ae0	7a		ply				ply
.8ae1	18		clc				clc
.8ae2	60		rts				rts
.8ae3					ExtraOpcode:
>8ae3	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8ae6	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8ae9	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8aec	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8aef	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8af2	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8af5	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8af8	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8afb	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8afe	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b01	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b02					LabelHere:
.8b02	c8		iny				iny 								; skip .
.8b03	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b05	20 0b a1	jsr $a10b			jsr 	EvaluateTerm 				; get a term
.8b08	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b0b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b0d	d0 24		bne $8b33			bne 	_ALType
.8b0f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b12	85 36		sta $36				sta 	zTemp0
.8b14	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b17	85 37		sta $37				sta 	zTemp0+1
.8b19	5a		phy				phy 								; copy address in.
.8b1a	a0 01		ldy #$01			ldy 	#1
.8b1c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b1f	92 36		sta ($36)			sta 	(zTemp0)
.8b21	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b24	91 36		sta ($36),y			sta 	(zTemp0),y
.8b26	c8		iny				iny
.8b27	a9 00		lda #$00			lda 	#0
.8b29	91 36		sta ($36),y			sta 	(zTemp0),y
.8b2b	c8		iny				iny
.8b2c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b2e	c8		iny				iny
.8b2f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b31	7a		ply				ply
.8b32	60		rts				rts
.8b33					_ALType:
.8b33	4c 9f b4	jmp $b49f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b36					TypeAndCalculateOperand:
.8b36	b1 30		lda ($30),y			lda 	(codePtr),y
.8b38	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b3a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b3c	f0 5b		beq $8b99			beq 	_TACOExit
.8b3e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b40	f0 57		beq $8b99			beq 	_TACOExit
.8b42	c8		iny				iny
.8b43	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b45	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b47	f0 51		beq $8b9a			beq 	CalculateOperand
.8b49	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b4b	f0 1f		beq $8b6c			beq 	_TACOIndirect
.8b4d	88		dey				dey 								; undo get of first character
.8b4e	20 9a 8b	jsr $8b9a			jsr 	CalculateOperand 			; get operand
.8b51	b1 30		lda ($30),y			lda 	(codePtr),y
.8b53	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b55	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b57	d0 40		bne $8b99			bne 	_TACOExit
.8b59	c8		iny				iny
.8b5a	20 1e ae	jsr $ae1e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b5d	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b5f	c9 58		cmp #$58			cmp 	#'X'
.8b61	f0 36		beq $8b99			beq 	_TACOExit
.8b63	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8b65	c9 59		cmp #$59			cmp 	#'Y'
.8b67	f0 30		beq $8b99			beq 	_TACOExit
.8b69					_TACOSyntax:
.8b69	4c 95 b4	jmp $b495			jmp 	SyntaxError
.8b6c					_TACOIndirect:
.8b6c	20 9a 8b	jsr $8b9a			jsr 	CalculateOperand 			; get the operand
.8b6f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b71	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b73	f0 17		beq $8b8c			beq 	_TACOIndX
.8b75	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b78	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7a	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b7c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b7e	d0 19		bne $8b99			bne 	_TACOExit
.8b80	c8		iny				iny
.8b81	20 1e ae	jsr $ae1e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b84	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b86	d0 e1		bne $8b69			bne 	_TACOSyntax
.8b88	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b8a	80 0d		bra $8b99			bra 	_TACOExit
.8b8c					_TACOIndX:
.8b8c	c8		iny				iny
.8b8d	20 1e ae	jsr $ae1e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b90	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b92	d0 d5		bne $8b69			bne 	_TACOSyntax
.8b94	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket			; check )
.8b97	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b99					_TACOExit:
.8b99	60		rts				rts
.8b9a					CalculateOperand:
.8b9a	48		pha				pha
.8b9b	da		phx				phx
.8b9c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b9e	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.8ba1	fa		plx				plx
.8ba2	68		pla				pla
.8ba3	60		rts				rts
.ae1e					TACOCheckXY:
.ae1e	b1 30		lda ($30),y			lda 	(codePtr),y
.ae20	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ae22	c9 40		cmp #$40			cmp 	#$40
.ae24	d0 21		bne $ae47			bne 	_TCXYFail
.ae26	b1 30		lda ($30),y			lda 	(codePtr),y
.ae28	18		clc				clc
.ae29	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ae2b	85 37		sta $37				sta 	zTemp0+1
.ae2d	c8		iny				iny
.ae2e	b1 30		lda ($30),y			lda 	(codePtr),y
.ae30	c8		iny				iny
.ae31	85 36		sta $36				sta 	zTemp0
.ae33	5a		phy				phy 								; save position
.ae34	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ae36	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae38	d0 0c		bne $ae46			bne 	_TCXYPopFail
.ae3a	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ae3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae3e	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ae40	f0 08		beq $ae4a			beq 	_TCXYFound
.ae42	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ae44	f0 04		beq $ae4a			beq 	_TCXYFound
.ae46					_TCXYPopFail:
.ae46	7a		ply				ply
.ae47					_TCXYFail:
.ae47	a9 00		lda #$00			lda 	#0
.ae49	60		rts				rts
.ae4a					_TCXYFound:
.ae4a	7a		ply				ply 								; restore position
.ae4b	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ae4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8ba4					EditProgramCode:
.8ba4	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8ba7	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8baa	20 c3 a6	jsr $a6c3			jsr 	MemorySearch
.8bad	90 05		bcc $8bb4			bcc 	_EPCNoDelete 				; reached the end don't delete
.8baf	d0 03		bne $8bb4			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bb1	20 d9 b6	jsr $b6d9			jsr 	MemoryDeleteLine 			; delete the line
.8bb4					_EPCNoDelete:
.8bb4	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8bb7	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bb9	f0 0d		beq $8bc8			beq 	_EPCNoInsert
.8bbb	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bbe	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8bc1	20 c3 a6	jsr $a6c3			jsr 	MemorySearch
.8bc4	18		clc				clc 								; insert at this point.
.8bc5	20 10 b7	jsr $b710			jsr 	MemoryInsertLine 			; insert the line
.8bc8					_EPCNoInsert:
.8bc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8bc9					WarmStart:
.8bc9	a2 ff		ldx #$ff			ldx 	#$FF
.8bcb	9a		txs				txs
.8bcc	20 64 b6	jsr $b664			jsr 	EXTInputLine 				; get line to lineBuffer
.8bcf	20 9f ab	jsr $ab9f			jsr 	TokeniseLine 				; tokenise the line
.8bd2	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8bd5	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8bd8	d0 17		bne $8bf1			bne 	_WSEditCode 				; if so,edit code.
.8bda	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8bdd	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8bdf	85 30		sta $30				sta 	codePtr
.8be1	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8be3	85 31		sta $31				sta 	codePtr+1
.8be5	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8be8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bea	f0 dd		beq $8bc9			beq 	WarmStart
.8bec	20 2f 95	jsr $952f			jsr 	RUNCodePointerLine 			; execute that line.
.8bef	80 d8		bra $8bc9			bra 	WarmStart
.8bf1					_WSEditCode:
.8bf1	20 a4 8b	jsr $8ba4			jsr 	EditProgramCode
.8bf4	20 62 8c	jsr $8c62			jsr 	ClearCommand
.8bf7	80 d0		bra $8bc9			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8bf9					AssembleCommand:
.8bf9	a2 00		ldx #$00			ldx 	#0
.8bfb	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger 		; start address
.8bfe	ad 08 04	lda $0408			lda 	NSMantissa0
.8c01	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c04	ad 10 04	lda $0410			lda 	NSMantissa1
.8c07	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c0a	20 af ae	jsr $aeaf			jsr 	CheckComma
.8c0d	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; options
.8c10	ad 08 04	lda $0408			lda 	NSMantissa0
.8c13	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c16	60		rts				rts
.8c17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c18					AssertCommand:
.8c18	a2 00		ldx #$00			ldx 	#0
.8c1a	20 c7 a5	jsr $a5c7			jsr 	EvaluateInteger 			; the assert test
.8c1d	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; exit if result is non zero.
.8c20	d0 05		bne $8c27			bne 	_ACExit
.8c22	a9 0a		lda #$0a		lda	#10
.8c24	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.8c27					_ACExit:
.8c27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c28					CallCommand:
.8c28	a2 00		ldx #$00			ldx 	#0
.8c2a	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.8c2d					_CCClear
.8c2d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c2e	20 64 a6	jsr $a664			jsr 	NSMSetZero
.8c31	e0 04		cpx #$04			cpx 	#4
.8c33	d0 f8		bne $8c2d			bne 	_CCClear
.8c35	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c37					_CCCParam:
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c3b	d0 09		bne $8c46			bne 	_CCCRun6502
.8c3d	c8		iny				iny 								; skip comma
.8c3e	e8		inx				inx	 								; next level
.8c3f	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c42	e0 03		cpx #$03			cpx 	#3
.8c44	90 f1		bcc $8c37			bcc 	_CCCParam 					; done all 3 ?
.8c46					_CCCRun6502:
.8c46	5a		phy				phy 								; save position
.8c47	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c4a	85 37		sta $37				sta 	zTemp0+1
.8c4c	ad 08 04	lda $0408			lda 	NSMantissa0
.8c4f	85 36		sta $36				sta 	zTemp0
.8c51	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c54	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c57	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c5a	20 5f 8c	jsr $8c5f			jsr 	_CCCZTemp0 					; call zTemp0
.8c5d	7a		ply				ply 								; restore position and exit
.8c5e	60		rts				rts
.8c5f					_CCCZTemp0:
.8c5f	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8c62					ClearCommand:
.8c62	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c64	85 36		sta $36				sta 	0+zTemp0
.8c66	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c68	85 37		sta $37				sta 	1+zTemp0
.8c6a					_ClearZeroLoop:
.8c6a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c6c	f0 24		beq $8c92			beq 	_ClearZeroEnd
.8c6e	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c70	a9 00		lda #$00			lda 	#0
.8c72					_ClearOneVariable:
.8c72	91 36		sta ($36),y			sta 	(zTemp0),y
.8c74	c8		iny				iny
.8c75	c0 08		cpy #$08			cpy 	#8
.8c77	d0 f9		bne $8c72			bne 	_ClearOneVariable
.8c79	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c7b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c7d	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c7f	d0 04		bne $8c85			bne 	_ClearNotProcedure
.8c81	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c83	91 36		sta ($36),y			sta 	(zTemp0),y
.8c85					_ClearNotProcedure:
.8c85	18		clc				clc 								; go to the next variable
.8c86	b2 36		lda ($36)			lda 	(zTemp0)
.8c88	65 36		adc $36				adc 	zTemp0
.8c8a	85 36		sta $36				sta 	zTemp0
.8c8c	90 dc		bcc $8c6a			bcc 	_ClearZeroLoop
.8c8e	e6 37		inc $37				inc 	zTemp0+1
.8c90	80 d8		bra $8c6a			bra 	_ClearZeroLoop
.8c92					_ClearZeroEnd:
.8c92	18		clc				clc
.8c93	a5 36		lda $36				lda 	zTemp0
.8c95	69 01		adc #$01			adc 	#1
.8c97	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c9a	a5 37		lda $37				lda 	zTemp0+1
.8c9c	69 00		adc #$00			adc 	#0
.8c9e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ca1	20 7d a7	jsr $a77d			jsr 	StackReset
.8ca4	20 f3 b7	jsr $b7f3			jsr 	StringSystemInitialise
.8ca7	20 32 99	jsr $9932			jsr 	ProcedureScan
.8caa	20 eb 94	jsr $94eb			jsr 	Command_Restore
.8cad	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cb0	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cb3	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cb6	20 fe a2	jsr $a2fe			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8cba					ClearScreen:
.8cba	5a		phy				phy
.8cbb	20 4b b6	jsr $b64b			jsr 	EXTClearScreen
.8cbe	7a		ply				ply
.8cbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cc0					Command_Data:
.8cc0	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cc2	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cc4	20 84 99	jsr $9984			jsr 	ScanForward
.8cc7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8cc8					DimCommand:
.8cc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cca	29 c0		and #$c0			and 	#$C0
.8ccc	c9 40		cmp #$40			cmp 	#$40
.8cce	d0 7a		bne $8d4a			bne 	_DCSyntax
.8cd0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd2	18		clc				clc
.8cd3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cd5	85 3f		sta $3f				sta 	zaTemp+1
.8cd7	c8		iny				iny
.8cd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cda	c8		iny				iny
.8cdb	85 3e		sta $3e				sta 	zaTemp
.8cdd	5a		phy				phy
.8cde	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8ce0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ce2	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8ce4	c9 18		cmp #$18			cmp 	#NSTProcedure
.8ce6	f0 62		beq $8d4a			beq 	_DCSyntax
.8ce8	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8cea	29 04		and #$04			and 	#NSBIsArray
.8cec	f0 64		beq $8d52			beq 	_DCType
.8cee	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8cf0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cf2	d0 59		bne $8d4d			bne 	_DCRedefine
.8cf4	7a		ply				ply
.8cf5	20 55 8d	jsr $8d55			jsr 	_DCGetSize 				; get array size, check it.
.8cf8	5a		phy				phy
.8cf9	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8cfb	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8cfd	7a		ply				ply 							; is there a second (e.g. ,x)
.8cfe	b1 30		lda ($30),y			lda 	(codePtr),y
.8d00	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d02	d0 0a		bne $8d0e			bne 	_DCOneDimension
.8d04	c8		iny				iny 							; skip comma
.8d05	20 55 8d	jsr $8d55			jsr 	_DCGetSize 				; get 2nd array size
.8d08	5a		phy				phy
.8d09	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d0b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d0d	7a		ply				ply
.8d0e					_DCOneDimension:
.8d0e	5a		phy				phy 							; save position
.8d0f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d11	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d13	aa		tax				tax
.8d14	c8		iny				iny
.8d15	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d17	e8		inx				inx 							; bump them.
.8d18	1a		inc a				inc 	a
.8d19	20 31 b3	jsr $b331			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d1c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d1e	29 e0		and #$e0			and 	#$E0
.8d20	d0 23		bne $8d45			bne 	_DCSize
.8d22	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d24	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d26	20 63 8d	jsr $8d63			jsr 	ScaleByBaseType 		; scale by base type
.8d29	a5 36		lda $36				lda 	zTemp0
.8d2b	a6 37		ldx $37				ldx 	zTemp0+1
.8d2d	20 c0 a2	jsr $a2c0			jsr 	AllocateXABytes 		; allocate memory
.8d30	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d32	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d34	c8		iny				iny
.8d35	8a		txa				txa
.8d36	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d38	7a		ply				ply 							; get position back
.8d39	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 		; check )
.8d3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3e	c8		iny				iny 							; consume in case
.8d3f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d41	f0 85		beq $8cc8			beq 	DimCommand
.8d43	88		dey				dey 							; undo consume
.8d44	60		rts				rts
.8d45					_DCSize:
.8d45	a9 16		lda #$16		lda	#22
.8d47	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.8d4a					_DCSyntax:
.8d4a	4c 95 b4	jmp $b495			jmp 	SyntaxError
.8d4d					_DCRedefine:
.8d4d	a9 15		lda #$15		lda	#21
.8d4f	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.8d52					_DCType:
.8d52	4c 9f b4	jmp $b49f			jmp 	TypeError
.8d55					_DCGetSize:
.8d55	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d57	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 	; get array dimension
.8d5a	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d5c	f0 e7		beq $8d45			beq 	_DCSize
.8d5e	c9 fe		cmp #$fe			cmp 	#254
.8d60	f0 e3		beq $8d45			beq 	_DCSize
.8d62	60		rts				rts
.8d63					ScaleByBaseType:
.8d63	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d65	d0 19		bne $8d80			bne 	_SBBTString
.8d67	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8d69	48		pha				pha
.8d6a	a5 36		lda $36				lda 	zTemp0
.8d6c	48		pha				pha
.8d6d	06 36		asl $36				asl 	zTemp0 					; x 2
.8d6f	26 37		rol $37				rol 	zTemp0+1
.8d71	06 36		asl $36				asl 	zTemp0 					; x 4
.8d73	26 37		rol $37				rol 	zTemp0+1
.8d75	68		pla				pla 							; add stacked value = x 5
.8d76	65 36		adc $36				adc 	zTemp0
.8d78	85 36		sta $36				sta 	zTemp0
.8d7a	68		pla				pla
.8d7b	65 37		adc $37				adc 	zTemp0+1
.8d7d	85 37		sta $37				sta 	zTemp0+1
.8d7f	60		rts				rts
.8d80					_SBBTString:
.8d80	06 36		asl $36				asl 	zTemp0
.8d82	26 37		rol $37				rol 	zTemp0+1
.8d84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d85					EndCommand:
.8d85	4c c9 8b	jmp $8bc9			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d88					UnaryEvent:
.8d88	fa		plx				plx
.8d89	20 71 97	jsr $9771			jsr 	TimerToStackX 				; timer in +0
.8d8c	e8		inx				inx  								; put reference into +1
.8d8d	20 0b a1	jsr $a10b			jsr 	EvaluateTerm
.8d90	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d93	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d95	d0 57		bne $8dee			bne 	_UEType
.8d97	e8		inx				inx 								; put the step in +2
.8d98	20 af ae	jsr $aeaf			jsr 	CheckComma
.8d9b	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.8d9e	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.8da1	ca		dex				dex
.8da2	ca		dex				dex
.8da3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8da6	85 36		sta $36				sta 	zTemp0
.8da8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8dab	85 37		sta $37				sta 	zTemp0+1
.8dad	5a		phy				phy
.8dae	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8db0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db2	30 36		bmi $8dea			bmi 	_UEFalse 					; exit if signed.
.8db4	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8db6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8db9	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8dbb	c8		iny				iny
.8dbc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dbf	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8dc1	c8		iny				iny
.8dc2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dc5	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8dc7	90 21		bcc $8dea			bcc 	_UEFalse 					; no, return FALSE.
.8dc9	18		clc				clc
.8dca	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8dcc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8dcf	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8dd2	91 36		sta ($36),y			sta 	(zTemp0),y
.8dd4	c8		iny				iny
.8dd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dd8	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8ddb	91 36		sta ($36),y			sta 	(zTemp0),y
.8ddd	c8		iny				iny
.8dde	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8de1	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8de4	91 36		sta ($36),y			sta 	(zTemp0),y
.8de6	7a		ply				ply
.8de7	4c 96 9a	jmp $9a96			jmp 	ReturnTrue
.8dea					_UEFalse:
.8dea	7a		ply				ply 								; restore Y
.8deb	4c a2 9a	jmp $9aa2			jmp 	ReturnFalse 				; and return False
.8dee					_UEType:
.8dee	4c 9f b4	jmp $b49f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8df1					ForCommand:
.8df1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8df3	20 18 a7	jsr $a718			jsr 	StackOpen
.8df6	a2 00		ldx #$00			ldx 	#0
.8df8	20 0b a1	jsr $a10b			jsr 	EvaluateTerm
.8dfb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dfe	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e00	d0 49		bne $8e4b			bne		_FCError
.8e02	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e04	20 b7 ae	jsr $aeb7			jsr 	CheckNextA
.8e07	e8		inx				inx
.8e08	20 c7 a5	jsr $a5c7			jsr 	EvaluateInteger 			; <from> in +1
.8e0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0d	c8		iny				iny 								; consume it
.8e0e	48		pha				pha 								; save on stack for later
.8e0f	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e11	f0 04		beq $8e17			beq 	_FCNoSyntax
.8e13	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e15	d0 37		bne $8e4e			bne 	_FCSyntaxError
.8e17					_FCNoSyntax:
.8e17	e8		inx				inx
.8e18	20 c7 a5	jsr $a5c7			jsr 	EvaluateInteger
.8e1b	20 5c a7	jsr $a75c			jsr 	STKSaveCodePosition 		; save loop back position
.8e1e	68		pla				pla 								; restore DOWNTO or TO
.8e1f	5a		phy				phy 								; save Y on the stack
.8e20	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e22	f0 02		beq $8e26			beq 	_FCNotDownTo
.8e24	a9 02		lda #$02			lda 	#2
.8e26					_FCNotDownTo:
.8e26	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e27	a0 10		ldy #$10			ldy 	#16
.8e29	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e2b	a0 06		ldy #$06			ldy 	#6
.8e2d	ad 08 04	lda $0408			lda 	NSMantissa0
.8e30	91 34		sta ($34),y			sta 	(basicStack),y
.8e32	ad 10 04	lda $0410			lda 	NSMantissa1
.8e35	c8		iny				iny
.8e36	91 34		sta ($34),y			sta 	(basicStack),y
.8e38	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e3a	a2 01		ldx #$01			ldx 	#1
.8e3c	20 51 8e	jsr $8e51			jsr 	FCIntegerToStack
.8e3f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e41	a2 02		ldx #$02			ldx 	#2
.8e43	20 51 8e	jsr $8e51			jsr 	FCIntegerToStack
.8e46	20 71 8e	jsr $8e71			jsr 	CopyIndexToReference
.8e49	7a		ply				ply 								; restore position
.8e4a	60		rts				rts
.8e4b					_FCError:
.8e4b	4c 9f b4	jmp $b49f			jmp 	TypeError
.8e4e					_FCSyntaxError:
.8e4e	4c 95 b4	jmp $b495			jmp 	SyntaxError
.8e51					FCIntegerToStack:
.8e51	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e54	10 03		bpl $8e59			bpl	 	_FCNotNegative
.8e56	20 19 a6	jsr $a619			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e59					_FCNotNegative:
.8e59	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e5c	91 34		sta ($34),y			sta 	(basicStack),y
.8e5e	c8		iny				iny
.8e5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e62	91 34		sta ($34),y			sta 	(basicStack),y
.8e64	c8		iny				iny
.8e65	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e68	91 34		sta ($34),y			sta 	(basicStack),y
.8e6a	c8		iny				iny
.8e6b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e6e	91 34		sta ($34),y			sta 	(basicStack),y
.8e70	60		rts				rts
.8e71					CopyIndexToReference:
.8e71	5a		phy				phy
.8e72	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e74	38		sec				sec 								; (because we copy from offset 8)
.8e75	b1 34		lda ($34),y			lda 	(basicStack),y
.8e77	e9 08		sbc #$08			sbc 	#8
.8e79	85 36		sta $36				sta 	zTemp0
.8e7b	c8		iny				iny
.8e7c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e7e	e9 00		sbc #$00			sbc 	#0
.8e80	85 37		sta $37				sta 	zTemp0+1
.8e82	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e84	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e86	b1 34		lda ($34),y			lda 	(basicStack),y
.8e88	0a		asl a				asl 	a 							; into carry
.8e89	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e8b	90 14		bcc $8ea1			bcc 	_CITRNormal
.8e8d	38		sec				sec
.8e8e					_CITRNegative:
.8e8e	a9 00		lda #$00			lda 	#0
.8e90	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e92	91 36		sta ($36),y			sta 	(zTemp0),y
.8e94	c8		iny				iny
.8e95	ca		dex				dex
.8e96	d0 f6		bne $8e8e			bne 	_CITRNegative
.8e98	88		dey				dey 								; look at MSB of mantissa
.8e99	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e9b	09 80		ora #$80			ora 	#$80
.8e9d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e9f	7a		ply				ply
.8ea0	60		rts				rts
.8ea1					_CITRNormal:
.8ea1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8ea3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ea5	c8		iny				iny
.8ea6	ca		dex				dex
.8ea7	d0 f8		bne $8ea1			bne 	_CITRNormal
.8ea9	7a		ply				ply 								; and exit.
.8eaa	60		rts				rts
.8eab					NextCommand:
.8eab	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ead	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8eaf	20 44 a7	jsr $a744			jsr 	StackCheckFrame
.8eb2	5a		phy				phy
.8eb3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8eb5	b1 34		lda ($34),y			lda 	(basicStack),y
.8eb7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8eb9	30 02		bmi $8ebd			bmi 	_NCStepNeg
.8ebb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8ebd					_NCStepNeg:
.8ebd	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8ebf	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8ec1	18		clc				clc
.8ec2					_NCBump:
.8ec2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8ec4	91 34		sta ($34),y			sta 	(basicStack),y
.8ec6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8ec8	c8		iny				iny 								; next byte
.8ec9	ca		dex				dex 								; do four times
.8eca	d0 f6		bne $8ec2			bne 	_NCBump
.8ecc	20 71 8e	jsr $8e71			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ecf	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ed1	b1 34		lda ($34),y			lda 	(basicStack),y
.8ed3	0a		asl a				asl 	a 							; sign bit to carry
.8ed4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ed6	85 38		sta $38				sta 	zTemp1
.8ed8	90 02		bcc $8edc			bcc 	_NCCompRev 					; use if step is +ve
.8eda	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8edc					_NCCompRev:
.8edc	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8ede	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8ee0	85 39		sta $39				sta 	zTemp1+1
.8ee2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ee4	38		sec				sec
.8ee5					_NCCompare:
.8ee5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ee7	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee9	a4 39		ldy $39				ldy 	zTemp1+1
.8eeb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8eed	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8eef	e6 39		inc $39				inc 	zTemp1+1
.8ef1	ca		dex				dex 								; do it 4 times.
.8ef2	d0 f1		bne $8ee5			bne 	_NCCompare
.8ef4	50 02		bvc $8ef8			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ef6	49 80		eor #$80			eor 	#$80
.8ef8					_NCNoOverflow:
.8ef8	7a		ply				ply 								; restore Y position
.8ef9	0a		asl a				asl 	a 							; is bit 7 set.
.8efa	90 04		bcc $8f00			bcc 	_NCLoopback 				; if no , >= so loop back
.8efc	20 36 a7	jsr $a736			jsr 	StackClose 					; exit the loop
.8eff	60		rts				rts
.8f00					_NCLoopBack:
.8f00	20 6d a7	jsr $a76d			jsr 	STKLoadCodePosition 		; loop back
.8f03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f04					RectangleCommand:
.8f04	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8f06	80 02		bra $8f0a			bra 	ShapeDrawCmd
.8f08					CircleCommand:
.8f08	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8f0a					ShapeDrawCmd:
.8f0a	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f0d					ShapeDraw:
.8f0d	0d e4 06	ora $06e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f10	4c 8c 8f	jmp $8f8c			jmp 	ExecuteGraphicCommand	 	; and complete
.8f13					SpriteCommand:
.8f13	a2 00		ldx #$00			ldx 	#0
.8f15	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get image number.
.8f18	5a		phy				phy
.8f19	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8f1b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f1e	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f20	b0 0d		bcs $8f2f			bcs 	_SCRange
.8f22	a0 ff		ldy #$ff			ldy 	#255
.8f24	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f27	a9 32		lda #$32			lda 	#25*2
.8f29	7a		ply				ply
.8f2a	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f2d	80 5d		bra $8f8c			bra 	ExecuteGraphicCommand
.8f2f					_SCRange:
.8f2f	4c 9a b4	jmp $b49a			jmp 	RangeError
.8f32					ImageCommand:
.8f32	a2 00		ldx #$00			ldx 	#0
.8f34	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get image number.
.8f37	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f3a					ImageRunDraw:
.8f3a	09 20		ora #$20			ora 	#16*2 						; move cursor
.8f3c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f3f	ad ea 06	lda $06ea			lda 	gxDrawScale
.8f42	0a		asl a				asl 	a
.8f43	0a		asl a				asl 	a
.8f44	0a		asl a				asl 	a
.8f45	a8		tay				tay
.8f46	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8f48	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f4b	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f4e	60		rts				rts
.8f4f					TextCommand:
.8f4f	a2 00		ldx #$00			ldx 	#0
.8f51	20 af a5	jsr $a5af			jsr 	EvaluateString 				; get text
.8f54	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f57					TextRunDraw:
.8f57	09 20		ora #$20			ora 	#16*2 						; move cursor
.8f59	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f5c	a0 00		ldy #$00			ldy 	#0
.8f5e					_IRDLoop:
.8f5e	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8f61	85 37		sta $37				sta 	zTemp0+1
.8f63	ad 08 04	lda $0408			lda 	NSMantissa0
.8f66	85 36		sta $36				sta 	zTemp0
.8f68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f6a	f0 13		beq $8f7f			beq 	_IRDExit
.8f6c	5a		phy				phy									; save string pos
.8f6d	48		pha				pha 								; save char
.8f6e	ad ea 06	lda $06ea			lda 	gxDrawScale 				; get scale
.8f71	0a		asl a				asl 	a
.8f72	0a		asl a				asl 	a
.8f73	0a		asl a				asl 	a
.8f74	a8		tay				tay
.8f75	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f77	fa		plx				plx 								; char to draw
.8f78	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f7b	7a		ply				ply 								; restore string pos
.8f7c	c8		iny				iny
.8f7d	90 df		bcc $8f5e			bcc 	_IRDLoop 					; go back if no error.
.8f7f					_IRDExit:
.8f7f	60		rts				rts
.8f80					PlotCommand:
.8f80	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f82	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f85	80 05		bra $8f8c			bra 	ExecuteGraphicCommand
.8f87					LineCommand:
.8f87	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f89	20 98 8f	jsr $8f98			jsr 	RunGraphicsCommand
.8f8c					ExecuteGraphicCommand:
.8f8c	0d e3 06	ora $06e3			ora 	gxCommandID 				; make a full command
.8f8f	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; draw it and exit
.8f92	b0 01		bcs $8f95			bcs 	_EGCError
.8f94	60		rts				rts
.8f95					_EGCError:
.8f95	4c 95 b4	jmp $b495			jmp 	SyntaxError
.8f98					RunGraphicsCommand:
.8f98	8d e3 06	sta $06e3			sta 	gxCommandID					; save TODO graphics command.
.8f9b	68		pla				pla 								; pop handler address
.8f9c	fa		plx				plx
.8f9d	1a		inc a				inc 	a
.8f9e	d0 01		bne $8fa1			bne 	_RGINoCarry
.8fa0	e8		inx				inx
.8fa1					_RGINoCarry:
.8fa1	8d e8 06	sta $06e8			sta 	GXHandler
.8fa4	8e e9 06	stx $06e9			stx 	GXHandler+1
.8fa7					_RGICommandLoop:
.8fa7	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa9	c8		iny				iny
.8faa	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.8fac	f0 53		beq $9001			beq 	_RGI_To
.8fae	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8fb0	f0 55		beq $9007			beq 	_RGI_Here
.8fb2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8fb4	f0 3d		beq $8ff3			beq 	_RGI_Exit
.8fb6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8fb8	f0 39		beq $8ff3			beq 	_RGI_Exit
.8fba	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8fbc	f0 3e		beq $8ffc			beq 	_RGI_Frame
.8fbe	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.8fc0	f0 33		beq $8ff5			beq 	_RGI_Solid
.8fc2	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8fc4	f0 4b		beq $9011			beq 	_RGI_By
.8fc6	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8fc8	f0 17		beq $8fe1			beq 	_RGI_Move2
.8fca	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8fcc	f0 65		beq $9033			beq 	_RGI_Dim
.8fce	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8fd0	f0 78		beq $904a			beq 	_RGI_Colour
.8fd2	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8fd4	f0 74		beq $904a			beq 	_RGI_Colour
.8fd6	ae e3 06	ldx $06e3			ldx 	gxCommandID
.8fd9	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8fdb	d0 03		bne $8fe0			bne 	_RGI_Move 					; move
.8fdd	4c 74 90	jmp $9074			jmp		_RGI_SpriteInstructions
.8fe0					_RGI_Move:
.8fe0	88		dey				dey 								; unpick get.
.8fe1					_RGI_Move2:
.8fe1	20 9a 90	jsr $909a			jsr 	GCGetCoordinatePair 		; move to here
.8fe4	20 c1 90	jsr $90c1			jsr 	GCCopyPairToStore 			; save
.8fe7	5a		phy				phy
.8fe8	20 b7 90	jsr $90b7			jsr 	GCLoadAXY 					; load in
.8feb	09 20		ora #$20			ora 	#16*2 						; move there
.8fed	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8ff0	7a		ply				ply
.8ff1	80 b4		bra $8fa7			bra 	_RGICommandLoop 			; and go round
.8ff3					_RGI_Exit:
.8ff3	88		dey				dey 								; unpick : / EOL
.8ff4	60		rts				rts
.8ff5					_RGI_Solid:
.8ff5	a9 02		lda #$02			lda 	#2
.8ff7	8d e4 06	sta $06e4			sta 	gxFillSolid
.8ffa	80 ab		bra $8fa7			bra 	_RGICommandLoop
.8ffc					_RGI_Frame:
.8ffc	9c e4 06	stz $06e4			stz 	gxFillSolid
.8fff	80 a6		bra $8fa7			bra 	_RGICommandLoop
.9001					_RGI_To:
.9001	20 9a 90	jsr $909a			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9004	20 c1 90	jsr $90c1			jsr 	GCCopyPairToStore
.9007					_RGI_Here:
.9007	5a		phy				phy
.9008	20 b7 90	jsr $90b7			jsr 	GCLoadAXY 					; load it into AXY
.900b	20 71 90	jsr $9071			jsr 	_RGICallHandler 			; go do whatever it is.
.900e	7a		ply				ply
.900f	80 96		bra $8fa7			bra 	_RGICommandLoop 			; and go round
.9011					_RGI_By:
.9011	20 a7 90	jsr $90a7			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9014	18		clc				clc
.9015	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9018	6d e5 06	adc $06e5			adc 	gxxPos
.901b	8d e5 06	sta $06e5			sta 	gxXPos
.901e	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9021	6d e6 06	adc $06e6			adc 	gxxPos+1
.9024	8d e6 06	sta $06e6			sta 	gxXPos+1
.9027	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.902a	18		clc				clc
.902b	6d e7 06	adc $06e7			adc 	gxYPos
.902e	8d e7 06	sta $06e7			sta 	gxYPos
.9031	80 d4		bra $9007			bra 	_RGI_Here
.9033					_RGI_Dim:
.9033	a2 01		ldx #$01			ldx	 	#1
.9035	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger
.9038	ad 09 04	lda $0409			lda 	NSMantissa0+1
.903b	c9 00		cmp #$00			cmp 	#0
.903d	f0 2f		beq $906e			beq 	_RGIRange
.903f	c9 09		cmp #$09			cmp 	#8+1
.9041	b0 2b		bcs $906e			bcs		_RGIRange
.9043	3a		dec a				dec 	a
.9044	8d ea 06	sta $06ea			sta 	gxDrawScale
.9047	4c a7 8f	jmp $8fa7			jmp 	_RGICommandLoop
.904a					_RGI_Colour:
.904a	a2 01		ldx #$01			ldx 	#1 							; colour
.904c	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger
.904f	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.9051	20 64 a6	jsr $a664			jsr 	NSMSetZero
.9054	b1 30		lda ($30),y			lda 	(codePtr),y
.9056	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.9058	d0 04		bne $905e			bne 	_RGICDefaultMode
.905a	c8		iny				iny
.905b	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger
.905e					_RGICDefaultMode:
.905e	5a		phy				phy
.905f	a9 08		lda #$08			lda 	#4*2 						; set colour.
.9061	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9064	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9067	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.906a	7a		ply				ply
.906b	4c a7 8f	jmp $8fa7			jmp 	_RGICommandLoop 			; and go round
.906e					_RGIRange:
.906e	4c 9a b4	jmp $b49a			jmp 	RangeError
.9071					_RGICallHandler:
.9071	6c e8 06	jmp ($06e8)			jmp 	(GXHandler)
.9074					_RGI_SpriteInstructions:
.9074	c9 be		cmp #$be			cmp 	#KWD_OFF
.9076	f0 07		beq $907f			beq 	_RGISpriteOff
.9078	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.907a	f0 13		beq $908f			beq 	_RGISetImage
.907c	4c e0 8f	jmp $8fe0			jmp 	_RGI_Move
.907f					_RGISpriteOff:
.907f	5a		phy				phy
.9080	a0 01		ldy #$01			ldy 	#1
.9082	a2 00		ldx #$00			ldx 	#0
.9084					_RGIDoCommandLoop:
.9084	a9 10		lda #$10			lda 	#8*2
.9086	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9089	7a		ply				ply
.908a	b0 e2		bcs $906e			bcs 	_RGIRange
.908c	4c a7 8f	jmp $8fa7			jmp 	_RGICommandLoop
.908f					_RGISetImage:
.908f	a2 01		ldx #$01			ldx 	#1
.9091	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger
.9094	5a		phy				phy
.9095	aa		tax				tax
.9096	a0 00		ldy #$00			ldy 	#0
.9098	80 ea		bra $9084			bra 	_RGIDoCommandLoop
.909a					GCGetCoordinatePair:
.909a	a2 01		ldx #$01			ldx 	#1
.909c	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.909f	20 af ae	jsr $aeaf			jsr 	CheckComma
.90a2	e8		inx				inx
.90a3	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.90a6	60		rts				rts
.90a7					GCSignedCoordinatePair:
.90a7	a2 01		ldx #$01			ldx 	#1
.90a9	20 e8 a5	jsr $a5e8			jsr 	Evaluate16BitIntegerSigned
.90ac	20 af ae	jsr $aeaf			jsr 	CheckComma
.90af	e8		inx				inx
.90b0	20 e8 a5	jsr $a5e8			jsr 	Evaluate16BitIntegerSigned
.90b3	60		rts				rts
.90b4					_GCCPRange:
.90b4	4c 9a b4	jmp $b49a			jmp 	RangeError
.90b7					GCLoadAXY:
.90b7	ad e6 06	lda $06e6			lda 	gxXPos+1
.90ba	ae e5 06	ldx $06e5			ldx 	gxXPos
.90bd	ac e7 06	ldy $06e7			ldy 	gxYPos
.90c0	60		rts				rts
.90c1					GCCopyPairToStore:
.90c1	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.90c4	8d e5 06	sta $06e5			sta 	gxXPos
.90c7	ad 11 04	lda $0411			lda 	NSMantissa1+1
.90ca	8d e6 06	sta $06e6			sta 	gxXPos+1
.90cd	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.90d0	8d e7 06	sta $06e7			sta 	gxYPos
.90d3	60		rts				rts
.06e3					gxCommandID:
>06e3							.fill 	1
.06e4					gxFillSolid:
>06e4							.fill 	1
.06e5					gxXPos:
>06e5							.fill 	2
.06e7					gxYPos:
>06e7							.fill 	1
.06e8					gxHandler:
>06e8							.fill 	2
.06ea					gxDrawScale:
>06ea							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.90d4					BitmapCtrl:
.90d4	b1 30		lda ($30),y			lda 	(codePtr),y
.90d6	c8		iny				iny
.90d7	a2 01		ldx #$01			ldx 	#1
.90d9	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90db	f0 11		beq $90ee			beq 	BitmapSwitch
.90dd	ca		dex				dex
.90de	c9 be		cmp #$be			cmp 	#KWD_OFF
.90e0	f0 0c		beq $90ee			beq 	BitmapSwitch
.90e2	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get the colour
.90e5	5a		phy				phy
.90e6	aa		tax				tax
.90e7	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.90e9	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90ec	7a		ply				ply
.90ed	60		rts				rts
.90ee					BitmapSwitch:
.90ee	5a		phy				phy
.90ef	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.90f1	a9 02		lda #$02			lda 	#1*2
.90f3	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90f6	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.90f8	a0 00		ldy #$00			ldy 	#0
.90fa	a2 ff		ldx #$ff			ldx 	#$FF
.90fc	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90ff	9c e4 06	stz $06e4			stz 	gxFillSolid
.9102	9c e5 06	stz $06e5			stz 	gxXPos
.9105	9c e6 06	stz $06e6			stz 	gxXPos+1
.9108	9c e7 06	stz $06e7			stz 	gxYPos
.910b	9c ea 06	stz $06ea			stz 	gxDrawScale
.910e	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9110	a2 00		ldx #$00			ldx 	#0
.9112	a0 00		ldy #$00			ldy 	#0
.9114	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9117	7a		ply				ply
.9118	60		rts				rts
.9119					SpritesCtrl:
.9119	b1 30		lda ($30),y			lda 	(codePtr),y
.911b	c8		iny				iny
.911c	a2 01		ldx #$01			ldx 	#1
.911e	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9120	f0 08		beq $912a			beq 	SpriteSwitch
.9122	ca		dex				dex
.9123	c9 be		cmp #$be			cmp 	#KWD_OFF
.9125	f0 03		beq $912a			beq 	SpriteSwitch
.9127	4c 95 b4	jmp $b495			jmp 	SyntaxError
.912a					SpriteSwitch:
.912a	5a		phy				phy
.912b	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.912d	a9 04		lda #$04			lda 	#2*2
.912f	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9132	7a		ply				ply
.9133	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9134					GfxCommand:
.9134	a2 00		ldx #$00			ldx 	#0
.9136	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; command
.9139	20 af ae	jsr $aeaf			jsr 	CheckComma
.913c	e8		inx				inx
.913d	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger 		; X
.9140	20 af ae	jsr $aeaf			jsr 	CheckComma
.9143	e8		inx				inx
.9144	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; Y
.9147	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.914a	4a		lsr a				lsr 	a
.914b	d0 16		bne $9163			bne 	_GfxError
.914d	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.9150	b0 11		bcs $9163			bcs 	_GfxError 					; bit 7 should have been zero
.9152	5a		phy				phy 								; save pos
.9153	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.9156	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9159	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.915c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.915f	b0 02		bcs $9163			bcs 	_GfxError
.9161	7a		ply				ply 								; restore pos and exit.
.9162	60		rts				rts
.9163					_GfxError:
.9163	4c 9a b4	jmp $b49a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.9166					Command_GOSUB:
.9166	a2 00		ldx #$00			ldx 	#0
.9168	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.916b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.916d	20 18 a7	jsr $a718			jsr 	StackOpen 					; create frame
.9170	20 5c a7	jsr $a75c			jsr 	STKSaveCodePosition 		; save current position
.9173	4c 89 91	jmp $9189			jmp 	GotoStackX
.9176					Command_RETURN:
.9176	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.9178	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.917a	20 44 a7	jsr $a744			jsr 	StackCheckFrame
.917d	20 6d a7	jsr $a76d			jsr 	STKLoadCodePosition 		; restore code position
.9180	20 36 a7	jsr $a736			jsr 	StackClose
.9183	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9184					GotoCommand:
.9184	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9186	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.9189					GotoStackX:
.9189	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.918c	48		pha				pha 								; it is slightly inefficient, just in cases.
.918d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9190	fa		plx				plx
.9191	20 c3 a6	jsr $a6c3			jsr 	MemorySearch 				; transfer to line number AX.
.9194	90 05		bcc $919b			bcc 	_GotoError 					; not found, off end.
.9196	d0 03		bne $919b			bne 	_GotoError 					; not found exactly
.9198	4c 28 95	jmp $9528			jmp 	RunNewLine 					; and go straight to new line code.
.919b					_GotoError:
.919b	a9 0d		lda #$0d		lda	#13
.919d	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.91a0					UnaryHit:
.91a0	fa		plx				plx
.91a1	a9 36		lda #$36			lda 	#zTemp0
.91a3	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get sprite number 0
.91a6	20 af ae	jsr $aeaf			jsr 	CheckComma
.91a9	e8		inx				inx
.91aa	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get sprite number 1
.91ad	20 a7 ae	jsr $aea7			jsr		CheckRightBracket
.91b0	ca		dex				dex 								; fix back up again.
.91b1	da		phx				phx 								; save X/Y
.91b2	5a		phy				phy
.91b3	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.91b6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91b9	aa		tax				tax
.91ba	a9 12		lda #$12			lda 	#9*2 						; command 9
.91bc	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; calculate result
.91bf	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.91c0	7a		ply				ply 								; restore XY
.91c1	fa		plx				plx
.91c2	20 66 a6	jsr $a666			jsr 	NSMSetByte 					; return the hit result
.91c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.91c6					IfCommand:
.91c6	a2 00		ldx #$00			ldx 	#0 							; If what.
.91c8	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber
.91cb	b1 30		lda ($30),y			lda 	(codePtr),y
.91cd	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.91cf	d0 0a		bne $91db			bne 	_IFStructured
.91d1	c8		iny				iny 								; consume THEN
.91d2	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; is it zero
.91d5	f0 01		beq $91d8			beq 	_IfFail 					; if fail, go to next line
.91d7	60		rts				rts 								; if THEN just continue
.91d8					_IfFail:
.91d8	4c 8d 95	jmp $958d			jmp 	EOLCommand
.91db					_IfStructured:
.91db	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; is it zero
.91de	d0 07		bne $91e7			bne 	_IfExit 					; if not, then continue normally.
.91e0	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.91e2	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.91e4	20 84 99	jsr $9984			jsr 	ScanForward 				; and run from there/
.91e7					_IfExit:
.91e7	60		rts				rts
.91e8					ElseCode:
.91e8	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.91ea	aa		tax				tax 								; so just go to the structure exit
.91eb	20 84 99	jsr $9984			jsr 	ScanForward
.91ee	60		rts				rts
.91ef					EndIf:
.91ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.91f0					UnaryJoyX:
.91f0	18		clc				clc
.91f1	80 01		bra $91f4			bra 	JoyMain
.91f3					UnaryJoyY:
.91f3	38		sec				sec
.91f4					JoyMain:
.91f4	fa		plx				plx 								; get pos
.91f5	08		php				php 								; save carry (set for Y)
.91f6	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; ignore the parameter
.91f9	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.91fc	20 92 b6	jsr $b692			jsr 	EXTReadController 			; read the controller.
.91ff	28		plp				plp
.9200	90 02		bcc $9204			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9202	4a		lsr a				lsr 	a
.9203	4a		lsr a				lsr 	a
.9204					_JMNoShift:
.9204	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9205	b0 0a		bcs $9211			bcs 	_JMIsRight
.9207	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9208	b0 04		bcs $920e			bcs 	_JMIsLeft
.920a	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; zero result
.920d	60		rts				rts
.920e					_JMIsLeft:
.920e	4c 96 9a	jmp $9a96			jmp 	ReturnTrue
.9211					_JMIsRight:
.9211	a9 01		lda #$01			lda 	#1
.9213	20 66 a6	jsr $a666			jsr 	NSMSetByte
.9216	60		rts				rts
.9217					UnaryJoyB:
.9217	fa		plx				plx 								; get pos
.9218	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; ignore the parameter
.921b	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.921e	20 92 b6	jsr $b692			jsr 	EXTReadController 			; read the controller.
.9221	4a		lsr a				lsr 	a
.9222	4a		lsr a				lsr 	a
.9223	4a		lsr a				lsr 	a
.9224	4a		lsr a				lsr 	a
.9225	29 01		and #$01			and 	#1
.9227	20 66 a6	jsr $a666			jsr 	NSMSetByte
.922a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.922b					LetCommand:
.922b	a2 00		ldx #$00			ldx 	#0
.922d	b1 30		lda ($30),y			lda 	(codePtr),y
.922f	c9 10		cmp #$10			cmp 	#KWD_AT
.9231	d0 16		bne $9249			bne 	_LCStandard
.9233	c8		iny				iny 								; skip equal
.9234	20 0b a1	jsr $a10b			jsr 	EvaluateTerm 				; get a number
.9237	20 4f 9f	jsr $9f4f			jsr 	Dereference 				; dereference it
.923a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.923d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.923f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9242	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9244	d0 10		bne $9256			bne 	_LCMain
.9246	4c 9f b4	jmp $b49f			jmp 	TypeError 					; was a reference before.
.9249					_LCStandard:
.9249	ad 22 9e	lda $9e22			lda 	PrecedenceLevel+"*"			; precedence > this
.924c	20 3c 9e	jsr $9e3c			jsr 	EvaluateExpressionAtPrecedence
.924f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.9252	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9254	f0 0e		beq $9264			beq 	_LetGoProc 					; it's a procedure call.
.9256					_LCMain:
.9256	a9 3d		lda #$3d			lda 	#"=" 						; check =
.9258	20 b7 ae	jsr $aeb7			jsr 	CheckNextA
.925b	e8		inx				inx 								; RHS
.925c	20 9b a5	jsr $a59b			jsr 	EvaluateValue
.925f	ca		dex				dex
.9260	20 67 92	jsr $9267			jsr 	AssignVariable
.9263	60		rts				rts
.9264					_LetGoProc:
.9264	4c 03 94	jmp $9403			jmp 	CallProcedure
.9267					AssignVariable:
.9267	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.926a	48		pha				pha 								; save a copy
.926b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.926e	29 10		and #$10			and 	#NSBIsString
.9270	d0 0b		bne $927d			bne 	_ASError
.9272	68		pla				pla 								; get back
.9273	29 10		and #$10			and 	#NSBIsString 				; check type
.9275	d0 03		bne $927a			bne 	_ASString
.9277	4c 77 9e	jmp $9e77			jmp 	AssignNumber
.927a					_ASString:
.927a	4c e5 9e	jmp $9ee5			jmp 	AssignString
.927d					_ASError:
.927d	4c 9f b4	jmp $b49f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.9280					Command_List:
.9280	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.9283	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.9286	9c 14 04	stz $0414			stz 	NSMantissa1+4
.9289	a9 ff		lda #$ff			lda 	#$FF
.928b	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.928e	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9291	b1 30		lda ($30),y			lda 	(codePtr),y
.9293	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9295	f0 1e		beq $92b5			beq 	_CLSecond
.9297	20 13 93	jsr $9313			jsr 	CLIsDigit 					; if not digit, list all
.929a	b0 24		bcs $92c0			bcs 	_CLStart
.929c	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.929e	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.92a1	b1 30		lda ($30),y			lda 	(codePtr),y
.92a3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92a5	f0 0e		beq $92b5			beq 	_CLSecond 					; if so go get it
.92a7	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.92aa	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92ad	ad 14 04	lda $0414			lda 	NSMantissa1+4
.92b0	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92b3	80 0b		bra $92c0			bra 	_CLStart
.92b5					_CLSecond:
.92b5	c8		iny				iny 								; consume comma
.92b6	20 13 93	jsr $9313			jsr 	CLIsDigit 					; digit found
.92b9	b0 05		bcs $92c0			bcs 	_CLStart 					; if not, continue listing
.92bb	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.92bd	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger
.92c0					_CLStart
.92c0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92c2	85 30		sta $30				sta 	codePtr
.92c4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92c6	85 31		sta $31				sta 	codePtr+1
.92c8					_CLLoop:
.92c8	20 8f b6	jsr $b68f			jsr 	EXTBreakCheck 				; break check
.92cb	f0 30		beq $92fd			beq 	_CLExit
.92cd	b2 30		lda ($30)			lda 	(codePtr)
.92cf	f0 2c		beq $92fd			beq 	_CLExit
.92d1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.92d3	20 00 93	jsr $9300			jsr 	CLCompareLineNo
.92d6	90 18		bcc $92f0			bcc 	_CLNext
.92d8	a2 07		ldx #$07			ldx 	#7
.92da	20 00 93	jsr $9300			jsr 	CLCompareLineNo
.92dd	f0 02		beq $92e1			beq 	_CLDoThisOne
.92df	b0 0f		bcs $92f0			bcs 	_CLNext
.92e1					_CLDoThisOne:
.92e1	20 89 97	jsr $9789			jsr 	ListConvertLine 			; convert line into token Buffer
.92e4	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.92e6	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.92e8	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.92eb	a9 0d		lda #$0d			lda 	#13 						; new line
.92ed	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.92f0					_CLNext:
.92f0	18		clc				clc
.92f1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92f3	65 30		adc $30				adc 	codePtr
.92f5	85 30		sta $30				sta 	codePtr
.92f7	90 02		bcc $92fb			bcc 	_CREExit
.92f9	e6 31		inc $31				inc 	codePtr+1
.92fb					_CREExit:
.92fb	80 cb		bra $92c8			bra 	_CLLoop
.92fd					_CLExit:
.92fd	4c c9 8b	jmp $8bc9			jmp 	WarmStart
.9300					CLCompareLineNo:
.9300	38		sec				sec
.9301	a0 01		ldy #$01			ldy 	#1
.9303	b1 30		lda ($30),y			lda 	(codePtr),y
.9305	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9308	85 36		sta $36				sta 	zTemp0
.930a	c8		iny				iny
.930b	b1 30		lda ($30),y			lda 	(codePtr),y
.930d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9310	05 36		ora $36				ora 	zTemp0
.9312	60		rts				rts
.9313					CLIsDigit:
.9313	b1 30		lda ($30),y			lda 	(codePtr),y
.9315	c9 30		cmp #$30			cmp 	#"0"
.9317	90 03		bcc $931c			bcc	 	_CLIDExitFalse
.9319	c9 3a		cmp #$3a			cmp 	#"9"+1
.931b	60		rts				rts
.931c					_CLIDExitFalse:
.931c	38		sec				sec
.931d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.931e					Command_LOCAL:
.931e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9320	20 2c 93	jsr $932c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9323	b1 30		lda ($30),y			lda 	(codePtr),y
.9325	c8		iny				iny
.9326	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9328	f0 f4		beq $931e			beq 	Command_LOCAL
.932a	88		dey				dey 								; unpick pre-get
.932b	60		rts				rts
.932c					LocaliseNextTerm:
.932c	20 0b a1	jsr $a10b			jsr 	EvaluateTerm 				; evaluate the term
.932f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9332	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9334	f0 69		beq $939f			beq		_LNTError
.9336	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9339	85 36		sta $36				sta 	zTemp0
.933b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.933e	85 37		sta $37				sta  	zTemp0+1
.9340	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9343	29 10		and #$10			and 	#NSBIsString
.9345	d0 22		bne $9369			bne 	_LNTPushString
.9347	5a		phy				phy
.9348	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.934a					_LNTPushNumLoop:
.934a	b1 36		lda ($36),y			lda		(zTemp0),y
.934c	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.934f	a9 00		lda #$00			lda 	#0
.9351	91 36		sta ($36),y			sta 	(zTemp0),y
.9353	c8		iny				iny
.9354	c0 05		cpy #$05			cpy 	#5
.9356	d0 f2		bne $934a			bne 	_LNTPushNumLoop
.9358	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.935a	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.935d	a5 37		lda $37				lda 	zTemp0+1
.935f	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9362	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9364	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9367	7a		ply				ply
.9368	60		rts				rts
.9369					_LNTPushString:
.9369	5a		phy				phy
.936a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.936c	85 38		sta $38				sta 	zTemp1
.936e	a0 01		ldy #$01			ldy 	#1
.9370	b1 36		lda ($36),y			lda 	(zTemp0),y
.9372	85 39		sta $39				sta 	zTemp1+1
.9374	a0 00		ldy #$00			ldy 	#0 							; output string
.9376	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.9378	f0 0a		beq $9384			beq 	_LNTStringOut
.937a					_LNTPushStrLoop:
.937a	b1 38		lda ($38),y			lda 	(zTemp1),y
.937c	f0 06		beq $9384			beq 	_LNTStringOut
.937e	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9381	c8		iny				iny
.9382	80 f6		bra $937a			bra 	_LNTPushStrLoop
.9384					_LNTStringOut:
.9384	98		tya				tya									; output length
.9385	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9388	a9 00		lda #$00			lda 	#0 							; clear original string.
.938a	92 38		sta ($38)			sta 	(zTemp1)
.938c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.938f	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9392	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9395	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.9398	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.939a	20 f6 a6	jsr $a6f6			jsr 	StackPushByte
.939d	7a		ply				ply
.939e	60		rts				rts
.939f					_LNTError:
.939f	4c 95 b4	jmp $b495			jmp 	SyntaxError
.ae4e					LocalPopValue:
.ae4e	20 0f a7	jsr $a70f			jsr 	StackPopByte
.ae51	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ae53	d0 17		bne $ae6c			bne 	_LPVString
.ae55	20 0f a7	jsr $a70f			jsr 	StackPopByte 				; address
.ae58	85 37		sta $37				sta 	zTemp0+1
.ae5a	20 0f a7	jsr $a70f			jsr 	StackPopByte
.ae5d	85 36		sta $36				sta 	zTemp0
.ae5f	5a		phy				phy
.ae60	a0 04		ldy #$04			ldy 	#4 							; copy back
.ae62					_LPVNumberCopy:
.ae62	20 0f a7	jsr $a70f			jsr 	StackPopByte
.ae65	91 36		sta ($36),y			sta 	(zTemp0),y
.ae67	88		dey				dey
.ae68	10 f8		bpl $ae62			bpl 	_LPVNumberCopy
.ae6a	7a		ply				ply 								; and complete
.ae6b	60		rts				rts
.ae6c					_LPVString:
.ae6c	20 0f a7	jsr $a70f			jsr 	StackPopByte 				; address of record => zTemp0
.ae6f	85 37		sta $37				sta 	zTemp0+1
.ae71	20 0f a7	jsr $a70f			jsr 	StackPopByte
.ae74	85 36		sta $36				sta 	zTemp0
.ae76	5a		phy				phy
.ae77	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ae79	85 38		sta $38				sta 	zTemp1
.ae7b	a0 01		ldy #$01			ldy 	#1
.ae7d	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae7f	85 39		sta $39				sta 	zTemp1+1
.ae81	20 0f a7	jsr $a70f			jsr 	StackPopByte 				; # to get => y
.ae84	a8		tay				tay
.ae85	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ae87	f0 0e		beq $ae97			beq 	_LPVStringCopied
.ae89	a9 00		lda #$00			lda 	#0 							; NULL on end
.ae8b	91 38		sta ($38),y			sta 	(zTemp1),y
.ae8d					_LPVStringCopy:
.ae8d	88		dey				dey
.ae8e	30 07		bmi $ae97			bmi 	_LPVStringCopied
.ae90	20 0f a7	jsr $a70f			jsr 	StackPopByte
.ae93	91 38		sta ($38),y			sta 	(zTemp1),y
.ae95	80 f6		bra $ae8d			bra 	_LPVStringCopy
.ae97					_LPVStringCopied:
.ae97	fa		plx				plx
.ae98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.93a2					NewCommand:
.93a2	20 a1 a6	jsr $a6a1			jsr 	MemoryNew
.93a5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.93a8	20 62 8c	jsr $8c62			jsr 	ClearCommand 				; clear everything.
.93ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.93ac					Command_Print:
.93ac	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.93ad					_CPLoop:
.93ad	08		php				php 								; save last action flag
.93ae	b1 30		lda ($30),y			lda 	(codePtr),y
.93b0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.93b2	f0 46		beq $93fa			beq 	_CPExit
.93b4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.93b6	f0 42		beq $93fa			beq 	_CPExit
.93b8	68		pla				pla 								; throw last action flag
.93b9	b1 30		lda ($30),y			lda 	(codePtr),y
.93bb	c8		iny				iny
.93bc	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.93be	f0 37		beq $93f7			beq 	_CPContinueWithSameLine
.93c0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.93c2	f0 2e		beq $93f2			beq 	_CPTab
.93c4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.93c6	f0 26		beq $93ee			beq 	_CPNewLine
.93c8	88		dey				dey 								; undo the get.
.93c9	a2 00		ldx #$00			ldx 	#0
.93cb	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; get a value into slot 0
.93ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.93d1	29 10		and #$10			and 	#NSBIsString
.93d3	f0 0b		beq $93e0			beq 	_CPNumber
.93d5	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.93d8	ad 08 04	lda $0408			lda 	NSMantissa0
.93db	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.93de	80 cc		bra $93ac			bra 	Command_Print 				; loop round clearing carry so NL if end
.93e0					_CPNumber:
.93e0	a9 05		lda #$05			lda 	#5 							; maximum decimals
.93e2	20 71 a4	jsr $a471			jsr 	ConvertNumberToString 		; convert to string
.93e5	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.93e7	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.93e9	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.93ec	80 be		bra $93ac			bra 	Command_Print 				; loop round clearing carry so NL if end
.93ee					_CPNewLine:
.93ee	a9 0d		lda #$0d			lda 	#13
.93f0	80 02		bra $93f4			bra 	_CPPrintChar
.93f2					_CPTab:
.93f2	a9 09		lda #$09			lda 	#9 							; print TAB
.93f4					_CPPrintChar:
.93f4	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.93f7					_CPContinueWithSameLine:
.93f7	38		sec				sec 								; loop round with carry set, which
.93f8	80 b3		bra $93ad			bra 	_CPLoop 					; will inhibit final CR
.93fa					_CPExit:
.93fa	28		plp				plp 								; get last action flag
.93fb	b0 05		bcs $9402			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.93fd	a9 0d		lda #$0d			lda 	#13 						; print new line
.93ff	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.9402					_CPExit2:
.9402	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9403					CallProcedure:
.9403	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9405	b1 30		lda ($30),y			lda 	(codePtr),y
.9407	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9409	f0 0c		beq $9417			beq 	_CPEndParam
.940b					_CPParamLoop:
.940b	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; get parameter onto stack
.940e	e8		inx				inx 								; bump next stack
.940f	b1 30		lda ($30),y			lda 	(codePtr),y
.9411	c8		iny				iny
.9412	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9414	f0 f5		beq $940b			beq 	_CPParamLoop
.9416	88		dey				dey 								; unpick.
.9417					_CPEndParam:
.9417	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.941a	c8		iny				iny									; skip right bracket
.941b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.941d	20 18 a7	jsr $a718			jsr 	StackOpen
.9420	20 5c a7	jsr $a75c			jsr 	STKSaveCodePosition 		; save loop position
.9423	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9426	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9428	ad 10 04	lda $0410			lda 	NSMantissa1
.942b	85 37		sta $37				sta 	zTemp0+1
.942d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.942f	b2 36		lda ($36)			lda 	(zTemp0)
.9431	85 30		sta $30				sta 	safePtr
.9433	b1 36		lda ($36),y			lda 	(zTemp0),y
.9435	85 31		sta $31				sta 	safePtr+1
.9437	c8		iny				iny
.9438	b1 36		lda ($36),y			lda 	(zTemp0),y
.943a	85 32		sta $32				sta 	safePtr+2
.943c	c8		iny				iny
.943d	b1 36		lda ($36),y			lda 	(zTemp0),y
.943f	85 33		sta $33				sta 	safePtr+3
.9441	c8		iny				iny 								; get Y offset -> Y
.9442	b1 36		lda ($36),y			lda 	(zTemp0),y
.9444	a8		tay				tay
.9445	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9447	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.944a	f0 13		beq $945f			beq 	_ParamExit 					; if so, exit.
.944c					_ParamExtract:
.944c	ca		dex				dex 								; put a local term on the level before
.944d	20 2c 93	jsr $932c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9450	20 67 92	jsr $9267			jsr 	AssignVariable 				; assign stacked value to the variable.
.9453	e8		inx				inx 								; advance to next parameter to do.
.9454	e8		inx				inx
.9455	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9458	f0 05		beq $945f			beq 	_ParamExit
.945a	20 af ae	jsr $aeaf			jsr 	CheckComma 					; comma seperating parameters
.945d	80 ed		bra $944c			bra 	_ParamExtract
.945f					_ParamExit:
.945f	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; check )
.9462	60		rts				rts 								; and continue from here
.ae99					Command_ENDPROC:
.ae99	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ae9b	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ae9d	20 44 a7	jsr $a744			jsr 	StackCheckFrame
.aea0	20 6d a7	jsr $a76d			jsr 	STKLoadCodePosition 		; restore code position
.aea3	20 36 a7	jsr $a736			jsr 	StackClose
.aea6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9463					Command_Read:
.9463	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9465	20 0b a1	jsr $a10b			jsr 	EvaluateTerm
.9468	bd 00 04	lda $0400,x			lda 	NSStatus,x
.946b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.946d	f0 4a		beq $94b9			beq 	_CRSyntax 					; check reference (bit 0)
.946f	20 02 95	jsr $9502			jsr 	SwapDataCodePtrs 			; swap code and data
.9472	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9475	d0 20		bne $9497			bne 	_CRContinueData
.9477					_CRKeepSearching:
.9477	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.9479	aa		tax				tax
.947a	20 84 99	jsr $9984			jsr 	ScanForward
.947d	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.947f	f0 16		beq $9497			beq 	_CRHaveData 				; found it
.9481	18		clc				clc
.9482	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9484	65 30		adc $30				adc 	codePtr
.9486	85 30		sta $30				sta 	codePtr
.9488	90 02		bcc $948c			bcc 	_CREExit
.948a	e6 31		inc $31				inc 	codePtr+1
.948c					_CREExit:
.948c	a0 03		ldy #$03			ldy 	#3 							; start of line.
.948e	b2 30		lda ($30)			lda 	(codePtr)
.9490	d0 e5		bne $9477			bne 	_CRKeepSearching
.9492	a9 0b		lda #$0b		lda	#11
.9494	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.9497					_CRHaveData:
.9497					_CRContinueData:
.9497	a2 01		ldx #$01			ldx 	#1
.9499	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.949c	ca		dex				dex
.949d	20 67 92	jsr $9267			jsr		AssignVariable 				; do the assignment
.94a0	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.94a3	b1 30		lda ($30),y			lda 	(codePtr),y
.94a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.94a7	d0 04		bne $94ad			bne 	_CRSwapBack
.94a9	c8		iny				iny 								; consume comma
.94aa	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.94ad					_CRSwapBack:
.94ad	20 02 95	jsr $9502			jsr 	SwapDataCodePtrs			; swap them back.
.94b0	b1 30		lda ($30),y			lda 	(codePtr),y
.94b2	c8		iny				iny
.94b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94b5	f0 ac		beq $9463			beq 	Command_Read 				; if so go round again.
.94b7	88		dey				dey 								; unpick get.
.94b8	60		rts				rts
.94b9					_CRSyntax:
.94b9	4c 95 b4	jmp $b495			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.94bc					RemCommand:
.94bc	b1 30		lda ($30),y			lda 	(codePtr),y
.94be	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.94c0	d0 06		bne $94c8			bne 	_RMExit
.94c2	c8		iny				iny
.94c3	98		tya				tya
.94c4	38		sec				sec
.94c5	71 30		adc ($30),y			adc 	(codePtr),y
.94c7	a8		tay				tay
.94c8					_RMExit:
.94c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.94c9					Command_REPEAT:
.94c9	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.94cb	20 18 a7	jsr $a718			jsr 	StackOpen
.94ce	20 5c a7	jsr $a75c			jsr 	STKSaveCodePosition 		; save loop position
.94d1	60		rts				rts
.94d2					Command_UNTIL:
.94d2	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.94d4	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.94d6	20 44 a7	jsr $a744			jsr 	StackCheckFrame
.94d9	a2 00		ldx #$00			ldx 	#0
.94db	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; work out the number
.94de	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; check if zero
.94e1	f0 04		beq $94e7			beq 	_CULoopBack 				; if so keep looping
.94e3	20 36 a7	jsr $a736			jsr 	StackClose		 			; return
.94e6	60		rts				rts
.94e7					_CULoopBack:
.94e7	20 6d a7	jsr $a76d			jsr 	STKLoadCodePosition 		; loop back
.94ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.94eb					Command_Restore:
.94eb	20 02 95	jsr $9502			jsr 	SwapDataCodePtrs 			; swap code and data
.94ee	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94f0	85 30		sta $30				sta 	codePtr
.94f2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94f4	85 31		sta $31				sta 	codePtr+1
.94f6	20 02 95	jsr $9502			jsr 	SwapDataCodePtrs 			; put them back
.94f9	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.94fb	8d 9b 04	sta $049b			sta 	dataPointer+4
.94fe	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9501	60		rts				rts
.9502					SwapDataCodePtrs:
.9502	da		phx				phx
.9503	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9505					_SDCPLoop:
.9505	b5 30		lda $30,x			lda 	safePtr,x
.9507	48		pha				pha
.9508	bd 97 04	lda $0497,x			lda 	dataPointer,x
.950b	95 30		sta $30,x			sta 	safePtr,x
.950d	68		pla				pla
.950e	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9511	ca		dex				dex
.9512	10 f1		bpl $9505			bpl 	_SDCPLoop
.9514	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9517	8c 9b 04	sty $049b			sty 	dataPointer+4
.951a	a8		tay				tay
.951b	fa		plx				plx
.951c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.951d					CommandRUN:
.951d	20 62 8c	jsr $8c62			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9520	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9522	85 30		sta $30				sta 	codePtr
.9524	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9526	85 31		sta $31				sta 	codePtr+1
.9528					RUNNewLine:
.9528	b2 30		lda ($30)			lda 	(codePtr)
.952a	f0 5e		beq $958a			beq 	CRNoProgram         		; no then END.
.952c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.952e	9a		txs				txs
.952f					RUNCodePointerLine:
.952f	a0 02		ldy #$02			ldy 	#2 							; start of program
.9531					_CRIncMainLoop:
.9531	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9534	d0 05		bne $953b			bne 	_CRNoBreakCheck
.9536	20 8f b6	jsr $b68f			jsr 	EXTBreakCheck 				; break check
.9539	f0 4a		beq $9585			beq 	_CRBreak
.953b					_CRNoBreakCheck:
.953b	c8		iny				iny
.953c					_CRMainLoop:
.953c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.953f	b1 30		lda ($30),y			lda 	(codePtr),y
.9541	10 10		bpl $9553			bpl 	_CRNotKeyword
.9543	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9545	b0 04		bcs $954b			bcs 	_CRIsKeyword
.9547	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9549	b0 34		bcs $957f			bcs		_CRSyntaxError
.954b					_CRIsKeyword:
.954b	c8		iny				iny 								; consume command
.954c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.954d	aa		tax				tax 								; put in X for vector jump
.954e	20 82 95	jsr $9582			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9551	80 e9		bra $953c			bra 	_CRMainLoop 				; and loop round
.9553					_CRNotKeyword:
.9553	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9555	f0 da		beq $9531			beq 	_CRIncMainLoop
.9557	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9559	90 05		bcc $9560			bcc 	_CRNotVariable
.955b					_CRGoLet:
.955b	20 2b 92	jsr $922b			jsr 	LetCommand
.955e	80 dc		bra $953c			bra 	_CRMainLoop
.9560					_CRNotVariable:
.9560	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9562	f0 f7		beq $955b			beq 	_CRGoLet
.9564	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9566	f0 f3		beq $955b			beq 	_CRGoLet
.9568	c9 21		cmp #$21			cmp 	#KWD_PLING
.956a	f0 ef		beq $955b			beq 	_CRGoLet
.956c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.956e	f0 09		beq $9579			beq 	_CRGoRem
.9570	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9572	d0 0b		bne $957f			bne 	_CRSyntaxError
.9574	20 02 8b	jsr $8b02			jsr 	LabelHere
.9577	80 c3		bra $953c			bra 	_CRMainLoop
.9579					_CRGoRem:
.9579	c8		iny				iny
.957a	20 bc 94	jsr $94bc			jsr 	RemCommand
.957d	80 bd		bra $953c			bra 	_CRMainLoop
.957f					_CRSyntaxError:
.957f	4c 95 b4	jmp $b495			jmp 	SyntaxError
.9582					_CRCallVector0:
.9582	7c 2e 96	jmp ($962e,x)			jmp 	(VectorSet0,x)
.9585					_CRBreak:
.9585	a9 01		lda #$01		lda	#1
.9587	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.958a					CRNoProgram:
.958a	4c 85 8d	jmp $8d85			jmp 	EndCommand
.958d					EOLCommand:
.958d	18		clc				clc
.958e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9590	65 30		adc $30				adc 	codePtr
.9592	85 30		sta $30				sta 	codePtr
.9594	90 02		bcc $9598			bcc 	_CREExit
.9596	e6 31		inc $31				inc 	codePtr+1
.9598					_CREExit:
.9598	80 8e		bra $9528			bra 	RunNewLine
.959a					Shift1Command:
.959a	b1 30		lda ($30),y			lda 	(codePtr),y
.959c	c8		iny				iny
.959d	0a		asl a				asl 	a
.959e	aa		tax				tax
.959f	7c c6 96	jmp ($96c6,x)			jmp 	(VectorSet1,x)
.95a2					Shift2Command:
.95a2	b1 30		lda ($30),y			lda 	(codePtr),y
.95a4	c8		iny				iny
.95a5	0a		asl a				asl 	a
.95a6	aa		tax				tax
.95a7	7c e0 96	jmp ($96e0,x)			jmp 	(VectorSet2,x)
.95aa					Unused1:
.95aa					Unused2:
.95aa					Unused3:
.95aa					Unused4:
.95aa	4c 95 b4	jmp $b495			jmp 	SyntaxError
>95ad							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.95ae					VectorSetPunc:
>95ae	d3 9b					.word	ShiftLeft                        ; $00 <<
>95b0	cd 9a					.word	BinaryCompareLessEqual           ; $01 <=
>95b2	c3 9a					.word	BinaryCompareNotEqual            ; $02 <>
>95b4	95 b4					.word	SyntaxError                      ; $03 !!3
>95b6	95 b4					.word	SyntaxError                      ; $04 ><
>95b8	d7 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>95ba	d6 9b					.word	ShiftRight                       ; $06 >>
>95bc	95 b4					.word	SyntaxError                      ; $07 !!7
>95be	95 b4					.word	SyntaxError                      ; $08 !!8
>95c0	95 b4					.word	SyntaxError                      ; $09 !!9
>95c2	95 b4					.word	SyntaxError                      ; $0a !!10
>95c4	95 b4					.word	SyntaxError                      ; $0b !!11
>95c6	95 b4					.word	SyntaxError                      ; $0c !!12
>95c8	95 b4					.word	SyntaxError                      ; $0d !!13
>95ca	95 b4					.word	SyntaxError                      ; $0e !!14
>95cc	95 b4					.word	SyntaxError                      ; $0f !!15
>95ce	95 b4					.word	SyntaxError                      ; $10 @
>95d0	95 b4					.word	SyntaxError                      ; $11 !!17
>95d2	95 b4					.word	SyntaxError                      ; $12 !!18
>95d4	95 b4					.word	SyntaxError                      ; $13 [
>95d6	c0 ae					.word	IntegerDivide                    ; $14 \
>95d8	95 b4					.word	SyntaxError                      ; $15 ]
>95da	64 9d					.word	EorInteger                       ; $16 ^
>95dc	95 b4					.word	SyntaxError                      ; $17 _
>95de	95 b4					.word	SyntaxError                      ; $18 `
>95e0	95 b4					.word	SyntaxError                      ; $19 !!25
>95e2	95 b4					.word	SyntaxError                      ; $1a !!26
>95e4	95 b4					.word	SyntaxError                      ; $1b {
>95e6	1e 9d					.word	OraInteger                       ; $1c |
>95e8	95 b4					.word	SyntaxError                      ; $1d }
>95ea	95 b4					.word	SyntaxError                      ; $1e ~
>95ec	95 b4					.word	SyntaxError                      ; $1f [7m<7F>[m
>95ee	95 b4					.word	SyntaxError                      ; $20
>95f0	aa 9d					.word	WordIndirect                     ; $21 !
>95f2	95 b4					.word	SyntaxError                      ; $22 "
>95f4	95 b4					.word	SyntaxError                      ; $23 #
>95f6	95 b4					.word	SyntaxError                      ; $24 $
>95f8	0d af					.word	IntegerModulus                   ; $25 %
>95fa	d8 9c					.word	AndInteger                       ; $26 &
>95fc	95 b4					.word	SyntaxError                      ; $27 '
>95fe	95 b4					.word	SyntaxError                      ; $28 (
>9600	95 b4					.word	SyntaxError                      ; $29 )
>9602	82 af					.word	MulInteger                       ; $2a *
>9604	6a 9c					.word	AddInteger                       ; $2b +
>9606	95 b4					.word	SyntaxError                      ; $2c ,
>9608	ad 9c					.word	SubInteger                       ; $2d -
>960a	95 b4					.word	SyntaxError                      ; $2e .
>960c	21 b1					.word	FDivideCommand                   ; $2f /
>960e	95 b4					.word	SyntaxError                      ; $30 0
>9610	95 b4					.word	SyntaxError                      ; $31 1
>9612	95 b4					.word	SyntaxError                      ; $32 2
>9614	95 b4					.word	SyntaxError                      ; $33 3
>9616	95 b4					.word	SyntaxError                      ; $34 4
>9618	95 b4					.word	SyntaxError                      ; $35 5
>961a	95 b4					.word	SyntaxError                      ; $36 6
>961c	95 b4					.word	SyntaxError                      ; $37 7
>961e	95 b4					.word	SyntaxError                      ; $38 8
>9620	95 b4					.word	SyntaxError                      ; $39 9
>9622	95 b4					.word	SyntaxError                      ; $3a :
>9624	95 b4					.word	SyntaxError                      ; $3b ;
>9626	af 9a					.word	BinaryCompareLess                ; $3c <
>9628	a5 9a					.word	BinaryCompareEqual               ; $3d =
>962a	b9 9a					.word	BinaryCompareGreater             ; $3e >
>962c	d1 9d					.word	ByteIndirect                     ; $3f ?
.962e					VectorSet0:
>962e	8d 95					.word	EOLCommand                       ; $80 !0:EOF
>9630	9a 95					.word	Shift1Command                    ; $81 !1:SH1
>9632	a2 95					.word	Shift2Command                    ; $82 !2:SH2
>9634	67 b2					.word	AbsUnary                         ; $83 ABS(
>9636	a1 a2					.word	AllocUnary                       ; $84 ALLOC(
>9638	77 b2					.word	AscUnary                         ; $85 ASC(
>963a	22 a4					.word	ChrUnary                         ; $86 CHR$(
>963c	88 8d					.word	UnaryEvent                       ; $87 EVENT(
>963e	a1 9a					.word	UnaryFalse                       ; $88 FALSE
>9640	84 b2					.word	FracUnary                        ; $89 FRAC(
>9642	a0 91					.word	UnaryHit                         ; $8a HIT(
>9644	9a b2					.word	IntUnary                         ; $8b INT(
>9646	f0 b2					.word	IsValUnary                       ; $8c ISVAL(
>9648	17 92					.word	UnaryJoyB                        ; $8d JOYB(
>964a	f0 91					.word	UnaryJoyX                        ; $8e JOYX(
>964c	f3 91					.word	UnaryJoyY                        ; $8f JOYY(
>964e	fc a4					.word	Unary_Left                       ; $90 LEFT$(
>9650	ac b2					.word	LenUnary                         ; $91 LEN(
>9652	15 a3					.word	Unary_Max                        ; $92 MAX(
>9654	26 a5					.word	Unary_Mid                        ; $93 MID$(
>9656	11 a3					.word	Unary_Min                        ; $94 MIN(
>9658	6c a3					.word	Unary_Not                        ; $95 NOT(
>965a	82 a3					.word	Unary_Random                     ; $96 RANDOM(
>965c	0c a5					.word	Unary_Right                      ; $97 RIGHT$(
>965e	a1 a3					.word	Unary_Rnd                        ; $98 RND(
>9660	c6 b2					.word	SgnUnary                         ; $99 SGN(
>9662	34 a4					.word	SpcUnary                         ; $9a SPC(
>9664	4f a4					.word	Unary_Str                        ; $9b STR$(
>9666	6d 97					.word	UnaryTimer                       ; $9c TIMER(
>9668	95 9a					.word	UnaryTrue                        ; $9d TRUE
>966a	e6 b2					.word	ValUnary                         ; $9e VAL(
>966c	f1 8d					.word	ForCommand                       ; $9f FOR
>966e	c6 91					.word	IfCommand                        ; $a0 IF
>9670	aa 95					.word	Unused1                          ; $a1 PROC
>9672	c9 94					.word	Command_REPEAT                   ; $a2 REPEAT
>9674	fa 99					.word	Command_WHILE                    ; $a3 WHILE
>9676	ef 91					.word	EndIf                            ; $a4 ENDIF
>9678	99 ae					.word	Command_ENDPROC                  ; $a5 ENDPROC
>967a	ab 8e					.word	NextCommand                      ; $a6 NEXT
>967c	aa 95					.word	Unused4                          ; $a7 THEN
>967e	d2 94					.word	Command_UNTIL                    ; $a8 UNTIL
>9680	1b 9a					.word	Command_WEND                     ; $a9 WEND
>9682	95 b4					.word	SyntaxError                      ; $aa BY
>9684	28 8c					.word	CallCommand                      ; $ab CALL
>9686	08 8f					.word	CircleCommand                    ; $ac CIRCLE
>9688	62 8c					.word	ClearCommand                     ; $ad CLEAR
>968a	ba 8c					.word	ClearScreen                      ; $ae CLS
>968c	95 b4					.word	SyntaxError                      ; $af COLOR
>968e	95 b4					.word	SyntaxError                      ; $b0 COLOUR
>9690	c0 8c					.word	Command_Data                     ; $b1 DATA
>9692	c8 8c					.word	DimCommand                       ; $b2 DIM
>9694	aa 95					.word	Unused3                          ; $b3 DOWNTO
>9696	e8 91					.word	ElseCode                         ; $b4 ELSE
>9698	95 b4					.word	SyntaxError                      ; $b5 FROM
>969a	34 91					.word	GfxCommand                       ; $b6 GFX
>969c	66 91					.word	Command_GOSUB                    ; $b7 GOSUB
>969e	84 91					.word	GotoCommand                      ; $b8 GOTO
>96a0	95 b4					.word	SyntaxError                      ; $b9 HERE
>96a2	32 8f					.word	ImageCommand                     ; $ba IMAGE
>96a4	2b 92					.word	LetCommand                       ; $bb LET
>96a6	87 8f					.word	LineCommand                      ; $bc LINE
>96a8	1e 93					.word	Command_LOCAL                    ; $bd LOCAL
>96aa	95 b4					.word	SyntaxError                      ; $be OFF
>96ac	95 b4					.word	SyntaxError                      ; $bf ON
>96ae	95 b4					.word	SyntaxError                      ; $c0 OUTLINE
>96b0	95 b4					.word	SyntaxError                      ; $c1 PALETTE
>96b2	80 8f					.word	PlotCommand                      ; $c2 PLOT
>96b4	ac 93					.word	Command_Print                    ; $c3 PRINT
>96b6	63 94					.word	Command_Read                     ; $c4 READ
>96b8	04 8f					.word	RectangleCommand                 ; $c5 RECT
>96ba	bc 94					.word	RemCommand                       ; $c6 REM
>96bc	76 91					.word	Command_RETURN                   ; $c7 RETURN
>96be	95 b4					.word	SyntaxError                      ; $c8 SOLID
>96c0	13 8f					.word	SpriteCommand                    ; $c9 SPRITE
>96c2	4f 8f					.word	TextCommand                      ; $ca TEXT
>96c4	aa 95					.word	Unused2                          ; $cb TO
.96c6					VectorSet1:
>96c6	95 b4					.word	SyntaxError                      ; $80 !0:EOF
>96c8	95 b4					.word	SyntaxError                      ; $81 !1:SH1
>96ca	95 b4					.word	SyntaxError                      ; $82 !2:SH2
>96cc	f9 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>96ce	18 8c					.word	AssertCommand                    ; $84 ASSERT
>96d0	d4 90					.word	BitmapCtrl                       ; $85 BITMAP
>96d2	85 8d					.word	EndCommand                       ; $86 END
>96d4	80 92					.word	Command_List                     ; $87 LIST
>96d6	a2 93					.word	NewCommand                       ; $88 NEW
>96d8	eb 94					.word	Command_Restore                  ; $89 RESTORE
>96da	1d 95					.word	CommandRUN                       ; $8a RUN
>96dc	19 91					.word	SpritesCtrl                      ; $8b SPRITES
>96de	68 97					.word	StopCommand                      ; $8c STOP
.96e0					VectorSet2:
>96e0	95 b4					.word	SyntaxError                      ; $80 !0:EOF
>96e2	95 b4					.word	SyntaxError                      ; $81 !1:SH1
>96e4	95 b4					.word	SyntaxError                      ; $82 !2:SH2
>96e6	54 b3					.word	Assemble_adc                     ; $83 ADC
>96e8	4c b3					.word	Assemble_and                     ; $84 AND
>96ea	68 b3					.word	Assemble_asl                     ; $85 ASL
>96ec	d2 b3					.word	Assemble_bcc                     ; $86 BCC
>96ee	d6 b3					.word	Assemble_bcs                     ; $87 BCS
>96f0	de b3					.word	Assemble_beq                     ; $88 BEQ
>96f2	95 b3					.word	Assemble_bit                     ; $89 BIT
>96f4	c6 b3					.word	Assemble_bmi                     ; $8a BMI
>96f6	da b3					.word	Assemble_bne                     ; $8b BNE
>96f8	c2 b3					.word	Assemble_bpl                     ; $8c BPL
>96fa	e2 b3					.word	Assemble_bra                     ; $8d BRA
>96fc	e6 b3					.word	Assemble_brk                     ; $8e BRK
>96fe	ca b3					.word	Assemble_bvc                     ; $8f BVC
>9700	ce b3					.word	Assemble_bvs                     ; $90 BVS
>9702	ee b3					.word	Assemble_clc                     ; $91 CLC
>9704	42 b4					.word	Assemble_cld                     ; $92 CLD
>9706	02 b4					.word	Assemble_cli                     ; $93 CLI
>9708	32 b4					.word	Assemble_clv                     ; $94 CLV
>970a	60 b3					.word	Assemble_cmp                     ; $95 CMP
>970c	a9 b3					.word	Assemble_cpx                     ; $96 CPX
>970e	a4 b3					.word	Assemble_cpy                     ; $97 CPY
>9710	86 b3					.word	Assemble_dec                     ; $98 DEC
>9712	3e b4					.word	Assemble_dex                     ; $99 DEX
>9714	1a b4					.word	Assemble_dey                     ; $9a DEY
>9716	50 b3					.word	Assemble_eor                     ; $9b EOR
>9718	8b b3					.word	Assemble_inc                     ; $9c INC
>971a	4e b4					.word	Assemble_inx                     ; $9d INX
>971c	3a b4					.word	Assemble_iny                     ; $9e INY
>971e	bd b3					.word	Assemble_jmp                     ; $9f JMP
>9720	b8 b3					.word	Assemble_jsr                     ; $a0 JSR
>9722	5c b3					.word	Assemble_lda                     ; $a1 LDA
>9724	81 b3					.word	Assemble_ldx                     ; $a2 LDX
>9726	9f b3					.word	Assemble_ldy                     ; $a3 LDY
>9728	72 b3					.word	Assemble_lsr                     ; $a4 LSR
>972a	52 b4					.word	Assemble_nop                     ; $a5 NOP
>972c	48 b3					.word	Assemble_ora                     ; $a6 ORA
>972e	fe b3					.word	Assemble_pha                     ; $a7 PHA
>9730	ea b3					.word	Assemble_php                     ; $a8 PHP
>9732	46 b4					.word	Assemble_phx                     ; $a9 PHX
>9734	06 b4					.word	Assemble_phy                     ; $aa PHY
>9736	0e b4					.word	Assemble_pla                     ; $ab PLA
>9738	f2 b3					.word	Assemble_plp                     ; $ac PLP
>973a	5a b4					.word	Assemble_plx                     ; $ad PLX
>973c	16 b4					.word	Assemble_ply                     ; $ae PLY
>973e	6d b3					.word	Assemble_rol                     ; $af ROL
>9740	77 b3					.word	Assemble_ror                     ; $b0 ROR
>9742	fa b3					.word	Assemble_rti                     ; $b1 RTI
>9744	0a b4					.word	Assemble_rts                     ; $b2 RTS
>9746	64 b3					.word	Assemble_sbc                     ; $b3 SBC
>9748	f6 b3					.word	Assemble_sec                     ; $b4 SEC
>974a	56 b4					.word	Assemble_sed                     ; $b5 SED
>974c	12 b4					.word	Assemble_sei                     ; $b6 SEI
>974e	58 b3					.word	Assemble_sta                     ; $b7 STA
>9750	4a b4					.word	Assemble_stp                     ; $b8 STP
>9752	7c b3					.word	Assemble_stx                     ; $b9 STX
>9754	9a b3					.word	Assemble_sty                     ; $ba STY
>9756	90 b3					.word	Assemble_stz                     ; $bb STZ
>9758	2e b4					.word	Assemble_tax                     ; $bc TAX
>975a	2a b4					.word	Assemble_tay                     ; $bd TAY
>975c	b3 b3					.word	Assemble_trb                     ; $be TRB
>975e	ae b3					.word	Assemble_tsb                     ; $bf TSB
>9760	36 b4					.word	Assemble_tsx                     ; $c0 TSX
>9762	1e b4					.word	Assemble_txa                     ; $c1 TXA
>9764	26 b4					.word	Assemble_txs                     ; $c2 TXS
>9766	22 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9768					StopCommand:
.9768	a9 08		lda #$08		lda	#8
.976a	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.976d					UnaryTimer:
.976d	fa		plx				plx
.976e	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.9771					TimerToStackX:
.9771	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; zero result
.9774	64 01		stz $01				stz 	1 							; access I/O
.9776	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9779	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.977c	ad 5a d6	lda $d65a			lda 	$D65A
.977f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9782	ad 5b d6	lda $d65b			lda 	$D65B
.9785	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9788	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9789					ListConvertLine:
.9789	9c 9d 04	stz $049d			stz 	tbOffset
.978c	9c aa 04	stz $04aa			stz 	tokenBuffer
.978f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9791	b1 30		lda ($30),y			lda 	(codePtr),y
.9793	aa		tax				tax
.9794	88		dey				dey
.9795	b1 30		lda ($30),y			lda 	(codePtr),y
.9797	20 03 b0	jsr $b003			jsr 	ConvertInt16
.979a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.979c	86 37		stx $37				stx 	zTemp0+1
.979e	a0 00		ldy #$00			ldy 	#0
.97a0					_LCCopyNumber:
.97a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a2	20 ce 98	jsr $98ce			jsr 	LCLWrite
.97a5	c8		iny				iny
.97a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a8	d0 f6		bne $97a0			bne 	_LCCopyNumber
.97aa	20 e7 99	jsr $99e7			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.97ad	48		pha				pha 								; save on stack
.97ae	10 0c		bpl $97bc			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.97b0	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.97b1	6d a6 04	adc $04a6			adc 	listIndent
.97b4	8d a6 04	sta $04a6			sta 	listIndent
.97b7	10 03		bpl $97bc			bpl 	_LCNoAdjust
.97b9	9c a6 04	stz $04a6			stz 	listIndent
.97bc					_LCNoAdjust:
.97bc	18		clc				clc		 							; work out actual indent.
.97bd	ad a6 04	lda $04a6			lda 	listIndent
.97c0	0a		asl a				asl 	a
.97c1	69 06		adc #$06			adc 	#6
.97c3	85 36		sta $36				sta 	zTemp0
.97c5					_LCPadOut:
.97c5	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.97c7	20 ce 98	jsr $98ce			jsr 	LCLWrite
.97ca	ad 9d 04	lda $049d			lda 	tbOffset
.97cd	c5 36		cmp $36				cmp 	zTemp0
.97cf	d0 f4		bne $97c5			bne 	_LCPadOut
.97d1	a0 03		ldy #$03			ldy 	#3 							; start position.
.97d3					_LCMainLoop:
.97d3	b1 30		lda ($30),y			lda 	(codePtr),y
.97d5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.97d7	f0 17		beq $97f0			beq 	_LCExit
.97d9	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.97db	90 1e		bcc $97fb			bcc 	_LCDoubles
.97dd	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.97df	90 2a		bcc $980b			bcc 	_LCShiftPunc
.97e1	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.97e3	90 35		bcc $981a			bcc 	_LCPunctuation
.97e5	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.97e7	90 3e		bcc $9827			bcc 	_LCIdentifiers
.97e9	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.97eb	90 5a		bcc $9847			bcc 	_LCTokens
.97ed	4c a2 98	jmp $98a2			jmp 	_LCData 					; 254-5 are data objects
.97f0					_LCExit:
.97f0	68		pla				pla 								; get old indent adjust
.97f1	30 07		bmi $97fa			bmi 	_LCExit2
.97f3	18		clc				clc 								; add to indent if +ve
.97f4	6d a6 04	adc $04a6			adc 	listIndent
.97f7	8d a6 04	sta $04a6			sta 	listIndent
.97fa					_LCExit2:
.97fa	60		rts				rts
.97fb					_LCDoubles:
.97fb	48		pha				pha
.97fc	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.97fd	29 02		and #$02			and 	#2
.97ff	09 3c		ora #$3c			ora 	#60 						; make < >
.9801	20 ce 98	jsr $98ce			jsr 	LCLWrite
.9804	68		pla				pla 								; restore, do lower bit
.9805	29 03		and #$03			and 	#3
.9807	09 3c		ora #$3c			ora 	#60
.9809	80 0f		bra $981a			bra		_LCPunctuation 				; print, increment, loop
.980b					_LCShiftPunc:
.980b	aa		tax				tax 								; save in X
.980c	29 07		and #$07			and 	#7 							; lower 3 bits
.980e	f0 02		beq $9812			beq 	_LCNoAdd
.9810	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9812					_LCNoAdd:
.9812	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9814	90 02		bcc $9818			bcc 	_LCNoAdd2
.9816	09 20		ora #$20			ora 	#32 						; adds $20
.9818					_LCNoAdd2:
.9818	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.981a					_LCPunctuation:
.981a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.981c	d0 03		bne $9821			bne 	_LCPContinue
.981e	20 dd 98	jsr $98dd			jsr 	LCDeleteLastSpace
.9821					_LCPContinue:
.9821	c8		iny				iny 								; consume character
.9822	20 ce 98	jsr $98ce			jsr 	LCLWrite 					; write it out.
.9825	80 ac		bra $97d3			bra 	_LCMainLoop 				; go round again.
.9827					_LCIdentifiers:
.9827	18		clc				clc 								; convert to physical address
.9828	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.982a	85 37		sta $37				sta 	zTemp0+1
.982c	c8		iny				iny
.982d	b1 30		lda ($30),y			lda 	(codePtr),y
.982f	85 36		sta $36				sta 	zTemp0
.9831	c8		iny				iny
.9832	5a		phy				phy 								; save position
.9833	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9835					_LCOutIdentifier:
.9835	c8		iny				iny
.9836	b1 36		lda ($36),y			lda 	(zTemp0),y
.9838	29 7f		and #$7f			and 	#$7F
.983a	20 1c 99	jsr $991c			jsr 	LCLLowerCase
.983d	20 ce 98	jsr $98ce			jsr 	LCLWrite
.9840	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9842	10 f1		bpl $9835			bpl 	_LCOutIdentifier
.9844	7a		ply				ply 								; restore position
.9845	80 8c		bra $97d3			bra 	_LCMainLoop
.9847					_LCTokens:
.9847	aa		tax				tax 								; token in X
.9848	a9 53		lda #$53			lda 	#((KeywordSet2) & $FF)
.984a	85 36		sta $36				sta 	0+zTemp0
.984c	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.984e	85 37		sta $37				sta 	1+zTemp0
.9850	e0 82		cpx #$82			cpx 	#$82
.9852	f0 16		beq $986a			beq 	_LCUseShift
.9854	a9 05		lda #$05			lda 	#((KeywordSet1) & $FF)
.9856	85 36		sta $36				sta 	0+zTemp0
.9858	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.985a	85 37		sta $37				sta 	1+zTemp0
.985c	e0 81		cpx #$81			cpx 	#$81
.985e	f0 0a		beq $986a			beq 	_LCUseShift
.9860	a9 20		lda #$20			lda 	#((KeywordSet0) & $FF)
.9862	85 36		sta $36				sta 	0+zTemp0
.9864	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.9866	85 37		sta $37				sta 	1+zTemp0
.9868	80 01		bra $986b			bra 	_LCNoShift
.986a					_LCUseShift:
.986a	c8		iny				iny
.986b					_LCNoShift:
.986b	20 f1 98	jsr $98f1			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.986e	b1 30		lda ($30),y			lda 	(codePtr),y
.9870	aa		tax				tax 								; into X
.9871					_LCFindText:
.9871	ca		dex				dex
.9872	10 0e		bpl $9882			bpl 	_LCFoundText 				; found text.
.9874	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9876	1a		inc a				inc 	a 							; one extra for size
.9877	38		sec				sec 								; one extra for checksum
.9878	65 36		adc $36				adc 	zTemp0 						; go to next token
.987a	85 36		sta $36				sta 	zTemp0
.987c	90 f3		bcc $9871			bcc 	_LCFindText
.987e	e6 37		inc $37				inc 	zTemp0+1
.9880	80 ef		bra $9871			bra 	_LCFindText
.9882					_LCFoundText:
.9882	5a		phy				phy 								; save List position
.9883	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9885	aa		tax				tax
.9886	a0 02		ldy #$02			ldy 	#2
.9888					_LCCopyToken:
.9888	b1 36		lda ($36),y			lda 	(zTemp0),y
.988a	20 1c 99	jsr $991c			jsr 	LCLLowerCase
.988d	20 ce 98	jsr $98ce			jsr 	LCLWrite
.9890	c8		iny				iny
.9891	ca		dex				dex
.9892	d0 f4		bne $9888			bne 	_LCCopyToken
.9894	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9896	f0 05		beq $989d			beq 	_LCNoSpace
.9898	a9 20		lda #$20			lda 	#' '
.989a	20 ce 98	jsr $98ce			jsr 	LCLWrite
.989d					_LCNoSpace:
.989d	7a		ply				ply 								; restore position.
.989e	c8		iny				iny 								; consume token
.989f	4c d3 97	jmp $97d3			jmp 	_LCMainLoop 				; and go around again.
.98a2					_LCData:
.98a2	48		pha				pha 								; save type $FE/$FF
.98a3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.98a5	c9 fe		cmp #$fe			cmp 	#$FE
.98a7	f0 02		beq $98ab			beq 	_LCHaveOpener
.98a9	a2 22		ldx #$22			ldx 	#'"'
.98ab					_LCHaveOpener:
.98ab	8a		txa				txa 								; output prefix (# or ")
.98ac	20 ce 98	jsr $98ce			jsr 	LCLWrite
.98af	c8		iny				iny 								; get count
.98b0	b1 30		lda ($30),y			lda 	(codePtr),y
.98b2	aa		tax				tax
.98b3	c8		iny				iny 								; point at first character
.98b4					_LCOutData:
.98b4	b1 30		lda ($30),y			lda 	(codePtr),y
.98b6	c9 00		cmp #$00			cmp 	#0
.98b8	f0 03		beq $98bd			beq 	_LCNoPrint
.98ba	20 ce 98	jsr $98ce			jsr 	LCLWrite
.98bd					_LCNoPrint:
.98bd	c8		iny				iny
.98be	ca		dex				dex
.98bf	d0 f3		bne $98b4			bne 	_LCOutData
.98c1	68		pla				pla 								; closing " required ?
.98c2	c9 ff		cmp #$ff			cmp 	#$FF
.98c4	d0 05		bne $98cb			bne 	_LCNoQuote
.98c6	a9 22		lda #$22			lda 	#'"'
.98c8	20 ce 98	jsr $98ce			jsr 	LCLWrite
.98cb					_LCNoQuote:
.98cb	4c d3 97	jmp $97d3			jmp 	_LCMainLoop
.98ce					LCLWrite:
.98ce	da		phx				phx
.98cf	ae 9d 04	ldx $049d			ldx 	tbOffset
.98d2	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.98d5	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.98d8	ee 9d 04	inc $049d			inc 	tbOffset
.98db	fa		plx				plx
.98dc	60		rts				rts
.98dd					LCDeleteLastSpace:
.98dd	48		pha				pha
.98de	da		phx				phx
.98df	ae 9d 04	ldx $049d			ldx 	tbOffset
.98e2	f0 0a		beq $98ee			beq 	_LCDLSExit
.98e4	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.98e7	c9 20		cmp #$20			cmp 	#' '
.98e9	d0 03		bne $98ee			bne 	_LCDLSExit
.98eb	ce 9d 04	dec $049d			dec 	tbOffset
.98ee					_LCDLSExit:
.98ee	fa		plx				plx
.98ef	68		pla				pla
.98f0	60		rts				rts
.98f1					LCCheckSpaceRequired:
.98f1	ae 9d 04	ldx $049d			ldx 	tbOffset
.98f4	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.98f7	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.98f9	f0 1b		beq $9916			beq 	_LCCSRSpace
.98fb	c9 29		cmp #$29			cmp 	#')'
.98fd	f0 17		beq $9916			beq 	_LCCSRSpace
.98ff	c9 23		cmp #$23			cmp 	#'#'
.9901	f0 13		beq $9916			beq 	_LCCSRSpace
.9903	20 1c 99	jsr $991c			jsr 	LCLLowerCase 				; saves a little effort
.9906	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9908	90 11		bcc $991b			bcc 	_LCCSRExit
.990a	c9 3a		cmp #$3a			cmp 	#"9"+1
.990c	90 08		bcc $9916			bcc 	_LCCSRSpace
.990e	c9 61		cmp #$61			cmp 	#"a"
.9910	90 09		bcc $991b			bcc 	_LCCSRExit
.9912	c9 7b		cmp #$7b			cmp 	#"z"+1
.9914	b0 05		bcs $991b			bcs 	_LCCSRExit
.9916					_LCCSRSpace:
.9916	a9 20		lda #$20			lda 	#' '
.9918	20 ce 98	jsr $98ce			jsr 	LCLWrite
.991b					_LCCSRExit:
.991b	60		rts				rts
.991c					LCLLowerCase:
.991c	c9 41		cmp #$41			cmp 	#"A"
.991e	90 06		bcc $9926			bcc 	_LCLLCOut
.9920	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9922	b0 02		bcs $9926			bcs 	_LCLLCOut
.9924	69 20		adc #$20			adc 	#$20
.9926					_LCLLCOut:
.9926	60		rts				rts
.9927					LCLUpperCase:
.9927	c9 61		cmp #$61			cmp 	#"a"
.9929	90 06		bcc $9931			bcc 	_LCLUCOut
.992b	c9 7b		cmp #$7b			cmp 	#"z"+1
.992d	b0 02		bcs $9931			bcs 	_LCLUCOut
.992f	e9 1f		sbc #$1f			sbc 	#$1F
.9931					_LCLUCOut:
.9931	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9932					ProcedureScan:
.9932	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9934	85 30		sta $30				sta 	codePtr
.9936	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9938	85 31		sta $31				sta 	codePtr+1
.993a					_PSLoop:
.993a	b2 30		lda ($30)			lda 	(codePtr)
.993c	f0 42		beq $9980			beq 	_PSExit
.993e	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9940	b1 30		lda ($30),y			lda 	(codePtr),y
.9942	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.9944	d0 2d		bne $9973			bne 	_PSNext
.9946	c8		iny				iny 								; get the address of the record to zTemp0 and
.9947	b1 30		lda ($30),y			lda 	(codePtr),y
.9949	29 c0		and #$c0			and 	#$C0
.994b	c9 40		cmp #$40			cmp 	#$40
.994d	d0 32		bne $9981			bne 	_PSSyntax
.994f	b1 30		lda ($30),y			lda 	(codePtr),y
.9951	18		clc				clc
.9952	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9954	85 37		sta $37				sta 	zTemp0+1
.9956	c8		iny				iny 								; LSB
.9957	b1 30		lda ($30),y			lda 	(codePtr),y
.9959	85 36		sta $36				sta 	zTemp0
.995b	c8		iny				iny 								; character after variable call.
.995c	98		tya				tya 								; save Y offset at +7
.995d	a0 07		ldy #$07			ldy 	#7
.995f	91 36		sta ($36),y			sta 	(zTemp0),y
.9961	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9963	a0 02		ldy #$02			ldy 	#2
.9965	91 36		sta ($36),y			sta 	(zTemp0),y
.9967	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9969					_PSCopy:
.9969	b5 30		lda $30,x			lda 	safePtr,x
.996b	c8		iny				iny
.996c	91 36		sta ($36),y			sta 	(zTemp0),y
.996e	e8		inx				inx
.996f	e0 04		cpx #$04			cpx 	#4
.9971	d0 f6		bne $9969			bne 	_PSCopy
.9973					_PSNext:
.9973	18		clc				clc
.9974	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9976	65 30		adc $30				adc 	codePtr
.9978	85 30		sta $30				sta 	codePtr
.997a	90 02		bcc $997e			bcc 	_CREExit
.997c	e6 31		inc $31				inc 	codePtr+1
.997e					_CREExit:
.997e	80 ba		bra $993a			bra 	_PSLoop
.9980					_PSExit:
.9980	60		rts				rts
.9981					_PSSyntax:
.9981	4c 95 b4	jmp $b495			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9984					ScanForward:
.9984	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9986	86 37		stx $37				stx 	zTemp0+1
.9988	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.998a					_ScanLoop:
.998a	b1 30		lda ($30),y			lda 	(codePtr),y
.998c	c8		iny				iny
.998d	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.998f	d0 0e		bne $999f			bne 	_ScanGoNext
.9991	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9993	f0 04		beq $9999			beq 	_ScanMatch
.9995	c5 37		cmp $37				cmp 	zTemp0+1
.9997	d0 06		bne $999f			bne 	_ScanGoNext
.9999					_ScanMatch:
.9999	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.999b	d0 01		bne $999e			bne 	_ScanNotEndEOL
.999d	88		dey				dey
.999e					_ScanNotEndEOL:
.999e	60		rts				rts
.999f					_ScanGoNext:
.999f	20 a4 99	jsr $99a4			jsr  	ScanForwardOne
.99a2	80 e6		bra $998a			bra 	_ScanLoop
.99a4					ScanForwardOne:
.99a4	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.99a6	90 3e		bcc $99e6			bcc 	_SFWExit
.99a8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.99aa	90 18		bcc $99c4			bcc 	_ScanSkipOne
.99ac	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.99ae	b0 2f		bcs $99df			bcs 	_ScanSkipData
.99b0	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.99b2	90 32		bcc $99e6			bcc 	_SFWExit 					; if not, ordinary keywords.
.99b4	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.99b6	b0 2e		bcs $99e6			bcs 	_SFWExit
.99b8	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.99ba	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.99bc	b0 28		bcs $99e6			bcs 	_SFWExit
.99be	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.99c0	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.99c2	80 22		bra $99e6			bra 	_SFWExit
.99c4					_ScanSkipOne:
.99c4	c8		iny				iny 								; consume the extra one.
.99c5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.99c7	d0 1d		bne $99e6			bne 	_SFWExit
.99c9	18		clc				clc
.99ca	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.99cc	65 30		adc $30				adc 	codePtr
.99ce	85 30		sta $30				sta 	codePtr
.99d0	90 02		bcc $99d4			bcc 	_CREExit
.99d2	e6 31		inc $31				inc 	codePtr+1
.99d4					_CREExit:
.99d4	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.99d6	b2 30		lda ($30)			lda 	(codePtr)
.99d8	d0 0c		bne $99e6			bne 	_SFWExit 					; if not zero, more to scan
.99da	a9 13		lda #$13		lda	#19
.99dc	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.99df					_ScanSkipData:
.99df	88		dey				dey 								; point at data token
.99e0	c8		iny				iny
.99e1	98		tya				tya
.99e2	38		sec				sec
.99e3	71 30		adc ($30),y			adc 	(codePtr),y
.99e5	a8		tay				tay
.99e6					_SFWExit:
.99e6	60		rts				rts
.99e7					ScanGetCurrentLineStep:
.99e7	64 38		stz $38				stz 	zTemp1
.99e9	a0 03		ldy #$03			ldy 	#3
.99eb					_SGCLSLoop:
.99eb	b1 30		lda ($30),y			lda 	(codePtr),y
.99ed	c8		iny				iny
.99ee	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.99f0	f0 05		beq $99f7			beq 	_SGCLSExit
.99f2	20 a4 99	jsr $99a4			jsr 	ScanForwardOne
.99f5	80 f4		bra $99eb			bra 	_SGCLSLoop
.99f7					_SGCLSExit:
.99f7	a5 38		lda $38				lda 	zTemp1
.99f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.99fa					Command_WHILE:
.99fa	5a		phy				phy 								; save position of the test
.99fb	a2 00		ldx #$00			ldx 	#0
.99fd	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; work out the number
.9a00	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; check if zero
.9a03	f0 0e		beq $9a13			beq 	_WHExitLoop 				; if so exit the loop
.9a05	98		tya				tya 								; position *after* test.
.9a06	7a		ply				ply 								; restore position before test, at WHILE
.9a07	88		dey				dey
.9a08	48		pha				pha 								; push after test on the stack
.9a09	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9a0b	20 18 a7	jsr $a718			jsr 	StackOpen
.9a0e	20 5c a7	jsr $a75c			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9a11	7a		ply				ply 								; restore the position *after* the test
.9a12	60		rts				rts
.9a13					_WHExitLoop:
.9a13	68		pla				pla 								; throw post loop position
.9a14	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9a16	aa		tax				tax
.9a17	20 84 99	jsr $9984			jsr 	ScanForward
.9a1a	60		rts				rts
.9a1b					Command_WEND:
.9a1b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9a1d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9a1f	20 44 a7	jsr $a744			jsr 	StackCheckFrame
.9a22	20 6d a7	jsr $a76d			jsr 	STKLoadCodePosition 		; loop back
.9a25	20 36 a7	jsr $a736			jsr 	StackClose		 			; erase the frame
.9a28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.aea7					CheckRightBracket:
.aea7	b1 30		lda ($30),y			lda 	(codePtr),y
.aea9	c8		iny				iny
.aeaa	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.aeac	d0 0f		bne $aebd			bne 	CNAFail
.aeae	60		rts				rts
.aeaf					CheckComma:
.aeaf	b1 30		lda ($30),y			lda 	(codePtr),y
.aeb1	c8		iny				iny
.aeb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.aeb4	d0 07		bne $aebd			bne 	CNAFail
.aeb6	60		rts				rts
.aeb7					CheckNextA:
.aeb7	d1 30		cmp ($30),y			cmp 	(codePtr),y
.aeb9	d0 02		bne $aebd			bne 	CNAFail
.aebb	c8		iny				iny 								; skip character
.aebc	60		rts				rts 								; and exit
.aebd					CNAFail:
.aebd	4c 95 b4	jmp $b495			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9a29					ErrorHandler:
.9a29	a8		tay				tay 								; find the error text
.9a2a	f0 49		beq $9a75			beq 	_EHEnd
.9a2c	a2 00		ldx #$00			ldx 	#0
.9a2e	a9 ae		lda #$ae			lda 	#((ErrorText) & $FF)
.9a30	85 36		sta $36				sta 	0+zTemp0
.9a32	a9 b4		lda #$b4			lda 	#((ErrorText) >> 8)
.9a34	85 37		sta $37				sta 	1+zTemp0
.9a36					_EHFind:
.9a36	88		dey				dey 								; found the error text ?
.9a37	f0 0e		beq $9a47			beq 	_EHFound
.9a39					_EHFindZero:
.9a39	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9a3b	e6 36		inc $36				inc 	zTemp0
.9a3d	d0 02		bne $9a41			bne 	_EHFNoCarry
.9a3f	e6 37		inc $37				inc 	zTemp0+1
.9a41					_EHFNoCarry:
.9a41	c9 00		cmp #$00			cmp 	#0
.9a43	d0 f4		bne $9a39			bne 	_EHFindZero
.9a45	80 ef		bra $9a36			bra 	_EHFind
.9a47					_EHFound:
.9a47	a5 36		lda $36				lda 	zTemp0 						; print message
.9a49	a6 37		ldx $37				ldx 	zTemp0+1
.9a4b	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.9a4e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9a50	b1 30		lda ($30),y			lda 	(codePtr),y
.9a52	d0 05		bne $9a59			bne 	_EHAtMsg
.9a54	c8		iny				iny
.9a55	b1 30		lda ($30),y			lda 	(codePtr),y
.9a57	f0 17		beq $9a70			beq 	_EHCREnd
.9a59					_EHAtMsg:
.9a59	a2 9a		ldx #$9a			ldx 	#_AtMsg >> 8 				; print " at "
.9a5b	a9 78		lda #$78			lda 	#_AtMsg & $FF
.9a5d	20 82 9a	jsr $9a82			jsr 	PrintStringXA
.9a60	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9a62	b1 30		lda ($30),y			lda 	(codePtr),y
.9a64	48		pha				pha
.9a65	c8		iny				iny
.9a66	b1 30		lda ($30),y			lda 	(codePtr),y
.9a68	aa		tax				tax
.9a69	68		pla				pla
.9a6a	20 03 b0	jsr $b003			jsr 	ConvertInt16 				; convert XA to string
.9a6d	20 82 9a	jsr $9a82			jsr 	PrintStringXA 				; and print it.
.9a70					_EHCREnd:
.9a70	a9 0d		lda #$0d			lda 	#13 						; new line
.9a72	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.9a75					_EHEnd:
.9a75	4c c9 8b	jmp $8bc9			jmp 	WarmStart
>9a78	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9a80	20 00
.9a82					PrintStringXA:
.9a82	5a		phy				phy
.9a83	86 37		stx $37				stx 	zTemp0+1
.9a85	85 36		sta $36				sta 	zTemp0
.9a87	a0 00		ldy #$00			ldy 	#0
.9a89					_PSXALoop:
.9a89	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a8b	f0 06		beq $9a93			beq 	_PSXAExit
.9a8d	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.9a90	c8		iny				iny
.9a91	80 f6		bra $9a89			bra 	_PSXALoop
.9a93					_PSXAExit:
.9a93	7a		ply				ply
.9a94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9a95					UnaryTrue:
.9a95	fa		plx				plx
.9a96					ReturnTrue:
.9a96	a9 01		lda #$01			lda 	#1  						; set to 1
.9a98	20 66 a6	jsr $a666			jsr 	NSMSetByte
.9a9b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9a9d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9aa0	60		rts				rts
.9aa1					UnaryFalse:
.9aa1	fa		plx				plx
.9aa2					ReturnFalse:
.9aa2	4c 64 a6	jmp $a664			jmp 	NSMSetZero 					; set it all to zero
.9aa5					BinaryCompareEqual:
.9aa5	fa		plx				plx
.9aa6	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9aa9	c9 00		cmp #$00			cmp 	#0
.9aab	f0 e9		beq $9a96			beq 	ReturnTrue
.9aad	80 f3		bra $9aa2			bra 	ReturnFalse
.9aaf					BinaryCompareLess:
.9aaf	fa		plx				plx
.9ab0	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9ab3	c9 ff		cmp #$ff			cmp 	#$FF
.9ab5	f0 df		beq $9a96			beq 	ReturnTrue
.9ab7	80 e9		bra $9aa2			bra 	ReturnFalse
.9ab9					BinaryCompareGreater:
.9ab9	fa		plx				plx
.9aba	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9abd	c9 01		cmp #$01			cmp 	#1
.9abf	f0 d5		beq $9a96			beq 	ReturnTrue
.9ac1	80 df		bra $9aa2			bra 	ReturnFalse
.9ac3					BinaryCompareNotEqual:
.9ac3	fa		plx				plx
.9ac4	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9ac7	c9 00		cmp #$00			cmp 	#0
.9ac9	d0 cb		bne $9a96			bne 	ReturnTrue
.9acb	80 d5		bra $9aa2			bra 	ReturnFalse
.9acd					BinaryCompareLessEqual:
.9acd	fa		plx				plx
.9ace	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9ad1	c9 01		cmp #$01			cmp 	#1
.9ad3	d0 c1		bne $9a96			bne 	ReturnTrue
.9ad5	80 cb		bra $9aa2			bra 	ReturnFalse
.9ad7					BinaryCompareGreaterEqual:
.9ad7	fa		plx				plx
.9ad8	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode
.9adb	c9 ff		cmp #$ff			cmp 	#$FF
.9add	d0 b7		bne $9a96			bne 	ReturnTrue
.9adf	80 c1		bra $9aa2			bra 	ReturnFalse
.9ae1					CompareBaseCode:
.9ae1	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; make both values if references.
.9ae4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9ae7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aea	29 10		and #$10			and 	#NSTString
.9aec	d0 40		bne $9b2e			bne 	_CBCString
.9aee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9af1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9af4	d0 3b		bne $9b31			bne 	_CBCFloat
.9af6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9af9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9afc	29 08		and #$08			and 	#NSTFloat
.9afe	d0 31		bne $9b31			bne 	_CBCFloat
.9b00	20 34 9b	jsr $9b34			jsr 	CompareFixMinusZero
.9b03	e8		inx				inx
.9b04	20 34 9b	jsr $9b34			jsr 	CompareFixMinusZero
.9b07	ca		dex				dex
.9b08	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9b0b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b0e	10 0b		bpl $9b1b			bpl 	_CDCSameSign
.9b10	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9b13	30 16		bmi $9b2b			bmi 	_CBCLess 					; return $FF
.9b15					_CBCGreater:
.9b15	a9 01		lda #$01			lda 	#1
.9b17	60		rts				rts
.9b18					_CBCEqual:
.9b18	a9 00		lda #$00			lda 	#0
.9b1a	60		rts				rts
.9b1b					_CDCSameSign:
.9b1b	20 44 9c	jsr $9c44			jsr 	SubTopTwoStack 				; unsigned subtract
.9b1e	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; or the mantissa together
.9b21	f0 f5		beq $9b18			beq 	_CBCEqual 					; -0 == 0
.9b23	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9b26	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9b29	10 ea		bpl $9b15			bpl 	_CBCGreater
.9b2b					_CBCLess:
.9b2b	a9 ff		lda #$ff			lda 	#$FF
.9b2d	60		rts				rts
.9b2e					_CBCString:
.9b2e	4c 9a 9b	jmp $9b9a			jmp 	CompareStrings
.9b31					_CBCFloat:
.9b31	4c 07 b1	jmp $b107			jmp 	CompareFloat
.9b34					CompareFixMinusZero:
.9b34	20 94 a6	jsr $a694			jsr 	NSMIsZero
.9b37	d0 03		bne $9b3c			bne 	_CFXMZNotZero
.9b39	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9b3c					_CFXMZNotZero:
.9b3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9b3d					StringConcat:
.9b3d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9b40	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b43	29 18		and #$18			and 	#NSBTypeMask
.9b45	c9 10		cmp #$10			cmp 	#NSTString
.9b47	d0 4e		bne $9b97			bne		_SCType
.9b49	64 38		stz $38				stz 	zTemp1 						; counting total length
.9b4b	e8		inx				inx
.9b4c	20 6a 9b	jsr $9b6a			jsr 	_SCSetupZ0 					; setup for second
.9b4f	20 75 9b	jsr $9b75			jsr 	_SCLengthZ0 				; length for second
.9b52	ca		dex				dex
.9b53	20 6a 9b	jsr $9b6a			jsr 	_SCSetupZ0 					; setup for first
.9b56	20 75 9b	jsr $9b75			jsr 	_SCLengthZ0 				; length for first
.9b59	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9b5b	20 17 b8	jsr $b817			jsr 	StringTempAllocate
.9b5e	20 88 9b	jsr $9b88			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9b61	e8		inx				inx
.9b62	20 6a 9b	jsr $9b6a			jsr 	_SCSetupZ0 					; copy second out
.9b65	20 88 9b	jsr $9b88			jsr 	_SCCopy
.9b68	ca		dex				dex
.9b69	60		rts				rts
.9b6a					_SCSetupZ0:
.9b6a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b6d	85 36		sta $36				sta 	zTemp0
.9b6f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b72	85 37		sta $37				sta 	zTemp0+1
.9b74	60		rts				rts
.9b75					_SCLengthZ0:
.9b75	5a		phy				phy
.9b76	a0 00		ldy #$00			ldy 	#0
.9b78					_SCLenLoop:
.9b78	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b7a	f0 0a		beq $9b86			beq 	_SCLExit
.9b7c	c8		iny				iny
.9b7d	e6 38		inc $38				inc 	zTemp1
.9b7f	10 f7		bpl $9b78			bpl		_SCLenLoop
.9b81	a9 09		lda #$09		lda	#9
.9b83	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.9b86					_SCLExit:
.9b86	7a		ply				ply
.9b87	60		rts				rts
.9b88					_SCCopy:
.9b88	5a		phy				phy
.9b89	a0 00		ldy #$00			ldy 	#0
.9b8b					_SCCopyLoop:
.9b8b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b8d	f0 06		beq $9b95			beq 	_SCCExit
.9b8f	20 55 b8	jsr $b855			jsr 	StringTempWrite
.9b92	c8		iny				iny
.9b93	80 f6		bra $9b8b			bra 	_SCCopyLoop
.9b95					_SCCExit:
.9b95	7a		ply				ply
.9b96	60		rts				rts
.9b97					_SCType:
.9b97	4c 9f b4	jmp $b49f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.aec0					IntegerDivide:
.aec0	fa		plx				plx
.aec1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aec4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aec7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aec8	0a		asl a				asl 	a
.aec9	10 05		bpl $aed0			bpl 	_NotRef
.aecb	48		pha				pha
.aecc	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aecf	68		pla				pla
.aed0					_NotRef:
.aed0	0a		asl a				asl 	a
.aed1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aed3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aed6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aed9	f0 03		beq $aede			beq 	_IntegerCode 				; if clear, then we have two integers
.aedb	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.aede					_IntegerCode:
.aede	20 00 af	jsr $af00			jsr 	CheckDivideZero 			; do div zero check
.aee1	20 38 af	jsr $af38			jsr 	Int32Divide 				; do the division
.aee4	20 f5 af	jsr $aff5			jsr 	CalculateSign 				; calculate result sign
.aee7					NSMCopyPlusTwoToZero:
.aee7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.aeea	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aeed	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.aef0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aef3	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.aef6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aef9	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.aefc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aeff	60		rts				rts
.af00					CheckDivideZero:
.af00	e8		inx				inx
.af01	20 94 a6	jsr $a694			jsr 	NSMIsZero
.af04	f0 02		beq $af08			beq 	_CDVError
.af06	ca		dex				dex
.af07	60		rts				rts
.af08					_CDVError:
.af08	a9 03		lda #$03		lda	#3
.af0a	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.af0d					IntegerModulus:
.af0d	fa		plx				plx
.af0e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af11	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af14	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af15	0a		asl a				asl 	a
.af16	10 05		bpl $af1d			bpl 	_NotRef
.af18	48		pha				pha
.af19	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af1c	68		pla				pla
.af1d					_NotRef:
.af1d	0a		asl a				asl 	a
.af1e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af20	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af23	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af26	f0 03		beq $af2b			beq 	_IntegerCode 				; if clear, then we have two integers
.af28	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.af2b					_IntegerCode:
.af2b					IntegerModulusNoCheck:
.af2b	20 00 af	jsr $af00			jsr 	CheckDivideZero 			; do div zero check
.af2e	20 38 af	jsr $af38			jsr 	Int32Divide 				; do the division
.af31	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.af34	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.af37	60		rts				rts
.af38					Int32Divide:
.af38	48		pha				pha 								; save AXY
.af39	5a		phy				phy
.af3a	20 3b a6	jsr $a63b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af3d	20 60 a6	jsr $a660			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.af40	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.af42					_I32DivideLoop:
.af42	e8		inx				inx
.af43	e8		inx				inx
.af44	20 79 a6	jsr $a679			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.af47	ca		dex				dex
.af48	ca		dex				dex
.af49	20 7a a6	jsr $a67a			jsr 	NSMRotateLeft
.af4c	20 78 af	jsr $af78			jsr 	DivideCheckSubtract 		; check if subtract possible
.af4f	90 03		bcc $af54			bcc 	_I32DivideNoCarryIn
.af51	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.af54					_I32DivideNoCarryIn:
.af54	88		dey				dey 								; loop round till division completed.
.af55	d0 eb		bne $af42			bne 	_I32DivideLoop
.af57	7a		ply				ply 								; restore AXY and exit
.af58	68		pla				pla
.af59	60		rts				rts
.af5a					Int32ShiftDivide:
.af5a	48		pha				pha 								; save AY
.af5b	5a		phy				phy
.af5c	e8		inx				inx 								; clear S[X+2]
.af5d	e8		inx				inx
.af5e	20 64 a6	jsr $a664			jsr 	NSMSetZero
.af61	ca		dex				dex
.af62	ca		dex				dex
.af63	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.af65					_I32SDLoop:
.af65	20 78 af	jsr $af78			jsr 	DivideCheckSubtract 		; check if subtract possible
.af68	e8		inx				inx
.af69	e8		inx				inx
.af6a	20 7a a6	jsr $a67a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.af6d	ca		dex				dex
.af6e	ca		dex				dex
.af6f	20 7a a6	jsr $a67a			jsr 	NSMRotateLeft
.af72	88		dey				dey 	 							; do 31 times
.af73	d0 f0		bne $af65			bne 	_I32SDLoop
.af75	7a		ply				ply 								; restore AY and exit
.af76	68		pla				pla
.af77	60		rts				rts
.af78					DivideCheckSubtract:
.af78	20 44 9c	jsr $9c44			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.af7b	b0 04		bcs $af81			bcs 	_DCSExit 					; if carry set, then could do, exit
.af7d	20 1e 9c	jsr $9c1e			jsr 	AddTopTwoStack 				; add it back in
.af80	18		clc				clc 								; and return False
.af81					_DCSExit:
.af81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.af82					MulInteger:
.af82	fa		plx				plx
.af83	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af86	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af89	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af8a	0a		asl a				asl 	a
.af8b	10 05		bpl $af92			bpl 	_NotRef
.af8d	48		pha				pha
.af8e	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af91	68		pla				pla
.af92					_NotRef:
.af92	0a		asl a				asl 	a 							; put MSB of type into A:7
.af93	30 0b		bmi $afa0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.af95	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af98	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af9b	f0 06		beq $afa3			beq 	_IntegerCode 				; if clear, then we have two integers
.af9d	4c de b1	jmp $b1de			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.afa0					_StringData:
.afa0	4c a9 b4	jmp $b4a9			jmp 	NotDoneError							; at least one string - don't know both are strings.
.afa3					_IntegerCode:
.afa3	20 b0 af	jsr $afb0			jsr 	MultiplyShort
.afa6	c9 00		cmp #$00			cmp 	#0
.afa8	f0 05		beq $afaf			beq 	_MIExit
.afaa	a9 04		lda #$04		lda	#4
.afac	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.afaf					_MIExit:
.afaf	60		rts				rts
.afb0					MultiplyShort:
.afb0	5a		phy				phy 								; save Y
.afb1	20 3b a6	jsr $a63b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afb4	20 60 a6	jsr $a660			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.afb7	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.afb9					_I32MLoop:
.afb9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.afbc	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.afbf	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.afc2	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.afc5	f0 28		beq $afef			beq 	_I32MExit 					; exit if zero
.afc7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.afca	29 01		and #$01			and 	#1
.afcc	f0 0e		beq $afdc			beq 	_I32MNoAdd
.afce	20 1e 9c	jsr $9c1e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.afd1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.afd4	10 06		bpl $afdc			bpl 	_I32MNoAdd
.afd6					_I32ShiftRight:
.afd6	20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift S[X] right
.afd9	c8		iny				iny 								; increment shift count
.afda	80 0a		bra $afe6			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.afdc					_I32MNoAdd:
.afdc	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.afdf	70 f5		bvs $afd6			bvs 	_I32ShiftRight 				; instead.
.afe1	e8		inx				inx
.afe2	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.afe5	ca		dex				dex
.afe6					_I32MShiftUpper:
.afe6	e8		inx				inx 								; shift S[X+2] right
.afe7	e8		inx				inx
.afe8	20 87 a6	jsr $a687			jsr 	NSMShiftRight
.afeb	ca		dex				dex
.afec	ca		dex				dex
.afed	80 ca		bra $afb9			bra 	_I32MLoop 					; try again.
.afef					_I32MExit:
.afef	20 f5 af	jsr $aff5			jsr 	CalculateSign
.aff2	98		tya				tya 								; shift in A
.aff3	7a		ply				ply 								; restore Y and exit
.aff4	60		rts				rts
.aff5					CalculateSign:
.aff5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aff8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.affb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.affe	0a		asl a				asl 	a 							; shift bit 7 into carry
.afff	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b002	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b9a					CompareStrings:
.9b9a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9b9d	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9ba0	29 10		and #$10			and 	#NSBIsString
.9ba2	f0 2c		beq $9bd0			beq 	_CSTypeError
.9ba4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9ba7	85 36		sta $36				sta 	zTemp0
.9ba9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bac	85 37		sta $37				sta 	zTemp0+1
.9bae	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9bb1	85 38		sta $38				sta 	zTemp1
.9bb3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9bb6	85 39		sta $39				sta 	zTemp1+1
.9bb8	5a		phy				phy 								; save Y so we can access strings
.9bb9	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9bbb					_CSLoop:
.9bbb	c8		iny				iny
.9bbc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9bbe	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9bc0	d0 06		bne $9bc8			bne 	_CSDifferent
.9bc2	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9bc4	d0 f5		bne $9bbb			bne 	_CSLoop 					; still comparing
.9bc6					_CSExit:
.9bc6	7a		ply				ply 								; reached end, return zero in A from EOS
.9bc7	60		rts				rts
.9bc8					_CSDifferent:
.9bc8	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9bca	90 fa		bcc $9bc6			bcc		_CSExit
.9bcc	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9bce	80 f6		bra $9bc6			bra 	_CSExit
.9bd0					_CSTypeError:
.9bd0	4c 9f b4	jmp $b49f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9bd3					ShiftLeft:
.9bd3	38		sec				sec
.9bd4	80 01		bra $9bd7			bra 	ShiftMain
.9bd6					ShiftRight:
.9bd6	18		clc				clc
.9bd7					ShiftMain:
.9bd7	fa		plx				plx 								; restore X
.9bd8	08		php				php 								; save direction
.9bd9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bdc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bdf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be0	0a		asl a				asl 	a
.9be1	10 05		bpl $9be8			bpl 	_NotRef
.9be3	48		pha				pha
.9be4	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9be7	68		pla				pla
.9be8					_NotRef:
.9be8	0a		asl a				asl 	a
.9be9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9beb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bf1	f0 03		beq $9bf6			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf3	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9bf6					_IntegerCode:
.9bf6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9bf9	29 e0		and #$e0			and 	#$E0
.9bfb	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9bfe	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9c01	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9c04	d0 13		bne $9c19			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9c06					_SMLoop:
.9c06	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9c09	30 11		bmi $9c1c			bmi 	_SMExit 					; exit if done.
.9c0b	28		plp				plp 								; restore direcition setting
.9c0c	08		php				php
.9c0d	90 05		bcc $9c14			bcc 	_SMRight
.9c0f	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; shift left if CS
.9c12	80 f2		bra $9c06			bra 	_SMLoop
.9c14					_SMRight:
.9c14	20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift right if CC
.9c17	80 ed		bra $9c06			bra 	_SMLoop
.9c19					_SMExit0:
.9c19	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; return zero.
.9c1c					_SMExit:
.9c1c	28		plp				plp 								; throw direction
.9c1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9c1e					AddTopTwoStack:
.9c1e	18		clc				clc
.9c1f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c22	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9c25	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c28	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c2b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9c2e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c31	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c34	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9c37	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c3a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c3d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9c40	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c43	60		rts				rts
.9c44					SubTopTwoStack:
.9c44	38		sec				sec
.9c45	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c48	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9c4b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c4e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c51	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9c54	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c57	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c5a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9c5d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c60	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c63	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9c66	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c69	60		rts				rts
.9c6a					AddInteger:
.9c6a	fa		plx				plx
.9c6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c6e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c71	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c72	0a		asl a				asl 	a
.9c73	10 05		bpl $9c7a			bpl 	_NotRef
.9c75	48		pha				pha
.9c76	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c79	68		pla				pla
.9c7a					_NotRef:
.9c7a	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c7b	30 0b		bmi $9c88			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c7d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c80	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c83	f0 06		beq $9c8b			beq 	_IntegerCode 				; if clear, then we have two integers
.9c85	4c 5e b0	jmp $b05e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9c88					_StringData:
.9c88	4c 3d 9b	jmp $9b3d			jmp 	StringConcat							; at least one string - don't know both are strings.
.9c8b					_IntegerCode:
.9c8b					AddCode:
.9c8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9c8e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9c91	10 8b		bpl $9c1e			bpl 	AddTopTwoStack
.9c93	20 44 9c	jsr $9c44			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c96	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c99	10 09		bpl $9ca4			bpl 	_AddExit
.9c9b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c9e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ca1	20 19 a6	jsr $a619			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9ca4					_AddExit:
.9ca4	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; check for -0
.9ca7	d0 03		bne $9cac			bne 	_AddNonZero
.9ca9	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9cac					_AddNonZero:
.9cac	60		rts				rts
.9cad					SubInteger:
.9cad	fa		plx				plx
.9cae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cb1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cb4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cb5	0a		asl a				asl 	a
.9cb6	10 05		bpl $9cbd			bpl 	_NotRef
.9cb8	48		pha				pha
.9cb9	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cbc	68		pla				pla
.9cbd					_NotRef:
.9cbd	0a		asl a				asl 	a 							; put MSB of type into A:7
.9cbe	30 0b		bmi $9ccb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9cc0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cc3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cc6	f0 06		beq $9cce			beq 	_IntegerCode 				; if clear, then we have two integers
.9cc8	4c 63 b0	jmp $b063			jmp 	FloatingPointSub 							; otherwise at least one float.
.9ccb					_StringData:
.9ccb	4c a9 b4	jmp $b4a9			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9cce					_IntegerCode:
.9cce	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9cd1	49 80		eor #$80			eor 	#$80
.9cd3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9cd6	80 b3		bra $9c8b			bra 	AddCode 					; and do the same code as add.
.9cd8					AndInteger:
.9cd8	fa		plx				plx
.9cd9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cdc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cdf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ce0	0a		asl a				asl 	a
.9ce1	10 05		bpl $9ce8			bpl 	_NotRef
.9ce3	48		pha				pha
.9ce4	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ce7	68		pla				pla
.9ce8					_NotRef:
.9ce8	0a		asl a				asl 	a
.9ce9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ceb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cf1	f0 03		beq $9cf6			beq 	_IntegerCode 				; if clear, then we have two integers
.9cf3	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9cf6					_IntegerCode:
.9cf6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cf9	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9cfc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cff	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d02	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9d05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d08	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d0b	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9d0e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d11	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d14	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9d17	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d1a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d1d	60		rts				rts
.9d1e					OraInteger:
.9d1e	fa		plx				plx
.9d1f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d22	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d25	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d26	0a		asl a				asl 	a
.9d27	10 05		bpl $9d2e			bpl 	_NotRef
.9d29	48		pha				pha
.9d2a	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d2d	68		pla				pla
.9d2e					_NotRef:
.9d2e	0a		asl a				asl 	a
.9d2f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d31	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d34	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d37	f0 03		beq $9d3c			beq 	_IntegerCode 				; if clear, then we have two integers
.9d39	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9d3c					_IntegerCode:
.9d3c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d3f	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9d42	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d45	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d48	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9d4b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d4e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d51	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9d54	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d57	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d5a	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9d5d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d60	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d63	60		rts				rts
.9d64					EorInteger:
.9d64	fa		plx				plx
.9d65	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d68	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d6b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d6c	0a		asl a				asl 	a
.9d6d	10 05		bpl $9d74			bpl 	_NotRef
.9d6f	48		pha				pha
.9d70	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d73	68		pla				pla
.9d74					_NotRef:
.9d74	0a		asl a				asl 	a
.9d75	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d77	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d7a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d7d	f0 03		beq $9d82			beq 	_IntegerCode 				; if clear, then we have two integers
.9d7f	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9d82					_IntegerCode:
.9d82	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d85	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9d88	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d8b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d8e	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9d91	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d94	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d97	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9d9a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d9d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9da0	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9da3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9da6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9da9	60		rts				rts
.9daa					WordIndirect:
.9daa	fa		plx				plx
.9dab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dae	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9db1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9db2	0a		asl a				asl 	a
.9db3	10 05		bpl $9dba			bpl 	_NotRef
.9db5	48		pha				pha
.9db6	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9db9	68		pla				pla
.9dba					_NotRef:
.9dba	0a		asl a				asl 	a
.9dbb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dbd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dc0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9dc3	f0 03		beq $9dc8			beq 	_IntegerCode 				; if clear, then we have two integers
.9dc5	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9dc8					_IntegerCode:
.9dc8	20 8b 9c	jsr $9c8b			jsr 	AddCode 					; add the two values
.9dcb	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9dcd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dd0	60		rts				rts
.9dd1					ByteIndirect:
.9dd1	fa		plx				plx
.9dd2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dd5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dd8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dd9	0a		asl a				asl 	a
.9dda	10 05		bpl $9de1			bpl 	_NotRef
.9ddc	48		pha				pha
.9ddd	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9de0	68		pla				pla
.9de1					_NotRef:
.9de1	0a		asl a				asl 	a
.9de2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9de4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9de7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9dea	f0 03		beq $9def			beq 	_IntegerCode 				; if clear, then we have two integers
.9dec	4c 9f b4	jmp $b49f			jmp 	TypeError 					; anything else, type mismatch.
.9def					_IntegerCode:
.9def	20 8b 9c	jsr $9c8b			jsr 	AddCode 					; add the two values
.9df2	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9df4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9df7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b003					ConvertInt16:
.b003	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b006	8e 10 04	stx $0410			stx 	NSMantissa1
.b009	9c 18 04	stz $0418			stz 	NSMantissa2
.b00c	9c 20 04	stz $0420			stz 	NSMantissa3
.b00f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b012	a2 00		ldx #$00			ldx 	#0 							; stack level
.b014	a9 0a		lda #$0a			lda 	#10 						; base
.b016	80 00		bra $b018			bra 	ConvertInt32
.b018					ConvertInt32:
.b018	5a		phy				phy
.b019	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b01b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b01e	10 08		bpl $b028			bpl 	_CI32NotNeg
.b020	48		pha				pha
.b021	a9 2d		lda #$2d			lda 	#'-'
.b023	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b026	c8		iny				iny
.b027	68		pla				pla
.b028					_CI32NotNeg:
.b028	20 36 b0	jsr $b036			jsr 	_CI32DivideConvert 			; recursive conversion
.b02b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b02d	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b030	7a		ply				ply
.b031	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b033	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b035	60		rts				rts
.b036					_CI32DivideConvert:
.b036	e8		inx				inx 								; write to next slot up
.b037	20 66 a6	jsr $a666			jsr 	NSMSetByte
.b03a	ca		dex				dex
.b03b	20 38 af	jsr $af38			jsr 	Int32Divide 				; divide
.b03e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b041	48		pha				pha
.b042	20 e7 ae	jsr $aee7			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b045	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; is it zero ?
.b048	f0 06		beq $b050			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b04a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b04d	20 36 b0	jsr $b036			jsr 	_CI32DivideConvert 			; and recusrively call.
.b050					_CI32NoRecurse:
.b050	68		pla				pla 								; remainder
.b051	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b053	90 02		bcc $b057			bcc 	_CI32NotHex
.b055	69 26		adc #$26			adc 	#6+32
.b057					_CI32NotHex:
.b057	69 30		adc #$30			adc 	#48
.b059	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b05c	c8		iny				iny
.b05d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9df8					PrecedenceLevel:
>9df8	04					.byte	 4	; $00 <<
>9df9	02					.byte	 2	; $01 <=
>9dfa	02					.byte	 2	; $02 <>
>9dfb	00					.byte	 0	; $03 !!3
>9dfc	00					.byte	 0	; $04 ><
>9dfd	02					.byte	 2	; $05 >=
>9dfe	04					.byte	 4	; $06 >>
>9dff	00					.byte	 0	; $07 !!7
>9e00	00					.byte	 0	; $08 !!8
>9e01	00					.byte	 0	; $09 !!9
>9e02	00					.byte	 0	; $0a !!10
>9e03	00					.byte	 0	; $0b !!11
>9e04	00					.byte	 0	; $0c !!12
>9e05	00					.byte	 0	; $0d !!13
>9e06	00					.byte	 0	; $0e !!14
>9e07	00					.byte	 0	; $0f !!15
>9e08	00					.byte	 0	; $10 @
>9e09	00					.byte	 0	; $11 !!17
>9e0a	00					.byte	 0	; $12 !!18
>9e0b	00					.byte	 0	; $13 [
>9e0c	04					.byte	 4	; $14 \
>9e0d	00					.byte	 0	; $15 ]
>9e0e	01					.byte	 1	; $16 ^
>9e0f	00					.byte	 0	; $17 _
>9e10	00					.byte	 0	; $18 `
>9e11	00					.byte	 0	; $19 !!25
>9e12	00					.byte	 0	; $1a !!26
>9e13	00					.byte	 0	; $1b {
>9e14	01					.byte	 1	; $1c |
>9e15	00					.byte	 0	; $1d }
>9e16	00					.byte	 0	; $1e ~
>9e17	00					.byte	 0	; $1f [7m<7F>[m
>9e18	00					.byte	 0	; $20
>9e19	05					.byte	 5	; $21 !
>9e1a	00					.byte	 0	; $22 "
>9e1b	00					.byte	 0	; $23 #
>9e1c	05					.byte	 5	; $24 $
>9e1d	04					.byte	 4	; $25 %
>9e1e	01					.byte	 1	; $26 &
>9e1f	00					.byte	 0	; $27 '
>9e20	00					.byte	 0	; $28 (
>9e21	00					.byte	 0	; $29 )
>9e22	04					.byte	 4	; $2a *
>9e23	03					.byte	 3	; $2b +
>9e24	00					.byte	 0	; $2c ,
>9e25	03					.byte	 3	; $2d -
>9e26	00					.byte	 0	; $2e .
>9e27	04					.byte	 4	; $2f /
>9e28	00					.byte	 0	; $30 0
>9e29	00					.byte	 0	; $31 1
>9e2a	00					.byte	 0	; $32 2
>9e2b	00					.byte	 0	; $33 3
>9e2c	00					.byte	 0	; $34 4
>9e2d	00					.byte	 0	; $35 5
>9e2e	00					.byte	 0	; $36 6
>9e2f	00					.byte	 0	; $37 7
>9e30	00					.byte	 0	; $38 8
>9e31	00					.byte	 0	; $39 9
>9e32	00					.byte	 0	; $3a :
>9e33	00					.byte	 0	; $3b ;
>9e34	02					.byte	 2	; $3c <
>9e35	02					.byte	 2	; $3d =
>9e36	02					.byte	 2	; $3e >
>9e37	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9e38					EvaluateExpressionAt0:
.9e38	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9e3a					EvaluateExpression:
.9e3a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9e3c					EvaluateExpressionAtPrecedence:
.9e3c	48		pha				pha 								; save precedence level
.9e3d	20 0b a1	jsr $a10b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9e40	68		pla				pla 								; restore precedence level.
.9e41					_EXPRLoop:
.9e41	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9e43	b1 30		lda ($30),y			lda 	(codePtr),y
.9e45	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9e47	b0 25		bcs $9e6e			bcs 	_EXPRExit
.9e49	da		phx				phx 								; read the operator precedence
.9e4a	aa		tax				tax
.9e4b	bd f8 9d	lda $9df8,x			lda 	PrecedenceLevel,x
.9e4e	fa		plx				plx
.9e4f	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9e51	f0 1b		beq $9e6e			beq 	_EXPRExit
.9e53	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9e55	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9e57	c5 37		cmp $37				cmp 	zTemp0+1
.9e59	b0 13		bcs $9e6e			bcs		_EXPRExit 					; if current >= operator exit
.9e5b	48		pha				pha 								; save current precedence.
.9e5c	b1 30		lda ($30),y			lda 	(codePtr),y
.9e5e	c8		iny				iny
.9e5f	48		pha				pha
.9e60	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9e62	e8		inx				inx 								; work out the right hand side.
.9e63	20 3c 9e	jsr $9e3c			jsr 	EvaluateExpressionAtPrecedence
.9e66	ca		dex				dex
.9e67	68		pla				pla 								; get operator, call the code.
.9e68	20 71 9e	jsr $9e71			jsr 	_EXPRCaller
.9e6b	68		pla				pla 								; restore precedence level
.9e6c	80 d3		bra $9e41			bra 	_EXPRLoop 					; and go round.
.9e6e					_EXPRExit:
.9e6e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9e70	60		rts				rts
.9e71					_EXPRCaller:
.9e71	da		phx				phx 								; save on stack, first thing is to restore it
.9e72	0a		asl a				asl 	a 							; double so can use vectors into X
.9e73	aa		tax				tax
.9e74	7c ae 95	jmp ($95ae,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b05e					FloatingPointAdd:
.b05e	20 07 b2	jsr $b207			jsr 	FloatPrepare 				; prepare for floats
.b061	80 0b		bra $b06e			bra 	FloatAdd
.b063					FloatingPointSub:
.b063	20 07 b2	jsr $b207			jsr 	FloatPrepare 				; prepare for floats
.b066					FloatSubtract:
.b066	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b069	49 80		eor #$80			eor 	#$80
.b06b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b06e					FloatAdd:
.b06e	48		pha				pha
.b06f	5a		phy				phy
.b070	20 18 b2	jsr $b218			jsr 	NSNormalise 				; normalise S[X]
.b073	f0 5c		beq $b0d1			beq 	_FAReturn1
.b075	e8		inx				inx 								; normalise S[X+1]
.b076	20 18 b2	jsr $b218			jsr 	NSNormalise
.b079	ca		dex				dex
.b07a	c9 00		cmp #$00			cmp 	#0
.b07c	f0 77		beq $b0f5			beq 	_FAExit 					; if so, just return A
.b07e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b081	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b084	f0 1b		beq $b0a1			beq 	_FAExponentsEqual
.b086	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b089	a8		tay				tay
.b08a	38		sec				sec 								; do a signed comparison of the exponents.
.b08b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b08e	50 02		bvc $b092			bvc 	_FANoSignedChange
.b090	49 80		eor #$80			eor 	#$80
.b092					_FANoSignedChange:
.b092	29 80		and #$80			and 	#$80
.b094	10 03		bpl $b099			bpl 	_FAHaveMax
.b096	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b099					_FAHaveMax:
.b099	20 f8 b0	jsr $b0f8			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b09c	e8		inx				inx
.b09d	20 f8 b0	jsr $b0f8			jsr 	_FAShiftToExponent
.b0a0	ca		dex				dex
.b0a1					_FAExponentsEqual:
.b0a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b0a4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b0a7	30 10		bmi $b0b9			bmi 	_FADifferentSigns
.b0a9	20 1e 9c	jsr $9c1e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b0ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b0af	10 44		bpl $b0f5			bpl 	_FAExit 					; if no, we are done.
.b0b1	20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b0b4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b0b7	80 3c		bra $b0f5			bra 	_FAExit
.b0b9					_FADifferentSigns:
.b0b9	20 44 9c	jsr $9c44			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b0bc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b0bf	10 06		bpl $b0c7			bpl 	_FACheckZero 				; if no, check for -0
.b0c1	20 10 a6	jsr $a610			jsr 	NSMNegate 					; netate result
.b0c4	20 19 a6	jsr $a619			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b0c7					_FACheckZero:
.b0c7	20 94 a6	jsr $a694			jsr 	NSMIsZero	 				; check for -0
.b0ca	d0 29		bne $b0f5			bne 	_FAExit
.b0cc	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b0cf	80 24		bra $b0f5			bra 	_FAExit
.b0d1					_FAReturn1:
.b0d1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b0d4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b0d7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b0da	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0dd	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b0e0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b0e3	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b0e6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b0e9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b0ec	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0ef	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b0f2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0f5					_FAExit:
.b0f5	7a		ply				ply
.b0f6	68		pla				pla
.b0f7	60		rts				rts
.b0f8					_FAShiftToExponent:
.b0f8					_FAShiftToExponent2:
.b0f8	98		tya				tya 								; compare Y to exponent
.b0f9	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b0fc	f0 08		beq $b106			beq 	_FASEExit 					; exit if so.
.b0fe	20 87 a6	jsr $a687			jsr 	NSMShiftRight	 			; shift the mantissa right
.b101	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b104	80 f2		bra $b0f8			bra 	_FAShiftToExponent2
.b106					_FASEExit:
.b106	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b107					CompareFloat:
.b107	20 66 b0	jsr $b066			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b10a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b10d	29 f8		and #$f8			and 	#$F8
.b10f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b112	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b115	f0 09		beq $b120			beq 	_FCExit 					; zero, so approximately identical
.b117	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b119	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b11c	10 02		bpl $b120			bpl 	_FCExit
.b11e					_FCNegative:
.b11e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b120					_FCExit:
.b120	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b121					FDivideCommand:
.b121	fa		plx				plx	 								; restore stack position
.b122	20 07 b2	jsr $b207			jsr 	FloatPrepare 				; prepare for floats
.b125					FloatDivide:
.b125	48		pha				pha
.b126	e8		inx				inx
.b127	20 18 b2	jsr $b218			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b12a	ca		dex				dex
.b12b	c9 00		cmp #$00			cmp 	#0
.b12d	f0 20		beq $b14f			beq 	_FDZero
.b12f	20 18 b2	jsr $b218			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b132	f0 19		beq $b14d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b134	20 5a af	jsr $af5a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b137	20 e7 ae	jsr $aee7			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b13a	20 18 b2	jsr $b218			jsr		NSNormalise 				; renormalise
.b13d	20 f5 af	jsr $aff5			jsr 	CalculateSign 				; calculate result sign
.b140	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b143	38		sec				sec
.b144	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b147	38		sec				sec
.b148	e9 1e		sbc #$1e			sbc 	#30
.b14a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b14d					_FDExit:
.b14d	68		pla				pla
.b14e	60		rts				rts
.b14f					_FDZero:
.b14f	a9 03		lda #$03		lda	#3
.b151	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b154					FloatFractionalPart:
.b154	5a		phy				phy
.b155	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b158	29 7f		and #$7f			and 	#$7F
.b15a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b15d	20 18 b2	jsr $b218			jsr 	NSNormalise
.b160	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b163	38		sec				sec
.b164	e9 e0		sbc #$e0			sbc 	#$E0
.b166	90 31		bcc $b199			bcc 	_FFPExit 					; already fractional
.b168	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b16a	b0 2a		bcs $b196			bcs 	_FFPZero
.b16c	a8		tay				tay 								; put count to do in Y
.b16d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b170	20 9b b1	jsr $b19b			jsr 	_FFPPartial
.b173	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b176	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b179	20 9b b1	jsr $b19b			jsr 	_FFPPartial
.b17c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b17f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b182	20 9b b1	jsr $b19b			jsr 	_FFPPartial
.b185	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b188	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b18b	20 9b b1	jsr $b19b			jsr 	_FFPPartial
.b18e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b191	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; zeroed check.
.b194	d0 03		bne $b199			bne 	_FFPExit
.b196					_FFPZero:
.b196	20 64 a6	jsr $a664			jsr 	NSMSetZero
.b199					_FFPExit:
.b199	7a		ply				ply
.b19a	60		rts				rts
.b19b					_FFPPartial:
.b19b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b19d	f0 17		beq $b1b6			beq 	_FFFPPExit
.b19f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b1a1	b0 0c		bcs $b1af			bcs 	_FFFPPWholeByte
.b1a3	5a		phy				phy
.b1a4					_FFFPPLeft:
.b1a4	0a		asl a				asl 	a
.b1a5	88		dey				dey
.b1a6	d0 fc		bne $b1a4			bne 	_FFFPPLeft
.b1a8	7a		ply				ply
.b1a9					_FFFPPRight:
.b1a9	4a		lsr a				lsr 	a
.b1aa	88		dey				dey
.b1ab	d0 fc		bne $b1a9			bne 	_FFFPPRight
.b1ad	80 07		bra $b1b6			bra 	_FFFPPExit
.b1af					_FFFPPWholeByte:
.b1af	98		tya				tya 								; subtract 8 from count
.b1b0	38		sec				sec
.b1b1	e9 08		sbc #$08			sbc 	#8
.b1b3	a8		tay				tay
.b1b4	a9 00		lda #$00			lda 	#0 							; and clear all
.b1b6					_FFFPPExit:
.b1b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b1b7					FloatIntegerPart:
.b1b7	48		pha				pha
.b1b8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b1bb	f0 1f		beq $b1dc			beq 	_FIPExit 					; if so do nothing
.b1bd	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; is it zero ?
.b1c0	f0 17		beq $b1d9			beq 	_FIPZero 					; if so return zero.
.b1c2	20 18 b2	jsr $b218			jsr 	NSNormalise 				; normalise
.b1c5	f0 12		beq $b1d9			beq 	_FIPZero 					; normalised to zero, exit zero
.b1c7					_FIPShift:
.b1c7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b1ca	10 08		bpl $b1d4			bpl 	_FIPCheckZero
.b1cc	20 87 a6	jsr $a687			jsr 	NSMShiftRight 				; shift mantissa right
.b1cf	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b1d2	80 f3		bra $b1c7			bra 	_FIPShift
.b1d4					_FIPCheckZero:
.b1d4	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; avoid -0 problem
.b1d7	d0 03		bne $b1dc			bne 	_FIPExit 					; set to zero if mantissa zero.
.b1d9					_FIPZero:
.b1d9	20 64 a6	jsr $a664			jsr 	NSMSetZero
.b1dc					_FIPExit:
.b1dc	68		pla				pla
.b1dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b1de					FloatingPointMultiply:
.b1de	20 07 b2	jsr $b207			jsr 	FloatPrepare 				; prepare for floats
.b1e1					FloatMultiply:
.b1e1	48		pha				pha
.b1e2	20 18 b2	jsr $b218			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1e5	f0 1b		beq $b202			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1e7	e8		inx				inx
.b1e8	20 18 b2	jsr $b218			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1eb	ca		dex				dex
.b1ec	c9 00		cmp #$00			cmp 	#0
.b1ee	f0 0f		beq $b1ff			beq 	_FDSetZero
.b1f0	20 b0 af	jsr $afb0			jsr 	MultiplyShort 				; calculate the result.
.b1f3	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b1f6	18		clc				clc
.b1f7	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b1fa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1fd	80 03		bra $b202			bra 	_FDExit
.b1ff					_FDSetZero:
.b1ff	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; return 0
.b202					_FDExit:
.b202	20 18 b2	jsr $b218			jsr 	NSNormalise 				; normalise the result
.b205	68		pla				pla
.b206	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b207					FloatPrepare:
.b207	20 4a 9f	jsr $9f4a			jsr 	DereferenceTopTwo 			; dereference the top two values
.b20a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b20d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b210	29 10		and #$10			and 	#NSBIsString
.b212	d0 01		bne $b215			bne 	_FDType
.b214	60		rts				rts
.b215					_FDType:
.b215	4c 9f b4	jmp $b49f			jmp 	TypeError
.b218					NSNormalise:
.b218	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b21b	29 80		and #$80			and 	#$80
.b21d	09 08		ora #$08			ora 	#NSTFloat
.b21f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b222	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; if zero exit
.b225	d0 09		bne $b230			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b227	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b22a	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b22d	a9 00		lda #$00			lda 	#0 							; set Z flag
.b22f	60		rts				rts
.b230					_NSNormaliseOptimise:
.b230	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b233	d0 22		bne $b257			bne 	_NSNormaliseLoop
.b235	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b238	30 1d		bmi $b257			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b23a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b23d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b240	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b243	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b246	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b249	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b24c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b24f	38		sec				sec
.b250	e9 08		sbc #$08			sbc 	#8
.b252	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b255	80 d9		bra $b230			bra 	_NSNormaliseOptimise
.b257					_NSNormaliseLoop:
.b257	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b25a	70 08		bvs $b264			bvs 	_NSNExit 					; exit if so with Z flag clear
.b25c	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; shift mantissa left
.b25f	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b262	80 f3		bra $b257			bra 	_NSNormaliseLoop
.b264					_NSNExit:
.b264	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b266	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e77					AssignNumber:
.9e77	5a		phy				phy
.9e78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e7b	85 36		sta $36				sta 	zTemp0
.9e7d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e80	85 37		sta $37				sta 	zTemp0+1
.9e82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9e85	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9e87	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e8a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9e8c	c9 08		cmp #$08			cmp 	#NSTFloat
.9e8e	f0 2a		beq $9eba			beq 	_ANFloat
.9e90	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9e93	f0 05		beq $9e9a			beq		_ANNotFloat
.9e95	e8		inx				inx
.9e96	20 b7 b1	jsr $b1b7			jsr 	FloatIntegerPart 			; make it an integer
.9e99	ca		dex				dex
.9e9a					_ANNotFloat:
.9e9a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e9d	29 03		and #$03			and 	#3
.9e9f	d0 05		bne $9ea6			bne 	_ANByteWord
.9ea1	20 c6 9e	jsr $9ec6			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ea4	80 1e		bra $9ec4			bra 	_ANExit
.9ea6					_ANByteWord:
.9ea6	48		pha				pha 								; save count
.9ea7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9eaa	92 36		sta ($36)			sta 	(zTemp0)
.9eac	68		pla				pla
.9ead	c9 01		cmp #$01			cmp	 	#1
.9eaf	f0 13		beq $9ec4			beq 	_ANExit
.9eb1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9eb4	a0 01		ldy #$01			ldy 	#1
.9eb6	91 36		sta ($36),y			sta 	(zTemp0),y
.9eb8	80 0a		bra $9ec4			bra 	_ANExit
.9eba					_ANFloat:
.9eba	20 c6 9e	jsr $9ec6			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ebd	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ec0	a0 04		ldy #$04			ldy 	#4
.9ec2	91 36		sta ($36),y			sta 	(zTemp0),y
.9ec4					_ANExit:
.9ec4	7a		ply				ply
.9ec5	60		rts				rts
.9ec6					_ANCopy4PackSign:
.9ec6	a0 03		ldy #$03			ldy 	#3
.9ec8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9ecb	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ecd	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ed0	91 36		sta ($36),y			sta 	(zTemp0),y
.9ed2	88		dey				dey
.9ed3	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9ed6	91 36		sta ($36),y			sta 	(zTemp0),y
.9ed8	88		dey				dey
.9ed9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9edc	91 36		sta ($36),y			sta 	(zTemp0),y
.9ede	88		dey				dey
.9edf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9ee2	91 36		sta ($36),y			sta 	(zTemp0),y
.9ee4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9ee5					AssignString:
.9ee5	5a		phy				phy
.9ee6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9ee9	85 38		sta $38				sta 	zTemp1
.9eeb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9eee	85 39		sta $39				sta 	zTemp1+1
.9ef0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ef3	85 36		sta $36				sta 	zTemp0
.9ef5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ef8	85 37		sta $37				sta 	zTemp0+1
.9efa	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9efc	b1 36		lda ($36),y			lda 	(zTemp0),y
.9efe	f0 23		beq $9f23			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f00	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f01	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f03	e9 02		sbc #$02			sbc 	#2
.9f05	85 3c		sta $3c				sta 	zsTemp
.9f07	a0 01		ldy #$01			ldy 	#1
.9f09	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0b	e9 00		sbc #$00			sbc 	#0
.9f0d	85 3d		sta $3d				sta 	zsTemp+1
.9f0f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f11					_ASGetLength:
.9f11	c8		iny				iny
.9f12	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f14	d0 fb		bne $9f11			bne 	_ASGetLength
.9f16	98		tya				tya 								; is this length <= current length
.9f17	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f19	90 20		bcc $9f3b			bcc 	_ASCopyString
.9f1b	f0 1e		beq $9f3b			beq 	_ASCopyString
.9f1d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f1f	a0 01		ldy #$01			ldy 	#1
.9f21	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f23					_ASNewStringRequired:
.9f23	e8		inx				inx 								; concrete the new string.
.9f24	20 96 b7	jsr $b796			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f27	ca		dex				dex
.9f28	18		clc				clc
.9f29	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f2c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f2e	92 36		sta ($36)			sta 	(zTemp0)
.9f30	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f33	69 00		adc #$00			adc 	#0
.9f35	a0 01		ldy #$01			ldy 	#1
.9f37	91 36		sta ($36),y			sta 	(zTemp0),y
.9f39	80 0d		bra $9f48			bra 	_ASExit
.9f3b					_ASCopyString:
.9f3b	a0 00		ldy #$00			ldy 	#0
.9f3d					_ASCopyLoop:
.9f3d	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f3f	c8		iny				iny
.9f40	c8		iny				iny
.9f41	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f43	88		dey				dey
.9f44	c9 00		cmp #$00			cmp 	#0
.9f46	d0 f5		bne $9f3d			bne 	_ASCopyLoop
.9f48					_ASExit:
.9f48	7a		ply				ply
.9f49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f4a					DereferenceTopTwo:
.9f4a	e8		inx				inx
.9f4b	20 4f 9f	jsr $9f4f			jsr 	Dereference 				; deref x+1
.9f4e	ca		dex				dex  								; falls through to deref x
.9f4f					Dereference:
.9f4f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9f52	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9f54	f0 57		beq $9fad			beq 	_DRFExit 					; not a reference
.9f56	5a		phy				phy
.9f57	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f5a	85 36		sta $36				sta 	zTemp0
.9f5c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f5f	85 37		sta $37				sta 	zTemp0+1
.9f61	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9f64	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f66	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f69	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9f6c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f6e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f70	f0 0f		beq $9f81			beq 	_DRFDereferenceTwo
.9f72	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f74	f0 39		beq $9faf			beq 	_DRFFull
.9f76	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f79	29 03		and #$03			and 	#3
.9f7b	f0 32		beq $9faf			beq 	_DRFFull 					; the whole word
.9f7d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f7f	f0 07		beq $9f88			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f81					_DRFDereferenceTwo:
.9f81	a0 01		ldy #$01			ldy 	#1
.9f83	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f85	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f88					_DRFClear23:
.9f88	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f8b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f8e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9f91	29 18		and #$18			and 	#NSBTypeMask
.9f93	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f96	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f98	d0 12		bne $9fac			bne 	_DRFNotString
.9f9a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9f9d	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9fa0	d0 0a		bne $9fac			bne 	_DRFNotString
.9fa2	a9 ae		lda #$ae			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9fa4	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9fa7	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9fa9	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9fac					_DRFNotString
.9fac	7a		ply				ply 								; restore Y and exit
.9fad					_DRFExit:
.9fad	60		rts				rts
.9fae					_DRFNullString:
>9fae	00						.byte 	0
.9faf					_DRFFull:
.9faf	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9fb1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fb6	c8		iny				iny
.9fb7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fbc	c8		iny				iny
.9fbd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fbf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fc2	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9fc5	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9fc8	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9fca	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9fcd	f0 06		beq $9fd5			beq 	_DRFNoExponent
.9fcf	c8		iny				iny 								; if not, read the exponent as well.
.9fd0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fd2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9fd5					_DRFNoExponent:
.9fd5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9fd8	10 0d		bpl $9fe7			bpl 	_DRFExit2 					; if not, then exit.
.9fda	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9fdc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fdf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9fe2	09 80		ora #$80			ora 	#NSBIsNegative
.9fe4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fe7					_DRFExit2:
.9fe7	7a		ply				ply
.9fe8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9fe9					EncodeNumberStart:
.9fe9	38		sec				sec
.9fea	80 01		bra $9fed			bra 	EncodeNumberContinue+1
.9fec					EncodeNumberContinue:
.9fec	18		clc				clc
.9fed					EncodeNumber:
.9fed	08		php				php 								; save reset.
.9fee	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ff0	f0 12		beq $a004			beq 	_ENIsOkay
.9ff2	c9 30		cmp #$30			cmp 	#"0"
.9ff4	90 04		bcc $9ffa			bcc 	_ENBadNumber
.9ff6	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ff8	90 0a		bcc $a004			bcc 	_ENIsOkay
.9ffa					_ENBadNumber:
.9ffa	28		plp				plp 								; throw saved reset
.9ffb	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ffe	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a000	f0 7e		beq $a080			beq 	_ENConstructFinal
.a002					_ENFail:
.a002	18		clc				clc 								; not allowed
.a003	60		rts				rts
.a004					_ENIsOkay:
.a004	28		plp				plp 								; are we restarting
.a005	90 15		bcc $a01c			bcc 	_ENNoRestart
.a007					_ENStartEncode:
.a007	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a009	f0 0c		beq $a017			beq 	_ENFirstDP
.a00b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a00d	20 66 a6	jsr $a666			jsr 	NSMSetByte
.a010	a9 01		lda #$01			lda 	#ESTA_Low
.a012					_ENExitChange:
.a012	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a015	38		sec				sec
.a016	60		rts				rts
.a017					_ENFirstDP:
.a017	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; clear integer part
.a01a	80 3f		bra $a05b			bra 	_ESTASwitchFloat			; go straight to float and exi
.a01c					_ENNoRestart:
.a01c	48		pha				pha 								; save on stack.
.a01d	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a020	c9 01		cmp #$01			cmp 	#ESTA_Low
.a022	f0 09		beq $a02d			beq  	_ESTALowState
.a024	c9 02		cmp #$02			cmp 	#ESTA_High
.a026	f0 29		beq $a051			beq 	_ESTAHighState
.a028	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a02a	f0 3b		beq $a067			beq 	_ESTADecimalState
>a02c	db						.byte 	$DB 						; causes a break in the emulator
.a02d					_ESTALowState:
.a02d	68		pla				pla 								; get value back
.a02e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a030	f0 29		beq $a05b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a032	29 0f		and #$0f			and 	#15 						; make digit
.a034	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a037	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a03a	0a		asl a				asl 	a
.a03b	0a		asl a				asl 	a
.a03c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a03f	0a		asl a				asl 	a
.a040	6d 86 04	adc $0486			adc 	DigitTemp
.a043	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a046	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a048	90 05		bcc $a04f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a04a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a04c	8d 85 04	sta $0485			sta 	EncodeState
.a04f					_ESTANoSwitch:
.a04f	38		sec				sec
.a050	60		rts				rts
.a051					_ESTAHighState:
.a051	68		pla				pla 								; get value back
.a052	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a054	f0 05		beq $a05b			beq 	_ESTASwitchFloat
.a056	20 ba a0	jsr $a0ba			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a059	38		sec				sec
.a05a	60		rts				rts
.a05b					_ESTASwitchFloat:
.a05b	9c 87 04	stz $0487			stz 	DecimalCount
.a05e	e8		inx				inx 								; zero the decimal additive.
.a05f	20 64 a6	jsr $a664			jsr 	NSMSetZero
.a062	ca		dex				dex
.a063	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a065	80 ab		bra $a012			bra 	_ENExitChange
.a067					_ESTADecimalState:
.a067	68		pla				pla 								; digit.
.a068	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a06a	f0 96		beq $a002			beq 	_ENFail
.a06c	e8		inx				inx 								; put digit into fractional part of X+1
.a06d	20 ba a0	jsr $a0ba			jsr 	ESTAShiftDigitIntoMantissa
.a070	ca		dex				dex
.a071	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a074	ad 87 04	lda $0487			lda 	DecimalCount
.a077	c9 0b		cmp #$0b			cmp 	#11
.a079	f0 02		beq $a07d			beq 	_ESTADSFail
.a07b	38		sec				sec
.a07c	60		rts				rts
.a07d					_ESTADSFail:
.a07d	4c 9a b4	jmp $b49a			jmp 	RangeError
.a080					_ENConstructFinal:
.a080	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a083	f0 33		beq $a0b8			beq 	_ENCFExit 					; no decimals
.a085	5a		phy				phy
.a086	0a		asl a				asl 	a 							; x 4 and CLC
.a087	0a		asl a				asl 	a
.a088	6d 87 04	adc $0487			adc 	DecimalCount
.a08b	a8		tay				tay
.a08c	b9 59 b4	lda $b459,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a08f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a092	b9 5a b4	lda $b45a,y			lda 	DecimalScalarTable-5+1,y
.a095	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a098	b9 5b b4	lda $b45b,y			lda 	DecimalScalarTable-5+2,y
.a09b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a09e	b9 5c b4	lda $b45c,y			lda 	DecimalScalarTable-5+3,y
.a0a1	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a0a4	b9 5d b4	lda $b45d,y			lda 	DecimalScalarTable-5+4,y
.a0a7	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a0aa	a9 08		lda #$08			lda 	#NSTFloat
.a0ac	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a0af	7a		ply				ply
.a0b0	e8		inx				inx 								; multiply decimal const by decimal scalar
.a0b1	20 e1 b1	jsr $b1e1			jsr 	FloatMultiply
.a0b4	ca		dex				dex
.a0b5	20 6e b0	jsr $b06e			jsr 	FloatAdd 					; add to integer part.
.a0b8					_ENCFExit:
.a0b8	18		clc				clc 								; reject the digit.
.a0b9	60		rts				rts
.a0ba					ESTAShiftDigitIntoMantissa:
.a0ba	29 0f		and #$0f			and 	#15 						; save digit
.a0bc	48		pha				pha
.a0bd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a0c0	48		pha				pha
.a0c1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a0c4	48		pha				pha
.a0c5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0c8	48		pha				pha
.a0c9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a0cc	48		pha				pha
.a0cd	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 2
.a0d0	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 4
.a0d3	18		clc				clc 								; pop mantissa and add
.a0d4	68		pla				pla
.a0d5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0d8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0db	68		pla				pla
.a0dc	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a0df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0e2	68		pla				pla
.a0e3	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a0e6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a0e9	68		pla				pla
.a0ea	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a0ed	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a0f0	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 10
.a0f3	68		pla				pla 								; add digit
.a0f4	18		clc				clc
.a0f5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0fb	90 0d		bcc $a10a			bcc 	_ESTASDExit
.a0fd	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a100	d0 08		bne $a10a			bne 	_ESTASDExit
.a102	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a105	d0 03		bne $a10a			bne 	_ESTASDExit
.a107	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a10a					_ESTASDExit:
.a10a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a10b					EvaluateTerm:
.a10b	b1 30		lda ($30),y			lda 	(codePtr),y
.a10d	30 18		bmi $a127			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a10f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a111	b0 6f		bcs $a182			bcs 	_ETVariable
.a113	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a115	90 6e		bcc $a185			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a117	c9 3a		cmp #$3a			cmp 	#'9'+1
.a119	b0 6a		bcs $a185			bcs 	_ETPuncUnary
.a11b	20 e9 9f	jsr $9fe9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a11e					_ETNumber:
.a11e	c8		iny				iny 								; keep encoding until we have the numbers
.a11f	b1 30		lda ($30),y			lda 	(codePtr),y
.a121	20 ec 9f	jsr $9fec			jsr 	EncodeNumberContinue
.a124	b0 f8		bcs $a11e			bcs 	_ETNumber 					; go back if accepted.
.a126	60		rts				rts
.a127					_ETCheckUnary:
.a127	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a129	f0 41		beq $a16c			beq 	_ETString
.a12b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a12d	f0 12		beq $a141			beq 	_ETHexConstant
.a12f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a131	90 0b		bcc $a13e			bcc 	_ETSyntaxError
.a133	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a135	b0 07		bcs $a13e			bcs 	_ETSyntaxError
.a137	da		phx				phx 								; push X on the stack
.a138	0a		asl a				asl 	a 							; put vector x 2 into X
.a139	aa		tax				tax
.a13a	c8		iny				iny 								; consume unary function token
.a13b	7c 2e 96	jmp ($962e,x)			jmp 	(VectorSet0,x) 				; and do it.
.a13e					_ETSyntaxError:
.a13e	4c 95 b4	jmp $b495			jmp 	SyntaxError
.a141					_ETHexConstant:
.a141	c8		iny				iny 								; skip #
.a142	c8		iny				iny 								; skip count
.a143	20 64 a6	jsr $a664			jsr 	NSMSetZero 					; clear result
.a146					_ETHLoop:
.a146	b1 30		lda ($30),y			lda 	(codePtr),y
.a148	c8		iny				iny 								; and consume
.a149	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a14b	f0 1e		beq $a16b			beq 	_ETHExit
.a14d	48		pha				pha 								; save on stack.
.a14e	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 2
.a151	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 4
.a154	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 8
.a157	20 79 a6	jsr $a679			jsr 	NSMShiftLeft 				; x 16
.a15a	68		pla				pla 								; ASCII
.a15b	c9 41		cmp #$41			cmp 	#'A'
.a15d	90 02		bcc $a161			bcc 	_ETHNotChar
.a15f	e9 07		sbc #$07			sbc 	#7
.a161					_ETHNotChar:
.a161	29 0f		and #$0f			and 	#15 						; digit now
.a163	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a166	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a169	80 db		bra $a146			bra 	_ETHLoop 					; go round.
.a16b					_ETHExit:
.a16b	60		rts				rts
.a16c					_ETString:
.a16c	c8		iny				iny 								; look at length
.a16d	b1 30		lda ($30),y			lda 	(codePtr),y
.a16f	48		pha				pha
.a170	c8		iny				iny 								; first character
.a171	20 ae a6	jsr $a6ae			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a174	68		pla				pla 								; restore count and save
.a175	85 36		sta $36				sta 	zTemp0
.a177	98		tya				tya 								; add length to Y to skip it.
.a178	18		clc				clc
.a179	65 36		adc $36				adc 	zTemp0
.a17b	a8		tay				tay
.a17c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a17e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a181	60		rts				rts
.a182					_ETVariable:
.a182	4c dc a1	jmp $a1dc			jmp 	VariableHandler
.a185					_ETPuncUnary:
.a185	c8		iny				iny 								; consume the unary character
.a186	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a188	f0 2d		beq $a1b7			beq 	_ETUnaryNegate
.a18a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a18c	f0 39		beq $a1c7			beq 	_ETDereference
.a18e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a190	f0 43		beq $a1d5			beq 	_ETParenthesis
.a192	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a194	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a196	f0 06		beq $a19e			beq 	_ETIndirection
.a198	e6 36		inc $36				inc 	zTemp0
.a19a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a19c	d0 a0		bne $a13e			bne 	_ETSyntaxError
.a19e					_ETIndirection:
.a19e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a1a0	1a		inc a				inc 	a
.a1a1	48		pha				pha
.a1a2	20 0b a1	jsr $a10b			jsr 	EvaluateTerm				; evaluate the term
.a1a5	20 4f 9f	jsr $9f4f			jsr 	Dereference 				; dereference it.
.a1a8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a1ab	d0 07		bne $a1b4			bne 	_ETTypeMismatch
.a1ad	68		pla				pla 								; indirection 1-2
.a1ae	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a1b0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1b3	60		rts				rts
.a1b4					_ETTypeMismatch:
.a1b4	4c 9f b4	jmp $b49f			jmp 	TypeError
.a1b7					_ETUnaryNegate:
.a1b7	20 0b a1	jsr $a10b			jsr 	EvaluateTerm				; evaluate the term
.a1ba	20 4f 9f	jsr $9f4f			jsr 	Dereference 				; dereference it.
.a1bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a1c0	29 10		and #$10			and 	#NSTString
.a1c2	d0 f0		bne $a1b4			bne 	_ETTypeMismatch
.a1c4	4c 10 a6	jmp $a610			jmp 	NSMNegate  					; just toggles the sign bit.
.a1c7					_ETDereference:
.a1c7	20 0b a1	jsr $a10b			jsr 	EvaluateTerm				; evaluate the term
.a1ca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a1cd	29 20		and #$20			and 	#NSBIsReference
.a1cf	f0 e3		beq $a1b4			beq 	_ETTypeMismatch
.a1d1	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a1d4	60		rts				rts
.a1d5					_ETParenthesis:
.a1d5	20 3a 9e	jsr $9e3a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a1d8	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; check for )
.a1db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a1dc					VariableHandler:
.a1dc	b1 30		lda ($30),y			lda 	(codePtr),y
.a1de	18		clc				clc
.a1df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1e1	85 37		sta $37				sta 	zTemp0+1
.a1e3	c8		iny				iny
.a1e4	b1 30		lda ($30),y			lda 	(codePtr),y
.a1e6	85 36		sta $36				sta 	zTemp0
.a1e8	c8		iny				iny
.a1e9	18		clc				clc									; copy variable address+3 to mantissa
.a1ea	69 03		adc #$03			adc 	#3
.a1ec	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1ef	a5 37		lda $37				lda 	zTemp0+1
.a1f1	69 00		adc #$00			adc 	#0
.a1f3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1f6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a1f9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a1fc	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a1ff	5a		phy				phy
.a200	a0 02		ldy #$02			ldy 	#2 							; read type
.a202	b1 36		lda ($36),y			lda 	(zTemp0),y
.a204	7a		ply				ply
.a205	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a207	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a209	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a20c	29 04		and #$04			and 	#NSBIsArray
.a20e	d0 01		bne $a211			bne 	_VHArray
.a210	60		rts				rts
.a211					_VHArray:
.a211	e8		inx				inx
.a212	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a215	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a217	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a21a	b1 30		lda ($30),y			lda 	(codePtr),y
.a21c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a21e	d0 06		bne $a226			bne 	_VHNoSecondIndex
.a220	c8		iny				iny 								; skip the comma
.a221	e8		inx				inx
.a222	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a225	ca		dex				dex
.a226					_VHNoSecondIndex:
.a226	ca		dex				dex 								; set X back.
.a227	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; and check the right bracket.
.a22a	5a		phy				phy 								; save position
.a22b	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a22d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a22f	f0 6b		beq $a29c			beq 	_VHBadIndex
.a231	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a234	85 3e		sta $3e				sta 	zaTemp
.a236	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a239	85 3f		sta $3f				sta 	zaTemp+1
.a23b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a23d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a23f	f0 02		beq $a243			beq 	_VHHas2Mask
.a241	a9 ff		lda #$ff			lda 	#$FF
.a243					_VHHas2Mask:
.a243	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a246	f0 54		beq $a29c			beq 	_VHBadIndex
.a248	0a		asl a				asl 	a 							; carry will be set if a second index
.a249	90 09		bcc $a254			bcc 	_VHCheckFirstIndex
.a24b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a24d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a24f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a252	90 48		bcc $a29c			bcc 	_VHBadIndex
.a254					_VHCheckFirstIndex:
.a254	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a256	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a258	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a25b	90 3f		bcc $a29c			bcc 	_VHBadIndex
.a25d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a25f	64 37		stz $37				stz 	zTemp0+1
.a261	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a264	30 0f		bmi $a275			bmi 	_VHNoMultiply
.a266	da		phx				phx
.a267	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a26a	48		pha				pha
.a26b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a26d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a26f	1a		inc a				inc 	a 							; add 1 for zero base
.a270	fa		plx				plx
.a271	20 31 b3	jsr $b331			jsr 	Multiply8x8 				; calculate -> Z0
.a274	fa		plx				plx
.a275					_VHNoMultiply:
.a275	18		clc				clc
.a276	a5 36		lda $36				lda 	zTemp0
.a278	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a27b	85 36		sta $36				sta 	zTemp0
.a27d	a5 37		lda $37				lda 	zTemp0+1
.a27f	69 00		adc #$00			adc 	#0
.a281	85 37		sta $37				sta 	zTemp0+1
.a283	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a286	20 63 8d	jsr $8d63			jsr 	ScaleByBaseType
.a289	18		clc				clc
.a28a	b2 3e		lda ($3e)			lda 	(zaTemp)
.a28c	65 36		adc $36				adc 	zTemp0
.a28e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a291	a0 01		ldy #$01			ldy 	#1
.a293	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a295	65 37		adc $37				adc 	zTemp0+1
.a297	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a29a	7a		ply				ply 								; restore position
.a29b	60		rts				rts
.a29c					_VHBadIndex:
.a29c	a9 17		lda #$17		lda	#23
.a29e	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b267					AbsUnary:
.b267	fa		plx				plx 								; restore stack pos
.b268	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; get a float or int
.b26b	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b26e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b271	29 7f		and #$7f			and 	#$7F
.b273	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b276	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a2a1					AllocUnary:
.a2a1	fa		plx				plx 								; restore stack pos
.a2a2	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger		; get bytes required.
.a2a5	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.a2a8	da		phx				phx 								; save X/Y
.a2a9	5a		phy				phy
.a2aa	8a		txa				txa 								; copy X into Y
.a2ab	a8		tay				tay
.a2ac	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a2af	aa		tax				tax
.a2b0	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a2b3	20 c0 a2	jsr $a2c0			jsr 	AllocateXABytes 			; allocate memory
.a2b6	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a2b9	8a		txa				txa
.a2ba	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a2bd	7a		ply				ply
.a2be	fa		plx				plx
.a2bf	60		rts				rts
.a2c0					AllocateXABytes:
.a2c0	5a		phy				phy
.a2c1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a2c4	84 36		sty $36				sty 	zTemp0
.a2c6	5a		phy				phy
.a2c7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a2ca	84 37		sty $37				sty 	zTemp0+1
.a2cc	5a		phy				phy
.a2cd	18		clc				clc 								; add to low memory pointer
.a2ce	6d 8c 04	adc $048c			adc 	lowMemPtr
.a2d1	8d 8c 04	sta $048c			sta 	lowMemPtr
.a2d4	8a		txa				txa
.a2d5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a2d8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a2db	b0 2f		bcs $a30c			bcs 	CISSMemory
.a2dd	20 fe a2	jsr $a2fe			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2e0					_ClearMemory:
.a2e0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a2e3	c5 36		cmp $36				cmp 	zTemp0
.a2e5	d0 07		bne $a2ee			bne 	_CMClearNext
.a2e7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a2ea	c5 37		cmp $37				cmp 	zTemp0+1
.a2ec	f0 0c		beq $a2fa			beq 	_CMExit
.a2ee					_CMClearNext:
.a2ee	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2f0	92 36		sta ($36)			sta 	(zTemp0)
.a2f2	e6 36		inc $36				inc 	zTemp0
.a2f4	d0 ea		bne $a2e0			bne 	_ClearMemory
.a2f6	e6 37		inc $37				inc		zTemp0+1
.a2f8	80 e6		bra $a2e0			bra 	_ClearMemory
.a2fa					_CMExit:
.a2fa	fa		plx				plx
.a2fb	68		pla				pla
.a2fc	7a		ply				ply
.a2fd	60		rts				rts
.a2fe					CheckIdentifierStringSpace:
.a2fe	48		pha				pha
.a2ff	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a302	18		clc				clc
.a303	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a305	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a308	b0 02		bcs $a30c			bcs 	CISSMemory
.a30a	68		pla				pla
.a30b	60		rts				rts
.a30c					CISSMemory:
.a30c	a9 06		lda #$06		lda	#6
.a30e	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b277					AscUnary:
.b277	fa		plx				plx 								; restore stack pos
.b278	20 af a5	jsr $a5af			jsr 	EvaluateString 				; get a string
.b27b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b27d	20 66 a6	jsr $a666			jsr 	NSMSetByte
.b280	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b283	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b284					FracUnary:
.b284	fa		plx				plx 								; restore stack pos
.b285	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; get a float or int
.b288	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b28b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b28e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b290	f0 04		beq $b296			beq 	_IUZero
.b292	20 54 b1	jsr $b154			jsr 	FloatFractionalPart
.b295	60		rts				rts
.b296					_IUZero:
.b296	20 64 a6	jsr $a664			jsr 	NSMSetZero
.b299	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b29a					IntUnary:
.b29a	fa		plx				plx 								; restore stack pos
.b29b	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; get a float or int
.b29e	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b2a1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b2a4	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b2a6	f0 03		beq $b2ab			beq 	_IUExit
.b2a8	20 b7 b1	jsr $b1b7			jsr 	FloatIntegerPart
.b2ab					_IUExit:
.b2ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b2ac					LenUnary:
.b2ac	fa		plx				plx 								; restore stack pos
.b2ad	20 af a5	jsr $a5af			jsr 	EvaluateString 				; get a string
.b2b0	5a		phy				phy
.b2b1	a0 00		ldy #$00			ldy 	#0 							; find length
.b2b3					_LenFind:
.b2b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.b2b5	f0 06		beq $b2bd			beq 	_LenExit
.b2b7	c8		iny				iny
.b2b8	d0 f9		bne $b2b3			bne 	_LenFind
.b2ba	4c 9a b4	jmp $b49a			jmp 	RangeError 					; string > 255
.b2bd					_LenExit:
.b2bd	98		tya				tya
.b2be	20 66 a6	jsr $a666			jsr 	NSMSetByte
.b2c1	7a		ply				ply
.b2c2	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b2c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a311					Unary_Min:
.a311	a9 01		lda #$01			lda 	#1
.a313	80 02		bra $a317			bra 	UnaryMinMaxMain
.a315					Unary_Max:
.a315	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a317					UnaryMinMaxMain:
.a317	fa		plx				plx 								; get index on number stack
.a318	48		pha				pha 								; save comparator
.a319	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; get the first value.
.a31c					_UMMMLoop:
.a31c	b1 30		lda ($30),y			lda 	(codePtr),y
.a31e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a320	f0 22		beq $a344			beq 	_UMMMDone
.a322	20 af ae	jsr $aeaf			jsr 	CheckComma 					; must be a comma
.a325	e8		inx				inx
.a326	20 9b a5	jsr $a59b			jsr 	EvaluateValue
.a329	ca		dex				dex
.a32a	20 3b a6	jsr $a63b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a32d	e8		inx				inx
.a32e	20 3b a6	jsr $a63b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a331	e8		inx				inx
.a332	20 e1 9a	jsr $9ae1			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a335	ca		dex				dex
.a336	ca		dex				dex
.a337	85 36		sta $36				sta 	zTemp0 						; save required result
.a339	68		pla				pla 								; get and save comparator
.a33a	48		pha				pha
.a33b	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a33d	d0 dd		bne $a31c			bne 	_UMMMLoop
.a33f	20 47 a3	jsr $a347			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a342	80 d8		bra $a31c			bra 	_UMMMLoop
.a344					_UMMMDone:
.a344	68		pla				pla 								; throw the comparator
.a345	c8		iny				iny 								; skip )
.a346	60		rts				rts
.a347					ExpCopyAboveDown:
.a347	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a34a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a34d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a350	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a353	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a356	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a359	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a35c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a35f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a362	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a365	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a368	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a36b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a36c					Unary_Not:
.a36c	fa		plx				plx
.a36d	20 c7 a5	jsr $a5c7			jsr 	EvaluateInteger 			; get integer
.a370	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.a373	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; zero mantissa ?
.a376	f0 04		beq $a37c			beq 	_NotZero
.a378	20 64 a6	jsr $a664			jsr 	NSMSetZero
.a37b	60		rts				rts
.a37c					_NotZero:
.a37c	4c 96 9a	jmp $9a96			jmp 	ReturnTrue
.a37f					_UNBad:
.a37f	4c a4 b4	jmp $b4a4			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a382					Unary_Random:
.a382	fa		plx				plx
.a383	20 01 a4	jsr $a401			jsr 	Random32Bit 				; get a random number
.a386	20 e6 a3	jsr $a3e6			jsr 	URCopyToMantissa  			; put in mantissa
.a389	b1 30		lda ($30),y			lda 	(codePtr),y
.a38b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a38d	f0 08		beq $a397			beq 	_URNoModulus
.a38f	e8		inx				inx
.a390	20 dc a5	jsr $a5dc			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a393	ca		dex				dex
.a394	20 2b af	jsr $af2b			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a397					_URNoModulus:
.a397	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a39a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a39d	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.a3a0	60		rts				rts
.a3a1					Unary_Rnd:
.a3a1	fa		plx				plx
.a3a2	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; number to use.
.a3a5	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; closing bracket
.a3a8	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a3ab	f0 2b		beq $a3d8			beq 	_URCopySeed
.a3ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a3b0	10 23		bpl $a3d5			bpl 	_URDontSeed
.a3b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a3b5	49 17		eor #$17			eor 	#$17
.a3b7	8d 88 04	sta $0488			sta 	RandomSeed+0
.a3ba	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3bd	49 a5		eor #$a5			eor 	#$A5
.a3bf	8d 89 04	sta $0489			sta 	RandomSeed+1
.a3c2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3c5	49 c2		eor #$c2			eor 	#$C2
.a3c7	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a3ca	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a3cd	49 9d		eor #$9d			eor 	#$9D
.a3cf	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a3d2	20 01 a4	jsr $a401			jsr 	Random32Bit
.a3d5					_URDontSeed:
.a3d5	20 01 a4	jsr $a401			jsr 	Random32Bit 				; generate a number.
.a3d8					_URCopySeed:
.a3d8	20 e6 a3	jsr $a3e6			jsr 	URCopyToMantissa 			; copy into mantissa
.a3db	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a3dd	8d 28 04	sta $0428			sta 	NSExponent
.a3e0	a9 08		lda #$08			lda 	#NSTFloat
.a3e2	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a3e5	60		rts				rts
.a3e6					URCopyToMantissa:
.a3e6	ad 88 04	lda $0488			lda 	RandomSeed+0
.a3e9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3ec	ad 89 04	lda $0489			lda 	RandomSeed+1
.a3ef	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3f2	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a3f5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3f8	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a3fb	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a3fd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a400	60		rts				rts
.a401					Random32Bit:
.a401	5a		phy				phy
.a402	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a404	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a407	d0 03		bne $a40c			bne 	_Random1
.a409	a8		tay				tay 								; if so do it 256 times
.a40a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a40c					_Random1:
.a40c	0a		asl a				asl 	a 							; LSFR RNG
.a40d	2e 89 04	rol $0489			rol 	RandomSeed+1
.a410	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a413	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a416	90 02		bcc $a41a			bcc 	_Random2
.a418	49 c5		eor #$c5			eor 	#$C5
.a41a					_Random2:
.a41a	88		dey				dey
.a41b	d0 ef		bne $a40c			bne 	_Random1
.a41d	8d 88 04	sta $0488			sta 	RandomSeed+0
.a420	7a		ply				ply
.a421	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b2c6					SgnUnary:
.b2c6	fa		plx				plx 								; restore stack pos
.b2c7	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber 				; get a float or int
.b2ca	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.b2cd	20 94 a6	jsr $a694			jsr 	NSMIsZero 					; if zero
.b2d0	f0 10		beq $b2e2			beq 	_SGZero  					; return Int Zero
.b2d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b2d5	48		pha				pha
.b2d6	a9 01		lda #$01			lda 	#1 							; set to 1
.b2d8	20 66 a6	jsr $a666			jsr 	NSMSetByte
.b2db	68		pla				pla
.b2dc	29 80		and #$80			and		#$80 						; copy the sign byte out
.b2de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2e1	60		rts				rts
.b2e2	20 64 a6	jsr $a664	_SGZero:jsr 	NSMSetZero
.b2e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b2e6					ValUnary:
.b2e6	fa		plx				plx 								; restore stack pos
.b2e7	20 fc b2	jsr $b2fc			jsr 	ValMainCode 				; do the main val() code
.b2ea	b0 01		bcs $b2ed			bcs 	_VUError 					; couldn't convert
.b2ec	60		rts				rts
.b2ed					_VUError:
.b2ed	4c 9f b4	jmp $b49f			jmp 	TypeError
.b2f0					IsValUnary:
.b2f0	fa		plx				plx 								; restore stack pos
.b2f1	20 fc b2	jsr $b2fc			jsr 	ValMainCode 				; do the main val() code
.b2f4	b0 03		bcs $b2f9			bcs 	_VUBad
.b2f6	4c 96 9a	jmp $9a96			jmp 	ReturnTrue
.b2f9					_VUBad:
.b2f9	4c a2 9a	jmp $9aa2			jmp 	ReturnFalse
.b2fc					ValMainCode:
.b2fc	20 af a5	jsr $a5af			jsr 	EvaluateString 				; get a string
.b2ff	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; check right bracket present
.b302	5a		phy				phy
.b303	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b305	f0 17		beq $b31e			beq 	_VMCFail2
.b307	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b309	48		pha				pha 								; save first character
.b30a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b30c	d0 01		bne $b30f			bne 	_VMCStart
.b30e	c8		iny				iny 								; skip over -
.b30f					_VMCStart:
.b30f	38		sec				sec 								; initialise first time round.
.b310					_VMCNext:
.b310	c8		iny				iny 								; pre-increment
.b311	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b313	f0 0c		beq $b321			beq 	_VMCSuccess 				; successful.
.b315	20 ed 9f	jsr $9fed			jsr 	EncodeNumber 				; send it to the number-builder
.b318	90 03		bcc $b31d			bcc 	_VMCFail 					; if failed, give up.
.b31a	18		clc				clc 								; next time round, countinue
.b31b	80 f3		bra $b310			bra 	_VMCNext
.b31d					_VMCFail:
.b31d	68		pla				pla
.b31e					_VMCFail2:
.b31e	7a		ply				ply
.b31f	38		sec				sec
.b320	60		rts				rts
.b321					_VMCSuccess:
.b321	a9 00		lda #$00			lda 	#0 							; construct final
.b323	20 ed 9f	jsr $9fed			jsr 	EncodeNumber
.b326	68		pla				pla
.b327	c9 2d		cmp #$2d			cmp 	#"-"
.b329	d0 03		bne $b32e			bne 	_VMCNotNegative
.b32b	20 10 a6	jsr $a610			jsr		NSMNegate
.b32e					_VMCNotNegative:
.b32e	7a		ply				ply
.b32f	18		clc				clc
.b330	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a422					ChrUnary:
.a422	fa		plx				plx 								; restore stack pos
.a423	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger			; get value
.a426	48		pha				pha
.a427	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.a42a	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a42c	20 17 b8	jsr $b817			jsr 	StringTempAllocate
.a42f	68		pla				pla 								; write number to it
.a430	20 55 b8	jsr $b855			jsr 	StringTempWrite
.a433	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a434					SpcUnary:
.a434	fa		plx				plx 								; restore stack pos
.a435	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger			; get value
.a438	5a		phy				phy
.a439	48		pha				pha 								; save count
.a43a	20 17 b8	jsr $b817			jsr 	StringTempAllocate
.a43d	7a		ply				ply 								; to do count in Y
.a43e					_SpcLoop:
.a43e	c0 00		cpy #$00			cpy 	#0
.a440	f0 08		beq $a44a			beq 	_SpcExit
.a442	a9 20		lda #$20			lda 	#32
.a444	20 55 b8	jsr $b855			jsr 	StringTempWrite
.a447	88		dey				dey
.a448	80 f4		bra $a43e			bra 	_SPCLoop
.a44a					_SpcExit:
.a44a	7a		ply				ply
.a44b	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket
.a44e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a44f					Unary_Str:
.a44f	fa		plx				plx
.a450	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber  			; get number
.a453	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; closing bracket
.a456	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a458	20 71 a4	jsr $a471			jsr 	ConvertNumberToString 		; do the conversion.
.a45b	a9 21		lda #$21			lda		#33 						; create buffer
.a45d	20 17 b8	jsr $b817			jsr 	StringTempAllocate 			; allocate memory
.a460	da		phx				phx
.a461	a2 00		ldx #$00			ldx 	#0
.a463					_USCopy:
.a463	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a466	20 55 b8	jsr $b855			jsr 	StringTempWrite
.a469	e8		inx				inx
.a46a	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a46d	d0 f4		bne $a463			bne 	_USCopy
.a46f	fa		plx				plx
.a470	60		rts				rts
.a471					ConvertNumberToString:
.a471	5a		phy				phy 								; save code position
.a472	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a475	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a478	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a47b	10 0a		bpl $a487			bpl 	_CNTSNotNegative
.a47d	29 7f		and #$7f			and 	#$7F 						; make +ve
.a47f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a482	a9 2d		lda #$2d			lda 	#"-"
.a484	20 ed a4	jsr $a4ed			jsr 	WriteDecimalBuffer
.a487					_CNTSNotNegative:
.a487	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a48a	f0 15		beq $a4a1			beq 	_CNTSNotFloat
.a48c	e8		inx				inx 								; round up
.a48d	a9 01		lda #$01			lda 	#1
.a48f	20 66 a6	jsr $a666			jsr 	NSMSetByte
.a492	ca		dex				dex
.a493	bd 28 04	lda $0428,x			lda		NSExponent,x
.a496	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a499	a9 08		lda #$08			lda 	#NSTFloat
.a49b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a49e	20 6e b0	jsr $b06e			jsr 	FloatAdd
.a4a1					_CNTSNotFloat:
.a4a1	20 cf a4	jsr $a4cf			jsr 	MakePlusTwoString
.a4a4	20 54 b1	jsr $b154			jsr 	FloatFractionalPart 		; get the fractional part
.a4a7	20 18 b2	jsr $b218			jsr 	NSNormalise					; normalise , exit if zero
.a4aa	f0 21		beq $a4cd			beq 	_CNTSExit
.a4ac	a9 2e		lda #$2e			lda 	#"."
.a4ae	20 ed a4	jsr $a4ed			jsr 	WriteDecimalBuffer 			; write decimal place
.a4b1					_CNTSDecimal:
.a4b1	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a4b4	30 17		bmi $a4cd			bmi 	_CNTSExit
.a4b6	e8		inx				inx 								; x 10.0
.a4b7	a9 0a		lda #$0a			lda 	#10
.a4b9	20 66 a6	jsr $a666			jsr 	NSMSetByte
.a4bc	a9 08		lda #$08			lda 	#NSTFloat
.a4be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4c1	ca		dex				dex
.a4c2	20 e1 b1	jsr $b1e1			jsr 	FloatMultiply
.a4c5	20 cf a4	jsr $a4cf			jsr 	MakePlusTwoString
.a4c8	20 54 b1	jsr $b154			jsr 	FloatFractionalPart 		; get the fractional part
.a4cb	80 e4		bra $a4b1			bra 	_CNTSDecimal 				; keep going.
.a4cd					_CNTSExit:
.a4cd	7a		ply				ply
.a4ce	60		rts				rts
.a4cf					MakePlusTwoString:
.a4cf	da		phx				phx
.a4d0	20 3b a6	jsr $a63b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a4d3	e8		inx				inx 								; access it
.a4d4	e8		inx				inx
.a4d5	20 b7 b1	jsr $b1b7			jsr 	FloatIntegerPart 			; make it an integer
.a4d8	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a4da	20 18 b0	jsr $b018			jsr 	ConvertInt32
.a4dd	a2 00		ldx #$00			ldx	 	#0
.a4df					_MPTSCopy:
.a4df	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a4e2	20 ed a4	jsr $a4ed			jsr 	WriteDecimalBuffer
.a4e5	e8		inx				inx
.a4e6	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a4e9	d0 f4		bne $a4df			bne 	_MPTSCopy
.a4eb	fa		plx				plx
.a4ec	60		rts				rts
.a4ed					WriteDecimalBuffer:
.a4ed	da		phx				phx
.a4ee	ae 95 04	ldx $0495			ldx 	dbOffset
.a4f1	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a4f4	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a4f7	ee 95 04	inc $0495			inc 	dbOffset
.a4fa	fa		plx				plx
.a4fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a4fc					Unary_Left:
.a4fc	fa		plx				plx
.a4fd	18		clc				clc 								; only one parameter
.a4fe	20 73 a5	jsr $a573			jsr 	SubstringInitial 			; set up.
.a501	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a504	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a507	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a50a	80 2c		bra $a538			bra 	SubstringMain
.a50c					Unary_Right:
.a50c	fa		plx				plx
.a50d	18		clc				clc 								; only one parameter
.a50e	20 73 a5	jsr $a573			jsr 	SubstringInitial 			; set up.
.a511	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a514	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a517	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a51a	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a51d	b0 02		bcs $a521			bcs 	_URNotUnderflow
.a51f	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a521					_URNotUnderFlow:
.a521	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a524	80 12		bra $a538			bra 	SubStringMain
.a526					Unary_Mid:
.a526	fa		plx				plx
.a527	38		sec				sec 								; two parameters
.a528	20 73 a5	jsr $a573			jsr 	SubstringInitial 			; set up.
.a52b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a52e	f0 05		beq $a535			beq 	_UMError
.a530	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a533	80 03		bra $a538			bra 	SubStringMain
.a535					_UMError:
.a535	4c a4 b4	jmp $b4a4			jmp 	ArgumentError
.a538					SubStringMain:
.a538	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a53b	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a53e	b0 2d		bcs $a56d			bcs 	_SSMNull 					; if so, return an empty string.
.a540	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a543	f0 28		beq $a56d			beq 	_SSMNull 					; return empty string.
.a545	18		clc				clc 								; add the offset +1 to the address and
.a546	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a549	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a54c	85 36		sta $36				sta 	zTemp0
.a54e	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a551	69 00		adc #$00			adc 	#0
.a553	85 37		sta $37				sta 	zTemp0+1
.a555					_SSMNoCarry:
.a555	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a558	20 17 b8	jsr $b817			jsr 	StringTempAllocate 			; allocate that many characters
.a55b	5a		phy				phy 								; save Y
.a55c	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a55e					_SSMCopy:
.a55e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a560	f0 09		beq $a56b			beq 	_SSMEString 				; no more to copy
.a562	20 55 b8	jsr $b855			jsr 	StringTempWrite 			; and write it out.
.a565	c8		iny				iny
.a566	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a569	d0 f3		bne $a55e			bne 	_SSMCopy
.a56b					_SSMEString:
.a56b	7a		ply				ply
.a56c					_SSMExit:
.a56c	60		rts				rts
.a56d					_SSMNull:
.a56d	a9 00		lda #$00			lda 	#0
.a56f	20 17 b8	jsr $b817			jsr 	StringTempAllocate
.a572	60		rts				rts
.a573					SubstringInitial:
.a573	da		phx				phx 								; save initial stack position
.a574	08		php				php 								; save carry on stack indicating 2 parameters
.a575	20 af a5	jsr $a5af			jsr 	EvaluateString 				; get a string
.a578	5a		phy				phy 								; calculate length to exponent.
.a579	a0 ff		ldy #$ff			ldy 	#$FF
.a57b					_SIFindLength:
.a57b	c8		iny				iny
.a57c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a57e	d0 fb		bne $a57b			bne 	_SIFindLength
.a580	98		tya				tya
.a581	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a584	7a		ply				ply
.a585	e8		inx				inx
.a586	20 af ae	jsr $aeaf			jsr 	CheckComma 					; comma next
.a589	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get next parameter
.a58c	28		plp				plp 								; is it the last parameter ?
.a58d	90 07		bcc $a596			bcc 	_SSIExit 					; if so, exit.
.a58f	e8		inx				inx
.a590	20 af ae	jsr $aeaf			jsr 	CheckComma 					; comma next
.a593	20 fc a5	jsr $a5fc			jsr 	Evaluate8BitInteger 		; get last parameter
.a596					_SSIExit:
.a596	fa		plx				plx
.a597	20 a7 ae	jsr $aea7			jsr 	CheckRightBracket 			; check closing bracket
.a59a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a59b					EvaluateValue:
.a59b	48		pha				pha
.a59c	20 3a 9e	jsr $9e3a			jsr		EvaluateExpression 			; expression
.a59f	20 4f 9f	jsr $9f4f			jsr 	Dereference					; derefernce it
.a5a2	68		pla				pla
.a5a3	60		rts				rts
.a5a4					EvaluateNumber:
.a5a4	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; get a value
.a5a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a5aa	29 10		and #$10			and 	#NSBIsString
.a5ac	d0 16		bne $a5c4			bne 	HelperTypeError
.a5ae	60		rts				rts
.a5af					EvaluateString:
.a5af	20 9b a5	jsr $a59b			jsr 	EvaluateValue 				; get a value
.a5b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a5b5	29 10		and #$10			and 	#NSBIsString
.a5b7	f0 0b		beq $a5c4			beq 	HelperTypeError
.a5b9					CopyAddressToTemp0:
.a5b9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a5bc	85 36		sta $36				sta 	zTemp0
.a5be	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a5c1	85 37		sta $37				sta 	zTemp0+1
.a5c3	60		rts				rts
.a5c4					HelperTypeError:
.a5c4	4c 9f b4	jmp $b49f			jmp 	TypeError
.a5c7					EvaluateInteger:
.a5c7	20 a4 a5	jsr $a5a4			jsr 	EvaluateNumber
.a5ca	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a5cd	d0 0a		bne $a5d9			bne 	HelperValueError 			; if not, it's a float.
.a5cf	60		rts				rts
.a5d0					EvaluateUnsignedInteger:
.a5d0	20 c7 a5	jsr $a5c7			jsr 	EvaluateInteger 			; check integer is +ve
.a5d3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5d6	30 01		bmi $a5d9			bmi 	HelperValueError
.a5d8	60		rts				rts
.a5d9					HelperValueError:
.a5d9	4c a4 b4	jmp $b4a4			jmp 	ArgumentError
.a5dc					Evaluate16BitInteger:
.a5dc	20 d0 a5	jsr $a5d0			jsr	 	EvaluateUnsignedInteger		; get integer
.a5df	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5e2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5e5	d0 f2		bne $a5d9			bne 	HelperValueError
.a5e7	60		rts				rts
.a5e8					Evaluate16BitIntegerSigned:
.a5e8	20 c7 a5	jsr $a5c7			jsr	 	EvaluateInteger				; get integer
.a5eb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5ee	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5f1	d0 e6		bne $a5d9			bne 	HelperValueError
.a5f3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a5f6	10 03		bpl $a5fb			bpl 	_EISNotSigned
.a5f8	20 19 a6	jsr $a619			jsr 	NSMNegateMantissa
.a5fb					_EISNotSigned:
.a5fb	60		rts				rts
.a5fc					Evaluate8BitInteger:
.a5fc	20 d0 a5	jsr $a5d0			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a5ff	d0 d8		bne $a5d9			bne 	HelperValueError
.a601	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a604	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a607	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a60a	d0 cd		bne $a5d9			bne 	HelperValueError
.a60c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a60f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b331					Multiply8x8:
.b331	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b332	85 36		sta $36			  	sta 	zTemp0
.b334	86 37		stx $37				stx 	zTemp0+1
.b336	a9 00		lda #$00			lda 	#0
.b338	a2 08		ldx #$08			ldx 	#8
.b33a					_M88Loop:
.b33a	90 03		bcc $b33f			bcc 	_M88NoAdd
.b33c	18		clc				clc
.b33d	65 37		adc $37				adc 	zTemp0+1
.b33f					_M88NoAdd:
.b33f	6a		ror a				ror 	a
.b340	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b342	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b343	d0 f5		bne $b33a			bne 	_M88Loop
.b345	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a610					NSMNegate:
.a610	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a613	49 80		eor #$80			eor 	#NSBIsNegative
.a615	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a618	60		rts				rts
.a619					NSMNegateMantissa:
.a619	38		sec				sec
.a61a	a9 00		lda #$00			lda 	#0
.a61c	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a61f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a622	a9 00		lda #$00			lda 	#0
.a624	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a627	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a62a	a9 00		lda #$00			lda 	#0
.a62c	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a62f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a632	a9 00		lda #$00			lda 	#0
.a634	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a637	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a63a	60		rts				rts
.a63b					NSMShiftUpTwo:
.a63b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a63e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a641	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a644	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a647	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a64a	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a64d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a650	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a653	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a656	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a659	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a65c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a65f	60		rts				rts
.a660					NSMSetZeroMantissaOnly:
.a660	a9 00		lda #$00			lda 	#0
.a662	80 08		bra $a66c			bra 	NSMSetMantissa
.a664					NSMSetZero:
.a664	a9 00		lda #$00			lda 	#0
.a666					NSMSetByte:
.a666	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a669	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a66c					NSMSetMantissa:
.a66c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a66f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a672	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a675	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a678	60		rts				rts
.a679					NSMShiftLeft:
.a679	18		clc				clc
.a67a					NSMRotateLeft:
.a67a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a67d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a680	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a683	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a686	60		rts				rts
.a687					NSMShiftRight:
.a687	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a68a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a68d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a690	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a693	60		rts				rts
.a694					NSMIsZero:
.a694	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a697	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a69a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a69d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a6a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b348					Assemble_ora:
.b348	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b34b	01					.byte $01
.b34c					Assemble_and:
.b34c	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b34f	21					.byte $21
.b350					Assemble_eor:
.b350	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b353	41					.byte $41
.b354					Assemble_adc:
.b354	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b357	61					.byte $61
.b358					Assemble_sta:
.b358	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b35b	81					.byte $81
.b35c					Assemble_lda:
.b35c	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b35f	a1					.byte $a1
.b360					Assemble_cmp:
.b360	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b363	c1					.byte $c1
.b364					Assemble_sbc:
.b364	20 5c 89	jsr $895c		jsr	AssembleGroup1
>b367	e1					.byte $e1
.b368					Assemble_asl:
.b368	20 63 89	jsr $8963		jsr	AssembleGroup2
>b36b	02					.byte $02
>b36c	75					.byte $75
.b36d					Assemble_rol:
.b36d	20 63 89	jsr $8963		jsr	AssembleGroup2
>b370	22					.byte $22
>b371	75					.byte $75
.b372					Assemble_lsr:
.b372	20 63 89	jsr $8963		jsr	AssembleGroup2
>b375	42					.byte $42
>b376	75					.byte $75
.b377					Assemble_ror:
.b377	20 63 89	jsr $8963		jsr	AssembleGroup2
>b37a	62					.byte $62
>b37b	75					.byte $75
.b37c					Assemble_stx:
.b37c	20 63 89	jsr $8963		jsr	AssembleGroup2
>b37f	82					.byte $82
>b380	50					.byte $50
.b381					Assemble_ldx:
.b381	20 63 89	jsr $8963		jsr	AssembleGroup2
>b384	a2					.byte $a2
>b385	d0					.byte $d0
.b386					Assemble_dec:
.b386	20 63 89	jsr $8963		jsr	AssembleGroup2
>b389	c2					.byte $c2
>b38a	55					.byte $55
.b38b					Assemble_inc:
.b38b	20 63 89	jsr $8963		jsr	AssembleGroup2
>b38e	e2					.byte $e2
>b38f	55					.byte $55
.b390					Assemble_stz:
.b390	20 63 89	jsr $8963		jsr	AssembleGroup2
>b393	60					.byte $60
>b394	44					.byte $44
.b395					Assemble_bit:
.b395	20 63 89	jsr $8963		jsr	AssembleGroup2
>b398	20					.byte $20
>b399	55					.byte $55
.b39a					Assemble_sty:
.b39a	20 63 89	jsr $8963		jsr	AssembleGroup2
>b39d	80					.byte $80
>b39e	54					.byte $54
.b39f					Assemble_ldy:
.b39f	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3a2	a0					.byte $a0
>b3a3	d5					.byte $d5
.b3a4					Assemble_cpy:
.b3a4	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3a7	c0					.byte $c0
>b3a8	d4					.byte $d4
.b3a9					Assemble_cpx:
.b3a9	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3ac	e0					.byte $e0
>b3ad	d0					.byte $d0
.b3ae					Assemble_tsb:
.b3ae	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3b1	00					.byte $00
>b3b2	50					.byte $50
.b3b3					Assemble_trb:
.b3b3	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3b6	10					.byte $10
>b3b7	50					.byte $50
.b3b8					Assemble_jsr:
.b3b8	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3bb	14					.byte $14
>b3bc	10					.byte $10
.b3bd					Assemble_jmp:
.b3bd	20 63 89	jsr $8963		jsr	AssembleGroup2
>b3c0	40					.byte $40
>b3c1	10					.byte $10
.b3c2					Assemble_bpl:
.b3c2	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3c5	10					.byte $10
.b3c6					Assemble_bmi:
.b3c6	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3c9	30					.byte $30
.b3ca					Assemble_bvc:
.b3ca	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3cd	50					.byte $50
.b3ce					Assemble_bvs:
.b3ce	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3d1	70					.byte $70
.b3d2					Assemble_bcc:
.b3d2	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3d5	90					.byte $90
.b3d6					Assemble_bcs:
.b3d6	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3d9	b0					.byte $b0
.b3da					Assemble_bne:
.b3da	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3dd	d0					.byte $d0
.b3de					Assemble_beq:
.b3de	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3e1	f0					.byte $f0
.b3e2					Assemble_bra:
.b3e2	20 b4 89	jsr $89b4		jsr	AssembleGroup3
>b3e5	80					.byte $80
.b3e6					Assemble_brk:
.b3e6	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3e9	00					.byte $00
.b3ea					Assemble_php:
.b3ea	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3ed	08					.byte $08
.b3ee					Assemble_clc:
.b3ee	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3f1	18					.byte $18
.b3f2					Assemble_plp:
.b3f2	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3f5	28					.byte $28
.b3f6					Assemble_sec:
.b3f6	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3f9	38					.byte $38
.b3fa					Assemble_rti:
.b3fa	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b3fd	40					.byte $40
.b3fe					Assemble_pha:
.b3fe	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b401	48					.byte $48
.b402					Assemble_cli:
.b402	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b405	58					.byte $58
.b406					Assemble_phy:
.b406	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b409	5a					.byte $5a
.b40a					Assemble_rts:
.b40a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b40d	60					.byte $60
.b40e					Assemble_pla:
.b40e	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b411	68					.byte $68
.b412					Assemble_sei:
.b412	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b415	78					.byte $78
.b416					Assemble_ply:
.b416	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b419	7a					.byte $7a
.b41a					Assemble_dey:
.b41a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b41d	88					.byte $88
.b41e					Assemble_txa:
.b41e	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b421	8a					.byte $8a
.b422					Assemble_tya:
.b422	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b425	98					.byte $98
.b426					Assemble_txs:
.b426	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b429	9a					.byte $9a
.b42a					Assemble_tay:
.b42a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b42d	a8					.byte $a8
.b42e					Assemble_tax:
.b42e	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b431	aa					.byte $aa
.b432					Assemble_clv:
.b432	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b435	b8					.byte $b8
.b436					Assemble_tsx:
.b436	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b439	ba					.byte $ba
.b43a					Assemble_iny:
.b43a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b43d	c8					.byte $c8
.b43e					Assemble_dex:
.b43e	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b441	ca					.byte $ca
.b442					Assemble_cld:
.b442	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b445	d8					.byte $d8
.b446					Assemble_phx:
.b446	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b449	da					.byte $da
.b44a					Assemble_stp:
.b44a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b44d	db					.byte $db
.b44e					Assemble_inx:
.b44e	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b451	e8					.byte $e8
.b452					Assemble_nop:
.b452	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b455	ea					.byte $ea
.b456					Assemble_sed:
.b456	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b459	f8					.byte $f8
.b45a					Assemble_plx:
.b45a	20 ea 89	jsr $89ea		jsr	AssembleGroup4
>b45d	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b45e					DecimalScalarTable:
>b45e	66 66 66 66				.dword $66666666 ; 0.1
>b462	de					.byte $de
>b463	1f 85 eb 51				.dword $51eb851f ; 0.01
>b467	db					.byte $db
>b468	4c 37 89 41				.dword $4189374c ; 0.001
>b46c	d8					.byte $d8
>b46d	ac 8b db 68				.dword $68db8bac ; 0.0001
>b471	d4					.byte $d4
>b472	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b476	d1					.byte $d1
>b477	83 de 1b 43				.dword $431bde83 ; 1e-06
>b47b	ce					.byte $ce
>b47c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b480	ca					.byte $ca
>b481	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b485	c7					.byte $c7
>b486	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b48a	c4					.byte $c4
>b48b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b48f	c0					.byte $c0
>b490	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b494	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b495					SyntaxError:
.b495	a9 02		lda #$02		lda	#2
.b497	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b49a					RangeError:
.b49a	a9 04		lda #$04		lda	#4
.b49c	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b49f					TypeError:
.b49f	a9 05		lda #$05		lda	#5
.b4a1	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b4a4					ArgumentError:
.b4a4	a9 07		lda #$07		lda	#7
.b4a6	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b4a9					NotDoneError:
.b4a9	a9 0c		lda #$0c		lda	#12
.b4ab	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b4ae					ErrorText:
>b4ae	42 72 65 61 6b 00			.text	"Break",0
>b4b4	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b4bc	72 72 6f 72 00
>b4c1	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b4c9	20 62 79 20 7a 65 72 6f 00
>b4d2	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b4da	61 6e 67 65 00
>b4df	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b4e7	6d 61 74 63 68 00
>b4ed	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b4f5	65 6d 6f 72 79 00
>b4fb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b503	61 72 67 75 6d 65 6e 74 00
>b50c	53 74 6f 70 00				.text	"Stop",0
>b511	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b519	6f 6f 20 6c 6f 6e 67 00
>b521	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b529	6e 20 66 61 69 6c 65 64 00
>b532	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b53a	61 74 61 00
>b53e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b546	65 6e 74 65 64 00
>b54c	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b554	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b560	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b568	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b575	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b57d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b58a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b592	68 6f 75 74 20 57 68 69 6c 65 00
>b59d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b5a5	68 6f 75 74 20 46 6f 72 00
>b5ae	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b5b6	61 63 6b 20 66 75 6c 6c 00
>b5bf	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b5c7	75 63 74 75 72 65 00
>b5ce	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b5d6	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b5e3	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b5eb	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b5f9	41 72 72 61 79 20 73 69			.text	"Array size",0
>b601	7a 65 00
>b604	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b60c	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b614	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2482."
>b61c	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>b62c	32 2e 20 42 75 69 6c 64 20 32 34 38 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b63a					EXTInitialise:
.b63a	64 01		stz $01				stz 	1 							; Access I/O
.b63c	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b63f	9c 08 d0	stz $d008			stz 	$D008
.b642	9c 09 d0	stz $d009			stz 	$D009
.b645	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b647	8d 58 d6	sta $d658			sta 	$D658
.b64a	60		rts				rts
.b64b					EXTClearScreen:
.b64b	4c ea ff	jmp $ffea			jmp 	$FFEA
.b64e					EXTPrintCharacter:
.b64e	48		pha				pha
.b64f	da		phx				phx
.b650	5a		phy				phy
.b651	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b654	7a		ply				ply
.b655	fa		plx				plx
.b656	68		pla				pla
.b657	60		rts				rts
.b658					EXTInputSingleCharacter:
.b658	da		phx				phx
.b659	5a		phy				phy
.b65a					_EISCWait:
.b65a	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b65d	c9 00		cmp #$00			cmp 	#0
.b65f	f0 f9		beq $b65a			beq 	_EISCWait
.b661	7a		ply				ply
.b662	fa		plx				plx
.b663	60		rts				rts
.b664					EXTInputLine:
.b664	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b666					_ILLoop:
.b666	da		phx				phx 								; read character in
.b667	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b66a	fa		plx				plx
.b66b	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b66d	f0 12		beq $b681			beq 	_ILBackspace
.b66f	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b671	f0 15		beq $b688			beq 	_ILExit
.b673	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b675	90 ef		bcc $b666			bcc 	_ILLoop
.b677	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b679	f0 eb		beq $b666			beq 	_ILLoop
.b67b	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b67e	e8		inx				inx
.b67f	80 e5		bra $b666			bra 	_ILLoop
.b681					_ILBackspace:
.b681	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b683	f0 e1		beq $b666			beq 	_ILLoop
.b685	ca		dex				dex 								; back one.
.b686	80 de		bra $b666			bra 	_ILLoop
.b688					_ILExit:
.b688	20 4e b6	jsr $b64e			jsr 	EXTPrintCharacter
.b68b	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b68e	60		rts				rts
.b68f					EXTBreakCheck:
.b68f	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b692					EXTReadController:
.b692	da		phx				phx
.b693	a2 00		ldx #$00			ldx 	#0
.b695	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b697	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b69a	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b69c	f0 04		beq $b6a2			beq 	_NoSet1
.b69e	8a		txa				txa
.b69f	09 01		ora #$01			ora 	#1
.b6a1	aa		tax				tax
.b6a2					_NoSet1:
.b6a2	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b6a4	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b6a7	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b6a9	f0 04		beq $b6af			beq 	_NoSet1
.b6ab	8a		txa				txa
.b6ac	09 02		ora #$02			ora 	#2
.b6ae	aa		tax				tax
.b6af					_NoSet1:
.b6af	a9 06		lda #$06			lda 	#(($32) >> 3)
.b6b1	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b6b4	29 04		and #$04			and 	#($01 << (($32) & 7))
.b6b6	f0 04		beq $b6bc			beq 	_NoSet1
.b6b8	8a		txa				txa
.b6b9	09 04		ora #$04			ora 	#4
.b6bb	aa		tax				tax
.b6bc					_NoSet1:
.b6bc	a9 04		lda #$04			lda 	#(($25) >> 3)
.b6be	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b6c1	29 20		and #$20			and 	#($01 << (($25) & 7))
.b6c3	f0 04		beq $b6c9			beq 	_NoSet1
.b6c5	8a		txa				txa
.b6c6	09 08		ora #$08			ora 	#8
.b6c8	aa		tax				tax
.b6c9					_NoSet1:
.b6c9	a9 04		lda #$04			lda 	#(($26) >> 3)
.b6cb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b6ce	29 40		and #$40			and 	#($01 << (($26) & 7))
.b6d0	f0 04		beq $b6d6			beq 	_NoSet1
.b6d2	8a		txa				txa
.b6d3	09 10		ora #$10			ora 	#16
.b6d5	aa		tax				tax
.b6d6					_NoSet1:
.b6d6	8a		txa				txa
.b6d7	fa		plx				plx
.b6d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b6d9					MemoryDeleteLine:
.b6d9	20 f8 b6	jsr $b6f8			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b6dc	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b6de	a8		tay				tay
.b6df					_MDDLLoop:
.b6df	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b6e1	92 30		sta ($30)			sta 	(codePtr)
.b6e3	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b6e5	c5 3a		cmp $3a				cmp 	zTemp2
.b6e7	d0 07		bne $b6f0			bne 	_MDLDLNext
.b6e9	a5 31		lda $31				lda 	codePtr+1
.b6eb	c5 3b		cmp $3b				cmp 	zTemp2+1
.b6ed	d0 01		bne $b6f0			bne 	_MDLDLNext
.b6ef					_MDDLExit:
.b6ef	60		rts				rts
.b6f0					_MDLDLNext:
.b6f0	e6 30		inc $30				inc 	codePtr						; next byte
.b6f2	d0 eb		bne $b6df			bne 	_MDDLLoop
.b6f4	e6 31		inc $31				inc 	codePtr+1
.b6f6	80 e7		bra $b6df			bra 	_MDDLLoop
.b6f8					IMemoryFindEnd:
.b6f8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6fa	85 3a		sta $3a				sta 	0+zTemp2
.b6fc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6fe	85 3b		sta $3b				sta 	1+zTemp2
.b700					_MDLFELoop:
.b700	b2 3a		lda ($3a)			lda 	(zTemp2)
.b702	f0 0b		beq $b70f			beq 	_MDLFEExit
.b704	18		clc				clc
.b705	65 3a		adc $3a				adc 	zTemp2
.b707	85 3a		sta $3a				sta 	zTemp2
.b709	90 f5		bcc $b700			bcc 	_MDLFELoop
.b70b	e6 3b		inc $3b				inc 	zTemp2+1
.b70d	80 f1		bra $b700			bra 	_MDLFELoop
.b70f					_MDLFEExit:
.b70f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b710					MemoryInsertLine:
.b710	08		php				php
.b711	20 f8 b6	jsr $b6f8			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b714	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b716	1a		inc a				inc 	a
.b717	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b719	b0 36		bcs $b751			bcs 	_MDLIError
.b71b	28		plp				plp
.b71c	90 08		bcc $b726			bcc 	_MDLIFound
.b71e	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b720	85 30		sta $30				sta 	codePtr
.b722	a5 3b		lda $3b				lda 	zTemp2+1
.b724	85 31		sta $31				sta 	codePtr+1
.b726					_MDLIFound:
.b726	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b729	a8		tay				tay
.b72a					_MDLIInsert:
.b72a	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b72c	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b72e	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b730	c5 3a		cmp $3a				cmp 	zTemp2
.b732	d0 06		bne $b73a			bne 	_MDLINext
.b734	a5 31		lda $31				lda 	codePtr+1
.b736	c5 3b		cmp $3b				cmp 	zTemp2+1
.b738	f0 0a		beq $b744			beq 	_MDLIHaveSpace
.b73a					_MDLINext:
.b73a	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b73c	d0 02		bne $b740			bne 	_MDLINoBorrow
.b73e	c6 3b		dec $3b				dec 	zTemp2+1
.b740					_MDLINoBorrow:
.b740	c6 3a		dec $3a				dec 	zTemp2
.b742	80 e6		bra $b72a			bra 	_MDLIInsert
.b744					_MDLIHaveSpace:
.b744	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b747	88		dey				dey 								; from offset-1 to 0
.b748					_MDLICopy:
.b748	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b74b	91 30		sta ($30),y			sta 	(codePtr),y
.b74d	88		dey				dey
.b74e	10 f8		bpl $b748			bpl 	_MDLICopy
.b750	60		rts				rts
.b751					_MDLIError:
.b751	a9 06		lda #$06		lda	#6
.b753	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b756					MDLAppendLine:
.b756	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b758	85 36		sta $36				sta 	zTemp0
.b75a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b75c	85 38		sta $38				sta 	0+zTemp1
.b75e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b760	85 39		sta $39				sta 	1+zTemp1
.b762	b2 38		lda ($38)			lda 	(zTemp1)
.b764	d0 0a		bne $b770			bne 	_MDLANoInitialise
.b766	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b768	8d eb 06	sta $06eb			sta 	0+AppendPointer
.b76b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b76d	8d ec 06	sta $06ec			sta 	1+AppendPointer
.b770					_MDLANoInitialise:
.b770	18		clc				clc
.b771	ad eb 06	lda $06eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b774	85 38		sta $38				sta 	zTemp1
.b776	72 36		adc ($36)			adc 	(zTemp0)
.b778	8d eb 06	sta $06eb			sta 	AppendPointer
.b77b	ad ec 06	lda $06ec			lda 	AppendPointer+1
.b77e	85 39		sta $39				sta 	zTemp1+1
.b780	69 00		adc #$00			adc 	#0
.b782	8d ec 06	sta $06ec			sta 	AppendPointer+1
.b785	a0 00		ldy #$00			ldy 	#0
.b787					_MDLACopy:
.b787	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b789	91 38		sta ($38),y			sta 	(zTemp1),y
.b78b	c8		iny				iny
.b78c	98		tya				tya
.b78d	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b78f	d0 f6		bne $b787			bne 	_MDLACopy
.b791	a9 00		lda #$00			lda 	#0 							; end of program.
.b793	91 38		sta ($38),y			sta 	(zTemp1),y
.b795	60		rts				rts
.06eb					AppendPointer:
>06eb							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a6a1					MemoryNew:
.a6a1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6a3	85 30		sta $30				sta 	codePtr
.a6a5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6a7	85 31		sta $31				sta 	codePtr+1
.a6a9	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6ab	92 30		sta ($30)			sta 	(codePtr)
.a6ad	60		rts				rts
.a6ae					MemoryInline:
.a6ae	98		tya				tya 								; put address into stack,x
.a6af	18		clc				clc
.a6b0	65 30		adc $30				adc 	codePtr
.a6b2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6b5	a5 31		lda $31				lda 	codePtr+1
.a6b7	69 00		adc #$00			adc 	#0
.a6b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6bc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a6bf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a6c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a6c3					MemorySearch:
.a6c3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a6c5	86 37		stx $37				stx 	zTemp0+1
.a6c7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6c9	85 30		sta $30				sta 	codePtr
.a6cb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6cd	85 31		sta $31				sta 	codePtr+1
.a6cf					_MTAXLoop:
.a6cf	b2 30		lda ($30)			lda 	(codePtr)
.a6d1	18		clc				clc
.a6d2	f0 21		beq $a6f5			beq 	_MTAXExit 					; reached end, exit with CC.
.a6d4	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a6d6	b1 30		lda ($30),y			lda 	(codePtr),y
.a6d8	38		sec				sec
.a6d9	e5 36		sbc $36				sbc 	zTemp0
.a6db	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a6dd	c8		iny				iny 								; do the MSB
.a6de	b1 30		lda ($30),y			lda 	(codePtr),y
.a6e0	e5 37		sbc $37				sbc 	zTemp0+1
.a6e2	05 38		ora $38				ora 	zTemp1
.a6e4	f0 0f		beq $a6f5			beq 	_MTAXExit	 				; found
.a6e6	b0 0d		bcs $a6f5			bcs 	_MTAXExit 					; current < required exit
.a6e8	18		clc				clc
.a6e9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a6eb	65 30		adc $30				adc 	codePtr
.a6ed	85 30		sta $30				sta 	codePtr
.a6ef	90 02		bcc $a6f3			bcc 	_CREExit
.a6f1	e6 31		inc $31				inc 	codePtr+1
.a6f3					_CREExit:
.a6f3	80 da		bra $a6cf			bra 	_MTAXLoop
.a6f5					_MTAXExit:
.a6f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a6f6					StackPushByte:
.a6f6	48		pha				pha 								; save byte
.a6f7	a5 34		lda $34				lda 	BasicStack
.a6f9	d0 09		bne $a704			bne 	_SPBNoBorrow
.a6fb	c6 35		dec $35				dec 	BasicStack+1
.a6fd	48		pha				pha
.a6fe	a5 35		lda $35				lda 	BasicStack+1
.a700	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a702	90 06		bcc $a70a			bcc 	_SPBMemory
.a704					_SPBNoBorrow:
.a704	c6 34		dec $34				dec 	BasicStack
.a706	68		pla				pla 								; get back and write
.a707	92 34		sta ($34)			sta 	(BasicStack)
.a709	60		rts				rts
.a70a					_SPBMemory:
.a70a	a9 12		lda #$12		lda	#18
.a70c	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.a70f					StackPopByte:
.a70f	b2 34		lda ($34)			lda 	(BasicStack)
.a711	e6 34		inc $34				inc 	BasicStack
.a713	d0 02		bne $a717			bne 	_SPBNoCarry
.a715	e6 35		inc $35				inc 	BasicStack+1
.a717					_SPBNoCarry:
.a717	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a718					StackOpen:
.a718	48		pha				pha 								; save frame byte
.a719	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a71b	0a		asl a				asl 	a 							; claim twice this for storage
.a71c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a71e	38		sec				sec 								; so basically subtracting from
.a71f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a721	85 34		sta $34				sta 	basicStack
.a723	b0 08		bcs $a72d			bcs 	_SONoBorrow
.a725	c6 35		dec $35				dec 	basicStack+1
.a727	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a729	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a72b	90 04		bcc $a731			bcc 	_SOMemory
.a72d					_SONoBorrow:
.a72d	68		pla				pla 								; get marker back and write at TOS
.a72e	92 34		sta ($34)			sta 	(basicStack)
.a730	60		rts				rts
.a731					_SOMemory:
.a731	a9 12		lda #$12		lda	#18
.a733	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.a736					StackClose:
.a736	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a738	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a73a	0a		asl a				asl 	a 							; claim twice this.
.a73b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a73d	85 34		sta $34				sta 	basicStack
.a73f	90 02		bcc $a743			bcc 	_SCExit
.a741	e6 35		inc $35				inc 	basicStack+1
.a743					_SCExit:
.a743	60		rts				rts
.a744					StackCheckFrame:
.a744	48		pha				pha
.a745					_StackRemoveLocals:
.a745	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a747	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a749	b0 05		bcs $a750			bcs 	_SCNoLocal
.a74b	20 4e ae	jsr $ae4e			jsr 	LocalPopValue
.a74e	80 f5		bra $a745			bra 	_StackRemoveLocals
.a750					_SCNoLocal:
.a750	68		pla				pla
.a751	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a753	29 f0		and #$f0			and 	#$F0 						; check type bits
.a755	d0 01		bne $a758			bne 	_SCFError 					; different, we have structures mixed up
.a757	60		rts				rts
.a758					_SCFError:
.a758	8a		txa				txa 								; report error X
.a759	4c 29 9a	jmp $9a29			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a75c					STKSaveCodePosition:
.a75c	5a		phy				phy
.a75d	98		tya				tya 								; save Y
.a75e	a0 05		ldy #$05			ldy 	#5
.a760	91 34		sta ($34),y			sta 	(basicStack),y
.a762	88		dey				dey 								; save Code Pointer
.a763					_STKSaveLoop:
.a763	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a766	91 34		sta ($34),y			sta 	(basicStack),y
.a768	88		dey				dey
.a769	d0 f8		bne $a763			bne 	_STKSaveLoop
.a76b	7a		ply				ply
.a76c	60		rts				rts
.a76d					STKLoadCodePosition:
.a76d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a76f					_STKLoadLoop:
.a76f	b1 34		lda ($34),y			lda 	(basicStack),y
.a771	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a774	c8		iny				iny
.a775	c0 05		cpy #$05			cpy 	#5
.a777	d0 f6		bne $a76f			bne 	_STKLoadLoop
.a779	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a77b	a8		tay				tay
.a77c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a77d					StackReset:
.a77d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a77f	85 34		sta $34				sta 	0+basicStack
.a781	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a783	85 35		sta $35				sta 	1+basicStack
.a785	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a787	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a789	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b796					StringConcrete:
.b796	5a		phy				phy 								; save position on stack
.b797	20 fe a2	jsr $a2fe			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b79a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b79d	85 38		sta $38				sta 	zTemp1
.b79f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b7a2	85 39		sta $39				sta 	zTemp1+1
.b7a4	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b7a6					_SALength:
.b7a6	c8		iny				iny
.b7a7	b1 38		lda ($38),y			lda 	(zTemp1),y
.b7a9	d0 fb		bne $b7a6			bne 	_SALength
.b7ab	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b7ad	b0 3f		bcs $b7ee			bcs 	_SALengthError
.b7af	98		tya				tya 				 				; length of the new string
.b7b0	18		clc				clc
.b7b1	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b7b3	90 02		bcc $b7b7			bcc 	_SAHaveLength
.b7b5	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b7b7					_SAHaveLength:
.b7b7	48		pha				pha 								; save length.
.b7b8	38		sec				sec
.b7b9	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b7bb	6d 8e 04	adc $048e			adc 	StringMemory
.b7be	8d 8e 04	sta $048e			sta 	StringMemory
.b7c1	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b7c3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b7c6	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b7c8	6d 8f 04	adc $048f			adc 	StringMemory+1
.b7cb	8d 8f 04	sta $048f			sta 	StringMemory+1
.b7ce	85 3b		sta $3b				sta 	zTemp2+1
.b7d0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b7d3	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b7d4	38		sec				sec
.b7d5	e9 03		sbc #$03			sbc 	#3
.b7d7	92 3a		sta ($3a)			sta 	(zTemp2)
.b7d9	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b7db	a0 01		ldy #$01			ldy 	#1
.b7dd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b7df					_SACopyNewString:
.b7df	a0 00		ldy #$00			ldy 	#0
.b7e1					_SACopyNSLoop:
.b7e1	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b7e3	c8		iny				iny 								; write two on in string storage
.b7e4	c8		iny				iny
.b7e5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b7e7	88		dey				dey 								; this makes it one one.
.b7e8	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b7ea	d0 f5		bne $b7e1			bne 	_SACopyNSLoop
.b7ec	7a		ply				ply
.b7ed	60		rts				rts
.b7ee					_SALengthError:
.b7ee	a9 09		lda #$09		lda	#9
.b7f0	4c 29 9a	jmp $9a29		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b7f3					StringSystemInitialise:
.b7f3	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b7f5	8d 8e 04	sta $048e			sta 	0+StringMemory
.b7f8	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b7fa	8d 8f 04	sta $048f			sta 	1+StringMemory
.b7fd	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b800	60		rts				rts
.b801					StringSpaceInitialise:
.b801	20 fe a2	jsr $a2fe			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b804	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b806	8d 90 04	sta $0490			sta 	StringInitialised
.b809	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b80c	8d 91 04	sta $0491			sta 	StringTempPointer
.b80f	ad 8f 04	lda $048f			lda 	StringMemory+1
.b812	3a		dec a				dec 	a
.b813	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b816	60		rts				rts
.b817					StringTempAllocate:
.b817	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b819	b0 35		bcs $b850			bcs 	_STALength
.b81b	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b81e	30 05		bmi $b825			bmi 	_STAAllocate
.b820	48		pha				pha 								; save value to subtract.
.b821	20 01 b8	jsr $b801			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b824	68		pla				pla 								; restore it
.b825					_STAAllocate:
.b825	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b827	18		clc				clc  								; deliberate allows one more
.b828	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b82b	8d 91 04	sta $0491			sta 	StringTempPointer
.b82e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b831	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b833	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b836	69 ff		adc #$ff			adc 	#$FF
.b838	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b83b	85 3d		sta $3d				sta 	zsTemp+1
.b83d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b840	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b843	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b846	a9 10		lda #$10			lda 	#NSTString
.b848	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b84b	a9 00		lda #$00			lda 	#0 							; clear the target string
.b84d	92 3c		sta ($3c)			sta 	(zsTemp)
.b84f	60		rts				rts
.b850					_STALength:
.b850	a9 09		lda #$09		lda	#9
.b852	4c 29 9a	jmp $9a29		jmp	ErrorHandler
.b855					StringTempWrite:
.b855	48		pha				pha
.b856	92 3c		sta ($3c)			sta 	(zsTemp)
.b858	e6 3c		inc $3c				inc 	zsTemp
.b85a	d0 02		bne $b85e			bne 	_STWNoCarry
.b85c	e6 3d		inc $3d				inc 	zsTemp+1
.b85e					_STWNoCarry:
.b85e	a9 00		lda #$00			lda 	#0
.b860	92 3c		sta ($3c)			sta 	(zsTemp)
.b862	68		pla				pla
.b863	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a78a					BackloadProgram:
.a78a	a2 ff		ldx #$ff			ldx 	#$FF
.a78c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a78f	20 b9 a7	jsr $a7b9			jsr 	BLReadByte
.a792	30 1e		bmi $a7b2			bmi 	_BPExit
.a794					_BPCopy:
.a794	e8		inx				inx  								; copy byte in
.a795	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a798	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a79b	20 b9 a7	jsr $a7b9			jsr 	BLReadByte 					; read next byte
.a79e	30 0a		bmi $a7aa			bmi 	_BPEndLine 					; -ve = EOL
.a7a0	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a7a2	d0 02		bne $a7a6			bne 	_BPNotTab
.a7a4	a9 20		lda #$20			lda 	#' '
.a7a6					_BPNotTab:
.a7a6	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a7a8	b0 ea		bcs $a794			bcs 	_BPCopy
.a7aa					_BPEndLine:
.a7aa	20 9f ab	jsr $ab9f			jsr 	TokeniseLine 				; tokenise the line.
.a7ad	20 a4 8b	jsr $8ba4			jsr 	EditProgramCode
.a7b0	80 d8		bra $a78a			bra 	BackloadProgram
.a7b2					_BPExit:
.a7b2	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a7b5	20 62 8c	jsr $8c62			jsr 	ClearCommand 				; clear variables etc.
.a7b8	60		rts				rts
.a7b9					BLReadByte:
.a7b9					_BLLoad:
.a7b9	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a7bc	ee ba a7	inc $a7ba			inc 	_BLLoad+1
.a7bf	d0 03		bne $a7c4			bne 	_BLNoCarry
.a7c1	ee bb a7	inc $a7bb			inc 	_BLLoad+2
.a7c4					_BLNoCarry:
.a7c4	c9 00		cmp #$00			cmp 	#0
.a7c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a7c7					TokeniseSearchTable:
.a7c7	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a7c9	85 36		sta $36				sta 	zTemp0
.a7cb	a0 00		ldy #$00			ldy 	#0
.a7cd	a9 80		lda #$80			lda 	#$80 						; token #
.a7cf	85 38		sta $38				sta 	zTemp1
.a7d1					_TSTLoop:
.a7d1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a7d3	30 49		bmi $a81e			bmi 	_TSTFail 					; -ve = end of table
.a7d5	f0 2e		beq $a805			beq 	_TSTNext 					; zero, check next it's a dummy
.a7d7	c8		iny				iny 								; get the hash
.a7d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a7da	88		dey				dey
.a7db	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a7de	d0 25		bne $a805			bne 	_TSTNext
.a7e0	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a7e3	38		sec				sec
.a7e4	ed 80 04	sbc $0480			sbc 	identStart
.a7e7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a7e9	d0 1a		bne $a805			bne 	_TSTNext
.a7eb	5a		phy				phy 								; save Y , we might fail
.a7ec	c8		iny				iny 								; point to text
.a7ed	c8		iny				iny
.a7ee	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a7f1					_TSTCompareName:
.a7f1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a7f4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a7f6	d0 0c		bne $a804			bne 	_TSTNextPullY 				; fail, pullY and do next
.a7f8	e8		inx				inx
.a7f9	c8		iny				iny
.a7fa	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a7fd	d0 f2		bne $a7f1			bne 	_TSTCompareName
.a7ff	7a		ply				ply 								; throw Y
.a800	a5 38		lda $38				lda 	zTemp1 						; get token #
.a802	38		sec				sec 								; return with CS = passed.
.a803	60		rts				rts
.a804					_TSTNextPullY:
.a804	7a		ply				ply 								; restore current, fall through.
.a805					_TSTNext:
.a805	e6 38		inc $38				inc 	zTemp1 						; token counter
.a807	98		tya				tya
.a808	18		clc				clc
.a809	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a80b	1a		inc a				inc 	a 							; +1
.a80c	1a		inc a				inc 	a 							; +2
.a80d	a8		tay				tay
.a80e	10 c1		bpl $a7d1			bpl 	_TSTLoop 					; if Y < $80 loop back
.a810	98		tya				tya 								; add Y to zTemp0 and reset Y
.a811	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a813	18		clc				clc  								; but have tables > 255 bytes
.a814	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a816	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a818	90 b7		bcc $a7d1			bcc 	_TSTLoop
.a81a	e6 37		inc $37				inc 	zTemp0+1
.a81c	80 b3		bra $a7d1			bra 	_TSTLoop
.a81e					_TSTFail:
.a81e	18		clc				clc
.a81f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a820					KeywordSet0:
>a820	00 65					.text	0,$65,""               ; $80 !0:EOF
>a822	00 58					.text	0,$58,""               ; $81 !1:SH1
>a824	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a826	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a82c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a834	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a83a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a841	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a849	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a850	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a857	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a85d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a863	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a86b	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a872	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a879	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a880	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a888	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a88e	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a894	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a89b	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a8a1	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a8a7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a8af	28
>a8b0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a8b8	28
>a8b9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a8bf	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a8c5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a8cb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a8d2	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a8da	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a8e0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a8e6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a8eb	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a8ef	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a8f5	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a8fd	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a904	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a90b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a913	43
>a914	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a91a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a920	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a927	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a92d	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a931	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a937	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a93f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a946	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a94b	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a952	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a95a	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a960	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a965	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a96d	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a973	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a979	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a97e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a985	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a98b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a991	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a998	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a99d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a9a3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a9aa	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a9af	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a9b3	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a9bb	45
>a9bc	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>a9c4	45
>a9c5	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>a9cb	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>a9d2	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>a9d8	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>a9de	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>a9e3	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>a9eb	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>a9f2	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>a9fa	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aa00	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aa04	ff					.text	$FF
.aa05					KeywordSet1:
>aa05	00 65					.text	0,$65,""               ; $80 !0:EOF
>aa07	00 58					.text	0,$58,""               ; $81 !1:SH1
>aa09	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aa0b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aa13	4c 45
>aa15	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aa1d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aa25	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aa2a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aa30	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aa35	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aa3d	45
>aa3e	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aa43	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aa4b	53
>aa4c	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aa52	ff					.text	$FF
.aa53					KeywordSet2:
>aa53	00 65					.text	0,$65,""               ; $80 !0:EOF
>aa55	00 58					.text	0,$58,""               ; $81 !1:SH1
>aa57	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aa59	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aa5e	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>aa63	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>aa68	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>aa6d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>aa72	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>aa77	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>aa7c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>aa81	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>aa86	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>aa8b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>aa90	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>aa95	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>aa9a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>aa9f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>aaa4	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>aaa9	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>aaae	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>aab3	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aab8	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aabd	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aac2	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aac7	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aacc	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aad1	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aad6	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aadb	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aae0	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aae5	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aaea	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aaef	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aaf4	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aaf9	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aafe	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>ab03	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>ab08	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>ab0d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>ab12	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>ab17	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>ab1c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>ab21	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>ab26	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>ab2b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>ab30	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>ab35	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>ab3a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>ab3f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>ab44	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>ab49	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>ab4e	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ab53	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ab58	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ab5d	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ab62	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ab67	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ab6c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ab71	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ab76	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ab7b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ab80	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ab85	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ab8a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ab8f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ab94	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ab99	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ab9e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ab9f					TokeniseLine:
.ab9f	20 27 ad	jsr $ad27			jsr 	FixLineBufferCase 			; fix line case
.aba2	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.aba4	8d a7 04	sta $04a7			sta 	tokenOffset
.aba7	9c a8 04	stz $04a8			stz 	tokenLineNumber
.abaa	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.abad	a2 ff		ldx #$ff			ldx 	#$FF
.abaf					_TKFindFirst:
.abaf	e8		inx				inx
.abb0	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.abb3	f0 79		beq $ac2e			beq 	_TKExit
.abb5	c9 20		cmp #$20			cmp 	#' '
.abb7	90 f6		bcc $abaf			bcc 	_TKFindFirst
.abb9	c9 30		cmp #$30			cmp 	#'0'
.abbb	90 07		bcc $abc4			bcc 	_TKNoLineNumber
.abbd	c9 3a		cmp #$3a			cmp 	#'9'+1
.abbf	b0 03		bcs $abc4			bcs 	_TKNoLineNumber
.abc1	20 51 ad	jsr $ad51			jsr 	TokeniseExtractLineNumber
.abc4					_TKNoLineNumber:
.abc4					_TKTokeniseLoop:
.abc4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.abc7	f0 65		beq $ac2e			beq 	_TKExit
.abc9	e8		inx				inx
.abca	c9 20		cmp #$20			cmp 	#' '
.abcc	f0 f6		beq $abc4			beq 	_TKTokeniseLoop 			; keep looping if space found.
.abce	ca		dex				dex 								; undo last get, A contains character, X is position.
.abcf	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.abd1	f0 61		beq $ac34			beq 	_TKTokeniseIdentifier
.abd3	c9 41		cmp #$41			cmp 	#'A'
.abd5	90 04		bcc $abdb			bcc 	_TKTokenisePunctuation
.abd7	c9 5b		cmp #$5b			cmp 	#'Z'+1
.abd9	90 59		bcc $ac34			bcc 	_TKTokeniseIdentifier
.abdb					_TKTokenisePunctuation:
.abdb	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.abdd	f0 27		beq $ac06			beq 	_TKString
.abdf	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.abe1	f0 28		beq $ac0b			beq 	_TKHexConstant
.abe3	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.abe5	f0 29		beq $ac10			beq 	_TKCheckDouble
.abe7	c9 3e		cmp #$3e			cmp 	#'>'
.abe9	f0 25		beq $ac10			beq 	_TKCheckDouble
.abeb					_TKStandardPunctuation:
.abeb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.abee	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.abf0	90 0e		bcc $ac00			bcc 	_TKNoShift
.abf2	48		pha				pha 								; save
.abf3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.abf5	85 36		sta $36				sta 	zTemp0
.abf7	68		pla				pla
.abf8	29 20		and #$20			and 	#32 						; bit 5
.abfa	4a		lsr a				lsr 	a 							; shift into bit 3
.abfb	4a		lsr a				lsr 	a
.abfc	05 36		ora $36				ora 	zTemp0
.abfe	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ac00					_TKNoShift:
.ac00	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte 			; write the punctuation character
.ac03	e8		inx				inx 								; consume the character
.ac04	80 be		bra $abc4			bra 	_TKTokeniseLoop 			; and loop round again.
.ac06					_TKString:
.ac06	20 b6 ac	jsr $acb6			jsr 	TokeniseString
.ac09	80 b9		bra $abc4			bra 	_TKTokeniseLoop
.ac0b					_TKHexConstant:
.ac0b	20 f1 ac	jsr $acf1			jsr 	TokeniseHexConstant
.ac0e	80 b4		bra $abc4			bra 	_TKTokeniseLoop
.ac10					_TKCheckDouble:
.ac10	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.ac13	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.ac15	90 d4		bcc $abeb			bcc 	_TKStandardPunctuation
.ac17	c9 3f		cmp #$3f			cmp 	#'>'+1
.ac19	b0 d0		bcs $abeb			bcs 	_TKStandardPunctuation
.ac1b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.ac1e	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.ac20	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.ac21	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.ac24	38		sec				sec
.ac25	e9 3c		sbc #$3c			sbc 	#'<'
.ac27	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ac2a	e8		inx				inx 								; consume both
.ac2b	e8		inx				inx
.ac2c	80 96		bra $abc4			bra 	_TKTokeniseLoop
.ac2e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ac30	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.ac33	60		rts				rts
.ac34					_TKTokeniseIdentifier:
.ac34	8e 80 04	stx $0480			stx 	identStart 					; save start
.ac37	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ac3a					_TKCheckLoop:
.ac3a	e8		inx				inx 								; look at next, we know first is identifier.
.ac3b	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.ac3e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ac40	f0 f8		beq $ac3a			beq 	_TKCheckLoop
.ac42	c9 30		cmp #$30			cmp	 	#"0"
.ac44	90 0c		bcc $ac52			bcc 	_TKEndIdentifier
.ac46	c9 3a		cmp #$3a			cmp 	#"9"+1
.ac48	90 f0		bcc $ac3a			bcc 	_TKCheckLoop
.ac4a	c9 41		cmp #$41			cmp	 	#"A"
.ac4c	90 04		bcc $ac52			bcc 	_TKEndIdentifier
.ac4e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ac50	90 e8		bcc $ac3a			bcc 	_TKCheckLoop
.ac52					_TKEndIdentifier:
.ac52	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ac55	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ac57	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ac59	f0 06		beq $ac61			beq 	_TKHasTypeCharacter
.ac5b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ac5d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ac5f	d0 07		bne $ac68			bne 	_TKNoTypeCharacter
.ac61					_TKHasTypeCharacter:
.ac61	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ac64	e8		inx				inx 								; read next
.ac65	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac68					_TKNoTypeCharacter:
.ac68	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ac6a	d0 09		bne $ac75			bne 	_TKNoArray
.ac6c	e8		inx				inx 								; skip the (
.ac6d	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ac70	09 04		ora #$04			ora 	#$04
.ac72	8d 84 04	sta $0484			sta 	identTypeByte
.ac75					_TKNoArray:
.ac75	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ac78	20 12 ad	jsr $ad12			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ac7b	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ac7d	a9 20		lda #$20			lda 	#(KeywordSet0) & $FF
.ac7f	20 c7 a7	jsr $a7c7			jsr 	TokeniseSearchTable
.ac82	a2 00		ldx #$00			ldx 	#0
.ac84	b0 1f		bcs $aca5			bcs 	_TKFoundToken
.ac86	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ac88	a9 05		lda #$05			lda 	#(KeywordSet1) & $FF
.ac8a	20 c7 a7	jsr $a7c7			jsr 	TokeniseSearchTable
.ac8d	a2 81		ldx #$81			ldx 	#$81
.ac8f	b0 14		bcs $aca5			bcs 	_TKFoundToken
.ac91	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.ac93	a9 53		lda #$53			lda 	#(KeywordSet2) & $FF
.ac95	20 c7 a7	jsr $a7c7			jsr 	TokeniseSearchTable
.ac98	a2 82		ldx #$82			ldx 	#$82
.ac9a	b0 09		bcs $aca5			bcs 	_TKFoundToken
.ac9c	20 a2 ad	jsr $ada2			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ac9f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aca2	4c c4 ab	jmp $abc4			jmp 	_TKTokeniseLoop 			; and go round again.
.aca5					_TKFoundToken:
.aca5	48		pha				pha 								; save token
.aca6	8a		txa				txa 								; shift in X, is there one ?
.aca7	f0 03		beq $acac			beq 	_TKNoTShift
.aca9	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte 			; if so, write it out
.acac					_TKNoTShift:
.acac	68		pla				pla 								; restore and write token
.acad	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.acb0	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.acb3	4c c4 ab	jmp $abc4			jmp 	_TKTokeniseLoop 			; and go round again.
.acb6					TokeniseString:
.acb6	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.acb8	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.acbb	e8		inx				inx									; start of quoted string.
.acbc	da		phx				phx 								; push start of string on top
.acbd	ca		dex				dex
.acbe					_TSFindEnd:
.acbe	e8		inx				inx
.acbf	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.acc2	f0 04		beq $acc8			beq 	_TSEndOfString
.acc4	c9 22		cmp #$22			cmp 	#'"'
.acc6	d0 f6		bne $acbe			bne 	_TSFindEnd
.acc8					_TSEndOfString:
.acc8	7a		ply				ply  								; so now Y is first character, X is character after end.
.acc9	48		pha				pha 								; save terminating character
.acca	20 d2 ac	jsr $acd2			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.accd	68		pla				pla 								; terminating character
.acce	f0 01		beq $acd1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.acd0	e8		inx				inx
.acd1					_TSNotQuote:
.acd1	60		rts				rts
.acd2					TOWriteBlockXY:
.acd2	86 36		stx $36				stx 	zTemp0 						; write end character
.acd4	98		tya				tya
.acd5	49 ff		eor #$ff			eor 	#$FF
.acd7	38		sec				sec
.acd8	65 36		adc $36				adc 	zTemp0
.acda	1a		inc a				inc 	a 							; one extra for NULL
.acdb	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.acde					_TOBlockLoop:
.acde	c4 36		cpy $36				cpy 	zTemp0
.ace0	f0 09		beq $aceb			beq 	_TOBlockExit
.ace2	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ace5	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.ace8	c8		iny				iny
.ace9	80 f3		bra $acde			bra 	_TOBlockLoop
.aceb					_TOBlockExit:
.aceb	a9 00		lda #$00			lda 	#0
.aced	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.acf0	60		rts				rts
.acf1					TokeniseHexConstant:
.acf1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.acf3	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.acf6	e8		inx				inx									; start of quoted string.
.acf7	da		phx				phx 								; push start of constant on top
.acf8	ca		dex				dex
.acf9					_THFindLoop:
.acf9	e8		inx				inx
.acfa	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.acfd	c9 30		cmp #$30			cmp 	#"0"
.acff	90 0c		bcc $ad0d			bcc 	_THFoundEnd
.ad01	c9 3a		cmp #$3a			cmp 	#"9"+1
.ad03	90 f4		bcc $acf9			bcc 	_THFindLoop
.ad05	c9 41		cmp #$41			cmp 	#"A"
.ad07	90 04		bcc $ad0d			bcc 	_THFoundEnd
.ad09	c9 47		cmp #$47			cmp 	#"F"+1
.ad0b	90 ec		bcc $acf9			bcc 	_THFindLoop
.ad0d					_THFoundEnd:
.ad0d	7a		ply				ply 								; restore start
.ad0e	20 d2 ac	jsr $acd2			jsr 	TOWriteBlockXY 				; output the block
.ad11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ad12					TokeniseCalculateHash:
.ad12	da		phx				phx
.ad13	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ad16	a9 00		lda #$00			lda 	#0
.ad18					_TCHLoop:
.ad18	18		clc				clc
.ad19	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.ad1c	e8		inx				inx
.ad1d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ad20	d0 f6		bne $ad18			bne 	_TCHLoop
.ad22	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ad25	fa		plx				plx
.ad26	60		rts				rts
.ad27					FixLineBufferCase:
.ad27	a2 00		ldx #$00			ldx 	#0
.ad29					_FLBCLoop:
.ad29	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ad2c	f0 22		beq $ad50			beq 	_FLBCExit 					; end of string.
.ad2e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ad30	f0 11		beq $ad43			beq 	_FLBCInQuotes
.ad32	e8		inx				inx
.ad33	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ad35	90 f2		bcc $ad29			bcc 	_FLBCLoop
.ad37	c9 7b		cmp #$7b			cmp 	#'z'+1
.ad39	b0 ee		bcs $ad29			bcs 	_FLBCLoop
.ad3b	38		sec				sec 								; make U/C
.ad3c	e9 20		sbc #$20			sbc 	#32
.ad3e	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ad41	80 e6		bra $ad29			bra 	_FLBCLoop
.ad43					_FLBCInQuotes:
.ad43	e8		inx				inx 								; advance
.ad44	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ad47	f0 07		beq $ad50			beq 	_FLBCExit 					; exit on EOS
.ad49	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ad4b	d0 f6		bne $ad43			bne 	_FLBCInQuotes
.ad4d	e8		inx				inx 								; skip over it
.ad4e	80 d9		bra $ad29			bra 	_FLBCLoop
.ad50					_FLBCExit:
.ad50	60		rts				rts
.ad51					TokeniseExtractLineNumber:
.ad51	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ad54	48		pha				pha
.ad55	ad a8 04	lda $04a8			lda 	tokenLineNumber
.ad58	48		pha				pha
.ad59	20 8f ad	jsr $ad8f			jsr 	_TELNTimes2 				; line # x 4
.ad5c	20 8f ad	jsr $ad8f			jsr 	_TELNTimes2 				; line # x 2
.ad5f	18		clc				clc 								; add stacked value
.ad60	68		pla				pla
.ad61	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad64	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad67	68		pla				pla
.ad68	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ad6b	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ad6e	20 8f ad	jsr $ad8f			jsr 	_TELNTimes2 				; line # x 10
.ad71	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ad74	e8		inx				inx
.ad75	29 0f		and #$0f			and 	#15 						; add to line #
.ad77	18		clc				clc
.ad78	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad7b	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad7e	90 03		bcc $ad83			bcc 	_TLENNoCarry
.ad80	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ad83					_TLENNoCarry:
.ad83	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ad86	c9 30		cmp #$30			cmp 	#'0'
.ad88	90 04		bcc $ad8e			bcc 	_TLENExit
.ad8a	c9 3a		cmp #$3a			cmp 	#'9'+1
.ad8c	90 c3		bcc $ad51			bcc 	TokeniseExtractLineNumber
.ad8e					_TLENExit:
.ad8e	60		rts				rts
.ad8f					_TELNTimes2:
.ad8f	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ad92	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ad95	60		rts				rts
.ad96					TokeniseWriteByte:
.ad96	da		phx				phx
.ad97	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ad9a	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ad9d	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ada0	fa		plx				plx
.ada1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ada2					CheckCreateVariableRecord:
.ada2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ada4	85 36		sta $36				sta 	0+zTemp0
.ada6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ada8	85 37		sta $37				sta 	1+zTemp0
.adaa					_CCVSearch:
.adaa	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.adac	f0 2c		beq $adda			beq 	_CCVFail
.adae	a0 01		ldy #$01			ldy 	#1 							; read the hash
.adb0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.adb2	cd 83 04	cmp $0483			cmp 	identHash
.adb5	d0 16		bne $adcd			bne 	_CCVNext
.adb7	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.adb9	ae 80 04	ldx $0480			ldx 	identStart
.adbc					_CCVCompare:
.adbc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.adbf	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.adc1	e8		inx				inx 								; advance pointers
.adc2	c8		iny				iny
.adc3	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.adc4	d0 07		bne $adcd			bne 	_CCVNext  					; didn't match go to next.
.adc6	90 f4		bcc $adbc			bcc 	_CCVCompare 				; not finished yet.
.adc8	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.adcb	f0 41		beq $ae0e			beq 	_CCVFound 					; yes, we were successful
.adcd					_CCVNext:
.adcd	18		clc				clc
.adce	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.add0	65 36		adc $36				adc 	zTemp0
.add2	85 36		sta $36				sta 	zTemp0
.add4	90 d4		bcc $adaa			bcc 	_CCVSearch
.add6	e6 37		inc $37				inc 	zTemp0+1
.add8	80 d0		bra $adaa			bra 	_CCVSearch
.adda					_CCVFail:
.adda	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.addc	ad 83 04	lda $0483			lda 	identHash
.addf	91 36		sta ($36),y			sta 	(zTemp0),y
.ade1	c8		iny				iny 								; offset 2 is the type byte
.ade2	ad 84 04	lda $0484			lda 	identTypeByte
.ade5	91 36		sta ($36),y			sta 	(zTemp0),y
.ade7	c8		iny				iny
.ade8					_CCVData:
.ade8	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.adea	91 36		sta ($36),y			sta 	(zTemp0),y
.adec	c8		iny				iny
.aded	c0 08		cpy #$08			cpy 	#8
.adef	90 f7		bcc $ade8			bcc 	_CCVData
.adf1	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.adf4					_CCVCopyName:
.adf4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.adf7	91 36		sta ($36),y			sta 	(zTemp0),y
.adf9	e8		inx				inx
.adfa	c8		iny				iny
.adfb	ec 82 04	cpx $0482			cpx 	identTypeEnd
.adfe	d0 f4		bne $adf4			bne 	_CCVCopyName
.ae00	98		tya				tya 								; patch offset
.ae01	92 36		sta ($36)			sta 	(zTemp0)
.ae03	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ae05	91 36		sta ($36),y			sta 	(zTemp0),y
.ae07	88		dey				dey
.ae08	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ae0a	09 80		ora #$80			ora 	#$80
.ae0c	91 36		sta ($36),y			sta 	(zTemp0),y
.ae0e					_CCVFound:
.ae0e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ae10	38		sec				sec
.ae11	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ae13	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ae15	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.ae18	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ae1a	20 96 ad	jsr $ad96			jsr 	TokeniseWriteByte
.ae1d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
