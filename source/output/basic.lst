
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 11:12:46 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 43 8d	jsr $8d43			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	02 84					.word	ShiftLeft                        ; $00 <<
>8016	fc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	f2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	bc 96					.word	SyntaxError                      ; $03 !!3
>801c	bc 96					.word	SyntaxError                      ; $04 ><
>801e	06 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	05 84					.word	ShiftRight                       ; $06 >>
>8022	bc 96					.word	SyntaxError                      ; $07 !!7
>8024	bc 96					.word	SyntaxError                      ; $08 !!8
>8026	bc 96					.word	SyntaxError                      ; $09 !!9
>8028	bc 96					.word	SyntaxError                      ; $0a !!10
>802a	bc 96					.word	SyntaxError                      ; $0b !!11
>802c	bc 96					.word	SyntaxError                      ; $0c !!12
>802e	bc 96					.word	SyntaxError                      ; $0d !!13
>8030	bc 96					.word	SyntaxError                      ; $0e !!14
>8032	bc 96					.word	SyntaxError                      ; $0f !!15
>8034	bc 96					.word	SyntaxError                      ; $10 @
>8036	bc 96					.word	SyntaxError                      ; $11 !!17
>8038	bc 96					.word	SyntaxError                      ; $12 !!18
>803a	bc 96					.word	SyntaxError                      ; $13 [
>803c	1c 92					.word	IntegerDivide                    ; $14 \
>803e	bc 96					.word	SyntaxError                      ; $15 ]
>8040	8b 85					.word	EorInteger                       ; $16 ^
>8042	bc 96					.word	SyntaxError                      ; $17 _
>8044	bc 96					.word	SyntaxError                      ; $18 `
>8046	bc 96					.word	SyntaxError                      ; $19 !!25
>8048	bc 96					.word	SyntaxError                      ; $1a !!26
>804a	bc 96					.word	SyntaxError                      ; $1b {
>804c	45 85					.word	OraInteger                       ; $1c |
>804e	bc 96					.word	SyntaxError                      ; $1d }
>8050	bc 96					.word	SyntaxError                      ; $1e ~
>8052	bc 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	bc 96					.word	SyntaxError                      ; $20
>8056	d1 85					.word	WordIndirect                     ; $21 !
>8058	bc 96					.word	SyntaxError                      ; $22 "
>805a	bc 96					.word	SyntaxError                      ; $23 #
>805c	bc 96					.word	SyntaxError                      ; $24 $
>805e	69 92					.word	IntegerModulus                   ; $25 %
>8060	ff 84					.word	AndInteger                       ; $26 &
>8062	bc 96					.word	SyntaxError                      ; $27 '
>8064	bc 96					.word	SyntaxError                      ; $28 (
>8066	bc 96					.word	SyntaxError                      ; $29 )
>8068	de 92					.word	MulInteger                       ; $2a *
>806a	99 84					.word	AddInteger                       ; $2b +
>806c	bc 96					.word	SyntaxError                      ; $2c ,
>806e	d4 84					.word	SubInteger                       ; $2d -
>8070	bc 96					.word	SyntaxError                      ; $2e .
>8072	75 94					.word	FDivideCommand                   ; $2f /
>8074	bc 96					.word	SyntaxError                      ; $30 0
>8076	bc 96					.word	SyntaxError                      ; $31 1
>8078	bc 96					.word	SyntaxError                      ; $32 2
>807a	bc 96					.word	SyntaxError                      ; $33 3
>807c	bc 96					.word	SyntaxError                      ; $34 4
>807e	bc 96					.word	SyntaxError                      ; $35 5
>8080	bc 96					.word	SyntaxError                      ; $36 6
>8082	bc 96					.word	SyntaxError                      ; $37 7
>8084	bc 96					.word	SyntaxError                      ; $38 8
>8086	bc 96					.word	SyntaxError                      ; $39 9
>8088	bc 96					.word	SyntaxError                      ; $3a :
>808a	bc 96					.word	SyntaxError                      ; $3b ;
>808c	de 82					.word	BinaryCompareLess                ; $3c <
>808e	d4 82					.word	BinaryCompareEqual               ; $3d =
>8090	e8 82					.word	BinaryCompareGreater             ; $3e >
>8092	f8 85					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	4a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	57 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	bc 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	bb 95					.word	AbsUnary                         ; $83 ABS(
>809c	3b 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	cb 95					.word	AscUnary                         ; $85 ASC(
>80a0	d8 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	d0 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	d8 95					.word	FracUnary                        ; $88 FRAC(
>80a6	ee 95					.word	IntUnary                         ; $89 INT(
>80a8	44 96					.word	IsValUnary                       ; $8a ISVAL(
>80aa	b2 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	00 96					.word	LenUnary                         ; $8c LEN(
>80ae	dc 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	75 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	c2 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	8b 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	1a 96					.word	SgnUnary                         ; $91 SGN(
>80b8	ea 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	05 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	c4 82					.word	UnaryTrue                        ; $94 TRUE
>80be	3a 96					.word	ValUnary                         ; $95 VAL(
>80c0	bc 96					.word	SyntaxError                      ; $96 FOR
>80c2	bc 96					.word	SyntaxError                      ; $97 IF
>80c4	bc 96					.word	SyntaxError                      ; $98 PROC
>80c6	bc 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	bc 96					.word	SyntaxError                      ; $9a WHILE
>80ca	bc 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	bc 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	bc 96					.word	SyntaxError                      ; $9d NEXT
>80d0	bc 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	bc 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	bc 96					.word	SyntaxError                      ; $a1 CLS
>80d8	bc 96					.word	SyntaxError                      ; $a2 DATA
>80da	bc 96					.word	SyntaxError                      ; $a3 DIM
>80dc	bc 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	bc 96					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	bc 96					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	bc 96					.word	SyntaxError                      ; $aa RETURN
>80ea	bc 96					.word	SyntaxError                      ; $ab THEN
>80ec	bc 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	bc 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	bc 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	bc 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	bc 96					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	bc 96					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	bc 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	bc 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	bc 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	bc 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 7d 8c	jsr $8c7d			jsr 	EvaluateInteger 			; the assert test
.810f	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 5f 82	jmp $825f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 92 8c	jsr $8c92			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 cd 97	jsr $97cd			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad 49 86	lda $8649			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 13 92	jsr $9213			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 61 86	jsr $8661			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 9e 86	jmp $869e			jmp 	AssignNumber
.818b					_ASString:
.818b	4c 0c 87	jmp $870c			jmp 	AssignString
.818e					_ASError:
.818e	4c c6 96	jmp $96c6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 b0 91	jsr $91b0			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 51 8c	jsr $8c51			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 27 8b	jsr $8b27			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 39		beq $8247			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 1e		bcs $8241			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 44 82	jsr $8244			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
.822f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8231	90 05		bcc $8238			bcc 	_CRNotVariable
.8233					_CRGoLet:
.8233	20 62 81	jsr $8162			jsr 	LetCommand
.8236	80 dc		bra $8214			bra 	_CRMainLoop
.8238					_CRNotVariable:
.8238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.823a	f0 f7		beq $8233			beq 	_CRGoLet
.823c	c9 21		cmp #$21			cmp 	#KWD_PLING
.823e	f0 f3		beq $8233			beq 	_CRGoLet
>8240	db						.byte 	$DB 						; causes a break in the emulator
.8241					_CRSyntaxError:
.8241	4c bc 96	jmp $96bc			jmp 	SyntaxError
.8244					_CRCallVector0:
.8244	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8247					CRNoProgram:
.8247	4c 5f 81	jmp $815f			jmp 	EndCommand
.824a					EOLCommand:
.824a	18		clc				clc
.824b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.824d	65 30		adc $30				adc 	codePtr
.824f	85 30		sta $30				sta 	codePtr
.8251	90 02		bcc $8255			bcc 	_CREExit
.8253	e6 31		inc $31				inc 	codePtr+1
.8255					_CREExit:
.8255	80 b3		bra $820a			bra 	RunNewLine
.8257					Shift1Command:
.8257	b1 30		lda ($30),y			lda 	(codePtr),y
.8259	c8		iny				iny
.825a	0a		asl a				asl 	a
.825b	aa		tax				tax
.825c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9203					CheckRightBracket:
.9203	b1 30		lda ($30),y			lda 	(codePtr),y
.9205	c8		iny				iny
.9206	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9208	d0 0f		bne $9219			bne 	CNAFail
.920a	60		rts				rts
.920b					CheckComma:
.920b	b1 30		lda ($30),y			lda 	(codePtr),y
.920d	c8		iny				iny
.920e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9210	d0 07		bne $9219			bne 	CNAFail
.9212	60		rts				rts
.9213					CheckNextA:
.9213	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9215	d0 02		bne $9219			bne 	CNAFail
.9217	c8		iny				iny 								; skip character
.9218	60		rts				rts 								; and exit
.9219					CNAFail:
.9219	4c bc 96	jmp $96bc			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.825f					ErrorHandler:
.825f	a8		tay				tay 								; find the error text
.8260	f0 42		beq $82a4			beq 	_EHEnd
.8262	a2 00		ldx #$00			ldx 	#0
.8264					_EHFind:
.8264	88		dey				dey 								; found the error text ?
.8265	f0 0a		beq $8271			beq 	_EHFound
.8267					_EHFindZero:
.8267	bd d5 96	lda $96d5,x			lda 	ErrorText,x 				; find the next error
.826a	e8		inx				inx
.826b	c9 00		cmp #$00			cmp 	#0
.826d	d0 f8		bne $8267			bne 	_EHFindZero
.826f	80 f3		bra $8264			bra 	_EHFind
.8271					_EHFound:
.8271	bd d5 96	lda $96d5,x			lda 	ErrorText,x 				; print the message
.8274	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.8277	e8		inx				inx
.8278	bd d5 96	lda $96d5,x			lda 	ErrorText,x
.827b	d0 f4		bne $8271			bne 	_EHFound
.827d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.827f	b1 30		lda ($30),y			lda 	(codePtr),y
.8281	d0 05		bne $8288			bne 	_EHAtMsg
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	f0 17		beq $829f			beq 	_EHCREnd
.8288					_EHAtMsg:
.8288	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.828a	a9 a7		lda #$a7			lda 	#_AtMsg & $FF
.828c	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.828f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8291	b1 30		lda ($30),y			lda 	(codePtr),y
.8293	48		pha				pha
.8294	c8		iny				iny
.8295	b1 30		lda ($30),y			lda 	(codePtr),y
.8297	aa		tax				tax
.8298	68		pla				pla
.8299	20 5f 93	jsr $935f			jsr 	ConvertInt16 				; convert XA to string
.829c	20 b1 82	jsr $82b1			jsr 	PrintStringXA 				; and print it.
.829f					_EHCREnd:
.829f	a9 0d		lda #$0d			lda 	#13 						; new line
.82a1	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.82a4					_EHEnd:
.82a4	4c 0c 80	jmp $800c			jmp 	WarmStart
>82a7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82af	20 00
.82b1					PrintStringXA:
.82b1	5a		phy				phy
.82b2	86 37		stx $37				stx 	zTemp0+1
.82b4	85 36		sta $36				sta 	zTemp0
.82b6	a0 00		ldy #$00			ldy 	#0
.82b8					_PSXALoop:
.82b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ba	f0 06		beq $82c2			beq 	_PSXAExit
.82bc	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.82bf	c8		iny				iny
.82c0	80 f6		bra $82b8			bra 	_PSXALoop
.82c2					_PSXAExit:
.82c2	7a		ply				ply
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82c4					UnaryTrue:
.82c4	fa		plx				plx
.82c5					ReturnTrue:
.82c5	a9 01		lda #$01			lda 	#1  						; set to 1
.82c7	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.82ca	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	60		rts				rts
.82d0					UnaryFalse:
.82d0	fa		plx				plx
.82d1					ReturnFalse:
.82d1	4c 06 8d	jmp $8d06			jmp 	NSMSetZero 					; set it all to zero
.82d4					BinaryCompareEqual:
.82d4	fa		plx				plx
.82d5	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82d8	c9 00		cmp #$00			cmp 	#0
.82da	f0 e9		beq $82c5			beq 	ReturnTrue
.82dc	80 f3		bra $82d1			bra 	ReturnFalse
.82de					BinaryCompareLess:
.82de	fa		plx				plx
.82df	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82e2	c9 ff		cmp #$ff			cmp 	#$FF
.82e4	f0 df		beq $82c5			beq 	ReturnTrue
.82e6	80 e9		bra $82d1			bra 	ReturnFalse
.82e8					BinaryCompareGreater:
.82e8	fa		plx				plx
.82e9	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82ec	c9 01		cmp #$01			cmp 	#1
.82ee	f0 d5		beq $82c5			beq 	ReturnTrue
.82f0	80 df		bra $82d1			bra 	ReturnFalse
.82f2					BinaryCompareNotEqual:
.82f2	fa		plx				plx
.82f3	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82f6	c9 00		cmp #$00			cmp 	#0
.82f8	d0 cb		bne $82c5			bne 	ReturnTrue
.82fa	80 d5		bra $82d1			bra 	ReturnFalse
.82fc					BinaryCompareLessEqual:
.82fc	fa		plx				plx
.82fd	20 10 83	jsr $8310			jsr 	CompareBaseCode
.8300	c9 01		cmp #$01			cmp 	#1
.8302	d0 c1		bne $82c5			bne 	ReturnTrue
.8304	80 cb		bra $82d1			bra 	ReturnFalse
.8306					BinaryCompareGreaterEqual:
.8306	fa		plx				plx
.8307	20 10 83	jsr $8310			jsr 	CompareBaseCode
.830a	c9 ff		cmp #$ff			cmp 	#$FF
.830c	d0 b7		bne $82c5			bne 	ReturnTrue
.830e	80 c1		bra $82d1			bra 	ReturnFalse
.8310					CompareBaseCode:
.8310	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; make both values if references.
.8313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8319	29 10		and #$10			and 	#NSTString
.831b	d0 40		bne $835d			bne 	_CBCString
.831d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8320	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8323	d0 3b		bne $8360			bne 	_CBCFloat
.8325	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832b	29 08		and #$08			and 	#NSTFloat
.832d	d0 31		bne $8360			bne 	_CBCFloat
.832f	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8332	e8		inx				inx
.8333	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8336	ca		dex				dex
.8337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.833a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.833d	10 0b		bpl $834a			bpl 	_CDCSameSign
.833f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8342	30 16		bmi $835a			bmi 	_CBCLess 					; return $FF
.8344					_CBCGreater:
.8344	a9 01		lda #$01			lda 	#1
.8346	60		rts				rts
.8347					_CBCEqual:
.8347	a9 00		lda #$00			lda 	#0
.8349	60		rts				rts
.834a					_CDCSameSign:
.834a	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; unsigned subtract
.834d	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; or the mantissa together
.8350	f0 f5		beq $8347			beq 	_CBCEqual 					; -0 == 0
.8352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8355	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8358	10 ea		bpl $8344			bpl 	_CBCGreater
.835a					_CBCLess:
.835a	a9 ff		lda #$ff			lda 	#$FF
.835c	60		rts				rts
.835d					_CBCString:
.835d	4c c9 83	jmp $83c9			jmp 	CompareStrings
.8360					_CBCFloat:
.8360	4c 5b 94	jmp $945b			jmp 	CompareFloat
.8363					CompareFixMinusZero:
.8363	20 36 8d	jsr $8d36			jsr 	NSMIsZero
.8366	d0 03		bne $836b			bne 	_CFXMZNotZero
.8368	9e 00 06	stz $0600,x			stz 	NSStatus,x
.836b					_CFXMZNotZero:
.836b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.836c					StringConcat:
.836c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.836f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8372	29 18		and #$18			and 	#NSBTypeMask
.8374	c9 10		cmp #$10			cmp 	#NSTString
.8376	d0 4e		bne $83c6			bne		_SCType
.8378	64 38		stz $38				stz 	zTemp1 						; counting total length
.837a	e8		inx				inx
.837b	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for second
.837e	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for second
.8381	ca		dex				dex
.8382	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for first
.8385	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for first
.8388	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.838a	20 ee 97	jsr $97ee			jsr 	StringTempAllocate
.838d	20 b7 83	jsr $83b7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8390	e8		inx				inx
.8391	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; copy second out
.8394	20 b7 83	jsr $83b7			jsr 	_SCCopy
.8397	ca		dex				dex
.8398	60		rts				rts
.8399					_SCSetupZ0:
.8399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.839c	85 36		sta $36				sta 	zTemp0
.839e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83a1	85 37		sta $37				sta 	zTemp0+1
.83a3	60		rts				rts
.83a4					_SCLengthZ0:
.83a4	5a		phy				phy
.83a5	a0 00		ldy #$00			ldy 	#0
.83a7					_SCLenLoop:
.83a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a9	f0 0a		beq $83b5			beq 	_SCLExit
.83ab	c8		iny				iny
.83ac	e6 38		inc $38				inc 	zTemp1
.83ae	10 f7		bpl $83a7			bpl		_SCLenLoop
.83b0	a9 09		lda #$09		lda	#9
.83b2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.83b5					_SCLExit:
.83b5	7a		ply				ply
.83b6	60		rts				rts
.83b7					_SCCopy:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCCopyLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 06		beq $83c4			beq 	_SCCExit
.83be	20 2c 98	jsr $982c			jsr 	StringTempWrite
.83c1	c8		iny				iny
.83c2	80 f6		bra $83ba			bra 	_SCCopyLoop
.83c4					_SCCExit:
.83c4	7a		ply				ply
.83c5	60		rts				rts
.83c6					_SCType:
.83c6	4c c6 96	jmp $96c6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.921c					IntegerDivide:
.921c	fa		plx				plx
.921d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9220	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9223	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9224	0a		asl a				asl 	a
.9225	10 05		bpl $922c			bpl 	_NotRef
.9227	48		pha				pha
.9228	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.922b	68		pla				pla
.922c					_NotRef:
.922c	0a		asl a				asl 	a
.922d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.922f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9232	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9235	f0 03		beq $923a			beq 	_IntegerCode 				; if clear, then we have two integers
.9237	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.923a					_IntegerCode:
.923a	20 5c 92	jsr $925c			jsr 	CheckDivideZero 			; do div zero check
.923d	20 94 92	jsr $9294			jsr 	Int32Divide 				; do the division
.9240	20 51 93	jsr $9351			jsr 	CalculateSign 				; calculate result sign
.9243					NSMCopyPlusTwoToZero:
.9243	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9246	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9249	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.924c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.924f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9252	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9255	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9258	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.925b	60		rts				rts
.925c					CheckDivideZero:
.925c	e8		inx				inx
.925d	20 36 8d	jsr $8d36			jsr 	NSMIsZero
.9260	f0 02		beq $9264			beq 	_CDVError
.9262	ca		dex				dex
.9263	60		rts				rts
.9264					_CDVError:
.9264	a9 03		lda #$03		lda	#3
.9266	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9269					IntegerModulus:
.9269	fa		plx				plx
.926a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.926d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9270	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9271	0a		asl a				asl 	a
.9272	10 05		bpl $9279			bpl 	_NotRef
.9274	48		pha				pha
.9275	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9278	68		pla				pla
.9279					_NotRef:
.9279	0a		asl a				asl 	a
.927a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.927c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.927f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9282	f0 03		beq $9287			beq 	_IntegerCode 				; if clear, then we have two integers
.9284	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.9287					_IntegerCode:
.9287	20 5c 92	jsr $925c			jsr 	CheckDivideZero 			; do div zero check
.928a	20 94 92	jsr $9294			jsr 	Int32Divide 				; do the division
.928d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9290	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9293	60		rts				rts
.9294					Int32Divide:
.9294	48		pha				pha 								; save AXY
.9295	5a		phy				phy
.9296	20 dd 8c	jsr $8cdd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9299	20 02 8d	jsr $8d02			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.929c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.929e					_I32DivideLoop:
.929e	e8		inx				inx
.929f	e8		inx				inx
.92a0	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.92a3	ca		dex				dex
.92a4	ca		dex				dex
.92a5	20 1c 8d	jsr $8d1c			jsr 	NSMRotateLeft
.92a8	20 d4 92	jsr $92d4			jsr 	DivideCheckSubtract 		; check if subtract possible
.92ab	90 03		bcc $92b0			bcc 	_I32DivideNoCarryIn
.92ad	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.92b0					_I32DivideNoCarryIn:
.92b0	88		dey				dey 								; loop round till division completed.
.92b1	d0 eb		bne $929e			bne 	_I32DivideLoop
.92b3	7a		ply				ply 								; restore AXY and exit
.92b4	68		pla				pla
.92b5	60		rts				rts
.92b6					Int32ShiftDivide:
.92b6	48		pha				pha 								; save AY
.92b7	5a		phy				phy
.92b8	e8		inx				inx 								; clear S[X+2]
.92b9	e8		inx				inx
.92ba	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.92bd	ca		dex				dex
.92be	ca		dex				dex
.92bf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.92c1					_I32SDLoop:
.92c1	20 d4 92	jsr $92d4			jsr 	DivideCheckSubtract 		; check if subtract possible
.92c4	e8		inx				inx
.92c5	e8		inx				inx
.92c6	20 1c 8d	jsr $8d1c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.92c9	ca		dex				dex
.92ca	ca		dex				dex
.92cb	20 1c 8d	jsr $8d1c			jsr 	NSMRotateLeft
.92ce	88		dey				dey 	 							; do 31 times
.92cf	d0 f0		bne $92c1			bne 	_I32SDLoop
.92d1	7a		ply				ply 								; restore AY and exit
.92d2	68		pla				pla
.92d3	60		rts				rts
.92d4					DivideCheckSubtract:
.92d4	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.92d7	b0 04		bcs $92dd			bcs 	_DCSExit 					; if carry set, then could do, exit
.92d9	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; add it back in
.92dc	18		clc				clc 								; and return False
.92dd					_DCSExit:
.92dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.92de					MulInteger:
.92de	fa		plx				plx
.92df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92e2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92e5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92e6	0a		asl a				asl 	a
.92e7	10 05		bpl $92ee			bpl 	_NotRef
.92e9	48		pha				pha
.92ea	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92ed	68		pla				pla
.92ee					_NotRef:
.92ee	0a		asl a				asl 	a 							; put MSB of type into A:7
.92ef	30 0b		bmi $92fc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92f1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92f4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92f7	f0 06		beq $92ff			beq 	_IntegerCode 				; if clear, then we have two integers
.92f9	4c 32 95	jmp $9532			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.92fc					_StringData:
.92fc	4c d0 96	jmp $96d0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92ff					_IntegerCode:
.92ff	20 0c 93	jsr $930c			jsr 	MultiplyShort
.9302	c9 00		cmp #$00			cmp 	#0
.9304	f0 05		beq $930b			beq 	_MIExit
.9306	a9 04		lda #$04		lda	#4
.9308	4c 5f 82	jmp $825f		jmp	ErrorHandler
.930b					_MIExit:
.930b	60		rts				rts
.930c					MultiplyShort:
.930c	5a		phy				phy 								; save Y
.930d	20 dd 8c	jsr $8cdd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9310	20 02 8d	jsr $8d02			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9313	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9315					_I32MLoop:
.9315	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9318	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.931b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.931e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9321	f0 28		beq $934b			beq 	_I32MExit 					; exit if zero
.9323	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9326	29 01		and #$01			and 	#1
.9328	f0 0e		beq $9338			beq 	_I32MNoAdd
.932a	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.932d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9330	10 06		bpl $9338			bpl 	_I32MNoAdd
.9332					_I32ShiftRight:
.9332	20 29 8d	jsr $8d29			jsr 	NSMShiftRight 				; shift S[X] right
.9335	c8		iny				iny 								; increment shift count
.9336	80 0a		bra $9342			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9338					_I32MNoAdd:
.9338	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.933b	70 f5		bvs $9332			bvs 	_I32ShiftRight 				; instead.
.933d	e8		inx				inx
.933e	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9341	ca		dex				dex
.9342					_I32MShiftUpper:
.9342	e8		inx				inx 								; shift S[X+2] right
.9343	e8		inx				inx
.9344	20 29 8d	jsr $8d29			jsr 	NSMShiftRight
.9347	ca		dex				dex
.9348	ca		dex				dex
.9349	80 ca		bra $9315			bra 	_I32MLoop 					; try again.
.934b					_I32MExit:
.934b	20 51 93	jsr $9351			jsr 	CalculateSign
.934e	98		tya				tya 								; shift in A
.934f	7a		ply				ply 								; restore Y and exit
.9350	60		rts				rts
.9351					CalculateSign:
.9351	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9354	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9357	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.935a	0a		asl a				asl 	a 							; shift bit 7 into carry
.935b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.935e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83c9					CompareStrings:
.83c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83cf	29 10		and #$10			and 	#NSBIsString
.83d1	f0 2c		beq $83ff			beq 	_CSTypeError
.83d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83d6	85 36		sta $36				sta 	zTemp0
.83d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83e0	85 38		sta $38				sta 	zTemp1
.83e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83e5	85 39		sta $39				sta 	zTemp1+1
.83e7	5a		phy				phy 								; save Y so we can access strings
.83e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83ea					_CSLoop:
.83ea	c8		iny				iny
.83eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83ef	d0 06		bne $83f7			bne 	_CSDifferent
.83f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83f3	d0 f5		bne $83ea			bne 	_CSLoop 					; still comparing
.83f5					_CSExit:
.83f5	7a		ply				ply 								; reached end, return zero in A from EOS
.83f6	60		rts				rts
.83f7					_CSDifferent:
.83f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83f9	90 fa		bcc $83f5			bcc		_CSExit
.83fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83fd	80 f6		bra $83f5			bra 	_CSExit
.83ff					_CSTypeError:
.83ff	4c c6 96	jmp $96c6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8402					ShiftLeft:
.8402	38		sec				sec
.8403	80 01		bra $8406			bra 	ShiftMain
.8405					ShiftRight:
.8405	18		clc				clc
.8406					ShiftMain:
.8406	fa		plx				plx 								; restore X
.8407	08		php				php 								; save direction
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.840b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.840e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.840f	0a		asl a				asl 	a
.8410	10 05		bpl $8417			bpl 	_NotRef
.8412	48		pha				pha
.8413	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8416	68		pla				pla
.8417					_NotRef:
.8417	0a		asl a				asl 	a
.8418	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.841a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.841d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8420	f0 03		beq $8425			beq 	_IntegerCode 				; if clear, then we have two integers
.8422	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.8425					_IntegerCode:
.8425	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8428	29 e0		and #$e0			and 	#$E0
.842a	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.842d	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8430	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8433	d0 13		bne $8448			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8435					_SMLoop:
.8435	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8438	30 11		bmi $844b			bmi 	_SMExit 					; exit if done.
.843a	28		plp				plp 								; restore direcition setting
.843b	08		php				php
.843c	90 05		bcc $8443			bcc 	_SMRight
.843e	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; shift left if CS
.8441	80 f2		bra $8435			bra 	_SMLoop
.8443					_SMRight:
.8443	20 29 8d	jsr $8d29			jsr 	NSMShiftRight 				; shift right if CC
.8446	80 ed		bra $8435			bra 	_SMLoop
.8448					_SMExit0:
.8448	20 06 8d	jsr $8d06			jsr 	NSMSetZero 					; return zero.
.844b					_SMExit:
.844b	28		plp				plp 								; throw direction
.844c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.844d					AddTopTwoStack:
.844d	18		clc				clc
.844e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8451	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8454	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8457	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.845a	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.845d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8460	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8463	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8466	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8469	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.846c	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.846f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8472	60		rts				rts
.8473					SubTopTwoStack:
.8473	38		sec				sec
.8474	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8477	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.847a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.847d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8480	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8483	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8486	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8489	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.848c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.848f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8492	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8495	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8498	60		rts				rts
.8499					AddInteger:
.8499	fa		plx				plx
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.849d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84a1	0a		asl a				asl 	a
.84a2	10 05		bpl $84a9			bpl 	_NotRef
.84a4	48		pha				pha
.84a5	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a8	68		pla				pla
.84a9					_NotRef:
.84a9	0a		asl a				asl 	a 							; put MSB of type into A:7
.84aa	30 0b		bmi $84b7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84ac	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84b2	f0 06		beq $84ba			beq 	_IntegerCode 				; if clear, then we have two integers
.84b4	4c ba 93	jmp $93ba			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84b7					_StringData:
.84b7	4c 6c 83	jmp $836c			jmp 	StringConcat							; at least one string - don't know both are strings.
.84ba					_IntegerCode:
.84ba					AddCode:
.84ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84bd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84c0	10 8b		bpl $844d			bpl 	AddTopTwoStack
.84c2	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; do a physical subtraction
.84c5	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84c8	10 09		bpl $84d3			bpl 	_AddExit
.84ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84d0	20 bb 8c	jsr $8cbb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84d3					_AddExit:
.84d3	60		rts				rts
.84d4					SubInteger:
.84d4	fa		plx				plx
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84dc	0a		asl a				asl 	a
.84dd	10 05		bpl $84e4			bpl 	_NotRef
.84df	48		pha				pha
.84e0	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e3	68		pla				pla
.84e4					_NotRef:
.84e4	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e5	30 0b		bmi $84f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ed	f0 06		beq $84f5			beq 	_IntegerCode 				; if clear, then we have two integers
.84ef	4c bf 93	jmp $93bf			jmp 	FloatingPointSub 							; otherwise at least one float.
.84f2					_StringData:
.84f2	4c d0 96	jmp $96d0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84f5					_IntegerCode:
.84f5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84f8	49 80		eor #$80			eor 	#$80
.84fa	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84fd	80 bb		bra $84ba			bra 	AddCode 					; and do the same code as add.
.84ff					AndInteger:
.84ff	fa		plx				plx
.8500	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8503	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8506	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8507	0a		asl a				asl 	a
.8508	10 05		bpl $850f			bpl 	_NotRef
.850a	48		pha				pha
.850b	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850e	68		pla				pla
.850f					_NotRef:
.850f	0a		asl a				asl 	a
.8510	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8512	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8515	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8518	f0 03		beq $851d			beq 	_IntegerCode 				; if clear, then we have two integers
.851a	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.851d					_IntegerCode:
.851d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8520	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8523	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8526	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8529	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.852c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8532	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8535	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8538	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.853b	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.853e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8541	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8544	60		rts				rts
.8545					OraInteger:
.8545	fa		plx				plx
.8546	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8549	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854d	0a		asl a				asl 	a
.854e	10 05		bpl $8555			bpl 	_NotRef
.8550	48		pha				pha
.8551	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8554	68		pla				pla
.8555					_NotRef:
.8555	0a		asl a				asl 	a
.8556	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8558	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.855b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855e	f0 03		beq $8563			beq 	_IntegerCode 				; if clear, then we have two integers
.8560	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.8563					_IntegerCode:
.8563	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8566	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8569	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.856c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856f	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8572	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8575	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8578	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.857b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8581	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8584	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8587	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.858a	60		rts				rts
.858b					EorInteger:
.858b	fa		plx				plx
.858c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.858f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8592	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8593	0a		asl a				asl 	a
.8594	10 05		bpl $859b			bpl 	_NotRef
.8596	48		pha				pha
.8597	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.859a	68		pla				pla
.859b					_NotRef:
.859b	0a		asl a				asl 	a
.859c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.859e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85a4	f0 03		beq $85a9			beq 	_IntegerCode 				; if clear, then we have two integers
.85a6	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.85a9					_IntegerCode:
.85a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85ac	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85b5	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85be	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85c7	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85d0	60		rts				rts
.85d1					WordIndirect:
.85d1	fa		plx				plx
.85d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85d9	0a		asl a				asl 	a
.85da	10 05		bpl $85e1			bpl 	_NotRef
.85dc	48		pha				pha
.85dd	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85e0	68		pla				pla
.85e1					_NotRef:
.85e1	0a		asl a				asl 	a
.85e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85e4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ea	f0 03		beq $85ef			beq 	_IntegerCode 				; if clear, then we have two integers
.85ec	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.85ef					_IntegerCode:
.85ef	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.85f2	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.85f4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85f7	60		rts				rts
.85f8					ByteIndirect:
.85f8	fa		plx				plx
.85f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8600	0a		asl a				asl 	a
.8601	10 05		bpl $8608			bpl 	_NotRef
.8603	48		pha				pha
.8604	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8607	68		pla				pla
.8608					_NotRef:
.8608	0a		asl a				asl 	a
.8609	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.860b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.860e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8611	f0 03		beq $8616			beq 	_IntegerCode 				; if clear, then we have two integers
.8613	4c c6 96	jmp $96c6			jmp 	TypeError 					; anything else, type mismatch.
.8616					_IntegerCode:
.8616	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.8619	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.861b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.861e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.935f					ConvertInt16:
.935f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9362	8e 10 06	stx $0610			stx 	NSMantissa1
.9365	9c 18 06	stz $0618			stz 	NSMantissa2
.9368	9c 20 06	stz $0620			stz 	NSMantissa3
.936b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.936e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9370	a9 0a		lda #$0a			lda 	#10 						; base
.9372	80 00		bra $9374			bra 	ConvertInt32
.9374					ConvertInt32:
.9374	5a		phy				phy
.9375	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9377	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.937a	10 08		bpl $9384			bpl 	_CI32NotNeg
.937c	48		pha				pha
.937d	a9 2d		lda #$2d			lda 	#'-'
.937f	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9382	c8		iny				iny
.9383	68		pla				pla
.9384					_CI32NotNeg:
.9384	20 92 93	jsr $9392			jsr 	_CI32DivideConvert 			; recursive conversion
.9387	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9389	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.938c	7a		ply				ply
.938d	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.938f	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9391	60		rts				rts
.9392					_CI32DivideConvert:
.9392	e8		inx				inx 								; write to next slot up
.9393	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.9396	ca		dex				dex
.9397	20 94 92	jsr $9294			jsr 	Int32Divide 				; divide
.939a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.939d	48		pha				pha
.939e	20 43 92	jsr $9243			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93a1	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; is it zero ?
.93a4	f0 06		beq $93ac			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93a6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93a9	20 92 93	jsr $9392			jsr 	_CI32DivideConvert 			; and recusrively call.
.93ac					_CI32NoRecurse:
.93ac	68		pla				pla 								; remainder
.93ad	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.93af	90 02		bcc $93b3			bcc 	_CI32NotHex
.93b1	69 26		adc #$26			adc 	#6+32
.93b3					_CI32NotHex:
.93b3	69 30		adc #$30			adc 	#48
.93b5	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.93b8	c8		iny				iny
.93b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.861f					PrecedenceLevel:
>861f	04					.byte	 4	; $00 <<
>8620	02					.byte	 2	; $01 <=
>8621	02					.byte	 2	; $02 <>
>8622	00					.byte	 0	; $03 !!3
>8623	00					.byte	 0	; $04 ><
>8624	02					.byte	 2	; $05 >=
>8625	04					.byte	 4	; $06 >>
>8626	00					.byte	 0	; $07 !!7
>8627	00					.byte	 0	; $08 !!8
>8628	00					.byte	 0	; $09 !!9
>8629	00					.byte	 0	; $0a !!10
>862a	00					.byte	 0	; $0b !!11
>862b	00					.byte	 0	; $0c !!12
>862c	00					.byte	 0	; $0d !!13
>862d	00					.byte	 0	; $0e !!14
>862e	00					.byte	 0	; $0f !!15
>862f	00					.byte	 0	; $10 @
>8630	00					.byte	 0	; $11 !!17
>8631	00					.byte	 0	; $12 !!18
>8632	00					.byte	 0	; $13 [
>8633	04					.byte	 4	; $14 \
>8634	00					.byte	 0	; $15 ]
>8635	01					.byte	 1	; $16 ^
>8636	00					.byte	 0	; $17 _
>8637	00					.byte	 0	; $18 `
>8638	00					.byte	 0	; $19 !!25
>8639	00					.byte	 0	; $1a !!26
>863a	00					.byte	 0	; $1b {
>863b	01					.byte	 1	; $1c |
>863c	00					.byte	 0	; $1d }
>863d	00					.byte	 0	; $1e ~
>863e	00					.byte	 0	; $1f [7m<7F>[m
>863f	00					.byte	 0	; $20
>8640	05					.byte	 5	; $21 !
>8641	00					.byte	 0	; $22 "
>8642	00					.byte	 0	; $23 #
>8643	05					.byte	 5	; $24 $
>8644	04					.byte	 4	; $25 %
>8645	01					.byte	 1	; $26 &
>8646	00					.byte	 0	; $27 '
>8647	00					.byte	 0	; $28 (
>8648	00					.byte	 0	; $29 )
>8649	04					.byte	 4	; $2a *
>864a	03					.byte	 3	; $2b +
>864b	00					.byte	 0	; $2c ,
>864c	03					.byte	 3	; $2d -
>864d	00					.byte	 0	; $2e .
>864e	04					.byte	 4	; $2f /
>864f	00					.byte	 0	; $30 0
>8650	00					.byte	 0	; $31 1
>8651	00					.byte	 0	; $32 2
>8652	00					.byte	 0	; $33 3
>8653	00					.byte	 0	; $34 4
>8654	00					.byte	 0	; $35 5
>8655	00					.byte	 0	; $36 6
>8656	00					.byte	 0	; $37 7
>8657	00					.byte	 0	; $38 8
>8658	00					.byte	 0	; $39 9
>8659	00					.byte	 0	; $3a :
>865a	00					.byte	 0	; $3b ;
>865b	02					.byte	 2	; $3c <
>865c	02					.byte	 2	; $3d =
>865d	02					.byte	 2	; $3e >
>865e	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.865f					EvaluateExpressionAt0:
.865f	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8661					EvaluateExpression:
.8661	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8663					EvaluateExpressionAtPrecedence:
.8663	48		pha				pha 								; save precedence level
.8664	20 32 89	jsr $8932			jsr 	EvaluateTerm 				; evaluate term into level X.
.8667	68		pla				pla 								; restore precedence level.
.8668					_EXPRLoop:
.8668	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.866e	b0 25		bcs $8695			bcs 	_EXPRExit
.8670	da		phx				phx 								; read the operator precedence
.8671	aa		tax				tax
.8672	bd 1f 86	lda $861f,x			lda 	PrecedenceLevel,x
.8675	fa		plx				plx
.8676	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8678	f0 1b		beq $8695			beq 	_EXPRExit
.867a	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.867c	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.867e	c5 37		cmp $37				cmp 	zTemp0+1
.8680	b0 13		bcs $8695			bcs		_EXPRExit 					; if current >= operator exit
.8682	48		pha				pha 								; save current precedence.
.8683	b1 30		lda ($30),y			lda 	(codePtr),y
.8685	c8		iny				iny
.8686	48		pha				pha
.8687	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8689	e8		inx				inx 								; work out the right hand side.
.868a	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.868d	ca		dex				dex
.868e	68		pla				pla 								; get operator, call the code.
.868f	20 98 86	jsr $8698			jsr 	_EXPRCaller
.8692	68		pla				pla 								; restore precedence level
.8693	80 d3		bra $8668			bra 	_EXPRLoop 					; and go round.
.8695					_EXPRExit:
.8695	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8697	60		rts				rts
.8698					_EXPRCaller:
.8698	da		phx				phx 								; save on stack, first thing is to restore it
.8699	0a		asl a				asl 	a 							; double so can use vectors into X
.869a	aa		tax				tax
.869b	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.93ba					FloatingPointAdd:
.93ba	20 5b 95	jsr $955b			jsr 	FloatPrepare 				; prepare for floats
.93bd	80 0b		bra $93ca			bra 	FloatAdd
.93bf					FloatingPointSub:
.93bf	20 5b 95	jsr $955b			jsr 	FloatPrepare 				; prepare for floats
.93c2					FloatSubtract:
.93c2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.93c5	49 80		eor #$80			eor 	#$80
.93c7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.93ca					FloatAdd:
.93ca	48		pha				pha
.93cb	5a		phy				phy
.93cc	20 6c 95	jsr $956c			jsr 	NSNormalise 				; normalise S[X]
.93cf	f0 54		beq $9425			beq 	_FAReturn1
.93d1	e8		inx				inx 								; normalise S[X+1]
.93d2	20 6c 95	jsr $956c			jsr 	NSNormalise
.93d5	ca		dex				dex
.93d6	c9 00		cmp #$00			cmp 	#0
.93d8	f0 6f		beq $9449			beq 	_FAExit 					; if so, just return A
.93da	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.93dd	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.93e0	f0 1b		beq $93fd			beq 	_FAExponentsEqual
.93e2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.93e5	a8		tay				tay
.93e6	38		sec				sec 								; do a signed comparison of the exponents.
.93e7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93ea	50 02		bvc $93ee			bvc 	_FANoSignedChange
.93ec	49 80		eor #$80			eor 	#$80
.93ee					_FANoSignedChange:
.93ee	29 80		and #$80			and 	#$80
.93f0	10 03		bpl $93f5			bpl 	_FAHaveMax
.93f2	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.93f5					_FAHaveMax:
.93f5	20 4c 94	jsr $944c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.93f8	e8		inx				inx
.93f9	20 4c 94	jsr $944c			jsr 	_FAShiftToExponent
.93fc	ca		dex				dex
.93fd					_FAExponentsEqual:
.93fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9400	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9403	30 10		bmi $9415			bmi 	_FADifferentSigns
.9405	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9408	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.940b	10 3c		bpl $9449			bpl 	_FAExit 					; if no, we are done.
.940d	20 29 8d	jsr $8d29			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9410	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9413	80 34		bra $9449			bra 	_FAExit
.9415					_FADifferentSigns:
.9415	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9418	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.941b	10 2c		bpl $9449			bpl 	_FAExit 					; if no, we are done.
.941d	20 b2 8c	jsr $8cb2			jsr 	NSMNegate 					; netate result
.9420	20 bb 8c	jsr $8cbb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9423	80 24		bra $9449			bra 	_FAExit
.9425					_FAReturn1:
.9425	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9428	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.942b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.942e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9431	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9434	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9437	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.943a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.943d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9440	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9443	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9446	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9449					_FAExit:
.9449	7a		ply				ply
.944a	68		pla				pla
.944b	60		rts				rts
.944c					_FAShiftToExponent:
.944c					_FAShiftToExponent2:
.944c	98		tya				tya 								; compare Y to exponent
.944d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9450	f0 08		beq $945a			beq 	_FASEExit 					; exit if so.
.9452	20 29 8d	jsr $8d29			jsr 	NSMShiftRight	 			; shift the mantissa right
.9455	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9458	80 f2		bra $944c			bra 	_FAShiftToExponent2
.945a					_FASEExit:
.945a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.945b					CompareFloat:
.945b	20 c2 93	jsr $93c2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.945e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9461	29 f8		and #$f8			and 	#$F8
.9463	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9466	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9469	f0 09		beq $9474			beq 	_FCExit 					; zero, so approximately identical
.946b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.946d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9470	10 02		bpl $9474			bpl 	_FCExit
.9472					_FCNegative:
.9472	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9474					_FCExit:
.9474	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9475					FDivideCommand:
.9475	fa		plx				plx	 								; restore stack position
.9476	20 5b 95	jsr $955b			jsr 	FloatPrepare 				; prepare for floats
.9479					FloatDivide:
.9479	48		pha				pha
.947a	e8		inx				inx
.947b	20 6c 95	jsr $956c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.947e	ca		dex				dex
.947f	c9 00		cmp #$00			cmp 	#0
.9481	f0 20		beq $94a3			beq 	_FDZero
.9483	20 6c 95	jsr $956c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9486	f0 19		beq $94a1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9488	20 b6 92	jsr $92b6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.948b	20 43 92	jsr $9243			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.948e	20 6c 95	jsr $956c			jsr		NSNormalise 				; renormalise
.9491	20 51 93	jsr $9351			jsr 	CalculateSign 				; calculate result sign
.9494	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9497	38		sec				sec
.9498	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.949b	38		sec				sec
.949c	e9 1e		sbc #$1e			sbc 	#30
.949e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94a1					_FDExit:
.94a1	68		pla				pla
.94a2	60		rts				rts
.94a3					_FDZero:
.94a3	a9 03		lda #$03		lda	#3
.94a5	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.94a8					FloatFractionalPart:
.94a8	5a		phy				phy
.94a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.94ac	29 7f		and #$7f			and 	#$7F
.94ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94b1	20 6c 95	jsr $956c			jsr 	NSNormalise
.94b4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.94b7	38		sec				sec
.94b8	e9 e0		sbc #$e0			sbc 	#$E0
.94ba	90 31		bcc $94ed			bcc 	_FFPExit 					; already fractional
.94bc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.94be	b0 2a		bcs $94ea			bcs 	_FFPZero
.94c0	a8		tay				tay 								; put count to do in Y
.94c1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.94c4	20 ef 94	jsr $94ef			jsr 	_FFPPartial
.94c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94ca	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.94cd	20 ef 94	jsr $94ef			jsr 	_FFPPartial
.94d0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94d3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94d6	20 ef 94	jsr $94ef			jsr 	_FFPPartial
.94d9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94dc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94df	20 ef 94	jsr $94ef			jsr 	_FFPPartial
.94e2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94e5	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; zeroed check.
.94e8	d0 03		bne $94ed			bne 	_FFPExit
.94ea					_FFPZero:
.94ea	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.94ed					_FFPExit:
.94ed	7a		ply				ply
.94ee	60		rts				rts
.94ef					_FFPPartial:
.94ef	c0 00		cpy #$00			cpy 	#0 							; no more to do
.94f1	f0 17		beq $950a			beq 	_FFFPPExit
.94f3	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.94f5	b0 0c		bcs $9503			bcs 	_FFFPPWholeByte
.94f7	5a		phy				phy
.94f8					_FFFPPLeft:
.94f8	0a		asl a				asl 	a
.94f9	88		dey				dey
.94fa	d0 fc		bne $94f8			bne 	_FFFPPLeft
.94fc	7a		ply				ply
.94fd					_FFFPPRight:
.94fd	4a		lsr a				lsr 	a
.94fe	88		dey				dey
.94ff	d0 fc		bne $94fd			bne 	_FFFPPRight
.9501	80 07		bra $950a			bra 	_FFFPPExit
.9503					_FFFPPWholeByte:
.9503	98		tya				tya 								; subtract 8 from count
.9504	38		sec				sec
.9505	e9 08		sbc #$08			sbc 	#8
.9507	a8		tay				tay
.9508	a9 00		lda #$00			lda 	#0 							; and clear all
.950a					_FFFPPExit:
.950a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.950b					FloatIntegerPart:
.950b	48		pha				pha
.950c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.950f	f0 1f		beq $9530			beq 	_FIPExit 					; if so do nothing
.9511	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; is it zero ?
.9514	f0 17		beq $952d			beq 	_FIPZero 					; if so return zero.
.9516	20 6c 95	jsr $956c			jsr 	NSNormalise 				; normalise
.9519	f0 12		beq $952d			beq 	_FIPZero 					; normalised to zero, exit zero
.951b					_FIPShift:
.951b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.951e	10 08		bpl $9528			bpl 	_FIPCheckZero
.9520	20 29 8d	jsr $8d29			jsr 	NSMShiftRight 				; shift mantissa right
.9523	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9526	80 f3		bra $951b			bra 	_FIPShift
.9528					_FIPCheckZero:
.9528	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; avoid -0 problem
.952b	d0 03		bne $9530			bne 	_FIPExit 					; set to zero if mantissa zero.
.952d					_FIPZero:
.952d	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.9530					_FIPExit:
.9530	68		pla				pla
.9531	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9532					FloatingPointMultiply:
.9532	20 5b 95	jsr $955b			jsr 	FloatPrepare 				; prepare for floats
.9535					FloatMultiply:
.9535	48		pha				pha
.9536	20 6c 95	jsr $956c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9539	f0 1b		beq $9556			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.953b	e8		inx				inx
.953c	20 6c 95	jsr $956c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.953f	ca		dex				dex
.9540	c9 00		cmp #$00			cmp 	#0
.9542	f0 0f		beq $9553			beq 	_FDSetZero
.9544	20 0c 93	jsr $930c			jsr 	MultiplyShort 				; calculate the result.
.9547	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.954a	18		clc				clc
.954b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.954e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9551	80 03		bra $9556			bra 	_FDExit
.9553					_FDSetZero:
.9553	20 06 8d	jsr $8d06			jsr 	NSMSetZero 					; return 0
.9556					_FDExit:
.9556	20 6c 95	jsr $956c			jsr 	NSNormalise 				; normalise the result
.9559	68		pla				pla
.955a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.955b					FloatPrepare:
.955b	20 71 87	jsr $8771			jsr 	DereferenceTopTwo 			; dereference the top two values
.955e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9561	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9564	29 10		and #$10			and 	#NSBIsString
.9566	d0 01		bne $9569			bne 	_FDType
.9568	60		rts				rts
.9569					_FDType:
.9569	4c c6 96	jmp $96c6			jmp 	TypeError
.956c					NSNormalise:
.956c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.956f	29 80		and #$80			and 	#$80
.9571	09 08		ora #$08			ora 	#NSTFloat
.9573	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9576	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; if zero exit
.9579	d0 09		bne $9584			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.957b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.957e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9581	a9 00		lda #$00			lda 	#0 							; set Z flag
.9583	60		rts				rts
.9584					_NSNormaliseOptimise:
.9584	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9587	d0 22		bne $95ab			bne 	_NSNormaliseLoop
.9589	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.958c	30 1d		bmi $95ab			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.958e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9591	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9594	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9597	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.959a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.959d	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.95a0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.95a3	38		sec				sec
.95a4	e9 08		sbc #$08			sbc 	#8
.95a6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95a9	80 d9		bra $9584			bra 	_NSNormaliseOptimise
.95ab					_NSNormaliseLoop:
.95ab	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.95ae	70 08		bvs $95b8			bvs 	_NSNExit 					; exit if so with Z flag clear
.95b0	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; shift mantissa left
.95b3	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.95b6	80 f3		bra $95ab			bra 	_NSNormaliseLoop
.95b8					_NSNExit:
.95b8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.95ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.869e					AssignNumber:
.869e	5a		phy				phy
.869f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86a2	85 36		sta $36				sta 	zTemp0
.86a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a7	85 37		sta $37				sta 	zTemp0+1
.86a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86ac	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86b1	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86b3	c9 08		cmp #$08			cmp 	#NSTFloat
.86b5	f0 2a		beq $86e1			beq 	_ANFloat
.86b7	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86ba	f0 05		beq $86c1			beq		_ANNotFloat
.86bc	e8		inx				inx
.86bd	20 0b 95	jsr $950b			jsr 	FloatIntegerPart 			; make it an integer
.86c0	ca		dex				dex
.86c1					_ANNotFloat:
.86c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86c4	29 03		and #$03			and 	#3
.86c6	d0 05		bne $86cd			bne 	_ANByteWord
.86c8	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.86cb	80 1e		bra $86eb			bra 	_ANExit
.86cd					_ANByteWord:
.86cd	48		pha				pha 								; save count
.86ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.86d1	92 36		sta ($36)			sta 	(zTemp0)
.86d3	68		pla				pla
.86d4	c9 01		cmp #$01			cmp	 	#1
.86d6	f0 13		beq $86eb			beq 	_ANExit
.86d8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.86db	a0 01		ldy #$01			ldy 	#1
.86dd	91 36		sta ($36),y			sta 	(zTemp0),y
.86df	80 0a		bra $86eb			bra 	_ANExit
.86e1					_ANFloat:
.86e1	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.86e4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.86e7	a0 04		ldy #$04			ldy 	#4
.86e9	91 36		sta ($36),y			sta 	(zTemp0),y
.86eb					_ANExit:
.86eb	7a		ply				ply
.86ec	60		rts				rts
.86ed					_ANCopy4PackSign:
.86ed	a0 03		ldy #$03			ldy 	#3
.86ef	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.86f2	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.86f4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86f7	91 36		sta ($36),y			sta 	(zTemp0),y
.86f9	88		dey				dey
.86fa	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.86fd	91 36		sta ($36),y			sta 	(zTemp0),y
.86ff	88		dey				dey
.8700	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8703	91 36		sta ($36),y			sta 	(zTemp0),y
.8705	88		dey				dey
.8706	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8709	91 36		sta ($36),y			sta 	(zTemp0),y
.870b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.870c					AssignString:
.870c	5a		phy				phy
.870d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8710	85 38		sta $38				sta 	zTemp1
.8712	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8715	85 39		sta $39				sta 	zTemp1+1
.8717	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.871a	85 36		sta $36				sta 	zTemp0
.871c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.871f	85 37		sta $37				sta 	zTemp0+1
.8721	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8723	b1 36		lda ($36),y			lda 	(zTemp0),y
.8725	f0 23		beq $874a			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8727	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8728	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.872a	e9 02		sbc #$02			sbc 	#2
.872c	85 3c		sta $3c				sta 	zsTemp
.872e	a0 01		ldy #$01			ldy 	#1
.8730	b1 36		lda ($36),y			lda 	(zTemp0),y
.8732	e9 00		sbc #$00			sbc 	#0
.8734	85 3d		sta $3d				sta 	zsTemp+1
.8736	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8738					_ASGetLength:
.8738	c8		iny				iny
.8739	b1 38		lda ($38),y			lda 	(zTemp1),y
.873b	d0 fb		bne $8738			bne 	_ASGetLength
.873d	98		tya				tya 								; is this length <= current length
.873e	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8740	90 20		bcc $8762			bcc 	_ASCopyString
.8742	f0 1e		beq $8762			beq 	_ASCopyString
.8744	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8746	a0 01		ldy #$01			ldy 	#1
.8748	91 3c		sta ($3c),y			sta 	(zsTemp),y
.874a					_ASNewStringRequired:
.874a	e8		inx				inx 								; concrete the new string.
.874b	20 73 97	jsr $9773			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.874e	ca		dex				dex
.874f	18		clc				clc
.8750	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8753	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8755	92 36		sta ($36)			sta 	(zTemp0)
.8757	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.875a	69 00		adc #$00			adc 	#0
.875c	a0 01		ldy #$01			ldy 	#1
.875e	91 36		sta ($36),y			sta 	(zTemp0),y
.8760	80 0d		bra $876f			bra 	_ASExit
.8762					_ASCopyString:
.8762	a0 00		ldy #$00			ldy 	#0
.8764					_ASCopyLoop:
.8764	b1 38		lda ($38),y			lda 	(zTemp1),y
.8766	c8		iny				iny
.8767	c8		iny				iny
.8768	91 3c		sta ($3c),y			sta 	(zsTemp),y
.876a	88		dey				dey
.876b	c9 00		cmp #$00			cmp 	#0
.876d	d0 f5		bne $8764			bne 	_ASCopyLoop
.876f					_ASExit:
.876f	7a		ply				ply
.8770	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8771					DereferenceTopTwo:
.8771	e8		inx				inx
.8772	20 76 87	jsr $8776			jsr 	Dereference 				; deref x+1
.8775	ca		dex				dex  								; falls through to deref x
.8776					Dereference:
.8776	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8779	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.877b	f0 57		beq $87d4			beq 	_DRFExit 					; not a reference
.877d	5a		phy				phy
.877e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8781	85 36		sta $36				sta 	zTemp0
.8783	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8786	85 37		sta $37				sta 	zTemp0+1
.8788	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.878b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.878d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8790	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8793	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8795	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8797	f0 0f		beq $87a8			beq 	_DRFDereferenceTwo
.8799	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.879b	f0 39		beq $87d6			beq 	_DRFFull
.879d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.87a0	29 03		and #$03			and 	#3
.87a2	f0 32		beq $87d6			beq 	_DRFFull 					; the whole word
.87a4	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.87a6	f0 07		beq $87af			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.87a8					_DRFDereferenceTwo:
.87a8	a0 01		ldy #$01			ldy 	#1
.87aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.87ac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87af					_DRFClear23:
.87af	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87b2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87b5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87b8	29 18		and #$18			and 	#NSBTypeMask
.87ba	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87bd	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87bf	d0 12		bne $87d3			bne 	_DRFNotString
.87c1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87c4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87c7	d0 0a		bne $87d3			bne 	_DRFNotString
.87c9	a9 d5		lda #$d5			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.87cb	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.87ce	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.87d0	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.87d3					_DRFNotString
.87d3	7a		ply				ply 								; restore Y and exit
.87d4					_DRFExit:
.87d4	60		rts				rts
.87d5					_DRFNullString:
>87d5	00						.byte 	0
.87d6					_DRFFull:
.87d6	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.87d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.87da	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87dd	c8		iny				iny
.87de	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87e3	c8		iny				iny
.87e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87e9	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.87ec	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.87ef	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.87f1	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.87f4	f0 06		beq $87fc			beq 	_DRFNoExponent
.87f6	c8		iny				iny 								; if not, read the exponent as well.
.87f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f9	9d 28 06	sta $0628,x			sta 	NSExponent,x
.87fc					_DRFNoExponent:
.87fc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.87ff	10 0d		bpl $880e			bpl 	_DRFExit2 					; if not, then exit.
.8801	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8803	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8806	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8809	09 80		ora #$80			ora 	#NSBIsNegative
.880b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.880e					_DRFExit2:
.880e	7a		ply				ply
.880f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8810					EncodeNumberStart:
.8810	38		sec				sec
.8811	80 01		bra $8814			bra 	EncodeNumberContinue+1
.8813					EncodeNumberContinue:
.8813	18		clc				clc
.8814					EncodeNumber:
.8814	08		php				php 								; save reset.
.8815	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8817	f0 12		beq $882b			beq 	_ENIsOkay
.8819	c9 30		cmp #$30			cmp 	#"0"
.881b	90 04		bcc $8821			bcc 	_ENBadNumber
.881d	c9 3a		cmp #$3a			cmp 	#"9"+1
.881f	90 0a		bcc $882b			bcc 	_ENIsOkay
.8821					_ENBadNumber:
.8821	28		plp				plp 								; throw saved reset
.8822	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8825	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8827	f0 7e		beq $88a7			beq 	_ENConstructFinal
.8829					_ENFail:
.8829	18		clc				clc 								; not allowed
.882a	60		rts				rts
.882b					_ENIsOkay:
.882b	28		plp				plp 								; are we restarting
.882c	90 15		bcc $8843			bcc 	_ENNoRestart
.882e					_ENStartEncode:
.882e	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8830	f0 0c		beq $883e			beq 	_ENFirstDP
.8832	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8834	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.8837	a9 01		lda #$01			lda 	#ESTA_Low
.8839					_ENExitChange:
.8839	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.883c	38		sec				sec
.883d	60		rts				rts
.883e					_ENFirstDP:
.883e	20 06 8d	jsr $8d06			jsr 	NSMSetZero 					; clear integer part
.8841	80 3f		bra $8882			bra 	_ESTASwitchFloat			; go straight to float and exi
.8843					_ENNoRestart:
.8843	48		pha				pha 								; save on stack.
.8844	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8847	c9 01		cmp #$01			cmp 	#ESTA_Low
.8849	f0 09		beq $8854			beq  	_ESTALowState
.884b	c9 02		cmp #$02			cmp 	#ESTA_High
.884d	f0 29		beq $8878			beq 	_ESTAHighState
.884f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8851	f0 3b		beq $888e			beq 	_ESTADecimalState
>8853	db						.byte 	$DB 						; causes a break in the emulator
.8854					_ESTALowState:
.8854	68		pla				pla 								; get value back
.8855	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8857	f0 29		beq $8882			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8859	29 0f		and #$0f			and 	#15 						; make digit
.885b	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.885e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8861	0a		asl a				asl 	a
.8862	0a		asl a				asl 	a
.8863	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8866	0a		asl a				asl 	a
.8867	6d 06 07	adc $0706			adc 	DigitTemp
.886a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.886d	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.886f	90 05		bcc $8876			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8871	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8873	8d 05 07	sta $0705			sta 	EncodeState
.8876					_ESTANoSwitch:
.8876	38		sec				sec
.8877	60		rts				rts
.8878					_ESTAHighState:
.8878	68		pla				pla 								; get value back
.8879	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.887b	f0 05		beq $8882			beq 	_ESTASwitchFloat
.887d	20 e1 88	jsr $88e1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8880	38		sec				sec
.8881	60		rts				rts
.8882					_ESTASwitchFloat:
.8882	9c 07 07	stz $0707			stz 	DecimalCount
.8885	e8		inx				inx 								; zero the decimal additive.
.8886	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.8889	ca		dex				dex
.888a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.888c	80 ab		bra $8839			bra 	_ENExitChange
.888e					_ESTADecimalState:
.888e	68		pla				pla 								; digit.
.888f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8891	f0 96		beq $8829			beq 	_ENFail
.8893	e8		inx				inx 								; put digit into fractional part of X+1
.8894	20 e1 88	jsr $88e1			jsr 	ESTAShiftDigitIntoMantissa
.8897	ca		dex				dex
.8898	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.889b	ad 07 07	lda $0707			lda 	DecimalCount
.889e	c9 0b		cmp #$0b			cmp 	#11
.88a0	f0 02		beq $88a4			beq 	_ESTADSFail
.88a2	38		sec				sec
.88a3	60		rts				rts
.88a4					_ESTADSFail:
.88a4	4c c1 96	jmp $96c1			jmp 	RangeError
.88a7					_ENConstructFinal:
.88a7	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88aa	f0 33		beq $88df			beq 	_ENCFExit 					; no decimals
.88ac	5a		phy				phy
.88ad	0a		asl a				asl 	a 							; x 4 and CLC
.88ae	0a		asl a				asl 	a
.88af	6d 07 07	adc $0707			adc 	DecimalCount
.88b2	a8		tay				tay
.88b3	b9 80 96	lda $9680,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88b6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88b9	b9 81 96	lda $9681,y			lda 	DecimalScalarTable-5+1,y
.88bc	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88bf	b9 82 96	lda $9682,y			lda 	DecimalScalarTable-5+2,y
.88c2	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88c5	b9 83 96	lda $9683,y			lda 	DecimalScalarTable-5+3,y
.88c8	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.88cb	b9 84 96	lda $9684,y			lda 	DecimalScalarTable-5+4,y
.88ce	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.88d1	a9 08		lda #$08			lda 	#NSTFloat
.88d3	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.88d6	7a		ply				ply
.88d7	e8		inx				inx 								; multiply decimal const by decimal scalar
.88d8	20 35 95	jsr $9535			jsr 	FloatMultiply
.88db	ca		dex				dex
.88dc	20 ca 93	jsr $93ca			jsr 	FloatAdd 					; add to integer part.
.88df					_ENCFExit:
.88df	18		clc				clc 								; reject the digit.
.88e0	60		rts				rts
.88e1					ESTAShiftDigitIntoMantissa:
.88e1	29 0f		and #$0f			and 	#15 						; save digit
.88e3	48		pha				pha
.88e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.88e7	48		pha				pha
.88e8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.88eb	48		pha				pha
.88ec	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88ef	48		pha				pha
.88f0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88f3	48		pha				pha
.88f4	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 2
.88f7	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 4
.88fa	18		clc				clc 								; pop mantissa and add
.88fb	68		pla				pla
.88fc	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88ff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8902	68		pla				pla
.8903	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8906	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8909	68		pla				pla
.890a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.890d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8910	68		pla				pla
.8911	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8914	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8917	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 10
.891a	68		pla				pla 								; add digit
.891b	18		clc				clc
.891c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.891f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8922	90 0d		bcc $8931			bcc 	_ESTASDExit
.8924	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8927	d0 08		bne $8931			bne 	_ESTASDExit
.8929	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.892c	d0 03		bne $8931			bne 	_ESTASDExit
.892e	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8931					_ESTASDExit:
.8931	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8932					EvaluateTerm:
.8932	b1 30		lda ($30),y			lda 	(codePtr),y
.8934	30 18		bmi $894e			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8936	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8938	b0 6f		bcs $89a9			bcs 	_ETVariable
.893a	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.893c	90 6e		bcc $89ac			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.893e	c9 3a		cmp #$3a			cmp 	#'9'+1
.8940	b0 6a		bcs $89ac			bcs 	_ETPuncUnary
.8942	20 10 88	jsr $8810			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8945					_ETNumber:
.8945	c8		iny				iny 								; keep encoding until we have the numbers
.8946	b1 30		lda ($30),y			lda 	(codePtr),y
.8948	20 13 88	jsr $8813			jsr 	EncodeNumberContinue
.894b	b0 f8		bcs $8945			bcs 	_ETNumber 					; go back if accepted.
.894d	60		rts				rts
.894e					_ETCheckUnary:
.894e	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8950	f0 41		beq $8993			beq 	_ETString
.8952	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8954	f0 12		beq $8968			beq 	_ETHexConstant
.8956	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8958	90 0b		bcc $8965			bcc 	_ETSyntaxError
.895a	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.895c	b0 07		bcs $8965			bcs 	_ETSyntaxError
.895e	da		phx				phx 								; push X on the stack
.895f	0a		asl a				asl 	a 							; put vector x 2 into X
.8960	aa		tax				tax
.8961	c8		iny				iny 								; consume unary function token
.8962	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8965					_ETSyntaxError:
.8965	4c bc 96	jmp $96bc			jmp 	SyntaxError
.8968					_ETHexConstant:
.8968	c8		iny				iny 								; skip #
.8969	c8		iny				iny 								; skip count
.896a	20 06 8d	jsr $8d06			jsr 	NSMSetZero 					; clear result
.896d					_ETHLoop:
.896d	b1 30		lda ($30),y			lda 	(codePtr),y
.896f	c8		iny				iny 								; and consume
.8970	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8972	f0 1e		beq $8992			beq 	_ETHExit
.8974	48		pha				pha 								; save on stack.
.8975	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 2
.8978	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 4
.897b	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 8
.897e	20 1b 8d	jsr $8d1b			jsr 	NSMShiftLeft 				; x 16
.8981	68		pla				pla 								; ASCII
.8982	c9 41		cmp #$41			cmp 	#'A'
.8984	90 02		bcc $8988			bcc 	_ETHNotChar
.8986	e9 07		sbc #$07			sbc 	#7
.8988					_ETHNotChar:
.8988	29 0f		and #$0f			and 	#15 						; digit now
.898a	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.898d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8990	80 db		bra $896d			bra 	_ETHLoop 					; go round.
.8992					_ETHExit:
.8992	60		rts				rts
.8993					_ETString:
.8993	c8		iny				iny 								; look at length
.8994	b1 30		lda ($30),y			lda 	(codePtr),y
.8996	48		pha				pha
.8997	c8		iny				iny 								; first character
.8998	20 ec 91	jsr $91ec			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.899b	68		pla				pla 								; restore count and save
.899c	85 36		sta $36				sta 	zTemp0
.899e	98		tya				tya 								; add length to Y to skip it.
.899f	18		clc				clc
.89a0	65 36		adc $36				adc 	zTemp0
.89a2	a8		tay				tay
.89a3	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.89a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89a8	60		rts				rts
.89a9					_ETVariable:
.89a9	4c 03 8a	jmp $8a03			jmp 	VariableHandler
.89ac					_ETPuncUnary:
.89ac	c8		iny				iny 								; consume the unary character
.89ad	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89af	f0 2d		beq $89de			beq 	_ETUnaryNegate
.89b1	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89b3	f0 39		beq $89ee			beq 	_ETDereference
.89b5	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89b7	f0 43		beq $89fc			beq 	_ETParenthesis
.89b9	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89bb	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89bd	f0 06		beq $89c5			beq 	_ETIndirection
.89bf	e6 36		inc $36				inc 	zTemp0
.89c1	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89c3	d0 a0		bne $8965			bne 	_ETSyntaxError
.89c5					_ETIndirection:
.89c5	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.89c7	1a		inc a				inc 	a
.89c8	48		pha				pha
.89c9	20 32 89	jsr $8932			jsr 	EvaluateTerm				; evaluate the term
.89cc	20 76 87	jsr $8776			jsr 	Dereference 				; dereference it.
.89cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.89d2	d0 07		bne $89db			bne 	_ETTypeMismatch
.89d4	68		pla				pla 								; indirection 1-2
.89d5	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.89d7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89da	60		rts				rts
.89db					_ETTypeMismatch:
.89db	4c c6 96	jmp $96c6			jmp 	TypeError
.89de					_ETUnaryNegate:
.89de	20 32 89	jsr $8932			jsr 	EvaluateTerm				; evaluate the term
.89e1	20 76 87	jsr $8776			jsr 	Dereference 				; dereference it.
.89e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.89e7	29 10		and #$10			and 	#NSTString
.89e9	d0 f0		bne $89db			bne 	_ETTypeMismatch
.89eb	4c b2 8c	jmp $8cb2			jmp 	NSMNegate  					; just toggles the sign bit.
.89ee					_ETDereference:
.89ee	20 32 89	jsr $8932			jsr 	EvaluateTerm				; evaluate the term
.89f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.89f4	29 20		and #$20			and 	#NSBIsReference
.89f6	f0 e3		beq $89db			beq 	_ETTypeMismatch
.89f8	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.89fb	60		rts				rts
.89fc					_ETParenthesis:
.89fc	20 61 86	jsr $8661			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.89ff	20 03 92	jsr $9203			jsr 	CheckRightBracket 			; check for )
.8a02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a03					VariableHandler:
.8a03	b1 30		lda ($30),y			lda 	(codePtr),y
.8a05	18		clc				clc
.8a06	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a08	85 37		sta $37				sta 	zTemp0+1
.8a0a	c8		iny				iny
.8a0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0d	85 36		sta $36				sta 	zTemp0
.8a0f	c8		iny				iny
.8a10	18		clc				clc									; copy variable address+3 to mantissa
.8a11	69 03		adc #$03			adc 	#3
.8a13	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a16	a5 37		lda $37				lda 	zTemp0+1
.8a18	69 00		adc #$00			adc 	#0
.8a1a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a1d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a20	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a23	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a26	5a		phy				phy
.8a27	a0 02		ldy #$02			ldy 	#2 							; read type
.8a29	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a2b	7a		ply				ply
.8a2c	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a2e	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a30	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a33	29 04		and #$04			and 	#NSBIsArray
.8a35	d0 01		bne $8a38			bne 	_VHArray
.8a37	60		rts				rts
.8a38					_VHArray:
>8a38	db						.byte 	$DB 						; causes a break in the emulator
.8a39	80 fd		bra $8a38			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.95bb					AbsUnary:
.95bb	fa		plx				plx 								; restore stack pos
.95bc	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber 				; get a float or int
.95bf	20 03 92	jsr $9203			jsr 	CheckRightBracket
.95c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.95c5	29 7f		and #$7f			and 	#$7F
.95c7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a3b					AllocUnary:
.8a3b	fa		plx				plx 								; restore stack pos
.8a3c	20 92 8c	jsr $8c92			jsr 	Evaluate16BitInteger		; get bytes required.
.8a3f	20 03 92	jsr $9203			jsr 	CheckRightBracket
.8a42	da		phx				phx 								; save X/Y
.8a43	5a		phy				phy
.8a44	8a		txa				txa 								; copy X into Y
.8a45	a8		tay				tay
.8a46	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a49	aa		tax				tax
.8a4a	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a4d	20 5a 8a	jsr $8a5a			jsr 	AllocateXABytes 			; allocate memory
.8a50	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a53	8a		txa				txa
.8a54	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a57	7a		ply				ply
.8a58	fa		plx				plx
.8a59	60		rts				rts
.8a5a					AllocateXABytes:
.8a5a	5a		phy				phy
.8a5b	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a5e	5a		phy				phy
.8a5f	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a62	5a		phy				phy
.8a63	18		clc				clc
.8a64	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a67	8d 0c 07	sta $070c			sta 	lowMemPtr
.8a6a	8a		txa				txa
.8a6b	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8a6e	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8a71	fa		plx				plx
.8a72	68		pla				pla
.8a73	7a		ply				ply
.8a74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.95cb					AscUnary:
.95cb	fa		plx				plx 								; restore stack pos
.95cc	20 65 8c	jsr $8c65			jsr 	EvaluateString 				; get a string
.95cf	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.95d1	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.95d4	20 03 92	jsr $9203			jsr 	CheckRightBracket
.95d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.95d8					FracUnary:
.95d8	fa		plx				plx 								; restore stack pos
.95d9	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber 				; get a float or int
.95dc	20 03 92	jsr $9203			jsr 	CheckRightBracket
.95df	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95e2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95e4	f0 04		beq $95ea			beq 	_IUZero
.95e6	20 a8 94	jsr $94a8			jsr 	FloatFractionalPart
.95e9	60		rts				rts
.95ea					_IUZero:
.95ea	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.95ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.95ee					IntUnary:
.95ee	fa		plx				plx 								; restore stack pos
.95ef	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber 				; get a float or int
.95f2	20 03 92	jsr $9203			jsr 	CheckRightBracket
.95f5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95f8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95fa	f0 03		beq $95ff			beq 	_IUExit
.95fc	20 0b 95	jsr $950b			jsr 	FloatIntegerPart
.95ff					_IUExit:
.95ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9600					LenUnary:
.9600	fa		plx				plx 								; restore stack pos
.9601	20 65 8c	jsr $8c65			jsr 	EvaluateString 				; get a string
.9604	5a		phy				phy
.9605	a0 00		ldy #$00			ldy 	#0 							; find length
.9607					_LenFind:
.9607	b1 36		lda ($36),y			lda 	(zTemp0),y
.9609	f0 06		beq $9611			beq 	_LenExit
.960b	c8		iny				iny
.960c	d0 f9		bne $9607			bne 	_LenFind
.960e	4c c1 96	jmp $96c1			jmp 	RangeError 					; string > 255
.9611					_LenExit:
.9611	98		tya				tya
.9612	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.9615	7a		ply				ply
.9616	20 03 92	jsr $9203			jsr 	CheckRightBracket
.9619	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8a75					Unary_Not:
.8a75	fa		plx				plx
.8a76	20 7d 8c	jsr $8c7d			jsr 	EvaluateInteger 			; get integer
.8a79	20 03 92	jsr $9203			jsr 	CheckRightBracket
.8a7c	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; zero mantissa ?
.8a7f	f0 04		beq $8a85			beq 	_NotZero
.8a81	20 06 8d	jsr $8d06			jsr 	NSMSetZero
.8a84	60		rts				rts
.8a85					_NotZero:
.8a85	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.8a88					_UNBad:
.8a88	4c cb 96	jmp $96cb			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8a8b					Unary_Rnd:
.8a8b	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber 				; number to use.
.8a8e	20 03 92	jsr $9203			jsr 	CheckRightBracket 			; closing bracket
.8a91	20 ba 8a	jsr $8aba			jsr 	Random32Bit 				; generate a number.
.8a94	ad 08 07	lda $0708			lda 	RandomSeed+0
.8a97	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a9a	ad 09 07	lda $0709			lda 	RandomSeed+1
.8a9d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8aa0	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8aa3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aa6	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8aa9	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8aab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8aae	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ab0	8d 28 06	sta $0628			sta 	NSExponent
.8ab3	a9 08		lda #$08			lda 	#NSTFloat
.8ab5	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8ab8	db						.byte 	$DB 						; causes a break in the emulator
.8ab9	60		rts				rts
.8aba					Random32Bit:
.8aba	5a		phy				phy
.8abb	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8abd	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ac0	d0 03		bne $8ac5			bne 	_Random1
.8ac2	a8		tay				tay 								; if so do it 256 times
.8ac3	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8ac5					_Random1:
.8ac5	0a		asl a				asl 	a 							; LSFR RNG
.8ac6	2e 09 07	rol $0709			rol 	RandomSeed+1
.8ac9	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8acc	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8acf	90 02		bcc $8ad3			bcc 	_Random2
.8ad1	49 c5		eor #$c5			eor 	#$C5
.8ad3					_Random2:
.8ad3	88		dey				dey
.8ad4	d0 ef		bne $8ac5			bne 	_Random1
.8ad6	7a		ply				ply
.8ad7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.961a					SgnUnary:
.961a	fa		plx				plx 								; restore stack pos
.961b	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber 				; get a float or int
.961e	20 03 92	jsr $9203			jsr 	CheckRightBracket
.9621	20 36 8d	jsr $8d36			jsr 	NSMIsZero 					; if zero
.9624	f0 10		beq $9636			beq 	_SGZero  					; return Int Zero
.9626	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9629	48		pha				pha
.962a	a9 01		lda #$01			lda 	#1 							; set to 1
.962c	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.962f	68		pla				pla
.9630	29 80		and #$80			and		#$80 						; copy the sign byte out
.9632	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9635	60		rts				rts
.9636	20 06 8d	jsr $8d06	_SGZero:jsr 	NSMSetZero
.9639	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.963a					ValUnary:
.963a	fa		plx				plx 								; restore stack pos
.963b	20 50 96	jsr $9650			jsr 	ValMainCode 				; do the main val() code
.963e	b0 01		bcs $9641			bcs 	_VUError 					; couldn't convert
.9640	60		rts				rts
.9641					_VUError:
.9641	4c c6 96	jmp $96c6			jmp 	TypeError
.9644					IsValUnary:
.9644	fa		plx				plx 								; restore stack pos
.9645	20 50 96	jsr $9650			jsr 	ValMainCode 				; do the main val() code
.9648	b0 03		bcs $964d			bcs 	_VUBad
.964a	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.964d					_VUBad:
.964d	4c d1 82	jmp $82d1			jmp 	ReturnFalse
.9650					ValMainCode:
.9650	20 65 8c	jsr $8c65			jsr 	EvaluateString 				; get a string
.9653	20 03 92	jsr $9203			jsr 	CheckRightBracket 			; check right bracket present
.9656	5a		phy				phy
.9657	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9659	f0 17		beq $9672			beq 	_VMCFail2
.965b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.965d	48		pha				pha 								; save first character
.965e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9660	d0 01		bne $9663			bne 	_VMCStart
.9662	c8		iny				iny 								; skip over -
.9663					_VMCStart:
.9663	38		sec				sec 								; initialise first time round.
.9664					_VMCNext:
.9664	c8		iny				iny 								; pre-increment
.9665	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9667	f0 0c		beq $9675			beq 	_VMCSuccess 				; successful.
.9669	20 14 88	jsr $8814			jsr 	EncodeNumber 				; send it to the number-builder
.966c	90 03		bcc $9671			bcc 	_VMCFail 					; if failed, give up.
.966e	18		clc				clc 								; next time round, countinue
.966f	80 f3		bra $9664			bra 	_VMCNext
.9671					_VMCFail:
.9671	68		pla				pla
.9672					_VMCFail2:
.9672	7a		ply				ply
.9673	38		sec				sec
.9674	60		rts				rts
.9675					_VMCSuccess:
.9675	a9 00		lda #$00			lda 	#0 							; construct final
.9677	20 14 88	jsr $8814			jsr 	EncodeNumber
.967a	68		pla				pla
.967b	c9 2d		cmp #$2d			cmp 	#"-"
.967d	d0 03		bne $9682			bne 	_VMCNotNegative
.967f	20 b2 8c	jsr $8cb2			jsr		NSMNegate
.9682					_VMCNotNegative:
.9682	7a		ply				ply
.9683	18		clc				clc
.9684	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8ad8					ChrUnary:
.8ad8	fa		plx				plx 								; restore stack pos
.8ad9	20 9e 8c	jsr $8c9e			jsr 	Evaluate8BitInteger			; get value
.8adc	48		pha				pha
.8add	20 03 92	jsr $9203			jsr 	CheckRightBracket
.8ae0	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8ae2	20 ee 97	jsr $97ee			jsr 	StringTempAllocate
.8ae5	68		pla				pla 								; write number to it
.8ae6	20 2c 98	jsr $982c			jsr 	StringTempWrite
.8ae9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8aea					SpcUnary:
.8aea	fa		plx				plx 								; restore stack pos
.8aeb	20 9e 8c	jsr $8c9e			jsr 	Evaluate8BitInteger			; get value
.8aee	5a		phy				phy
.8aef	48		pha				pha 								; save count
.8af0	20 ee 97	jsr $97ee			jsr 	StringTempAllocate
.8af3	7a		ply				ply 								; to do count in Y
.8af4					_SpcLoop:
.8af4	c0 00		cpy #$00			cpy 	#0
.8af6	f0 08		beq $8b00			beq 	_SpcExit
.8af8	a9 20		lda #$20			lda 	#32
.8afa	20 2c 98	jsr $982c			jsr 	StringTempWrite
.8afd	88		dey				dey
.8afe	80 f4		bra $8af4			bra 	_SPCLoop
.8b00					_SpcExit:
.8b00	7a		ply				ply
.8b01	20 03 92	jsr $9203			jsr 	CheckRightBracket
.8b04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b05					Unary_Str:
.8b05	fa		plx				plx
.8b06	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber  			; get number
.8b09	20 03 92	jsr $9203			jsr 	CheckRightBracket 			; closing bracket
.8b0c	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b0e	20 27 8b	jsr $8b27			jsr 	ConvertNumberToString 		; do the conversion.
.8b11	a9 21		lda #$21			lda		#33 						; create buffer
.8b13	20 ee 97	jsr $97ee			jsr 	StringTempAllocate 			; allocate memory
.8b16	da		phx				phx
.8b17	a2 00		ldx #$00			ldx 	#0
.8b19					_USCopy:
.8b19	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b1c	20 2c 98	jsr $982c			jsr 	StringTempWrite
.8b1f	e8		inx				inx
.8b20	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b23	d0 f4		bne $8b19			bne 	_USCopy
.8b25	fa		plx				plx
.8b26	60		rts				rts
.8b27					ConvertNumberToString:
.8b27	5a		phy				phy 								; save code position
.8b28	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b2b	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b2e	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b31	10 0a		bpl $8b3d			bpl 	_CNTSNotNegative
.8b33	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b35	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b38	a9 2d		lda #$2d			lda 	#"-"
.8b3a	20 a3 8b	jsr $8ba3			jsr 	WriteDecimalBuffer
.8b3d					_CNTSNotNegative:
.8b3d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b40	f0 15		beq $8b57			beq 	_CNTSNotFloat
.8b42	e8		inx				inx 								; round up
.8b43	a9 01		lda #$01			lda 	#1
.8b45	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.8b48	ca		dex				dex
.8b49	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b4c	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b4f	a9 08		lda #$08			lda 	#NSTFloat
.8b51	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b54	20 ca 93	jsr $93ca			jsr 	FloatAdd
.8b57					_CNTSNotFloat:
.8b57	20 85 8b	jsr $8b85			jsr 	MakePlusTwoString
.8b5a	20 a8 94	jsr $94a8			jsr 	FloatFractionalPart 		; get the fractional part
.8b5d	20 6c 95	jsr $956c			jsr 	NSNormalise					; normalise , exit if zero
.8b60	f0 21		beq $8b83			beq 	_CNTSExit
.8b62	a9 2e		lda #$2e			lda 	#"."
.8b64	20 a3 8b	jsr $8ba3			jsr 	WriteDecimalBuffer 			; write decimal place
.8b67					_CNTSDecimal:
.8b67	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8b6a	30 17		bmi $8b83			bmi 	_CNTSExit
.8b6c	e8		inx				inx 								; x 10.0
.8b6d	a9 0a		lda #$0a			lda 	#10
.8b6f	20 08 8d	jsr $8d08			jsr 	NSMSetByte
.8b72	a9 08		lda #$08			lda 	#NSTFloat
.8b74	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b77	ca		dex				dex
.8b78	20 35 95	jsr $9535			jsr 	FloatMultiply
.8b7b	20 85 8b	jsr $8b85			jsr 	MakePlusTwoString
.8b7e	20 a8 94	jsr $94a8			jsr 	FloatFractionalPart 		; get the fractional part
.8b81	80 e4		bra $8b67			bra 	_CNTSDecimal 				; keep going.
.8b83					_CNTSExit:
.8b83	7a		ply				ply
.8b84	60		rts				rts
.8b85					MakePlusTwoString:
.8b85	da		phx				phx
.8b86	20 dd 8c	jsr $8cdd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8b89	e8		inx				inx 								; access it
.8b8a	e8		inx				inx
.8b8b	20 0b 95	jsr $950b			jsr 	FloatIntegerPart 			; make it an integer
.8b8e	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8b90	20 74 93	jsr $9374			jsr 	ConvertInt32
.8b93	a2 00		ldx #$00			ldx	 	#0
.8b95					_MPTSCopy:
.8b95	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b98	20 a3 8b	jsr $8ba3			jsr 	WriteDecimalBuffer
.8b9b	e8		inx				inx
.8b9c	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b9f	d0 f4		bne $8b95			bne 	_MPTSCopy
.8ba1	fa		plx				plx
.8ba2	60		rts				rts
.8ba3					WriteDecimalBuffer:
.8ba3	da		phx				phx
.8ba4	ae 14 07	ldx $0714			ldx 	dbOffset
.8ba7	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8baa	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8bad	ee 14 07	inc $0714			inc 	dbOffset
.8bb0	fa		plx				plx
.8bb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8bb2					Unary_Left:
.8bb2	fa		plx				plx
.8bb3	18		clc				clc 								; only one parameter
.8bb4	20 29 8c	jsr $8c29			jsr 	SubstringInitial 			; set up.
.8bb7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bba	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bbd	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bc0	80 2c		bra $8bee			bra 	SubstringMain
.8bc2					Unary_Right:
.8bc2	fa		plx				plx
.8bc3	18		clc				clc 								; only one parameter
.8bc4	20 29 8c	jsr $8c29			jsr 	SubstringInitial 			; set up.
.8bc7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8bca	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bcd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8bd0	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8bd3	b0 02		bcs $8bd7			bcs 	_URNotUnderflow
.8bd5	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8bd7					_URNotUnderFlow:
.8bd7	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8bda	80 12		bra $8bee			bra 	SubStringMain
.8bdc					Unary_Mid:
.8bdc	fa		plx				plx
.8bdd	38		sec				sec 								; two parameters
.8bde	20 29 8c	jsr $8c29			jsr 	SubstringInitial 			; set up.
.8be1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8be4	f0 05		beq $8beb			beq 	_UMError
.8be6	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8be9	80 03		bra $8bee			bra 	SubStringMain
.8beb					_UMError:
.8beb	4c cb 96	jmp $96cb			jmp 	ArgumentError
.8bee					SubStringMain:
.8bee	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8bf1	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8bf4	b0 2d		bcs $8c23			bcs 	_SSMNull 					; if so, return an empty string.
.8bf6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8bf9	f0 28		beq $8c23			beq 	_SSMNull 					; return empty string.
.8bfb	18		clc				clc 								; add the offset +1 to the address and
.8bfc	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8bff	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c02	85 36		sta $36				sta 	zTemp0
.8c04	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c07	69 00		adc #$00			adc 	#0
.8c09	85 37		sta $37				sta 	zTemp0+1
.8c0b					_SSMNoCarry:
.8c0b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c0e	20 ee 97	jsr $97ee			jsr 	StringTempAllocate 			; allocate that many characters
.8c11	5a		phy				phy 								; save Y
.8c12	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c14					_SSMCopy:
.8c14	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c16	f0 09		beq $8c21			beq 	_SSMEString 				; no more to copy
.8c18	20 2c 98	jsr $982c			jsr 	StringTempWrite 			; and write it out.
.8c1b	c8		iny				iny
.8c1c	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c1f	d0 f3		bne $8c14			bne 	_SSMCopy
.8c21					_SSMEString:
.8c21	7a		ply				ply
.8c22					_SSMExit:
.8c22	60		rts				rts
.8c23					_SSMNull:
.8c23	a9 00		lda #$00			lda 	#0
.8c25	20 ee 97	jsr $97ee			jsr 	StringTempAllocate
.8c28	60		rts				rts
.8c29					SubstringInitial:
.8c29	da		phx				phx 								; save initial stack position
.8c2a	08		php				php 								; save carry on stack indicating 2 parameters
.8c2b	20 65 8c	jsr $8c65			jsr 	EvaluateString 				; get a string
.8c2e	5a		phy				phy 								; calculate length to exponent.
.8c2f	a0 ff		ldy #$ff			ldy 	#$FF
.8c31					_SIFindLength:
.8c31	c8		iny				iny
.8c32	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c34	d0 fb		bne $8c31			bne 	_SIFindLength
.8c36	98		tya				tya
.8c37	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c3a	7a		ply				ply
.8c3b	e8		inx				inx
.8c3c	20 0b 92	jsr $920b			jsr 	CheckComma 					; comma next
.8c3f	20 9e 8c	jsr $8c9e			jsr 	Evaluate8BitInteger 		; get next parameter
.8c42	28		plp				plp 								; is it the last parameter ?
.8c43	90 07		bcc $8c4c			bcc 	_SSIExit 					; if so, exit.
.8c45	e8		inx				inx
.8c46	20 0b 92	jsr $920b			jsr 	CheckComma 					; comma next
.8c49	20 9e 8c	jsr $8c9e			jsr 	Evaluate8BitInteger 		; get last parameter
.8c4c					_SSIExit:
.8c4c	fa		plx				plx
.8c4d	20 03 92	jsr $9203			jsr 	CheckRightBracket 			; check closing bracket
.8c50	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c51					EvaluateValue:
.8c51	48		pha				pha
.8c52	20 61 86	jsr $8661			jsr		EvaluateExpression 			; expression
.8c55	20 76 87	jsr $8776			jsr 	Dereference					; derefernce it
.8c58	68		pla				pla
.8c59	60		rts				rts
.8c5a					EvaluateNumber:
.8c5a	20 51 8c	jsr $8c51			jsr 	EvaluateValue 				; get a value
.8c5d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c60	29 10		and #$10			and 	#NSBIsString
.8c62	d0 16		bne $8c7a			bne 	HelperTypeError
.8c64	60		rts				rts
.8c65					EvaluateString:
.8c65	20 51 8c	jsr $8c51			jsr 	EvaluateValue 				; get a value
.8c68	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c6b	29 10		and #$10			and 	#NSBIsString
.8c6d	f0 0b		beq $8c7a			beq 	HelperTypeError
.8c6f					CopyAddressToTemp0:
.8c6f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8c72	85 36		sta $36				sta 	zTemp0
.8c74	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c77	85 37		sta $37				sta 	zTemp0+1
.8c79	60		rts				rts
.8c7a					HelperTypeError:
.8c7a	4c c6 96	jmp $96c6			jmp 	TypeError
.8c7d					EvaluateInteger:
.8c7d	20 5a 8c	jsr $8c5a			jsr 	EvaluateNumber
.8c80	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8c83	d0 0a		bne $8c8f			bne 	HelperValueError 			; if not, it's a float.
.8c85	60		rts				rts
.8c86					EvaluateUnsignedInteger:
.8c86	20 7d 8c	jsr $8c7d			jsr 	EvaluateInteger 			; check integer is +ve
.8c89	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c8c	30 01		bmi $8c8f			bmi 	HelperValueError
.8c8e	60		rts				rts
.8c8f					HelperValueError:
.8c8f	4c cb 96	jmp $96cb			jmp 	ArgumentError
.8c92					Evaluate16BitInteger:
.8c92	20 86 8c	jsr $8c86			jsr	 	EvaluateUnsignedInteger		; get integer
.8c95	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8c98	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8c9b	d0 f2		bne $8c8f			bne 	HelperValueError
.8c9d	60		rts				rts
.8c9e					Evaluate8BitInteger:
.8c9e	20 86 8c	jsr $8c86			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8ca1	d0 ec		bne $8c8f			bne 	HelperValueError
.8ca3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8ca6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ca9	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8cac	d0 e1		bne $8c8f			bne 	HelperValueError
.8cae	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8cb2					NSMNegate:
.8cb2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cb5	49 80		eor #$80			eor 	#NSBIsNegative
.8cb7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cba	60		rts				rts
.8cbb					NSMNegateMantissa:
.8cbb	38		sec				sec
.8cbc	a9 00		lda #$00			lda 	#0
.8cbe	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cc1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cc4	a9 00		lda #$00			lda 	#0
.8cc6	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8cc9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ccc	a9 00		lda #$00			lda 	#0
.8cce	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8cd1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cd4	a9 00		lda #$00			lda 	#0
.8cd6	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8cd9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cdc	60		rts				rts
.8cdd					NSMShiftUpTwo:
.8cdd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ce0	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ce3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ce6	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8ce9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8cec	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8cef	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8cf2	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8cf5	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8cf8	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8cfb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cfe	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d01	60		rts				rts
.8d02					NSMSetZeroMantissaOnly:
.8d02	a9 00		lda #$00			lda 	#0
.8d04	80 08		bra $8d0e			bra 	NSMSetMantissa
.8d06					NSMSetZero:
.8d06	a9 00		lda #$00			lda 	#0
.8d08					NSMSetByte:
.8d08	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d0b	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d0e					NSMSetMantissa:
.8d0e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d11	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d14	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d17	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d1a	60		rts				rts
.8d1b					NSMShiftLeft:
.8d1b	18		clc				clc
.8d1c					NSMRotateLeft:
.8d1c	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d1f	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d22	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d25	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d28	60		rts				rts
.8d29					NSMShiftRight:
.8d29	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d2c	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d2f	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d32	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d35	60		rts				rts
.8d36					NSMIsZero:
.8d36	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d39	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d3c	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d3f	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9685					DecimalScalarTable:
>9685	66 66 66 66				.dword $66666666 ; 0.1
>9689	de					.byte $de
>968a	1f 85 eb 51				.dword $51eb851f ; 0.01
>968e	db					.byte $db
>968f	4c 37 89 41				.dword $4189374c ; 0.001
>9693	d8					.byte $d8
>9694	ac 8b db 68				.dword $68db8bac ; 0.0001
>9698	d4					.byte $d4
>9699	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>969d	d1					.byte $d1
>969e	83 de 1b 43				.dword $431bde83 ; 1e-06
>96a2	ce					.byte $ce
>96a3	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>96a7	ca					.byte $ca
>96a8	89 3b e6 55				.dword $55e63b89 ; 1e-08
>96ac	c7					.byte $c7
>96ad	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>96b1	c4					.byte $c4
>96b2	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>96b6	c0					.byte $c0
>96b7	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>96bb	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.96bc					SyntaxError:
.96bc	a9 02		lda #$02		lda	#2
.96be	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c1					RangeError:
.96c1	a9 04		lda #$04		lda	#4
.96c3	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c6					TypeError:
.96c6	a9 05		lda #$05		lda	#5
.96c8	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96cb					ArgumentError:
.96cb	a9 07		lda #$07		lda	#7
.96cd	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96d0					NotDoneError:
.96d0	a9 0c		lda #$0c		lda	#12
.96d2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96d5					ErrorText:
>96d5	42 72 65 61 6b 00			.text	"Break",0
>96db	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>96e3	72 72 6f 72 00
>96e8	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>96f0	20 62 79 20 7a 65 72 6f 00
>96f9	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9701	61 6e 67 65 00
>9706	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>970e	6d 61 74 63 68 00
>9714	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>971c	65 6d 6f 72 79 00
>9722	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>972a	61 72 67 75 6d 65 6e 74 00
>9733	53 74 6f 70 00				.text	"Stop",0
>9738	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9740	6f 6f 20 6c 6f 6e 67 00
>9748	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9750	6e 20 66 61 69 6c 65 64 00
>9759	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9761	61 74 61 00
>9765	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>976d	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9773					StringConcrete:
.9773	5a		phy				phy 								; save position on stack
.9774	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9777	85 38		sta $38				sta 	zTemp1
.9779	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.977c	85 39		sta $39				sta 	zTemp1+1
.977e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9780					_SALength:
.9780	c8		iny				iny
.9781	b1 38		lda ($38),y			lda 	(zTemp1),y
.9783	d0 fb		bne $9780			bne 	_SALength
.9785	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9787	b0 3f		bcs $97c8			bcs 	_SALengthError
.9789	98		tya				tya 				 				; length of the new string
.978a	18		clc				clc
.978b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.978d	90 02		bcc $9791			bcc 	_SAHaveLength
.978f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9791					_SAHaveLength:
.9791	48		pha				pha 								; save length.
.9792	38		sec				sec
.9793	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9795	6d 0e 07	adc $070e			adc 	StringMemory
.9798	8d 0e 07	sta $070e			sta 	StringMemory
.979b	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.979d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.97a0	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.97a2	6d 0f 07	adc $070f			adc 	StringMemory+1
.97a5	8d 0f 07	sta $070f			sta 	StringMemory+1
.97a8	85 3b		sta $3b				sta 	zTemp2+1
.97aa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97ad	68		pla				pla 								; save length-3 (chars allowed) in first byte
.97ae	38		sec				sec
.97af	e9 03		sbc #$03			sbc 	#3
.97b1	92 3a		sta ($3a)			sta 	(zTemp2)
.97b3	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.97b5	a0 01		ldy #$01			ldy 	#1
.97b7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97b9					_SACopyNewString:
.97b9	a0 00		ldy #$00			ldy 	#0
.97bb					_SACopyNSLoop:
.97bb	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.97bd	c8		iny				iny 								; write two on in string storage
.97be	c8		iny				iny
.97bf	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97c1	88		dey				dey 								; this makes it one one.
.97c2	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.97c4	d0 f5		bne $97bb			bne 	_SACopyNSLoop
.97c6	7a		ply				ply
.97c7	60		rts				rts
.97c8					_SALengthError:
.97c8	a9 09		lda #$09		lda	#9
.97ca	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.97cd					StringSystemInitialise:
.97cd	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.97cf	8d 0e 07	sta $070e			sta 	0+StringMemory
.97d2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.97d4	8d 0f 07	sta $070f			sta 	1+StringMemory
.97d7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.97da	60		rts				rts
.97db					StringSpaceInitialise:
.97db	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.97dd	8d 10 07	sta $0710			sta 	StringInitialised
.97e0	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.97e3	8d 11 07	sta $0711			sta 	StringTempPointer
.97e6	ad 0f 07	lda $070f			lda 	StringMemory+1
.97e9	3a		dec a				dec 	a
.97ea	8d 12 07	sta $0712			sta 	StringTempPointer+1
.97ed	60		rts				rts
.97ee					StringTempAllocate:
.97ee	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.97f0	b0 35		bcs $9827			bcs 	_STALength
.97f2	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.97f5	30 05		bmi $97fc			bmi 	_STAAllocate
.97f7	48		pha				pha 								; save value to subtract.
.97f8	20 db 97	jsr $97db			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.97fb	68		pla				pla 								; restore it
.97fc					_STAAllocate:
.97fc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.97fe	18		clc				clc  								; deliberate allows one more
.97ff	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9802	8d 11 07	sta $0711			sta 	StringTempPointer
.9805	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9808	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.980a	ad 12 07	lda $0712			lda 	StringTempPointer+1
.980d	69 ff		adc #$ff			adc 	#$FF
.980f	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9812	85 3d		sta $3d				sta 	zsTemp+1
.9814	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9817	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.981a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.981d	a9 10		lda #$10			lda 	#NSTString
.981f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9822	a9 00		lda #$00			lda 	#0 							; clear the target string
.9824	92 3c		sta ($3c)			sta 	(zsTemp)
.9826	60		rts				rts
.9827					_STALength:
.9827	a9 09		lda #$09		lda	#9
.9829	4c 5f 82	jmp $825f		jmp	ErrorHandler
.982c					StringTempWrite:
.982c	48		pha				pha
.982d	92 3c		sta ($3c)			sta 	(zsTemp)
.982f	e6 3c		inc $3c				inc 	zsTemp
.9831	d0 02		bne $9835			bne 	_STWNoCarry
.9833	e6 3d		inc $3d				inc 	zsTemp+1
.9835					_STWNoCarry:
.9835	a9 00		lda #$00			lda 	#0
.9837	92 3c		sta ($3c)			sta 	(zsTemp)
.9839	68		pla				pla
.983a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8d43					BackloadProgram:
.8d43	a2 ff		ldx #$ff			ldx 	#$FF
.8d45	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8d48	20 6f 8d	jsr $8d6f			jsr 	BLReadByte
.8d4b	30 1e		bmi $8d6b			bmi 	_BPExit
.8d4d					_BPCopy:
.8d4d	e8		inx				inx  								; copy byte in
.8d4e	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8d51	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8d54	20 6f 8d	jsr $8d6f			jsr 	BLReadByte 					; read next byte
.8d57	30 0a		bmi $8d63			bmi 	_BPEndLine 					; -ve = EOL
.8d59	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8d5b	d0 02		bne $8d5f			bne 	_BPNotTab
.8d5d	a9 20		lda #$20			lda 	#' '
.8d5f					_BPNotTab:
.8d5f	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8d61	b0 ea		bcs $8d4d			bcs 	_BPCopy
.8d63					_BPEndLine:
.8d63	20 2b 8f	jsr $8f2b			jsr 	TokeniseLine 				; tokenise the line.
.8d66	20 bd 91	jsr $91bd			jsr 	MemoryAppend 				; append to current program
.8d69	80 d8		bra $8d43			bra 	BackloadProgram
.8d6b					_BPExit:
.8d6b	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8d6e	60		rts				rts
.8d6f					BLReadByte:
.8d6f					_BLLoad:
.8d6f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8d72	ee 70 8d	inc $8d70			inc 	_BLLoad+1
.8d75	d0 03		bne $8d7a			bne 	_BLNoCarry
.8d77	ee 71 8d	inc $8d71			inc 	_BLLoad+2
.8d7a					_BLNoCarry:
.8d7a	c9 00		cmp #$00			cmp 	#0
.8d7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8d7d					TokeniseSearchTable:
.8d7d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8d7f	85 36		sta $36				sta 	zTemp0
.8d81	a0 00		ldy #$00			ldy 	#0
.8d83	a9 80		lda #$80			lda 	#$80 						; token #
.8d85	85 38		sta $38				sta 	zTemp1
.8d87					_TSTLoop:
.8d87	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8d89	30 49		bmi $8dd4			bmi 	_TSTFail 					; -ve = end of table
.8d8b	f0 2e		beq $8dbb			beq 	_TSTNext 					; zero, check next it's a dummy
.8d8d	c8		iny				iny 								; get the hash
.8d8e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d90	88		dey				dey
.8d91	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8d94	d0 25		bne $8dbb			bne 	_TSTNext
.8d96	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8d99	38		sec				sec
.8d9a	ed 00 07	sbc $0700			sbc 	identStart
.8d9d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8d9f	d0 1a		bne $8dbb			bne 	_TSTNext
.8da1	5a		phy				phy 								; save Y , we might fail
.8da2	c8		iny				iny 								; point to text
.8da3	c8		iny				iny
.8da4	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8da7					_TSTCompareName:
.8da7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8daa	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8dac	d0 0c		bne $8dba			bne 	_TSTNextPullY 				; fail, pullY and do next
.8dae	e8		inx				inx
.8daf	c8		iny				iny
.8db0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8db3	d0 f2		bne $8da7			bne 	_TSTCompareName
.8db5	7a		ply				ply 								; throw Y
.8db6	a5 38		lda $38				lda 	zTemp1 						; get token #
.8db8	38		sec				sec 								; return with CS = passed.
.8db9	60		rts				rts
.8dba					_TSTNextPullY:
.8dba	7a		ply				ply 								; restore current, fall through.
.8dbb					_TSTNext:
.8dbb	e6 38		inc $38				inc 	zTemp1 						; token counter
.8dbd	98		tya				tya
.8dbe	18		clc				clc
.8dbf	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8dc1	1a		inc a				inc 	a 							; +1
.8dc2	1a		inc a				inc 	a 							; +2
.8dc3	a8		tay				tay
.8dc4	10 c1		bpl $8d87			bpl 	_TSTLoop 					; if Y < $80 loop back
.8dc6	98		tya				tya 								; add Y to zTemp0 and reset Y
.8dc7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8dc9	18		clc				clc  								; but have tables > 255 bytes
.8dca	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8dcc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8dce	90 b7		bcc $8d87			bcc 	_TSTLoop
.8dd0	e6 37		inc $37				inc 	zTemp0+1
.8dd2	80 b3		bra $8d87			bra 	_TSTLoop
.8dd4					_TSTFail:
.8dd4	18		clc				clc
.8dd5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8dd6					KeywordSet0:
>8dd6	00 65					.text	0,$65,""               ; $80 !0:EOF
>8dd8	00 58					.text	0,$58,""               ; $81 !1:SH1
>8dda	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ddc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8de2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8dea	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8df0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8df7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8dfe	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8e05	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8e0b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8e13	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8e1b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8e21	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8e28	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8e2e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8e36	28
>8e37	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8e3d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8e43	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8e49	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8e50	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8e56	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8e5c	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8e61	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8e65	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8e6b	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8e73	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8e7a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8e81	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8e89	43
>8e8a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8e90	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8e97	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8e9d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8ea3	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8ea8	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8eae	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8eb3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8eba	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8ec0	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8ec5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8ecc	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8ed2	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8ed7	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8edf	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8ee5	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8ee9	ff					.text	$FF
.8eea					KeywordSet1:
>8eea	00 65					.text	0,$65,""               ; $80 !0:EOF
>8eec	00 58					.text	0,$58,""               ; $81 !1:SH1
>8eee	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ef0	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8ef8	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8eff	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8f04	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8f0a	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8f0f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8f17	45
>8f18	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8f1d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8f23	ff					.text	$FF
.8f24					KeywordSet2:
>8f24	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f26	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f28	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f2a	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8f2b					TokeniseLine:
.8f2b	20 b3 90	jsr $90b3			jsr 	FixLineBufferCase 			; fix line case
.8f2e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8f30	8d 15 07	sta $0715			sta 	tokenOffset
.8f33	9c 16 07	stz $0716			stz 	tokenLineNumber
.8f36	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8f39	a2 ff		ldx #$ff			ldx 	#$FF
.8f3b					_TKFindFirst:
.8f3b	e8		inx				inx
.8f3c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f3f	f0 79		beq $8fba			beq 	_TKExit
.8f41	c9 20		cmp #$20			cmp 	#' '
.8f43	90 f6		bcc $8f3b			bcc 	_TKFindFirst
.8f45	c9 30		cmp #$30			cmp 	#'0'
.8f47	90 07		bcc $8f50			bcc 	_TKNoLineNumber
.8f49	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f4b	b0 03		bcs $8f50			bcs 	_TKNoLineNumber
.8f4d	20 dd 90	jsr $90dd			jsr 	TokeniseExtractLineNumber
.8f50					_TKNoLineNumber:
.8f50					_TKTokeniseLoop:
.8f50	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8f53	f0 65		beq $8fba			beq 	_TKExit
.8f55	e8		inx				inx
.8f56	c9 20		cmp #$20			cmp 	#' '
.8f58	f0 f6		beq $8f50			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8f5a	ca		dex				dex 								; undo last get, A contains character, X is position.
.8f5b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8f5d	f0 61		beq $8fc0			beq 	_TKTokeniseIdentifier
.8f5f	c9 41		cmp #$41			cmp 	#'A'
.8f61	90 04		bcc $8f67			bcc 	_TKTokenisePunctuation
.8f63	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8f65	90 59		bcc $8fc0			bcc 	_TKTokeniseIdentifier
.8f67					_TKTokenisePunctuation:
.8f67	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8f69	f0 27		beq $8f92			beq 	_TKString
.8f6b	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8f6d	f0 28		beq $8f97			beq 	_TKHexConstant
.8f6f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8f71	f0 29		beq $8f9c			beq 	_TKCheckDouble
.8f73	c9 3e		cmp #$3e			cmp 	#'>'
.8f75	f0 25		beq $8f9c			beq 	_TKCheckDouble
.8f77					_TKStandardPunctuation:
.8f77	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8f7a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8f7c	90 0e		bcc $8f8c			bcc 	_TKNoShift
.8f7e	48		pha				pha 								; save
.8f7f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8f81	85 36		sta $36				sta 	zTemp0
.8f83	68		pla				pla
.8f84	29 20		and #$20			and 	#32 						; bit 5
.8f86	4a		lsr a				lsr 	a 							; shift into bit 3
.8f87	4a		lsr a				lsr 	a
.8f88	05 36		ora $36				ora 	zTemp0
.8f8a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8f8c					_TKNoShift:
.8f8c	20 22 91	jsr $9122			jsr 	TokeniseWriteByte 			; write the punctuation character
.8f8f	e8		inx				inx 								; consume the character
.8f90	80 be		bra $8f50			bra 	_TKTokeniseLoop 			; and loop round again.
.8f92					_TKString:
.8f92	20 42 90	jsr $9042			jsr 	TokeniseString
.8f95	80 b9		bra $8f50			bra 	_TKTokeniseLoop
.8f97					_TKHexConstant:
.8f97	20 7d 90	jsr $907d			jsr 	TokeniseHexConstant
.8f9a	80 b4		bra $8f50			bra 	_TKTokeniseLoop
.8f9c					_TKCheckDouble:
.8f9c	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8f9f	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8fa1	90 d4		bcc $8f77			bcc 	_TKStandardPunctuation
.8fa3	c9 3f		cmp #$3f			cmp 	#'>'+1
.8fa5	b0 d0		bcs $8f77			bcs 	_TKStandardPunctuation
.8fa7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8faa	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8fac	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8fad	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8fb0	38		sec				sec
.8fb1	e9 3c		sbc #$3c			sbc 	#'<'
.8fb3	20 22 91	jsr $9122			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8fb6	e8		inx				inx 								; consume both
.8fb7	e8		inx				inx
.8fb8	80 96		bra $8f50			bra 	_TKTokeniseLoop
.8fba	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8fbc	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.8fbf	60		rts				rts
.8fc0					_TKTokeniseIdentifier:
.8fc0	8e 00 07	stx $0700			stx 	identStart 					; save start
.8fc3	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8fc6					_TKCheckLoop:
.8fc6	e8		inx				inx 								; look at next, we know first is identifier.
.8fc7	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8fca	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8fcc	f0 f8		beq $8fc6			beq 	_TKCheckLoop
.8fce	c9 30		cmp #$30			cmp	 	#"0"
.8fd0	90 0c		bcc $8fde			bcc 	_TKEndIdentifier
.8fd2	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fd4	90 f0		bcc $8fc6			bcc 	_TKCheckLoop
.8fd6	c9 41		cmp #$41			cmp	 	#"A"
.8fd8	90 04		bcc $8fde			bcc 	_TKEndIdentifier
.8fda	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8fdc	90 e8		bcc $8fc6			bcc 	_TKCheckLoop
.8fde					_TKEndIdentifier:
.8fde	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8fe1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8fe3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8fe5	f0 06		beq $8fed			beq 	_TKHasTypeCharacter
.8fe7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8fe9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8feb	d0 07		bne $8ff4			bne 	_TKNoTypeCharacter
.8fed					_TKHasTypeCharacter:
.8fed	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8ff0	e8		inx				inx 								; read next
.8ff1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ff4					_TKNoTypeCharacter:
.8ff4	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8ff6	d0 09		bne $9001			bne 	_TKNoArray
.8ff8	e8		inx				inx 								; skip the (
.8ff9	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8ffc	09 04		ora #$04			ora 	#$04
.8ffe	8d 04 07	sta $0704			sta 	identTypeByte
.9001					_TKNoArray:
.9001	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9004	20 9e 90	jsr $909e			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9007	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.9009	a9 d6		lda #$d6			lda 	#(KeywordSet0) & $FF
.900b	20 7d 8d	jsr $8d7d			jsr 	TokeniseSearchTable
.900e	a2 00		ldx #$00			ldx 	#0
.9010	b0 1f		bcs $9031			bcs 	_TKFoundToken
.9012	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9014	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.9016	20 7d 8d	jsr $8d7d			jsr 	TokeniseSearchTable
.9019	a2 81		ldx #$81			ldx 	#$81
.901b	b0 14		bcs $9031			bcs 	_TKFoundToken
.901d	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.901f	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.9021	20 7d 8d	jsr $8d7d			jsr 	TokeniseSearchTable
.9024	a2 82		ldx #$82			ldx 	#$82
.9026	b0 09		bcs $9031			bcs 	_TKFoundToken
.9028	20 2e 91	jsr $912e			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.902b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.902e	4c 50 8f	jmp $8f50			jmp 	_TKTokeniseLoop 			; and go round again.
.9031					_TKFoundToken:
.9031	48		pha				pha 								; save token
.9032	8a		txa				txa 								; shift in X, is there one ?
.9033	f0 03		beq $9038			beq 	_TKNoTShift
.9035	20 22 91	jsr $9122			jsr 	TokeniseWriteByte 			; if so, write it out
.9038					_TKNoTShift:
.9038	68		pla				pla 								; restore and write token
.9039	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.903c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.903f	4c 50 8f	jmp $8f50			jmp 	_TKTokeniseLoop 			; and go round again.
.9042					TokeniseString:
.9042	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9044	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.9047	e8		inx				inx									; start of quoted string.
.9048	da		phx				phx 								; push start of string on top
.9049	ca		dex				dex
.904a					_TSFindEnd:
.904a	e8		inx				inx
.904b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.904e	f0 04		beq $9054			beq 	_TSEndOfString
.9050	c9 22		cmp #$22			cmp 	#'"'
.9052	d0 f6		bne $904a			bne 	_TSFindEnd
.9054					_TSEndOfString:
.9054	7a		ply				ply  								; so now Y is first character, X is character after end.
.9055	48		pha				pha 								; save terminating character
.9056	20 5e 90	jsr $905e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9059	68		pla				pla 								; terminating character
.905a	f0 01		beq $905d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.905c	e8		inx				inx
.905d					_TSNotQuote:
.905d	60		rts				rts
.905e					TOWriteBlockXY:
.905e	86 36		stx $36				stx 	zTemp0 						; write end character
.9060	98		tya				tya
.9061	49 ff		eor #$ff			eor 	#$FF
.9063	38		sec				sec
.9064	65 36		adc $36				adc 	zTemp0
.9066	1a		inc a				inc 	a 							; one extra for NULL
.9067	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.906a					_TOBlockLoop:
.906a	c4 36		cpy $36				cpy 	zTemp0
.906c	f0 09		beq $9077			beq 	_TOBlockExit
.906e	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9071	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.9074	c8		iny				iny
.9075	80 f3		bra $906a			bra 	_TOBlockLoop
.9077					_TOBlockExit:
.9077	a9 00		lda #$00			lda 	#0
.9079	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.907c	60		rts				rts
.907d					TokeniseHexConstant:
.907d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.907f	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.9082	e8		inx				inx									; start of quoted string.
.9083	da		phx				phx 								; push start of constant on top
.9084	ca		dex				dex
.9085					_THFindLoop:
.9085	e8		inx				inx
.9086	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9089	c9 30		cmp #$30			cmp 	#"0"
.908b	90 0c		bcc $9099			bcc 	_THFoundEnd
.908d	c9 3a		cmp #$3a			cmp 	#"9"+1
.908f	90 f4		bcc $9085			bcc 	_THFindLoop
.9091	c9 41		cmp #$41			cmp 	#"A"
.9093	90 04		bcc $9099			bcc 	_THFoundEnd
.9095	c9 47		cmp #$47			cmp 	#"F"+1
.9097	90 ec		bcc $9085			bcc 	_THFindLoop
.9099					_THFoundEnd:
.9099	7a		ply				ply 								; restore start
.909a	20 5e 90	jsr $905e			jsr 	TOWriteBlockXY 				; output the block
.909d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.909e					TokeniseCalculateHash:
.909e	da		phx				phx
.909f	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.90a2	a9 00		lda #$00			lda 	#0
.90a4					_TCHLoop:
.90a4	18		clc				clc
.90a5	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.90a8	e8		inx				inx
.90a9	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.90ac	d0 f6		bne $90a4			bne 	_TCHLoop
.90ae	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.90b1	fa		plx				plx
.90b2	60		rts				rts
.90b3					FixLineBufferCase:
.90b3	a2 00		ldx #$00			ldx 	#0
.90b5					_FLBCLoop:
.90b5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.90b8	f0 22		beq $90dc			beq 	_FLBCExit 					; end of string.
.90ba	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.90bc	f0 11		beq $90cf			beq 	_FLBCInQuotes
.90be	e8		inx				inx
.90bf	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.90c1	90 f2		bcc $90b5			bcc 	_FLBCLoop
.90c3	c9 7b		cmp #$7b			cmp 	#'z'+1
.90c5	b0 ee		bcs $90b5			bcs 	_FLBCLoop
.90c7	38		sec				sec 								; make U/C
.90c8	e9 20		sbc #$20			sbc 	#32
.90ca	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.90cd	80 e6		bra $90b5			bra 	_FLBCLoop
.90cf					_FLBCInQuotes:
.90cf	e8		inx				inx 								; advance
.90d0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.90d3	f0 07		beq $90dc			beq 	_FLBCExit 					; exit on EOS
.90d5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.90d7	d0 f6		bne $90cf			bne 	_FLBCInQuotes
.90d9	e8		inx				inx 								; skip over it
.90da	80 d9		bra $90b5			bra 	_FLBCLoop
.90dc					_FLBCExit:
.90dc	60		rts				rts
.90dd					TokeniseExtractLineNumber:
.90dd	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.90e0	48		pha				pha
.90e1	ad 16 07	lda $0716			lda 	tokenLineNumber
.90e4	48		pha				pha
.90e5	20 1b 91	jsr $911b			jsr 	_TELNTimes2 				; line # x 4
.90e8	20 1b 91	jsr $911b			jsr 	_TELNTimes2 				; line # x 2
.90eb	18		clc				clc 								; add stacked value
.90ec	68		pla				pla
.90ed	6d 16 07	adc $0716			adc 	tokenLineNumber
.90f0	8d 16 07	sta $0716			sta 	tokenLineNumber
.90f3	68		pla				pla
.90f4	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.90f7	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.90fa	20 1b 91	jsr $911b			jsr 	_TELNTimes2 				; line # x 10
.90fd	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9100	e8		inx				inx
.9101	29 0f		and #$0f			and 	#15 						; add to line #
.9103	18		clc				clc
.9104	6d 16 07	adc $0716			adc 	tokenLineNumber
.9107	8d 16 07	sta $0716			sta 	tokenLineNumber
.910a	90 03		bcc $910f			bcc 	_TLENNoCarry
.910c	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.910f					_TLENNoCarry:
.910f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9112	c9 30		cmp #$30			cmp 	#'0'
.9114	90 04		bcc $911a			bcc 	_TLENExit
.9116	c9 3a		cmp #$3a			cmp 	#'9'+1
.9118	90 c3		bcc $90dd			bcc 	TokeniseExtractLineNumber
.911a					_TLENExit:
.911a	60		rts				rts
.911b					_TELNTimes2:
.911b	0e 16 07	asl $0716			asl 	tokenLineNumber
.911e	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9121	60		rts				rts
.9122					TokeniseWriteByte:
.9122	da		phx				phx
.9123	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9126	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9129	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.912c	fa		plx				plx
.912d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.912e					CheckCreateVariableRecord:
.912e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9130	85 36		sta $36				sta 	0+zTemp0
.9132	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9134	85 37		sta $37				sta 	1+zTemp0
.9136	20 01 92	jsr $9201			jsr 	VariableOpen 				; make variable space available
.9139					_CCVSearch:
.9139	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.913b	f0 2c		beq $9169			beq 	_CCVFail
.913d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.913f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9141	cd 03 07	cmp $0703			cmp 	identHash
.9144	d0 16		bne $915c			bne 	_CCVNext
.9146	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9148	ae 00 07	ldx $0700			ldx 	identStart
.914b					_CCVCompare:
.914b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.914e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9150	e8		inx				inx 								; advance pointers
.9151	c8		iny				iny
.9152	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9153	d0 07		bne $915c			bne 	_CCVNext  					; didn't match go to next.
.9155	90 f4		bcc $914b			bcc 	_CCVCompare 				; not finished yet.
.9157	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.915a	f0 41		beq $919d			beq 	_CCVFound 					; yes, we were successful
.915c					_CCVNext:
.915c	18		clc				clc
.915d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.915f	65 36		adc $36				adc 	zTemp0
.9161	85 36		sta $36				sta 	zTemp0
.9163	90 d4		bcc $9139			bcc 	_CCVSearch
.9165	e6 37		inc $37				inc 	zTemp0+1
.9167	80 d0		bra $9139			bra 	_CCVSearch
.9169					_CCVFail:
.9169	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.916b	ad 03 07	lda $0703			lda 	identHash
.916e	91 36		sta ($36),y			sta 	(zTemp0),y
.9170	c8		iny				iny 								; offset 2 is the type byte
.9171	ad 04 07	lda $0704			lda 	identTypeByte
.9174	91 36		sta ($36),y			sta 	(zTemp0),y
.9176	c8		iny				iny
.9177					_CCVData:
.9177	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9179	91 36		sta ($36),y			sta 	(zTemp0),y
.917b	c8		iny				iny
.917c	c0 08		cpy #$08			cpy 	#8
.917e	90 f7		bcc $9177			bcc 	_CCVData
.9180	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9183					_CCVCopyName:
.9183	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9186	91 36		sta ($36),y			sta 	(zTemp0),y
.9188	e8		inx				inx
.9189	c8		iny				iny
.918a	ec 02 07	cpx $0702			cpx 	identTypeEnd
.918d	d0 f4		bne $9183			bne 	_CCVCopyName
.918f	98		tya				tya 								; patch offset
.9190	92 36		sta ($36)			sta 	(zTemp0)
.9192	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9194	91 36		sta ($36),y			sta 	(zTemp0),y
.9196	88		dey				dey
.9197	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9199	09 80		ora #$80			ora 	#$80
.919b	91 36		sta ($36),y			sta 	(zTemp0),y
.919d					_CCVFound:
.919d	20 02 92	jsr $9202			jsr 	VariableClose 				; map out variables, perhaps.
.91a0	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.91a2	38		sec				sec
.91a3	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.91a5	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.91a7	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.91aa	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.91ac	20 22 91	jsr $9122			jsr 	TokeniseWriteByte
.91af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.983b					MemoryPeek:
.983b	b2 36		lda ($36)			lda 	(zTemp0)
.983d	60		rts				rts
.983e					MemoryPoke:
.983e	92 36		sta ($36)			sta 	(zTemp0)
.9840	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9841					EXTPrintCharacter:
.9841	48		pha				pha
.9842	da		phx				phx
.9843	5a		phy				phy
.9844	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9847	7a		ply				ply
.9848	fa		plx				plx
.9849	68		pla				pla
.984a	60		rts				rts
.984b					EXTInputSingleCharacter:
.984b	da		phx				phx
.984c	5a		phy				phy
.984d					_EISCWait:
.984d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9850	c9 00		cmp #$00			cmp 	#0
.9852	f0 f9		beq $984d			beq 	_EISCWait
.9854	7a		ply				ply
.9855	fa		plx				plx
.9856	60		rts				rts
.9857					EXTInputLine:
.9857	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9859					_ILLoop:
.9859	da		phx				phx 								; read character in
.985a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.985d	fa		plx				plx
.985e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9860	f0 12		beq $9874			beq 	_ILBackspace
.9862	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9864	f0 15		beq $987b			beq 	_ILExit
.9866	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9868	90 ef		bcc $9859			bcc 	_ILLoop
.986a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.986c	f0 eb		beq $9859			beq 	_ILLoop
.986e	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9871	e8		inx				inx
.9872	80 e5		bra $9859			bra 	_ILLoop
.9874					_ILBackspace:
.9874	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9876	f0 e1		beq $9859			beq 	_ILLoop
.9878	ca		dex				dex 								; back one.
.9879	80 de		bra $9859			bra 	_ILLoop
.987b					_ILExit:
.987b	20 41 98	jsr $9841			jsr 	EXTPrintCharacter
.987e	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9881	60		rts				rts
.9882					EXTBreakCheck:
.9882	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.91b0					MemoryNew:
.91b0	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91b2	85 30		sta $30				sta 	codePtr
.91b4	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91b6	85 31		sta $31				sta 	codePtr+1
.91b8	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.91ba	92 30		sta ($30)			sta 	(codePtr)
.91bc	60		rts				rts
.91bd					MemoryAppend:
.91bd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91bf	85 30		sta $30				sta 	codePtr
.91c1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91c3	85 31		sta $31				sta 	codePtr+1
.91c5					_MAFindEnd:
.91c5	b2 30		lda ($30)			lda 	(codePtr)
.91c7	f0 0d		beq $91d6			beq 	_MAFoundEnd
.91c9	18		clc				clc
.91ca	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91cc	65 30		adc $30				adc 	codePtr
.91ce	85 30		sta $30				sta 	codePtr
.91d0	90 02		bcc $91d4			bcc 	_CREExit
.91d2	e6 31		inc $31				inc 	codePtr+1
.91d4					_CREExit:
.91d4	80 ef		bra $91c5			bra 	_MAFindEnd
.91d6					_MAFoundEnd:
.91d6	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.91d9	c0 04		cpy #$04			cpy 	#4 							; blank line
.91db	f0 0e		beq $91eb			beq 	_MANoLine
.91dd	a9 00		lda #$00			lda 	#0 							; end of program
.91df	91 30		sta ($30),y			sta 	(codePtr),y
.91e1					_MACopy:
.91e1	88		dey				dey
.91e2	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.91e5	91 30		sta ($30),y			sta 	(codePtr),y
.91e7	c0 00		cpy #$00			cpy 	#0
.91e9	d0 f6		bne $91e1			bne 	_MACopy
.91eb					_MANoLine:
.91eb	60		rts				rts
.91ec					MemoryInline:
.91ec	98		tya				tya 								; put address into stack,x
.91ed	18		clc				clc
.91ee	65 30		adc $30				adc 	codePtr
.91f0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91f3	a5 31		lda $31				lda 	codePtr+1
.91f5	69 00		adc #$00			adc 	#0
.91f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91fa	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.91fd	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9200	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.9201					VariableOpen:
.9201	60		rts				rts
.9202					VariableClose:
.9202	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
