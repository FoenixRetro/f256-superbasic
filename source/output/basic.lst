
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Nov 20 19:59:54 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_PLAYINGLPAREN                    = $96; $96 PLAYING(
=$97					KWD_RANDOMLPAREN                     = $97; $97 RANDOM(
=$98					KWD_RIGHTDOLLARLPAREN                = $98; $98 RIGHT$(
=$99					KWD_RNDLPAREN                        = $99; $99 RND(
=$9a					KWD_SGNLPAREN                        = $9a; $9a SGN(
=$9b					KWD_SPCLPAREN                        = $9b; $9b SPC(
=$9c					KWD_STRDOLLARLPAREN                  = $9c; $9c STR$(
=$9d					KWD_TIMERLPAREN                      = $9d; $9d TIMER(
=$9e					KWD_TRUE                             = $9e; $9e TRUE
=$9f					KWD_VALLPAREN                        = $9f; $9f VAL(
=$a0					KWD_FOR                              = $a0; $a0 FOR
=$a1					KWD_IF                               = $a1; $a1 IF
=$a2					KWD_PROC                             = $a2; $a2 PROC
=$a3					KWD_REPEAT                           = $a3; $a3 REPEAT
=$a4					KWD_WHILE                            = $a4; $a4 WHILE
=$a5					KWD_ENDIF                            = $a5; $a5 ENDIF
=$a6					KWD_ENDPROC                          = $a6; $a6 ENDPROC
=$a7					KWD_NEXT                             = $a7; $a7 NEXT
=$a8					KWD_THEN                             = $a8; $a8 THEN
=$a9					KWD_UNTIL                            = $a9; $a9 UNTIL
=$aa					KWD_WEND                             = $aa; $aa WEND
=$ab					KWD_BY                               = $ab; $ab BY
=$ac					KWD_CALL                             = $ac; $ac CALL
=$ad					KWD_CIRCLE                           = $ad; $ad CIRCLE
=$ae					KWD_CLEAR                            = $ae; $ae CLEAR
=$af					KWD_CLS                              = $af; $af CLS
=$b0					KWD_COLOR                            = $b0; $b0 COLOR
=$b1					KWD_COLOUR                           = $b1; $b1 COLOUR
=$b2					KWD_DATA                             = $b2; $b2 DATA
=$b3					KWD_DIM                              = $b3; $b3 DIM
=$b4					KWD_DOWNTO                           = $b4; $b4 DOWNTO
=$b5					KWD_ELSE                             = $b5; $b5 ELSE
=$b6					KWD_FROM                             = $b6; $b6 FROM
=$b7					KWD_GFX                              = $b7; $b7 GFX
=$b8					KWD_GOSUB                            = $b8; $b8 GOSUB
=$b9					KWD_GOTO                             = $b9; $b9 GOTO
=$ba					KWD_HERE                             = $ba; $ba HERE
=$bb					KWD_IMAGE                            = $bb; $bb IMAGE
=$bc					KWD_LET                              = $bc; $bc LET
=$bd					KWD_LINE                             = $bd; $bd LINE
=$be					KWD_LOCAL                            = $be; $be LOCAL
=$bf					KWD_OFF                              = $bf; $bf OFF
=$c0					KWD_ON                               = $c0; $c0 ON
=$c1					KWD_OUTLINE                          = $c1; $c1 OUTLINE
=$c2					KWD_PALETTE                          = $c2; $c2 PALETTE
=$c3					KWD_PLOT                             = $c3; $c3 PLOT
=$c4					KWD_PRINT                            = $c4; $c4 PRINT
=$c5					KWD_READ                             = $c5; $c5 READ
=$c6					KWD_RECT                             = $c6; $c6 RECT
=$c7					KWD_REM                              = $c7; $c7 REM
=$c8					KWD_RETURN                           = $c8; $c8 RETURN
=$c9					KWD_SOLID                            = $c9; $c9 SOLID
=$ca					KWD_SOUND                            = $ca; $ca SOUND
=$cb					KWD_SPRITE                           = $cb; $cb SPRITE
=$cc					KWD_TEXT                             = $cc; $cc TEXT
=$cd					KWD_TO                               = $cd; $cd TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$a0					KWC_FIRST_STRUCTURE = $a0
=$a5					KWC_FIRST_STRUCTURE_DEC = $a5
=$aa					KWC_LAST_STRUCTURE = $aa
=$83					KWC_FIRST_UNARY = $83
=$9f					KWC_LAST_UNARY = $9f

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 9e a9	jsr $a99e			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8014	20 36 88	jsr $8836			jsr 	NewProgram 					; erase current program
.8017	20 de 82	jsr $82de			jsr 	BackloadProgram
.801a	4c 3b 83	jmp $833b			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>803e	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3351."
>8046	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>8056	2e 20 42 75 69 6c 64 20 33 33 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8063	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8066					AssembleGroup1:
.8066	a9 ff		lda #$ff			lda 	#$FF
.8068	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.806b	80 02		bra $806f			bra 	AsmGroup12
.806d					AssembleGroup2:
.806d	a9 00		lda #$00			lda 	#$00
.806f					AsmGroup12:
.806f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8072	68		pla				pla 								; pop the return address to access the information following.
.8073	fa		plx				plx
.8074	20 fd 80	jsr $80fd			jsr 	AccessParameters 			; get opcode and save as base
.8077	8d a4 04	sta $04a4			sta 	BaseOpcode
.807a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.807d	d0 08		bne $8087			bne 	_AG12HaveMask
.807f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8081	20 05 81	jsr $8105			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8084	8d a5 04	sta $04a5			sta 	ModeMask
.8087					_AG12HaveMask:
.8087	20 40 82	jsr $8240			jsr 	TypeAndCalculateOperand 	; get zero page type
.808a	da		phx				phx 								; save found address mode
.808b	20 69 81	jsr $8169			jsr 	AssembleModeX
.808e	fa		plx				plx  								; restore address mode
.808f	b0 0b		bcs $809c			bcs 	_AG12Exit
.8091	20 9d 80	jsr $809d			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8094	20 69 81	jsr $8169			jsr 	AssembleModeX
.8097	b0 03		bcs $809c			bcs 	_AG12Exit
.8099	4c 86 9f	jmp $9f86			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.809c					_AG12Exit:
.809c	60		rts				rts
.809d					PromoteToAbsolute:
.809d	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.809f	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80a1	f0 19		beq $80bc			beq 	_PTADo
.80a3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80a5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80a7	f0 13		beq $80bc			beq 	_PTADo
.80a9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80ab	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80ad	f0 0d		beq $80bc			beq 	_PTADo
.80af	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80b1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80b3	f0 07		beq $80bc			beq 	_PTADo
.80b5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80b7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80b9	f0 01		beq $80bc			beq 	_PTADo
.80bb	60		rts				rts
.80bc					_PTADo:
.80bc	aa		tax				tax
.80bd	60		rts				rts
.80be					AssembleGroup3:
.80be	68		pla				pla 								; get parameters, which is just the opcode.
.80bf	fa		plx				plx
.80c0	20 fd 80	jsr $80fd			jsr 	AccessParameters 			; get and output opcode
.80c3	20 15 81	jsr $8115			jsr 	AssemblerWriteByte
.80c6	20 a4 82	jsr $82a4			jsr 	CalculateOperand 			; get a 16 bit operand
.80c9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80cc	38		sec				sec
.80cd	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80d0	48		pha				pha 								; LSB in A
.80d1	ad 10 04	lda $0410			lda 	NSMantissa1
.80d4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80d7	aa		tax				tax 								; MSB in X
.80d8	68		pla				pla
.80d9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80da	69 7f		adc #$7f			adc 	#$7F
.80dc	90 01		bcc $80df			bcc 	_AG3NoCarry
.80de	e8		inx				inx
.80df					_AG3NoCarry:
.80df	38		sec				sec 								; fix back and write out anyways.
.80e0	e9 80		sbc #$80			sbc 	#$80
.80e2	20 15 81	jsr $8115			jsr 	AssemblerWriteByte
.80e5	e0 00		cpx #$00			cpx 	#0 							; was it in range
.80e7	f0 0a		beq $80f3			beq 	_AG3Exit
.80e9	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.80ec	29 01		and #$01			and 	#1
.80ee	f0 03		beq $80f3			beq 	_AG3Exit
.80f0	4c 8b 9f	jmp $9f8b			jmp 	RangeError 					; no, branch is out of range
.80f3					_AG3Exit:
.80f3	60		rts				rts
.80f4					AssembleGroup4:
.80f4	68		pla				pla 								; pop address
.80f5	fa		plx				plx
.80f6	20 fd 80	jsr $80fd			jsr 	AccessParameters 			; access and get first
.80f9	20 15 81	jsr $8115			jsr 	AssemblerWriteByte 			; output it.
.80fc	60		rts				rts
.80fd					AccessParameters:
.80fd	8d a1 04	sta $04a1			sta 	ParamStart
.8100	8e a2 04	stx $04a2			stx 	ParamStart+1
.8103	a9 01		lda #$01			lda 	#1
.8105					GetParameter:
.8105	5a		phy				phy
.8106	a8		tay				tay
.8107	ad a1 04	lda $04a1			lda 	ParamStart
.810a	85 36		sta $36				sta 	zTemp0
.810c	ad a2 04	lda $04a2			lda 	ParamStart+1
.810f	85 37		sta $37				sta 	zTemp0+1
.8111	b1 36		lda ($36),y			lda 	(zTemp0),y
.8113	7a		ply				ply
.8114	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8115					AssemblerWriteByte:
.8115	48		pha			pha
.8116	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8119	29 02		and #$02		and 	#2
.811b	f0 1b		beq $8138		beq 	_AWBNoPrint
.811d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8120	20 53 81	jsr $8153		jsr 	PrintHex
.8123	ad 9e 04	lda $049e		lda		AssemblerAddress
.8126	20 53 81	jsr $8153		jsr 	PrintHex
.8129	a9 20		lda #$20		lda 	#' '
.812b	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.812e	68		pla			pla 									; print byte
.812f	48		pha			pha
.8130	20 53 81	jsr $8153		jsr 	PrintHex
.8133	a9 0d		lda #$0d		lda 	#13
.8135	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.8138					_AWBNoPrint:
.8138	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.813b	85 36		sta $36			sta 	zTemp0
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8140	f0 0e		beq $8150		beq 	_AWBRange
.8142	85 37		sta $37			sta 	zTemp0+1
.8144	68		pla			pla 									; write byte out
.8145	92 36		sta ($36)		sta 	(zTemp0)
.8147	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.814a	d0 03		bne $814f		bne 	_AWBNoCarry
.814c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.814f					_AWBNoCarry:
.814f	60		rts			rts
.8150					_AWBRange:
.8150	4c 8b 9f	jmp $9f8b		jmp 	RangeError
.8153					PrintHex:
.8153	48		pha				pha
.8154	4a		lsr a				lsr 	a
.8155	4a		lsr a				lsr 	a
.8156	4a		lsr a				lsr 	a
.8157	4a		lsr a				lsr 	a
.8158	20 5c 81	jsr $815c			jsr 	_PrintNibble
.815b	68		pla				pla
.815c					_PrintNibble:
.815c	29 0f		and #$0f			and 	#15
.815e	c9 0a		cmp #$0a			cmp 	#10
.8160	90 02		bcc $8164			bcc 	_NoShift
.8162	69 06		adc #$06			adc 	#6
.8164					_NoShift:
.8164	69 30		adc #$30			adc 	#48
.8166	4c 2a a7	jmp $a72a			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8169					AssembleModeX:
.8169	5a		phy				phy
.816a	ad a3 04	lda $04a3			lda 	IsGroup1
.816d	f0 17		beq $8186			beq 	_AMXGroup2
.816f	8a		txa				txa 							; is it in group # 1
.8170	29 40		and #$40			and 	#AM_ISG1
.8172	f0 50		beq $81c4			beq 	_AMXFail 				; no, give up.
.8174	8a		txa				txa 							; get back.
.8175	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8177	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8179	d0 22		bne $819d			bne 	_AMXHaveInfo
.817b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.817e	c9 81		cmp #$81			cmp 	#$81
.8180	f0 42		beq $81c4			beq 	_AMXFail
.8182	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8184	80 17		bra $819d			bra 	_AMXHaveInfo 			; odd design decision there.
.8186					_AMXGroup2:
.8186	8a		txa				txa 							; is it in group 2 ?
.8187	29 20		and #$20			and 	#AM_ISG2
.8189	f0 39		beq $81c4			beq 	_AMXFail 				; no, give up.
.818b	8a		txa				txa 							; get the offset into Y
.818c	29 1f		and #$1f			and 	#$1F
.818e	4a		lsr a				lsr 	a 						; make it 0-7.
.818f	4a		lsr a				lsr  	a
.8190	a8		tay				tay
.8191	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8194					_AMXCheckOkay:
.8194	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8195	88		dey				dey
.8196	10 fc		bpl $8194			bpl 	_AMXCheckOkay
.8198	90 2a		bcc $81c4			bcc 	_AMXFail 				; not allowed.
.819a	8a		txa				txa  							; get mask back
.819b	29 1f		and #$1f			and 	#$1F
.819d					_AMXHaveInfo:
.819d	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.819f	10 05		bpl $81a6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81a1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81a4	d0 1e		bne $81c4			bne 	_AMXFail
.81a6					_AMXAnySize:
.81a6	18		clc				clc 							; add offset to the base opcode
.81a7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81aa					_AMXOutputCode:
.81aa	20 15 81	jsr $8115			jsr 	AssemblerWriteByte 		; write the opcode out.
.81ad	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81af	f0 10		beq $81c1			beq 	_AMXExit
.81b1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81b4	20 15 81	jsr $8115			jsr 	AssemblerWriteByte
.81b7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81b9	30 06		bmi $81c1			bmi 	_AMXExit
.81bb	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81be	20 15 81	jsr $8115			jsr 	AssemblerWriteByte
.81c1					_AMXExit:
.81c1	7a		ply				ply
.81c2	38		sec				sec
.81c3	60		rts				rts
.81c4					_AMXFail:
.81c4	a0 00		ldy #$00			ldy 	#0
.81c6					_AMXCheckOddities:
.81c6	8a		txa				txa
.81c7	d9 ef 81	cmp $81ef,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ca	d0 16		bne $81e2			bne 	_AMXCONext
.81cc	b9 ed 81	lda $81ed,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81cf	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81d2	d0 0e		bne $81e2			bne 	_AMXCONext
.81d4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81d6	10 05		bpl $81dd			bpl 	_AMXCONotZero
.81d8	ad 10 04	lda $0410			lda 	NSMantissa1
.81db	d0 05		bne $81e2			bne 	_AMXCONext
.81dd					_AMXCONotZero:
.81dd	b9 ee 81	lda $81ee,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81e0	80 c8		bra $81aa			bra 	_AMXOutputCode 			; and assemble it
.81e2					_AMXCONext:
.81e2	c8		iny				iny
.81e3	c8		iny				iny
.81e4	c8		iny				iny
.81e5	b9 ed 81	lda $81ed,y			lda 	ExtraOpcode+0,y 		; end of table
.81e8	d0 dc		bne $81c6			bne 	_AMXCheckOddities
.81ea					_AMXCOFail:
.81ea	7a		ply				ply
.81eb	18		clc				clc
.81ec	60		rts				rts
.81ed					ExtraOpcode:
>81ed	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>81f0	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>81f3	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>81f6	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>81f9	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>81fc	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>81ff	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8202	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8205	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8208	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>820b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.820c					LabelHere:
.820c	c8		iny				iny 								; skip .
.820d	a2 00		ldx #$00			ldx 	#0 							; get a term
.820f	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; get a term
.8212	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8215	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8217	d0 24		bne $823d			bne 	_ALType
.8219	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.821c	85 36		sta $36				sta 	zTemp0
.821e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8221	85 37		sta $37				sta 	zTemp0+1
.8223	5a		phy				phy 								; copy address in.
.8224	a0 01		ldy #$01			ldy 	#1
.8226	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8229	92 36		sta ($36)			sta 	(zTemp0)
.822b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.822e	91 36		sta ($36),y			sta 	(zTemp0),y
.8230	c8		iny				iny
.8231	a9 00		lda #$00			lda 	#0
.8233	91 36		sta ($36),y			sta 	(zTemp0),y
.8235	c8		iny				iny
.8236	91 36		sta ($36),y			sta 	(zTemp0),y
.8238	c8		iny				iny
.8239	91 36		sta ($36),y			sta 	(zTemp0),y
.823b	7a		ply				ply
.823c	60		rts				rts
.823d					_ALType:
.823d	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8240					TypeAndCalculateOperand:
.8240	b1 30		lda ($30),y			lda 	(codePtr),y
.8242	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8244	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8246	f0 5b		beq $82a3			beq 	_TACOExit
.8248	c9 80		cmp #$80			cmp 	#KWC_EOL
.824a	f0 57		beq $82a3			beq 	_TACOExit
.824c	c8		iny				iny
.824d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.824f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8251	f0 51		beq $82a4			beq 	CalculateOperand
.8253	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8255	f0 1f		beq $8276			beq 	_TACOIndirect
.8257	88		dey				dey 								; undo get of first character
.8258	20 a4 82	jsr $82a4			jsr 	CalculateOperand 			; get operand
.825b	b1 30		lda ($30),y			lda 	(codePtr),y
.825d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.825f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8261	d0 40		bne $82a3			bne 	_TACOExit
.8263	c8		iny				iny
.8264	20 ae 82	jsr $82ae			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8267	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8269	c9 58		cmp #$58			cmp 	#'X'
.826b	f0 36		beq $82a3			beq 	_TACOExit
.826d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.826f	c9 59		cmp #$59			cmp 	#'Y'
.8271	f0 30		beq $82a3			beq 	_TACOExit
.8273					_TACOSyntax:
.8273	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.8276					_TACOIndirect:
.8276	20 a4 82	jsr $82a4			jsr 	CalculateOperand 			; get the operand
.8279	b1 30		lda ($30),y			lda 	(codePtr),y
.827b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.827d	f0 17		beq $8296			beq 	_TACOIndX
.827f	20 20 8d	jsr $8d20			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8282	b1 30		lda ($30),y			lda 	(codePtr),y
.8284	a2 d1		ldx #$d1			ldx 	#AM_IND
.8286	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8288	d0 19		bne $82a3			bne 	_TACOExit
.828a	c8		iny				iny
.828b	20 ae 82	jsr $82ae			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.828e	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8290	d0 e1		bne $8273			bne 	_TACOSyntax
.8292	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8294	80 0d		bra $82a3			bra 	_TACOExit
.8296					_TACOIndX:
.8296	c8		iny				iny
.8297	20 ae 82	jsr $82ae			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.829a	c9 58		cmp #$58			cmp 	#'X' 						; check X
.829c	d0 d5		bne $8273			bne 	_TACOSyntax
.829e	20 20 8d	jsr $8d20			jsr 	CheckRightBracket			; check )
.82a1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82a3					_TACOExit:
.82a3	60		rts				rts
.82a4					CalculateOperand:
.82a4	48		pha				pha
.82a5	da		phx				phx
.82a6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82a8	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.82ab	fa		plx				plx
.82ac	68		pla				pla
.82ad	60		rts				rts
.82ae					TACOCheckXY:
.82ae	b1 30		lda ($30),y			lda 	(codePtr),y
.82b0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82b2	c9 40		cmp #$40			cmp 	#$40
.82b4	d0 21		bne $82d7			bne 	_TCXYFail
.82b6	b1 30		lda ($30),y			lda 	(codePtr),y
.82b8	18		clc				clc
.82b9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82bb	85 37		sta $37				sta 	zTemp0+1
.82bd	c8		iny				iny
.82be	b1 30		lda ($30),y			lda 	(codePtr),y
.82c0	c8		iny				iny
.82c1	85 36		sta $36				sta 	zTemp0
.82c3	5a		phy				phy 								; save position
.82c4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82c8	d0 0c		bne $82d6			bne 	_TCXYPopFail
.82ca	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ce	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82d0	f0 08		beq $82da			beq 	_TCXYFound
.82d2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82d4	f0 04		beq $82da			beq 	_TCXYFound
.82d6					_TCXYPopFail:
.82d6	7a		ply				ply
.82d7					_TCXYFail:
.82d7	a9 00		lda #$00			lda 	#0
.82d9	60		rts				rts
.82da					_TCXYFound:
.82da	7a		ply				ply 								; restore position
.82db	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82de					BackloadProgram:
.82de	a2 ff		ldx #$ff			ldx 	#$FF
.82e0	20 08 83	jsr $8308			jsr 	BLReadByte
.82e3	30 1f		bmi $8304			bmi 	_BPExit
.82e5					_BPCopy:
.82e5	e8		inx				inx  								; copy byte in
.82e6	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.82e9	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.82ec	20 08 83	jsr $8308			jsr 	BLReadByte 					; read next byte
.82ef	30 0a		bmi $82fb			bmi 	_BPEndLine 					; -ve = EOL
.82f1	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.82f3	d0 02		bne $82f7			bne 	_BPNotTab
.82f5	a9 20		lda #$20			lda 	#' '
.82f7					_BPNotTab:
.82f7	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.82f9	b0 ea		bcs $82e5			bcs 	_BPCopy
.82fb					_BPEndLine:
.82fb	20 34 b5	jsr $b534			jsr 	TokeniseLine 				; tokenise the line.
.82fe	38		sec				sec 								; append not insert
.82ff	20 61 a1	jsr $a161			jsr 	MemoryInsertLine 			; append to current program
.8302	80 da		bra $82de			bra 	BackloadProgram
.8304					_BPExit:
.8304	20 d4 83	jsr $83d4			jsr 	ClearCommand 				; clear variables etc.
.8307	60		rts				rts
.8308					BLReadByte:
.8308					_BLLoad:
.8308	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.830b	ee 09 83	inc $8309			inc 	_BLLoad+1
.830e	d0 03		bne $8313			bne 	_BLNoCarry
.8310	ee 0a 83	inc $830a			inc 	_BLLoad+2
.8313					_BLNoCarry:
.8313	c9 00		cmp #$00			cmp 	#0
.8315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8316					EditProgramCode:
.8316	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8319	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.831c	20 09 a2	jsr $a209			jsr 	MemorySearch
.831f	90 05		bcc $8326			bcc 	_EPCNoDelete 				; reached the end don't delete
.8321	d0 03		bne $8326			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8323	20 2a a1	jsr $a12a			jsr 	MemoryDeleteLine 			; delete the line
.8326					_EPCNoDelete:
.8326	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8329	c9 80		cmp #$80			cmp 	#KWC_EOL
.832b	f0 0d		beq $833a			beq 	_EPCNoInsert
.832d	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8330	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8333	20 09 a2	jsr $a209			jsr 	MemorySearch
.8336	18		clc				clc 								; insert at this point.
.8337	20 61 a1	jsr $a161			jsr 	MemoryInsertLine 			; insert the line
.833a					_EPCNoInsert:
.833a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.833b					WarmStart:
.833b	a2 ff		ldx #$ff			ldx 	#$FF
.833d	9a		txs				txs
.833e	20 b8 a8	jsr $a8b8			jsr 	EXTInputLine 				; get line to lineBuffer
.8341	20 34 b5	jsr $b534			jsr 	TokeniseLine 				; tokenise the line
.8344	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.8347	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.834a	d0 17		bne $8363			bne 	_WSEditCode 				; if so,edit code.
.834c	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.834f	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8351	85 30		sta $30				sta 	codePtr
.8353	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8355	85 31		sta $31				sta 	codePtr+1
.8357	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.835a	c9 80		cmp #$80			cmp 	#KWC_EOL
.835c	f0 dd		beq $833b			beq 	WarmStart
.835e	20 e7 89	jsr $89e7			jsr 	RUNCodePointerLine 			; execute that line.
.8361	80 d8		bra $833b			bra 	WarmStart
.8363					_WSEditCode:
.8363	20 16 83	jsr $8316			jsr 	EditProgramCode
.8366	20 d4 83	jsr $83d4			jsr 	ClearCommand
.8369	80 d0		bra $833b			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.836b					AssembleCommand:
.836b	a2 00		ldx #$00			ldx 	#0
.836d	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; start address
.8370	ad 08 04	lda $0408			lda 	NSMantissa0
.8373	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8376	ad 10 04	lda $0410			lda 	NSMantissa1
.8379	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.837c	20 28 8d	jsr $8d28			jsr 	CheckComma
.837f	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; options
.8382	ad 08 04	lda $0408			lda 	NSMantissa0
.8385	8d a0 04	sta $04a0			sta 	AssemblerControl
.8388	60		rts				rts
.8389	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.838a					AssertCommand:
.838a	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.838c	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; the assert test
.838f	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; exit if result is non zero.
.8392	d0 05		bne $8399			bne 	_ACExit
.8394	a9 0a		lda #$0a		lda	#10
.8396	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8399					_ACExit:
.8399	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.839a					CallCommand:
.839a	a2 00		ldx #$00			ldx 	#0
.839c	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.839f					_CCClear
.839f	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83a0	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.83a3	e0 04		cpx #$04			cpx 	#4
.83a5	d0 f8		bne $839f			bne 	_CCClear
.83a7	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83a9					_CCCParam:
.83a9	b1 30		lda ($30),y			lda 	(codePtr),y
.83ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83ad	d0 09		bne $83b8			bne 	_CCCRun6502
.83af	c8		iny				iny 								; skip comma
.83b0	e8		inx				inx	 								; next level
.83b1	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83b4	e0 03		cpx #$03			cpx 	#3
.83b6	90 f1		bcc $83a9			bcc 	_CCCParam 					; done all 3 ?
.83b8					_CCCRun6502:
.83b8	5a		phy				phy 								; save position
.83b9	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83bc	85 37		sta $37				sta 	zTemp0+1
.83be	ad 08 04	lda $0408			lda 	NSMantissa0
.83c1	85 36		sta $36				sta 	zTemp0
.83c3	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83c6	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83c9	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83cc	20 d1 83	jsr $83d1			jsr 	_CCCZTemp0 					; call zTemp0
.83cf	7a		ply				ply 								; restore position and exit
.83d0	60		rts				rts
.83d1					_CCCZTemp0:
.83d1	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83d4					ClearCommand:
.83d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83d6	85 36		sta $36				sta 	0+zTemp0
.83d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83da	85 37		sta $37				sta 	1+zTemp0
.83dc					_ClearZeroLoop:
.83dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83de	f0 24		beq $8404			beq 	_ClearZeroEnd
.83e0	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83e2	a9 00		lda #$00			lda 	#0
.83e4					_ClearOneVariable:
.83e4	91 36		sta ($36),y			sta 	(zTemp0),y
.83e6	c8		iny				iny
.83e7	c0 08		cpy #$08			cpy 	#8
.83e9	d0 f9		bne $83e4			bne 	_ClearOneVariable
.83eb	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.83ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ef	c9 18		cmp #$18			cmp 	#NSTProcedure
.83f1	d0 04		bne $83f7			bne 	_ClearNotProcedure
.83f3	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.83f5	91 36		sta ($36),y			sta 	(zTemp0),y
.83f7					_ClearNotProcedure:
.83f7	18		clc				clc 								; go to the next variable
.83f8	b2 36		lda ($36)			lda 	(zTemp0)
.83fa	65 36		adc $36				adc 	zTemp0
.83fc	85 36		sta $36				sta 	zTemp0
.83fe	90 dc		bcc $83dc			bcc 	_ClearZeroLoop
.8400	e6 37		inc $37				inc 	zTemp0+1
.8402	80 d8		bra $83dc			bra 	_ClearZeroLoop
.8404					_ClearZeroEnd:
.8404	18		clc				clc
.8405	a5 36		lda $36				lda 	zTemp0
.8407	69 01		adc #$01			adc 	#1
.8409	8d 8c 04	sta $048c			sta 	lowMemPtr
.840c	a5 37		lda $37				lda 	zTemp0+1
.840e	69 00		adc #$00			adc 	#0
.8410	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8413	20 4f a6	jsr $a64f			jsr 	StackReset
.8416	20 b9 a6	jsr $a6b9			jsr 	StringSystemInitialise
.8419	20 29 8c	jsr $8c29			jsr 	ProcedureScan
.841c	20 a3 89	jsr $89a3			jsr 	Command_Restore
.841f	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8422	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8425	9c a0 04	stz $04a0			stz 	AssemblerControl
.8428	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.842b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.842c					ClearScreen:
.842c	5a		phy				phy
.842d	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.842f	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8432	7a		ply				ply
.8433	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8434					Command_Data:
.8434	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8436	a2 80		ldx #$80			ldx 	#KWC_EOL
.8438	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.843b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.843c					DimCommand:
.843c	b1 30		lda ($30),y			lda 	(codePtr),y
.843e	29 c0		and #$c0			and 	#$C0
.8440	c9 40		cmp #$40			cmp 	#$40
.8442	d0 7a		bne $84be			bne 	_DCSyntax
.8444	b1 30		lda ($30),y			lda 	(codePtr),y
.8446	18		clc				clc
.8447	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8449	85 3f		sta $3f				sta 	zaTemp+1
.844b	c8		iny				iny
.844c	b1 30		lda ($30),y			lda 	(codePtr),y
.844e	c8		iny				iny
.844f	85 3e		sta $3e				sta 	zaTemp
.8451	5a		phy				phy
.8452	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8454	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8456	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8458	c9 18		cmp #$18			cmp 	#NSTProcedure
.845a	f0 62		beq $84be			beq 	_DCSyntax
.845c	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.845e	29 04		and #$04			and 	#NSBIsArray
.8460	f0 64		beq $84c6			beq 	_DCType
.8462	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8464	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8466	d0 59		bne $84c1			bne 	_DCRedefine
.8468	7a		ply				ply
.8469	20 c9 84	jsr $84c9			jsr 	_DCGetSize 				; get array size, check it.
.846c	5a		phy				phy
.846d	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.846f	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8471	7a		ply				ply 							; is there a second (e.g. ,x)
.8472	b1 30		lda ($30),y			lda 	(codePtr),y
.8474	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8476	d0 0a		bne $8482			bne 	_DCOneDimension
.8478	c8		iny				iny 							; skip comma
.8479	20 c9 84	jsr $84c9			jsr 	_DCGetSize 				; get 2nd array size
.847c	5a		phy				phy
.847d	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.847f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8481	7a		ply				ply
.8482					_DCOneDimension:
.8482	5a		phy				phy 							; save position
.8483	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8485	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8487	aa		tax				tax
.8488	c8		iny				iny
.8489	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848b	e8		inx				inx 							; bump them.
.848c	1a		inc a				inc 	a
.848d	20 91 9d	jsr $9d91			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8490	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8492	29 e0		and #$e0			and 	#$E0
.8494	d0 23		bne $84b9			bne 	_DCSize
.8496	a0 02		ldy #$02			ldy 	#2 						; get base type
.8498	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849a	20 d7 84	jsr $84d7			jsr 	ScaleByBaseType 		; scale by base type
.849d	a5 36		lda $36				lda 	zTemp0
.849f	a6 37		ldx $37				ldx 	zTemp0+1
.84a1	20 87 99	jsr $9987			jsr 	AllocateXABytes 		; allocate memory
.84a4	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84a6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a8	c8		iny				iny
.84a9	8a		txa				txa
.84aa	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ac	7a		ply				ply 							; get position back
.84ad	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 		; check )
.84b0	b1 30		lda ($30),y			lda 	(codePtr),y
.84b2	c8		iny				iny 							; consume in case
.84b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84b5	f0 85		beq $843c			beq 	DimCommand
.84b7	88		dey				dey 							; undo consume
.84b8	60		rts				rts
.84b9					_DCSize:
.84b9	a9 16		lda #$16		lda	#22
.84bb	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.84be					_DCSyntax:
.84be	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.84c1					_DCRedefine:
.84c1	a9 15		lda #$15		lda	#21
.84c3	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.84c6					_DCType:
.84c6	4c 90 9f	jmp $9f90			jmp 	TypeError
.84c9					_DCGetSize:
.84c9	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84cb	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 	; get array dimension
.84ce	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84d0	f0 e7		beq $84b9			beq 	_DCSize
.84d2	c9 fe		cmp #$fe			cmp 	#254
.84d4	f0 e3		beq $84b9			beq 	_DCSize
.84d6	60		rts				rts
.84d7					ScaleByBaseType:
.84d7	29 10		and #$10			and 	#NSBIsString 			; is it string
.84d9	d0 19		bne $84f4			bne 	_SBBTString
.84db	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84dd	48		pha				pha
.84de	a5 36		lda $36				lda 	zTemp0
.84e0	48		pha				pha
.84e1	06 36		asl $36				asl 	zTemp0 					; x 2
.84e3	26 37		rol $37				rol 	zTemp0+1
.84e5	06 36		asl $36				asl 	zTemp0 					; x 4
.84e7	26 37		rol $37				rol 	zTemp0+1
.84e9	68		pla				pla 							; add stacked value = x 5
.84ea	65 36		adc $36				adc 	zTemp0
.84ec	85 36		sta $36				sta 	zTemp0
.84ee	68		pla				pla
.84ef	65 37		adc $37				adc 	zTemp0+1
.84f1	85 37		sta $37				sta 	zTemp0+1
.84f3	60		rts				rts
.84f4					_SBBTString:
.84f4	06 36		asl $36				asl 	zTemp0
.84f6	26 37		rol $37				rol 	zTemp0+1
.84f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.84f9					EndCommand:
.84f9	4c 3b 83	jmp $833b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.84fc					ForCommand:
.84fc	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.84fe	20 ea a5	jsr $a5ea			jsr 	StackOpen
.8501	a2 00		ldx #$00			ldx 	#0
.8503	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.8506	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8509	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.850b	d0 49		bne $8556			bne		_FCError
.850d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.850f	20 30 8d	jsr $8d30			jsr 	CheckNextA
.8512	e8		inx				inx
.8513	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; <from> in +1
.8516	b1 30		lda ($30),y			lda 	(codePtr),y
.8518	c8		iny				iny 								; consume it
.8519	48		pha				pha 								; save on stack for later
.851a	c9 b4		cmp #$b4			cmp 	#KWD_DOWNTO
.851c	f0 04		beq $8522			beq 	_FCNoSyntax
.851e	c9 cd		cmp #$cd			cmp 	#KWD_TO
.8520	d0 37		bne $8559			bne 	_FCSyntaxError
.8522					_FCNoSyntax:
.8522	e8		inx				inx
.8523	20 48 9d	jsr $9d48			jsr 	EvaluateInteger
.8526	20 2e a6	jsr $a62e			jsr 	STKSaveCodePosition 		; save loop back position
.8529	68		pla				pla 								; restore DOWNTO or TO
.852a	5a		phy				phy 								; save Y on the stack
.852b	49 b4		eor #$b4			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.852d	f0 02		beq $8531			beq 	_FCNotDownTo
.852f	a9 02		lda #$02			lda 	#2
.8531					_FCNotDownTo:
.8531	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8532	a0 10		ldy #$10			ldy 	#16
.8534	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8536	a0 06		ldy #$06			ldy 	#6
.8538	ad 08 04	lda $0408			lda 	NSMantissa0
.853b	91 34		sta ($34),y			sta 	(basicStack),y
.853d	ad 10 04	lda $0410			lda 	NSMantissa1
.8540	c8		iny				iny
.8541	91 34		sta ($34),y			sta 	(basicStack),y
.8543	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8545	a2 01		ldx #$01			ldx 	#1
.8547	20 5c 85	jsr $855c			jsr 	FCIntegerToStack
.854a	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.854c	a2 02		ldx #$02			ldx 	#2
.854e	20 5c 85	jsr $855c			jsr 	FCIntegerToStack
.8551	20 7c 85	jsr $857c			jsr 	CopyIndexToReference
.8554	7a		ply				ply 								; restore position
.8555	60		rts				rts
.8556					_FCError:
.8556	4c 90 9f	jmp $9f90			jmp 	TypeError
.8559					_FCSyntaxError:
.8559	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.855c					FCIntegerToStack:
.855c	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.855f	10 03		bpl $8564			bpl	 	_FCNotNegative
.8561	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8564					_FCNotNegative:
.8564	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8567	91 34		sta ($34),y			sta 	(basicStack),y
.8569	c8		iny				iny
.856a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.856d	91 34		sta ($34),y			sta 	(basicStack),y
.856f	c8		iny				iny
.8570	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8573	91 34		sta ($34),y			sta 	(basicStack),y
.8575	c8		iny				iny
.8576	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8579	91 34		sta ($34),y			sta 	(basicStack),y
.857b	60		rts				rts
.857c					CopyIndexToReference:
.857c	5a		phy				phy
.857d	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.857f	38		sec				sec 								; (because we copy from offset 8)
.8580	b1 34		lda ($34),y			lda 	(basicStack),y
.8582	e9 08		sbc #$08			sbc 	#8
.8584	85 36		sta $36				sta 	zTemp0
.8586	c8		iny				iny
.8587	b1 34		lda ($34),y			lda 	(basicStack),y
.8589	e9 00		sbc #$00			sbc 	#0
.858b	85 37		sta $37				sta 	zTemp0+1
.858d	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.858f	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8591	b1 34		lda ($34),y			lda 	(basicStack),y
.8593	0a		asl a				asl 	a 							; into carry
.8594	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8596	90 14		bcc $85ac			bcc 	_CITRNormal
.8598	38		sec				sec
.8599					_CITRNegative:
.8599	a9 00		lda #$00			lda 	#0
.859b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.859d	91 36		sta ($36),y			sta 	(zTemp0),y
.859f	c8		iny				iny
.85a0	ca		dex				dex
.85a1	d0 f6		bne $8599			bne 	_CITRNegative
.85a3	88		dey				dey 								; look at MSB of mantissa
.85a4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85a6	09 80		ora #$80			ora 	#$80
.85a8	91 36		sta ($36),y			sta 	(zTemp0),y
.85aa	7a		ply				ply
.85ab	60		rts				rts
.85ac					_CITRNormal:
.85ac	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ae	91 36		sta ($36),y			sta 	(zTemp0),y
.85b0	c8		iny				iny
.85b1	ca		dex				dex
.85b2	d0 f8		bne $85ac			bne 	_CITRNormal
.85b4	7a		ply				ply 								; and exit.
.85b5	60		rts				rts
.85b6					NextCommand:
.85b6	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85b8	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85ba	20 16 a6	jsr $a616			jsr 	StackCheckFrame
.85bd	5a		phy				phy
.85be	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85c0	b1 34		lda ($34),y			lda 	(basicStack),y
.85c2	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85c4	30 02		bmi $85c8			bmi 	_NCStepNeg
.85c6	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85c8					_NCStepNeg:
.85c8	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ca	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85cc	18		clc				clc
.85cd					_NCBump:
.85cd	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85cf	91 34		sta ($34),y			sta 	(basicStack),y
.85d1	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85d3	c8		iny				iny 								; next byte
.85d4	ca		dex				dex 								; do four times
.85d5	d0 f6		bne $85cd			bne 	_NCBump
.85d7	20 7c 85	jsr $857c			jsr		CopyIndexToReference		; copy it to the reference variable.
.85da	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85dc	b1 34		lda ($34),y			lda 	(basicStack),y
.85de	0a		asl a				asl 	a 							; sign bit to carry
.85df	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85e1	85 38		sta $38				sta 	zTemp1
.85e3	90 02		bcc $85e7			bcc 	_NCCompRev 					; use if step is +ve
.85e5	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85e7					_NCCompRev:
.85e7	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.85e9	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.85eb	85 39		sta $39				sta 	zTemp1+1
.85ed	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.85ef	38		sec				sec
.85f0					_NCCompare:
.85f0	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.85f2	b1 34		lda ($34),y			lda 	(basicStack),y
.85f4	a4 39		ldy $39				ldy 	zTemp1+1
.85f6	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85f8	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.85fa	e6 39		inc $39				inc 	zTemp1+1
.85fc	ca		dex				dex 								; do it 4 times.
.85fd	d0 f1		bne $85f0			bne 	_NCCompare
.85ff	50 02		bvc $8603			bvc 	_NCNoOverflow 				; convert to signed comparison
.8601	49 80		eor #$80			eor 	#$80
.8603					_NCNoOverflow:
.8603	7a		ply				ply 								; restore Y position
.8604	0a		asl a				asl 	a 							; is bit 7 set.
.8605	90 04		bcc $860b			bcc 	_NCLoopback 				; if no , >= so loop back
.8607	20 08 a6	jsr $a608			jsr 	StackClose 					; exit the loop
.860a	60		rts				rts
.860b					_NCLoopBack:
.860b	20 3f a6	jsr $a63f			jsr 	STKLoadCodePosition 		; loop back
.860e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.860f					Command_GOSUB:
.860f	a2 00		ldx #$00			ldx 	#0
.8611	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8614	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8616	20 ea a5	jsr $a5ea			jsr 	StackOpen 					; create frame
.8619	20 2e a6	jsr $a62e			jsr 	STKSaveCodePosition 		; save current position
.861c	4c 32 86	jmp $8632			jmp 	GotoStackX
.861f					Command_RETURN:
.861f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8621	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8623	20 16 a6	jsr $a616			jsr 	StackCheckFrame
.8626	20 3f a6	jsr $a63f			jsr 	STKLoadCodePosition 		; restore code position
.8629	20 08 a6	jsr $a608			jsr 	StackClose
.862c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.862d					GotoCommand:
.862d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.862f	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.8632					GotoStackX:
.8632	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8635	48		pha				pha 								; it is slightly inefficient, just in cases.
.8636	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8639	fa		plx				plx
.863a	20 09 a2	jsr $a209			jsr 	MemorySearch 				; transfer to line number AX.
.863d	90 05		bcc $8644			bcc 	_GotoError 					; not found, off end.
.863f	d0 03		bne $8644			bne 	_GotoError 					; not found exactly
.8641	4c e0 89	jmp $89e0			jmp 	RunNewLine 					; and go straight to new line code.
.8644					_GotoError:
.8644	a9 0d		lda #$0d		lda	#13
.8646	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8649					IfCommand:
.8649	a2 00		ldx #$00			ldx 	#0 							; If what.
.864b	20 25 9d	jsr $9d25			jsr 	EvaluateNumber
.864e	b1 30		lda ($30),y			lda 	(codePtr),y
.8650	c9 a8		cmp #$a8			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8652	d0 0a		bne $865e			bne 	_IFStructured
.8654	c8		iny				iny 								; consume THEN
.8655	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero
.8658	f0 01		beq $865b			beq 	_IfFail 					; if fail, go to next line
.865a	60		rts				rts 								; if THEN just continue
.865b					_IfFail:
.865b	4c 45 8a	jmp $8a45			jmp 	EOLCommand
.865e					_IfStructured:
.865e	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero
.8661	d0 07		bne $866a			bne 	_IfExit 					; if not, then continue normally.
.8663	a9 b5		lda #$b5			lda 	#KWD_ELSE 					; look for else/endif
.8665	a2 a5		ldx #$a5			ldx 	#KWD_ENDIF
.8667	20 7b 8c	jsr $8c7b			jsr 	ScanForward 				; and run from there/
.866a					_IfExit:
.866a	60		rts				rts
.866b					ElseCode:
.866b	a9 a5		lda #$a5			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.866d	aa		tax				tax 								; so just go to the structure exit
.866e	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8671	60		rts				rts
.8672					EndIf:
.8672	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8673					LetCommand:
.8673	a2 00		ldx #$00			ldx 	#0
.8675	b1 30		lda ($30),y			lda 	(codePtr),y
.8677	c9 10		cmp #$10			cmp 	#KWD_AT
.8679	d0 16		bne $8691			bne 	_LCStandard
.867b	c8		iny				iny 								; skip equal
.867c	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; get a number
.867f	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it
.8682	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8685	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8687	9d 00 04	sta $0400,x			sta 	NSStatus,x
.868a	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.868c	d0 10		bne $869e			bne 	_LCMain
.868e	4c 90 9f	jmp $9f90			jmp 	TypeError 					; was a reference before.
.8691					_LCStandard:
.8691	ad d0 92	lda $92d0			lda 	PrecedenceLevel+"*"			; precedence > this
.8694	20 ea 92	jsr $92ea			jsr 	EvaluateExpressionAtPrecedence
.8697	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.869a	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.869c	f0 0e		beq $86ac			beq 	_LetGoProc 					; it's a procedure call.
.869e					_LCMain:
.869e	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86a0	20 30 8d	jsr $8d30			jsr 	CheckNextA
.86a3	e8		inx				inx 								; RHS
.86a4	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue
.86a7	ca		dex				dex
.86a8	20 af 86	jsr $86af			jsr 	AssignVariable
.86ab	60		rts				rts
.86ac					_LetGoProc:
.86ac	4c ad 88	jmp $88ad			jmp 	CallProcedure
.86af					AssignVariable:
.86af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86b2	48		pha				pha 								; save a copy
.86b3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86b6	29 10		and #$10			and 	#NSBIsString
.86b8	d0 0b		bne $86c5			bne 	_ASError
.86ba	68		pla				pla 								; get back
.86bb	29 10		and #$10			and 	#NSBIsString 				; check type
.86bd	d0 03		bne $86c2			bne 	_ASString
.86bf	4c 2e 95	jmp $952e			jmp 	AssignNumber
.86c2					_ASString:
.86c2	4c 9c 95	jmp $959c			jmp 	AssignString
.86c5					_ASError:
.86c5	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86c8					Command_List:
.86c8	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86cb	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ce	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86d1	a9 ff		lda #$ff			lda 	#$FF
.86d3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86d6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86d9	b1 30		lda ($30),y			lda 	(codePtr),y
.86db	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86dd	f0 1e		beq $86fd			beq 	_CLSecond
.86df	20 5e 87	jsr $875e			jsr 	CLIsDigit 					; if not digit, list all
.86e2	b0 24		bcs $8708			bcs 	_CLStart
.86e4	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86e6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.86e9	b1 30		lda ($30),y			lda 	(codePtr),y
.86eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86ed	f0 0e		beq $86fd			beq 	_CLSecond 					; if so go get it
.86ef	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.86f2	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f5	ad 14 04	lda $0414			lda 	NSMantissa1+4
.86f8	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fb	80 0b		bra $8708			bra 	_CLStart
.86fd					_CLSecond:
.86fd	c8		iny				iny 								; consume comma
.86fe	20 5e 87	jsr $875e			jsr 	CLIsDigit 					; digit found
.8701	b0 05		bcs $8708			bcs 	_CLStart 					; if not, continue listing
.8703	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8705	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.8708					_CLStart
.8708	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.870a	85 30		sta $30				sta 	codePtr
.870c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.870e	85 31		sta $31				sta 	codePtr+1
.8710					_CLLoop:
.8710	20 cc a9	jsr $a9cc			jsr 	EXTBreakCheck 				; break check
.8713	f0 33		beq $8748			beq 	_CLExit
.8715	b2 30		lda ($30)			lda 	(codePtr)
.8717	f0 2f		beq $8748			beq 	_CLExit
.8719	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.871b	20 4b 87	jsr $874b			jsr 	CLCompareLineNo
.871e	90 1b		bcc $873b			bcc 	_CLNext
.8720	a2 07		ldx #$07			ldx 	#7
.8722	20 4b 87	jsr $874b			jsr 	CLCompareLineNo
.8725	f0 02		beq $8729			beq 	_CLDoThisOne
.8727	b0 12		bcs $873b			bcs 	_CLNext
.8729					_CLDoThisOne:
.8729	20 de 8c	jsr $8cde			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.872c	20 16 b3	jsr $b316			jsr 	ListConvertLine 			; convert line into token Buffer
.872f	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8731	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8733	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8736	a9 0d		lda #$0d			lda 	#13 						; new line
.8738	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.873b					_CLNext:
.873b	18		clc				clc
.873c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.873e	65 30		adc $30				adc 	codePtr
.8740	85 30		sta $30				sta 	codePtr
.8742	90 02		bcc $8746			bcc 	_CREExit
.8744	e6 31		inc $31				inc 	codePtr+1
.8746					_CREExit:
.8746	80 c8		bra $8710			bra 	_CLLoop
.8748					_CLExit:
.8748	4c 3b 83	jmp $833b			jmp 	WarmStart
.874b					CLCompareLineNo:
.874b	38		sec				sec
.874c	a0 01		ldy #$01			ldy 	#1
.874e	b1 30		lda ($30),y			lda 	(codePtr),y
.8750	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8753	85 36		sta $36				sta 	zTemp0
.8755	c8		iny				iny
.8756	b1 30		lda ($30),y			lda 	(codePtr),y
.8758	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.875b	05 36		ora $36				ora 	zTemp0
.875d	60		rts				rts
.875e					CLIsDigit:
.875e	b1 30		lda ($30),y			lda 	(codePtr),y
.8760	c9 30		cmp #$30			cmp 	#"0"
.8762	90 03		bcc $8767			bcc	 	_CLIDExitFalse
.8764	c9 3a		cmp #$3a			cmp 	#"9"+1
.8766	60		rts				rts
.8767					_CLIDExitFalse:
.8767	38		sec				sec
.8768	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8769					Command_LOCAL:
.8769	a2 00		ldx #$00			ldx 	#0 							; at level 0
.876b	20 77 87	jsr $8777			jsr 	LocaliseNextTerm 			; convert term to a local.
.876e	b1 30		lda ($30),y			lda 	(codePtr),y
.8770	c8		iny				iny
.8771	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8773	f0 f4		beq $8769			beq 	Command_LOCAL
.8775	88		dey				dey 								; unpick pre-get
.8776	60		rts				rts
.8777					LocaliseNextTerm:
.8777	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; evaluate the term
.877a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.877d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.877f	f0 61		beq $87e2			beq		_LNTError
.8781	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8784	85 36		sta $36				sta 	zTemp0
.8786	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8789	85 37		sta $37				sta  	zTemp0+1
.878b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.878e	29 10		and #$10			and 	#NSBIsString
.8790	d0 1e		bne $87b0			bne 	_LNTPushString
.8792	5a		phy				phy
.8793	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8795					_LNTPushNumLoop:
.8795	b1 36		lda ($36),y			lda		(zTemp0),y
.8797	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.879a	c8		iny				iny
.879b	c0 05		cpy #$05			cpy 	#5
.879d	d0 f6		bne $8795			bne 	_LNTPushNumLoop
.879f	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87a1	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87a4	a5 37		lda $37				lda 	zTemp0+1
.87a6	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87a9	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87ab	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87ae	7a		ply				ply
.87af	60		rts				rts
.87b0					_LNTPushString:
.87b0	5a		phy				phy
.87b1	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87b3	85 38		sta $38				sta 	zTemp1
.87b5	a0 01		ldy #$01			ldy 	#1
.87b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87b9	85 39		sta $39				sta 	zTemp1+1
.87bb	a0 00		ldy #$00			ldy 	#0 							; output string
.87bd	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87bf	f0 0a		beq $87cb			beq 	_LNTStringOut
.87c1					_LNTPushStrLoop:
.87c1	b1 38		lda ($38),y			lda 	(zTemp1),y
.87c3	f0 06		beq $87cb			beq 	_LNTStringOut
.87c5	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87c8	c8		iny				iny
.87c9	80 f6		bra $87c1			bra 	_LNTPushStrLoop
.87cb					_LNTStringOut:
.87cb	98		tya				tya									; output length
.87cc	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87cf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87d2	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87d5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87d8	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87db	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87dd	20 c8 a5	jsr $a5c8			jsr 	StackPushByte
.87e0	7a		ply				ply
.87e1	60		rts				rts
.87e2					_LNTError:
.87e2	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.87e5					LocalPopValue:
.87e5	20 e1 a5	jsr $a5e1			jsr 	StackPopByte
.87e8	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.87ea	d0 17		bne $8803			bne 	_LPVString
.87ec	20 e1 a5	jsr $a5e1			jsr 	StackPopByte 				; address
.87ef	85 37		sta $37				sta 	zTemp0+1
.87f1	20 e1 a5	jsr $a5e1			jsr 	StackPopByte
.87f4	85 36		sta $36				sta 	zTemp0
.87f6	5a		phy				phy
.87f7	a0 04		ldy #$04			ldy 	#4 							; copy back
.87f9					_LPVNumberCopy:
.87f9	20 e1 a5	jsr $a5e1			jsr 	StackPopByte
.87fc	91 36		sta ($36),y			sta 	(zTemp0),y
.87fe	88		dey				dey
.87ff	10 f8		bpl $87f9			bpl 	_LPVNumberCopy
.8801	7a		ply				ply 								; and complete
.8802	60		rts				rts
.8803					_LPVString:
.8803	20 e1 a5	jsr $a5e1			jsr 	StackPopByte 				; address of record => zTemp0
.8806	85 37		sta $37				sta 	zTemp0+1
.8808	20 e1 a5	jsr $a5e1			jsr 	StackPopByte
.880b	85 36		sta $36				sta 	zTemp0
.880d	5a		phy				phy
.880e	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8810	85 38		sta $38				sta 	zTemp1
.8812	a0 01		ldy #$01			ldy 	#1
.8814	b1 36		lda ($36),y			lda 	(zTemp0),y
.8816	85 39		sta $39				sta 	zTemp1+1
.8818	20 e1 a5	jsr $a5e1			jsr 	StackPopByte 				; # to get => y
.881b	a8		tay				tay
.881c	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.881e	f0 0e		beq $882e			beq 	_LPVStringCopied
.8820	a9 00		lda #$00			lda 	#0 							; NULL on end
.8822	91 38		sta ($38),y			sta 	(zTemp1),y
.8824					_LPVStringCopy:
.8824	88		dey				dey
.8825	30 07		bmi $882e			bmi 	_LPVStringCopied
.8827	20 e1 a5	jsr $a5e1			jsr 	StackPopByte
.882a	91 38		sta ($38),y			sta 	(zTemp1),y
.882c	80 f6		bra $8824			bra 	_LPVStringCopy
.882e					_LPVStringCopied:
.882e	fa		plx				plx
.882f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8830					NewCommand:
.8830	20 36 88	jsr $8836			jsr 	NewProgram
.8833	4c 3b 83	jmp $833b			jmp 	WarmStart
.8836					NewProgram:
.8836	20 e7 a1	jsr $a1e7			jsr 	MemoryNew
.8839	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.883c	20 d4 83	jsr $83d4			jsr 	ClearCommand 				; clear everything.
.883f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8840					Command_Print:
.8840	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8841					_CPLoop:
.8841	08		php				php 								; save last action flag
.8842	b1 30		lda ($30),y			lda 	(codePtr),y
.8844	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8846	f0 46		beq $888e			beq 	_CPExit
.8848	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.884a	f0 42		beq $888e			beq 	_CPExit
.884c	68		pla				pla 								; throw last action flag
.884d	b1 30		lda ($30),y			lda 	(codePtr),y
.884f	c8		iny				iny
.8850	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8852	f0 37		beq $888b			beq 	_CPContinueWithSameLine
.8854	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8856	f0 2e		beq $8886			beq 	_CPTab
.8858	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.885a	f0 26		beq $8882			beq 	_CPNewLine
.885c	88		dey				dey 								; undo the get.
.885d	a2 00		ldx #$00			ldx 	#0
.885f	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value into slot 0
.8862	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8865	29 10		and #$10			and 	#NSBIsString
.8867	f0 0b		beq $8874			beq 	_CPNumber
.8869	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.886c	ad 08 04	lda $0408			lda 	NSMantissa0
.886f	20 97 88	jsr $8897			jsr 	CPPrintStringXA
.8872	80 cc		bra $8840			bra 	Command_Print 				; loop round clearing carry so NL if end
.8874					_CPNumber:
.8874	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8876	20 f2 9b	jsr $9bf2			jsr 	ConvertNumberToString 		; convert to string
.8879	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.887b	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.887d	20 97 88	jsr $8897			jsr 	CPPrintStringXA
.8880	80 be		bra $8840			bra 	Command_Print 				; loop round clearing carry so NL if end
.8882					_CPNewLine:
.8882	a9 0d		lda #$0d			lda 	#13
.8884	80 02		bra $8888			bra 	_CPPrintChar
.8886					_CPTab:
.8886	a9 09		lda #$09			lda 	#9 							; print TAB
.8888					_CPPrintChar:
.8888	20 aa 88	jsr $88aa			jsr 	CPPrintVector
.888b					_CPContinueWithSameLine:
.888b	38		sec				sec 								; loop round with carry set, which
.888c	80 b3		bra $8841			bra 	_CPLoop 					; will inhibit final CR
.888e					_CPExit:
.888e	28		plp				plp 								; get last action flag
.888f	b0 05		bcs $8896			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8891	a9 0d		lda #$0d			lda 	#13 						; print new line
.8893	20 aa 88	jsr $88aa			jsr 	CPPrintVector
.8896					_CPExit2:
.8896	60		rts				rts
.8897					CPPrintStringXA:
.8897	5a		phy				phy
.8898	86 37		stx $37				stx 	zTemp0+1
.889a	85 36		sta $36				sta 	zTemp0
.889c	a0 00		ldy #$00			ldy 	#0
.889e					_PSXALoop:
.889e	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a0	f0 06		beq $88a8			beq 	_PSXAExit
.88a2	20 aa 88	jsr $88aa			jsr 	CPPrintVector
.88a5	c8		iny				iny
.88a6	80 f6		bra $889e			bra 	_PSXALoop
.88a8					_PSXAExit:
.88a8	7a		ply				ply
.88a9	60		rts				rts
.88aa					CPPrintVector:
.88aa	4c 2a a7	jmp $a72a			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88ad					CallProcedure:
.88ad	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88af	b1 30		lda ($30),y			lda 	(codePtr),y
.88b1	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b3	f0 0c		beq $88c1			beq 	_CPEndParam
.88b5					_CPParamLoop:
.88b5	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get parameter onto stack
.88b8	e8		inx				inx 								; bump next stack
.88b9	b1 30		lda ($30),y			lda 	(codePtr),y
.88bb	c8		iny				iny
.88bc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88be	f0 f5		beq $88b5			beq 	_CPParamLoop
.88c0	88		dey				dey 								; unpick.
.88c1					_CPEndParam:
.88c1	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c4	c8		iny				iny									; skip right bracket
.88c5	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88c7	20 ea a5	jsr $a5ea			jsr 	StackOpen
.88ca	20 2e a6	jsr $a62e			jsr 	STKSaveCodePosition 		; save loop position
.88cd	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d0	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d2	ad 10 04	lda $0410			lda 	NSMantissa1
.88d5	85 37		sta $37				sta 	zTemp0+1
.88d7	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88d9	b2 36		lda ($36)			lda 	(zTemp0)
.88db	85 30		sta $30				sta 	safePtr
.88dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.88df	85 31		sta $31				sta 	safePtr+1
.88e1	c8		iny				iny
.88e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e4	85 32		sta $32				sta 	safePtr+2
.88e6	c8		iny				iny
.88e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e9	85 33		sta $33				sta 	safePtr+3
.88eb	c8		iny				iny 								; get Y offset -> Y
.88ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ee	a8		tay				tay
.88ef	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f1	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f4	f0 13		beq $8909			beq 	_ParamExit 					; if so, exit.
.88f6					_ParamExtract:
.88f6	ca		dex				dex 								; put a local term on the level before
.88f7	20 77 87	jsr $8777			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88fa	20 af 86	jsr $86af			jsr 	AssignVariable 				; assign stacked value to the variable.
.88fd	e8		inx				inx 								; advance to next parameter to do.
.88fe	e8		inx				inx
.88ff	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8902	f0 05		beq $8909			beq 	_ParamExit
.8904	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma seperating parameters
.8907	80 ed		bra $88f6			bra 	_ParamExtract
.8909					_ParamExit:
.8909	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check )
.890c	60		rts				rts 								; and continue from here
.890d					Command_ENDPROC:
.890d	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.890f	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8911	20 16 a6	jsr $a616			jsr 	StackCheckFrame
.8914	20 3f a6	jsr $a63f			jsr 	STKLoadCodePosition 		; restore code position
.8917	20 08 a6	jsr $a608			jsr 	StackClose
.891a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891b					Command_Read:
.891b	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.891d	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.8920	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8923	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8925	f0 4a		beq $8971			beq 	_CRSyntax 					; check reference (bit 0)
.8927	20 ba 89	jsr $89ba			jsr 	SwapDataCodePtrs 			; swap code and data
.892a	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.892d	d0 20		bne $894f			bne 	_CRContinueData
.892f					_CRKeepSearching:
.892f	a9 b2		lda #$b2			lda 	#KWD_DATA 					; scan for instruction
.8931	aa		tax				tax
.8932	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8935	c9 b2		cmp #$b2			cmp 	#KWD_DATA 					; found data ?
.8937	f0 16		beq $894f			beq 	_CRHaveData 				; found it
.8939	18		clc				clc
.893a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.893c	65 30		adc $30				adc 	codePtr
.893e	85 30		sta $30				sta 	codePtr
.8940	90 02		bcc $8944			bcc 	_CREExit
.8942	e6 31		inc $31				inc 	codePtr+1
.8944					_CREExit:
.8944	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8946	b2 30		lda ($30)			lda 	(codePtr)
.8948	d0 e5		bne $892f			bne 	_CRKeepSearching
.894a	a9 0b		lda #$0b		lda	#11
.894c	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.894f					_CRHaveData:
.894f					_CRContinueData:
.894f	a2 01		ldx #$01			ldx 	#1
.8951	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8954	ca		dex				dex
.8955	20 af 86	jsr $86af			jsr		AssignVariable 				; do the assignment
.8958	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.895b	b1 30		lda ($30),y			lda 	(codePtr),y
.895d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.895f	d0 04		bne $8965			bne 	_CRSwapBack
.8961	c8		iny				iny 								; consume comma
.8962	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8965					_CRSwapBack:
.8965	20 ba 89	jsr $89ba			jsr 	SwapDataCodePtrs			; swap them back.
.8968	b1 30		lda ($30),y			lda 	(codePtr),y
.896a	c8		iny				iny
.896b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.896d	f0 ac		beq $891b			beq 	Command_Read 				; if so go round again.
.896f	88		dey				dey 								; unpick get.
.8970	60		rts				rts
.8971					_CRSyntax:
.8971	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8974					RemCommand:
.8974	b1 30		lda ($30),y			lda 	(codePtr),y
.8976	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8978	d0 06		bne $8980			bne 	_RMExit
.897a	c8		iny				iny
.897b	98		tya				tya
.897c	38		sec				sec
.897d	71 30		adc ($30),y			adc 	(codePtr),y
.897f	a8		tay				tay
.8980					_RMExit:
.8980	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8981					Command_REPEAT:
.8981	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8983	20 ea a5	jsr $a5ea			jsr 	StackOpen
.8986	20 2e a6	jsr $a62e			jsr 	STKSaveCodePosition 		; save loop position
.8989	60		rts				rts
.898a					Command_UNTIL:
.898a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.898c	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.898e	20 16 a6	jsr $a616			jsr 	StackCheckFrame
.8991	a2 00		ldx #$00			ldx 	#0
.8993	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; work out the number
.8996	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check if zero
.8999	f0 04		beq $899f			beq 	_CULoopBack 				; if so keep looping
.899b	20 08 a6	jsr $a608			jsr 	StackClose		 			; return
.899e	60		rts				rts
.899f					_CULoopBack:
.899f	20 3f a6	jsr $a63f			jsr 	STKLoadCodePosition 		; loop back
.89a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a3					Command_Restore:
.89a3	20 ba 89	jsr $89ba			jsr 	SwapDataCodePtrs 			; swap code and data
.89a6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89a8	85 30		sta $30				sta 	codePtr
.89aa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89ac	85 31		sta $31				sta 	codePtr+1
.89ae	20 ba 89	jsr $89ba			jsr 	SwapDataCodePtrs 			; put them back
.89b1	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b3	8d 9b 04	sta $049b			sta 	dataPointer+4
.89b6	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89b9	60		rts				rts
.89ba					SwapDataCodePtrs:
.89ba	da		phx				phx
.89bb	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89bd					_SDCPLoop:
.89bd	b5 30		lda $30,x			lda 	safePtr,x
.89bf	48		pha				pha
.89c0	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c3	95 30		sta $30,x			sta 	safePtr,x
.89c5	68		pla				pla
.89c6	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89c9	ca		dex				dex
.89ca	10 f1		bpl $89bd			bpl 	_SDCPLoop
.89cc	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89cf	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d2	a8		tay				tay
.89d3	fa		plx				plx
.89d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d5					CommandRUN:
.89d5	20 d4 83	jsr $83d4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89d8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89da	85 30		sta $30				sta 	codePtr
.89dc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89de	85 31		sta $31				sta 	codePtr+1
.89e0					RUNNewLine:
.89e0	b2 30		lda ($30)			lda 	(codePtr)
.89e2	f0 5e		beq $8a42			beq 	CRNoProgram         		; no then END.
.89e4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89e6	9a		txs				txs
.89e7					RUNCodePointerLine:
.89e7	a0 02		ldy #$02			ldy 	#2 							; start of program
.89e9					_CRIncMainLoop:
.89e9	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89ec	d0 05		bne $89f3			bne 	_CRNoBreakCheck
.89ee	20 cc a9	jsr $a9cc			jsr 	EXTBreakCheck 				; break check
.89f1	f0 4a		beq $8a3d			beq 	_CRBreak
.89f3					_CRNoBreakCheck:
.89f3	c8		iny				iny
.89f4					_CRMainLoop:
.89f4	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89f7	b1 30		lda ($30),y			lda 	(codePtr),y
.89f9	10 10		bpl $8a0b			bpl 	_CRNotKeyword
.89fb	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89fd	b0 04		bcs $8a03			bcs 	_CRIsKeyword
.89ff	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a01	b0 34		bcs $8a37			bcs		_CRSyntaxError
.8a03					_CRIsKeyword:
.8a03	c8		iny				iny 								; consume command
.8a04	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a05	aa		tax				tax 								; put in X for vector jump
.8a06	20 3a 8a	jsr $8a3a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a09	80 e9		bra $89f4			bra 	_CRMainLoop 				; and loop round
.8a0b					_CRNotKeyword:
.8a0b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a0d	f0 da		beq $89e9			beq 	_CRIncMainLoop
.8a0f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a11	90 05		bcc $8a18			bcc 	_CRNotVariable
.8a13					_CRGoLet:
.8a13	20 73 86	jsr $8673			jsr 	LetCommand
.8a16	80 dc		bra $89f4			bra 	_CRMainLoop
.8a18					_CRNotVariable:
.8a18	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1a	f0 f7		beq $8a13			beq 	_CRGoLet
.8a1c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a1e	f0 f3		beq $8a13			beq 	_CRGoLet
.8a20	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a22	f0 ef		beq $8a13			beq 	_CRGoLet
.8a24	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a26	f0 09		beq $8a31			beq 	_CRGoRem
.8a28	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2a	d0 0b		bne $8a37			bne 	_CRSyntaxError
.8a2c	20 0c 82	jsr $820c			jsr 	LabelHere
.8a2f	80 c3		bra $89f4			bra 	_CRMainLoop
.8a31					_CRGoRem:
.8a31	c8		iny				iny
.8a32	20 74 89	jsr $8974			jsr 	RemCommand
.8a35	80 bd		bra $89f4			bra 	_CRMainLoop
.8a37					_CRSyntaxError:
.8a37	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.8a3a					_CRCallVector0:
.8a3a	7c e6 8a	jmp ($8ae6,x)			jmp 	(VectorSet0,x)
.8a3d					_CRBreak:
.8a3d	a9 01		lda #$01		lda	#1
.8a3f	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8a42					CRNoProgram:
.8a42	4c f9 84	jmp $84f9			jmp 	EndCommand
.8a45					EOLCommand:
.8a45	18		clc				clc
.8a46	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a48	65 30		adc $30				adc 	codePtr
.8a4a	85 30		sta $30				sta 	codePtr
.8a4c	90 02		bcc $8a50			bcc 	_CREExit
.8a4e	e6 31		inc $31				inc 	codePtr+1
.8a50					_CREExit:
.8a50	80 8e		bra $89e0			bra 	RunNewLine
.8a52					Shift1Command:
.8a52	b1 30		lda ($30),y			lda 	(codePtr),y
.8a54	c8		iny				iny
.8a55	0a		asl a				asl 	a
.8a56	aa		tax				tax
.8a57	7c 82 8b	jmp ($8b82,x)			jmp 	(VectorSet1,x)
.8a5a					Shift2Command:
.8a5a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5c	c8		iny				iny
.8a5d	0a		asl a				asl 	a
.8a5e	aa		tax				tax
.8a5f	7c 9c 8b	jmp ($8b9c,x)			jmp 	(VectorSet2,x)
.8a62					Unused1:
.8a62					Unused2:
.8a62					Unused3:
.8a62					Unused4:
.8a62	4c 86 9f	jmp $9f86			jmp 	SyntaxError
>8a65							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a66					VectorSetPunc:
>8a66	26 90					.word	ShiftLeft                        ; $00 <<
>8a68	dd 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6a	d3 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a6c	86 9f					.word	SyntaxError                      ; $03 !!3
>8a6e	86 9f					.word	SyntaxError                      ; $04 ><
>8a70	e7 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a72	29 90					.word	ShiftRight                       ; $06 >>
>8a74	86 9f					.word	SyntaxError                      ; $07 !!7
>8a76	86 9f					.word	SyntaxError                      ; $08 !!8
>8a78	86 9f					.word	SyntaxError                      ; $09 !!9
>8a7a	86 9f					.word	SyntaxError                      ; $0a !!10
>8a7c	86 9f					.word	SyntaxError                      ; $0b !!11
>8a7e	86 9f					.word	SyntaxError                      ; $0c !!12
>8a80	86 9f					.word	SyntaxError                      ; $0d !!13
>8a82	86 9f					.word	SyntaxError                      ; $0e !!14
>8a84	86 9f					.word	SyntaxError                      ; $0f !!15
>8a86	86 9f					.word	SyntaxError                      ; $10 @
>8a88	86 9f					.word	SyntaxError                      ; $11 !!17
>8a8a	86 9f					.word	SyntaxError                      ; $12 !!18
>8a8c	86 9f					.word	SyntaxError                      ; $13 [
>8a8e	aa 8e					.word	IntegerDivide                    ; $14 \
>8a90	86 9f					.word	SyntaxError                      ; $15 ]
>8a92	b7 91					.word	EorInteger                       ; $16 ^
>8a94	86 9f					.word	SyntaxError                      ; $17 _
>8a96	86 9f					.word	SyntaxError                      ; $18 `
>8a98	86 9f					.word	SyntaxError                      ; $19 !!25
>8a9a	86 9f					.word	SyntaxError                      ; $1a !!26
>8a9c	86 9f					.word	SyntaxError                      ; $1b {
>8a9e	71 91					.word	OraInteger                       ; $1c |
>8aa0	86 9f					.word	SyntaxError                      ; $1d }
>8aa2	86 9f					.word	SyntaxError                      ; $1e ~
>8aa4	86 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aa6	86 9f					.word	SyntaxError                      ; $20
>8aa8	fd 91					.word	WordIndirect                     ; $21 !
>8aaa	86 9f					.word	SyntaxError                      ; $22 "
>8aac	86 9f					.word	SyntaxError                      ; $23 #
>8aae	86 9f					.word	SyntaxError                      ; $24 $
>8ab0	f7 8e					.word	IntegerModulus                   ; $25 %
>8ab2	2b 91					.word	AndInteger                       ; $26 &
>8ab4	86 9f					.word	SyntaxError                      ; $27 '
>8ab6	86 9f					.word	SyntaxError                      ; $28 (
>8ab8	86 9f					.word	SyntaxError                      ; $29 )
>8aba	6c 8f					.word	MulInteger                       ; $2a *
>8abc	bd 90					.word	AddInteger                       ; $2b +
>8abe	86 9f					.word	SyntaxError                      ; $2c ,
>8ac0	00 91					.word	SubInteger                       ; $2d -
>8ac2	86 9f					.word	SyntaxError                      ; $2e .
>8ac4	e8 93					.word	FDivideCommand                   ; $2f /
>8ac6	86 9f					.word	SyntaxError                      ; $30 0
>8ac8	86 9f					.word	SyntaxError                      ; $31 1
>8aca	86 9f					.word	SyntaxError                      ; $32 2
>8acc	86 9f					.word	SyntaxError                      ; $33 3
>8ace	86 9f					.word	SyntaxError                      ; $34 4
>8ad0	86 9f					.word	SyntaxError                      ; $35 5
>8ad2	86 9f					.word	SyntaxError                      ; $36 6
>8ad4	86 9f					.word	SyntaxError                      ; $37 7
>8ad6	86 9f					.word	SyntaxError                      ; $38 8
>8ad8	86 9f					.word	SyntaxError                      ; $39 9
>8ada	86 9f					.word	SyntaxError                      ; $3a :
>8adc	86 9f					.word	SyntaxError                      ; $3b ;
>8ade	bf 8d					.word	BinaryCompareLess                ; $3c <
>8ae0	b5 8d					.word	BinaryCompareEqual               ; $3d =
>8ae2	c9 8d					.word	BinaryCompareGreater             ; $3e >
>8ae4	24 92					.word	ByteIndirect                     ; $3f ?
.8ae6					VectorSet0:
>8ae6	45 8a					.word	EOLCommand                       ; $80 !0:EOF
>8ae8	52 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aea	5a 8a					.word	Shift2Command                    ; $82 !2:SH2
>8aec	58 99					.word	AbsUnary                         ; $83 ABS(
>8aee	68 99					.word	AllocUnary                       ; $84 ALLOC(
>8af0	d8 99					.word	AscUnary                         ; $85 ASC(
>8af2	a3 9b					.word	ChrUnary                         ; $86 CHR$(
>8af4	08 a5					.word	UnaryEvent                       ; $87 EVENT(
>8af6	b1 8d					.word	UnaryFalse                       ; $88 FALSE
>8af8	e5 99					.word	FracUnary                        ; $89 FRAC(
>8afa	9e a4					.word	UnaryHit                         ; $8a HIT(
>8afc	fb 99					.word	IntUnary                         ; $8b INT(
>8afe	62 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b00	98 a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b02	71 a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b04	74 a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b06	7d 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b08	0d 9a					.word	LenUnary                         ; $91 LEN(
>8b0a	2b 9a					.word	Unary_Max                        ; $92 MAX(
>8b0c	a7 9c					.word	Unary_Mid                        ; $93 MID$(
>8b0e	27 9a					.word	Unary_Min                        ; $94 MIN(
>8b10	82 9a					.word	Unary_Not                        ; $95 NOT(
>8b12	86 9f					.word	SyntaxError                      ; $96 PLAYING(
>8b14	98 9a					.word	Unary_Random                     ; $97 RANDOM(
>8b16	8d 9c					.word	Unary_Right                      ; $98 RIGHT$(
>8b18	b7 9a					.word	Unary_Rnd                        ; $99 RND(
>8b1a	38 9b					.word	SgnUnary                         ; $9a SGN(
>8b1c	b5 9b					.word	SpcUnary                         ; $9b SPC(
>8b1e	d0 9b					.word	Unary_Str                        ; $9c STR$(
>8b20	ac a5					.word	UnaryTimer                       ; $9d TIMER(
>8b22	a5 8d					.word	UnaryTrue                        ; $9e TRUE
>8b24	58 9b					.word	ValUnary                         ; $9f VAL(
>8b26	fc 84					.word	ForCommand                       ; $a0 FOR
>8b28	49 86					.word	IfCommand                        ; $a1 IF
>8b2a	62 8a					.word	Unused1                          ; $a2 PROC
>8b2c	81 89					.word	Command_REPEAT                   ; $a3 REPEAT
>8b2e	f1 8c					.word	Command_WHILE                    ; $a4 WHILE
>8b30	72 86					.word	EndIf                            ; $a5 ENDIF
>8b32	0d 89					.word	Command_ENDPROC                  ; $a6 ENDPROC
>8b34	b6 85					.word	NextCommand                      ; $a7 NEXT
>8b36	62 8a					.word	Unused4                          ; $a8 THEN
>8b38	8a 89					.word	Command_UNTIL                    ; $a9 UNTIL
>8b3a	12 8d					.word	Command_WEND                     ; $aa WEND
>8b3c	86 9f					.word	SyntaxError                      ; $ab BY
>8b3e	9a 83					.word	CallCommand                      ; $ac CALL
>8b40	40 a2					.word	CircleCommand                    ; $ad CIRCLE
>8b42	d4 83					.word	ClearCommand                     ; $ae CLEAR
>8b44	2c 84					.word	ClearScreen                      ; $af CLS
>8b46	86 9f					.word	SyntaxError                      ; $b0 COLOR
>8b48	86 9f					.word	SyntaxError                      ; $b1 COLOUR
>8b4a	34 84					.word	Command_Data                     ; $b2 DATA
>8b4c	3c 84					.word	DimCommand                       ; $b3 DIM
>8b4e	62 8a					.word	Unused3                          ; $b4 DOWNTO
>8b50	6b 86					.word	ElseCode                         ; $b5 ELSE
>8b52	86 9f					.word	SyntaxError                      ; $b6 FROM
>8b54	6c a4					.word	GfxCommand                       ; $b7 GFX
>8b56	0f 86					.word	Command_GOSUB                    ; $b8 GOSUB
>8b58	2d 86					.word	GotoCommand                      ; $b9 GOTO
>8b5a	86 9f					.word	SyntaxError                      ; $ba HERE
>8b5c	6a a2					.word	ImageCommand                     ; $bb IMAGE
>8b5e	73 86					.word	LetCommand                       ; $bc LET
>8b60	bf a2					.word	LineCommand                      ; $bd LINE
>8b62	69 87					.word	Command_LOCAL                    ; $be LOCAL
>8b64	86 9f					.word	SyntaxError                      ; $bf OFF
>8b66	86 9f					.word	SyntaxError                      ; $c0 ON
>8b68	86 9f					.word	SyntaxError                      ; $c1 OUTLINE
>8b6a	c4 a4					.word	PaletteCommand                   ; $c2 PALETTE
>8b6c	b8 a2					.word	PlotCommand                      ; $c3 PLOT
>8b6e	40 88					.word	Command_Print                    ; $c4 PRINT
>8b70	1b 89					.word	Command_Read                     ; $c5 READ
>8b72	3c a2					.word	RectangleCommand                 ; $c6 RECT
>8b74	74 89					.word	RemCommand                       ; $c7 REM
>8b76	1f 86					.word	Command_RETURN                   ; $c8 RETURN
>8b78	86 9f					.word	SyntaxError                      ; $c9 SOLID
>8b7a	86 9f					.word	SyntaxError                      ; $ca SOUND
>8b7c	4b a2					.word	SpriteCommand                    ; $cb SPRITE
>8b7e	87 a2					.word	TextCommand                      ; $cc TEXT
>8b80	62 8a					.word	Unused2                          ; $cd TO
.8b82					VectorSet1:
>8b82	86 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b84	86 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b86	86 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b88	6b 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b8a	8a 83					.word	AssertCommand                    ; $84 ASSERT
>8b8c	0c a4					.word	BitmapCtrl                       ; $85 BITMAP
>8b8e	f9 84					.word	EndCommand                       ; $86 END
>8b90	c8 86					.word	Command_List                     ; $87 LIST
>8b92	30 88					.word	NewCommand                       ; $88 NEW
>8b94	a3 89					.word	Command_Restore                  ; $89 RESTORE
>8b96	d5 89					.word	CommandRUN                       ; $8a RUN
>8b98	51 a4					.word	SpritesCtrl                      ; $8b SPRITES
>8b9a	24 8c					.word	StopCommand                      ; $8c STOP
.8b9c					VectorSet2:
>8b9c	86 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9e	86 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba0	86 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba2	45 9e					.word	Assemble_adc                     ; $83 ADC
>8ba4	3d 9e					.word	Assemble_and                     ; $84 AND
>8ba6	59 9e					.word	Assemble_asl                     ; $85 ASL
>8ba8	c3 9e					.word	Assemble_bcc                     ; $86 BCC
>8baa	c7 9e					.word	Assemble_bcs                     ; $87 BCS
>8bac	cf 9e					.word	Assemble_beq                     ; $88 BEQ
>8bae	86 9e					.word	Assemble_bit                     ; $89 BIT
>8bb0	b7 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb2	cb 9e					.word	Assemble_bne                     ; $8b BNE
>8bb4	b3 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb6	d3 9e					.word	Assemble_bra                     ; $8d BRA
>8bb8	d7 9e					.word	Assemble_brk                     ; $8e BRK
>8bba	bb 9e					.word	Assemble_bvc                     ; $8f BVC
>8bbc	bf 9e					.word	Assemble_bvs                     ; $90 BVS
>8bbe	df 9e					.word	Assemble_clc                     ; $91 CLC
>8bc0	33 9f					.word	Assemble_cld                     ; $92 CLD
>8bc2	f3 9e					.word	Assemble_cli                     ; $93 CLI
>8bc4	23 9f					.word	Assemble_clv                     ; $94 CLV
>8bc6	51 9e					.word	Assemble_cmp                     ; $95 CMP
>8bc8	9a 9e					.word	Assemble_cpx                     ; $96 CPX
>8bca	95 9e					.word	Assemble_cpy                     ; $97 CPY
>8bcc	77 9e					.word	Assemble_dec                     ; $98 DEC
>8bce	2f 9f					.word	Assemble_dex                     ; $99 DEX
>8bd0	0b 9f					.word	Assemble_dey                     ; $9a DEY
>8bd2	41 9e					.word	Assemble_eor                     ; $9b EOR
>8bd4	7c 9e					.word	Assemble_inc                     ; $9c INC
>8bd6	3f 9f					.word	Assemble_inx                     ; $9d INX
>8bd8	2b 9f					.word	Assemble_iny                     ; $9e INY
>8bda	ae 9e					.word	Assemble_jmp                     ; $9f JMP
>8bdc	a9 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bde	4d 9e					.word	Assemble_lda                     ; $a1 LDA
>8be0	72 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be2	90 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be4	63 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be6	43 9f					.word	Assemble_nop                     ; $a5 NOP
>8be8	39 9e					.word	Assemble_ora                     ; $a6 ORA
>8bea	ef 9e					.word	Assemble_pha                     ; $a7 PHA
>8bec	db 9e					.word	Assemble_php                     ; $a8 PHP
>8bee	37 9f					.word	Assemble_phx                     ; $a9 PHX
>8bf0	f7 9e					.word	Assemble_phy                     ; $aa PHY
>8bf2	ff 9e					.word	Assemble_pla                     ; $ab PLA
>8bf4	e3 9e					.word	Assemble_plp                     ; $ac PLP
>8bf6	4b 9f					.word	Assemble_plx                     ; $ad PLX
>8bf8	07 9f					.word	Assemble_ply                     ; $ae PLY
>8bfa	5e 9e					.word	Assemble_rol                     ; $af ROL
>8bfc	68 9e					.word	Assemble_ror                     ; $b0 ROR
>8bfe	eb 9e					.word	Assemble_rti                     ; $b1 RTI
>8c00	fb 9e					.word	Assemble_rts                     ; $b2 RTS
>8c02	55 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c04	e7 9e					.word	Assemble_sec                     ; $b4 SEC
>8c06	47 9f					.word	Assemble_sed                     ; $b5 SED
>8c08	03 9f					.word	Assemble_sei                     ; $b6 SEI
>8c0a	49 9e					.word	Assemble_sta                     ; $b7 STA
>8c0c	3b 9f					.word	Assemble_stp                     ; $b8 STP
>8c0e	6d 9e					.word	Assemble_stx                     ; $b9 STX
>8c10	8b 9e					.word	Assemble_sty                     ; $ba STY
>8c12	81 9e					.word	Assemble_stz                     ; $bb STZ
>8c14	1f 9f					.word	Assemble_tax                     ; $bc TAX
>8c16	1b 9f					.word	Assemble_tay                     ; $bd TAY
>8c18	a4 9e					.word	Assemble_trb                     ; $be TRB
>8c1a	9f 9e					.word	Assemble_tsb                     ; $bf TSB
>8c1c	27 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c1e	0f 9f					.word	Assemble_txa                     ; $c1 TXA
>8c20	17 9f					.word	Assemble_txs                     ; $c2 TXS
>8c22	13 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c24					StopCommand:
.8c24	a9 08		lda #$08		lda	#8
.8c26	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c29					ProcedureScan:
.8c29	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c2b	85 30		sta $30				sta 	codePtr
.8c2d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2f	85 31		sta $31				sta 	codePtr+1
.8c31					_PSLoop:
.8c31	b2 30		lda ($30)			lda 	(codePtr)
.8c33	f0 42		beq $8c77			beq 	_PSExit
.8c35	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c9 a2		cmp #$a2			cmp 	#KWD_PROC
.8c3b	d0 2d		bne $8c6a			bne 	_PSNext
.8c3d	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c40	29 c0		and #$c0			and 	#$C0
.8c42	c9 40		cmp #$40			cmp 	#$40
.8c44	d0 32		bne $8c78			bne 	_PSSyntax
.8c46	b1 30		lda ($30),y			lda 	(codePtr),y
.8c48	18		clc				clc
.8c49	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c4b	85 37		sta $37				sta 	zTemp0+1
.8c4d	c8		iny				iny 								; LSB
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	85 36		sta $36				sta 	zTemp0
.8c52	c8		iny				iny 								; character after variable call.
.8c53	98		tya				tya 								; save Y offset at +7
.8c54	a0 07		ldy #$07			ldy 	#7
.8c56	91 36		sta ($36),y			sta 	(zTemp0),y
.8c58	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c5a	a0 02		ldy #$02			ldy 	#2
.8c5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c60					_PSCopy:
.8c60	b5 30		lda $30,x			lda 	safePtr,x
.8c62	c8		iny				iny
.8c63	91 36		sta ($36),y			sta 	(zTemp0),y
.8c65	e8		inx				inx
.8c66	e0 04		cpx #$04			cpx 	#4
.8c68	d0 f6		bne $8c60			bne 	_PSCopy
.8c6a					_PSNext:
.8c6a	18		clc				clc
.8c6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c6d	65 30		adc $30				adc 	codePtr
.8c6f	85 30		sta $30				sta 	codePtr
.8c71	90 02		bcc $8c75			bcc 	_CREExit
.8c73	e6 31		inc $31				inc 	codePtr+1
.8c75					_CREExit:
.8c75	80 ba		bra $8c31			bra 	_PSLoop
.8c77					_PSExit:
.8c77	60		rts				rts
.8c78					_PSSyntax:
.8c78	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c7b					ScanForward:
.8c7b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c7d	86 37		stx $37				stx 	zTemp0+1
.8c7f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c81					_ScanLoop:
.8c81	b1 30		lda ($30),y			lda 	(codePtr),y
.8c83	c8		iny				iny
.8c84	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c86	d0 0e		bne $8c96			bne 	_ScanGoNext
.8c88	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c8a	f0 04		beq $8c90			beq 	_ScanMatch
.8c8c	c5 37		cmp $37				cmp 	zTemp0+1
.8c8e	d0 06		bne $8c96			bne 	_ScanGoNext
.8c90					_ScanMatch:
.8c90	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c92	d0 01		bne $8c95			bne 	_ScanNotEndEOL
.8c94	88		dey				dey
.8c95					_ScanNotEndEOL:
.8c95	60		rts				rts
.8c96					_ScanGoNext:
.8c96	20 9b 8c	jsr $8c9b			jsr  	ScanForwardOne
.8c99	80 e6		bra $8c81			bra 	_ScanLoop
.8c9b					ScanForwardOne:
.8c9b	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c9d	90 3e		bcc $8cdd			bcc 	_SFWExit
.8c9f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ca1	90 18		bcc $8cbb			bcc 	_ScanSkipOne
.8ca3	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca5	b0 2f		bcs $8cd6			bcs 	_ScanSkipData
.8ca7	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ca9	90 32		bcc $8cdd			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cab	c9 ab		cmp #$ab			cmp 	#KWC_LAST_STRUCTURE+1
.8cad	b0 2e		bcs $8cdd			bcs 	_SFWExit
.8caf	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cb1	c9 a5		cmp #$a5			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb3	b0 28		bcs $8cdd			bcs 	_SFWExit
.8cb5	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb7	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cb9	80 22		bra $8cdd			bra 	_SFWExit
.8cbb					_ScanSkipOne:
.8cbb	c8		iny				iny 								; consume the extra one.
.8cbc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cbe	d0 1d		bne $8cdd			bne 	_SFWExit
.8cc0	18		clc				clc
.8cc1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc3	65 30		adc $30				adc 	codePtr
.8cc5	85 30		sta $30				sta 	codePtr
.8cc7	90 02		bcc $8ccb			bcc 	_CREExit
.8cc9	e6 31		inc $31				inc 	codePtr+1
.8ccb					_CREExit:
.8ccb	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ccd	b2 30		lda ($30)			lda 	(codePtr)
.8ccf	d0 0c		bne $8cdd			bne 	_SFWExit 					; if not zero, more to scan
.8cd1	a9 13		lda #$13		lda	#19
.8cd3	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8cd6					_ScanSkipData:
.8cd6	88		dey				dey 								; point at data token
.8cd7	c8		iny				iny
.8cd8	98		tya				tya
.8cd9	38		sec				sec
.8cda	71 30		adc ($30),y			adc 	(codePtr),y
.8cdc	a8		tay				tay
.8cdd					_SFWExit:
.8cdd	60		rts				rts
.8cde					ScanGetCurrentLineStep:
.8cde	64 38		stz $38				stz 	zTemp1
.8ce0	a0 03		ldy #$03			ldy 	#3
.8ce2					_SGCLSLoop:
.8ce2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce4	c8		iny				iny
.8ce5	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce7	f0 05		beq $8cee			beq 	_SGCLSExit
.8ce9	20 9b 8c	jsr $8c9b			jsr 	ScanForwardOne
.8cec	80 f4		bra $8ce2			bra 	_SGCLSLoop
.8cee					_SGCLSExit:
.8cee	a5 38		lda $38				lda 	zTemp1
.8cf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cf1					Command_WHILE:
.8cf1	5a		phy				phy 								; save position of the test
.8cf2	a2 00		ldx #$00			ldx 	#0
.8cf4	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; work out the number
.8cf7	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check if zero
.8cfa	f0 0e		beq $8d0a			beq 	_WHExitLoop 				; if so exit the loop
.8cfc	98		tya				tya 								; position *after* test.
.8cfd	7a		ply				ply 								; restore position before test, at WHILE
.8cfe	88		dey				dey
.8cff	48		pha				pha 								; push after test on the stack
.8d00	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d02	20 ea a5	jsr $a5ea			jsr 	StackOpen
.8d05	20 2e a6	jsr $a62e			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d08	7a		ply				ply 								; restore the position *after* the test
.8d09	60		rts				rts
.8d0a					_WHExitLoop:
.8d0a	68		pla				pla 								; throw post loop position
.8d0b	a9 aa		lda #$aa			lda 	#KWD_WEND 					; scan forward past WEND
.8d0d	aa		tax				tax
.8d0e	20 7b 8c	jsr $8c7b			jsr 	ScanForward
.8d11	60		rts				rts
.8d12					Command_WEND:
.8d12	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d14	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d16	20 16 a6	jsr $a616			jsr 	StackCheckFrame
.8d19	20 3f a6	jsr $a63f			jsr 	STKLoadCodePosition 		; loop back
.8d1c	20 08 a6	jsr $a608			jsr 	StackClose		 			; erase the frame
.8d1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d20					CheckRightBracket:
.8d20	b1 30		lda ($30),y			lda 	(codePtr),y
.8d22	c8		iny				iny
.8d23	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d25	d0 0f		bne $8d36			bne 	CNAFail
.8d27	60		rts				rts
.8d28					CheckComma:
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	c8		iny				iny
.8d2b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d2d	d0 07		bne $8d36			bne 	CNAFail
.8d2f	60		rts				rts
.8d30					CheckNextA:
.8d30	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d32	d0 02		bne $8d36			bne 	CNAFail
.8d34	c8		iny				iny 								; skip character
.8d35	60		rts				rts 								; and exit
.8d36					CNAFail:
.8d36	4c 86 9f	jmp $9f86			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d39					ErrorHandler:
.8d39	a8		tay				tay 								; find the error text
.8d3a	f0 49		beq $8d85			beq 	_EHEnd
.8d3c	a2 00		ldx #$00			ldx 	#0
.8d3e	a9 9f		lda #$9f			lda 	#((ErrorText) & $FF)
.8d40	85 36		sta $36				sta 	0+zTemp0
.8d42	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d44	85 37		sta $37				sta 	1+zTemp0
.8d46					_EHFind:
.8d46	88		dey				dey 								; found the error text ?
.8d47	f0 0e		beq $8d57			beq 	_EHFound
.8d49					_EHFindZero:
.8d49	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d4b	e6 36		inc $36				inc 	zTemp0
.8d4d	d0 02		bne $8d51			bne 	_EHFNoCarry
.8d4f	e6 37		inc $37				inc 	zTemp0+1
.8d51					_EHFNoCarry:
.8d51	c9 00		cmp #$00			cmp 	#0
.8d53	d0 f4		bne $8d49			bne 	_EHFindZero
.8d55	80 ef		bra $8d46			bra 	_EHFind
.8d57					_EHFound:
.8d57	a5 36		lda $36				lda 	zTemp0 						; print message
.8d59	a6 37		ldx $37				ldx 	zTemp0+1
.8d5b	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8d5e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d60	b1 30		lda ($30),y			lda 	(codePtr),y
.8d62	d0 05		bne $8d69			bne 	_EHAtMsg
.8d64	c8		iny				iny
.8d65	b1 30		lda ($30),y			lda 	(codePtr),y
.8d67	f0 17		beq $8d80			beq 	_EHCREnd
.8d69					_EHAtMsg:
.8d69	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d6b	a9 88		lda #$88			lda 	#_AtMsg & $FF
.8d6d	20 92 8d	jsr $8d92			jsr 	PrintStringXA
.8d70	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d72	b1 30		lda ($30),y			lda 	(codePtr),y
.8d74	48		pha				pha
.8d75	c8		iny				iny
.8d76	b1 30		lda ($30),y			lda 	(codePtr),y
.8d78	aa		tax				tax
.8d79	68		pla				pla
.8d7a	20 4b 92	jsr $924b			jsr 	LCLConvertInt16 				; convert XA to string
.8d7d	20 92 8d	jsr $8d92			jsr 	PrintStringXA 				; and print it.
.8d80					_EHCREnd:
.8d80	a9 0d		lda #$0d			lda 	#13 						; new line
.8d82	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8d85					_EHEnd:
.8d85	4c 3b 83	jmp $833b			jmp 	WarmStart
>8d88	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d90	20 00
.8d92					PrintStringXA:
.8d92	5a		phy				phy
.8d93	86 37		stx $37				stx 	zTemp0+1
.8d95	85 36		sta $36				sta 	zTemp0
.8d97	a0 00		ldy #$00			ldy 	#0
.8d99					_PSXALoop:
.8d99	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9b	f0 06		beq $8da3			beq 	_PSXAExit
.8d9d	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8da0	c8		iny				iny
.8da1	80 f6		bra $8d99			bra 	_PSXALoop
.8da3					_PSXAExit:
.8da3	7a		ply				ply
.8da4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da5					UnaryTrue:
.8da5	fa		plx				plx
.8da6					ReturnTrue:
.8da6	a9 01		lda #$01			lda 	#1  						; set to 1
.8da8	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.8dab	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8db0	60		rts				rts
.8db1					UnaryFalse:
.8db1	fa		plx				plx
.8db2					ReturnFalse:
.8db2	4c fc 9d	jmp $9dfc			jmp 	NSMSetZero 					; set it all to zero
.8db5					BinaryCompareEqual:
.8db5	fa		plx				plx
.8db6	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8db9	c9 00		cmp #$00			cmp 	#0
.8dbb	f0 e9		beq $8da6			beq 	ReturnTrue
.8dbd	80 f3		bra $8db2			bra 	ReturnFalse
.8dbf					BinaryCompareLess:
.8dbf	fa		plx				plx
.8dc0	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dc3	c9 ff		cmp #$ff			cmp 	#$FF
.8dc5	f0 df		beq $8da6			beq 	ReturnTrue
.8dc7	80 e9		bra $8db2			bra 	ReturnFalse
.8dc9					BinaryCompareGreater:
.8dc9	fa		plx				plx
.8dca	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dcd	c9 01		cmp #$01			cmp 	#1
.8dcf	f0 d5		beq $8da6			beq 	ReturnTrue
.8dd1	80 df		bra $8db2			bra 	ReturnFalse
.8dd3					BinaryCompareNotEqual:
.8dd3	fa		plx				plx
.8dd4	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8dd7	c9 00		cmp #$00			cmp 	#0
.8dd9	d0 cb		bne $8da6			bne 	ReturnTrue
.8ddb	80 d5		bra $8db2			bra 	ReturnFalse
.8ddd					BinaryCompareLessEqual:
.8ddd	fa		plx				plx
.8dde	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8de1	c9 01		cmp #$01			cmp 	#1
.8de3	d0 c1		bne $8da6			bne 	ReturnTrue
.8de5	80 cb		bra $8db2			bra 	ReturnFalse
.8de7					BinaryCompareGreaterEqual:
.8de7	fa		plx				plx
.8de8	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode
.8deb	c9 ff		cmp #$ff			cmp 	#$FF
.8ded	d0 b7		bne $8da6			bne 	ReturnTrue
.8def	80 c1		bra $8db2			bra 	ReturnFalse
.8df1					CompareBaseCode:
.8df1	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; make both values if references.
.8df4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8dfa	29 10		and #$10			and 	#NSTString
.8dfc	d0 40		bne $8e3e			bne 	_CBCString
.8dfe	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e01	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e04	d0 3b		bne $8e41			bne 	_CBCFloat
.8e06	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e09	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e0c	29 08		and #$08			and 	#NSTFloat
.8e0e	d0 31		bne $8e41			bne 	_CBCFloat
.8e10	20 44 8e	jsr $8e44			jsr 	CompareFixMinusZero
.8e13	e8		inx				inx
.8e14	20 44 8e	jsr $8e44			jsr 	CompareFixMinusZero
.8e17	ca		dex				dex
.8e18	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e1b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e1e	10 0b		bpl $8e2b			bpl 	_CDCSameSign
.8e20	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e23	30 16		bmi $8e3b			bmi 	_CBCLess 					; return $FF
.8e25					_CBCGreater:
.8e25	a9 01		lda #$01			lda 	#1
.8e27	60		rts				rts
.8e28					_CBCEqual:
.8e28	a9 00		lda #$00			lda 	#0
.8e2a	60		rts				rts
.8e2b					_CDCSameSign:
.8e2b	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; unsigned subtract
.8e2e	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; or the mantissa together
.8e31	f0 f5		beq $8e28			beq 	_CBCEqual 					; -0 == 0
.8e33	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e36	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e39	10 ea		bpl $8e25			bpl 	_CBCGreater
.8e3b					_CBCLess:
.8e3b	a9 ff		lda #$ff			lda 	#$FF
.8e3d	60		rts				rts
.8e3e					_CBCString:
.8e3e	4c ed 8f	jmp $8fed			jmp 	CompareStrings
.8e41					_CBCFloat:
.8e41	4c ce 93	jmp $93ce			jmp 	CompareFloat
.8e44					CompareFixMinusZero:
.8e44	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero
.8e47	d0 03		bne $8e4c			bne 	_CFXMZNotZero
.8e49	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e4c					_CFXMZNotZero:
.8e4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e4d					StringConcat:
.8e4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e50	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e53	29 18		and #$18			and 	#NSBTypeMask
.8e55	c9 10		cmp #$10			cmp 	#NSTString
.8e57	d0 4e		bne $8ea7			bne		_SCType
.8e59	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e5b	e8		inx				inx
.8e5c	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; setup for second
.8e5f	20 85 8e	jsr $8e85			jsr 	_SCLengthZ0 				; length for second
.8e62	ca		dex				dex
.8e63	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; setup for first
.8e66	20 85 8e	jsr $8e85			jsr 	_SCLengthZ0 				; length for first
.8e69	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e6b	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate
.8e6e	20 98 8e	jsr $8e98			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e71	e8		inx				inx
.8e72	20 7a 8e	jsr $8e7a			jsr 	_SCSetupZ0 					; copy second out
.8e75	20 98 8e	jsr $8e98			jsr 	_SCCopy
.8e78	ca		dex				dex
.8e79	60		rts				rts
.8e7a					_SCSetupZ0:
.8e7a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e7d	85 36		sta $36				sta 	zTemp0
.8e7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e82	85 37		sta $37				sta 	zTemp0+1
.8e84	60		rts				rts
.8e85					_SCLengthZ0:
.8e85	5a		phy				phy
.8e86	a0 00		ldy #$00			ldy 	#0
.8e88					_SCLenLoop:
.8e88	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e8a	f0 0a		beq $8e96			beq 	_SCLExit
.8e8c	c8		iny				iny
.8e8d	e6 38		inc $38				inc 	zTemp1
.8e8f	10 f7		bpl $8e88			bpl		_SCLenLoop
.8e91	a9 09		lda #$09		lda	#9
.8e93	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8e96					_SCLExit:
.8e96	7a		ply				ply
.8e97	60		rts				rts
.8e98					_SCCopy:
.8e98	5a		phy				phy
.8e99	a0 00		ldy #$00			ldy 	#0
.8e9b					_SCCopyLoop:
.8e9b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9d	f0 06		beq $8ea5			beq 	_SCCExit
.8e9f	20 1b a7	jsr $a71b			jsr 	StringTempWrite
.8ea2	c8		iny				iny
.8ea3	80 f6		bra $8e9b			bra 	_SCCopyLoop
.8ea5					_SCCExit:
.8ea5	7a		ply				ply
.8ea6	60		rts				rts
.8ea7					_SCType:
.8ea7	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eaa					IntegerDivide:
.8eaa	fa		plx				plx
.8eab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eae	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eb1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb2	0a		asl a				asl 	a
.8eb3	10 05		bpl $8eba			bpl 	_NotRef
.8eb5	48		pha				pha
.8eb6	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb9	68		pla				pla
.8eba					_NotRef:
.8eba	0a		asl a				asl 	a
.8ebb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec3	f0 03		beq $8ec8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec5	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.8ec8					_IntegerCode:
.8ec8	20 ea 8e	jsr $8eea			jsr 	CheckDivideZero 			; do div zero check
.8ecb	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; do the division
.8ece	20 df 8f	jsr $8fdf			jsr 	CalculateSign 				; calculate result sign
.8ed1					NSMCopyPlusTwoToZero:
.8ed1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed7	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8eda	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8edd	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ee0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee3	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ee9	60		rts				rts
.8eea					CheckDivideZero:
.8eea	e8		inx				inx
.8eeb	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero
.8eee	f0 02		beq $8ef2			beq 	_CDVError
.8ef0	ca		dex				dex
.8ef1	60		rts				rts
.8ef2					_CDVError:
.8ef2	a9 03		lda #$03		lda	#3
.8ef4	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8ef7					IntegerModulus:
.8ef7	fa		plx				plx
.8ef8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8efb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8efe	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eff	0a		asl a				asl 	a
.8f00	10 05		bpl $8f07			bpl 	_NotRef
.8f02	48		pha				pha
.8f03	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f06	68		pla				pla
.8f07					_NotRef:
.8f07	0a		asl a				asl 	a
.8f08	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f0a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f10	f0 03		beq $8f15			beq 	_IntegerCode 				; if clear, then we have two integers
.8f12	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.8f15					_IntegerCode:
.8f15					IntegerModulusNoCheck:
.8f15	20 ea 8e	jsr $8eea			jsr 	CheckDivideZero 			; do div zero check
.8f18	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; do the division
.8f1b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f1e	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f21	60		rts				rts
.8f22					Int32Divide:
.8f22	48		pha				pha 								; save AXY
.8f23	5a		phy				phy
.8f24	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f27	20 f8 9d	jsr $9df8			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f2a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f2c					_I32DivideLoop:
.8f2c	e8		inx				inx
.8f2d	e8		inx				inx
.8f2e	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f31	ca		dex				dex
.8f32	ca		dex				dex
.8f33	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft
.8f36	20 62 8f	jsr $8f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f39	90 03		bcc $8f3e			bcc 	_I32DivideNoCarryIn
.8f3b	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f3e					_I32DivideNoCarryIn:
.8f3e	88		dey				dey 								; loop round till division completed.
.8f3f	d0 eb		bne $8f2c			bne 	_I32DivideLoop
.8f41	7a		ply				ply 								; restore AXY and exit
.8f42	68		pla				pla
.8f43	60		rts				rts
.8f44					Int32ShiftDivide:
.8f44	48		pha				pha 								; save AY
.8f45	5a		phy				phy
.8f46	e8		inx				inx 								; clear S[X+2]
.8f47	e8		inx				inx
.8f48	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.8f4b	ca		dex				dex
.8f4c	ca		dex				dex
.8f4d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f4f					_I32SDLoop:
.8f4f	20 62 8f	jsr $8f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f52	e8		inx				inx
.8f53	e8		inx				inx
.8f54	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f57	ca		dex				dex
.8f58	ca		dex				dex
.8f59	20 12 9e	jsr $9e12			jsr 	NSMRotateLeft
.8f5c	88		dey				dey 	 							; do 31 times
.8f5d	d0 f0		bne $8f4f			bne 	_I32SDLoop
.8f5f	7a		ply				ply 								; restore AY and exit
.8f60	68		pla				pla
.8f61	60		rts				rts
.8f62					DivideCheckSubtract:
.8f62	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f65	b0 04		bcs $8f6b			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f67	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; add it back in
.8f6a	18		clc				clc 								; and return False
.8f6b					_DCSExit:
.8f6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f6c					MulInteger:
.8f6c	fa		plx				plx
.8f6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f70	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f73	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f74	0a		asl a				asl 	a
.8f75	10 05		bpl $8f7c			bpl 	_NotRef
.8f77	48		pha				pha
.8f78	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f7b	68		pla				pla
.8f7c					_NotRef:
.8f7c	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f7d	30 0b		bmi $8f8a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f7f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f82	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f85	f0 06		beq $8f8d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f87	4c a5 94	jmp $94a5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f8a					_StringData:
.8f8a	4c 9a 9f	jmp $9f9a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f8d					_IntegerCode:
.8f8d	20 9a 8f	jsr $8f9a			jsr 	MultiplyShort
.8f90	c9 00		cmp #$00			cmp 	#0
.8f92	f0 05		beq $8f99			beq 	_MIExit
.8f94	a9 04		lda #$04		lda	#4
.8f96	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.8f99					_MIExit:
.8f99	60		rts				rts
.8f9a					MultiplyShort:
.8f9a	5a		phy				phy 								; save Y
.8f9b	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f9e	20 f8 9d	jsr $9df8			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fa1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa3					_I32MLoop:
.8fa3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa6	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fa9	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fac	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8faf	f0 28		beq $8fd9			beq 	_I32MExit 					; exit if zero
.8fb1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb4	29 01		and #$01			and 	#1
.8fb6	f0 0e		beq $8fc6			beq 	_I32MNoAdd
.8fb8	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fbb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fbe	10 06		bpl $8fc6			bpl 	_I32MNoAdd
.8fc0					_I32ShiftRight:
.8fc0	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift S[X] right
.8fc3	c8		iny				iny 								; increment shift count
.8fc4	80 0a		bra $8fd0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc6					_I32MNoAdd:
.8fc6	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fc9	70 f5		bvs $8fc0			bvs 	_I32ShiftRight 				; instead.
.8fcb	e8		inx				inx
.8fcc	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fcf	ca		dex				dex
.8fd0					_I32MShiftUpper:
.8fd0	e8		inx				inx 								; shift S[X+2] right
.8fd1	e8		inx				inx
.8fd2	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight
.8fd5	ca		dex				dex
.8fd6	ca		dex				dex
.8fd7	80 ca		bra $8fa3			bra 	_I32MLoop 					; try again.
.8fd9					_I32MExit:
.8fd9	20 df 8f	jsr $8fdf			jsr 	CalculateSign
.8fdc	98		tya				tya 								; shift in A
.8fdd	7a		ply				ply 								; restore Y and exit
.8fde	60		rts				rts
.8fdf					CalculateSign:
.8fdf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe2	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fe8	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fe9	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8fed					CompareStrings:
.8fed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8ff0	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff3	29 10		and #$10			and 	#NSBIsString
.8ff5	f0 2c		beq $9023			beq 	_CSTypeError
.8ff7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ffa	85 36		sta $36				sta 	zTemp0
.8ffc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8fff	85 37		sta $37				sta 	zTemp0+1
.9001	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9004	85 38		sta $38				sta 	zTemp1
.9006	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9009	85 39		sta $39				sta 	zTemp1+1
.900b	5a		phy				phy 								; save Y so we can access strings
.900c	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.900e					_CSLoop:
.900e	c8		iny				iny
.900f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9011	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9013	d0 06		bne $901b			bne 	_CSDifferent
.9015	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9017	d0 f5		bne $900e			bne 	_CSLoop 					; still comparing
.9019					_CSExit:
.9019	7a		ply				ply 								; reached end, return zero in A from EOS
.901a	60		rts				rts
.901b					_CSDifferent:
.901b	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.901d	90 fa		bcc $9019			bcc		_CSExit
.901f	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9021	80 f6		bra $9019			bra 	_CSExit
.9023					_CSTypeError:
.9023	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9026					ShiftLeft:
.9026	38		sec				sec
.9027	80 01		bra $902a			bra 	ShiftMain
.9029					ShiftRight:
.9029	18		clc				clc
.902a					ShiftMain:
.902a	fa		plx				plx 								; restore X
.902b	08		php				php 								; save direction
.902c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.902f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9032	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9033	0a		asl a				asl 	a
.9034	10 05		bpl $903b			bpl 	_NotRef
.9036	48		pha				pha
.9037	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903a	68		pla				pla
.903b					_NotRef:
.903b	0a		asl a				asl 	a
.903c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.903e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9041	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9044	f0 03		beq $9049			beq 	_IntegerCode 				; if clear, then we have two integers
.9046	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9049					_IntegerCode:
.9049	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.904c	29 e0		and #$e0			and 	#$E0
.904e	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9051	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9054	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9057	d0 13		bne $906c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9059					_SMLoop:
.9059	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.905c	30 11		bmi $906f			bmi 	_SMExit 					; exit if done.
.905e	28		plp				plp 								; restore direcition setting
.905f	08		php				php
.9060	90 05		bcc $9067			bcc 	_SMRight
.9062	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift left if CS
.9065	80 f2		bra $9059			bra 	_SMLoop
.9067					_SMRight:
.9067	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift right if CC
.906a	80 ed		bra $9059			bra 	_SMLoop
.906c					_SMExit0:
.906c	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; return zero.
.906f					_SMExit:
.906f	28		plp				plp 								; throw direction
.9070	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9071					AddTopTwoStack:
.9071	18		clc				clc
.9072	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9075	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9078	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.907b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.907e	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9081	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9084	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9087	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.908a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.908d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9090	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9093	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9096	60		rts				rts
.9097					SubTopTwoStack:
.9097	38		sec				sec
.9098	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.909b	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.909e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90a1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a4	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90aa	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90ad	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90b0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b6	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90b9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90bc	60		rts				rts
.90bd					AddInteger:
.90bd	fa		plx				plx
.90be	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90c1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c5	0a		asl a				asl 	a
.90c6	10 05		bpl $90cd			bpl 	_NotRef
.90c8	48		pha				pha
.90c9	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90cc	68		pla				pla
.90cd					_NotRef:
.90cd	0a		asl a				asl 	a 							; put MSB of type into A:7
.90ce	30 0b		bmi $90db			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90d0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d6	f0 06		beq $90de			beq 	_IntegerCode 				; if clear, then we have two integers
.90d8	4c 25 93	jmp $9325			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90db					_StringData:
.90db	4c 4d 8e	jmp $8e4d			jmp 	StringConcat							; at least one string - don't know both are strings.
.90de					_IntegerCode:
.90de					AddCode:
.90de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90e1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e4	10 8b		bpl $9071			bpl 	AddTopTwoStack
.90e6	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; do a physical subtraction
.90e9	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90ec	10 09		bpl $90f7			bpl 	_AddExit
.90ee	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f4	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f7					_AddExit:
.90f7	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; check for -0
.90fa	d0 03		bne $90ff			bne 	_AddNonZero
.90fc	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90ff					_AddNonZero:
.90ff	60		rts				rts
.9100					SubInteger:
.9100	fa		plx				plx
.9101	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9104	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9107	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9108	0a		asl a				asl 	a
.9109	10 05		bpl $9110			bpl 	_NotRef
.910b	48		pha				pha
.910c	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.910f	68		pla				pla
.9110					_NotRef:
.9110	0a		asl a				asl 	a 							; put MSB of type into A:7
.9111	30 0b		bmi $911e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9113	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9116	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9119	f0 06		beq $9121			beq 	_IntegerCode 				; if clear, then we have two integers
.911b	4c 2a 93	jmp $932a			jmp 	FloatingPointSub 							; otherwise at least one float.
.911e					_StringData:
.911e	4c 9a 9f	jmp $9f9a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9121					_IntegerCode:
.9121	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9124	49 80		eor #$80			eor 	#$80
.9126	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9129	80 b3		bra $90de			bra 	AddCode 					; and do the same code as add.
.912b					AndInteger:
.912b	fa		plx				plx
.912c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.912f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9132	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9133	0a		asl a				asl 	a
.9134	10 05		bpl $913b			bpl 	_NotRef
.9136	48		pha				pha
.9137	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.913a	68		pla				pla
.913b					_NotRef:
.913b	0a		asl a				asl 	a
.913c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9141	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9144	f0 03		beq $9149			beq 	_IntegerCode 				; if clear, then we have two integers
.9146	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9149					_IntegerCode:
.9149	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.914c	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.914f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9152	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9155	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9158	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.915b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.915e	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9161	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9164	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9167	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.916a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.916d	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9170	60		rts				rts
.9171					OraInteger:
.9171	fa		plx				plx
.9172	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9175	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9178	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9179	0a		asl a				asl 	a
.917a	10 05		bpl $9181			bpl 	_NotRef
.917c	48		pha				pha
.917d	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9180	68		pla				pla
.9181					_NotRef:
.9181	0a		asl a				asl 	a
.9182	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9184	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9187	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.918a	f0 03		beq $918f			beq 	_IntegerCode 				; if clear, then we have two integers
.918c	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.918f					_IntegerCode:
.918f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9192	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9195	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9198	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.919b	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.919e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91a1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a4	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91aa	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91ad	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91b0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b3	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b6	60		rts				rts
.91b7					EorInteger:
.91b7	fa		plx				plx
.91b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91bb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91be	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bf	0a		asl a				asl 	a
.91c0	10 05		bpl $91c7			bpl 	_NotRef
.91c2	48		pha				pha
.91c3	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c6	68		pla				pla
.91c7					_NotRef:
.91c7	0a		asl a				asl 	a
.91c8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91ca	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91cd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91d0	f0 03		beq $91d5			beq 	_IntegerCode 				; if clear, then we have two integers
.91d2	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.91d5					_IntegerCode:
.91d5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91d8	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91de	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91e1	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e7	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91ea	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91ed	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91f0	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f3	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91f9	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91fc	60		rts				rts
.91fd					WordIndirect:
.91fd	fa		plx				plx
.91fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9201	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9204	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9205	0a		asl a				asl 	a
.9206	10 05		bpl $920d			bpl 	_NotRef
.9208	48		pha				pha
.9209	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920c	68		pla				pla
.920d					_NotRef:
.920d	0a		asl a				asl 	a
.920e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9210	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9213	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9216	f0 03		beq $921b			beq 	_IntegerCode 				; if clear, then we have two integers
.9218	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.921b					_IntegerCode:
.921b	20 de 90	jsr $90de			jsr 	AddCode 					; add the two values
.921e	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9220	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9223	60		rts				rts
.9224					ByteIndirect:
.9224	fa		plx				plx
.9225	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9228	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.922b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.922c	0a		asl a				asl 	a
.922d	10 05		bpl $9234			bpl 	_NotRef
.922f	48		pha				pha
.9230	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9233	68		pla				pla
.9234					_NotRef:
.9234	0a		asl a				asl 	a
.9235	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9237	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.923a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.923d	f0 03		beq $9242			beq 	_IntegerCode 				; if clear, then we have two integers
.923f	4c 90 9f	jmp $9f90			jmp 	TypeError 					; anything else, type mismatch.
.9242					_IntegerCode:
.9242	20 de 90	jsr $90de			jsr 	AddCode 					; add the two values
.9245	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9247	9d 00 04	sta $0400,x			sta 	NSStatus,x
.924a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.924b					LCLConvertInt16:
.924b	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.924e	8e 10 04	stx $0410			stx 	NSMantissa1
.9251	9c 18 04	stz $0418			stz 	NSMantissa2
.9254	9c 20 04	stz $0420			stz 	NSMantissa3
.9257	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.925a	a2 00		ldx #$00			ldx 	#0 							; stack level
.925c	a9 0a		lda #$0a			lda 	#10 						; base
.925e	80 00		bra $9260			bra 	ConvertInt32
.9260					ConvertInt32:
.9260	5a		phy				phy
.9261	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9263	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9266	10 08		bpl $9270			bpl 	_CI32NotNeg
.9268	48		pha				pha
.9269	a9 2d		lda #$2d			lda 	#'-'
.926b	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.926e	c8		iny				iny
.926f	68		pla				pla
.9270					_CI32NotNeg:
.9270	20 7e 92	jsr $927e			jsr 	_CI32DivideConvert 			; recursive conversion
.9273	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9275	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9278	7a		ply				ply
.9279	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.927b	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.927d	60		rts				rts
.927e					_CI32DivideConvert:
.927e	e8		inx				inx 								; write to next slot up
.927f	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9282	ca		dex				dex
.9283	20 22 8f	jsr $8f22			jsr 	Int32Divide 				; divide
.9286	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9289	48		pha				pha
.928a	20 d1 8e	jsr $8ed1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.928d	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero ?
.9290	f0 06		beq $9298			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9292	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9295	20 7e 92	jsr $927e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9298					_CI32NoRecurse:
.9298	68		pla				pla 								; remainder
.9299	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.929b	90 02		bcc $929f			bcc 	_CI32NotHex
.929d	69 26		adc #$26			adc 	#6+32
.929f					_CI32NotHex:
.929f	69 30		adc #$30			adc 	#48
.92a1	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92a4	c8		iny				iny
.92a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a6					PrecedenceLevel:
>92a6	04					.byte	 4	; $00 <<
>92a7	02					.byte	 2	; $01 <=
>92a8	02					.byte	 2	; $02 <>
>92a9	00					.byte	 0	; $03 !!3
>92aa	00					.byte	 0	; $04 ><
>92ab	02					.byte	 2	; $05 >=
>92ac	04					.byte	 4	; $06 >>
>92ad	00					.byte	 0	; $07 !!7
>92ae	00					.byte	 0	; $08 !!8
>92af	00					.byte	 0	; $09 !!9
>92b0	00					.byte	 0	; $0a !!10
>92b1	00					.byte	 0	; $0b !!11
>92b2	00					.byte	 0	; $0c !!12
>92b3	00					.byte	 0	; $0d !!13
>92b4	00					.byte	 0	; $0e !!14
>92b5	00					.byte	 0	; $0f !!15
>92b6	00					.byte	 0	; $10 @
>92b7	00					.byte	 0	; $11 !!17
>92b8	00					.byte	 0	; $12 !!18
>92b9	00					.byte	 0	; $13 [
>92ba	04					.byte	 4	; $14 \
>92bb	00					.byte	 0	; $15 ]
>92bc	01					.byte	 1	; $16 ^
>92bd	00					.byte	 0	; $17 _
>92be	00					.byte	 0	; $18 `
>92bf	00					.byte	 0	; $19 !!25
>92c0	00					.byte	 0	; $1a !!26
>92c1	00					.byte	 0	; $1b {
>92c2	01					.byte	 1	; $1c |
>92c3	00					.byte	 0	; $1d }
>92c4	00					.byte	 0	; $1e ~
>92c5	00					.byte	 0	; $1f [7m<7F>[m
>92c6	00					.byte	 0	; $20
>92c7	05					.byte	 5	; $21 !
>92c8	00					.byte	 0	; $22 "
>92c9	00					.byte	 0	; $23 #
>92ca	05					.byte	 5	; $24 $
>92cb	04					.byte	 4	; $25 %
>92cc	01					.byte	 1	; $26 &
>92cd	00					.byte	 0	; $27 '
>92ce	00					.byte	 0	; $28 (
>92cf	00					.byte	 0	; $29 )
>92d0	04					.byte	 4	; $2a *
>92d1	03					.byte	 3	; $2b +
>92d2	00					.byte	 0	; $2c ,
>92d3	03					.byte	 3	; $2d -
>92d4	00					.byte	 0	; $2e .
>92d5	04					.byte	 4	; $2f /
>92d6	00					.byte	 0	; $30 0
>92d7	00					.byte	 0	; $31 1
>92d8	00					.byte	 0	; $32 2
>92d9	00					.byte	 0	; $33 3
>92da	00					.byte	 0	; $34 4
>92db	00					.byte	 0	; $35 5
>92dc	00					.byte	 0	; $36 6
>92dd	00					.byte	 0	; $37 7
>92de	00					.byte	 0	; $38 8
>92df	00					.byte	 0	; $39 9
>92e0	00					.byte	 0	; $3a :
>92e1	00					.byte	 0	; $3b ;
>92e2	02					.byte	 2	; $3c <
>92e3	02					.byte	 2	; $3d =
>92e4	02					.byte	 2	; $3e >
>92e5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e6					EvaluateExpressionAt0:
.92e6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92e8					EvaluateExpression:
.92e8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92ea					EvaluateExpressionAtPrecedence:
.92ea	48		pha				pha 								; save precedence level
.92eb	20 c2 97	jsr $97c2			jsr 	EvaluateTerm 				; evaluate term into level X.
.92ee	68		pla				pla 								; restore precedence level.
.92ef					_EXPRLoop:
.92ef	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92f1	b1 30		lda ($30),y			lda 	(codePtr),y
.92f3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f5	b0 25		bcs $931c			bcs 	_EXPRExit
.92f7	da		phx				phx 								; read the operator precedence
.92f8	aa		tax				tax
.92f9	bd a6 92	lda $92a6,x			lda 	PrecedenceLevel,x
.92fc	fa		plx				plx
.92fd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92ff	f0 1b		beq $931c			beq 	_EXPRExit
.9301	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9303	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9305	c5 37		cmp $37				cmp 	zTemp0+1
.9307	b0 13		bcs $931c			bcs		_EXPRExit 					; if current >= operator exit
.9309	48		pha				pha 								; save current precedence.
.930a	b1 30		lda ($30),y			lda 	(codePtr),y
.930c	c8		iny				iny
.930d	48		pha				pha
.930e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9310	e8		inx				inx 								; work out the right hand side.
.9311	20 ea 92	jsr $92ea			jsr 	EvaluateExpressionAtPrecedence
.9314	ca		dex				dex
.9315	68		pla				pla 								; get operator, call the code.
.9316	20 1f 93	jsr $931f			jsr 	_EXPRCaller
.9319	68		pla				pla 								; restore precedence level
.931a	80 d3		bra $92ef			bra 	_EXPRLoop 					; and go round.
.931c					_EXPRExit:
.931c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.931e	60		rts				rts
.931f					_EXPRCaller:
.931f	da		phx				phx 								; save on stack, first thing is to restore it
.9320	0a		asl a				asl 	a 							; double so can use vectors into X
.9321	aa		tax				tax
.9322	7c 66 8a	jmp ($8a66,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9325					FloatingPointAdd:
.9325	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.9328	80 0b		bra $9335			bra 	FloatAdd
.932a					FloatingPointSub:
.932a	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.932d					FloatSubtract:
.932d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9330	49 80		eor #$80			eor 	#$80
.9332	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9335					FloatAdd:
.9335	48		pha				pha
.9336	5a		phy				phy
.9337	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise S[X]
.933a	f0 5c		beq $9398			beq 	_FAReturn1
.933c	e8		inx				inx 								; normalise S[X+1]
.933d	20 df 94	jsr $94df			jsr 	NSNormalise
.9340	ca		dex				dex
.9341	c9 00		cmp #$00			cmp 	#0
.9343	f0 77		beq $93bc			beq 	_FAExit 					; if so, just return A
.9345	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9348	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.934b	f0 1b		beq $9368			beq 	_FAExponentsEqual
.934d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9350	a8		tay				tay
.9351	38		sec				sec 								; do a signed comparison of the exponents.
.9352	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9355	50 02		bvc $9359			bvc 	_FANoSignedChange
.9357	49 80		eor #$80			eor 	#$80
.9359					_FANoSignedChange:
.9359	29 80		and #$80			and 	#$80
.935b	10 03		bpl $9360			bpl 	_FAHaveMax
.935d	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9360					_FAHaveMax:
.9360	20 bf 93	jsr $93bf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9363	e8		inx				inx
.9364	20 bf 93	jsr $93bf			jsr 	_FAShiftToExponent
.9367	ca		dex				dex
.9368					_FAExponentsEqual:
.9368	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.936b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936e	30 10		bmi $9380			bmi 	_FADifferentSigns
.9370	20 71 90	jsr $9071			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9373	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9376	10 44		bpl $93bc			bpl 	_FAExit 					; if no, we are done.
.9378	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.937b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.937e	80 3c		bra $93bc			bra 	_FAExit
.9380					_FADifferentSigns:
.9380	20 97 90	jsr $9097			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9383	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9386	10 06		bpl $938e			bpl 	_FACheckZero 				; if no, check for -0
.9388	20 a8 9d	jsr $9da8			jsr 	NSMNegate 					; netate result
.938b	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.938e					_FACheckZero:
.938e	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero	 				; check for -0
.9391	d0 29		bne $93bc			bne 	_FAExit
.9393	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9396	80 24		bra $93bc			bra 	_FAExit
.9398					_FAReturn1:
.9398	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.939b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.939e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93aa	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93b0	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93b9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93bc					_FAExit:
.93bc	7a		ply				ply
.93bd	68		pla				pla
.93be	60		rts				rts
.93bf					_FAShiftToExponent:
.93bf					_FAShiftToExponent2:
.93bf	98		tya				tya 								; compare Y to exponent
.93c0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c3	f0 08		beq $93cd			beq 	_FASEExit 					; exit if so.
.93c5	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight	 			; shift the mantissa right
.93c8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93cb	80 f2		bra $93bf			bra 	_FAShiftToExponent2
.93cd					_FASEExit:
.93cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93ce					CompareFloat:
.93ce	20 2d 93	jsr $932d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93d1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d4	29 f8		and #$f8			and 	#$F8
.93d6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93d9	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93dc	f0 09		beq $93e7			beq 	_FCExit 					; zero, so approximately identical
.93de	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93e0	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e3	10 02		bpl $93e7			bpl 	_FCExit
.93e5					_FCNegative:
.93e5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e7					_FCExit:
.93e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93e8					FDivideCommand:
.93e8	fa		plx				plx	 								; restore stack position
.93e9	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.93ec					FloatDivide:
.93ec	48		pha				pha
.93ed	e8		inx				inx
.93ee	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93f1	ca		dex				dex
.93f2	c9 00		cmp #$00			cmp 	#0
.93f4	f0 20		beq $9416			beq 	_FDZero
.93f6	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f9	f0 19		beq $9414			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93fb	20 44 8f	jsr $8f44			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93fe	20 d1 8e	jsr $8ed1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9401	20 df 94	jsr $94df			jsr		NSNormalise 				; renormalise
.9404	20 df 8f	jsr $8fdf			jsr 	CalculateSign 				; calculate result sign
.9407	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.940a	38		sec				sec
.940b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.940e	38		sec				sec
.940f	e9 1e		sbc #$1e			sbc 	#30
.9411	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9414					_FDExit:
.9414	68		pla				pla
.9415	60		rts				rts
.9416					_FDZero:
.9416	a9 03		lda #$03		lda	#3
.9418	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.941b					FloatFractionalPart:
.941b	5a		phy				phy
.941c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.941f	29 7f		and #$7f			and 	#$7F
.9421	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9424	20 df 94	jsr $94df			jsr 	NSNormalise
.9427	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.942a	38		sec				sec
.942b	e9 e0		sbc #$e0			sbc 	#$E0
.942d	90 31		bcc $9460			bcc 	_FFPExit 					; already fractional
.942f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9431	b0 2a		bcs $945d			bcs 	_FFPZero
.9433	a8		tay				tay 								; put count to do in Y
.9434	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9437	20 62 94	jsr $9462			jsr 	_FFPPartial
.943a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.943d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9440	20 62 94	jsr $9462			jsr 	_FFPPartial
.9443	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9446	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9449	20 62 94	jsr $9462			jsr 	_FFPPartial
.944c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9452	20 62 94	jsr $9462			jsr 	_FFPPartial
.9455	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9458	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; zeroed check.
.945b	d0 03		bne $9460			bne 	_FFPExit
.945d					_FFPZero:
.945d	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9460					_FFPExit:
.9460	7a		ply				ply
.9461	60		rts				rts
.9462					_FFPPartial:
.9462	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9464	f0 17		beq $947d			beq 	_FFFPPExit
.9466	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9468	b0 0c		bcs $9476			bcs 	_FFFPPWholeByte
.946a	5a		phy				phy
.946b					_FFFPPLeft:
.946b	0a		asl a				asl 	a
.946c	88		dey				dey
.946d	d0 fc		bne $946b			bne 	_FFFPPLeft
.946f	7a		ply				ply
.9470					_FFFPPRight:
.9470	4a		lsr a				lsr 	a
.9471	88		dey				dey
.9472	d0 fc		bne $9470			bne 	_FFFPPRight
.9474	80 07		bra $947d			bra 	_FFFPPExit
.9476					_FFFPPWholeByte:
.9476	98		tya				tya 								; subtract 8 from count
.9477	38		sec				sec
.9478	e9 08		sbc #$08			sbc 	#8
.947a	a8		tay				tay
.947b	a9 00		lda #$00			lda 	#0 							; and clear all
.947d					_FFFPPExit:
.947d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.947e					FloatIntegerPart:
.947e	48		pha				pha
.947f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9482	f0 1f		beq $94a3			beq 	_FIPExit 					; if so do nothing
.9484	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; is it zero ?
.9487	f0 17		beq $94a0			beq 	_FIPZero 					; if so return zero.
.9489	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise
.948c	f0 12		beq $94a0			beq 	_FIPZero 					; normalised to zero, exit zero
.948e					_FIPShift:
.948e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9491	10 08		bpl $949b			bpl 	_FIPCheckZero
.9493	20 1f 9e	jsr $9e1f			jsr 	NSMShiftRight 				; shift mantissa right
.9496	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9499	80 f3		bra $948e			bra 	_FIPShift
.949b					_FIPCheckZero:
.949b	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; avoid -0 problem
.949e	d0 03		bne $94a3			bne 	_FIPExit 					; set to zero if mantissa zero.
.94a0					_FIPZero:
.94a0	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.94a3					_FIPExit:
.94a3	68		pla				pla
.94a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a5					FloatingPointMultiply:
.94a5	20 ce 94	jsr $94ce			jsr 	FloatPrepare 				; prepare for floats
.94a8					FloatMultiply:
.94a8	48		pha				pha
.94a9	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94ac	f0 1b		beq $94c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ae	e8		inx				inx
.94af	20 df 94	jsr $94df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b2	ca		dex				dex
.94b3	c9 00		cmp #$00			cmp 	#0
.94b5	f0 0f		beq $94c6			beq 	_FDSetZero
.94b7	20 9a 8f	jsr $8f9a			jsr 	MultiplyShort 				; calculate the result.
.94ba	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94bd	18		clc				clc
.94be	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94c1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c4	80 03		bra $94c9			bra 	_FDExit
.94c6					_FDSetZero:
.94c6	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; return 0
.94c9					_FDExit:
.94c9	20 df 94	jsr $94df			jsr 	NSNormalise 				; normalise the result
.94cc	68		pla				pla
.94cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94ce					FloatPrepare:
.94ce	20 01 96	jsr $9601			jsr 	DereferenceTopTwo 			; dereference the top two values
.94d1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d7	29 10		and #$10			and 	#NSBIsString
.94d9	d0 01		bne $94dc			bne 	_FDType
.94db	60		rts				rts
.94dc					_FDType:
.94dc	4c 90 9f	jmp $9f90			jmp 	TypeError
.94df					NSNormalise:
.94df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e2	29 80		and #$80			and 	#$80
.94e4	09 08		ora #$08			ora 	#NSTFloat
.94e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e9	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero exit
.94ec	d0 09		bne $94f7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94ee	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94f1	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f4	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f6	60		rts				rts
.94f7					_NSNormaliseOptimise:
.94f7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94fa	d0 22		bne $951e			bne 	_NSNormaliseLoop
.94fc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94ff	30 1d		bmi $951e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9501	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9504	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9507	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.950a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.950d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9510	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9513	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9516	38		sec				sec
.9517	e9 08		sbc #$08			sbc 	#8
.9519	9d 28 04	sta $0428,x			sta 	NSExponent,x
.951c	80 d9		bra $94f7			bra 	_NSNormaliseOptimise
.951e					_NSNormaliseLoop:
.951e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9521	70 08		bvs $952b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9523	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; shift mantissa left
.9526	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9529	80 f3		bra $951e			bra 	_NSNormaliseLoop
.952b					_NSNExit:
.952b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.952d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.952e					AssignNumber:
.952e	5a		phy				phy
.952f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9532	85 36		sta $36				sta 	zTemp0
.9534	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9537	85 37		sta $37				sta 	zTemp0+1
.9539	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.953c	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.953e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9541	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9543	c9 08		cmp #$08			cmp 	#NSTFloat
.9545	f0 2a		beq $9571			beq 	_ANFloat
.9547	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.954a	f0 05		beq $9551			beq		_ANNotFloat
.954c	e8		inx				inx
.954d	20 7e 94	jsr $947e			jsr 	FloatIntegerPart 			; make it an integer
.9550	ca		dex				dex
.9551					_ANNotFloat:
.9551	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9554	29 03		and #$03			and 	#3
.9556	d0 05		bne $955d			bne 	_ANByteWord
.9558	20 7d 95	jsr $957d			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.955b	80 1e		bra $957b			bra 	_ANExit
.955d					_ANByteWord:
.955d	48		pha				pha 								; save count
.955e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9561	92 36		sta ($36)			sta 	(zTemp0)
.9563	68		pla				pla
.9564	c9 01		cmp #$01			cmp	 	#1
.9566	f0 13		beq $957b			beq 	_ANExit
.9568	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.956b	a0 01		ldy #$01			ldy 	#1
.956d	91 36		sta ($36),y			sta 	(zTemp0),y
.956f	80 0a		bra $957b			bra 	_ANExit
.9571					_ANFloat:
.9571	20 7d 95	jsr $957d			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9574	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9577	a0 04		ldy #$04			ldy 	#4
.9579	91 36		sta ($36),y			sta 	(zTemp0),y
.957b					_ANExit:
.957b	7a		ply				ply
.957c	60		rts				rts
.957d					_ANCopy4PackSign:
.957d	a0 03		ldy #$03			ldy 	#3
.957f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9582	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9584	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9587	91 36		sta ($36),y			sta 	(zTemp0),y
.9589	88		dey				dey
.958a	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.958d	91 36		sta ($36),y			sta 	(zTemp0),y
.958f	88		dey				dey
.9590	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9593	91 36		sta ($36),y			sta 	(zTemp0),y
.9595	88		dey				dey
.9596	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9599	91 36		sta ($36),y			sta 	(zTemp0),y
.959b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.959c					AssignString:
.959c	5a		phy				phy
.959d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95a0	85 38		sta $38				sta 	zTemp1
.95a2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a5	85 39		sta $39				sta 	zTemp1+1
.95a7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95aa	85 36		sta $36				sta 	zTemp0
.95ac	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95af	85 37		sta $37				sta 	zTemp0+1
.95b1	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b5	f0 23		beq $95da			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b7	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95b8	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95ba	e9 02		sbc #$02			sbc 	#2
.95bc	85 3c		sta $3c				sta 	zsTemp
.95be	a0 01		ldy #$01			ldy 	#1
.95c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c2	e9 00		sbc #$00			sbc 	#0
.95c4	85 3d		sta $3d				sta 	zsTemp+1
.95c6	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95c8					_ASGetLength:
.95c8	c8		iny				iny
.95c9	b1 38		lda ($38),y			lda 	(zTemp1),y
.95cb	d0 fb		bne $95c8			bne 	_ASGetLength
.95cd	98		tya				tya 								; is this length <= current length
.95ce	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95d0	90 20		bcc $95f2			bcc 	_ASCopyString
.95d2	f0 1e		beq $95f2			beq 	_ASCopyString
.95d4	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d6	a0 01		ldy #$01			ldy 	#1
.95d8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95da					_ASNewStringRequired:
.95da	e8		inx				inx 								; concrete the new string.
.95db	20 5c a6	jsr $a65c			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95de	ca		dex				dex
.95df	18		clc				clc
.95e0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e3	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e5	92 36		sta ($36)			sta 	(zTemp0)
.95e7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ea	69 00		adc #$00			adc 	#0
.95ec	a0 01		ldy #$01			ldy 	#1
.95ee	91 36		sta ($36),y			sta 	(zTemp0),y
.95f0	80 0d		bra $95ff			bra 	_ASExit
.95f2					_ASCopyString:
.95f2	a0 00		ldy #$00			ldy 	#0
.95f4					_ASCopyLoop:
.95f4	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f6	c8		iny				iny
.95f7	c8		iny				iny
.95f8	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95fa	88		dey				dey
.95fb	c9 00		cmp #$00			cmp 	#0
.95fd	d0 f5		bne $95f4			bne 	_ASCopyLoop
.95ff					_ASExit:
.95ff	7a		ply				ply
.9600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9601					DereferenceTopTwo:
.9601	e8		inx				inx
.9602	20 06 96	jsr $9606			jsr 	Dereference 				; deref x+1
.9605	ca		dex				dex  								; falls through to deref x
.9606					Dereference:
.9606	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9609	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.960b	f0 57		beq $9664			beq 	_DRFExit 					; not a reference
.960d	5a		phy				phy
.960e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9611	85 36		sta $36				sta 	zTemp0
.9613	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9616	85 37		sta $37				sta 	zTemp0+1
.9618	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.961b	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.961d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9620	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9623	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9625	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9627	f0 0f		beq $9638			beq 	_DRFDereferenceTwo
.9629	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.962b	f0 39		beq $9666			beq 	_DRFFull
.962d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9630	29 03		and #$03			and 	#3
.9632	f0 32		beq $9666			beq 	_DRFFull 					; the whole word
.9634	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9636	f0 07		beq $963f			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9638					_DRFDereferenceTwo:
.9638	a0 01		ldy #$01			ldy 	#1
.963a	b1 36		lda ($36),y			lda 	(zTemp0),y
.963c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963f					_DRFClear23:
.963f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9642	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9645	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9648	29 18		and #$18			and 	#NSBTypeMask
.964a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.964d	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.964f	d0 12		bne $9663			bne 	_DRFNotString
.9651	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9654	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9657	d0 0a		bne $9663			bne 	_DRFNotString
.9659	a9 65		lda #$65			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.965b	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.965e	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9660	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9663					_DRFNotString
.9663	7a		ply				ply 								; restore Y and exit
.9664					_DRFExit:
.9664	60		rts				rts
.9665					_DRFNullString:
>9665	00						.byte 	0
.9666					_DRFFull:
.9666	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9668	b1 36		lda ($36),y			lda 	(zTemp0),y
.966a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966d	c8		iny				iny
.966e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9670	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9673	c8		iny				iny
.9674	b1 36		lda ($36),y			lda 	(zTemp0),y
.9676	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9679	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.967c	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.967f	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9681	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9684	f0 06		beq $968c			beq 	_DRFNoExponent
.9686	c8		iny				iny 								; if not, read the exponent as well.
.9687	b1 36		lda ($36),y			lda 	(zTemp0),y
.9689	9d 28 04	sta $0428,x			sta 	NSExponent,x
.968c					_DRFNoExponent:
.968c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.968f	10 0d		bpl $969e			bpl 	_DRFExit2 					; if not, then exit.
.9691	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9693	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9696	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9699	09 80		ora #$80			ora 	#NSBIsNegative
.969b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969e					_DRFExit2:
.969e	7a		ply				ply
.969f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96a0					EncodeNumberStart:
.96a0	38		sec				sec
.96a1	80 01		bra $96a4			bra 	EncodeNumberContinue+1
.96a3					EncodeNumberContinue:
.96a3	18		clc				clc
.96a4					EncodeNumber:
.96a4	08		php				php 								; save reset.
.96a5	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a7	f0 12		beq $96bb			beq 	_ENIsOkay
.96a9	c9 30		cmp #$30			cmp 	#"0"
.96ab	90 04		bcc $96b1			bcc 	_ENBadNumber
.96ad	c9 3a		cmp #$3a			cmp 	#"9"+1
.96af	90 0a		bcc $96bb			bcc 	_ENIsOkay
.96b1					_ENBadNumber:
.96b1	28		plp				plp 								; throw saved reset
.96b2	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b7	f0 7e		beq $9737			beq 	_ENConstructFinal
.96b9					_ENFail:
.96b9	18		clc				clc 								; not allowed
.96ba	60		rts				rts
.96bb					_ENIsOkay:
.96bb	28		plp				plp 								; are we restarting
.96bc	90 15		bcc $96d3			bcc 	_ENNoRestart
.96be					_ENStartEncode:
.96be	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96c0	f0 0c		beq $96ce			beq 	_ENFirstDP
.96c2	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c4	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.96c7	a9 01		lda #$01			lda 	#ESTA_Low
.96c9					_ENExitChange:
.96c9	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96cc	38		sec				sec
.96cd	60		rts				rts
.96ce					_ENFirstDP:
.96ce	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; clear integer part
.96d1	80 3f		bra $9712			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d3					_ENNoRestart:
.96d3	48		pha				pha 								; save on stack.
.96d4	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d7	c9 01		cmp #$01			cmp 	#ESTA_Low
.96d9	f0 09		beq $96e4			beq  	_ESTALowState
.96db	c9 02		cmp #$02			cmp 	#ESTA_High
.96dd	f0 29		beq $9708			beq 	_ESTAHighState
.96df	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96e1	f0 3b		beq $971e			beq 	_ESTADecimalState
>96e3	db						.byte 	$DB 						; causes a break in the emulator
.96e4					_ESTALowState:
.96e4	68		pla				pla 								; get value back
.96e5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e7	f0 29		beq $9712			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96e9	29 0f		and #$0f			and 	#15 						; make digit
.96eb	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96ee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96f1	0a		asl a				asl 	a
.96f2	0a		asl a				asl 	a
.96f3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f6	0a		asl a				asl 	a
.96f7	6d 86 04	adc $0486			adc 	DigitTemp
.96fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96fd	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96ff	90 05		bcc $9706			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9701	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9703	8d 85 04	sta $0485			sta 	EncodeState
.9706					_ESTANoSwitch:
.9706	38		sec				sec
.9707	60		rts				rts
.9708					_ESTAHighState:
.9708	68		pla				pla 								; get value back
.9709	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.970b	f0 05		beq $9712			beq 	_ESTASwitchFloat
.970d	20 71 97	jsr $9771			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9710	38		sec				sec
.9711	60		rts				rts
.9712					_ESTASwitchFloat:
.9712	9c 87 04	stz $0487			stz 	DecimalCount
.9715	e8		inx				inx 								; zero the decimal additive.
.9716	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9719	ca		dex				dex
.971a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.971c	80 ab		bra $96c9			bra 	_ENExitChange
.971e					_ESTADecimalState:
.971e	68		pla				pla 								; digit.
.971f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9721	f0 96		beq $96b9			beq 	_ENFail
.9723	e8		inx				inx 								; put digit into fractional part of X+1
.9724	20 71 97	jsr $9771			jsr 	ESTAShiftDigitIntoMantissa
.9727	ca		dex				dex
.9728	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.972b	ad 87 04	lda $0487			lda 	DecimalCount
.972e	c9 0b		cmp #$0b			cmp 	#11
.9730	f0 02		beq $9734			beq 	_ESTADSFail
.9732	38		sec				sec
.9733	60		rts				rts
.9734					_ESTADSFail:
.9734	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.9737					_ENConstructFinal:
.9737	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.973a	f0 33		beq $976f			beq 	_ENCFExit 					; no decimals
.973c	5a		phy				phy
.973d	0a		asl a				asl 	a 							; x 4 and CLC
.973e	0a		asl a				asl 	a
.973f	6d 87 04	adc $0487			adc 	DecimalCount
.9742	a8		tay				tay
.9743	b9 4a 9f	lda $9f4a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9746	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9749	b9 4b 9f	lda $9f4b,y			lda 	DecimalScalarTable-5+1,y
.974c	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.974f	b9 4c 9f	lda $9f4c,y			lda 	DecimalScalarTable-5+2,y
.9752	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9755	b9 4d 9f	lda $9f4d,y			lda 	DecimalScalarTable-5+3,y
.9758	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.975b	b9 4e 9f	lda $9f4e,y			lda 	DecimalScalarTable-5+4,y
.975e	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9761	a9 08		lda #$08			lda 	#NSTFloat
.9763	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9766	7a		ply				ply
.9767	e8		inx				inx 								; multiply decimal const by decimal scalar
.9768	20 a8 94	jsr $94a8			jsr 	FloatMultiply
.976b	ca		dex				dex
.976c	20 35 93	jsr $9335			jsr 	FloatAdd 					; add to integer part.
.976f					_ENCFExit:
.976f	18		clc				clc 								; reject the digit.
.9770	60		rts				rts
.9771					ESTAShiftDigitIntoMantissa:
.9771	29 0f		and #$0f			and 	#15 						; save digit
.9773	48		pha				pha
.9774	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9777	48		pha				pha
.9778	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.977b	48		pha				pha
.977c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.977f	48		pha				pha
.9780	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9783	48		pha				pha
.9784	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 2
.9787	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 4
.978a	18		clc				clc 								; pop mantissa and add
.978b	68		pla				pla
.978c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9792	68		pla				pla
.9793	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9796	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9799	68		pla				pla
.979a	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.979d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97a0	68		pla				pla
.97a1	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a7	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 10
.97aa	68		pla				pla 								; add digit
.97ab	18		clc				clc
.97ac	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b2	90 0d		bcc $97c1			bcc 	_ESTASDExit
.97b4	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b7	d0 08		bne $97c1			bne 	_ESTASDExit
.97b9	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97bc	d0 03		bne $97c1			bne 	_ESTASDExit
.97be	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97c1					_ESTASDExit:
.97c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c2					EvaluateTerm:
.97c2	b1 30		lda ($30),y			lda 	(codePtr),y
.97c4	30 18		bmi $97de			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c6	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97c8	b0 6f		bcs $9839			bcs 	_ETVariable
.97ca	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97cc	90 6e		bcc $983c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ce	c9 3a		cmp #$3a			cmp 	#'9'+1
.97d0	b0 6a		bcs $983c			bcs 	_ETPuncUnary
.97d2	20 a0 96	jsr $96a0			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d5					_ETNumber:
.97d5	c8		iny				iny 								; keep encoding until we have the numbers
.97d6	b1 30		lda ($30),y			lda 	(codePtr),y
.97d8	20 a3 96	jsr $96a3			jsr 	EncodeNumberContinue
.97db	b0 f8		bcs $97d5			bcs 	_ETNumber 					; go back if accepted.
.97dd	60		rts				rts
.97de					_ETCheckUnary:
.97de	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97e0	f0 41		beq $9823			beq 	_ETString
.97e2	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e4	f0 12		beq $97f8			beq 	_ETHexConstant
.97e6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97e8	90 0b		bcc $97f5			bcc 	_ETSyntaxError
.97ea	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1
.97ec	b0 07		bcs $97f5			bcs 	_ETSyntaxError
.97ee	da		phx				phx 								; push X on the stack
.97ef	0a		asl a				asl 	a 							; put vector x 2 into X
.97f0	aa		tax				tax
.97f1	c8		iny				iny 								; consume unary function token
.97f2	7c e6 8a	jmp ($8ae6,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f5					_ETSyntaxError:
.97f5	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.97f8					_ETHexConstant:
.97f8	c8		iny				iny 								; skip #
.97f9	c8		iny				iny 								; skip count
.97fa	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; clear result
.97fd					_ETHLoop:
.97fd	b1 30		lda ($30),y			lda 	(codePtr),y
.97ff	c8		iny				iny 								; and consume
.9800	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9802	f0 1e		beq $9822			beq 	_ETHExit
.9804	48		pha				pha 								; save on stack.
.9805	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 2
.9808	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 4
.980b	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 8
.980e	20 11 9e	jsr $9e11			jsr 	NSMShiftLeft 				; x 16
.9811	68		pla				pla 								; ASCII
.9812	c9 41		cmp #$41			cmp 	#'A'
.9814	90 02		bcc $9818			bcc 	_ETHNotChar
.9816	e9 07		sbc #$07			sbc 	#7
.9818					_ETHNotChar:
.9818	29 0f		and #$0f			and 	#15 						; digit now
.981a	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.981d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9820	80 db		bra $97fd			bra 	_ETHLoop 					; go round.
.9822					_ETHExit:
.9822	60		rts				rts
.9823					_ETString:
.9823	c8		iny				iny 								; look at length
.9824	b1 30		lda ($30),y			lda 	(codePtr),y
.9826	48		pha				pha
.9827	c8		iny				iny 								; first character
.9828	20 f4 a1	jsr $a1f4			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.982b	68		pla				pla 								; restore count and save
.982c	85 36		sta $36				sta 	zTemp0
.982e	98		tya				tya 								; add length to Y to skip it.
.982f	18		clc				clc
.9830	65 36		adc $36				adc 	zTemp0
.9832	a8		tay				tay
.9833	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9835	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9838	60		rts				rts
.9839					_ETVariable:
.9839	4c 93 98	jmp $9893			jmp 	VariableHandler
.983c					_ETPuncUnary:
.983c	c8		iny				iny 								; consume the unary character
.983d	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.983f	f0 2d		beq $986e			beq 	_ETUnaryNegate
.9841	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9843	f0 39		beq $987e			beq 	_ETDereference
.9845	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9847	f0 43		beq $988c			beq 	_ETParenthesis
.9849	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.984b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.984d	f0 06		beq $9855			beq 	_ETIndirection
.984f	e6 36		inc $36				inc 	zTemp0
.9851	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9853	d0 a0		bne $97f5			bne 	_ETSyntaxError
.9855					_ETIndirection:
.9855	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9857	1a		inc a				inc 	a
.9858	48		pha				pha
.9859	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.985c	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it.
.985f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9862	d0 07		bne $986b			bne 	_ETTypeMismatch
.9864	68		pla				pla 								; indirection 1-2
.9865	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9867	9d 00 04	sta $0400,x			sta 	NSStatus,x
.986a	60		rts				rts
.986b					_ETTypeMismatch:
.986b	4c 90 9f	jmp $9f90			jmp 	TypeError
.986e					_ETUnaryNegate:
.986e	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.9871	20 06 96	jsr $9606			jsr 	Dereference 				; dereference it.
.9874	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9877	29 10		and #$10			and 	#NSTString
.9879	d0 f0		bne $986b			bne 	_ETTypeMismatch
.987b	4c a8 9d	jmp $9da8			jmp 	NSMNegate  					; just toggles the sign bit.
.987e					_ETDereference:
.987e	20 c2 97	jsr $97c2			jsr 	EvaluateTerm				; evaluate the term
.9881	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9884	29 20		and #$20			and 	#NSBIsReference
.9886	f0 e3		beq $986b			beq 	_ETTypeMismatch
.9888	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.988b	60		rts				rts
.988c					_ETParenthesis:
.988c	20 e8 92	jsr $92e8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.988f	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check for )
.9892	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9893					VariableHandler:
.9893	b1 30		lda ($30),y			lda 	(codePtr),y
.9895	18		clc				clc
.9896	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9898	85 37		sta $37				sta 	zTemp0+1
.989a	c8		iny				iny
.989b	b1 30		lda ($30),y			lda 	(codePtr),y
.989d	85 36		sta $36				sta 	zTemp0
.989f	c8		iny				iny
.98a0	18		clc				clc									; copy variable address+3 to mantissa
.98a1	69 03		adc #$03			adc 	#3
.98a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a6	a5 37		lda $37				lda 	zTemp0+1
.98a8	69 00		adc #$00			adc 	#0
.98aa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ad	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98b0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b3	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b6	5a		phy				phy
.98b7	a0 02		ldy #$02			ldy 	#2 							; read type
.98b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.98bb	7a		ply				ply
.98bc	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98be	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98c0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c3	29 04		and #$04			and 	#NSBIsArray
.98c5	d0 01		bne $98c8			bne 	_VHArray
.98c7	60		rts				rts
.98c8					_VHArray:
.98c8	e8		inx				inx
.98c9	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98cc	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ce	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98d1	b1 30		lda ($30),y			lda 	(codePtr),y
.98d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d5	d0 06		bne $98dd			bne 	_VHNoSecondIndex
.98d7	c8		iny				iny 								; skip the comma
.98d8	e8		inx				inx
.98d9	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98dc	ca		dex				dex
.98dd					_VHNoSecondIndex:
.98dd	ca		dex				dex 								; set X back.
.98de	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; and check the right bracket.
.98e1	5a		phy				phy 								; save position
.98e2	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e6	f0 6b		beq $9953			beq 	_VHBadIndex
.98e8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98eb	85 3e		sta $3e				sta 	zaTemp
.98ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f0	85 3f		sta $3f				sta 	zaTemp+1
.98f2	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f6	f0 02		beq $98fa			beq 	_VHHas2Mask
.98f8	a9 ff		lda #$ff			lda 	#$FF
.98fa					_VHHas2Mask:
.98fa	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98fd	f0 54		beq $9953			beq 	_VHBadIndex
.98ff	0a		asl a				asl 	a 							; carry will be set if a second index
.9900	90 09		bcc $990b			bcc 	_VHCheckFirstIndex
.9902	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9904	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9906	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9909	90 48		bcc $9953			bcc 	_VHBadIndex
.990b					_VHCheckFirstIndex:
.990b	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.990d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990f	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9912	90 3f		bcc $9953			bcc 	_VHBadIndex
.9914	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9916	64 37		stz $37				stz 	zTemp0+1
.9918	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.991b	30 0f		bmi $992c			bmi 	_VHNoMultiply
.991d	da		phx				phx
.991e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9921	48		pha				pha
.9922	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9924	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9926	1a		inc a				inc 	a 							; add 1 for zero base
.9927	fa		plx				plx
.9928	20 91 9d	jsr $9d91			jsr 	Multiply8x8 				; calculate -> Z0
.992b	fa		plx				plx
.992c					_VHNoMultiply:
.992c	18		clc				clc
.992d	a5 36		lda $36				lda 	zTemp0
.992f	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9932	85 36		sta $36				sta 	zTemp0
.9934	a5 37		lda $37				lda 	zTemp0+1
.9936	69 00		adc #$00			adc 	#0
.9938	85 37		sta $37				sta 	zTemp0+1
.993a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.993d	20 d7 84	jsr $84d7			jsr 	ScaleByBaseType
.9940	18		clc				clc
.9941	b2 3e		lda ($3e)			lda 	(zaTemp)
.9943	65 36		adc $36				adc 	zTemp0
.9945	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9948	a0 01		ldy #$01			ldy 	#1
.994a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.994c	65 37		adc $37				adc 	zTemp0+1
.994e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9951	7a		ply				ply 								; restore position
.9952	60		rts				rts
.9953					_VHBadIndex:
.9953	a9 17		lda #$17		lda	#23
.9955	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9958					AbsUnary:
.9958	fa		plx				plx 								; restore stack pos
.9959	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.995c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.995f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9962	29 7f		and #$7f			and 	#$7F
.9964	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9967	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9968					AllocUnary:
.9968	fa		plx				plx 								; restore stack pos
.9969	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger		; get bytes required.
.996c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.996f	da		phx				phx 								; save X/Y
.9970	5a		phy				phy
.9971	8a		txa				txa 								; copy X into Y
.9972	a8		tay				tay
.9973	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9976	aa		tax				tax
.9977	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.997a	20 87 99	jsr $9987			jsr 	AllocateXABytes 			; allocate memory
.997d	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9980	8a		txa				txa
.9981	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9984	7a		ply				ply
.9985	fa		plx				plx
.9986	60		rts				rts
.9987					AllocateXABytes:
.9987	5a		phy				phy
.9988	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.998b	84 36		sty $36				sty 	zTemp0
.998d	5a		phy				phy
.998e	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9991	84 37		sty $37				sty 	zTemp0+1
.9993	5a		phy				phy
.9994	18		clc				clc 								; add to low memory pointer
.9995	6d 8c 04	adc $048c			adc 	lowMemPtr
.9998	8d 8c 04	sta $048c			sta 	lowMemPtr
.999b	8a		txa				txa
.999c	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.999f	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a2	b0 2f		bcs $99d3			bcs 	CISSMemory
.99a4	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a7					_ClearMemory:
.99a7	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99aa	c5 36		cmp $36				cmp 	zTemp0
.99ac	d0 07		bne $99b5			bne 	_CMClearNext
.99ae	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99b1	c5 37		cmp $37				cmp 	zTemp0+1
.99b3	f0 0c		beq $99c1			beq 	_CMExit
.99b5					_CMClearNext:
.99b5	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b7	92 36		sta ($36)			sta 	(zTemp0)
.99b9	e6 36		inc $36				inc 	zTemp0
.99bb	d0 ea		bne $99a7			bne 	_ClearMemory
.99bd	e6 37		inc $37				inc		zTemp0+1
.99bf	80 e6		bra $99a7			bra 	_ClearMemory
.99c1					_CMExit:
.99c1	fa		plx				plx
.99c2	68		pla				pla
.99c3	7a		ply				ply
.99c4	60		rts				rts
.99c5					CheckIdentifierStringSpace:
.99c5	48		pha				pha
.99c6	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99c9	18		clc				clc
.99ca	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99cc	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99cf	b0 02		bcs $99d3			bcs 	CISSMemory
.99d1	68		pla				pla
.99d2	60		rts				rts
.99d3					CISSMemory:
.99d3	a9 06		lda #$06		lda	#6
.99d5	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99d8					AscUnary:
.99d8	fa		plx				plx 								; restore stack pos
.99d9	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.99dc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99de	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.99e1	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.99e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e5					FracUnary:
.99e5	fa		plx				plx 								; restore stack pos
.99e6	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.99e9	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.99ec	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99ef	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99f1	f0 04		beq $99f7			beq 	_IUZero
.99f3	20 1b 94	jsr $941b			jsr 	FloatFractionalPart
.99f6	60		rts				rts
.99f7					_IUZero:
.99f7	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.99fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99fb					IntUnary:
.99fb	fa		plx				plx 								; restore stack pos
.99fc	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.99ff	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a02	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a05	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a07	f0 03		beq $9a0c			beq 	_IUExit
.9a09	20 7e 94	jsr $947e			jsr 	FloatIntegerPart
.9a0c					_IUExit:
.9a0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a0d					LenUnary:
.9a0d	fa		plx				plx 								; restore stack pos
.9a0e	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9a11	5a		phy				phy
.9a12	a0 00		ldy #$00			ldy 	#0 							; find length
.9a14					_LenFind:
.9a14	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a16	f0 06		beq $9a1e			beq 	_LenExit
.9a18	c8		iny				iny
.9a19	d0 f9		bne $9a14			bne 	_LenFind
.9a1b	4c 8b 9f	jmp $9f8b			jmp 	RangeError 					; string > 255
.9a1e					_LenExit:
.9a1e	98		tya				tya
.9a1f	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9a22	7a		ply				ply
.9a23	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a27					Unary_Min:
.9a27	a9 01		lda #$01			lda 	#1
.9a29	80 02		bra $9a2d			bra 	UnaryMinMaxMain
.9a2b					Unary_Max:
.9a2b	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a2d					UnaryMinMaxMain:
.9a2d	fa		plx				plx 								; get index on number stack
.9a2e	48		pha				pha 								; save comparator
.9a2f	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get the first value.
.9a32					_UMMMLoop:
.9a32	b1 30		lda ($30),y			lda 	(codePtr),y
.9a34	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a36	f0 22		beq $9a5a			beq 	_UMMMDone
.9a38	20 28 8d	jsr $8d28			jsr 	CheckComma 					; must be a comma
.9a3b	e8		inx				inx
.9a3c	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue
.9a3f	ca		dex				dex
.9a40	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a43	e8		inx				inx
.9a44	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a47	e8		inx				inx
.9a48	20 f1 8d	jsr $8df1			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a4b	ca		dex				dex
.9a4c	ca		dex				dex
.9a4d	85 36		sta $36				sta 	zTemp0 						; save required result
.9a4f	68		pla				pla 								; get and save comparator
.9a50	48		pha				pha
.9a51	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a53	d0 dd		bne $9a32			bne 	_UMMMLoop
.9a55	20 5d 9a	jsr $9a5d			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a58	80 d8		bra $9a32			bra 	_UMMMLoop
.9a5a					_UMMMDone:
.9a5a	68		pla				pla 								; throw the comparator
.9a5b	c8		iny				iny 								; skip )
.9a5c	60		rts				rts
.9a5d					ExpCopyAboveDown:
.9a5d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a63	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a66	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a69	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a6c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a72	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a75	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a78	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7b	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a7e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a82					Unary_Not:
.9a82	fa		plx				plx
.9a83	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; get integer
.9a86	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9a89	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; zero mantissa ?
.9a8c	f0 04		beq $9a92			beq 	_NotZero
.9a8e	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.9a91	60		rts				rts
.9a92					_NotZero:
.9a92	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.9a95					_UNBad:
.9a95	4c 95 9f	jmp $9f95			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a98					Unary_Random:
.9a98	fa		plx				plx
.9a99	20 17 9b	jsr $9b17			jsr 	Random32Bit 				; get a random number
.9a9c	20 fc 9a	jsr $9afc			jsr 	URCopyToMantissa  			; put in mantissa
.9a9f	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa1	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa3	f0 08		beq $9aad			beq 	_URNoModulus
.9aa5	e8		inx				inx
.9aa6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aa9	ca		dex				dex
.9aaa	20 15 8f	jsr $8f15			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aad					_URNoModulus:
.9aad	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ab0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab3	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9ab6	60		rts				rts
.9ab7					Unary_Rnd:
.9ab7	fa		plx				plx
.9ab8	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; number to use.
.9abb	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; closing bracket
.9abe	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ac1	f0 2b		beq $9aee			beq 	_URCopySeed
.9ac3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac6	10 23		bpl $9aeb			bpl 	_URDontSeed
.9ac8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9acb	49 17		eor #$17			eor 	#$17
.9acd	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ad0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad3	49 a5		eor #$a5			eor 	#$A5
.9ad5	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ad8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9adb	49 c2		eor #$c2			eor 	#$C2
.9add	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ae0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae3	49 9d		eor #$9d			eor 	#$9D
.9ae5	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ae8	20 17 9b	jsr $9b17			jsr 	Random32Bit
.9aeb					_URDontSeed:
.9aeb	20 17 9b	jsr $9b17			jsr 	Random32Bit 				; generate a number.
.9aee					_URCopySeed:
.9aee	20 fc 9a	jsr $9afc			jsr 	URCopyToMantissa 			; copy into mantissa
.9af1	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af3	8d 28 04	sta $0428			sta 	NSExponent
.9af6	a9 08		lda #$08			lda 	#NSTFloat
.9af8	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9afb	60		rts				rts
.9afc					URCopyToMantissa:
.9afc	ad 88 04	lda $0488			lda 	RandomSeed+0
.9aff	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b02	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b08	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b0b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0e	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b11	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b13	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b16	60		rts				rts
.9b17					Random32Bit:
.9b17	5a		phy				phy
.9b18	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b1a	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b1d	d0 03		bne $9b22			bne 	_Random1
.9b1f	a8		tay				tay 								; if so do it 256 times
.9b20	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b22					_Random1:
.9b22	0a		asl a				asl 	a 							; LSFR RNG
.9b23	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b26	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b29	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b2c	90 02		bcc $9b30			bcc 	_Random2
.9b2e	49 c5		eor #$c5			eor 	#$C5
.9b30					_Random2:
.9b30	88		dey				dey
.9b31	d0 ef		bne $9b22			bne 	_Random1
.9b33	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b36	7a		ply				ply
.9b37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b38					SgnUnary:
.9b38	fa		plx				plx 								; restore stack pos
.9b39	20 25 9d	jsr $9d25			jsr 	EvaluateNumber 				; get a float or int
.9b3c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9b3f	20 2c 9e	jsr $9e2c			jsr 	NSMIsZero 					; if zero
.9b42	f0 10		beq $9b54			beq 	_SGZero  					; return Int Zero
.9b44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b47	48		pha				pha
.9b48	a9 01		lda #$01			lda 	#1 							; set to 1
.9b4a	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9b4d	68		pla				pla
.9b4e	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b53	60		rts				rts
.9b54	20 fc 9d	jsr $9dfc	_SGZero:jsr 	NSMSetZero
.9b57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b58					ValUnary:
.9b58	fa		plx				plx 								; restore stack pos
.9b59	20 6e 9b	jsr $9b6e			jsr 	ValMainCode 				; do the main val() code
.9b5c	b0 01		bcs $9b5f			bcs 	_VUError 					; couldn't convert
.9b5e	60		rts				rts
.9b5f					_VUError:
.9b5f	4c 90 9f	jmp $9f90			jmp 	TypeError
.9b62					IsValUnary:
.9b62	fa		plx				plx 								; restore stack pos
.9b63	20 6e 9b	jsr $9b6e			jsr 	ValMainCode 				; do the main val() code
.9b66	b0 03		bcs $9b6b			bcs 	_VUBad
.9b68	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.9b6b					_VUBad:
.9b6b	4c b2 8d	jmp $8db2			jmp 	ReturnFalse
.9b6e					ValMainCode:
.9b6e	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9b71	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check right bracket present
.9b74	5a		phy				phy
.9b75	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b77	f0 17		beq $9b90			beq 	_VMCFail2
.9b79	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b7b	48		pha				pha 								; save first character
.9b7c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b7e	d0 01		bne $9b81			bne 	_VMCStart
.9b80	c8		iny				iny 								; skip over -
.9b81					_VMCStart:
.9b81	38		sec				sec 								; initialise first time round.
.9b82					_VMCNext:
.9b82	c8		iny				iny 								; pre-increment
.9b83	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b85	f0 0c		beq $9b93			beq 	_VMCSuccess 				; successful.
.9b87	20 a4 96	jsr $96a4			jsr 	EncodeNumber 				; send it to the number-builder
.9b8a	90 03		bcc $9b8f			bcc 	_VMCFail 					; if failed, give up.
.9b8c	18		clc				clc 								; next time round, countinue
.9b8d	80 f3		bra $9b82			bra 	_VMCNext
.9b8f					_VMCFail:
.9b8f	68		pla				pla
.9b90					_VMCFail2:
.9b90	7a		ply				ply
.9b91	38		sec				sec
.9b92	60		rts				rts
.9b93					_VMCSuccess:
.9b93	a9 00		lda #$00			lda 	#0 							; construct final
.9b95	20 a4 96	jsr $96a4			jsr 	EncodeNumber
.9b98	68		pla				pla
.9b99	c9 2d		cmp #$2d			cmp 	#"-"
.9b9b	d0 03		bne $9ba0			bne 	_VMCNotNegative
.9b9d	20 a8 9d	jsr $9da8			jsr		NSMNegate
.9ba0					_VMCNotNegative:
.9ba0	7a		ply				ply
.9ba1	18		clc				clc
.9ba2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba3					ChrUnary:
.9ba3	fa		plx				plx 								; restore stack pos
.9ba4	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger			; get value
.9ba7	48		pha				pha
.9ba8	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9bab	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bad	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate
.9bb0	68		pla				pla 								; write number to it
.9bb1	20 1b a7	jsr $a71b			jsr 	StringTempWrite
.9bb4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb5					SpcUnary:
.9bb5	fa		plx				plx 								; restore stack pos
.9bb6	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger			; get value
.9bb9	5a		phy				phy
.9bba	48		pha				pha 								; save count
.9bbb	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate
.9bbe	7a		ply				ply 								; to do count in Y
.9bbf					_SpcLoop:
.9bbf	c0 00		cpy #$00			cpy 	#0
.9bc1	f0 08		beq $9bcb			beq 	_SpcExit
.9bc3	a9 20		lda #$20			lda 	#32
.9bc5	20 1b a7	jsr $a71b			jsr 	StringTempWrite
.9bc8	88		dey				dey
.9bc9	80 f4		bra $9bbf			bra 	_SPCLoop
.9bcb					_SpcExit:
.9bcb	7a		ply				ply
.9bcc	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.9bcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bd0					Unary_Str:
.9bd0	fa		plx				plx
.9bd1	20 25 9d	jsr $9d25			jsr 	EvaluateNumber  			; get number
.9bd4	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; closing bracket
.9bd7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bd9	20 f2 9b	jsr $9bf2			jsr 	ConvertNumberToString 		; do the conversion.
.9bdc	a9 21		lda #$21			lda		#33 						; create buffer
.9bde	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate 			; allocate memory
.9be1	da		phx				phx
.9be2	a2 00		ldx #$00			ldx 	#0
.9be4					_USCopy:
.9be4	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9be7	20 1b a7	jsr $a71b			jsr 	StringTempWrite
.9bea	e8		inx				inx
.9beb	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bee	d0 f4		bne $9be4			bne 	_USCopy
.9bf0	fa		plx				plx
.9bf1	60		rts				rts
.9bf2					ConvertNumberToString:
.9bf2	5a		phy				phy 								; save code position
.9bf3	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf6	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bf9	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bfc	10 0a		bpl $9c08			bpl 	_CNTSNotNegative
.9bfe	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c00	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c03	a9 2d		lda #$2d			lda 	#"-"
.9c05	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer
.9c08					_CNTSNotNegative:
.9c08	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c0b	f0 15		beq $9c22			beq 	_CNTSNotFloat
.9c0d	e8		inx				inx 								; round up
.9c0e	a9 01		lda #$01			lda 	#1
.9c10	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9c13	ca		dex				dex
.9c14	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c17	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c1a	a9 08		lda #$08			lda 	#NSTFloat
.9c1c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c1f	20 35 93	jsr $9335			jsr 	FloatAdd
.9c22					_CNTSNotFloat:
.9c22	20 50 9c	jsr $9c50			jsr 	MakePlusTwoString
.9c25	20 1b 94	jsr $941b			jsr 	FloatFractionalPart 		; get the fractional part
.9c28	20 df 94	jsr $94df			jsr 	NSNormalise					; normalise , exit if zero
.9c2b	f0 21		beq $9c4e			beq 	_CNTSExit
.9c2d	a9 2e		lda #$2e			lda 	#"."
.9c2f	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer 			; write decimal place
.9c32					_CNTSDecimal:
.9c32	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c35	30 17		bmi $9c4e			bmi 	_CNTSExit
.9c37	e8		inx				inx 								; x 10.0
.9c38	a9 0a		lda #$0a			lda 	#10
.9c3a	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.9c3d	a9 08		lda #$08			lda 	#NSTFloat
.9c3f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c42	ca		dex				dex
.9c43	20 a8 94	jsr $94a8			jsr 	FloatMultiply
.9c46	20 50 9c	jsr $9c50			jsr 	MakePlusTwoString
.9c49	20 1b 94	jsr $941b			jsr 	FloatFractionalPart 		; get the fractional part
.9c4c	80 e4		bra $9c32			bra 	_CNTSDecimal 				; keep going.
.9c4e					_CNTSExit:
.9c4e	7a		ply				ply
.9c4f	60		rts				rts
.9c50					MakePlusTwoString:
.9c50	da		phx				phx
.9c51	20 d3 9d	jsr $9dd3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c54	e8		inx				inx 								; access it
.9c55	e8		inx				inx
.9c56	20 7e 94	jsr $947e			jsr 	FloatIntegerPart 			; make it an integer
.9c59	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c5b	20 60 92	jsr $9260			jsr 	ConvertInt32
.9c5e	a2 00		ldx #$00			ldx	 	#0
.9c60					_MPTSCopy:
.9c60	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c63	20 6e 9c	jsr $9c6e			jsr 	WriteDecimalBuffer
.9c66	e8		inx				inx
.9c67	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c6a	d0 f4		bne $9c60			bne 	_MPTSCopy
.9c6c	fa		plx				plx
.9c6d	60		rts				rts
.9c6e					WriteDecimalBuffer:
.9c6e	da		phx				phx
.9c6f	ae 95 04	ldx $0495			ldx 	dbOffset
.9c72	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c75	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c78	ee 95 04	inc $0495			inc 	dbOffset
.9c7b	fa		plx				plx
.9c7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c7d					Unary_Left:
.9c7d	fa		plx				plx
.9c7e	18		clc				clc 								; only one parameter
.9c7f	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9c82	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c85	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c88	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c8b	80 2c		bra $9cb9			bra 	SubstringMain
.9c8d					Unary_Right:
.9c8d	fa		plx				plx
.9c8e	18		clc				clc 								; only one parameter
.9c8f	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9c92	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c95	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c98	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c9b	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c9e	b0 02		bcs $9ca2			bcs 	_URNotUnderflow
.9ca0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca2					_URNotUnderFlow:
.9ca2	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca5	80 12		bra $9cb9			bra 	SubStringMain
.9ca7					Unary_Mid:
.9ca7	fa		plx				plx
.9ca8	38		sec				sec 								; two parameters
.9ca9	20 f4 9c	jsr $9cf4			jsr 	SubstringInitial 			; set up.
.9cac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9caf	f0 05		beq $9cb6			beq 	_UMError
.9cb1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb4	80 03		bra $9cb9			bra 	SubStringMain
.9cb6					_UMError:
.9cb6	4c 95 9f	jmp $9f95			jmp 	ArgumentError
.9cb9					SubStringMain:
.9cb9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cbc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cbf	b0 2d		bcs $9cee			bcs 	_SSMNull 					; if so, return an empty string.
.9cc1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc4	f0 28		beq $9cee			beq 	_SSMNull 					; return empty string.
.9cc6	18		clc				clc 								; add the offset +1 to the address and
.9cc7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cca	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ccd	85 36		sta $36				sta 	zTemp0
.9ccf	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd2	69 00		adc #$00			adc 	#0
.9cd4	85 37		sta $37				sta 	zTemp0+1
.9cd6					_SSMNoCarry:
.9cd6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cd9	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate 			; allocate that many characters
.9cdc	5a		phy				phy 								; save Y
.9cdd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cdf					_SSMCopy:
.9cdf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ce1	f0 09		beq $9cec			beq 	_SSMEString 				; no more to copy
.9ce3	20 1b a7	jsr $a71b			jsr 	StringTempWrite 			; and write it out.
.9ce6	c8		iny				iny
.9ce7	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cea	d0 f3		bne $9cdf			bne 	_SSMCopy
.9cec					_SSMEString:
.9cec	7a		ply				ply
.9ced					_SSMExit:
.9ced	60		rts				rts
.9cee					_SSMNull:
.9cee	a9 00		lda #$00			lda 	#0
.9cf0	20 dd a6	jsr $a6dd			jsr 	StringTempAllocate
.9cf3	60		rts				rts
.9cf4					SubstringInitial:
.9cf4	da		phx				phx 								; save initial stack position
.9cf5	08		php				php 								; save carry on stack indicating 2 parameters
.9cf6	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get a string
.9cf9	5a		phy				phy 								; calculate length to exponent.
.9cfa	a0 ff		ldy #$ff			ldy 	#$FF
.9cfc					_SIFindLength:
.9cfc	c8		iny				iny
.9cfd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cff	d0 fb		bne $9cfc			bne 	_SIFindLength
.9d01	98		tya				tya
.9d02	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d05	7a		ply				ply
.9d06	e8		inx				inx
.9d07	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma next
.9d0a	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get next parameter
.9d0d	28		plp				plp 								; is it the last parameter ?
.9d0e	90 07		bcc $9d17			bcc 	_SSIExit 					; if so, exit.
.9d10	e8		inx				inx
.9d11	20 28 8d	jsr $8d28			jsr 	CheckComma 					; comma next
.9d14	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get last parameter
.9d17					_SSIExit:
.9d17	fa		plx				plx
.9d18	20 20 8d	jsr $8d20			jsr 	CheckRightBracket 			; check closing bracket
.9d1b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d1c					EvaluateValue:
.9d1c	48		pha				pha
.9d1d	20 e8 92	jsr $92e8			jsr		EvaluateExpression 			; expression
.9d20	20 06 96	jsr $9606			jsr 	Dereference					; derefernce it
.9d23	68		pla				pla
.9d24	60		rts				rts
.9d25					EvaluateNumber:
.9d25	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value
.9d28	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d2b	29 10		and #$10			and 	#NSBIsString
.9d2d	d0 16		bne $9d45			bne 	HelperTypeError
.9d2f	60		rts				rts
.9d30					EvaluateString:
.9d30	20 1c 9d	jsr $9d1c			jsr 	EvaluateValue 				; get a value
.9d33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d36	29 10		and #$10			and 	#NSBIsString
.9d38	f0 0b		beq $9d45			beq 	HelperTypeError
.9d3a					CopyAddressToTemp0:
.9d3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d3d	85 36		sta $36				sta 	zTemp0
.9d3f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d42	85 37		sta $37				sta 	zTemp0+1
.9d44	60		rts				rts
.9d45					HelperTypeError:
.9d45	4c 90 9f	jmp $9f90			jmp 	TypeError
.9d48					EvaluateInteger:
.9d48	20 25 9d	jsr $9d25			jsr 	EvaluateNumber
.9d4b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d4e	d0 0a		bne $9d5a			bne 	HelperValueError 			; if not, it's a float.
.9d50	60		rts				rts
.9d51					EvaluateUnsignedInteger:
.9d51	20 48 9d	jsr $9d48			jsr 	EvaluateInteger 			; check integer is +ve
.9d54	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d57	30 01		bmi $9d5a			bmi 	HelperValueError
.9d59	60		rts				rts
.9d5a					HelperValueError:
.9d5a	4c 95 9f	jmp $9f95			jmp 	ArgumentError
.9d5d					Evaluate16BitInteger:
.9d5d	20 51 9d	jsr $9d51			jsr	 	EvaluateUnsignedInteger		; get integer
.9d60	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d63	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d66	d0 f2		bne $9d5a			bne 	HelperValueError
.9d68	60		rts				rts
.9d69					Evaluate16BitIntegerSigned:
.9d69	20 48 9d	jsr $9d48			jsr	 	EvaluateInteger				; get integer
.9d6c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d72	d0 e6		bne $9d5a			bne 	HelperValueError
.9d74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d77	10 03		bpl $9d7c			bpl 	_EISNotSigned
.9d79	20 b1 9d	jsr $9db1			jsr 	NSMNegateMantissa
.9d7c					_EISNotSigned:
.9d7c	60		rts				rts
.9d7d					Evaluate8BitInteger:
.9d7d	20 51 9d	jsr $9d51			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d80	d0 d8		bne $9d5a			bne 	HelperValueError
.9d82	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d85	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d88	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d8b	d0 cd		bne $9d5a			bne 	HelperValueError
.9d8d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d91					Multiply8x8:
.9d91	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d92	85 36		sta $36			  	sta 	zTemp0
.9d94	86 37		stx $37				stx 	zTemp0+1
.9d96	a9 00		lda #$00			lda 	#0
.9d98	a2 08		ldx #$08			ldx 	#8
.9d9a					_M88Loop:
.9d9a	90 03		bcc $9d9f			bcc 	_M88NoAdd
.9d9c	18		clc				clc
.9d9d	65 37		adc $37				adc 	zTemp0+1
.9d9f					_M88NoAdd:
.9d9f	6a		ror a				ror 	a
.9da0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da3	d0 f5		bne $9d9a			bne 	_M88Loop
.9da5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da8					NSMNegate:
.9da8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dab	49 80		eor #$80			eor 	#NSBIsNegative
.9dad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db0	60		rts				rts
.9db1					NSMNegateMantissa:
.9db1	38		sec				sec
.9db2	a9 00		lda #$00			lda 	#0
.9db4	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dba	a9 00		lda #$00			lda 	#0
.9dbc	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc2	a9 00		lda #$00			lda 	#0
.9dc4	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dca	a9 00		lda #$00			lda 	#0
.9dcc	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dcf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd2	60		rts				rts
.9dd3					NSMShiftUpTwo:
.9dd3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ddc	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ddf	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de2	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de8	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9deb	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9dee	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9df1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df4	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df7	60		rts				rts
.9df8					NSMSetZeroMantissaOnly:
.9df8	a9 00		lda #$00			lda 	#0
.9dfa	80 08		bra $9e04			bra 	NSMSetMantissa
.9dfc					NSMSetZero:
.9dfc	a9 00		lda #$00			lda 	#0
.9dfe					NSMSetByte:
.9dfe	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e01	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e04					NSMSetMantissa:
.9e04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e07	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e0a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e10	60		rts				rts
.9e11					NSMShiftLeft:
.9e11	18		clc				clc
.9e12					NSMRotateLeft:
.9e12	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e15	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e18	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e1b	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1e	60		rts				rts
.9e1f					NSMShiftRight:
.9e1f	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e22	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e25	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e28	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e2b	60		rts				rts
.9e2c					NSMIsZero:
.9e2c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2f	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e32	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e35	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e39					Assemble_ora:
.9e39	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e3c	01					.byte $01
.9e3d					Assemble_and:
.9e3d	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e40	21					.byte $21
.9e41					Assemble_eor:
.9e41	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e44	41					.byte $41
.9e45					Assemble_adc:
.9e45	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e48	61					.byte $61
.9e49					Assemble_sta:
.9e49	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e4c	81					.byte $81
.9e4d					Assemble_lda:
.9e4d	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e50	a1					.byte $a1
.9e51					Assemble_cmp:
.9e51	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e54	c1					.byte $c1
.9e55					Assemble_sbc:
.9e55	20 66 80	jsr $8066		jsr	AssembleGroup1
>9e58	e1					.byte $e1
.9e59					Assemble_asl:
.9e59	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e5c	02					.byte $02
>9e5d	75					.byte $75
.9e5e					Assemble_rol:
.9e5e	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e61	22					.byte $22
>9e62	75					.byte $75
.9e63					Assemble_lsr:
.9e63	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e66	42					.byte $42
>9e67	75					.byte $75
.9e68					Assemble_ror:
.9e68	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e6b	62					.byte $62
>9e6c	75					.byte $75
.9e6d					Assemble_stx:
.9e6d	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e70	82					.byte $82
>9e71	50					.byte $50
.9e72					Assemble_ldx:
.9e72	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e75	a2					.byte $a2
>9e76	d0					.byte $d0
.9e77					Assemble_dec:
.9e77	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e7a	c2					.byte $c2
>9e7b	55					.byte $55
.9e7c					Assemble_inc:
.9e7c	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e7f	e2					.byte $e2
>9e80	55					.byte $55
.9e81					Assemble_stz:
.9e81	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e84	60					.byte $60
>9e85	44					.byte $44
.9e86					Assemble_bit:
.9e86	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e89	20					.byte $20
>9e8a	55					.byte $55
.9e8b					Assemble_sty:
.9e8b	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e8e	80					.byte $80
>9e8f	54					.byte $54
.9e90					Assemble_ldy:
.9e90	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e93	a0					.byte $a0
>9e94	d5					.byte $d5
.9e95					Assemble_cpy:
.9e95	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e98	c0					.byte $c0
>9e99	d4					.byte $d4
.9e9a					Assemble_cpx:
.9e9a	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9e9d	e0					.byte $e0
>9e9e	d0					.byte $d0
.9e9f					Assemble_tsb:
.9e9f	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9ea2	00					.byte $00
>9ea3	50					.byte $50
.9ea4					Assemble_trb:
.9ea4	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9ea7	10					.byte $10
>9ea8	50					.byte $50
.9ea9					Assemble_jsr:
.9ea9	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9eac	14					.byte $14
>9ead	10					.byte $10
.9eae					Assemble_jmp:
.9eae	20 6d 80	jsr $806d		jsr	AssembleGroup2
>9eb1	40					.byte $40
>9eb2	10					.byte $10
.9eb3					Assemble_bpl:
.9eb3	20 be 80	jsr $80be		jsr	AssembleGroup3
>9eb6	10					.byte $10
.9eb7					Assemble_bmi:
.9eb7	20 be 80	jsr $80be		jsr	AssembleGroup3
>9eba	30					.byte $30
.9ebb					Assemble_bvc:
.9ebb	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ebe	50					.byte $50
.9ebf					Assemble_bvs:
.9ebf	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ec2	70					.byte $70
.9ec3					Assemble_bcc:
.9ec3	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ec6	90					.byte $90
.9ec7					Assemble_bcs:
.9ec7	20 be 80	jsr $80be		jsr	AssembleGroup3
>9eca	b0					.byte $b0
.9ecb					Assemble_bne:
.9ecb	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ece	d0					.byte $d0
.9ecf					Assemble_beq:
.9ecf	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ed2	f0					.byte $f0
.9ed3					Assemble_bra:
.9ed3	20 be 80	jsr $80be		jsr	AssembleGroup3
>9ed6	80					.byte $80
.9ed7					Assemble_brk:
.9ed7	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9eda	00					.byte $00
.9edb					Assemble_php:
.9edb	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9ede	08					.byte $08
.9edf					Assemble_clc:
.9edf	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9ee2	18					.byte $18
.9ee3					Assemble_plp:
.9ee3	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9ee6	28					.byte $28
.9ee7					Assemble_sec:
.9ee7	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9eea	38					.byte $38
.9eeb					Assemble_rti:
.9eeb	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9eee	40					.byte $40
.9eef					Assemble_pha:
.9eef	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9ef2	48					.byte $48
.9ef3					Assemble_cli:
.9ef3	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9ef6	58					.byte $58
.9ef7					Assemble_phy:
.9ef7	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9efa	5a					.byte $5a
.9efb					Assemble_rts:
.9efb	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9efe	60					.byte $60
.9eff					Assemble_pla:
.9eff	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f02	68					.byte $68
.9f03					Assemble_sei:
.9f03	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f06	78					.byte $78
.9f07					Assemble_ply:
.9f07	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f0a	7a					.byte $7a
.9f0b					Assemble_dey:
.9f0b	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f0e	88					.byte $88
.9f0f					Assemble_txa:
.9f0f	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f12	8a					.byte $8a
.9f13					Assemble_tya:
.9f13	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f16	98					.byte $98
.9f17					Assemble_txs:
.9f17	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f1a	9a					.byte $9a
.9f1b					Assemble_tay:
.9f1b	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f1e	a8					.byte $a8
.9f1f					Assemble_tax:
.9f1f	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f22	aa					.byte $aa
.9f23					Assemble_clv:
.9f23	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f26	b8					.byte $b8
.9f27					Assemble_tsx:
.9f27	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f2a	ba					.byte $ba
.9f2b					Assemble_iny:
.9f2b	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f2e	c8					.byte $c8
.9f2f					Assemble_dex:
.9f2f	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f32	ca					.byte $ca
.9f33					Assemble_cld:
.9f33	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f36	d8					.byte $d8
.9f37					Assemble_phx:
.9f37	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f3a	da					.byte $da
.9f3b					Assemble_stp:
.9f3b	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f3e	db					.byte $db
.9f3f					Assemble_inx:
.9f3f	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f42	e8					.byte $e8
.9f43					Assemble_nop:
.9f43	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f46	ea					.byte $ea
.9f47					Assemble_sed:
.9f47	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f4a	f8					.byte $f8
.9f4b					Assemble_plx:
.9f4b	20 f4 80	jsr $80f4		jsr	AssembleGroup4
>9f4e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f4f					DecimalScalarTable:
>9f4f	66 66 66 66				.dword $66666666 ; 0.1
>9f53	de					.byte $de
>9f54	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f58	db					.byte $db
>9f59	4c 37 89 41				.dword $4189374c ; 0.001
>9f5d	d8					.byte $d8
>9f5e	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f62	d4					.byte $d4
>9f63	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f67	d1					.byte $d1
>9f68	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f6c	ce					.byte $ce
>9f6d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f71	ca					.byte $ca
>9f72	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f76	c7					.byte $c7
>9f77	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f7b	c4					.byte $c4
>9f7c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f80	c0					.byte $c0
>9f81	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f85	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f86					SyntaxError:
.9f86	a9 02		lda #$02		lda	#2
.9f88	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f8b					RangeError:
.9f8b	a9 04		lda #$04		lda	#4
.9f8d	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f90					TypeError:
.9f90	a9 05		lda #$05		lda	#5
.9f92	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f95					ArgumentError:
.9f95	a9 07		lda #$07		lda	#7
.9f97	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f9a					NotDoneError:
.9f9a	a9 0c		lda #$0c		lda	#12
.9f9c	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.9f9f					ErrorText:
>9f9f	42 72 65 61 6b 00			.text	"Break",0
>9fa5	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fad	72 72 6f 72 00
>9fb2	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fba	20 62 79 20 7a 65 72 6f 00
>9fc3	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fcb	61 6e 67 65 00
>9fd0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fd8	6d 61 74 63 68 00
>9fde	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe6	65 6d 6f 72 79 00
>9fec	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff4	61 72 67 75 6d 65 6e 74 00
>9ffd	53 74 6f 70 00				.text	"Stop",0
>a002	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a00a	6f 6f 20 6c 6f 6e 67 00
>a012	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a01a	6e 20 66 61 69 6c 65 64 00
>a023	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a02b	61 74 61 00
>a02f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a037	65 6e 74 65 64 00
>a03d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a045	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a051	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a059	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a066	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a06e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a07b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a083	68 6f 75 74 20 57 68 69 6c 65 00
>a08e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a096	68 6f 75 74 20 46 6f 72 00
>a09f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a7	61 63 6b 20 66 75 6c 6c 00
>a0b0	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0b8	75 63 74 75 72 65 00
>a0bf	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c7	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0dc	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0ea	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f2	7a 65 00
>a0f5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0fd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a105	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3351."
>a10d	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>a11d	2e 20 42 75 69 6c 64 20 33 33 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12a					MemoryDeleteLine:
.a12a	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a12d	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a12f	a8		tay				tay
.a130					_MDDLLoop:
.a130	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a132	92 30		sta ($30)			sta 	(codePtr)
.a134	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a136	c5 3a		cmp $3a				cmp 	zTemp2
.a138	d0 07		bne $a141			bne 	_MDLDLNext
.a13a	a5 31		lda $31				lda 	codePtr+1
.a13c	c5 3b		cmp $3b				cmp 	zTemp2+1
.a13e	d0 01		bne $a141			bne 	_MDLDLNext
.a140					_MDDLExit:
.a140	60		rts				rts
.a141					_MDLDLNext:
.a141	e6 30		inc $30				inc 	codePtr						; next byte
.a143	d0 eb		bne $a130			bne 	_MDDLLoop
.a145	e6 31		inc $31				inc 	codePtr+1
.a147	80 e7		bra $a130			bra 	_MDDLLoop
.a149					IMemoryFindEnd:
.a149	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14b	85 3a		sta $3a				sta 	0+zTemp2
.a14d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a14f	85 3b		sta $3b				sta 	1+zTemp2
.a151					_MDLFELoop:
.a151	b2 3a		lda ($3a)			lda 	(zTemp2)
.a153	f0 0b		beq $a160			beq 	_MDLFEExit
.a155	18		clc				clc
.a156	65 3a		adc $3a				adc 	zTemp2
.a158	85 3a		sta $3a				sta 	zTemp2
.a15a	90 f5		bcc $a151			bcc 	_MDLFELoop
.a15c	e6 3b		inc $3b				inc 	zTemp2+1
.a15e	80 f1		bra $a151			bra 	_MDLFELoop
.a160					_MDLFEExit:
.a160	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a161					MemoryInsertLine:
.a161	08		php				php
.a162	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a165	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a167	1a		inc a				inc 	a
.a168	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16a	b0 36		bcs $a1a2			bcs 	_MDLIError
.a16c	28		plp				plp
.a16d	90 08		bcc $a177			bcc 	_MDLIFound
.a16f	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a171	85 30		sta $30				sta 	codePtr
.a173	a5 3b		lda $3b				lda 	zTemp2+1
.a175	85 31		sta $31				sta 	codePtr+1
.a177					_MDLIFound:
.a177	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17a	a8		tay				tay
.a17b					_MDLIInsert:
.a17b	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a17d	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a17f	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a181	c5 3a		cmp $3a				cmp 	zTemp2
.a183	d0 06		bne $a18b			bne 	_MDLINext
.a185	a5 31		lda $31				lda 	codePtr+1
.a187	c5 3b		cmp $3b				cmp 	zTemp2+1
.a189	f0 0a		beq $a195			beq 	_MDLIHaveSpace
.a18b					_MDLINext:
.a18b	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a18d	d0 02		bne $a191			bne 	_MDLINoBorrow
.a18f	c6 3b		dec $3b				dec 	zTemp2+1
.a191					_MDLINoBorrow:
.a191	c6 3a		dec $3a				dec 	zTemp2
.a193	80 e6		bra $a17b			bra 	_MDLIInsert
.a195					_MDLIHaveSpace:
.a195	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a198	88		dey				dey 								; from offset-1 to 0
.a199					_MDLICopy:
.a199	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a19c	91 30		sta ($30),y			sta 	(codePtr),y
.a19e	88		dey				dey
.a19f	10 f8		bpl $a199			bpl 	_MDLICopy
.a1a1	60		rts				rts
.a1a2					_MDLIError:
.a1a2	a9 06		lda #$06		lda	#6
.a1a4	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a1a7					MDLAppendLine:
.a1a7	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1a9	85 36		sta $36				sta 	zTemp0
.a1ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ad	85 38		sta $38				sta 	0+zTemp1
.a1af	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b1	85 39		sta $39				sta 	1+zTemp1
.a1b3	b2 38		lda ($38)			lda 	(zTemp1)
.a1b5	d0 0a		bne $a1c1			bne 	_MDLANoInitialise
.a1b7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b9	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1bc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1be	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1c1					_MDLANoInitialise:
.a1c1	18		clc				clc
.a1c2	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c5	85 38		sta $38				sta 	zTemp1
.a1c7	72 36		adc ($36)			adc 	(zTemp0)
.a1c9	8d 2b 06	sta $062b			sta 	AppendPointer
.a1cc	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1cf	85 39		sta $39				sta 	zTemp1+1
.a1d1	69 00		adc #$00			adc 	#0
.a1d3	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1d6	a0 00		ldy #$00			ldy 	#0
.a1d8					_MDLACopy:
.a1d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1da	91 38		sta ($38),y			sta 	(zTemp1),y
.a1dc	c8		iny				iny
.a1dd	98		tya				tya
.a1de	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e0	d0 f6		bne $a1d8			bne 	_MDLACopy
.a1e2	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e6	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1e7					MemoryNew:
.a1e7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1e9	85 30		sta $30				sta 	codePtr
.a1eb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1ed	85 31		sta $31				sta 	codePtr+1
.a1ef	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f1	92 30		sta ($30)			sta 	(codePtr)
.a1f3	60		rts				rts
.a1f4					MemoryInline:
.a1f4	98		tya				tya 								; put address into stack,x
.a1f5	18		clc				clc
.a1f6	65 30		adc $30				adc 	codePtr
.a1f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fb	a5 31		lda $31				lda 	codePtr+1
.a1fd	69 00		adc #$00			adc 	#0
.a1ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a202	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a205	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a208	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a209					MemorySearch:
.a209	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20b	86 37		stx $37				stx 	zTemp0+1
.a20d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a20f	85 30		sta $30				sta 	codePtr
.a211	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a213	85 31		sta $31				sta 	codePtr+1
.a215					_MTAXLoop:
.a215	b2 30		lda ($30)			lda 	(codePtr)
.a217	18		clc				clc
.a218	f0 21		beq $a23b			beq 	_MTAXExit 					; reached end, exit with CC.
.a21a	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a21c	b1 30		lda ($30),y			lda 	(codePtr),y
.a21e	38		sec				sec
.a21f	e5 36		sbc $36				sbc 	zTemp0
.a221	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a223	c8		iny				iny 								; do the MSB
.a224	b1 30		lda ($30),y			lda 	(codePtr),y
.a226	e5 37		sbc $37				sbc 	zTemp0+1
.a228	05 38		ora $38				ora 	zTemp1
.a22a	f0 0f		beq $a23b			beq 	_MTAXExit	 				; found
.a22c	b0 0d		bcs $a23b			bcs 	_MTAXExit 					; current < required exit
.a22e	18		clc				clc
.a22f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a231	65 30		adc $30				adc 	codePtr
.a233	85 30		sta $30				sta 	codePtr
.a235	90 02		bcc $a239			bcc 	_CREExit
.a237	e6 31		inc $31				inc 	codePtr+1
.a239					_CREExit:
.a239	80 da		bra $a215			bra 	_MTAXLoop
.a23b					_MTAXExit:
.a23b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a23c					RectangleCommand:
.a23c	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a23e	80 02		bra $a242			bra 	ShapeDrawCmd
.a240					CircleCommand:
.a240	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a242					ShapeDrawCmd:
.a242	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a245					ShapeDraw:
.a245	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a248	4c c4 a2	jmp $a2c4			jmp 	ExecuteGraphicCommand	 	; and complete
.a24b					SpriteCommand:
.a24b	a2 00		ldx #$00			ldx 	#0
.a24d	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get image number.
.a250	5a		phy				phy
.a251	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a253	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a256	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a258	b0 0d		bcs $a267			bcs 	_SCRange
.a25a	a0 ff		ldy #$ff			ldy 	#255
.a25c	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a25f	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a261	7a		ply				ply
.a262	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a265	80 5d		bra $a2c4			bra 	ExecuteGraphicCommand
.a267					_SCRange:
.a267	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a26a					ImageCommand:
.a26a	a2 00		ldx #$00			ldx 	#0
.a26c	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get image number.
.a26f	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a272					ImageRunDraw:
.a272	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a274	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a277	ad 34 06	lda $0634			lda 	gxDrawScale
.a27a	0a		asl a				asl 	a
.a27b	0a		asl a				asl 	a
.a27c	0a		asl a				asl 	a
.a27d	a8		tay				tay
.a27e	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a280	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a283	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a286	60		rts				rts
.a287					TextCommand:
.a287	a2 00		ldx #$00			ldx 	#0
.a289	20 30 9d	jsr $9d30			jsr 	EvaluateString 				; get text
.a28c	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a28f					TextRunDraw:
.a28f	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a291	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a294	a0 00		ldy #$00			ldy 	#0
.a296					_IRDLoop:
.a296	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a299	85 37		sta $37				sta 	zTemp0+1
.a29b	ad 08 04	lda $0408			lda 	NSMantissa0
.a29e	85 36		sta $36				sta 	zTemp0
.a2a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2a2	f0 13		beq $a2b7			beq 	_IRDExit
.a2a4	5a		phy				phy									; save string pos
.a2a5	48		pha				pha 								; save char
.a2a6	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2a9	0a		asl a				asl 	a
.a2aa	0a		asl a				asl 	a
.a2ab	0a		asl a				asl 	a
.a2ac	a8		tay				tay
.a2ad	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2af	fa		plx				plx 								; char to draw
.a2b0	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a2b3	7a		ply				ply 								; restore string pos
.a2b4	c8		iny				iny
.a2b5	90 df		bcc $a296			bcc 	_IRDLoop 					; go back if no error.
.a2b7					_IRDExit:
.a2b7	60		rts				rts
.a2b8					PlotCommand:
.a2b8	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2ba	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a2bd	80 05		bra $a2c4			bra 	ExecuteGraphicCommand
.a2bf					LineCommand:
.a2bf	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2c1	20 d0 a2	jsr $a2d0			jsr 	RunGraphicsCommand
.a2c4					ExecuteGraphicCommand:
.a2c4	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2c7	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw 				; draw it and exit
.a2ca	b0 01		bcs $a2cd			bcs 	_EGCError
.a2cc	60		rts				rts
.a2cd					_EGCError:
.a2cd	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.a2d0					RunGraphicsCommand:
.a2d0	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2d3	68		pla				pla 								; pop handler address
.a2d4	fa		plx				plx
.a2d5	1a		inc a				inc 	a
.a2d6	d0 01		bne $a2d9			bne 	_RGINoCarry
.a2d8	e8		inx				inx
.a2d9					_RGINoCarry:
.a2d9	8d 32 06	sta $0632			sta 	GXHandler
.a2dc	8e 33 06	stx $0633			stx 	GXHandler+1
.a2df					_RGICommandLoop:
.a2df	b1 30		lda ($30),y			lda 	(codePtr),y
.a2e1	c8		iny				iny
.a2e2	c9 cd		cmp #$cd			cmp 	#KWD_TO						; is it TO x,y
.a2e4	f0 53		beq $a339			beq 	_RGI_To
.a2e6	c9 ba		cmp #$ba			cmp 	#KWD_HERE 					; do it here.
.a2e8	f0 55		beq $a33f			beq 	_RGI_Here
.a2ea	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a2ec	f0 3d		beq $a32b			beq 	_RGI_Exit
.a2ee	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a2f0	f0 39		beq $a32b			beq 	_RGI_Exit
.a2f2	c9 c1		cmp #$c1			cmp 	#KWD_OUTLINE 				; solid or outline
.a2f4	f0 3e		beq $a334			beq 	_RGI_Frame
.a2f6	c9 c9		cmp #$c9			cmp 	#KWD_SOLID
.a2f8	f0 33		beq $a32d			beq 	_RGI_Solid
.a2fa	c9 ab		cmp #$ab			cmp 	#KWD_BY 					; by offset
.a2fc	f0 4b		beq $a349			beq 	_RGI_By
.a2fe	c9 b6		cmp #$b6			cmp 	#KWD_FROM 					; from
.a300	f0 17		beq $a319			beq 	_RGI_Move2
.a302	c9 b3		cmp #$b3			cmp 	#KWD_DIM 					; dim (set scale)
.a304	f0 65		beq $a36b			beq 	_RGI_Dim
.a306	c9 b1		cmp #$b1			cmp 	#KWD_COLOUR 				; colour or Color
.a308	f0 78		beq $a382			beq 	_RGI_Colour
.a30a	c9 b0		cmp #$b0			cmp 	#KWD_COLOR
.a30c	f0 74		beq $a382			beq 	_RGI_Colour
.a30e	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a311	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a313	d0 03		bne $a318			bne 	_RGI_Move 					; move
.a315	4c ac a3	jmp $a3ac			jmp		_RGI_SpriteInstructions
.a318					_RGI_Move:
.a318	88		dey				dey 								; unpick get.
.a319					_RGI_Move2:
.a319	20 d2 a3	jsr $a3d2			jsr 	GCGetCoordinatePair 		; move to here
.a31c	20 f9 a3	jsr $a3f9			jsr 	GCCopyPairToStore 			; save
.a31f	5a		phy				phy
.a320	20 ef a3	jsr $a3ef			jsr 	GCLoadAXY 					; load in
.a323	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a325	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a328	7a		ply				ply
.a329	80 b4		bra $a2df			bra 	_RGICommandLoop 			; and go round
.a32b					_RGI_Exit:
.a32b	88		dey				dey 								; unpick : / EOL
.a32c	60		rts				rts
.a32d					_RGI_Solid:
.a32d	a9 02		lda #$02			lda 	#2
.a32f	8d 2e 06	sta $062e			sta 	gxFillSolid
.a332	80 ab		bra $a2df			bra 	_RGICommandLoop
.a334					_RGI_Frame:
.a334	9c 2e 06	stz $062e			stz 	gxFillSolid
.a337	80 a6		bra $a2df			bra 	_RGICommandLoop
.a339					_RGI_To:
.a339	20 d2 a3	jsr $a3d2			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a33c	20 f9 a3	jsr $a3f9			jsr 	GCCopyPairToStore
.a33f					_RGI_Here:
.a33f	5a		phy				phy
.a340	20 ef a3	jsr $a3ef			jsr 	GCLoadAXY 					; load it into AXY
.a343	20 a9 a3	jsr $a3a9			jsr 	_RGICallHandler 			; go do whatever it is.
.a346	7a		ply				ply
.a347	80 96		bra $a2df			bra 	_RGICommandLoop 			; and go round
.a349					_RGI_By:
.a349	20 df a3	jsr $a3df			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a34c	18		clc				clc
.a34d	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a350	6d 2f 06	adc $062f			adc 	gxxPos
.a353	8d 2f 06	sta $062f			sta 	gxXPos
.a356	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a359	6d 30 06	adc $0630			adc 	gxxPos+1
.a35c	8d 30 06	sta $0630			sta 	gxXPos+1
.a35f	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a362	18		clc				clc
.a363	6d 31 06	adc $0631			adc 	gxYPos
.a366	8d 31 06	sta $0631			sta 	gxYPos
.a369	80 d4		bra $a33f			bra 	_RGI_Here
.a36b					_RGI_Dim:
.a36b	a2 01		ldx #$01			ldx	 	#1
.a36d	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a370	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a373	c9 00		cmp #$00			cmp 	#0
.a375	f0 2f		beq $a3a6			beq 	_RGIRange
.a377	c9 09		cmp #$09			cmp 	#8+1
.a379	b0 2b		bcs $a3a6			bcs		_RGIRange
.a37b	3a		dec a				dec 	a
.a37c	8d 34 06	sta $0634			sta 	gxDrawScale
.a37f	4c df a2	jmp $a2df			jmp 	_RGICommandLoop
.a382					_RGI_Colour:
.a382	a2 01		ldx #$01			ldx 	#1 							; colour
.a384	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a387	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a389	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero
.a38c	b1 30		lda ($30),y			lda 	(codePtr),y
.a38e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a390	d0 04		bne $a396			bne 	_RGICDefaultMode
.a392	c8		iny				iny
.a393	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a396					_RGICDefaultMode:
.a396	5a		phy				phy
.a397	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a399	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a39c	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a39f	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a3a2	7a		ply				ply
.a3a3	4c df a2	jmp $a2df			jmp 	_RGICommandLoop 			; and go round
.a3a6					_RGIRange:
.a3a6	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a3a9					_RGICallHandler:
.a3a9	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3ac					_RGI_SpriteInstructions:
.a3ac	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a3ae	f0 07		beq $a3b7			beq 	_RGISpriteOff
.a3b0	c9 bb		cmp #$bb			cmp 	#KWD_IMAGE
.a3b2	f0 13		beq $a3c7			beq 	_RGISetImage
.a3b4	4c 18 a3	jmp $a318			jmp 	_RGI_Move
.a3b7					_RGISpriteOff:
.a3b7	5a		phy				phy
.a3b8	a0 01		ldy #$01			ldy 	#1
.a3ba	a2 00		ldx #$00			ldx 	#0
.a3bc					_RGIDoCommandLoop:
.a3bc	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3be	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a3c1	7a		ply				ply
.a3c2	b0 e2		bcs $a3a6			bcs 	_RGIRange
.a3c4	4c df a2	jmp $a2df			jmp 	_RGICommandLoop
.a3c7					_RGISetImage:
.a3c7	a2 01		ldx #$01			ldx 	#1
.a3c9	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger
.a3cc	5a		phy				phy
.a3cd	aa		tax				tax
.a3ce	a0 00		ldy #$00			ldy 	#0
.a3d0	80 ea		bra $a3bc			bra 	_RGIDoCommandLoop
.a3d2					GCGetCoordinatePair:
.a3d2	a2 01		ldx #$01			ldx 	#1
.a3d4	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a3d7	20 28 8d	jsr $8d28			jsr 	CheckComma
.a3da	e8		inx				inx
.a3db	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a3de	60		rts				rts
.a3df					GCSignedCoordinatePair:
.a3df	a2 01		ldx #$01			ldx 	#1
.a3e1	20 69 9d	jsr $9d69			jsr 	Evaluate16BitIntegerSigned
.a3e4	20 28 8d	jsr $8d28			jsr 	CheckComma
.a3e7	e8		inx				inx
.a3e8	20 69 9d	jsr $9d69			jsr 	Evaluate16BitIntegerSigned
.a3eb	60		rts				rts
.a3ec					_GCCPRange:
.a3ec	4c 8b 9f	jmp $9f8b			jmp 	RangeError
.a3ef					GCLoadAXY:
.a3ef	ad 30 06	lda $0630			lda 	gxXPos+1
.a3f2	ae 2f 06	ldx $062f			ldx 	gxXPos
.a3f5	ac 31 06	ldy $0631			ldy 	gxYPos
.a3f8	60		rts				rts
.a3f9					GCCopyPairToStore:
.a3f9	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a3fc	8d 2f 06	sta $062f			sta 	gxXPos
.a3ff	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a402	8d 30 06	sta $0630			sta 	gxXPos+1
.a405	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a408	8d 31 06	sta $0631			sta 	gxYPos
.a40b	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a40c					BitmapCtrl:
.a40c	b1 30		lda ($30),y			lda 	(codePtr),y
.a40e	c8		iny				iny
.a40f	a2 01		ldx #$01			ldx 	#1
.a411	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a413	f0 11		beq $a426			beq 	BitmapSwitch
.a415	ca		dex				dex
.a416	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a418	f0 0c		beq $a426			beq 	BitmapSwitch
.a41a	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get the colour
.a41d	5a		phy				phy
.a41e	aa		tax				tax
.a41f	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a421	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a424	7a		ply				ply
.a425	60		rts				rts
.a426					BitmapSwitch:
.a426	5a		phy				phy
.a427	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a429	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a42b	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a42e	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a430	a0 00		ldy #$00			ldy 	#0
.a432	a2 ff		ldx #$ff			ldx 	#$FF
.a434	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a437	9c 2e 06	stz $062e			stz 	gxFillSolid
.a43a	9c 2f 06	stz $062f			stz 	gxXPos
.a43d	9c 30 06	stz $0630			stz 	gxXPos+1
.a440	9c 31 06	stz $0631			stz 	gxYPos
.a443	9c 34 06	stz $0634			stz 	gxDrawScale
.a446	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a448	a2 00		ldx #$00			ldx 	#0
.a44a	a0 00		ldy #$00			ldy 	#0
.a44c	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a44f	7a		ply				ply
.a450	60		rts				rts
.a451					SpritesCtrl:
.a451	b1 30		lda ($30),y			lda 	(codePtr),y
.a453	c8		iny				iny
.a454	a2 01		ldx #$01			ldx 	#1
.a456	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a458	f0 08		beq $a462			beq 	SpriteSwitch
.a45a	ca		dex				dex
.a45b	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a45d	f0 03		beq $a462			beq 	SpriteSwitch
.a45f	4c 86 9f	jmp $9f86			jmp 	SyntaxError
.a462					SpriteSwitch:
.a462	5a		phy				phy
.a463	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a465	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a467	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a46a	7a		ply				ply
.a46b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a46c					GfxCommand:
.a46c	a2 00		ldx #$00			ldx 	#0
.a46e	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; command
.a471	20 28 8d	jsr $8d28			jsr 	CheckComma
.a474	e8		inx				inx
.a475	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; X
.a478	20 28 8d	jsr $8d28			jsr 	CheckComma
.a47b	e8		inx				inx
.a47c	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; Y
.a47f	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a482	4a		lsr a				lsr 	a
.a483	d0 16		bne $a49b			bne 	_GfxError
.a485	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a488	b0 11		bcs $a49b			bcs 	_GfxError 					; bit 7 should have been zero
.a48a	5a		phy				phy 								; save pos
.a48b	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a48e	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a491	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a494	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a497	b0 02		bcs $a49b			bcs 	_GfxError
.a499	7a		ply				ply 								; restore pos and exit.
.a49a	60		rts				rts
.a49b					_GfxError:
.a49b	4c 8b 9f	jmp $9f8b			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a49e					UnaryHit:
.a49e	fa		plx				plx
.a49f	a9 36		lda #$36			lda 	#zTemp0
.a4a1	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4a4	20 28 8d	jsr $8d28			jsr 	CheckComma
.a4a7	e8		inx				inx
.a4a8	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4ab	20 20 8d	jsr $8d20			jsr		CheckRightBracket
.a4ae	ca		dex				dex 								; fix back up again.
.a4af	da		phx				phx 								; save X/Y
.a4b0	5a		phy				phy
.a4b1	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4b4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4b7	aa		tax				tax
.a4b8	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4ba	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw 				; calculate result
.a4bd	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4be	7a		ply				ply 								; restore XY
.a4bf	fa		plx				plx
.a4c0	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte 					; return the hit result
.a4c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4c4					PaletteCommand:
.a4c4	a2 00		ldx #$00			ldx 	#0
.a4c6	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; colour
.a4c9	20 28 8d	jsr $8d28			jsr 	CheckComma
.a4cc	e8		inx				inx
.a4cd	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger 		; r
.a4d0	20 28 8d	jsr $8d28			jsr 	CheckComma
.a4d3	e8		inx				inx
.a4d4	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; g
.a4d7	20 28 8d	jsr $8d28			jsr 	CheckComma
.a4da	e8		inx				inx
.a4db	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; b
.a4de	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4e1	85 36		sta $36				sta 	zTemp0
.a4e3	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a4e5	85 37		sta $37				sta 	zTemp0+1
.a4e7	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a4e9	26 37		rol $37				rol	 	zTemp0+1
.a4eb	06 36		asl $36				asl 	zTemp0
.a4ed	26 37		rol $37				rol	 	zTemp0+1
.a4ef	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a4f1	85 01		sta $01				sta 	1
.a4f3	5a		phy				phy
.a4f4	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a4f7	92 36		sta ($36)			sta 	(zTemp0)
.a4f9	a0 01		ldy #$01			ldy 	#1
.a4fb	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a4fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a500	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a503	c8		iny				iny
.a504	91 36		sta ($36),y			sta 	(zTemp0),y
.a506	7a		ply				ply
.a507	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/event.asm

.a508					UnaryEvent:
.a508	fa		plx				plx
.a509	20 b0 a5	jsr $a5b0			jsr 	TimerToStackX 				; timer in +0
.a50c	e8		inx				inx  								; put reference into +1
.a50d	20 c2 97	jsr $97c2			jsr 	EvaluateTerm
.a510	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a513	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a515	d0 57		bne $a56e			bne 	_UEType
.a517	e8		inx				inx 								; put the step in +2
.a518	20 28 8d	jsr $8d28			jsr 	CheckComma
.a51b	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitInteger
.a51e	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a521	ca		dex				dex
.a522	ca		dex				dex
.a523	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a526	85 36		sta $36				sta 	zTemp0
.a528	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a52b	85 37		sta $37				sta 	zTemp0+1
.a52d	5a		phy				phy
.a52e	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a530	b1 36		lda ($36),y			lda 	(zTemp0),y
.a532	30 36		bmi $a56a			bmi 	_UEFalse 					; exit if signed.
.a534	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a536	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a539	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a53b	c8		iny				iny
.a53c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a53f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a541	c8		iny				iny
.a542	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a545	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a547	90 21		bcc $a56a			bcc 	_UEFalse 					; no, return FALSE.
.a549	18		clc				clc
.a54a	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a54c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a54f	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a552	91 36		sta ($36),y			sta 	(zTemp0),y
.a554	c8		iny				iny
.a555	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a558	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a55b	91 36		sta ($36),y			sta 	(zTemp0),y
.a55d	c8		iny				iny
.a55e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a561	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a564	91 36		sta ($36),y			sta 	(zTemp0),y
.a566	7a		ply				ply
.a567	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.a56a					_UEFalse:
.a56a	7a		ply				ply 								; restore Y
.a56b	4c b2 8d	jmp $8db2			jmp 	ReturnFalse 				; and return False
.a56e					_UEType:
.a56e	4c 90 9f	jmp $9f90			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/joy.asm

.a571					UnaryJoyX:
.a571	18		clc				clc
.a572	80 01		bra $a575			bra 	JoyMain
.a574					UnaryJoyY:
.a574	38		sec				sec
.a575					JoyMain:
.a575	fa		plx				plx 								; get pos
.a576	08		php				php 								; save carry (set for Y)
.a577	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a57a	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a57d	20 cf a9	jsr $a9cf			jsr 	EXTReadController 			; read the controller.
.a580	28		plp				plp
.a581	90 02		bcc $a585			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a583	4a		lsr a				lsr 	a
.a584	4a		lsr a				lsr 	a
.a585					_JMNoShift:
.a585	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a586	b0 0a		bcs $a592			bcs 	_JMIsRight
.a588	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a589	b0 04		bcs $a58f			bcs 	_JMIsLeft
.a58b	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; zero result
.a58e	60		rts				rts
.a58f					_JMIsLeft:
.a58f	4c a6 8d	jmp $8da6			jmp 	ReturnTrue
.a592					_JMIsRight:
.a592	a9 01		lda #$01			lda 	#1
.a594	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.a597	60		rts				rts
.a598					UnaryJoyB:
.a598	fa		plx				plx 								; get pos
.a599	20 7d 9d	jsr $9d7d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a59c	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a59f	20 cf a9	jsr $a9cf			jsr 	EXTReadController 			; read the controller.
.a5a2	4a		lsr a				lsr 	a
.a5a3	4a		lsr a				lsr 	a
.a5a4	4a		lsr a				lsr 	a
.a5a5	4a		lsr a				lsr 	a
.a5a6	29 01		and #$01			and 	#1
.a5a8	20 fe 9d	jsr $9dfe			jsr 	NSMSetByte
.a5ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/timer.asm

.a5ac					UnaryTimer:
.a5ac	fa		plx				plx
.a5ad	20 20 8d	jsr $8d20			jsr 	CheckRightBracket
.a5b0					TimerToStackX:
.a5b0	20 fc 9d	jsr $9dfc			jsr 	NSMSetZero 					; zero result
.a5b3	64 01		stz $01				stz 	1 							; access I/O
.a5b5	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5b8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5bb	ad 5a d6	lda $d65a			lda 	$D65A
.a5be	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5c1	ad 5b d6	lda $d65b			lda 	$D65B
.a5c4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5c8					StackPushByte:
.a5c8	48		pha				pha 								; save byte
.a5c9	a5 34		lda $34				lda 	BasicStack
.a5cb	d0 09		bne $a5d6			bne 	_SPBNoBorrow
.a5cd	c6 35		dec $35				dec 	BasicStack+1
.a5cf	48		pha				pha
.a5d0	a5 35		lda $35				lda 	BasicStack+1
.a5d2	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5d4	90 06		bcc $a5dc			bcc 	_SPBMemory
.a5d6					_SPBNoBorrow:
.a5d6	c6 34		dec $34				dec 	BasicStack
.a5d8	68		pla				pla 								; get back and write
.a5d9	92 34		sta ($34)			sta 	(BasicStack)
.a5db	60		rts				rts
.a5dc					_SPBMemory:
.a5dc	a9 12		lda #$12		lda	#18
.a5de	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a5e1					StackPopByte:
.a5e1	b2 34		lda ($34)			lda 	(BasicStack)
.a5e3	e6 34		inc $34				inc 	BasicStack
.a5e5	d0 02		bne $a5e9			bne 	_SPBNoCarry
.a5e7	e6 35		inc $35				inc 	BasicStack+1
.a5e9					_SPBNoCarry:
.a5e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a5ea					StackOpen:
.a5ea	48		pha				pha 								; save frame byte
.a5eb	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a5ed	0a		asl a				asl 	a 							; claim twice this for storage
.a5ee	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a5f0	38		sec				sec 								; so basically subtracting from
.a5f1	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a5f3	85 34		sta $34				sta 	basicStack
.a5f5	b0 08		bcs $a5ff			bcs 	_SONoBorrow
.a5f7	c6 35		dec $35				dec 	basicStack+1
.a5f9	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a5fb	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5fd	90 04		bcc $a603			bcc 	_SOMemory
.a5ff					_SONoBorrow:
.a5ff	68		pla				pla 								; get marker back and write at TOS
.a600	92 34		sta ($34)			sta 	(basicStack)
.a602	60		rts				rts
.a603					_SOMemory:
.a603	a9 12		lda #$12		lda	#18
.a605	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a608					StackClose:
.a608	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a60a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a60c	0a		asl a				asl 	a 							; claim twice this.
.a60d	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a60f	85 34		sta $34				sta 	basicStack
.a611	90 02		bcc $a615			bcc 	_SCExit
.a613	e6 35		inc $35				inc 	basicStack+1
.a615					_SCExit:
.a615	60		rts				rts
.a616					StackCheckFrame:
.a616	48		pha				pha
.a617					_StackRemoveLocals:
.a617	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a619	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a61b	b0 05		bcs $a622			bcs 	_SCNoLocal
.a61d	20 e5 87	jsr $87e5			jsr 	LocalPopValue
.a620	80 f5		bra $a617			bra 	_StackRemoveLocals
.a622					_SCNoLocal:
.a622	68		pla				pla
.a623	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a625	29 f0		and #$f0			and 	#$F0 						; check type bits
.a627	d0 01		bne $a62a			bne 	_SCFError 					; different, we have structures mixed up
.a629	60		rts				rts
.a62a					_SCFError:
.a62a	8a		txa				txa 								; report error X
.a62b	4c 39 8d	jmp $8d39			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a62e					STKSaveCodePosition:
.a62e	5a		phy				phy
.a62f	98		tya				tya 								; save Y
.a630	a0 05		ldy #$05			ldy 	#5
.a632	91 34		sta ($34),y			sta 	(basicStack),y
.a634	88		dey				dey 								; save Code Pointer
.a635					_STKSaveLoop:
.a635	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a638	91 34		sta ($34),y			sta 	(basicStack),y
.a63a	88		dey				dey
.a63b	d0 f8		bne $a635			bne 	_STKSaveLoop
.a63d	7a		ply				ply
.a63e	60		rts				rts
.a63f					STKLoadCodePosition:
.a63f	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a641					_STKLoadLoop:
.a641	b1 34		lda ($34),y			lda 	(basicStack),y
.a643	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a646	c8		iny				iny
.a647	c0 05		cpy #$05			cpy 	#5
.a649	d0 f6		bne $a641			bne 	_STKLoadLoop
.a64b	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a64d	a8		tay				tay
.a64e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a64f					StackReset:
.a64f	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a651	85 34		sta $34				sta 	0+basicStack
.a653	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a655	85 35		sta $35				sta 	1+basicStack
.a657	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a659	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a65b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a65c					StringConcrete:
.a65c	5a		phy				phy 								; save position on stack
.a65d	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a660	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a663	85 38		sta $38				sta 	zTemp1
.a665	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a668	85 39		sta $39				sta 	zTemp1+1
.a66a	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a66c					_SALength:
.a66c	c8		iny				iny
.a66d	b1 38		lda ($38),y			lda 	(zTemp1),y
.a66f	d0 fb		bne $a66c			bne 	_SALength
.a671	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a673	b0 3f		bcs $a6b4			bcs 	_SALengthError
.a675	98		tya				tya 				 				; length of the new string
.a676	18		clc				clc
.a677	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a679	90 02		bcc $a67d			bcc 	_SAHaveLength
.a67b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a67d					_SAHaveLength:
.a67d	48		pha				pha 								; save length.
.a67e	38		sec				sec
.a67f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a681	6d 8e 04	adc $048e			adc 	StringMemory
.a684	8d 8e 04	sta $048e			sta 	StringMemory
.a687	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a689	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a68c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a68e	6d 8f 04	adc $048f			adc 	StringMemory+1
.a691	8d 8f 04	sta $048f			sta 	StringMemory+1
.a694	85 3b		sta $3b				sta 	zTemp2+1
.a696	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a699	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a69a	38		sec				sec
.a69b	e9 03		sbc #$03			sbc 	#3
.a69d	92 3a		sta ($3a)			sta 	(zTemp2)
.a69f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6a1	a0 01		ldy #$01			ldy 	#1
.a6a3	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6a5					_SACopyNewString:
.a6a5	a0 00		ldy #$00			ldy 	#0
.a6a7					_SACopyNSLoop:
.a6a7	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6a9	c8		iny				iny 								; write two on in string storage
.a6aa	c8		iny				iny
.a6ab	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6ad	88		dey				dey 								; this makes it one one.
.a6ae	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6b0	d0 f5		bne $a6a7			bne 	_SACopyNSLoop
.a6b2	7a		ply				ply
.a6b3	60		rts				rts
.a6b4					_SALengthError:
.a6b4	a9 09		lda #$09		lda	#9
.a6b6	4c 39 8d	jmp $8d39		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6b9					StringSystemInitialise:
.a6b9	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6bb	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6be	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6c0	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6c3	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6c6	60		rts				rts
.a6c7					StringSpaceInitialise:
.a6c7	20 c5 99	jsr $99c5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6ca	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6cc	8d 90 04	sta $0490			sta 	StringInitialised
.a6cf	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6d2	8d 91 04	sta $0491			sta 	StringTempPointer
.a6d5	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6d8	3a		dec a				dec 	a
.a6d9	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6dc	60		rts				rts
.a6dd					StringTempAllocate:
.a6dd	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6df	b0 35		bcs $a716			bcs 	_STALength
.a6e1	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a6e4	30 05		bmi $a6eb			bmi 	_STAAllocate
.a6e6	48		pha				pha 								; save value to subtract.
.a6e7	20 c7 a6	jsr $a6c7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a6ea	68		pla				pla 								; restore it
.a6eb					_STAAllocate:
.a6eb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a6ed	18		clc				clc  								; deliberate allows one more
.a6ee	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a6f1	8d 91 04	sta $0491			sta 	StringTempPointer
.a6f4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a6f7	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a6f9	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a6fc	69 ff		adc #$ff			adc 	#$FF
.a6fe	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a701	85 3d		sta $3d				sta 	zsTemp+1
.a703	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a706	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a709	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a70c	a9 10		lda #$10			lda 	#NSTString
.a70e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a711	a9 00		lda #$00			lda 	#0 							; clear the target string
.a713	92 3c		sta ($3c)			sta 	(zsTemp)
.a715	60		rts				rts
.a716					_STALength:
.a716	a9 09		lda #$09		lda	#9
.a718	4c 39 8d	jmp $8d39		jmp	ErrorHandler
.a71b					StringTempWrite:
.a71b	48		pha				pha
.a71c	92 3c		sta ($3c)			sta 	(zsTemp)
.a71e	e6 3c		inc $3c				inc 	zsTemp
.a720	d0 02		bne $a724			bne 	_STWNoCarry
.a722	e6 3d		inc $3d				inc 	zsTemp+1
.a724					_STWNoCarry:
.a724	a9 00		lda #$00			lda 	#0
.a726	92 3c		sta ($3c)			sta 	(zsTemp)
.a728	68		pla				pla
.a729	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=7					CLIIdentifier = CONYellow
=10					CLIPunctuation = CONYellowGreen
=1					CLIData = CONWhite
.a72a					EXTPrintCharacter:
.a72a	48		pha				pha
.a72b	da		phx				phx
.a72c	5a		phy				phy
.a72d	a6 01		ldx $01				ldx 	1
.a72f	da		phx				phx
.a730	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a733	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a735	30 48		bmi $a77f			bmi 	_EXPCColour
.a737	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a739	90 4d		bcc $a788			bcc 	_EXPCControl
.a73b	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a73d	86 01		stx $01				stx 	1
.a73f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a741	e6 01		inc $01				inc 	1 							; select colour memory
.a743	ad 37 06	lda $0637			lda 	EXTTextColour
.a746	91 40		sta ($40),y			sta 	(EXTAddress),y
.a748	c8		iny				iny 								; advance horizontal position
.a749	8c 36 06	sty $0636			sty 	EXTColumn
.a74c	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a74f	90 66		bcc $a7b7			bcc 	_EXPCExit 					; no, then exit.
.a751					_EXPCCRLF:
.a751	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a754	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a757	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a75a	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a75d	f0 18		beq $a777			beq 	_EXPCScroll
.a75f	18		clc				clc 								; add width to address.
.a760	a5 40		lda $40				lda 	EXTAddress
.a762	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a765	85 40		sta $40				sta 	EXTAddress
.a767	90 4e		bcc $a7b7			bcc 	_EXPCExit
.a769	e6 41		inc $41				inc 	EXTAddress+1
.a76b	80 4a		bra $a7b7			bra 	_EXPCExit
.a76d					_EXPCLeft:
.a76d	ce 36 06	dec $0636			dec 	EXTColumn
.a770	10 45		bpl $a7b7			bpl 	_EXPCExit
.a772					_EXPCBegin:
.a772	9c 36 06	stz $0636			stz 	EXTColumn
.a775	80 40		bra $a7b7			bra 	_EXPCExit
.a777					_EXPCScroll:
.a777	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a77a	20 44 a8	jsr $a844			jsr 	EXTScreenScroll 			; scroll the screen
.a77d	80 38		bra $a7b7			bra 	_EXPCExit
.a77f					_EXPCColour:
.a77f	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a781	b0 34		bcs $a7b7			bcs 	_EXPCExit
.a783	20 24 a8	jsr $a824			jsr 	_EXPCHandleColour
.a786	80 2f		bra $a7b7			bra 	_EXPCExit
.a788					_EXPCControl:
.a788	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a78a	b0 2b		bcs $a7b7			bcs 	_EXPCExit
.a78c	0a		asl a				asl 	a 							; double into X
.a78d	aa		tax				tax
.a78e	7c 02 a8	jmp ($a802,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a791					_EXPCUp:
.a791	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a794	f0 21		beq $a7b7			beq 	_EXPCExit
.a796	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a799	38		sec				sec
.a79a	a5 40		lda $40				lda 	EXTAddress
.a79c	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a79f	85 40		sta $40				sta 	EXTAddress
.a7a1	b0 14		bcs $a7b7			bcs 	_EXPCExit
.a7a3	c6 41		dec $41				dec 	EXTAddress+1
.a7a5	80 10		bra $a7b7			bra 	_EXPCExit
.a7a7					_EXPCRight:
.a7a7	c8		iny				iny
.a7a8	8c 36 06	sty $0636			sty 	EXTColumn
.a7ab	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7ae	d0 07		bne $a7b7			bne 	_EXPCExit
.a7b0					_EXPCEnd:
.a7b0	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7b3	3a		dec a				dec 	a
.a7b4	8d 36 06	sta $0636			sta 	EXTColumn
.a7b7					_EXPCExit:
.a7b7	20 99 a8	jsr $a899			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7ba	68		pla				pla
.a7bb	85 01		sta $01				sta 	1
.a7bd	7a		ply				ply
.a7be	fa		plx				plx
.a7bf	68		pla				pla
.a7c0	60		rts				rts
.a7c1					_EXPCClearScreen:
.a7c1	20 56 a8	jsr $a856			jsr		EXTClearScreenCode
.a7c4	80 f1		bra $a7b7			bra 	_EXPCExit
.a7c6					_EXPCDown:
.a7c6	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7c9	3a		dec a				dec 	a
.a7ca	cd 35 06	cmp $0635			cmp 	EXTRow
.a7cd	f0 e8		beq $a7b7			beq 	_EXPCExit
.a7cf	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7d2	18		clc				clc
.a7d3	a5 40		lda $40				lda 	EXTAddress
.a7d5	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7d8	85 40		sta $40				sta 	EXTAddress
.a7da	90 db		bcc $a7b7			bcc 	_EXPCExit
.a7dc	e6 41		inc $41				inc 	EXTAddress+1
.a7de	80 d7		bra $a7b7			bra 	_EXPCExit
.a7e0					_EXPCTab:
.a7e0	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7e3	29 f8		and #$f8			and 	#$F8
.a7e5	18		clc				clc
.a7e6	69 08		adc #$08			adc 	#8
.a7e8	8d 36 06	sta $0636			sta 	EXTColumn
.a7eb	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7ee	90 c7		bcc $a7b7			bcc 	_EXPCExit
.a7f0	80 be		bra $a7b0			bra 	_EXPCEnd
.a7f2					_EXPCBackSpace:
.a7f2	88		dey				dey
.a7f3	30 c2		bmi $a7b7			bmi 	_EXPCExit
.a7f5	ce 36 06	dec $0636			dec 	EXTColumn
.a7f8	a9 02		lda #$02			lda 	#2
.a7fa	85 01		sta $01				sta 	1
.a7fc	a9 20		lda #$20			lda 	#32
.a7fe	91 40		sta ($40),y			sta 	(EXTAddress),y
.a800	80 b5		bra $a7b7			bra 	_EXPCExit
.a802					_EXPCActionTable:
>a802	b7 a7						.word 	_EXPCExit 					; 00
>a804	72 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a806	6d a7						.word 	_EXPCLeft 					; 02 B Left
>a808	b7 a7						.word 	_EXPCExit 					; 03 <Break>
>a80a	b7 a7						.word 	_EXPCExit 					; 04
>a80c	b0 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a80e	a7 a7						.word 	_EXPCRight 					; 06 F Right
>a810	b7 a7						.word 	_EXPCExit 					; 07
>a812	f2 a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a814	e0 a7						.word 	_EXPCTab 					; 09 I Tab
>a816	b7 a7						.word 	_EXPCExit 					; 0A
>a818	b7 a7						.word 	_EXPCExit 					; 0B
>a81a	c1 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a81c	51 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a81e	c6 a7						.word 	_EXPCDown 					; 0E N Down
>a820	b7 a7						.word 	_EXPCExit 					; 0F
>a822	91 a7						.word 	_EXPCUp 					; 10 P Up
.a824					_EXPCHandleColour
.a824	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a826	b0 16		bcs $a83e			bcs 	_EXPCBackground
.a828	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a829	0a		asl a				asl 	a
.a82a	0a		asl a				asl 	a
.a82b	0a		asl a				asl 	a
.a82c	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a82e					_EXPCUpdate:
.a82e	48		pha				pha 								; save new colour
.a82f	8a		txa				txa 								; get mask
.a830	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a833	8d 37 06	sta $0637			sta 	EXTTextColour
.a836	68		pla				pla 								; or in new colour
.a837	0d 37 06	ora $0637			ora 	EXTTextColour
.a83a	8d 37 06	sta $0637			sta 	EXTTextColour
.a83d	60		rts				rts
.a83e					_EXPCBackground:
.a83e	29 0f		and #$0f			and 	#$0F 						; get the colour
.a840	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a842	80 ea		bra $a82e			bra 	_EXPCUpdate
.a844					EXTScreenScroll:
.a844	a9 02		lda #$02			lda 	#2 							; select text page
.a846	85 01		sta $01				sta 	1
.a848	a9 20		lda #$20			lda		#32 						; fill with space
.a84a	20 59 a9	jsr $a959			jsr 	EXTScrollFill
.a84d	e6 01		inc $01				inc 	1 							; select colour page
.a84f	ad 37 06	lda $0637			lda 	EXTTextColour
.a852	20 59 a9	jsr $a959			jsr 	EXTScrollFill
.a855	60		rts				rts
.a856					EXTClearScreenCode:
.a856	a9 02		lda #$02			lda 	#2 							; select text page
.a858	85 01		sta $01				sta 	1
.a85a	a9 20		lda #$20			lda		#32 						; fill with space
.a85c	20 69 a8	jsr $a869			jsr 	_EXTCSFill
.a85f	e6 01		inc $01				inc 	1 							; select colour page
.a861	ad 37 06	lda $0637			lda 	EXTTextColour
.a864	20 69 a8	jsr $a869			jsr 	_EXTCSFill
.a867	80 22		bra $a88b			bra 	EXTHomeCursor
.a869					_EXTCSFill:
.a869	aa		tax				tax
.a86a	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a86c	85 40		sta $40				sta 	EXTAddress
.a86e	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a870	85 41		sta $41				sta 	EXTAddress+1
.a872					_EXTCSFill1:
.a872	a0 00		ldy #$00			ldy 	#0
.a874	8a		txa				txa
.a875					_EXTCSFill2:
.a875	91 40		sta ($40),y			sta 	(EXTAddress),y
.a877	c8		iny				iny
.a878	d0 fb		bne $a875			bne 	_EXTCSFill2
.a87a	e6 41		inc $41				inc 	EXTAddress+1
.a87c	a5 41		lda $41				lda 	EXTAddress+1
.a87e	c9 d2		cmp #$d2			cmp 	#$D2
.a880	d0 f0		bne $a872			bne 	_EXTCSFill1
.a882	8a		txa				txa
.a883					_EXTCSFill3:
.a883	91 40		sta ($40),y			sta 	(EXTAddress),y
.a885	c8		iny				iny
.a886	c0 c0		cpy #$c0			cpy 	#$C0
.a888	d0 f9		bne $a883			bne 	_EXTCSFill3
.a88a	60		rts				rts
.a88b					EXTHomeCursor:
.a88b	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a88e	9c 36 06	stz $0636			stz 	EXTColumn
.a891	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a893	85 40		sta $40				sta 	EXTAddress
.a895	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a897	85 41		sta $41				sta 	EXTAddress+1
.a899					EXTSetHardwareCursor:
.a899	64 01		stz $01				stz 	1 							; I/O Page zero
.a89b	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a89d	8d 10 d0	sta $d010			sta 	$D010
.a8a0	a9 b1		lda #$b1			lda 	#$B1
.a8a2	8d 12 d0	sta $d012			sta 	$D012
.a8a5	ad 36 06	lda $0636			lda 	EXTColumn
.a8a8	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8ab	9c 15 d0	stz $d015			stz 	$D015
.a8ae	ad 35 06	lda $0635			lda 	EXTRow
.a8b1	8d 16 d0	sta $d016			sta 	$D016
.a8b4	9c 17 d0	stz $d017			stz 	$D017
.a8b7	60		rts				rts
.a8b8					EXTInputLine:
.a8b8	48		pha				pha
.a8b9	da		phx				phx
.a8ba	5a		phy				phy
.a8bb	a5 01		lda $01				lda 	1 							; save I/O page
.a8bd	48		pha				pha
.a8be					_EILLoop:
.a8be	20 c0 a9	jsr $a9c0			jsr 	ExtInputSingleCharacter
.a8c1	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8c3	f0 40		beq $a905			beq 	_EILExit
.a8c5	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8c7	f0 1c		beq $a8e5			beq 	_EILBackspace
.a8c9	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8cb	90 12		bcc $a8df			bcc 	_EILPrintLoop
.a8cd	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8cf	b0 0e		bcs $a8df			bcs 	_EILPrintLoop
.a8d1	48		pha				pha 								; save character
.a8d2	a9 02		lda #$02			lda 	#2  						; insert a space
.a8d4	85 01		sta $01				sta 	1
.a8d6	20 47 a9	jsr $a947			jsr 	EXTILInsert 				; insert in text screen
.a8d9	e6 01		inc $01				inc 	1
.a8db	20 47 a9	jsr $a947			jsr 	EXTILInsert 				; insert in colour screen
.a8de	68		pla				pla 								; get character back.
.a8df					_EILPrintLoop:
.a8df	20 2a a7	jsr $a72a			jsr 	ExtPrintCharacter
.a8e2	80 da		bra $a8be			bra 	_EILLoop
.a8e4	60		rts				rts
.a8e5					_EILBackspace:
.a8e5	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a8e8	f0 d4		beq $a8be			beq 	_EILLoop
.a8ea	a9 02		lda #$02			lda 	#2 							; move cursor left
.a8ec	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.a8ef	a9 02		lda #$02			lda 	#2 							; text block
.a8f1	85 01		sta $01				sta 	1
.a8f3	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a8f5	20 32 a9	jsr $a932			jsr 	EXTILDelete
.a8f8	e6 01		inc $01				inc 	1 							; colour block
.a8fa	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a8fd	88		dey				dey
.a8fe	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a900	20 32 a9	jsr $a932			jsr 	EXTILDelete 				; backspace attribute
.a903	80 b9		bra $a8be			bra 	_EILLoop 					; and go round.
.a905					_EILExit:
.a905	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a907	85 01		sta $01				sta 	1
.a909	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a90b					_EILScrapeLine:
.a90b	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a90d	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a910	c8		iny				iny
.a911	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a914	d0 f5		bne $a90b			bne 	_EILScrapeLine
.a916					_EILTrimSpaces:
.a916	88		dey				dey
.a917	f0 08		beq $a921			beq 	_EILEndTrim
.a919	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a91c	c9 20		cmp #$20			cmp 	#' '
.a91e	f0 f6		beq $a916			beq 	_EILTrimSpaces
.a920	c8		iny				iny 								; trim after non space character.
.a921					_EILEndTrim:
.a921	a9 00		lda #$00			lda 	#0 							; trim here.
.a923	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a926	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a928	20 2a a7	jsr $a72a			jsr 	ExtPrintCharacter
.a92b	68		pla				pla 								; reset I/O page
.a92c	85 01		sta $01				sta 	1
.a92e	7a		ply				ply
.a92f	fa		plx				plx
.a930	68		pla				pla
.a931	60		rts				rts
.a932					EXTILDelete:
.a932	48		pha				pha 								; save the new character
.a933	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a936					_EXTDLoop:
.a936	c8		iny				iny 								; copy one byte down.
.a937	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a939	88		dey				dey
.a93a	91 40		sta ($40),y			sta 	(EXTAddress),y
.a93c	c8		iny				iny 								; do till end of line.
.a93d	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a940	90 f4		bcc $a936			bcc 	_EXTDLoop
.a942	88		dey				dey 	 							; write in last slot.
.a943	68		pla				pla
.a944	91 40		sta ($40),y			sta 	(EXTAddress),y
.a946	60		rts				rts
.a947					EXTILInsert:
.a947	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a94a					_EXTILoop:
.a94a	88		dey				dey 								; back one
.a94b	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a94e	f0 08		beq $a958			beq 	_EXTIExit
.a950	88		dey				dey 								; copy one byte up.
.a951	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a953	c8		iny				iny
.a954	91 40		sta ($40),y			sta 	(EXTAddress),y
.a956	80 f2		bra $a94a			bra 	_EXTILoop
.a958					_EXTIExit:
.a958	60		rts				rts
.a959					EXTScrollFill:
.a959	aa		tax				tax									; save value to fill with
.a95a	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a95c	48		pha				pha
.a95d	a5 37		lda $37				lda 	zTemp0+1
.a95f	48		pha				pha
.a960	a5 38		lda $38				lda 	zTemp1
.a962	48		pha				pha
.a963	a5 39		lda $39				lda 	zTemp1+1
.a965	48		pha				pha
.a966	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a968	85 37		sta $37				sta 	zTemp0+1
.a96a	85 39		sta $39				sta 	zTemp1+1
.a96c	64 36		stz $36				stz 	zTemp0
.a96e	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a971	85 38		sta $38				sta 	zTemp1
.a973	a0 00		ldy #$00			ldy 	#0
.a975					_EXSFCopy1:
.a975	b1 38		lda ($38),y			lda 	(zTemp1),y
.a977	91 36		sta ($36),y			sta 	(zTemp0),y
.a979	c8		iny				iny
.a97a	d0 f9		bne $a975			bne 	_EXSFCopy1
.a97c	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a97e	e6 39		inc $39				inc 	zTemp1+1
.a980	a5 39		lda $39				lda 	zTemp1+1
.a982	c9 d3		cmp #$d3			cmp 	#$D3
.a984	d0 ef		bne $a975			bne 	_EXSFCopy1
.a986	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a989	8a		txa				txa
.a98a					_EXSFFill1:
.a98a	88		dey				dey
.a98b	91 40		sta ($40),y			sta 	(EXTAddress),y
.a98d	c0 00		cpy #$00			cpy 	#0
.a98f	10 f9		bpl $a98a			bpl 	_EXSFFill1
.a991	68		pla				pla
.a992	85 39		sta $39				sta 	zTemp1+1
.a994	68		pla				pla
.a995	85 38		sta $38				sta 	zTemp1
.a997	68		pla				pla
.a998	85 37		sta $37				sta 	zTemp0+1
.a99a	68		pla				pla
.a99b	85 36		sta $36				sta 	zTemp0
.a99d	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a99e					EXTInitialise:
.a99e	64 01		stz $01				stz 	1 							; Access I/O
.a9a0	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9a3	9c 08 d0	stz $d008			stz 	$D008
.a9a6	9c 09 d0	stz $d009			stz 	$D009
.a9a9	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9ab	8d 58 d6	sta $d658			sta 	$D658
.a9ae	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9b0	8d 37 06	sta $0637			sta 	EXTTextColour
.a9b3	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9b5	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9b8	a9 3c		lda #$3c			lda 	#60
.a9ba	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9bd	64 01		stz $01				stz 	1
.a9bf	60		rts				rts
.a9c0					EXTInputSingleCharacter:
.a9c0	da		phx				phx
.a9c1	5a		phy				phy
.a9c2					_EISCWait:
.a9c2	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9c5	c9 00		cmp #$00			cmp 	#0
.a9c7	f0 f9		beq $a9c2			beq 	_EISCWait
.a9c9	7a		ply				ply
.a9ca	fa		plx				plx
.a9cb	60		rts				rts
.a9cc					EXTBreakCheck:
.a9cc	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9cf					EXTReadController:
.a9cf	da		phx				phx
.a9d0	a2 00		ldx #$00			ldx 	#0
.a9d2	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9d4	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9d7	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9d9	f0 04		beq $a9df			beq 	_NoSet1
.a9db	8a		txa				txa
.a9dc	09 01		ora #$01			ora 	#1
.a9de	aa		tax				tax
.a9df					_NoSet1:
.a9df	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a9e1	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9e4	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a9e6	f0 04		beq $a9ec			beq 	_NoSet1
.a9e8	8a		txa				txa
.a9e9	09 02		ora #$02			ora 	#2
.a9eb	aa		tax				tax
.a9ec					_NoSet1:
.a9ec	a9 06		lda #$06			lda 	#(($32) >> 3)
.a9ee	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9f1	29 04		and #$04			and 	#($01 << (($32) & 7))
.a9f3	f0 04		beq $a9f9			beq 	_NoSet1
.a9f5	8a		txa				txa
.a9f6	09 04		ora #$04			ora 	#4
.a9f8	aa		tax				tax
.a9f9					_NoSet1:
.a9f9	a9 04		lda #$04			lda 	#(($25) >> 3)
.a9fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9fe	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa00	f0 04		beq $aa06			beq 	_NoSet1
.aa02	8a		txa				txa
.aa03	09 08		ora #$08			ora 	#8
.aa05	aa		tax				tax
.aa06					_NoSet1:
.aa06	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa08	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa0b	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa0d	f0 04		beq $aa13			beq 	_NoSet1
.aa0f	8a		txa				txa
.aa10	09 10		ora #$10			ora 	#16
.aa12	aa		tax				tax
.aa13					_NoSet1:
.aa13	8a		txa				txa
.aa14	fa		plx				plx
.aa15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7b3					GRVectorTable:
>b7b3	11 ac					.word	GXInitialise             ; $00 Initialise
>b7b5	2b ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7b7	73 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7b9	c3 ab					.word	GXClearBitmap            ; $03 Clear
>b7bb	02 ae					.word	GXSetColourMode          ; $04 Colour
>b7bd	ca af					.word	GXFontHandler            ; $05 DrawFont
>b7bf	12 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7c1	7e b0					.word	GXSelect                 ; $07 SpriteUse
>b7c3	a7 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7c5	2e b2					.word	GXCollide                ; $09 SpriteCollide
>b7c7	75 aa					.word	GRUndefined              ; $0a
>b7c9	75 aa					.word	GRUndefined              ; $0b
>b7cb	75 aa					.word	GRUndefined              ; $0c
>b7cd	75 aa					.word	GRUndefined              ; $0d
>b7cf	75 aa					.word	GRUndefined              ; $0e
>b7d1	75 aa					.word	GRUndefined              ; $0f
>b7d3	75 aa					.word	GRUndefined              ; $10
>b7d5	75 aa					.word	GRUndefined              ; $11
>b7d7	75 aa					.word	GRUndefined              ; $12
>b7d9	75 aa					.word	GRUndefined              ; $13
>b7db	75 aa					.word	GRUndefined              ; $14
>b7dd	75 aa					.word	GRUndefined              ; $15
>b7df	75 aa					.word	GRUndefined              ; $16
>b7e1	75 aa					.word	GRUndefined              ; $17
>b7e3	75 aa					.word	GRUndefined              ; $18
>b7e5	75 aa					.word	GRUndefined              ; $19
>b7e7	75 aa					.word	GRUndefined              ; $1a
>b7e9	75 aa					.word	GRUndefined              ; $1b
>b7eb	75 aa					.word	GRUndefined              ; $1c
>b7ed	75 aa					.word	GRUndefined              ; $1d
>b7ef	75 aa					.word	GRUndefined              ; $1e
>b7f1	75 aa					.word	GRUndefined              ; $1f
>b7f3	73 aa					.word	GXMove                   ; $20 Move
>b7f5	d0 ac					.word	GXLine                   ; $21 Line
>b7f7	4b ae					.word	GXFrameRectangle         ; $22 FrameRect
>b7f9	48 ae					.word	GXFillRectangle          ; $23 FillRect
>b7fb	7a aa					.word	GXFrameCircle            ; $24 FrameCircle
>b7fd	76 aa					.word	GXFillCircle             ; $25 FillCircle
>b7ff	75 aa					.word	GRUndefined              ; $26
>b801	75 aa					.word	GRUndefined              ; $27
>b803	30 ae					.word	GXPlotPoint              ; $28 Plot
>b805	3d b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa16					GXGraphicDraw:
.aa16	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa18	b0 06		bcs $aa20			bcs 	_GDCoordinate
.aa1a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa1c	84 37		sty $37				sty 	gxzTemp0+1
.aa1e	80 4b		bra $aa6b			bra 	_GDExecuteA 				; and execute
.aa20					_GDCoordinate:
.aa20	48		pha				pha 								; save AXY
.aa21	da		phx				phx
.aa22	5a		phy				phy
.aa23	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa25					_GDCopy1:
.aa25	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa28	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa2b	ca		dex				dex
.aa2c	10 f7		bpl $aa25			bpl 	_GDCopy1
.aa2e	68		pla				pla 								; update Y
.aa2f	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa32	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa35	68		pla				pla
.aa36	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa39	68		pla				pla 								; get A (command+X.1) back
.aa3a	48		pha				pha
.aa3b	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa3d	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa40	68		pla				pla 								; get command back
.aa41	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa43	48		pha				pha 								; push back.
.aa44	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa46	f0 17		beq $aa5f			beq 	_GDCopyToWorkArea
.aa48	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa4b	f0 07		beq $aa54			beq 	_GDCheckY
.aa4d	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa50	c9 40		cmp #$40			cmp 	#64
.aa52	b0 08		bcs $aa5c			bcs 	_GDError1
.aa54					_GDCheckY:
.aa54	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa57	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa5a	90 03		bcc $aa5f			bcc 	_GDCopyToWorkArea
.aa5c					_GDError1:
.aa5c	68		pla				pla
.aa5d					_GDError2:
.aa5d	38		sec				sec
.aa5e	60		rts				rts
.aa5f					_GDCopyToWorkArea:
.aa5f	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa61					_GDCopy2:
.aa61	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa64	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa67	ca		dex				dex
.aa68	10 f7		bpl $aa61			bpl 	_GDCopy2
.aa6a	68		pla				pla 								; get command
.aa6b					_GDExecuteA:
.aa6b	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa6d	b0 ee		bcs $aa5d			bcs 	_GDError2
.aa6f	aa		tax				tax
.aa70	7c b3 b7	jmp ($b7b3,x)			jmp 	(GRVectorTable,x)
.aa73					GXMove:
.aa73	18		clc				clc
.aa74	60		rts				rts
.aa75					GRUndefined:
>aa75	db						.byte 	$DB 						; causes a break in the emulator
.aa76					GXFillCircle:
.aa76	a9 ff		lda #$ff			lda 	#255
.aa78	80 02		bra $aa7c			bra 	GXCircle
.aa7a					GXFrameCircle:
.aa7a	a9 00		lda #$00			lda 	#0
.aa7c					GXCircle:
.aa7c	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa7f	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa82	f0 26		beq $aaaa			beq 	_GXCFail
.aa84	20 d5 b2	jsr $b2d5			jsr 	GXSortXY 					; topleft/bottomright
.aa87	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.aa8a	20 7c ab	jsr $ab7c			jsr 	GXCircleSetup 				; set up for drawing
.aa8d	9c de 06	stz $06de			stz 	gxYChanged
.aa90					_GXCircleDraw:
.aa90	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aa93	cd dc 06	cmp $06dc			cmp 	gYCentre
.aa96	90 0a		bcc $aaa2			bcc 	_GXCircleContinue
.aa98	d0 03		bne $aa9d			bne 	_GXNoLast
.aa9a	20 af aa	jsr $aaaf			jsr 	GXPlot1
.aa9d					_GXNoLast:
.aa9d	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; close the bitmap
.aaa0	18		clc				clc
.aaa1	60		rts				rts
.aaa2					_GXCircleContinue:
.aaa2	20 ac aa	jsr $aaac			jsr 	GXPlot2 					; draw it
.aaa5	20 29 ab	jsr $ab29			jsr 	GXCircleMove 				; adjust the coordinates
.aaa8	80 e6		bra $aa90			bra 	_GXCircleDraw
.aaaa					_GXCFail:
.aaaa	38		sec				sec
.aaab	60		rts				rts
.aaac					GXPlot2:
.aaac	20 af aa	jsr $aaaf			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aaaf					GXPlot1:
.aaaf	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aab2	f0 03		beq $aab7			beq 	_GXPlot1Only
.aab4	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; plot and negate
.aab7					_GXPlot1Only:
.aab7	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; twice, undoing negation
.aaba	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aabd	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aac0	8d dc 06	sta $06dc			sta 	gYCentre
.aac3	8e db 06	stx $06db			stx 	gXCentre
.aac6	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aac9	a9 ff		lda #$ff			lda 	#$FF
.aacb	8d de 06	sta $06de			sta 	gxYChanged
.aace	60		rts				rts
.aacf	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; do once
.aad2	60		rts				rts
.aad3	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aad6	f0 05		beq $aadd			beq 	_GXPlot0Always
.aad8	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aadb	f0 2d		beq $ab0a			beq 	GXPlot0Exit
.aadd					_GXPlot0Always:
.aadd	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aadf	ad dc 06	lda $06dc			lda 	gYCentre
.aae2	20 0b ab	jsr $ab0b			jsr 	GXSubCopy
.aae5	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aae7	ad db 06	lda $06db			lda 	gXCentre
.aaea	20 0b ab	jsr $ab0b			jsr 	GXSubCopy
.aaed	48		pha				pha 									; save last offset X
.aaee	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 					; calculate position/offset.
.aaf1	68		pla				pla
.aaf2	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aaf3	85 36		sta $36				sta 	gxzTemp0
.aaf5	64 37		stz $37				stz 	gxzTemp0+1
.aaf7	26 37		rol $37				rol 	gxzTemp0+1
.aaf9	ad dd 06	lda $06dd			lda 	gxIsFillMode
.aafc	69 80		adc #$80			adc 	#128
.aafe	20 9b ae	jsr $ae9b			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab01	38		sec				sec 									; GY = -GY
.ab02	a9 00		lda #$00			lda 	#0
.ab04	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab07	8d dc 06	sta $06dc			sta 	gYCentre
.ab0a					GXPlot0Exit:
.ab0a	60		rts				rts
.ab0b					GXSubCopy:
.ab0b	85 36		sta $36				sta 	gxzTemp0
.ab0d	64 37		stz $37				stz 	gxzTemp0+1
.ab0f	29 80		and #$80			and 	#$80
.ab11	f0 02		beq $ab15			beq 	_GXNoSx
.ab13	c6 37		dec $37				dec 	gxzTemp0+1
.ab15					_GXNoSx:
.ab15	38		sec				sec
.ab16	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab19	e5 36		sbc $36				sbc 	gxzTemp0
.ab1b	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab1e	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab21	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab23	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab26	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab28	60		rts				rts
.ab29					GXCircleMove:
.ab29	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab2c	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab2e	10 0d		bpl $ab3d			bpl 	_GXEMPositive
.ab30	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab33	ad db 06	lda $06db			lda 	gXCentre
.ab36	20 5c ab	jsr $ab5c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab39	a9 06		lda #$06			lda 	#6  						; and add 6
.ab3b	80 15		bra $ab52			bra 	_GXEMAddD
.ab3d					_GXEMPositive:
.ab3d	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab40	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab43	38		sec				sec 								; calculate X-Y
.ab44	ad db 06	lda $06db			lda 	gXCentre
.ab47	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab4a	20 5c ab	jsr $ab5c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab4d	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab4f	ce de 06	dec $06de			dec 	gxYChanged
.ab52					_GXEMAddD:
.ab52	18		clc				clc
.ab53	65 38		adc $38				adc 	gxzTemp1
.ab55	85 38		sta $38				sta 	gxzTemp1
.ab57	90 02		bcc $ab5b			bcc 	_GXEMNoCarry
.ab59	e6 39		inc $39				inc 	gxzTemp1+1
.ab5b					_GXEMNoCarry:
.ab5b	60		rts				rts
.ab5c					_GXAdd4TimesToD:
.ab5c	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab5e	29 80		and #$80			and 	#$80
.ab60	f0 02		beq $ab64			beq 	_GXA4Unsigned
.ab62	a9 ff		lda #$ff			lda 	#$FF
.ab64					_GXA4Unsigned:
.ab64	85 37		sta $37				sta 	gxzTemp0+1
.ab66	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab68	26 37		rol $37				rol 	gxzTemp0+1
.ab6a	06 36		asl $36				asl 	gxzTemp0
.ab6c	26 37		rol $37				rol 	gxzTemp0+1
.ab6e	18		clc				clc 								; add
.ab6f	a5 36		lda $36				lda		gxzTemp0
.ab71	65 38		adc $38				adc 	gxzTemp1
.ab73	85 38		sta $38				sta 	gxzTemp1
.ab75	a5 37		lda $37				lda		gxzTemp0+1
.ab77	65 39		adc $39				adc 	gxzTemp1+1
.ab79	85 39		sta $39				sta 	gxzTemp1+1
.ab7b	60		rts				rts
.ab7c					GXCircleSetup:
.ab7c	38		sec				sec
.ab7d	ad 48 06	lda $0648			lda 	gxY1
.ab80	ed 44 06	sbc $0644			sbc 	gxY0
.ab83	4a		lsr a				lsr 	a
.ab84	8d da 06	sta $06da			sta 	gxRadius
.ab87	a2 00		ldx #$00			ldx 	#0
.ab89	20 ab ab	jsr $abab			jsr 	_GXCalculateCentre
.ab8c	a2 02		ldx #$02			ldx 	#2
.ab8e	20 ab ab	jsr $abab			jsr 	_GXCalculateCentre
.ab91	9c db 06	stz $06db			stz 	gXCentre
.ab94	ad da 06	lda $06da			lda 	gxRadius
.ab97	8d dc 06	sta $06dc			sta 	gYCentre
.ab9a	0a		asl a				asl 	a 							; R x 2
.ab9b	85 36		sta $36				sta 	gxzTemp0
.ab9d	38		sec				sec
.ab9e	a9 03		lda #$03			lda 	#3
.aba0	e5 36		sbc $36				sbc 	gxzTemp0
.aba2	85 38		sta $38				sta 	gxzTemp1
.aba4	a9 00		lda #$00			lda 	#0
.aba6	e9 00		sbc #$00			sbc 	#0
.aba8	85 39		sta $39				sta 	gxzTemp1+1
.abaa	60		rts				rts
.abab					_GXCalculateCentre:
.abab	38		sec				sec
.abac	bd 46 06	lda $0646,x			lda 	gxX1,x
.abaf	7d 42 06	adc $0642,x			adc 	gXX0,x
.abb2	9d 46 06	sta $0646,x			sta 	gXX1,x
.abb5	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abb8	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abbb	4a		lsr a				lsr 	a
.abbc	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abbf	7e 46 06	ror $0646,x			ror 	gXX1,x
.abc2	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abc3					GXClearBitmap:
.abc3	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abc6	f0 24		beq $abec			beq 	_GXCBFail
.abc8	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start access
.abcb	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abcd	ad 4e 06	lda $064e			lda 	gxHeight
.abd0	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abd2	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abd4					_GXCalcLastPage:
.abd4	98		tya				tya 								; add to base page
.abd5	18		clc				clc
.abd6	6d 4c 06	adc $064c			adc 	gxBasePage
.abd9	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abdb					_GXClearAll:
.abdb	20 ee ab	jsr $abee			jsr 	_GXClearBlock 				; clear 8k block
.abde	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abe0	a5 0b		lda $0b				lda 	GXEditSlot
.abe2	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abe5	b0 f4		bcs $abdb			bcs 	_GXClearAll
.abe7	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap	 			; stop access
.abea	18		clc				clc
.abeb	60		rts				rts
.abec					_GXCBFail:
.abec	38		sec				sec
.abed	60		rts				rts
.abee					_GXClearBlock:
.abee	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abf0	85 38		sta $38				sta 	0+gxzTemp1
.abf2	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abf4	85 39		sta $39				sta 	1+gxzTemp1
.abf6					_GXCB0:
.abf6	a5 36		lda $36				lda 	gxzTemp0
.abf8	a0 00		ldy #$00			ldy 	#0
.abfa					_GXCB1:
.abfa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abfc	c8		iny				iny
.abfd	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abff	c8		iny				iny
.ac00	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac02	c8		iny				iny
.ac03	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac05	c8		iny				iny
.ac06	d0 f2		bne $abfa			bne 	_GXCB1
.ac08	e6 39		inc $39				inc 	gxzTemp1+1
.ac0a	a5 39		lda $39				lda 	gxzTemp1+1
.ac0c	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac0e	d0 e6		bne $abf6			bne 	_GXCB0
.ac10	60		rts				rts
.ac11					GXInitialise:
.ac11	64 01		stz $01				stz 	1
.ac13	a9 01		lda #$01			lda 	#1
.ac15	8d 00 d0	sta $d000			sta 	$D000
.ac18	18		clc				clc
.ac19	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac1c	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac1f	a2 0f		ldx #$0f			ldx 	#15
.ac21					_GXIClear:
.ac21	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac24	ca		dex				dex
.ac25	10 fa		bpl $ac21			bpl 	_GXIClear
.ac27	20 c2 ac	jsr $acc2			jsr 	GXClearSpriteStore
.ac2a	60		rts				rts
.ac2b					GXControlBitmap:
.ac2b	64 01		stz $01				stz 	1
.ac2d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac2f	29 01		and #$01			and 	#1 							; set bitmap flag
.ac31	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac34	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac35	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac38	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac3a	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac3c	90 02		bcc $ac40			bcc 	_CBNotOn
.ac3e	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac40					_CBNotOn:
.ac40	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac43	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac45	29 07		and #$07			and 	#7
.ac47	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac4a	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac4c	d0 02		bne $ac50			bne 	_CBNotDefault
.ac4e	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac50					_CBNotDefault:
.ac50	8d 4c 06	sta $064c			sta 	gxBasePage
.ac53	20 b4 ac	jsr $acb4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac56	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac58	8d 03 d1	sta $d103			sta 	$D103
.ac5b	a5 36		lda $36				lda 	gxzTemp0
.ac5d	8d 02 d1	sta $d102			sta 	$D102
.ac60	9c 01 d1	stz $d101			stz 	$D101
.ac63	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac65	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac68	29 01		and #$01			and 	#1
.ac6a	f0 02		beq $ac6e			beq 	_CBHaveHeight
.ac6c	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac6e					_CBHaveHeight
.ac6e	8e 4e 06	stx $064e			stx 	gxHeight
.ac71	18		clc				clc
.ac72	60		rts				rts
.ac73					GXControlSprite:
.ac73	64 01		stz $01				stz 	1
.ac75	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac77	29 01		and #$01			and 	#1 							; set sprites flag
.ac79	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac7c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac7d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac80	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac82	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac84	90 02		bcc $ac88			bcc 	_CSNotOn
.ac86	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac88					_CSNotOn:
.ac88	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac8b	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac8d	d0 02		bne $ac91			bne 	_CSNotDefault
.ac8f	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac91					_CSNotDefault:
.ac91	8d 4d 06	sta $064d			sta 	gxSpritePage
.ac94	20 b4 ac	jsr $acb4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac97	a5 36		lda $36				lda 	zTemp0
.ac99	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.ac9c	a5 37		lda $37				lda 	zTemp0+1
.ac9e	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.aca1	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aca3					_CSClear:
.aca3	9e 00 d9	stz $d900,x			stz 	$D900,x
.aca6	9e 00 da	stz $da00,x			stz 	$DA00,x
.aca9	ca		dex				dex
.acaa	d0 f7		bne $aca3			bne 	_CSClear
.acac	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acaf	20 c2 ac	jsr $acc2			jsr 	GXClearSpriteStore
.acb2	18		clc				clc
.acb3	60		rts				rts
.acb4					GXCalculateBaseAddress:
.acb4	85 36		sta $36				sta 	gxzTemp0
.acb6	64 37		stz $37				stz 	gxzTemp0+1
.acb8	a9 05		lda #$05			lda 	#5
.acba					_GXShift:
.acba	06 36		asl $36				asl 	gxzTemp0
.acbc	26 37		rol $37				rol 	gxzTemp0+1
.acbe	3a		dec a				dec		a
.acbf	d0 f9		bne $acba			bne 	_GXShift
.acc1	60		rts				rts
.acc2					GXClearSpriteStore:
.acc2	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acc4					_GXCSSLoop:
.acc4	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.acc7	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.acc9	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.accc	ca		dex				dex
.accd	10 f5		bpl $acc4			bpl 	_GXCSSLoop
.accf	60		rts				rts
.acd0					GXLine:
.acd0	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acd3	f0 28		beq $acfd			beq 	_GXLFail
.acd5	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap
.acd8	20 f3 b2	jsr $b2f3			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acdb	20 a3 ad	jsr $ada3			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acde	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; calculate position/offset.
.ace1					_GXDrawLoop:
.ace1	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ace4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ace6	2d 52 06	and $0652			and 	gxANDValue
.ace9	4d 51 06	eor $0651			eor 	gxEORValue
.acec	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acee	20 ff ac	jsr $acff			jsr 	GXLineIsComplete 			; is the line complete ?
.acf1	f0 05		beq $acf8			beq 	_GXLExit
.acf3	20 1a ad	jsr $ad1a			jsr 	GXLineAdvance 				; code as per advance method
.acf6	80 e9		bra $ace1			bra 	_GXDrawLoop
.acf8					_GXLExit:
.acf8	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.acfb	18		clc				clc
.acfc	60		rts				rts
.acfd					_GXLFail:
.acfd	38		sec				sec
.acfe	60		rts				rts
.acff					GXLineIsComplete:
.acff	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad02	d0 0f		bne $ad13			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad04	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad07	4d 46 06	eor $0646			eor 	GXX1
.ad0a	d0 06		bne $ad12			bne 	_GXLICExit
.ad0c	ad 43 06	lda $0643			lda 	GXX0+1
.ad0f	4d 47 06	eor $0647			eor 	GXX1+1
.ad12					_GXLICExit:
.ad12	60		rts				rts
.ad13					_GXLICCompareY:
.ad13	ad 48 06	lda $0648			lda 	GXY1
.ad16	4d 44 06	eor $0644			eor 	GXY0
.ad19	60		rts				rts
.ad1a					GXLineAdvance:
.ad1a	18		clc				clc 								; add adjust to position
.ad1b	ad e3 06	lda $06e3			lda 	GXPosition
.ad1e	6d e4 06	adc $06e4			adc 	GXAdjust
.ad21	8d e3 06	sta $06e3			sta 	GXPosition
.ad24	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad27	b0 05		bcs $ad2e			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad29	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad2c	90 0a		bcc $ad38			bcc 	_GXLANoExtra
.ad2e					_GXLAOverflow:
.ad2e	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad31	38		sec				sec 								; subtract total and write back
.ad32	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad35	8d e3 06	sta $06e3			sta 	GXPosition
.ad38					_GXLANoExtra:
.ad38	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad3b	f0 0d		beq $ad4a			beq 	_GXDXLarger
.ad3d	20 9c ad	jsr $ad9c			jsr 	GXIncrementY
.ad40	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad43	f0 10		beq $ad55			beq 	_GXLAExit
.ad45	20 56 ad	jsr $ad56			jsr 	GXAdjustX
.ad48	80 0b		bra $ad55			bra 	_GXLAExit
.ad4a					_GXDXLarger:
.ad4a	20 56 ad	jsr $ad56			jsr 	GXAdjustX
.ad4d	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad50	f0 03		beq $ad55			beq 	_GXLAExit
.ad52	20 9c ad	jsr $ad9c			jsr 	GXIncrementY
.ad55					_GXLAExit:
.ad55	60		rts				rts
.ad56					GXAdjustX:
.ad56	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad59	10 25		bpl $ad80			bpl 	_GXAXRight
.ad5b	ad 42 06	lda $0642			lda 	GXX0
.ad5e	d0 03		bne $ad63			bne 	_GXAXNoBorrow
.ad60	ce 43 06	dec $0643			dec 	GXX0+1
.ad63					_GXAXNoBorrow:
.ad63	ce 42 06	dec $0642			dec 	GXX0
.ad66	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad69	ad 54 06	lda $0654			lda 	gsOffset
.ad6c	c9 ff		cmp #$ff			cmp 	#$FF
.ad6e	d0 0f		bne $ad7f			bne 	_GXAYExit 					; underflow
.ad70	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad72	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad74	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad76	b0 07		bcs $ad7f			bcs 	_GXAYExit
.ad78	18		clc				clc
.ad79	69 20		adc #$20			adc 	#$20 						; fix up
.ad7b	85 3d		sta $3d				sta 	gxzScreen+1
.ad7d	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad7f					_GXAYExit:
.ad7f	60		rts				rts
.ad80					_GXAXRight:
.ad80	ee 42 06	inc $0642			inc 	GXX0
.ad83	d0 03		bne $ad88			bne 	_GXAXNoCarry
.ad85	ee 43 06	inc $0643			inc 	GXX0+1
.ad88					_GXAXNoCarry:
.ad88	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ad8b	d0 0e		bne $ad9b			bne 	_GXAXExit 					; if not overflowed, exit.
.ad8d	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad8f	a5 3d		lda $3d				lda 	gxzScreen+1
.ad91	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad93	90 06		bcc $ad9b			bcc 	_GXAXExit
.ad95	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad97	85 3d		sta $3d				sta 	gxzScreen+1
.ad99	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ad9b					_GXAXExit:
.ad9b	60		rts				rts
.ad9c					GXIncrementY:
.ad9c	ee 44 06	inc $0644			inc 	GXY0
.ad9f	20 13 b2	jsr $b213			jsr 	GXMovePositionDown
.ada2	60		rts				rts
.ada3					GXLineSetup:
.ada3	ad 48 06	lda $0648			lda 	GXY1
.ada6	38		sec				sec
.ada7	ed 44 06	sbc $0644			sbc 	GXY0
.adaa	4a		lsr a				lsr 	a
.adab	8d e0 06	sta $06e0			sta 	GXDiffY
.adae	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adb1	38		sec				sec
.adb2	ad 46 06	lda $0646			lda 	GXX1
.adb5	ed 42 06	sbc $0642			sbc 	GXX0
.adb8	8d df 06	sta $06df			sta 	GXDiffX
.adbb	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.adbe	ed 43 06	sbc $0643			sbc 	GXX0+1
.adc1	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.adc2	6e df 06	ror $06df			ror 	GXDiffX
.adc5	0a		asl a				asl 	a
.adc6	10 0c		bpl $add4			bpl 	_GDXNotNegative
.adc8	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.adca	38		sec				sec
.adcb	ed df 06	sbc $06df			sbc 	GXDiffX
.adce	8d df 06	sta $06df			sta 	GXDiffX
.add1	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.add4					_GDXNotNegative:
.add4	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.add7	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adda	8d e4 06	sta $06e4			sta 	GXAdjust
.addd	ad df 06	lda $06df			lda 	GXDiffX
.ade0	8d e5 06	sta $06e5			sta 	GXTotal
.ade3	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ade6	cd df 06	cmp $06df			cmp 	GXDiffX
.ade9	90 0f		bcc $adfa			bcc 	_GDXNotLarger
.adeb	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adee	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.adf1	8d e4 06	sta $06e4			sta 	GXAdjust
.adf4	ad e0 06	lda $06e0			lda 	GXDiffY
.adf7	8d e5 06	sta $06e5			sta 	GXTotal
.adfa					_GDXNotLarger:
.adfa	ad e5 06	lda $06e5			lda 	GXTotal
.adfd	4a		lsr a				lsr 	a
.adfe	8d e3 06	sta $06e3			sta 	GXPosition
.ae01	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae02					GXSetColourMode:
.ae02	a6 36		ldx $36				ldx 	gxzTemp0
.ae04	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae07	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae09	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae0c	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae0e	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae11	ae 50 06	ldx $0650			ldx 	gxColour
.ae14	8e 51 06	stx $0651			stx 	gxEORValue
.ae17	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae19	90 03		bcc $ae1e			bcc 	_GXSDCNotAndColour
.ae1b	8e 52 06	stx $0652			stx 	gxANDValue
.ae1e					_GXSDCNotAndColour:
.ae1e	d0 03		bne $ae23			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae20	9c 51 06	stz $0651			stz 	gxEORValue
.ae23					_GXSDCNotAnd:
.ae23	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae24	90 08		bcc $ae2e			bcc 	_GXSDCNoFlip
.ae26	ad 52 06	lda $0652			lda	 	gxANDValue
.ae29	49 ff		eor #$ff			eor 	#$FF
.ae2b	8d 52 06	sta $0652			sta 	gxANDValue
.ae2e					_GXSDCNoFlip:
.ae2e	18		clc				clc
.ae2f	60		rts				rts
.ae30					GXPlotPoint:
.ae30	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.ae33	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae36	ac 54 06	ldy $0654			ldy 	gsOffset
.ae39	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae3b	2d 52 06	and $0652			and 	gxANDValue
.ae3e	4d 51 06	eor $0651			eor 	gxEORValue
.ae41	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae43	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae46	18		clc				clc
.ae47	60		rts				rts
.ae48					GXFillRectangle:
.ae48	38		sec				sec
.ae49	80 01		bra $ae4c			bra 	GXRectangle
.ae4b					GXFrameRectangle:
.ae4b	18		clc				clc
.ae4c					GXRectangle:
.ae4c	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae4f	f0 35		beq $ae86			beq 	_GXRFail
.ae51	08		php				php 								; save Fill flag (CS)
.ae52	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.ae55	20 d5 b2	jsr $b2d5			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae58	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae5b	38		sec				sec 								; sec = Draw line
.ae5c	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae5f	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae62	cd 48 06	cmp $0648			cmp 	gxY1
.ae65	f0 19		beq $ae80			beq 	_GXRectangleExit
.ae67					_GXRectLoop:
.ae67	20 13 b2	jsr $b213			jsr 	GXMovePositionDown 			; down one.
.ae6a	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae6d	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae70	cd 48 06	cmp $0648			cmp 	gXY1
.ae73	f0 07		beq $ae7c			beq 	_GXLastLine
.ae75	28		plp				plp 								; get flag back
.ae76	08		php				php
.ae77	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae7a	80 eb		bra $ae67			bra 	_GXRectLoop
.ae7c					_GXLastLine:
.ae7c	38		sec				sec
.ae7d	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0
.ae80					_GXRectangleExit:
.ae80	68		pla				pla 								; throw fill flag.
.ae81	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae84	18		clc				clc
.ae85	60		rts				rts
.ae86					_GXRFail:
.ae86	38		sec				sec
.ae87	60		rts				rts
.ae88					GXDrawLineX1X0:
.ae88	08		php				php 								; save solid/either-end
.ae89	38		sec				sec
.ae8a	ad 46 06	lda $0646			lda		gXX1
.ae8d	ed 42 06	sbc $0642			sbc 	gXX0
.ae90	85 36		sta $36				sta 	gxzTemp0
.ae92	ad 47 06	lda $0647			lda 	gXX1+1
.ae95	ed 43 06	sbc $0643			sbc 	gXX0+1
.ae98	85 37		sta $37				sta 	gxzTemp0+1
.ae9a	28		plp				plp
.ae9b					GXDrawLineTemp0:
.ae9b	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.ae9d	48		pha				pha
.ae9e	a5 3d		lda $3d				lda 	gxzScreen+1
.aea0	48		pha				pha
.aea1	ad 54 06	lda $0654			lda 	gsOffset
.aea4	48		pha				pha
.aea5	a5 0b		lda $0b				lda 	GXEditSlot
.aea7	48		pha				pha
.aea8	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aeab	90 1e		bcc $aecb			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aead					_GXDLTLine:
.aead	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeaf	2d 52 06	and $0652			and 	gxANDValue
.aeb2	4d 51 06	eor $0651			eor 	gxEORValue
.aeb5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeb7	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aeb9	d0 04		bne $aebf			bne 	_GXDLTNoBorrow
.aebb	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aebd	30 2e		bmi $aeed			bmi 	_GXDLTExit
.aebf					_GXDLTNoBorrow:
.aebf	c6 36		dec $36				dec 	gxzTemp0
.aec1	c8		iny				iny 								; next slot.
.aec2	d0 e9		bne $aead			bne 	_GXDLTLine
.aec4	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aec6	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap				; check for new page.
.aec9	80 e2		bra $aead			bra 	_GXDLTLine
.aecb					_GXDLTEndPoints:
.aecb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aecd	2d 52 06	and $0652			and 	gxANDValue
.aed0	4d 51 06	eor $0651			eor 	gxEORValue
.aed3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed5	98		tya				tya 								; advance to right side
.aed6	18		clc				clc
.aed7	65 36		adc $36				adc 	gxzTemp0
.aed9	a8		tay				tay
.aeda	a5 3d		lda $3d				lda 	gxzScreen+1
.aedc	65 37		adc $37				adc 	gxzTemp0+1
.aede	85 3d		sta $3d				sta 	gxzScreen+1
.aee0	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap 			; fix up.
.aee3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aee5	2d 52 06	and $0652			and 	gxANDValue
.aee8	4d 51 06	eor $0651			eor 	gxEORValue
.aeeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeed					_GXDLTExit:
.aeed	68		pla				pla
.aeee	85 0b		sta $0b				sta 	GXEditSlot
.aef0	68		pla				pla
.aef1	8d 54 06	sta $0654			sta 	gsOffset
.aef4	68		pla				pla
.aef5	85 3d		sta $3d				sta 	gxzScreen+1
.aef7	68		pla				pla
.aef8	85 3c		sta $3c				sta 	gxzScreen
.aefa	60		rts				rts
.aefb					GXDLTCheckWrap:
.aefb	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.aefd	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.aeff	90 06		bcc $af07			bcc 	_GXDLTCWExit
.af01	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af03	85 3d		sta $3d				sta 	gxzScreen+1
.af05	e6 0b		inc $0b				inc 	GXEditSlot
.af07					_GXDLTCWExit:
.af07	60		rts				rts
.af08					GXDrawGraphicElement:
.af08	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af0b	3a		dec a				dec 	a
.af0c	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af0f	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af12	f0 67		beq $af7b			beq 	_GXSLFail
.af14	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af17	48		pha				pha
.af18	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af1b	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af1e	20 ad b1	jsr $b1ad			jsr 	gxOpenBitmap 				; open the bitmap.
.af21	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af24	4a		lsr a				lsr 	a
.af25	4a		lsr a				lsr 	a
.af26	4a		lsr a				lsr 	a
.af27	29 07		and #$07			and		#7
.af29	1a		inc a				inc 	a
.af2a	8d eb 06	sta $06eb			sta 	gxScale
.af2d	64 38		stz $38				stz 	gxzTemp1					; start first line
.af2f					_GXGELoop:
.af2f	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af31	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af34	10 06		bpl $af3c			bpl		_GXNoVFlip
.af36	ad e8 06	lda $06e8			lda 	gxMask
.af39	38		sec				sec
.af3a	e5 38		sbc $38				sbc 	gxzTemp1
.af3c					_GXNoVFlip:
.af3c	aa		tax				tax 								; get the Xth line.
.af3d	20 7d af	jsr $af7d			jsr 	_GXCallAcquire 				; get that data.
.af40	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af43	85 39		sta $39				sta 	gxzTemp1+1
.af45					_GXGELoop2:
.af45	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af48	cd 4e 06	cmp $064e			cmp 	gxHeight
.af4b	b0 10		bcs $af5d			bcs 	_GXDGEExit
.af4d	20 80 af	jsr $af80			jsr 	GXRenderOneLine 			; render line
.af50	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af52	d0 f1		bne $af45			bne 	_GXGELoop2
.af54	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af56	a5 38		lda $38				lda 	gxzTemp1
.af58	cd e7 06	cmp $06e7			cmp 	gxSize
.af5b	d0 d2		bne $af2f			bne 	_GXGELoop
.af5d					_GXDGEExit:
.af5d	68		pla				pla 								; restore Y for next time
.af5e	8d 44 06	sta $0644			sta 	gxY0
.af61	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af64					_GXShiftLeft:
.af64	18		clc				clc
.af65	ad e7 06	lda $06e7			lda 	gxSize
.af68	6d 42 06	adc $0642			adc 	gxX0
.af6b	8d 42 06	sta $0642			sta 	gxX0
.af6e	90 03		bcc $af73			bcc 	_GXSLNoCarry
.af70	ee 43 06	inc $0643			inc 	gxX0+1
.af73					_GXSLNoCarry:
.af73	ca		dex				dex
.af74	d0 ee		bne $af64			bne 	_GXShiftLeft
.af76	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.af79	18		clc				clc
.af7a	60		rts				rts
.af7b					_GXSLFail:
.af7b	38		sec				sec
.af7c	60		rts				rts
.af7d					_GXCallAcquire:
.af7d	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af80					GXRenderOneLine:
.af80	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; calculate position/offset.
.af83	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.af86	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af88					_GXROLLoop1:
.af88	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.af8b	85 3b		sta $3b				sta 	gxzTemp2+1
.af8d					_GXROLLoop2:
.af8d	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af8f	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.af92	50 06		bvc $af9a			bvc 	_GXNoHFlip
.af94	ad e8 06	lda $06e8			lda 	gxMask
.af97	38		sec				sec
.af98	e5 3a		sbc $3a				sbc 	gxzTemp2
.af9a					_GXNoHFlip:
.af9a	aa		tax				tax 								; read from the pixel buffer
.af9b	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.af9e	d0 07		bne $afa7			bne 	_GXDraw 					; draw if non zero
.afa0	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afa3	29 04		and #$04			and 	#4
.afa5	f0 0a		beq $afb1			beq 	_GXZeroPixel
.afa7					_GXDraw:
.afa7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afa9	2d 52 06	and $0652			and 	gxANDValue
.afac	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afaf	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afb1					_GXZeroPixel:
.afb1	c8		iny				iny 								; advance pointer
.afb2	d0 05		bne $afb9			bne 	_GXNoShift
.afb4	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afb6	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap				; check for new page.
.afb9					_GXNoShift:
.afb9	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afbb	d0 d0		bne $af8d			bne 	_GXROLLoop2
.afbd	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afbf	a5 3a		lda $3a				lda 	gxzTemp2
.afc1	cd e7 06	cmp $06e7			cmp 	gxSize
.afc4	d0 c2		bne $af88			bne 	_GXROLLoop1
.afc6	ee 44 06	inc $0644			inc 	gxY0
.afc9	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afca					GXFontHandler:
.afca	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afcc	4d 4f 06	eor $064f			eor 	gxMode
.afcf	8d ec 06	sta $06ec			sta 	gxUseMode
.afd2	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afd4	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afd6	26 37		rol $37				rol	 	gxzTemp0+1
.afd8	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afda	26 37		rol $37				rol	 	gxzTemp0+1
.afdc	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afde	26 37		rol $37				rol	 	gxzTemp0+1
.afe0	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afe2	09 c0		ora #$c0			ora 	#$C0
.afe4	85 37		sta $37				sta 	gxzTemp0+1
.afe6	a9 08		lda #$08			lda 	#8 							; size 8x8
.afe8	a2 f0		ldx #$f0			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.afea	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.afec	20 08 af	jsr $af08			jsr 	GXDrawGraphicElement
.afef	60		rts				rts
.aff0					GXGetGraphicDataFont:
.aff0	8a		txa				txa 								; X->Y
.aff1	a8		tay				tay
.aff2	a6 01		ldx $01				ldx 	1 							; preserve old value
.aff4	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.aff6	85 01		sta $01				sta 	1
.aff8	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.affa	86 01		stx $01				stx 	1 							; put old value back.
.affc	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.affe					_GXExpand:
.affe	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b001	0a		asl a				asl 	a 							; shift bit 7 into C
.b002	90 08		bcc $b00c			bcc 	_GXNoPixel
.b004	48		pha				pha 								; if set, set pixel buffer to current colour.
.b005	ad 50 06	lda $0650			lda 	gxColour
.b008	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b00b	68		pla				pla
.b00c					_GXNoPixel:
.b00c	e8		inx				inx 								; do the whole byte.
.b00d	e0 08		cpx #$08			cpx 	#8
.b00f	d0 ed		bne $affe			bne 	_GXExpand
.b011	60		rts				rts
.b012					GXSpriteHandler:
.b012	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b014	4d 4f 06	eor $064f			eor 	gxMode
.b017	8d ec 06	sta $06ec			sta 	gxUseMode
.b01a	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b01c	da		phx				phx
.b01d	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; can access sprite information
.b020	68		pla				pla
.b021	20 8e b2	jsr $b28e			jsr 	GXFindSprite 				; get the sprite address
.b024	08		php				php
.b025	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b028	28		plp				plp
.b029	b0 0a		bcs $b035			bcs		_GXSHExit 					; exit if find failed.
.b02b	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b02e	a2 36		ldx #$36			ldx 	#GXSpriteAcquire & $FF
.b030	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b032	20 08 af	jsr $af08			jsr 	GXDrawGraphicElement
.b035					_GXSHExit:
.b035	60		rts				rts
.b036					GXSpriteAcquire:
.b036	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b039	85 0b		sta $0b				sta 	GXEditSlot
.b03b	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b03d	a9 00		lda #$00			lda 	#0
.b03f	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b042					_GXTimesRowNumber:
.b042	18		clc				clc
.b043	65 36		adc $36				adc 	zTemp0
.b045	ca		dex				dex
.b046	10 fa		bpl $b042			bpl 	_GXTimesRowNumber
.b048	64 37		stz $37				stz 	gxzTemp0+1
.b04a	0a		asl a				asl 	a 							; row x 2,4,6,8
.b04b	26 37		rol $37				rol 	gxzTemp0+1
.b04d	0a		asl a				asl 	a 							; row x 4,8,12,16
.b04e	26 37		rol $37				rol 	gxzTemp0+1
.b050	0a		asl a				asl 	a 							; row x 8,16,24,32
.b051	26 37		rol $37				rol 	gxzTemp0+1
.b053	85 36		sta $36				sta 	gxzTemp0
.b055	18		clc				clc 								; add base address.
.b056	a5 36		lda $36				lda 	gxzTemp0
.b058	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b05b	85 36		sta $36				sta 	gxzTemp0
.b05d	a5 37		lda $37				lda 	gxzTemp0+1
.b05f	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b062					_GXSAFindPage:
.b062	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b064	90 06		bcc $b06c			bcc 	_GXSAFoundPage
.b066	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b068	e6 0b		inc $0b				inc 	GXEditSlot
.b06a	80 f6		bra $b062			bra 	_GXSAFindPage
.b06c					_GXSAFoundPage:
.b06c	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b06e	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b070	a0 00		ldy #$00			ldy 	#0
.b072					_GXSACopyLoop:
.b072	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b074	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b077	c8		iny				iny
.b078	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b07b	d0 f5		bne $b072			bne 	_GXSACopyLoop
.b07d	60		rts				rts
.b07e					GXSelect:
.b07e	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b081	f0 22		beq $b0a5			beq 	_GXSFail
.b083	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b085	c9 40		cmp #$40			cmp 	#64
.b087	b0 1c		bcs $b0a5			bcs 	_GXSFail
.b089	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b08c	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b08e	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b090	06 36		asl $36				asl 	gxzTemp0
.b092	06 36		asl $36				asl 	gxzTemp0
.b094	06 36		asl $36				asl 	gxzTemp0
.b096	2a		rol a				rol 	a
.b097	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b099	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b09c	85 37		sta $37				sta 	gxzTemp0+1
.b09e	a5 36		lda $36				lda 	gxzTemp0
.b0a0	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0a3	18		clc				clc
.b0a4	60		rts				rts
.b0a5					_GXSFail:
.b0a5	38		sec				sec
.b0a6	60		rts				rts
.b0a7					GXSelectImage:
.b0a7	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0aa	f0 74		beq $b120			beq 	_GXSIFail
.b0ac	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0af	f0 6f		beq $b120			beq 	_GXSIFail 					; (checking the MSB)
.b0b1	64 01		stz $01				stz 	1
.b0b3	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0b5	d0 6b		bne $b122			bne 	_GXSIHide
.b0b7	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0b9	48		pha				pha
.b0ba	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap
.b0bd	68		pla				pla
.b0be	20 8e b2	jsr $b28e			jsr 	GXFindSprite
.b0c1	b0 5a		bcs $b11d			bcs 	_GXSICloseFail 				; no image
.b0c3	a0 01		ldy #$01			ldy 	#1
.b0c5	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0c8	85 36		sta $36				sta 	gxzTemp0
.b0ca	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0cd	85 37		sta $37				sta 	gxzTemp0+1
.b0cf	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0d2	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0d4	18		clc				clc
.b0d5	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0d8	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0db	c8		iny				iny
.b0dc	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0de	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0e1	69 00		adc #$00			adc 	#0
.b0e3	c8		iny				iny
.b0e4	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0e6	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b0e9	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0eb	2a		rol a				rol 	a 							; x 2
.b0ec	0a		asl a				asl 	a 							; x 4
.b0ed	0a		asl a				asl 	a 							; x 8
.b0ee	0a		asl a				asl 	a 							; x 16
.b0ef	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b0f2	0a		asl a				asl 	a 							; 1 shift
.b0f3	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0f5	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b0f7	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b0fa	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b0fd	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b100	29 3f		and #$3f			and 	#$3F
.b102	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b105	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b108	6a		ror a				ror 	a 							; shift into bits 6/7
.b109	6a		ror a				ror 	a
.b10a	6a		ror a				ror 	a
.b10b	29 c0		and #$c0			and 	#$C0
.b10d	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b110	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b113	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b116	29 7f		and #$7f			and 	#$7F
.b118	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b11b	18		clc				clc
.b11c	60		rts				rts
.b11d					_GXSICloseFail:
.b11d	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b120					_GXSIFail:
.b120	38		sec				sec
.b121	60		rts				rts
.b122					_GXSIHide:
.b122	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b125	85 36		sta $36				sta 	gxzTemp0
.b127	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b12a	85 37		sta $37				sta 	gxzTemp0+1
.b12c	a9 00		lda #$00			lda 	#0
.b12e	92 36		sta ($36)			sta 	(gxzTemp0)
.b130	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b133	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b136	09 80		ora #$80			ora 	#$80
.b138	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b13b	18		clc				clc
.b13c	60		rts				rts
.b13d					GXMoveSprite:
.b13d	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b140	f0 65		beq $b1a7			beq 	_GXSIFail
.b142	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b145	f0 60		beq $b1a7			beq 	_GXSIFail
.b147	85 37		sta $37				sta 	gxzTemp0+1
.b149	a0 04		ldy #$04			ldy 	#4
.b14b	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b14e	85 36		sta $36				sta 	gxzTemp0
.b150	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b153	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b156	2a		rol a				rol 	a	 						; into bits 0,1.
.b157	2a		rol a				rol 	a
.b158	2a		rol a				rol 	a
.b159	29 03		and #$03			and 	#3
.b15b	aa		tax				tax
.b15c	bd a9 b1	lda $b1a9,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b15f	48		pha				pha
.b160	18		clc				clc
.b161	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b164	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b166	c8		iny				iny
.b167	ad 43 06	lda $0643			lda 	gxX0+1
.b16a	69 00		adc #$00			adc 	#0
.b16c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b16e	c8		iny				iny
.b16f	68		pla				pla
.b170	18		clc				clc
.b171	6d 44 06	adc $0644			adc 	gxY0
.b174	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b176	a9 00		lda #$00			lda 	#0
.b178	69 00		adc #$00			adc 	#0
.b17a	c8		iny				iny
.b17b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b17d	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b180	6e 42 06	ror $0642			ror 	gxX0
.b183	4e 42 06	lsr $0642			lsr 	gxX0
.b186	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b189	4e 44 06	lsr $0644			lsr 	gxY0
.b18c	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b18f	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b192	29 80		and #$80			and 	#$80
.b194	0d 42 06	ora $0642			ora 	gxX0
.b197	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b19a	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b19d	29 c0		and #$c0			and 	#$C0
.b19f	0d 44 06	ora $0644			ora 	gxY0
.b1a2	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1a5	18		clc				clc
.b1a6	60		rts				rts
.b1a7					_GXSIFail:
.b1a7	38		sec				sec
.b1a8	60		rts				rts
.b1a9					_GXMSOffset:
>b1a9	1c						.byte 	32-8/2
>b1aa	18						.byte 	32-16/2
>b1ab	14						.byte 	32-24/2
>b1ac	10						.byte 	32-32/2
.b1ad					GXOpenBitmap:
.b1ad	78		sei				sei 								; no interrupts here
.b1ae	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1b0	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1b3	58		cli				cli
.b1b4	60		rts				rts
.b1b5					GXCloseBitmap:
.b1b5	78		sei				sei
.b1b6	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1b9	85 0b		sta $0b				sta 	GXEditSlot
.b1bb	58		cli				cli
.b1bc	60		rts				rts
.b1bd					GXPositionCalc:
.b1bd	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1bf	48		pha				pha
.b1c0	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1c3	85 3c		sta $3c				sta 	gxzScreen
.b1c5	64 3d		stz $3d				stz 	gxzScreen+1
.b1c7	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1c9	26 3d		rol $3d				rol 	gxzScreen+1
.b1cb	06 3c		asl $3c				asl 	gxzScreen
.b1cd	26 3d		rol $3d				rol 	gxzScreen+1
.b1cf	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1d0	65 3c		adc $3c				adc 	gxzScreen
.b1d2	85 3c		sta $3c				sta 	gxzScreen
.b1d4	90 02		bcc $b1d8			bcc 	_GXPCNoCarry
.b1d6	e6 3d		inc $3d				inc 	gxzScreen+1
.b1d8					_GXPCNoCarry:
.b1d8	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1da	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1dc	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1de	85 36		sta $36				sta 	gxzTemp0
.b1e0	64 3d		stz $3d				stz 	gxzScreen+1
.b1e2	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1e4					_GXPCMultiply32:
.b1e4	06 3c		asl $3c				asl 	gxzScreen
.b1e6	26 3d		rol $3d				rol 	gxzScreen+1
.b1e8	3a		dec a				dec 	a
.b1e9	d0 f9		bne $b1e4			bne 	_GXPCMultiply32
.b1eb	18		clc				clc
.b1ec	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1ef	65 3c		adc $3c				adc 	gxzScreen
.b1f1	8d 54 06	sta $0654			sta 	gsOffset
.b1f4	ad 43 06	lda $0643			lda 	GXX0+1
.b1f7	65 3d		adc $3d				adc 	gxzScreen+1
.b1f9	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b1fb	90 04		bcc $b201			bcc 	_GXPCNoOverflow
.b1fd	29 1f		and #$1f			and 	#$1F 						; fix it up
.b1ff	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b201					_GXPCNoOverflow:
.b201	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b203	85 3d		sta $3d				sta 	gxzScreen+1
.b205	64 3c		stz $3c				stz 	gxzScreen
.b207	18		clc				clc
.b208	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b20a	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b20d	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b20f	68		pla				pla
.b210	85 36		sta $36				sta 	gxzTemp0
.b212	60		rts				rts
.b213					GXMovePositionDown:
.b213	18		clc				clc 								; add 320 to offset/temp+1
.b214	ad 54 06	lda $0654			lda 	gsOffset
.b217	69 40		adc #$40			adc 	#64
.b219	8d 54 06	sta $0654			sta 	gsOffset
.b21c	a5 3d		lda $3d				lda 	gxzScreen+1
.b21e	69 01		adc #$01			adc 	#1
.b220	85 3d		sta $3d				sta 	gxzScreen+1
.b222	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b224	90 07		bcc $b22d			bcc 	_GXMPDExit
.b226	38		sec				sec  								; next page
.b227	e9 20		sbc #$20			sbc 	#$20
.b229	85 3d		sta $3d				sta 	gxzScreen+1
.b22b	e6 0b		inc $0b				inc 	GXEditSlot
.b22d					_GXMPDExit:
.b22d	60		rts				rts
.b22e					GXCollide:
.b22e	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b230	aa		tax				tax
.b231	05 37		ora $37				ora 	gxzTemp0+1
.b233	29 c0		and #$c0			and 	#$C0
.b235	38		sec				sec
.b236	d0 53		bne $b28b			bne 	_GXCollideFail 				; if either >= 64, fail.
.b238	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b23a	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b23d	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b240	30 48		bmi $b28a			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b242	18		clc				clc 								; need to calculate sum of sizes.
.b243	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b246	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b249	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b24b	6a		ror a				ror 	a 							; 5/6/7
.b24c	4a		lsr a				lsr 	a 							; 4/5/6
.b24d	4a		lsr a				lsr 	a 							; 3/4/5
.b24e	4a		lsr a				lsr 	a 							; 2/3/4
.b24f	18		clc				clc
.b250	69 08		adc #$08			adc 	#$08
.b252	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b253	4a		lsr a				lsr 	a
.b254	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b256	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b259	29 3f		and #$3f			and 	#$3F
.b25b	85 39		sta $39				sta 	gxzTemp1+1
.b25d	38		sec				sec
.b25e	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b261	29 3f		and #$3f			and 	#$3F
.b263	e5 39		sbc $39				sbc 	gxzTemp1+1
.b265	b0 03		bcs $b26a			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b267	49 ff		eor #$ff			eor 	#$FF
.b269	1a		inc a				inc 	a
.b26a					_GXCAbs1:
.b26a	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b26c	b0 1c		bcs $b28a			bcs 	_GXOkayFail
.b26e	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b270	38		sec				sec 								; calculate |x1-x0|
.b271	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b274	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b277	b0 03		bcs $b27c			bcs 	_GXCAbs2
.b279	49 ff		eor #$ff			eor 	#$FF
.b27b	1a		inc a				inc 	a
.b27c					_GXCAbs2:
.b27c	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b27e	b0 0a		bcs $b28a			bcs 	_GXOkayFail
.b280	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b282	90 02		bcc $b286			bcc 	_GXCHaveLowest
.b284	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b286					_GXCHaveLowest:
.b286	0a		asl a				asl 	a 							; scale to allow for >> 2
.b287	0a		asl a				asl 	a
.b288	18		clc				clc
.b289	60		rts				rts
.b28a					_GXOkayFail:
.b28a	18		clc				clc
.b28b					_GXCollideFail:
.b28b	a9 ff		lda #$ff			lda 	#$FF
.b28d	60		rts				rts
.b28e					GXFindSprite:
.b28e	aa		tax				tax
.b28f	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b292	85 0b		sta $0b				sta 	GXEditSlot
.b294	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b297	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b29a	f0 33		beq $b2cf			beq 	_GXFSFail
.b29c	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b29f	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2a2	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2a5	48		pha				pha 								; save twice
.b2a6	48		pha				pha
.b2a7	29 03		and #$03			and 	#3 							; get sprite size
.b2a9	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2ac	aa		tax				tax
.b2ad	bd d1 b2	lda $b2d1,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2b0	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2b3	68		pla				pla 								; get LUT
.b2b4	4a		lsr a				lsr		a
.b2b5	4a		lsr a				lsr		a
.b2b6	29 03		and #$03			and 	#3
.b2b8	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2bb	68		pla				pla 								; address, neeeds to be x 4
.b2bc	29 f0		and #$f0			and 	#$F0
.b2be	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2c1	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2c4	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2c7	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ca	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2cd	18		clc				clc
.b2ce	60		rts				rts
.b2cf					_GXFSFail:
.b2cf	38		sec				sec
.b2d0	60		rts				rts
.b2d1					_GXFXSSTTable:
>b2d1	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2d5					GXSortXY:
.b2d5	20 f3 b2	jsr $b2f3			jsr 	GXSortY 					; will be sorted on Y now
.b2d8	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2db	cd 46 06	cmp $0646			cmp 	gxX1
.b2de	ad 43 06	lda $0643			lda 	gXX0+1
.b2e1	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2e4	90 0c		bcc $b2f2			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2e6	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2e8	a0 04		ldy #$04			ldy 	#4
.b2ea	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b2ed	e8		inx				inx
.b2ee	c8		iny				iny
.b2ef	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b2f2					_GXSXYExit:
.b2f2	60		rts				rts
.b2f3					GXSortY:
.b2f3	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b2f6	cd 48 06	cmp $0648			cmp 	gxY1
.b2f9	90 0b		bcc $b306			bcc 	_GXSYSorted
.b2fb	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b2fd	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b2ff					_GXSwap1:
.b2ff	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b302	88		dey				dey
.b303	ca		dex				dex
.b304	10 f9		bpl $b2ff			bpl 	_GXSwap1
.b306					_GXSYSorted:
.b306	60		rts				rts
.b307					GXSwapXY:
.b307	bd 42 06	lda $0642,x			lda 	gxX0,x
.b30a	48		pha				pha
.b30b	b9 42 06	lda $0642,y			lda 	gxX0,y
.b30e	9d 42 06	sta $0642,x			sta 	gxX0,x
.b311	68		pla				pla
.b312	99 42 06	sta $0642,y			sta 	gxX0,y
.b315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b807					KeywordSet0:
>b807	00 65					.text	0,$65,""               ; $80 !0:EOF
>b809	00 58					.text	0,$58,""               ; $81 !1:SH1
>b80b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b80d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b813	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b81b	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b821	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b828	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b830	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b837	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b83e	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b844	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b84a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b852	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b859	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b860	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b867	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b86f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b875	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b87b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b882	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b888	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b88e	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $96 PLAYING(
>b896	47 28
>b898	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $97 RANDOM(
>b8a0	28
>b8a1	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $98 RIGHT$(
>b8a9	28
>b8aa	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $99 RND(
>b8b0	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9a SGN(
>b8b6	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9b SPC(
>b8bc	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9c STR$(
>b8c3	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9d TIMER(
>b8cb	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9e TRUE
>b8d1	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9f VAL(
>b8d7	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a0 FOR
>b8dc	02 8f 49 46				.text	2,$8f,"IF"             ; $a1 IF
>b8e0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a2 PROC
>b8e6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a3 REPEAT
>b8ee	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a4 WHILE
>b8f5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a5 ENDIF
>b8fc	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a6 ENDPROC
>b904	43
>b905	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a7 NEXT
>b90b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a8 THEN
>b911	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a9 UNTIL
>b918	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $aa WEND
>b91e	02 9b 42 59				.text	2,$9b,"BY"             ; $ab BY
>b922	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ac CALL
>b928	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ad CIRCLE
>b930	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ae CLEAR
>b937	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $af CLS
>b93c	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b0 COLOR
>b943	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b1 COLOUR
>b94b	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b2 DATA
>b951	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b3 DIM
>b956	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b4 DOWNTO
>b95e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b5 ELSE
>b964	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b6 FROM
>b96a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b7 GFX
>b96f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b8 GOSUB
>b976	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b9 GOTO
>b97c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $ba HERE
>b982	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $bb IMAGE
>b989	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bc LET
>b98e	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bd LINE
>b994	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $be LOCAL
>b99b	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bf OFF
>b9a0	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c0 ON
>b9a4	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c1 OUTLINE
>b9ac	45
>b9ad	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c2 PALETTE
>b9b5	45
>b9b6	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c3 PLOT
>b9bc	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c4 PRINT
>b9c3	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c5 READ
>b9c9	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c6 RECT
>b9cf	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c7 REM
>b9d4	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c8 RETURN
>b9dc	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c9 SOLID
>b9e3	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $ca SOUND
>b9ea	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $cb SPRITE
>b9f2	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $cc TEXT
>b9f8	02 a3 54 4f				.text	2,$a3,"TO"             ; $cd TO
>b9fc	ff					.text	$FF
.b9fd					KeywordSet1:
>b9fd	00 65					.text	0,$65,""               ; $80 !0:EOF
>b9ff	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba01	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba03	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba0b	4c 45
>ba0d	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba15	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba1d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba22	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba28	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba2d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba35	45
>ba36	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba3b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba43	53
>ba44	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba4a	ff					.text	$FF
.ba4b					KeywordSet2:
>ba4b	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba4d	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba4f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba51	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba56	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba5b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba60	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba65	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba6a	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba6f	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba74	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba79	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba7e	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba83	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba88	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba8d	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba92	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ba97	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ba9c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>baa1	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>baa6	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>baab	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>bab0	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>bab5	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>baba	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>babf	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bac4	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bac9	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bace	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bad3	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bad8	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>badd	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bae2	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>bae7	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>baec	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>baf1	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>baf6	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bafb	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb00	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb05	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb0a	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb0f	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb14	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb19	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb1e	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb23	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb28	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb2d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb32	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb37	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb3c	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb41	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb46	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb4b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb50	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb55	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb5a	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb5f	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb64	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb69	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb6e	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb73	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb78	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb7d	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb82	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb87	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb8c	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb91	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bb96	ff					.text	$FF
.b316					ListConvertLine:
.b316	48		pha				pha 								; save indent on the stack
.b317	9c 9d 04	stz $049d			stz 	tbOffset
.b31a	9c ab 04	stz $04ab			stz 	tokenBuffer
.b31d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b31f	b1 30		lda ($30),y			lda 	(codePtr),y
.b321	aa		tax				tax
.b322	88		dey				dey
.b323	b1 30		lda ($30),y			lda 	(codePtr),y
.b325	20 4b 92	jsr $924b			jsr 	LCLConvertInt16
.b328	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b32a	86 37		stx $37				stx 	zTemp0+1
.b32c	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b32e	20 73 b4	jsr $b473			jsr 	LCLWrite
.b331	a0 00		ldy #$00			ldy 	#0
.b333					_LCCopyNumber:
.b333	b1 36		lda ($36),y			lda 	(zTemp0),y
.b335	20 73 b4	jsr $b473			jsr 	LCLWrite
.b338	c8		iny				iny
.b339	b1 36		lda ($36),y			lda 	(zTemp0),y
.b33b	d0 f6		bne $b333			bne 	_LCCopyNumber
.b33d	68		pla				pla 								; adjustment to indent
.b33e	48		pha				pha 								; save on stack
.b33f	10 0c		bpl $b34d			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b341	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b342	6d a6 04	adc $04a6			adc 	listIndent
.b345	8d a6 04	sta $04a6			sta 	listIndent
.b348	10 03		bpl $b34d			bpl 	_LCNoAdjust
.b34a	9c a6 04	stz $04a6			stz 	listIndent
.b34d					_LCNoAdjust:
.b34d	18		clc				clc		 							; work out actual indent.
.b34e	ad a6 04	lda $04a6			lda 	listIndent
.b351	0a		asl a				asl 	a
.b352	69 06		adc #$06			adc 	#6
.b354	85 36		sta $36				sta 	zTemp0
.b356					_LCPadOut:
.b356	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b358	20 73 b4	jsr $b473			jsr 	LCLWrite
.b35b	ad 9d 04	lda $049d			lda 	tbOffset
.b35e	c5 36		cmp $36				cmp 	zTemp0
.b360	d0 f4		bne $b356			bne 	_LCPadOut
.b362	a0 03		ldy #$03			ldy 	#3 							; start position.
.b364					_LCMainLoop:
.b364	a9 8a		lda #$8a			lda 	#CLIPunctuation+$80
.b366	20 73 b4	jsr $b473			jsr 	LCLWrite
.b369	b1 30		lda ($30),y			lda 	(codePtr),y
.b36b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b36d	f0 17		beq $b386			beq 	_LCExit
.b36f	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b371	90 1e		bcc $b391			bcc 	_LCDoubles
.b373	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b375	90 2a		bcc $b3a1			bcc 	_LCShiftPunc
.b377	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b379	90 35		bcc $b3b0			bcc 	_LCPunctuation
.b37b	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b37d	90 3e		bcc $b3bd			bcc 	_LCIdentifiers
.b37f	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b381	90 5f		bcc $b3e2			bcc 	_LCTokens
.b383	4c 42 b4	jmp $b442			jmp 	_LCData 					; 254-5 are data objects
.b386					_LCExit:
.b386	68		pla				pla 								; get old indent adjust
.b387	30 07		bmi $b390			bmi 	_LCExit2
.b389	18		clc				clc 								; add to indent if +ve
.b38a	6d a6 04	adc $04a6			adc 	listIndent
.b38d	8d a6 04	sta $04a6			sta 	listIndent
.b390					_LCExit2:
.b390	60		rts				rts
.b391					_LCDoubles:
.b391	48		pha				pha
.b392	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b393	29 02		and #$02			and 	#2
.b395	09 3c		ora #$3c			ora 	#60 						; make < >
.b397	20 73 b4	jsr $b473			jsr 	LCLWrite
.b39a	68		pla				pla 								; restore, do lower bit
.b39b	29 03		and #$03			and 	#3
.b39d	09 3c		ora #$3c			ora 	#60
.b39f	80 0f		bra $b3b0			bra		_LCPunctuation 				; print, increment, loop
.b3a1					_LCShiftPunc:
.b3a1	aa		tax				tax 								; save in X
.b3a2	29 07		and #$07			and 	#7 							; lower 3 bits
.b3a4	f0 02		beq $b3a8			beq 	_LCNoAdd
.b3a6	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3a8					_LCNoAdd:
.b3a8	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3aa	90 02		bcc $b3ae			bcc 	_LCNoAdd2
.b3ac	09 20		ora #$20			ora 	#32 						; adds $20
.b3ae					_LCNoAdd2:
.b3ae	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3b0					_LCPunctuation:
.b3b0	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3b2	d0 03		bne $b3b7			bne 	_LCPContinue
.b3b4	20 89 b4	jsr $b489			jsr 	LCLDeleteLastSpace
.b3b7					_LCPContinue:
.b3b7	c8		iny				iny 								; consume character
.b3b8	20 73 b4	jsr $b473			jsr 	LCLWrite 					; write it out.
.b3bb	80 a7		bra $b364			bra 	_LCMainLoop 				; go round again.
.b3bd					_LCIdentifiers:
.b3bd	18		clc				clc 								; convert to physical address
.b3be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3c0	85 37		sta $37				sta 	zTemp0+1
.b3c2	c8		iny				iny
.b3c3	b1 30		lda ($30),y			lda 	(codePtr),y
.b3c5	85 36		sta $36				sta 	zTemp0
.b3c7	c8		iny				iny
.b3c8	5a		phy				phy 								; save position
.b3c9	a9 87		lda #$87			lda 	#CLIIdentifier+$80
.b3cb	20 73 b4	jsr $b473			jsr 	LCLWrite
.b3ce	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3d0					_LCOutIdentifier:
.b3d0	c8		iny				iny
.b3d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3d3	29 7f		and #$7f			and 	#$7F
.b3d5	20 c5 b4	jsr $b4c5			jsr 	LCLLowerCase
.b3d8	20 73 b4	jsr $b473			jsr 	LCLWrite
.b3db	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3dd	10 f1		bpl $b3d0			bpl 	_LCOutIdentifier
.b3df	7a		ply				ply 								; restore position
.b3e0	80 82		bra $b364			bra 	_LCMainLoop
.b3e2					_LCTokens:
.b3e2	aa		tax				tax 								; token in X
.b3e3	a9 4b		lda #$4b			lda 	#((KeywordSet2) & $FF)
.b3e5	85 36		sta $36				sta 	0+zTemp0
.b3e7	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b3e9	85 37		sta $37				sta 	1+zTemp0
.b3eb	e0 82		cpx #$82			cpx 	#$82
.b3ed	f0 16		beq $b405			beq 	_LCUseShift
.b3ef	a9 fd		lda #$fd			lda 	#((KeywordSet1) & $FF)
.b3f1	85 36		sta $36				sta 	0+zTemp0
.b3f3	a9 b9		lda #$b9			lda 	#((KeywordSet1) >> 8)
.b3f5	85 37		sta $37				sta 	1+zTemp0
.b3f7	e0 81		cpx #$81			cpx 	#$81
.b3f9	f0 0a		beq $b405			beq 	_LCUseShift
.b3fb	a9 07		lda #$07			lda 	#((KeywordSet0) & $FF)
.b3fd	85 36		sta $36				sta 	0+zTemp0
.b3ff	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b401	85 37		sta $37				sta 	1+zTemp0
.b403	80 01		bra $b406			bra 	_LCNoShift
.b405					_LCUseShift:
.b405	c8		iny				iny
.b406					_LCNoShift:
.b406	20 9d b4	jsr $b49d			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b409	b1 30		lda ($30),y			lda 	(codePtr),y
.b40b	aa		tax				tax 								; into X
.b40c					_LCFindText:
.b40c	ca		dex				dex
.b40d	10 0e		bpl $b41d			bpl 	_LCFoundText 				; found text.
.b40f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b411	1a		inc a				inc 	a 							; one extra for size
.b412	38		sec				sec 								; one extra for checksum
.b413	65 36		adc $36				adc 	zTemp0 						; go to next token
.b415	85 36		sta $36				sta 	zTemp0
.b417	90 f3		bcc $b40c			bcc 	_LCFindText
.b419	e6 37		inc $37				inc 	zTemp0+1
.b41b	80 ef		bra $b40c			bra 	_LCFindText
.b41d					_LCFoundText:
.b41d	5a		phy				phy 								; save List position
.b41e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b420	aa		tax				tax
.b421	a9 83		lda #$83			lda 	#CLIToken+$80
.b423	20 73 b4	jsr $b473			jsr 	LCLWrite
.b426	a0 02		ldy #$02			ldy 	#2
.b428					_LCCopyToken:
.b428	b1 36		lda ($36),y			lda 	(zTemp0),y
.b42a	20 c5 b4	jsr $b4c5			jsr 	LCLLowerCase
.b42d	20 73 b4	jsr $b473			jsr 	LCLWrite
.b430	c8		iny				iny
.b431	ca		dex				dex
.b432	d0 f4		bne $b428			bne 	_LCCopyToken
.b434	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b436	f0 05		beq $b43d			beq 	_LCNoSpace
.b438	a9 20		lda #$20			lda 	#' '
.b43a	20 73 b4	jsr $b473			jsr 	LCLWrite
.b43d					_LCNoSpace:
.b43d	7a		ply				ply 								; restore position.
.b43e	c8		iny				iny 								; consume token
.b43f	4c 64 b3	jmp $b364			jmp 	_LCMainLoop 				; and go around again.
.b442					_LCData:
.b442	48		pha				pha 								; save type $FE/$FF
.b443	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b445	c9 fe		cmp #$fe			cmp 	#$FE
.b447	f0 07		beq $b450			beq 	_LCHaveOpener
.b449	a2 22		ldx #$22			ldx 	#'"'
.b44b	a9 81		lda #$81			lda 	#CLIData+$80
.b44d	20 73 b4	jsr $b473			jsr 	LCLWrite
.b450					_LCHaveOpener:
.b450	8a		txa				txa 								; output prefix (# or ")
.b451	20 73 b4	jsr $b473			jsr 	LCLWrite
.b454	c8		iny				iny 								; get count
.b455	b1 30		lda ($30),y			lda 	(codePtr),y
.b457	aa		tax				tax
.b458	c8		iny				iny 								; point at first character
.b459					_LCOutData:
.b459	b1 30		lda ($30),y			lda 	(codePtr),y
.b45b	c9 00		cmp #$00			cmp 	#0
.b45d	f0 03		beq $b462			beq 	_LCNoPrint
.b45f	20 73 b4	jsr $b473			jsr 	LCLWrite
.b462					_LCNoPrint:
.b462	c8		iny				iny
.b463	ca		dex				dex
.b464	d0 f3		bne $b459			bne 	_LCOutData
.b466	68		pla				pla 								; closing " required ?
.b467	c9 ff		cmp #$ff			cmp 	#$FF
.b469	d0 05		bne $b470			bne 	_LCNoQuote
.b46b	a9 22		lda #$22			lda 	#'"'
.b46d	20 73 b4	jsr $b473			jsr 	LCLWrite
.b470					_LCNoQuote:
.b470	4c 64 b3	jmp $b364			jmp 	_LCMainLoop
.b473					LCLWrite:
.b473	da		phx				phx
.b474	ae 9d 04	ldx $049d			ldx 	tbOffset
.b477	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b47a	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b47d	ee 9d 04	inc $049d			inc 	tbOffset
.b480	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b482	30 03		bmi $b487			bmi 	_LCLNoColour
.b484	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b487					_LCLNoColour:
.b487	fa		plx				plx
.b488	60		rts				rts
.b489					LCLDeleteLastSpace:
.b489	48		pha				pha
.b48a	da		phx				phx
.b48b	ae 9d 04	ldx $049d			ldx 	tbOffset
.b48e	f0 0a		beq $b49a			beq 	_LCDLSExit
.b490	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b493	c9 20		cmp #$20			cmp 	#' '
.b495	d0 03		bne $b49a			bne 	_LCDLSExit
.b497	ce 9d 04	dec $049d			dec 	tbOffset
.b49a					_LCDLSExit:
.b49a	fa		plx				plx
.b49b	68		pla				pla
.b49c	60		rts				rts
.b49d					LCLCheckSpaceRequired:
.b49d	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4a0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4a2	f0 1b		beq $b4bf			beq 	_LCCSRSpace
.b4a4	c9 29		cmp #$29			cmp 	#')'
.b4a6	f0 17		beq $b4bf			beq 	_LCCSRSpace
.b4a8	c9 23		cmp #$23			cmp 	#'#'
.b4aa	f0 13		beq $b4bf			beq 	_LCCSRSpace
.b4ac	20 c5 b4	jsr $b4c5			jsr 	LCLLowerCase 				; saves a little effort
.b4af	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4b1	90 11		bcc $b4c4			bcc 	_LCCSRExit
.b4b3	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4b5	90 08		bcc $b4bf			bcc 	_LCCSRSpace
.b4b7	c9 61		cmp #$61			cmp 	#"a"
.b4b9	90 09		bcc $b4c4			bcc 	_LCCSRExit
.b4bb	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4bd	b0 05		bcs $b4c4			bcs 	_LCCSRExit
.b4bf					_LCCSRSpace:
.b4bf	a9 20		lda #$20			lda 	#' '
.b4c1	20 73 b4	jsr $b473			jsr 	LCLWrite
.b4c4					_LCCSRExit:
.b4c4	60		rts				rts
.b4c5					LCLLowerCase:
.b4c5	c9 41		cmp #$41			cmp 	#"A"
.b4c7	90 06		bcc $b4cf			bcc 	_LCLLCOut
.b4c9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4cb	b0 02		bcs $b4cf			bcs 	_LCLLCOut
.b4cd	69 20		adc #$20			adc 	#$20
.b4cf					_LCLLCOut:
.b4cf	60		rts				rts
.b4d0					LCLUpperCase:
.b4d0	c9 61		cmp #$61			cmp 	#"a"
.b4d2	90 06		bcc $b4da			bcc 	_LCLUCOut
.b4d4	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4d6	b0 02		bcs $b4da			bcs 	_LCLUCOut
.b4d8	e9 1f		sbc #$1f			sbc 	#$1F
.b4da					_LCLUCOut:
.b4da	60		rts				rts
.b4db					TOKSearchTable:
.b4db	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4dd	85 36		sta $36				sta 	zTemp0
.b4df	a0 00		ldy #$00			ldy 	#0
.b4e1	a9 80		lda #$80			lda 	#$80 						; token #
.b4e3	85 38		sta $38				sta 	zTemp1
.b4e5					_TSTLoop:
.b4e5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b4e7	30 49		bmi $b532			bmi 	_TSTFail 					; -ve = end of table
.b4e9	f0 2e		beq $b519			beq 	_TSTNext 					; zero, check next it's a dummy
.b4eb	c8		iny				iny 								; get the hash
.b4ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4ee	88		dey				dey
.b4ef	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4f2	d0 25		bne $b519			bne 	_TSTNext
.b4f4	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b4f7	38		sec				sec
.b4f8	ed 80 04	sbc $0480			sbc 	identStart
.b4fb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b4fd	d0 1a		bne $b519			bne 	_TSTNext
.b4ff	5a		phy				phy 								; save Y , we might fail
.b500	c8		iny				iny 								; point to text
.b501	c8		iny				iny
.b502	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b505					_TSTCompareName:
.b505	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b508	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b50a	d0 0c		bne $b518			bne 	_TSTNextPullY 				; fail, pullY and do next
.b50c	e8		inx				inx
.b50d	c8		iny				iny
.b50e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b511	d0 f2		bne $b505			bne 	_TSTCompareName
.b513	7a		ply				ply 								; throw Y
.b514	a5 38		lda $38				lda 	zTemp1 						; get token #
.b516	38		sec				sec 								; return with CS = passed.
.b517	60		rts				rts
.b518					_TSTNextPullY:
.b518	7a		ply				ply 								; restore current, fall through.
.b519					_TSTNext:
.b519	e6 38		inc $38				inc 	zTemp1 						; token counter
.b51b	98		tya				tya
.b51c	18		clc				clc
.b51d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b51f	1a		inc a				inc 	a 							; +1
.b520	1a		inc a				inc 	a 							; +2
.b521	a8		tay				tay
.b522	10 c1		bpl $b4e5			bpl 	_TSTLoop 					; if Y < $80 loop back
.b524	98		tya				tya 								; add Y to zTemp0 and reset Y
.b525	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b527	18		clc				clc  								; but have tables > 255 bytes
.b528	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b52a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b52c	90 b7		bcc $b4e5			bcc 	_TSTLoop
.b52e	e6 37		inc $37				inc 	zTemp0+1
.b530	80 b3		bra $b4e5			bra 	_TSTLoop
.b532					_TSTFail:
.b532	18		clc				clc
.b533	60		rts				rts
.b534					TokeniseLine:
.b534	20 bc b6	jsr $b6bc			jsr 	LCLFixLineBufferCase 		; fix line case
.b537	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b539	8d a8 04	sta $04a8			sta 	tokenOffset
.b53c	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b53f	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b542	a2 ff		ldx #$ff			ldx 	#$FF
.b544					_TKFindFirst:
.b544	e8		inx				inx
.b545	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b548	f0 79		beq $b5c3			beq 	_TKExit
.b54a	c9 20		cmp #$20			cmp 	#' '
.b54c	90 f6		bcc $b544			bcc 	_TKFindFirst
.b54e	c9 30		cmp #$30			cmp 	#'0'
.b550	90 07		bcc $b559			bcc 	_TKNoLineNumber
.b552	c9 3a		cmp #$3a			cmp 	#'9'+1
.b554	b0 03		bcs $b559			bcs 	_TKNoLineNumber
.b556	20 e6 b6	jsr $b6e6			jsr 	TOKExtractLineNumber
.b559					_TKNoLineNumber:
.b559					_TKTokeniseLoop:
.b559	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b55c	f0 65		beq $b5c3			beq 	_TKExit
.b55e	e8		inx				inx
.b55f	c9 20		cmp #$20			cmp 	#' '
.b561	f0 f6		beq $b559			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b563	ca		dex				dex 								; undo last get, A contains character, X is position.
.b564	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b566	f0 61		beq $b5c9			beq 	_TKTokeniseIdentifier
.b568	c9 41		cmp #$41			cmp 	#'A'
.b56a	90 04		bcc $b570			bcc 	_TKTokenisePunctuation
.b56c	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b56e	90 59		bcc $b5c9			bcc 	_TKTokeniseIdentifier
.b570					_TKTokenisePunctuation:
.b570	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b572	f0 27		beq $b59b			beq 	_TKString
.b574	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b576	f0 28		beq $b5a0			beq 	_TKHexConstant
.b578	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b57a	f0 29		beq $b5a5			beq 	_TKCheckDouble
.b57c	c9 3e		cmp #$3e			cmp 	#'>'
.b57e	f0 25		beq $b5a5			beq 	_TKCheckDouble
.b580					_TKStandardPunctuation:
.b580	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b583	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b585	90 0e		bcc $b595			bcc 	_TKNoShift
.b587	48		pha				pha 								; save
.b588	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b58a	85 36		sta $36				sta 	zTemp0
.b58c	68		pla				pla
.b58d	29 20		and #$20			and 	#32 						; bit 5
.b58f	4a		lsr a				lsr 	a 							; shift into bit 3
.b590	4a		lsr a				lsr 	a
.b591	05 36		ora $36				ora 	zTemp0
.b593	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b595					_TKNoShift:
.b595	20 2b b7	jsr $b72b			jsr 	TOKWriteByte 				; write the punctuation character
.b598	e8		inx				inx 								; consume the character
.b599	80 be		bra $b559			bra 	_TKTokeniseLoop 			; and loop round again.
.b59b					_TKString:
.b59b	20 4b b6	jsr $b64b			jsr 	TOKTokenString
.b59e	80 b9		bra $b559			bra 	_TKTokeniseLoop
.b5a0					_TKHexConstant:
.b5a0	20 86 b6	jsr $b686			jsr 	TOKHexConstant
.b5a3	80 b4		bra $b559			bra 	_TKTokeniseLoop
.b5a5					_TKCheckDouble:
.b5a5	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5a8	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5aa	90 d4		bcc $b580			bcc 	_TKStandardPunctuation
.b5ac	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5ae	b0 d0		bcs $b580			bcs 	_TKStandardPunctuation
.b5b0	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5b3	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5b5	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5b6	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5b9	38		sec				sec
.b5ba	e9 3c		sbc #$3c			sbc 	#'<'
.b5bc	20 2b b7	jsr $b72b			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5bf	e8		inx				inx 								; consume both
.b5c0	e8		inx				inx
.b5c1	80 96		bra $b559			bra 	_TKTokeniseLoop
.b5c3	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5c5	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b5c8	60		rts				rts
.b5c9					_TKTokeniseIdentifier:
.b5c9	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5cc	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5cf					_TKCheckLoop:
.b5cf	e8		inx				inx 								; look at next, we know first is identifier.
.b5d0	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5d3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5d5	f0 f8		beq $b5cf			beq 	_TKCheckLoop
.b5d7	c9 30		cmp #$30			cmp	 	#"0"
.b5d9	90 0c		bcc $b5e7			bcc 	_TKEndIdentifier
.b5db	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5dd	90 f0		bcc $b5cf			bcc 	_TKCheckLoop
.b5df	c9 41		cmp #$41			cmp	 	#"A"
.b5e1	90 04		bcc $b5e7			bcc 	_TKEndIdentifier
.b5e3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5e5	90 e8		bcc $b5cf			bcc 	_TKCheckLoop
.b5e7					_TKEndIdentifier:
.b5e7	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b5ea	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b5ec	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5ee	f0 06		beq $b5f6			beq 	_TKHasTypeCharacter
.b5f0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5f2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5f4	d0 07		bne $b5fd			bne 	_TKNoTypeCharacter
.b5f6					_TKHasTypeCharacter:
.b5f6	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b5f9	e8		inx				inx 								; read next
.b5fa	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b5fd					_TKNoTypeCharacter:
.b5fd	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b5ff	d0 09		bne $b60a			bne 	_TKNoArray
.b601	e8		inx				inx 								; skip the (
.b602	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b605	09 04		ora #$04			ora 	#$04
.b607	8d 84 04	sta $0484			sta 	identTypeByte
.b60a					_TKNoArray:
.b60a	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b60d	20 a7 b6	jsr $b6a7			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b610	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b612	a9 07		lda #$07			lda 	#(KeywordSet0) & $FF
.b614	20 db b4	jsr $b4db			jsr 	TOKSearchTable
.b617	a2 00		ldx #$00			ldx 	#0
.b619	b0 1f		bcs $b63a			bcs 	_TKFoundToken
.b61b	a0 b9		ldy #$b9			ldy 	#(KeywordSet1) >> 8
.b61d	a9 fd		lda #$fd			lda 	#(KeywordSet1) & $FF
.b61f	20 db b4	jsr $b4db			jsr 	TOKSearchTable
.b622	a2 81		ldx #$81			ldx 	#$81
.b624	b0 14		bcs $b63a			bcs 	_TKFoundToken
.b626	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b628	a9 4b		lda #$4b			lda 	#(KeywordSet2) & $FF
.b62a	20 db b4	jsr $b4db			jsr 	TOKSearchTable
.b62d	a2 82		ldx #$82			ldx 	#$82
.b62f	b0 09		bcs $b63a			bcs 	_TKFoundToken
.b631	20 37 b7	jsr $b737			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b634	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b637	4c 59 b5	jmp $b559			jmp 	_TKTokeniseLoop 			; and go round again.
.b63a					_TKFoundToken:
.b63a	48		pha				pha 								; save token
.b63b	8a		txa				txa 								; shift in X, is there one ?
.b63c	f0 03		beq $b641			beq 	_TKNoTShift
.b63e	20 2b b7	jsr $b72b			jsr 	TOKWriteByte 				; if so, write it out
.b641					_TKNoTShift:
.b641	68		pla				pla 								; restore and write token
.b642	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b645	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b648	4c 59 b5	jmp $b559			jmp 	_TKTokeniseLoop 			; and go round again.
.b64b					TOKTokenString:
.b64b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b64d	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b650	e8		inx				inx									; start of quoted string.
.b651	da		phx				phx 								; push start of string on top
.b652	ca		dex				dex
.b653					_TSFindEnd:
.b653	e8		inx				inx
.b654	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b657	f0 04		beq $b65d			beq 	_TSEndOfString
.b659	c9 22		cmp #$22			cmp 	#'"'
.b65b	d0 f6		bne $b653			bne 	_TSFindEnd
.b65d					_TSEndOfString:
.b65d	7a		ply				ply  								; so now Y is first character, X is character after end.
.b65e	48		pha				pha 								; save terminating character
.b65f	20 67 b6	jsr $b667			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b662	68		pla				pla 								; terminating character
.b663	f0 01		beq $b666			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b665	e8		inx				inx
.b666					_TSNotQuote:
.b666	60		rts				rts
.b667					TOKWriteBlockXY:
.b667	86 36		stx $36				stx 	zTemp0 						; write end character
.b669	98		tya				tya
.b66a	49 ff		eor #$ff			eor 	#$FF
.b66c	38		sec				sec
.b66d	65 36		adc $36				adc 	zTemp0
.b66f	1a		inc a				inc 	a 							; one extra for NULL
.b670	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b673					_TOBlockLoop:
.b673	c4 36		cpy $36				cpy 	zTemp0
.b675	f0 09		beq $b680			beq 	_TOBlockExit
.b677	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b67a	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b67d	c8		iny				iny
.b67e	80 f3		bra $b673			bra 	_TOBlockLoop
.b680					_TOBlockExit:
.b680	a9 00		lda #$00			lda 	#0
.b682	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b685	60		rts				rts
.b686					TOKHexConstant:
.b686	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b688	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b68b	e8		inx				inx									; start of quoted string.
.b68c	da		phx				phx 								; push start of constant on top
.b68d	ca		dex				dex
.b68e					_THFindLoop:
.b68e	e8		inx				inx
.b68f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b692	c9 30		cmp #$30			cmp 	#"0"
.b694	90 0c		bcc $b6a2			bcc 	_THFoundEnd
.b696	c9 3a		cmp #$3a			cmp 	#"9"+1
.b698	90 f4		bcc $b68e			bcc 	_THFindLoop
.b69a	c9 41		cmp #$41			cmp 	#"A"
.b69c	90 04		bcc $b6a2			bcc 	_THFoundEnd
.b69e	c9 47		cmp #$47			cmp 	#"F"+1
.b6a0	90 ec		bcc $b68e			bcc 	_THFindLoop
.b6a2					_THFoundEnd:
.b6a2	7a		ply				ply 								; restore start
.b6a3	20 67 b6	jsr $b667			jsr 	TOKWriteBlockXY 			; output the block
.b6a6	60		rts				rts
.b6a7					TOKCalculateHash:
.b6a7	da		phx				phx
.b6a8	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6ab	a9 00		lda #$00			lda 	#0
.b6ad					_TCHLoop:
.b6ad	18		clc				clc
.b6ae	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6b1	e8		inx				inx
.b6b2	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6b5	d0 f6		bne $b6ad			bne 	_TCHLoop
.b6b7	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6ba	fa		plx				plx
.b6bb	60		rts				rts
.b6bc					LCLFixLineBufferCase:
.b6bc	a2 00		ldx #$00			ldx 	#0
.b6be					_FLBCLoop:
.b6be	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6c1	f0 22		beq $b6e5			beq 	_FLBCExit 					; end of string.
.b6c3	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6c5	f0 11		beq $b6d8			beq 	_FLBCInQuotes
.b6c7	e8		inx				inx
.b6c8	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6ca	90 f2		bcc $b6be			bcc 	_FLBCLoop
.b6cc	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6ce	b0 ee		bcs $b6be			bcs 	_FLBCLoop
.b6d0	38		sec				sec 								; make U/C
.b6d1	e9 20		sbc #$20			sbc 	#32
.b6d3	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6d6	80 e6		bra $b6be			bra 	_FLBCLoop
.b6d8					_FLBCInQuotes:
.b6d8	e8		inx				inx 								; advance
.b6d9	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6dc	f0 07		beq $b6e5			beq 	_FLBCExit 					; exit on EOS
.b6de	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6e0	d0 f6		bne $b6d8			bne 	_FLBCInQuotes
.b6e2	e8		inx				inx 								; skip over it
.b6e3	80 d9		bra $b6be			bra 	_FLBCLoop
.b6e5					_FLBCExit:
.b6e5	60		rts				rts
.b6e6					TOKExtractLineNumber:
.b6e6	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b6e9	48		pha				pha
.b6ea	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b6ed	48		pha				pha
.b6ee	20 24 b7	jsr $b724			jsr 	_LCLNTimes2 				; line # x 4
.b6f1	20 24 b7	jsr $b724			jsr 	_LCLNTimes2 				; line # x 2
.b6f4	18		clc				clc 								; add stacked value
.b6f5	68		pla				pla
.b6f6	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b6f9	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b6fc	68		pla				pla
.b6fd	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b700	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b703	20 24 b7	jsr $b724			jsr 	_LCLNTimes2 				; line # x 10
.b706	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b709	e8		inx				inx
.b70a	29 0f		and #$0f			and 	#15 						; add to line #
.b70c	18		clc				clc
.b70d	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b710	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b713	90 03		bcc $b718			bcc 	_TLENNoCarry
.b715	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b718					_TLENNoCarry:
.b718	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b71b	c9 30		cmp #$30			cmp 	#'0'
.b71d	90 04		bcc $b723			bcc 	_TLENExit
.b71f	c9 3a		cmp #$3a			cmp 	#'9'+1
.b721	90 c3		bcc $b6e6			bcc 	TOKExtractLineNumber
.b723					_TLENExit:
.b723	60		rts				rts
.b724					_LCLNTimes2:
.b724	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b727	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b72a	60		rts				rts
.b72b					TOKWriteByte:
.b72b	da		phx				phx
.b72c	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b72f	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b732	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b735	fa		plx				plx
.b736	60		rts				rts
.b737					TOKCheckCreateVariableRecord:
.b737	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b739	85 36		sta $36				sta 	0+zTemp0
.b73b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b73d	85 37		sta $37				sta 	1+zTemp0
.b73f					_CCVSearch:
.b73f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b741	f0 2c		beq $b76f			beq 	_CCVFail
.b743	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b745	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b747	cd 83 04	cmp $0483			cmp 	identHash
.b74a	d0 16		bne $b762			bne 	_CCVNext
.b74c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b74e	ae 80 04	ldx $0480			ldx 	identStart
.b751					_CCVCompare:
.b751	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b754	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b756	e8		inx				inx 								; advance pointers
.b757	c8		iny				iny
.b758	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b759	d0 07		bne $b762			bne 	_CCVNext  					; didn't match go to next.
.b75b	90 f4		bcc $b751			bcc 	_CCVCompare 				; not finished yet.
.b75d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b760	f0 41		beq $b7a3			beq 	_CCVFound 					; yes, we were successful
.b762					_CCVNext:
.b762	18		clc				clc
.b763	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b765	65 36		adc $36				adc 	zTemp0
.b767	85 36		sta $36				sta 	zTemp0
.b769	90 d4		bcc $b73f			bcc 	_CCVSearch
.b76b	e6 37		inc $37				inc 	zTemp0+1
.b76d	80 d0		bra $b73f			bra 	_CCVSearch
.b76f					_CCVFail:
.b76f	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b771	ad 83 04	lda $0483			lda 	identHash
.b774	91 36		sta ($36),y			sta 	(zTemp0),y
.b776	c8		iny				iny 								; offset 2 is the type byte
.b777	ad 84 04	lda $0484			lda 	identTypeByte
.b77a	91 36		sta ($36),y			sta 	(zTemp0),y
.b77c	c8		iny				iny
.b77d					_CCVData:
.b77d	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b77f	91 36		sta ($36),y			sta 	(zTemp0),y
.b781	c8		iny				iny
.b782	c0 08		cpy #$08			cpy 	#8
.b784	90 f7		bcc $b77d			bcc 	_CCVData
.b786	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b789					_CCVCopyName:
.b789	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b78c	91 36		sta ($36),y			sta 	(zTemp0),y
.b78e	e8		inx				inx
.b78f	c8		iny				iny
.b790	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b793	d0 f4		bne $b789			bne 	_CCVCopyName
.b795	98		tya				tya 								; patch offset
.b796	92 36		sta ($36)			sta 	(zTemp0)
.b798	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b79a	91 36		sta ($36),y			sta 	(zTemp0),y
.b79c	88		dey				dey
.b79d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b79f	09 80		ora #$80			ora 	#$80
.b7a1	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a3					_CCVFound:
.b7a3	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7a5	38		sec				sec
.b7a6	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7a8	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7aa	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b7ad	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7af	20 2b b7	jsr $b72b			jsr 	TOKWriteByte
.b7b2	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
