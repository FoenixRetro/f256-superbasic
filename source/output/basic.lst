
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Oct 28 16:10:23 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PLOT                             = $c1; $c1 PLOT
=$c2					KWD_PRINT                            = $c2; $c2 PRINT
=$c3					KWD_READ                             = $c3; $c3 READ
=$c4					KWD_RECT                             = $c4; $c4 RECT
=$c5					KWD_REM                              = $c5; $c5 REM
=$c6					KWD_RETURN                           = $c6; $c6 RETURN
=$c7					KWD_SOLID                            = $c7; $c7 SOLID
=$c8					KWD_SPRITE                           = $c8; $c8 SPRITE
=$c9					KWD_TEXT                             = $c9; $c9 TEXT
=$ca					KWD_TO                               = $ca; $ca TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 9c b5	jsr $b59c			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.8014	20 10 93	jsr $9310			jsr 	NewCommand 					; erase current program
.8017	20 f6 a6	jsr $a6f6			jsr 	BackloadProgram
.801a	4c 8b 94	jmp $948b			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 46 72			.text "Built Friday 28-Oct-2022. Build 2382."
>8065	69 64 61 79 20 32 38 2d 4f 63 74 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 33 38 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSprite:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GXGraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gxzTemp0+1
.808d	80 4b		bra $80da			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8097	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a1	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80af	68		pla				pla 								; get command back
.80b0	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b2	48		pha				pha 								; push back.
.80b3	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b5	f0 17		beq $80ce			beq 	_GDCopyToWorkArea
.80b7	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80ba	f0 07		beq $80c3			beq 	_GDCheckY
.80bc	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80bf	c9 40		cmp #$40			cmp 	#64
.80c1	b0 08		bcs $80cb			bcs 	_GDError1
.80c3					_GDCheckY:
.80c3	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c6	cd 3e 06	cmp $063e			cmp 	gxHeight
.80c9	90 03		bcc $80ce			bcc 	_GDCopyToWorkArea
.80cb					_GDError1:
.80cb	68		pla				pla
.80cc					_GDError2:
.80cc	38		sec				sec
.80cd	60		rts				rts
.80ce					_GDCopyToWorkArea:
.80ce	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d0					_GDCopy2:
.80d0	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d3	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d6	ca		dex				dex
.80d7	10 f7		bpl $80d0			bpl 	_GDCopy2
.80d9	68		pla				pla 								; get command
.80da					_GDExecuteA:
.80da	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dc	b0 ee		bcs $80cc			bcs 	_GDError2
.80de	aa		tax				tax
.80df	7c e5 80	jmp ($80e5,x)			jmp 	(GRVectorTable,x)
.80e2					GXMove:
.80e2	18		clc				clc
.80e3	60		rts				rts
.80e4					GRUndefined:
>80e4	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e5					GRVectorTable:
>80e5	b4 82					.word	GXInitialise             ; $00 Initialise
>80e7	cb 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e9	13 83					.word	GXControlSprite          ; $02 SpriteCtl
>80eb	66 82					.word	GXClearBitmap            ; $03 Clear
>80ed	91 84					.word	GXSetColourMode          ; $04 Colour
>80ef	59 86					.word	GXFontHandler            ; $05 DrawFont
>80f1	a1 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f3	0d 87					.word	GXSelect                 ; $07 SPRUSE
>80f5	33 87					.word	GXSelectImage            ; $08 SPRIMG
>80f7	e4 80					.word	GRUndefined              ; $09
>80f9	e4 80					.word	GRUndefined              ; $0a
>80fb	e4 80					.word	GRUndefined              ; $0b
>80fd	e4 80					.word	GRUndefined              ; $0c
>80ff	e4 80					.word	GRUndefined              ; $0d
>8101	e4 80					.word	GRUndefined              ; $0e
>8103	e4 80					.word	GRUndefined              ; $0f
>8105	e2 80					.word	GXMove                   ; $10 Move
>8107	5f 83					.word	GXLine                   ; $11 Line
>8109	da 84					.word	GXFrameRectangle         ; $12 FrameRect
>810b	d7 84					.word	GXFillRectangle          ; $13 FillRect
>810d	1d 81					.word	GXFrameCircle            ; $14 FrameCircle
>810f	19 81					.word	GXFillCircle             ; $15 FillCircle
>8111	e4 80					.word	GRUndefined              ; $16
>8113	e4 80					.word	GRUndefined              ; $17
>8115	bf 84					.word	GXPlotPoint              ; $18 Plot
>8117	9d 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8119					GXFillCircle:
.8119	a9 ff		lda #$ff			lda 	#255
.811b	80 02		bra $811f			bra 	GXCircle
.811d					GXFrameCircle:
.811d	a9 00		lda #$00			lda 	#0
.811f					GXCircle:
.811f	8d 4d 06	sta $064d			sta 	gxIsFillMode					; save Fill flag
.8122	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8125	f0 26		beq $814d			beq 	_GXCFail
.8127	20 af 88	jsr $88af			jsr 	GXSortXY 					; topleft/bottomright
.812a	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap 				; start drawing
.812d	20 1f 82	jsr $821f			jsr 	GXCircleSetup 				; set up for drawing
.8130	9c 4e 06	stz $064e			stz 	gxYChanged
.8133					_GXCircleDraw:
.8133	ad 4b 06	lda $064b			lda 	gXCentre					; while x <= y
.8136	cd 4c 06	cmp $064c			cmp 	gYCentre
.8139	90 0a		bcc $8145			bcc 	_GXCircleContinue
.813b	d0 03		bne $8140			bne 	_GXNoLast
.813d	20 52 81	jsr $8152			jsr 	GXPlot1
.8140					_GXNoLast:
.8140	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap 				; close the bitmap
.8143	18		clc				clc
.8144	60		rts				rts
.8145					_GXCircleContinue:
.8145	20 4f 81	jsr $814f			jsr 	GXPlot2 					; draw it
.8148	20 cc 81	jsr $81cc			jsr 	GXCircleMove 				; adjust the coordinates
.814b	80 e6		bra $8133			bra 	_GXCircleDraw
.814d					_GXCFail:
.814d	38		sec				sec
.814e	60		rts				rts
.814f					GXPlot2:
.814f	20 52 81	jsr $8152			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8152					GXPlot1:
.8152	ad 4c 06	lda $064c			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8155	f0 03		beq $815a			beq 	_GXPlot1Only
.8157	20 76 81	jsr $8176			jsr 	GXPlot0 						; plot and negate
.815a					_GXPlot1Only:
.815a	20 76 81	jsr $8176			jsr 	GXPlot0 						; twice, undoing negation
.815d	ad 4b 06	lda $064b			lda 	gXCentre 						; swap X and Y
.8160	ae 4c 06	ldx $064c			ldx	 	gYCentre
.8163	8d 4c 06	sta $064c			sta 	gYCentre
.8166	8e 4b 06	stx $064b			stx 	gXCentre
.8169	ad 4e 06	lda $064e			lda 	gxYChanged 						; toggle Y Changed flag
.816c	a9 ff		lda #$ff			lda 	#$FF
.816e	8d 4e 06	sta $064e			sta 	gxYChanged
.8171	60		rts				rts
.8172	20 76 81	jsr $8176			jsr 	GXPlot0 						; do once
.8175	60		rts				rts
.8176	ad 4d 06	lda $064d	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8179	f0 05		beq $8180			beq 	_GXPlot0Always
.817b	ad 4e 06	lda $064e			lda 	gxYChanged						; fill mode, only draw if changed.
.817e	f0 2d		beq $81ad			beq 	GXPlot0Exit
.8180					_GXPlot0Always:
.8180	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8182	ad 4c 06	lda $064c			lda 	gYCentre
.8185	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8188	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818a	ad 4b 06	lda $064b			lda 	gXCentre
.818d	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8190	48		pha				pha 									; save last offset X
.8191	20 f7 87	jsr $87f7			jsr 	GXPositionCalc 					; calculate position/offset.
.8194	68		pla				pla
.8195	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	26 37		rol $37				rol 	gxzTemp0+1
.819c	ad 4d 06	lda $064d			lda 	gxIsFillMode
.819f	69 80		adc #$80			adc 	#128
.81a1	20 2a 85	jsr $852a			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a4	38		sec				sec 									; GY = -GY
.81a5	a9 00		lda #$00			lda 	#0
.81a7	ed 4c 06	sbc $064c			sbc 	gYCentre
.81aa	8d 4c 06	sta $064c			sta 	gYCentre
.81ad					GXPlot0Exit:
.81ad	60		rts				rts
.81ae					GXSubCopy:
.81ae	85 36		sta $36				sta 	gxzTemp0
.81b0	64 37		stz $37				stz 	gxzTemp0+1
.81b2	29 80		and #$80			and 	#$80
.81b4	f0 02		beq $81b8			beq 	_GXNoSx
.81b6	c6 37		dec $37				dec 	gxzTemp0+1
.81b8					_GXNoSx:
.81b8	38		sec				sec
.81b9	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bc	e5 36		sbc $36				sbc 	gxzTemp0
.81be	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c1	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c6	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81c9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cb	60		rts				rts
.81cc					GXCircleMove:
.81cc	9c 4e 06	stz $064e			stz 	gxYChanged 					; clear Y changed flag
.81cf	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d1	10 0d		bpl $81e0			bpl 	_GXEMPositive
.81d3	ee 4b 06	inc $064b			inc 	gXCentre 					; X++
.81d6	ad 4b 06	lda $064b			lda 	gXCentre
.81d9	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 06		lda #$06			lda 	#6  						; and add 6
.81de	80 15		bra $81f5			bra 	_GXEMAddD
.81e0					_GXEMPositive:
.81e0	ee 4b 06	inc $064b			inc 	gXCentre					; X++
.81e3	ce 4c 06	dec $064c			dec 	gyCentre 					; Y--
.81e6	38		sec				sec 								; calculate X-Y
.81e7	ad 4b 06	lda $064b			lda 	gXCentre
.81ea	ed 4c 06	sbc $064c			sbc 	gYCentre
.81ed	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f0	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f2	ce 4e 06	dec $064e			dec 	gxYChanged
.81f5					_GXEMAddD:
.81f5	18		clc				clc
.81f6	65 38		adc $38				adc 	gxzTemp1
.81f8	85 38		sta $38				sta 	gxzTemp1
.81fa	90 02		bcc $81fe			bcc 	_GXEMNoCarry
.81fc	e6 39		inc $39				inc 	gxzTemp1+1
.81fe					_GXEMNoCarry:
.81fe	60		rts				rts
.81ff					_GXAdd4TimesToD:
.81ff	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8201	29 80		and #$80			and 	#$80
.8203	f0 02		beq $8207			beq 	_GXA4Unsigned
.8205	a9 ff		lda #$ff			lda 	#$FF
.8207					_GXA4Unsigned:
.8207	85 37		sta $37				sta 	gxzTemp0+1
.8209	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820b	26 37		rol $37				rol 	gxzTemp0+1
.820d	06 36		asl $36				asl 	gxzTemp0
.820f	26 37		rol $37				rol 	gxzTemp0+1
.8211	18		clc				clc 								; add
.8212	a5 36		lda $36				lda		gxzTemp0
.8214	65 38		adc $38				adc 	gxzTemp1
.8216	85 38		sta $38				sta 	gxzTemp1
.8218	a5 37		lda $37				lda		gxzTemp0+1
.821a	65 39		adc $39				adc 	gxzTemp1+1
.821c	85 39		sta $39				sta 	gxzTemp1+1
.821e	60		rts				rts
.821f					GXCircleSetup:
.821f	38		sec				sec
.8220	ad 38 06	lda $0638			lda 	gxY1
.8223	ed 34 06	sbc $0634			sbc 	gxY0
.8226	4a		lsr a				lsr 	a
.8227	8d 4a 06	sta $064a			sta 	gxRadius
.822a	a2 00		ldx #$00			ldx 	#0
.822c	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.822f	a2 02		ldx #$02			ldx 	#2
.8231	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.8234	9c 4b 06	stz $064b			stz 	gXCentre
.8237	ad 4a 06	lda $064a			lda 	gxRadius
.823a	8d 4c 06	sta $064c			sta 	gYCentre
.823d	0a		asl a				asl 	a 							; R x 2
.823e	85 36		sta $36				sta 	gxzTemp0
.8240	38		sec				sec
.8241	a9 03		lda #$03			lda 	#3
.8243	e5 36		sbc $36				sbc 	gxzTemp0
.8245	85 38		sta $38				sta 	gxzTemp1
.8247	a9 00		lda #$00			lda 	#0
.8249	e9 00		sbc #$00			sbc 	#0
.824b	85 39		sta $39				sta 	gxzTemp1+1
.824d	60		rts				rts
.824e					_GXCalculateCentre:
.824e	38		sec				sec
.824f	bd 36 06	lda $0636,x			lda 	gxX1,x
.8252	7d 32 06	adc $0632,x			adc 	gXX0,x
.8255	9d 36 06	sta $0636,x			sta 	gXX1,x
.8258	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825b	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825e	4a		lsr a				lsr 	a
.825f	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8262	7e 36 06	ror $0636,x			ror 	gXX1,x
.8265	60		rts				rts
.064a					gxRadius:
>064a							.fill 	1
.064b					gXCentre:
>064b							.fill 	1
.064c					gYCentre:
>064c							.fill 	1
.064d					gxIsFillMode:
>064d							.fill 	1
.064e					gxYChanged:
>064e							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8266					GXClearBitmap:
.8266	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.8269	f0 24		beq $828f			beq 	_GXCBFail
.826b	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap 				; start access
.826e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8270	ad 3e 06	lda $063e			lda 	gxHeight
.8273	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8275	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8277					_GXCalcLastPage:
.8277	98		tya				tya 								; add to base page
.8278	18		clc				clc
.8279	6d 3c 06	adc $063c			adc 	gxBasePage
.827c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827e					_GXClearAll:
.827e	20 91 82	jsr $8291			jsr 	_GXClearBlock 				; clear 8k block
.8281	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8283	a5 0b		lda $0b				lda 	GXEditSlot
.8285	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8288	b0 f4		bcs $827e			bcs 	_GXClearAll
.828a	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap	 			; stop access
.828d	18		clc				clc
.828e	60		rts				rts
.828f					_GXCBFail:
.828f	38		sec				sec
.8290	60		rts				rts
.8291					_GXClearBlock:
.8291	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8293	85 38		sta $38				sta 	0+gxzTemp1
.8295	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8297	85 39		sta $39				sta 	1+gxzTemp1
.8299					_GXCB0:
.8299	a5 36		lda $36				lda 	gxzTemp0
.829b	a0 00		ldy #$00			ldy 	#0
.829d					_GXCB1:
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	d0 f2		bne $829d			bne 	_GXCB1
.82ab	e6 39		inc $39				inc 	gxzTemp1+1
.82ad	a5 39		lda $39				lda 	gxzTemp1+1
.82af	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b1	d0 e6		bne $8299			bne 	_GXCB0
.82b3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b4					GXInitialise:
.82b4	64 01		stz $01				stz 	1
.82b6	a9 01		lda #$01			lda 	#1
.82b8	8d 00 d0	sta $d000			sta 	$D000
.82bb	18		clc				clc
.82bc	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82bf	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c2	a2 0f		ldx #$0f			ldx 	#15
.82c4					_GXIClear:
.82c4	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c7	ca		dex				dex
.82c8	10 fa		bpl $82c4			bpl 	_GXIClear
.82ca	60		rts				rts
.82cb					GXControlBitmap:
.82cb	64 01		stz $01				stz 	1
.82cd	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82cf	29 01		and #$01			and 	#1 							; set bitmap flag
.82d1	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d4	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d5	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d8	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82da	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82dc	90 02		bcc $82e0			bcc 	_CBNotOn
.82de	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e0					_CBNotOn:
.82e0	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e3	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e5	29 07		and #$07			and 	#7
.82e7	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ea	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ec	d0 02		bne $82f0			bne 	_CBNotDefault
.82ee	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f0					_CBNotDefault:
.82f0	8d 3c 06	sta $063c			sta 	gxBasePage
.82f3	20 51 83	jsr $8351			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f6	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f8	8d 03 d1	sta $d103			sta 	$D103
.82fb	a5 36		lda $36				lda 	gxzTemp0
.82fd	8d 02 d1	sta $d102			sta 	$D102
.8300	9c 01 d1	stz $d101			stz 	$D101
.8303	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8305	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8308	29 01		and #$01			and 	#1
.830a	f0 02		beq $830e			beq 	_CBHaveHeight
.830c	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.830e					_CBHaveHeight
.830e	8e 3e 06	stx $063e			stx 	gxHeight
.8311	18		clc				clc
.8312	60		rts				rts
.8313					GXControlSprite:
.8313	64 01		stz $01				stz 	1
.8315	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8317	29 01		and #$01			and 	#1 							; set sprites flag
.8319	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.831d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8320	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8322	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8324	90 02		bcc $8328			bcc 	_CSNotOn
.8326	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8328					_CSNotOn:
.8328	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832b	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.832d	d0 02		bne $8331			bne 	_CSNotDefault
.832f	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8331					_CSNotDefault:
.8331	8d 3d 06	sta $063d			sta 	gxSpritePage
.8334	20 51 83	jsr $8351			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8337	a5 36		lda $36				lda 	zTemp0
.8339	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833c	a5 37		lda $37				lda 	zTemp0+1
.833e	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8341	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8343					_CSClear:
.8343	9e 00 d9	stz $d900,x			stz 	$D900,x
.8346	9e 00 da	stz $da00,x			stz 	$DA00,x
.8349	ca		dex				dex
.834a	d0 f7		bne $8343			bne 	_CSClear
.834c	9c 47 06	stz $0647			stz 	GSCurrentSprite+1 			; no sprite selected.
.834f	18		clc				clc
.8350	60		rts				rts
.8351					GXCalculateBaseAddress:
.8351	85 36		sta $36				sta 	gxzTemp0
.8353	64 37		stz $37				stz 	gxzTemp0+1
.8355	a9 05		lda #$05			lda 	#5
.8357					_GXShift:
.8357	06 36		asl $36				asl 	gxzTemp0
.8359	26 37		rol $37				rol 	gxzTemp0+1
.835b	3a		dec a				dec		a
.835c	d0 f9		bne $8357			bne 	_GXShift
.835e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.835f					GXLine:
.835f	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8362	f0 28		beq $838c			beq 	_GXLFail
.8364	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap
.8367	20 cd 88	jsr $88cd			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836a	20 32 84	jsr $8432			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.836d	20 f7 87	jsr $87f7			jsr 	GXPositionCalc 				; calculate position/offset.
.8370					_GXDrawLoop:
.8370	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8373	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8375	2d 42 06	and $0642			and 	gxANDValue
.8378	4d 41 06	eor $0641			eor 	gxEORValue
.837b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.837d	20 8e 83	jsr $838e			jsr 	GXLineIsComplete 			; is the line complete ?
.8380	f0 05		beq $8387			beq 	_GXLExit
.8382	20 a9 83	jsr $83a9			jsr 	GXLineAdvance 				; code as per advance method
.8385	80 e9		bra $8370			bra 	_GXDrawLoop
.8387					_GXLExit:
.8387	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap
.838a	18		clc				clc
.838b	60		rts				rts
.838c					_GXLFail:
.838c	38		sec				sec
.838d	60		rts				rts
.838e					GXLineIsComplete:
.838e	ad 51 06	lda $0651			lda 	GXIsDiffYLarger 			; is dy larger
.8391	d0 0f		bne $83a2			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8393	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.8396	4d 36 06	eor $0636			eor 	GXX1
.8399	d0 06		bne $83a1			bne 	_GXLICExit
.839b	ad 33 06	lda $0633			lda 	GXX0+1
.839e	4d 37 06	eor $0637			eor 	GXX1+1
.83a1					_GXLICExit:
.83a1	60		rts				rts
.83a2					_GXLICCompareY:
.83a2	ad 38 06	lda $0638			lda 	GXY1
.83a5	4d 34 06	eor $0634			eor 	GXY0
.83a8	60		rts				rts
.83a9					GXLineAdvance:
.83a9	18		clc				clc 								; add adjust to position
.83aa	ad 53 06	lda $0653			lda 	GXPosition
.83ad	6d 54 06	adc $0654			adc 	GXAdjust
.83b0	8d 53 06	sta $0653			sta 	GXPosition
.83b3	9c 56 06	stz $0656			stz 	GXAddSelect 				; clear add select flag
.83b6	b0 05		bcs $83bd			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b8	cd 55 06	cmp $0655			cmp 	GXTotal 					; if exceeded total
.83bb	90 0a		bcc $83c7			bcc 	_GXLANoExtra
.83bd					_GXLAOverflow:
.83bd	ce 56 06	dec $0656			dec 	GXAddSelect 				; set addselect to $FF
.83c0	38		sec				sec 								; subtract total and write back
.83c1	ed 55 06	sbc $0655			sbc 	GXTotal
.83c4	8d 53 06	sta $0653			sta 	GXPosition
.83c7					_GXLANoExtra:
.83c7	ad 51 06	lda $0651			lda 	GXIsDiffYLarger
.83ca	f0 0d		beq $83d9			beq 	_GXDXLarger
.83cc	20 2b 84	jsr $842b			jsr 	GXIncrementY
.83cf	ad 56 06	lda $0656			lda 	GXAddSelect
.83d2	f0 10		beq $83e4			beq 	_GXLAExit
.83d4	20 e5 83	jsr $83e5			jsr 	GXAdjustX
.83d7	80 0b		bra $83e4			bra 	_GXLAExit
.83d9					_GXDXLarger:
.83d9	20 e5 83	jsr $83e5			jsr 	GXAdjustX
.83dc	ad 56 06	lda $0656			lda 	GXAddSelect
.83df	f0 03		beq $83e4			beq 	_GXLAExit
.83e1	20 2b 84	jsr $842b			jsr 	GXIncrementY
.83e4					_GXLAExit:
.83e4	60		rts				rts
.83e5					GXAdjustX:
.83e5	ad 52 06	lda $0652			lda 	GXDXNegative
.83e8	10 25		bpl $840f			bpl 	_GXAXRight
.83ea	ad 32 06	lda $0632			lda 	GXX0
.83ed	d0 03		bne $83f2			bne 	_GXAXNoBorrow
.83ef	ce 33 06	dec $0633			dec 	GXX0+1
.83f2					_GXAXNoBorrow:
.83f2	ce 32 06	dec $0632			dec 	GXX0
.83f5	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.83f8	ad 45 06	lda $0645			lda 	gsOffset
.83fb	c9 ff		cmp #$ff			cmp 	#$FF
.83fd	d0 0f		bne $840e			bne 	_GXAYExit 					; underflow
.83ff	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8401	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8403	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8405	b0 07		bcs $840e			bcs 	_GXAYExit
.8407	18		clc				clc
.8408	69 20		adc #$20			adc 	#$20 						; fix up
.840a	85 3d		sta $3d				sta 	gxzScreen+1
.840c	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.840e					_GXAYExit:
.840e	60		rts				rts
.840f					_GXAXRight:
.840f	ee 32 06	inc $0632			inc 	GXX0
.8412	d0 03		bne $8417			bne 	_GXAXNoCarry
.8414	ee 33 06	inc $0633			inc 	GXX0+1
.8417					_GXAXNoCarry:
.8417	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.841a	d0 0e		bne $842a			bne 	_GXAXExit 					; if not overflowed, exit.
.841c	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.841e	a5 3d		lda $3d				lda 	gxzScreen+1
.8420	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8422	90 06		bcc $842a			bcc 	_GXAXExit
.8424	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8426	85 3d		sta $3d				sta 	gxzScreen+1
.8428	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842a					_GXAXExit:
.842a	60		rts				rts
.842b					GXIncrementY:
.842b	ee 34 06	inc $0634			inc 	GXY0
.842e	20 4d 88	jsr $884d			jsr 	GXMovePositionDown
.8431	60		rts				rts
.8432					GXLineSetup:
.8432	ad 38 06	lda $0638			lda 	GXY1
.8435	38		sec				sec
.8436	ed 34 06	sbc $0634			sbc 	GXY0
.8439	4a		lsr a				lsr 	a
.843a	8d 50 06	sta $0650			sta 	GXDiffY
.843d	9c 52 06	stz $0652			stz 	GXDXNegative 				; clear -ve flag
.8440	38		sec				sec
.8441	ad 36 06	lda $0636			lda 	GXX1
.8444	ed 32 06	sbc $0632			sbc 	GXX0
.8447	8d 4f 06	sta $064f			sta 	GXDiffX
.844a	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.844d	ed 33 06	sbc $0633			sbc 	GXX0+1
.8450	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8451	6e 4f 06	ror $064f			ror 	GXDiffX
.8454	0a		asl a				asl 	a
.8455	10 0c		bpl $8463			bpl 	_GDXNotNegative
.8457	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8459	38		sec				sec
.845a	ed 4f 06	sbc $064f			sbc 	GXDiffX
.845d	8d 4f 06	sta $064f			sta 	GXDiffX
.8460	ce 52 06	dec $0652			dec 	GXDXNegative 				; -ve flag = $FF.
.8463					_GDXNotNegative:
.8463	9c 51 06	stz $0651			stz 	GXIsDiffYLarger 			; clear larger flag
.8466	ad 50 06	lda $0650			lda 	GXDiffY 					; set adjust and total.
.8469	8d 54 06	sta $0654			sta 	GXAdjust
.846c	ad 4f 06	lda $064f			lda 	GXDiffX
.846f	8d 55 06	sta $0655			sta 	GXTotal
.8472	ad 50 06	lda $0650			lda 	GXDiffY 					; if dy > dx
.8475	cd 4f 06	cmp $064f			cmp 	GXDiffX
.8478	90 0f		bcc $8489			bcc 	_GDXNotLarger
.847a	ce 51 06	dec $0651			dec 	GXIsDiffYLarger 			; set the dy larger flag
.847d	ad 4f 06	lda $064f			lda 	GXDiffX 					; set adjust and total other way round
.8480	8d 54 06	sta $0654			sta 	GXAdjust
.8483	ad 50 06	lda $0650			lda 	GXDiffY
.8486	8d 55 06	sta $0655			sta 	GXTotal
.8489					_GDXNotLarger:
.8489	ad 55 06	lda $0655			lda 	GXTotal
.848c	4a		lsr a				lsr 	a
.848d	8d 53 06	sta $0653			sta 	GXPosition
.8490	60		rts				rts
.064f					GXDiffX:
>064f							.fill 	1
.0650					GXDiffY:
>0650							.fill 	1
.0651					GXIsDiffYLarger:
>0651							.fill 	1
.0652					GXDXNegative:
>0652							.fill 	1
.0653					GXPosition:
>0653							.fill 	1
.0654					GXAdjust:
>0654							.fill 	1
.0655					GXTotal:
>0655							.fill 	1
.0656					GXAddSelect:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8491					GXSetColourMode:
.8491	a6 36		ldx $36				ldx 	gxzTemp0
.8493	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.8496	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8498	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.849b	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.849d	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a0	ae 40 06	ldx $0640			ldx 	gxColour
.84a3	8e 41 06	stx $0641			stx 	gxEORValue
.84a6	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a8	90 03		bcc $84ad			bcc 	_GXSDCNotAndColour
.84aa	8e 42 06	stx $0642			stx 	gxANDValue
.84ad					_GXSDCNotAndColour:
.84ad	d0 03		bne $84b2			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84af	9c 41 06	stz $0641			stz 	gxEORValue
.84b2					_GXSDCNotAnd:
.84b2	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b3	90 08		bcc $84bd			bcc 	_GXSDCNoFlip
.84b5	ad 42 06	lda $0642			lda	 	gxANDValue
.84b8	49 ff		eor #$ff			eor 	#$FF
.84ba	8d 42 06	sta $0642			sta 	gxANDValue
.84bd					_GXSDCNoFlip:
.84bd	18		clc				clc
.84be	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84bf					GXPlotPoint:
.84bf	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap 				; start drawing
.84c2	20 f7 87	jsr $87f7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c5	ac 45 06	ldy $0645			ldy 	gsOffset
.84c8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84ca	2d 42 06	and $0642			and 	gxANDValue
.84cd	4d 41 06	eor $0641			eor 	gxEORValue
.84d0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d2	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d5	18		clc				clc
.84d6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d7					GXFillRectangle:
.84d7	38		sec				sec
.84d8	80 01		bra $84db			bra 	GXRectangle
.84da					GXFrameRectangle:
.84da	18		clc				clc
.84db					GXRectangle:
.84db	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84de	f0 35		beq $8515			beq 	_GXRFail
.84e0	08		php				php 								; save Fill flag (CS)
.84e1	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap 				; start drawing
.84e4	20 af 88	jsr $88af			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e7	20 f7 87	jsr $87f7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ea	38		sec				sec 								; sec = Draw line
.84eb	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84ee	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.84f1	cd 38 06	cmp $0638			cmp 	gxY1
.84f4	f0 19		beq $850f			beq 	_GXRectangleExit
.84f6					_GXRectLoop:
.84f6	20 4d 88	jsr $884d			jsr 	GXMovePositionDown 			; down one.
.84f9	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.84fc	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.84ff	cd 38 06	cmp $0638			cmp 	gXY1
.8502	f0 07		beq $850b			beq 	_GXLastLine
.8504	28		plp				plp 								; get flag back
.8505	08		php				php
.8506	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8509	80 eb		bra $84f6			bra 	_GXRectLoop
.850b					_GXLastLine:
.850b	38		sec				sec
.850c	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0
.850f					_GXRectangleExit:
.850f	68		pla				pla 								; throw fill flag.
.8510	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap 				; stop drawing and exit
.8513	18		clc				clc
.8514	60		rts				rts
.8515					_GXRFail:
.8515	38		sec				sec
.8516	60		rts				rts
.8517					GXDrawLineX1X0:
.8517	08		php				php 								; save solid/either-end
.8518	38		sec				sec
.8519	ad 36 06	lda $0636			lda		gXX1
.851c	ed 32 06	sbc $0632			sbc 	gXX0
.851f	85 36		sta $36				sta 	gxzTemp0
.8521	ad 37 06	lda $0637			lda 	gXX1+1
.8524	ed 33 06	sbc $0633			sbc 	gXX0+1
.8527	85 37		sta $37				sta 	gxzTemp0+1
.8529	28		plp				plp
.852a					GXDrawLineTemp0:
.852a	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852c	48		pha				pha
.852d	a5 3d		lda $3d				lda 	gxzScreen+1
.852f	48		pha				pha
.8530	ad 45 06	lda $0645			lda 	gsOffset
.8533	48		pha				pha
.8534	a5 0b		lda $0b				lda 	GXEditSlot
.8536	48		pha				pha
.8537	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.853a	90 1e		bcc $855a			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853c					_GXDLTLine:
.853c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.853e	2d 42 06	and $0642			and 	gxANDValue
.8541	4d 41 06	eor $0641			eor 	gxEORValue
.8544	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8546	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8548	d0 04		bne $854e			bne 	_GXDLTNoBorrow
.854a	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854c	30 2e		bmi $857c			bmi 	_GXDLTExit
.854e					_GXDLTNoBorrow:
.854e	c6 36		dec $36				dec 	gxzTemp0
.8550	c8		iny				iny 								; next slot.
.8551	d0 e9		bne $853c			bne 	_GXDLTLine
.8553	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8555	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap				; check for new page.
.8558	80 e2		bra $853c			bra 	_GXDLTLine
.855a					_GXDLTEndPoints:
.855a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855c	2d 42 06	and $0642			and 	gxANDValue
.855f	4d 41 06	eor $0641			eor 	gxEORValue
.8562	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8564	98		tya				tya 								; advance to right side
.8565	18		clc				clc
.8566	65 36		adc $36				adc 	gxzTemp0
.8568	a8		tay				tay
.8569	a5 3d		lda $3d				lda 	gxzScreen+1
.856b	65 37		adc $37				adc 	gxzTemp0+1
.856d	85 3d		sta $3d				sta 	gxzScreen+1
.856f	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap 			; fix up.
.8572	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8574	2d 42 06	and $0642			and 	gxANDValue
.8577	4d 41 06	eor $0641			eor 	gxEORValue
.857a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857c					_GXDLTExit:
.857c	68		pla				pla
.857d	85 0b		sta $0b				sta 	GXEditSlot
.857f	68		pla				pla
.8580	8d 45 06	sta $0645			sta 	gsOffset
.8583	68		pla				pla
.8584	85 3d		sta $3d				sta 	gxzScreen+1
.8586	68		pla				pla
.8587	85 3c		sta $3c				sta 	gxzScreen
.8589	60		rts				rts
.858a					GXDLTCheckWrap:
.858a	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.858e	90 06		bcc $8596			bcc 	_GXDLTCWExit
.8590	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8592	85 3d		sta $3d				sta 	gxzScreen+1
.8594	e6 0b		inc $0b				inc 	GXEditSlot
.8596					_GXDLTCWExit:
.8596	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8597					GXDrawGraphicElement:
.8597	8d 57 06	sta $0657			sta 	gxSize 						; save size
.859a	3a		dec a				dec 	a
.859b	8d 58 06	sta $0658			sta 	gxMask 						; and mask
.859e	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85a1	f0 67		beq $860a			beq 	_GXSLFail
.85a3	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85a6	48		pha				pha
.85a7	8c 5a 06	sty $065a			sty 	gxAcquireVector+1 			; and acquisition vector
.85aa	8e 59 06	stx $0659			stx 	gxAcquireVector
.85ad	20 d9 87	jsr $87d9			jsr 	gxOpenBitmap 				; open the bitmap.
.85b0	ad 5c 06	lda $065c			lda 	gxUseMode 					; scale bits
.85b3	4a		lsr a				lsr 	a
.85b4	4a		lsr a				lsr 	a
.85b5	4a		lsr a				lsr 	a
.85b6	29 07		and #$07			and		#7
.85b8	1a		inc a				inc 	a
.85b9	8d 5b 06	sta $065b			sta 	gxScale
.85bc	64 38		stz $38				stz 	gxzTemp1					; start first line
.85be					_GXGELoop:
.85be	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85c0	2c 5c 06	bit $065c			bit 	gxUseMode 					; check for flip.
.85c3	10 06		bpl $85cb			bpl		_GXNoVFlip
.85c5	ad 58 06	lda $0658			lda 	gxMask
.85c8	38		sec				sec
.85c9	e5 38		sbc $38				sbc 	gxzTemp1
.85cb					_GXNoVFlip:
.85cb	aa		tax				tax 								; get the Xth line.
.85cc	20 0c 86	jsr $860c			jsr 	_GXCallAcquire 				; get that data.
.85cf	ad 5b 06	lda $065b			lda 	gxScale 					; do scale identical copies of that line.
.85d2	85 39		sta $39				sta 	gxzTemp1+1
.85d4					_GXGELoop2:
.85d4	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85d7	cd 3e 06	cmp $063e			cmp 	gxHeight
.85da	b0 10		bcs $85ec			bcs 	_GXDGEExit
.85dc	20 0f 86	jsr $860f			jsr 	GXRenderOneLine 			; render line
.85df	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e1	d0 f1		bne $85d4			bne 	_GXGELoop2
.85e3	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e5	a5 38		lda $38				lda 	gxzTemp1
.85e7	cd 57 06	cmp $0657			cmp 	gxSize
.85ea	d0 d2		bne $85be			bne 	_GXGELoop
.85ec					_GXDGEExit:
.85ec	68		pla				pla 								; restore Y for next time
.85ed	8d 34 06	sta $0634			sta 	gxY0
.85f0	ae 5b 06	ldx $065b			ldx 	gxScale 					; get scale (1-8)
.85f3					_GXShiftLeft:
.85f3	18		clc				clc
.85f4	ad 57 06	lda $0657			lda 	gxSize
.85f7	6d 32 06	adc $0632			adc 	gxX0
.85fa	8d 32 06	sta $0632			sta 	gxX0
.85fd	90 03		bcc $8602			bcc 	_GXSLNoCarry
.85ff	ee 33 06	inc $0633			inc 	gxX0+1
.8602					_GXSLNoCarry:
.8602	ca		dex				dex
.8603	d0 ee		bne $85f3			bne 	_GXShiftLeft
.8605	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap
.8608	18		clc				clc
.8609	60		rts				rts
.860a					_GXSLFail:
.860a	38		sec				sec
.860b	60		rts				rts
.860c					_GXCallAcquire:
.860c	6c 59 06	jmp ($0659)			jmp 	(gxAcquireVector)
.860f					GXRenderOneLine:
.860f	20 f7 87	jsr $87f7			jsr 	GXPositionCalc 				; calculate position/offset.
.8612	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.8615	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8617					_GXROLLoop1:
.8617	ad 5b 06	lda $065b			lda 	gxScale 					; set to do 'scale' times
.861a	85 3b		sta $3b				sta 	gxzTemp2+1
.861c					_GXROLLoop2:
.861c	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.861e	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8621	50 06		bvc $8629			bvc 	_GXNoHFlip
.8623	ad 58 06	lda $0658			lda 	gxMask
.8626	38		sec				sec
.8627	e5 3a		sbc $3a				sbc 	gxzTemp2
.8629					_GXNoHFlip:
.8629	aa		tax				tax 								; read from the pixel buffer
.862a	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.862d	d0 07		bne $8636			bne 	_GXDraw 					; draw if non zero
.862f	ad 5c 06	lda $065c			lda 	gxUseMode 					; check to see if solid background
.8632	29 04		and #$04			and 	#4
.8634	f0 0a		beq $8640			beq 	_GXZeroPixel
.8636					_GXDraw:
.8636	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8638	2d 42 06	and $0642			and 	gxANDValue
.863b	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.863e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8640					_GXZeroPixel:
.8640	c8		iny				iny 								; advance pointer
.8641	d0 05		bne $8648			bne 	_GXNoShift
.8643	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8645	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap				; check for new page.
.8648					_GXNoShift:
.8648	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.864a	d0 d0		bne $861c			bne 	_GXROLLoop2
.864c	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.864e	a5 3a		lda $3a				lda 	gxzTemp2
.8650	cd 57 06	cmp $0657			cmp 	gxSize
.8653	d0 c2		bne $8617			bne 	_GXROLLoop1
.8655	ee 34 06	inc $0634			inc 	gxY0
.8658	60		rts				rts
.0657					gxSize:
>0657							.fill 	1
.0658					gxMask:
>0658							.fill 	1
.0659					gxAcquireVector:
>0659							.fill 	2
.065b					gxScale:
>065b							.fill 	1
.065c					gxUseMode:
>065c							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8659					GXFontHandler:
.8659	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.865b	4d 3f 06	eor $063f			eor 	gxMode
.865e	8d 5c 06	sta $065c			sta 	gxUseMode
.8661	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8663	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8665	26 37		rol $37				rol	 	gxzTemp0+1
.8667	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8669	26 37		rol $37				rol	 	gxzTemp0+1
.866b	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.866d	26 37		rol $37				rol	 	gxzTemp0+1
.866f	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8671	09 c0		ora #$c0			ora 	#$C0
.8673	85 37		sta $37				sta 	gxzTemp0+1
.8675	a9 08		lda #$08			lda 	#8 							; size 8x8
.8677	a2 7f		ldx #$7f			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8679	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.867b	20 97 85	jsr $8597			jsr 	GXDrawGraphicElement
.867e	60		rts				rts
.867f					GXGetGraphicDataFont:
.867f	8a		txa				txa 								; X->Y
.8680	a8		tay				tay
.8681	a6 01		ldx $01				ldx 	1 							; preserve old value
.8683	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8685	85 01		sta $01				sta 	1
.8687	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8689	86 01		stx $01				stx 	1 							; put old value back.
.868b	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.868d					_GXExpand:
.868d	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8690	0a		asl a				asl 	a 							; shift bit 7 into C
.8691	90 08		bcc $869b			bcc 	_GXNoPixel
.8693	48		pha				pha 								; if set, set pixel buffer to current colour.
.8694	ad 40 06	lda $0640			lda 	gxColour
.8697	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.869a	68		pla				pla
.869b					_GXNoPixel:
.869b	e8		inx				inx 								; do the whole byte.
.869c	e0 08		cpx #$08			cpx 	#8
.869e	d0 ed		bne $868d			bne 	_GXExpand
.86a0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a1					GXSpriteHandler:
.86a1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a3	4d 3f 06	eor $063f			eor 	gxMode
.86a6	8d 5c 06	sta $065c			sta 	gxUseMode
.86a9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86ab	da		phx				phx
.86ac	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap 				; can access sprite information
.86af	68		pla				pla
.86b0	20 68 88	jsr $8868			jsr 	GXFindSprite 				; get the sprite address
.86b3	08		php				php
.86b4	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap
.86b7	28		plp				plp
.86b8	b0 0a		bcs $86c4			bcs		_GXSHExit 					; exit if find failed.
.86ba	ad 5d 06	lda $065d			lda 	GXSizePixels 				; return size
.86bd	a2 c5		ldx #$c5			ldx 	#GXSpriteAcquire & $FF
.86bf	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c1	20 97 85	jsr $8597			jsr 	GXDrawGraphicElement
.86c4					_GXSHExit:
.86c4	60		rts				rts
.86c5					GXSpriteAcquire:
.86c5	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86c8	85 0b		sta $0b				sta 	GXEditSlot
.86ca	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86cc	a9 00		lda #$00			lda 	#0
.86ce	ae 5e 06	ldx $065e			ldx 	GXSizeBits
.86d1					_GXTimesRowNumber:
.86d1	18		clc				clc
.86d2	65 36		adc $36				adc 	zTemp0
.86d4	ca		dex				dex
.86d5	10 fa		bpl $86d1			bpl 	_GXTimesRowNumber
.86d7	64 37		stz $37				stz 	gxzTemp0+1
.86d9	0a		asl a				asl 	a 							; row x 2,4,6,8
.86da	26 37		rol $37				rol 	gxzTemp0+1
.86dc	0a		asl a				asl 	a 							; row x 4,8,12,16
.86dd	26 37		rol $37				rol 	gxzTemp0+1
.86df	0a		asl a				asl 	a 							; row x 8,16,24,32
.86e0	26 37		rol $37				rol 	gxzTemp0+1
.86e2	85 36		sta $36				sta 	gxzTemp0
.86e4	18		clc				clc 								; add base address.
.86e5	a5 36		lda $36				lda 	gxzTemp0
.86e7	6d 60 06	adc $0660			adc 	GXSpriteOffset
.86ea	85 36		sta $36				sta 	gxzTemp0
.86ec	a5 37		lda $37				lda 	gxzTemp0+1
.86ee	6d 61 06	adc $0661			adc 	GXSpriteOffset+1
.86f1					_GXSAFindPage:
.86f1	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f3	90 06		bcc $86fb			bcc 	_GXSAFoundPage
.86f5	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f7	e6 0b		inc $0b				inc 	GXEditSlot
.86f9	80 f6		bra $86f1			bra 	_GXSAFindPage
.86fb					_GXSAFoundPage:
.86fb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86fd	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86ff	a0 00		ldy #$00			ldy 	#0
.8701					_GXSACopyLoop:
.8701	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8703	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.8706	c8		iny				iny
.8707	cc 5d 06	cpy $065d			cpy 	GXSizePixels
.870a	d0 f5		bne $8701			bne 	_GXSACopyLoop
.870c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.870d					GXSelect:
.870d	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8710	f0 1f		beq $8731			beq 	_GXSFail
.8712	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8714	c9 40		cmp #$40			cmp 	#64
.8716	b0 19		bcs $8731			bcs 	_GXSFail
.8718	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.871a	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.871c	06 36		asl $36				asl 	gxzTemp0
.871e	06 36		asl $36				asl 	gxzTemp0
.8720	06 36		asl $36				asl 	gxzTemp0
.8722	2a		rol a				rol 	a
.8723	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8725	8d 47 06	sta $0647			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8728	85 37		sta $37				sta 	gxzTemp0+1
.872a	a5 36		lda $36				lda 	gxzTemp0
.872c	8d 46 06	sta $0646			sta 	GSCurrentSprite
.872f	18		clc				clc
.8730	60		rts				rts
.8731					_GXSFail:
.8731	38		sec				sec
.8732	60		rts				rts
.8733					GXSelectImage:
.8733	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8736	f0 63		beq $879b			beq 	_GXSIFail
.8738	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.873b	f0 5e		beq $879b			beq 	_GXSIFail
.873d	64 01		stz $01				stz 	1
.873f	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8741	d0 45		bne $8788			bne 	_GXSIHide
.8743	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8745	48		pha				pha
.8746	20 d9 87	jsr $87d9			jsr 	GXOpenBitmap
.8749	68		pla				pla
.874a	20 68 88	jsr $8868			jsr 	GXFindSprite
.874d	b0 49		bcs $8798			bcs 	_GXSICloseFail 				; no image
.874f	a0 01		ldy #$01			ldy 	#1
.8751	ad 46 06	lda $0646			lda 	GSCurrentSprite
.8754	85 36		sta $36				sta 	gxzTemp0
.8756	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8759	85 37		sta $37				sta 	gxzTemp0+1
.875b	ad 60 06	lda $0660			lda 	GXSpriteOffset
.875e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8760	18		clc				clc
.8761	ad 61 06	lda $0661			lda 	GXSpriteOffset+1
.8764	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.8767	c8		iny				iny
.8768	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876a	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.876d	69 00		adc #$00			adc 	#0
.876f	c8		iny				iny
.8770	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8772	ad 5e 06	lda $065e			lda 	GXSizeBits 					; get raw size
.8775	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8777	2a		rol a				rol 	a 							; x 2
.8778	0a		asl a				asl 	a 							; x 4
.8779	0a		asl a				asl 	a 							; x 8
.877a	0a		asl a				asl 	a 							; x 16
.877b	0d 5f 06	ora $065f			ora 	GXSpriteLUT 						; Or with LUT
.877e	0a		asl a				asl 	a 							; 1 shift
.877f	09 01		ora #$01			ora 	#1 							; enable sprite.
.8781	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8783	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap
.8786	18		clc				clc
.8787	60		rts				rts
.8788					_GXSIHide:
.8788	ad 46 06	lda $0646			lda 	GSCurrentSprite
.878b	85 36		sta $36				sta 	gxzTemp0
.878d	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8790	85 37		sta $37				sta 	gxzTemp0+1
.8792	a9 00		lda #$00			lda 	#0
.8794	92 36		sta ($36)			sta 	(gxzTemp0)
.8796	18		clc				clc
.8797	60		rts				rts
.8798					_GXSICloseFail:
.8798	20 ea 87	jsr $87ea			jsr 	GXCloseBitmap
.879b					_GXSIFail:
.879b	38		sec				sec
.879c	60		rts				rts
.879d					GXMoveSprite:
.879d	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87a0	f0 35		beq $87d7			beq 	_GXSIFail
.87a2	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.87a5	f0 30		beq $87d7			beq 	_GXSIFail
.87a7	85 37		sta $37				sta 	gxzTemp0+1
.87a9	a0 04		ldy #$04			ldy 	#4
.87ab	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87ae	85 36		sta $36				sta 	gxzTemp0
.87b0	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87b2	38		sec				sec
.87b3	ed 5d 06	sbc $065d			sbc 	GXSizePixels
.87b6	4a		lsr a				lsr 	a
.87b7	48		pha				pha
.87b8	18		clc				clc
.87b9	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.87bc	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87be	c8		iny				iny
.87bf	ad 33 06	lda $0633			lda 	gxX0+1
.87c2	69 00		adc #$00			adc 	#0
.87c4	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c6	c8		iny				iny
.87c7	68		pla				pla
.87c8	18		clc				clc
.87c9	6d 34 06	adc $0634			adc 	gxY0
.87cc	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ce	a9 00		lda #$00			lda 	#0
.87d0	69 00		adc #$00			adc 	#0
.87d2	c8		iny				iny
.87d3	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d5	18		clc				clc
.87d6	60		rts				rts
.87d7					_GXSIFail:
.87d7	38		sec				sec
.87d8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87d9					GXOpenBitmap:
.87d9	78		sei				sei 								; no interrupts here
.87da	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87dc	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.87df	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87e1	85 00		sta $00				sta 	0
.87e3	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87e5	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.87e8	58		cli				cli
.87e9	60		rts				rts
.87ea					GXCloseBitmap:
.87ea	78		sei				sei
.87eb	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87ee	85 0b		sta $0b				sta 	GXEditSlot
.87f0	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87f3	85 00		sta $00				sta 	0
.87f5	58		cli				cli
.87f6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87f7					GXPositionCalc:
.87f7	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87f9	48		pha				pha
.87fa	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.87fd	85 3c		sta $3c				sta 	gxzScreen
.87ff	64 3d		stz $3d				stz 	gxzScreen+1
.8801	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8803	26 3d		rol $3d				rol 	gxzScreen+1
.8805	06 3c		asl $3c				asl 	gxzScreen
.8807	26 3d		rol $3d				rol 	gxzScreen+1
.8809	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.880a	65 3c		adc $3c				adc 	gxzScreen
.880c	85 3c		sta $3c				sta 	gxzScreen
.880e	90 02		bcc $8812			bcc 	_GXPCNoCarry
.8810	e6 3d		inc $3d				inc 	gxzScreen+1
.8812					_GXPCNoCarry:
.8812	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8814	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8816	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8818	85 36		sta $36				sta 	gxzTemp0
.881a	64 3d		stz $3d				stz 	gxzScreen+1
.881c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.881e					_GXPCMultiply32:
.881e	06 3c		asl $3c				asl 	gxzScreen
.8820	26 3d		rol $3d				rol 	gxzScreen+1
.8822	3a		dec a				dec 	a
.8823	d0 f9		bne $881e			bne 	_GXPCMultiply32
.8825	18		clc				clc
.8826	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8829	65 3c		adc $3c				adc 	gxzScreen
.882b	8d 45 06	sta $0645			sta 	gsOffset
.882e	ad 33 06	lda $0633			lda 	GXX0+1
.8831	65 3d		adc $3d				adc 	gxzScreen+1
.8833	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8835	90 04		bcc $883b			bcc 	_GXPCNoOverflow
.8837	29 1f		and #$1f			and 	#$1F 						; fix it up
.8839	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.883b					_GXPCNoOverflow:
.883b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.883d	85 3d		sta $3d				sta 	gxzScreen+1
.883f	64 3c		stz $3c				stz 	gxzScreen
.8841	18		clc				clc
.8842	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8844	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.8847	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8849	68		pla				pla
.884a	85 36		sta $36				sta 	gxzTemp0
.884c	60		rts				rts
.884d					GXMovePositionDown:
.884d	18		clc				clc 								; add 320 to offset/temp+1
.884e	ad 45 06	lda $0645			lda 	gsOffset
.8851	69 40		adc #$40			adc 	#64
.8853	8d 45 06	sta $0645			sta 	gsOffset
.8856	a5 3d		lda $3d				lda 	gxzScreen+1
.8858	69 01		adc #$01			adc 	#1
.885a	85 3d		sta $3d				sta 	gxzScreen+1
.885c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.885e	90 07		bcc $8867			bcc 	_GXMPDExit
.8860	38		sec				sec  								; next page
.8861	e9 20		sbc #$20			sbc 	#$20
.8863	85 3d		sta $3d				sta 	gxzScreen+1
.8865	e6 0b		inc $0b				inc 	GXEditSlot
.8867					_GXMPDExit:
.8867	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8868					GXFindSprite:
.8868	aa		tax				tax
.8869	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.886c	85 0b		sta $0b				sta 	GXEditSlot
.886e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.8871	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.8874	f0 33		beq $88a9			beq 	_GXFSFail
.8876	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8879	8d 61 06	sta $0661			sta 	GXSpriteOffset+1
.887c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.887f	48		pha				pha 								; save twice
.8880	48		pha				pha
.8881	29 03		and #$03			and 	#3 							; get sprite size
.8883	8d 5e 06	sta $065e			sta 	GXSizeBits 					; save raw (0-3)
.8886	aa		tax				tax
.8887	bd ab 88	lda $88ab,x			lda 	_GXFXSSTTable,x 			; read sprite size
.888a	8d 5d 06	sta $065d			sta 	GXSizePixels 					; save (8/16/24/32)
.888d	68		pla				pla 								; get LUT
.888e	4a		lsr a				lsr		a
.888f	4a		lsr a				lsr		a
.8890	29 03		and #$03			and 	#3
.8892	8d 5f 06	sta $065f			sta 	GXSpriteLUT
.8895	68		pla				pla 								; address, neeeds to be x 4
.8896	29 f0		and #$f0			and 	#$F0
.8898	8d 60 06	sta $0660			sta 	GXSpriteOffset
.889b	0e 60 06	asl $0660			asl 	GXSpriteOffset
.889e	2e 61 06	rol $0661			rol 	GXSpriteOffset+1
.88a1	0e 60 06	asl $0660			asl 	GXSpriteOffset
.88a4	2e 61 06	rol $0661			rol 	GXSpriteOffset+1
.88a7	18		clc				clc
.88a8	60		rts				rts
.88a9					_GXFSFail:
.88a9	38		sec				sec
.88aa	60		rts				rts
.88ab					_GXFXSSTTable:
>88ab	08 10 18 20					.byte 	8,16,24,32
.065d					GXSizePixels:
>065d							.fill 	1
.065e					GXSizeBits:
>065e							.fill 	1
.065f					GXSpriteLUT:
>065f							.fill 	1
.0660					GXSpriteOffset:
>0660							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88af					GXSortXY:
.88af	20 cd 88	jsr $88cd			jsr 	GXSortY 					; will be sorted on Y now
.88b2	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.88b5	cd 36 06	cmp $0636			cmp 	gxX1
.88b8	ad 33 06	lda $0633			lda 	gXX0+1
.88bb	ed 37 06	sbc $0637			sbc 	gXX1+1
.88be	90 0c		bcc $88cc			bcc 	_GXSXYExit 					; X0 < X1 exit
.88c0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88c2	a0 04		ldy #$04			ldy 	#4
.88c4	20 e1 88	jsr $88e1			jsr 	GXSwapXY
.88c7	e8		inx				inx
.88c8	c8		iny				iny
.88c9	20 e1 88	jsr $88e1			jsr 	GXSwapXY
.88cc					_GXSXYExit:
.88cc	60		rts				rts
.88cd					GXSortY:
.88cd	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.88d0	cd 38 06	cmp $0638			cmp 	gxY1
.88d3	90 0b		bcc $88e0			bcc 	_GXSYSorted
.88d5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88d7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88d9					_GXSwap1:
.88d9	20 e1 88	jsr $88e1			jsr 	GXSwapXY
.88dc	88		dey				dey
.88dd	ca		dex				dex
.88de	10 f9		bpl $88d9			bpl 	_GXSwap1
.88e0					_GXSYSorted:
.88e0	60		rts				rts
.88e1					GXSwapXY:
.88e1	bd 32 06	lda $0632,x			lda 	gxX0,x
.88e4	48		pha				pha
.88e5	b9 32 06	lda $0632,y			lda 	gxX0,y
.88e8	9d 32 06	sta $0632,x			sta 	gxX0,x
.88eb	68		pla				pla
.88ec	99 32 06	sta $0632,y			sta 	gxX0,y
.88ef	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88f0					AssembleGroup1:
.88f0	a9 ff		lda #$ff			lda 	#$FF
.88f2	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88f5	80 02		bra $88f9			bra 	AsmGroup12
.88f7					AssembleGroup2:
.88f7	a5 00		lda $00				lda 	$00
.88f9					AsmGroup12:
.88f9	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88fc	68		pla				pla 								; pop the return address to access the information following.
.88fd	fa		plx				plx
.88fe	20 87 89	jsr $8987			jsr 	AccessParameters 			; get opcode and save as base
.8901	8d a4 04	sta $04a4			sta 	BaseOpcode
.8904	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8907	d0 08		bne $8911			bne 	_AG12HaveMask
.8909	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.890b	20 8f 89	jsr $898f			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.890e	8d a5 04	sta $04a5			sta 	ModeMask
.8911					_AG12HaveMask:
.8911	20 ca 8a	jsr $8aca			jsr 	TypeAndCalculateOperand 	; get zero page type
.8914	da		phx				phx 								; save found address mode
.8915	20 f3 89	jsr $89f3			jsr 	AssembleModeX
.8918	fa		plx				plx  								; restore address mode
.8919	b0 0b		bcs $8926			bcs 	_AG12Exit
.891b	20 27 89	jsr $8927			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.891e	20 f3 89	jsr $89f3			jsr 	AssembleModeX
.8921	b0 03		bcs $8926			bcs 	_AG12Exit
.8923	4c f8 b3	jmp $b3f8			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8926					_AG12Exit:
.8926	60		rts				rts
.8927					PromoteToAbsolute:
.8927	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8929	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.892b	f0 19		beq $8946			beq 	_PTADo
.892d	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.892f	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8931	f0 13		beq $8946			beq 	_PTADo
.8933	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8935	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8937	f0 0d		beq $8946			beq 	_PTADo
.8939	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.893b	e0 d1		cpx #$d1			cpx 	#AM_IND
.893d	f0 07		beq $8946			beq 	_PTADo
.893f	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8941	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8943	f0 01		beq $8946			beq 	_PTADo
.8945	60		rts				rts
.8946					_PTADo:
.8946	aa		tax				tax
.8947	60		rts				rts
.8948					AssembleGroup3:
.8948	68		pla				pla 								; get parameters, which is just the opcode.
.8949	fa		plx				plx
.894a	20 87 89	jsr $8987			jsr 	AccessParameters 			; get and output opcode
.894d	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte
.8950	20 2e 8b	jsr $8b2e			jsr 	CalculateOperand 			; get a 16 bit operand
.8953	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8956	38		sec				sec
.8957	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.895a	48		pha				pha 								; LSB in A
.895b	ad 10 04	lda $0410			lda 	NSMantissa1
.895e	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8961	aa		tax				tax 								; MSB in X
.8962	68		pla				pla
.8963	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8964	69 7f		adc #$7f			adc 	#$7F
.8966	90 01		bcc $8969			bcc 	_AG3NoCarry
.8968	e8		inx				inx
.8969					_AG3NoCarry:
.8969	38		sec				sec 								; fix back and write out anyways.
.896a	e9 80		sbc #$80			sbc 	#$80
.896c	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte
.896f	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8971	f0 0a		beq $897d			beq 	_AG3Exit
.8973	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8976	29 01		and #$01			and 	#1
.8978	f0 03		beq $897d			beq 	_AG3Exit
.897a	4c fd b3	jmp $b3fd			jmp 	RangeError 					; no, branch is out of range
.897d					_AG3Exit:
.897d	60		rts				rts
.897e					AssembleGroup4:
.897e	68		pla				pla 								; pop address
.897f	fa		plx				plx
.8980	20 87 89	jsr $8987			jsr 	AccessParameters 			; access and get first
.8983	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte 			; output it.
.8986	60		rts				rts
.8987					AccessParameters:
.8987	8d a1 04	sta $04a1			sta 	ParamStart
.898a	8e a2 04	stx $04a2			stx 	ParamStart+1
.898d	a9 01		lda #$01			lda 	#1
.898f					GetParameter:
.898f	5a		phy				phy
.8990	a8		tay				tay
.8991	ad a1 04	lda $04a1			lda 	ParamStart
.8994	85 36		sta $36				sta 	zTemp0
.8996	ad a2 04	lda $04a2			lda 	ParamStart+1
.8999	85 37		sta $37				sta 	zTemp0+1
.899b	b1 36		lda ($36),y			lda 	(zTemp0),y
.899d	7a		ply				ply
.899e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.899f					AssemblerWriteByte:
.899f	48		pha			pha
.89a0	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.89a3	29 02		and #$02		and 	#2
.89a5	f0 1b		beq $89c2		beq 	_AWBNoPrint
.89a7	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.89aa	20 dd 89	jsr $89dd		jsr 	PrintHex
.89ad	ad 9e 04	lda $049e		lda		AssemblerAddress
.89b0	20 dd 89	jsr $89dd		jsr 	PrintHex
.89b3	a9 20		lda #$20		lda 	#' '
.89b5	20 b0 b5	jsr $b5b0		jsr 	EXTPrintCharacter
.89b8	68		pla			pla 									; print byte
.89b9	48		pha			pha
.89ba	20 dd 89	jsr $89dd		jsr 	PrintHex
.89bd	a9 0d		lda #$0d		lda 	#13
.89bf	20 b0 b5	jsr $b5b0		jsr 	EXTPrintCharacter
.89c2					_AWBNoPrint:
.89c2	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89c5	85 36		sta $36			sta 	zTemp0
.89c7	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89ca	f0 0e		beq $89da		beq 	_AWBRange
.89cc	85 37		sta $37			sta 	zTemp0+1
.89ce	68		pla			pla 									; write byte out
.89cf	92 36		sta ($36)		sta 	(zTemp0)
.89d1	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89d4	d0 03		bne $89d9		bne 	_AWBNoCarry
.89d6	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89d9					_AWBNoCarry:
.89d9	60		rts			rts
.89da					_AWBRange:
.89da	4c fd b3	jmp $b3fd		jmp 	RangeError
.89dd					PrintHex:
.89dd	48		pha				pha
.89de	4a		lsr a				lsr 	a
.89df	4a		lsr a				lsr 	a
.89e0	4a		lsr a				lsr 	a
.89e1	4a		lsr a				lsr 	a
.89e2	20 e6 89	jsr $89e6			jsr 	_PrintNibble
.89e5	68		pla				pla
.89e6					_PrintNibble:
.89e6	29 0f		and #$0f			and 	#15
.89e8	c9 0a		cmp #$0a			cmp 	#10
.89ea	90 02		bcc $89ee			bcc 	_NoShift
.89ec	69 06		adc #$06			adc 	#6
.89ee					_NoShift:
.89ee	69 30		adc #$30			adc 	#48
.89f0	4c b0 b5	jmp $b5b0			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89f3					AssembleModeX:
.89f3	5a		phy				phy
.89f4	ad a3 04	lda $04a3			lda 	IsGroup1
.89f7	f0 17		beq $8a10			beq 	_AMXGroup2
.89f9	8a		txa				txa 							; is it in group # 1
.89fa	29 40		and #$40			and 	#AM_ISG1
.89fc	f0 50		beq $8a4e			beq 	_AMXFail 				; no, give up.
.89fe	8a		txa				txa 							; get back.
.89ff	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a01	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a03	d0 22		bne $8a27			bne 	_AMXHaveInfo
.8a05	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a08	c9 81		cmp #$81			cmp 	#$81
.8a0a	f0 42		beq $8a4e			beq 	_AMXFail
.8a0c	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a0e	80 17		bra $8a27			bra 	_AMXHaveInfo 			; odd design decision there.
.8a10					_AMXGroup2:
.8a10	8a		txa				txa 							; is it in group 2 ?
.8a11	29 20		and #$20			and 	#AM_ISG2
.8a13	f0 39		beq $8a4e			beq 	_AMXFail 				; no, give up.
.8a15	8a		txa				txa 							; get the offset into Y
.8a16	29 1f		and #$1f			and 	#$1F
.8a18	4a		lsr a				lsr 	a 						; make it 0-7.
.8a19	4a		lsr a				lsr  	a
.8a1a	a8		tay				tay
.8a1b	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a1e					_AMXCheckOkay:
.8a1e	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a1f	88		dey				dey
.8a20	10 fc		bpl $8a1e			bpl 	_AMXCheckOkay
.8a22	90 2a		bcc $8a4e			bcc 	_AMXFail 				; not allowed.
.8a24	8a		txa				txa  							; get mask back
.8a25	29 1f		and #$1f			and 	#$1F
.8a27					_AMXHaveInfo:
.8a27	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a29	10 05		bpl $8a30			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a2b	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a2e	d0 1e		bne $8a4e			bne 	_AMXFail
.8a30					_AMXAnySize:
.8a30	18		clc				clc 							; add offset to the base opcode
.8a31	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a34					_AMXOutputCode:
.8a34	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a37	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a39	f0 10		beq $8a4b			beq 	_AMXExit
.8a3b	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a3e	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte
.8a41	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a43	30 06		bmi $8a4b			bmi 	_AMXExit
.8a45	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a48	20 9f 89	jsr $899f			jsr 	AssemblerWriteByte
.8a4b					_AMXExit:
.8a4b	7a		ply				ply
.8a4c	38		sec				sec
.8a4d	60		rts				rts
.8a4e					_AMXFail:
.8a4e	a0 00		ldy #$00			ldy 	#0
.8a50					_AMXCheckOddities:
.8a50	8a		txa				txa
.8a51	d9 79 8a	cmp $8a79,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a54	d0 16		bne $8a6c			bne 	_AMXCONext
.8a56	b9 77 8a	lda $8a77,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a59	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a5c	d0 0e		bne $8a6c			bne 	_AMXCONext
.8a5e	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a60	10 05		bpl $8a67			bpl 	_AMXCONotZero
.8a62	ad 10 04	lda $0410			lda 	NSMantissa1
.8a65	d0 05		bne $8a6c			bne 	_AMXCONext
.8a67					_AMXCONotZero:
.8a67	b9 78 8a	lda $8a78,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a6a	80 c8		bra $8a34			bra 	_AMXOutputCode 			; and assemble it
.8a6c					_AMXCONext:
.8a6c	c8		iny				iny
.8a6d	c8		iny				iny
.8a6e	c8		iny				iny
.8a6f	b9 77 8a	lda $8a77,y			lda 	ExtraOpcode+0,y 		; end of table
.8a72	d0 dc		bne $8a50			bne 	_AMXCheckOddities
.8a74					_AMXCOFail:
.8a74	7a		ply				ply
.8a75	18		clc				clc
.8a76	60		rts				rts
.8a77					ExtraOpcode:
>8a77	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a7a	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a7d	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a80	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a83	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a86	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a89	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a8c	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a8f	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a92	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a95	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a96					LabelHere:
.8a96	c8		iny				iny 								; skip .
.8a97	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a99	20 77 a0	jsr $a077			jsr 	EvaluateTerm 				; get a term
.8a9c	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a9f	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8aa1	d0 24		bne $8ac7			bne 	_ALType
.8aa3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8aa6	85 36		sta $36				sta 	zTemp0
.8aa8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8aab	85 37		sta $37				sta 	zTemp0+1
.8aad	5a		phy				phy 								; copy address in.
.8aae	a0 01		ldy #$01			ldy 	#1
.8ab0	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8ab3	92 36		sta ($36)			sta 	(zTemp0)
.8ab5	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8ab8	91 36		sta ($36),y			sta 	(zTemp0),y
.8aba	c8		iny				iny
.8abb	a9 00		lda #$00			lda 	#0
.8abd	91 36		sta ($36),y			sta 	(zTemp0),y
.8abf	c8		iny				iny
.8ac0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac2	c8		iny				iny
.8ac3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac5	7a		ply				ply
.8ac6	60		rts				rts
.8ac7					_ALType:
.8ac7	4c 02 b4	jmp $b402			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aca					TypeAndCalculateOperand:
.8aca	b1 30		lda ($30),y			lda 	(codePtr),y
.8acc	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ace	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ad0	f0 5b		beq $8b2d			beq 	_TACOExit
.8ad2	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ad4	f0 57		beq $8b2d			beq 	_TACOExit
.8ad6	c8		iny				iny
.8ad7	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ad9	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8adb	f0 51		beq $8b2e			beq 	CalculateOperand
.8add	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8adf	f0 1f		beq $8b00			beq 	_TACOIndirect
.8ae1	88		dey				dey 								; undo get of first character
.8ae2	20 2e 8b	jsr $8b2e			jsr 	CalculateOperand 			; get operand
.8ae5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae7	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ae9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aeb	d0 40		bne $8b2d			bne 	_TACOExit
.8aed	c8		iny				iny
.8aee	20 81 ad	jsr $ad81			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8af1	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8af3	c9 58		cmp #$58			cmp 	#'X'
.8af5	f0 36		beq $8b2d			beq 	_TACOExit
.8af7	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8af9	c9 59		cmp #$59			cmp 	#'Y'
.8afb	f0 30		beq $8b2d			beq 	_TACOExit
.8afd					_TACOSyntax:
.8afd	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.8b00					_TACOIndirect:
.8b00	20 2e 8b	jsr $8b2e			jsr 	CalculateOperand 			; get the operand
.8b03	b1 30		lda ($30),y			lda 	(codePtr),y
.8b05	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b07	f0 17		beq $8b20			beq 	_TACOIndX
.8b09	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0e	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b10	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b12	d0 19		bne $8b2d			bne 	_TACOExit
.8b14	c8		iny				iny
.8b15	20 81 ad	jsr $ad81			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b18	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b1a	d0 e1		bne $8afd			bne 	_TACOSyntax
.8b1c	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b1e	80 0d		bra $8b2d			bra 	_TACOExit
.8b20					_TACOIndX:
.8b20	c8		iny				iny
.8b21	20 81 ad	jsr $ad81			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b24	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b26	d0 d5		bne $8afd			bne 	_TACOSyntax
.8b28	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket			; check )
.8b2b	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b2d					_TACOExit:
.8b2d	60		rts				rts
.8b2e					CalculateOperand:
.8b2e	48		pha				pha
.8b2f	da		phx				phx
.8b30	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b32	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.8b35	fa		plx				plx
.8b36	68		pla				pla
.8b37	60		rts				rts
.ad81					TACOCheckXY:
.ad81	b1 30		lda ($30),y			lda 	(codePtr),y
.ad83	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ad85	c9 40		cmp #$40			cmp 	#$40
.ad87	d0 21		bne $adaa			bne 	_TCXYFail
.ad89	b1 30		lda ($30),y			lda 	(codePtr),y
.ad8b	18		clc				clc
.ad8c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad8e	85 37		sta $37				sta 	zTemp0+1
.ad90	c8		iny				iny
.ad91	b1 30		lda ($30),y			lda 	(codePtr),y
.ad93	c8		iny				iny
.ad94	85 36		sta $36				sta 	zTemp0
.ad96	5a		phy				phy 								; save position
.ad97	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad99	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad9b	d0 0c		bne $ada9			bne 	_TCXYPopFail
.ad9d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ada1	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ada3	f0 08		beq $adad			beq 	_TCXYFound
.ada5	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ada7	f0 04		beq $adad			beq 	_TCXYFound
.ada9					_TCXYPopFail:
.ada9	7a		ply				ply
.adaa					_TCXYFail:
.adaa	a9 00		lda #$00			lda 	#0
.adac	60		rts				rts
.adad					_TCXYFound:
.adad	7a		ply				ply 								; restore position
.adae	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.adb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b38					EditProgramCode:
.8b38	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8b3b	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8b3e	20 2f a6	jsr $a62f			jsr 	MemorySearch
.8b41	90 05		bcc $8b48			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b43	d0 03		bne $8b48			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b45	20 3b b6	jsr $b63b			jsr 	MemoryDeleteLine 			; delete the line
.8b48					_EPCNoDelete:
.8b48	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8b4b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b4d	f0 0d		beq $8b5c			beq 	_EPCNoInsert
.8b4f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b52	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b55	20 2f a6	jsr $a62f			jsr 	MemorySearch
.8b58	18		clc				clc 								; insert at this point.
.8b59	20 72 b6	jsr $b672			jsr 	MemoryInsertLine 			; insert the line
.8b5c					_EPCNoInsert:
.8b5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b5d					WarmStart:
.8b5d	a2 ff		ldx #$ff			ldx 	#$FF
.8b5f	9a		txs				txs
.8b60	20 c6 b5	jsr $b5c6			jsr 	EXTInputLine 				; get line to lineBuffer
.8b63	20 02 ab	jsr $ab02			jsr 	TokeniseLine 				; tokenise the line
.8b66	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8b69	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8b6c	d0 17		bne $8b85			bne 	_WSEditCode 				; if so,edit code.
.8b6e	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b71	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8b73	85 30		sta $30				sta 	codePtr
.8b75	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b77	85 31		sta $31				sta 	codePtr+1
.8b79	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8b7c	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b7e	f0 dd		beq $8b5d			beq 	WarmStart
.8b80	20 9d 94	jsr $949d			jsr 	RUNCodePointerLine 			; execute that line.
.8b83	80 d8		bra $8b5d			bra 	WarmStart
.8b85					_WSEditCode:
.8b85	20 38 8b	jsr $8b38			jsr 	EditProgramCode
.8b88	20 f6 8b	jsr $8bf6			jsr 	ClearCommand
.8b8b	80 d0		bra $8b5d			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b8d					AssembleCommand:
.8b8d	a2 00		ldx #$00			ldx 	#0
.8b8f	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger 		; start address
.8b92	ad 08 04	lda $0408			lda 	NSMantissa0
.8b95	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b98	ad 10 04	lda $0410			lda 	NSMantissa1
.8b9b	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b9e	20 12 ae	jsr $ae12			jsr 	CheckComma
.8ba1	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; options
.8ba4	ad 08 04	lda $0408			lda 	NSMantissa0
.8ba7	8d a0 04	sta $04a0			sta 	AssemblerControl
.8baa	60		rts				rts
.8bab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8bac					AssertCommand:
.8bac	a2 00		ldx #$00			ldx 	#0
.8bae	20 33 a5	jsr $a533			jsr 	EvaluateInteger 			; the assert test
.8bb1	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; exit if result is non zero.
.8bb4	d0 05		bne $8bbb			bne 	_ACExit
.8bb6	a9 0a		lda #$0a		lda	#10
.8bb8	4c 95 99	jmp $9995		jmp	ErrorHandler
.8bbb					_ACExit:
.8bbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bbc					CallCommand:
.8bbc	a2 00		ldx #$00			ldx 	#0
.8bbe	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.8bc1					_CCClear
.8bc1	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bc2	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.8bc5	e0 04		cpx #$04			cpx 	#4
.8bc7	d0 f8		bne $8bc1			bne 	_CCClear
.8bc9	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bcb					_CCCParam:
.8bcb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bcf	d0 09		bne $8bda			bne 	_CCCRun6502
.8bd1	c8		iny				iny 								; skip comma
.8bd2	e8		inx				inx	 								; next level
.8bd3	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bd6	e0 03		cpx #$03			cpx 	#3
.8bd8	90 f1		bcc $8bcb			bcc 	_CCCParam 					; done all 3 ?
.8bda					_CCCRun6502:
.8bda	5a		phy				phy 								; save position
.8bdb	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bde	85 37		sta $37				sta 	zTemp0+1
.8be0	ad 08 04	lda $0408			lda 	NSMantissa0
.8be3	85 36		sta $36				sta 	zTemp0
.8be5	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8be8	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8beb	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bee	20 f3 8b	jsr $8bf3			jsr 	_CCCZTemp0 					; call zTemp0
.8bf1	7a		ply				ply 								; restore position and exit
.8bf2	60		rts				rts
.8bf3					_CCCZTemp0:
.8bf3	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bf6					ClearCommand:
.8bf6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bf8	85 36		sta $36				sta 	0+zTemp0
.8bfa	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bfc	85 37		sta $37				sta 	1+zTemp0
.8bfe					_ClearZeroLoop:
.8bfe	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c00	f0 24		beq $8c26			beq 	_ClearZeroEnd
.8c02	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c04	a9 00		lda #$00			lda 	#0
.8c06					_ClearOneVariable:
.8c06	91 36		sta ($36),y			sta 	(zTemp0),y
.8c08	c8		iny				iny
.8c09	c0 08		cpy #$08			cpy 	#8
.8c0b	d0 f9		bne $8c06			bne 	_ClearOneVariable
.8c0d	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c0f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c11	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c13	d0 04		bne $8c19			bne 	_ClearNotProcedure
.8c15	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c17	91 36		sta ($36),y			sta 	(zTemp0),y
.8c19					_ClearNotProcedure:
.8c19	18		clc				clc 								; go to the next variable
.8c1a	b2 36		lda ($36)			lda 	(zTemp0)
.8c1c	65 36		adc $36				adc 	zTemp0
.8c1e	85 36		sta $36				sta 	zTemp0
.8c20	90 dc		bcc $8bfe			bcc 	_ClearZeroLoop
.8c22	e6 37		inc $37				inc 	zTemp0+1
.8c24	80 d8		bra $8bfe			bra 	_ClearZeroLoop
.8c26					_ClearZeroEnd:
.8c26	18		clc				clc
.8c27	a5 36		lda $36				lda 	zTemp0
.8c29	69 01		adc #$01			adc 	#1
.8c2b	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c2e	a5 37		lda $37				lda 	zTemp0+1
.8c30	69 00		adc #$00			adc 	#0
.8c32	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c35	20 e9 a6	jsr $a6e9			jsr 	StackReset
.8c38	20 55 b7	jsr $b755			jsr 	StringSystemInitialise
.8c3b	20 9e 98	jsr $989e			jsr 	ProcedureScan
.8c3e	20 59 94	jsr $9459			jsr 	Command_Restore
.8c41	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c44	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c47	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c4a	20 6a a2	jsr $a26a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c4e					ClearScreen:
.8c4e	5a		phy				phy
.8c4f	20 ad b5	jsr $b5ad			jsr 	EXTClearScreen
.8c52	7a		ply				ply
.8c53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c54					Command_Data:
.8c54	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c56	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c58	20 f0 98	jsr $98f0			jsr 	ScanForward
.8c5b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c5c					DimCommand:
.8c5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5e	29 c0		and #$c0			and 	#$C0
.8c60	c9 40		cmp #$40			cmp 	#$40
.8c62	d0 7a		bne $8cde			bne 	_DCSyntax
.8c64	b1 30		lda ($30),y			lda 	(codePtr),y
.8c66	18		clc				clc
.8c67	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c69	85 3f		sta $3f				sta 	zaTemp+1
.8c6b	c8		iny				iny
.8c6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e	c8		iny				iny
.8c6f	85 3e		sta $3e				sta 	zaTemp
.8c71	5a		phy				phy
.8c72	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c74	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c76	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c78	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c7a	f0 62		beq $8cde			beq 	_DCSyntax
.8c7c	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c7e	29 04		and #$04			and 	#NSBIsArray
.8c80	f0 64		beq $8ce6			beq 	_DCType
.8c82	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c84	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c86	d0 59		bne $8ce1			bne 	_DCRedefine
.8c88	7a		ply				ply
.8c89	20 e9 8c	jsr $8ce9			jsr 	_DCGetSize 				; get array size, check it.
.8c8c	5a		phy				phy
.8c8d	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c8f	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c91	7a		ply				ply 							; is there a second (e.g. ,x)
.8c92	b1 30		lda ($30),y			lda 	(codePtr),y
.8c94	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c96	d0 0a		bne $8ca2			bne 	_DCOneDimension
.8c98	c8		iny				iny 							; skip comma
.8c99	20 e9 8c	jsr $8ce9			jsr 	_DCGetSize 				; get 2nd array size
.8c9c	5a		phy				phy
.8c9d	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c9f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca1	7a		ply				ply
.8ca2					_DCOneDimension:
.8ca2	5a		phy				phy 							; save position
.8ca3	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8ca5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ca7	aa		tax				tax
.8ca8	c8		iny				iny
.8ca9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cab	e8		inx				inx 							; bump them.
.8cac	1a		inc a				inc 	a
.8cad	20 94 b2	jsr $b294			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8cb0	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8cb2	29 e0		and #$e0			and 	#$E0
.8cb4	d0 23		bne $8cd9			bne 	_DCSize
.8cb6	a0 02		ldy #$02			ldy 	#2 						; get base type
.8cb8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cba	20 f7 8c	jsr $8cf7			jsr 	ScaleByBaseType 		; scale by base type
.8cbd	a5 36		lda $36				lda 	zTemp0
.8cbf	a6 37		ldx $37				ldx 	zTemp0+1
.8cc1	20 2c a2	jsr $a22c			jsr 	AllocateXABytes 		; allocate memory
.8cc4	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cc6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cc8	c8		iny				iny
.8cc9	8a		txa				txa
.8cca	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ccc	7a		ply				ply 							; get position back
.8ccd	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 		; check )
.8cd0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd2	c8		iny				iny 							; consume in case
.8cd3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cd5	f0 85		beq $8c5c			beq 	DimCommand
.8cd7	88		dey				dey 							; undo consume
.8cd8	60		rts				rts
.8cd9					_DCSize:
.8cd9	a9 16		lda #$16		lda	#22
.8cdb	4c 95 99	jmp $9995		jmp	ErrorHandler
.8cde					_DCSyntax:
.8cde	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.8ce1					_DCRedefine:
.8ce1	a9 15		lda #$15		lda	#21
.8ce3	4c 95 99	jmp $9995		jmp	ErrorHandler
.8ce6					_DCType:
.8ce6	4c 02 b4	jmp $b402			jmp 	TypeError
.8ce9					_DCGetSize:
.8ce9	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8ceb	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 	; get array dimension
.8cee	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cf0	f0 e7		beq $8cd9			beq 	_DCSize
.8cf2	c9 fe		cmp #$fe			cmp 	#254
.8cf4	f0 e3		beq $8cd9			beq 	_DCSize
.8cf6	60		rts				rts
.8cf7					ScaleByBaseType:
.8cf7	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cf9	d0 19		bne $8d14			bne 	_SBBTString
.8cfb	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cfd	48		pha				pha
.8cfe	a5 36		lda $36				lda 	zTemp0
.8d00	48		pha				pha
.8d01	06 36		asl $36				asl 	zTemp0 					; x 2
.8d03	26 37		rol $37				rol 	zTemp0+1
.8d05	06 36		asl $36				asl 	zTemp0 					; x 4
.8d07	26 37		rol $37				rol 	zTemp0+1
.8d09	68		pla				pla 							; add stacked value = x 5
.8d0a	65 36		adc $36				adc 	zTemp0
.8d0c	85 36		sta $36				sta 	zTemp0
.8d0e	68		pla				pla
.8d0f	65 37		adc $37				adc 	zTemp0+1
.8d11	85 37		sta $37				sta 	zTemp0+1
.8d13	60		rts				rts
.8d14					_SBBTString:
.8d14	06 36		asl $36				asl 	zTemp0
.8d16	26 37		rol $37				rol 	zTemp0+1
.8d18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d19					EndCommand:
.8d19	4c 5d 8b	jmp $8b5d			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d1c					UnaryEvent:
.8d1c	fa		plx				plx
.8d1d	20 dd 96	jsr $96dd			jsr 	TimerToStackX 				; timer in +0
.8d20	e8		inx				inx  								; put reference into +1
.8d21	20 77 a0	jsr $a077			jsr 	EvaluateTerm
.8d24	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d27	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d29	d0 57		bne $8d82			bne 	_UEType
.8d2b	e8		inx				inx 								; put the step in +2
.8d2c	20 12 ae	jsr $ae12			jsr 	CheckComma
.8d2f	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.8d32	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.8d35	ca		dex				dex
.8d36	ca		dex				dex
.8d37	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8d3a	85 36		sta $36				sta 	zTemp0
.8d3c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8d3f	85 37		sta $37				sta 	zTemp0+1
.8d41	5a		phy				phy
.8d42	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d44	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d46	30 36		bmi $8d7e			bmi 	_UEFalse 					; exit if signed.
.8d48	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d4a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d4d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d4f	c8		iny				iny
.8d50	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d53	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d55	c8		iny				iny
.8d56	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d59	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d5b	90 21		bcc $8d7e			bcc 	_UEFalse 					; no, return FALSE.
.8d5d	18		clc				clc
.8d5e	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d60	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d63	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d66	91 36		sta ($36),y			sta 	(zTemp0),y
.8d68	c8		iny				iny
.8d69	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d6c	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d71	c8		iny				iny
.8d72	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d75	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d78	91 36		sta ($36),y			sta 	(zTemp0),y
.8d7a	7a		ply				ply
.8d7b	4c 02 9a	jmp $9a02			jmp 	ReturnTrue
.8d7e					_UEFalse:
.8d7e	7a		ply				ply 								; restore Y
.8d7f	4c 0e 9a	jmp $9a0e			jmp 	ReturnFalse 				; and return False
.8d82					_UEType:
.8d82	4c 02 b4	jmp $b402			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d85					ForCommand:
.8d85	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d87	20 84 a6	jsr $a684			jsr 	StackOpen
.8d8a	a2 00		ldx #$00			ldx 	#0
.8d8c	20 77 a0	jsr $a077			jsr 	EvaluateTerm
.8d8f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d92	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d94	d0 49		bne $8ddf			bne		_FCError
.8d96	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d98	20 1a ae	jsr $ae1a			jsr 	CheckNextA
.8d9b	e8		inx				inx
.8d9c	20 33 a5	jsr $a533			jsr 	EvaluateInteger 			; <from> in +1
.8d9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8da1	c8		iny				iny 								; consume it
.8da2	48		pha				pha 								; save on stack for later
.8da3	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8da5	f0 04		beq $8dab			beq 	_FCNoSyntax
.8da7	c9 ca		cmp #$ca			cmp 	#KWD_TO
.8da9	d0 37		bne $8de2			bne 	_FCSyntaxError
.8dab					_FCNoSyntax:
.8dab	e8		inx				inx
.8dac	20 33 a5	jsr $a533			jsr 	EvaluateInteger
.8daf	20 c8 a6	jsr $a6c8			jsr 	STKSaveCodePosition 		; save loop back position
.8db2	68		pla				pla 								; restore DOWNTO or TO
.8db3	5a		phy				phy 								; save Y on the stack
.8db4	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8db6	f0 02		beq $8dba			beq 	_FCNotDownTo
.8db8	a9 02		lda #$02			lda 	#2
.8dba					_FCNotDownTo:
.8dba	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dbb	a0 10		ldy #$10			ldy 	#16
.8dbd	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dbf	a0 06		ldy #$06			ldy 	#6
.8dc1	ad 08 04	lda $0408			lda 	NSMantissa0
.8dc4	91 34		sta ($34),y			sta 	(basicStack),y
.8dc6	ad 10 04	lda $0410			lda 	NSMantissa1
.8dc9	c8		iny				iny
.8dca	91 34		sta ($34),y			sta 	(basicStack),y
.8dcc	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dce	a2 01		ldx #$01			ldx 	#1
.8dd0	20 e5 8d	jsr $8de5			jsr 	FCIntegerToStack
.8dd3	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dd5	a2 02		ldx #$02			ldx 	#2
.8dd7	20 e5 8d	jsr $8de5			jsr 	FCIntegerToStack
.8dda	20 05 8e	jsr $8e05			jsr 	CopyIndexToReference
.8ddd	7a		ply				ply 								; restore position
.8dde	60		rts				rts
.8ddf					_FCError:
.8ddf	4c 02 b4	jmp $b402			jmp 	TypeError
.8de2					_FCSyntaxError:
.8de2	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.8de5					FCIntegerToStack:
.8de5	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8de8	10 03		bpl $8ded			bpl	 	_FCNotNegative
.8dea	20 85 a5	jsr $a585			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ded					_FCNotNegative:
.8ded	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8df0	91 34		sta ($34),y			sta 	(basicStack),y
.8df2	c8		iny				iny
.8df3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8df6	91 34		sta ($34),y			sta 	(basicStack),y
.8df8	c8		iny				iny
.8df9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dfc	91 34		sta ($34),y			sta 	(basicStack),y
.8dfe	c8		iny				iny
.8dff	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e02	91 34		sta ($34),y			sta 	(basicStack),y
.8e04	60		rts				rts
.8e05					CopyIndexToReference:
.8e05	5a		phy				phy
.8e06	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e08	38		sec				sec 								; (because we copy from offset 8)
.8e09	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0b	e9 08		sbc #$08			sbc 	#8
.8e0d	85 36		sta $36				sta 	zTemp0
.8e0f	c8		iny				iny
.8e10	b1 34		lda ($34),y			lda 	(basicStack),y
.8e12	e9 00		sbc #$00			sbc 	#0
.8e14	85 37		sta $37				sta 	zTemp0+1
.8e16	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e18	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e1a	b1 34		lda ($34),y			lda 	(basicStack),y
.8e1c	0a		asl a				asl 	a 							; into carry
.8e1d	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e1f	90 14		bcc $8e35			bcc 	_CITRNormal
.8e21	38		sec				sec
.8e22					_CITRNegative:
.8e22	a9 00		lda #$00			lda 	#0
.8e24	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e26	91 36		sta ($36),y			sta 	(zTemp0),y
.8e28	c8		iny				iny
.8e29	ca		dex				dex
.8e2a	d0 f6		bne $8e22			bne 	_CITRNegative
.8e2c	88		dey				dey 								; look at MSB of mantissa
.8e2d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e2f	09 80		ora #$80			ora 	#$80
.8e31	91 36		sta ($36),y			sta 	(zTemp0),y
.8e33	7a		ply				ply
.8e34	60		rts				rts
.8e35					_CITRNormal:
.8e35	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e37	91 36		sta ($36),y			sta 	(zTemp0),y
.8e39	c8		iny				iny
.8e3a	ca		dex				dex
.8e3b	d0 f8		bne $8e35			bne 	_CITRNormal
.8e3d	7a		ply				ply 								; and exit.
.8e3e	60		rts				rts
.8e3f					NextCommand:
.8e3f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e41	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e43	20 b0 a6	jsr $a6b0			jsr 	StackCheckFrame
.8e46	5a		phy				phy
.8e47	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e49	b1 34		lda ($34),y			lda 	(basicStack),y
.8e4b	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e4d	30 02		bmi $8e51			bmi 	_NCStepNeg
.8e4f	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e51					_NCStepNeg:
.8e51	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e53	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e55	18		clc				clc
.8e56					_NCBump:
.8e56	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e58	91 34		sta ($34),y			sta 	(basicStack),y
.8e5a	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e5c	c8		iny				iny 								; next byte
.8e5d	ca		dex				dex 								; do four times
.8e5e	d0 f6		bne $8e56			bne 	_NCBump
.8e60	20 05 8e	jsr $8e05			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e63	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e65	b1 34		lda ($34),y			lda 	(basicStack),y
.8e67	0a		asl a				asl 	a 							; sign bit to carry
.8e68	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e6a	85 38		sta $38				sta 	zTemp1
.8e6c	90 02		bcc $8e70			bcc 	_NCCompRev 					; use if step is +ve
.8e6e	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e70					_NCCompRev:
.8e70	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e72	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e74	85 39		sta $39				sta 	zTemp1+1
.8e76	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e78	38		sec				sec
.8e79					_NCCompare:
.8e79	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e7b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e7d	a4 39		ldy $39				ldy 	zTemp1+1
.8e7f	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e81	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e83	e6 39		inc $39				inc 	zTemp1+1
.8e85	ca		dex				dex 								; do it 4 times.
.8e86	d0 f1		bne $8e79			bne 	_NCCompare
.8e88	50 02		bvc $8e8c			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e8a	49 80		eor #$80			eor 	#$80
.8e8c					_NCNoOverflow:
.8e8c	7a		ply				ply 								; restore Y position
.8e8d	0a		asl a				asl 	a 							; is bit 7 set.
.8e8e	90 04		bcc $8e94			bcc 	_NCLoopback 				; if no , >= so loop back
.8e90	20 a2 a6	jsr $a6a2			jsr 	StackClose 					; exit the loop
.8e93	60		rts				rts
.8e94					_NCLoopBack:
.8e94	20 d9 a6	jsr $a6d9			jsr 	STKLoadCodePosition 		; loop back
.8e97	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e98					RectangleCommand:
.8e98	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e9a	80 02		bra $8e9e			bra 	ShapeDrawCmd
.8e9c					CircleCommand:
.8e9c	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e9e					ShapeDrawCmd:
.8e9e	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8ea1					ShapeDraw:
.8ea1	0d 63 06	ora $0663			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ea4	4c 20 8f	jmp $8f20			jmp 	ExecuteGraphicCommand	 	; and complete
.8ea7					SpriteCommand:
.8ea7	a2 00		ldx #$00			ldx 	#0
.8ea9	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get image number.
.8eac	5a		phy				phy
.8ead	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8eaf	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb2	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8eb4	b0 0d		bcs $8ec3			bcs 	_SCRange
.8eb6	a0 ff		ldy #$ff			ldy 	#255
.8eb8	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ebb	a9 32		lda #$32			lda 	#25*2
.8ebd	7a		ply				ply
.8ebe	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8ec1	80 5d		bra $8f20			bra 	ExecuteGraphicCommand
.8ec3					_SCRange:
.8ec3	4c fd b3	jmp $b3fd			jmp 	RangeError
.8ec6					ImageCommand:
.8ec6	a2 00		ldx #$00			ldx 	#0
.8ec8	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get image number.
.8ecb	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8ece					ImageRunDraw:
.8ece	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ed0	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ed3	ad 69 06	lda $0669			lda 	gxDrawScale
.8ed6	0a		asl a				asl 	a
.8ed7	0a		asl a				asl 	a
.8ed8	0a		asl a				asl 	a
.8ed9	a8		tay				tay
.8eda	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8edc	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8edf	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ee2	60		rts				rts
.8ee3					TextCommand:
.8ee3	a2 00		ldx #$00			ldx 	#0
.8ee5	20 1b a5	jsr $a51b			jsr 	EvaluateString 				; get text
.8ee8	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8eeb					TextRunDraw:
.8eeb	09 20		ora #$20			ora 	#16*2 						; move cursor
.8eed	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ef0	a0 00		ldy #$00			ldy 	#0
.8ef2					_IRDLoop:
.8ef2	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ef5	85 37		sta $37				sta 	zTemp0+1
.8ef7	ad 08 04	lda $0408			lda 	NSMantissa0
.8efa	85 36		sta $36				sta 	zTemp0
.8efc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8efe	f0 13		beq $8f13			beq 	_IRDExit
.8f00	5a		phy				phy									; save string pos
.8f01	48		pha				pha 								; save char
.8f02	ad 69 06	lda $0669			lda 	gxDrawScale 				; get scale
.8f05	0a		asl a				asl 	a
.8f06	0a		asl a				asl 	a
.8f07	0a		asl a				asl 	a
.8f08	a8		tay				tay
.8f09	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f0b	fa		plx				plx 								; char to draw
.8f0c	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8f0f	7a		ply				ply 								; restore string pos
.8f10	c8		iny				iny
.8f11	90 df		bcc $8ef2			bcc 	_IRDLoop 					; go back if no error.
.8f13					_IRDExit:
.8f13	60		rts				rts
.8f14					PlotCommand:
.8f14	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f16	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8f19	80 05		bra $8f20			bra 	ExecuteGraphicCommand
.8f1b					LineCommand:
.8f1b	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f1d	20 2c 8f	jsr $8f2c			jsr 	RunGraphicsCommand
.8f20					ExecuteGraphicCommand:
.8f20	0d 62 06	ora $0662			ora 	gxCommandID 				; make a full command
.8f23	20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.8f26	b0 01		bcs $8f29			bcs 	_EGCError
.8f28	60		rts				rts
.8f29					_EGCError:
.8f29	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.8f2c					RunGraphicsCommand:
.8f2c	8d 62 06	sta $0662			sta 	gxCommandID					; save TODO graphics command.
.8f2f	68		pla				pla 								; pop handler address
.8f30	fa		plx				plx
.8f31	1a		inc a				inc 	a
.8f32	d0 01		bne $8f35			bne 	_RGINoCarry
.8f34	e8		inx				inx
.8f35					_RGINoCarry:
.8f35	8d 67 06	sta $0667			sta 	GXHandler
.8f38	8e 68 06	stx $0668			stx 	GXHandler+1
.8f3b					_RGICommandLoop:
.8f3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f3d	c8		iny				iny
.8f3e	c9 ca		cmp #$ca			cmp 	#KWD_TO						; is it TO x,y
.8f40	f0 53		beq $8f95			beq 	_RGI_To
.8f42	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f44	f0 55		beq $8f9b			beq 	_RGI_Here
.8f46	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f48	f0 3d		beq $8f87			beq 	_RGI_Exit
.8f4a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f4c	f0 39		beq $8f87			beq 	_RGI_Exit
.8f4e	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f50	f0 3e		beq $8f90			beq 	_RGI_Frame
.8f52	c9 c7		cmp #$c7			cmp 	#KWD_SOLID
.8f54	f0 33		beq $8f89			beq 	_RGI_Solid
.8f56	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f58	f0 4b		beq $8fa5			beq 	_RGI_By
.8f5a	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f5c	f0 17		beq $8f75			beq 	_RGI_Move2
.8f5e	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f60	f0 65		beq $8fc7			beq 	_RGI_Dim
.8f62	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f64	f0 78		beq $8fde			beq 	_RGI_Colour
.8f66	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f68	f0 74		beq $8fde			beq 	_RGI_Colour
.8f6a	ae 62 06	ldx $0662			ldx 	gxCommandID
.8f6d	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f6f	d0 03		bne $8f74			bne 	_RGI_Move 					; move
.8f71	4c 08 90	jmp $9008			jmp		_RGI_SpriteInstructions
.8f74					_RGI_Move:
.8f74	88		dey				dey 								; unpick get.
.8f75					_RGI_Move2:
.8f75	20 2e 90	jsr $902e			jsr 	GCGetCoordinatePair 		; move to here
.8f78	20 55 90	jsr $9055			jsr 	GCCopyPairToStore 			; save
.8f7b	5a		phy				phy
.8f7c	20 4b 90	jsr $904b			jsr 	GCLoadAXY 					; load in
.8f7f	09 20		ora #$20			ora 	#16*2 						; move there
.8f81	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8f84	7a		ply				ply
.8f85	80 b4		bra $8f3b			bra 	_RGICommandLoop 			; and go round
.8f87					_RGI_Exit:
.8f87	88		dey				dey 								; unpick : / EOL
.8f88	60		rts				rts
.8f89					_RGI_Solid:
.8f89	a9 02		lda #$02			lda 	#2
.8f8b	8d 63 06	sta $0663			sta 	gxFillSolid
.8f8e	80 ab		bra $8f3b			bra 	_RGICommandLoop
.8f90					_RGI_Frame:
.8f90	9c 63 06	stz $0663			stz 	gxFillSolid
.8f93	80 a6		bra $8f3b			bra 	_RGICommandLoop
.8f95					_RGI_To:
.8f95	20 2e 90	jsr $902e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f98	20 55 90	jsr $9055			jsr 	GCCopyPairToStore
.8f9b					_RGI_Here:
.8f9b	5a		phy				phy
.8f9c	20 4b 90	jsr $904b			jsr 	GCLoadAXY 					; load it into AXY
.8f9f	20 05 90	jsr $9005			jsr 	_RGICallHandler 			; go do whatever it is.
.8fa2	7a		ply				ply
.8fa3	80 96		bra $8f3b			bra 	_RGICommandLoop 			; and go round
.8fa5					_RGI_By:
.8fa5	20 3b 90	jsr $903b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8fa8	18		clc				clc
.8fa9	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fac	6d 64 06	adc $0664			adc 	gxxPos
.8faf	8d 64 06	sta $0664			sta 	gxXPos
.8fb2	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fb5	6d 65 06	adc $0665			adc 	gxxPos+1
.8fb8	8d 65 06	sta $0665			sta 	gxXPos+1
.8fbb	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fbe	18		clc				clc
.8fbf	6d 66 06	adc $0666			adc 	gxYPos
.8fc2	8d 66 06	sta $0666			sta 	gxYPos
.8fc5	80 d4		bra $8f9b			bra 	_RGI_Here
.8fc7					_RGI_Dim:
.8fc7	a2 01		ldx #$01			ldx	 	#1
.8fc9	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger
.8fcc	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fcf	c9 00		cmp #$00			cmp 	#0
.8fd1	f0 2f		beq $9002			beq 	_RGIRange
.8fd3	c9 09		cmp #$09			cmp 	#8+1
.8fd5	b0 2b		bcs $9002			bcs		_RGIRange
.8fd7	3a		dec a				dec 	a
.8fd8	8d 69 06	sta $0669			sta 	gxDrawScale
.8fdb	4c 3b 8f	jmp $8f3b			jmp 	_RGICommandLoop
.8fde					_RGI_Colour:
.8fde	a2 01		ldx #$01			ldx 	#1 							; colour
.8fe0	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger
.8fe3	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fe5	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.8fe8	b1 30		lda ($30),y			lda 	(codePtr),y
.8fea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fec	d0 04		bne $8ff2			bne 	_RGICDefaultMode
.8fee	c8		iny				iny
.8fef	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger
.8ff2					_RGICDefaultMode:
.8ff2	5a		phy				phy
.8ff3	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8ff5	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8ff8	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8ffb	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ffe	7a		ply				ply
.8fff	4c 3b 8f	jmp $8f3b			jmp 	_RGICommandLoop 			; and go round
.9002					_RGIRange:
.9002	4c fd b3	jmp $b3fd			jmp 	RangeError
.9005					_RGICallHandler:
.9005	6c 67 06	jmp ($0667)			jmp 	(GXHandler)
.9008					_RGI_SpriteInstructions:
.9008	c9 be		cmp #$be			cmp 	#KWD_OFF
.900a	f0 07		beq $9013			beq 	_RGISpriteOff
.900c	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.900e	f0 13		beq $9023			beq 	_RGISetImage
.9010	4c 74 8f	jmp $8f74			jmp 	_RGI_Move
.9013					_RGISpriteOff:
.9013	5a		phy				phy
.9014	a0 01		ldy #$01			ldy 	#1
.9016	a2 00		ldx #$00			ldx 	#0
.9018					_RGIDoCommandLoop:
.9018	a9 10		lda #$10			lda 	#8*2
.901a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.901d	7a		ply				ply
.901e	b0 e2		bcs $9002			bcs 	_RGIRange
.9020	4c 3b 8f	jmp $8f3b			jmp 	_RGICommandLoop
.9023					_RGISetImage:
.9023	a2 01		ldx #$01			ldx 	#1
.9025	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger
.9028	5a		phy				phy
.9029	aa		tax				tax
.902a	a0 00		ldy #$00			ldy 	#0
.902c	80 ea		bra $9018			bra 	_RGIDoCommandLoop
.902e					GCGetCoordinatePair:
.902e	a2 01		ldx #$01			ldx 	#1
.9030	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.9033	20 12 ae	jsr $ae12			jsr 	CheckComma
.9036	e8		inx				inx
.9037	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.903a	60		rts				rts
.903b					GCSignedCoordinatePair:
.903b	a2 01		ldx #$01			ldx 	#1
.903d	20 54 a5	jsr $a554			jsr 	Evaluate16BitIntegerSigned
.9040	20 12 ae	jsr $ae12			jsr 	CheckComma
.9043	e8		inx				inx
.9044	20 54 a5	jsr $a554			jsr 	Evaluate16BitIntegerSigned
.9047	60		rts				rts
.9048					_GCCPRange:
.9048	4c fd b3	jmp $b3fd			jmp 	RangeError
.904b					GCLoadAXY:
.904b	ad 65 06	lda $0665			lda 	gxXPos+1
.904e	ae 64 06	ldx $0664			ldx 	gxXPos
.9051	ac 66 06	ldy $0666			ldy 	gxYPos
.9054	60		rts				rts
.9055					GCCopyPairToStore:
.9055	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9058	8d 64 06	sta $0664			sta 	gxXPos
.905b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.905e	8d 65 06	sta $0665			sta 	gxXPos+1
.9061	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9064	8d 66 06	sta $0666			sta 	gxYPos
.9067	60		rts				rts
.0662					gxCommandID:
>0662							.fill 	1
.0663					gxFillSolid:
>0663							.fill 	1
.0664					gxXPos:
>0664							.fill 	2
.0666					gxYPos:
>0666							.fill 	1
.0667					gxHandler:
>0667							.fill 	2
.0669					gxDrawScale:
>0669							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9068					BitmapCtrl:
.9068	b1 30		lda ($30),y			lda 	(codePtr),y
.906a	c8		iny				iny
.906b	a2 01		ldx #$01			ldx 	#1
.906d	c9 bf		cmp #$bf			cmp 	#KWD_ON
.906f	f0 11		beq $9082			beq 	BitmapSwitch
.9071	ca		dex				dex
.9072	c9 be		cmp #$be			cmp 	#KWD_OFF
.9074	f0 0c		beq $9082			beq 	BitmapSwitch
.9076	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get the colour
.9079	5a		phy				phy
.907a	aa		tax				tax
.907b	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.907d	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9080	7a		ply				ply
.9081	60		rts				rts
.9082					BitmapSwitch:
.9082	5a		phy				phy
.9083	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9085	a9 02		lda #$02			lda 	#1*2
.9087	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.908a	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.908c	a0 00		ldy #$00			ldy 	#0
.908e	a2 ff		ldx #$ff			ldx 	#$FF
.9090	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9093	9c 63 06	stz $0663			stz 	gxFillSolid
.9096	9c 64 06	stz $0664			stz 	gxXPos
.9099	9c 65 06	stz $0665			stz 	gxXPos+1
.909c	9c 66 06	stz $0666			stz 	gxYPos
.909f	9c 69 06	stz $0669			stz 	gxDrawScale
.90a2	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90a4	a2 00		ldx #$00			ldx 	#0
.90a6	a0 00		ldy #$00			ldy 	#0
.90a8	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90ab	7a		ply				ply
.90ac	60		rts				rts
.90ad					SpritesCtrl:
.90ad	b1 30		lda ($30),y			lda 	(codePtr),y
.90af	c8		iny				iny
.90b0	a2 01		ldx #$01			ldx 	#1
.90b2	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90b4	f0 08		beq $90be			beq 	SpriteSwitch
.90b6	ca		dex				dex
.90b7	c9 be		cmp #$be			cmp 	#KWD_OFF
.90b9	f0 03		beq $90be			beq 	SpriteSwitch
.90bb	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.90be					SpriteSwitch:
.90be	5a		phy				phy
.90bf	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90c1	a9 04		lda #$04			lda 	#2*2
.90c3	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90c6	7a		ply				ply
.90c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90c8					GfxCommand:
.90c8	a2 00		ldx #$00			ldx 	#0
.90ca	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; command
.90cd	20 12 ae	jsr $ae12			jsr 	CheckComma
.90d0	e8		inx				inx
.90d1	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger 		; X
.90d4	20 12 ae	jsr $ae12			jsr 	CheckComma
.90d7	e8		inx				inx
.90d8	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; Y
.90db	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90de	4a		lsr a				lsr 	a
.90df	d0 16		bne $90f7			bne 	_GfxError
.90e1	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90e4	b0 11		bcs $90f7			bcs 	_GfxError 					; bit 7 should have been zero
.90e6	5a		phy				phy 								; save pos
.90e7	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90ea	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90ed	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90f0	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90f3	b0 02		bcs $90f7			bcs 	_GfxError
.90f5	7a		ply				ply 								; restore pos and exit.
.90f6	60		rts				rts
.90f7					_GfxError:
.90f7	4c fd b3	jmp $b3fd			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90fa					Command_GOSUB:
.90fa	a2 00		ldx #$00			ldx 	#0
.90fc	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90ff	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9101	20 84 a6	jsr $a684			jsr 	StackOpen 					; create frame
.9104	20 c8 a6	jsr $a6c8			jsr 	STKSaveCodePosition 		; save current position
.9107	4c 1d 91	jmp $911d			jmp 	GotoStackX
.910a					Command_RETURN:
.910a	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.910c	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.910e	20 b0 a6	jsr $a6b0			jsr 	StackCheckFrame
.9111	20 d9 a6	jsr $a6d9			jsr 	STKLoadCodePosition 		; restore code position
.9114	20 a2 a6	jsr $a6a2			jsr 	StackClose
.9117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9118					GotoCommand:
.9118	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.911a	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.911d					GotoStackX:
.911d	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9120	48		pha				pha 								; it is slightly inefficient, just in cases.
.9121	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9124	fa		plx				plx
.9125	20 2f a6	jsr $a62f			jsr 	MemorySearch 				; transfer to line number AX.
.9128	90 05		bcc $912f			bcc 	_GotoError 					; not found, off end.
.912a	d0 03		bne $912f			bne 	_GotoError 					; not found exactly
.912c	4c 96 94	jmp $9496			jmp 	RunNewLine 					; and go straight to new line code.
.912f					_GotoError:
.912f	a9 0d		lda #$0d		lda	#13
.9131	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9134					IfCommand:
.9134	a2 00		ldx #$00			ldx 	#0 							; If what.
.9136	20 10 a5	jsr $a510			jsr 	EvaluateNumber
.9139	b1 30		lda ($30),y			lda 	(codePtr),y
.913b	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.913d	d0 0a		bne $9149			bne 	_IFStructured
.913f	c8		iny				iny 								; consume THEN
.9140	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; is it zero
.9143	f0 01		beq $9146			beq 	_IfFail 					; if fail, go to next line
.9145	60		rts				rts 								; if THEN just continue
.9146					_IfFail:
.9146	4c fb 94	jmp $94fb			jmp 	EOLCommand
.9149					_IfStructured:
.9149	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; is it zero
.914c	d0 07		bne $9155			bne 	_IfExit 					; if not, then continue normally.
.914e	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.9150	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9152	20 f0 98	jsr $98f0			jsr 	ScanForward 				; and run from there/
.9155					_IfExit:
.9155	60		rts				rts
.9156					ElseCode:
.9156	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9158	aa		tax				tax 								; so just go to the structure exit
.9159	20 f0 98	jsr $98f0			jsr 	ScanForward
.915c	60		rts				rts
.915d					EndIf:
.915d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.915e					UnaryJoyX:
.915e	18		clc				clc
.915f	80 01		bra $9162			bra 	JoyMain
.9161					UnaryJoyY:
.9161	38		sec				sec
.9162					JoyMain:
.9162	fa		plx				plx 								; get pos
.9163	08		php				php 								; save carry (set for Y)
.9164	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9167	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.916a	20 f4 b5	jsr $b5f4			jsr 	EXTReadController 			; read the controller.
.916d	28		plp				plp
.916e	90 02		bcc $9172			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9170	4a		lsr a				lsr 	a
.9171	4a		lsr a				lsr 	a
.9172					_JMNoShift:
.9172	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9173	b0 0a		bcs $917f			bcs 	_JMIsRight
.9175	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9176	b0 04		bcs $917c			bcs 	_JMIsLeft
.9178	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; zero result
.917b	60		rts				rts
.917c					_JMIsLeft:
.917c	4c 02 9a	jmp $9a02			jmp 	ReturnTrue
.917f					_JMIsRight:
.917f	a9 01		lda #$01			lda 	#1
.9181	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.9184	60		rts				rts
.9185					UnaryJoyB:
.9185	fa		plx				plx 								; get pos
.9186	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9189	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.918c	20 f4 b5	jsr $b5f4			jsr 	EXTReadController 			; read the controller.
.918f	4a		lsr a				lsr 	a
.9190	4a		lsr a				lsr 	a
.9191	4a		lsr a				lsr 	a
.9192	4a		lsr a				lsr 	a
.9193	29 01		and #$01			and 	#1
.9195	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.9198	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9199					LetCommand:
.9199	a2 00		ldx #$00			ldx 	#0
.919b	b1 30		lda ($30),y			lda 	(codePtr),y
.919d	c9 10		cmp #$10			cmp 	#KWD_AT
.919f	d0 16		bne $91b7			bne 	_LCStandard
.91a1	c8		iny				iny 								; skip equal
.91a2	20 77 a0	jsr $a077			jsr 	EvaluateTerm 				; get a number
.91a5	20 bb 9e	jsr $9ebb			jsr 	Dereference 				; dereference it
.91a8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.91ab	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.91ad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91b0	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91b2	d0 10		bne $91c4			bne 	_LCMain
.91b4	4c 02 b4	jmp $b402			jmp 	TypeError 					; was a reference before.
.91b7					_LCStandard:
.91b7	ad 8e 9d	lda $9d8e			lda 	PrecedenceLevel+"*"			; precedence > this
.91ba	20 a8 9d	jsr $9da8			jsr 	EvaluateExpressionAtPrecedence
.91bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91c0	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91c2	f0 0e		beq $91d2			beq 	_LetGoProc 					; it's a procedure call.
.91c4					_LCMain:
.91c4	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91c6	20 1a ae	jsr $ae1a			jsr 	CheckNextA
.91c9	e8		inx				inx 								; RHS
.91ca	20 07 a5	jsr $a507			jsr 	EvaluateValue
.91cd	ca		dex				dex
.91ce	20 d5 91	jsr $91d5			jsr 	AssignVariable
.91d1	60		rts				rts
.91d2					_LetGoProc:
.91d2	4c 71 93	jmp $9371			jmp 	CallProcedure
.91d5					AssignVariable:
.91d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91d8	48		pha				pha 								; save a copy
.91d9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91dc	29 10		and #$10			and 	#NSBIsString
.91de	d0 0b		bne $91eb			bne 	_ASError
.91e0	68		pla				pla 								; get back
.91e1	29 10		and #$10			and 	#NSBIsString 				; check type
.91e3	d0 03		bne $91e8			bne 	_ASString
.91e5	4c e3 9d	jmp $9de3			jmp 	AssignNumber
.91e8					_ASString:
.91e8	4c 51 9e	jmp $9e51			jmp 	AssignString
.91eb					_ASError:
.91eb	4c 02 b4	jmp $b402			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91ee					Command_List:
.91ee	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.91f1	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91f4	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91f7	a9 ff		lda #$ff			lda 	#$FF
.91f9	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91fc	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9201	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9203	f0 1e		beq $9223			beq 	_CLSecond
.9205	20 81 92	jsr $9281			jsr 	CLIsDigit 					; if not digit, list all
.9208	b0 24		bcs $922e			bcs 	_CLStart
.920a	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.920c	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.920f	b1 30		lda ($30),y			lda 	(codePtr),y
.9211	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9213	f0 0e		beq $9223			beq 	_CLSecond 					; if so go get it
.9215	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9218	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.921b	ad 14 04	lda $0414			lda 	NSMantissa1+4
.921e	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9221	80 0b		bra $922e			bra 	_CLStart
.9223					_CLSecond:
.9223	c8		iny				iny 								; consume comma
.9224	20 81 92	jsr $9281			jsr 	CLIsDigit 					; digit found
.9227	b0 05		bcs $922e			bcs 	_CLStart 					; if not, continue listing
.9229	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.922b	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger
.922e					_CLStart
.922e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9230	85 30		sta $30				sta 	codePtr
.9232	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9234	85 31		sta $31				sta 	codePtr+1
.9236					_CLLoop:
.9236	20 f1 b5	jsr $b5f1			jsr 	EXTBreakCheck 				; break check
.9239	f0 30		beq $926b			beq 	_CLExit
.923b	b2 30		lda ($30)			lda 	(codePtr)
.923d	f0 2c		beq $926b			beq 	_CLExit
.923f	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9241	20 6e 92	jsr $926e			jsr 	CLCompareLineNo
.9244	90 18		bcc $925e			bcc 	_CLNext
.9246	a2 07		ldx #$07			ldx 	#7
.9248	20 6e 92	jsr $926e			jsr 	CLCompareLineNo
.924b	f0 02		beq $924f			beq 	_CLDoThisOne
.924d	b0 0f		bcs $925e			bcs 	_CLNext
.924f					_CLDoThisOne:
.924f	20 f5 96	jsr $96f5			jsr 	ListConvertLine 			; convert line into token Buffer
.9252	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9254	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9256	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.9259	a9 0d		lda #$0d			lda 	#13 						; new line
.925b	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.925e					_CLNext:
.925e	18		clc				clc
.925f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9261	65 30		adc $30				adc 	codePtr
.9263	85 30		sta $30				sta 	codePtr
.9265	90 02		bcc $9269			bcc 	_CREExit
.9267	e6 31		inc $31				inc 	codePtr+1
.9269					_CREExit:
.9269	80 cb		bra $9236			bra 	_CLLoop
.926b					_CLExit:
.926b	4c 5d 8b	jmp $8b5d			jmp 	WarmStart
.926e					CLCompareLineNo:
.926e	38		sec				sec
.926f	a0 01		ldy #$01			ldy 	#1
.9271	b1 30		lda ($30),y			lda 	(codePtr),y
.9273	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9276	85 36		sta $36				sta 	zTemp0
.9278	c8		iny				iny
.9279	b1 30		lda ($30),y			lda 	(codePtr),y
.927b	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.927e	05 36		ora $36				ora 	zTemp0
.9280	60		rts				rts
.9281					CLIsDigit:
.9281	b1 30		lda ($30),y			lda 	(codePtr),y
.9283	c9 30		cmp #$30			cmp 	#"0"
.9285	90 03		bcc $928a			bcc	 	_CLIDExitFalse
.9287	c9 3a		cmp #$3a			cmp 	#"9"+1
.9289	60		rts				rts
.928a					_CLIDExitFalse:
.928a	38		sec				sec
.928b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.928c					Command_LOCAL:
.928c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.928e	20 9a 92	jsr $929a			jsr 	LocaliseNextTerm 			; convert term to a local.
.9291	b1 30		lda ($30),y			lda 	(codePtr),y
.9293	c8		iny				iny
.9294	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9296	f0 f4		beq $928c			beq 	Command_LOCAL
.9298	88		dey				dey 								; unpick pre-get
.9299	60		rts				rts
.929a					LocaliseNextTerm:
.929a	20 77 a0	jsr $a077			jsr 	EvaluateTerm 				; evaluate the term
.929d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92a0	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.92a2	f0 69		beq $930d			beq		_LNTError
.92a4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.92a7	85 36		sta $36				sta 	zTemp0
.92a9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92ac	85 37		sta $37				sta  	zTemp0+1
.92ae	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92b1	29 10		and #$10			and 	#NSBIsString
.92b3	d0 22		bne $92d7			bne 	_LNTPushString
.92b5	5a		phy				phy
.92b6	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92b8					_LNTPushNumLoop:
.92b8	b1 36		lda ($36),y			lda		(zTemp0),y
.92ba	20 62 a6	jsr $a662			jsr 	StackPushByte
.92bd	a9 00		lda #$00			lda 	#0
.92bf	91 36		sta ($36),y			sta 	(zTemp0),y
.92c1	c8		iny				iny
.92c2	c0 05		cpy #$05			cpy 	#5
.92c4	d0 f2		bne $92b8			bne 	_LNTPushNumLoop
.92c6	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92c8	20 62 a6	jsr $a662			jsr 	StackPushByte
.92cb	a5 37		lda $37				lda 	zTemp0+1
.92cd	20 62 a6	jsr $a662			jsr 	StackPushByte
.92d0	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92d2	20 62 a6	jsr $a662			jsr 	StackPushByte
.92d5	7a		ply				ply
.92d6	60		rts				rts
.92d7					_LNTPushString:
.92d7	5a		phy				phy
.92d8	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92da	85 38		sta $38				sta 	zTemp1
.92dc	a0 01		ldy #$01			ldy 	#1
.92de	b1 36		lda ($36),y			lda 	(zTemp0),y
.92e0	85 39		sta $39				sta 	zTemp1+1
.92e2	a0 00		ldy #$00			ldy 	#0 							; output string
.92e4	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92e6	f0 0a		beq $92f2			beq 	_LNTStringOut
.92e8					_LNTPushStrLoop:
.92e8	b1 38		lda ($38),y			lda 	(zTemp1),y
.92ea	f0 06		beq $92f2			beq 	_LNTStringOut
.92ec	20 62 a6	jsr $a662			jsr 	StackPushByte
.92ef	c8		iny				iny
.92f0	80 f6		bra $92e8			bra 	_LNTPushStrLoop
.92f2					_LNTStringOut:
.92f2	98		tya				tya									; output length
.92f3	20 62 a6	jsr $a662			jsr 	StackPushByte
.92f6	a9 00		lda #$00			lda 	#0 							; clear original string.
.92f8	92 38		sta ($38)			sta 	(zTemp1)
.92fa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92fd	20 62 a6	jsr $a662			jsr 	StackPushByte
.9300	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9303	20 62 a6	jsr $a662			jsr 	StackPushByte
.9306	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9308	20 62 a6	jsr $a662			jsr 	StackPushByte
.930b	7a		ply				ply
.930c	60		rts				rts
.930d					_LNTError:
.930d	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.adb1					LocalPopValue:
.adb1	20 7b a6	jsr $a67b			jsr 	StackPopByte
.adb4	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.adb6	d0 17		bne $adcf			bne 	_LPVString
.adb8	20 7b a6	jsr $a67b			jsr 	StackPopByte 				; address
.adbb	85 37		sta $37				sta 	zTemp0+1
.adbd	20 7b a6	jsr $a67b			jsr 	StackPopByte
.adc0	85 36		sta $36				sta 	zTemp0
.adc2	5a		phy				phy
.adc3	a0 04		ldy #$04			ldy 	#4 							; copy back
.adc5					_LPVNumberCopy:
.adc5	20 7b a6	jsr $a67b			jsr 	StackPopByte
.adc8	91 36		sta ($36),y			sta 	(zTemp0),y
.adca	88		dey				dey
.adcb	10 f8		bpl $adc5			bpl 	_LPVNumberCopy
.adcd	7a		ply				ply 								; and complete
.adce	60		rts				rts
.adcf					_LPVString:
.adcf	20 7b a6	jsr $a67b			jsr 	StackPopByte 				; address of record => zTemp0
.add2	85 37		sta $37				sta 	zTemp0+1
.add4	20 7b a6	jsr $a67b			jsr 	StackPopByte
.add7	85 36		sta $36				sta 	zTemp0
.add9	5a		phy				phy
.adda	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.addc	85 38		sta $38				sta 	zTemp1
.adde	a0 01		ldy #$01			ldy 	#1
.ade0	b1 36		lda ($36),y			lda 	(zTemp0),y
.ade2	85 39		sta $39				sta 	zTemp1+1
.ade4	20 7b a6	jsr $a67b			jsr 	StackPopByte 				; # to get => y
.ade7	a8		tay				tay
.ade8	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.adea	f0 0e		beq $adfa			beq 	_LPVStringCopied
.adec	a9 00		lda #$00			lda 	#0 							; NULL on end
.adee	91 38		sta ($38),y			sta 	(zTemp1),y
.adf0					_LPVStringCopy:
.adf0	88		dey				dey
.adf1	30 07		bmi $adfa			bmi 	_LPVStringCopied
.adf3	20 7b a6	jsr $a67b			jsr 	StackPopByte
.adf6	91 38		sta ($38),y			sta 	(zTemp1),y
.adf8	80 f6		bra $adf0			bra 	_LPVStringCopy
.adfa					_LPVStringCopied:
.adfa	fa		plx				plx
.adfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9310					NewCommand:
.9310	20 0d a6	jsr $a60d			jsr 	MemoryNew
.9313	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9316	20 f6 8b	jsr $8bf6			jsr 	ClearCommand 				; clear everything.
.9319	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.931a					Command_Print:
.931a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.931b					_CPLoop:
.931b	08		php				php 								; save last action flag
.931c	b1 30		lda ($30),y			lda 	(codePtr),y
.931e	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9320	f0 46		beq $9368			beq 	_CPExit
.9322	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9324	f0 42		beq $9368			beq 	_CPExit
.9326	68		pla				pla 								; throw last action flag
.9327	b1 30		lda ($30),y			lda 	(codePtr),y
.9329	c8		iny				iny
.932a	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.932c	f0 37		beq $9365			beq 	_CPContinueWithSameLine
.932e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9330	f0 2e		beq $9360			beq 	_CPTab
.9332	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9334	f0 26		beq $935c			beq 	_CPNewLine
.9336	88		dey				dey 								; undo the get.
.9337	a2 00		ldx #$00			ldx 	#0
.9339	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; get a value into slot 0
.933c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.933f	29 10		and #$10			and 	#NSBIsString
.9341	f0 0b		beq $934e			beq 	_CPNumber
.9343	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9346	ad 08 04	lda $0408			lda 	NSMantissa0
.9349	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.934c	80 cc		bra $931a			bra 	Command_Print 				; loop round clearing carry so NL if end
.934e					_CPNumber:
.934e	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9350	20 dd a3	jsr $a3dd			jsr 	ConvertNumberToString 		; convert to string
.9353	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9355	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9357	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.935a	80 be		bra $931a			bra 	Command_Print 				; loop round clearing carry so NL if end
.935c					_CPNewLine:
.935c	a9 0d		lda #$0d			lda 	#13
.935e	80 02		bra $9362			bra 	_CPPrintChar
.9360					_CPTab:
.9360	a9 09		lda #$09			lda 	#9 							; print TAB
.9362					_CPPrintChar:
.9362	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.9365					_CPContinueWithSameLine:
.9365	38		sec				sec 								; loop round with carry set, which
.9366	80 b3		bra $931b			bra 	_CPLoop 					; will inhibit final CR
.9368					_CPExit:
.9368	28		plp				plp 								; get last action flag
.9369	b0 05		bcs $9370			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.936b	a9 0d		lda #$0d			lda 	#13 						; print new line
.936d	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.9370					_CPExit2:
.9370	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9371					CallProcedure:
.9371	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9373	b1 30		lda ($30),y			lda 	(codePtr),y
.9375	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9377	f0 0c		beq $9385			beq 	_CPEndParam
.9379					_CPParamLoop:
.9379	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; get parameter onto stack
.937c	e8		inx				inx 								; bump next stack
.937d	b1 30		lda ($30),y			lda 	(codePtr),y
.937f	c8		iny				iny
.9380	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9382	f0 f5		beq $9379			beq 	_CPParamLoop
.9384	88		dey				dey 								; unpick.
.9385					_CPEndParam:
.9385	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9388	c8		iny				iny									; skip right bracket
.9389	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.938b	20 84 a6	jsr $a684			jsr 	StackOpen
.938e	20 c8 a6	jsr $a6c8			jsr 	STKSaveCodePosition 		; save loop position
.9391	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9394	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9396	ad 10 04	lda $0410			lda 	NSMantissa1
.9399	85 37		sta $37				sta 	zTemp0+1
.939b	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.939d	b2 36		lda ($36)			lda 	(zTemp0)
.939f	85 30		sta $30				sta 	safePtr
.93a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a3	85 31		sta $31				sta 	safePtr+1
.93a5	c8		iny				iny
.93a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a8	85 32		sta $32				sta 	safePtr+2
.93aa	c8		iny				iny
.93ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ad	85 33		sta $33				sta 	safePtr+3
.93af	c8		iny				iny 								; get Y offset -> Y
.93b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93b2	a8		tay				tay
.93b3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93b5	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93b8	f0 13		beq $93cd			beq 	_ParamExit 					; if so, exit.
.93ba					_ParamExtract:
.93ba	ca		dex				dex 								; put a local term on the level before
.93bb	20 9a 92	jsr $929a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93be	20 d5 91	jsr $91d5			jsr 	AssignVariable 				; assign stacked value to the variable.
.93c1	e8		inx				inx 								; advance to next parameter to do.
.93c2	e8		inx				inx
.93c3	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93c6	f0 05		beq $93cd			beq 	_ParamExit
.93c8	20 12 ae	jsr $ae12			jsr 	CheckComma 					; comma seperating parameters
.93cb	80 ed		bra $93ba			bra 	_ParamExtract
.93cd					_ParamExit:
.93cd	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; check )
.93d0	60		rts				rts 								; and continue from here
.adfc					Command_ENDPROC:
.adfc	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.adfe	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ae00	20 b0 a6	jsr $a6b0			jsr 	StackCheckFrame
.ae03	20 d9 a6	jsr $a6d9			jsr 	STKLoadCodePosition 		; restore code position
.ae06	20 a2 a6	jsr $a6a2			jsr 	StackClose
.ae09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93d1					Command_Read:
.93d1	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93d3	20 77 a0	jsr $a077			jsr 	EvaluateTerm
.93d6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93d9	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93db	f0 4a		beq $9427			beq 	_CRSyntax 					; check reference (bit 0)
.93dd	20 70 94	jsr $9470			jsr 	SwapDataCodePtrs 			; swap code and data
.93e0	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93e3	d0 20		bne $9405			bne 	_CRContinueData
.93e5					_CRKeepSearching:
.93e5	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.93e7	aa		tax				tax
.93e8	20 f0 98	jsr $98f0			jsr 	ScanForward
.93eb	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.93ed	f0 16		beq $9405			beq 	_CRHaveData 				; found it
.93ef	18		clc				clc
.93f0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93f2	65 30		adc $30				adc 	codePtr
.93f4	85 30		sta $30				sta 	codePtr
.93f6	90 02		bcc $93fa			bcc 	_CREExit
.93f8	e6 31		inc $31				inc 	codePtr+1
.93fa					_CREExit:
.93fa	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93fc	b2 30		lda ($30)			lda 	(codePtr)
.93fe	d0 e5		bne $93e5			bne 	_CRKeepSearching
.9400	a9 0b		lda #$0b		lda	#11
.9402	4c 95 99	jmp $9995		jmp	ErrorHandler
.9405					_CRHaveData:
.9405					_CRContinueData:
.9405	a2 01		ldx #$01			ldx 	#1
.9407	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; evaluate value into slot # 1
.940a	ca		dex				dex
.940b	20 d5 91	jsr $91d5			jsr		AssignVariable 				; do the assignment
.940e	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9411	b1 30		lda ($30),y			lda 	(codePtr),y
.9413	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9415	d0 04		bne $941b			bne 	_CRSwapBack
.9417	c8		iny				iny 								; consume comma
.9418	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.941b					_CRSwapBack:
.941b	20 70 94	jsr $9470			jsr 	SwapDataCodePtrs			; swap them back.
.941e	b1 30		lda ($30),y			lda 	(codePtr),y
.9420	c8		iny				iny
.9421	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9423	f0 ac		beq $93d1			beq 	Command_Read 				; if so go round again.
.9425	88		dey				dey 								; unpick get.
.9426	60		rts				rts
.9427					_CRSyntax:
.9427	4c f8 b3	jmp $b3f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.942a					RemCommand:
.942a	b1 30		lda ($30),y			lda 	(codePtr),y
.942c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.942e	d0 06		bne $9436			bne 	_RMExit
.9430	c8		iny				iny
.9431	98		tya				tya
.9432	38		sec				sec
.9433	71 30		adc ($30),y			adc 	(codePtr),y
.9435	a8		tay				tay
.9436					_RMExit:
.9436	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9437					Command_REPEAT:
.9437	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9439	20 84 a6	jsr $a684			jsr 	StackOpen
.943c	20 c8 a6	jsr $a6c8			jsr 	STKSaveCodePosition 		; save loop position
.943f	60		rts				rts
.9440					Command_UNTIL:
.9440	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9442	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9444	20 b0 a6	jsr $a6b0			jsr 	StackCheckFrame
.9447	a2 00		ldx #$00			ldx 	#0
.9449	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; work out the number
.944c	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; check if zero
.944f	f0 04		beq $9455			beq 	_CULoopBack 				; if so keep looping
.9451	20 a2 a6	jsr $a6a2			jsr 	StackClose		 			; return
.9454	60		rts				rts
.9455					_CULoopBack:
.9455	20 d9 a6	jsr $a6d9			jsr 	STKLoadCodePosition 		; loop back
.9458	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9459					Command_Restore:
.9459	20 70 94	jsr $9470			jsr 	SwapDataCodePtrs 			; swap code and data
.945c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.945e	85 30		sta $30				sta 	codePtr
.9460	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9462	85 31		sta $31				sta 	codePtr+1
.9464	20 70 94	jsr $9470			jsr 	SwapDataCodePtrs 			; put them back
.9467	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9469	8d 9b 04	sta $049b			sta 	dataPointer+4
.946c	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.946f	60		rts				rts
.9470					SwapDataCodePtrs:
.9470	da		phx				phx
.9471	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9473					_SDCPLoop:
.9473	b5 30		lda $30,x			lda 	safePtr,x
.9475	48		pha				pha
.9476	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9479	95 30		sta $30,x			sta 	safePtr,x
.947b	68		pla				pla
.947c	9d 97 04	sta $0497,x			sta 	dataPointer,x
.947f	ca		dex				dex
.9480	10 f1		bpl $9473			bpl 	_SDCPLoop
.9482	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9485	8c 9b 04	sty $049b			sty 	dataPointer+4
.9488	a8		tay				tay
.9489	fa		plx				plx
.948a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.948b					CommandRUN:
.948b	20 f6 8b	jsr $8bf6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.948e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9490	85 30		sta $30				sta 	codePtr
.9492	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9494	85 31		sta $31				sta 	codePtr+1
.9496					RUNNewLine:
.9496	b2 30		lda ($30)			lda 	(codePtr)
.9498	f0 5e		beq $94f8			beq 	CRNoProgram         		; no then END.
.949a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.949c	9a		txs				txs
.949d					RUNCodePointerLine:
.949d	a0 02		ldy #$02			ldy 	#2 							; start of program
.949f					_CRIncMainLoop:
.949f	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.94a2	d0 05		bne $94a9			bne 	_CRNoBreakCheck
.94a4	20 f1 b5	jsr $b5f1			jsr 	EXTBreakCheck 				; break check
.94a7	f0 4a		beq $94f3			beq 	_CRBreak
.94a9					_CRNoBreakCheck:
.94a9	c8		iny				iny
.94aa					_CRMainLoop:
.94aa	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.94ad	b1 30		lda ($30),y			lda 	(codePtr),y
.94af	10 10		bpl $94c1			bpl 	_CRNotKeyword
.94b1	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.94b3	b0 04		bcs $94b9			bcs 	_CRIsKeyword
.94b5	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94b7	b0 34		bcs $94ed			bcs		_CRSyntaxError
.94b9					_CRIsKeyword:
.94b9	c8		iny				iny 								; consume command
.94ba	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94bb	aa		tax				tax 								; put in X for vector jump
.94bc	20 f0 94	jsr $94f0			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94bf	80 e9		bra $94aa			bra 	_CRMainLoop 				; and loop round
.94c1					_CRNotKeyword:
.94c1	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94c3	f0 da		beq $949f			beq 	_CRIncMainLoop
.94c5	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94c7	90 05		bcc $94ce			bcc 	_CRNotVariable
.94c9					_CRGoLet:
.94c9	20 99 91	jsr $9199			jsr 	LetCommand
.94cc	80 dc		bra $94aa			bra 	_CRMainLoop
.94ce					_CRNotVariable:
.94ce	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94d0	f0 f7		beq $94c9			beq 	_CRGoLet
.94d2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94d4	f0 f3		beq $94c9			beq 	_CRGoLet
.94d6	c9 21		cmp #$21			cmp 	#KWD_PLING
.94d8	f0 ef		beq $94c9			beq 	_CRGoLet
.94da	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94dc	f0 09		beq $94e7			beq 	_CRGoRem
.94de	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94e0	d0 0b		bne $94ed			bne 	_CRSyntaxError
.94e2	20 96 8a	jsr $8a96			jsr 	LabelHere
.94e5	80 c3		bra $94aa			bra 	_CRMainLoop
.94e7					_CRGoRem:
.94e7	c8		iny				iny
.94e8	20 2a 94	jsr $942a			jsr 	RemCommand
.94eb	80 bd		bra $94aa			bra 	_CRMainLoop
.94ed					_CRSyntaxError:
.94ed	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.94f0					_CRCallVector0:
.94f0	7c 9c 95	jmp ($959c,x)			jmp 	(VectorSet0,x)
.94f3					_CRBreak:
.94f3	a9 01		lda #$01		lda	#1
.94f5	4c 95 99	jmp $9995		jmp	ErrorHandler
.94f8					CRNoProgram:
.94f8	4c 19 8d	jmp $8d19			jmp 	EndCommand
.94fb					EOLCommand:
.94fb	18		clc				clc
.94fc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94fe	65 30		adc $30				adc 	codePtr
.9500	85 30		sta $30				sta 	codePtr
.9502	90 02		bcc $9506			bcc 	_CREExit
.9504	e6 31		inc $31				inc 	codePtr+1
.9506					_CREExit:
.9506	80 8e		bra $9496			bra 	RunNewLine
.9508					Shift1Command:
.9508	b1 30		lda ($30),y			lda 	(codePtr),y
.950a	c8		iny				iny
.950b	0a		asl a				asl 	a
.950c	aa		tax				tax
.950d	7c 32 96	jmp ($9632,x)			jmp 	(VectorSet1,x)
.9510					Shift2Command:
.9510	b1 30		lda ($30),y			lda 	(codePtr),y
.9512	c8		iny				iny
.9513	0a		asl a				asl 	a
.9514	aa		tax				tax
.9515	7c 4c 96	jmp ($964c,x)			jmp 	(VectorSet2,x)
.9518					Unused1:
.9518					Unused2:
.9518					Unused3:
.9518					Unused4:
.9518	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
>951b							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.951c					VectorSetPunc:
>951c	3f 9b					.word	ShiftLeft                        ; $00 <<
>951e	39 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9520	2f 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9522	f8 b3					.word	SyntaxError                      ; $03 !!3
>9524	f8 b3					.word	SyntaxError                      ; $04 ><
>9526	43 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>9528	42 9b					.word	ShiftRight                       ; $06 >>
>952a	f8 b3					.word	SyntaxError                      ; $07 !!7
>952c	f8 b3					.word	SyntaxError                      ; $08 !!8
>952e	f8 b3					.word	SyntaxError                      ; $09 !!9
>9530	f8 b3					.word	SyntaxError                      ; $0a !!10
>9532	f8 b3					.word	SyntaxError                      ; $0b !!11
>9534	f8 b3					.word	SyntaxError                      ; $0c !!12
>9536	f8 b3					.word	SyntaxError                      ; $0d !!13
>9538	f8 b3					.word	SyntaxError                      ; $0e !!14
>953a	f8 b3					.word	SyntaxError                      ; $0f !!15
>953c	f8 b3					.word	SyntaxError                      ; $10 @
>953e	f8 b3					.word	SyntaxError                      ; $11 !!17
>9540	f8 b3					.word	SyntaxError                      ; $12 !!18
>9542	f8 b3					.word	SyntaxError                      ; $13 [
>9544	23 ae					.word	IntegerDivide                    ; $14 \
>9546	f8 b3					.word	SyntaxError                      ; $15 ]
>9548	d0 9c					.word	EorInteger                       ; $16 ^
>954a	f8 b3					.word	SyntaxError                      ; $17 _
>954c	f8 b3					.word	SyntaxError                      ; $18 `
>954e	f8 b3					.word	SyntaxError                      ; $19 !!25
>9550	f8 b3					.word	SyntaxError                      ; $1a !!26
>9552	f8 b3					.word	SyntaxError                      ; $1b {
>9554	8a 9c					.word	OraInteger                       ; $1c |
>9556	f8 b3					.word	SyntaxError                      ; $1d }
>9558	f8 b3					.word	SyntaxError                      ; $1e ~
>955a	f8 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>955c	f8 b3					.word	SyntaxError                      ; $20
>955e	16 9d					.word	WordIndirect                     ; $21 !
>9560	f8 b3					.word	SyntaxError                      ; $22 "
>9562	f8 b3					.word	SyntaxError                      ; $23 #
>9564	f8 b3					.word	SyntaxError                      ; $24 $
>9566	70 ae					.word	IntegerModulus                   ; $25 %
>9568	44 9c					.word	AndInteger                       ; $26 &
>956a	f8 b3					.word	SyntaxError                      ; $27 '
>956c	f8 b3					.word	SyntaxError                      ; $28 (
>956e	f8 b3					.word	SyntaxError                      ; $29 )
>9570	e5 ae					.word	MulInteger                       ; $2a *
>9572	d6 9b					.word	AddInteger                       ; $2b +
>9574	f8 b3					.word	SyntaxError                      ; $2c ,
>9576	19 9c					.word	SubInteger                       ; $2d -
>9578	f8 b3					.word	SyntaxError                      ; $2e .
>957a	84 b0					.word	FDivideCommand                   ; $2f /
>957c	f8 b3					.word	SyntaxError                      ; $30 0
>957e	f8 b3					.word	SyntaxError                      ; $31 1
>9580	f8 b3					.word	SyntaxError                      ; $32 2
>9582	f8 b3					.word	SyntaxError                      ; $33 3
>9584	f8 b3					.word	SyntaxError                      ; $34 4
>9586	f8 b3					.word	SyntaxError                      ; $35 5
>9588	f8 b3					.word	SyntaxError                      ; $36 6
>958a	f8 b3					.word	SyntaxError                      ; $37 7
>958c	f8 b3					.word	SyntaxError                      ; $38 8
>958e	f8 b3					.word	SyntaxError                      ; $39 9
>9590	f8 b3					.word	SyntaxError                      ; $3a :
>9592	f8 b3					.word	SyntaxError                      ; $3b ;
>9594	1b 9a					.word	BinaryCompareLess                ; $3c <
>9596	11 9a					.word	BinaryCompareEqual               ; $3d =
>9598	25 9a					.word	BinaryCompareGreater             ; $3e >
>959a	3d 9d					.word	ByteIndirect                     ; $3f ?
.959c					VectorSet0:
>959c	fb 94					.word	EOLCommand                       ; $80 !0:EOF
>959e	08 95					.word	Shift1Command                    ; $81 !1:SH1
>95a0	10 95					.word	Shift2Command                    ; $82 !2:SH2
>95a2	ca b1					.word	AbsUnary                         ; $83 ABS(
>95a4	0d a2					.word	AllocUnary                       ; $84 ALLOC(
>95a6	da b1					.word	AscUnary                         ; $85 ASC(
>95a8	8e a3					.word	ChrUnary                         ; $86 CHR$(
>95aa	1c 8d					.word	UnaryEvent                       ; $87 EVENT(
>95ac	0d 9a					.word	UnaryFalse                       ; $88 FALSE
>95ae	e7 b1					.word	FracUnary                        ; $89 FRAC(
>95b0	f8 b3					.word	SyntaxError                      ; $8a HIT(
>95b2	fd b1					.word	IntUnary                         ; $8b INT(
>95b4	53 b2					.word	IsValUnary                       ; $8c ISVAL(
>95b6	85 91					.word	UnaryJoyB                        ; $8d JOYB(
>95b8	5e 91					.word	UnaryJoyX                        ; $8e JOYX(
>95ba	61 91					.word	UnaryJoyY                        ; $8f JOYY(
>95bc	68 a4					.word	Unary_Left                       ; $90 LEFT$(
>95be	0f b2					.word	LenUnary                         ; $91 LEN(
>95c0	81 a2					.word	Unary_Max                        ; $92 MAX(
>95c2	92 a4					.word	Unary_Mid                        ; $93 MID$(
>95c4	7d a2					.word	Unary_Min                        ; $94 MIN(
>95c6	d8 a2					.word	Unary_Not                        ; $95 NOT(
>95c8	ee a2					.word	Unary_Random                     ; $96 RANDOM(
>95ca	78 a4					.word	Unary_Right                      ; $97 RIGHT$(
>95cc	0d a3					.word	Unary_Rnd                        ; $98 RND(
>95ce	29 b2					.word	SgnUnary                         ; $99 SGN(
>95d0	a0 a3					.word	SpcUnary                         ; $9a SPC(
>95d2	bb a3					.word	Unary_Str                        ; $9b STR$(
>95d4	d9 96					.word	UnaryTimer                       ; $9c TIMER(
>95d6	01 9a					.word	UnaryTrue                        ; $9d TRUE
>95d8	49 b2					.word	ValUnary                         ; $9e VAL(
>95da	85 8d					.word	ForCommand                       ; $9f FOR
>95dc	34 91					.word	IfCommand                        ; $a0 IF
>95de	18 95					.word	Unused1                          ; $a1 PROC
>95e0	37 94					.word	Command_REPEAT                   ; $a2 REPEAT
>95e2	66 99					.word	Command_WHILE                    ; $a3 WHILE
>95e4	5d 91					.word	EndIf                            ; $a4 ENDIF
>95e6	fc ad					.word	Command_ENDPROC                  ; $a5 ENDPROC
>95e8	3f 8e					.word	NextCommand                      ; $a6 NEXT
>95ea	18 95					.word	Unused4                          ; $a7 THEN
>95ec	40 94					.word	Command_UNTIL                    ; $a8 UNTIL
>95ee	87 99					.word	Command_WEND                     ; $a9 WEND
>95f0	f8 b3					.word	SyntaxError                      ; $aa BY
>95f2	bc 8b					.word	CallCommand                      ; $ab CALL
>95f4	9c 8e					.word	CircleCommand                    ; $ac CIRCLE
>95f6	f6 8b					.word	ClearCommand                     ; $ad CLEAR
>95f8	4e 8c					.word	ClearScreen                      ; $ae CLS
>95fa	f8 b3					.word	SyntaxError                      ; $af COLOR
>95fc	f8 b3					.word	SyntaxError                      ; $b0 COLOUR
>95fe	54 8c					.word	Command_Data                     ; $b1 DATA
>9600	5c 8c					.word	DimCommand                       ; $b2 DIM
>9602	18 95					.word	Unused3                          ; $b3 DOWNTO
>9604	56 91					.word	ElseCode                         ; $b4 ELSE
>9606	f8 b3					.word	SyntaxError                      ; $b5 FROM
>9608	c8 90					.word	GfxCommand                       ; $b6 GFX
>960a	fa 90					.word	Command_GOSUB                    ; $b7 GOSUB
>960c	18 91					.word	GotoCommand                      ; $b8 GOTO
>960e	f8 b3					.word	SyntaxError                      ; $b9 HERE
>9610	c6 8e					.word	ImageCommand                     ; $ba IMAGE
>9612	99 91					.word	LetCommand                       ; $bb LET
>9614	1b 8f					.word	LineCommand                      ; $bc LINE
>9616	8c 92					.word	Command_LOCAL                    ; $bd LOCAL
>9618	f8 b3					.word	SyntaxError                      ; $be OFF
>961a	f8 b3					.word	SyntaxError                      ; $bf ON
>961c	f8 b3					.word	SyntaxError                      ; $c0 OUTLINE
>961e	14 8f					.word	PlotCommand                      ; $c1 PLOT
>9620	1a 93					.word	Command_Print                    ; $c2 PRINT
>9622	d1 93					.word	Command_Read                     ; $c3 READ
>9624	98 8e					.word	RectangleCommand                 ; $c4 RECT
>9626	2a 94					.word	RemCommand                       ; $c5 REM
>9628	0a 91					.word	Command_RETURN                   ; $c6 RETURN
>962a	f8 b3					.word	SyntaxError                      ; $c7 SOLID
>962c	a7 8e					.word	SpriteCommand                    ; $c8 SPRITE
>962e	e3 8e					.word	TextCommand                      ; $c9 TEXT
>9630	18 95					.word	Unused2                          ; $ca TO
.9632					VectorSet1:
>9632	f8 b3					.word	SyntaxError                      ; $80 !0:EOF
>9634	f8 b3					.word	SyntaxError                      ; $81 !1:SH1
>9636	f8 b3					.word	SyntaxError                      ; $82 !2:SH2
>9638	8d 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>963a	ac 8b					.word	AssertCommand                    ; $84 ASSERT
>963c	68 90					.word	BitmapCtrl                       ; $85 BITMAP
>963e	19 8d					.word	EndCommand                       ; $86 END
>9640	ee 91					.word	Command_List                     ; $87 LIST
>9642	10 93					.word	NewCommand                       ; $88 NEW
>9644	59 94					.word	Command_Restore                  ; $89 RESTORE
>9646	8b 94					.word	CommandRUN                       ; $8a RUN
>9648	ad 90					.word	SpritesCtrl                      ; $8b SPRITES
>964a	d4 96					.word	StopCommand                      ; $8c STOP
.964c					VectorSet2:
>964c	f8 b3					.word	SyntaxError                      ; $80 !0:EOF
>964e	f8 b3					.word	SyntaxError                      ; $81 !1:SH1
>9650	f8 b3					.word	SyntaxError                      ; $82 !2:SH2
>9652	b7 b2					.word	Assemble_adc                     ; $83 ADC
>9654	af b2					.word	Assemble_and                     ; $84 AND
>9656	cb b2					.word	Assemble_asl                     ; $85 ASL
>9658	35 b3					.word	Assemble_bcc                     ; $86 BCC
>965a	39 b3					.word	Assemble_bcs                     ; $87 BCS
>965c	41 b3					.word	Assemble_beq                     ; $88 BEQ
>965e	f8 b2					.word	Assemble_bit                     ; $89 BIT
>9660	29 b3					.word	Assemble_bmi                     ; $8a BMI
>9662	3d b3					.word	Assemble_bne                     ; $8b BNE
>9664	25 b3					.word	Assemble_bpl                     ; $8c BPL
>9666	45 b3					.word	Assemble_bra                     ; $8d BRA
>9668	49 b3					.word	Assemble_brk                     ; $8e BRK
>966a	2d b3					.word	Assemble_bvc                     ; $8f BVC
>966c	31 b3					.word	Assemble_bvs                     ; $90 BVS
>966e	51 b3					.word	Assemble_clc                     ; $91 CLC
>9670	a5 b3					.word	Assemble_cld                     ; $92 CLD
>9672	65 b3					.word	Assemble_cli                     ; $93 CLI
>9674	95 b3					.word	Assemble_clv                     ; $94 CLV
>9676	c3 b2					.word	Assemble_cmp                     ; $95 CMP
>9678	0c b3					.word	Assemble_cpx                     ; $96 CPX
>967a	07 b3					.word	Assemble_cpy                     ; $97 CPY
>967c	e9 b2					.word	Assemble_dec                     ; $98 DEC
>967e	a1 b3					.word	Assemble_dex                     ; $99 DEX
>9680	7d b3					.word	Assemble_dey                     ; $9a DEY
>9682	b3 b2					.word	Assemble_eor                     ; $9b EOR
>9684	ee b2					.word	Assemble_inc                     ; $9c INC
>9686	b1 b3					.word	Assemble_inx                     ; $9d INX
>9688	9d b3					.word	Assemble_iny                     ; $9e INY
>968a	20 b3					.word	Assemble_jmp                     ; $9f JMP
>968c	1b b3					.word	Assemble_jsr                     ; $a0 JSR
>968e	bf b2					.word	Assemble_lda                     ; $a1 LDA
>9690	e4 b2					.word	Assemble_ldx                     ; $a2 LDX
>9692	02 b3					.word	Assemble_ldy                     ; $a3 LDY
>9694	d5 b2					.word	Assemble_lsr                     ; $a4 LSR
>9696	b5 b3					.word	Assemble_nop                     ; $a5 NOP
>9698	ab b2					.word	Assemble_ora                     ; $a6 ORA
>969a	61 b3					.word	Assemble_pha                     ; $a7 PHA
>969c	4d b3					.word	Assemble_php                     ; $a8 PHP
>969e	a9 b3					.word	Assemble_phx                     ; $a9 PHX
>96a0	69 b3					.word	Assemble_phy                     ; $aa PHY
>96a2	71 b3					.word	Assemble_pla                     ; $ab PLA
>96a4	55 b3					.word	Assemble_plp                     ; $ac PLP
>96a6	bd b3					.word	Assemble_plx                     ; $ad PLX
>96a8	79 b3					.word	Assemble_ply                     ; $ae PLY
>96aa	d0 b2					.word	Assemble_rol                     ; $af ROL
>96ac	da b2					.word	Assemble_ror                     ; $b0 ROR
>96ae	5d b3					.word	Assemble_rti                     ; $b1 RTI
>96b0	6d b3					.word	Assemble_rts                     ; $b2 RTS
>96b2	c7 b2					.word	Assemble_sbc                     ; $b3 SBC
>96b4	59 b3					.word	Assemble_sec                     ; $b4 SEC
>96b6	b9 b3					.word	Assemble_sed                     ; $b5 SED
>96b8	75 b3					.word	Assemble_sei                     ; $b6 SEI
>96ba	bb b2					.word	Assemble_sta                     ; $b7 STA
>96bc	ad b3					.word	Assemble_stp                     ; $b8 STP
>96be	df b2					.word	Assemble_stx                     ; $b9 STX
>96c0	fd b2					.word	Assemble_sty                     ; $ba STY
>96c2	f3 b2					.word	Assemble_stz                     ; $bb STZ
>96c4	91 b3					.word	Assemble_tax                     ; $bc TAX
>96c6	8d b3					.word	Assemble_tay                     ; $bd TAY
>96c8	16 b3					.word	Assemble_trb                     ; $be TRB
>96ca	11 b3					.word	Assemble_tsb                     ; $bf TSB
>96cc	99 b3					.word	Assemble_tsx                     ; $c0 TSX
>96ce	81 b3					.word	Assemble_txa                     ; $c1 TXA
>96d0	89 b3					.word	Assemble_txs                     ; $c2 TXS
>96d2	85 b3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96d4					StopCommand:
.96d4	a9 08		lda #$08		lda	#8
.96d6	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96d9					UnaryTimer:
.96d9	fa		plx				plx
.96da	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.96dd					TimerToStackX:
.96dd	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; zero result
.96e0	64 01		stz $01				stz 	1 							; access I/O
.96e2	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96e8	ad 5a d6	lda $d65a			lda 	$D65A
.96eb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96ee	ad 5b d6	lda $d65b			lda 	$D65B
.96f1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96f5					ListConvertLine:
.96f5	9c 9d 04	stz $049d			stz 	tbOffset
.96f8	9c aa 04	stz $04aa			stz 	tokenBuffer
.96fb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96fd	b1 30		lda ($30),y			lda 	(codePtr),y
.96ff	aa		tax				tax
.9700	88		dey				dey
.9701	b1 30		lda ($30),y			lda 	(codePtr),y
.9703	20 66 af	jsr $af66			jsr 	ConvertInt16
.9706	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9708	86 37		stx $37				stx 	zTemp0+1
.970a	a0 00		ldy #$00			ldy 	#0
.970c					_LCCopyNumber:
.970c	b1 36		lda ($36),y			lda 	(zTemp0),y
.970e	20 3a 98	jsr $983a			jsr 	LCLWrite
.9711	c8		iny				iny
.9712	b1 36		lda ($36),y			lda 	(zTemp0),y
.9714	d0 f6		bne $970c			bne 	_LCCopyNumber
.9716	20 53 99	jsr $9953			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9719	48		pha				pha 								; save on stack
.971a	10 0c		bpl $9728			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.971c	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.971d	6d a6 04	adc $04a6			adc 	listIndent
.9720	8d a6 04	sta $04a6			sta 	listIndent
.9723	10 03		bpl $9728			bpl 	_LCNoAdjust
.9725	9c a6 04	stz $04a6			stz 	listIndent
.9728					_LCNoAdjust:
.9728	18		clc				clc		 							; work out actual indent.
.9729	ad a6 04	lda $04a6			lda 	listIndent
.972c	0a		asl a				asl 	a
.972d	69 06		adc #$06			adc 	#6
.972f	85 36		sta $36				sta 	zTemp0
.9731					_LCPadOut:
.9731	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9733	20 3a 98	jsr $983a			jsr 	LCLWrite
.9736	ad 9d 04	lda $049d			lda 	tbOffset
.9739	c5 36		cmp $36				cmp 	zTemp0
.973b	d0 f4		bne $9731			bne 	_LCPadOut
.973d	a0 03		ldy #$03			ldy 	#3 							; start position.
.973f					_LCMainLoop:
.973f	b1 30		lda ($30),y			lda 	(codePtr),y
.9741	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9743	f0 17		beq $975c			beq 	_LCExit
.9745	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9747	90 1e		bcc $9767			bcc 	_LCDoubles
.9749	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.974b	90 2a		bcc $9777			bcc 	_LCShiftPunc
.974d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.974f	90 35		bcc $9786			bcc 	_LCPunctuation
.9751	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9753	90 3e		bcc $9793			bcc 	_LCIdentifiers
.9755	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9757	90 5a		bcc $97b3			bcc 	_LCTokens
.9759	4c 0e 98	jmp $980e			jmp 	_LCData 					; 254-5 are data objects
.975c					_LCExit:
.975c	68		pla				pla 								; get old indent adjust
.975d	30 07		bmi $9766			bmi 	_LCExit2
.975f	18		clc				clc 								; add to indent if +ve
.9760	6d a6 04	adc $04a6			adc 	listIndent
.9763	8d a6 04	sta $04a6			sta 	listIndent
.9766					_LCExit2:
.9766	60		rts				rts
.9767					_LCDoubles:
.9767	48		pha				pha
.9768	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9769	29 02		and #$02			and 	#2
.976b	09 3c		ora #$3c			ora 	#60 						; make < >
.976d	20 3a 98	jsr $983a			jsr 	LCLWrite
.9770	68		pla				pla 								; restore, do lower bit
.9771	29 03		and #$03			and 	#3
.9773	09 3c		ora #$3c			ora 	#60
.9775	80 0f		bra $9786			bra		_LCPunctuation 				; print, increment, loop
.9777					_LCShiftPunc:
.9777	aa		tax				tax 								; save in X
.9778	29 07		and #$07			and 	#7 							; lower 3 bits
.977a	f0 02		beq $977e			beq 	_LCNoAdd
.977c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.977e					_LCNoAdd:
.977e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9780	90 02		bcc $9784			bcc 	_LCNoAdd2
.9782	09 20		ora #$20			ora 	#32 						; adds $20
.9784					_LCNoAdd2:
.9784	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9786					_LCPunctuation:
.9786	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.9788	d0 03		bne $978d			bne 	_LCPContinue
.978a	20 49 98	jsr $9849			jsr 	LCDeleteLastSpace
.978d					_LCPContinue:
.978d	c8		iny				iny 								; consume character
.978e	20 3a 98	jsr $983a			jsr 	LCLWrite 					; write it out.
.9791	80 ac		bra $973f			bra 	_LCMainLoop 				; go round again.
.9793					_LCIdentifiers:
.9793	18		clc				clc 								; convert to physical address
.9794	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9796	85 37		sta $37				sta 	zTemp0+1
.9798	c8		iny				iny
.9799	b1 30		lda ($30),y			lda 	(codePtr),y
.979b	85 36		sta $36				sta 	zTemp0
.979d	c8		iny				iny
.979e	5a		phy				phy 								; save position
.979f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.97a1					_LCOutIdentifier:
.97a1	c8		iny				iny
.97a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.97a4	29 7f		and #$7f			and 	#$7F
.97a6	20 88 98	jsr $9888			jsr 	LCLLowerCase
.97a9	20 3a 98	jsr $983a			jsr 	LCLWrite
.97ac	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.97ae	10 f1		bpl $97a1			bpl 	_LCOutIdentifier
.97b0	7a		ply				ply 								; restore position
.97b1	80 8c		bra $973f			bra 	_LCMainLoop
.97b3					_LCTokens:
.97b3	aa		tax				tax 								; token in X
.97b4	a9 b6		lda #$b6			lda 	#((KeywordSet2) & $FF)
.97b6	85 36		sta $36				sta 	0+zTemp0
.97b8	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.97ba	85 37		sta $37				sta 	1+zTemp0
.97bc	e0 82		cpx #$82			cpx 	#$82
.97be	f0 16		beq $97d6			beq 	_LCUseShift
.97c0	a9 68		lda #$68			lda 	#((KeywordSet1) & $FF)
.97c2	85 36		sta $36				sta 	0+zTemp0
.97c4	a9 a9		lda #$a9			lda 	#((KeywordSet1) >> 8)
.97c6	85 37		sta $37				sta 	1+zTemp0
.97c8	e0 81		cpx #$81			cpx 	#$81
.97ca	f0 0a		beq $97d6			beq 	_LCUseShift
.97cc	a9 8c		lda #$8c			lda 	#((KeywordSet0) & $FF)
.97ce	85 36		sta $36				sta 	0+zTemp0
.97d0	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.97d2	85 37		sta $37				sta 	1+zTemp0
.97d4	80 01		bra $97d7			bra 	_LCNoShift
.97d6					_LCUseShift:
.97d6	c8		iny				iny
.97d7					_LCNoShift:
.97d7	20 5d 98	jsr $985d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	aa		tax				tax 								; into X
.97dd					_LCFindText:
.97dd	ca		dex				dex
.97de	10 0e		bpl $97ee			bpl 	_LCFoundText 				; found text.
.97e0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.97e2	1a		inc a				inc 	a 							; one extra for size
.97e3	38		sec				sec 								; one extra for checksum
.97e4	65 36		adc $36				adc 	zTemp0 						; go to next token
.97e6	85 36		sta $36				sta 	zTemp0
.97e8	90 f3		bcc $97dd			bcc 	_LCFindText
.97ea	e6 37		inc $37				inc 	zTemp0+1
.97ec	80 ef		bra $97dd			bra 	_LCFindText
.97ee					_LCFoundText:
.97ee	5a		phy				phy 								; save List position
.97ef	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97f1	aa		tax				tax
.97f2	a0 02		ldy #$02			ldy 	#2
.97f4					_LCCopyToken:
.97f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.97f6	20 88 98	jsr $9888			jsr 	LCLLowerCase
.97f9	20 3a 98	jsr $983a			jsr 	LCLWrite
.97fc	c8		iny				iny
.97fd	ca		dex				dex
.97fe	d0 f4		bne $97f4			bne 	_LCCopyToken
.9800	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9802	f0 05		beq $9809			beq 	_LCNoSpace
.9804	a9 20		lda #$20			lda 	#' '
.9806	20 3a 98	jsr $983a			jsr 	LCLWrite
.9809					_LCNoSpace:
.9809	7a		ply				ply 								; restore position.
.980a	c8		iny				iny 								; consume token
.980b	4c 3f 97	jmp $973f			jmp 	_LCMainLoop 				; and go around again.
.980e					_LCData:
.980e	48		pha				pha 								; save type $FE/$FF
.980f	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9811	c9 fe		cmp #$fe			cmp 	#$FE
.9813	f0 02		beq $9817			beq 	_LCHaveOpener
.9815	a2 22		ldx #$22			ldx 	#'"'
.9817					_LCHaveOpener:
.9817	8a		txa				txa 								; output prefix (# or ")
.9818	20 3a 98	jsr $983a			jsr 	LCLWrite
.981b	c8		iny				iny 								; get count
.981c	b1 30		lda ($30),y			lda 	(codePtr),y
.981e	aa		tax				tax
.981f	c8		iny				iny 								; point at first character
.9820					_LCOutData:
.9820	b1 30		lda ($30),y			lda 	(codePtr),y
.9822	c9 00		cmp #$00			cmp 	#0
.9824	f0 03		beq $9829			beq 	_LCNoPrint
.9826	20 3a 98	jsr $983a			jsr 	LCLWrite
.9829					_LCNoPrint:
.9829	c8		iny				iny
.982a	ca		dex				dex
.982b	d0 f3		bne $9820			bne 	_LCOutData
.982d	68		pla				pla 								; closing " required ?
.982e	c9 ff		cmp #$ff			cmp 	#$FF
.9830	d0 05		bne $9837			bne 	_LCNoQuote
.9832	a9 22		lda #$22			lda 	#'"'
.9834	20 3a 98	jsr $983a			jsr 	LCLWrite
.9837					_LCNoQuote:
.9837	4c 3f 97	jmp $973f			jmp 	_LCMainLoop
.983a					LCLWrite:
.983a	da		phx				phx
.983b	ae 9d 04	ldx $049d			ldx 	tbOffset
.983e	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9841	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9844	ee 9d 04	inc $049d			inc 	tbOffset
.9847	fa		plx				plx
.9848	60		rts				rts
.9849					LCDeleteLastSpace:
.9849	48		pha				pha
.984a	da		phx				phx
.984b	ae 9d 04	ldx $049d			ldx 	tbOffset
.984e	f0 0a		beq $985a			beq 	_LCDLSExit
.9850	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9853	c9 20		cmp #$20			cmp 	#' '
.9855	d0 03		bne $985a			bne 	_LCDLSExit
.9857	ce 9d 04	dec $049d			dec 	tbOffset
.985a					_LCDLSExit:
.985a	fa		plx				plx
.985b	68		pla				pla
.985c	60		rts				rts
.985d					LCCheckSpaceRequired:
.985d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9860	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9863	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.9865	f0 1b		beq $9882			beq 	_LCCSRSpace
.9867	c9 29		cmp #$29			cmp 	#')'
.9869	f0 17		beq $9882			beq 	_LCCSRSpace
.986b	c9 23		cmp #$23			cmp 	#'#'
.986d	f0 13		beq $9882			beq 	_LCCSRSpace
.986f	20 88 98	jsr $9888			jsr 	LCLLowerCase 				; saves a little effort
.9872	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9874	90 11		bcc $9887			bcc 	_LCCSRExit
.9876	c9 3a		cmp #$3a			cmp 	#"9"+1
.9878	90 08		bcc $9882			bcc 	_LCCSRSpace
.987a	c9 61		cmp #$61			cmp 	#"a"
.987c	90 09		bcc $9887			bcc 	_LCCSRExit
.987e	c9 7b		cmp #$7b			cmp 	#"z"+1
.9880	b0 05		bcs $9887			bcs 	_LCCSRExit
.9882					_LCCSRSpace:
.9882	a9 20		lda #$20			lda 	#' '
.9884	20 3a 98	jsr $983a			jsr 	LCLWrite
.9887					_LCCSRExit:
.9887	60		rts				rts
.9888					LCLLowerCase:
.9888	c9 41		cmp #$41			cmp 	#"A"
.988a	90 06		bcc $9892			bcc 	_LCLLCOut
.988c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.988e	b0 02		bcs $9892			bcs 	_LCLLCOut
.9890	69 20		adc #$20			adc 	#$20
.9892					_LCLLCOut:
.9892	60		rts				rts
.9893					LCLUpperCase:
.9893	c9 61		cmp #$61			cmp 	#"a"
.9895	90 06		bcc $989d			bcc 	_LCLUCOut
.9897	c9 7b		cmp #$7b			cmp 	#"z"+1
.9899	b0 02		bcs $989d			bcs 	_LCLUCOut
.989b	e9 1f		sbc #$1f			sbc 	#$1F
.989d					_LCLUCOut:
.989d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.989e					ProcedureScan:
.989e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.98a0	85 30		sta $30				sta 	codePtr
.98a2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.98a4	85 31		sta $31				sta 	codePtr+1
.98a6					_PSLoop:
.98a6	b2 30		lda ($30)			lda 	(codePtr)
.98a8	f0 42		beq $98ec			beq 	_PSExit
.98aa	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.98ac	b1 30		lda ($30),y			lda 	(codePtr),y
.98ae	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.98b0	d0 2d		bne $98df			bne 	_PSNext
.98b2	c8		iny				iny 								; get the address of the record to zTemp0 and
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	29 c0		and #$c0			and 	#$C0
.98b7	c9 40		cmp #$40			cmp 	#$40
.98b9	d0 32		bne $98ed			bne 	_PSSyntax
.98bb	b1 30		lda ($30),y			lda 	(codePtr),y
.98bd	18		clc				clc
.98be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98c0	85 37		sta $37				sta 	zTemp0+1
.98c2	c8		iny				iny 								; LSB
.98c3	b1 30		lda ($30),y			lda 	(codePtr),y
.98c5	85 36		sta $36				sta 	zTemp0
.98c7	c8		iny				iny 								; character after variable call.
.98c8	98		tya				tya 								; save Y offset at +7
.98c9	a0 07		ldy #$07			ldy 	#7
.98cb	91 36		sta ($36),y			sta 	(zTemp0),y
.98cd	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.98cf	a0 02		ldy #$02			ldy 	#2
.98d1	91 36		sta ($36),y			sta 	(zTemp0),y
.98d3	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.98d5					_PSCopy:
.98d5	b5 30		lda $30,x			lda 	safePtr,x
.98d7	c8		iny				iny
.98d8	91 36		sta ($36),y			sta 	(zTemp0),y
.98da	e8		inx				inx
.98db	e0 04		cpx #$04			cpx 	#4
.98dd	d0 f6		bne $98d5			bne 	_PSCopy
.98df					_PSNext:
.98df	18		clc				clc
.98e0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98e2	65 30		adc $30				adc 	codePtr
.98e4	85 30		sta $30				sta 	codePtr
.98e6	90 02		bcc $98ea			bcc 	_CREExit
.98e8	e6 31		inc $31				inc 	codePtr+1
.98ea					_CREExit:
.98ea	80 ba		bra $98a6			bra 	_PSLoop
.98ec					_PSExit:
.98ec	60		rts				rts
.98ed					_PSSyntax:
.98ed	4c f8 b3	jmp $b3f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.98f0					ScanForward:
.98f0	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.98f2	86 37		stx $37				stx 	zTemp0+1
.98f4	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.98f6					_ScanLoop:
.98f6	b1 30		lda ($30),y			lda 	(codePtr),y
.98f8	c8		iny				iny
.98f9	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.98fb	d0 0e		bne $990b			bne 	_ScanGoNext
.98fd	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.98ff	f0 04		beq $9905			beq 	_ScanMatch
.9901	c5 37		cmp $37				cmp 	zTemp0+1
.9903	d0 06		bne $990b			bne 	_ScanGoNext
.9905					_ScanMatch:
.9905	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9907	d0 01		bne $990a			bne 	_ScanNotEndEOL
.9909	88		dey				dey
.990a					_ScanNotEndEOL:
.990a	60		rts				rts
.990b					_ScanGoNext:
.990b	20 10 99	jsr $9910			jsr  	ScanForwardOne
.990e	80 e6		bra $98f6			bra 	_ScanLoop
.9910					ScanForwardOne:
.9910	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9912	90 3e		bcc $9952			bcc 	_SFWExit
.9914	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9916	90 18		bcc $9930			bcc 	_ScanSkipOne
.9918	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.991a	b0 2f		bcs $994b			bcs 	_ScanSkipData
.991c	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.991e	90 32		bcc $9952			bcc 	_SFWExit 					; if not, ordinary keywords.
.9920	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9922	b0 2e		bcs $9952			bcs 	_SFWExit
.9924	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9926	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9928	b0 28		bcs $9952			bcs 	_SFWExit
.992a	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.992c	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.992e	80 22		bra $9952			bra 	_SFWExit
.9930					_ScanSkipOne:
.9930	c8		iny				iny 								; consume the extra one.
.9931	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9933	d0 1d		bne $9952			bne 	_SFWExit
.9935	18		clc				clc
.9936	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9938	65 30		adc $30				adc 	codePtr
.993a	85 30		sta $30				sta 	codePtr
.993c	90 02		bcc $9940			bcc 	_CREExit
.993e	e6 31		inc $31				inc 	codePtr+1
.9940					_CREExit:
.9940	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9942	b2 30		lda ($30)			lda 	(codePtr)
.9944	d0 0c		bne $9952			bne 	_SFWExit 					; if not zero, more to scan
.9946	a9 13		lda #$13		lda	#19
.9948	4c 95 99	jmp $9995		jmp	ErrorHandler
.994b					_ScanSkipData:
.994b	88		dey				dey 								; point at data token
.994c	c8		iny				iny
.994d	98		tya				tya
.994e	38		sec				sec
.994f	71 30		adc ($30),y			adc 	(codePtr),y
.9951	a8		tay				tay
.9952					_SFWExit:
.9952	60		rts				rts
.9953					ScanGetCurrentLineStep:
.9953	64 38		stz $38				stz 	zTemp1
.9955	a0 03		ldy #$03			ldy 	#3
.9957					_SGCLSLoop:
.9957	b1 30		lda ($30),y			lda 	(codePtr),y
.9959	c8		iny				iny
.995a	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.995c	f0 05		beq $9963			beq 	_SGCLSExit
.995e	20 10 99	jsr $9910			jsr 	ScanForwardOne
.9961	80 f4		bra $9957			bra 	_SGCLSLoop
.9963					_SGCLSExit:
.9963	a5 38		lda $38				lda 	zTemp1
.9965	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9966					Command_WHILE:
.9966	5a		phy				phy 								; save position of the test
.9967	a2 00		ldx #$00			ldx 	#0
.9969	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; work out the number
.996c	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; check if zero
.996f	f0 0e		beq $997f			beq 	_WHExitLoop 				; if so exit the loop
.9971	98		tya				tya 								; position *after* test.
.9972	7a		ply				ply 								; restore position before test, at WHILE
.9973	88		dey				dey
.9974	48		pha				pha 								; push after test on the stack
.9975	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9977	20 84 a6	jsr $a684			jsr 	StackOpen
.997a	20 c8 a6	jsr $a6c8			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.997d	7a		ply				ply 								; restore the position *after* the test
.997e	60		rts				rts
.997f					_WHExitLoop:
.997f	68		pla				pla 								; throw post loop position
.9980	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9982	aa		tax				tax
.9983	20 f0 98	jsr $98f0			jsr 	ScanForward
.9986	60		rts				rts
.9987					Command_WEND:
.9987	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9989	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.998b	20 b0 a6	jsr $a6b0			jsr 	StackCheckFrame
.998e	20 d9 a6	jsr $a6d9			jsr 	STKLoadCodePosition 		; loop back
.9991	20 a2 a6	jsr $a6a2			jsr 	StackClose		 			; erase the frame
.9994	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ae0a					CheckRightBracket:
.ae0a	b1 30		lda ($30),y			lda 	(codePtr),y
.ae0c	c8		iny				iny
.ae0d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ae0f	d0 0f		bne $ae20			bne 	CNAFail
.ae11	60		rts				rts
.ae12					CheckComma:
.ae12	b1 30		lda ($30),y			lda 	(codePtr),y
.ae14	c8		iny				iny
.ae15	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ae17	d0 07		bne $ae20			bne 	CNAFail
.ae19	60		rts				rts
.ae1a					CheckNextA:
.ae1a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ae1c	d0 02		bne $ae20			bne 	CNAFail
.ae1e	c8		iny				iny 								; skip character
.ae1f	60		rts				rts 								; and exit
.ae20					CNAFail:
.ae20	4c f8 b3	jmp $b3f8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9995					ErrorHandler:
.9995	a8		tay				tay 								; find the error text
.9996	f0 49		beq $99e1			beq 	_EHEnd
.9998	a2 00		ldx #$00			ldx 	#0
.999a	a9 11		lda #$11			lda 	#((ErrorText) & $FF)
.999c	85 36		sta $36				sta 	0+zTemp0
.999e	a9 b4		lda #$b4			lda 	#((ErrorText) >> 8)
.99a0	85 37		sta $37				sta 	1+zTemp0
.99a2					_EHFind:
.99a2	88		dey				dey 								; found the error text ?
.99a3	f0 0e		beq $99b3			beq 	_EHFound
.99a5					_EHFindZero:
.99a5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.99a7	e6 36		inc $36				inc 	zTemp0
.99a9	d0 02		bne $99ad			bne 	_EHFNoCarry
.99ab	e6 37		inc $37				inc 	zTemp0+1
.99ad					_EHFNoCarry:
.99ad	c9 00		cmp #$00			cmp 	#0
.99af	d0 f4		bne $99a5			bne 	_EHFindZero
.99b1	80 ef		bra $99a2			bra 	_EHFind
.99b3					_EHFound:
.99b3	a5 36		lda $36				lda 	zTemp0 						; print message
.99b5	a6 37		ldx $37				ldx 	zTemp0+1
.99b7	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.99ba	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.99bc	b1 30		lda ($30),y			lda 	(codePtr),y
.99be	d0 05		bne $99c5			bne 	_EHAtMsg
.99c0	c8		iny				iny
.99c1	b1 30		lda ($30),y			lda 	(codePtr),y
.99c3	f0 17		beq $99dc			beq 	_EHCREnd
.99c5					_EHAtMsg:
.99c5	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.99c7	a9 e4		lda #$e4			lda 	#_AtMsg & $FF
.99c9	20 ee 99	jsr $99ee			jsr 	PrintStringXA
.99cc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.99ce	b1 30		lda ($30),y			lda 	(codePtr),y
.99d0	48		pha				pha
.99d1	c8		iny				iny
.99d2	b1 30		lda ($30),y			lda 	(codePtr),y
.99d4	aa		tax				tax
.99d5	68		pla				pla
.99d6	20 66 af	jsr $af66			jsr 	ConvertInt16 				; convert XA to string
.99d9	20 ee 99	jsr $99ee			jsr 	PrintStringXA 				; and print it.
.99dc					_EHCREnd:
.99dc	a9 0d		lda #$0d			lda 	#13 						; new line
.99de	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.99e1					_EHEnd:
.99e1	4c 5d 8b	jmp $8b5d			jmp 	WarmStart
>99e4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>99ec	20 00
.99ee					PrintStringXA:
.99ee	5a		phy				phy
.99ef	86 37		stx $37				stx 	zTemp0+1
.99f1	85 36		sta $36				sta 	zTemp0
.99f3	a0 00		ldy #$00			ldy 	#0
.99f5					_PSXALoop:
.99f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99f7	f0 06		beq $99ff			beq 	_PSXAExit
.99f9	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.99fc	c8		iny				iny
.99fd	80 f6		bra $99f5			bra 	_PSXALoop
.99ff					_PSXAExit:
.99ff	7a		ply				ply
.9a00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9a01					UnaryTrue:
.9a01	fa		plx				plx
.9a02					ReturnTrue:
.9a02	a9 01		lda #$01			lda 	#1  						; set to 1
.9a04	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.9a07	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9a09	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a0c	60		rts				rts
.9a0d					UnaryFalse:
.9a0d	fa		plx				plx
.9a0e					ReturnFalse:
.9a0e	4c d0 a5	jmp $a5d0			jmp 	NSMSetZero 					; set it all to zero
.9a11					BinaryCompareEqual:
.9a11	fa		plx				plx
.9a12	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a15	c9 00		cmp #$00			cmp 	#0
.9a17	f0 e9		beq $9a02			beq 	ReturnTrue
.9a19	80 f3		bra $9a0e			bra 	ReturnFalse
.9a1b					BinaryCompareLess:
.9a1b	fa		plx				plx
.9a1c	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a1f	c9 ff		cmp #$ff			cmp 	#$FF
.9a21	f0 df		beq $9a02			beq 	ReturnTrue
.9a23	80 e9		bra $9a0e			bra 	ReturnFalse
.9a25					BinaryCompareGreater:
.9a25	fa		plx				plx
.9a26	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a29	c9 01		cmp #$01			cmp 	#1
.9a2b	f0 d5		beq $9a02			beq 	ReturnTrue
.9a2d	80 df		bra $9a0e			bra 	ReturnFalse
.9a2f					BinaryCompareNotEqual:
.9a2f	fa		plx				plx
.9a30	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a33	c9 00		cmp #$00			cmp 	#0
.9a35	d0 cb		bne $9a02			bne 	ReturnTrue
.9a37	80 d5		bra $9a0e			bra 	ReturnFalse
.9a39					BinaryCompareLessEqual:
.9a39	fa		plx				plx
.9a3a	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a3d	c9 01		cmp #$01			cmp 	#1
.9a3f	d0 c1		bne $9a02			bne 	ReturnTrue
.9a41	80 cb		bra $9a0e			bra 	ReturnFalse
.9a43					BinaryCompareGreaterEqual:
.9a43	fa		plx				plx
.9a44	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode
.9a47	c9 ff		cmp #$ff			cmp 	#$FF
.9a49	d0 b7		bne $9a02			bne 	ReturnTrue
.9a4b	80 c1		bra $9a0e			bra 	ReturnFalse
.9a4d					CompareBaseCode:
.9a4d	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; make both values if references.
.9a50	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9a53	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a56	29 10		and #$10			and 	#NSTString
.9a58	d0 40		bne $9a9a			bne 	_CBCString
.9a5a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9a5d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a60	d0 3b		bne $9a9d			bne 	_CBCFloat
.9a62	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a65	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a68	29 08		and #$08			and 	#NSTFloat
.9a6a	d0 31		bne $9a9d			bne 	_CBCFloat
.9a6c	20 a0 9a	jsr $9aa0			jsr 	CompareFixMinusZero
.9a6f	e8		inx				inx
.9a70	20 a0 9a	jsr $9aa0			jsr 	CompareFixMinusZero
.9a73	ca		dex				dex
.9a74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9a77	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9a7a	10 0b		bpl $9a87			bpl 	_CDCSameSign
.9a7c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9a7f	30 16		bmi $9a97			bmi 	_CBCLess 					; return $FF
.9a81					_CBCGreater:
.9a81	a9 01		lda #$01			lda 	#1
.9a83	60		rts				rts
.9a84					_CBCEqual:
.9a84	a9 00		lda #$00			lda 	#0
.9a86	60		rts				rts
.9a87					_CDCSameSign:
.9a87	20 b0 9b	jsr $9bb0			jsr 	SubTopTwoStack 				; unsigned subtract
.9a8a	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; or the mantissa together
.9a8d	f0 f5		beq $9a84			beq 	_CBCEqual 					; -0 == 0
.9a8f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a92	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a95	10 ea		bpl $9a81			bpl 	_CBCGreater
.9a97					_CBCLess:
.9a97	a9 ff		lda #$ff			lda 	#$FF
.9a99	60		rts				rts
.9a9a					_CBCString:
.9a9a	4c 06 9b	jmp $9b06			jmp 	CompareStrings
.9a9d					_CBCFloat:
.9a9d	4c 6a b0	jmp $b06a			jmp 	CompareFloat
.9aa0					CompareFixMinusZero:
.9aa0	20 00 a6	jsr $a600			jsr 	NSMIsZero
.9aa3	d0 03		bne $9aa8			bne 	_CFXMZNotZero
.9aa5	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9aa8					_CFXMZNotZero:
.9aa8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9aa9					StringConcat:
.9aa9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9aac	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9aaf	29 18		and #$18			and 	#NSBTypeMask
.9ab1	c9 10		cmp #$10			cmp 	#NSTString
.9ab3	d0 4e		bne $9b03			bne		_SCType
.9ab5	64 38		stz $38				stz 	zTemp1 						; counting total length
.9ab7	e8		inx				inx
.9ab8	20 d6 9a	jsr $9ad6			jsr 	_SCSetupZ0 					; setup for second
.9abb	20 e1 9a	jsr $9ae1			jsr 	_SCLengthZ0 				; length for second
.9abe	ca		dex				dex
.9abf	20 d6 9a	jsr $9ad6			jsr 	_SCSetupZ0 					; setup for first
.9ac2	20 e1 9a	jsr $9ae1			jsr 	_SCLengthZ0 				; length for first
.9ac5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9ac7	20 79 b7	jsr $b779			jsr 	StringTempAllocate
.9aca	20 f4 9a	jsr $9af4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9acd	e8		inx				inx
.9ace	20 d6 9a	jsr $9ad6			jsr 	_SCSetupZ0 					; copy second out
.9ad1	20 f4 9a	jsr $9af4			jsr 	_SCCopy
.9ad4	ca		dex				dex
.9ad5	60		rts				rts
.9ad6					_SCSetupZ0:
.9ad6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ad9	85 36		sta $36				sta 	zTemp0
.9adb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ade	85 37		sta $37				sta 	zTemp0+1
.9ae0	60		rts				rts
.9ae1					_SCLengthZ0:
.9ae1	5a		phy				phy
.9ae2	a0 00		ldy #$00			ldy 	#0
.9ae4					_SCLenLoop:
.9ae4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae6	f0 0a		beq $9af2			beq 	_SCLExit
.9ae8	c8		iny				iny
.9ae9	e6 38		inc $38				inc 	zTemp1
.9aeb	10 f7		bpl $9ae4			bpl		_SCLenLoop
.9aed	a9 09		lda #$09		lda	#9
.9aef	4c 95 99	jmp $9995		jmp	ErrorHandler
.9af2					_SCLExit:
.9af2	7a		ply				ply
.9af3	60		rts				rts
.9af4					_SCCopy:
.9af4	5a		phy				phy
.9af5	a0 00		ldy #$00			ldy 	#0
.9af7					_SCCopyLoop:
.9af7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9af9	f0 06		beq $9b01			beq 	_SCCExit
.9afb	20 b7 b7	jsr $b7b7			jsr 	StringTempWrite
.9afe	c8		iny				iny
.9aff	80 f6		bra $9af7			bra 	_SCCopyLoop
.9b01					_SCCExit:
.9b01	7a		ply				ply
.9b02	60		rts				rts
.9b03					_SCType:
.9b03	4c 02 b4	jmp $b402			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ae23					IntegerDivide:
.ae23	fa		plx				plx
.ae24	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae27	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae2a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae2b	0a		asl a				asl 	a
.ae2c	10 05		bpl $ae33			bpl 	_NotRef
.ae2e	48		pha				pha
.ae2f	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae32	68		pla				pla
.ae33					_NotRef:
.ae33	0a		asl a				asl 	a
.ae34	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae36	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae39	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae3c	f0 03		beq $ae41			beq 	_IntegerCode 				; if clear, then we have two integers
.ae3e	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.ae41					_IntegerCode:
.ae41	20 63 ae	jsr $ae63			jsr 	CheckDivideZero 			; do div zero check
.ae44	20 9b ae	jsr $ae9b			jsr 	Int32Divide 				; do the division
.ae47	20 58 af	jsr $af58			jsr 	CalculateSign 				; calculate result sign
.ae4a					NSMCopyPlusTwoToZero:
.ae4a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ae4d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ae50	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ae53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae56	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ae59	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae5c	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ae5f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae62	60		rts				rts
.ae63					CheckDivideZero:
.ae63	e8		inx				inx
.ae64	20 00 a6	jsr $a600			jsr 	NSMIsZero
.ae67	f0 02		beq $ae6b			beq 	_CDVError
.ae69	ca		dex				dex
.ae6a	60		rts				rts
.ae6b					_CDVError:
.ae6b	a9 03		lda #$03		lda	#3
.ae6d	4c 95 99	jmp $9995		jmp	ErrorHandler
.ae70					IntegerModulus:
.ae70	fa		plx				plx
.ae71	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae74	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae77	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae78	0a		asl a				asl 	a
.ae79	10 05		bpl $ae80			bpl 	_NotRef
.ae7b	48		pha				pha
.ae7c	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae7f	68		pla				pla
.ae80					_NotRef:
.ae80	0a		asl a				asl 	a
.ae81	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae83	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae86	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae89	f0 03		beq $ae8e			beq 	_IntegerCode 				; if clear, then we have two integers
.ae8b	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.ae8e					_IntegerCode:
.ae8e					IntegerModulusNoCheck:
.ae8e	20 63 ae	jsr $ae63			jsr 	CheckDivideZero 			; do div zero check
.ae91	20 9b ae	jsr $ae9b			jsr 	Int32Divide 				; do the division
.ae94	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae97	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae9a	60		rts				rts
.ae9b					Int32Divide:
.ae9b	48		pha				pha 								; save AXY
.ae9c	5a		phy				phy
.ae9d	20 a7 a5	jsr $a5a7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aea0	20 cc a5	jsr $a5cc			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aea3	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aea5					_I32DivideLoop:
.aea5	e8		inx				inx
.aea6	e8		inx				inx
.aea7	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aeaa	ca		dex				dex
.aeab	ca		dex				dex
.aeac	20 e6 a5	jsr $a5e6			jsr 	NSMRotateLeft
.aeaf	20 db ae	jsr $aedb			jsr 	DivideCheckSubtract 		; check if subtract possible
.aeb2	90 03		bcc $aeb7			bcc 	_I32DivideNoCarryIn
.aeb4	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aeb7					_I32DivideNoCarryIn:
.aeb7	88		dey				dey 								; loop round till division completed.
.aeb8	d0 eb		bne $aea5			bne 	_I32DivideLoop
.aeba	7a		ply				ply 								; restore AXY and exit
.aebb	68		pla				pla
.aebc	60		rts				rts
.aebd					Int32ShiftDivide:
.aebd	48		pha				pha 								; save AY
.aebe	5a		phy				phy
.aebf	e8		inx				inx 								; clear S[X+2]
.aec0	e8		inx				inx
.aec1	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.aec4	ca		dex				dex
.aec5	ca		dex				dex
.aec6	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aec8					_I32SDLoop:
.aec8	20 db ae	jsr $aedb			jsr 	DivideCheckSubtract 		; check if subtract possible
.aecb	e8		inx				inx
.aecc	e8		inx				inx
.aecd	20 e6 a5	jsr $a5e6			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aed0	ca		dex				dex
.aed1	ca		dex				dex
.aed2	20 e6 a5	jsr $a5e6			jsr 	NSMRotateLeft
.aed5	88		dey				dey 	 							; do 31 times
.aed6	d0 f0		bne $aec8			bne 	_I32SDLoop
.aed8	7a		ply				ply 								; restore AY and exit
.aed9	68		pla				pla
.aeda	60		rts				rts
.aedb					DivideCheckSubtract:
.aedb	20 b0 9b	jsr $9bb0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.aede	b0 04		bcs $aee4			bcs 	_DCSExit 					; if carry set, then could do, exit
.aee0	20 8a 9b	jsr $9b8a			jsr 	AddTopTwoStack 				; add it back in
.aee3	18		clc				clc 								; and return False
.aee4					_DCSExit:
.aee4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aee5					MulInteger:
.aee5	fa		plx				plx
.aee6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aee9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aeec	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aeed	0a		asl a				asl 	a
.aeee	10 05		bpl $aef5			bpl 	_NotRef
.aef0	48		pha				pha
.aef1	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aef4	68		pla				pla
.aef5					_NotRef:
.aef5	0a		asl a				asl 	a 							; put MSB of type into A:7
.aef6	30 0b		bmi $af03			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aef8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aefb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aefe	f0 06		beq $af06			beq 	_IntegerCode 				; if clear, then we have two integers
.af00	4c 41 b1	jmp $b141			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.af03					_StringData:
.af03	4c 0c b4	jmp $b40c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.af06					_IntegerCode:
.af06	20 13 af	jsr $af13			jsr 	MultiplyShort
.af09	c9 00		cmp #$00			cmp 	#0
.af0b	f0 05		beq $af12			beq 	_MIExit
.af0d	a9 04		lda #$04		lda	#4
.af0f	4c 95 99	jmp $9995		jmp	ErrorHandler
.af12					_MIExit:
.af12	60		rts				rts
.af13					MultiplyShort:
.af13	5a		phy				phy 								; save Y
.af14	20 a7 a5	jsr $a5a7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af17	20 cc a5	jsr $a5cc			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.af1a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.af1c					_I32MLoop:
.af1c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.af1f	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.af22	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.af25	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.af28	f0 28		beq $af52			beq 	_I32MExit 					; exit if zero
.af2a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.af2d	29 01		and #$01			and 	#1
.af2f	f0 0e		beq $af3f			beq 	_I32MNoAdd
.af31	20 8a 9b	jsr $9b8a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.af34	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.af37	10 06		bpl $af3f			bpl 	_I32MNoAdd
.af39					_I32ShiftRight:
.af39	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift S[X] right
.af3c	c8		iny				iny 								; increment shift count
.af3d	80 0a		bra $af49			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.af3f					_I32MNoAdd:
.af3f	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.af42	70 f5		bvs $af39			bvs 	_I32ShiftRight 				; instead.
.af44	e8		inx				inx
.af45	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.af48	ca		dex				dex
.af49					_I32MShiftUpper:
.af49	e8		inx				inx 								; shift S[X+2] right
.af4a	e8		inx				inx
.af4b	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight
.af4e	ca		dex				dex
.af4f	ca		dex				dex
.af50	80 ca		bra $af1c			bra 	_I32MLoop 					; try again.
.af52					_I32MExit:
.af52	20 58 af	jsr $af58			jsr 	CalculateSign
.af55	98		tya				tya 								; shift in A
.af56	7a		ply				ply 								; restore Y and exit
.af57	60		rts				rts
.af58					CalculateSign:
.af58	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.af5b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.af5e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af61	0a		asl a				asl 	a 							; shift bit 7 into carry
.af62	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.af65	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b06					CompareStrings:
.9b06	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9b09	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b0c	29 10		and #$10			and 	#NSBIsString
.9b0e	f0 2c		beq $9b3c			beq 	_CSTypeError
.9b10	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b13	85 36		sta $36				sta 	zTemp0
.9b15	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b18	85 37		sta $37				sta 	zTemp0+1
.9b1a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b1d	85 38		sta $38				sta 	zTemp1
.9b1f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b22	85 39		sta $39				sta 	zTemp1+1
.9b24	5a		phy				phy 								; save Y so we can access strings
.9b25	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b27					_CSLoop:
.9b27	c8		iny				iny
.9b28	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b2a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b2c	d0 06		bne $9b34			bne 	_CSDifferent
.9b2e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b30	d0 f5		bne $9b27			bne 	_CSLoop 					; still comparing
.9b32					_CSExit:
.9b32	7a		ply				ply 								; reached end, return zero in A from EOS
.9b33	60		rts				rts
.9b34					_CSDifferent:
.9b34	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b36	90 fa		bcc $9b32			bcc		_CSExit
.9b38	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b3a	80 f6		bra $9b32			bra 	_CSExit
.9b3c					_CSTypeError:
.9b3c	4c 02 b4	jmp $b402			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b3f					ShiftLeft:
.9b3f	38		sec				sec
.9b40	80 01		bra $9b43			bra 	ShiftMain
.9b42					ShiftRight:
.9b42	18		clc				clc
.9b43					ShiftMain:
.9b43	fa		plx				plx 								; restore X
.9b44	08		php				php 								; save direction
.9b45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b48	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b4c	0a		asl a				asl 	a
.9b4d	10 05		bpl $9b54			bpl 	_NotRef
.9b4f	48		pha				pha
.9b50	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b53	68		pla				pla
.9b54					_NotRef:
.9b54	0a		asl a				asl 	a
.9b55	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b57	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b5a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b5d	f0 03		beq $9b62			beq 	_IntegerCode 				; if clear, then we have two integers
.9b5f	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9b62					_IntegerCode:
.9b62	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9b65	29 e0		and #$e0			and 	#$E0
.9b67	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9b6a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9b6d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b70	d0 13		bne $9b85			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9b72					_SMLoop:
.9b72	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9b75	30 11		bmi $9b88			bmi 	_SMExit 					; exit if done.
.9b77	28		plp				plp 								; restore direcition setting
.9b78	08		php				php
.9b79	90 05		bcc $9b80			bcc 	_SMRight
.9b7b	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; shift left if CS
.9b7e	80 f2		bra $9b72			bra 	_SMLoop
.9b80					_SMRight:
.9b80	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift right if CC
.9b83	80 ed		bra $9b72			bra 	_SMLoop
.9b85					_SMExit0:
.9b85	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; return zero.
.9b88					_SMExit:
.9b88	28		plp				plp 								; throw direction
.9b89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b8a					AddTopTwoStack:
.9b8a	18		clc				clc
.9b8b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b8e	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b91	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b94	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b97	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b9a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b9d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ba0	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9ba3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ba6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9ba9	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9bac	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9baf	60		rts				rts
.9bb0					SubTopTwoStack:
.9bb0	38		sec				sec
.9bb1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bb4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9bb7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bba	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bbd	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9bc0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bc3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bc6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9bc9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bcc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bcf	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9bd2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bd5	60		rts				rts
.9bd6					AddInteger:
.9bd6	fa		plx				plx
.9bd7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bda	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bdd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bde	0a		asl a				asl 	a
.9bdf	10 05		bpl $9be6			bpl 	_NotRef
.9be1	48		pha				pha
.9be2	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9be5	68		pla				pla
.9be6					_NotRef:
.9be6	0a		asl a				asl 	a 							; put MSB of type into A:7
.9be7	30 0b		bmi $9bf4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9be9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bec	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bef	f0 06		beq $9bf7			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf1	4c c1 af	jmp $afc1			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9bf4					_StringData:
.9bf4	4c a9 9a	jmp $9aa9			jmp 	StringConcat							; at least one string - don't know both are strings.
.9bf7					_IntegerCode:
.9bf7					AddCode:
.9bf7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9bfa	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bfd	10 8b		bpl $9b8a			bpl 	AddTopTwoStack
.9bff	20 b0 9b	jsr $9bb0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c02	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c05	10 09		bpl $9c10			bpl 	_AddExit
.9c07	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c0a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c0d	20 85 a5	jsr $a585			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c10					_AddExit:
.9c10	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; check for -0
.9c13	d0 03		bne $9c18			bne 	_AddNonZero
.9c15	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9c18					_AddNonZero:
.9c18	60		rts				rts
.9c19					SubInteger:
.9c19	fa		plx				plx
.9c1a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c1d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c20	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c21	0a		asl a				asl 	a
.9c22	10 05		bpl $9c29			bpl 	_NotRef
.9c24	48		pha				pha
.9c25	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c28	68		pla				pla
.9c29					_NotRef:
.9c29	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c2a	30 0b		bmi $9c37			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c2c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c2f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c32	f0 06		beq $9c3a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c34	4c c6 af	jmp $afc6			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c37					_StringData:
.9c37	4c 0c b4	jmp $b40c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c3a					_IntegerCode:
.9c3a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c3d	49 80		eor #$80			eor 	#$80
.9c3f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c42	80 b3		bra $9bf7			bra 	AddCode 					; and do the same code as add.
.9c44					AndInteger:
.9c44	fa		plx				plx
.9c45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c48	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4c	0a		asl a				asl 	a
.9c4d	10 05		bpl $9c54			bpl 	_NotRef
.9c4f	48		pha				pha
.9c50	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c53	68		pla				pla
.9c54					_NotRef:
.9c54	0a		asl a				asl 	a
.9c55	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c57	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c5a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c5d	f0 03		beq $9c62			beq 	_IntegerCode 				; if clear, then we have two integers
.9c5f	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9c62					_IntegerCode:
.9c62	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c65	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9c68	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c6b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c6e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9c71	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c74	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c77	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9c7a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c7d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c80	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9c83	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c86	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c89	60		rts				rts
.9c8a					OraInteger:
.9c8a	fa		plx				plx
.9c8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c91	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c92	0a		asl a				asl 	a
.9c93	10 05		bpl $9c9a			bpl 	_NotRef
.9c95	48		pha				pha
.9c96	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c99	68		pla				pla
.9c9a					_NotRef:
.9c9a	0a		asl a				asl 	a
.9c9b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca3	f0 03		beq $9ca8			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca5	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9ca8					_IntegerCode:
.9ca8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cab	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9cae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cb1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cb4	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9cb7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cba	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cbd	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9cc0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cc3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cc6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9cc9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ccc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9ccf	60		rts				rts
.9cd0					EorInteger:
.9cd0	fa		plx				plx
.9cd1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cd4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cd7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cd8	0a		asl a				asl 	a
.9cd9	10 05		bpl $9ce0			bpl 	_NotRef
.9cdb	48		pha				pha
.9cdc	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cdf	68		pla				pla
.9ce0					_NotRef:
.9ce0	0a		asl a				asl 	a
.9ce1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ce3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ce6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ce9	f0 03		beq $9cee			beq 	_IntegerCode 				; if clear, then we have two integers
.9ceb	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9cee					_IntegerCode:
.9cee	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cf1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9cf4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cf7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cfa	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9cfd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d00	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d03	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9d06	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d09	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d0c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9d0f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d12	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d15	60		rts				rts
.9d16					WordIndirect:
.9d16	fa		plx				plx
.9d17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d1a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d1d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d1e	0a		asl a				asl 	a
.9d1f	10 05		bpl $9d26			bpl 	_NotRef
.9d21	48		pha				pha
.9d22	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d25	68		pla				pla
.9d26					_NotRef:
.9d26	0a		asl a				asl 	a
.9d27	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d29	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d2c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d2f	f0 03		beq $9d34			beq 	_IntegerCode 				; if clear, then we have two integers
.9d31	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9d34					_IntegerCode:
.9d34	20 f7 9b	jsr $9bf7			jsr 	AddCode 					; add the two values
.9d37	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d39	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d3c	60		rts				rts
.9d3d					ByteIndirect:
.9d3d	fa		plx				plx
.9d3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d41	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d44	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d45	0a		asl a				asl 	a
.9d46	10 05		bpl $9d4d			bpl 	_NotRef
.9d48	48		pha				pha
.9d49	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d4c	68		pla				pla
.9d4d					_NotRef:
.9d4d	0a		asl a				asl 	a
.9d4e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d50	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d53	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d56	f0 03		beq $9d5b			beq 	_IntegerCode 				; if clear, then we have two integers
.9d58	4c 02 b4	jmp $b402			jmp 	TypeError 					; anything else, type mismatch.
.9d5b					_IntegerCode:
.9d5b	20 f7 9b	jsr $9bf7			jsr 	AddCode 					; add the two values
.9d5e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.af66					ConvertInt16:
.af66	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.af69	8e 10 04	stx $0410			stx 	NSMantissa1
.af6c	9c 18 04	stz $0418			stz 	NSMantissa2
.af6f	9c 20 04	stz $0420			stz 	NSMantissa3
.af72	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.af75	a2 00		ldx #$00			ldx 	#0 							; stack level
.af77	a9 0a		lda #$0a			lda 	#10 						; base
.af79	80 00		bra $af7b			bra 	ConvertInt32
.af7b					ConvertInt32:
.af7b	5a		phy				phy
.af7c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.af7e	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.af81	10 08		bpl $af8b			bpl 	_CI32NotNeg
.af83	48		pha				pha
.af84	a9 2d		lda #$2d			lda 	#'-'
.af86	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af89	c8		iny				iny
.af8a	68		pla				pla
.af8b					_CI32NotNeg:
.af8b	20 99 af	jsr $af99			jsr 	_CI32DivideConvert 			; recursive conversion
.af8e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af90	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af93	7a		ply				ply
.af94	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af96	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.af98	60		rts				rts
.af99					_CI32DivideConvert:
.af99	e8		inx				inx 								; write to next slot up
.af9a	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.af9d	ca		dex				dex
.af9e	20 9b ae	jsr $ae9b			jsr 	Int32Divide 				; divide
.afa1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.afa4	48		pha				pha
.afa5	20 4a ae	jsr $ae4a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.afa8	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; is it zero ?
.afab	f0 06		beq $afb3			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.afad	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.afb0	20 99 af	jsr $af99			jsr 	_CI32DivideConvert 			; and recusrively call.
.afb3					_CI32NoRecurse:
.afb3	68		pla				pla 								; remainder
.afb4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.afb6	90 02		bcc $afba			bcc 	_CI32NotHex
.afb8	69 26		adc #$26			adc 	#6+32
.afba					_CI32NotHex:
.afba	69 30		adc #$30			adc 	#48
.afbc	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.afbf	c8		iny				iny
.afc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9d64					PrecedenceLevel:
>9d64	04					.byte	 4	; $00 <<
>9d65	02					.byte	 2	; $01 <=
>9d66	02					.byte	 2	; $02 <>
>9d67	00					.byte	 0	; $03 !!3
>9d68	00					.byte	 0	; $04 ><
>9d69	02					.byte	 2	; $05 >=
>9d6a	04					.byte	 4	; $06 >>
>9d6b	00					.byte	 0	; $07 !!7
>9d6c	00					.byte	 0	; $08 !!8
>9d6d	00					.byte	 0	; $09 !!9
>9d6e	00					.byte	 0	; $0a !!10
>9d6f	00					.byte	 0	; $0b !!11
>9d70	00					.byte	 0	; $0c !!12
>9d71	00					.byte	 0	; $0d !!13
>9d72	00					.byte	 0	; $0e !!14
>9d73	00					.byte	 0	; $0f !!15
>9d74	00					.byte	 0	; $10 @
>9d75	00					.byte	 0	; $11 !!17
>9d76	00					.byte	 0	; $12 !!18
>9d77	00					.byte	 0	; $13 [
>9d78	04					.byte	 4	; $14 \
>9d79	00					.byte	 0	; $15 ]
>9d7a	01					.byte	 1	; $16 ^
>9d7b	00					.byte	 0	; $17 _
>9d7c	00					.byte	 0	; $18 `
>9d7d	00					.byte	 0	; $19 !!25
>9d7e	00					.byte	 0	; $1a !!26
>9d7f	00					.byte	 0	; $1b {
>9d80	01					.byte	 1	; $1c |
>9d81	00					.byte	 0	; $1d }
>9d82	00					.byte	 0	; $1e ~
>9d83	00					.byte	 0	; $1f [7m<7F>[m
>9d84	00					.byte	 0	; $20
>9d85	05					.byte	 5	; $21 !
>9d86	00					.byte	 0	; $22 "
>9d87	00					.byte	 0	; $23 #
>9d88	05					.byte	 5	; $24 $
>9d89	04					.byte	 4	; $25 %
>9d8a	01					.byte	 1	; $26 &
>9d8b	00					.byte	 0	; $27 '
>9d8c	00					.byte	 0	; $28 (
>9d8d	00					.byte	 0	; $29 )
>9d8e	04					.byte	 4	; $2a *
>9d8f	03					.byte	 3	; $2b +
>9d90	00					.byte	 0	; $2c ,
>9d91	03					.byte	 3	; $2d -
>9d92	00					.byte	 0	; $2e .
>9d93	04					.byte	 4	; $2f /
>9d94	00					.byte	 0	; $30 0
>9d95	00					.byte	 0	; $31 1
>9d96	00					.byte	 0	; $32 2
>9d97	00					.byte	 0	; $33 3
>9d98	00					.byte	 0	; $34 4
>9d99	00					.byte	 0	; $35 5
>9d9a	00					.byte	 0	; $36 6
>9d9b	00					.byte	 0	; $37 7
>9d9c	00					.byte	 0	; $38 8
>9d9d	00					.byte	 0	; $39 9
>9d9e	00					.byte	 0	; $3a :
>9d9f	00					.byte	 0	; $3b ;
>9da0	02					.byte	 2	; $3c <
>9da1	02					.byte	 2	; $3d =
>9da2	02					.byte	 2	; $3e >
>9da3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9da4					EvaluateExpressionAt0:
.9da4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9da6					EvaluateExpression:
.9da6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9da8					EvaluateExpressionAtPrecedence:
.9da8	48		pha				pha 								; save precedence level
.9da9	20 77 a0	jsr $a077			jsr 	EvaluateTerm 				; evaluate term into level X.
.9dac	68		pla				pla 								; restore precedence level.
.9dad					_EXPRLoop:
.9dad	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9daf	b1 30		lda ($30),y			lda 	(codePtr),y
.9db1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9db3	b0 25		bcs $9dda			bcs 	_EXPRExit
.9db5	da		phx				phx 								; read the operator precedence
.9db6	aa		tax				tax
.9db7	bd 64 9d	lda $9d64,x			lda 	PrecedenceLevel,x
.9dba	fa		plx				plx
.9dbb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9dbd	f0 1b		beq $9dda			beq 	_EXPRExit
.9dbf	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9dc1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dc3	c5 37		cmp $37				cmp 	zTemp0+1
.9dc5	b0 13		bcs $9dda			bcs		_EXPRExit 					; if current >= operator exit
.9dc7	48		pha				pha 								; save current precedence.
.9dc8	b1 30		lda ($30),y			lda 	(codePtr),y
.9dca	c8		iny				iny
.9dcb	48		pha				pha
.9dcc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9dce	e8		inx				inx 								; work out the right hand side.
.9dcf	20 a8 9d	jsr $9da8			jsr 	EvaluateExpressionAtPrecedence
.9dd2	ca		dex				dex
.9dd3	68		pla				pla 								; get operator, call the code.
.9dd4	20 dd 9d	jsr $9ddd			jsr 	_EXPRCaller
.9dd7	68		pla				pla 								; restore precedence level
.9dd8	80 d3		bra $9dad			bra 	_EXPRLoop 					; and go round.
.9dda					_EXPRExit:
.9dda	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9ddc	60		rts				rts
.9ddd					_EXPRCaller:
.9ddd	da		phx				phx 								; save on stack, first thing is to restore it
.9dde	0a		asl a				asl 	a 							; double so can use vectors into X
.9ddf	aa		tax				tax
.9de0	7c 1c 95	jmp ($951c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.afc1					FloatingPointAdd:
.afc1	20 6a b1	jsr $b16a			jsr 	FloatPrepare 				; prepare for floats
.afc4	80 0b		bra $afd1			bra 	FloatAdd
.afc6					FloatingPointSub:
.afc6	20 6a b1	jsr $b16a			jsr 	FloatPrepare 				; prepare for floats
.afc9					FloatSubtract:
.afc9	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.afcc	49 80		eor #$80			eor 	#$80
.afce	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.afd1					FloatAdd:
.afd1	48		pha				pha
.afd2	5a		phy				phy
.afd3	20 7b b1	jsr $b17b			jsr 	NSNormalise 				; normalise S[X]
.afd6	f0 5c		beq $b034			beq 	_FAReturn1
.afd8	e8		inx				inx 								; normalise S[X+1]
.afd9	20 7b b1	jsr $b17b			jsr 	NSNormalise
.afdc	ca		dex				dex
.afdd	c9 00		cmp #$00			cmp 	#0
.afdf	f0 77		beq $b058			beq 	_FAExit 					; if so, just return A
.afe1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.afe4	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.afe7	f0 1b		beq $b004			beq 	_FAExponentsEqual
.afe9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.afec	a8		tay				tay
.afed	38		sec				sec 								; do a signed comparison of the exponents.
.afee	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aff1	50 02		bvc $aff5			bvc 	_FANoSignedChange
.aff3	49 80		eor #$80			eor 	#$80
.aff5					_FANoSignedChange:
.aff5	29 80		and #$80			and 	#$80
.aff7	10 03		bpl $affc			bpl 	_FAHaveMax
.aff9	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.affc					_FAHaveMax:
.affc	20 5b b0	jsr $b05b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.afff	e8		inx				inx
.b000	20 5b b0	jsr $b05b			jsr 	_FAShiftToExponent
.b003	ca		dex				dex
.b004					_FAExponentsEqual:
.b004	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b007	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b00a	30 10		bmi $b01c			bmi 	_FADifferentSigns
.b00c	20 8a 9b	jsr $9b8a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b00f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b012	10 44		bpl $b058			bpl 	_FAExit 					; if no, we are done.
.b014	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b017	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b01a	80 3c		bra $b058			bra 	_FAExit
.b01c					_FADifferentSigns:
.b01c	20 b0 9b	jsr $9bb0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b01f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b022	10 06		bpl $b02a			bpl 	_FACheckZero 				; if no, check for -0
.b024	20 7c a5	jsr $a57c			jsr 	NSMNegate 					; netate result
.b027	20 85 a5	jsr $a585			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b02a					_FACheckZero:
.b02a	20 00 a6	jsr $a600			jsr 	NSMIsZero	 				; check for -0
.b02d	d0 29		bne $b058			bne 	_FAExit
.b02f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b032	80 24		bra $b058			bra 	_FAExit
.b034					_FAReturn1:
.b034	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b037	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b03a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b03d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b040	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b043	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b046	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b049	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b04c	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b04f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b052	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b055	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b058					_FAExit:
.b058	7a		ply				ply
.b059	68		pla				pla
.b05a	60		rts				rts
.b05b					_FAShiftToExponent:
.b05b					_FAShiftToExponent2:
.b05b	98		tya				tya 								; compare Y to exponent
.b05c	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b05f	f0 08		beq $b069			beq 	_FASEExit 					; exit if so.
.b061	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight	 			; shift the mantissa right
.b064	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b067	80 f2		bra $b05b			bra 	_FAShiftToExponent2
.b069					_FASEExit:
.b069	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b06a					CompareFloat:
.b06a	20 c9 af	jsr $afc9			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b06d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b070	29 f8		and #$f8			and 	#$F8
.b072	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b075	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b078	f0 09		beq $b083			beq 	_FCExit 					; zero, so approximately identical
.b07a	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b07c	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b07f	10 02		bpl $b083			bpl 	_FCExit
.b081					_FCNegative:
.b081	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b083					_FCExit:
.b083	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b084					FDivideCommand:
.b084	fa		plx				plx	 								; restore stack position
.b085	20 6a b1	jsr $b16a			jsr 	FloatPrepare 				; prepare for floats
.b088					FloatDivide:
.b088	48		pha				pha
.b089	e8		inx				inx
.b08a	20 7b b1	jsr $b17b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b08d	ca		dex				dex
.b08e	c9 00		cmp #$00			cmp 	#0
.b090	f0 20		beq $b0b2			beq 	_FDZero
.b092	20 7b b1	jsr $b17b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b095	f0 19		beq $b0b0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b097	20 bd ae	jsr $aebd			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b09a	20 4a ae	jsr $ae4a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b09d	20 7b b1	jsr $b17b			jsr		NSNormalise 				; renormalise
.b0a0	20 58 af	jsr $af58			jsr 	CalculateSign 				; calculate result sign
.b0a3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b0a6	38		sec				sec
.b0a7	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b0aa	38		sec				sec
.b0ab	e9 1e		sbc #$1e			sbc 	#30
.b0ad	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0b0					_FDExit:
.b0b0	68		pla				pla
.b0b1	60		rts				rts
.b0b2					_FDZero:
.b0b2	a9 03		lda #$03		lda	#3
.b0b4	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b0b7					FloatFractionalPart:
.b0b7	5a		phy				phy
.b0b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b0bb	29 7f		and #$7f			and 	#$7F
.b0bd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0c0	20 7b b1	jsr $b17b			jsr 	NSNormalise
.b0c3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b0c6	38		sec				sec
.b0c7	e9 e0		sbc #$e0			sbc 	#$E0
.b0c9	90 31		bcc $b0fc			bcc 	_FFPExit 					; already fractional
.b0cb	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b0cd	b0 2a		bcs $b0f9			bcs 	_FFPZero
.b0cf	a8		tay				tay 								; put count to do in Y
.b0d0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b0d3	20 fe b0	jsr $b0fe			jsr 	_FFPPartial
.b0d6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b0d9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b0dc	20 fe b0	jsr $b0fe			jsr 	_FFPPartial
.b0df	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b0e2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b0e5	20 fe b0	jsr $b0fe			jsr 	_FFPPartial
.b0e8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0eb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b0ee	20 fe b0	jsr $b0fe			jsr 	_FFPPartial
.b0f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b0f4	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; zeroed check.
.b0f7	d0 03		bne $b0fc			bne 	_FFPExit
.b0f9					_FFPZero:
.b0f9	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.b0fc					_FFPExit:
.b0fc	7a		ply				ply
.b0fd	60		rts				rts
.b0fe					_FFPPartial:
.b0fe	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b100	f0 17		beq $b119			beq 	_FFFPPExit
.b102	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b104	b0 0c		bcs $b112			bcs 	_FFFPPWholeByte
.b106	5a		phy				phy
.b107					_FFFPPLeft:
.b107	0a		asl a				asl 	a
.b108	88		dey				dey
.b109	d0 fc		bne $b107			bne 	_FFFPPLeft
.b10b	7a		ply				ply
.b10c					_FFFPPRight:
.b10c	4a		lsr a				lsr 	a
.b10d	88		dey				dey
.b10e	d0 fc		bne $b10c			bne 	_FFFPPRight
.b110	80 07		bra $b119			bra 	_FFFPPExit
.b112					_FFFPPWholeByte:
.b112	98		tya				tya 								; subtract 8 from count
.b113	38		sec				sec
.b114	e9 08		sbc #$08			sbc 	#8
.b116	a8		tay				tay
.b117	a9 00		lda #$00			lda 	#0 							; and clear all
.b119					_FFFPPExit:
.b119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b11a					FloatIntegerPart:
.b11a	48		pha				pha
.b11b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b11e	f0 1f		beq $b13f			beq 	_FIPExit 					; if so do nothing
.b120	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; is it zero ?
.b123	f0 17		beq $b13c			beq 	_FIPZero 					; if so return zero.
.b125	20 7b b1	jsr $b17b			jsr 	NSNormalise 				; normalise
.b128	f0 12		beq $b13c			beq 	_FIPZero 					; normalised to zero, exit zero
.b12a					_FIPShift:
.b12a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b12d	10 08		bpl $b137			bpl 	_FIPCheckZero
.b12f	20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift mantissa right
.b132	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b135	80 f3		bra $b12a			bra 	_FIPShift
.b137					_FIPCheckZero:
.b137	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; avoid -0 problem
.b13a	d0 03		bne $b13f			bne 	_FIPExit 					; set to zero if mantissa zero.
.b13c					_FIPZero:
.b13c	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.b13f					_FIPExit:
.b13f	68		pla				pla
.b140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b141					FloatingPointMultiply:
.b141	20 6a b1	jsr $b16a			jsr 	FloatPrepare 				; prepare for floats
.b144					FloatMultiply:
.b144	48		pha				pha
.b145	20 7b b1	jsr $b17b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b148	f0 1b		beq $b165			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b14a	e8		inx				inx
.b14b	20 7b b1	jsr $b17b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b14e	ca		dex				dex
.b14f	c9 00		cmp #$00			cmp 	#0
.b151	f0 0f		beq $b162			beq 	_FDSetZero
.b153	20 13 af	jsr $af13			jsr 	MultiplyShort 				; calculate the result.
.b156	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b159	18		clc				clc
.b15a	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b15d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b160	80 03		bra $b165			bra 	_FDExit
.b162					_FDSetZero:
.b162	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; return 0
.b165					_FDExit:
.b165	20 7b b1	jsr $b17b			jsr 	NSNormalise 				; normalise the result
.b168	68		pla				pla
.b169	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b16a					FloatPrepare:
.b16a	20 b6 9e	jsr $9eb6			jsr 	DereferenceTopTwo 			; dereference the top two values
.b16d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b170	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b173	29 10		and #$10			and 	#NSBIsString
.b175	d0 01		bne $b178			bne 	_FDType
.b177	60		rts				rts
.b178					_FDType:
.b178	4c 02 b4	jmp $b402			jmp 	TypeError
.b17b					NSNormalise:
.b17b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b17e	29 80		and #$80			and 	#$80
.b180	09 08		ora #$08			ora 	#NSTFloat
.b182	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b185	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; if zero exit
.b188	d0 09		bne $b193			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b18a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b18d	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b190	a9 00		lda #$00			lda 	#0 							; set Z flag
.b192	60		rts				rts
.b193					_NSNormaliseOptimise:
.b193	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b196	d0 22		bne $b1ba			bne 	_NSNormaliseLoop
.b198	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b19b	30 1d		bmi $b1ba			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b19d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b1a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b1a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b1a6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b1a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1ac	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b1af	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b1b2	38		sec				sec
.b1b3	e9 08		sbc #$08			sbc 	#8
.b1b5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1b8	80 d9		bra $b193			bra 	_NSNormaliseOptimise
.b1ba					_NSNormaliseLoop:
.b1ba	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b1bd	70 08		bvs $b1c7			bvs 	_NSNExit 					; exit if so with Z flag clear
.b1bf	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; shift mantissa left
.b1c2	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b1c5	80 f3		bra $b1ba			bra 	_NSNormaliseLoop
.b1c7					_NSNExit:
.b1c7	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b1c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9de3					AssignNumber:
.9de3	5a		phy				phy
.9de4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9de7	85 36		sta $36				sta 	zTemp0
.9de9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dec	85 37		sta $37				sta 	zTemp0+1
.9dee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9df1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9df3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9df6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9df8	c9 08		cmp #$08			cmp 	#NSTFloat
.9dfa	f0 2a		beq $9e26			beq 	_ANFloat
.9dfc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9dff	f0 05		beq $9e06			beq		_ANNotFloat
.9e01	e8		inx				inx
.9e02	20 1a b1	jsr $b11a			jsr 	FloatIntegerPart 			; make it an integer
.9e05	ca		dex				dex
.9e06					_ANNotFloat:
.9e06	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e09	29 03		and #$03			and 	#3
.9e0b	d0 05		bne $9e12			bne 	_ANByteWord
.9e0d	20 32 9e	jsr $9e32			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e10	80 1e		bra $9e30			bra 	_ANExit
.9e12					_ANByteWord:
.9e12	48		pha				pha 								; save count
.9e13	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9e16	92 36		sta ($36)			sta 	(zTemp0)
.9e18	68		pla				pla
.9e19	c9 01		cmp #$01			cmp	 	#1
.9e1b	f0 13		beq $9e30			beq 	_ANExit
.9e1d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e20	a0 01		ldy #$01			ldy 	#1
.9e22	91 36		sta ($36),y			sta 	(zTemp0),y
.9e24	80 0a		bra $9e30			bra 	_ANExit
.9e26					_ANFloat:
.9e26	20 32 9e	jsr $9e32			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e29	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e2c	a0 04		ldy #$04			ldy 	#4
.9e2e	91 36		sta ($36),y			sta 	(zTemp0),y
.9e30					_ANExit:
.9e30	7a		ply				ply
.9e31	60		rts				rts
.9e32					_ANCopy4PackSign:
.9e32	a0 03		ldy #$03			ldy 	#3
.9e34	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e37	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e39	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e3c	91 36		sta ($36),y			sta 	(zTemp0),y
.9e3e	88		dey				dey
.9e3f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e42	91 36		sta ($36),y			sta 	(zTemp0),y
.9e44	88		dey				dey
.9e45	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e48	91 36		sta ($36),y			sta 	(zTemp0),y
.9e4a	88		dey				dey
.9e4b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e4e	91 36		sta ($36),y			sta 	(zTemp0),y
.9e50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e51					AssignString:
.9e51	5a		phy				phy
.9e52	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e55	85 38		sta $38				sta 	zTemp1
.9e57	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e5a	85 39		sta $39				sta 	zTemp1+1
.9e5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e5f	85 36		sta $36				sta 	zTemp0
.9e61	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e64	85 37		sta $37				sta 	zTemp0+1
.9e66	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9e68	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e6a	f0 23		beq $9e8f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9e6c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9e6d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9e6f	e9 02		sbc #$02			sbc 	#2
.9e71	85 3c		sta $3c				sta 	zsTemp
.9e73	a0 01		ldy #$01			ldy 	#1
.9e75	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e77	e9 00		sbc #$00			sbc 	#0
.9e79	85 3d		sta $3d				sta 	zsTemp+1
.9e7b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9e7d					_ASGetLength:
.9e7d	c8		iny				iny
.9e7e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e80	d0 fb		bne $9e7d			bne 	_ASGetLength
.9e82	98		tya				tya 								; is this length <= current length
.9e83	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e85	90 20		bcc $9ea7			bcc 	_ASCopyString
.9e87	f0 1e		beq $9ea7			beq 	_ASCopyString
.9e89	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e8b	a0 01		ldy #$01			ldy 	#1
.9e8d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e8f					_ASNewStringRequired:
.9e8f	e8		inx				inx 								; concrete the new string.
.9e90	20 f8 b6	jsr $b6f8			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e93	ca		dex				dex
.9e94	18		clc				clc
.9e95	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e98	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e9a	92 36		sta ($36)			sta 	(zTemp0)
.9e9c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e9f	69 00		adc #$00			adc 	#0
.9ea1	a0 01		ldy #$01			ldy 	#1
.9ea3	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea5	80 0d		bra $9eb4			bra 	_ASExit
.9ea7					_ASCopyString:
.9ea7	a0 00		ldy #$00			ldy 	#0
.9ea9					_ASCopyLoop:
.9ea9	b1 38		lda ($38),y			lda 	(zTemp1),y
.9eab	c8		iny				iny
.9eac	c8		iny				iny
.9ead	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9eaf	88		dey				dey
.9eb0	c9 00		cmp #$00			cmp 	#0
.9eb2	d0 f5		bne $9ea9			bne 	_ASCopyLoop
.9eb4					_ASExit:
.9eb4	7a		ply				ply
.9eb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9eb6					DereferenceTopTwo:
.9eb6	e8		inx				inx
.9eb7	20 bb 9e	jsr $9ebb			jsr 	Dereference 				; deref x+1
.9eba	ca		dex				dex  								; falls through to deref x
.9ebb					Dereference:
.9ebb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ebe	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ec0	f0 57		beq $9f19			beq 	_DRFExit 					; not a reference
.9ec2	5a		phy				phy
.9ec3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ec6	85 36		sta $36				sta 	zTemp0
.9ec8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ecb	85 37		sta $37				sta 	zTemp0+1
.9ecd	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9ed0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9ed2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ed5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9ed8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9eda	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9edc	f0 0f		beq $9eed			beq 	_DRFDereferenceTwo
.9ede	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ee0	f0 39		beq $9f1b			beq 	_DRFFull
.9ee2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ee5	29 03		and #$03			and 	#3
.9ee7	f0 32		beq $9f1b			beq 	_DRFFull 					; the whole word
.9ee9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9eeb	f0 07		beq $9ef4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9eed					_DRFDereferenceTwo:
.9eed	a0 01		ldy #$01			ldy 	#1
.9eef	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ef1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ef4					_DRFClear23:
.9ef4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ef7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9efa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9efd	29 18		and #$18			and 	#NSBTypeMask
.9eff	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f02	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f04	d0 12		bne $9f18			bne 	_DRFNotString
.9f06	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9f09	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f0c	d0 0a		bne $9f18			bne 	_DRFNotString
.9f0e	a9 1a		lda #$1a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f10	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9f13	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f15	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f18					_DRFNotString
.9f18	7a		ply				ply 								; restore Y and exit
.9f19					_DRFExit:
.9f19	60		rts				rts
.9f1a					_DRFNullString:
>9f1a	00						.byte 	0
.9f1b					_DRFFull:
.9f1b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f1d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f1f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f22	c8		iny				iny
.9f23	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f25	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f28	c8		iny				iny
.9f29	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f2b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f2e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f31	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f34	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f36	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f39	f0 06		beq $9f41			beq 	_DRFNoExponent
.9f3b	c8		iny				iny 								; if not, read the exponent as well.
.9f3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f3e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f41					_DRFNoExponent:
.9f41	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f44	10 0d		bpl $9f53			bpl 	_DRFExit2 					; if not, then exit.
.9f46	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f48	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9f4e	09 80		ora #$80			ora 	#NSBIsNegative
.9f50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f53					_DRFExit2:
.9f53	7a		ply				ply
.9f54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9f55					EncodeNumberStart:
.9f55	38		sec				sec
.9f56	80 01		bra $9f59			bra 	EncodeNumberContinue+1
.9f58					EncodeNumberContinue:
.9f58	18		clc				clc
.9f59					EncodeNumber:
.9f59	08		php				php 								; save reset.
.9f5a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f5c	f0 12		beq $9f70			beq 	_ENIsOkay
.9f5e	c9 30		cmp #$30			cmp 	#"0"
.9f60	90 04		bcc $9f66			bcc 	_ENBadNumber
.9f62	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f64	90 0a		bcc $9f70			bcc 	_ENIsOkay
.9f66					_ENBadNumber:
.9f66	28		plp				plp 								; throw saved reset
.9f67	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9f6a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f6c	f0 7e		beq $9fec			beq 	_ENConstructFinal
.9f6e					_ENFail:
.9f6e	18		clc				clc 								; not allowed
.9f6f	60		rts				rts
.9f70					_ENIsOkay:
.9f70	28		plp				plp 								; are we restarting
.9f71	90 15		bcc $9f88			bcc 	_ENNoRestart
.9f73					_ENStartEncode:
.9f73	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9f75	f0 0c		beq $9f83			beq 	_ENFirstDP
.9f77	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9f79	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.9f7c	a9 01		lda #$01			lda 	#ESTA_Low
.9f7e					_ENExitChange:
.9f7e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9f81	38		sec				sec
.9f82	60		rts				rts
.9f83					_ENFirstDP:
.9f83	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; clear integer part
.9f86	80 3f		bra $9fc7			bra 	_ESTASwitchFloat			; go straight to float and exi
.9f88					_ENNoRestart:
.9f88	48		pha				pha 								; save on stack.
.9f89	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f8c	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f8e	f0 09		beq $9f99			beq  	_ESTALowState
.9f90	c9 02		cmp #$02			cmp 	#ESTA_High
.9f92	f0 29		beq $9fbd			beq 	_ESTAHighState
.9f94	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f96	f0 3b		beq $9fd3			beq 	_ESTADecimalState
>9f98	db						.byte 	$DB 						; causes a break in the emulator
.9f99					_ESTALowState:
.9f99	68		pla				pla 								; get value back
.9f9a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f9c	f0 29		beq $9fc7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f9e	29 0f		and #$0f			and 	#15 						; make digit
.9fa0	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9fa3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9fa6	0a		asl a				asl 	a
.9fa7	0a		asl a				asl 	a
.9fa8	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fab	0a		asl a				asl 	a
.9fac	6d 86 04	adc $0486			adc 	DigitTemp
.9faf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fb2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9fb4	90 05		bcc $9fbb			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9fb6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fb8	8d 85 04	sta $0485			sta 	EncodeState
.9fbb					_ESTANoSwitch:
.9fbb	38		sec				sec
.9fbc	60		rts				rts
.9fbd					_ESTAHighState:
.9fbd	68		pla				pla 								; get value back
.9fbe	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9fc0	f0 05		beq $9fc7			beq 	_ESTASwitchFloat
.9fc2	20 26 a0	jsr $a026			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9fc5	38		sec				sec
.9fc6	60		rts				rts
.9fc7					_ESTASwitchFloat:
.9fc7	9c 87 04	stz $0487			stz 	DecimalCount
.9fca	e8		inx				inx 								; zero the decimal additive.
.9fcb	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.9fce	ca		dex				dex
.9fcf	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9fd1	80 ab		bra $9f7e			bra 	_ENExitChange
.9fd3					_ESTADecimalState:
.9fd3	68		pla				pla 								; digit.
.9fd4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9fd6	f0 96		beq $9f6e			beq 	_ENFail
.9fd8	e8		inx				inx 								; put digit into fractional part of X+1
.9fd9	20 26 a0	jsr $a026			jsr 	ESTAShiftDigitIntoMantissa
.9fdc	ca		dex				dex
.9fdd	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9fe0	ad 87 04	lda $0487			lda 	DecimalCount
.9fe3	c9 0b		cmp #$0b			cmp 	#11
.9fe5	f0 02		beq $9fe9			beq 	_ESTADSFail
.9fe7	38		sec				sec
.9fe8	60		rts				rts
.9fe9					_ESTADSFail:
.9fe9	4c fd b3	jmp $b3fd			jmp 	RangeError
.9fec					_ENConstructFinal:
.9fec	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9fef	f0 33		beq $a024			beq 	_ENCFExit 					; no decimals
.9ff1	5a		phy				phy
.9ff2	0a		asl a				asl 	a 							; x 4 and CLC
.9ff3	0a		asl a				asl 	a
.9ff4	6d 87 04	adc $0487			adc 	DecimalCount
.9ff7	a8		tay				tay
.9ff8	b9 bc b3	lda $b3bc,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ffb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ffe	b9 bd b3	lda $b3bd,y			lda 	DecimalScalarTable-5+1,y
.a001	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a004	b9 be b3	lda $b3be,y			lda 	DecimalScalarTable-5+2,y
.a007	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a00a	b9 bf b3	lda $b3bf,y			lda 	DecimalScalarTable-5+3,y
.a00d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a010	b9 c0 b3	lda $b3c0,y			lda 	DecimalScalarTable-5+4,y
.a013	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a016	a9 08		lda #$08			lda 	#NSTFloat
.a018	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a01b	7a		ply				ply
.a01c	e8		inx				inx 								; multiply decimal const by decimal scalar
.a01d	20 44 b1	jsr $b144			jsr 	FloatMultiply
.a020	ca		dex				dex
.a021	20 d1 af	jsr $afd1			jsr 	FloatAdd 					; add to integer part.
.a024					_ENCFExit:
.a024	18		clc				clc 								; reject the digit.
.a025	60		rts				rts
.a026					ESTAShiftDigitIntoMantissa:
.a026	29 0f		and #$0f			and 	#15 						; save digit
.a028	48		pha				pha
.a029	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a02c	48		pha				pha
.a02d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a030	48		pha				pha
.a031	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a034	48		pha				pha
.a035	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a038	48		pha				pha
.a039	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 2
.a03c	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 4
.a03f	18		clc				clc 								; pop mantissa and add
.a040	68		pla				pla
.a041	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a044	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a047	68		pla				pla
.a048	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a04b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a04e	68		pla				pla
.a04f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a052	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a055	68		pla				pla
.a056	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a059	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a05c	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 10
.a05f	68		pla				pla 								; add digit
.a060	18		clc				clc
.a061	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a064	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a067	90 0d		bcc $a076			bcc 	_ESTASDExit
.a069	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a06c	d0 08		bne $a076			bne 	_ESTASDExit
.a06e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a071	d0 03		bne $a076			bne 	_ESTASDExit
.a073	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a076					_ESTASDExit:
.a076	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a077					EvaluateTerm:
.a077	b1 30		lda ($30),y			lda 	(codePtr),y
.a079	30 18		bmi $a093			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a07b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a07d	b0 6f		bcs $a0ee			bcs 	_ETVariable
.a07f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a081	90 6e		bcc $a0f1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a083	c9 3a		cmp #$3a			cmp 	#'9'+1
.a085	b0 6a		bcs $a0f1			bcs 	_ETPuncUnary
.a087	20 55 9f	jsr $9f55			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a08a					_ETNumber:
.a08a	c8		iny				iny 								; keep encoding until we have the numbers
.a08b	b1 30		lda ($30),y			lda 	(codePtr),y
.a08d	20 58 9f	jsr $9f58			jsr 	EncodeNumberContinue
.a090	b0 f8		bcs $a08a			bcs 	_ETNumber 					; go back if accepted.
.a092	60		rts				rts
.a093					_ETCheckUnary:
.a093	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a095	f0 41		beq $a0d8			beq 	_ETString
.a097	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a099	f0 12		beq $a0ad			beq 	_ETHexConstant
.a09b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a09d	90 0b		bcc $a0aa			bcc 	_ETSyntaxError
.a09f	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a0a1	b0 07		bcs $a0aa			bcs 	_ETSyntaxError
.a0a3	da		phx				phx 								; push X on the stack
.a0a4	0a		asl a				asl 	a 							; put vector x 2 into X
.a0a5	aa		tax				tax
.a0a6	c8		iny				iny 								; consume unary function token
.a0a7	7c 9c 95	jmp ($959c,x)			jmp 	(VectorSet0,x) 				; and do it.
.a0aa					_ETSyntaxError:
.a0aa	4c f8 b3	jmp $b3f8			jmp 	SyntaxError
.a0ad					_ETHexConstant:
.a0ad	c8		iny				iny 								; skip #
.a0ae	c8		iny				iny 								; skip count
.a0af	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero 					; clear result
.a0b2					_ETHLoop:
.a0b2	b1 30		lda ($30),y			lda 	(codePtr),y
.a0b4	c8		iny				iny 								; and consume
.a0b5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a0b7	f0 1e		beq $a0d7			beq 	_ETHExit
.a0b9	48		pha				pha 								; save on stack.
.a0ba	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 2
.a0bd	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 4
.a0c0	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 8
.a0c3	20 e5 a5	jsr $a5e5			jsr 	NSMShiftLeft 				; x 16
.a0c6	68		pla				pla 								; ASCII
.a0c7	c9 41		cmp #$41			cmp 	#'A'
.a0c9	90 02		bcc $a0cd			bcc 	_ETHNotChar
.a0cb	e9 07		sbc #$07			sbc 	#7
.a0cd					_ETHNotChar:
.a0cd	29 0f		and #$0f			and 	#15 						; digit now
.a0cf	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0d5	80 db		bra $a0b2			bra 	_ETHLoop 					; go round.
.a0d7					_ETHExit:
.a0d7	60		rts				rts
.a0d8					_ETString:
.a0d8	c8		iny				iny 								; look at length
.a0d9	b1 30		lda ($30),y			lda 	(codePtr),y
.a0db	48		pha				pha
.a0dc	c8		iny				iny 								; first character
.a0dd	20 1a a6	jsr $a61a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0e0	68		pla				pla 								; restore count and save
.a0e1	85 36		sta $36				sta 	zTemp0
.a0e3	98		tya				tya 								; add length to Y to skip it.
.a0e4	18		clc				clc
.a0e5	65 36		adc $36				adc 	zTemp0
.a0e7	a8		tay				tay
.a0e8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a0ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0ed	60		rts				rts
.a0ee					_ETVariable:
.a0ee	4c 48 a1	jmp $a148			jmp 	VariableHandler
.a0f1					_ETPuncUnary:
.a0f1	c8		iny				iny 								; consume the unary character
.a0f2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a0f4	f0 2d		beq $a123			beq 	_ETUnaryNegate
.a0f6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a0f8	f0 39		beq $a133			beq 	_ETDereference
.a0fa	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a0fc	f0 43		beq $a141			beq 	_ETParenthesis
.a0fe	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a100	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a102	f0 06		beq $a10a			beq 	_ETIndirection
.a104	e6 36		inc $36				inc 	zTemp0
.a106	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a108	d0 a0		bne $a0aa			bne 	_ETSyntaxError
.a10a					_ETIndirection:
.a10a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a10c	1a		inc a				inc 	a
.a10d	48		pha				pha
.a10e	20 77 a0	jsr $a077			jsr 	EvaluateTerm				; evaluate the term
.a111	20 bb 9e	jsr $9ebb			jsr 	Dereference 				; dereference it.
.a114	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a117	d0 07		bne $a120			bne 	_ETTypeMismatch
.a119	68		pla				pla 								; indirection 1-2
.a11a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a11c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a11f	60		rts				rts
.a120					_ETTypeMismatch:
.a120	4c 02 b4	jmp $b402			jmp 	TypeError
.a123					_ETUnaryNegate:
.a123	20 77 a0	jsr $a077			jsr 	EvaluateTerm				; evaluate the term
.a126	20 bb 9e	jsr $9ebb			jsr 	Dereference 				; dereference it.
.a129	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a12c	29 10		and #$10			and 	#NSTString
.a12e	d0 f0		bne $a120			bne 	_ETTypeMismatch
.a130	4c 7c a5	jmp $a57c			jmp 	NSMNegate  					; just toggles the sign bit.
.a133					_ETDereference:
.a133	20 77 a0	jsr $a077			jsr 	EvaluateTerm				; evaluate the term
.a136	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a139	29 20		and #$20			and 	#NSBIsReference
.a13b	f0 e3		beq $a120			beq 	_ETTypeMismatch
.a13d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a140	60		rts				rts
.a141					_ETParenthesis:
.a141	20 a6 9d	jsr $9da6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a144	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; check for )
.a147	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a148					VariableHandler:
.a148	b1 30		lda ($30),y			lda 	(codePtr),y
.a14a	18		clc				clc
.a14b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a14d	85 37		sta $37				sta 	zTemp0+1
.a14f	c8		iny				iny
.a150	b1 30		lda ($30),y			lda 	(codePtr),y
.a152	85 36		sta $36				sta 	zTemp0
.a154	c8		iny				iny
.a155	18		clc				clc									; copy variable address+3 to mantissa
.a156	69 03		adc #$03			adc 	#3
.a158	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a15b	a5 37		lda $37				lda 	zTemp0+1
.a15d	69 00		adc #$00			adc 	#0
.a15f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a162	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a165	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a168	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a16b	5a		phy				phy
.a16c	a0 02		ldy #$02			ldy 	#2 							; read type
.a16e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a170	7a		ply				ply
.a171	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a173	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a175	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a178	29 04		and #$04			and 	#NSBIsArray
.a17a	d0 01		bne $a17d			bne 	_VHArray
.a17c	60		rts				rts
.a17d					_VHArray:
.a17d	e8		inx				inx
.a17e	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a181	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a183	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a186	b1 30		lda ($30),y			lda 	(codePtr),y
.a188	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a18a	d0 06		bne $a192			bne 	_VHNoSecondIndex
.a18c	c8		iny				iny 								; skip the comma
.a18d	e8		inx				inx
.a18e	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a191	ca		dex				dex
.a192					_VHNoSecondIndex:
.a192	ca		dex				dex 								; set X back.
.a193	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; and check the right bracket.
.a196	5a		phy				phy 								; save position
.a197	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a199	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a19b	f0 6b		beq $a208			beq 	_VHBadIndex
.a19d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a1a0	85 3e		sta $3e				sta 	zaTemp
.a1a2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1a5	85 3f		sta $3f				sta 	zaTemp+1
.a1a7	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1a9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1ab	f0 02		beq $a1af			beq 	_VHHas2Mask
.a1ad	a9 ff		lda #$ff			lda 	#$FF
.a1af					_VHHas2Mask:
.a1af	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a1b2	f0 54		beq $a208			beq 	_VHBadIndex
.a1b4	0a		asl a				asl 	a 							; carry will be set if a second index
.a1b5	90 09		bcc $a1c0			bcc 	_VHCheckFirstIndex
.a1b7	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1b9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1bb	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a1be	90 48		bcc $a208			bcc 	_VHBadIndex
.a1c0					_VHCheckFirstIndex:
.a1c0	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1c2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1c4	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a1c7	90 3f		bcc $a208			bcc 	_VHBadIndex
.a1c9	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1cb	64 37		stz $37				stz 	zTemp0+1
.a1cd	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1d0	30 0f		bmi $a1e1			bmi 	_VHNoMultiply
.a1d2	da		phx				phx
.a1d3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1d6	48		pha				pha
.a1d7	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1d9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1db	1a		inc a				inc 	a 							; add 1 for zero base
.a1dc	fa		plx				plx
.a1dd	20 94 b2	jsr $b294			jsr 	Multiply8x8 				; calculate -> Z0
.a1e0	fa		plx				plx
.a1e1					_VHNoMultiply:
.a1e1	18		clc				clc
.a1e2	a5 36		lda $36				lda 	zTemp0
.a1e4	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a1e7	85 36		sta $36				sta 	zTemp0
.a1e9	a5 37		lda $37				lda 	zTemp0+1
.a1eb	69 00		adc #$00			adc 	#0
.a1ed	85 37		sta $37				sta 	zTemp0+1
.a1ef	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1f2	20 f7 8c	jsr $8cf7			jsr 	ScaleByBaseType
.a1f5	18		clc				clc
.a1f6	b2 3e		lda ($3e)			lda 	(zaTemp)
.a1f8	65 36		adc $36				adc 	zTemp0
.a1fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fd	a0 01		ldy #$01			ldy 	#1
.a1ff	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a201	65 37		adc $37				adc 	zTemp0+1
.a203	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a206	7a		ply				ply 								; restore position
.a207	60		rts				rts
.a208					_VHBadIndex:
.a208	a9 17		lda #$17		lda	#23
.a20a	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b1ca					AbsUnary:
.b1ca	fa		plx				plx 								; restore stack pos
.b1cb	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; get a float or int
.b1ce	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b1d1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b1d4	29 7f		and #$7f			and 	#$7F
.b1d6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a20d					AllocUnary:
.a20d	fa		plx				plx 								; restore stack pos
.a20e	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger		; get bytes required.
.a211	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.a214	da		phx				phx 								; save X/Y
.a215	5a		phy				phy
.a216	8a		txa				txa 								; copy X into Y
.a217	a8		tay				tay
.a218	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a21b	aa		tax				tax
.a21c	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a21f	20 2c a2	jsr $a22c			jsr 	AllocateXABytes 			; allocate memory
.a222	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a225	8a		txa				txa
.a226	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a229	7a		ply				ply
.a22a	fa		plx				plx
.a22b	60		rts				rts
.a22c					AllocateXABytes:
.a22c	5a		phy				phy
.a22d	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a230	84 36		sty $36				sty 	zTemp0
.a232	5a		phy				phy
.a233	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a236	84 37		sty $37				sty 	zTemp0+1
.a238	5a		phy				phy
.a239	18		clc				clc 								; add to low memory pointer
.a23a	6d 8c 04	adc $048c			adc 	lowMemPtr
.a23d	8d 8c 04	sta $048c			sta 	lowMemPtr
.a240	8a		txa				txa
.a241	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a244	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a247	b0 2f		bcs $a278			bcs 	CISSMemory
.a249	20 6a a2	jsr $a26a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a24c					_ClearMemory:
.a24c	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a24f	c5 36		cmp $36				cmp 	zTemp0
.a251	d0 07		bne $a25a			bne 	_CMClearNext
.a253	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a256	c5 37		cmp $37				cmp 	zTemp0+1
.a258	f0 0c		beq $a266			beq 	_CMExit
.a25a					_CMClearNext:
.a25a	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a25c	92 36		sta ($36)			sta 	(zTemp0)
.a25e	e6 36		inc $36				inc 	zTemp0
.a260	d0 ea		bne $a24c			bne 	_ClearMemory
.a262	e6 37		inc $37				inc		zTemp0+1
.a264	80 e6		bra $a24c			bra 	_ClearMemory
.a266					_CMExit:
.a266	fa		plx				plx
.a267	68		pla				pla
.a268	7a		ply				ply
.a269	60		rts				rts
.a26a					CheckIdentifierStringSpace:
.a26a	48		pha				pha
.a26b	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a26e	18		clc				clc
.a26f	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a271	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a274	b0 02		bcs $a278			bcs 	CISSMemory
.a276	68		pla				pla
.a277	60		rts				rts
.a278					CISSMemory:
.a278	a9 06		lda #$06		lda	#6
.a27a	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b1da					AscUnary:
.b1da	fa		plx				plx 								; restore stack pos
.b1db	20 1b a5	jsr $a51b			jsr 	EvaluateString 				; get a string
.b1de	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b1e0	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.b1e3	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b1e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b1e7					FracUnary:
.b1e7	fa		plx				plx 								; restore stack pos
.b1e8	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; get a float or int
.b1eb	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b1ee	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b1f1	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b1f3	f0 04		beq $b1f9			beq 	_IUZero
.b1f5	20 b7 b0	jsr $b0b7			jsr 	FloatFractionalPart
.b1f8	60		rts				rts
.b1f9					_IUZero:
.b1f9	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.b1fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b1fd					IntUnary:
.b1fd	fa		plx				plx 								; restore stack pos
.b1fe	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; get a float or int
.b201	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b204	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b207	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b209	f0 03		beq $b20e			beq 	_IUExit
.b20b	20 1a b1	jsr $b11a			jsr 	FloatIntegerPart
.b20e					_IUExit:
.b20e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b20f					LenUnary:
.b20f	fa		plx				plx 								; restore stack pos
.b210	20 1b a5	jsr $a51b			jsr 	EvaluateString 				; get a string
.b213	5a		phy				phy
.b214	a0 00		ldy #$00			ldy 	#0 							; find length
.b216					_LenFind:
.b216	b1 36		lda ($36),y			lda 	(zTemp0),y
.b218	f0 06		beq $b220			beq 	_LenExit
.b21a	c8		iny				iny
.b21b	d0 f9		bne $b216			bne 	_LenFind
.b21d	4c fd b3	jmp $b3fd			jmp 	RangeError 					; string > 255
.b220					_LenExit:
.b220	98		tya				tya
.b221	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.b224	7a		ply				ply
.b225	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b228	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a27d					Unary_Min:
.a27d	a9 01		lda #$01			lda 	#1
.a27f	80 02		bra $a283			bra 	UnaryMinMaxMain
.a281					Unary_Max:
.a281	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a283					UnaryMinMaxMain:
.a283	fa		plx				plx 								; get index on number stack
.a284	48		pha				pha 								; save comparator
.a285	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; get the first value.
.a288					_UMMMLoop:
.a288	b1 30		lda ($30),y			lda 	(codePtr),y
.a28a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a28c	f0 22		beq $a2b0			beq 	_UMMMDone
.a28e	20 12 ae	jsr $ae12			jsr 	CheckComma 					; must be a comma
.a291	e8		inx				inx
.a292	20 07 a5	jsr $a507			jsr 	EvaluateValue
.a295	ca		dex				dex
.a296	20 a7 a5	jsr $a5a7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a299	e8		inx				inx
.a29a	20 a7 a5	jsr $a5a7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a29d	e8		inx				inx
.a29e	20 4d 9a	jsr $9a4d			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a2a1	ca		dex				dex
.a2a2	ca		dex				dex
.a2a3	85 36		sta $36				sta 	zTemp0 						; save required result
.a2a5	68		pla				pla 								; get and save comparator
.a2a6	48		pha				pha
.a2a7	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a2a9	d0 dd		bne $a288			bne 	_UMMMLoop
.a2ab	20 b3 a2	jsr $a2b3			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a2ae	80 d8		bra $a288			bra 	_UMMMLoop
.a2b0					_UMMMDone:
.a2b0	68		pla				pla 								; throw the comparator
.a2b1	c8		iny				iny 								; skip )
.a2b2	60		rts				rts
.a2b3					ExpCopyAboveDown:
.a2b3	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a2b6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2b9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a2bc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a2bf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a2c2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2c5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a2c8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2cb	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a2ce	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2d1	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a2d4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a2d8					Unary_Not:
.a2d8	fa		plx				plx
.a2d9	20 33 a5	jsr $a533			jsr 	EvaluateInteger 			; get integer
.a2dc	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.a2df	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; zero mantissa ?
.a2e2	f0 04		beq $a2e8			beq 	_NotZero
.a2e4	20 d0 a5	jsr $a5d0			jsr 	NSMSetZero
.a2e7	60		rts				rts
.a2e8					_NotZero:
.a2e8	4c 02 9a	jmp $9a02			jmp 	ReturnTrue
.a2eb					_UNBad:
.a2eb	4c 07 b4	jmp $b407			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a2ee					Unary_Random:
.a2ee	fa		plx				plx
.a2ef	20 6d a3	jsr $a36d			jsr 	Random32Bit 				; get a random number
.a2f2	20 52 a3	jsr $a352			jsr 	URCopyToMantissa  			; put in mantissa
.a2f5	b1 30		lda ($30),y			lda 	(codePtr),y
.a2f7	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a2f9	f0 08		beq $a303			beq 	_URNoModulus
.a2fb	e8		inx				inx
.a2fc	20 48 a5	jsr $a548			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a2ff	ca		dex				dex
.a300	20 8e ae	jsr $ae8e			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a303					_URNoModulus:
.a303	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a306	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a309	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.a30c	60		rts				rts
.a30d					Unary_Rnd:
.a30d	fa		plx				plx
.a30e	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; number to use.
.a311	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; closing bracket
.a314	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a317	f0 2b		beq $a344			beq 	_URCopySeed
.a319	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a31c	10 23		bpl $a341			bpl 	_URDontSeed
.a31e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a321	49 17		eor #$17			eor 	#$17
.a323	8d 88 04	sta $0488			sta 	RandomSeed+0
.a326	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a329	49 a5		eor #$a5			eor 	#$A5
.a32b	8d 89 04	sta $0489			sta 	RandomSeed+1
.a32e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a331	49 c2		eor #$c2			eor 	#$C2
.a333	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a336	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a339	49 9d		eor #$9d			eor 	#$9D
.a33b	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a33e	20 6d a3	jsr $a36d			jsr 	Random32Bit
.a341					_URDontSeed:
.a341	20 6d a3	jsr $a36d			jsr 	Random32Bit 				; generate a number.
.a344					_URCopySeed:
.a344	20 52 a3	jsr $a352			jsr 	URCopyToMantissa 			; copy into mantissa
.a347	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a349	8d 28 04	sta $0428			sta 	NSExponent
.a34c	a9 08		lda #$08			lda 	#NSTFloat
.a34e	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a351	60		rts				rts
.a352					URCopyToMantissa:
.a352	ad 88 04	lda $0488			lda 	RandomSeed+0
.a355	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a358	ad 89 04	lda $0489			lda 	RandomSeed+1
.a35b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a35e	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a361	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a364	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a367	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a369	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a36c	60		rts				rts
.a36d					Random32Bit:
.a36d	5a		phy				phy
.a36e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a370	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a373	d0 03		bne $a378			bne 	_Random1
.a375	a8		tay				tay 								; if so do it 256 times
.a376	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a378					_Random1:
.a378	0a		asl a				asl 	a 							; LSFR RNG
.a379	2e 89 04	rol $0489			rol 	RandomSeed+1
.a37c	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a37f	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a382	90 02		bcc $a386			bcc 	_Random2
.a384	49 c5		eor #$c5			eor 	#$C5
.a386					_Random2:
.a386	88		dey				dey
.a387	d0 ef		bne $a378			bne 	_Random1
.a389	8d 88 04	sta $0488			sta 	RandomSeed+0
.a38c	7a		ply				ply
.a38d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b229					SgnUnary:
.b229	fa		plx				plx 								; restore stack pos
.b22a	20 10 a5	jsr $a510			jsr 	EvaluateNumber 				; get a float or int
.b22d	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.b230	20 00 a6	jsr $a600			jsr 	NSMIsZero 					; if zero
.b233	f0 10		beq $b245			beq 	_SGZero  					; return Int Zero
.b235	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b238	48		pha				pha
.b239	a9 01		lda #$01			lda 	#1 							; set to 1
.b23b	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.b23e	68		pla				pla
.b23f	29 80		and #$80			and		#$80 						; copy the sign byte out
.b241	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b244	60		rts				rts
.b245	20 d0 a5	jsr $a5d0	_SGZero:jsr 	NSMSetZero
.b248	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b249					ValUnary:
.b249	fa		plx				plx 								; restore stack pos
.b24a	20 5f b2	jsr $b25f			jsr 	ValMainCode 				; do the main val() code
.b24d	b0 01		bcs $b250			bcs 	_VUError 					; couldn't convert
.b24f	60		rts				rts
.b250					_VUError:
.b250	4c 02 b4	jmp $b402			jmp 	TypeError
.b253					IsValUnary:
.b253	fa		plx				plx 								; restore stack pos
.b254	20 5f b2	jsr $b25f			jsr 	ValMainCode 				; do the main val() code
.b257	b0 03		bcs $b25c			bcs 	_VUBad
.b259	4c 02 9a	jmp $9a02			jmp 	ReturnTrue
.b25c					_VUBad:
.b25c	4c 0e 9a	jmp $9a0e			jmp 	ReturnFalse
.b25f					ValMainCode:
.b25f	20 1b a5	jsr $a51b			jsr 	EvaluateString 				; get a string
.b262	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; check right bracket present
.b265	5a		phy				phy
.b266	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b268	f0 17		beq $b281			beq 	_VMCFail2
.b26a	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b26c	48		pha				pha 								; save first character
.b26d	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b26f	d0 01		bne $b272			bne 	_VMCStart
.b271	c8		iny				iny 								; skip over -
.b272					_VMCStart:
.b272	38		sec				sec 								; initialise first time round.
.b273					_VMCNext:
.b273	c8		iny				iny 								; pre-increment
.b274	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b276	f0 0c		beq $b284			beq 	_VMCSuccess 				; successful.
.b278	20 59 9f	jsr $9f59			jsr 	EncodeNumber 				; send it to the number-builder
.b27b	90 03		bcc $b280			bcc 	_VMCFail 					; if failed, give up.
.b27d	18		clc				clc 								; next time round, countinue
.b27e	80 f3		bra $b273			bra 	_VMCNext
.b280					_VMCFail:
.b280	68		pla				pla
.b281					_VMCFail2:
.b281	7a		ply				ply
.b282	38		sec				sec
.b283	60		rts				rts
.b284					_VMCSuccess:
.b284	a9 00		lda #$00			lda 	#0 							; construct final
.b286	20 59 9f	jsr $9f59			jsr 	EncodeNumber
.b289	68		pla				pla
.b28a	c9 2d		cmp #$2d			cmp 	#"-"
.b28c	d0 03		bne $b291			bne 	_VMCNotNegative
.b28e	20 7c a5	jsr $a57c			jsr		NSMNegate
.b291					_VMCNotNegative:
.b291	7a		ply				ply
.b292	18		clc				clc
.b293	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a38e					ChrUnary:
.a38e	fa		plx				plx 								; restore stack pos
.a38f	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger			; get value
.a392	48		pha				pha
.a393	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.a396	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a398	20 79 b7	jsr $b779			jsr 	StringTempAllocate
.a39b	68		pla				pla 								; write number to it
.a39c	20 b7 b7	jsr $b7b7			jsr 	StringTempWrite
.a39f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a3a0					SpcUnary:
.a3a0	fa		plx				plx 								; restore stack pos
.a3a1	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger			; get value
.a3a4	5a		phy				phy
.a3a5	48		pha				pha 								; save count
.a3a6	20 79 b7	jsr $b779			jsr 	StringTempAllocate
.a3a9	7a		ply				ply 								; to do count in Y
.a3aa					_SpcLoop:
.a3aa	c0 00		cpy #$00			cpy 	#0
.a3ac	f0 08		beq $a3b6			beq 	_SpcExit
.a3ae	a9 20		lda #$20			lda 	#32
.a3b0	20 b7 b7	jsr $b7b7			jsr 	StringTempWrite
.a3b3	88		dey				dey
.a3b4	80 f4		bra $a3aa			bra 	_SPCLoop
.a3b6					_SpcExit:
.a3b6	7a		ply				ply
.a3b7	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket
.a3ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3bb					Unary_Str:
.a3bb	fa		plx				plx
.a3bc	20 10 a5	jsr $a510			jsr 	EvaluateNumber  			; get number
.a3bf	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; closing bracket
.a3c2	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a3c4	20 dd a3	jsr $a3dd			jsr 	ConvertNumberToString 		; do the conversion.
.a3c7	a9 21		lda #$21			lda		#33 						; create buffer
.a3c9	20 79 b7	jsr $b779			jsr 	StringTempAllocate 			; allocate memory
.a3cc	da		phx				phx
.a3cd	a2 00		ldx #$00			ldx 	#0
.a3cf					_USCopy:
.a3cf	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3d2	20 b7 b7	jsr $b7b7			jsr 	StringTempWrite
.a3d5	e8		inx				inx
.a3d6	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3d9	d0 f4		bne $a3cf			bne 	_USCopy
.a3db	fa		plx				plx
.a3dc	60		rts				rts
.a3dd					ConvertNumberToString:
.a3dd	5a		phy				phy 								; save code position
.a3de	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a3e1	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a3e4	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a3e7	10 0a		bpl $a3f3			bpl 	_CNTSNotNegative
.a3e9	29 7f		and #$7f			and 	#$7F 						; make +ve
.a3eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3ee	a9 2d		lda #$2d			lda 	#"-"
.a3f0	20 59 a4	jsr $a459			jsr 	WriteDecimalBuffer
.a3f3					_CNTSNotNegative:
.a3f3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a3f6	f0 15		beq $a40d			beq 	_CNTSNotFloat
.a3f8	e8		inx				inx 								; round up
.a3f9	a9 01		lda #$01			lda 	#1
.a3fb	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.a3fe	ca		dex				dex
.a3ff	bd 28 04	lda $0428,x			lda		NSExponent,x
.a402	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a405	a9 08		lda #$08			lda 	#NSTFloat
.a407	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a40a	20 d1 af	jsr $afd1			jsr 	FloatAdd
.a40d					_CNTSNotFloat:
.a40d	20 3b a4	jsr $a43b			jsr 	MakePlusTwoString
.a410	20 b7 b0	jsr $b0b7			jsr 	FloatFractionalPart 		; get the fractional part
.a413	20 7b b1	jsr $b17b			jsr 	NSNormalise					; normalise , exit if zero
.a416	f0 21		beq $a439			beq 	_CNTSExit
.a418	a9 2e		lda #$2e			lda 	#"."
.a41a	20 59 a4	jsr $a459			jsr 	WriteDecimalBuffer 			; write decimal place
.a41d					_CNTSDecimal:
.a41d	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a420	30 17		bmi $a439			bmi 	_CNTSExit
.a422	e8		inx				inx 								; x 10.0
.a423	a9 0a		lda #$0a			lda 	#10
.a425	20 d2 a5	jsr $a5d2			jsr 	NSMSetByte
.a428	a9 08		lda #$08			lda 	#NSTFloat
.a42a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a42d	ca		dex				dex
.a42e	20 44 b1	jsr $b144			jsr 	FloatMultiply
.a431	20 3b a4	jsr $a43b			jsr 	MakePlusTwoString
.a434	20 b7 b0	jsr $b0b7			jsr 	FloatFractionalPart 		; get the fractional part
.a437	80 e4		bra $a41d			bra 	_CNTSDecimal 				; keep going.
.a439					_CNTSExit:
.a439	7a		ply				ply
.a43a	60		rts				rts
.a43b					MakePlusTwoString:
.a43b	da		phx				phx
.a43c	20 a7 a5	jsr $a5a7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a43f	e8		inx				inx 								; access it
.a440	e8		inx				inx
.a441	20 1a b1	jsr $b11a			jsr 	FloatIntegerPart 			; make it an integer
.a444	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a446	20 7b af	jsr $af7b			jsr 	ConvertInt32
.a449	a2 00		ldx #$00			ldx	 	#0
.a44b					_MPTSCopy:
.a44b	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a44e	20 59 a4	jsr $a459			jsr 	WriteDecimalBuffer
.a451	e8		inx				inx
.a452	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a455	d0 f4		bne $a44b			bne 	_MPTSCopy
.a457	fa		plx				plx
.a458	60		rts				rts
.a459					WriteDecimalBuffer:
.a459	da		phx				phx
.a45a	ae 95 04	ldx $0495			ldx 	dbOffset
.a45d	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a460	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a463	ee 95 04	inc $0495			inc 	dbOffset
.a466	fa		plx				plx
.a467	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a468					Unary_Left:
.a468	fa		plx				plx
.a469	18		clc				clc 								; only one parameter
.a46a	20 df a4	jsr $a4df			jsr 	SubstringInitial 			; set up.
.a46d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a470	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a473	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a476	80 2c		bra $a4a4			bra 	SubstringMain
.a478					Unary_Right:
.a478	fa		plx				plx
.a479	18		clc				clc 								; only one parameter
.a47a	20 df a4	jsr $a4df			jsr 	SubstringInitial 			; set up.
.a47d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a480	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a483	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a486	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a489	b0 02		bcs $a48d			bcs 	_URNotUnderflow
.a48b	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a48d					_URNotUnderFlow:
.a48d	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a490	80 12		bra $a4a4			bra 	SubStringMain
.a492					Unary_Mid:
.a492	fa		plx				plx
.a493	38		sec				sec 								; two parameters
.a494	20 df a4	jsr $a4df			jsr 	SubstringInitial 			; set up.
.a497	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a49a	f0 05		beq $a4a1			beq 	_UMError
.a49c	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a49f	80 03		bra $a4a4			bra 	SubStringMain
.a4a1					_UMError:
.a4a1	4c 07 b4	jmp $b407			jmp 	ArgumentError
.a4a4					SubStringMain:
.a4a4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a4a7	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a4aa	b0 2d		bcs $a4d9			bcs 	_SSMNull 					; if so, return an empty string.
.a4ac	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a4af	f0 28		beq $a4d9			beq 	_SSMNull 					; return empty string.
.a4b1	18		clc				clc 								; add the offset +1 to the address and
.a4b2	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a4b5	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a4b8	85 36		sta $36				sta 	zTemp0
.a4ba	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a4bd	69 00		adc #$00			adc 	#0
.a4bf	85 37		sta $37				sta 	zTemp0+1
.a4c1					_SSMNoCarry:
.a4c1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a4c4	20 79 b7	jsr $b779			jsr 	StringTempAllocate 			; allocate that many characters
.a4c7	5a		phy				phy 								; save Y
.a4c8	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a4ca					_SSMCopy:
.a4ca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a4cc	f0 09		beq $a4d7			beq 	_SSMEString 				; no more to copy
.a4ce	20 b7 b7	jsr $b7b7			jsr 	StringTempWrite 			; and write it out.
.a4d1	c8		iny				iny
.a4d2	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a4d5	d0 f3		bne $a4ca			bne 	_SSMCopy
.a4d7					_SSMEString:
.a4d7	7a		ply				ply
.a4d8					_SSMExit:
.a4d8	60		rts				rts
.a4d9					_SSMNull:
.a4d9	a9 00		lda #$00			lda 	#0
.a4db	20 79 b7	jsr $b779			jsr 	StringTempAllocate
.a4de	60		rts				rts
.a4df					SubstringInitial:
.a4df	da		phx				phx 								; save initial stack position
.a4e0	08		php				php 								; save carry on stack indicating 2 parameters
.a4e1	20 1b a5	jsr $a51b			jsr 	EvaluateString 				; get a string
.a4e4	5a		phy				phy 								; calculate length to exponent.
.a4e5	a0 ff		ldy #$ff			ldy 	#$FF
.a4e7					_SIFindLength:
.a4e7	c8		iny				iny
.a4e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a4ea	d0 fb		bne $a4e7			bne 	_SIFindLength
.a4ec	98		tya				tya
.a4ed	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4f0	7a		ply				ply
.a4f1	e8		inx				inx
.a4f2	20 12 ae	jsr $ae12			jsr 	CheckComma 					; comma next
.a4f5	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get next parameter
.a4f8	28		plp				plp 								; is it the last parameter ?
.a4f9	90 07		bcc $a502			bcc 	_SSIExit 					; if so, exit.
.a4fb	e8		inx				inx
.a4fc	20 12 ae	jsr $ae12			jsr 	CheckComma 					; comma next
.a4ff	20 68 a5	jsr $a568			jsr 	Evaluate8BitInteger 		; get last parameter
.a502					_SSIExit:
.a502	fa		plx				plx
.a503	20 0a ae	jsr $ae0a			jsr 	CheckRightBracket 			; check closing bracket
.a506	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a507					EvaluateValue:
.a507	48		pha				pha
.a508	20 a6 9d	jsr $9da6			jsr		EvaluateExpression 			; expression
.a50b	20 bb 9e	jsr $9ebb			jsr 	Dereference					; derefernce it
.a50e	68		pla				pla
.a50f	60		rts				rts
.a510					EvaluateNumber:
.a510	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; get a value
.a513	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a516	29 10		and #$10			and 	#NSBIsString
.a518	d0 16		bne $a530			bne 	HelperTypeError
.a51a	60		rts				rts
.a51b					EvaluateString:
.a51b	20 07 a5	jsr $a507			jsr 	EvaluateValue 				; get a value
.a51e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a521	29 10		and #$10			and 	#NSBIsString
.a523	f0 0b		beq $a530			beq 	HelperTypeError
.a525					CopyAddressToTemp0:
.a525	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a528	85 36		sta $36				sta 	zTemp0
.a52a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a52d	85 37		sta $37				sta 	zTemp0+1
.a52f	60		rts				rts
.a530					HelperTypeError:
.a530	4c 02 b4	jmp $b402			jmp 	TypeError
.a533					EvaluateInteger:
.a533	20 10 a5	jsr $a510			jsr 	EvaluateNumber
.a536	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a539	d0 0a		bne $a545			bne 	HelperValueError 			; if not, it's a float.
.a53b	60		rts				rts
.a53c					EvaluateUnsignedInteger:
.a53c	20 33 a5	jsr $a533			jsr 	EvaluateInteger 			; check integer is +ve
.a53f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a542	30 01		bmi $a545			bmi 	HelperValueError
.a544	60		rts				rts
.a545					HelperValueError:
.a545	4c 07 b4	jmp $b407			jmp 	ArgumentError
.a548					Evaluate16BitInteger:
.a548	20 3c a5	jsr $a53c			jsr	 	EvaluateUnsignedInteger		; get integer
.a54b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a54e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a551	d0 f2		bne $a545			bne 	HelperValueError
.a553	60		rts				rts
.a554					Evaluate16BitIntegerSigned:
.a554	20 33 a5	jsr $a533			jsr	 	EvaluateInteger				; get integer
.a557	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a55a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a55d	d0 e6		bne $a545			bne 	HelperValueError
.a55f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a562	10 03		bpl $a567			bpl 	_EISNotSigned
.a564	20 85 a5	jsr $a585			jsr 	NSMNegateMantissa
.a567					_EISNotSigned:
.a567	60		rts				rts
.a568					Evaluate8BitInteger:
.a568	20 3c a5	jsr $a53c			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a56b	d0 d8		bne $a545			bne 	HelperValueError
.a56d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a570	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a573	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a576	d0 cd		bne $a545			bne 	HelperValueError
.a578	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a57b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b294					Multiply8x8:
.b294	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b295	85 36		sta $36			  	sta 	zTemp0
.b297	86 37		stx $37				stx 	zTemp0+1
.b299	a9 00		lda #$00			lda 	#0
.b29b	a2 08		ldx #$08			ldx 	#8
.b29d					_M88Loop:
.b29d	90 03		bcc $b2a2			bcc 	_M88NoAdd
.b29f	18		clc				clc
.b2a0	65 37		adc $37				adc 	zTemp0+1
.b2a2					_M88NoAdd:
.b2a2	6a		ror a				ror 	a
.b2a3	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b2a5	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b2a6	d0 f5		bne $b29d			bne 	_M88Loop
.b2a8	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b2aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a57c					NSMNegate:
.a57c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a57f	49 80		eor #$80			eor 	#NSBIsNegative
.a581	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a584	60		rts				rts
.a585					NSMNegateMantissa:
.a585	38		sec				sec
.a586	a9 00		lda #$00			lda 	#0
.a588	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a58b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a58e	a9 00		lda #$00			lda 	#0
.a590	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a593	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a596	a9 00		lda #$00			lda 	#0
.a598	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a59b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a59e	a9 00		lda #$00			lda 	#0
.a5a0	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a5a3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5a6	60		rts				rts
.a5a7					NSMShiftUpTwo:
.a5a7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5aa	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5ad	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a5b0	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a5b3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a5b6	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a5b9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a5bc	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a5bf	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a5c2	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a5c5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5c8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a5cb	60		rts				rts
.a5cc					NSMSetZeroMantissaOnly:
.a5cc	a9 00		lda #$00			lda 	#0
.a5ce	80 08		bra $a5d8			bra 	NSMSetMantissa
.a5d0					NSMSetZero:
.a5d0	a9 00		lda #$00			lda 	#0
.a5d2					NSMSetByte:
.a5d2	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a5d5	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a5d8					NSMSetMantissa:
.a5d8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a5db	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a5de	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a5e1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5e4	60		rts				rts
.a5e5					NSMShiftLeft:
.a5e5	18		clc				clc
.a5e6					NSMRotateLeft:
.a5e6	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a5e9	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a5ec	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a5ef	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a5f2	60		rts				rts
.a5f3					NSMShiftRight:
.a5f3	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a5f6	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a5f9	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a5fc	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a5ff	60		rts				rts
.a600					NSMIsZero:
.a600	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a603	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a606	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a609	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a60c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b2ab					Assemble_ora:
.b2ab	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2ae	01					.byte $01
.b2af					Assemble_and:
.b2af	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2b2	21					.byte $21
.b2b3					Assemble_eor:
.b2b3	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2b6	41					.byte $41
.b2b7					Assemble_adc:
.b2b7	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2ba	61					.byte $61
.b2bb					Assemble_sta:
.b2bb	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2be	81					.byte $81
.b2bf					Assemble_lda:
.b2bf	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2c2	a1					.byte $a1
.b2c3					Assemble_cmp:
.b2c3	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2c6	c1					.byte $c1
.b2c7					Assemble_sbc:
.b2c7	20 f0 88	jsr $88f0		jsr	AssembleGroup1
>b2ca	e1					.byte $e1
.b2cb					Assemble_asl:
.b2cb	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2ce	02					.byte $02
>b2cf	75					.byte $75
.b2d0					Assemble_rol:
.b2d0	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2d3	22					.byte $22
>b2d4	75					.byte $75
.b2d5					Assemble_lsr:
.b2d5	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2d8	42					.byte $42
>b2d9	75					.byte $75
.b2da					Assemble_ror:
.b2da	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2dd	62					.byte $62
>b2de	75					.byte $75
.b2df					Assemble_stx:
.b2df	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2e2	82					.byte $82
>b2e3	50					.byte $50
.b2e4					Assemble_ldx:
.b2e4	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2e7	a2					.byte $a2
>b2e8	d0					.byte $d0
.b2e9					Assemble_dec:
.b2e9	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2ec	c2					.byte $c2
>b2ed	55					.byte $55
.b2ee					Assemble_inc:
.b2ee	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2f1	e2					.byte $e2
>b2f2	55					.byte $55
.b2f3					Assemble_stz:
.b2f3	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2f6	60					.byte $60
>b2f7	44					.byte $44
.b2f8					Assemble_bit:
.b2f8	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b2fb	20					.byte $20
>b2fc	55					.byte $55
.b2fd					Assemble_sty:
.b2fd	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b300	80					.byte $80
>b301	54					.byte $54
.b302					Assemble_ldy:
.b302	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b305	a0					.byte $a0
>b306	d5					.byte $d5
.b307					Assemble_cpy:
.b307	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b30a	c0					.byte $c0
>b30b	d4					.byte $d4
.b30c					Assemble_cpx:
.b30c	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b30f	e0					.byte $e0
>b310	d0					.byte $d0
.b311					Assemble_tsb:
.b311	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b314	00					.byte $00
>b315	50					.byte $50
.b316					Assemble_trb:
.b316	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b319	10					.byte $10
>b31a	50					.byte $50
.b31b					Assemble_jsr:
.b31b	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b31e	14					.byte $14
>b31f	10					.byte $10
.b320					Assemble_jmp:
.b320	20 f7 88	jsr $88f7		jsr	AssembleGroup2
>b323	40					.byte $40
>b324	10					.byte $10
.b325					Assemble_bpl:
.b325	20 48 89	jsr $8948		jsr	AssembleGroup3
>b328	10					.byte $10
.b329					Assemble_bmi:
.b329	20 48 89	jsr $8948		jsr	AssembleGroup3
>b32c	30					.byte $30
.b32d					Assemble_bvc:
.b32d	20 48 89	jsr $8948		jsr	AssembleGroup3
>b330	50					.byte $50
.b331					Assemble_bvs:
.b331	20 48 89	jsr $8948		jsr	AssembleGroup3
>b334	70					.byte $70
.b335					Assemble_bcc:
.b335	20 48 89	jsr $8948		jsr	AssembleGroup3
>b338	90					.byte $90
.b339					Assemble_bcs:
.b339	20 48 89	jsr $8948		jsr	AssembleGroup3
>b33c	b0					.byte $b0
.b33d					Assemble_bne:
.b33d	20 48 89	jsr $8948		jsr	AssembleGroup3
>b340	d0					.byte $d0
.b341					Assemble_beq:
.b341	20 48 89	jsr $8948		jsr	AssembleGroup3
>b344	f0					.byte $f0
.b345					Assemble_bra:
.b345	20 48 89	jsr $8948		jsr	AssembleGroup3
>b348	80					.byte $80
.b349					Assemble_brk:
.b349	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b34c	00					.byte $00
.b34d					Assemble_php:
.b34d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b350	08					.byte $08
.b351					Assemble_clc:
.b351	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b354	18					.byte $18
.b355					Assemble_plp:
.b355	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b358	28					.byte $28
.b359					Assemble_sec:
.b359	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b35c	38					.byte $38
.b35d					Assemble_rti:
.b35d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b360	40					.byte $40
.b361					Assemble_pha:
.b361	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b364	48					.byte $48
.b365					Assemble_cli:
.b365	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b368	58					.byte $58
.b369					Assemble_phy:
.b369	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b36c	5a					.byte $5a
.b36d					Assemble_rts:
.b36d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b370	60					.byte $60
.b371					Assemble_pla:
.b371	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b374	68					.byte $68
.b375					Assemble_sei:
.b375	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b378	78					.byte $78
.b379					Assemble_ply:
.b379	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b37c	7a					.byte $7a
.b37d					Assemble_dey:
.b37d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b380	88					.byte $88
.b381					Assemble_txa:
.b381	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b384	8a					.byte $8a
.b385					Assemble_tya:
.b385	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b388	98					.byte $98
.b389					Assemble_txs:
.b389	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b38c	9a					.byte $9a
.b38d					Assemble_tay:
.b38d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b390	a8					.byte $a8
.b391					Assemble_tax:
.b391	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b394	aa					.byte $aa
.b395					Assemble_clv:
.b395	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b398	b8					.byte $b8
.b399					Assemble_tsx:
.b399	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b39c	ba					.byte $ba
.b39d					Assemble_iny:
.b39d	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3a0	c8					.byte $c8
.b3a1					Assemble_dex:
.b3a1	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3a4	ca					.byte $ca
.b3a5					Assemble_cld:
.b3a5	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3a8	d8					.byte $d8
.b3a9					Assemble_phx:
.b3a9	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3ac	da					.byte $da
.b3ad					Assemble_stp:
.b3ad	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3b0	db					.byte $db
.b3b1					Assemble_inx:
.b3b1	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3b4	e8					.byte $e8
.b3b5					Assemble_nop:
.b3b5	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3b8	ea					.byte $ea
.b3b9					Assemble_sed:
.b3b9	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3bc	f8					.byte $f8
.b3bd					Assemble_plx:
.b3bd	20 7e 89	jsr $897e		jsr	AssembleGroup4
>b3c0	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b3c1					DecimalScalarTable:
>b3c1	66 66 66 66				.dword $66666666 ; 0.1
>b3c5	de					.byte $de
>b3c6	1f 85 eb 51				.dword $51eb851f ; 0.01
>b3ca	db					.byte $db
>b3cb	4c 37 89 41				.dword $4189374c ; 0.001
>b3cf	d8					.byte $d8
>b3d0	ac 8b db 68				.dword $68db8bac ; 0.0001
>b3d4	d4					.byte $d4
>b3d5	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b3d9	d1					.byte $d1
>b3da	83 de 1b 43				.dword $431bde83 ; 1e-06
>b3de	ce					.byte $ce
>b3df	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b3e3	ca					.byte $ca
>b3e4	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b3e8	c7					.byte $c7
>b3e9	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b3ed	c4					.byte $c4
>b3ee	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b3f2	c0					.byte $c0
>b3f3	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b3f7	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b3f8					SyntaxError:
.b3f8	a9 02		lda #$02		lda	#2
.b3fa	4c 95 99	jmp $9995		jmp	ErrorHandler
.b3fd					RangeError:
.b3fd	a9 04		lda #$04		lda	#4
.b3ff	4c 95 99	jmp $9995		jmp	ErrorHandler
.b402					TypeError:
.b402	a9 05		lda #$05		lda	#5
.b404	4c 95 99	jmp $9995		jmp	ErrorHandler
.b407					ArgumentError:
.b407	a9 07		lda #$07		lda	#7
.b409	4c 95 99	jmp $9995		jmp	ErrorHandler
.b40c					NotDoneError:
.b40c	a9 0c		lda #$0c		lda	#12
.b40e	4c 95 99	jmp $9995		jmp	ErrorHandler
.b411					ErrorText:
>b411	42 72 65 61 6b 00			.text	"Break",0
>b417	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b41f	72 72 6f 72 00
>b424	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b42c	20 62 79 20 7a 65 72 6f 00
>b435	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b43d	61 6e 67 65 00
>b442	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b44a	6d 61 74 63 68 00
>b450	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b458	65 6d 6f 72 79 00
>b45e	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b466	61 72 67 75 6d 65 6e 74 00
>b46f	53 74 6f 70 00				.text	"Stop",0
>b474	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b47c	6f 6f 20 6c 6f 6e 67 00
>b484	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b48c	6e 20 66 61 69 6c 65 64 00
>b495	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b49d	61 74 61 00
>b4a1	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b4a9	65 6e 74 65 64 00
>b4af	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b4b7	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b4c3	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b4cb	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b4d8	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b4e0	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b4ed	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b4f5	68 6f 75 74 20 57 68 69 6c 65 00
>b500	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b508	68 6f 75 74 20 46 6f 72 00
>b511	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b519	61 63 6b 20 66 75 6c 6c 00
>b522	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b52a	75 63 74 75 72 65 00
>b531	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b539	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b546	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b54e	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b55c	41 72 72 61 79 20 73 69			.text	"Array size",0
>b564	7a 65 00
>b567	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b56f	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b577	42 75 69 6c 74 20 46 72			.text "Built Friday 28-Oct-2022. Build 2382."
>b57f	69 64 61 79 20 32 38 2d 4f 63 74 2d 32 30 32 32
>b58f	2e 20 42 75 69 6c 64 20 32 33 38 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b59c					EXTInitialise:
.b59c	64 01		stz $01				stz 	1 							; Access I/O
.b59e	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b5a1	9c 08 d0	stz $d008			stz 	$D008
.b5a4	9c 09 d0	stz $d009			stz 	$D009
.b5a7	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b5a9	8d 58 d6	sta $d658			sta 	$D658
.b5ac	60		rts				rts
.b5ad					EXTClearScreen:
.b5ad	4c ea ff	jmp $ffea			jmp 	$FFEA
.b5b0					EXTPrintCharacter:
.b5b0	48		pha				pha
.b5b1	da		phx				phx
.b5b2	5a		phy				phy
.b5b3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b5b6	7a		ply				ply
.b5b7	fa		plx				plx
.b5b8	68		pla				pla
.b5b9	60		rts				rts
.b5ba					EXTInputSingleCharacter:
.b5ba	da		phx				phx
.b5bb	5a		phy				phy
.b5bc					_EISCWait:
.b5bc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b5bf	c9 00		cmp #$00			cmp 	#0
.b5c1	f0 f9		beq $b5bc			beq 	_EISCWait
.b5c3	7a		ply				ply
.b5c4	fa		plx				plx
.b5c5	60		rts				rts
.b5c6					EXTInputLine:
.b5c6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b5c8					_ILLoop:
.b5c8	da		phx				phx 								; read character in
.b5c9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b5cc	fa		plx				plx
.b5cd	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b5cf	f0 12		beq $b5e3			beq 	_ILBackspace
.b5d1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b5d3	f0 15		beq $b5ea			beq 	_ILExit
.b5d5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b5d7	90 ef		bcc $b5c8			bcc 	_ILLoop
.b5d9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b5db	f0 eb		beq $b5c8			beq 	_ILLoop
.b5dd	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b5e0	e8		inx				inx
.b5e1	80 e5		bra $b5c8			bra 	_ILLoop
.b5e3					_ILBackspace:
.b5e3	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b5e5	f0 e1		beq $b5c8			beq 	_ILLoop
.b5e7	ca		dex				dex 								; back one.
.b5e8	80 de		bra $b5c8			bra 	_ILLoop
.b5ea					_ILExit:
.b5ea	20 b0 b5	jsr $b5b0			jsr 	EXTPrintCharacter
.b5ed	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b5f0	60		rts				rts
.b5f1					EXTBreakCheck:
.b5f1	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b5f4					EXTReadController:
.b5f4	da		phx				phx
.b5f5	a2 00		ldx #$00			ldx 	#0
.b5f7	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b5f9	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5fc	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b5fe	f0 04		beq $b604			beq 	_NoSet1
.b600	8a		txa				txa
.b601	09 01		ora #$01			ora 	#1
.b603	aa		tax				tax
.b604					_NoSet1:
.b604	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b606	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b609	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b60b	f0 04		beq $b611			beq 	_NoSet1
.b60d	8a		txa				txa
.b60e	09 02		ora #$02			ora 	#2
.b610	aa		tax				tax
.b611					_NoSet1:
.b611	a9 06		lda #$06			lda 	#(($32) >> 3)
.b613	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b616	29 04		and #$04			and 	#($01 << (($32) & 7))
.b618	f0 04		beq $b61e			beq 	_NoSet1
.b61a	8a		txa				txa
.b61b	09 04		ora #$04			ora 	#4
.b61d	aa		tax				tax
.b61e					_NoSet1:
.b61e	a9 04		lda #$04			lda 	#(($25) >> 3)
.b620	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b623	29 20		and #$20			and 	#($01 << (($25) & 7))
.b625	f0 04		beq $b62b			beq 	_NoSet1
.b627	8a		txa				txa
.b628	09 08		ora #$08			ora 	#8
.b62a	aa		tax				tax
.b62b					_NoSet1:
.b62b	a9 04		lda #$04			lda 	#(($26) >> 3)
.b62d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b630	29 40		and #$40			and 	#($01 << (($26) & 7))
.b632	f0 04		beq $b638			beq 	_NoSet1
.b634	8a		txa				txa
.b635	09 10		ora #$10			ora 	#16
.b637	aa		tax				tax
.b638					_NoSet1:
.b638	8a		txa				txa
.b639	fa		plx				plx
.b63a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b63b					MemoryDeleteLine:
.b63b	20 5a b6	jsr $b65a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b63e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b640	a8		tay				tay
.b641					_MDDLLoop:
.b641	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b643	92 30		sta ($30)			sta 	(codePtr)
.b645	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b647	c5 3a		cmp $3a				cmp 	zTemp2
.b649	d0 07		bne $b652			bne 	_MDLDLNext
.b64b	a5 31		lda $31				lda 	codePtr+1
.b64d	c5 3b		cmp $3b				cmp 	zTemp2+1
.b64f	d0 01		bne $b652			bne 	_MDLDLNext
.b651					_MDDLExit:
.b651	60		rts				rts
.b652					_MDLDLNext:
.b652	e6 30		inc $30				inc 	codePtr						; next byte
.b654	d0 eb		bne $b641			bne 	_MDDLLoop
.b656	e6 31		inc $31				inc 	codePtr+1
.b658	80 e7		bra $b641			bra 	_MDDLLoop
.b65a					IMemoryFindEnd:
.b65a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b65c	85 3a		sta $3a				sta 	0+zTemp2
.b65e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b660	85 3b		sta $3b				sta 	1+zTemp2
.b662					_MDLFELoop:
.b662	b2 3a		lda ($3a)			lda 	(zTemp2)
.b664	f0 0b		beq $b671			beq 	_MDLFEExit
.b666	18		clc				clc
.b667	65 3a		adc $3a				adc 	zTemp2
.b669	85 3a		sta $3a				sta 	zTemp2
.b66b	90 f5		bcc $b662			bcc 	_MDLFELoop
.b66d	e6 3b		inc $3b				inc 	zTemp2+1
.b66f	80 f1		bra $b662			bra 	_MDLFELoop
.b671					_MDLFEExit:
.b671	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b672					MemoryInsertLine:
.b672	08		php				php
.b673	20 5a b6	jsr $b65a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b676	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b678	1a		inc a				inc 	a
.b679	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b67b	b0 36		bcs $b6b3			bcs 	_MDLIError
.b67d	28		plp				plp
.b67e	90 08		bcc $b688			bcc 	_MDLIFound
.b680	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b682	85 30		sta $30				sta 	codePtr
.b684	a5 3b		lda $3b				lda 	zTemp2+1
.b686	85 31		sta $31				sta 	codePtr+1
.b688					_MDLIFound:
.b688	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b68b	a8		tay				tay
.b68c					_MDLIInsert:
.b68c	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b68e	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b690	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b692	c5 3a		cmp $3a				cmp 	zTemp2
.b694	d0 06		bne $b69c			bne 	_MDLINext
.b696	a5 31		lda $31				lda 	codePtr+1
.b698	c5 3b		cmp $3b				cmp 	zTemp2+1
.b69a	f0 0a		beq $b6a6			beq 	_MDLIHaveSpace
.b69c					_MDLINext:
.b69c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b69e	d0 02		bne $b6a2			bne 	_MDLINoBorrow
.b6a0	c6 3b		dec $3b				dec 	zTemp2+1
.b6a2					_MDLINoBorrow:
.b6a2	c6 3a		dec $3a				dec 	zTemp2
.b6a4	80 e6		bra $b68c			bra 	_MDLIInsert
.b6a6					_MDLIHaveSpace:
.b6a6	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b6a9	88		dey				dey 								; from offset-1 to 0
.b6aa					_MDLICopy:
.b6aa	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b6ad	91 30		sta ($30),y			sta 	(codePtr),y
.b6af	88		dey				dey
.b6b0	10 f8		bpl $b6aa			bpl 	_MDLICopy
.b6b2	60		rts				rts
.b6b3					_MDLIError:
.b6b3	a9 06		lda #$06		lda	#6
.b6b5	4c 95 99	jmp $9995		jmp	ErrorHandler
.b6b8					MDLAppendLine:
.b6b8	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b6ba	85 36		sta $36				sta 	zTemp0
.b6bc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6be	85 38		sta $38				sta 	0+zTemp1
.b6c0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6c2	85 39		sta $39				sta 	1+zTemp1
.b6c4	b2 38		lda ($38)			lda 	(zTemp1)
.b6c6	d0 0a		bne $b6d2			bne 	_MDLANoInitialise
.b6c8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6ca	8d 6a 06	sta $066a			sta 	0+AppendPointer
.b6cd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6cf	8d 6b 06	sta $066b			sta 	1+AppendPointer
.b6d2					_MDLANoInitialise:
.b6d2	18		clc				clc
.b6d3	ad 6a 06	lda $066a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b6d6	85 38		sta $38				sta 	zTemp1
.b6d8	72 36		adc ($36)			adc 	(zTemp0)
.b6da	8d 6a 06	sta $066a			sta 	AppendPointer
.b6dd	ad 6b 06	lda $066b			lda 	AppendPointer+1
.b6e0	85 39		sta $39				sta 	zTemp1+1
.b6e2	69 00		adc #$00			adc 	#0
.b6e4	8d 6b 06	sta $066b			sta 	AppendPointer+1
.b6e7	a0 00		ldy #$00			ldy 	#0
.b6e9					_MDLACopy:
.b6e9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b6eb	91 38		sta ($38),y			sta 	(zTemp1),y
.b6ed	c8		iny				iny
.b6ee	98		tya				tya
.b6ef	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b6f1	d0 f6		bne $b6e9			bne 	_MDLACopy
.b6f3	a9 00		lda #$00			lda 	#0 							; end of program.
.b6f5	91 38		sta ($38),y			sta 	(zTemp1),y
.b6f7	60		rts				rts
.066a					AppendPointer:
>066a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a60d					MemoryNew:
.a60d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a60f	85 30		sta $30				sta 	codePtr
.a611	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a613	85 31		sta $31				sta 	codePtr+1
.a615	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a617	92 30		sta ($30)			sta 	(codePtr)
.a619	60		rts				rts
.a61a					MemoryInline:
.a61a	98		tya				tya 								; put address into stack,x
.a61b	18		clc				clc
.a61c	65 30		adc $30				adc 	codePtr
.a61e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a621	a5 31		lda $31				lda 	codePtr+1
.a623	69 00		adc #$00			adc 	#0
.a625	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a628	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a62b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a62e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a62f					MemorySearch:
.a62f	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a631	86 37		stx $37				stx 	zTemp0+1
.a633	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a635	85 30		sta $30				sta 	codePtr
.a637	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a639	85 31		sta $31				sta 	codePtr+1
.a63b					_MTAXLoop:
.a63b	b2 30		lda ($30)			lda 	(codePtr)
.a63d	18		clc				clc
.a63e	f0 21		beq $a661			beq 	_MTAXExit 					; reached end, exit with CC.
.a640	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a642	b1 30		lda ($30),y			lda 	(codePtr),y
.a644	38		sec				sec
.a645	e5 36		sbc $36				sbc 	zTemp0
.a647	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a649	c8		iny				iny 								; do the MSB
.a64a	b1 30		lda ($30),y			lda 	(codePtr),y
.a64c	e5 37		sbc $37				sbc 	zTemp0+1
.a64e	05 38		ora $38				ora 	zTemp1
.a650	f0 0f		beq $a661			beq 	_MTAXExit	 				; found
.a652	b0 0d		bcs $a661			bcs 	_MTAXExit 					; current < required exit
.a654	18		clc				clc
.a655	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a657	65 30		adc $30				adc 	codePtr
.a659	85 30		sta $30				sta 	codePtr
.a65b	90 02		bcc $a65f			bcc 	_CREExit
.a65d	e6 31		inc $31				inc 	codePtr+1
.a65f					_CREExit:
.a65f	80 da		bra $a63b			bra 	_MTAXLoop
.a661					_MTAXExit:
.a661	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a662					StackPushByte:
.a662	48		pha				pha 								; save byte
.a663	a5 34		lda $34				lda 	BasicStack
.a665	d0 09		bne $a670			bne 	_SPBNoBorrow
.a667	c6 35		dec $35				dec 	BasicStack+1
.a669	48		pha				pha
.a66a	a5 35		lda $35				lda 	BasicStack+1
.a66c	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a66e	90 06		bcc $a676			bcc 	_SPBMemory
.a670					_SPBNoBorrow:
.a670	c6 34		dec $34				dec 	BasicStack
.a672	68		pla				pla 								; get back and write
.a673	92 34		sta ($34)			sta 	(BasicStack)
.a675	60		rts				rts
.a676					_SPBMemory:
.a676	a9 12		lda #$12		lda	#18
.a678	4c 95 99	jmp $9995		jmp	ErrorHandler
.a67b					StackPopByte:
.a67b	b2 34		lda ($34)			lda 	(BasicStack)
.a67d	e6 34		inc $34				inc 	BasicStack
.a67f	d0 02		bne $a683			bne 	_SPBNoCarry
.a681	e6 35		inc $35				inc 	BasicStack+1
.a683					_SPBNoCarry:
.a683	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a684					StackOpen:
.a684	48		pha				pha 								; save frame byte
.a685	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a687	0a		asl a				asl 	a 							; claim twice this for storage
.a688	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a68a	38		sec				sec 								; so basically subtracting from
.a68b	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a68d	85 34		sta $34				sta 	basicStack
.a68f	b0 08		bcs $a699			bcs 	_SONoBorrow
.a691	c6 35		dec $35				dec 	basicStack+1
.a693	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a695	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a697	90 04		bcc $a69d			bcc 	_SOMemory
.a699					_SONoBorrow:
.a699	68		pla				pla 								; get marker back and write at TOS
.a69a	92 34		sta ($34)			sta 	(basicStack)
.a69c	60		rts				rts
.a69d					_SOMemory:
.a69d	a9 12		lda #$12		lda	#18
.a69f	4c 95 99	jmp $9995		jmp	ErrorHandler
.a6a2					StackClose:
.a6a2	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6a4	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6a6	0a		asl a				asl 	a 							; claim twice this.
.a6a7	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6a9	85 34		sta $34				sta 	basicStack
.a6ab	90 02		bcc $a6af			bcc 	_SCExit
.a6ad	e6 35		inc $35				inc 	basicStack+1
.a6af					_SCExit:
.a6af	60		rts				rts
.a6b0					StackCheckFrame:
.a6b0	48		pha				pha
.a6b1					_StackRemoveLocals:
.a6b1	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a6b3	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a6b5	b0 05		bcs $a6bc			bcs 	_SCNoLocal
.a6b7	20 b1 ad	jsr $adb1			jsr 	LocalPopValue
.a6ba	80 f5		bra $a6b1			bra 	_StackRemoveLocals
.a6bc					_SCNoLocal:
.a6bc	68		pla				pla
.a6bd	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a6bf	29 f0		and #$f0			and 	#$F0 						; check type bits
.a6c1	d0 01		bne $a6c4			bne 	_SCFError 					; different, we have structures mixed up
.a6c3	60		rts				rts
.a6c4					_SCFError:
.a6c4	8a		txa				txa 								; report error X
.a6c5	4c 95 99	jmp $9995			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a6c8					STKSaveCodePosition:
.a6c8	5a		phy				phy
.a6c9	98		tya				tya 								; save Y
.a6ca	a0 05		ldy #$05			ldy 	#5
.a6cc	91 34		sta ($34),y			sta 	(basicStack),y
.a6ce	88		dey				dey 								; save Code Pointer
.a6cf					_STKSaveLoop:
.a6cf	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a6d2	91 34		sta ($34),y			sta 	(basicStack),y
.a6d4	88		dey				dey
.a6d5	d0 f8		bne $a6cf			bne 	_STKSaveLoop
.a6d7	7a		ply				ply
.a6d8	60		rts				rts
.a6d9					STKLoadCodePosition:
.a6d9	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a6db					_STKLoadLoop:
.a6db	b1 34		lda ($34),y			lda 	(basicStack),y
.a6dd	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a6e0	c8		iny				iny
.a6e1	c0 05		cpy #$05			cpy 	#5
.a6e3	d0 f6		bne $a6db			bne 	_STKLoadLoop
.a6e5	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a6e7	a8		tay				tay
.a6e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a6e9					StackReset:
.a6e9	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a6eb	85 34		sta $34				sta 	0+basicStack
.a6ed	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a6ef	85 35		sta $35				sta 	1+basicStack
.a6f1	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a6f3	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a6f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b6f8					StringConcrete:
.b6f8	5a		phy				phy 								; save position on stack
.b6f9	20 6a a2	jsr $a26a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6fc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b6ff	85 38		sta $38				sta 	zTemp1
.b701	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b704	85 39		sta $39				sta 	zTemp1+1
.b706	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b708					_SALength:
.b708	c8		iny				iny
.b709	b1 38		lda ($38),y			lda 	(zTemp1),y
.b70b	d0 fb		bne $b708			bne 	_SALength
.b70d	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b70f	b0 3f		bcs $b750			bcs 	_SALengthError
.b711	98		tya				tya 				 				; length of the new string
.b712	18		clc				clc
.b713	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b715	90 02		bcc $b719			bcc 	_SAHaveLength
.b717	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b719					_SAHaveLength:
.b719	48		pha				pha 								; save length.
.b71a	38		sec				sec
.b71b	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b71d	6d 8e 04	adc $048e			adc 	StringMemory
.b720	8d 8e 04	sta $048e			sta 	StringMemory
.b723	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b725	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b728	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b72a	6d 8f 04	adc $048f			adc 	StringMemory+1
.b72d	8d 8f 04	sta $048f			sta 	StringMemory+1
.b730	85 3b		sta $3b				sta 	zTemp2+1
.b732	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b735	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b736	38		sec				sec
.b737	e9 03		sbc #$03			sbc 	#3
.b739	92 3a		sta ($3a)			sta 	(zTemp2)
.b73b	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b73d	a0 01		ldy #$01			ldy 	#1
.b73f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b741					_SACopyNewString:
.b741	a0 00		ldy #$00			ldy 	#0
.b743					_SACopyNSLoop:
.b743	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b745	c8		iny				iny 								; write two on in string storage
.b746	c8		iny				iny
.b747	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b749	88		dey				dey 								; this makes it one one.
.b74a	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b74c	d0 f5		bne $b743			bne 	_SACopyNSLoop
.b74e	7a		ply				ply
.b74f	60		rts				rts
.b750					_SALengthError:
.b750	a9 09		lda #$09		lda	#9
.b752	4c 95 99	jmp $9995		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b755					StringSystemInitialise:
.b755	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b757	8d 8e 04	sta $048e			sta 	0+StringMemory
.b75a	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b75c	8d 8f 04	sta $048f			sta 	1+StringMemory
.b75f	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b762	60		rts				rts
.b763					StringSpaceInitialise:
.b763	20 6a a2	jsr $a26a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b766	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b768	8d 90 04	sta $0490			sta 	StringInitialised
.b76b	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b76e	8d 91 04	sta $0491			sta 	StringTempPointer
.b771	ad 8f 04	lda $048f			lda 	StringMemory+1
.b774	3a		dec a				dec 	a
.b775	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b778	60		rts				rts
.b779					StringTempAllocate:
.b779	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b77b	b0 35		bcs $b7b2			bcs 	_STALength
.b77d	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b780	30 05		bmi $b787			bmi 	_STAAllocate
.b782	48		pha				pha 								; save value to subtract.
.b783	20 63 b7	jsr $b763			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b786	68		pla				pla 								; restore it
.b787					_STAAllocate:
.b787	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b789	18		clc				clc  								; deliberate allows one more
.b78a	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b78d	8d 91 04	sta $0491			sta 	StringTempPointer
.b790	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b793	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b795	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b798	69 ff		adc #$ff			adc 	#$FF
.b79a	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b79d	85 3d		sta $3d				sta 	zsTemp+1
.b79f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b7a2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b7a5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b7a8	a9 10		lda #$10			lda 	#NSTString
.b7aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b7ad	a9 00		lda #$00			lda 	#0 							; clear the target string
.b7af	92 3c		sta ($3c)			sta 	(zsTemp)
.b7b1	60		rts				rts
.b7b2					_STALength:
.b7b2	a9 09		lda #$09		lda	#9
.b7b4	4c 95 99	jmp $9995		jmp	ErrorHandler
.b7b7					StringTempWrite:
.b7b7	48		pha				pha
.b7b8	92 3c		sta ($3c)			sta 	(zsTemp)
.b7ba	e6 3c		inc $3c				inc 	zsTemp
.b7bc	d0 02		bne $b7c0			bne 	_STWNoCarry
.b7be	e6 3d		inc $3d				inc 	zsTemp+1
.b7c0					_STWNoCarry:
.b7c0	a9 00		lda #$00			lda 	#0
.b7c2	92 3c		sta ($3c)			sta 	(zsTemp)
.b7c4	68		pla				pla
.b7c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a6f6					BackloadProgram:
.a6f6	a2 ff		ldx #$ff			ldx 	#$FF
.a6f8	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a6fb	20 25 a7	jsr $a725			jsr 	BLReadByte
.a6fe	30 1e		bmi $a71e			bmi 	_BPExit
.a700					_BPCopy:
.a700	e8		inx				inx  								; copy byte in
.a701	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a704	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a707	20 25 a7	jsr $a725			jsr 	BLReadByte 					; read next byte
.a70a	30 0a		bmi $a716			bmi 	_BPEndLine 					; -ve = EOL
.a70c	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a70e	d0 02		bne $a712			bne 	_BPNotTab
.a710	a9 20		lda #$20			lda 	#' '
.a712					_BPNotTab:
.a712	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a714	b0 ea		bcs $a700			bcs 	_BPCopy
.a716					_BPEndLine:
.a716	20 02 ab	jsr $ab02			jsr 	TokeniseLine 				; tokenise the line.
.a719	20 38 8b	jsr $8b38			jsr 	EditProgramCode
.a71c	80 d8		bra $a6f6			bra 	BackloadProgram
.a71e					_BPExit:
.a71e	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a721	20 f6 8b	jsr $8bf6			jsr 	ClearCommand 				; clear variables etc.
.a724	60		rts				rts
.a725					BLReadByte:
.a725					_BLLoad:
.a725	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a728	ee 26 a7	inc $a726			inc 	_BLLoad+1
.a72b	d0 03		bne $a730			bne 	_BLNoCarry
.a72d	ee 27 a7	inc $a727			inc 	_BLLoad+2
.a730					_BLNoCarry:
.a730	c9 00		cmp #$00			cmp 	#0
.a732	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a733					TokeniseSearchTable:
.a733	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a735	85 36		sta $36				sta 	zTemp0
.a737	a0 00		ldy #$00			ldy 	#0
.a739	a9 80		lda #$80			lda 	#$80 						; token #
.a73b	85 38		sta $38				sta 	zTemp1
.a73d					_TSTLoop:
.a73d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a73f	30 49		bmi $a78a			bmi 	_TSTFail 					; -ve = end of table
.a741	f0 2e		beq $a771			beq 	_TSTNext 					; zero, check next it's a dummy
.a743	c8		iny				iny 								; get the hash
.a744	b1 36		lda ($36),y			lda 	(zTemp0),y
.a746	88		dey				dey
.a747	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a74a	d0 25		bne $a771			bne 	_TSTNext
.a74c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a74f	38		sec				sec
.a750	ed 80 04	sbc $0480			sbc 	identStart
.a753	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a755	d0 1a		bne $a771			bne 	_TSTNext
.a757	5a		phy				phy 								; save Y , we might fail
.a758	c8		iny				iny 								; point to text
.a759	c8		iny				iny
.a75a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a75d					_TSTCompareName:
.a75d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a760	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a762	d0 0c		bne $a770			bne 	_TSTNextPullY 				; fail, pullY and do next
.a764	e8		inx				inx
.a765	c8		iny				iny
.a766	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a769	d0 f2		bne $a75d			bne 	_TSTCompareName
.a76b	7a		ply				ply 								; throw Y
.a76c	a5 38		lda $38				lda 	zTemp1 						; get token #
.a76e	38		sec				sec 								; return with CS = passed.
.a76f	60		rts				rts
.a770					_TSTNextPullY:
.a770	7a		ply				ply 								; restore current, fall through.
.a771					_TSTNext:
.a771	e6 38		inc $38				inc 	zTemp1 						; token counter
.a773	98		tya				tya
.a774	18		clc				clc
.a775	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a777	1a		inc a				inc 	a 							; +1
.a778	1a		inc a				inc 	a 							; +2
.a779	a8		tay				tay
.a77a	10 c1		bpl $a73d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a77c	98		tya				tya 								; add Y to zTemp0 and reset Y
.a77d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a77f	18		clc				clc  								; but have tables > 255 bytes
.a780	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a782	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a784	90 b7		bcc $a73d			bcc 	_TSTLoop
.a786	e6 37		inc $37				inc 	zTemp0+1
.a788	80 b3		bra $a73d			bra 	_TSTLoop
.a78a					_TSTFail:
.a78a	18		clc				clc
.a78b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a78c					KeywordSet0:
>a78c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a78e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a790	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a792	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a798	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a7a0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a7a6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a7ad	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a7b5	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a7bc	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a7c3	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a7c9	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a7cf	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a7d7	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a7de	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a7e5	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a7ec	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a7f4	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a7fa	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a800	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a807	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a80d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a813	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a81b	28
>a81c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a824	28
>a825	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a82b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a831	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a837	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a83e	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a846	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a84c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a852	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a857	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a85b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a861	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a869	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a870	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a877	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a87f	43
>a880	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a886	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a88c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a893	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a899	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a89d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a8a3	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a8ab	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a8b2	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a8b7	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a8be	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a8c6	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a8cc	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a8d1	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a8d9	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a8df	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a8e5	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a8ea	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a8f1	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a8f7	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a8fd	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a904	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a909	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a90f	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a916	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a91b	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a91f	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a927	45
>a928	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c1 PLOT
>a92e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c2 PRINT
>a935	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c3 READ
>a93b	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c4 RECT
>a941	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c5 REM
>a946	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c6 RETURN
>a94e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c7 SOLID
>a955	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c8 SPRITE
>a95d	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c9 TEXT
>a963	02 a3 54 4f				.text	2,$a3,"TO"             ; $ca TO
>a967	ff					.text	$FF
.a968					KeywordSet1:
>a968	00 65					.text	0,$65,""               ; $80 !0:EOF
>a96a	00 58					.text	0,$58,""               ; $81 !1:SH1
>a96c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a96e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a976	4c 45
>a978	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a980	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a988	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a98d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a993	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a998	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a9a0	45
>a9a1	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a9a6	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a9ae	53
>a9af	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a9b5	ff					.text	$FF
.a9b6					KeywordSet2:
>a9b6	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9b8	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9ba	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9bc	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a9c1	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a9c6	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a9cb	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a9d0	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a9d5	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a9da	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a9df	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a9e4	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a9e9	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a9ee	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a9f3	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a9f8	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a9fd	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>aa02	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>aa07	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>aa0c	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>aa11	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>aa16	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aa1b	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aa20	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aa25	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aa2a	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aa2f	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aa34	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aa39	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aa3e	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aa43	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aa48	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aa4d	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aa52	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aa57	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aa5c	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aa61	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aa66	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aa6b	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aa70	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>aa75	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>aa7a	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>aa7f	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>aa84	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>aa89	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa8e	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa93	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa98	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa9d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aaa2	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aaa7	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aaac	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aab1	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aab6	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aabb	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aac0	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aac5	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aaca	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aacf	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aad4	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aad9	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aade	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aae3	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aae8	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aaed	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aaf2	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aaf7	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aafc	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ab01	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ab02					TokeniseLine:
.ab02	20 8a ac	jsr $ac8a			jsr 	FixLineBufferCase 			; fix line case
.ab05	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ab07	8d a7 04	sta $04a7			sta 	tokenOffset
.ab0a	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ab0d	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ab10	a2 ff		ldx #$ff			ldx 	#$FF
.ab12					_TKFindFirst:
.ab12	e8		inx				inx
.ab13	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ab16	f0 79		beq $ab91			beq 	_TKExit
.ab18	c9 20		cmp #$20			cmp 	#' '
.ab1a	90 f6		bcc $ab12			bcc 	_TKFindFirst
.ab1c	c9 30		cmp #$30			cmp 	#'0'
.ab1e	90 07		bcc $ab27			bcc 	_TKNoLineNumber
.ab20	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab22	b0 03		bcs $ab27			bcs 	_TKNoLineNumber
.ab24	20 b4 ac	jsr $acb4			jsr 	TokeniseExtractLineNumber
.ab27					_TKNoLineNumber:
.ab27					_TKTokeniseLoop:
.ab27	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ab2a	f0 65		beq $ab91			beq 	_TKExit
.ab2c	e8		inx				inx
.ab2d	c9 20		cmp #$20			cmp 	#' '
.ab2f	f0 f6		beq $ab27			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ab31	ca		dex				dex 								; undo last get, A contains character, X is position.
.ab32	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ab34	f0 61		beq $ab97			beq 	_TKTokeniseIdentifier
.ab36	c9 41		cmp #$41			cmp 	#'A'
.ab38	90 04		bcc $ab3e			bcc 	_TKTokenisePunctuation
.ab3a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ab3c	90 59		bcc $ab97			bcc 	_TKTokeniseIdentifier
.ab3e					_TKTokenisePunctuation:
.ab3e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ab40	f0 27		beq $ab69			beq 	_TKString
.ab42	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ab44	f0 28		beq $ab6e			beq 	_TKHexConstant
.ab46	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ab48	f0 29		beq $ab73			beq 	_TKCheckDouble
.ab4a	c9 3e		cmp #$3e			cmp 	#'>'
.ab4c	f0 25		beq $ab73			beq 	_TKCheckDouble
.ab4e					_TKStandardPunctuation:
.ab4e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ab51	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ab53	90 0e		bcc $ab63			bcc 	_TKNoShift
.ab55	48		pha				pha 								; save
.ab56	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ab58	85 36		sta $36				sta 	zTemp0
.ab5a	68		pla				pla
.ab5b	29 20		and #$20			and 	#32 						; bit 5
.ab5d	4a		lsr a				lsr 	a 							; shift into bit 3
.ab5e	4a		lsr a				lsr 	a
.ab5f	05 36		ora $36				ora 	zTemp0
.ab61	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ab63					_TKNoShift:
.ab63	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte 			; write the punctuation character
.ab66	e8		inx				inx 								; consume the character
.ab67	80 be		bra $ab27			bra 	_TKTokeniseLoop 			; and loop round again.
.ab69					_TKString:
.ab69	20 19 ac	jsr $ac19			jsr 	TokeniseString
.ab6c	80 b9		bra $ab27			bra 	_TKTokeniseLoop
.ab6e					_TKHexConstant:
.ab6e	20 54 ac	jsr $ac54			jsr 	TokeniseHexConstant
.ab71	80 b4		bra $ab27			bra 	_TKTokeniseLoop
.ab73					_TKCheckDouble:
.ab73	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.ab76	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.ab78	90 d4		bcc $ab4e			bcc 	_TKStandardPunctuation
.ab7a	c9 3f		cmp #$3f			cmp 	#'>'+1
.ab7c	b0 d0		bcs $ab4e			bcs 	_TKStandardPunctuation
.ab7e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.ab81	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.ab83	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.ab84	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.ab87	38		sec				sec
.ab88	e9 3c		sbc #$3c			sbc 	#'<'
.ab8a	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab8d	e8		inx				inx 								; consume both
.ab8e	e8		inx				inx
.ab8f	80 96		bra $ab27			bra 	_TKTokeniseLoop
.ab91	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab93	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ab96	60		rts				rts
.ab97					_TKTokeniseIdentifier:
.ab97	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab9a	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab9d					_TKCheckLoop:
.ab9d	e8		inx				inx 								; look at next, we know first is identifier.
.ab9e	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.aba1	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aba3	f0 f8		beq $ab9d			beq 	_TKCheckLoop
.aba5	c9 30		cmp #$30			cmp	 	#"0"
.aba7	90 0c		bcc $abb5			bcc 	_TKEndIdentifier
.aba9	c9 3a		cmp #$3a			cmp 	#"9"+1
.abab	90 f0		bcc $ab9d			bcc 	_TKCheckLoop
.abad	c9 41		cmp #$41			cmp	 	#"A"
.abaf	90 04		bcc $abb5			bcc 	_TKEndIdentifier
.abb1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.abb3	90 e8		bcc $ab9d			bcc 	_TKCheckLoop
.abb5					_TKEndIdentifier:
.abb5	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.abb8	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.abba	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.abbc	f0 06		beq $abc4			beq 	_TKHasTypeCharacter
.abbe	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.abc0	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.abc2	d0 07		bne $abcb			bne 	_TKNoTypeCharacter
.abc4					_TKHasTypeCharacter:
.abc4	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.abc7	e8		inx				inx 								; read next
.abc8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.abcb					_TKNoTypeCharacter:
.abcb	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.abcd	d0 09		bne $abd8			bne 	_TKNoArray
.abcf	e8		inx				inx 								; skip the (
.abd0	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.abd3	09 04		ora #$04			ora 	#$04
.abd5	8d 84 04	sta $0484			sta 	identTypeByte
.abd8					_TKNoArray:
.abd8	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.abdb	20 75 ac	jsr $ac75			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.abde	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.abe0	a9 8c		lda #$8c			lda 	#(KeywordSet0) & $FF
.abe2	20 33 a7	jsr $a733			jsr 	TokeniseSearchTable
.abe5	a2 00		ldx #$00			ldx 	#0
.abe7	b0 1f		bcs $ac08			bcs 	_TKFoundToken
.abe9	a0 a9		ldy #$a9			ldy 	#(KeywordSet1) >> 8
.abeb	a9 68		lda #$68			lda 	#(KeywordSet1) & $FF
.abed	20 33 a7	jsr $a733			jsr 	TokeniseSearchTable
.abf0	a2 81		ldx #$81			ldx 	#$81
.abf2	b0 14		bcs $ac08			bcs 	_TKFoundToken
.abf4	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.abf6	a9 b6		lda #$b6			lda 	#(KeywordSet2) & $FF
.abf8	20 33 a7	jsr $a733			jsr 	TokeniseSearchTable
.abfb	a2 82		ldx #$82			ldx 	#$82
.abfd	b0 09		bcs $ac08			bcs 	_TKFoundToken
.abff	20 05 ad	jsr $ad05			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ac02	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac05	4c 27 ab	jmp $ab27			jmp 	_TKTokeniseLoop 			; and go round again.
.ac08					_TKFoundToken:
.ac08	48		pha				pha 								; save token
.ac09	8a		txa				txa 								; shift in X, is there one ?
.ac0a	f0 03		beq $ac0f			beq 	_TKNoTShift
.ac0c	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte 			; if so, write it out
.ac0f					_TKNoTShift:
.ac0f	68		pla				pla 								; restore and write token
.ac10	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac13	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac16	4c 27 ab	jmp $ab27			jmp 	_TKTokeniseLoop 			; and go round again.
.ac19					TokeniseString:
.ac19	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ac1b	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac1e	e8		inx				inx									; start of quoted string.
.ac1f	da		phx				phx 								; push start of string on top
.ac20	ca		dex				dex
.ac21					_TSFindEnd:
.ac21	e8		inx				inx
.ac22	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ac25	f0 04		beq $ac2b			beq 	_TSEndOfString
.ac27	c9 22		cmp #$22			cmp 	#'"'
.ac29	d0 f6		bne $ac21			bne 	_TSFindEnd
.ac2b					_TSEndOfString:
.ac2b	7a		ply				ply  								; so now Y is first character, X is character after end.
.ac2c	48		pha				pha 								; save terminating character
.ac2d	20 35 ac	jsr $ac35			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ac30	68		pla				pla 								; terminating character
.ac31	f0 01		beq $ac34			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ac33	e8		inx				inx
.ac34					_TSNotQuote:
.ac34	60		rts				rts
.ac35					TOWriteBlockXY:
.ac35	86 36		stx $36				stx 	zTemp0 						; write end character
.ac37	98		tya				tya
.ac38	49 ff		eor #$ff			eor 	#$FF
.ac3a	38		sec				sec
.ac3b	65 36		adc $36				adc 	zTemp0
.ac3d	1a		inc a				inc 	a 							; one extra for NULL
.ac3e	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac41					_TOBlockLoop:
.ac41	c4 36		cpy $36				cpy 	zTemp0
.ac43	f0 09		beq $ac4e			beq 	_TOBlockExit
.ac45	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ac48	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac4b	c8		iny				iny
.ac4c	80 f3		bra $ac41			bra 	_TOBlockLoop
.ac4e					_TOBlockExit:
.ac4e	a9 00		lda #$00			lda 	#0
.ac50	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac53	60		rts				rts
.ac54					TokeniseHexConstant:
.ac54	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ac56	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ac59	e8		inx				inx									; start of quoted string.
.ac5a	da		phx				phx 								; push start of constant on top
.ac5b	ca		dex				dex
.ac5c					_THFindLoop:
.ac5c	e8		inx				inx
.ac5d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac60	c9 30		cmp #$30			cmp 	#"0"
.ac62	90 0c		bcc $ac70			bcc 	_THFoundEnd
.ac64	c9 3a		cmp #$3a			cmp 	#"9"+1
.ac66	90 f4		bcc $ac5c			bcc 	_THFindLoop
.ac68	c9 41		cmp #$41			cmp 	#"A"
.ac6a	90 04		bcc $ac70			bcc 	_THFoundEnd
.ac6c	c9 47		cmp #$47			cmp 	#"F"+1
.ac6e	90 ec		bcc $ac5c			bcc 	_THFindLoop
.ac70					_THFoundEnd:
.ac70	7a		ply				ply 								; restore start
.ac71	20 35 ac	jsr $ac35			jsr 	TOWriteBlockXY 				; output the block
.ac74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ac75					TokeniseCalculateHash:
.ac75	da		phx				phx
.ac76	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ac79	a9 00		lda #$00			lda 	#0
.ac7b					_TCHLoop:
.ac7b	18		clc				clc
.ac7c	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.ac7f	e8		inx				inx
.ac80	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ac83	d0 f6		bne $ac7b			bne 	_TCHLoop
.ac85	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ac88	fa		plx				plx
.ac89	60		rts				rts
.ac8a					FixLineBufferCase:
.ac8a	a2 00		ldx #$00			ldx 	#0
.ac8c					_FLBCLoop:
.ac8c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ac8f	f0 22		beq $acb3			beq 	_FLBCExit 					; end of string.
.ac91	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac93	f0 11		beq $aca6			beq 	_FLBCInQuotes
.ac95	e8		inx				inx
.ac96	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac98	90 f2		bcc $ac8c			bcc 	_FLBCLoop
.ac9a	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac9c	b0 ee		bcs $ac8c			bcs 	_FLBCLoop
.ac9e	38		sec				sec 								; make U/C
.ac9f	e9 20		sbc #$20			sbc 	#32
.aca1	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.aca4	80 e6		bra $ac8c			bra 	_FLBCLoop
.aca6					_FLBCInQuotes:
.aca6	e8		inx				inx 								; advance
.aca7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.acaa	f0 07		beq $acb3			beq 	_FLBCExit 					; exit on EOS
.acac	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.acae	d0 f6		bne $aca6			bne 	_FLBCInQuotes
.acb0	e8		inx				inx 								; skip over it
.acb1	80 d9		bra $ac8c			bra 	_FLBCLoop
.acb3					_FLBCExit:
.acb3	60		rts				rts
.acb4					TokeniseExtractLineNumber:
.acb4	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.acb7	48		pha				pha
.acb8	ad a8 04	lda $04a8			lda 	tokenLineNumber
.acbb	48		pha				pha
.acbc	20 f2 ac	jsr $acf2			jsr 	_TELNTimes2 				; line # x 4
.acbf	20 f2 ac	jsr $acf2			jsr 	_TELNTimes2 				; line # x 2
.acc2	18		clc				clc 								; add stacked value
.acc3	68		pla				pla
.acc4	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acc7	8d a8 04	sta $04a8			sta 	tokenLineNumber
.acca	68		pla				pla
.accb	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.acce	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.acd1	20 f2 ac	jsr $acf2			jsr 	_TELNTimes2 				; line # x 10
.acd4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.acd7	e8		inx				inx
.acd8	29 0f		and #$0f			and 	#15 						; add to line #
.acda	18		clc				clc
.acdb	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acde	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ace1	90 03		bcc $ace6			bcc 	_TLENNoCarry
.ace3	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ace6					_TLENNoCarry:
.ace6	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ace9	c9 30		cmp #$30			cmp 	#'0'
.aceb	90 04		bcc $acf1			bcc 	_TLENExit
.aced	c9 3a		cmp #$3a			cmp 	#'9'+1
.acef	90 c3		bcc $acb4			bcc 	TokeniseExtractLineNumber
.acf1					_TLENExit:
.acf1	60		rts				rts
.acf2					_TELNTimes2:
.acf2	0e a8 04	asl $04a8			asl 	tokenLineNumber
.acf5	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.acf8	60		rts				rts
.acf9					TokeniseWriteByte:
.acf9	da		phx				phx
.acfa	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.acfd	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ad00	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ad03	fa		plx				plx
.ad04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ad05					CheckCreateVariableRecord:
.ad05	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ad07	85 36		sta $36				sta 	0+zTemp0
.ad09	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ad0b	85 37		sta $37				sta 	1+zTemp0
.ad0d					_CCVSearch:
.ad0d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ad0f	f0 2c		beq $ad3d			beq 	_CCVFail
.ad11	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ad13	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ad15	cd 83 04	cmp $0483			cmp 	identHash
.ad18	d0 16		bne $ad30			bne 	_CCVNext
.ad1a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ad1c	ae 80 04	ldx $0480			ldx 	identStart
.ad1f					_CCVCompare:
.ad1f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ad22	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ad24	e8		inx				inx 								; advance pointers
.ad25	c8		iny				iny
.ad26	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ad27	d0 07		bne $ad30			bne 	_CCVNext  					; didn't match go to next.
.ad29	90 f4		bcc $ad1f			bcc 	_CCVCompare 				; not finished yet.
.ad2b	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ad2e	f0 41		beq $ad71			beq 	_CCVFound 					; yes, we were successful
.ad30					_CCVNext:
.ad30	18		clc				clc
.ad31	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ad33	65 36		adc $36				adc 	zTemp0
.ad35	85 36		sta $36				sta 	zTemp0
.ad37	90 d4		bcc $ad0d			bcc 	_CCVSearch
.ad39	e6 37		inc $37				inc 	zTemp0+1
.ad3b	80 d0		bra $ad0d			bra 	_CCVSearch
.ad3d					_CCVFail:
.ad3d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ad3f	ad 83 04	lda $0483			lda 	identHash
.ad42	91 36		sta ($36),y			sta 	(zTemp0),y
.ad44	c8		iny				iny 								; offset 2 is the type byte
.ad45	ad 84 04	lda $0484			lda 	identTypeByte
.ad48	91 36		sta ($36),y			sta 	(zTemp0),y
.ad4a	c8		iny				iny
.ad4b					_CCVData:
.ad4b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ad4d	91 36		sta ($36),y			sta 	(zTemp0),y
.ad4f	c8		iny				iny
.ad50	c0 08		cpy #$08			cpy 	#8
.ad52	90 f7		bcc $ad4b			bcc 	_CCVData
.ad54	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ad57					_CCVCopyName:
.ad57	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad5a	91 36		sta ($36),y			sta 	(zTemp0),y
.ad5c	e8		inx				inx
.ad5d	c8		iny				iny
.ad5e	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ad61	d0 f4		bne $ad57			bne 	_CCVCopyName
.ad63	98		tya				tya 								; patch offset
.ad64	92 36		sta ($36)			sta 	(zTemp0)
.ad66	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ad68	91 36		sta ($36),y			sta 	(zTemp0),y
.ad6a	88		dey				dey
.ad6b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ad6d	09 80		ora #$80			ora 	#$80
.ad6f	91 36		sta ($36),y			sta 	(zTemp0),y
.ad71					_CCVFound:
.ad71	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ad73	38		sec				sec
.ad74	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ad76	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ad78	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ad7b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ad7d	20 f9 ac	jsr $acf9			jsr 	TokeniseWriteByte
.ad80	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
