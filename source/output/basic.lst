
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 17:16:18 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_STACK = 16

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_DOWNTO                           = $a4; $a4 DOWNTO
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ec 81	jsr $81ec			jsr 	NewCommand 					; erase current program
.8006	20 20 8e	jsr $8e20			jsr 	BackloadProgram
.8009	4c 7c 82	jmp $827c			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	7f 84					.word	ShiftLeft                        ; $00 <<
>8016	79 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	6f 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	ce 97					.word	SyntaxError                      ; $03 !!3
>801c	ce 97					.word	SyntaxError                      ; $04 ><
>801e	83 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	82 84					.word	ShiftRight                       ; $06 >>
>8022	ce 97					.word	SyntaxError                      ; $07 !!7
>8024	ce 97					.word	SyntaxError                      ; $08 !!8
>8026	ce 97					.word	SyntaxError                      ; $09 !!9
>8028	ce 97					.word	SyntaxError                      ; $0a !!10
>802a	ce 97					.word	SyntaxError                      ; $0b !!11
>802c	ce 97					.word	SyntaxError                      ; $0c !!12
>802e	ce 97					.word	SyntaxError                      ; $0d !!13
>8030	ce 97					.word	SyntaxError                      ; $0e !!14
>8032	ce 97					.word	SyntaxError                      ; $0f !!15
>8034	ce 97					.word	SyntaxError                      ; $10 @
>8036	ce 97					.word	SyntaxError                      ; $11 !!17
>8038	ce 97					.word	SyntaxError                      ; $12 !!18
>803a	ce 97					.word	SyntaxError                      ; $13 [
>803c	2e 93					.word	IntegerDivide                    ; $14 \
>803e	ce 97					.word	SyntaxError                      ; $15 ]
>8040	08 86					.word	EorInteger                       ; $16 ^
>8042	ce 97					.word	SyntaxError                      ; $17 _
>8044	ce 97					.word	SyntaxError                      ; $18 `
>8046	ce 97					.word	SyntaxError                      ; $19 !!25
>8048	ce 97					.word	SyntaxError                      ; $1a !!26
>804a	ce 97					.word	SyntaxError                      ; $1b {
>804c	c2 85					.word	OraInteger                       ; $1c |
>804e	ce 97					.word	SyntaxError                      ; $1d }
>8050	ce 97					.word	SyntaxError                      ; $1e ~
>8052	ce 97					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	ce 97					.word	SyntaxError                      ; $20
>8056	4e 86					.word	WordIndirect                     ; $21 !
>8058	ce 97					.word	SyntaxError                      ; $22 "
>805a	ce 97					.word	SyntaxError                      ; $23 #
>805c	ce 97					.word	SyntaxError                      ; $24 $
>805e	7b 93					.word	IntegerModulus                   ; $25 %
>8060	7c 85					.word	AndInteger                       ; $26 &
>8062	ce 97					.word	SyntaxError                      ; $27 '
>8064	ce 97					.word	SyntaxError                      ; $28 (
>8066	ce 97					.word	SyntaxError                      ; $29 )
>8068	f0 93					.word	MulInteger                       ; $2a *
>806a	16 85					.word	AddInteger                       ; $2b +
>806c	ce 97					.word	SyntaxError                      ; $2c ,
>806e	51 85					.word	SubInteger                       ; $2d -
>8070	ce 97					.word	SyntaxError                      ; $2e .
>8072	87 95					.word	FDivideCommand                   ; $2f /
>8074	ce 97					.word	SyntaxError                      ; $30 0
>8076	ce 97					.word	SyntaxError                      ; $31 1
>8078	ce 97					.word	SyntaxError                      ; $32 2
>807a	ce 97					.word	SyntaxError                      ; $33 3
>807c	ce 97					.word	SyntaxError                      ; $34 4
>807e	ce 97					.word	SyntaxError                      ; $35 5
>8080	ce 97					.word	SyntaxError                      ; $36 6
>8082	ce 97					.word	SyntaxError                      ; $37 7
>8084	ce 97					.word	SyntaxError                      ; $38 8
>8086	ce 97					.word	SyntaxError                      ; $39 9
>8088	ce 97					.word	SyntaxError                      ; $3a :
>808a	ce 97					.word	SyntaxError                      ; $3b ;
>808c	5b 83					.word	BinaryCompareLess                ; $3c <
>808e	51 83					.word	BinaryCompareEqual               ; $3d =
>8090	65 83					.word	BinaryCompareGreater             ; $3e >
>8092	75 86					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	c7 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	d4 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	ce 97					.word	SyntaxError                      ; $82 !2:SH2
>809a	cd 96					.word	AbsUnary                         ; $83 ABS(
>809c	b8 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	dd 96					.word	AscUnary                         ; $85 ASC(
>80a0	55 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	4d 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	ea 96					.word	FracUnary                        ; $88 FRAC(
>80a6	00 97					.word	IntUnary                         ; $89 INT(
>80a8	56 97					.word	IsValUnary                       ; $8a ISVAL(
>80aa	2f 8c					.word	Unary_Left                       ; $8b LEFT$(
>80ac	12 97					.word	LenUnary                         ; $8c LEN(
>80ae	59 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	f2 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	3f 8c					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	08 8b					.word	Unary_Rnd                        ; $90 RND(
>80b6	2c 97					.word	SgnUnary                         ; $91 SGN(
>80b8	67 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	82 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	41 83					.word	UnaryTrue                        ; $94 TRUE
>80be	4c 97					.word	ValUnary                         ; $95 VAL(
>80c0	ce 97					.word	SyntaxError                      ; $96 FOR
>80c2	98 81					.word	IfCommand                        ; $97 IF
>80c4	ce 97					.word	SyntaxError                      ; $98 PROC
>80c6	5a 82					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	ce 97					.word	SyntaxError                      ; $9a WHILE
>80ca	ce 97					.word	SyntaxError                      ; $9b ENDIF
>80cc	ce 97					.word	SyntaxError                      ; $9c ENDPROC
>80ce	ce 97					.word	SyntaxError                      ; $9d NEXT
>80d0	63 82					.word	Command_UNTIL                    ; $9e UNTIL
>80d2	ce 97					.word	SyntaxError                      ; $9f WEND
>80d4	1c 81					.word	CallCommand                      ; $a0 CALL
>80d6	ce 97					.word	SyntaxError                      ; $a1 CLS
>80d8	ce 97					.word	SyntaxError                      ; $a2 DATA
>80da	ce 97					.word	SyntaxError                      ; $a3 DIM
>80dc	ce 97					.word	SyntaxError                      ; $a4 DOWNTO
>80de	67 81					.word	Command_GOSUB                    ; $a5 GOSUB
>80e0	85 81					.word	GotoCommand                      ; $a6 GOTO
>80e2	bd 81					.word	LetCommand                       ; $a7 LET
>80e4	f6 81					.word	Command_Print                    ; $a8 PRINT
>80e6	ce 97					.word	SyntaxError                      ; $a9 READ
>80e8	4d 82					.word	RemCommand                       ; $aa REM
>80ea	77 81					.word	Command_RETURN                   ; $ab RETURN
>80ec	ce 97					.word	SyntaxError                      ; $ac THEN
>80ee	ce 97					.word	SyntaxError                      ; $ad TO
.80f0					VectorSet1:
>80f0	ce 97					.word	SyntaxError                      ; $80 !0:EOF
>80f2	ce 97					.word	SyntaxError                      ; $81 !1:SH1
>80f4	ce 97					.word	SyntaxError                      ; $82 !2:SH2
>80f6	0c 81					.word	AssertCommand                    ; $83 ASSERT
>80f8	2a 81					.word	ClearCommand                     ; $84 CLEAR
>80fa	64 81					.word	EndCommand                       ; $85 END
>80fc	ce 97					.word	SyntaxError                      ; $86 LIST
>80fe	ec 81					.word	NewCommand                       ; $87 NEW
>8100	ce 97					.word	SyntaxError                      ; $88 RESTORE
>8102	7c 82					.word	CommandRUN                       ; $89 RUN
>8104	ce 97					.word	SyntaxError                      ; $8a STOP
.8106					VectorSet2:
>8106	ce 97					.word	SyntaxError                      ; $80 !0:EOF
>8108	ce 97					.word	SyntaxError                      ; $81 !1:SH1
>810a	ce 97					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810c					AssertCommand:
.810c	a2 00		ldx #$00			ldx 	#0
.810e	20 fa 8c	jsr $8cfa			jsr 	EvaluateInteger 			; the assert test
.8111	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; exit if result is non zero.
.8114	d0 05		bne $811b			bne 	_ACExit
.8116	a9 0a		lda #$0a		lda	#10
.8118	4c dc 82	jmp $82dc		jmp	ErrorHandler
.811b					_ACExit:
.811b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811c					CallCommand:
.811c	a2 00		ldx #$00			ldx 	#0
.811e	20 0f 8d	jsr $8d0f			jsr 	Evaluate16BitInteger
.8121	ad 10 06	lda $0610			lda 	NSMantissa1
.8124	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8127	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812a					ClearCommand:
.812a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812c	85 36		sta $36				sta 	0+zTemp0
.812e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8130	85 37		sta $37				sta 	1+zTemp0
.8132					_ClearZeroLoop:
.8132	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8134	f0 18		beq $814e			beq 	_ClearZeroEnd
.8136	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8138	a9 00		lda #$00			lda 	#0
.813a					_ClearOneVariable:
.813a	91 36		sta ($36),y			sta 	(zTemp0),y
.813c	c8		iny				iny
.813d	c0 08		cpy #$08			cpy 	#8
.813f	d0 f9		bne $813a			bne 	_ClearOneVariable
.8141	18		clc				clc 								; go to the next variable
.8142	b2 36		lda ($36)			lda 	(zTemp0)
.8144	65 36		adc $36				adc 	zTemp0
.8146	85 36		sta $36				sta 	zTemp0
.8148	90 e8		bcc $8132			bcc 	_ClearZeroLoop
.814a	e6 37		inc $37				inc 	zTemp0+1
.814c	80 e4		bra $8132			bra 	_ClearZeroLoop
.814e					_ClearZeroEnd:
.814e	18		clc				clc
.814f	a5 36		lda $36				lda 	zTemp0
.8151	69 01		adc #$01			adc 	#1
.8153	8d 0c 07	sta $070c			sta 	lowMemPtr
.8156	a5 37		lda $37				lda 	zTemp0+1
.8158	69 00		adc #$00			adc 	#0
.815a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815d	20 13 8e	jsr $8e13			jsr 	StackReset
.8160	20 2e 99	jsr $992e			jsr 	StringSystemInitialise
.8163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8164					EndCommand:
.8164	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8167					Command_GOSUB:
.8167	a2 00		ldx #$00			ldx 	#0
.8169	20 0f 8d	jsr $8d0f			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.816c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.816e	20 c0 8d	jsr $8dc0			jsr 	StackOpen 					; create frame
.8171	20 f2 8d	jsr $8df2			jsr 	STKSaveCodePosition 		; save current position
.8174	4c 8a 81	jmp $818a			jmp 	GotoStackX
.8177					Command_RETURN:
.8177	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8179	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.817b	20 e7 8d	jsr $8de7			jsr 	StackCheckFrame
.817e	20 03 8e	jsr $8e03			jsr 	STKLoadCodePosition 		; restore code position
.8181	20 d9 8d	jsr $8dd9			jsr 	StackClose
.8184	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8185					GotoCommand:
.8185	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8187	20 0f 8d	jsr $8d0f			jsr 	Evaluate16BitInteger
.818a					GotoStackX:
.818a	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.818d	48		pha				pha 								; it is slightly inefficient, just in cases.
.818e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8191	fa		plx				plx
.8192	20 e3 92	jsr $92e3			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8195	4c 87 82	jmp $8287			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8198					IfCommand:
.8198	a2 00		ldx #$00			ldx 	#0 							; If what.
.819a	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 ac		cmp #$ac			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.81a1	f0 04		beq $81a7			beq 	_IfOldStyle
.81a3	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81a5	d0 13		bne $81ba			bne 	_IfStructured
.81a7					_IfOldStyle:
.81a7	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; is it zero
.81aa	f0 0b		beq $81b7			beq 	_IfFail 					; if fail, go to next line
.81ac	b1 30		lda ($30),y			lda 	(codePtr),y
.81ae	c8		iny				iny 								; consume GOTO or THEN
.81af	c9 a6		cmp #$a6			cmp 	#KWD_GOTO
.81b1	f0 01		beq $81b4			beq 	_IfGoto
.81b3	60		rts				rts 								; if THEN just continue
.81b4					_IfGoto:
.81b4	4c 85 81	jmp $8185			jmp 	GotoCommand
.81b7					_IfFail:
.81b7	4c c7 82	jmp $82c7			jmp 	EOLCommand
.81ba					_IfStructured:
>81ba	db						.byte 	$DB 						; causes a break in the emulator
.81bb	80 fd		bra $81ba			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.81bd					LetCommand:
.81bd	a2 00		ldx #$00			ldx 	#0
.81bf	ad c6 86	lda $86c6			lda 	PrecedenceLevel+"*"			; precedence > this
.81c2	20 e0 86	jsr $86e0			jsr 	EvaluateExpressionAtPrecedence
.81c5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81c7	20 25 93	jsr $9325			jsr 	CheckNextA
.81ca	e8		inx				inx 								; RHS
.81cb	20 de 86	jsr $86de			jsr 	EvaluateExpression
.81ce	ca		dex				dex
.81cf	20 d3 81	jsr $81d3			jsr 	AssignVariable
.81d2	60		rts				rts
.81d3					AssignVariable:
.81d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81d6	48		pha				pha 								; save a copy
.81d7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81da	29 10		and #$10			and 	#NSBIsString
.81dc	d0 0b		bne $81e9			bne 	_ASError
.81de	68		pla				pla 								; get back
.81df	29 10		and #$10			and 	#NSBIsString 				; check type
.81e1	d0 03		bne $81e6			bne 	_ASString
.81e3	4c 1b 87	jmp $871b			jmp 	AssignNumber
.81e6					_ASString:
.81e6	4c 89 87	jmp $8789			jmp 	AssignString
.81e9					_ASError:
.81e9	4c d8 97	jmp $97d8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81ec					NewCommand:
.81ec	20 92 92	jsr $9292			jsr 	MemoryNew
.81ef	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81f2	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear everything.
.81f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81f6					Command_Print:
.81f6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81f7					_CPLoop:
.81f7	08		php				php 								; save last action flag
.81f8	b1 30		lda ($30),y			lda 	(codePtr),y
.81fa	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81fc	f0 46		beq $8244			beq 	_CPExit
.81fe	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8200	f0 42		beq $8244			beq 	_CPExit
.8202	68		pla				pla 								; throw last action flag
.8203	b1 30		lda ($30),y			lda 	(codePtr),y
.8205	c8		iny				iny
.8206	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8208	f0 37		beq $8241			beq 	_CPContinueWithSameLine
.820a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.820c	f0 2e		beq $823c			beq 	_CPTab
.820e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8210	f0 26		beq $8238			beq 	_CPNewLine
.8212	88		dey				dey 								; undo the get.
.8213	a2 00		ldx #$00			ldx 	#0
.8215	20 ce 8c	jsr $8cce			jsr 	EvaluateValue 				; get a value into slot 0
.8218	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.821b	29 10		and #$10			and 	#NSBIsString
.821d	f0 0b		beq $822a			beq 	_CPNumber
.821f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8222	ad 08 06	lda $0608			lda 	NSMantissa0
.8225	20 2e 83	jsr $832e			jsr 	PrintStringXA
.8228	80 cc		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.822a					_CPNumber:
.822a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.822c	20 a4 8b	jsr $8ba4			jsr 	ConvertNumberToString 		; convert to string
.822f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8231	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8233	20 2e 83	jsr $832e			jsr 	PrintStringXA
.8236	80 be		bra $81f6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8238					_CPNewLine:
.8238	a9 0d		lda #$0d			lda 	#13
.823a	80 02		bra $823e			bra 	_CPPrintChar
.823c					_CPTab:
.823c	a9 09		lda #$09			lda 	#9 							; print TAB
.823e					_CPPrintChar:
.823e	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.8241					_CPContinueWithSameLine:
.8241	38		sec				sec 								; loop round with carry set, which
.8242	80 b3		bra $81f7			bra 	_CPLoop 					; will inhibit final CR
.8244					_CPExit:
.8244	28		plp				plp 								; get last action flag
.8245	b0 05		bcs $824c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8247	a9 0d		lda #$0d			lda 	#13 						; print new line
.8249	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.824c					_CPExit2:
.824c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.824d					RemCommand:
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8251	d0 06		bne $8259			bne 	_RMExit
.8253	c8		iny				iny
.8254	98		tya				tya
.8255	38		sec				sec
.8256	71 30		adc ($30),y			adc 	(codePtr),y
.8258	a8		tay				tay
.8259					_RMExit:
.8259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.825a					Command_REPEAT:
.825a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.825c	20 c0 8d	jsr $8dc0			jsr 	StackOpen
.825f	20 f2 8d	jsr $8df2			jsr 	STKSaveCodePosition 		; save loop position
.8262	60		rts				rts
.8263					Command_UNTIL:
.8263	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8265	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8267	20 e7 8d	jsr $8de7			jsr 	StackCheckFrame
.826a	a2 00		ldx #$00			ldx 	#0
.826c	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; work out the number
.826f	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; check if zero
.8272	f0 04		beq $8278			beq 	_CULoopBack 				; if so keep looping
.8274	20 d9 8d	jsr $8dd9			jsr 	StackClose		 			; return
.8277	60		rts				rts
.8278					_CULoopBack:
.8278	20 03 8e	jsr $8e03			jsr 	STKLoadCodePosition 		; loop back
.827b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.827c					CommandRUN:
.827c	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.827f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8281	85 30		sta $30				sta 	codePtr
.8283	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8285	85 31		sta $31				sta 	codePtr+1
.8287					RUNNewLine:
.8287	b2 30		lda ($30)			lda 	(codePtr)
.8289	f0 39		beq $82c4			beq 	CRNoProgram         		; no then END.
.828b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.828d	9a		txs				txs
.828e					RUNCodePointerLine:
.828e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8290					_CRIncMainLoop:
.8290	c8		iny				iny
.8291					_CRMainLoop:
.8291	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8294	b1 30		lda ($30),y			lda 	(codePtr),y
.8296	10 10		bpl $82a8			bpl 	_CRNotKeyword
.8298	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.829a	b0 04		bcs $82a0			bcs 	_CRIsKeyword
.829c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.829e	b0 1e		bcs $82be			bcs		_CRSyntaxError
.82a0					_CRIsKeyword:
.82a0	c8		iny				iny 								; consume command
.82a1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.82a2	aa		tax				tax 								; put in X for vector jump
.82a3	20 c1 82	jsr $82c1			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.82a6	80 e9		bra $8291			bra 	_CRMainLoop 				; and loop round
.82a8					_CRNotKeyword:
.82a8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.82aa	f0 e4		beq $8290			beq 	_CRIncMainLoop
.82ac	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.82ae	90 05		bcc $82b5			bcc 	_CRNotVariable
.82b0					_CRGoLet:
.82b0	20 bd 81	jsr $81bd			jsr 	LetCommand
.82b3	80 dc		bra $8291			bra 	_CRMainLoop
.82b5					_CRNotVariable:
.82b5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.82b7	f0 f7		beq $82b0			beq 	_CRGoLet
.82b9	c9 21		cmp #$21			cmp 	#KWD_PLING
.82bb	f0 f3		beq $82b0			beq 	_CRGoLet
>82bd	db						.byte 	$DB 						; causes a break in the emulator
.82be					_CRSyntaxError:
.82be	4c ce 97	jmp $97ce			jmp 	SyntaxError
.82c1					_CRCallVector0:
.82c1	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.82c4					CRNoProgram:
.82c4	4c 64 81	jmp $8164			jmp 	EndCommand
.82c7					EOLCommand:
.82c7	18		clc				clc
.82c8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.82ca	65 30		adc $30				adc 	codePtr
.82cc	85 30		sta $30				sta 	codePtr
.82ce	90 02		bcc $82d2			bcc 	_CREExit
.82d0	e6 31		inc $31				inc 	codePtr+1
.82d2					_CREExit:
.82d2	80 b3		bra $8287			bra 	RunNewLine
.82d4					Shift1Command:
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	c8		iny				iny
.82d7	0a		asl a				asl 	a
.82d8	aa		tax				tax
.82d9	7c f0 80	jmp ($80f0,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9315					CheckRightBracket:
.9315	b1 30		lda ($30),y			lda 	(codePtr),y
.9317	c8		iny				iny
.9318	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.931a	d0 0f		bne $932b			bne 	CNAFail
.931c	60		rts				rts
.931d					CheckComma:
.931d	b1 30		lda ($30),y			lda 	(codePtr),y
.931f	c8		iny				iny
.9320	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9322	d0 07		bne $932b			bne 	CNAFail
.9324	60		rts				rts
.9325					CheckNextA:
.9325	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9327	d0 02		bne $932b			bne 	CNAFail
.9329	c8		iny				iny 								; skip character
.932a	60		rts				rts 								; and exit
.932b					CNAFail:
.932b	4c ce 97	jmp $97ce			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.82dc					ErrorHandler:
.82dc	a8		tay				tay 								; find the error text
.82dd	f0 42		beq $8321			beq 	_EHEnd
.82df	a2 00		ldx #$00			ldx 	#0
.82e1					_EHFind:
.82e1	88		dey				dey 								; found the error text ?
.82e2	f0 0a		beq $82ee			beq 	_EHFound
.82e4					_EHFindZero:
.82e4	bd e7 97	lda $97e7,x			lda 	ErrorText,x 				; find the next error
.82e7	e8		inx				inx
.82e8	c9 00		cmp #$00			cmp 	#0
.82ea	d0 f8		bne $82e4			bne 	_EHFindZero
.82ec	80 f3		bra $82e1			bra 	_EHFind
.82ee					_EHFound:
.82ee	bd e7 97	lda $97e7,x			lda 	ErrorText,x 				; print the message
.82f1	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.82f4	e8		inx				inx
.82f5	bd e7 97	lda $97e7,x			lda 	ErrorText,x
.82f8	d0 f4		bne $82ee			bne 	_EHFound
.82fa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.82fc	b1 30		lda ($30),y			lda 	(codePtr),y
.82fe	d0 05		bne $8305			bne 	_EHAtMsg
.8300	c8		iny				iny
.8301	b1 30		lda ($30),y			lda 	(codePtr),y
.8303	f0 17		beq $831c			beq 	_EHCREnd
.8305					_EHAtMsg:
.8305	a2 83		ldx #$83			ldx 	#_AtMsg >> 8 				; print " at "
.8307	a9 24		lda #$24			lda 	#_AtMsg & $FF
.8309	20 2e 83	jsr $832e			jsr 	PrintStringXA
.830c	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.830e	b1 30		lda ($30),y			lda 	(codePtr),y
.8310	48		pha				pha
.8311	c8		iny				iny
.8312	b1 30		lda ($30),y			lda 	(codePtr),y
.8314	aa		tax				tax
.8315	68		pla				pla
.8316	20 71 94	jsr $9471			jsr 	ConvertInt16 				; convert XA to string
.8319	20 2e 83	jsr $832e			jsr 	PrintStringXA 				; and print it.
.831c					_EHCREnd:
.831c	a9 0d		lda #$0d			lda 	#13 						; new line
.831e	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.8321					_EHEnd:
.8321	4c 0c 80	jmp $800c			jmp 	WarmStart
>8324	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>832c	20 00
.832e					PrintStringXA:
.832e	5a		phy				phy
.832f	86 37		stx $37				stx 	zTemp0+1
.8331	85 36		sta $36				sta 	zTemp0
.8333	a0 00		ldy #$00			ldy 	#0
.8335					_PSXALoop:
.8335	b1 36		lda ($36),y			lda 	(zTemp0),y
.8337	f0 06		beq $833f			beq 	_PSXAExit
.8339	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.833c	c8		iny				iny
.833d	80 f6		bra $8335			bra 	_PSXALoop
.833f					_PSXAExit:
.833f	7a		ply				ply
.8340	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8341					UnaryTrue:
.8341	fa		plx				plx
.8342					ReturnTrue:
.8342	a9 01		lda #$01			lda 	#1  						; set to 1
.8344	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.8347	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8349	9d 00 06	sta $0600,x			sta 	NSStatus,x
.834c	60		rts				rts
.834d					UnaryFalse:
.834d	fa		plx				plx
.834e					ReturnFalse:
.834e	4c 83 8d	jmp $8d83			jmp 	NSMSetZero 					; set it all to zero
.8351					BinaryCompareEqual:
.8351	fa		plx				plx
.8352	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.8355	c9 00		cmp #$00			cmp 	#0
.8357	f0 e9		beq $8342			beq 	ReturnTrue
.8359	80 f3		bra $834e			bra 	ReturnFalse
.835b					BinaryCompareLess:
.835b	fa		plx				plx
.835c	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.835f	c9 ff		cmp #$ff			cmp 	#$FF
.8361	f0 df		beq $8342			beq 	ReturnTrue
.8363	80 e9		bra $834e			bra 	ReturnFalse
.8365					BinaryCompareGreater:
.8365	fa		plx				plx
.8366	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.8369	c9 01		cmp #$01			cmp 	#1
.836b	f0 d5		beq $8342			beq 	ReturnTrue
.836d	80 df		bra $834e			bra 	ReturnFalse
.836f					BinaryCompareNotEqual:
.836f	fa		plx				plx
.8370	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.8373	c9 00		cmp #$00			cmp 	#0
.8375	d0 cb		bne $8342			bne 	ReturnTrue
.8377	80 d5		bra $834e			bra 	ReturnFalse
.8379					BinaryCompareLessEqual:
.8379	fa		plx				plx
.837a	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.837d	c9 01		cmp #$01			cmp 	#1
.837f	d0 c1		bne $8342			bne 	ReturnTrue
.8381	80 cb		bra $834e			bra 	ReturnFalse
.8383					BinaryCompareGreaterEqual:
.8383	fa		plx				plx
.8384	20 8d 83	jsr $838d			jsr 	CompareBaseCode
.8387	c9 ff		cmp #$ff			cmp 	#$FF
.8389	d0 b7		bne $8342			bne 	ReturnTrue
.838b	80 c1		bra $834e			bra 	ReturnFalse
.838d					CompareBaseCode:
.838d	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; make both values if references.
.8390	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8393	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8396	29 10		and #$10			and 	#NSTString
.8398	d0 40		bne $83da			bne 	_CBCString
.839a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.839d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a0	d0 3b		bne $83dd			bne 	_CBCFloat
.83a2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.83a5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83a8	29 08		and #$08			and 	#NSTFloat
.83aa	d0 31		bne $83dd			bne 	_CBCFloat
.83ac	20 e0 83	jsr $83e0			jsr 	CompareFixMinusZero
.83af	e8		inx				inx
.83b0	20 e0 83	jsr $83e0			jsr 	CompareFixMinusZero
.83b3	ca		dex				dex
.83b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.83b7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83ba	10 0b		bpl $83c7			bpl 	_CDCSameSign
.83bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.83bf	30 16		bmi $83d7			bmi 	_CBCLess 					; return $FF
.83c1					_CBCGreater:
.83c1	a9 01		lda #$01			lda 	#1
.83c3	60		rts				rts
.83c4					_CBCEqual:
.83c4	a9 00		lda #$00			lda 	#0
.83c6	60		rts				rts
.83c7					_CDCSameSign:
.83c7	20 f0 84	jsr $84f0			jsr 	SubTopTwoStack 				; unsigned subtract
.83ca	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; or the mantissa together
.83cd	f0 f5		beq $83c4			beq 	_CBCEqual 					; -0 == 0
.83cf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.83d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.83d5	10 ea		bpl $83c1			bpl 	_CBCGreater
.83d7					_CBCLess:
.83d7	a9 ff		lda #$ff			lda 	#$FF
.83d9	60		rts				rts
.83da					_CBCString:
.83da	4c 46 84	jmp $8446			jmp 	CompareStrings
.83dd					_CBCFloat:
.83dd	4c 6d 95	jmp $956d			jmp 	CompareFloat
.83e0					CompareFixMinusZero:
.83e0	20 b3 8d	jsr $8db3			jsr 	NSMIsZero
.83e3	d0 03		bne $83e8			bne 	_CFXMZNotZero
.83e5	9e 00 06	stz $0600,x			stz 	NSStatus,x
.83e8					_CFXMZNotZero:
.83e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.83e9					StringConcat:
.83e9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.83ec	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83ef	29 18		and #$18			and 	#NSBTypeMask
.83f1	c9 10		cmp #$10			cmp 	#NSTString
.83f3	d0 4e		bne $8443			bne		_SCType
.83f5	64 38		stz $38				stz 	zTemp1 						; counting total length
.83f7	e8		inx				inx
.83f8	20 16 84	jsr $8416			jsr 	_SCSetupZ0 					; setup for second
.83fb	20 21 84	jsr $8421			jsr 	_SCLengthZ0 				; length for second
.83fe	ca		dex				dex
.83ff	20 16 84	jsr $8416			jsr 	_SCSetupZ0 					; setup for first
.8402	20 21 84	jsr $8421			jsr 	_SCLengthZ0 				; length for first
.8405	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8407	20 4f 99	jsr $994f			jsr 	StringTempAllocate
.840a	20 34 84	jsr $8434			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.840d	e8		inx				inx
.840e	20 16 84	jsr $8416			jsr 	_SCSetupZ0 					; copy second out
.8411	20 34 84	jsr $8434			jsr 	_SCCopy
.8414	ca		dex				dex
.8415	60		rts				rts
.8416					_SCSetupZ0:
.8416	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8419	85 36		sta $36				sta 	zTemp0
.841b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.841e	85 37		sta $37				sta 	zTemp0+1
.8420	60		rts				rts
.8421					_SCLengthZ0:
.8421	5a		phy				phy
.8422	a0 00		ldy #$00			ldy 	#0
.8424					_SCLenLoop:
.8424	b1 36		lda ($36),y			lda 	(zTemp0),y
.8426	f0 0a		beq $8432			beq 	_SCLExit
.8428	c8		iny				iny
.8429	e6 38		inc $38				inc 	zTemp1
.842b	10 f7		bpl $8424			bpl		_SCLenLoop
.842d	a9 09		lda #$09		lda	#9
.842f	4c dc 82	jmp $82dc		jmp	ErrorHandler
.8432					_SCLExit:
.8432	7a		ply				ply
.8433	60		rts				rts
.8434					_SCCopy:
.8434	5a		phy				phy
.8435	a0 00		ldy #$00			ldy 	#0
.8437					_SCCopyLoop:
.8437	b1 36		lda ($36),y			lda 	(zTemp0),y
.8439	f0 06		beq $8441			beq 	_SCCExit
.843b	20 8d 99	jsr $998d			jsr 	StringTempWrite
.843e	c8		iny				iny
.843f	80 f6		bra $8437			bra 	_SCCopyLoop
.8441					_SCCExit:
.8441	7a		ply				ply
.8442	60		rts				rts
.8443					_SCType:
.8443	4c d8 97	jmp $97d8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.932e					IntegerDivide:
.932e	fa		plx				plx
.932f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9332	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9335	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9336	0a		asl a				asl 	a
.9337	10 05		bpl $933e			bpl 	_NotRef
.9339	48		pha				pha
.933a	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.933d	68		pla				pla
.933e					_NotRef:
.933e	0a		asl a				asl 	a
.933f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9341	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9344	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9347	f0 03		beq $934c			beq 	_IntegerCode 				; if clear, then we have two integers
.9349	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.934c					_IntegerCode:
.934c	20 6e 93	jsr $936e			jsr 	CheckDivideZero 			; do div zero check
.934f	20 a6 93	jsr $93a6			jsr 	Int32Divide 				; do the division
.9352	20 63 94	jsr $9463			jsr 	CalculateSign 				; calculate result sign
.9355					NSMCopyPlusTwoToZero:
.9355	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9358	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.935b	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.935e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9361	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9364	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9367	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.936a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.936d	60		rts				rts
.936e					CheckDivideZero:
.936e	e8		inx				inx
.936f	20 b3 8d	jsr $8db3			jsr 	NSMIsZero
.9372	f0 02		beq $9376			beq 	_CDVError
.9374	ca		dex				dex
.9375	60		rts				rts
.9376					_CDVError:
.9376	a9 03		lda #$03		lda	#3
.9378	4c dc 82	jmp $82dc		jmp	ErrorHandler
.937b					IntegerModulus:
.937b	fa		plx				plx
.937c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.937f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9382	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9383	0a		asl a				asl 	a
.9384	10 05		bpl $938b			bpl 	_NotRef
.9386	48		pha				pha
.9387	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.938a	68		pla				pla
.938b					_NotRef:
.938b	0a		asl a				asl 	a
.938c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.938e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9391	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9394	f0 03		beq $9399			beq 	_IntegerCode 				; if clear, then we have two integers
.9396	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.9399					_IntegerCode:
.9399	20 6e 93	jsr $936e			jsr 	CheckDivideZero 			; do div zero check
.939c	20 a6 93	jsr $93a6			jsr 	Int32Divide 				; do the division
.939f	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.93a2	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.93a5	60		rts				rts
.93a6					Int32Divide:
.93a6	48		pha				pha 								; save AXY
.93a7	5a		phy				phy
.93a8	20 5a 8d	jsr $8d5a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93ab	20 7f 8d	jsr $8d7f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.93ae	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.93b0					_I32DivideLoop:
.93b0	e8		inx				inx
.93b1	e8		inx				inx
.93b2	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.93b5	ca		dex				dex
.93b6	ca		dex				dex
.93b7	20 99 8d	jsr $8d99			jsr 	NSMRotateLeft
.93ba	20 e6 93	jsr $93e6			jsr 	DivideCheckSubtract 		; check if subtract possible
.93bd	90 03		bcc $93c2			bcc 	_I32DivideNoCarryIn
.93bf	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.93c2					_I32DivideNoCarryIn:
.93c2	88		dey				dey 								; loop round till division completed.
.93c3	d0 eb		bne $93b0			bne 	_I32DivideLoop
.93c5	7a		ply				ply 								; restore AXY and exit
.93c6	68		pla				pla
.93c7	60		rts				rts
.93c8					Int32ShiftDivide:
.93c8	48		pha				pha 								; save AY
.93c9	5a		phy				phy
.93ca	e8		inx				inx 								; clear S[X+2]
.93cb	e8		inx				inx
.93cc	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.93cf	ca		dex				dex
.93d0	ca		dex				dex
.93d1	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.93d3					_I32SDLoop:
.93d3	20 e6 93	jsr $93e6			jsr 	DivideCheckSubtract 		; check if subtract possible
.93d6	e8		inx				inx
.93d7	e8		inx				inx
.93d8	20 99 8d	jsr $8d99			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.93db	ca		dex				dex
.93dc	ca		dex				dex
.93dd	20 99 8d	jsr $8d99			jsr 	NSMRotateLeft
.93e0	88		dey				dey 	 							; do 31 times
.93e1	d0 f0		bne $93d3			bne 	_I32SDLoop
.93e3	7a		ply				ply 								; restore AY and exit
.93e4	68		pla				pla
.93e5	60		rts				rts
.93e6					DivideCheckSubtract:
.93e6	20 f0 84	jsr $84f0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.93e9	b0 04		bcs $93ef			bcs 	_DCSExit 					; if carry set, then could do, exit
.93eb	20 ca 84	jsr $84ca			jsr 	AddTopTwoStack 				; add it back in
.93ee	18		clc				clc 								; and return False
.93ef					_DCSExit:
.93ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.93f0					MulInteger:
.93f0	fa		plx				plx
.93f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.93f4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93f7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93f8	0a		asl a				asl 	a
.93f9	10 05		bpl $9400			bpl 	_NotRef
.93fb	48		pha				pha
.93fc	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93ff	68		pla				pla
.9400					_NotRef:
.9400	0a		asl a				asl 	a 							; put MSB of type into A:7
.9401	30 0b		bmi $940e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9403	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9406	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9409	f0 06		beq $9411			beq 	_IntegerCode 				; if clear, then we have two integers
.940b	4c 44 96	jmp $9644			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.940e					_StringData:
.940e	4c e2 97	jmp $97e2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9411					_IntegerCode:
.9411	20 1e 94	jsr $941e			jsr 	MultiplyShort
.9414	c9 00		cmp #$00			cmp 	#0
.9416	f0 05		beq $941d			beq 	_MIExit
.9418	a9 04		lda #$04		lda	#4
.941a	4c dc 82	jmp $82dc		jmp	ErrorHandler
.941d					_MIExit:
.941d	60		rts				rts
.941e					MultiplyShort:
.941e	5a		phy				phy 								; save Y
.941f	20 5a 8d	jsr $8d5a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9422	20 7f 8d	jsr $8d7f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9425	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9427					_I32MLoop:
.9427	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.942a	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.942d	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9430	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9433	f0 28		beq $945d			beq 	_I32MExit 					; exit if zero
.9435	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9438	29 01		and #$01			and 	#1
.943a	f0 0e		beq $944a			beq 	_I32MNoAdd
.943c	20 ca 84	jsr $84ca			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.943f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9442	10 06		bpl $944a			bpl 	_I32MNoAdd
.9444					_I32ShiftRight:
.9444	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight 				; shift S[X] right
.9447	c8		iny				iny 								; increment shift count
.9448	80 0a		bra $9454			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.944a					_I32MNoAdd:
.944a	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.944d	70 f5		bvs $9444			bvs 	_I32ShiftRight 				; instead.
.944f	e8		inx				inx
.9450	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9453	ca		dex				dex
.9454					_I32MShiftUpper:
.9454	e8		inx				inx 								; shift S[X+2] right
.9455	e8		inx				inx
.9456	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight
.9459	ca		dex				dex
.945a	ca		dex				dex
.945b	80 ca		bra $9427			bra 	_I32MLoop 					; try again.
.945d					_I32MExit:
.945d	20 63 94	jsr $9463			jsr 	CalculateSign
.9460	98		tya				tya 								; shift in A
.9461	7a		ply				ply 								; restore Y and exit
.9462	60		rts				rts
.9463					CalculateSign:
.9463	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9466	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9469	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.946c	0a		asl a				asl 	a 							; shift bit 7 into carry
.946d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9470	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8446					CompareStrings:
.8446	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8449	3d 01 06	and $0601,x			and 	NSStatus+1,x
.844c	29 10		and #$10			and 	#NSBIsString
.844e	f0 2c		beq $847c			beq 	_CSTypeError
.8450	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8453	85 36		sta $36				sta 	zTemp0
.8455	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8458	85 37		sta $37				sta 	zTemp0+1
.845a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.845d	85 38		sta $38				sta 	zTemp1
.845f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8462	85 39		sta $39				sta 	zTemp1+1
.8464	5a		phy				phy 								; save Y so we can access strings
.8465	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8467					_CSLoop:
.8467	c8		iny				iny
.8468	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.846a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.846c	d0 06		bne $8474			bne 	_CSDifferent
.846e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8470	d0 f5		bne $8467			bne 	_CSLoop 					; still comparing
.8472					_CSExit:
.8472	7a		ply				ply 								; reached end, return zero in A from EOS
.8473	60		rts				rts
.8474					_CSDifferent:
.8474	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8476	90 fa		bcc $8472			bcc		_CSExit
.8478	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.847a	80 f6		bra $8472			bra 	_CSExit
.847c					_CSTypeError:
.847c	4c d8 97	jmp $97d8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.847f					ShiftLeft:
.847f	38		sec				sec
.8480	80 01		bra $8483			bra 	ShiftMain
.8482					ShiftRight:
.8482	18		clc				clc
.8483					ShiftMain:
.8483	fa		plx				plx 								; restore X
.8484	08		php				php 								; save direction
.8485	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8488	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.848b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.848c	0a		asl a				asl 	a
.848d	10 05		bpl $8494			bpl 	_NotRef
.848f	48		pha				pha
.8490	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8493	68		pla				pla
.8494					_NotRef:
.8494	0a		asl a				asl 	a
.8495	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8497	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.849a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.849d	f0 03		beq $84a2			beq 	_IntegerCode 				; if clear, then we have two integers
.849f	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.84a2					_IntegerCode:
.84a2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.84a5	29 e0		and #$e0			and 	#$E0
.84a7	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.84aa	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.84ad	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.84b0	d0 13		bne $84c5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.84b2					_SMLoop:
.84b2	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.84b5	30 11		bmi $84c8			bmi 	_SMExit 					; exit if done.
.84b7	28		plp				plp 								; restore direcition setting
.84b8	08		php				php
.84b9	90 05		bcc $84c0			bcc 	_SMRight
.84bb	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; shift left if CS
.84be	80 f2		bra $84b2			bra 	_SMLoop
.84c0					_SMRight:
.84c0	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight 				; shift right if CC
.84c3	80 ed		bra $84b2			bra 	_SMLoop
.84c5					_SMExit0:
.84c5	20 83 8d	jsr $8d83			jsr 	NSMSetZero 					; return zero.
.84c8					_SMExit:
.84c8	28		plp				plp 								; throw direction
.84c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.84ca					AddTopTwoStack:
.84ca	18		clc				clc
.84cb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84ce	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.84d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84d4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84d7	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.84da	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84dd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84e0	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.84e3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84e6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84e9	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.84ec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84ef	60		rts				rts
.84f0					SubTopTwoStack:
.84f0	38		sec				sec
.84f1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84f4	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.84f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84fa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84fd	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8500	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8503	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8506	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8509	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.850c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.850f	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8512	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8515	60		rts				rts
.8516					AddInteger:
.8516	fa		plx				plx
.8517	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.851a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.851d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.851e	0a		asl a				asl 	a
.851f	10 05		bpl $8526			bpl 	_NotRef
.8521	48		pha				pha
.8522	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8525	68		pla				pla
.8526					_NotRef:
.8526	0a		asl a				asl 	a 							; put MSB of type into A:7
.8527	30 0b		bmi $8534			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8529	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.852c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.852f	f0 06		beq $8537			beq 	_IntegerCode 				; if clear, then we have two integers
.8531	4c cc 94	jmp $94cc			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8534					_StringData:
.8534	4c e9 83	jmp $83e9			jmp 	StringConcat							; at least one string - don't know both are strings.
.8537					_IntegerCode:
.8537					AddCode:
.8537	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.853a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.853d	10 8b		bpl $84ca			bpl 	AddTopTwoStack
.853f	20 f0 84	jsr $84f0			jsr 	SubTopTwoStack 				; do a physical subtraction
.8542	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8545	10 09		bpl $8550			bpl 	_AddExit
.8547	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.854a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854d	20 38 8d	jsr $8d38			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8550					_AddExit:
.8550	60		rts				rts
.8551					SubInteger:
.8551	fa		plx				plx
.8552	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8555	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8558	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8559	0a		asl a				asl 	a
.855a	10 05		bpl $8561			bpl 	_NotRef
.855c	48		pha				pha
.855d	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8560	68		pla				pla
.8561					_NotRef:
.8561	0a		asl a				asl 	a 							; put MSB of type into A:7
.8562	30 0b		bmi $856f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8564	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8567	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.856a	f0 06		beq $8572			beq 	_IntegerCode 				; if clear, then we have two integers
.856c	4c d1 94	jmp $94d1			jmp 	FloatingPointSub 							; otherwise at least one float.
.856f					_StringData:
.856f	4c e2 97	jmp $97e2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8572					_IntegerCode:
.8572	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8575	49 80		eor #$80			eor 	#$80
.8577	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.857a	80 bb		bra $8537			bra 	AddCode 					; and do the same code as add.
.857c					AndInteger:
.857c	fa		plx				plx
.857d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8580	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8583	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8584	0a		asl a				asl 	a
.8585	10 05		bpl $858c			bpl 	_NotRef
.8587	48		pha				pha
.8588	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.858b	68		pla				pla
.858c					_NotRef:
.858c	0a		asl a				asl 	a
.858d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.858f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8592	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8595	f0 03		beq $859a			beq 	_IntegerCode 				; if clear, then we have two integers
.8597	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.859a					_IntegerCode:
.859a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.859d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.85a0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85a6	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.85a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85ac	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85af	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.85b2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85b5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85b8	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.85bb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85be	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85c1	60		rts				rts
.85c2					OraInteger:
.85c2	fa		plx				plx
.85c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85c6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85ca	0a		asl a				asl 	a
.85cb	10 05		bpl $85d2			bpl 	_NotRef
.85cd	48		pha				pha
.85ce	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85d1	68		pla				pla
.85d2					_NotRef:
.85d2	0a		asl a				asl 	a
.85d3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85d5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85d8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85db	f0 03		beq $85e0			beq 	_IntegerCode 				; if clear, then we have two integers
.85dd	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.85e0					_IntegerCode:
.85e0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85e3	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.85e6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85e9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85ec	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.85ef	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85f2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85f5	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.85f8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85fb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85fe	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8601	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8604	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8607	60		rts				rts
.8608					EorInteger:
.8608	fa		plx				plx
.8609	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.860f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8610	0a		asl a				asl 	a
.8611	10 05		bpl $8618			bpl 	_NotRef
.8613	48		pha				pha
.8614	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8617	68		pla				pla
.8618					_NotRef:
.8618	0a		asl a				asl 	a
.8619	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.861e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8621	f0 03		beq $8626			beq 	_IntegerCode 				; if clear, then we have two integers
.8623	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.8626					_IntegerCode:
.8626	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8629	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.862c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.862f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8632	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8635	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8638	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.863b	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.863e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8641	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8644	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8647	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.864a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.864d	60		rts				rts
.864e					WordIndirect:
.864e	fa		plx				plx
.864f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8652	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8655	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8656	0a		asl a				asl 	a
.8657	10 05		bpl $865e			bpl 	_NotRef
.8659	48		pha				pha
.865a	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.865d	68		pla				pla
.865e					_NotRef:
.865e	0a		asl a				asl 	a
.865f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8661	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8664	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8667	f0 03		beq $866c			beq 	_IntegerCode 				; if clear, then we have two integers
.8669	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.866c					_IntegerCode:
.866c	20 37 85	jsr $8537			jsr 	AddCode 					; add the two values
.866f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8671	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8674	60		rts				rts
.8675					ByteIndirect:
.8675	fa		plx				plx
.8676	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8679	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.867c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.867d	0a		asl a				asl 	a
.867e	10 05		bpl $8685			bpl 	_NotRef
.8680	48		pha				pha
.8681	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8684	68		pla				pla
.8685					_NotRef:
.8685	0a		asl a				asl 	a
.8686	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8688	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.868b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.868e	f0 03		beq $8693			beq 	_IntegerCode 				; if clear, then we have two integers
.8690	4c d8 97	jmp $97d8			jmp 	TypeError 					; anything else, type mismatch.
.8693					_IntegerCode:
.8693	20 37 85	jsr $8537			jsr 	AddCode 					; add the two values
.8696	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8698	9d 00 06	sta $0600,x			sta 	NSStatus,x
.869b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9471					ConvertInt16:
.9471	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9474	8e 10 06	stx $0610			stx 	NSMantissa1
.9477	9c 18 06	stz $0618			stz 	NSMantissa2
.947a	9c 20 06	stz $0620			stz 	NSMantissa3
.947d	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9480	a2 00		ldx #$00			ldx 	#0 							; stack level
.9482	a9 0a		lda #$0a			lda 	#10 						; base
.9484	80 00		bra $9486			bra 	ConvertInt32
.9486					ConvertInt32:
.9486	5a		phy				phy
.9487	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9489	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.948c	10 08		bpl $9496			bpl 	_CI32NotNeg
.948e	48		pha				pha
.948f	a9 2d		lda #$2d			lda 	#'-'
.9491	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9494	c8		iny				iny
.9495	68		pla				pla
.9496					_CI32NotNeg:
.9496	20 a4 94	jsr $94a4			jsr 	_CI32DivideConvert 			; recursive conversion
.9499	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.949b	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.949e	7a		ply				ply
.949f	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.94a1	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.94a3	60		rts				rts
.94a4					_CI32DivideConvert:
.94a4	e8		inx				inx 								; write to next slot up
.94a5	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.94a8	ca		dex				dex
.94a9	20 a6 93	jsr $93a6			jsr 	Int32Divide 				; divide
.94ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.94af	48		pha				pha
.94b0	20 55 93	jsr $9355			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.94b3	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; is it zero ?
.94b6	f0 06		beq $94be			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.94b8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.94bb	20 a4 94	jsr $94a4			jsr 	_CI32DivideConvert 			; and recusrively call.
.94be					_CI32NoRecurse:
.94be	68		pla				pla 								; remainder
.94bf	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.94c1	90 02		bcc $94c5			bcc 	_CI32NotHex
.94c3	69 26		adc #$26			adc 	#6+32
.94c5					_CI32NotHex:
.94c5	69 30		adc #$30			adc 	#48
.94c7	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.94ca	c8		iny				iny
.94cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.869c					PrecedenceLevel:
>869c	04					.byte	 4	; $00 <<
>869d	02					.byte	 2	; $01 <=
>869e	02					.byte	 2	; $02 <>
>869f	00					.byte	 0	; $03 !!3
>86a0	00					.byte	 0	; $04 ><
>86a1	02					.byte	 2	; $05 >=
>86a2	04					.byte	 4	; $06 >>
>86a3	00					.byte	 0	; $07 !!7
>86a4	00					.byte	 0	; $08 !!8
>86a5	00					.byte	 0	; $09 !!9
>86a6	00					.byte	 0	; $0a !!10
>86a7	00					.byte	 0	; $0b !!11
>86a8	00					.byte	 0	; $0c !!12
>86a9	00					.byte	 0	; $0d !!13
>86aa	00					.byte	 0	; $0e !!14
>86ab	00					.byte	 0	; $0f !!15
>86ac	00					.byte	 0	; $10 @
>86ad	00					.byte	 0	; $11 !!17
>86ae	00					.byte	 0	; $12 !!18
>86af	00					.byte	 0	; $13 [
>86b0	04					.byte	 4	; $14 \
>86b1	00					.byte	 0	; $15 ]
>86b2	01					.byte	 1	; $16 ^
>86b3	00					.byte	 0	; $17 _
>86b4	00					.byte	 0	; $18 `
>86b5	00					.byte	 0	; $19 !!25
>86b6	00					.byte	 0	; $1a !!26
>86b7	00					.byte	 0	; $1b {
>86b8	01					.byte	 1	; $1c |
>86b9	00					.byte	 0	; $1d }
>86ba	00					.byte	 0	; $1e ~
>86bb	00					.byte	 0	; $1f [7m<7F>[m
>86bc	00					.byte	 0	; $20
>86bd	05					.byte	 5	; $21 !
>86be	00					.byte	 0	; $22 "
>86bf	00					.byte	 0	; $23 #
>86c0	05					.byte	 5	; $24 $
>86c1	04					.byte	 4	; $25 %
>86c2	01					.byte	 1	; $26 &
>86c3	00					.byte	 0	; $27 '
>86c4	00					.byte	 0	; $28 (
>86c5	00					.byte	 0	; $29 )
>86c6	04					.byte	 4	; $2a *
>86c7	03					.byte	 3	; $2b +
>86c8	00					.byte	 0	; $2c ,
>86c9	03					.byte	 3	; $2d -
>86ca	00					.byte	 0	; $2e .
>86cb	04					.byte	 4	; $2f /
>86cc	00					.byte	 0	; $30 0
>86cd	00					.byte	 0	; $31 1
>86ce	00					.byte	 0	; $32 2
>86cf	00					.byte	 0	; $33 3
>86d0	00					.byte	 0	; $34 4
>86d1	00					.byte	 0	; $35 5
>86d2	00					.byte	 0	; $36 6
>86d3	00					.byte	 0	; $37 7
>86d4	00					.byte	 0	; $38 8
>86d5	00					.byte	 0	; $39 9
>86d6	00					.byte	 0	; $3a :
>86d7	00					.byte	 0	; $3b ;
>86d8	02					.byte	 2	; $3c <
>86d9	02					.byte	 2	; $3d =
>86da	02					.byte	 2	; $3e >
>86db	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.86dc					EvaluateExpressionAt0:
.86dc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.86de					EvaluateExpression:
.86de	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.86e0					EvaluateExpressionAtPrecedence:
.86e0	48		pha				pha 								; save precedence level
.86e1	20 af 89	jsr $89af			jsr 	EvaluateTerm 				; evaluate term into level X.
.86e4	68		pla				pla 								; restore precedence level.
.86e5					_EXPRLoop:
.86e5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.86e7	b1 30		lda ($30),y			lda 	(codePtr),y
.86e9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.86eb	b0 25		bcs $8712			bcs 	_EXPRExit
.86ed	da		phx				phx 								; read the operator precedence
.86ee	aa		tax				tax
.86ef	bd 9c 86	lda $869c,x			lda 	PrecedenceLevel,x
.86f2	fa		plx				plx
.86f3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.86f5	f0 1b		beq $8712			beq 	_EXPRExit
.86f7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.86f9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.86fb	c5 37		cmp $37				cmp 	zTemp0+1
.86fd	b0 13		bcs $8712			bcs		_EXPRExit 					; if current >= operator exit
.86ff	48		pha				pha 								; save current precedence.
.8700	b1 30		lda ($30),y			lda 	(codePtr),y
.8702	c8		iny				iny
.8703	48		pha				pha
.8704	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8706	e8		inx				inx 								; work out the right hand side.
.8707	20 e0 86	jsr $86e0			jsr 	EvaluateExpressionAtPrecedence
.870a	ca		dex				dex
.870b	68		pla				pla 								; get operator, call the code.
.870c	20 15 87	jsr $8715			jsr 	_EXPRCaller
.870f	68		pla				pla 								; restore precedence level
.8710	80 d3		bra $86e5			bra 	_EXPRLoop 					; and go round.
.8712					_EXPRExit:
.8712	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8714	60		rts				rts
.8715					_EXPRCaller:
.8715	da		phx				phx 								; save on stack, first thing is to restore it
.8716	0a		asl a				asl 	a 							; double so can use vectors into X
.8717	aa		tax				tax
.8718	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.94cc					FloatingPointAdd:
.94cc	20 6d 96	jsr $966d			jsr 	FloatPrepare 				; prepare for floats
.94cf	80 0b		bra $94dc			bra 	FloatAdd
.94d1					FloatingPointSub:
.94d1	20 6d 96	jsr $966d			jsr 	FloatPrepare 				; prepare for floats
.94d4					FloatSubtract:
.94d4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.94d7	49 80		eor #$80			eor 	#$80
.94d9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.94dc					FloatAdd:
.94dc	48		pha				pha
.94dd	5a		phy				phy
.94de	20 7e 96	jsr $967e			jsr 	NSNormalise 				; normalise S[X]
.94e1	f0 54		beq $9537			beq 	_FAReturn1
.94e3	e8		inx				inx 								; normalise S[X+1]
.94e4	20 7e 96	jsr $967e			jsr 	NSNormalise
.94e7	ca		dex				dex
.94e8	c9 00		cmp #$00			cmp 	#0
.94ea	f0 6f		beq $955b			beq 	_FAExit 					; if so, just return A
.94ec	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.94ef	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.94f2	f0 1b		beq $950f			beq 	_FAExponentsEqual
.94f4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.94f7	a8		tay				tay
.94f8	38		sec				sec 								; do a signed comparison of the exponents.
.94f9	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.94fc	50 02		bvc $9500			bvc 	_FANoSignedChange
.94fe	49 80		eor #$80			eor 	#$80
.9500					_FANoSignedChange:
.9500	29 80		and #$80			and 	#$80
.9502	10 03		bpl $9507			bpl 	_FAHaveMax
.9504	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9507					_FAHaveMax:
.9507	20 5e 95	jsr $955e			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.950a	e8		inx				inx
.950b	20 5e 95	jsr $955e			jsr 	_FAShiftToExponent
.950e	ca		dex				dex
.950f					_FAExponentsEqual:
.950f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9512	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9515	30 10		bmi $9527			bmi 	_FADifferentSigns
.9517	20 ca 84	jsr $84ca			jsr 	AddTopTwoStack 				; do the add of the mantissae
.951a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.951d	10 3c		bpl $955b			bpl 	_FAExit 					; if no, we are done.
.951f	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9522	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9525	80 34		bra $955b			bra 	_FAExit
.9527					_FADifferentSigns:
.9527	20 f0 84	jsr $84f0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.952a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.952d	10 2c		bpl $955b			bpl 	_FAExit 					; if no, we are done.
.952f	20 2f 8d	jsr $8d2f			jsr 	NSMNegate 					; netate result
.9532	20 38 8d	jsr $8d38			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9535	80 24		bra $955b			bra 	_FAExit
.9537					_FAReturn1:
.9537	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.953a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.953d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9540	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9543	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9546	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9549	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.954c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.954f	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9552	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9555	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9558	9d 00 06	sta $0600,x			sta 	NSStatus,x
.955b					_FAExit:
.955b	7a		ply				ply
.955c	68		pla				pla
.955d	60		rts				rts
.955e					_FAShiftToExponent:
.955e					_FAShiftToExponent2:
.955e	98		tya				tya 								; compare Y to exponent
.955f	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9562	f0 08		beq $956c			beq 	_FASEExit 					; exit if so.
.9564	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight	 			; shift the mantissa right
.9567	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.956a	80 f2		bra $955e			bra 	_FAShiftToExponent2
.956c					_FASEExit:
.956c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.956d					CompareFloat:
.956d	20 d4 94	jsr $94d4			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9570	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9573	29 f8		and #$f8			and 	#$F8
.9575	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9578	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.957b	f0 09		beq $9586			beq 	_FCExit 					; zero, so approximately identical
.957d	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.957f	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9582	10 02		bpl $9586			bpl 	_FCExit
.9584					_FCNegative:
.9584	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9586					_FCExit:
.9586	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9587					FDivideCommand:
.9587	fa		plx				plx	 								; restore stack position
.9588	20 6d 96	jsr $966d			jsr 	FloatPrepare 				; prepare for floats
.958b					FloatDivide:
.958b	48		pha				pha
.958c	e8		inx				inx
.958d	20 7e 96	jsr $967e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9590	ca		dex				dex
.9591	c9 00		cmp #$00			cmp 	#0
.9593	f0 20		beq $95b5			beq 	_FDZero
.9595	20 7e 96	jsr $967e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9598	f0 19		beq $95b3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.959a	20 c8 93	jsr $93c8			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.959d	20 55 93	jsr $9355			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.95a0	20 7e 96	jsr $967e			jsr		NSNormalise 				; renormalise
.95a3	20 63 94	jsr $9463			jsr 	CalculateSign 				; calculate result sign
.95a6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.95a9	38		sec				sec
.95aa	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.95ad	38		sec				sec
.95ae	e9 1e		sbc #$1e			sbc 	#30
.95b0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95b3					_FDExit:
.95b3	68		pla				pla
.95b4	60		rts				rts
.95b5					_FDZero:
.95b5	a9 03		lda #$03		lda	#3
.95b7	4c dc 82	jmp $82dc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.95ba					FloatFractionalPart:
.95ba	5a		phy				phy
.95bb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.95be	29 7f		and #$7f			and 	#$7F
.95c0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95c3	20 7e 96	jsr $967e			jsr 	NSNormalise
.95c6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.95c9	38		sec				sec
.95ca	e9 e0		sbc #$e0			sbc 	#$E0
.95cc	90 31		bcc $95ff			bcc 	_FFPExit 					; already fractional
.95ce	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.95d0	b0 2a		bcs $95fc			bcs 	_FFPZero
.95d2	a8		tay				tay 								; put count to do in Y
.95d3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.95d6	20 01 96	jsr $9601			jsr 	_FFPPartial
.95d9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95dc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.95df	20 01 96	jsr $9601			jsr 	_FFPPartial
.95e2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95e8	20 01 96	jsr $9601			jsr 	_FFPPartial
.95eb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ee	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95f1	20 01 96	jsr $9601			jsr 	_FFPPartial
.95f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95f7	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; zeroed check.
.95fa	d0 03		bne $95ff			bne 	_FFPExit
.95fc					_FFPZero:
.95fc	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.95ff					_FFPExit:
.95ff	7a		ply				ply
.9600	60		rts				rts
.9601					_FFPPartial:
.9601	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9603	f0 17		beq $961c			beq 	_FFFPPExit
.9605	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9607	b0 0c		bcs $9615			bcs 	_FFFPPWholeByte
.9609	5a		phy				phy
.960a					_FFFPPLeft:
.960a	0a		asl a				asl 	a
.960b	88		dey				dey
.960c	d0 fc		bne $960a			bne 	_FFFPPLeft
.960e	7a		ply				ply
.960f					_FFFPPRight:
.960f	4a		lsr a				lsr 	a
.9610	88		dey				dey
.9611	d0 fc		bne $960f			bne 	_FFFPPRight
.9613	80 07		bra $961c			bra 	_FFFPPExit
.9615					_FFFPPWholeByte:
.9615	98		tya				tya 								; subtract 8 from count
.9616	38		sec				sec
.9617	e9 08		sbc #$08			sbc 	#8
.9619	a8		tay				tay
.961a	a9 00		lda #$00			lda 	#0 							; and clear all
.961c					_FFFPPExit:
.961c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.961d					FloatIntegerPart:
.961d	48		pha				pha
.961e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9621	f0 1f		beq $9642			beq 	_FIPExit 					; if so do nothing
.9623	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; is it zero ?
.9626	f0 17		beq $963f			beq 	_FIPZero 					; if so return zero.
.9628	20 7e 96	jsr $967e			jsr 	NSNormalise 				; normalise
.962b	f0 12		beq $963f			beq 	_FIPZero 					; normalised to zero, exit zero
.962d					_FIPShift:
.962d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9630	10 08		bpl $963a			bpl 	_FIPCheckZero
.9632	20 a6 8d	jsr $8da6			jsr 	NSMShiftRight 				; shift mantissa right
.9635	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9638	80 f3		bra $962d			bra 	_FIPShift
.963a					_FIPCheckZero:
.963a	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; avoid -0 problem
.963d	d0 03		bne $9642			bne 	_FIPExit 					; set to zero if mantissa zero.
.963f					_FIPZero:
.963f	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.9642					_FIPExit:
.9642	68		pla				pla
.9643	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9644					FloatingPointMultiply:
.9644	20 6d 96	jsr $966d			jsr 	FloatPrepare 				; prepare for floats
.9647					FloatMultiply:
.9647	48		pha				pha
.9648	20 7e 96	jsr $967e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.964b	f0 1b		beq $9668			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.964d	e8		inx				inx
.964e	20 7e 96	jsr $967e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9651	ca		dex				dex
.9652	c9 00		cmp #$00			cmp 	#0
.9654	f0 0f		beq $9665			beq 	_FDSetZero
.9656	20 1e 94	jsr $941e			jsr 	MultiplyShort 				; calculate the result.
.9659	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.965c	18		clc				clc
.965d	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9660	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9663	80 03		bra $9668			bra 	_FDExit
.9665					_FDSetZero:
.9665	20 83 8d	jsr $8d83			jsr 	NSMSetZero 					; return 0
.9668					_FDExit:
.9668	20 7e 96	jsr $967e			jsr 	NSNormalise 				; normalise the result
.966b	68		pla				pla
.966c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.966d					FloatPrepare:
.966d	20 ee 87	jsr $87ee			jsr 	DereferenceTopTwo 			; dereference the top two values
.9670	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9673	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9676	29 10		and #$10			and 	#NSBIsString
.9678	d0 01		bne $967b			bne 	_FDType
.967a	60		rts				rts
.967b					_FDType:
.967b	4c d8 97	jmp $97d8			jmp 	TypeError
.967e					NSNormalise:
.967e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9681	29 80		and #$80			and 	#$80
.9683	09 08		ora #$08			ora 	#NSTFloat
.9685	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9688	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; if zero exit
.968b	d0 09		bne $9696			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.968d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9690	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9693	a9 00		lda #$00			lda 	#0 							; set Z flag
.9695	60		rts				rts
.9696					_NSNormaliseOptimise:
.9696	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9699	d0 22		bne $96bd			bne 	_NSNormaliseLoop
.969b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.969e	30 1d		bmi $96bd			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.96a0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96a3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96a6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96a9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96ac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96af	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.96b2	bd 28 06	lda $0628,x			lda 	NSExponent,x
.96b5	38		sec				sec
.96b6	e9 08		sbc #$08			sbc 	#8
.96b8	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96bb	80 d9		bra $9696			bra 	_NSNormaliseOptimise
.96bd					_NSNormaliseLoop:
.96bd	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.96c0	70 08		bvs $96ca			bvs 	_NSNExit 					; exit if so with Z flag clear
.96c2	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; shift mantissa left
.96c5	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.96c8	80 f3		bra $96bd			bra 	_NSNormaliseLoop
.96ca					_NSNExit:
.96ca	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.96cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.871b					AssignNumber:
.871b	5a		phy				phy
.871c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.871f	85 36		sta $36				sta 	zTemp0
.8721	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8724	85 37		sta $37				sta 	zTemp0+1
.8726	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8729	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.872b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.872e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8730	c9 08		cmp #$08			cmp 	#NSTFloat
.8732	f0 2a		beq $875e			beq 	_ANFloat
.8734	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8737	f0 05		beq $873e			beq		_ANNotFloat
.8739	e8		inx				inx
.873a	20 1d 96	jsr $961d			jsr 	FloatIntegerPart 			; make it an integer
.873d	ca		dex				dex
.873e					_ANNotFloat:
.873e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8741	29 03		and #$03			and 	#3
.8743	d0 05		bne $874a			bne 	_ANByteWord
.8745	20 6a 87	jsr $876a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8748	80 1e		bra $8768			bra 	_ANExit
.874a					_ANByteWord:
.874a	48		pha				pha 								; save count
.874b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.874e	92 36		sta ($36)			sta 	(zTemp0)
.8750	68		pla				pla
.8751	c9 01		cmp #$01			cmp	 	#1
.8753	f0 13		beq $8768			beq 	_ANExit
.8755	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8758	a0 01		ldy #$01			ldy 	#1
.875a	91 36		sta ($36),y			sta 	(zTemp0),y
.875c	80 0a		bra $8768			bra 	_ANExit
.875e					_ANFloat:
.875e	20 6a 87	jsr $876a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8761	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8764	a0 04		ldy #$04			ldy 	#4
.8766	91 36		sta ($36),y			sta 	(zTemp0),y
.8768					_ANExit:
.8768	7a		ply				ply
.8769	60		rts				rts
.876a					_ANCopy4PackSign:
.876a	a0 03		ldy #$03			ldy 	#3
.876c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.876f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8771	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8774	91 36		sta ($36),y			sta 	(zTemp0),y
.8776	88		dey				dey
.8777	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.877a	91 36		sta ($36),y			sta 	(zTemp0),y
.877c	88		dey				dey
.877d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8780	91 36		sta ($36),y			sta 	(zTemp0),y
.8782	88		dey				dey
.8783	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8786	91 36		sta ($36),y			sta 	(zTemp0),y
.8788	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8789					AssignString:
.8789	5a		phy				phy
.878a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.878d	85 38		sta $38				sta 	zTemp1
.878f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8792	85 39		sta $39				sta 	zTemp1+1
.8794	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8797	85 36		sta $36				sta 	zTemp0
.8799	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.879c	85 37		sta $37				sta 	zTemp0+1
.879e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.87a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.87a2	f0 23		beq $87c7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.87a4	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.87a5	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.87a7	e9 02		sbc #$02			sbc 	#2
.87a9	85 3c		sta $3c				sta 	zsTemp
.87ab	a0 01		ldy #$01			ldy 	#1
.87ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.87af	e9 00		sbc #$00			sbc 	#0
.87b1	85 3d		sta $3d				sta 	zsTemp+1
.87b3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.87b5					_ASGetLength:
.87b5	c8		iny				iny
.87b6	b1 38		lda ($38),y			lda 	(zTemp1),y
.87b8	d0 fb		bne $87b5			bne 	_ASGetLength
.87ba	98		tya				tya 								; is this length <= current length
.87bb	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.87bd	90 20		bcc $87df			bcc 	_ASCopyString
.87bf	f0 1e		beq $87df			beq 	_ASCopyString
.87c1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.87c3	a0 01		ldy #$01			ldy 	#1
.87c5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87c7					_ASNewStringRequired:
.87c7	e8		inx				inx 								; concrete the new string.
.87c8	20 d4 98	jsr $98d4			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.87cb	ca		dex				dex
.87cc	18		clc				clc
.87cd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.87d0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.87d2	92 36		sta ($36)			sta 	(zTemp0)
.87d4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.87d7	69 00		adc #$00			adc 	#0
.87d9	a0 01		ldy #$01			ldy 	#1
.87db	91 36		sta ($36),y			sta 	(zTemp0),y
.87dd	80 0d		bra $87ec			bra 	_ASExit
.87df					_ASCopyString:
.87df	a0 00		ldy #$00			ldy 	#0
.87e1					_ASCopyLoop:
.87e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e3	c8		iny				iny
.87e4	c8		iny				iny
.87e5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87e7	88		dey				dey
.87e8	c9 00		cmp #$00			cmp 	#0
.87ea	d0 f5		bne $87e1			bne 	_ASCopyLoop
.87ec					_ASExit:
.87ec	7a		ply				ply
.87ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.87ee					DereferenceTopTwo:
.87ee	e8		inx				inx
.87ef	20 f3 87	jsr $87f3			jsr 	Dereference 				; deref x+1
.87f2	ca		dex				dex  								; falls through to deref x
.87f3					Dereference:
.87f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.87f6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.87f8	f0 57		beq $8851			beq 	_DRFExit 					; not a reference
.87fa	5a		phy				phy
.87fb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.87fe	85 36		sta $36				sta 	zTemp0
.8800	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8803	85 37		sta $37				sta 	zTemp0+1
.8805	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8808	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.880a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8810	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8812	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8814	f0 0f		beq $8825			beq 	_DRFDereferenceTwo
.8816	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8818	f0 39		beq $8853			beq 	_DRFFull
.881a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.881d	29 03		and #$03			and 	#3
.881f	f0 32		beq $8853			beq 	_DRFFull 					; the whole word
.8821	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8823	f0 07		beq $882c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8825					_DRFDereferenceTwo:
.8825	a0 01		ldy #$01			ldy 	#1
.8827	b1 36		lda ($36),y			lda 	(zTemp0),y
.8829	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.882c					_DRFClear23:
.882c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.882f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8832	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8835	29 18		and #$18			and 	#NSBTypeMask
.8837	9d 00 06	sta $0600,x			sta 	NSStatus,x
.883a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.883c	d0 12		bne $8850			bne 	_DRFNotString
.883e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8841	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8844	d0 0a		bne $8850			bne 	_DRFNotString
.8846	a9 52		lda #$52			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8848	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.884b	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.884d	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8850					_DRFNotString
.8850	7a		ply				ply 								; restore Y and exit
.8851					_DRFExit:
.8851	60		rts				rts
.8852					_DRFNullString:
>8852	00						.byte 	0
.8853					_DRFFull:
.8853	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8855	b1 36		lda ($36),y			lda 	(zTemp0),y
.8857	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.885a	c8		iny				iny
.885b	b1 36		lda ($36),y			lda 	(zTemp0),y
.885d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8860	c8		iny				iny
.8861	b1 36		lda ($36),y			lda 	(zTemp0),y
.8863	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8866	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8869	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.886c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.886e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8871	f0 06		beq $8879			beq 	_DRFNoExponent
.8873	c8		iny				iny 								; if not, read the exponent as well.
.8874	b1 36		lda ($36),y			lda 	(zTemp0),y
.8876	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8879					_DRFNoExponent:
.8879	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.887c	10 0d		bpl $888b			bpl 	_DRFExit2 					; if not, then exit.
.887e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8880	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8883	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8886	09 80		ora #$80			ora 	#NSBIsNegative
.8888	9d 00 06	sta $0600,x			sta 	NSStatus,x
.888b					_DRFExit2:
.888b	7a		ply				ply
.888c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.888d					EncodeNumberStart:
.888d	38		sec				sec
.888e	80 01		bra $8891			bra 	EncodeNumberContinue+1
.8890					EncodeNumberContinue:
.8890	18		clc				clc
.8891					EncodeNumber:
.8891	08		php				php 								; save reset.
.8892	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8894	f0 12		beq $88a8			beq 	_ENIsOkay
.8896	c9 30		cmp #$30			cmp 	#"0"
.8898	90 04		bcc $889e			bcc 	_ENBadNumber
.889a	c9 3a		cmp #$3a			cmp 	#"9"+1
.889c	90 0a		bcc $88a8			bcc 	_ENIsOkay
.889e					_ENBadNumber:
.889e	28		plp				plp 								; throw saved reset
.889f	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.88a2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.88a4	f0 7e		beq $8924			beq 	_ENConstructFinal
.88a6					_ENFail:
.88a6	18		clc				clc 								; not allowed
.88a7	60		rts				rts
.88a8					_ENIsOkay:
.88a8	28		plp				plp 								; are we restarting
.88a9	90 15		bcc $88c0			bcc 	_ENNoRestart
.88ab					_ENStartEncode:
.88ab	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.88ad	f0 0c		beq $88bb			beq 	_ENFirstDP
.88af	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.88b1	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.88b4	a9 01		lda #$01			lda 	#ESTA_Low
.88b6					_ENExitChange:
.88b6	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.88b9	38		sec				sec
.88ba	60		rts				rts
.88bb					_ENFirstDP:
.88bb	20 83 8d	jsr $8d83			jsr 	NSMSetZero 					; clear integer part
.88be	80 3f		bra $88ff			bra 	_ESTASwitchFloat			; go straight to float and exi
.88c0					_ENNoRestart:
.88c0	48		pha				pha 								; save on stack.
.88c1	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.88c4	c9 01		cmp #$01			cmp 	#ESTA_Low
.88c6	f0 09		beq $88d1			beq  	_ESTALowState
.88c8	c9 02		cmp #$02			cmp 	#ESTA_High
.88ca	f0 29		beq $88f5			beq 	_ESTAHighState
.88cc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.88ce	f0 3b		beq $890b			beq 	_ESTADecimalState
>88d0	db						.byte 	$DB 						; causes a break in the emulator
.88d1					_ESTALowState:
.88d1	68		pla				pla 								; get value back
.88d2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.88d4	f0 29		beq $88ff			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.88d6	29 0f		and #$0f			and 	#15 						; make digit
.88d8	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.88db	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.88de	0a		asl a				asl 	a
.88df	0a		asl a				asl 	a
.88e0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88e3	0a		asl a				asl 	a
.88e4	6d 06 07	adc $0706			adc 	DigitTemp
.88e7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88ea	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.88ec	90 05		bcc $88f3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.88ee	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.88f0	8d 05 07	sta $0705			sta 	EncodeState
.88f3					_ESTANoSwitch:
.88f3	38		sec				sec
.88f4	60		rts				rts
.88f5					_ESTAHighState:
.88f5	68		pla				pla 								; get value back
.88f6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.88f8	f0 05		beq $88ff			beq 	_ESTASwitchFloat
.88fa	20 5e 89	jsr $895e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.88fd	38		sec				sec
.88fe	60		rts				rts
.88ff					_ESTASwitchFloat:
.88ff	9c 07 07	stz $0707			stz 	DecimalCount
.8902	e8		inx				inx 								; zero the decimal additive.
.8903	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.8906	ca		dex				dex
.8907	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8909	80 ab		bra $88b6			bra 	_ENExitChange
.890b					_ESTADecimalState:
.890b	68		pla				pla 								; digit.
.890c	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.890e	f0 96		beq $88a6			beq 	_ENFail
.8910	e8		inx				inx 								; put digit into fractional part of X+1
.8911	20 5e 89	jsr $895e			jsr 	ESTAShiftDigitIntoMantissa
.8914	ca		dex				dex
.8915	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8918	ad 07 07	lda $0707			lda 	DecimalCount
.891b	c9 0b		cmp #$0b			cmp 	#11
.891d	f0 02		beq $8921			beq 	_ESTADSFail
.891f	38		sec				sec
.8920	60		rts				rts
.8921					_ESTADSFail:
.8921	4c d3 97	jmp $97d3			jmp 	RangeError
.8924					_ENConstructFinal:
.8924	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8927	f0 33		beq $895c			beq 	_ENCFExit 					; no decimals
.8929	5a		phy				phy
.892a	0a		asl a				asl 	a 							; x 4 and CLC
.892b	0a		asl a				asl 	a
.892c	6d 07 07	adc $0707			adc 	DecimalCount
.892f	a8		tay				tay
.8930	b9 92 97	lda $9792,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8933	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8936	b9 93 97	lda $9793,y			lda 	DecimalScalarTable-5+1,y
.8939	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.893c	b9 94 97	lda $9794,y			lda 	DecimalScalarTable-5+2,y
.893f	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8942	b9 95 97	lda $9795,y			lda 	DecimalScalarTable-5+3,y
.8945	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8948	b9 96 97	lda $9796,y			lda 	DecimalScalarTable-5+4,y
.894b	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.894e	a9 08		lda #$08			lda 	#NSTFloat
.8950	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8953	7a		ply				ply
.8954	e8		inx				inx 								; multiply decimal const by decimal scalar
.8955	20 47 96	jsr $9647			jsr 	FloatMultiply
.8958	ca		dex				dex
.8959	20 dc 94	jsr $94dc			jsr 	FloatAdd 					; add to integer part.
.895c					_ENCFExit:
.895c	18		clc				clc 								; reject the digit.
.895d	60		rts				rts
.895e					ESTAShiftDigitIntoMantissa:
.895e	29 0f		and #$0f			and 	#15 						; save digit
.8960	48		pha				pha
.8961	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8964	48		pha				pha
.8965	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8968	48		pha				pha
.8969	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.896c	48		pha				pha
.896d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8970	48		pha				pha
.8971	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 2
.8974	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 4
.8977	18		clc				clc 								; pop mantissa and add
.8978	68		pla				pla
.8979	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.897c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.897f	68		pla				pla
.8980	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8983	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8986	68		pla				pla
.8987	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.898a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.898d	68		pla				pla
.898e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8991	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8994	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 10
.8997	68		pla				pla 								; add digit
.8998	18		clc				clc
.8999	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.899c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.899f	90 0d		bcc $89ae			bcc 	_ESTASDExit
.89a1	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.89a4	d0 08		bne $89ae			bne 	_ESTASDExit
.89a6	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.89a9	d0 03		bne $89ae			bne 	_ESTASDExit
.89ab	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.89ae					_ESTASDExit:
.89ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.89af					EvaluateTerm:
.89af	b1 30		lda ($30),y			lda 	(codePtr),y
.89b1	30 18		bmi $89cb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.89b3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.89b5	b0 6f		bcs $8a26			bcs 	_ETVariable
.89b7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.89b9	90 6e		bcc $8a29			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.89bb	c9 3a		cmp #$3a			cmp 	#'9'+1
.89bd	b0 6a		bcs $8a29			bcs 	_ETPuncUnary
.89bf	20 8d 88	jsr $888d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.89c2					_ETNumber:
.89c2	c8		iny				iny 								; keep encoding until we have the numbers
.89c3	b1 30		lda ($30),y			lda 	(codePtr),y
.89c5	20 90 88	jsr $8890			jsr 	EncodeNumberContinue
.89c8	b0 f8		bcs $89c2			bcs 	_ETNumber 					; go back if accepted.
.89ca	60		rts				rts
.89cb					_ETCheckUnary:
.89cb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.89cd	f0 41		beq $8a10			beq 	_ETString
.89cf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.89d1	f0 12		beq $89e5			beq 	_ETHexConstant
.89d3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.89d5	90 0b		bcc $89e2			bcc 	_ETSyntaxError
.89d7	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.89d9	b0 07		bcs $89e2			bcs 	_ETSyntaxError
.89db	da		phx				phx 								; push X on the stack
.89dc	0a		asl a				asl 	a 							; put vector x 2 into X
.89dd	aa		tax				tax
.89de	c8		iny				iny 								; consume unary function token
.89df	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.89e2					_ETSyntaxError:
.89e2	4c ce 97	jmp $97ce			jmp 	SyntaxError
.89e5					_ETHexConstant:
.89e5	c8		iny				iny 								; skip #
.89e6	c8		iny				iny 								; skip count
.89e7	20 83 8d	jsr $8d83			jsr 	NSMSetZero 					; clear result
.89ea					_ETHLoop:
.89ea	b1 30		lda ($30),y			lda 	(codePtr),y
.89ec	c8		iny				iny 								; and consume
.89ed	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.89ef	f0 1e		beq $8a0f			beq 	_ETHExit
.89f1	48		pha				pha 								; save on stack.
.89f2	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 2
.89f5	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 4
.89f8	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 8
.89fb	20 98 8d	jsr $8d98			jsr 	NSMShiftLeft 				; x 16
.89fe	68		pla				pla 								; ASCII
.89ff	c9 41		cmp #$41			cmp 	#'A'
.8a01	90 02		bcc $8a05			bcc 	_ETHNotChar
.8a03	e9 07		sbc #$07			sbc 	#7
.8a05					_ETHNotChar:
.8a05	29 0f		and #$0f			and 	#15 						; digit now
.8a07	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8a0a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a0d	80 db		bra $89ea			bra 	_ETHLoop 					; go round.
.8a0f					_ETHExit:
.8a0f	60		rts				rts
.8a10					_ETString:
.8a10	c8		iny				iny 								; look at length
.8a11	b1 30		lda ($30),y			lda 	(codePtr),y
.8a13	48		pha				pha
.8a14	c8		iny				iny 								; first character
.8a15	20 ce 92	jsr $92ce			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8a18	68		pla				pla 								; restore count and save
.8a19	85 36		sta $36				sta 	zTemp0
.8a1b	98		tya				tya 								; add length to Y to skip it.
.8a1c	18		clc				clc
.8a1d	65 36		adc $36				adc 	zTemp0
.8a1f	a8		tay				tay
.8a20	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8a22	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a25	60		rts				rts
.8a26					_ETVariable:
.8a26	4c 80 8a	jmp $8a80			jmp 	VariableHandler
.8a29					_ETPuncUnary:
.8a29	c8		iny				iny 								; consume the unary character
.8a2a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8a2c	f0 2d		beq $8a5b			beq 	_ETUnaryNegate
.8a2e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8a30	f0 39		beq $8a6b			beq 	_ETDereference
.8a32	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8a34	f0 43		beq $8a79			beq 	_ETParenthesis
.8a36	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8a38	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8a3a	f0 06		beq $8a42			beq 	_ETIndirection
.8a3c	e6 36		inc $36				inc 	zTemp0
.8a3e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8a40	d0 a0		bne $89e2			bne 	_ETSyntaxError
.8a42					_ETIndirection:
.8a42	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8a44	1a		inc a				inc 	a
.8a45	48		pha				pha
.8a46	20 af 89	jsr $89af			jsr 	EvaluateTerm				; evaluate the term
.8a49	20 f3 87	jsr $87f3			jsr 	Dereference 				; dereference it.
.8a4c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8a4f	d0 07		bne $8a58			bne 	_ETTypeMismatch
.8a51	68		pla				pla 								; indirection 1-2
.8a52	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8a54	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a57	60		rts				rts
.8a58					_ETTypeMismatch:
.8a58	4c d8 97	jmp $97d8			jmp 	TypeError
.8a5b					_ETUnaryNegate:
.8a5b	20 af 89	jsr $89af			jsr 	EvaluateTerm				; evaluate the term
.8a5e	20 f3 87	jsr $87f3			jsr 	Dereference 				; dereference it.
.8a61	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8a64	29 10		and #$10			and 	#NSTString
.8a66	d0 f0		bne $8a58			bne 	_ETTypeMismatch
.8a68	4c 2f 8d	jmp $8d2f			jmp 	NSMNegate  					; just toggles the sign bit.
.8a6b					_ETDereference:
.8a6b	20 af 89	jsr $89af			jsr 	EvaluateTerm				; evaluate the term
.8a6e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8a71	29 20		and #$20			and 	#NSBIsReference
.8a73	f0 e3		beq $8a58			beq 	_ETTypeMismatch
.8a75	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8a78	60		rts				rts
.8a79					_ETParenthesis:
.8a79	20 de 86	jsr $86de			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a7c	20 15 93	jsr $9315			jsr 	CheckRightBracket 			; check for )
.8a7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a80					VariableHandler:
.8a80	b1 30		lda ($30),y			lda 	(codePtr),y
.8a82	18		clc				clc
.8a83	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a85	85 37		sta $37				sta 	zTemp0+1
.8a87	c8		iny				iny
.8a88	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8a	85 36		sta $36				sta 	zTemp0
.8a8c	c8		iny				iny
.8a8d	18		clc				clc									; copy variable address+3 to mantissa
.8a8e	69 03		adc #$03			adc 	#3
.8a90	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a93	a5 37		lda $37				lda 	zTemp0+1
.8a95	69 00		adc #$00			adc 	#0
.8a97	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a9a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a9d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8aa0	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8aa3	5a		phy				phy
.8aa4	a0 02		ldy #$02			ldy 	#2 							; read type
.8aa6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa8	7a		ply				ply
.8aa9	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8aab	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8aad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ab0	29 04		and #$04			and 	#NSBIsArray
.8ab2	d0 01		bne $8ab5			bne 	_VHArray
.8ab4	60		rts				rts
.8ab5					_VHArray:
>8ab5	db						.byte 	$DB 						; causes a break in the emulator
.8ab6	80 fd		bra $8ab5			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.96cd					AbsUnary:
.96cd	fa		plx				plx 								; restore stack pos
.96ce	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; get a float or int
.96d1	20 15 93	jsr $9315			jsr 	CheckRightBracket
.96d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.96d7	29 7f		and #$7f			and 	#$7F
.96d9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8ab8					AllocUnary:
.8ab8	fa		plx				plx 								; restore stack pos
.8ab9	20 0f 8d	jsr $8d0f			jsr 	Evaluate16BitInteger		; get bytes required.
.8abc	20 15 93	jsr $9315			jsr 	CheckRightBracket
.8abf	da		phx				phx 								; save X/Y
.8ac0	5a		phy				phy
.8ac1	8a		txa				txa 								; copy X into Y
.8ac2	a8		tay				tay
.8ac3	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8ac6	aa		tax				tax
.8ac7	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8aca	20 d7 8a	jsr $8ad7			jsr 	AllocateXABytes 			; allocate memory
.8acd	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8ad0	8a		txa				txa
.8ad1	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8ad4	7a		ply				ply
.8ad5	fa		plx				plx
.8ad6	60		rts				rts
.8ad7					AllocateXABytes:
.8ad7	5a		phy				phy
.8ad8	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8adb	5a		phy				phy
.8adc	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8adf	5a		phy				phy
.8ae0	18		clc				clc
.8ae1	6d 0c 07	adc $070c			adc 	lowMemPtr
.8ae4	8d 0c 07	sta $070c			sta 	lowMemPtr
.8ae7	8a		txa				txa
.8ae8	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8aeb	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8aee	fa		plx				plx
.8aef	68		pla				pla
.8af0	7a		ply				ply
.8af1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.96dd					AscUnary:
.96dd	fa		plx				plx 								; restore stack pos
.96de	20 e2 8c	jsr $8ce2			jsr 	EvaluateString 				; get a string
.96e1	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.96e3	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.96e6	20 15 93	jsr $9315			jsr 	CheckRightBracket
.96e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.96ea					FracUnary:
.96ea	fa		plx				plx 								; restore stack pos
.96eb	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; get a float or int
.96ee	20 15 93	jsr $9315			jsr 	CheckRightBracket
.96f1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96f4	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.96f6	f0 04		beq $96fc			beq 	_IUZero
.96f8	20 ba 95	jsr $95ba			jsr 	FloatFractionalPart
.96fb	60		rts				rts
.96fc					_IUZero:
.96fc	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.96ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9700					IntUnary:
.9700	fa		plx				plx 								; restore stack pos
.9701	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; get a float or int
.9704	20 15 93	jsr $9315			jsr 	CheckRightBracket
.9707	bd 00 06	lda $0600,x			lda 	NSStatus,x
.970a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.970c	f0 03		beq $9711			beq 	_IUExit
.970e	20 1d 96	jsr $961d			jsr 	FloatIntegerPart
.9711					_IUExit:
.9711	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9712					LenUnary:
.9712	fa		plx				plx 								; restore stack pos
.9713	20 e2 8c	jsr $8ce2			jsr 	EvaluateString 				; get a string
.9716	5a		phy				phy
.9717	a0 00		ldy #$00			ldy 	#0 							; find length
.9719					_LenFind:
.9719	b1 36		lda ($36),y			lda 	(zTemp0),y
.971b	f0 06		beq $9723			beq 	_LenExit
.971d	c8		iny				iny
.971e	d0 f9		bne $9719			bne 	_LenFind
.9720	4c d3 97	jmp $97d3			jmp 	RangeError 					; string > 255
.9723					_LenExit:
.9723	98		tya				tya
.9724	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.9727	7a		ply				ply
.9728	20 15 93	jsr $9315			jsr 	CheckRightBracket
.972b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8af2					Unary_Not:
.8af2	fa		plx				plx
.8af3	20 fa 8c	jsr $8cfa			jsr 	EvaluateInteger 			; get integer
.8af6	20 15 93	jsr $9315			jsr 	CheckRightBracket
.8af9	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; zero mantissa ?
.8afc	f0 04		beq $8b02			beq 	_NotZero
.8afe	20 83 8d	jsr $8d83			jsr 	NSMSetZero
.8b01	60		rts				rts
.8b02					_NotZero:
.8b02	4c 42 83	jmp $8342			jmp 	ReturnTrue
.8b05					_UNBad:
.8b05	4c dd 97	jmp $97dd			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8b08					Unary_Rnd:
.8b08	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; number to use.
.8b0b	20 15 93	jsr $9315			jsr 	CheckRightBracket 			; closing bracket
.8b0e	20 37 8b	jsr $8b37			jsr 	Random32Bit 				; generate a number.
.8b11	ad 08 07	lda $0708			lda 	RandomSeed+0
.8b14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b17	ad 09 07	lda $0709			lda 	RandomSeed+1
.8b1a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b1d	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8b20	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b23	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8b26	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8b28	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b2b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8b2d	8d 28 06	sta $0628			sta 	NSExponent
.8b30	a9 08		lda #$08			lda 	#NSTFloat
.8b32	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8b35	db						.byte 	$DB 						; causes a break in the emulator
.8b36	60		rts				rts
.8b37					Random32Bit:
.8b37	5a		phy				phy
.8b38	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8b3a	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8b3d	d0 03		bne $8b42			bne 	_Random1
.8b3f	a8		tay				tay 								; if so do it 256 times
.8b40	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8b42					_Random1:
.8b42	0a		asl a				asl 	a 							; LSFR RNG
.8b43	2e 09 07	rol $0709			rol 	RandomSeed+1
.8b46	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8b49	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8b4c	90 02		bcc $8b50			bcc 	_Random2
.8b4e	49 c5		eor #$c5			eor 	#$C5
.8b50					_Random2:
.8b50	88		dey				dey
.8b51	d0 ef		bne $8b42			bne 	_Random1
.8b53	7a		ply				ply
.8b54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.972c					SgnUnary:
.972c	fa		plx				plx 								; restore stack pos
.972d	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber 				; get a float or int
.9730	20 15 93	jsr $9315			jsr 	CheckRightBracket
.9733	20 b3 8d	jsr $8db3			jsr 	NSMIsZero 					; if zero
.9736	f0 10		beq $9748			beq 	_SGZero  					; return Int Zero
.9738	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.973b	48		pha				pha
.973c	a9 01		lda #$01			lda 	#1 							; set to 1
.973e	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.9741	68		pla				pla
.9742	29 80		and #$80			and		#$80 						; copy the sign byte out
.9744	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9747	60		rts				rts
.9748	20 83 8d	jsr $8d83	_SGZero:jsr 	NSMSetZero
.974b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.974c					ValUnary:
.974c	fa		plx				plx 								; restore stack pos
.974d	20 62 97	jsr $9762			jsr 	ValMainCode 				; do the main val() code
.9750	b0 01		bcs $9753			bcs 	_VUError 					; couldn't convert
.9752	60		rts				rts
.9753					_VUError:
.9753	4c d8 97	jmp $97d8			jmp 	TypeError
.9756					IsValUnary:
.9756	fa		plx				plx 								; restore stack pos
.9757	20 62 97	jsr $9762			jsr 	ValMainCode 				; do the main val() code
.975a	b0 03		bcs $975f			bcs 	_VUBad
.975c	4c 42 83	jmp $8342			jmp 	ReturnTrue
.975f					_VUBad:
.975f	4c 4e 83	jmp $834e			jmp 	ReturnFalse
.9762					ValMainCode:
.9762	20 e2 8c	jsr $8ce2			jsr 	EvaluateString 				; get a string
.9765	20 15 93	jsr $9315			jsr 	CheckRightBracket 			; check right bracket present
.9768	5a		phy				phy
.9769	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.976b	f0 17		beq $9784			beq 	_VMCFail2
.976d	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.976f	48		pha				pha 								; save first character
.9770	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9772	d0 01		bne $9775			bne 	_VMCStart
.9774	c8		iny				iny 								; skip over -
.9775					_VMCStart:
.9775	38		sec				sec 								; initialise first time round.
.9776					_VMCNext:
.9776	c8		iny				iny 								; pre-increment
.9777	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9779	f0 0c		beq $9787			beq 	_VMCSuccess 				; successful.
.977b	20 91 88	jsr $8891			jsr 	EncodeNumber 				; send it to the number-builder
.977e	90 03		bcc $9783			bcc 	_VMCFail 					; if failed, give up.
.9780	18		clc				clc 								; next time round, countinue
.9781	80 f3		bra $9776			bra 	_VMCNext
.9783					_VMCFail:
.9783	68		pla				pla
.9784					_VMCFail2:
.9784	7a		ply				ply
.9785	38		sec				sec
.9786	60		rts				rts
.9787					_VMCSuccess:
.9787	a9 00		lda #$00			lda 	#0 							; construct final
.9789	20 91 88	jsr $8891			jsr 	EncodeNumber
.978c	68		pla				pla
.978d	c9 2d		cmp #$2d			cmp 	#"-"
.978f	d0 03		bne $9794			bne 	_VMCNotNegative
.9791	20 2f 8d	jsr $8d2f			jsr		NSMNegate
.9794					_VMCNotNegative:
.9794	7a		ply				ply
.9795	18		clc				clc
.9796	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8b55					ChrUnary:
.8b55	fa		plx				plx 								; restore stack pos
.8b56	20 1b 8d	jsr $8d1b			jsr 	Evaluate8BitInteger			; get value
.8b59	48		pha				pha
.8b5a	20 15 93	jsr $9315			jsr 	CheckRightBracket
.8b5d	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8b5f	20 4f 99	jsr $994f			jsr 	StringTempAllocate
.8b62	68		pla				pla 								; write number to it
.8b63	20 8d 99	jsr $998d			jsr 	StringTempWrite
.8b66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8b67					SpcUnary:
.8b67	fa		plx				plx 								; restore stack pos
.8b68	20 1b 8d	jsr $8d1b			jsr 	Evaluate8BitInteger			; get value
.8b6b	5a		phy				phy
.8b6c	48		pha				pha 								; save count
.8b6d	20 4f 99	jsr $994f			jsr 	StringTempAllocate
.8b70	7a		ply				ply 								; to do count in Y
.8b71					_SpcLoop:
.8b71	c0 00		cpy #$00			cpy 	#0
.8b73	f0 08		beq $8b7d			beq 	_SpcExit
.8b75	a9 20		lda #$20			lda 	#32
.8b77	20 8d 99	jsr $998d			jsr 	StringTempWrite
.8b7a	88		dey				dey
.8b7b	80 f4		bra $8b71			bra 	_SPCLoop
.8b7d					_SpcExit:
.8b7d	7a		ply				ply
.8b7e	20 15 93	jsr $9315			jsr 	CheckRightBracket
.8b81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b82					Unary_Str:
.8b82	fa		plx				plx
.8b83	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber  			; get number
.8b86	20 15 93	jsr $9315			jsr 	CheckRightBracket 			; closing bracket
.8b89	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b8b	20 a4 8b	jsr $8ba4			jsr 	ConvertNumberToString 		; do the conversion.
.8b8e	a9 21		lda #$21			lda		#33 						; create buffer
.8b90	20 4f 99	jsr $994f			jsr 	StringTempAllocate 			; allocate memory
.8b93	da		phx				phx
.8b94	a2 00		ldx #$00			ldx 	#0
.8b96					_USCopy:
.8b96	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b99	20 8d 99	jsr $998d			jsr 	StringTempWrite
.8b9c	e8		inx				inx
.8b9d	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ba0	d0 f4		bne $8b96			bne 	_USCopy
.8ba2	fa		plx				plx
.8ba3	60		rts				rts
.8ba4					ConvertNumberToString:
.8ba4	5a		phy				phy 								; save code position
.8ba5	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8ba8	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8bab	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8bae	10 0a		bpl $8bba			bpl 	_CNTSNotNegative
.8bb0	29 7f		and #$7f			and 	#$7F 						; make +ve
.8bb2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bb5	a9 2d		lda #$2d			lda 	#"-"
.8bb7	20 20 8c	jsr $8c20			jsr 	WriteDecimalBuffer
.8bba					_CNTSNotNegative:
.8bba	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8bbd	f0 15		beq $8bd4			beq 	_CNTSNotFloat
.8bbf	e8		inx				inx 								; round up
.8bc0	a9 01		lda #$01			lda 	#1
.8bc2	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.8bc5	ca		dex				dex
.8bc6	bd 28 06	lda $0628,x			lda		NSExponent,x
.8bc9	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8bcc	a9 08		lda #$08			lda 	#NSTFloat
.8bce	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8bd1	20 dc 94	jsr $94dc			jsr 	FloatAdd
.8bd4					_CNTSNotFloat:
.8bd4	20 02 8c	jsr $8c02			jsr 	MakePlusTwoString
.8bd7	20 ba 95	jsr $95ba			jsr 	FloatFractionalPart 		; get the fractional part
.8bda	20 7e 96	jsr $967e			jsr 	NSNormalise					; normalise , exit if zero
.8bdd	f0 21		beq $8c00			beq 	_CNTSExit
.8bdf	a9 2e		lda #$2e			lda 	#"."
.8be1	20 20 8c	jsr $8c20			jsr 	WriteDecimalBuffer 			; write decimal place
.8be4					_CNTSDecimal:
.8be4	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8be7	30 17		bmi $8c00			bmi 	_CNTSExit
.8be9	e8		inx				inx 								; x 10.0
.8bea	a9 0a		lda #$0a			lda 	#10
.8bec	20 85 8d	jsr $8d85			jsr 	NSMSetByte
.8bef	a9 08		lda #$08			lda 	#NSTFloat
.8bf1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bf4	ca		dex				dex
.8bf5	20 47 96	jsr $9647			jsr 	FloatMultiply
.8bf8	20 02 8c	jsr $8c02			jsr 	MakePlusTwoString
.8bfb	20 ba 95	jsr $95ba			jsr 	FloatFractionalPart 		; get the fractional part
.8bfe	80 e4		bra $8be4			bra 	_CNTSDecimal 				; keep going.
.8c00					_CNTSExit:
.8c00	7a		ply				ply
.8c01	60		rts				rts
.8c02					MakePlusTwoString:
.8c02	da		phx				phx
.8c03	20 5a 8d	jsr $8d5a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8c06	e8		inx				inx 								; access it
.8c07	e8		inx				inx
.8c08	20 1d 96	jsr $961d			jsr 	FloatIntegerPart 			; make it an integer
.8c0b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8c0d	20 86 94	jsr $9486			jsr 	ConvertInt32
.8c10	a2 00		ldx #$00			ldx	 	#0
.8c12					_MPTSCopy:
.8c12	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8c15	20 20 8c	jsr $8c20			jsr 	WriteDecimalBuffer
.8c18	e8		inx				inx
.8c19	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8c1c	d0 f4		bne $8c12			bne 	_MPTSCopy
.8c1e	fa		plx				plx
.8c1f	60		rts				rts
.8c20					WriteDecimalBuffer:
.8c20	da		phx				phx
.8c21	ae 14 07	ldx $0714			ldx 	dbOffset
.8c24	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8c27	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8c2a	ee 14 07	inc $0714			inc 	dbOffset
.8c2d	fa		plx				plx
.8c2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8c2f					Unary_Left:
.8c2f	fa		plx				plx
.8c30	18		clc				clc 								; only one parameter
.8c31	20 a6 8c	jsr $8ca6			jsr 	SubstringInitial 			; set up.
.8c34	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8c37	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c3a	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8c3d	80 2c		bra $8c6b			bra 	SubstringMain
.8c3f					Unary_Right:
.8c3f	fa		plx				plx
.8c40	18		clc				clc 								; only one parameter
.8c41	20 a6 8c	jsr $8ca6			jsr 	SubstringInitial 			; set up.
.8c44	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8c47	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c4a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8c4d	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8c50	b0 02		bcs $8c54			bcs 	_URNotUnderflow
.8c52	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8c54					_URNotUnderFlow:
.8c54	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8c57	80 12		bra $8c6b			bra 	SubStringMain
.8c59					Unary_Mid:
.8c59	fa		plx				plx
.8c5a	38		sec				sec 								; two parameters
.8c5b	20 a6 8c	jsr $8ca6			jsr 	SubstringInitial 			; set up.
.8c5e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8c61	f0 05		beq $8c68			beq 	_UMError
.8c63	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8c66	80 03		bra $8c6b			bra 	SubStringMain
.8c68					_UMError:
.8c68	4c dd 97	jmp $97dd			jmp 	ArgumentError
.8c6b					SubStringMain:
.8c6b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8c6e	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8c71	b0 2d		bcs $8ca0			bcs 	_SSMNull 					; if so, return an empty string.
.8c73	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8c76	f0 28		beq $8ca0			beq 	_SSMNull 					; return empty string.
.8c78	18		clc				clc 								; add the offset +1 to the address and
.8c79	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c7c	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c7f	85 36		sta $36				sta 	zTemp0
.8c81	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c84	69 00		adc #$00			adc 	#0
.8c86	85 37		sta $37				sta 	zTemp0+1
.8c88					_SSMNoCarry:
.8c88	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c8b	20 4f 99	jsr $994f			jsr 	StringTempAllocate 			; allocate that many characters
.8c8e	5a		phy				phy 								; save Y
.8c8f	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c91					_SSMCopy:
.8c91	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c93	f0 09		beq $8c9e			beq 	_SSMEString 				; no more to copy
.8c95	20 8d 99	jsr $998d			jsr 	StringTempWrite 			; and write it out.
.8c98	c8		iny				iny
.8c99	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c9c	d0 f3		bne $8c91			bne 	_SSMCopy
.8c9e					_SSMEString:
.8c9e	7a		ply				ply
.8c9f					_SSMExit:
.8c9f	60		rts				rts
.8ca0					_SSMNull:
.8ca0	a9 00		lda #$00			lda 	#0
.8ca2	20 4f 99	jsr $994f			jsr 	StringTempAllocate
.8ca5	60		rts				rts
.8ca6					SubstringInitial:
.8ca6	da		phx				phx 								; save initial stack position
.8ca7	08		php				php 								; save carry on stack indicating 2 parameters
.8ca8	20 e2 8c	jsr $8ce2			jsr 	EvaluateString 				; get a string
.8cab	5a		phy				phy 								; calculate length to exponent.
.8cac	a0 ff		ldy #$ff			ldy 	#$FF
.8cae					_SIFindLength:
.8cae	c8		iny				iny
.8caf	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cb1	d0 fb		bne $8cae			bne 	_SIFindLength
.8cb3	98		tya				tya
.8cb4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8cb7	7a		ply				ply
.8cb8	e8		inx				inx
.8cb9	20 1d 93	jsr $931d			jsr 	CheckComma 					; comma next
.8cbc	20 1b 8d	jsr $8d1b			jsr 	Evaluate8BitInteger 		; get next parameter
.8cbf	28		plp				plp 								; is it the last parameter ?
.8cc0	90 07		bcc $8cc9			bcc 	_SSIExit 					; if so, exit.
.8cc2	e8		inx				inx
.8cc3	20 1d 93	jsr $931d			jsr 	CheckComma 					; comma next
.8cc6	20 1b 8d	jsr $8d1b			jsr 	Evaluate8BitInteger 		; get last parameter
.8cc9					_SSIExit:
.8cc9	fa		plx				plx
.8cca	20 15 93	jsr $9315			jsr 	CheckRightBracket 			; check closing bracket
.8ccd	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8cce					EvaluateValue:
.8cce	48		pha				pha
.8ccf	20 de 86	jsr $86de			jsr		EvaluateExpression 			; expression
.8cd2	20 f3 87	jsr $87f3			jsr 	Dereference					; derefernce it
.8cd5	68		pla				pla
.8cd6	60		rts				rts
.8cd7					EvaluateNumber:
.8cd7	20 ce 8c	jsr $8cce			jsr 	EvaluateValue 				; get a value
.8cda	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8cdd	29 10		and #$10			and 	#NSBIsString
.8cdf	d0 16		bne $8cf7			bne 	HelperTypeError
.8ce1	60		rts				rts
.8ce2					EvaluateString:
.8ce2	20 ce 8c	jsr $8cce			jsr 	EvaluateValue 				; get a value
.8ce5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ce8	29 10		and #$10			and 	#NSBIsString
.8cea	f0 0b		beq $8cf7			beq 	HelperTypeError
.8cec					CopyAddressToTemp0:
.8cec	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8cef	85 36		sta $36				sta 	zTemp0
.8cf1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cf4	85 37		sta $37				sta 	zTemp0+1
.8cf6	60		rts				rts
.8cf7					HelperTypeError:
.8cf7	4c d8 97	jmp $97d8			jmp 	TypeError
.8cfa					EvaluateInteger:
.8cfa	20 d7 8c	jsr $8cd7			jsr 	EvaluateNumber
.8cfd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8d00	d0 0a		bne $8d0c			bne 	HelperValueError 			; if not, it's a float.
.8d02	60		rts				rts
.8d03					EvaluateUnsignedInteger:
.8d03	20 fa 8c	jsr $8cfa			jsr 	EvaluateInteger 			; check integer is +ve
.8d06	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d09	30 01		bmi $8d0c			bmi 	HelperValueError
.8d0b	60		rts				rts
.8d0c					HelperValueError:
.8d0c	4c dd 97	jmp $97dd			jmp 	ArgumentError
.8d0f					Evaluate16BitInteger:
.8d0f	20 03 8d	jsr $8d03			jsr	 	EvaluateUnsignedInteger		; get integer
.8d12	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8d15	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8d18	d0 f2		bne $8d0c			bne 	HelperValueError
.8d1a	60		rts				rts
.8d1b					Evaluate8BitInteger:
.8d1b	20 03 8d	jsr $8d03			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8d1e	d0 ec		bne $8d0c			bne 	HelperValueError
.8d20	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8d23	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8d26	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8d29	d0 e1		bne $8d0c			bne 	HelperValueError
.8d2b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8d2f					NSMNegate:
.8d2f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d32	49 80		eor #$80			eor 	#NSBIsNegative
.8d34	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d37	60		rts				rts
.8d38					NSMNegateMantissa:
.8d38	38		sec				sec
.8d39	a9 00		lda #$00			lda 	#0
.8d3b	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8d3e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d41	a9 00		lda #$00			lda 	#0
.8d43	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8d46	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d49	a9 00		lda #$00			lda 	#0
.8d4b	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8d4e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d51	a9 00		lda #$00			lda 	#0
.8d53	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8d56	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d59	60		rts				rts
.8d5a					NSMShiftUpTwo:
.8d5a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d5d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d60	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d63	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8d66	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8d69	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8d6c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d6f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8d72	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8d75	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8d78	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d7b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d7e	60		rts				rts
.8d7f					NSMSetZeroMantissaOnly:
.8d7f	a9 00		lda #$00			lda 	#0
.8d81	80 08		bra $8d8b			bra 	NSMSetMantissa
.8d83					NSMSetZero:
.8d83	a9 00		lda #$00			lda 	#0
.8d85					NSMSetByte:
.8d85	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d88	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d8b					NSMSetMantissa:
.8d8b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d8e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d91	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d94	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d97	60		rts				rts
.8d98					NSMShiftLeft:
.8d98	18		clc				clc
.8d99					NSMRotateLeft:
.8d99	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d9c	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d9f	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8da2	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8da5	60		rts				rts
.8da6					NSMShiftRight:
.8da6	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8da9	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8dac	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8daf	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8db2	60		rts				rts
.8db3					NSMIsZero:
.8db3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8db6	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8db9	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8dbc	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9797					DecimalScalarTable:
>9797	66 66 66 66				.dword $66666666 ; 0.1
>979b	de					.byte $de
>979c	1f 85 eb 51				.dword $51eb851f ; 0.01
>97a0	db					.byte $db
>97a1	4c 37 89 41				.dword $4189374c ; 0.001
>97a5	d8					.byte $d8
>97a6	ac 8b db 68				.dword $68db8bac ; 0.0001
>97aa	d4					.byte $d4
>97ab	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>97af	d1					.byte $d1
>97b0	83 de 1b 43				.dword $431bde83 ; 1e-06
>97b4	ce					.byte $ce
>97b5	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>97b9	ca					.byte $ca
>97ba	89 3b e6 55				.dword $55e63b89 ; 1e-08
>97be	c7					.byte $c7
>97bf	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>97c3	c4					.byte $c4
>97c4	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>97c8	c0					.byte $c0
>97c9	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>97cd	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.97ce					SyntaxError:
.97ce	a9 02		lda #$02		lda	#2
.97d0	4c dc 82	jmp $82dc		jmp	ErrorHandler
.97d3					RangeError:
.97d3	a9 04		lda #$04		lda	#4
.97d5	4c dc 82	jmp $82dc		jmp	ErrorHandler
.97d8					TypeError:
.97d8	a9 05		lda #$05		lda	#5
.97da	4c dc 82	jmp $82dc		jmp	ErrorHandler
.97dd					ArgumentError:
.97dd	a9 07		lda #$07		lda	#7
.97df	4c dc 82	jmp $82dc		jmp	ErrorHandler
.97e2					NotDoneError:
.97e2	a9 0c		lda #$0c		lda	#12
.97e4	4c dc 82	jmp $82dc		jmp	ErrorHandler
.97e7					ErrorText:
>97e7	42 72 65 61 6b 00			.text	"Break",0
>97ed	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>97f5	72 72 6f 72 00
>97fa	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9802	20 62 79 20 7a 65 72 6f 00
>980b	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9813	61 6e 67 65 00
>9818	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9820	6d 61 74 63 68 00
>9826	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>982e	65 6d 6f 72 79 00
>9834	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>983c	61 72 67 75 6d 65 6e 74 00
>9845	53 74 6f 70 00				.text	"Stop",0
>984a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9852	6f 6f 20 6c 6f 6e 67 00
>985a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9862	6e 20 66 61 69 6c 65 64 00
>986b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9873	61 74 61 00
>9877	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>987f	65 6e 74 65 64 00
>9885	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>988d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9899	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>98a1	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>98ae	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>98b6	74 68 6f 75 74 20 52 65 70 65 61 74 00
>98c3	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>98cb	61 63 6b 20 66 75 6c 6c 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8dc0					StackOpen:
.8dc0	48		pha				pha 								; save frame byte
.8dc1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8dc3	0a		asl a				asl 	a 							; claim twice this for storage
.8dc4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8dc6	38		sec				sec 								; so basically subtracting from
.8dc7	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8dc9	85 34		sta $34				sta 	basicStack
.8dcb	b0 08		bcs $8dd5			bcs 	_SONoBorrow
.8dcd	c6 35		dec $35				dec 	basicStack+1
.8dcf	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8dd1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8dd3	90 04		bcc $8dd9			bcc 	_SOMemory
.8dd5					_SONoBorrow:
.8dd5	68		pla				pla 								; get marker back and write at TOS
.8dd6	92 34		sta ($34)			sta 	(basicStack)
.8dd8	60		rts				rts
.8dd9					_SOMemory:
.8dd9							ERR_STACK
.8dd9					StackClose:
.8dd9	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8ddb	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8ddd	0a		asl a				asl 	a 							; claim twice this.
.8dde	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8de0	85 34		sta $34				sta 	basicStack
.8de2	90 02		bcc $8de6			bcc 	_SCExit
.8de4	e6 35		inc $35				inc 	basicStack+1
.8de6					_SCExit:
.8de6	60		rts				rts
.8de7					StackCheckFrame:
.8de7	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8de9	29 f0		and #$f0			and 	#$F0 						; check type bits
.8deb	d0 01		bne $8dee			bne 	_SCFError 					; different, we have structures mixed up
.8ded	60		rts				rts
.8dee					_SCFError:
.8dee	8a		txa				txa 								; report error X
.8def	4c dc 82	jmp $82dc			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8df2					STKSaveCodePosition:
.8df2	5a		phy				phy
.8df3	98		tya				tya 								; save Y
.8df4	a0 05		ldy #$05			ldy 	#5
.8df6	91 34		sta ($34),y			sta 	(basicStack),y
.8df8	88		dey				dey 								; save Code Pointer
.8df9					_STKSaveLoop:
.8df9	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8dfc	91 34		sta ($34),y			sta 	(basicStack),y
.8dfe	88		dey				dey
.8dff	d0 f8		bne $8df9			bne 	_STKSaveLoop
.8e01	7a		ply				ply
.8e02	60		rts				rts
.8e03					STKLoadCodePosition:
.8e03	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8e05					_STKLoadLoop:
.8e05	b1 34		lda ($34),y			lda 	(basicStack),y
.8e07	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8e0a	c8		iny				iny
.8e0b	c0 05		cpy #$05			cpy 	#5
.8e0d	d0 f6		bne $8e05			bne 	_STKLoadLoop
.8e0f	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8e11	a8		tay				tay
.8e12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8e13					StackReset:
.8e13	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8e15	85 34		sta $34				sta 	0+basicStack
.8e17	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8e19	85 35		sta $35				sta 	1+basicStack
.8e1b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8e1d	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8e1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.98d4					StringConcrete:
.98d4	5a		phy				phy 								; save position on stack
.98d5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.98d8	85 38		sta $38				sta 	zTemp1
.98da	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.98dd	85 39		sta $39				sta 	zTemp1+1
.98df	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.98e1					_SALength:
.98e1	c8		iny				iny
.98e2	b1 38		lda ($38),y			lda 	(zTemp1),y
.98e4	d0 fb		bne $98e1			bne 	_SALength
.98e6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.98e8	b0 3f		bcs $9929			bcs 	_SALengthError
.98ea	98		tya				tya 				 				; length of the new string
.98eb	18		clc				clc
.98ec	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.98ee	90 02		bcc $98f2			bcc 	_SAHaveLength
.98f0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.98f2					_SAHaveLength:
.98f2	48		pha				pha 								; save length.
.98f3	38		sec				sec
.98f4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.98f6	6d 0e 07	adc $070e			adc 	StringMemory
.98f9	8d 0e 07	sta $070e			sta 	StringMemory
.98fc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.98fe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9901	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9903	6d 0f 07	adc $070f			adc 	StringMemory+1
.9906	8d 0f 07	sta $070f			sta 	StringMemory+1
.9909	85 3b		sta $3b				sta 	zTemp2+1
.990b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.990e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.990f	38		sec				sec
.9910	e9 03		sbc #$03			sbc 	#3
.9912	92 3a		sta ($3a)			sta 	(zTemp2)
.9914	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9916	a0 01		ldy #$01			ldy 	#1
.9918	91 3a		sta ($3a),y			sta 	(zTemp2),y
.991a					_SACopyNewString:
.991a	a0 00		ldy #$00			ldy 	#0
.991c					_SACopyNSLoop:
.991c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.991e	c8		iny				iny 								; write two on in string storage
.991f	c8		iny				iny
.9920	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9922	88		dey				dey 								; this makes it one one.
.9923	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9925	d0 f5		bne $991c			bne 	_SACopyNSLoop
.9927	7a		ply				ply
.9928	60		rts				rts
.9929					_SALengthError:
.9929	a9 09		lda #$09		lda	#9
.992b	4c dc 82	jmp $82dc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.992e					StringSystemInitialise:
.992e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9930	8d 0e 07	sta $070e			sta 	0+StringMemory
.9933	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9935	8d 0f 07	sta $070f			sta 	1+StringMemory
.9938	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.993b	60		rts				rts
.993c					StringSpaceInitialise:
.993c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.993e	8d 10 07	sta $0710			sta 	StringInitialised
.9941	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9944	8d 11 07	sta $0711			sta 	StringTempPointer
.9947	ad 0f 07	lda $070f			lda 	StringMemory+1
.994a	3a		dec a				dec 	a
.994b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.994e	60		rts				rts
.994f					StringTempAllocate:
.994f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9951	b0 35		bcs $9988			bcs 	_STALength
.9953	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9956	30 05		bmi $995d			bmi 	_STAAllocate
.9958	48		pha				pha 								; save value to subtract.
.9959	20 3c 99	jsr $993c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.995c	68		pla				pla 								; restore it
.995d					_STAAllocate:
.995d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.995f	18		clc				clc  								; deliberate allows one more
.9960	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9963	8d 11 07	sta $0711			sta 	StringTempPointer
.9966	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9969	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.996b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.996e	69 ff		adc #$ff			adc 	#$FF
.9970	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9973	85 3d		sta $3d				sta 	zsTemp+1
.9975	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9978	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.997b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.997e	a9 10		lda #$10			lda 	#NSTString
.9980	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9983	a9 00		lda #$00			lda 	#0 							; clear the target string
.9985	92 3c		sta ($3c)			sta 	(zsTemp)
.9987	60		rts				rts
.9988					_STALength:
.9988	a9 09		lda #$09		lda	#9
.998a	4c dc 82	jmp $82dc		jmp	ErrorHandler
.998d					StringTempWrite:
.998d	48		pha				pha
.998e	92 3c		sta ($3c)			sta 	(zsTemp)
.9990	e6 3c		inc $3c				inc 	zsTemp
.9992	d0 02		bne $9996			bne 	_STWNoCarry
.9994	e6 3d		inc $3d				inc 	zsTemp+1
.9996					_STWNoCarry:
.9996	a9 00		lda #$00			lda 	#0
.9998	92 3c		sta ($3c)			sta 	(zsTemp)
.999a	68		pla				pla
.999b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8e20					BackloadProgram:
.8e20	a2 ff		ldx #$ff			ldx 	#$FF
.8e22	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8e25	20 4f 8e	jsr $8e4f			jsr 	BLReadByte
.8e28	30 1e		bmi $8e48			bmi 	_BPExit
.8e2a					_BPCopy:
.8e2a	e8		inx				inx  								; copy byte in
.8e2b	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8e2e	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8e31	20 4f 8e	jsr $8e4f			jsr 	BLReadByte 					; read next byte
.8e34	30 0a		bmi $8e40			bmi 	_BPEndLine 					; -ve = EOL
.8e36	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8e38	d0 02		bne $8e3c			bne 	_BPNotTab
.8e3a	a9 20		lda #$20			lda 	#' '
.8e3c					_BPNotTab:
.8e3c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8e3e	b0 ea		bcs $8e2a			bcs 	_BPCopy
.8e40					_BPEndLine:
.8e40	20 13 90	jsr $9013			jsr 	TokeniseLine 				; tokenise the line.
.8e43	20 9f 92	jsr $929f			jsr 	MemoryAppend 				; append to current program
.8e46	80 d8		bra $8e20			bra 	BackloadProgram
.8e48					_BPExit:
.8e48	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8e4b	20 2a 81	jsr $812a			jsr 	ClearCommand 				; clear variables etc.
.8e4e	60		rts				rts
.8e4f					BLReadByte:
.8e4f					_BLLoad:
.8e4f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8e52	ee 50 8e	inc $8e50			inc 	_BLLoad+1
.8e55	d0 03		bne $8e5a			bne 	_BLNoCarry
.8e57	ee 51 8e	inc $8e51			inc 	_BLLoad+2
.8e5a					_BLNoCarry:
.8e5a	c9 00		cmp #$00			cmp 	#0
.8e5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8e5d					TokeniseSearchTable:
.8e5d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8e5f	85 36		sta $36				sta 	zTemp0
.8e61	a0 00		ldy #$00			ldy 	#0
.8e63	a9 80		lda #$80			lda 	#$80 						; token #
.8e65	85 38		sta $38				sta 	zTemp1
.8e67					_TSTLoop:
.8e67	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8e69	30 49		bmi $8eb4			bmi 	_TSTFail 					; -ve = end of table
.8e6b	f0 2e		beq $8e9b			beq 	_TSTNext 					; zero, check next it's a dummy
.8e6d	c8		iny				iny 								; get the hash
.8e6e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e70	88		dey				dey
.8e71	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8e74	d0 25		bne $8e9b			bne 	_TSTNext
.8e76	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8e79	38		sec				sec
.8e7a	ed 00 07	sbc $0700			sbc 	identStart
.8e7d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8e7f	d0 1a		bne $8e9b			bne 	_TSTNext
.8e81	5a		phy				phy 								; save Y , we might fail
.8e82	c8		iny				iny 								; point to text
.8e83	c8		iny				iny
.8e84	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8e87					_TSTCompareName:
.8e87	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8e8a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e8c	d0 0c		bne $8e9a			bne 	_TSTNextPullY 				; fail, pullY and do next
.8e8e	e8		inx				inx
.8e8f	c8		iny				iny
.8e90	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8e93	d0 f2		bne $8e87			bne 	_TSTCompareName
.8e95	7a		ply				ply 								; throw Y
.8e96	a5 38		lda $38				lda 	zTemp1 						; get token #
.8e98	38		sec				sec 								; return with CS = passed.
.8e99	60		rts				rts
.8e9a					_TSTNextPullY:
.8e9a	7a		ply				ply 								; restore current, fall through.
.8e9b					_TSTNext:
.8e9b	e6 38		inc $38				inc 	zTemp1 						; token counter
.8e9d	98		tya				tya
.8e9e	18		clc				clc
.8e9f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8ea1	1a		inc a				inc 	a 							; +1
.8ea2	1a		inc a				inc 	a 							; +2
.8ea3	a8		tay				tay
.8ea4	10 c1		bpl $8e67			bpl 	_TSTLoop 					; if Y < $80 loop back
.8ea6	98		tya				tya 								; add Y to zTemp0 and reset Y
.8ea7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8ea9	18		clc				clc  								; but have tables > 255 bytes
.8eaa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8eac	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8eae	90 b7		bcc $8e67			bcc 	_TSTLoop
.8eb0	e6 37		inc $37				inc 	zTemp0+1
.8eb2	80 b3		bra $8e67			bra 	_TSTLoop
.8eb4					_TSTFail:
.8eb4	18		clc				clc
.8eb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8eb6					KeywordSet0:
>8eb6	00 65					.text	0,$65,""               ; $80 !0:EOF
>8eb8	00 58					.text	0,$58,""               ; $81 !1:SH1
>8eba	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ebc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8ec2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8eca	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8ed0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8ed7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8ede	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8ee5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8eeb	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8ef3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8efb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8f01	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8f08	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8f0e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8f16	28
>8f17	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8f1d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8f23	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8f29	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8f30	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8f36	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8f3c	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8f41	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8f45	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8f4b	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8f53	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8f5a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8f61	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8f69	43
>8f6a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8f70	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8f77	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8f7d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8f83	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8f88	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8f8e	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8f93	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a4 DOWNTO
>8f9b	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>8fa2	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>8fa8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>8fad	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>8fb4	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>8fba	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>8fbf	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>8fc7	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>8fcd	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>8fd1	ff					.text	$FF
.8fd2					KeywordSet1:
>8fd2	00 65					.text	0,$65,""               ; $80 !0:EOF
>8fd4	00 58					.text	0,$58,""               ; $81 !1:SH1
>8fd6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8fd8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8fe0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8fe7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8fec	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8ff2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8ff7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8fff	45
>9000	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9005	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>900b	ff					.text	$FF
.900c					KeywordSet2:
>900c	00 65					.text	0,$65,""               ; $80 !0:EOF
>900e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9010	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9012	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9013					TokeniseLine:
.9013	20 9b 91	jsr $919b			jsr 	FixLineBufferCase 			; fix line case
.9016	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9018	8d 15 07	sta $0715			sta 	tokenOffset
.901b	9c 16 07	stz $0716			stz 	tokenLineNumber
.901e	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9021	a2 ff		ldx #$ff			ldx 	#$FF
.9023					_TKFindFirst:
.9023	e8		inx				inx
.9024	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9027	f0 79		beq $90a2			beq 	_TKExit
.9029	c9 20		cmp #$20			cmp 	#' '
.902b	90 f6		bcc $9023			bcc 	_TKFindFirst
.902d	c9 30		cmp #$30			cmp 	#'0'
.902f	90 07		bcc $9038			bcc 	_TKNoLineNumber
.9031	c9 3a		cmp #$3a			cmp 	#'9'+1
.9033	b0 03		bcs $9038			bcs 	_TKNoLineNumber
.9035	20 c5 91	jsr $91c5			jsr 	TokeniseExtractLineNumber
.9038					_TKNoLineNumber:
.9038					_TKTokeniseLoop:
.9038	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.903b	f0 65		beq $90a2			beq 	_TKExit
.903d	e8		inx				inx
.903e	c9 20		cmp #$20			cmp 	#' '
.9040	f0 f6		beq $9038			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9042	ca		dex				dex 								; undo last get, A contains character, X is position.
.9043	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9045	f0 61		beq $90a8			beq 	_TKTokeniseIdentifier
.9047	c9 41		cmp #$41			cmp 	#'A'
.9049	90 04		bcc $904f			bcc 	_TKTokenisePunctuation
.904b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.904d	90 59		bcc $90a8			bcc 	_TKTokeniseIdentifier
.904f					_TKTokenisePunctuation:
.904f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9051	f0 27		beq $907a			beq 	_TKString
.9053	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9055	f0 28		beq $907f			beq 	_TKHexConstant
.9057	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9059	f0 29		beq $9084			beq 	_TKCheckDouble
.905b	c9 3e		cmp #$3e			cmp 	#'>'
.905d	f0 25		beq $9084			beq 	_TKCheckDouble
.905f					_TKStandardPunctuation:
.905f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9062	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9064	90 0e		bcc $9074			bcc 	_TKNoShift
.9066	48		pha				pha 								; save
.9067	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9069	85 36		sta $36				sta 	zTemp0
.906b	68		pla				pla
.906c	29 20		and #$20			and 	#32 						; bit 5
.906e	4a		lsr a				lsr 	a 							; shift into bit 3
.906f	4a		lsr a				lsr 	a
.9070	05 36		ora $36				ora 	zTemp0
.9072	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9074					_TKNoShift:
.9074	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte 			; write the punctuation character
.9077	e8		inx				inx 								; consume the character
.9078	80 be		bra $9038			bra 	_TKTokeniseLoop 			; and loop round again.
.907a					_TKString:
.907a	20 2a 91	jsr $912a			jsr 	TokeniseString
.907d	80 b9		bra $9038			bra 	_TKTokeniseLoop
.907f					_TKHexConstant:
.907f	20 65 91	jsr $9165			jsr 	TokeniseHexConstant
.9082	80 b4		bra $9038			bra 	_TKTokeniseLoop
.9084					_TKCheckDouble:
.9084	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9087	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9089	90 d4		bcc $905f			bcc 	_TKStandardPunctuation
.908b	c9 3f		cmp #$3f			cmp 	#'>'+1
.908d	b0 d0		bcs $905f			bcs 	_TKStandardPunctuation
.908f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9092	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9094	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9095	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9098	38		sec				sec
.9099	e9 3c		sbc #$3c			sbc 	#'<'
.909b	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.909e	e8		inx				inx 								; consume both
.909f	e8		inx				inx
.90a0	80 96		bra $9038			bra 	_TKTokeniseLoop
.90a2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.90a4	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.90a7	60		rts				rts
.90a8					_TKTokeniseIdentifier:
.90a8	8e 00 07	stx $0700			stx 	identStart 					; save start
.90ab	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.90ae					_TKCheckLoop:
.90ae	e8		inx				inx 								; look at next, we know first is identifier.
.90af	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.90b2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.90b4	f0 f8		beq $90ae			beq 	_TKCheckLoop
.90b6	c9 30		cmp #$30			cmp	 	#"0"
.90b8	90 0c		bcc $90c6			bcc 	_TKEndIdentifier
.90ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.90bc	90 f0		bcc $90ae			bcc 	_TKCheckLoop
.90be	c9 41		cmp #$41			cmp	 	#"A"
.90c0	90 04		bcc $90c6			bcc 	_TKEndIdentifier
.90c2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.90c4	90 e8		bcc $90ae			bcc 	_TKCheckLoop
.90c6					_TKEndIdentifier:
.90c6	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.90c9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.90cb	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.90cd	f0 06		beq $90d5			beq 	_TKHasTypeCharacter
.90cf	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.90d1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.90d3	d0 07		bne $90dc			bne 	_TKNoTypeCharacter
.90d5					_TKHasTypeCharacter:
.90d5	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.90d8	e8		inx				inx 								; read next
.90d9	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90dc					_TKNoTypeCharacter:
.90dc	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.90de	d0 09		bne $90e9			bne 	_TKNoArray
.90e0	e8		inx				inx 								; skip the (
.90e1	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.90e4	09 04		ora #$04			ora 	#$04
.90e6	8d 04 07	sta $0704			sta 	identTypeByte
.90e9					_TKNoArray:
.90e9	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.90ec	20 86 91	jsr $9186			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.90ef	a0 8e		ldy #$8e			ldy 	#(KeywordSet0) >> 8
.90f1	a9 b6		lda #$b6			lda 	#(KeywordSet0) & $FF
.90f3	20 5d 8e	jsr $8e5d			jsr 	TokeniseSearchTable
.90f6	a2 00		ldx #$00			ldx 	#0
.90f8	b0 1f		bcs $9119			bcs 	_TKFoundToken
.90fa	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.90fc	a9 d2		lda #$d2			lda 	#(KeywordSet1) & $FF
.90fe	20 5d 8e	jsr $8e5d			jsr 	TokeniseSearchTable
.9101	a2 81		ldx #$81			ldx 	#$81
.9103	b0 14		bcs $9119			bcs 	_TKFoundToken
.9105	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.9107	a9 d2		lda #$d2			lda 	#(KeywordSet1) & $FF
.9109	20 5d 8e	jsr $8e5d			jsr 	TokeniseSearchTable
.910c	a2 82		ldx #$82			ldx 	#$82
.910e	b0 09		bcs $9119			bcs 	_TKFoundToken
.9110	20 16 92	jsr $9216			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9113	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9116	4c 38 90	jmp $9038			jmp 	_TKTokeniseLoop 			; and go round again.
.9119					_TKFoundToken:
.9119	48		pha				pha 								; save token
.911a	8a		txa				txa 								; shift in X, is there one ?
.911b	f0 03		beq $9120			beq 	_TKNoTShift
.911d	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte 			; if so, write it out
.9120					_TKNoTShift:
.9120	68		pla				pla 								; restore and write token
.9121	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.9124	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9127	4c 38 90	jmp $9038			jmp 	_TKTokeniseLoop 			; and go round again.
.912a					TokeniseString:
.912a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.912c	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.912f	e8		inx				inx									; start of quoted string.
.9130	da		phx				phx 								; push start of string on top
.9131	ca		dex				dex
.9132					_TSFindEnd:
.9132	e8		inx				inx
.9133	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9136	f0 04		beq $913c			beq 	_TSEndOfString
.9138	c9 22		cmp #$22			cmp 	#'"'
.913a	d0 f6		bne $9132			bne 	_TSFindEnd
.913c					_TSEndOfString:
.913c	7a		ply				ply  								; so now Y is first character, X is character after end.
.913d	48		pha				pha 								; save terminating character
.913e	20 46 91	jsr $9146			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9141	68		pla				pla 								; terminating character
.9142	f0 01		beq $9145			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9144	e8		inx				inx
.9145					_TSNotQuote:
.9145	60		rts				rts
.9146					TOWriteBlockXY:
.9146	86 36		stx $36				stx 	zTemp0 						; write end character
.9148	98		tya				tya
.9149	49 ff		eor #$ff			eor 	#$FF
.914b	38		sec				sec
.914c	65 36		adc $36				adc 	zTemp0
.914e	1a		inc a				inc 	a 							; one extra for NULL
.914f	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.9152					_TOBlockLoop:
.9152	c4 36		cpy $36				cpy 	zTemp0
.9154	f0 09		beq $915f			beq 	_TOBlockExit
.9156	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9159	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.915c	c8		iny				iny
.915d	80 f3		bra $9152			bra 	_TOBlockLoop
.915f					_TOBlockExit:
.915f	a9 00		lda #$00			lda 	#0
.9161	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.9164	60		rts				rts
.9165					TokeniseHexConstant:
.9165	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9167	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.916a	e8		inx				inx									; start of quoted string.
.916b	da		phx				phx 								; push start of constant on top
.916c	ca		dex				dex
.916d					_THFindLoop:
.916d	e8		inx				inx
.916e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9171	c9 30		cmp #$30			cmp 	#"0"
.9173	90 0c		bcc $9181			bcc 	_THFoundEnd
.9175	c9 3a		cmp #$3a			cmp 	#"9"+1
.9177	90 f4		bcc $916d			bcc 	_THFindLoop
.9179	c9 41		cmp #$41			cmp 	#"A"
.917b	90 04		bcc $9181			bcc 	_THFoundEnd
.917d	c9 47		cmp #$47			cmp 	#"F"+1
.917f	90 ec		bcc $916d			bcc 	_THFindLoop
.9181					_THFoundEnd:
.9181	7a		ply				ply 								; restore start
.9182	20 46 91	jsr $9146			jsr 	TOWriteBlockXY 				; output the block
.9185	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9186					TokeniseCalculateHash:
.9186	da		phx				phx
.9187	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.918a	a9 00		lda #$00			lda 	#0
.918c					_TCHLoop:
.918c	18		clc				clc
.918d	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9190	e8		inx				inx
.9191	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9194	d0 f6		bne $918c			bne 	_TCHLoop
.9196	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9199	fa		plx				plx
.919a	60		rts				rts
.919b					FixLineBufferCase:
.919b	a2 00		ldx #$00			ldx 	#0
.919d					_FLBCLoop:
.919d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.91a0	f0 22		beq $91c4			beq 	_FLBCExit 					; end of string.
.91a2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.91a4	f0 11		beq $91b7			beq 	_FLBCInQuotes
.91a6	e8		inx				inx
.91a7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.91a9	90 f2		bcc $919d			bcc 	_FLBCLoop
.91ab	c9 7b		cmp #$7b			cmp 	#'z'+1
.91ad	b0 ee		bcs $919d			bcs 	_FLBCLoop
.91af	38		sec				sec 								; make U/C
.91b0	e9 20		sbc #$20			sbc 	#32
.91b2	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.91b5	80 e6		bra $919d			bra 	_FLBCLoop
.91b7					_FLBCInQuotes:
.91b7	e8		inx				inx 								; advance
.91b8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.91bb	f0 07		beq $91c4			beq 	_FLBCExit 					; exit on EOS
.91bd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.91bf	d0 f6		bne $91b7			bne 	_FLBCInQuotes
.91c1	e8		inx				inx 								; skip over it
.91c2	80 d9		bra $919d			bra 	_FLBCLoop
.91c4					_FLBCExit:
.91c4	60		rts				rts
.91c5					TokeniseExtractLineNumber:
.91c5	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.91c8	48		pha				pha
.91c9	ad 16 07	lda $0716			lda 	tokenLineNumber
.91cc	48		pha				pha
.91cd	20 03 92	jsr $9203			jsr 	_TELNTimes2 				; line # x 4
.91d0	20 03 92	jsr $9203			jsr 	_TELNTimes2 				; line # x 2
.91d3	18		clc				clc 								; add stacked value
.91d4	68		pla				pla
.91d5	6d 16 07	adc $0716			adc 	tokenLineNumber
.91d8	8d 16 07	sta $0716			sta 	tokenLineNumber
.91db	68		pla				pla
.91dc	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.91df	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.91e2	20 03 92	jsr $9203			jsr 	_TELNTimes2 				; line # x 10
.91e5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.91e8	e8		inx				inx
.91e9	29 0f		and #$0f			and 	#15 						; add to line #
.91eb	18		clc				clc
.91ec	6d 16 07	adc $0716			adc 	tokenLineNumber
.91ef	8d 16 07	sta $0716			sta 	tokenLineNumber
.91f2	90 03		bcc $91f7			bcc 	_TLENNoCarry
.91f4	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.91f7					_TLENNoCarry:
.91f7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.91fa	c9 30		cmp #$30			cmp 	#'0'
.91fc	90 04		bcc $9202			bcc 	_TLENExit
.91fe	c9 3a		cmp #$3a			cmp 	#'9'+1
.9200	90 c3		bcc $91c5			bcc 	TokeniseExtractLineNumber
.9202					_TLENExit:
.9202	60		rts				rts
.9203					_TELNTimes2:
.9203	0e 16 07	asl $0716			asl 	tokenLineNumber
.9206	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9209	60		rts				rts
.920a					TokeniseWriteByte:
.920a	da		phx				phx
.920b	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.920e	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9211	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9214	fa		plx				plx
.9215	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9216					CheckCreateVariableRecord:
.9216	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9218	85 36		sta $36				sta 	0+zTemp0
.921a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.921c	85 37		sta $37				sta 	1+zTemp0
.921e					_CCVSearch:
.921e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9220	f0 2c		beq $924e			beq 	_CCVFail
.9222	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9224	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9226	cd 03 07	cmp $0703			cmp 	identHash
.9229	d0 16		bne $9241			bne 	_CCVNext
.922b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.922d	ae 00 07	ldx $0700			ldx 	identStart
.9230					_CCVCompare:
.9230	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9233	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9235	e8		inx				inx 								; advance pointers
.9236	c8		iny				iny
.9237	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9238	d0 07		bne $9241			bne 	_CCVNext  					; didn't match go to next.
.923a	90 f4		bcc $9230			bcc 	_CCVCompare 				; not finished yet.
.923c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.923f	f0 41		beq $9282			beq 	_CCVFound 					; yes, we were successful
.9241					_CCVNext:
.9241	18		clc				clc
.9242	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9244	65 36		adc $36				adc 	zTemp0
.9246	85 36		sta $36				sta 	zTemp0
.9248	90 d4		bcc $921e			bcc 	_CCVSearch
.924a	e6 37		inc $37				inc 	zTemp0+1
.924c	80 d0		bra $921e			bra 	_CCVSearch
.924e					_CCVFail:
.924e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9250	ad 03 07	lda $0703			lda 	identHash
.9253	91 36		sta ($36),y			sta 	(zTemp0),y
.9255	c8		iny				iny 								; offset 2 is the type byte
.9256	ad 04 07	lda $0704			lda 	identTypeByte
.9259	91 36		sta ($36),y			sta 	(zTemp0),y
.925b	c8		iny				iny
.925c					_CCVData:
.925c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.925e	91 36		sta ($36),y			sta 	(zTemp0),y
.9260	c8		iny				iny
.9261	c0 08		cpy #$08			cpy 	#8
.9263	90 f7		bcc $925c			bcc 	_CCVData
.9265	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9268					_CCVCopyName:
.9268	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.926b	91 36		sta ($36),y			sta 	(zTemp0),y
.926d	e8		inx				inx
.926e	c8		iny				iny
.926f	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9272	d0 f4		bne $9268			bne 	_CCVCopyName
.9274	98		tya				tya 								; patch offset
.9275	92 36		sta ($36)			sta 	(zTemp0)
.9277	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9279	91 36		sta ($36),y			sta 	(zTemp0),y
.927b	88		dey				dey
.927c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.927e	09 80		ora #$80			ora 	#$80
.9280	91 36		sta ($36),y			sta 	(zTemp0),y
.9282					_CCVFound:
.9282	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9284	38		sec				sec
.9285	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9287	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9289	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.928c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.928e	20 0a 92	jsr $920a			jsr 	TokeniseWriteByte
.9291	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.999c					MemoryPeek:
.999c	b2 36		lda ($36)			lda 	(zTemp0)
.999e	60		rts				rts
.999f					MemoryPoke:
.999f	92 36		sta ($36)			sta 	(zTemp0)
.99a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.99a2					EXTPrintCharacter:
.99a2	48		pha				pha
.99a3	da		phx				phx
.99a4	5a		phy				phy
.99a5	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.99a8	7a		ply				ply
.99a9	fa		plx				plx
.99aa	68		pla				pla
.99ab	60		rts				rts
.99ac					EXTInputSingleCharacter:
.99ac	da		phx				phx
.99ad	5a		phy				phy
.99ae					_EISCWait:
.99ae	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.99b1	c9 00		cmp #$00			cmp 	#0
.99b3	f0 f9		beq $99ae			beq 	_EISCWait
.99b5	7a		ply				ply
.99b6	fa		plx				plx
.99b7	60		rts				rts
.99b8					EXTInputLine:
.99b8	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.99ba					_ILLoop:
.99ba	da		phx				phx 								; read character in
.99bb	20 cf ff	jsr $ffcf			jsr 	$FFCF
.99be	fa		plx				plx
.99bf	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.99c1	f0 12		beq $99d5			beq 	_ILBackspace
.99c3	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.99c5	f0 15		beq $99dc			beq 	_ILExit
.99c7	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.99c9	90 ef		bcc $99ba			bcc 	_ILLoop
.99cb	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.99cd	f0 eb		beq $99ba			beq 	_ILLoop
.99cf	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.99d2	e8		inx				inx
.99d3	80 e5		bra $99ba			bra 	_ILLoop
.99d5					_ILBackspace:
.99d5	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.99d7	f0 e1		beq $99ba			beq 	_ILLoop
.99d9	ca		dex				dex 								; back one.
.99da	80 de		bra $99ba			bra 	_ILLoop
.99dc					_ILExit:
.99dc	20 a2 99	jsr $99a2			jsr 	EXTPrintCharacter
.99df	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.99e2	60		rts				rts
.99e3					EXTBreakCheck:
.99e3	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9292					MemoryNew:
.9292	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9294	85 30		sta $30				sta 	codePtr
.9296	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9298	85 31		sta $31				sta 	codePtr+1
.929a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.929c	92 30		sta ($30)			sta 	(codePtr)
.929e	60		rts				rts
.929f					MemoryAppend:
.929f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.92a1	85 30		sta $30				sta 	codePtr
.92a3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.92a5	85 31		sta $31				sta 	codePtr+1
.92a7					_MAFindEnd:
.92a7	b2 30		lda ($30)			lda 	(codePtr)
.92a9	f0 0d		beq $92b8			beq 	_MAFoundEnd
.92ab	18		clc				clc
.92ac	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92ae	65 30		adc $30				adc 	codePtr
.92b0	85 30		sta $30				sta 	codePtr
.92b2	90 02		bcc $92b6			bcc 	_CREExit
.92b4	e6 31		inc $31				inc 	codePtr+1
.92b6					_CREExit:
.92b6	80 ef		bra $92a7			bra 	_MAFindEnd
.92b8					_MAFoundEnd:
.92b8	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.92bb	c0 04		cpy #$04			cpy 	#4 							; blank line
.92bd	f0 0e		beq $92cd			beq 	_MANoLine
.92bf	a9 00		lda #$00			lda 	#0 							; end of program
.92c1	91 30		sta ($30),y			sta 	(codePtr),y
.92c3					_MACopy:
.92c3	88		dey				dey
.92c4	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.92c7	91 30		sta ($30),y			sta 	(codePtr),y
.92c9	c0 00		cpy #$00			cpy 	#0
.92cb	d0 f6		bne $92c3			bne 	_MACopy
.92cd					_MANoLine:
.92cd	60		rts				rts
.92ce					MemoryInline:
.92ce	98		tya				tya 								; put address into stack,x
.92cf	18		clc				clc
.92d0	65 30		adc $30				adc 	codePtr
.92d2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92d5	a5 31		lda $31				lda 	codePtr+1
.92d7	69 00		adc #$00			adc 	#0
.92d9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92dc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.92df	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.92e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.92e3					MemoryTransferAX:
.92e3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.92e5	86 37		stx $37				stx 	zTemp0+1
.92e7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.92e9	85 30		sta $30				sta 	codePtr
.92eb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.92ed	85 31		sta $31				sta 	codePtr+1
.92ef					_MTAXLoop:
.92ef	b2 30		lda ($30)			lda 	(codePtr)
.92f1	f0 1d		beq $9310			beq 	_MTAXError 					; not found.
.92f3	a0 01		ldy #$01			ldy 	#1 							; check LSB
.92f5	b1 30		lda ($30),y			lda 	(codePtr),y
.92f7	c5 36		cmp $36				cmp 	zTemp0
.92f9	d0 07		bne $9302			bne 	_MTAXNext
.92fb	c8		iny				iny 								; check MSB
.92fc	b1 30		lda ($30),y			lda 	(codePtr),y
.92fe	c5 37		cmp $37				cmp 	zTemp0+1
.9300	f0 0d		beq $930f			beq 	_MTAXExit 					; success !
.9302					_MTAXNext:
.9302	18		clc				clc
.9303	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9305	65 30		adc $30				adc 	codePtr
.9307	85 30		sta $30				sta 	codePtr
.9309	90 02		bcc $930d			bcc 	_CREExit
.930b	e6 31		inc $31				inc 	codePtr+1
.930d					_CREExit:
.930d	80 e0		bra $92ef			bra 	_MTAXLoop
.930f					_MTAXExit:
.930f	60		rts				rts
.9310					_MTAXError:
.9310	a9 0d		lda #$0d		lda	#13
.9312	4c dc 82	jmp $82dc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
