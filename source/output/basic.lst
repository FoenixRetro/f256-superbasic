
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 16:09:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 b7 84	jsr $84b7			jsr 	RunDemos
.8013	20 d9 8c	jsr $8cd9			jsr 	NewCommand 					; erase current program
.8016	20 7b 9f	jsr $9f7b			jsr 	BackloadProgram
.8019	4c 35 88	jmp $8835			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1052."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 30 35 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
=$5f7					gsPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 87 85	jsr $8587			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 fe 84	jsr $84fe			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 0f 85	jsr $850f			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 1c 85	jsr $851c			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 fe 84	jsr $84fe			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 0f 85	jsr $850f			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 fe 84	jsr $84fe			jsr 	GXOpenBitmap
.8216	20 a5 85	jsr $85a5			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 1c 85	jsr $851c			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3a		sta ($3a),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 0f 85	jsr $850f			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.82ad	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3b		sta $3b				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.82ca	a5 3b		lda $3b				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3b		sta $3b				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 6c 85	jsr $856c			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 fe 84	jsr $84fe			jsr 	GXOpenBitmap 				; start drawing
.8345	20 87 85	jsr $8587			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 1c 85	jsr $851c			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 6c 85	jsr $856c			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 0f 85	jsr $850f			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3b		lda $3b				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3b		lda $3b				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3b		sta $3b				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap 			; fix up.
.83d0	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3b		sta $3b				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3a		sta $3a				sta 	gsTemp
.83e7	60		rts				rts
.83e8					_GXDLTCheckWrap:
.83e8	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3b		sta $3b				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
>83f5	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.83f6					GXFontHandler:
>83f6	db						.byte 	$DB 						; causes a break in the emulator
.83f7	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.83f9	06 36		asl $36				asl	 	gzTemp0 					; x 2
.83fb	26 37		rol $37				rol	 	gzTemp0+1
.83fd	06 36		asl $36				asl	 	gzTemp0 					; x 4
.83ff	26 37		rol $37				rol	 	gzTemp0+1
.8401	06 36		asl $36				asl	 	gzTemp0 					; x 8
.8403	26 37		rol $37				rol	 	gzTemp0+1
.8405	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.8407	09 c0		ora #$c0			ora 	#$C0
.8409	85 37		sta $37				sta 	gzTemp0+1
.840b	a9 08		lda #$08			lda 	#8 							; size 8x8
.840d	a2 15		ldx #$15			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.840f	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.8411	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.8414	60		rts				rts
.8415					GXGetGraphicDataFont:
>8415	db						.byte 	$DB 						; causes a break in the emulator
.8416	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.8417					GraphicDraw:
.8417	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8419	b0 06		bcs $8421			bcs 	_GDCoordinate
.841b	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.841d	84 37		sty $37				sty 	gzTemp0+1
.841f	80 2c		bra $844d			bra 	_GDExecuteA 				; and execute
.8421					_GDCoordinate:
.8421	48		pha				pha 								; save AXY
.8422	da		phx				phx
.8423	5a		phy				phy
.8424	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8426					_GDCopy1:
.8426	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8429	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.842c	ca		dex				dex
.842d	10 f7		bpl $8426			bpl 	_GDCopy1
.842f	68		pla				pla 								; update Y
.8430	8d 2b 06	sta $062b			sta 	gxCurrentY
.8433	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8436	68		pla				pla
.8437	8d 29 06	sta $0629			sta 	gxCurrentX
.843a	68		pla				pla 								; get A (command+X.1) back
.843b	48		pha				pha
.843c	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.843e	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.8441	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8443					_GDCopy2:
.8443	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8446	9d 31 06	sta $0631,x			sta 	gxX0,x
.8449	ca		dex				dex
.844a	10 f7		bpl $8443			bpl 	_GDCopy2
.844c	68		pla				pla 								; get command back
.844d					_GDExecuteA:
.844d	29 fe		and #$fe			and 	#$FE 						; lose LSB
.844f	aa		tax				tax
.8450	7c 54 84	jmp ($8454,x)			jmp 	(GDVectors,x)
.8453					GXMove:
.8453	60		rts				rts
.8454					GDVectors:
>8454							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>8458	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>845a	8a 84						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>845c							.fill 	12*2 						; $03-$0F 	: Reserved
>8474	53 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8476	13 82						.word 	GXLine 						; $11 		: Draw line
>8478	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>847a	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>847c	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>847e	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
>8480							.fill 	2*2 						; $16-$17 	; Reserved for ellipse.
>8484	f6 83						.word 	GXFontHandler 				; $18 		; Draw from font
>8486							.fill 	2 							; $19		; Reserved for drawing functions
>8488							.fill 	2 							; $1A 		; Point plot
.848a					GXSetColourMode:
.848a	a6 36		ldx $36				ldx 	gzTemp0
.848c	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.848f	a5 37		lda $37				lda 	gzTemp0+1 								;
.8491	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.8494	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8496	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8499	ae 3c 06	ldx $063c			ldx 	gxColour
.849c	8e 3d 06	stx $063d			stx 	gxEORValue
.849f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a1	90 03		bcc $84a6			bcc 	_GXSDCNotAndColour
.84a3	8e 3e 06	stx $063e			stx 	gxANDValue
.84a6					_GXSDCNotAndColour:
.84a6	d0 03		bne $84ab			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a8	9c 3d 06	stz $063d			stz 	gxEORValue
.84ab					_GXSDCNotAnd:
.84ab	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ac	90 08		bcc $84b6			bcc 	_GXSDCNoFlip
.84ae	ad 3e 06	lda $063e			lda	 	gxANDValue
.84b1	49 ff		eor #$ff			eor 	#$FF
.84b3	8d 3e 06	sta $063e			sta 	gxANDValue
.84b6					_GXSDCNoFlip:
.84b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.84b7					RunDemos:
.84b7	64 01		stz $01				stz 	1
.84b9	a9 0f		lda #$0f			lda 	#$0F
.84bb	8d 00 d0	sta $d000			sta 	$D000
.84be	a9 01		lda #$01			lda 	#1
.84c0	8d 00 d1	sta $d100			sta 	$D100
.84c3	9c 01 d1	stz $d101			stz 	$D101
.84c6	9c 02 d1	stz $d102			stz 	$D102
.84c9	a9 02		lda #$02			lda 	#2
.84cb	8d 03 d1	sta $d103			sta 	$D103
.84ce	a9 10		lda #$10			lda 	#16
.84d0	8d 39 06	sta $0639			sta 	gxBasePage
.84d3	a9 f0		lda #$f0			lda 	#240
.84d5	8d 3a 06	sta $063a			sta 	gxHeight
.84d8					loop:
.84d8	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.84da	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.84dc	a0 00		ldy #$00			ldy 	#(0)
.84de	20 17 84	jsr $8417			jsr 	GraphicDraw
.84e1	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.84e3	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.84e5	a0 01		ldy #$01			ldy 	#(1)
.84e7	20 17 84	jsr $8417			jsr 	GraphicDraw
.84ea	20 06 9c	jsr $9c06	demo:	jsr 	Random32Bit
.84ed	ee 3d 06	inc $063d			inc 	gxEORValue
.84f0	a9 28		lda #$28			lda 	#20*2
.84f2	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.84f5	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.84f8	20 17 84	jsr $8417			jsr 	GraphicDraw
.84fb	80 ed		bra $84ea			bra 	demo
.84fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.84fe					GXOpenBitmap:
.84fe	78		sei				sei 								; no interrupts here
.84ff	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8501	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8504	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8506	85 00		sta $00				sta 	0
.8508	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.850a	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.850d	58		cli				cli
.850e	60		rts				rts
.850f					GXCloseBitmap:
.850f	78		sei				sei
.8510	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8513	85 0b		sta $0b				sta 	GFXEditSlot
.8515	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8518	85 00		sta $00				sta 	0
.851a	58		cli				cli
.851b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.851c					GXPositionCalc:
.851c	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.851f	85 3a		sta $3a				sta 	gsTemp
.8521	64 3b		stz $3b				stz 	gsTemp+1
.8523	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.8525	26 3b		rol $3b				rol 	gsTemp+1
.8527	06 3a		asl $3a				asl 	gsTemp
.8529	26 3b		rol $3b				rol 	gsTemp+1
.852b	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.852c	65 3a		adc $3a				adc 	gsTemp
.852e	85 3a		sta $3a				sta 	gsTemp
.8530	90 02		bcc $8534			bcc 	_GXPCNoCarry
.8532	e6 3b		inc $3b				inc 	gsTemp+1
.8534					_GXPCNoCarry:
.8534	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8536	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8538	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.853a	85 36		sta $36				sta 	gzTemp0
.853c	64 3b		stz $3b				stz 	gsTemp+1
.853e	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8540					_GXPCMultiply32:
.8540	06 3a		asl $3a				asl 	gsTemp
.8542	26 3b		rol $3b				rol 	gsTemp+1
.8544	3a		dec a				dec 	a
.8545	d0 f9		bne $8540			bne 	_GXPCMultiply32
.8547	18		clc				clc
.8548	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.854b	65 3a		adc $3a				adc 	gsTemp
.854d	8d 41 06	sta $0641			sta 	gsOffset
.8550	ad 32 06	lda $0632			lda 	GXX0+1
.8553	65 3b		adc $3b				adc 	gsTemp+1
.8555	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8557	90 04		bcc $855d			bcc 	_GXPCNoOverflow
.8559	29 1f		and #$1f			and 	#$1F 						; fix it up
.855b	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.855d					_GXPCNoOverflow:
.855d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.855f	85 3b		sta $3b				sta 	gsTemp+1
.8561	64 3a		stz $3a				stz 	gsTemp
.8563	18		clc				clc
.8564	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8566	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8569	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.856b	60		rts				rts
.856c					GXMovePositionDown:
.856c	18		clc				clc 								; add 320 to offset/temp+1
.856d	ad 41 06	lda $0641			lda 	gsOffset
.8570	69 40		adc #$40			adc 	#64
.8572	8d 41 06	sta $0641			sta 	gsOffset
.8575	a5 3b		lda $3b				lda 	gsTemp+1
.8577	69 01		adc #$01			adc 	#1
.8579	85 3b		sta $3b				sta 	gsTemp+1
.857b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.857d	90 07		bcc $8586			bcc 	_GXMPDExit
.857f	38		sec				sec  								; next page
.8580	e9 20		sbc #$20			sbc 	#$20
.8582	85 3b		sta $3b				sta 	gsTemp+1
.8584	e6 0b		inc $0b				inc 	GFXEditSlot
.8586					_GXMPDExit:
.8586	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8587					GXSortXY:
.8587	20 a5 85	jsr $85a5			jsr 	GXSortY 					; will be sorted on Y now
.858a	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.858d	cd 35 06	cmp $0635			cmp 	gxX1
.8590	ad 32 06	lda $0632			lda 	gXX0+1
.8593	ed 36 06	sbc $0636			sbc 	gXX1+1
.8596	90 0c		bcc $85a4			bcc 	_GXSXYExit 					; X0 < X1 exit
.8598	a2 00		ldx #$00			ldx 	#0 							; swap them over
.859a	a0 04		ldy #$04			ldy 	#4
.859c	20 b9 85	jsr $85b9			jsr 	GXSwapXY
.859f	e8		inx				inx
.85a0	c8		iny				iny
.85a1	20 b9 85	jsr $85b9			jsr 	GXSwapXY
.85a4					_GXSXYExit:
.85a4	60		rts				rts
.85a5					GXSortY:
.85a5	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.85a8	cd 37 06	cmp $0637			cmp 	gxY1
.85ab	90 0b		bcc $85b8			bcc 	_GXSYSorted
.85ad	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.85af	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.85b1					_GXSwap1:
.85b1	20 b9 85	jsr $85b9			jsr 	GXSwapXY
.85b4	88		dey				dey
.85b5	ca		dex				dex
.85b6	10 f9		bpl $85b1			bpl 	_GXSwap1
.85b8					_GXSYSorted:
.85b8	60		rts				rts
.85b9					GXSwapXY:
.85b9	bd 31 06	lda $0631,x			lda 	gxX0,x
.85bc	48		pha				pha
.85bd	b9 31 06	lda $0631,y			lda 	gxX0,y
.85c0	9d 31 06	sta $0631,x			sta 	gxX0,x
.85c3	68		pla				pla
.85c4	99 31 06	sta $0631,y			sta 	gxX0,y
.85c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.85c8					AssembleGroup1:
.85c8	a9 ff		lda #$ff			lda 	#$FF
.85ca	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.85cd	80 02		bra $85d1			bra 	AsmGroup12
.85cf					AssembleGroup2:
.85cf	a5 00		lda $00				lda 	$00
.85d1					AsmGroup12:
.85d1	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.85d4	68		pla				pla 								; pop the return address to access the information following.
.85d5	fa		plx				plx
.85d6	20 5f 86	jsr $865f			jsr 	AccessParameters 			; get opcode and save as base
.85d9	8d a4 04	sta $04a4			sta 	BaseOpcode
.85dc	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.85df	d0 08		bne $85e9			bne 	_AG12HaveMask
.85e1	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.85e3	20 67 86	jsr $8667			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.85e6	8d a5 04	sta $04a5			sta 	ModeMask
.85e9					_AG12HaveMask:
.85e9	20 a2 87	jsr $87a2			jsr 	TypeAndCalculateOperand 	; get zero page type
.85ec	da		phx				phx 								; save found address mode
.85ed	20 cb 86	jsr $86cb			jsr 	AssembleModeX
.85f0	fa		plx				plx  								; restore address mode
.85f1	b0 0b		bcs $85fe			bcs 	_AG12Exit
.85f3	20 ff 85	jsr $85ff			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.85f6	20 cb 86	jsr $86cb			jsr 	AssembleModeX
.85f9	b0 03		bcs $85fe			bcs 	_AG12Exit
.85fb	4c bc ab	jmp $abbc			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.85fe					_AG12Exit:
.85fe	60		rts				rts
.85ff					PromoteToAbsolute:
.85ff	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8601	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8603	f0 19		beq $861e			beq 	_PTADo
.8605	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8607	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8609	f0 13		beq $861e			beq 	_PTADo
.860b	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.860d	e0 80		cpx #$80			cpx 	#AM_ZEROY
.860f	f0 0d		beq $861e			beq 	_PTADo
.8611	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8613	e0 d1		cpx #$d1			cpx 	#AM_IND
.8615	f0 07		beq $861e			beq 	_PTADo
.8617	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8619	e0 c0		cpx #$c0			cpx 	#AM_INDX
.861b	f0 01		beq $861e			beq 	_PTADo
.861d	60		rts				rts
.861e					_PTADo:
.861e	aa		tax				tax
.861f	60		rts				rts
.8620					AssembleGroup3:
.8620	68		pla				pla 								; get parameters, which is just the opcode.
.8621	fa		plx				plx
.8622	20 5f 86	jsr $865f			jsr 	AccessParameters 			; get and output opcode
.8625	20 77 86	jsr $8677			jsr 	AssemblerWriteByte
.8628	20 06 88	jsr $8806			jsr 	CalculateOperand 			; get a 16 bit operand
.862b	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.862e	38		sec				sec
.862f	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8632	48		pha				pha 								; LSB in A
.8633	ad 10 04	lda $0410			lda 	NSMantissa1
.8636	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8639	aa		tax				tax 								; MSB in X
.863a	68		pla				pla
.863b	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.863c	69 7f		adc #$7f			adc 	#$7F
.863e	90 01		bcc $8641			bcc 	_AG3NoCarry
.8640	e8		inx				inx
.8641					_AG3NoCarry:
.8641	38		sec				sec 								; fix back and write out anyways.
.8642	e9 80		sbc #$80			sbc 	#$80
.8644	20 77 86	jsr $8677			jsr 	AssemblerWriteByte
.8647	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8649	f0 0a		beq $8655			beq 	_AG3Exit
.864b	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.864e	29 01		and #$01			and 	#1
.8650	f0 03		beq $8655			beq 	_AG3Exit
.8652	4c c1 ab	jmp $abc1			jmp 	RangeError 					; no, branch is out of range
.8655					_AG3Exit:
.8655	60		rts				rts
.8656					AssembleGroup4:
.8656	68		pla				pla 								; pop address
.8657	fa		plx				plx
.8658	20 5f 86	jsr $865f			jsr 	AccessParameters 			; access and get first
.865b	20 77 86	jsr $8677			jsr 	AssemblerWriteByte 			; output it.
.865e	60		rts				rts
.865f					AccessParameters:
.865f	8d a1 04	sta $04a1			sta 	ParamStart
.8662	8e a2 04	stx $04a2			stx 	ParamStart+1
.8665	a9 01		lda #$01			lda 	#1
.8667					GetParameter:
.8667	5a		phy				phy
.8668	a8		tay				tay
.8669	ad a1 04	lda $04a1			lda 	ParamStart
.866c	85 36		sta $36				sta 	zTemp0
.866e	ad a2 04	lda $04a2			lda 	ParamStart+1
.8671	85 37		sta $37				sta 	zTemp0+1
.8673	b1 36		lda ($36),y			lda 	(zTemp0),y
.8675	7a		ply				ply
.8676	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8677					AssemblerWriteByte:
.8677	48		pha			pha
.8678	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.867b	29 02		and #$02		and 	#2
.867d	f0 1b		beq $869a		beq 	_AWBNoPrint
.867f	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8682	20 b5 86	jsr $86b5		jsr 	PrintHex
.8685	ad 9e 04	lda $049e		lda		AssemblerAddress
.8688	20 b5 86	jsr $86b5		jsr 	PrintHex
.868b	a9 20		lda #$20		lda 	#' '
.868d	20 60 ad	jsr $ad60		jsr 	EXTPrintCharacter
.8690	68		pla			pla 									; print byte
.8691	48		pha			pha
.8692	20 b5 86	jsr $86b5		jsr 	PrintHex
.8695	a9 0d		lda #$0d		lda 	#13
.8697	20 60 ad	jsr $ad60		jsr 	EXTPrintCharacter
.869a					_AWBNoPrint:
.869a	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.869d	85 36		sta $36			sta 	zTemp0
.869f	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.86a2	f0 0e		beq $86b2		beq 	_AWBRange
.86a4	85 37		sta $37			sta 	zTemp0+1
.86a6	68		pla			pla 									; write byte out
.86a7	92 36		sta ($36)		sta 	(zTemp0)
.86a9	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.86ac	d0 03		bne $86b1		bne 	_AWBNoCarry
.86ae	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.86b1					_AWBNoCarry:
.86b1	60		rts			rts
.86b2					_AWBRange:
.86b2	4c c1 ab	jmp $abc1		jmp 	RangeError
.86b5					PrintHex:
.86b5	48		pha				pha
.86b6	4a		lsr a				lsr 	a
.86b7	4a		lsr a				lsr 	a
.86b8	4a		lsr a				lsr 	a
.86b9	4a		lsr a				lsr 	a
.86ba	20 be 86	jsr $86be			jsr 	_PrintNibble
.86bd	68		pla				pla
.86be					_PrintNibble:
.86be	29 0f		and #$0f			and 	#15
.86c0	c9 0a		cmp #$0a			cmp 	#10
.86c2	90 02		bcc $86c6			bcc 	_NoShift
.86c4	69 06		adc #$06			adc 	#6
.86c6					_NoShift:
.86c6	69 30		adc #$30			adc 	#48
.86c8	4c 60 ad	jmp $ad60			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.86cb					AssembleModeX:
.86cb	5a		phy				phy
.86cc	ad a3 04	lda $04a3			lda 	IsGroup1
.86cf	f0 17		beq $86e8			beq 	_AMXGroup2
.86d1	8a		txa				txa 							; is it in group # 1
.86d2	29 40		and #$40			and 	#AM_ISG1
.86d4	f0 50		beq $8726			beq 	_AMXFail 				; no, give up.
.86d6	8a		txa				txa 							; get back.
.86d7	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.86d9	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.86db	d0 22		bne $86ff			bne 	_AMXHaveInfo
.86dd	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.86e0	c9 81		cmp #$81			cmp 	#$81
.86e2	f0 42		beq $8726			beq 	_AMXFail
.86e4	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.86e6	80 17		bra $86ff			bra 	_AMXHaveInfo 			; odd design decision there.
.86e8					_AMXGroup2:
.86e8	8a		txa				txa 							; is it in group 2 ?
.86e9	29 20		and #$20			and 	#AM_ISG2
.86eb	f0 39		beq $8726			beq 	_AMXFail 				; no, give up.
.86ed	8a		txa				txa 							; get the offset into Y
.86ee	29 1f		and #$1f			and 	#$1F
.86f0	4a		lsr a				lsr 	a 						; make it 0-7.
.86f1	4a		lsr a				lsr  	a
.86f2	a8		tay				tay
.86f3	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.86f6					_AMXCheckOkay:
.86f6	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.86f7	88		dey				dey
.86f8	10 fc		bpl $86f6			bpl 	_AMXCheckOkay
.86fa	90 2a		bcc $8726			bcc 	_AMXFail 				; not allowed.
.86fc	8a		txa				txa  							; get mask back
.86fd	29 1f		and #$1f			and 	#$1F
.86ff					_AMXHaveInfo:
.86ff	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8701	10 05		bpl $8708			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8703	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8706	d0 1e		bne $8726			bne 	_AMXFail
.8708					_AMXAnySize:
.8708	18		clc				clc 							; add offset to the base opcode
.8709	6d a4 04	adc $04a4			adc 	BaseOpcode
.870c					_AMXOutputCode:
.870c	20 77 86	jsr $8677			jsr 	AssemblerWriteByte 		; write the opcode out.
.870f	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8711	f0 10		beq $8723			beq 	_AMXExit
.8713	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8716	20 77 86	jsr $8677			jsr 	AssemblerWriteByte
.8719	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.871b	30 06		bmi $8723			bmi 	_AMXExit
.871d	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8720	20 77 86	jsr $8677			jsr 	AssemblerWriteByte
.8723					_AMXExit:
.8723	7a		ply				ply
.8724	38		sec				sec
.8725	60		rts				rts
.8726					_AMXFail:
.8726	a0 00		ldy #$00			ldy 	#0
.8728					_AMXCheckOddities:
.8728	8a		txa				txa
.8729	d9 51 87	cmp $8751,y			cmp 	ExtraOpcode+2,y 		; match address mode
.872c	d0 16		bne $8744			bne 	_AMXCONext
.872e	b9 4f 87	lda $874f,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8731	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8734	d0 0e		bne $8744			bne 	_AMXCONext
.8736	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8738	10 05		bpl $873f			bpl 	_AMXCONotZero
.873a	ad 10 04	lda $0410			lda 	NSMantissa1
.873d	d0 05		bne $8744			bne 	_AMXCONext
.873f					_AMXCONotZero:
.873f	b9 50 87	lda $8750,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8742	80 c8		bra $870c			bra 	_AMXOutputCode 			; and assemble it
.8744					_AMXCONext:
.8744	c8		iny				iny
.8745	c8		iny				iny
.8746	c8		iny				iny
.8747	b9 4f 87	lda $874f,y			lda 	ExtraOpcode+0,y 		; end of table
.874a	d0 dc		bne $8728			bne 	_AMXCheckOddities
.874c					_AMXCOFail:
.874c	7a		ply				ply
.874d	18		clc				clc
.874e	60		rts				rts
.874f					ExtraOpcode:
>874f	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8752	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8755	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8758	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>875b	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>875e	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8761	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8764	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8767	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>876a	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>876d	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.876e					LabelHere:
.876e	c8		iny				iny 								; skip .
.876f	a2 00		ldx #$00			ldx 	#0 							; get a term
.8771	20 77 99	jsr $9977			jsr 	EvaluateTerm 				; get a term
.8774	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8777	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8779	d0 24		bne $879f			bne 	_ALType
.877b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.877e	85 36		sta $36				sta 	zTemp0
.8780	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8783	85 37		sta $37				sta 	zTemp0+1
.8785	5a		phy				phy 								; copy address in.
.8786	a0 01		ldy #$01			ldy 	#1
.8788	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.878b	92 36		sta ($36)			sta 	(zTemp0)
.878d	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8790	91 36		sta ($36),y			sta 	(zTemp0),y
.8792	c8		iny				iny
.8793	a9 00		lda #$00			lda 	#0
.8795	91 36		sta ($36),y			sta 	(zTemp0),y
.8797	c8		iny				iny
.8798	91 36		sta ($36),y			sta 	(zTemp0),y
.879a	c8		iny				iny
.879b	91 36		sta ($36),y			sta 	(zTemp0),y
.879d	7a		ply				ply
.879e	60		rts				rts
.879f					_ALType:
.879f	4c c6 ab	jmp $abc6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.87a2					TypeAndCalculateOperand:
.87a2	b1 30		lda ($30),y			lda 	(codePtr),y
.87a4	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.87a6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87a8	f0 5b		beq $8805			beq 	_TACOExit
.87aa	c9 80		cmp #$80			cmp 	#KWC_EOL
.87ac	f0 57		beq $8805			beq 	_TACOExit
.87ae	c8		iny				iny
.87af	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.87b1	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.87b3	f0 51		beq $8806			beq 	CalculateOperand
.87b5	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.87b7	f0 1f		beq $87d8			beq 	_TACOIndirect
.87b9	88		dey				dey 								; undo get of first character
.87ba	20 06 88	jsr $8806			jsr 	CalculateOperand 			; get operand
.87bd	b1 30		lda ($30),y			lda 	(codePtr),y
.87bf	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.87c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c3	d0 40		bne $8805			bne 	_TACOExit
.87c5	c8		iny				iny
.87c6	20 4d a5	jsr $a54d			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.87c9	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.87cb	c9 58		cmp #$58			cmp 	#'X'
.87cd	f0 36		beq $8805			beq 	_TACOExit
.87cf	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.87d1	c9 59		cmp #$59			cmp 	#'Y'
.87d3	f0 30		beq $8805			beq 	_TACOExit
.87d5					_TACOSyntax:
.87d5	4c bc ab	jmp $abbc			jmp 	SyntaxError
.87d8					_TACOIndirect:
.87d8	20 06 88	jsr $8806			jsr 	CalculateOperand 			; get the operand
.87db	b1 30		lda ($30),y			lda 	(codePtr),y
.87dd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.87df	f0 17		beq $87f8			beq 	_TACOIndX
.87e1	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.87e4	b1 30		lda ($30),y			lda 	(codePtr),y
.87e6	a2 d1		ldx #$d1			ldx 	#AM_IND
.87e8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.87ea	d0 19		bne $8805			bne 	_TACOExit
.87ec	c8		iny				iny
.87ed	20 4d a5	jsr $a54d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87f0	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.87f2	d0 e1		bne $87d5			bne 	_TACOSyntax
.87f4	a2 d0		ldx #$d0			ldx 	#AM_INDY
.87f6	80 0d		bra $8805			bra 	_TACOExit
.87f8					_TACOIndX:
.87f8	c8		iny				iny
.87f9	20 4d a5	jsr $a54d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87fc	c9 58		cmp #$58			cmp 	#'X' 						; check X
.87fe	d0 d5		bne $87d5			bne 	_TACOSyntax
.8800	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket			; check )
.8803	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8805					_TACOExit:
.8805	60		rts				rts
.8806					CalculateOperand:
.8806	48		pha				pha
.8807	da		phx				phx
.8808	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.880a	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger
.880d	fa		plx				plx
.880e	68		pla				pla
.880f	60		rts				rts
.a54d					TACOCheckXY:
.a54d	b1 30		lda ($30),y			lda 	(codePtr),y
.a54f	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a551	c9 40		cmp #$40			cmp 	#$40
.a553	d0 21		bne $a576			bne 	_TCXYFail
.a555	b1 30		lda ($30),y			lda 	(codePtr),y
.a557	18		clc				clc
.a558	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a55a	85 37		sta $37				sta 	zTemp0+1
.a55c	c8		iny				iny
.a55d	b1 30		lda ($30),y			lda 	(codePtr),y
.a55f	c8		iny				iny
.a560	85 36		sta $36				sta 	zTemp0
.a562	5a		phy				phy 								; save position
.a563	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a565	b1 36		lda ($36),y			lda 	(zTemp0),y
.a567	d0 0c		bne $a575			bne 	_TCXYPopFail
.a569	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a56b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a56d	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a56f	f0 08		beq $a579			beq 	_TCXYFound
.a571	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a573	f0 04		beq $a579			beq 	_TCXYFound
.a575					_TCXYPopFail:
.a575	7a		ply				ply
.a576					_TCXYFail:
.a576	a9 00		lda #$00			lda 	#0
.a578	60		rts				rts
.a579					_TCXYFound:
.a579	7a		ply				ply 								; restore position
.a57a	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a57c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8810					EditProgramCode:
.8810	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8813	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8816	20 b4 9e	jsr $9eb4			jsr 	MemorySearch
.8819	90 05		bcc $8820			bcc 	_EPCNoDelete 				; reached the end don't delete
.881b	d0 03		bne $8820			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.881d	20 a4 ad	jsr $ada4			jsr 	MemoryDeleteLine 			; delete the line
.8820					_EPCNoDelete:
.8820	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8823	c9 80		cmp #$80			cmp 	#KWC_EOL
.8825	f0 0d		beq $8834			beq 	_EPCNoInsert
.8827	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.882a	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.882d	20 b4 9e	jsr $9eb4			jsr 	MemorySearch
.8830	18		clc				clc 								; insert at this point.
.8831	20 db ad	jsr $addb			jsr 	MemoryInsertLine 			; insert the line
.8834					_EPCNoInsert:
.8834	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8835					WarmStart:
.8835	a2 ff		ldx #$ff			ldx 	#$FF
.8837	9a		txs				txs
.8838	20 76 ad	jsr $ad76			jsr 	EXTInputLine 				; get line to lineBuffer
.883b	20 ce a2	jsr $a2ce			jsr 	TokeniseLine 				; tokenise the line
.883e	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8841	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8844	d0 17		bne $885d			bne 	_WSEditCode 				; if so,edit code.
.8846	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8849	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.884b	85 30		sta $30				sta 	codePtr
.884d	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.884f	85 31		sta $31				sta 	codePtr+1
.8851	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8854	c9 80		cmp #$80			cmp 	#KWC_EOL
.8856	f0 dd		beq $8835			beq 	WarmStart
.8858	20 66 8e	jsr $8e66			jsr 	RUNCodePointerLine 			; execute that line.
.885b	80 d8		bra $8835			bra 	WarmStart
.885d					_WSEditCode:
.885d	20 10 88	jsr $8810			jsr 	EditProgramCode
.8860	20 ce 88	jsr $88ce			jsr 	ClearCommand
.8863	80 d0		bra $8835			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8865					AssembleCommand:
.8865	a2 00		ldx #$00			ldx 	#0
.8867	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger 		; start address
.886a	ad 08 04	lda $0408			lda 	NSMantissa0
.886d	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8870	ad 10 04	lda $0410			lda 	NSMantissa1
.8873	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8876	20 de a5	jsr $a5de			jsr 	CheckComma
.8879	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; options
.887c	ad 08 04	lda $0408			lda 	NSMantissa0
.887f	8d a0 04	sta $04a0			sta 	AssemblerControl
.8882	60		rts				rts
.8883	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8884					AssertCommand:
.8884	a2 00		ldx #$00			ldx 	#0
.8886	20 cc 9d	jsr $9dcc			jsr 	EvaluateInteger 			; the assert test
.8889	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; exit if result is non zero.
.888c	d0 05		bne $8893			bne 	_ACExit
.888e	a9 0a		lda #$0a		lda	#10
.8890	4c 9d 92	jmp $929d		jmp	ErrorHandler
.8893					_ACExit:
.8893	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8894					CallCommand:
.8894	a2 00		ldx #$00			ldx 	#0
.8896	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger
.8899					_CCClear
.8899	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.889a	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.889d	e0 04		cpx #$04			cpx 	#4
.889f	d0 f8		bne $8899			bne 	_CCClear
.88a1	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.88a3					_CCCParam:
.88a3	b1 30		lda ($30),y			lda 	(codePtr),y
.88a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a7	d0 09		bne $88b2			bne 	_CCCRun6502
.88a9	c8		iny				iny 								; skip comma
.88aa	e8		inx				inx	 								; next level
.88ab	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; get A/X/Y
.88ae	e0 03		cpx #$03			cpx 	#3
.88b0	90 f1		bcc $88a3			bcc 	_CCCParam 					; done all 3 ?
.88b2					_CCCRun6502:
.88b2	5a		phy				phy 								; save position
.88b3	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.88b6	85 37		sta $37				sta 	zTemp0+1
.88b8	ad 08 04	lda $0408			lda 	NSMantissa0
.88bb	85 36		sta $36				sta 	zTemp0
.88bd	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.88c0	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.88c3	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.88c6	20 cb 88	jsr $88cb			jsr 	_CCCZTemp0 					; call zTemp0
.88c9	7a		ply				ply 								; restore position and exit
.88ca	60		rts				rts
.88cb					_CCCZTemp0:
.88cb	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.88ce					ClearCommand:
.88ce	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.88d0	85 36		sta $36				sta 	0+zTemp0
.88d2	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.88d4	85 37		sta $37				sta 	1+zTemp0
.88d6					_ClearZeroLoop:
.88d6	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.88d8	f0 24		beq $88fe			beq 	_ClearZeroEnd
.88da	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.88dc	a9 00		lda #$00			lda 	#0
.88de					_ClearOneVariable:
.88de	91 36		sta ($36),y			sta 	(zTemp0),y
.88e0	c8		iny				iny
.88e1	c0 08		cpy #$08			cpy 	#8
.88e3	d0 f9		bne $88de			bne 	_ClearOneVariable
.88e5	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.88e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e9	c9 18		cmp #$18			cmp 	#NSTProcedure
.88eb	d0 04		bne $88f1			bne 	_ClearNotProcedure
.88ed	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.88ef	91 36		sta ($36),y			sta 	(zTemp0),y
.88f1					_ClearNotProcedure:
.88f1	18		clc				clc 								; go to the next variable
.88f2	b2 36		lda ($36)			lda 	(zTemp0)
.88f4	65 36		adc $36				adc 	zTemp0
.88f6	85 36		sta $36				sta 	zTemp0
.88f8	90 dc		bcc $88d6			bcc 	_ClearZeroLoop
.88fa	e6 37		inc $37				inc 	zTemp0+1
.88fc	80 d8		bra $88d6			bra 	_ClearZeroLoop
.88fe					_ClearZeroEnd:
.88fe	18		clc				clc
.88ff	a5 36		lda $36				lda 	zTemp0
.8901	69 01		adc #$01			adc 	#1
.8903	8d 8c 04	sta $048c			sta 	lowMemPtr
.8906	a5 37		lda $37				lda 	zTemp0+1
.8908	69 00		adc #$00			adc 	#0
.890a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.890d	20 6e 9f	jsr $9f6e			jsr 	StackReset
.8910	20 be ae	jsr $aebe			jsr 	StringSystemInitialise
.8913	20 bd 91	jsr $91bd			jsr 	ProcedureScan
.8916	20 22 8e	jsr $8e22			jsr 	Command_Restore
.8919	9c 9e 04	stz $049e			stz 	AssemblerAddress
.891c	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.891f	9c a0 04	stz $04a0			stz 	AssemblerControl
.8922	20 64 9b	jsr $9b64			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8925	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8926					Command_Data:
.8926	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8928	a2 80		ldx #$80			ldx 	#KWC_EOL
.892a	20 0f 92	jsr $920f			jsr 	ScanForward
.892d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.892e					DimCommand:
.892e	b1 30		lda ($30),y			lda 	(codePtr),y
.8930	29 c0		and #$c0			and 	#$C0
.8932	c9 40		cmp #$40			cmp 	#$40
.8934	d0 7a		bne $89b0			bne 	_DCSyntax
.8936	b1 30		lda ($30),y			lda 	(codePtr),y
.8938	18		clc				clc
.8939	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.893b	85 3f		sta $3f				sta 	zaTemp+1
.893d	c8		iny				iny
.893e	b1 30		lda ($30),y			lda 	(codePtr),y
.8940	c8		iny				iny
.8941	85 3e		sta $3e				sta 	zaTemp
.8943	5a		phy				phy
.8944	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8946	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8948	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.894a	c9 18		cmp #$18			cmp 	#NSTProcedure
.894c	f0 62		beq $89b0			beq 	_DCSyntax
.894e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8950	29 04		and #$04			and 	#NSBIsArray
.8952	f0 64		beq $89b8			beq 	_DCType
.8954	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8956	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8958	d0 59		bne $89b3			bne 	_DCRedefine
.895a	7a		ply				ply
.895b	20 bb 89	jsr $89bb			jsr 	_DCGetSize 				; get array size, check it.
.895e	5a		phy				phy
.895f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8961	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8963	7a		ply				ply 							; is there a second (e.g. ,x)
.8964	b1 30		lda ($30),y			lda 	(codePtr),y
.8966	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8968	d0 0a		bne $8974			bne 	_DCOneDimension
.896a	c8		iny				iny 							; skip comma
.896b	20 bb 89	jsr $89bb			jsr 	_DCGetSize 				; get 2nd array size
.896e	5a		phy				phy
.896f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8971	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8973	7a		ply				ply
.8974					_DCOneDimension:
.8974	5a		phy				phy 							; save position
.8975	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8977	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8979	aa		tax				tax
.897a	c8		iny				iny
.897b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.897d	e8		inx				inx 							; bump them.
.897e	1a		inc a				inc 	a
.897f	20 58 aa	jsr $aa58			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8982	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8984	29 e0		and #$e0			and 	#$E0
.8986	d0 23		bne $89ab			bne 	_DCSize
.8988	a0 02		ldy #$02			ldy 	#2 						; get base type
.898a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.898c	20 c9 89	jsr $89c9			jsr 	ScaleByBaseType 		; scale by base type
.898f	a5 36		lda $36				lda 	zTemp0
.8991	a6 37		ldx $37				ldx 	zTemp0+1
.8993	20 26 9b	jsr $9b26			jsr 	AllocateXABytes 		; allocate memory
.8996	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8998	91 3e		sta ($3e),y			sta 	(zaTemp),y
.899a	c8		iny				iny
.899b	8a		txa				txa
.899c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.899e	7a		ply				ply 							; get position back
.899f	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 		; check )
.89a2	b1 30		lda ($30),y			lda 	(codePtr),y
.89a4	c8		iny				iny 							; consume in case
.89a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.89a7	f0 85		beq $892e			beq 	DimCommand
.89a9	88		dey				dey 							; undo consume
.89aa	60		rts				rts
.89ab					_DCSize:
.89ab	a9 16		lda #$16		lda	#22
.89ad	4c 9d 92	jmp $929d		jmp	ErrorHandler
.89b0					_DCSyntax:
.89b0	4c bc ab	jmp $abbc			jmp 	SyntaxError
.89b3					_DCRedefine:
.89b3	a9 15		lda #$15		lda	#21
.89b5	4c 9d 92	jmp $929d		jmp	ErrorHandler
.89b8					_DCType:
.89b8	4c c6 ab	jmp $abc6			jmp 	TypeError
.89bb					_DCGetSize:
.89bb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.89bd	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 	; get array dimension
.89c0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.89c2	f0 e7		beq $89ab			beq 	_DCSize
.89c4	c9 fe		cmp #$fe			cmp 	#254
.89c6	f0 e3		beq $89ab			beq 	_DCSize
.89c8	60		rts				rts
.89c9					ScaleByBaseType:
.89c9	29 10		and #$10			and 	#NSBIsString 			; is it string
.89cb	d0 19		bne $89e6			bne 	_SBBTString
.89cd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.89cf	48		pha				pha
.89d0	a5 36		lda $36				lda 	zTemp0
.89d2	48		pha				pha
.89d3	06 36		asl $36				asl 	zTemp0 					; x 2
.89d5	26 37		rol $37				rol 	zTemp0+1
.89d7	06 36		asl $36				asl 	zTemp0 					; x 4
.89d9	26 37		rol $37				rol 	zTemp0+1
.89db	68		pla				pla 							; add stacked value = x 5
.89dc	65 36		adc $36				adc 	zTemp0
.89de	85 36		sta $36				sta 	zTemp0
.89e0	68		pla				pla
.89e1	65 37		adc $37				adc 	zTemp0+1
.89e3	85 37		sta $37				sta 	zTemp0+1
.89e5	60		rts				rts
.89e6					_SBBTString:
.89e6	06 36		asl $36				asl 	zTemp0
.89e8	26 37		rol $37				rol 	zTemp0+1
.89ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.89eb					EndCommand:
.89eb	4c 35 88	jmp $8835			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.89ee					ForCommand:
.89ee	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.89f0	20 09 9f	jsr $9f09			jsr 	StackOpen
.89f3	a2 00		ldx #$00			ldx 	#0
.89f5	20 77 99	jsr $9977			jsr 	EvaluateTerm
.89f8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.89fb	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.89fd	d0 49		bne $8a48			bne		_FCError
.89ff	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8a01	20 e6 a5	jsr $a5e6			jsr 	CheckNextA
.8a04	e8		inx				inx
.8a05	20 cc 9d	jsr $9dcc			jsr 	EvaluateInteger 			; <from> in +1
.8a08	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0a	c8		iny				iny 								; consume it
.8a0b	48		pha				pha 								; save on stack for later
.8a0c	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8a0e	f0 04		beq $8a14			beq 	_FCNoSyntax
.8a10	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8a12	d0 37		bne $8a4b			bne 	_FCSyntaxError
.8a14					_FCNoSyntax:
.8a14	e8		inx				inx
.8a15	20 cc 9d	jsr $9dcc			jsr 	EvaluateInteger
.8a18	20 4d 9f	jsr $9f4d			jsr 	STKSaveCodePosition 		; save loop back position
.8a1b	68		pla				pla 								; restore DOWNTO or TO
.8a1c	5a		phy				phy 								; save Y on the stack
.8a1d	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8a1f	f0 02		beq $8a23			beq 	_FCNotDownTo
.8a21	a9 02		lda #$02			lda 	#2
.8a23					_FCNotDownTo:
.8a23	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8a24	a0 10		ldy #$10			ldy 	#16
.8a26	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8a28	a0 06		ldy #$06			ldy 	#6
.8a2a	ad 08 04	lda $0408			lda 	NSMantissa0
.8a2d	91 34		sta ($34),y			sta 	(basicStack),y
.8a2f	ad 10 04	lda $0410			lda 	NSMantissa1
.8a32	c8		iny				iny
.8a33	91 34		sta ($34),y			sta 	(basicStack),y
.8a35	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8a37	a2 01		ldx #$01			ldx 	#1
.8a39	20 4e 8a	jsr $8a4e			jsr 	FCIntegerToStack
.8a3c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8a3e	a2 02		ldx #$02			ldx 	#2
.8a40	20 4e 8a	jsr $8a4e			jsr 	FCIntegerToStack
.8a43	20 6e 8a	jsr $8a6e			jsr 	CopyIndexToReference
.8a46	7a		ply				ply 								; restore position
.8a47	60		rts				rts
.8a48					_FCError:
.8a48	4c c6 ab	jmp $abc6			jmp 	TypeError
.8a4b					_FCSyntaxError:
.8a4b	4c bc ab	jmp $abbc			jmp 	SyntaxError
.8a4e					FCIntegerToStack:
.8a4e	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8a51	10 03		bpl $8a56			bpl	 	_FCNotNegative
.8a53	20 0a 9e	jsr $9e0a			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8a56					_FCNotNegative:
.8a56	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8a59	91 34		sta ($34),y			sta 	(basicStack),y
.8a5b	c8		iny				iny
.8a5c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a5f	91 34		sta ($34),y			sta 	(basicStack),y
.8a61	c8		iny				iny
.8a62	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8a65	91 34		sta ($34),y			sta 	(basicStack),y
.8a67	c8		iny				iny
.8a68	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a6b	91 34		sta ($34),y			sta 	(basicStack),y
.8a6d	60		rts				rts
.8a6e					CopyIndexToReference:
.8a6e	5a		phy				phy
.8a6f	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a71	38		sec				sec 								; (because we copy from offset 8)
.8a72	b1 34		lda ($34),y			lda 	(basicStack),y
.8a74	e9 08		sbc #$08			sbc 	#8
.8a76	85 36		sta $36				sta 	zTemp0
.8a78	c8		iny				iny
.8a79	b1 34		lda ($34),y			lda 	(basicStack),y
.8a7b	e9 00		sbc #$00			sbc 	#0
.8a7d	85 37		sta $37				sta 	zTemp0+1
.8a7f	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a81	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a83	b1 34		lda ($34),y			lda 	(basicStack),y
.8a85	0a		asl a				asl 	a 							; into carry
.8a86	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a88	90 14		bcc $8a9e			bcc 	_CITRNormal
.8a8a	38		sec				sec
.8a8b					_CITRNegative:
.8a8b	a9 00		lda #$00			lda 	#0
.8a8d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a91	c8		iny				iny
.8a92	ca		dex				dex
.8a93	d0 f6		bne $8a8b			bne 	_CITRNegative
.8a95	88		dey				dey 								; look at MSB of mantissa
.8a96	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a98	09 80		ora #$80			ora 	#$80
.8a9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9c	7a		ply				ply
.8a9d	60		rts				rts
.8a9e					_CITRNormal:
.8a9e	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8aa0	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa2	c8		iny				iny
.8aa3	ca		dex				dex
.8aa4	d0 f8		bne $8a9e			bne 	_CITRNormal
.8aa6	7a		ply				ply 								; and exit.
.8aa7	60		rts				rts
.8aa8					NextCommand:
.8aa8	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8aaa	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8aac	20 35 9f	jsr $9f35			jsr 	StackCheckFrame
.8aaf	5a		phy				phy
.8ab0	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8ab2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ab4	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8ab6	30 02		bmi $8aba			bmi 	_NCStepNeg
.8ab8	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8aba					_NCStepNeg:
.8aba	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8abc	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8abe	18		clc				clc
.8abf					_NCBump:
.8abf	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8ac1	91 34		sta ($34),y			sta 	(basicStack),y
.8ac3	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8ac5	c8		iny				iny 								; next byte
.8ac6	ca		dex				dex 								; do four times
.8ac7	d0 f6		bne $8abf			bne 	_NCBump
.8ac9	20 6e 8a	jsr $8a6e			jsr		CopyIndexToReference		; copy it to the reference variable.
.8acc	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ace	b1 34		lda ($34),y			lda 	(basicStack),y
.8ad0	0a		asl a				asl 	a 							; sign bit to carry
.8ad1	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ad3	85 38		sta $38				sta 	zTemp1
.8ad5	90 02		bcc $8ad9			bcc 	_NCCompRev 					; use if step is +ve
.8ad7	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8ad9					_NCCompRev:
.8ad9	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8adb	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8add	85 39		sta $39				sta 	zTemp1+1
.8adf	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ae1	38		sec				sec
.8ae2					_NCCompare:
.8ae2	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ae4	b1 34		lda ($34),y			lda 	(basicStack),y
.8ae6	a4 39		ldy $39				ldy 	zTemp1+1
.8ae8	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8aea	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8aec	e6 39		inc $39				inc 	zTemp1+1
.8aee	ca		dex				dex 								; do it 4 times.
.8aef	d0 f1		bne $8ae2			bne 	_NCCompare
.8af1	50 02		bvc $8af5			bvc 	_NCNoOverflow 				; convert to signed comparison
.8af3	49 80		eor #$80			eor 	#$80
.8af5					_NCNoOverflow:
.8af5	7a		ply				ply 								; restore Y position
.8af6	0a		asl a				asl 	a 							; is bit 7 set.
.8af7	90 04		bcc $8afd			bcc 	_NCLoopback 				; if no , >= so loop back
.8af9	20 27 9f	jsr $9f27			jsr 	StackClose 					; exit the loop
.8afc	60		rts				rts
.8afd					_NCLoopBack:
.8afd	20 5e 9f	jsr $9f5e			jsr 	STKLoadCodePosition 		; loop back
.8b00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8b01					Command_GOSUB:
.8b01	a2 00		ldx #$00			ldx 	#0
.8b03	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8b06	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8b08	20 09 9f	jsr $9f09			jsr 	StackOpen 					; create frame
.8b0b	20 4d 9f	jsr $9f4d			jsr 	STKSaveCodePosition 		; save current position
.8b0e	4c 24 8b	jmp $8b24			jmp 	GotoStackX
.8b11					Command_RETURN:
.8b11	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8b13	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8b15	20 35 9f	jsr $9f35			jsr 	StackCheckFrame
.8b18	20 5e 9f	jsr $9f5e			jsr 	STKLoadCodePosition 		; restore code position
.8b1b	20 27 9f	jsr $9f27			jsr 	StackClose
.8b1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8b1f					GotoCommand:
.8b1f	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8b21	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger
.8b24					GotoStackX:
.8b24	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8b27	48		pha				pha 								; it is slightly inefficient, just in cases.
.8b28	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8b2b	fa		plx				plx
.8b2c	20 b4 9e	jsr $9eb4			jsr 	MemorySearch 				; transfer to line number AX.
.8b2f	90 05		bcc $8b36			bcc 	_GotoError 					; not found, off end.
.8b31	d0 03		bne $8b36			bne 	_GotoError 					; not found exactly
.8b33	4c 5f 8e	jmp $8e5f			jmp 	RunNewLine 					; and go straight to new line code.
.8b36					_GotoError:
.8b36	a9 0d		lda #$0d		lda	#13
.8b38	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8b3b					IfCommand:
.8b3b	a2 00		ldx #$00			ldx 	#0 							; If what.
.8b3d	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber
.8b40	b1 30		lda ($30),y			lda 	(codePtr),y
.8b42	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8b44	d0 0a		bne $8b50			bne 	_IFStructured
.8b46	c8		iny				iny 								; consume THEN
.8b47	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; is it zero
.8b4a	f0 01		beq $8b4d			beq 	_IfFail 					; if fail, go to next line
.8b4c	60		rts				rts 								; if THEN just continue
.8b4d					_IfFail:
.8b4d	4c c4 8e	jmp $8ec4			jmp 	EOLCommand
.8b50					_IfStructured:
.8b50	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; is it zero
.8b53	d0 07		bne $8b5c			bne 	_IfExit 					; if not, then continue normally.
.8b55	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8b57	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8b59	20 0f 92	jsr $920f			jsr 	ScanForward 				; and run from there/
.8b5c					_IfExit:
.8b5c	60		rts				rts
.8b5d					ElseCode:
.8b5d	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8b5f	aa		tax				tax 								; so just go to the structure exit
.8b60	20 0f 92	jsr $920f			jsr 	ScanForward
.8b63	60		rts				rts
.8b64					EndIf:
.8b64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b65					LetCommand:
.8b65	a2 00		ldx #$00			ldx 	#0
.8b67	b1 30		lda ($30),y			lda 	(codePtr),y
.8b69	c9 10		cmp #$10			cmp 	#KWD_AT
.8b6b	d0 16		bne $8b83			bne 	_LCStandard
.8b6d	c8		iny				iny 								; skip equal
.8b6e	20 77 99	jsr $9977			jsr 	EvaluateTerm 				; get a number
.8b71	20 bb 97	jsr $97bb			jsr 	Dereference 				; dereference it
.8b74	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8b77	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b79	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8b7c	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b7e	d0 10		bne $8b90			bne 	_LCMain
.8b80	4c c6 ab	jmp $abc6			jmp 	TypeError 					; was a reference before.
.8b83					_LCStandard:
.8b83	ad 8e 96	lda $968e			lda 	PrecedenceLevel+"*"			; precedence > this
.8b86	20 a8 96	jsr $96a8			jsr 	EvaluateExpressionAtPrecedence
.8b89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8b8c	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b8e	f0 0e		beq $8b9e			beq 	_LetGoProc 					; it's a procedure call.
.8b90					_LCMain:
.8b90	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b92	20 e6 a5	jsr $a5e6			jsr 	CheckNextA
.8b95	e8		inx				inx 								; RHS
.8b96	20 a0 9d	jsr $9da0			jsr 	EvaluateValue
.8b99	ca		dex				dex
.8b9a	20 a1 8b	jsr $8ba1			jsr 	AssignVariable
.8b9d	60		rts				rts
.8b9e					_LetGoProc:
.8b9e	4c 3a 8d	jmp $8d3a			jmp 	CallProcedure
.8ba1					AssignVariable:
.8ba1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8ba4	48		pha				pha 								; save a copy
.8ba5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8ba8	29 10		and #$10			and 	#NSBIsString
.8baa	d0 0b		bne $8bb7			bne 	_ASError
.8bac	68		pla				pla 								; get back
.8bad	29 10		and #$10			and 	#NSBIsString 				; check type
.8baf	d0 03		bne $8bb4			bne 	_ASString
.8bb1	4c e3 96	jmp $96e3			jmp 	AssignNumber
.8bb4					_ASString:
.8bb4	4c 51 97	jmp $9751			jmp 	AssignString
.8bb7					_ASError:
.8bb7	4c c6 ab	jmp $abc6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bba					Command_List:
.8bba	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bbd	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8bc0	a9 ff		lda #$ff			lda 	#$FF
.8bc2	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8bc5	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bca	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bcc	f0 1e		beq $8bec			beq 	_CLSecond
.8bce	20 4a 8c	jsr $8c4a			jsr 	CLIsDigit 					; if not digit, list all
.8bd1	b0 24		bcs $8bf7			bcs 	_CLStart
.8bd3	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bd5	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger
.8bd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bda	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bdc	f0 0e		beq $8bec			beq 	_CLSecond 					; if so go get it
.8bde	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8be1	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8be4	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8be7	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bea	80 0b		bra $8bf7			bra 	_CLStart
.8bec					_CLSecond:
.8bec	c8		iny				iny 								; consume comma
.8bed	20 4a 8c	jsr $8c4a			jsr 	CLIsDigit 					; digit found
.8bf0	b0 05		bcs $8bf7			bcs 	_CLStart 					; if not, continue listing
.8bf2	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8bf4	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger
.8bf7					_CLStart
.8bf7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bf9	85 30		sta $30				sta 	codePtr
.8bfb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bfd	85 31		sta $31				sta 	codePtr+1
.8bff					_CLLoop:
.8bff	20 a1 ad	jsr $ada1			jsr 	EXTBreakCheck 				; break check
.8c02	f0 30		beq $8c34			beq 	_CLExit
.8c04	b2 30		lda ($30)			lda 	(codePtr)
.8c06	f0 2c		beq $8c34			beq 	_CLExit
.8c08	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c0a	20 37 8c	jsr $8c37			jsr 	CLCompareLineNo
.8c0d	90 18		bcc $8c27			bcc 	_CLNext
.8c0f	a2 07		ldx #$07			ldx 	#7
.8c11	20 37 8c	jsr $8c37			jsr 	CLCompareLineNo
.8c14	f0 02		beq $8c18			beq 	_CLDoThisOne
.8c16	b0 0f		bcs $8c27			bcs 	_CLNext
.8c18					_CLDoThisOne:
.8c18	20 6b 90	jsr $906b			jsr 	ListConvertLine 			; convert line into token Buffer
.8c1b	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8c1d	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8c1f	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.8c22	a9 0d		lda #$0d			lda 	#13 						; new line
.8c24	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.8c27					_CLNext:
.8c27	18		clc				clc
.8c28	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c2a	65 30		adc $30				adc 	codePtr
.8c2c	85 30		sta $30				sta 	codePtr
.8c2e	90 02		bcc $8c32			bcc 	_CREExit
.8c30	e6 31		inc $31				inc 	codePtr+1
.8c32					_CREExit:
.8c32	80 cb		bra $8bff			bra 	_CLLoop
.8c34					_CLExit:
.8c34	4c 35 88	jmp $8835			jmp 	WarmStart
.8c37					CLCompareLineNo:
.8c37	38		sec				sec
.8c38	a0 01		ldy #$01			ldy 	#1
.8c3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8c3f	85 36		sta $36				sta 	zTemp0
.8c41	c8		iny				iny
.8c42	b1 30		lda ($30),y			lda 	(codePtr),y
.8c44	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8c47	05 36		ora $36				ora 	zTemp0
.8c49	60		rts				rts
.8c4a					CLIsDigit:
.8c4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4c	c9 30		cmp #$30			cmp 	#"0"
.8c4e	90 03		bcc $8c53			bcc	 	_CLIDExitFalse
.8c50	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c52	60		rts				rts
.8c53					_CLIDExitFalse:
.8c53	38		sec				sec
.8c54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c55					Command_LOCAL:
.8c55	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c57	20 63 8c	jsr $8c63			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c5a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5c	c8		iny				iny
.8c5d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c5f	f0 f4		beq $8c55			beq 	Command_LOCAL
.8c61	88		dey				dey 								; unpick pre-get
.8c62	60		rts				rts
.8c63					LocaliseNextTerm:
.8c63	20 77 99	jsr $9977			jsr 	EvaluateTerm 				; evaluate the term
.8c66	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c69	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c6b	f0 69		beq $8cd6			beq		_LNTError
.8c6d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c70	85 36		sta $36				sta 	zTemp0
.8c72	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c75	85 37		sta $37				sta  	zTemp0+1
.8c77	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c7a	29 10		and #$10			and 	#NSBIsString
.8c7c	d0 22		bne $8ca0			bne 	_LNTPushString
.8c7e	5a		phy				phy
.8c7f	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c81					_LNTPushNumLoop:
.8c81	b1 36		lda ($36),y			lda		(zTemp0),y
.8c83	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8c86	a9 00		lda #$00			lda 	#0
.8c88	91 36		sta ($36),y			sta 	(zTemp0),y
.8c8a	c8		iny				iny
.8c8b	c0 05		cpy #$05			cpy 	#5
.8c8d	d0 f2		bne $8c81			bne 	_LNTPushNumLoop
.8c8f	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c91	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8c94	a5 37		lda $37				lda 	zTemp0+1
.8c96	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8c99	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c9b	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8c9e	7a		ply				ply
.8c9f	60		rts				rts
.8ca0					_LNTPushString:
.8ca0	5a		phy				phy
.8ca1	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8ca3	85 38		sta $38				sta 	zTemp1
.8ca5	a0 01		ldy #$01			ldy 	#1
.8ca7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ca9	85 39		sta $39				sta 	zTemp1+1
.8cab	a0 00		ldy #$00			ldy 	#0 							; output string
.8cad	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8caf	f0 0a		beq $8cbb			beq 	_LNTStringOut
.8cb1					_LNTPushStrLoop:
.8cb1	b1 38		lda ($38),y			lda 	(zTemp1),y
.8cb3	f0 06		beq $8cbb			beq 	_LNTStringOut
.8cb5	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8cb8	c8		iny				iny
.8cb9	80 f6		bra $8cb1			bra 	_LNTPushStrLoop
.8cbb					_LNTStringOut:
.8cbb	98		tya				tya									; output length
.8cbc	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8cbf	a9 00		lda #$00			lda 	#0 							; clear original string.
.8cc1	92 38		sta ($38)			sta 	(zTemp1)
.8cc3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8cc6	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8cc9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ccc	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8ccf	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8cd1	20 e7 9e	jsr $9ee7			jsr 	StackPushByte
.8cd4	7a		ply				ply
.8cd5	60		rts				rts
.8cd6					_LNTError:
.8cd6	4c bc ab	jmp $abbc			jmp 	SyntaxError
.a57d					LocalPopValue:
.a57d	20 00 9f	jsr $9f00			jsr 	StackPopByte
.a580	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a582	d0 17		bne $a59b			bne 	_LPVString
.a584	20 00 9f	jsr $9f00			jsr 	StackPopByte 				; address
.a587	85 37		sta $37				sta 	zTemp0+1
.a589	20 00 9f	jsr $9f00			jsr 	StackPopByte
.a58c	85 36		sta $36				sta 	zTemp0
.a58e	5a		phy				phy
.a58f	a0 04		ldy #$04			ldy 	#4 							; copy back
.a591					_LPVNumberCopy:
.a591	20 00 9f	jsr $9f00			jsr 	StackPopByte
.a594	91 36		sta ($36),y			sta 	(zTemp0),y
.a596	88		dey				dey
.a597	10 f8		bpl $a591			bpl 	_LPVNumberCopy
.a599	7a		ply				ply 								; and complete
.a59a	60		rts				rts
.a59b					_LPVString:
.a59b	20 00 9f	jsr $9f00			jsr 	StackPopByte 				; address of record => zTemp0
.a59e	85 37		sta $37				sta 	zTemp0+1
.a5a0	20 00 9f	jsr $9f00			jsr 	StackPopByte
.a5a3	85 36		sta $36				sta 	zTemp0
.a5a5	5a		phy				phy
.a5a6	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a5a8	85 38		sta $38				sta 	zTemp1
.a5aa	a0 01		ldy #$01			ldy 	#1
.a5ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.a5ae	85 39		sta $39				sta 	zTemp1+1
.a5b0	20 00 9f	jsr $9f00			jsr 	StackPopByte 				; # to get => y
.a5b3	a8		tay				tay
.a5b4	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a5b6	f0 0e		beq $a5c6			beq 	_LPVStringCopied
.a5b8	a9 00		lda #$00			lda 	#0 							; NULL on end
.a5ba	91 38		sta ($38),y			sta 	(zTemp1),y
.a5bc					_LPVStringCopy:
.a5bc	88		dey				dey
.a5bd	30 07		bmi $a5c6			bmi 	_LPVStringCopied
.a5bf	20 00 9f	jsr $9f00			jsr 	StackPopByte
.a5c2	91 38		sta ($38),y			sta 	(zTemp1),y
.a5c4	80 f6		bra $a5bc			bra 	_LPVStringCopy
.a5c6					_LPVStringCopied:
.a5c6	fa		plx				plx
.a5c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8cd9					NewCommand:
.8cd9	20 92 9e	jsr $9e92			jsr 	MemoryNew
.8cdc	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8cdf	20 ce 88	jsr $88ce			jsr 	ClearCommand 				; clear everything.
.8ce2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8ce3					Command_Print:
.8ce3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ce4					_CPLoop:
.8ce4	08		php				php 								; save last action flag
.8ce5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce7	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ce9	f0 46		beq $8d31			beq 	_CPExit
.8ceb	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ced	f0 42		beq $8d31			beq 	_CPExit
.8cef	68		pla				pla 								; throw last action flag
.8cf0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf2	c8		iny				iny
.8cf3	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8cf5	f0 37		beq $8d2e			beq 	_CPContinueWithSameLine
.8cf7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8cf9	f0 2e		beq $8d29			beq 	_CPTab
.8cfb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8cfd	f0 26		beq $8d25			beq 	_CPNewLine
.8cff	88		dey				dey 								; undo the get.
.8d00	a2 00		ldx #$00			ldx 	#0
.8d02	20 a0 9d	jsr $9da0			jsr 	EvaluateValue 				; get a value into slot 0
.8d05	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8d08	29 10		and #$10			and 	#NSBIsString
.8d0a	f0 0b		beq $8d17			beq 	_CPNumber
.8d0c	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8d0f	ad 08 04	lda $0408			lda 	NSMantissa0
.8d12	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.8d15	80 cc		bra $8ce3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d17					_CPNumber:
.8d17	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8d19	20 76 9c	jsr $9c76			jsr 	ConvertNumberToString 		; convert to string
.8d1c	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8d1e	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8d20	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.8d23	80 be		bra $8ce3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8d25					_CPNewLine:
.8d25	a9 0d		lda #$0d			lda 	#13
.8d27	80 02		bra $8d2b			bra 	_CPPrintChar
.8d29					_CPTab:
.8d29	a9 09		lda #$09			lda 	#9 							; print TAB
.8d2b					_CPPrintChar:
.8d2b	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.8d2e					_CPContinueWithSameLine:
.8d2e	38		sec				sec 								; loop round with carry set, which
.8d2f	80 b3		bra $8ce4			bra 	_CPLoop 					; will inhibit final CR
.8d31					_CPExit:
.8d31	28		plp				plp 								; get last action flag
.8d32	b0 05		bcs $8d39			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d34	a9 0d		lda #$0d			lda 	#13 						; print new line
.8d36	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.8d39					_CPExit2:
.8d39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8d3a					CallProcedure:
.8d3a	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3e	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d40	f0 0c		beq $8d4e			beq 	_CPEndParam
.8d42					_CPParamLoop:
.8d42	20 a6 96	jsr $96a6			jsr 	EvaluateExpression 			; get parameter onto stack
.8d45	e8		inx				inx 								; bump next stack
.8d46	b1 30		lda ($30),y			lda 	(codePtr),y
.8d48	c8		iny				iny
.8d49	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d4b	f0 f5		beq $8d42			beq 	_CPParamLoop
.8d4d	88		dey				dey 								; unpick.
.8d4e					_CPEndParam:
.8d4e	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8d51	c8		iny				iny									; skip right bracket
.8d52	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d54	20 09 9f	jsr $9f09			jsr 	StackOpen
.8d57	20 4d 9f	jsr $9f4d			jsr 	STKSaveCodePosition 		; save loop position
.8d5a	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d5d	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d5f	ad 10 04	lda $0410			lda 	NSMantissa1
.8d62	85 37		sta $37				sta 	zTemp0+1
.8d64	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d66	b2 36		lda ($36)			lda 	(zTemp0)
.8d68	85 30		sta $30				sta 	safePtr
.8d6a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d6c	85 31		sta $31				sta 	safePtr+1
.8d6e	c8		iny				iny
.8d6f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d71	85 32		sta $32				sta 	safePtr+2
.8d73	c8		iny				iny
.8d74	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d76	85 33		sta $33				sta 	safePtr+3
.8d78	c8		iny				iny 								; get Y offset -> Y
.8d79	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d7b	a8		tay				tay
.8d7c	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d7e	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8d81	f0 13		beq $8d96			beq 	_ParamExit 					; if so, exit.
.8d83					_ParamExtract:
.8d83	ca		dex				dex 								; put a local term on the level before
.8d84	20 63 8c	jsr $8c63			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d87	20 a1 8b	jsr $8ba1			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d8a	e8		inx				inx 								; advance to next parameter to do.
.8d8b	e8		inx				inx
.8d8c	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8d8f	f0 05		beq $8d96			beq 	_ParamExit
.8d91	20 de a5	jsr $a5de			jsr 	CheckComma 					; comma seperating parameters
.8d94	80 ed		bra $8d83			bra 	_ParamExtract
.8d96					_ParamExit:
.8d96	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; check )
.8d99	60		rts				rts 								; and continue from here
.a5c8					Command_ENDPROC:
.a5c8	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a5ca	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a5cc	20 35 9f	jsr $9f35			jsr 	StackCheckFrame
.a5cf	20 5e 9f	jsr $9f5e			jsr 	STKLoadCodePosition 		; restore code position
.a5d2	20 27 9f	jsr $9f27			jsr 	StackClose
.a5d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d9a					Command_Read:
.8d9a	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d9c	20 77 99	jsr $9977			jsr 	EvaluateTerm
.8d9f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8da2	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8da4	f0 4a		beq $8df0			beq 	_CRSyntax 					; check reference (bit 0)
.8da6	20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; swap code and data
.8da9	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8dac	d0 20		bne $8dce			bne 	_CRContinueData
.8dae					_CRKeepSearching:
.8dae	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8db0	aa		tax				tax
.8db1	20 0f 92	jsr $920f			jsr 	ScanForward
.8db4	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8db6	f0 16		beq $8dce			beq 	_CRHaveData 				; found it
.8db8	18		clc				clc
.8db9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8dbb	65 30		adc $30				adc 	codePtr
.8dbd	85 30		sta $30				sta 	codePtr
.8dbf	90 02		bcc $8dc3			bcc 	_CREExit
.8dc1	e6 31		inc $31				inc 	codePtr+1
.8dc3					_CREExit:
.8dc3	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8dc5	b2 30		lda ($30)			lda 	(codePtr)
.8dc7	d0 e5		bne $8dae			bne 	_CRKeepSearching
.8dc9	a9 0b		lda #$0b		lda	#11
.8dcb	4c 9d 92	jmp $929d		jmp	ErrorHandler
.8dce					_CRHaveData:
.8dce					_CRContinueData:
.8dce	a2 01		ldx #$01			ldx 	#1
.8dd0	20 a0 9d	jsr $9da0			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8dd3	ca		dex				dex
.8dd4	20 a1 8b	jsr $8ba1			jsr		AssignVariable 				; do the assignment
.8dd7	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8dda	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8dde	d0 04		bne $8de4			bne 	_CRSwapBack
.8de0	c8		iny				iny 								; consume comma
.8de1	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8de4					_CRSwapBack:
.8de4	20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs			; swap them back.
.8de7	b1 30		lda ($30),y			lda 	(codePtr),y
.8de9	c8		iny				iny
.8dea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dec	f0 ac		beq $8d9a			beq 	Command_Read 				; if so go round again.
.8dee	88		dey				dey 								; unpick get.
.8def	60		rts				rts
.8df0					_CRSyntax:
.8df0	4c bc ab	jmp $abbc			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8df3					RemCommand:
.8df3	b1 30		lda ($30),y			lda 	(codePtr),y
.8df5	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8df7	d0 06		bne $8dff			bne 	_RMExit
.8df9	c8		iny				iny
.8dfa	98		tya				tya
.8dfb	38		sec				sec
.8dfc	71 30		adc ($30),y			adc 	(codePtr),y
.8dfe	a8		tay				tay
.8dff					_RMExit:
.8dff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8e00					Command_REPEAT:
.8e00	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8e02	20 09 9f	jsr $9f09			jsr 	StackOpen
.8e05	20 4d 9f	jsr $9f4d			jsr 	STKSaveCodePosition 		; save loop position
.8e08	60		rts				rts
.8e09					Command_UNTIL:
.8e09	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8e0b	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8e0d	20 35 9f	jsr $9f35			jsr 	StackCheckFrame
.8e10	a2 00		ldx #$00			ldx 	#0
.8e12	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; work out the number
.8e15	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; check if zero
.8e18	f0 04		beq $8e1e			beq 	_CULoopBack 				; if so keep looping
.8e1a	20 27 9f	jsr $9f27			jsr 	StackClose		 			; return
.8e1d	60		rts				rts
.8e1e					_CULoopBack:
.8e1e	20 5e 9f	jsr $9f5e			jsr 	STKLoadCodePosition 		; loop back
.8e21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8e22					Command_Restore:
.8e22	20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; swap code and data
.8e25	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e27	85 30		sta $30				sta 	codePtr
.8e29	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e2b	85 31		sta $31				sta 	codePtr+1
.8e2d	20 39 8e	jsr $8e39			jsr 	SwapDataCodePtrs 			; put them back
.8e30	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e32	8d 9b 04	sta $049b			sta 	dataPointer+4
.8e35	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8e38	60		rts				rts
.8e39					SwapDataCodePtrs:
.8e39	da		phx				phx
.8e3a	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e3c					_SDCPLoop:
.8e3c	b5 30		lda $30,x			lda 	safePtr,x
.8e3e	48		pha				pha
.8e3f	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8e42	95 30		sta $30,x			sta 	safePtr,x
.8e44	68		pla				pla
.8e45	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8e48	ca		dex				dex
.8e49	10 f1		bpl $8e3c			bpl 	_SDCPLoop
.8e4b	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8e4e	8c 9b 04	sty $049b			sty 	dataPointer+4
.8e51	a8		tay				tay
.8e52	fa		plx				plx
.8e53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e54					CommandRUN:
.8e54	20 ce 88	jsr $88ce			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e57	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e59	85 30		sta $30				sta 	codePtr
.8e5b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e5d	85 31		sta $31				sta 	codePtr+1
.8e5f					RUNNewLine:
.8e5f	b2 30		lda ($30)			lda 	(codePtr)
.8e61	f0 5e		beq $8ec1			beq 	CRNoProgram         		; no then END.
.8e63	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e65	9a		txs				txs
.8e66					RUNCodePointerLine:
.8e66	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e68					_CRIncMainLoop:
.8e68	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e6b	d0 05		bne $8e72			bne 	_CRNoBreakCheck
.8e6d	20 a1 ad	jsr $ada1			jsr 	EXTBreakCheck 				; break check
.8e70	f0 4a		beq $8ebc			beq 	_CRBreak
.8e72					_CRNoBreakCheck:
.8e72	c8		iny				iny
.8e73					_CRMainLoop:
.8e73	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e76	b1 30		lda ($30),y			lda 	(codePtr),y
.8e78	10 10		bpl $8e8a			bpl 	_CRNotKeyword
.8e7a	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e7c	b0 04		bcs $8e82			bcs 	_CRIsKeyword
.8e7e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e80	b0 34		bcs $8eb6			bcs		_CRSyntaxError
.8e82					_CRIsKeyword:
.8e82	c8		iny				iny 								; consume command
.8e83	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e84	aa		tax				tax 								; put in X for vector jump
.8e85	20 b9 8e	jsr $8eb9			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e88	80 e9		bra $8e73			bra 	_CRMainLoop 				; and loop round
.8e8a					_CRNotKeyword:
.8e8a	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e8c	f0 da		beq $8e68			beq 	_CRIncMainLoop
.8e8e	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e90	90 05		bcc $8e97			bcc 	_CRNotVariable
.8e92					_CRGoLet:
.8e92	20 65 8b	jsr $8b65			jsr 	LetCommand
.8e95	80 dc		bra $8e73			bra 	_CRMainLoop
.8e97					_CRNotVariable:
.8e97	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e99	f0 f7		beq $8e92			beq 	_CRGoLet
.8e9b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e9d	f0 f3		beq $8e92			beq 	_CRGoLet
.8e9f	c9 21		cmp #$21			cmp 	#KWD_PLING
.8ea1	f0 ef		beq $8e92			beq 	_CRGoLet
.8ea3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ea5	f0 09		beq $8eb0			beq 	_CRGoRem
.8ea7	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ea9	d0 0b		bne $8eb6			bne 	_CRSyntaxError
.8eab	20 6e 87	jsr $876e			jsr 	LabelHere
.8eae	80 c3		bra $8e73			bra 	_CRMainLoop
.8eb0					_CRGoRem:
.8eb0	c8		iny				iny
.8eb1	20 f3 8d	jsr $8df3			jsr 	RemCommand
.8eb4	80 bd		bra $8e73			bra 	_CRMainLoop
.8eb6					_CRSyntaxError:
.8eb6	4c bc ab	jmp $abbc			jmp 	SyntaxError
.8eb9					_CRCallVector0:
.8eb9	7c 64 8f	jmp ($8f64,x)			jmp 	(VectorSet0,x)
.8ebc					_CRBreak:
.8ebc	a9 01		lda #$01		lda	#1
.8ebe	4c 9d 92	jmp $929d		jmp	ErrorHandler
.8ec1					CRNoProgram:
.8ec1	4c eb 89	jmp $89eb			jmp 	EndCommand
.8ec4					EOLCommand:
.8ec4	18		clc				clc
.8ec5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ec7	65 30		adc $30				adc 	codePtr
.8ec9	85 30		sta $30				sta 	codePtr
.8ecb	90 02		bcc $8ecf			bcc 	_CREExit
.8ecd	e6 31		inc $31				inc 	codePtr+1
.8ecf					_CREExit:
.8ecf	80 8e		bra $8e5f			bra 	RunNewLine
.8ed1					Shift1Command:
.8ed1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed3	c8		iny				iny
.8ed4	0a		asl a				asl 	a
.8ed5	aa		tax				tax
.8ed6	7c c6 8f	jmp ($8fc6,x)			jmp 	(VectorSet1,x)
.8ed9					Shift2Command:
.8ed9	b1 30		lda ($30),y			lda 	(codePtr),y
.8edb	c8		iny				iny
.8edc	0a		asl a				asl 	a
.8edd	aa		tax				tax
.8ede	7c de 8f	jmp ($8fde,x)			jmp 	(VectorSet2,x)
.8ee1					Unused1:
.8ee1					Unused2:
.8ee1					Unused3:
.8ee1					Unused4:
.8ee1	4c bc ab	jmp $abbc			jmp 	SyntaxError
>8ee4							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8ee4					VectorSetPunc:
>8ee4	47 94					.word	ShiftLeft                        ; $00 <<
>8ee6	41 93					.word	BinaryCompareLessEqual           ; $01 <=
>8ee8	37 93					.word	BinaryCompareNotEqual            ; $02 <>
>8eea	bc ab					.word	SyntaxError                      ; $03 !!3
>8eec	bc ab					.word	SyntaxError                      ; $04 ><
>8eee	4b 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8ef0	4a 94					.word	ShiftRight                       ; $06 >>
>8ef2	bc ab					.word	SyntaxError                      ; $07 !!7
>8ef4	bc ab					.word	SyntaxError                      ; $08 !!8
>8ef6	bc ab					.word	SyntaxError                      ; $09 !!9
>8ef8	bc ab					.word	SyntaxError                      ; $0a !!10
>8efa	bc ab					.word	SyntaxError                      ; $0b !!11
>8efc	bc ab					.word	SyntaxError                      ; $0c !!12
>8efe	bc ab					.word	SyntaxError                      ; $0d !!13
>8f00	bc ab					.word	SyntaxError                      ; $0e !!14
>8f02	bc ab					.word	SyntaxError                      ; $0f !!15
>8f04	bc ab					.word	SyntaxError                      ; $10 @
>8f06	bc ab					.word	SyntaxError                      ; $11 !!17
>8f08	bc ab					.word	SyntaxError                      ; $12 !!18
>8f0a	bc ab					.word	SyntaxError                      ; $13 [
>8f0c	ef a5					.word	IntegerDivide                    ; $14 \
>8f0e	bc ab					.word	SyntaxError                      ; $15 ]
>8f10	d0 95					.word	EorInteger                       ; $16 ^
>8f12	bc ab					.word	SyntaxError                      ; $17 _
>8f14	bc ab					.word	SyntaxError                      ; $18 `
>8f16	bc ab					.word	SyntaxError                      ; $19 !!25
>8f18	bc ab					.word	SyntaxError                      ; $1a !!26
>8f1a	bc ab					.word	SyntaxError                      ; $1b {
>8f1c	8a 95					.word	OraInteger                       ; $1c |
>8f1e	bc ab					.word	SyntaxError                      ; $1d }
>8f20	bc ab					.word	SyntaxError                      ; $1e ~
>8f22	bc ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8f24	bc ab					.word	SyntaxError                      ; $20
>8f26	16 96					.word	WordIndirect                     ; $21 !
>8f28	bc ab					.word	SyntaxError                      ; $22 "
>8f2a	bc ab					.word	SyntaxError                      ; $23 #
>8f2c	bc ab					.word	SyntaxError                      ; $24 $
>8f2e	3c a6					.word	IntegerModulus                   ; $25 %
>8f30	44 95					.word	AndInteger                       ; $26 &
>8f32	bc ab					.word	SyntaxError                      ; $27 '
>8f34	bc ab					.word	SyntaxError                      ; $28 (
>8f36	bc ab					.word	SyntaxError                      ; $29 )
>8f38	b1 a6					.word	MulInteger                       ; $2a *
>8f3a	de 94					.word	AddInteger                       ; $2b +
>8f3c	bc ab					.word	SyntaxError                      ; $2c ,
>8f3e	19 95					.word	SubInteger                       ; $2d -
>8f40	bc ab					.word	SyntaxError                      ; $2e .
>8f42	48 a8					.word	FDivideCommand                   ; $2f /
>8f44	bc ab					.word	SyntaxError                      ; $30 0
>8f46	bc ab					.word	SyntaxError                      ; $31 1
>8f48	bc ab					.word	SyntaxError                      ; $32 2
>8f4a	bc ab					.word	SyntaxError                      ; $33 3
>8f4c	bc ab					.word	SyntaxError                      ; $34 4
>8f4e	bc ab					.word	SyntaxError                      ; $35 5
>8f50	bc ab					.word	SyntaxError                      ; $36 6
>8f52	bc ab					.word	SyntaxError                      ; $37 7
>8f54	bc ab					.word	SyntaxError                      ; $38 8
>8f56	bc ab					.word	SyntaxError                      ; $39 9
>8f58	bc ab					.word	SyntaxError                      ; $3a :
>8f5a	bc ab					.word	SyntaxError                      ; $3b ;
>8f5c	23 93					.word	BinaryCompareLess                ; $3c <
>8f5e	19 93					.word	BinaryCompareEqual               ; $3d =
>8f60	2d 93					.word	BinaryCompareGreater             ; $3e >
>8f62	3d 96					.word	ByteIndirect                     ; $3f ?
.8f64					VectorSet0:
>8f64	c4 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f66	d1 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f68	d9 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f6a	8e a9					.word	AbsUnary                         ; $83 ABS(
>8f6c	07 9b					.word	AllocUnary                       ; $84 ALLOC(
>8f6e	9e a9					.word	AscUnary                         ; $85 ASC(
>8f70	27 9c					.word	ChrUnary                         ; $86 CHR$(
>8f72	15 93					.word	UnaryFalse                       ; $87 FALSE
>8f74	ab a9					.word	FracUnary                        ; $88 FRAC(
>8f76	c1 a9					.word	IntUnary                         ; $89 INT(
>8f78	17 aa					.word	IsValUnary                       ; $8a ISVAL(
>8f7a	01 9d					.word	Unary_Left                       ; $8b LEFT$(
>8f7c	d3 a9					.word	LenUnary                         ; $8c LEN(
>8f7e	2b 9d					.word	Unary_Mid                        ; $8d MID$(
>8f80	77 9b					.word	Unary_Not                        ; $8e NOT(
>8f82	8d 9b					.word	Unary_Random                     ; $8f RANDOM(
>8f84	11 9d					.word	Unary_Right                      ; $90 RIGHT$(
>8f86	a6 9b					.word	Unary_Rnd                        ; $91 RND(
>8f88	ed a9					.word	SgnUnary                         ; $92 SGN(
>8f8a	39 9c					.word	SpcUnary                         ; $93 SPC(
>8f8c	54 9c					.word	Unary_Str                        ; $94 STR$(
>8f8e	09 93					.word	UnaryTrue                        ; $95 TRUE
>8f90	0d aa					.word	ValUnary                         ; $96 VAL(
>8f92	ee 89					.word	ForCommand                       ; $97 FOR
>8f94	3b 8b					.word	IfCommand                        ; $98 IF
>8f96	e1 8e					.word	Unused1                          ; $99 PROC
>8f98	00 8e					.word	Command_REPEAT                   ; $9a REPEAT
>8f9a	6e 92					.word	Command_WHILE                    ; $9b WHILE
>8f9c	64 8b					.word	EndIf                            ; $9c ENDIF
>8f9e	c8 a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8fa0	a8 8a					.word	NextCommand                      ; $9e NEXT
>8fa2	e1 8e					.word	Unused4                          ; $9f THEN
>8fa4	09 8e					.word	Command_UNTIL                    ; $a0 UNTIL
>8fa6	8f 92					.word	Command_WEND                     ; $a1 WEND
>8fa8	94 88					.word	CallCommand                      ; $a2 CALL
>8faa	bc ab					.word	SyntaxError                      ; $a3 CLS
>8fac	26 89					.word	Command_Data                     ; $a4 DATA
>8fae	2e 89					.word	DimCommand                       ; $a5 DIM
>8fb0	e1 8e					.word	Unused3                          ; $a6 DOWNTO
>8fb2	5d 8b					.word	ElseCode                         ; $a7 ELSE
>8fb4	01 8b					.word	Command_GOSUB                    ; $a8 GOSUB
>8fb6	1f 8b					.word	GotoCommand                      ; $a9 GOTO
>8fb8	65 8b					.word	LetCommand                       ; $aa LET
>8fba	55 8c					.word	Command_LOCAL                    ; $ab LOCAL
>8fbc	e3 8c					.word	Command_Print                    ; $ac PRINT
>8fbe	9a 8d					.word	Command_Read                     ; $ad READ
>8fc0	f3 8d					.word	RemCommand                       ; $ae REM
>8fc2	11 8b					.word	Command_RETURN                   ; $af RETURN
>8fc4	e1 8e					.word	Unused2                          ; $b0 TO
.8fc6					VectorSet1:
>8fc6	bc ab					.word	SyntaxError                      ; $80 !0:EOF
>8fc8	bc ab					.word	SyntaxError                      ; $81 !1:SH1
>8fca	bc ab					.word	SyntaxError                      ; $82 !2:SH2
>8fcc	65 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>8fce	84 88					.word	AssertCommand                    ; $84 ASSERT
>8fd0	ce 88					.word	ClearCommand                     ; $85 CLEAR
>8fd2	eb 89					.word	EndCommand                       ; $86 END
>8fd4	ba 8b					.word	Command_List                     ; $87 LIST
>8fd6	d9 8c					.word	NewCommand                       ; $88 NEW
>8fd8	22 8e					.word	Command_Restore                  ; $89 RESTORE
>8fda	54 8e					.word	CommandRUN                       ; $8a RUN
>8fdc	66 90					.word	StopCommand                      ; $8b STOP
.8fde					VectorSet2:
>8fde	bc ab					.word	SyntaxError                      ; $80 !0:EOF
>8fe0	bc ab					.word	SyntaxError                      ; $81 !1:SH1
>8fe2	bc ab					.word	SyntaxError                      ; $82 !2:SH2
>8fe4	7b aa					.word	Assemble_adc                     ; $83 ADC
>8fe6	73 aa					.word	Assemble_and                     ; $84 AND
>8fe8	8f aa					.word	Assemble_asl                     ; $85 ASL
>8fea	f9 aa					.word	Assemble_bcc                     ; $86 BCC
>8fec	fd aa					.word	Assemble_bcs                     ; $87 BCS
>8fee	05 ab					.word	Assemble_beq                     ; $88 BEQ
>8ff0	bc aa					.word	Assemble_bit                     ; $89 BIT
>8ff2	ed aa					.word	Assemble_bmi                     ; $8a BMI
>8ff4	01 ab					.word	Assemble_bne                     ; $8b BNE
>8ff6	e9 aa					.word	Assemble_bpl                     ; $8c BPL
>8ff8	09 ab					.word	Assemble_bra                     ; $8d BRA
>8ffa	0d ab					.word	Assemble_brk                     ; $8e BRK
>8ffc	f1 aa					.word	Assemble_bvc                     ; $8f BVC
>8ffe	f5 aa					.word	Assemble_bvs                     ; $90 BVS
>9000	15 ab					.word	Assemble_clc                     ; $91 CLC
>9002	69 ab					.word	Assemble_cld                     ; $92 CLD
>9004	29 ab					.word	Assemble_cli                     ; $93 CLI
>9006	59 ab					.word	Assemble_clv                     ; $94 CLV
>9008	87 aa					.word	Assemble_cmp                     ; $95 CMP
>900a	d0 aa					.word	Assemble_cpx                     ; $96 CPX
>900c	cb aa					.word	Assemble_cpy                     ; $97 CPY
>900e	ad aa					.word	Assemble_dec                     ; $98 DEC
>9010	65 ab					.word	Assemble_dex                     ; $99 DEX
>9012	41 ab					.word	Assemble_dey                     ; $9a DEY
>9014	77 aa					.word	Assemble_eor                     ; $9b EOR
>9016	b2 aa					.word	Assemble_inc                     ; $9c INC
>9018	75 ab					.word	Assemble_inx                     ; $9d INX
>901a	61 ab					.word	Assemble_iny                     ; $9e INY
>901c	e4 aa					.word	Assemble_jmp                     ; $9f JMP
>901e	df aa					.word	Assemble_jsr                     ; $a0 JSR
>9020	83 aa					.word	Assemble_lda                     ; $a1 LDA
>9022	a8 aa					.word	Assemble_ldx                     ; $a2 LDX
>9024	c6 aa					.word	Assemble_ldy                     ; $a3 LDY
>9026	99 aa					.word	Assemble_lsr                     ; $a4 LSR
>9028	79 ab					.word	Assemble_nop                     ; $a5 NOP
>902a	6f aa					.word	Assemble_ora                     ; $a6 ORA
>902c	25 ab					.word	Assemble_pha                     ; $a7 PHA
>902e	11 ab					.word	Assemble_php                     ; $a8 PHP
>9030	6d ab					.word	Assemble_phx                     ; $a9 PHX
>9032	2d ab					.word	Assemble_phy                     ; $aa PHY
>9034	35 ab					.word	Assemble_pla                     ; $ab PLA
>9036	19 ab					.word	Assemble_plp                     ; $ac PLP
>9038	81 ab					.word	Assemble_plx                     ; $ad PLX
>903a	3d ab					.word	Assemble_ply                     ; $ae PLY
>903c	94 aa					.word	Assemble_rol                     ; $af ROL
>903e	9e aa					.word	Assemble_ror                     ; $b0 ROR
>9040	21 ab					.word	Assemble_rti                     ; $b1 RTI
>9042	31 ab					.word	Assemble_rts                     ; $b2 RTS
>9044	8b aa					.word	Assemble_sbc                     ; $b3 SBC
>9046	1d ab					.word	Assemble_sec                     ; $b4 SEC
>9048	7d ab					.word	Assemble_sed                     ; $b5 SED
>904a	39 ab					.word	Assemble_sei                     ; $b6 SEI
>904c	7f aa					.word	Assemble_sta                     ; $b7 STA
>904e	71 ab					.word	Assemble_stp                     ; $b8 STP
>9050	a3 aa					.word	Assemble_stx                     ; $b9 STX
>9052	c1 aa					.word	Assemble_sty                     ; $ba STY
>9054	b7 aa					.word	Assemble_stz                     ; $bb STZ
>9056	55 ab					.word	Assemble_tax                     ; $bc TAX
>9058	51 ab					.word	Assemble_tay                     ; $bd TAY
>905a	da aa					.word	Assemble_trb                     ; $be TRB
>905c	d5 aa					.word	Assemble_tsb                     ; $bf TSB
>905e	5d ab					.word	Assemble_tsx                     ; $c0 TSX
>9060	45 ab					.word	Assemble_txa                     ; $c1 TXA
>9062	4d ab					.word	Assemble_txs                     ; $c2 TXS
>9064	49 ab					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9066					StopCommand:
.9066	a9 08		lda #$08		lda	#8
.9068	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.906b					ListConvertLine:
.906b	9c 9d 04	stz $049d			stz 	tbOffset
.906e	9c a9 04	stz $04a9			stz 	tokenBuffer
.9071	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9073	b1 30		lda ($30),y			lda 	(codePtr),y
.9075	aa		tax				tax
.9076	88		dey				dey
.9077	b1 30		lda ($30),y			lda 	(codePtr),y
.9079	20 32 a7	jsr $a732			jsr 	ConvertInt16
.907c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.907e	86 37		stx $37				stx 	zTemp0+1
.9080	a0 00		ldy #$00			ldy 	#0
.9082					_LCCopyNumber:
.9082	b1 36		lda ($36),y			lda 	(zTemp0),y
.9084	20 84 91	jsr $9184			jsr 	LCLWrite
.9087	c8		iny				iny
.9088	b1 36		lda ($36),y			lda 	(zTemp0),y
.908a	d0 f6		bne $9082			bne 	_LCCopyNumber
.908c					_LCPadOut:
.908c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.908e	20 84 91	jsr $9184			jsr 	LCLWrite
.9091	ad 9d 04	lda $049d			lda 	tbOffset
.9094	c9 06		cmp #$06			cmp 	#6
.9096	d0 f4		bne $908c			bne 	_LCPadOut
.9098	a0 03		ldy #$03			ldy 	#3 							; start position.
.909a					_LCMainLoop:
.909a	b1 30		lda ($30),y			lda 	(codePtr),y
.909c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.909e	f0 17		beq $90b7			beq 	_LCExit
.90a0	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.90a2	90 14		bcc $90b8			bcc 	_LCDoubles
.90a4	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.90a6	90 20		bcc $90c8			bcc 	_LCShiftPunc
.90a8	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.90aa	90 2b		bcc $90d7			bcc 	_LCPunctuation
.90ac	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.90ae	90 2d		bcc $90dd			bcc 	_LCIdentifiers
.90b0	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.90b2	90 49		bcc $90fd			bcc 	_LCTokens
.90b4	4c 58 91	jmp $9158			jmp 	_LCData 					; 254-5 are data objects
.90b7					_LCExit:
.90b7	60		rts				rts
.90b8					_LCDoubles:
.90b8	48		pha				pha
.90b9	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.90ba	29 02		and #$02			and 	#2
.90bc	09 3c		ora #$3c			ora 	#60 						; make < >
.90be	20 84 91	jsr $9184			jsr 	LCLWrite
.90c1	68		pla				pla 								; restore, do lower bit
.90c2	29 03		and #$03			and 	#3
.90c4	09 3c		ora #$3c			ora 	#60
.90c6	80 0f		bra $90d7			bra		_LCPunctuation 				; print, increment, loop
.90c8					_LCShiftPunc:
.90c8	aa		tax				tax 								; save in X
.90c9	29 07		and #$07			and 	#7 							; lower 3 bits
.90cb	f0 02		beq $90cf			beq 	_LCNoAdd
.90cd	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.90cf					_LCNoAdd:
.90cf	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.90d1	90 02		bcc $90d5			bcc 	_LCNoAdd2
.90d3	09 20		ora #$20			ora 	#32 						; adds $20
.90d5					_LCNoAdd2:
.90d5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.90d7					_LCPunctuation:
.90d7	c8		iny				iny 								; consume character
.90d8	20 84 91	jsr $9184			jsr 	LCLWrite 					; write it out.
.90db	80 bd		bra $909a			bra 	_LCMainLoop 				; go round again.
.90dd					_LCIdentifiers:
.90dd	18		clc				clc 								; convert to physical address
.90de	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90e0	85 37		sta $37				sta 	zTemp0+1
.90e2	c8		iny				iny
.90e3	b1 30		lda ($30),y			lda 	(codePtr),y
.90e5	85 36		sta $36				sta 	zTemp0
.90e7	c8		iny				iny
.90e8	5a		phy				phy 								; save position
.90e9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.90eb					_LCOutIdentifier:
.90eb	c8		iny				iny
.90ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.90ee	29 7f		and #$7f			and 	#$7F
.90f0	20 b2 91	jsr $91b2			jsr 	LCLLowerCase
.90f3	20 84 91	jsr $9184			jsr 	LCLWrite
.90f6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.90f8	10 f1		bpl $90eb			bpl 	_LCOutIdentifier
.90fa	7a		ply				ply 								; restore position
.90fb	80 9d		bra $909a			bra 	_LCMainLoop
.90fd					_LCTokens:
.90fd	aa		tax				tax 								; token in X
.90fe	a9 82		lda #$82			lda 	#((KeywordSet2) & $FF)
.9100	85 36		sta $36				sta 	0+zTemp0
.9102	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.9104	85 37		sta $37				sta 	1+zTemp0
.9106	e0 82		cpx #$82			cpx 	#$82
.9108	f0 16		beq $9120			beq 	_LCUseShift
.910a	a9 3e		lda #$3e			lda 	#((KeywordSet1) & $FF)
.910c	85 36		sta $36				sta 	0+zTemp0
.910e	a9 a1		lda #$a1			lda 	#((KeywordSet1) >> 8)
.9110	85 37		sta $37				sta 	1+zTemp0
.9112	e0 81		cpx #$81			cpx 	#$81
.9114	f0 0a		beq $9120			beq 	_LCUseShift
.9116	a9 0c		lda #$0c			lda 	#((KeywordSet0) & $FF)
.9118	85 36		sta $36				sta 	0+zTemp0
.911a	a9 a0		lda #$a0			lda 	#((KeywordSet0) >> 8)
.911c	85 37		sta $37				sta 	1+zTemp0
.911e	80 01		bra $9121			bra 	_LCNoShift
.9120					_LCUseShift:
.9120	c8		iny				iny
.9121					_LCNoShift:
.9121	20 93 91	jsr $9193			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9124	b1 30		lda ($30),y			lda 	(codePtr),y
.9126	aa		tax				tax 								; into X
.9127					_LCFindText:
.9127	ca		dex				dex
.9128	10 0e		bpl $9138			bpl 	_LCFoundText 				; found text.
.912a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.912c	1a		inc a				inc 	a 							; one extra for size
.912d	38		sec				sec 								; one extra for checksum
.912e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9130	85 36		sta $36				sta 	zTemp0
.9132	90 f3		bcc $9127			bcc 	_LCFindText
.9134	e6 37		inc $37				inc 	zTemp0+1
.9136	80 ef		bra $9127			bra 	_LCFindText
.9138					_LCFoundText:
.9138	5a		phy				phy 								; save List position
.9139	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.913b	aa		tax				tax
.913c	a0 02		ldy #$02			ldy 	#2
.913e					_LCCopyToken:
.913e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9140	20 b2 91	jsr $91b2			jsr 	LCLLowerCase
.9143	20 84 91	jsr $9184			jsr 	LCLWrite
.9146	c8		iny				iny
.9147	ca		dex				dex
.9148	d0 f4		bne $913e			bne 	_LCCopyToken
.914a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.914c	f0 05		beq $9153			beq 	_LCNoSpace
.914e	a9 20		lda #$20			lda 	#' '
.9150	20 84 91	jsr $9184			jsr 	LCLWrite
.9153					_LCNoSpace:
.9153	7a		ply				ply 								; restore position.
.9154	c8		iny				iny 								; consume token
.9155	4c 9a 90	jmp $909a			jmp 	_LCMainLoop 				; and go around again.
.9158					_LCData:
.9158	48		pha				pha 								; save type $FE/$FF
.9159	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.915b	c9 fe		cmp #$fe			cmp 	#$FE
.915d	f0 02		beq $9161			beq 	_LCHaveOpener
.915f	a2 22		ldx #$22			ldx 	#'"'
.9161					_LCHaveOpener:
.9161	8a		txa				txa 								; output prefix (# or ")
.9162	20 84 91	jsr $9184			jsr 	LCLWrite
.9165	c8		iny				iny 								; get count
.9166	b1 30		lda ($30),y			lda 	(codePtr),y
.9168	aa		tax				tax
.9169	c8		iny				iny 								; point at first character
.916a					_LCOutData:
.916a	b1 30		lda ($30),y			lda 	(codePtr),y
.916c	c9 00		cmp #$00			cmp 	#0
.916e	f0 03		beq $9173			beq 	_LCNoPrint
.9170	20 84 91	jsr $9184			jsr 	LCLWrite
.9173					_LCNoPrint:
.9173	c8		iny				iny
.9174	ca		dex				dex
.9175	d0 f3		bne $916a			bne 	_LCOutData
.9177	68		pla				pla 								; closing " required ?
.9178	c9 ff		cmp #$ff			cmp 	#$FF
.917a	d0 05		bne $9181			bne 	_LCNoQuote
.917c	a9 22		lda #$22			lda 	#'"'
.917e	20 84 91	jsr $9184			jsr 	LCLWrite
.9181					_LCNoQuote:
.9181	4c 9a 90	jmp $909a			jmp 	_LCMainLoop
.9184					LCLWrite:
.9184	da		phx				phx
.9185	ae 9d 04	ldx $049d			ldx 	tbOffset
.9188	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.918b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.918e	ee 9d 04	inc $049d			inc 	tbOffset
.9191	fa		plx				plx
.9192	60		rts				rts
.9193					LCCheckSpaceRequired:
.9193	ae 9d 04	ldx $049d			ldx 	tbOffset
.9196	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9199	20 b2 91	jsr $91b2			jsr 	LCLLowerCase 				; saves a little effort
.919c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.919e	90 11		bcc $91b1			bcc 	_LCCSRExit
.91a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.91a2	90 08		bcc $91ac			bcc 	_LCCSRSpace
.91a4	c9 61		cmp #$61			cmp 	#"a"
.91a6	90 09		bcc $91b1			bcc 	_LCCSRExit
.91a8	c9 7b		cmp #$7b			cmp 	#"z"+1
.91aa	b0 05		bcs $91b1			bcs 	_LCCSRExit
.91ac					_LCCSRSpace:
.91ac	a9 20		lda #$20			lda 	#' '
.91ae	20 84 91	jsr $9184			jsr 	LCLWrite
.91b1					_LCCSRExit:
.91b1	60		rts				rts
.91b2					LCLLowerCase:
.91b2	c9 41		cmp #$41			cmp 	#"A"
.91b4	90 06		bcc $91bc			bcc 	_LCLLCOut
.91b6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.91b8	b0 02		bcs $91bc			bcs 	_LCLLCOut
.91ba	69 20		adc #$20			adc 	#$20
.91bc					_LCLLCOut:
.91bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.91bd					ProcedureScan:
.91bd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91bf	85 30		sta $30				sta 	codePtr
.91c1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91c3	85 31		sta $31				sta 	codePtr+1
.91c5					_PSLoop:
.91c5	b2 30		lda ($30)			lda 	(codePtr)
.91c7	f0 42		beq $920b			beq 	_PSExit
.91c9	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.91cb	b1 30		lda ($30),y			lda 	(codePtr),y
.91cd	c9 99		cmp #$99			cmp 	#KWD_PROC
.91cf	d0 2d		bne $91fe			bne 	_PSNext
.91d1	c8		iny				iny 								; get the address of the record to zTemp0 and
.91d2	b1 30		lda ($30),y			lda 	(codePtr),y
.91d4	29 c0		and #$c0			and 	#$C0
.91d6	c9 40		cmp #$40			cmp 	#$40
.91d8	d0 32		bne $920c			bne 	_PSSyntax
.91da	b1 30		lda ($30),y			lda 	(codePtr),y
.91dc	18		clc				clc
.91dd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91df	85 37		sta $37				sta 	zTemp0+1
.91e1	c8		iny				iny 								; LSB
.91e2	b1 30		lda ($30),y			lda 	(codePtr),y
.91e4	85 36		sta $36				sta 	zTemp0
.91e6	c8		iny				iny 								; character after variable call.
.91e7	98		tya				tya 								; save Y offset at +7
.91e8	a0 07		ldy #$07			ldy 	#7
.91ea	91 36		sta ($36),y			sta 	(zTemp0),y
.91ec	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.91ee	a0 02		ldy #$02			ldy 	#2
.91f0	91 36		sta ($36),y			sta 	(zTemp0),y
.91f2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.91f4					_PSCopy:
.91f4	b5 30		lda $30,x			lda 	safePtr,x
.91f6	c8		iny				iny
.91f7	91 36		sta ($36),y			sta 	(zTemp0),y
.91f9	e8		inx				inx
.91fa	e0 04		cpx #$04			cpx 	#4
.91fc	d0 f6		bne $91f4			bne 	_PSCopy
.91fe					_PSNext:
.91fe	18		clc				clc
.91ff	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9201	65 30		adc $30				adc 	codePtr
.9203	85 30		sta $30				sta 	codePtr
.9205	90 02		bcc $9209			bcc 	_CREExit
.9207	e6 31		inc $31				inc 	codePtr+1
.9209					_CREExit:
.9209	80 ba		bra $91c5			bra 	_PSLoop
.920b					_PSExit:
.920b	60		rts				rts
.920c					_PSSyntax:
.920c	4c bc ab	jmp $abbc			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.920f					ScanForward:
.920f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9211	86 37		stx $37				stx 	zTemp0+1
.9213	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9215					_ScanLoop:
.9215	b1 30		lda ($30),y			lda 	(codePtr),y
.9217	c8		iny				iny
.9218	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.921a	d0 0e		bne $922a			bne 	_ScanGoNext
.921c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.921e	f0 04		beq $9224			beq 	_ScanMatch
.9220	c5 37		cmp $37				cmp 	zTemp0+1
.9222	d0 06		bne $922a			bne 	_ScanGoNext
.9224					_ScanMatch:
.9224	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9226	d0 01		bne $9229			bne 	_ScanNotEndEOL
.9228	88		dey				dey
.9229					_ScanNotEndEOL:
.9229	60		rts				rts
.922a					_ScanGoNext:
.922a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.922c	90 e7		bcc $9215			bcc 	_ScanLoop
.922e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9230	90 18		bcc $924a			bcc 	_ScanSkipOne
.9232	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9234	b0 2f		bcs $9265			bcs 	_ScanSkipData
.9236	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9238	90 db		bcc $9215			bcc 	_ScanLoop 					; if not, ordinary keywords.
.923a	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.923c	b0 d7		bcs $9215			bcs 	_ScanLoop
.923e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9240	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9242	b0 d1		bcs $9215			bcs 	_ScanLoop
.9244	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9246	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9248	80 cb		bra $9215			bra 	_ScanLoop
.924a					_ScanSkipOne:
.924a	c8		iny				iny 								; consume the extra one.
.924b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.924d	d0 c6		bne $9215			bne 	_ScanLoop
.924f	18		clc				clc
.9250	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9252	65 30		adc $30				adc 	codePtr
.9254	85 30		sta $30				sta 	codePtr
.9256	90 02		bcc $925a			bcc 	_CREExit
.9258	e6 31		inc $31				inc 	codePtr+1
.925a					_CREExit:
.925a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.925c	b2 30		lda ($30)			lda 	(codePtr)
.925e	d0 b5		bne $9215			bne 	_ScanLoop 					; if not zero, more to scan
.9260	a9 13		lda #$13		lda	#19
.9262	4c 9d 92	jmp $929d		jmp	ErrorHandler
.9265					_ScanSkipData:
.9265	88		dey				dey 								; point at data token
.9266	c8		iny				iny
.9267	98		tya				tya
.9268	38		sec				sec
.9269	71 30		adc ($30),y			adc 	(codePtr),y
.926b	a8		tay				tay
.926c	80 a7		bra $9215			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.926e					Command_WHILE:
.926e	5a		phy				phy 								; save position of the test
.926f	a2 00		ldx #$00			ldx 	#0
.9271	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; work out the number
.9274	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; check if zero
.9277	f0 0e		beq $9287			beq 	_WHExitLoop 				; if so exit the loop
.9279	98		tya				tya 								; position *after* test.
.927a	7a		ply				ply 								; restore position before test, at WHILE
.927b	88		dey				dey
.927c	48		pha				pha 								; push after test on the stack
.927d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.927f	20 09 9f	jsr $9f09			jsr 	StackOpen
.9282	20 4d 9f	jsr $9f4d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9285	7a		ply				ply 								; restore the position *after* the test
.9286	60		rts				rts
.9287					_WHExitLoop:
.9287	68		pla				pla 								; throw post loop position
.9288	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.928a	aa		tax				tax
.928b	20 0f 92	jsr $920f			jsr 	ScanForward
.928e	60		rts				rts
.928f					Command_WEND:
.928f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9291	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9293	20 35 9f	jsr $9f35			jsr 	StackCheckFrame
.9296	20 5e 9f	jsr $9f5e			jsr 	STKLoadCodePosition 		; loop back
.9299	20 27 9f	jsr $9f27			jsr 	StackClose		 			; erase the frame
.929c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a5d6					CheckRightBracket:
.a5d6	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d8	c8		iny				iny
.a5d9	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a5db	d0 0f		bne $a5ec			bne 	CNAFail
.a5dd	60		rts				rts
.a5de					CheckComma:
.a5de	b1 30		lda ($30),y			lda 	(codePtr),y
.a5e0	c8		iny				iny
.a5e1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a5e3	d0 07		bne $a5ec			bne 	CNAFail
.a5e5	60		rts				rts
.a5e6					CheckNextA:
.a5e6	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a5e8	d0 02		bne $a5ec			bne 	CNAFail
.a5ea	c8		iny				iny 								; skip character
.a5eb	60		rts				rts 								; and exit
.a5ec					CNAFail:
.a5ec	4c bc ab	jmp $abbc			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.929d					ErrorHandler:
.929d	a8		tay				tay 								; find the error text
.929e	f0 49		beq $92e9			beq 	_EHEnd
.92a0	a2 00		ldx #$00			ldx 	#0
.92a2	a9 d5		lda #$d5			lda 	#((ErrorText) & $FF)
.92a4	85 36		sta $36				sta 	0+zTemp0
.92a6	a9 ab		lda #$ab			lda 	#((ErrorText) >> 8)
.92a8	85 37		sta $37				sta 	1+zTemp0
.92aa					_EHFind:
.92aa	88		dey				dey 								; found the error text ?
.92ab	f0 0e		beq $92bb			beq 	_EHFound
.92ad					_EHFindZero:
.92ad	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.92af	e6 36		inc $36				inc 	zTemp0
.92b1	d0 02		bne $92b5			bne 	_EHFNoCarry
.92b3	e6 37		inc $37				inc 	zTemp0+1
.92b5					_EHFNoCarry:
.92b5	c9 00		cmp #$00			cmp 	#0
.92b7	d0 f4		bne $92ad			bne 	_EHFindZero
.92b9	80 ef		bra $92aa			bra 	_EHFind
.92bb					_EHFound:
.92bb	a5 36		lda $36				lda 	zTemp0 						; print message
.92bd	a6 37		ldx $37				ldx 	zTemp0+1
.92bf	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.92c2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.92c4	b1 30		lda ($30),y			lda 	(codePtr),y
.92c6	d0 05		bne $92cd			bne 	_EHAtMsg
.92c8	c8		iny				iny
.92c9	b1 30		lda ($30),y			lda 	(codePtr),y
.92cb	f0 17		beq $92e4			beq 	_EHCREnd
.92cd					_EHAtMsg:
.92cd	a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.92cf	a9 ec		lda #$ec			lda 	#_AtMsg & $FF
.92d1	20 f6 92	jsr $92f6			jsr 	PrintStringXA
.92d4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.92d6	b1 30		lda ($30),y			lda 	(codePtr),y
.92d8	48		pha				pha
.92d9	c8		iny				iny
.92da	b1 30		lda ($30),y			lda 	(codePtr),y
.92dc	aa		tax				tax
.92dd	68		pla				pla
.92de	20 32 a7	jsr $a732			jsr 	ConvertInt16 				; convert XA to string
.92e1	20 f6 92	jsr $92f6			jsr 	PrintStringXA 				; and print it.
.92e4					_EHCREnd:
.92e4	a9 0d		lda #$0d			lda 	#13 						; new line
.92e6	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.92e9					_EHEnd:
.92e9	4c 35 88	jmp $8835			jmp 	WarmStart
>92ec	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>92f4	20 00
.92f6					PrintStringXA:
.92f6	5a		phy				phy
.92f7	86 37		stx $37				stx 	zTemp0+1
.92f9	85 36		sta $36				sta 	zTemp0
.92fb	a0 00		ldy #$00			ldy 	#0
.92fd					_PSXALoop:
.92fd	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ff	f0 06		beq $9307			beq 	_PSXAExit
.9301	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.9304	c8		iny				iny
.9305	80 f6		bra $92fd			bra 	_PSXALoop
.9307					_PSXAExit:
.9307	7a		ply				ply
.9308	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9309					UnaryTrue:
.9309	fa		plx				plx
.930a					ReturnTrue:
.930a	a9 01		lda #$01			lda 	#1  						; set to 1
.930c	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.930f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9311	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9314	60		rts				rts
.9315					UnaryFalse:
.9315	fa		plx				plx
.9316					ReturnFalse:
.9316	4c 55 9e	jmp $9e55			jmp 	NSMSetZero 					; set it all to zero
.9319					BinaryCompareEqual:
.9319	fa		plx				plx
.931a	20 55 93	jsr $9355			jsr 	CompareBaseCode
.931d	c9 00		cmp #$00			cmp 	#0
.931f	f0 e9		beq $930a			beq 	ReturnTrue
.9321	80 f3		bra $9316			bra 	ReturnFalse
.9323					BinaryCompareLess:
.9323	fa		plx				plx
.9324	20 55 93	jsr $9355			jsr 	CompareBaseCode
.9327	c9 ff		cmp #$ff			cmp 	#$FF
.9329	f0 df		beq $930a			beq 	ReturnTrue
.932b	80 e9		bra $9316			bra 	ReturnFalse
.932d					BinaryCompareGreater:
.932d	fa		plx				plx
.932e	20 55 93	jsr $9355			jsr 	CompareBaseCode
.9331	c9 01		cmp #$01			cmp 	#1
.9333	f0 d5		beq $930a			beq 	ReturnTrue
.9335	80 df		bra $9316			bra 	ReturnFalse
.9337					BinaryCompareNotEqual:
.9337	fa		plx				plx
.9338	20 55 93	jsr $9355			jsr 	CompareBaseCode
.933b	c9 00		cmp #$00			cmp 	#0
.933d	d0 cb		bne $930a			bne 	ReturnTrue
.933f	80 d5		bra $9316			bra 	ReturnFalse
.9341					BinaryCompareLessEqual:
.9341	fa		plx				plx
.9342	20 55 93	jsr $9355			jsr 	CompareBaseCode
.9345	c9 01		cmp #$01			cmp 	#1
.9347	d0 c1		bne $930a			bne 	ReturnTrue
.9349	80 cb		bra $9316			bra 	ReturnFalse
.934b					BinaryCompareGreaterEqual:
.934b	fa		plx				plx
.934c	20 55 93	jsr $9355			jsr 	CompareBaseCode
.934f	c9 ff		cmp #$ff			cmp 	#$FF
.9351	d0 b7		bne $930a			bne 	ReturnTrue
.9353	80 c1		bra $9316			bra 	ReturnFalse
.9355					CompareBaseCode:
.9355	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; make both values if references.
.9358	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.935b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.935e	29 10		and #$10			and 	#NSTString
.9360	d0 40		bne $93a2			bne 	_CBCString
.9362	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9365	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9368	d0 3b		bne $93a5			bne 	_CBCFloat
.936a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.936d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9370	29 08		and #$08			and 	#NSTFloat
.9372	d0 31		bne $93a5			bne 	_CBCFloat
.9374	20 a8 93	jsr $93a8			jsr 	CompareFixMinusZero
.9377	e8		inx				inx
.9378	20 a8 93	jsr $93a8			jsr 	CompareFixMinusZero
.937b	ca		dex				dex
.937c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.937f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9382	10 0b		bpl $938f			bpl 	_CDCSameSign
.9384	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9387	30 16		bmi $939f			bmi 	_CBCLess 					; return $FF
.9389					_CBCGreater:
.9389	a9 01		lda #$01			lda 	#1
.938b	60		rts				rts
.938c					_CBCEqual:
.938c	a9 00		lda #$00			lda 	#0
.938e	60		rts				rts
.938f					_CDCSameSign:
.938f	20 b8 94	jsr $94b8			jsr 	SubTopTwoStack 				; unsigned subtract
.9392	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; or the mantissa together
.9395	f0 f5		beq $938c			beq 	_CBCEqual 					; -0 == 0
.9397	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.939a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.939d	10 ea		bpl $9389			bpl 	_CBCGreater
.939f					_CBCLess:
.939f	a9 ff		lda #$ff			lda 	#$FF
.93a1	60		rts				rts
.93a2					_CBCString:
.93a2	4c 0e 94	jmp $940e			jmp 	CompareStrings
.93a5					_CBCFloat:
.93a5	4c 2e a8	jmp $a82e			jmp 	CompareFloat
.93a8					CompareFixMinusZero:
.93a8	20 85 9e	jsr $9e85			jsr 	NSMIsZero
.93ab	d0 03		bne $93b0			bne 	_CFXMZNotZero
.93ad	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93b0					_CFXMZNotZero:
.93b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.93b1					StringConcat:
.93b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.93b4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93b7	29 18		and #$18			and 	#NSBTypeMask
.93b9	c9 10		cmp #$10			cmp 	#NSTString
.93bb	d0 4e		bne $940b			bne		_SCType
.93bd	64 38		stz $38				stz 	zTemp1 						; counting total length
.93bf	e8		inx				inx
.93c0	20 de 93	jsr $93de			jsr 	_SCSetupZ0 					; setup for second
.93c3	20 e9 93	jsr $93e9			jsr 	_SCLengthZ0 				; length for second
.93c6	ca		dex				dex
.93c7	20 de 93	jsr $93de			jsr 	_SCSetupZ0 					; setup for first
.93ca	20 e9 93	jsr $93e9			jsr 	_SCLengthZ0 				; length for first
.93cd	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.93cf	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate
.93d2	20 fc 93	jsr $93fc			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.93d5	e8		inx				inx
.93d6	20 de 93	jsr $93de			jsr 	_SCSetupZ0 					; copy second out
.93d9	20 fc 93	jsr $93fc			jsr 	_SCCopy
.93dc	ca		dex				dex
.93dd	60		rts				rts
.93de					_SCSetupZ0:
.93de	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.93e1	85 36		sta $36				sta 	zTemp0
.93e3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93e6	85 37		sta $37				sta 	zTemp0+1
.93e8	60		rts				rts
.93e9					_SCLengthZ0:
.93e9	5a		phy				phy
.93ea	a0 00		ldy #$00			ldy 	#0
.93ec					_SCLenLoop:
.93ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ee	f0 0a		beq $93fa			beq 	_SCLExit
.93f0	c8		iny				iny
.93f1	e6 38		inc $38				inc 	zTemp1
.93f3	10 f7		bpl $93ec			bpl		_SCLenLoop
.93f5	a9 09		lda #$09		lda	#9
.93f7	4c 9d 92	jmp $929d		jmp	ErrorHandler
.93fa					_SCLExit:
.93fa	7a		ply				ply
.93fb	60		rts				rts
.93fc					_SCCopy:
.93fc	5a		phy				phy
.93fd	a0 00		ldy #$00			ldy 	#0
.93ff					_SCCopyLoop:
.93ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.9401	f0 06		beq $9409			beq 	_SCCExit
.9403	20 20 af	jsr $af20			jsr 	StringTempWrite
.9406	c8		iny				iny
.9407	80 f6		bra $93ff			bra 	_SCCopyLoop
.9409					_SCCExit:
.9409	7a		ply				ply
.940a	60		rts				rts
.940b					_SCType:
.940b	4c c6 ab	jmp $abc6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a5ef					IntegerDivide:
.a5ef	fa		plx				plx
.a5f0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a5f3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a5f6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a5f7	0a		asl a				asl 	a
.a5f8	10 05		bpl $a5ff			bpl 	_NotRef
.a5fa	48		pha				pha
.a5fb	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5fe	68		pla				pla
.a5ff					_NotRef:
.a5ff	0a		asl a				asl 	a
.a600	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a602	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a605	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a608	f0 03		beq $a60d			beq 	_IntegerCode 				; if clear, then we have two integers
.a60a	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.a60d					_IntegerCode:
.a60d	20 2f a6	jsr $a62f			jsr 	CheckDivideZero 			; do div zero check
.a610	20 67 a6	jsr $a667			jsr 	Int32Divide 				; do the division
.a613	20 24 a7	jsr $a724			jsr 	CalculateSign 				; calculate result sign
.a616					NSMCopyPlusTwoToZero:
.a616	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a619	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a61c	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a61f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a622	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a625	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a628	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a62b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a62e	60		rts				rts
.a62f					CheckDivideZero:
.a62f	e8		inx				inx
.a630	20 85 9e	jsr $9e85			jsr 	NSMIsZero
.a633	f0 02		beq $a637			beq 	_CDVError
.a635	ca		dex				dex
.a636	60		rts				rts
.a637					_CDVError:
.a637	a9 03		lda #$03		lda	#3
.a639	4c 9d 92	jmp $929d		jmp	ErrorHandler
.a63c					IntegerModulus:
.a63c	fa		plx				plx
.a63d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a640	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a643	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a644	0a		asl a				asl 	a
.a645	10 05		bpl $a64c			bpl 	_NotRef
.a647	48		pha				pha
.a648	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a64b	68		pla				pla
.a64c					_NotRef:
.a64c	0a		asl a				asl 	a
.a64d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a64f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a652	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a655	f0 03		beq $a65a			beq 	_IntegerCode 				; if clear, then we have two integers
.a657	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.a65a					_IntegerCode:
.a65a					IntegerModulusNoCheck:
.a65a	20 2f a6	jsr $a62f			jsr 	CheckDivideZero 			; do div zero check
.a65d	20 67 a6	jsr $a667			jsr 	Int32Divide 				; do the division
.a660	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a663	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a666	60		rts				rts
.a667					Int32Divide:
.a667	48		pha				pha 								; save AXY
.a668	5a		phy				phy
.a669	20 2c 9e	jsr $9e2c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a66c	20 51 9e	jsr $9e51			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a66f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a671					_I32DivideLoop:
.a671	e8		inx				inx
.a672	e8		inx				inx
.a673	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a676	ca		dex				dex
.a677	ca		dex				dex
.a678	20 6b 9e	jsr $9e6b			jsr 	NSMRotateLeft
.a67b	20 a7 a6	jsr $a6a7			jsr 	DivideCheckSubtract 		; check if subtract possible
.a67e	90 03		bcc $a683			bcc 	_I32DivideNoCarryIn
.a680	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a683					_I32DivideNoCarryIn:
.a683	88		dey				dey 								; loop round till division completed.
.a684	d0 eb		bne $a671			bne 	_I32DivideLoop
.a686	7a		ply				ply 								; restore AXY and exit
.a687	68		pla				pla
.a688	60		rts				rts
.a689					Int32ShiftDivide:
.a689	48		pha				pha 								; save AY
.a68a	5a		phy				phy
.a68b	e8		inx				inx 								; clear S[X+2]
.a68c	e8		inx				inx
.a68d	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.a690	ca		dex				dex
.a691	ca		dex				dex
.a692	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a694					_I32SDLoop:
.a694	20 a7 a6	jsr $a6a7			jsr 	DivideCheckSubtract 		; check if subtract possible
.a697	e8		inx				inx
.a698	e8		inx				inx
.a699	20 6b 9e	jsr $9e6b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a69c	ca		dex				dex
.a69d	ca		dex				dex
.a69e	20 6b 9e	jsr $9e6b			jsr 	NSMRotateLeft
.a6a1	88		dey				dey 	 							; do 31 times
.a6a2	d0 f0		bne $a694			bne 	_I32SDLoop
.a6a4	7a		ply				ply 								; restore AY and exit
.a6a5	68		pla				pla
.a6a6	60		rts				rts
.a6a7					DivideCheckSubtract:
.a6a7	20 b8 94	jsr $94b8			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a6aa	b0 04		bcs $a6b0			bcs 	_DCSExit 					; if carry set, then could do, exit
.a6ac	20 92 94	jsr $9492			jsr 	AddTopTwoStack 				; add it back in
.a6af	18		clc				clc 								; and return False
.a6b0					_DCSExit:
.a6b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a6b1					MulInteger:
.a6b1	fa		plx				plx
.a6b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6b5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6b8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6b9	0a		asl a				asl 	a
.a6ba	10 05		bpl $a6c1			bpl 	_NotRef
.a6bc	48		pha				pha
.a6bd	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6c0	68		pla				pla
.a6c1					_NotRef:
.a6c1	0a		asl a				asl 	a 							; put MSB of type into A:7
.a6c2	30 0b		bmi $a6cf			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a6c4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a6c7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a6ca	f0 06		beq $a6d2			beq 	_IntegerCode 				; if clear, then we have two integers
.a6cc	4c 05 a9	jmp $a905			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a6cf					_StringData:
.a6cf	4c d0 ab	jmp $abd0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a6d2					_IntegerCode:
.a6d2	20 df a6	jsr $a6df			jsr 	MultiplyShort
.a6d5	c9 00		cmp #$00			cmp 	#0
.a6d7	f0 05		beq $a6de			beq 	_MIExit
.a6d9	a9 04		lda #$04		lda	#4
.a6db	4c 9d 92	jmp $929d		jmp	ErrorHandler
.a6de					_MIExit:
.a6de	60		rts				rts
.a6df					MultiplyShort:
.a6df	5a		phy				phy 								; save Y
.a6e0	20 2c 9e	jsr $9e2c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a6e3	20 51 9e	jsr $9e51			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a6e6	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a6e8					_I32MLoop:
.a6e8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a6eb	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a6ee	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a6f1	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a6f4	f0 28		beq $a71e			beq 	_I32MExit 					; exit if zero
.a6f6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a6f9	29 01		and #$01			and 	#1
.a6fb	f0 0e		beq $a70b			beq 	_I32MNoAdd
.a6fd	20 92 94	jsr $9492			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a700	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a703	10 06		bpl $a70b			bpl 	_I32MNoAdd
.a705					_I32ShiftRight:
.a705	20 78 9e	jsr $9e78			jsr 	NSMShiftRight 				; shift S[X] right
.a708	c8		iny				iny 								; increment shift count
.a709	80 0a		bra $a715			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a70b					_I32MNoAdd:
.a70b	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a70e	70 f5		bvs $a705			bvs 	_I32ShiftRight 				; instead.
.a710	e8		inx				inx
.a711	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a714	ca		dex				dex
.a715					_I32MShiftUpper:
.a715	e8		inx				inx 								; shift S[X+2] right
.a716	e8		inx				inx
.a717	20 78 9e	jsr $9e78			jsr 	NSMShiftRight
.a71a	ca		dex				dex
.a71b	ca		dex				dex
.a71c	80 ca		bra $a6e8			bra 	_I32MLoop 					; try again.
.a71e					_I32MExit:
.a71e	20 24 a7	jsr $a724			jsr 	CalculateSign
.a721	98		tya				tya 								; shift in A
.a722	7a		ply				ply 								; restore Y and exit
.a723	60		rts				rts
.a724					CalculateSign:
.a724	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a727	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a72a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a72d	0a		asl a				asl 	a 							; shift bit 7 into carry
.a72e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a731	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.940e					CompareStrings:
.940e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9411	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9414	29 10		and #$10			and 	#NSBIsString
.9416	f0 2c		beq $9444			beq 	_CSTypeError
.9418	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.941b	85 36		sta $36				sta 	zTemp0
.941d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9420	85 37		sta $37				sta 	zTemp0+1
.9422	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9425	85 38		sta $38				sta 	zTemp1
.9427	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.942a	85 39		sta $39				sta 	zTemp1+1
.942c	5a		phy				phy 								; save Y so we can access strings
.942d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.942f					_CSLoop:
.942f	c8		iny				iny
.9430	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9432	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9434	d0 06		bne $943c			bne 	_CSDifferent
.9436	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9438	d0 f5		bne $942f			bne 	_CSLoop 					; still comparing
.943a					_CSExit:
.943a	7a		ply				ply 								; reached end, return zero in A from EOS
.943b	60		rts				rts
.943c					_CSDifferent:
.943c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.943e	90 fa		bcc $943a			bcc		_CSExit
.9440	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9442	80 f6		bra $943a			bra 	_CSExit
.9444					_CSTypeError:
.9444	4c c6 ab	jmp $abc6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9447					ShiftLeft:
.9447	38		sec				sec
.9448	80 01		bra $944b			bra 	ShiftMain
.944a					ShiftRight:
.944a	18		clc				clc
.944b					ShiftMain:
.944b	fa		plx				plx 								; restore X
.944c	08		php				php 								; save direction
.944d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9450	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9453	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9454	0a		asl a				asl 	a
.9455	10 05		bpl $945c			bpl 	_NotRef
.9457	48		pha				pha
.9458	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.945b	68		pla				pla
.945c					_NotRef:
.945c	0a		asl a				asl 	a
.945d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.945f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9462	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9465	f0 03		beq $946a			beq 	_IntegerCode 				; if clear, then we have two integers
.9467	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.946a					_IntegerCode:
.946a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.946d	29 e0		and #$e0			and 	#$E0
.946f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9472	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9475	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9478	d0 13		bne $948d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.947a					_SMLoop:
.947a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.947d	30 11		bmi $9490			bmi 	_SMExit 					; exit if done.
.947f	28		plp				plp 								; restore direcition setting
.9480	08		php				php
.9481	90 05		bcc $9488			bcc 	_SMRight
.9483	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; shift left if CS
.9486	80 f2		bra $947a			bra 	_SMLoop
.9488					_SMRight:
.9488	20 78 9e	jsr $9e78			jsr 	NSMShiftRight 				; shift right if CC
.948b	80 ed		bra $947a			bra 	_SMLoop
.948d					_SMExit0:
.948d	20 55 9e	jsr $9e55			jsr 	NSMSetZero 					; return zero.
.9490					_SMExit:
.9490	28		plp				plp 								; throw direction
.9491	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9492					AddTopTwoStack:
.9492	18		clc				clc
.9493	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9496	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9499	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.949c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.949f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.94a2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94a5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94a8	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.94ab	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94ae	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94b1	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.94b4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94b7	60		rts				rts
.94b8					SubTopTwoStack:
.94b8	38		sec				sec
.94b9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94bc	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.94bf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94c2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94c5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.94c8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94cb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94ce	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.94d1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94d4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94d7	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.94da	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94dd	60		rts				rts
.94de					AddInteger:
.94de	fa		plx				plx
.94df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94e2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94e5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94e6	0a		asl a				asl 	a
.94e7	10 05		bpl $94ee			bpl 	_NotRef
.94e9	48		pha				pha
.94ea	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ed	68		pla				pla
.94ee					_NotRef:
.94ee	0a		asl a				asl 	a 							; put MSB of type into A:7
.94ef	30 0b		bmi $94fc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94f1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94f4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94f7	f0 06		beq $94ff			beq 	_IntegerCode 				; if clear, then we have two integers
.94f9	4c 8d a7	jmp $a78d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.94fc					_StringData:
.94fc	4c b1 93	jmp $93b1			jmp 	StringConcat							; at least one string - don't know both are strings.
.94ff					_IntegerCode:
.94ff					AddCode:
.94ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9502	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9505	10 8b		bpl $9492			bpl 	AddTopTwoStack
.9507	20 b8 94	jsr $94b8			jsr 	SubTopTwoStack 				; do a physical subtraction
.950a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.950d	10 09		bpl $9518			bpl 	_AddExit
.950f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9512	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9515	20 0a 9e	jsr $9e0a			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9518					_AddExit:
.9518	60		rts				rts
.9519					SubInteger:
.9519	fa		plx				plx
.951a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.951d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9520	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9521	0a		asl a				asl 	a
.9522	10 05		bpl $9529			bpl 	_NotRef
.9524	48		pha				pha
.9525	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9528	68		pla				pla
.9529					_NotRef:
.9529	0a		asl a				asl 	a 							; put MSB of type into A:7
.952a	30 0b		bmi $9537			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.952c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.952f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9532	f0 06		beq $953a			beq 	_IntegerCode 				; if clear, then we have two integers
.9534	4c 92 a7	jmp $a792			jmp 	FloatingPointSub 							; otherwise at least one float.
.9537					_StringData:
.9537	4c d0 ab	jmp $abd0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.953a					_IntegerCode:
.953a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.953d	49 80		eor #$80			eor 	#$80
.953f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9542	80 bb		bra $94ff			bra 	AddCode 					; and do the same code as add.
.9544					AndInteger:
.9544	fa		plx				plx
.9545	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9548	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.954b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.954c	0a		asl a				asl 	a
.954d	10 05		bpl $9554			bpl 	_NotRef
.954f	48		pha				pha
.9550	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9553	68		pla				pla
.9554					_NotRef:
.9554	0a		asl a				asl 	a
.9555	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9557	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.955d	f0 03		beq $9562			beq 	_IntegerCode 				; if clear, then we have two integers
.955f	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.9562					_IntegerCode:
.9562	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9565	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9568	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.956b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.956e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9571	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9574	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9577	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.957a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.957d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9580	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9583	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9586	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9589	60		rts				rts
.958a					OraInteger:
.958a	fa		plx				plx
.958b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.958e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9591	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9592	0a		asl a				asl 	a
.9593	10 05		bpl $959a			bpl 	_NotRef
.9595	48		pha				pha
.9596	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9599	68		pla				pla
.959a					_NotRef:
.959a	0a		asl a				asl 	a
.959b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.959d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95a3	f0 03		beq $95a8			beq 	_IntegerCode 				; if clear, then we have two integers
.95a5	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.95a8					_IntegerCode:
.95a8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95ab	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.95ae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95b1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95b4	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.95b7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95ba	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95bd	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.95c0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95c3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95c6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.95c9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95cc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95cf	60		rts				rts
.95d0					EorInteger:
.95d0	fa		plx				plx
.95d1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95d4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95d7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d8	0a		asl a				asl 	a
.95d9	10 05		bpl $95e0			bpl 	_NotRef
.95db	48		pha				pha
.95dc	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95df	68		pla				pla
.95e0					_NotRef:
.95e0	0a		asl a				asl 	a
.95e1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95e3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95e9	f0 03		beq $95ee			beq 	_IntegerCode 				; if clear, then we have two integers
.95eb	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.95ee					_IntegerCode:
.95ee	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95f1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.95f4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95f7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95fa	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.95fd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9600	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9603	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9606	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9609	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.960c	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.960f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9612	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9615	60		rts				rts
.9616					WordIndirect:
.9616	fa		plx				plx
.9617	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.961a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.961d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.961e	0a		asl a				asl 	a
.961f	10 05		bpl $9626			bpl 	_NotRef
.9621	48		pha				pha
.9622	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9625	68		pla				pla
.9626					_NotRef:
.9626	0a		asl a				asl 	a
.9627	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9629	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.962c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.962f	f0 03		beq $9634			beq 	_IntegerCode 				; if clear, then we have two integers
.9631	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.9634					_IntegerCode:
.9634	20 ff 94	jsr $94ff			jsr 	AddCode 					; add the two values
.9637	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9639	9d 00 04	sta $0400,x			sta 	NSStatus,x
.963c	60		rts				rts
.963d					ByteIndirect:
.963d	fa		plx				plx
.963e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9641	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9644	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9645	0a		asl a				asl 	a
.9646	10 05		bpl $964d			bpl 	_NotRef
.9648	48		pha				pha
.9649	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.964c	68		pla				pla
.964d					_NotRef:
.964d	0a		asl a				asl 	a
.964e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9650	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9653	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9656	f0 03		beq $965b			beq 	_IntegerCode 				; if clear, then we have two integers
.9658	4c c6 ab	jmp $abc6			jmp 	TypeError 					; anything else, type mismatch.
.965b					_IntegerCode:
.965b	20 ff 94	jsr $94ff			jsr 	AddCode 					; add the two values
.965e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9660	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9663	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a732					ConvertInt16:
.a732	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a735	8e 10 04	stx $0410			stx 	NSMantissa1
.a738	9c 18 04	stz $0418			stz 	NSMantissa2
.a73b	9c 20 04	stz $0420			stz 	NSMantissa3
.a73e	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a741	a2 00		ldx #$00			ldx 	#0 							; stack level
.a743	a9 0a		lda #$0a			lda 	#10 						; base
.a745	80 00		bra $a747			bra 	ConvertInt32
.a747					ConvertInt32:
.a747	5a		phy				phy
.a748	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a74a	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a74d	10 08		bpl $a757			bpl 	_CI32NotNeg
.a74f	48		pha				pha
.a750	a9 2d		lda #$2d			lda 	#'-'
.a752	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a755	c8		iny				iny
.a756	68		pla				pla
.a757					_CI32NotNeg:
.a757	20 65 a7	jsr $a765			jsr 	_CI32DivideConvert 			; recursive conversion
.a75a	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a75c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a75f	7a		ply				ply
.a760	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a762	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a764	60		rts				rts
.a765					_CI32DivideConvert:
.a765	e8		inx				inx 								; write to next slot up
.a766	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.a769	ca		dex				dex
.a76a	20 67 a6	jsr $a667			jsr 	Int32Divide 				; divide
.a76d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a770	48		pha				pha
.a771	20 16 a6	jsr $a616			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a774	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; is it zero ?
.a777	f0 06		beq $a77f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a779	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a77c	20 65 a7	jsr $a765			jsr 	_CI32DivideConvert 			; and recusrively call.
.a77f					_CI32NoRecurse:
.a77f	68		pla				pla 								; remainder
.a780	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a782	90 02		bcc $a786			bcc 	_CI32NotHex
.a784	69 26		adc #$26			adc 	#6+32
.a786					_CI32NotHex:
.a786	69 30		adc #$30			adc 	#48
.a788	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a78b	c8		iny				iny
.a78c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9664					PrecedenceLevel:
>9664	04					.byte	 4	; $00 <<
>9665	02					.byte	 2	; $01 <=
>9666	02					.byte	 2	; $02 <>
>9667	00					.byte	 0	; $03 !!3
>9668	00					.byte	 0	; $04 ><
>9669	02					.byte	 2	; $05 >=
>966a	04					.byte	 4	; $06 >>
>966b	00					.byte	 0	; $07 !!7
>966c	00					.byte	 0	; $08 !!8
>966d	00					.byte	 0	; $09 !!9
>966e	00					.byte	 0	; $0a !!10
>966f	00					.byte	 0	; $0b !!11
>9670	00					.byte	 0	; $0c !!12
>9671	00					.byte	 0	; $0d !!13
>9672	00					.byte	 0	; $0e !!14
>9673	00					.byte	 0	; $0f !!15
>9674	00					.byte	 0	; $10 @
>9675	00					.byte	 0	; $11 !!17
>9676	00					.byte	 0	; $12 !!18
>9677	00					.byte	 0	; $13 [
>9678	04					.byte	 4	; $14 \
>9679	00					.byte	 0	; $15 ]
>967a	01					.byte	 1	; $16 ^
>967b	00					.byte	 0	; $17 _
>967c	00					.byte	 0	; $18 `
>967d	00					.byte	 0	; $19 !!25
>967e	00					.byte	 0	; $1a !!26
>967f	00					.byte	 0	; $1b {
>9680	01					.byte	 1	; $1c |
>9681	00					.byte	 0	; $1d }
>9682	00					.byte	 0	; $1e ~
>9683	00					.byte	 0	; $1f [7m<7F>[m
>9684	00					.byte	 0	; $20
>9685	05					.byte	 5	; $21 !
>9686	00					.byte	 0	; $22 "
>9687	00					.byte	 0	; $23 #
>9688	05					.byte	 5	; $24 $
>9689	04					.byte	 4	; $25 %
>968a	01					.byte	 1	; $26 &
>968b	00					.byte	 0	; $27 '
>968c	00					.byte	 0	; $28 (
>968d	00					.byte	 0	; $29 )
>968e	04					.byte	 4	; $2a *
>968f	03					.byte	 3	; $2b +
>9690	00					.byte	 0	; $2c ,
>9691	03					.byte	 3	; $2d -
>9692	00					.byte	 0	; $2e .
>9693	04					.byte	 4	; $2f /
>9694	00					.byte	 0	; $30 0
>9695	00					.byte	 0	; $31 1
>9696	00					.byte	 0	; $32 2
>9697	00					.byte	 0	; $33 3
>9698	00					.byte	 0	; $34 4
>9699	00					.byte	 0	; $35 5
>969a	00					.byte	 0	; $36 6
>969b	00					.byte	 0	; $37 7
>969c	00					.byte	 0	; $38 8
>969d	00					.byte	 0	; $39 9
>969e	00					.byte	 0	; $3a :
>969f	00					.byte	 0	; $3b ;
>96a0	02					.byte	 2	; $3c <
>96a1	02					.byte	 2	; $3d =
>96a2	02					.byte	 2	; $3e >
>96a3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.96a4					EvaluateExpressionAt0:
.96a4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.96a6					EvaluateExpression:
.96a6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.96a8					EvaluateExpressionAtPrecedence:
.96a8	48		pha				pha 								; save precedence level
.96a9	20 77 99	jsr $9977			jsr 	EvaluateTerm 				; evaluate term into level X.
.96ac	68		pla				pla 								; restore precedence level.
.96ad					_EXPRLoop:
.96ad	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.96af	b1 30		lda ($30),y			lda 	(codePtr),y
.96b1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.96b3	b0 25		bcs $96da			bcs 	_EXPRExit
.96b5	da		phx				phx 								; read the operator precedence
.96b6	aa		tax				tax
.96b7	bd 64 96	lda $9664,x			lda 	PrecedenceLevel,x
.96ba	fa		plx				plx
.96bb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.96bd	f0 1b		beq $96da			beq 	_EXPRExit
.96bf	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.96c1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.96c3	c5 37		cmp $37				cmp 	zTemp0+1
.96c5	b0 13		bcs $96da			bcs		_EXPRExit 					; if current >= operator exit
.96c7	48		pha				pha 								; save current precedence.
.96c8	b1 30		lda ($30),y			lda 	(codePtr),y
.96ca	c8		iny				iny
.96cb	48		pha				pha
.96cc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.96ce	e8		inx				inx 								; work out the right hand side.
.96cf	20 a8 96	jsr $96a8			jsr 	EvaluateExpressionAtPrecedence
.96d2	ca		dex				dex
.96d3	68		pla				pla 								; get operator, call the code.
.96d4	20 dd 96	jsr $96dd			jsr 	_EXPRCaller
.96d7	68		pla				pla 								; restore precedence level
.96d8	80 d3		bra $96ad			bra 	_EXPRLoop 					; and go round.
.96da					_EXPRExit:
.96da	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.96dc	60		rts				rts
.96dd					_EXPRCaller:
.96dd	da		phx				phx 								; save on stack, first thing is to restore it
.96de	0a		asl a				asl 	a 							; double so can use vectors into X
.96df	aa		tax				tax
.96e0	7c e4 8e	jmp ($8ee4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a78d					FloatingPointAdd:
.a78d	20 2e a9	jsr $a92e			jsr 	FloatPrepare 				; prepare for floats
.a790	80 0b		bra $a79d			bra 	FloatAdd
.a792					FloatingPointSub:
.a792	20 2e a9	jsr $a92e			jsr 	FloatPrepare 				; prepare for floats
.a795					FloatSubtract:
.a795	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a798	49 80		eor #$80			eor 	#$80
.a79a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a79d					FloatAdd:
.a79d	48		pha				pha
.a79e	5a		phy				phy
.a79f	20 3f a9	jsr $a93f			jsr 	NSNormalise 				; normalise S[X]
.a7a2	f0 54		beq $a7f8			beq 	_FAReturn1
.a7a4	e8		inx				inx 								; normalise S[X+1]
.a7a5	20 3f a9	jsr $a93f			jsr 	NSNormalise
.a7a8	ca		dex				dex
.a7a9	c9 00		cmp #$00			cmp 	#0
.a7ab	f0 6f		beq $a81c			beq 	_FAExit 					; if so, just return A
.a7ad	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a7b0	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a7b3	f0 1b		beq $a7d0			beq 	_FAExponentsEqual
.a7b5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a7b8	a8		tay				tay
.a7b9	38		sec				sec 								; do a signed comparison of the exponents.
.a7ba	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a7bd	50 02		bvc $a7c1			bvc 	_FANoSignedChange
.a7bf	49 80		eor #$80			eor 	#$80
.a7c1					_FANoSignedChange:
.a7c1	29 80		and #$80			and 	#$80
.a7c3	10 03		bpl $a7c8			bpl 	_FAHaveMax
.a7c5	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a7c8					_FAHaveMax:
.a7c8	20 1f a8	jsr $a81f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a7cb	e8		inx				inx
.a7cc	20 1f a8	jsr $a81f			jsr 	_FAShiftToExponent
.a7cf	ca		dex				dex
.a7d0					_FAExponentsEqual:
.a7d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a7d3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a7d6	30 10		bmi $a7e8			bmi 	_FADifferentSigns
.a7d8	20 92 94	jsr $9492			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a7db	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a7de	10 3c		bpl $a81c			bpl 	_FAExit 					; if no, we are done.
.a7e0	20 78 9e	jsr $9e78			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a7e3	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a7e6	80 34		bra $a81c			bra 	_FAExit
.a7e8					_FADifferentSigns:
.a7e8	20 b8 94	jsr $94b8			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a7eb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a7ee	10 2c		bpl $a81c			bpl 	_FAExit 					; if no, we are done.
.a7f0	20 01 9e	jsr $9e01			jsr 	NSMNegate 					; netate result
.a7f3	20 0a 9e	jsr $9e0a			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a7f6	80 24		bra $a81c			bra 	_FAExit
.a7f8					_FAReturn1:
.a7f8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a7fb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7fe	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a801	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a804	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a807	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a80a	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a80d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a810	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a813	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a816	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a819	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a81c					_FAExit:
.a81c	7a		ply				ply
.a81d	68		pla				pla
.a81e	60		rts				rts
.a81f					_FAShiftToExponent:
.a81f					_FAShiftToExponent2:
.a81f	98		tya				tya 								; compare Y to exponent
.a820	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a823	f0 08		beq $a82d			beq 	_FASEExit 					; exit if so.
.a825	20 78 9e	jsr $9e78			jsr 	NSMShiftRight	 			; shift the mantissa right
.a828	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a82b	80 f2		bra $a81f			bra 	_FAShiftToExponent2
.a82d					_FASEExit:
.a82d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a82e					CompareFloat:
.a82e	20 95 a7	jsr $a795			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a831	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a834	29 f8		and #$f8			and 	#$F8
.a836	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a839	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a83c	f0 09		beq $a847			beq 	_FCExit 					; zero, so approximately identical
.a83e	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a840	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a843	10 02		bpl $a847			bpl 	_FCExit
.a845					_FCNegative:
.a845	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a847					_FCExit:
.a847	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a848					FDivideCommand:
.a848	fa		plx				plx	 								; restore stack position
.a849	20 2e a9	jsr $a92e			jsr 	FloatPrepare 				; prepare for floats
.a84c					FloatDivide:
.a84c	48		pha				pha
.a84d	e8		inx				inx
.a84e	20 3f a9	jsr $a93f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a851	ca		dex				dex
.a852	c9 00		cmp #$00			cmp 	#0
.a854	f0 20		beq $a876			beq 	_FDZero
.a856	20 3f a9	jsr $a93f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a859	f0 19		beq $a874			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a85b	20 89 a6	jsr $a689			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a85e	20 16 a6	jsr $a616			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a861	20 3f a9	jsr $a93f			jsr		NSNormalise 				; renormalise
.a864	20 24 a7	jsr $a724			jsr 	CalculateSign 				; calculate result sign
.a867	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a86a	38		sec				sec
.a86b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a86e	38		sec				sec
.a86f	e9 1e		sbc #$1e			sbc 	#30
.a871	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a874					_FDExit:
.a874	68		pla				pla
.a875	60		rts				rts
.a876					_FDZero:
.a876	a9 03		lda #$03		lda	#3
.a878	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a87b					FloatFractionalPart:
.a87b	5a		phy				phy
.a87c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a87f	29 7f		and #$7f			and 	#$7F
.a881	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a884	20 3f a9	jsr $a93f			jsr 	NSNormalise
.a887	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a88a	38		sec				sec
.a88b	e9 e0		sbc #$e0			sbc 	#$E0
.a88d	90 31		bcc $a8c0			bcc 	_FFPExit 					; already fractional
.a88f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a891	b0 2a		bcs $a8bd			bcs 	_FFPZero
.a893	a8		tay				tay 								; put count to do in Y
.a894	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a897	20 c2 a8	jsr $a8c2			jsr 	_FFPPartial
.a89a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a89d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a8a0	20 c2 a8	jsr $a8c2			jsr 	_FFPPartial
.a8a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a8a6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a8a9	20 c2 a8	jsr $a8c2			jsr 	_FFPPartial
.a8ac	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8af	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a8b2	20 c2 a8	jsr $a8c2			jsr 	_FFPPartial
.a8b5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8b8	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; zeroed check.
.a8bb	d0 03		bne $a8c0			bne 	_FFPExit
.a8bd					_FFPZero:
.a8bd	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.a8c0					_FFPExit:
.a8c0	7a		ply				ply
.a8c1	60		rts				rts
.a8c2					_FFPPartial:
.a8c2	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a8c4	f0 17		beq $a8dd			beq 	_FFFPPExit
.a8c6	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a8c8	b0 0c		bcs $a8d6			bcs 	_FFFPPWholeByte
.a8ca	5a		phy				phy
.a8cb					_FFFPPLeft:
.a8cb	0a		asl a				asl 	a
.a8cc	88		dey				dey
.a8cd	d0 fc		bne $a8cb			bne 	_FFFPPLeft
.a8cf	7a		ply				ply
.a8d0					_FFFPPRight:
.a8d0	4a		lsr a				lsr 	a
.a8d1	88		dey				dey
.a8d2	d0 fc		bne $a8d0			bne 	_FFFPPRight
.a8d4	80 07		bra $a8dd			bra 	_FFFPPExit
.a8d6					_FFFPPWholeByte:
.a8d6	98		tya				tya 								; subtract 8 from count
.a8d7	38		sec				sec
.a8d8	e9 08		sbc #$08			sbc 	#8
.a8da	a8		tay				tay
.a8db	a9 00		lda #$00			lda 	#0 							; and clear all
.a8dd					_FFFPPExit:
.a8dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a8de					FloatIntegerPart:
.a8de	48		pha				pha
.a8df	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a8e2	f0 1f		beq $a903			beq 	_FIPExit 					; if so do nothing
.a8e4	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; is it zero ?
.a8e7	f0 17		beq $a900			beq 	_FIPZero 					; if so return zero.
.a8e9	20 3f a9	jsr $a93f			jsr 	NSNormalise 				; normalise
.a8ec	f0 12		beq $a900			beq 	_FIPZero 					; normalised to zero, exit zero
.a8ee					_FIPShift:
.a8ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a8f1	10 08		bpl $a8fb			bpl 	_FIPCheckZero
.a8f3	20 78 9e	jsr $9e78			jsr 	NSMShiftRight 				; shift mantissa right
.a8f6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a8f9	80 f3		bra $a8ee			bra 	_FIPShift
.a8fb					_FIPCheckZero:
.a8fb	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; avoid -0 problem
.a8fe	d0 03		bne $a903			bne 	_FIPExit 					; set to zero if mantissa zero.
.a900					_FIPZero:
.a900	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.a903					_FIPExit:
.a903	68		pla				pla
.a904	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a905					FloatingPointMultiply:
.a905	20 2e a9	jsr $a92e			jsr 	FloatPrepare 				; prepare for floats
.a908					FloatMultiply:
.a908	48		pha				pha
.a909	20 3f a9	jsr $a93f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a90c	f0 1b		beq $a929			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a90e	e8		inx				inx
.a90f	20 3f a9	jsr $a93f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a912	ca		dex				dex
.a913	c9 00		cmp #$00			cmp 	#0
.a915	f0 0f		beq $a926			beq 	_FDSetZero
.a917	20 df a6	jsr $a6df			jsr 	MultiplyShort 				; calculate the result.
.a91a	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a91d	18		clc				clc
.a91e	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a921	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a924	80 03		bra $a929			bra 	_FDExit
.a926					_FDSetZero:
.a926	20 55 9e	jsr $9e55			jsr 	NSMSetZero 					; return 0
.a929					_FDExit:
.a929	20 3f a9	jsr $a93f			jsr 	NSNormalise 				; normalise the result
.a92c	68		pla				pla
.a92d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a92e					FloatPrepare:
.a92e	20 b6 97	jsr $97b6			jsr 	DereferenceTopTwo 			; dereference the top two values
.a931	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a934	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a937	29 10		and #$10			and 	#NSBIsString
.a939	d0 01		bne $a93c			bne 	_FDType
.a93b	60		rts				rts
.a93c					_FDType:
.a93c	4c c6 ab	jmp $abc6			jmp 	TypeError
.a93f					NSNormalise:
.a93f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a942	29 80		and #$80			and 	#$80
.a944	09 08		ora #$08			ora 	#NSTFloat
.a946	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a949	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; if zero exit
.a94c	d0 09		bne $a957			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a94e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a951	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a954	a9 00		lda #$00			lda 	#0 							; set Z flag
.a956	60		rts				rts
.a957					_NSNormaliseOptimise:
.a957	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a95a	d0 22		bne $a97e			bne 	_NSNormaliseLoop
.a95c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a95f	30 1d		bmi $a97e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a961	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a964	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a967	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a96a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a96d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a970	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a973	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a976	38		sec				sec
.a977	e9 08		sbc #$08			sbc 	#8
.a979	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a97c	80 d9		bra $a957			bra 	_NSNormaliseOptimise
.a97e					_NSNormaliseLoop:
.a97e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a981	70 08		bvs $a98b			bvs 	_NSNExit 					; exit if so with Z flag clear
.a983	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; shift mantissa left
.a986	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a989	80 f3		bra $a97e			bra 	_NSNormaliseLoop
.a98b					_NSNExit:
.a98b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a98d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.96e3					AssignNumber:
.96e3	5a		phy				phy
.96e4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.96e7	85 36		sta $36				sta 	zTemp0
.96e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96ec	85 37		sta $37				sta 	zTemp0+1
.96ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.96f1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.96f3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96f6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.96f8	c9 08		cmp #$08			cmp 	#NSTFloat
.96fa	f0 2a		beq $9726			beq 	_ANFloat
.96fc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.96ff	f0 05		beq $9706			beq		_ANNotFloat
.9701	e8		inx				inx
.9702	20 de a8	jsr $a8de			jsr 	FloatIntegerPart 			; make it an integer
.9705	ca		dex				dex
.9706					_ANNotFloat:
.9706	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9709	29 03		and #$03			and 	#3
.970b	d0 05		bne $9712			bne 	_ANByteWord
.970d	20 32 97	jsr $9732			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9710	80 1e		bra $9730			bra 	_ANExit
.9712					_ANByteWord:
.9712	48		pha				pha 								; save count
.9713	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9716	92 36		sta ($36)			sta 	(zTemp0)
.9718	68		pla				pla
.9719	c9 01		cmp #$01			cmp	 	#1
.971b	f0 13		beq $9730			beq 	_ANExit
.971d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9720	a0 01		ldy #$01			ldy 	#1
.9722	91 36		sta ($36),y			sta 	(zTemp0),y
.9724	80 0a		bra $9730			bra 	_ANExit
.9726					_ANFloat:
.9726	20 32 97	jsr $9732			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9729	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.972c	a0 04		ldy #$04			ldy 	#4
.972e	91 36		sta ($36),y			sta 	(zTemp0),y
.9730					_ANExit:
.9730	7a		ply				ply
.9731	60		rts				rts
.9732					_ANCopy4PackSign:
.9732	a0 03		ldy #$03			ldy 	#3
.9734	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9737	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9739	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.973c	91 36		sta ($36),y			sta 	(zTemp0),y
.973e	88		dey				dey
.973f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9742	91 36		sta ($36),y			sta 	(zTemp0),y
.9744	88		dey				dey
.9745	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9748	91 36		sta ($36),y			sta 	(zTemp0),y
.974a	88		dey				dey
.974b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.974e	91 36		sta ($36),y			sta 	(zTemp0),y
.9750	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9751					AssignString:
.9751	5a		phy				phy
.9752	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9755	85 38		sta $38				sta 	zTemp1
.9757	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.975a	85 39		sta $39				sta 	zTemp1+1
.975c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.975f	85 36		sta $36				sta 	zTemp0
.9761	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9764	85 37		sta $37				sta 	zTemp0+1
.9766	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9768	b1 36		lda ($36),y			lda 	(zTemp0),y
.976a	f0 23		beq $978f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.976c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.976d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.976f	e9 02		sbc #$02			sbc 	#2
.9771	85 3c		sta $3c				sta 	zsTemp
.9773	a0 01		ldy #$01			ldy 	#1
.9775	b1 36		lda ($36),y			lda 	(zTemp0),y
.9777	e9 00		sbc #$00			sbc 	#0
.9779	85 3d		sta $3d				sta 	zsTemp+1
.977b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.977d					_ASGetLength:
.977d	c8		iny				iny
.977e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9780	d0 fb		bne $977d			bne 	_ASGetLength
.9782	98		tya				tya 								; is this length <= current length
.9783	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9785	90 20		bcc $97a7			bcc 	_ASCopyString
.9787	f0 1e		beq $97a7			beq 	_ASCopyString
.9789	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.978b	a0 01		ldy #$01			ldy 	#1
.978d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.978f					_ASNewStringRequired:
.978f	e8		inx				inx 								; concrete the new string.
.9790	20 61 ae	jsr $ae61			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9793	ca		dex				dex
.9794	18		clc				clc
.9795	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9798	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.979a	92 36		sta ($36)			sta 	(zTemp0)
.979c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.979f	69 00		adc #$00			adc 	#0
.97a1	a0 01		ldy #$01			ldy 	#1
.97a3	91 36		sta ($36),y			sta 	(zTemp0),y
.97a5	80 0d		bra $97b4			bra 	_ASExit
.97a7					_ASCopyString:
.97a7	a0 00		ldy #$00			ldy 	#0
.97a9					_ASCopyLoop:
.97a9	b1 38		lda ($38),y			lda 	(zTemp1),y
.97ab	c8		iny				iny
.97ac	c8		iny				iny
.97ad	91 3c		sta ($3c),y			sta 	(zsTemp),y
.97af	88		dey				dey
.97b0	c9 00		cmp #$00			cmp 	#0
.97b2	d0 f5		bne $97a9			bne 	_ASCopyLoop
.97b4					_ASExit:
.97b4	7a		ply				ply
.97b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.97b6					DereferenceTopTwo:
.97b6	e8		inx				inx
.97b7	20 bb 97	jsr $97bb			jsr 	Dereference 				; deref x+1
.97ba	ca		dex				dex  								; falls through to deref x
.97bb					Dereference:
.97bb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.97be	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.97c0	f0 57		beq $9819			beq 	_DRFExit 					; not a reference
.97c2	5a		phy				phy
.97c3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.97c6	85 36		sta $36				sta 	zTemp0
.97c8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97cb	85 37		sta $37				sta 	zTemp0+1
.97cd	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.97d0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.97d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.97d8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.97da	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.97dc	f0 0f		beq $97ed			beq 	_DRFDereferenceTwo
.97de	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.97e0	f0 39		beq $981b			beq 	_DRFFull
.97e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.97e5	29 03		and #$03			and 	#3
.97e7	f0 32		beq $981b			beq 	_DRFFull 					; the whole word
.97e9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.97eb	f0 07		beq $97f4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.97ed					_DRFDereferenceTwo:
.97ed	a0 01		ldy #$01			ldy 	#1
.97ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.97f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97f4					_DRFClear23:
.97f4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.97f7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.97fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.97fd	29 18		and #$18			and 	#NSBTypeMask
.97ff	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9802	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9804	d0 12		bne $9818			bne 	_DRFNotString
.9806	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9809	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.980c	d0 0a		bne $9818			bne 	_DRFNotString
.980e	a9 1a		lda #$1a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9810	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9813	a9 98		lda #$98			lda 	#_DRFNullString >> 8
.9815	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9818					_DRFNotString
.9818	7a		ply				ply 								; restore Y and exit
.9819					_DRFExit:
.9819	60		rts				rts
.981a					_DRFNullString:
>981a	00						.byte 	0
.981b					_DRFFull:
.981b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.981d	b1 36		lda ($36),y			lda 	(zTemp0),y
.981f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9822	c8		iny				iny
.9823	b1 36		lda ($36),y			lda 	(zTemp0),y
.9825	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9828	c8		iny				iny
.9829	b1 36		lda ($36),y			lda 	(zTemp0),y
.982b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.982e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9831	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9834	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9836	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9839	f0 06		beq $9841			beq 	_DRFNoExponent
.983b	c8		iny				iny 								; if not, read the exponent as well.
.983c	b1 36		lda ($36),y			lda 	(zTemp0),y
.983e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9841					_DRFNoExponent:
.9841	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9844	10 0d		bpl $9853			bpl 	_DRFExit2 					; if not, then exit.
.9846	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9848	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.984b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.984e	09 80		ora #$80			ora 	#NSBIsNegative
.9850	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9853					_DRFExit2:
.9853	7a		ply				ply
.9854	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9855					EncodeNumberStart:
.9855	38		sec				sec
.9856	80 01		bra $9859			bra 	EncodeNumberContinue+1
.9858					EncodeNumberContinue:
.9858	18		clc				clc
.9859					EncodeNumber:
.9859	08		php				php 								; save reset.
.985a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.985c	f0 12		beq $9870			beq 	_ENIsOkay
.985e	c9 30		cmp #$30			cmp 	#"0"
.9860	90 04		bcc $9866			bcc 	_ENBadNumber
.9862	c9 3a		cmp #$3a			cmp 	#"9"+1
.9864	90 0a		bcc $9870			bcc 	_ENIsOkay
.9866					_ENBadNumber:
.9866	28		plp				plp 								; throw saved reset
.9867	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.986a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.986c	f0 7e		beq $98ec			beq 	_ENConstructFinal
.986e					_ENFail:
.986e	18		clc				clc 								; not allowed
.986f	60		rts				rts
.9870					_ENIsOkay:
.9870	28		plp				plp 								; are we restarting
.9871	90 15		bcc $9888			bcc 	_ENNoRestart
.9873					_ENStartEncode:
.9873	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9875	f0 0c		beq $9883			beq 	_ENFirstDP
.9877	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9879	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.987c	a9 01		lda #$01			lda 	#ESTA_Low
.987e					_ENExitChange:
.987e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9881	38		sec				sec
.9882	60		rts				rts
.9883					_ENFirstDP:
.9883	20 55 9e	jsr $9e55			jsr 	NSMSetZero 					; clear integer part
.9886	80 3f		bra $98c7			bra 	_ESTASwitchFloat			; go straight to float and exi
.9888					_ENNoRestart:
.9888	48		pha				pha 								; save on stack.
.9889	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.988c	c9 01		cmp #$01			cmp 	#ESTA_Low
.988e	f0 09		beq $9899			beq  	_ESTALowState
.9890	c9 02		cmp #$02			cmp 	#ESTA_High
.9892	f0 29		beq $98bd			beq 	_ESTAHighState
.9894	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9896	f0 3b		beq $98d3			beq 	_ESTADecimalState
>9898	db						.byte 	$DB 						; causes a break in the emulator
.9899					_ESTALowState:
.9899	68		pla				pla 								; get value back
.989a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.989c	f0 29		beq $98c7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.989e	29 0f		and #$0f			and 	#15 						; make digit
.98a0	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.98a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.98a6	0a		asl a				asl 	a
.98a7	0a		asl a				asl 	a
.98a8	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.98ab	0a		asl a				asl 	a
.98ac	6d 86 04	adc $0486			adc 	DigitTemp
.98af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98b2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.98b4	90 05		bcc $98bb			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.98b6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.98b8	8d 85 04	sta $0485			sta 	EncodeState
.98bb					_ESTANoSwitch:
.98bb	38		sec				sec
.98bc	60		rts				rts
.98bd					_ESTAHighState:
.98bd	68		pla				pla 								; get value back
.98be	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.98c0	f0 05		beq $98c7			beq 	_ESTASwitchFloat
.98c2	20 26 99	jsr $9926			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.98c5	38		sec				sec
.98c6	60		rts				rts
.98c7					_ESTASwitchFloat:
.98c7	9c 87 04	stz $0487			stz 	DecimalCount
.98ca	e8		inx				inx 								; zero the decimal additive.
.98cb	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.98ce	ca		dex				dex
.98cf	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.98d1	80 ab		bra $987e			bra 	_ENExitChange
.98d3					_ESTADecimalState:
.98d3	68		pla				pla 								; digit.
.98d4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.98d6	f0 96		beq $986e			beq 	_ENFail
.98d8	e8		inx				inx 								; put digit into fractional part of X+1
.98d9	20 26 99	jsr $9926			jsr 	ESTAShiftDigitIntoMantissa
.98dc	ca		dex				dex
.98dd	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.98e0	ad 87 04	lda $0487			lda 	DecimalCount
.98e3	c9 0b		cmp #$0b			cmp 	#11
.98e5	f0 02		beq $98e9			beq 	_ESTADSFail
.98e7	38		sec				sec
.98e8	60		rts				rts
.98e9					_ESTADSFail:
.98e9	4c c1 ab	jmp $abc1			jmp 	RangeError
.98ec					_ENConstructFinal:
.98ec	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.98ef	f0 33		beq $9924			beq 	_ENCFExit 					; no decimals
.98f1	5a		phy				phy
.98f2	0a		asl a				asl 	a 							; x 4 and CLC
.98f3	0a		asl a				asl 	a
.98f4	6d 87 04	adc $0487			adc 	DecimalCount
.98f7	a8		tay				tay
.98f8	b9 80 ab	lda $ab80,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98fb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.98fe	b9 81 ab	lda $ab81,y			lda 	DecimalScalarTable-5+1,y
.9901	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9904	b9 82 ab	lda $ab82,y			lda 	DecimalScalarTable-5+2,y
.9907	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.990a	b9 83 ab	lda $ab83,y			lda 	DecimalScalarTable-5+3,y
.990d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9910	b9 84 ab	lda $ab84,y			lda 	DecimalScalarTable-5+4,y
.9913	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9916	a9 08		lda #$08			lda 	#NSTFloat
.9918	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.991b	7a		ply				ply
.991c	e8		inx				inx 								; multiply decimal const by decimal scalar
.991d	20 08 a9	jsr $a908			jsr 	FloatMultiply
.9920	ca		dex				dex
.9921	20 9d a7	jsr $a79d			jsr 	FloatAdd 					; add to integer part.
.9924					_ENCFExit:
.9924	18		clc				clc 								; reject the digit.
.9925	60		rts				rts
.9926					ESTAShiftDigitIntoMantissa:
.9926	29 0f		and #$0f			and 	#15 						; save digit
.9928	48		pha				pha
.9929	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.992c	48		pha				pha
.992d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9930	48		pha				pha
.9931	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9934	48		pha				pha
.9935	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9938	48		pha				pha
.9939	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 2
.993c	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 4
.993f	18		clc				clc 								; pop mantissa and add
.9940	68		pla				pla
.9941	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9944	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9947	68		pla				pla
.9948	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.994b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.994e	68		pla				pla
.994f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9952	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9955	68		pla				pla
.9956	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9959	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.995c	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 10
.995f	68		pla				pla 								; add digit
.9960	18		clc				clc
.9961	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9964	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9967	90 0d		bcc $9976			bcc 	_ESTASDExit
.9969	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.996c	d0 08		bne $9976			bne 	_ESTASDExit
.996e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9971	d0 03		bne $9976			bne 	_ESTASDExit
.9973	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9976					_ESTASDExit:
.9976	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9977					EvaluateTerm:
.9977	b1 30		lda ($30),y			lda 	(codePtr),y
.9979	30 18		bmi $9993			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.997b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.997d	b0 6f		bcs $99ee			bcs 	_ETVariable
.997f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9981	90 6e		bcc $99f1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9983	c9 3a		cmp #$3a			cmp 	#'9'+1
.9985	b0 6a		bcs $99f1			bcs 	_ETPuncUnary
.9987	20 55 98	jsr $9855			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.998a					_ETNumber:
.998a	c8		iny				iny 								; keep encoding until we have the numbers
.998b	b1 30		lda ($30),y			lda 	(codePtr),y
.998d	20 58 98	jsr $9858			jsr 	EncodeNumberContinue
.9990	b0 f8		bcs $998a			bcs 	_ETNumber 					; go back if accepted.
.9992	60		rts				rts
.9993					_ETCheckUnary:
.9993	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9995	f0 41		beq $99d8			beq 	_ETString
.9997	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9999	f0 12		beq $99ad			beq 	_ETHexConstant
.999b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.999d	90 0b		bcc $99aa			bcc 	_ETSyntaxError
.999f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.99a1	b0 07		bcs $99aa			bcs 	_ETSyntaxError
.99a3	da		phx				phx 								; push X on the stack
.99a4	0a		asl a				asl 	a 							; put vector x 2 into X
.99a5	aa		tax				tax
.99a6	c8		iny				iny 								; consume unary function token
.99a7	7c 64 8f	jmp ($8f64,x)			jmp 	(VectorSet0,x) 				; and do it.
.99aa					_ETSyntaxError:
.99aa	4c bc ab	jmp $abbc			jmp 	SyntaxError
.99ad					_ETHexConstant:
.99ad	c8		iny				iny 								; skip #
.99ae	c8		iny				iny 								; skip count
.99af	20 55 9e	jsr $9e55			jsr 	NSMSetZero 					; clear result
.99b2					_ETHLoop:
.99b2	b1 30		lda ($30),y			lda 	(codePtr),y
.99b4	c8		iny				iny 								; and consume
.99b5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.99b7	f0 1e		beq $99d7			beq 	_ETHExit
.99b9	48		pha				pha 								; save on stack.
.99ba	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 2
.99bd	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 4
.99c0	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 8
.99c3	20 6a 9e	jsr $9e6a			jsr 	NSMShiftLeft 				; x 16
.99c6	68		pla				pla 								; ASCII
.99c7	c9 41		cmp #$41			cmp 	#'A'
.99c9	90 02		bcc $99cd			bcc 	_ETHNotChar
.99cb	e9 07		sbc #$07			sbc 	#7
.99cd					_ETHNotChar:
.99cd	29 0f		and #$0f			and 	#15 						; digit now
.99cf	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.99d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99d5	80 db		bra $99b2			bra 	_ETHLoop 					; go round.
.99d7					_ETHExit:
.99d7	60		rts				rts
.99d8					_ETString:
.99d8	c8		iny				iny 								; look at length
.99d9	b1 30		lda ($30),y			lda 	(codePtr),y
.99db	48		pha				pha
.99dc	c8		iny				iny 								; first character
.99dd	20 9f 9e	jsr $9e9f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.99e0	68		pla				pla 								; restore count and save
.99e1	85 36		sta $36				sta 	zTemp0
.99e3	98		tya				tya 								; add length to Y to skip it.
.99e4	18		clc				clc
.99e5	65 36		adc $36				adc 	zTemp0
.99e7	a8		tay				tay
.99e8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.99ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99ed	60		rts				rts
.99ee					_ETVariable:
.99ee	4c 48 9a	jmp $9a48			jmp 	VariableHandler
.99f1					_ETPuncUnary:
.99f1	c8		iny				iny 								; consume the unary character
.99f2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.99f4	f0 2d		beq $9a23			beq 	_ETUnaryNegate
.99f6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.99f8	f0 39		beq $9a33			beq 	_ETDereference
.99fa	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99fc	f0 43		beq $9a41			beq 	_ETParenthesis
.99fe	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9a00	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9a02	f0 06		beq $9a0a			beq 	_ETIndirection
.9a04	e6 36		inc $36				inc 	zTemp0
.9a06	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9a08	d0 a0		bne $99aa			bne 	_ETSyntaxError
.9a0a					_ETIndirection:
.9a0a	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9a0c	1a		inc a				inc 	a
.9a0d	48		pha				pha
.9a0e	20 77 99	jsr $9977			jsr 	EvaluateTerm				; evaluate the term
.9a11	20 bb 97	jsr $97bb			jsr 	Dereference 				; dereference it.
.9a14	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9a17	d0 07		bne $9a20			bne 	_ETTypeMismatch
.9a19	68		pla				pla 								; indirection 1-2
.9a1a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9a1c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a1f	60		rts				rts
.9a20					_ETTypeMismatch:
.9a20	4c c6 ab	jmp $abc6			jmp 	TypeError
.9a23					_ETUnaryNegate:
.9a23	20 77 99	jsr $9977			jsr 	EvaluateTerm				; evaluate the term
.9a26	20 bb 97	jsr $97bb			jsr 	Dereference 				; dereference it.
.9a29	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9a2c	29 10		and #$10			and 	#NSTString
.9a2e	d0 f0		bne $9a20			bne 	_ETTypeMismatch
.9a30	4c 01 9e	jmp $9e01			jmp 	NSMNegate  					; just toggles the sign bit.
.9a33					_ETDereference:
.9a33	20 77 99	jsr $9977			jsr 	EvaluateTerm				; evaluate the term
.9a36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9a39	29 20		and #$20			and 	#NSBIsReference
.9a3b	f0 e3		beq $9a20			beq 	_ETTypeMismatch
.9a3d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9a40	60		rts				rts
.9a41					_ETParenthesis:
.9a41	20 a6 96	jsr $96a6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9a44	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; check for )
.9a47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9a48					VariableHandler:
.9a48	b1 30		lda ($30),y			lda 	(codePtr),y
.9a4a	18		clc				clc
.9a4b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a4d	85 37		sta $37				sta 	zTemp0+1
.9a4f	c8		iny				iny
.9a50	b1 30		lda ($30),y			lda 	(codePtr),y
.9a52	85 36		sta $36				sta 	zTemp0
.9a54	c8		iny				iny
.9a55	18		clc				clc									; copy variable address+3 to mantissa
.9a56	69 03		adc #$03			adc 	#3
.9a58	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a5b	a5 37		lda $37				lda 	zTemp0+1
.9a5d	69 00		adc #$00			adc 	#0
.9a5f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a62	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9a65	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a68	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a6b	5a		phy				phy
.9a6c	a0 02		ldy #$02			ldy 	#2 							; read type
.9a6e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a70	7a		ply				ply
.9a71	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a73	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a75	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a78	29 04		and #$04			and 	#NSBIsArray
.9a7a	d0 01		bne $9a7d			bne 	_VHArray
.9a7c	60		rts				rts
.9a7d					_VHArray:
.9a7d	e8		inx				inx
.9a7e	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a81	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a83	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a86	b1 30		lda ($30),y			lda 	(codePtr),y
.9a88	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a8a	d0 06		bne $9a92			bne 	_VHNoSecondIndex
.9a8c	c8		iny				iny 								; skip the comma
.9a8d	e8		inx				inx
.9a8e	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a91	ca		dex				dex
.9a92					_VHNoSecondIndex:
.9a92	ca		dex				dex 								; set X back.
.9a93	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; and check the right bracket.
.9a96	5a		phy				phy 								; save position
.9a97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9a9a	85 3e		sta $3e				sta 	zaTemp
.9a9c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a9f	85 3f		sta $3f				sta 	zaTemp+1
.9aa1	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9aa3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aa5	f0 02		beq $9aa9			beq 	_VHHas2Mask
.9aa7	a9 ff		lda #$ff			lda 	#$FF
.9aa9					_VHHas2Mask:
.9aa9	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9aac	f0 54		beq $9b02			beq 	_VHBadIndex
.9aae	0a		asl a				asl 	a 							; carry will be set if a second index
.9aaf	90 09		bcc $9aba			bcc 	_VHCheckFirstIndex
.9ab1	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ab3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ab5	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9ab8	90 48		bcc $9b02			bcc 	_VHBadIndex
.9aba					_VHCheckFirstIndex:
.9aba	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9abc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9abe	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9ac1	90 3f		bcc $9b02			bcc 	_VHBadIndex
.9ac3	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9ac5	64 37		stz $37				stz 	zTemp0+1
.9ac7	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9aca	30 0f		bmi $9adb			bmi 	_VHNoMultiply
.9acc	da		phx				phx
.9acd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9ad0	48		pha				pha
.9ad1	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9ad3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ad5	1a		inc a				inc 	a 							; add 1 for zero base
.9ad6	fa		plx				plx
.9ad7	20 58 aa	jsr $aa58			jsr 	Multiply8x8 				; calculate -> Z0
.9ada	fa		plx				plx
.9adb					_VHNoMultiply:
.9adb	18		clc				clc
.9adc	a5 36		lda $36				lda 	zTemp0
.9ade	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ae1	85 36		sta $36				sta 	zTemp0
.9ae3	a5 37		lda $37				lda 	zTemp0+1
.9ae5	69 00		adc #$00			adc 	#0
.9ae7	85 37		sta $37				sta 	zTemp0+1
.9ae9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9aec	20 c9 89	jsr $89c9			jsr 	ScaleByBaseType
.9aef	18		clc				clc
.9af0	b2 3e		lda ($3e)			lda 	(zaTemp)
.9af2	65 36		adc $36				adc 	zTemp0
.9af4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9af7	a0 01		ldy #$01			ldy 	#1
.9af9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9afb	65 37		adc $37				adc 	zTemp0+1
.9afd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b00	7a		ply				ply 								; restore position
.9b01	60		rts				rts
.9b02					_VHBadIndex:
.9b02	a9 17		lda #$17		lda	#23
.9b04	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a98e					AbsUnary:
.a98e	fa		plx				plx 								; restore stack pos
.a98f	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; get a float or int
.a992	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a995	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a998	29 7f		and #$7f			and 	#$7F
.a99a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a99d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9b07					AllocUnary:
.9b07	fa		plx				plx 								; restore stack pos
.9b08	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger		; get bytes required.
.9b0b	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.9b0e	da		phx				phx 								; save X/Y
.9b0f	5a		phy				phy
.9b10	8a		txa				txa 								; copy X into Y
.9b11	a8		tay				tay
.9b12	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9b15	aa		tax				tax
.9b16	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9b19	20 26 9b	jsr $9b26			jsr 	AllocateXABytes 			; allocate memory
.9b1c	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9b1f	8a		txa				txa
.9b20	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9b23	7a		ply				ply
.9b24	fa		plx				plx
.9b25	60		rts				rts
.9b26					AllocateXABytes:
.9b26	5a		phy				phy
.9b27	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9b2a	84 36		sty $36				sty 	zTemp0
.9b2c	5a		phy				phy
.9b2d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9b30	84 37		sty $37				sty 	zTemp0+1
.9b32	5a		phy				phy
.9b33	18		clc				clc 								; add to low memory pointer
.9b34	6d 8c 04	adc $048c			adc 	lowMemPtr
.9b37	8d 8c 04	sta $048c			sta 	lowMemPtr
.9b3a	8a		txa				txa
.9b3b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9b3e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9b41	b0 2f		bcs $9b72			bcs 	CISSMemory
.9b43	20 64 9b	jsr $9b64			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9b46					_ClearMemory:
.9b46	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9b49	c5 36		cmp $36				cmp 	zTemp0
.9b4b	d0 07		bne $9b54			bne 	_CMClearNext
.9b4d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9b50	c5 37		cmp $37				cmp 	zTemp0+1
.9b52	f0 0c		beq $9b60			beq 	_CMExit
.9b54					_CMClearNext:
.9b54	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b56	92 36		sta ($36)			sta 	(zTemp0)
.9b58	e6 36		inc $36				inc 	zTemp0
.9b5a	d0 ea		bne $9b46			bne 	_ClearMemory
.9b5c	e6 37		inc $37				inc		zTemp0+1
.9b5e	80 e6		bra $9b46			bra 	_ClearMemory
.9b60					_CMExit:
.9b60	fa		plx				plx
.9b61	68		pla				pla
.9b62	7a		ply				ply
.9b63	60		rts				rts
.9b64					CheckIdentifierStringSpace:
.9b64	48		pha				pha
.9b65	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b68	18		clc				clc
.9b69	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b6b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b6e	b0 02		bcs $9b72			bcs 	CISSMemory
.9b70	68		pla				pla
.9b71	60		rts				rts
.9b72					CISSMemory:
.9b72	a9 06		lda #$06		lda	#6
.9b74	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a99e					AscUnary:
.a99e	fa		plx				plx 								; restore stack pos
.a99f	20 b4 9d	jsr $9db4			jsr 	EvaluateString 				; get a string
.a9a2	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a9a4	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.a9a7	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a9aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a9ab					FracUnary:
.a9ab	fa		plx				plx 								; restore stack pos
.a9ac	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; get a float or int
.a9af	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a9b2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9b5	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9b7	f0 04		beq $a9bd			beq 	_IUZero
.a9b9	20 7b a8	jsr $a87b			jsr 	FloatFractionalPart
.a9bc	60		rts				rts
.a9bd					_IUZero:
.a9bd	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.a9c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a9c1					IntUnary:
.a9c1	fa		plx				plx 								; restore stack pos
.a9c2	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; get a float or int
.a9c5	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a9c8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a9cb	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9cd	f0 03		beq $a9d2			beq 	_IUExit
.a9cf	20 de a8	jsr $a8de			jsr 	FloatIntegerPart
.a9d2					_IUExit:
.a9d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a9d3					LenUnary:
.a9d3	fa		plx				plx 								; restore stack pos
.a9d4	20 b4 9d	jsr $9db4			jsr 	EvaluateString 				; get a string
.a9d7	5a		phy				phy
.a9d8	a0 00		ldy #$00			ldy 	#0 							; find length
.a9da					_LenFind:
.a9da	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9dc	f0 06		beq $a9e4			beq 	_LenExit
.a9de	c8		iny				iny
.a9df	d0 f9		bne $a9da			bne 	_LenFind
.a9e1	4c c1 ab	jmp $abc1			jmp 	RangeError 					; string > 255
.a9e4					_LenExit:
.a9e4	98		tya				tya
.a9e5	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.a9e8	7a		ply				ply
.a9e9	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a9ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b77					Unary_Not:
.9b77	fa		plx				plx
.9b78	20 cc 9d	jsr $9dcc			jsr 	EvaluateInteger 			; get integer
.9b7b	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.9b7e	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; zero mantissa ?
.9b81	f0 04		beq $9b87			beq 	_NotZero
.9b83	20 55 9e	jsr $9e55			jsr 	NSMSetZero
.9b86	60		rts				rts
.9b87					_NotZero:
.9b87	4c 0a 93	jmp $930a			jmp 	ReturnTrue
.9b8a					_UNBad:
.9b8a	4c cb ab	jmp $abcb			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b8d					Unary_Random:
.9b8d	fa		plx				plx
.9b8e	20 06 9c	jsr $9c06			jsr 	Random32Bit 				; get a random number
.9b91	20 eb 9b	jsr $9beb			jsr 	URCopyToMantissa  			; put in mantissa
.9b94	e8		inx				inx
.9b95	20 e1 9d	jsr $9de1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b98	ca		dex				dex
.9b99	20 5a a6	jsr $a65a			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9b9c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9b9f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ba2	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.9ba5	60		rts				rts
.9ba6					Unary_Rnd:
.9ba6	fa		plx				plx
.9ba7	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; number to use.
.9baa	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; closing bracket
.9bad	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9bb0	f0 2b		beq $9bdd			beq 	_URCopySeed
.9bb2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9bb5	10 23		bpl $9bda			bpl 	_URDontSeed
.9bb7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9bba	49 17		eor #$17			eor 	#$17
.9bbc	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bbf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bc2	49 a5		eor #$a5			eor 	#$A5
.9bc4	8d 89 04	sta $0489			sta 	RandomSeed+1
.9bc7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bca	49 c2		eor #$c2			eor 	#$C2
.9bcc	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9bcf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9bd2	49 9d		eor #$9d			eor 	#$9D
.9bd4	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9bd7	20 06 9c	jsr $9c06			jsr 	Random32Bit
.9bda					_URDontSeed:
.9bda	20 06 9c	jsr $9c06			jsr 	Random32Bit 				; generate a number.
.9bdd					_URCopySeed:
.9bdd	20 eb 9b	jsr $9beb			jsr 	URCopyToMantissa 			; copy into mantissa
.9be0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9be2	8d 28 04	sta $0428			sta 	NSExponent
.9be5	a9 08		lda #$08			lda 	#NSTFloat
.9be7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9bea	60		rts				rts
.9beb					URCopyToMantissa:
.9beb	ad 88 04	lda $0488			lda 	RandomSeed+0
.9bee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bf1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9bf4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bf7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9bfa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bfd	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9c00	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9c02	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c05	60		rts				rts
.9c06					Random32Bit:
.9c06	5a		phy				phy
.9c07	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9c09	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9c0c	d0 03		bne $9c11			bne 	_Random1
.9c0e	a8		tay				tay 								; if so do it 256 times
.9c0f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9c11					_Random1:
.9c11	0a		asl a				asl 	a 							; LSFR RNG
.9c12	2e 89 04	rol $0489			rol 	RandomSeed+1
.9c15	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9c18	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9c1b	90 02		bcc $9c1f			bcc 	_Random2
.9c1d	49 c5		eor #$c5			eor 	#$C5
.9c1f					_Random2:
.9c1f	88		dey				dey
.9c20	d0 ef		bne $9c11			bne 	_Random1
.9c22	8d 88 04	sta $0488			sta 	RandomSeed+0
.9c25	7a		ply				ply
.9c26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a9ed					SgnUnary:
.a9ed	fa		plx				plx 								; restore stack pos
.a9ee	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber 				; get a float or int
.a9f1	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.a9f4	20 85 9e	jsr $9e85			jsr 	NSMIsZero 					; if zero
.a9f7	f0 10		beq $aa09			beq 	_SGZero  					; return Int Zero
.a9f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a9fc	48		pha				pha
.a9fd	a9 01		lda #$01			lda 	#1 							; set to 1
.a9ff	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.aa02	68		pla				pla
.aa03	29 80		and #$80			and		#$80 						; copy the sign byte out
.aa05	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa08	60		rts				rts
.aa09	20 55 9e	jsr $9e55	_SGZero:jsr 	NSMSetZero
.aa0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aa0d					ValUnary:
.aa0d	fa		plx				plx 								; restore stack pos
.aa0e	20 23 aa	jsr $aa23			jsr 	ValMainCode 				; do the main val() code
.aa11	b0 01		bcs $aa14			bcs 	_VUError 					; couldn't convert
.aa13	60		rts				rts
.aa14					_VUError:
.aa14	4c c6 ab	jmp $abc6			jmp 	TypeError
.aa17					IsValUnary:
.aa17	fa		plx				plx 								; restore stack pos
.aa18	20 23 aa	jsr $aa23			jsr 	ValMainCode 				; do the main val() code
.aa1b	b0 03		bcs $aa20			bcs 	_VUBad
.aa1d	4c 0a 93	jmp $930a			jmp 	ReturnTrue
.aa20					_VUBad:
.aa20	4c 16 93	jmp $9316			jmp 	ReturnFalse
.aa23					ValMainCode:
.aa23	20 b4 9d	jsr $9db4			jsr 	EvaluateString 				; get a string
.aa26	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; check right bracket present
.aa29	5a		phy				phy
.aa2a	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.aa2c	f0 17		beq $aa45			beq 	_VMCFail2
.aa2e	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aa30	48		pha				pha 								; save first character
.aa31	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.aa33	d0 01		bne $aa36			bne 	_VMCStart
.aa35	c8		iny				iny 								; skip over -
.aa36					_VMCStart:
.aa36	38		sec				sec 								; initialise first time round.
.aa37					_VMCNext:
.aa37	c8		iny				iny 								; pre-increment
.aa38	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.aa3a	f0 0c		beq $aa48			beq 	_VMCSuccess 				; successful.
.aa3c	20 59 98	jsr $9859			jsr 	EncodeNumber 				; send it to the number-builder
.aa3f	90 03		bcc $aa44			bcc 	_VMCFail 					; if failed, give up.
.aa41	18		clc				clc 								; next time round, countinue
.aa42	80 f3		bra $aa37			bra 	_VMCNext
.aa44					_VMCFail:
.aa44	68		pla				pla
.aa45					_VMCFail2:
.aa45	7a		ply				ply
.aa46	38		sec				sec
.aa47	60		rts				rts
.aa48					_VMCSuccess:
.aa48	a9 00		lda #$00			lda 	#0 							; construct final
.aa4a	20 59 98	jsr $9859			jsr 	EncodeNumber
.aa4d	68		pla				pla
.aa4e	c9 2d		cmp #$2d			cmp 	#"-"
.aa50	d0 03		bne $aa55			bne 	_VMCNotNegative
.aa52	20 01 9e	jsr $9e01			jsr		NSMNegate
.aa55					_VMCNotNegative:
.aa55	7a		ply				ply
.aa56	18		clc				clc
.aa57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c27					ChrUnary:
.9c27	fa		plx				plx 								; restore stack pos
.9c28	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger			; get value
.9c2b	48		pha				pha
.9c2c	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.9c2f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c31	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate
.9c34	68		pla				pla 								; write number to it
.9c35	20 20 af	jsr $af20			jsr 	StringTempWrite
.9c38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c39					SpcUnary:
.9c39	fa		plx				plx 								; restore stack pos
.9c3a	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger			; get value
.9c3d	5a		phy				phy
.9c3e	48		pha				pha 								; save count
.9c3f	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate
.9c42	7a		ply				ply 								; to do count in Y
.9c43					_SpcLoop:
.9c43	c0 00		cpy #$00			cpy 	#0
.9c45	f0 08		beq $9c4f			beq 	_SpcExit
.9c47	a9 20		lda #$20			lda 	#32
.9c49	20 20 af	jsr $af20			jsr 	StringTempWrite
.9c4c	88		dey				dey
.9c4d	80 f4		bra $9c43			bra 	_SPCLoop
.9c4f					_SpcExit:
.9c4f	7a		ply				ply
.9c50	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket
.9c53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c54					Unary_Str:
.9c54	fa		plx				plx
.9c55	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber  			; get number
.9c58	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; closing bracket
.9c5b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c5d	20 76 9c	jsr $9c76			jsr 	ConvertNumberToString 		; do the conversion.
.9c60	a9 21		lda #$21			lda		#33 						; create buffer
.9c62	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate 			; allocate memory
.9c65	da		phx				phx
.9c66	a2 00		ldx #$00			ldx 	#0
.9c68					_USCopy:
.9c68	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c6b	20 20 af	jsr $af20			jsr 	StringTempWrite
.9c6e	e8		inx				inx
.9c6f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c72	d0 f4		bne $9c68			bne 	_USCopy
.9c74	fa		plx				plx
.9c75	60		rts				rts
.9c76					ConvertNumberToString:
.9c76	5a		phy				phy 								; save code position
.9c77	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c7a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c7d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c80	10 0a		bpl $9c8c			bpl 	_CNTSNotNegative
.9c82	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c84	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c87	a9 2d		lda #$2d			lda 	#"-"
.9c89	20 f2 9c	jsr $9cf2			jsr 	WriteDecimalBuffer
.9c8c					_CNTSNotNegative:
.9c8c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c8f	f0 15		beq $9ca6			beq 	_CNTSNotFloat
.9c91	e8		inx				inx 								; round up
.9c92	a9 01		lda #$01			lda 	#1
.9c94	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.9c97	ca		dex				dex
.9c98	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c9b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c9e	a9 08		lda #$08			lda 	#NSTFloat
.9ca0	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9ca3	20 9d a7	jsr $a79d			jsr 	FloatAdd
.9ca6					_CNTSNotFloat:
.9ca6	20 d4 9c	jsr $9cd4			jsr 	MakePlusTwoString
.9ca9	20 7b a8	jsr $a87b			jsr 	FloatFractionalPart 		; get the fractional part
.9cac	20 3f a9	jsr $a93f			jsr 	NSNormalise					; normalise , exit if zero
.9caf	f0 21		beq $9cd2			beq 	_CNTSExit
.9cb1	a9 2e		lda #$2e			lda 	#"."
.9cb3	20 f2 9c	jsr $9cf2			jsr 	WriteDecimalBuffer 			; write decimal place
.9cb6					_CNTSDecimal:
.9cb6	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9cb9	30 17		bmi $9cd2			bmi 	_CNTSExit
.9cbb	e8		inx				inx 								; x 10.0
.9cbc	a9 0a		lda #$0a			lda 	#10
.9cbe	20 57 9e	jsr $9e57			jsr 	NSMSetByte
.9cc1	a9 08		lda #$08			lda 	#NSTFloat
.9cc3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cc6	ca		dex				dex
.9cc7	20 08 a9	jsr $a908			jsr 	FloatMultiply
.9cca	20 d4 9c	jsr $9cd4			jsr 	MakePlusTwoString
.9ccd	20 7b a8	jsr $a87b			jsr 	FloatFractionalPart 		; get the fractional part
.9cd0	80 e4		bra $9cb6			bra 	_CNTSDecimal 				; keep going.
.9cd2					_CNTSExit:
.9cd2	7a		ply				ply
.9cd3	60		rts				rts
.9cd4					MakePlusTwoString:
.9cd4	da		phx				phx
.9cd5	20 2c 9e	jsr $9e2c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9cd8	e8		inx				inx 								; access it
.9cd9	e8		inx				inx
.9cda	20 de a8	jsr $a8de			jsr 	FloatIntegerPart 			; make it an integer
.9cdd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9cdf	20 47 a7	jsr $a747			jsr 	ConvertInt32
.9ce2	a2 00		ldx #$00			ldx	 	#0
.9ce4					_MPTSCopy:
.9ce4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9ce7	20 f2 9c	jsr $9cf2			jsr 	WriteDecimalBuffer
.9cea	e8		inx				inx
.9ceb	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9cee	d0 f4		bne $9ce4			bne 	_MPTSCopy
.9cf0	fa		plx				plx
.9cf1	60		rts				rts
.9cf2					WriteDecimalBuffer:
.9cf2	da		phx				phx
.9cf3	ae 95 04	ldx $0495			ldx 	dbOffset
.9cf6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9cf9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9cfc	ee 95 04	inc $0495			inc 	dbOffset
.9cff	fa		plx				plx
.9d00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d01					Unary_Left:
.9d01	fa		plx				plx
.9d02	18		clc				clc 								; only one parameter
.9d03	20 78 9d	jsr $9d78			jsr 	SubstringInitial 			; set up.
.9d06	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d09	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d0c	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d0f	80 2c		bra $9d3d			bra 	SubstringMain
.9d11					Unary_Right:
.9d11	fa		plx				plx
.9d12	18		clc				clc 								; only one parameter
.9d13	20 78 9d	jsr $9d78			jsr 	SubstringInitial 			; set up.
.9d16	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d19	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d1c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9d1f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d22	b0 02		bcs $9d26			bcs 	_URNotUnderflow
.9d24	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d26					_URNotUnderFlow:
.9d26	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d29	80 12		bra $9d3d			bra 	SubStringMain
.9d2b					Unary_Mid:
.9d2b	fa		plx				plx
.9d2c	38		sec				sec 								; two parameters
.9d2d	20 78 9d	jsr $9d78			jsr 	SubstringInitial 			; set up.
.9d30	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d33	f0 05		beq $9d3a			beq 	_UMError
.9d35	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d38	80 03		bra $9d3d			bra 	SubStringMain
.9d3a					_UMError:
.9d3a	4c cb ab	jmp $abcb			jmp 	ArgumentError
.9d3d					SubStringMain:
.9d3d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d40	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9d43	b0 2d		bcs $9d72			bcs 	_SSMNull 					; if so, return an empty string.
.9d45	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d48	f0 28		beq $9d72			beq 	_SSMNull 					; return empty string.
.9d4a	18		clc				clc 								; add the offset +1 to the address and
.9d4b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9d4e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d51	85 36		sta $36				sta 	zTemp0
.9d53	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9d56	69 00		adc #$00			adc 	#0
.9d58	85 37		sta $37				sta 	zTemp0+1
.9d5a					_SSMNoCarry:
.9d5a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d5d	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate 			; allocate that many characters
.9d60	5a		phy				phy 								; save Y
.9d61	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d63					_SSMCopy:
.9d63	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d65	f0 09		beq $9d70			beq 	_SSMEString 				; no more to copy
.9d67	20 20 af	jsr $af20			jsr 	StringTempWrite 			; and write it out.
.9d6a	c8		iny				iny
.9d6b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d6e	d0 f3		bne $9d63			bne 	_SSMCopy
.9d70					_SSMEString:
.9d70	7a		ply				ply
.9d71					_SSMExit:
.9d71	60		rts				rts
.9d72					_SSMNull:
.9d72	a9 00		lda #$00			lda 	#0
.9d74	20 e2 ae	jsr $aee2			jsr 	StringTempAllocate
.9d77	60		rts				rts
.9d78					SubstringInitial:
.9d78	da		phx				phx 								; save initial stack position
.9d79	08		php				php 								; save carry on stack indicating 2 parameters
.9d7a	20 b4 9d	jsr $9db4			jsr 	EvaluateString 				; get a string
.9d7d	5a		phy				phy 								; calculate length to exponent.
.9d7e	a0 ff		ldy #$ff			ldy 	#$FF
.9d80					_SIFindLength:
.9d80	c8		iny				iny
.9d81	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d83	d0 fb		bne $9d80			bne 	_SIFindLength
.9d85	98		tya				tya
.9d86	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d89	7a		ply				ply
.9d8a	e8		inx				inx
.9d8b	20 de a5	jsr $a5de			jsr 	CheckComma 					; comma next
.9d8e	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; get next parameter
.9d91	28		plp				plp 								; is it the last parameter ?
.9d92	90 07		bcc $9d9b			bcc 	_SSIExit 					; if so, exit.
.9d94	e8		inx				inx
.9d95	20 de a5	jsr $a5de			jsr 	CheckComma 					; comma next
.9d98	20 ed 9d	jsr $9ded			jsr 	Evaluate8BitInteger 		; get last parameter
.9d9b					_SSIExit:
.9d9b	fa		plx				plx
.9d9c	20 d6 a5	jsr $a5d6			jsr 	CheckRightBracket 			; check closing bracket
.9d9f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9da0					EvaluateValue:
.9da0	48		pha				pha
.9da1	20 a6 96	jsr $96a6			jsr		EvaluateExpression 			; expression
.9da4	20 bb 97	jsr $97bb			jsr 	Dereference					; derefernce it
.9da7	68		pla				pla
.9da8	60		rts				rts
.9da9					EvaluateNumber:
.9da9	20 a0 9d	jsr $9da0			jsr 	EvaluateValue 				; get a value
.9dac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9daf	29 10		and #$10			and 	#NSBIsString
.9db1	d0 16		bne $9dc9			bne 	HelperTypeError
.9db3	60		rts				rts
.9db4					EvaluateString:
.9db4	20 a0 9d	jsr $9da0			jsr 	EvaluateValue 				; get a value
.9db7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9dba	29 10		and #$10			and 	#NSBIsString
.9dbc	f0 0b		beq $9dc9			beq 	HelperTypeError
.9dbe					CopyAddressToTemp0:
.9dbe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9dc1	85 36		sta $36				sta 	zTemp0
.9dc3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dc6	85 37		sta $37				sta 	zTemp0+1
.9dc8	60		rts				rts
.9dc9					HelperTypeError:
.9dc9	4c c6 ab	jmp $abc6			jmp 	TypeError
.9dcc					EvaluateInteger:
.9dcc	20 a9 9d	jsr $9da9			jsr 	EvaluateNumber
.9dcf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9dd2	d0 0a		bne $9dde			bne 	HelperValueError 			; if not, it's a float.
.9dd4	60		rts				rts
.9dd5					EvaluateUnsignedInteger:
.9dd5	20 cc 9d	jsr $9dcc			jsr 	EvaluateInteger 			; check integer is +ve
.9dd8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ddb	30 01		bmi $9dde			bmi 	HelperValueError
.9ddd	60		rts				rts
.9dde					HelperValueError:
.9dde	4c cb ab	jmp $abcb			jmp 	ArgumentError
.9de1					Evaluate16BitInteger:
.9de1	20 d5 9d	jsr $9dd5			jsr	 	EvaluateUnsignedInteger		; get integer
.9de4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9de7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9dea	d0 f2		bne $9dde			bne 	HelperValueError
.9dec	60		rts				rts
.9ded					Evaluate8BitInteger:
.9ded	20 d5 9d	jsr $9dd5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9df0	d0 ec		bne $9dde			bne 	HelperValueError
.9df2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9df5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9df8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9dfb	d0 e1		bne $9dde			bne 	HelperValueError
.9dfd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aa58					Multiply8x8:
.aa58	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aa59	85 36		sta $36			  	sta 	zTemp0
.aa5b	86 37		stx $37				stx 	zTemp0+1
.aa5d	a9 00		lda #$00			lda 	#0
.aa5f	a2 08		ldx #$08			ldx 	#8
.aa61					_M88Loop:
.aa61	90 03		bcc $aa66			bcc 	_M88NoAdd
.aa63	18		clc				clc
.aa64	65 37		adc $37				adc 	zTemp0+1
.aa66					_M88NoAdd:
.aa66	6a		ror a				ror 	a
.aa67	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa69	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa6a	d0 f5		bne $aa61			bne 	_M88Loop
.aa6c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e01					NSMNegate:
.9e01	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e04	49 80		eor #$80			eor 	#NSBIsNegative
.9e06	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e09	60		rts				rts
.9e0a					NSMNegateMantissa:
.9e0a	38		sec				sec
.9e0b	a9 00		lda #$00			lda 	#0
.9e0d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9e10	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e13	a9 00		lda #$00			lda 	#0
.9e15	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9e18	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e1b	a9 00		lda #$00			lda 	#0
.9e1d	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9e20	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e23	a9 00		lda #$00			lda 	#0
.9e25	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9e28	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e2b	60		rts				rts
.9e2c					NSMShiftUpTwo:
.9e2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e2f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e32	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e35	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9e38	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e3b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e3e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e41	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e44	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e47	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e4a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e4d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e50	60		rts				rts
.9e51					NSMSetZeroMantissaOnly:
.9e51	a9 00		lda #$00			lda 	#0
.9e53	80 08		bra $9e5d			bra 	NSMSetMantissa
.9e55					NSMSetZero:
.9e55	a9 00		lda #$00			lda 	#0
.9e57					NSMSetByte:
.9e57	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e5a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e5d					NSMSetMantissa:
.9e5d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e60	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e63	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e66	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e69	60		rts				rts
.9e6a					NSMShiftLeft:
.9e6a	18		clc				clc
.9e6b					NSMRotateLeft:
.9e6b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e6e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e71	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e74	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e77	60		rts				rts
.9e78					NSMShiftRight:
.9e78	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e7b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e7e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e81	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e84	60		rts				rts
.9e85					NSMIsZero:
.9e85	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e88	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e8b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e8e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa6f					Assemble_ora:
.aa6f	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa72	01					.byte $01
.aa73					Assemble_and:
.aa73	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa76	21					.byte $21
.aa77					Assemble_eor:
.aa77	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa7a	41					.byte $41
.aa7b					Assemble_adc:
.aa7b	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa7e	61					.byte $61
.aa7f					Assemble_sta:
.aa7f	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa82	81					.byte $81
.aa83					Assemble_lda:
.aa83	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa86	a1					.byte $a1
.aa87					Assemble_cmp:
.aa87	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa8a	c1					.byte $c1
.aa8b					Assemble_sbc:
.aa8b	20 c8 85	jsr $85c8		jsr	AssembleGroup1
>aa8e	e1					.byte $e1
.aa8f					Assemble_asl:
.aa8f	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aa92	02					.byte $02
>aa93	75					.byte $75
.aa94					Assemble_rol:
.aa94	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aa97	22					.byte $22
>aa98	75					.byte $75
.aa99					Assemble_lsr:
.aa99	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aa9c	42					.byte $42
>aa9d	75					.byte $75
.aa9e					Assemble_ror:
.aa9e	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aaa1	62					.byte $62
>aaa2	75					.byte $75
.aaa3					Assemble_stx:
.aaa3	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aaa6	82					.byte $82
>aaa7	50					.byte $50
.aaa8					Assemble_ldx:
.aaa8	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aaab	a2					.byte $a2
>aaac	d0					.byte $d0
.aaad					Assemble_dec:
.aaad	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aab0	c2					.byte $c2
>aab1	55					.byte $55
.aab2					Assemble_inc:
.aab2	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aab5	e2					.byte $e2
>aab6	55					.byte $55
.aab7					Assemble_stz:
.aab7	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aaba	60					.byte $60
>aabb	44					.byte $44
.aabc					Assemble_bit:
.aabc	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aabf	20					.byte $20
>aac0	55					.byte $55
.aac1					Assemble_sty:
.aac1	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aac4	80					.byte $80
>aac5	54					.byte $54
.aac6					Assemble_ldy:
.aac6	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aac9	a0					.byte $a0
>aaca	d5					.byte $d5
.aacb					Assemble_cpy:
.aacb	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aace	c0					.byte $c0
>aacf	d4					.byte $d4
.aad0					Assemble_cpx:
.aad0	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aad3	e0					.byte $e0
>aad4	d0					.byte $d0
.aad5					Assemble_tsb:
.aad5	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aad8	00					.byte $00
>aad9	50					.byte $50
.aada					Assemble_trb:
.aada	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aadd	10					.byte $10
>aade	50					.byte $50
.aadf					Assemble_jsr:
.aadf	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aae2	14					.byte $14
>aae3	10					.byte $10
.aae4					Assemble_jmp:
.aae4	20 cf 85	jsr $85cf		jsr	AssembleGroup2
>aae7	40					.byte $40
>aae8	10					.byte $10
.aae9					Assemble_bpl:
.aae9	20 20 86	jsr $8620		jsr	AssembleGroup3
>aaec	10					.byte $10
.aaed					Assemble_bmi:
.aaed	20 20 86	jsr $8620		jsr	AssembleGroup3
>aaf0	30					.byte $30
.aaf1					Assemble_bvc:
.aaf1	20 20 86	jsr $8620		jsr	AssembleGroup3
>aaf4	50					.byte $50
.aaf5					Assemble_bvs:
.aaf5	20 20 86	jsr $8620		jsr	AssembleGroup3
>aaf8	70					.byte $70
.aaf9					Assemble_bcc:
.aaf9	20 20 86	jsr $8620		jsr	AssembleGroup3
>aafc	90					.byte $90
.aafd					Assemble_bcs:
.aafd	20 20 86	jsr $8620		jsr	AssembleGroup3
>ab00	b0					.byte $b0
.ab01					Assemble_bne:
.ab01	20 20 86	jsr $8620		jsr	AssembleGroup3
>ab04	d0					.byte $d0
.ab05					Assemble_beq:
.ab05	20 20 86	jsr $8620		jsr	AssembleGroup3
>ab08	f0					.byte $f0
.ab09					Assemble_bra:
.ab09	20 20 86	jsr $8620		jsr	AssembleGroup3
>ab0c	80					.byte $80
.ab0d					Assemble_brk:
.ab0d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab10	00					.byte $00
.ab11					Assemble_php:
.ab11	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab14	08					.byte $08
.ab15					Assemble_clc:
.ab15	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab18	18					.byte $18
.ab19					Assemble_plp:
.ab19	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab1c	28					.byte $28
.ab1d					Assemble_sec:
.ab1d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab20	38					.byte $38
.ab21					Assemble_rti:
.ab21	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab24	40					.byte $40
.ab25					Assemble_pha:
.ab25	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab28	48					.byte $48
.ab29					Assemble_cli:
.ab29	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab2c	58					.byte $58
.ab2d					Assemble_phy:
.ab2d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab30	5a					.byte $5a
.ab31					Assemble_rts:
.ab31	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab34	60					.byte $60
.ab35					Assemble_pla:
.ab35	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab38	68					.byte $68
.ab39					Assemble_sei:
.ab39	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab3c	78					.byte $78
.ab3d					Assemble_ply:
.ab3d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab40	7a					.byte $7a
.ab41					Assemble_dey:
.ab41	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab44	88					.byte $88
.ab45					Assemble_txa:
.ab45	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab48	8a					.byte $8a
.ab49					Assemble_tya:
.ab49	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab4c	98					.byte $98
.ab4d					Assemble_txs:
.ab4d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab50	9a					.byte $9a
.ab51					Assemble_tay:
.ab51	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab54	a8					.byte $a8
.ab55					Assemble_tax:
.ab55	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab58	aa					.byte $aa
.ab59					Assemble_clv:
.ab59	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab5c	b8					.byte $b8
.ab5d					Assemble_tsx:
.ab5d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab60	ba					.byte $ba
.ab61					Assemble_iny:
.ab61	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab64	c8					.byte $c8
.ab65					Assemble_dex:
.ab65	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab68	ca					.byte $ca
.ab69					Assemble_cld:
.ab69	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab6c	d8					.byte $d8
.ab6d					Assemble_phx:
.ab6d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab70	da					.byte $da
.ab71					Assemble_stp:
.ab71	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab74	db					.byte $db
.ab75					Assemble_inx:
.ab75	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab78	e8					.byte $e8
.ab79					Assemble_nop:
.ab79	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab7c	ea					.byte $ea
.ab7d					Assemble_sed:
.ab7d	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab80	f8					.byte $f8
.ab81					Assemble_plx:
.ab81	20 56 86	jsr $8656		jsr	AssembleGroup4
>ab84	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ab85					DecimalScalarTable:
>ab85	66 66 66 66				.dword $66666666 ; 0.1
>ab89	de					.byte $de
>ab8a	1f 85 eb 51				.dword $51eb851f ; 0.01
>ab8e	db					.byte $db
>ab8f	4c 37 89 41				.dword $4189374c ; 0.001
>ab93	d8					.byte $d8
>ab94	ac 8b db 68				.dword $68db8bac ; 0.0001
>ab98	d4					.byte $d4
>ab99	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ab9d	d1					.byte $d1
>ab9e	83 de 1b 43				.dword $431bde83 ; 1e-06
>aba2	ce					.byte $ce
>aba3	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aba7	ca					.byte $ca
>aba8	89 3b e6 55				.dword $55e63b89 ; 1e-08
>abac	c7					.byte $c7
>abad	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>abb1	c4					.byte $c4
>abb2	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>abb6	c0					.byte $c0
>abb7	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>abbb	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.abbc					SyntaxError:
.abbc	a9 02		lda #$02		lda	#2
.abbe	4c 9d 92	jmp $929d		jmp	ErrorHandler
.abc1					RangeError:
.abc1	a9 04		lda #$04		lda	#4
.abc3	4c 9d 92	jmp $929d		jmp	ErrorHandler
.abc6					TypeError:
.abc6	a9 05		lda #$05		lda	#5
.abc8	4c 9d 92	jmp $929d		jmp	ErrorHandler
.abcb					ArgumentError:
.abcb	a9 07		lda #$07		lda	#7
.abcd	4c 9d 92	jmp $929d		jmp	ErrorHandler
.abd0					NotDoneError:
.abd0	a9 0c		lda #$0c		lda	#12
.abd2	4c 9d 92	jmp $929d		jmp	ErrorHandler
.abd5					ErrorText:
>abd5	42 72 65 61 6b 00			.text	"Break",0
>abdb	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>abe3	72 72 6f 72 00
>abe8	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>abf0	20 62 79 20 7a 65 72 6f 00
>abf9	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ac01	61 6e 67 65 00
>ac06	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ac0e	6d 61 74 63 68 00
>ac14	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ac1c	65 6d 6f 72 79 00
>ac22	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ac2a	61 72 67 75 6d 65 6e 74 00
>ac33	53 74 6f 70 00				.text	"Stop",0
>ac38	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ac40	6f 6f 20 6c 6f 6e 67 00
>ac48	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ac50	6e 20 66 61 69 6c 65 64 00
>ac59	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ac61	61 74 61 00
>ac65	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac6d	65 6e 74 65 64 00
>ac73	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ac7b	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ac87	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ac8f	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ac9c	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aca4	74 68 6f 75 74 20 52 65 70 65 61 74 00
>acb1	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>acb9	68 6f 75 74 20 57 68 69 6c 65 00
>acc4	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>accc	68 6f 75 74 20 46 6f 72 00
>acd5	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>acdd	61 63 6b 20 66 75 6c 6c 00
>ace6	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>acee	75 63 74 75 72 65 00
>acf5	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>acfd	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ad0a	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ad12	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ad20	41 72 72 61 79 20 73 69			.text	"Array size",0
>ad28	7a 65 00
>ad2b	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ad33	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ad3b	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1052."
>ad43	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ad53	2e 20 42 75 69 6c 64 20 31 30 35 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ad60					EXTPrintCharacter:
.ad60	48		pha				pha
.ad61	da		phx				phx
.ad62	5a		phy				phy
.ad63	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ad66	7a		ply				ply
.ad67	fa		plx				plx
.ad68	68		pla				pla
.ad69	60		rts				rts
.ad6a					EXTInputSingleCharacter:
.ad6a	da		phx				phx
.ad6b	5a		phy				phy
.ad6c					_EISCWait:
.ad6c	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad6f	c9 00		cmp #$00			cmp 	#0
.ad71	f0 f9		beq $ad6c			beq 	_EISCWait
.ad73	7a		ply				ply
.ad74	fa		plx				plx
.ad75	60		rts				rts
.ad76					EXTInputLine:
.ad76	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ad78					_ILLoop:
.ad78	da		phx				phx 								; read character in
.ad79	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ad7c	fa		plx				plx
.ad7d	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ad7f	f0 12		beq $ad93			beq 	_ILBackspace
.ad81	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ad83	f0 15		beq $ad9a			beq 	_ILExit
.ad85	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ad87	90 ef		bcc $ad78			bcc 	_ILLoop
.ad89	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ad8b	f0 eb		beq $ad78			beq 	_ILLoop
.ad8d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ad90	e8		inx				inx
.ad91	80 e5		bra $ad78			bra 	_ILLoop
.ad93					_ILBackspace:
.ad93	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ad95	f0 e1		beq $ad78			beq 	_ILLoop
.ad97	ca		dex				dex 								; back one.
.ad98	80 de		bra $ad78			bra 	_ILLoop
.ad9a					_ILExit:
.ad9a	20 60 ad	jsr $ad60			jsr 	EXTPrintCharacter
.ad9d	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ada0	60		rts				rts
.ada1					EXTBreakCheck:
.ada1	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ada4					MemoryDeleteLine:
.ada4	20 c3 ad	jsr $adc3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ada7	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ada9	a8		tay				tay
.adaa					_MDDLLoop:
.adaa	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.adac	92 30		sta ($30)			sta 	(codePtr)
.adae	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.adb0	c5 3a		cmp $3a				cmp 	zTemp2
.adb2	d0 07		bne $adbb			bne 	_MDLDLNext
.adb4	a5 31		lda $31				lda 	codePtr+1
.adb6	c5 3b		cmp $3b				cmp 	zTemp2+1
.adb8	d0 01		bne $adbb			bne 	_MDLDLNext
.adba					_MDDLExit:
.adba	60		rts				rts
.adbb					_MDLDLNext:
.adbb	e6 30		inc $30				inc 	codePtr						; next byte
.adbd	d0 eb		bne $adaa			bne 	_MDDLLoop
.adbf	e6 31		inc $31				inc 	codePtr+1
.adc1	80 e7		bra $adaa			bra 	_MDDLLoop
.adc3					IMemoryFindEnd:
.adc3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adc5	85 3a		sta $3a				sta 	0+zTemp2
.adc7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adc9	85 3b		sta $3b				sta 	1+zTemp2
.adcb					_MDLFELoop:
.adcb	b2 3a		lda ($3a)			lda 	(zTemp2)
.adcd	f0 0b		beq $adda			beq 	_MDLFEExit
.adcf	18		clc				clc
.add0	65 3a		adc $3a				adc 	zTemp2
.add2	85 3a		sta $3a				sta 	zTemp2
.add4	90 f5		bcc $adcb			bcc 	_MDLFELoop
.add6	e6 3b		inc $3b				inc 	zTemp2+1
.add8	80 f1		bra $adcb			bra 	_MDLFELoop
.adda					_MDLFEExit:
.adda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.addb					MemoryInsertLine:
.addb	08		php				php
.addc	20 c3 ad	jsr $adc3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.addf	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ade1	1a		inc a				inc 	a
.ade2	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ade4	b0 36		bcs $ae1c			bcs 	_MDLIError
.ade6	28		plp				plp
.ade7	90 08		bcc $adf1			bcc 	_MDLIFound
.ade9	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.adeb	85 30		sta $30				sta 	codePtr
.aded	a5 3b		lda $3b				lda 	zTemp2+1
.adef	85 31		sta $31				sta 	codePtr+1
.adf1					_MDLIFound:
.adf1	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.adf4	a8		tay				tay
.adf5					_MDLIInsert:
.adf5	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.adf7	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.adf9	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.adfb	c5 3a		cmp $3a				cmp 	zTemp2
.adfd	d0 06		bne $ae05			bne 	_MDLINext
.adff	a5 31		lda $31				lda 	codePtr+1
.ae01	c5 3b		cmp $3b				cmp 	zTemp2+1
.ae03	f0 0a		beq $ae0f			beq 	_MDLIHaveSpace
.ae05					_MDLINext:
.ae05	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ae07	d0 02		bne $ae0b			bne 	_MDLINoBorrow
.ae09	c6 3b		dec $3b				dec 	zTemp2+1
.ae0b					_MDLINoBorrow:
.ae0b	c6 3a		dec $3a				dec 	zTemp2
.ae0d	80 e6		bra $adf5			bra 	_MDLIInsert
.ae0f					_MDLIHaveSpace:
.ae0f	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ae12	88		dey				dey 								; from offset-1 to 0
.ae13					_MDLICopy:
.ae13	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.ae16	91 30		sta ($30),y			sta 	(codePtr),y
.ae18	88		dey				dey
.ae19	10 f8		bpl $ae13			bpl 	_MDLICopy
.ae1b	60		rts				rts
.ae1c					_MDLIError:
.ae1c	a9 06		lda #$06		lda	#6
.ae1e	4c 9d 92	jmp $929d		jmp	ErrorHandler
.ae21					MDLAppendLine:
.ae21	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae23	85 36		sta $36				sta 	zTemp0
.ae25	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae27	85 38		sta $38				sta 	0+zTemp1
.ae29	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae2b	85 39		sta $39				sta 	1+zTemp1
.ae2d	b2 38		lda ($38)			lda 	(zTemp1)
.ae2f	d0 0a		bne $ae3b			bne 	_MDLANoInitialise
.ae31	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae33	8d 4f 06	sta $064f			sta 	0+AppendPointer
.ae36	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae38	8d 50 06	sta $0650			sta 	1+AppendPointer
.ae3b					_MDLANoInitialise:
.ae3b	18		clc				clc
.ae3c	ad 4f 06	lda $064f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae3f	85 38		sta $38				sta 	zTemp1
.ae41	72 36		adc ($36)			adc 	(zTemp0)
.ae43	8d 4f 06	sta $064f			sta 	AppendPointer
.ae46	ad 50 06	lda $0650			lda 	AppendPointer+1
.ae49	85 39		sta $39				sta 	zTemp1+1
.ae4b	69 00		adc #$00			adc 	#0
.ae4d	8d 50 06	sta $0650			sta 	AppendPointer+1
.ae50	a0 00		ldy #$00			ldy 	#0
.ae52					_MDLACopy:
.ae52	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae54	91 38		sta ($38),y			sta 	(zTemp1),y
.ae56	c8		iny				iny
.ae57	98		tya				tya
.ae58	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae5a	d0 f6		bne $ae52			bne 	_MDLACopy
.ae5c	a9 00		lda #$00			lda 	#0 							; end of program.
.ae5e	91 38		sta ($38),y			sta 	(zTemp1),y
.ae60	60		rts				rts
.064f					AppendPointer:
>064f							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9e92					MemoryNew:
.9e92	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e94	85 30		sta $30				sta 	codePtr
.9e96	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e98	85 31		sta $31				sta 	codePtr+1
.9e9a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e9c	92 30		sta ($30)			sta 	(codePtr)
.9e9e	60		rts				rts
.9e9f					MemoryInline:
.9e9f	98		tya				tya 								; put address into stack,x
.9ea0	18		clc				clc
.9ea1	65 30		adc $30				adc 	codePtr
.9ea3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ea6	a5 31		lda $31				lda 	codePtr+1
.9ea8	69 00		adc #$00			adc 	#0
.9eaa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ead	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9eb0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9eb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9eb4					MemorySearch:
.9eb4	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9eb6	86 37		stx $37				stx 	zTemp0+1
.9eb8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9eba	85 30		sta $30				sta 	codePtr
.9ebc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ebe	85 31		sta $31				sta 	codePtr+1
.9ec0					_MTAXLoop:
.9ec0	b2 30		lda ($30)			lda 	(codePtr)
.9ec2	18		clc				clc
.9ec3	f0 21		beq $9ee6			beq 	_MTAXExit 					; reached end, exit with CC.
.9ec5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ec7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ec9	38		sec				sec
.9eca	e5 36		sbc $36				sbc 	zTemp0
.9ecc	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ece	c8		iny				iny 								; do the MSB
.9ecf	b1 30		lda ($30),y			lda 	(codePtr),y
.9ed1	e5 37		sbc $37				sbc 	zTemp0+1
.9ed3	05 38		ora $38				ora 	zTemp1
.9ed5	f0 0f		beq $9ee6			beq 	_MTAXExit	 				; found
.9ed7	b0 0d		bcs $9ee6			bcs 	_MTAXExit 					; current < required exit
.9ed9	18		clc				clc
.9eda	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9edc	65 30		adc $30				adc 	codePtr
.9ede	85 30		sta $30				sta 	codePtr
.9ee0	90 02		bcc $9ee4			bcc 	_CREExit
.9ee2	e6 31		inc $31				inc 	codePtr+1
.9ee4					_CREExit:
.9ee4	80 da		bra $9ec0			bra 	_MTAXLoop
.9ee6					_MTAXExit:
.9ee6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9ee7					StackPushByte:
.9ee7	48		pha				pha 								; save byte
.9ee8	a5 34		lda $34				lda 	BasicStack
.9eea	d0 09		bne $9ef5			bne 	_SPBNoBorrow
.9eec	c6 35		dec $35				dec 	BasicStack+1
.9eee	48		pha				pha
.9eef	a5 35		lda $35				lda 	BasicStack+1
.9ef1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ef3	90 06		bcc $9efb			bcc 	_SPBMemory
.9ef5					_SPBNoBorrow:
.9ef5	c6 34		dec $34				dec 	BasicStack
.9ef7	68		pla				pla 								; get back and write
.9ef8	92 34		sta ($34)			sta 	(BasicStack)
.9efa	60		rts				rts
.9efb					_SPBMemory:
.9efb	a9 12		lda #$12		lda	#18
.9efd	4c 9d 92	jmp $929d		jmp	ErrorHandler
.9f00					StackPopByte:
.9f00	b2 34		lda ($34)			lda 	(BasicStack)
.9f02	e6 34		inc $34				inc 	BasicStack
.9f04	d0 02		bne $9f08			bne 	_SPBNoCarry
.9f06	e6 35		inc $35				inc 	BasicStack+1
.9f08					_SPBNoCarry:
.9f08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9f09					StackOpen:
.9f09	48		pha				pha 								; save frame byte
.9f0a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9f0c	0a		asl a				asl 	a 							; claim twice this for storage
.9f0d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9f0f	38		sec				sec 								; so basically subtracting from
.9f10	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9f12	85 34		sta $34				sta 	basicStack
.9f14	b0 08		bcs $9f1e			bcs 	_SONoBorrow
.9f16	c6 35		dec $35				dec 	basicStack+1
.9f18	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9f1a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9f1c	90 04		bcc $9f22			bcc 	_SOMemory
.9f1e					_SONoBorrow:
.9f1e	68		pla				pla 								; get marker back and write at TOS
.9f1f	92 34		sta ($34)			sta 	(basicStack)
.9f21	60		rts				rts
.9f22					_SOMemory:
.9f22	a9 12		lda #$12		lda	#18
.9f24	4c 9d 92	jmp $929d		jmp	ErrorHandler
.9f27					StackClose:
.9f27	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9f29	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9f2b	0a		asl a				asl 	a 							; claim twice this.
.9f2c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9f2e	85 34		sta $34				sta 	basicStack
.9f30	90 02		bcc $9f34			bcc 	_SCExit
.9f32	e6 35		inc $35				inc 	basicStack+1
.9f34					_SCExit:
.9f34	60		rts				rts
.9f35					StackCheckFrame:
.9f35	48		pha				pha
.9f36					_StackRemoveLocals:
.9f36	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9f38	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9f3a	b0 05		bcs $9f41			bcs 	_SCNoLocal
.9f3c	20 7d a5	jsr $a57d			jsr 	LocalPopValue
.9f3f	80 f5		bra $9f36			bra 	_StackRemoveLocals
.9f41					_SCNoLocal:
.9f41	68		pla				pla
.9f42	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9f44	29 f0		and #$f0			and 	#$F0 						; check type bits
.9f46	d0 01		bne $9f49			bne 	_SCFError 					; different, we have structures mixed up
.9f48	60		rts				rts
.9f49					_SCFError:
.9f49	8a		txa				txa 								; report error X
.9f4a	4c 9d 92	jmp $929d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9f4d					STKSaveCodePosition:
.9f4d	5a		phy				phy
.9f4e	98		tya				tya 								; save Y
.9f4f	a0 05		ldy #$05			ldy 	#5
.9f51	91 34		sta ($34),y			sta 	(basicStack),y
.9f53	88		dey				dey 								; save Code Pointer
.9f54					_STKSaveLoop:
.9f54	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9f57	91 34		sta ($34),y			sta 	(basicStack),y
.9f59	88		dey				dey
.9f5a	d0 f8		bne $9f54			bne 	_STKSaveLoop
.9f5c	7a		ply				ply
.9f5d	60		rts				rts
.9f5e					STKLoadCodePosition:
.9f5e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9f60					_STKLoadLoop:
.9f60	b1 34		lda ($34),y			lda 	(basicStack),y
.9f62	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9f65	c8		iny				iny
.9f66	c0 05		cpy #$05			cpy 	#5
.9f68	d0 f6		bne $9f60			bne 	_STKLoadLoop
.9f6a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f6c	a8		tay				tay
.9f6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f6e					StackReset:
.9f6e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9f70	85 34		sta $34				sta 	0+basicStack
.9f72	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9f74	85 35		sta $35				sta 	1+basicStack
.9f76	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9f78	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9f7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ae61					StringConcrete:
.ae61	5a		phy				phy 								; save position on stack
.ae62	20 64 9b	jsr $9b64			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae65	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae68	85 38		sta $38				sta 	zTemp1
.ae6a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae6d	85 39		sta $39				sta 	zTemp1+1
.ae6f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ae71					_SALength:
.ae71	c8		iny				iny
.ae72	b1 38		lda ($38),y			lda 	(zTemp1),y
.ae74	d0 fb		bne $ae71			bne 	_SALength
.ae76	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ae78	b0 3f		bcs $aeb9			bcs 	_SALengthError
.ae7a	98		tya				tya 				 				; length of the new string
.ae7b	18		clc				clc
.ae7c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ae7e	90 02		bcc $ae82			bcc 	_SAHaveLength
.ae80	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ae82					_SAHaveLength:
.ae82	48		pha				pha 								; save length.
.ae83	38		sec				sec
.ae84	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ae86	6d 8e 04	adc $048e			adc 	StringMemory
.ae89	8d 8e 04	sta $048e			sta 	StringMemory
.ae8c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ae8e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ae91	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ae93	6d 8f 04	adc $048f			adc 	StringMemory+1
.ae96	8d 8f 04	sta $048f			sta 	StringMemory+1
.ae99	85 3b		sta $3b				sta 	zTemp2+1
.ae9b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae9e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ae9f	38		sec				sec
.aea0	e9 03		sbc #$03			sbc 	#3
.aea2	92 3a		sta ($3a)			sta 	(zTemp2)
.aea4	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.aea6	a0 01		ldy #$01			ldy 	#1
.aea8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.aeaa					_SACopyNewString:
.aeaa	a0 00		ldy #$00			ldy 	#0
.aeac					_SACopyNSLoop:
.aeac	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.aeae	c8		iny				iny 								; write two on in string storage
.aeaf	c8		iny				iny
.aeb0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.aeb2	88		dey				dey 								; this makes it one one.
.aeb3	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.aeb5	d0 f5		bne $aeac			bne 	_SACopyNSLoop
.aeb7	7a		ply				ply
.aeb8	60		rts				rts
.aeb9					_SALengthError:
.aeb9	a9 09		lda #$09		lda	#9
.aebb	4c 9d 92	jmp $929d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.aebe					StringSystemInitialise:
.aebe	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.aec0	8d 8e 04	sta $048e			sta 	0+StringMemory
.aec3	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.aec5	8d 8f 04	sta $048f			sta 	1+StringMemory
.aec8	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.aecb	60		rts				rts
.aecc					StringSpaceInitialise:
.aecc	20 64 9b	jsr $9b64			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aecf	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aed1	8d 90 04	sta $0490			sta 	StringInitialised
.aed4	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aed7	8d 91 04	sta $0491			sta 	StringTempPointer
.aeda	ad 8f 04	lda $048f			lda 	StringMemory+1
.aedd	3a		dec a				dec 	a
.aede	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aee1	60		rts				rts
.aee2					StringTempAllocate:
.aee2	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.aee4	b0 35		bcs $af1b			bcs 	_STALength
.aee6	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.aee9	30 05		bmi $aef0			bmi 	_STAAllocate
.aeeb	48		pha				pha 								; save value to subtract.
.aeec	20 cc ae	jsr $aecc			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.aeef	68		pla				pla 								; restore it
.aef0					_STAAllocate:
.aef0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.aef2	18		clc				clc  								; deliberate allows one more
.aef3	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aef6	8d 91 04	sta $0491			sta 	StringTempPointer
.aef9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aefc	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aefe	ad 92 04	lda $0492			lda 	StringTempPointer+1
.af01	69 ff		adc #$ff			adc 	#$FF
.af03	8d 92 04	sta $0492			sta 	StringTempPointer+1
.af06	85 3d		sta $3d				sta 	zsTemp+1
.af08	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af0b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.af0e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.af11	a9 10		lda #$10			lda 	#NSTString
.af13	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af16	a9 00		lda #$00			lda 	#0 							; clear the target string
.af18	92 3c		sta ($3c)			sta 	(zsTemp)
.af1a	60		rts				rts
.af1b					_STALength:
.af1b	a9 09		lda #$09		lda	#9
.af1d	4c 9d 92	jmp $929d		jmp	ErrorHandler
.af20					StringTempWrite:
.af20	48		pha				pha
.af21	92 3c		sta ($3c)			sta 	(zsTemp)
.af23	e6 3c		inc $3c				inc 	zsTemp
.af25	d0 02		bne $af29			bne 	_STWNoCarry
.af27	e6 3d		inc $3d				inc 	zsTemp+1
.af29					_STWNoCarry:
.af29	a9 00		lda #$00			lda 	#0
.af2b	92 3c		sta ($3c)			sta 	(zsTemp)
.af2d	68		pla				pla
.af2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9f7b					BackloadProgram:
.9f7b	a2 ff		ldx #$ff			ldx 	#$FF
.9f7d	20 a5 9f	jsr $9fa5			jsr 	BLReadByte
.9f80	30 1f		bmi $9fa1			bmi 	_BPExit
.9f82					_BPCopy:
.9f82	e8		inx				inx  								; copy byte in
.9f83	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9f86	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9f89	20 a5 9f	jsr $9fa5			jsr 	BLReadByte 					; read next byte
.9f8c	30 0a		bmi $9f98			bmi 	_BPEndLine 					; -ve = EOL
.9f8e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9f90	d0 02		bne $9f94			bne 	_BPNotTab
.9f92	a9 20		lda #$20			lda 	#' '
.9f94					_BPNotTab:
.9f94	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9f96	b0 ea		bcs $9f82			bcs 	_BPCopy
.9f98					_BPEndLine:
.9f98	20 ce a2	jsr $a2ce			jsr 	TokeniseLine 				; tokenise the line.
.9f9b	38		sec				sec 								; append not insert
.9f9c	20 db ad	jsr $addb			jsr 	MemoryInsertLine 			; append to current program
.9f9f	80 da		bra $9f7b			bra 	BackloadProgram
.9fa1					_BPExit:
.9fa1	20 ce 88	jsr $88ce			jsr 	ClearCommand 				; clear variables etc.
.9fa4	60		rts				rts
.9fa5					BLReadByte:
.9fa5					_BLLoad:
.9fa5	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9fa8	ee a6 9f	inc $9fa6			inc 	_BLLoad+1
.9fab	d0 03		bne $9fb0			bne 	_BLNoCarry
.9fad	ee a7 9f	inc $9fa7			inc 	_BLLoad+2
.9fb0					_BLNoCarry:
.9fb0	c9 00		cmp #$00			cmp 	#0
.9fb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9fb3					TokeniseSearchTable:
.9fb3	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9fb5	85 36		sta $36				sta 	zTemp0
.9fb7	a0 00		ldy #$00			ldy 	#0
.9fb9	a9 80		lda #$80			lda 	#$80 						; token #
.9fbb	85 38		sta $38				sta 	zTemp1
.9fbd					_TSTLoop:
.9fbd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9fbf	30 49		bmi $a00a			bmi 	_TSTFail 					; -ve = end of table
.9fc1	f0 2e		beq $9ff1			beq 	_TSTNext 					; zero, check next it's a dummy
.9fc3	c8		iny				iny 								; get the hash
.9fc4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fc6	88		dey				dey
.9fc7	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9fca	d0 25		bne $9ff1			bne 	_TSTNext
.9fcc	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9fcf	38		sec				sec
.9fd0	ed 80 04	sbc $0480			sbc 	identStart
.9fd3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9fd5	d0 1a		bne $9ff1			bne 	_TSTNext
.9fd7	5a		phy				phy 								; save Y , we might fail
.9fd8	c8		iny				iny 								; point to text
.9fd9	c8		iny				iny
.9fda	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9fdd					_TSTCompareName:
.9fdd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9fe0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9fe2	d0 0c		bne $9ff0			bne 	_TSTNextPullY 				; fail, pullY and do next
.9fe4	e8		inx				inx
.9fe5	c8		iny				iny
.9fe6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9fe9	d0 f2		bne $9fdd			bne 	_TSTCompareName
.9feb	7a		ply				ply 								; throw Y
.9fec	a5 38		lda $38				lda 	zTemp1 						; get token #
.9fee	38		sec				sec 								; return with CS = passed.
.9fef	60		rts				rts
.9ff0					_TSTNextPullY:
.9ff0	7a		ply				ply 								; restore current, fall through.
.9ff1					_TSTNext:
.9ff1	e6 38		inc $38				inc 	zTemp1 						; token counter
.9ff3	98		tya				tya
.9ff4	18		clc				clc
.9ff5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9ff7	1a		inc a				inc 	a 							; +1
.9ff8	1a		inc a				inc 	a 							; +2
.9ff9	a8		tay				tay
.9ffa	10 c1		bpl $9fbd			bpl 	_TSTLoop 					; if Y < $80 loop back
.9ffc	98		tya				tya 								; add Y to zTemp0 and reset Y
.9ffd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9fff	18		clc				clc  								; but have tables > 255 bytes
.a000	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a002	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a004	90 b7		bcc $9fbd			bcc 	_TSTLoop
.a006	e6 37		inc $37				inc 	zTemp0+1
.a008	80 b3		bra $9fbd			bra 	_TSTLoop
.a00a					_TSTFail:
.a00a	18		clc				clc
.a00b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a00c					KeywordSet0:
>a00c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a00e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a010	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a012	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a018	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a020	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a026	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a02d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a034	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a03b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a041	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a049	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a051	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a057	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a05e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a064	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a06c	28
>a06d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a075	28
>a076	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a07c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a082	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a088	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a08f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a095	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a09b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a0a0	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a0a4	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a0aa	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a0b2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a0b9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a0c0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a0c8	43
>a0c9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a0cf	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a0d5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a0dc	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a0e2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a0e8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a0ed	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a0f3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a0f8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a100	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a106	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a10d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a113	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a118	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a11f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a126	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a12c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a131	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a139	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a13d	ff					.text	$FF
.a13e					KeywordSet1:
>a13e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a140	00 58					.text	0,$58,""               ; $81 !1:SH1
>a142	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a144	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a14c	4c 45
>a14e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a156	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a15d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a162	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a168	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a16d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a175	45
>a176	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a17b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a181	ff					.text	$FF
.a182					KeywordSet2:
>a182	00 65					.text	0,$65,""               ; $80 !0:EOF
>a184	00 58					.text	0,$58,""               ; $81 !1:SH1
>a186	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a188	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a18d	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a192	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a197	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a19c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a1a1	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a1a6	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a1ab	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a1b0	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a1b5	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a1ba	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a1bf	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a1c4	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a1c9	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a1ce	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a1d3	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a1d8	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a1dd	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a1e2	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a1e7	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a1ec	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a1f1	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a1f6	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a1fb	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a200	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a205	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a20a	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a20f	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a214	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a219	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a21e	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a223	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a228	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a22d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a232	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a237	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a23c	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a241	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a246	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a24b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a250	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a255	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a25a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a25f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a264	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a269	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a26e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a273	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a278	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a27d	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a282	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a287	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a28c	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a291	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a296	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a29b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a2a0	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a2a5	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a2aa	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a2af	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a2b4	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a2b9	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a2be	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a2c3	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a2c8	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a2cd	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a2ce					TokeniseLine:
.a2ce	20 56 a4	jsr $a456			jsr 	FixLineBufferCase 			; fix line case
.a2d1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a2d3	8d a6 04	sta $04a6			sta 	tokenOffset
.a2d6	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a2d9	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a2dc	a2 ff		ldx #$ff			ldx 	#$FF
.a2de					_TKFindFirst:
.a2de	e8		inx				inx
.a2df	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a2e2	f0 79		beq $a35d			beq 	_TKExit
.a2e4	c9 20		cmp #$20			cmp 	#' '
.a2e6	90 f6		bcc $a2de			bcc 	_TKFindFirst
.a2e8	c9 30		cmp #$30			cmp 	#'0'
.a2ea	90 07		bcc $a2f3			bcc 	_TKNoLineNumber
.a2ec	c9 3a		cmp #$3a			cmp 	#'9'+1
.a2ee	b0 03		bcs $a2f3			bcs 	_TKNoLineNumber
.a2f0	20 80 a4	jsr $a480			jsr 	TokeniseExtractLineNumber
.a2f3					_TKNoLineNumber:
.a2f3					_TKTokeniseLoop:
.a2f3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a2f6	f0 65		beq $a35d			beq 	_TKExit
.a2f8	e8		inx				inx
.a2f9	c9 20		cmp #$20			cmp 	#' '
.a2fb	f0 f6		beq $a2f3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a2fd	ca		dex				dex 								; undo last get, A contains character, X is position.
.a2fe	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a300	f0 61		beq $a363			beq 	_TKTokeniseIdentifier
.a302	c9 41		cmp #$41			cmp 	#'A'
.a304	90 04		bcc $a30a			bcc 	_TKTokenisePunctuation
.a306	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a308	90 59		bcc $a363			bcc 	_TKTokeniseIdentifier
.a30a					_TKTokenisePunctuation:
.a30a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a30c	f0 27		beq $a335			beq 	_TKString
.a30e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a310	f0 28		beq $a33a			beq 	_TKHexConstant
.a312	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a314	f0 29		beq $a33f			beq 	_TKCheckDouble
.a316	c9 3e		cmp #$3e			cmp 	#'>'
.a318	f0 25		beq $a33f			beq 	_TKCheckDouble
.a31a					_TKStandardPunctuation:
.a31a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a31d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a31f	90 0e		bcc $a32f			bcc 	_TKNoShift
.a321	48		pha				pha 								; save
.a322	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a324	85 36		sta $36				sta 	zTemp0
.a326	68		pla				pla
.a327	29 20		and #$20			and 	#32 						; bit 5
.a329	4a		lsr a				lsr 	a 							; shift into bit 3
.a32a	4a		lsr a				lsr 	a
.a32b	05 36		ora $36				ora 	zTemp0
.a32d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a32f					_TKNoShift:
.a32f	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte 			; write the punctuation character
.a332	e8		inx				inx 								; consume the character
.a333	80 be		bra $a2f3			bra 	_TKTokeniseLoop 			; and loop round again.
.a335					_TKString:
.a335	20 e5 a3	jsr $a3e5			jsr 	TokeniseString
.a338	80 b9		bra $a2f3			bra 	_TKTokeniseLoop
.a33a					_TKHexConstant:
.a33a	20 20 a4	jsr $a420			jsr 	TokeniseHexConstant
.a33d	80 b4		bra $a2f3			bra 	_TKTokeniseLoop
.a33f					_TKCheckDouble:
.a33f	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a342	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a344	90 d4		bcc $a31a			bcc 	_TKStandardPunctuation
.a346	c9 3f		cmp #$3f			cmp 	#'>'+1
.a348	b0 d0		bcs $a31a			bcs 	_TKStandardPunctuation
.a34a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a34d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a34f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a350	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a353	38		sec				sec
.a354	e9 3c		sbc #$3c			sbc 	#'<'
.a356	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a359	e8		inx				inx 								; consume both
.a35a	e8		inx				inx
.a35b	80 96		bra $a2f3			bra 	_TKTokeniseLoop
.a35d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a35f	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a362	60		rts				rts
.a363					_TKTokeniseIdentifier:
.a363	8e 80 04	stx $0480			stx 	identStart 					; save start
.a366	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a369					_TKCheckLoop:
.a369	e8		inx				inx 								; look at next, we know first is identifier.
.a36a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a36d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a36f	f0 f8		beq $a369			beq 	_TKCheckLoop
.a371	c9 30		cmp #$30			cmp	 	#"0"
.a373	90 0c		bcc $a381			bcc 	_TKEndIdentifier
.a375	c9 3a		cmp #$3a			cmp 	#"9"+1
.a377	90 f0		bcc $a369			bcc 	_TKCheckLoop
.a379	c9 41		cmp #$41			cmp	 	#"A"
.a37b	90 04		bcc $a381			bcc 	_TKEndIdentifier
.a37d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a37f	90 e8		bcc $a369			bcc 	_TKCheckLoop
.a381					_TKEndIdentifier:
.a381	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a384	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a386	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a388	f0 06		beq $a390			beq 	_TKHasTypeCharacter
.a38a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a38c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a38e	d0 07		bne $a397			bne 	_TKNoTypeCharacter
.a390					_TKHasTypeCharacter:
.a390	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a393	e8		inx				inx 								; read next
.a394	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a397					_TKNoTypeCharacter:
.a397	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a399	d0 09		bne $a3a4			bne 	_TKNoArray
.a39b	e8		inx				inx 								; skip the (
.a39c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a39f	09 04		ora #$04			ora 	#$04
.a3a1	8d 84 04	sta $0484			sta 	identTypeByte
.a3a4					_TKNoArray:
.a3a4	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a3a7	20 41 a4	jsr $a441			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a3aa	a0 a0		ldy #$a0			ldy 	#(KeywordSet0) >> 8
.a3ac	a9 0c		lda #$0c			lda 	#(KeywordSet0) & $FF
.a3ae	20 b3 9f	jsr $9fb3			jsr 	TokeniseSearchTable
.a3b1	a2 00		ldx #$00			ldx 	#0
.a3b3	b0 1f		bcs $a3d4			bcs 	_TKFoundToken
.a3b5	a0 a1		ldy #$a1			ldy 	#(KeywordSet1) >> 8
.a3b7	a9 3e		lda #$3e			lda 	#(KeywordSet1) & $FF
.a3b9	20 b3 9f	jsr $9fb3			jsr 	TokeniseSearchTable
.a3bc	a2 81		ldx #$81			ldx 	#$81
.a3be	b0 14		bcs $a3d4			bcs 	_TKFoundToken
.a3c0	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a3c2	a9 82		lda #$82			lda 	#(KeywordSet2) & $FF
.a3c4	20 b3 9f	jsr $9fb3			jsr 	TokeniseSearchTable
.a3c7	a2 82		ldx #$82			ldx 	#$82
.a3c9	b0 09		bcs $a3d4			bcs 	_TKFoundToken
.a3cb	20 d1 a4	jsr $a4d1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a3ce	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3d1	4c f3 a2	jmp $a2f3			jmp 	_TKTokeniseLoop 			; and go round again.
.a3d4					_TKFoundToken:
.a3d4	48		pha				pha 								; save token
.a3d5	8a		txa				txa 								; shift in X, is there one ?
.a3d6	f0 03		beq $a3db			beq 	_TKNoTShift
.a3d8	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte 			; if so, write it out
.a3db					_TKNoTShift:
.a3db	68		pla				pla 								; restore and write token
.a3dc	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a3df	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3e2	4c f3 a2	jmp $a2f3			jmp 	_TKTokeniseLoop 			; and go round again.
.a3e5					TokeniseString:
.a3e5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a3e7	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a3ea	e8		inx				inx									; start of quoted string.
.a3eb	da		phx				phx 								; push start of string on top
.a3ec	ca		dex				dex
.a3ed					_TSFindEnd:
.a3ed	e8		inx				inx
.a3ee	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a3f1	f0 04		beq $a3f7			beq 	_TSEndOfString
.a3f3	c9 22		cmp #$22			cmp 	#'"'
.a3f5	d0 f6		bne $a3ed			bne 	_TSFindEnd
.a3f7					_TSEndOfString:
.a3f7	7a		ply				ply  								; so now Y is first character, X is character after end.
.a3f8	48		pha				pha 								; save terminating character
.a3f9	20 01 a4	jsr $a401			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a3fc	68		pla				pla 								; terminating character
.a3fd	f0 01		beq $a400			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a3ff	e8		inx				inx
.a400					_TSNotQuote:
.a400	60		rts				rts
.a401					TOWriteBlockXY:
.a401	86 36		stx $36				stx 	zTemp0 						; write end character
.a403	98		tya				tya
.a404	49 ff		eor #$ff			eor 	#$FF
.a406	38		sec				sec
.a407	65 36		adc $36				adc 	zTemp0
.a409	1a		inc a				inc 	a 							; one extra for NULL
.a40a	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a40d					_TOBlockLoop:
.a40d	c4 36		cpy $36				cpy 	zTemp0
.a40f	f0 09		beq $a41a			beq 	_TOBlockExit
.a411	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a414	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a417	c8		iny				iny
.a418	80 f3		bra $a40d			bra 	_TOBlockLoop
.a41a					_TOBlockExit:
.a41a	a9 00		lda #$00			lda 	#0
.a41c	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a41f	60		rts				rts
.a420					TokeniseHexConstant:
.a420	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a422	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a425	e8		inx				inx									; start of quoted string.
.a426	da		phx				phx 								; push start of constant on top
.a427	ca		dex				dex
.a428					_THFindLoop:
.a428	e8		inx				inx
.a429	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a42c	c9 30		cmp #$30			cmp 	#"0"
.a42e	90 0c		bcc $a43c			bcc 	_THFoundEnd
.a430	c9 3a		cmp #$3a			cmp 	#"9"+1
.a432	90 f4		bcc $a428			bcc 	_THFindLoop
.a434	c9 41		cmp #$41			cmp 	#"A"
.a436	90 04		bcc $a43c			bcc 	_THFoundEnd
.a438	c9 47		cmp #$47			cmp 	#"F"+1
.a43a	90 ec		bcc $a428			bcc 	_THFindLoop
.a43c					_THFoundEnd:
.a43c	7a		ply				ply 								; restore start
.a43d	20 01 a4	jsr $a401			jsr 	TOWriteBlockXY 				; output the block
.a440	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a441					TokeniseCalculateHash:
.a441	da		phx				phx
.a442	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a445	a9 00		lda #$00			lda 	#0
.a447					_TCHLoop:
.a447	18		clc				clc
.a448	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a44b	e8		inx				inx
.a44c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a44f	d0 f6		bne $a447			bne 	_TCHLoop
.a451	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a454	fa		plx				plx
.a455	60		rts				rts
.a456					FixLineBufferCase:
.a456	a2 00		ldx #$00			ldx 	#0
.a458					_FLBCLoop:
.a458	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a45b	f0 22		beq $a47f			beq 	_FLBCExit 					; end of string.
.a45d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a45f	f0 11		beq $a472			beq 	_FLBCInQuotes
.a461	e8		inx				inx
.a462	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a464	90 f2		bcc $a458			bcc 	_FLBCLoop
.a466	c9 7b		cmp #$7b			cmp 	#'z'+1
.a468	b0 ee		bcs $a458			bcs 	_FLBCLoop
.a46a	38		sec				sec 								; make U/C
.a46b	e9 20		sbc #$20			sbc 	#32
.a46d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a470	80 e6		bra $a458			bra 	_FLBCLoop
.a472					_FLBCInQuotes:
.a472	e8		inx				inx 								; advance
.a473	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a476	f0 07		beq $a47f			beq 	_FLBCExit 					; exit on EOS
.a478	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a47a	d0 f6		bne $a472			bne 	_FLBCInQuotes
.a47c	e8		inx				inx 								; skip over it
.a47d	80 d9		bra $a458			bra 	_FLBCLoop
.a47f					_FLBCExit:
.a47f	60		rts				rts
.a480					TokeniseExtractLineNumber:
.a480	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a483	48		pha				pha
.a484	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a487	48		pha				pha
.a488	20 be a4	jsr $a4be			jsr 	_TELNTimes2 				; line # x 4
.a48b	20 be a4	jsr $a4be			jsr 	_TELNTimes2 				; line # x 2
.a48e	18		clc				clc 								; add stacked value
.a48f	68		pla				pla
.a490	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a493	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a496	68		pla				pla
.a497	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a49a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a49d	20 be a4	jsr $a4be			jsr 	_TELNTimes2 				; line # x 10
.a4a0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a4a3	e8		inx				inx
.a4a4	29 0f		and #$0f			and 	#15 						; add to line #
.a4a6	18		clc				clc
.a4a7	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a4aa	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a4ad	90 03		bcc $a4b2			bcc 	_TLENNoCarry
.a4af	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a4b2					_TLENNoCarry:
.a4b2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a4b5	c9 30		cmp #$30			cmp 	#'0'
.a4b7	90 04		bcc $a4bd			bcc 	_TLENExit
.a4b9	c9 3a		cmp #$3a			cmp 	#'9'+1
.a4bb	90 c3		bcc $a480			bcc 	TokeniseExtractLineNumber
.a4bd					_TLENExit:
.a4bd	60		rts				rts
.a4be					_TELNTimes2:
.a4be	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a4c1	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a4c4	60		rts				rts
.a4c5					TokeniseWriteByte:
.a4c5	da		phx				phx
.a4c6	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a4c9	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a4cc	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a4cf	fa		plx				plx
.a4d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a4d1					CheckCreateVariableRecord:
.a4d1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a4d3	85 36		sta $36				sta 	0+zTemp0
.a4d5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a4d7	85 37		sta $37				sta 	1+zTemp0
.a4d9					_CCVSearch:
.a4d9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a4db	f0 2c		beq $a509			beq 	_CCVFail
.a4dd	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a4df	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a4e1	cd 83 04	cmp $0483			cmp 	identHash
.a4e4	d0 16		bne $a4fc			bne 	_CCVNext
.a4e6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a4e8	ae 80 04	ldx $0480			ldx 	identStart
.a4eb					_CCVCompare:
.a4eb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a4ee	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a4f0	e8		inx				inx 								; advance pointers
.a4f1	c8		iny				iny
.a4f2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a4f3	d0 07		bne $a4fc			bne 	_CCVNext  					; didn't match go to next.
.a4f5	90 f4		bcc $a4eb			bcc 	_CCVCompare 				; not finished yet.
.a4f7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a4fa	f0 41		beq $a53d			beq 	_CCVFound 					; yes, we were successful
.a4fc					_CCVNext:
.a4fc	18		clc				clc
.a4fd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a4ff	65 36		adc $36				adc 	zTemp0
.a501	85 36		sta $36				sta 	zTemp0
.a503	90 d4		bcc $a4d9			bcc 	_CCVSearch
.a505	e6 37		inc $37				inc 	zTemp0+1
.a507	80 d0		bra $a4d9			bra 	_CCVSearch
.a509					_CCVFail:
.a509	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a50b	ad 83 04	lda $0483			lda 	identHash
.a50e	91 36		sta ($36),y			sta 	(zTemp0),y
.a510	c8		iny				iny 								; offset 2 is the type byte
.a511	ad 84 04	lda $0484			lda 	identTypeByte
.a514	91 36		sta ($36),y			sta 	(zTemp0),y
.a516	c8		iny				iny
.a517					_CCVData:
.a517	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a519	91 36		sta ($36),y			sta 	(zTemp0),y
.a51b	c8		iny				iny
.a51c	c0 08		cpy #$08			cpy 	#8
.a51e	90 f7		bcc $a517			bcc 	_CCVData
.a520	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a523					_CCVCopyName:
.a523	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a526	91 36		sta ($36),y			sta 	(zTemp0),y
.a528	e8		inx				inx
.a529	c8		iny				iny
.a52a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a52d	d0 f4		bne $a523			bne 	_CCVCopyName
.a52f	98		tya				tya 								; patch offset
.a530	92 36		sta ($36)			sta 	(zTemp0)
.a532	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a534	91 36		sta ($36),y			sta 	(zTemp0),y
.a536	88		dey				dey
.a537	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a539	09 80		ora #$80			ora 	#$80
.a53b	91 36		sta ($36),y			sta 	(zTemp0),y
.a53d					_CCVFound:
.a53d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a53f	38		sec				sec
.a540	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a542	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a544	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a547	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a549	20 c5 a4	jsr $a4c5			jsr 	TokeniseWriteByte
.a54c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
