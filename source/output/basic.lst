
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Dec 16 21:20:13 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_DEEKLPAREN                       = $87; $87 DEEK(
=$88						KWD_EVENTLPAREN                      = $88; $88 EVENT(
=$89						KWD_FALSE                            = $89; $89 FALSE
=$8a						KWD_FRACLPAREN                       = $8a; $8a FRAC(
=$8b						KWD_HITLPAREN                        = $8b; $8b HIT(
=$8c						KWD_INTLPAREN                        = $8c; $8c INT(
=$8d						KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e						KWD_JOYBLPAREN                       = $8e; $8e JOYB(
=$8f						KWD_JOYXLPAREN                       = $8f; $8f JOYX(
=$90						KWD_JOYYLPAREN                       = $90; $90 JOYY(
=$91						KWD_LEFTDOLLARLPAREN                 = $91; $91 LEFT$(
=$92						KWD_LENLPAREN                        = $92; $92 LEN(
=$93						KWD_MAXLPAREN                        = $93; $93 MAX(
=$94						KWD_MIDDOLLARLPAREN                  = $94; $94 MID$(
=$95						KWD_MINLPAREN                        = $95; $95 MIN(
=$96						KWD_NOTLPAREN                        = $96; $96 NOT(
=$97						KWD_PEEKLPAREN                       = $97; $97 PEEK(
=$98						KWD_PLAYINGLPAREN                    = $98; $98 PLAYING(
=$99						KWD_RANDOMLPAREN                     = $99; $99 RANDOM(
=$9a						KWD_RIGHTDOLLARLPAREN                = $9a; $9a RIGHT$(
=$9b						KWD_RNDLPAREN                        = $9b; $9b RND(
=$9c						KWD_SGNLPAREN                        = $9c; $9c SGN(
=$9d						KWD_SPCLPAREN                        = $9d; $9d SPC(
=$9e						KWD_STRDOLLARLPAREN                  = $9e; $9e STR$(
=$9f						KWD_TIMERLPAREN                      = $9f; $9f TIMER(
=$a0						KWD_TRUE                             = $a0; $a0 TRUE
=$a1						KWD_VALLPAREN                        = $a1; $a1 VAL(
=$a2						KWD_FOR                              = $a2; $a2 FOR
=$a3						KWD_IF                               = $a3; $a3 IF
=$a4						KWD_PROC                             = $a4; $a4 PROC
=$a5						KWD_REPEAT                           = $a5; $a5 REPEAT
=$a6						KWD_WHILE                            = $a6; $a6 WHILE
=$a7						KWD_ENDIF                            = $a7; $a7 ENDIF
=$a8						KWD_ENDPROC                          = $a8; $a8 ENDPROC
=$a9						KWD_NEXT                             = $a9; $a9 NEXT
=$aa						KWD_THEN                             = $aa; $aa THEN
=$ab						KWD_UNTIL                            = $ab; $ab UNTIL
=$ac						KWD_WEND                             = $ac; $ac WEND
=$ad						KWD_BY                               = $ad; $ad BY
=$ae						KWD_CALL                             = $ae; $ae CALL
=$af						KWD_CIRCLE                           = $af; $af CIRCLE
=$b0						KWD_CLEAR                            = $b0; $b0 CLEAR
=$b1						KWD_CLS                              = $b1; $b1 CLS
=$b2						KWD_COLOR                            = $b2; $b2 COLOR
=$b3						KWD_COLOUR                           = $b3; $b3 COLOUR
=$b4						KWD_DATA                             = $b4; $b4 DATA
=$b5						KWD_DIM                              = $b5; $b5 DIM
=$b6						KWD_DOKE                             = $b6; $b6 DOKE
=$b7						KWD_DOWNTO                           = $b7; $b7 DOWNTO
=$b8						KWD_ELSE                             = $b8; $b8 ELSE
=$b9						KWD_FROM                             = $b9; $b9 FROM
=$ba						KWD_GFX                              = $ba; $ba GFX
=$bb						KWD_GOSUB                            = $bb; $bb GOSUB
=$bc						KWD_GOTO                             = $bc; $bc GOTO
=$bd						KWD_HERE                             = $bd; $bd HERE
=$be						KWD_IMAGE                            = $be; $be IMAGE
=$bf						KWD_INPUT                            = $bf; $bf INPUT
=$c0						KWD_LET                              = $c0; $c0 LET
=$c1						KWD_LINE                             = $c1; $c1 LINE
=$c2						KWD_LOCAL                            = $c2; $c2 LOCAL
=$c3						KWD_OFF                              = $c3; $c3 OFF
=$c4						KWD_ON                               = $c4; $c4 ON
=$c5						KWD_OUTLINE                          = $c5; $c5 OUTLINE
=$c6						KWD_PALETTE                          = $c6; $c6 PALETTE
=$c7						KWD_PLOT                             = $c7; $c7 PLOT
=$c8						KWD_POKE                             = $c8; $c8 POKE
=$c9						KWD_PRINT                            = $c9; $c9 PRINT
=$ca						KWD_READ                             = $ca; $ca READ
=$cb						KWD_RECT                             = $cb; $cb RECT
=$cc						KWD_REM                              = $cc; $cc REM
=$cd						KWD_RETURN                           = $cd; $cd RETURN
=$ce						KWD_SOLID                            = $ce; $ce SOLID
=$cf						KWD_SOUND                            = $cf; $cf SOUND
=$d0						KWD_SPRITE                           = $d0; $d0 SPRITE
=$d1						KWD_TEXT                             = $d1; $d1 TEXT
=$d2						KWD_TO                               = $d2; $d2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a2						KWC_FIRST_STRUCTURE = $a2
=$a7						KWC_FIRST_STRUCTURE_DEC = $a7
=$ac						KWC_LAST_STRUCTURE = $ac
=$83						KWC_FIRST_UNARY = $83
=$a1						KWC_LAST_UNARY = $a1

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 71 80	jmp $8071	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 99 a2	jsr $a299		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInputSingleCharacter:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 cd a2	jsr $a2cd		jsr	Export_EXTInputSingleCharacter
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTBreakCheck:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 f3 a2	jsr $a2f3		jsr	Export_EXTBreakCheck
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTReadController:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 f6 a2	jsr $a2f6		jsr	Export_EXTReadController
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						EXTInputLine:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 af a1	jsr $a1af		jsr	Export_EXTInputLine
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						GXGraphicDraw:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 0e a8	jsr $a80e		jsr	Export_GXGraphicDraw
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDCommand:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 ff ba	jsr $baff		jsr	Export_SNDCommand
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						SNDUpdate:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 32 bb	jsr $bb32		jsr	Export_SNDUpdate
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKListConvertLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 f5 b4	jsr $b4f5		jsr	Export_TKListConvertLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						TKTokeniseLine:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 89 b7	jsr $b789		jsr	Export_TKTokeniseLine
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8071		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8073		9a		txs				txs
.8074		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8076		09 80		ora #$80			ora 	#$80
.8078		85 00		sta $00				sta 	0
.807a		20 e7 a5	jsr $a5e7			jsr		UpdateFont 					; update font if between FPGA updates.
.807d		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.8080		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8082		aa		tax				tax
.8083		a8		tay				tay
.8084		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.8087		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8089		20 49 80	jsr $8049			jsr 	SNDCommand
.808c		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.808e		a9 9c		lda #$9c			lda 	#Prompt & $FF
.8090		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA
.8093		20 43 8a	jsr $8a43			jsr 	NewProgram 					; erase current program
.8096		4c e7 83	jmp $83e7			jmp 	WarmStart					; make same size.
.8099		4c e7 83	jmp $83e7			jmp 	WarmStart
.809c						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>809c		41 6c 70 68 61 20 31 36			.text "Alpha 16 built 16-Dec-22. "
>80a4		20 62 75 69 6c 74 20 31 36 2d 44 65 63 2d 32 32
>80b4		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80b6		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80b9						AssembleGroup1:
.80b9		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80bb		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80be		80 02		bra $80c2			bra 	AsmGroup12
.80c0						AssembleGroup2:
.80c0		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80c2						AsmGroup12:
.80c2		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80c5		68		pla				pla 								; pop the return address to access the information following.
.80c6		fa		plx				plx
.80c7		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get opcode and save as base
.80ca		8d 24 04	sta $0424			sta 	BaseOpcode
.80cd		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80d0		d0 08		bne $80da			bne 	_AG12HaveMask
.80d2		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80d4		20 56 81	jsr $8156			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80d7		8d 25 04	sta $0425			sta 	ModeMask
.80da						_AG12HaveMask:
.80da		20 8a 82	jsr $828a			jsr 	TypeAndCalculateOperand 	; get zero page type
.80dd		da		phx				phx 								; save found address mode
.80de		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80e1		fa		plx				plx  								; restore address mode
.80e2		b0 0b		bcs $80ef			bcs 	_AG12Exit
.80e4		20 f0 80	jsr $80f0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80e7		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80ea		b0 03		bcs $80ef			bcs 	_AG12Exit
.80ec		4c b6 9f	jmp $9fb6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ef						_AG12Exit:
.80ef		60		rts				rts
.80f0						PromoteToAbsolute:
.80f0		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80f2		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80f4		f0 19		beq $810f			beq 	_PTADo
.80f6		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80f8		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80fa		f0 13		beq $810f			beq 	_PTADo
.80fc		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80fe		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8100		f0 0d		beq $810f			beq 	_PTADo
.8102		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8104		e0 d1		cpx #$d1			cpx 	#AM_IND
.8106		f0 07		beq $810f			beq 	_PTADo
.8108		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.810a		e0 c0		cpx #$c0			cpx 	#AM_INDX
.810c		f0 01		beq $810f			beq 	_PTADo
.810e		60		rts				rts
.810f						_PTADo:
.810f		aa		tax				tax
.8110		60		rts				rts
.8111						AssembleGroup3:
.8111		68		pla				pla 								; get parameters, which is just the opcode.
.8112		fa		plx				plx
.8113		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get and output opcode
.8116		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8119		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get a 16 bit operand
.811c		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.811e		38		sec				sec
.811f		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8122		48		pha				pha 								; LSB in A
.8123		a5 60		lda $60				lda 	NSMantissa1
.8125		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8128		aa		tax				tax 								; MSB in X
.8129		68		pla				pla
.812a		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.812b		69 7f		adc #$7f			adc 	#$7F
.812d		90 01		bcc $8130			bcc 	_AG3NoCarry
.812f		e8		inx				inx
.8130						_AG3NoCarry:
.8130		38		sec				sec 								; fix back and write out anyways.
.8131		e9 80		sbc #$80			sbc 	#$80
.8133		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8136		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8138		f0 0a		beq $8144			beq 	_AG3Exit
.813a		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.813d		29 01		and #$01			and 	#1
.813f		f0 03		beq $8144			beq 	_AG3Exit
.8141		4c bb 9f	jmp $9fbb			jmp 	RangeError 					; no, branch is out of range
.8144						_AG3Exit:
.8144		60		rts				rts
.8145						AssembleGroup4:
.8145		68		pla				pla 								; pop address
.8146		fa		plx				plx
.8147		20 4e 81	jsr $814e			jsr 	AccessParameters 			; access and get first
.814a		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 			; output it.
.814d		60		rts				rts
.814e						AccessParameters:
.814e		8d 21 04	sta $0421			sta 	ParamStart
.8151		8e 22 04	stx $0422			stx 	ParamStart+1
.8154		a9 01		lda #$01			lda 	#1
.8156						GetParameter:
.8156		5a		phy				phy
.8157		a8		tay				tay
.8158		ad 21 04	lda $0421			lda 	ParamStart
.815b		85 36		sta $36				sta 	zTemp0
.815d		ad 22 04	lda $0422			lda 	ParamStart+1
.8160		85 37		sta $37				sta 	zTemp0+1
.8162		b1 36		lda ($36),y			lda 	(zTemp0),y
.8164		7a		ply				ply
.8165		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8166						AssemblerWriteByte:
.8166		48		pha			pha
.8167		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.816a		29 02		and #$02		and 	#2
.816c		f0 1b		beq $8189		beq 	_AWBNoPrint
.816e		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8171		20 a4 81	jsr $81a4		jsr 	PrintHex
.8174		ad 1e 04	lda $041e		lda		AssemblerAddress
.8177		20 a4 81	jsr $81a4		jsr 	PrintHex
.817a		a9 20		lda #$20		lda 	#' '
.817c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.817f		68		pla			pla 									; print byte
.8180		48		pha			pha
.8181		20 a4 81	jsr $81a4		jsr 	PrintHex
.8184		a9 0d		lda #$0d		lda 	#13
.8186		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8189						_AWBNoPrint:
.8189		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.818c		85 36		sta $36			sta 	zTemp0
.818e		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.8191		f0 0e		beq $81a1		beq 	_AWBRange
.8193		85 37		sta $37			sta 	zTemp0+1
.8195		68		pla			pla 									; write byte out
.8196		92 36		sta ($36)		sta 	(zTemp0)
.8198		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.819b		d0 03		bne $81a0		bne 	_AWBNoCarry
.819d		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81a0						_AWBNoCarry:
.81a0		60		rts			rts
.81a1						_AWBRange:
.81a1		4c bb 9f	jmp $9fbb		jmp 	RangeError
.81a4						PrintHex:
.81a4		48		pha				pha
.81a5		4a		lsr a				lsr 	a
.81a6		4a		lsr a				lsr 	a
.81a7		4a		lsr a				lsr 	a
.81a8		4a		lsr a				lsr 	a
.81a9		20 ad 81	jsr $81ad			jsr 	_PrintNibble
.81ac		68		pla				pla
.81ad						_PrintNibble:
.81ad		29 0f		and #$0f			and 	#15
.81af		c9 0a		cmp #$0a			cmp 	#10
.81b1		90 02		bcc $81b5			bcc 	_NoShift
.81b3		69 06		adc #$06			adc 	#6
.81b5						_NoShift:
.81b5		69 30		adc #$30			adc 	#48
.81b7		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81ba						AssembleModeX:
.81ba		5a		phy				phy
.81bb		ad 23 04	lda $0423			lda 	IsGroup1
.81be		f0 17		beq $81d7			beq 	_AMXGroup2
.81c0		8a		txa				txa 							; is it in group # 1
.81c1		29 40		and #$40			and 	#AM_ISG1
.81c3		f0 4d		beq $8212			beq 	_AMXFail 				; no, give up.
.81c5		8a		txa				txa 							; get back.
.81c6		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81c8		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81ca		d0 22		bne $81ee			bne 	_AMXHaveInfo
.81cc		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81cf		c9 81		cmp #$81			cmp 	#$81
.81d1		f0 3f		beq $8212			beq 	_AMXFail
.81d3		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81d5		80 17		bra $81ee			bra 	_AMXHaveInfo 			; odd design decision there.
.81d7						_AMXGroup2:
.81d7		8a		txa				txa 							; is it in group 2 ?
.81d8		29 20		and #$20			and 	#AM_ISG2
.81da		f0 36		beq $8212			beq 	_AMXFail 				; no, give up.
.81dc		8a		txa				txa 							; get the offset into Y
.81dd		29 1f		and #$1f			and 	#$1F
.81df		4a		lsr a				lsr 	a 						; make it 0-7.
.81e0		4a		lsr a				lsr  	a
.81e1		a8		tay				tay
.81e2		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81e5						_AMXCheckOkay:
.81e5		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81e6		88		dey				dey
.81e7		10 fc		bpl $81e5			bpl 	_AMXCheckOkay
.81e9		90 27		bcc $8212			bcc 	_AMXFail 				; not allowed.
.81eb		8a		txa				txa  							; get mask back
.81ec		29 1f		and #$1f			and 	#$1F
.81ee						_AMXHaveInfo:
.81ee		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81f0		10 04		bpl $81f6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81f2		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81f4		d0 1c		bne $8212			bne 	_AMXFail
.81f6						_AMXAnySize:
.81f6		18		clc				clc 							; add offset to the base opcode
.81f7		6d 24 04	adc $0424			adc 	BaseOpcode
.81fa						_AMXOutputCode:
.81fa		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 		; write the opcode out.
.81fd		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.81ff		f0 0e		beq $820f			beq 	_AMXExit
.8201		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8203		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8206		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8208		30 05		bmi $820f			bmi 	_AMXExit
.820a		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.820c		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.820f						_AMXExit:
.820f		7a		ply				ply
.8210		38		sec				sec
.8211		60		rts				rts
.8212						_AMXFail:
.8212		a0 00		ldy #$00			ldy 	#0
.8214						_AMXCheckOddities:
.8214		8a		txa				txa
.8215		d9 3c 82	cmp $823c,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8218		d0 15		bne $822f			bne 	_AMXCONext
.821a		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.821d		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8220		d0 0d		bne $822f			bne 	_AMXCONext
.8222		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8224		10 04		bpl $822a			bpl 	_AMXCONotZero
.8226		a5 60		lda $60				lda 	NSMantissa1
.8228		d0 05		bne $822f			bne 	_AMXCONext
.822a						_AMXCONotZero:
.822a		b9 3b 82	lda $823b,y			lda 	ExtraOpcode+1,y 		; get new opcode
.822d		80 cb		bra $81fa			bra 	_AMXOutputCode 			; and assemble it
.822f						_AMXCONext:
.822f		c8		iny				iny
.8230		c8		iny				iny
.8231		c8		iny				iny
.8232		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; end of table
.8235		d0 dd		bne $8214			bne 	_AMXCheckOddities
.8237						_AMXCOFail:
.8237		7a		ply				ply
.8238		18		clc				clc
.8239		60		rts				rts
.823a						ExtraOpcode:
>823a		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>823d		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8240		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8243		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8246		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8249		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>824c		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>824f		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8252		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8255		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8258		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8259						LabelHere:
.8259		c8		iny				iny 								; skip .
.825a		a2 00		ldx #$00			ldx 	#0 							; get a term
.825c		20 5f 98	jsr $985f			jsr 	EvaluateTerm
.825f		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8261		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8263		d0 22		bne $8287			bne 	_ALType 					; otherwise typing error
.8265		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8267		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8269		b5 60		lda $60,x			lda 	NSMantissa1,x
.826b		85 37		sta $37				sta 	zTemp0+1
.826d		5a		phy				phy 								; copy address in (64k)
.826e		a0 01		ldy #$01			ldy 	#1
.8270		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8273		92 36		sta ($36)			sta 	(zTemp0)
.8275		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8278		91 36		sta ($36),y			sta 	(zTemp0),y
.827a		c8		iny				iny
.827b		a9 00		lda #$00			lda 	#0 							; zero the rest.
.827d		91 36		sta ($36),y			sta 	(zTemp0),y
.827f		c8		iny				iny
.8280		91 36		sta ($36),y			sta 	(zTemp0),y
.8282		c8		iny				iny
.8283		91 36		sta ($36),y			sta 	(zTemp0),y
.8285		7a		ply				ply
.8286		60		rts				rts
.8287						_ALType:
.8287		4c c0 9f	jmp $9fc0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.828a						TypeAndCalculateOperand:
.828a		b1 30		lda ($30),y			lda 	(codePtr),y
.828c		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.828e		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8290		f0 5b		beq $82ed			beq 	_TACOExit
.8292		c9 80		cmp #$80			cmp 	#KWC_EOL
.8294		f0 57		beq $82ed			beq 	_TACOExit
.8296		c8		iny				iny
.8297		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8299		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.829b		f0 51		beq $82ee			beq 	CalculateOperand
.829d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.829f		f0 1f		beq $82c0			beq 	_TACOIndirect
.82a1		88		dey				dey 								; undo get of first character
.82a2		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get operand
.82a5		b1 30		lda ($30),y			lda 	(codePtr),y
.82a7		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82a9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ab		d0 40		bne $82ed			bne 	_TACOExit
.82ad		c8		iny				iny
.82ae		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82b1		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82b3		c9 58		cmp #$58			cmp 	#'X'
.82b5		f0 36		beq $82ed			beq 	_TACOExit
.82b7		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82b9		c9 59		cmp #$59			cmp 	#'Y'
.82bb		f0 30		beq $82ed			beq 	_TACOExit
.82bd						_TACOSyntax:
.82bd		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.82c0						_TACOIndirect:
.82c0		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get the operand
.82c3		b1 30		lda ($30),y			lda 	(codePtr),y
.82c5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82c7		f0 17		beq $82e0			beq 	_TACOIndX
.82c9		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82cc		b1 30		lda ($30),y			lda 	(codePtr),y
.82ce		a2 d1		ldx #$d1			ldx 	#AM_IND
.82d0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82d2		d0 19		bne $82ed			bne 	_TACOExit
.82d4		c8		iny				iny
.82d5		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82d8		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82da		d0 e1		bne $82bd			bne 	_TACOSyntax
.82dc		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82de		80 0d		bra $82ed			bra 	_TACOExit
.82e0						_TACOIndX:
.82e0		c8		iny				iny
.82e1		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e4		c9 58		cmp #$58			cmp 	#'X' 						; check X
.82e6		d0 d5		bne $82bd			bne 	_TACOSyntax
.82e8		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket			; check )
.82eb		a2 c0		ldx #$c0			ldx 	#AM_INDX
.82ed						_TACOExit:
.82ed		60		rts				rts
.82ee						CalculateOperand:
.82ee		48		pha				pha
.82ef		da		phx				phx
.82f0		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82f2		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.82f5		fa		plx				plx
.82f6		68		pla				pla
.82f7		60		rts				rts
.82f8						TACOCheckXY:
.82f8		b1 30		lda ($30),y			lda 	(codePtr),y
.82fa		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82fc		c9 40		cmp #$40			cmp 	#$40
.82fe		d0 21		bne $8321			bne 	_TCXYFail
.8300		b1 30		lda ($30),y			lda 	(codePtr),y
.8302		18		clc				clc
.8303		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8305		85 37		sta $37				sta 	zTemp0+1
.8307		c8		iny				iny
.8308		b1 30		lda ($30),y			lda 	(codePtr),y
.830a		c8		iny				iny
.830b		85 36		sta $36				sta 	zTemp0
.830d		5a		phy				phy 								; save position
.830e		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8310		b1 36		lda ($36),y			lda 	(zTemp0),y
.8312		d0 0c		bne $8320			bne 	_TCXYPopFail
.8314		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8316		b1 36		lda ($36),y			lda 	(zTemp0),y
.8318		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.831a		f0 08		beq $8324			beq 	_TCXYFound
.831c		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.831e		f0 04		beq $8324			beq 	_TCXYFound
.8320						_TCXYPopFail:
.8320		7a		ply				ply
.8321						_TCXYFail:
.8321		a9 00		lda #$00			lda 	#0
.8323		60		rts				rts
.8324						_TCXYFound:
.8324		7a		ply				ply 								; restore position
.8325		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8327		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8328						BackloadProgram:
.8328		20 43 8a	jsr $8a43			jsr 	NewProgram 					; does the actual NEW.
.832b		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.832d		a9 7f		lda #$7f			lda 	#_BLLoad & $FF
.832f		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA
.8332		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8334		8d 59 06	sta $0659			sta 	BackLoadPage
.8337		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8339		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.833c		a9 60		lda #$60			lda 	#(($6000) >> 8)
.833e		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8341		a9 ff		lda #$ff			lda 	#$FF
.8343		8d fa ff	sta $fffa			sta 	$FFFA
.8346						_BPLoop:
.8346		a2 ff		ldx #$ff			ldx 	#$FF
.8348		20 94 83	jsr $8394			jsr 	BLReadByte 					; read a byte
.834b		c9 00		cmp #$00			cmp 	#0
.834d		f0 29		beq $8378			beq 	_BPExit 					; if 0 exit
.834f		30 27		bmi $8378			bmi 	_BPExit 					; if -ve exit
.8351						_BPCopy:
.8351		e8		inx				inx  								; copy byte into the lineBuffer
.8352		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8355		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8358		20 94 83	jsr $8394			jsr 	BLReadByte 					; read next byte
.835b		30 0a		bmi $8367			bmi 	_BPEndLine 					; -ve = EOL
.835d		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.835f		d0 02		bne $8363			bne 	_BPNotTab
.8361		a9 20		lda #$20			lda 	#' '
.8363						_BPNotTab:
.8363		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8365		b0 ea		bcs $8351			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8367						_BPEndLine:
.8367		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line.
.836a		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number = 0
.836d		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.8370		f0 d4		beq $8346			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8372		38		sec				sec 								; append not insert
.8373		20 10 a5	jsr $a510			jsr 	MemoryInsertLine 			; append to current program
.8376		80 ce		bra $8346			bra 	_BPLoop
.8378						_BPExit:
.8378		9c fa ff	stz $fffa			stz 	$FFFA
.837b		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variables etc.
.837e		60		rts				rts
.837f						_BLLoad:
>837f		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8387		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8394						BLReadByte:
.8394		da		phx				phx
.8395		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8397		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.839a		85 0b		sta $0b				sta 	8+3
.839c		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.839f		85 36		sta $36				sta 	zTemp0
.83a1		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83a4		85 37		sta $37				sta 	zTemp0+1
.83a6		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83a8		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ab		d0 0f		bne $83bc			bne 	_BLNoCarry
.83ad		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83b0		10 0a		bpl $83bc			bpl 	_BLNoCarry 					; need a new page
.83b2		48		pha				pha
.83b3		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83b5		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83b8		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83bb		68		pla				pla
.83bc						_BLNoCarry:
.83bc		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83be		fa		plx				plx
.83bf		c9 00		cmp #$00			cmp 	#0
.83c1		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83c2						EditProgramCode:
.83c2		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; try to find the line.
.83c5		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1
.83c8		20 b4 a5	jsr $a5b4			jsr 	MemorySearch
.83cb		90 05		bcc $83d2			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83cd		d0 03		bne $83d2			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83cf		20 d9 a4	jsr $a4d9			jsr 	MemoryDeleteLine 			; delete the line
.83d2						_EPCNoDelete:
.83d2		ad 2d 04	lda $042d			lda 	TokenBuffer 				; buffer empty - we just want to delete a line.
.83d5		c9 80		cmp #$80			cmp 	#KWC_EOL
.83d7		f0 0d		beq $83e6			beq 	_EPCNoInsert
.83d9		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83dc		ae 2c 04	ldx $042c			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83df		20 b4 a5	jsr $a5b4			jsr 	MemorySearch
.83e2		18		clc				clc 								; insert at this point.
.83e3		20 10 a5	jsr $a510			jsr 	MemoryInsertLine 			; insert the line
.83e6						_EPCNoInsert:
.83e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83e7						WarmStart:
.83e7		a2 ff		ldx #$ff			ldx 	#$FF
.83e9		9a		txs				txs
.83ea		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.83ec		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.83ef		20 35 80	jsr $8035			jsr 	EXTInputLine 				; get line to lineBuffer
.83f2		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line
.83f5		ad 2b 04	lda $042b			lda 	TokenLineNumber 			; line number <> 0
.83f8		0d 2c 04	ora $042c			ora 	TokenLineNumber+1
.83fb		d0 17		bne $8414			bne 	_WSEditCode 				; if so,edit code.
.83fd		9c 2a 04	stz $042a			stz 	TokenOffset 				; zero the "offset", meaning it only runs one line.
.8400		a9 2a		lda #$2a			lda 	#((TokenOffset) & $FF)
.8402		85 30		sta $30				sta 	codePtr
.8404		a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8406		85 31		sta $31				sta 	codePtr+1
.8408		ad 2d 04	lda $042d			lda 	TokenBuffer 				; nothing to run
.840b		c9 80		cmp #$80			cmp 	#KWC_EOL
.840d		f0 d8		beq $83e7			beq 	WarmStart
.840f		20 96 8b	jsr $8b96			jsr 	RUNCodePointerLine 			; execute that line.
.8412		80 d3		bra $83e7			bra 	WarmStart
.8414						_WSEditCode:
.8414		20 c2 83	jsr $83c2			jsr 	EditProgramCode 			; edit the program code
.8417		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear all variables etc.
.841a		80 cb		bra $83e7			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.841c						AssembleCommand:
.841c		a2 00		ldx #$00			ldx 	#0
.841e		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; start address
.8421		a5 58		lda $58				lda 	NSMantissa0
.8423		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8426		a5 60		lda $60				lda 	NSMantissa1
.8428		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.842b		20 00 8f	jsr $8f00			jsr 	CheckComma
.842e		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; options 0-3
.8431		a5 58		lda $58				lda 	NSMantissa0
.8433		8d 20 04	sta $0420			sta 	AssemblerControl
.8436		60		rts				rts
.8437		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8438						AssertCommand:
.8438		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.843a		20 a5 9d	jsr $9da5			jsr 	EvaluateInteger 			; the assert test
.843d		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; exit if result is non zero.
.8440		d0 05		bne $8447			bne 	_ACExit
.8442		a9 0a		lda #$0a		lda	#10
.8444		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.8447						_ACExit:
.8447		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8448						CallCommand:
.8448		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.844a		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.844d						_CCClear
.844d		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.844e		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; these are optional sequentially.
.8451		e0 04		cpx #$04			cpx 	#4
.8453		d0 f8		bne $844d			bne 	_CCClear
.8455		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8457						_CCCParam:
.8457		b1 30		lda ($30),y			lda 	(codePtr),y
.8459		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.845b		d0 09		bne $8466			bne 	_CCCRun6502
.845d		c8		iny				iny 								; skip comma
.845e		e8		inx				inx	 								; next level
.845f		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8462		e0 03		cpx #$03			cpx 	#3
.8464		90 f1		bcc $8457			bcc 	_CCCParam 					; done all 3 ?
.8466						_CCCRun6502:
.8466		5a		phy				phy 								; save position
.8467		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8469		85 37		sta $37				sta 	zTemp0+1
.846b		a5 58		lda $58				lda 	NSMantissa0
.846d		85 36		sta $36				sta 	zTemp0
.846f		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8471		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8473		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8475		20 7a 84	jsr $847a			jsr 	_CCCZTemp0 					; call zTemp0
.8478		7a		ply				ply 								; restore position and exit
.8479		60		rts				rts
.847a						_CCCZTemp0:
.847a		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.847d						ClearCommand:
.847d		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.847f		85 36		sta $36				sta 	0+zTemp0
.8481		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8483		85 37		sta $37				sta 	1+zTemp0
.8485						_ClearZeroLoop:
.8485		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8487		f0 24		beq $84ad			beq 	_ClearZeroEnd
.8489		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.848b		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.848d						_ClearOneVariable:
.848d		91 36		sta ($36),y			sta 	(zTemp0),y
.848f		c8		iny				iny
.8490		c0 08		cpy #$08			cpy 	#8
.8492		d0 f9		bne $848d			bne 	_ClearOneVariable
.8494		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8496		b1 36		lda ($36),y			lda 	(zTemp0),y
.8498		c9 18		cmp #$18			cmp 	#NSTProcedure
.849a		d0 04		bne $84a0			bne 	_ClearNotProcedure
.849c		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.849e		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84a0						_ClearNotProcedure:
.84a0		18		clc				clc 								; go to the next variable
.84a1		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84a3		65 36		adc $36				adc 	zTemp0
.84a5		85 36		sta $36				sta 	zTemp0
.84a7		90 dc		bcc $8485			bcc 	_ClearZeroLoop
.84a9		e6 37		inc $37				inc 	zTemp0+1
.84ab		80 d8		bra $8485			bra 	_ClearZeroLoop
.84ad						_ClearZeroEnd:
.84ad		18		clc				clc
.84ae		a5 36		lda $36				lda 	zTemp0
.84b0		69 01		adc #$01			adc 	#1
.84b2		8d 0c 04	sta $040c			sta 	lowMemPtr
.84b5		a5 37		lda $37				lda 	zTemp0+1
.84b7		69 00		adc #$00			adc 	#0
.84b9		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84bc		20 6e af	jsr $af6e			jsr 	StackReset
.84bf		20 d4 af	jsr $afd4			jsr 	StringSystemInitialise
.84c2		20 01 8e	jsr $8e01			jsr 	ProcedureScan
.84c5		20 45 8b	jsr $8b45			jsr 	Command_Restore
.84c8		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84cb		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84ce		9c 20 04	stz $0420			stz 	AssemblerControl
.84d1		20 4b 9a	jsr $9a4b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84d5						ClearScreen:
.84d5		5a		phy				phy
.84d6		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84d8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84db		7a		ply				ply
.84dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84dd						Command_Data:
.84dd		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84df		a2 80		ldx #$80			ldx 	#KWC_EOL
.84e1		20 53 8e	jsr $8e53			jsr 	ScanForward
.84e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e5						DimCommand:
.84e5		b1 30		lda ($30),y			lda 	(codePtr),y
.84e7		29 c0		and #$c0			and 	#$C0
.84e9		c9 40		cmp #$40			cmp 	#$40
.84eb		d0 7a		bne $8567			bne 	_DCSyntax 				; n o, error.
.84ed		b1 30		lda ($30),y			lda 	(codePtr),y
.84ef		18		clc				clc
.84f0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84f2		85 3f		sta $3f				sta 	zaTemp+1
.84f4		c8		iny				iny
.84f5		b1 30		lda ($30),y			lda 	(codePtr),y
.84f7		c8		iny				iny
.84f8		85 3e		sta $3e				sta 	zaTemp
.84fa		5a		phy				phy
.84fb		a0 02		ldy #$02			ldy 	#2 						; read type byte
.84fd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ff		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8501		c9 18		cmp #$18			cmp 	#NSTProcedure
.8503		f0 62		beq $8567			beq 	_DCSyntax
.8505		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8507		29 04		and #$04			and 	#NSBIsArray
.8509		f0 64		beq $856f			beq 	_DCType
.850b		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.850d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850f		d0 59		bne $856a			bne 	_DCRedefine
.8511		7a		ply				ply
.8512		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get array size, check it.
.8515		5a		phy				phy
.8516		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8518		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.851a		7a		ply				ply 							; is there a second (e.g. ,x)
.851b		b1 30		lda ($30),y			lda 	(codePtr),y
.851d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.851f		d0 0a		bne $852b			bne 	_DCOneDimension
.8521		c8		iny				iny 							; skip comma
.8522		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get 2nd array size
.8525		5a		phy				phy
.8526		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8528		91 3e		sta ($3e),y			sta 	(zaTemp),y
.852a		7a		ply				ply
.852b						_DCOneDimension:
.852b		5a		phy				phy 							; save position
.852c		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.852e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8530		aa		tax				tax
.8531		c8		iny				iny
.8532		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8534		e8		inx				inx 							; bump them.
.8535		1a		inc a				inc 	a
.8536		20 e3 9d	jsr $9de3			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8539		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.853b		29 e0		and #$e0			and 	#$E0
.853d		d0 23		bne $8562			bne 	_DCSize
.853f		a0 02		ldy #$02			ldy 	#2 						; get base type
.8541		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8543		20 80 85	jsr $8580			jsr 	ScaleByBaseType 		; scale by base type
.8546		a5 36		lda $36				lda 	zTemp0
.8548		a6 37		ldx $37				ldx 	zTemp0+1
.854a		20 0d 9a	jsr $9a0d			jsr 	AllocateXABytes 		; allocate memory
.854d		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.854f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8551		c8		iny				iny
.8552		8a		txa				txa
.8553		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8555		7a		ply				ply 							; get position back
.8556		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 		; check )
.8559		b1 30		lda ($30),y			lda 	(codePtr),y
.855b		c8		iny				iny 							; consume in case
.855c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.855e		f0 85		beq $84e5			beq 	DimCommand
.8560		88		dey				dey 							; undo consume
.8561		60		rts				rts
.8562						_DCSize:
.8562		a9 16		lda #$16		lda	#22
.8564		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.8567						_DCSyntax:
.8567		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.856a						_DCRedefine:
.856a		a9 15		lda #$15		lda	#21
.856c		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.856f						_DCType:
.856f		4c c0 9f	jmp $9fc0			jmp 	TypeError
.8572						_DCGetSize:
.8572		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8574		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 	; get array dimension
.8577		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8579		f0 e7		beq $8562			beq 	_DCSize
.857b		c9 fe		cmp #$fe			cmp 	#254
.857d		f0 e3		beq $8562			beq 	_DCSize
.857f		60		rts				rts
.8580						ScaleByBaseType:
.8580		29 10		and #$10			and 	#NSBIsString 			; is it string
.8582		d0 19		bne $859d			bne 	_SBBTString
.8584		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8586		48		pha				pha
.8587		a5 36		lda $36				lda 	zTemp0
.8589		48		pha				pha
.858a		06 36		asl $36				asl 	zTemp0 					; x 2
.858c		26 37		rol $37				rol 	zTemp0+1
.858e		06 36		asl $36				asl 	zTemp0 					; x 4
.8590		26 37		rol $37				rol 	zTemp0+1
.8592		68		pla				pla 							; add stacked value = x 5
.8593		65 36		adc $36				adc 	zTemp0
.8595		85 36		sta $36				sta 	zTemp0
.8597		68		pla				pla
.8598		65 37		adc $37				adc 	zTemp0+1
.859a		85 37		sta $37				sta 	zTemp0+1
.859c		60		rts				rts
.859d						_SBBTString:
.859d		06 36		asl $36				asl 	zTemp0
.859f		26 37		rol $37				rol 	zTemp0+1
.85a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dokepoke.asm

.85a2						PokeCommand:
.85a2		18		clc				clc
.85a3		80 01		bra $85a6			bra 	DPCommand
.85a5						DokeCommand:
.85a5		38		sec				sec
.85a6						DPCommand:
.85a6		08		php				php									; save on stack, CS = Doke, CC = Poke
.85a7		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.85a9		20 b8 9d	jsr $9db8			jsr		Evaluate16BitInteger 		; address
.85ac		20 00 8f	jsr $8f00			jsr 	CheckComma
.85af		e8		inx				inx
.85b0		20 b8 9d	jsr $9db8			jsr		Evaluate16BitInteger 		; data
.85b3		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.85b5		85 36		sta $36				sta 	zTemp0
.85b7		a5 60		lda $60				lda 	NSMantissa1
.85b9		85 37		sta $37				sta 	zTemp0+1
.85bb		a5 59		lda $59				lda 	NSMantissa0+1 				; low byte
.85bd		92 36		sta ($36)			sta 	(zTemp0)
.85bf		28		plp				plp 								; done if POKE
.85c0		90 08		bcc $85ca			bcc 	_DPExit
.85c2		5a		phy				phy 								; write high byte out.
.85c3		a0 01		ldy #$01			ldy 	#1
.85c5		a5 61		lda $61				lda 	NSMantissa1+1
.85c7		91 36		sta ($36),y			sta 	(zTemp0),y
.85c9		7a		ply				ply
.85ca						_DPExit:
.85ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85cb						EndCommand:
.85cb		4c e7 83	jmp $83e7			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85ce						ForCommand:
.85ce		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85d0		20 08 af	jsr $af08			jsr 	StackOpen
.85d3		a2 00		ldx #$00			ldx 	#0
.85d5		20 5f 98	jsr $985f			jsr 	EvaluateTerm
.85d8		b5 50		lda $50,x			lda 	NSStatus,x
.85da		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85dc		d0 47		bne $8625			bne		_FCError
.85de		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85e0		20 08 8f	jsr $8f08			jsr 	CheckNextA
.85e3		e8		inx				inx
.85e4		20 a5 9d	jsr $9da5			jsr 	EvaluateInteger 			; <from> in +1
.85e7		b1 30		lda ($30),y			lda 	(codePtr),y
.85e9		c8		iny				iny 								; consume it
.85ea		48		pha				pha 								; save on stack for later
.85eb		c9 b7		cmp #$b7			cmp 	#KWD_DOWNTO
.85ed		f0 04		beq $85f3			beq 	_FCNoSyntax
.85ef		c9 d2		cmp #$d2			cmp 	#KWD_TO
.85f1		d0 35		bne $8628			bne 	_FCSyntaxError
.85f3						_FCNoSyntax:
.85f3		e8		inx				inx
.85f4		20 a5 9d	jsr $9da5			jsr 	EvaluateInteger
.85f7		20 4d af	jsr $af4d			jsr 	STKSaveCodePosition 		; save loop back position
.85fa		68		pla				pla 								; restore DOWNTO or TO
.85fb		5a		phy				phy 								; save Y on the stack
.85fc		49 b7		eor #$b7			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85fe		f0 02		beq $8602			beq 	_FCNotDownTo
.8600		a9 02		lda #$02			lda 	#2
.8602						_FCNotDownTo:
.8602		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8603		a0 10		ldy #$10			ldy 	#16
.8605		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8607		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8609		a5 58		lda $58				lda 	NSMantissa0
.860b		91 34		sta ($34),y			sta 	(basicStack),y
.860d		a5 60		lda $60				lda 	NSMantissa1
.860f		c8		iny				iny
.8610		91 34		sta ($34),y			sta 	(basicStack),y
.8612		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8614		a2 01		ldx #$01			ldx 	#1
.8616		20 2b 86	jsr $862b			jsr 	FCIntegerToStack
.8619		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.861b		a2 02		ldx #$02			ldx 	#2
.861d		20 2b 86	jsr $862b			jsr 	FCIntegerToStack
.8620		20 46 86	jsr $8646			jsr 	CopyIndexToReference
.8623		7a		ply				ply 								; restore position
.8624		60		rts				rts
.8625						_FCError:
.8625		4c c0 9f	jmp $9fc0			jmp 	TypeError
.8628						_FCSyntaxError:
.8628		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.862b						FCIntegerToStack:
.862b		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.862d		10 03		bpl $8632			bpl	 	_FCNotNegative
.862f		20 01 9e	jsr $9e01			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8632						_FCNotNegative:
.8632		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8634		91 34		sta ($34),y			sta 	(basicStack),y
.8636		c8		iny				iny
.8637		b5 60		lda $60,x			lda 	NSMantissa1,x
.8639		91 34		sta ($34),y			sta 	(basicStack),y
.863b		c8		iny				iny
.863c		b5 68		lda $68,x			lda 	NSMantissa2,x
.863e		91 34		sta ($34),y			sta 	(basicStack),y
.8640		c8		iny				iny
.8641		b5 70		lda $70,x			lda 	NSMantissa3,x
.8643		91 34		sta ($34),y			sta 	(basicStack),y
.8645		60		rts				rts
.8646						CopyIndexToReference:
.8646		5a		phy				phy
.8647		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8649		38		sec				sec 								; (because we copy from offset 8)
.864a		b1 34		lda ($34),y			lda 	(basicStack),y
.864c		e9 08		sbc #$08			sbc 	#8
.864e		85 36		sta $36				sta 	zTemp0
.8650		c8		iny				iny
.8651		b1 34		lda ($34),y			lda 	(basicStack),y
.8653		e9 00		sbc #$00			sbc 	#0
.8655		85 37		sta $37				sta 	zTemp0+1
.8657		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8659		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.865b		b1 34		lda ($34),y			lda 	(basicStack),y
.865d		0a		asl a				asl 	a 							; into carry
.865e		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8660		90 14		bcc $8676			bcc 	_CITRNormal
.8662		38		sec				sec
.8663						_CITRNegative:
.8663		a9 00		lda #$00			lda 	#0
.8665		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8667		91 36		sta ($36),y			sta 	(zTemp0),y
.8669		c8		iny				iny
.866a		ca		dex				dex
.866b		d0 f6		bne $8663			bne 	_CITRNegative
.866d		88		dey				dey 								; look at MSB of mantissa
.866e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8670		09 80		ora #$80			ora 	#$80
.8672		91 36		sta ($36),y			sta 	(zTemp0),y
.8674		7a		ply				ply
.8675		60		rts				rts
.8676						_CITRNormal:
.8676		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8678		91 36		sta ($36),y			sta 	(zTemp0),y
.867a		c8		iny				iny
.867b		ca		dex				dex
.867c		d0 f8		bne $8676			bne 	_CITRNormal
.867e		7a		ply				ply 								; and exit.
.867f		60		rts				rts
.8680						NextCommand:
.8680		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8682		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8684		20 35 af	jsr $af35			jsr 	StackCheckFrame
.8687		5a		phy				phy
.8688		a0 10		ldy #$10			ldy 	#16 						; get the step count
.868a		b1 34		lda ($34),y			lda 	(basicStack),y
.868c		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.868e		30 02		bmi $8692			bmi 	_NCStepNeg
.8690		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8692						_NCStepNeg:
.8692		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8694		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8696		18		clc				clc
.8697						_NCBump:
.8697		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8699		91 34		sta ($34),y			sta 	(basicStack),y
.869b		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.869d		c8		iny				iny 								; next byte
.869e		ca		dex				dex 								; do four times
.869f		d0 f6		bne $8697			bne 	_NCBump
.86a1		20 46 86	jsr $8646			jsr		CopyIndexToReference		; copy it to the reference variable.
.86a4		a0 10		ldy #$10			ldy 	#16 						; get step count again
.86a6		b1 34		lda ($34),y			lda 	(basicStack),y
.86a8		0a		asl a				asl 	a 							; sign bit to carry
.86a9		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86ab		85 38		sta $38				sta 	zTemp1
.86ad		90 02		bcc $86b1			bcc 	_NCCompRev 					; use if step is +ve
.86af		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86b1						_NCCompRev:
.86b1		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86b3		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86b5		85 39		sta $39				sta 	zTemp1+1
.86b7		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86b9		38		sec				sec
.86ba						_NCCompare:
.86ba		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86bc		b1 34		lda ($34),y			lda 	(basicStack),y
.86be		a4 39		ldy $39				ldy 	zTemp1+1
.86c0		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86c2		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86c4		e6 39		inc $39				inc 	zTemp1+1
.86c6		ca		dex				dex 								; do it 4 times.
.86c7		d0 f1		bne $86ba			bne 	_NCCompare
.86c9		50 02		bvc $86cd			bvc 	_NCNoOverflow 				; convert to signed comparison
.86cb		49 80		eor #$80			eor 	#$80
.86cd						_NCNoOverflow:
.86cd		7a		ply				ply 								; restore Y position
.86ce		0a		asl a				asl 	a 							; is bit 7 set.
.86cf		90 04		bcc $86d5			bcc 	_NCLoopback 				; if no , >= so loop back
.86d1		20 27 af	jsr $af27			jsr 	StackClose 					; exit the loop
.86d4		60		rts				rts
.86d5						_NCLoopBack:
.86d5		20 5e af	jsr $af5e			jsr 	STKLoadCodePosition 		; loop back
.86d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86d9						Command_GOSUB:
.86d9		a2 00		ldx #$00			ldx 	#0
.86db		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86de		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86e0		20 08 af	jsr $af08			jsr 	StackOpen 					; create frame
.86e3		20 4d af	jsr $af4d			jsr 	STKSaveCodePosition 		; save current position
.86e6		4c fc 86	jmp $86fc			jmp 	GotoStackX
.86e9						Command_RETURN:
.86e9		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86eb		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86ed		20 35 af	jsr $af35			jsr 	StackCheckFrame
.86f0		20 5e af	jsr $af5e			jsr 	STKLoadCodePosition 		; restore code position
.86f3		20 27 af	jsr $af27			jsr 	StackClose
.86f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86f7						GotoCommand:
.86f7		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86f9		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.86fc						GotoStackX:
.86fc		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86fe		48		pha				pha 								; it is slightly inefficient, just in cases.
.86ff		b5 58		lda $58,x			lda 	NSMantissa0,x
.8701		fa		plx				plx
.8702		20 b4 a5	jsr $a5b4			jsr 	MemorySearch 				; transfer to line number AX.
.8705		90 05		bcc $870c			bcc 	_GotoError 					; not found, off end.
.8707		d0 03		bne $870c			bne 	_GotoError 					; not found exactly
.8709		4c 8f 8b	jmp $8b8f			jmp 	RunNewLine 					; and go straight to new line code.
.870c						_GotoError:
.870c		a9 0d		lda #$0d		lda	#13
.870e		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8711						IfCommand:
.8711		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8713		20 86 9d	jsr $9d86			jsr 	EvaluateNumber
.8716		b1 30		lda ($30),y			lda 	(codePtr),y
.8718		c9 aa		cmp #$aa			cmp 	#KWD_THEN  					; could be THEN <stuff>
.871a		d0 0a		bne $8726			bne 	_IFStructured 				; we still support it.
.871c		c8		iny				iny 								; consume THEN
.871d		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; is it zero
.8720		f0 01		beq $8723			beq 	_IfFail 					; if fail, go to next line
.8722		60		rts				rts 								; if THEN just continue
.8723						_IfFail:
.8723		4c 77 8b	jmp $8b77			jmp 	EOLCommand
.8726						_IfStructured:
.8726		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; is it zero
.8729		d0 07		bne $8732			bne 	_IfExit 					; if not, then continue normally.
.872b		a9 b8		lda #$b8			lda 	#KWD_ELSE 					; look for else/endif
.872d		a2 a7		ldx #$a7			ldx 	#KWD_ENDIF
.872f		20 53 8e	jsr $8e53			jsr 	ScanForward 				; and run from there
.8732						_IfExit:
.8732		60		rts				rts
.8733						ElseCode:
.8733		a9 a7		lda #$a7			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8735		aa		tax				tax 								; so just go to the structure exit
.8736		20 53 8e	jsr $8e53			jsr 	ScanForward
.8739		60		rts				rts
.873a						EndIf:
.873a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.873b						Command_Input:
.873b		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.873d		8d 28 04	sta $0428			sta 	IsInputFlag
.8740		80 03		bra $8745			bra 	Command_IP_Main
.8742						Command_Print:
.8742		9c 28 04	stz $0428			stz 	IsInputFlag 				; clear input flag
.8745						Command_IP_Main:
.8745		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8746						_CPLoop:
.8746		08		php				php 								; save last action flag
.8747		b1 30		lda ($30),y			lda 	(codePtr),y
.8749		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.874b		f0 54		beq $87a1			beq 	_CPExit
.874d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874f		f0 50		beq $87a1			beq 	_CPExit
.8751		68		pla				pla 								; throw last action flag
.8752		b1 30		lda ($30),y			lda 	(codePtr),y
.8754		c8		iny				iny
.8755		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8757		f0 45		beq $879e			beq 	_CPContinueWithSameLine
.8759		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.875b		f0 3c		beq $8799			beq 	_CPTab
.875d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.875f		f0 34		beq $8795			beq 	_CPNewLine
.8761		88		dey				dey 								; undo the get.
.8762		20 13 94	jsr $9413			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8765		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8767		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8769		f0 0d		beq $8778			beq 	_CPIsValue 					; no, display it.
.876b		ad 28 04	lda $0428			lda 	IsInputFlag 				; if print, dereference and print.
.876e		f0 05		beq $8775			beq 	_CPIsPrint 					; otherwise display.
.8770		20 aa 87	jsr $87aa			jsr 	CIInputValue 				; input a value to the reference
.8773		80 20		bra $8795			bra 	_CPNewLine
.8775						_CPIsPrint:
.8775		20 d8 96	jsr $96d8			jsr 	Dereference 				; dereference if required.
.8778						_CPIsValue:
.8778		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.877a		29 10		and #$10			and 	#NSBIsString
.877c		f0 09		beq $8787			beq 	_CPNumber
.877e		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8780		a5 58		lda $58				lda 	NSMantissa0
.8782		20 0d 88	jsr $880d			jsr 	CPPrintStringXA
.8785		80 be		bra $8745			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8787						_CPNumber:
.8787		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8789		20 6d 9c	jsr $9c6d			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.878c		a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.878e		a9 49		lda #$49			lda 	#DecimalBuffer & $FF
.8790		20 0d 88	jsr $880d			jsr 	CPPrintStringXA 			; print it.
.8793		80 b0		bra $8745			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8795						_CPNewLine:
.8795		a9 0d		lda #$0d			lda 	#13
.8797		80 02		bra $879b			bra 	_CPPrintChar
.8799						_CPTab:
.8799		a9 09		lda #$09			lda 	#9 							; print TAB
.879b						_CPPrintChar:
.879b		20 20 88	jsr $8820			jsr 	CPPrintVector
.879e						_CPContinueWithSameLine:
.879e		38		sec				sec 								; loop round with carry set, which
.879f		80 a5		bra $8746			bra 	_CPLoop 					; will inhibit final CR
.87a1						_CPExit:
.87a1		28		plp				plp 								; get last action flag
.87a2		b0 05		bcs $87a9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87a4		a9 0d		lda #$0d			lda 	#13 						; print new line
.87a6		20 20 88	jsr $8820			jsr 	CPPrintVector
.87a9						_CPExit2:
.87a9		60		rts				rts
.87aa						CIInputValue:
.87aa		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87ac						_CIInputLine:
.87ac		20 23 88	jsr $8823			jsr 	CPInputVector 				; get key
.87af		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87b1		f0 1f		beq $87d2			beq 	_CIHaveValue
.87b3		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87b5		f0 11		beq $87c8			beq 	_CIBackspace
.87b7		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87b9		90 f1		bcc $87ac			bcc 	_CIInputLine
.87bb		e0 50		cpx #$50			cpx 	#80 						; max length
.87bd		b0 ed		bcs $87ac			bcs 	_CIInputLine
.87bf		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87c2		e8		inx				inx
.87c3		20 20 88	jsr $8820			jsr 	CPPrintVector 				; echo it.
.87c6		80 e4		bra $87ac			bra 	_CIInputLine
.87c8						_CIBackSpace:
.87c8		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87ca		f0 e0		beq $87ac			beq 	_CIInputLine
.87cc		20 20 88	jsr $8820			jsr 	CPPrintVector 				; echo it.
.87cf		ca		dex				dex
.87d0		80 da		bra $87ac			bra 	_CIInputLine
.87d2						_CIHaveValue:
.87d2		9e 2a 05	stz $052a,x			stz 	LineBuffer,x 				; ASCIIZ string now in line buffer.
.87d5		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87d7		29 10		and #$10			and 	#NSBIsString
.87d9		f0 17		beq $87f2			beq 	_CIAssignNumber 			; assign a number
.87db		a2 01		ldx #$01			ldx 	#1
.87dd		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87df		95 58		sta $58,x			sta 	NSMantissa0,x
.87e1		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87e3		95 60		sta $60,x			sta 	NSMantissa1,x
.87e5		74 68		stz $68,x			stz 	NSMantissa2,x
.87e7		74 70		stz $70,x			stz 	NSMantissa3,x
.87e9		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87eb		95 50		sta $50,x			sta  	NSStatus,x
.87ed		ca		dex				dex 								; X = 0
.87ee		20 5f 88	jsr $885f			jsr 	AssignVariable
.87f1		60		rts				rts
.87f2						_CIAssignNumber:
.87f2		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87f4		85 36		sta $36				sta 	zTemp0
.87f6		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87f8		85 37		sta $37				sta 	zTemp0+1
.87fa		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87fc		20 ef 9b	jsr $9bef			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87ff		90 07		bcc $8808			bcc 	_CIIsOkay
.8801		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8803		20 20 88	jsr $8820			jsr 	CPPrintVector
.8806		80 a2		bra $87aa			bra 	CIInputValue
.8808						_CIIsOkay:
.8808		ca		dex				dex 								; X = 0
.8809		20 5f 88	jsr $885f			jsr 	AssignVariable
.880c		60		rts				rts
.880d						CPPrintStringXA:
.880d		5a		phy				phy
.880e		86 37		stx $37				stx 	zTemp0+1
.8810		85 36		sta $36				sta 	zTemp0
.8812		a0 00		ldy #$00			ldy 	#0
.8814						_PSXALoop:
.8814		b1 36		lda ($36),y			lda 	(zTemp0),y
.8816		f0 06		beq $881e			beq 	_PSXAExit
.8818		20 20 88	jsr $8820			jsr 	CPPrintVector
.881b		c8		iny				iny
.881c		80 f6		bra $8814			bra 	_PSXALoop
.881e						_PSXAExit:
.881e		7a		ply				ply
.881f		60		rts				rts
.8820						CPPrintVector:
.8820		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8823						CPInputVector:
.8823		4c 17 80	jmp $8017			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8826						LetCommand:
.8826		a2 00		ldx #$00			ldx 	#0
.8828		b1 30		lda ($30),y			lda 	(codePtr),y
.882a		c9 10		cmp #$10			cmp 	#KWD_AT
.882c		d0 14		bne $8842			bne 	_LCStandard
.882e		c8		iny				iny 								; skip equal
.882f		20 5f 98	jsr $985f			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8832		20 d8 96	jsr $96d8			jsr 	Dereference 				; dereference it to a value
.8835		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8837		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8839		95 50		sta $50,x			sta 	NSStatus,x
.883b		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.883d		d0 0f		bne $884e			bne 	_LCMain
.883f		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; was a reference before.
.8842						_LCStandard:
.8842		ad fd 93	lda $93fd			lda 	PrecedenceLevel+"*"			; precedence > this
.8845		20 17 94	jsr $9417			jsr 	EvaluateExpressionAtPrecedence
.8848		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.884a		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.884c		f0 0e		beq $885c			beq 	_LetGoProc 					; it's a procedure call.
.884e						_LCMain:
.884e		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8850		20 08 8f	jsr $8f08			jsr 	CheckNextA
.8853		e8		inx				inx 								; RHS
.8854		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue
.8857		ca		dex				dex
.8858		20 5f 88	jsr $885f			jsr 	AssignVariable
.885b		60		rts				rts
.885c						_LetGoProc:
.885c		4c 4d 8a	jmp $8a4d			jmp 	CallProcedure
.885f						AssignVariable:
.885f		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8861		48		pha				pha 								; save a copy
.8862		55 51		eor $51,x			eor 	NSStatus+1,x
.8864		29 10		and #$10			and 	#NSBIsString
.8866		d0 0b		bne $8873			bne 	_ASError
.8868		68		pla				pla 								; get back
.8869		29 10		and #$10			and 	#NSBIsString 				; check type
.886b		d0 03		bne $8870			bne 	_ASString
.886d		4c 16 96	jmp $9616			jmp 	AssignNumber
.8870						_ASString:
.8870		4c 74 96	jmp $9674			jmp 	AssignString
.8873						_ASError:
.8873		4c c0 9f	jmp $9fc0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8876						Command_List:
.8876		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8879		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.887b		20 49 80	jsr $8049			jsr 	SNDCommand
.887e		b1 30		lda ($30),y			lda 	(codePtr),y
.8880		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8882		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8884		f0 6e		beq $88f4			beq 	_CLListProcedure
.8886		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8888		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.888a		a9 ff		lda #$ff			lda 	#$FF
.888c		85 5f		sta $5f				sta 	NSMantissa0+7
.888e		85 67		sta $67				sta 	NSMantissa1+7
.8890		b1 30		lda ($30),y			lda 	(codePtr),y
.8892		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8894		f0 1a		beq $88b0			beq 	_CLSecond
.8896		20 71 89	jsr $8971			jsr 	CLIsDigit 					; if not digit, list all
.8899		b0 20		bcs $88bb			bcs 	_CLStart
.889b		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.889d		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.88a0		b1 30		lda ($30),y			lda 	(codePtr),y
.88a2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a4		f0 0a		beq $88b0			beq 	_CLSecond 					; if so go get it
.88a6		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.88a8		85 5f		sta $5f				sta 	NSMantissa0+7
.88aa		a5 64		lda $64				lda 	NSMantissa1+4
.88ac		85 67		sta $67				sta 	NSMantissa1+7
.88ae		80 0b		bra $88bb			bra 	_CLStart
.88b0						_CLSecond:
.88b0		c8		iny				iny 								; consume comma
.88b1		20 71 89	jsr $8971			jsr 	CLIsDigit 					; digit found
.88b4		b0 05		bcs $88bb			bcs 	_CLStart 					; if not, continue listing
.88b6		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88b8		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.88bb						_CLStart
.88bb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88bd		85 30		sta $30				sta 	codePtr
.88bf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88c1		85 31		sta $31				sta 	codePtr+1
.88c3						_CLLoop:
.88c3		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88c6		f0 27		beq $88ef			beq 	_CLBreak
.88c8		b2 30		lda ($30)			lda 	(codePtr)
.88ca		f0 20		beq $88ec			beq 	_CLExit
.88cc		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88ce		20 60 89	jsr $8960			jsr 	CLCompareLineNo
.88d1		90 0c		bcc $88df			bcc 	_CLNext
.88d3		a2 07		ldx #$07			ldx 	#7
.88d5		20 60 89	jsr $8960			jsr 	CLCompareLineNo
.88d8		f0 02		beq $88dc			beq 	_CLDoThisOne
.88da		b0 03		bcs $88df			bcs 	_CLNext
.88dc						_CLDoThisOne:
.88dc		20 4d 89	jsr $894d			jsr 	CLListOneLine 				; routine to list the current line.
.88df						_CLNext:
.88df		18		clc				clc
.88e0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88e2		65 30		adc $30				adc 	codePtr
.88e4		85 30		sta $30				sta 	codePtr
.88e6		90 02		bcc $88ea			bcc 	_CREExit
.88e8		e6 31		inc $31				inc 	codePtr+1 					; carry
.88ea						_CREExit:
.88ea		80 d7		bra $88c3			bra 	_CLLoop
.88ec						_CLExit:
.88ec		4c e7 83	jmp $83e7			jmp 	WarmStart
.88ef						_CLBreak:
.88ef		a9 01		lda #$01		lda	#1
.88f1		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.88f4						_CLListProcedure:
.88f4		b1 30		lda ($30),y			lda 	(codePtr),y
.88f6		85 38		sta $38				sta 	zTemp1
.88f8		c8		iny				iny
.88f9		b1 30		lda ($30),y			lda 	(codePtr),y
.88fb		85 39		sta $39				sta 	zTemp1+1
.88fd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88ff		85 30		sta $30				sta 	codePtr
.8901		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8903		85 31		sta $31				sta 	codePtr+1
.8905						_CLLPSearch:
.8905		b2 30		lda ($30)			lda 	(codePtr)
.8907		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8909		f0 e1		beq $88ec			beq 	_CLExit
.890b		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.890d		b1 30		lda ($30),y			lda 	(codePtr),y
.890f		c9 a4		cmp #$a4			cmp 	#KWD_PROC
.8911		d0 0e		bne $8921			bne 	_CLLPNext
.8913		c8		iny				iny 								; check if PROC this.
.8914		b1 30		lda ($30),y			lda 	(codePtr),y
.8916		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8918		d0 07		bne $8921			bne 	_CLLPNext
.891a		c8		iny				iny
.891b		b1 30		lda ($30),y			lda 	(codePtr),y
.891d		c5 39		cmp $39				cmp 	zTemp1+1
.891f		f0 0d		beq $892e			beq 	_CLLPFound
.8921						_CLLPNext:
.8921		18		clc				clc
.8922		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8924		65 30		adc $30				adc 	codePtr
.8926		85 30		sta $30				sta 	codePtr
.8928		90 02		bcc $892c			bcc 	_CREExit
.892a		e6 31		inc $31				inc 	codePtr+1 					; carry
.892c						_CREExit:
.892c		80 d7		bra $8905			bra 	_CLLPSearch
.892e						_CLLPFound:
.892e		b2 30		lda ($30)			lda 	(codePtr)
.8930		f0 ba		beq $88ec			beq 	_CLExit
.8932		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8934		b1 30		lda ($30),y			lda 	(codePtr),y
.8936		48		pha				pha
.8937		20 4d 89	jsr $894d			jsr 	CLListOneLine 				; list line and go forward
.893a		18		clc				clc
.893b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.893d		65 30		adc $30				adc 	codePtr
.893f		85 30		sta $30				sta 	codePtr
.8941		90 02		bcc $8945			bcc 	_CREExit
.8943		e6 31		inc $31				inc 	codePtr+1 					; carry
.8945						_CREExit:
.8945		68		pla				pla 								; reached ENDPROC ?
.8946		c9 a8		cmp #$a8			cmp 	#KWD_ENDPROC
.8948		d0 e4		bne $892e			bne 	_CLLPFound
.894a		4c e7 83	jmp $83e7			jmp 	WarmStart
.894d						CLListOneLine:
.894d		20 b6 8e	jsr $8eb6			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8950		20 5d 80	jsr $805d			jsr 	TKListConvertLine 			; convert line into token Buffer
.8953		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8955		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8957		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA
.895a		a9 0d		lda #$0d			lda 	#13 						; new line
.895c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.895f		60		rts				rts
.8960						CLCompareLineNo:
.8960		38		sec				sec
.8961		a0 01		ldy #$01			ldy 	#1
.8963		b1 30		lda ($30),y			lda 	(codePtr),y
.8965		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8967		85 36		sta $36				sta 	zTemp0
.8969		c8		iny				iny
.896a		b1 30		lda ($30),y			lda 	(codePtr),y
.896c		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.896e		05 36		ora $36				ora 	zTemp0
.8970		60		rts				rts
.8971						CLIsDigit:
.8971		b1 30		lda ($30),y			lda 	(codePtr),y
.8973		c9 30		cmp #$30			cmp 	#"0"
.8975		90 03		bcc $897a			bcc	 	_CLIDExitFalse
.8977		c9 3a		cmp #$3a			cmp 	#"9"+1
.8979		60		rts				rts
.897a						_CLIDExitFalse:
.897a		38		sec				sec
.897b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.897c						Command_LOCAL:
.897c		a2 00		ldx #$00			ldx 	#0 							; at level 0
.897e		20 8a 89	jsr $898a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8981		b1 30		lda ($30),y			lda 	(codePtr),y
.8983		c8		iny				iny
.8984		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8986		f0 f4		beq $897c			beq 	Command_LOCAL 				; if so, localise another variable.
.8988		88		dey				dey 								; unpick pre-get
.8989		60		rts				rts
.898a						LocaliseNextTerm:
.898a		20 5f 98	jsr $985f			jsr 	EvaluateTerm 				; evaluate the term
.898d		b5 50		lda $50,x			lda 	NSStatus,x
.898f		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8991		f0 5c		beq $89ef			beq		_LNTError
.8993		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8995		85 36		sta $36				sta 	zTemp0
.8997		b5 60		lda $60,x			lda 	NSMantissa1,x
.8999		85 37		sta $37				sta  	zTemp0+1
.899b		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.899d		29 10		and #$10			and 	#NSBIsString
.899f		d0 1e		bne $89bf			bne 	_LNTPushString
.89a1		5a		phy				phy
.89a2		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.89a4						_LNTPushNumLoop:
.89a4		b1 36		lda ($36),y			lda		(zTemp0),y
.89a6		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89a9		c8		iny				iny
.89aa		c0 05		cpy #$05			cpy 	#5
.89ac		d0 f6		bne $89a4			bne 	_LNTPushNumLoop
.89ae		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.89b0		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89b3		a5 37		lda $37				lda 	zTemp0+1
.89b5		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89b8		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.89ba		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89bd		7a		ply				ply
.89be		60		rts				rts
.89bf						_LNTPushString:
.89bf		5a		phy				phy
.89c0		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.89c2		85 38		sta $38				sta 	zTemp1
.89c4		a0 01		ldy #$01			ldy 	#1
.89c6		b1 36		lda ($36),y			lda 	(zTemp0),y
.89c8		85 39		sta $39				sta 	zTemp1+1
.89ca		a0 00		ldy #$00			ldy 	#0 							; output string
.89cc		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89ce		f0 0a		beq $89da			beq 	_LNTStringOut
.89d0						_LNTPushStrLoop:
.89d0		b1 38		lda ($38),y			lda 	(zTemp1),y
.89d2		f0 06		beq $89da			beq 	_LNTStringOut
.89d4		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89d7		c8		iny				iny
.89d8		80 f6		bra $89d0			bra 	_LNTPushStrLoop
.89da						_LNTStringOut:
.89da		98		tya				tya									; output length (chars written).
.89db		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89de		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89e0		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89e3		b5 60		lda $60,x			lda 	NSMantissa1,x
.89e5		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89e8		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89ea		20 e7 ae	jsr $aee7			jsr 	StackPushByte
.89ed		7a		ply				ply
.89ee		60		rts				rts
.89ef						_LNTError:
.89ef		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.89f2						LocalPopValue:
.89f2		20 ff ae	jsr $aeff			jsr 	StackPopByte
.89f5		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.89f7		d0 17		bne $8a10			bne 	_LPVString
.89f9		20 ff ae	jsr $aeff			jsr 	StackPopByte 				; address
.89fc		85 37		sta $37				sta 	zTemp0+1
.89fe		20 ff ae	jsr $aeff			jsr 	StackPopByte
.8a01		85 36		sta $36				sta 	zTemp0
.8a03		5a		phy				phy
.8a04		a0 04		ldy #$04			ldy 	#4 							; copy back
.8a06						_LPVNumberCopy:
.8a06		20 ff ae	jsr $aeff			jsr 	StackPopByte
.8a09		91 36		sta ($36),y			sta 	(zTemp0),y
.8a0b		88		dey				dey
.8a0c		10 f8		bpl $8a06			bpl 	_LPVNumberCopy
.8a0e		7a		ply				ply 								; and complete
.8a0f		60		rts				rts
.8a10						_LPVString:
.8a10		20 ff ae	jsr $aeff			jsr 	StackPopByte 				; address of record copied to zTemp0
.8a13		85 37		sta $37				sta 	zTemp0+1
.8a15		20 ff ae	jsr $aeff			jsr 	StackPopByte
.8a18		85 36		sta $36				sta 	zTemp0
.8a1a		5a		phy				phy
.8a1b		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8a1d		85 38		sta $38				sta 	zTemp1
.8a1f		a0 01		ldy #$01			ldy 	#1
.8a21		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a23		85 39		sta $39				sta 	zTemp1+1
.8a25		20 ff ae	jsr $aeff			jsr 	StackPopByte 				; # chars to get => y
.8a28		a8		tay				tay
.8a29		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a2b		f0 0e		beq $8a3b			beq 	_LPVStringCopied
.8a2d		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a2f		91 38		sta ($38),y			sta 	(zTemp1),y
.8a31						_LPVStringCopy:
.8a31		88		dey				dey
.8a32		30 07		bmi $8a3b			bmi 	_LPVStringCopied
.8a34		20 ff ae	jsr $aeff			jsr 	StackPopByte
.8a37		91 38		sta ($38),y			sta 	(zTemp1),y
.8a39		80 f6		bra $8a31			bra 	_LPVStringCopy
.8a3b						_LPVStringCopied:
.8a3b		fa		plx				plx
.8a3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a3d						NewCommand:
.8a3d		20 43 8a	jsr $8a43			jsr 	NewProgram 					; does the actual NEW.
.8a40		4c e7 83	jmp $83e7			jmp 	WarmStart 					; and warm starts straight away.
.8a43						NewProgram:
.8a43		20 96 a5	jsr $a596			jsr 	MemoryNew
.8a46		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a49		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear everything.
.8a4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a4d						CallProcedure:
.8a4d		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a4f		b1 30		lda ($30),y			lda 	(codePtr),y
.8a51		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a53		f0 0c		beq $8a61			beq 	_CPEndParam
.8a55						_CPParamLoop:
.8a55		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue 				; get parameter onto stack
.8a58		e8		inx				inx 								; bump next stack
.8a59		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5b		c8		iny				iny
.8a5c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a5e		f0 f5		beq $8a55			beq 	_CPParamLoop
.8a60		88		dey				dey 								; unpick.
.8a61						_CPEndParam:
.8a61		8e 16 04	stx $0416			stx 	LastParameter 				; save the last parameters index.
.8a64		c8		iny				iny									; skip right bracket
.8a65		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a67		20 08 af	jsr $af08			jsr 	StackOpen
.8a6a		20 4d af	jsr $af4d			jsr 	STKSaveCodePosition 		; save loop position
.8a6d		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a6f		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a71		a5 60		lda $60				lda 	NSMantissa1
.8a73		85 37		sta $37				sta 	zTemp0+1
.8a75		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a77		b2 36		lda ($36)			lda 	(zTemp0)
.8a79		85 30		sta $30				sta 	safePtr
.8a7b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a7d		85 31		sta $31				sta 	safePtr+1
.8a7f		c8		iny				iny
.8a80		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a82		85 32		sta $32				sta 	safePtr+2
.8a84		c8		iny				iny
.8a85		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a87		85 33		sta $33				sta 	safePtr+3
.8a89		c8		iny				iny 								; get Y offset -> Y
.8a8a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a8c		a8		tay				tay
.8a8d		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8a8f		ec 16 04	cpx $0416			cpx	 	LastParameter 				; check zero parameters at the start
.8a92		f0 13		beq $8aa7			beq 	_ParamExit 					; if so, exit.
.8a94						_ParamExtract:
.8a94		ca		dex				dex 								; put a local term on the level before
.8a95		20 8a 89	jsr $898a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8a98		20 5f 88	jsr $885f			jsr 	AssignVariable 				; assign stacked value to the variable.
.8a9b		e8		inx				inx 								; advance to next parameter to do.
.8a9c		e8		inx				inx
.8a9d		ec 16 04	cpx $0416			cpx 	LastParameter 				; are we done ?
.8aa0		f0 05		beq $8aa7			beq 	_ParamExit
.8aa2		20 00 8f	jsr $8f00			jsr 	CheckComma 					; comma seperating parameters
.8aa5		80 ed		bra $8a94			bra 	_ParamExtract
.8aa7						_ParamExit:
.8aa7		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; check )
.8aaa		60		rts				rts 								; and continue from here
.8aab						Command_ENDPROC:
.8aab		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8aad		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8aaf		20 35 af	jsr $af35			jsr 	StackCheckFrame
.8ab2		20 5e af	jsr $af5e			jsr 	STKLoadCodePosition 		; restore code position
.8ab5		20 27 af	jsr $af27			jsr 	StackClose
.8ab8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ab9						Command_Read:
.8ab9		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8abb		20 5f 98	jsr $985f			jsr 	EvaluateTerm
.8abe		b5 50		lda $50,x			lda 	NSStatus,x
.8ac0		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ac2		f0 4f		beq $8b13			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ac4		20 5c 8b	jsr $8b5c			jsr 	SwapDataCodePtrs 			; swap code and data
.8ac7		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8aca		d0 25		bne $8af1			bne 	_CRContinueData  			; forward for the next one.
.8acc		b2 30		lda ($30)			lda 	(codePtr)
.8ace		f0 1c		beq $8aec			beq 	_CRNoData
.8ad0						_CRKeepSearching:
.8ad0		a9 b4		lda #$b4			lda 	#KWD_DATA 					; scan for instruction
.8ad2		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ad4		20 53 8e	jsr $8e53			jsr 	ScanForward
.8ad7		c9 b4		cmp #$b4			cmp 	#KWD_DATA 					; found data ?
.8ad9		f0 16		beq $8af1			beq 	_CRHaveData 				; found it
.8adb		18		clc				clc
.8adc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ade		65 30		adc $30				adc 	codePtr
.8ae0		85 30		sta $30				sta 	codePtr
.8ae2		90 02		bcc $8ae6			bcc 	_CREExit
.8ae4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ae6						_CREExit:
.8ae6		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ae8		b2 30		lda ($30)			lda 	(codePtr)
.8aea		d0 e4		bne $8ad0			bne 	_CRKeepSearching
.8aec						_CRNoData:
.8aec		a9 0b		lda #$0b		lda	#11
.8aee		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.8af1						_CRHaveData:
.8af1						_CRContinueData:
.8af1		a2 01		ldx #$01			ldx 	#1
.8af3		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8af6		ca		dex				dex
.8af7		20 5f 88	jsr $885f			jsr		AssignVariable 				; do the assignment
.8afa		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8afd		b1 30		lda ($30),y			lda 	(codePtr),y
.8aff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8b01		d0 04		bne $8b07			bne 	_CRSwapBack
.8b03		c8		iny				iny 								; consume comma
.8b04		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8b07						_CRSwapBack:
.8b07		20 5c 8b	jsr $8b5c			jsr 	SwapDataCodePtrs			; swap them back.
.8b0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b0c		c8		iny				iny
.8b0d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b0f		f0 a8		beq $8ab9			beq 	Command_Read 				; if so go round again.
.8b11		88		dey				dey 								; unpick get.
.8b12		60		rts				rts
.8b13						_CRSyntax:
.8b13		4c b6 9f	jmp $9fb6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b16						RemCommand:
.8b16		b1 30		lda ($30),y			lda 	(codePtr),y
.8b18		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b1a		d0 06		bne $8b22			bne 	_RMExit
.8b1c		c8		iny				iny 								; point to offset
.8b1d		98		tya				tya 								; A = offset position
.8b1e		38		sec				sec 								; add size +1 hence SEC
.8b1f		71 30		adc ($30),y			adc 	(codePtr),y
.8b21		a8		tay				tay 								; make current position.
.8b22						_RMExit:
.8b22		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b23						Command_REPEAT:
.8b23		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b25		20 08 af	jsr $af08			jsr 	StackOpen
.8b28		20 4d af	jsr $af4d			jsr 	STKSaveCodePosition 		; save loop position
.8b2b		60		rts				rts
.8b2c						Command_UNTIL:
.8b2c		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b2e		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b30		20 35 af	jsr $af35			jsr 	StackCheckFrame
.8b33		a2 00		ldx #$00			ldx 	#0
.8b35		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; work out the number
.8b38		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; check if zero
.8b3b		f0 04		beq $8b41			beq 	_CULoopBack 				; if so keep looping
.8b3d		20 27 af	jsr $af27			jsr 	StackClose		 			; return
.8b40		60		rts				rts
.8b41						_CULoopBack:
.8b41		20 5e af	jsr $af5e			jsr 	STKLoadCodePosition 		; loop back
.8b44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b45						Command_Restore:
.8b45		20 5c 8b	jsr $8b5c			jsr 	SwapDataCodePtrs 			; swap code and data
.8b48		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b4a		85 30		sta $30				sta 	codePtr
.8b4c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b4e		85 31		sta $31				sta 	codePtr+1
.8b50		20 5c 8b	jsr $8b5c			jsr 	SwapDataCodePtrs 			; put them back
.8b53		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b55		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8b58		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8b5b		60		rts				rts
.8b5c						SwapDataCodePtrs:
.8b5c		da		phx				phx
.8b5d		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b5f						_SDCPLoop:
.8b5f		b5 30		lda $30,x			lda 	safePtr,x
.8b61		48		pha				pha
.8b62		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8b65		95 30		sta $30,x			sta 	safePtr,x
.8b67		68		pla				pla
.8b68		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8b6b		ca		dex				dex
.8b6c		10 f1		bpl $8b5f			bpl 	_SDCPLoop
.8b6e		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8b71		8c 1b 04	sty $041b			sty 	dataPointer+4
.8b74		a8		tay				tay
.8b75		fa		plx				plx
.8b76		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b77						EOLCommand:
.8b77		18		clc				clc
.8b78		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b7a		65 30		adc $30				adc 	codePtr
.8b7c		85 30		sta $30				sta 	codePtr
.8b7e		90 02		bcc $8b82			bcc 	_CREExit
.8b80		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b82						_CREExit:
.8b82		80 0b		bra $8b8f			bra 	RunNewLine
.8b84						CommandRUN:
.8b84		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8b87		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b89		85 30		sta $30				sta 	codePtr
.8b8b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b8d		85 31		sta $31				sta 	codePtr+1
.8b8f						RUNNewLine:
.8b8f		b2 30		lda ($30)			lda 	(codePtr)
.8b91		f0 7b		beq $8c0e			beq 	CRNoProgram         		; no then END.
.8b93		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8b95		9a		txs				txs
.8b96						RUNCodePointerLine:
.8b96		a0 02		ldy #$02			ldy 	#2 							; start of program
.8b98						_CRIncMainLoop:
.8b98		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8b9b		d0 22		bne $8bbf			bne 	_CRNoBreakCheck
.8b9d		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8ba0		20 21 80	jsr $8021			jsr 	EXTBreakCheck 				; break check
.8ba3		f0 64		beq $8c09			beq 	_CRBreak
.8ba5		a5 01		lda $01				lda 	1 							; save I/O 0
.8ba7		48		pha				pha
.8ba8		64 01		stz $01				stz 	1 							; access I/O Page 0
.8baa		38		sec				sec 								; calculate timer - LastTick
.8bab		ad 59 d6	lda $d659			lda 	$D659
.8bae		aa		tax				tax 								; saving timer in X
.8baf		ed 5c 06	sbc $065c			sbc 	LastTick
.8bb2		c9 03		cmp #$03			cmp 	#3
.8bb4		90 06		bcc $8bbc			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8bb6		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8bb9		20 63 9e	jsr $9e63			jsr 	TickHandler 							; go do the code.
.8bbc						_NoFireTick:
.8bbc		68		pla				pla 								; restore I/O 0
.8bbd		85 01		sta $01				sta 	1
.8bbf						_CRNoBreakCheck:
.8bbf		c8		iny				iny									; next token
.8bc0						_CRMainLoop:
.8bc0		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8bc3		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc5		10 10		bpl $8bd7			bpl 	_CRNotKeyword				; not a token.
.8bc7		c9 a2		cmp #$a2			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8bc9		b0 04		bcs $8bcf			bcs 	_CRIsKeyword
.8bcb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8bcd		b0 34		bcs $8c03			bcs		_CRSyntaxError
.8bcf						_CRIsKeyword:
.8bcf		c8		iny				iny 								; consume command
.8bd0		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8bd1		aa		tax				tax 								; put in X for vector jump
.8bd2		20 06 8c	jsr $8c06			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8bd5		80 e9		bra $8bc0			bra 	_CRMainLoop 				; and loop round
.8bd7						_CRNotKeyword:
.8bd7		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8bd9		f0 bd		beq $8b98			beq 	_CRIncMainLoop
.8bdb		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8bdd		90 05		bcc $8be4			bcc 	_CRNotVariable
.8bdf						_CRGoLet:
.8bdf		20 26 88	jsr $8826			jsr 	LetCommand
.8be2		80 dc		bra $8bc0			bra 	_CRMainLoop
.8be4						_CRNotVariable:
.8be4		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8be6		f0 f7		beq $8bdf			beq 	_CRGoLet
.8be8		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8bea		f0 f3		beq $8bdf			beq 	_CRGoLet
.8bec		c9 21		cmp #$21			cmp 	#KWD_PLING
.8bee		f0 ef		beq $8bdf			beq 	_CRGoLet
.8bf0		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8bf2		f0 09		beq $8bfd			beq 	_CRGoRem
.8bf4		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8bf6		d0 0b		bne $8c03			bne 	_CRSyntaxError
.8bf8		20 59 82	jsr $8259			jsr 	LabelHere
.8bfb		80 c3		bra $8bc0			bra 	_CRMainLoop
.8bfd						_CRGoRem:
.8bfd		c8		iny				iny
.8bfe		20 16 8b	jsr $8b16			jsr 	RemCommand
.8c01		80 bd		bra $8bc0			bra 	_CRMainLoop
.8c03						_CRSyntaxError:
.8c03		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.8c06						_CRCallVector0:
.8c06		7c a4 8c	jmp ($8ca4,x)			jmp 	(VectorSet0,x)
.8c09						_CRBreak:
.8c09		a9 01		lda #$01		lda	#1
.8c0b		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.8c0e						CRNoProgram:
.8c0e		4c cb 85	jmp $85cb			jmp 	EndCommand
.8c11						Shift1Command:
.8c11		b1 30		lda ($30),y			lda 	(codePtr),y
.8c13		c8		iny				iny
.8c14		0a		asl a				asl 	a
.8c15		aa		tax				tax
.8c16		7c 4a 8d	jmp ($8d4a,x)			jmp 	(VectorSet1,x)
.8c19						Shift2Command:
.8c19		b1 30		lda ($30),y			lda 	(codePtr),y
.8c1b		c8		iny				iny
.8c1c		0a		asl a				asl 	a
.8c1d		aa		tax				tax
.8c1e		7c 74 8d	jmp ($8d74,x)			jmp 	(VectorSet2,x)
.8c21						Unused1:
.8c21						Unused2:
.8c21						Unused3:
.8c21						Unused4:
.8c21		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
>8c24								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c24						VectorSetPunc:
>8c24		c9 91					.word	ShiftLeft                        ; $00 <<
>8c26		b4 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8c28		aa 8f					.word	BinaryCompareNotEqual            ; $02 <>
>8c2a		b6 9f					.word	SyntaxError                      ; $03 !!3
>8c2c		b6 9f					.word	SyntaxError                      ; $04 ><
>8c2e		be 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c30		cc 91					.word	ShiftRight                       ; $06 >>
>8c32		b6 9f					.word	SyntaxError                      ; $07 !!7
>8c34		b6 9f					.word	SyntaxError                      ; $08 !!8
>8c36		b6 9f					.word	SyntaxError                      ; $09 !!9
>8c38		b6 9f					.word	SyntaxError                      ; $0a !!10
>8c3a		b6 9f					.word	SyntaxError                      ; $0b !!11
>8c3c		b6 9f					.word	SyntaxError                      ; $0c !!12
>8c3e		b6 9f					.word	SyntaxError                      ; $0d !!13
>8c40		b6 9f					.word	SyntaxError                      ; $0e !!14
>8c42		b6 9f					.word	SyntaxError                      ; $0f !!15
>8c44		b6 9f					.word	SyntaxError                      ; $10 @
>8c46		b6 9f					.word	SyntaxError                      ; $11 !!17
>8c48		b6 9f					.word	SyntaxError                      ; $12 !!18
>8c4a		b6 9f					.word	SyntaxError                      ; $13 [
>8c4c		75 90					.word	IntegerDivide                    ; $14 \
>8c4e		b6 9f					.word	SyntaxError                      ; $15 ]
>8c50		07 93					.word	EorInteger                       ; $16 ^
>8c52		b6 9f					.word	SyntaxError                      ; $17 _
>8c54		b6 9f					.word	SyntaxError                      ; $18 `
>8c56		b6 9f					.word	SyntaxError                      ; $19 !!25
>8c58		b6 9f					.word	SyntaxError                      ; $1a !!26
>8c5a		b6 9f					.word	SyntaxError                      ; $1b {
>8c5c		d2 92					.word	OraInteger                       ; $1c |
>8c5e		b6 9f					.word	SyntaxError                      ; $1d }
>8c60		b6 9f					.word	SyntaxError                      ; $1e ~
>8c62		b6 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8c64		b6 9f					.word	SyntaxError                      ; $20
>8c66		3c 93					.word	WordIndirect                     ; $21 !
>8c68		b6 9f					.word	SyntaxError                      ; $22 "
>8c6a		b6 9f					.word	SyntaxError                      ; $23 #
>8c6c		b6 9f					.word	SyntaxError                      ; $24 $
>8c6e		b6 90					.word	IntegerModulus                   ; $25 %
>8c70		9d 92					.word	AndInteger                       ; $26 &
>8c72		b6 9f					.word	SyntaxError                      ; $27 '
>8c74		b6 9f					.word	SyntaxError                      ; $28 (
>8c76		b6 9f					.word	SyntaxError                      ; $29 )
>8c78		24 91					.word	MulInteger                       ; $2a *
>8c7a		3f 92					.word	AddInteger                       ; $2b +
>8c7c		b6 9f					.word	SyntaxError                      ; $2c ,
>8c7e		78 92					.word	SubInteger                       ; $2d -
>8c80		b6 9f					.word	SyntaxError                      ; $2e .
>8c82		f6 94					.word	FDivideCommand                   ; $2f /
>8c84		b6 9f					.word	SyntaxError                      ; $30 0
>8c86		b6 9f					.word	SyntaxError                      ; $31 1
>8c88		b6 9f					.word	SyntaxError                      ; $32 2
>8c8a		b6 9f					.word	SyntaxError                      ; $33 3
>8c8c		b6 9f					.word	SyntaxError                      ; $34 4
>8c8e		b6 9f					.word	SyntaxError                      ; $35 5
>8c90		b6 9f					.word	SyntaxError                      ; $36 6
>8c92		b6 9f					.word	SyntaxError                      ; $37 7
>8c94		b6 9f					.word	SyntaxError                      ; $38 8
>8c96		b6 9f					.word	SyntaxError                      ; $39 9
>8c98		b6 9f					.word	SyntaxError                      ; $3a :
>8c9a		b6 9f					.word	SyntaxError                      ; $3b ;
>8c9c		96 8f					.word	BinaryCompareLess                ; $3c <
>8c9e		8c 8f					.word	BinaryCompareEqual               ; $3d =
>8ca0		a0 8f					.word	BinaryCompareGreater             ; $3e >
>8ca2		5e 93					.word	ByteIndirect                     ; $3f ?
.8ca4						VectorSet0:
>8ca4		77 8b					.word	EOLCommand                       ; $80 !0:EOF
>8ca6		11 8c					.word	Shift1Command                    ; $81 !1:SH1
>8ca8		19 8c					.word	Shift2Command                    ; $82 !2:SH2
>8caa		e0 99					.word	AbsUnary                         ; $83 ABS(
>8cac		ee 99					.word	AllocUnary                       ; $84 ALLOC(
>8cae		5e 9a					.word	AscUnary                         ; $85 ASC(
>8cb0		1e 9c					.word	ChrUnary                         ; $86 CHR$(
>8cb2		6e 9a					.word	DeekUnary                        ; $87 DEEK(
>8cb4		28 a4					.word	UnaryEvent                       ; $88 EVENT(
>8cb6		88 8f					.word	UnaryFalse                       ; $89 FALSE
>8cb8		80 9a					.word	FracUnary                        ; $8a FRAC(
>8cba		b2 a3					.word	UnaryHit                         ; $8b HIT(
>8cbc		95 9a					.word	IntUnary                         ; $8c INT(
>8cbe		dd 9b					.word	IsValUnary                       ; $8d ISVAL(
>8cc0		ac a4					.word	UnaryJoyB                        ; $8e JOYB(
>8cc2		85 a4					.word	UnaryJoyX                        ; $8f JOYX(
>8cc4		88 a4					.word	UnaryJoyY                        ; $90 JOYY(
>8cc6		f1 9c					.word	Unary_Left                       ; $91 LEFT$(
>8cc8		a6 9a					.word	LenUnary                         ; $92 LEN(
>8cca		c4 9a					.word	Unary_Max                        ; $93 MAX(
>8ccc		13 9d					.word	Unary_Mid                        ; $94 MID$(
>8cce		c0 9a					.word	Unary_Min                        ; $95 MIN(
>8cd0		0f 9b					.word	Unary_Not                        ; $96 NOT(
>8cd2		6b 9a					.word	PeekUnary                        ; $97 PEEK(
>8cd4		65 ae					.word	UnaryPlaying                     ; $98 PLAYING(
>8cd6		22 9b					.word	Unary_Random                     ; $99 RANDOM(
>8cd8		fe 9c					.word	Unary_Right                      ; $9a RIGHT$(
>8cda		3f 9b					.word	Unary_Rnd                        ; $9b RND(
>8cdc		b5 9b					.word	SgnUnary                         ; $9c SGN(
>8cde		30 9c					.word	SpcUnary                         ; $9d SPC(
>8ce0		4b 9c					.word	Unary_Str                        ; $9e STR$(
>8ce2		c0 a4					.word	UnaryTimer                       ; $9f TIMER(
>8ce4		7d 8f					.word	UnaryTrue                        ; $a0 TRUE
>8ce6		d3 9b					.word	ValUnary                         ; $a1 VAL(
>8ce8		ce 85					.word	ForCommand                       ; $a2 FOR
>8cea		11 87					.word	IfCommand                        ; $a3 IF
>8cec		21 8c					.word	Unused1                          ; $a4 PROC
>8cee		23 8b					.word	Command_REPEAT                   ; $a5 REPEAT
>8cf0		c9 8e					.word	Command_WHILE                    ; $a6 WHILE
>8cf2		3a 87					.word	EndIf                            ; $a7 ENDIF
>8cf4		ab 8a					.word	Command_ENDPROC                  ; $a8 ENDPROC
>8cf6		80 86					.word	NextCommand                      ; $a9 NEXT
>8cf8		21 8c					.word	Unused4                          ; $aa THEN
>8cfa		2c 8b					.word	Command_UNTIL                    ; $ab UNTIL
>8cfc		ea 8e					.word	Command_WEND                     ; $ac WEND
>8cfe		b6 9f					.word	SyntaxError                      ; $ad BY
>8d00		48 84					.word	CallCommand                      ; $ae CALL
>8d02		66 a1					.word	CircleCommand                    ; $af CIRCLE
>8d04		7d 84					.word	ClearCommand                     ; $b0 CLEAR
>8d06		d5 84					.word	ClearScreen                      ; $b1 CLS
>8d08		b6 9f					.word	SyntaxError                      ; $b2 COLOR
>8d0a		b6 9f					.word	SyntaxError                      ; $b3 COLOUR
>8d0c		dd 84					.word	Command_Data                     ; $b4 DATA
>8d0e		e5 84					.word	DimCommand                       ; $b5 DIM
>8d10		a5 85					.word	DokeCommand                      ; $b6 DOKE
>8d12		21 8c					.word	Unused3                          ; $b7 DOWNTO
>8d14		33 87					.word	ElseCode                         ; $b8 ELSE
>8d16		b6 9f					.word	SyntaxError                      ; $b9 FROM
>8d18		85 a3					.word	GfxCommand                       ; $ba GFX
>8d1a		d9 86					.word	Command_GOSUB                    ; $bb GOSUB
>8d1c		f7 86					.word	GotoCommand                      ; $bc GOTO
>8d1e		b6 9f					.word	SyntaxError                      ; $bd HERE
>8d20		8f a1					.word	ImageCommand                     ; $be IMAGE
>8d22		3b 87					.word	Command_Input                    ; $bf INPUT
>8d24		26 88					.word	LetCommand                       ; $c0 LET
>8d26		e1 a1					.word	LineCommand                      ; $c1 LINE
>8d28		7c 89					.word	Command_LOCAL                    ; $c2 LOCAL
>8d2a		b6 9f					.word	SyntaxError                      ; $c3 OFF
>8d2c		b6 9f					.word	SyntaxError                      ; $c4 ON
>8d2e		b6 9f					.word	SyntaxError                      ; $c5 OUTLINE
>8d30		d6 a3					.word	PaletteCommand                   ; $c6 PALETTE
>8d32		da a1					.word	PlotCommand                      ; $c7 PLOT
>8d34		a2 85					.word	PokeCommand                      ; $c8 POKE
>8d36		42 87					.word	Command_Print                    ; $c9 PRINT
>8d38		b9 8a					.word	Command_Read                     ; $ca READ
>8d3a		62 a1					.word	RectangleCommand                 ; $cb RECT
>8d3c		16 8b					.word	RemCommand                       ; $cc REM
>8d3e		e9 86					.word	Command_RETURN                   ; $cd RETURN
>8d40		b6 9f					.word	SyntaxError                      ; $ce SOLID
>8d42		81 ae					.word	SoundCommand                     ; $cf SOUND
>8d44		71 a1					.word	SpriteCommand                    ; $d0 SPRITE
>8d46		ab a1					.word	TextCommand                      ; $d1 TEXT
>8d48		21 8c					.word	Unused2                          ; $d2 TO
.8d4a						VectorSet1:
>8d4a		b6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d4c		b6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d4e		b6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d50		1c 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d52		38 84					.word	AssertCommand                    ; $84 ASSERT
>8d54		25 a3					.word	BitmapCtrl                       ; $85 BITMAP
>8d56		cb 85					.word	EndCommand                       ; $86 END
>8d58		39 ae					.word	Explode                          ; $87 EXPLODE
>8d5a		b6 9f					.word	SyntaxError                      ; $88 GO
>8d5c		76 88					.word	Command_List                     ; $89 LIST
>8d5e		b6 9f					.word	SyntaxError                      ; $8a LOAD
>8d60		3d 8a					.word	NewCommand                       ; $8b NEW
>8d62		15 ae					.word	PingCommand                      ; $8c PING
>8d64		45 8b					.word	Command_Restore                  ; $8d RESTORE
>8d66		84 8b					.word	CommandRUN                       ; $8e RUN
>8d68		2d ae					.word	ShootCommand                     ; $8f SHOOT
>8d6a		6a a3					.word	SpritesCtrl                      ; $90 SPRITES
>8d6c		fc 8d					.word	StopCommand                      ; $91 STOP
>8d6e		1f a4					.word	XGoCommand                       ; $92 XGO
>8d70		16 a4					.word	XLoadCommand                     ; $93 XLOAD
>8d72		21 ae					.word	ZapCommand                       ; $94 ZAP
.8d74						VectorSet2:
>8d74		b6 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d76		b6 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d78		b6 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d7a		75 9e					.word	Assemble_adc                     ; $83 ADC
>8d7c		6d 9e					.word	Assemble_and                     ; $84 AND
>8d7e		89 9e					.word	Assemble_asl                     ; $85 ASL
>8d80		f3 9e					.word	Assemble_bcc                     ; $86 BCC
>8d82		f7 9e					.word	Assemble_bcs                     ; $87 BCS
>8d84		ff 9e					.word	Assemble_beq                     ; $88 BEQ
>8d86		b6 9e					.word	Assemble_bit                     ; $89 BIT
>8d88		e7 9e					.word	Assemble_bmi                     ; $8a BMI
>8d8a		fb 9e					.word	Assemble_bne                     ; $8b BNE
>8d8c		e3 9e					.word	Assemble_bpl                     ; $8c BPL
>8d8e		03 9f					.word	Assemble_bra                     ; $8d BRA
>8d90		07 9f					.word	Assemble_brk                     ; $8e BRK
>8d92		eb 9e					.word	Assemble_bvc                     ; $8f BVC
>8d94		ef 9e					.word	Assemble_bvs                     ; $90 BVS
>8d96		0f 9f					.word	Assemble_clc                     ; $91 CLC
>8d98		63 9f					.word	Assemble_cld                     ; $92 CLD
>8d9a		23 9f					.word	Assemble_cli                     ; $93 CLI
>8d9c		53 9f					.word	Assemble_clv                     ; $94 CLV
>8d9e		81 9e					.word	Assemble_cmp                     ; $95 CMP
>8da0		ca 9e					.word	Assemble_cpx                     ; $96 CPX
>8da2		c5 9e					.word	Assemble_cpy                     ; $97 CPY
>8da4		a7 9e					.word	Assemble_dec                     ; $98 DEC
>8da6		5f 9f					.word	Assemble_dex                     ; $99 DEX
>8da8		3b 9f					.word	Assemble_dey                     ; $9a DEY
>8daa		71 9e					.word	Assemble_eor                     ; $9b EOR
>8dac		ac 9e					.word	Assemble_inc                     ; $9c INC
>8dae		6f 9f					.word	Assemble_inx                     ; $9d INX
>8db0		5b 9f					.word	Assemble_iny                     ; $9e INY
>8db2		de 9e					.word	Assemble_jmp                     ; $9f JMP
>8db4		d9 9e					.word	Assemble_jsr                     ; $a0 JSR
>8db6		7d 9e					.word	Assemble_lda                     ; $a1 LDA
>8db8		a2 9e					.word	Assemble_ldx                     ; $a2 LDX
>8dba		c0 9e					.word	Assemble_ldy                     ; $a3 LDY
>8dbc		93 9e					.word	Assemble_lsr                     ; $a4 LSR
>8dbe		73 9f					.word	Assemble_nop                     ; $a5 NOP
>8dc0		69 9e					.word	Assemble_ora                     ; $a6 ORA
>8dc2		1f 9f					.word	Assemble_pha                     ; $a7 PHA
>8dc4		0b 9f					.word	Assemble_php                     ; $a8 PHP
>8dc6		67 9f					.word	Assemble_phx                     ; $a9 PHX
>8dc8		27 9f					.word	Assemble_phy                     ; $aa PHY
>8dca		2f 9f					.word	Assemble_pla                     ; $ab PLA
>8dcc		13 9f					.word	Assemble_plp                     ; $ac PLP
>8dce		7b 9f					.word	Assemble_plx                     ; $ad PLX
>8dd0		37 9f					.word	Assemble_ply                     ; $ae PLY
>8dd2		8e 9e					.word	Assemble_rol                     ; $af ROL
>8dd4		98 9e					.word	Assemble_ror                     ; $b0 ROR
>8dd6		1b 9f					.word	Assemble_rti                     ; $b1 RTI
>8dd8		2b 9f					.word	Assemble_rts                     ; $b2 RTS
>8dda		85 9e					.word	Assemble_sbc                     ; $b3 SBC
>8ddc		17 9f					.word	Assemble_sec                     ; $b4 SEC
>8dde		77 9f					.word	Assemble_sed                     ; $b5 SED
>8de0		33 9f					.word	Assemble_sei                     ; $b6 SEI
>8de2		79 9e					.word	Assemble_sta                     ; $b7 STA
>8de4		6b 9f					.word	Assemble_stp                     ; $b8 STP
>8de6		9d 9e					.word	Assemble_stx                     ; $b9 STX
>8de8		bb 9e					.word	Assemble_sty                     ; $ba STY
>8dea		b1 9e					.word	Assemble_stz                     ; $bb STZ
>8dec		4f 9f					.word	Assemble_tax                     ; $bc TAX
>8dee		4b 9f					.word	Assemble_tay                     ; $bd TAY
>8df0		d4 9e					.word	Assemble_trb                     ; $be TRB
>8df2		cf 9e					.word	Assemble_tsb                     ; $bf TSB
>8df4		57 9f					.word	Assemble_tsx                     ; $c0 TSX
>8df6		3f 9f					.word	Assemble_txa                     ; $c1 TXA
>8df8		47 9f					.word	Assemble_txs                     ; $c2 TXS
>8dfa		43 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8dfc						StopCommand:
.8dfc		a9 08		lda #$08		lda	#8
.8dfe		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e01						ProcedureScan:
.8e01		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e03		85 30		sta $30				sta 	codePtr
.8e05		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e07		85 31		sta $31				sta 	codePtr+1
.8e09						_PSLoop:
.8e09		b2 30		lda ($30)			lda 	(codePtr)
.8e0b		f0 42		beq $8e4f			beq 	_PSExit
.8e0d		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e0f		b1 30		lda ($30),y			lda 	(codePtr),y
.8e11		c9 a4		cmp #$a4			cmp 	#KWD_PROC
.8e13		d0 2d		bne $8e42			bne 	_PSNext
.8e15		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e16		b1 30		lda ($30),y			lda 	(codePtr),y
.8e18		29 c0		and #$c0			and 	#$C0
.8e1a		c9 40		cmp #$40			cmp 	#$40
.8e1c		d0 32		bne $8e50			bne 	_PSSyntax
.8e1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8e20		18		clc				clc
.8e21		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e23		85 37		sta $37				sta 	zTemp0+1
.8e25		c8		iny				iny 								; LSB
.8e26		b1 30		lda ($30),y			lda 	(codePtr),y
.8e28		85 36		sta $36				sta 	zTemp0
.8e2a		c8		iny				iny 								; character after variable call.
.8e2b		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e2c		a0 07		ldy #$07			ldy 	#7
.8e2e		91 36		sta ($36),y			sta 	(zTemp0),y
.8e30		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e32		a0 02		ldy #$02			ldy 	#2
.8e34		91 36		sta ($36),y			sta 	(zTemp0),y
.8e36		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e38						_PSCopy:
.8e38		b5 30		lda $30,x			lda 	safePtr,x
.8e3a		c8		iny				iny
.8e3b		91 36		sta ($36),y			sta 	(zTemp0),y
.8e3d		e8		inx				inx
.8e3e		e0 04		cpx #$04			cpx 	#4
.8e40		d0 f6		bne $8e38			bne 	_PSCopy
.8e42						_PSNext:
.8e42		18		clc				clc
.8e43		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e45		65 30		adc $30				adc 	codePtr
.8e47		85 30		sta $30				sta 	codePtr
.8e49		90 02		bcc $8e4d			bcc 	_CREExit
.8e4b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e4d						_CREExit:
.8e4d		80 ba		bra $8e09			bra 	_PSLoop
.8e4f						_PSExit:
.8e4f		60		rts				rts
.8e50						_PSSyntax:
.8e50		4c b6 9f	jmp $9fb6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8e53						ScanForward:
.8e53		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8e55		86 37		stx $37				stx 	zTemp0+1
.8e57		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8e59						_ScanLoop:
.8e59		b1 30		lda ($30),y			lda 	(codePtr),y
.8e5b		c8		iny				iny
.8e5c		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8e5e		d0 0e		bne $8e6e			bne 	_ScanGoNext
.8e60		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8e62		f0 04		beq $8e68			beq 	_ScanMatch
.8e64		c5 37		cmp $37				cmp 	zTemp0+1
.8e66		d0 06		bne $8e6e			bne 	_ScanGoNext
.8e68						_ScanMatch:
.8e68		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8e6a		d0 01		bne $8e6d			bne 	_ScanNotEndEOL
.8e6c		88		dey				dey
.8e6d						_ScanNotEndEOL:
.8e6d		60		rts				rts
.8e6e						_ScanGoNext:
.8e6e		20 73 8e	jsr $8e73			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8e71		80 e6		bra $8e59			bra 	_ScanLoop
.8e73						ScanForwardOne:
.8e73		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8e75		90 3e		bcc $8eb5			bcc 	_SFWExit
.8e77		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8e79		90 18		bcc $8e93			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8e7b		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8e7d		b0 2f		bcs $8eae			bcs 	_ScanSkipData
.8e7f		c9 a2		cmp #$a2			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8e81		90 32		bcc $8eb5			bcc 	_SFWExit 					; if not, ordinary keywords.
.8e83		c9 ad		cmp #$ad			cmp 	#KWC_LAST_STRUCTURE+1
.8e85		b0 2e		bcs $8eb5			bcs 	_SFWExit
.8e87		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8e89		c9 a7		cmp #$a7			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8e8b		b0 28		bcs $8eb5			bcs 	_SFWExit
.8e8d		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8e8f		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8e91		80 22		bra $8eb5			bra 	_SFWExit
.8e93						_ScanSkipOne:
.8e93		c8		iny				iny 								; consume the extra one.
.8e94		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8e96		d0 1d		bne $8eb5			bne 	_SFWExit
.8e98		18		clc				clc
.8e99		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e9b		65 30		adc $30				adc 	codePtr
.8e9d		85 30		sta $30				sta 	codePtr
.8e9f		90 02		bcc $8ea3			bcc 	_CREExit
.8ea1		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ea3						_CREExit:
.8ea3		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ea5		b2 30		lda ($30)			lda 	(codePtr)
.8ea7		d0 0c		bne $8eb5			bne 	_SFWExit 					; if not zero, more to scan
.8ea9		a9 13		lda #$13		lda	#19
.8eab		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.8eae						_ScanSkipData:
.8eae		88		dey				dey 								; point at data token
.8eaf		c8		iny				iny 								; point to offset
.8eb0		98		tya				tya 								; A = offset position
.8eb1		38		sec				sec 								; add size +1 hence SEC
.8eb2		71 30		adc ($30),y			adc 	(codePtr),y
.8eb4		a8		tay				tay 								; make current position.
.8eb5						_SFWExit:
.8eb5		60		rts				rts
.8eb6						ScanGetCurrentLineStep:
.8eb6		64 38		stz $38				stz 	zTemp1
.8eb8		a0 03		ldy #$03			ldy 	#3
.8eba						_SGCLSLoop:
.8eba		b1 30		lda ($30),y			lda 	(codePtr),y
.8ebc		c8		iny				iny
.8ebd		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ebf		f0 05		beq $8ec6			beq 	_SGCLSExit
.8ec1		20 73 8e	jsr $8e73			jsr 	ScanForwardOne
.8ec4		80 f4		bra $8eba			bra 	_SGCLSLoop
.8ec6						_SGCLSExit:
.8ec6		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8ec8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ec9						Command_WHILE:
.8ec9		5a		phy				phy 								; save position of the test
.8eca		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8ecc		20 86 9d	jsr $9d86			jsr 	EvaluateNumber
.8ecf		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; check if zero
.8ed2		f0 0e		beq $8ee2			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8ed4		98		tya				tya 								; position *after* test.
.8ed5		7a		ply				ply 								; restore position before test, at WHILE
.8ed6		88		dey				dey 								; so we execute the WHILE command again.
.8ed7		48		pha				pha 								; push after test on the stack
.8ed8		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8eda		20 08 af	jsr $af08			jsr 	StackOpen
.8edd		20 4d af	jsr $af4d			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8ee0		7a		ply				ply 								; restore the position *after* the test
.8ee1		60		rts				rts
.8ee2						_WHExitLoop:
.8ee2		68		pla				pla 								; throw post loop position
.8ee3		a9 ac		lda #$ac			lda 	#KWD_WEND 					; scan forward past WEND
.8ee5		aa		tax				tax
.8ee6		20 53 8e	jsr $8e53			jsr 	ScanForward
.8ee9		60		rts				rts
.8eea						Command_WEND:
.8eea		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8eec		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8eee		20 35 af	jsr $af35			jsr 	StackCheckFrame
.8ef1		20 5e af	jsr $af5e			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8ef4		20 27 af	jsr $af27			jsr 	StackClose		 			; erase the frame
.8ef7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8ef8						CheckRightBracket:
.8ef8		b1 30		lda ($30),y			lda 	(codePtr),y
.8efa		c8		iny				iny
.8efb		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8efd		d0 0f		bne $8f0e			bne 	CNAFail
.8eff		60		rts				rts
.8f00						CheckComma:
.8f00		b1 30		lda ($30),y			lda 	(codePtr),y
.8f02		c8		iny				iny
.8f03		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f05		d0 07		bne $8f0e			bne 	CNAFail
.8f07		60		rts				rts
.8f08						CheckNextA:
.8f08		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f0a		d0 02		bne $8f0e			bne 	CNAFail
.8f0c		c8		iny				iny 								; skip character
.8f0d		60		rts				rts 								; and exit
.8f0e						CNAFail:
.8f0e		4c b6 9f	jmp $9fb6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f11						ErrorHandler:
.8f11		a8		tay				tay 								; find the error text
.8f12		f0 49		beq $8f5d			beq 	_EHEnd
.8f14		a2 00		ldx #$00			ldx 	#0
.8f16		a9 cf		lda #$cf			lda 	#((ErrorText) & $FF)
.8f18		85 36		sta $36				sta 	0+zTemp0
.8f1a		a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8f1c		85 37		sta $37				sta 	1+zTemp0
.8f1e						_EHFind:
.8f1e		88		dey				dey 								; keep looking through text
.8f1f		f0 0e		beq $8f2f			beq 	_EHFound
.8f21						_EHFindZero:
.8f21		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f23		e6 36		inc $36				inc 	zTemp0
.8f25		d0 02		bne $8f29			bne 	_EHFNoCarry
.8f27		e6 37		inc $37				inc 	zTemp0+1
.8f29						_EHFNoCarry:
.8f29		c9 00		cmp #$00			cmp 	#0
.8f2b		d0 f4		bne $8f21			bne 	_EHFindZero
.8f2d		80 ef		bra $8f1e			bra 	_EHFind
.8f2f						_EHFound:
.8f2f		a5 36		lda $36				lda 	zTemp0 						; print message
.8f31		a6 37		ldx $37				ldx 	zTemp0+1
.8f33		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA
.8f36		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f38		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3a		d0 05		bne $8f41			bne 	_EHAtMsg
.8f3c		c8		iny				iny
.8f3d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3f		f0 17		beq $8f58			beq 	_EHCREnd
.8f41						_EHAtMsg:
.8f41		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8f43		a9 60		lda #$60			lda 	#_AtMsg & $FF
.8f45		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA
.8f48		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8f4a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f4c		48		pha				pha
.8f4d		c8		iny				iny
.8f4e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f50		aa		tax				tax
.8f51		68		pla				pla
.8f52		20 80 93	jsr $9380			jsr 	ConvertInt16 				; convert XA to string
.8f55		20 6a 8f	jsr $8f6a			jsr 	PrintStringXA 				; and print it.
.8f58						_EHCREnd:
.8f58		a9 0d		lda #$0d			lda 	#13 						; new line
.8f5a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f5d						_EHEnd:
.8f5d		4c e7 83	jmp $83e7			jmp 	WarmStart
>8f60		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8f68		20 00
.8f6a						PrintStringXA:
.8f6a		5a		phy				phy
.8f6b		86 37		stx $37				stx 	zTemp0+1
.8f6d		85 36		sta $36				sta 	zTemp0
.8f6f		a0 00		ldy #$00			ldy 	#0
.8f71						_PSXALoop:
.8f71		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f73		f0 06		beq $8f7b			beq 	_PSXAExit
.8f75		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f78		c8		iny				iny
.8f79		80 f6		bra $8f71			bra 	_PSXALoop
.8f7b						_PSXAExit:
.8f7b		7a		ply				ply
.8f7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8f7d						UnaryTrue:
.8f7d		fa		plx				plx
.8f7e						ReturnTrue:
.8f7e		a9 01		lda #$01			lda 	#1  						; set to 1
.8f80		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.8f83		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8f85		95 50		sta $50,x			sta 	NSStatus,x
.8f87		60		rts				rts
.8f88						UnaryFalse:
.8f88		fa		plx				plx
.8f89						ReturnFalse:
.8f89		4c 38 9e	jmp $9e38			jmp 	NSMSetZero 					; set it all to zero
.8f8c						BinaryCompareEqual:
.8f8c		fa		plx				plx
.8f8d		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8f90		c9 00		cmp #$00			cmp 	#0
.8f92		f0 ea		beq $8f7e			beq 	ReturnTrue
.8f94		80 f3		bra $8f89			bra 	ReturnFalse
.8f96						BinaryCompareLess:
.8f96		fa		plx				plx
.8f97		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8f9a		c9 ff		cmp #$ff			cmp 	#$FF
.8f9c		f0 e0		beq $8f7e			beq 	ReturnTrue
.8f9e		80 e9		bra $8f89			bra 	ReturnFalse
.8fa0						BinaryCompareGreater:
.8fa0		fa		plx				plx
.8fa1		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fa4		c9 01		cmp #$01			cmp 	#1
.8fa6		f0 d6		beq $8f7e			beq 	ReturnTrue
.8fa8		80 df		bra $8f89			bra 	ReturnFalse
.8faa						BinaryCompareNotEqual:
.8faa		fa		plx				plx
.8fab		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fae		c9 00		cmp #$00			cmp 	#0
.8fb0		d0 cc		bne $8f7e			bne 	ReturnTrue
.8fb2		80 d5		bra $8f89			bra 	ReturnFalse
.8fb4						BinaryCompareLessEqual:
.8fb4		fa		plx				plx
.8fb5		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fb8		c9 01		cmp #$01			cmp 	#1
.8fba		d0 c2		bne $8f7e			bne 	ReturnTrue
.8fbc		80 cb		bra $8f89			bra 	ReturnFalse
.8fbe						BinaryCompareGreaterEqual:
.8fbe		fa		plx				plx
.8fbf		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode
.8fc2		c9 ff		cmp #$ff			cmp 	#$FF
.8fc4		d0 b8		bne $8f7e			bne 	ReturnTrue
.8fc6		80 c1		bra $8f89			bra 	ReturnFalse
.8fc8						CompareBaseCode:
.8fc8		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; make both values if references.
.8fcb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.8fcd		15 51		ora $51,x			ora 	NSStatus+1,x
.8fcf		29 10		and #$10			and 	#NSTString
.8fd1		d0 37		bne $900a			bne 	_CBCString 					; if so do string code, which will check if both.
.8fd3		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.8fd5		15 79		ora $79,x			ora 	NSExponent+1,x
.8fd7		d0 34		bne $900d			bne 	_CBCFloat
.8fd9		b5 50		lda $50,x			lda 	NSStatus,x
.8fdb		15 51		ora $51,x			ora 	NSStatus+1,x
.8fdd		29 08		and #$08			and 	#NSTFloat
.8fdf		d0 2c		bne $900d			bne 	_CBCFloat
.8fe1		20 10 90	jsr $9010			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.8fe4		e8		inx				inx
.8fe5		20 10 90	jsr $9010			jsr 	CompareFixMinusZero
.8fe8		ca		dex				dex
.8fe9		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.8feb		55 51		eor $51,x			eor 	NSStatus+1,x
.8fed		10 0a		bpl $8ff9			bpl 	_CDCSameSign
.8fef		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.8ff1		30 14		bmi $9007			bmi 	_CBCLess 					; return $FF
.8ff3						_CBCGreater:
.8ff3		a9 01		lda #$01			lda 	#1
.8ff5		60		rts				rts
.8ff6						_CBCEqual:
.8ff6		a9 00		lda #$00			lda 	#0
.8ff8		60		rts				rts
.8ff9						_CDCSameSign:
.8ff9		20 25 92	jsr $9225			jsr 	SubTopTwoStack 				; unsigned subtract
.8ffc		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; or the mantissa together
.8fff		f0 f5		beq $8ff6			beq 	_CBCEqual 					; -0 == 0
.9001		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9003		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9005		10 ec		bpl $8ff3			bpl 	_CBCGreater
.9007						_CBCLess:
.9007		a9 ff		lda #$ff			lda 	#$FF
.9009		60		rts				rts
.900a						_CBCString:
.900a		4c 96 91	jmp $9196			jmp 	CompareStrings
.900d						_CBCFloat:
.900d		4c e0 94	jmp $94e0			jmp 	CompareFloat
.9010						CompareFixMinusZero:
.9010		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero
.9013		d0 02		bne $9017			bne 	_CFXMZNotZero
.9015		74 50		stz $50,x			stz 	NSStatus,x
.9017						_CFXMZNotZero:
.9017		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9018						StringConcat:
.9018		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.901a		35 51		and $51,x			and 	NSStatus+1,x
.901c		29 18		and #$18			and 	#NSBTypeMask
.901e		c9 10		cmp #$10			cmp 	#NSTString
.9020		d0 50		bne $9072			bne		_SCType
.9022		64 38		stz $38				stz 	zTemp1 						; counting total length
.9024		e8		inx				inx
.9025		20 43 90	jsr $9043			jsr 	_SCSetupZ0 					; setup for second
.9028		20 4c 90	jsr $904c			jsr 	_SCLengthZ0 				; length for second
.902b		ca		dex				dex
.902c		20 43 90	jsr $9043			jsr 	_SCSetupZ0 					; setup for first
.902f		20 4c 90	jsr $904c			jsr 	_SCLengthZ0 				; length for first
.9032		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9034		20 f8 af	jsr $aff8			jsr 	StringTempAllocate
.9037		20 63 90	jsr $9063			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.903a		e8		inx				inx
.903b		20 43 90	jsr $9043			jsr 	_SCSetupZ0 					; copy second out
.903e		20 63 90	jsr $9063			jsr 	_SCCopy
.9041		ca		dex				dex
.9042		60		rts				rts
.9043						_SCSetupZ0:
.9043		b5 58		lda $58,x			lda 	NSMantissa0,x
.9045		85 36		sta $36				sta 	zTemp0
.9047		b5 60		lda $60,x			lda 	NSMantissa1,x
.9049		85 37		sta $37				sta 	zTemp0+1
.904b		60		rts				rts
.904c						_SCLengthZ0:
.904c		5a		phy				phy
.904d		a0 00		ldy #$00			ldy 	#0
.904f						_SCLenLoop:
.904f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9051		f0 0e		beq $9061			beq 	_SCLExit
.9053		c8		iny				iny
.9054		e6 38		inc $38				inc 	zTemp1
.9056		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9058		c9 fd		cmp #$fd			cmp 	#253
.905a		d0 f3		bne $904f			bne		_SCLenLoop
.905c		a9 09		lda #$09		lda	#9
.905e		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9061						_SCLExit:
.9061		7a		ply				ply
.9062		60		rts				rts
.9063						_SCCopy:
.9063		5a		phy				phy
.9064		a0 00		ldy #$00			ldy 	#0
.9066						_SCCopyLoop:
.9066		b1 36		lda ($36),y			lda 	(zTemp0),y
.9068		f0 06		beq $9070			beq 	_SCCExit
.906a		20 31 b0	jsr $b031			jsr 	StringTempWrite
.906d		c8		iny				iny
.906e		80 f6		bra $9066			bra 	_SCCopyLoop
.9070						_SCCExit:
.9070		7a		ply				ply
.9071		60		rts				rts
.9072						_SCType:
.9072		4c c0 9f	jmp $9fc0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9075						IntegerDivide:
.9075		fa		plx				plx
.9076		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9078		15 51		ora $51,x			ora 	NSStatus+1,x
.907a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.907b		0a		asl a				asl 	a
.907c		10 05		bpl $9083			bpl 	_NotRef
.907e		48		pha				pha
.907f		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9082		68		pla				pla
.9083						_NotRef:
.9083		0a		asl a				asl 	a
.9084		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9086		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9088		15 79		ora $79,x			ora 	NSExponent+1,x
.908a		f0 03		beq $908f			beq 	_IntegerCode 				; if clear, then we have two integers
.908c		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.908f						_IntegerCode:
.908f		20 a9 90	jsr $90a9			jsr 	CheckDivideZero 			; do div zero check
.9092		20 db 90	jsr $90db			jsr 	Int32Divide 				; do the division
.9095		20 8c 91	jsr $918c			jsr 	CalculateSign 				; calculate result sign
.9098						NSMCopyPlusTwoToZero:
.9098		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.909a		95 58		sta $58,x			sta 	NSMantissa0,x
.909c		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.909e		95 60		sta $60,x			sta 	NSMantissa1,x
.90a0		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.90a2		95 68		sta $68,x			sta 	NSMantissa2,x
.90a4		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.90a6		95 70		sta $70,x			sta 	NSMantissa3,x
.90a8		60		rts				rts
.90a9						CheckDivideZero:
.90a9		e8		inx				inx
.90aa		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero
.90ad		f0 02		beq $90b1			beq 	_CDVError
.90af		ca		dex				dex
.90b0		60		rts				rts
.90b1						_CDVError:
.90b1		a9 03		lda #$03		lda	#3
.90b3		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.90b6						IntegerModulus:
.90b6		fa		plx				plx
.90b7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90b9		15 51		ora $51,x			ora 	NSStatus+1,x
.90bb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90bc		0a		asl a				asl 	a
.90bd		10 05		bpl $90c4			bpl 	_NotRef
.90bf		48		pha				pha
.90c0		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90c3		68		pla				pla
.90c4						_NotRef:
.90c4		0a		asl a				asl 	a
.90c5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90c7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90c9		15 79		ora $79,x			ora 	NSExponent+1,x
.90cb		f0 03		beq $90d0			beq 	_IntegerCode 				; if clear, then we have two integers
.90cd		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.90d0						_IntegerCode:
.90d0						IntegerModulusNoCheck:
.90d0		20 a9 90	jsr $90a9			jsr 	CheckDivideZero 			; do div zero check
.90d3		20 db 90	jsr $90db			jsr 	Int32Divide 				; do the division
.90d6		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.90d8		56 50		lsr $50,x			lsr 	NSStatus,x
.90da		60		rts				rts
.90db						Int32Divide:
.90db		48		pha				pha 								; save AXY
.90dc		5a		phy				phy
.90dd		20 1b 9e	jsr $9e1b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.90e0		20 34 9e	jsr $9e34			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.90e3		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.90e5						_I32DivideLoop:
.90e5		e8		inx				inx
.90e6		e8		inx				inx
.90e7		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.90ea		ca		dex				dex
.90eb		ca		dex				dex
.90ec		20 48 9e	jsr $9e48			jsr 	NSMRotateLeft
.90ef		20 1a 91	jsr $911a			jsr 	DivideCheckSubtract 		; check if subtract possible
.90f2		90 02		bcc $90f6			bcc 	_I32DivideNoCarryIn
.90f4		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.90f6						_I32DivideNoCarryIn:
.90f6		88		dey				dey 								; loop round till division completed.
.90f7		d0 ec		bne $90e5			bne 	_I32DivideLoop
.90f9		7a		ply				ply 								; restore AXY and exit
.90fa		68		pla				pla
.90fb		60		rts				rts
.90fc						Int32ShiftDivide:
.90fc		48		pha				pha 								; save AY
.90fd		5a		phy				phy
.90fe		e8		inx				inx 								; clear S[X+2]
.90ff		e8		inx				inx
.9100		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.9103		ca		dex				dex
.9104		ca		dex				dex
.9105		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9107						_I32SDLoop:
.9107		20 1a 91	jsr $911a			jsr 	DivideCheckSubtract 		; check if subtract possible
.910a		e8		inx				inx
.910b		e8		inx				inx
.910c		20 48 9e	jsr $9e48			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.910f		ca		dex				dex
.9110		ca		dex				dex
.9111		20 48 9e	jsr $9e48			jsr 	NSMRotateLeft
.9114		88		dey				dey 	 							; do 31 times
.9115		d0 f0		bne $9107			bne 	_I32SDLoop
.9117		7a		ply				ply 								; restore AY and exit
.9118		68		pla				pla
.9119		60		rts				rts
.911a						DivideCheckSubtract:
.911a		20 25 92	jsr $9225			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.911d		b0 04		bcs $9123			bcs 	_DCSExit 					; if carry set, then could do, exit
.911f		20 0b 92	jsr $920b			jsr 	AddTopTwoStack 				; add it back in
.9122		18		clc				clc 								; and return False
.9123						_DCSExit:
.9123		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9124						MulInteger:
.9124		fa		plx				plx
.9125		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9127		15 51		ora $51,x			ora 	NSStatus+1,x
.9129		0a		asl a				asl 	a 							; shift reference bit into sign bit
.912a		0a		asl a				asl 	a
.912b		10 05		bpl $9132			bpl 	_NotRef
.912d		48		pha				pha
.912e		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9131		68		pla				pla
.9132						_NotRef:
.9132		0a		asl a				asl 	a 							; put MSB of type into A:7
.9133		30 09		bmi $913e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9135		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9137		15 79		ora $79,x			ora 	NSExponent+1,x
.9139		f0 06		beq $9141			beq 	_IntegerCode 				; if clear, then we have two integers
.913b		4c a2 95	jmp $95a2			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.913e						_StringData:
.913e		4c ca 9f	jmp $9fca			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9141						_IntegerCode:
.9141		20 4e 91	jsr $914e			jsr 	MultiplyShort
.9144		c9 00		cmp #$00			cmp 	#0
.9146		f0 05		beq $914d			beq 	_MIExit
.9148		a9 04		lda #$04		lda	#4
.914a		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.914d						_MIExit:
.914d		60		rts				rts
.914e						MultiplyShort:
.914e		5a		phy				phy 								; save Y
.914f		20 1b 9e	jsr $9e1b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9152		20 34 9e	jsr $9e34			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9155		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9157						_I32MLoop:
.9157		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9159		15 62		ora $62,x			ora 	NSMantissa1+2,x
.915b		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.915d		15 72		ora $72,x			ora 	NSMantissa3+2,x
.915f		f0 25		beq $9186			beq 	_I32MExit 					; exit if zero
.9161		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9163		29 01		and #$01			and 	#1
.9165		f0 0d		beq $9174			beq 	_I32MNoAdd
.9167		20 0b 92	jsr $920b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.916a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.916c		10 06		bpl $9174			bpl 	_I32MNoAdd
.916e						_I32ShiftRight:
.916e		20 51 9e	jsr $9e51			jsr 	NSMShiftRight 				; shift S[X] right
.9171		c8		iny				iny 								; increment shift count
.9172		80 09		bra $917d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9174						_I32MNoAdd:
.9174		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9176		70 f6		bvs $916e			bvs 	_I32ShiftRight 				; instead.
.9178		e8		inx				inx
.9179		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.917c		ca		dex				dex
.917d						_I32MShiftUpper:
.917d		e8		inx				inx 								; shift S[X+2] right
.917e		e8		inx				inx
.917f		20 51 9e	jsr $9e51			jsr 	NSMShiftRight
.9182		ca		dex				dex
.9183		ca		dex				dex
.9184		80 d1		bra $9157			bra 	_I32MLoop 					; try again.
.9186						_I32MExit:
.9186		20 8c 91	jsr $918c			jsr 	CalculateSign
.9189		98		tya				tya 								; shift in A
.918a		7a		ply				ply 								; restore Y and exit
.918b		60		rts				rts
.918c						CalculateSign:
.918c		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.918e		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9190		55 51		eor $51,x			eor 	NSStatus+1,x
.9192		0a		asl a				asl 	a 							; shift bit 7 into carry
.9193		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9195		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9196						CompareStrings:
.9196		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9198		35 51		and $51,x			and 	NSStatus+1,x
.919a		29 10		and #$10			and 	#NSBIsString
.919c		f0 28		beq $91c6			beq 	_CSTypeError
.919e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.91a0		85 36		sta $36				sta 	zTemp0
.91a2		b5 60		lda $60,x			lda 	NSMantissa1,x
.91a4		85 37		sta $37				sta 	zTemp0+1
.91a6		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.91a8		85 38		sta $38				sta 	zTemp1
.91aa		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.91ac		85 39		sta $39				sta 	zTemp1+1
.91ae		5a		phy				phy 								; save Y so we can access strings
.91af		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91b1						_CSLoop:
.91b1		c8		iny				iny
.91b2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91b4		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91b6		d0 06		bne $91be			bne 	_CSDifferent
.91b8		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91ba		d0 f5		bne $91b1			bne 	_CSLoop 					; still comparing
.91bc						_CSExit:
.91bc		7a		ply				ply 								; reached end, return zero in A from EOS
.91bd		60		rts				rts
.91be						_CSDifferent:
.91be		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91c0		90 fa		bcc $91bc			bcc		_CSExit
.91c2		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91c4		80 f6		bra $91bc			bra 	_CSExit
.91c6						_CSTypeError:
.91c6		4c c0 9f	jmp $9fc0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91c9						ShiftLeft:
.91c9		38		sec				sec 								; common code, carry determines which way.
.91ca		80 01		bra $91cd			bra 	ShiftMain
.91cc						ShiftRight:
.91cc		18		clc				clc
.91cd						ShiftMain:
.91cd		fa		plx				plx 								; restore X
.91ce		08		php				php 								; save direction
.91cf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91d1		15 51		ora $51,x			ora 	NSStatus+1,x
.91d3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91d4		0a		asl a				asl 	a
.91d5		10 05		bpl $91dc			bpl 	_NotRef
.91d7		48		pha				pha
.91d8		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91db		68		pla				pla
.91dc						_NotRef:
.91dc		0a		asl a				asl 	a
.91dd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91df		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91e1		15 79		ora $79,x			ora 	NSExponent+1,x
.91e3		f0 03		beq $91e8			beq 	_IntegerCode 				; if clear, then we have two integers
.91e5		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.91e8						_IntegerCode:
.91e8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.91ea		29 e0		and #$e0			and 	#$E0
.91ec		15 61		ora $61,x			ora 	NSMantissa1+1,x
.91ee		15 69		ora $69,x			ora 	NSMantissa2+1,x
.91f0		15 71		ora $71,x			ora 	NSMantissa3+1,x
.91f2		d0 12		bne $9206			bne 	_SMExit0 					; if >= 32 it will always return zero.
.91f4						_SMLoop:
.91f4		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.91f6		30 11		bmi $9209			bmi 	_SMExit 					; exit if done.
.91f8		28		plp				plp 								; restore direction setting
.91f9		08		php				php
.91fa		90 05		bcc $9201			bcc 	_SMRight
.91fc		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; shift left if CS
.91ff		80 f3		bra $91f4			bra 	_SMLoop
.9201						_SMRight:
.9201		20 51 9e	jsr $9e51			jsr 	NSMShiftRight 				; shift right if CC
.9204		80 ee		bra $91f4			bra 	_SMLoop
.9206						_SMExit0:
.9206		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; return zero.
.9209						_SMExit:
.9209		28		plp				plp 								; throw direction
.920a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.920b						AddTopTwoStack:
.920b		18		clc				clc
.920c		b5 58		lda $58,x			lda		NSMantissa0,x
.920e		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9210		95 58		sta $58,x			sta 	NSMantissa0,x
.9212		b5 60		lda $60,x			lda		NSMantissa1,x
.9214		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9216		95 60		sta $60,x			sta 	NSMantissa1,x
.9218		b5 68		lda $68,x			lda		NSMantissa2,x
.921a		75 69		adc $69,x			adc 		NSMantissa2+1,x
.921c		95 68		sta $68,x			sta 	NSMantissa2,x
.921e		b5 70		lda $70,x			lda		NSMantissa3,x
.9220		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9222		95 70		sta $70,x			sta 	NSMantissa3,x
.9224		60		rts				rts
.9225						SubTopTwoStack:
.9225		38		sec				sec
.9226		b5 58		lda $58,x			lda		NSMantissa0,x
.9228		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.922a		95 58		sta $58,x			sta 	NSMantissa0,x
.922c		b5 60		lda $60,x			lda		NSMantissa1,x
.922e		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9230		95 60		sta $60,x			sta 	NSMantissa1,x
.9232		b5 68		lda $68,x			lda		NSMantissa2,x
.9234		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9236		95 68		sta $68,x			sta 	NSMantissa2,x
.9238		b5 70		lda $70,x			lda		NSMantissa3,x
.923a		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.923c		95 70		sta $70,x			sta 	NSMantissa3,x
.923e		60		rts				rts
.923f						AddInteger:
.923f		fa		plx				plx
.9240		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9242		15 51		ora $51,x			ora 	NSStatus+1,x
.9244		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9245		0a		asl a				asl 	a
.9246		10 05		bpl $924d			bpl 	_NotRef
.9248		48		pha				pha
.9249		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.924c		68		pla				pla
.924d						_NotRef:
.924d		0a		asl a				asl 	a 							; put MSB of type into A:7
.924e		30 09		bmi $9259			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9250		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9252		15 79		ora $79,x			ora 	NSExponent+1,x
.9254		f0 06		beq $925c			beq 	_IntegerCode 				; if clear, then we have two integers
.9256		4c 52 94	jmp $9452			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9259						_StringData:
.9259		4c 18 90	jmp $9018			jmp 	StringConcat							; at least one string - don't know both are strings.
.925c						_IntegerCode:
.925c						AddCode:
.925c		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.925e		55 51		eor $51,x			eor 	NSStatus+1,x
.9260		10 a9		bpl $920b			bpl 	AddTopTwoStack
.9262		20 25 92	jsr $9225			jsr 	SubTopTwoStack 				; do a physical subtraction
.9265		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9267		10 07		bpl $9270			bpl 	_AddExit
.9269		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.926b		95 50		sta $50,x			sta 	NSStatus,x
.926d		20 01 9e	jsr $9e01			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9270						_AddExit:
.9270		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; check for -0
.9273		d0 02		bne $9277			bne 	_AddNonZero
.9275		74 50		stz $50,x			stz 	NSStatus,x
.9277						_AddNonZero:
.9277		60		rts				rts
.9278						SubInteger:
.9278		fa		plx				plx
.9279		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.927b		15 51		ora $51,x			ora 	NSStatus+1,x
.927d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.927e		0a		asl a				asl 	a
.927f		10 05		bpl $9286			bpl 	_NotRef
.9281		48		pha				pha
.9282		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9285		68		pla				pla
.9286						_NotRef:
.9286		0a		asl a				asl 	a 							; put MSB of type into A:7
.9287		30 09		bmi $9292			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9289		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.928b		15 79		ora $79,x			ora 	NSExponent+1,x
.928d		f0 06		beq $9295			beq 	_IntegerCode 				; if clear, then we have two integers
.928f		4c 57 94	jmp $9457			jmp 	FloatingPointSub 							; otherwise at least one float.
.9292						_StringData:
.9292		4c ca 9f	jmp $9fca			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9295						_IntegerCode:
.9295		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9297		49 80		eor #$80			eor 	#$80
.9299		95 51		sta $51,x			sta 	NSStatus+1,x
.929b		80 bf		bra $925c			bra 	AddCode 					; and do the same code as add.
.929d						AndInteger:
.929d		fa		plx				plx
.929e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92a0		15 51		ora $51,x			ora 	NSStatus+1,x
.92a2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92a3		0a		asl a				asl 	a
.92a4		10 05		bpl $92ab			bpl 	_NotRef
.92a6		48		pha				pha
.92a7		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92aa		68		pla				pla
.92ab						_NotRef:
.92ab		0a		asl a				asl 	a
.92ac		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ae		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92b0		15 79		ora $79,x			ora 	NSExponent+1,x
.92b2		f0 03		beq $92b7			beq 	_IntegerCode 				; if clear, then we have two integers
.92b4		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.92b7						_IntegerCode:
.92b7		b5 58		lda $58,x			lda		NSMantissa0,x
.92b9		35 59		and $59,x			and 		NSMantissa0+1,x
.92bb		95 58		sta $58,x			sta 	NSMantissa0,x
.92bd		b5 60		lda $60,x			lda		NSMantissa1,x
.92bf		35 61		and $61,x			and 		NSMantissa1+1,x
.92c1		95 60		sta $60,x			sta 	NSMantissa1,x
.92c3		b5 68		lda $68,x			lda		NSMantissa2,x
.92c5		35 69		and $69,x			and 		NSMantissa2+1,x
.92c7		95 68		sta $68,x			sta 	NSMantissa2,x
.92c9		b5 70		lda $70,x			lda		NSMantissa3,x
.92cb		35 71		and $71,x			and 		NSMantissa3+1,x
.92cd		95 70		sta $70,x			sta 	NSMantissa3,x
.92cf		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.92d1		60		rts				rts
.92d2						OraInteger:
.92d2		fa		plx				plx
.92d3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92d5		15 51		ora $51,x			ora 	NSStatus+1,x
.92d7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92d8		0a		asl a				asl 	a
.92d9		10 05		bpl $92e0			bpl 	_NotRef
.92db		48		pha				pha
.92dc		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92df		68		pla				pla
.92e0						_NotRef:
.92e0		0a		asl a				asl 	a
.92e1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e5		15 79		ora $79,x			ora 	NSExponent+1,x
.92e7		f0 03		beq $92ec			beq 	_IntegerCode 				; if clear, then we have two integers
.92e9		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.92ec						_IntegerCode:
.92ec		b5 58		lda $58,x			lda		NSMantissa0,x
.92ee		15 59		ora $59,x			ora 		NSMantissa0+1,x
.92f0		95 58		sta $58,x			sta 	NSMantissa0,x
.92f2		b5 60		lda $60,x			lda		NSMantissa1,x
.92f4		15 61		ora $61,x			ora 		NSMantissa1+1,x
.92f6		95 60		sta $60,x			sta 	NSMantissa1,x
.92f8		b5 68		lda $68,x			lda		NSMantissa2,x
.92fa		15 69		ora $69,x			ora 		NSMantissa2+1,x
.92fc		95 68		sta $68,x			sta 	NSMantissa2,x
.92fe		b5 70		lda $70,x			lda		NSMantissa3,x
.9300		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9302		95 70		sta $70,x			sta 	NSMantissa3,x
.9304		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9306		60		rts				rts
.9307						EorInteger:
.9307		fa		plx				plx
.9308		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.930a		15 51		ora $51,x			ora 	NSStatus+1,x
.930c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.930d		0a		asl a				asl 	a
.930e		10 05		bpl $9315			bpl 	_NotRef
.9310		48		pha				pha
.9311		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9314		68		pla				pla
.9315						_NotRef:
.9315		0a		asl a				asl 	a
.9316		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9318		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.931a		15 79		ora $79,x			ora 	NSExponent+1,x
.931c		f0 03		beq $9321			beq 	_IntegerCode 				; if clear, then we have two integers
.931e		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.9321						_IntegerCode:
.9321		b5 58		lda $58,x			lda		NSMantissa0,x
.9323		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9325		95 58		sta $58,x			sta 	NSMantissa0,x
.9327		b5 60		lda $60,x			lda		NSMantissa1,x
.9329		55 61		eor $61,x			eor 		NSMantissa1+1,x
.932b		95 60		sta $60,x			sta 	NSMantissa1,x
.932d		b5 68		lda $68,x			lda		NSMantissa2,x
.932f		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9331		95 68		sta $68,x			sta 	NSMantissa2,x
.9333		b5 70		lda $70,x			lda		NSMantissa3,x
.9335		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9337		95 70		sta $70,x			sta 	NSMantissa3,x
.9339		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.933b		60		rts				rts
.933c						WordIndirect:
.933c		fa		plx				plx
.933d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.933f		15 51		ora $51,x			ora 	NSStatus+1,x
.9341		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9342		0a		asl a				asl 	a
.9343		10 05		bpl $934a			bpl 	_NotRef
.9345		48		pha				pha
.9346		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9349		68		pla				pla
.934a						_NotRef:
.934a		0a		asl a				asl 	a
.934b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.934d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.934f		15 79		ora $79,x			ora 	NSExponent+1,x
.9351		f0 03		beq $9356			beq 	_IntegerCode 				; if clear, then we have two integers
.9353		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.9356						_IntegerCode:
.9356		20 5c 92	jsr $925c			jsr 	AddCode 					; add the two values
.9359		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.935b		95 50		sta $50,x			sta 	NSStatus,x
.935d		60		rts				rts
.935e						ByteIndirect:
.935e		fa		plx				plx
.935f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9361		15 51		ora $51,x			ora 	NSStatus+1,x
.9363		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9364		0a		asl a				asl 	a
.9365		10 05		bpl $936c			bpl 	_NotRef
.9367		48		pha				pha
.9368		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.936b		68		pla				pla
.936c						_NotRef:
.936c		0a		asl a				asl 	a
.936d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.936f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9371		15 79		ora $79,x			ora 	NSExponent+1,x
.9373		f0 03		beq $9378			beq 	_IntegerCode 				; if clear, then we have two integers
.9375		4c c0 9f	jmp $9fc0			jmp 	TypeError 					; anything else, type mismatch.
.9378						_IntegerCode:
.9378		20 5c 92	jsr $925c			jsr 	AddCode 					; add the two values
.937b		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.937d		95 50		sta $50,x			sta 	NSStatus,x
.937f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9380						ConvertInt16:
.9380		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9382		86 60		stx $60				stx 	NSMantissa1
.9384		64 68		stz $68				stz 	NSMantissa2
.9386		64 70		stz $70				stz 	NSMantissa3
.9388		64 50		stz $50				stz 	NSStatus 					; positive integer
.938a		a2 00		ldx #$00			ldx 	#0 							; stack level
.938c		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.938e		80 00		bra $9390			bra 	ConvertInt32
.9390						ConvertInt32:
.9390		5a		phy				phy
.9391		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9393		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9395		10 08		bpl $939f			bpl 	_CI32NotNeg
.9397		48		pha				pha
.9398		a9 2d		lda #$2d			lda 	#'-'
.939a		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.939d		c8		iny				iny
.939e		68		pla				pla
.939f						_CI32NotNeg:
.939f		20 ad 93	jsr $93ad			jsr 	_CI32DivideConvert 			; recursive conversion
.93a2		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93a4		99 27 06	sta $0627,y			sta 	NumberBuffer,y
.93a7		7a		ply				ply
.93a8		a2 06		ldx #$06			ldx 	#NumberBuffer >> 8 			; return address in XA
.93aa		a9 27		lda #$27			lda 	#NumberBuffer & $FF
.93ac		60		rts				rts
.93ad						_CI32DivideConvert:
.93ad		e8		inx				inx 								; write to next slot up
.93ae		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte 		 			; write the base out.
.93b1		ca		dex				dex
.93b2		20 db 90	jsr $90db			jsr 	Int32Divide 				; divide
.93b5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.93b7		48		pha				pha
.93b8		20 98 90	jsr $9098			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93bb		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; is it zero ?
.93be		f0 05		beq $93c5			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93c0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93c2		20 ad 93	jsr $93ad			jsr 	_CI32DivideConvert 			; and recusrively call.
.93c5						_CI32NoRecurse:
.93c5		68		pla				pla 								; remainder
.93c6		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.93c8		90 02		bcc $93cc			bcc 	_CI32NotHex
.93ca		69 26		adc #$26			adc 	#6+32
.93cc						_CI32NotHex:
.93cc		69 30		adc #$30			adc 	#48
.93ce		99 27 06	sta $0627,y			sta 	NumberBuffer,y 				; write out and exit
.93d1		c8		iny				iny
.93d2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.93d3						PrecedenceLevel:
>93d3		04					.byte	 4	; $00 <<
>93d4		02					.byte	 2	; $01 <=
>93d5		02					.byte	 2	; $02 <>
>93d6		00					.byte	 0	; $03 !!3
>93d7		00					.byte	 0	; $04 ><
>93d8		02					.byte	 2	; $05 >=
>93d9		04					.byte	 4	; $06 >>
>93da		00					.byte	 0	; $07 !!7
>93db		00					.byte	 0	; $08 !!8
>93dc		00					.byte	 0	; $09 !!9
>93dd		00					.byte	 0	; $0a !!10
>93de		00					.byte	 0	; $0b !!11
>93df		00					.byte	 0	; $0c !!12
>93e0		00					.byte	 0	; $0d !!13
>93e1		00					.byte	 0	; $0e !!14
>93e2		00					.byte	 0	; $0f !!15
>93e3		00					.byte	 0	; $10 @
>93e4		00					.byte	 0	; $11 !!17
>93e5		00					.byte	 0	; $12 !!18
>93e6		00					.byte	 0	; $13 [
>93e7		04					.byte	 4	; $14 \
>93e8		00					.byte	 0	; $15 ]
>93e9		01					.byte	 1	; $16 ^
>93ea		00					.byte	 0	; $17 _
>93eb		00					.byte	 0	; $18 `
>93ec		00					.byte	 0	; $19 !!25
>93ed		00					.byte	 0	; $1a !!26
>93ee		00					.byte	 0	; $1b {
>93ef		01					.byte	 1	; $1c |
>93f0		00					.byte	 0	; $1d }
>93f1		00					.byte	 0	; $1e ~
>93f2		00					.byte	 0	; $1f [7m<7F>[m
>93f3		00					.byte	 0	; $20
>93f4		05					.byte	 5	; $21 !
>93f5		00					.byte	 0	; $22 "
>93f6		00					.byte	 0	; $23 #
>93f7		05					.byte	 5	; $24 $
>93f8		04					.byte	 4	; $25 %
>93f9		01					.byte	 1	; $26 &
>93fa		00					.byte	 0	; $27 '
>93fb		00					.byte	 0	; $28 (
>93fc		00					.byte	 0	; $29 )
>93fd		04					.byte	 4	; $2a *
>93fe		03					.byte	 3	; $2b +
>93ff		00					.byte	 0	; $2c ,
>9400		03					.byte	 3	; $2d -
>9401		00					.byte	 0	; $2e .
>9402		04					.byte	 4	; $2f /
>9403		00					.byte	 0	; $30 0
>9404		00					.byte	 0	; $31 1
>9405		00					.byte	 0	; $32 2
>9406		00					.byte	 0	; $33 3
>9407		00					.byte	 0	; $34 4
>9408		00					.byte	 0	; $35 5
>9409		00					.byte	 0	; $36 6
>940a		00					.byte	 0	; $37 7
>940b		00					.byte	 0	; $38 8
>940c		00					.byte	 0	; $39 9
>940d		00					.byte	 0	; $3a :
>940e		00					.byte	 0	; $3b ;
>940f		02					.byte	 2	; $3c <
>9410		02					.byte	 2	; $3d =
>9411		02					.byte	 2	; $3e >
>9412		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9413						EvaluateExpressionAt0:
.9413		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9415						EvaluateExpression:
.9415		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9417						EvaluateExpressionAtPrecedence:
.9417		48		pha				pha 								; save precedence level
.9418		20 5f 98	jsr $985f			jsr 	EvaluateTerm 				; evaluate term into level X.
.941b		68		pla				pla 								; restore precedence level.
.941c						_EXPRLoop:
.941c		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.941e		b1 30		lda ($30),y			lda 	(codePtr),y
.9420		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9422		b0 25		bcs $9449			bcs 	_EXPRExit
.9424		da		phx				phx 								; read the operator precedence
.9425		aa		tax				tax
.9426		bd d3 93	lda $93d3,x			lda 	PrecedenceLevel,x
.9429		fa		plx				plx
.942a		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.942c		f0 1b		beq $9449			beq 	_EXPRExit
.942e		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9430		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9432		c5 37		cmp $37				cmp 	zTemp0+1
.9434		b0 13		bcs $9449			bcs		_EXPRExit 					; if current >= operator exit
.9436		48		pha				pha 								; save current precedence.
.9437		b1 30		lda ($30),y			lda 	(codePtr),y
.9439		c8		iny				iny
.943a		48		pha				pha
.943b		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.943d		e8		inx				inx 								; work out the right hand side.
.943e		20 17 94	jsr $9417			jsr 	EvaluateExpressionAtPrecedence
.9441		ca		dex				dex
.9442		68		pla				pla 								; get operator, call the code.
.9443		20 4c 94	jsr $944c			jsr 	_EXPRCaller
.9446		68		pla				pla 								; restore precedence level
.9447		80 d3		bra $941c			bra 	_EXPRLoop 					; and go round.
.9449						_EXPRExit:
.9449		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.944b		60		rts				rts
.944c						_EXPRCaller:
.944c		da		phx				phx 								; save on stack, first thing is to restore it
.944d		0a		asl a				asl 	a 							; double so can use vectors into X
.944e		aa		tax				tax
.944f		7c 24 8c	jmp ($8c24,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9452						FloatingPointAdd:
.9452		20 c8 95	jsr $95c8			jsr 	FloatPrepare 				; prepare for floats
.9455		80 09		bra $9460			bra 	FloatAdd
.9457						FloatingPointSub:
.9457		20 c8 95	jsr $95c8			jsr 	FloatPrepare 				; prepare for floats
.945a						FloatSubtract:
.945a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.945c		49 80		eor #$80			eor 	#$80
.945e		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9460						FloatAdd:
.9460		48		pha				pha
.9461		5a		phy				phy
.9462		20 d7 95	jsr $95d7			jsr 	NSNormalise 				; normalise S[X]
.9465		f0 51		beq $94b8			beq 	_FAReturn1
.9467		e8		inx				inx 								; normalise S[X+1]
.9468		20 d7 95	jsr $95d7			jsr 	NSNormalise
.946b		ca		dex				dex
.946c		c9 00		cmp #$00			cmp 	#0
.946e		f0 60		beq $94d0			beq 	_FAExit 					; if so, just return A
.9470		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9472		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9474		f0 18		beq $948e			beq 	_FAExponentsEqual
.9476		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9478		a8		tay				tay
.9479		38		sec				sec 								; do a signed comparison of the exponents.
.947a		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.947c		50 02		bvc $9480			bvc 	_FANoSignedChange
.947e		49 80		eor #$80			eor 	#$80
.9480						_FANoSignedChange:
.9480		29 80		and #$80			and 	#$80
.9482		10 02		bpl $9486			bpl 	_FAHaveMax
.9484		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9486						_FAHaveMax:
.9486		20 d3 94	jsr $94d3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9489		e8		inx				inx
.948a		20 d3 94	jsr $94d3			jsr 	_FAShiftToExponent
.948d		ca		dex				dex
.948e						_FAExponentsEqual:
.948e		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9490		55 51		eor $51,x			eor 	NSStatus+1,x
.9492		30 0e		bmi $94a2			bmi 	_FADifferentSigns
.9494		20 0b 92	jsr $920b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9497		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9499		10 35		bpl $94d0			bpl 	_FAExit 					; if no, we are done.
.949b		20 51 9e	jsr $9e51			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.949e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.94a0		80 2e		bra $94d0			bra 	_FAExit
.94a2						_FADifferentSigns:
.94a2		20 25 92	jsr $9225			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.94a5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.94a7		10 06		bpl $94af			bpl 	_FACheckZero 				; if no, check for -0
.94a9		20 fa 9d	jsr $9dfa			jsr 	NSMNegate 					; netate result
.94ac		20 01 9e	jsr $9e01			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94af						_FACheckZero:
.94af		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero	 				; check for -0
.94b2		d0 1c		bne $94d0			bne 	_FAExit
.94b4		74 50		stz $50,x			stz 	NSStatus,x
.94b6		80 18		bra $94d0			bra 	_FAExit
.94b8						_FAReturn1:
.94b8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.94ba		95 58		sta $58,x			sta 	NSMantissa0,x
.94bc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94be		95 60		sta $60,x			sta 	NSMantissa1,x
.94c0		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.94c2		95 68		sta $68,x			sta 	NSMantissa2,x
.94c4		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.94c6		95 70		sta $70,x			sta 	NSMantissa3,x
.94c8		b5 79		lda $79,x			lda 	NSExponent+1,x
.94ca		95 78		sta $78,x			sta 	NSExponent,x
.94cc		b5 51		lda $51,x			lda 	NSStatus+1,x
.94ce		95 50		sta $50,x			sta 	NSStatus,x
.94d0						_FAExit:
.94d0		7a		ply				ply
.94d1		68		pla				pla
.94d2		60		rts				rts
.94d3						_FAShiftToExponent:
.94d3						_FAShiftToExponent2:
.94d3		98		tya				tya 								; compare Y to exponent
.94d4		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.94d6		f0 07		beq $94df			beq 	_FASEExit 					; exit if so.
.94d8		20 51 9e	jsr $9e51			jsr 	NSMShiftRight	 			; shift the mantissa right
.94db		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.94dd		80 f4		bra $94d3			bra 	_FAShiftToExponent2
.94df						_FASEExit:
.94df		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.94e0						CompareFloat:
.94e0		20 5a 94	jsr $945a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.94e3		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.94e5		29 f8		and #$f8			and 	#$F8
.94e7		15 68		ora $68,x			ora 	NSMantissa2,x
.94e9		15 70		ora $70,x			ora 	NSMantissa3,x
.94eb		f0 08		beq $94f5			beq 	_FCExit 					; zero, so approximately identical
.94ed		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.94ef		34 50		bit $50,x			bit 	NSStatus,x
.94f1		10 02		bpl $94f5			bpl 	_FCExit
.94f3						_FCNegative:
.94f3		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.94f5						_FCExit:
.94f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.94f6						FDivideCommand:
.94f6		fa		plx				plx	 								; restore stack position
.94f7		20 c8 95	jsr $95c8			jsr 	FloatPrepare 				; prepare for floats
.94fa						FloatDivide:
.94fa		48		pha				pha
.94fb		e8		inx				inx
.94fc		20 d7 95	jsr $95d7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94ff		ca		dex				dex
.9500		c9 00		cmp #$00			cmp 	#0
.9502		f0 1d		beq $9521			beq 	_FDZero
.9504		20 d7 95	jsr $95d7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9507		f0 16		beq $951f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9509		20 fc 90	jsr $90fc			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.950c		20 98 90	jsr $9098			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.950f		20 d7 95	jsr $95d7			jsr		NSNormalise 				; renormalise
.9512		20 8c 91	jsr $918c			jsr 	CalculateSign 				; calculate result sign
.9515		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9517		38		sec				sec
.9518		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.951a		38		sec				sec
.951b		e9 1e		sbc #$1e			sbc 	#30
.951d		95 78		sta $78,x			sta 	NSExponent,x
.951f						_FDExit:
.951f		68		pla				pla
.9520		60		rts				rts
.9521						_FDZero:
.9521		a9 03		lda #$03		lda	#3
.9523		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9526						FloatFractionalPart:
.9526		5a		phy				phy
.9527		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9529		29 7f		and #$7f			and 	#$7F
.952b		95 50		sta $50,x			sta 	NSStatus,x
.952d		20 d7 95	jsr $95d7			jsr 	NSNormalise
.9530		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9532		38		sec				sec
.9533		e9 e0		sbc #$e0			sbc 	#$E0
.9535		90 29		bcc $9560			bcc 	_FFPExit 					; already fractional
.9537		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9539		b0 22		bcs $955d			bcs 	_FFPZero
.953b		a8		tay				tay 								; put count to do in Y
.953c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.953e		20 62 95	jsr $9562			jsr 	_FFPPartial
.9541		95 70		sta $70,x			sta 	NSMantissa3,x
.9543		b5 68		lda $68,x			lda 	NSMantissa2,x
.9545		20 62 95	jsr $9562			jsr 	_FFPPartial
.9548		95 68		sta $68,x			sta 	NSMantissa2,x
.954a		b5 60		lda $60,x			lda 	NSMantissa1,x
.954c		20 62 95	jsr $9562			jsr 	_FFPPartial
.954f		95 60		sta $60,x			sta 	NSMantissa1,x
.9551		b5 58		lda $58,x			lda 	NSMantissa0,x
.9553		20 62 95	jsr $9562			jsr 	_FFPPartial
.9556		95 58		sta $58,x			sta 	NSMantissa0,x
.9558		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; zeroed check.
.955b		d0 03		bne $9560			bne 	_FFPExit
.955d						_FFPZero:
.955d		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.9560						_FFPExit:
.9560		7a		ply				ply
.9561		60		rts				rts
.9562						_FFPPartial:
.9562		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9564		f0 17		beq $957d			beq 	_FFFPPExit
.9566		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9568		b0 0c		bcs $9576			bcs 	_FFFPPWholeByte
.956a		5a		phy				phy
.956b						_FFFPPLeft:
.956b		0a		asl a				asl 	a
.956c		88		dey				dey
.956d		d0 fc		bne $956b			bne 	_FFFPPLeft
.956f		7a		ply				ply
.9570						_FFFPPRight:
.9570		4a		lsr a				lsr 	a
.9571		88		dey				dey
.9572		d0 fc		bne $9570			bne 	_FFFPPRight
.9574		80 07		bra $957d			bra 	_FFFPPExit
.9576						_FFFPPWholeByte:
.9576		98		tya				tya 								; subtract 8 from count
.9577		38		sec				sec
.9578		e9 08		sbc #$08			sbc 	#8
.957a		a8		tay				tay
.957b		a9 00		lda #$00			lda 	#0 							; and clear all
.957d						_FFFPPExit:
.957d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.957e						FloatIntegerPart:
.957e		48		pha				pha
.957f		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9581		f0 1d		beq $95a0			beq 	_FIPExit 					; if so do nothing
.9583		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; is it zero ?
.9586		f0 15		beq $959d			beq 	_FIPZero 					; if so return zero.
.9588		20 d7 95	jsr $95d7			jsr 	NSNormalise 				; normalise
.958b		f0 10		beq $959d			beq 	_FIPZero 					; normalised to zero, exit zero
.958d						_FIPShift:
.958d		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.958f		10 07		bpl $9598			bpl 	_FIPCheckZero
.9591		20 51 9e	jsr $9e51			jsr 	NSMShiftRight 				; shift mantissa right
.9594		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9596		80 f5		bra $958d			bra 	_FIPShift
.9598						_FIPCheckZero:
.9598		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; avoid -0 problem
.959b		d0 03		bne $95a0			bne 	_FIPExit 					; set to zero if mantissa zero.
.959d						_FIPZero:
.959d		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.95a0						_FIPExit:
.95a0		68		pla				pla
.95a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.95a2						FloatingPointMultiply:
.95a2		20 c8 95	jsr $95c8			jsr 	FloatPrepare 				; prepare for floats
.95a5						FloatMultiply:
.95a5		48		pha				pha
.95a6		20 d7 95	jsr $95d7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95a9		f0 18		beq $95c3			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.95ab		e8		inx				inx
.95ac		20 d7 95	jsr $95d7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95af		ca		dex				dex
.95b0		c9 00		cmp #$00			cmp 	#0
.95b2		f0 0c		beq $95c0			beq 	_FDSetZero
.95b4		20 4e 91	jsr $914e			jsr 	MultiplyShort 				; calculate the result.
.95b7		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95b9		18		clc				clc
.95ba		75 79		adc $79,x			adc 	NSExponent+1,x
.95bc		95 78		sta $78,x			sta 	NSExponent,x
.95be		80 03		bra $95c3			bra 	_FDExit
.95c0						_FDSetZero:
.95c0		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; return 0
.95c3						_FDExit:
.95c3		20 d7 95	jsr $95d7			jsr 	NSNormalise 				; normalise the result
.95c6		68		pla				pla
.95c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95c8						FloatPrepare:
.95c8		20 d3 96	jsr $96d3			jsr 	DereferenceTopTwo 			; dereference the top two values
.95cb		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.95cd		15 51		ora $51,x			ora 	NSStatus+1,x
.95cf		29 10		and #$10			and 	#NSBIsString
.95d1		d0 01		bne $95d4			bne 	_FDType
.95d3		60		rts				rts
.95d4						_FDType:
.95d4		4c c0 9f	jmp $9fc0			jmp 	TypeError
.95d7						NSNormalise:
.95d7		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.95d9		29 80		and #$80			and 	#$80
.95db		09 08		ora #$08			ora 	#NSTFloat
.95dd		95 50		sta $50,x			sta 	NSStatus,x
.95df		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; if zero exit
.95e2		d0 07		bne $95eb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.95e4		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.95e6		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.95e8		a9 00		lda #$00			lda 	#0 							; set Z flag
.95ea		60		rts				rts
.95eb						_NSNormaliseOptimise:
.95eb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.95ed		d0 19		bne $9608			bne 	_NSNormaliseLoop
.95ef		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.95f1		30 15		bmi $9608			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.95f3		95 70		sta $70,x			sta 	NSMantissa3,x
.95f5		b5 60		lda $60,x			lda 	NSMantissa1,x
.95f7		95 68		sta $68,x			sta 	NSMantissa2,x
.95f9		b5 58		lda $58,x			lda 	NSMantissa0,x
.95fb		95 60		sta $60,x			sta 	NSMantissa1,x
.95fd		74 58		stz $58,x			stz 	NSMantissa0,x
.95ff		b5 78		lda $78,x			lda 	NSExponent,x
.9601		38		sec				sec
.9602		e9 08		sbc #$08			sbc 	#8
.9604		95 78		sta $78,x			sta 	NSExponent,x
.9606		80 e3		bra $95eb			bra 	_NSNormaliseOptimise
.9608						_NSNormaliseLoop:
.9608		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.960a		70 07		bvs $9613			bvs 	_NSNExit 					; exit if so with Z flag clear
.960c		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; shift mantissa left
.960f		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9611		80 f5		bra $9608			bra 	_NSNormaliseLoop
.9613						_NSNExit:
.9613		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9615		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9616						AssignNumber:
.9616		5a		phy				phy
.9617		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9619		85 36		sta $36				sta 	zTemp0
.961b		b5 60		lda $60,x			lda 	NSMantissa1,x
.961d		85 37		sta $37				sta 	zTemp0+1
.961f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9621		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9623		95 50		sta $50,x			sta 	NSStatus,x
.9625		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9627		c9 08		cmp #$08			cmp 	#NSTFloat
.9629		f0 24		beq $964f			beq 	_ANFloat
.962b		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.962d		f0 03		beq $9632			beq		_ANNotFloat
.962f		4c bb 9f	jmp $9fbb			jmp 	RangeError					; if it is, report an error.
.9632						_ANNotFloat:
.9632		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9634		29 03		and #$03			and 	#3
.9636		d0 05		bne $963d			bne 	_ANByteWord
.9638		20 5a 96	jsr $965a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.963b		80 1b		bra $9658			bra 	_ANExit
.963d						_ANByteWord:
.963d		48		pha				pha 								; save count
.963e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9640		92 36		sta ($36)			sta 	(zTemp0)
.9642		68		pla				pla
.9643		c9 01		cmp #$01			cmp	 	#1
.9645		f0 11		beq $9658			beq 	_ANExit
.9647		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9649		a0 01		ldy #$01			ldy 	#1
.964b		91 36		sta ($36),y			sta 	(zTemp0),y
.964d		80 09		bra $9658			bra 	_ANExit
.964f						_ANFloat:
.964f		20 5a 96	jsr $965a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9652		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9654		a0 04		ldy #$04			ldy 	#4
.9656		91 36		sta ($36),y			sta 	(zTemp0),y
.9658						_ANExit:
.9658		7a		ply				ply
.9659		60		rts				rts
.965a						_ANCopy4PackSign:
.965a		a0 03		ldy #$03			ldy 	#3
.965c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.965e		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9660		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9662		91 36		sta ($36),y			sta 	(zTemp0),y
.9664		88		dey				dey
.9665		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9667		91 36		sta ($36),y			sta 	(zTemp0),y
.9669		88		dey				dey
.966a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.966c		91 36		sta ($36),y			sta 	(zTemp0),y
.966e		88		dey				dey
.966f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9671		91 36		sta ($36),y			sta 	(zTemp0),y
.9673		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9674						AssignString:
.9674		5a		phy				phy
.9675		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9677		85 38		sta $38				sta 	zTemp1
.9679		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.967b		85 39		sta $39				sta 	zTemp1+1
.967d		b5 58		lda $58,x			lda 	NSMantissa0,x
.967f		85 36		sta $36				sta 	zTemp0
.9681		b5 60		lda $60,x			lda 	NSMantissa1,x
.9683		85 37		sta $37				sta 	zTemp0+1
.9685		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9687		b1 36		lda ($36),y			lda 	(zTemp0),y
.9689		f0 23		beq $96ae			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.968b		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.968c		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.968e		e9 02		sbc #$02			sbc 	#2
.9690		85 3c		sta $3c				sta 	zsTemp
.9692		a0 01		ldy #$01			ldy 	#1
.9694		b1 36		lda ($36),y			lda 	(zTemp0),y
.9696		e9 00		sbc #$00			sbc 	#0
.9698		85 3d		sta $3d				sta 	zsTemp+1
.969a		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.969c						_ASGetLength:
.969c		c8		iny				iny
.969d		b1 38		lda ($38),y			lda 	(zTemp1),y
.969f		d0 fb		bne $969c			bne 	_ASGetLength
.96a1		98		tya				tya 								; is this length <= current length
.96a2		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.96a4		90 1e		bcc $96c4			bcc 	_ASCopyString
.96a6		f0 1c		beq $96c4			beq 	_ASCopyString
.96a8		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.96aa		a0 01		ldy #$01			ldy 	#1
.96ac		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96ae						_ASNewStringRequired:
.96ae		e8		inx				inx 								; concrete the new string.
.96af		20 7b af	jsr $af7b			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.96b2		ca		dex				dex
.96b3		18		clc				clc
.96b4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.96b6		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.96b8		92 36		sta ($36)			sta 	(zTemp0)
.96ba		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96bc		69 00		adc #$00			adc 	#0
.96be		a0 01		ldy #$01			ldy 	#1
.96c0		91 36		sta ($36),y			sta 	(zTemp0),y
.96c2		80 0d		bra $96d1			bra 	_ASExit
.96c4						_ASCopyString:
.96c4		a0 00		ldy #$00			ldy 	#0
.96c6						_ASCopyLoop:
.96c6		b1 38		lda ($38),y			lda 	(zTemp1),y
.96c8		c8		iny				iny
.96c9		c8		iny				iny
.96ca		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96cc		88		dey				dey
.96cd		c9 00		cmp #$00			cmp 	#0
.96cf		d0 f5		bne $96c6			bne 	_ASCopyLoop
.96d1						_ASExit:
.96d1		7a		ply				ply
.96d2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.96d3						DereferenceTopTwo:
.96d3		e8		inx				inx
.96d4		20 d8 96	jsr $96d8			jsr 	Dereference 				; deref x+1
.96d7		ca		dex				dex  								; falls through to deref x
.96d8						Dereference:
.96d8		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.96da		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.96dc		f0 48		beq $9726			beq 	_DRFExit 					; not a reference, so exit.
.96de		5a		phy				phy
.96df		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.96e1		85 36		sta $36				sta 	zTemp0
.96e3		b5 60		lda $60,x			lda 	NSMantissa1,x
.96e5		85 37		sta $37				sta 	zTemp0+1
.96e7		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.96e9		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.96eb		95 58		sta $58,x			sta 	NSMantissa0,x
.96ed		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.96ef		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.96f1		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.96f3		f0 0e		beq $9703			beq 	_DRFDereferenceTwo
.96f5		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.96f7		f0 2f		beq $9728			beq 	_DRFFull
.96f9		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.96fb		29 03		and #$03			and 	#3
.96fd		f0 29		beq $9728			beq 	_DRFFull 					; the whole word
.96ff		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9701		f0 06		beq $9709			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9703						_DRFDereferenceTwo:
.9703		a0 01		ldy #$01			ldy 	#1
.9705		b1 36		lda ($36),y			lda 	(zTemp0),y
.9707		95 60		sta $60,x			sta 	NSMantissa1,x
.9709						_DRFClear23:
.9709		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.970b		74 70		stz $70,x			stz 	NSMantissa3,x
.970d		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.970f		29 18		and #$18			and 	#NSBTypeMask
.9711		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9713		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9715		d0 0e		bne $9725			bne 	_DRFNotString
.9717		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9719		15 60		ora $60,x			ora 	NSMantissa1,x
.971b		d0 08		bne $9725			bne 	_DRFNotString
.971d		a9 27		lda #$27			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.971f		95 58		sta $58,x			sta 	NSMantissa0,X
.9721		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.9723		95 60		sta $60,x			sta 	NSMantissa1,X
.9725						_DRFNotString
.9725		7a		ply				ply 								; restore Y and exit
.9726						_DRFExit:
.9726		60		rts				rts
.9727						_DRFNullString:
>9727		00						.byte 	0
.9728						_DRFFull:
.9728		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.972a		b1 36		lda ($36),y			lda 	(zTemp0),y
.972c		95 60		sta $60,x			sta 	NSMantissa1,x
.972e		c8		iny				iny
.972f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9731		95 68		sta $68,x			sta 	NSMantissa2,x
.9733		c8		iny				iny
.9734		b1 36		lda ($36),y			lda 	(zTemp0),y
.9736		95 70		sta $70,x			sta 	NSMantissa3,x
.9738		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.973a		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.973c		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.973e		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9740		f0 05		beq $9747			beq 	_DRFNoExponent
.9742		c8		iny				iny 								; if not, read the exponent as well.
.9743		b1 36		lda ($36),y			lda 	(zTemp0),y
.9745		95 78		sta $78,x			sta 	NSExponent,x
.9747						_DRFNoExponent:
.9747		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9749		10 0a		bpl $9755			bpl 	_DRFExit2 					; if not, then exit.
.974b		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.974d		95 70		sta $70,x			sta 	NSMantissa3,x
.974f		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9751		09 80		ora #$80			ora 	#NSBIsNegative
.9753		95 50		sta $50,x			sta 	NSStatus,x
.9755						_DRFExit2:
.9755		7a		ply				ply
.9756		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9757						EncodeNumberStart:
.9757		38		sec				sec
.9758		80 01		bra $975b			bra 	EncodeNumberContinue+1
.975a						EncodeNumberContinue:
.975a		18		clc				clc
.975b						EncodeNumber:
.975b		08		php				php 								; save reset flag.
.975c		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.975e		f0 12		beq $9772			beq 	_ENIsOkay
.9760		c9 30		cmp #$30			cmp 	#"0"
.9762		90 04		bcc $9768			bcc 	_ENBadNumber
.9764		c9 3a		cmp #$3a			cmp 	#"9"+1
.9766		90 0a		bcc $9772			bcc 	_ENIsOkay
.9768						_ENBadNumber:
.9768		28		plp				plp 								; throw saved reset
.9769		ad 05 04	lda $0405			lda 	EncodeState 				; if in decimal mode, construct final number
.976c		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.976e		f0 7b		beq $97eb			beq 	_ENConstructFinal
.9770						_ENFail:
.9770		18		clc				clc 								; not allowed
.9771		60		rts				rts
.9772						_ENIsOkay:
.9772		28		plp				plp 								; are we restarting
.9773		90 15		bcc $978a			bcc 	_ENNoRestart
.9775						_ENStartEncode:
.9775		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9777		f0 0c		beq $9785			beq 	_ENFirstDP
.9779		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.977b		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte 					; in single byte mode.
.977e		a9 01		lda #$01			lda 	#ESTA_Low
.9780						_ENExitChange:
.9780		8d 05 04	sta $0405			sta 	EncodeState 				; save new state
.9783		38		sec				sec
.9784		60		rts				rts
.9785						_ENFirstDP:
.9785		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; clear integer part
.9788		80 3c		bra $97c6			bra 	_ESTASwitchFloat			; go straight to float and exi
.978a						_ENNoRestart:
.978a		48		pha				pha 								; save digit or DP on stack.
.978b		ad 05 04	lda $0405			lda 	EncodeState 				; get current state
.978e		c9 01		cmp #$01			cmp 	#ESTA_Low
.9790		f0 09		beq $979b			beq  	_ESTALowState
.9792		c9 02		cmp #$02			cmp 	#ESTA_High
.9794		f0 26		beq $97bc			beq 	_ESTAHighState
.9796		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9798		f0 38		beq $97d2			beq 	_ESTADecimalState
>979a		db						.byte 	$DB 						; causes a break in the emulator
.979b						_ESTALowState:
.979b		68		pla				pla 								; get value back
.979c		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.979e		f0 26		beq $97c6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.97a0		29 0f		and #$0f			and 	#15 						; make digit
.97a2		8d 06 04	sta $0406			sta 	DigitTemp 					; save it.
.97a5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.97a7		0a		asl a				asl 	a
.97a8		0a		asl a				asl 	a
.97a9		75 58		adc $58,x			adc 	NSMantissa0,x
.97ab		0a		asl a				asl 	a
.97ac		6d 06 04	adc $0406			adc 	DigitTemp
.97af		95 58		sta $58,x			sta 	NSMantissa0,x
.97b1		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.97b3		90 05		bcc $97ba			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.97b5		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.97b7		8d 05 04	sta $0405			sta 	EncodeState
.97ba						_ESTANoSwitch:
.97ba		38		sec				sec
.97bb		60		rts				rts
.97bc						_ESTAHighState:
.97bc		68		pla				pla 								; get value back
.97bd		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97bf		f0 05		beq $97c6			beq 	_ESTASwitchFloat
.97c1		20 1f 98	jsr $981f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97c4		38		sec				sec
.97c5		60		rts				rts
.97c6						_ESTASwitchFloat:
.97c6		9c 07 04	stz $0407			stz 	DecimalCount 				; reset the count of digits - we divide by 10^n at the end.
.97c9		e8		inx				inx 								; zero the decimal additive.
.97ca		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.97cd		ca		dex				dex
.97ce		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.97d0		80 ae		bra $9780			bra 	_ENExitChange
.97d2						_ESTADecimalState:
.97d2		68		pla				pla 								; digit.
.97d3		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.97d5		f0 99		beq $9770			beq 	_ENFail
.97d7		e8		inx				inx 								; put digit into fractional part of X+1
.97d8		20 1f 98	jsr $981f			jsr 	ESTAShiftDigitIntoMantissa
.97db		ca		dex				dex
.97dc		ee 07 04	inc $0407			inc 	DecimalCount 				; bump the count of decimals
.97df		ad 07 04	lda $0407			lda 	DecimalCount 				; too many decimal digits.
.97e2		c9 0b		cmp #$0b			cmp 	#11
.97e4		f0 02		beq $97e8			beq 	_ESTADSFail
.97e6		38		sec				sec
.97e7		60		rts				rts
.97e8						_ESTADSFail:
.97e8		4c bb 9f	jmp $9fbb			jmp 	RangeError
.97eb						_ENConstructFinal:
.97eb		ad 07 04	lda $0407			lda 	DecimalCount 				; get decimal count
.97ee		f0 2d		beq $981d			beq 	_ENCFExit 					; no decimals
.97f0		5a		phy				phy
.97f1		0a		asl a				asl 	a 							; x 4 and CLC
.97f2		0a		asl a				asl 	a
.97f3		6d 07 04	adc $0407			adc 	DecimalCount
.97f6		a8		tay				tay
.97f7		b9 7a 9f	lda $9f7a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.97fa		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.97fc		b9 7b 9f	lda $9f7b,y			lda 	DecimalScalarTable-5+1,y
.97ff		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9801		b9 7c 9f	lda $9f7c,y			lda 	DecimalScalarTable-5+2,y
.9804		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9806		b9 7d 9f	lda $9f7d,y			lda 	DecimalScalarTable-5+3,y
.9809		95 72		sta $72,x			sta 	NSMantissa3+2,x
.980b		b9 7e 9f	lda $9f7e,y			lda 	DecimalScalarTable-5+4,y
.980e		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9810		a9 08		lda #$08			lda 	#NSTFloat
.9812		95 52		sta $52,x			sta 	NSStatus+2,x
.9814		7a		ply				ply
.9815		e8		inx				inx 								; multiply decimal const by decimal scalar
.9816		20 a5 95	jsr $95a5			jsr 	FloatMultiply
.9819		ca		dex				dex
.981a		20 60 94	jsr $9460			jsr 	FloatAdd 					; add to integer part.
.981d						_ENCFExit:
.981d		18		clc				clc 								; reject the digit.
.981e		60		rts				rts
.981f						ESTAShiftDigitIntoMantissa:
.981f		29 0f		and #$0f			and 	#15 						; save digit
.9821		48		pha				pha
.9822		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9824		48		pha				pha
.9825		b5 68		lda $68,x			lda 	NSMantissa2,x
.9827		48		pha				pha
.9828		b5 60		lda $60,x			lda 	NSMantissa1,x
.982a		48		pha				pha
.982b		b5 58		lda $58,x			lda 	NSMantissa0,x
.982d		48		pha				pha
.982e		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 2
.9831		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 4
.9834		18		clc				clc 								; pop mantissa and add
.9835		68		pla				pla
.9836		75 58		adc $58,x			adc 	NSMantissa0,x
.9838		95 58		sta $58,x			sta 	NSMantissa0,x
.983a		68		pla				pla
.983b		75 60		adc $60,x			adc 	NSMantissa1,x
.983d		95 60		sta $60,x			sta 	NSMantissa1,x
.983f		68		pla				pla
.9840		75 68		adc $68,x			adc 	NSMantissa2,x
.9842		95 68		sta $68,x			sta 	NSMantissa2,x
.9844		68		pla				pla
.9845		75 70		adc $70,x			adc 	NSMantissa3,x
.9847		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9849		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 10
.984c		68		pla				pla 								; add digit
.984d		18		clc				clc
.984e		75 58		adc $58,x			adc 	NSMantissa0,x
.9850		95 58		sta $58,x			sta 	NSMantissa0,x
.9852		90 0a		bcc $985e			bcc 	_ESTASDExit
.9854		f6 60		inc $60,x			inc 	NSMantissa1,x
.9856		d0 06		bne $985e			bne 	_ESTASDExit
.9858		f6 68		inc $68,x			inc 	NSMantissa2,x
.985a		d0 02		bne $985e			bne 	_ESTASDExit
.985c		f6 70		inc $70,x			inc 	NSMantissa3,x
.985e						_ESTASDExit:
.985e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.985f						EvaluateTerm:
.985f		b1 30		lda ($30),y			lda 	(codePtr),y
.9861		30 18		bmi $987b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9863		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9865		b0 6c		bcs $98d3			bcs 	_ETVariable
.9867		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9869		90 6b		bcc $98d6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.986b		c9 3a		cmp #$3a			cmp 	#'9'+1
.986d		b0 67		bcs $98d6			bcs 	_ETPuncUnary
.986f		20 57 97	jsr $9757			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9872						_ETNumber:
.9872		c8		iny				iny 								; keep encoding until we have the numbers
.9873		b1 30		lda ($30),y			lda 	(codePtr),y
.9875		20 5a 97	jsr $975a			jsr 	EncodeNumberContinue
.9878		b0 f8		bcs $9872			bcs 	_ETNumber 					; go back if accepted.
.987a		60		rts				rts
.987b						_ETCheckUnary:
.987b		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.987d		f0 3f		beq $98be			beq 	_ETString
.987f		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9881		f0 12		beq $9895			beq 	_ETHexConstant
.9883		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9885		90 0b		bcc $9892			bcc 	_ETSyntaxError
.9887		c9 a2		cmp #$a2			cmp 	#KWC_LAST_UNARY+1
.9889		b0 07		bcs $9892			bcs 	_ETSyntaxError
.988b		da		phx				phx 								; push X on the stack
.988c		0a		asl a				asl 	a 							; put vector x 2 into X
.988d		aa		tax				tax
.988e		c8		iny				iny 								; consume unary function token
.988f		7c a4 8c	jmp ($8ca4,x)			jmp 	(VectorSet0,x) 				; and do it.
.9892						_ETSyntaxError:
.9892		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.9895						_ETHexConstant:
.9895		c8		iny				iny 								; skip #
.9896		c8		iny				iny 								; skip count
.9897		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; clear result
.989a						_ETHLoop:
.989a		b1 30		lda ($30),y			lda 	(codePtr),y
.989c		c8		iny				iny 								; and consume
.989d		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.989f		f0 1c		beq $98bd			beq 	_ETHExit
.98a1		48		pha				pha 								; save on stack.
.98a2		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 2
.98a5		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 4
.98a8		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 8
.98ab		20 47 9e	jsr $9e47			jsr 	NSMShiftLeft 				; x 16
.98ae		68		pla				pla 								; ASCII
.98af		c9 41		cmp #$41			cmp 	#'A'
.98b1		90 02		bcc $98b5			bcc 	_ETHNotChar
.98b3		e9 07		sbc #$07			sbc 	#7
.98b5						_ETHNotChar:
.98b5		29 0f		and #$0f			and 	#15 						; digit now
.98b7		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98b9		95 58		sta $58,x			sta 	NSMantissa0,x
.98bb		80 dd		bra $989a			bra 	_ETHLoop 					; go round.
.98bd						_ETHExit:
.98bd		60		rts				rts
.98be						_ETString:
.98be		c8		iny				iny 								; look at length
.98bf		b1 30		lda ($30),y			lda 	(codePtr),y
.98c1		48		pha				pha
.98c2		c8		iny				iny 								; first character
.98c3		20 a3 a5	jsr $a5a3			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98c6		68		pla				pla 								; restore count and save
.98c7		85 36		sta $36				sta 	zTemp0
.98c9		98		tya				tya 								; add length to Y to skip it.
.98ca		18		clc				clc
.98cb		65 36		adc $36				adc 	zTemp0
.98cd		a8		tay				tay
.98ce		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.98d0		95 50		sta $50,x			sta 	NSStatus,x
.98d2		60		rts				rts
.98d3						_ETVariable:
.98d3		4c 28 99	jmp $9928			jmp 	VariableHandler
.98d6						_ETPuncUnary:
.98d6		c8		iny				iny 								; consume the unary character
.98d7		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.98d9		f0 2b		beq $9906			beq 	_ETUnaryNegate
.98db		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.98dd		f0 36		beq $9915			beq 	_ETDereference
.98df		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.98e1		f0 3e		beq $9921			beq 	_ETParenthesis
.98e3		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.98e5		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.98e7		f0 06		beq $98ef			beq 	_ETIndirection
.98e9		e6 36		inc $36				inc 	zTemp0
.98eb		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.98ed		d0 a3		bne $9892			bne 	_ETSyntaxError
.98ef						_ETIndirection:
.98ef		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.98f1		1a		inc a				inc 	a
.98f2		48		pha				pha
.98f3		20 5f 98	jsr $985f			jsr 	EvaluateTerm				; evaluate the term
.98f6		20 d8 96	jsr $96d8			jsr 	Dereference 				; dereference it.
.98f9		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.98fb		d0 06		bne $9903			bne 	_ETTypeMismatch
.98fd		68		pla				pla 								; indirection 1-2
.98fe		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9900		95 50		sta $50,x			sta 	NSStatus,x
.9902		60		rts				rts
.9903						_ETTypeMismatch:
.9903		4c c0 9f	jmp $9fc0			jmp 	TypeError
.9906						_ETUnaryNegate:
.9906		20 5f 98	jsr $985f			jsr 	EvaluateTerm				; evaluate the term
.9909		20 d8 96	jsr $96d8			jsr 	Dereference 				; dereference it.
.990c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.990e		29 10		and #$10			and 	#NSTString
.9910		d0 f1		bne $9903			bne 	_ETTypeMismatch
.9912		4c fa 9d	jmp $9dfa			jmp 	NSMNegate  					; just toggles the sign bit.
.9915						_ETDereference:
.9915		20 5f 98	jsr $985f			jsr 	EvaluateTerm				; evaluate the term
.9918		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.991a		29 20		and #$20			and 	#NSBIsReference
.991c		f0 e5		beq $9903			beq 	_ETTypeMismatch
.991e		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9920		60		rts				rts
.9921						_ETParenthesis:
.9921		20 15 94	jsr $9415			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9924		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; check for )
.9927		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9928						VariableHandler:
.9928		b1 30		lda ($30),y			lda 	(codePtr),y
.992a		18		clc				clc
.992b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.992d		85 37		sta $37				sta 	zTemp0+1
.992f		c8		iny				iny
.9930		b1 30		lda ($30),y			lda 	(codePtr),y
.9932		85 36		sta $36				sta 	zTemp0
.9934		c8		iny				iny
.9935		18		clc				clc									; copy variable address+3 to mantissa
.9936		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9938		95 58		sta $58,x			sta 	NSMantissa0,x
.993a		a5 37		lda $37				lda 	zTemp0+1
.993c		69 00		adc #$00			adc 	#0
.993e		95 60		sta $60,x			sta 	NSMantissa1,x
.9940		74 68		stz $68,x			stz 	NSMantissa2,x
.9942		74 70		stz $70,x			stz 	NSMantissa3,x
.9944		74 78		stz $78,x			stz 	NSExponent,x
.9946		5a		phy				phy
.9947		a0 02		ldy #$02			ldy 	#2 							; read type
.9949		b1 36		lda ($36),y			lda 	(zTemp0),y
.994b		7a		ply				ply
.994c		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.994e		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9950		95 50		sta $50,x			sta 	NSStatus,x
.9952		29 04		and #$04			and 	#NSBIsArray
.9954		d0 01		bne $9957			bne 	_VHArray
.9956		60		rts				rts
.9957						_VHArray:
.9957		e8		inx				inx
.9958		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get the 1st index.
.995b		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.995d		95 51		sta $51,x			sta 	NSStatus+1,x
.995f		b1 30		lda ($30),y			lda 	(codePtr),y
.9961		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9963		d0 06		bne $996b			bne 	_VHNoSecondIndex
.9965		c8		iny				iny 								; skip the comma
.9966		e8		inx				inx
.9967		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.996a		ca		dex				dex
.996b						_VHNoSecondIndex:
.996b		ca		dex				dex 								; set X back.
.996c		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; and check the right bracket.
.996f		5a		phy				phy 								; save position
.9970		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9972		85 3e		sta $3e				sta 	zaTemp
.9974		b5 60		lda $60,x			lda 	NSMantissa1,x
.9976		85 3f		sta $3f				sta 	zaTemp+1
.9978		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.997a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.997c		f0 5d		beq $99db			beq 	_VHBadArray
.997e		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9980		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9982		f0 02		beq $9986			beq 	_VHHas2Mask
.9984		a9 ff		lda #$ff			lda 	#$FF
.9986						_VHHas2Mask:
.9986		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9988		f0 4c		beq $99d6			beq 	_VHBadIndex
.998a		0a		asl a				asl 	a 							; carry will be set if a second index
.998b		90 08		bcc $9995			bcc 	_VHCheckFirstIndex
.998d		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.998f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9991		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9993		90 41		bcc $99d6			bcc 	_VHBadIndex
.9995						_VHCheckFirstIndex:
.9995		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9997		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9999		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.999b		90 39		bcc $99d6			bcc 	_VHBadIndex
.999d		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.999f		64 37		stz $37				stz 	zTemp0+1
.99a1		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.99a3		30 0e		bmi $99b3			bmi 	_VHNoMultiply
.99a5		da		phx				phx
.99a6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.99a8		48		pha				pha
.99a9		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.99ab		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99ad		1a		inc a				inc 	a 							; add 1 for zero base
.99ae		fa		plx				plx
.99af		20 e3 9d	jsr $9de3			jsr 	Multiply8x8 				; calculate -> Z0
.99b2		fa		plx				plx
.99b3						_VHNoMultiply:
.99b3		18		clc				clc
.99b4		a5 36		lda $36				lda 	zTemp0
.99b6		75 59		adc $59,x			adc 	NSMantissa0+1,x
.99b8		85 36		sta $36				sta 	zTemp0
.99ba		a5 37		lda $37				lda 	zTemp0+1
.99bc		69 00		adc #$00			adc 	#0
.99be		85 37		sta $37				sta 	zTemp0+1
.99c0		b5 50		lda $50,x			lda 	NSStatus,x
.99c2		20 80 85	jsr $8580			jsr 	ScaleByBaseType
.99c5		18		clc				clc
.99c6		b2 3e		lda ($3e)			lda 	(zaTemp)
.99c8		65 36		adc $36				adc 	zTemp0
.99ca		95 58		sta $58,x			sta 	NSMantissa0,x
.99cc		a0 01		ldy #$01			ldy 	#1
.99ce		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99d0		65 37		adc $37				adc 	zTemp0+1
.99d2		95 60		sta $60,x			sta 	NSMantissa1,x
.99d4		7a		ply				ply 								; restore position
.99d5		60		rts				rts
.99d6						_VHBadIndex:
.99d6		a9 17		lda #$17		lda	#23
.99d8		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.99db						_VHBadArray:
.99db		a9 18		lda #$18		lda	#24
.99dd		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.99e0						AbsUnary:
.99e0		fa		plx				plx 								; restore stack pos
.99e1		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; get a float or int
.99e4		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.99e7		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.99e9		29 7f		and #$7f			and 	#$7F
.99eb		95 50		sta $50,x			sta 	NSStatus,x
.99ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.99ee						AllocUnary:
.99ee		fa		plx				plx 								; restore stack pos
.99ef		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger		; get bytes required.
.99f2		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.99f5		da		phx				phx 								; save X/Y
.99f6		5a		phy				phy
.99f7		8a		txa				txa 								; copy X into Y
.99f8		a8		tay				tay
.99f9		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.99fc		aa		tax				tax
.99fd		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9a00		20 0d 9a	jsr $9a0d			jsr 	AllocateXABytes 			; allocate memory
.9a03		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9a06		8a		txa				txa 	 							; typing is 16 bit integer.
.9a07		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9a0a		7a		ply				ply
.9a0b		fa		plx				plx
.9a0c		60		rts				rts
.9a0d						AllocateXABytes:
.9a0d		5a		phy				phy
.9a0e		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a11		84 36		sty $36				sty 	zTemp0
.9a13		5a		phy				phy
.9a14		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a17		84 37		sty $37				sty 	zTemp0+1
.9a19		5a		phy				phy
.9a1a		18		clc				clc 								; add to low memory pointer
.9a1b		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a1e		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a21		8a		txa				txa
.9a22		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a25		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a28		b0 2f		bcs $9a59			bcs 	CISSMemory
.9a2a		20 4b 9a	jsr $9a4b			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a2d						_ClearMemory:
.9a2d		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a30		c5 36		cmp $36				cmp 	zTemp0
.9a32		d0 07		bne $9a3b			bne 	_CMClearNext
.9a34		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a37		c5 37		cmp $37				cmp 	zTemp0+1
.9a39		f0 0c		beq $9a47			beq 	_CMExit
.9a3b						_CMClearNext:
.9a3b		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a3d		92 36		sta ($36)			sta 	(zTemp0)
.9a3f		e6 36		inc $36				inc 	zTemp0
.9a41		d0 ea		bne $9a2d			bne 	_ClearMemory
.9a43		e6 37		inc $37				inc		zTemp0+1
.9a45		80 e6		bra $9a2d			bra 	_ClearMemory
.9a47						_CMExit:
.9a47		fa		plx				plx
.9a48		68		pla				pla
.9a49		7a		ply				ply
.9a4a		60		rts				rts
.9a4b						CheckIdentifierStringSpace:
.9a4b		48		pha				pha
.9a4c		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9a4f		18		clc				clc
.9a50		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a52		cd 0f 04	cmp $040f			cmp 	StringMemory+1 				; is it >= StringMemory
.9a55		b0 02		bcs $9a59			bcs 	CISSMemory
.9a57		68		pla				pla
.9a58		60		rts				rts
.9a59						CISSMemory:
.9a59		a9 06		lda #$06		lda	#6
.9a5b		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a5e						AscUnary:
.9a5e		fa		plx				plx 								; restore stack pos
.9a5f		20 90 9d	jsr $9d90			jsr 	EvaluateString 				; get a string
.9a62		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9a64		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte 					; ASC("") will return zero.
.9a67		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9a6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/deekpeek.asm

.9a6b						PeekUnary:
.9a6b		18		clc				clc
.9a6c		80 01		bra $9a6f			bra 	DPUnary
.9a6e						DeekUnary:
.9a6e		38		sec				sec
.9a6f						DPUnary:
.9a6f		fa		plx				plx 								; restore position.
.9a70		08		php				php									; save on stack, CS = Deek, CC = Peek
.9a71		20 b8 9d	jsr $9db8			jsr		Evaluate16BitInteger 		; address as constant.
.9a74		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9a77		28		plp				plp 								; function back.
.9a78		a9 21		lda #$21			lda 	#NSBIsReference+NSTInteger+1 ; 1 byte read
.9a7a		90 01		bcc $9a7d			bcc 	_DPUpdate
.9a7c		1a		inc a				inc 	a 							; 2 byte read
.9a7d						_DPUpdate:
.9a7d		95 50		sta $50,x			sta 	NSStatus,x 					; set to 1/2 byte reference.
.9a7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a80						FracUnary:
.9a80		fa		plx				plx 								; restore stack pos
.9a81		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; get a float or int
.9a84		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9a87		b5 50		lda $50,x			lda 	NSStatus,x
.9a89		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a8b		f0 04		beq $9a91			beq 	_IUZero
.9a8d		20 26 95	jsr $9526			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9a90		60		rts				rts
.9a91						_IUZero:
.9a91		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.9a94		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a95						IntUnary:
.9a95		fa		plx				plx 								; restore stack pos
.9a96		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; get a float or int
.9a99		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9a9c		b5 50		lda $50,x			lda 	NSStatus,x
.9a9e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9aa0		f0 03		beq $9aa5			beq 	_IUExit
.9aa2		20 7e 95	jsr $957e			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9aa5						_IUExit:
.9aa5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9aa6						LenUnary:
.9aa6		fa		plx				plx 								; restore stack pos
.9aa7		20 90 9d	jsr $9d90			jsr 	EvaluateString 				; get a string
.9aaa		5a		phy				phy
.9aab		a0 00		ldy #$00			ldy 	#0 							; find length
.9aad						_LenFind:
.9aad		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9aaf		f0 06		beq $9ab7			beq 	_LenExit
.9ab1		c8		iny				iny
.9ab2		d0 f9		bne $9aad			bne 	_LenFind
.9ab4		4c bb 9f	jmp $9fbb			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9ab7						_LenExit:
.9ab7		98		tya				tya		 							; return length
.9ab8		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.9abb		7a		ply				ply
.9abc		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9abf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9ac0						Unary_Min:
.9ac0		a9 01		lda #$01			lda 	#1
.9ac2		80 02		bra $9ac6			bra 	UnaryMinMaxMain
.9ac4						Unary_Max:
.9ac4		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9ac6						UnaryMinMaxMain:
.9ac6		fa		plx				plx 								; get index on number stack
.9ac7		48		pha				pha 								; save comparator
.9ac8		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue 				; get the first value.
.9acb						_UMMMLoop:
.9acb		b1 30		lda ($30),y			lda 	(codePtr),y
.9acd		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9acf		f0 22		beq $9af3			beq 	_UMMMDone
.9ad1		20 00 8f	jsr $8f00			jsr 	CheckComma 					; must be a comma
.9ad4		e8		inx				inx
.9ad5		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue
.9ad8		ca		dex				dex
.9ad9		20 1b 9e	jsr $9e1b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9adc		e8		inx				inx
.9add		20 1b 9e	jsr $9e1b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9ae0		e8		inx				inx
.9ae1		20 c8 8f	jsr $8fc8			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9ae4		ca		dex				dex
.9ae5		ca		dex				dex
.9ae6		85 36		sta $36				sta 	zTemp0 						; save required result
.9ae8		68		pla				pla 								; get and save comparator
.9ae9		48		pha				pha
.9aea		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9aec		d0 dd		bne $9acb			bne 	_UMMMLoop
.9aee		20 f6 9a	jsr $9af6			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9af1		80 d8		bra $9acb			bra 	_UMMMLoop
.9af3						_UMMMDone:
.9af3		68		pla				pla 								; throw the comparator
.9af4		c8		iny				iny 								; skip )
.9af5		60		rts				rts
.9af6						ExpCopyAboveDown:
.9af6		b5 51		lda $51,x			lda 	NSStatus+1,x
.9af8		95 50		sta $50,x			sta 	NSStatus,x
.9afa		b5 79		lda $79,x			lda 	NSExponent+1,x
.9afc		95 78		sta $78,x			sta 	NSExponent,x
.9afe		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b00		95 58		sta $58,x			sta 	NSMantissa0,x
.9b02		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b04		95 60		sta $60,x			sta 	NSMantissa1,x
.9b06		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b08		95 68		sta $68,x			sta 	NSMantissa2,x
.9b0a		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b0c		95 70		sta $70,x			sta 	NSMantissa3,x
.9b0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b0f						Unary_Not:
.9b0f		fa		plx				plx
.9b10		20 a5 9d	jsr $9da5			jsr 	EvaluateInteger 			; get integer
.9b13		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9b16		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; zero mantissa ?
.9b19		f0 04		beq $9b1f			beq 	_NotZero
.9b1b		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.9b1e		60		rts				rts
.9b1f						_NotZero:
.9b1f		4c 7e 8f	jmp $8f7e			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b22						Unary_Random:
.9b22		fa		plx				plx
.9b23		20 94 9b	jsr $9b94			jsr 	Random32Bit 				; get a random number
.9b26		20 7d 9b	jsr $9b7d			jsr 	URCopyToMantissa  			; put in mantissa
.9b29		b1 30		lda ($30),y			lda 	(codePtr),y
.9b2b		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9b2d		f0 08		beq $9b37			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9b2f		e8		inx				inx
.9b30		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b33		ca		dex				dex
.9b34		20 d0 90	jsr $90d0			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9b37						_URNoModulus:
.9b37		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9b39		74 78		stz $78,x			stz 	NSExponent,x
.9b3b		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9b3e		60		rts				rts
.9b3f						Unary_Rnd:
.9b3f		fa		plx				plx
.9b40		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; number to use.
.9b43		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; closing bracket
.9b46		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b49		f0 26		beq $9b71			beq 	_URCopySeed
.9b4b		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b4d		10 1f		bpl $9b6e			bpl 	_URDontSeed
.9b4f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b51		49 17		eor #$17			eor 	#$17
.9b53		8d 08 04	sta $0408			sta 	RandomSeed+0
.9b56		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b58		49 a5		eor #$a5			eor 	#$A5
.9b5a		8d 09 04	sta $0409			sta 	RandomSeed+1
.9b5d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9b5f		49 c2		eor #$c2			eor 	#$C2
.9b61		8d 0a 04	sta $040a			sta 	RandomSeed+2
.9b64		b5 70		lda $70,x			lda 	NSMantissa3,x
.9b66		49 9d		eor #$9d			eor 	#$9D
.9b68		8d 0b 04	sta $040b			sta 	RandomSeed+3
.9b6b		20 94 9b	jsr $9b94			jsr 	Random32Bit
.9b6e						_URDontSeed:
.9b6e		20 94 9b	jsr $9b94			jsr 	Random32Bit 				; generate a number
.9b71						_URCopySeed:
.9b71		20 7d 9b	jsr $9b7d			jsr 	URCopyToMantissa 			; copy into mantissa
.9b74		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9b76		95 78		sta $78,x			sta 	NSExponent,x
.9b78		a9 08		lda #$08			lda 	#NSTFloat
.9b7a		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9b7c		60		rts				rts
.9b7d						URCopyToMantissa:
.9b7d		ad 08 04	lda $0408			lda 	RandomSeed+0
.9b80		95 58		sta $58,x			sta 	NSMantissa0,x
.9b82		ad 09 04	lda $0409			lda 	RandomSeed+1
.9b85		95 60		sta $60,x			sta 	NSMantissa1,x
.9b87		ad 0a 04	lda $040a			lda 	RandomSeed+2
.9b8a		95 68		sta $68,x			sta 	NSMantissa2,x
.9b8c		ad 0b 04	lda $040b			lda 	RandomSeed+3
.9b8f		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b91		95 70		sta $70,x			sta 	NSMantissa3,x
.9b93		60		rts				rts
.9b94						Random32Bit:
.9b94		5a		phy				phy
.9b95		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b97		ad 08 04	lda $0408			lda 	RandomSeed+0 				; check the seed isn't zero
.9b9a		d0 03		bne $9b9f			bne 	_Random1
.9b9c		a8		tay				tay 								; if so do it 256 times
.9b9d		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b9f						_Random1:
.9b9f		0a		asl a				asl 	a 							; LSFR RNG
.9ba0		2e 09 04	rol $0409			rol 	RandomSeed+1
.9ba3		2e 0a 04	rol $040a			rol 	RandomSeed+2
.9ba6		2e 0b 04	rol $040b			rol 	RandomSeed+3
.9ba9		90 02		bcc $9bad			bcc 	_Random2
.9bab		49 c5		eor #$c5			eor 	#$C5
.9bad						_Random2:
.9bad		88		dey				dey
.9bae		d0 ef		bne $9b9f			bne 	_Random1
.9bb0		8d 08 04	sta $0408			sta 	RandomSeed+0
.9bb3		7a		ply				ply
.9bb4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9bb5						SgnUnary:
.9bb5		fa		plx				plx 								; restore stack pos
.9bb6		20 86 9d	jsr $9d86			jsr 	EvaluateNumber 				; get a float or int
.9bb9		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9bbc		20 5a 9e	jsr $9e5a			jsr 	NSMIsZero 					; if zero
.9bbf		f0 0e		beq $9bcf			beq 	_SGZero  					; return Int Zero
.9bc1		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9bc3		48		pha				pha
.9bc4		a9 01		lda #$01			lda 	#1 							; set to 1
.9bc6		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.9bc9		68		pla				pla
.9bca		29 80		and #$80			and		#$80 						; copy the sign byte out
.9bcc		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9bce		60		rts				rts
.9bcf		20 38 9e	jsr $9e38	_SGZero:jsr 	NSMSetZero
.9bd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9bd3						ValUnary:
.9bd3		fa		plx				plx 								; restore stack pos
.9bd4		20 e9 9b	jsr $9be9			jsr 	ValMainCode 				; do the main val() code
.9bd7		b0 01		bcs $9bda			bcs 	_VUError 					; couldn't convert
.9bd9		60		rts				rts
.9bda						_VUError:
.9bda		4c c0 9f	jmp $9fc0			jmp 	TypeError
.9bdd						IsValUnary:
.9bdd		fa		plx				plx 								; restore stack pos
.9bde		20 e9 9b	jsr $9be9			jsr 	ValMainCode 				; do the main val() code
.9be1		b0 03		bcs $9be6			bcs 	_VUBad
.9be3		4c 7e 8f	jmp $8f7e			jmp 	ReturnTrue
.9be6						_VUBad:
.9be6		4c 89 8f	jmp $8f89			jmp 	ReturnFalse
.9be9						ValMainCode:
.9be9		20 90 9d	jsr $9d90			jsr 	EvaluateString 				; get a string
.9bec		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; check right bracket present
.9bef						ValEvaluateZTemp0:
.9bef		5a		phy				phy
.9bf0		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9bf2		f0 17		beq $9c0b			beq 	_VMCFail2
.9bf4		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9bf6		48		pha				pha 								; save first character
.9bf7		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9bf9		d0 01		bne $9bfc			bne 	_VMCStart
.9bfb		c8		iny				iny 								; skip over -
.9bfc						_VMCStart:
.9bfc		38		sec				sec 								; initialise first time round.
.9bfd						_VMCNext:
.9bfd		c8		iny				iny 								; pre-increment
.9bfe		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9c00		f0 0c		beq $9c0e			beq 	_VMCSuccess 				; successful.
.9c02		20 5b 97	jsr $975b			jsr 	EncodeNumber 				; send it to the number-builder
.9c05		90 03		bcc $9c0a			bcc 	_VMCFail 					; if failed, give up.
.9c07		18		clc				clc 								; next time round, countinue
.9c08		80 f3		bra $9bfd			bra 	_VMCNext
.9c0a						_VMCFail:
.9c0a		68		pla				pla
.9c0b						_VMCFail2:
.9c0b		7a		ply				ply
.9c0c		38		sec				sec
.9c0d		60		rts				rts
.9c0e						_VMCSuccess:
.9c0e		a9 00		lda #$00			lda 	#0 							; construct final
.9c10		20 5b 97	jsr $975b			jsr 	EncodeNumber 				; by sending a duff value.
.9c13		68		pla				pla 								; if it was -ve
.9c14		c9 2d		cmp #$2d			cmp 	#"-"
.9c16		d0 03		bne $9c1b			bne 	_VMCNotNegative
.9c18		20 fa 9d	jsr $9dfa			jsr		NSMNegate 					; negate it.
.9c1b						_VMCNotNegative:
.9c1b		7a		ply				ply
.9c1c		18		clc				clc
.9c1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c1e						ChrUnary:
.9c1e		fa		plx				plx 								; restore stack pos
.9c1f		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9c22		48		pha				pha
.9c23		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9c26		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c28		20 f8 af	jsr $aff8			jsr 	StringTempAllocate
.9c2b		68		pla				pla 								; write number to it
.9c2c		20 31 b0	jsr $b031			jsr 	StringTempWrite
.9c2f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c30						SpcUnary:
.9c30		fa		plx				plx 								; restore stack pos
.9c31		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger			; get value
.9c34		5a		phy				phy
.9c35		48		pha				pha 								; save count
.9c36		20 f8 af	jsr $aff8			jsr 	StringTempAllocate
.9c39		7a		ply				ply 								; to do count in Y
.9c3a						_SpcLoop:
.9c3a		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9c3c		f0 08		beq $9c46			beq 	_SpcExit
.9c3e		a9 20		lda #$20			lda 	#32
.9c40		20 31 b0	jsr $b031			jsr 	StringTempWrite
.9c43		88		dey				dey
.9c44		80 f4		bra $9c3a			bra 	_SPCLoop
.9c46						_SpcExit:
.9c46		7a		ply				ply
.9c47		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.9c4a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c4b						Unary_Str:
.9c4b		fa		plx				plx
.9c4c		20 86 9d	jsr $9d86			jsr 	EvaluateNumber  			; get number
.9c4f		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; closing bracket
.9c52		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c54		20 6d 9c	jsr $9c6d			jsr 	ConvertNumberToString 		; do the conversion.
.9c57		a9 21		lda #$21			lda		#33 						; create buffer
.9c59		20 f8 af	jsr $aff8			jsr 	StringTempAllocate 			; allocate memory
.9c5c		da		phx				phx  								; copy the converted string into the buffer.
.9c5d		a2 00		ldx #$00			ldx 	#0
.9c5f						_USCopy:
.9c5f		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9c62		20 31 b0	jsr $b031			jsr 	StringTempWrite
.9c65		e8		inx				inx
.9c66		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9c69		d0 f4		bne $9c5f			bne 	_USCopy
.9c6b		fa		plx				plx
.9c6c		60		rts				rts
.9c6d						ConvertNumberToString:
.9c6d		5a		phy				phy 								; save code position
.9c6e		8d 14 04	sta $0414			sta 	DecimalPlaces	 			; save number of DPs.
.9c71		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9c74		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9c76		10 09		bpl $9c81			bpl 	_CNTSNotNegative
.9c78		29 7f		and #$7f			and 	#$7F 						; make +ve
.9c7a		95 50		sta $50,x			sta 	NSStatus,x
.9c7c		a9 2d		lda #$2d			lda 	#"-"
.9c7e		20 e2 9c	jsr $9ce2			jsr 	WriteDecimalBuffer
.9c81						_CNTSNotNegative:
.9c81		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9c83		f0 12		beq $9c97			beq 	_CNTSNotFloat
.9c85		e8		inx				inx 								; round up so we don't get too many 6.999999
.9c86		a9 01		lda #$01			lda 	#1
.9c88		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.9c8b		ca		dex				dex
.9c8c		b5 78		lda $78,x			lda		NSExponent,x
.9c8e		95 79		sta $79,x			sta 	NSExponent+1,x
.9c90		a9 08		lda #$08			lda 	#NSTFloat
.9c92		95 51		sta $51,x			sta 	NSStatus+1,x
.9c94		20 60 94	jsr $9460			jsr 	FloatAdd
.9c97						_CNTSNotFloat:
.9c97		20 c4 9c	jsr $9cc4			jsr 	MakePlusTwoString 			; do the integer part.
.9c9a		20 26 95	jsr $9526			jsr 	FloatFractionalPart 		; get the fractional part
.9c9d		20 d7 95	jsr $95d7			jsr 	NSNormalise					; normalise , exit if zero
.9ca0		f0 20		beq $9cc2			beq 	_CNTSExit
.9ca2		a9 2e		lda #$2e			lda 	#"."
.9ca4		20 e2 9c	jsr $9ce2			jsr 	WriteDecimalBuffer 			; write decimal place
.9ca7						_CNTSDecimal:
.9ca7		ce 14 04	dec $0414			dec 	DecimalPlaces 				; done all the decimals
.9caa		30 16		bmi $9cc2			bmi 	_CNTSExit
.9cac		e8		inx				inx 								; x 10.0
.9cad		a9 0a		lda #$0a			lda 	#10
.9caf		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.9cb2		a9 08		lda #$08			lda 	#NSTFloat
.9cb4		95 50		sta $50,x			sta 	NSStatus,x
.9cb6		ca		dex				dex
.9cb7		20 a5 95	jsr $95a5			jsr 	FloatMultiply
.9cba		20 c4 9c	jsr $9cc4			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9cbd		20 26 95	jsr $9526			jsr 	FloatFractionalPart 		; get the fractional part
.9cc0		80 e5		bra $9ca7			bra 	_CNTSDecimal 				; keep going.
.9cc2						_CNTSExit:
.9cc2		7a		ply				ply
.9cc3		60		rts				rts
.9cc4						MakePlusTwoString:
.9cc4		da		phx				phx
.9cc5		20 1b 9e	jsr $9e1b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9cc8		e8		inx				inx 								; access it
.9cc9		e8		inx				inx
.9cca		20 7e 95	jsr $957e			jsr 	FloatIntegerPart 			; make it an integer
.9ccd		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9ccf		20 90 93	jsr $9390			jsr 	ConvertInt32
.9cd2		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9cd4						_MPTSCopy:
.9cd4		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9cd7		20 e2 9c	jsr $9ce2			jsr 	WriteDecimalBuffer
.9cda		e8		inx				inx
.9cdb		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9cde		d0 f4		bne $9cd4			bne 	_MPTSCopy
.9ce0		fa		plx				plx
.9ce1		60		rts				rts
.9ce2						WriteDecimalBuffer:
.9ce2		da		phx				phx
.9ce3		ae 15 04	ldx $0415			ldx 	dbOffset
.9ce6		9d 49 06	sta $0649,x			sta 	DecimalBuffer,x
.9ce9		9e 4a 06	stz $064a,x			stz 	DecimalBuffer+1,x
.9cec		ee 15 04	inc $0415			inc 	dbOffset
.9cef		fa		plx				plx
.9cf0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9cf1						Unary_Left:
.9cf1		fa		plx				plx
.9cf2		18		clc				clc 								; only one parameter
.9cf3		20 56 9d	jsr $9d56			jsr 	SubstringInitial 			; set up.
.9cf6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9cf8		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9cfa		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9cfc		80 25		bra $9d23			bra 	SubstringMain
.9cfe						Unary_Right:
.9cfe		fa		plx				plx
.9cff		18		clc				clc 								; only one parameter
.9d00		20 56 9d	jsr $9d56			jsr 	SubstringInitial 			; set up.
.9d03		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d05		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d07		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9d09		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d0b		b0 02		bcs $9d0f			bcs 	_URNotUnderflow
.9d0d		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d0f						_URNotUnderFlow:
.9d0f		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d11		80 10		bra $9d23			bra 	SubStringMain
.9d13						Unary_Mid:
.9d13		fa		plx				plx
.9d14		38		sec				sec 								; two parameters
.9d15		20 56 9d	jsr $9d56			jsr 	SubstringInitial 			; set up.
.9d18		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d1a		f0 04		beq $9d20			beq 	_UMError
.9d1c		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d1e		80 03		bra $9d23			bra 	SubStringMain
.9d20						_UMError:
.9d20		4c c5 9f	jmp $9fc5			jmp 	ArgumentError
.9d23						SubStringMain:
.9d23		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d25		d5 78		cmp $78,x			cmp 	NSExponent,x
.9d27		b0 27		bcs $9d50			bcs 	_SSMNull 					; if so, return an empty string.
.9d29		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d2b		f0 23		beq $9d50			beq 	_SSMNull 					; return empty string.
.9d2d		18		clc				clc 								; add the offset +1 to the address and
.9d2e		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9d30		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d32		85 36		sta $36				sta 	zTemp0
.9d34		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9d36		69 00		adc #$00			adc 	#0
.9d38		85 37		sta $37				sta 	zTemp0+1
.9d3a						_SSMNoCarry:
.9d3a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d3c		20 f8 af	jsr $aff8			jsr 	StringTempAllocate 			; allocate that many characters
.9d3f		5a		phy				phy 								; save Y
.9d40		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d42						_SSMCopy:
.9d42		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d44		f0 08		beq $9d4e			beq 	_SSMEString 				; no more to copy
.9d46		20 31 b0	jsr $b031			jsr 	StringTempWrite 			; and write it out.
.9d49		c8		iny				iny
.9d4a		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9d4c		d0 f4		bne $9d42			bne 	_SSMCopy
.9d4e						_SSMEString:
.9d4e		7a		ply				ply
.9d4f						_SSMExit:
.9d4f		60		rts				rts
.9d50						_SSMNull:
.9d50		a9 00		lda #$00			lda 	#0
.9d52		20 f8 af	jsr $aff8			jsr 	StringTempAllocate
.9d55		60		rts				rts
.9d56						SubstringInitial:
.9d56		da		phx				phx 								; save initial stack position
.9d57		08		php				php 								; save carry on stack indicating 2 parameters
.9d58		20 90 9d	jsr $9d90			jsr 	EvaluateString 				; get a string
.9d5b		5a		phy				phy 								; calculate length to exponent.
.9d5c		a0 ff		ldy #$ff			ldy 	#$FF
.9d5e						_SIFindLength:
.9d5e		c8		iny				iny
.9d5f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d61		d0 fb		bne $9d5e			bne 	_SIFindLength
.9d63		98		tya				tya
.9d64		95 78		sta $78,x			sta 	NSExponent,x
.9d66		7a		ply				ply
.9d67		e8		inx				inx
.9d68		20 00 8f	jsr $8f00			jsr 	CheckComma 					; comma next
.9d6b		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get next parameter
.9d6e		28		plp				plp 								; is it the last parameter ?
.9d6f		90 07		bcc $9d78			bcc 	_SSIExit 					; if so, exit.
.9d71		e8		inx				inx
.9d72		20 00 8f	jsr $8f00			jsr 	CheckComma 					; comma next
.9d75		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get last parameter
.9d78						_SSIExit:
.9d78		fa		plx				plx
.9d79		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket 			; check closing bracket
.9d7c		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d7d						EvaluateValue:
.9d7d		48		pha				pha
.9d7e		20 15 94	jsr $9415			jsr		EvaluateExpression 			; expression
.9d81		20 d8 96	jsr $96d8			jsr 	Dereference					; derefernce it
.9d84		68		pla				pla
.9d85		60		rts				rts
.9d86						EvaluateNumber:
.9d86		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue 				; get a value
.9d89		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9d8b		29 10		and #$10			and 	#NSBIsString
.9d8d		d0 13		bne $9da2			bne 	HelperTypeError
.9d8f		60		rts				rts
.9d90						EvaluateString:
.9d90		20 7d 9d	jsr $9d7d			jsr 	EvaluateValue 				; get a value
.9d93		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9d95		29 10		and #$10			and 	#NSBIsString
.9d97		f0 09		beq $9da2			beq 	HelperTypeError
.9d99						CopyAddressToTemp0:
.9d99		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d9b		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9d9d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d9f		85 37		sta $37				sta 	zTemp0+1
.9da1		60		rts				rts
.9da2						HelperTypeError:
.9da2		4c c0 9f	jmp $9fc0			jmp 	TypeError
.9da5						EvaluateInteger:
.9da5		20 86 9d	jsr $9d86			jsr 	EvaluateNumber
.9da8		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9daa		d0 09		bne $9db5			bne 	HelperValueError 			; if not, it's a float.
.9dac		60		rts				rts
.9dad						EvaluateUnsignedInteger:
.9dad		20 a5 9d	jsr $9da5			jsr 	EvaluateInteger 			; check integer is +ve
.9db0		b5 50		lda $50,x			lda 	NSStatus,x
.9db2		30 01		bmi $9db5			bmi 	HelperValueError
.9db4		60		rts				rts
.9db5						HelperValueError:
.9db5		4c c5 9f	jmp $9fc5			jmp 	ArgumentError
.9db8						Evaluate16BitInteger:
.9db8		20 ad 9d	jsr $9dad			jsr	 	EvaluateUnsignedInteger		; get integer
.9dbb		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9dbd		15 68		ora $68,x			ora 	NSMantissa2,x
.9dbf		d0 f4		bne $9db5			bne 	HelperValueError
.9dc1		60		rts				rts
.9dc2						Evaluate16BitIntegerSigned:
.9dc2		20 a5 9d	jsr $9da5			jsr	 	EvaluateInteger				; get integer
.9dc5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9dc7		15 68		ora $68,x			ora 	NSMantissa2,x
.9dc9		d0 ea		bne $9db5			bne 	HelperValueError
.9dcb		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9dcd		10 03		bpl $9dd2			bpl 	_EISNotSigned
.9dcf		20 01 9e	jsr $9e01			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9dd2						_EISNotSigned:
.9dd2		60		rts				rts
.9dd3						Evaluate8BitInteger:
.9dd3		20 ad 9d	jsr $9dad			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9dd6		d0 dd		bne $9db5			bne 	HelperValueError
.9dd8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9dda		15 68		ora $68,x			ora 	NSMantissa2,x
.9ddc		15 60		ora $60,x			ora 	NSMantissa1,x
.9dde		d0 d5		bne $9db5			bne 	HelperValueError
.9de0		b5 58		lda $58,x			lda 	NSMantissa0,x
.9de2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9de3						Multiply8x8:
.9de3		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9de4		85 36		sta $36			  	sta 	zTemp0
.9de6		86 37		stx $37				stx 	zTemp0+1
.9de8		a9 00		lda #$00			lda 	#0
.9dea		a2 08		ldx #$08			ldx 	#8
.9dec						_M88Loop:
.9dec		90 03		bcc $9df1			bcc 	_M88NoAdd
.9dee		18		clc				clc
.9def		65 37		adc $37				adc 	zTemp0+1
.9df1						_M88NoAdd:
.9df1		6a		ror a				ror 	a
.9df2		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9df4		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9df5		d0 f5		bne $9dec			bne 	_M88Loop
.9df7		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9df9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dfa						NSMNegate:
.9dfa		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9dfc		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9dfe		95 50		sta $50,x			sta 	NSStatus,x
.9e00		60		rts				rts
.9e01						NSMNegateMantissa:
.9e01		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9e02		a9 00		lda #$00			lda 	#0
.9e04		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9e06		95 58		sta $58,x			sta 	NSMantissa0,x
.9e08		a9 00		lda #$00			lda 	#0
.9e0a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e0c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e0e		a9 00		lda #$00			lda 	#0
.9e10		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e12		95 68		sta $68,x			sta 	NSMantissa2,x
.9e14		a9 00		lda #$00			lda 	#0
.9e16		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9e18		95 70		sta $70,x			sta 	NSMantissa3,x
.9e1a		60		rts				rts
.9e1b						NSMShiftUpTwo:
.9e1b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e1d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e1f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e21		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e23		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e25		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e27		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e29		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e2b		b5 78		lda $78,x			lda 	NSExponent,x
.9e2d		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9e2f		b5 50		lda $50,x			lda 	NSStatus,x
.9e31		95 52		sta $52,x			sta 	NSStatus+2,x
.9e33		60		rts				rts
.9e34						NSMSetZeroMantissaOnly:
.9e34		a9 00		lda #$00			lda 	#0
.9e36		80 06		bra $9e3e			bra 	NSMSetMantissa
.9e38						NSMSetZero:
.9e38		a9 00		lda #$00			lda 	#0
.9e3a						NSMSetByte:
.9e3a		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e3c		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9e3e						NSMSetMantissa:
.9e3e		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9e40		74 60		stz $60,x			stz 	NSMantissa1,x
.9e42		74 68		stz $68,x			stz 	NSMantissa2,x
.9e44		74 70		stz $70,x			stz 	NSMantissa3,x
.9e46		60		rts				rts
.9e47						NSMShiftLeft:
.9e47		18		clc				clc
.9e48						NSMRotateLeft:
.9e48		36 58		rol $58,x			rol 	NSMantissa0,x
.9e4a		36 60		rol $60,x			rol		NSMantissa1,x
.9e4c		36 68		rol $68,x			rol		NSMantissa2,x
.9e4e		36 70		rol $70,x			rol		NSMantissa3,x
.9e50		60		rts				rts
.9e51						NSMShiftRight:
.9e51		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9e53		76 68		ror $68,x			ror		NSMantissa2,x
.9e55		76 60		ror $60,x			ror		NSMantissa1,x
.9e57		76 58		ror $58,x			ror		NSMantissa0,x
.9e59		60		rts				rts
.9e5a						NSMIsZero:
.9e5a		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e5c		15 68		ora $68,x			ora		NSMantissa2,x
.9e5e		15 60		ora $60,x			ora		NSMantissa1,x
.9e60		15 58		ora $58,x			ora		NSMantissa0,x
.9e62		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9e63						TickHandler:
.9e63		5a		phy				phy 								; need to preserve Y
.9e64		20 53 80	jsr $8053			jsr 	SNDUpdate 					; update sound
.9e67		7a		ply				ply
.9e68		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e69						Assemble_ora:
.9e69		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e6c		01					.byte $01
.9e6d						Assemble_and:
.9e6d		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e70		21					.byte $21
.9e71						Assemble_eor:
.9e71		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e74		41					.byte $41
.9e75						Assemble_adc:
.9e75		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e78		61					.byte $61
.9e79						Assemble_sta:
.9e79		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e7c		81					.byte $81
.9e7d						Assemble_lda:
.9e7d		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e80		a1					.byte $a1
.9e81						Assemble_cmp:
.9e81		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e84		c1					.byte $c1
.9e85						Assemble_sbc:
.9e85		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9e88		e1					.byte $e1
.9e89						Assemble_asl:
.9e89		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9e8c		02					.byte $02
>9e8d		75					.byte $75
.9e8e						Assemble_rol:
.9e8e		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9e91		22					.byte $22
>9e92		75					.byte $75
.9e93						Assemble_lsr:
.9e93		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9e96		42					.byte $42
>9e97		75					.byte $75
.9e98						Assemble_ror:
.9e98		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9e9b		62					.byte $62
>9e9c		75					.byte $75
.9e9d						Assemble_stx:
.9e9d		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ea0		82					.byte $82
>9ea1		50					.byte $50
.9ea2						Assemble_ldx:
.9ea2		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ea5		a2					.byte $a2
>9ea6		d0					.byte $d0
.9ea7						Assemble_dec:
.9ea7		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eaa		c2					.byte $c2
>9eab		55					.byte $55
.9eac						Assemble_inc:
.9eac		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eaf		e2					.byte $e2
>9eb0		55					.byte $55
.9eb1						Assemble_stz:
.9eb1		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eb4		60					.byte $60
>9eb5		44					.byte $44
.9eb6						Assemble_bit:
.9eb6		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eb9		20					.byte $20
>9eba		55					.byte $55
.9ebb						Assemble_sty:
.9ebb		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ebe		80					.byte $80
>9ebf		54					.byte $54
.9ec0						Assemble_ldy:
.9ec0		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ec3		a0					.byte $a0
>9ec4		d5					.byte $d5
.9ec5						Assemble_cpy:
.9ec5		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ec8		c0					.byte $c0
>9ec9		d4					.byte $d4
.9eca						Assemble_cpx:
.9eca		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ecd		e0					.byte $e0
>9ece		d0					.byte $d0
.9ecf						Assemble_tsb:
.9ecf		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed2		00					.byte $00
>9ed3		50					.byte $50
.9ed4						Assemble_trb:
.9ed4		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed7		10					.byte $10
>9ed8		50					.byte $50
.9ed9						Assemble_jsr:
.9ed9		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9edc		14					.byte $14
>9edd		10					.byte $10
.9ede						Assemble_jmp:
.9ede		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ee1		40					.byte $40
>9ee2		10					.byte $10
.9ee3						Assemble_bpl:
.9ee3		20 11 81	jsr $8111		jsr	AssembleGroup3
>9ee6		10					.byte $10
.9ee7						Assemble_bmi:
.9ee7		20 11 81	jsr $8111		jsr	AssembleGroup3
>9eea		30					.byte $30
.9eeb						Assemble_bvc:
.9eeb		20 11 81	jsr $8111		jsr	AssembleGroup3
>9eee		50					.byte $50
.9eef						Assemble_bvs:
.9eef		20 11 81	jsr $8111		jsr	AssembleGroup3
>9ef2		70					.byte $70
.9ef3						Assemble_bcc:
.9ef3		20 11 81	jsr $8111		jsr	AssembleGroup3
>9ef6		90					.byte $90
.9ef7						Assemble_bcs:
.9ef7		20 11 81	jsr $8111		jsr	AssembleGroup3
>9efa		b0					.byte $b0
.9efb						Assemble_bne:
.9efb		20 11 81	jsr $8111		jsr	AssembleGroup3
>9efe		d0					.byte $d0
.9eff						Assemble_beq:
.9eff		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f02		f0					.byte $f0
.9f03						Assemble_bra:
.9f03		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f06		80					.byte $80
.9f07						Assemble_brk:
.9f07		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f0a		00					.byte $00
.9f0b						Assemble_php:
.9f0b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f0e		08					.byte $08
.9f0f						Assemble_clc:
.9f0f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f12		18					.byte $18
.9f13						Assemble_plp:
.9f13		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f16		28					.byte $28
.9f17						Assemble_sec:
.9f17		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f1a		38					.byte $38
.9f1b						Assemble_rti:
.9f1b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f1e		40					.byte $40
.9f1f						Assemble_pha:
.9f1f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f22		48					.byte $48
.9f23						Assemble_cli:
.9f23		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f26		58					.byte $58
.9f27						Assemble_phy:
.9f27		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f2a		5a					.byte $5a
.9f2b						Assemble_rts:
.9f2b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f2e		60					.byte $60
.9f2f						Assemble_pla:
.9f2f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f32		68					.byte $68
.9f33						Assemble_sei:
.9f33		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f36		78					.byte $78
.9f37						Assemble_ply:
.9f37		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f3a		7a					.byte $7a
.9f3b						Assemble_dey:
.9f3b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f3e		88					.byte $88
.9f3f						Assemble_txa:
.9f3f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f42		8a					.byte $8a
.9f43						Assemble_tya:
.9f43		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f46		98					.byte $98
.9f47						Assemble_txs:
.9f47		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f4a		9a					.byte $9a
.9f4b						Assemble_tay:
.9f4b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f4e		a8					.byte $a8
.9f4f						Assemble_tax:
.9f4f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f52		aa					.byte $aa
.9f53						Assemble_clv:
.9f53		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f56		b8					.byte $b8
.9f57						Assemble_tsx:
.9f57		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5a		ba					.byte $ba
.9f5b						Assemble_iny:
.9f5b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5e		c8					.byte $c8
.9f5f						Assemble_dex:
.9f5f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f62		ca					.byte $ca
.9f63						Assemble_cld:
.9f63		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f66		d8					.byte $d8
.9f67						Assemble_phx:
.9f67		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6a		da					.byte $da
.9f6b						Assemble_stp:
.9f6b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6e		db					.byte $db
.9f6f						Assemble_inx:
.9f6f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f72		e8					.byte $e8
.9f73						Assemble_nop:
.9f73		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f76		ea					.byte $ea
.9f77						Assemble_sed:
.9f77		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7a		f8					.byte $f8
.9f7b						Assemble_plx:
.9f7b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7e		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f7f						DecimalScalarTable:
>9f7f		66 66 66 66				.dword $66666666 ; 0.1
>9f83		de					.byte $de
>9f84		1f 85 eb 51				.dword $51eb851f ; 0.01
>9f88		db					.byte $db
>9f89		4c 37 89 41				.dword $4189374c ; 0.001
>9f8d		d8					.byte $d8
>9f8e		ac 8b db 68				.dword $68db8bac ; 0.0001
>9f92		d4					.byte $d4
>9f93		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f97		d1					.byte $d1
>9f98		83 de 1b 43				.dword $431bde83 ; 1e-06
>9f9c		ce					.byte $ce
>9f9d		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9fa1		ca					.byte $ca
>9fa2		89 3b e6 55				.dword $55e63b89 ; 1e-08
>9fa6		c7					.byte $c7
>9fa7		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9fab		c4					.byte $c4
>9fac		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9fb0		c0					.byte $c0
>9fb1		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9fb5		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9fb6						SyntaxError:
.9fb6		a9 02		lda #$02		lda	#2
.9fb8		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9fbb						RangeError:
.9fbb		a9 04		lda #$04		lda	#4
.9fbd		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9fc0						TypeError:
.9fc0		a9 05		lda #$05		lda	#5
.9fc2		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9fc5						ArgumentError:
.9fc5		a9 07		lda #$07		lda	#7
.9fc7		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9fca						NotDoneError:
.9fca		a9 0c		lda #$0c		lda	#12
.9fcc		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.9fcf						ErrorText:
>9fcf		42 72 65 61 6b 00			.text	"Break",0
>9fd5		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fdd		72 72 6f 72 00
>9fe2		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fea		20 62 79 20 7a 65 72 6f 00
>9ff3		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9ffb		61 6e 67 65 00
>a000		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a008		6d 61 74 63 68 00
>a00e		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a016		65 6d 6f 72 79 00
>a01c		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a024		61 72 67 75 6d 65 6e 74 00
>a02d		53 74 6f 70 00				.text	"Stop",0
>a032		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a03a		6f 6f 20 6c 6f 6e 67 00
>a042		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a04a		6e 20 66 61 69 6c 65 64 00
>a053		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a05b		61 74 61 00
>a05f		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a067		65 6e 74 65 64 00
>a06d		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a075		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a081		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a089		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a096		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a09e		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a0ab		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0b3		68 6f 75 74 20 57 68 69 6c 65 00
>a0be		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0c6		68 6f 75 74 20 46 6f 72 00
>a0cf		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0d7		61 63 6b 20 66 75 6c 6c 00
>a0e0		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0e8		75 63 74 75 72 65 00
>a0ef		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0f7		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a104		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a10c		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a11a		41 72 72 61 79 20 73 69			.text	"Array size",0
>a122		7a 65 00
>a125		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a12d		79 20 69 6e 64 65 78 00
>a135		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a13d		74 20 64 65 63 6c 61 72 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a148		41 6c 70 68 61 20 31 36			.text "Alpha 16 built 16-Dec-22. "
>a150		20 62 75 69 6c 74 20 31 36 2d 44 65 63 2d 32 32
>a160		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a162						RectangleCommand:
.a162		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a164		80 02		bra $a168			bra 	ShapeDrawCmd
.a166						CircleCommand:
.a166		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a168						ShapeDrawCmd:
.a168		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a16b						ShapeDraw:
.a16b		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a16e		4c e6 a1	jmp $a1e6			jmp 	ExecuteGraphicCommand	 	; and complete
.a171						SpriteCommand:
.a171		a2 00		ldx #$00			ldx 	#0
.a173		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get image number.
.a176		5a		phy				phy
.a177		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a179		a6 58		ldx $58				ldx 	NSMantissa0
.a17b		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a17d		b0 0d		bcs $a18c			bcs 	_SCRange
.a17f		a0 ff		ldy #$ff			ldy 	#255
.a181		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a184		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a186		7a		ply				ply
.a187		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a18a		80 5a		bra $a1e6			bra 	ExecuteGraphicCommand
.a18c						_SCRange:
.a18c		4c bb 9f	jmp $9fbb			jmp 	RangeError
.a18f						ImageCommand:
.a18f		a2 00		ldx #$00			ldx 	#0
.a191		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get image number.
.a194		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a197						ImageRunDraw:
.a197		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a199		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a19c		ad 64 06	lda $0664			lda 	gxDrawScale
.a19f		0a		asl a				asl 	a
.a1a0		0a		asl a				asl 	a
.a1a1		0a		asl a				asl 	a
.a1a2		a8		tay				tay
.a1a3		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a1a5		a6 58		ldx $58				ldx 	NSMantissa0
.a1a7		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1aa		60		rts				rts
.a1ab						TextCommand:
.a1ab		a2 00		ldx #$00			ldx 	#0
.a1ad		20 90 9d	jsr $9d90			jsr 	EvaluateString 				; get text
.a1b0		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a1b3						TextRunDraw:
.a1b3		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a1b5		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1b8		a0 00		ldy #$00			ldy 	#0
.a1ba						_IRDLoop:
.a1ba		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a1bc		85 37		sta $37				sta 	zTemp0+1
.a1be		a5 58		lda $58				lda 	NSMantissa0
.a1c0		85 36		sta $36				sta 	zTemp0
.a1c2		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1c4		f0 13		beq $a1d9			beq 	_IRDExit
.a1c6		5a		phy				phy									; save string pos
.a1c7		48		pha				pha 								; save char
.a1c8		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a1cb		0a		asl a				asl 	a
.a1cc		0a		asl a				asl 	a
.a1cd		0a		asl a				asl 	a
.a1ce		a8		tay				tay
.a1cf		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a1d1		fa		plx				plx 								; char to draw
.a1d2		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1d5		7a		ply				ply 								; restore string pos
.a1d6		c8		iny				iny
.a1d7		90 e1		bcc $a1ba			bcc 	_IRDLoop 					; go back if no error.
.a1d9						_IRDExit:
.a1d9		60		rts				rts
.a1da						PlotCommand:
.a1da		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a1dc		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a1df		80 05		bra $a1e6			bra 	ExecuteGraphicCommand
.a1e1						LineCommand:
.a1e1		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a1e3		20 f2 a1	jsr $a1f2			jsr 	RunGraphicsCommand
.a1e6						ExecuteGraphicCommand:
.a1e6		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a1e9		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; draw it and exit
.a1ec		b0 01		bcs $a1ef			bcs 	_EGCError
.a1ee		60		rts				rts
.a1ef						_EGCError:
.a1ef		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.a1f2						RunGraphicsCommand:
.a1f2		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a1f5		68		pla				pla 								; pop handler address
.a1f6		fa		plx				plx
.a1f7		1a		inc a				inc 	a
.a1f8		d0 01		bne $a1fb			bne 	_RGINoCarry
.a1fa		e8		inx				inx
.a1fb						_RGINoCarry:
.a1fb		8d 62 06	sta $0662			sta 	GXHandler
.a1fe		8e 63 06	stx $0663			stx 	GXHandler+1
.a201						_RGICommandLoop:
.a201		b1 30		lda ($30),y			lda 	(codePtr),y
.a203		c8		iny				iny
.a204		c9 d2		cmp #$d2			cmp 	#KWD_TO						; is it TO x,y
.a206		f0 53		beq $a25b			beq 	_RGI_To
.a208		c9 bd		cmp #$bd			cmp 	#KWD_HERE 					; do it here.
.a20a		f0 55		beq $a261			beq 	_RGI_Here
.a20c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a20e		f0 3d		beq $a24d			beq 	_RGI_Exit
.a210		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a212		f0 39		beq $a24d			beq 	_RGI_Exit
.a214		c9 c5		cmp #$c5			cmp 	#KWD_OUTLINE 				; solid or outline
.a216		f0 3e		beq $a256			beq 	_RGI_Frame
.a218		c9 ce		cmp #$ce			cmp 	#KWD_SOLID
.a21a		f0 33		beq $a24f			beq 	_RGI_Solid
.a21c		c9 ad		cmp #$ad			cmp 	#KWD_BY 					; by offset
.a21e		f0 4b		beq $a26b			beq 	_RGI_By
.a220		c9 b9		cmp #$b9			cmp 	#KWD_FROM 					; from
.a222		f0 17		beq $a23b			beq 	_RGI_Move2
.a224		c9 b5		cmp #$b5			cmp 	#KWD_DIM 					; dim (set scale)
.a226		f0 62		beq $a28a			beq 	_RGI_Dim
.a228		c9 b3		cmp #$b3			cmp 	#KWD_COLOUR 				; colour or Color
.a22a		f0 74		beq $a2a0			beq 	_RGI_Colour
.a22c		c9 b2		cmp #$b2			cmp 	#KWD_COLOR
.a22e		f0 70		beq $a2a0			beq 	_RGI_Colour
.a230		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a233		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a235		d0 03		bne $a23a			bne 	_RGI_Move 					; move
.a237		4c c8 a2	jmp $a2c8			jmp		_RGI_SpriteInstructions
.a23a						_RGI_Move:
.a23a		88		dey				dey 								; unpick get.
.a23b						_RGI_Move2:
.a23b		20 ee a2	jsr $a2ee			jsr 	GCGetCoordinatePair 		; move to here
.a23e		20 15 a3	jsr $a315			jsr 	GCCopyPairToStore 			; save
.a241		5a		phy				phy
.a242		20 0b a3	jsr $a30b			jsr 	GCLoadAXY 					; load in
.a245		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a247		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a24a		7a		ply				ply
.a24b		80 b4		bra $a201			bra 	_RGICommandLoop 			; and go round
.a24d						_RGI_Exit:
.a24d		88		dey				dey 								; unpick : / EOL
.a24e		60		rts				rts
.a24f						_RGI_Solid:
.a24f		a9 02		lda #$02			lda 	#2
.a251		8d 5e 06	sta $065e			sta 	gxFillSolid
.a254		80 ab		bra $a201			bra 	_RGICommandLoop
.a256						_RGI_Frame:
.a256		9c 5e 06	stz $065e			stz 	gxFillSolid
.a259		80 a6		bra $a201			bra 	_RGICommandLoop
.a25b						_RGI_To:
.a25b		20 ee a2	jsr $a2ee			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a25e		20 15 a3	jsr $a315			jsr 	GCCopyPairToStore
.a261						_RGI_Here:
.a261		5a		phy				phy
.a262		20 0b a3	jsr $a30b			jsr 	GCLoadAXY 					; load it into AXY
.a265		20 c5 a2	jsr $a2c5			jsr 	_RGICallHandler 			; go do whatever it is.
.a268		7a		ply				ply
.a269		80 96		bra $a201			bra 	_RGICommandLoop 			; and go round
.a26b						_RGI_By:
.a26b		20 fb a2	jsr $a2fb			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a26e		18		clc				clc
.a26f		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a271		6d 5f 06	adc $065f			adc 	gxxPos
.a274		8d 5f 06	sta $065f			sta 	gxXPos
.a277		a5 61		lda $61				lda 	NSMantissa1+1
.a279		6d 60 06	adc $0660			adc 	gxxPos+1
.a27c		8d 60 06	sta $0660			sta 	gxXPos+1
.a27f		a5 5a		lda $5a				lda 	NSMantissa0+2
.a281		18		clc				clc
.a282		6d 61 06	adc $0661			adc 	gxYPos
.a285		8d 61 06	sta $0661			sta 	gxYPos
.a288		80 d7		bra $a261			bra 	_RGI_Here
.a28a						_RGI_Dim:
.a28a		a2 01		ldx #$01			ldx	 	#1
.a28c		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger
.a28f		a5 59		lda $59				lda 	NSMantissa0+1
.a291		c9 00		cmp #$00			cmp 	#0
.a293		f0 2d		beq $a2c2			beq 	_RGIRange
.a295		c9 09		cmp #$09			cmp 	#8+1
.a297		b0 29		bcs $a2c2			bcs		_RGIRange
.a299		3a		dec a				dec 	a
.a29a		8d 64 06	sta $0664			sta 	gxDrawScale
.a29d		4c 01 a2	jmp $a201			jmp 	_RGICommandLoop
.a2a0						_RGI_Colour:
.a2a0		a2 01		ldx #$01			ldx 	#1 							; colour
.a2a2		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger
.a2a5		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a2a7		20 38 9e	jsr $9e38			jsr 	NSMSetZero
.a2aa		b1 30		lda ($30),y			lda 	(codePtr),y
.a2ac		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a2ae		d0 04		bne $a2b4			bne 	_RGICDefaultMode
.a2b0		c8		iny				iny
.a2b1		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger
.a2b4						_RGICDefaultMode:
.a2b4		5a		phy				phy
.a2b5		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a2b7		a6 59		ldx $59				ldx 	NSMantissa0+1
.a2b9		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a2bb		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a2be		7a		ply				ply
.a2bf		4c 01 a2	jmp $a201			jmp 	_RGICommandLoop 			; and go round
.a2c2						_RGIRange:
.a2c2		4c bb 9f	jmp $9fbb			jmp 	RangeError
.a2c5						_RGICallHandler:
.a2c5		6c 62 06	jmp ($0662)			jmp 	(GXHandler)
.a2c8						_RGI_SpriteInstructions:
.a2c8		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a2ca		f0 07		beq $a2d3			beq 	_RGISpriteOff
.a2cc		c9 be		cmp #$be			cmp 	#KWD_IMAGE
.a2ce		f0 13		beq $a2e3			beq 	_RGISetImage
.a2d0		4c 3a a2	jmp $a23a			jmp 	_RGI_Move
.a2d3						_RGISpriteOff:
.a2d3		5a		phy				phy
.a2d4		a0 01		ldy #$01			ldy 	#1
.a2d6		a2 00		ldx #$00			ldx 	#0
.a2d8						_RGIDoCommandLoop:
.a2d8		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a2da		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a2dd		7a		ply				ply
.a2de		b0 e2		bcs $a2c2			bcs 	_RGIRange
.a2e0		4c 01 a2	jmp $a201			jmp 	_RGICommandLoop
.a2e3						_RGISetImage:
.a2e3		a2 01		ldx #$01			ldx 	#1
.a2e5		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger
.a2e8		5a		phy				phy
.a2e9		aa		tax				tax
.a2ea		a0 00		ldy #$00			ldy 	#0
.a2ec		80 ea		bra $a2d8			bra 	_RGIDoCommandLoop
.a2ee						GCGetCoordinatePair:
.a2ee		a2 01		ldx #$01			ldx 	#1
.a2f0		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.a2f3		20 00 8f	jsr $8f00			jsr 	CheckComma
.a2f6		e8		inx				inx
.a2f7		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.a2fa		60		rts				rts
.a2fb						GCSignedCoordinatePair:
.a2fb		a2 01		ldx #$01			ldx 	#1
.a2fd		20 c2 9d	jsr $9dc2			jsr 	Evaluate16BitIntegerSigned
.a300		20 00 8f	jsr $8f00			jsr 	CheckComma
.a303		e8		inx				inx
.a304		20 c2 9d	jsr $9dc2			jsr 	Evaluate16BitIntegerSigned
.a307		60		rts				rts
.a308						_GCCPRange:
.a308		4c bb 9f	jmp $9fbb			jmp 	RangeError
.a30b						GCLoadAXY:
.a30b		ad 60 06	lda $0660			lda 	gxXPos+1
.a30e		ae 5f 06	ldx $065f			ldx 	gxXPos
.a311		ac 61 06	ldy $0661			ldy 	gxYPos
.a314		60		rts				rts
.a315						GCCopyPairToStore:
.a315		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a317		8d 5f 06	sta $065f			sta 	gxXPos
.a31a		a5 61		lda $61				lda 	NSMantissa1+1
.a31c		8d 60 06	sta $0660			sta 	gxXPos+1
.a31f		a5 5a		lda $5a				lda 	NSMantissa0+2
.a321		8d 61 06	sta $0661			sta 	gxYPos
.a324		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a325						BitmapCtrl:
.a325		b1 30		lda ($30),y			lda 	(codePtr),y
.a327		c8		iny				iny
.a328		a2 01		ldx #$01			ldx 	#1
.a32a		c9 c4		cmp #$c4			cmp 	#KWD_ON
.a32c		f0 11		beq $a33f			beq 	BitmapSwitch
.a32e		ca		dex				dex
.a32f		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a331		f0 0c		beq $a33f			beq 	BitmapSwitch
.a333		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get the colour
.a336		5a		phy				phy
.a337		aa		tax				tax
.a338		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a33a		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a33d		7a		ply				ply
.a33e		60		rts				rts
.a33f						BitmapSwitch:
.a33f		5a		phy				phy
.a340		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a342		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a344		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a347		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a349		a0 00		ldy #$00			ldy 	#0
.a34b		a2 ff		ldx #$ff			ldx 	#$FF
.a34d		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a350		9c 5e 06	stz $065e			stz 	gxFillSolid
.a353		9c 5f 06	stz $065f			stz 	gxXPos
.a356		9c 60 06	stz $0660			stz 	gxXPos+1
.a359		9c 61 06	stz $0661			stz 	gxYPos
.a35c		9c 64 06	stz $0664			stz 	gxDrawScale
.a35f		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a361		a2 00		ldx #$00			ldx 	#0
.a363		a0 00		ldy #$00			ldy 	#0
.a365		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a368		7a		ply				ply
.a369		60		rts				rts
.a36a						SpritesCtrl:
.a36a		b1 30		lda ($30),y			lda 	(codePtr),y
.a36c		c8		iny				iny
.a36d		a2 01		ldx #$01			ldx 	#1
.a36f		c9 c4		cmp #$c4			cmp 	#KWD_ON
.a371		f0 08		beq $a37b			beq 	SpriteSwitch
.a373		ca		dex				dex
.a374		c9 c3		cmp #$c3			cmp 	#KWD_OFF
.a376		f0 03		beq $a37b			beq 	SpriteSwitch
.a378		4c b6 9f	jmp $9fb6			jmp 	SyntaxError
.a37b						SpriteSwitch:
.a37b		5a		phy				phy
.a37c		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a37e		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a380		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a383		7a		ply				ply
.a384		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a385						GfxCommand:
.a385		a2 00		ldx #$00			ldx 	#0
.a387		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; command
.a38a		20 00 8f	jsr $8f00			jsr 	CheckComma
.a38d		e8		inx				inx
.a38e		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; X
.a391		20 00 8f	jsr $8f00			jsr 	CheckComma
.a394		e8		inx				inx
.a395		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; Y
.a398		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a39a		4a		lsr a				lsr 	a
.a39b		d0 12		bne $a3af			bne 	_GfxError
.a39d		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a39f		b0 0e		bcs $a3af			bcs 	_GfxError 					; bit 7 should have been zero
.a3a1		5a		phy				phy 								; save pos
.a3a2		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a3a4		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3a6		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3a8		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3ab		b0 02		bcs $a3af			bcs 	_GfxError
.a3ad		7a		ply				ply 								; restore pos and exit.
.a3ae		60		rts				rts
.a3af						_GfxError:
.a3af		4c bb 9f	jmp $9fbb			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a3b2						UnaryHit:
.a3b2		fa		plx				plx
.a3b3		a9 36		lda #$36			lda 	#zTemp0
.a3b5		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a3b8		20 00 8f	jsr $8f00			jsr 	CheckComma
.a3bb		e8		inx				inx
.a3bc		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a3bf		20 f8 8e	jsr $8ef8			jsr		CheckRightBracket
.a3c2		ca		dex				dex 								; fix back up again.
.a3c3		da		phx				phx 								; save X/Y
.a3c4		5a		phy				phy
.a3c5		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a3c7		b5 58		lda $58,x			lda 	NSMantissa0,x
.a3c9		aa		tax				tax
.a3ca		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a3cc		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; calculate result
.a3cf		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a3d0		7a		ply				ply 								; restore XY
.a3d1		fa		plx				plx
.a3d2		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte 					; return the hit result
.a3d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a3d6						PaletteCommand:
.a3d6		a2 00		ldx #$00			ldx 	#0
.a3d8		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; colour
.a3db		20 00 8f	jsr $8f00			jsr 	CheckComma
.a3de		e8		inx				inx
.a3df		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; r
.a3e2		20 00 8f	jsr $8f00			jsr 	CheckComma
.a3e5		e8		inx				inx
.a3e6		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; g
.a3e9		20 00 8f	jsr $8f00			jsr 	CheckComma
.a3ec		e8		inx				inx
.a3ed		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; b
.a3f0		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a3f2		85 36		sta $36				sta 	zTemp0
.a3f4		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a3f6		85 37		sta $37				sta 	zTemp0+1
.a3f8		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a3fa		26 37		rol $37				rol	 	zTemp0+1
.a3fc		06 36		asl $36				asl 	zTemp0
.a3fe		26 37		rol $37				rol	 	zTemp0+1
.a400		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a402		85 01		sta $01				sta 	1
.a404		5a		phy				phy
.a405		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a407		92 36		sta ($36)			sta 	(zTemp0)
.a409		a0 01		ldy #$01			ldy 	#1
.a40b		a5 5a		lda $5a				lda 	NSMantissa0+2
.a40d		91 36		sta ($36),y			sta 	(zTemp0),y
.a40f		a5 59		lda $59				lda 	NSMantissa0+1
.a411		c8		iny				iny
.a412		91 36		sta ($36),y			sta 	(zTemp0),y
.a414		7a		ply				ply
.a415		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a416						XLoadCommand:
.a416		20 43 8a	jsr $8a43			jsr 	NewProgram
.a419		20 28 83	jsr $8328			jsr 	BackLoadProgram
.a41c		4c e7 83	jmp $83e7			jmp 	WarmStart
.a41f						XGoCommand:
.a41f		20 43 8a	jsr $8a43			jsr 	NewProgram
.a422		20 28 83	jsr $8328			jsr 	BackLoadProgram
.a425		4c 84 8b	jmp $8b84			jmp 	CommandRun

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a428						UnaryEvent:
.a428		fa		plx				plx
.a429		20 c4 a4	jsr $a4c4			jsr 	TimerToStackX 				; timer in +0
.a42c		e8		inx				inx  								; put reference into +1
.a42d		20 5f 98	jsr $985f			jsr 	EvaluateTerm
.a430		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a432		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a434		d0 4c		bne $a482			bne 	_UEType
.a436		e8		inx				inx 								; put the step in +2
.a437		20 00 8f	jsr $8f00			jsr 	CheckComma
.a43a		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger
.a43d		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.a440		ca		dex				dex
.a441		ca		dex				dex
.a442		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a444		85 36		sta $36				sta 	zTemp0
.a446		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a448		85 37		sta $37				sta 	zTemp0+1
.a44a		5a		phy				phy
.a44b		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a44d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a44f		30 2d		bmi $a47e			bmi 	_UEFalse 					; exit if signed.
.a451		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a453		b5 58		lda $58,x			lda 	NSMantissa0,x
.a455		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a457		c8		iny				iny
.a458		b5 60		lda $60,x			lda 	NSMantissa1,x
.a45a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a45c		c8		iny				iny
.a45d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a45f		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a461		90 1b		bcc $a47e			bcc 	_UEFalse 					; no, return FALSE.
.a463		18		clc				clc
.a464		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a466		b5 58		lda $58,x			lda 	NSMantissa0,x
.a468		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a46a		91 36		sta ($36),y			sta 	(zTemp0),y
.a46c		c8		iny				iny
.a46d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a46f		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a471		91 36		sta ($36),y			sta 	(zTemp0),y
.a473		c8		iny				iny
.a474		b5 68		lda $68,x			lda 	NSMantissa2,x
.a476		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a478		91 36		sta ($36),y			sta 	(zTemp0),y
.a47a		7a		ply				ply
.a47b		4c 7e 8f	jmp $8f7e			jmp 	ReturnTrue
.a47e						_UEFalse:
.a47e		7a		ply				ply 								; restore Y
.a47f		4c 89 8f	jmp $8f89			jmp 	ReturnFalse 				; and return False
.a482						_UEType:
.a482		4c c0 9f	jmp $9fc0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a485						UnaryJoyX:
.a485		18		clc				clc
.a486		80 01		bra $a489			bra 	JoyMain
.a488						UnaryJoyY:
.a488		38		sec				sec
.a489						JoyMain:
.a489		fa		plx				plx 								; get pos
.a48a		08		php				php 								; save carry (set for Y)
.a48b		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a48e		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.a491		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a494		28		plp				plp
.a495		90 02		bcc $a499			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a497		4a		lsr a				lsr 	a
.a498		4a		lsr a				lsr 	a
.a499						_JMNoShift:
.a499		4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a49a		b0 0a		bcs $a4a6			bcs 	_JMIsRight
.a49c		4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a49d		b0 04		bcs $a4a3			bcs 	_JMIsLeft
.a49f		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; zero result
.a4a2		60		rts				rts
.a4a3						_JMIsLeft:
.a4a3		4c 7e 8f	jmp $8f7e			jmp 	ReturnTrue
.a4a6						_JMIsRight:
.a4a6		a9 01		lda #$01			lda 	#1
.a4a8		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.a4ab		60		rts				rts
.a4ac						UnaryJoyB:
.a4ac		fa		plx				plx 								; get pos
.a4ad		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4b0		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.a4b3		20 2b 80	jsr $802b			jsr 	EXTReadController 			; read the controller.
.a4b6		4a		lsr a				lsr 	a
.a4b7		4a		lsr a				lsr 	a
.a4b8		4a		lsr a				lsr 	a
.a4b9		4a		lsr a				lsr 	a
.a4ba		29 01		and #$01			and 	#1
.a4bc		20 3a 9e	jsr $9e3a			jsr 	NSMSetByte
.a4bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a4c0						UnaryTimer:
.a4c0		fa		plx				plx
.a4c1		20 f8 8e	jsr $8ef8			jsr 	CheckRightBracket
.a4c4						TimerToStackX:
.a4c4		20 38 9e	jsr $9e38			jsr 	NSMSetZero 					; zero result
.a4c7		64 01		stz $01				stz 	1 							; access I/O
.a4c9		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a4cc		95 58		sta $58,x			sta 	NSMantissa0,x
.a4ce		ad 5a d6	lda $d65a			lda 	$D65A
.a4d1		95 60		sta $60,x			sta 	NSMantissa1,x
.a4d3		ad 5b d6	lda $d65b			lda 	$D65B
.a4d6		95 68		sta $68,x			sta 	NSMantissa2,x
.a4d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a4d9						MemoryDeleteLine:
.a4d9		20 f8 a4	jsr $a4f8			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a4dc		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a4de		a8		tay				tay
.a4df						_MDDLLoop:
.a4df		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a4e1		92 30		sta ($30)			sta 	(codePtr)
.a4e3		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a4e5		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a4e7		d0 07		bne $a4f0			bne 	_MDLDLNext
.a4e9		a5 31		lda $31				lda 	codePtr+1
.a4eb		c5 3b		cmp $3b				cmp 	zTemp2+1
.a4ed		d0 01		bne $a4f0			bne 	_MDLDLNext
.a4ef						_MDDLExit:
.a4ef		60		rts				rts
.a4f0						_MDLDLNext:
.a4f0		e6 30		inc $30				inc 	codePtr						; next byte
.a4f2		d0 eb		bne $a4df			bne 	_MDDLLoop
.a4f4		e6 31		inc $31				inc 	codePtr+1
.a4f6		80 e7		bra $a4df			bra 	_MDDLLoop
.a4f8						IMemoryFindEnd:
.a4f8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a4fa		85 3a		sta $3a				sta 	0+zTemp2
.a4fc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a4fe		85 3b		sta $3b				sta 	1+zTemp2
.a500						_MDLFELoop:
.a500		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a502		f0 0b		beq $a50f			beq 	_MDLFEExit
.a504		18		clc				clc
.a505		65 3a		adc $3a				adc 	zTemp2
.a507		85 3a		sta $3a				sta 	zTemp2
.a509		90 f5		bcc $a500			bcc 	_MDLFELoop
.a50b		e6 3b		inc $3b				inc 	zTemp2+1
.a50d		80 f1		bra $a500			bra 	_MDLFELoop
.a50f						_MDLFEExit:
.a50f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a510						MemoryInsertLine:
.a510		08		php				php
.a511		20 f8 a4	jsr $a4f8			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a514		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a516		1a		inc a				inc 	a
.a517		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a519		b0 36		bcs $a551			bcs 	_MDLIError 					; no, fail.
.a51b		28		plp				plp 								; do at a specific point or the end ?
.a51c		90 08		bcc $a526			bcc 	_MDLIFound 					; if specific point already set.
.a51e		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a520		85 30		sta $30				sta 	codePtr 					; end.
.a522		a5 3b		lda $3b				lda 	zTemp2+1
.a524		85 31		sta $31				sta 	codePtr+1
.a526						_MDLIFound:
.a526		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a529		a8		tay				tay
.a52a						_MDLIInsert:
.a52a		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a52c		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a52e		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a530		c5 3a		cmp $3a				cmp 	zTemp2
.a532		d0 06		bne $a53a			bne 	_MDLINext
.a534		a5 31		lda $31				lda 	codePtr+1
.a536		c5 3b		cmp $3b				cmp 	zTemp2+1
.a538		f0 0a		beq $a544			beq 	_MDLIHaveSpace
.a53a						_MDLINext:
.a53a		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a53c		d0 02		bne $a540			bne 	_MDLINoBorrow
.a53e		c6 3b		dec $3b				dec 	zTemp2+1
.a540						_MDLINoBorrow:
.a540		c6 3a		dec $3a				dec 	zTemp2
.a542		80 e6		bra $a52a			bra 	_MDLIInsert
.a544						_MDLIHaveSpace:
.a544		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a547		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a548						_MDLICopy:
.a548		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a54b		91 30		sta ($30),y			sta 	(codePtr),y
.a54d		88		dey				dey
.a54e		10 f8		bpl $a548			bpl 	_MDLICopy
.a550		60		rts				rts
.a551						_MDLIError:
.a551		a9 06		lda #$06		lda	#6
.a553		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.a556						MDLAppendLine:
.a556		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a558		85 36		sta $36				sta 	zTemp0
.a55a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a55c		85 38		sta $38				sta 	0+zTemp1
.a55e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a560		85 39		sta $39				sta 	1+zTemp1
.a562		b2 38		lda ($38)			lda 	(zTemp1)
.a564		d0 0a		bne $a570			bne 	_MDLANoInitialise
.a566		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a568		8d 65 06	sta $0665			sta 	0+AppendPointer
.a56b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a56d		8d 66 06	sta $0666			sta 	1+AppendPointer
.a570						_MDLANoInitialise:
.a570		18		clc				clc
.a571		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a574		85 38		sta $38				sta 	zTemp1
.a576		72 36		adc ($36)			adc 	(zTemp0)
.a578		8d 65 06	sta $0665			sta 	AppendPointer
.a57b		ad 66 06	lda $0666			lda 	AppendPointer+1
.a57e		85 39		sta $39				sta 	zTemp1+1
.a580		69 00		adc #$00			adc 	#0
.a582		8d 66 06	sta $0666			sta 	AppendPointer+1
.a585		a0 00		ldy #$00			ldy 	#0
.a587						_MDLACopy:
.a587		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a589		91 38		sta ($38),y			sta 	(zTemp1),y
.a58b		c8		iny				iny
.a58c		98		tya				tya
.a58d		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a58f		d0 f6		bne $a587			bne 	_MDLACopy
.a591		a9 00		lda #$00			lda 	#0 							; end of program.
.a593		91 38		sta ($38),y			sta 	(zTemp1),y
.a595		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a596						MemoryNew:
.a596		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a598		85 30		sta $30				sta 	codePtr
.a59a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a59c		85 31		sta $31				sta 	codePtr+1
.a59e		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a5a0		92 30		sta ($30)			sta 	(codePtr)
.a5a2		60		rts				rts
.a5a3						MemoryInline:
.a5a3		98		tya				tya 								; put address into stack,x
.a5a4		18		clc				clc  								; get the offset, add codePtr
.a5a5		65 30		adc $30				adc 	codePtr
.a5a7		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a5a9		a5 31		lda $31				lda 	codePtr+1
.a5ab		69 00		adc #$00			adc 	#0
.a5ad		95 60		sta $60,x			sta 	NSMantissa1,x
.a5af		74 68		stz $68,x			stz 	NSMantissa2,x
.a5b1		74 70		stz $70,x			stz 	NSMantissa3,x
.a5b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a5b4						MemorySearch:
.a5b4		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a5b6		86 37		stx $37				stx 	zTemp0+1
.a5b8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5ba		85 30		sta $30				sta 	codePtr
.a5bc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5be		85 31		sta $31				sta 	codePtr+1
.a5c0						_MTAXLoop:
.a5c0		b2 30		lda ($30)			lda 	(codePtr)
.a5c2		18		clc				clc
.a5c3		f0 21		beq $a5e6			beq 	_MTAXExit 					; reached end, exit with CC.
.a5c5		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a5c7		b1 30		lda ($30),y			lda 	(codePtr),y
.a5c9		38		sec				sec
.a5ca		e5 36		sbc $36				sbc 	zTemp0
.a5cc		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a5ce		c8		iny				iny 								; do the MSB
.a5cf		b1 30		lda ($30),y			lda 	(codePtr),y
.a5d1		e5 37		sbc $37				sbc 	zTemp0+1
.a5d3		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a5d5		f0 0f		beq $a5e6			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a5d7		b0 0d		bcs $a5e6			bcs 	_MTAXExit 					; current < required exit
.a5d9		18		clc				clc
.a5da		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a5dc		65 30		adc $30				adc 	codePtr
.a5de		85 30		sta $30				sta 	codePtr
.a5e0		90 02		bcc $a5e4			bcc 	_CREExit
.a5e2		e6 31		inc $31				inc 	codePtr+1 					; carry
.a5e4						_CREExit:
.a5e4		80 da		bra $a5c0			bra 	_MTAXLoop
.a5e6						_MTAXExit:
.a5e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a5e7						UpdateFont:
.a5e7		a5 01		lda $01				lda 	1 							; save position
.a5e9		48		pha				pha
.a5ea		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a5ec		85 01		sta $01				sta 	1
.a5ee		a9 15		lda #$15			lda 	#((FontBinary) & $FF)
.a5f0		85 36		sta $36				sta 	0+zTemp0
.a5f2		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a5f4		85 37		sta $37				sta 	1+zTemp0
.a5f6		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a5f8		85 38		sta $38				sta 	0+zTemp1
.a5fa		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a5fc		85 39		sta $39				sta 	1+zTemp1
.a5fe						_UFCopy1:
.a5fe		a0 00		ldy #$00			ldy 	#0
.a600						_UFCopy2:
.a600		b1 36		lda ($36),y			lda 	(zTemp0),y
.a602		91 38		sta ($38),y			sta 	(zTemp1),y
.a604		c8		iny				iny
.a605		d0 f9		bne $a600			bne 	_UFCopy2
.a607		e6 37		inc $37				inc 	zTemp0+1
.a609		e6 39		inc $39				inc 	zTemp1+1
.a60b		a5 39		lda $39				lda 	zTemp1+1
.a60d		c9 c8		cmp #$c8			cmp 	#$C8
.a60f		d0 ed		bne $a5fe			bne 	_UFCopy1
.a611		68		pla				pla 								; restore.
.a612		85 01		sta $01				sta 	1
.a614		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a615						FontBinary:
>a615		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a61d		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a62d		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a63d		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a64d		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a65d		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a66d		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a67d		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a68d		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a69d		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a6ad		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a6bd		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a6cd		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a6dd		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a6ed		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a6fd		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a70d		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a71d		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a72d		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a73d		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a74d		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a75d		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a76d		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a77d		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a78d		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a79d		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a7ad		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a7bd		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a7cd		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a7dd		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a7ed		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a7fd		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a80d		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a81d		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a82d		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a83d		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a84d		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a85d		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a86d		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a87d		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a88d		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a89d		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a8ad		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a8bd		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a8cd		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a8dd		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a8ed		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a8fd		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a90d		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a91d		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>a92d		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>a93d		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>a94d		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>a95d		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>a96d		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a97d		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>a98d		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>a99d		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>a9ad		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>a9bd		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>a9cd		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>a9dd		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>a9ed		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>a9fd		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aa0d		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aa1d		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aa2d		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aa3d		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aa4d		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>aa5d		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aa6d		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>aa7d		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>aa8d		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>aa9d		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>aaad		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>aabd		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>aacd		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>aadd		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>aaed		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>aafd		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ab0d		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ab1d		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ab2d		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ab3d		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ab4d		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ab5d		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ab6d		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ab7d		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ab8d		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ab9d		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>abad		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>abbd		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>abcd		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>abdd		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>abed		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>abfd		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ac0d		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ac1d		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ac2d		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ac3d		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ac4d		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ac5d		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ac6d		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ac7d		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ac8d		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ac9d		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>acad		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>acbd		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>accd		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>acdd		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>aced		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>acfd		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ad0d		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ad1d		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ad2d		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ad3d		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ad4d		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ad5d		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>ad6d		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>ad7d		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>ad8d		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>ad9d		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>adad		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>adbd		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>adcd		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>addd		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>aded		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>adfd		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>ae0d		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.ae15						PingCommand:
.ae15		5a		phy				phy 								; save pos
.ae16		a9 01		lda #$01			lda 	#1 						; push channel.
.ae18		48		pha				pha
.ae19		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.ae1b		a2 03		ldx #$03			ldx 	#3 						; length
.ae1d		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae1f		80 24		bra $ae45			bra 	SoundEffectCommand
.ae21						ZapCommand:
.ae21		5a		phy				phy 								; save pos
.ae22		a9 01		lda #$01			lda 	#1 						; push channel.
.ae24		48		pha				pha
.ae25		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.ae27		a2 05		ldx #$05			ldx 	#5 						; length
.ae29		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.ae2b		80 18		bra $ae45			bra 	SoundEffectCommand
.ae2d						ShootCommand:
.ae2d		5a		phy				phy 								; save pos
.ae2e		a9 03		lda #$03			lda 	#3 						; push channel.
.ae30		48		pha				pha
.ae31		a9 20		lda #$20			lda 	#32 						; pitch LSB
.ae33		a2 02		ldx #$02			ldx 	#2 						; length
.ae35		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae37		80 0c		bra $ae45			bra 	SoundEffectCommand
.ae39						Explode:
.ae39		5a		phy				phy 								; save pos
.ae3a		a9 03		lda #$03			lda 	#3 						; push channel.
.ae3c		48		pha				pha
.ae3d		a9 50		lda #$50			lda 	#80 						; pitch LSB
.ae3f		a2 05		ldx #$05			ldx 	#5 						; length
.ae41		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae43		80 00		bra $ae45			bra 	SoundEffectCommand
.ae45						SoundEffectCommand:
.ae45		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.ae48		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.ae4b		a9 0f		lda #$0f			lda 	#15
.ae4d		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.ae50		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.ae53		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.ae56		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.ae59		68		pla				pla
.ae5a		09 10		ora #$10			ora 	#$10  						; execute command $11
.ae5c		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.ae5e		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.ae60		20 49 80	jsr $8049			jsr 	SNDCommand
.ae63		7a		ply				ply
.ae64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.ae65						UnaryPlaying:
.ae65		fa		plx				plx
.ae66		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; get channel #
.ae69		48		pha				pha
.ae6a		20 f8 8e	jsr $8ef8			jsr		CheckRightBracket
.ae6d		68		pla				pla
.ae6e		c9 04		cmp #$04			cmp 	#4
.ae70		b0 0c		bcs $ae7e			bcs 	_UPNotPlaying
.ae72		09 20		ora #$20			ora 	#$20 						; query playing ?
.ae74		20 49 80	jsr $8049			jsr 	SNDCommand
.ae77		c9 00		cmp #$00			cmp 	#0
.ae79		f0 03		beq $ae7e			beq 	_UPNotPlaying
.ae7b		4c 7e 8f	jmp $8f7e			jmp 	ReturnTrue
.ae7e						_UPNotPlaying:
.ae7e		4c 89 8f	jmp $8f89			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.ae81						SoundCommand:
.ae81		b1 30		lda ($30),y			lda 	(codePtr),y
.ae83		c9 c3		cmp #$c3			cmp 	#KWD_OFF 					; SOUND OFF ?
.ae85		d0 09		bne $ae90			bne 	_SNDMain
.ae87		c8		iny				iny 								; skip OFF
.ae88		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.ae8a		5a		phy				phy
.ae8b		20 49 80	jsr $8049			jsr 	SNDCommand
.ae8e		7a		ply				ply
.ae8f		60		rts				rts
.ae90						_SNDMain:
.ae90		a2 00		ldx #$00			ldx 	#0
.ae92		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; channel
.ae95		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.ae97		b0 4b		bcs $aee4			bcs 	_SndError
.ae99		e8		inx				inx 								; do the rest in slot 1.
.ae9a		20 00 8f	jsr $8f00			jsr 	CheckComma
.ae9d		20 b8 9d	jsr $9db8			jsr 	Evaluate16BitInteger 		; Pitch
.aea0		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.aea2		c9 10		cmp #$10			cmp 	#16
.aea4		b0 3e		bcs $aee4			bcs 	_SndError
.aea6		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.aea9		b5 58		lda $58,x			lda 	NSMantissa0,x
.aeab		8d 67 06	sta $0667			sta 	SoundCommandBlock
.aeae		20 00 8f	jsr $8f00			jsr 	CheckComma
.aeb1		20 d3 9d	jsr $9dd3			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.aeb4		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.aeb7		a9 0f		lda #$0f			lda 	#15
.aeb9		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.aebc		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.aebf		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.aec2		b1 30		lda ($30),y			lda 	(codePtr),y
.aec4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.aec6		d0 0e		bne $aed6			bne 	_SNDPlay
.aec8		c8		iny				iny
.aec9		20 c2 9d	jsr $9dc2			jsr 	Evaluate16BitIntegerSigned 	; Slide
.aecc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.aece		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.aed1		b5 60		lda $60,x			lda 	NSMantissa1,x
.aed3		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.aed6						_SNDPlay:
.aed6		5a		phy				phy
.aed7		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.aed9		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.aedb		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.aedd		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.aedf		20 49 80	jsr $8049			jsr 	SNDCommand
.aee2		7a		ply				ply
.aee3		60		rts				rts
.aee4						_SndError:
.aee4		4c bb 9f	jmp $9fbb			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.aee7						StackPushByte:
.aee7		48		pha				pha 								; save byte on stack
.aee8		a5 34		lda $34				lda 	BasicStack 					; decrement basic stack pointer
.aeea		d0 08		bne $aef4			bne 	_SPBNoBorrow
.aeec		c6 35		dec $35				dec 	BasicStack+1 				; borrow
.aeee		a5 35		lda $35				lda 	BasicStack+1 				; check range.
.aef0		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.aef2		90 06		bcc $aefa			bcc 	_SPBMemory
.aef4						_SPBNoBorrow:
.aef4		c6 34		dec $34				dec 	BasicStack
.aef6		68		pla				pla 								; get back and write
.aef7		92 34		sta ($34)			sta 	(BasicStack)
.aef9		60		rts				rts
.aefa						_SPBMemory:
.aefa		a9 12		lda #$12		lda	#18
.aefc		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.aeff						StackPopByte:
.aeff		b2 34		lda ($34)			lda 	(BasicStack) 				; bump the stack pointer.
.af01		e6 34		inc $34				inc 	BasicStack
.af03		d0 02		bne $af07			bne 	_SPBNoCarry
.af05		e6 35		inc $35				inc 	BasicStack+1
.af07						_SPBNoCarry:
.af07		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.af08						StackOpen:
.af08		48		pha				pha 								; save frame byte
.af09		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.af0b		0a		asl a				asl 	a 							; claim twice this for storage
.af0c		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.af0e		38		sec				sec 								; so basically subtracting from
.af0f		65 34		adc $34				adc 	basicStack 	 				; basicStack
.af11		85 34		sta $34				sta 	basicStack
.af13		b0 09		bcs $af1e			bcs 	_SONoBorrow
>af15		db						.byte 	$DB 						; causes a break in the emulator
.af16		c6 35		dec $35				dec 	basicStack+1
.af18		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.af1a		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af1c		90 04		bcc $af22			bcc 	_SOMemory
.af1e						_SONoBorrow:
.af1e		68		pla				pla 								; get marker back and write at TOS
.af1f		92 34		sta ($34)			sta 	(basicStack)
.af21		60		rts				rts
.af22						_SOMemory:
.af22		a9 12		lda #$12		lda	#18
.af24		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.af27						StackClose:
.af27		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.af29		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.af2b		0a		asl a				asl 	a 							; claim twice this.
.af2c		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.af2e		85 34		sta $34				sta 	basicStack
.af30		90 02		bcc $af34			bcc 	_SCExit
.af32		e6 35		inc $35				inc 	basicStack+1
.af34						_SCExit:
.af34		60		rts				rts
.af35						StackCheckFrame:
.af35		48		pha				pha
.af36						_StackRemoveLocals:
.af36		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.af38		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.af3a		b0 05		bcs $af41			bcs 	_SCNoLocal
.af3c		20 f2 89	jsr $89f2			jsr 	LocalPopValue 				; restore the local value
.af3f		80 f5		bra $af36			bra 	_StackRemoveLocals 			; gr round again
.af41						_SCNoLocal:
.af41		68		pla				pla 								; get the frame check.
.af42		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.af44		29 f0		and #$f0			and 	#$F0 						; check type bits
.af46		d0 01		bne $af49			bne 	_SCFError 					; different, we have structures mixed up
.af48		60		rts				rts
.af49						_SCFError:
.af49		8a		txa				txa 								; report error X
.af4a		4c 11 8f	jmp $8f11			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.af4d						STKSaveCodePosition:
.af4d		5a		phy				phy
.af4e		98		tya				tya 								; save Y
.af4f		a0 05		ldy #$05			ldy 	#5
.af51		91 34		sta ($34),y			sta 	(basicStack),y
.af53		88		dey				dey 								; save Code Pointer
.af54						_STKSaveLoop:
.af54		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.af57		91 34		sta ($34),y			sta 	(basicStack),y
.af59		88		dey				dey
.af5a		d0 f8		bne $af54			bne 	_STKSaveLoop
.af5c		7a		ply				ply
.af5d		60		rts				rts
.af5e						STKLoadCodePosition:
.af5e		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.af60						_STKLoadLoop:
.af60		b1 34		lda ($34),y			lda 	(basicStack),y
.af62		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.af65		c8		iny				iny
.af66		c0 05		cpy #$05			cpy 	#5
.af68		d0 f6		bne $af60			bne 	_STKLoadLoop
.af6a		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.af6c		a8		tay				tay
.af6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.af6e						StackReset:
.af6e		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.af70		85 34		sta $34				sta 	0+basicStack
.af72		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.af74		85 35		sta $35				sta 	1+basicStack
.af76		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.af78		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.af7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.af7b						StringConcrete:
.af7b		5a		phy				phy 								; save position on stack
.af7c		20 4b 9a	jsr $9a4b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.af7f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.af81		85 38		sta $38				sta 	zTemp1
.af83		b5 60		lda $60,x			lda 	NSMantissa1,x
.af85		85 39		sta $39				sta 	zTemp1+1
.af87		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.af89						_SALength:
.af89		c8		iny				iny
.af8a		b1 38		lda ($38),y			lda 	(zTemp1),y
.af8c		d0 fb		bne $af89			bne 	_SALength
.af8e		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.af90		b0 3d		bcs $afcf			bcs 	_SALengthError
.af92		98		tya				tya 				 				; length of the new string
.af93		18		clc				clc
.af94		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.af96		90 02		bcc $af9a			bcc 	_SAHaveLength
.af98		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.af9a						_SAHaveLength:
.af9a		48		pha				pha 								; save length.
.af9b		38		sec				sec
.af9c		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.af9e		6d 0e 04	adc $040e			adc 	StringMemory
.afa1		8d 0e 04	sta $040e			sta 	StringMemory
.afa4		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.afa6		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.afa8		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.afaa		6d 0f 04	adc $040f			adc 	StringMemory+1
.afad		8d 0f 04	sta $040f			sta 	StringMemory+1
.afb0		85 3b		sta $3b				sta 	zTemp2+1
.afb2		95 60		sta $60,x			sta 	NSMantissa1,x
.afb4		68		pla				pla 								; save length-3 (chars allowed) in first byte
.afb5		38		sec				sec
.afb6		e9 03		sbc #$03			sbc 	#3
.afb8		92 3a		sta ($3a)			sta 	(zTemp2)
.afba		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.afbc		a0 01		ldy #$01			ldy 	#1
.afbe		91 3a		sta ($3a),y			sta 	(zTemp2),y
.afc0						_SACopyNewString:
.afc0		a0 00		ldy #$00			ldy 	#0
.afc2						_SACopyNSLoop:
.afc2		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.afc4		c8		iny				iny 								; write two on in string storage
.afc5		c8		iny				iny
.afc6		91 3a		sta ($3a),y			sta 	(zTemp2),y
.afc8		88		dey				dey 								; this makes it one one.
.afc9		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.afcb		d0 f5		bne $afc2			bne 	_SACopyNSLoop
.afcd		7a		ply				ply
.afce		60		rts				rts
.afcf						_SALengthError:
.afcf		a9 09		lda #$09		lda	#9
.afd1		4c 11 8f	jmp $8f11		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.afd4						StringSystemInitialise:
.afd4		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.afd6		8d 0e 04	sta $040e			sta 	0+StringMemory
.afd9		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.afdb		8d 0f 04	sta $040f			sta 	1+StringMemory
.afde		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.afe1		60		rts				rts
.afe2						StringSpaceInitialise:
.afe2		20 4b 9a	jsr $9a4b			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afe5		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.afe7		8d 10 04	sta $0410			sta 	StringInitialised
.afea		ad 0e 04	lda $040e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.afed		8d 11 04	sta $0411			sta 	StringTempPointer 			; so temporary string space is allocated below that.
.aff0		ad 0f 04	lda $040f			lda 	StringMemory+1
.aff3		3a		dec a				dec 	a
.aff4		8d 12 04	sta $0412			sta 	StringTempPointer+1
.aff7		60		rts				rts
.aff8						StringTempAllocate:
.aff8		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.affa		b0 30		bcs $b02c			bcs 	_STALength
.affc		2c 10 04	bit $0410			bit 	StringInitialised 			; already initialised
.afff		30 05		bmi $b006			bmi 	_STAAllocate
.b001		48		pha				pha 								; save value to subtract.
.b002		20 e2 af	jsr $afe2			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b005		68		pla				pla 								; restore it
.b006						_STAAllocate:
.b006		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b008		18		clc				clc  								; deliberate allows one more
.b009		6d 11 04	adc $0411			adc 	StringTempPointer 			; subtract from temp pointer
.b00c		8d 11 04	sta $0411			sta 	StringTempPointer
.b00f		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b011		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b013		ad 12 04	lda $0412			lda 	StringTempPointer+1
.b016		69 ff		adc #$ff			adc 	#$FF
.b018		8d 12 04	sta $0412			sta 	StringTempPointer+1
.b01b		85 3d		sta $3d				sta 	zsTemp+1
.b01d		95 60		sta $60,x			sta 	NSMantissa1,x
.b01f		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b021		74 70		stz $70,x			stz 	NSMantissa3,x
.b023		a9 10		lda #$10			lda 	#NSTString
.b025		95 50		sta $50,x			sta 	NSStatus,x
.b027		a9 00		lda #$00			lda 	#0 							; clear the target string
.b029		92 3c		sta ($3c)			sta 	(zsTemp)
.b02b		60		rts				rts
.b02c						_STALength:
.b02c		a9 09		lda #$09		lda	#9
.b02e		4c 11 8f	jmp $8f11		jmp	ErrorHandler
.b031						StringTempWrite:
.b031		48		pha				pha
.b032		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b034		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b036		d0 02		bne $b03a			bne 	_STWNoCarry
.b038		e6 3d		inc $3d				inc 	zsTemp+1
.b03a						_STWNoCarry:
.b03a		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b03c		92 3c		sta ($3c)			sta 	(zsTemp)
.b03e		68		pla				pla
.b03f		60		rts				rts

;******  Return to file: _basic.asm

.b040						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=10						CLIConstant = CONLightBlue
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 90 a1	jsr $a190			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 4d a1	jsr $a14d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackspace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 54 a2	jsr $a254			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					EXTClearScreenCode:
.c14d	a14d	a9 02		lda #$02			lda 	#2 							; select text page
.c14f	a14f	85 01		sta $01				sta 	1
.c151	a151	a9 20		lda #$20			lda		#32 						; fill with space
.c153	a153	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c156	a156	e6 01		inc $01				inc 	1 							; select colour page
.c158	a158	ad 6f 06	lda $066f			lda 	EXTTextColour
.c15b	a15b	20 60 a1	jsr $a160			jsr 	_EXTCSFill
.c15e	a15e	80 22		bra $a182			bra 	EXTHomeCursor
.c160	a160					_EXTCSFill:
.c160	a160	aa		tax				tax
.c161	a161	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c163	a163	85 40		sta $40				sta 	EXTAddress
.c165	a165	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c167	a167	85 41		sta $41				sta 	EXTAddress+1
.c169	a169					_EXTCSFill1:
.c169	a169	a0 00		ldy #$00			ldy 	#0
.c16b	a16b	8a		txa				txa
.c16c	a16c					_EXTCSFill2:
.c16c	a16c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c16e	a16e	c8		iny				iny
.c16f	a16f	d0 fb		bne $a16c			bne 	_EXTCSFill2
.c171	a171	e6 41		inc $41				inc 	EXTAddress+1
.c173	a173	a5 41		lda $41				lda 	EXTAddress+1
.c175	a175	c9 d2		cmp #$d2			cmp 	#$D2
.c177	a177	d0 f0		bne $a169			bne 	_EXTCSFill1
.c179	a179	8a		txa				txa
.c17a	a17a					_EXTCSFill3:
.c17a	a17a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c17c	a17c	c8		iny				iny
.c17d	a17d	c0 c0		cpy #$c0			cpy 	#$C0
.c17f	a17f	d0 f9		bne $a17a			bne 	_EXTCSFill3
.c181	a181	60		rts				rts
.c182	a182					EXTHomeCursor:
.c182	a182	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c185	a185	9c 6e 06	stz $066e			stz 	EXTColumn
.c188	a188	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c18a	a18a	85 40		sta $40				sta 	EXTAddress
.c18c	a18c	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c18e	a18e	85 41		sta $41				sta 	EXTAddress+1
.c190	a190					EXTSetHardwareCursor:
.c190	a190	64 01		stz $01				stz 	1 							; I/O Page zero
.c192	a192	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c194	a194	8d 10 d0	sta $d010			sta 	$D010
.c197	a197	a9 b3		lda #$b3			lda 	#179
.c199	a199	8d 12 d0	sta $d012			sta 	$D012
.c19c	a19c	ad 6e 06	lda $066e			lda 	EXTColumn
.c19f	a19f	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1a2	a1a2	9c 15 d0	stz $d015			stz 	$D015
.c1a5	a1a5	ad 6d 06	lda $066d			lda 	EXTRow
.c1a8	a1a8	8d 16 d0	sta $d016			sta 	$D016
.c1ab	a1ab	9c 17 d0	stz $d017			stz 	$D017
.c1ae	a1ae	60		rts				rts
.c1af	a1af					Export_EXTInputLine:
.c1af	a1af	48		pha				pha
.c1b0	a1b0	da		phx				phx
.c1b1	a1b1	5a		phy				phy
.c1b2	a1b2	a5 01		lda $01				lda 	1 							; save I/O page
.c1b4	a1b4	48		pha				pha
.c1b5	a1b5					_EILLoop:
.c1b5	a1b5	20 cd a2	jsr $a2cd			jsr 	PagedInputSingleCharacter
.c1b8	a1b8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1ba	a1ba	f0 44		beq $a200			beq 	_EILExit
.c1bc	a1bc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1be	a1be	f0 2a		beq $a1ea			beq 	_EILDelete
.c1c0	a1c0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1c2	a1c2	f0 1c		beq $a1e0			beq 	_EILBackspace
.c1c4	a1c4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1c6	a1c6	90 12		bcc $a1da			bcc 	_EILPrintLoop
.c1c8	a1c8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ca	a1ca	b0 0e		bcs $a1da			bcs 	_EILPrintLoop
.c1cc	a1cc	48		pha				pha 								; save character
.c1cd	a1cd	a9 02		lda #$02			lda 	#2  						; insert a space
.c1cf	a1cf	85 01		sta $01				sta 	1
.c1d1	a1d1	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in text screen
.c1d4	a1d4	e6 01		inc $01				inc 	1
.c1d6	a1d6	20 42 a2	jsr $a242			jsr 	EXTILInsert 				; insert in colour screen
.c1d9	a1d9	68		pla				pla 								; get character back.
.c1da	a1da					_EILPrintLoop:
.c1da	a1da	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1dd	a1dd	80 d6		bra $a1b5			bra 	_EILLoop
.c1df	a1df	60		rts				rts
.c1e0	a1e0					_EILBackspace:
.c1e0	a1e0	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c1e3	a1e3	f0 d0		beq $a1b5			beq 	_EILLoop
.c1e5	a1e5	a9 02		lda #$02			lda 	#2 							; move cursor left
.c1e7	a1e7	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c1ea	a1ea					_EILDelete
.c1ea	a1ea	a9 02		lda #$02			lda 	#2 							; text block
.c1ec	a1ec	85 01		sta $01				sta 	1
.c1ee	a1ee	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c1f0	a1f0	20 2d a2	jsr $a22d			jsr 	EXTILDelete
.c1f3	a1f3	e6 01		inc $01				inc 	1 							; colour block
.c1f5	a1f5	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c1f8	a1f8	88		dey				dey
.c1f9	a1f9	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c1fb	a1fb	20 2d a2	jsr $a22d			jsr 	EXTILDelete 				; backspace attribute
.c1fe	a1fe	80 b5		bra $a1b5			bra 	_EILLoop 					; and go round.
.c200	a200					_EILExit:
.c200	a200	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c202	a202	85 01		sta $01				sta 	1
.c204	a204	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c206	a206					_EILScrapeLine:
.c206	a206	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c208	a208	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c20b	a20b	c8		iny				iny
.c20c	a20c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c20f	a20f	d0 f5		bne $a206			bne 	_EILScrapeLine
.c211	a211					_EILTrimSpaces:
.c211	a211	88		dey				dey
.c212	a212	f0 08		beq $a21c			beq 	_EILEndTrim
.c214	a214	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c217	a217	c9 20		cmp #$20			cmp 	#' '
.c219	a219	f0 f6		beq $a211			beq 	_EILTrimSpaces
.c21b	a21b	c8		iny				iny 								; trim after non space character.
.c21c	a21c					_EILEndTrim:
.c21c	a21c	a9 00		lda #$00			lda 	#0 							; trim here.
.c21e	a21e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c221	a221	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c223	a223	20 00 a0	jsr $a000			jsr 	PagedPrintCharacter
.c226	a226	68		pla				pla 								; reset I/O page
.c227	a227	85 01		sta $01				sta 	1
.c229	a229	7a		ply				ply
.c22a	a22a	fa		plx				plx
.c22b	a22b	68		pla				pla
.c22c	a22c	60		rts				rts
.c22d	a22d					EXTILDelete:
.c22d	a22d	48		pha				pha 								; save the new character
.c22e	a22e	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c231	a231					_EXTDLoop:
.c231	a231	c8		iny				iny 								; copy one byte down.
.c232	a232	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c234	a234	88		dey				dey
.c235	a235	91 40		sta ($40),y			sta 	(EXTAddress),y
.c237	a237	c8		iny				iny 								; do till end of line.
.c238	a238	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c23b	a23b	90 f4		bcc $a231			bcc 	_EXTDLoop
.c23d	a23d	88		dey				dey 	 							; write in last slot.
.c23e	a23e	68		pla				pla
.c23f	a23f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c241	a241	60		rts				rts
.c242	a242					EXTILInsert:
.c242	a242	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c245	a245					_EXTILoop:
.c245	a245	88		dey				dey 								; back one
.c246	a246	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c249	a249	f0 08		beq $a253			beq 	_EXTIExit
.c24b	a24b	88		dey				dey 								; copy one byte up.
.c24c	a24c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c24e	a24e	c8		iny				iny
.c24f	a24f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c251	a251	80 f2		bra $a245			bra 	_EXTILoop
.c253	a253					_EXTIExit:
.c253	a253	60		rts				rts
.c254	a254					EXTScrollFill:
.c254	a254	aa		tax				tax									; save value to fill with
.c255	a255	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c257	a257	48		pha				pha
.c258	a258	a5 37		lda $37				lda 	zTemp0+1
.c25a	a25a	48		pha				pha
.c25b	a25b	a5 38		lda $38				lda 	zTemp1
.c25d	a25d	48		pha				pha
.c25e	a25e	a5 39		lda $39				lda 	zTemp1+1
.c260	a260	48		pha				pha
.c261	a261	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c263	a263	85 37		sta $37				sta 	zTemp0+1
.c265	a265	85 39		sta $39				sta 	zTemp1+1
.c267	a267	64 36		stz $36				stz 	zTemp0
.c269	a269	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c26c	a26c	85 38		sta $38				sta 	zTemp1
.c26e	a26e	a0 00		ldy #$00			ldy 	#0
.c270	a270					_EXSFCopy1:
.c270	a270	b1 38		lda ($38),y			lda 	(zTemp1),y
.c272	a272	91 36		sta ($36),y			sta 	(zTemp0),y
.c274	a274	c8		iny				iny
.c275	a275	d0 f9		bne $a270			bne 	_EXSFCopy1
.c277	a277	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c279	a279	e6 39		inc $39				inc 	zTemp1+1
.c27b	a27b	a5 39		lda $39				lda 	zTemp1+1
.c27d	a27d	c9 d3		cmp #$d3			cmp 	#$D3
.c27f	a27f	d0 ef		bne $a270			bne 	_EXSFCopy1
.c281	a281	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c284	a284	8a		txa				txa
.c285	a285					_EXSFFill1:
.c285	a285	88		dey				dey
.c286	a286	91 40		sta ($40),y			sta 	(EXTAddress),y
.c288	a288	c0 00		cpy #$00			cpy 	#0
.c28a	a28a	10 f9		bpl $a285			bpl 	_EXSFFill1
.c28c	a28c	68		pla				pla
.c28d	a28d	85 39		sta $39				sta 	zTemp1+1
.c28f	a28f	68		pla				pla
.c290	a290	85 38		sta $38				sta 	zTemp1
.c292	a292	68		pla				pla
.c293	a293	85 37		sta $37				sta 	zTemp0+1
.c295	a295	68		pla				pla
.c296	a296	85 36		sta $36				sta 	zTemp0
.c298	a298	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c299	a299					Export_EXTInitialise:
.c299	a299	64 01		stz $01				stz 	1 							; Access I/O page 0
.c29b	a29b	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c29e	a29e	9c 08 d0	stz $d008			stz 	$D008
.c2a1	a2a1	9c 09 d0	stz $d009			stz 	$D009
.c2a4	a2a4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2a6	a2a6	8d 58 d6	sta $d658			sta 	$D658
.c2a9	a2a9	a9 52		lda #$52			lda 	#$52
.c2ab	a2ab	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2ae	a2ae	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2b0	a2b0	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2b3	a2b3	a9 3c		lda #$3c			lda 	#60
.c2b5	a2b5	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2b8	a2b8	20 4d a1	jsr $a14d			jsr 	EXTClearScreenCode 			; clear the screen
.c2bb	a2bb					_EXMoveDown:
.c2bb	a2bb	a9 0d		lda #$0d			lda 	#13
.c2bd	a2bd	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2c0	a2c0	ad 6d 06	lda $066d			lda 	EXTRow
.c2c3	a2c3	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2c5	a2c5	d0 f4		bne $a2bb			bne 	_EXMoveDown
.c2c7	a2c7	20 3d a3	jsr $a33d			jsr 	EXTShowHeader
.c2ca	a2ca	64 01		stz $01				stz 	1
.c2cc	a2cc	60		rts				rts
.c2cd	a2cd					Export_EXTInputSingleCharacter:
.c2cd	a2cd					PagedInputSingleCharacter:
.c2cd	a2cd	da		phx				phx
.c2ce	a2ce	5a		phy				phy
.c2cf	a2cf					_EISCWait:
.c2cf	a2cf	a5 01		lda $01				lda 	1 							; save I/O 0
.c2d1	a2d1	48		pha				pha
.c2d2	a2d2	64 01		stz $01				stz 	1 							; access I/O Page 0
.c2d4	a2d4	38		sec				sec 								; calculate timer - LastTick
.c2d5	a2d5	ad 59 d6	lda $d659			lda 	$D659
.c2d8	a2d8	aa		tax				tax 								; saving timer in X
.c2d9	a2d9	ed 5c 06	sbc $065c			sbc 	LastTick
.c2dc	a2dc	c9 03		cmp #$03			cmp 	#3
.c2de	a2de	90 06		bcc $a2e6			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.c2e0	a2e0	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.c2e3	a2e3	20 32 bb	jsr $bb32			jsr 	PagedSNDUpdate 							; go do the code.
.c2e6	a2e6					_NoFireTick:
.c2e6	a2e6	68		pla				pla 								; restore I/O 0
.c2e7	a2e7	85 01		sta $01				sta 	1
.c2e9	a2e9	20 e4 ff	jsr $ffe4			jsr 	$FFE4 						; get a key
.c2ec	a2ec	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c2ee	a2ee	f0 df		beq $a2cf			beq 	_EISCWait
.c2f0	a2f0	7a		ply				ply
.c2f1	a2f1	fa		plx				plx
.c2f2	a2f2	60		rts				rts
.c2f3	a2f3					Export_EXTBreakCheck:
.c2f3	a2f3	4c e1 ff	jmp $ffe1			jmp		$FFE1
=3						KP_Z_ROW = 3
=$04						KP_Z_COL = $04
=4						KP_X_ROW = 4
=$04						KP_X_COL = $04
=8						KP_K_ROW = 8
=$04						KP_K_COL = $04
=7						KP_M_ROW = 7
=$04						KP_M_COL = $04
=9						KP_L_ROW = 9
=$08						KP_L_COL = $08
.c2f6	a2f6					Export_EXTReadController:
.c2f6	a2f6	da		phx				phx
.c2f7	a2f7	a2 00		ldx #$00		ldx 	#0
.c2f9	a2f9	a9 04		lda #$04			lda 	#KP_X_ROW
.c2fb	a2fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c2fe	a2fe	29 04		and #$04			and 	#KP_X_COL
.c300	a300	f0 04		beq $a306			beq 	_NoSet1
.c302	a302	8a		txa				txa
.c303	a303	09 01		ora #$01			ora 	#1
.c305	a305	aa		tax				tax
.c306	a306					_NoSet1:
.c306	a306	a9 03		lda #$03			lda 	#KP_Z_ROW
.c308	a308	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c30b	a30b	29 04		and #$04			and 	#KP_Z_COL
.c30d	a30d	f0 04		beq $a313			beq 	_NoSet1
.c30f	a30f	8a		txa				txa
.c310	a310	09 02		ora #$02			ora 	#2
.c312	a312	aa		tax				tax
.c313	a313					_NoSet1:
.c313	a313	a9 07		lda #$07			lda 	#KP_M_ROW
.c315	a315	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c318	a318	29 04		and #$04			and 	#KP_M_COL
.c31a	a31a	f0 04		beq $a320			beq 	_NoSet1
.c31c	a31c	8a		txa				txa
.c31d	a31d	09 04		ora #$04			ora 	#4
.c31f	a31f	aa		tax				tax
.c320	a320					_NoSet1:
.c320	a320	a9 08		lda #$08			lda 	#KP_K_ROW
.c322	a322	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c325	a325	29 04		and #$04			and 	#KP_K_COL
.c327	a327	f0 04		beq $a32d			beq 	_NoSet1
.c329	a329	8a		txa				txa
.c32a	a32a	09 08		ora #$08			ora 	#8
.c32c	a32c	aa		tax				tax
.c32d	a32d					_NoSet1:
.c32d	a32d	a9 09		lda #$09			lda 	#KP_L_ROW
.c32f	a32f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.c332	a332	29 08		and #$08			and 	#KP_L_COL
.c334	a334	f0 04		beq $a33a			beq 	_NoSet1
.c336	a336	8a		txa				txa
.c337	a337	09 10		ora #$10			ora 	#16
.c339	a339	aa		tax				tax
.c33a	a33a					_NoSet1:
.c33a	a33a	8a		txa				txa
.c33b	a33b	fa		plx				plx
.c33c	a33c	60		rts				rts
.c33d	a33d					EXTShowHeader:
.c33d	a33d	a5 01		lda $01				lda 	1
.c33f	a33f	48		pha				pha
.c340	a340	a9 02		lda #$02			lda 	#2
.c342	a342	a2 42		ldx #$42			ldx 	#(Header_Chars & $FF)
.c344	a344	a0 a5		ldy #$a5			ldy 	#(Header_Chars >> 8)
.c346	a346	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c349	a349	a9 03		lda #$03			lda 	#3
.c34b	a34b	a2 aa		ldx #$aa			ldx 	#(Header_Attrs & $FF)
.c34d	a34d	a0 a3		ldy #$a3			ldy 	#(Header_Attrs >> 8)
.c34f	a34f	20 64 a3	jsr $a364			jsr 	_ESHCopyBlock
.c352	a352	64 01		stz $01				stz 	1
.c354	a354	a2 3f		ldx #$3f			ldx 	#16*4-1
.c356	a356					_EXTCopyLUT:
.c356	a356	bd 72 a7	lda $a772,x			lda 	Header_Palette,x
.c359	a359	9d 00 d8	sta $d800,x			sta 	$D800,x
.c35c	a35c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c35f	a35f	ca		dex				dex
.c360	a360	10 f4		bpl $a356			bpl 	_EXTCopyLUT
.c362	a362	68		pla				pla
.c363	a363	60		rts				rts
.c364	a364					_ESHCopyBlock:
.c364	a364	85 01		sta $01				sta 	1
.c366	a366	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c368	a368	84 37		sty $37				sty 	zTemp0+1
.c36a	a36a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c36c	a36c	85 38		sta $38				sta 	0+zTemp1
.c36e	a36e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c370	a370	85 39		sta $39				sta 	1+zTemp1
.c372	a372					_ESHCopyLoop:
.c372	a372	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c374	a374	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c376	a376	f0 1b		beq $a393			beq 	_ESHUnpack
.c378	a378	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c37a	a37a	a9 01		lda #$01			lda 	#1 							; source add 1
.c37c	a37c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c37e	a37e					_ESHNext:
.c37e	a37e	18		clc				clc 								; zTemp0 + A
.c37f	a37f	65 36		adc $36				adc 	zTemp0
.c381	a381	85 36		sta $36				sta 	zTemp0
.c383	a383	90 02		bcc $a387			bcc 	_ESHNoCarry
.c385	a385	e6 37		inc $37				inc 	zTemp0+1
.c387	a387					_ESHNoCarry:
.c387	a387	98		tya				tya 								; zTemp1 + Y
.c388	a388	18		clc				clc
.c389	a389	65 38		adc $38				adc 	zTemp1
.c38b	a38b	85 38		sta $38				sta 	zTemp1
.c38d	a38d	90 e3		bcc $a372			bcc 	_ESHCopyLoop
.c38f	a38f	e6 39		inc $39				inc 	zTemp1+1
.c391	a391	80 df		bra $a372			bra 	_ESHCopyLoop
.c393	a393					_ESHUnpack:
.c393	a393	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c395	a395	b1 36		lda ($36),y			lda 	(zTemp0),y
.c397	a397	aa		tax				tax
.c398	a398	88		dey				dey 								; byte into A
.c399	a399	b1 36		lda ($36),y			lda 	(zTemp0),y
.c39b	a39b	f0 0c		beq $a3a9			beq 	_ESHExit 					; exit if zero.
.c39d	a39d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c39f	a39f					_ESHCopyOut:
.c39f	a39f	91 38		sta ($38),y			sta 	(zTemp1),y
.c3a1	a3a1	c8		iny				iny
.c3a2	a3a2	ca		dex				dex
.c3a3	a3a3	d0 fa		bne $a39f			bne 	_ESHCopyOut
.c3a5	a3a5	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c3a7	a3a7	80 d5		bra $a37e			bra 	_ESHNext
.c3a9	a3a9					_ESHExit:
.c3a9	a3a9	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c3aa	a3aa					Header_attrs:
>c3aa	a3aa	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c3b2	a3b2	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3c2	a3c2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3d2	a3d2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3e2	a3e2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3f2	a3f2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c402	a402	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c412	a412	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c422	a422	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c432	a432	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c442	a442	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c452	a452	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c462	a462	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c472	a472	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c482	a482	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c492	a492	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c4a2	a4a2	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c4b2	a4b2	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4c2	a4c2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4d2	a4d2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4e2	a4e2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4f2	a4f2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c502	a502	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c512	a512	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c522	a522	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c532	a532	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c542	a542					Header_chars:
>c542	a542	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c54a	a54a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c55a	a55a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c56a	a56a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c57a	a57a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c58a	a58a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c59a	a59a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c5aa	a5aa	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c5ba	a5ba	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5ca	a5ca	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5da	a5da	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ea	a5ea	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5fa	a5fa	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c60a	a60a	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c61a	a61a	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c62a	a62a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c63a	a63a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c64a	a64a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c65a	a65a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c66a	a66a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c67a	a67a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c68a	a68a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c69a	a69a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c6aa	a6aa	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c6ba	a6ba	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6ca	a6ca	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6da	a6da	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ea	a6ea	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6fa	a6fa	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c70a	a70a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c71a	a71a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c72a	a72a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c73a	a73a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c74a	a74a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c75a	a75a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c76a	a76a	9d ff 96 18 96 a3 ff 00
.c772	a772					Header_Palette:
>c772	a772	00 00 00 00				.dword $000000
>c776	a776	66 66 66 00				.dword $666666
>c77a	a77a	aa 00 00 00				.dword $0000aa
>c77e	a77e	00 aa 00 00				.dword $00aa00
>c782	a782	ea 41 c0 00				.dword $c041ea
>c786	a786	00 48 87 00				.dword $874800
>c78a	a78a	00 9c ff 00				.dword $ff9c00
>c78e	a78e	ff db 57 00				.dword $57dbff
>c792	a792	28 3f 3f 00				.dword $3f3f28
>c796	a796	8a aa aa 00				.dword $aaaa8a
>c79a	a79a	ff 55 55 00				.dword $5555ff
>c79e	a79e	55 ff 55 00				.dword $55ff55
>c7a2	a7a2	ed 8d ff 00				.dword $ff8ded
>c7a6	a7a6	00 00 ff 00				.dword $ff0000
>c7aa	a7aa	55 ff ff 00				.dword $ffff55
>c7ae	a7ae	ff ff ff 00				.dword $ffffff
>c7b2	a7b2	ff ff ff 00				.dword $ffffff
>c7b6	a7b6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c7ba	a7ba					GRVectorTable:
>c7ba	a7ba	09 aa					.word	GXInitialise             ; $00 Initialise
>c7bc	a7bc	23 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c7be	a7be	6b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7c0	a7c0	bb a9					.word	GXClearBitmap            ; $03 Clear
>c7c2	a7c2	fa ab					.word	GXSetColourMode          ; $04 Colour
>c7c4	a7c4	c2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7c6	a7c6	0a ae					.word	GXSpriteHandler          ; $06 DrawSprite
>c7c8	a7c8	7b ae					.word	GXSelect                 ; $07 SpriteUse
>c7ca	a7ca	a4 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7cc	a7cc	2b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ce	a7ce	6d a8					.word	GRUndefined              ; $0a
>c7d0	a7d0	6d a8					.word	GRUndefined              ; $0b
>c7d2	a7d2	6d a8					.word	GRUndefined              ; $0c
>c7d4	a7d4	6d a8					.word	GRUndefined              ; $0d
>c7d6	a7d6	6d a8					.word	GRUndefined              ; $0e
>c7d8	a7d8	6d a8					.word	GRUndefined              ; $0f
>c7da	a7da	6d a8					.word	GRUndefined              ; $10
>c7dc	a7dc	6d a8					.word	GRUndefined              ; $11
>c7de	a7de	6d a8					.word	GRUndefined              ; $12
>c7e0	a7e0	6d a8					.word	GRUndefined              ; $13
>c7e2	a7e2	6d a8					.word	GRUndefined              ; $14
>c7e4	a7e4	6d a8					.word	GRUndefined              ; $15
>c7e6	a7e6	6d a8					.word	GRUndefined              ; $16
>c7e8	a7e8	6d a8					.word	GRUndefined              ; $17
>c7ea	a7ea	6d a8					.word	GRUndefined              ; $18
>c7ec	a7ec	6d a8					.word	GRUndefined              ; $19
>c7ee	a7ee	6d a8					.word	GRUndefined              ; $1a
>c7f0	a7f0	6d a8					.word	GRUndefined              ; $1b
>c7f2	a7f2	6d a8					.word	GRUndefined              ; $1c
>c7f4	a7f4	6d a8					.word	GRUndefined              ; $1d
>c7f6	a7f6	6d a8					.word	GRUndefined              ; $1e
>c7f8	a7f8	6d a8					.word	GRUndefined              ; $1f
>c7fa	a7fa	6b a8					.word	GXMove                   ; $20 Move
>c7fc	a7fc	c8 aa					.word	GXLine                   ; $21 Line
>c7fe	a7fe	43 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c800	a800	40 ac					.word	GXFillRectangle          ; $23 FillRect
>c802	a802	72 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c804	a804	6e a8					.word	GXFillCircle             ; $25 FillCircle
>c806	a806	6d a8					.word	GRUndefined              ; $26
>c808	a808	6d a8					.word	GRUndefined              ; $27
>c80a	a80a	28 ac					.word	GXPlotPoint              ; $28 Plot
>c80c	a80c	3a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gsOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						GXSpriteOffsetBase:
>0690								.fill 	2
.0692						GXSpriteLow:
>0692								.fill 	64
.06d2						GXSpriteHigh:
>06d2								.fill 	64
.c80e	a80e					Export_GXGraphicDraw:
.c80e	a80e	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c810	a810	b0 06		bcs $a818			bcs 	_GDCoordinate
.c812	a812	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c814	a814	84 37		sty $37				sty 	gxzTemp0+1
.c816	a816	80 4b		bra $a863			bra 	_GDExecuteA 				; and execute
.c818	a818					_GDCoordinate:
.c818	a818	48		pha				pha 								; save AXY
.c819	a819	da		phx				phx
.c81a	a81a	5a		phy				phy
.c81b	a81b	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c81d	a81d					_GDCopy1:
.c81d	a81d	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c820	a820	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c823	a823	ca		dex				dex
.c824	a824	10 f7		bpl $a81d			bpl 	_GDCopy1
.c826	a826	68		pla				pla 								; update Y
.c827	a827	8d 74 06	sta $0674			sta 	gxCurrentY
.c82a	a82a	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c82d	a82d	68		pla				pla
.c82e	a82e	8d 72 06	sta $0672			sta 	gxCurrentX
.c831	a831	68		pla				pla 								; get A (command+X.1) back
.c832	a832	48		pha				pha
.c833	a833	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c835	a835	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c838	a838	68		pla				pla 								; get command back
.c839	a839	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c83b	a83b	48		pha				pha 								; push back.
.c83c	a83c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c83e	a83e	f0 17		beq $a857			beq 	_GDCopyToWorkArea
.c840	a840	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c843	a843	f0 07		beq $a84c			beq 	_GDCheckY
.c845	a845	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c848	a848	c9 40		cmp #$40			cmp 	#64
.c84a	a84a	b0 08		bcs $a854			bcs 	_GDError1
.c84c	a84c					_GDCheckY:
.c84c	a84c	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c84f	a84f	cd 86 06	cmp $0686			cmp 	gxHeight
.c852	a852	90 03		bcc $a857			bcc 	_GDCopyToWorkArea
.c854	a854					_GDError1:
.c854	a854	68		pla				pla
.c855	a855					_GDError2:
.c855	a855	38		sec				sec
.c856	a856	60		rts				rts
.c857	a857					_GDCopyToWorkArea:
.c857	a857	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c859	a859					_GDCopy2:
.c859	a859	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c85c	a85c	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c85f	a85f	ca		dex				dex
.c860	a860	10 f7		bpl $a859			bpl 	_GDCopy2
.c862	a862	68		pla				pla 								; get command
.c863	a863					_GDExecuteA:
.c863	a863	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c865	a865	b0 ee		bcs $a855			bcs 	_GDError2
.c867	a867	aa		tax				tax
.c868	a868	7c ba a7	jmp ($a7ba,x)			jmp 	(GRVectorTable,x)
.c86b	a86b					GXMove:
.c86b	a86b	18		clc				clc
.c86c	a86c	60		rts				rts
.c86d	a86d					GRUndefined:
>c86d	a86d	db						.byte 	$DB 						; causes a break in the emulator
.c86e	a86e					GXFillCircle:
.c86e	a86e	a9 ff		lda #$ff			lda 	#255
.c870	a870	80 02		bra $a874			bra 	GXCircle
.c872	a872					GXFrameCircle:
.c872	a872	a9 00		lda #$00			lda 	#0
.c874	a874					GXCircle:
.c874	a874	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c877	a877	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c87a	a87a	f0 26		beq $a8a2			beq 	_GXCFail
.c87c	a87c	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; topleft/bottomright
.c87f	a87f	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.c882	a882	20 74 a9	jsr $a974			jsr 	GXCircleSetup 				; set up for drawing
.c885	a885	9c 16 07	stz $0716			stz 	gxYChanged
.c888	a888					_GXCircleDraw:
.c888	a888	ad 13 07	lda $0713			lda 	gXCentre					; while x <= y
.c88b	a88b	cd 14 07	cmp $0714			cmp 	gYCentre
.c88e	a88e	90 0a		bcc $a89a			bcc 	_GXCircleContinue
.c890	a890	d0 03		bne $a895			bne 	_GXNoLast
.c892	a892	20 a7 a8	jsr $a8a7			jsr 	GXPlot1
.c895	a895					_GXNoLast:
.c895	a895	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; close the bitmap
.c898	a898	18		clc				clc
.c899	a899	60		rts				rts
.c89a	a89a					_GXCircleContinue:
.c89a	a89a	20 a4 a8	jsr $a8a4			jsr 	GXPlot2 					; draw it
.c89d	a89d	20 21 a9	jsr $a921			jsr 	GXCircleMove 				; adjust the coordinates
.c8a0	a8a0	80 e6		bra $a888			bra 	_GXCircleDraw
.c8a2	a8a2					_GXCFail:
.c8a2	a8a2	38		sec				sec
.c8a3	a8a3	60		rts				rts
.c8a4	a8a4					GXPlot2:
.c8a4	a8a4	20 a7 a8	jsr $a8a7			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c8a7	a8a7					GXPlot1:
.c8a7	a8a7	ad 14 07	lda $0714			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.c8aa	a8aa	f0 03		beq $a8af			beq 	_GXPlot1Only
.c8ac	a8ac	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; plot and negate
.c8af	a8af					_GXPlot1Only:
.c8af	a8af	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; twice, undoing negation
.c8b2	a8b2	ad 13 07	lda $0713			lda 	gXCentre 						; swap X and Y
.c8b5	a8b5	ae 14 07	ldx $0714			ldx	 	gYCentre
.c8b8	a8b8	8d 14 07	sta $0714			sta 	gYCentre
.c8bb	a8bb	8e 13 07	stx $0713			stx 	gXCentre
.c8be	a8be	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c8c1	a8c1	a9 ff		lda #$ff			lda 	#$FF
.c8c3	a8c3	8d 16 07	sta $0716			sta 	gxYChanged
.c8c6	a8c6	60		rts				rts
.c8c7	a8c7	20 cb a8	jsr $a8cb			jsr 	GXPlot0 						; do once
.c8ca	a8ca	60		rts				rts
.c8cb	a8cb	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ce	a8ce	f0 05		beq $a8d5			beq 	_GXPlot0Always
.c8d0	a8d0	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c8d3	a8d3	f0 2d		beq $a902			beq 	GXPlot0Exit
.c8d5	a8d5					_GXPlot0Always:
.c8d5	a8d5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8d7	a8d7	ad 14 07	lda $0714			lda 	gYCentre
.c8da	a8da	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8dd	a8dd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8df	a8df	ad 13 07	lda $0713			lda 	gXCentre
.c8e2	a8e2	20 03 a9	jsr $a903			jsr 	GXSubCopy
.c8e5	a8e5	48		pha				pha 									; save last offset X
.c8e6	a8e6	20 ba af	jsr $afba			jsr 	GXPositionCalc 					; calculate position/offset.
.c8e9	a8e9	68		pla				pla
.c8ea	a8ea	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8eb	a8eb	85 36		sta $36				sta 	gxzTemp0
.c8ed	a8ed	64 37		stz $37				stz 	gxzTemp0+1
.c8ef	a8ef	26 37		rol $37				rol 	gxzTemp0+1
.c8f1	a8f1	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8f4	a8f4	69 80		adc #$80			adc 	#128
.c8f6	a8f6	20 93 ac	jsr $ac93			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8f9	a8f9	38		sec				sec 									; GY = -GY
.c8fa	a8fa	a9 00		lda #$00			lda 	#0
.c8fc	a8fc	ed 14 07	sbc $0714			sbc 	gYCentre
.c8ff	a8ff	8d 14 07	sta $0714			sta 	gYCentre
.c902	a902					GXPlot0Exit:
.c902	a902	60		rts				rts
.c903	a903					GXSubCopy:
.c903	a903	85 36		sta $36				sta 	gxzTemp0
.c905	a905	64 37		stz $37				stz 	gxzTemp0+1
.c907	a907	29 80		and #$80			and 	#$80
.c909	a909	f0 02		beq $a90d			beq 	_GXNoSx
.c90b	a90b	c6 37		dec $37				dec 	gxzTemp0+1
.c90d	a90d					_GXNoSx:
.c90d	a90d	38		sec				sec
.c90e	a90e	bd 7e 06	lda $067e,x			lda 	gXX1,x
.c911	a911	e5 36		sbc $36				sbc 	gxzTemp0
.c913	a913	9d 7a 06	sta $067a,x			sta 	gXX0,x
.c916	a916	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c919	a919	e5 37		sbc $37				sbc 	gxzTemp0+1
.c91b	a91b	9d 7b 06	sta $067b,x			sta 	gXX0+1,x
.c91e	a91e	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c920	a920	60		rts				rts
.c921	a921					GXCircleMove:
.c921	a921	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c924	a924	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c926	a926	10 0d		bpl $a935			bpl 	_GXEMPositive
.c928	a928	ee 13 07	inc $0713			inc 	gXCentre 					; X++
.c92b	a92b	ad 13 07	lda $0713			lda 	gXCentre
.c92e	a92e	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c931	a931	a9 06		lda #$06			lda 	#6  						; and add 6
.c933	a933	80 15		bra $a94a			bra 	_GXEMAddD
.c935	a935					_GXEMPositive:
.c935	a935	ee 13 07	inc $0713			inc 	gXCentre					; X++
.c938	a938	ce 14 07	dec $0714			dec 	gyCentre 					; Y--
.c93b	a93b	38		sec				sec 								; calculate X-Y
.c93c	a93c	ad 13 07	lda $0713			lda 	gXCentre
.c93f	a93f	ed 14 07	sbc $0714			sbc 	gYCentre
.c942	a942	20 54 a9	jsr $a954			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c945	a945	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c947	a947	ce 16 07	dec $0716			dec 	gxYChanged
.c94a	a94a					_GXEMAddD:
.c94a	a94a	18		clc				clc
.c94b	a94b	65 38		adc $38				adc 	gxzTemp1
.c94d	a94d	85 38		sta $38				sta 	gxzTemp1
.c94f	a94f	90 02		bcc $a953			bcc 	_GXEMNoCarry
.c951	a951	e6 39		inc $39				inc 	gxzTemp1+1
.c953	a953					_GXEMNoCarry:
.c953	a953	60		rts				rts
.c954	a954					_GXAdd4TimesToD:
.c954	a954	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c956	a956	29 80		and #$80			and 	#$80
.c958	a958	f0 02		beq $a95c			beq 	_GXA4Unsigned
.c95a	a95a	a9 ff		lda #$ff			lda 	#$FF
.c95c	a95c					_GXA4Unsigned:
.c95c	a95c	85 37		sta $37				sta 	gxzTemp0+1
.c95e	a95e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c960	a960	26 37		rol $37				rol 	gxzTemp0+1
.c962	a962	06 36		asl $36				asl 	gxzTemp0
.c964	a964	26 37		rol $37				rol 	gxzTemp0+1
.c966	a966	18		clc				clc 								; add
.c967	a967	a5 36		lda $36				lda		gxzTemp0
.c969	a969	65 38		adc $38				adc 	gxzTemp1
.c96b	a96b	85 38		sta $38				sta 	gxzTemp1
.c96d	a96d	a5 37		lda $37				lda		gxzTemp0+1
.c96f	a96f	65 39		adc $39				adc 	gxzTemp1+1
.c971	a971	85 39		sta $39				sta 	gxzTemp1+1
.c973	a973	60		rts				rts
.c974	a974					GXCircleSetup:
.c974	a974	38		sec				sec
.c975	a975	ad 80 06	lda $0680			lda 	gxY1
.c978	a978	ed 7c 06	sbc $067c			sbc 	gxY0
.c97b	a97b	4a		lsr a				lsr 	a
.c97c	a97c	8d 12 07	sta $0712			sta 	gxRadius
.c97f	a97f	a2 00		ldx #$00			ldx 	#0
.c981	a981	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c984	a984	a2 02		ldx #$02			ldx 	#2
.c986	a986	20 a3 a9	jsr $a9a3			jsr 	_GXCalculateCentre
.c989	a989	9c 13 07	stz $0713			stz 	gXCentre
.c98c	a98c	ad 12 07	lda $0712			lda 	gxRadius
.c98f	a98f	8d 14 07	sta $0714			sta 	gYCentre
.c992	a992	0a		asl a				asl 	a 							; R x 2
.c993	a993	85 36		sta $36				sta 	gxzTemp0
.c995	a995	38		sec				sec
.c996	a996	a9 03		lda #$03			lda 	#3
.c998	a998	e5 36		sbc $36				sbc 	gxzTemp0
.c99a	a99a	85 38		sta $38				sta 	gxzTemp1
.c99c	a99c	a9 00		lda #$00			lda 	#0
.c99e	a99e	e9 00		sbc #$00			sbc 	#0
.c9a0	a9a0	85 39		sta $39				sta 	gxzTemp1+1
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXCalculateCentre:
.c9a3	a9a3	38		sec				sec
.c9a4	a9a4	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c9a7	a9a7	7d 7a 06	adc $067a,x			adc 	gXX0,x
.c9aa	a9aa	9d 7e 06	sta $067e,x			sta 	gXX1,x
.c9ad	a9ad	bd 7f 06	lda $067f,x			lda 	gXX1+1,x
.c9b0	a9b0	7d 7b 06	adc $067b,x			adc 	gXX0+1,x
.c9b3	a9b3	4a		lsr a				lsr 	a
.c9b4	a9b4	9d 7f 06	sta $067f,x			sta 	gXX1+1,x
.c9b7	a9b7	7e 7e 06	ror $067e,x			ror 	gXX1,x
.c9ba	a9ba	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gXCentre:
>0713								.fill 	1
.0714						gYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c9bb	a9bb					GXClearBitmap:
.c9bb	a9bb	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c9be	a9be	f0 24		beq $a9e4			beq 	_GXCBFail
.c9c0	a9c0	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start access
.c9c3	a9c3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9c5	a9c5	ad 86 06	lda $0686			lda 	gxHeight
.c9c8	a9c8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9ca	a9ca	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9cc	a9cc					_GXCalcLastPage:
.c9cc	a9cc	98		tya				tya 								; add to base page
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	6d 84 06	adc $0684			adc 	gxBasePage
.c9d1	a9d1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9d3	a9d3					_GXClearAll:
.c9d3	a9d3	20 e6 a9	jsr $a9e6			jsr 	_GXClearBlock 				; clear 8k block
.c9d6	a9d6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9d8	a9d8	a5 0b		lda $0b				lda 	GXEditSlot
.c9da	a9da	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c9dd	a9dd	b0 f4		bcs $a9d3			bcs 	_GXClearAll
.c9df	a9df	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap	 			; stop access
.c9e2	a9e2	18		clc				clc
.c9e3	a9e3	60		rts				rts
.c9e4	a9e4					_GXCBFail:
.c9e4	a9e4	38		sec				sec
.c9e5	a9e5	60		rts				rts
.c9e6	a9e6					_GXClearBlock:
.c9e6	a9e6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9e8	a9e8	85 38		sta $38				sta 	0+gxzTemp1
.c9ea	a9ea	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9ec	a9ec	85 39		sta $39				sta 	1+gxzTemp1
.c9ee	a9ee					_GXCB0:
.c9ee	a9ee	a5 36		lda $36				lda 	gxzTemp0
.c9f0	a9f0	a0 00		ldy #$00			ldy 	#0
.c9f2	a9f2					_GXCB1:
.c9f2	a9f2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f4	a9f4	c8		iny				iny
.c9f5	a9f5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9f7	a9f7	c8		iny				iny
.c9f8	a9f8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fa	a9fa	c8		iny				iny
.c9fb	a9fb	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9fd	a9fd	c8		iny				iny
.c9fe	a9fe	d0 f2		bne $a9f2			bne 	_GXCB1
.ca00	aa00	e6 39		inc $39				inc 	gxzTemp1+1
.ca02	aa02	a5 39		lda $39				lda 	gxzTemp1+1
.ca04	aa04	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ca06	aa06	d0 e6		bne $a9ee			bne 	_GXCB0
.ca08	aa08	60		rts				rts
.ca09	aa09					GXInitialise:
.ca09	aa09	64 01		stz $01				stz 	1
.ca0b	aa0b	a9 01		lda #$01			lda 	#1
.ca0d	aa0d	8d 00 d0	sta $d000			sta 	$D000
.ca10	aa10	18		clc				clc
.ca11	aa11	9c 82 06	stz $0682			stz 	GXSpritesOn
.ca14	aa14	9c 83 06	stz $0683			stz 	GXBitmapsOn
.ca17	aa17	a2 0f		ldx #$0f			ldx 	#15
.ca19	aa19					_GXIClear:
.ca19	aa19	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.ca1c	aa1c	ca		dex				dex
.ca1d	aa1d	10 fa		bpl $aa19			bpl 	_GXIClear
.ca1f	aa1f	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.ca22	aa22	60		rts				rts
.ca23	aa23					GXControlBitmap:
.ca23	aa23	64 01		stz $01				stz 	1
.ca25	aa25	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca27	aa27	29 01		and #$01			and 	#1 							; set bitmap flag
.ca29	aa29	8d 83 06	sta $0683			sta 	gxBitmapsOn
.ca2c	aa2c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca2d	aa2d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca30	aa30	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca32	aa32	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca34	aa34	90 02		bcc $aa38			bcc 	_CBNotOn
.ca36	aa36	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca38	aa38					_CBNotOn:
.ca38	aa38	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca3b	aa3b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca3d	aa3d	29 07		and #$07			and 	#7
.ca3f	aa3f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca42	aa42	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca44	aa44	d0 02		bne $aa48			bne 	_CBNotDefault
.ca46	aa46	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca48	aa48					_CBNotDefault:
.ca48	aa48	8d 84 06	sta $0684			sta 	gxBasePage
.ca4b	aa4b	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4e	aa4e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca50	aa50	8d 03 d1	sta $d103			sta 	$D103
.ca53	aa53	a5 36		lda $36				lda 	gxzTemp0
.ca55	aa55	8d 02 d1	sta $d102			sta 	$D102
.ca58	aa58	9c 01 d1	stz $d101			stz 	$D101
.ca5b	aa5b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca5d	aa5d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca60	aa60	29 01		and #$01			and 	#1
.ca62	aa62	f0 02		beq $aa66			beq 	_CBHaveHeight
.ca64	aa64	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca66	aa66					_CBHaveHeight
.ca66	aa66	8e 86 06	stx $0686			stx 	gxHeight
.ca69	aa69	18		clc				clc
.ca6a	aa6a	60		rts				rts
.ca6b	aa6b					GXControlSprite:
.ca6b	aa6b	64 01		stz $01				stz 	1
.ca6d	aa6d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca6f	aa6f	29 01		and #$01			and 	#1 							; set sprites flag
.ca71	aa71	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca74	aa74	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca75	aa75	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca78	aa78	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca7a	aa7a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca7c	aa7c	90 02		bcc $aa80			bcc 	_CSNotOn
.ca7e	aa7e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca80	aa80					_CSNotOn:
.ca80	aa80	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca83	aa83	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca85	aa85	d0 02		bne $aa89			bne 	_CSNotDefault
.ca87	aa87	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca89	aa89					_CSNotDefault:
.ca89	aa89	8d 85 06	sta $0685			sta 	gxSpritePage
.ca8c	aa8c	20 ac aa	jsr $aaac			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca8f	aa8f	a5 36		lda $36				lda 	zTemp0
.ca91	aa91	8d 90 06	sta $0690			sta 	GXSpriteOffsetBase
.ca94	aa94	a5 37		lda $37				lda 	zTemp0+1
.ca96	aa96	8d 91 06	sta $0691			sta 	GXSpriteOffsetBase+1
.ca99	aa99	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca9b	aa9b					_CSClear:
.ca9b	aa9b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca9e	aa9e	9e 00 da	stz $da00,x			stz 	$DA00,x
.caa1	aaa1	ca		dex				dex
.caa2	aaa2	d0 f7		bne $aa9b			bne 	_CSClear
.caa4	aaa4	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.caa7	aaa7	20 ba aa	jsr $aaba			jsr 	GXClearSpriteStore
.caaa	aaaa	18		clc				clc
.caab	aaab	60		rts				rts
.caac	aaac					GXCalculateBaseAddress:
.caac	aaac	85 36		sta $36				sta 	gxzTemp0
.caae	aaae	64 37		stz $37				stz 	gxzTemp0+1
.cab0	aab0	a9 05		lda #$05			lda 	#5
.cab2	aab2					_GXShift:
.cab2	aab2	06 36		asl $36				asl 	gxzTemp0
.cab4	aab4	26 37		rol $37				rol 	gxzTemp0+1
.cab6	aab6	3a		dec a				dec		a
.cab7	aab7	d0 f9		bne $aab2			bne 	_GXShift
.cab9	aab9	60		rts				rts
.caba	aaba					GXClearSpriteStore:
.caba	aaba	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.cabc	aabc					_GXCSSLoop:
.cabc	aabc	9e d2 06	stz $06d2,x			stz 	GXSpriteHigh,x
.cabf	aabf	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.cac1	aac1	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cac4	aac4	ca		dex				dex
.cac5	aac5	10 f5		bpl $aabc			bpl 	_GXCSSLoop
.cac7	aac7	60		rts				rts
.cac8	aac8					GXLine:
.cac8	aac8	ad 83 06	lda $0683			lda 	GXBitmapsOn
.cacb	aacb	f0 28		beq $aaf5			beq 	_GXLFail
.cacd	aacd	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.cad0	aad0	20 f0 b0	jsr $b0f0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cad3	aad3	20 9b ab	jsr $ab9b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cad6	aad6	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cad9	aad9					_GXDrawLoop:
.cad9	aad9	ac 8c 06	ldy $068c			ldy 	gsOffset 					; draw the pixel
.cadc	aadc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cade	aade	2d 8a 06	and $068a			and 	gxANDValue
.cae1	aae1	4d 89 06	eor $0689			eor 	gxEORValue
.cae4	aae4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cae6	aae6	20 f7 aa	jsr $aaf7			jsr 	GXLineIsComplete 			; is the line complete ?
.cae9	aae9	f0 05		beq $aaf0			beq 	_GXLExit
.caeb	aaeb	20 12 ab	jsr $ab12			jsr 	GXLineAdvance 				; code as per advance method
.caee	aaee	80 e9		bra $aad9			bra 	_GXDrawLoop
.caf0	aaf0					_GXLExit:
.caf0	aaf0	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.caf3	aaf3	18		clc				clc
.caf4	aaf4	60		rts				rts
.caf5	aaf5					_GXLFail:
.caf5	aaf5	38		sec				sec
.caf6	aaf6	60		rts				rts
.caf7	aaf7					GXLineIsComplete:
.caf7	aaf7	ad 19 07	lda $0719			lda 	GXIsDiffYLarger 			; is dy larger
.cafa	aafa	d0 0f		bne $ab0b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cafc	aafc	ad 7a 06	lda $067a			lda 	GXX0 						; compare X, LSB and MSB
.caff	aaff	4d 7e 06	eor $067e			eor 	GXX1
.cb02	ab02	d0 06		bne $ab0a			bne 	_GXLICExit
.cb04	ab04	ad 7b 06	lda $067b			lda 	GXX0+1
.cb07	ab07	4d 7f 06	eor $067f			eor 	GXX1+1
.cb0a	ab0a					_GXLICExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					_GXLICCompareY:
.cb0b	ab0b	ad 80 06	lda $0680			lda 	GXY1
.cb0e	ab0e	4d 7c 06	eor $067c			eor 	GXY0
.cb11	ab11	60		rts				rts
.cb12	ab12					GXLineAdvance:
.cb12	ab12	18		clc				clc 								; add adjust to position
.cb13	ab13	ad 1b 07	lda $071b			lda 	GXPosition
.cb16	ab16	6d 1c 07	adc $071c			adc 	GXAdjust
.cb19	ab19	8d 1b 07	sta $071b			sta 	GXPosition
.cb1c	ab1c	9c 1e 07	stz $071e			stz 	GXAddSelect 				; clear add select flag
.cb1f	ab1f	b0 05		bcs $ab26			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb21	ab21	cd 1d 07	cmp $071d			cmp 	GXTotal 					; if exceeded total
.cb24	ab24	90 0a		bcc $ab30			bcc 	_GXLANoExtra
.cb26	ab26					_GXLAOverflow:
.cb26	ab26	ce 1e 07	dec $071e			dec 	GXAddSelect 				; set addselect to $FF
.cb29	ab29	38		sec				sec 								; subtract total and write back
.cb2a	ab2a	ed 1d 07	sbc $071d			sbc 	GXTotal
.cb2d	ab2d	8d 1b 07	sta $071b			sta 	GXPosition
.cb30	ab30					_GXLANoExtra:
.cb30	ab30	ad 19 07	lda $0719			lda 	GXIsDiffYLarger
.cb33	ab33	f0 0d		beq $ab42			beq 	_GXDXLarger
.cb35	ab35	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb38	ab38	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb3b	ab3b	f0 10		beq $ab4d			beq 	_GXLAExit
.cb3d	ab3d	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb40	ab40	80 0b		bra $ab4d			bra 	_GXLAExit
.cb42	ab42					_GXDXLarger:
.cb42	ab42	20 4e ab	jsr $ab4e			jsr 	GXAdjustX
.cb45	ab45	ad 1e 07	lda $071e			lda 	GXAddSelect
.cb48	ab48	f0 03		beq $ab4d			beq 	_GXLAExit
.cb4a	ab4a	20 94 ab	jsr $ab94			jsr 	GXIncrementY
.cb4d	ab4d					_GXLAExit:
.cb4d	ab4d	60		rts				rts
.cb4e	ab4e					GXAdjustX:
.cb4e	ab4e	ad 1a 07	lda $071a			lda 	GXDXNegative
.cb51	ab51	10 25		bpl $ab78			bpl 	_GXAXRight
.cb53	ab53	ad 7a 06	lda $067a			lda 	GXX0
.cb56	ab56	d0 03		bne $ab5b			bne 	_GXAXNoBorrow
.cb58	ab58	ce 7b 06	dec $067b			dec 	GXX0+1
.cb5b	ab5b					_GXAXNoBorrow:
.cb5b	ab5b	ce 7a 06	dec $067a			dec 	GXX0
.cb5e	ab5e	ce 8c 06	dec $068c			dec 	gsOffset 					; pixel left
.cb61	ab61	ad 8c 06	lda $068c			lda 	gsOffset
.cb64	ab64	c9 ff		cmp #$ff			cmp 	#$FF
.cb66	ab66	d0 0f		bne $ab77			bne 	_GXAYExit 					; underflow
.cb68	ab68	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb6a	ab6a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb6c	ab6c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb6e	ab6e	b0 07		bcs $ab77			bcs 	_GXAYExit
.cb70	ab70	18		clc				clc
.cb71	ab71	69 20		adc #$20			adc 	#$20 						; fix up
.cb73	ab73	85 3d		sta $3d				sta 	gxzScreen+1
.cb75	ab75	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb77	ab77					_GXAYExit:
.cb77	ab77	60		rts				rts
.cb78	ab78					_GXAXRight:
.cb78	ab78	ee 7a 06	inc $067a			inc 	GXX0
.cb7b	ab7b	d0 03		bne $ab80			bne 	_GXAXNoCarry
.cb7d	ab7d	ee 7b 06	inc $067b			inc 	GXX0+1
.cb80	ab80					_GXAXNoCarry:
.cb80	ab80	ee 8c 06	inc $068c			inc 	gsOffset 					; pixel right
.cb83	ab83	d0 0e		bne $ab93			bne 	_GXAXExit 					; if not overflowed, exit.
.cb85	ab85	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb87	ab87	a5 3d		lda $3d				lda 	gxzScreen+1
.cb89	ab89	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb8b	ab8b	90 06		bcc $ab93			bcc 	_GXAXExit
.cb8d	ab8d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb8f	ab8f	85 3d		sta $3d				sta 	gxzScreen+1
.cb91	ab91	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb93	ab93					_GXAXExit:
.cb93	ab93	60		rts				rts
.cb94	ab94					GXIncrementY:
.cb94	ab94	ee 7c 06	inc $067c			inc 	GXY0
.cb97	ab97	20 10 b0	jsr $b010			jsr 	GXMovePositionDown
.cb9a	ab9a	60		rts				rts
.cb9b	ab9b					GXLineSetup:
.cb9b	ab9b	ad 80 06	lda $0680			lda 	GXY1
.cb9e	ab9e	38		sec				sec
.cb9f	ab9f	ed 7c 06	sbc $067c			sbc 	GXY0
.cba2	aba2	4a		lsr a				lsr 	a
.cba3	aba3	8d 18 07	sta $0718			sta 	GXDiffY
.cba6	aba6	9c 1a 07	stz $071a			stz 	GXDXNegative 				; clear -ve flag
.cba9	aba9	38		sec				sec
.cbaa	abaa	ad 7e 06	lda $067e			lda 	GXX1
.cbad	abad	ed 7a 06	sbc $067a			sbc 	GXX0
.cbb0	abb0	8d 17 07	sta $0717			sta 	GXDiffX
.cbb3	abb3	ad 7f 06	lda $067f			lda 	GXX1+1 						; calculate MSB
.cbb6	abb6	ed 7b 06	sbc $067b			sbc 	GXX0+1
.cbb9	abb9	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cbba	abba	6e 17 07	ror $0717			ror 	GXDiffX
.cbbd	abbd	0a		asl a				asl 	a
.cbbe	abbe	10 0c		bpl $abcc			bpl 	_GDXNotNegative
.cbc0	abc0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cbc2	abc2	38		sec				sec
.cbc3	abc3	ed 17 07	sbc $0717			sbc 	GXDiffX
.cbc6	abc6	8d 17 07	sta $0717			sta 	GXDiffX
.cbc9	abc9	ce 1a 07	dec $071a			dec 	GXDXNegative 				; -ve flag = $FF.
.cbcc	abcc					_GDXNotNegative:
.cbcc	abcc	9c 19 07	stz $0719			stz 	GXIsDiffYLarger 			; clear larger flag
.cbcf	abcf	ad 18 07	lda $0718			lda 	GXDiffY 					; set adjust and total.
.cbd2	abd2	8d 1c 07	sta $071c			sta 	GXAdjust
.cbd5	abd5	ad 17 07	lda $0717			lda 	GXDiffX
.cbd8	abd8	8d 1d 07	sta $071d			sta 	GXTotal
.cbdb	abdb	ad 18 07	lda $0718			lda 	GXDiffY 					; if dy > dx
.cbde	abde	cd 17 07	cmp $0717			cmp 	GXDiffX
.cbe1	abe1	90 0f		bcc $abf2			bcc 	_GDXNotLarger
.cbe3	abe3	ce 19 07	dec $0719			dec 	GXIsDiffYLarger 			; set the dy larger flag
.cbe6	abe6	ad 17 07	lda $0717			lda 	GXDiffX 					; set adjust and total other way round
.cbe9	abe9	8d 1c 07	sta $071c			sta 	GXAdjust
.cbec	abec	ad 18 07	lda $0718			lda 	GXDiffY
.cbef	abef	8d 1d 07	sta $071d			sta 	GXTotal
.cbf2	abf2					_GDXNotLarger:
.cbf2	abf2	ad 1d 07	lda $071d			lda 	GXTotal
.cbf5	abf5	4a		lsr a				lsr 	a
.cbf6	abf6	8d 1b 07	sta $071b			sta 	GXPosition
.cbf9	abf9	60		rts				rts
.0717						GXDiffX:
>0717								.fill 	1
.0718						GXDiffY:
>0718								.fill 	1
.0719						GXIsDiffYLarger:
>0719								.fill 	1
.071a						GXDXNegative:
>071a								.fill 	1
.071b						GXPosition:
>071b								.fill 	1
.071c						GXAdjust:
>071c								.fill 	1
.071d						GXTotal:
>071d								.fill 	1
.071e						GXAddSelect:
>071e								.fill 	1
.cbfa	abfa					GXSetColourMode:
.cbfa	abfa	a6 36		ldx $36				ldx 	gxzTemp0
.cbfc	abfc	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbff	abff	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cc01	ac01	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cc04	ac04	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cc06	ac06	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cc09	ac09	ae 88 06	ldx $0688			ldx 	gxColour
.cc0c	ac0c	8e 89 06	stx $0689			stx 	gxEORValue
.cc0f	ac0f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cc11	ac11	90 03		bcc $ac16			bcc 	_GXSDCNotAndColour
.cc13	ac13	8e 8a 06	stx $068a			stx 	gxANDValue
.cc16	ac16					_GXSDCNotAndColour:
.cc16	ac16	d0 03		bne $ac1b			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cc18	ac18	9c 89 06	stz $0689			stz 	gxEORValue
.cc1b	ac1b					_GXSDCNotAnd:
.cc1b	ac1b	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cc1c	ac1c	90 08		bcc $ac26			bcc 	_GXSDCNoFlip
.cc1e	ac1e	ad 8a 06	lda $068a			lda	 	gxANDValue
.cc21	ac21	49 ff		eor #$ff			eor 	#$FF
.cc23	ac23	8d 8a 06	sta $068a			sta 	gxANDValue
.cc26	ac26					_GXSDCNoFlip:
.cc26	ac26	18		clc				clc
.cc27	ac27	60		rts				rts
.cc28	ac28					GXPlotPoint:
.cc28	ac28	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc2b	ac2b	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc2e	ac2e	ac 8c 06	ldy $068c			ldy 	gsOffset
.cc31	ac31	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc33	ac33	2d 8a 06	and $068a			and 	gxANDValue
.cc36	ac36	4d 89 06	eor $0689			eor 	gxEORValue
.cc39	ac39	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc3b	ac3b	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc3e	ac3e	18		clc				clc
.cc3f	ac3f	60		rts				rts
.cc40	ac40					GXFillRectangle:
.cc40	ac40	38		sec				sec
.cc41	ac41	80 01		bra $ac44			bra 	GXRectangle
.cc43	ac43					GXFrameRectangle:
.cc43	ac43	18		clc				clc
.cc44	ac44					GXRectangle:
.cc44	ac44	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cc47	ac47	f0 35		beq $ac7e			beq 	_GXRFail
.cc49	ac49	08		php				php 								; save Fill flag (CS)
.cc4a	ac4a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; start drawing
.cc4d	ac4d	20 d2 b0	jsr $b0d2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc50	ac50	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.cc53	ac53	38		sec				sec 								; sec = Draw line
.cc54	ac54	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc57	ac57	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc5a	ac5a	cd 80 06	cmp $0680			cmp 	gxY1
.cc5d	ac5d	f0 19		beq $ac78			beq 	_GXRectangleExit
.cc5f	ac5f					_GXRectLoop:
.cc5f	ac5f	20 10 b0	jsr $b010			jsr 	GXMovePositionDown 			; down one.
.cc62	ac62	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc65	ac65	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc68	ac68	cd 80 06	cmp $0680			cmp 	gXY1
.cc6b	ac6b	f0 07		beq $ac74			beq 	_GXLastLine
.cc6d	ac6d	28		plp				plp 								; get flag back
.cc6e	ac6e	08		php				php
.cc6f	ac6f	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc72	ac72	80 eb		bra $ac5f			bra 	_GXRectLoop
.cc74	ac74					_GXLastLine:
.cc74	ac74	38		sec				sec
.cc75	ac75	20 80 ac	jsr $ac80			jsr 	GXDrawLineX1X0
.cc78	ac78					_GXRectangleExit:
.cc78	ac78	68		pla				pla 								; throw fill flag.
.cc79	ac79	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc7c	ac7c	18		clc				clc
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					_GXRFail:
.cc7e	ac7e	38		sec				sec
.cc7f	ac7f	60		rts				rts
.cc80	ac80					GXDrawLineX1X0:
.cc80	ac80	08		php				php 								; save solid/either-end
.cc81	ac81	38		sec				sec
.cc82	ac82	ad 7e 06	lda $067e			lda		gXX1
.cc85	ac85	ed 7a 06	sbc $067a			sbc 	gXX0
.cc88	ac88	85 36		sta $36				sta 	gxzTemp0
.cc8a	ac8a	ad 7f 06	lda $067f			lda 	gXX1+1
.cc8d	ac8d	ed 7b 06	sbc $067b			sbc 	gXX0+1
.cc90	ac90	85 37		sta $37				sta 	gxzTemp0+1
.cc92	ac92	28		plp				plp
.cc93	ac93					GXDrawLineTemp0:
.cc93	ac93	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.cc95	ac95	48		pha				pha
.cc96	ac96	a5 3d		lda $3d				lda 	gxzScreen+1
.cc98	ac98	48		pha				pha
.cc99	ac99	ad 8c 06	lda $068c			lda 	gsOffset
.cc9c	ac9c	48		pha				pha
.cc9d	ac9d	a5 0b		lda $0b				lda 	GXEditSlot
.cc9f	ac9f	48		pha				pha
.cca0	aca0	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y offset
.cca3	aca3	90 1e		bcc $acc3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cca5	aca5					_GXDLTLine:
.cca5	aca5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca7	aca7	2d 8a 06	and $068a			and 	gxANDValue
.ccaa	acaa	4d 89 06	eor $0689			eor 	gxEORValue
.ccad	acad	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccaf	acaf	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.ccb1	acb1	d0 04		bne $acb7			bne 	_GXDLTNoBorrow
.ccb3	acb3	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.ccb5	acb5	30 2e		bmi $ace5			bmi 	_GXDLTExit
.ccb7	acb7					_GXDLTNoBorrow:
.ccb7	acb7	c6 36		dec $36				dec 	gxzTemp0
.ccb9	acb9	c8		iny				iny 								; next slot.
.ccba	acba	d0 e9		bne $aca5			bne 	_GXDLTLine
.ccbc	acbc	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ccbe	acbe	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.ccc1	acc1	80 e2		bra $aca5			bra 	_GXDLTLine
.ccc3	acc3					_GXDLTEndPoints:
.ccc3	acc3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ccc5	acc5	2d 8a 06	and $068a			and 	gxANDValue
.ccc8	acc8	4d 89 06	eor $0689			eor 	gxEORValue
.cccb	accb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cccd	accd	98		tya				tya 								; advance to right side
.ccce	acce	18		clc				clc
.cccf	accf	65 36		adc $36				adc 	gxzTemp0
.ccd1	acd1	a8		tay				tay
.ccd2	acd2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccd4	acd4	65 37		adc $37				adc 	gxzTemp0+1
.ccd6	acd6	85 3d		sta $3d				sta 	gxzScreen+1
.ccd8	acd8	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap 			; fix up.
.ccdb	acdb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccdd	acdd	2d 8a 06	and $068a			and 	gxANDValue
.cce0	ace0	4d 89 06	eor $0689			eor 	gxEORValue
.cce3	ace3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cce5	ace5					_GXDLTExit:
.cce5	ace5	68		pla				pla
.cce6	ace6	85 0b		sta $0b				sta 	GXEditSlot
.cce8	ace8	68		pla				pla
.cce9	ace9	8d 8c 06	sta $068c			sta 	gsOffset
.ccec	acec	68		pla				pla
.cced	aced	85 3d		sta $3d				sta 	gxzScreen+1
.ccef	acef	68		pla				pla
.ccf0	acf0	85 3c		sta $3c				sta 	gxzScreen
.ccf2	acf2	60		rts				rts
.ccf3	acf3					GXDLTCheckWrap:
.ccf3	acf3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccf5	acf5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccf7	acf7	90 06		bcc $acff			bcc 	_GXDLTCWExit
.ccf9	acf9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccfb	acfb	85 3d		sta $3d				sta 	gxzScreen+1
.ccfd	acfd	e6 0b		inc $0b				inc 	GXEditSlot
.ccff	acff					_GXDLTCWExit:
.ccff	acff	60		rts				rts
.cd00	ad00					GXDrawGraphicElement:
.cd00	ad00	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.cd03	ad03	3a		dec a				dec 	a
.cd04	ad04	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.cd07	ad07	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.cd0a	ad0a	f0 67		beq $ad73			beq 	_GXSLFail
.cd0c	ad0c	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.cd0f	ad0f	48		pha				pha
.cd10	ad10	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.cd13	ad13	8e 21 07	stx $0721			stx 	gxAcquireVector
.cd16	ad16	20 aa af	jsr $afaa			jsr 	gxOpenBitmap 				; open the bitmap.
.cd19	ad19	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.cd1c	ad1c	4a		lsr a				lsr 	a
.cd1d	ad1d	4a		lsr a				lsr 	a
.cd1e	ad1e	4a		lsr a				lsr 	a
.cd1f	ad1f	29 07		and #$07			and		#7
.cd21	ad21	1a		inc a				inc 	a
.cd22	ad22	8d 23 07	sta $0723			sta 	gxScale
.cd25	ad25	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd27	ad27					_GXGELoop:
.cd27	ad27	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd29	ad29	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.cd2c	ad2c	10 06		bpl $ad34			bpl		_GXNoVFlip
.cd2e	ad2e	ad 20 07	lda $0720			lda 	gxMask
.cd31	ad31	38		sec				sec
.cd32	ad32	e5 38		sbc $38				sbc 	gxzTemp1
.cd34	ad34					_GXNoVFlip:
.cd34	ad34	aa		tax				tax 								; get the Xth line.
.cd35	ad35	20 75 ad	jsr $ad75			jsr 	_GXCallAcquire 				; get that data.
.cd38	ad38	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cd3b	ad3b	85 39		sta $39				sta 	gxzTemp1+1
.cd3d	ad3d					_GXGELoop2:
.cd3d	ad3d	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.cd40	ad40	cd 86 06	cmp $0686			cmp 	gxHeight
.cd43	ad43	b0 10		bcs $ad55			bcs 	_GXDGEExit
.cd45	ad45	20 78 ad	jsr $ad78			jsr 	GXRenderOneLine 			; render line
.cd48	ad48	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd4a	ad4a	d0 f1		bne $ad3d			bne 	_GXGELoop2
.cd4c	ad4c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd4e	ad4e	a5 38		lda $38				lda 	gxzTemp1
.cd50	ad50	cd 1f 07	cmp $071f			cmp 	gxSize
.cd53	ad53	d0 d2		bne $ad27			bne 	_GXGELoop
.cd55	ad55					_GXDGEExit:
.cd55	ad55	68		pla				pla 								; restore Y for next time
.cd56	ad56	8d 7c 06	sta $067c			sta 	gxY0
.cd59	ad59	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd5c	ad5c					_GXShiftLeft:
.cd5c	ad5c	18		clc				clc
.cd5d	ad5d	ad 1f 07	lda $071f			lda 	gxSize
.cd60	ad60	6d 7a 06	adc $067a			adc 	gxX0
.cd63	ad63	8d 7a 06	sta $067a			sta 	gxX0
.cd66	ad66	90 03		bcc $ad6b			bcc 	_GXSLNoCarry
.cd68	ad68	ee 7b 06	inc $067b			inc 	gxX0+1
.cd6b	ad6b					_GXSLNoCarry:
.cd6b	ad6b	ca		dex				dex
.cd6c	ad6c	d0 ee		bne $ad5c			bne 	_GXShiftLeft
.cd6e	ad6e	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cd71	ad71	18		clc				clc
.cd72	ad72	60		rts				rts
.cd73	ad73					_GXSLFail:
.cd73	ad73	38		sec				sec
.cd74	ad74	60		rts				rts
.cd75	ad75					_GXCallAcquire:
.cd75	ad75	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd78	ad78					GXRenderOneLine:
.cd78	ad78	20 ba af	jsr $afba			jsr 	GXPositionCalc 				; calculate position/offset.
.cd7b	ad7b	ac 8c 06	ldy $068c			ldy 	gsOffset 					; Y contains position.
.cd7e	ad7e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd80	ad80					_GXROLLoop1:
.cd80	ad80	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd83	ad83	85 3b		sta $3b				sta 	gxzTemp2+1
.cd85	ad85					_GXROLLoop2:
.cd85	ad85	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd87	ad87	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd8a	ad8a	50 06		bvc $ad92			bvc 	_GXNoHFlip
.cd8c	ad8c	ad 20 07	lda $0720			lda 	gxMask
.cd8f	ad8f	38		sec				sec
.cd90	ad90	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd92	ad92					_GXNoHFlip:
.cd92	ad92	aa		tax				tax 								; read from the pixel buffer
.cd93	ad93	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd96	ad96	d0 07		bne $ad9f			bne 	_GXDraw 					; draw if non zero
.cd98	ad98	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd9b	ad9b	29 04		and #$04			and 	#4
.cd9d	ad9d	f0 0a		beq $ada9			beq 	_GXZeroPixel
.cd9f	ad9f					_GXDraw:
.cd9f	ad9f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cda1	ada1	2d 8a 06	and $068a			and 	gxANDValue
.cda4	ada4	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cda7	ada7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cda9	ada9					_GXZeroPixel:
.cda9	ada9	c8		iny				iny 								; advance pointer
.cdaa	adaa	d0 05		bne $adb1			bne 	_GXNoShift
.cdac	adac	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cdae	adae	20 f3 ac	jsr $acf3			jsr 	GXDLTCheckWrap				; check for new page.
.cdb1	adb1					_GXNoShift:
.cdb1	adb1	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cdb3	adb3	d0 d0		bne $ad85			bne 	_GXROLLoop2
.cdb5	adb5	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cdb7	adb7	a5 3a		lda $3a				lda 	gxzTemp2
.cdb9	adb9	cd 1f 07	cmp $071f			cmp 	gxSize
.cdbc	adbc	d0 c2		bne $ad80			bne 	_GXROLLoop1
.cdbe	adbe	ee 7c 06	inc $067c			inc 	gxY0
.cdc1	adc1	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cdc2	adc2					GXFontHandler:
.cdc2	adc2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc4	adc4	4d 87 06	eor $0687			eor 	gxMode
.cdc7	adc7	8d 24 07	sta $0724			sta 	gxUseMode
.cdca	adca	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdcc	adcc	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdce	adce	26 37		rol $37				rol	 	gxzTemp0+1
.cdd0	add0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdd2	add2	26 37		rol $37				rol	 	gxzTemp0+1
.cdd4	add4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdd6	add6	26 37		rol $37				rol	 	gxzTemp0+1
.cdd8	add8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdda	adda	09 c0		ora #$c0			ora 	#$C0
.cddc	addc	85 37		sta $37				sta 	gxzTemp0+1
.cdde	adde	a9 08		lda #$08			lda 	#8 							; size 8x8
.cde0	ade0	a2 e8		ldx #$e8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cde2	ade2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cde4	ade4	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.cde7	ade7	60		rts				rts
.cde8	ade8					GXGetGraphicDataFont:
.cde8	ade8	8a		txa				txa 								; X->Y
.cde9	ade9	a8		tay				tay
.cdea	adea	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdec	adec	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdee	adee	85 01		sta $01				sta 	1
.cdf0	adf0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdf2	adf2	86 01		stx $01				stx 	1 							; put old value back.
.cdf4	adf4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdf6	adf6					_GXExpand:
.cdf6	adf6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdf9	adf9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdfa	adfa	90 08		bcc $ae04			bcc 	_GXNoPixel
.cdfc	adfc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdfd	adfd	ad 88 06	lda $0688			lda 	gxColour
.ce00	ae00	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.ce03	ae03	68		pla				pla
.ce04	ae04					_GXNoPixel:
.ce04	ae04	e8		inx				inx 								; do the whole byte.
.ce05	ae05	e0 08		cpx #$08			cpx 	#8
.ce07	ae07	d0 ed		bne $adf6			bne 	_GXExpand
.ce09	ae09	60		rts				rts
.ce0a	ae0a					GXSpriteHandler:
.ce0a	ae0a	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.ce0d	ae0d	f0 23		beq $ae32			beq 	_GXSHExit
.ce0f	ae0f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ce11	ae11	4d 87 06	eor $0687			eor 	gxMode
.ce14	ae14	8d 24 07	sta $0724			sta 	gxUseMode
.ce17	ae17	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ce19	ae19	da		phx				phx
.ce1a	ae1a	20 aa af	jsr $afaa			jsr 	GXOpenBitmap 				; can access sprite information
.ce1d	ae1d	68		pla				pla
.ce1e	ae1e	20 8b b0	jsr $b08b			jsr 	GXFindSprite 				; get the sprite address
.ce21	ae21	08		php				php
.ce22	ae22	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.ce25	ae25	28		plp				plp
.ce26	ae26	b0 0a		bcs $ae32			bcs		_GXSHExit 					; exit if find failed.
.ce28	ae28	ad 25 07	lda $0725			lda 	GXSizePixels 				; return size
.ce2b	ae2b	a2 33		ldx #$33			ldx 	#GXSpriteAcquire & $FF
.ce2d	ae2d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce2f	ae2f	20 00 ad	jsr $ad00			jsr 	GXDrawGraphicElement
.ce32	ae32					_GXSHExit:
.ce32	ae32	60		rts				rts
.ce33	ae33					GXSpriteAcquire:
.ce33	ae33	ad 85 06	lda $0685			lda 	GXSpritePage				; point to base page
.ce36	ae36	85 0b		sta $0b				sta 	GXEditSlot
.ce38	ae38	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.ce3a	ae3a	a9 00		lda #$00			lda 	#0
.ce3c	ae3c	ae 26 07	ldx $0726			ldx 	GXSizeBits
.ce3f	ae3f					_GXTimesRowNumber:
.ce3f	ae3f	18		clc				clc
.ce40	ae40	65 36		adc $36				adc 	zTemp0
.ce42	ae42	ca		dex				dex
.ce43	ae43	10 fa		bpl $ae3f			bpl 	_GXTimesRowNumber
.ce45	ae45	64 37		stz $37				stz 	gxzTemp0+1
.ce47	ae47	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce48	ae48	26 37		rol $37				rol 	gxzTemp0+1
.ce4a	ae4a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce4b	ae4b	26 37		rol $37				rol 	gxzTemp0+1
.ce4d	ae4d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce4e	ae4e	26 37		rol $37				rol 	gxzTemp0+1
.ce50	ae50	85 36		sta $36				sta 	gxzTemp0
.ce52	ae52	18		clc				clc 								; add base address.
.ce53	ae53	a5 36		lda $36				lda 	gxzTemp0
.ce55	ae55	6d 28 07	adc $0728			adc 	GXSpriteOffset
.ce58	ae58	85 36		sta $36				sta 	gxzTemp0
.ce5a	ae5a	a5 37		lda $37				lda 	gxzTemp0+1
.ce5c	ae5c	6d 29 07	adc $0729			adc 	GXSpriteOffset+1
.ce5f	ae5f					_GXSAFindPage:
.ce5f	ae5f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce61	ae61	90 06		bcc $ae69			bcc 	_GXSAFoundPage
.ce63	ae63	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce65	ae65	e6 0b		inc $0b				inc 	GXEditSlot
.ce67	ae67	80 f6		bra $ae5f			bra 	_GXSAFindPage
.ce69	ae69					_GXSAFoundPage:
.ce69	ae69	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce6b	ae6b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce6d	ae6d	a0 00		ldy #$00			ldy 	#0
.ce6f	ae6f					_GXSACopyLoop:
.ce6f	ae6f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce71	ae71	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce74	ae74	c8		iny				iny
.ce75	ae75	cc 25 07	cpy $0725			cpy 	GXSizePixels
.ce78	ae78	d0 f5		bne $ae6f			bne 	_GXSACopyLoop
.ce7a	ae7a	60		rts				rts
.ce7b	ae7b					GXSelect:
.ce7b	ae7b	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce7e	ae7e	f0 22		beq $aea2			beq 	_GXSFail
.ce80	ae80	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce82	ae82	c9 40		cmp #$40			cmp 	#64
.ce84	ae84	b0 1c		bcs $aea2			bcs 	_GXSFail
.ce86	ae86	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce89	ae89	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce8b	ae8b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce8d	ae8d	06 36		asl $36				asl 	gxzTemp0
.ce8f	ae8f	06 36		asl $36				asl 	gxzTemp0
.ce91	ae91	06 36		asl $36				asl 	gxzTemp0
.ce93	ae93	2a		rol a				rol 	a
.ce94	ae94	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce96	ae96	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce99	ae99	85 37		sta $37				sta 	gxzTemp0+1
.ce9b	ae9b	a5 36		lda $36				lda 	gxzTemp0
.ce9d	ae9d	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.cea0	aea0	18		clc				clc
.cea1	aea1	60		rts				rts
.cea2	aea2					_GXSFail:
.cea2	aea2	38		sec				sec
.cea3	aea3	60		rts				rts
.cea4	aea4					GXSelectImage:
.cea4	aea4	ad 82 06	lda $0682			lda 	gxSpritesOn
.cea7	aea7	f0 74		beq $af1d			beq 	_GXSIFail
.cea9	aea9	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceac	aeac	f0 6f		beq $af1d			beq 	_GXSIFail 					; (checking the MSB)
.ceae	aeae	64 01		stz $01				stz 	1
.ceb0	aeb0	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ceb2	aeb2	d0 6b		bne $af1f			bne 	_GXSIHide
.ceb4	aeb4	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ceb6	aeb6	48		pha				pha
.ceb7	aeb7	20 aa af	jsr $afaa			jsr 	GXOpenBitmap
.ceba	aeba	68		pla				pla
.cebb	aebb	20 8b b0	jsr $b08b			jsr 	GXFindSprite
.cebe	aebe	b0 5a		bcs $af1a			bcs 	_GXSICloseFail 				; no image
.cec0	aec0	a0 01		ldy #$01			ldy 	#1
.cec2	aec2	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cec5	aec5	85 36		sta $36				sta 	gxzTemp0
.cec7	aec7	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ceca	aeca	85 37		sta $37				sta 	gxzTemp0+1
.cecc	aecc	ad 28 07	lda $0728			lda 	GXSpriteOffset
.cecf	aecf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ced1	aed1	18		clc				clc
.ced2	aed2	ad 29 07	lda $0729			lda 	GXSpriteOffset+1
.ced5	aed5	6d 90 06	adc $0690			adc 	GXSpriteOffsetBase
.ced8	aed8	c8		iny				iny
.ced9	aed9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cedb	aedb	ad 91 06	lda $0691			lda 	GXSpriteOffsetBase+1
.cede	aede	69 00		adc #$00			adc 	#0
.cee0	aee0	c8		iny				iny
.cee1	aee1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cee3	aee3	ad 26 07	lda $0726			lda 	GXSizeBits 					; get raw size
.cee6	aee6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cee8	aee8	2a		rol a				rol 	a 							; x 2
.cee9	aee9	0a		asl a				asl 	a 							; x 4
.ceea	aeea	0a		asl a				asl 	a 							; x 8
.ceeb	aeeb	0a		asl a				asl 	a 							; x 16
.ceec	aeec	0d 27 07	ora $0727			ora 	GXSpriteLUT 				; Or with LUT
.ceef	aeef	0a		asl a				asl 	a 							; 1 shift
.cef0	aef0	09 01		ora #$01			ora 	#1 							; enable sprite.
.cef2	aef2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cef4	aef4	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cef7	aef7	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cefa	aefa	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.cefd	aefd	29 3f		and #$3f			and 	#$3F
.ceff	aeff	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf02	af02	ad 26 07	lda $0726			lda 	GXSizeBits 					; get bit size
.cf05	af05	6a		ror a				ror 	a 							; shift into bits 6/7
.cf06	af06	6a		ror a				ror 	a
.cf07	af07	6a		ror a				ror 	a
.cf08	af08	29 c0		and #$c0			and 	#$C0
.cf0a	af0a	1d d2 06	ora $06d2,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cf0d	af0d	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cf10	af10	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.cf13	af13	29 7f		and #$7f			and 	#$7F
.cf15	af15	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					_GXSICloseFail:
.cf1a	af1a	20 b2 af	jsr $afb2			jsr 	GXCloseBitmap
.cf1d	af1d					_GXSIFail:
.cf1d	af1d	38		sec				sec
.cf1e	af1e	60		rts				rts
.cf1f	af1f					_GXSIHide:
.cf1f	af1f	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf22	af22	85 36		sta $36				sta 	gxzTemp0
.cf24	af24	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.cf27	af27	85 37		sta $37				sta 	gxzTemp0+1
.cf29	af29	a9 00		lda #$00			lda 	#0
.cf2b	af2b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf2d	af2d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf30	af30	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.cf33	af33	09 80		ora #$80			ora 	#$80
.cf35	af35	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf38	af38	18		clc				clc
.cf39	af39	60		rts				rts
.cf3a	af3a					GXMoveSprite:
.cf3a	af3a	ad 82 06	lda $0682			lda 	gxSpritesOn
.cf3d	af3d	f0 65		beq $afa4			beq 	_GXSIFail
.cf3f	af3f	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf42	af42	f0 60		beq $afa4			beq 	_GXSIFail
.cf44	af44	85 37		sta $37				sta 	gxzTemp0+1
.cf46	af46	a0 04		ldy #$04			ldy 	#4
.cf48	af48	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cf4b	af4b	85 36		sta $36				sta 	gxzTemp0
.cf4d	af4d	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf50	af50	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf53	af53	2a		rol a				rol 	a	 						; into bits 0,1.
.cf54	af54	2a		rol a				rol 	a
.cf55	af55	2a		rol a				rol 	a
.cf56	af56	29 03		and #$03			and 	#3
.cf58	af58	aa		tax				tax
.cf59	af59	bd a6 af	lda $afa6,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf5c	af5c	48		pha				pha
.cf5d	af5d	18		clc				clc
.cf5e	af5e	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf61	af61	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf63	af63	c8		iny				iny
.cf64	af64	ad 7b 06	lda $067b			lda 	gxX0+1
.cf67	af67	69 00		adc #$00			adc 	#0
.cf69	af69	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf6b	af6b	c8		iny				iny
.cf6c	af6c	68		pla				pla
.cf6d	af6d	18		clc				clc
.cf6e	af6e	6d 7c 06	adc $067c			adc 	gxY0
.cf71	af71	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf73	af73	a9 00		lda #$00			lda 	#0
.cf75	af75	69 00		adc #$00			adc 	#0
.cf77	af77	c8		iny				iny
.cf78	af78	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf7a	af7a	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf7d	af7d	6e 7a 06	ror $067a			ror 	gxX0
.cf80	af80	4e 7a 06	lsr $067a			lsr 	gxX0
.cf83	af83	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf86	af86	4e 7c 06	lsr $067c			lsr 	gxY0
.cf89	af89	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf8c	af8c	bd 92 06	lda $0692,x			lda 	GXSpriteLow,x
.cf8f	af8f	29 80		and #$80			and 	#$80
.cf91	af91	0d 7a 06	ora $067a			ora 	gxX0
.cf94	af94	9d 92 06	sta $0692,x			sta 	GXSpriteLow,x
.cf97	af97	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.cf9a	af9a	29 c0		and #$c0			and 	#$C0
.cf9c	af9c	0d 7c 06	ora $067c			ora 	gxY0
.cf9f	af9f	9d d2 06	sta $06d2,x			sta 	GXSpriteHigh,x
.cfa2	afa2	18		clc				clc
.cfa3	afa3	60		rts				rts
.cfa4	afa4					_GXSIFail:
.cfa4	afa4	38		sec				sec
.cfa5	afa5	60		rts				rts
.cfa6	afa6					_GXMSOffset:
>cfa6	afa6	1c						.byte 	32-8/2
>cfa7	afa7	18						.byte 	32-16/2
>cfa8	afa8	14						.byte 	32-24/2
>cfa9	afa9	10						.byte 	32-32/2
.cfaa	afaa					GXOpenBitmap:
.cfaa	afaa	78		sei				sei 								; no interrupts here
.cfab	afab	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cfad	afad	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cfb0	afb0	58		cli				cli
.cfb1	afb1	60		rts				rts
.cfb2	afb2					GXCloseBitmap:
.cfb2	afb2	78		sei				sei
.cfb3	afb3	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cfb6	afb6	85 0b		sta $0b				sta 	GXEditSlot
.cfb8	afb8	58		cli				cli
.cfb9	afb9	60		rts				rts
.cfba	afba					GXPositionCalc:
.cfba	afba	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cfbc	afbc	48		pha				pha
.cfbd	afbd	ad 7c 06	lda $067c			lda 	GXY0 						; gxzScreen = Y0
.cfc0	afc0	85 3c		sta $3c				sta 	gxzScreen
.cfc2	afc2	64 3d		stz $3d				stz 	gxzScreen+1
.cfc4	afc4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfc6	afc6	26 3d		rol $3d				rol 	gxzScreen+1
.cfc8	afc8	06 3c		asl $3c				asl 	gxzScreen
.cfca	afca	26 3d		rol $3d				rol 	gxzScreen+1
.cfcc	afcc	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfcd	afcd	65 3c		adc $3c				adc 	gxzScreen
.cfcf	afcf	85 3c		sta $3c				sta 	gxzScreen
.cfd1	afd1	90 02		bcc $afd5			bcc 	_GXPCNoCarry
.cfd3	afd3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfd5	afd5					_GXPCNoCarry:
.cfd5	afd5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfd7	afd7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfd9	afd9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfdb	afdb	85 36		sta $36				sta 	gxzTemp0
.cfdd	afdd	64 3d		stz $3d				stz 	gxzScreen+1
.cfdf	afdf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfe1	afe1					_GXPCMultiply32:
.cfe1	afe1	06 3c		asl $3c				asl 	gxzScreen
.cfe3	afe3	26 3d		rol $3d				rol 	gxzScreen+1
.cfe5	afe5	3a		dec a				dec 	a
.cfe6	afe6	d0 f9		bne $afe1			bne 	_GXPCMultiply32
.cfe8	afe8	18		clc				clc
.cfe9	afe9	ad 7a 06	lda $067a			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.cfec	afec	65 3c		adc $3c				adc 	gxzScreen
.cfee	afee	8d 8c 06	sta $068c			sta 	gsOffset
.cff1	aff1	ad 7b 06	lda $067b			lda 	GXX0+1
.cff4	aff4	65 3d		adc $3d				adc 	gxzScreen+1
.cff6	aff6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cff8	aff8	90 04		bcc $affe			bcc 	_GXPCNoOverflow
.cffa	affa	29 1f		and #$1f			and 	#$1F 						; fix it up
.cffc	affc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cffe	affe					_GXPCNoOverflow:
.cffe	affe	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.d000	b000	85 3d		sta $3d				sta 	gxzScreen+1
.d002	b002	64 3c		stz $3c				stz 	gxzScreen
.d004	b004	18		clc				clc
.d005	b005	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.d007	b007	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.d00a	b00a	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.d00c	b00c	68		pla				pla
.d00d	b00d	85 36		sta $36				sta 	gxzTemp0
.d00f	b00f	60		rts				rts
.d010	b010					GXMovePositionDown:
.d010	b010	18		clc				clc 								; add 320 to offset/temp+1
.d011	b011	ad 8c 06	lda $068c			lda 	gsOffset
.d014	b014	69 40		adc #$40			adc 	#64
.d016	b016	8d 8c 06	sta $068c			sta 	gsOffset
.d019	b019	a5 3d		lda $3d				lda 	gxzScreen+1
.d01b	b01b	69 01		adc #$01			adc 	#1
.d01d	b01d	85 3d		sta $3d				sta 	gxzScreen+1
.d01f	b01f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d021	b021	90 07		bcc $b02a			bcc 	_GXMPDExit
.d023	b023	38		sec				sec  								; next page
.d024	b024	e9 20		sbc #$20			sbc 	#$20
.d026	b026	85 3d		sta $3d				sta 	gxzScreen+1
.d028	b028	e6 0b		inc $0b				inc 	GXEditSlot
.d02a	b02a					_GXMPDExit:
.d02a	b02a	60		rts				rts
.d02b	b02b					GXCollide:
.d02b	b02b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d02d	b02d	aa		tax				tax
.d02e	b02e	05 37		ora $37				ora 	gxzTemp0+1
.d030	b030	29 c0		and #$c0			and 	#$C0
.d032	b032	38		sec				sec
.d033	b033	d0 53		bne $b088			bne 	_GXCollideFail 				; if either >= 64, fail.
.d035	b035	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d037	b037	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.d03a	b03a	1d 92 06	ora $0692,x			ora 	GXSpriteLow,x
.d03d	b03d	30 48		bmi $b087			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d03f	b03f	18		clc				clc 								; need to calculate sum of sizes.
.d040	b040	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y
.d043	b043	7d d2 06	adc $06d2,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d046	b046	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d048	b048	6a		ror a				ror 	a 							; 5/6/7
.d049	b049	4a		lsr a				lsr 	a 							; 4/5/6
.d04a	b04a	4a		lsr a				lsr 	a 							; 3/4/5
.d04b	b04b	4a		lsr a				lsr 	a 							; 2/3/4
.d04c	b04c	18		clc				clc
.d04d	b04d	69 08		adc #$08			adc 	#$08
.d04f	b04f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d050	b050	4a		lsr a				lsr 	a
.d051	b051	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d053	b053	b9 d2 06	lda $06d2,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.d056	b056	29 3f		and #$3f			and 	#$3F
.d058	b058	85 39		sta $39				sta 	gxzTemp1+1
.d05a	b05a	38		sec				sec
.d05b	b05b	bd d2 06	lda $06d2,x			lda 	GXSpriteHigh,x
.d05e	b05e	29 3f		and #$3f			and 	#$3F
.d060	b060	e5 39		sbc $39				sbc 	gxzTemp1+1
.d062	b062	b0 03		bcs $b067			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d064	b064	49 ff		eor #$ff			eor 	#$FF
.d066	b066	1a		inc a				inc 	a
.d067	b067					_GXCAbs1:
.d067	b067	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d069	b069	b0 1c		bcs $b087			bcs 	_GXOkayFail
.d06b	b06b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d06d	b06d	38		sec				sec 								; calculate |x1-x0|
.d06e	b06e	b9 92 06	lda $0692,y			lda 	GXSpriteLow,y
.d071	b071	fd 92 06	sbc $0692,x			sbc 	GXSpriteLow,x
.d074	b074	b0 03		bcs $b079			bcs 	_GXCAbs2
.d076	b076	49 ff		eor #$ff			eor 	#$FF
.d078	b078	1a		inc a				inc 	a
.d079	b079					_GXCAbs2:
.d079	b079	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d07b	b07b	b0 0a		bcs $b087			bcs 	_GXOkayFail
.d07d	b07d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d07f	b07f	90 02		bcc $b083			bcc 	_GXCHaveLowest
.d081	b081	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d083	b083					_GXCHaveLowest:
.d083	b083	0a		asl a				asl 	a 							; scale to allow for >> 2
.d084	b084	0a		asl a				asl 	a
.d085	b085	18		clc				clc
.d086	b086	60		rts				rts
.d087	b087					_GXOkayFail:
.d087	b087	18		clc				clc
.d088	b088					_GXCollideFail:
.d088	b088	a9 ff		lda #$ff			lda 	#$FF
.d08a	b08a	60		rts				rts
.d08b	b08b					GXFindSprite:
.d08b	b08b	aa		tax				tax
.d08c	b08c	ad 85 06	lda $0685			lda 	GXSpritePage 				; access the base page of the sprite
.d08f	b08f	85 0b		sta $0b				sta 	GXEditSlot
.d091	b091	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d094	b094	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d097	b097	f0 33		beq $b0cc			beq 	_GXFSFail
.d099	b099	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d09c	b09c	8d 29 07	sta $0729			sta 	GXSpriteOffset+1
.d09f	b09f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d0a2	b0a2	48		pha				pha 								; save twice
.d0a3	b0a3	48		pha				pha
.d0a4	b0a4	29 03		and #$03			and 	#3 							; get sprite size
.d0a6	b0a6	8d 26 07	sta $0726			sta 	GXSizeBits 					; save raw (0-3)
.d0a9	b0a9	aa		tax				tax
.d0aa	b0aa	bd ce b0	lda $b0ce,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d0ad	b0ad	8d 25 07	sta $0725			sta 	GXSizePixels 					; save (8/16/24/32)
.d0b0	b0b0	68		pla				pla 								; get LUT
.d0b1	b0b1	4a		lsr a				lsr		a
.d0b2	b0b2	4a		lsr a				lsr		a
.d0b3	b0b3	29 03		and #$03			and 	#3
.d0b5	b0b5	8d 27 07	sta $0727			sta 	GXSpriteLUT
.d0b8	b0b8	68		pla				pla 								; address, neeeds to be x 4
.d0b9	b0b9	29 f0		and #$f0			and 	#$F0
.d0bb	b0bb	8d 28 07	sta $0728			sta 	GXSpriteOffset
.d0be	b0be	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c1	b0c1	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0c4	b0c4	0e 28 07	asl $0728			asl 	GXSpriteOffset
.d0c7	b0c7	2e 29 07	rol $0729			rol 	GXSpriteOffset+1
.d0ca	b0ca	18		clc				clc
.d0cb	b0cb	60		rts				rts
.d0cc	b0cc					_GXFSFail:
.d0cc	b0cc	38		sec				sec
.d0cd	b0cd	60		rts				rts
.d0ce	b0ce					_GXFXSSTTable:
>d0ce	b0ce	08 10 18 20					.byte 	8,16,24,32
.0725						GXSizePixels:
>0725								.fill 	1
.0726						GXSizeBits:
>0726								.fill 	1
.0727						GXSpriteLUT:
>0727								.fill 	1
.0728						GXSpriteOffset:
>0728								.fill 	2
.d0d2	b0d2					GXSortXY:
.d0d2	b0d2	20 f0 b0	jsr $b0f0			jsr 	GXSortY 					; will be sorted on Y now
.d0d5	b0d5	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d0d8	b0d8	cd 7e 06	cmp $067e			cmp 	gxX1
.d0db	b0db	ad 7b 06	lda $067b			lda 	gXX0+1
.d0de	b0de	ed 7f 06	sbc $067f			sbc 	gXX1+1
.d0e1	b0e1	90 0c		bcc $b0ef			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0e3	b0e3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0e5	b0e5	a0 04		ldy #$04			ldy 	#4
.d0e7	b0e7	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ea	b0ea	e8		inx				inx
.d0eb	b0eb	c8		iny				iny
.d0ec	b0ec	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ef	b0ef					_GXSXYExit:
.d0ef	b0ef	60		rts				rts
.d0f0	b0f0					GXSortY:
.d0f0	b0f0	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0f3	b0f3	cd 80 06	cmp $0680			cmp 	gxY1
.d0f6	b0f6	90 0b		bcc $b103			bcc 	_GXSYSorted
.d0f8	b0f8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0fa	b0fa	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0fc	b0fc					_GXSwap1:
.d0fc	b0fc	20 04 b1	jsr $b104			jsr 	GXSwapXY
.d0ff	b0ff	88		dey				dey
.d100	b100	ca		dex				dex
.d101	b101	10 f9		bpl $b0fc			bpl 	_GXSwap1
.d103	b103					_GXSYSorted:
.d103	b103	60		rts				rts
.d104	b104					GXSwapXY:
.d104	b104	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d107	b107	48		pha				pha
.d108	b108	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d10b	b10b	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d10e	b10e	68		pla				pla
.d10f	b10f	99 7a 06	sta $067a,y			sta 	gxX0,y
.d112	b112	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d113	b113					KeywordSet0:
>d113	b113	00 65					.text	0,$65,""               ; $80 !0:EOF
>d115	b115	00 58					.text	0,$58,""               ; $81 !1:SH1
>d117	b117	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d119	b119	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d11f	b11f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d127	b127	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d12d	b12d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d134	b134	05 41 44 45 45 4b 28			.text	5,$41,"DEEK("          ; $87 DEEK(
>d13b	b13b	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $88 EVENT(
>d143	b143	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $89 FALSE
>d14a	b14a	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $8a FRAC(
>d151	b151	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8b HIT(
>d157	b157	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>d15d	b15d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>d165	b165	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8e JOYB(
>d16c	b16c	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8f JOYX(
>d173	b173	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $90 JOYY(
>d17a	b17a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $91 LEFT$(
>d182	b182	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $92 LEN(
>d188	b188	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $93 MAX(
>d18e	b18e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $94 MID$(
>d195	b195	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $95 MIN(
>d19b	b19b	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $96 NOT(
>d1a1	b1a1	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $97 PEEK(
>d1a8	b1a8	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $98 PLAYING(
>d1b0	b1b0	47 28
>d1b2	b1b2	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $99 RANDOM(
>d1ba	b1ba	28
>d1bb	b1bb	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9a RIGHT$(
>d1c3	b1c3	28
>d1c4	b1c4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9b RND(
>d1ca	b1ca	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9c SGN(
>d1d0	b1d0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9d SPC(
>d1d6	b1d6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9e STR$(
>d1dd	b1dd	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9f TIMER(
>d1e5	b1e5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a0 TRUE
>d1eb	b1eb	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a1 VAL(
>d1f1	b1f1	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a2 FOR
>d1f6	b1f6	02 8f 49 46				.text	2,$8f,"IF"             ; $a3 IF
>d1fa	b1fa	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a4 PROC
>d200	b200	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a5 REPEAT
>d208	b208	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a6 WHILE
>d20f	b20f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a7 ENDIF
>d216	b216	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a8 ENDPROC
>d21e	b21e	43
>d21f	b21f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a9 NEXT
>d225	b225	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $aa THEN
>d22b	b22b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $ab UNTIL
>d232	b232	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $ac WEND
>d238	b238	02 9b 42 59				.text	2,$9b,"BY"             ; $ad BY
>d23c	b23c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ae CALL
>d242	b242	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $af CIRCLE
>d24a	b24a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b0 CLEAR
>d251	b251	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b1 CLS
>d256	b256	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b2 COLOR
>d25d	b25d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b3 COLOUR
>d265	b265	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b4 DATA
>d26b	b26b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b5 DIM
>d270	b270	04 23 44 4f 4b 45			.text	4,$23,"DOKE"           ; $b6 DOKE
>d276	b276	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b7 DOWNTO
>d27e	b27e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b8 ELSE
>d284	b284	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b9 FROM
>d28a	b28a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $ba GFX
>d28f	b28f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bb GOSUB
>d296	b296	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bc GOTO
>d29c	b29c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $bd HERE
>d2a2	b2a2	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $be IMAGE
>d2a9	b2a9	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $bf INPUT
>d2b0	b2b0	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c0 LET
>d2b5	b2b5	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c1 LINE
>d2bb	b2bb	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c2 LOCAL
>d2c2	b2c2	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c3 OFF
>d2c7	b2c7	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c4 ON
>d2cb	b2cb	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c5 OUTLINE
>d2d3	b2d3	45
>d2d4	b2d4	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c6 PALETTE
>d2dc	b2dc	45
>d2dd	b2dd	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c7 PLOT
>d2e3	b2e3	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $c8 POKE
>d2e9	b2e9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c9 PRINT
>d2f0	b2f0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ca READ
>d2f6	b2f6	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $cb RECT
>d2fc	b2fc	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $cc REM
>d301	b301	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $cd RETURN
>d309	b309	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $ce SOLID
>d310	b310	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $cf SOUND
>d317	b317	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d0 SPRITE
>d31f	b31f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d1 TEXT
>d325	b325	02 a3 54 4f				.text	2,$a3,"TO"             ; $d2 TO
>d329	b329	ff					.text	$FF
.d32a	b32a					KeywordSet1:
>d32a	b32a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d32c	b32c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d32e	b32e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d330	b330	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d338	b338	4c 45
>d33a	b33a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d342	b342	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d34a	b34a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d34f	b34f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d357	b357	45
>d358	b358	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d35c	b35c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d362	b362	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d368	b368	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d36d	b36d	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d373	b373	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d37b	b37b	45
>d37c	b37c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $8f SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $90 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $91 STOP
>d397	b397	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $92 XGO
>d39c	b39c	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $93 XLOAD
>d3a3	b3a3	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $94 ZAP
>d3a8	b3a8	ff					.text	$FF
.d3a9	b3a9					KeywordSet2:
>d3a9	b3a9	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3ab	b3ab	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3ad	b3ad	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3af	b3af	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3b4	b3b4	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3b9	b3b9	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3be	b3be	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3c3	b3c3	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3c8	b3c8	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3cd	b3cd	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3d2	b3d2	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3d7	b3d7	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3dc	b3dc	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3e1	b3e1	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3e6	b3e6	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3eb	b3eb	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3f0	b3f0	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3f5	b3f5	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d3fa	b3fa	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d3ff	b3ff	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d404	b404	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d409	b409	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d40e	b40e	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d413	b413	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d418	b418	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d41d	b41d	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d422	b422	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d427	b427	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d42c	b42c	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d431	b431	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d436	b436	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d43b	b43b	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d440	b440	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d445	b445	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d44a	b44a	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d44f	b44f	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d454	b454	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d459	b459	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d45e	b45e	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d463	b463	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d468	b468	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d46d	b46d	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d472	b472	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d477	b477	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d47c	b47c	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d481	b481	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d486	b486	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d48b	b48b	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d490	b490	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d495	b495	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d49a	b49a	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d49f	b49f	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4a4	b4a4	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4a9	b4a9	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ae	b4ae	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4b3	b4b3	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4b8	b4b8	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4bd	b4bd	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4c2	b4c2	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4c7	b4c7	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4cc	b4cc	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4d1	b4d1	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4d6	b4d6	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4db	b4db	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4e0	b4e0	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4e5	b4e5	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4ea	b4ea	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4ef	b4ef	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4f4	b4f4	ff					.text	$FF
.d4f5	b4f5					Export_TKListConvertLine:
.d4f5	b4f5	48		pha				pha 								; save indent on the stack
.d4f6	b4f6	9c 1d 04	stz $041d			stz 	tbOffset
.d4f9	b4f9	9c 2d 04	stz $042d			stz 	tokenBuffer
.d4fc	b4fc	9c 29 04	stz $0429			stz 	currentListColour
.d4ff	b4ff	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d501	b501	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d504	b504	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d506	b506	b1 30		lda ($30),y			lda 	(codePtr),y
.d508	b508	aa		tax				tax
.d509	b509	88		dey				dey
.d50a	b50a	b1 30		lda ($30),y			lda 	(codePtr),y
.d50c	b50c	20 ef b6	jsr $b6ef			jsr 	LCLWriteNumberXA
.d50f	b50f	68		pla				pla 								; adjustment to indent
.d510	b510	48		pha				pha 								; save on stack
.d511	b511	10 0c		bpl $b51f			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d513	b513	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d514	b514	6d 26 04	adc $0426			adc 	listIndent
.d517	b517	8d 26 04	sta $0426			sta 	listIndent
.d51a	b51a	10 03		bpl $b51f			bpl 	_LCNoAdjust
.d51c	b51c	9c 26 04	stz $0426			stz 	listIndent
.d51f	b51f					_LCNoAdjust:
.d51f	b51f	18		clc				clc		 							; work out actual indent.
.d520	b520	ad 26 04	lda $0426			lda 	listIndent
.d523	b523	0a		asl a				asl 	a
.d524	b524	69 07		adc #$07			adc 	#7
.d526	b526	85 36		sta $36				sta 	zTemp0
.d528	b528					_LCPadOut:
.d528	b528	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d52a	b52a	20 87 b6	jsr $b687			jsr 	LCLWrite
.d52d	b52d	ad 1d 04	lda $041d			lda 	tbOffset
.d530	b530	c5 36		cmp $36				cmp 	zTemp0
.d532	b532	d0 f4		bne $b528			bne 	_LCPadOut
.d534	b534	a0 03		ldy #$03			ldy 	#3 							; start position.
.d536	b536					_LCMainLoop:
.d536	b536	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d538	b538	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d53b	b53b	b1 30		lda ($30),y			lda 	(codePtr),y
.d53d	b53d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d53f	b53f	f0 17		beq $b558			beq 	_LCExit
.d541	b541	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d543	b543	90 1e		bcc $b563			bcc 	_LCDoubles
.d545	b545	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d547	b547	90 2a		bcc $b573			bcc 	_LCShiftPunc
.d549	b549	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d54b	b54b	90 35		bcc $b582			bcc 	_LCPunctuation
.d54d	b54d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d54f	b54f	90 51		bcc $b5a2			bcc 	_LCIdentifiers
.d551	b551	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d553	b553	90 73		bcc $b5c8			bcc 	_LCTokens
.d555	b555	4c 28 b6	jmp $b628			jmp 	_LCData 					; 254-5 are data objects
.d558	b558					_LCExit:
.d558	b558	68		pla				pla 								; get old indent adjust
.d559	b559	30 07		bmi $b562			bmi 	_LCExit2
.d55b	b55b	18		clc				clc 								; add to indent if +ve
.d55c	b55c	6d 26 04	adc $0426			adc 	listIndent
.d55f	b55f	8d 26 04	sta $0426			sta 	listIndent
.d562	b562					_LCExit2:
.d562	b562	60		rts				rts
.d563	b563					_LCDoubles:
.d563	b563	48		pha				pha
.d564	b564	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d565	b565	29 02		and #$02			and 	#2
.d567	b567	09 3c		ora #$3c			ora 	#60 						; make < >
.d569	b569	20 87 b6	jsr $b687			jsr 	LCLWrite
.d56c	b56c	68		pla				pla 								; restore, do lower bit
.d56d	b56d	29 03		and #$03			and 	#3
.d56f	b56f	09 3c		ora #$3c			ora 	#60
.d571	b571	80 0f		bra $b582			bra		_LCPunctuation 				; print, increment, loop
.d573	b573					_LCShiftPunc:
.d573	b573	aa		tax				tax 								; save in X
.d574	b574	29 07		and #$07			and 	#7 							; lower 3 bits
.d576	b576	f0 02		beq $b57a			beq 	_LCNoAdd
.d578	b578	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d57a	b57a					_LCNoAdd:
.d57a	b57a	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d57c	b57c	90 02		bcc $b580			bcc 	_LCNoAdd2
.d57e	b57e	09 20		ora #$20			ora 	#32 						; adds $20
.d580	b580					_LCNoAdd2:
.d580	b580	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d582	b582					_LCPunctuation:
.d582	b582	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d584	b584	d0 03		bne $b589			bne 	_LCPContinue
.d586	b586	20 9d b6	jsr $b69d			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d589	b589					_LCPContinue:
.d589	b589	c9 2e		cmp #$2e			cmp 	#'.'
.d58b	b58b	f0 08		beq $b595			beq 	_LCPIsConstant
.d58d	b58d	c9 30		cmp #$30			cmp 	#'0'
.d58f	b58f	90 0b		bcc $b59c			bcc 	_LCPNotConstant
.d591	b591	c9 3a		cmp #$3a			cmp 	#'9'+1
.d593	b593	b0 07		bcs $b59c			bcs 	_LCPNotConstant
.d595	b595					_LCPIsConstant:
.d595	b595	48		pha				pha
.d596	b596	a9 8a		lda #$8a			lda 	#CLIConstant+$80
.d598	b598	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d59b	b59b	68		pla				pla
.d59c	b59c					_LCPNotConstant:
.d59c	b59c	c8		iny				iny 								; consume character
.d59d	b59d	20 87 b6	jsr $b687			jsr 	LCLWrite 					; write it out.
.d5a0	b5a0	80 94		bra $b536			bra 	_LCMainLoop 				; go round again.
.d5a2	b5a2					_LCIdentifiers:
.d5a2	b5a2	18		clc				clc 								; convert to physical address
.d5a3	b5a3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5a5	b5a5	85 37		sta $37				sta 	zTemp0+1
.d5a7	b5a7	c8		iny				iny
.d5a8	b5a8	b1 30		lda ($30),y			lda 	(codePtr),y
.d5aa	b5aa	85 36		sta $36				sta 	zTemp0
.d5ac	b5ac	c8		iny				iny
.d5ad	b5ad	5a		phy				phy 								; save position
.d5ae	b5ae	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5b0	b5b0	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d5b3	b5b3	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5b5	b5b5					_LCOutIdentifier:
.d5b5	b5b5	c8		iny				iny
.d5b6	b5b6	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5b8	b5b8	29 7f		and #$7f			and 	#$7F
.d5ba	b5ba	20 d9 b6	jsr $b6d9			jsr 	LCLLowerCase
.d5bd	b5bd	20 87 b6	jsr $b687			jsr 	LCLWrite
.d5c0	b5c0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5c2	b5c2	10 f1		bpl $b5b5			bpl 	_LCOutIdentifier
.d5c4	b5c4	7a		ply				ply 								; restore position
.d5c5	b5c5	4c 36 b5	jmp $b536			jmp 	_LCMainLoop
.d5c8	b5c8					_LCTokens:
.d5c8	b5c8	aa		tax				tax 								; token in X
.d5c9	b5c9	a9 a9		lda #$a9			lda 	#((KeywordSet2) & $FF)
.d5cb	b5cb	85 36		sta $36				sta 	0+zTemp0
.d5cd	b5cd	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5cf	b5cf	85 37		sta $37				sta 	1+zTemp0
.d5d1	b5d1	e0 82		cpx #$82			cpx 	#$82
.d5d3	b5d3	f0 16		beq $b5eb			beq 	_LCUseShift
.d5d5	b5d5	a9 2a		lda #$2a			lda 	#((KeywordSet1) & $FF)
.d5d7	b5d7	85 36		sta $36				sta 	0+zTemp0
.d5d9	b5d9	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5db	b5db	85 37		sta $37				sta 	1+zTemp0
.d5dd	b5dd	e0 81		cpx #$81			cpx 	#$81
.d5df	b5df	f0 0a		beq $b5eb			beq 	_LCUseShift
.d5e1	b5e1	a9 13		lda #$13			lda 	#((KeywordSet0) & $FF)
.d5e3	b5e3	85 36		sta $36				sta 	0+zTemp0
.d5e5	b5e5	a9 b1		lda #$b1			lda 	#((KeywordSet0) >> 8)
.d5e7	b5e7	85 37		sta $37				sta 	1+zTemp0
.d5e9	b5e9	80 01		bra $b5ec			bra 	_LCNoShift
.d5eb	b5eb					_LCUseShift:
.d5eb	b5eb	c8		iny				iny
.d5ec	b5ec					_LCNoShift:
.d5ec	b5ec	20 b1 b6	jsr $b6b1			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5ef	b5ef	b1 30		lda ($30),y			lda 	(codePtr),y
.d5f1	b5f1	aa		tax				tax 								; into X
.d5f2	b5f2					_LCFindText:
.d5f2	b5f2	ca		dex				dex
.d5f3	b5f3	10 0e		bpl $b603			bpl 	_LCFoundText 				; found text.
.d5f5	b5f5	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5f7	b5f7	1a		inc a				inc 	a 							; one extra for size
.d5f8	b5f8	38		sec				sec 								; one extra for checksum
.d5f9	b5f9	65 36		adc $36				adc 	zTemp0 						; go to next token
.d5fb	b5fb	85 36		sta $36				sta 	zTemp0
.d5fd	b5fd	90 f3		bcc $b5f2			bcc 	_LCFindText
.d5ff	b5ff	e6 37		inc $37				inc 	zTemp0+1
.d601	b601	80 ef		bra $b5f2			bra 	_LCFindText
.d603	b603					_LCFoundText:
.d603	b603	5a		phy				phy 								; save List position
.d604	b604	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d606	b606	aa		tax				tax
.d607	b607	a9 86		lda #$86			lda 	#CLIToken+$80
.d609	b609	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d60c	b60c	a0 02		ldy #$02			ldy 	#2
.d60e	b60e					_LCCopyToken:
.d60e	b60e	b1 36		lda ($36),y			lda 	(zTemp0),y
.d610	b610	20 d9 b6	jsr $b6d9			jsr 	LCLLowerCase
.d613	b613	20 87 b6	jsr $b687			jsr 	LCLWrite
.d616	b616	c8		iny				iny
.d617	b617	ca		dex				dex
.d618	b618	d0 f4		bne $b60e			bne 	_LCCopyToken
.d61a	b61a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d61c	b61c	f0 05		beq $b623			beq 	_LCNoSpace
.d61e	b61e	a9 20		lda #$20			lda 	#' '
.d620	b620	20 87 b6	jsr $b687			jsr 	LCLWrite
.d623	b623					_LCNoSpace:
.d623	b623	7a		ply				ply 								; restore position.
.d624	b624	c8		iny				iny 								; consume token
.d625	b625	4c 36 b5	jmp $b536			jmp 	_LCMainLoop 				; and go around again.
.d628	b628					_LCData:
.d628	b628	48		pha				pha 								; save type $FE/$FF
.d629	b629	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d62b	b62b	c9 fe		cmp #$fe			cmp 	#$FE
.d62d	b62d	f0 22		beq $b651			beq 	_LCHaveOpener
.d62f	b62f	a2 22		ldx #$22			ldx 	#'"'
.d631	b631	a9 8f		lda #$8f			lda 	#CLIData+$80
.d633	b633	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d636	b636	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d638	b638	d0 17		bne $b651			bne 	_LCHaveOpener
.d63a	b63a	88		dey				dey 								; what precedes it ?
.d63b	b63b	b1 30		lda ($30),y			lda 	(codePtr),y
.d63d	b63d	c8		iny				iny
.d63e	b63e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d640	b640	d0 0f		bne $b651			bne 	_LCHaveOpener
.d642	b642	a9 09		lda #$09			lda 	#9 							; tab
.d644	b644	20 87 b6	jsr $b687			jsr 	LCLWrite
.d647	b647	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d649	b649	20 87 b6	jsr $b687			jsr 	LCLWrite
.d64c	b64c	a9 85		lda #$85			lda 	#CLIFComment+$80
.d64e	b64e	20 7e b6	jsr $b67e			jsr 	LCLWriteColour
.d651	b651					_LCHaveOpener:
.d651	b651	8a		txa				txa 								; output prefix (# or ")
.d652	b652	20 87 b6	jsr $b687			jsr 	LCLWrite
.d655	b655	c8		iny				iny 								; get count
.d656	b656	b1 30		lda ($30),y			lda 	(codePtr),y
.d658	b658	aa		tax				tax
.d659	b659	c8		iny				iny 								; point at first character
.d65a	b65a					_LCOutData:
.d65a	b65a	b1 30		lda ($30),y			lda 	(codePtr),y
.d65c	b65c	c9 00		cmp #$00			cmp 	#0
.d65e	b65e	f0 03		beq $b663			beq 	_LCNoPrint
.d660	b660	20 87 b6	jsr $b687			jsr 	LCLWrite
.d663	b663					_LCNoPrint:
.d663	b663	c8		iny				iny
.d664	b664	ca		dex				dex
.d665	b665	d0 f3		bne $b65a			bne 	_LCOutData
.d667	b667	68		pla				pla 								; closing " required ?
.d668	b668	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d66a	b66a	d0 0f		bne $b67b			bne 	_LCNoQuote
.d66c	b66c	a9 22		lda #$22			lda 	#'"'
.d66e	b66e	20 87 b6	jsr $b687			jsr 	LCLWrite
.d671	b671	ad 6f 06	lda $066f			lda 	EXTTextColour
.d674	b674	29 0f		and #$0f			and 	#$0F
.d676	b676	09 90		ora #$90			ora 	#$90
.d678	b678	20 87 b6	jsr $b687			jsr 	LCLWrite
.d67b	b67b					_LCNoQuote:
.d67b	b67b	4c 36 b5	jmp $b536			jmp 	_LCMainLoop
.d67e	b67e					LCLWriteColour:
.d67e	b67e	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d681	b681	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d684	b684	d0 01		bne $b687			bne 	LCLWrite 					; if different, output it
.d686	b686	60		rts				rts
.d687	b687					LCLWrite:
.d687	b687	da		phx				phx
.d688	b688	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d68b	b68b	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d68e	b68e	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d691	b691	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d694	b694	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d696	b696	30 03		bmi $b69b			bmi 	_LCLNoColour
.d698	b698	8d 27 04	sta $0427			sta 	LCLastCharacter
.d69b	b69b					_LCLNoColour:
.d69b	b69b	fa		plx				plx
.d69c	b69c	60		rts				rts
.d69d	b69d					LCLDeleteLastSpace:
.d69d	b69d	48		pha				pha
.d69e	b69e	da		phx				phx
.d69f	b69f	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6a2	b6a2	f0 0a		beq $b6ae			beq 	_LCDLSExit
.d6a4	b6a4	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6a7	b6a7	c9 20		cmp #$20			cmp 	#' '
.d6a9	b6a9	d0 03		bne $b6ae			bne 	_LCDLSExit
.d6ab	b6ab	ce 1d 04	dec $041d			dec 	tbOffset
.d6ae	b6ae					_LCDLSExit:
.d6ae	b6ae	fa		plx				plx
.d6af	b6af	68		pla				pla
.d6b0	b6b0	60		rts				rts
.d6b1	b6b1					LCLCheckSpaceRequired:
.d6b1	b6b1	ad 27 04	lda $0427			lda 	LCLastCharacter 			; check last character
.d6b4	b6b4	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6b6	b6b6	f0 1b		beq $b6d3			beq 	_LCCSRSpace
.d6b8	b6b8	c9 29		cmp #$29			cmp 	#')'
.d6ba	b6ba	f0 17		beq $b6d3			beq 	_LCCSRSpace
.d6bc	b6bc	c9 23		cmp #$23			cmp 	#'#'
.d6be	b6be	f0 13		beq $b6d3			beq 	_LCCSRSpace
.d6c0	b6c0	20 d9 b6	jsr $b6d9			jsr 	LCLLowerCase 				; saves a little effort
.d6c3	b6c3	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6c5	b6c5	90 11		bcc $b6d8			bcc 	_LCCSRExit
.d6c7	b6c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6c9	b6c9	90 08		bcc $b6d3			bcc 	_LCCSRSpace
.d6cb	b6cb	c9 61		cmp #$61			cmp 	#"a"
.d6cd	b6cd	90 09		bcc $b6d8			bcc 	_LCCSRExit
.d6cf	b6cf	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6d1	b6d1	b0 05		bcs $b6d8			bcs 	_LCCSRExit
.d6d3	b6d3					_LCCSRSpace:
.d6d3	b6d3	a9 20		lda #$20			lda 	#' '
.d6d5	b6d5	20 87 b6	jsr $b687			jsr 	LCLWrite
.d6d8	b6d8					_LCCSRExit:
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLLowerCase:
.d6d9	b6d9	c9 41		cmp #$41			cmp 	#"A"
.d6db	b6db	90 06		bcc $b6e3			bcc 	_LCLLCOut
.d6dd	b6dd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6df	b6df	b0 02		bcs $b6e3			bcs 	_LCLLCOut
.d6e1	b6e1	69 20		adc #$20			adc 	#$20
.d6e3	b6e3					_LCLLCOut:
.d6e3	b6e3	60		rts				rts
.d6e4	b6e4					LCLUpperCase:
.d6e4	b6e4	c9 61		cmp #$61			cmp 	#"a"
.d6e6	b6e6	90 06		bcc $b6ee			bcc 	_LCLUCOut
.d6e8	b6e8	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6ea	b6ea	b0 02		bcs $b6ee			bcs 	_LCLUCOut
.d6ec	b6ec	e9 1f		sbc #$1f			sbc 	#$1F
.d6ee	b6ee					_LCLUCOut:
.d6ee	b6ee	60		rts				rts
.d6ef	b6ef					LCLWriteNumberXA:
.d6ef	b6ef	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6f1	b6f1					_LCLWNLoop1:
.d6f1	b6f1	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6f3	b6f3					_LCLWNLoop2:
.d6f3	b6f3	48		pha				pha 								; save initial LSB
.d6f4	b6f4	38		sec				sec
.d6f5	b6f5	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6f7	b6f7	f9 28 b7	sbc $b728,y			sbc 	_LCLWNTable,y
.d6fa	b6fa	48		pha				pha
.d6fb	b6fb	8a		txa				txa
.d6fc	b6fc	f9 29 b7	sbc $b729,y			sbc 	_LCLWNTable+1,y
.d6ff	b6ff	90 07		bcc $b708			bcc 	_LCLWNUnderflow
.d701	b701	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d703	b703	aa		tax				tax 								; update X
.d704	b704	68		pla				pla 								; restore A
.d705	b705	7a		ply				ply 								; throw original
.d706	b706	80 eb		bra $b6f3			bra 	_LCLWNLoop2 				; try again.
.d708	b708					_LCLWNUnderflow:
.d708	b708	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d70a	b70a	d0 06		bne $b712			bne 	_LCLWNOut
.d70c	b70c	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d70f	b70f	3a		dec a				dec 	a
.d710	b710	f0 04		beq $b716			beq 	_LCLWNNext
.d712	b712					_LCLWNOut:
.d712	b712	98		tya				tya
.d713	b713	20 22 b7	jsr $b722			jsr 	_LCLWNOutDigit
.d716	b716					_LCLWNNext:
.d716	b716	7a		ply				ply 							 	; restore original value.
.d717	b717	68		pla				pla
.d718	b718	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d71a	b71a	c8		iny				iny
.d71b	b71b	c8		iny				iny
.d71c	b71c	84 37		sty $37				sty 	zTemp0+1
.d71e	b71e	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d720	b720	d0 cf		bne $b6f1			bne 	_LCLWNLoop1
.d722	b722					_LCLWNOutDigit:
.d722	b722	09 30		ora #$30			ora 	#'0'
.d724	b724	20 87 b6	jsr $b687			jsr 	LCLWrite
.d727	b727	60		rts				rts
.d728	b728					_LCLWNTable:
>d728	b728	10 27						.word 	10000
>d72a	b72a	e8 03						.word 	1000
>d72c	b72c	64 00						.word 	100
>d72e	b72e	0a 00						.word 	10
.d730	b730					TOKSearchTable:
.d730	b730	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d732	b732	85 36		sta $36				sta 	zTemp0
.d734	b734	a0 00		ldy #$00			ldy 	#0
.d736	b736	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d738	b738	85 38		sta $38				sta 	zTemp1
.d73a	b73a					_TSTLoop:
.d73a	b73a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d73c	b73c	30 49		bmi $b787			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d73e	b73e	f0 2e		beq $b76e			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d740	b740	c8		iny				iny 								; get the hash
.d741	b741	b1 36		lda ($36),y			lda 	(zTemp0),y
.d743	b743	88		dey				dey
.d744	b744	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d747	b747	d0 25		bne $b76e			bne 	_TSTNext
.d749	b749	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d74c	b74c	38		sec				sec
.d74d	b74d	ed 00 04	sbc $0400			sbc 	identStart
.d750	b750	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d752	b752	d0 1a		bne $b76e			bne 	_TSTNext
.d754	b754	5a		phy				phy 								; save Y , we might fail to match.
.d755	b755	c8		iny				iny 								; point to text
.d756	b756	c8		iny				iny
.d757	b757	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d75a	b75a					_TSTCompareName:
.d75a	b75a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d75d	b75d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d75f	b75f	d0 0c		bne $b76d			bne 	_TSTNextPullY 				; fail, pullY and do next
.d761	b761	e8		inx				inx
.d762	b762	c8		iny				iny
.d763	b763	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d766	b766	d0 f2		bne $b75a			bne 	_TSTCompareName
.d768	b768	7a		ply				ply 								; throw Y
.d769	b769	a5 38		lda $38				lda 	zTemp1 						; get token #
.d76b	b76b	38		sec				sec 								; return with CS = passed.
.d76c	b76c	60		rts				rts
.d76d	b76d					_TSTNextPullY:
.d76d	b76d	7a		ply				ply 								; restore current, fall through.
.d76e	b76e					_TSTNext:
.d76e	b76e	e6 38		inc $38				inc 	zTemp1 						; token counter
.d770	b770	98		tya				tya
.d771	b771	18		clc				clc
.d772	b772	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d774	b774	1a		inc a				inc 	a 							; +1
.d775	b775	1a		inc a				inc 	a 							; +2
.d776	b776	a8		tay				tay
.d777	b777	10 c1		bpl $b73a			bpl 	_TSTLoop 					; if Y < $80 loop back
.d779	b779	98		tya				tya 								; add Y to zTemp0 and reset Y
.d77a	b77a	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d77c	b77c	18		clc				clc  								; but have tables > 255 bytes
.d77d	b77d	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d77f	b77f	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d781	b781	90 b7		bcc $b73a			bcc 	_TSTLoop
.d783	b783	e6 37		inc $37				inc 	zTemp0+1
.d785	b785	80 b3		bra $b73a			bra 	_TSTLoop
.d787	b787					_TSTFail:
.d787	b787	18		clc				clc
.d788	b788	60		rts				rts
.d789	b789					Export_TKTokeniseLine:
.d789	b789	20 11 b9	jsr $b911			jsr 	LCLFixLineBufferCase 		; fix line case
.d78c	b78c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d78e	b78e	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d791	b791	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d794	b794	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d797	b797	a2 ff		ldx #$ff			ldx 	#$FF
.d799	b799					_TKFindFirst:
.d799	b799	e8		inx				inx
.d79a	b79a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d79d	b79d	f0 79		beq $b818			beq 	_TKExit
.d79f	b79f	c9 20		cmp #$20			cmp 	#' '
.d7a1	b7a1	90 f6		bcc $b799			bcc 	_TKFindFirst
.d7a3	b7a3	c9 30		cmp #$30			cmp 	#'0'
.d7a5	b7a5	90 07		bcc $b7ae			bcc 	_TKNoLineNumber
.d7a7	b7a7	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7a9	b7a9	b0 03		bcs $b7ae			bcs 	_TKNoLineNumber
.d7ab	b7ab	20 3b b9	jsr $b93b			jsr 	TOKExtractLineNumber
.d7ae	b7ae					_TKNoLineNumber:
.d7ae	b7ae					_TKTokeniseLoop:
.d7ae	b7ae	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7b1	b7b1	f0 65		beq $b818			beq 	_TKExit
.d7b3	b7b3	e8		inx				inx
.d7b4	b7b4	c9 20		cmp #$20			cmp 	#' '
.d7b6	b7b6	f0 f6		beq $b7ae			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7b8	b7b8	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7b9	b7b9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7bb	b7bb	f0 61		beq $b81e			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7bd	b7bd	c9 41		cmp #$41			cmp 	#'A'
.d7bf	b7bf	90 04		bcc $b7c5			bcc 	_TKTokenisePunctuation
.d7c1	b7c1	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7c3	b7c3	90 59		bcc $b81e			bcc 	_TKTokeniseIdentifier
.d7c5	b7c5					_TKTokenisePunctuation:
.d7c5	b7c5	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7c7	b7c7	f0 27		beq $b7f0			beq 	_TKString
.d7c9	b7c9	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7cb	b7cb	f0 28		beq $b7f5			beq 	_TKHexConstant
.d7cd	b7cd	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7cf	b7cf	f0 29		beq $b7fa			beq 	_TKCheckDouble
.d7d1	b7d1	c9 3e		cmp #$3e			cmp 	#'>'
.d7d3	b7d3	f0 25		beq $b7fa			beq 	_TKCheckDouble
.d7d5	b7d5					_TKStandardPunctuation:
.d7d5	b7d5	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7d8	b7d8	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7da	b7da	90 0e		bcc $b7ea			bcc 	_TKNoShift
.d7dc	b7dc	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7dd	b7dd	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7df	b7df	85 36		sta $36				sta 	zTemp0
.d7e1	b7e1	68		pla				pla
.d7e2	b7e2	29 20		and #$20			and 	#32 						; bit 5
.d7e4	b7e4	4a		lsr a				lsr 	a 							; shift into bit 3
.d7e5	b7e5	4a		lsr a				lsr 	a
.d7e6	b7e6	05 36		ora $36				ora 	zTemp0
.d7e8	b7e8	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7ea	b7ea					_TKNoShift:
.d7ea	b7ea	20 80 b9	jsr $b980			jsr 	TOKWriteByte 				; write the punctuation character
.d7ed	b7ed	e8		inx				inx 								; consume the character
.d7ee	b7ee	80 be		bra $b7ae			bra 	_TKTokeniseLoop 			; and loop round again.
.d7f0	b7f0					_TKString:
.d7f0	b7f0	20 a0 b8	jsr $b8a0			jsr 	TOKTokenString
.d7f3	b7f3	80 b9		bra $b7ae			bra 	_TKTokeniseLoop
.d7f5	b7f5					_TKHexConstant:
.d7f5	b7f5	20 db b8	jsr $b8db			jsr 	TOKHexConstant
.d7f8	b7f8	80 b4		bra $b7ae			bra 	_TKTokeniseLoop
.d7fa	b7fa					_TKCheckDouble:
.d7fa	b7fa	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d7fd	b7fd	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d7ff	b7ff	90 d4		bcc $b7d5			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d801	b801	c9 3f		cmp #$3f			cmp 	#'>'+1
.d803	b803	b0 d0		bcs $b7d5			bcs 	_TKStandardPunctuation
.d805	b805	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d808	b808	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d80a	b80a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d80b	b80b	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d80e	b80e	38		sec				sec
.d80f	b80f	e9 3c		sbc #$3c			sbc 	#'<'
.d811	b811	20 80 b9	jsr $b980			jsr 	TOKWriteByte 				; this is in the range 0-7
.d814	b814	e8		inx				inx 								; consume both
.d815	b815	e8		inx				inx
.d816	b816	80 96		bra $b7ae			bra 	_TKTokeniseLoop
.d818	b818	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d81a	b81a	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d81d	b81d	60		rts				rts
.d81e	b81e					_TKTokeniseIdentifier:
.d81e	b81e	8e 00 04	stx $0400			stx 	identStart 					; save start
.d821	b821	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d824	b824					_TKCheckLoop:
.d824	b824	e8		inx				inx 								; look at next, we know first is identifier already.
.d825	b825	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d828	b828	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d82a	b82a	f0 f8		beq $b824			beq 	_TKCheckLoop
.d82c	b82c	c9 30		cmp #$30			cmp	 	#"0"
.d82e	b82e	90 0c		bcc $b83c			bcc 	_TKEndIdentifier
.d830	b830	c9 3a		cmp #$3a			cmp 	#"9"+1
.d832	b832	90 f0		bcc $b824			bcc 	_TKCheckLoop
.d834	b834	c9 41		cmp #$41			cmp	 	#"A"
.d836	b836	90 04		bcc $b83c			bcc 	_TKEndIdentifier
.d838	b838	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d83a	b83a	90 e8		bcc $b824			bcc 	_TKCheckLoop
.d83c	b83c					_TKEndIdentifier:
.d83c	b83c	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d83f	b83f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d841	b841	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d843	b843	f0 06		beq $b84b			beq 	_TKHasTypeCharacter
.d845	b845	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d847	b847	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d849	b849	d0 07		bne $b852			bne 	_TKNoTypeCharacter
.d84b	b84b					_TKHasTypeCharacter:
.d84b	b84b	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d84e	b84e	e8		inx				inx 								; consume the type character
.d84f	b84f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d852	b852					_TKNoTypeCharacter:
.d852	b852	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d854	b854	d0 09		bne $b85f			bne 	_TKNoArray
.d856	b856	e8		inx				inx 								; skip the (
.d857	b857	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d85a	b85a	09 04		ora #$04			ora 	#$04
.d85c	b85c	8d 04 04	sta $0404			sta 	identTypeByte
.d85f	b85f					_TKNoArray:
.d85f	b85f	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d862	b862	20 fc b8	jsr $b8fc			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d865	b865	a0 b1		ldy #$b1			ldy 	#(KeywordSet0) >> 8
.d867	b867	a9 13		lda #$13			lda 	#(KeywordSet0) & $FF
.d869	b869	20 30 b7	jsr $b730			jsr 	TOKSearchTable
.d86c	b86c	a2 00		ldx #$00			ldx 	#0
.d86e	b86e	b0 1f		bcs $b88f			bcs 	_TKFoundToken
.d870	b870	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d872	b872	a9 2a		lda #$2a			lda 	#(KeywordSet1) & $FF
.d874	b874	20 30 b7	jsr $b730			jsr 	TOKSearchTable
.d877	b877	a2 81		ldx #$81			ldx 	#$81
.d879	b879	b0 14		bcs $b88f			bcs 	_TKFoundToken
.d87b	b87b	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d87d	b87d	a9 a9		lda #$a9			lda 	#(KeywordSet2) & $FF
.d87f	b87f	20 30 b7	jsr $b730			jsr 	TOKSearchTable
.d882	b882	a2 82		ldx #$82			ldx 	#$82
.d884	b884	b0 09		bcs $b88f			bcs 	_TKFoundToken
.d886	b886	20 8c b9	jsr $b98c			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d889	b889	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d88c	b88c	4c ae b7	jmp $b7ae			jmp 	_TKTokeniseLoop 			; and go round again.
.d88f	b88f					_TKFoundToken:
.d88f	b88f	48		pha				pha 								; save token
.d890	b890	8a		txa				txa 								; shift in X, is there one ?
.d891	b891	f0 03		beq $b896			beq 	_TKNoTShift
.d893	b893	20 80 b9	jsr $b980			jsr 	TOKWriteByte 				; if so, write it out
.d896	b896					_TKNoTShift:
.d896	b896	68		pla				pla 								; restore and write token
.d897	b897	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d89a	b89a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d89d	b89d	4c ae b7	jmp $b7ae			jmp 	_TKTokeniseLoop 			; and go round again.
.d8a0	b8a0					TOKTokenString:
.d8a0	b8a0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8a2	b8a2	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d8a5	b8a5	e8		inx				inx									; start of quoted string.
.d8a6	b8a6	da		phx				phx 								; push start of string on top
.d8a7	b8a7	ca		dex				dex 								; because we pre-increment
.d8a8	b8a8					_TSFindEnd:
.d8a8	b8a8	e8		inx				inx
.d8a9	b8a9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8ac	b8ac	f0 04		beq $b8b2			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8ae	b8ae	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8b0	b8b0	d0 f6		bne $b8a8			bne 	_TSFindEnd
.d8b2	b8b2					_TSEndOfString:
.d8b2	b8b2	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8b3	b8b3	48		pha				pha 								; save terminating character
.d8b4	b8b4	20 bc b8	jsr $b8bc			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d8b7	b8b7	68		pla				pla 								; terminating character
.d8b8	b8b8	f0 01		beq $b8bb			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d8ba	b8ba	e8		inx				inx
.d8bb	b8bb					_TSNotQuote:
.d8bb	b8bb	60		rts				rts
.d8bc	b8bc					TOKWriteBlockXY:
.d8bc	b8bc	86 36		stx $36				stx 	zTemp0 						; save end character
.d8be	b8be	98		tya				tya 								; use 2's complement to work out the byte size
.d8bf	b8bf	49 ff		eor #$ff			eor 	#$FF
.d8c1	b8c1	38		sec				sec
.d8c2	b8c2	65 36		adc $36				adc 	zTemp0
.d8c4	b8c4	1a		inc a				inc 	a 							; one extra for NULL
.d8c5	b8c5	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d8c8	b8c8					_TOBlockLoop:
.d8c8	b8c8	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d8ca	b8ca	f0 09		beq $b8d5			beq 	_TOBlockExit
.d8cc	b8cc	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d8cf	b8cf	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d8d2	b8d2	c8		iny				iny
.d8d3	b8d3	80 f3		bra $b8c8			bra 	_TOBlockLoop
.d8d5	b8d5					_TOBlockExit:
.d8d5	b8d5	a9 00		lda #$00			lda 	#0 							; add NULL.
.d8d7	b8d7	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d8da	b8da	60		rts				rts
.d8db	b8db					TOKHexConstant:
.d8db	b8db	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d8dd	b8dd	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.d8e0	b8e0	e8		inx				inx									; start of quoted string.
.d8e1	b8e1	da		phx				phx 								; push start of constant on top
.d8e2	b8e2	ca		dex				dex
.d8e3	b8e3					_THFindLoop:
.d8e3	b8e3	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d8e4	b8e4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d8e7	b8e7	c9 30		cmp #$30			cmp 	#"0"
.d8e9	b8e9	90 0c		bcc $b8f7			bcc 	_THFoundEnd
.d8eb	b8eb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8ed	b8ed	90 f4		bcc $b8e3			bcc 	_THFindLoop
.d8ef	b8ef	c9 41		cmp #$41			cmp 	#"A"
.d8f1	b8f1	90 04		bcc $b8f7			bcc 	_THFoundEnd
.d8f3	b8f3	c9 47		cmp #$47			cmp 	#"F"+1
.d8f5	b8f5	90 ec		bcc $b8e3			bcc 	_THFindLoop
.d8f7	b8f7					_THFoundEnd:
.d8f7	b8f7	7a		ply				ply 								; restore start
.d8f8	b8f8	20 bc b8	jsr $b8bc			jsr 	TOKWriteBlockXY 			; output the block
.d8fb	b8fb	60		rts				rts
.d8fc	b8fc					TOKCalculateHash:
.d8fc	b8fc	da		phx				phx
.d8fd	b8fd	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d900	b900	a9 00		lda #$00			lda 	#0
.d902	b902					_TCHLoop:
.d902	b902	18		clc				clc
.d903	b903	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d906	b906	e8		inx				inx
.d907	b907	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d90a	b90a	d0 f6		bne $b902			bne 	_TCHLoop
.d90c	b90c	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d90f	b90f	fa		plx				plx
.d910	b910	60		rts				rts
.d911	b911					LCLFixLineBufferCase:
.d911	b911	a2 00		ldx #$00			ldx 	#0
.d913	b913					_FLBCLoop:
.d913	b913	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d916	b916	f0 22		beq $b93a			beq 	_FLBCExit 					; end of string.
.d918	b918	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d91a	b91a	f0 11		beq $b92d			beq 	_FLBCInQuotes
.d91c	b91c	e8		inx				inx
.d91d	b91d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d91f	b91f	90 f2		bcc $b913			bcc 	_FLBCLoop
.d921	b921	c9 7b		cmp #$7b			cmp 	#'z'+1
.d923	b923	b0 ee		bcs $b913			bcs 	_FLBCLoop
.d925	b925	38		sec				sec 								; make U/C
.d926	b926	e9 20		sbc #$20			sbc 	#32
.d928	b928	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d92b	b92b	80 e6		bra $b913			bra 	_FLBCLoop
.d92d	b92d					_FLBCInQuotes:
.d92d	b92d	e8		inx				inx 								; advance
.d92e	b92e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d931	b931	f0 07		beq $b93a			beq 	_FLBCExit 					; exit on EOS
.d933	b933	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d935	b935	d0 f6		bne $b92d			bne 	_FLBCInQuotes
.d937	b937	e8		inx				inx 								; skip over it
.d938	b938	80 d9		bra $b913			bra 	_FLBCLoop
.d93a	b93a					_FLBCExit:
.d93a	b93a	60		rts				rts
.d93b	b93b					TOKExtractLineNumber:
.d93b	b93b	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d93e	b93e	48		pha				pha
.d93f	b93f	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d942	b942	48		pha				pha
.d943	b943	20 79 b9	jsr $b979			jsr 	_LCLNTimes2 				; line # x 2
.d946	b946	20 79 b9	jsr $b979			jsr 	_LCLNTimes2 				; line # x 4
.d949	b949	18		clc				clc 								; add stacked value
.d94a	b94a	68		pla				pla
.d94b	b94b	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d94e	b94e	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d951	b951	68		pla				pla
.d952	b952	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d955	b955	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d958	b958	20 79 b9	jsr $b979			jsr 	_LCLNTimes2 				; line # x 10
.d95b	b95b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d95e	b95e	e8		inx				inx
.d95f	b95f	29 0f		and #$0f			and 	#15 						; add to line #
.d961	b961	18		clc				clc
.d962	b962	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d965	b965	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d968	b968	90 03		bcc $b96d			bcc 	_TLENNoCarry
.d96a	b96a	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d96d	b96d					_TLENNoCarry:
.d96d	b96d	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d970	b970	c9 30		cmp #$30			cmp 	#'0'
.d972	b972	90 04		bcc $b978			bcc 	_TLENExit
.d974	b974	c9 3a		cmp #$3a			cmp 	#'9'+1
.d976	b976	90 c3		bcc $b93b			bcc 	TOKExtractLineNumber
.d978	b978					_TLENExit:
.d978	b978	60		rts				rts
.d979	b979					_LCLNTimes2:
.d979	b979	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d97c	b97c	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d97f	b97f	60		rts				rts
.d980	b980					TOKWriteByte:
.d980	b980	da		phx				phx
.d981	b981	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d984	b984	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d987	b987	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d98a	b98a	fa		plx				plx
.d98b	b98b	60		rts				rts
.d98c	b98c					TOKCheckCreateVariableRecord:
.d98c	b98c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d98e	b98e	85 36		sta $36				sta 	0+zTemp0
.d990	b990	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d992	b992	85 37		sta $37				sta 	1+zTemp0
.d994	b994					_CCVSearch:
.d994	b994	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d996	b996	f0 2c		beq $b9c4			beq 	_CCVFail
.d998	b998	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d99a	b99a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d99c	b99c	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d99f	b99f	d0 16		bne $b9b7			bne 	_CCVNext
.d9a1	b9a1	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9a3	b9a3	ae 00 04	ldx $0400			ldx 	identStart
.d9a6	b9a6					_CCVCompare:
.d9a6	b9a6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9a9	b9a9	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9ab	b9ab	e8		inx				inx 								; advance pointers
.d9ac	b9ac	c8		iny				iny
.d9ad	b9ad	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9ae	b9ae	d0 07		bne $b9b7			bne 	_CCVNext  					; didn't match go to next.
.d9b0	b9b0	90 f4		bcc $b9a6			bcc 	_CCVCompare 				; not finished yet.
.d9b2	b9b2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d9b5	b9b5	f0 41		beq $b9f8			beq 	_CCVFound 					; yes, we were successful
.d9b7	b9b7					_CCVNext:
.d9b7	b9b7	18		clc				clc 								; go to next record.
.d9b8	b9b8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d9ba	b9ba	65 36		adc $36				adc 	zTemp0
.d9bc	b9bc	85 36		sta $36				sta 	zTemp0
.d9be	b9be	90 d4		bcc $b994			bcc 	_CCVSearch
.d9c0	b9c0	e6 37		inc $37				inc 	zTemp0+1
.d9c2	b9c2	80 d0		bra $b994			bra 	_CCVSearch
.d9c4	b9c4					_CCVFail:
.d9c4	b9c4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d9c6	b9c6	ad 03 04	lda $0403			lda 	identHash
.d9c9	b9c9	91 36		sta ($36),y			sta 	(zTemp0),y
.d9cb	b9cb	c8		iny				iny 								; offset 2 is the type byte
.d9cc	b9cc	ad 04 04	lda $0404			lda 	identTypeByte
.d9cf	b9cf	91 36		sta ($36),y			sta 	(zTemp0),y
.d9d1	b9d1	c8		iny				iny
.d9d2	b9d2					_CCVData:
.d9d2	b9d2	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d9d4	b9d4	91 36		sta ($36),y			sta 	(zTemp0),y
.d9d6	b9d6	c8		iny				iny
.d9d7	b9d7	c0 08		cpy #$08			cpy 	#8
.d9d9	b9d9	90 f7		bcc $b9d2			bcc 	_CCVData
.d9db	b9db	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d9de	b9de					_CCVCopyName:
.d9de	b9de	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d9e1	b9e1	91 36		sta ($36),y			sta 	(zTemp0),y
.d9e3	b9e3	e8		inx				inx
.d9e4	b9e4	c8		iny				iny
.d9e5	b9e5	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d9e8	b9e8	d0 f4		bne $b9de			bne 	_CCVCopyName
.d9ea	b9ea	98		tya				tya 								; patch offset
.d9eb	b9eb	92 36		sta ($36)			sta 	(zTemp0)
.d9ed	b9ed	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d9ef	b9ef	91 36		sta ($36),y			sta 	(zTemp0),y
.d9f1	b9f1	88		dey				dey
.d9f2	b9f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d9f4	b9f4	09 80		ora #$80			ora 	#$80
.d9f6	b9f6	91 36		sta ($36),y			sta 	(zTemp0),y
.d9f8	b9f8					_CCVFound:
.d9f8	b9f8	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d9fa	b9fa	38		sec				sec
.d9fb	b9fb	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d9fd	b9fd	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d9ff	b9ff	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.da02	ba02	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da04	ba04	20 80 b9	jsr $b980			jsr 	TOKWriteByte
.da07	ba07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da08	ba08					SNDCheckChannel:
.da08	ba08	aa		tax				tax
.da09	ba09	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da0c	ba0c	d0 38		bne $ba46			bne 	_SNDCCExit
.da0e	ba0e	da		phx				phx 								; save current channel
.da0f	ba0f	8a		txa				txa 								; put in A
.da10	ba10	20 8c ba	jsr $ba8c			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da13	ba13	68		pla				pla 								; channel # in A
.da14	ba14	90 30		bcc $ba46			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da16	ba16	a8		tay				tay 								; Y is the channel #
.da17	ba17	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da1a	ba1a	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da1d	ba1d	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da20	ba20	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da23	ba23	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da26	ba26	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da29	ba29	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da2c	ba2c	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da2f	ba2f	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da32	ba32	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da35	ba35	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da38	ba38	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da3b	ba3b	5a		phy				phy 								; save channel #
.da3c	ba3c	20 a6 ba	jsr $baa6			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da3f	ba3f	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da42	ba42	68		pla				pla
.da43	ba43	20 47 ba	jsr $ba47			jsr 	SNDUpdateNote 				; update channel A
.da46	ba46					_SNDCCExit:
.da46	ba46	60		rts				rts
.da47	ba47					SNDUpdateNote:
.da47	ba47	aa		tax				tax 								; so we can access records
.da48	ba48	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da49	ba49	0a		asl a				asl 	a
.da4a	ba4a	0a		asl a				asl 	a
.da4b	ba4b	0a		asl a				asl 	a
.da4c	ba4c	0a		asl a				asl 	a
.da4d	ba4d	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da50	ba50	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da53	ba53	f0 2e		beq $ba83			beq 	_SNDUNIsSilent
.da55	ba55	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.da58	ba58	48		pha				pha
.da59	ba59	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.da5c	ba5c	29 0f		and #$0f			and 	#$0F
.da5e	ba5e	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.da61	ba61	09 80		ora #$80			ora 	#$80 						; write to pitch register
.da63	ba63	20 f0 ba	jsr $baf0			jsr 	SNDWritePorts
.da66	ba66	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.da69	ba69	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da6c	ba6c	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.da6f	ba6f	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.da72	ba72	6a		ror a				ror 	a
.da73	ba73	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.da76	ba76	6a		ror a				ror 	a
.da77	ba77	4a		lsr a				lsr 	a 							; put in bits 0-5
.da78	ba78	4a		lsr a				lsr 	a
.da79	ba79	20 f0 ba	jsr $baf0			jsr 	SNDWritePorts 				; write as rest of pitch register
.da7c	ba7c	68		pla				pla
.da7d	ba7d	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.da7f	ba7f	20 f0 ba	jsr $baf0			jsr 	SNDWritePorts
.da82	ba82	60		rts				rts
.da83	ba83					_SNDUNIsSilent:
.da83	ba83	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.da86	ba86	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.da88	ba88	20 f0 ba	jsr $baf0			jsr 	SNDWritePorts 				; write to the ports
.da8b	ba8b	60		rts				rts
.da8c	ba8c					SNDFindNextNoteForA:
.da8c	ba8c	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.da8f	ba8f	f0 13		beq $baa4			beq 	_SNDFNNFail 				; queue empty.
.da91	ba91	a2 00		ldx #$00			ldx 	#0
.da93	ba93					_SNDFNNSearch:
.da93	ba93	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.da96	ba96	38		sec				sec
.da97	ba97	f0 0c		beq $baa5			beq 	_SNDFNNExit 				; if so exit with CS.
.da99	ba99	e8		inx				inx 								; next queue slot.
.da9a	ba9a	e8		inx				inx
.da9b	ba9b	e8		inx				inx
.da9c	ba9c	e8		inx				inx
.da9d	ba9d	e8		inx				inx
.da9e	ba9e	e8		inx				inx
.da9f	ba9f	e8		inx				inx
.daa0	baa0	e8		inx				inx
.daa1	baa1	88		dey				dey 								; done the whole queue
.daa2	baa2	d0 ef		bne $ba93			bne 	_SNDFNNSearch 				; no, go back.
.daa4	baa4					_SNDFNNFail:
.daa4	baa4	18		clc				clc
.daa5	baa5					_SNDFNNexit:
.daa5	baa5	60		rts				rts
.daa6	baa6					SNDDeleteXFromQueue:
.daa6	baa6	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.daa8	baa8	f0 09		beq $bab3			beq 	_SNDDXExit
.daaa	baaa	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.daad	baad	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dab0	bab0	e8		inx				inx
.dab1	bab1	80 f3		bra $baa6			bra 	SNDDeleteXFromQueue
.dab3	bab3					_SNDDXExit:
.dab3	bab3	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.dab4	bab4					SNDQueueRequest:
.dab4	bab4	86 36		stx $36				stx 	zTemp0						; save queue address
.dab6	bab6	84 37		sty $37				sty 	zTemp0+1
.dab8	bab8	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.dabb	babb	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dabd	babd	f0 21		beq $bae0			beq 	_SNDQRExit
.dabf	babf	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dac1	bac1	48		pha				pha
.dac2	bac2	8a		txa				txa  								; get offset in queue buffer/
.dac3	bac3	0a		asl a				asl 	a
.dac4	bac4	0a		asl a				asl 	a
.dac5	bac5	0a		asl a				asl 	a
.dac6	bac6	aa		tax				tax
.dac7	bac7	68		pla				pla 								; get back and push again
.dac8	bac8	48		pha				pha
.dac9	bac9	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.dacc	bacc	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dace	bace					_SNDQCopy:
.dace	bace	b1 36		lda ($36),y			lda 	(zTemp0),y
.dad0	bad0	e8		inx				inx
.dad1	bad1	c8		iny				iny
.dad2	bad2	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dad5	bad5	c0 06		cpy #$06			cpy 	#6
.dad7	bad7	d0 f5		bne $bace			bne 	_SNDQCopy
.dad9	bad9	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.dadc	badc	68		pla				pla 								; get channel # back
.dadd	badd	20 08 ba	jsr $ba08			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dae0	bae0					_SNDQRExit:
.dae0	bae0	60		rts				rts
.dae1	bae1					SNDSilenceChannel:
.dae1	bae1	aa		tax				tax 								; zero time left.
.dae2	bae2	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.dae5	bae5	0a		asl a				asl 	a 							; shift into position
.dae6	bae6	0a		asl a				asl 	a
.dae7	bae7	0a		asl a				asl 	a
.dae8	bae8	0a		asl a				asl 	a
.dae9	bae9	0a		asl a				asl 	a
.daea	baea	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.daec	baec	20 f0 ba	jsr $baf0			jsr 	SNDWritePorts
.daef	baef	60		rts				rts
.daf0	baf0					SNDWritePorts:
.daf0	baf0	da		phx				phx 								; save X
.daf1	baf1	a6 01		ldx $01				ldx 	1 							; save I/O status
.daf3	baf3	64 01		stz $01				stz 	1 							; access I/O page 0
.daf5	baf5	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.daf8	baf8	8d 10 d6	sta $d610			sta 	$D610
.dafb	bafb	86 01		stx $01				stx 	1 							; restore I/O
.dafd	bafd	fa		plx				plx 								; restore X
.dafe	bafe	60		rts				rts
.daff	baff					Export_SNDCommand:
.daff	baff	da		phx				phx 								; save XY
.db00	bb00	5a		phy				phy
.db01	bb01	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db03	bb03	f0 1d		beq $bb22			beq 	_SNDInitialise
.db05	bb05	90 28		bcc $bb2f			bcc 	_SNDExit
.db07	bb07	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db09	bb09	f0 17		beq $bb22			beq 	_SNDSilence
.db0b	bb0b	b0 22		bcs $bb2f			bcs 	_SNDExit
.db0d	bb0d	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db0f	bb0f	b0 09		bcs $bb1a			bcs 	_SNDQueryPlay
.db11	bb11	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db13	bb13	b0 1a		bcs $bb2f			bcs 	_SNDExit
.db15	bb15	20 b4 ba	jsr $bab4			jsr 	SNDQueueRequest
.db18	bb18	80 15		bra $bb2f			bra 	_SNDExit
.db1a	bb1a					_SNDQueryPlay:
.db1a	bb1a	29 03		and #$03			and 	#3 							; get channel #
.db1c	bb1c	aa		tax				tax
.db1d	bb1d	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db20	bb20	80 0d		bra $bb2f			bra 	_SNDExit
.db22	bb22					_SNDInitialise:
.db22	bb22					_SNDSilence:
.db22	bb22	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db25	bb25	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db27	bb27					_SNDSilenceLoop:
.db27	bb27	48		pha				pha
.db28	bb28	20 e1 ba	jsr $bae1			jsr 	SNDSilenceChannel
.db2b	bb2b	68		pla				pla
.db2c	bb2c	3a		dec a				dec 	a
.db2d	bb2d	10 f8		bpl $bb27			bpl 	_SNDSilenceLoop
.db2f	bb2f					_SNDExit:
.db2f	bb2f	7a		ply				ply
.db30	bb30	fa		plx				plx
.db31	bb31	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db32	bb32					Export_SNDUpdate:
.db32	bb32					PagedSNDUpdate:
.db32	bb32	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db35	bb35	f0 05		beq $bb3c			beq 	_SNDUNot0 					; not playing
.db37	bb37	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db39	bb39	20 5b bb	jsr $bb5b			jsr 	SNDUpdateChannel 			; update it.
.db3c	bb3c					_SNDUNot0:
.db3c	bb3c	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db3f	bb3f	f0 05		beq $bb46			beq 	_SNDUNot1
.db41	bb41	a2 01		ldx #$01			ldx 	#1
.db43	bb43	20 5b bb	jsr $bb5b			jsr 	SNDUpdateChannel
.db46	bb46					_SNDUNot1:
.db46	bb46	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db49	bb49	f0 05		beq $bb50			beq 	_SNDUNot2
.db4b	bb4b	a2 02		ldx #$02			ldx 	#2
.db4d	bb4d	20 5b bb	jsr $bb5b			jsr 	SNDUpdateChannel
.db50	bb50					_SNDUNot2:
.db50	bb50	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db53	bb53	f0 05		beq $bb5a			beq 	_SNDUNot3
.db55	bb55	a2 03		ldx #$03			ldx 	#3
.db57	bb57	20 5b bb	jsr $bb5b			jsr 	SNDUpdateChannel
.db5a	bb5a					_SNDUNot3:
.db5a	bb5a	60		rts				rts
.db5b	bb5b					SNDUpdateChannel:
.db5b	bb5b	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.db5d	bb5d	f0 2c		beq $bb8b			beq 	_SNDUCExit
.db5f	bb5f	3a		dec a				dec 	a 							; decrement and update timer
.db60	bb60	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.db63	bb63	f0 1d		beq $bb82			beq 	_SNDUCUpdate 				; if zero, silence channel
.db65	bb65	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.db68	bb68	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.db6b	bb6b	f0 1e		beq $bb8b			beq 	_SNDUCExit 					; if zero carry on at current tone.
.db6d	bb6d	18		clc				clc 								; add adjust, forcing into a 10 bit range
.db6e	bb6e	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.db71	bb71	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.db74	bb74	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.db77	bb77	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.db7a	bb7a	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.db7d	bb7d	29 03		and #$03			and 	#3
.db7f	bb7f	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.db82	bb82					_SNDUCUpdate:
.db82	bb82	8a		txa				txa 								; which channel.
.db83	bb83	48		pha				pha
.db84	bb84	20 47 ba	jsr $ba47			jsr 	SNDUpdateNote 				; update the current note
.db87	bb87	68		pla				pla
.db88	bb88	20 08 ba	jsr $ba08			jsr 	SNDCheckChannel 			; more to do ?
.db8b	bb8b					_SNDUCExit:
.db8b	bb8b	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
