
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 14 15:53:26 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b4 a4	jsr $a4b4			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 1c 91	jsr $911c			jsr 	PrintStringXA
.8014	20 7b 8b	jsr $8b7b			jsr 	NewCommand 					; erase current program
.8017	20 fd 82	jsr $82fd			jsr 	BackloadProgram
.801a	4c 48 8d	jmp $8d48			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2679."
>8065	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 37 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8085					AssembleGroup1:
.8085	a9 ff		lda #$ff			lda 	#$FF
.8087	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808a	80 02		bra $808e			bra 	AsmGroup12
.808c					AssembleGroup2:
.808c	a9 00		lda #$00			lda 	#$00
.808e					AsmGroup12:
.808e	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8091	68		pla				pla 								; pop the return address to access the information following.
.8092	fa		plx				plx
.8093	20 1c 81	jsr $811c			jsr 	AccessParameters 			; get opcode and save as base
.8096	8d a4 04	sta $04a4			sta 	BaseOpcode
.8099	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809c	d0 08		bne $80a6			bne 	_AG12HaveMask
.809e	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a0	20 24 81	jsr $8124			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a3	8d a5 04	sta $04a5			sta 	ModeMask
.80a6					_AG12HaveMask:
.80a6	20 5f 82	jsr $825f			jsr 	TypeAndCalculateOperand 	; get zero page type
.80a9	da		phx				phx 								; save found address mode
.80aa	20 88 81	jsr $8188			jsr 	AssembleModeX
.80ad	fa		plx				plx  								; restore address mode
.80ae	b0 0b		bcs $80bb			bcs 	_AG12Exit
.80b0	20 bc 80	jsr $80bc			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b3	20 88 81	jsr $8188			jsr 	AssembleModeX
.80b6	b0 03		bcs $80bb			bcs 	_AG12Exit
.80b8	4c 10 a3	jmp $a310			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bb					_AG12Exit:
.80bb	60		rts				rts
.80bc					PromoteToAbsolute:
.80bc	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80be	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c0	f0 19		beq $80db			beq 	_PTADo
.80c2	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c4	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c6	f0 13		beq $80db			beq 	_PTADo
.80c8	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80ca	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cc	f0 0d		beq $80db			beq 	_PTADo
.80ce	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d0	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d2	f0 07		beq $80db			beq 	_PTADo
.80d4	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d6	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d8	f0 01		beq $80db			beq 	_PTADo
.80da	60		rts				rts
.80db					_PTADo:
.80db	aa		tax				tax
.80dc	60		rts				rts
.80dd					AssembleGroup3:
.80dd	68		pla				pla 								; get parameters, which is just the opcode.
.80de	fa		plx				plx
.80df	20 1c 81	jsr $811c			jsr 	AccessParameters 			; get and output opcode
.80e2	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.80e5	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get a 16 bit operand
.80e8	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80eb	38		sec				sec
.80ec	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80ef	48		pha				pha 								; LSB in A
.80f0	ad 10 04	lda $0410			lda 	NSMantissa1
.80f3	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f6	aa		tax				tax 								; MSB in X
.80f7	68		pla				pla
.80f8	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80f9	69 7f		adc #$7f			adc 	#$7F
.80fb	90 01		bcc $80fe			bcc 	_AG3NoCarry
.80fd	e8		inx				inx
.80fe					_AG3NoCarry:
.80fe	38		sec				sec 								; fix back and write out anyways.
.80ff	e9 80		sbc #$80			sbc 	#$80
.8101	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.8104	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8106	f0 0a		beq $8112			beq 	_AG3Exit
.8108	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810b	29 01		and #$01			and 	#1
.810d	f0 03		beq $8112			beq 	_AG3Exit
.810f	4c 15 a3	jmp $a315			jmp 	RangeError 					; no, branch is out of range
.8112					_AG3Exit:
.8112	60		rts				rts
.8113					AssembleGroup4:
.8113	68		pla				pla 								; pop address
.8114	fa		plx				plx
.8115	20 1c 81	jsr $811c			jsr 	AccessParameters 			; access and get first
.8118	20 34 81	jsr $8134			jsr 	AssemblerWriteByte 			; output it.
.811b	60		rts				rts
.811c					AccessParameters:
.811c	8d a1 04	sta $04a1			sta 	ParamStart
.811f	8e a2 04	stx $04a2			stx 	ParamStart+1
.8122	a9 01		lda #$01			lda 	#1
.8124					GetParameter:
.8124	5a		phy				phy
.8125	a8		tay				tay
.8126	ad a1 04	lda $04a1			lda 	ParamStart
.8129	85 36		sta $36				sta 	zTemp0
.812b	ad a2 04	lda $04a2			lda 	ParamStart+1
.812e	85 37		sta $37				sta 	zTemp0+1
.8130	b1 36		lda ($36),y			lda 	(zTemp0),y
.8132	7a		ply				ply
.8133	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8134					AssemblerWriteByte:
.8134	48		pha			pha
.8135	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8138	29 02		and #$02		and 	#2
.813a	f0 1b		beq $8157		beq 	_AWBNoPrint
.813c	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.813f	20 72 81	jsr $8172		jsr 	PrintHex
.8142	ad 9e 04	lda $049e		lda		AssemblerAddress
.8145	20 72 81	jsr $8172		jsr 	PrintHex
.8148	a9 20		lda #$20		lda 	#' '
.814a	20 c8 a4	jsr $a4c8		jsr 	EXTPrintCharacter
.814d	68		pla			pla 									; print byte
.814e	48		pha			pha
.814f	20 72 81	jsr $8172		jsr 	PrintHex
.8152	a9 0d		lda #$0d		lda 	#13
.8154	20 c8 a4	jsr $a4c8		jsr 	EXTPrintCharacter
.8157					_AWBNoPrint:
.8157	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815a	85 36		sta $36			sta 	zTemp0
.815c	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.815f	f0 0e		beq $816f		beq 	_AWBRange
.8161	85 37		sta $37			sta 	zTemp0+1
.8163	68		pla			pla 									; write byte out
.8164	92 36		sta ($36)		sta 	(zTemp0)
.8166	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8169	d0 03		bne $816e		bne 	_AWBNoCarry
.816b	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816e					_AWBNoCarry:
.816e	60		rts			rts
.816f					_AWBRange:
.816f	4c 15 a3	jmp $a315		jmp 	RangeError
.8172					PrintHex:
.8172	48		pha				pha
.8173	4a		lsr a				lsr 	a
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	20 7b 81	jsr $817b			jsr 	_PrintNibble
.817a	68		pla				pla
.817b					_PrintNibble:
.817b	29 0f		and #$0f			and 	#15
.817d	c9 0a		cmp #$0a			cmp 	#10
.817f	90 02		bcc $8183			bcc 	_NoShift
.8181	69 06		adc #$06			adc 	#6
.8183					_NoShift:
.8183	69 30		adc #$30			adc 	#48
.8185	4c c8 a4	jmp $a4c8			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8188					AssembleModeX:
.8188	5a		phy				phy
.8189	ad a3 04	lda $04a3			lda 	IsGroup1
.818c	f0 17		beq $81a5			beq 	_AMXGroup2
.818e	8a		txa				txa 							; is it in group # 1
.818f	29 40		and #$40			and 	#AM_ISG1
.8191	f0 50		beq $81e3			beq 	_AMXFail 				; no, give up.
.8193	8a		txa				txa 							; get back.
.8194	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8196	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8198	d0 22		bne $81bc			bne 	_AMXHaveInfo
.819a	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819d	c9 81		cmp #$81			cmp 	#$81
.819f	f0 42		beq $81e3			beq 	_AMXFail
.81a1	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a3	80 17		bra $81bc			bra 	_AMXHaveInfo 			; odd design decision there.
.81a5					_AMXGroup2:
.81a5	8a		txa				txa 							; is it in group 2 ?
.81a6	29 20		and #$20			and 	#AM_ISG2
.81a8	f0 39		beq $81e3			beq 	_AMXFail 				; no, give up.
.81aa	8a		txa				txa 							; get the offset into Y
.81ab	29 1f		and #$1f			and 	#$1F
.81ad	4a		lsr a				lsr 	a 						; make it 0-7.
.81ae	4a		lsr a				lsr  	a
.81af	a8		tay				tay
.81b0	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b3					_AMXCheckOkay:
.81b3	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b4	88		dey				dey
.81b5	10 fc		bpl $81b3			bpl 	_AMXCheckOkay
.81b7	90 2a		bcc $81e3			bcc 	_AMXFail 				; not allowed.
.81b9	8a		txa				txa  							; get mask back
.81ba	29 1f		and #$1f			and 	#$1F
.81bc					_AMXHaveInfo:
.81bc	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81be	10 05		bpl $81c5			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c0	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c3	d0 1e		bne $81e3			bne 	_AMXFail
.81c5					_AMXAnySize:
.81c5	18		clc				clc 							; add offset to the base opcode
.81c6	6d a4 04	adc $04a4			adc 	BaseOpcode
.81c9					_AMXOutputCode:
.81c9	20 34 81	jsr $8134			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cc	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81ce	f0 10		beq $81e0			beq 	_AMXExit
.81d0	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d3	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.81d6	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d8	30 06		bmi $81e0			bmi 	_AMXExit
.81da	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81dd	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.81e0					_AMXExit:
.81e0	7a		ply				ply
.81e1	38		sec				sec
.81e2	60		rts				rts
.81e3					_AMXFail:
.81e3	a0 00		ldy #$00			ldy 	#0
.81e5					_AMXCheckOddities:
.81e5	8a		txa				txa
.81e6	d9 0e 82	cmp $820e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81e9	d0 16		bne $8201			bne 	_AMXCONext
.81eb	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ee	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f1	d0 0e		bne $8201			bne 	_AMXCONext
.81f3	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f5	10 05		bpl $81fc			bpl 	_AMXCONotZero
.81f7	ad 10 04	lda $0410			lda 	NSMantissa1
.81fa	d0 05		bne $8201			bne 	_AMXCONext
.81fc					_AMXCONotZero:
.81fc	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81ff	80 c8		bra $81c9			bra 	_AMXOutputCode 			; and assemble it
.8201					_AMXCONext:
.8201	c8		iny				iny
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+0,y 		; end of table
.8207	d0 dc		bne $81e5			bne 	_AMXCheckOddities
.8209					_AMXCOFail:
.8209	7a		ply				ply
.820a	18		clc				clc
.820b	60		rts				rts
.820c					ExtraOpcode:
>820c	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>820f	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8212	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8215	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8218	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821b	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821e	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8221	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8224	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8227	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822a	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822b					LabelHere:
.822b	c8		iny				iny 								; skip .
.822c	a2 00		ldx #$00			ldx 	#0 							; get a term
.822e	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm 				; get a term
.8231	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8234	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8236	d0 24		bne $825c			bne 	_ALType
.8238	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823b	85 36		sta $36				sta 	zTemp0
.823d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8240	85 37		sta $37				sta 	zTemp0+1
.8242	5a		phy				phy 								; copy address in.
.8243	a0 01		ldy #$01			ldy 	#1
.8245	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8248	92 36		sta ($36)			sta 	(zTemp0)
.824a	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824d	91 36		sta ($36),y			sta 	(zTemp0),y
.824f	c8		iny				iny
.8250	a9 00		lda #$00			lda 	#0
.8252	91 36		sta ($36),y			sta 	(zTemp0),y
.8254	c8		iny				iny
.8255	91 36		sta ($36),y			sta 	(zTemp0),y
.8257	c8		iny				iny
.8258	91 36		sta ($36),y			sta 	(zTemp0),y
.825a	7a		ply				ply
.825b	60		rts				rts
.825c					_ALType:
.825c	4c 1a a3	jmp $a31a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.825f					TypeAndCalculateOperand:
.825f	b1 30		lda ($30),y			lda 	(codePtr),y
.8261	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8263	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8265	f0 5b		beq $82c2			beq 	_TACOExit
.8267	c9 80		cmp #$80			cmp 	#KWC_EOL
.8269	f0 57		beq $82c2			beq 	_TACOExit
.826b	c8		iny				iny
.826c	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826e	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8270	f0 51		beq $82c3			beq 	CalculateOperand
.8272	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8274	f0 1f		beq $8295			beq 	_TACOIndirect
.8276	88		dey				dey 								; undo get of first character
.8277	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get operand
.827a	b1 30		lda ($30),y			lda 	(codePtr),y
.827c	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8280	d0 40		bne $82c2			bne 	_TACOExit
.8282	c8		iny				iny
.8283	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8286	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8288	c9 58		cmp #$58			cmp 	#'X'
.828a	f0 36		beq $82c2			beq 	_TACOExit
.828c	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828e	c9 59		cmp #$59			cmp 	#'Y'
.8290	f0 30		beq $82c2			beq 	_TACOExit
.8292					_TACOSyntax:
.8292	4c 10 a3	jmp $a310			jmp 	SyntaxError
.8295					_TACOIndirect:
.8295	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get the operand
.8298	b1 30		lda ($30),y			lda 	(codePtr),y
.829a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829c	f0 17		beq $82b5			beq 	_TACOIndX
.829e	20 aa 90	jsr $90aa			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a1	b1 30		lda ($30),y			lda 	(codePtr),y
.82a3	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a7	d0 19		bne $82c2			bne 	_TACOExit
.82a9	c8		iny				iny
.82aa	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ad	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82af	d0 e1		bne $8292			bne 	_TACOSyntax
.82b1	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b3	80 0d		bra $82c2			bra 	_TACOExit
.82b5					_TACOIndX:
.82b5	c8		iny				iny
.82b6	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82b9	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bb	d0 d5		bne $8292			bne 	_TACOSyntax
.82bd	20 aa 90	jsr $90aa			jsr 	CheckRightBracket			; check )
.82c0	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c2					_TACOExit:
.82c2	60		rts				rts
.82c3					CalculateOperand:
.82c3	48		pha				pha
.82c4	da		phx				phx
.82c5	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c7	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.82ca	fa		plx				plx
.82cb	68		pla				pla
.82cc	60		rts				rts
.82cd					TACOCheckXY:
.82cd	b1 30		lda ($30),y			lda 	(codePtr),y
.82cf	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d1	c9 40		cmp #$40			cmp 	#$40
.82d3	d0 21		bne $82f6			bne 	_TCXYFail
.82d5	b1 30		lda ($30),y			lda 	(codePtr),y
.82d7	18		clc				clc
.82d8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82da	85 37		sta $37				sta 	zTemp0+1
.82dc	c8		iny				iny
.82dd	b1 30		lda ($30),y			lda 	(codePtr),y
.82df	c8		iny				iny
.82e0	85 36		sta $36				sta 	zTemp0
.82e2	5a		phy				phy 								; save position
.82e3	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e7	d0 0c		bne $82f5			bne 	_TCXYPopFail
.82e9	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ed	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82ef	f0 08		beq $82f9			beq 	_TCXYFound
.82f1	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f3	f0 04		beq $82f9			beq 	_TCXYFound
.82f5					_TCXYPopFail:
.82f5	7a		ply				ply
.82f6					_TCXYFail:
.82f6	a9 00		lda #$00			lda 	#0
.82f8	60		rts				rts
.82f9					_TCXYFound:
.82f9	7a		ply				ply 								; restore position
.82fa	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fd					BackloadProgram:
.82fd	a2 ff		ldx #$ff			ldx 	#$FF
.82ff	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.8302	20 2c 83	jsr $832c			jsr 	BLReadByte
.8305	30 1e		bmi $8325			bmi 	_BPExit
.8307					_BPCopy:
.8307	e8		inx				inx  								; copy byte in
.8308	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.830b	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.830e	20 2c 83	jsr $832c			jsr 	BLReadByte 					; read next byte
.8311	30 0a		bmi $831d			bmi 	_BPEndLine 					; -ve = EOL
.8313	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8315	d0 02		bne $8319			bne 	_BPNotTab
.8317	a9 20		lda #$20			lda 	#' '
.8319					_BPNotTab:
.8319	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831b	b0 ea		bcs $8307			bcs 	_BPCopy
.831d					_BPEndLine:
.831d	20 9c b6	jsr $b69c			jsr 	TokeniseLine 				; tokenise the line.
.8320	20 3a 83	jsr $833a			jsr 	EditProgramCode
.8323	80 d8		bra $82fd			bra 	BackloadProgram
.8325					_BPExit:
.8325	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.8328	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear variables etc.
.832b	60		rts				rts
.832c					BLReadByte:
.832c					_BLLoad:
.832c	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832f	ee 2d 83	inc $832d			inc 	_BLLoad+1
.8332	d0 03		bne $8337			bne 	_BLNoCarry
.8334	ee 2e 83	inc $832e			inc 	_BLLoad+2
.8337					_BLNoCarry:
.8337	c9 00		cmp #$00			cmp 	#0
.8339	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.833a					EditProgramCode:
.833a	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.833d	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8340	20 32 a6	jsr $a632			jsr 	MemorySearch
.8343	90 05		bcc $834a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8345	d0 03		bne $834a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8347	20 53 a5	jsr $a553			jsr 	MemoryDeleteLine 			; delete the line
.834a					_EPCNoDelete:
.834a	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.834d	c9 80		cmp #$80			cmp 	#KWC_EOL
.834f	f0 0d		beq $835e			beq 	_EPCNoInsert
.8351	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8354	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8357	20 32 a6	jsr $a632			jsr 	MemorySearch
.835a	18		clc				clc 								; insert at this point.
.835b	20 8a a5	jsr $a58a			jsr 	MemoryInsertLine 			; insert the line
.835e					_EPCNoInsert:
.835e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835f					WarmStart:
.835f	a2 ff		ldx #$ff			ldx 	#$FF
.8361	9a		txs				txs
.8362	20 de a4	jsr $a4de			jsr 	EXTInputLine 				; get line to lineBuffer
.8365	20 9c b6	jsr $b69c			jsr 	TokeniseLine 				; tokenise the line
.8368	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.836b	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.836e	d0 17		bne $8387			bne 	_WSEditCode 				; if so,edit code.
.8370	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8373	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8375	85 30		sta $30				sta 	codePtr
.8377	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8379	85 31		sta $31				sta 	codePtr+1
.837b	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.837e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8380	f0 dd		beq $835f			beq 	WarmStart
.8382	20 5a 8d	jsr $8d5a			jsr 	RUNCodePointerLine 			; execute that line.
.8385	80 d8		bra $835f			bra 	WarmStart
.8387					_WSEditCode:
.8387	20 3a 83	jsr $833a			jsr 	EditProgramCode
.838a	20 f8 83	jsr $83f8			jsr 	ClearCommand
.838d	80 d0		bra $835f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838f					AssembleCommand:
.838f	a2 00		ldx #$00			ldx 	#0
.8391	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger 		; start address
.8394	ad 08 04	lda $0408			lda 	NSMantissa0
.8397	8d 9e 04	sta $049e			sta 	AssemblerAddress
.839a	ad 10 04	lda $0410			lda 	NSMantissa1
.839d	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.83a0	20 b2 90	jsr $90b2			jsr 	CheckComma
.83a3	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; options
.83a6	ad 08 04	lda $0408			lda 	NSMantissa0
.83a9	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ac	60		rts				rts
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83ae					AssertCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	20 d2 a0	jsr $a0d2			jsr 	EvaluateInteger 			; the assert test
.83b3	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; exit if result is non zero.
.83b6	d0 05		bne $83bd			bne 	_ACExit
.83b8	a9 0a		lda #$0a		lda	#10
.83ba	4c c3 90	jmp $90c3		jmp	ErrorHandler
.83bd					_ACExit:
.83bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83be					CallCommand:
.83be	a2 00		ldx #$00			ldx 	#0
.83c0	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.83c3					_CCClear
.83c3	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c4	20 86 a1	jsr $a186			jsr 	NSMSetZero
.83c7	e0 04		cpx #$04			cpx 	#4
.83c9	d0 f8		bne $83c3			bne 	_CCClear
.83cb	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83cd					_CCCParam:
.83cd	b1 30		lda ($30),y			lda 	(codePtr),y
.83cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d1	d0 09		bne $83dc			bne 	_CCCRun6502
.83d3	c8		iny				iny 								; skip comma
.83d4	e8		inx				inx	 								; next level
.83d5	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d8	e0 03		cpx #$03			cpx 	#3
.83da	90 f1		bcc $83cd			bcc 	_CCCParam 					; done all 3 ?
.83dc					_CCCRun6502:
.83dc	5a		phy				phy 								; save position
.83dd	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83e0	85 37		sta $37				sta 	zTemp0+1
.83e2	ad 08 04	lda $0408			lda 	NSMantissa0
.83e5	85 36		sta $36				sta 	zTemp0
.83e7	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83ea	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ed	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83f0	20 f5 83	jsr $83f5			jsr 	_CCCZTemp0 					; call zTemp0
.83f3	7a		ply				ply 								; restore position and exit
.83f4	60		rts				rts
.83f5					_CCCZTemp0:
.83f5	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f8					ClearCommand:
.83f8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83fa	85 36		sta $36				sta 	0+zTemp0
.83fc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fe	85 37		sta $37				sta 	1+zTemp0
.8400					_ClearZeroLoop:
.8400	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8402	f0 24		beq $8428			beq 	_ClearZeroEnd
.8404	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8406	a9 00		lda #$00			lda 	#0
.8408					_ClearOneVariable:
.8408	91 36		sta ($36),y			sta 	(zTemp0),y
.840a	c8		iny				iny
.840b	c0 08		cpy #$08			cpy 	#8
.840d	d0 f9		bne $8408			bne 	_ClearOneVariable
.840f	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8411	b1 36		lda ($36),y			lda 	(zTemp0),y
.8413	c9 18		cmp #$18			cmp 	#NSTProcedure
.8415	d0 04		bne $841b			bne 	_ClearNotProcedure
.8417	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8419	91 36		sta ($36),y			sta 	(zTemp0),y
.841b					_ClearNotProcedure:
.841b	18		clc				clc 								; go to the next variable
.841c	b2 36		lda ($36)			lda 	(zTemp0)
.841e	65 36		adc $36				adc 	zTemp0
.8420	85 36		sta $36				sta 	zTemp0
.8422	90 dc		bcc $8400			bcc 	_ClearZeroLoop
.8424	e6 37		inc $37				inc 	zTemp0+1
.8426	80 d8		bra $8400			bra 	_ClearZeroLoop
.8428					_ClearZeroEnd:
.8428	18		clc				clc
.8429	a5 36		lda $36				lda 	zTemp0
.842b	69 01		adc #$01			adc 	#1
.842d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8430	a5 37		lda $37				lda 	zTemp0+1
.8432	69 00		adc #$00			adc 	#0
.8434	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8437	20 ec a6	jsr $a6ec			jsr 	StackReset
.843a	20 56 a7	jsr $a756			jsr 	StringSystemInitialise
.843d	20 b3 8f	jsr $8fb3			jsr 	ProcedureScan
.8440	20 16 8d	jsr $8d16			jsr 	Command_Restore
.8443	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8446	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8449	9c a0 04	stz $04a0			stz 	AssemblerControl
.844c	20 4f 9d	jsr $9d4f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8450					ClearScreen:
.8450	5a		phy				phy
.8451	20 c5 a4	jsr $a4c5			jsr 	EXTClearScreen
.8454	7a		ply				ply
.8455	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8456					Command_Data:
.8456	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8458	a2 80		ldx #$80			ldx 	#KWC_EOL
.845a	20 05 90	jsr $9005			jsr 	ScanForward
.845d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845e					DimCommand:
.845e	b1 30		lda ($30),y			lda 	(codePtr),y
.8460	29 c0		and #$c0			and 	#$C0
.8462	c9 40		cmp #$40			cmp 	#$40
.8464	d0 7a		bne $84e0			bne 	_DCSyntax
.8466	b1 30		lda ($30),y			lda 	(codePtr),y
.8468	18		clc				clc
.8469	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846b	85 3f		sta $3f				sta 	zaTemp+1
.846d	c8		iny				iny
.846e	b1 30		lda ($30),y			lda 	(codePtr),y
.8470	c8		iny				iny
.8471	85 3e		sta $3e				sta 	zaTemp
.8473	5a		phy				phy
.8474	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8476	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8478	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.847a	c9 18		cmp #$18			cmp 	#NSTProcedure
.847c	f0 62		beq $84e0			beq 	_DCSyntax
.847e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8480	29 04		and #$04			and 	#NSBIsArray
.8482	f0 64		beq $84e8			beq 	_DCType
.8484	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8486	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8488	d0 59		bne $84e3			bne 	_DCRedefine
.848a	7a		ply				ply
.848b	20 eb 84	jsr $84eb			jsr 	_DCGetSize 				; get array size, check it.
.848e	5a		phy				phy
.848f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8491	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8493	7a		ply				ply 							; is there a second (e.g. ,x)
.8494	b1 30		lda ($30),y			lda 	(codePtr),y
.8496	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8498	d0 0a		bne $84a4			bne 	_DCOneDimension
.849a	c8		iny				iny 							; skip comma
.849b	20 eb 84	jsr $84eb			jsr 	_DCGetSize 				; get 2nd array size
.849e	5a		phy				phy
.849f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a3	7a		ply				ply
.84a4					_DCOneDimension:
.84a4	5a		phy				phy 							; save position
.84a5	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a9	aa		tax				tax
.84aa	c8		iny				iny
.84ab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ad	e8		inx				inx 							; bump them.
.84ae	1a		inc a				inc 	a
.84af	20 1b a1	jsr $a11b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b2	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b4	29 e0		and #$e0			and 	#$E0
.84b6	d0 23		bne $84db			bne 	_DCSize
.84b8	a0 02		ldy #$02			ldy 	#2 						; get base type
.84ba	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bc	20 f9 84	jsr $84f9			jsr 	ScaleByBaseType 		; scale by base type
.84bf	a5 36		lda $36				lda 	zTemp0
.84c1	a6 37		ldx $37				ldx 	zTemp0+1
.84c3	20 11 9d	jsr $9d11			jsr 	AllocateXABytes 		; allocate memory
.84c6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ca	c8		iny				iny
.84cb	8a		txa				txa
.84cc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ce	7a		ply				ply 							; get position back
.84cf	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 		; check )
.84d2	b1 30		lda ($30),y			lda 	(codePtr),y
.84d4	c8		iny				iny 							; consume in case
.84d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d7	f0 85		beq $845e			beq 	DimCommand
.84d9	88		dey				dey 							; undo consume
.84da	60		rts				rts
.84db					_DCSize:
.84db	a9 16		lda #$16		lda	#22
.84dd	4c c3 90	jmp $90c3		jmp	ErrorHandler
.84e0					_DCSyntax:
.84e0	4c 10 a3	jmp $a310			jmp 	SyntaxError
.84e3					_DCRedefine:
.84e3	a9 15		lda #$15		lda	#21
.84e5	4c c3 90	jmp $90c3		jmp	ErrorHandler
.84e8					_DCType:
.84e8	4c 1a a3	jmp $a31a			jmp 	TypeError
.84eb					_DCGetSize:
.84eb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84ed	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 	; get array dimension
.84f0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f2	f0 e7		beq $84db			beq 	_DCSize
.84f4	c9 fe		cmp #$fe			cmp 	#254
.84f6	f0 e3		beq $84db			beq 	_DCSize
.84f8	60		rts				rts
.84f9					ScaleByBaseType:
.84f9	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fb	d0 19		bne $8516			bne 	_SBBTString
.84fd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84ff	48		pha				pha
.8500	a5 36		lda $36				lda 	zTemp0
.8502	48		pha				pha
.8503	06 36		asl $36				asl 	zTemp0 					; x 2
.8505	26 37		rol $37				rol 	zTemp0+1
.8507	06 36		asl $36				asl 	zTemp0 					; x 4
.8509	26 37		rol $37				rol 	zTemp0+1
.850b	68		pla				pla 							; add stacked value = x 5
.850c	65 36		adc $36				adc 	zTemp0
.850e	85 36		sta $36				sta 	zTemp0
.8510	68		pla				pla
.8511	65 37		adc $37				adc 	zTemp0+1
.8513	85 37		sta $37				sta 	zTemp0+1
.8515	60		rts				rts
.8516					_SBBTString:
.8516	06 36		asl $36				asl 	zTemp0
.8518	26 37		rol $37				rol 	zTemp0+1
.851a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851b					EndCommand:
.851b	4c 5f 83	jmp $835f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.851e					UnaryEvent:
.851e	fa		plx				plx
.851f	20 9b 8f	jsr $8f9b			jsr 	TimerToStackX 				; timer in +0
.8522	e8		inx				inx  								; put reference into +1
.8523	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm
.8526	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8529	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.852b	d0 57		bne $8584			bne 	_UEType
.852d	e8		inx				inx 								; put the step in +2
.852e	20 b2 90	jsr $90b2			jsr 	CheckComma
.8531	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.8534	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.8537	ca		dex				dex
.8538	ca		dex				dex
.8539	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.853c	85 36		sta $36				sta 	zTemp0
.853e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8541	85 37		sta $37				sta 	zTemp0+1
.8543	5a		phy				phy
.8544	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8546	b1 36		lda ($36),y			lda 	(zTemp0),y
.8548	30 36		bmi $8580			bmi 	_UEFalse 					; exit if signed.
.854a	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.854c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.854f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8551	c8		iny				iny
.8552	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8555	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8557	c8		iny				iny
.8558	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.855b	f1 36		sbc ($36),y			sbc		(zTemp0),y
.855d	90 21		bcc $8580			bcc 	_UEFalse 					; no, return FALSE.
.855f	18		clc				clc
.8560	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8562	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8565	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8568	91 36		sta ($36),y			sta 	(zTemp0),y
.856a	c8		iny				iny
.856b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.856e	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8571	91 36		sta ($36),y			sta 	(zTemp0),y
.8573	c8		iny				iny
.8574	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8577	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.857a	91 36		sta ($36),y			sta 	(zTemp0),y
.857c	7a		ply				ply
.857d	4c 30 91	jmp $9130			jmp 	ReturnTrue
.8580					_UEFalse:
.8580	7a		ply				ply 								; restore Y
.8581	4c 3c 91	jmp $913c			jmp 	ReturnFalse 				; and return False
.8584					_UEType:
.8584	4c 1a a3	jmp $a31a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8587					ForCommand:
.8587	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8589	20 87 a6	jsr $a687			jsr 	StackOpen
.858c	a2 00		ldx #$00			ldx 	#0
.858e	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm
.8591	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8594	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8596	d0 49		bne $85e1			bne		_FCError
.8598	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.859a	20 ba 90	jsr $90ba			jsr 	CheckNextA
.859d	e8		inx				inx
.859e	20 d2 a0	jsr $a0d2			jsr 	EvaluateInteger 			; <from> in +1
.85a1	b1 30		lda ($30),y			lda 	(codePtr),y
.85a3	c8		iny				iny 								; consume it
.85a4	48		pha				pha 								; save on stack for later
.85a5	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.85a7	f0 04		beq $85ad			beq 	_FCNoSyntax
.85a9	c9 cb		cmp #$cb			cmp 	#KWD_TO
.85ab	d0 37		bne $85e4			bne 	_FCSyntaxError
.85ad					_FCNoSyntax:
.85ad	e8		inx				inx
.85ae	20 d2 a0	jsr $a0d2			jsr 	EvaluateInteger
.85b1	20 cb a6	jsr $a6cb			jsr 	STKSaveCodePosition 		; save loop back position
.85b4	68		pla				pla 								; restore DOWNTO or TO
.85b5	5a		phy				phy 								; save Y on the stack
.85b6	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85b8	f0 02		beq $85bc			beq 	_FCNotDownTo
.85ba	a9 02		lda #$02			lda 	#2
.85bc					_FCNotDownTo:
.85bc	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85bd	a0 10		ldy #$10			ldy 	#16
.85bf	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85c1	a0 06		ldy #$06			ldy 	#6
.85c3	ad 08 04	lda $0408			lda 	NSMantissa0
.85c6	91 34		sta ($34),y			sta 	(basicStack),y
.85c8	ad 10 04	lda $0410			lda 	NSMantissa1
.85cb	c8		iny				iny
.85cc	91 34		sta ($34),y			sta 	(basicStack),y
.85ce	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85d0	a2 01		ldx #$01			ldx 	#1
.85d2	20 e7 85	jsr $85e7			jsr 	FCIntegerToStack
.85d5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85d7	a2 02		ldx #$02			ldx 	#2
.85d9	20 e7 85	jsr $85e7			jsr 	FCIntegerToStack
.85dc	20 07 86	jsr $8607			jsr 	CopyIndexToReference
.85df	7a		ply				ply 								; restore position
.85e0	60		rts				rts
.85e1					_FCError:
.85e1	4c 1a a3	jmp $a31a			jmp 	TypeError
.85e4					_FCSyntaxError:
.85e4	4c 10 a3	jmp $a310			jmp 	SyntaxError
.85e7					FCIntegerToStack:
.85e7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.85ea	10 03		bpl $85ef			bpl	 	_FCNotNegative
.85ec	20 3b a1	jsr $a13b			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.85ef					_FCNotNegative:
.85ef	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.85f2	91 34		sta ($34),y			sta 	(basicStack),y
.85f4	c8		iny				iny
.85f5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.85f8	91 34		sta ($34),y			sta 	(basicStack),y
.85fa	c8		iny				iny
.85fb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.85fe	91 34		sta ($34),y			sta 	(basicStack),y
.8600	c8		iny				iny
.8601	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8604	91 34		sta ($34),y			sta 	(basicStack),y
.8606	60		rts				rts
.8607					CopyIndexToReference:
.8607	5a		phy				phy
.8608	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.860a	38		sec				sec 								; (because we copy from offset 8)
.860b	b1 34		lda ($34),y			lda 	(basicStack),y
.860d	e9 08		sbc #$08			sbc 	#8
.860f	85 36		sta $36				sta 	zTemp0
.8611	c8		iny				iny
.8612	b1 34		lda ($34),y			lda 	(basicStack),y
.8614	e9 00		sbc #$00			sbc 	#0
.8616	85 37		sta $37				sta 	zTemp0+1
.8618	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.861a	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.861c	b1 34		lda ($34),y			lda 	(basicStack),y
.861e	0a		asl a				asl 	a 							; into carry
.861f	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8621	90 14		bcc $8637			bcc 	_CITRNormal
.8623	38		sec				sec
.8624					_CITRNegative:
.8624	a9 00		lda #$00			lda 	#0
.8626	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8628	91 36		sta ($36),y			sta 	(zTemp0),y
.862a	c8		iny				iny
.862b	ca		dex				dex
.862c	d0 f6		bne $8624			bne 	_CITRNegative
.862e	88		dey				dey 								; look at MSB of mantissa
.862f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8631	09 80		ora #$80			ora 	#$80
.8633	91 36		sta ($36),y			sta 	(zTemp0),y
.8635	7a		ply				ply
.8636	60		rts				rts
.8637					_CITRNormal:
.8637	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8639	91 36		sta ($36),y			sta 	(zTemp0),y
.863b	c8		iny				iny
.863c	ca		dex				dex
.863d	d0 f8		bne $8637			bne 	_CITRNormal
.863f	7a		ply				ply 								; and exit.
.8640	60		rts				rts
.8641					NextCommand:
.8641	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8643	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8645	20 b3 a6	jsr $a6b3			jsr 	StackCheckFrame
.8648	5a		phy				phy
.8649	a0 10		ldy #$10			ldy 	#16 						; get the step count
.864b	b1 34		lda ($34),y			lda 	(basicStack),y
.864d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.864f	30 02		bmi $8653			bmi 	_NCStepNeg
.8651	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8653					_NCStepNeg:
.8653	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8655	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8657	18		clc				clc
.8658					_NCBump:
.8658	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.865a	91 34		sta ($34),y			sta 	(basicStack),y
.865c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.865e	c8		iny				iny 								; next byte
.865f	ca		dex				dex 								; do four times
.8660	d0 f6		bne $8658			bne 	_NCBump
.8662	20 07 86	jsr $8607			jsr		CopyIndexToReference		; copy it to the reference variable.
.8665	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8667	b1 34		lda ($34),y			lda 	(basicStack),y
.8669	0a		asl a				asl 	a 							; sign bit to carry
.866a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.866c	85 38		sta $38				sta 	zTemp1
.866e	90 02		bcc $8672			bcc 	_NCCompRev 					; use if step is +ve
.8670	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8672					_NCCompRev:
.8672	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8674	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8676	85 39		sta $39				sta 	zTemp1+1
.8678	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.867a	38		sec				sec
.867b					_NCCompare:
.867b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.867d	b1 34		lda ($34),y			lda 	(basicStack),y
.867f	a4 39		ldy $39				ldy 	zTemp1+1
.8681	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8683	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8685	e6 39		inc $39				inc 	zTemp1+1
.8687	ca		dex				dex 								; do it 4 times.
.8688	d0 f1		bne $867b			bne 	_NCCompare
.868a	50 02		bvc $868e			bvc 	_NCNoOverflow 				; convert to signed comparison
.868c	49 80		eor #$80			eor 	#$80
.868e					_NCNoOverflow:
.868e	7a		ply				ply 								; restore Y position
.868f	0a		asl a				asl 	a 							; is bit 7 set.
.8690	90 04		bcc $8696			bcc 	_NCLoopback 				; if no , >= so loop back
.8692	20 a5 a6	jsr $a6a5			jsr 	StackClose 					; exit the loop
.8695	60		rts				rts
.8696					_NCLoopBack:
.8696	20 dc a6	jsr $a6dc			jsr 	STKLoadCodePosition 		; loop back
.8699	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.869a					RectangleCommand:
.869a	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.869c	80 02		bra $86a0			bra 	ShapeDrawCmd
.869e					CircleCommand:
.869e	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.86a0					ShapeDrawCmd:
.86a0	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.86a3					ShapeDraw:
.86a3	0d 2b 06	ora $062b			ora 	gxFillSolid  				; adjust AXY for solid fill.
.86a6	4c 22 87	jmp $8722			jmp 	ExecuteGraphicCommand	 	; and complete
.86a9					SpriteCommand:
.86a9	a2 00		ldx #$00			ldx 	#0
.86ab	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get image number.
.86ae	5a		phy				phy
.86af	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.86b1	ae 08 04	ldx $0408			ldx 	NSMantissa0
.86b4	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.86b6	b0 0d		bcs $86c5			bcs 	_SCRange
.86b8	a0 ff		ldy #$ff			ldy 	#255
.86ba	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.86bd	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.86bf	7a		ply				ply
.86c0	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.86c3	80 5d		bra $8722			bra 	ExecuteGraphicCommand
.86c5					_SCRange:
.86c5	4c 15 a3	jmp $a315			jmp 	RangeError
.86c8					ImageCommand:
.86c8	a2 00		ldx #$00			ldx 	#0
.86ca	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get image number.
.86cd	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.86d0					ImageRunDraw:
.86d0	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.86d2	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.86d5	ad 31 06	lda $0631			lda 	gxDrawScale
.86d8	0a		asl a				asl 	a
.86d9	0a		asl a				asl 	a
.86da	0a		asl a				asl 	a
.86db	a8		tay				tay
.86dc	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.86de	ae 08 04	ldx $0408			ldx 	NSMantissa0
.86e1	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.86e4	60		rts				rts
.86e5					TextCommand:
.86e5	a2 00		ldx #$00			ldx 	#0
.86e7	20 ba a0	jsr $a0ba			jsr 	EvaluateString 				; get text
.86ea	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.86ed					TextRunDraw:
.86ed	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.86ef	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.86f2	a0 00		ldy #$00			ldy 	#0
.86f4					_IRDLoop:
.86f4	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.86f7	85 37		sta $37				sta 	zTemp0+1
.86f9	ad 08 04	lda $0408			lda 	NSMantissa0
.86fc	85 36		sta $36				sta 	zTemp0
.86fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8700	f0 13		beq $8715			beq 	_IRDExit
.8702	5a		phy				phy									; save string pos
.8703	48		pha				pha 								; save char
.8704	ad 31 06	lda $0631			lda 	gxDrawScale 				; get scale
.8707	0a		asl a				asl 	a
.8708	0a		asl a				asl 	a
.8709	0a		asl a				asl 	a
.870a	a8		tay				tay
.870b	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.870d	fa		plx				plx 								; char to draw
.870e	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.8711	7a		ply				ply 								; restore string pos
.8712	c8		iny				iny
.8713	90 df		bcc $86f4			bcc 	_IRDLoop 					; go back if no error.
.8715					_IRDExit:
.8715	60		rts				rts
.8716					PlotCommand:
.8716	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.8718	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.871b	80 05		bra $8722			bra 	ExecuteGraphicCommand
.871d					LineCommand:
.871d	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.871f	20 2e 87	jsr $872e			jsr 	RunGraphicsCommand
.8722					ExecuteGraphicCommand:
.8722	0d 2a 06	ora $062a			ora 	gxCommandID 				; make a full command
.8725	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw 				; draw it and exit
.8728	b0 01		bcs $872b			bcs 	_EGCError
.872a	60		rts				rts
.872b					_EGCError:
.872b	4c 10 a3	jmp $a310			jmp 	SyntaxError
.872e					RunGraphicsCommand:
.872e	8d 2a 06	sta $062a			sta 	gxCommandID					; save TODO graphics command.
.8731	68		pla				pla 								; pop handler address
.8732	fa		plx				plx
.8733	1a		inc a				inc 	a
.8734	d0 01		bne $8737			bne 	_RGINoCarry
.8736	e8		inx				inx
.8737					_RGINoCarry:
.8737	8d 2f 06	sta $062f			sta 	GXHandler
.873a	8e 30 06	stx $0630			stx 	GXHandler+1
.873d					_RGICommandLoop:
.873d	b1 30		lda ($30),y			lda 	(codePtr),y
.873f	c8		iny				iny
.8740	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.8742	f0 53		beq $8797			beq 	_RGI_To
.8744	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8746	f0 55		beq $879d			beq 	_RGI_Here
.8748	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.874a	f0 3d		beq $8789			beq 	_RGI_Exit
.874c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874e	f0 39		beq $8789			beq 	_RGI_Exit
.8750	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8752	f0 3e		beq $8792			beq 	_RGI_Frame
.8754	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.8756	f0 33		beq $878b			beq 	_RGI_Solid
.8758	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.875a	f0 4b		beq $87a7			beq 	_RGI_By
.875c	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.875e	f0 17		beq $8777			beq 	_RGI_Move2
.8760	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8762	f0 65		beq $87c9			beq 	_RGI_Dim
.8764	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8766	f0 78		beq $87e0			beq 	_RGI_Colour
.8768	c9 af		cmp #$af			cmp 	#KWD_COLOR
.876a	f0 74		beq $87e0			beq 	_RGI_Colour
.876c	ae 2a 06	ldx $062a			ldx 	gxCommandID
.876f	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.8771	d0 03		bne $8776			bne 	_RGI_Move 					; move
.8773	4c 0a 88	jmp $880a			jmp		_RGI_SpriteInstructions
.8776					_RGI_Move:
.8776	88		dey				dey 								; unpick get.
.8777					_RGI_Move2:
.8777	20 30 88	jsr $8830			jsr 	GCGetCoordinatePair 		; move to here
.877a	20 57 88	jsr $8857			jsr 	GCCopyPairToStore 			; save
.877d	5a		phy				phy
.877e	20 4d 88	jsr $884d			jsr 	GCLoadAXY 					; load in
.8781	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.8783	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.8786	7a		ply				ply
.8787	80 b4		bra $873d			bra 	_RGICommandLoop 			; and go round
.8789					_RGI_Exit:
.8789	88		dey				dey 								; unpick : / EOL
.878a	60		rts				rts
.878b					_RGI_Solid:
.878b	a9 02		lda #$02			lda 	#2
.878d	8d 2b 06	sta $062b			sta 	gxFillSolid
.8790	80 ab		bra $873d			bra 	_RGICommandLoop
.8792					_RGI_Frame:
.8792	9c 2b 06	stz $062b			stz 	gxFillSolid
.8795	80 a6		bra $873d			bra 	_RGICommandLoop
.8797					_RGI_To:
.8797	20 30 88	jsr $8830			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.879a	20 57 88	jsr $8857			jsr 	GCCopyPairToStore
.879d					_RGI_Here:
.879d	5a		phy				phy
.879e	20 4d 88	jsr $884d			jsr 	GCLoadAXY 					; load it into AXY
.87a1	20 07 88	jsr $8807			jsr 	_RGICallHandler 			; go do whatever it is.
.87a4	7a		ply				ply
.87a5	80 96		bra $873d			bra 	_RGICommandLoop 			; and go round
.87a7					_RGI_By:
.87a7	20 3d 88	jsr $883d			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.87aa	18		clc				clc
.87ab	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.87ae	6d 2c 06	adc $062c			adc 	gxxPos
.87b1	8d 2c 06	sta $062c			sta 	gxXPos
.87b4	ad 11 04	lda $0411			lda 	NSMantissa1+1
.87b7	6d 2d 06	adc $062d			adc 	gxxPos+1
.87ba	8d 2d 06	sta $062d			sta 	gxXPos+1
.87bd	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.87c0	18		clc				clc
.87c1	6d 2e 06	adc $062e			adc 	gxYPos
.87c4	8d 2e 06	sta $062e			sta 	gxYPos
.87c7	80 d4		bra $879d			bra 	_RGI_Here
.87c9					_RGI_Dim:
.87c9	a2 01		ldx #$01			ldx	 	#1
.87cb	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger
.87ce	ad 09 04	lda $0409			lda 	NSMantissa0+1
.87d1	c9 00		cmp #$00			cmp 	#0
.87d3	f0 2f		beq $8804			beq 	_RGIRange
.87d5	c9 09		cmp #$09			cmp 	#8+1
.87d7	b0 2b		bcs $8804			bcs		_RGIRange
.87d9	3a		dec a				dec 	a
.87da	8d 31 06	sta $0631			sta 	gxDrawScale
.87dd	4c 3d 87	jmp $873d			jmp 	_RGICommandLoop
.87e0					_RGI_Colour:
.87e0	a2 01		ldx #$01			ldx 	#1 							; colour
.87e2	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger
.87e5	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.87e7	20 86 a1	jsr $a186			jsr 	NSMSetZero
.87ea	b1 30		lda ($30),y			lda 	(codePtr),y
.87ec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.87ee	d0 04		bne $87f4			bne 	_RGICDefaultMode
.87f0	c8		iny				iny
.87f1	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger
.87f4					_RGICDefaultMode:
.87f4	5a		phy				phy
.87f5	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.87f7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.87fa	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.87fd	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.8800	7a		ply				ply
.8801	4c 3d 87	jmp $873d			jmp 	_RGICommandLoop 			; and go round
.8804					_RGIRange:
.8804	4c 15 a3	jmp $a315			jmp 	RangeError
.8807					_RGICallHandler:
.8807	6c 2f 06	jmp ($062f)			jmp 	(GXHandler)
.880a					_RGI_SpriteInstructions:
.880a	c9 be		cmp #$be			cmp 	#KWD_OFF
.880c	f0 07		beq $8815			beq 	_RGISpriteOff
.880e	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.8810	f0 13		beq $8825			beq 	_RGISetImage
.8812	4c 76 87	jmp $8776			jmp 	_RGI_Move
.8815					_RGISpriteOff:
.8815	5a		phy				phy
.8816	a0 01		ldy #$01			ldy 	#1
.8818	a2 00		ldx #$00			ldx 	#0
.881a					_RGIDoCommandLoop:
.881a	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.881c	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.881f	7a		ply				ply
.8820	b0 e2		bcs $8804			bcs 	_RGIRange
.8822	4c 3d 87	jmp $873d			jmp 	_RGICommandLoop
.8825					_RGISetImage:
.8825	a2 01		ldx #$01			ldx 	#1
.8827	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger
.882a	5a		phy				phy
.882b	aa		tax				tax
.882c	a0 00		ldy #$00			ldy 	#0
.882e	80 ea		bra $881a			bra 	_RGIDoCommandLoop
.8830					GCGetCoordinatePair:
.8830	a2 01		ldx #$01			ldx 	#1
.8832	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.8835	20 b2 90	jsr $90b2			jsr 	CheckComma
.8838	e8		inx				inx
.8839	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.883c	60		rts				rts
.883d					GCSignedCoordinatePair:
.883d	a2 01		ldx #$01			ldx 	#1
.883f	20 f3 a0	jsr $a0f3			jsr 	Evaluate16BitIntegerSigned
.8842	20 b2 90	jsr $90b2			jsr 	CheckComma
.8845	e8		inx				inx
.8846	20 f3 a0	jsr $a0f3			jsr 	Evaluate16BitIntegerSigned
.8849	60		rts				rts
.884a					_GCCPRange:
.884a	4c 15 a3	jmp $a315			jmp 	RangeError
.884d					GCLoadAXY:
.884d	ad 2d 06	lda $062d			lda 	gxXPos+1
.8850	ae 2c 06	ldx $062c			ldx 	gxXPos
.8853	ac 2e 06	ldy $062e			ldy 	gxYPos
.8856	60		rts				rts
.8857					GCCopyPairToStore:
.8857	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.885a	8d 2c 06	sta $062c			sta 	gxXPos
.885d	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8860	8d 2d 06	sta $062d			sta 	gxXPos+1
.8863	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8866	8d 2e 06	sta $062e			sta 	gxYPos
.8869	60		rts				rts
.062a					gxCommandID:
>062a							.fill 	1
.062b					gxFillSolid:
>062b							.fill 	1
.062c					gxXPos:
>062c							.fill 	2
.062e					gxYPos:
>062e							.fill 	1
.062f					gxHandler:
>062f							.fill 	2
.0631					gxDrawScale:
>0631							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.886a					BitmapCtrl:
.886a	b1 30		lda ($30),y			lda 	(codePtr),y
.886c	c8		iny				iny
.886d	a2 01		ldx #$01			ldx 	#1
.886f	c9 bf		cmp #$bf			cmp 	#KWD_ON
.8871	f0 11		beq $8884			beq 	BitmapSwitch
.8873	ca		dex				dex
.8874	c9 be		cmp #$be			cmp 	#KWD_OFF
.8876	f0 0c		beq $8884			beq 	BitmapSwitch
.8878	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get the colour
.887b	5a		phy				phy
.887c	aa		tax				tax
.887d	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.887f	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.8882	7a		ply				ply
.8883	60		rts				rts
.8884					BitmapSwitch:
.8884	5a		phy				phy
.8885	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.8887	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.8889	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.888c	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.888e	a0 00		ldy #$00			ldy 	#0
.8890	a2 ff		ldx #$ff			ldx 	#$FF
.8892	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.8895	9c 2b 06	stz $062b			stz 	gxFillSolid
.8898	9c 2c 06	stz $062c			stz 	gxXPos
.889b	9c 2d 06	stz $062d			stz 	gxXPos+1
.889e	9c 2e 06	stz $062e			stz 	gxYPos
.88a1	9c 31 06	stz $0631			stz 	gxDrawScale
.88a4	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.88a6	a2 00		ldx #$00			ldx 	#0
.88a8	a0 00		ldy #$00			ldy 	#0
.88aa	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.88ad	7a		ply				ply
.88ae	60		rts				rts
.88af					SpritesCtrl:
.88af	b1 30		lda ($30),y			lda 	(codePtr),y
.88b1	c8		iny				iny
.88b2	a2 01		ldx #$01			ldx 	#1
.88b4	c9 bf		cmp #$bf			cmp 	#KWD_ON
.88b6	f0 08		beq $88c0			beq 	SpriteSwitch
.88b8	ca		dex				dex
.88b9	c9 be		cmp #$be			cmp 	#KWD_OFF
.88bb	f0 03		beq $88c0			beq 	SpriteSwitch
.88bd	4c 10 a3	jmp $a310			jmp 	SyntaxError
.88c0					SpriteSwitch:
.88c0	5a		phy				phy
.88c1	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.88c3	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.88c5	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.88c8	7a		ply				ply
.88c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.88ca					GfxCommand:
.88ca	a2 00		ldx #$00			ldx 	#0
.88cc	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; command
.88cf	20 b2 90	jsr $90b2			jsr 	CheckComma
.88d2	e8		inx				inx
.88d3	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger 		; X
.88d6	20 b2 90	jsr $90b2			jsr 	CheckComma
.88d9	e8		inx				inx
.88da	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; Y
.88dd	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.88e0	4a		lsr a				lsr 	a
.88e1	d0 16		bne $88f9			bne 	_GfxError
.88e3	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.88e6	b0 11		bcs $88f9			bcs 	_GfxError 					; bit 7 should have been zero
.88e8	5a		phy				phy 								; save pos
.88e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.88ec	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.88ef	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.88f2	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw
.88f5	b0 02		bcs $88f9			bcs 	_GfxError
.88f7	7a		ply				ply 								; restore pos and exit.
.88f8	60		rts				rts
.88f9					_GfxError:
.88f9	4c 15 a3	jmp $a315			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.88fc					Command_GOSUB:
.88fc	a2 00		ldx #$00			ldx 	#0
.88fe	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8901	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8903	20 87 a6	jsr $a687			jsr 	StackOpen 					; create frame
.8906	20 cb a6	jsr $a6cb			jsr 	STKSaveCodePosition 		; save current position
.8909	4c 1f 89	jmp $891f			jmp 	GotoStackX
.890c					Command_RETURN:
.890c	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.890e	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8910	20 b3 a6	jsr $a6b3			jsr 	StackCheckFrame
.8913	20 dc a6	jsr $a6dc			jsr 	STKLoadCodePosition 		; restore code position
.8916	20 a5 a6	jsr $a6a5			jsr 	StackClose
.8919	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.891a					GotoCommand:
.891a	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.891c	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.891f					GotoStackX:
.891f	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8922	48		pha				pha 								; it is slightly inefficient, just in cases.
.8923	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8926	fa		plx				plx
.8927	20 32 a6	jsr $a632			jsr 	MemorySearch 				; transfer to line number AX.
.892a	90 05		bcc $8931			bcc 	_GotoError 					; not found, off end.
.892c	d0 03		bne $8931			bne 	_GotoError 					; not found exactly
.892e	4c 53 8d	jmp $8d53			jmp 	RunNewLine 					; and go straight to new line code.
.8931					_GotoError:
.8931	a9 0d		lda #$0d		lda	#13
.8933	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.8936					UnaryHit:
.8936	fa		plx				plx
.8937	a9 36		lda #$36			lda 	#zTemp0
.8939	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get sprite number 0
.893c	20 b2 90	jsr $90b2			jsr 	CheckComma
.893f	e8		inx				inx
.8940	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get sprite number 1
.8943	20 aa 90	jsr $90aa			jsr		CheckRightBracket
.8946	ca		dex				dex 								; fix back up again.
.8947	da		phx				phx 								; save X/Y
.8948	5a		phy				phy
.8949	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.894c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.894f	aa		tax				tax
.8950	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.8952	20 1b a8	jsr $a81b			jsr 	GXGraphicDraw 				; calculate result
.8955	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.8956	7a		ply				ply 								; restore XY
.8957	fa		plx				plx
.8958	20 88 a1	jsr $a188			jsr 	NSMSetByte 					; return the hit result
.895b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.895c					IfCommand:
.895c	a2 00		ldx #$00			ldx 	#0 							; If what.
.895e	20 af a0	jsr $a0af			jsr 	EvaluateNumber
.8961	b1 30		lda ($30),y			lda 	(codePtr),y
.8963	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8965	d0 0a		bne $8971			bne 	_IFStructured
.8967	c8		iny				iny 								; consume THEN
.8968	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; is it zero
.896b	f0 01		beq $896e			beq 	_IfFail 					; if fail, go to next line
.896d	60		rts				rts 								; if THEN just continue
.896e					_IfFail:
.896e	4c b8 8d	jmp $8db8			jmp 	EOLCommand
.8971					_IfStructured:
.8971	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; is it zero
.8974	d0 07		bne $897d			bne 	_IfExit 					; if not, then continue normally.
.8976	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8978	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.897a	20 05 90	jsr $9005			jsr 	ScanForward 				; and run from there/
.897d					_IfExit:
.897d	60		rts				rts
.897e					ElseCode:
.897e	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8980	aa		tax				tax 								; so just go to the structure exit
.8981	20 05 90	jsr $9005			jsr 	ScanForward
.8984	60		rts				rts
.8985					EndIf:
.8985	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.8986					UnaryJoyX:
.8986	18		clc				clc
.8987	80 01		bra $898a			bra 	JoyMain
.8989					UnaryJoyY:
.8989	38		sec				sec
.898a					JoyMain:
.898a	fa		plx				plx 								; get pos
.898b	08		php				php 								; save carry (set for Y)
.898c	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; ignore the parameter
.898f	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.8992	20 0c a5	jsr $a50c			jsr 	EXTReadController 			; read the controller.
.8995	28		plp				plp
.8996	90 02		bcc $899a			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.8998	4a		lsr a				lsr 	a
.8999	4a		lsr a				lsr 	a
.899a					_JMNoShift:
.899a	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.899b	b0 0a		bcs $89a7			bcs 	_JMIsRight
.899d	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.899e	b0 04		bcs $89a4			bcs 	_JMIsLeft
.89a0	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; zero result
.89a3	60		rts				rts
.89a4					_JMIsLeft:
.89a4	4c 30 91	jmp $9130			jmp 	ReturnTrue
.89a7					_JMIsRight:
.89a7	a9 01		lda #$01			lda 	#1
.89a9	20 88 a1	jsr $a188			jsr 	NSMSetByte
.89ac	60		rts				rts
.89ad					UnaryJoyB:
.89ad	fa		plx				plx 								; get pos
.89ae	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; ignore the parameter
.89b1	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.89b4	20 0c a5	jsr $a50c			jsr 	EXTReadController 			; read the controller.
.89b7	4a		lsr a				lsr 	a
.89b8	4a		lsr a				lsr 	a
.89b9	4a		lsr a				lsr 	a
.89ba	4a		lsr a				lsr 	a
.89bb	29 01		and #$01			and 	#1
.89bd	20 88 a1	jsr $a188			jsr 	NSMSetByte
.89c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.89c1					LetCommand:
.89c1	a2 00		ldx #$00			ldx 	#0
.89c3	b1 30		lda ($30),y			lda 	(codePtr),y
.89c5	c9 10		cmp #$10			cmp 	#KWD_AT
.89c7	d0 16		bne $89df			bne 	_LCStandard
.89c9	c8		iny				iny 								; skip equal
.89ca	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm 				; get a number
.89cd	20 90 99	jsr $9990			jsr 	Dereference 				; dereference it
.89d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.89d3	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.89d5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.89d8	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.89da	d0 10		bne $89ec			bne 	_LCMain
.89dc	4c 1a a3	jmp $a31a			jmp 	TypeError 					; was a reference before.
.89df					_LCStandard:
.89df	ad 5a 96	lda $965a			lda 	PrecedenceLevel+"*"			; precedence > this
.89e2	20 74 96	jsr $9674			jsr 	EvaluateExpressionAtPrecedence
.89e5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.89e8	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.89ea	f0 0e		beq $89fa			beq 	_LetGoProc 					; it's a procedure call.
.89ec					_LCMain:
.89ec	a9 3d		lda #$3d			lda 	#"=" 						; check =
.89ee	20 ba 90	jsr $90ba			jsr 	CheckNextA
.89f1	e8		inx				inx 								; RHS
.89f2	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue
.89f5	ca		dex				dex
.89f6	20 fd 89	jsr $89fd			jsr 	AssignVariable
.89f9	60		rts				rts
.89fa					_LetGoProc:
.89fa	4c 20 8c	jmp $8c20			jmp 	CallProcedure
.89fd					AssignVariable:
.89fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8a00	48		pha				pha 								; save a copy
.8a01	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8a04	29 10		and #$10			and 	#NSBIsString
.8a06	d0 0b		bne $8a13			bne 	_ASError
.8a08	68		pla				pla 								; get back
.8a09	29 10		and #$10			and 	#NSBIsString 				; check type
.8a0b	d0 03		bne $8a10			bne 	_ASString
.8a0d	4c b8 98	jmp $98b8			jmp 	AssignNumber
.8a10					_ASString:
.8a10	4c 26 99	jmp $9926			jmp 	AssignString
.8a13					_ASError:
.8a13	4c 1a a3	jmp $a31a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8a16					Command_List:
.8a16	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.8a19	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8a1c	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8a1f	a9 ff		lda #$ff			lda 	#$FF
.8a21	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8a24	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8a27	b1 30		lda ($30),y			lda 	(codePtr),y
.8a29	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a2b	f0 1e		beq $8a4b			beq 	_CLSecond
.8a2d	20 a9 8a	jsr $8aa9			jsr 	CLIsDigit 					; if not digit, list all
.8a30	b0 24		bcs $8a56			bcs 	_CLStart
.8a32	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8a34	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.8a37	b1 30		lda ($30),y			lda 	(codePtr),y
.8a39	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a3b	f0 0e		beq $8a4b			beq 	_CLSecond 					; if so go get it
.8a3d	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8a40	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8a43	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8a46	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8a49	80 0b		bra $8a56			bra 	_CLStart
.8a4b					_CLSecond:
.8a4b	c8		iny				iny 								; consume comma
.8a4c	20 a9 8a	jsr $8aa9			jsr 	CLIsDigit 					; digit found
.8a4f	b0 05		bcs $8a56			bcs 	_CLStart 					; if not, continue listing
.8a51	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8a53	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger
.8a56					_CLStart
.8a56	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a58	85 30		sta $30				sta 	codePtr
.8a5a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a5c	85 31		sta $31				sta 	codePtr+1
.8a5e					_CLLoop:
.8a5e	20 09 a5	jsr $a509			jsr 	EXTBreakCheck 				; break check
.8a61	f0 30		beq $8a93			beq 	_CLExit
.8a63	b2 30		lda ($30)			lda 	(codePtr)
.8a65	f0 2c		beq $8a93			beq 	_CLExit
.8a67	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8a69	20 96 8a	jsr $8a96			jsr 	CLCompareLineNo
.8a6c	90 18		bcc $8a86			bcc 	_CLNext
.8a6e	a2 07		ldx #$07			ldx 	#7
.8a70	20 96 8a	jsr $8a96			jsr 	CLCompareLineNo
.8a73	f0 02		beq $8a77			beq 	_CLDoThisOne
.8a75	b0 0f		bcs $8a86			bcs 	_CLNext
.8a77					_CLDoThisOne:
.8a77	20 9a b4	jsr $b49a			jsr 	ListConvertLine 			; convert line into token Buffer
.8a7a	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8a7c	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.8a7e	20 1c 91	jsr $911c			jsr 	PrintStringXA
.8a81	a9 0d		lda #$0d			lda 	#13 						; new line
.8a83	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.8a86					_CLNext:
.8a86	18		clc				clc
.8a87	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a89	65 30		adc $30				adc 	codePtr
.8a8b	85 30		sta $30				sta 	codePtr
.8a8d	90 02		bcc $8a91			bcc 	_CREExit
.8a8f	e6 31		inc $31				inc 	codePtr+1
.8a91					_CREExit:
.8a91	80 cb		bra $8a5e			bra 	_CLLoop
.8a93					_CLExit:
.8a93	4c 5f 83	jmp $835f			jmp 	WarmStart
.8a96					CLCompareLineNo:
.8a96	38		sec				sec
.8a97	a0 01		ldy #$01			ldy 	#1
.8a99	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9b	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8a9e	85 36		sta $36				sta 	zTemp0
.8aa0	c8		iny				iny
.8aa1	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa3	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8aa6	05 36		ora $36				ora 	zTemp0
.8aa8	60		rts				rts
.8aa9					CLIsDigit:
.8aa9	b1 30		lda ($30),y			lda 	(codePtr),y
.8aab	c9 30		cmp #$30			cmp 	#"0"
.8aad	90 03		bcc $8ab2			bcc	 	_CLIDExitFalse
.8aaf	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ab1	60		rts				rts
.8ab2					_CLIDExitFalse:
.8ab2	38		sec				sec
.8ab3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8ab4					Command_LOCAL:
.8ab4	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8ab6	20 c2 8a	jsr $8ac2			jsr 	LocaliseNextTerm 			; convert term to a local.
.8ab9	b1 30		lda ($30),y			lda 	(codePtr),y
.8abb	c8		iny				iny
.8abc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8abe	f0 f4		beq $8ab4			beq 	Command_LOCAL
.8ac0	88		dey				dey 								; unpick pre-get
.8ac1	60		rts				rts
.8ac2					LocaliseNextTerm:
.8ac2	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm 				; evaluate the term
.8ac5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ac8	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8aca	f0 61		beq $8b2d			beq		_LNTError
.8acc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8acf	85 36		sta $36				sta 	zTemp0
.8ad1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ad4	85 37		sta $37				sta  	zTemp0+1
.8ad6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ad9	29 10		and #$10			and 	#NSBIsString
.8adb	d0 1e		bne $8afb			bne 	_LNTPushString
.8add	5a		phy				phy
.8ade	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8ae0					_LNTPushNumLoop:
.8ae0	b1 36		lda ($36),y			lda		(zTemp0),y
.8ae2	20 65 a6	jsr $a665			jsr 	StackPushByte
.8ae5	c8		iny				iny
.8ae6	c0 05		cpy #$05			cpy 	#5
.8ae8	d0 f6		bne $8ae0			bne 	_LNTPushNumLoop
.8aea	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8aec	20 65 a6	jsr $a665			jsr 	StackPushByte
.8aef	a5 37		lda $37				lda 	zTemp0+1
.8af1	20 65 a6	jsr $a665			jsr 	StackPushByte
.8af4	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8af6	20 65 a6	jsr $a665			jsr 	StackPushByte
.8af9	7a		ply				ply
.8afa	60		rts				rts
.8afb					_LNTPushString:
.8afb	5a		phy				phy
.8afc	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8afe	85 38		sta $38				sta 	zTemp1
.8b00	a0 01		ldy #$01			ldy 	#1
.8b02	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b04	85 39		sta $39				sta 	zTemp1+1
.8b06	a0 00		ldy #$00			ldy 	#0 							; output string
.8b08	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8b0a	f0 0a		beq $8b16			beq 	_LNTStringOut
.8b0c					_LNTPushStrLoop:
.8b0c	b1 38		lda ($38),y			lda 	(zTemp1),y
.8b0e	f0 06		beq $8b16			beq 	_LNTStringOut
.8b10	20 65 a6	jsr $a665			jsr 	StackPushByte
.8b13	c8		iny				iny
.8b14	80 f6		bra $8b0c			bra 	_LNTPushStrLoop
.8b16					_LNTStringOut:
.8b16	98		tya				tya									; output length
.8b17	20 65 a6	jsr $a665			jsr 	StackPushByte
.8b1a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b1d	20 65 a6	jsr $a665			jsr 	StackPushByte
.8b20	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b23	20 65 a6	jsr $a665			jsr 	StackPushByte
.8b26	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b28	20 65 a6	jsr $a665			jsr 	StackPushByte
.8b2b	7a		ply				ply
.8b2c	60		rts				rts
.8b2d					_LNTError:
.8b2d	4c 10 a3	jmp $a310			jmp 	SyntaxError
.8b30					LocalPopValue:
.8b30	20 7e a6	jsr $a67e			jsr 	StackPopByte
.8b33	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8b35	d0 17		bne $8b4e			bne 	_LPVString
.8b37	20 7e a6	jsr $a67e			jsr 	StackPopByte 				; address
.8b3a	85 37		sta $37				sta 	zTemp0+1
.8b3c	20 7e a6	jsr $a67e			jsr 	StackPopByte
.8b3f	85 36		sta $36				sta 	zTemp0
.8b41	5a		phy				phy
.8b42	a0 04		ldy #$04			ldy 	#4 							; copy back
.8b44					_LPVNumberCopy:
.8b44	20 7e a6	jsr $a67e			jsr 	StackPopByte
.8b47	91 36		sta ($36),y			sta 	(zTemp0),y
.8b49	88		dey				dey
.8b4a	10 f8		bpl $8b44			bpl 	_LPVNumberCopy
.8b4c	7a		ply				ply 								; and complete
.8b4d	60		rts				rts
.8b4e					_LPVString:
.8b4e	20 7e a6	jsr $a67e			jsr 	StackPopByte 				; address of record => zTemp0
.8b51	85 37		sta $37				sta 	zTemp0+1
.8b53	20 7e a6	jsr $a67e			jsr 	StackPopByte
.8b56	85 36		sta $36				sta 	zTemp0
.8b58	5a		phy				phy
.8b59	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8b5b	85 38		sta $38				sta 	zTemp1
.8b5d	a0 01		ldy #$01			ldy 	#1
.8b5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b61	85 39		sta $39				sta 	zTemp1+1
.8b63	20 7e a6	jsr $a67e			jsr 	StackPopByte 				; # to get => y
.8b66	a8		tay				tay
.8b67	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8b69	f0 0e		beq $8b79			beq 	_LPVStringCopied
.8b6b	a9 00		lda #$00			lda 	#0 							; NULL on end
.8b6d	91 38		sta ($38),y			sta 	(zTemp1),y
.8b6f					_LPVStringCopy:
.8b6f	88		dey				dey
.8b70	30 07		bmi $8b79			bmi 	_LPVStringCopied
.8b72	20 7e a6	jsr $a67e			jsr 	StackPopByte
.8b75	91 38		sta ($38),y			sta 	(zTemp1),y
.8b77	80 f6		bra $8b6f			bra 	_LPVStringCopy
.8b79					_LPVStringCopied:
.8b79	fa		plx				plx
.8b7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b7b					NewCommand:
.8b7b	20 10 a6	jsr $a610			jsr 	MemoryNew
.8b7e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b81	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear everything.
.8b84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.8b85					PaletteCommand:
.8b85	a2 00		ldx #$00			ldx 	#0
.8b87	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; colour
.8b8a	20 b2 90	jsr $90b2			jsr 	CheckComma
.8b8d	e8		inx				inx
.8b8e	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger 		; r
.8b91	20 b2 90	jsr $90b2			jsr 	CheckComma
.8b94	e8		inx				inx
.8b95	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; g
.8b98	20 b2 90	jsr $90b2			jsr 	CheckComma
.8b9b	e8		inx				inx
.8b9c	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; b
.8b9f	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.8ba2	85 36		sta $36				sta 	zTemp0
.8ba4	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.8ba6	85 37		sta $37				sta 	zTemp0+1
.8ba8	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.8baa	26 37		rol $37				rol	 	zTemp0+1
.8bac	06 36		asl $36				asl 	zTemp0
.8bae	26 37		rol $37				rol	 	zTemp0+1
.8bb0	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.8bb2	85 01		sta $01				sta 	1
.8bb4	5a		phy				phy
.8bb5	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.8bb8	92 36		sta ($36)			sta 	(zTemp0)
.8bba	a0 01		ldy #$01			ldy 	#1
.8bbc	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8bbf	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc1	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8bc4	c8		iny				iny
.8bc5	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc7	7a		ply				ply
.8bc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8bc9					Command_Print:
.8bc9	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8bca					_CPLoop:
.8bca	08		php				php 								; save last action flag
.8bcb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcd	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8bcf	f0 46		beq $8c17			beq 	_CPExit
.8bd1	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8bd3	f0 42		beq $8c17			beq 	_CPExit
.8bd5	68		pla				pla 								; throw last action flag
.8bd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8	c8		iny				iny
.8bd9	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8bdb	f0 37		beq $8c14			beq 	_CPContinueWithSameLine
.8bdd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8bdf	f0 2e		beq $8c0f			beq 	_CPTab
.8be1	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8be3	f0 26		beq $8c0b			beq 	_CPNewLine
.8be5	88		dey				dey 								; undo the get.
.8be6	a2 00		ldx #$00			ldx 	#0
.8be8	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; get a value into slot 0
.8beb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8bee	29 10		and #$10			and 	#NSBIsString
.8bf0	f0 0b		beq $8bfd			beq 	_CPNumber
.8bf2	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8bf5	ad 08 04	lda $0408			lda 	NSMantissa0
.8bf8	20 1c 91	jsr $911c			jsr 	PrintStringXA
.8bfb	80 cc		bra $8bc9			bra 	Command_Print 				; loop round clearing carry so NL if end
.8bfd					_CPNumber:
.8bfd	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8bff	20 7c 9f	jsr $9f7c			jsr 	ConvertNumberToString 		; convert to string
.8c02	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8c04	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.8c06	20 1c 91	jsr $911c			jsr 	PrintStringXA
.8c09	80 be		bra $8bc9			bra 	Command_Print 				; loop round clearing carry so NL if end
.8c0b					_CPNewLine:
.8c0b	a9 0d		lda #$0d			lda 	#13
.8c0d	80 02		bra $8c11			bra 	_CPPrintChar
.8c0f					_CPTab:
.8c0f	a9 09		lda #$09			lda 	#9 							; print TAB
.8c11					_CPPrintChar:
.8c11	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.8c14					_CPContinueWithSameLine:
.8c14	38		sec				sec 								; loop round with carry set, which
.8c15	80 b3		bra $8bca			bra 	_CPLoop 					; will inhibit final CR
.8c17					_CPExit:
.8c17	28		plp				plp 								; get last action flag
.8c18	b0 05		bcs $8c1f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8c1a	a9 0d		lda #$0d			lda 	#13 						; print new line
.8c1c	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.8c1f					_CPExit2:
.8c1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8c20					CallProcedure:
.8c20	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8c22	b1 30		lda ($30),y			lda 	(codePtr),y
.8c24	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8c26	f0 0c		beq $8c34			beq 	_CPEndParam
.8c28					_CPParamLoop:
.8c28	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; get parameter onto stack
.8c2b	e8		inx				inx 								; bump next stack
.8c2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2e	c8		iny				iny
.8c2f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8c31	f0 f5		beq $8c28			beq 	_CPParamLoop
.8c33	88		dey				dey 								; unpick.
.8c34					_CPEndParam:
.8c34	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8c37	c8		iny				iny									; skip right bracket
.8c38	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8c3a	20 87 a6	jsr $a687			jsr 	StackOpen
.8c3d	20 cb a6	jsr $a6cb			jsr 	STKSaveCodePosition 		; save loop position
.8c40	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8c43	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8c45	ad 10 04	lda $0410			lda 	NSMantissa1
.8c48	85 37		sta $37				sta 	zTemp0+1
.8c4a	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8c4c	b2 36		lda ($36)			lda 	(zTemp0)
.8c4e	85 30		sta $30				sta 	safePtr
.8c50	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c52	85 31		sta $31				sta 	safePtr+1
.8c54	c8		iny				iny
.8c55	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c57	85 32		sta $32				sta 	safePtr+2
.8c59	c8		iny				iny
.8c5a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c5c	85 33		sta $33				sta 	safePtr+3
.8c5e	c8		iny				iny 								; get Y offset -> Y
.8c5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c61	a8		tay				tay
.8c62	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c64	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8c67	f0 13		beq $8c7c			beq 	_ParamExit 					; if so, exit.
.8c69					_ParamExtract:
.8c69	ca		dex				dex 								; put a local term on the level before
.8c6a	20 c2 8a	jsr $8ac2			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c6d	20 fd 89	jsr $89fd			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c70	e8		inx				inx 								; advance to next parameter to do.
.8c71	e8		inx				inx
.8c72	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8c75	f0 05		beq $8c7c			beq 	_ParamExit
.8c77	20 b2 90	jsr $90b2			jsr 	CheckComma 					; comma seperating parameters
.8c7a	80 ed		bra $8c69			bra 	_ParamExtract
.8c7c					_ParamExit:
.8c7c	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; check )
.8c7f	60		rts				rts 								; and continue from here
.8c80					Command_ENDPROC:
.8c80	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8c82	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8c84	20 b3 a6	jsr $a6b3			jsr 	StackCheckFrame
.8c87	20 dc a6	jsr $a6dc			jsr 	STKLoadCodePosition 		; restore code position
.8c8a	20 a5 a6	jsr $a6a5			jsr 	StackClose
.8c8d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c8e					Command_Read:
.8c8e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c90	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm
.8c93	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c96	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c98	f0 4a		beq $8ce4			beq 	_CRSyntax 					; check reference (bit 0)
.8c9a	20 2d 8d	jsr $8d2d			jsr 	SwapDataCodePtrs 			; swap code and data
.8c9d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ca0	d0 20		bne $8cc2			bne 	_CRContinueData
.8ca2					_CRKeepSearching:
.8ca2	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8ca4	aa		tax				tax
.8ca5	20 05 90	jsr $9005			jsr 	ScanForward
.8ca8	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.8caa	f0 16		beq $8cc2			beq 	_CRHaveData 				; found it
.8cac	18		clc				clc
.8cad	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8caf	65 30		adc $30				adc 	codePtr
.8cb1	85 30		sta $30				sta 	codePtr
.8cb3	90 02		bcc $8cb7			bcc 	_CREExit
.8cb5	e6 31		inc $31				inc 	codePtr+1
.8cb7					_CREExit:
.8cb7	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8cb9	b2 30		lda ($30)			lda 	(codePtr)
.8cbb	d0 e5		bne $8ca2			bne 	_CRKeepSearching
.8cbd	a9 0b		lda #$0b		lda	#11
.8cbf	4c c3 90	jmp $90c3		jmp	ErrorHandler
.8cc2					_CRHaveData:
.8cc2					_CRContinueData:
.8cc2	a2 01		ldx #$01			ldx 	#1
.8cc4	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8cc7	ca		dex				dex
.8cc8	20 fd 89	jsr $89fd			jsr		AssignVariable 				; do the assignment
.8ccb	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8cce	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8cd2	d0 04		bne $8cd8			bne 	_CRSwapBack
.8cd4	c8		iny				iny 								; consume comma
.8cd5	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8cd8					_CRSwapBack:
.8cd8	20 2d 8d	jsr $8d2d			jsr 	SwapDataCodePtrs			; swap them back.
.8cdb	b1 30		lda ($30),y			lda 	(codePtr),y
.8cdd	c8		iny				iny
.8cde	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ce0	f0 ac		beq $8c8e			beq 	Command_Read 				; if so go round again.
.8ce2	88		dey				dey 								; unpick get.
.8ce3	60		rts				rts
.8ce4					_CRSyntax:
.8ce4	4c 10 a3	jmp $a310			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ce7					RemCommand:
.8ce7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce9	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ceb	d0 06		bne $8cf3			bne 	_RMExit
.8ced	c8		iny				iny
.8cee	98		tya				tya
.8cef	38		sec				sec
.8cf0	71 30		adc ($30),y			adc 	(codePtr),y
.8cf2	a8		tay				tay
.8cf3					_RMExit:
.8cf3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8cf4					Command_REPEAT:
.8cf4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8cf6	20 87 a6	jsr $a687			jsr 	StackOpen
.8cf9	20 cb a6	jsr $a6cb			jsr 	STKSaveCodePosition 		; save loop position
.8cfc	60		rts				rts
.8cfd					Command_UNTIL:
.8cfd	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8cff	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8d01	20 b3 a6	jsr $a6b3			jsr 	StackCheckFrame
.8d04	a2 00		ldx #$00			ldx 	#0
.8d06	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; work out the number
.8d09	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; check if zero
.8d0c	f0 04		beq $8d12			beq 	_CULoopBack 				; if so keep looping
.8d0e	20 a5 a6	jsr $a6a5			jsr 	StackClose		 			; return
.8d11	60		rts				rts
.8d12					_CULoopBack:
.8d12	20 dc a6	jsr $a6dc			jsr 	STKLoadCodePosition 		; loop back
.8d15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8d16					Command_Restore:
.8d16	20 2d 8d	jsr $8d2d			jsr 	SwapDataCodePtrs 			; swap code and data
.8d19	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d1b	85 30		sta $30				sta 	codePtr
.8d1d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d1f	85 31		sta $31				sta 	codePtr+1
.8d21	20 2d 8d	jsr $8d2d			jsr 	SwapDataCodePtrs 			; put them back
.8d24	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8d26	8d 9b 04	sta $049b			sta 	dataPointer+4
.8d29	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8d2c	60		rts				rts
.8d2d					SwapDataCodePtrs:
.8d2d	da		phx				phx
.8d2e	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8d30					_SDCPLoop:
.8d30	b5 30		lda $30,x			lda 	safePtr,x
.8d32	48		pha				pha
.8d33	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8d36	95 30		sta $30,x			sta 	safePtr,x
.8d38	68		pla				pla
.8d39	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8d3c	ca		dex				dex
.8d3d	10 f1		bpl $8d30			bpl 	_SDCPLoop
.8d3f	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8d42	8c 9b 04	sty $049b			sty 	dataPointer+4
.8d45	a8		tay				tay
.8d46	fa		plx				plx
.8d47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8d48					CommandRUN:
.8d48	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d4b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d4d	85 30		sta $30				sta 	codePtr
.8d4f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d51	85 31		sta $31				sta 	codePtr+1
.8d53					RUNNewLine:
.8d53	b2 30		lda ($30)			lda 	(codePtr)
.8d55	f0 5e		beq $8db5			beq 	CRNoProgram         		; no then END.
.8d57	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d59	9a		txs				txs
.8d5a					RUNCodePointerLine:
.8d5a	a0 02		ldy #$02			ldy 	#2 							; start of program
.8d5c					_CRIncMainLoop:
.8d5c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8d5f	d0 05		bne $8d66			bne 	_CRNoBreakCheck
.8d61	20 09 a5	jsr $a509			jsr 	EXTBreakCheck 				; break check
.8d64	f0 4a		beq $8db0			beq 	_CRBreak
.8d66					_CRNoBreakCheck:
.8d66	c8		iny				iny
.8d67					_CRMainLoop:
.8d67	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6c	10 10		bpl $8d7e			bpl 	_CRNotKeyword
.8d6e	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d70	b0 04		bcs $8d76			bcs 	_CRIsKeyword
.8d72	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d74	b0 34		bcs $8daa			bcs		_CRSyntaxError
.8d76					_CRIsKeyword:
.8d76	c8		iny				iny 								; consume command
.8d77	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d78	aa		tax				tax 								; put in X for vector jump
.8d79	20 ad 8d	jsr $8dad			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d7c	80 e9		bra $8d67			bra 	_CRMainLoop 				; and loop round
.8d7e					_CRNotKeyword:
.8d7e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d80	f0 da		beq $8d5c			beq 	_CRIncMainLoop
.8d82	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d84	90 05		bcc $8d8b			bcc 	_CRNotVariable
.8d86					_CRGoLet:
.8d86	20 c1 89	jsr $89c1			jsr 	LetCommand
.8d89	80 dc		bra $8d67			bra 	_CRMainLoop
.8d8b					_CRNotVariable:
.8d8b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d8d	f0 f7		beq $8d86			beq 	_CRGoLet
.8d8f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d91	f0 f3		beq $8d86			beq 	_CRGoLet
.8d93	c9 21		cmp #$21			cmp 	#KWD_PLING
.8d95	f0 ef		beq $8d86			beq 	_CRGoLet
.8d97	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d99	f0 09		beq $8da4			beq 	_CRGoRem
.8d9b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d9d	d0 0b		bne $8daa			bne 	_CRSyntaxError
.8d9f	20 2b 82	jsr $822b			jsr 	LabelHere
.8da2	80 c3		bra $8d67			bra 	_CRMainLoop
.8da4					_CRGoRem:
.8da4	c8		iny				iny
.8da5	20 e7 8c	jsr $8ce7			jsr 	RemCommand
.8da8	80 bd		bra $8d67			bra 	_CRMainLoop
.8daa					_CRSyntaxError:
.8daa	4c 10 a3	jmp $a310			jmp 	SyntaxError
.8dad					_CRCallVector0:
.8dad	7c 58 8e	jmp ($8e58,x)			jmp 	(VectorSet0,x)
.8db0					_CRBreak:
.8db0	a9 01		lda #$01		lda	#1
.8db2	4c c3 90	jmp $90c3		jmp	ErrorHandler
.8db5					CRNoProgram:
.8db5	4c 1b 85	jmp $851b			jmp 	EndCommand
.8db8					EOLCommand:
.8db8	18		clc				clc
.8db9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8dbb	65 30		adc $30				adc 	codePtr
.8dbd	85 30		sta $30				sta 	codePtr
.8dbf	90 02		bcc $8dc3			bcc 	_CREExit
.8dc1	e6 31		inc $31				inc 	codePtr+1
.8dc3					_CREExit:
.8dc3	80 8e		bra $8d53			bra 	RunNewLine
.8dc5					Shift1Command:
.8dc5	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc7	c8		iny				iny
.8dc8	0a		asl a				asl 	a
.8dc9	aa		tax				tax
.8dca	7c f0 8e	jmp ($8ef0,x)			jmp 	(VectorSet1,x)
.8dcd					Shift2Command:
.8dcd	b1 30		lda ($30),y			lda 	(codePtr),y
.8dcf	c8		iny				iny
.8dd0	0a		asl a				asl 	a
.8dd1	aa		tax				tax
.8dd2	7c 0a 8f	jmp ($8f0a,x)			jmp 	(VectorSet2,x)
.8dd5					Unused1:
.8dd5					Unused2:
.8dd5					Unused3:
.8dd5					Unused4:
.8dd5	4c 10 a3	jmp $a310			jmp 	SyntaxError
>8dd8							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8dd8					VectorSetPunc:
>8dd8	b0 93					.word	ShiftLeft                        ; $00 <<
>8dda	67 91					.word	BinaryCompareLessEqual           ; $01 <=
>8ddc	5d 91					.word	BinaryCompareNotEqual            ; $02 <>
>8dde	10 a3					.word	SyntaxError                      ; $03 !!3
>8de0	10 a3					.word	SyntaxError                      ; $04 ><
>8de2	71 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8de4	b3 93					.word	ShiftRight                       ; $06 >>
>8de6	10 a3					.word	SyntaxError                      ; $07 !!7
>8de8	10 a3					.word	SyntaxError                      ; $08 !!8
>8dea	10 a3					.word	SyntaxError                      ; $09 !!9
>8dec	10 a3					.word	SyntaxError                      ; $0a !!10
>8dee	10 a3					.word	SyntaxError                      ; $0b !!11
>8df0	10 a3					.word	SyntaxError                      ; $0c !!12
>8df2	10 a3					.word	SyntaxError                      ; $0d !!13
>8df4	10 a3					.word	SyntaxError                      ; $0e !!14
>8df6	10 a3					.word	SyntaxError                      ; $0f !!15
>8df8	10 a3					.word	SyntaxError                      ; $10 @
>8dfa	10 a3					.word	SyntaxError                      ; $11 !!17
>8dfc	10 a3					.word	SyntaxError                      ; $12 !!18
>8dfe	10 a3					.word	SyntaxError                      ; $13 [
>8e00	34 92					.word	IntegerDivide                    ; $14 \
>8e02	10 a3					.word	SyntaxError                      ; $15 ]
>8e04	41 95					.word	EorInteger                       ; $16 ^
>8e06	10 a3					.word	SyntaxError                      ; $17 _
>8e08	10 a3					.word	SyntaxError                      ; $18 `
>8e0a	10 a3					.word	SyntaxError                      ; $19 !!25
>8e0c	10 a3					.word	SyntaxError                      ; $1a !!26
>8e0e	10 a3					.word	SyntaxError                      ; $1b {
>8e10	fb 94					.word	OraInteger                       ; $1c |
>8e12	10 a3					.word	SyntaxError                      ; $1d }
>8e14	10 a3					.word	SyntaxError                      ; $1e ~
>8e16	10 a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>8e18	10 a3					.word	SyntaxError                      ; $20
>8e1a	87 95					.word	WordIndirect                     ; $21 !
>8e1c	10 a3					.word	SyntaxError                      ; $22 "
>8e1e	10 a3					.word	SyntaxError                      ; $23 #
>8e20	10 a3					.word	SyntaxError                      ; $24 $
>8e22	81 92					.word	IntegerModulus                   ; $25 %
>8e24	b5 94					.word	AndInteger                       ; $26 &
>8e26	10 a3					.word	SyntaxError                      ; $27 '
>8e28	10 a3					.word	SyntaxError                      ; $28 (
>8e2a	10 a3					.word	SyntaxError                      ; $29 )
>8e2c	f6 92					.word	MulInteger                       ; $2a *
>8e2e	47 94					.word	AddInteger                       ; $2b +
>8e30	10 a3					.word	SyntaxError                      ; $2c ,
>8e32	8a 94					.word	SubInteger                       ; $2d -
>8e34	10 a3					.word	SyntaxError                      ; $2e .
>8e36	72 97					.word	FDivideCommand                   ; $2f /
>8e38	10 a3					.word	SyntaxError                      ; $30 0
>8e3a	10 a3					.word	SyntaxError                      ; $31 1
>8e3c	10 a3					.word	SyntaxError                      ; $32 2
>8e3e	10 a3					.word	SyntaxError                      ; $33 3
>8e40	10 a3					.word	SyntaxError                      ; $34 4
>8e42	10 a3					.word	SyntaxError                      ; $35 5
>8e44	10 a3					.word	SyntaxError                      ; $36 6
>8e46	10 a3					.word	SyntaxError                      ; $37 7
>8e48	10 a3					.word	SyntaxError                      ; $38 8
>8e4a	10 a3					.word	SyntaxError                      ; $39 9
>8e4c	10 a3					.word	SyntaxError                      ; $3a :
>8e4e	10 a3					.word	SyntaxError                      ; $3b ;
>8e50	49 91					.word	BinaryCompareLess                ; $3c <
>8e52	3f 91					.word	BinaryCompareEqual               ; $3d =
>8e54	53 91					.word	BinaryCompareGreater             ; $3e >
>8e56	ae 95					.word	ByteIndirect                     ; $3f ?
.8e58					VectorSet0:
>8e58	b8 8d					.word	EOLCommand                       ; $80 !0:EOF
>8e5a	c5 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e5c	cd 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e5e	e2 9c					.word	AbsUnary                         ; $83 ABS(
>8e60	f2 9c					.word	AllocUnary                       ; $84 ALLOC(
>8e62	62 9d					.word	AscUnary                         ; $85 ASC(
>8e64	2d 9f					.word	ChrUnary                         ; $86 CHR$(
>8e66	1e 85					.word	UnaryEvent                       ; $87 EVENT(
>8e68	3b 91					.word	UnaryFalse                       ; $88 FALSE
>8e6a	6f 9d					.word	FracUnary                        ; $89 FRAC(
>8e6c	36 89					.word	UnaryHit                         ; $8a HIT(
>8e6e	85 9d					.word	IntUnary                         ; $8b INT(
>8e70	ec 9e					.word	IsValUnary                       ; $8c ISVAL(
>8e72	ad 89					.word	UnaryJoyB                        ; $8d JOYB(
>8e74	86 89					.word	UnaryJoyX                        ; $8e JOYX(
>8e76	89 89					.word	UnaryJoyY                        ; $8f JOYY(
>8e78	07 a0					.word	Unary_Left                       ; $90 LEFT$(
>8e7a	97 9d					.word	LenUnary                         ; $91 LEN(
>8e7c	b5 9d					.word	Unary_Max                        ; $92 MAX(
>8e7e	31 a0					.word	Unary_Mid                        ; $93 MID$(
>8e80	b1 9d					.word	Unary_Min                        ; $94 MIN(
>8e82	0c 9e					.word	Unary_Not                        ; $95 NOT(
>8e84	22 9e					.word	Unary_Random                     ; $96 RANDOM(
>8e86	17 a0					.word	Unary_Right                      ; $97 RIGHT$(
>8e88	41 9e					.word	Unary_Rnd                        ; $98 RND(
>8e8a	c2 9e					.word	SgnUnary                         ; $99 SGN(
>8e8c	3f 9f					.word	SpcUnary                         ; $9a SPC(
>8e8e	5a 9f					.word	Unary_Str                        ; $9b STR$(
>8e90	97 8f					.word	UnaryTimer                       ; $9c TIMER(
>8e92	2f 91					.word	UnaryTrue                        ; $9d TRUE
>8e94	e2 9e					.word	ValUnary                         ; $9e VAL(
>8e96	87 85					.word	ForCommand                       ; $9f FOR
>8e98	5c 89					.word	IfCommand                        ; $a0 IF
>8e9a	d5 8d					.word	Unused1                          ; $a1 PROC
>8e9c	f4 8c					.word	Command_REPEAT                   ; $a2 REPEAT
>8e9e	7b 90					.word	Command_WHILE                    ; $a3 WHILE
>8ea0	85 89					.word	EndIf                            ; $a4 ENDIF
>8ea2	80 8c					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8ea4	41 86					.word	NextCommand                      ; $a6 NEXT
>8ea6	d5 8d					.word	Unused4                          ; $a7 THEN
>8ea8	fd 8c					.word	Command_UNTIL                    ; $a8 UNTIL
>8eaa	9c 90					.word	Command_WEND                     ; $a9 WEND
>8eac	10 a3					.word	SyntaxError                      ; $aa BY
>8eae	be 83					.word	CallCommand                      ; $ab CALL
>8eb0	9e 86					.word	CircleCommand                    ; $ac CIRCLE
>8eb2	f8 83					.word	ClearCommand                     ; $ad CLEAR
>8eb4	50 84					.word	ClearScreen                      ; $ae CLS
>8eb6	10 a3					.word	SyntaxError                      ; $af COLOR
>8eb8	10 a3					.word	SyntaxError                      ; $b0 COLOUR
>8eba	56 84					.word	Command_Data                     ; $b1 DATA
>8ebc	5e 84					.word	DimCommand                       ; $b2 DIM
>8ebe	d5 8d					.word	Unused3                          ; $b3 DOWNTO
>8ec0	7e 89					.word	ElseCode                         ; $b4 ELSE
>8ec2	10 a3					.word	SyntaxError                      ; $b5 FROM
>8ec4	ca 88					.word	GfxCommand                       ; $b6 GFX
>8ec6	fc 88					.word	Command_GOSUB                    ; $b7 GOSUB
>8ec8	1a 89					.word	GotoCommand                      ; $b8 GOTO
>8eca	10 a3					.word	SyntaxError                      ; $b9 HERE
>8ecc	c8 86					.word	ImageCommand                     ; $ba IMAGE
>8ece	c1 89					.word	LetCommand                       ; $bb LET
>8ed0	1d 87					.word	LineCommand                      ; $bc LINE
>8ed2	b4 8a					.word	Command_LOCAL                    ; $bd LOCAL
>8ed4	10 a3					.word	SyntaxError                      ; $be OFF
>8ed6	10 a3					.word	SyntaxError                      ; $bf ON
>8ed8	10 a3					.word	SyntaxError                      ; $c0 OUTLINE
>8eda	85 8b					.word	PaletteCommand                   ; $c1 PALETTE
>8edc	16 87					.word	PlotCommand                      ; $c2 PLOT
>8ede	c9 8b					.word	Command_Print                    ; $c3 PRINT
>8ee0	8e 8c					.word	Command_Read                     ; $c4 READ
>8ee2	9a 86					.word	RectangleCommand                 ; $c5 RECT
>8ee4	e7 8c					.word	RemCommand                       ; $c6 REM
>8ee6	0c 89					.word	Command_RETURN                   ; $c7 RETURN
>8ee8	10 a3					.word	SyntaxError                      ; $c8 SOLID
>8eea	a9 86					.word	SpriteCommand                    ; $c9 SPRITE
>8eec	e5 86					.word	TextCommand                      ; $ca TEXT
>8eee	d5 8d					.word	Unused2                          ; $cb TO
.8ef0					VectorSet1:
>8ef0	10 a3					.word	SyntaxError                      ; $80 !0:EOF
>8ef2	10 a3					.word	SyntaxError                      ; $81 !1:SH1
>8ef4	10 a3					.word	SyntaxError                      ; $82 !2:SH2
>8ef6	8f 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ef8	ae 83					.word	AssertCommand                    ; $84 ASSERT
>8efa	6a 88					.word	BitmapCtrl                       ; $85 BITMAP
>8efc	1b 85					.word	EndCommand                       ; $86 END
>8efe	16 8a					.word	Command_List                     ; $87 LIST
>8f00	7b 8b					.word	NewCommand                       ; $88 NEW
>8f02	16 8d					.word	Command_Restore                  ; $89 RESTORE
>8f04	48 8d					.word	CommandRUN                       ; $8a RUN
>8f06	af 88					.word	SpritesCtrl                      ; $8b SPRITES
>8f08	92 8f					.word	StopCommand                      ; $8c STOP
.8f0a					VectorSet2:
>8f0a	10 a3					.word	SyntaxError                      ; $80 !0:EOF
>8f0c	10 a3					.word	SyntaxError                      ; $81 !1:SH1
>8f0e	10 a3					.word	SyntaxError                      ; $82 !2:SH2
>8f10	cf a1					.word	Assemble_adc                     ; $83 ADC
>8f12	c7 a1					.word	Assemble_and                     ; $84 AND
>8f14	e3 a1					.word	Assemble_asl                     ; $85 ASL
>8f16	4d a2					.word	Assemble_bcc                     ; $86 BCC
>8f18	51 a2					.word	Assemble_bcs                     ; $87 BCS
>8f1a	59 a2					.word	Assemble_beq                     ; $88 BEQ
>8f1c	10 a2					.word	Assemble_bit                     ; $89 BIT
>8f1e	41 a2					.word	Assemble_bmi                     ; $8a BMI
>8f20	55 a2					.word	Assemble_bne                     ; $8b BNE
>8f22	3d a2					.word	Assemble_bpl                     ; $8c BPL
>8f24	5d a2					.word	Assemble_bra                     ; $8d BRA
>8f26	61 a2					.word	Assemble_brk                     ; $8e BRK
>8f28	45 a2					.word	Assemble_bvc                     ; $8f BVC
>8f2a	49 a2					.word	Assemble_bvs                     ; $90 BVS
>8f2c	69 a2					.word	Assemble_clc                     ; $91 CLC
>8f2e	bd a2					.word	Assemble_cld                     ; $92 CLD
>8f30	7d a2					.word	Assemble_cli                     ; $93 CLI
>8f32	ad a2					.word	Assemble_clv                     ; $94 CLV
>8f34	db a1					.word	Assemble_cmp                     ; $95 CMP
>8f36	24 a2					.word	Assemble_cpx                     ; $96 CPX
>8f38	1f a2					.word	Assemble_cpy                     ; $97 CPY
>8f3a	01 a2					.word	Assemble_dec                     ; $98 DEC
>8f3c	b9 a2					.word	Assemble_dex                     ; $99 DEX
>8f3e	95 a2					.word	Assemble_dey                     ; $9a DEY
>8f40	cb a1					.word	Assemble_eor                     ; $9b EOR
>8f42	06 a2					.word	Assemble_inc                     ; $9c INC
>8f44	c9 a2					.word	Assemble_inx                     ; $9d INX
>8f46	b5 a2					.word	Assemble_iny                     ; $9e INY
>8f48	38 a2					.word	Assemble_jmp                     ; $9f JMP
>8f4a	33 a2					.word	Assemble_jsr                     ; $a0 JSR
>8f4c	d7 a1					.word	Assemble_lda                     ; $a1 LDA
>8f4e	fc a1					.word	Assemble_ldx                     ; $a2 LDX
>8f50	1a a2					.word	Assemble_ldy                     ; $a3 LDY
>8f52	ed a1					.word	Assemble_lsr                     ; $a4 LSR
>8f54	cd a2					.word	Assemble_nop                     ; $a5 NOP
>8f56	c3 a1					.word	Assemble_ora                     ; $a6 ORA
>8f58	79 a2					.word	Assemble_pha                     ; $a7 PHA
>8f5a	65 a2					.word	Assemble_php                     ; $a8 PHP
>8f5c	c1 a2					.word	Assemble_phx                     ; $a9 PHX
>8f5e	81 a2					.word	Assemble_phy                     ; $aa PHY
>8f60	89 a2					.word	Assemble_pla                     ; $ab PLA
>8f62	6d a2					.word	Assemble_plp                     ; $ac PLP
>8f64	d5 a2					.word	Assemble_plx                     ; $ad PLX
>8f66	91 a2					.word	Assemble_ply                     ; $ae PLY
>8f68	e8 a1					.word	Assemble_rol                     ; $af ROL
>8f6a	f2 a1					.word	Assemble_ror                     ; $b0 ROR
>8f6c	75 a2					.word	Assemble_rti                     ; $b1 RTI
>8f6e	85 a2					.word	Assemble_rts                     ; $b2 RTS
>8f70	df a1					.word	Assemble_sbc                     ; $b3 SBC
>8f72	71 a2					.word	Assemble_sec                     ; $b4 SEC
>8f74	d1 a2					.word	Assemble_sed                     ; $b5 SED
>8f76	8d a2					.word	Assemble_sei                     ; $b6 SEI
>8f78	d3 a1					.word	Assemble_sta                     ; $b7 STA
>8f7a	c5 a2					.word	Assemble_stp                     ; $b8 STP
>8f7c	f7 a1					.word	Assemble_stx                     ; $b9 STX
>8f7e	15 a2					.word	Assemble_sty                     ; $ba STY
>8f80	0b a2					.word	Assemble_stz                     ; $bb STZ
>8f82	a9 a2					.word	Assemble_tax                     ; $bc TAX
>8f84	a5 a2					.word	Assemble_tay                     ; $bd TAY
>8f86	2e a2					.word	Assemble_trb                     ; $be TRB
>8f88	29 a2					.word	Assemble_tsb                     ; $bf TSB
>8f8a	b1 a2					.word	Assemble_tsx                     ; $c0 TSX
>8f8c	99 a2					.word	Assemble_txa                     ; $c1 TXA
>8f8e	a1 a2					.word	Assemble_txs                     ; $c2 TXS
>8f90	9d a2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8f92					StopCommand:
.8f92	a9 08		lda #$08		lda	#8
.8f94	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.8f97					UnaryTimer:
.8f97	fa		plx				plx
.8f98	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.8f9b					TimerToStackX:
.8f9b	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; zero result
.8f9e	64 01		stz $01				stz 	1 							; access I/O
.8fa0	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.8fa3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8fa6	ad 5a d6	lda $d65a			lda 	$D65A
.8fa9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8fac	ad 5b d6	lda $d65b			lda 	$D65B
.8faf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8fb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8fb3					ProcedureScan:
.8fb3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fb5	85 30		sta $30				sta 	codePtr
.8fb7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb9	85 31		sta $31				sta 	codePtr+1
.8fbb					_PSLoop:
.8fbb	b2 30		lda ($30)			lda 	(codePtr)
.8fbd	f0 42		beq $9001			beq 	_PSExit
.8fbf	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8fc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc3	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8fc5	d0 2d		bne $8ff4			bne 	_PSNext
.8fc7	c8		iny				iny 								; get the address of the record to zTemp0 and
.8fc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8fca	29 c0		and #$c0			and 	#$C0
.8fcc	c9 40		cmp #$40			cmp 	#$40
.8fce	d0 32		bne $9002			bne 	_PSSyntax
.8fd0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd2	18		clc				clc
.8fd3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8fd5	85 37		sta $37				sta 	zTemp0+1
.8fd7	c8		iny				iny 								; LSB
.8fd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8fda	85 36		sta $36				sta 	zTemp0
.8fdc	c8		iny				iny 								; character after variable call.
.8fdd	98		tya				tya 								; save Y offset at +7
.8fde	a0 07		ldy #$07			ldy 	#7
.8fe0	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe2	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8fe4	a0 02		ldy #$02			ldy 	#2
.8fe6	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe8	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8fea					_PSCopy:
.8fea	b5 30		lda $30,x			lda 	safePtr,x
.8fec	c8		iny				iny
.8fed	91 36		sta ($36),y			sta 	(zTemp0),y
.8fef	e8		inx				inx
.8ff0	e0 04		cpx #$04			cpx 	#4
.8ff2	d0 f6		bne $8fea			bne 	_PSCopy
.8ff4					_PSNext:
.8ff4	18		clc				clc
.8ff5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ff7	65 30		adc $30				adc 	codePtr
.8ff9	85 30		sta $30				sta 	codePtr
.8ffb	90 02		bcc $8fff			bcc 	_CREExit
.8ffd	e6 31		inc $31				inc 	codePtr+1
.8fff					_CREExit:
.8fff	80 ba		bra $8fbb			bra 	_PSLoop
.9001					_PSExit:
.9001	60		rts				rts
.9002					_PSSyntax:
.9002	4c 10 a3	jmp $a310			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9005					ScanForward:
.9005	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9007	86 37		stx $37				stx 	zTemp0+1
.9009	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.900b					_ScanLoop:
.900b	b1 30		lda ($30),y			lda 	(codePtr),y
.900d	c8		iny				iny
.900e	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9010	d0 0e		bne $9020			bne 	_ScanGoNext
.9012	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9014	f0 04		beq $901a			beq 	_ScanMatch
.9016	c5 37		cmp $37				cmp 	zTemp0+1
.9018	d0 06		bne $9020			bne 	_ScanGoNext
.901a					_ScanMatch:
.901a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.901c	d0 01		bne $901f			bne 	_ScanNotEndEOL
.901e	88		dey				dey
.901f					_ScanNotEndEOL:
.901f	60		rts				rts
.9020					_ScanGoNext:
.9020	20 25 90	jsr $9025			jsr  	ScanForwardOne
.9023	80 e6		bra $900b			bra 	_ScanLoop
.9025					ScanForwardOne:
.9025	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9027	90 3e		bcc $9067			bcc 	_SFWExit
.9029	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.902b	90 18		bcc $9045			bcc 	_ScanSkipOne
.902d	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.902f	b0 2f		bcs $9060			bcs 	_ScanSkipData
.9031	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9033	90 32		bcc $9067			bcc 	_SFWExit 					; if not, ordinary keywords.
.9035	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9037	b0 2e		bcs $9067			bcs 	_SFWExit
.9039	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.903b	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.903d	b0 28		bcs $9067			bcs 	_SFWExit
.903f	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9041	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9043	80 22		bra $9067			bra 	_SFWExit
.9045					_ScanSkipOne:
.9045	c8		iny				iny 								; consume the extra one.
.9046	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9048	d0 1d		bne $9067			bne 	_SFWExit
.904a	18		clc				clc
.904b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.904d	65 30		adc $30				adc 	codePtr
.904f	85 30		sta $30				sta 	codePtr
.9051	90 02		bcc $9055			bcc 	_CREExit
.9053	e6 31		inc $31				inc 	codePtr+1
.9055					_CREExit:
.9055	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9057	b2 30		lda ($30)			lda 	(codePtr)
.9059	d0 0c		bne $9067			bne 	_SFWExit 					; if not zero, more to scan
.905b	a9 13		lda #$13		lda	#19
.905d	4c c3 90	jmp $90c3		jmp	ErrorHandler
.9060					_ScanSkipData:
.9060	88		dey				dey 								; point at data token
.9061	c8		iny				iny
.9062	98		tya				tya
.9063	38		sec				sec
.9064	71 30		adc ($30),y			adc 	(codePtr),y
.9066	a8		tay				tay
.9067					_SFWExit:
.9067	60		rts				rts
.9068					ScanGetCurrentLineStep:
.9068	64 38		stz $38				stz 	zTemp1
.906a	a0 03		ldy #$03			ldy 	#3
.906c					_SGCLSLoop:
.906c	b1 30		lda ($30),y			lda 	(codePtr),y
.906e	c8		iny				iny
.906f	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9071	f0 05		beq $9078			beq 	_SGCLSExit
.9073	20 25 90	jsr $9025			jsr 	ScanForwardOne
.9076	80 f4		bra $906c			bra 	_SGCLSLoop
.9078					_SGCLSExit:
.9078	a5 38		lda $38				lda 	zTemp1
.907a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.907b					Command_WHILE:
.907b	5a		phy				phy 								; save position of the test
.907c	a2 00		ldx #$00			ldx 	#0
.907e	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; work out the number
.9081	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; check if zero
.9084	f0 0e		beq $9094			beq 	_WHExitLoop 				; if so exit the loop
.9086	98		tya				tya 								; position *after* test.
.9087	7a		ply				ply 								; restore position before test, at WHILE
.9088	88		dey				dey
.9089	48		pha				pha 								; push after test on the stack
.908a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.908c	20 87 a6	jsr $a687			jsr 	StackOpen
.908f	20 cb a6	jsr $a6cb			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9092	7a		ply				ply 								; restore the position *after* the test
.9093	60		rts				rts
.9094					_WHExitLoop:
.9094	68		pla				pla 								; throw post loop position
.9095	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9097	aa		tax				tax
.9098	20 05 90	jsr $9005			jsr 	ScanForward
.909b	60		rts				rts
.909c					Command_WEND:
.909c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.909e	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.90a0	20 b3 a6	jsr $a6b3			jsr 	StackCheckFrame
.90a3	20 dc a6	jsr $a6dc			jsr 	STKLoadCodePosition 		; loop back
.90a6	20 a5 a6	jsr $a6a5			jsr 	StackClose		 			; erase the frame
.90a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.90aa					CheckRightBracket:
.90aa	b1 30		lda ($30),y			lda 	(codePtr),y
.90ac	c8		iny				iny
.90ad	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.90af	d0 0f		bne $90c0			bne 	CNAFail
.90b1	60		rts				rts
.90b2					CheckComma:
.90b2	b1 30		lda ($30),y			lda 	(codePtr),y
.90b4	c8		iny				iny
.90b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.90b7	d0 07		bne $90c0			bne 	CNAFail
.90b9	60		rts				rts
.90ba					CheckNextA:
.90ba	d1 30		cmp ($30),y			cmp 	(codePtr),y
.90bc	d0 02		bne $90c0			bne 	CNAFail
.90be	c8		iny				iny 								; skip character
.90bf	60		rts				rts 								; and exit
.90c0					CNAFail:
.90c0	4c 10 a3	jmp $a310			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.90c3					ErrorHandler:
.90c3	a8		tay				tay 								; find the error text
.90c4	f0 49		beq $910f			beq 	_EHEnd
.90c6	a2 00		ldx #$00			ldx 	#0
.90c8	a9 29		lda #$29			lda 	#((ErrorText) & $FF)
.90ca	85 36		sta $36				sta 	0+zTemp0
.90cc	a9 a3		lda #$a3			lda 	#((ErrorText) >> 8)
.90ce	85 37		sta $37				sta 	1+zTemp0
.90d0					_EHFind:
.90d0	88		dey				dey 								; found the error text ?
.90d1	f0 0e		beq $90e1			beq 	_EHFound
.90d3					_EHFindZero:
.90d3	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.90d5	e6 36		inc $36				inc 	zTemp0
.90d7	d0 02		bne $90db			bne 	_EHFNoCarry
.90d9	e6 37		inc $37				inc 	zTemp0+1
.90db					_EHFNoCarry:
.90db	c9 00		cmp #$00			cmp 	#0
.90dd	d0 f4		bne $90d3			bne 	_EHFindZero
.90df	80 ef		bra $90d0			bra 	_EHFind
.90e1					_EHFound:
.90e1	a5 36		lda $36				lda 	zTemp0 						; print message
.90e3	a6 37		ldx $37				ldx 	zTemp0+1
.90e5	20 1c 91	jsr $911c			jsr 	PrintStringXA
.90e8	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.90ea	b1 30		lda ($30),y			lda 	(codePtr),y
.90ec	d0 05		bne $90f3			bne 	_EHAtMsg
.90ee	c8		iny				iny
.90ef	b1 30		lda ($30),y			lda 	(codePtr),y
.90f1	f0 17		beq $910a			beq 	_EHCREnd
.90f3					_EHAtMsg:
.90f3	a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.90f5	a9 12		lda #$12			lda 	#_AtMsg & $FF
.90f7	20 1c 91	jsr $911c			jsr 	PrintStringXA
.90fa	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.90fc	b1 30		lda ($30),y			lda 	(codePtr),y
.90fe	48		pha				pha
.90ff	c8		iny				iny
.9100	b1 30		lda ($30),y			lda 	(codePtr),y
.9102	aa		tax				tax
.9103	68		pla				pla
.9104	20 d5 95	jsr $95d5			jsr 	ConvertInt16 				; convert XA to string
.9107	20 1c 91	jsr $911c			jsr 	PrintStringXA 				; and print it.
.910a					_EHCREnd:
.910a	a9 0d		lda #$0d			lda 	#13 						; new line
.910c	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.910f					_EHEnd:
.910f	4c 5f 83	jmp $835f			jmp 	WarmStart
>9112	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>911a	20 00
.911c					PrintStringXA:
.911c	5a		phy				phy
.911d	86 37		stx $37				stx 	zTemp0+1
.911f	85 36		sta $36				sta 	zTemp0
.9121	a0 00		ldy #$00			ldy 	#0
.9123					_PSXALoop:
.9123	b1 36		lda ($36),y			lda 	(zTemp0),y
.9125	f0 06		beq $912d			beq 	_PSXAExit
.9127	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.912a	c8		iny				iny
.912b	80 f6		bra $9123			bra 	_PSXALoop
.912d					_PSXAExit:
.912d	7a		ply				ply
.912e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.912f					UnaryTrue:
.912f	fa		plx				plx
.9130					ReturnTrue:
.9130	a9 01		lda #$01			lda 	#1  						; set to 1
.9132	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9135	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9137	9d 00 04	sta $0400,x			sta 	NSStatus,x
.913a	60		rts				rts
.913b					UnaryFalse:
.913b	fa		plx				plx
.913c					ReturnFalse:
.913c	4c 86 a1	jmp $a186			jmp 	NSMSetZero 					; set it all to zero
.913f					BinaryCompareEqual:
.913f	fa		plx				plx
.9140	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.9143	c9 00		cmp #$00			cmp 	#0
.9145	f0 e9		beq $9130			beq 	ReturnTrue
.9147	80 f3		bra $913c			bra 	ReturnFalse
.9149					BinaryCompareLess:
.9149	fa		plx				plx
.914a	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.914d	c9 ff		cmp #$ff			cmp 	#$FF
.914f	f0 df		beq $9130			beq 	ReturnTrue
.9151	80 e9		bra $913c			bra 	ReturnFalse
.9153					BinaryCompareGreater:
.9153	fa		plx				plx
.9154	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.9157	c9 01		cmp #$01			cmp 	#1
.9159	f0 d5		beq $9130			beq 	ReturnTrue
.915b	80 df		bra $913c			bra 	ReturnFalse
.915d					BinaryCompareNotEqual:
.915d	fa		plx				plx
.915e	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.9161	c9 00		cmp #$00			cmp 	#0
.9163	d0 cb		bne $9130			bne 	ReturnTrue
.9165	80 d5		bra $913c			bra 	ReturnFalse
.9167					BinaryCompareLessEqual:
.9167	fa		plx				plx
.9168	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.916b	c9 01		cmp #$01			cmp 	#1
.916d	d0 c1		bne $9130			bne 	ReturnTrue
.916f	80 cb		bra $913c			bra 	ReturnFalse
.9171					BinaryCompareGreaterEqual:
.9171	fa		plx				plx
.9172	20 7b 91	jsr $917b			jsr 	CompareBaseCode
.9175	c9 ff		cmp #$ff			cmp 	#$FF
.9177	d0 b7		bne $9130			bne 	ReturnTrue
.9179	80 c1		bra $913c			bra 	ReturnFalse
.917b					CompareBaseCode:
.917b	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; make both values if references.
.917e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9181	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9184	29 10		and #$10			and 	#NSTString
.9186	d0 40		bne $91c8			bne 	_CBCString
.9188	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.918b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.918e	d0 3b		bne $91cb			bne 	_CBCFloat
.9190	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9193	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9196	29 08		and #$08			and 	#NSTFloat
.9198	d0 31		bne $91cb			bne 	_CBCFloat
.919a	20 ce 91	jsr $91ce			jsr 	CompareFixMinusZero
.919d	e8		inx				inx
.919e	20 ce 91	jsr $91ce			jsr 	CompareFixMinusZero
.91a1	ca		dex				dex
.91a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.91a5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91a8	10 0b		bpl $91b5			bpl 	_CDCSameSign
.91aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.91ad	30 16		bmi $91c5			bmi 	_CBCLess 					; return $FF
.91af					_CBCGreater:
.91af	a9 01		lda #$01			lda 	#1
.91b1	60		rts				rts
.91b2					_CBCEqual:
.91b2	a9 00		lda #$00			lda 	#0
.91b4	60		rts				rts
.91b5					_CDCSameSign:
.91b5	20 21 94	jsr $9421			jsr 	SubTopTwoStack 				; unsigned subtract
.91b8	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; or the mantissa together
.91bb	f0 f5		beq $91b2			beq 	_CBCEqual 					; -0 == 0
.91bd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.91c0	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.91c3	10 ea		bpl $91af			bpl 	_CBCGreater
.91c5					_CBCLess:
.91c5	a9 ff		lda #$ff			lda 	#$FF
.91c7	60		rts				rts
.91c8					_CBCString:
.91c8	4c 77 93	jmp $9377			jmp 	CompareStrings
.91cb					_CBCFloat:
.91cb	4c 58 97	jmp $9758			jmp 	CompareFloat
.91ce					CompareFixMinusZero:
.91ce	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero
.91d1	d0 03		bne $91d6			bne 	_CFXMZNotZero
.91d3	9e 00 04	stz $0400,x			stz 	NSStatus,x
.91d6					_CFXMZNotZero:
.91d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.91d7					StringConcat:
.91d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.91da	3d 01 04	and $0401,x			and 	NSStatus+1,x
.91dd	29 18		and #$18			and 	#NSBTypeMask
.91df	c9 10		cmp #$10			cmp 	#NSTString
.91e1	d0 4e		bne $9231			bne		_SCType
.91e3	64 38		stz $38				stz 	zTemp1 						; counting total length
.91e5	e8		inx				inx
.91e6	20 04 92	jsr $9204			jsr 	_SCSetupZ0 					; setup for second
.91e9	20 0f 92	jsr $920f			jsr 	_SCLengthZ0 				; length for second
.91ec	ca		dex				dex
.91ed	20 04 92	jsr $9204			jsr 	_SCSetupZ0 					; setup for first
.91f0	20 0f 92	jsr $920f			jsr 	_SCLengthZ0 				; length for first
.91f3	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.91f5	20 7a a7	jsr $a77a			jsr 	StringTempAllocate
.91f8	20 22 92	jsr $9222			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.91fb	e8		inx				inx
.91fc	20 04 92	jsr $9204			jsr 	_SCSetupZ0 					; copy second out
.91ff	20 22 92	jsr $9222			jsr 	_SCCopy
.9202	ca		dex				dex
.9203	60		rts				rts
.9204					_SCSetupZ0:
.9204	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9207	85 36		sta $36				sta 	zTemp0
.9209	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.920c	85 37		sta $37				sta 	zTemp0+1
.920e	60		rts				rts
.920f					_SCLengthZ0:
.920f	5a		phy				phy
.9210	a0 00		ldy #$00			ldy 	#0
.9212					_SCLenLoop:
.9212	b1 36		lda ($36),y			lda 	(zTemp0),y
.9214	f0 0a		beq $9220			beq 	_SCLExit
.9216	c8		iny				iny
.9217	e6 38		inc $38				inc 	zTemp1
.9219	10 f7		bpl $9212			bpl		_SCLenLoop
.921b	a9 09		lda #$09		lda	#9
.921d	4c c3 90	jmp $90c3		jmp	ErrorHandler
.9220					_SCLExit:
.9220	7a		ply				ply
.9221	60		rts				rts
.9222					_SCCopy:
.9222	5a		phy				phy
.9223	a0 00		ldy #$00			ldy 	#0
.9225					_SCCopyLoop:
.9225	b1 36		lda ($36),y			lda 	(zTemp0),y
.9227	f0 06		beq $922f			beq 	_SCCExit
.9229	20 b8 a7	jsr $a7b8			jsr 	StringTempWrite
.922c	c8		iny				iny
.922d	80 f6		bra $9225			bra 	_SCCopyLoop
.922f					_SCCExit:
.922f	7a		ply				ply
.9230	60		rts				rts
.9231					_SCType:
.9231	4c 1a a3	jmp $a31a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9234					IntegerDivide:
.9234	fa		plx				plx
.9235	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9238	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.923b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.923c	0a		asl a				asl 	a
.923d	10 05		bpl $9244			bpl 	_NotRef
.923f	48		pha				pha
.9240	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9243	68		pla				pla
.9244					_NotRef:
.9244	0a		asl a				asl 	a
.9245	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9247	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.924a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.924d	f0 03		beq $9252			beq 	_IntegerCode 				; if clear, then we have two integers
.924f	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.9252					_IntegerCode:
.9252	20 74 92	jsr $9274			jsr 	CheckDivideZero 			; do div zero check
.9255	20 ac 92	jsr $92ac			jsr 	Int32Divide 				; do the division
.9258	20 69 93	jsr $9369			jsr 	CalculateSign 				; calculate result sign
.925b					NSMCopyPlusTwoToZero:
.925b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.925e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9261	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.9264	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9267	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.926a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.926d	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.9270	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9273	60		rts				rts
.9274					CheckDivideZero:
.9274	e8		inx				inx
.9275	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero
.9278	f0 02		beq $927c			beq 	_CDVError
.927a	ca		dex				dex
.927b	60		rts				rts
.927c					_CDVError:
.927c	a9 03		lda #$03		lda	#3
.927e	4c c3 90	jmp $90c3		jmp	ErrorHandler
.9281					IntegerModulus:
.9281	fa		plx				plx
.9282	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9285	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9288	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9289	0a		asl a				asl 	a
.928a	10 05		bpl $9291			bpl 	_NotRef
.928c	48		pha				pha
.928d	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9290	68		pla				pla
.9291					_NotRef:
.9291	0a		asl a				asl 	a
.9292	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9294	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9297	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.929a	f0 03		beq $929f			beq 	_IntegerCode 				; if clear, then we have two integers
.929c	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.929f					_IntegerCode:
.929f					IntegerModulusNoCheck:
.929f	20 74 92	jsr $9274			jsr 	CheckDivideZero 			; do div zero check
.92a2	20 ac 92	jsr $92ac			jsr 	Int32Divide 				; do the division
.92a5	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.92a8	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.92ab	60		rts				rts
.92ac					Int32Divide:
.92ac	48		pha				pha 								; save AXY
.92ad	5a		phy				phy
.92ae	20 5d a1	jsr $a15d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92b1	20 82 a1	jsr $a182			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.92b4	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.92b6					_I32DivideLoop:
.92b6	e8		inx				inx
.92b7	e8		inx				inx
.92b8	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.92bb	ca		dex				dex
.92bc	ca		dex				dex
.92bd	20 9c a1	jsr $a19c			jsr 	NSMRotateLeft
.92c0	20 ec 92	jsr $92ec			jsr 	DivideCheckSubtract 		; check if subtract possible
.92c3	90 03		bcc $92c8			bcc 	_I32DivideNoCarryIn
.92c5	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.92c8					_I32DivideNoCarryIn:
.92c8	88		dey				dey 								; loop round till division completed.
.92c9	d0 eb		bne $92b6			bne 	_I32DivideLoop
.92cb	7a		ply				ply 								; restore AXY and exit
.92cc	68		pla				pla
.92cd	60		rts				rts
.92ce					Int32ShiftDivide:
.92ce	48		pha				pha 								; save AY
.92cf	5a		phy				phy
.92d0	e8		inx				inx 								; clear S[X+2]
.92d1	e8		inx				inx
.92d2	20 86 a1	jsr $a186			jsr 	NSMSetZero
.92d5	ca		dex				dex
.92d6	ca		dex				dex
.92d7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.92d9					_I32SDLoop:
.92d9	20 ec 92	jsr $92ec			jsr 	DivideCheckSubtract 		; check if subtract possible
.92dc	e8		inx				inx
.92dd	e8		inx				inx
.92de	20 9c a1	jsr $a19c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.92e1	ca		dex				dex
.92e2	ca		dex				dex
.92e3	20 9c a1	jsr $a19c			jsr 	NSMRotateLeft
.92e6	88		dey				dey 	 							; do 31 times
.92e7	d0 f0		bne $92d9			bne 	_I32SDLoop
.92e9	7a		ply				ply 								; restore AY and exit
.92ea	68		pla				pla
.92eb	60		rts				rts
.92ec					DivideCheckSubtract:
.92ec	20 21 94	jsr $9421			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.92ef	b0 04		bcs $92f5			bcs 	_DCSExit 					; if carry set, then could do, exit
.92f1	20 fb 93	jsr $93fb			jsr 	AddTopTwoStack 				; add it back in
.92f4	18		clc				clc 								; and return False
.92f5					_DCSExit:
.92f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.92f6					MulInteger:
.92f6	fa		plx				plx
.92f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92fa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92fe	0a		asl a				asl 	a
.92ff	10 05		bpl $9306			bpl 	_NotRef
.9301	48		pha				pha
.9302	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9305	68		pla				pla
.9306					_NotRef:
.9306	0a		asl a				asl 	a 							; put MSB of type into A:7
.9307	30 0b		bmi $9314			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9309	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.930c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.930f	f0 06		beq $9317			beq 	_IntegerCode 				; if clear, then we have two integers
.9311	4c 2f 98	jmp $982f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9314					_StringData:
.9314	4c 24 a3	jmp $a324			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9317					_IntegerCode:
.9317	20 24 93	jsr $9324			jsr 	MultiplyShort
.931a	c9 00		cmp #$00			cmp 	#0
.931c	f0 05		beq $9323			beq 	_MIExit
.931e	a9 04		lda #$04		lda	#4
.9320	4c c3 90	jmp $90c3		jmp	ErrorHandler
.9323					_MIExit:
.9323	60		rts				rts
.9324					MultiplyShort:
.9324	5a		phy				phy 								; save Y
.9325	20 5d a1	jsr $a15d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9328	20 82 a1	jsr $a182			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.932b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.932d					_I32MLoop:
.932d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9330	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.9333	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.9336	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.9339	f0 28		beq $9363			beq 	_I32MExit 					; exit if zero
.933b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.933e	29 01		and #$01			and 	#1
.9340	f0 0e		beq $9350			beq 	_I32MNoAdd
.9342	20 fb 93	jsr $93fb			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9345	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9348	10 06		bpl $9350			bpl 	_I32MNoAdd
.934a					_I32ShiftRight:
.934a	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight 				; shift S[X] right
.934d	c8		iny				iny 								; increment shift count
.934e	80 0a		bra $935a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9350					_I32MNoAdd:
.9350	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9353	70 f5		bvs $934a			bvs 	_I32ShiftRight 				; instead.
.9355	e8		inx				inx
.9356	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9359	ca		dex				dex
.935a					_I32MShiftUpper:
.935a	e8		inx				inx 								; shift S[X+2] right
.935b	e8		inx				inx
.935c	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight
.935f	ca		dex				dex
.9360	ca		dex				dex
.9361	80 ca		bra $932d			bra 	_I32MLoop 					; try again.
.9363					_I32MExit:
.9363	20 69 93	jsr $9369			jsr 	CalculateSign
.9366	98		tya				tya 								; shift in A
.9367	7a		ply				ply 								; restore Y and exit
.9368	60		rts				rts
.9369					CalculateSign:
.9369	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.936c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.936f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9372	0a		asl a				asl 	a 							; shift bit 7 into carry
.9373	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.9376	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9377					CompareStrings:
.9377	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.937a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.937d	29 10		and #$10			and 	#NSBIsString
.937f	f0 2c		beq $93ad			beq 	_CSTypeError
.9381	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9384	85 36		sta $36				sta 	zTemp0
.9386	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9389	85 37		sta $37				sta 	zTemp0+1
.938b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.938e	85 38		sta $38				sta 	zTemp1
.9390	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9393	85 39		sta $39				sta 	zTemp1+1
.9395	5a		phy				phy 								; save Y so we can access strings
.9396	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9398					_CSLoop:
.9398	c8		iny				iny
.9399	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.939b	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.939d	d0 06		bne $93a5			bne 	_CSDifferent
.939f	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93a1	d0 f5		bne $9398			bne 	_CSLoop 					; still comparing
.93a3					_CSExit:
.93a3	7a		ply				ply 								; reached end, return zero in A from EOS
.93a4	60		rts				rts
.93a5					_CSDifferent:
.93a5	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93a7	90 fa		bcc $93a3			bcc		_CSExit
.93a9	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93ab	80 f6		bra $93a3			bra 	_CSExit
.93ad					_CSTypeError:
.93ad	4c 1a a3	jmp $a31a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93b0					ShiftLeft:
.93b0	38		sec				sec
.93b1	80 01		bra $93b4			bra 	ShiftMain
.93b3					ShiftRight:
.93b3	18		clc				clc
.93b4					ShiftMain:
.93b4	fa		plx				plx 								; restore X
.93b5	08		php				php 								; save direction
.93b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93b9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93bc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93bd	0a		asl a				asl 	a
.93be	10 05		bpl $93c5			bpl 	_NotRef
.93c0	48		pha				pha
.93c1	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93c4	68		pla				pla
.93c5					_NotRef:
.93c5	0a		asl a				asl 	a
.93c6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93c8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93cb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93ce	f0 03		beq $93d3			beq 	_IntegerCode 				; if clear, then we have two integers
.93d0	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.93d3					_IntegerCode:
.93d3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.93d6	29 e0		and #$e0			and 	#$E0
.93d8	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.93db	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.93de	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.93e1	d0 13		bne $93f6			bne 	_SMExit0 					; if >= 32 it will always return zero.
.93e3					_SMLoop:
.93e3	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.93e6	30 11		bmi $93f9			bmi 	_SMExit 					; exit if done.
.93e8	28		plp				plp 								; restore direcition setting
.93e9	08		php				php
.93ea	90 05		bcc $93f1			bcc 	_SMRight
.93ec	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; shift left if CS
.93ef	80 f2		bra $93e3			bra 	_SMLoop
.93f1					_SMRight:
.93f1	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight 				; shift right if CC
.93f4	80 ed		bra $93e3			bra 	_SMLoop
.93f6					_SMExit0:
.93f6	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; return zero.
.93f9					_SMExit:
.93f9	28		plp				plp 								; throw direction
.93fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.93fb					AddTopTwoStack:
.93fb	18		clc				clc
.93fc	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.93ff	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9402	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9405	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9408	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.940b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.940e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9411	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9414	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9417	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.941a	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.941d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9420	60		rts				rts
.9421					SubTopTwoStack:
.9421	38		sec				sec
.9422	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9425	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9428	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.942b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.942e	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9431	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9434	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9437	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.943a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.943d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9440	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9443	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9446	60		rts				rts
.9447					AddInteger:
.9447	fa		plx				plx
.9448	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.944b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.944e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.944f	0a		asl a				asl 	a
.9450	10 05		bpl $9457			bpl 	_NotRef
.9452	48		pha				pha
.9453	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9456	68		pla				pla
.9457					_NotRef:
.9457	0a		asl a				asl 	a 							; put MSB of type into A:7
.9458	30 0b		bmi $9465			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.945a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.945d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9460	f0 06		beq $9468			beq 	_IntegerCode 				; if clear, then we have two integers
.9462	4c af 96	jmp $96af			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9465					_StringData:
.9465	4c d7 91	jmp $91d7			jmp 	StringConcat							; at least one string - don't know both are strings.
.9468					_IntegerCode:
.9468					AddCode:
.9468	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.946b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.946e	10 8b		bpl $93fb			bpl 	AddTopTwoStack
.9470	20 21 94	jsr $9421			jsr 	SubTopTwoStack 				; do a physical subtraction
.9473	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9476	10 09		bpl $9481			bpl 	_AddExit
.9478	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.947b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.947e	20 3b a1	jsr $a13b			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9481					_AddExit:
.9481	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; check for -0
.9484	d0 03		bne $9489			bne 	_AddNonZero
.9486	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9489					_AddNonZero:
.9489	60		rts				rts
.948a					SubInteger:
.948a	fa		plx				plx
.948b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.948e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9491	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9492	0a		asl a				asl 	a
.9493	10 05		bpl $949a			bpl 	_NotRef
.9495	48		pha				pha
.9496	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9499	68		pla				pla
.949a					_NotRef:
.949a	0a		asl a				asl 	a 							; put MSB of type into A:7
.949b	30 0b		bmi $94a8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.949d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94a3	f0 06		beq $94ab			beq 	_IntegerCode 				; if clear, then we have two integers
.94a5	4c b4 96	jmp $96b4			jmp 	FloatingPointSub 							; otherwise at least one float.
.94a8					_StringData:
.94a8	4c 24 a3	jmp $a324			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94ab					_IntegerCode:
.94ab	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.94ae	49 80		eor #$80			eor 	#$80
.94b0	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.94b3	80 b3		bra $9468			bra 	AddCode 					; and do the same code as add.
.94b5					AndInteger:
.94b5	fa		plx				plx
.94b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94b9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94bc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94bd	0a		asl a				asl 	a
.94be	10 05		bpl $94c5			bpl 	_NotRef
.94c0	48		pha				pha
.94c1	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94c4	68		pla				pla
.94c5					_NotRef:
.94c5	0a		asl a				asl 	a
.94c6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94c8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94cb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94ce	f0 03		beq $94d3			beq 	_IntegerCode 				; if clear, then we have two integers
.94d0	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.94d3					_IntegerCode:
.94d3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94d6	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.94d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94dc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94df	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.94e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94e5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94e8	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.94eb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94ee	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94f1	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.94f4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94f7	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.94fa	60		rts				rts
.94fb					OraInteger:
.94fb	fa		plx				plx
.94fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94ff	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9502	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9503	0a		asl a				asl 	a
.9504	10 05		bpl $950b			bpl 	_NotRef
.9506	48		pha				pha
.9507	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.950a	68		pla				pla
.950b					_NotRef:
.950b	0a		asl a				asl 	a
.950c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.950e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9511	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9514	f0 03		beq $9519			beq 	_IntegerCode 				; if clear, then we have two integers
.9516	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.9519					_IntegerCode:
.9519	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.951c	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.951f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9522	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9525	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9528	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.952b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.952e	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9531	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9534	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9537	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.953a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.953d	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9540	60		rts				rts
.9541					EorInteger:
.9541	fa		plx				plx
.9542	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9545	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9548	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9549	0a		asl a				asl 	a
.954a	10 05		bpl $9551			bpl 	_NotRef
.954c	48		pha				pha
.954d	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9550	68		pla				pla
.9551					_NotRef:
.9551	0a		asl a				asl 	a
.9552	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9554	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9557	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.955a	f0 03		beq $955f			beq 	_IntegerCode 				; if clear, then we have two integers
.955c	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.955f					_IntegerCode:
.955f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9562	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9565	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9568	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.956b	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.956e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9571	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9574	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9577	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.957a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.957d	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9580	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9583	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9586	60		rts				rts
.9587					WordIndirect:
.9587	fa		plx				plx
.9588	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.958b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.958e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.958f	0a		asl a				asl 	a
.9590	10 05		bpl $9597			bpl 	_NotRef
.9592	48		pha				pha
.9593	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9596	68		pla				pla
.9597					_NotRef:
.9597	0a		asl a				asl 	a
.9598	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.959a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.959d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95a0	f0 03		beq $95a5			beq 	_IntegerCode 				; if clear, then we have two integers
.95a2	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.95a5					_IntegerCode:
.95a5	20 68 94	jsr $9468			jsr 	AddCode 					; add the two values
.95a8	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.95aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95ad	60		rts				rts
.95ae					ByteIndirect:
.95ae	fa		plx				plx
.95af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95b2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95b6	0a		asl a				asl 	a
.95b7	10 05		bpl $95be			bpl 	_NotRef
.95b9	48		pha				pha
.95ba	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95bd	68		pla				pla
.95be					_NotRef:
.95be	0a		asl a				asl 	a
.95bf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95c1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95c7	f0 03		beq $95cc			beq 	_IntegerCode 				; if clear, then we have two integers
.95c9	4c 1a a3	jmp $a31a			jmp 	TypeError 					; anything else, type mismatch.
.95cc					_IntegerCode:
.95cc	20 68 94	jsr $9468			jsr 	AddCode 					; add the two values
.95cf	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.95d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.95d5					ConvertInt16:
.95d5	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.95d8	8e 10 04	stx $0410			stx 	NSMantissa1
.95db	9c 18 04	stz $0418			stz 	NSMantissa2
.95de	9c 20 04	stz $0420			stz 	NSMantissa3
.95e1	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.95e4	a2 00		ldx #$00			ldx 	#0 							; stack level
.95e6	a9 0a		lda #$0a			lda 	#10 						; base
.95e8	80 00		bra $95ea			bra 	ConvertInt32
.95ea					ConvertInt32:
.95ea	5a		phy				phy
.95eb	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95ed	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.95f0	10 08		bpl $95fa			bpl 	_CI32NotNeg
.95f2	48		pha				pha
.95f3	a9 2d		lda #$2d			lda 	#'-'
.95f5	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.95f8	c8		iny				iny
.95f9	68		pla				pla
.95fa					_CI32NotNeg:
.95fa	20 08 96	jsr $9608			jsr 	_CI32DivideConvert 			; recursive conversion
.95fd	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95ff	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.9602	7a		ply				ply
.9603	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9605	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.9607	60		rts				rts
.9608					_CI32DivideConvert:
.9608	e8		inx				inx 								; write to next slot up
.9609	20 88 a1	jsr $a188			jsr 	NSMSetByte
.960c	ca		dex				dex
.960d	20 ac 92	jsr $92ac			jsr 	Int32Divide 				; divide
.9610	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9613	48		pha				pha
.9614	20 5b 92	jsr $925b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9617	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; is it zero ?
.961a	f0 06		beq $9622			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.961c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.961f	20 08 96	jsr $9608			jsr 	_CI32DivideConvert 			; and recusrively call.
.9622					_CI32NoRecurse:
.9622	68		pla				pla 								; remainder
.9623	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9625	90 02		bcc $9629			bcc 	_CI32NotHex
.9627	69 26		adc #$26			adc 	#6+32
.9629					_CI32NotHex:
.9629	69 30		adc #$30			adc 	#48
.962b	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.962e	c8		iny				iny
.962f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9630					PrecedenceLevel:
>9630	04					.byte	 4	; $00 <<
>9631	02					.byte	 2	; $01 <=
>9632	02					.byte	 2	; $02 <>
>9633	00					.byte	 0	; $03 !!3
>9634	00					.byte	 0	; $04 ><
>9635	02					.byte	 2	; $05 >=
>9636	04					.byte	 4	; $06 >>
>9637	00					.byte	 0	; $07 !!7
>9638	00					.byte	 0	; $08 !!8
>9639	00					.byte	 0	; $09 !!9
>963a	00					.byte	 0	; $0a !!10
>963b	00					.byte	 0	; $0b !!11
>963c	00					.byte	 0	; $0c !!12
>963d	00					.byte	 0	; $0d !!13
>963e	00					.byte	 0	; $0e !!14
>963f	00					.byte	 0	; $0f !!15
>9640	00					.byte	 0	; $10 @
>9641	00					.byte	 0	; $11 !!17
>9642	00					.byte	 0	; $12 !!18
>9643	00					.byte	 0	; $13 [
>9644	04					.byte	 4	; $14 \
>9645	00					.byte	 0	; $15 ]
>9646	01					.byte	 1	; $16 ^
>9647	00					.byte	 0	; $17 _
>9648	00					.byte	 0	; $18 `
>9649	00					.byte	 0	; $19 !!25
>964a	00					.byte	 0	; $1a !!26
>964b	00					.byte	 0	; $1b {
>964c	01					.byte	 1	; $1c |
>964d	00					.byte	 0	; $1d }
>964e	00					.byte	 0	; $1e ~
>964f	00					.byte	 0	; $1f [7m<7F>[m
>9650	00					.byte	 0	; $20
>9651	05					.byte	 5	; $21 !
>9652	00					.byte	 0	; $22 "
>9653	00					.byte	 0	; $23 #
>9654	05					.byte	 5	; $24 $
>9655	04					.byte	 4	; $25 %
>9656	01					.byte	 1	; $26 &
>9657	00					.byte	 0	; $27 '
>9658	00					.byte	 0	; $28 (
>9659	00					.byte	 0	; $29 )
>965a	04					.byte	 4	; $2a *
>965b	03					.byte	 3	; $2b +
>965c	00					.byte	 0	; $2c ,
>965d	03					.byte	 3	; $2d -
>965e	00					.byte	 0	; $2e .
>965f	04					.byte	 4	; $2f /
>9660	00					.byte	 0	; $30 0
>9661	00					.byte	 0	; $31 1
>9662	00					.byte	 0	; $32 2
>9663	00					.byte	 0	; $33 3
>9664	00					.byte	 0	; $34 4
>9665	00					.byte	 0	; $35 5
>9666	00					.byte	 0	; $36 6
>9667	00					.byte	 0	; $37 7
>9668	00					.byte	 0	; $38 8
>9669	00					.byte	 0	; $39 9
>966a	00					.byte	 0	; $3a :
>966b	00					.byte	 0	; $3b ;
>966c	02					.byte	 2	; $3c <
>966d	02					.byte	 2	; $3d =
>966e	02					.byte	 2	; $3e >
>966f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9670					EvaluateExpressionAt0:
.9670	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9672					EvaluateExpression:
.9672	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9674					EvaluateExpressionAtPrecedence:
.9674	48		pha				pha 								; save precedence level
.9675	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm 				; evaluate term into level X.
.9678	68		pla				pla 								; restore precedence level.
.9679					_EXPRLoop:
.9679	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.967b	b1 30		lda ($30),y			lda 	(codePtr),y
.967d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.967f	b0 25		bcs $96a6			bcs 	_EXPRExit
.9681	da		phx				phx 								; read the operator precedence
.9682	aa		tax				tax
.9683	bd 30 96	lda $9630,x			lda 	PrecedenceLevel,x
.9686	fa		plx				plx
.9687	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9689	f0 1b		beq $96a6			beq 	_EXPRExit
.968b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.968d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.968f	c5 37		cmp $37				cmp 	zTemp0+1
.9691	b0 13		bcs $96a6			bcs		_EXPRExit 					; if current >= operator exit
.9693	48		pha				pha 								; save current precedence.
.9694	b1 30		lda ($30),y			lda 	(codePtr),y
.9696	c8		iny				iny
.9697	48		pha				pha
.9698	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.969a	e8		inx				inx 								; work out the right hand side.
.969b	20 74 96	jsr $9674			jsr 	EvaluateExpressionAtPrecedence
.969e	ca		dex				dex
.969f	68		pla				pla 								; get operator, call the code.
.96a0	20 a9 96	jsr $96a9			jsr 	_EXPRCaller
.96a3	68		pla				pla 								; restore precedence level
.96a4	80 d3		bra $9679			bra 	_EXPRLoop 					; and go round.
.96a6					_EXPRExit:
.96a6	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.96a8	60		rts				rts
.96a9					_EXPRCaller:
.96a9	da		phx				phx 								; save on stack, first thing is to restore it
.96aa	0a		asl a				asl 	a 							; double so can use vectors into X
.96ab	aa		tax				tax
.96ac	7c d8 8d	jmp ($8dd8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.96af					FloatingPointAdd:
.96af	20 58 98	jsr $9858			jsr 	FloatPrepare 				; prepare for floats
.96b2	80 0b		bra $96bf			bra 	FloatAdd
.96b4					FloatingPointSub:
.96b4	20 58 98	jsr $9858			jsr 	FloatPrepare 				; prepare for floats
.96b7					FloatSubtract:
.96b7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.96ba	49 80		eor #$80			eor 	#$80
.96bc	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.96bf					FloatAdd:
.96bf	48		pha				pha
.96c0	5a		phy				phy
.96c1	20 69 98	jsr $9869			jsr 	NSNormalise 				; normalise S[X]
.96c4	f0 5c		beq $9722			beq 	_FAReturn1
.96c6	e8		inx				inx 								; normalise S[X+1]
.96c7	20 69 98	jsr $9869			jsr 	NSNormalise
.96ca	ca		dex				dex
.96cb	c9 00		cmp #$00			cmp 	#0
.96cd	f0 77		beq $9746			beq 	_FAExit 					; if so, just return A
.96cf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.96d2	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.96d5	f0 1b		beq $96f2			beq 	_FAExponentsEqual
.96d7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.96da	a8		tay				tay
.96db	38		sec				sec 								; do a signed comparison of the exponents.
.96dc	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.96df	50 02		bvc $96e3			bvc 	_FANoSignedChange
.96e1	49 80		eor #$80			eor 	#$80
.96e3					_FANoSignedChange:
.96e3	29 80		and #$80			and 	#$80
.96e5	10 03		bpl $96ea			bpl 	_FAHaveMax
.96e7	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.96ea					_FAHaveMax:
.96ea	20 49 97	jsr $9749			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96ed	e8		inx				inx
.96ee	20 49 97	jsr $9749			jsr 	_FAShiftToExponent
.96f1	ca		dex				dex
.96f2					_FAExponentsEqual:
.96f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.96f5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96f8	30 10		bmi $970a			bmi 	_FADifferentSigns
.96fa	20 fb 93	jsr $93fb			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96fd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9700	10 44		bpl $9746			bpl 	_FAExit 					; if no, we are done.
.9702	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9705	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9708	80 3c		bra $9746			bra 	_FAExit
.970a					_FADifferentSigns:
.970a	20 21 94	jsr $9421			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.970d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9710	10 06		bpl $9718			bpl 	_FACheckZero 				; if no, check for -0
.9712	20 32 a1	jsr $a132			jsr 	NSMNegate 					; netate result
.9715	20 3b a1	jsr $a13b			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9718					_FACheckZero:
.9718	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero	 				; check for -0
.971b	d0 29		bne $9746			bne 	_FAExit
.971d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9720	80 24		bra $9746			bra 	_FAExit
.9722					_FAReturn1:
.9722	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9725	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9728	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.972b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.972e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9731	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9734	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9737	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.973a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.973d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9740	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9743	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9746					_FAExit:
.9746	7a		ply				ply
.9747	68		pla				pla
.9748	60		rts				rts
.9749					_FAShiftToExponent:
.9749					_FAShiftToExponent2:
.9749	98		tya				tya 								; compare Y to exponent
.974a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.974d	f0 08		beq $9757			beq 	_FASEExit 					; exit if so.
.974f	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight	 			; shift the mantissa right
.9752	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.9755	80 f2		bra $9749			bra 	_FAShiftToExponent2
.9757					_FASEExit:
.9757	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9758					CompareFloat:
.9758	20 b7 96	jsr $96b7			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.975b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.975e	29 f8		and #$f8			and 	#$F8
.9760	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9763	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.9766	f0 09		beq $9771			beq 	_FCExit 					; zero, so approximately identical
.9768	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.976a	3c 00 04	bit $0400,x			bit 	NSStatus,x
.976d	10 02		bpl $9771			bpl 	_FCExit
.976f					_FCNegative:
.976f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9771					_FCExit:
.9771	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9772					FDivideCommand:
.9772	fa		plx				plx	 								; restore stack position
.9773	20 58 98	jsr $9858			jsr 	FloatPrepare 				; prepare for floats
.9776					FloatDivide:
.9776	48		pha				pha
.9777	e8		inx				inx
.9778	20 69 98	jsr $9869			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.977b	ca		dex				dex
.977c	c9 00		cmp #$00			cmp 	#0
.977e	f0 20		beq $97a0			beq 	_FDZero
.9780	20 69 98	jsr $9869			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9783	f0 19		beq $979e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9785	20 ce 92	jsr $92ce			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9788	20 5b 92	jsr $925b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.978b	20 69 98	jsr $9869			jsr		NSNormalise 				; renormalise
.978e	20 69 93	jsr $9369			jsr 	CalculateSign 				; calculate result sign
.9791	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9794	38		sec				sec
.9795	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9798	38		sec				sec
.9799	e9 1e		sbc #$1e			sbc 	#30
.979b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.979e					_FDExit:
.979e	68		pla				pla
.979f	60		rts				rts
.97a0					_FDZero:
.97a0	a9 03		lda #$03		lda	#3
.97a2	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.97a5					FloatFractionalPart:
.97a5	5a		phy				phy
.97a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.97a9	29 7f		and #$7f			and 	#$7F
.97ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97ae	20 69 98	jsr $9869			jsr 	NSNormalise
.97b1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.97b4	38		sec				sec
.97b5	e9 e0		sbc #$e0			sbc 	#$E0
.97b7	90 31		bcc $97ea			bcc 	_FFPExit 					; already fractional
.97b9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.97bb	b0 2a		bcs $97e7			bcs 	_FFPZero
.97bd	a8		tay				tay 								; put count to do in Y
.97be	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.97c1	20 ec 97	jsr $97ec			jsr 	_FFPPartial
.97c4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97c7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.97ca	20 ec 97	jsr $97ec			jsr 	_FFPPartial
.97cd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97d0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97d3	20 ec 97	jsr $97ec			jsr 	_FFPPartial
.97d6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97d9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97dc	20 ec 97	jsr $97ec			jsr 	_FFPPartial
.97df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97e2	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; zeroed check.
.97e5	d0 03		bne $97ea			bne 	_FFPExit
.97e7					_FFPZero:
.97e7	20 86 a1	jsr $a186			jsr 	NSMSetZero
.97ea					_FFPExit:
.97ea	7a		ply				ply
.97eb	60		rts				rts
.97ec					_FFPPartial:
.97ec	c0 00		cpy #$00			cpy 	#0 							; no more to do
.97ee	f0 17		beq $9807			beq 	_FFFPPExit
.97f0	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.97f2	b0 0c		bcs $9800			bcs 	_FFFPPWholeByte
.97f4	5a		phy				phy
.97f5					_FFFPPLeft:
.97f5	0a		asl a				asl 	a
.97f6	88		dey				dey
.97f7	d0 fc		bne $97f5			bne 	_FFFPPLeft
.97f9	7a		ply				ply
.97fa					_FFFPPRight:
.97fa	4a		lsr a				lsr 	a
.97fb	88		dey				dey
.97fc	d0 fc		bne $97fa			bne 	_FFFPPRight
.97fe	80 07		bra $9807			bra 	_FFFPPExit
.9800					_FFFPPWholeByte:
.9800	98		tya				tya 								; subtract 8 from count
.9801	38		sec				sec
.9802	e9 08		sbc #$08			sbc 	#8
.9804	a8		tay				tay
.9805	a9 00		lda #$00			lda 	#0 							; and clear all
.9807					_FFFPPExit:
.9807	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9808					FloatIntegerPart:
.9808	48		pha				pha
.9809	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.980c	f0 1f		beq $982d			beq 	_FIPExit 					; if so do nothing
.980e	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; is it zero ?
.9811	f0 17		beq $982a			beq 	_FIPZero 					; if so return zero.
.9813	20 69 98	jsr $9869			jsr 	NSNormalise 				; normalise
.9816	f0 12		beq $982a			beq 	_FIPZero 					; normalised to zero, exit zero
.9818					_FIPShift:
.9818	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.981b	10 08		bpl $9825			bpl 	_FIPCheckZero
.981d	20 a9 a1	jsr $a1a9			jsr 	NSMShiftRight 				; shift mantissa right
.9820	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9823	80 f3		bra $9818			bra 	_FIPShift
.9825					_FIPCheckZero:
.9825	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; avoid -0 problem
.9828	d0 03		bne $982d			bne 	_FIPExit 					; set to zero if mantissa zero.
.982a					_FIPZero:
.982a	20 86 a1	jsr $a186			jsr 	NSMSetZero
.982d					_FIPExit:
.982d	68		pla				pla
.982e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.982f					FloatingPointMultiply:
.982f	20 58 98	jsr $9858			jsr 	FloatPrepare 				; prepare for floats
.9832					FloatMultiply:
.9832	48		pha				pha
.9833	20 69 98	jsr $9869			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9836	f0 1b		beq $9853			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9838	e8		inx				inx
.9839	20 69 98	jsr $9869			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.983c	ca		dex				dex
.983d	c9 00		cmp #$00			cmp 	#0
.983f	f0 0f		beq $9850			beq 	_FDSetZero
.9841	20 24 93	jsr $9324			jsr 	MultiplyShort 				; calculate the result.
.9844	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9847	18		clc				clc
.9848	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.984b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.984e	80 03		bra $9853			bra 	_FDExit
.9850					_FDSetZero:
.9850	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; return 0
.9853					_FDExit:
.9853	20 69 98	jsr $9869			jsr 	NSNormalise 				; normalise the result
.9856	68		pla				pla
.9857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9858					FloatPrepare:
.9858	20 8b 99	jsr $998b			jsr 	DereferenceTopTwo 			; dereference the top two values
.985b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.985e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9861	29 10		and #$10			and 	#NSBIsString
.9863	d0 01		bne $9866			bne 	_FDType
.9865	60		rts				rts
.9866					_FDType:
.9866	4c 1a a3	jmp $a31a			jmp 	TypeError
.9869					NSNormalise:
.9869	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.986c	29 80		and #$80			and 	#$80
.986e	09 08		ora #$08			ora 	#NSTFloat
.9870	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9873	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; if zero exit
.9876	d0 09		bne $9881			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9878	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.987b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.987e	a9 00		lda #$00			lda 	#0 							; set Z flag
.9880	60		rts				rts
.9881					_NSNormaliseOptimise:
.9881	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9884	d0 22		bne $98a8			bne 	_NSNormaliseLoop
.9886	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9889	30 1d		bmi $98a8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.988b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.988e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9891	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9894	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9897	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.989a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.989d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.98a0	38		sec				sec
.98a1	e9 08		sbc #$08			sbc 	#8
.98a3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.98a6	80 d9		bra $9881			bra 	_NSNormaliseOptimise
.98a8					_NSNormaliseLoop:
.98a8	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.98ab	70 08		bvs $98b5			bvs 	_NSNExit 					; exit if so with Z flag clear
.98ad	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; shift mantissa left
.98b0	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.98b3	80 f3		bra $98a8			bra 	_NSNormaliseLoop
.98b5					_NSNExit:
.98b5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.98b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98b8					AssignNumber:
.98b8	5a		phy				phy
.98b9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98bc	85 36		sta $36				sta 	zTemp0
.98be	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98c1	85 37		sta $37				sta 	zTemp0+1
.98c3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.98c6	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98c8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98cb	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98cd	c9 08		cmp #$08			cmp 	#NSTFloat
.98cf	f0 2a		beq $98fb			beq 	_ANFloat
.98d1	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.98d4	f0 05		beq $98db			beq		_ANNotFloat
.98d6	e8		inx				inx
.98d7	20 08 98	jsr $9808			jsr 	FloatIntegerPart 			; make it an integer
.98da	ca		dex				dex
.98db					_ANNotFloat:
.98db	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.98de	29 03		and #$03			and 	#3
.98e0	d0 05		bne $98e7			bne 	_ANByteWord
.98e2	20 07 99	jsr $9907			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98e5	80 1e		bra $9905			bra 	_ANExit
.98e7					_ANByteWord:
.98e7	48		pha				pha 								; save count
.98e8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.98eb	92 36		sta ($36)			sta 	(zTemp0)
.98ed	68		pla				pla
.98ee	c9 01		cmp #$01			cmp	 	#1
.98f0	f0 13		beq $9905			beq 	_ANExit
.98f2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.98f5	a0 01		ldy #$01			ldy 	#1
.98f7	91 36		sta ($36),y			sta 	(zTemp0),y
.98f9	80 0a		bra $9905			bra 	_ANExit
.98fb					_ANFloat:
.98fb	20 07 99	jsr $9907			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.98fe	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9901	a0 04		ldy #$04			ldy 	#4
.9903	91 36		sta ($36),y			sta 	(zTemp0),y
.9905					_ANExit:
.9905	7a		ply				ply
.9906	60		rts				rts
.9907					_ANCopy4PackSign:
.9907	a0 03		ldy #$03			ldy 	#3
.9909	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.990c	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.990e	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9911	91 36		sta ($36),y			sta 	(zTemp0),y
.9913	88		dey				dey
.9914	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9917	91 36		sta ($36),y			sta 	(zTemp0),y
.9919	88		dey				dey
.991a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.991d	91 36		sta ($36),y			sta 	(zTemp0),y
.991f	88		dey				dey
.9920	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9923	91 36		sta ($36),y			sta 	(zTemp0),y
.9925	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9926					AssignString:
.9926	5a		phy				phy
.9927	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.992a	85 38		sta $38				sta 	zTemp1
.992c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.992f	85 39		sta $39				sta 	zTemp1+1
.9931	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9934	85 36		sta $36				sta 	zTemp0
.9936	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9939	85 37		sta $37				sta 	zTemp0+1
.993b	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.993d	b1 36		lda ($36),y			lda 	(zTemp0),y
.993f	f0 23		beq $9964			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9941	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9942	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9944	e9 02		sbc #$02			sbc 	#2
.9946	85 3c		sta $3c				sta 	zsTemp
.9948	a0 01		ldy #$01			ldy 	#1
.994a	b1 36		lda ($36),y			lda 	(zTemp0),y
.994c	e9 00		sbc #$00			sbc 	#0
.994e	85 3d		sta $3d				sta 	zsTemp+1
.9950	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9952					_ASGetLength:
.9952	c8		iny				iny
.9953	b1 38		lda ($38),y			lda 	(zTemp1),y
.9955	d0 fb		bne $9952			bne 	_ASGetLength
.9957	98		tya				tya 								; is this length <= current length
.9958	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.995a	90 20		bcc $997c			bcc 	_ASCopyString
.995c	f0 1e		beq $997c			beq 	_ASCopyString
.995e	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9960	a0 01		ldy #$01			ldy 	#1
.9962	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9964					_ASNewStringRequired:
.9964	e8		inx				inx 								; concrete the new string.
.9965	20 f9 a6	jsr $a6f9			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9968	ca		dex				dex
.9969	18		clc				clc
.996a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.996d	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.996f	92 36		sta ($36)			sta 	(zTemp0)
.9971	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9974	69 00		adc #$00			adc 	#0
.9976	a0 01		ldy #$01			ldy 	#1
.9978	91 36		sta ($36),y			sta 	(zTemp0),y
.997a	80 0d		bra $9989			bra 	_ASExit
.997c					_ASCopyString:
.997c	a0 00		ldy #$00			ldy 	#0
.997e					_ASCopyLoop:
.997e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9980	c8		iny				iny
.9981	c8		iny				iny
.9982	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9984	88		dey				dey
.9985	c9 00		cmp #$00			cmp 	#0
.9987	d0 f5		bne $997e			bne 	_ASCopyLoop
.9989					_ASExit:
.9989	7a		ply				ply
.998a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.998b					DereferenceTopTwo:
.998b	e8		inx				inx
.998c	20 90 99	jsr $9990			jsr 	Dereference 				; deref x+1
.998f	ca		dex				dex  								; falls through to deref x
.9990					Dereference:
.9990	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9993	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9995	f0 57		beq $99ee			beq 	_DRFExit 					; not a reference
.9997	5a		phy				phy
.9998	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.999b	85 36		sta $36				sta 	zTemp0
.999d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.99a0	85 37		sta $37				sta 	zTemp0+1
.99a2	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.99a5	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.99a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.99ad	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.99af	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.99b1	f0 0f		beq $99c2			beq 	_DRFDereferenceTwo
.99b3	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.99b5	f0 39		beq $99f0			beq 	_DRFFull
.99b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99ba	29 03		and #$03			and 	#3
.99bc	f0 32		beq $99f0			beq 	_DRFFull 					; the whole word
.99be	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99c0	f0 07		beq $99c9			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99c2					_DRFDereferenceTwo:
.99c2	a0 01		ldy #$01			ldy 	#1
.99c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.99c6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99c9					_DRFClear23:
.99c9	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99cc	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.99d2	29 18		and #$18			and 	#NSBTypeMask
.99d4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99d7	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99d9	d0 12		bne $99ed			bne 	_DRFNotString
.99db	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.99de	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.99e1	d0 0a		bne $99ed			bne 	_DRFNotString
.99e3	a9 ef		lda #$ef			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.99e8	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99ea	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.99ed					_DRFNotString
.99ed	7a		ply				ply 								; restore Y and exit
.99ee					_DRFExit:
.99ee	60		rts				rts
.99ef					_DRFNullString:
>99ef	00						.byte 	0
.99f0					_DRFFull:
.99f0	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.99f4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99f7	c8		iny				iny
.99f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.99fa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99fd	c8		iny				iny
.99fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a00	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a03	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9a06	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9a09	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9a0b	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9a0e	f0 06		beq $9a16			beq 	_DRFNoExponent
.9a10	c8		iny				iny 								; if not, read the exponent as well.
.9a11	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a13	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a16					_DRFNoExponent:
.9a16	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a19	10 0d		bpl $9a28			bpl 	_DRFExit2 					; if not, then exit.
.9a1b	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a1d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a20	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9a23	09 80		ora #$80			ora 	#NSBIsNegative
.9a25	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a28					_DRFExit2:
.9a28	7a		ply				ply
.9a29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a2a					EncodeNumberStart:
.9a2a	38		sec				sec
.9a2b	80 01		bra $9a2e			bra 	EncodeNumberContinue+1
.9a2d					EncodeNumberContinue:
.9a2d	18		clc				clc
.9a2e					EncodeNumber:
.9a2e	08		php				php 								; save reset.
.9a2f	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a31	f0 12		beq $9a45			beq 	_ENIsOkay
.9a33	c9 30		cmp #$30			cmp 	#"0"
.9a35	90 04		bcc $9a3b			bcc 	_ENBadNumber
.9a37	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a39	90 0a		bcc $9a45			bcc 	_ENIsOkay
.9a3b					_ENBadNumber:
.9a3b	28		plp				plp 								; throw saved reset
.9a3c	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9a3f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a41	f0 7e		beq $9ac1			beq 	_ENConstructFinal
.9a43					_ENFail:
.9a43	18		clc				clc 								; not allowed
.9a44	60		rts				rts
.9a45					_ENIsOkay:
.9a45	28		plp				plp 								; are we restarting
.9a46	90 15		bcc $9a5d			bcc 	_ENNoRestart
.9a48					_ENStartEncode:
.9a48	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9a4a	f0 0c		beq $9a58			beq 	_ENFirstDP
.9a4c	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9a4e	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9a51	a9 01		lda #$01			lda 	#ESTA_Low
.9a53					_ENExitChange:
.9a53	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9a56	38		sec				sec
.9a57	60		rts				rts
.9a58					_ENFirstDP:
.9a58	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; clear integer part
.9a5b	80 3f		bra $9a9c			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a5d					_ENNoRestart:
.9a5d	48		pha				pha 								; save on stack.
.9a5e	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9a61	c9 01		cmp #$01			cmp 	#ESTA_Low
.9a63	f0 09		beq $9a6e			beq  	_ESTALowState
.9a65	c9 02		cmp #$02			cmp 	#ESTA_High
.9a67	f0 29		beq $9a92			beq 	_ESTAHighState
.9a69	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a6b	f0 3b		beq $9aa8			beq 	_ESTADecimalState
>9a6d	db						.byte 	$DB 						; causes a break in the emulator
.9a6e					_ESTALowState:
.9a6e	68		pla				pla 								; get value back
.9a6f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a71	f0 29		beq $9a9c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a73	29 0f		and #$0f			and 	#15 						; make digit
.9a75	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a7b	0a		asl a				asl 	a
.9a7c	0a		asl a				asl 	a
.9a7d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a80	0a		asl a				asl 	a
.9a81	6d 86 04	adc $0486			adc 	DigitTemp
.9a84	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a87	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a89	90 05		bcc $9a90			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a8b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a8d	8d 85 04	sta $0485			sta 	EncodeState
.9a90					_ESTANoSwitch:
.9a90	38		sec				sec
.9a91	60		rts				rts
.9a92					_ESTAHighState:
.9a92	68		pla				pla 								; get value back
.9a93	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a95	f0 05		beq $9a9c			beq 	_ESTASwitchFloat
.9a97	20 fb 9a	jsr $9afb			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a9a	38		sec				sec
.9a9b	60		rts				rts
.9a9c					_ESTASwitchFloat:
.9a9c	9c 87 04	stz $0487			stz 	DecimalCount
.9a9f	e8		inx				inx 								; zero the decimal additive.
.9aa0	20 86 a1	jsr $a186			jsr 	NSMSetZero
.9aa3	ca		dex				dex
.9aa4	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9aa6	80 ab		bra $9a53			bra 	_ENExitChange
.9aa8					_ESTADecimalState:
.9aa8	68		pla				pla 								; digit.
.9aa9	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9aab	f0 96		beq $9a43			beq 	_ENFail
.9aad	e8		inx				inx 								; put digit into fractional part of X+1
.9aae	20 fb 9a	jsr $9afb			jsr 	ESTAShiftDigitIntoMantissa
.9ab1	ca		dex				dex
.9ab2	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9ab5	ad 87 04	lda $0487			lda 	DecimalCount
.9ab8	c9 0b		cmp #$0b			cmp 	#11
.9aba	f0 02		beq $9abe			beq 	_ESTADSFail
.9abc	38		sec				sec
.9abd	60		rts				rts
.9abe					_ESTADSFail:
.9abe	4c 15 a3	jmp $a315			jmp 	RangeError
.9ac1					_ENConstructFinal:
.9ac1	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9ac4	f0 33		beq $9af9			beq 	_ENCFExit 					; no decimals
.9ac6	5a		phy				phy
.9ac7	0a		asl a				asl 	a 							; x 4 and CLC
.9ac8	0a		asl a				asl 	a
.9ac9	6d 87 04	adc $0487			adc 	DecimalCount
.9acc	a8		tay				tay
.9acd	b9 d4 a2	lda $a2d4,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ad0	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ad3	b9 d5 a2	lda $a2d5,y			lda 	DecimalScalarTable-5+1,y
.9ad6	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ad9	b9 d6 a2	lda $a2d6,y			lda 	DecimalScalarTable-5+2,y
.9adc	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9adf	b9 d7 a2	lda $a2d7,y			lda 	DecimalScalarTable-5+3,y
.9ae2	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ae5	b9 d8 a2	lda $a2d8,y			lda 	DecimalScalarTable-5+4,y
.9ae8	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9aeb	a9 08		lda #$08			lda 	#NSTFloat
.9aed	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9af0	7a		ply				ply
.9af1	e8		inx				inx 								; multiply decimal const by decimal scalar
.9af2	20 32 98	jsr $9832			jsr 	FloatMultiply
.9af5	ca		dex				dex
.9af6	20 bf 96	jsr $96bf			jsr 	FloatAdd 					; add to integer part.
.9af9					_ENCFExit:
.9af9	18		clc				clc 								; reject the digit.
.9afa	60		rts				rts
.9afb					ESTAShiftDigitIntoMantissa:
.9afb	29 0f		and #$0f			and 	#15 						; save digit
.9afd	48		pha				pha
.9afe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9b01	48		pha				pha
.9b02	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b05	48		pha				pha
.9b06	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b09	48		pha				pha
.9b0a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b0d	48		pha				pha
.9b0e	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 2
.9b11	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 4
.9b14	18		clc				clc 								; pop mantissa and add
.9b15	68		pla				pla
.9b16	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b19	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1c	68		pla				pla
.9b1d	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9b20	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b23	68		pla				pla
.9b24	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9b27	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2a	68		pla				pla
.9b2b	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b2e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b31	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 10
.9b34	68		pla				pla 								; add digit
.9b35	18		clc				clc
.9b36	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b39	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b3c	90 0d		bcc $9b4b			bcc 	_ESTASDExit
.9b3e	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9b41	d0 08		bne $9b4b			bne 	_ESTASDExit
.9b43	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9b46	d0 03		bne $9b4b			bne 	_ESTASDExit
.9b48	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9b4b					_ESTASDExit:
.9b4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b4c					EvaluateTerm:
.9b4c	b1 30		lda ($30),y			lda 	(codePtr),y
.9b4e	30 18		bmi $9b68			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b50	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b52	b0 6f		bcs $9bc3			bcs 	_ETVariable
.9b54	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b56	90 6e		bcc $9bc6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b58	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b5a	b0 6a		bcs $9bc6			bcs 	_ETPuncUnary
.9b5c	20 2a 9a	jsr $9a2a			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b5f					_ETNumber:
.9b5f	c8		iny				iny 								; keep encoding until we have the numbers
.9b60	b1 30		lda ($30),y			lda 	(codePtr),y
.9b62	20 2d 9a	jsr $9a2d			jsr 	EncodeNumberContinue
.9b65	b0 f8		bcs $9b5f			bcs 	_ETNumber 					; go back if accepted.
.9b67	60		rts				rts
.9b68					_ETCheckUnary:
.9b68	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b6a	f0 41		beq $9bad			beq 	_ETString
.9b6c	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b6e	f0 12		beq $9b82			beq 	_ETHexConstant
.9b70	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b72	90 0b		bcc $9b7f			bcc 	_ETSyntaxError
.9b74	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.9b76	b0 07		bcs $9b7f			bcs 	_ETSyntaxError
.9b78	da		phx				phx 								; push X on the stack
.9b79	0a		asl a				asl 	a 							; put vector x 2 into X
.9b7a	aa		tax				tax
.9b7b	c8		iny				iny 								; consume unary function token
.9b7c	7c 58 8e	jmp ($8e58,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b7f					_ETSyntaxError:
.9b7f	4c 10 a3	jmp $a310			jmp 	SyntaxError
.9b82					_ETHexConstant:
.9b82	c8		iny				iny 								; skip #
.9b83	c8		iny				iny 								; skip count
.9b84	20 86 a1	jsr $a186			jsr 	NSMSetZero 					; clear result
.9b87					_ETHLoop:
.9b87	b1 30		lda ($30),y			lda 	(codePtr),y
.9b89	c8		iny				iny 								; and consume
.9b8a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b8c	f0 1e		beq $9bac			beq 	_ETHExit
.9b8e	48		pha				pha 								; save on stack.
.9b8f	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 2
.9b92	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 4
.9b95	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 8
.9b98	20 9b a1	jsr $a19b			jsr 	NSMShiftLeft 				; x 16
.9b9b	68		pla				pla 								; ASCII
.9b9c	c9 41		cmp #$41			cmp 	#'A'
.9b9e	90 02		bcc $9ba2			bcc 	_ETHNotChar
.9ba0	e9 07		sbc #$07			sbc 	#7
.9ba2					_ETHNotChar:
.9ba2	29 0f		and #$0f			and 	#15 						; digit now
.9ba4	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ba7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9baa	80 db		bra $9b87			bra 	_ETHLoop 					; go round.
.9bac					_ETHExit:
.9bac	60		rts				rts
.9bad					_ETString:
.9bad	c8		iny				iny 								; look at length
.9bae	b1 30		lda ($30),y			lda 	(codePtr),y
.9bb0	48		pha				pha
.9bb1	c8		iny				iny 								; first character
.9bb2	20 1d a6	jsr $a61d			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9bb5	68		pla				pla 								; restore count and save
.9bb6	85 36		sta $36				sta 	zTemp0
.9bb8	98		tya				tya 								; add length to Y to skip it.
.9bb9	18		clc				clc
.9bba	65 36		adc $36				adc 	zTemp0
.9bbc	a8		tay				tay
.9bbd	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9bbf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bc2	60		rts				rts
.9bc3					_ETVariable:
.9bc3	4c 1d 9c	jmp $9c1d			jmp 	VariableHandler
.9bc6					_ETPuncUnary:
.9bc6	c8		iny				iny 								; consume the unary character
.9bc7	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9bc9	f0 2d		beq $9bf8			beq 	_ETUnaryNegate
.9bcb	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9bcd	f0 39		beq $9c08			beq 	_ETDereference
.9bcf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9bd1	f0 43		beq $9c16			beq 	_ETParenthesis
.9bd3	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bd5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bd7	f0 06		beq $9bdf			beq 	_ETIndirection
.9bd9	e6 36		inc $36				inc 	zTemp0
.9bdb	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9bdd	d0 a0		bne $9b7f			bne 	_ETSyntaxError
.9bdf					_ETIndirection:
.9bdf	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9be1	1a		inc a				inc 	a
.9be2	48		pha				pha
.9be3	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm				; evaluate the term
.9be6	20 90 99	jsr $9990			jsr 	Dereference 				; dereference it.
.9be9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bec	d0 07		bne $9bf5			bne 	_ETTypeMismatch
.9bee	68		pla				pla 								; indirection 1-2
.9bef	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bf1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bf4	60		rts				rts
.9bf5					_ETTypeMismatch:
.9bf5	4c 1a a3	jmp $a31a			jmp 	TypeError
.9bf8					_ETUnaryNegate:
.9bf8	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm				; evaluate the term
.9bfb	20 90 99	jsr $9990			jsr 	Dereference 				; dereference it.
.9bfe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9c01	29 10		and #$10			and 	#NSTString
.9c03	d0 f0		bne $9bf5			bne 	_ETTypeMismatch
.9c05	4c 32 a1	jmp $a132			jmp 	NSMNegate  					; just toggles the sign bit.
.9c08					_ETDereference:
.9c08	20 4c 9b	jsr $9b4c			jsr 	EvaluateTerm				; evaluate the term
.9c0b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9c0e	29 20		and #$20			and 	#NSBIsReference
.9c10	f0 e3		beq $9bf5			beq 	_ETTypeMismatch
.9c12	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9c15	60		rts				rts
.9c16					_ETParenthesis:
.9c16	20 72 96	jsr $9672			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c19	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; check for )
.9c1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c1d					VariableHandler:
.9c1d	b1 30		lda ($30),y			lda 	(codePtr),y
.9c1f	18		clc				clc
.9c20	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c22	85 37		sta $37				sta 	zTemp0+1
.9c24	c8		iny				iny
.9c25	b1 30		lda ($30),y			lda 	(codePtr),y
.9c27	85 36		sta $36				sta 	zTemp0
.9c29	c8		iny				iny
.9c2a	18		clc				clc									; copy variable address+3 to mantissa
.9c2b	69 03		adc #$03			adc 	#3
.9c2d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c30	a5 37		lda $37				lda 	zTemp0+1
.9c32	69 00		adc #$00			adc 	#0
.9c34	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c37	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c3a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c3d	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c40	5a		phy				phy
.9c41	a0 02		ldy #$02			ldy 	#2 							; read type
.9c43	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c45	7a		ply				ply
.9c46	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c48	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c4a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c4d	29 04		and #$04			and 	#NSBIsArray
.9c4f	d0 01		bne $9c52			bne 	_VHArray
.9c51	60		rts				rts
.9c52					_VHArray:
.9c52	e8		inx				inx
.9c53	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c56	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c58	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c5b	b1 30		lda ($30),y			lda 	(codePtr),y
.9c5d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c5f	d0 06		bne $9c67			bne 	_VHNoSecondIndex
.9c61	c8		iny				iny 								; skip the comma
.9c62	e8		inx				inx
.9c63	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c66	ca		dex				dex
.9c67					_VHNoSecondIndex:
.9c67	ca		dex				dex 								; set X back.
.9c68	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; and check the right bracket.
.9c6b	5a		phy				phy 								; save position
.9c6c	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9c6e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c70	f0 6b		beq $9cdd			beq 	_VHBadIndex
.9c72	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c75	85 3e		sta $3e				sta 	zaTemp
.9c77	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c7a	85 3f		sta $3f				sta 	zaTemp+1
.9c7c	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c7e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c80	f0 02		beq $9c84			beq 	_VHHas2Mask
.9c82	a9 ff		lda #$ff			lda 	#$FF
.9c84					_VHHas2Mask:
.9c84	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c87	f0 54		beq $9cdd			beq 	_VHBadIndex
.9c89	0a		asl a				asl 	a 							; carry will be set if a second index
.9c8a	90 09		bcc $9c95			bcc 	_VHCheckFirstIndex
.9c8c	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c8e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c90	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c93	90 48		bcc $9cdd			bcc 	_VHBadIndex
.9c95					_VHCheckFirstIndex:
.9c95	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c97	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c99	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c9c	90 3f		bcc $9cdd			bcc 	_VHBadIndex
.9c9e	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9ca0	64 37		stz $37				stz 	zTemp0+1
.9ca2	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9ca5	30 0f		bmi $9cb6			bmi 	_VHNoMultiply
.9ca7	da		phx				phx
.9ca8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9cab	48		pha				pha
.9cac	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9cae	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cb0	1a		inc a				inc 	a 							; add 1 for zero base
.9cb1	fa		plx				plx
.9cb2	20 1b a1	jsr $a11b			jsr 	Multiply8x8 				; calculate -> Z0
.9cb5	fa		plx				plx
.9cb6					_VHNoMultiply:
.9cb6	18		clc				clc
.9cb7	a5 36		lda $36				lda 	zTemp0
.9cb9	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cbc	85 36		sta $36				sta 	zTemp0
.9cbe	a5 37		lda $37				lda 	zTemp0+1
.9cc0	69 00		adc #$00			adc 	#0
.9cc2	85 37		sta $37				sta 	zTemp0+1
.9cc4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cc7	20 f9 84	jsr $84f9			jsr 	ScaleByBaseType
.9cca	18		clc				clc
.9ccb	b2 3e		lda ($3e)			lda 	(zaTemp)
.9ccd	65 36		adc $36				adc 	zTemp0
.9ccf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cd2	a0 01		ldy #$01			ldy 	#1
.9cd4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cd6	65 37		adc $37				adc 	zTemp0+1
.9cd8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cdb	7a		ply				ply 								; restore position
.9cdc	60		rts				rts
.9cdd					_VHBadIndex:
.9cdd	a9 17		lda #$17		lda	#23
.9cdf	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9ce2					AbsUnary:
.9ce2	fa		plx				plx 								; restore stack pos
.9ce3	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; get a float or int
.9ce6	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9ce9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9cec	29 7f		and #$7f			and 	#$7F
.9cee	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cf1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cf2					AllocUnary:
.9cf2	fa		plx				plx 								; restore stack pos
.9cf3	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger		; get bytes required.
.9cf6	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9cf9	da		phx				phx 								; save X/Y
.9cfa	5a		phy				phy
.9cfb	8a		txa				txa 								; copy X into Y
.9cfc	a8		tay				tay
.9cfd	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9d00	aa		tax				tax
.9d01	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9d04	20 11 9d	jsr $9d11			jsr 	AllocateXABytes 			; allocate memory
.9d07	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9d0a	8a		txa				txa
.9d0b	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9d0e	7a		ply				ply
.9d0f	fa		plx				plx
.9d10	60		rts				rts
.9d11					AllocateXABytes:
.9d11	5a		phy				phy
.9d12	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9d15	84 36		sty $36				sty 	zTemp0
.9d17	5a		phy				phy
.9d18	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9d1b	84 37		sty $37				sty 	zTemp0+1
.9d1d	5a		phy				phy
.9d1e	18		clc				clc 								; add to low memory pointer
.9d1f	6d 8c 04	adc $048c			adc 	lowMemPtr
.9d22	8d 8c 04	sta $048c			sta 	lowMemPtr
.9d25	8a		txa				txa
.9d26	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9d29	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9d2c	b0 2f		bcs $9d5d			bcs 	CISSMemory
.9d2e	20 4f 9d	jsr $9d4f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d31					_ClearMemory:
.9d31	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9d34	c5 36		cmp $36				cmp 	zTemp0
.9d36	d0 07		bne $9d3f			bne 	_CMClearNext
.9d38	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9d3b	c5 37		cmp $37				cmp 	zTemp0+1
.9d3d	f0 0c		beq $9d4b			beq 	_CMExit
.9d3f					_CMClearNext:
.9d3f	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d41	92 36		sta ($36)			sta 	(zTemp0)
.9d43	e6 36		inc $36				inc 	zTemp0
.9d45	d0 ea		bne $9d31			bne 	_ClearMemory
.9d47	e6 37		inc $37				inc		zTemp0+1
.9d49	80 e6		bra $9d31			bra 	_ClearMemory
.9d4b					_CMExit:
.9d4b	fa		plx				plx
.9d4c	68		pla				pla
.9d4d	7a		ply				ply
.9d4e	60		rts				rts
.9d4f					CheckIdentifierStringSpace:
.9d4f	48		pha				pha
.9d50	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9d53	18		clc				clc
.9d54	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d56	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9d59	b0 02		bcs $9d5d			bcs 	CISSMemory
.9d5b	68		pla				pla
.9d5c	60		rts				rts
.9d5d					CISSMemory:
.9d5d	a9 06		lda #$06		lda	#6
.9d5f	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d62					AscUnary:
.9d62	fa		plx				plx 								; restore stack pos
.9d63	20 ba a0	jsr $a0ba			jsr 	EvaluateString 				; get a string
.9d66	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9d68	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9d6b	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9d6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d6f					FracUnary:
.9d6f	fa		plx				plx 								; restore stack pos
.9d70	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; get a float or int
.9d73	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9d76	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d79	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d7b	f0 04		beq $9d81			beq 	_IUZero
.9d7d	20 a5 97	jsr $97a5			jsr 	FloatFractionalPart
.9d80	60		rts				rts
.9d81					_IUZero:
.9d81	20 86 a1	jsr $a186			jsr 	NSMSetZero
.9d84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d85					IntUnary:
.9d85	fa		plx				plx 								; restore stack pos
.9d86	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; get a float or int
.9d89	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9d8c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d8f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d91	f0 03		beq $9d96			beq 	_IUExit
.9d93	20 08 98	jsr $9808			jsr 	FloatIntegerPart
.9d96					_IUExit:
.9d96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d97					LenUnary:
.9d97	fa		plx				plx 								; restore stack pos
.9d98	20 ba a0	jsr $a0ba			jsr 	EvaluateString 				; get a string
.9d9b	5a		phy				phy
.9d9c	a0 00		ldy #$00			ldy 	#0 							; find length
.9d9e					_LenFind:
.9d9e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9da0	f0 06		beq $9da8			beq 	_LenExit
.9da2	c8		iny				iny
.9da3	d0 f9		bne $9d9e			bne 	_LenFind
.9da5	4c 15 a3	jmp $a315			jmp 	RangeError 					; string > 255
.9da8					_LenExit:
.9da8	98		tya				tya
.9da9	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9dac	7a		ply				ply
.9dad	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9db0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9db1					Unary_Min:
.9db1	a9 01		lda #$01			lda 	#1
.9db3	80 02		bra $9db7			bra 	UnaryMinMaxMain
.9db5					Unary_Max:
.9db5	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9db7					UnaryMinMaxMain:
.9db7	fa		plx				plx 								; get index on number stack
.9db8	48		pha				pha 								; save comparator
.9db9	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; get the first value.
.9dbc					_UMMMLoop:
.9dbc	b1 30		lda ($30),y			lda 	(codePtr),y
.9dbe	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9dc0	f0 22		beq $9de4			beq 	_UMMMDone
.9dc2	20 b2 90	jsr $90b2			jsr 	CheckComma 					; must be a comma
.9dc5	e8		inx				inx
.9dc6	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue
.9dc9	ca		dex				dex
.9dca	20 5d a1	jsr $a15d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9dcd	e8		inx				inx
.9dce	20 5d a1	jsr $a15d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9dd1	e8		inx				inx
.9dd2	20 7b 91	jsr $917b			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9dd5	ca		dex				dex
.9dd6	ca		dex				dex
.9dd7	85 36		sta $36				sta 	zTemp0 						; save required result
.9dd9	68		pla				pla 								; get and save comparator
.9dda	48		pha				pha
.9ddb	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9ddd	d0 dd		bne $9dbc			bne 	_UMMMLoop
.9ddf	20 e7 9d	jsr $9de7			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9de2	80 d8		bra $9dbc			bra 	_UMMMLoop
.9de4					_UMMMDone:
.9de4	68		pla				pla 								; throw the comparator
.9de5	c8		iny				iny 								; skip )
.9de6	60		rts				rts
.9de7					ExpCopyAboveDown:
.9de7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9dea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ded	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9df0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9df3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9df6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9df9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dfc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dff	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e02	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e05	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9e08	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9e0c					Unary_Not:
.9e0c	fa		plx				plx
.9e0d	20 d2 a0	jsr $a0d2			jsr 	EvaluateInteger 			; get integer
.9e10	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9e13	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; zero mantissa ?
.9e16	f0 04		beq $9e1c			beq 	_NotZero
.9e18	20 86 a1	jsr $a186			jsr 	NSMSetZero
.9e1b	60		rts				rts
.9e1c					_NotZero:
.9e1c	4c 30 91	jmp $9130			jmp 	ReturnTrue
.9e1f					_UNBad:
.9e1f	4c 1f a3	jmp $a31f			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9e22					Unary_Random:
.9e22	fa		plx				plx
.9e23	20 a1 9e	jsr $9ea1			jsr 	Random32Bit 				; get a random number
.9e26	20 86 9e	jsr $9e86			jsr 	URCopyToMantissa  			; put in mantissa
.9e29	b1 30		lda ($30),y			lda 	(codePtr),y
.9e2b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9e2d	f0 08		beq $9e37			beq 	_URNoModulus
.9e2f	e8		inx				inx
.9e30	20 e7 a0	jsr $a0e7			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9e33	ca		dex				dex
.9e34	20 9f 92	jsr $929f			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9e37					_URNoModulus:
.9e37	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9e3a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9e3d	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9e40	60		rts				rts
.9e41					Unary_Rnd:
.9e41	fa		plx				plx
.9e42	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; number to use.
.9e45	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; closing bracket
.9e48	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e4b	f0 2b		beq $9e78			beq 	_URCopySeed
.9e4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e50	10 23		bpl $9e75			bpl 	_URDontSeed
.9e52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e55	49 17		eor #$17			eor 	#$17
.9e57	8d 88 04	sta $0488			sta 	RandomSeed+0
.9e5a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e5d	49 a5		eor #$a5			eor 	#$A5
.9e5f	8d 89 04	sta $0489			sta 	RandomSeed+1
.9e62	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e65	49 c2		eor #$c2			eor 	#$C2
.9e67	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9e6a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e6d	49 9d		eor #$9d			eor 	#$9D
.9e6f	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9e72	20 a1 9e	jsr $9ea1			jsr 	Random32Bit
.9e75					_URDontSeed:
.9e75	20 a1 9e	jsr $9ea1			jsr 	Random32Bit 				; generate a number.
.9e78					_URCopySeed:
.9e78	20 86 9e	jsr $9e86			jsr 	URCopyToMantissa 			; copy into mantissa
.9e7b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9e7d	8d 28 04	sta $0428			sta 	NSExponent
.9e80	a9 08		lda #$08			lda 	#NSTFloat
.9e82	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9e85	60		rts				rts
.9e86					URCopyToMantissa:
.9e86	ad 88 04	lda $0488			lda 	RandomSeed+0
.9e89	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e8c	ad 89 04	lda $0489			lda 	RandomSeed+1
.9e8f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e92	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9e95	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e98	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9e9b	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9e9d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ea0	60		rts				rts
.9ea1					Random32Bit:
.9ea1	5a		phy				phy
.9ea2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ea4	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9ea7	d0 03		bne $9eac			bne 	_Random1
.9ea9	a8		tay				tay 								; if so do it 256 times
.9eaa	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9eac					_Random1:
.9eac	0a		asl a				asl 	a 							; LSFR RNG
.9ead	2e 89 04	rol $0489			rol 	RandomSeed+1
.9eb0	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9eb3	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9eb6	90 02		bcc $9eba			bcc 	_Random2
.9eb8	49 c5		eor #$c5			eor 	#$C5
.9eba					_Random2:
.9eba	88		dey				dey
.9ebb	d0 ef		bne $9eac			bne 	_Random1
.9ebd	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ec0	7a		ply				ply
.9ec1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9ec2					SgnUnary:
.9ec2	fa		plx				plx 								; restore stack pos
.9ec3	20 af a0	jsr $a0af			jsr 	EvaluateNumber 				; get a float or int
.9ec6	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9ec9	20 b6 a1	jsr $a1b6			jsr 	NSMIsZero 					; if zero
.9ecc	f0 10		beq $9ede			beq 	_SGZero  					; return Int Zero
.9ece	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9ed1	48		pha				pha
.9ed2	a9 01		lda #$01			lda 	#1 							; set to 1
.9ed4	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9ed7	68		pla				pla
.9ed8	29 80		and #$80			and		#$80 						; copy the sign byte out
.9eda	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9edd	60		rts				rts
.9ede	20 86 a1	jsr $a186	_SGZero:jsr 	NSMSetZero
.9ee1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9ee2					ValUnary:
.9ee2	fa		plx				plx 								; restore stack pos
.9ee3	20 f8 9e	jsr $9ef8			jsr 	ValMainCode 				; do the main val() code
.9ee6	b0 01		bcs $9ee9			bcs 	_VUError 					; couldn't convert
.9ee8	60		rts				rts
.9ee9					_VUError:
.9ee9	4c 1a a3	jmp $a31a			jmp 	TypeError
.9eec					IsValUnary:
.9eec	fa		plx				plx 								; restore stack pos
.9eed	20 f8 9e	jsr $9ef8			jsr 	ValMainCode 				; do the main val() code
.9ef0	b0 03		bcs $9ef5			bcs 	_VUBad
.9ef2	4c 30 91	jmp $9130			jmp 	ReturnTrue
.9ef5					_VUBad:
.9ef5	4c 3c 91	jmp $913c			jmp 	ReturnFalse
.9ef8					ValMainCode:
.9ef8	20 ba a0	jsr $a0ba			jsr 	EvaluateString 				; get a string
.9efb	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; check right bracket present
.9efe	5a		phy				phy
.9eff	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9f01	f0 17		beq $9f1a			beq 	_VMCFail2
.9f03	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9f05	48		pha				pha 								; save first character
.9f06	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9f08	d0 01		bne $9f0b			bne 	_VMCStart
.9f0a	c8		iny				iny 								; skip over -
.9f0b					_VMCStart:
.9f0b	38		sec				sec 								; initialise first time round.
.9f0c					_VMCNext:
.9f0c	c8		iny				iny 								; pre-increment
.9f0d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9f0f	f0 0c		beq $9f1d			beq 	_VMCSuccess 				; successful.
.9f11	20 2e 9a	jsr $9a2e			jsr 	EncodeNumber 				; send it to the number-builder
.9f14	90 03		bcc $9f19			bcc 	_VMCFail 					; if failed, give up.
.9f16	18		clc				clc 								; next time round, countinue
.9f17	80 f3		bra $9f0c			bra 	_VMCNext
.9f19					_VMCFail:
.9f19	68		pla				pla
.9f1a					_VMCFail2:
.9f1a	7a		ply				ply
.9f1b	38		sec				sec
.9f1c	60		rts				rts
.9f1d					_VMCSuccess:
.9f1d	a9 00		lda #$00			lda 	#0 							; construct final
.9f1f	20 2e 9a	jsr $9a2e			jsr 	EncodeNumber
.9f22	68		pla				pla
.9f23	c9 2d		cmp #$2d			cmp 	#"-"
.9f25	d0 03		bne $9f2a			bne 	_VMCNotNegative
.9f27	20 32 a1	jsr $a132			jsr		NSMNegate
.9f2a					_VMCNotNegative:
.9f2a	7a		ply				ply
.9f2b	18		clc				clc
.9f2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9f2d					ChrUnary:
.9f2d	fa		plx				plx 								; restore stack pos
.9f2e	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger			; get value
.9f31	48		pha				pha
.9f32	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9f35	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9f37	20 7a a7	jsr $a77a			jsr 	StringTempAllocate
.9f3a	68		pla				pla 								; write number to it
.9f3b	20 b8 a7	jsr $a7b8			jsr 	StringTempWrite
.9f3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9f3f					SpcUnary:
.9f3f	fa		plx				plx 								; restore stack pos
.9f40	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger			; get value
.9f43	5a		phy				phy
.9f44	48		pha				pha 								; save count
.9f45	20 7a a7	jsr $a77a			jsr 	StringTempAllocate
.9f48	7a		ply				ply 								; to do count in Y
.9f49					_SpcLoop:
.9f49	c0 00		cpy #$00			cpy 	#0
.9f4b	f0 08		beq $9f55			beq 	_SpcExit
.9f4d	a9 20		lda #$20			lda 	#32
.9f4f	20 b8 a7	jsr $a7b8			jsr 	StringTempWrite
.9f52	88		dey				dey
.9f53	80 f4		bra $9f49			bra 	_SPCLoop
.9f55					_SpcExit:
.9f55	7a		ply				ply
.9f56	20 aa 90	jsr $90aa			jsr 	CheckRightBracket
.9f59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f5a					Unary_Str:
.9f5a	fa		plx				plx
.9f5b	20 af a0	jsr $a0af			jsr 	EvaluateNumber  			; get number
.9f5e	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; closing bracket
.9f61	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f63	20 7c 9f	jsr $9f7c			jsr 	ConvertNumberToString 		; do the conversion.
.9f66	a9 21		lda #$21			lda		#33 						; create buffer
.9f68	20 7a a7	jsr $a77a			jsr 	StringTempAllocate 			; allocate memory
.9f6b	da		phx				phx
.9f6c	a2 00		ldx #$00			ldx 	#0
.9f6e					_USCopy:
.9f6e	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9f71	20 b8 a7	jsr $a7b8			jsr 	StringTempWrite
.9f74	e8		inx				inx
.9f75	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9f78	d0 f4		bne $9f6e			bne 	_USCopy
.9f7a	fa		plx				plx
.9f7b	60		rts				rts
.9f7c					ConvertNumberToString:
.9f7c	5a		phy				phy 								; save code position
.9f7d	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9f80	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9f83	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9f86	10 0a		bpl $9f92			bpl 	_CNTSNotNegative
.9f88	29 7f		and #$7f			and 	#$7F 						; make +ve
.9f8a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f8d	a9 2d		lda #$2d			lda 	#"-"
.9f8f	20 f8 9f	jsr $9ff8			jsr 	WriteDecimalBuffer
.9f92					_CNTSNotNegative:
.9f92	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9f95	f0 15		beq $9fac			beq 	_CNTSNotFloat
.9f97	e8		inx				inx 								; round up
.9f98	a9 01		lda #$01			lda 	#1
.9f9a	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9f9d	ca		dex				dex
.9f9e	bd 28 04	lda $0428,x			lda		NSExponent,x
.9fa1	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9fa4	a9 08		lda #$08			lda 	#NSTFloat
.9fa6	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9fa9	20 bf 96	jsr $96bf			jsr 	FloatAdd
.9fac					_CNTSNotFloat:
.9fac	20 da 9f	jsr $9fda			jsr 	MakePlusTwoString
.9faf	20 a5 97	jsr $97a5			jsr 	FloatFractionalPart 		; get the fractional part
.9fb2	20 69 98	jsr $9869			jsr 	NSNormalise					; normalise , exit if zero
.9fb5	f0 21		beq $9fd8			beq 	_CNTSExit
.9fb7	a9 2e		lda #$2e			lda 	#"."
.9fb9	20 f8 9f	jsr $9ff8			jsr 	WriteDecimalBuffer 			; write decimal place
.9fbc					_CNTSDecimal:
.9fbc	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9fbf	30 17		bmi $9fd8			bmi 	_CNTSExit
.9fc1	e8		inx				inx 								; x 10.0
.9fc2	a9 0a		lda #$0a			lda 	#10
.9fc4	20 88 a1	jsr $a188			jsr 	NSMSetByte
.9fc7	a9 08		lda #$08			lda 	#NSTFloat
.9fc9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fcc	ca		dex				dex
.9fcd	20 32 98	jsr $9832			jsr 	FloatMultiply
.9fd0	20 da 9f	jsr $9fda			jsr 	MakePlusTwoString
.9fd3	20 a5 97	jsr $97a5			jsr 	FloatFractionalPart 		; get the fractional part
.9fd6	80 e4		bra $9fbc			bra 	_CNTSDecimal 				; keep going.
.9fd8					_CNTSExit:
.9fd8	7a		ply				ply
.9fd9	60		rts				rts
.9fda					MakePlusTwoString:
.9fda	da		phx				phx
.9fdb	20 5d a1	jsr $a15d			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9fde	e8		inx				inx 								; access it
.9fdf	e8		inx				inx
.9fe0	20 08 98	jsr $9808			jsr 	FloatIntegerPart 			; make it an integer
.9fe3	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9fe5	20 ea 95	jsr $95ea			jsr 	ConvertInt32
.9fe8	a2 00		ldx #$00			ldx	 	#0
.9fea					_MPTSCopy:
.9fea	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9fed	20 f8 9f	jsr $9ff8			jsr 	WriteDecimalBuffer
.9ff0	e8		inx				inx
.9ff1	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9ff4	d0 f4		bne $9fea			bne 	_MPTSCopy
.9ff6	fa		plx				plx
.9ff7	60		rts				rts
.9ff8					WriteDecimalBuffer:
.9ff8	da		phx				phx
.9ff9	ae 95 04	ldx $0495			ldx 	dbOffset
.9ffc	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.9fff	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a002	ee 95 04	inc $0495			inc 	dbOffset
.a005	fa		plx				plx
.a006	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a007					Unary_Left:
.a007	fa		plx				plx
.a008	18		clc				clc 								; only one parameter
.a009	20 7e a0	jsr $a07e			jsr 	SubstringInitial 			; set up.
.a00c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a00f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a012	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a015	80 2c		bra $a043			bra 	SubstringMain
.a017					Unary_Right:
.a017	fa		plx				plx
.a018	18		clc				clc 								; only one parameter
.a019	20 7e a0	jsr $a07e			jsr 	SubstringInitial 			; set up.
.a01c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a01f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a022	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a025	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a028	b0 02		bcs $a02c			bcs 	_URNotUnderflow
.a02a	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a02c					_URNotUnderFlow:
.a02c	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a02f	80 12		bra $a043			bra 	SubStringMain
.a031					Unary_Mid:
.a031	fa		plx				plx
.a032	38		sec				sec 								; two parameters
.a033	20 7e a0	jsr $a07e			jsr 	SubstringInitial 			; set up.
.a036	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a039	f0 05		beq $a040			beq 	_UMError
.a03b	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a03e	80 03		bra $a043			bra 	SubStringMain
.a040					_UMError:
.a040	4c 1f a3	jmp $a31f			jmp 	ArgumentError
.a043					SubStringMain:
.a043	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a046	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a049	b0 2d		bcs $a078			bcs 	_SSMNull 					; if so, return an empty string.
.a04b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a04e	f0 28		beq $a078			beq 	_SSMNull 					; return empty string.
.a050	18		clc				clc 								; add the offset +1 to the address and
.a051	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a054	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a057	85 36		sta $36				sta 	zTemp0
.a059	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a05c	69 00		adc #$00			adc 	#0
.a05e	85 37		sta $37				sta 	zTemp0+1
.a060					_SSMNoCarry:
.a060	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a063	20 7a a7	jsr $a77a			jsr 	StringTempAllocate 			; allocate that many characters
.a066	5a		phy				phy 								; save Y
.a067	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a069					_SSMCopy:
.a069	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a06b	f0 09		beq $a076			beq 	_SSMEString 				; no more to copy
.a06d	20 b8 a7	jsr $a7b8			jsr 	StringTempWrite 			; and write it out.
.a070	c8		iny				iny
.a071	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a074	d0 f3		bne $a069			bne 	_SSMCopy
.a076					_SSMEString:
.a076	7a		ply				ply
.a077					_SSMExit:
.a077	60		rts				rts
.a078					_SSMNull:
.a078	a9 00		lda #$00			lda 	#0
.a07a	20 7a a7	jsr $a77a			jsr 	StringTempAllocate
.a07d	60		rts				rts
.a07e					SubstringInitial:
.a07e	da		phx				phx 								; save initial stack position
.a07f	08		php				php 								; save carry on stack indicating 2 parameters
.a080	20 ba a0	jsr $a0ba			jsr 	EvaluateString 				; get a string
.a083	5a		phy				phy 								; calculate length to exponent.
.a084	a0 ff		ldy #$ff			ldy 	#$FF
.a086					_SIFindLength:
.a086	c8		iny				iny
.a087	b1 36		lda ($36),y			lda 	(zTemp0),y
.a089	d0 fb		bne $a086			bne 	_SIFindLength
.a08b	98		tya				tya
.a08c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a08f	7a		ply				ply
.a090	e8		inx				inx
.a091	20 b2 90	jsr $90b2			jsr 	CheckComma 					; comma next
.a094	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get next parameter
.a097	28		plp				plp 								; is it the last parameter ?
.a098	90 07		bcc $a0a1			bcc 	_SSIExit 					; if so, exit.
.a09a	e8		inx				inx
.a09b	20 b2 90	jsr $90b2			jsr 	CheckComma 					; comma next
.a09e	20 07 a1	jsr $a107			jsr 	Evaluate8BitInteger 		; get last parameter
.a0a1					_SSIExit:
.a0a1	fa		plx				plx
.a0a2	20 aa 90	jsr $90aa			jsr 	CheckRightBracket 			; check closing bracket
.a0a5	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a0a6					EvaluateValue:
.a0a6	48		pha				pha
.a0a7	20 72 96	jsr $9672			jsr		EvaluateExpression 			; expression
.a0aa	20 90 99	jsr $9990			jsr 	Dereference					; derefernce it
.a0ad	68		pla				pla
.a0ae	60		rts				rts
.a0af					EvaluateNumber:
.a0af	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; get a value
.a0b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a0b5	29 10		and #$10			and 	#NSBIsString
.a0b7	d0 16		bne $a0cf			bne 	HelperTypeError
.a0b9	60		rts				rts
.a0ba					EvaluateString:
.a0ba	20 a6 a0	jsr $a0a6			jsr 	EvaluateValue 				; get a value
.a0bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a0c0	29 10		and #$10			and 	#NSBIsString
.a0c2	f0 0b		beq $a0cf			beq 	HelperTypeError
.a0c4					CopyAddressToTemp0:
.a0c4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a0c7	85 36		sta $36				sta 	zTemp0
.a0c9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0cc	85 37		sta $37				sta 	zTemp0+1
.a0ce	60		rts				rts
.a0cf					HelperTypeError:
.a0cf	4c 1a a3	jmp $a31a			jmp 	TypeError
.a0d2					EvaluateInteger:
.a0d2	20 af a0	jsr $a0af			jsr 	EvaluateNumber
.a0d5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a0d8	d0 0a		bne $a0e4			bne 	HelperValueError 			; if not, it's a float.
.a0da	60		rts				rts
.a0db					EvaluateUnsignedInteger:
.a0db	20 d2 a0	jsr $a0d2			jsr 	EvaluateInteger 			; check integer is +ve
.a0de	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a0e1	30 01		bmi $a0e4			bmi 	HelperValueError
.a0e3	60		rts				rts
.a0e4					HelperValueError:
.a0e4	4c 1f a3	jmp $a31f			jmp 	ArgumentError
.a0e7					Evaluate16BitInteger:
.a0e7	20 db a0	jsr $a0db			jsr	 	EvaluateUnsignedInteger		; get integer
.a0ea	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0ed	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0f0	d0 f2		bne $a0e4			bne 	HelperValueError
.a0f2	60		rts				rts
.a0f3					Evaluate16BitIntegerSigned:
.a0f3	20 d2 a0	jsr $a0d2			jsr	 	EvaluateInteger				; get integer
.a0f6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0f9	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0fc	d0 e6		bne $a0e4			bne 	HelperValueError
.a0fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a101	10 03		bpl $a106			bpl 	_EISNotSigned
.a103	20 3b a1	jsr $a13b			jsr 	NSMNegateMantissa
.a106					_EISNotSigned:
.a106	60		rts				rts
.a107					Evaluate8BitInteger:
.a107	20 db a0	jsr $a0db			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a10a	d0 d8		bne $a0e4			bne 	HelperValueError
.a10c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a10f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a112	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a115	d0 cd		bne $a0e4			bne 	HelperValueError
.a117	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a11a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a11b					Multiply8x8:
.a11b	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a11c	85 36		sta $36			  	sta 	zTemp0
.a11e	86 37		stx $37				stx 	zTemp0+1
.a120	a9 00		lda #$00			lda 	#0
.a122	a2 08		ldx #$08			ldx 	#8
.a124					_M88Loop:
.a124	90 03		bcc $a129			bcc 	_M88NoAdd
.a126	18		clc				clc
.a127	65 37		adc $37				adc 	zTemp0+1
.a129					_M88NoAdd:
.a129	6a		ror a				ror 	a
.a12a	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a12c	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a12d	d0 f5		bne $a124			bne 	_M88Loop
.a12f	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a131	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a132					NSMNegate:
.a132	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a135	49 80		eor #$80			eor 	#NSBIsNegative
.a137	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a13a	60		rts				rts
.a13b					NSMNegateMantissa:
.a13b	38		sec				sec
.a13c	a9 00		lda #$00			lda 	#0
.a13e	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a141	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a144	a9 00		lda #$00			lda 	#0
.a146	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a149	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a14c	a9 00		lda #$00			lda 	#0
.a14e	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a151	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a154	a9 00		lda #$00			lda 	#0
.a156	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a159	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a15c	60		rts				rts
.a15d					NSMShiftUpTwo:
.a15d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a160	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a163	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a166	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a169	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a16c	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a16f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a172	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a175	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a178	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a17b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a17e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a181	60		rts				rts
.a182					NSMSetZeroMantissaOnly:
.a182	a9 00		lda #$00			lda 	#0
.a184	80 08		bra $a18e			bra 	NSMSetMantissa
.a186					NSMSetZero:
.a186	a9 00		lda #$00			lda 	#0
.a188					NSMSetByte:
.a188	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a18b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a18e					NSMSetMantissa:
.a18e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a191	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a194	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a197	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a19a	60		rts				rts
.a19b					NSMShiftLeft:
.a19b	18		clc				clc
.a19c					NSMRotateLeft:
.a19c	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a19f	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a1a2	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a1a5	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a1a8	60		rts				rts
.a1a9					NSMShiftRight:
.a1a9	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a1ac	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a1af	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a1b2	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a1b5	60		rts				rts
.a1b6					NSMIsZero:
.a1b6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a1b9	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a1bc	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a1bf	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a1c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a1c3					Assemble_ora:
.a1c3	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1c6	01					.byte $01
.a1c7					Assemble_and:
.a1c7	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1ca	21					.byte $21
.a1cb					Assemble_eor:
.a1cb	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1ce	41					.byte $41
.a1cf					Assemble_adc:
.a1cf	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1d2	61					.byte $61
.a1d3					Assemble_sta:
.a1d3	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1d6	81					.byte $81
.a1d7					Assemble_lda:
.a1d7	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1da	a1					.byte $a1
.a1db					Assemble_cmp:
.a1db	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1de	c1					.byte $c1
.a1df					Assemble_sbc:
.a1df	20 85 80	jsr $8085		jsr	AssembleGroup1
>a1e2	e1					.byte $e1
.a1e3					Assemble_asl:
.a1e3	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1e6	02					.byte $02
>a1e7	75					.byte $75
.a1e8					Assemble_rol:
.a1e8	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1eb	22					.byte $22
>a1ec	75					.byte $75
.a1ed					Assemble_lsr:
.a1ed	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1f0	42					.byte $42
>a1f1	75					.byte $75
.a1f2					Assemble_ror:
.a1f2	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1f5	62					.byte $62
>a1f6	75					.byte $75
.a1f7					Assemble_stx:
.a1f7	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1fa	82					.byte $82
>a1fb	50					.byte $50
.a1fc					Assemble_ldx:
.a1fc	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a1ff	a2					.byte $a2
>a200	d0					.byte $d0
.a201					Assemble_dec:
.a201	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a204	c2					.byte $c2
>a205	55					.byte $55
.a206					Assemble_inc:
.a206	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a209	e2					.byte $e2
>a20a	55					.byte $55
.a20b					Assemble_stz:
.a20b	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a20e	60					.byte $60
>a20f	44					.byte $44
.a210					Assemble_bit:
.a210	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a213	20					.byte $20
>a214	55					.byte $55
.a215					Assemble_sty:
.a215	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a218	80					.byte $80
>a219	54					.byte $54
.a21a					Assemble_ldy:
.a21a	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a21d	a0					.byte $a0
>a21e	d5					.byte $d5
.a21f					Assemble_cpy:
.a21f	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a222	c0					.byte $c0
>a223	d4					.byte $d4
.a224					Assemble_cpx:
.a224	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a227	e0					.byte $e0
>a228	d0					.byte $d0
.a229					Assemble_tsb:
.a229	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a22c	00					.byte $00
>a22d	50					.byte $50
.a22e					Assemble_trb:
.a22e	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a231	10					.byte $10
>a232	50					.byte $50
.a233					Assemble_jsr:
.a233	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a236	14					.byte $14
>a237	10					.byte $10
.a238					Assemble_jmp:
.a238	20 8c 80	jsr $808c		jsr	AssembleGroup2
>a23b	40					.byte $40
>a23c	10					.byte $10
.a23d					Assemble_bpl:
.a23d	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a240	10					.byte $10
.a241					Assemble_bmi:
.a241	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a244	30					.byte $30
.a245					Assemble_bvc:
.a245	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a248	50					.byte $50
.a249					Assemble_bvs:
.a249	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a24c	70					.byte $70
.a24d					Assemble_bcc:
.a24d	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a250	90					.byte $90
.a251					Assemble_bcs:
.a251	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a254	b0					.byte $b0
.a255					Assemble_bne:
.a255	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a258	d0					.byte $d0
.a259					Assemble_beq:
.a259	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a25c	f0					.byte $f0
.a25d					Assemble_bra:
.a25d	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>a260	80					.byte $80
.a261					Assemble_brk:
.a261	20 13 81	jsr $8113		jsr	AssembleGroup4
>a264	00					.byte $00
.a265					Assemble_php:
.a265	20 13 81	jsr $8113		jsr	AssembleGroup4
>a268	08					.byte $08
.a269					Assemble_clc:
.a269	20 13 81	jsr $8113		jsr	AssembleGroup4
>a26c	18					.byte $18
.a26d					Assemble_plp:
.a26d	20 13 81	jsr $8113		jsr	AssembleGroup4
>a270	28					.byte $28
.a271					Assemble_sec:
.a271	20 13 81	jsr $8113		jsr	AssembleGroup4
>a274	38					.byte $38
.a275					Assemble_rti:
.a275	20 13 81	jsr $8113		jsr	AssembleGroup4
>a278	40					.byte $40
.a279					Assemble_pha:
.a279	20 13 81	jsr $8113		jsr	AssembleGroup4
>a27c	48					.byte $48
.a27d					Assemble_cli:
.a27d	20 13 81	jsr $8113		jsr	AssembleGroup4
>a280	58					.byte $58
.a281					Assemble_phy:
.a281	20 13 81	jsr $8113		jsr	AssembleGroup4
>a284	5a					.byte $5a
.a285					Assemble_rts:
.a285	20 13 81	jsr $8113		jsr	AssembleGroup4
>a288	60					.byte $60
.a289					Assemble_pla:
.a289	20 13 81	jsr $8113		jsr	AssembleGroup4
>a28c	68					.byte $68
.a28d					Assemble_sei:
.a28d	20 13 81	jsr $8113		jsr	AssembleGroup4
>a290	78					.byte $78
.a291					Assemble_ply:
.a291	20 13 81	jsr $8113		jsr	AssembleGroup4
>a294	7a					.byte $7a
.a295					Assemble_dey:
.a295	20 13 81	jsr $8113		jsr	AssembleGroup4
>a298	88					.byte $88
.a299					Assemble_txa:
.a299	20 13 81	jsr $8113		jsr	AssembleGroup4
>a29c	8a					.byte $8a
.a29d					Assemble_tya:
.a29d	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2a0	98					.byte $98
.a2a1					Assemble_txs:
.a2a1	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2a4	9a					.byte $9a
.a2a5					Assemble_tay:
.a2a5	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2a8	a8					.byte $a8
.a2a9					Assemble_tax:
.a2a9	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2ac	aa					.byte $aa
.a2ad					Assemble_clv:
.a2ad	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2b0	b8					.byte $b8
.a2b1					Assemble_tsx:
.a2b1	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2b4	ba					.byte $ba
.a2b5					Assemble_iny:
.a2b5	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2b8	c8					.byte $c8
.a2b9					Assemble_dex:
.a2b9	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2bc	ca					.byte $ca
.a2bd					Assemble_cld:
.a2bd	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2c0	d8					.byte $d8
.a2c1					Assemble_phx:
.a2c1	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2c4	da					.byte $da
.a2c5					Assemble_stp:
.a2c5	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2c8	db					.byte $db
.a2c9					Assemble_inx:
.a2c9	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2cc	e8					.byte $e8
.a2cd					Assemble_nop:
.a2cd	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2d0	ea					.byte $ea
.a2d1					Assemble_sed:
.a2d1	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2d4	f8					.byte $f8
.a2d5					Assemble_plx:
.a2d5	20 13 81	jsr $8113		jsr	AssembleGroup4
>a2d8	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a2d9					DecimalScalarTable:
>a2d9	66 66 66 66				.dword $66666666 ; 0.1
>a2dd	de					.byte $de
>a2de	1f 85 eb 51				.dword $51eb851f ; 0.01
>a2e2	db					.byte $db
>a2e3	4c 37 89 41				.dword $4189374c ; 0.001
>a2e7	d8					.byte $d8
>a2e8	ac 8b db 68				.dword $68db8bac ; 0.0001
>a2ec	d4					.byte $d4
>a2ed	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a2f1	d1					.byte $d1
>a2f2	83 de 1b 43				.dword $431bde83 ; 1e-06
>a2f6	ce					.byte $ce
>a2f7	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a2fb	ca					.byte $ca
>a2fc	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a300	c7					.byte $c7
>a301	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a305	c4					.byte $c4
>a306	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a30a	c0					.byte $c0
>a30b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a30f	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a310					SyntaxError:
.a310	a9 02		lda #$02		lda	#2
.a312	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a315					RangeError:
.a315	a9 04		lda #$04		lda	#4
.a317	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a31a					TypeError:
.a31a	a9 05		lda #$05		lda	#5
.a31c	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a31f					ArgumentError:
.a31f	a9 07		lda #$07		lda	#7
.a321	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a324					NotDoneError:
.a324	a9 0c		lda #$0c		lda	#12
.a326	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a329					ErrorText:
>a329	42 72 65 61 6b 00			.text	"Break",0
>a32f	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a337	72 72 6f 72 00
>a33c	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a344	20 62 79 20 7a 65 72 6f 00
>a34d	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a355	61 6e 67 65 00
>a35a	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a362	6d 61 74 63 68 00
>a368	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a370	65 6d 6f 72 79 00
>a376	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a37e	61 72 67 75 6d 65 6e 74 00
>a387	53 74 6f 70 00				.text	"Stop",0
>a38c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a394	6f 6f 20 6c 6f 6e 67 00
>a39c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a3a4	6e 20 66 61 69 6c 65 64 00
>a3ad	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a3b5	61 74 61 00
>a3b9	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a3c1	65 6e 74 65 64 00
>a3c7	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a3cf	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a3db	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a3e3	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a3f0	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a3f8	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a405	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a40d	68 6f 75 74 20 57 68 69 6c 65 00
>a418	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a420	68 6f 75 74 20 46 6f 72 00
>a429	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a431	61 63 6b 20 66 75 6c 6c 00
>a43a	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a442	75 63 74 75 72 65 00
>a449	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a451	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a45e	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a466	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a474	41 72 72 61 79 20 73 69			.text	"Array size",0
>a47c	7a 65 00
>a47f	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a487	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a48f	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2679."
>a497	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>a4a7	2e 20 42 75 69 6c 64 20 32 36 37 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.a4b4					EXTInitialise:
.a4b4	64 01		stz $01				stz 	1 							; Access I/O
.a4b6	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a4b9	9c 08 d0	stz $d008			stz 	$D008
.a4bc	9c 09 d0	stz $d009			stz 	$D009
.a4bf	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a4c1	8d 58 d6	sta $d658			sta 	$D658
.a4c4	60		rts				rts
.a4c5					EXTClearScreen:
.a4c5	4c ea ff	jmp $ffea			jmp 	$FFEA
.a4c8					EXTPrintCharacter:
.a4c8	48		pha				pha
.a4c9	da		phx				phx
.a4ca	5a		phy				phy
.a4cb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a4ce	7a		ply				ply
.a4cf	fa		plx				plx
.a4d0	68		pla				pla
.a4d1	60		rts				rts
.a4d2					EXTInputSingleCharacter:
.a4d2	da		phx				phx
.a4d3	5a		phy				phy
.a4d4					_EISCWait:
.a4d4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a4d7	c9 00		cmp #$00			cmp 	#0
.a4d9	f0 f9		beq $a4d4			beq 	_EISCWait
.a4db	7a		ply				ply
.a4dc	fa		plx				plx
.a4dd	60		rts				rts
.a4de					EXTInputLine:
.a4de	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a4e0					_ILLoop:
.a4e0	da		phx				phx 								; read character in
.a4e1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a4e4	fa		plx				plx
.a4e5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a4e7	f0 12		beq $a4fb			beq 	_ILBackspace
.a4e9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a4eb	f0 15		beq $a502			beq 	_ILExit
.a4ed	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a4ef	90 ef		bcc $a4e0			bcc 	_ILLoop
.a4f1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a4f3	f0 eb		beq $a4e0			beq 	_ILLoop
.a4f5	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.a4f8	e8		inx				inx
.a4f9	80 e5		bra $a4e0			bra 	_ILLoop
.a4fb					_ILBackspace:
.a4fb	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a4fd	f0 e1		beq $a4e0			beq 	_ILLoop
.a4ff	ca		dex				dex 								; back one.
.a500	80 de		bra $a4e0			bra 	_ILLoop
.a502					_ILExit:
.a502	20 c8 a4	jsr $a4c8			jsr 	EXTPrintCharacter
.a505	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a508	60		rts				rts
.a509					EXTBreakCheck:
.a509	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a50c					EXTReadController:
.a50c	da		phx				phx
.a50d	a2 00		ldx #$00			ldx 	#0
.a50f	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a511	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a514	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a516	f0 04		beq $a51c			beq 	_NoSet1
.a518	8a		txa				txa
.a519	09 01		ora #$01			ora 	#1
.a51b	aa		tax				tax
.a51c					_NoSet1:
.a51c	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a51e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a521	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a523	f0 04		beq $a529			beq 	_NoSet1
.a525	8a		txa				txa
.a526	09 02		ora #$02			ora 	#2
.a528	aa		tax				tax
.a529					_NoSet1:
.a529	a9 06		lda #$06			lda 	#(($32) >> 3)
.a52b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a52e	29 04		and #$04			and 	#($01 << (($32) & 7))
.a530	f0 04		beq $a536			beq 	_NoSet1
.a532	8a		txa				txa
.a533	09 04		ora #$04			ora 	#4
.a535	aa		tax				tax
.a536					_NoSet1:
.a536	a9 04		lda #$04			lda 	#(($25) >> 3)
.a538	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a53b	29 20		and #$20			and 	#($01 << (($25) & 7))
.a53d	f0 04		beq $a543			beq 	_NoSet1
.a53f	8a		txa				txa
.a540	09 08		ora #$08			ora 	#8
.a542	aa		tax				tax
.a543					_NoSet1:
.a543	a9 04		lda #$04			lda 	#(($26) >> 3)
.a545	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a548	29 40		and #$40			and 	#($01 << (($26) & 7))
.a54a	f0 04		beq $a550			beq 	_NoSet1
.a54c	8a		txa				txa
.a54d	09 10		ora #$10			ora 	#16
.a54f	aa		tax				tax
.a550					_NoSet1:
.a550	8a		txa				txa
.a551	fa		plx				plx
.a552	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.a553					MemoryDeleteLine:
.a553	20 72 a5	jsr $a572			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a556	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a558	a8		tay				tay
.a559					_MDDLLoop:
.a559	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a55b	92 30		sta ($30)			sta 	(codePtr)
.a55d	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a55f	c5 3a		cmp $3a				cmp 	zTemp2
.a561	d0 07		bne $a56a			bne 	_MDLDLNext
.a563	a5 31		lda $31				lda 	codePtr+1
.a565	c5 3b		cmp $3b				cmp 	zTemp2+1
.a567	d0 01		bne $a56a			bne 	_MDLDLNext
.a569					_MDDLExit:
.a569	60		rts				rts
.a56a					_MDLDLNext:
.a56a	e6 30		inc $30				inc 	codePtr						; next byte
.a56c	d0 eb		bne $a559			bne 	_MDDLLoop
.a56e	e6 31		inc $31				inc 	codePtr+1
.a570	80 e7		bra $a559			bra 	_MDDLLoop
.a572					IMemoryFindEnd:
.a572	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a574	85 3a		sta $3a				sta 	0+zTemp2
.a576	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a578	85 3b		sta $3b				sta 	1+zTemp2
.a57a					_MDLFELoop:
.a57a	b2 3a		lda ($3a)			lda 	(zTemp2)
.a57c	f0 0b		beq $a589			beq 	_MDLFEExit
.a57e	18		clc				clc
.a57f	65 3a		adc $3a				adc 	zTemp2
.a581	85 3a		sta $3a				sta 	zTemp2
.a583	90 f5		bcc $a57a			bcc 	_MDLFELoop
.a585	e6 3b		inc $3b				inc 	zTemp2+1
.a587	80 f1		bra $a57a			bra 	_MDLFELoop
.a589					_MDLFEExit:
.a589	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.a58a					MemoryInsertLine:
.a58a	08		php				php
.a58b	20 72 a5	jsr $a572			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a58e	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a590	1a		inc a				inc 	a
.a591	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a593	b0 36		bcs $a5cb			bcs 	_MDLIError
.a595	28		plp				plp
.a596	90 08		bcc $a5a0			bcc 	_MDLIFound
.a598	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a59a	85 30		sta $30				sta 	codePtr
.a59c	a5 3b		lda $3b				lda 	zTemp2+1
.a59e	85 31		sta $31				sta 	codePtr+1
.a5a0					_MDLIFound:
.a5a0	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a5a3	a8		tay				tay
.a5a4					_MDLIInsert:
.a5a4	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a5a6	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a5a8	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a5aa	c5 3a		cmp $3a				cmp 	zTemp2
.a5ac	d0 06		bne $a5b4			bne 	_MDLINext
.a5ae	a5 31		lda $31				lda 	codePtr+1
.a5b0	c5 3b		cmp $3b				cmp 	zTemp2+1
.a5b2	f0 0a		beq $a5be			beq 	_MDLIHaveSpace
.a5b4					_MDLINext:
.a5b4	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a5b6	d0 02		bne $a5ba			bne 	_MDLINoBorrow
.a5b8	c6 3b		dec $3b				dec 	zTemp2+1
.a5ba					_MDLINoBorrow:
.a5ba	c6 3a		dec $3a				dec 	zTemp2
.a5bc	80 e6		bra $a5a4			bra 	_MDLIInsert
.a5be					_MDLIHaveSpace:
.a5be	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.a5c1	88		dey				dey 								; from offset-1 to 0
.a5c2					_MDLICopy:
.a5c2	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.a5c5	91 30		sta ($30),y			sta 	(codePtr),y
.a5c7	88		dey				dey
.a5c8	10 f8		bpl $a5c2			bpl 	_MDLICopy
.a5ca	60		rts				rts
.a5cb					_MDLIError:
.a5cb	a9 06		lda #$06		lda	#6
.a5cd	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a5d0					MDLAppendLine:
.a5d0	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a5d2	85 36		sta $36				sta 	zTemp0
.a5d4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5d6	85 38		sta $38				sta 	0+zTemp1
.a5d8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5da	85 39		sta $39				sta 	1+zTemp1
.a5dc	b2 38		lda ($38)			lda 	(zTemp1)
.a5de	d0 0a		bne $a5ea			bne 	_MDLANoInitialise
.a5e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5e2	8d 32 06	sta $0632			sta 	0+AppendPointer
.a5e5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5e7	8d 33 06	sta $0633			sta 	1+AppendPointer
.a5ea					_MDLANoInitialise:
.a5ea	18		clc				clc
.a5eb	ad 32 06	lda $0632			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a5ee	85 38		sta $38				sta 	zTemp1
.a5f0	72 36		adc ($36)			adc 	(zTemp0)
.a5f2	8d 32 06	sta $0632			sta 	AppendPointer
.a5f5	ad 33 06	lda $0633			lda 	AppendPointer+1
.a5f8	85 39		sta $39				sta 	zTemp1+1
.a5fa	69 00		adc #$00			adc 	#0
.a5fc	8d 33 06	sta $0633			sta 	AppendPointer+1
.a5ff	a0 00		ldy #$00			ldy 	#0
.a601					_MDLACopy:
.a601	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a603	91 38		sta ($38),y			sta 	(zTemp1),y
.a605	c8		iny				iny
.a606	98		tya				tya
.a607	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a609	d0 f6		bne $a601			bne 	_MDLACopy
.a60b	a9 00		lda #$00			lda 	#0 							; end of program.
.a60d	91 38		sta ($38),y			sta 	(zTemp1),y
.a60f	60		rts				rts
.0632					AppendPointer:
>0632							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a610					MemoryNew:
.a610	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a612	85 30		sta $30				sta 	codePtr
.a614	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a616	85 31		sta $31				sta 	codePtr+1
.a618	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a61a	92 30		sta ($30)			sta 	(codePtr)
.a61c	60		rts				rts
.a61d					MemoryInline:
.a61d	98		tya				tya 								; put address into stack,x
.a61e	18		clc				clc
.a61f	65 30		adc $30				adc 	codePtr
.a621	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a624	a5 31		lda $31				lda 	codePtr+1
.a626	69 00		adc #$00			adc 	#0
.a628	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a62b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a62e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a632					MemorySearch:
.a632	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a634	86 37		stx $37				stx 	zTemp0+1
.a636	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a638	85 30		sta $30				sta 	codePtr
.a63a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a63c	85 31		sta $31				sta 	codePtr+1
.a63e					_MTAXLoop:
.a63e	b2 30		lda ($30)			lda 	(codePtr)
.a640	18		clc				clc
.a641	f0 21		beq $a664			beq 	_MTAXExit 					; reached end, exit with CC.
.a643	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a645	b1 30		lda ($30),y			lda 	(codePtr),y
.a647	38		sec				sec
.a648	e5 36		sbc $36				sbc 	zTemp0
.a64a	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a64c	c8		iny				iny 								; do the MSB
.a64d	b1 30		lda ($30),y			lda 	(codePtr),y
.a64f	e5 37		sbc $37				sbc 	zTemp0+1
.a651	05 38		ora $38				ora 	zTemp1
.a653	f0 0f		beq $a664			beq 	_MTAXExit	 				; found
.a655	b0 0d		bcs $a664			bcs 	_MTAXExit 					; current < required exit
.a657	18		clc				clc
.a658	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a65a	65 30		adc $30				adc 	codePtr
.a65c	85 30		sta $30				sta 	codePtr
.a65e	90 02		bcc $a662			bcc 	_CREExit
.a660	e6 31		inc $31				inc 	codePtr+1
.a662					_CREExit:
.a662	80 da		bra $a63e			bra 	_MTAXLoop
.a664					_MTAXExit:
.a664	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a665					StackPushByte:
.a665	48		pha				pha 								; save byte
.a666	a5 34		lda $34				lda 	BasicStack
.a668	d0 09		bne $a673			bne 	_SPBNoBorrow
.a66a	c6 35		dec $35				dec 	BasicStack+1
.a66c	48		pha				pha
.a66d	a5 35		lda $35				lda 	BasicStack+1
.a66f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a671	90 06		bcc $a679			bcc 	_SPBMemory
.a673					_SPBNoBorrow:
.a673	c6 34		dec $34				dec 	BasicStack
.a675	68		pla				pla 								; get back and write
.a676	92 34		sta ($34)			sta 	(BasicStack)
.a678	60		rts				rts
.a679					_SPBMemory:
.a679	a9 12		lda #$12		lda	#18
.a67b	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a67e					StackPopByte:
.a67e	b2 34		lda ($34)			lda 	(BasicStack)
.a680	e6 34		inc $34				inc 	BasicStack
.a682	d0 02		bne $a686			bne 	_SPBNoCarry
.a684	e6 35		inc $35				inc 	BasicStack+1
.a686					_SPBNoCarry:
.a686	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a687					StackOpen:
.a687	48		pha				pha 								; save frame byte
.a688	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a68a	0a		asl a				asl 	a 							; claim twice this for storage
.a68b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a68d	38		sec				sec 								; so basically subtracting from
.a68e	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a690	85 34		sta $34				sta 	basicStack
.a692	b0 08		bcs $a69c			bcs 	_SONoBorrow
.a694	c6 35		dec $35				dec 	basicStack+1
.a696	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a698	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a69a	90 04		bcc $a6a0			bcc 	_SOMemory
.a69c					_SONoBorrow:
.a69c	68		pla				pla 								; get marker back and write at TOS
.a69d	92 34		sta ($34)			sta 	(basicStack)
.a69f	60		rts				rts
.a6a0					_SOMemory:
.a6a0	a9 12		lda #$12		lda	#18
.a6a2	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a6a5					StackClose:
.a6a5	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6a7	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6a9	0a		asl a				asl 	a 							; claim twice this.
.a6aa	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6ac	85 34		sta $34				sta 	basicStack
.a6ae	90 02		bcc $a6b2			bcc 	_SCExit
.a6b0	e6 35		inc $35				inc 	basicStack+1
.a6b2					_SCExit:
.a6b2	60		rts				rts
.a6b3					StackCheckFrame:
.a6b3	48		pha				pha
.a6b4					_StackRemoveLocals:
.a6b4	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a6b6	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a6b8	b0 05		bcs $a6bf			bcs 	_SCNoLocal
.a6ba	20 30 8b	jsr $8b30			jsr 	LocalPopValue
.a6bd	80 f5		bra $a6b4			bra 	_StackRemoveLocals
.a6bf					_SCNoLocal:
.a6bf	68		pla				pla
.a6c0	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a6c2	29 f0		and #$f0			and 	#$F0 						; check type bits
.a6c4	d0 01		bne $a6c7			bne 	_SCFError 					; different, we have structures mixed up
.a6c6	60		rts				rts
.a6c7					_SCFError:
.a6c7	8a		txa				txa 								; report error X
.a6c8	4c c3 90	jmp $90c3			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a6cb					STKSaveCodePosition:
.a6cb	5a		phy				phy
.a6cc	98		tya				tya 								; save Y
.a6cd	a0 05		ldy #$05			ldy 	#5
.a6cf	91 34		sta ($34),y			sta 	(basicStack),y
.a6d1	88		dey				dey 								; save Code Pointer
.a6d2					_STKSaveLoop:
.a6d2	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a6d5	91 34		sta ($34),y			sta 	(basicStack),y
.a6d7	88		dey				dey
.a6d8	d0 f8		bne $a6d2			bne 	_STKSaveLoop
.a6da	7a		ply				ply
.a6db	60		rts				rts
.a6dc					STKLoadCodePosition:
.a6dc	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a6de					_STKLoadLoop:
.a6de	b1 34		lda ($34),y			lda 	(basicStack),y
.a6e0	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a6e3	c8		iny				iny
.a6e4	c0 05		cpy #$05			cpy 	#5
.a6e6	d0 f6		bne $a6de			bne 	_STKLoadLoop
.a6e8	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a6ea	a8		tay				tay
.a6eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a6ec					StackReset:
.a6ec	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a6ee	85 34		sta $34				sta 	0+basicStack
.a6f0	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a6f2	85 35		sta $35				sta 	1+basicStack
.a6f4	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a6f6	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a6f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a6f9					StringConcrete:
.a6f9	5a		phy				phy 								; save position on stack
.a6fa	20 4f 9d	jsr $9d4f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6fd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a700	85 38		sta $38				sta 	zTemp1
.a702	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a705	85 39		sta $39				sta 	zTemp1+1
.a707	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a709					_SALength:
.a709	c8		iny				iny
.a70a	b1 38		lda ($38),y			lda 	(zTemp1),y
.a70c	d0 fb		bne $a709			bne 	_SALength
.a70e	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a710	b0 3f		bcs $a751			bcs 	_SALengthError
.a712	98		tya				tya 				 				; length of the new string
.a713	18		clc				clc
.a714	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a716	90 02		bcc $a71a			bcc 	_SAHaveLength
.a718	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a71a					_SAHaveLength:
.a71a	48		pha				pha 								; save length.
.a71b	38		sec				sec
.a71c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a71e	6d 8e 04	adc $048e			adc 	StringMemory
.a721	8d 8e 04	sta $048e			sta 	StringMemory
.a724	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a726	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a729	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a72b	6d 8f 04	adc $048f			adc 	StringMemory+1
.a72e	8d 8f 04	sta $048f			sta 	StringMemory+1
.a731	85 3b		sta $3b				sta 	zTemp2+1
.a733	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a736	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a737	38		sec				sec
.a738	e9 03		sbc #$03			sbc 	#3
.a73a	92 3a		sta ($3a)			sta 	(zTemp2)
.a73c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a73e	a0 01		ldy #$01			ldy 	#1
.a740	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a742					_SACopyNewString:
.a742	a0 00		ldy #$00			ldy 	#0
.a744					_SACopyNSLoop:
.a744	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a746	c8		iny				iny 								; write two on in string storage
.a747	c8		iny				iny
.a748	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a74a	88		dey				dey 								; this makes it one one.
.a74b	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a74d	d0 f5		bne $a744			bne 	_SACopyNSLoop
.a74f	7a		ply				ply
.a750	60		rts				rts
.a751					_SALengthError:
.a751	a9 09		lda #$09		lda	#9
.a753	4c c3 90	jmp $90c3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a756					StringSystemInitialise:
.a756	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a758	8d 8e 04	sta $048e			sta 	0+StringMemory
.a75b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a75d	8d 8f 04	sta $048f			sta 	1+StringMemory
.a760	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a763	60		rts				rts
.a764					StringSpaceInitialise:
.a764	20 4f 9d	jsr $9d4f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a767	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a769	8d 90 04	sta $0490			sta 	StringInitialised
.a76c	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a76f	8d 91 04	sta $0491			sta 	StringTempPointer
.a772	ad 8f 04	lda $048f			lda 	StringMemory+1
.a775	3a		dec a				dec 	a
.a776	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a779	60		rts				rts
.a77a					StringTempAllocate:
.a77a	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a77c	b0 35		bcs $a7b3			bcs 	_STALength
.a77e	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a781	30 05		bmi $a788			bmi 	_STAAllocate
.a783	48		pha				pha 								; save value to subtract.
.a784	20 64 a7	jsr $a764			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a787	68		pla				pla 								; restore it
.a788					_STAAllocate:
.a788	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a78a	18		clc				clc  								; deliberate allows one more
.a78b	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a78e	8d 91 04	sta $0491			sta 	StringTempPointer
.a791	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a794	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a796	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a799	69 ff		adc #$ff			adc 	#$FF
.a79b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a79e	85 3d		sta $3d				sta 	zsTemp+1
.a7a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7a3	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a7a6	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a7a9	a9 10		lda #$10			lda 	#NSTString
.a7ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a7ae	a9 00		lda #$00			lda 	#0 							; clear the target string
.a7b0	92 3c		sta ($3c)			sta 	(zsTemp)
.a7b2	60		rts				rts
.a7b3					_STALength:
.a7b3	a9 09		lda #$09		lda	#9
.a7b5	4c c3 90	jmp $90c3		jmp	ErrorHandler
.a7b8					StringTempWrite:
.a7b8	48		pha				pha
.a7b9	92 3c		sta ($3c)			sta 	(zsTemp)
.a7bb	e6 3c		inc $3c				inc 	zsTemp
.a7bd	d0 02		bne $a7c1			bne 	_STWNoCarry
.a7bf	e6 3d		inc $3d				inc 	zsTemp+1
.a7c1					_STWNoCarry:
.a7c1	a9 00		lda #$00			lda 	#0
.a7c3	92 3c		sta ($3c)			sta 	(zsTemp)
.a7c5	68		pla				pla
.a7c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./modules/zzzend.asm


;******  Processing file: ./modules/../../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.a7c7					GRVectorTable:
>a7c7	16 aa					.word	GXInitialise             ; $00 Initialise
>a7c9	30 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>a7cb	78 aa					.word	GXControlSprite          ; $02 SpriteCtl
>a7cd	c8 a9					.word	GXClearBitmap            ; $03 Clear
>a7cf	07 ac					.word	GXSetColourMode          ; $04 Colour
>a7d1	cf ad					.word	GXFontHandler            ; $05 DrawFont
>a7d3	17 ae					.word	GXSpriteHandler          ; $06 DrawSprite
>a7d5	83 ae					.word	GXSelect                 ; $07 SpriteUse
>a7d7	ac ae					.word	GXSelectImage            ; $08 SpriteImage
>a7d9	33 b0					.word	GXCollide                ; $09 SpriteCollide
>a7db	7a a8					.word	GRUndefined              ; $0a
>a7dd	7a a8					.word	GRUndefined              ; $0b
>a7df	7a a8					.word	GRUndefined              ; $0c
>a7e1	7a a8					.word	GRUndefined              ; $0d
>a7e3	7a a8					.word	GRUndefined              ; $0e
>a7e5	7a a8					.word	GRUndefined              ; $0f
>a7e7	7a a8					.word	GRUndefined              ; $10
>a7e9	7a a8					.word	GRUndefined              ; $11
>a7eb	7a a8					.word	GRUndefined              ; $12
>a7ed	7a a8					.word	GRUndefined              ; $13
>a7ef	7a a8					.word	GRUndefined              ; $14
>a7f1	7a a8					.word	GRUndefined              ; $15
>a7f3	7a a8					.word	GRUndefined              ; $16
>a7f5	7a a8					.word	GRUndefined              ; $17
>a7f7	7a a8					.word	GRUndefined              ; $18
>a7f9	7a a8					.word	GRUndefined              ; $19
>a7fb	7a a8					.word	GRUndefined              ; $1a
>a7fd	7a a8					.word	GRUndefined              ; $1b
>a7ff	7a a8					.word	GRUndefined              ; $1c
>a801	7a a8					.word	GRUndefined              ; $1d
>a803	7a a8					.word	GRUndefined              ; $1e
>a805	7a a8					.word	GRUndefined              ; $1f
>a807	78 a8					.word	GXMove                   ; $20 Move
>a809	d5 aa					.word	GXLine                   ; $21 Line
>a80b	50 ac					.word	GXFrameRectangle         ; $22 FrameRect
>a80d	4d ac					.word	GXFillRectangle          ; $23 FillRect
>a80f	7f a8					.word	GXFrameCircle            ; $24 FrameCircle
>a811	7b a8					.word	GXFillCircle             ; $25 FillCircle
>a813	7a a8					.word	GRUndefined              ; $26
>a815	7a a8					.word	GRUndefined              ; $27
>a817	35 ac					.word	GXPlotPoint              ; $28 Plot
>a819	42 af					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.0634					gxCurrentX:
>0634							.fill 	2
.0636					gxCurrentY:
>0636							.fill 	2
.0638					gxLastX:
>0638							.fill 	2
.063a					gxLastY:
>063a							.fill 	2
.063c					gxX0:
>063c							.fill 	2
.063e					gxY0:
>063e							.fill 	2
.0640					gxX1:
>0640							.fill 	2
.0642					gxY1:
>0642							.fill 	2
.0644					gxSpritesOn:
>0644							.fill 	1
.0645					gxBitmapsOn:
>0645							.fill 	1
.0646					gxBasePage:
>0646							.fill 	1
.0647					gxSpritePage:
>0647							.fill 	1
.0648					gxHeight:
>0648							.fill 	1
.0649					gxMode:
>0649							.fill 	1
.064a					gxColour:
>064a							.fill 	1
.064b					gxEORValue:
>064b							.fill 	1
.064c					gxANDValue:
>064c							.fill 	1
.064d					gxOriginalLUTValue:
>064d							.fill 	1
.064e					gsOffset:
>064e							.fill 	1
.064f					GSCurrentSpriteID:
>064f							.fill 	1
.0650					GSCurrentSpriteAddr:
>0650							.fill 	2
.0652					GXSpriteOffsetBase:
>0652							.fill 	2
.0654					GXSpriteLow:
>0654							.fill 	64
.0694					GXSpriteHigh:
>0694							.fill 	64
.a81b					GXGraphicDraw:
.a81b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.a81d	b0 06		bcs $a825			bcs 	_GDCoordinate
.a81f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.a821	84 37		sty $37				sty 	gxzTemp0+1
.a823	80 4b		bra $a870			bra 	_GDExecuteA 				; and execute
.a825					_GDCoordinate:
.a825	48		pha				pha 								; save AXY
.a826	da		phx				phx
.a827	5a		phy				phy
.a828	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.a82a					_GDCopy1:
.a82a	bd 34 06	lda $0634,x			lda 	gxCurrentX,x
.a82d	9d 38 06	sta $0638,x			sta 	gxLastX,x
.a830	ca		dex				dex
.a831	10 f7		bpl $a82a			bpl 	_GDCopy1
.a833	68		pla				pla 								; update Y
.a834	8d 36 06	sta $0636			sta 	gxCurrentY
.a837	9c 37 06	stz $0637			stz 	gxCurrentY+1
.a83a	68		pla				pla
.a83b	8d 34 06	sta $0634			sta 	gxCurrentX
.a83e	68		pla				pla 								; get A (command+X.1) back
.a83f	48		pha				pha
.a840	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.a842	8d 35 06	sta $0635			sta 	gxCurrentX+1
.a845	68		pla				pla 								; get command back
.a846	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.a848	48		pha				pha 								; push back.
.a849	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.a84b	f0 17		beq $a864			beq 	_GDCopyToWorkArea
.a84d	ad 35 06	lda $0635			lda 	gxCurrentX+1 				; X < 256 X okay
.a850	f0 07		beq $a859			beq 	_GDCheckY
.a852	ad 34 06	lda $0634			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.a855	c9 40		cmp #$40			cmp 	#64
.a857	b0 08		bcs $a861			bcs 	_GDError1
.a859					_GDCheckY:
.a859	ad 36 06	lda $0636			lda 	gxCurrentY 					; check Y < Height.
.a85c	cd 48 06	cmp $0648			cmp 	gxHeight
.a85f	90 03		bcc $a864			bcc 	_GDCopyToWorkArea
.a861					_GDError1:
.a861	68		pla				pla
.a862					_GDError2:
.a862	38		sec				sec
.a863	60		rts				rts
.a864					_GDCopyToWorkArea:
.a864	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.a866					_GDCopy2:
.a866	bd 34 06	lda $0634,x			lda 	gxCurrentX,x
.a869	9d 3c 06	sta $063c,x			sta 	gxX0,x
.a86c	ca		dex				dex
.a86d	10 f7		bpl $a866			bpl 	_GDCopy2
.a86f	68		pla				pla 								; get command
.a870					_GDExecuteA:
.a870	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.a872	b0 ee		bcs $a862			bcs 	_GDError2
.a874	aa		tax				tax
.a875	7c c7 a7	jmp ($a7c7,x)			jmp 	(GRVectorTable,x)
.a878					GXMove:
.a878	18		clc				clc
.a879	60		rts				rts
.a87a					GRUndefined:
>a87a	db						.byte 	$DB 						; causes a break in the emulator
.a87b					GXFillCircle:
.a87b	a9 ff		lda #$ff			lda 	#255
.a87d	80 02		bra $a881			bra 	GXCircle
.a87f					GXFrameCircle:
.a87f	a9 00		lda #$00			lda 	#0
.a881					GXCircle:
.a881	8d d7 06	sta $06d7			sta 	gxIsFillMode					; save Fill flag
.a884	ad 45 06	lda $0645			lda 	gxBitmapsOn
.a887	f0 26		beq $a8af			beq 	_GXCFail
.a889	20 da b0	jsr $b0da			jsr 	GXSortXY 					; topleft/bottomright
.a88c	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap 				; start drawing
.a88f	20 81 a9	jsr $a981			jsr 	GXCircleSetup 				; set up for drawing
.a892	9c d8 06	stz $06d8			stz 	gxYChanged
.a895					_GXCircleDraw:
.a895	ad d5 06	lda $06d5			lda 	gXCentre					; while x <= y
.a898	cd d6 06	cmp $06d6			cmp 	gYCentre
.a89b	90 0a		bcc $a8a7			bcc 	_GXCircleContinue
.a89d	d0 03		bne $a8a2			bne 	_GXNoLast
.a89f	20 b4 a8	jsr $a8b4			jsr 	GXPlot1
.a8a2					_GXNoLast:
.a8a2	20 ba af	jsr $afba			jsr 	GXCloseBitmap 				; close the bitmap
.a8a5	18		clc				clc
.a8a6	60		rts				rts
.a8a7					_GXCircleContinue:
.a8a7	20 b1 a8	jsr $a8b1			jsr 	GXPlot2 					; draw it
.a8aa	20 2e a9	jsr $a92e			jsr 	GXCircleMove 				; adjust the coordinates
.a8ad	80 e6		bra $a895			bra 	_GXCircleDraw
.a8af					_GXCFail:
.a8af	38		sec				sec
.a8b0	60		rts				rts
.a8b1					GXPlot2:
.a8b1	20 b4 a8	jsr $a8b4			jsr 	GXPlot1 						; plot and swap, fall through does twice
.a8b4					GXPlot1:
.a8b4	ad d6 06	lda $06d6			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.a8b7	f0 03		beq $a8bc			beq 	_GXPlot1Only
.a8b9	20 d8 a8	jsr $a8d8			jsr 	GXPlot0 						; plot and negate
.a8bc					_GXPlot1Only:
.a8bc	20 d8 a8	jsr $a8d8			jsr 	GXPlot0 						; twice, undoing negation
.a8bf	ad d5 06	lda $06d5			lda 	gXCentre 						; swap X and Y
.a8c2	ae d6 06	ldx $06d6			ldx	 	gYCentre
.a8c5	8d d6 06	sta $06d6			sta 	gYCentre
.a8c8	8e d5 06	stx $06d5			stx 	gXCentre
.a8cb	ad d8 06	lda $06d8			lda 	gxYChanged 						; toggle Y Changed flag
.a8ce	a9 ff		lda #$ff			lda 	#$FF
.a8d0	8d d8 06	sta $06d8			sta 	gxYChanged
.a8d3	60		rts				rts
.a8d4	20 d8 a8	jsr $a8d8			jsr 	GXPlot0 						; do once
.a8d7	60		rts				rts
.a8d8	ad d7 06	lda $06d7	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.a8db	f0 05		beq $a8e2			beq 	_GXPlot0Always
.a8dd	ad d8 06	lda $06d8			lda 	gxYChanged						; fill mode, only draw if changed.
.a8e0	f0 2d		beq $a90f			beq 	GXPlot0Exit
.a8e2					_GXPlot0Always:
.a8e2	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.a8e4	ad d6 06	lda $06d6			lda 	gYCentre
.a8e7	20 10 a9	jsr $a910			jsr 	GXSubCopy
.a8ea	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.a8ec	ad d5 06	lda $06d5			lda 	gXCentre
.a8ef	20 10 a9	jsr $a910			jsr 	GXSubCopy
.a8f2	48		pha				pha 									; save last offset X
.a8f3	20 c2 af	jsr $afc2			jsr 	GXPositionCalc 					; calculate position/offset.
.a8f6	68		pla				pla
.a8f7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.a8f8	85 36		sta $36				sta 	gxzTemp0
.a8fa	64 37		stz $37				stz 	gxzTemp0+1
.a8fc	26 37		rol $37				rol 	gxzTemp0+1
.a8fe	ad d7 06	lda $06d7			lda 	gxIsFillMode
.a901	69 80		adc #$80			adc 	#128
.a903	20 a0 ac	jsr $aca0			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.a906	38		sec				sec 									; GY = -GY
.a907	a9 00		lda #$00			lda 	#0
.a909	ed d6 06	sbc $06d6			sbc 	gYCentre
.a90c	8d d6 06	sta $06d6			sta 	gYCentre
.a90f					GXPlot0Exit:
.a90f	60		rts				rts
.a910					GXSubCopy:
.a910	85 36		sta $36				sta 	gxzTemp0
.a912	64 37		stz $37				stz 	gxzTemp0+1
.a914	29 80		and #$80			and 	#$80
.a916	f0 02		beq $a91a			beq 	_GXNoSx
.a918	c6 37		dec $37				dec 	gxzTemp0+1
.a91a					_GXNoSx:
.a91a	38		sec				sec
.a91b	bd 40 06	lda $0640,x			lda 	gXX1,x
.a91e	e5 36		sbc $36				sbc 	gxzTemp0
.a920	9d 3c 06	sta $063c,x			sta 	gXX0,x
.a923	bd 41 06	lda $0641,x			lda 	gXX1+1,x
.a926	e5 37		sbc $37				sbc 	gxzTemp0+1
.a928	9d 3d 06	sta $063d,x			sta 	gXX0+1,x
.a92b	a5 36		lda $36				lda 	gxzTemp0 						; return A
.a92d	60		rts				rts
.a92e					GXCircleMove:
.a92e	9c d8 06	stz $06d8			stz 	gxYChanged 					; clear Y changed flag
.a931	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.a933	10 0d		bpl $a942			bpl 	_GXEMPositive
.a935	ee d5 06	inc $06d5			inc 	gXCentre 					; X++
.a938	ad d5 06	lda $06d5			lda 	gXCentre
.a93b	20 61 a9	jsr $a961			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a93e	a9 06		lda #$06			lda 	#6  						; and add 6
.a940	80 15		bra $a957			bra 	_GXEMAddD
.a942					_GXEMPositive:
.a942	ee d5 06	inc $06d5			inc 	gXCentre					; X++
.a945	ce d6 06	dec $06d6			dec 	gyCentre 					; Y--
.a948	38		sec				sec 								; calculate X-Y
.a949	ad d5 06	lda $06d5			lda 	gXCentre
.a94c	ed d6 06	sbc $06d6			sbc 	gYCentre
.a94f	20 61 a9	jsr $a961			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a952	a9 0a		lda #$0a			lda 	#10  						; and add 10
.a954	ce d8 06	dec $06d8			dec 	gxYChanged
.a957					_GXEMAddD:
.a957	18		clc				clc
.a958	65 38		adc $38				adc 	gxzTemp1
.a95a	85 38		sta $38				sta 	gxzTemp1
.a95c	90 02		bcc $a960			bcc 	_GXEMNoCarry
.a95e	e6 39		inc $39				inc 	gxzTemp1+1
.a960					_GXEMNoCarry:
.a960	60		rts				rts
.a961					_GXAdd4TimesToD:
.a961	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.a963	29 80		and #$80			and 	#$80
.a965	f0 02		beq $a969			beq 	_GXA4Unsigned
.a967	a9 ff		lda #$ff			lda 	#$FF
.a969					_GXA4Unsigned:
.a969	85 37		sta $37				sta 	gxzTemp0+1
.a96b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.a96d	26 37		rol $37				rol 	gxzTemp0+1
.a96f	06 36		asl $36				asl 	gxzTemp0
.a971	26 37		rol $37				rol 	gxzTemp0+1
.a973	18		clc				clc 								; add
.a974	a5 36		lda $36				lda		gxzTemp0
.a976	65 38		adc $38				adc 	gxzTemp1
.a978	85 38		sta $38				sta 	gxzTemp1
.a97a	a5 37		lda $37				lda		gxzTemp0+1
.a97c	65 39		adc $39				adc 	gxzTemp1+1
.a97e	85 39		sta $39				sta 	gxzTemp1+1
.a980	60		rts				rts
.a981					GXCircleSetup:
.a981	38		sec				sec
.a982	ad 42 06	lda $0642			lda 	gxY1
.a985	ed 3e 06	sbc $063e			sbc 	gxY0
.a988	4a		lsr a				lsr 	a
.a989	8d d4 06	sta $06d4			sta 	gxRadius
.a98c	a2 00		ldx #$00			ldx 	#0
.a98e	20 b0 a9	jsr $a9b0			jsr 	_GXCalculateCentre
.a991	a2 02		ldx #$02			ldx 	#2
.a993	20 b0 a9	jsr $a9b0			jsr 	_GXCalculateCentre
.a996	9c d5 06	stz $06d5			stz 	gXCentre
.a999	ad d4 06	lda $06d4			lda 	gxRadius
.a99c	8d d6 06	sta $06d6			sta 	gYCentre
.a99f	0a		asl a				asl 	a 							; R x 2
.a9a0	85 36		sta $36				sta 	gxzTemp0
.a9a2	38		sec				sec
.a9a3	a9 03		lda #$03			lda 	#3
.a9a5	e5 36		sbc $36				sbc 	gxzTemp0
.a9a7	85 38		sta $38				sta 	gxzTemp1
.a9a9	a9 00		lda #$00			lda 	#0
.a9ab	e9 00		sbc #$00			sbc 	#0
.a9ad	85 39		sta $39				sta 	gxzTemp1+1
.a9af	60		rts				rts
.a9b0					_GXCalculateCentre:
.a9b0	38		sec				sec
.a9b1	bd 40 06	lda $0640,x			lda 	gxX1,x
.a9b4	7d 3c 06	adc $063c,x			adc 	gXX0,x
.a9b7	9d 40 06	sta $0640,x			sta 	gXX1,x
.a9ba	bd 41 06	lda $0641,x			lda 	gXX1+1,x
.a9bd	7d 3d 06	adc $063d,x			adc 	gXX0+1,x
.a9c0	4a		lsr a				lsr 	a
.a9c1	9d 41 06	sta $0641,x			sta 	gXX1+1,x
.a9c4	7e 40 06	ror $0640,x			ror 	gXX1,x
.a9c7	60		rts				rts
.06d4					gxRadius:
>06d4							.fill 	1
.06d5					gXCentre:
>06d5							.fill 	1
.06d6					gYCentre:
>06d6							.fill 	1
.06d7					gxIsFillMode:
>06d7							.fill 	1
.06d8					gxYChanged:
>06d8							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.a9c8					GXClearBitmap:
.a9c8	ad 45 06	lda $0645			lda 	gxBitmapsOn 				; check BMP running.
.a9cb	f0 24		beq $a9f1			beq 	_GXCBFail
.a9cd	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap 				; start access
.a9d0	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.a9d2	ad 48 06	lda $0648			lda 	gxHeight
.a9d5	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.a9d7	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.a9d9					_GXCalcLastPage:
.a9d9	98		tya				tya 								; add to base page
.a9da	18		clc				clc
.a9db	6d 46 06	adc $0646			adc 	gxBasePage
.a9de	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.a9e0					_GXClearAll:
.a9e0	20 f3 a9	jsr $a9f3			jsr 	_GXClearBlock 				; clear 8k block
.a9e3	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.a9e5	a5 0b		lda $0b				lda 	GXEditSlot
.a9e7	cd 46 06	cmp $0646			cmp 	gxBasePage 					; until before base page
.a9ea	b0 f4		bcs $a9e0			bcs 	_GXClearAll
.a9ec	20 ba af	jsr $afba			jsr 	GXCloseBitmap	 			; stop access
.a9ef	18		clc				clc
.a9f0	60		rts				rts
.a9f1					_GXCBFail:
.a9f1	38		sec				sec
.a9f2	60		rts				rts
.a9f3					_GXClearBlock:
.a9f3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.a9f5	85 38		sta $38				sta 	0+gxzTemp1
.a9f7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.a9f9	85 39		sta $39				sta 	1+gxzTemp1
.a9fb					_GXCB0:
.a9fb	a5 36		lda $36				lda 	gxzTemp0
.a9fd	a0 00		ldy #$00			ldy 	#0
.a9ff					_GXCB1:
.a9ff	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa01	c8		iny				iny
.aa02	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa04	c8		iny				iny
.aa05	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa07	c8		iny				iny
.aa08	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa0a	c8		iny				iny
.aa0b	d0 f2		bne $a9ff			bne 	_GXCB1
.aa0d	e6 39		inc $39				inc 	gxzTemp1+1
.aa0f	a5 39		lda $39				lda 	gxzTemp1+1
.aa11	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.aa13	d0 e6		bne $a9fb			bne 	_GXCB0
.aa15	60		rts				rts
.aa16					GXInitialise:
.aa16	64 01		stz $01				stz 	1
.aa18	a9 01		lda #$01			lda 	#1
.aa1a	8d 00 d0	sta $d000			sta 	$D000
.aa1d	18		clc				clc
.aa1e	9c 44 06	stz $0644			stz 	GXSpritesOn
.aa21	9c 45 06	stz $0645			stz 	GXBitmapsOn
.aa24	a2 0f		ldx #$0f			ldx 	#15
.aa26					_GXIClear:
.aa26	9e 34 06	stz $0634,x			stz 	gxCurrentX,x
.aa29	ca		dex				dex
.aa2a	10 fa		bpl $aa26			bpl 	_GXIClear
.aa2c	20 c7 aa	jsr $aac7			jsr 	GXClearSpriteStore
.aa2f	60		rts				rts
.aa30					GXControlBitmap:
.aa30	64 01		stz $01				stz 	1
.aa32	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aa34	29 01		and #$01			and 	#1 							; set bitmap flag
.aa36	8d 45 06	sta $0645			sta 	gxBitmapsOn
.aa39	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aa3a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aa3d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aa3f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.aa41	90 02		bcc $aa45			bcc 	_CBNotOn
.aa43	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.aa45					_CBNotOn:
.aa45	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aa48	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.aa4a	29 07		and #$07			and 	#7
.aa4c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.aa4f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aa51	d0 02		bne $aa55			bne 	_CBNotDefault
.aa53	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.aa55					_CBNotDefault:
.aa55	8d 46 06	sta $0646			sta 	gxBasePage
.aa58	20 b9 aa	jsr $aab9			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aa5b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.aa5d	8d 03 d1	sta $d103			sta 	$D103
.aa60	a5 36		lda $36				lda 	gxzTemp0
.aa62	8d 02 d1	sta $d102			sta 	$D102
.aa65	9c 01 d1	stz $d101			stz 	$D101
.aa68	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.aa6a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.aa6d	29 01		and #$01			and 	#1
.aa6f	f0 02		beq $aa73			beq 	_CBHaveHeight
.aa71	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.aa73					_CBHaveHeight
.aa73	8e 48 06	stx $0648			stx 	gxHeight
.aa76	18		clc				clc
.aa77	60		rts				rts
.aa78					GXControlSprite:
.aa78	64 01		stz $01				stz 	1
.aa7a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aa7c	29 01		and #$01			and 	#1 							; set sprites flag
.aa7e	8d 44 06	sta $0644			sta 	gxSpritesOn
.aa81	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aa82	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aa85	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aa87	29 df		and #$df			and 	#$DF 						; clear sprite bit
.aa89	90 02		bcc $aa8d			bcc 	_CSNotOn
.aa8b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.aa8d					_CSNotOn:
.aa8d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aa90	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aa92	d0 02		bne $aa96			bne 	_CSNotDefault
.aa94	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.aa96					_CSNotDefault:
.aa96	8d 47 06	sta $0647			sta 	gxSpritePage
.aa99	20 b9 aa	jsr $aab9			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aa9c	a5 36		lda $36				lda 	zTemp0
.aa9e	8d 52 06	sta $0652			sta 	GXSpriteOffsetBase
.aaa1	a5 37		lda $37				lda 	zTemp0+1
.aaa3	8d 53 06	sta $0653			sta 	GXSpriteOffsetBase+1
.aaa6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aaa8					_CSClear:
.aaa8	9e 00 d9	stz $d900,x			stz 	$D900,x
.aaab	9e 00 da	stz $da00,x			stz 	$DA00,x
.aaae	ca		dex				dex
.aaaf	d0 f7		bne $aaa8			bne 	_CSClear
.aab1	9c 51 06	stz $0651			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.aab4	20 c7 aa	jsr $aac7			jsr 	GXClearSpriteStore
.aab7	18		clc				clc
.aab8	60		rts				rts
.aab9					GXCalculateBaseAddress:
.aab9	85 36		sta $36				sta 	gxzTemp0
.aabb	64 37		stz $37				stz 	gxzTemp0+1
.aabd	a9 05		lda #$05			lda 	#5
.aabf					_GXShift:
.aabf	06 36		asl $36				asl 	gxzTemp0
.aac1	26 37		rol $37				rol 	gxzTemp0+1
.aac3	3a		dec a				dec		a
.aac4	d0 f9		bne $aabf			bne 	_GXShift
.aac6	60		rts				rts
.aac7					GXClearSpriteStore:
.aac7	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.aac9					_GXCSSLoop:
.aac9	9e 94 06	stz $0694,x			stz 	GXSpriteHigh,x
.aacc	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.aace	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.aad1	ca		dex				dex
.aad2	10 f5		bpl $aac9			bpl 	_GXCSSLoop
.aad4	60		rts				rts
.aad5					GXLine:
.aad5	ad 45 06	lda $0645			lda 	GXBitmapsOn
.aad8	f0 28		beq $ab02			beq 	_GXLFail
.aada	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap
.aadd	20 f8 b0	jsr $b0f8			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.aae0	20 a8 ab	jsr $aba8			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.aae3	20 c2 af	jsr $afc2			jsr 	GXPositionCalc 				; calculate position/offset.
.aae6					_GXDrawLoop:
.aae6	ac 4e 06	ldy $064e			ldy 	gsOffset 					; draw the pixel
.aae9	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.aaeb	2d 4c 06	and $064c			and 	gxANDValue
.aaee	4d 4b 06	eor $064b			eor 	gxEORValue
.aaf1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aaf3	20 04 ab	jsr $ab04			jsr 	GXLineIsComplete 			; is the line complete ?
.aaf6	f0 05		beq $aafd			beq 	_GXLExit
.aaf8	20 1f ab	jsr $ab1f			jsr 	GXLineAdvance 				; code as per advance method
.aafb	80 e9		bra $aae6			bra 	_GXDrawLoop
.aafd					_GXLExit:
.aafd	20 ba af	jsr $afba			jsr 	GXCloseBitmap
.ab00	18		clc				clc
.ab01	60		rts				rts
.ab02					_GXLFail:
.ab02	38		sec				sec
.ab03	60		rts				rts
.ab04					GXLineIsComplete:
.ab04	ad db 06	lda $06db			lda 	GXIsDiffYLarger 			; is dy larger
.ab07	d0 0f		bne $ab18			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ab09	ad 3c 06	lda $063c			lda 	GXX0 						; compare X, LSB and MSB
.ab0c	4d 40 06	eor $0640			eor 	GXX1
.ab0f	d0 06		bne $ab17			bne 	_GXLICExit
.ab11	ad 3d 06	lda $063d			lda 	GXX0+1
.ab14	4d 41 06	eor $0641			eor 	GXX1+1
.ab17					_GXLICExit:
.ab17	60		rts				rts
.ab18					_GXLICCompareY:
.ab18	ad 42 06	lda $0642			lda 	GXY1
.ab1b	4d 3e 06	eor $063e			eor 	GXY0
.ab1e	60		rts				rts
.ab1f					GXLineAdvance:
.ab1f	18		clc				clc 								; add adjust to position
.ab20	ad dd 06	lda $06dd			lda 	GXPosition
.ab23	6d de 06	adc $06de			adc 	GXAdjust
.ab26	8d dd 06	sta $06dd			sta 	GXPosition
.ab29	9c e0 06	stz $06e0			stz 	GXAddSelect 				; clear add select flag
.ab2c	b0 05		bcs $ab33			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ab2e	cd df 06	cmp $06df			cmp 	GXTotal 					; if exceeded total
.ab31	90 0a		bcc $ab3d			bcc 	_GXLANoExtra
.ab33					_GXLAOverflow:
.ab33	ce e0 06	dec $06e0			dec 	GXAddSelect 				; set addselect to $FF
.ab36	38		sec				sec 								; subtract total and write back
.ab37	ed df 06	sbc $06df			sbc 	GXTotal
.ab3a	8d dd 06	sta $06dd			sta 	GXPosition
.ab3d					_GXLANoExtra:
.ab3d	ad db 06	lda $06db			lda 	GXIsDiffYLarger
.ab40	f0 0d		beq $ab4f			beq 	_GXDXLarger
.ab42	20 a1 ab	jsr $aba1			jsr 	GXIncrementY
.ab45	ad e0 06	lda $06e0			lda 	GXAddSelect
.ab48	f0 10		beq $ab5a			beq 	_GXLAExit
.ab4a	20 5b ab	jsr $ab5b			jsr 	GXAdjustX
.ab4d	80 0b		bra $ab5a			bra 	_GXLAExit
.ab4f					_GXDXLarger:
.ab4f	20 5b ab	jsr $ab5b			jsr 	GXAdjustX
.ab52	ad e0 06	lda $06e0			lda 	GXAddSelect
.ab55	f0 03		beq $ab5a			beq 	_GXLAExit
.ab57	20 a1 ab	jsr $aba1			jsr 	GXIncrementY
.ab5a					_GXLAExit:
.ab5a	60		rts				rts
.ab5b					GXAdjustX:
.ab5b	ad dc 06	lda $06dc			lda 	GXDXNegative
.ab5e	10 25		bpl $ab85			bpl 	_GXAXRight
.ab60	ad 3c 06	lda $063c			lda 	GXX0
.ab63	d0 03		bne $ab68			bne 	_GXAXNoBorrow
.ab65	ce 3d 06	dec $063d			dec 	GXX0+1
.ab68					_GXAXNoBorrow:
.ab68	ce 3c 06	dec $063c			dec 	GXX0
.ab6b	ce 4e 06	dec $064e			dec 	gsOffset 					; pixel left
.ab6e	ad 4e 06	lda $064e			lda 	gsOffset
.ab71	c9 ff		cmp #$ff			cmp 	#$FF
.ab73	d0 0f		bne $ab84			bne 	_GXAYExit 					; underflow
.ab75	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ab77	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ab79	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ab7b	b0 07		bcs $ab84			bcs 	_GXAYExit
.ab7d	18		clc				clc
.ab7e	69 20		adc #$20			adc 	#$20 						; fix up
.ab80	85 3d		sta $3d				sta 	gxzScreen+1
.ab82	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ab84					_GXAYExit:
.ab84	60		rts				rts
.ab85					_GXAXRight:
.ab85	ee 3c 06	inc $063c			inc 	GXX0
.ab88	d0 03		bne $ab8d			bne 	_GXAXNoCarry
.ab8a	ee 3d 06	inc $063d			inc 	GXX0+1
.ab8d					_GXAXNoCarry:
.ab8d	ee 4e 06	inc $064e			inc 	gsOffset 					; pixel right
.ab90	d0 0e		bne $aba0			bne 	_GXAXExit 					; if not overflowed, exit.
.ab92	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ab94	a5 3d		lda $3d				lda 	gxzScreen+1
.ab96	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ab98	90 06		bcc $aba0			bcc 	_GXAXExit
.ab9a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ab9c	85 3d		sta $3d				sta 	gxzScreen+1
.ab9e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.aba0					_GXAXExit:
.aba0	60		rts				rts
.aba1					GXIncrementY:
.aba1	ee 3e 06	inc $063e			inc 	GXY0
.aba4	20 18 b0	jsr $b018			jsr 	GXMovePositionDown
.aba7	60		rts				rts
.aba8					GXLineSetup:
.aba8	ad 42 06	lda $0642			lda 	GXY1
.abab	38		sec				sec
.abac	ed 3e 06	sbc $063e			sbc 	GXY0
.abaf	4a		lsr a				lsr 	a
.abb0	8d da 06	sta $06da			sta 	GXDiffY
.abb3	9c dc 06	stz $06dc			stz 	GXDXNegative 				; clear -ve flag
.abb6	38		sec				sec
.abb7	ad 40 06	lda $0640			lda 	GXX1
.abba	ed 3c 06	sbc $063c			sbc 	GXX0
.abbd	8d d9 06	sta $06d9			sta 	GXDiffX
.abc0	ad 41 06	lda $0641			lda 	GXX1+1 						; calculate MSB
.abc3	ed 3d 06	sbc $063d			sbc 	GXX0+1
.abc6	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.abc7	6e d9 06	ror $06d9			ror 	GXDiffX
.abca	0a		asl a				asl 	a
.abcb	10 0c		bpl $abd9			bpl 	_GDXNotNegative
.abcd	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.abcf	38		sec				sec
.abd0	ed d9 06	sbc $06d9			sbc 	GXDiffX
.abd3	8d d9 06	sta $06d9			sta 	GXDiffX
.abd6	ce dc 06	dec $06dc			dec 	GXDXNegative 				; -ve flag = $FF.
.abd9					_GDXNotNegative:
.abd9	9c db 06	stz $06db			stz 	GXIsDiffYLarger 			; clear larger flag
.abdc	ad da 06	lda $06da			lda 	GXDiffY 					; set adjust and total.
.abdf	8d de 06	sta $06de			sta 	GXAdjust
.abe2	ad d9 06	lda $06d9			lda 	GXDiffX
.abe5	8d df 06	sta $06df			sta 	GXTotal
.abe8	ad da 06	lda $06da			lda 	GXDiffY 					; if dy > dx
.abeb	cd d9 06	cmp $06d9			cmp 	GXDiffX
.abee	90 0f		bcc $abff			bcc 	_GDXNotLarger
.abf0	ce db 06	dec $06db			dec 	GXIsDiffYLarger 			; set the dy larger flag
.abf3	ad d9 06	lda $06d9			lda 	GXDiffX 					; set adjust and total other way round
.abf6	8d de 06	sta $06de			sta 	GXAdjust
.abf9	ad da 06	lda $06da			lda 	GXDiffY
.abfc	8d df 06	sta $06df			sta 	GXTotal
.abff					_GDXNotLarger:
.abff	ad df 06	lda $06df			lda 	GXTotal
.ac02	4a		lsr a				lsr 	a
.ac03	8d dd 06	sta $06dd			sta 	GXPosition
.ac06	60		rts				rts
.06d9					GXDiffX:
>06d9							.fill 	1
.06da					GXDiffY:
>06da							.fill 	1
.06db					GXIsDiffYLarger:
>06db							.fill 	1
.06dc					GXDXNegative:
>06dc							.fill 	1
.06dd					GXPosition:
>06dd							.fill 	1
.06de					GXAdjust:
>06de							.fill 	1
.06df					GXTotal:
>06df							.fill 	1
.06e0					GXAddSelect:
>06e0							.fill 	1
.ac07					GXSetColourMode:
.ac07	a6 36		ldx $36				ldx 	gxzTemp0
.ac09	8e 4a 06	stx $064a			stx 	gxColour 								; set colour
.ac0c	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ac0e	8d 49 06	sta $0649			sta 	gxMode 									; set mode
.ac11	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ac13	9c 4c 06	stz $064c			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ac16	ae 4a 06	ldx $064a			ldx 	gxColour
.ac19	8e 4b 06	stx $064b			stx 	gxEORValue
.ac1c	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ac1e	90 03		bcc $ac23			bcc 	_GXSDCNotAndColour
.ac20	8e 4c 06	stx $064c			stx 	gxANDValue
.ac23					_GXSDCNotAndColour:
.ac23	d0 03		bne $ac28			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ac25	9c 4b 06	stz $064b			stz 	gxEORValue
.ac28					_GXSDCNotAnd:
.ac28	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ac29	90 08		bcc $ac33			bcc 	_GXSDCNoFlip
.ac2b	ad 4c 06	lda $064c			lda	 	gxANDValue
.ac2e	49 ff		eor #$ff			eor 	#$FF
.ac30	8d 4c 06	sta $064c			sta 	gxANDValue
.ac33					_GXSDCNoFlip:
.ac33	18		clc				clc
.ac34	60		rts				rts
.ac35					GXPlotPoint:
.ac35	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap 				; start drawing
.ac38	20 c2 af	jsr $afc2			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ac3b	ac 4e 06	ldy $064e			ldy 	gsOffset
.ac3e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ac40	2d 4c 06	and $064c			and 	gxANDValue
.ac43	4d 4b 06	eor $064b			eor 	gxEORValue
.ac46	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ac48	20 ba af	jsr $afba			jsr 	GXCloseBitmap 				; stop drawing and exit
.ac4b	18		clc				clc
.ac4c	60		rts				rts
.ac4d					GXFillRectangle:
.ac4d	38		sec				sec
.ac4e	80 01		bra $ac51			bra 	GXRectangle
.ac50					GXFrameRectangle:
.ac50	18		clc				clc
.ac51					GXRectangle:
.ac51	ad 45 06	lda $0645			lda 	gxBitmapsOn
.ac54	f0 35		beq $ac8b			beq 	_GXRFail
.ac56	08		php				php 								; save Fill flag (CS)
.ac57	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap 				; start drawing
.ac5a	20 da b0	jsr $b0da			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ac5d	20 c2 af	jsr $afc2			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ac60	38		sec				sec 								; sec = Draw line
.ac61	20 8d ac	jsr $ac8d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ac64	ad 3e 06	lda $063e			lda 	gxY0 						; reached end of rectangle ?
.ac67	cd 42 06	cmp $0642			cmp 	gxY1
.ac6a	f0 19		beq $ac85			beq 	_GXRectangleExit
.ac6c					_GXRectLoop:
.ac6c	20 18 b0	jsr $b018			jsr 	GXMovePositionDown 			; down one.
.ac6f	ee 3e 06	inc $063e			inc 	gxY0 						; change Y pos
.ac72	ad 3e 06	lda $063e			lda 	gxY0 						; reached last line
.ac75	cd 42 06	cmp $0642			cmp 	gXY1
.ac78	f0 07		beq $ac81			beq 	_GXLastLine
.ac7a	28		plp				plp 								; get flag back
.ac7b	08		php				php
.ac7c	20 8d ac	jsr $ac8d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ac7f	80 eb		bra $ac6c			bra 	_GXRectLoop
.ac81					_GXLastLine:
.ac81	38		sec				sec
.ac82	20 8d ac	jsr $ac8d			jsr 	GXDrawLineX1X0
.ac85					_GXRectangleExit:
.ac85	68		pla				pla 								; throw fill flag.
.ac86	20 ba af	jsr $afba			jsr 	GXCloseBitmap 				; stop drawing and exit
.ac89	18		clc				clc
.ac8a	60		rts				rts
.ac8b					_GXRFail:
.ac8b	38		sec				sec
.ac8c	60		rts				rts
.ac8d					GXDrawLineX1X0:
.ac8d	08		php				php 								; save solid/either-end
.ac8e	38		sec				sec
.ac8f	ad 40 06	lda $0640			lda		gXX1
.ac92	ed 3c 06	sbc $063c			sbc 	gXX0
.ac95	85 36		sta $36				sta 	gxzTemp0
.ac97	ad 41 06	lda $0641			lda 	gXX1+1
.ac9a	ed 3d 06	sbc $063d			sbc 	gXX0+1
.ac9d	85 37		sta $37				sta 	gxzTemp0+1
.ac9f	28		plp				plp
.aca0					GXDrawLineTemp0:
.aca0	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aca2	48		pha				pha
.aca3	a5 3d		lda $3d				lda 	gxzScreen+1
.aca5	48		pha				pha
.aca6	ad 4e 06	lda $064e			lda 	gsOffset
.aca9	48		pha				pha
.acaa	a5 0b		lda $0b				lda 	GXEditSlot
.acac	48		pha				pha
.acad	ac 4e 06	ldy $064e			ldy 	gsOffset 					; Y offset
.acb0	90 1e		bcc $acd0			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.acb2					_GXDLTLine:
.acb2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.acb4	2d 4c 06	and $064c			and 	gxANDValue
.acb7	4d 4b 06	eor $064b			eor 	gxEORValue
.acba	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acbc	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.acbe	d0 04		bne $acc4			bne 	_GXDLTNoBorrow
.acc0	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.acc2	30 2e		bmi $acf2			bmi 	_GXDLTExit
.acc4					_GXDLTNoBorrow:
.acc4	c6 36		dec $36				dec 	gxzTemp0
.acc6	c8		iny				iny 								; next slot.
.acc7	d0 e9		bne $acb2			bne 	_GXDLTLine
.acc9	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.accb	20 00 ad	jsr $ad00			jsr 	GXDLTCheckWrap				; check for new page.
.acce	80 e2		bra $acb2			bra 	_GXDLTLine
.acd0					_GXDLTEndPoints:
.acd0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.acd2	2d 4c 06	and $064c			and 	gxANDValue
.acd5	4d 4b 06	eor $064b			eor 	gxEORValue
.acd8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acda	98		tya				tya 								; advance to right side
.acdb	18		clc				clc
.acdc	65 36		adc $36				adc 	gxzTemp0
.acde	a8		tay				tay
.acdf	a5 3d		lda $3d				lda 	gxzScreen+1
.ace1	65 37		adc $37				adc 	gxzTemp0+1
.ace3	85 3d		sta $3d				sta 	gxzScreen+1
.ace5	20 00 ad	jsr $ad00			jsr 	GXDLTCheckWrap 			; fix up.
.ace8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.acea	2d 4c 06	and $064c			and 	gxANDValue
.aced	4d 4b 06	eor $064b			eor 	gxEORValue
.acf0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acf2					_GXDLTExit:
.acf2	68		pla				pla
.acf3	85 0b		sta $0b				sta 	GXEditSlot
.acf5	68		pla				pla
.acf6	8d 4e 06	sta $064e			sta 	gsOffset
.acf9	68		pla				pla
.acfa	85 3d		sta $3d				sta 	gxzScreen+1
.acfc	68		pla				pla
.acfd	85 3c		sta $3c				sta 	gxzScreen
.acff	60		rts				rts
.ad00					GXDLTCheckWrap:
.ad00	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ad02	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ad04	90 06		bcc $ad0c			bcc 	_GXDLTCWExit
.ad06	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad08	85 3d		sta $3d				sta 	gxzScreen+1
.ad0a	e6 0b		inc $0b				inc 	GXEditSlot
.ad0c					_GXDLTCWExit:
.ad0c	60		rts				rts
.ad0d					GXDrawGraphicElement:
.ad0d	8d e1 06	sta $06e1			sta 	gxSize 						; save size
.ad10	3a		dec a				dec 	a
.ad11	8d e2 06	sta $06e2			sta 	gxMask 						; and mask
.ad14	ad 45 06	lda $0645			lda 	gxBitmapsOn 				; check BMP on
.ad17	f0 67		beq $ad80			beq 	_GXSLFail
.ad19	ad 3e 06	lda $063e			lda 	gxY0 						; push Y on stack
.ad1c	48		pha				pha
.ad1d	8c e4 06	sty $06e4			sty 	gxAcquireVector+1 			; and acquisition vector
.ad20	8e e3 06	stx $06e3			stx 	gxAcquireVector
.ad23	20 b2 af	jsr $afb2			jsr 	gxOpenBitmap 				; open the bitmap.
.ad26	ad e6 06	lda $06e6			lda 	gxUseMode 					; scale bits
.ad29	4a		lsr a				lsr 	a
.ad2a	4a		lsr a				lsr 	a
.ad2b	4a		lsr a				lsr 	a
.ad2c	29 07		and #$07			and		#7
.ad2e	1a		inc a				inc 	a
.ad2f	8d e5 06	sta $06e5			sta 	gxScale
.ad32	64 38		stz $38				stz 	gxzTemp1					; start first line
.ad34					_GXGELoop:
.ad34	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ad36	2c e6 06	bit $06e6			bit 	gxUseMode 					; check for flip.
.ad39	10 06		bpl $ad41			bpl		_GXNoVFlip
.ad3b	ad e2 06	lda $06e2			lda 	gxMask
.ad3e	38		sec				sec
.ad3f	e5 38		sbc $38				sbc 	gxzTemp1
.ad41					_GXNoVFlip:
.ad41	aa		tax				tax 								; get the Xth line.
.ad42	20 82 ad	jsr $ad82			jsr 	_GXCallAcquire 				; get that data.
.ad45	ad e5 06	lda $06e5			lda 	gxScale 					; do scale identical copies of that line.
.ad48	85 39		sta $39				sta 	gxzTemp1+1
.ad4a					_GXGELoop2:
.ad4a	ad 3e 06	lda $063e			lda 	gxY0 						; off screen
.ad4d	cd 48 06	cmp $0648			cmp 	gxHeight
.ad50	b0 10		bcs $ad62			bcs 	_GXDGEExit
.ad52	20 85 ad	jsr $ad85			jsr 	GXRenderOneLine 			; render line
.ad55	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ad57	d0 f1		bne $ad4a			bne 	_GXGELoop2
.ad59	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.ad5b	a5 38		lda $38				lda 	gxzTemp1
.ad5d	cd e1 06	cmp $06e1			cmp 	gxSize
.ad60	d0 d2		bne $ad34			bne 	_GXGELoop
.ad62					_GXDGEExit:
.ad62	68		pla				pla 								; restore Y for next time
.ad63	8d 3e 06	sta $063e			sta 	gxY0
.ad66	ae e5 06	ldx $06e5			ldx 	gxScale 					; get scale (1-8)
.ad69					_GXShiftLeft:
.ad69	18		clc				clc
.ad6a	ad e1 06	lda $06e1			lda 	gxSize
.ad6d	6d 3c 06	adc $063c			adc 	gxX0
.ad70	8d 3c 06	sta $063c			sta 	gxX0
.ad73	90 03		bcc $ad78			bcc 	_GXSLNoCarry
.ad75	ee 3d 06	inc $063d			inc 	gxX0+1
.ad78					_GXSLNoCarry:
.ad78	ca		dex				dex
.ad79	d0 ee		bne $ad69			bne 	_GXShiftLeft
.ad7b	20 ba af	jsr $afba			jsr 	GXCloseBitmap
.ad7e	18		clc				clc
.ad7f	60		rts				rts
.ad80					_GXSLFail:
.ad80	38		sec				sec
.ad81	60		rts				rts
.ad82					_GXCallAcquire:
.ad82	6c e3 06	jmp ($06e3)			jmp 	(gxAcquireVector)
.ad85					GXRenderOneLine:
.ad85	20 c2 af	jsr $afc2			jsr 	GXPositionCalc 				; calculate position/offset.
.ad88	ac 4e 06	ldy $064e			ldy 	gsOffset 					; Y contains position.
.ad8b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.ad8d					_GXROLLoop1:
.ad8d	ad e5 06	lda $06e5			lda 	gxScale 					; set to do 'scale' times
.ad90	85 3b		sta $3b				sta 	gxzTemp2+1
.ad92					_GXROLLoop2:
.ad92	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.ad94	2c 49 06	bit $0649			bit 	gxMode 						; check H Flip
.ad97	50 06		bvc $ad9f			bvc 	_GXNoHFlip
.ad99	ad e2 06	lda $06e2			lda 	gxMask
.ad9c	38		sec				sec
.ad9d	e5 3a		sbc $3a				sbc 	gxzTemp2
.ad9f					_GXNoHFlip:
.ad9f	aa		tax				tax 								; read from the pixel buffer
.ada0	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.ada3	d0 07		bne $adac			bne 	_GXDraw 					; draw if non zero
.ada5	ad e6 06	lda $06e6			lda 	gxUseMode 					; check to see if solid background
.ada8	29 04		and #$04			and 	#4
.adaa	f0 0a		beq $adb6			beq 	_GXZeroPixel
.adac					_GXDraw:
.adac	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.adae	2d 4c 06	and $064c			and 	gxANDValue
.adb1	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.adb4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.adb6					_GXZeroPixel:
.adb6	c8		iny				iny 								; advance pointer
.adb7	d0 05		bne $adbe			bne 	_GXNoShift
.adb9	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.adbb	20 00 ad	jsr $ad00			jsr 	GXDLTCheckWrap				; check for new page.
.adbe					_GXNoShift:
.adbe	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.adc0	d0 d0		bne $ad92			bne 	_GXROLLoop2
.adc2	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.adc4	a5 3a		lda $3a				lda 	gxzTemp2
.adc6	cd e1 06	cmp $06e1			cmp 	gxSize
.adc9	d0 c2		bne $ad8d			bne 	_GXROLLoop1
.adcb	ee 3e 06	inc $063e			inc 	gxY0
.adce	60		rts				rts
.06e1					gxSize:
>06e1							.fill 	1
.06e2					gxMask:
>06e2							.fill 	1
.06e3					gxAcquireVector:
>06e3							.fill 	2
.06e5					gxScale:
>06e5							.fill 	1
.06e6					gxUseMode:
>06e6							.fill 	1
.adcf					GXFontHandler:
.adcf	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.add1	4d 49 06	eor $0649			eor 	gxMode
.add4	8d e6 06	sta $06e6			sta 	gxUseMode
.add7	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.add9	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.addb	26 37		rol $37				rol	 	gxzTemp0+1
.addd	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.addf	26 37		rol $37				rol	 	gxzTemp0+1
.ade1	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ade3	26 37		rol $37				rol	 	gxzTemp0+1
.ade5	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ade7	09 c0		ora #$c0			ora 	#$C0
.ade9	85 37		sta $37				sta 	gxzTemp0+1
.adeb	a9 08		lda #$08			lda 	#8 							; size 8x8
.aded	a2 f5		ldx #$f5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.adef	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.adf1	20 0d ad	jsr $ad0d			jsr 	GXDrawGraphicElement
.adf4	60		rts				rts
.adf5					GXGetGraphicDataFont:
.adf5	8a		txa				txa 								; X->Y
.adf6	a8		tay				tay
.adf7	a6 01		ldx $01				ldx 	1 							; preserve old value
.adf9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.adfb	85 01		sta $01				sta 	1
.adfd	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.adff	86 01		stx $01				stx 	1 							; put old value back.
.ae01	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ae03					_GXExpand:
.ae03	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ae06	0a		asl a				asl 	a 							; shift bit 7 into C
.ae07	90 08		bcc $ae11			bcc 	_GXNoPixel
.ae09	48		pha				pha 								; if set, set pixel buffer to current colour.
.ae0a	ad 4a 06	lda $064a			lda 	gxColour
.ae0d	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.ae10	68		pla				pla
.ae11					_GXNoPixel:
.ae11	e8		inx				inx 								; do the whole byte.
.ae12	e0 08		cpx #$08			cpx 	#8
.ae14	d0 ed		bne $ae03			bne 	_GXExpand
.ae16	60		rts				rts
.ae17					GXSpriteHandler:
.ae17	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ae19	4d 49 06	eor $0649			eor 	gxMode
.ae1c	8d e6 06	sta $06e6			sta 	gxUseMode
.ae1f	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ae21	da		phx				phx
.ae22	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap 				; can access sprite information
.ae25	68		pla				pla
.ae26	20 93 b0	jsr $b093			jsr 	GXFindSprite 				; get the sprite address
.ae29	08		php				php
.ae2a	20 ba af	jsr $afba			jsr 	GXCloseBitmap
.ae2d	28		plp				plp
.ae2e	b0 0a		bcs $ae3a			bcs		_GXSHExit 					; exit if find failed.
.ae30	ad e7 06	lda $06e7			lda 	GXSizePixels 				; return size
.ae33	a2 3b		ldx #$3b			ldx 	#GXSpriteAcquire & $FF
.ae35	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ae37	20 0d ad	jsr $ad0d			jsr 	GXDrawGraphicElement
.ae3a					_GXSHExit:
.ae3a	60		rts				rts
.ae3b					GXSpriteAcquire:
.ae3b	ad 47 06	lda $0647			lda 	GXSpritePage				; point to base page
.ae3e	85 0b		sta $0b				sta 	GXEditSlot
.ae40	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.ae42	a9 00		lda #$00			lda 	#0
.ae44	ae e8 06	ldx $06e8			ldx 	GXSizeBits
.ae47					_GXTimesRowNumber:
.ae47	18		clc				clc
.ae48	65 36		adc $36				adc 	zTemp0
.ae4a	ca		dex				dex
.ae4b	10 fa		bpl $ae47			bpl 	_GXTimesRowNumber
.ae4d	64 37		stz $37				stz 	gxzTemp0+1
.ae4f	0a		asl a				asl 	a 							; row x 2,4,6,8
.ae50	26 37		rol $37				rol 	gxzTemp0+1
.ae52	0a		asl a				asl 	a 							; row x 4,8,12,16
.ae53	26 37		rol $37				rol 	gxzTemp0+1
.ae55	0a		asl a				asl 	a 							; row x 8,16,24,32
.ae56	26 37		rol $37				rol 	gxzTemp0+1
.ae58	85 36		sta $36				sta 	gxzTemp0
.ae5a	18		clc				clc 								; add base address.
.ae5b	a5 36		lda $36				lda 	gxzTemp0
.ae5d	6d ea 06	adc $06ea			adc 	GXSpriteOffset
.ae60	85 36		sta $36				sta 	gxzTemp0
.ae62	a5 37		lda $37				lda 	gxzTemp0+1
.ae64	6d eb 06	adc $06eb			adc 	GXSpriteOffset+1
.ae67					_GXSAFindPage:
.ae67	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ae69	90 06		bcc $ae71			bcc 	_GXSAFoundPage
.ae6b	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ae6d	e6 0b		inc $0b				inc 	GXEditSlot
.ae6f	80 f6		bra $ae67			bra 	_GXSAFindPage
.ae71					_GXSAFoundPage:
.ae71	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ae73	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ae75	a0 00		ldy #$00			ldy 	#0
.ae77					_GXSACopyLoop:
.ae77	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ae79	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.ae7c	c8		iny				iny
.ae7d	cc e7 06	cpy $06e7			cpy 	GXSizePixels
.ae80	d0 f5		bne $ae77			bne 	_GXSACopyLoop
.ae82	60		rts				rts
.ae83					GXSelect:
.ae83	ad 44 06	lda $0644			lda 	gxSpritesOn
.ae86	f0 22		beq $aeaa			beq 	_GXSFail
.ae88	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ae8a	c9 40		cmp #$40			cmp 	#64
.ae8c	b0 1c		bcs $aeaa			bcs 	_GXSFail
.ae8e	8d 4f 06	sta $064f			sta 	GSCurrentSpriteID
.ae91	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ae93	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ae95	06 36		asl $36				asl 	gxzTemp0
.ae97	06 36		asl $36				asl 	gxzTemp0
.ae99	06 36		asl $36				asl 	gxzTemp0
.ae9b	2a		rol a				rol 	a
.ae9c	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ae9e	8d 51 06	sta $0651			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.aea1	85 37		sta $37				sta 	gxzTemp0+1
.aea3	a5 36		lda $36				lda 	gxzTemp0
.aea5	8d 50 06	sta $0650			sta 	GSCurrentSpriteAddr
.aea8	18		clc				clc
.aea9	60		rts				rts
.aeaa					_GXSFail:
.aeaa	38		sec				sec
.aeab	60		rts				rts
.aeac					GXSelectImage:
.aeac	ad 44 06	lda $0644			lda 	gxSpritesOn
.aeaf	f0 74		beq $af25			beq 	_GXSIFail
.aeb1	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.aeb4	f0 6f		beq $af25			beq 	_GXSIFail 					; (checking the MSB)
.aeb6	64 01		stz $01				stz 	1
.aeb8	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.aeba	d0 6b		bne $af27			bne 	_GXSIHide
.aebc	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.aebe	48		pha				pha
.aebf	20 b2 af	jsr $afb2			jsr 	GXOpenBitmap
.aec2	68		pla				pla
.aec3	20 93 b0	jsr $b093			jsr 	GXFindSprite
.aec6	b0 5a		bcs $af22			bcs 	_GXSICloseFail 				; no image
.aec8	a0 01		ldy #$01			ldy 	#1
.aeca	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr
.aecd	85 36		sta $36				sta 	gxzTemp0
.aecf	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1
.aed2	85 37		sta $37				sta 	gxzTemp0+1
.aed4	ad ea 06	lda $06ea			lda 	GXSpriteOffset
.aed7	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aed9	18		clc				clc
.aeda	ad eb 06	lda $06eb			lda 	GXSpriteOffset+1
.aedd	6d 52 06	adc $0652			adc 	GXSpriteOffsetBase
.aee0	c8		iny				iny
.aee1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aee3	ad 53 06	lda $0653			lda 	GXSpriteOffsetBase+1
.aee6	69 00		adc #$00			adc 	#0
.aee8	c8		iny				iny
.aee9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aeeb	ad e8 06	lda $06e8			lda 	GXSizeBits 					; get raw size
.aeee	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.aef0	2a		rol a				rol 	a 							; x 2
.aef1	0a		asl a				asl 	a 							; x 4
.aef2	0a		asl a				asl 	a 							; x 8
.aef3	0a		asl a				asl 	a 							; x 16
.aef4	0d e9 06	ora $06e9			ora 	GXSpriteLUT 				; Or with LUT
.aef7	0a		asl a				asl 	a 							; 1 shift
.aef8	09 01		ora #$01			ora 	#1 							; enable sprite.
.aefa	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.aefc	20 ba af	jsr $afba			jsr 	GXCloseBitmap
.aeff	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.af02	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.af05	29 3f		and #$3f			and 	#$3F
.af07	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.af0a	ad e8 06	lda $06e8			lda 	GXSizeBits 					; get bit size
.af0d	6a		ror a				ror 	a 							; shift into bits 6/7
.af0e	6a		ror a				ror 	a
.af0f	6a		ror a				ror 	a
.af10	29 c0		and #$c0			and 	#$C0
.af12	1d 94 06	ora $0694,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.af15	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.af18	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.af1b	29 7f		and #$7f			and 	#$7F
.af1d	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af20	18		clc				clc
.af21	60		rts				rts
.af22					_GXSICloseFail:
.af22	20 ba af	jsr $afba			jsr 	GXCloseBitmap
.af25					_GXSIFail:
.af25	38		sec				sec
.af26	60		rts				rts
.af27					_GXSIHide:
.af27	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.af2a	85 36		sta $36				sta 	gxzTemp0
.af2c	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1
.af2f	85 37		sta $37				sta 	gxzTemp0+1
.af31	a9 00		lda #$00			lda 	#0
.af33	92 36		sta ($36)			sta 	(gxzTemp0)
.af35	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; get sprite ID
.af38	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.af3b	09 80		ora #$80			ora 	#$80
.af3d	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af40	18		clc				clc
.af41	60		rts				rts
.af42					GXMoveSprite:
.af42	ad 44 06	lda $0644			lda 	gxSpritesOn
.af45	f0 65		beq $afac			beq 	_GXSIFail
.af47	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.af4a	f0 60		beq $afac			beq 	_GXSIFail
.af4c	85 37		sta $37				sta 	gxzTemp0+1
.af4e	a0 04		ldy #$04			ldy 	#4
.af50	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr
.af53	85 36		sta $36				sta 	gxzTemp0
.af55	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.af58	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.af5b	2a		rol a				rol 	a	 						; into bits 0,1.
.af5c	2a		rol a				rol 	a
.af5d	2a		rol a				rol 	a
.af5e	29 03		and #$03			and 	#3
.af60	aa		tax				tax
.af61	bd ae af	lda $afae,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.af64	48		pha				pha
.af65	18		clc				clc
.af66	6d 3c 06	adc $063c			adc 	gxX0						; copy position.
.af69	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af6b	c8		iny				iny
.af6c	ad 3d 06	lda $063d			lda 	gxX0+1
.af6f	69 00		adc #$00			adc 	#0
.af71	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af73	c8		iny				iny
.af74	68		pla				pla
.af75	18		clc				clc
.af76	6d 3e 06	adc $063e			adc 	gxY0
.af79	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af7b	a9 00		lda #$00			lda 	#0
.af7d	69 00		adc #$00			adc 	#0
.af7f	c8		iny				iny
.af80	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af82	4e 3d 06	lsr $063d			lsr 	gxX0+1 						; divide X by 4
.af85	6e 3c 06	ror $063c			ror 	gxX0
.af88	4e 3c 06	lsr $063c			lsr 	gxX0
.af8b	4e 3e 06	lsr $063e			lsr 	gxY0 						; divide Y by 4
.af8e	4e 3e 06	lsr $063e			lsr 	gxY0
.af91	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.af94	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x
.af97	29 80		and #$80			and 	#$80
.af99	0d 3c 06	ora $063c			ora 	gxX0
.af9c	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af9f	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.afa2	29 c0		and #$c0			and 	#$C0
.afa4	0d 3e 06	ora $063e			ora 	gxY0
.afa7	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.afaa	18		clc				clc
.afab	60		rts				rts
.afac					_GXSIFail:
.afac	38		sec				sec
.afad	60		rts				rts
.afae					_GXMSOffset:
>afae	1c						.byte 	32-8/2
>afaf	18						.byte 	32-16/2
>afb0	14						.byte 	32-24/2
>afb1	10						.byte 	32-32/2
.afb2					GXOpenBitmap:
.afb2	78		sei				sei 								; no interrupts here
.afb3	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.afb5	8d 4d 06	sta $064d			sta 	gxOriginalLUTValue
.afb8	58		cli				cli
.afb9	60		rts				rts
.afba					GXCloseBitmap:
.afba	78		sei				sei
.afbb	ad 4d 06	lda $064d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.afbe	85 0b		sta $0b				sta 	GXEditSlot
.afc0	58		cli				cli
.afc1	60		rts				rts
.afc2					GXPositionCalc:
.afc2	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.afc4	48		pha				pha
.afc5	ad 3e 06	lda $063e			lda 	GXY0 						; gxzScreen = Y0
.afc8	85 3c		sta $3c				sta 	gxzScreen
.afca	64 3d		stz $3d				stz 	gxzScreen+1
.afcc	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.afce	26 3d		rol $3d				rol 	gxzScreen+1
.afd0	06 3c		asl $3c				asl 	gxzScreen
.afd2	26 3d		rol $3d				rol 	gxzScreen+1
.afd4	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.afd5	65 3c		adc $3c				adc 	gxzScreen
.afd7	85 3c		sta $3c				sta 	gxzScreen
.afd9	90 02		bcc $afdd			bcc 	_GXPCNoCarry
.afdb	e6 3d		inc $3d				inc 	gxzScreen+1
.afdd					_GXPCNoCarry:
.afdd	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.afdf	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.afe1	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.afe3	85 36		sta $36				sta 	gxzTemp0
.afe5	64 3d		stz $3d				stz 	gxzScreen+1
.afe7	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.afe9					_GXPCMultiply32:
.afe9	06 3c		asl $3c				asl 	gxzScreen
.afeb	26 3d		rol $3d				rol 	gxzScreen+1
.afed	3a		dec a				dec 	a
.afee	d0 f9		bne $afe9			bne 	_GXPCMultiply32
.aff0	18		clc				clc
.aff1	ad 3c 06	lda $063c			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.aff4	65 3c		adc $3c				adc 	gxzScreen
.aff6	8d 4e 06	sta $064e			sta 	gsOffset
.aff9	ad 3d 06	lda $063d			lda 	GXX0+1
.affc	65 3d		adc $3d				adc 	gxzScreen+1
.affe	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b000	90 04		bcc $b006			bcc 	_GXPCNoOverflow
.b002	29 1f		and #$1f			and 	#$1F 						; fix it up
.b004	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b006					_GXPCNoOverflow:
.b006	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b008	85 3d		sta $3d				sta 	gxzScreen+1
.b00a	64 3c		stz $3c				stz 	gxzScreen
.b00c	18		clc				clc
.b00d	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b00f	6d 46 06	adc $0646			adc 	gxBasePage 					; by adding the base page
.b012	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b014	68		pla				pla
.b015	85 36		sta $36				sta 	gxzTemp0
.b017	60		rts				rts
.b018					GXMovePositionDown:
.b018	18		clc				clc 								; add 320 to offset/temp+1
.b019	ad 4e 06	lda $064e			lda 	gsOffset
.b01c	69 40		adc #$40			adc 	#64
.b01e	8d 4e 06	sta $064e			sta 	gsOffset
.b021	a5 3d		lda $3d				lda 	gxzScreen+1
.b023	69 01		adc #$01			adc 	#1
.b025	85 3d		sta $3d				sta 	gxzScreen+1
.b027	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b029	90 07		bcc $b032			bcc 	_GXMPDExit
.b02b	38		sec				sec  								; next page
.b02c	e9 20		sbc #$20			sbc 	#$20
.b02e	85 3d		sta $3d				sta 	gxzScreen+1
.b030	e6 0b		inc $0b				inc 	GXEditSlot
.b032					_GXMPDExit:
.b032	60		rts				rts
.b033					GXCollide:
.b033	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b035	aa		tax				tax
.b036	05 37		ora $37				ora 	gxzTemp0+1
.b038	29 c0		and #$c0			and 	#$C0
.b03a	38		sec				sec
.b03b	d0 53		bne $b090			bne 	_GXCollideFail 				; if either >= 64, fail.
.b03d	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b03f	b9 54 06	lda $0654,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b042	1d 54 06	ora $0654,x			ora 	GXSpriteLow,x
.b045	30 48		bmi $b08f			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b047	18		clc				clc 								; need to calculate sum of sizes.
.b048	b9 94 06	lda $0694,y			lda 	GXSpriteHigh,y
.b04b	7d 94 06	adc $0694,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b04e	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b050	6a		ror a				ror 	a 							; 5/6/7
.b051	4a		lsr a				lsr 	a 							; 4/5/6
.b052	4a		lsr a				lsr 	a 							; 3/4/5
.b053	4a		lsr a				lsr 	a 							; 2/3/4
.b054	18		clc				clc
.b055	69 08		adc #$08			adc 	#$08
.b057	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b058	4a		lsr a				lsr 	a
.b059	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b05b	b9 94 06	lda $0694,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b05e	29 3f		and #$3f			and 	#$3F
.b060	85 39		sta $39				sta 	gxzTemp1+1
.b062	38		sec				sec
.b063	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.b066	29 3f		and #$3f			and 	#$3F
.b068	e5 39		sbc $39				sbc 	gxzTemp1+1
.b06a	b0 03		bcs $b06f			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b06c	49 ff		eor #$ff			eor 	#$FF
.b06e	1a		inc a				inc 	a
.b06f					_GXCAbs1:
.b06f	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b071	b0 1c		bcs $b08f			bcs 	_GXOkayFail
.b073	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b075	38		sec				sec 								; calculate |x1-x0|
.b076	b9 54 06	lda $0654,y			lda 	GXSpriteLow,y
.b079	fd 54 06	sbc $0654,x			sbc 	GXSpriteLow,x
.b07c	b0 03		bcs $b081			bcs 	_GXCAbs2
.b07e	49 ff		eor #$ff			eor 	#$FF
.b080	1a		inc a				inc 	a
.b081					_GXCAbs2:
.b081	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b083	b0 0a		bcs $b08f			bcs 	_GXOkayFail
.b085	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b087	90 02		bcc $b08b			bcc 	_GXCHaveLowest
.b089	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b08b					_GXCHaveLowest:
.b08b	0a		asl a				asl 	a 							; scale to allow for >> 2
.b08c	0a		asl a				asl 	a
.b08d	18		clc				clc
.b08e	60		rts				rts
.b08f					_GXOkayFail:
.b08f	18		clc				clc
.b090					_GXCollideFail:
.b090	a9 ff		lda #$ff			lda 	#$FF
.b092	60		rts				rts
.b093					GXFindSprite:
.b093	aa		tax				tax
.b094	ad 47 06	lda $0647			lda 	GXSpritePage 				; access the base page of the sprite
.b097	85 0b		sta $0b				sta 	GXEditSlot
.b099	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b09c	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b09f	f0 33		beq $b0d4			beq 	_GXFSFail
.b0a1	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b0a4	8d eb 06	sta $06eb			sta 	GXSpriteOffset+1
.b0a7	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b0aa	48		pha				pha 								; save twice
.b0ab	48		pha				pha
.b0ac	29 03		and #$03			and 	#3 							; get sprite size
.b0ae	8d e8 06	sta $06e8			sta 	GXSizeBits 					; save raw (0-3)
.b0b1	aa		tax				tax
.b0b2	bd d6 b0	lda $b0d6,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b0b5	8d e7 06	sta $06e7			sta 	GXSizePixels 					; save (8/16/24/32)
.b0b8	68		pla				pla 								; get LUT
.b0b9	4a		lsr a				lsr		a
.b0ba	4a		lsr a				lsr		a
.b0bb	29 03		and #$03			and 	#3
.b0bd	8d e9 06	sta $06e9			sta 	GXSpriteLUT
.b0c0	68		pla				pla 								; address, neeeds to be x 4
.b0c1	29 f0		and #$f0			and 	#$F0
.b0c3	8d ea 06	sta $06ea			sta 	GXSpriteOffset
.b0c6	0e ea 06	asl $06ea			asl 	GXSpriteOffset
.b0c9	2e eb 06	rol $06eb			rol 	GXSpriteOffset+1
.b0cc	0e ea 06	asl $06ea			asl 	GXSpriteOffset
.b0cf	2e eb 06	rol $06eb			rol 	GXSpriteOffset+1
.b0d2	18		clc				clc
.b0d3	60		rts				rts
.b0d4					_GXFSFail:
.b0d4	38		sec				sec
.b0d5	60		rts				rts
.b0d6					_GXFXSSTTable:
>b0d6	08 10 18 20					.byte 	8,16,24,32
.06e7					GXSizePixels:
>06e7							.fill 	1
.06e8					GXSizeBits:
>06e8							.fill 	1
.06e9					GXSpriteLUT:
>06e9							.fill 	1
.06ea					GXSpriteOffset:
>06ea							.fill 	2
.b0da					GXSortXY:
.b0da	20 f8 b0	jsr $b0f8			jsr 	GXSortY 					; will be sorted on Y now
.b0dd	ad 3c 06	lda $063c			lda 	gxX0 						; compare X0 v X1
.b0e0	cd 40 06	cmp $0640			cmp 	gxX1
.b0e3	ad 3d 06	lda $063d			lda 	gXX0+1
.b0e6	ed 41 06	sbc $0641			sbc 	gXX1+1
.b0e9	90 0c		bcc $b0f7			bcc 	_GXSXYExit 					; X0 < X1 exit
.b0eb	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b0ed	a0 04		ldy #$04			ldy 	#4
.b0ef	20 0c b1	jsr $b10c			jsr 	GXSwapXY
.b0f2	e8		inx				inx
.b0f3	c8		iny				iny
.b0f4	20 0c b1	jsr $b10c			jsr 	GXSwapXY
.b0f7					_GXSXYExit:
.b0f7	60		rts				rts
.b0f8					GXSortY:
.b0f8	ad 3e 06	lda $063e			lda 	gxY0 						; if Y0 >= Y1
.b0fb	cd 42 06	cmp $0642			cmp 	gxY1
.b0fe	90 0b		bcc $b10b			bcc 	_GXSYSorted
.b100	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b102	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b104					_GXSwap1:
.b104	20 0c b1	jsr $b10c			jsr 	GXSwapXY
.b107	88		dey				dey
.b108	ca		dex				dex
.b109	10 f9		bpl $b104			bpl 	_GXSwap1
.b10b					_GXSYSorted:
.b10b	60		rts				rts
.b10c					GXSwapXY:
.b10c	bd 3c 06	lda $063c,x			lda 	gxX0,x
.b10f	48		pha				pha
.b110	b9 3c 06	lda $063c,y			lda 	gxX0,y
.b113	9d 3c 06	sta $063c,x			sta 	gxX0,x
.b116	68		pla				pla
.b117	99 3c 06	sta $063c,y			sta 	gxX0,y
.b11a	60		rts				rts

;******  Return to file: ./modules/zzzend.asm


;******  Processing file: ./modules/../../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b11b					KeywordSet0:
>b11b	00 65					.text	0,$65,""               ; $80 !0:EOF
>b11d	00 58					.text	0,$58,""               ; $81 !1:SH1
>b11f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b121	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b127	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b12f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b135	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b13c	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b144	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b14b	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b152	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b158	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b15e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b17b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b183	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b189	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b18f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b196	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b19c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b1a2	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b1aa	28
>b1ab	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b1b3	28
>b1b4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b1ba	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b1c0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b1c6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b1cd	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b1d5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b1db	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b1e1	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b1e6	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b1ea	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b1f0	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b1f8	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b1ff	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b206	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b20e	43
>b20f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b215	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b21b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b222	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b228	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b22c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b232	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b23a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b241	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b246	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b24d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b255	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b25b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b260	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b268	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b26e	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b274	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b279	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b280	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b286	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b28c	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b293	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b298	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b29e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b2a5	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b2aa	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b2ae	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b2b6	45
>b2b7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b2bf	45
>b2c0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b2c6	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b2cd	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b2d3	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b2d9	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b2de	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b2e6	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b2ed	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b2f5	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b2fb	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b2ff	ff					.text	$FF
.b300					KeywordSet1:
>b300	00 65					.text	0,$65,""               ; $80 !0:EOF
>b302	00 58					.text	0,$58,""               ; $81 !1:SH1
>b304	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b306	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b30e	4c 45
>b310	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>b318	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>b320	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>b325	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>b32b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>b330	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>b338	45
>b339	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>b33e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>b346	53
>b347	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>b34d	ff					.text	$FF
.b34e					KeywordSet2:
>b34e	00 65					.text	0,$65,""               ; $80 !0:EOF
>b350	00 58					.text	0,$58,""               ; $81 !1:SH1
>b352	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b354	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>b359	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>b35e	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>b363	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>b368	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>b36d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>b372	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>b377	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>b37c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>b381	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>b386	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>b38b	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>b390	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>b395	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>b39a	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>b39f	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>b3a4	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>b3a9	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>b3ae	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>b3b3	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>b3b8	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>b3bd	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>b3c2	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>b3c7	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>b3cc	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>b3d1	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>b3d6	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>b3db	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>b3e0	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>b3e5	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>b3ea	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>b3ef	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>b3f4	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>b3f9	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>b3fe	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>b403	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>b408	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>b40d	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>b412	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>b417	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>b41c	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>b421	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>b426	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>b42b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>b430	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>b435	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>b43a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>b43f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>b444	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>b449	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>b44e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>b453	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>b458	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>b45d	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>b462	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>b467	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>b46c	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>b471	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>b476	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>b47b	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>b480	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>b485	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>b48a	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>b48f	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>b494	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>b499	ff					.text	$FF
.b49a					ListConvertLine:
.b49a	9c 9d 04	stz $049d			stz 	tbOffset
.b49d	9c aa 04	stz $04aa			stz 	tokenBuffer
.b4a0	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b4a2	b1 30		lda ($30),y			lda 	(codePtr),y
.b4a4	aa		tax				tax
.b4a5	88		dey				dey
.b4a6	b1 30		lda ($30),y			lda 	(codePtr),y
.b4a8	20 d5 95	jsr $95d5			jsr 	ConvertInt16
.b4ab	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b4ad	86 37		stx $37				stx 	zTemp0+1
.b4af	a0 00		ldy #$00			ldy 	#0
.b4b1					_LCCopyNumber:
.b4b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4b3	20 df b5	jsr $b5df			jsr 	LCLWrite
.b4b6	c8		iny				iny
.b4b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4b9	d0 f6		bne $b4b1			bne 	_LCCopyNumber
.b4bb	20 68 90	jsr $9068			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b4be	48		pha				pha 								; save on stack
.b4bf	10 0c		bpl $b4cd			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b4c1	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b4c2	6d a6 04	adc $04a6			adc 	listIndent
.b4c5	8d a6 04	sta $04a6			sta 	listIndent
.b4c8	10 03		bpl $b4cd			bpl 	_LCNoAdjust
.b4ca	9c a6 04	stz $04a6			stz 	listIndent
.b4cd					_LCNoAdjust:
.b4cd	18		clc				clc		 							; work out actual indent.
.b4ce	ad a6 04	lda $04a6			lda 	listIndent
.b4d1	0a		asl a				asl 	a
.b4d2	69 06		adc #$06			adc 	#6
.b4d4	85 36		sta $36				sta 	zTemp0
.b4d6					_LCPadOut:
.b4d6	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b4d8	20 df b5	jsr $b5df			jsr 	LCLWrite
.b4db	ad 9d 04	lda $049d			lda 	tbOffset
.b4de	c5 36		cmp $36				cmp 	zTemp0
.b4e0	d0 f4		bne $b4d6			bne 	_LCPadOut
.b4e2	a0 03		ldy #$03			ldy 	#3 							; start position.
.b4e4					_LCMainLoop:
.b4e4	b1 30		lda ($30),y			lda 	(codePtr),y
.b4e6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b4e8	f0 17		beq $b501			beq 	_LCExit
.b4ea	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b4ec	90 1e		bcc $b50c			bcc 	_LCDoubles
.b4ee	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b4f0	90 2a		bcc $b51c			bcc 	_LCShiftPunc
.b4f2	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b4f4	90 35		bcc $b52b			bcc 	_LCPunctuation
.b4f6	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b4f8	90 3e		bcc $b538			bcc 	_LCIdentifiers
.b4fa	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b4fc	90 5a		bcc $b558			bcc 	_LCTokens
.b4fe	4c b3 b5	jmp $b5b3			jmp 	_LCData 					; 254-5 are data objects
.b501					_LCExit:
.b501	68		pla				pla 								; get old indent adjust
.b502	30 07		bmi $b50b			bmi 	_LCExit2
.b504	18		clc				clc 								; add to indent if +ve
.b505	6d a6 04	adc $04a6			adc 	listIndent
.b508	8d a6 04	sta $04a6			sta 	listIndent
.b50b					_LCExit2:
.b50b	60		rts				rts
.b50c					_LCDoubles:
.b50c	48		pha				pha
.b50d	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b50e	29 02		and #$02			and 	#2
.b510	09 3c		ora #$3c			ora 	#60 						; make < >
.b512	20 df b5	jsr $b5df			jsr 	LCLWrite
.b515	68		pla				pla 								; restore, do lower bit
.b516	29 03		and #$03			and 	#3
.b518	09 3c		ora #$3c			ora 	#60
.b51a	80 0f		bra $b52b			bra		_LCPunctuation 				; print, increment, loop
.b51c					_LCShiftPunc:
.b51c	aa		tax				tax 								; save in X
.b51d	29 07		and #$07			and 	#7 							; lower 3 bits
.b51f	f0 02		beq $b523			beq 	_LCNoAdd
.b521	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b523					_LCNoAdd:
.b523	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b525	90 02		bcc $b529			bcc 	_LCNoAdd2
.b527	09 20		ora #$20			ora 	#32 						; adds $20
.b529					_LCNoAdd2:
.b529	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b52b					_LCPunctuation:
.b52b	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b52d	d0 03		bne $b532			bne 	_LCPContinue
.b52f	20 ee b5	jsr $b5ee			jsr 	LCDeleteLastSpace
.b532					_LCPContinue:
.b532	c8		iny				iny 								; consume character
.b533	20 df b5	jsr $b5df			jsr 	LCLWrite 					; write it out.
.b536	80 ac		bra $b4e4			bra 	_LCMainLoop 				; go round again.
.b538					_LCIdentifiers:
.b538	18		clc				clc 								; convert to physical address
.b539	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b53b	85 37		sta $37				sta 	zTemp0+1
.b53d	c8		iny				iny
.b53e	b1 30		lda ($30),y			lda 	(codePtr),y
.b540	85 36		sta $36				sta 	zTemp0
.b542	c8		iny				iny
.b543	5a		phy				phy 								; save position
.b544	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b546					_LCOutIdentifier:
.b546	c8		iny				iny
.b547	b1 36		lda ($36),y			lda 	(zTemp0),y
.b549	29 7f		and #$7f			and 	#$7F
.b54b	20 2d b6	jsr $b62d			jsr 	LCLLowerCase
.b54e	20 df b5	jsr $b5df			jsr 	LCLWrite
.b551	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b553	10 f1		bpl $b546			bpl 	_LCOutIdentifier
.b555	7a		ply				ply 								; restore position
.b556	80 8c		bra $b4e4			bra 	_LCMainLoop
.b558					_LCTokens:
.b558	aa		tax				tax 								; token in X
.b559	a9 4e		lda #$4e			lda 	#((KeywordSet2) & $FF)
.b55b	85 36		sta $36				sta 	0+zTemp0
.b55d	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.b55f	85 37		sta $37				sta 	1+zTemp0
.b561	e0 82		cpx #$82			cpx 	#$82
.b563	f0 16		beq $b57b			beq 	_LCUseShift
.b565	a9 00		lda #$00			lda 	#((KeywordSet1) & $FF)
.b567	85 36		sta $36				sta 	0+zTemp0
.b569	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.b56b	85 37		sta $37				sta 	1+zTemp0
.b56d	e0 81		cpx #$81			cpx 	#$81
.b56f	f0 0a		beq $b57b			beq 	_LCUseShift
.b571	a9 1b		lda #$1b			lda 	#((KeywordSet0) & $FF)
.b573	85 36		sta $36				sta 	0+zTemp0
.b575	a9 b1		lda #$b1			lda 	#((KeywordSet0) >> 8)
.b577	85 37		sta $37				sta 	1+zTemp0
.b579	80 01		bra $b57c			bra 	_LCNoShift
.b57b					_LCUseShift:
.b57b	c8		iny				iny
.b57c					_LCNoShift:
.b57c	20 02 b6	jsr $b602			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b57f	b1 30		lda ($30),y			lda 	(codePtr),y
.b581	aa		tax				tax 								; into X
.b582					_LCFindText:
.b582	ca		dex				dex
.b583	10 0e		bpl $b593			bpl 	_LCFoundText 				; found text.
.b585	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b587	1a		inc a				inc 	a 							; one extra for size
.b588	38		sec				sec 								; one extra for checksum
.b589	65 36		adc $36				adc 	zTemp0 						; go to next token
.b58b	85 36		sta $36				sta 	zTemp0
.b58d	90 f3		bcc $b582			bcc 	_LCFindText
.b58f	e6 37		inc $37				inc 	zTemp0+1
.b591	80 ef		bra $b582			bra 	_LCFindText
.b593					_LCFoundText:
.b593	5a		phy				phy 								; save List position
.b594	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b596	aa		tax				tax
.b597	a0 02		ldy #$02			ldy 	#2
.b599					_LCCopyToken:
.b599	b1 36		lda ($36),y			lda 	(zTemp0),y
.b59b	20 2d b6	jsr $b62d			jsr 	LCLLowerCase
.b59e	20 df b5	jsr $b5df			jsr 	LCLWrite
.b5a1	c8		iny				iny
.b5a2	ca		dex				dex
.b5a3	d0 f4		bne $b599			bne 	_LCCopyToken
.b5a5	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b5a7	f0 05		beq $b5ae			beq 	_LCNoSpace
.b5a9	a9 20		lda #$20			lda 	#' '
.b5ab	20 df b5	jsr $b5df			jsr 	LCLWrite
.b5ae					_LCNoSpace:
.b5ae	7a		ply				ply 								; restore position.
.b5af	c8		iny				iny 								; consume token
.b5b0	4c e4 b4	jmp $b4e4			jmp 	_LCMainLoop 				; and go around again.
.b5b3					_LCData:
.b5b3	48		pha				pha 								; save type $FE/$FF
.b5b4	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b5b6	c9 fe		cmp #$fe			cmp 	#$FE
.b5b8	f0 02		beq $b5bc			beq 	_LCHaveOpener
.b5ba	a2 22		ldx #$22			ldx 	#'"'
.b5bc					_LCHaveOpener:
.b5bc	8a		txa				txa 								; output prefix (# or ")
.b5bd	20 df b5	jsr $b5df			jsr 	LCLWrite
.b5c0	c8		iny				iny 								; get count
.b5c1	b1 30		lda ($30),y			lda 	(codePtr),y
.b5c3	aa		tax				tax
.b5c4	c8		iny				iny 								; point at first character
.b5c5					_LCOutData:
.b5c5	b1 30		lda ($30),y			lda 	(codePtr),y
.b5c7	c9 00		cmp #$00			cmp 	#0
.b5c9	f0 03		beq $b5ce			beq 	_LCNoPrint
.b5cb	20 df b5	jsr $b5df			jsr 	LCLWrite
.b5ce					_LCNoPrint:
.b5ce	c8		iny				iny
.b5cf	ca		dex				dex
.b5d0	d0 f3		bne $b5c5			bne 	_LCOutData
.b5d2	68		pla				pla 								; closing " required ?
.b5d3	c9 ff		cmp #$ff			cmp 	#$FF
.b5d5	d0 05		bne $b5dc			bne 	_LCNoQuote
.b5d7	a9 22		lda #$22			lda 	#'"'
.b5d9	20 df b5	jsr $b5df			jsr 	LCLWrite
.b5dc					_LCNoQuote:
.b5dc	4c e4 b4	jmp $b4e4			jmp 	_LCMainLoop
.b5df					LCLWrite:
.b5df	da		phx				phx
.b5e0	ae 9d 04	ldx $049d			ldx 	tbOffset
.b5e3	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.b5e6	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.b5e9	ee 9d 04	inc $049d			inc 	tbOffset
.b5ec	fa		plx				plx
.b5ed	60		rts				rts
.b5ee					LCDeleteLastSpace:
.b5ee	48		pha				pha
.b5ef	da		phx				phx
.b5f0	ae 9d 04	ldx $049d			ldx 	tbOffset
.b5f3	f0 0a		beq $b5ff			beq 	_LCDLSExit
.b5f5	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.b5f8	c9 20		cmp #$20			cmp 	#' '
.b5fa	d0 03		bne $b5ff			bne 	_LCDLSExit
.b5fc	ce 9d 04	dec $049d			dec 	tbOffset
.b5ff					_LCDLSExit:
.b5ff	fa		plx				plx
.b600	68		pla				pla
.b601	60		rts				rts
.b602					LCCheckSpaceRequired:
.b602	ae 9d 04	ldx $049d			ldx 	tbOffset
.b605	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.b608	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b60a	f0 1b		beq $b627			beq 	_LCCSRSpace
.b60c	c9 29		cmp #$29			cmp 	#')'
.b60e	f0 17		beq $b627			beq 	_LCCSRSpace
.b610	c9 23		cmp #$23			cmp 	#'#'
.b612	f0 13		beq $b627			beq 	_LCCSRSpace
.b614	20 2d b6	jsr $b62d			jsr 	LCLLowerCase 				; saves a little effort
.b617	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b619	90 11		bcc $b62c			bcc 	_LCCSRExit
.b61b	c9 3a		cmp #$3a			cmp 	#"9"+1
.b61d	90 08		bcc $b627			bcc 	_LCCSRSpace
.b61f	c9 61		cmp #$61			cmp 	#"a"
.b621	90 09		bcc $b62c			bcc 	_LCCSRExit
.b623	c9 7b		cmp #$7b			cmp 	#"z"+1
.b625	b0 05		bcs $b62c			bcs 	_LCCSRExit
.b627					_LCCSRSpace:
.b627	a9 20		lda #$20			lda 	#' '
.b629	20 df b5	jsr $b5df			jsr 	LCLWrite
.b62c					_LCCSRExit:
.b62c	60		rts				rts
.b62d					LCLLowerCase:
.b62d	c9 41		cmp #$41			cmp 	#"A"
.b62f	90 06		bcc $b637			bcc 	_LCLLCOut
.b631	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b633	b0 02		bcs $b637			bcs 	_LCLLCOut
.b635	69 20		adc #$20			adc 	#$20
.b637					_LCLLCOut:
.b637	60		rts				rts
.b638					LCLUpperCase:
.b638	c9 61		cmp #$61			cmp 	#"a"
.b63a	90 06		bcc $b642			bcc 	_LCLUCOut
.b63c	c9 7b		cmp #$7b			cmp 	#"z"+1
.b63e	b0 02		bcs $b642			bcs 	_LCLUCOut
.b640	e9 1f		sbc #$1f			sbc 	#$1F
.b642					_LCLUCOut:
.b642	60		rts				rts
.b643					TokeniseSearchTable:
.b643	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b645	85 36		sta $36				sta 	zTemp0
.b647	a0 00		ldy #$00			ldy 	#0
.b649	a9 80		lda #$80			lda 	#$80 						; token #
.b64b	85 38		sta $38				sta 	zTemp1
.b64d					_TSTLoop:
.b64d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b64f	30 49		bmi $b69a			bmi 	_TSTFail 					; -ve = end of table
.b651	f0 2e		beq $b681			beq 	_TSTNext 					; zero, check next it's a dummy
.b653	c8		iny				iny 								; get the hash
.b654	b1 36		lda ($36),y			lda 	(zTemp0),y
.b656	88		dey				dey
.b657	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b65a	d0 25		bne $b681			bne 	_TSTNext
.b65c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b65f	38		sec				sec
.b660	ed 80 04	sbc $0480			sbc 	identStart
.b663	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b665	d0 1a		bne $b681			bne 	_TSTNext
.b667	5a		phy				phy 								; save Y , we might fail
.b668	c8		iny				iny 								; point to text
.b669	c8		iny				iny
.b66a	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b66d					_TSTCompareName:
.b66d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.b670	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b672	d0 0c		bne $b680			bne 	_TSTNextPullY 				; fail, pullY and do next
.b674	e8		inx				inx
.b675	c8		iny				iny
.b676	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b679	d0 f2		bne $b66d			bne 	_TSTCompareName
.b67b	7a		ply				ply 								; throw Y
.b67c	a5 38		lda $38				lda 	zTemp1 						; get token #
.b67e	38		sec				sec 								; return with CS = passed.
.b67f	60		rts				rts
.b680					_TSTNextPullY:
.b680	7a		ply				ply 								; restore current, fall through.
.b681					_TSTNext:
.b681	e6 38		inc $38				inc 	zTemp1 						; token counter
.b683	98		tya				tya
.b684	18		clc				clc
.b685	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b687	1a		inc a				inc 	a 							; +1
.b688	1a		inc a				inc 	a 							; +2
.b689	a8		tay				tay
.b68a	10 c1		bpl $b64d			bpl 	_TSTLoop 					; if Y < $80 loop back
.b68c	98		tya				tya 								; add Y to zTemp0 and reset Y
.b68d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b68f	18		clc				clc  								; but have tables > 255 bytes
.b690	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b692	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b694	90 b7		bcc $b64d			bcc 	_TSTLoop
.b696	e6 37		inc $37				inc 	zTemp0+1
.b698	80 b3		bra $b64d			bra 	_TSTLoop
.b69a					_TSTFail:
.b69a	18		clc				clc
.b69b	60		rts				rts
.b69c					TokeniseLine:
.b69c	20 24 b8	jsr $b824			jsr 	FixLineBufferCase 			; fix line case
.b69f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b6a1	8d a7 04	sta $04a7			sta 	tokenOffset
.b6a4	9c a8 04	stz $04a8			stz 	tokenLineNumber
.b6a7	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.b6aa	a2 ff		ldx #$ff			ldx 	#$FF
.b6ac					_TKFindFirst:
.b6ac	e8		inx				inx
.b6ad	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b6b0	f0 79		beq $b72b			beq 	_TKExit
.b6b2	c9 20		cmp #$20			cmp 	#' '
.b6b4	90 f6		bcc $b6ac			bcc 	_TKFindFirst
.b6b6	c9 30		cmp #$30			cmp 	#'0'
.b6b8	90 07		bcc $b6c1			bcc 	_TKNoLineNumber
.b6ba	c9 3a		cmp #$3a			cmp 	#'9'+1
.b6bc	b0 03		bcs $b6c1			bcs 	_TKNoLineNumber
.b6be	20 4e b8	jsr $b84e			jsr 	TokeniseExtractLineNumber
.b6c1					_TKNoLineNumber:
.b6c1					_TKTokeniseLoop:
.b6c1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b6c4	f0 65		beq $b72b			beq 	_TKExit
.b6c6	e8		inx				inx
.b6c7	c9 20		cmp #$20			cmp 	#' '
.b6c9	f0 f6		beq $b6c1			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b6cb	ca		dex				dex 								; undo last get, A contains character, X is position.
.b6cc	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b6ce	f0 61		beq $b731			beq 	_TKTokeniseIdentifier
.b6d0	c9 41		cmp #$41			cmp 	#'A'
.b6d2	90 04		bcc $b6d8			bcc 	_TKTokenisePunctuation
.b6d4	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b6d6	90 59		bcc $b731			bcc 	_TKTokeniseIdentifier
.b6d8					_TKTokenisePunctuation:
.b6d8	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b6da	f0 27		beq $b703			beq 	_TKString
.b6dc	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b6de	f0 28		beq $b708			beq 	_TKHexConstant
.b6e0	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b6e2	f0 29		beq $b70d			beq 	_TKCheckDouble
.b6e4	c9 3e		cmp #$3e			cmp 	#'>'
.b6e6	f0 25		beq $b70d			beq 	_TKCheckDouble
.b6e8					_TKStandardPunctuation:
.b6e8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.b6eb	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b6ed	90 0e		bcc $b6fd			bcc 	_TKNoShift
.b6ef	48		pha				pha 								; save
.b6f0	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b6f2	85 36		sta $36				sta 	zTemp0
.b6f4	68		pla				pla
.b6f5	29 20		and #$20			and 	#32 						; bit 5
.b6f7	4a		lsr a				lsr 	a 							; shift into bit 3
.b6f8	4a		lsr a				lsr 	a
.b6f9	05 36		ora $36				ora 	zTemp0
.b6fb	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b6fd					_TKNoShift:
.b6fd	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte 			; write the punctuation character
.b700	e8		inx				inx 								; consume the character
.b701	80 be		bra $b6c1			bra 	_TKTokeniseLoop 			; and loop round again.
.b703					_TKString:
.b703	20 b3 b7	jsr $b7b3			jsr 	TokeniseString
.b706	80 b9		bra $b6c1			bra 	_TKTokeniseLoop
.b708					_TKHexConstant:
.b708	20 ee b7	jsr $b7ee			jsr 	TokeniseHexConstant
.b70b	80 b4		bra $b6c1			bra 	_TKTokeniseLoop
.b70d					_TKCheckDouble:
.b70d	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.b710	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b712	90 d4		bcc $b6e8			bcc 	_TKStandardPunctuation
.b714	c9 3f		cmp #$3f			cmp 	#'>'+1
.b716	b0 d0		bcs $b6e8			bcs 	_TKStandardPunctuation
.b718	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b71b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b71d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b71e	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b721	38		sec				sec
.b722	e9 3c		sbc #$3c			sbc 	#'<'
.b724	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b727	e8		inx				inx 								; consume both
.b728	e8		inx				inx
.b729	80 96		bra $b6c1			bra 	_TKTokeniseLoop
.b72b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b72d	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b730	60		rts				rts
.b731					_TKTokeniseIdentifier:
.b731	8e 80 04	stx $0480			stx 	identStart 					; save start
.b734	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b737					_TKCheckLoop:
.b737	e8		inx				inx 								; look at next, we know first is identifier.
.b738	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.b73b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b73d	f0 f8		beq $b737			beq 	_TKCheckLoop
.b73f	c9 30		cmp #$30			cmp	 	#"0"
.b741	90 0c		bcc $b74f			bcc 	_TKEndIdentifier
.b743	c9 3a		cmp #$3a			cmp 	#"9"+1
.b745	90 f0		bcc $b737			bcc 	_TKCheckLoop
.b747	c9 41		cmp #$41			cmp	 	#"A"
.b749	90 04		bcc $b74f			bcc 	_TKEndIdentifier
.b74b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b74d	90 e8		bcc $b737			bcc 	_TKCheckLoop
.b74f					_TKEndIdentifier:
.b74f	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b752	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b754	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b756	f0 06		beq $b75e			beq 	_TKHasTypeCharacter
.b758	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b75a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b75c	d0 07		bne $b765			bne 	_TKNoTypeCharacter
.b75e					_TKHasTypeCharacter:
.b75e	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b761	e8		inx				inx 								; read next
.b762	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b765					_TKNoTypeCharacter:
.b765	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b767	d0 09		bne $b772			bne 	_TKNoArray
.b769	e8		inx				inx 								; skip the (
.b76a	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b76d	09 04		ora #$04			ora 	#$04
.b76f	8d 84 04	sta $0484			sta 	identTypeByte
.b772					_TKNoArray:
.b772	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b775	20 0f b8	jsr $b80f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b778	a0 b1		ldy #$b1			ldy 	#(KeywordSet0) >> 8
.b77a	a9 1b		lda #$1b			lda 	#(KeywordSet0) & $FF
.b77c	20 43 b6	jsr $b643			jsr 	TokeniseSearchTable
.b77f	a2 00		ldx #$00			ldx 	#0
.b781	b0 1f		bcs $b7a2			bcs 	_TKFoundToken
.b783	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.b785	a9 00		lda #$00			lda 	#(KeywordSet1) & $FF
.b787	20 43 b6	jsr $b643			jsr 	TokeniseSearchTable
.b78a	a2 81		ldx #$81			ldx 	#$81
.b78c	b0 14		bcs $b7a2			bcs 	_TKFoundToken
.b78e	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.b790	a9 4e		lda #$4e			lda 	#(KeywordSet2) & $FF
.b792	20 43 b6	jsr $b643			jsr 	TokeniseSearchTable
.b795	a2 82		ldx #$82			ldx 	#$82
.b797	b0 09		bcs $b7a2			bcs 	_TKFoundToken
.b799	20 9f b8	jsr $b89f			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b79c	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b79f	4c c1 b6	jmp $b6c1			jmp 	_TKTokeniseLoop 			; and go round again.
.b7a2					_TKFoundToken:
.b7a2	48		pha				pha 								; save token
.b7a3	8a		txa				txa 								; shift in X, is there one ?
.b7a4	f0 03		beq $b7a9			beq 	_TKNoTShift
.b7a6	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte 			; if so, write it out
.b7a9					_TKNoTShift:
.b7a9	68		pla				pla 								; restore and write token
.b7aa	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7ad	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b7b0	4c c1 b6	jmp $b6c1			jmp 	_TKTokeniseLoop 			; and go round again.
.b7b3					TokeniseString:
.b7b3	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b7b5	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7b8	e8		inx				inx									; start of quoted string.
.b7b9	da		phx				phx 								; push start of string on top
.b7ba	ca		dex				dex
.b7bb					_TSFindEnd:
.b7bb	e8		inx				inx
.b7bc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.b7bf	f0 04		beq $b7c5			beq 	_TSEndOfString
.b7c1	c9 22		cmp #$22			cmp 	#'"'
.b7c3	d0 f6		bne $b7bb			bne 	_TSFindEnd
.b7c5					_TSEndOfString:
.b7c5	7a		ply				ply  								; so now Y is first character, X is character after end.
.b7c6	48		pha				pha 								; save terminating character
.b7c7	20 cf b7	jsr $b7cf			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b7ca	68		pla				pla 								; terminating character
.b7cb	f0 01		beq $b7ce			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b7cd	e8		inx				inx
.b7ce					_TSNotQuote:
.b7ce	60		rts				rts
.b7cf					TOWriteBlockXY:
.b7cf	86 36		stx $36				stx 	zTemp0 						; write end character
.b7d1	98		tya				tya
.b7d2	49 ff		eor #$ff			eor 	#$FF
.b7d4	38		sec				sec
.b7d5	65 36		adc $36				adc 	zTemp0
.b7d7	1a		inc a				inc 	a 							; one extra for NULL
.b7d8	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7db					_TOBlockLoop:
.b7db	c4 36		cpy $36				cpy 	zTemp0
.b7dd	f0 09		beq $b7e8			beq 	_TOBlockExit
.b7df	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.b7e2	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7e5	c8		iny				iny
.b7e6	80 f3		bra $b7db			bra 	_TOBlockLoop
.b7e8					_TOBlockExit:
.b7e8	a9 00		lda #$00			lda 	#0
.b7ea	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7ed	60		rts				rts
.b7ee					TokeniseHexConstant:
.b7ee	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b7f0	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b7f3	e8		inx				inx									; start of quoted string.
.b7f4	da		phx				phx 								; push start of constant on top
.b7f5	ca		dex				dex
.b7f6					_THFindLoop:
.b7f6	e8		inx				inx
.b7f7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b7fa	c9 30		cmp #$30			cmp 	#"0"
.b7fc	90 0c		bcc $b80a			bcc 	_THFoundEnd
.b7fe	c9 3a		cmp #$3a			cmp 	#"9"+1
.b800	90 f4		bcc $b7f6			bcc 	_THFindLoop
.b802	c9 41		cmp #$41			cmp 	#"A"
.b804	90 04		bcc $b80a			bcc 	_THFoundEnd
.b806	c9 47		cmp #$47			cmp 	#"F"+1
.b808	90 ec		bcc $b7f6			bcc 	_THFindLoop
.b80a					_THFoundEnd:
.b80a	7a		ply				ply 								; restore start
.b80b	20 cf b7	jsr $b7cf			jsr 	TOWriteBlockXY 				; output the block
.b80e	60		rts				rts
.b80f					TokeniseCalculateHash:
.b80f	da		phx				phx
.b810	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b813	a9 00		lda #$00			lda 	#0
.b815					_TCHLoop:
.b815	18		clc				clc
.b816	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.b819	e8		inx				inx
.b81a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b81d	d0 f6		bne $b815			bne 	_TCHLoop
.b81f	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b822	fa		plx				plx
.b823	60		rts				rts
.b824					FixLineBufferCase:
.b824	a2 00		ldx #$00			ldx 	#0
.b826					_FLBCLoop:
.b826	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.b829	f0 22		beq $b84d			beq 	_FLBCExit 					; end of string.
.b82b	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b82d	f0 11		beq $b840			beq 	_FLBCInQuotes
.b82f	e8		inx				inx
.b830	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b832	90 f2		bcc $b826			bcc 	_FLBCLoop
.b834	c9 7b		cmp #$7b			cmp 	#'z'+1
.b836	b0 ee		bcs $b826			bcs 	_FLBCLoop
.b838	38		sec				sec 								; make U/C
.b839	e9 20		sbc #$20			sbc 	#32
.b83b	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.b83e	80 e6		bra $b826			bra 	_FLBCLoop
.b840					_FLBCInQuotes:
.b840	e8		inx				inx 								; advance
.b841	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.b844	f0 07		beq $b84d			beq 	_FLBCExit 					; exit on EOS
.b846	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b848	d0 f6		bne $b840			bne 	_FLBCInQuotes
.b84a	e8		inx				inx 								; skip over it
.b84b	80 d9		bra $b826			bra 	_FLBCLoop
.b84d					_FLBCExit:
.b84d	60		rts				rts
.b84e					TokeniseExtractLineNumber:
.b84e	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.b851	48		pha				pha
.b852	ad a8 04	lda $04a8			lda 	tokenLineNumber
.b855	48		pha				pha
.b856	20 8c b8	jsr $b88c			jsr 	_TELNTimes2 				; line # x 4
.b859	20 8c b8	jsr $b88c			jsr 	_TELNTimes2 				; line # x 2
.b85c	18		clc				clc 								; add stacked value
.b85d	68		pla				pla
.b85e	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b861	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b864	68		pla				pla
.b865	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.b868	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.b86b	20 8c b8	jsr $b88c			jsr 	_TELNTimes2 				; line # x 10
.b86e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.b871	e8		inx				inx
.b872	29 0f		and #$0f			and 	#15 						; add to line #
.b874	18		clc				clc
.b875	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b878	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b87b	90 03		bcc $b880			bcc 	_TLENNoCarry
.b87d	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.b880					_TLENNoCarry:
.b880	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.b883	c9 30		cmp #$30			cmp 	#'0'
.b885	90 04		bcc $b88b			bcc 	_TLENExit
.b887	c9 3a		cmp #$3a			cmp 	#'9'+1
.b889	90 c3		bcc $b84e			bcc 	TokeniseExtractLineNumber
.b88b					_TLENExit:
.b88b	60		rts				rts
.b88c					_TELNTimes2:
.b88c	0e a8 04	asl $04a8			asl 	tokenLineNumber
.b88f	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.b892	60		rts				rts
.b893					TokeniseWriteByte:
.b893	da		phx				phx
.b894	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.b897	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.b89a	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.b89d	fa		plx				plx
.b89e	60		rts				rts
.b89f					CheckCreateVariableRecord:
.b89f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b8a1	85 36		sta $36				sta 	0+zTemp0
.b8a3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b8a5	85 37		sta $37				sta 	1+zTemp0
.b8a7					_CCVSearch:
.b8a7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b8a9	f0 2c		beq $b8d7			beq 	_CCVFail
.b8ab	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b8ad	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b8af	cd 83 04	cmp $0483			cmp 	identHash
.b8b2	d0 16		bne $b8ca			bne 	_CCVNext
.b8b4	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b8b6	ae 80 04	ldx $0480			ldx 	identStart
.b8b9					_CCVCompare:
.b8b9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b8bc	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b8be	e8		inx				inx 								; advance pointers
.b8bf	c8		iny				iny
.b8c0	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b8c1	d0 07		bne $b8ca			bne 	_CCVNext  					; didn't match go to next.
.b8c3	90 f4		bcc $b8b9			bcc 	_CCVCompare 				; not finished yet.
.b8c5	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b8c8	f0 41		beq $b90b			beq 	_CCVFound 					; yes, we were successful
.b8ca					_CCVNext:
.b8ca	18		clc				clc
.b8cb	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b8cd	65 36		adc $36				adc 	zTemp0
.b8cf	85 36		sta $36				sta 	zTemp0
.b8d1	90 d4		bcc $b8a7			bcc 	_CCVSearch
.b8d3	e6 37		inc $37				inc 	zTemp0+1
.b8d5	80 d0		bra $b8a7			bra 	_CCVSearch
.b8d7					_CCVFail:
.b8d7	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b8d9	ad 83 04	lda $0483			lda 	identHash
.b8dc	91 36		sta ($36),y			sta 	(zTemp0),y
.b8de	c8		iny				iny 								; offset 2 is the type byte
.b8df	ad 84 04	lda $0484			lda 	identTypeByte
.b8e2	91 36		sta ($36),y			sta 	(zTemp0),y
.b8e4	c8		iny				iny
.b8e5					_CCVData:
.b8e5	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b8e7	91 36		sta ($36),y			sta 	(zTemp0),y
.b8e9	c8		iny				iny
.b8ea	c0 08		cpy #$08			cpy 	#8
.b8ec	90 f7		bcc $b8e5			bcc 	_CCVData
.b8ee	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b8f1					_CCVCopyName:
.b8f1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b8f4	91 36		sta ($36),y			sta 	(zTemp0),y
.b8f6	e8		inx				inx
.b8f7	c8		iny				iny
.b8f8	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b8fb	d0 f4		bne $b8f1			bne 	_CCVCopyName
.b8fd	98		tya				tya 								; patch offset
.b8fe	92 36		sta ($36)			sta 	(zTemp0)
.b900	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b902	91 36		sta ($36),y			sta 	(zTemp0),y
.b904	88		dey				dey
.b905	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b907	09 80		ora #$80			ora 	#$80
.b909	91 36		sta ($36),y			sta 	(zTemp0),y
.b90b					_CCVFound:
.b90b	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b90d	38		sec				sec
.b90e	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b910	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b912	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b915	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b917	20 93 b8	jsr $b893			jsr 	TokeniseWriteByte
.b91a	60		rts				rts

;******  Return to file: ./modules/zzzend.asm


;******  Return to file: _basic.asm


;******  End of listing
